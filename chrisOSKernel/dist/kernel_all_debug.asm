
Debug/cross-Linux/kernel:     file format elf32-i386


Disassembly of section .text:

01000000 <dumpregs>:
kernelLoadAddress():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:22

.globl dumpregs
.type dumpregs, @function
dumpregs:
.code32
        mov exceptionAX, eax
 1000000:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:23
        mov exceptionBX, ebx
 1000005:	89 1d f4 96 12 00    	mov    DWORD PTR ds:0x1296f4,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:24
        mov exceptionCX, ecx
 100000b:	89 0d f8 96 12 00    	mov    DWORD PTR ds:0x1296f8,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:25
        mov exceptionDX, edx
 1000011:	89 15 fc 96 12 00    	mov    DWORD PTR ds:0x1296fc,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:26
        mov exceptionSI, esi
 1000017:	89 35 00 97 12 00    	mov    DWORD PTR ds:0x129700,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:27
        mov exceptionDI, edi
 100001d:	89 3d 04 97 12 00    	mov    DWORD PTR ds:0x129704,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:28
        mov exceptionBP, eax
 1000023:	a3 08 97 12 00       	mov    ds:0x129708,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:29
        mov eax, cr0
 1000028:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:30
        mov exceptionCR0, eax
 100002b:	a3 0c 97 12 00       	mov    ds:0x12970c,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:31
        mov eax, cr3
 1000030:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:32
        mov exceptionCR3, eax
 1000033:	a3 10 97 12 00       	mov    ds:0x129710,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:33
        mov eax, cr4
 1000038:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:34
        mov exceptionCR4, eax
 100003b:	a3 14 97 12 00       	mov    ds:0x129714,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:35
        mov eax, exceptionAX
 1000040:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:36
        ret 
 1000045:	c3                   	ret    

01000046 <storeGDT>:
storeGDT():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:42

.global storeGDT
.type storeGDT, @function
storeGDT:
.code32
    mov eax,[esp+4]
 1000046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:43
    sgdt [eax]
 100004a:	0f 01 00             	sgdtd  [eax]
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:44
    ret
 100004d:	c3                   	ret    

0100004e <getCS>:
getCS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:50

.global getCS
.type getCS, @function
getCS:
.code32
    push cs
 100004e:	0e                   	push   cs
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:51
    pop eax
 100004f:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:52
    ret
 1000050:	c3                   	ret    

01000051 <getDS>:
getDS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:58

.global getDS
.type getDS, @function
getDS:
.code32
    push DS
 1000051:	1e                   	push   ds
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:59
    pop eax
 1000052:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:60
    ret
 1000053:	c3                   	ret    

01000054 <getES>:
getES():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:66

.global getES
.type getES, @function
getES:
.code32
    push ES
 1000054:	06                   	push   es
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:67
    pop eax
 1000055:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:68
    ret
 1000056:	c3                   	ret    

01000057 <getFS>:
getFS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:74

.global getFS
.type getFS, @function
getFS:
.code32
    push FS
 1000057:	0f a0                	push   fs
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:75
    pop eax
 1000059:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:76
    ret
 100005a:	c3                   	ret    

0100005b <getGS>:
getGS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:82

.global getGS
.type getGS, @function
getGS:
.code32
    push GS
 100005b:	0f a8                	push   gs
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:83
    pop eax
 100005d:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:84
    ret
 100005e:	c3                   	ret    

0100005f <getSS>:
getSS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:90

.global getSS
.type getSS, @function
getSS:
.code32
    push SS
 100005f:	16                   	push   ss
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:91
    pop eax
 1000060:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:92
    ret
 1000061:	c3                   	ret    

01000062 <getESP>:
getESP():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:98

.global getESP
.type getESP, @function
getESP:
.code32
    push ESP
 1000062:	54                   	push   esp
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:99
    pop eax
 1000063:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:100
    sub eax,4
 1000064:	83 e8 04             	sub    eax,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:101
    ret
 1000067:	c3                   	ret    

01000068 <getEFlags>:
getEFlags():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:108

.global getEFlags
.type getEFlags, @function
getEFlags:
.code32
    pushfd
 1000068:	9c                   	pushf  
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:109
    pop eax
 1000069:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:110
    ret
 100006a:	c3                   	ret    

0100006b <enableCR0_WP>:
enableCR0_WP():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:116


.global enableCR0_WP
.type enableCR0_WP, @function
enableCR0_WP:
    push eax
 100006b:	50                   	push   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:117
    mov eax,cr0
 100006c:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:118
    or eax,0x10000
 100006f:	0d 00 00 01 00       	or     eax,0x10000
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:119
    mov cr0,eax
 1000074:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:120
    pop eax
 1000077:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:121
    ret
 1000078:	c3                   	ret    
 1000079:	66 90                	xchg   ax,ax
 100007b:	90                   	nop

0100007c <AhciIssueCmd>:
AhciIssueCmd():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:38


// Check device type

int AhciIssueCmd(volatile HBA_PORT *port,int cmdslot) 
{
 100007c:	57                   	push   edi
 100007d:	56                   	push   esi
 100007e:	53                   	push   ebx
 100007f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:43
    unsigned i;
    int delay = 0;
    int Status = true;

    port->cmd.ST=0;
 1000083:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000086:	83 e0 fe             	and    eax,0xfffffffe
 1000089:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:45
    //make sure bit0 Start set to enable process cmd list
    if (!(port->cmd.ST)) {
 100008c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100008f:	a8 01                	test   al,0x1
 1000091:	75 27                	jne    10000ba <AhciIssueCmd+0x3e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:46
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - ST was cleared, setting FRE and STE\n");
 1000093:	83 ec 08             	sub    esp,0x8
 1000096:	68 4c 9d 02 01       	push   0x1029d4c
 100009b:	68 00 20 00 00       	push   0x2000
 10000a0:	e8 62 9c 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:47
        port->cmd.FRE = 1;
 10000a5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10000a8:	83 c8 10             	or     eax,0x10
 10000ab:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:48
        port->cmd.ST = 1;
 10000ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10000b1:	83 c8 01             	or     eax,0x1
 10000b4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
 10000b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52
    }

    //if err status or busy, reset PxCMD.
    if ((port->pxis.TFES || port->pxis.HBFS || port->pxis.HBDS || port->pxis.IFS || port->pxis.INFS || port->pxis.OFS || port->pxis.IPMS) || (port->tfd.BSY || port->tfd.BSY)) {
 10000ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000bd:	a9 00 00 00 40       	test   eax,0x40000000
 10000c2:	75 4a                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 1)
 10000c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000c7:	a9 00 00 00 20       	test   eax,0x20000000
 10000cc:	75 40                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 2)
 10000ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000d1:	a9 00 00 00 10       	test   eax,0x10000000
 10000d6:	75 36                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 3)
 10000d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000db:	a9 00 00 00 08       	test   eax,0x8000000
 10000e0:	75 2c                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 4)
 10000e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000e5:	a9 00 00 00 04       	test   eax,0x4000000
 10000ea:	75 22                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 5)
 10000ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000ef:	a9 00 00 00 01       	test   eax,0x1000000
 10000f4:	75 18                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 6)
 10000f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000f9:	a9 00 00 80 00       	test   eax,0x800000
 10000fe:	75 0e                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 7)
 1000100:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
 1000103:	a8 80                	test   al,0x80
 1000105:	75 07                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 8)
 1000107:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
 100010a:	a8 80                	test   al,0x80
 100010c:	74 5b                	je     1000169 <AhciIssueCmd+0xed>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:53
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - clearing error/busy\n");
 100010e:	83 ec 08             	sub    esp,0x8
 1000111:	68 88 9d 02 01       	push   0x1029d88
 1000116:	68 00 20 00 00       	push   0x2000
 100011b:	e8 e7 9b 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:54
        port->cmd.ST &= ~port->cmd.ST;
 1000120:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000123:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
 1000126:	83 e0 01             	and    eax,0x1
 1000129:	f7 d0                	not    eax
 100012b:	21 d0                	and    eax,edx
 100012d:	83 e0 01             	and    eax,0x1
 1000130:	89 c2                	mov    edx,eax
 1000132:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000135:	83 e0 fe             	and    eax,0xfffffffe
 1000138:	09 d0                	or     eax,edx
 100013a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:56
        //Start|Command List Override|FIS Receive Enable
        port->cmd.CLO=1;
 100013d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000140:	83 c8 08             	or     eax,0x8
 1000143:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:57
        while (port->cmd.CLO);
 1000146:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:57 (discriminator 1)
 1000149:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100014c:	a8 08                	test   al,0x8
 100014e:	75 f9                	jne    1000149 <AhciIssueCmd+0xcd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:58
        port->cmd.ST = 1;
 1000150:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000153:	83 c8 01             	or     eax,0x1
 1000156:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:59
        port->cmd.FRE = 1;
 1000159:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100015c:	83 c8 10             	or     eax,0x10
 100015f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:60
        port->pxis.AsUlong = 0;
 1000162:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:64
    }

    //issue cmd
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
 1000169:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 100016c:	83 ec 04             	sub    esp,0x4
 100016f:	50                   	push   eax
 1000170:	68 b4 9d 02 01       	push   0x1029db4
 1000175:	68 00 20 00 00       	push   0x2000
 100017a:	e8 88 9b 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:65
    port->ci |= (1 << cmdslot);
 100017f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 1000182:	bf 01 00 00 00       	mov    edi,0x1
 1000187:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
 100018b:	d3 e7                	shl    edi,cl
 100018d:	09 f8                	or     eax,edi
 100018f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:66
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);
 1000192:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 1000195:	83 c4 0c             	add    esp,0xc
 1000198:	50                   	push   eax
 1000199:	68 e8 9d 02 01       	push   0x1029de8
 100019e:	68 00 20 00 00       	push   0x2000
 10001a3:	e8 5f 9b 00 00       	call   1009d07 <printd>
 10001a8:	83 c4 10             	add    esp,0x10
 10001ab:	be 64 00 00 00       	mov    esi,0x64
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:70

    //wait cmd
    for (i = 0; i < 100; i++) {
        wait(50);
 10001b0:	83 ec 0c             	sub    esp,0xc
 10001b3:	6a 32                	push   0x32
 10001b5:	e8 4e a5 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:71
        if (!port->tfd.BSY)
 10001ba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
 10001bd:	83 c4 10             	add    esp,0x10
 10001c0:	a8 80                	test   al,0x80
 10001c2:	75 13                	jne    10001d7 <AhciIssueCmd+0x15b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:79

    // Wait for completion
    delay = 5000;
    while (delay > 0) {

        if ((port->ci & (1 << cmdslot)) == 0)
 10001c4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 10001c7:	85 c7                	test   edi,eax
 10001c9:	74 54                	je     100021f <AhciIssueCmd+0x1a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:83
            break;
        // In some longer duration reads, it may be helpful to spin on the DPS bit 
        // in the PxIS port field as well (1 << 5)
        if (port->pxis.TFES) // Task file error
 10001cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10001ce:	a9 00 00 00 40       	test   eax,0x40000000
 10001d3:	74 6b                	je     1000240 <AhciIssueCmd+0x1c4>
 10001d5:	eb 18                	jmp    10001ef <AhciIssueCmd+0x173>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:69 (discriminator 2)
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
    port->ci |= (1 << cmdslot);
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);

    //wait cmd
    for (i = 0; i < 100; i++) {
 10001d7:	83 ee 01             	sub    esi,0x1
 10001da:	75 d4                	jne    10001b0 <AhciIssueCmd+0x134>
 10001dc:	eb e6                	jmp    10001c4 <AhciIssueCmd+0x148>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:79

    // Wait for completion
    delay = 5000;
    while (delay > 0) {

        if ((port->ci & (1 << cmdslot)) == 0)
 10001de:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 10001e1:	85 c7                	test   edi,eax
 10001e3:	74 3f                	je     1000224 <AhciIssueCmd+0x1a8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:83
            break;
        // In some longer duration reads, it may be helpful to spin on the DPS bit 
        // in the PxIS port field as well (1 << 5)
        if (port->pxis.TFES) // Task file error
 10001e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10001e8:	a9 00 00 00 40       	test   eax,0x40000000
 10001ed:	74 1c                	je     100020b <AhciIssueCmd+0x18f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:85
        {
            printd(DEBUG_AHCI, "AHCI: Read disk error\n");
 10001ef:	83 ec 08             	sub    esp,0x8
 10001f2:	68 6c 3f 04 01       	push   0x1043f6c
 10001f7:	68 00 20 00 00       	push   0x2000
 10001fc:	e8 06 9b 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:86
            return -1;
 1000201:	83 c4 10             	add    esp,0x10
 1000204:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1000209:	eb 51                	jmp    100025c <AhciIssueCmd+0x1e0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:88
        }
        wait(20);
 100020b:	83 ec 0c             	sub    esp,0xc
 100020e:	6a 14                	push   0x14
 1000210:	e8 f3 a4 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:77
            break;
    }

    // Wait for completion
    delay = 5000;
    while (delay > 0) {
 1000215:	83 c4 10             	add    esp,0x10
 1000218:	83 ee 01             	sub    esi,0x1
 100021b:	75 c1                	jne    10001de <AhciIssueCmd+0x162>
 100021d:	eb 35                	jmp    1000254 <AhciIssueCmd+0x1d8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:79

        if ((port->ci & (1 << cmdslot)) == 0)
 100021f:	be 88 13 00 00       	mov    esi,0x1388
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:92
        }
        wait(20);
        delay -= 1;
    }

    if (port->tfd.ERR || delay == 0)
 1000224:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
 1000227:	83 e0 01             	and    eax,0x1
 100022a:	85 f6                	test   esi,esi
 100022c:	74 04                	je     1000232 <AhciIssueCmd+0x1b6>
 100022e:	84 c0                	test   al,al
 1000230:	74 07                	je     1000239 <AhciIssueCmd+0x1bd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:93
        Status = -2;
 1000232:	b8 fe ff ff ff       	mov    eax,0xfffffffe
 1000237:	eb 23                	jmp    100025c <AhciIssueCmd+0x1e0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:41

int AhciIssueCmd(volatile HBA_PORT *port,int cmdslot) 
{
    unsigned i;
    int delay = 0;
    int Status = true;
 1000239:	b8 01 00 00 00       	mov    eax,0x1
 100023e:	eb 1c                	jmp    100025c <AhciIssueCmd+0x1e0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:88
        if (port->pxis.TFES) // Task file error
        {
            printd(DEBUG_AHCI, "AHCI: Read disk error\n");
            return -1;
        }
        wait(20);
 1000240:	83 ec 0c             	sub    esp,0xc
 1000243:	6a 14                	push   0x14
 1000245:	e8 be a4 00 00       	call   100a708 <wait>
 100024a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:89
        delay -= 1;
 100024d:	be 87 13 00 00       	mov    esi,0x1387
 1000252:	eb 8a                	jmp    10001de <AhciIssueCmd+0x162>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:92
    }

    if (port->tfd.ERR || delay == 0)
 1000254:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:93
        Status = -2;
 1000257:	b8 fe ff ff ff       	mov    eax,0xfffffffe
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:96

    return Status;
}
 100025c:	5b                   	pop    ebx
 100025d:	5e                   	pop    esi
 100025e:	5f                   	pop    edi
 100025f:	c3                   	ret    

01000260 <check_type>:
check_type():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:98

int check_type(volatile HBA_PORT *port, uint32_t* sig) {
 1000260:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:99
    uint32_t ssts = port->ssts;
 1000264:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:105
    uint8_t ipm = (ssts >> 8) & 0x0F;
    uint8_t det = ssts & 0x0F;

    if (det != HBA_PORT_DET_PRESENT) // Check drive status
        return AHCI_DEV_NULL;
    if (ipm != HBA_PORT_IPM_ACTIVE)
 1000267:	89 c2                	mov    edx,eax
 1000269:	c1 ea 08             	shr    edx,0x8
 100026c:	83 e2 0f             	and    edx,0xf
 100026f:	80 fa 01             	cmp    dl,0x1
 1000272:	75 4d                	jne    10002c1 <check_type+0x61>
 1000274:	83 e0 0f             	and    eax,0xf
 1000277:	3c 03                	cmp    al,0x3
 1000279:	75 46                	jne    10002c1 <check_type+0x61>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:108
        return AHCI_DEV_NULL;

    *sig = port->sig;
 100027b:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
 100027e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1000282:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:109
    switch (port->sig) {
 1000284:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:113
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
        case SATA_SIG_SEMB:
            return AHCI_DEV_SEMB;
 1000287:	b8 02 00 00 00       	mov    eax,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:109
        return AHCI_DEV_NULL;
    if (ipm != HBA_PORT_IPM_ACTIVE)
        return AHCI_DEV_NULL;

    *sig = port->sig;
    switch (port->sig) {
 100028c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
 1000292:	74 38                	je     10002cc <check_type+0x6c>
 1000294:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
 100029a:	77 0f                	ja     10002ab <check_type+0x4b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:115
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
        case SATA_SIG_SEMB:
            return AHCI_DEV_SEMB;
        case SATA_SIG_PM:
            return AHCI_DEV_PM;
 100029c:	b8 03 00 00 00       	mov    eax,0x3
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:109
        return AHCI_DEV_NULL;
    if (ipm != HBA_PORT_IPM_ACTIVE)
        return AHCI_DEV_NULL;

    *sig = port->sig;
    switch (port->sig) {
 10002a1:	81 fa 01 01 69 96    	cmp    edx,0x96690101
 10002a7:	74 23                	je     10002cc <check_type+0x6c>
 10002a9:	eb 10                	jmp    10002bb <check_type+0x5b>
 10002ab:	81 fa 00 00 14 eb    	cmp    edx,0xeb140000
 10002b1:	74 14                	je     10002c7 <check_type+0x67>
 10002b3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
 10002b9:	74 0c                	je     10002c7 <check_type+0x67>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:119
        case SATA_SIG_PM:
            return AHCI_DEV_PM;
        case SATA_SIG_ATAPI & 0xFFFF0000:
            return AHCI_DEV_SATAPI;
        default:
            return AHCI_DEV_SATA;
 10002bb:	b8 01 00 00 00       	mov    eax,0x1
 10002c0:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:106
    uint8_t det = ssts & 0x0F;

    if (det != HBA_PORT_DET_PRESENT) // Check drive status
        return AHCI_DEV_NULL;
    if (ipm != HBA_PORT_IPM_ACTIVE)
        return AHCI_DEV_NULL;
 10002c1:	b8 00 00 00 00       	mov    eax,0x0
 10002c6:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:111

    *sig = port->sig;
    switch (port->sig) {
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
 10002c7:	b8 04 00 00 00       	mov    eax,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:121
        case SATA_SIG_ATAPI & 0xFFFF0000:
            return AHCI_DEV_SATAPI;
        default:
            return AHCI_DEV_SATA;
    }
}
 10002cc:	f3 c3                	repz ret 

010002ce <ahciSpinupDrive>:
ahciSpinupDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:188
    cmdfis->control &= ~(1 << 2); //reset bit
    cmdfis->pmport = 0xf;
    port->ci |= slot;
}

bool ahciSpinupDrive(volatile HBA_PORT* port, int portno) {
 10002ce:	56                   	push   esi
 10002cf:	53                   	push   ebx
 10002d0:	83 ec 10             	sub    esp,0x10
 10002d3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:190
    int waitMS = 0;
    port->sctl.SPD = 1;
 10002d7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
 10002da:	24 0f                	and    al,0xf
 10002dc:	83 c8 10             	or     eax,0x10
 10002df:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:199
    //stop_cmd(&abar->ports[i]);
    //port->cmd.PMA=1;
    //start_cmd(&abar->ports[i]);

    //Spin up the drive
    port->cmd.ST = 0;
 10002e2:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
 10002e5:	83 e0 fe             	and    eax,0xfffffffe
 10002e8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:201

    port->sctl.DET = 1;
 10002eb:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
 10002ee:	83 e0 f0             	and    eax,0xfffffff0
 10002f1:	83 c8 01             	or     eax,0x1
 10002f4:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:202
    wait(100);
 10002f7:	6a 64                	push   0x64
 10002f9:	e8 0a a4 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:203
    port->sctl.DET = 0;
 10002fe:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
 1000301:	83 e0 f0             	and    eax,0xfffffff0
 1000304:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:208


    waitMS = 1000;
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
 1000307:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100030a:	83 e0 0f             	and    eax,0xf
 100030d:	83 c4 10             	add    esp,0x10
 1000310:	83 f8 03             	cmp    eax,0x3
 1000313:	0f 84 8f 00 00 00    	je     10003a8 <ahciSpinupDrive+0xda>
 1000319:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100031c:	83 e0 0f             	and    eax,0xf
 100031f:	83 f8 01             	cmp    eax,0x1
 1000322:	0f 84 80 00 00 00    	je     10003a8 <ahciSpinupDrive+0xda>
 1000328:	bb e8 03 00 00       	mov    ebx,0x3e8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:209
        wait(10);
 100032d:	83 ec 0c             	sub    esp,0xc
 1000330:	6a 0a                	push   0xa
 1000332:	e8 d1 a3 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:210
        waitMS -= 10;
 1000337:	83 eb 0a             	sub    ebx,0xa
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:208
    port->sctl.DET = 0;


    waitMS = 1000;
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
 100033a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100033d:	83 e0 0f             	and    eax,0xf
 1000340:	83 c4 10             	add    esp,0x10
 1000343:	83 f8 03             	cmp    eax,0x3
 1000346:	74 0f                	je     1000357 <ahciSpinupDrive+0x89>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:208 (discriminator 1)
 1000348:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100034b:	83 e0 0f             	and    eax,0xf
 100034e:	83 f8 01             	cmp    eax,0x1
 1000351:	74 04                	je     1000357 <ahciSpinupDrive+0x89>
 1000353:	85 db                	test   ebx,ebx
 1000355:	7f d6                	jg     100032d <ahciSpinupDrive+0x5f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:212
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
 1000357:	85 db                	test   ebx,ebx
 1000359:	75 4d                	jne    10003a8 <ahciSpinupDrive+0xda>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:213
        printd(DEBUG_AHCI, "AHCI: Error spinning up device,  DET not cleared (0x%08X)\n", port->ssts);
 100035b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100035e:	83 ec 04             	sub    esp,0x4
 1000361:	50                   	push   eax
 1000362:	68 1c 9e 02 01       	push   0x1029e1c
 1000367:	68 00 20 00 00       	push   0x2000
 100036c:	e8 96 99 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:215
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
 1000371:	8b 56 10             	mov    edx,DWORD PTR [esi+0x10]
 1000374:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 1000377:	83 c4 08             	add    esp,0x8
 100037a:	52                   	push   edx
 100037b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
 100037e:	52                   	push   edx
 100037f:	50                   	push   eax
 1000380:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
 1000383:	50                   	push   eax
 1000384:	68 58 9e 02 01       	push   0x1029e58
 1000389:	68 00 20 00 00       	push   0x2000
 100038e:	e8 74 99 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:216
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
 1000393:	83 c4 18             	add    esp,0x18
 1000396:	68 83 3f 04 01       	push   0x1043f83
 100039b:	68 00 20 00 00       	push   0x2000
 10003a0:	e8 62 99 00 00       	call   1009d07 <printd>
 10003a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:219
    }
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
 10003a8:	8b 1d 94 99 12 00    	mov    ebx,DWORD PTR ds:0x129994
 10003ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 10003b1:	ba 01 00 00 00       	mov    edx,0x1
 10003b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
 10003ba:	d3 e2                	shl    edx,cl
 10003bc:	09 d0                	or     eax,edx
 10003be:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:220
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
 10003c1:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
 10003c4:	83 ec 04             	sub    esp,0x4
 10003c7:	50                   	push   eax
 10003c8:	68 a0 3f 04 01       	push   0x1043fa0
 10003cd:	68 00 20 00 00       	push   0x2000
 10003d2:	e8 30 99 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:223
    waitMS = 1000;
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
 10003d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:221
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
    }
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
    waitMS = 1000;
 10003da:	bb e8 03 00 00       	mov    ebx,0x3e8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:223
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
 10003df:	eb 10                	jmp    10003f1 <ahciSpinupDrive+0x123>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:224
        wait(10);
 10003e1:	83 ec 0c             	sub    esp,0xc
 10003e4:	6a 0a                	push   0xa
 10003e6:	e8 1d a3 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:225
        waitMS -= 10;
 10003eb:	83 eb 0a             	sub    ebx,0xa
 10003ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:223
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
    waitMS = 1000;
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
 10003f1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
 10003f4:	a8 80                	test   al,0x80
 10003f6:	75 07                	jne    10003ff <ahciSpinupDrive+0x131>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:223 (discriminator 2)
 10003f8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
 10003fb:	a8 01                	test   al,0x1
 10003fd:	74 06                	je     1000405 <ahciSpinupDrive+0x137>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:223 (discriminator 3)
 10003ff:	85 db                	test   ebx,ebx
 1000401:	75 de                	jne    10003e1 <ahciSpinupDrive+0x113>
 1000403:	eb 04                	jmp    1000409 <ahciSpinupDrive+0x13b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:227
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
 1000405:	85 db                	test   ebx,ebx
 1000407:	75 4d                	jne    1000456 <ahciSpinupDrive+0x188>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:228
        printd(DEBUG_AHCI, "AHCI: Error spinning up device, BSY, DRQ OR ERR not cleared (0x%08X)\n", port->ssts);
 1000409:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100040c:	83 ec 04             	sub    esp,0x4
 100040f:	50                   	push   eax
 1000410:	68 8c 9e 02 01       	push   0x1029e8c
 1000415:	68 00 20 00 00       	push   0x2000
 100041a:	e8 e8 98 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:230
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
 100041f:	8b 56 10             	mov    edx,DWORD PTR [esi+0x10]
 1000422:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 1000425:	83 c4 08             	add    esp,0x8
 1000428:	52                   	push   edx
 1000429:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
 100042c:	52                   	push   edx
 100042d:	50                   	push   eax
 100042e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
 1000431:	50                   	push   eax
 1000432:	68 58 9e 02 01       	push   0x1029e58
 1000437:	68 00 20 00 00       	push   0x2000
 100043c:	e8 c6 98 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:231
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
 1000441:	83 c4 18             	add    esp,0x18
 1000444:	68 83 3f 04 01       	push   0x1043f83
 1000449:	68 00 20 00 00       	push   0x2000
 100044e:	e8 b4 98 00 00       	call   1009d07 <printd>
 1000453:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:233
    }
    port->cmd.ST = 1;
 1000456:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
 1000459:	83 c8 01             	or     eax,0x1
 100045c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
 100045f:	85 db                	test   ebx,ebx
 1000461:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:237
    if (waitMS == 0)
        return false;
    return true;
}
 1000464:	83 c4 04             	add    esp,0x4
 1000467:	5b                   	pop    ebx
 1000468:	5e                   	pop    esi
 1000469:	c3                   	ret    

0100046a <printAHCICaps>:
printAHCICaps():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:295
        pi >>= 1;
        i++;
    }
}

void printAHCICaps() {
 100046a:	55                   	push   ebp
 100046b:	57                   	push   edi
 100046c:	56                   	push   esi
 100046d:	53                   	push   ebx
 100046e:	81 ec 0c 02 00 00    	sub    esp,0x20c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:297
    //printk("ahciCaps=0x%08X, sizeof=%u\n",ahciCaps,sizeof(ahcicaps_t));
    terminal_clear();
 1000474:	e8 a0 29 00 00       	call   1002e19 <terminal_clear>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:298
    printk("AHCI Caps:\n");
 1000479:	83 ec 0c             	sub    esp,0xc
 100047c:	68 ed 3f 04 01       	push   0x1043fed
 1000481:	e8 69 98 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:299
    printk("\tSupports 64-bit Addressing (S64A):\t\t\t\t%s\n", ahciCaps->S64A ? "Yes" : "No");
 1000486:	a1 24 99 12 00       	mov    eax,ds:0x129924
 100048b:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 100048f:	83 c4 08             	add    esp,0x8
 1000492:	25 80 00 00 00       	and    eax,0x80
 1000497:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 100049c:	b8 af 3f 04 01       	mov    eax,0x1043faf
 10004a1:	0f 44 c2             	cmove  eax,edx
 10004a4:	50                   	push   eax
 10004a5:	68 d4 9e 02 01       	push   0x1029ed4
 10004aa:	e8 40 98 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:300
    printk("\tSupprorts Native Command Queueing (SNCQ):\t\t%s\n", ahciCaps->SNCQ ? "Yes" : "No");
 10004af:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10004b4:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 10004b8:	83 c4 08             	add    esp,0x8
 10004bb:	83 e0 40             	and    eax,0x40
 10004be:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 10004c3:	b8 af 3f 04 01       	mov    eax,0x1043faf
 10004c8:	0f 44 c2             	cmove  eax,edx
 10004cb:	50                   	push   eax
 10004cc:	68 00 9f 02 01       	push   0x1029f00
 10004d1:	e8 19 98 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:301
    printk("\tSupports SNotification Register (SSNTF):\t\t%s\n", ahciCaps->SSNTF ? "Yes" : "No");
 10004d6:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10004db:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 10004df:	83 c4 08             	add    esp,0x8
 10004e2:	83 e0 20             	and    eax,0x20
 10004e5:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 10004ea:	b8 af 3f 04 01       	mov    eax,0x1043faf
 10004ef:	0f 44 c2             	cmove  eax,edx
 10004f2:	50                   	push   eax
 10004f3:	68 30 9f 02 01       	push   0x1029f30
 10004f8:	e8 f2 97 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:302
    printk("\tSupports Mechanical Presence Switch (SMPS):\t\t%s\n", ahciCaps->SMPS ? "Yes" : "No");
 10004fd:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000502:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 1000506:	83 c4 08             	add    esp,0x8
 1000509:	83 e0 10             	and    eax,0x10
 100050c:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 1000511:	b8 af 3f 04 01       	mov    eax,0x1043faf
 1000516:	0f 44 c2             	cmove  eax,edx
 1000519:	50                   	push   eax
 100051a:	68 60 9f 02 01       	push   0x1029f60
 100051f:	e8 cb 97 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:303
    printk("\tSupports Staggered Spin-up (SSS):\t\t\t\t%s\n", ahciCaps->SSS ? "Yes" : "No");
 1000524:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000529:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 100052d:	83 c4 08             	add    esp,0x8
 1000530:	83 e0 08             	and    eax,0x8
 1000533:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 1000538:	b8 af 3f 04 01       	mov    eax,0x1043faf
 100053d:	0f 44 c2             	cmove  eax,edx
 1000540:	50                   	push   eax
 1000541:	68 94 9f 02 01       	push   0x1029f94
 1000546:	e8 a4 97 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:304
    printk("\tSupports Aggressive Link Power Management (SALP):\t%s\n", ahciCaps->SALP ? "Yes" : "No");
 100054b:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000550:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 1000554:	83 c4 08             	add    esp,0x8
 1000557:	83 e0 04             	and    eax,0x4
 100055a:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 100055f:	b8 af 3f 04 01       	mov    eax,0x1043faf
 1000564:	0f 44 c2             	cmove  eax,edx
 1000567:	50                   	push   eax
 1000568:	68 c0 9f 02 01       	push   0x1029fc0
 100056d:	e8 7d 97 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:305
    printk("\tSupports Active LED (SAL):\t\t\t\t\t%s\n", ahciCaps->SAL ? "Yes" : "No");
 1000572:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000577:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 100057b:	83 c4 08             	add    esp,0x8
 100057e:	83 e0 02             	and    eax,0x2
 1000581:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 1000586:	b8 af 3f 04 01       	mov    eax,0x1043faf
 100058b:	0f 44 c2             	cmove  eax,edx
 100058e:	50                   	push   eax
 100058f:	68 f8 9f 02 01       	push   0x1029ff8
 1000594:	e8 56 97 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:306
    printk("\tSupports Command List Override (SCLO):\t\t\t%s\n", ahciCaps->SCLO ? "Yes" : "No");
 1000599:	a1 24 99 12 00       	mov    eax,ds:0x129924
 100059e:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 10005a2:	83 c4 08             	add    esp,0x8
 10005a5:	83 e0 01             	and    eax,0x1
 10005a8:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 10005ad:	b8 af 3f 04 01       	mov    eax,0x1043faf
 10005b2:	0f 44 c2             	cmove  eax,edx
 10005b5:	50                   	push   eax
 10005b6:	68 1c a0 02 01       	push   0x102a01c
 10005bb:	e8 2f 97 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:307
    printk("\tInterface Speed Support (ISS):\t\t\t\t%s\n", ahciCaps->ISS == 1 ? "1.5 Gbps" : ahciCaps->ISS == 2 ? "3 Gbps" : ahciCaps->ISS == 3 ? "6 Gbps" : "Reserved");
 10005c0:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10005c5:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
 10005c9:	83 e0 f0             	and    eax,0xfffffff0
 10005cc:	83 c4 10             	add    esp,0x10
 10005cf:	ba bd 3f 04 01       	mov    edx,0x1043fbd
 10005d4:	3c 10                	cmp    al,0x10
 10005d6:	74 18                	je     10005f0 <printAHCICaps+0x186>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:307 (discriminator 1)
 10005d8:	ba b6 3f 04 01       	mov    edx,0x1043fb6
 10005dd:	3c 20                	cmp    al,0x20
 10005df:	74 0f                	je     10005f0 <printAHCICaps+0x186>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:307 (discriminator 3)
 10005e1:	3c 30                	cmp    al,0x30
 10005e3:	ba c6 3f 04 01       	mov    edx,0x1043fc6
 10005e8:	b8 cf 3f 04 01       	mov    eax,0x1043fcf
 10005ed:	0f 44 d0             	cmove  edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:307 (discriminator 12)
 10005f0:	83 ec 08             	sub    esp,0x8
 10005f3:	52                   	push   edx
 10005f4:	68 4c a0 02 01       	push   0x102a04c
 10005f9:	e8 f1 96 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:308 (discriminator 12)
    printk("\tSupports AHCI mode only (SAM):\t\t\t\t%s\n", ahciCaps->SAM ? "Yes" : "No");
 10005fe:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000603:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
 1000607:	83 c4 08             	add    esp,0x8
 100060a:	83 e0 04             	and    eax,0x4
 100060d:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 1000612:	b8 af 3f 04 01       	mov    eax,0x1043faf
 1000617:	0f 44 c2             	cmove  eax,edx
 100061a:	50                   	push   eax
 100061b:	68 74 a0 02 01       	push   0x102a074
 1000620:	e8 ca 96 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:309 (discriminator 12)
    printk("\tSupports Port Multiplier (SPM):\t\t\t\t%s\n", ahciCaps->SPM ? "Yes" : "No");
 1000625:	a1 24 99 12 00       	mov    eax,ds:0x129924
 100062a:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
 100062e:	83 c4 08             	add    esp,0x8
 1000631:	83 e0 02             	and    eax,0x2
 1000634:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 1000639:	b8 af 3f 04 01       	mov    eax,0x1043faf
 100063e:	0f 44 c2             	cmove  eax,edx
 1000641:	50                   	push   eax
 1000642:	68 9c a0 02 01       	push   0x102a09c
 1000647:	e8 a3 96 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:310 (discriminator 12)
    printk("\tFIS-based Switching Support (FBSS):\t\t\t%s\n", ahciCaps->FBSS ? "Yes" : "No");   
 100064c:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000651:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
 1000655:	83 c4 08             	add    esp,0x8
 1000658:	83 e0 01             	and    eax,0x1
 100065b:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 1000660:	b8 af 3f 04 01       	mov    eax,0x1043faf
 1000665:	0f 44 c2             	cmove  eax,edx
 1000668:	50                   	push   eax
 1000669:	68 c4 a0 02 01       	push   0x102a0c4
 100066e:	e8 7c 96 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:311 (discriminator 12)
    printk("\tPIO Multiple DRQ Block (PMD):\t\t\t\t\t%s\n", ahciCaps->PMD ? "Yes" : "No");
 1000673:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000678:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
 100067c:	83 c4 08             	add    esp,0x8
 100067f:	25 80 00 00 00       	and    eax,0x80
 1000684:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 1000689:	b8 af 3f 04 01       	mov    eax,0x1043faf
 100068e:	0f 44 c2             	cmove  eax,edx
 1000691:	50                   	push   eax
 1000692:	68 f0 a0 02 01       	push   0x102a0f0
 1000697:	e8 53 96 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:312 (discriminator 12)
    printk("\tSlumber State Capable (SSC):\t\t\t\t\t%s\n", ahciCaps->SSC ? "Yes" : "No");
 100069c:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10006a1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
 10006a5:	83 c4 08             	add    esp,0x8
 10006a8:	83 e0 40             	and    eax,0x40
 10006ab:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 10006b0:	b8 af 3f 04 01       	mov    eax,0x1043faf
 10006b5:	0f 44 c2             	cmove  eax,edx
 10006b8:	50                   	push   eax
 10006b9:	68 18 a1 02 01       	push   0x102a118
 10006be:	e8 2c 96 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:313 (discriminator 12)
    printk("\tPartial State Capable (PSC):\t\t\t\t\t%s\n", ahciCaps->PSC ? "Yes" : "No");
 10006c3:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10006c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
 10006cc:	83 c4 08             	add    esp,0x8
 10006cf:	83 e0 20             	and    eax,0x20
 10006d2:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 10006d7:	b8 af 3f 04 01       	mov    eax,0x1043faf
 10006dc:	0f 44 c2             	cmove  eax,edx
 10006df:	50                   	push   eax
 10006e0:	68 40 a1 02 01       	push   0x102a140
 10006e5:	e8 05 96 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:314 (discriminator 12)
    printk("\tNumber of Command Slots (NSC):\t\t\t\t%u\n", ahciCaps->NCS);
 10006ea:	83 c4 08             	add    esp,0x8
 10006ed:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10006f2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
 10006f6:	83 e0 1f             	and    eax,0x1f
 10006f9:	50                   	push   eax
 10006fa:	68 68 a1 02 01       	push   0x102a168
 10006ff:	e8 eb 95 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:315 (discriminator 12)
    printk("\tCommand Completion Coalescing Supported (CCCS):\t%s\n", ahciCaps->CCCS ? "Yes" : "No");
 1000704:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000709:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 100070c:	83 c4 08             	add    esp,0x8
 100070f:	25 80 00 00 00       	and    eax,0x80
 1000714:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 1000719:	b8 af 3f 04 01       	mov    eax,0x1043faf
 100071e:	0f 44 c2             	cmove  eax,edx
 1000721:	50                   	push   eax
 1000722:	68 90 a1 02 01       	push   0x102a190
 1000727:	e8 c3 95 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:316 (discriminator 12)
    printk("\tEnclosure Management Supported (EMS):\t\t\t%s\n", ahciCaps->EMS ? "Yes" : "No");
 100072c:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000731:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 1000734:	83 c4 08             	add    esp,0x8
 1000737:	83 e0 40             	and    eax,0x40
 100073a:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 100073f:	b8 af 3f 04 01       	mov    eax,0x1043faf
 1000744:	0f 44 c2             	cmove  eax,edx
 1000747:	50                   	push   eax
 1000748:	68 c8 a1 02 01       	push   0x102a1c8
 100074d:	e8 9d 95 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:317 (discriminator 12)
    printk("\tSupports External SATA (SXS):\t\t\t\t\t%s\n", ahciCaps->SXS ? "Yes" : "No");
 1000752:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000757:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 100075a:	83 c4 08             	add    esp,0x8
 100075d:	83 e0 20             	and    eax,0x20
 1000760:	ba b3 3f 04 01       	mov    edx,0x1043fb3
 1000765:	b8 af 3f 04 01       	mov    eax,0x1043faf
 100076a:	0f 44 c2             	cmove  eax,edx
 100076d:	50                   	push   eax
 100076e:	68 f8 a1 02 01       	push   0x102a1f8
 1000773:	e8 77 95 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:318 (discriminator 12)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
 1000778:	83 c4 08             	add    esp,0x8
 100077b:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000780:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 1000783:	83 e0 1f             	and    eax,0x1f
 1000786:	50                   	push   eax
 1000787:	68 20 a2 02 01       	push   0x102a220
 100078c:	e8 5e 95 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:321 (discriminator 12)
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
 1000791:	c7 04 24 f9 3f 04 01 	mov    DWORD PTR [esp],0x1043ff9
 1000798:	e8 52 95 00 00       	call   1009cef <printk>
 100079d:	83 c4 10             	add    esp,0x10
 10007a0:	bb cc 09 00 00       	mov    ebx,0x9cc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:323 (discriminator 12)
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
 10007a5:	be 04 00 00 00       	mov    esi,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:324
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
 10007aa:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10007af:	80 bc 18 51 02 00 00 	cmp    BYTE PTR [eax+ebx*1+0x251],0x0
 10007b6:	00 
 10007b7:	0f 84 f8 00 00 00    	je     10008b5 <printAHCICaps+0x44b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:325
            memset(p1, 0, 512);
 10007bd:	83 ec 04             	sub    esp,0x4
 10007c0:	68 00 02 00 00       	push   0x200
 10007c5:	6a 00                	push   0x0
 10007c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
 10007cb:	50                   	push   eax
 10007cc:	e8 62 87 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:326
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
 10007d1:	83 c4 08             	add    esp,0x8
 10007d4:	89 d8                	mov    eax,ebx
 10007d6:	03 05 00 98 12 00    	add    eax,DWORD PTR ds:0x129800
 10007dc:	05 00 02 00 00       	add    eax,0x200
 10007e1:	50                   	push   eax
 10007e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
 10007e6:	50                   	push   eax
 10007e7:	e8 d4 95 00 00       	call   1009dc0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:327
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
 10007ec:	83 c4 10             	add    esp,0x10
 10007ef:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10007f4:	80 bc 18 51 02 00 00 	cmp    BYTE PTR [eax+ebx*1+0x251],0x1
 10007fb:	01 
 10007fc:	b8 d6 3f 04 01       	mov    eax,0x1043fd6
 1000801:	0f 44 c4             	cmove  eax,esp
 1000804:	83 ec 04             	sub    esp,0x4
 1000807:	50                   	push   eax
 1000808:	56                   	push   esi
 1000809:	68 0c 40 04 01       	push   0x104400c
 100080e:	e8 dc 94 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:335
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
 1000813:	89 d8                	mov    eax,ebx
 1000815:	03 05 00 98 12 00    	add    eax,DWORD PTR ds:0x129800
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
 100081b:	83 c4 10             	add    esp,0x10
 100081e:	80 b8 60 02 00 00 00 	cmp    BYTE PTR [eax+0x260],0x0
 1000825:	ba df 73 06 01       	mov    edx,0x10673df
 100082a:	bd dc 3f 04 01       	mov    ebp,0x1043fdc
 100082f:	0f 44 ea             	cmove  ebp,edx
 1000832:	80 b8 5f 02 00 00 00 	cmp    BYTE PTR [eax+0x25f],0x0
 1000839:	bf e1 3f 04 01       	mov    edi,0x1043fe1
 100083e:	0f 44 fa             	cmove  edi,edx
 1000841:	80 b8 5e 02 00 00 00 	cmp    BYTE PTR [eax+0x25e],0x0
 1000848:	89 d1                	mov    ecx,edx
 100084a:	ba e8 3f 04 01       	mov    edx,0x1043fe8
 100084f:	0f 45 ca             	cmovne ecx,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:329
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
 1000852:	8b 90 5a 02 00 00    	mov    edx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
 1000858:	ff b0 69 02 00 00    	push   DWORD PTR [eax+0x269]
 100085e:	ff b0 6f 02 00 00    	push   DWORD PTR [eax+0x26f]
 1000864:	55                   	push   ebp
 1000865:	57                   	push   edi
 1000866:	51                   	push   ecx
 1000867:	52                   	push   edx
 1000868:	0f af 90 56 02 00 00 	imul   edx,DWORD PTR [eax+0x256]
 100086f:	c1 ea 14             	shr    edx,0x14
 1000872:	52                   	push   edx
 1000873:	68 40 a2 02 01       	push   0x102a240
 1000878:	e8 72 94 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:336
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
            volatile HBA_PORT* port = (HBA_PORT*) kATADeviceInfo[cnt].ioPort;
 100087d:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1000882:	8b bc 18 69 02 00 00 	mov    edi,DWORD PTR [eax+ebx*1+0x269]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:337
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
 1000889:	8b 2f                	mov    ebp,DWORD PTR [edi]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:339
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
 100088b:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
 100088e:	8b 07                	mov    eax,DWORD PTR [edi]
 1000890:	83 c4 1c             	add    esp,0x1c
 1000893:	52                   	push   edx
 1000894:	50                   	push   eax
 1000895:	68 21 40 04 01       	push   0x1044021
 100089a:	e8 50 94 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:340
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
 100089f:	8b 07                	mov    eax,DWORD PTR [edi]
 10008a1:	83 c4 0c             	add    esp,0xc
 10008a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
 10008a7:	50                   	push   eax
 10008a8:	68 74 a2 02 01       	push   0x102a274
 10008ad:	e8 3d 94 00 00       	call   1009cef <printk>
 10008b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:323 (discriminator 2)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
 10008b5:	83 c6 01             	add    esi,0x1
 10008b8:	81 c3 73 02 00 00    	add    ebx,0x273
 10008be:	83 fe 0a             	cmp    esi,0xa
 10008c1:	0f 85 e3 fe ff ff    	jne    10007aa <printAHCICaps+0x340>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:342
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
        }
}
 10008c7:	81 c4 0c 02 00 00    	add    esp,0x20c
 10008cd:	5b                   	pop    ebx
 10008ce:	5e                   	pop    esi
 10008cf:	5f                   	pop    edi
 10008d0:	5d                   	pop    ebp
 10008d1:	c3                   	ret    

010008d2 <start_cmd>:
start_cmd():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:385
    start_cmd(port); // Start command engine
}

// Start command engine

void start_cmd(volatile HBA_PORT *port) {
 10008d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:387 (discriminator 1)
    // Wait until CR (bit15) is cleared
    while (port->cmd.CR);
 10008d6:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
 10008d9:	f6 c4 80             	test   ah,0x80
 10008dc:	75 f8                	jne    10008d6 <start_cmd+0x4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:390

    // Set FRE (bit4) and ST (bit0)
    port->cmd.FRE = 1;
 10008de:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
 10008e1:	83 c8 10             	or     eax,0x10
 10008e4:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:391
    port->cmd.ST = 1;
 10008e7:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
 10008ea:	83 c8 01             	or     eax,0x1
 10008ed:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
 10008f0:	c3                   	ret    

010008f1 <waitForPortIdle>:
waitForPortIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:394
}

void waitForPortIdle(volatile HBA_PORT *port) {
 10008f1:	53                   	push   ebx
 10008f2:	83 ec 08             	sub    esp,0x8
 10008f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:395
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
 10008f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
 10008fc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10008ff:	c1 e8 0f             	shr    eax,0xf
 1000902:	09 d0                	or     eax,edx
 1000904:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
 1000907:	c1 e9 04             	shr    ecx,0x4
 100090a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
 100090d:	c1 ea 0e             	shr    edx,0xe
 1000910:	09 c8                	or     eax,ecx
 1000912:	09 d0                	or     eax,edx
 1000914:	a8 01                	test   al,0x1
 1000916:	74 2c                	je     1000944 <waitForPortIdle+0x53>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:396
        waitTicks(20);
 1000918:	83 ec 0c             	sub    esp,0xc
 100091b:	6a 14                	push   0x14
 100091d:	e8 d3 9d 00 00       	call   100a6f5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:395
    port->cmd.FRE = 1;
    port->cmd.ST = 1;
}

void waitForPortIdle(volatile HBA_PORT *port) {
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
 1000922:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
 1000925:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000928:	c1 e8 0f             	shr    eax,0xf
 100092b:	09 d0                	or     eax,edx
 100092d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
 1000930:	c1 e9 04             	shr    ecx,0x4
 1000933:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
 1000936:	c1 ea 0e             	shr    edx,0xe
 1000939:	09 c8                	or     eax,ecx
 100093b:	09 d0                	or     eax,edx
 100093d:	83 c4 10             	add    esp,0x10
 1000940:	a8 01                	test   al,0x1
 1000942:	75 d4                	jne    1000918 <waitForPortIdle+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:398
        waitTicks(20);
    }
}
 1000944:	83 c4 08             	add    esp,0x8
 1000947:	5b                   	pop    ebx
 1000948:	c3                   	ret    

01000949 <stop_cmd>:
stop_cmd():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:402

// Stop command engine

void stop_cmd(volatile volatile HBA_PORT *port) {
 1000949:	53                   	push   ebx
 100094a:	83 ec 08             	sub    esp,0x8
 100094d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:404
    // Clear ST (bit0)
    port->cmd.ST = 0;
 1000951:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000954:	83 e0 fe             	and    eax,0xfffffffe
 1000957:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:407
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
 100095a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100095d:	f6 c4 40             	test   ah,0x40
 1000960:	74 27                	je     1000989 <stop_cmd+0x40>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:409
            break;
        if (!(port->cmd.CR))
 1000962:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000965:	f6 c4 80             	test   ah,0x80
 1000968:	75 0a                	jne    1000974 <stop_cmd+0x2b>
 100096a:	eb 1d                	jmp    1000989 <stop_cmd+0x40>
 100096c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100096f:	f6 c4 80             	test   ah,0x80
 1000972:	74 15                	je     1000989 <stop_cmd+0x40>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:411
            break;
        waitTicks(20);
 1000974:	83 ec 0c             	sub    esp,0xc
 1000977:	6a 14                	push   0x14
 1000979:	e8 77 9d 00 00       	call   100a6f5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:407
void stop_cmd(volatile volatile HBA_PORT *port) {
    // Clear ST (bit0)
    port->cmd.ST = 0;
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
 100097e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000981:	83 c4 10             	add    esp,0x10
 1000984:	f6 c4 40             	test   ah,0x40
 1000987:	75 e3                	jne    100096c <stop_cmd+0x23>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:415
            break;
        waitTicks(20);
    }

    // Clear FRE (bit4)
    port->cmd.FRE = 0;
 1000989:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100098c:	83 e0 ef             	and    eax,0xffffffef
 100098f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:416
}
 1000992:	83 c4 08             	add    esp,0x8
 1000995:	5b                   	pop    ebx
 1000996:	c3                   	ret    

01000997 <port_rebase>:
port_rebase():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:344
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
        }
}

void port_rebase(volatile HBA_PORT *port, int portno, uintptr_t remapBase) {
 1000997:	55                   	push   ebp
 1000998:	57                   	push   edi
 1000999:	56                   	push   esi
 100099a:	53                   	push   ebx
 100099b:	83 ec 14             	sub    esp,0x14
 100099e:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
 10009a2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
 10009a6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:346
    //each command list is 1k (32k possible per port))
    printd(DEBUG_AHCI, "AHCI: Rebasing port %u (0x%08X) clb/fb from 0x%08X/0x%08X\n\t", portno, port, port->clb, port->fb);
 10009aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 10009ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
 10009b0:	52                   	push   edx
 10009b1:	50                   	push   eax
 10009b2:	55                   	push   ebp
 10009b3:	56                   	push   esi
 10009b4:	68 9c a2 02 01       	push   0x102a29c
 10009b9:	68 00 20 00 00       	push   0x2000
 10009be:	e8 44 93 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:347
    stop_cmd(port); // Stop command engine
 10009c3:	83 c4 14             	add    esp,0x14
 10009c6:	55                   	push   ebp
 10009c7:	e8 7d ff ff ff       	call   1000949 <stop_cmd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:353

    // Command list offset: 1K*portno
    // Command list entry size = 32
    // Command list entry maxim count = 32
    // Command list maxim size = 32*32 = 1K per port
    port->clbu = 0;
 10009cc:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:354
    port->clb = (remapBase + (portno<<15) + 0x1000) & 0xFFFFF000;
 10009d3:	89 f0                	mov    eax,esi
 10009d5:	c1 e0 0f             	shl    eax,0xf
 10009d8:	8d 84 07 00 10 00 00 	lea    eax,[edi+eax*1+0x1000]
 10009df:	25 00 f0 ff ff       	and    eax,0xfffff000
 10009e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:355
    memset((void*) (port->clb), 0, 1024);
 10009e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
 10009ea:	83 c4 0c             	add    esp,0xc
 10009ed:	68 00 04 00 00       	push   0x400
 10009f2:	6a 00                	push   0x0
 10009f4:	50                   	push   eax
 10009f5:	e8 39 85 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:356
    kMapPage(port->clb,port->clb,0x73); //make un-cached
 10009fa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
 10009fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
 1000a00:	83 c4 0c             	add    esp,0xc
 1000a03:	6a 73                	push   0x73
 1000a05:	52                   	push   edx
 1000a06:	50                   	push   eax
 1000a07:	e8 e3 80 00 00       	call   1008aef <kMapPage>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:361
    
    //each FIS is 256 bytes
    // FIS offset: 32K+256*portno
    // FIS entry size = 256 bytes per port
    port->fbu = 0;
 1000a0c:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:363
//    port->fb = (remapBase + (32 << 10) + (portno << 12) + 0x1000) & 0xFFFFF000;
    port->fb = (port->clb + 0x1000);
 1000a13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
 1000a16:	05 00 10 00 00       	add    eax,0x1000
 1000a1b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:364
    memset((void*) (port->fb), 0, 256);
 1000a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 1000a21:	83 c4 0c             	add    esp,0xc
 1000a24:	68 00 01 00 00       	push   0x100
 1000a29:	6a 00                	push   0x0
 1000a2b:	50                   	push   eax
 1000a2c:	e8 02 85 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:365
    kMapPage(port->fb,port->fb,0x73); //make un-cached
 1000a31:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 1000a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 1000a37:	83 c4 0c             	add    esp,0xc
 1000a3a:	6a 73                	push   0x73
 1000a3c:	52                   	push   edx
 1000a3d:	50                   	push   eax
 1000a3e:	e8 ac 80 00 00       	call   1008aef <kMapPage>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:370


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
 1000a43:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
 1000a46:	c1 e6 0d             	shl    esi,0xd
 1000a49:	8d bc 37 00 a0 00 00 	lea    edi,[edi+esi*1+0xa000]
 1000a50:	83 c3 02             	add    ebx,0x2
 1000a53:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:371
    for (int i = 0; i < 32; i++) {
 1000a56:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:372 (discriminator 3)
        cmdheader[i].prdtl = 8; // 8 prdt entries per command table
 1000a5b:	66 c7 03 08 00       	mov    WORD PTR [ebx],0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:375 (discriminator 3)
        // 256 bytes per command table, 64+16+48+16*8
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
 1000a60:	89 f0                	mov    eax,esi
 1000a62:	c1 e0 08             	shl    eax,0x8
 1000a65:	01 f8                	add    eax,edi
 1000a67:	89 43 06             	mov    DWORD PTR [ebx+0x6],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:376 (discriminator 3)
        cmdheader[i].ctbau = 0;
 1000a6a:	c7 43 0a 00 00 00 00 	mov    DWORD PTR [ebx+0xa],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:377 (discriminator 3)
        memset((void*) cmdheader[i].ctba, 0, 256);
 1000a71:	83 ec 04             	sub    esp,0x4
 1000a74:	68 00 01 00 00       	push   0x100
 1000a79:	6a 00                	push   0x0
 1000a7b:	50                   	push   eax
 1000a7c:	e8 b2 84 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:371 (discriminator 3)


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
    for (int i = 0; i < 32; i++) {
 1000a81:	83 c6 01             	add    esi,0x1
 1000a84:	83 c3 20             	add    ebx,0x20
 1000a87:	83 c4 10             	add    esp,0x10
 1000a8a:	83 fe 20             	cmp    esi,0x20
 1000a8d:	75 cc                	jne    1000a5b <port_rebase+0xc4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:379
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
        cmdheader[i].ctbau = 0;
        memset((void*) cmdheader[i].ctba, 0, 256);
    }
    printd(DEBUG_AHCI, " to 0x%08X/0x%08X\n", port->clb, port->fb);
 1000a8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 1000a92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
 1000a95:	52                   	push   edx
 1000a96:	50                   	push   eax
 1000a97:	68 3a 40 04 01       	push   0x104403a
 1000a9c:	68 00 20 00 00       	push   0x2000
 1000aa1:	e8 61 92 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:380
    start_cmd(port); // Start command engine
 1000aa6:	89 2c 24             	mov    DWORD PTR [esp],ebp
 1000aa9:	e8 24 fe ff ff       	call   10008d2 <start_cmd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:381
}
 1000aae:	83 c4 1c             	add    esp,0x1c
 1000ab1:	5b                   	pop    ebx
 1000ab2:	5e                   	pop    esi
 1000ab3:	5f                   	pop    edi
 1000ab4:	5d                   	pop    ebp
 1000ab5:	c3                   	ret    

01000ab6 <find_cmdslot>:
find_cmdslot():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:482
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
}
// Find a free command list slot

int find_cmdslot(volatile HBA_PORT *port) {
 1000ab6:	57                   	push   edi
 1000ab7:	56                   	push   esi
 1000ab8:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:483
    printd(DEBUG_AHCI, "AHCI: find_cmdslot - finding a slot to use to execute a command\n");
 1000ab9:	83 ec 08             	sub    esp,0x8
 1000abc:	68 d8 a2 02 01       	push   0x102a2d8
 1000ac1:	68 00 20 00 00       	push   0x2000
 1000ac6:	e8 3c 92 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:487
    // An empty command slot has its respective bit cleared to �0� in both the PxCI and PxSACT registers.
    // If not set in SACT and CI, the slot is free // Checked
    
    uint32_t slots = (/*port->sact | */port->ci);
 1000acb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 1000acf:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:488
    int num_of_slots = ahciABAR->cap.NCS;
 1000ad2:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
 1000ad8:	8b 3a                	mov    edi,DWORD PTR [edx]
 1000ada:	c1 ef 08             	shr    edi,0x8
 1000add:	83 e7 1f             	and    edi,0x1f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:489
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
 1000ae0:	8b 02                	mov    eax,DWORD PTR [edx]
 1000ae2:	c1 e8 08             	shr    eax,0x8
 1000ae5:	83 e0 1f             	and    eax,0x1f
 1000ae8:	50                   	push   eax
 1000ae9:	52                   	push   edx
 1000aea:	68 1c a3 02 01       	push   0x102a31c
 1000aef:	68 00 20 00 00       	push   0x2000
 1000af4:	e8 0e 92 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:491
    int i;
    for (i = 0; i < num_of_slots; i++) {
 1000af9:	83 c4 20             	add    esp,0x20
 1000afc:	85 ff                	test   edi,edi
 1000afe:	7e 55                	jle    1000b55 <find_cmdslot+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:493

        if ((slots & 1) == 0) {
 1000b00:	f7 c6 01 00 00 00    	test   esi,0x1
 1000b06:	74 11                	je     1000b19 <find_cmdslot+0x63>
 1000b08:	bb 00 00 00 00       	mov    ebx,0x0
 1000b0d:	eb 29                	jmp    1000b38 <find_cmdslot+0x82>
 1000b0f:	f7 c6 01 00 00 00    	test   esi,0x1
 1000b15:	75 21                	jne    1000b38 <find_cmdslot+0x82>
 1000b17:	eb 05                	jmp    1000b1e <find_cmdslot+0x68>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:491
    
    uint32_t slots = (/*port->sact | */port->ci);
    int num_of_slots = ahciABAR->cap.NCS;
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
    int i;
    for (i = 0; i < num_of_slots; i++) {
 1000b19:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:494

        if ((slots & 1) == 0) {
            printd(DEBUG_AHCI, "AHCI: [command slot is : %d]\n", i);
 1000b1e:	83 ec 04             	sub    esp,0x4
 1000b21:	53                   	push   ebx
 1000b22:	68 4d 40 04 01       	push   0x104404d
 1000b27:	68 00 20 00 00       	push   0x2000
 1000b2c:	e8 d6 91 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:495
            return i;
 1000b31:	83 c4 10             	add    esp,0x10
 1000b34:	89 d8                	mov    eax,ebx
 1000b36:	eb 36                	jmp    1000b6e <find_cmdslot+0xb8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:498 (discriminator 2)

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
 1000b38:	56                   	push   esi
 1000b39:	53                   	push   ebx
 1000b3a:	68 6b 40 04 01       	push   0x104406b
 1000b3f:	68 00 20 00 00       	push   0x2000
 1000b44:	e8 be 91 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:499 (discriminator 2)
        slots >>= 1;
 1000b49:	d1 ee                	shr    esi,1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:491 (discriminator 2)
    
    uint32_t slots = (/*port->sact | */port->ci);
    int num_of_slots = ahciABAR->cap.NCS;
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
    int i;
    for (i = 0; i < num_of_slots; i++) {
 1000b4b:	83 c3 01             	add    ebx,0x1
 1000b4e:	83 c4 10             	add    esp,0x10
 1000b51:	39 df                	cmp    edi,ebx
 1000b53:	75 ba                	jne    1000b0f <find_cmdslot+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:501

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
        slots >>= 1;
    }
    printd(DEBUG_AHCI, "AHCI: Cannot find free command list entry, count=%u, slots=0x%08X\n", num_of_slots, slots);
 1000b55:	56                   	push   esi
 1000b56:	57                   	push   edi
 1000b57:	68 48 a3 02 01       	push   0x102a348
 1000b5c:	68 00 20 00 00       	push   0x2000
 1000b61:	e8 a1 91 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:502
    return -1;
 1000b66:	83 c4 10             	add    esp,0x10
 1000b69:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:503
}
 1000b6e:	5b                   	pop    ebx
 1000b6f:	5e                   	pop    esi
 1000b70:	5f                   	pop    edi
 1000b71:	c3                   	ret    

01000b72 <ahciEnablePortMultiplier>:
ahciEnablePortMultiplier():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:123
        default:
            return AHCI_DEV_SATA;
    }
}

void ahciEnablePortMultiplier(volatile HBA_PORT* port) {
 1000b72:	55                   	push   ebp
 1000b73:	57                   	push   edi
 1000b74:	56                   	push   esi
 1000b75:	53                   	push   ebx
 1000b76:	83 ec 10             	sub    esp,0x10
 1000b79:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:124
    HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
 1000b7d:	8b 33                	mov    esi,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:126

    port->cmd.ST = 0;
 1000b7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000b82:	83 e0 fe             	and    eax,0xfffffffe
 1000b85:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:130

    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
 1000b88:	53                   	push   ebx
 1000b89:	68 8c a3 02 01       	push   0x102a38c
 1000b8e:	68 00 20 00 00       	push   0x2000
 1000b93:	e8 6f 91 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:131
    int slot = find_cmdslot(port);
 1000b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
 1000b9b:	e8 16 ff ff ff       	call   1000ab6 <find_cmdslot>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:132
    if (slot == -1)
 1000ba0:	83 c4 10             	add    esp,0x10
 1000ba3:	83 f8 ff             	cmp    eax,0xffffffff
 1000ba6:	0f 84 78 01 00 00    	je     1000d24 <ahciEnablePortMultiplier+0x1b2>
 1000bac:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:134
        return;
    port->ie.AsUlong = 0; //xffffffff;
 1000bae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:135
    cmdheader += slot;
 1000bb5:	c1 e0 05             	shl    eax,0x5
 1000bb8:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:136
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
 1000bba:	83 ec 04             	sub    esp,0x4
 1000bbd:	56                   	push   esi
 1000bbe:	68 85 40 04 01       	push   0x1044085
 1000bc3:	68 00 20 00 00       	push   0x2000
 1000bc8:	e8 3a 91 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:137
    cmdheader->prdtl = 1;
 1000bcd:	66 c7 46 02 01 00    	mov    WORD PTR [esi+0x2],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:138
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
 1000bd3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
 1000bd6:	83 e0 20             	and    eax,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:141
    cmdheader->w = 0;
    cmdheader->c = 1; //required for reset
    cmdheader->p = 0;
 1000bd9:	83 c8 05             	or     eax,0x5
 1000bdc:	88 06                	mov    BYTE PTR [esi],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:142
    cmdheader->r = 1; //srst field
 1000bde:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
 1000be2:	83 c8 05             	or     eax,0x5
 1000be5:	88 46 01             	mov    BYTE PTR [esi+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:144

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
 1000be8:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:145
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
 1000beb:	55                   	push   ebp
 1000bec:	55                   	push   ebp
 1000bed:	68 b4 a3 02 01       	push   0x102a3b4
 1000bf2:	68 00 20 00 00       	push   0x2000
 1000bf7:	e8 0b 91 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:146
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
 1000bfc:	c7 85 80 00 00 00 00 	mov    DWORD PTR [ebp+0x80],0xc53000
 1000c03:	30 c5 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:147
    cmdtbl->prdt_entry[0].dbc = 0;
 1000c06:	8b 85 8c 00 00 00    	mov    eax,DWORD PTR [ebp+0x8c]
 1000c0c:	25 00 00 c0 ff       	and    eax,0xffc00000
 1000c11:	89 85 8c 00 00 00    	mov    DWORD PTR [ebp+0x8c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:148
    cmdtbl->prdt_entry[0].i = 0;
 1000c17:	c1 e8 18             	shr    eax,0x18
 1000c1a:	83 e0 7f             	and    eax,0x7f
 1000c1d:	88 85 8f 00 00 00    	mov    BYTE PTR [ebp+0x8f],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:151

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
 1000c23:	83 c4 1c             	add    esp,0x1c
 1000c26:	6a 14                	push   0x14
 1000c28:	6a 00                	push   0x0
 1000c2a:	55                   	push   ebp
 1000c2b:	e8 03 83 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:152
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
 1000c30:	c6 45 00 27          	mov    BYTE PTR [ebp+0x0],0x27
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:153
    cmdfis->c = 0; // Control
 1000c34:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
 1000c38:	83 e0 7f             	and    eax,0x7f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:154
    cmdfis->control |= (1 << 2); //reset bit
 1000c3b:	80 4d 0f 04          	or     BYTE PTR [ebp+0xf],0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:155
    cmdfis->pmport = 0xf;
 1000c3f:	83 c8 0f             	or     eax,0xf
 1000c42:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:156
    port->cmd.CLO = 1;
 1000c45:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000c48:	83 c8 08             	or     eax,0x8
 1000c4b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:157
    while (port->cmd.CLO);
 1000c4e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:157 (discriminator 1)
 1000c51:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000c54:	a8 08                	test   al,0x8
 1000c56:	75 f9                	jne    1000c51 <ahciEnablePortMultiplier+0xdf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:158
    port->cmd.ST = 1;
 1000c58:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000c5b:	83 c8 01             	or     eax,0x1
 1000c5e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:159
    port->ci |= slot;
 1000c61:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 1000c64:	09 c7                	or     edi,eax
 1000c66:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:161

    slot = find_cmdslot(port);
 1000c69:	83 ec 0c             	sub    esp,0xc
 1000c6c:	53                   	push   ebx
 1000c6d:	e8 44 fe ff ff       	call   1000ab6 <find_cmdslot>
 1000c72:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:162
    if (slot == -1)
 1000c74:	83 c4 10             	add    esp,0x10
 1000c77:	83 f8 ff             	cmp    eax,0xffffffff
 1000c7a:	0f 84 a4 00 00 00    	je     1000d24 <ahciEnablePortMultiplier+0x1b2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:164
        return;
    port->ie.AsUlong = 0; //xffffffff;
 1000c80:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:165
    cmdheader += slot;
 1000c87:	c1 e0 05             	shl    eax,0x5
 1000c8a:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:166
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
 1000c8c:	83 ec 04             	sub    esp,0x4
 1000c8f:	56                   	push   esi
 1000c90:	68 85 40 04 01       	push   0x1044085
 1000c95:	68 00 20 00 00       	push   0x2000
 1000c9a:	e8 68 90 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:167
    cmdheader->prdtl = 1;
 1000c9f:	66 c7 46 02 01 00    	mov    WORD PTR [esi+0x2],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:168
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
 1000ca5:	0f b6 16             	movzx  edx,BYTE PTR [esi]
 1000ca8:	83 e2 20             	and    edx,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:170
    cmdheader->w = 0;
    cmdheader->c = 1; //required for reset
 1000cab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
 1000caf:	83 c8 04             	or     eax,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:171
    cmdheader->p = 0;
 1000cb2:	83 ca 05             	or     edx,0x5
 1000cb5:	88 16                	mov    BYTE PTR [esi],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:172
    cmdheader->r = 0; //srst field
 1000cb7:	83 e0 fe             	and    eax,0xfffffffe
 1000cba:	88 46 01             	mov    BYTE PTR [esi+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:173
    cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
 1000cbd:	8b 76 08             	mov    esi,DWORD PTR [esi+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:174
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
 1000cc0:	56                   	push   esi
 1000cc1:	56                   	push   esi
 1000cc2:	68 b4 a3 02 01       	push   0x102a3b4
 1000cc7:	68 00 20 00 00       	push   0x2000
 1000ccc:	e8 36 90 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:175
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
 1000cd1:	c7 86 80 00 00 00 00 	mov    DWORD PTR [esi+0x80],0xc53000
 1000cd8:	30 c5 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:176
    cmdtbl->prdt_entry[0].dbc = 0;
 1000cdb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
 1000ce1:	25 00 00 c0 ff       	and    eax,0xffc00000
 1000ce6:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:177
    cmdtbl->prdt_entry[0].i = 0;
 1000cec:	c1 e8 18             	shr    eax,0x18
 1000cef:	83 e0 7f             	and    eax,0x7f
 1000cf2:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:180

    cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
 1000cf8:	83 c4 1c             	add    esp,0x1c
 1000cfb:	6a 14                	push   0x14
 1000cfd:	6a 00                	push   0x0
 1000cff:	56                   	push   esi
 1000d00:	e8 2e 82 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:181
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
 1000d05:	c6 06 27             	mov    BYTE PTR [esi],0x27
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:182
    cmdfis->c = 0; // control
 1000d08:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
 1000d0c:	83 e0 7f             	and    eax,0x7f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:183
    cmdfis->control &= ~(1 << 2); //reset bit
 1000d0f:	80 66 0f fb          	and    BYTE PTR [esi+0xf],0xfb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:184
    cmdfis->pmport = 0xf;
 1000d13:	83 c8 0f             	or     eax,0xf
 1000d16:	88 46 01             	mov    BYTE PTR [esi+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:185
    port->ci |= slot;
 1000d19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 1000d1c:	09 c7                	or     edi,eax
 1000d1e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
 1000d21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:186
}
 1000d24:	83 c4 0c             	add    esp,0xc
 1000d27:	5b                   	pop    ebx
 1000d28:	5e                   	pop    esi
 1000d29:	5f                   	pop    edi
 1000d2a:	5d                   	pop    ebp
 1000d2b:	c3                   	ret    

01000d2c <ahciIdentify>:
ahciIdentify():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:418

    // Clear FRE (bit4)
    port->cmd.FRE = 0;
}

void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
 1000d2c:	55                   	push   ebp
 1000d2d:	57                   	push   edi
 1000d2e:	56                   	push   esi
 1000d2f:	53                   	push   ebx
 1000d30:	83 ec 18             	sub    esp,0x18
 1000d33:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:419
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
 1000d37:	56                   	push   esi
 1000d38:	ff 35 04 98 12 00    	push   DWORD PTR ds:0x129804
 1000d3e:	56                   	push   esi
 1000d3f:	68 d8 a3 02 01       	push   0x102a3d8
 1000d44:	68 00 20 00 00       	push   0x2000
 1000d49:	e8 b9 8f 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:420
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
 1000d4e:	8b 2e                	mov    ebp,DWORD PTR [esi]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:421
    int slot = find_cmdslot(port);
 1000d50:	83 c4 14             	add    esp,0x14
 1000d53:	56                   	push   esi
 1000d54:	e8 5d fd ff ff       	call   1000ab6 <find_cmdslot>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:422
    if (slot == -1)
 1000d59:	83 c4 10             	add    esp,0x10
 1000d5c:	83 f8 ff             	cmp    eax,0xffffffff
 1000d5f:	0f 84 b5 01 00 00    	je     1000f1a <ahciIdentify+0x1ee>
 1000d65:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:424
        return;
    port->ie.AsUlong = 0xFFFFFFFF;
 1000d67:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:425
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
 1000d6e:	c1 e0 05             	shl    eax,0x5
 1000d71:	01 c5                	add    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:426
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
 1000d73:	83 ec 04             	sub    esp,0x4
 1000d76:	55                   	push   ebp
 1000d77:	68 85 40 04 01       	push   0x1044085
 1000d7c:	68 00 20 00 00       	push   0x2000
 1000d81:	e8 81 8f 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:427
    cmdheader->prdtl = 1;
 1000d86:	66 c7 45 02 01 00    	mov    WORD PTR [ebp+0x2],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:431
    cmdheader->cfl = 5; //sizeof (FIS_REG_H2D) / sizeof (uint32_t);
    cmdheader->w = 0;
    cmdheader->a = 0;
    cmdheader->c = 0;
 1000d8c:	80 65 01 fb          	and    BYTE PTR [ebp+0x1],0xfb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:432
    cmdheader->p = 0;
 1000d90:	c6 45 00 05          	mov    BYTE PTR [ebp+0x0],0x5
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:433
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
 1000d94:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:434
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
 1000d97:	83 c4 0c             	add    esp,0xc
 1000d9a:	68 90 00 00 00       	push   0x90
 1000d9f:	6a 00                	push   0x0
 1000da1:	53                   	push   ebx
 1000da2:	e8 8c 81 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:436
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
 1000da7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
 1000daa:	53                   	push   ebx
 1000dab:	68 b4 a3 02 01       	push   0x102a3b4
 1000db0:	68 00 20 00 00       	push   0x2000
 1000db5:	e8 4d 8f 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:437
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
 1000dba:	c7 83 80 00 00 00 00 	mov    DWORD PTR [ebx+0x80],0xc53000
 1000dc1:	30 c5 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:438
    cmdtbl->prdt_entry[0].dbc = 0x1ff;
 1000dc4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
 1000dca:	25 00 00 c0 ff       	and    eax,0xffc00000
 1000dcf:	0d ff 01 00 00       	or     eax,0x1ff
 1000dd4:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:439
    cmdtbl->prdt_entry[0].i = 1;
 1000dda:	c1 e8 18             	shr    eax,0x18
 1000ddd:	83 c8 80             	or     eax,0xffffff80
 1000de0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:442

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
 1000de6:	c6 03 27             	mov    BYTE PTR [ebx],0x27
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:444
    cmdfis->c = 1; // Command
    if (deviceType == AHCI_DEV_SATAPI)
 1000de9:	83 c4 18             	add    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:445
        cmdfis->command = ATA_IDENTIFY_CDROM_COMMAND;
 1000dec:	83 7c 24 2c 04       	cmp    DWORD PTR [esp+0x2c],0x4
 1000df1:	ba a1 ff ff ff       	mov    edx,0xffffffa1
 1000df6:	b8 ec ff ff ff       	mov    eax,0xffffffec
 1000dfb:	0f 44 c2             	cmove  eax,edx
 1000dfe:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:448
    else
        cmdfis->command = ATA_IDENTIFY_COMMAND;
    cmdfis->lba0 = 0;
 1000e01:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:449
    cmdfis->lba1 = 0;
 1000e05:	c6 43 05 00          	mov    BYTE PTR [ebx+0x5],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:450
    cmdfis->lba2 = 0;
 1000e09:	c6 43 06 00          	mov    BYTE PTR [ebx+0x6],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:451
    cmdfis->lba3 = 0;
 1000e0d:	c6 43 08 00          	mov    BYTE PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:452
    cmdfis->lba4 = 0;
 1000e11:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:453
    cmdfis->lba5 = 0;
 1000e15:	c6 43 0a 00          	mov    BYTE PTR [ebx+0xa],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:455
    cmdfis->lba5 = 0;
    cmdfis->pmport = 0;
 1000e19:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
 1000e1d:	83 c8 80             	or     eax,0xffffff80
 1000e20:	83 e0 f0             	and    eax,0xfffffff0
 1000e23:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:456
    cmdfis->device = 0;
 1000e26:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:457
    cmdfis->countl = 1;
 1000e2a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:458
    cmdfis->counth = 0;
 1000e2e:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:459
    int lCmdVal = AhciIssueCmd(port, slot);
 1000e32:	57                   	push   edi
 1000e33:	56                   	push   esi
 1000e34:	e8 43 f2 ff ff       	call   100007c <AhciIssueCmd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:460
    if (!lCmdVal) {
 1000e39:	83 c4 10             	add    esp,0x10
 1000e3c:	85 c0                	test   eax,eax
 1000e3e:	75 17                	jne    1000e57 <ahciIdentify+0x12b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:461
        printk("AHCI: ***Error identifying device (%u)***\n",lCmdVal);
 1000e40:	83 ec 08             	sub    esp,0x8
 1000e43:	6a 00                	push   0x0
 1000e45:	68 08 a4 02 01       	push   0x102a408
 1000e4a:	e8 a0 8e 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:462
        return;
 1000e4f:	83 c4 10             	add    esp,0x10
 1000e52:	e9 c3 00 00 00       	jmp    1000f1a <ahciIdentify+0x1ee>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:464
    }
    kATADeviceInfo[kATADeviceInfoCount].ATADeviceAvailable = true;
 1000e57:	8b 15 04 98 12 00    	mov    edx,DWORD PTR ds:0x129804
 1000e5d:	69 c2 73 02 00 00    	imul   eax,edx,0x273
 1000e63:	03 05 00 98 12 00    	add    eax,DWORD PTR ds:0x129800
 1000e69:	c6 80 51 02 00 00 01 	mov    BYTE PTR [eax+0x251],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:465
    kATADeviceInfo[kATADeviceInfoCount].bus = SATA;
 1000e70:	c7 80 61 02 00 00 02 	mov    DWORD PTR [eax+0x261],0x2
 1000e77:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:466
    kATADeviceInfo[kATADeviceInfoCount].driveNo = kATADeviceInfoCount;
 1000e7a:	89 90 65 02 00 00    	mov    DWORD PTR [eax+0x265],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:467
    kATADeviceInfo[kATADeviceInfoCount].ioPort = (uintptr_t) port;
 1000e80:	89 b0 69 02 00 00    	mov    DWORD PTR [eax+0x269],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:468
    kATADeviceInfo[kATADeviceInfoCount].irqNum = 0;
 1000e86:	c6 80 6d 02 00 00 00 	mov    BYTE PTR [eax+0x26d],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:469
    kATADeviceInfo[kATADeviceInfoCount].driveHeadPortDesignation = 0x0;
 1000e8d:	c6 80 6e 02 00 00 00 	mov    BYTE PTR [eax+0x26e],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:470
    kATADeviceInfo[kATADeviceInfoCount].queryATAData = false;
 1000e94:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:472
    if (deviceType == AHCI_DEV_SATAPI)
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_CD;
 1000e9b:	83 7c 24 24 04       	cmp    DWORD PTR [esp+0x24],0x4
 1000ea0:	0f 94 c2             	sete   dl
 1000ea3:	0f b6 d2             	movzx  edx,dl
 1000ea6:	83 c2 02             	add    edx,0x2
 1000ea9:	89 90 52 02 00 00    	mov    DWORD PTR [eax+0x252],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:475
    else
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
 1000eaf:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
 1000eb5:	89 90 6f 02 00 00    	mov    DWORD PTR [eax+0x26f],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:476
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
 1000ebb:	83 ec 04             	sub    esp,0x4
 1000ebe:	68 00 02 00 00       	push   0x200
 1000ec3:	68 00 30 c5 00       	push   0xc53000
 1000ec8:	50                   	push   eax
 1000ec9:	e8 b2 88 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:477
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
 1000ece:	a1 04 98 12 00       	mov    eax,ds:0x129804
 1000ed3:	8d 50 01             	lea    edx,[eax+0x1]
 1000ed6:	89 15 04 98 12 00    	mov    DWORD PTR ds:0x129804,edx
 1000edc:	69 c0 73 02 00 00    	imul   eax,eax,0x273
 1000ee2:	03 05 00 98 12 00    	add    eax,DWORD PTR ds:0x129800
 1000ee8:	89 04 24             	mov    DWORD PTR [esp],eax
 1000eeb:	e8 34 73 00 00       	call   1008224 <ataIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:478
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
 1000ef0:	83 c4 0c             	add    esp,0xc
 1000ef3:	69 05 04 98 12 00 73 	imul   eax,DWORD PTR ds:0x129804,0x273
 1000efa:	02 00 00 
 1000efd:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
 1000f03:	8d 44 02 8d          	lea    eax,[edx+eax*1-0x73]
 1000f07:	50                   	push   eax
 1000f08:	68 34 a4 02 01       	push   0x102a434
 1000f0d:	68 00 20 00 00       	push   0x2000
 1000f12:	e8 f0 8d 00 00       	call   1009d07 <printd>
 1000f17:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:479
}
 1000f1a:	83 c4 0c             	add    esp,0xc
 1000f1d:	5b                   	pop    ebx
 1000f1e:	5e                   	pop    esi
 1000f1f:	5f                   	pop    edi
 1000f20:	5d                   	pop    ebp
 1000f21:	c3                   	ret    

01000f22 <ahciSetCurrentDisk>:
ahciSetCurrentDisk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:509

#define ATA_DEV_BUSY 0x80
#define ATA_DEV_DRQ 0x08

void ahciSetCurrentDisk(volatile HBA_PORT* port) {
    kAHCICurrentDisk = port;
 1000f22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1000f26:	a3 4c 99 12 00       	mov    ds:0x12994c,eax
 1000f2b:	c3                   	ret    

01000f2c <ahciSetCurrentPart>:
ahciSetCurrentPart():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:514
}

void ahciSetCurrentPart(partEntry_t part) 
{
    kAHCICurrentPart = part;
 1000f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1000f30:	a3 50 99 12 00       	mov    ds:0x129950,eax
 1000f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1000f39:	a3 54 99 12 00       	mov    ds:0x129954,eax
 1000f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1000f42:	a3 58 99 12 00       	mov    ds:0x129958,eax
 1000f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1000f4b:	a3 5c 99 12 00       	mov    ds:0x12995c,eax
 1000f50:	c3                   	ret    

01000f51 <ahciBlockingRead28>:
ahciBlockingRead28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:526
    else
        return 0;
}

///Read the current disk *partition* 
int ahciBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
 1000f51:	55                   	push   ebp
 1000f52:	57                   	push   edi
 1000f53:	56                   	push   esi
 1000f54:	53                   	push   ebx
 1000f55:	83 ec 20             	sub    esp,0x20
 1000f58:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
 1000f5c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:530
    int prdCntr = 0;

    //CLR 06/07/2016 - Must add partition start sector
    sector+=kAHCICurrentPart.partStartSector;
 1000f60:	a1 50 99 12 00       	mov    eax,ds:0x129950
 1000f65:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
 1000f69:	89 c7                	mov    edi,eax
 1000f6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:532
    
    memset(buffer,0,sector_count*512);
 1000f6f:	89 f0                	mov    eax,esi
 1000f71:	c1 e0 09             	shl    eax,0x9
 1000f74:	50                   	push   eax
 1000f75:	6a 00                	push   0x0
 1000f77:	53                   	push   ebx
 1000f78:	e8 b6 7f 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:534
    
    printd(DEBUG_AHCI, "AHCI: read on port=0x%08X,sector=0x%08X,buffer=0x%08X,sector_count=%u\n", kAHCICurrentDisk,sector,buffer,sector_count);
 1000f7d:	83 c4 08             	add    esp,0x8
 1000f80:	56                   	push   esi
 1000f81:	53                   	push   ebx
 1000f82:	57                   	push   edi
 1000f83:	ff 35 4c 99 12 00    	push   DWORD PTR ds:0x12994c
 1000f89:	68 58 a4 02 01       	push   0x102a458
 1000f8e:	68 00 20 00 00       	push   0x2000
 1000f93:	e8 6f 8d 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:536

    kAHCICurrentDisk->pxis.AsUlong = (uint32_t) - 1; // Clear pending interrupt bits
 1000f98:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
 1000f9d:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:539
    int spin = 0; // Spin lock timeout counter

    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) kAHCICurrentDisk->clb;
 1000fa4:	8b 38                	mov    edi,DWORD PTR [eax]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:540
    int slot = find_cmdslot(kAHCICurrentDisk);
 1000fa6:	83 c4 14             	add    esp,0x14
 1000fa9:	50                   	push   eax
 1000faa:	e8 07 fb ff ff       	call   1000ab6 <find_cmdslot>
 1000faf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:541
    if (slot == -1)
 1000fb3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:542
        return false;
 1000fb6:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:541
    kAHCICurrentDisk->pxis.AsUlong = (uint32_t) - 1; // Clear pending interrupt bits
    int spin = 0; // Spin lock timeout counter

    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) kAHCICurrentDisk->clb;
    int slot = find_cmdslot(kAHCICurrentDisk);
    if (slot == -1)
 1000fbb:	83 f8 ff             	cmp    eax,0xffffffff
 1000fbe:	0f 84 84 01 00 00    	je     1001148 <ahciBlockingRead28+0x1f7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:543
        return false;
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
 1000fc4:	c1 e0 05             	shl    eax,0x5
 1000fc7:	01 f8                	add    eax,edi
 1000fc9:	89 c5                	mov    ebp,eax
 1000fcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:544
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
 1000fcf:	83 ec 04             	sub    esp,0x4
 1000fd2:	50                   	push   eax
 1000fd3:	68 85 40 04 01       	push   0x1044085
 1000fd8:	68 00 20 00 00       	push   0x2000
 1000fdd:	e8 25 8d 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:545
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count
 1000fe2:	8d 46 ff             	lea    eax,[esi-0x1]
 1000fe5:	c1 e8 04             	shr    eax,0x4
 1000fe8:	83 c0 01             	add    eax,0x1
 1000feb:	66 89 45 02          	mov    WORD PTR [ebp+0x2],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:547

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
 1000fef:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:548
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
 1000ff2:	83 c4 0c             	add    esp,0xc
 1000ff5:	0f b7 c0             	movzx  eax,ax
 1000ff8:	83 c0 08             	add    eax,0x8
 1000ffb:	c1 e0 04             	shl    eax,0x4
 1000ffe:	50                   	push   eax
 1000fff:	6a 00                	push   0x0
 1001001:	57                   	push   edi
 1001002:	e8 2c 7f 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:550
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
 1001007:	ff 75 08             	push   DWORD PTR [ebp+0x8]
 100100a:	57                   	push   edi
 100100b:	68 a0 a4 02 01       	push   0x102a4a0
 1001010:	68 00 20 00 00       	push   0x2000
 1001015:	e8 ed 8c 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:553

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
 100101a:	0f b7 45 02          	movzx  eax,WORD PTR [ebp+0x2]
 100101e:	83 e8 01             	sub    eax,0x1
 1001021:	83 c4 20             	add    esp,0x20
 1001024:	85 c0                	test   eax,eax
 1001026:	7e 4d                	jle    1001075 <ahciBlockingRead28+0x124>
 1001028:	8d af 80 00 00 00    	lea    ebp,[edi+0x80]
 100102e:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:554 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
 1001033:	89 5d 00             	mov    DWORD PTR [ebp+0x0],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:555 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dbc = 8 * 1024; // 8K bytes
 1001036:	8d 51 08             	lea    edx,[ecx+0x8]
 1001039:	c1 e2 04             	shl    edx,0x4
 100103c:	01 fa                	add    edx,edi
 100103e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
 1001041:	25 00 00 c0 ff       	and    eax,0xffc00000
 1001046:	80 cc 20             	or     ah,0x20
 1001049:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:556 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].i = 1;
 100104c:	c1 e8 18             	shr    eax,0x18
 100104f:	83 c8 80             	or     eax,0xffffff80
 1001052:	88 42 0f             	mov    BYTE PTR [edx+0xf],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:557 (discriminator 3)
        buffer += 4 * 1024; // 4K words
 1001055:	81 c3 00 10 00 00    	add    ebx,0x1000
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:558 (discriminator 3)
        sector_count -= 16; // 16 sectors
 100105b:	83 ee 10             	sub    esi,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:559 (discriminator 3)
        prdCntr++;
 100105e:	83 c1 01             	add    ecx,0x1
 1001061:	83 c5 10             	add    ebp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:553 (discriminator 3)
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
 1001064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1001068:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
 100106c:	83 e8 01             	sub    eax,0x1
 100106f:	39 c8                	cmp    eax,ecx
 1001071:	7f c0                	jg     1001033 <ahciBlockingRead28+0xe2>
 1001073:	eb 05                	jmp    100107a <ahciBlockingRead28+0x129>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:527
        return 0;
}

///Read the current disk *partition* 
int ahciBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
    int prdCntr = 0;
 1001075:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:562
        buffer += 4 * 1024; // 4K words
        sector_count -= 16; // 16 sectors
        prdCntr++;
    }
    // Last entry
    cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
 100107a:	83 c1 08             	add    ecx,0x8
 100107d:	c1 e1 04             	shl    ecx,0x4
 1001080:	01 f9                	add    ecx,edi
 1001082:	89 19                	mov    DWORD PTR [ecx],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:563
    cmdtbl->prdt_entry[prdCntr].dbc = sector_count << 9; // 512 bytes per sector
 1001084:	89 f0                	mov    eax,esi
 1001086:	c1 e0 09             	shl    eax,0x9
 1001089:	25 ff ff 3f 00       	and    eax,0x3fffff
 100108e:	8b 51 0c             	mov    edx,DWORD PTR [ecx+0xc]
 1001091:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
 1001097:	09 d0                	or     eax,edx
 1001099:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:564
    cmdtbl->prdt_entry[prdCntr].i = 1;
 100109c:	c1 e8 18             	shr    eax,0x18
 100109f:	83 c8 80             	or     eax,0xffffff80
 10010a2:	88 41 0f             	mov    BYTE PTR [ecx+0xf],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:569

    // Setup command
    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);

    cmdfis->fis_type = FIS_TYPE_REG_H2D;
 10010a5:	c6 07 27             	mov    BYTE PTR [edi],0x27
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:570
    cmdfis->c = 1; // Command
 10010a8:	80 4f 01 80          	or     BYTE PTR [edi+0x1],0x80
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:571
    cmdfis->command = ATA_CMD_READ_DMA_EX;
 10010ac:	c6 47 02 25          	mov    BYTE PTR [edi+0x2],0x25
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:572
    cmdfis->lba0 = (uint8_t) sector;
 10010b0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
 10010b4:	88 5f 04             	mov    BYTE PTR [edi+0x4],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:573
    cmdfis->lba1 = (uint8_t) (sector >> 8);
 10010b7:	89 d8                	mov    eax,ebx
 10010b9:	c1 e8 08             	shr    eax,0x8
 10010bc:	88 47 05             	mov    BYTE PTR [edi+0x5],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:574
    cmdfis->lba2 = (uint8_t) (sector >> 16);
 10010bf:	89 d8                	mov    eax,ebx
 10010c1:	c1 e8 10             	shr    eax,0x10
 10010c4:	88 47 06             	mov    BYTE PTR [edi+0x6],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:575
    cmdfis->device = 1 << 6; // LBA mode
 10010c7:	c6 47 07 40          	mov    BYTE PTR [edi+0x7],0x40
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:577

    cmdfis->lba3 = (uint8_t) (sector >> 24);
 10010cb:	89 d8                	mov    eax,ebx
 10010cd:	c1 e8 18             	shr    eax,0x18
 10010d0:	88 47 08             	mov    BYTE PTR [edi+0x8],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:578
    cmdfis->lba4 = (uint8_t) 0;
 10010d3:	c6 47 09 00          	mov    BYTE PTR [edi+0x9],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:579
    cmdfis->lba5 = (uint8_t) 0;
 10010d7:	c6 47 0a 00          	mov    BYTE PTR [edi+0xa],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:581

    cmdfis->countl = LOBYTE((uint16_t) sector_count);
 10010db:	89 f0                	mov    eax,esi
 10010dd:	88 47 0c             	mov    BYTE PTR [edi+0xc],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:582
    cmdfis->counth = HIBYTE((uint16_t) sector_count);
 10010e0:	89 f5                	mov    ebp,esi
 10010e2:	89 f0                	mov    eax,esi
 10010e4:	0f b6 c4             	movzx  eax,ah
 10010e7:	88 47 0d             	mov    BYTE PTR [edi+0xd],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:584

    int lCMdVal = AhciIssueCmd(kAHCICurrentDisk, slot);
 10010ea:	83 ec 08             	sub    esp,0x8
 10010ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 10010f1:	ff 35 4c 99 12 00    	push   DWORD PTR ds:0x12994c
 10010f7:	e8 80 ef ff ff       	call   100007c <AhciIssueCmd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:585
    if (!lCMdVal) {
 10010fc:	83 c4 10             	add    esp,0x10
 10010ff:	85 c0                	test   eax,eax
 1001101:	75 1c                	jne    100111f <ahciBlockingRead28+0x1ce>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:586
        printd(DEBUG_AHCI, "AHCI: ***Error reading from disk***\n");
 1001103:	83 ec 08             	sub    esp,0x8
 1001106:	68 cc a4 02 01       	push   0x102a4cc
 100110b:	68 00 20 00 00       	push   0x2000
 1001110:	e8 f2 8b 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:587
        return -1;
 1001115:	83 c4 10             	add    esp,0x10
 1001118:	bd ff ff ff ff       	mov    ebp,0xffffffff
 100111d:	eb 29                	jmp    1001148 <ahciBlockingRead28+0x1f7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:591
    }

    // Check again
    if (kAHCICurrentDisk->pxis.TFES) {
 100111f:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
 1001124:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
 1001127:	a9 00 00 00 40       	test   eax,0x40000000
 100112c:	74 1a                	je     1001148 <ahciBlockingRead28+0x1f7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:592
        printd(DEBUG_AHCI, "AHCI: Read disk error\n");
 100112e:	83 ec 08             	sub    esp,0x8
 1001131:	68 6c 3f 04 01       	push   0x1043f6c
 1001136:	68 00 20 00 00       	push   0x2000
 100113b:	e8 c7 8b 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:593
        return false;
 1001140:	83 c4 10             	add    esp,0x10
 1001143:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:597
    }

    return sector_count;
}
 1001148:	89 e8                	mov    eax,ebp
 100114a:	83 c4 1c             	add    esp,0x1c
 100114d:	5b                   	pop    ebx
 100114e:	5e                   	pop    esi
 100114f:	5f                   	pop    edi
 1001150:	5d                   	pop    ebp
 1001151:	c3                   	ret    

01001152 <ahciRead>:
ahciRead():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:517
void ahciSetCurrentPart(partEntry_t part) 
{
    kAHCICurrentPart = part;
}

int ahciRead(volatile HBA_PORT* port, int sector, uint8_t* buffer, int sector_count) {
 1001152:	53                   	push   ebx
 1001153:	83 ec 0c             	sub    esp,0xc
 1001156:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
ahciSetCurrentDisk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:509

#define ATA_DEV_BUSY 0x80
#define ATA_DEV_DRQ 0x08

void ahciSetCurrentDisk(volatile HBA_PORT* port) {
    kAHCICurrentDisk = port;
 100115a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 100115e:	a3 4c 99 12 00       	mov    ds:0x12994c,eax
ahciRead():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:519
    kAHCICurrentPart = part;
}

int ahciRead(volatile HBA_PORT* port, int sector, uint8_t* buffer, int sector_count) {
    ahciSetCurrentDisk(port);
    if (ahciBlockingRead28(sector, buffer, sector_count))
 1001163:	53                   	push   ebx
 1001164:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1001168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 100116c:	e8 e0 fd ff ff       	call   1000f51 <ahciBlockingRead28>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:520
        return sector_count;
 1001171:	85 c0                	test   eax,eax
 1001173:	0f 45 c3             	cmovne eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:523
    else
        return 0;
}
 1001176:	83 c4 18             	add    esp,0x18
 1001179:	5b                   	pop    ebx
 100117a:	c3                   	ret    

0100117b <ahciBlockingWrite28>:
ahciBlockingWrite28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:601
    return sector_count;
}

int ahciBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
    return 0;
}
 100117b:	b8 00 00 00 00       	mov    eax,0x0
 1001180:	c3                   	ret    

01001181 <ahci_port_activate_device>:
ahci_port_activate_device():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:672

    return true;
}

void ahci_port_activate_device(HBA_MEM* h, HBA_PORT* p)
{
 1001181:	55                   	push   ebp
 1001182:	57                   	push   edi
 1001183:	56                   	push   esi
 1001184:	53                   	push   ebx
 1001185:	83 ec 0c             	sub    esp,0xc
 1001188:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:673
    printd(DEBUG_AHCI,"activate port %d @ 0x%08X:\n", p - h->ports,p);
 100118c:	89 d8                	mov    eax,ebx
 100118e:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
 1001192:	8d b8 00 ff ff ff    	lea    edi,[eax-0x100]
 1001198:	c1 ff 07             	sar    edi,0x7
 100119b:	53                   	push   ebx
 100119c:	57                   	push   edi
 100119d:	68 9d 40 04 01       	push   0x104409d
 10011a2:	68 00 20 00 00       	push   0x2000
 10011a7:	e8 5b 8b 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:675
    /* first check the presence flag */
    if ( (p->ssts & 0x7) == HBA_PORT_DET_NOT_PRESENT) { //check DET status
 10011ac:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 10011af:	83 c4 10             	add    esp,0x10
 10011b2:	a8 07                	test   al,0x7
 10011b4:	0f 85 c8 01 00 00    	jne    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:676
                    printd(DEBUG_AHCI,"activate: DET_NOT_PRESENT\n");
 10011ba:	83 ec 08             	sub    esp,0x8
 10011bd:	68 b9 40 04 01       	push   0x10440b9
 10011c2:	68 00 20 00 00       	push   0x2000
 10011c7:	e8 3b 8b 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:678
                    /* nothing attached? */
                    if (p->cmd.CPD) { /* we rely on CPD */
 10011cc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10011cf:	83 c4 10             	add    esp,0x10
 10011d2:	a9 00 00 10 00       	test   eax,0x100000
 10011d7:	74 4c                	je     1001225 <ahci_port_activate_device+0xa4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:679
                                    if (!p->cmd.CPS) {
 10011d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10011dc:	a9 00 00 01 00       	test   eax,0x10000
 10011e1:	75 1a                	jne    10011fd <ahci_port_activate_device+0x7c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:680
                                                    printd(DEBUG_AHCI,"confirmed by CPD\n");
 10011e3:	83 ec 08             	sub    esp,0x8
 10011e6:	68 d4 40 04 01       	push   0x10440d4
 10011eb:	68 00 20 00 00       	push   0x2000
 10011f0:	e8 12 8b 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:681
                                                    return;
 10011f5:	83 c4 10             	add    esp,0x10
 10011f8:	e9 e8 02 00 00       	jmp    10014e5 <ahci_port_activate_device+0x364>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:684
                                    }
                                    /* there's something */
                                    if (!p->cmd.POD) {
 10011fd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001200:	a8 04                	test   al,0x4
 1001202:	75 16                	jne    100121a <ahci_port_activate_device+0x99>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:685
                                                    p->cmd.POD = 1; /* power it */
 1001204:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001207:	83 c8 04             	or     eax,0x4
 100120a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:686
                                                    wait(20);
 100120d:	83 ec 0c             	sub    esp,0xc
 1001210:	6a 14                	push   0x14
 1001212:	e8 f1 94 00 00       	call   100a708 <wait>
 1001217:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:688
                                    }
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
 100121a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 100121d:	a8 07                	test   al,0x7
 100121f:	0f 85 5d 01 00 00    	jne    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:692
                                                    goto next_step;
                    }
                    /* spin-up? */
                    if (!p->cmd.SUD) { /* always !1 if cap.sss == 0 */
 1001225:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001228:	a8 02                	test   al,0x2
 100122a:	0f 85 c7 00 00 00    	jne    10012f7 <ahci_port_activate_device+0x176>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:693
                                    printd(DEBUG_AHCI,"not spun-up yet?\n");
 1001230:	83 ec 08             	sub    esp,0x8
 1001233:	68 e6 40 04 01       	push   0x10440e6
 1001238:	68 00 20 00 00       	push   0x2000
 100123d:	e8 c5 8a 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:694
                                    if (p->serr.AsUlong & (1 << 26)) /* eXchange bit */
 1001242:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
 1001245:	83 c4 10             	add    esp,0x10
 1001248:	a9 00 00 00 04       	test   eax,0x4000000
 100124d:	74 0b                	je     100125a <ahci_port_activate_device+0xd9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:695
                                                    p->serr.AsUlong |= (1 << 26); /* RWC */
 100124f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
 1001252:	0d 00 00 00 04       	or     eax,0x4000000
 1001257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:696
                                    if ((p->ssts & 0x7) != 0) { /* set to 0 prior sud */
 100125a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 100125d:	a8 07                	test   al,0x7
 100125f:	74 16                	je     1001277 <ahci_port_activate_device+0xf6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:697
                                                    p->sctl.DET = 0;
 1001261:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 1001264:	83 e0 f0             	and    eax,0xfffffff0
 1001267:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:698
                                                    wait(20);
 100126a:	83 ec 0c             	sub    esp,0xc
 100126d:	6a 14                	push   0x14
 100126f:	e8 94 94 00 00       	call   100a708 <wait>
 1001274:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:700
                                    }
                                    p->cmd.SUD = 1;
 1001277:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100127a:	83 c8 02             	or     eax,0x2
 100127d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:701
                                    waitTicks(5); /* wait 50 mus */
 1001280:	83 ec 0c             	sub    esp,0xc
 1001283:	6a 05                	push   0x5
 1001285:	e8 6b 94 00 00       	call   100a6f5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:702
                                    if (p->serr.AsUlong & ((1 << 26) | (1 << 18))) { /* received sth. */
 100128a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
 100128d:	83 c4 10             	add    esp,0x10
 1001290:	a9 00 00 04 04       	test   eax,0x4040000
 1001295:	0f 85 e7 00 00 00    	jne    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:707
                                                    /* COMRESET, COMWAKE */
                                                    goto next_step;
                                    }
                                    /* send the reset */
                                    p->sctl.DET = 1;
 100129b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 100129e:	83 e0 f0             	and    eax,0xfffffff0
 10012a1:	83 c8 01             	or     eax,0x1
 10012a4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:708
                                    waitTicks(100);
 10012a7:	83 ec 0c             	sub    esp,0xc
 10012aa:	6a 64                	push   0x64
 10012ac:	e8 44 94 00 00       	call   100a6f5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:709
                                    p->sctl.DET = 0;
 10012b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 10012b4:	83 e0 f0             	and    eax,0xfffffff0
 10012b7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:710
                                    wait(20);
 10012ba:	c7 04 24 14 00 00 00 	mov    DWORD PTR [esp],0x14
 10012c1:	e8 42 94 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:711
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
 10012c6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 10012c9:	83 c4 10             	add    esp,0x10
 10012cc:	a8 07                	test   al,0x7
 10012ce:	0f 85 ae 00 00 00    	jne    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:713
                                                    goto next_step;
                                    p->cmd.SUD = 0; /* we're done enter listening mode */
 10012d4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10012d7:	83 e0 fd             	and    eax,0xfffffffd
 10012da:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:714
                                    printd(DEBUG_AHCI,"not present\n");
 10012dd:	83 ec 08             	sub    esp,0x8
 10012e0:	68 f8 40 04 01       	push   0x10440f8
 10012e5:	68 00 20 00 00       	push   0x2000
 10012ea:	e8 18 8a 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:715
                                    goto exit;
 10012ef:	83 c4 10             	add    esp,0x10
 10012f2:	e9 d8 01 00 00       	jmp    10014cf <ahci_port_activate_device+0x34e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:718
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
 10012f7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 10012fa:	c1 e8 08             	shr    eax,0x8
 10012fd:	83 e0 0f             	and    eax,0xf
 1001300:	3c 01                	cmp    al,0x1
 1001302:	74 7e                	je     1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:719
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
 1001304:	83 ec 08             	sub    esp,0x8
 1001307:	68 05 41 04 01       	push   0x1044105
 100130c:	68 00 20 00 00       	push   0x2000
 1001311:	e8 f1 89 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:721
                                    int ct = 50;
                                    while (p->cmd.ICC && ct--)
 1001316:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001319:	c1 e8 1c             	shr    eax,0x1c
 100131c:	83 c4 10             	add    esp,0x10
 100131f:	84 c0                	test   al,al
 1001321:	74 21                	je     1001344 <ahci_port_activate_device+0x1c3>
 1001323:	be 32 00 00 00       	mov    esi,0x32
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:722
                                                    waitTicks(1);
 1001328:	83 ec 0c             	sub    esp,0xc
 100132b:	6a 01                	push   0x1
 100132d:	e8 c3 93 00 00       	call   100a6f5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:721
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
                                    int ct = 50;
                                    while (p->cmd.ICC && ct--)
 1001332:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001335:	c1 e8 1c             	shr    eax,0x1c
 1001338:	83 c4 10             	add    esp,0x10
 100133b:	84 c0                	test   al,al
 100133d:	74 05                	je     1001344 <ahci_port_activate_device+0x1c3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:721 (discriminator 1)
 100133f:	83 ee 01             	sub    esi,0x1
 1001342:	75 e4                	jne    1001328 <ahci_port_activate_device+0x1a7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:723
                                                    waitTicks(1);
                                    p->cmd.ICC = 1;
 1001344:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001347:	25 ff ff ff 0f       	and    eax,0xfffffff
 100134c:	0d 00 00 00 10       	or     eax,0x10000000
 1001351:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:724
                                    wait(10);
 1001354:	83 ec 0c             	sub    esp,0xc
 1001357:	6a 0a                	push   0xa
 1001359:	e8 aa 93 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:725
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
 100135e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 1001361:	83 c4 10             	add    esp,0x10
 1001364:	a8 07                	test   al,0x7
 1001366:	75 1a                	jne    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:727
                                                    goto next_step;
                                    printd(DEBUG_AHCI,"unable to set to active\n");
 1001368:	83 ec 08             	sub    esp,0x8
 100136b:	68 14 41 04 01       	push   0x1044114
 1001370:	68 00 20 00 00       	push   0x2000
 1001375:	e8 8d 89 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:728
                                    goto exit;
 100137a:	83 c4 10             	add    esp,0x10
 100137d:	e9 4d 01 00 00       	jmp    10014cf <ahci_port_activate_device+0x34e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:734
                    }
    }

    /* det != 1*/
next_step:
    if ((p->ssts & 0x7) == HBA_PORT_DET_PRESENT) {
 1001382:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 1001385:	83 e0 07             	and    eax,0x7
 1001388:	83 f8 03             	cmp    eax,0x3
 100138b:	0f 85 f4 00 00 00    	jne    1001485 <ahci_port_activate_device+0x304>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:736
                    /* almost done */
                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE) {
 1001391:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 1001394:	c1 e8 08             	shr    eax,0x8
 1001397:	83 e0 0f             	and    eax,0xf
 100139a:	3c 01                	cmp    al,0x1
 100139c:	0f 84 99 00 00 00    	je     100143b <ahci_port_activate_device+0x2ba>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:738
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
 10013a2:	83 ec 08             	sub    esp,0x8
 10013a5:	68 2d 41 04 01       	push   0x104412d
 10013aa:	68 00 20 00 00       	push   0x2000
 10013af:	e8 53 89 00 00       	call   1009d07 <printd>
 10013b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:747
                                    while (p->cmd.ICC && ct--) /* 500ms */
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
                                                    p->cmd.ICC = 1;
                                                    waitTicks(1);
                                                    wc++; ct = 50;
 10013b7:	be 00 00 00 00       	mov    esi,0x0
 10013bc:	bd 32 00 00 00       	mov    ebp,0x32
 10013c1:	eb 10                	jmp    10013d3 <ahci_port_activate_device+0x252>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:742
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
activ:
                                    ct = 50, wc = 0;
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
 10013c3:	83 ed 01             	sub    ebp,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:743
                                                    waitTicks(1);
 10013c6:	83 ec 0c             	sub    esp,0xc
 10013c9:	6a 01                	push   0x1
 10013cb:	e8 25 93 00 00       	call   100a6f5 <waitTicks>
 10013d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:742
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
activ:
                                    ct = 50, wc = 0;
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
 10013d3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10013d6:	c1 e8 1c             	shr    eax,0x1c
 10013d9:	84 c0                	test   al,al
 10013db:	74 04                	je     10013e1 <ahci_port_activate_device+0x260>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:742 (discriminator 1)
 10013dd:	85 ed                	test   ebp,ebp
 10013df:	75 e2                	jne    10013c3 <ahci_port_activate_device+0x242>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:744
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
 10013e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 10013e4:	c1 e8 08             	shr    eax,0x8
 10013e7:	83 e0 0f             	and    eax,0xf
 10013ea:	85 f6                	test   esi,esi
 10013ec:	75 2b                	jne    1001419 <ahci_port_activate_device+0x298>
 10013ee:	3c 01                	cmp    al,0x1
 10013f0:	74 27                	je     1001419 <ahci_port_activate_device+0x298>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:745
                                                    p->cmd.ICC = 1;
 10013f2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10013f5:	25 ff ff ff 0f       	and    eax,0xfffffff
 10013fa:	0d 00 00 00 10       	or     eax,0x10000000
 10013ff:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:746
                                                    waitTicks(1);
 1001402:	83 ec 0c             	sub    esp,0xc
 1001405:	6a 01                	push   0x1
 1001407:	e8 e9 92 00 00       	call   100a6f5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:747
                                                    wc++; ct = 50;
 100140c:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:748
                                                    goto rewait;
 100140f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:747
                                    while (p->cmd.ICC && ct--) /* 500ms */
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
                                                    p->cmd.ICC = 1;
                                                    waitTicks(1);
                                                    wc++; ct = 50;
 1001412:	bd 32 00 00 00       	mov    ebp,0x32
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:748
                                                    goto rewait;
 1001417:	eb ba                	jmp    10013d3 <ahci_port_activate_device+0x252>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:750
                                    }
                                    if (wc) {
 1001419:	85 f6                	test   esi,esi
 100141b:	74 1e                	je     100143b <ahci_port_activate_device+0x2ba>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:752
                                                    /* reset */
                                                    p->sctl.DET = 1;
 100141d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 1001420:	83 e0 f0             	and    eax,0xfffffff0
 1001423:	83 c8 01             	or     eax,0x1
 1001426:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:753
                                                    waitTicks(100);
 1001429:	83 ec 0c             	sub    esp,0xc
 100142c:	6a 64                	push   0x64
 100142e:	e8 c2 92 00 00       	call   100a6f5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:754
                                                    goto next_step;
 1001433:	83 c4 10             	add    esp,0x10
 1001436:	e9 47 ff ff ff       	jmp    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:757
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
 100143b:	83 ec 04             	sub    esp,0x4
 100143e:	57                   	push   edi
 100143f:	68 f4 a4 02 01       	push   0x102a4f4
 1001444:	68 00 20 00 00       	push   0x2000
 1001449:	e8 b9 88 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:760
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
 100144e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 1001451:	c1 e8 08             	shr    eax,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
 1001454:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
 1001457:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
 100145a:	83 e1 07             	and    ecx,0x7
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
 100145d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
 1001460:	83 e2 01             	and    edx,0x1
 1001463:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
 1001466:	83 c4 0c             	add    esp,0xc
 1001469:	50                   	push   eax
 100146a:	51                   	push   ecx
 100146b:	52                   	push   edx
 100146c:	56                   	push   esi
 100146d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
 1001470:	50                   	push   eax
 1001471:	68 46 41 04 01       	push   0x1044146
 1001476:	68 00 20 00 00       	push   0x2000
 100147b:	e8 87 88 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:761
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
                    return;
 1001480:	83 c4 20             	add    esp,0x20
 1001483:	eb 60                	jmp    10014e5 <ahci_port_activate_device+0x364>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:762
    } else if ((p->ssts & 0x7) == 4/*?*/) {
 1001485:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 1001488:	83 e0 07             	and    eax,0x7
 100148b:	83 f8 04             	cmp    eax,0x4
 100148e:	75 1a                	jne    10014aa <ahci_port_activate_device+0x329>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:764
                    /* just deactivated */
                    printd(DEBUG_AHCI,"PHY offline mode\n");
 1001490:	83 ec 08             	sub    esp,0x8
 1001493:	68 5f 41 04 01       	push   0x104415f
 1001498:	68 00 20 00 00       	push   0x2000
 100149d:	e8 65 88 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:765
                    goto activ;
 10014a2:	83 c4 10             	add    esp,0x10
 10014a5:	e9 0d ff ff ff       	jmp    10013b7 <ahci_port_activate_device+0x236>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:766
    } else if ((p->ssts & 0x7) == 5/*DET_PRESENT_NO_PHY*/) {
 10014aa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 10014ad:	83 e0 07             	and    eax,0x7
 10014b0:	83 f8 05             	cmp    eax,0x5
 10014b3:	75 1a                	jne    10014cf <ahci_port_activate_device+0x34e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:767
                    printd(DEBUG_AHCI,"PRESENT_NO_PHY mode\n");
 10014b5:	83 ec 08             	sub    esp,0x8
 10014b8:	68 71 41 04 01       	push   0x1044171
 10014bd:	68 00 20 00 00       	push   0x2000
 10014c2:	e8 40 88 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:768
                    goto activ; /* try the same */
 10014c7:	83 c4 10             	add    esp,0x10
 10014ca:	e9 e8 fe ff ff       	jmp    10013b7 <ahci_port_activate_device+0x236>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:772
    }
exit:
                    /* we're really done */
                    printd(DEBUG_AHCI,"Not present at port %d\n", p - h->ports);
 10014cf:	83 ec 04             	sub    esp,0x4
 10014d2:	57                   	push   edi
 10014d3:	68 86 41 04 01       	push   0x1044186
 10014d8:	68 00 20 00 00       	push   0x2000
 10014dd:	e8 25 88 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:773
                    return;
 10014e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:774
}
 10014e5:	83 c4 0c             	add    esp,0xc
 10014e8:	5b                   	pop    ebx
 10014e9:	5e                   	pop    esi
 10014ea:	5f                   	pop    edi
 10014eb:	5d                   	pop    ebp
 10014ec:	c3                   	ret    

010014ed <ahci_enable_port>:
ahci_enable_port():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:777

void ahci_enable_port(HBA_MEM* ad, int pt)
{
 10014ed:	55                   	push   ebp
 10014ee:	57                   	push   edi
 10014ef:	56                   	push   esi
 10014f0:	53                   	push   ebx
 10014f1:	83 ec 1c             	sub    esp,0x1c
 10014f4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
 10014f8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:782
        HBA_PORT* p = &ad->ports[pt];
        int reset_ct = 0;
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
 10014fc:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
 10014ff:	b8 01 00 00 00       	mov    eax,0x1
 1001504:	89 f1                	mov    ecx,esi
 1001506:	d3 e0                	shl    eax,cl
 1001508:	85 d0                	test   eax,edx
 100150a:	0f 84 23 02 00 00    	je     1001733 <ahci_enable_port+0x246>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:778
                    return;
}

void ahci_enable_port(HBA_MEM* ad, int pt)
{
        HBA_PORT* p = &ad->ports[pt];
 1001510:	8d 46 02             	lea    eax,[esi+0x2]
 1001513:	c1 e0 07             	shl    eax,0x7
 1001516:	01 f8                	add    eax,edi
 1001518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
 100151c:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:787
        if (!(ad->pi & (1 << pt)))
                return;
 
Pos1:
        /* clear old data */
        p->serr.AsUlong = 0xffffffff; /* 10.1.2 -> 6. */
 1001521:	89 f3                	mov    ebx,esi
 1001523:	c1 e3 07             	shl    ebx,0x7
 1001526:	01 fb                	add    ebx,edi
 1001528:	c7 83 30 01 00 00 ff 	mov    DWORD PTR [ebx+0x130],0xffffffff
 100152f:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:788
        p->pxis.AsUlong = 0xffffffff; /* clear all pending interrupts */
 1001532:	c7 83 10 01 00 00 ff 	mov    DWORD PTR [ebx+0x110],0xffffffff
 1001539:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:791
 
        /* first allow for the reception of FISes */
        p->cmd.FRE = 1;
 100153c:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
 1001542:	83 c8 10             	or     eax,0x10
 1001545:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:792
        wait(20); /* wait for BSY to show up */
 100154b:	83 ec 0c             	sub    esp,0xc
 100154e:	6a 14                	push   0x14
 1001550:	e8 b3 91 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:794
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
 1001555:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:795
                if (sts & 1) {
 100155b:	0f b6 c2             	movzx  eax,dl
 100155e:	83 c4 10             	add    esp,0x10
 1001561:	a8 01                	test   al,0x1
 1001563:	75 0d                	jne    1001572 <ahci_enable_port+0x85>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:817
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
 1001565:	a8 88                	test   al,0x88
 1001567:	0f 85 b0 00 00 00    	jne    100161d <ahci_enable_port+0x130>
 100156d:	e9 ca 00 00 00       	jmp    100163c <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:797
        wait(20); /* wait for BSY to show up */
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
                if (sts & 1) {
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
 1001572:	80 fa 7f             	cmp    dl,0x7f
 1001575:	0f 84 c1 00 00 00    	je     100163c <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:799
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
 100157b:	80 fa 41             	cmp    dl,0x41
 100157e:	75 06                	jne    1001586 <ahci_enable_port+0x99>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:799 (discriminator 1)
 1001580:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:804
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
                                " while starting up.\n", pt, p->tfd.ERR);
 1001586:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:803
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
 100158c:	83 ec 04             	sub    esp,0x4
 100158f:	83 e0 01             	and    eax,0x1
 1001592:	50                   	push   eax
 1001593:	56                   	push   esi
 1001594:	68 20 a5 02 01       	push   0x102a520
 1001599:	e8 51 87 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:805
                                " while starting up.\n", pt, p->tfd.ERR);
                        printd(DEBUG_AHCI,"AHCI: scr1: %x %x\n", p->serr.AsUlong, p->tfd.ERR);
 100159e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
 10015a4:	8b 93 30 01 00 00    	mov    edx,DWORD PTR [ebx+0x130]
 10015aa:	83 e0 01             	and    eax,0x1
 10015ad:	50                   	push   eax
 10015ae:	52                   	push   edx
 10015af:	68 9e 41 04 01       	push   0x104419e
 10015b4:	68 00 20 00 00       	push   0x2000
 10015b9:	e8 49 87 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:806
                        printd(DEBUG_AHCI,"AHCI: tfd: %x %x\n", p->tfd.AsUchar, p->tfd.ERR);
 10015be:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
 10015c4:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
 10015ca:	83 c4 20             	add    esp,0x20
 10015cd:	83 e0 01             	and    eax,0x1
 10015d0:	50                   	push   eax
 10015d1:	52                   	push   edx
 10015d2:	68 b1 41 04 01       	push   0x10441b1
 10015d7:	68 00 20 00 00       	push   0x2000
 10015dc:	e8 26 87 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:807
                        p->serr.AsUlong = 0xffffffff;
 10015e1:	c7 83 30 01 00 00 ff 	mov    DWORD PTR [ebx+0x130],0xffffffff
 10015e8:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:808
                        if (!reset_ct++) {
 10015eb:	83 c5 01             	add    ebp,0x1
 10015ee:	83 c4 10             	add    esp,0x10
 10015f1:	83 fd 01             	cmp    ebp,0x1
 10015f4:	75 15                	jne    100160b <ahci_enable_port+0x11e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:809
                                ahci_port_activate_device(ad, p);
 10015f6:	83 ec 08             	sub    esp,0x8
 10015f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 10015fd:	57                   	push   edi
 10015fe:	e8 7e fb ff ff       	call   1001181 <ahci_port_activate_device>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:810
                                goto Pos1;
 1001603:	83 c4 10             	add    esp,0x10
 1001606:	e9 1d ff ff ff       	jmp    1001528 <ahci_enable_port+0x3b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:811
                        } else if (reset_ct == 1) {
 100160b:	83 fd 01             	cmp    ebp,0x1
 100160e:	0f 84 14 ff ff ff    	je     1001528 <ahci_enable_port+0x3b>
 1001614:	e9 f5 00 00 00       	jmp    100170e <ahci_enable_port+0x221>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:817
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
 1001619:	a8 88                	test   al,0x88
 100161b:	74 1f                	je     100163c <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:819
                        break;
                wait(50);
 100161d:	83 ec 0c             	sub    esp,0xc
 1001620:	6a 32                	push   0x32
 1001622:	e8 e1 90 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:794
 
        /* first allow for the reception of FISes */
        p->cmd.FRE = 1;
        wait(20); /* wait for BSY to show up */
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
 1001627:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:795
                if (sts & 1) {
 100162d:	0f b6 c2             	movzx  eax,dl
 1001630:	83 c4 10             	add    esp,0x10
 1001633:	a8 01                	test   al,0x1
 1001635:	74 e2                	je     1001619 <ahci_enable_port+0x12c>
 1001637:	e9 36 ff ff ff       	jmp    1001572 <ahci_enable_port+0x85>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:823
                        break;
                wait(50);
        }
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
 100163c:	89 f0                	mov    eax,esi
 100163e:	c1 e0 07             	shl    eax,0x7
 1001641:	01 f8                	add    eax,edi
 1001643:	8b 80 28 01 00 00    	mov    eax,DWORD PTR [eax+0x128]
 1001649:	83 e0 07             	and    eax,0x7
 100164c:	83 f8 03             	cmp    eax,0x3
 100164f:	74 10                	je     1001661 <ahci_enable_port+0x174>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:824
                ahci_port_activate_device(ad, p);
 1001651:	83 ec 08             	sub    esp,0x8
 1001654:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1001658:	57                   	push   edi
 1001659:	e8 23 fb ff ff       	call   1001181 <ahci_port_activate_device>
 100165e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:825
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
 1001661:	89 f0                	mov    eax,esi
 1001663:	c1 e0 07             	shl    eax,0x7
 1001666:	01 f8                	add    eax,edi
 1001668:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
 100166e:	a8 88                	test   al,0x88
 1001670:	0f 85 98 00 00 00    	jne    100170e <ahci_enable_port+0x221>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:827
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
 1001676:	89 f0                	mov    eax,esi
 1001678:	c1 e0 07             	shl    eax,0x7
 100167b:	01 f8                	add    eax,edi
 100167d:	8b 80 28 01 00 00    	mov    eax,DWORD PTR [eax+0x128]
 1001683:	83 e0 07             	and    eax,0x7
 1001686:	83 f8 03             	cmp    eax,0x3
 1001689:	74 4b                	je     10016d6 <ahci_enable_port+0x1e9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:827 (discriminator 1)
 100168b:	89 f0                	mov    eax,esi
 100168d:	c1 e0 07             	shl    eax,0x7
 1001690:	8d 84 07 20 01 00 00 	lea    eax,[edi+eax*1+0x120]
 1001697:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
 100169a:	c1 e8 08             	shr    eax,0x8
 100169d:	83 e0 0f             	and    eax,0xf
 10016a0:	3c 02                	cmp    al,0x2
 10016a2:	74 32                	je     10016d6 <ahci_enable_port+0x1e9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:828 (discriminator 2)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
 10016a4:	89 f0                	mov    eax,esi
 10016a6:	c1 e0 07             	shl    eax,0x7
 10016a9:	8d 84 07 20 01 00 00 	lea    eax,[edi+eax*1+0x120]
 10016b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
 10016b3:	c1 e8 08             	shr    eax,0x8
 10016b6:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:827 (discriminator 2)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
 10016b9:	3c 06                	cmp    al,0x6
 10016bb:	74 19                	je     10016d6 <ahci_enable_port+0x1e9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:828 (discriminator 3)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
 10016bd:	89 f0                	mov    eax,esi
 10016bf:	c1 e0 07             	shl    eax,0x7
 10016c2:	8d 84 07 20 01 00 00 	lea    eax,[edi+eax*1+0x120]
 10016c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
 10016cc:	c1 e8 08             	shr    eax,0x8
 10016cf:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:827 (discriminator 3)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
 10016d2:	3c 08                	cmp    al,0x8
 10016d4:	75 38                	jne    100170e <ahci_enable_port+0x221>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:831
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
        /* we're allowed so set it */
        p->cmd.ST = 1;
 10016d6:	89 f0                	mov    eax,esi
 10016d8:	c1 e0 07             	shl    eax,0x7
 10016db:	01 c7                	add    edi,eax
 10016dd:	8b 87 18 01 00 00    	mov    eax,DWORD PTR [edi+0x118]
 10016e3:	83 c8 01             	or     eax,0x1
 10016e6:	89 87 18 01 00 00    	mov    DWORD PTR [edi+0x118],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:833
        /* Change in PhyRdy, CPS, TFS.err, PCS, DPS(I=1), UFS, HBFS, HBDS, IFS */
        p->ie.AsUlong = (1 << 22) | (1 << 6) | (1 << 31) | (1 << 30)
 10016ec:	c7 87 14 01 00 00 70 	mov    DWORD PTR [edi+0x114],0xf8400070
 10016f3:	00 40 f8 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:839
                | (1 << 5) | (1 << 4) | (1 << 29) | (1 << 28) | (1 << 27);
 
        ///* issue the IDENTIFY_(PACKET)_DEVICE command */
        //ahci_issue_command(ad, pt, 0, disk_cmd_identify, 0, 0, NULL, NULL /* wq_worker_ad*/);
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
 10016f6:	83 ec 04             	sub    esp,0x4
 10016f9:	56                   	push   esi
 10016fa:	68 58 a5 02 01       	push   0x102a558
 10016ff:	68 00 20 00 00       	push   0x2000
 1001704:	e8 fe 85 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:840
        return;
 1001709:	83 c4 10             	add    esp,0x10
 100170c:	eb 25                	jmp    1001733 <ahci_enable_port+0x246>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:843
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
 100170e:	83 ec 04             	sub    esp,0x4
 1001711:	56                   	push   esi
 1001712:	68 84 a5 02 01       	push   0x102a584
 1001717:	68 00 20 00 00       	push   0x2000
 100171c:	e8 e6 85 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:844
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
 1001721:	c1 e6 07             	shl    esi,0x7
 1001724:	01 f7                	add    edi,esi
 1001726:	c7 87 14 01 00 00 40 	mov    DWORD PTR [edi+0x114],0x80400040
 100172d:	00 40 80 
 1001730:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:845
}
 1001733:	83 c4 1c             	add    esp,0x1c
 1001736:	5b                   	pop    ebx
 1001737:	5e                   	pop    esi
 1001738:	5f                   	pop    edi
 1001739:	5d                   	pop    ebp
 100173a:	c3                   	ret    

0100173b <ahciProbePorts>:
ahciProbePorts():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:239
    if (waitMS == 0)
        return false;
    return true;
}

void ahciProbePorts(HBA_MEM *abar) {
 100173b:	55                   	push   ebp
 100173c:	57                   	push   edi
 100173d:	56                   	push   esi
 100173e:	53                   	push   ebx
 100173f:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:241
    // Search disk in impelemented ports
    uint32_t pi = abar->pi;
 1001742:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
 1001746:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:243
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
 1001749:	a1 00 d4 00 01       	mov    eax,ds:0x100d400
 100174e:	c1 e0 10             	shl    eax,0x10
 1001751:	05 00 30 b1 00       	add    eax,0xb13000
 1001756:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:244
    if (pi > 0)
 100175a:	85 ed                	test   ebp,ebp
 100175c:	74 1e                	je     100177c <ahciProbePorts+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:245
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
 100175e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
 1001762:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
 1001765:	50                   	push   eax
 1001766:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
 100176a:	68 ac a5 02 01       	push   0x102a5ac
 100176f:	68 00 20 00 00       	push   0x2000
 1001774:	e8 8e 85 00 00       	call   1009d07 <printd>
 1001779:	83 c4 10             	add    esp,0x10
 100177c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
 1001780:	8d b0 00 01 00 00    	lea    esi,[eax+0x100]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:239
    if (waitMS == 0)
        return false;
    return true;
}

void ahciProbePorts(HBA_MEM *abar) {
 1001786:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:247
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
    if (pi > 0)
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
    while (i < 32) {
        if (pi & 1) {
 100178b:	f7 c5 01 00 00 00    	test   ebp,0x1
 1001791:	0f 84 39 01 00 00    	je     10018d0 <ahciProbePorts+0x195>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:248
        ahci_enable_port(abar,i);
 1001797:	83 ec 08             	sub    esp,0x8
 100179a:	53                   	push   ebx
 100179b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 100179f:	e8 49 fd ff ff       	call   10014ed <ahci_enable_port>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:250
        //waitForPortIdle(&abar->ports[i]);
            uint32_t sig = 0;
 10017a4:	c7 44 24 2c 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
 10017ab:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:252
            //Get the SATA device signature
            int dt = check_type(&abar->ports[i], &sig);
 10017ac:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
 10017b0:	83 c4 08             	add    esp,0x8
 10017b3:	8d 44 24 24          	lea    eax,[esp+0x24]
 10017b7:	50                   	push   eax
 10017b8:	56                   	push   esi
 10017b9:	e8 a2 ea ff ff       	call   1000260 <check_type>
 10017be:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:253
            printd(DEBUG_AHCI, "AHCI: Checking port %u (0x%08X), sig=%08X\n", i, &abar->ports[i], sig);
 10017c0:	83 c4 04             	add    esp,0x4
 10017c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
 10017c7:	56                   	push   esi
 10017c8:	53                   	push   ebx
 10017c9:	68 e0 a5 02 01       	push   0x102a5e0
 10017ce:	68 00 20 00 00       	push   0x2000
 10017d3:	e8 2f 85 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:255
            //Found a SATA disk
            if (dt == AHCI_DEV_SATA) {
 10017d8:	83 c4 20             	add    esp,0x20
 10017db:	83 ff 01             	cmp    edi,0x1
 10017de:	75 58                	jne    1001838 <ahciProbePorts+0xfd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:256
                printd(DEBUG_AHCI, "AHCI: SATA drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
 10017e0:	56                   	push   esi
 10017e1:	53                   	push   ebx
 10017e2:	68 0c a6 02 01       	push   0x102a60c
 10017e7:	68 00 20 00 00       	push   0x2000
 10017ec:	e8 16 85 00 00       	call   1009d07 <printd>
 10017f1:	89 d8                	mov    eax,ebx
 10017f3:	c1 e0 07             	shl    eax,0x7
 10017f6:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:257
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
 10017fa:	8b 90 08 01 00 00    	mov    edx,DWORD PTR [eax+0x108]
 1001800:	8b 80 00 01 00 00    	mov    eax,DWORD PTR [eax+0x100]
 1001806:	52                   	push   edx
 1001807:	50                   	push   eax
 1001808:	68 c3 41 04 01       	push   0x10441c3
 100180d:	68 00 20 00 00       	push   0x2000
 1001812:	e8 f0 84 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:258
                port_rebase(&abar->ports[i], i, rb);
 1001817:	83 c4 1c             	add    esp,0x1c
 100181a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 100181e:	53                   	push   ebx
 100181f:	56                   	push   esi
 1001820:	e8 72 f1 ff ff       	call   1000997 <port_rebase>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:261
                	//det reset, disable slumber and Partial state
			//reset port, send COMRESET signal
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATA);
 1001825:	83 c4 08             	add    esp,0x8
 1001828:	6a 01                	push   0x1
 100182a:	56                   	push   esi
 100182b:	e8 fc f4 ff ff       	call   1000d2c <ahciIdentify>
 1001830:	83 c4 10             	add    esp,0x10
 1001833:	e9 98 00 00 00       	jmp    10018d0 <ahciProbePorts+0x195>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:271
                    printk("AHCI: Successfully read sector 0 from device to 0x%08X\n",ahciReadBuff);
                    printk("AHCI: Read Buffer: %s\n",ahciReadBuff);
                    printk("sig=0x%08X\n",abar->ports[i].sig);
                }
                 */
            } else if (dt == AHCI_DEV_SATAPI) {
 1001838:	83 ff 04             	cmp    edi,0x4
 100183b:	75 59                	jne    1001896 <ahciProbePorts+0x15b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:272
                printd(DEBUG_AHCI, "AHCI:SATAPI drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
 100183d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
 1001841:	57                   	push   edi
 1001842:	53                   	push   ebx
 1001843:	68 38 a6 02 01       	push   0x102a638
 1001848:	68 00 20 00 00       	push   0x2000
 100184d:	e8 b5 84 00 00       	call   1009d07 <printd>
 1001852:	89 d8                	mov    eax,ebx
 1001854:	c1 e0 07             	shl    eax,0x7
 1001857:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:273
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
 100185b:	8b 90 08 01 00 00    	mov    edx,DWORD PTR [eax+0x108]
 1001861:	8b 80 00 01 00 00    	mov    eax,DWORD PTR [eax+0x100]
 1001867:	52                   	push   edx
 1001868:	50                   	push   eax
 1001869:	68 c3 41 04 01       	push   0x10441c3
 100186e:	68 00 20 00 00       	push   0x2000
 1001873:	e8 8f 84 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:274
                port_rebase(&abar->ports[i], i, rb);
 1001878:	83 c4 1c             	add    esp,0x1c
 100187b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 100187f:	53                   	push   ebx
 1001880:	57                   	push   edi
 1001881:	e8 11 f1 ff ff       	call   1000997 <port_rebase>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:276
                //Run an ATA_IDENTIFY
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATAPI);
 1001886:	83 c4 08             	add    esp,0x8
 1001889:	6a 04                	push   0x4
 100188b:	57                   	push   edi
 100188c:	e8 9b f4 ff ff       	call   1000d2c <ahciIdentify>
 1001891:	83 c4 10             	add    esp,0x10
 1001894:	eb 3a                	jmp    10018d0 <ahciProbePorts+0x195>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:277
            } else if (dt == AHCI_DEV_SEMB) {
 1001896:	83 ff 02             	cmp    edi,0x2
 1001899:	75 19                	jne    10018b4 <ahciProbePorts+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:278
                printd(DEBUG_AHCI, "AHCI: SEMB drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
 100189b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
 100189f:	53                   	push   ebx
 10018a0:	68 68 a6 02 01       	push   0x102a668
 10018a5:	68 00 20 00 00       	push   0x2000
 10018aa:	e8 58 84 00 00       	call   1009d07 <printd>
 10018af:	83 c4 10             	add    esp,0x10
 10018b2:	eb 1c                	jmp    10018d0 <ahciProbePorts+0x195>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:280
                //port_rebase(abar->ports,i,rb+=0x10000);
            } else if (dt == AHCI_DEV_PM) {
 10018b4:	83 ff 03             	cmp    edi,0x3
 10018b7:	75 17                	jne    10018d0 <ahciProbePorts+0x195>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:281
                printd(DEBUG_AHCI, "AHCI: PM drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
 10018b9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
 10018bd:	53                   	push   ebx
 10018be:	68 94 a6 02 01       	push   0x102a694
 10018c3:	68 00 20 00 00       	push   0x2000
 10018c8:	e8 3a 84 00 00       	call   1009d07 <printd>
 10018cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:290
            //			{
            //				printk("No drive found at port %d\n", i);
            //			}
        }

        pi >>= 1;
 10018d0:	d1 ed                	shr    ebp,1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:291
        i++;
 10018d2:	83 c3 01             	add    ebx,0x1
 10018d5:	83 ee 80             	sub    esi,0xffffff80
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:246
    uint32_t pi = abar->pi;
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
    if (pi > 0)
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
    while (i < 32) {
 10018d8:	83 fb 20             	cmp    ebx,0x20
 10018db:	0f 85 aa fe ff ff    	jne    100178b <ahciProbePorts+0x50>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:293
        }

        pi >>= 1;
        i++;
    }
}
 10018e1:	83 c4 2c             	add    esp,0x2c
 10018e4:	5b                   	pop    ebx
 10018e5:	5e                   	pop    esi
 10018e6:	5f                   	pop    edi
 10018e7:	5d                   	pop    ebp
 10018e8:	c3                   	ret    

010018e9 <ahciInit>:
ahciInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:603

int ahciBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
    return 0;
}

bool ahciInit() {
 10018e9:	56                   	push   esi
 10018ea:	53                   	push   ebx
 10018eb:	81 ec a8 00 00 00    	sub    esp,0xa8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:604
    kATADeviceInfoCount = 4;
 10018f1:	c7 05 04 98 12 00 04 	mov    DWORD PTR ds:0x129804,0x4
 10018f8:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:608
    bool ahciDeviceFound = false;
    char buffer[150];

    memset(buffer, 0, 150);
 10018fb:	68 96 00 00 00       	push   0x96
 1001900:	6a 00                	push   0x0
 1001902:	8d 44 24 16          	lea    eax,[esp+0x16]
 1001906:	50                   	push   eax
 1001907:	e8 27 76 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:610

    if (!kPCIDeviceCount) {
 100190c:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1001913:	83 c4 10             	add    esp,0x10
 1001916:	84 c0                	test   al,al
 1001918:	74 16                	je     1001930 <ahciInit+0x47>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:615 (discriminator 1)
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
        return false;
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
 100191a:	be 00 00 00 00       	mov    esi,0x0
 100191f:	bb 00 00 00 00       	mov    ebx,0x0
 1001924:	ba 00 00 00 00       	mov    edx,0x0
 1001929:	75 24                	jne    100194f <ahciInit+0x66>
 100192b:	e9 72 03 00 00       	jmp    1001ca2 <ahciInit+0x3b9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:611
    char buffer[150];

    memset(buffer, 0, 150);

    if (!kPCIDeviceCount) {
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
 1001930:	83 ec 08             	sub    esp,0x8
 1001933:	68 c0 a6 02 01       	push   0x102a6c0
 1001938:	68 00 20 00 00       	push   0x2000
 100193d:	e8 c5 83 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:612
        return false;
 1001942:	83 c4 10             	add    esp,0x10
 1001945:	b8 00 00 00 00       	mov    eax,0x0
 100194a:	e9 6d 03 00 00       	jmp    1001cbc <ahciInit+0x3d3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:616
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
        if (kPCIDeviceHeaders[cnt].class == 1 && kPCIDeviceHeaders[cnt].subClass == 6) 
 100194f:	89 f0                	mov    eax,esi
 1001951:	03 05 f4 97 12 00    	add    eax,DWORD PTR ds:0x1297f4
 1001957:	83 78 10 01          	cmp    DWORD PTR [eax+0x10],0x1
 100195b:	0f 85 82 01 00 00    	jne    1001ae3 <ahciInit+0x1fa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:616 (discriminator 1)
 1001961:	83 78 14 06          	cmp    DWORD PTR [eax+0x14],0x6
 1001965:	0f 85 78 01 00 00    	jne    1001ae3 <ahciInit+0x1fa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:618
        {
            memcpy(&kPCISATADevice, &kPCIDeviceHeaders[cnt], sizeof (struct pci_device_t));
 100196b:	83 ec 04             	sub    esp,0x4
 100196e:	6a 50                	push   0x50
 1001970:	50                   	push   eax
 1001971:	68 20 98 12 00       	push   0x129820
 1001976:	e8 05 7e 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:620
            ahciDeviceFound = true;
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (D) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceHeaders[cnt].class, kPCIDeviceHeaders[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
 100197b:	83 c4 08             	add    esp,0x8
 100197e:	8d 44 24 12          	lea    eax,[esp+0x12]
 1001982:	50                   	push   eax
 1001983:	68 20 98 12 00       	push   0x129820
 1001988:	e8 67 07 00 00       	call   10020f4 <getDeviceNameP>
 100198d:	89 f2                	mov    edx,esi
 100198f:	03 15 f4 97 12 00    	add    edx,DWORD PTR ds:0x1297f4
 1001995:	83 c4 08             	add    esp,0x8
 1001998:	50                   	push   eax
 1001999:	ff 72 14             	push   DWORD PTR [edx+0x14]
 100199c:	ff 72 10             	push   DWORD PTR [edx+0x10]
 100199f:	53                   	push   ebx
 10019a0:	68 f4 a6 02 01       	push   0x102a6f4
 10019a5:	68 00 20 00 00       	push   0x2000
 10019aa:	e8 58 83 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:621
            printd(DEBUG_AHCI, "ABAR is at: before/remapped - 0x%08X/", kPCISATADevice.baseAdd[5]);
 10019af:	83 c4 1c             	add    esp,0x1c
 10019b2:	ff 35 54 98 12 00    	push   DWORD PTR ds:0x129854
 10019b8:	68 2c a7 02 01       	push   0x102a72c
 10019bd:	68 00 20 00 00       	push   0x2000
 10019c2:	e8 40 83 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:622
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
 10019c7:	69 05 00 d4 00 01 00 	imul   eax,DWORD PTR ds:0x100d400,0x11000
 10019ce:	10 01 00 
 10019d1:	05 00 30 ad 00       	add    eax,0xad3000
 10019d6:	a3 94 99 12 00       	mov    ds:0x129994,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:623
                kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5] , 0x73); //0x63 + cache disabled
 10019db:	83 c4 0c             	add    esp,0xc
 10019de:	6a 73                	push   0x73
 10019e0:	ff 35 54 98 12 00    	push   DWORD PTR ds:0x129854
 10019e6:	50                   	push   eax
 10019e7:	e8 03 71 00 00       	call   1008aef <kMapPage>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:624
                kMapPage(kPCISATADevice.baseAdd[5],kPCISATADevice.baseAdd[5],0x73);
 10019ec:	a1 54 98 12 00       	mov    eax,ds:0x129854
 10019f1:	83 c4 0c             	add    esp,0xc
 10019f4:	6a 73                	push   0x73
 10019f6:	50                   	push   eax
 10019f7:	50                   	push   eax
 10019f8:	e8 f2 70 00 00       	call   1008aef <kMapPage>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:625
            RELOAD_CR3
 10019fd:	0f 20 d8             	mov    eax,cr3
 1001a00:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:626
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
 1001a03:	a1 00 d4 00 01       	mov    eax,ds:0x100d400
 1001a08:	8d 50 01             	lea    edx,[eax+0x1]
 1001a0b:	89 15 00 d4 00 01    	mov    DWORD PTR ds:0x100d400,edx
 1001a11:	83 c4 0c             	add    esp,0xc
 1001a14:	68 00 11 00 00       	push   0x1100
 1001a19:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001a1f:	69 c0 00 11 00 00    	imul   eax,eax,0x1100
 1001a25:	05 20 f2 06 01       	add    eax,0x106f220
 1001a2a:	50                   	push   eax
 1001a2b:	e8 50 7d 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:627
            printd(DEBUG_AHCI, "0x%08X\n", ahciABAR);
 1001a30:	83 c4 0c             	add    esp,0xc
 1001a33:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001a39:	68 a2 78 06 01       	push   0x10678a2
 1001a3e:	68 00 20 00 00       	push   0x2000
 1001a43:	e8 bf 82 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:628
            memcpy(&ahciCaps[ahciCapsCount++], (void*) ahciABAR, sizeof (ahcicaps_t));
 1001a48:	a1 28 99 12 00       	mov    eax,ds:0x129928
 1001a4d:	8d 50 01             	lea    edx,[eax+0x1]
 1001a50:	89 15 28 99 12 00    	mov    DWORD PTR ds:0x129928,edx
 1001a56:	83 c4 0c             	add    esp,0xc
 1001a59:	6a 04                	push   0x4
 1001a5b:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001a61:	8b 15 24 99 12 00    	mov    edx,DWORD PTR ds:0x129924
 1001a67:	8d 04 82             	lea    eax,[edx+eax*4]
 1001a6a:	50                   	push   eax
 1001a6b:	e8 10 7d 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:629
            if (!(ahciABAR->ghc.AE)) {
 1001a70:	a1 94 99 12 00       	mov    eax,ds:0x129994
 1001a75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
 1001a78:	c1 e8 1f             	shr    eax,0x1f
 1001a7b:	83 c4 10             	add    esp,0x10
 1001a7e:	84 c0                	test   al,al
 1001a80:	75 26                	jne    1001aa8 <ahciInit+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:630
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
 1001a82:	83 ec 08             	sub    esp,0x8
 1001a85:	68 e0 41 04 01       	push   0x10441e0
 1001a8a:	68 00 20 00 00       	push   0x2000
 1001a8f:	e8 73 82 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:631
                ahciABAR->ghc.AE=1;
 1001a94:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
 1001a9a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
 1001a9d:	0d 00 00 00 80       	or     eax,0x80000000
 1001aa2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
 1001aa5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:633
            }
            ahciABAR->ghc.IE=1;
 1001aa8:	a1 94 99 12 00       	mov    eax,ds:0x129994
 1001aad:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
 1001ab0:	83 ca 02             	or     edx,0x2
 1001ab3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:634
            if (ahciABAR->cap2 & 1) {
 1001ab6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
 1001ab9:	a8 01                	test   al,0x1
 1001abb:	74 10                	je     1001acd <ahciInit+0x1e4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:635
                panic("Write support for BIOS handoff!!!");
 1001abd:	83 ec 0c             	sub    esp,0xc
 1001ac0:	68 54 a7 02 01       	push   0x102a754
 1001ac5:	e8 9e 7d 00 00       	call   1009868 <panic>
 1001aca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:637
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
 1001acd:	83 ec 0c             	sub    esp,0xc
 1001ad0:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001ad6:	e8 60 fc ff ff       	call   100173b <ahciProbePorts>
 1001adb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:619

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
        if (kPCIDeviceHeaders[cnt].class == 1 && kPCIDeviceHeaders[cnt].subClass == 6) 
        {
            memcpy(&kPCISATADevice, &kPCIDeviceHeaders[cnt], sizeof (struct pci_device_t));
            ahciDeviceFound = true;
 1001ade:	ba 01 00 00 00       	mov    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:615 (discriminator 2)
    if (!kPCIDeviceCount) {
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
        return false;
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
 1001ae3:	83 c3 01             	add    ebx,0x1
 1001ae6:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1001aed:	83 c6 50             	add    esi,0x50
 1001af0:	39 d8                	cmp    eax,ebx
 1001af2:	0f 8f 57 fe ff ff    	jg     100194f <ahciInit+0x66>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:639 (discriminator 1)
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
 1001af8:	85 c0                	test   eax,eax
 1001afa:	0f 8e 99 01 00 00    	jle    1001c99 <ahciInit+0x3b0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:639
 1001b00:	be 00 00 00 00       	mov    esi,0x0
 1001b05:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:640
        if (kPCIDeviceFunctions[cnt].class == 1 && kPCIDeviceFunctions[cnt].subClass == 6) 
 1001b0a:	89 f0                	mov    eax,esi
 1001b0c:	03 05 fc 97 12 00    	add    eax,DWORD PTR ds:0x1297fc
 1001b12:	83 78 10 01          	cmp    DWORD PTR [eax+0x10],0x1
 1001b16:	0f 85 68 01 00 00    	jne    1001c84 <ahciInit+0x39b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:640 (discriminator 1)
 1001b1c:	83 78 14 06          	cmp    DWORD PTR [eax+0x14],0x6
 1001b20:	0f 85 5e 01 00 00    	jne    1001c84 <ahciInit+0x39b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:642
        {
            memcpy(&kPCISATADevice, &kPCIDeviceFunctions[cnt], sizeof (struct pci_device_t));
 1001b26:	83 ec 04             	sub    esp,0x4
 1001b29:	6a 50                	push   0x50
 1001b2b:	50                   	push   eax
 1001b2c:	68 20 98 12 00       	push   0x129820
 1001b31:	e8 4a 7c 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:644
            ahciDeviceFound = true;
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (F) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceFunctions[cnt].class, kPCIDeviceFunctions[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
 1001b36:	83 c4 08             	add    esp,0x8
 1001b39:	8d 44 24 12          	lea    eax,[esp+0x12]
 1001b3d:	50                   	push   eax
 1001b3e:	68 20 98 12 00       	push   0x129820
 1001b43:	e8 ac 05 00 00       	call   10020f4 <getDeviceNameP>
 1001b48:	89 f2                	mov    edx,esi
 1001b4a:	03 15 fc 97 12 00    	add    edx,DWORD PTR ds:0x1297fc
 1001b50:	83 c4 08             	add    esp,0x8
 1001b53:	50                   	push   eax
 1001b54:	ff 72 14             	push   DWORD PTR [edx+0x14]
 1001b57:	ff 72 10             	push   DWORD PTR [edx+0x10]
 1001b5a:	53                   	push   ebx
 1001b5b:	68 78 a7 02 01       	push   0x102a778
 1001b60:	68 00 20 00 00       	push   0x2000
 1001b65:	e8 9d 81 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:645
            printd(DEBUG_AHCI, "ABAR is at: 0x%08X\n", kPCISATADevice.baseAdd[5]);
 1001b6a:	83 c4 1c             	add    esp,0x1c
 1001b6d:	ff 35 54 98 12 00    	push   DWORD PTR ds:0x129854
 1001b73:	68 f8 41 04 01       	push   0x10441f8
 1001b78:	68 00 20 00 00       	push   0x2000
 1001b7d:	e8 85 81 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:646
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
 1001b82:	69 05 00 d4 00 01 00 	imul   eax,DWORD PTR ds:0x100d400,0x11000
 1001b89:	10 01 00 
 1001b8c:	05 00 30 ad 00       	add    eax,0xad3000
 1001b91:	a3 94 99 12 00       	mov    ds:0x129994,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:647
            kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
 1001b96:	83 c4 0c             	add    esp,0xc
 1001b99:	6a 73                	push   0x73
 1001b9b:	ff 35 54 98 12 00    	push   DWORD PTR ds:0x129854
 1001ba1:	50                   	push   eax
 1001ba2:	e8 48 6f 00 00       	call   1008aef <kMapPage>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:648
            RELOAD_CR3
 1001ba7:	0f 20 d8             	mov    eax,cr3
 1001baa:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:649
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
 1001bad:	a1 00 d4 00 01       	mov    eax,ds:0x100d400
 1001bb2:	8d 50 01             	lea    edx,[eax+0x1]
 1001bb5:	89 15 00 d4 00 01    	mov    DWORD PTR ds:0x100d400,edx
 1001bbb:	83 c4 0c             	add    esp,0xc
 1001bbe:	68 00 11 00 00       	push   0x1100
 1001bc3:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001bc9:	69 c0 00 11 00 00    	imul   eax,eax,0x1100
 1001bcf:	05 20 f2 06 01       	add    eax,0x106f220
 1001bd4:	50                   	push   eax
 1001bd5:	e8 a6 7b 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:650
            printd(DEBUG_AHCI, "Remapped ABAR is now at: 0x%08X\n", ahciABAR);
 1001bda:	83 c4 0c             	add    esp,0xc
 1001bdd:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001be3:	68 b0 a7 02 01       	push   0x102a7b0
 1001be8:	68 00 20 00 00       	push   0x2000
 1001bed:	e8 15 81 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:651
            memcpy(&ahciCaps[ahciCapsCount], (void*) ahciABAR, sizeof (ahcicaps_t));
 1001bf2:	83 c4 0c             	add    esp,0xc
 1001bf5:	6a 04                	push   0x4
 1001bf7:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001bfd:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1001c02:	8b 15 28 99 12 00    	mov    edx,DWORD PTR ds:0x129928
 1001c08:	8d 04 90             	lea    eax,[eax+edx*4]
 1001c0b:	50                   	push   eax
 1001c0c:	e8 6f 7b 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:652
            if (!(ahciABAR->ghc.AE)) {
 1001c11:	a1 94 99 12 00       	mov    eax,ds:0x129994
 1001c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
 1001c19:	c1 e8 1f             	shr    eax,0x1f
 1001c1c:	83 c4 10             	add    esp,0x10
 1001c1f:	84 c0                	test   al,al
 1001c21:	75 26                	jne    1001c49 <ahciInit+0x360>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:653
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
 1001c23:	83 ec 08             	sub    esp,0x8
 1001c26:	68 e0 41 04 01       	push   0x10441e0
 1001c2b:	68 00 20 00 00       	push   0x2000
 1001c30:	e8 d2 80 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:654
                ahciABAR->ghc.AE=1;
 1001c35:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
 1001c3b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
 1001c3e:	0d 00 00 00 80       	or     eax,0x80000000
 1001c43:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
 1001c46:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:656
            }
            ahciABAR->ghc.IE=1;
 1001c49:	a1 94 99 12 00       	mov    eax,ds:0x129994
 1001c4e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
 1001c51:	83 ca 02             	or     edx,0x2
 1001c54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:657
            if (ahciABAR->cap2 & 1) {
 1001c57:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
 1001c5a:	a8 01                	test   al,0x1
 1001c5c:	74 10                	je     1001c6e <ahciInit+0x385>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:658
                panic("Write support for BIOS handoff!!!");
 1001c5e:	83 ec 0c             	sub    esp,0xc
 1001c61:	68 54 a7 02 01       	push   0x102a754
 1001c66:	e8 fd 7b 00 00       	call   1009868 <panic>
 1001c6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:660
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
 1001c6e:	83 ec 0c             	sub    esp,0xc
 1001c71:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001c77:	e8 bf fa ff ff       	call   100173b <ahciProbePorts>
 1001c7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:643
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
        if (kPCIDeviceFunctions[cnt].class == 1 && kPCIDeviceFunctions[cnt].subClass == 6) 
        {
            memcpy(&kPCISATADevice, &kPCIDeviceFunctions[cnt], sizeof (struct pci_device_t));
            ahciDeviceFound = true;
 1001c7f:	ba 01 00 00 00       	mov    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:639 (discriminator 2)
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
 1001c84:	83 c3 01             	add    ebx,0x1
 1001c87:	83 c6 50             	add    esi,0x50
 1001c8a:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1001c91:	39 d8                	cmp    eax,ebx
 1001c93:	0f 8f 71 fe ff ff    	jg     1001b0a <ahciInit+0x221>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:668
        printd(DEBUG_AHCI, "AHCI: No AHCI devices found.");
        return false;
    }


    return true;
 1001c99:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:662
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    if (!ahciDeviceFound) {
 1001c9e:	84 d2                	test   dl,dl
 1001ca0:	75 1a                	jne    1001cbc <ahciInit+0x3d3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:663
        printd(DEBUG_AHCI, "AHCI: No AHCI devices found.");
 1001ca2:	83 ec 08             	sub    esp,0x8
 1001ca5:	68 0c 42 04 01       	push   0x104420c
 1001caa:	68 00 20 00 00       	push   0x2000
 1001caf:	e8 53 80 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:664
        return false;
 1001cb4:	83 c4 10             	add    esp,0x10
 1001cb7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:669
    }


    return true;
}
 1001cbc:	81 c4 a4 00 00 00    	add    esp,0xa4
 1001cc2:	5b                   	pop    ebx
 1001cc3:	5e                   	pop    esi
 1001cc4:	c3                   	ret    
 1001cc5:	66 90                	xchg   ax,ax
 1001cc7:	90                   	nop

01001cc8 <pciConfigReadWord>:
pciConfigReadWord():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:90
}

//struct pci_device_id* pci_deviceList = (struct pci_device_id*)PCI_DEVICE_LIST_ADDRESS;
  uint16_t pciConfigReadWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
 1001cc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
outl():
/home/yogi/src/os/chrisOSKernel/include/io.h:33
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline void outl(unsigned short __port, unsigned int __val)
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
 1001ccc:	89 c8                	mov    eax,ecx
 1001cce:	25 fc 00 00 00       	and    eax,0xfc
 1001cd3:	0d 00 00 00 80       	or     eax,0x80000000
 1001cd8:	89 c2                	mov    edx,eax
 1001cda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
 1001cdf:	c1 e0 08             	shl    eax,0x8
 1001ce2:	09 d0                	or     eax,edx
 1001ce4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
 1001ce9:	c1 e2 0b             	shl    edx,0xb
 1001cec:	09 d0                	or     eax,edx
 1001cee:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
 1001cf3:	c1 e2 10             	shl    edx,0x10
 1001cf6:	09 d0                	or     eax,edx
 1001cf8:	ba f8 0c 00 00       	mov    edx,0xcf8
 1001cfd:	ef                   	out    dx,eax
inl():
/home/yogi/src/os/chrisOSKernel/include/io.h:53
}

static __inline unsigned int inl(unsigned short __port)
{
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
 1001cfe:	ba fc 0c 00 00       	mov    edx,0xcfc
 1001d03:	ed                   	in     eax,dx
pciConfigReadWord():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:105
    /* write out the address */
    outl (0xCF8, address);
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    tmp = (uint16_t)((inl (0xCFC) >> ((offset & 2) * 8)) & 0xffff);
    return (tmp);
 1001d04:	83 e1 02             	and    ecx,0x2
 1001d07:	0f b6 c9             	movzx  ecx,cl
 1001d0a:	c1 e1 03             	shl    ecx,0x3
 1001d0d:	d3 e8                	shr    eax,cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:106
 }
 1001d0f:	c3                   	ret    

01001d10 <pciConfigReadDWord>:
outl():
/home/yogi/src/os/chrisOSKernel/include/io.h:33
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline void outl(unsigned short __port, unsigned int __val)
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
 1001d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1001d14:	25 fc 00 00 00       	and    eax,0xfc
 1001d19:	0d 00 00 00 80       	or     eax,0x80000000
 1001d1e:	89 c2                	mov    edx,eax
 1001d20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
 1001d25:	c1 e0 08             	shl    eax,0x8
 1001d28:	09 d0                	or     eax,edx
 1001d2a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
 1001d2f:	c1 e2 0b             	shl    edx,0xb
 1001d32:	09 d0                	or     eax,edx
 1001d34:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
 1001d39:	c1 e2 10             	shl    edx,0x10
 1001d3c:	09 d0                	or     eax,edx
 1001d3e:	ba f8 0c 00 00       	mov    edx,0xcf8
 1001d43:	ef                   	out    dx,eax
inl():
/home/yogi/src/os/chrisOSKernel/include/io.h:53
}

static __inline unsigned int inl(unsigned short __port)
{
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
 1001d44:	ba fc 0c 00 00       	mov    edx,0xcfc
 1001d49:	ed                   	in     eax,dx
pciConfigReadDWord():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:128
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    num = inl (0xCFC);
    //return ((num >> 24)) | ((num & 0x0000FF000) << 8) | ((num & 0x00FF0000)>>8) | ((num << 24));
    return num;
 }
 1001d4a:	c3                   	ret    

01001d4b <getVendorLongName>:
getVendorLongName():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:162
    uint32_t subvendor, subdevice;  // Subsystem ID's or PCI_ANY_ID 
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
 1001d4b:	53                   	push   ebx
 1001d4c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:164
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
 1001d4f:	0f b7 5c 24 10       	movzx  ebx,WORD PTR [esp+0x10]
 1001d54:	81 fb 36 1b 00 00    	cmp    ebx,0x1b36
 1001d5a:	74 13                	je     1001d6f <getVendorLongName+0x24>
 1001d5c:	ba 8c 50 02 01       	mov    edx,0x102508c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:163
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
 1001d61:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:164
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
 1001d66:	0f b7 0a             	movzx  ecx,WORD PTR [edx]
 1001d69:	39 d9                	cmp    ecx,ebx
 1001d6b:	75 22                	jne    1001d8f <getVendorLongName+0x44>
 1001d6d:	eb 05                	jmp    1001d74 <getVendorLongName+0x29>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:163
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
 1001d6f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:166
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
 1001d74:	83 ec 08             	sub    esp,0x8
 1001d77:	8d 04 40             	lea    eax,[eax+eax*2]
 1001d7a:	ff 34 85 88 50 02 01 	push   DWORD PTR [eax*4+0x1025088]
 1001d81:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1001d85:	e8 36 80 00 00       	call   1009dc0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:167
            return;
 1001d8a:	83 c4 10             	add    esp,0x10
 1001d8d:	eb 21                	jmp    1001db0 <getVendorLongName+0x65>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:163 (discriminator 2)
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
 1001d8f:	83 c0 01             	add    eax,0x1
 1001d92:	83 c2 0c             	add    edx,0xc
 1001d95:	3d 21 06 00 00       	cmp    eax,0x621
 1001d9a:	75 ca                	jne    1001d66 <getVendorLongName+0x1b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:169
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
            return;
        }
    strcpy(vendorLongName,"Not Found");
 1001d9c:	83 ec 08             	sub    esp,0x8
 1001d9f:	68 29 42 04 01       	push   0x1044229
 1001da4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1001da8:	e8 13 80 00 00       	call   1009dc0 <strcpy>
 1001dad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:170
}
 1001db0:	83 c4 08             	add    esp,0x8
 1001db3:	5b                   	pop    ebx
 1001db4:	c3                   	ret    

01001db5 <getDeviceName>:
getDeviceName():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:173

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
 1001db5:	56                   	push   esi
 1001db6:	53                   	push   ebx
 1001db7:	83 ec 04             	sub    esp,0x4
 1001dba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1001dbe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
 1001dc2:	b8 00 da 00 01       	mov    eax,0x100da00
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:174
    for (int cnt=0; cnt<7000;cnt++)
 1001dc7:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:175
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
 1001dcc:	0f b7 08             	movzx  ecx,WORD PTR [eax]
 1001dcf:	39 d9                	cmp    ecx,ebx
 1001dd1:	75 23                	jne    1001df6 <getDeviceName+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:175 (discriminator 1)
 1001dd3:	0f b7 48 02          	movzx  ecx,WORD PTR [eax+0x2]
 1001dd7:	39 f1                	cmp    ecx,esi
 1001dd9:	75 1b                	jne    1001df6 <getDeviceName+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:177
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
 1001ddb:	83 ec 08             	sub    esp,0x8
 1001dde:	8d 04 52             	lea    eax,[edx+edx*2]
 1001de1:	ff 34 85 08 da 00 01 	push   DWORD PTR [eax*4+0x100da08]
 1001de8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 1001dec:	e8 cf 7f 00 00       	call   1009dc0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:178
            return;
 1001df1:	83 c4 10             	add    esp,0x10
 1001df4:	eb 22                	jmp    1001e18 <getDeviceName+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:174 (discriminator 2)
    strcpy(vendorLongName,"Not Found");
}

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
    for (int cnt=0; cnt<7000;cnt++)
 1001df6:	83 c2 01             	add    edx,0x1
 1001df9:	83 c0 0c             	add    eax,0xc
 1001dfc:	81 fa 58 1b 00 00    	cmp    edx,0x1b58
 1001e02:	75 c8                	jne    1001dcc <getDeviceName+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:180
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
            return;
        }
    strcpy(deviceName,"Not Found");
 1001e04:	83 ec 08             	sub    esp,0x8
 1001e07:	68 29 42 04 01       	push   0x1044229
 1001e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 1001e10:	e8 ab 7f 00 00       	call   1009dc0 <strcpy>
 1001e15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:181
}
 1001e18:	83 c4 04             	add    esp,0x4
 1001e1b:	5b                   	pop    ebx
 1001e1c:	5e                   	pop    esi
 1001e1d:	c3                   	ret    

01001e1e <printPCIConfig>:
printPCIConfig():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:26
extern struct pci_bridge_t* kPCIBridgeHeaders;
extern struct pci_device_t* kPCIDeviceFunctions;
extern uint32_t kDebugLevel;

void printPCIConfig()
{
 1001e1e:	55                   	push   ebp
 1001e1f:	57                   	push   edi
 1001e20:	56                   	push   esi
 1001e21:	53                   	push   ebx
 1001e22:	81 ec b4 00 00 00    	sub    esp,0xb4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:30
    char buffer[150];
    int totalCnt=0;
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
 1001e28:	0f b6 15 ec 97 12 00 	movzx  edx,BYTE PTR ds:0x1297ec
 1001e2f:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
 1001e36:	01 d0                	add    eax,edx
 1001e38:	50                   	push   eax
 1001e39:	68 d4 a7 02 01       	push   0x102a7d4
 1001e3e:	e8 ac 7e 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:31
    puts("Devices:\n");
 1001e43:	c7 04 24 33 42 04 01 	mov    DWORD PTR [esp],0x1044233
 1001e4a:	e8 be 12 00 00       	call   100310d <puts>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:32
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
 1001e4f:	c7 04 24 fc a7 02 01 	mov    DWORD PTR [esp],0x102a7fc
 1001e56:	e8 94 7e 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:33
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
 1001e5b:	83 c4 10             	add    esp,0x10
 1001e5e:	80 3d ec 97 12 00 00 	cmp    BYTE PTR ds:0x1297ec,0x0
 1001e65:	0f 84 b7 00 00 00    	je     1001f22 <printPCIConfig+0x104>
 1001e6b:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:40
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //printk("%s",buffer);
        getDeviceName(kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, buffer);
 1001e70:	8d 7c 24 0a          	lea    edi,[esp+0xa]
 1001e74:	8d 34 9b             	lea    esi,[ebx+ebx*4]
 1001e77:	c1 e6 04             	shl    esi,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:37
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
 1001e7a:	89 f0                	mov    eax,esi
 1001e7c:	03 05 f4 97 12 00    	add    eax,DWORD PTR ds:0x1297f4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
 1001e82:	83 ec 08             	sub    esp,0x8
 1001e85:	ff 70 14             	push   DWORD PTR [eax+0x14]
 1001e88:	ff 70 10             	push   DWORD PTR [eax+0x10]
 1001e8b:	0f b7 50 08          	movzx  edx,WORD PTR [eax+0x8]
 1001e8f:	52                   	push   edx
 1001e90:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
 1001e94:	52                   	push   edx
 1001e95:	0f b6 50 3e          	movzx  edx,BYTE PTR [eax+0x3e]
 1001e99:	52                   	push   edx
 1001e9a:	0f b6 50 3d          	movzx  edx,BYTE PTR [eax+0x3d]
 1001e9e:	52                   	push   edx
 1001e9f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
 1001ea3:	52                   	push   edx
 1001ea4:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
 1001ea8:	52                   	push   edx
 1001ea9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 1001eac:	50                   	push   eax
 1001ead:	68 38 a8 02 01       	push   0x102a838
 1001eb2:	e8 38 7e 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:40
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //printk("%s",buffer);
        getDeviceName(kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, buffer);
 1001eb7:	03 35 f4 97 12 00    	add    esi,DWORD PTR ds:0x1297f4
 1001ebd:	83 c4 2c             	add    esp,0x2c
 1001ec0:	57                   	push   edi
 1001ec1:	0f b7 46 08          	movzx  eax,WORD PTR [esi+0x8]
 1001ec5:	50                   	push   eax
 1001ec6:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
 1001eca:	50                   	push   eax
 1001ecb:	e8 e5 fe ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:41
        strleft(buffer,28);
 1001ed0:	83 c4 08             	add    esp,0x8
 1001ed3:	6a 1c                	push   0x1c
 1001ed5:	57                   	push   edi
 1001ed6:	e8 09 80 00 00       	call   1009ee4 <strleft>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:42
        printk("%s\n",buffer);
 1001edb:	83 c4 08             	add    esp,0x8
 1001ede:	57                   	push   edi
 1001edf:	68 70 42 04 01       	push   0x1044270
 1001ee4:	e8 06 7e 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:43
        totalCnt++;
 1001ee9:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:44
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
 1001eec:	83 c4 10             	add    esp,0x10
 1001eef:	85 db                	test   ebx,ebx
 1001ef1:	7e 1e                	jle    1001f11 <printPCIConfig+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:44 (discriminator 1)
 1001ef3:	e8 8a 11 00 00       	call   1003082 <cursorGetMaxY>
 1001ef8:	89 c1                	mov    ecx,eax
 1001efa:	8d 43 04             	lea    eax,[ebx+0x4]
 1001efd:	99                   	cdq    
 1001efe:	f7 f9                	idiv   ecx
 1001f00:	85 d2                	test   edx,edx
 1001f02:	75 0d                	jne    1001f11 <printPCIConfig+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:45
            pauseDisplay(false);
 1001f04:	83 ec 0c             	sub    esp,0xc
 1001f07:	6a 00                	push   0x0
 1001f09:	e8 ae 76 00 00       	call   10095bc <pauseDisplay>
 1001f0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:33 (discriminator 2)
    int totalCnt=0;
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
 1001f11:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1001f18:	39 d8                	cmp    eax,ebx
 1001f1a:	0f 8f 54 ff ff ff    	jg     1001e74 <printPCIConfig+0x56>
 1001f20:	eb 05                	jmp    1001f27 <printPCIConfig+0x109>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:28
extern uint32_t kDebugLevel;

void printPCIConfig()
{
    char buffer[150];
    int totalCnt=0;
 1001f22:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:47
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
 1001f27:	83 ec 0c             	sub    esp,0xc
 1001f2a:	68 3d 42 04 01       	push   0x104423d
 1001f2f:	e8 d9 11 00 00       	call   100310d <puts>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:48
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
 1001f34:	83 c4 10             	add    esp,0x10
 1001f37:	80 3d ed 97 12 00 00 	cmp    BYTE PTR ds:0x1297ed,0x0
 1001f3e:	0f 84 cc 00 00 00    	je     1002010 <printPCIConfig+0x1f2>
 1001f44:	89 de                	mov    esi,ebx
 1001f46:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:60
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //strleft(buffer,10);
        //printk("%s",buffer);
//        strleft(buffer,20);
        getDeviceName(kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, buffer);
 1001f4b:	8d 6c 24 0a          	lea    ebp,[esp+0xa]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:55
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
 1001f4f:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
 1001f55:	8d 04 3a             	lea    eax,[edx+edi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
 1001f58:	83 ec 0c             	sub    esp,0xc
 1001f5b:	0f b6 52 26          	movzx  edx,BYTE PTR [edx+0x26]
 1001f5f:	52                   	push   edx
 1001f60:	0f b6 50 27          	movzx  edx,BYTE PTR [eax+0x27]
 1001f64:	52                   	push   edx
 1001f65:	0f b6 50 28          	movzx  edx,BYTE PTR [eax+0x28]
 1001f69:	52                   	push   edx
 1001f6a:	ff 70 0d             	push   DWORD PTR [eax+0xd]
 1001f6d:	ff 70 09             	push   DWORD PTR [eax+0x9]
 1001f70:	0f b7 50 07          	movzx  edx,WORD PTR [eax+0x7]
 1001f74:	52                   	push   edx
 1001f75:	0f b7 50 05          	movzx  edx,WORD PTR [eax+0x5]
 1001f79:	52                   	push   edx
 1001f7a:	0f b6 50 2b          	movzx  edx,BYTE PTR [eax+0x2b]
 1001f7e:	52                   	push   edx
 1001f7f:	0f b6 50 2a          	movzx  edx,BYTE PTR [eax+0x2a]
 1001f83:	52                   	push   edx
 1001f84:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
 1001f88:	52                   	push   edx
 1001f89:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
 1001f8d:	52                   	push   edx
 1001f8e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 1001f91:	50                   	push   eax
 1001f92:	68 6c a8 02 01       	push   0x102a86c
 1001f97:	e8 53 7d 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:60
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //strleft(buffer,10);
        //printk("%s",buffer);
//        strleft(buffer,20);
        getDeviceName(kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, buffer);
 1001f9c:	89 f8                	mov    eax,edi
 1001f9e:	03 05 f8 97 12 00    	add    eax,DWORD PTR ds:0x1297f8
 1001fa4:	83 c4 3c             	add    esp,0x3c
 1001fa7:	55                   	push   ebp
 1001fa8:	0f b7 50 07          	movzx  edx,WORD PTR [eax+0x7]
 1001fac:	52                   	push   edx
 1001fad:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
 1001fb1:	50                   	push   eax
 1001fb2:	e8 fe fd ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:61
        strleft(buffer,28);
 1001fb7:	83 c4 08             	add    esp,0x8
 1001fba:	6a 1c                	push   0x1c
 1001fbc:	55                   	push   ebp
 1001fbd:	e8 22 7f 00 00       	call   1009ee4 <strleft>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:62
        printk("%s\n",buffer);
 1001fc2:	83 c4 08             	add    esp,0x8
 1001fc5:	55                   	push   ebp
 1001fc6:	68 70 42 04 01       	push   0x1044270
 1001fcb:	e8 1f 7d 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:63
        totalCnt++;
 1001fd0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:64
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
 1001fd3:	83 c4 10             	add    esp,0x10
 1001fd6:	85 f6                	test   esi,esi
 1001fd8:	7e 1e                	jle    1001ff8 <printPCIConfig+0x1da>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:64 (discriminator 1)
 1001fda:	e8 a3 10 00 00       	call   1003082 <cursorGetMaxY>
 1001fdf:	89 c1                	mov    ecx,eax
 1001fe1:	8d 46 04             	lea    eax,[esi+0x4]
 1001fe4:	99                   	cdq    
 1001fe5:	f7 f9                	idiv   ecx
 1001fe7:	85 d2                	test   edx,edx
 1001fe9:	75 0d                	jne    1001ff8 <printPCIConfig+0x1da>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:65
            pauseDisplay(false);
 1001feb:	83 ec 0c             	sub    esp,0xc
 1001fee:	6a 00                	push   0x0
 1001ff0:	e8 c7 75 00 00       	call   10095bc <pauseDisplay>
 1001ff5:	83 c4 10             	add    esp,0x10
 1001ff8:	83 c7 4e             	add    edi,0x4e
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:48 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
 1001ffb:	89 f2                	mov    edx,esi
 1001ffd:	29 da                	sub    edx,ebx
 1001fff:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
 1002006:	39 c2                	cmp    edx,eax
 1002008:	0f 8c 41 ff ff ff    	jl     1001f4f <printPCIConfig+0x131>
 100200e:	eb 02                	jmp    1002012 <printPCIConfig+0x1f4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:48
 1002010:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:67
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
 1002012:	83 ec 0c             	sub    esp,0xc
 1002015:	68 47 42 04 01       	push   0x1044247
 100201a:	e8 ee 10 00 00       	call   100310d <puts>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:68
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
 100201f:	83 c4 10             	add    esp,0x10
 1002022:	80 3d ee 97 12 00 00 	cmp    BYTE PTR ds:0x1297ee,0x0
 1002029:	0f 84 ba 00 00 00    	je     10020e9 <printPCIConfig+0x2cb>
 100202f:	89 f3                	mov    ebx,esi
 1002031:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:77
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
            //getVendorLongName(kPCIDeviceFunctions[cnt].vendor, buffer);
            //printk("%s",buffer);
            getDeviceName(kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, buffer);
 1002036:	8d 6c 24 0a          	lea    ebp,[esp+0xa]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:74
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
 100203a:	89 f8                	mov    eax,edi
 100203c:	03 05 fc 97 12 00    	add    eax,DWORD PTR ds:0x1297fc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
 1002042:	83 ec 08             	sub    esp,0x8
 1002045:	ff 70 14             	push   DWORD PTR [eax+0x14]
 1002048:	ff 70 10             	push   DWORD PTR [eax+0x10]
 100204b:	0f b7 50 08          	movzx  edx,WORD PTR [eax+0x8]
 100204f:	52                   	push   edx
 1002050:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
 1002054:	52                   	push   edx
 1002055:	0f b6 50 3e          	movzx  edx,BYTE PTR [eax+0x3e]
 1002059:	52                   	push   edx
 100205a:	0f b6 50 3d          	movzx  edx,BYTE PTR [eax+0x3d]
 100205e:	52                   	push   edx
 100205f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
 1002063:	52                   	push   edx
 1002064:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
 1002068:	52                   	push   edx
 1002069:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 100206c:	50                   	push   eax
 100206d:	68 38 a8 02 01       	push   0x102a838
 1002072:	e8 78 7c 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:77
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
            //getVendorLongName(kPCIDeviceFunctions[cnt].vendor, buffer);
            //printk("%s",buffer);
            getDeviceName(kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, buffer);
 1002077:	89 f8                	mov    eax,edi
 1002079:	03 05 fc 97 12 00    	add    eax,DWORD PTR ds:0x1297fc
 100207f:	83 c4 2c             	add    esp,0x2c
 1002082:	55                   	push   ebp
 1002083:	0f b7 50 08          	movzx  edx,WORD PTR [eax+0x8]
 1002087:	52                   	push   edx
 1002088:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
 100208c:	50                   	push   eax
 100208d:	e8 23 fd ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:78
            strleft(buffer,28);
 1002092:	83 c4 08             	add    esp,0x8
 1002095:	6a 1c                	push   0x1c
 1002097:	55                   	push   ebp
 1002098:	e8 47 7e 00 00       	call   1009ee4 <strleft>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:79
            printk("%s\n",buffer);
 100209d:	83 c4 08             	add    esp,0x8
 10020a0:	55                   	push   ebp
 10020a1:	68 70 42 04 01       	push   0x1044270
 10020a6:	e8 44 7c 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:80
            totalCnt++;
 10020ab:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:81
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
 10020ae:	83 c4 10             	add    esp,0x10
 10020b1:	85 db                	test   ebx,ebx
 10020b3:	7e 1e                	jle    10020d3 <printPCIConfig+0x2b5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:81 (discriminator 1)
 10020b5:	e8 c8 0f 00 00       	call   1003082 <cursorGetMaxY>
 10020ba:	89 c1                	mov    ecx,eax
 10020bc:	8d 43 04             	lea    eax,[ebx+0x4]
 10020bf:	99                   	cdq    
 10020c0:	f7 f9                	idiv   ecx
 10020c2:	85 d2                	test   edx,edx
 10020c4:	75 0d                	jne    10020d3 <printPCIConfig+0x2b5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:82
            pauseDisplay(false);
 10020c6:	83 ec 0c             	sub    esp,0xc
 10020c9:	6a 00                	push   0x0
 10020cb:	e8 ec 74 00 00       	call   10095bc <pauseDisplay>
 10020d0:	83 c4 10             	add    esp,0x10
 10020d3:	83 c7 50             	add    edi,0x50
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:68 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
 10020d6:	89 da                	mov    edx,ebx
 10020d8:	29 f2                	sub    edx,esi
 10020da:	0f b6 05 ee 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ee
 10020e1:	39 c2                	cmp    edx,eax
 10020e3:	0f 8c 51 ff ff ff    	jl     100203a <printPCIConfig+0x21c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:85
            totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
        }
    }
}
 10020e9:	81 c4 ac 00 00 00    	add    esp,0xac
 10020ef:	5b                   	pop    ebx
 10020f0:	5e                   	pop    esi
 10020f1:	5f                   	pop    edi
 10020f2:	5d                   	pop    ebp
 10020f3:	c3                   	ret    

010020f4 <getDeviceNameP>:
getDeviceNameP():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:184
        }
    strcpy(deviceName,"Not Found");
}

char* getDeviceNameP(struct pci_device_t* node, char* buffer)
{
 10020f4:	53                   	push   ebx
 10020f5:	83 ec 0c             	sub    esp,0xc
 10020f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 10020fc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:185
    getDeviceName(node->vendor, node->device, buffer);
 1002100:	53                   	push   ebx
 1002101:	0f b7 50 08          	movzx  edx,WORD PTR [eax+0x8]
 1002105:	52                   	push   edx
 1002106:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
 100210a:	50                   	push   eax
 100210b:	e8 a5 fc ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:187
    return buffer;
}
 1002110:	89 d8                	mov    eax,ebx
 1002112:	83 c4 18             	add    esp,0x18
 1002115:	5b                   	pop    ebx
 1002116:	c3                   	ret    

01002117 <getClass>:
getClass():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:190

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
 1002117:	53                   	push   ebx
 1002118:	83 ec 08             	sub    esp,0x8
 100211b:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
 1002120:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
 1002125:	b8 c0 d4 00 01       	mov    eax,0x100d4c0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:192
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
 100212a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:194
    {
        if (PciClassCodeTable[cnt].BaseClass==class && PciClassCodeTable[cnt].SubClass==subClass /*&& PciClassCodeTable[cnt].ProgIf==prog*/ )
 100212f:	38 08                	cmp    BYTE PTR [eax],cl
 1002131:	75 43                	jne    1002176 <getClass+0x5f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:194 (discriminator 1)
 1002133:	38 58 01             	cmp    BYTE PTR [eax+0x1],bl
 1002136:	75 3e                	jne    1002176 <getClass+0x5f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:196
        {
            strcpy(BaseDesc,PciClassCodeTable[cnt].BaseDesc);
 1002138:	83 ec 08             	sub    esp,0x8
 100213b:	c1 e2 04             	shl    edx,0x4
 100213e:	8d 9a c0 d4 00 01    	lea    ebx,[edx+0x100d4c0]
 1002144:	ff b2 c4 d4 00 01    	push   DWORD PTR [edx+0x100d4c4]
 100214a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 100214e:	e8 6d 7c 00 00       	call   1009dc0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:197
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
 1002153:	83 c4 08             	add    esp,0x8
 1002156:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 1002159:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
 100215d:	e8 5e 7c 00 00       	call   1009dc0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:198
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
 1002162:	83 c4 08             	add    esp,0x8
 1002165:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 1002168:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 100216c:	e8 4f 7c 00 00       	call   1009dc0 <strcpy>
 1002171:	83 c4 10             	add    esp,0x10
 1002174:	eb 08                	jmp    100217e <getClass+0x67>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:192 (discriminator 2)
}

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
 1002176:	83 c2 01             	add    edx,0x1
 1002179:	83 c0 10             	add    eax,0x10
 100217c:	eb b1                	jmp    100212f <getClass+0x18>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:206
    }
    strcpy(BaseDesc,notFound);
    strcpy(SubDesc,notFound);
    strcpy(ProgDesc,notFound);
    return;
}
 100217e:	83 c4 08             	add    esp,0x8
 1002181:	5b                   	pop    ebx
 1002182:	c3                   	ret    

01002183 <getDeviceHeader>:
getDeviceHeader():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:209

bool getDeviceHeader(struct pci_device_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
 1002183:	55                   	push   ebp
 1002184:	57                   	push   edi
 1002185:	56                   	push   esi
 1002186:	53                   	push   ebx
 1002187:	83 ec 38             	sub    esp,0x38
 100218a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
 100218e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
 1002192:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
 1002196:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
 100219a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
 100219e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
 10021a2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:212
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
 10021a6:	0f b6 d2             	movzx  edx,dl
 10021a9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
 10021ad:	0f b6 c9             	movzx  ecx,cl
 10021b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
 10021b4:	0f b6 c0             	movzx  eax,al
 10021b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
 10021bb:	52                   	push   edx
 10021bc:	51                   	push   ecx
 10021bd:	50                   	push   eax
 10021be:	68 b0 a8 02 01       	push   0x102a8b0
 10021c3:	68 00 01 00 00       	push   0x100
 10021c8:	e8 3a 7b 00 00       	call   1009d07 <printd>
 10021cd:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
 10021d1:	83 c4 20             	add    esp,0x20
 10021d4:	89 ee                	mov    esi,ebp
 10021d6:	bb 01 00 00 00       	mov    ebx,0x1
 10021db:	eb 06                	jmp    10021e3 <getDeviceHeader+0x60>
 10021dd:	83 c3 01             	add    ebx,0x1
 10021e0:	83 c6 04             	add    esi,0x4
 10021e3:	8d 7b ff             	lea    edi,[ebx-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:216
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
 10021e6:	89 f0                	mov    eax,esi
 10021e8:	2a 44 24 10          	sub    al,BYTE PTR [esp+0x10]
 10021ec:	0f b6 c0             	movzx  eax,al
 10021ef:	50                   	push   eax
 10021f0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
 10021f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 10021f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 10021fc:	e8 0f fb ff ff       	call   1001d10 <pciConfigReadDWord>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:217
        if (value==0xFFFFFFFF)
 1002201:	83 c4 10             	add    esp,0x10
 1002204:	83 f8 ff             	cmp    eax,0xffffffff
 1002207:	0f 84 c6 00 00 00    	je     10022d3 <getDeviceHeader+0x150>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:219
            return false;
        switch(cnt)
 100220d:	83 ff 0f             	cmp    edi,0xf
 1002210:	0f 87 95 00 00 00    	ja     10022ab <getDeviceHeader+0x128>
 1002216:	ff 24 bd 00 50 02 01 	jmp    DWORD PTR [edi*4+0x1025000]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:222
        {
            case 0:
                node->vendor=value;
 100221d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:223
                node->device=value >> 16;
 1002221:	c1 e8 10             	shr    eax,0x10
 1002224:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:224
                break;
 1002228:	eb b3                	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:226
            case 1:
                node->command=value&0xFFFF;
 100222a:	66 89 45 4c          	mov    WORD PTR [ebp+0x4c],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:227
                node->status=value>>16&0xFFFF;
 100222e:	c1 e8 10             	shr    eax,0x10
 1002231:	66 89 45 4a          	mov    WORD PTR [ebp+0x4a],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:228
                break;
 1002235:	eb a6                	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:230
            case 2:
                node->class=value >> 24;
 1002237:	89 c2                	mov    edx,eax
 1002239:	c1 ea 18             	shr    edx,0x18
 100223c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:231
                node->subClass=(value & 0x00FF0000) >> 16;
 100223f:	89 c2                	mov    edx,eax
 1002241:	81 e2 00 00 ff 00    	and    edx,0xff0000
 1002247:	c1 ea 10             	shr    edx,0x10
 100224a:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:232
                node->prog=(value & 0x0000FF00) >> 8;
 100224d:	0f b6 c4             	movzx  eax,ah
 1002250:	88 45 18             	mov    BYTE PTR [ebp+0x18],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:233
                break;
 1002253:	eb 88                	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:235
            case 3:
                node->headerType=(value >> 16) & 0x7f;
 1002255:	89 c2                	mov    edx,eax
 1002257:	c1 ea 10             	shr    edx,0x10
 100225a:	83 e2 7f             	and    edx,0x7f
 100225d:	88 55 03             	mov    BYTE PTR [ebp+0x3],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:236
                node->multiFunction=(value & 0x00800000)==0x00800000;
 1002260:	89 c2                	mov    edx,eax
 1002262:	c1 ea 17             	shr    edx,0x17
 1002265:	83 e2 01             	and    edx,0x1
 1002268:	88 55 04             	mov    BYTE PTR [ebp+0x4],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:237
                node->cacheSize=value&0xFF;
 100226b:	88 45 41             	mov    BYTE PTR [ebp+0x41],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:238
                node->latencyTimer=value>>8;
 100226e:	c1 e8 08             	shr    eax,0x8
 1002271:	88 45 40             	mov    BYTE PTR [ebp+0x40],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:239
                break;
 1002274:	e9 64 ff ff ff       	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:241
            case 4: case 5: case 6: case 7: case 8: case 9:
                node->baseAdd[cnt+1-5]=value;
 1002279:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:242
                break;
 100227c:	eb 2d                	jmp    10022ab <getDeviceHeader+0x128>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:244
            case 11:
                node->subdevice=value >> 16;
 100227e:	89 c2                	mov    edx,eax
 1002280:	c1 ea 10             	shr    edx,0x10
 1002283:	66 89 55 0c          	mov    WORD PTR [ebp+0xc],dx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:245
                node->subvendor=value & 0xFFFF;
 1002287:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:246
                break;
 100228b:	e9 4d ff ff ff       	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:248
            case 12:
                node->expROMAddress=value;
 1002290:	89 45 38             	mov    DWORD PTR [ebp+0x38],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:249
                break;
 1002293:	e9 45 ff ff ff       	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:251
            case 13:
                node->caps = value & 0xFF;
 1002298:	88 45 3c             	mov    BYTE PTR [ebp+0x3c],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:252
                break;
 100229b:	e9 3d ff ff ff       	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:254
            case 15:
                node->interrupt_line=value&0xFF;
 10022a0:	88 45 3d             	mov    BYTE PTR [ebp+0x3d],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:255
                node->interrupt_pin=(value >> 8)&0xFF;
 10022a3:	c1 e8 08             	shr    eax,0x8
 10022a6:	88 45 3e             	mov    BYTE PTR [ebp+0x3e],al
 10022a9:	eb 09                	jmp    10022b4 <getDeviceHeader+0x131>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:214 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
 10022ab:	83 fb 0f             	cmp    ebx,0xf
 10022ae:	0f 8e 29 ff ff ff    	jle    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:259
                node->interrupt_line=value&0xFF;
                node->interrupt_pin=(value >> 8)&0xFF;
                break;
        }
    }
    node->busNo=bus;
 10022b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
 10022b9:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:260
    node->deviceNo=slot;
 10022bc:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
 10022c1:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:261
    node->funcNo=func;
 10022c4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
 10022c9:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:262
    return true;
 10022cc:	b8 01 00 00 00       	mov    eax,0x1
 10022d1:	eb 05                	jmp    10022d8 <getDeviceHeader+0x155>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:218
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
        if (value==0xFFFFFFFF)
            return false;
 10022d3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:263
    }
    node->busNo=bus;
    node->deviceNo=slot;
    node->funcNo=func;
    return true;
}
 10022d8:	83 c4 2c             	add    esp,0x2c
 10022db:	5b                   	pop    ebx
 10022dc:	5e                   	pop    esi
 10022dd:	5f                   	pop    edi
 10022de:	5d                   	pop    ebp
 10022df:	c3                   	ret    

010022e0 <getBridgeHeader>:
getBridgeHeader():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:266

bool getBridgeHeader(struct pci_bridge_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
 10022e0:	55                   	push   ebp
 10022e1:	57                   	push   edi
 10022e2:	56                   	push   esi
 10022e3:	53                   	push   ebx
 10022e4:	83 ec 38             	sub    esp,0x38
 10022e7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
 10022eb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
 10022ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
 10022f3:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
 10022f7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
 10022fb:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
 10022ff:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:269
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
 1002303:	0f b6 fa             	movzx  edi,dl
 1002306:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
 100230a:	0f b6 c9             	movzx  ecx,cl
 100230d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
 1002311:	0f b6 c0             	movzx  eax,al
 1002314:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
 1002318:	57                   	push   edi
 1002319:	51                   	push   ecx
 100231a:	50                   	push   eax
 100231b:	68 d8 a8 02 01       	push   0x102a8d8
 1002320:	68 00 01 00 00       	push   0x100
 1002325:	e8 dd 79 00 00       	call   1009d07 <printd>
 100232a:	83 c4 20             	add    esp,0x20
 100232d:	be 01 00 00 00       	mov    esi,0x1
 1002332:	bf 00 00 00 00       	mov    edi,0x0
 1002337:	eb 06                	jmp    100233f <getBridgeHeader+0x5f>
 1002339:	83 c7 04             	add    edi,0x4
 100233c:	83 c6 01             	add    esi,0x1
 100233f:	8d 5e ff             	lea    ebx,[esi-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:273
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
 1002342:	89 f8                	mov    eax,edi
 1002344:	0f b6 c0             	movzx  eax,al
 1002347:	50                   	push   eax
 1002348:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 100234c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1002350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1002354:	e8 b7 f9 ff ff       	call   1001d10 <pciConfigReadDWord>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:274
        if (value==0xFFFFFFFF)
 1002359:	83 c4 10             	add    esp,0x10
 100235c:	83 f8 ff             	cmp    eax,0xffffffff
 100235f:	0f 84 60 01 00 00    	je     10024c5 <getBridgeHeader+0x1e5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:276
            return false;
        switch(cnt)
 1002365:	83 fb 0f             	cmp    ebx,0xf
 1002368:	0f 87 2f 01 00 00    	ja     100249d <getBridgeHeader+0x1bd>
 100236e:	ff 24 9d 40 50 02 01 	jmp    DWORD PTR [ebx*4+0x1025040]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:279
        {
            case 0:
                node->vendor=value;
 1002375:	66 89 45 05          	mov    WORD PTR [ebp+0x5],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:280
                node->device=value >> 16;
 1002379:	c1 e8 10             	shr    eax,0x10
 100237c:	66 89 45 07          	mov    WORD PTR [ebp+0x7],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:281
                break;
 1002380:	eb b7                	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:283
            case 1:
                node->command=value&0xFFFF;
 1002382:	66 89 45 3a          	mov    WORD PTR [ebp+0x3a],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:284
                node->status=value>>16&0xFFFF;
 1002386:	c1 e8 10             	shr    eax,0x10
 1002389:	66 89 45 38          	mov    WORD PTR [ebp+0x38],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:285
                break;
 100238d:	eb aa                	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:287
            case 2:
                node->class=value >> 24;
 100238f:	89 c2                	mov    edx,eax
 1002391:	c1 ea 18             	shr    edx,0x18
 1002394:	89 55 09             	mov    DWORD PTR [ebp+0x9],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:288
                node->subClass=(value & 0x00FF0000) >> 16;
 1002397:	89 c2                	mov    edx,eax
 1002399:	81 e2 00 00 ff 00    	and    edx,0xff0000
 100239f:	c1 ea 10             	shr    edx,0x10
 10023a2:	89 55 0d             	mov    DWORD PTR [ebp+0xd],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:289
                node->prog=(value & 0x0000FF00) >> 8;
 10023a5:	0f b6 c4             	movzx  eax,ah
 10023a8:	88 45 11             	mov    BYTE PTR [ebp+0x11],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:290
                break;
 10023ab:	eb 8c                	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:292
            case 3:
                node->headerType=(value >> 16) & 0x7f;
 10023ad:	89 c2                	mov    edx,eax
 10023af:	c1 ea 10             	shr    edx,0x10
 10023b2:	83 e2 7f             	and    edx,0x7f
 10023b5:	88 55 03             	mov    BYTE PTR [ebp+0x3],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:293
                node->multiFunction=(value & 0x00800000)==0x00800000;
 10023b8:	89 c2                	mov    edx,eax
 10023ba:	c1 ea 17             	shr    edx,0x17
 10023bd:	83 e2 01             	and    edx,0x1
 10023c0:	88 55 04             	mov    BYTE PTR [ebp+0x4],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:294
                node->cacheSize=value&0xFF;
 10023c3:	88 45 2e             	mov    BYTE PTR [ebp+0x2e],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:295
                node->latencyTimer=value>>8;
 10023c6:	c1 e8 08             	shr    eax,0x8
 10023c9:	88 45 2d             	mov    BYTE PTR [ebp+0x2d],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:296
                break;
 10023cc:	e9 68 ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:298
            case 4: 
                node->baseAdd[0]=value;
 10023d1:	89 45 12             	mov    DWORD PTR [ebp+0x12],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:299
                break;
 10023d4:	e9 60 ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:301
            case 5:
                node->baseAdd[1]=value;
 10023d9:	89 45 16             	mov    DWORD PTR [ebp+0x16],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:302
                break;
 10023dc:	e9 58 ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:304
            case 6:
                node->secLatencyTimer=(value>>24);
 10023e1:	89 c2                	mov    edx,eax
 10023e3:	c1 ea 18             	shr    edx,0x18
 10023e6:	88 55 31             	mov    BYTE PTR [ebp+0x31],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:305
                node->subordinateBusNum=(value>>16) & 0xFF;
 10023e9:	89 c2                	mov    edx,eax
 10023eb:	c1 ea 10             	shr    edx,0x10
 10023ee:	88 55 28             	mov    BYTE PTR [ebp+0x28],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:306
                node->secondaryBusNum=(value >> 8) & 0xFF;
 10023f1:	89 c2                	mov    edx,eax
 10023f3:	c1 ea 08             	shr    edx,0x8
 10023f6:	88 55 26             	mov    BYTE PTR [ebp+0x26],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:307
                node->primaryBusNum=value & 0xFF;
 10023f9:	88 45 27             	mov    BYTE PTR [ebp+0x27],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:309
                //printk("pr:se:su %02X:%02X:%02X\n", node->primaryBusNum, node->secondaryBusNum, node->subordinateBusNum);
                break;
 10023fc:	e9 38 ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:311
            case 7:
                node->secStatus=(value>>16);
 1002401:	89 c2                	mov    edx,eax
 1002403:	c1 ea 10             	shr    edx,0x10
 1002406:	66 89 55 3c          	mov    WORD PTR [ebp+0x3c],dx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:312
                node->ioLimit=(value>>8)&0xFF;
 100240a:	0f b6 d4             	movzx  edx,ah
 100240d:	89 55 1e             	mov    DWORD PTR [ebp+0x1e],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:313
                node->ioBase=value&0xFF;
 1002410:	25 ff 00 00 00       	and    eax,0xff
 1002415:	89 45 22             	mov    DWORD PTR [ebp+0x22],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:314
                break;
 1002418:	e9 1c ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:316
            case 8:
                node->memoryLimit=value>>16;
 100241d:	89 c2                	mov    edx,eax
 100241f:	c1 ea 10             	shr    edx,0x10
 1002422:	66 89 55 36          	mov    WORD PTR [ebp+0x36],dx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:317
                node->memoryBase=value;
 1002426:	66 89 45 34          	mov    WORD PTR [ebp+0x34],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:318
                break;
 100242a:	e9 0a ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:320
            case 9:
                node->prefMemLimit=value>>16;
 100242f:	89 c2                	mov    edx,eax
 1002431:	c1 ea 10             	shr    edx,0x10
 1002434:	89 55 3e             	mov    DWORD PTR [ebp+0x3e],edx
 1002437:	c7 45 42 00 00 00 00 	mov    DWORD PTR [ebp+0x42],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:321
                node->prefMemBase=value&0xFFFF;
 100243e:	0f b7 c0             	movzx  eax,ax
 1002441:	89 45 46             	mov    DWORD PTR [ebp+0x46],eax
 1002444:	c7 45 4a 00 00 00 00 	mov    DWORD PTR [ebp+0x4a],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:322
                break;
 100244b:	e9 e9 fe ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:324
            case 10:
                node->prefMemLimit|=value<<16;
 1002450:	c1 e0 10             	shl    eax,0x10
 1002453:	09 45 3e             	or     DWORD PTR [ebp+0x3e],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:325
                break;
 1002456:	e9 de fe ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:327
            case 11:
                node->prefMemBase|=value<<16;
 100245b:	c1 e0 10             	shl    eax,0x10
 100245e:	09 45 46             	or     DWORD PTR [ebp+0x46],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:328
                break;
 1002461:	e9 d3 fe ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:330
            case 12:
                node->ioLimit|=(value&0xFFFF0000)>>8;
 1002466:	89 c2                	mov    edx,eax
 1002468:	66 ba 00 00          	mov    dx,0x0
 100246c:	c1 ea 08             	shr    edx,0x8
 100246f:	09 55 1e             	or     DWORD PTR [ebp+0x1e],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:331
                node->ioBase|=value&0xFFFF<<8;
 1002472:	25 00 ff ff 00       	and    eax,0xffff00
 1002477:	09 45 22             	or     DWORD PTR [ebp+0x22],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:332
                break;
 100247a:	e9 ba fe ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:334
            case 13:
                node->caps = value & 0xFF;
 100247f:	88 45 29             	mov    BYTE PTR [ebp+0x29],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:335
                break;
 1002482:	eb 22                	jmp    10024a6 <getBridgeHeader+0x1c6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:337
            case 14:
                node->expROMAddress=value;
 1002484:	89 45 1a             	mov    DWORD PTR [ebp+0x1a],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:338
                break;
 1002487:	eb 1d                	jmp    10024a6 <getBridgeHeader+0x1c6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:340
            case 15:
                node->interrupt_line=value&0xFF;
 1002489:	88 45 2a             	mov    BYTE PTR [ebp+0x2a],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:341
                node->interrupt_pin=(value >> 8)&0xFF;
 100248c:	89 c2                	mov    edx,eax
 100248e:	c1 ea 08             	shr    edx,0x8
 1002491:	88 55 2b             	mov    BYTE PTR [ebp+0x2b],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:342
                node->bridgeControl=(value>>16)&0xFFFF;
 1002494:	c1 e8 10             	shr    eax,0x10
 1002497:	66 89 45 32          	mov    WORD PTR [ebp+0x32],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:343
                break;
 100249b:	eb 09                	jmp    10024a6 <getBridgeHeader+0x1c6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:271 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
 100249d:	83 fe 0d             	cmp    esi,0xd
 10024a0:	0f 8e 93 fe ff ff    	jle    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:347
                node->bridgeControl=(value>>16)&0xFFFF;
                break;

        }
    }
    node->busNo=bus;
 10024a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
 10024ab:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:348
    node->deviceNo=slot;
 10024ae:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
 10024b3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:349
    node->funcNo=func;
 10024b6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
 10024bb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:350
    return true;
 10024be:	b8 01 00 00 00       	mov    eax,0x1
 10024c3:	eb 05                	jmp    10024ca <getBridgeHeader+0x1ea>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:275
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
        if (value==0xFFFFFFFF)
            return false;
 10024c5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:351
    }
    node->busNo=bus;
    node->deviceNo=slot;
    node->funcNo=func;
    return true;
}
 10024ca:	83 c4 2c             	add    esp,0x2c
 10024cd:	5b                   	pop    ebx
 10024ce:	5e                   	pop    esi
 10024cf:	5f                   	pop    edi
 10024d0:	5d                   	pop    ebp
 10024d1:	c3                   	ret    

010024d2 <printPCIBridgeHeader>:
printPCIBridgeHeader():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:353
void printPCIBridgeHeader(struct pci_bridge_t* node)
{          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
 10024d2:	55                   	push   ebp
 10024d3:	57                   	push   edi
 10024d4:	56                   	push   esi
 10024d5:	53                   	push   ebx
 10024d6:	81 ec 98 06 00 00    	sub    esp,0x698
 10024dc:	8b 9c 24 ac 06 00 00 	mov    ebx,DWORD PTR [esp+0x6ac]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:356
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
 10024e3:	8d ac 24 b0 00 00 00 	lea    ebp,[esp+0xb0]
 10024ea:	55                   	push   ebp
 10024eb:	8d bc 24 a8 02 00 00 	lea    edi,[esp+0x2a8]
 10024f2:	57                   	push   edi
 10024f3:	8d 84 24 a0 04 00 00 	lea    eax,[esp+0x4a0]
 10024fa:	50                   	push   eax
 10024fb:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
 10024ff:	50                   	push   eax
 1002500:	0f b6 43 09          	movzx  eax,BYTE PTR [ebx+0x9]
 1002504:	50                   	push   eax
 1002505:	e8 0d fc ff ff       	call   1002117 <getClass>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:357
    printk("Bridge:\n");
 100250a:	83 c4 14             	add    esp,0x14
 100250d:	68 53 42 04 01       	push   0x1044253
 1002512:	e8 d8 77 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:358
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
 1002517:	c7 04 24 fc a7 02 01 	mov    DWORD PTR [esp],0x102a7fc
 100251e:	e8 cc 77 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:364
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
 1002523:	a1 f8 97 12 00       	mov    eax,ds:0x1297f8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
 1002528:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
 100252c:	89 04 24             	mov    DWORD PTR [esp],eax
 100252f:	0f b6 43 27          	movzx  eax,BYTE PTR [ebx+0x27]
 1002533:	50                   	push   eax
 1002534:	0f b6 43 28          	movzx  eax,BYTE PTR [ebx+0x28]
 1002538:	50                   	push   eax
 1002539:	ff 73 0d             	push   DWORD PTR [ebx+0xd]
 100253c:	ff 73 09             	push   DWORD PTR [ebx+0x9]
 100253f:	0f b7 43 07          	movzx  eax,WORD PTR [ebx+0x7]
 1002543:	50                   	push   eax
 1002544:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
 1002548:	50                   	push   eax
 1002549:	0f b6 43 2b          	movzx  eax,BYTE PTR [ebx+0x2b]
 100254d:	50                   	push   eax
 100254e:	0f b6 43 2a          	movzx  eax,BYTE PTR [ebx+0x2a]
 1002552:	50                   	push   eax
 1002553:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
 1002557:	50                   	push   eax
 1002558:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
 100255c:	50                   	push   eax
 100255d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1002560:	50                   	push   eax
 1002561:	68 00 a9 02 01       	push   0x102a900
 1002566:	e8 84 77 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:366
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);

    getVendorLongName(node->vendor, tempString);
 100256b:	83 c4 38             	add    esp,0x38
 100256e:	8d 74 24 16          	lea    esi,[esp+0x16]
 1002572:	56                   	push   esi
 1002573:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
 1002577:	50                   	push   eax
 1002578:	e8 ce f7 ff ff       	call   1001d4b <getVendorLongName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:367
    printk("Vendor: %s\t",tempString);
 100257d:	83 c4 08             	add    esp,0x8
 1002580:	56                   	push   esi
 1002581:	68 5c 42 04 01       	push   0x104425c
 1002586:	e8 64 77 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:368
    getDeviceName(node->vendor, node->device, tempString);
 100258b:	83 c4 0c             	add    esp,0xc
 100258e:	56                   	push   esi
 100258f:	0f b7 43 07          	movzx  eax,WORD PTR [ebx+0x7]
 1002593:	50                   	push   eax
 1002594:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
 1002598:	50                   	push   eax
 1002599:	e8 17 f8 ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:369
    printk("Device: %s\n",tempString);
 100259e:	83 c4 08             	add    esp,0x8
 10025a1:	56                   	push   esi
 10025a2:	68 68 42 04 01       	push   0x1044268
 10025a7:	e8 43 77 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:370
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
 10025ac:	55                   	push   ebp
 10025ad:	57                   	push   edi
 10025ae:	8d 84 24 a4 04 00 00 	lea    eax,[esp+0x4a4]
 10025b5:	50                   	push   eax
 10025b6:	68 44 a9 02 01       	push   0x102a944
 10025bb:	e8 2f 77 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:371
    printk("Base addresses:\n");
 10025c0:	83 c4 14             	add    esp,0x14
 10025c3:	68 74 42 04 01       	push   0x1044274
 10025c8:	e8 22 77 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:373
    for (int cnt=0;cnt<2;cnt++)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
 10025cd:	83 c4 0c             	add    esp,0xc
 10025d0:	ff 73 12             	push   DWORD PTR [ebx+0x12]
 10025d3:	6a 00                	push   0x0
 10025d5:	68 85 42 04 01       	push   0x1044285
 10025da:	e8 10 77 00 00       	call   1009cef <printk>
 10025df:	83 c4 0c             	add    esp,0xc
 10025e2:	ff 73 16             	push   DWORD PTR [ebx+0x16]
 10025e5:	6a 01                	push   0x1
 10025e7:	68 85 42 04 01       	push   0x1044285
 10025ec:	e8 fe 76 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:374
    printk("IO Base: 0x%04X\tIO Limit: 0x%04X\n",node->ioBase,node->ioLimit);
 10025f1:	83 c4 0c             	add    esp,0xc
 10025f4:	ff 73 1e             	push   DWORD PTR [ebx+0x1e]
 10025f7:	ff 73 22             	push   DWORD PTR [ebx+0x22]
 10025fa:	68 68 a9 02 01       	push   0x102a968
 10025ff:	e8 eb 76 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:375
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
 1002604:	83 c4 0c             	add    esp,0xc
 1002607:	0f b7 43 38          	movzx  eax,WORD PTR [ebx+0x38]
 100260b:	50                   	push   eax
 100260c:	0f b7 43 3a          	movzx  eax,WORD PTR [ebx+0x3a]
 1002610:	50                   	push   eax
 1002611:	68 8c a9 02 01       	push   0x102a98c
 1002616:	e8 d4 76 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:376
}   
 100261b:	81 c4 9c 06 00 00    	add    esp,0x69c
 1002621:	5b                   	pop    ebx
 1002622:	5e                   	pop    esi
 1002623:	5f                   	pop    edi
 1002624:	5d                   	pop    ebp
 1002625:	c3                   	ret    

01002626 <printPCIHeader>:
printPCIHeader():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:379

void printPCIHeader(struct pci_device_t* node)
{
 1002626:	55                   	push   ebp
 1002627:	57                   	push   edi
 1002628:	56                   	push   esi
 1002629:	53                   	push   ebx
 100262a:	81 ec 98 06 00 00    	sub    esp,0x698
 1002630:	8b 9c 24 ac 06 00 00 	mov    ebx,DWORD PTR [esp+0x6ac]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:382
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
 1002637:	8d ac 24 b0 00 00 00 	lea    ebp,[esp+0xb0]
 100263e:	55                   	push   ebp
 100263f:	8d bc 24 a8 02 00 00 	lea    edi,[esp+0x2a8]
 1002646:	57                   	push   edi
 1002647:	8d 84 24 a0 04 00 00 	lea    eax,[esp+0x4a0]
 100264e:	50                   	push   eax
 100264f:	0f b6 43 14          	movzx  eax,BYTE PTR [ebx+0x14]
 1002653:	50                   	push   eax
 1002654:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
 1002658:	50                   	push   eax
 1002659:	e8 b9 fa ff ff       	call   1002117 <getClass>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:386
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
 100265e:	83 c4 14             	add    esp,0x14
 1002661:	68 95 42 04 01       	push   0x1044295
 1002666:	e8 84 76 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:387
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
 100266b:	c7 04 24 fc a7 02 01 	mov    DWORD PTR [esp],0x102a7fc
 1002672:	e8 78 76 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:388
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
 1002677:	83 c4 08             	add    esp,0x8
 100267a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
 100267d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
 1002680:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
 1002684:	50                   	push   eax
 1002685:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
 1002689:	50                   	push   eax
 100268a:	0f b6 43 3e          	movzx  eax,BYTE PTR [ebx+0x3e]
 100268e:	50                   	push   eax
 100268f:	0f b6 43 3d          	movzx  eax,BYTE PTR [ebx+0x3d]
 1002693:	50                   	push   eax
 1002694:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
 1002698:	50                   	push   eax
 1002699:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
 100269d:	50                   	push   eax
 100269e:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 10026a1:	50                   	push   eax
 10026a2:	68 b0 a9 02 01       	push   0x102a9b0
 10026a7:	e8 43 76 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:391
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
                node->subClass);
    getVendorLongName(node->vendor, tempString);
 10026ac:	83 c4 28             	add    esp,0x28
 10026af:	8d 74 24 16          	lea    esi,[esp+0x16]
 10026b3:	56                   	push   esi
 10026b4:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
 10026b8:	50                   	push   eax
 10026b9:	e8 8d f6 ff ff       	call   1001d4b <getVendorLongName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:392
    printk("Vendor: %s\t",tempString);
 10026be:	83 c4 08             	add    esp,0x8
 10026c1:	56                   	push   esi
 10026c2:	68 5c 42 04 01       	push   0x104425c
 10026c7:	e8 23 76 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:393
    getDeviceName(node->vendor, node->device, tempString);
 10026cc:	83 c4 0c             	add    esp,0xc
 10026cf:	56                   	push   esi
 10026d0:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
 10026d4:	50                   	push   eax
 10026d5:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
 10026d9:	50                   	push   eax
 10026da:	e8 d6 f6 ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:394
    printk("Device: %s\n",tempString);
 10026df:	83 c4 08             	add    esp,0x8
 10026e2:	56                   	push   esi
 10026e3:	68 68 42 04 01       	push   0x1044268
 10026e8:	e8 02 76 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:395
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
 10026ed:	55                   	push   ebp
 10026ee:	57                   	push   edi
 10026ef:	8d 84 24 a4 04 00 00 	lea    eax,[esp+0x4a4]
 10026f6:	50                   	push   eax
 10026f7:	68 44 a9 02 01       	push   0x102a944
 10026fc:	e8 ee 75 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:396
    printk("Base addresses:\n");
 1002701:	83 c4 14             	add    esp,0x14
 1002704:	68 74 42 04 01       	push   0x1044274
 1002709:	e8 e1 75 00 00       	call   1009cef <printk>
 100270e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:397
    for (int cnt=0;cnt<6;cnt++)
 1002711:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:398 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
 1002716:	83 ec 04             	sub    esp,0x4
 1002719:	ff 74 b3 20          	push   DWORD PTR [ebx+esi*4+0x20]
 100271d:	56                   	push   esi
 100271e:	68 85 42 04 01       	push   0x1044285
 1002723:	e8 c7 75 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:397 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<6;cnt++)
 1002728:	83 c6 01             	add    esi,0x1
 100272b:	83 c4 10             	add    esp,0x10
 100272e:	83 fe 06             	cmp    esi,0x6
 1002731:	75 e3                	jne    1002716 <printPCIHeader+0xf0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:399
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("Subsystem: %04X\tSubsys Vendor: %04X\n",node->subdevice,node->subvendor);
 1002733:	83 ec 04             	sub    esp,0x4
 1002736:	0f b7 43 0a          	movzx  eax,WORD PTR [ebx+0xa]
 100273a:	50                   	push   eax
 100273b:	0f b7 43 0c          	movzx  eax,WORD PTR [ebx+0xc]
 100273f:	50                   	push   eax
 1002740:	68 e8 a9 02 01       	push   0x102a9e8
 1002745:	e8 a5 75 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:400
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
 100274a:	83 c4 0c             	add    esp,0xc
 100274d:	0f b7 43 4a          	movzx  eax,WORD PTR [ebx+0x4a]
 1002751:	50                   	push   eax
 1002752:	0f b7 43 4c          	movzx  eax,WORD PTR [ebx+0x4c]
 1002756:	50                   	push   eax
 1002757:	68 8c a9 02 01       	push   0x102a98c
 100275c:	e8 8e 75 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:401
    printk("Interrupt Pin/Line: 0x%04X/0x%04X\n",node->interrupt_pin,node->interrupt_line);
 1002761:	83 c4 0c             	add    esp,0xc
 1002764:	0f b6 43 3d          	movzx  eax,BYTE PTR [ebx+0x3d]
 1002768:	50                   	push   eax
 1002769:	0f b6 43 3e          	movzx  eax,BYTE PTR [ebx+0x3e]
 100276d:	50                   	push   eax
 100276e:	68 10 aa 02 01       	push   0x102aa10
 1002773:	e8 77 75 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:402
}
 1002778:	81 c4 9c 06 00 00    	add    esp,0x69c
 100277e:	5b                   	pop    ebx
 100277f:	5e                   	pop    esi
 1002780:	5f                   	pop    edi
 1002781:	5d                   	pop    ebp
 1002782:	c3                   	ret    

01002783 <pciQueryBDF>:
pciQueryBDF():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:131
    //return ((num >> 24)) | ((num & 0x0000FF000) << 8) | ((num & 0x00FF0000)>>8) | ((num << 24));
    return num;
 }

 void pciQueryBDF(uint8_t bus, uint8_t device, uint8_t function)
 {
 1002783:	57                   	push   edi
 1002784:	56                   	push   esi
 1002785:	53                   	push   ebx
 1002786:	81 ec a0 00 00 00    	sub    esp,0xa0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:135
     struct pci_device_t header;
     struct pci_bridge_t bridge;

     printk("Retrieving info for PCI address %02X:%02X:%02X\n",bus,device,function);
 100278c:	0f b6 bc 24 b8 00 00 	movzx  edi,BYTE PTR [esp+0xb8]
 1002793:	00 
 1002794:	0f b6 b4 24 b4 00 00 	movzx  esi,BYTE PTR [esp+0xb4]
 100279b:	00 
 100279c:	0f b6 9c 24 b0 00 00 	movzx  ebx,BYTE PTR [esp+0xb0]
 10027a3:	00 
 10027a4:	57                   	push   edi
 10027a5:	56                   	push   esi
 10027a6:	53                   	push   ebx
 10027a7:	68 34 aa 02 01       	push   0x102aa34
 10027ac:	e8 3e 75 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:136
    if (!getDeviceHeader(&header, bus, device, function))
 10027b1:	57                   	push   edi
 10027b2:	56                   	push   esi
 10027b3:	53                   	push   ebx
 10027b4:	8d 44 24 6c          	lea    eax,[esp+0x6c]
 10027b8:	50                   	push   eax
 10027b9:	e8 c5 f9 ff ff       	call   1002183 <getDeviceHeader>
 10027be:	83 c4 20             	add    esp,0x20
 10027c1:	84 c0                	test   al,al
 10027c3:	75 12                	jne    10027d7 <pciQueryBDF+0x54>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:138
    {
        printk("No device at that address\n");
 10027c5:	83 ec 0c             	sub    esp,0xc
 10027c8:	68 9e 42 04 01       	push   0x104429e
 10027cd:	e8 1d 75 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:139
        return;
 10027d2:	83 c4 10             	add    esp,0x10
 10027d5:	eb 4b                	jmp    1002822 <pciQueryBDF+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:141
    }
    if (header.vendor==0xFFFF)
 10027d7:	66 83 7c 24 56 ff    	cmp    WORD PTR [esp+0x56],0xffff
 10027dd:	75 12                	jne    10027f1 <pciQueryBDF+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:143
    {
        printk("Nothing found at %02X:%02X:%02X\n",bus,device,function);
 10027df:	57                   	push   edi
 10027e0:	56                   	push   esi
 10027e1:	53                   	push   ebx
 10027e2:	68 64 aa 02 01       	push   0x102aa64
 10027e7:	e8 03 75 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:144
        return;
 10027ec:	83 c4 10             	add    esp,0x10
 10027ef:	eb 31                	jmp    1002822 <pciQueryBDF+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:146
    }
     if (header.class==0x06)
 10027f1:	83 7c 24 60 06       	cmp    DWORD PTR [esp+0x60],0x6
 10027f6:	75 1a                	jne    1002812 <pciQueryBDF+0x8f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:148
     {
         getBridgeHeader(&bridge,bus,device,function);
 10027f8:	57                   	push   edi
 10027f9:	56                   	push   esi
 10027fa:	53                   	push   ebx
 10027fb:	8d 5c 24 0e          	lea    ebx,[esp+0xe]
 10027ff:	53                   	push   ebx
 1002800:	e8 db fa ff ff       	call   10022e0 <getBridgeHeader>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:149
         printPCIBridgeHeader(&bridge);
 1002805:	89 1c 24             	mov    DWORD PTR [esp],ebx
 1002808:	e8 c5 fc ff ff       	call   10024d2 <printPCIBridgeHeader>
 100280d:	83 c4 10             	add    esp,0x10
 1002810:	eb 10                	jmp    1002822 <pciQueryBDF+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:152
     }
     else
         printPCIHeader(&header);
 1002812:	83 ec 0c             	sub    esp,0xc
 1002815:	8d 44 24 5c          	lea    eax,[esp+0x5c]
 1002819:	50                   	push   eax
 100281a:	e8 07 fe ff ff       	call   1002626 <printPCIHeader>
 100281f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:153
 }
 1002822:	81 c4 a0 00 00 00    	add    esp,0xa0
 1002828:	5b                   	pop    ebx
 1002829:	5e                   	pop    esi
 100282a:	5f                   	pop    edi
 100282b:	c3                   	ret    

0100282c <addFunction>:
addFunction():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:404
    printk("Subsystem: %04X\tSubsys Vendor: %04X\n",node->subdevice,node->subvendor);
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
    printk("Interrupt Pin/Line: 0x%04X/0x%04X\n",node->interrupt_pin,node->interrupt_line);
}
void addFunction(struct pci_device_t* node)
{
 100282c:	53                   	push   ebx
 100282d:	83 ec 10             	sub    esp,0x10
 1002830:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:405
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFound function: deviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", node->device, node->vendor, node->class, node->subClass);
 1002834:	ff 73 14             	push   DWORD PTR [ebx+0x14]
 1002837:	ff 73 10             	push   DWORD PTR [ebx+0x10]
 100283a:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
 100283e:	50                   	push   eax
 100283f:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
 1002843:	50                   	push   eax
 1002844:	68 88 aa 02 01       	push   0x102aa88
 1002849:	68 00 01 00 00       	push   0x100
 100284e:	e8 b4 74 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:406
    memcpy(&kPCIDeviceFunctions[kPCIFunctionCount++],node,sizeof(struct pci_bridge_t));
 1002853:	0f b6 05 ee 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ee
 100285a:	8d 50 01             	lea    edx,[eax+0x1]
 100285d:	88 15 ee 97 12 00    	mov    BYTE PTR ds:0x1297ee,dl
 1002863:	83 c4 1c             	add    esp,0x1c
 1002866:	6a 4e                	push   0x4e
 1002868:	53                   	push   ebx
 1002869:	0f b6 c0             	movzx  eax,al
 100286c:	8d 04 80             	lea    eax,[eax+eax*4]
 100286f:	c1 e0 04             	shl    eax,0x4
 1002872:	03 05 fc 97 12 00    	add    eax,DWORD PTR ds:0x1297fc
 1002878:	50                   	push   eax
 1002879:	e8 02 6f 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:407
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFunction entry created\n");
 100287e:	83 c4 08             	add    esp,0x8
 1002881:	68 b9 42 04 01       	push   0x10442b9
 1002886:	68 00 01 00 00       	push   0x100
 100288b:	e8 77 74 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:408
}
 1002890:	83 c4 18             	add    esp,0x18
 1002893:	5b                   	pop    ebx
 1002894:	c3                   	ret    

01002895 <addBridge>:
addBridge():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:410
void addBridge(struct pci_device_t* node, uint8_t bus, uint8_t device, uint8_t function)
{
 1002895:	57                   	push   edi
 1002896:	56                   	push   esi
 1002897:	53                   	push   ebx
 1002898:	81 ec a0 00 00 00    	sub    esp,0xa0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:414
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
 100289e:	0f b6 bc 24 bc 00 00 	movzx  edi,BYTE PTR [esp+0xbc]
 10028a5:	00 
 10028a6:	0f b6 b4 24 b8 00 00 	movzx  esi,BYTE PTR [esp+0xb8]
 10028ad:	00 
 10028ae:	0f b6 9c 24 b4 00 00 	movzx  ebx,BYTE PTR [esp+0xb4]
 10028b5:	00 
 10028b6:	57                   	push   edi
 10028b7:	56                   	push   esi
 10028b8:	53                   	push   ebx
 10028b9:	8d 44 24 0e          	lea    eax,[esp+0xe]
 10028bd:	50                   	push   eax
 10028be:	e8 1d fa ff ff       	call   10022e0 <getBridgeHeader>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:415
    if (bridge.vendor==0xFFFF)
 10028c3:	83 c4 10             	add    esp,0x10
 10028c6:	66 83 7c 24 07 ff    	cmp    WORD PTR [esp+0x7],0xffff
 10028cc:	0f 84 ae 00 00 00    	je     1002980 <addBridge+0xeb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:418
        return;
    //         bridge.busNo=bus;bridge.deviceNo=device;bridge.funcNo=function;
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tFound bridge on %02X:%02X:%02X,Cls#%02XpBus#%02X,sBus#%02X,suBus# %02X,MF=%u\n",bus, device, function, bridge.class, bridge.primaryBusNum, bridge.secondaryBusNum, bridge.subordinateBusNum, bridge.multiFunction);
 10028d2:	83 ec 08             	sub    esp,0x8
 10028d5:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
 10028da:	50                   	push   eax
 10028db:	0f b6 44 24 36       	movzx  eax,BYTE PTR [esp+0x36]
 10028e0:	50                   	push   eax
 10028e1:	0f b6 44 24 38       	movzx  eax,BYTE PTR [esp+0x38]
 10028e6:	50                   	push   eax
 10028e7:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
 10028ec:	50                   	push   eax
 10028ed:	ff 74 24 23          	push   DWORD PTR [esp+0x23]
 10028f1:	57                   	push   edi
 10028f2:	56                   	push   esi
 10028f3:	53                   	push   ebx
 10028f4:	68 e0 aa 02 01       	push   0x102aae0
 10028f9:	68 00 01 00 00       	push   0x100
 10028fe:	e8 04 74 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:419
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tdeviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", bridge.device, bridge.vendor, bridge.class, bridge.subClass);
 1002903:	83 c4 28             	add    esp,0x28
 1002906:	ff 74 24 17          	push   DWORD PTR [esp+0x17]
 100290a:	ff 74 24 17          	push   DWORD PTR [esp+0x17]
 100290e:	0f b7 44 24 17       	movzx  eax,WORD PTR [esp+0x17]
 1002913:	50                   	push   eax
 1002914:	0f b7 44 24 1d       	movzx  eax,WORD PTR [esp+0x1d]
 1002919:	50                   	push   eax
 100291a:	68 34 ab 02 01       	push   0x102ab34
 100291f:	68 00 01 00 00       	push   0x100
 1002924:	e8 de 73 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:420
    memcpy(&kPCIBridgeHeaders[kPCIBridgeCount++],&bridge,sizeof(struct pci_bridge_t));
 1002929:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
 1002930:	8d 50 01             	lea    edx,[eax+0x1]
 1002933:	88 15 ed 97 12 00    	mov    BYTE PTR ds:0x1297ed,dl
 1002939:	83 c4 1c             	add    esp,0x1c
 100293c:	6a 4e                	push   0x4e
 100293e:	8d 54 24 0a          	lea    edx,[esp+0xa]
 1002942:	52                   	push   edx
 1002943:	0f b6 c0             	movzx  eax,al
 1002946:	6b c0 4e             	imul   eax,eax,0x4e
 1002949:	03 05 f8 97 12 00    	add    eax,DWORD PTR ds:0x1297f8
 100294f:	50                   	push   eax
 1002950:	e8 2b 6e 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:421
    memcpy(&newNode,node,sizeof(struct pci_device_t));
 1002955:	83 c4 0c             	add    esp,0xc
 1002958:	6a 50                	push   0x50
 100295a:	ff b4 24 b8 00 00 00 	push   DWORD PTR [esp+0xb8]
 1002961:	8d 44 24 5c          	lea    eax,[esp+0x5c]
 1002965:	50                   	push   eax
 1002966:	e8 15 6e 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:422
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tbridge entry created\n");
 100296b:	83 c4 08             	add    esp,0x8
 100296e:	68 d5 42 04 01       	push   0x10442d5
 1002973:	68 00 01 00 00       	push   0x100
 1002978:	e8 8a 73 00 00       	call   1009d07 <printd>
 100297d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:438
//       checkBus(&newNode, bridge.secondaryBusNum);
//#ifndef DEBUG_NONE
//       printd(DEBUG_PCI_DISCOVERY,"Done checking bus %02X\n",bridge.secondaryBusNum);
//#endif
    }
}
 1002980:	81 c4 a0 00 00 00    	add    esp,0xa0
 1002986:	5b                   	pop    ebx
 1002987:	5e                   	pop    esi
 1002988:	5f                   	pop    edi
 1002989:	c3                   	ret    

0100298a <checkFunctions>:
checkFunctions():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:440

void checkFunctions(uint8_t bus, uint8_t device) {
 100298a:	55                   	push   ebp
 100298b:	57                   	push   edi
 100298c:	56                   	push   esi
 100298d:	53                   	push   ebx
 100298e:	83 ec 6c             	sub    esp,0x6c
 1002991:	0f b6 84 24 80 00 00 	movzx  eax,BYTE PTR [esp+0x80]
 1002998:	00 
 1002999:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
 100299d:	0f b6 ac 24 84 00 00 	movzx  ebp,BYTE PTR [esp+0x84]
 10029a4:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:443
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
 10029a5:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:445
    {
        getDeviceHeader(&funcDevice, bus, device, function);
 10029aa:	89 ea                	mov    edx,ebp
 10029ac:	0f b6 fa             	movzx  edi,dl
 10029af:	0f b6 f0             	movzx  esi,al
 10029b2:	0f b6 c3             	movzx  eax,bl
 10029b5:	50                   	push   eax
 10029b6:	57                   	push   edi
 10029b7:	56                   	push   esi
 10029b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
 10029bc:	50                   	push   eax
 10029bd:	e8 c1 f7 ff ff       	call   1002183 <getDeviceHeader>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:446
        if (funcDevice.vendor!=0xFFFF)
 10029c2:	83 c4 10             	add    esp,0x10
 10029c5:	66 83 7c 24 16 ff    	cmp    WORD PTR [esp+0x16],0xffff
 10029cb:	74 23                	je     10029f0 <checkFunctions+0x66>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:448
        {
            funcDevice.busNo=bus;
 10029cd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 10029d2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:449
            funcDevice.deviceNo=device;
 10029d6:	89 e8                	mov    eax,ebp
 10029d8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:450
            funcDevice.funcNo=function;
 10029dc:	88 5c 24 12          	mov    BYTE PTR [esp+0x12],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:451
            addFunction(&funcDevice);
 10029e0:	83 ec 0c             	sub    esp,0xc
 10029e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
 10029e7:	50                   	push   eax
 10029e8:	e8 3f fe ff ff       	call   100282c <addFunction>
 10029ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:443 (discriminator 2)
}

void checkFunctions(uint8_t bus, uint8_t device) {
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
 10029f0:	83 c3 01             	add    ebx,0x1
 10029f3:	83 fb 08             	cmp    ebx,0x8
 10029f6:	75 ba                	jne    10029b2 <checkFunctions+0x28>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:455
            funcDevice.funcNo=function;
            addFunction(&funcDevice);
        }
    }

 }
 10029f8:	83 c4 6c             	add    esp,0x6c
 10029fb:	5b                   	pop    ebx
 10029fc:	5e                   	pop    esi
 10029fd:	5f                   	pop    edi
 10029fe:	5d                   	pop    ebp
 10029ff:	c3                   	ret    

01002a00 <addDevice>:
addDevice():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:458

void addDevice(struct pci_device_t* node)
{
 1002a00:	53                   	push   ebx
 1002a01:	83 ec 14             	sub    esp,0x14
 1002a04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:460
#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\tFound device #%u on %02X:%02X:0, Ven# %04X Dev# %04X Cls# %02X MF=%u\n",kPCIDeviceCount, node->busNo, node->deviceNo, node->vendor, node->device, node->class, node->multiFunction);
 1002a08:	0f b6 43 04          	movzx  eax,BYTE PTR [ebx+0x4]
 1002a0c:	50                   	push   eax
 1002a0d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
 1002a10:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
 1002a14:	50                   	push   eax
 1002a15:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
 1002a19:	50                   	push   eax
 1002a1a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
 1002a1e:	50                   	push   eax
 1002a1f:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1002a22:	50                   	push   eax
 1002a23:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1002a2a:	50                   	push   eax
 1002a2b:	68 78 ab 02 01       	push   0x102ab78
 1002a30:	68 00 01 00 00       	push   0x100
 1002a35:	e8 cd 72 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:462
#endif
    memcpy(&kPCIDeviceHeaders[kPCIDeviceCount++],node,sizeof(struct pci_device_t));
 1002a3a:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1002a41:	8d 50 01             	lea    edx,[eax+0x1]
 1002a44:	88 15 ec 97 12 00    	mov    BYTE PTR ds:0x1297ec,dl
 1002a4a:	83 c4 2c             	add    esp,0x2c
 1002a4d:	6a 50                	push   0x50
 1002a4f:	53                   	push   ebx
 1002a50:	0f b6 c0             	movzx  eax,al
 1002a53:	8d 04 80             	lea    eax,[eax+eax*4]
 1002a56:	c1 e0 04             	shl    eax,0x4
 1002a59:	03 05 f4 97 12 00    	add    eax,DWORD PTR ds:0x1297f4
 1002a5f:	50                   	push   eax
 1002a60:	e8 1b 6d 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:463
    printd(DEBUG_PCI_DISCOVERY,"\tdevice entry created\n");
 1002a65:	83 c4 08             	add    esp,0x8
 1002a68:	68 ee 42 04 01       	push   0x10442ee
 1002a6d:	68 00 01 00 00       	push   0x100
 1002a72:	e8 90 72 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:464
}
 1002a77:	83 c4 18             	add    esp,0x18
 1002a7a:	5b                   	pop    ebx
 1002a7b:	c3                   	ret    

01002a7c <checkDevice>:
checkDevice():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:467

bool checkDevice(struct pci_device_t* node, uint8_t bus, uint8_t device)
{
 1002a7c:	57                   	push   edi
 1002a7d:	56                   	push   esi
 1002a7e:	53                   	push   ebx
 1002a7f:	83 ec 54             	sub    esp,0x54
 1002a82:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
 1002a86:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:471
    int func=0;
    struct pci_device_t newNode;

    memcpy(&newNode,node,sizeof(struct pci_device_t));
 1002a8a:	6a 50                	push   0x50
 1002a8c:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
 1002a90:	8d 7c 24 0c          	lea    edi,[esp+0xc]
 1002a94:	57                   	push   edi
 1002a95:	e8 e6 6c 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:472
    if (getDeviceHeader(&newNode, bus, device, 0))
 1002a9a:	0f b6 db             	movzx  ebx,bl
 1002a9d:	89 f0                	mov    eax,esi
 1002a9f:	0f b6 f0             	movzx  esi,al
 1002aa2:	6a 00                	push   0x0
 1002aa4:	53                   	push   ebx
 1002aa5:	56                   	push   esi
 1002aa6:	57                   	push   edi
 1002aa7:	e8 d7 f6 ff ff       	call   1002183 <getDeviceHeader>
 1002aac:	89 c7                	mov    edi,eax
 1002aae:	83 c4 20             	add    esp,0x20
 1002ab1:	84 c0                	test   al,al
 1002ab3:	74 4a                	je     1002aff <checkDevice+0x83>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:474
    {
        if (newNode.class!=6)
 1002ab5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
 1002aba:	74 12                	je     1002ace <checkDevice+0x52>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:476
        {
            addDevice(&newNode);
 1002abc:	83 ec 0c             	sub    esp,0xc
 1002abf:	8d 44 24 0c          	lea    eax,[esp+0xc]
 1002ac3:	50                   	push   eax
 1002ac4:	e8 37 ff ff ff       	call   1002a00 <addDevice>
 1002ac9:	83 c4 10             	add    esp,0x10
 1002acc:	eb 11                	jmp    1002adf <checkDevice+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:480
        }
        else
        {
            addBridge(&newNode, bus, device,func);
 1002ace:	6a 00                	push   0x0
 1002ad0:	53                   	push   ebx
 1002ad1:	56                   	push   esi
 1002ad2:	8d 44 24 0c          	lea    eax,[esp+0xc]
 1002ad6:	50                   	push   eax
 1002ad7:	e8 b9 fd ff ff       	call   1002895 <addBridge>
 1002adc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:483
        }
#ifndef DEBUG_NONE
        printd(DEBUG_PCI_DISCOVERY,"\tChecking functions\n",device);
 1002adf:	83 ec 04             	sub    esp,0x4
 1002ae2:	53                   	push   ebx
 1002ae3:	68 05 43 04 01       	push   0x1044305
 1002ae8:	68 00 01 00 00       	push   0x100
 1002aed:	e8 15 72 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:485
#endif
        checkFunctions(bus, device);
 1002af2:	83 c4 08             	add    esp,0x8
 1002af5:	53                   	push   ebx
 1002af6:	56                   	push   esi
 1002af7:	e8 8e fe ff ff       	call   100298a <checkFunctions>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:486
        return true;
 1002afc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:489
    }
    return false;
}
 1002aff:	89 f8                	mov    eax,edi
 1002b01:	83 c4 50             	add    esp,0x50
 1002b04:	5b                   	pop    ebx
 1002b05:	5e                   	pop    esi
 1002b06:	5f                   	pop    edi
 1002b07:	c3                   	ret    

01002b08 <checkBus>:
checkBus():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:491

void checkBus(struct pci_device_t* node, uint8_t bus) {
 1002b08:	57                   	push   edi
 1002b09:	56                   	push   esi
 1002b0a:	53                   	push   ebx
 1002b0b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 1002b0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:495
 uint8_t device;

#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\n");
 1002b13:	83 ec 08             	sub    esp,0x8
 1002b16:	68 7b 78 06 01       	push   0x106787b
 1002b1b:	68 00 01 00 00       	push   0x100
 1002b20:	e8 e2 71 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:496
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
 1002b25:	0f b6 f3             	movzx  esi,bl
 1002b28:	83 c4 0c             	add    esp,0xc
 1002b2b:	56                   	push   esi
 1002b2c:	68 1a 43 04 01       	push   0x104431a
 1002b31:	68 00 01 00 00       	push   0x100
 1002b36:	e8 cc 71 00 00       	call   1009d07 <printd>
 1002b3b:	83 c4 10             	add    esp,0x10
 1002b3e:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:508
        if ((kDebugLevel & DEBUG_PCI_DISCOVERY) == DEBUG_PCI_DISCOVERY)
        {
            //waitForKeyboardKey();
        }
#endif
        checkDevice(node, bus, device);
 1002b43:	83 ec 04             	sub    esp,0x4
 1002b46:	53                   	push   ebx
 1002b47:	56                   	push   esi
 1002b48:	57                   	push   edi
 1002b49:	e8 2e ff ff ff       	call   1002a7c <checkDevice>
 1002b4e:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:500
    printd(DEBUG_PCI_DISCOVERY,"\n");
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
 1002b51:	83 c4 10             	add    esp,0x10
 1002b54:	83 fb 20             	cmp    ebx,0x20
 1002b57:	75 ea                	jne    1002b43 <checkBus+0x3b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:511
        }
#endif
        checkDevice(node, bus, device);
     }
 }
}
 1002b59:	5b                   	pop    ebx
 1002b5a:	5e                   	pop    esi
 1002b5b:	5f                   	pop    edi
 1002b5c:	c3                   	ret    

01002b5d <pciInitialize>:
pciInitialize():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:514
    
 void pciInitialize()
 {
 1002b5d:	55                   	push   ebp
 1002b5e:	57                   	push   edi
 1002b5f:	56                   	push   esi
 1002b60:	53                   	push   ebx
 1002b61:	81 ec c4 00 00 00    	sub    esp,0xc4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:519
    //Iterate Busses/Slots
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
 1002b67:	c6 05 ef 97 12 00 00 	mov    BYTE PTR ds:0x1297ef,0x0
 1002b6e:	c6 05 ee 97 12 00 00 	mov    BYTE PTR ds:0x1297ee,0x0
 1002b75:	c6 05 ed 97 12 00 00 	mov    BYTE PTR ds:0x1297ed,0x0
 1002b7c:	c6 05 ec 97 12 00 00 	mov    BYTE PTR ds:0x1297ec,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:520
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
 1002b83:	68 2d 43 04 01       	push   0x104432d
 1002b88:	68 00 01 00 00       	push   0x100
 1002b8d:	e8 75 71 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:521
     for (currBus=0;currBus<50;currBus++)
 1002b92:	c7 05 6c 9c 07 01 00 	mov    DWORD PTR ds:0x1079c6c,0x0
 1002b99:	00 00 00 
 1002b9c:	83 c4 10             	add    esp,0x10
 1002b9f:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:529
         {
            //if device found print it
            currFunc=0;
            prevDev=0;
            printd(DEBUG_PCI_DISCOVERY,"Current bus=%u, slot=%u\n",currBus,currSlot);
            if (getDeviceHeader(&device, currBus, currSlot, currFunc)==true)
 1002ba6:	8d 6c 24 60          	lea    ebp,[esp+0x60]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:547
                    addDevice(&device);
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
                {
                    //printd(DEBUG_PCI_DISCOVERY,"Current function=%u\n",currFunc);
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
 1002baa:	8d 74 24 10          	lea    esi,[esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:523

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
     {
         for (currSlot=0;currSlot<32;currSlot++)
 1002bae:	c7 05 68 9c 07 01 00 	mov    DWORD PTR ds:0x1079c68,0x0
 1002bb5:	00 00 00 
 1002bb8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:526
         {
            //if device found print it
            currFunc=0;
 1002bbd:	c7 05 64 9c 07 01 00 	mov    DWORD PTR ds:0x1079c64,0x0
 1002bc4:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:528
            prevDev=0;
            printd(DEBUG_PCI_DISCOVERY,"Current bus=%u, slot=%u\n",currBus,currSlot);
 1002bc7:	50                   	push   eax
 1002bc8:	ff 35 6c 9c 07 01    	push   DWORD PTR ds:0x1079c6c
 1002bce:	68 4b 43 04 01       	push   0x104434b
 1002bd3:	68 00 01 00 00       	push   0x100
 1002bd8:	e8 2a 71 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:529
            if (getDeviceHeader(&device, currBus, currSlot, currFunc)==true)
 1002bdd:	0f b6 05 64 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c64
 1002be4:	50                   	push   eax
 1002be5:	0f b6 05 68 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c68
 1002bec:	50                   	push   eax
 1002bed:	0f b6 05 6c 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c6c
 1002bf4:	50                   	push   eax
 1002bf5:	55                   	push   ebp
 1002bf6:	e8 88 f5 ff ff       	call   1002183 <getDeviceHeader>
 1002bfb:	83 c4 20             	add    esp,0x20
 1002bfe:	84 c0                	test   al,al
 1002c00:	0f 84 e6 00 00 00    	je     1002cec <pciInitialize+0x18f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:531
            {
                if (prevBus!=currBus)
 1002c06:	a1 6c 9c 07 01       	mov    eax,ds:0x1079c6c
 1002c0b:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
 1002c10:	39 c2                	cmp    edx,eax
 1002c12:	74 0c                	je     1002c20 <pciInitialize+0xc3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:533
                {
                    prevBus=currBus;
 1002c14:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:534
                    kPCIBusCount++;
 1002c19:	80 05 ef 97 12 00 01 	add    BYTE PTR ds:0x1297ef,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:537
                }
                //printPCIHeader(&device);
                if (device.class==0x06)
 1002c20:	83 7c 24 70 06       	cmp    DWORD PTR [esp+0x70],0x6
 1002c25:	75 1f                	jne    1002c46 <pciInitialize+0xe9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:539
                {
                    addBridge(&device, currBus, currSlot, currFunc);
 1002c27:	0f b6 15 64 9c 07 01 	movzx  edx,BYTE PTR ds:0x1079c64
 1002c2e:	52                   	push   edx
 1002c2f:	0f b6 15 68 9c 07 01 	movzx  edx,BYTE PTR ds:0x1079c68
 1002c36:	52                   	push   edx
 1002c37:	0f b6 c0             	movzx  eax,al
 1002c3a:	50                   	push   eax
 1002c3b:	55                   	push   ebp
 1002c3c:	e8 54 fc ff ff       	call   1002895 <addBridge>
 1002c41:	83 c4 10             	add    esp,0x10
 1002c44:	eb 0c                	jmp    1002c52 <pciInitialize+0xf5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:542
                }
                else
                    addDevice(&device);
 1002c46:	83 ec 0c             	sub    esp,0xc
 1002c49:	55                   	push   ebp
 1002c4a:	e8 b1 fd ff ff       	call   1002a00 <addDevice>
 1002c4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:544
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
 1002c52:	c7 05 64 9c 07 01 00 	mov    DWORD PTR ds:0x1079c64,0x0
 1002c59:	00 00 00 
 1002c5c:	b8 00 00 00 00       	mov    eax,0x0
 1002c61:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:547
                {
                    //printd(DEBUG_PCI_DISCOVERY,"Current function=%u\n",currFunc);
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
 1002c66:	0f b6 c0             	movzx  eax,al
 1002c69:	50                   	push   eax
 1002c6a:	0f b6 05 68 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c68
 1002c71:	50                   	push   eax
 1002c72:	0f b6 05 6c 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c6c
 1002c79:	50                   	push   eax
 1002c7a:	56                   	push   esi
 1002c7b:	e8 03 f5 ff ff       	call   1002183 <getDeviceHeader>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:548
                    if (funcDevice.vendor!=0xFFFF)
 1002c80:	83 c4 10             	add    esp,0x10
 1002c83:	66 83 7c 24 16 ff    	cmp    WORD PTR [esp+0x16],0xffff
 1002c89:	74 4b                	je     1002cd6 <pciInitialize+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:549
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
 1002c8b:	0f b7 5c 24 18       	movzx  ebx,WORD PTR [esp+0x18]
 1002c90:	66 39 5c 24 68       	cmp    WORD PTR [esp+0x68],bx
 1002c95:	74 3f                	je     1002cd6 <pciInitialize+0x179>
 1002c97:	66 39 fb             	cmp    bx,di
 1002c9a:	74 3a                	je     1002cd6 <pciInitialize+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:553
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
                            if (funcDevice.class == 0x06)
 1002c9c:	83 7c 24 20 06       	cmp    DWORD PTR [esp+0x20],0x6
 1002ca1:	75 25                	jne    1002cc8 <pciInitialize+0x16b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:554
                                addBridge(&funcDevice, currBus, currSlot, currFunc);
 1002ca3:	0f b6 05 64 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c64
 1002caa:	50                   	push   eax
 1002cab:	0f b6 05 68 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c68
 1002cb2:	50                   	push   eax
 1002cb3:	0f b6 05 6c 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c6c
 1002cba:	50                   	push   eax
 1002cbb:	56                   	push   esi
 1002cbc:	e8 d4 fb ff ff       	call   1002895 <addBridge>
 1002cc1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:552
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
                    if (funcDevice.vendor!=0xFFFF)
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
 1002cc4:	89 df                	mov    edi,ebx
 1002cc6:	eb 0e                	jmp    1002cd6 <pciInitialize+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:556
                            if (funcDevice.class == 0x06)
                                addBridge(&funcDevice, currBus, currSlot, currFunc);
                            else
                                addFunction(&funcDevice);
 1002cc8:	83 ec 0c             	sub    esp,0xc
 1002ccb:	56                   	push   esi
 1002ccc:	e8 5b fb ff ff       	call   100282c <addFunction>
 1002cd1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:552
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
                    if (funcDevice.vendor!=0xFFFF)
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
 1002cd4:	89 df                	mov    edi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:544 (discriminator 2)
                    addBridge(&device, currBus, currSlot, currFunc);
                }
                else
                    addDevice(&device);
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
 1002cd6:	a1 64 9c 07 01       	mov    eax,ds:0x1079c64
 1002cdb:	83 c0 01             	add    eax,0x1
 1002cde:	a3 64 9c 07 01       	mov    ds:0x1079c64,eax
 1002ce3:	83 f8 07             	cmp    eax,0x7
 1002ce6:	0f 8e 7a ff ff ff    	jle    1002c66 <pciInitialize+0x109>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:523 (discriminator 2)

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
     {
         for (currSlot=0;currSlot<32;currSlot++)
 1002cec:	a1 68 9c 07 01       	mov    eax,ds:0x1079c68
 1002cf1:	83 c0 01             	add    eax,0x1
 1002cf4:	a3 68 9c 07 01       	mov    ds:0x1079c68,eax
 1002cf9:	83 f8 1f             	cmp    eax,0x1f
 1002cfc:	0f 8e bb fe ff ff    	jle    1002bbd <pciInitialize+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:521 (discriminator 2)
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
 1002d02:	a1 6c 9c 07 01       	mov    eax,ds:0x1079c6c
 1002d07:	83 c0 01             	add    eax,0x1
 1002d0a:	a3 6c 9c 07 01       	mov    ds:0x1079c6c,eax
 1002d0f:	83 f8 31             	cmp    eax,0x31
 1002d12:	0f 8e 96 fe ff ff    	jle    1002bae <pciInitialize+0x51>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:563
                    }
            }
 
        }
     }
 1002d18:	81 c4 bc 00 00 00    	add    esp,0xbc
 1002d1e:	5b                   	pop    ebx
 1002d1f:	5e                   	pop    esi
 1002d20:	5f                   	pop    edi
 1002d21:	5d                   	pop    ebp
 1002d22:	c3                   	ret    
 1002d23:	90                   	nop

01002d24 <update_cursor>:
update_cursor():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:26
KERNEL_DATA_SECTION int8_t savedPosPointer=0;
KERNEL_DATA_SECTION uint8_t kTerminalHeight;

void update_cursor()
 {
    unsigned short position=(terminal_row*VGA_WIDTH) + terminal_column;
 1002d24:	8b 0d 00 00 12 00    	mov    ecx,DWORD PTR ds:0x120000
 1002d2a:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
 1002d2d:	c1 e1 04             	shl    ecx,0x4
 1002d30:	66 03 0d 04 00 12 00 	add    cx,WORD PTR ds:0x120004
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1002d37:	ba d4 03 00 00       	mov    edx,0x3d4
 1002d3c:	b8 0f 00 00 00       	mov    eax,0xf
 1002d41:	ee                   	out    dx,al
 1002d42:	ba d5 03 00 00       	mov    edx,0x3d5
 1002d47:	89 c8                	mov    eax,ecx
 1002d49:	ee                   	out    dx,al
 1002d4a:	ba d4 03 00 00       	mov    edx,0x3d4
 1002d4f:	b8 0e 00 00 00       	mov    eax,0xe
 1002d54:	ee                   	out    dx,al
 1002d55:	89 c8                	mov    eax,ecx
 1002d57:	66 c1 e8 08          	shr    ax,0x8
 1002d5b:	ba d5 03 00 00       	mov    edx,0x3d5
 1002d60:	ee                   	out    dx,al
 1002d61:	c3                   	ret    

01002d62 <make_color>:
make_color():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:38
    outb(0x3D5, (unsigned char )((position>>8)&0xFF));
    //Move the cursor in the bios data area
 }

uint8_t make_color(enum vga_color fg, enum vga_color bg) {
        return fg | bg << 4;
 1002d62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
 1002d67:	c1 e0 04             	shl    eax,0x4
 1002d6a:	0a 44 24 04          	or     al,BYTE PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:39
}
 1002d6e:	c3                   	ret    

01002d6f <make_vgaentry>:
make_vgaentry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:44

uint16_t make_vgaentry(char c, uint8_t color) {
        uint16_t c16 = c;
        uint16_t color16 = color;
        return c16 | color16 << 8;
 1002d6f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
 1002d74:	c1 e0 08             	shl    eax,0x8
 1002d77:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
 1002d7d:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:45
}
 1002d7f:	c3                   	ret    

01002d80 <terminal_setcolor>:
terminal_setcolor():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:49


void terminal_setcolor(uint8_t color) {
        terminal_color = color;
 1002d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1002d84:	a2 08 00 12 00       	mov    ds:0x120008,al
 1002d89:	c3                   	ret    

01002d8a <terminal_putentryat>:
terminal_putentryat():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:52
}

void terminal_putentryat(char c, uint8_t color, size_t x, size_t y) {
 1002d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:54
    const size_t index = y * VGA_WIDTH + x;
        terminal_buffer[index] = make_vgaentry(c, color);
 1002d8e:	8d 04 80             	lea    eax,[eax+eax*4]
 1002d91:	c1 e0 04             	shl    eax,0x4
 1002d94:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
 1002d98:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
 1002d9d:	c1 e2 08             	shl    edx,0x8
 1002da0:	66 0f be 4c 24 04    	movsx  cx,BYTE PTR [esp+0x4]
 1002da6:	09 ca                	or     edx,ecx
 1002da8:	8b 0d 0c 00 12 00    	mov    ecx,DWORD PTR ds:0x12000c
 1002dae:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
 1002db2:	c3                   	ret    

01002db3 <cursorSavePosition>:
cursorSavePosition():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:59
}

void cursorSavePosition()
{
    if (savedPosPointer < 10)
 1002db3:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
 1002dba:	3c 09                	cmp    al,0x9
 1002dbc:	7f 23                	jg     1002de1 <cursorSavePosition+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:61
    {
        savedPosX[++savedPosPointer] = terminal_column;
 1002dbe:	83 c0 01             	add    eax,0x1
 1002dc1:	a2 26 00 12 00       	mov    ds:0x120026,al
 1002dc6:	0f be c0             	movsx  eax,al
 1002dc9:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
 1002dcf:	88 90 10 00 12 00    	mov    BYTE PTR [eax+0x120010],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:62
        savedPosY[savedPosPointer] = terminal_row;
 1002dd5:	8b 15 00 00 12 00    	mov    edx,DWORD PTR ds:0x120000
 1002ddb:	88 90 1c 00 12 00    	mov    BYTE PTR [eax+0x12001c],dl
 1002de1:	f3 c3                	repz ret 

01002de3 <cursorRestorePosition>:
cursorRestorePosition():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:68
    }
}

void cursorRestorePosition()
{
    if (savedPosPointer > 0)
 1002de3:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
 1002dea:	84 c0                	test   al,al
 1002dec:	7e 29                	jle    1002e17 <cursorRestorePosition+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:70
    {
        terminal_column = savedPosX[savedPosPointer];
 1002dee:	0f be d0             	movsx  edx,al
 1002df1:	0f b6 8a 10 00 12 00 	movzx  ecx,BYTE PTR [edx+0x120010]
 1002df8:	89 0d 04 00 12 00    	mov    DWORD PTR ds:0x120004,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:71
        terminal_row = savedPosY[savedPosPointer--];
 1002dfe:	83 e8 01             	sub    eax,0x1
 1002e01:	a2 26 00 12 00       	mov    ds:0x120026,al
 1002e06:	0f b6 82 1c 00 12 00 	movzx  eax,BYTE PTR [edx+0x12001c]
 1002e0d:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:72
        update_cursor();
 1002e12:	e8 0d ff ff ff       	call   1002d24 <update_cursor>
 1002e17:	f3 c3                	repz ret 

01002e19 <terminal_clear>:
terminal_clear():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:77
    }
}

void terminal_clear()
{
 1002e19:	56                   	push   esi
 1002e1a:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:79
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
 1002e1b:	ba 00 00 00 00       	mov    edx,0x0
 1002e20:	be 00 00 00 00       	mov    esi,0x0
 1002e25:	80 3d 27 00 12 00 00 	cmp    BYTE PTR ds:0x120027,0x0
 1002e2c:	75 30                	jne    1002e5e <terminal_clear+0x45>
 1002e2e:	eb 36                	jmp    1002e66 <terminal_clear+0x4d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:82 (discriminator 3)
                for (size_t x = 0; x < VGA_WIDTH; x++) {
                        const size_t index = y * VGA_WIDTH + x;
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
 1002e30:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
 1002e37:	c1 e0 08             	shl    eax,0x8
 1002e3a:	83 c8 20             	or     eax,0x20
 1002e3d:	8b 0d 0c 00 12 00    	mov    ecx,DWORD PTR ds:0x12000c
 1002e43:	66 89 04 11          	mov    WORD PTR [ecx+edx*1],ax
 1002e47:	83 c2 02             	add    edx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:80 (discriminator 3)

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
                for (size_t x = 0; x < VGA_WIDTH; x++) {
 1002e4a:	39 d3                	cmp    ebx,edx
 1002e4c:	75 e2                	jne    1002e30 <terminal_clear+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:79 (discriminator 2)
}

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
 1002e4e:	83 c6 01             	add    esi,0x1
 1002e51:	89 da                	mov    edx,ebx
 1002e53:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
 1002e5a:	39 f0                	cmp    eax,esi
 1002e5c:	76 08                	jbe    1002e66 <terminal_clear+0x4d>
 1002e5e:	8d 9a a0 00 00 00    	lea    ebx,[edx+0xa0]
 1002e64:	eb ca                	jmp    1002e30 <terminal_clear+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:85
                for (size_t x = 0; x < VGA_WIDTH; x++) {
                        const size_t index = y * VGA_WIDTH + x;
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
                }
        }
    terminal_column=0;
 1002e66:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
 1002e6d:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:86
    terminal_row=0;
 1002e70:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
 1002e77:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:87
    update_cursor();
 1002e7a:	e8 a5 fe ff ff       	call   1002d24 <update_cursor>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:88
}
 1002e7f:	5b                   	pop    ebx
 1002e80:	5e                   	pop    esi
 1002e81:	c3                   	ret    

01002e82 <terminal_clear_line>:
terminal_clear_line():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:91

void terminal_clear_line(unsigned lineNo)
{
 1002e82:	53                   	push   ebx
 1002e83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:92
    if (lineNo>SYS_VGA_HEIGHT-1)
 1002e87:	83 f8 31             	cmp    eax,0x31
 1002e8a:	77 2a                	ja     1002eb6 <terminal_clear_line+0x34>
 1002e8c:	8d 14 80             	lea    edx,[eax+eax*4]
 1002e8f:	c1 e2 05             	shl    edx,0x5
 1002e92:	8d 9a a0 00 00 00    	lea    ebx,[edx+0xa0]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:97 (discriminator 3)
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
 1002e98:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
 1002e9f:	c1 e0 08             	shl    eax,0x8
 1002ea2:	83 c8 20             	or     eax,0x20
 1002ea5:	8b 0d 0c 00 12 00    	mov    ecx,DWORD PTR ds:0x12000c
 1002eab:	66 89 04 11          	mov    WORD PTR [ecx+edx*1],ax
 1002eaf:	83 c2 02             	add    edx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:94 (discriminator 3)

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
 1002eb2:	39 da                	cmp    edx,ebx
 1002eb4:	75 e2                	jne    1002e98 <terminal_clear_line+0x16>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:99
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
    }
}
 1002eb6:	5b                   	pop    ebx
 1002eb7:	c3                   	ret    

01002eb8 <terminal_copyline>:
terminal_copyline():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:102

void terminal_copyline(unsigned dstLine, unsigned srcLine)
{
 1002eb8:	83 ec 10             	sub    esp,0x10
 1002ebb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
 1002ebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:107
    unsigned rowBytes = VGA_WIDTH*2;
    uintptr_t dest=(uintptr_t)TEXTMODE_MEMORY_START+(dstLine*rowBytes);
    uintptr_t src=(uintptr_t)TEXTMODE_MEMORY_START+(srcLine*rowBytes);
    
    memcpy((void*)dest,(void*)src,rowBytes);
 1002ec3:	68 a0 00 00 00       	push   0xa0
 1002ec8:	8d 04 80             	lea    eax,[eax+eax*4]
 1002ecb:	c1 e0 05             	shl    eax,0x5
 1002ece:	05 00 80 0b 00       	add    eax,0xb8000
 1002ed3:	50                   	push   eax
 1002ed4:	8d 04 92             	lea    eax,[edx+edx*4]
 1002ed7:	c1 e0 05             	shl    eax,0x5
 1002eda:	05 00 80 0b 00       	add    eax,0xb8000
 1002edf:	50                   	push   eax
 1002ee0:	e8 9b 68 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:108
}
 1002ee5:	83 c4 1c             	add    esp,0x1c
 1002ee8:	c3                   	ret    

01002ee9 <terminal_putchar>:
terminal_putchar():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:110

void terminal_putchar(char c) {
 1002ee9:	53                   	push   ebx
 1002eea:	83 ec 08             	sub    esp,0x8
 1002eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:111
    if (c=='\n')
 1002ef1:	3c 0a                	cmp    al,0xa
 1002ef3:	75 16                	jne    1002f0b <terminal_putchar+0x22>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:113
    {
            terminal_column = 0;
 1002ef5:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
 1002efc:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:114
            terminal_row += 1;
 1002eff:	83 05 00 00 12 00 01 	add    DWORD PTR ds:0x120000,0x1
 1002f06:	e9 d8 00 00 00       	jmp    1002fe3 <terminal_putchar+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:116
    }
    else if (c=='\b')
 1002f0b:	3c 08                	cmp    al,0x8
 1002f0d:	75 48                	jne    1002f57 <terminal_putchar+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:118
    {
        if (terminal_column > 1)
 1002f0f:	a1 04 00 12 00       	mov    eax,ds:0x120004
 1002f14:	83 f8 01             	cmp    eax,0x1
 1002f17:	76 0a                	jbe    1002f23 <terminal_putchar+0x3a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:119
            terminal_column--;
 1002f19:	83 e8 01             	sub    eax,0x1
 1002f1c:	a3 04 00 12 00       	mov    ds:0x120004,eax
 1002f21:	eb 11                	jmp    1002f34 <terminal_putchar+0x4b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:122
        else
        {
            terminal_row--;
 1002f23:	83 2d 00 00 12 00 01 	sub    DWORD PTR ds:0x120000,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:123
            terminal_column=VGA_WIDTH;
 1002f2a:	c7 05 04 00 12 00 50 	mov    DWORD PTR ds:0x120004,0x50
 1002f31:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:125
        }
        terminal_putentryat(' ', terminal_color, terminal_column, terminal_row);
 1002f34:	ff 35 00 00 12 00    	push   DWORD PTR ds:0x120000
 1002f3a:	ff 35 04 00 12 00    	push   DWORD PTR ds:0x120004
 1002f40:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
 1002f47:	50                   	push   eax
 1002f48:	6a 20                	push   0x20
 1002f4a:	e8 3b fe ff ff       	call   1002d8a <terminal_putentryat>
 1002f4f:	83 c4 10             	add    esp,0x10
 1002f52:	e9 8c 00 00 00       	jmp    1002fe3 <terminal_putchar+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:128
        
    }
    else if (c=='\t')
 1002f57:	3c 09                	cmp    al,0x9
 1002f59:	75 3b                	jne    1002f96 <terminal_putchar+0xad>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:130
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
 1002f5b:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
 1002f61:	ba cd cc cc cc       	mov    edx,0xcccccccd
 1002f66:	89 c8                	mov    eax,ecx
 1002f68:	f7 e2                	mul    edx
 1002f6a:	c1 ea 02             	shr    edx,0x2
 1002f6d:	8d 5c 92 05          	lea    ebx,[edx+edx*4+0x5]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:132
        if (goTo==terminal_column)
            goTo=SCREEN_SPACES_PER_TAB;
 1002f71:	39 d9                	cmp    ecx,ebx
 1002f73:	b8 05 00 00 00       	mov    eax,0x5
 1002f78:	0f 44 d8             	cmove  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:134
        
        while (terminal_column < goTo)
 1002f7b:	39 d9                	cmp    ecx,ebx
 1002f7d:	73 64                	jae    1002fe3 <terminal_putchar+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:135
            terminal_putchar(' ');;
 1002f7f:	83 ec 0c             	sub    esp,0xc
 1002f82:	6a 20                	push   0x20
 1002f84:	e8 60 ff ff ff       	call   1002ee9 <terminal_putchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:134
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
        if (goTo==terminal_column)
            goTo=SCREEN_SPACES_PER_TAB;
        
        while (terminal_column < goTo)
 1002f89:	83 c4 10             	add    esp,0x10
 1002f8c:	3b 1d 04 00 12 00    	cmp    ebx,DWORD PTR ds:0x120004
 1002f92:	77 eb                	ja     1002f7f <terminal_putchar+0x96>
 1002f94:	eb 4d                	jmp    1002fe3 <terminal_putchar+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:141
    
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
 1002f96:	3c 0d                	cmp    al,0xd
 1002f98:	0f 84 86 00 00 00    	je     1003024 <terminal_putchar+0x13b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:146
        return;

        else
        {
                terminal_putentryat(c, terminal_color, terminal_column, terminal_row);
 1002f9e:	ff 35 00 00 12 00    	push   DWORD PTR ds:0x120000
 1002fa4:	ff 35 04 00 12 00    	push   DWORD PTR ds:0x120004
 1002faa:	0f b6 15 08 00 12 00 	movzx  edx,BYTE PTR ds:0x120008
 1002fb1:	52                   	push   edx
 1002fb2:	0f be c0             	movsx  eax,al
 1002fb5:	50                   	push   eax
 1002fb6:	e8 cf fd ff ff       	call   1002d8a <terminal_putentryat>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:147
                if (++terminal_column == VGA_WIDTH) {
 1002fbb:	a1 04 00 12 00       	mov    eax,ds:0x120004
 1002fc0:	83 c0 01             	add    eax,0x1
 1002fc3:	83 c4 10             	add    esp,0x10
 1002fc6:	83 f8 50             	cmp    eax,0x50
 1002fc9:	74 07                	je     1002fd2 <terminal_putchar+0xe9>
 1002fcb:	a3 04 00 12 00       	mov    ds:0x120004,eax
 1002fd0:	eb 11                	jmp    1002fe3 <terminal_putchar+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:148
                        terminal_column = 0;
 1002fd2:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
 1002fd9:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:149
                        terminal_row++;
 1002fdc:	83 05 00 00 12 00 01 	add    DWORD PTR ds:0x120000,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:152
                }
        }
    if (terminal_row == kTerminalHeight)
 1002fe3:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
 1002fea:	3b 05 00 00 12 00    	cmp    eax,DWORD PTR ds:0x120000
 1002ff0:	75 2d                	jne    100301f <terminal_putchar+0x136>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:154 (discriminator 1)
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
 1002ff2:	85 c0                	test   eax,eax
 1002ff4:	74 22                	je     1003018 <terminal_putchar+0x12f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:154
 1002ff6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:155 (discriminator 3)
            terminal_copyline(row, row+1);
 1002ffb:	8d 58 01             	lea    ebx,[eax+0x1]
 1002ffe:	83 ec 08             	sub    esp,0x8
 1003001:	53                   	push   ebx
 1003002:	50                   	push   eax
 1003003:	e8 b0 fe ff ff       	call   1002eb8 <terminal_copyline>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:154 (discriminator 3)
                        terminal_row++;
                }
        }
    if (terminal_row == kTerminalHeight)
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
 1003008:	89 d8                	mov    eax,ebx
 100300a:	0f b6 15 27 00 12 00 	movzx  edx,BYTE PTR ds:0x120027
 1003011:	83 c4 10             	add    esp,0x10
 1003014:	39 da                	cmp    edx,ebx
 1003016:	77 e3                	ja     1002ffb <terminal_putchar+0x112>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:157
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
 1003018:	83 2d 00 00 12 00 01 	sub    DWORD PTR ds:0x120000,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:159
    }
    update_cursor();
 100301f:	e8 00 fd ff ff       	call   1002d24 <update_cursor>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:160
}
 1003024:	83 c4 08             	add    esp,0x8
 1003027:	5b                   	pop    ebx
 1003028:	c3                   	ret    

01003029 <cursorUpdateBiosCursor>:
cursorUpdateBiosCursor():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:165

void cursorUpdateBiosCursor()
{
    uint8_t* bda=(uint8_t*)0x450;
    *bda=(uint8_t)(terminal_column & 0xFF);
 1003029:	a1 04 00 12 00       	mov    eax,ds:0x120004
 100302e:	a2 50 04 00 00       	mov    ds:0x450,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:167
    bda++;
    *bda=(uint8_t)((terminal_row+3) & 0xFF);
 1003033:	0f b6 05 00 00 12 00 	movzx  eax,BYTE PTR ds:0x120000
 100303a:	83 c0 03             	add    eax,0x3
 100303d:	a2 51 04 00 00       	mov    ds:0x451,al
 1003042:	c3                   	ret    

01003043 <cursorMoveTo>:
cursorMoveTo():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:172
}

void cursorMoveTo(uint8_t x, uint8_t y)
{
    terminal_row = y;
 1003043:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
 1003048:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:173
    terminal_column = x;
 100304d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
 1003052:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:174
    update_cursor();
 1003057:	e8 c8 fc ff ff       	call   1002d24 <update_cursor>
 100305c:	f3 c3                	repz ret 

0100305e <cursorMoveToX>:
cursorMoveToX():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:179
}

void cursorMoveToX(uint8_t x)
{
    terminal_column = x;
 100305e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
 1003063:	a3 04 00 12 00       	mov    ds:0x120004,eax
 1003068:	c3                   	ret    

01003069 <cursorMoveToY>:
cursorMoveToY():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:184
}

void cursorMoveToY(uint8_t y)
{
    terminal_row = y;
 1003069:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
 100306e:	a3 00 00 12 00       	mov    ds:0x120000,eax
 1003073:	c3                   	ret    

01003074 <cursorGetPosX>:
cursorGetPosX():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:190
}

uint8_t cursorGetPosX()
{
    return terminal_column;
}
 1003074:	0f b6 05 04 00 12 00 	movzx  eax,BYTE PTR ds:0x120004
 100307b:	c3                   	ret    

0100307c <cursorGetMaxX>:
cursorGetMaxX():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:194
int cursorGetMaxX()
{
    return VGA_WIDTH;
}
 100307c:	b8 50 00 00 00       	mov    eax,0x50
 1003081:	c3                   	ret    

01003082 <cursorGetMaxY>:
cursorGetMaxY():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:198

int cursorGetMaxY()
{
    return kTerminalHeight;
 1003082:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:199
}
 1003089:	c3                   	ret    

0100308a <displayGetMaxXY>:
displayGetMaxXY():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:203

void displayGetMaxXY(int* maxX, int* maxY)
{
    *maxX=VGA_WIDTH;
 100308a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 100308e:	c7 00 50 00 00 00    	mov    DWORD PTR [eax],0x50
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:204
    *maxY=kTerminalHeight;
 1003094:	0f b6 15 27 00 12 00 	movzx  edx,BYTE PTR ds:0x120027
 100309b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100309f:	89 10                	mov    DWORD PTR [eax],edx
 10030a1:	c3                   	ret    

010030a2 <cursorGetPosY>:
cursorGetPosY():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:211
}

uint8_t cursorGetPosY()
{
    return terminal_row;
}
 10030a2:	0f b6 05 00 00 12 00 	movzx  eax,BYTE PTR ds:0x120000
 10030a9:	c3                   	ret    

010030aa <kTermPrint>:
kTermPrint():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:213

void kTermPrint(const char* data) {
 10030aa:	56                   	push   esi
 10030ab:	53                   	push   ebx
 10030ac:	83 ec 10             	sub    esp,0x10
 10030af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:214
        size_t datalen = strlen(data);
 10030b3:	56                   	push   esi
 10030b4:	e8 53 6d 00 00       	call   1009e0c <strlen>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:215
        for (size_t i = 0; i < datalen; i++)
 10030b9:	83 c4 10             	add    esp,0x10
 10030bc:	85 c0                	test   eax,eax
 10030be:	74 1a                	je     10030da <kTermPrint+0x30>
 10030c0:	89 f3                	mov    ebx,esi
 10030c2:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:216 (discriminator 3)
                terminal_putchar(data[i]);
 10030c4:	83 ec 0c             	sub    esp,0xc
 10030c7:	0f be 13             	movsx  edx,BYTE PTR [ebx]
 10030ca:	52                   	push   edx
 10030cb:	e8 19 fe ff ff       	call   1002ee9 <terminal_putchar>
 10030d0:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:215 (discriminator 3)
    return terminal_row;
}

void kTermPrint(const char* data) {
        size_t datalen = strlen(data);
        for (size_t i = 0; i < datalen; i++)
 10030d3:	83 c4 10             	add    esp,0x10
 10030d6:	39 f3                	cmp    ebx,esi
 10030d8:	75 ea                	jne    10030c4 <kTermPrint+0x1a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:217
                terminal_putchar(data[i]);
}
 10030da:	83 c4 04             	add    esp,0x4
 10030dd:	5b                   	pop    ebx
 10030de:	5e                   	pop    esi
 10030df:	c3                   	ret    

010030e0 <kTermInit>:
kTermInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:221


void kTermInit() {
    kTerminalHeight=SYS_VGA_HEIGHT;
 10030e0:	c6 05 27 00 12 00 32 	mov    BYTE PTR ds:0x120027,0x32
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:222
    terminal_row = 0;
 10030e7:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
 10030ee:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:223
    terminal_column = 0;
 10030f1:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
 10030f8:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:224
    terminal_color = make_color(COLOR_LIGHT_BROWN, COLOR_BLACK);
 10030fb:	c6 05 08 00 12 00 0e 	mov    BYTE PTR ds:0x120008,0xe
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:225
    terminal_buffer = (uint16_t*) TEXTMODE_MEMORY_START;
 1003102:	c7 05 0c 00 12 00 00 	mov    DWORD PTR ds:0x12000c,0xb8000
 1003109:	80 0b 00 
 100310c:	c3                   	ret    

0100310d <puts>:
puts():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:230
    //terminal_clear();
}

void puts(char* in)
{
 100310d:	53                   	push   ebx
 100310e:	83 ec 08             	sub    esp,0x8
 1003111:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:231
    while (*in>'\0')
 1003115:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1003118:	84 c0                	test   al,al
 100311a:	7e 19                	jle    1003135 <puts+0x28>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:233
    {
        terminal_putchar(*in++);
 100311c:	83 c3 01             	add    ebx,0x1
 100311f:	83 ec 0c             	sub    esp,0xc
 1003122:	0f be c0             	movsx  eax,al
 1003125:	50                   	push   eax
 1003126:	e8 be fd ff ff       	call   1002ee9 <terminal_putchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:231
    //terminal_clear();
}

void puts(char* in)
{
    while (*in>'\0')
 100312b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 100312e:	83 c4 10             	add    esp,0x10
 1003131:	84 c0                	test   al,al
 1003133:	7f e7                	jg     100311c <puts+0xf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:235
    {
        terminal_putchar(*in++);
    }
}
 1003135:	83 c4 08             	add    esp,0x8
 1003138:	5b                   	pop    ebx
 1003139:	c3                   	ret    

0100313a <putc>:
putc():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:238

void putc(char c)
{
 100313a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:239
    terminal_putchar(c);
 100313d:	0f be 44 24 1c       	movsx  eax,BYTE PTR [esp+0x1c]
 1003142:	50                   	push   eax
 1003143:	e8 a1 fd ff ff       	call   1002ee9 <terminal_putchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:240
 1003148:	83 c4 1c             	add    esp,0x1c
 100314b:	c3                   	ret    

0100314c <keyboardGetKeyFromBuffer>:
keyboardGetKeyFromBuffer():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:20
//Base moves when a key is taken from the buffer
uint8_t keyboardGetKeyFromBuffer()
{
    char lTemp=0;
    //If top > buffer address, there are new characters to be processed
    if (kKbdBuffCurrTop>(char*)KEYBOARD_BUFFER_ADDRESS)
 100314c:	8b 15 60 99 12 00    	mov    edx,DWORD PTR ds:0x129960
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:18
//Get a key from the keyboard buffer
//Curr moves when a key is put into the buffer
//Base moves when a key is taken from the buffer
uint8_t keyboardGetKeyFromBuffer()
{
    char lTemp=0;
 1003152:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:20
    //If top > buffer address, there are new characters to be processed
    if (kKbdBuffCurrTop>(char*)KEYBOARD_BUFFER_ADDRESS)
 1003157:	81 fa b0 24 16 00    	cmp    edx,0x1624b0
 100315d:	76 2a                	jbe    1003189 <keyboardGetKeyFromBuffer+0x3d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:23
    {
        //increment the current character pointer
        kKbdBuffCurrChar++;
 100315f:	a1 90 99 12 00       	mov    eax,ds:0x129990
 1003164:	8d 48 01             	lea    ecx,[eax+0x1]
 1003167:	89 0d 90 99 12 00    	mov    DWORD PTR ds:0x129990,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:25
        //get the character from the buffer
        lTemp=*kKbdBuffCurrChar;
 100316d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:27
        //If we've reached top, reset both char and top
        if (kKbdBuffCurrChar>=kKbdBuffCurrTop)
 1003171:	39 ca                	cmp    edx,ecx
 1003173:	77 14                	ja     1003189 <keyboardGetKeyFromBuffer+0x3d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:29
        {
            kKbdBuffCurrChar=(char*)KEYBOARD_BUFFER_ADDRESS;
 1003175:	c7 05 90 99 12 00 b0 	mov    DWORD PTR ds:0x129990,0x1624b0
 100317c:	24 16 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:30
            kKbdBuffCurrTop=(char*)KEYBOARD_BUFFER_ADDRESS;
 100317f:	c7 05 60 99 12 00 b0 	mov    DWORD PTR ds:0x129960,0x1624b0
 1003186:	24 16 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:34
        }
    }
    return lTemp;
}
 1003189:	f3 c3                	repz ret 

0100318b <waitForKeyboardKey>:
waitForKeyboardKey():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:37

char waitForKeyboardKey()
{
 100318b:	53                   	push   ebx
 100318c:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:38
    printd(DEBUG_KEYBOARD_DRIVER,"buffer=%08X, char=%08X, top=%08X\t", KEYBOARD_BUFFER_ADDRESS, kKbdBuffCurrChar, kKbdBuffCurrTop);
 100318f:	ff 35 60 99 12 00    	push   DWORD PTR ds:0x129960
 1003195:	ff 35 90 99 12 00    	push   DWORD PTR ds:0x129990
 100319b:	68 b0 24 16 00       	push   0x1624b0
 10031a0:	68 f8 1b 04 01       	push   0x1041bf8
 10031a5:	68 00 00 10 00       	push   0x100000
 10031aa:	e8 58 6b 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:42
    char lTemp=0;
    bool debugMsgPrinted=false;
    //CLR 02/19/2017 - Had to change the conditon because of modifications I made to how buffer & bufferbase are used.
    while (kKbdBuffCurrTop==(char*)KEYBOARD_BUFFER_ADDRESS)
 10031af:	83 c4 20             	add    esp,0x20
 10031b2:	81 3d 60 99 12 00 b0 	cmp    DWORD PTR ds:0x129960,0x1624b0
 10031b9:	24 16 00 
 10031bc:	75 1b                	jne    10031d9 <waitForKeyboardKey+0x4e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:48
    {
        if (!debugMsgPrinted)
        {
            debugMsgPrinted=true;
        }
        __asm__("sti\nhlt\n");
 10031be:	fb                   	sti    
 10031bf:	f4                   	hlt    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:49
        waitTicks(1);
 10031c0:	83 ec 0c             	sub    esp,0xc
 10031c3:	6a 01                	push   0x1
 10031c5:	e8 2b 75 00 00       	call   100a6f5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:42
{
    printd(DEBUG_KEYBOARD_DRIVER,"buffer=%08X, char=%08X, top=%08X\t", KEYBOARD_BUFFER_ADDRESS, kKbdBuffCurrChar, kKbdBuffCurrTop);
    char lTemp=0;
    bool debugMsgPrinted=false;
    //CLR 02/19/2017 - Had to change the conditon because of modifications I made to how buffer & bufferbase are used.
    while (kKbdBuffCurrTop==(char*)KEYBOARD_BUFFER_ADDRESS)
 10031ca:	83 c4 10             	add    esp,0x10
 10031cd:	81 3d 60 99 12 00 b0 	cmp    DWORD PTR ds:0x129960,0x1624b0
 10031d4:	24 16 00 
 10031d7:	74 e5                	je     10031be <waitForKeyboardKey+0x33>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:51
            debugMsgPrinted=true;
        }
        __asm__("sti\nhlt\n");
        waitTicks(1);
    }
    lTemp=keyboardGetKeyFromBuffer();
 10031d9:	e8 6e ff ff ff       	call   100314c <keyboardGetKeyFromBuffer>
 10031de:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:52
    printd(DEBUG_KEYBOARD_DRIVER,"got a key %u!\n", lTemp);
 10031e0:	83 ec 04             	sub    esp,0x4
 10031e3:	0f be c0             	movsx  eax,al
 10031e6:	50                   	push   eax
 10031e7:	68 cf 73 06 01       	push   0x10673cf
 10031ec:	68 00 00 10 00       	push   0x100000
 10031f1:	e8 11 6b 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:54
    return lTemp;
}
 10031f6:	89 d8                	mov    eax,ebx
 10031f8:	83 c4 18             	add    esp,0x18
 10031fb:	5b                   	pop    ebx
 10031fc:	c3                   	ret    

010031fd <gets>:
gets():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:57

void gets(char* buffer, int len)
{
 10031fd:	57                   	push   edi
 10031fe:	56                   	push   esi
 10031ff:	53                   	push   ebx
 1003200:	83 ec 14             	sub    esp,0x14
 1003203:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
 1003207:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:58
    volatile char inchar=0;
 100320b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:60
    int cnt=0;
    memset(buffer,0,len);
 1003210:	56                   	push   esi
 1003211:	6a 00                	push   0x0
 1003213:	57                   	push   edi
 1003214:	e8 1a 5d 00 00       	call   1008f33 <memset>
 1003219:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:59
}

void gets(char* buffer, int len)
{
    volatile char inchar=0;
    int cnt=0;
 100321c:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:77
            if (inchar==0x0a)
            {
                printk("%c",inchar);
                return;
            }
            if (cnt<len-2)
 1003221:	83 ee 02             	sub    esi,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:63
    volatile char inchar=0;
    int cnt=0;
    memset(buffer,0,len);
    while (1==1)
    {
        inchar=waitForKeyboardKey();
 1003224:	e8 62 ff ff ff       	call   100318b <waitForKeyboardKey>
 1003229:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:64
        if (inchar=='\b' && cnt>0)
 100322d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 1003232:	85 db                	test   ebx,ebx
 1003234:	7e 1d                	jle    1003253 <gets+0x56>
 1003236:	3c 08                	cmp    al,0x8
 1003238:	75 19                	jne    1003253 <gets+0x56>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:66
        {
            buffer[cnt]=0;
 100323a:	c6 04 1f 00          	mov    BYTE PTR [edi+ebx*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:67
            cnt--;
 100323e:	83 eb 01             	sub    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:68
            puts("\b");
 1003241:	83 ec 0c             	sub    esp,0xc
 1003244:	68 de 73 06 01       	push   0x10673de
 1003249:	e8 bf fe ff ff       	call   100310d <puts>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:65
    memset(buffer,0,len);
    while (1==1)
    {
        inchar=waitForKeyboardKey();
        if (inchar=='\b' && cnt>0)
        {
 100324e:	83 c4 10             	add    esp,0x10
 1003251:	eb d1                	jmp    1003224 <gets+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:70
            buffer[cnt]=0;
            cnt--;
            puts("\b");
        }
        else if (inchar>0)
 1003253:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 1003258:	84 c0                	test   al,al
 100325a:	7e c8                	jle    1003224 <gets+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:72
        {
            if (inchar==0x0a)
 100325c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 1003261:	3c 0a                	cmp    al,0xa
 1003263:	75 1b                	jne    1003280 <gets+0x83>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:74
            {
                printk("%c",inchar);
 1003265:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 100326a:	83 ec 08             	sub    esp,0x8
 100326d:	0f be c0             	movsx  eax,al
 1003270:	50                   	push   eax
 1003271:	68 e0 73 06 01       	push   0x10673e0
 1003276:	e8 74 6a 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:75
                return;
 100327b:	83 c4 10             	add    esp,0x10
 100327e:	eb 2d                	jmp    10032ad <gets+0xb0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:77
            }
            if (cnt<len-2)
 1003280:	39 f3                	cmp    ebx,esi
 1003282:	7d a0                	jge    1003224 <gets+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:79
            {
                printk("%c",inchar);
 1003284:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 1003289:	83 ec 08             	sub    esp,0x8
 100328c:	0f be c0             	movsx  eax,al
 100328f:	50                   	push   eax
 1003290:	68 e0 73 06 01       	push   0x10673e0
 1003295:	e8 55 6a 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:80
                buffer[cnt++]=inchar;
 100329a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
 100329f:	88 04 1f             	mov    BYTE PTR [edi+ebx*1],al
 10032a2:	83 c4 10             	add    esp,0x10
 10032a5:	8d 5b 01             	lea    ebx,[ebx+0x1]
 10032a8:	e9 77 ff ff ff       	jmp    1003224 <gets+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:84
            }
        }
    }
}
 10032ad:	83 c4 10             	add    esp,0x10
 10032b0:	5b                   	pop    ebx
 10032b1:	5e                   	pop    esi
 10032b2:	5f                   	pop    edi
 10032b3:	c3                   	ret    

010032b4 <getc>:
getc():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:87

char getc()
{
 10032b4:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:88
   int inchar=waitForKeyboardKey();
 10032b7:	e8 cf fe ff ff       	call   100318b <waitForKeyboardKey>
 10032bc:	0f be c0             	movsx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:90
   
   while (inchar==0)
 10032bf:	85 c0                	test   eax,eax
 10032c1:	75 0c                	jne    10032cf <getc+0x1b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:92
   {
       inchar=waitForKeyboardKey();
 10032c3:	e8 c3 fe ff ff       	call   100318b <waitForKeyboardKey>
 10032c8:	0f be c0             	movsx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:90

char getc()
{
   int inchar=waitForKeyboardKey();
   
   while (inchar==0)
 10032cb:	85 c0                	test   eax,eax
 10032cd:	74 f4                	je     10032c3 <getc+0xf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:95
   {
       inchar=waitForKeyboardKey();
   }
   return inchar;
}
 10032cf:	83 c4 0c             	add    esp,0xc
 10032d2:	c3                   	ret    
 10032d3:	90                   	nop

010032d4 <bitsSet>:
bitsSet():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:5
#include <stdint.h>
#include <stdbool.h>

bool bitsSet(volatile uint32_t* array, uint32_t bit)
{
 10032d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:7
    int lRetVal=0;
    __asm__ volatile ("bts [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
 10032d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 10032dc:	0f ab 02             	bts    DWORD PTR [edx],eax
 10032df:	b8 00 00 00 00       	mov    eax,0x0
 10032e4:	0f 92 c0             	setb   al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:8
    return lRetVal;
 10032e7:	85 c0                	test   eax,eax
 10032e9:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:9
}
 10032ec:	c3                   	ret    

010032ed <bitsReset>:
bitsReset():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:11
bool bitsReset(volatile uint32_t* array, uint32_t bit)
{
 10032ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:13
    int lRetVal=0;
    __asm__ volatile ("btr [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
 10032f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 10032f5:	0f b3 02             	btr    DWORD PTR [edx],eax
 10032f8:	b8 00 00 00 00       	mov    eax,0x0
 10032fd:	0f 92 c0             	setb   al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:14
    return lRetVal;
 1003300:	85 c0                	test   eax,eax
 1003302:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:15
}
 1003305:	c3                   	ret    

01003306 <bitsTest>:
bitsTest():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:17
bool bitsTest(volatile uint32_t* array, uint32_t bit)
{
 1003306:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:19
    int lRetVal=0;
    __asm__ volatile ("bt [%[array]],%[bit]\nmov eax,0\nsetc al\n" :[array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
 100330a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100330e:	0f a3 02             	bt     DWORD PTR [edx],eax
 1003311:	b8 00 00 00 00       	mov    eax,0x0
 1003316:	0f 92 c0             	setb   al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:20
    return lRetVal;
 1003319:	85 c0                	test   eax,eax
 100331b:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:21
}
 100331e:	c3                   	ret    

0100331f <bitsScanF>:
bitsScanF():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:24

int bitsScanF(volatile uint32_t* array)
{
 100331f:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:27
    int lRetVal=0;
    bool lErr=false;
    __asm__ volatile ("bsf %[ret],[%[array]]\nsetz cl\n" : [ret] "=b" (lRetVal), [lErr] "=c" (lErr) : [array] "m" (*array));
 1003320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1003324:	0f bc 18             	bsf    ebx,DWORD PTR [eax]
 1003327:	0f 94 c1             	sete   cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:28
    if (lErr==false)
 100332a:	84 c9                	test   cl,cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:29
        return lRetVal;
 100332c:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1003331:	0f 44 c3             	cmove  eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:32
    else
        return -1;
 1003334:	5b                   	pop    ebx
 1003335:	c3                   	ret    
 1003336:	66 90                	xchg   ax,ax

01003338 <getNonKernelCodeGDTIndex>:
getNonKernelCodeGDTIndex():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:13
extern uint32_t* kGDTSlotAvailableInd;

uint16_t HIGH_CODE_SECTION getNonKernelCodeGDTIndex()
{
    return 7<<3;
}
 1003338:	b8 38 00 00 00       	mov    eax,0x38
 100333d:	c3                   	ret    

0100333e <getNonKernelDataGDTIndex>:
getNonKernelDataGDTIndex():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:18

uint16_t HIGH_CODE_SECTION getNonKernelDataGDTIndex()
{
    return 6<<3;
}
 100333e:	b8 30 00 00 00       	mov    eax,0x30
 1003343:	c3                   	ret    

01003344 <getKernelCodeGDTIndex>:
getKernelCodeGDTIndex():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:23

uint16_t HIGH_CODE_SECTION getKernelCodeGDTIndex()
{
    return 4<<3;
}
 1003344:	b8 20 00 00 00       	mov    eax,0x20
 1003349:	c3                   	ret    

0100334a <getKernelDataGDTIndex>:
getKernelDataGDTIndex():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:28

uint16_t HIGH_CODE_SECTION getKernelDataGDTIndex()
{
    return 2<<3;
}
 100334a:	b8 10 00 00 00       	mov    eax,0x10
 100334f:	c3                   	ret    

01003350 <getNewGDTEntry>:
getNewGDTEntry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:31

sGDT* HIGH_CODE_SECTION getNewGDTEntry()
{
 1003350:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:34
   int cnt=0,slot=0;
   uint32_t* ptr=kGDTSlotAvailableInd;
    slot=bitsScanF(ptr);
 1003353:	ff 35 2c 99 12 00    	push   DWORD PTR ds:0x12992c
 1003359:	e8 c1 ff ff ff       	call   100331f <bitsScanF>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:36
   sGDT* gdt=bootGdt+slot; 
   return gdt;
 100335e:	8b 15 84 99 12 00    	mov    edx,DWORD PTR ds:0x129984
 1003364:	8d 04 c2             	lea    eax,[edx+eax*8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:37
}
 1003367:	83 c4 1c             	add    esp,0x1c
 100336a:	c3                   	ret    

0100336b <gdtEntryI>:
gdtEntryI():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:40

void HIGH_CODE_SECTION gdtEntryI(int entryNo, int base, int limit, char access, char flags,bool inUse,bool setSFlag)
{
 100336b:	55                   	push   ebp
 100336c:	57                   	push   edi
 100336d:	56                   	push   esi
 100336e:	53                   	push   ebx
 100336f:	83 ec 1c             	sub    esp,0x1c
 1003372:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
 1003376:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
 100337a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 100337e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
 1003382:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
 1003386:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
 100338a:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:41
    bootGdt[entryNo].base_low        = base & 0xFFFF;
 100338e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
 1003392:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
 1003399:	8b 0d 84 99 12 00    	mov    ecx,DWORD PTR ds:0x129984
 100339f:	66 89 54 01 02       	mov    WORD PTR [ecx+eax*1+0x2],dx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:42
    bootGdt[entryNo].base_middle     = (base >> 16) & 0xFF;
 10033a4:	89 c1                	mov    ecx,eax
 10033a6:	03 0d 84 99 12 00    	add    ecx,DWORD PTR ds:0x129984
 10033ac:	89 d5                	mov    ebp,edx
 10033ae:	c1 fd 10             	sar    ebp,0x10
 10033b1:	89 eb                	mov    ebx,ebp
 10033b3:	88 59 04             	mov    BYTE PTR [ecx+0x4],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:43
    bootGdt[entryNo].base_high       = (base >> 24) & 0xFF;
 10033b6:	c1 ea 18             	shr    edx,0x18
 10033b9:	88 51 07             	mov    BYTE PTR [ecx+0x7],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:44
    bootGdt[entryNo].limit_low       = limit & 0xFFFF;
 10033bc:	0f b7 5c 24 38       	movzx  ebx,WORD PTR [esp+0x38]
 10033c1:	66 89 19             	mov    WORD PTR [ecx],bx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:45
    bootGdt[entryNo].flags_and_limit = flags | (((limit >> 16) & 0xF));
 10033c4:	03 05 84 99 12 00    	add    eax,DWORD PTR ds:0x129984
 10033ca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
 10033ce:	c1 fa 10             	sar    edx,0x10
 10033d1:	83 e2 0f             	and    edx,0xf
 10033d4:	0a 54 24 0c          	or     dl,BYTE PTR [esp+0xc]
 10033d8:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:47
    bootGdt[entryNo].access          = access;
    if (setSFlag)
 10033db:	89 fb                	mov    ebx,edi
 10033dd:	84 db                	test   bl,bl
 10033df:	75 0a                	jne    10033eb <gdtEntryI+0x80>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:46
    bootGdt[entryNo].base_low        = base & 0xFFFF;
    bootGdt[entryNo].base_middle     = (base >> 16) & 0xFF;
    bootGdt[entryNo].base_high       = (base >> 24) & 0xFF;
    bootGdt[entryNo].limit_low       = limit & 0xFFFF;
    bootGdt[entryNo].flags_and_limit = flags | (((limit >> 16) & 0xF));
    bootGdt[entryNo].access          = access;
 10033e1:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
 10033e6:	88 48 05             	mov    BYTE PTR [eax+0x5],cl
 10033e9:	eb 0b                	jmp    10033f6 <gdtEntryI+0x8b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:48
    if (setSFlag)
        bootGdt[entryNo].access |= 0x10;
 10033eb:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
 10033f0:	83 cb 10             	or     ebx,0x10
 10033f3:	88 58 05             	mov    BYTE PTR [eax+0x5],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:49
    if (inUse)
 10033f6:	89 f0                	mov    eax,esi
 10033f8:	84 c0                	test   al,al
 10033fa:	74 17                	je     1003413 <gdtEntryI+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:50
        bitsReset(kGDTSlotAvailableInd,entryNo);
 10033fc:	83 ec 08             	sub    esp,0x8
 10033ff:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
 1003403:	ff 35 2c 99 12 00    	push   DWORD PTR ds:0x12992c
 1003409:	e8 df fe ff ff       	call   10032ed <bitsReset>
 100340e:	83 c4 10             	add    esp,0x10
 1003411:	eb 15                	jmp    1003428 <gdtEntryI+0xbd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:52
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
 1003413:	83 ec 08             	sub    esp,0x8
 1003416:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
 100341a:	ff 35 2c 99 12 00    	push   DWORD PTR ds:0x12992c
 1003420:	e8 af fe ff ff       	call   10032d4 <bitsSet>
 1003425:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:53
}
 1003428:	83 c4 1c             	add    esp,0x1c
 100342b:	5b                   	pop    ebx
 100342c:	5e                   	pop    esi
 100342d:	5f                   	pop    edi
 100342e:	5d                   	pop    ebp
 100342f:	c3                   	ret    

01003430 <gdtEntryApplication>:
gdtEntryApplication():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:56
//Create/modify entries in the protected mode GDT
void HIGH_CODE_SECTION gdtEntryApplication(int entryNo, int base, int limit, char access, char flags,bool inUse)
{
 1003430:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:57
    gdtEntryI(entryNo,base,limit,access,flags,inUse,true);
 1003433:	6a 01                	push   0x1
 1003435:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
 100343a:	50                   	push   eax
 100343b:	0f be 44 24 2c       	movsx  eax,BYTE PTR [esp+0x2c]
 1003440:	50                   	push   eax
 1003441:	0f be 44 24 2c       	movsx  eax,BYTE PTR [esp+0x2c]
 1003446:	50                   	push   eax
 1003447:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 100344b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 100344f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1003453:	e8 13 ff ff ff       	call   100336b <gdtEntryI>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:58
}
 1003458:	83 c4 2c             	add    esp,0x2c
 100345b:	c3                   	ret    

0100345c <gdtEntryOS>:
gdtEntryOS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:61

void HIGH_CODE_SECTION gdtEntryOS(int entryNo, int base, int limit, char access, char flags,bool inUse)
{
 100345c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:62
    gdtEntryI(entryNo,base,limit,access,flags,inUse,false);
 100345f:	6a 00                	push   0x0
 1003461:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
 1003466:	50                   	push   eax
 1003467:	0f be 44 24 2c       	movsx  eax,BYTE PTR [esp+0x2c]
 100346c:	50                   	push   eax
 100346d:	0f be 44 24 2c       	movsx  eax,BYTE PTR [esp+0x2c]
 1003472:	50                   	push   eax
 1003473:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1003477:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 100347b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 100347f:	e8 e7 fe ff ff       	call   100336b <gdtEntryI>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:63
}
 1003484:	83 c4 2c             	add    esp,0x2c
 1003487:	c3                   	ret    

01003488 <gdtEntryRM>:
gdtEntryRM():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:67

//Create entries in the real mode GDT table
void HIGH_CODE_SECTION gdtEntryRM(int entryNo, int base, int limit, char access, char flags)
{
 1003488:	55                   	push   ebp
 1003489:	57                   	push   edi
 100348a:	56                   	push   esi
 100348b:	53                   	push   ebx
 100348c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
 1003490:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
 1003494:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:68
    rmGdt[entryNo].base_low        = base & 0xFFFF;
 1003498:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 100349c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
 10034a3:	8b 3d 80 99 12 00    	mov    edi,DWORD PTR ds:0x129980
 10034a9:	66 89 74 17 02       	mov    WORD PTR [edi+edx*1+0x2],si
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:69
    rmGdt[entryNo].base_middle     = base >> 16 & 0xFF;
 10034ae:	89 d7                	mov    edi,edx
 10034b0:	03 3d 80 99 12 00    	add    edi,DWORD PTR ds:0x129980
 10034b6:	89 f5                	mov    ebp,esi
 10034b8:	c1 fd 10             	sar    ebp,0x10
 10034bb:	89 e8                	mov    eax,ebp
 10034bd:	88 47 04             	mov    BYTE PTR [edi+0x4],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:70
    rmGdt[entryNo].base_high       = base >> 24 & 0xFF;
 10034c0:	c1 ee 18             	shr    esi,0x18
 10034c3:	89 f0                	mov    eax,esi
 10034c5:	88 47 07             	mov    BYTE PTR [edi+0x7],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:71
    rmGdt[entryNo].limit_low       = limit & 0xFFFF;
 10034c8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
 10034cd:	66 89 07             	mov    WORD PTR [edi],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:72
    rmGdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
 10034d0:	03 15 80 99 12 00    	add    edx,DWORD PTR ds:0x129980
 10034d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 10034da:	c1 f8 10             	sar    eax,0x10
 10034dd:	83 e0 0f             	and    eax,0xf
 10034e0:	09 d8                	or     eax,ebx
 10034e2:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:73
    rmGdt[entryNo].access          = access | 0x10;
 10034e5:	83 c9 10             	or     ecx,0x10
 10034e8:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:74
}
 10034eb:	5b                   	pop    ebx
 10034ec:	5e                   	pop    esi
 10034ed:	5f                   	pop    edi
 10034ee:	5d                   	pop    ebp
 10034ef:	c3                   	ret    

010034f0 <fatfs_init>:
fatfs_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:44

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
 10034f0:	55                   	push   ebp
 10034f1:	57                   	push   edi
 10034f2:	56                   	push   esi
 10034f3:	53                   	push   ebx
 10034f4:	83 ec 28             	sub    esp,0x28
 10034f7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:54
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
 10034fb:	c7 83 44 02 00 00 ff 	mov    DWORD PTR [ebx+0x244],0xffffffff
 1003502:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:55
    fs->currentsector.dirty = 0;
 1003505:	c7 83 48 02 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
 100350c:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:57

    fs->next_free_cluster = 0; // Invalid
 100350f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:59

    fatfs_fat_init(fs);
 1003516:	53                   	push   ebx
 1003517:	e8 13 3d 00 00       	call   100722f <fatfs_fat_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:62

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
 100351c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
 100351f:	83 c4 10             	add    esp,0x10
 1003522:	85 c0                	test   eax,eax
 1003524:	0f 84 a8 02 00 00    	je     10037d2 <fatfs_init+0x2e2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:69

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
 100352a:	8d 73 44             	lea    esi,[ebx+0x44]
 100352d:	83 ec 04             	sub    esp,0x4
 1003530:	6a 01                	push   0x1
 1003532:	56                   	push   esi
 1003533:	6a 00                	push   0x0
 1003535:	ff d0                	call   eax
 1003537:	83 c4 10             	add    esp,0x10
 100353a:	85 c0                	test   eax,eax
 100353c:	0f 84 97 02 00 00    	je     10037d9 <fatfs_init+0x2e9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:74
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
 1003542:	66 81 bb 42 02 00 00 	cmp    WORD PTR [ebx+0x242],0xaa55
 1003549:	55 aa 
 100354b:	0f 85 8f 02 00 00    	jne    10037e0 <fatfs_init+0x2f0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:78
        return FAT_INIT_INVALID_SIGNATURE;

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
 1003551:	0f b6 83 43 02 00 00 	movzx  eax,BYTE PTR [ebx+0x243]
 1003558:	c1 e0 08             	shl    eax,0x8
 100355b:	0f b6 93 42 02 00 00 	movzx  edx,BYTE PTR [ebx+0x242]
 1003562:	01 d0                	add    eax,edx
 1003564:	3d 55 aa 00 00       	cmp    eax,0xaa55
 1003569:	0f 85 78 02 00 00    	jne    10037e7 <fatfs_init+0x2f7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:86
    // Verify packed structures
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
 100356f:	0f b6 83 06 02 00 00 	movzx  eax,BYTE PTR [ebx+0x206]
 1003576:	3c 0f                	cmp    al,0xf
 1003578:	77 0a                	ja     1003584 <fatfs_init+0x94>
 100357a:	0f b6 d0             	movzx  edx,al
 100357d:	ff 24 95 0c 9a 02 01 	jmp    DWORD PTR [edx*4+0x1029a0c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:94
        case 0x06:
        case 0x0C:
        case 0x0E:
        case 0x0F:
        case 0x05:
            valid_partition = 1;
 1003584:	3c 06                	cmp    al,0x6
 1003586:	0f 96 c0             	setbe  al
 1003589:	eb 05                	jmp    1003590 <fatfs_init+0xa0>
 100358b:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:106
                valid_partition = 1;
        break;
    }

    // Read LBA Begin for the file system
    if (valid_partition)
 1003590:	84 c0                	test   al,al
 1003592:	74 32                	je     10035c6 <fatfs_init+0xd6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:107
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
 1003594:	0f b6 83 0d 02 00 00 	movzx  eax,BYTE PTR [ebx+0x20d]
 100359b:	c1 e0 18             	shl    eax,0x18
 100359e:	89 c2                	mov    edx,eax
 10035a0:	0f b6 83 0c 02 00 00 	movzx  eax,BYTE PTR [ebx+0x20c]
 10035a7:	c1 e0 10             	shl    eax,0x10
 10035aa:	01 d0                	add    eax,edx
 10035ac:	0f b6 93 0a 02 00 00 	movzx  edx,BYTE PTR [ebx+0x20a]
 10035b3:	01 c2                	add    edx,eax
 10035b5:	0f b6 83 0b 02 00 00 	movzx  eax,BYTE PTR [ebx+0x20b]
 10035bc:	c1 e0 08             	shl    eax,0x8
 10035bf:	01 d0                	add    eax,edx
 10035c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
 10035c4:	eb 07                	jmp    10035cd <fatfs_init+0xdd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:110
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
 10035c6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:114

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
 10035cd:	83 ec 04             	sub    esp,0x4
 10035d0:	6a 01                	push   0x1
 10035d2:	56                   	push   esi
 10035d3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
 10035d6:	ff 53 34             	call   DWORD PTR [ebx+0x34]
 10035d9:	83 c4 10             	add    esp,0x10
 10035dc:	85 c0                	test   eax,eax
 10035de:	0f 84 0a 02 00 00    	je     10037ee <fatfs_init+0x2fe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:118
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
 10035e4:	0f b6 43 50          	movzx  eax,BYTE PTR [ebx+0x50]
 10035e8:	c1 e0 08             	shl    eax,0x8
 10035eb:	0f b6 53 4f          	movzx  edx,BYTE PTR [ebx+0x4f]
 10035ef:	01 d0                	add    eax,edx
 10035f1:	3d 00 02 00 00       	cmp    eax,0x200
 10035f6:	0f 85 f9 01 00 00    	jne    10037f5 <fatfs_init+0x305>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:122
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
 10035fc:	0f b6 43 51          	movzx  eax,BYTE PTR [ebx+0x51]
 1003600:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
 1003604:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:123
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
 1003606:	0f b6 43 53          	movzx  eax,BYTE PTR [ebx+0x53]
 100360a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
 100360e:	0f b6 53 52          	movzx  edx,BYTE PTR [ebx+0x52]
 1003612:	89 d1                	mov    ecx,edx
 1003614:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
 1003618:	89 c2                	mov    edx,eax
 100361a:	c1 e2 08             	shl    edx,0x8
 100361d:	0f b6 c1             	movzx  eax,cl
 1003620:	8d 34 02             	lea    esi,[edx+eax*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:124
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
 1003623:	0f b6 43 54          	movzx  eax,BYTE PTR [ebx+0x54]
 1003627:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:125
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
 100362b:	0f b6 43 56          	movzx  eax,BYTE PTR [ebx+0x56]
 100362f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
 1003633:	0f b6 53 55          	movzx  edx,BYTE PTR [ebx+0x55]
 1003637:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
 100363b:	89 c1                	mov    ecx,eax
 100363d:	c1 e1 08             	shl    ecx,0x8
 1003640:	0f b6 c2             	movzx  eax,dl
 1003643:	01 c1                	add    ecx,eax
 1003645:	66 89 4b 28          	mov    WORD PTR [ebx+0x28],cx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:127

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
 1003649:	0f b6 53 5b          	movzx  edx,BYTE PTR [ebx+0x5b]
 100364d:	c1 e2 08             	shl    edx,0x8
 1003650:	0f b6 43 5a          	movzx  eax,BYTE PTR [ebx+0x5a]
 1003654:	01 c2                	add    edx,eax
 1003656:	74 05                	je     100365d <fatfs_init+0x16d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:128
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
 1003658:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
 100365b:	eb 24                	jmp    1003681 <fatfs_init+0x191>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:130
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
 100365d:	0f b6 43 6b          	movzx  eax,BYTE PTR [ebx+0x6b]
 1003661:	c1 e0 18             	shl    eax,0x18
 1003664:	89 c5                	mov    ebp,eax
 1003666:	0f b6 43 6a          	movzx  eax,BYTE PTR [ebx+0x6a]
 100366a:	c1 e0 10             	shl    eax,0x10
 100366d:	01 e8                	add    eax,ebp
 100366f:	0f b6 7b 68          	movzx  edi,BYTE PTR [ebx+0x68]
 1003673:	01 c7                	add    edi,eax
 1003675:	0f b6 43 69          	movzx  eax,BYTE PTR [ebx+0x69]
 1003679:	c1 e0 08             	shl    eax,0x8
 100367c:	01 f8                	add    eax,edi
 100367e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:133

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
 1003681:	0f b6 43 73          	movzx  eax,BYTE PTR [ebx+0x73]
 1003685:	c1 e0 18             	shl    eax,0x18
 1003688:	89 c5                	mov    ebp,eax
 100368a:	0f b6 43 72          	movzx  eax,BYTE PTR [ebx+0x72]
 100368e:	c1 e0 10             	shl    eax,0x10
 1003691:	01 e8                	add    eax,ebp
 1003693:	0f b6 7b 70          	movzx  edi,BYTE PTR [ebx+0x70]
 1003697:	01 c7                	add    edi,eax
 1003699:	0f b6 43 71          	movzx  eax,BYTE PTR [ebx+0x71]
 100369d:	c1 e0 08             	shl    eax,0x8
 10036a0:	01 f8                	add    eax,edi
 10036a2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:134
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
 10036a5:	0f b6 7b 75          	movzx  edi,BYTE PTR [ebx+0x75]
 10036a9:	c1 e7 08             	shl    edi,0x8
 10036ac:	0f b6 43 74          	movzx  eax,BYTE PTR [ebx+0x74]
 10036b0:	01 f8                	add    eax,edi
 10036b2:	66 89 43 18          	mov    WORD PTR [ebx+0x18],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:137

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
 10036b6:	0f b7 c6             	movzx  eax,si
 10036b9:	0f b6 74 24 0a       	movzx  esi,BYTE PTR [esp+0xa]
 10036be:	89 f7                	mov    edi,esi
 10036c0:	0f af 7b 20          	imul   edi,DWORD PTR [ebx+0x20]
 10036c4:	8d 2c 38             	lea    ebp,[eax+edi*1]
 10036c7:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:138
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
 10036ca:	0f b7 c9             	movzx  ecx,cx
 10036cd:	c1 e1 05             	shl    ecx,0x5
 10036d0:	8d 89 ff 01 00 00    	lea    ecx,[ecx+0x1ff]
 10036d6:	c1 f9 09             	sar    ecx,0x9
 10036d9:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:141

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
 10036dc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
 10036df:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:144

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
 10036e2:	01 f8                	add    eax,edi
 10036e4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:146

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
 10036e7:	0f b6 8b 43 02 00 00 	movzx  ecx,BYTE PTR [ebx+0x243]
 10036ee:	c1 e1 08             	shl    ecx,0x8
 10036f1:	0f b6 83 42 02 00 00 	movzx  eax,BYTE PTR [ebx+0x242]
 10036f8:	01 c8                	add    eax,ecx
 10036fa:	3d 55 aa 00 00       	cmp    eax,0xaa55
 10036ff:	0f 85 f7 00 00 00    	jne    10037fc <fatfs_init+0x30c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:150
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
 1003705:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
 100370a:	c1 e0 08             	shl    eax,0x8
 100370d:	0f b6 4c 24 0f       	movzx  ecx,BYTE PTR [esp+0xf]
 1003712:	01 c8                	add    eax,ecx
 1003714:	c1 e0 05             	shl    eax,0x5
 1003717:	8d a8 ff 01 00 00    	lea    ebp,[eax+0x1ff]
 100371d:	c1 fd 09             	sar    ebp,0x9
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:152

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
 1003720:	85 d2                	test   edx,edx
 1003722:	75 21                	jne    1003745 <fatfs_init+0x255>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:155
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
 1003724:	0f b6 43 6b          	movzx  eax,BYTE PTR [ebx+0x6b]
 1003728:	c1 e0 18             	shl    eax,0x18
 100372b:	89 c1                	mov    ecx,eax
 100372d:	0f b6 43 6a          	movzx  eax,BYTE PTR [ebx+0x6a]
 1003731:	c1 e0 10             	shl    eax,0x10
 1003734:	01 c8                	add    eax,ecx
 1003736:	0f b6 53 68          	movzx  edx,BYTE PTR [ebx+0x68]
 100373a:	01 d0                	add    eax,edx
 100373c:	0f b6 53 69          	movzx  edx,BYTE PTR [ebx+0x69]
 1003740:	c1 e2 08             	shl    edx,0x8
 1003743:	01 c2                	add    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:157

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
 1003745:	0f b6 43 58          	movzx  eax,BYTE PTR [ebx+0x58]
 1003749:	c1 e0 08             	shl    eax,0x8
 100374c:	0f b6 4b 57          	movzx  ecx,BYTE PTR [ebx+0x57]
 1003750:	01 c8                	add    eax,ecx
 1003752:	75 22                	jne    1003776 <fatfs_init+0x286>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:160
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
 1003754:	0f b6 43 67          	movzx  eax,BYTE PTR [ebx+0x67]
 1003758:	c1 e0 18             	shl    eax,0x18
 100375b:	89 c1                	mov    ecx,eax
 100375d:	0f b6 43 66          	movzx  eax,BYTE PTR [ebx+0x66]
 1003761:	c1 e0 10             	shl    eax,0x10
 1003764:	01 c8                	add    eax,ecx
 1003766:	0f b6 7b 64          	movzx  edi,BYTE PTR [ebx+0x64]
 100376a:	01 c7                	add    edi,eax
 100376c:	0f b6 43 65          	movzx  eax,BYTE PTR [ebx+0x65]
 1003770:	c1 e0 08             	shl    eax,0x8
 1003773:	8d 04 07             	lea    eax,[edi+eax*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:162

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
 1003776:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
 100377b:	c1 e7 08             	shl    edi,0x8
 100377e:	0f b6 4c 24 0d       	movzx  ecx,BYTE PTR [esp+0xd]
 1003783:	01 f9                	add    ecx,edi
 1003785:	01 cd                	add    ebp,ecx
 1003787:	0f af d6             	imul   edx,esi
 100378a:	01 ea                	add    edx,ebp
 100378c:	29 d0                	sub    eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:165

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
 100378e:	0f b6 4c 24 0b       	movzx  ecx,BYTE PTR [esp+0xb]
 1003793:	84 c9                	test   cl,cl
 1003795:	74 6c                	je     1003803 <fatfs_init+0x313>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:167
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
 1003797:	0f b6 c9             	movzx  ecx,cl
 100379a:	ba 00 00 00 00       	mov    edx,0x0
 100379f:	f7 f1                	div    ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:169

        if(count_of_clusters < 4085)
 10037a1:	3d f4 0f 00 00       	cmp    eax,0xff4
 10037a6:	76 62                	jbe    100380a <fatfs_init+0x31a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:172
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
        else if(count_of_clusters < 65525)
 10037a8:	3d f4 ff 00 00       	cmp    eax,0xfff4
 10037ad:	77 15                	ja     10037c4 <fatfs_init+0x2d4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:175
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
 10037af:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:178

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
 10037b6:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:179
            return FAT_INIT_OK;
 10037bd:	b8 00 00 00 00       	mov    eax,0x0
 10037c2:	eb 4b                	jmp    100380f <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:184
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
 10037c4:	c7 43 30 01 00 00 00 	mov    DWORD PTR [ebx+0x30],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:185
            return FAT_INIT_OK;
 10037cb:	b8 00 00 00 00       	mov    eax,0x0
 10037d0:	eb 3d                	jmp    100380f <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:63

    fatfs_fat_init(fs);

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;
 10037d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
 10037d7:	eb 36                	jmp    100380f <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:70
    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
        return FAT_INIT_MEDIA_ACCESS_ERROR;
 10037d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
 10037de:	eb 2f                	jmp    100380f <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:75

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
        return FAT_INIT_INVALID_SIGNATURE;
 10037e0:	b8 fd ff ff ff       	mov    eax,0xfffffffd
 10037e5:	eb 28                	jmp    100380f <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:79

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
        return FAT_INIT_ENDIAN_ERROR;
 10037e7:	b8 fc ff ff ff       	mov    eax,0xfffffffc
 10037ec:	eb 21                	jmp    100380f <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:115
        fs->lba_begin = 0;

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
        return FAT_INIT_MEDIA_ACCESS_ERROR;
 10037ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
 10037f3:	eb 1a                	jmp    100380f <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:119

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
        return FAT_INIT_INVALID_SECTOR_SIZE;
 10037f5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
 10037fa:	eb 13                	jmp    100380f <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:147

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;
 10037fc:	b8 fd ff ff ff       	mov    eax,0xfffffffd
 1003801:	eb 0c                	jmp    100380f <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:189
            fs->fat_type = FAT_TYPE_32;
            return FAT_INIT_OK;
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
 1003803:	b8 fb ff ff ff       	mov    eax,0xfffffffb
 1003808:	eb 05                	jmp    100380f <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:171
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;

        if(count_of_clusters < 4085)
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
 100380a:	b8 fb ff ff ff       	mov    eax,0xfffffffb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:190
            return FAT_INIT_OK;
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
}
 100380f:	83 c4 1c             	add    esp,0x1c
 1003812:	5b                   	pop    ebx
 1003813:	5e                   	pop    esi
 1003814:	5f                   	pop    edi
 1003815:	5d                   	pop    ebp
 1003816:	c3                   	ret    

01003817 <fatfs_lba_of_cluster>:
fatfs_lba_of_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:196
//-----------------------------------------------------------------------------
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
 1003817:	53                   	push   ebx
 1003818:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:197
    if (fs->fat_type == FAT_TYPE_16)
 100381c:	83 79 30 00          	cmp    DWORD PTR [ecx+0x30],0x0
 1003820:	75 1d                	jne    100383f <fatfs_lba_of_cluster+0x28>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:198
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
 1003822:	0f b7 41 28          	movzx  eax,WORD PTR [ecx+0x28]
 1003826:	c1 e8 04             	shr    eax,0x4
 1003829:	89 c3                	mov    ebx,eax
 100382b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 100382f:	83 e8 02             	sub    eax,0x2
 1003832:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
 1003835:	0f af c2             	imul   eax,edx
 1003838:	01 d8                	add    eax,ebx
 100383a:	03 41 04             	add    eax,DWORD PTR [ecx+0x4]
 100383d:	eb 10                	jmp    100384f <fatfs_lba_of_cluster+0x38>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:200
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
 100383f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1003843:	8d 50 fe             	lea    edx,[eax-0x2]
 1003846:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
 1003849:	0f af c2             	imul   eax,edx
 100384c:	03 41 04             	add    eax,DWORD PTR [ecx+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:201
}
 100384f:	5b                   	pop    ebx
 1003850:	c3                   	ret    

01003851 <fatfs_sector_read>:
fatfs_sector_read():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:206
//-----------------------------------------------------------------------------
// fatfs_sector_read:
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
 1003851:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:207
    return fs->disk_io.read_media(lba, target, count);
 1003854:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1003858:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 100385c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1003860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 1003864:	ff 50 34             	call   DWORD PTR [eax+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:208
}
 1003867:	83 c4 1c             	add    esp,0x1c
 100386a:	c3                   	ret    

0100386b <fatfs_sector_write>:
fatfs_sector_write():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:213
//-----------------------------------------------------------------------------
// fatfs_sector_write:
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
 100386b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:214
    return fs->disk_io.write_media(lba, target, count);
 100386e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1003872:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1003876:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 100387a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 100387e:	ff 50 38             	call   DWORD PTR [eax+0x38]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:215
}
 1003881:	83 c4 1c             	add    esp,0x1c
 1003884:	c3                   	ret    

01003885 <fatfs_sector_reader>:
fatfs_sector_reader():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:221
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
 1003885:	55                   	push   ebp
 1003886:	57                   	push   edi
 1003887:	56                   	push   esi
 1003888:	53                   	push   ebx
 1003889:	83 ec 0c             	sub    esp,0xc
 100388c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
 1003890:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
 1003894:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:229
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
 1003898:	83 7e 30 00          	cmp    DWORD PTR [esi+0x30],0x0
 100389c:	75 1c                	jne    10038ba <fatfs_sector_reader+0x35>
 100389e:	85 c9                	test   ecx,ecx
 10038a0:	75 18                	jne    10038ba <fatfs_sector_reader+0x35>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:234
    {
        if (offset < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
        else
            return 0;
 10038a2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:231
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
 10038a7:	39 6e 10             	cmp    DWORD PTR [esi+0x10],ebp
 10038aa:	0f 86 93 00 00 00    	jbe    1003943 <fatfs_sector_reader+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:232
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
 10038b0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
 10038b3:	03 46 1c             	add    eax,DWORD PTR [esi+0x1c]
 10038b6:	01 c5                	add    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:231
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
 10038b8:	eb 46                	jmp    1003900 <fatfs_sector_reader+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:243
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
 10038ba:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
 10038bd:	89 e8                	mov    eax,ebp
 10038bf:	ba 00 00 00 00       	mov    edx,0x0
 10038c4:	f7 f3                	div    ebx
 10038c6:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:244
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
 10038c8:	0f af d8             	imul   ebx,eax
 10038cb:	29 dd                	sub    ebp,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:247

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
 10038cd:	85 c0                	test   eax,eax
 10038cf:	74 1b                	je     10038ec <fatfs_sector_reader+0x67>
 10038d1:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:248 (discriminator 3)
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
 10038d6:	83 ec 08             	sub    esp,0x8
 10038d9:	51                   	push   ecx
 10038da:	56                   	push   esi
 10038db:	e8 f0 39 00 00       	call   10072d0 <fatfs_find_next_cluster>
 10038e0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:247 (discriminator 3)
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
 10038e2:	83 c3 01             	add    ebx,0x1
 10038e5:	83 c4 10             	add    esp,0x10
 10038e8:	39 df                	cmp    edi,ebx
 10038ea:	75 ea                	jne    10038d6 <fatfs_sector_reader+0x51>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:251
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
 10038ec:	83 f9 ff             	cmp    ecx,0xffffffff
 10038ef:	74 4d                	je     100393e <fatfs_sector_reader+0xb9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:255
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
 10038f1:	83 ec 08             	sub    esp,0x8
 10038f4:	51                   	push   ecx
 10038f5:	56                   	push   esi
 10038f6:	e8 1c ff ff ff       	call   1003817 <fatfs_lba_of_cluster>
 10038fb:	83 c4 10             	add    esp,0x10
 10038fe:	01 c5                	add    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:259
    }

    // User provided target array
    if (target)
 1003900:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
 1003905:	74 12                	je     1003919 <fatfs_sector_reader+0x94>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:260
        return fs->disk_io.read_media(lba, target, 1);
 1003907:	83 ec 04             	sub    esp,0x4
 100390a:	6a 01                	push   0x1
 100390c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
 1003910:	55                   	push   ebp
 1003911:	ff 56 34             	call   DWORD PTR [esi+0x34]
 1003914:	83 c4 10             	add    esp,0x10
 1003917:	eb 2a                	jmp    1003943 <fatfs_sector_reader+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:268
    {
        fs->currentsector.address = lba;
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    }
    else
        return 1;
 1003919:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:262

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
 100391e:	3b ae 44 02 00 00    	cmp    ebp,DWORD PTR [esi+0x244]
 1003924:	74 1d                	je     1003943 <fatfs_sector_reader+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:264
    {
        fs->currentsector.address = lba;
 1003926:	89 ae 44 02 00 00    	mov    DWORD PTR [esi+0x244],ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:265
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
 100392c:	83 ec 04             	sub    esp,0x4
 100392f:	6a 01                	push   0x1
 1003931:	8d 46 44             	lea    eax,[esi+0x44]
 1003934:	50                   	push   eax
 1003935:	55                   	push   ebp
 1003936:	ff 56 34             	call   DWORD PTR [esi+0x34]
 1003939:	83 c4 10             	add    esp,0x10
 100393c:	eb 05                	jmp    1003943 <fatfs_sector_reader+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:252
        for (i=0; i<cluster_to_read; i++)
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
            return 0;
 100393e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:269
        fs->currentsector.address = lba;
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    }
    else
        return 1;
}
 1003943:	83 c4 0c             	add    esp,0xc
 1003946:	5b                   	pop    ebx
 1003947:	5e                   	pop    esi
 1003948:	5f                   	pop    edi
 1003949:	5d                   	pop    ebp
 100394a:	c3                   	ret    

0100394b <fatfs_read_sector>:
fatfs_read_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:275
//-----------------------------------------------------------------------------
// fatfs_read_sector: Read from the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
 100394b:	56                   	push   esi
 100394c:	53                   	push   ebx
 100394d:	83 ec 04             	sub    esp,0x4
 1003950:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1003954:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1003958:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:277
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
 100395c:	83 7b 30 00          	cmp    DWORD PTR [ebx+0x30],0x0
 1003960:	75 40                	jne    10039a2 <fatfs_read_sector+0x57>
 1003962:	85 c0                	test   eax,eax
 1003964:	75 3c                	jne    10039a2 <fatfs_read_sector+0x57>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:282
    {
        uint32 lba;

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
 1003966:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
 100396a:	39 4b 10             	cmp    DWORD PTR [ebx+0x10],ecx
 100396d:	76 78                	jbe    10039e7 <fatfs_read_sector+0x9c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:283
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
 100396f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 1003972:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
 1003975:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:288
        else
            return 0;

        // User target buffer passed in
        if (target)
 1003977:	85 f6                	test   esi,esi
 1003979:	74 0f                	je     100398a <fatfs_read_sector+0x3f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:291
        {
            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
 100397b:	83 ec 04             	sub    esp,0x4
 100397e:	6a 01                	push   0x1
 1003980:	56                   	push   esi
 1003981:	50                   	push   eax
 1003982:	ff 53 34             	call   DWORD PTR [ebx+0x34]
 1003985:	83 c4 10             	add    esp,0x10
 1003988:	eb 5d                	jmp    10039e7 <fatfs_read_sector+0x9c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:296
        }
        else
        {
            // Calculate read address
            fs->currentsector.address = lba;
 100398a:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:299

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1003990:	83 ec 04             	sub    esp,0x4
 1003993:	6a 01                	push   0x1
 1003995:	8d 53 44             	lea    edx,[ebx+0x44]
 1003998:	52                   	push   edx
 1003999:	50                   	push   eax
 100399a:	ff 53 34             	call   DWORD PTR [ebx+0x34]
 100399d:	83 c4 10             	add    esp,0x10
 10039a0:	eb 45                	jmp    10039e7 <fatfs_read_sector+0x9c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:306
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
 10039a2:	85 f6                	test   esi,esi
 10039a4:	74 1d                	je     10039c3 <fatfs_read_sector+0x78>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:309
        {
            // Calculate read address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
 10039a6:	83 ec 08             	sub    esp,0x8
 10039a9:	50                   	push   eax
 10039aa:	53                   	push   ebx
 10039ab:	e8 67 fe ff ff       	call   1003817 <fatfs_lba_of_cluster>
 10039b0:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:312

            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
 10039b3:	6a 01                	push   0x1
 10039b5:	56                   	push   esi
 10039b6:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
 10039ba:	50                   	push   eax
 10039bb:	ff 53 34             	call   DWORD PTR [ebx+0x34]
 10039be:	83 c4 10             	add    esp,0x10
 10039c1:	eb 24                	jmp    10039e7 <fatfs_read_sector+0x9c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:317
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
 10039c3:	83 ec 08             	sub    esp,0x8
 10039c6:	50                   	push   eax
 10039c7:	53                   	push   ebx
 10039c8:	e8 4a fe ff ff       	call   1003817 <fatfs_lba_of_cluster>
 10039cd:	83 c4 0c             	add    esp,0xc
 10039d0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
 10039d4:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:320

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
 10039da:	6a 01                	push   0x1
 10039dc:	8d 53 44             	lea    edx,[ebx+0x44]
 10039df:	52                   	push   edx
 10039e0:	50                   	push   eax
 10039e1:	ff 53 34             	call   DWORD PTR [ebx+0x34]
 10039e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:323
        }
    }
}
 10039e7:	83 c4 04             	add    esp,0x4
 10039ea:	5b                   	pop    ebx
 10039eb:	5e                   	pop    esi
 10039ec:	c3                   	ret    

010039ed <fatfs_write_sector>:
fatfs_write_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:330
// fatfs_write_sector: Write to the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
 10039ed:	57                   	push   edi
 10039ee:	56                   	push   esi
 10039ef:	53                   	push   ebx
 10039f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 10039f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 10039f8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:332
    // No write access?
    if (!fs->disk_io.write_media)
 10039fc:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
 10039ff:	85 f6                	test   esi,esi
 1003a01:	0f 84 89 00 00 00    	je     1003a90 <fatfs_write_sector+0xa3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:336
        return 0;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
 1003a07:	83 7b 30 00          	cmp    DWORD PTR [ebx+0x30],0x0
 1003a0b:	75 3e                	jne    1003a4b <fatfs_write_sector+0x5e>
 1003a0d:	85 c0                	test   eax,eax
 1003a0f:	75 3a                	jne    1003a4b <fatfs_write_sector+0x5e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:341
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
 1003a11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
 1003a15:	39 53 10             	cmp    DWORD PTR [ebx+0x10],edx
 1003a18:	76 7b                	jbe    1003a95 <fatfs_write_sector+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:342
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
 1003a1a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 1003a1d:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
 1003a20:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:347
        else
            return 0;

        // User target buffer passed in
        if (target)
 1003a22:	85 ff                	test   edi,edi
 1003a24:	74 0e                	je     1003a34 <fatfs_write_sector+0x47>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:350
        {
            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
 1003a26:	83 ec 04             	sub    esp,0x4
 1003a29:	6a 01                	push   0x1
 1003a2b:	57                   	push   edi
 1003a2c:	50                   	push   eax
 1003a2d:	ff d6                	call   esi
 1003a2f:	83 c4 10             	add    esp,0x10
 1003a32:	eb 61                	jmp    1003a95 <fatfs_write_sector+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:355
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = lba;
 1003a34:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:358

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1003a3a:	83 ec 04             	sub    esp,0x4
 1003a3d:	6a 01                	push   0x1
 1003a3f:	83 c3 44             	add    ebx,0x44
 1003a42:	53                   	push   ebx
 1003a43:	50                   	push   eax
 1003a44:	ff d6                	call   esi
 1003a46:	83 c4 10             	add    esp,0x10
 1003a49:	eb 4a                	jmp    1003a95 <fatfs_write_sector+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:365
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
 1003a4b:	85 ff                	test   edi,edi
 1003a4d:	74 1c                	je     1003a6b <fatfs_write_sector+0x7e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:368
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
 1003a4f:	83 ec 08             	sub    esp,0x8
 1003a52:	50                   	push   eax
 1003a53:	53                   	push   ebx
 1003a54:	e8 be fd ff ff       	call   1003817 <fatfs_lba_of_cluster>
 1003a59:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:371

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
 1003a5c:	6a 01                	push   0x1
 1003a5e:	57                   	push   edi
 1003a5f:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
 1003a63:	50                   	push   eax
 1003a64:	ff d6                	call   esi
 1003a66:	83 c4 10             	add    esp,0x10
 1003a69:	eb 2a                	jmp    1003a95 <fatfs_write_sector+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:376
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
 1003a6b:	83 ec 08             	sub    esp,0x8
 1003a6e:	50                   	push   eax
 1003a6f:	53                   	push   ebx
 1003a70:	e8 a2 fd ff ff       	call   1003817 <fatfs_lba_of_cluster>
 1003a75:	83 c4 0c             	add    esp,0xc
 1003a78:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
 1003a7c:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:379

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1003a82:	6a 01                	push   0x1
 1003a84:	83 c3 44             	add    ebx,0x44
 1003a87:	53                   	push   ebx
 1003a88:	50                   	push   eax
 1003a89:	ff d6                	call   esi
 1003a8b:	83 c4 10             	add    esp,0x10
 1003a8e:	eb 05                	jmp    1003a95 <fatfs_write_sector+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:333
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
 1003a90:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:382

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
        }
    }
}
 1003a95:	5b                   	pop    ebx
 1003a96:	5e                   	pop    esi
 1003a97:	5f                   	pop    edi
 1003a98:	c3                   	ret    

01003a99 <fatfs_show_details>:
fatfs_show_details():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:388
#endif
//-----------------------------------------------------------------------------
// fatfs_show_details: Show the details about the filesystem
//-----------------------------------------------------------------------------
void fatfs_show_details(struct fatfs *fs)
{
 1003a99:	53                   	push   ebx
 1003a9a:	83 ec 14             	sub    esp,0x14
 1003a9d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:389
    FAT_PRINTF(("FAT details:\r\n"));
 1003aa1:	68 ef 73 06 01       	push   0x10673ef
 1003aa6:	e8 44 62 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:390
    FAT_PRINTF((" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16"));
 1003aab:	83 c4 08             	add    esp,0x8
 1003aae:	83 7b 30 01          	cmp    DWORD PTR [ebx+0x30],0x1
 1003ab2:	ba e9 73 06 01       	mov    edx,0x10673e9
 1003ab7:	b8 e3 73 06 01       	mov    eax,0x10673e3
 1003abc:	0f 45 c2             	cmovne eax,edx
 1003abf:	50                   	push   eax
 1003ac0:	68 fe 73 06 01       	push   0x10673fe
 1003ac5:	e8 25 62 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:391
    FAT_PRINTF((" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster));
 1003aca:	83 c4 08             	add    esp,0x8
 1003acd:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 1003ad0:	68 1c 1c 04 01       	push   0x1041c1c
 1003ad5:	e8 15 62 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:392
    FAT_PRINTF((" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba));
 1003ada:	83 c4 08             	add    esp,0x8
 1003add:	ff 73 14             	push   DWORD PTR [ebx+0x14]
 1003ae0:	68 08 74 06 01       	push   0x1067408
 1003ae5:	e8 05 62 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:393
    FAT_PRINTF((" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba));
 1003aea:	83 c4 08             	add    esp,0x8
 1003aed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 1003af0:	68 20 74 06 01       	push   0x1067420
 1003af5:	e8 f5 61 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:394
    FAT_PRINTF((" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster));
 1003afa:	83 c4 08             	add    esp,0x8
 1003afd:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1003b00:	50                   	push   eax
 1003b01:	68 3c 74 06 01       	push   0x106743c
 1003b06:	e8 e4 61 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:395
}
 1003b0b:	83 c4 18             	add    esp,0x18
 1003b0e:	5b                   	pop    ebx
 1003b0f:	c3                   	ret    

01003b10 <fatfs_get_root_cluster>:
fatfs_get_root_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:402
// fatfs_get_root_cluster: Get the root dir cluster
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
 1003b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1003b14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:403
}
 1003b17:	c3                   	ret    

01003b18 <fatfs_get_file_entry>:
fatfs_get_file_entry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:408
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
 1003b18:	55                   	push   ebp
 1003b19:	57                   	push   edi
 1003b1a:	56                   	push   esi
 1003b1b:	53                   	push   ebx
 1003b1c:	81 ec 44 01 00 00    	sub    esp,0x144
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:419
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
 1003b22:	6a 01                	push   0x1
 1003b24:	8d 44 24 29          	lea    eax,[esp+0x29]
 1003b28:	50                   	push   eax
 1003b29:	e8 12 29 00 00       	call   1006440 <fatfs_lfn_cache_init>
 1003b2e:	83 c4 10             	add    esp,0x10
 1003b31:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 1003b38:	00 
 1003b39:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
 1003b40:	8d a8 44 02 00 00    	lea    ebp,[eax+0x244]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:446
                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
                    fatfs_lfn_cache_init(&lfn, 0);

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
 1003b46:	8d 7c 24 1d          	lea    edi,[esp+0x1d]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:425

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
 1003b4a:	6a 00                	push   0x0
 1003b4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1003b50:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
 1003b57:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
 1003b5e:	e8 22 fd ff ff       	call   1003885 <fatfs_sector_reader>
 1003b63:	83 c4 10             	add    esp,0x10
 1003b66:	85 c0                	test   eax,eax
 1003b68:	0f 84 b7 01 00 00    	je     1003d25 <fatfs_get_file_entry+0x20d>
 1003b6e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
 1003b75:	8d 58 44             	lea    ebx,[eax+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:434
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
 1003b78:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:438

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
 1003b7a:	83 ec 0c             	sub    esp,0xc
 1003b7d:	53                   	push   ebx
 1003b7e:	e8 d1 29 00 00       	call   1006554 <fatfs_entry_lfn_text>
 1003b83:	83 c4 10             	add    esp,0x10
 1003b86:	85 c0                	test   eax,eax
 1003b88:	74 12                	je     1003b9c <fatfs_get_file_entry+0x84>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:439
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
 1003b8a:	83 ec 08             	sub    esp,0x8
 1003b8d:	53                   	push   ebx
 1003b8e:	57                   	push   edi
 1003b8f:	e8 e8 28 00 00       	call   100647c <fatfs_lfn_cache_entry>
 1003b94:	83 c4 10             	add    esp,0x10
 1003b97:	e9 74 01 00 00       	jmp    1003d10 <fatfs_get_file_entry+0x1f8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:442

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
 1003b9c:	83 ec 0c             	sub    esp,0xc
 1003b9f:	53                   	push   ebx
 1003ba0:	e8 c3 29 00 00       	call   1006568 <fatfs_entry_lfn_invalid>
 1003ba5:	83 c4 10             	add    esp,0x10
 1003ba8:	85 c0                	test   eax,eax
 1003baa:	74 13                	je     1003bbf <fatfs_get_file_entry+0xa7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:443
                    fatfs_lfn_cache_init(&lfn, 0);
 1003bac:	83 ec 08             	sub    esp,0x8
 1003baf:	6a 00                	push   0x0
 1003bb1:	57                   	push   edi
 1003bb2:	e8 89 28 00 00       	call   1006440 <fatfs_lfn_cache_init>
 1003bb7:	83 c4 10             	add    esp,0x10
 1003bba:	e9 51 01 00 00       	jmp    1003d10 <fatfs_get_file_entry+0x1f8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:446

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
 1003bbf:	83 ec 08             	sub    esp,0x8
 1003bc2:	53                   	push   ebx
 1003bc3:	57                   	push   edi
 1003bc4:	e8 cb 29 00 00       	call   1006594 <fatfs_entry_lfn_exists>
 1003bc9:	83 c4 10             	add    esp,0x10
 1003bcc:	85 c0                	test   eax,eax
 1003bce:	74 52                	je     1003c22 <fatfs_get_file_entry+0x10a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:448
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
 1003bd0:	83 ec 0c             	sub    esp,0xc
 1003bd3:	57                   	push   edi
 1003bd4:	e8 4d 29 00 00       	call   1006526 <fatfs_lfn_cache_get>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:451

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find))
 1003bd9:	83 c4 08             	add    esp,0x8
 1003bdc:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
 1003be3:	50                   	push   eax
 1003be4:	e8 a6 31 00 00       	call   1006d8f <fatfs_compare_names>
 1003be9:	83 c4 10             	add    esp,0x10
 1003bec:	85 c0                	test   eax,eax
 1003bee:	74 1f                	je     1003c0f <fatfs_get_file_entry+0xf7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:453
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
 1003bf0:	83 ec 04             	sub    esp,0x4
 1003bf3:	6a 20                	push   0x20
 1003bf5:	53                   	push   ebx
 1003bf6:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
 1003bfd:	e8 7e 5b 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:454
                        return 1;
 1003c02:	83 c4 10             	add    esp,0x10
 1003c05:	b8 01 00 00 00       	mov    eax,0x1
 1003c0a:	e9 1b 01 00 00       	jmp    1003d2a <fatfs_get_file_entry+0x212>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:457
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
 1003c0f:	83 ec 08             	sub    esp,0x8
 1003c12:	6a 00                	push   0x0
 1003c14:	57                   	push   edi
 1003c15:	e8 26 28 00 00       	call   1006440 <fatfs_lfn_cache_init>
 1003c1a:	83 c4 10             	add    esp,0x10
 1003c1d:	e9 ee 00 00 00       	jmp    1003d10 <fatfs_get_file_entry+0x1f8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:462
                }
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
 1003c22:	83 ec 0c             	sub    esp,0xc
 1003c25:	53                   	push   ebx
 1003c26:	e8 b4 29 00 00       	call   10065df <fatfs_entry_sfn_only>
 1003c2b:	83 c4 10             	add    esp,0x10
 1003c2e:	85 c0                	test   eax,eax
 1003c30:	0f 84 da 00 00 00    	je     1003d10 <fatfs_get_file_entry+0x1f8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:464
                {
                    memset(short_filename, 0, sizeof(short_filename));
 1003c36:	83 ec 04             	sub    esp,0x4
 1003c39:	6a 0d                	push   0xd
 1003c3b:	6a 00                	push   0x0
 1003c3d:	8d 84 24 2f 01 00 00 	lea    eax,[esp+0x12f]
 1003c44:	50                   	push   eax
 1003c45:	e8 e9 52 00 00       	call   1008f33 <memset>
 1003c4a:	83 c4 10             	add    esp,0x10
 1003c4d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:468 (discriminator 3)

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
 1003c52:	0f b6 14 06          	movzx  edx,BYTE PTR [esi+eax*1]
 1003c56:	88 94 04 23 01 00 00 	mov    BYTE PTR [esp+eax*1+0x123],dl
 1003c5d:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:467 (discriminator 3)
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
 1003c60:	83 f8 08             	cmp    eax,0x8
 1003c63:	75 ed                	jne    1003c52 <fatfs_get_file_entry+0x13a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:474

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 1003c65:	0f b6 46 08          	movzx  eax,BYTE PTR [esi+0x8]
 1003c69:	88 84 24 2c 01 00 00 	mov    BYTE PTR [esp+0x12c],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:476
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
 1003c70:	3c 20                	cmp    al,0x20
 1003c72:	0f 95 c0             	setne  al
 1003c75:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:474

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 1003c78:	0f b6 56 09          	movzx  edx,BYTE PTR [esi+0x9]
 1003c7c:	88 94 24 2d 01 00 00 	mov    BYTE PTR [esp+0x12d],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:476
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
 1003c83:	80 fa 20             	cmp    dl,0x20
 1003c86:	ba 01 00 00 00       	mov    edx,0x1
 1003c8b:	0f 45 c2             	cmovne eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:474

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 1003c8e:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
 1003c92:	88 94 24 2e 01 00 00 	mov    BYTE PTR [esp+0x12e],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:475
                        if (directoryEntry->Name[i] != ' ')
 1003c99:	80 fa 20             	cmp    dl,0x20
 1003c9c:	75 04                	jne    1003ca2 <fatfs_get_file_entry+0x18a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:480 (discriminator 2)
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
 1003c9e:	85 c0                	test   eax,eax
 1003ca0:	74 1e                	je     1003cc0 <fatfs_get_file_entry+0x1a8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:484
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
                            short_filename[8] = '.';
 1003ca2:	80 bc 24 23 01 00 00 	cmp    BYTE PTR [esp+0x123],0x2e
 1003ca9:	2e 
 1003caa:	ba 2e 00 00 00       	mov    edx,0x2e
 1003caf:	b8 20 00 00 00       	mov    eax,0x20
 1003cb4:	0f 45 c2             	cmovne eax,edx
 1003cb7:	88 84 24 2b 01 00 00 	mov    BYTE PTR [esp+0x12b],al
 1003cbe:	eb 08                	jmp    1003cc8 <fatfs_get_file_entry+0x1b0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:489
                        else
                            short_filename[8] = ' ';
                    }
                    else
                        short_filename[8] = ' ';
 1003cc0:	c6 84 24 2b 01 00 00 	mov    BYTE PTR [esp+0x12b],0x20
 1003cc7:	20 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:492

                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find))
 1003cc8:	83 ec 08             	sub    esp,0x8
 1003ccb:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
 1003cd2:	8d 84 24 2f 01 00 00 	lea    eax,[esp+0x12f]
 1003cd9:	50                   	push   eax
 1003cda:	e8 b0 30 00 00       	call   1006d8f <fatfs_compare_names>
 1003cdf:	83 c4 10             	add    esp,0x10
 1003ce2:	85 c0                	test   eax,eax
 1003ce4:	74 1c                	je     1003d02 <fatfs_get_file_entry+0x1ea>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:494
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
 1003ce6:	83 ec 04             	sub    esp,0x4
 1003ce9:	6a 20                	push   0x20
 1003ceb:	56                   	push   esi
 1003cec:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
 1003cf3:	e8 88 5a 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:495
                        return 1;
 1003cf8:	83 c4 10             	add    esp,0x10
 1003cfb:	b8 01 00 00 00       	mov    eax,0x1
 1003d00:	eb 28                	jmp    1003d2a <fatfs_get_file_entry+0x212>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:498
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
 1003d02:	83 ec 08             	sub    esp,0x8
 1003d05:	6a 00                	push   0x0
 1003d07:	57                   	push   edi
 1003d08:	e8 33 27 00 00       	call   1006440 <fatfs_lfn_cache_init>
 1003d0d:	83 c4 10             	add    esp,0x10
 1003d10:	83 c3 20             	add    ebx,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:428 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1003d13:	39 eb                	cmp    ebx,ebp
 1003d15:	0f 85 5d fe ff ff    	jne    1003b78 <fatfs_get_file_entry+0x60>
 1003d1b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
 1003d20:	e9 25 fe ff ff       	jmp    1003b4a <fatfs_get_file_entry+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:506
        }
        else
            break;
    } // End of while loop

    return 0;
 1003d25:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:507
}
 1003d2a:	81 c4 3c 01 00 00    	add    esp,0x13c
 1003d30:	5b                   	pop    ebx
 1003d31:	5e                   	pop    esi
 1003d32:	5f                   	pop    edi
 1003d33:	5d                   	pop    ebp
 1003d34:	c3                   	ret    

01003d35 <fatfs_sfn_exists>:
fatfs_sfn_exists():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:514
// fatfs_sfn_exists: Check if a short filename exists.
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
 1003d35:	55                   	push   ebp
 1003d36:	57                   	push   edi
 1003d37:	56                   	push   esi
 1003d38:	53                   	push   ebx
 1003d39:	83 ec 0c             	sub    esp,0xc
 1003d3c:	bd 00 00 00 00       	mov    ebp,0x0
 1003d41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 1003d45:	8d b8 44 02 00 00    	lea    edi,[eax+0x244]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:524

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
 1003d4b:	6a 00                	push   0x0
 1003d4d:	55                   	push   ebp
 1003d4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1003d52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1003d56:	e8 2a fb ff ff       	call   1003885 <fatfs_sector_reader>
 1003d5b:	83 c4 10             	add    esp,0x10
 1003d5e:	85 c0                	test   eax,eax
 1003d60:	74 5e                	je     1003dc0 <fatfs_sfn_exists+0x8b>
 1003d62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 1003d66:	8d 58 44             	lea    ebx,[eax+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:537
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
 1003d69:	83 ec 0c             	sub    esp,0xc
 1003d6c:	53                   	push   ebx
 1003d6d:	e8 e2 27 00 00       	call   1006554 <fatfs_entry_lfn_text>
 1003d72:	83 c4 10             	add    esp,0x10
 1003d75:	85 c0                	test   eax,eax
 1003d77:	75 36                	jne    1003daf <fatfs_sfn_exists+0x7a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:541
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
 1003d79:	83 ec 0c             	sub    esp,0xc
 1003d7c:	53                   	push   ebx
 1003d7d:	e8 e6 27 00 00       	call   1006568 <fatfs_entry_lfn_invalid>
 1003d82:	83 c4 10             	add    esp,0x10
 1003d85:	85 c0                	test   eax,eax
 1003d87:	75 26                	jne    1003daf <fatfs_sfn_exists+0x7a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:546
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
 1003d89:	83 ec 0c             	sub    esp,0xc
 1003d8c:	53                   	push   ebx
 1003d8d:	e8 4d 28 00 00       	call   10065df <fatfs_entry_sfn_only>
 1003d92:	83 c4 10             	add    esp,0x10
 1003d95:	85 c0                	test   eax,eax
 1003d97:	74 16                	je     1003daf <fatfs_sfn_exists+0x7a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:548
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
 1003d99:	83 ec 04             	sub    esp,0x4
 1003d9c:	6a 0b                	push   0xb
 1003d9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 1003da2:	53                   	push   ebx
 1003da3:	e8 84 60 00 00       	call   1009e2c <strncmp>
 1003da8:	83 c4 10             	add    esp,0x10
 1003dab:	85 c0                	test   eax,eax
 1003dad:	74 0c                	je     1003dbb <fatfs_sfn_exists+0x86>
 1003daf:	83 c3 20             	add    ebx,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:527 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1003db2:	39 fb                	cmp    ebx,edi
 1003db4:	75 b3                	jne    1003d69 <fatfs_sfn_exists+0x34>
 1003db6:	83 c5 01             	add    ebp,0x1
 1003db9:	eb 90                	jmp    1003d4b <fatfs_sfn_exists+0x16>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:549
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
                        return 1;
 1003dbb:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:558
        else
            break;
    } // End of while loop

    return 0;
}
 1003dc0:	83 c4 0c             	add    esp,0xc
 1003dc3:	5b                   	pop    ebx
 1003dc4:	5e                   	pop    esi
 1003dc5:	5f                   	pop    edi
 1003dc6:	5d                   	pop    ebp
 1003dc7:	c3                   	ret    

01003dc8 <fatfs_update_timestamps>:
fatfs_update_timestamps():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:565
//-------------------------------------------------------------
// fatfs_update_timestamps: Update date/time details
//-------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access)
{
 1003dc8:	57                   	push   edi
 1003dc9:	56                   	push   esi
 1003dca:	53                   	push   ebx
 1003dcb:	83 ec 1c             	sub    esp,0x1c
 1003dce:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:572
    struct tm * time_info;
    uint16 fat_time;
    uint16 fat_date;

    // Get system time
    time(&time_now);
 1003dd2:	8d 5c 24 18          	lea    ebx,[esp+0x18]
 1003dd6:	53                   	push   ebx
 1003dd7:	e8 18 61 00 00       	call   1009ef4 <time>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:575

    // Convert to local time
    time_info = localtime(&time_now);
 1003ddc:	89 1c 24             	mov    DWORD PTR [esp],ebx
 1003ddf:	e8 9f 63 00 00       	call   100a183 <localtime>
 1003de4:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:578

    // Convert time to FAT format
    fat_time = fatfs_convert_to_fat_time(time_info->tm_hour, time_info->tm_min, time_info->tm_sec);
 1003de6:	83 c4 0c             	add    esp,0xc
 1003de9:	ff 30                	push   DWORD PTR [eax]
 1003deb:	ff 70 04             	push   DWORD PTR [eax+0x4]
 1003dee:	ff 70 08             	push   DWORD PTR [eax+0x8]
 1003df1:	e8 9a 2c 00 00       	call   1006a90 <fatfs_convert_to_fat_time>
 1003df6:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:581

    // Convert date to FAT format
    fat_date = fatfs_convert_to_fat_date(time_info->tm_mday, time_info->tm_mon + 1, time_info->tm_year + 1900);
 1003df8:	83 c4 0c             	add    esp,0xc
 1003dfb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
 1003dfe:	05 6c 07 00 00       	add    eax,0x76c
 1003e03:	50                   	push   eax
 1003e04:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 1003e07:	83 c0 01             	add    eax,0x1
 1003e0a:	50                   	push   eax
 1003e0b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 1003e0e:	e8 a3 2c 00 00       	call   1006ab6 <fatfs_convert_to_fat_date>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:584

    // Update requested fields
    if (create)
 1003e13:	83 c4 10             	add    esp,0x10
 1003e16:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
 1003e1b:	74 1a                	je     1003e37 <fatfs_update_timestamps+0x6f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:586
    {
        directoryEntry->CrtTime[1] = fat_time >> 8;
 1003e1d:	89 fa                	mov    edx,edi
 1003e1f:	66 c1 ea 08          	shr    dx,0x8
 1003e23:	88 56 0f             	mov    BYTE PTR [esi+0xf],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:587
        directoryEntry->CrtTime[0] = fat_time >> 0;
 1003e26:	89 f9                	mov    ecx,edi
 1003e28:	88 4e 0e             	mov    BYTE PTR [esi+0xe],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:588
        directoryEntry->CrtDate[1] = fat_date >> 8;
 1003e2b:	89 c2                	mov    edx,eax
 1003e2d:	66 c1 ea 08          	shr    dx,0x8
 1003e31:	88 56 11             	mov    BYTE PTR [esi+0x11],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:589
        directoryEntry->CrtDate[0] = fat_date >> 0;
 1003e34:	88 46 10             	mov    BYTE PTR [esi+0x10],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:592
    }

    if (modify)
 1003e37:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
 1003e3c:	74 1a                	je     1003e58 <fatfs_update_timestamps+0x90>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:594
    {
        directoryEntry->WrtTime[1] = fat_time >> 8;
 1003e3e:	89 fa                	mov    edx,edi
 1003e40:	66 c1 ea 08          	shr    dx,0x8
 1003e44:	88 56 17             	mov    BYTE PTR [esi+0x17],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:595
        directoryEntry->WrtTime[0] = fat_time >> 0;
 1003e47:	89 f9                	mov    ecx,edi
 1003e49:	88 4e 16             	mov    BYTE PTR [esi+0x16],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:596
        directoryEntry->WrtDate[1] = fat_date >> 8;
 1003e4c:	89 c2                	mov    edx,eax
 1003e4e:	66 c1 ea 08          	shr    dx,0x8
 1003e52:	88 56 19             	mov    BYTE PTR [esi+0x19],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:597
        directoryEntry->WrtDate[0] = fat_date >> 0;
 1003e55:	88 46 18             	mov    BYTE PTR [esi+0x18],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:600
    }

    if (access)
 1003e58:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
 1003e5d:	74 0c                	je     1003e6b <fatfs_update_timestamps+0xa3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:604
    {
        directoryEntry->LstAccDate[1] = fat_time >> 8;
        directoryEntry->LstAccDate[0] = fat_time >> 0;
        directoryEntry->LstAccDate[1] = fat_date >> 8;
 1003e5f:	89 c2                	mov    edx,eax
 1003e61:	66 c1 ea 08          	shr    dx,0x8
 1003e65:	88 56 13             	mov    BYTE PTR [esi+0x13],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:605
        directoryEntry->LstAccDate[0] = fat_date >> 0;
 1003e68:	88 46 12             	mov    BYTE PTR [esi+0x12],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:609
    }

    return 1;
}
 1003e6b:	b8 01 00 00 00       	mov    eax,0x1
 1003e70:	83 c4 10             	add    esp,0x10
 1003e73:	5b                   	pop    ebx
 1003e74:	5e                   	pop    esi
 1003e75:	5f                   	pop    edi
 1003e76:	c3                   	ret    

01003e77 <fatfs_update_file_length>:
fatfs_update_file_length():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:617
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
 1003e77:	55                   	push   ebp
 1003e78:	57                   	push   edi
 1003e79:	56                   	push   esi
 1003e7a:	53                   	push   ebx
 1003e7b:	83 ec 1c             	sub    esp,0x1c
 1003e7e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:624
    uint16 recordoffset = 0;
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
 1003e82:	83 7e 38 00          	cmp    DWORD PTR [esi+0x38],0x0
 1003e86:	0f 84 cb 00 00 00    	je     1003f57 <fatfs_update_file_length+0xe0>
 1003e8c:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 1003e93:	00 
 1003e94:	8d be 44 02 00 00    	lea    edi,[esi+0x244]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:631

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
 1003e9a:	6a 00                	push   0x0
 1003e9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1003ea0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 1003ea4:	56                   	push   esi
 1003ea5:	e8 db f9 ff ff       	call   1003885 <fatfs_sector_reader>
 1003eaa:	83 c4 10             	add    esp,0x10
 1003ead:	85 c0                	test   eax,eax
 1003eaf:	0f 84 a7 00 00 00    	je     1003f5c <fatfs_update_file_length+0xe5>
 1003eb5:	8d 5e 44             	lea    ebx,[esi+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:640
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
 1003eb8:	8d 6e 44             	lea    ebp,[esi+0x44]
 1003ebb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:644

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
 1003ebf:	83 ec 0c             	sub    esp,0xc
 1003ec2:	53                   	push   ebx
 1003ec3:	e8 8c 26 00 00       	call   1006554 <fatfs_entry_lfn_text>
 1003ec8:	83 c4 10             	add    esp,0x10
 1003ecb:	85 c0                	test   eax,eax
 1003ecd:	75 73                	jne    1003f42 <fatfs_update_file_length+0xcb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:648
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
 1003ecf:	83 ec 0c             	sub    esp,0xc
 1003ed2:	53                   	push   ebx
 1003ed3:	e8 90 26 00 00       	call   1006568 <fatfs_entry_lfn_invalid>
 1003ed8:	83 c4 10             	add    esp,0x10
 1003edb:	85 c0                	test   eax,eax
 1003edd:	75 63                	jne    1003f42 <fatfs_update_file_length+0xcb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:654
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
 1003edf:	83 ec 0c             	sub    esp,0xc
 1003ee2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1003ee6:	e8 f4 26 00 00       	call   10065df <fatfs_entry_sfn_only>
 1003eeb:	83 c4 10             	add    esp,0x10
 1003eee:	85 c0                	test   eax,eax
 1003ef0:	74 50                	je     1003f42 <fatfs_update_file_length+0xcb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:656
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
 1003ef2:	83 ec 04             	sub    esp,0x4
 1003ef5:	6a 0b                	push   0xb
 1003ef7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
 1003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1003eff:	e8 28 5f 00 00       	call   1009e2c <strncmp>
 1003f04:	83 c4 10             	add    esp,0x10
 1003f07:	85 c0                	test   eax,eax
 1003f09:	75 37                	jne    1003f42 <fatfs_update_file_length+0xcb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:658
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
 1003f0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
 1003f0f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
 1003f13:	89 47 1c             	mov    DWORD PTR [edi+0x1c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:662

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
 1003f16:	6a 01                	push   0x1
 1003f18:	6a 01                	push   0x1
 1003f1a:	6a 00                	push   0x0
 1003f1c:	57                   	push   edi
 1003f1d:	e8 a6 fe ff ff       	call   1003dc8 <fatfs_update_timestamps>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:666
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
 1003f22:	83 c4 0c             	add    esp,0xc
 1003f25:	6a 20                	push   0x20
 1003f27:	57                   	push   edi
 1003f28:	57                   	push   edi
 1003f29:	e8 52 58 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:669

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1003f2e:	83 c4 0c             	add    esp,0xc
 1003f31:	6a 01                	push   0x1
 1003f33:	55                   	push   ebp
 1003f34:	ff b6 44 02 00 00    	push   DWORD PTR [esi+0x244]
 1003f3a:	ff 56 38             	call   DWORD PTR [esi+0x38]
 1003f3d:	83 c4 10             	add    esp,0x10
 1003f40:	eb 1a                	jmp    1003f5c <fatfs_update_file_length+0xe5>
 1003f42:	83 c3 20             	add    ebx,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:634 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1003f45:	39 fb                	cmp    ebx,edi
 1003f47:	0f 85 6b ff ff ff    	jne    1003eb8 <fatfs_update_file_length+0x41>
 1003f4d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
 1003f52:	e9 43 ff ff ff       	jmp    1003e9a <fatfs_update_file_length+0x23>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:625
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
 1003f57:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:679
        else
            break;
    } // End of while loop

    return 0;
}
 1003f5c:	83 c4 1c             	add    esp,0x1c
 1003f5f:	5b                   	pop    ebx
 1003f60:	5e                   	pop    esi
 1003f61:	5f                   	pop    edi
 1003f62:	5d                   	pop    ebp
 1003f63:	c3                   	ret    

01003f64 <fatfs_mark_file_deleted>:
fatfs_mark_file_deleted():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:687
// fatfs_mark_file_deleted: Find a SFN entry and mark if as deleted
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
 1003f64:	55                   	push   ebp
 1003f65:	57                   	push   edi
 1003f66:	56                   	push   esi
 1003f67:	53                   	push   ebx
 1003f68:	83 ec 1c             	sub    esp,0x1c
 1003f6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:694
    uint16 recordoffset = 0;
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
 1003f6f:	83 7e 38 00          	cmp    DWORD PTR [esi+0x38],0x0
 1003f73:	0f 84 c7 00 00 00    	je     1004040 <fatfs_mark_file_deleted+0xdc>
 1003f79:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 1003f80:	00 
 1003f81:	8d be 44 02 00 00    	lea    edi,[esi+0x244]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:701

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
 1003f87:	6a 00                	push   0x0
 1003f89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1003f8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 1003f91:	56                   	push   esi
 1003f92:	e8 ee f8 ff ff       	call   1003885 <fatfs_sector_reader>
 1003f97:	83 c4 10             	add    esp,0x10
 1003f9a:	85 c0                	test   eax,eax
 1003f9c:	0f 84 a3 00 00 00    	je     1004045 <fatfs_mark_file_deleted+0xe1>
 1003fa2:	8d 5e 44             	lea    ebx,[esi+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:710
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
 1003fa5:	8d 6e 44             	lea    ebp,[esi+0x44]
 1003fa8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:714

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
 1003fac:	83 ec 0c             	sub    esp,0xc
 1003faf:	53                   	push   ebx
 1003fb0:	e8 9f 25 00 00       	call   1006554 <fatfs_entry_lfn_text>
 1003fb5:	83 c4 10             	add    esp,0x10
 1003fb8:	85 c0                	test   eax,eax
 1003fba:	75 6f                	jne    100402b <fatfs_mark_file_deleted+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:718
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
 1003fbc:	83 ec 0c             	sub    esp,0xc
 1003fbf:	53                   	push   ebx
 1003fc0:	e8 a3 25 00 00       	call   1006568 <fatfs_entry_lfn_invalid>
 1003fc5:	83 c4 10             	add    esp,0x10
 1003fc8:	85 c0                	test   eax,eax
 1003fca:	75 5f                	jne    100402b <fatfs_mark_file_deleted+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:724
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
 1003fcc:	83 ec 0c             	sub    esp,0xc
 1003fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1003fd3:	e8 07 26 00 00       	call   10065df <fatfs_entry_sfn_only>
 1003fd8:	83 c4 10             	add    esp,0x10
 1003fdb:	85 c0                	test   eax,eax
 1003fdd:	74 4c                	je     100402b <fatfs_mark_file_deleted+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:726
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
 1003fdf:	83 ec 04             	sub    esp,0x4
 1003fe2:	6a 0b                	push   0xb
 1003fe4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
 1003fe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1003fec:	e8 3b 5e 00 00       	call   1009e2c <strncmp>
 1003ff1:	83 c4 10             	add    esp,0x10
 1003ff4:	85 c0                	test   eax,eax
 1003ff6:	75 33                	jne    100402b <fatfs_mark_file_deleted+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:729
                    {
                        // Mark as deleted
                        directoryEntry->Name[0] = FILE_HEADER_DELETED;
 1003ff8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
 1003ffc:	c6 07 e5             	mov    BYTE PTR [edi],0xe5
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:733

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
 1003fff:	6a 01                	push   0x1
 1004001:	6a 01                	push   0x1
 1004003:	6a 00                	push   0x0
 1004005:	57                   	push   edi
 1004006:	e8 bd fd ff ff       	call   1003dc8 <fatfs_update_timestamps>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:737
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
 100400b:	83 c4 0c             	add    esp,0xc
 100400e:	6a 20                	push   0x20
 1004010:	57                   	push   edi
 1004011:	57                   	push   edi
 1004012:	e8 69 57 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:740

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1004017:	83 c4 0c             	add    esp,0xc
 100401a:	6a 01                	push   0x1
 100401c:	55                   	push   ebp
 100401d:	ff b6 44 02 00 00    	push   DWORD PTR [esi+0x244]
 1004023:	ff 56 38             	call   DWORD PTR [esi+0x38]
 1004026:	83 c4 10             	add    esp,0x10
 1004029:	eb 1a                	jmp    1004045 <fatfs_mark_file_deleted+0xe1>
 100402b:	83 c3 20             	add    ebx,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:704 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 100402e:	39 fb                	cmp    ebx,edi
 1004030:	0f 85 6f ff ff ff    	jne    1003fa5 <fatfs_mark_file_deleted+0x41>
 1004036:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
 100403b:	e9 47 ff ff ff       	jmp    1003f87 <fatfs_mark_file_deleted+0x23>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:695
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
 1004040:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:750
        else
            break;
    } // End of while loop

    return 0;
}
 1004045:	83 c4 1c             	add    esp,0x1c
 1004048:	5b                   	pop    ebx
 1004049:	5e                   	pop    esi
 100404a:	5f                   	pop    edi
 100404b:	5d                   	pop    ebp
 100404c:	c3                   	ret    

0100404d <fatfs_list_directory_start>:
fatfs_list_directory_start():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:757
//-----------------------------------------------------------------------------
// fatfs_list_directory_start: Initialise a directory listing procedure
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
 100404d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:758
    dirls->cluster = StartCluster;
 1004051:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1004055:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:759
    dirls->sector = 0;
 1004058:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:760
    dirls->offset = 0;
 100405e:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
 1004062:	c3                   	ret    

01004063 <fatfs_list_directory_next>:
fatfs_list_directory_next():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:769
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
 1004063:	55                   	push   ebp
 1004064:	57                   	push   edi
 1004065:	56                   	push   esi
 1004066:	53                   	push   ebx
 1004067:	81 ec 34 01 00 00    	sub    esp,0x134
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:780
    struct lfn_cache lfn;
    int dotRequired = 0;
    int result = 0;

    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
 100406d:	6a 00                	push   0x0
 100406f:	8d 44 24 19          	lea    eax,[esp+0x19]
 1004073:	50                   	push   eax
 1004074:	e8 c7 23 00 00       	call   1006440 <fatfs_lfn_cache_init>
 1004079:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:794
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
 100407c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
 1004083:	8d 78 44             	lea    edi,[eax+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:799

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
 1004086:	8d 6c 24 0d          	lea    ebp,[esp+0xd]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:785
    fatfs_lfn_cache_init(&lfn, 0);

    while (1)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
 100408a:	6a 00                	push   0x0
 100408c:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
 1004093:	ff 30                	push   DWORD PTR [eax]
 1004095:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
 100409c:	ff 70 04             	push   DWORD PTR [eax+0x4]
 100409f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
 10040a6:	e8 da f7 ff ff       	call   1003885 <fatfs_sector_reader>
 10040ab:	83 c4 10             	add    esp,0x10
 10040ae:	85 c0                	test   eax,eax
 10040b0:	0f 84 fa 02 00 00    	je     10043b0 <fatfs_list_directory_next+0x34d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:788
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 10040b6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
 10040bd:	0f b6 70 08          	movzx  esi,BYTE PTR [eax+0x8]
 10040c1:	89 f0                	mov    eax,esi
 10040c3:	3c 0f                	cmp    al,0xf
 10040c5:	0f 87 d2 02 00 00    	ja     100439d <fatfs_list_directory_next+0x33a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:794
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
 10040cb:	89 f3                	mov    ebx,esi
 10040cd:	c1 e3 05             	shl    ebx,0x5
 10040d0:	81 e3 e0 1f 00 00    	and    ebx,0x1fe0
 10040d6:	01 fb                	add    ebx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:798

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
 10040d8:	83 ec 0c             	sub    esp,0xc
 10040db:	53                   	push   ebx
 10040dc:	e8 73 24 00 00       	call   1006554 <fatfs_entry_lfn_text>
 10040e1:	83 c4 10             	add    esp,0x10
 10040e4:	85 c0                	test   eax,eax
 10040e6:	74 12                	je     10040fa <fatfs_list_directory_next+0x97>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:799
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
 10040e8:	83 ec 08             	sub    esp,0x8
 10040eb:	53                   	push   ebx
 10040ec:	55                   	push   ebp
 10040ed:	e8 8a 23 00 00       	call   100647c <fatfs_lfn_cache_entry>
 10040f2:	83 c4 10             	add    esp,0x10
 10040f5:	e9 96 02 00 00       	jmp    1004390 <fatfs_list_directory_next+0x32d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:802

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
 10040fa:	83 ec 0c             	sub    esp,0xc
 10040fd:	53                   	push   ebx
 10040fe:	e8 65 24 00 00       	call   1006568 <fatfs_entry_lfn_invalid>
 1004103:	83 c4 10             	add    esp,0x10
 1004106:	85 c0                	test   eax,eax
 1004108:	74 13                	je     100411d <fatfs_list_directory_next+0xba>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:803
                    fatfs_lfn_cache_init(&lfn, 0);
 100410a:	83 ec 08             	sub    esp,0x8
 100410d:	6a 00                	push   0x0
 100410f:	55                   	push   ebp
 1004110:	e8 2b 23 00 00       	call   1006440 <fatfs_lfn_cache_init>
 1004115:	83 c4 10             	add    esp,0x10
 1004118:	e9 73 02 00 00       	jmp    1004390 <fatfs_list_directory_next+0x32d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:806

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
 100411d:	83 ec 08             	sub    esp,0x8
 1004120:	53                   	push   ebx
 1004121:	55                   	push   ebp
 1004122:	e8 6d 24 00 00       	call   1006594 <fatfs_entry_lfn_exists>
 1004127:	83 c4 10             	add    esp,0x10
 100412a:	85 c0                	test   eax,eax
 100412c:	0f 84 da 00 00 00    	je     100420c <fatfs_list_directory_next+0x1a9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:809
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
 1004132:	83 ec 0c             	sub    esp,0xc
 1004135:	8d 44 24 19          	lea    eax,[esp+0x19]
 1004139:	50                   	push   eax
 100413a:	e8 e7 23 00 00       	call   1006526 <fatfs_lfn_cache_get>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:810
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
 100413f:	83 c4 0c             	add    esp,0xc
 1004142:	6a 7f                	push   0x7f
 1004144:	50                   	push   eax
 1004145:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
 100414c:	e8 47 5d 00 00       	call   1009e98 <strncpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:812

                    if (fatfs_entry_is_dir(directoryEntry))
 1004151:	89 1c 24             	mov    DWORD PTR [esp],ebx
 1004154:	e8 bf 24 00 00       	call   1006618 <fatfs_entry_is_dir>
 1004159:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:813
                        entry->is_dir = 1;
 100415c:	85 c0                	test   eax,eax
 100415e:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
 1004165:	0f 95 80 80 00 00 00 	setne  BYTE PTR [eax+0x80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:819
                    else
                        entry->is_dir = 0;

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
 100416c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
 1004170:	c1 e0 08             	shl    eax,0x8
 1004173:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
 1004177:	09 d0                	or     eax,edx
 1004179:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
 1004180:	66 89 81 94 00 00 00 	mov    WORD PTR [ecx+0x94],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:820
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
 1004187:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
 100418b:	c1 e0 08             	shl    eax,0x8
 100418e:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
 1004192:	09 d0                	or     eax,edx
 1004194:	66 89 81 92 00 00 00 	mov    WORD PTR [ecx+0x92],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:821
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
 100419b:	0f b6 43 13          	movzx  eax,BYTE PTR [ebx+0x13]
 100419f:	c1 e0 08             	shl    eax,0x8
 10041a2:	0f b6 53 12          	movzx  edx,BYTE PTR [ebx+0x12]
 10041a6:	09 d0                	or     eax,edx
 10041a8:	66 89 81 8c 00 00 00 	mov    WORD PTR [ecx+0x8c],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:822
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
 10041af:	0f b6 43 17          	movzx  eax,BYTE PTR [ebx+0x17]
 10041b3:	c1 e0 08             	shl    eax,0x8
 10041b6:	0f b6 53 16          	movzx  edx,BYTE PTR [ebx+0x16]
 10041ba:	09 d0                	or     eax,edx
 10041bc:	66 89 81 8e 00 00 00 	mov    WORD PTR [ecx+0x8e],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:823
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
 10041c3:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
 10041c7:	c1 e0 08             	shl    eax,0x8
 10041ca:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
 10041ce:	09 d0                	or     eax,edx
 10041d0:	66 89 81 90 00 00 00 	mov    WORD PTR [ecx+0x90],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:826
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
 10041d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
 10041da:	89 81 88 00 00 00    	mov    DWORD PTR [ecx+0x88],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:827
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
 10041e0:	0f b7 43 14          	movzx  eax,WORD PTR [ebx+0x14]
 10041e4:	c1 e0 10             	shl    eax,0x10
 10041e7:	89 c2                	mov    edx,eax
 10041e9:	0f b7 43 1a          	movzx  eax,WORD PTR [ebx+0x1a]
 10041ed:	09 d0                	or     eax,edx
 10041ef:	89 81 84 00 00 00    	mov    DWORD PTR [ecx+0x84],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:830

                    // Next starting position
                    dirls->offset = item + 1;
 10041f5:	8d 46 01             	lea    eax,[esi+0x1]
 10041f8:	8b 8c 24 44 01 00 00 	mov    ecx,DWORD PTR [esp+0x144]
 10041ff:	88 41 08             	mov    BYTE PTR [ecx+0x8],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:832
                    result = 1;
                    return 1;
 1004202:	b8 01 00 00 00       	mov    eax,0x1
 1004207:	e9 a4 01 00 00       	jmp    10043b0 <fatfs_list_directory_next+0x34d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:837
                }
                // Normal Entry, only 8.3 Text
                else
#endif
                if ( fatfs_entry_sfn_only(directoryEntry) )
 100420c:	83 ec 0c             	sub    esp,0xc
 100420f:	53                   	push   ebx
 1004210:	e8 ca 23 00 00       	call   10065df <fatfs_entry_sfn_only>
 1004215:	83 c4 10             	add    esp,0x10
 1004218:	85 c0                	test   eax,eax
 100421a:	0f 84 70 01 00 00    	je     1004390 <fatfs_list_directory_next+0x32d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:839
                {
                    fatfs_lfn_cache_init(&lfn, 0);
 1004220:	83 ec 08             	sub    esp,0x8
 1004223:	6a 00                	push   0x0
 1004225:	8d 44 24 19          	lea    eax,[esp+0x19]
 1004229:	50                   	push   eax
 100422a:	e8 11 22 00 00       	call   1006440 <fatfs_lfn_cache_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:841

                    memset(short_filename, 0, sizeof(short_filename));
 100422f:	83 c4 0c             	add    esp,0xc
 1004232:	6a 0d                	push   0xd
 1004234:	6a 00                	push   0x0
 1004236:	8d 84 24 1f 01 00 00 	lea    eax,[esp+0x11f]
 100423d:	50                   	push   eax
 100423e:	e8 f0 4c 00 00       	call   1008f33 <memset>
 1004243:	83 c4 10             	add    esp,0x10
 1004246:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:845 (discriminator 3)

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
 100424b:	0f b6 14 03          	movzx  edx,BYTE PTR [ebx+eax*1]
 100424f:	88 94 04 13 01 00 00 	mov    BYTE PTR [esp+eax*1+0x113],dl
 1004256:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:844 (discriminator 3)
                    fatfs_lfn_cache_init(&lfn, 0);

                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
 1004259:	83 f8 08             	cmp    eax,0x8
 100425c:	75 ed                	jne    100424b <fatfs_list_directory_next+0x1e8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:851

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 100425e:	0f b6 43 08          	movzx  eax,BYTE PTR [ebx+0x8]
 1004262:	88 84 24 1c 01 00 00 	mov    BYTE PTR [esp+0x11c],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:853
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
 1004269:	3c 20                	cmp    al,0x20
 100426b:	0f 95 c0             	setne  al
 100426e:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:851

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 1004271:	0f b6 53 09          	movzx  edx,BYTE PTR [ebx+0x9]
 1004275:	88 94 24 1d 01 00 00 	mov    BYTE PTR [esp+0x11d],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:853
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
 100427c:	80 fa 20             	cmp    dl,0x20
 100427f:	ba 01 00 00 00       	mov    edx,0x1
 1004284:	0f 45 c2             	cmovne eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:851

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 1004287:	0f b6 53 0a          	movzx  edx,BYTE PTR [ebx+0xa]
 100428b:	88 94 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:852
                        if (directoryEntry->Name[i] != ' ')
 1004292:	80 fa 20             	cmp    dl,0x20
 1004295:	75 04                	jne    100429b <fatfs_list_directory_next+0x238>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:857 (discriminator 2)
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
 1004297:	85 c0                	test   eax,eax
 1004299:	74 1e                	je     10042b9 <fatfs_list_directory_next+0x256>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:861
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
                            short_filename[8] = '.';
 100429b:	80 bc 24 13 01 00 00 	cmp    BYTE PTR [esp+0x113],0x2e
 10042a2:	2e 
 10042a3:	ba 2e 00 00 00       	mov    edx,0x2e
 10042a8:	b8 20 00 00 00       	mov    eax,0x20
 10042ad:	0f 45 c2             	cmovne eax,edx
 10042b0:	88 84 24 1b 01 00 00 	mov    BYTE PTR [esp+0x11b],al
 10042b7:	eb 08                	jmp    10042c1 <fatfs_list_directory_next+0x25e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:866
                        else
                            short_filename[8] = ' ';
                    }
                    else
                        short_filename[8] = ' ';
 10042b9:	c6 84 24 1b 01 00 00 	mov    BYTE PTR [esp+0x11b],0x20
 10042c0:	20 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:868

                    fatfs_get_sfn_display_name(entry->filename, short_filename);
 10042c1:	83 ec 08             	sub    esp,0x8
 10042c4:	8d 84 24 1b 01 00 00 	lea    eax,[esp+0x11b]
 10042cb:	50                   	push   eax
 10042cc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
 10042d3:	e8 56 2c 00 00       	call   1006f2e <fatfs_get_sfn_display_name>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:870

                    if (fatfs_entry_is_dir(directoryEntry))
 10042d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
 10042db:	e8 38 23 00 00       	call   1006618 <fatfs_entry_is_dir>
 10042e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:871
                        entry->is_dir = 1;
 10042e3:	85 c0                	test   eax,eax
 10042e5:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
 10042ec:	0f 95 80 80 00 00 00 	setne  BYTE PTR [eax+0x80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:877
                    else
                        entry->is_dir = 0;

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
 10042f3:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
 10042f7:	c1 e0 08             	shl    eax,0x8
 10042fa:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
 10042fe:	09 d0                	or     eax,edx
 1004300:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
 1004307:	66 89 81 94 00 00 00 	mov    WORD PTR [ecx+0x94],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:878
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
 100430e:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
 1004312:	c1 e0 08             	shl    eax,0x8
 1004315:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
 1004319:	09 d0                	or     eax,edx
 100431b:	66 89 81 92 00 00 00 	mov    WORD PTR [ecx+0x92],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:879
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
 1004322:	0f b6 43 13          	movzx  eax,BYTE PTR [ebx+0x13]
 1004326:	c1 e0 08             	shl    eax,0x8
 1004329:	0f b6 53 12          	movzx  edx,BYTE PTR [ebx+0x12]
 100432d:	09 d0                	or     eax,edx
 100432f:	66 89 81 8c 00 00 00 	mov    WORD PTR [ecx+0x8c],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:880
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
 1004336:	0f b6 43 17          	movzx  eax,BYTE PTR [ebx+0x17]
 100433a:	c1 e0 08             	shl    eax,0x8
 100433d:	0f b6 53 16          	movzx  edx,BYTE PTR [ebx+0x16]
 1004341:	09 d0                	or     eax,edx
 1004343:	66 89 81 8e 00 00 00 	mov    WORD PTR [ecx+0x8e],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:881
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
 100434a:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
 100434e:	c1 e0 08             	shl    eax,0x8
 1004351:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
 1004355:	09 d0                	or     eax,edx
 1004357:	66 89 81 90 00 00 00 	mov    WORD PTR [ecx+0x90],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:884
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
 100435e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
 1004361:	89 81 88 00 00 00    	mov    DWORD PTR [ecx+0x88],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:885
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
 1004367:	0f b7 43 14          	movzx  eax,WORD PTR [ebx+0x14]
 100436b:	c1 e0 10             	shl    eax,0x10
 100436e:	89 c2                	mov    edx,eax
 1004370:	0f b7 43 1a          	movzx  eax,WORD PTR [ebx+0x1a]
 1004374:	09 d0                	or     eax,edx
 1004376:	89 81 84 00 00 00    	mov    DWORD PTR [ecx+0x84],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:888

                    // Next starting position
                    dirls->offset = item + 1;
 100437c:	8d 46 01             	lea    eax,[esi+0x1]
 100437f:	8b 8c 24 44 01 00 00 	mov    ecx,DWORD PTR [esp+0x144]
 1004386:	88 41 08             	mov    BYTE PTR [ecx+0x8],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:890
                    result = 1;
                    return 1;
 1004389:	b8 01 00 00 00       	mov    eax,0x1
 100438e:	eb 20                	jmp    10043b0 <fatfs_list_directory_next+0x34d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:788 (discriminator 2)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1004390:	83 c6 01             	add    esi,0x1
 1004393:	89 f0                	mov    eax,esi
 1004395:	3c 10                	cmp    al,0x10
 1004397:	0f 85 2e fd ff ff    	jne    10040cb <fatfs_list_directory_next+0x68>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:895
                    return 1;
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
 100439d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
 10043a4:	83 00 01             	add    DWORD PTR [eax],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:896
            dirls->offset = 0;
 10043a7:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:900
        }
        else
            break;
    }
 10043ab:	e9 da fc ff ff       	jmp    100408a <fatfs_list_directory_next+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:903

    return result;
}
 10043b0:	81 c4 2c 01 00 00    	add    esp,0x12c
 10043b6:	5b                   	pop    ebx
 10043b7:	5e                   	pop    esi
 10043b8:	5f                   	pop    edi
 10043b9:	5d                   	pop    ebp
 10043ba:	c3                   	ret    
 10043bb:	90                   	nop

010043bc <fatfs_cache_init>:
fatfs_cache_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:43

//-----------------------------------------------------------------------------
// fatfs_cache_init:
//-----------------------------------------------------------------------------
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
 10043bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 10043c0:	8d 82 20 01 00 00    	lea    eax,[edx+0x120]
 10043c6:	81 c2 20 03 00 00    	add    edx,0x320
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:49 (discriminator 3)
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
 10043cc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:50 (discriminator 3)
        file->cluster_cache_data[i] = 0;
 10043d2:	c7 80 00 02 00 00 00 	mov    DWORD PTR [eax+0x200],0x0
 10043d9:	00 00 00 
 10043dc:	83 c0 04             	add    eax,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:47 (discriminator 3)
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
 10043df:	39 d0                	cmp    eax,edx
 10043e1:	75 e9                	jne    10043cc <fatfs_cache_init+0x10>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:55
        file->cluster_cache_data[i] = 0;
    }
#endif

    return 1;
}
 10043e3:	b8 01 00 00 00       	mov    eax,0x1
 10043e8:	c3                   	ret    

010043e9 <fatfs_cache_get_next_cluster>:
fatfs_cache_get_next_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:60
//-----------------------------------------------------------------------------
// fatfs_cache_get_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
 10043e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
 10043ed:	89 ca                	mov    edx,ecx
 10043ef:	83 e2 7f             	and    edx,0x7f
 10043f2:	c1 e2 02             	shl    edx,0x2
 10043f5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:71
        *pNextCluster = file->cluster_cache_data[slot];
        return 1;
    }
#endif

    return 0;
 10043f9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:64
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;

    if (file->cluster_cache_idx[slot] == clusterIdx)
 10043fe:	3b 8a 20 01 00 00    	cmp    ecx,DWORD PTR [edx+0x120]
 1004404:	75 11                	jne    1004417 <fatfs_cache_get_next_cluster+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:66
    {
        *pNextCluster = file->cluster_cache_data[slot];
 1004406:	8b 92 20 03 00 00    	mov    edx,DWORD PTR [edx+0x320]
 100440c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1004410:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:67
        return 1;
 1004412:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:72
    }
#endif

    return 0;
}
 1004417:	f3 c3                	repz ret 

01004419 <fatfs_cache_set_next_cluster>:
fatfs_cache_set_next_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:77
//-----------------------------------------------------------------------------
// fatfs_cache_set_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_set_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 nextCluster)
{
 1004419:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 100441d:	89 d0                	mov    eax,edx
 100441f:	83 e0 7f             	and    eax,0x7f
 1004422:	c1 e0 02             	shl    eax,0x2
 1004425:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:81
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;

    if (file->cluster_cache_idx[slot] == clusterIdx)
 1004429:	3b 90 20 01 00 00    	cmp    edx,DWORD PTR [eax+0x120]
 100442f:	75 0c                	jne    100443d <fatfs_cache_set_next_cluster+0x24>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:82
        file->cluster_cache_data[slot] = nextCluster;
 1004431:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
 1004435:	89 88 20 03 00 00    	mov    DWORD PTR [eax+0x320],ecx
 100443b:	eb 10                	jmp    100444d <fatfs_cache_set_next_cluster+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:85
    else
    {
        file->cluster_cache_idx[slot] = clusterIdx;
 100443d:	89 90 20 01 00 00    	mov    DWORD PTR [eax+0x120],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:86
        file->cluster_cache_data[slot] = nextCluster;
 1004443:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
 1004447:	89 88 20 03 00 00    	mov    DWORD PTR [eax+0x320],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:91
    }
#endif

    return 1;
}
 100444d:	b8 01 00 00 00       	mov    eax,0x1
 1004452:	c3                   	ret    
 1004453:	90                   	nop

01004454 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:126
}
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
 1004454:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
 1004455:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
 1004458:	85 c9                	test   ecx,ecx
 100445a:	75 32                	jne    100448e <fat_list_insert_last+0x3a>
fat_list_insert_first():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:112
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
 100445c:	8b 08                	mov    ecx,DWORD PTR [eax]
 100445e:	85 c9                	test   ecx,ecx
 1004460:	75 14                	jne    1004476 <fat_list_insert_last+0x22>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
 1004462:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:115
        list->tail = node;
 1004464:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
 1004467:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:117
        node->next = 0;
 100446d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
 1004474:	eb 31                	jmp    10044a7 <fat_list_insert_last+0x53>
fat_list_insert_before():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:96
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
 1004476:	8b 19                	mov    ebx,DWORD PTR [ecx]
 1004478:	89 1a                	mov    DWORD PTR [edx],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
 100447a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
 100447d:	8b 19                	mov    ebx,DWORD PTR [ecx]
 100447f:	85 db                	test   ebx,ebx
 1004481:	75 04                	jne    1004487 <fat_list_insert_last+0x33>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
 1004483:	89 10                	mov    DWORD PTR [eax],edx
 1004485:	eb 03                	jmp    100448a <fat_list_insert_last+0x36>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
 1004487:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
 100448a:	89 11                	mov    DWORD PTR [ecx],edx
 100448c:	eb 19                	jmp    10044a7 <fat_list_insert_last+0x53>
fat_list_insert_after():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:79
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
 100448e:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
 1004490:	8b 59 04             	mov    ebx,DWORD PTR [ecx+0x4]
 1004493:	89 5a 04             	mov    DWORD PTR [edx+0x4],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:81
    if (!node->next)
 1004496:	8b 59 04             	mov    ebx,DWORD PTR [ecx+0x4]
 1004499:	85 db                	test   ebx,ebx
 100449b:	75 05                	jne    10044a2 <fat_list_insert_last+0x4e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
 100449d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
 10044a0:	eb 02                	jmp    10044a4 <fat_list_insert_last+0x50>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
 10044a2:	89 13                	mov    DWORD PTR [ebx],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
 10044a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
fat_list_insert_last():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:134

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
}
 10044a7:	5b                   	pop    ebx
 10044a8:	c3                   	ret    

010044a9 <_allocate_file>:
_allocate_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:72

//-----------------------------------------------------------------------------
// _allocate_file: Find a slot in the open files buffer for a new file
//-----------------------------------------------------------------------------
static FL_FILE* _allocate_file(void)
{
 10044a9:	53                   	push   ebx
fat_list_pop_head():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:153
{
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
 10044aa:	8b 1d 40 00 12 00    	mov    ebx,DWORD PTR ds:0x120040
_allocate_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:80

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
 10044b0:	b8 00 00 00 00       	mov    eax,0x0
fat_list_pop_head():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:154
    if (node)
 10044b5:	85 db                	test   ebx,ebx
 10044b7:	74 3c                	je     10044f5 <_allocate_file+0x4c>
fat_list_remove():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:60
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
 10044b9:	8b 03                	mov    eax,DWORD PTR [ebx]
 10044bb:	85 c0                	test   eax,eax
 10044bd:	75 0a                	jne    10044c9 <_allocate_file+0x20>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
 10044bf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
 10044c2:	a3 40 00 12 00       	mov    ds:0x120040,eax
 10044c7:	eb 06                	jmp    10044cf <_allocate_file+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
 10044c9:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
 10044cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:65

    if(!node->next)
 10044cf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
 10044d2:	85 c0                	test   eax,eax
 10044d4:	75 09                	jne    10044df <_allocate_file+0x36>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
 10044d6:	8b 03                	mov    eax,DWORD PTR [ebx]
 10044d8:	a3 44 00 12 00       	mov    ds:0x120044,eax
 10044dd:	eb 04                	jmp    10044e3 <_allocate_file+0x3a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:68
    else
        node->next->previous = node->previous;
 10044df:	8b 13                	mov    edx,DWORD PTR [ebx]
 10044e1:	89 10                	mov    DWORD PTR [eax],edx
_allocate_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:78
    // Allocate free file
    struct fat_node *node = fat_list_pop_head(&_free_file_list);

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);
 10044e3:	89 da                	mov    edx,ebx
 10044e5:	b8 48 00 12 00       	mov    eax,0x120048
 10044ea:	e8 65 ff ff ff       	call   1004454 <fat_list_insert_last>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:80

    return fat_list_entry(node, FL_FILE, list_node);
 10044ef:	8d 83 cc f8 ff ff    	lea    eax,[ebx-0x734]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:81
}
 10044f5:	5b                   	pop    ebx
 10044f6:	c3                   	ret    

010044f7 <_check_file_open>:
_check_file_open():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:86
//-----------------------------------------------------------------------------
// _check_file_open: Returns true if the file is already open
//-----------------------------------------------------------------------------
static int _check_file_open(FL_FILE* file)
{
 10044f7:	55                   	push   ebp
 10044f8:	57                   	push   edi
 10044f9:	56                   	push   esi
 10044fa:	53                   	push   ebx
 10044fb:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:90
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
 10044fe:	8b 1d 48 00 12 00    	mov    ebx,DWORD PTR ds:0x120048
 1004504:	85 db                	test   ebx,ebx
 1004506:	74 5f                	je     1004567 <_check_file_open+0x70>
 1004508:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:98

        // If not the current file
        if (openFile != file)
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
 100450a:	8d 68 14             	lea    ebp,[eax+0x14]
 100450d:	8d 80 94 00 00 00    	lea    eax,[eax+0x94]
 1004513:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:92
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
 1004517:	8d b3 cc f8 ff ff    	lea    esi,[ebx-0x734]
 100451d:	85 db                	test   ebx,ebx
 100451f:	b8 00 00 00 00       	mov    eax,0x0
 1004524:	0f 44 f0             	cmove  esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:95

        // If not the current file
        if (openFile != file)
 1004527:	39 fe                	cmp    esi,edi
 1004529:	74 2e                	je     1004559 <_check_file_open+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:98
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
 100452b:	83 ec 08             	sub    esp,0x8
 100452e:	55                   	push   ebp
 100452f:	8d 46 14             	lea    eax,[esi+0x14]
 1004532:	50                   	push   eax
 1004533:	e8 57 28 00 00       	call   1006d8f <fatfs_compare_names>
 1004538:	83 c4 10             	add    esp,0x10
 100453b:	85 c0                	test   eax,eax
 100453d:	74 1a                	je     1004559 <_check_file_open+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:98 (discriminator 1)
 100453f:	83 ec 08             	sub    esp,0x8
 1004542:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1004546:	81 c6 94 00 00 00    	add    esi,0x94
 100454c:	56                   	push   esi
 100454d:	e8 3d 28 00 00       	call   1006d8f <fatfs_compare_names>
 1004552:	83 c4 10             	add    esp,0x10
 1004555:	85 c0                	test   eax,eax
 1004557:	75 15                	jne    100456e <_check_file_open+0x77>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:90 (discriminator 2)
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
 1004559:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
 100455c:	85 db                	test   ebx,ebx
 100455e:	75 b7                	jne    1004517 <_check_file_open+0x20>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:103
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
                return 1;
        }
    }

    return 0;
 1004560:	b8 00 00 00 00       	mov    eax,0x0
 1004565:	eb 0c                	jmp    1004573 <_check_file_open+0x7c>
 1004567:	b8 00 00 00 00       	mov    eax,0x0
 100456c:	eb 05                	jmp    1004573 <_check_file_open+0x7c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:99
        // If not the current file
        if (openFile != file)
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
                return 1;
 100456e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:104
        }
    }

    return 0;
}
 1004573:	83 c4 1c             	add    esp,0x1c
 1004576:	5b                   	pop    ebx
 1004577:	5e                   	pop    esi
 1004578:	5f                   	pop    edi
 1004579:	5d                   	pop    ebp
 100457a:	c3                   	ret    

0100457b <_open_directory>:
_open_directory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:126
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
 100457b:	55                   	push   ebp
 100457c:	57                   	push   edi
 100457d:	56                   	push   esi
 100457e:	53                   	push   ebx
 100457f:	81 ec c8 00 00 00    	sub    esp,0xc8
 1004585:	89 c7                	mov    edi,eax
 1004587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
 100458b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:134
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
 100458f:	68 60 00 12 00       	push   0x120060
 1004594:	e8 77 f5 ff ff       	call   1003b10 <fatfs_get_root_cluster>
 1004599:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:137

    // Find number of levels
    levels = fatfs_total_path_levels(path);
 100459b:	89 3c 24             	mov    DWORD PTR [esp],edi
 100459e:	e8 ea 25 00 00       	call   1006b8d <fatfs_total_path_levels>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:140

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
 10045a3:	8d 50 01             	lea    edx,[eax+0x1]
 10045a6:	83 c4 10             	add    esp,0x10
 10045a9:	85 d2                	test   edx,edx
 10045ab:	7e 65                	jle    1004612 <_open_directory+0x97>
 10045ad:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
 10045b1:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:142
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
 10045b6:	8d 7c 24 30          	lea    edi,[esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:146
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
 10045ba:	8d 6c 24 10          	lea    ebp,[esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:142
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
 10045be:	68 80 00 00 00       	push   0x80
 10045c3:	57                   	push   edi
 10045c4:	56                   	push   esi
 10045c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 10045c9:	e8 4d 26 00 00       	call   1006c1b <fatfs_get_substring>
 10045ce:	83 c4 10             	add    esp,0x10
 10045d1:	83 f8 ff             	cmp    eax,0xffffffff
 10045d4:	74 49                	je     100461f <_open_directory+0xa4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:146
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
 10045d6:	55                   	push   ebp
 10045d7:	57                   	push   edi
 10045d8:	53                   	push   ebx
 10045d9:	68 60 00 12 00       	push   0x120060
 10045de:	e8 35 f5 ff ff       	call   1003b18 <fatfs_get_file_entry>
 10045e3:	83 c4 10             	add    esp,0x10
 10045e6:	85 c0                	test   eax,eax
 10045e8:	74 3c                	je     1004626 <_open_directory+0xab>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:149
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
 10045ea:	83 ec 0c             	sub    esp,0xc
 10045ed:	55                   	push   ebp
 10045ee:	e8 25 20 00 00       	call   1006618 <fatfs_entry_is_dir>
 10045f3:	83 c4 10             	add    esp,0x10
 10045f6:	85 c0                	test   eax,eax
 10045f8:	74 31                	je     100462b <_open_directory+0xb0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:150
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
 10045fa:	0f b7 5c 24 24       	movzx  ebx,WORD PTR [esp+0x24]
 10045ff:	c1 e3 10             	shl    ebx,0x10
 1004602:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
 1004607:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:140

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
 1004609:	83 c6 01             	add    esi,0x1
 100460c:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
 1004610:	75 ac                	jne    10045be <_open_directory+0x43>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:158
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
 1004612:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1004616:	89 18                	mov    DWORD PTR [eax],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:159
    return 1;
 1004618:	b8 01 00 00 00       	mov    eax,0x1
 100461d:	eb 0c                	jmp    100462b <_open_directory+0xb0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:143

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;
 100461f:	b8 00 00 00 00       	mov    eax,0x0
 1004624:	eb 05                	jmp    100462b <_open_directory+0xb0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:155
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            else
                return 0;
        }
        else
            return 0;
 1004626:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:160
    }

    *pathCluster = startcluster;
    return 1;
}
 100462b:	81 c4 bc 00 00 00    	add    esp,0xbc
 1004631:	5b                   	pop    ebx
 1004632:	5e                   	pop    esi
 1004633:	5f                   	pop    edi
 1004634:	5d                   	pop    ebp
 1004635:	c3                   	ret    

01004636 <_write_sectors>:
_write_sectors():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:817
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
 1004636:	55                   	push   ebp
 1004637:	57                   	push   edi
 1004638:	56                   	push   esi
 1004639:	53                   	push   ebx
 100463a:	83 ec 3c             	sub    esp,0x3c
 100463d:	89 c7                	mov    edi,eax
 100463f:	89 d3                	mov    ebx,edx
 1004641:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:821
    uint32 SectorNumber = 0;
    uint32 ClusterIdx = 0;
    uint32 Cluster = 0;
    uint32 LastCluster = FAT32_LAST_CLUSTER;
 1004645:	c7 44 24 2c ff ff ff 	mov    DWORD PTR [esp+0x2c],0xffffffff
 100464c:	ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:827
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
 100464d:	0f b6 0d 60 00 12 00 	movzx  ecx,BYTE PTR ds:0x120060
 1004654:	89 d0                	mov    eax,edx
 1004656:	ba 00 00 00 00       	mov    edx,0x0
 100465b:	f7 f1                	div    ecx
 100465d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
 1004661:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:828
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
 1004665:	89 c6                	mov    esi,eax
 1004667:	0f af c1             	imul   eax,ecx
 100466a:	29 c3                	sub    ebx,eax
 100466c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:831

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
 1004670:	89 da                	mov    edx,ebx
 1004672:	03 54 24 50          	add    edx,DWORD PTR [esp+0x50]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:832
        count = _fs.sectors_per_cluster - SectorNumber;
 1004676:	89 c8                	mov    eax,ecx
 1004678:	29 d8                	sub    eax,ebx
 100467a:	39 d1                	cmp    ecx,edx
 100467c:	0f 43 44 24 50       	cmovae eax,DWORD PTR [esp+0x50]
 1004681:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:835

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
 1004685:	8b 9f 20 05 00 00    	mov    ebx,DWORD PTR [edi+0x520]
 100468b:	39 de                	cmp    esi,ebx
 100468d:	75 0b                	jne    100469a <_write_sectors+0x64>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:836
        Cluster = file->last_fat_lookup.CurrentCluster;
 100468f:	8b b7 24 05 00 00    	mov    esi,DWORD PTR [edi+0x524]
 1004695:	e9 c7 00 00 00       	jmp    1004761 <_write_sectors+0x12b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:841
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
 100469a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
 100469e:	85 c9                	test   ecx,ecx
 10046a0:	74 0f                	je     10046b1 <_write_sectors+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:841 (discriminator 1)
 10046a2:	8d 43 01             	lea    eax,[ebx+0x1]
 10046a5:	39 c1                	cmp    ecx,eax
 10046a7:	75 08                	jne    10046b1 <_write_sectors+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:844
        {
            i = file->last_fat_lookup.ClusterIdx;
            Cluster = file->last_fat_lookup.CurrentCluster;
 10046a9:	8b b7 24 05 00 00    	mov    esi,DWORD PTR [edi+0x524]
 10046af:	eb 08                	jmp    10046b9 <_write_sectors+0x83>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:851
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
            Cluster = file->startcluster;
 10046b1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:850
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
 10046b4:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:855 (discriminator 1)
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
 10046b9:	39 5c 24 10          	cmp    DWORD PTR [esp+0x10],ebx
 10046bd:	76 52                	jbe    1004711 <_write_sectors+0xdb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:860
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
 10046bf:	8d 6c 24 28          	lea    ebp,[esp+0x28]
 10046c3:	55                   	push   ebp
 10046c4:	53                   	push   ebx
 10046c5:	57                   	push   edi
 10046c6:	68 60 00 12 00       	push   0x120060
 10046cb:	e8 19 fd ff ff       	call   10043e9 <fatfs_cache_get_next_cluster>
 10046d0:	83 c4 10             	add    esp,0x10
 10046d3:	85 c0                	test   eax,eax
 10046d5:	75 22                	jne    10046f9 <_write_sectors+0xc3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:863
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
 10046d7:	83 ec 08             	sub    esp,0x8
 10046da:	56                   	push   esi
 10046db:	68 60 00 12 00       	push   0x120060
 10046e0:	e8 eb 2b 00 00       	call   10072d0 <fatfs_find_next_cluster>
 10046e5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:866

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
 10046e9:	50                   	push   eax
 10046ea:	53                   	push   ebx
 10046eb:	57                   	push   edi
 10046ec:	68 60 00 12 00       	push   0x120060
 10046f1:	e8 23 fd ff ff       	call   1004419 <fatfs_cache_set_next_cluster>
 10046f6:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:869
            }

            LastCluster = Cluster;
 10046f9:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:870
            Cluster = nextCluster;
 10046fd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:873

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
 1004701:	83 fe ff             	cmp    esi,0xffffffff
 1004704:	74 10                	je     1004716 <_write_sectors+0xe0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:855
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
 1004706:	83 c3 01             	add    ebx,0x1
 1004709:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
 100470d:	77 b4                	ja     10046c3 <_write_sectors+0x8d>
 100470f:	eb 40                	jmp    1004751 <_write_sectors+0x11b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:878
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
 1004711:	83 fe ff             	cmp    esi,0xffffffff
 1004714:	75 3b                	jne    1004751 <_write_sectors+0x11b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:881
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
 1004716:	0f b6 0d 60 00 12 00 	movzx  ecx,BYTE PTR ds:0x120060
 100471d:	83 ec 04             	sub    esp,0x4
 1004720:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
 1004724:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
 1004728:	ba 00 00 00 00       	mov    edx,0x0
 100472d:	f7 f1                	div    ecx
 100472f:	50                   	push   eax
 1004730:	8d 44 24 34          	lea    eax,[esp+0x34]
 1004734:	50                   	push   eax
 1004735:	68 60 00 12 00       	push   0x120060
 100473a:	e8 19 30 00 00       	call   1007758 <fatfs_add_free_space>
 100473f:	89 c2                	mov    edx,eax
 1004741:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:882
                return 0;
 1004744:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:881

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
 1004749:	85 d2                	test   edx,edx
 100474b:	74 47                	je     1004794 <_write_sectors+0x15e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:884
                return 0;

            Cluster = LastCluster;
 100474d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:888
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
 1004751:	89 b7 24 05 00 00    	mov    DWORD PTR [edi+0x524],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:889
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
 1004757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 100475b:	89 87 20 05 00 00    	mov    DWORD PTR [edi+0x520],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:893
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
 1004761:	83 ec 08             	sub    esp,0x8
 1004764:	56                   	push   esi
 1004765:	68 60 00 12 00       	push   0x120060
 100476a:	e8 a8 f0 ff ff       	call   1003817 <fatfs_lba_of_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:895

    if (fatfs_sector_write(&_fs, lba, buf, count))
 100476f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
 1004773:	57                   	push   edi
 1004774:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 1004778:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
 100477c:	50                   	push   eax
 100477d:	68 60 00 12 00       	push   0x120060
 1004782:	e8 e4 f0 ff ff       	call   100386b <fatfs_sector_write>
 1004787:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:896
        return count;
 100478a:	85 c0                	test   eax,eax
 100478c:	b8 00 00 00 00       	mov    eax,0x0
 1004791:	0f 45 c7             	cmovne eax,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:899
    else
        return 0;
}
 1004794:	83 c4 3c             	add    esp,0x3c
 1004797:	5b                   	pop    ebx
 1004798:	5e                   	pop    esi
 1004799:	5f                   	pop    edi
 100479a:	5d                   	pop    ebp
 100479b:	c3                   	ret    

0100479c <_read_sectors>:
_read_sectors():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:549
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
 100479c:	55                   	push   ebp
 100479d:	57                   	push   edi
 100479e:	56                   	push   esi
 100479f:	53                   	push   ebx
 10047a0:	83 ec 2c             	sub    esp,0x2c
 10047a3:	89 c6                	mov    esi,eax
 10047a5:	89 d3                	mov    ebx,edx
 10047a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:557
    uint32 Cluster = 0;
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
 10047ab:	0f b6 0d 60 00 12 00 	movzx  ecx,BYTE PTR ds:0x120060
 10047b2:	89 d0                	mov    eax,edx
 10047b4:	ba 00 00 00 00       	mov    edx,0x0
 10047b9:	f7 f1                	div    ecx
 10047bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 10047bf:	89 04 24             	mov    DWORD PTR [esp],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:558
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
 10047c2:	89 c7                	mov    edi,eax
 10047c4:	0f af c1             	imul   eax,ecx
 10047c7:	29 c3                	sub    ebx,eax
 10047c9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:561

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
 10047cd:	89 d8                	mov    eax,ebx
 10047cf:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:562
        count = _fs.sectors_per_cluster - Sector;
 10047d3:	89 ca                	mov    edx,ecx
 10047d5:	29 da                	sub    edx,ebx
 10047d7:	39 c1                	cmp    ecx,eax
 10047d9:	0f 43 54 24 40       	cmovae edx,DWORD PTR [esp+0x40]
 10047de:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:565

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
 10047e2:	8b 9e 20 05 00 00    	mov    ebx,DWORD PTR [esi+0x520]
 10047e8:	39 df                	cmp    edi,ebx
 10047ea:	75 19                	jne    1004805 <_read_sectors+0x69>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:566
        Cluster = file->last_fat_lookup.CurrentCluster;
 10047ec:	8b be 24 05 00 00    	mov    edi,DWORD PTR [esi+0x524]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:612
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
        return 0;
 10047f2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:611
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
 10047f7:	83 ff ff             	cmp    edi,0xffffffff
 10047fa:	0f 84 be 00 00 00    	je     10048be <_read_sectors+0x122>
 1004800:	e9 85 00 00 00       	jmp    100488a <_read_sectors+0xee>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:571
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
 1004805:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
 1004809:	85 c9                	test   ecx,ecx
 100480b:	74 0f                	je     100481c <_read_sectors+0x80>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:571 (discriminator 1)
 100480d:	8d 43 01             	lea    eax,[ebx+0x1]
 1004810:	39 c1                	cmp    ecx,eax
 1004812:	75 08                	jne    100481c <_read_sectors+0x80>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:574
        {
            i = file->last_fat_lookup.ClusterIdx;
            Cluster = file->last_fat_lookup.CurrentCluster;
 1004814:	8b be 24 05 00 00    	mov    edi,DWORD PTR [esi+0x524]
 100481a:	eb 08                	jmp    1004824 <_read_sectors+0x88>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:581
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
            Cluster = file->startcluster;
 100481c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:580
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
 100481f:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:585 (discriminator 1)
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
 1004824:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
 1004828:	76 46                	jbe    1004870 <_read_sectors+0xd4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:590
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
 100482a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
 100482e:	55                   	push   ebp
 100482f:	53                   	push   ebx
 1004830:	56                   	push   esi
 1004831:	68 60 00 12 00       	push   0x120060
 1004836:	e8 ae fb ff ff       	call   10043e9 <fatfs_cache_get_next_cluster>
 100483b:	83 c4 10             	add    esp,0x10
 100483e:	85 c0                	test   eax,eax
 1004840:	75 22                	jne    1004864 <_read_sectors+0xc8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:593
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
 1004842:	83 ec 08             	sub    esp,0x8
 1004845:	57                   	push   edi
 1004846:	68 60 00 12 00       	push   0x120060
 100484b:	e8 80 2a 00 00       	call   10072d0 <fatfs_find_next_cluster>
 1004850:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:596

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
 1004854:	50                   	push   eax
 1004855:	53                   	push   ebx
 1004856:	56                   	push   esi
 1004857:	68 60 00 12 00       	push   0x120060
 100485c:	e8 b8 fb ff ff       	call   1004419 <fatfs_cache_set_next_cluster>
 1004861:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:599
            }

            Cluster = nextCluster;
 1004864:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:585
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
 1004868:	83 c3 01             	add    ebx,0x1
 100486b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
 100486e:	77 be                	ja     100482e <_read_sectors+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:612
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
        return 0;
 1004870:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:603

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
 1004875:	83 ff ff             	cmp    edi,0xffffffff
 1004878:	74 44                	je     10048be <_read_sectors+0x122>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:605
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
 100487a:	89 be 24 05 00 00    	mov    DWORD PTR [esi+0x524],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:606
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
 1004880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1004884:	89 86 20 05 00 00    	mov    DWORD PTR [esi+0x520],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:615
    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
 100488a:	83 ec 08             	sub    esp,0x8
 100488d:	57                   	push   edi
 100488e:	68 60 00 12 00       	push   0x120060
 1004893:	e8 7f ef ff ff       	call   1003817 <fatfs_lba_of_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:618

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
 1004898:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
 100489c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 10048a0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
 10048a4:	50                   	push   eax
 10048a5:	68 60 00 12 00       	push   0x120060
 10048aa:	e8 a2 ef ff ff       	call   1003851 <fatfs_sector_read>
 10048af:	83 c4 20             	add    esp,0x20
 10048b2:	85 c0                	test   eax,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:619
        return count;
 10048b4:	b8 00 00 00 00       	mov    eax,0x0
 10048b9:	0f 45 44 24 40       	cmovne eax,DWORD PTR [esp+0x40]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:622
    else
        return 0;
}
 10048be:	83 c4 2c             	add    esp,0x2c
 10048c1:	5b                   	pop    ebx
 10048c2:	5e                   	pop    esi
 10048c3:	5f                   	pop    edi
 10048c4:	5d                   	pop    ebp
 10048c5:	c3                   	ret    

010048c6 <_free_file>:
_free_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:109
}
//-----------------------------------------------------------------------------
// _free_file: Free open file handle
//-----------------------------------------------------------------------------
static void _free_file(FL_FILE* file)
{
 10048c6:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:111
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);
 10048c7:	8d 90 34 07 00 00    	lea    edx,[eax+0x734]
fat_list_remove():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:60
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
 10048cd:	8b 88 34 07 00 00    	mov    ecx,DWORD PTR [eax+0x734]
 10048d3:	85 c9                	test   ecx,ecx
 10048d5:	75 0e                	jne    10048e5 <_free_file+0x1f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
 10048d7:	8b 88 38 07 00 00    	mov    ecx,DWORD PTR [eax+0x738]
 10048dd:	89 0d 48 00 12 00    	mov    DWORD PTR ds:0x120048,ecx
 10048e3:	eb 09                	jmp    10048ee <_free_file+0x28>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
 10048e5:	8b 98 38 07 00 00    	mov    ebx,DWORD PTR [eax+0x738]
 10048eb:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:65

    if(!node->next)
 10048ee:	8b 88 38 07 00 00    	mov    ecx,DWORD PTR [eax+0x738]
 10048f4:	85 c9                	test   ecx,ecx
 10048f6:	75 0d                	jne    1004905 <_free_file+0x3f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
 10048f8:	8b 80 34 07 00 00    	mov    eax,DWORD PTR [eax+0x734]
 10048fe:	a3 4c 00 12 00       	mov    ds:0x12004c,eax
 1004903:	eb 08                	jmp    100490d <_free_file+0x47>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:68
    else
        node->next->previous = node->previous;
 1004905:	8b 80 34 07 00 00    	mov    eax,DWORD PTR [eax+0x734]
 100490b:	89 01                	mov    DWORD PTR [ecx],eax
_free_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:114

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
 100490d:	b8 40 00 12 00       	mov    eax,0x120040
 1004912:	e8 3d fb ff ff       	call   1004454 <fat_list_insert_last>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:115
}
 1004917:	5b                   	pop    ebx
 1004918:	c3                   	ret    

01004919 <_open_file>:
_open_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:325
#endif
//-----------------------------------------------------------------------------
// _open_file: Open a file for reading
//-----------------------------------------------------------------------------
static FL_FILE* _open_file(const char *path)
{
 1004919:	55                   	push   ebp
 100491a:	57                   	push   edi
 100491b:	56                   	push   esi
 100491c:	53                   	push   ebx
 100491d:	83 ec 2c             	sub    esp,0x2c
 1004920:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:330
    FL_FILE* file;
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
 1004922:	e8 82 fb ff ff       	call   10044a9 <_allocate_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:331
    if (!file)
 1004927:	85 c0                	test   eax,eax
 1004929:	0f 84 71 01 00 00    	je     1004aa0 <_open_file+0x187>
 100492f:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:335
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
 1004931:	8d 78 14             	lea    edi,[eax+0x14]
 1004934:	83 ec 04             	sub    esp,0x4
 1004937:	68 80 00 00 00       	push   0x80
 100493c:	6a 00                	push   0x0
 100493e:	57                   	push   edi
 100493f:	e8 ef 45 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:336
    memset(file->filename, '\0', sizeof(file->filename));
 1004944:	8d b3 94 00 00 00    	lea    esi,[ebx+0x94]
 100494a:	83 c4 0c             	add    esp,0xc
 100494d:	68 80 00 00 00       	push   0x80
 1004952:	6a 00                	push   0x0
 1004954:	56                   	push   esi
 1004955:	e8 d9 45 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:339

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
 100495a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
 1004961:	56                   	push   esi
 1004962:	68 80 00 00 00       	push   0x80
 1004967:	57                   	push   edi
 1004968:	55                   	push   ebp
 1004969:	e8 90 23 00 00       	call   1006cfe <fatfs_split_path>
 100496e:	83 c4 20             	add    esp,0x20
 1004971:	83 f8 ff             	cmp    eax,0xffffffff
 1004974:	75 11                	jne    1004987 <_open_file+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:341
    {
        _free_file(file);
 1004976:	89 d8                	mov    eax,ebx
 1004978:	e8 49 ff ff ff       	call   10048c6 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:342
        return NULL;
 100497d:	b8 00 00 00 00       	mov    eax,0x0
 1004982:	e9 1e 01 00 00       	jmp    1004aa5 <_open_file+0x18c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:346
    }

    // Check if file already open
    if (_check_file_open(file))
 1004987:	89 d8                	mov    eax,ebx
 1004989:	e8 69 fb ff ff       	call   10044f7 <_check_file_open>
 100498e:	85 c0                	test   eax,eax
 1004990:	74 11                	je     10049a3 <_open_file+0x8a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:348
    {
        _free_file(file);
 1004992:	89 d8                	mov    eax,ebx
 1004994:	e8 2d ff ff ff       	call   10048c6 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:349
        return NULL;
 1004999:	b8 00 00 00 00       	mov    eax,0x0
 100499e:	e9 02 01 00 00       	jmp    1004aa5 <_open_file+0x18c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:353
    }

    // If file is in the root dir
    if (file->path[0]==0)
 10049a3:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
 10049a7:	75 14                	jne    10049bd <_open_file+0xa4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:354
        file->parentcluster = fatfs_get_root_cluster(&_fs);
 10049a9:	83 ec 0c             	sub    esp,0xc
 10049ac:	68 60 00 12 00       	push   0x120060
 10049b1:	e8 5a f1 ff ff       	call   1003b10 <fatfs_get_root_cluster>
 10049b6:	89 03                	mov    DWORD PTR [ebx],eax
 10049b8:	83 c4 10             	add    esp,0x10
 10049bb:	eb 1e                	jmp    10049db <_open_file+0xc2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:358
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
 10049bd:	89 da                	mov    edx,ebx
 10049bf:	89 f8                	mov    eax,edi
 10049c1:	e8 b5 fb ff ff       	call   100457b <_open_directory>
 10049c6:	85 c0                	test   eax,eax
 10049c8:	75 11                	jne    10049db <_open_file+0xc2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:360
        {
            _free_file(file);
 10049ca:	89 d8                	mov    eax,ebx
 10049cc:	e8 f5 fe ff ff       	call   10048c6 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:361
            return NULL;
 10049d1:	b8 00 00 00 00       	mov    eax,0x0
 10049d6:	e9 ca 00 00 00       	jmp    1004aa5 <_open_file+0x18c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:366
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
 10049db:	54                   	push   esp
 10049dc:	56                   	push   esi
 10049dd:	ff 33                	push   DWORD PTR [ebx]
 10049df:	68 60 00 12 00       	push   0x120060
 10049e4:	e8 2f f1 ff ff       	call   1003b18 <fatfs_get_file_entry>
 10049e9:	83 c4 10             	add    esp,0x10
 10049ec:	85 c0                	test   eax,eax
 10049ee:	0f 84 9e 00 00 00    	je     1004a92 <_open_file+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:368
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
 10049f4:	83 ec 0c             	sub    esp,0xc
 10049f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
 10049fb:	50                   	push   eax
 10049fc:	e8 26 1c 00 00       	call   1006627 <fatfs_entry_is_file>
 1004a01:	83 c4 10             	add    esp,0x10
 1004a04:	85 c0                	test   eax,eax
 1004a06:	0f 84 86 00 00 00    	je     1004a92 <_open_file+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:371
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
 1004a0c:	83 ec 04             	sub    esp,0x4
 1004a0f:	6a 0b                	push   0xb
 1004a11:	8d 44 24 08          	lea    eax,[esp+0x8]
 1004a15:	50                   	push   eax
 1004a16:	8d 83 14 01 00 00    	lea    eax,[ebx+0x114]
 1004a1c:	50                   	push   eax
 1004a1d:	e8 5e 4d 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:372
            file->filelength = FAT_HTONL(sfEntry.FileSize);
 1004a22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
 1004a26:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:373
            file->bytenum = 0;
 1004a29:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:374
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
 1004a30:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
 1004a35:	c1 e0 10             	shl    eax,0x10
 1004a38:	0f b7 54 24 2a       	movzx  edx,WORD PTR [esp+0x2a]
 1004a3d:	01 d0                	add    eax,edx
 1004a3f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:375
            file->file_data_address = 0xFFFFFFFF;
 1004a42:	c7 83 28 07 00 00 ff 	mov    DWORD PTR [ebx+0x728],0xffffffff
 1004a49:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:376
            file->file_data_dirty = 0;
 1004a4c:	c7 83 2c 07 00 00 00 	mov    DWORD PTR [ebx+0x72c],0x0
 1004a53:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:377
            file->filelength_changed = 0;
 1004a56:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:380

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
 1004a5d:	c7 83 20 05 00 00 ff 	mov    DWORD PTR [ebx+0x520],0xffffffff
 1004a64:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:381
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
 1004a67:	c7 83 24 05 00 00 ff 	mov    DWORD PTR [ebx+0x524],0xffffffff
 1004a6e:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:383

            fatfs_cache_init(&_fs, file);
 1004a71:	83 c4 08             	add    esp,0x8
 1004a74:	53                   	push   ebx
 1004a75:	68 60 00 12 00       	push   0x120060
 1004a7a:	e8 3d f9 ff ff       	call   10043bc <fatfs_cache_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:385

            fatfs_fat_purge(&_fs);
 1004a7f:	c7 04 24 60 00 12 00 	mov    DWORD PTR [esp],0x120060
 1004a86:	e8 00 28 00 00       	call   100728b <fatfs_fat_purge>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:387

            return file;
 1004a8b:	83 c4 10             	add    esp,0x10
 1004a8e:	89 d8                	mov    eax,ebx
 1004a90:	eb 13                	jmp    1004aa5 <_open_file+0x18c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:390
        }

    _free_file(file);
 1004a92:	89 d8                	mov    eax,ebx
 1004a94:	e8 2d fe ff ff       	call   10048c6 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:391
    return NULL;
 1004a99:	b8 00 00 00 00       	mov    eax,0x0
 1004a9e:	eb 05                	jmp    1004aa5 <_open_file+0x18c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:332
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
        return NULL;
 1004aa0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:392
            return file;
        }

    _free_file(file);
    return NULL;
}
 1004aa5:	83 c4 2c             	add    esp,0x2c
 1004aa8:	5b                   	pop    ebx
 1004aa9:	5e                   	pop    esi
 1004aaa:	5f                   	pop    edi
 1004aab:	5d                   	pop    ebp
 1004aac:	c3                   	ret    

01004aad <fl_init>:
fl_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:632

//-----------------------------------------------------------------------------
// fl_init: Initialise library
//-----------------------------------------------------------------------------
void __attribute__ ((constructor)) fl_init(void)
{
 1004aad:	56                   	push   esi
 1004aae:	53                   	push   ebx
fat_list_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:50
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
 1004aaf:	c7 05 44 00 12 00 00 	mov    DWORD PTR ds:0x120044,0x0
 1004ab6:	00 00 00 
 1004ab9:	c7 05 40 00 12 00 00 	mov    DWORD PTR ds:0x120040,0x0
 1004ac0:	00 00 00 
 1004ac3:	c7 05 4c 00 12 00 00 	mov    DWORD PTR ds:0x12004c,0x0
 1004aca:	00 00 00 
 1004acd:	c7 05 48 00 12 00 00 	mov    DWORD PTR ds:0x120048,0x0
 1004ad4:	00 00 00 
 1004ad7:	bb 14 0c 12 00       	mov    ebx,0x120c14
 1004adc:	be c4 9c 12 00       	mov    esi,0x129cc4
fl_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:647 (discriminator 3)
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
 1004ae1:	89 da                	mov    edx,ebx
 1004ae3:	b8 40 00 12 00       	mov    eax,0x120040
 1004ae8:	e8 67 f9 ff ff       	call   1004454 <fat_list_insert_last>
 1004aed:	81 c3 3c 07 00 00    	add    ebx,0x73c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:646 (discriminator 3)
    fat_list_init(&_open_file_list);
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
 1004af3:	39 f3                	cmp    ebx,esi
 1004af5:	75 ea                	jne    1004ae1 <fl_init+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:650
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    //printk("fl_init: Returning\n");
    _filelib_init = 1;
 1004af7:	c7 05 cc 04 12 00 01 	mov    DWORD PTR ds:0x1204cc,0x1
 1004afe:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:651
}
 1004b01:	5b                   	pop    ebx
 1004b02:	5e                   	pop    esi
 1004b03:	c3                   	ret    

01004b04 <fl_attach_locks>:
fl_attach_locks():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:657
//-----------------------------------------------------------------------------
// fl_attach_locks:
//-----------------------------------------------------------------------------
void fl_attach_locks(void (*lock)(void), void (*unlock)(void))
{
    _fs.fl_lock = lock;
 1004b04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1004b08:	a3 9c 00 12 00       	mov    ds:0x12009c,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:658
    _fs.fl_unlock = unlock;
 1004b0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1004b11:	a3 a0 00 12 00       	mov    ds:0x1200a0,eax
 1004b16:	c3                   	ret    

01004b17 <fl_attach_media>:
fl_attach_media():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:664
}
//-----------------------------------------------------------------------------
// fl_attach_media:
//-----------------------------------------------------------------------------
int fl_attach_media(fn_diskio_read rd, fn_diskio_write wr)
{
 1004b17:	53                   	push   ebx
 1004b18:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:669
    int res;

    //printk("fl_attach_media: Entered\n");
    // If first call to library, initialise
    CHECK_FL_INIT();
 1004b1b:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1004b22:	75 05                	jne    1004b29 <fl_attach_media+0x12>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:669 (discriminator 1)
 1004b24:	e8 84 ff ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:671
    //FAT_PRINTF(("fl_attach_media: CHEKC_FL_INIT returned\n")); //clr
    _fs.disk_io.read_media = rd;
 1004b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1004b2d:	a3 94 00 12 00       	mov    ds:0x120094,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:672
    _fs.disk_io.write_media = wr;
 1004b32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1004b36:	a3 98 00 12 00       	mov    ds:0x120098,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:675

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
 1004b3b:	83 ec 0c             	sub    esp,0xc
 1004b3e:	68 60 00 12 00       	push   0x120060
 1004b43:	e8 a8 e9 ff ff       	call   10034f0 <fatfs_init>
 1004b48:	89 c3                	mov    ebx,eax
 1004b4a:	83 c4 10             	add    esp,0x10
 1004b4d:	85 c0                	test   eax,eax
 1004b4f:	74 15                	je     1004b66 <fl_attach_media+0x4f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:677
    {
        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
 1004b51:	83 ec 08             	sub    esp,0x8
 1004b54:	50                   	push   eax
 1004b55:	68 3c 1c 04 01       	push   0x1041c3c
 1004b5a:	e8 90 51 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:678
        return res;
 1004b5f:	83 c4 10             	add    esp,0x10
 1004b62:	89 d8                	mov    eax,ebx
 1004b64:	eb 0f                	jmp    1004b75 <fl_attach_media+0x5e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:682
    }

    //FAT_PRINTF(("fl_attach_media: returning valid=1\n")); //clr
    _filelib_valid = 1;
 1004b66:	c7 05 c8 04 12 00 01 	mov    DWORD PTR ds:0x1204c8,0x1
 1004b6d:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:683
    return FAT_INIT_OK;
 1004b70:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:684
}
 1004b75:	83 c4 08             	add    esp,0x8
 1004b78:	5b                   	pop    ebx
 1004b79:	c3                   	ret    

01004b7a <fl_shutdown>:
fl_shutdown():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:689
//-----------------------------------------------------------------------------
// fl_shutdown: Call before shutting down system
//-----------------------------------------------------------------------------
 void __attribute__ ((destructor))fl_shutdown(void)
{
 1004b7a:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:691
    // If first call to library, initialise
    CHECK_FL_INIT();
 1004b7d:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1004b84:	75 05                	jne    1004b8b <fl_shutdown+0x11>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:691 (discriminator 1)
 1004b86:	e8 22 ff ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:693

    FL_LOCK(&_fs);
 1004b8b:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1004b90:	85 c0                	test   eax,eax
 1004b92:	74 02                	je     1004b96 <fl_shutdown+0x1c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:693 (discriminator 1)
 1004b94:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:694
    fatfs_fat_purge(&_fs);
 1004b96:	83 ec 0c             	sub    esp,0xc
 1004b99:	68 60 00 12 00       	push   0x120060
 1004b9e:	e8 e8 26 00 00       	call   100728b <fatfs_fat_purge>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:695
    FL_UNLOCK(&_fs);
 1004ba3:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1004ba8:	83 c4 10             	add    esp,0x10
 1004bab:	85 c0                	test   eax,eax
 1004bad:	74 02                	je     1004bb1 <fl_shutdown+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:695 (discriminator 1)
 1004baf:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:696
}
 1004bb1:	83 c4 0c             	add    esp,0xc
 1004bb4:	c3                   	ret    

01004bb5 <fl_fopen>:
fl_fopen():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:701
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
{
 1004bb5:	55                   	push   ebp
 1004bb6:	57                   	push   edi
 1004bb7:	56                   	push   esi
 1004bb8:	53                   	push   ebx
 1004bb9:	83 ec 4c             	sub    esp,0x4c
 1004bbc:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:707
    int i;
    FL_FILE* file;
    uint8 flags = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1004bc0:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1004bc7:	75 05                	jne    1004bce <fl_fopen+0x19>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:707 (discriminator 1)
 1004bc9:	e8 df fe ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:709

    if (!_filelib_valid)
 1004bce:	83 3d c8 04 12 00 00 	cmp    DWORD PTR ds:0x1204c8,0x0
 1004bd5:	0f 84 5b 03 00 00    	je     1004f36 <fl_fopen+0x381>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:712
        return NULL;

    if (!path || !mode)
 1004bdb:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
 1004be0:	0f 84 57 03 00 00    	je     1004f3d <fl_fopen+0x388>
 1004be6:	85 f6                	test   esi,esi
 1004be8:	0f 84 4f 03 00 00    	je     1004f3d <fl_fopen+0x388>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:733
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
 1004bee:	83 ec 0c             	sub    esp,0xc
 1004bf1:	56                   	push   esi
 1004bf2:	e8 15 52 00 00       	call   1009e0c <strlen>
 1004bf7:	83 c4 10             	add    esp,0x10
 1004bfa:	bb 00 00 00 00       	mov    ebx,0x0
 1004bff:	b9 00 00 00 00       	mov    ecx,0x0
 1004c04:	eb 54                	jmp    1004c5a <fl_fopen+0xa5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:735
    {
        switch (mode[i])
 1004c06:	0f b6 3c 0e          	movzx  edi,BYTE PTR [esi+ecx*1]
 1004c0a:	8d 57 d5             	lea    edx,[edi-0x2b]
 1004c0d:	80 fa 4c             	cmp    dl,0x4c
 1004c10:	77 45                	ja     1004c57 <fl_fopen+0xa2>
 1004c12:	0f b6 d2             	movzx  edx,dl
 1004c15:	ff 24 95 4c 9a 02 01 	jmp    DWORD PTR [edx*4+0x1029a4c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:739
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
 1004c1c:	83 cb 01             	or     ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:740
            break;
 1004c1f:	eb 36                	jmp    1004c57 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:745
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
            flags |= FILE_ERASE;
            flags |= FILE_CREATE;
 1004c21:	83 cb 32             	or     ebx,0x32
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:746
            break;
 1004c24:	eb 31                	jmp    1004c57 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:751
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
            flags |= FILE_APPEND;
            flags |= FILE_CREATE;
 1004c26:	83 cb 26             	or     ebx,0x26
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:752
            break;
 1004c29:	eb 2c                	jmp    1004c57 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:754
        case '+':
            if (flags & FILE_READ)
 1004c2b:	f6 c3 01             	test   bl,0x1
 1004c2e:	74 05                	je     1004c35 <fl_fopen+0x80>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:755
                flags |= FILE_WRITE;
 1004c30:	83 cb 02             	or     ebx,0x2
 1004c33:	eb 22                	jmp    1004c57 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:756
            else if (flags & FILE_WRITE)
 1004c35:	f6 c3 02             	test   bl,0x2
 1004c38:	74 05                	je     1004c3f <fl_fopen+0x8a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:760
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
 1004c3a:	83 cb 31             	or     ebx,0x31
 1004c3d:	eb 18                	jmp    1004c57 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:762
            }
            else if (flags & FILE_APPEND)
 1004c3f:	89 df                	mov    edi,ebx
 1004c41:	83 e7 04             	and    edi,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:767
            {
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
 1004c44:	89 da                	mov    edx,ebx
 1004c46:	83 ca 27             	or     edx,0x27
 1004c49:	89 d5                	mov    ebp,edx
 1004c4b:	89 fa                	mov    edx,edi
 1004c4d:	84 d2                	test   dl,dl
 1004c4f:	0f 45 dd             	cmovne ebx,ebp
 1004c52:	eb 03                	jmp    1004c57 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:772
            }
            break;
        case 'b':
        case 'B':
            flags |= FILE_BINARY;
 1004c54:	83 cb 08             	or     ebx,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:733 (discriminator 2)
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
 1004c57:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:733 (discriminator 1)
 1004c5a:	39 c1                	cmp    ecx,eax
 1004c5c:	7c a8                	jl     1004c06 <fl_fopen+0x51>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:786
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
 1004c5e:	89 d8                	mov    eax,ebx
 1004c60:	83 e0 d9             	and    eax,0xffffffd9
 1004c63:	83 3d 98 00 12 00 00 	cmp    DWORD PTR ds:0x120098,0x0
 1004c6a:	0f 44 d8             	cmove  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:788

    FL_LOCK(&_fs);
 1004c6d:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1004c72:	85 c0                	test   eax,eax
 1004c74:	74 02                	je     1004c78 <fl_fopen+0xc3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:788 (discriminator 1)
 1004c76:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:791

    // Read
    if (flags & FILE_READ)
 1004c78:	89 d8                	mov    eax,ebx
 1004c7a:	83 e0 01             	and    eax,0x1
 1004c7d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
 1004c81:	74 13                	je     1004c96 <fl_fopen+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:792
        file = _open_file(path);
 1004c83:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
 1004c87:	e8 8d fc ff ff       	call   1004919 <_open_file>
 1004c8c:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:796

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
 1004c8e:	85 c0                	test   eax,eax
 1004c90:	0f 85 88 02 00 00    	jne    1004f1e <fl_fopen+0x369>
 1004c96:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:796 (discriminator 1)
 1004c9b:	f6 c3 20             	test   bl,0x20
 1004c9e:	0f 84 80 02 00 00    	je     1004f24 <fl_fopen+0x36f>
_create_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:405
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;

    // No write access?
    if (!_fs.disk_io.write_media)
 1004ca4:	83 3d 98 00 12 00 00 	cmp    DWORD PTR ds:0x120098,0x0
 1004cab:	0f 84 a7 02 00 00    	je     1004f58 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:409
        return NULL;

    // Allocate a new file handle
    file = _allocate_file();
 1004cb1:	e8 f3 f7 ff ff       	call   10044a9 <_allocate_file>
 1004cb6:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:410
    if (!file)
 1004cb8:	85 c0                	test   eax,eax
 1004cba:	0f 84 98 02 00 00    	je     1004f58 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:414
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
 1004cc0:	8d 78 14             	lea    edi,[eax+0x14]
 1004cc3:	83 ec 04             	sub    esp,0x4
 1004cc6:	68 80 00 00 00       	push   0x80
 1004ccb:	6a 00                	push   0x0
 1004ccd:	57                   	push   edi
 1004cce:	e8 60 42 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:415
    memset(file->filename, '\0', sizeof(file->filename));
 1004cd3:	8d 86 94 00 00 00    	lea    eax,[esi+0x94]
 1004cd9:	89 c5                	mov    ebp,eax
 1004cdb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
 1004cdf:	83 c4 0c             	add    esp,0xc
 1004ce2:	68 80 00 00 00       	push   0x80
 1004ce7:	6a 00                	push   0x0
 1004ce9:	50                   	push   eax
 1004cea:	e8 44 42 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:418

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
 1004cef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
 1004cf6:	55                   	push   ebp
 1004cf7:	68 80 00 00 00       	push   0x80
 1004cfc:	57                   	push   edi
 1004cfd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 1004d01:	e8 f8 1f 00 00       	call   1006cfe <fatfs_split_path>
 1004d06:	83 c4 20             	add    esp,0x20
 1004d09:	83 f8 ff             	cmp    eax,0xffffffff
 1004d0c:	75 0c                	jne    1004d1a <fl_fopen+0x165>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:420
    {
        _free_file(file);
 1004d0e:	89 f0                	mov    eax,esi
 1004d10:	e8 b1 fb ff ff       	call   10048c6 <_free_file>
 1004d15:	e9 3e 02 00 00       	jmp    1004f58 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:425
        return NULL;
    }

    // Check if file already open
    if (_check_file_open(file))
 1004d1a:	89 f0                	mov    eax,esi
 1004d1c:	e8 d6 f7 ff ff       	call   10044f7 <_check_file_open>
 1004d21:	85 c0                	test   eax,eax
 1004d23:	74 0c                	je     1004d31 <fl_fopen+0x17c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:427
    {
        _free_file(file);
 1004d25:	89 f0                	mov    eax,esi
 1004d27:	e8 9a fb ff ff       	call   10048c6 <_free_file>
 1004d2c:	e9 27 02 00 00       	jmp    1004f58 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:432
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0] == 0)
 1004d31:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
 1004d35:	75 14                	jne    1004d4b <fl_fopen+0x196>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:433
        file->parentcluster = fatfs_get_root_cluster(&_fs);
 1004d37:	83 ec 0c             	sub    esp,0xc
 1004d3a:	68 60 00 12 00       	push   0x120060
 1004d3f:	e8 cc ed ff ff       	call   1003b10 <fatfs_get_root_cluster>
 1004d44:	89 06                	mov    DWORD PTR [esi],eax
 1004d46:	83 c4 10             	add    esp,0x10
 1004d49:	eb 19                	jmp    1004d64 <fl_fopen+0x1af>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:437
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
 1004d4b:	89 f2                	mov    edx,esi
 1004d4d:	89 f8                	mov    eax,edi
 1004d4f:	e8 27 f8 ff ff       	call   100457b <_open_directory>
 1004d54:	85 c0                	test   eax,eax
 1004d56:	75 0c                	jne    1004d64 <fl_fopen+0x1af>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:439
        {
            _free_file(file);
 1004d58:	89 f0                	mov    eax,esi
 1004d5a:	e8 67 fb ff ff       	call   10048c6 <_free_file>
 1004d5f:	e9 f4 01 00 00       	jmp    1004f58 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:445
            return NULL;
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
 1004d64:	8d 44 24 20          	lea    eax,[esp+0x20]
 1004d68:	50                   	push   eax
 1004d69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 1004d6d:	ff 36                	push   DWORD PTR [esi]
 1004d6f:	68 60 00 12 00       	push   0x120060
 1004d74:	e8 9f ed ff ff       	call   1003b18 <fatfs_get_file_entry>
 1004d79:	83 c4 10             	add    esp,0x10
 1004d7c:	83 f8 01             	cmp    eax,0x1
 1004d7f:	75 0c                	jne    1004d8d <fl_fopen+0x1d8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:447
    {
        _free_file(file);
 1004d81:	89 f0                	mov    eax,esi
 1004d83:	e8 3e fb ff ff       	call   10048c6 <_free_file>
 1004d88:	e9 cb 01 00 00       	jmp    1004f58 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:451
        return NULL;
    }

    file->startcluster = 0;
 1004d8d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:454

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
 1004d94:	6a 01                	push   0x1
 1004d96:	8d 46 04             	lea    eax,[esi+0x4]
 1004d99:	50                   	push   eax
 1004d9a:	6a 01                	push   0x1
 1004d9c:	68 60 00 12 00       	push   0x120060
 1004da1:	e8 46 2a 00 00       	call   10077ec <fatfs_allocate_free_space>
 1004da6:	83 c4 10             	add    esp,0x10
 1004da9:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:473
        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
 1004dae:	8d ae 14 01 00 00    	lea    ebp,[esi+0x114]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:454
    }

    file->startcluster = 0;

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
 1004db4:	85 c0                	test   eax,eax
 1004db6:	75 0c                	jne    1004dc4 <fl_fopen+0x20f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:456
    {
        _free_file(file);
 1004db8:	89 f0                	mov    eax,esi
 1004dba:	e8 07 fb ff ff       	call   10048c6 <_free_file>
 1004dbf:	e9 94 01 00 00       	jmp    1004f58 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:466
    // Generate a short filename & tail
    tailNum = 0;
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
 1004dc4:	83 ec 08             	sub    esp,0x8
 1004dc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1004dcb:	8d 44 24 21          	lea    eax,[esp+0x21]
 1004dcf:	50                   	push   eax
 1004dd0:	e8 37 1a 00 00       	call   100680c <fatfs_lfn_create_sfn>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:469

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
 1004dd5:	83 c4 10             	add    esp,0x10
 1004dd8:	85 ff                	test   edi,edi
 1004dda:	74 2c                	je     1004e08 <fl_fopen+0x253>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:470
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
 1004ddc:	83 ec 04             	sub    esp,0x4
 1004ddf:	57                   	push   edi
 1004de0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
 1004de4:	50                   	push   eax
 1004de5:	55                   	push   ebp
 1004de6:	e8 4c 1b 00 00       	call   1006937 <fatfs_lfn_generate_tail>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:476
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
 1004deb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
 1004def:	83 c4 0c             	add    esp,0xc
 1004df2:	55                   	push   ebp
 1004df3:	ff 36                	push   DWORD PTR [esi]
 1004df5:	68 60 00 12 00       	push   0x120060
 1004dfa:	e8 36 ef ff ff       	call   1003d35 <fatfs_sfn_exists>
 1004dff:	83 c4 10             	add    esp,0x10
 1004e02:	85 c0                	test   eax,eax
 1004e04:	75 3b                	jne    1004e41 <fl_fopen+0x28c>
 1004e06:	eb 2f                	jmp    1004e37 <fl_fopen+0x282>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:473
        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
 1004e08:	83 ec 04             	sub    esp,0x4
 1004e0b:	6a 0b                	push   0xb
 1004e0d:	8d 44 24 1d          	lea    eax,[esp+0x1d]
 1004e11:	50                   	push   eax
 1004e12:	55                   	push   ebp
 1004e13:	e8 68 49 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:476

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
 1004e18:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
 1004e1c:	83 c4 0c             	add    esp,0xc
 1004e1f:	55                   	push   ebp
 1004e20:	ff 36                	push   DWORD PTR [esi]
 1004e22:	68 60 00 12 00       	push   0x120060
 1004e27:	e8 09 ef ff ff       	call   1003d35 <fatfs_sfn_exists>
 1004e2c:	83 c4 10             	add    esp,0x10
 1004e2f:	85 c0                	test   eax,eax
 1004e31:	0f 85 0d 01 00 00    	jne    1004f44 <fl_fopen+0x38f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:484
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
 1004e37:	81 ff 0f 27 00 00    	cmp    edi,0x270f
 1004e3d:	75 30                	jne    1004e6f <fl_fopen+0x2ba>
 1004e3f:	eb 0f                	jmp    1004e50 <fl_fopen+0x29b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:479

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;

        tailNum++;
 1004e41:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:481
    }
    while (tailNum < 9999);
 1004e44:	81 ff 0f 27 00 00    	cmp    edi,0x270f
 1004e4a:	0f 85 74 ff ff ff    	jne    1004dc4 <fl_fopen+0x20f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:487

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
 1004e50:	83 ec 08             	sub    esp,0x8
 1004e53:	ff 76 04             	push   DWORD PTR [esi+0x4]
 1004e56:	68 60 00 12 00       	push   0x120060
 1004e5b:	e8 75 27 00 00       	call   10075d5 <fatfs_free_cluster_chain>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:489

        _free_file(file);
 1004e60:	89 f0                	mov    eax,esi
 1004e62:	e8 5f fa ff ff       	call   10048c6 <_free_file>
 1004e67:	83 c4 10             	add    esp,0x10
 1004e6a:	e9 e9 00 00 00       	jmp    1004f58 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:518
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
 1004e6f:	83 ec 04             	sub    esp,0x4
 1004e72:	6a 00                	push   0x0
 1004e74:	6a 00                	push   0x0
 1004e76:	ff 76 04             	push   DWORD PTR [esi+0x4]
 1004e79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1004e7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1004e81:	ff 36                	push   DWORD PTR [esi]
 1004e83:	68 60 00 12 00       	push   0x120060
 1004e88:	e8 1a 2a 00 00       	call   10078a7 <fatfs_add_file_entry>
 1004e8d:	83 c4 20             	add    esp,0x20
 1004e90:	85 c0                	test   eax,eax
 1004e92:	75 1f                	jne    1004eb3 <fl_fopen+0x2fe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:521
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
 1004e94:	83 ec 08             	sub    esp,0x8
 1004e97:	ff 76 04             	push   DWORD PTR [esi+0x4]
 1004e9a:	68 60 00 12 00       	push   0x120060
 1004e9f:	e8 31 27 00 00       	call   10075d5 <fatfs_free_cluster_chain>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:523

        _free_file(file);
 1004ea4:	89 f0                	mov    eax,esi
 1004ea6:	e8 1b fa ff ff       	call   10048c6 <_free_file>
 1004eab:	83 c4 10             	add    esp,0x10
 1004eae:	e9 a5 00 00 00       	jmp    1004f58 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:528
        return NULL;
    }

    // General
    file->filelength = 0;
 1004eb3:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:529
    file->bytenum = 0;
 1004eba:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:530
    file->file_data_address = 0xFFFFFFFF;
 1004ec1:	c7 86 28 07 00 00 ff 	mov    DWORD PTR [esi+0x728],0xffffffff
 1004ec8:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:531
    file->file_data_dirty = 0;
 1004ecb:	c7 86 2c 07 00 00 00 	mov    DWORD PTR [esi+0x72c],0x0
 1004ed2:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:532
    file->filelength_changed = 0;
 1004ed5:	c7 46 10 00 00 00 00 	mov    DWORD PTR [esi+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:535

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
 1004edc:	c7 86 20 05 00 00 ff 	mov    DWORD PTR [esi+0x520],0xffffffff
 1004ee3:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:536
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
 1004ee6:	c7 86 24 05 00 00 ff 	mov    DWORD PTR [esi+0x524],0xffffffff
 1004eed:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:538

    fatfs_cache_init(&_fs, file);
 1004ef0:	83 ec 08             	sub    esp,0x8
 1004ef3:	56                   	push   esi
 1004ef4:	68 60 00 12 00       	push   0x120060
 1004ef9:	e8 be f4 ff ff       	call   10043bc <fatfs_cache_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:540

    fatfs_fat_purge(&_fs);
 1004efe:	c7 04 24 60 00 12 00 	mov    DWORD PTR [esp],0x120060
 1004f05:	e8 81 23 00 00       	call   100728b <fatfs_fat_purge>
 1004f0a:	83 c4 10             	add    esp,0x10
 1004f0d:	eb 0b                	jmp    1004f1a <fl_fopen+0x365>
fl_fopen():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:804

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
        if ((flags & FILE_CREATE) && !file)
            if (flags & (FILE_WRITE | FILE_APPEND))
                file = _open_file(path);
 1004f0f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
 1004f13:	e8 01 fa ff ff       	call   1004919 <_open_file>
 1004f18:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:806

    if (file)
 1004f1a:	85 f6                	test   esi,esi
 1004f1c:	74 06                	je     1004f24 <fl_fopen+0x36f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:807
        file->flags = flags;
 1004f1e:	88 9e 30 07 00 00    	mov    BYTE PTR [esi+0x730],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:809

    FL_UNLOCK(&_fs);
 1004f24:	8b 15 a0 00 12 00    	mov    edx,DWORD PTR ds:0x1200a0
 1004f2a:	89 f0                	mov    eax,esi
 1004f2c:	85 d2                	test   edx,edx
 1004f2e:	74 36                	je     1004f66 <fl_fopen+0x3b1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:809 (discriminator 1)
 1004f30:	ff d2                	call   edx
 1004f32:	89 f0                	mov    eax,esi
 1004f34:	eb 30                	jmp    1004f66 <fl_fopen+0x3b1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:710

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (!_filelib_valid)
        return NULL;
 1004f36:	b8 00 00 00 00       	mov    eax,0x0
 1004f3b:	eb 29                	jmp    1004f66 <fl_fopen+0x3b1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:713

    if (!path || !mode)
        return NULL;
 1004f3d:	b8 00 00 00 00       	mov    eax,0x0
 1004f42:	eb 22                	jmp    1004f66 <fl_fopen+0x3b1>
_create_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:479

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;

        tailNum++;
 1004f44:	83 c7 01             	add    edi,0x1
 1004f47:	e9 78 fe ff ff       	jmp    1004dc4 <fl_fopen+0x20f>
fl_fopen():
 1004f4c:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:803
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
        if ((flags & FILE_CREATE) && !file)
            if (flags & (FILE_WRITE | FILE_APPEND))
 1004f51:	f6 c3 06             	test   bl,0x6
 1004f54:	74 c4                	je     1004f1a <fl_fopen+0x365>
 1004f56:	eb b7                	jmp    1004f0f <fl_fopen+0x35a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:801
    if (!file && (flags & FILE_CREATE))
        file = _create_file(path);
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
 1004f58:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
 1004f5d:	74 ed                	je     1004f4c <fl_fopen+0x397>
 1004f5f:	be 00 00 00 00       	mov    esi,0x0
 1004f64:	eb b4                	jmp    1004f1a <fl_fopen+0x365>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:811
    if (file)
        file->flags = flags;

    FL_UNLOCK(&_fs);
    return file;
}
 1004f66:	83 c4 4c             	add    esp,0x4c
 1004f69:	5b                   	pop    ebx
 1004f6a:	5e                   	pop    esi
 1004f6b:	5f                   	pop    edi
 1004f6c:	5d                   	pop    ebp
 1004f6d:	c3                   	ret    

01004f6e <fl_fflush>:
fl_fflush():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:905
#endif
//-----------------------------------------------------------------------------
// fl_fflush: Flush un-written data to the file
//-----------------------------------------------------------------------------
int fl_fflush(void *f)
{
 1004f6e:	53                   	push   ebx
 1004f6f:	83 ec 08             	sub    esp,0x8
 1004f72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:910
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1004f76:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1004f7d:	75 05                	jne    1004f84 <fl_fflush+0x16>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:910 (discriminator 1)
 1004f7f:	e8 29 fb ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:912

    if (file)
 1004f84:	85 db                	test   ebx,ebx
 1004f86:	74 48                	je     1004fd0 <fl_fflush+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:914
    {
        FL_LOCK(&_fs);
 1004f88:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1004f8d:	85 c0                	test   eax,eax
 1004f8f:	74 02                	je     1004f93 <fl_fflush+0x25>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:914 (discriminator 1)
 1004f91:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:917

        // If some write data still in buffer
        if (file->file_data_dirty)
 1004f93:	83 bb 2c 07 00 00 00 	cmp    DWORD PTR [ebx+0x72c],0x0
 1004f9a:	74 29                	je     1004fc5 <fl_fflush+0x57>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:920
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
 1004f9c:	8d 8b 28 05 00 00    	lea    ecx,[ebx+0x528]
 1004fa2:	8b 93 28 07 00 00    	mov    edx,DWORD PTR [ebx+0x728]
 1004fa8:	83 ec 0c             	sub    esp,0xc
 1004fab:	6a 01                	push   0x1
 1004fad:	89 d8                	mov    eax,ebx
 1004faf:	e8 82 f6 ff ff       	call   1004636 <_write_sectors>
 1004fb4:	83 c4 10             	add    esp,0x10
 1004fb7:	85 c0                	test   eax,eax
 1004fb9:	74 0a                	je     1004fc5 <fl_fflush+0x57>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:921
                file->file_data_dirty = 0;
 1004fbb:	c7 83 2c 07 00 00 00 	mov    DWORD PTR [ebx+0x72c],0x0
 1004fc2:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:924
        }

        FL_UNLOCK(&_fs);
 1004fc5:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1004fca:	85 c0                	test   eax,eax
 1004fcc:	74 02                	je     1004fd0 <fl_fflush+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:924 (discriminator 1)
 1004fce:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:928
    }
#endif
    return 0;
}
 1004fd0:	b8 00 00 00 00       	mov    eax,0x0
 1004fd5:	83 c4 08             	add    esp,0x8
 1004fd8:	5b                   	pop    ebx
 1004fd9:	c3                   	ret    

01004fda <fl_fclose>:
fl_fclose():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:933
//-----------------------------------------------------------------------------
// fl_fclose: Close an open file
//-----------------------------------------------------------------------------
void fl_fclose(void *f)
{
 1004fda:	53                   	push   ebx
 1004fdb:	83 ec 08             	sub    esp,0x8
 1004fde:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:937
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1004fe2:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1004fe9:	75 05                	jne    1004ff0 <fl_fclose+0x16>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:937 (discriminator 1)
 1004feb:	e8 bd fa ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:939

    if (file)
 1004ff0:	85 db                	test   ebx,ebx
 1004ff2:	0f 84 88 00 00 00    	je     1005080 <fl_fclose+0xa6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:941
    {
        FL_LOCK(&_fs);
 1004ff8:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1004ffd:	85 c0                	test   eax,eax
 1004fff:	74 02                	je     1005003 <fl_fclose+0x29>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:941 (discriminator 1)
 1005001:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:944

        // Flush un-written data to file
        fl_fflush(f);
 1005003:	83 ec 0c             	sub    esp,0xc
 1005006:	53                   	push   ebx
 1005007:	e8 62 ff ff ff       	call   1004f6e <fl_fflush>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:947

        // File size changed?
        if (file->filelength_changed)
 100500c:	83 c4 10             	add    esp,0x10
 100500f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
 1005013:	74 19                	je     100502e <fl_fclose+0x54>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:951
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
 1005015:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 1005018:	8d 83 14 01 00 00    	lea    eax,[ebx+0x114]
 100501e:	50                   	push   eax
 100501f:	ff 33                	push   DWORD PTR [ebx]
 1005021:	68 60 00 12 00       	push   0x120060
 1005026:	e8 4c ee ff ff       	call   1003e77 <fatfs_update_file_length>
 100502b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:956
#endif
            file->filelength_changed = 0;
        }

        file->bytenum = 0;
 100502e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:957
        file->filelength = 0;
 1005035:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:958
        file->startcluster = 0;
 100503c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:959
        file->file_data_address = 0xFFFFFFFF;
 1005043:	c7 83 28 07 00 00 ff 	mov    DWORD PTR [ebx+0x728],0xffffffff
 100504a:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:960
        file->file_data_dirty = 0;
 100504d:	c7 83 2c 07 00 00 00 	mov    DWORD PTR [ebx+0x72c],0x0
 1005054:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:961
        file->filelength_changed = 0;
 1005057:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:964

        // Free file handle
        _free_file(file);
 100505e:	89 d8                	mov    eax,ebx
 1005060:	e8 61 f8 ff ff       	call   10048c6 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:966

        fatfs_fat_purge(&_fs);
 1005065:	83 ec 0c             	sub    esp,0xc
 1005068:	68 60 00 12 00       	push   0x120060
 100506d:	e8 19 22 00 00       	call   100728b <fatfs_fat_purge>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:968

        FL_UNLOCK(&_fs);
 1005072:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005077:	83 c4 10             	add    esp,0x10
 100507a:	85 c0                	test   eax,eax
 100507c:	74 02                	je     1005080 <fl_fclose+0xa6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:968 (discriminator 1)
 100507e:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:970
    }
}
 1005080:	83 c4 08             	add    esp,0x8
 1005083:	5b                   	pop    ebx
 1005084:	c3                   	ret    

01005085 <fl_fread>:
fl_fread():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1022
}
//-----------------------------------------------------------------------------
// fl_fread: Read a block of data from the file
//-----------------------------------------------------------------------------
int fl_fread(void * buffer, int size, int length, void *f )
{
 1005085:	55                   	push   ebp
 1005086:	57                   	push   edi
 1005087:	56                   	push   esi
 1005088:	53                   	push   ebx
 1005089:	83 ec 1c             	sub    esp,0x1c
 100508c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1026
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
 1005090:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 1005094:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
 1005099:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1032
    int bytesRead = 0;

    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
 100509d:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 10050a4:	75 05                	jne    10050ab <fl_fread+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1032 (discriminator 1)
 10050a6:	e8 02 fa ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1034

    if (buffer==NULL || file==NULL)
 10050ab:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
 10050b0:	0f 84 4f 01 00 00    	je     1005205 <fl_fread+0x180>
 10050b6:	85 f6                	test   esi,esi
 10050b8:	0f 84 47 01 00 00    	je     1005205 <fl_fread+0x180>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1038
        return -1;

    // No read permissions
    if (!(file->flags & FILE_READ))
 10050be:	f6 86 30 07 00 00 01 	test   BYTE PTR [esi+0x730],0x1
 10050c5:	0f 84 41 01 00 00    	je     100520c <fl_fread+0x187>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1043
        return -1;

    // Nothing to be done
    if (!count)
        return 0;
 10050cb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1042
    // No read permissions
    if (!(file->flags & FILE_READ))
        return -1;

    // Nothing to be done
    if (!count)
 10050d0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
 10050d4:	85 db                	test   ebx,ebx
 10050d6:	0f 84 4b 01 00 00    	je     1005227 <fl_fread+0x1a2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1046
        return 0;

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
 10050dc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
 10050df:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
 10050e2:	39 c7                	cmp    edi,eax
 10050e4:	0f 83 29 01 00 00    	jae    1005213 <fl_fread+0x18e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1050
        return -1;

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
 10050ea:	8d 0c 3b             	lea    ecx,[ebx+edi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1051
        count = file->filelength - file->bytenum;
 10050ed:	89 c2                	mov    edx,eax
 10050ef:	29 fa                	sub    edx,edi
 10050f1:	39 c8                	cmp    eax,ecx
 10050f3:	0f 43 d3             	cmovae edx,ebx
 10050f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1054

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
 10050fa:	89 f8                	mov    eax,edi
 10050fc:	c1 e8 09             	shr    eax,0x9
 10050ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1057

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
 1005103:	81 e7 ff 01 00 00    	and    edi,0x1ff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1059

    while (bytesRead < count)
 1005109:	85 d2                	test   edx,edx
 100510b:	0f 8e 09 01 00 00    	jle    100521a <fl_fread+0x195>
 1005111:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1104
            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
                copyCount = (count - bytesRead);

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
 1005116:	8d 86 28 05 00 00    	lea    eax,[esi+0x528]
 100511c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1062
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
 1005120:	85 ff                	test   edi,edi
 1005122:	75 4c                	jne    1005170 <fl_fread+0xeb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1062 (discriminator 1)
 1005124:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1005128:	29 e8                	sub    eax,ebp
 100512a:	3d ff 01 00 00       	cmp    eax,0x1ff
 100512f:	7e 3f                	jle    1005170 <fl_fread+0xeb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1065
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);
 1005131:	89 e9                	mov    ecx,ebp
 1005133:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
 1005137:	83 ec 0c             	sub    esp,0xc
 100513a:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
 1005140:	85 c0                	test   eax,eax
 1005142:	0f 48 c2             	cmovs  eax,edx
 1005145:	c1 f8 09             	sar    eax,0x9
 1005148:	50                   	push   eax
 1005149:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
 100514d:	89 fa                	mov    edx,edi
 100514f:	89 f0                	mov    eax,esi
 1005151:	e8 46 f6 ff ff       	call   100479c <_read_sectors>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1066
            if (sectorsRead)
 1005156:	83 c4 10             	add    esp,0x10
 1005159:	85 c0                	test   eax,eax
 100515b:	0f 84 c0 00 00 00    	je     1005221 <fl_fread+0x19c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1069
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
 1005161:	89 c3                	mov    ebx,eax
 1005163:	c1 e3 09             	shl    ebx,0x9
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1072

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
 1005166:	89 fa                	mov    edx,edi
 1005168:	01 c2                	add    edx,eax
 100516a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1063

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
 100516e:	eb 7d                	jmp    10051ed <fl_fread+0x168>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1081
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
 1005170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1005174:	39 86 28 07 00 00    	cmp    DWORD PTR [esi+0x728],eax
 100517a:	74 42                	je     10051be <fl_fread+0x139>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1084
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
 100517c:	83 be 2c 07 00 00 00 	cmp    DWORD PTR [esi+0x72c],0x0
 1005183:	74 0c                	je     1005191 <fl_fread+0x10c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1085
                    fl_fflush(file);
 1005185:	83 ec 0c             	sub    esp,0xc
 1005188:	56                   	push   esi
 1005189:	e8 e0 fd ff ff       	call   1004f6e <fl_fflush>
 100518e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1088

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
 1005191:	83 ec 0c             	sub    esp,0xc
 1005194:	6a 01                	push   0x1
 1005196:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
 100519a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 100519e:	89 da                	mov    edx,ebx
 10051a0:	89 f0                	mov    eax,esi
 10051a2:	e8 f5 f5 ff ff       	call   100479c <_read_sectors>
 10051a7:	83 c4 10             	add    esp,0x10
 10051aa:	85 c0                	test   eax,eax
 10051ac:	74 77                	je     1005225 <fl_fread+0x1a0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1092
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
 10051ae:	89 9e 28 07 00 00    	mov    DWORD PTR [esi+0x728],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1093
                file->file_data_dirty = 0;
 10051b4:	c7 86 2c 07 00 00 00 	mov    DWORD PTR [esi+0x72c],0x0
 10051bb:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1097
            }

            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
 10051be:	bb 00 02 00 00       	mov    ebx,0x200
 10051c3:	29 fb                	sub    ebx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1100

            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
 10051c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 10051c9:	29 e8                	sub    eax,ebp
 10051cb:	39 c3                	cmp    ebx,eax
 10051cd:	0f 4f d8             	cmovg  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1104
                copyCount = (count - bytesRead);

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
 10051d0:	83 ec 04             	sub    esp,0x4
 10051d3:	53                   	push   ebx
 10051d4:	03 7c 24 14          	add    edi,DWORD PTR [esp+0x14]
 10051d8:	57                   	push   edi
 10051d9:	89 e8                	mov    eax,ebp
 10051db:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
 10051df:	50                   	push   eax
 10051e0:	e8 9b 45 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1107

            // Move onto next sector and reset copy offset
            sector++;
 10051e5:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
 10051ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1112
            offset = 0;
        }

        // Increase total read count
        bytesRead += copyCount;
 10051ed:	01 dd                	add    ebp,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1115

        // Increment file pointer
        file->bytenum += copyCount;
 10051ef:	01 5e 08             	add    DWORD PTR [esi+0x8],ebx
 10051f2:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1059
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
 10051f7:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
 10051fb:	0f 8f 1f ff ff ff    	jg     1005120 <fl_fread+0x9b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1112
            sector++;
            offset = 0;
        }

        // Increase total read count
        bytesRead += copyCount;
 1005201:	89 e8                	mov    eax,ebp
 1005203:	eb 22                	jmp    1005227 <fl_fread+0x1a2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1035

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (buffer==NULL || file==NULL)
        return -1;
 1005205:	b8 ff ff ff ff       	mov    eax,0xffffffff
 100520a:	eb 1b                	jmp    1005227 <fl_fread+0x1a2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1039

    // No read permissions
    if (!(file->flags & FILE_READ))
        return -1;
 100520c:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1005211:	eb 14                	jmp    1005227 <fl_fread+0x1a2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1047
    if (!count)
        return 0;

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
        return -1;
 1005213:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1005218:	eb 0d                	jmp    1005227 <fl_fread+0x1a2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1027
{
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
    int bytesRead = 0;
 100521a:	b8 00 00 00 00       	mov    eax,0x0
 100521f:	eb 06                	jmp    1005227 <fl_fread+0x1a2>
 1005221:	89 e8                	mov    eax,ebp
 1005223:	eb 02                	jmp    1005227 <fl_fread+0x1a2>
 1005225:	89 e8                	mov    eax,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1119
        // Increment file pointer
        file->bytenum += copyCount;
    }

    return bytesRead;
}
 1005227:	83 c4 1c             	add    esp,0x1c
 100522a:	5b                   	pop    ebx
 100522b:	5e                   	pop    esi
 100522c:	5f                   	pop    edi
 100522d:	5d                   	pop    ebp
 100522e:	c3                   	ret    

0100522f <fl_fgetc>:
fl_fgetc():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:975
}
//-----------------------------------------------------------------------------
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
 100522f:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:977
    int res;
    uint8 data = 0;
 1005232:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:979

    res = fl_fread(&data, 1, 1, f);
 1005237:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 100523b:	6a 01                	push   0x1
 100523d:	6a 01                	push   0x1
 100523f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
 1005243:	50                   	push   eax
 1005244:	e8 3c fe ff ff       	call   1005085 <fl_fread>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:981
    if (res == 1)
        return (int)data;
 1005249:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
 100524e:	83 f8 01             	cmp    eax,0x1
 1005251:	0f 44 c2             	cmove  eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:984
    else
        return res;
}
 1005254:	83 c4 2c             	add    esp,0x2c
 1005257:	c3                   	ret    

01005258 <fl_fgets>:
fl_fgets():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:989
//-----------------------------------------------------------------------------
// fl_fgets: Get a string from a stream
//-----------------------------------------------------------------------------
char *fl_fgets(char *s, int n, void *f)
{
 1005258:	55                   	push   ebp
 1005259:	57                   	push   edi
 100525a:	56                   	push   esi
 100525b:	53                   	push   ebx
 100525c:	83 ec 0c             	sub    esp,0xc
 100525f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
 1005263:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
 1005267:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:993
    int idx = 0;

    // Space for null terminator?
    if (n > 0)
 100526b:	85 f6                	test   esi,esi
 100526d:	7e 3e                	jle    10052ad <fl_fgets+0x55>
 100526f:	83 ee 01             	sub    esi,0x1
 1005272:	bb 00 00 00 00       	mov    ebx,0x0
 1005277:	eb 1c                	jmp    1005295 <fl_fgets+0x3d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:998
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
        {
            int ch = fl_fgetc(f);
 1005279:	83 ec 0c             	sub    esp,0xc
 100527c:	55                   	push   ebp
 100527d:	e8 ad ff ff ff       	call   100522f <fl_fgetc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1001

            // EOF / Error?
            if (ch < 0)
 1005282:	83 c4 10             	add    esp,0x10
 1005285:	85 c0                	test   eax,eax
 1005287:	78 12                	js     100529b <fl_fgets+0x43>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1005
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
 1005289:	83 c3 01             	add    ebx,0x1
 100528c:	88 44 1f ff          	mov    BYTE PTR [edi+ebx*1-0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1008

            // End of line?
            if (ch == '\n')
 1005290:	83 f8 0a             	cmp    eax,0xa
 1005293:	74 0a                	je     100529f <fl_fgets+0x47>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:996

    // Space for null terminator?
    if (n > 0)
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
 1005295:	39 f3                	cmp    ebx,esi
 1005297:	75 e0                	jne    1005279 <fl_fgets+0x21>
 1005299:	eb 06                	jmp    10052a1 <fl_fgets+0x49>
 100529b:	89 de                	mov    esi,ebx
 100529d:	eb 02                	jmp    10052a1 <fl_fgets+0x49>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1005
            // EOF / Error?
            if (ch < 0)
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
 100529f:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1012
            // End of line?
            if (ch == '\n')
                break;
        }

        if (idx > 0)
 10052a1:	85 f6                	test   esi,esi
 10052a3:	7e 08                	jle    10052ad <fl_fgets+0x55>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1013
            s[idx] = '\0';
 10052a5:	c6 04 37 00          	mov    BYTE PTR [edi+esi*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1016
    }

    return (idx > 0) ? s : 0;
 10052a9:	89 f8                	mov    eax,edi
 10052ab:	eb 05                	jmp    10052b2 <fl_fgets+0x5a>
 10052ad:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1017
}
 10052b2:	83 c4 0c             	add    esp,0xc
 10052b5:	5b                   	pop    ebx
 10052b6:	5e                   	pop    esi
 10052b7:	5f                   	pop    edi
 10052b8:	5d                   	pop    ebp
 10052b9:	c3                   	ret    

010052ba <fl_fseek>:
fl_fseek():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1124
}
//-----------------------------------------------------------------------------
// fl_fseek: Seek to a specific place in the file
//-----------------------------------------------------------------------------
int fl_fseek( void *f, long offset, int origin )
{
 10052ba:	55                   	push   ebp
 10052bb:	57                   	push   edi
 10052bc:	56                   	push   esi
 10052bd:	53                   	push   ebx
 10052be:	83 ec 0c             	sub    esp,0xc
 10052c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
 10052c5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
 10052c9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1129
    FL_FILE *file = (FL_FILE *)f;
    int res = -1;

    // If first call to library, initialise
    CHECK_FL_INIT();
 10052cd:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 10052d4:	75 05                	jne    10052db <fl_fseek+0x21>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1129 (discriminator 1)
 10052d6:	e8 d2 f7 ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1131

    if (!file)
 10052db:	85 db                	test   ebx,ebx
 10052dd:	0f 84 b0 00 00 00    	je     1005393 <fl_fseek+0xd9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1134
        return -1;

    if (origin == SEEK_END && offset != 0)
 10052e3:	83 fe 02             	cmp    esi,0x2
 10052e6:	75 08                	jne    10052f0 <fl_fseek+0x36>
 10052e8:	85 ff                	test   edi,edi
 10052ea:	0f 85 aa 00 00 00    	jne    100539a <fl_fseek+0xe0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1137
        return -1;

    FL_LOCK(&_fs);
 10052f0:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 10052f5:	85 c0                	test   eax,eax
 10052f7:	74 02                	je     10052fb <fl_fseek+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1137 (discriminator 1)
 10052f9:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1140

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
 10052fb:	c7 83 28 07 00 00 ff 	mov    DWORD PTR [ebx+0x728],0xffffffff
 1005302:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1141
    file->file_data_dirty = 0;
 1005305:	c7 83 2c 07 00 00 00 	mov    DWORD PTR [ebx+0x72c],0x0
 100530c:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1143

    if (origin == SEEK_SET)
 100530f:	85 f6                	test   esi,esi
 1005311:	75 14                	jne    1005327 <fl_fseek+0x6d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1145
    {
        file->bytenum = (uint32)offset;
 1005313:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1147

        if (file->bytenum > file->filelength)
 1005316:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1150
            file->bytenum = file->filelength;

        res = 0;
 1005319:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1147

    if (origin == SEEK_SET)
    {
        file->bytenum = (uint32)offset;

        if (file->bytenum > file->filelength)
 100531e:	39 c7                	cmp    edi,eax
 1005320:	76 5f                	jbe    1005381 <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1148
            file->bytenum = file->filelength;
 1005322:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
 1005325:	eb 5a                	jmp    1005381 <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1152

        res = 0;
    }
    else if (origin == SEEK_CUR)
 1005327:	83 fe 01             	cmp    esi,0x1
 100532a:	75 40                	jne    100536c <fl_fseek+0xb2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1155
    {
        // Positive shift
        if (offset >= 0)
 100532c:	85 ff                	test   edi,edi
 100532e:	78 17                	js     1005347 <fl_fseek+0x8d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1157
        {
            file->bytenum += offset;
 1005330:	03 7b 08             	add    edi,DWORD PTR [ebx+0x8]
 1005333:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1159

            if (file->bytenum > file->filelength)
 1005336:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1175
                file->bytenum = 0;
            else
                file->bytenum-= offset;
        }

        res = 0;
 1005339:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1159
        // Positive shift
        if (offset >= 0)
        {
            file->bytenum += offset;

            if (file->bytenum > file->filelength)
 100533e:	39 c7                	cmp    edi,eax
 1005340:	76 3f                	jbe    1005381 <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1160
                file->bytenum = file->filelength;
 1005342:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
 1005345:	eb 3a                	jmp    1005381 <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1169
        {
            // Make shift positive
            offset = -offset;

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
 1005347:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
 100534a:	89 fa                	mov    edx,edi
 100534c:	f7 da                	neg    edx
 100534e:	39 d0                	cmp    eax,edx
 1005350:	73 0e                	jae    1005360 <fl_fseek+0xa6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1170
                file->bytenum = 0;
 1005352:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1175
            else
                file->bytenum-= offset;
        }

        res = 0;
 1005359:	bd 00 00 00 00       	mov    ebp,0x0
 100535e:	eb 21                	jmp    1005381 <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1172

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
                file->bytenum = 0;
            else
                file->bytenum-= offset;
 1005360:	01 c7                	add    edi,eax
 1005362:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1175
        }

        res = 0;
 1005365:	bd 00 00 00 00       	mov    ebp,0x0
 100536a:	eb 15                	jmp    1005381 <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1183
    {
        file->bytenum = file->filelength;
        res = 0;
    }
    else
        res = -1;
 100536c:	bd ff ff ff ff       	mov    ebp,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1177
                file->bytenum-= offset;
        }

        res = 0;
    }
    else if (origin == SEEK_END)
 1005371:	83 fe 02             	cmp    esi,0x2
 1005374:	75 0b                	jne    1005381 <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1179
    {
        file->bytenum = file->filelength;
 1005376:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 1005379:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1180
        res = 0;
 100537c:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1185
    }
    else
        res = -1;

    FL_UNLOCK(&_fs);
 1005381:	8b 15 a0 00 12 00    	mov    edx,DWORD PTR ds:0x1200a0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1187

    return res;
 1005387:	89 e8                	mov    eax,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1185
        res = 0;
    }
    else
        res = -1;

    FL_UNLOCK(&_fs);
 1005389:	85 d2                	test   edx,edx
 100538b:	74 12                	je     100539f <fl_fseek+0xe5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1185 (discriminator 1)
 100538d:	ff d2                	call   edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1187 (discriminator 1)

    return res;
 100538f:	89 e8                	mov    eax,ebp
 1005391:	eb 0c                	jmp    100539f <fl_fseek+0xe5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1132

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (!file)
        return -1;
 1005393:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1005398:	eb 05                	jmp    100539f <fl_fseek+0xe5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1135

    if (origin == SEEK_END && offset != 0)
        return -1;
 100539a:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1188
        res = -1;

    FL_UNLOCK(&_fs);

    return res;
}
 100539f:	83 c4 0c             	add    esp,0xc
 10053a2:	5b                   	pop    ebx
 10053a3:	5e                   	pop    esi
 10053a4:	5f                   	pop    edi
 10053a5:	5d                   	pop    ebp
 10053a6:	c3                   	ret    

010053a7 <fl_fgetpos>:
fl_fgetpos():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1193
//-----------------------------------------------------------------------------
// fl_fgetpos: Get the current file position
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
 10053a7:	53                   	push   ebx
 10053a8:	83 ec 08             	sub    esp,0x8
 10053ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1196
    FL_FILE *file = (FL_FILE *)f;

    if (!file)
 10053af:	85 db                	test   ebx,ebx
 10053b1:	74 2c                	je     10053df <fl_fgetpos+0x38>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1199
        return -1;

    FL_LOCK(&_fs);
 10053b3:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 10053b8:	85 c0                	test   eax,eax
 10053ba:	74 02                	je     10053be <fl_fgetpos+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1199 (discriminator 1)
 10053bc:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1202

    // Get position
    *position = file->bytenum;
 10053be:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
 10053c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 10053c5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1204

    FL_UNLOCK(&_fs);
 10053c7:	8b 15 a0 00 12 00    	mov    edx,DWORD PTR ds:0x1200a0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1206

    return 0;
 10053cd:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1204
    FL_LOCK(&_fs);

    // Get position
    *position = file->bytenum;

    FL_UNLOCK(&_fs);
 10053d2:	85 d2                	test   edx,edx
 10053d4:	74 0e                	je     10053e4 <fl_fgetpos+0x3d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1204 (discriminator 1)
 10053d6:	ff d2                	call   edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1206 (discriminator 1)

    return 0;
 10053d8:	b8 00 00 00 00       	mov    eax,0x0
 10053dd:	eb 05                	jmp    10053e4 <fl_fgetpos+0x3d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1197
int fl_fgetpos(void *f , uint32 * position)
{
    FL_FILE *file = (FL_FILE *)f;

    if (!file)
        return -1;
 10053df:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1207
    *position = file->bytenum;

    FL_UNLOCK(&_fs);

    return 0;
}
 10053e4:	83 c4 08             	add    esp,0x8
 10053e7:	5b                   	pop    ebx
 10053e8:	c3                   	ret    

010053e9 <fl_ftell>:
fl_ftell():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1212
//-----------------------------------------------------------------------------
// fl_ftell: Get the current file position
//-----------------------------------------------------------------------------
long fl_ftell(void *f)
{
 10053e9:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1213
    uint32 pos = 0;
 10053ec:	c7 44 24 14 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
 10053f3:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1215

    fl_fgetpos(f, &pos);
 10053f4:	8d 44 24 14          	lea    eax,[esp+0x14]
 10053f8:	50                   	push   eax
 10053f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 10053fd:	e8 a5 ff ff ff       	call   10053a7 <fl_fgetpos>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1218

    return (long)pos;
}
 1005402:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 1005406:	83 c4 2c             	add    esp,0x2c
 1005409:	c3                   	ret    

0100540a <fl_feof>:
fl_feof():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1223
//-----------------------------------------------------------------------------
// fl_feof: Is the file pointer at the end of the stream?
//-----------------------------------------------------------------------------
int fl_feof(void *f)
{
 100540a:	53                   	push   ebx
 100540b:	83 ec 08             	sub    esp,0x8
 100540e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1227
    FL_FILE *file = (FL_FILE *)f;
    int res;

    if (!file)
 1005412:	85 db                	test   ebx,ebx
 1005414:	74 26                	je     100543c <fl_feof+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1230
        return -1;

    FL_LOCK(&_fs);
 1005416:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 100541b:	85 c0                	test   eax,eax
 100541d:	74 02                	je     1005421 <fl_feof+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1230 (discriminator 1)
 100541f:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1232

    if (file->bytenum == file->filelength)
 1005421:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 1005424:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
 1005427:	0f 94 c3             	sete   bl
 100542a:	0f b6 db             	movzx  ebx,bl
 100542d:	f7 db                	neg    ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1237
        res = EOF;
    else
        res = 0;

    FL_UNLOCK(&_fs);
 100542f:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005434:	85 c0                	test   eax,eax
 1005436:	74 09                	je     1005441 <fl_feof+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1237 (discriminator 1)
 1005438:	ff d0                	call   eax
 100543a:	eb 05                	jmp    1005441 <fl_feof+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1228
{
    FL_FILE *file = (FL_FILE *)f;
    int res;

    if (!file)
        return -1;
 100543c:	bb ff ff ff ff       	mov    ebx,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1240
        res = 0;

    FL_UNLOCK(&_fs);

    return res;
}
 1005441:	89 d8                	mov    eax,ebx
 1005443:	83 c4 08             	add    esp,0x8
 1005446:	5b                   	pop    ebx
 1005447:	c3                   	ret    

01005448 <fl_fwrite>:
fl_fwrite():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1262
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
 1005448:	55                   	push   ebp
 1005449:	57                   	push   edi
 100544a:	56                   	push   esi
 100544b:	53                   	push   ebx
 100544c:	83 ec 1c             	sub    esp,0x1c
 100544f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1272
    uint8 *buffer = (uint8 *)data;
    uint32 bytesWritten = 0;
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1005453:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 100545a:	75 05                	jne    1005461 <fl_fwrite+0x19>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1272 (discriminator 1)
 100545c:	e8 4c f6 ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1274

    if (!file)
 1005461:	85 f6                	test   esi,esi
 1005463:	0f 84 ef 01 00 00    	je     1005658 <fl_fwrite+0x210>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1277
        return -1;

    FL_LOCK(&_fs);
 1005469:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 100546e:	85 c0                	test   eax,eax
 1005470:	74 02                	je     1005474 <fl_fwrite+0x2c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1277 (discriminator 1)
 1005472:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1280

    // No write permissions
    if (!(file->flags & FILE_WRITE))
 1005474:	0f b6 86 30 07 00 00 	movzx  eax,BYTE PTR [esi+0x730]
 100547b:	a8 02                	test   al,0x2
 100547d:	75 24                	jne    10054a3 <fl_fwrite+0x5b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1282
    {
        FL_UNLOCK(&_fs);
 100547f:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1283
        return -1;
 1005484:	c7 44 24 0c ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
 100548b:	ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1282
    FL_LOCK(&_fs);

    // No write permissions
    if (!(file->flags & FILE_WRITE))
    {
        FL_UNLOCK(&_fs);
 100548c:	85 c0                	test   eax,eax
 100548e:	0f 84 cc 01 00 00    	je     1005660 <fl_fwrite+0x218>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1282 (discriminator 1)
 1005494:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1283 (discriminator 1)
        return -1;
 1005496:	c7 44 24 0c ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
 100549d:	ff 
 100549e:	e9 bd 01 00 00       	jmp    1005660 <fl_fwrite+0x218>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1266
int fl_fwrite(const void * data, int size, int count, void *f )
{
    FL_FILE *file = (FL_FILE *)f;
    uint32 sector;
    uint32 offset;
    uint32 length = (size*count);
 10054a3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
 10054a7:	0f af 54 24 38       	imul   edx,DWORD PTR [esp+0x38]
 10054ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
 10054b0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1287
        FL_UNLOCK(&_fs);
        return -1;
    }

    // Append writes to end of file
    if (file->flags & FILE_APPEND)
 10054b4:	a8 04                	test   al,0x4
 10054b6:	74 1d                	je     10054d5 <fl_fwrite+0x8d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1288
        file->bytenum = file->filelength;
 10054b8:	8b 6e 0c             	mov    ebp,DWORD PTR [esi+0xc]
 10054bb:	89 6e 08             	mov    DWORD PTR [esi+0x8],ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1292
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
 10054be:	89 e8                	mov    eax,ebp
 10054c0:	c1 e8 09             	shr    eax,0x9
 10054c3:	89 04 24             	mov    DWORD PTR [esp],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1295

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
 10054c6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1297

    while (bytesWritten < length)
 10054cc:	85 d2                	test   edx,edx
 10054ce:	75 21                	jne    10054f1 <fl_fwrite+0xa9>
 10054d0:	e9 6f 01 00 00       	jmp    1005644 <fl_fwrite+0x1fc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1292
    if (file->flags & FILE_APPEND)
        file->bytenum = file->filelength;
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
 10054d5:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
 10054d8:	89 e8                	mov    eax,ebp
 10054da:	c1 e8 09             	shr    eax,0x9
 10054dd:	89 04 24             	mov    DWORD PTR [esp],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1295

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
 10054e0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1297

    while (bytesWritten < length)
 10054e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
 10054eb:	0f 84 48 01 00 00    	je     1005639 <fl_fwrite+0x1f1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1262
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
 10054f1:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1365
                file->file_data_address = sector;
                file->file_data_dirty = 0;
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
 10054f6:	8d 86 28 05 00 00    	lea    eax,[esi+0x528]
 10054fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1300
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
 1005500:	85 ed                	test   ebp,ebp
 1005502:	75 7c                	jne    1005580 <fl_fwrite+0x138>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1300 (discriminator 1)
 1005504:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
 1005508:	29 fb                	sub    ebx,edi
 100550a:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
 1005510:	76 6e                	jbe    1005580 <fl_fwrite+0x138>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1305
        {
            uint32 sectorsWrote;

            // Buffered sector, flush back to disk
            if (file->file_data_address != 0xFFFFFFFF)
 1005512:	83 be 28 07 00 00 ff 	cmp    DWORD PTR [esi+0x728],0xffffffff
 1005519:	74 29                	je     1005544 <fl_fwrite+0xfc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1308
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
 100551b:	83 be 2c 07 00 00 00 	cmp    DWORD PTR [esi+0x72c],0x0
 1005522:	74 0c                	je     1005530 <fl_fwrite+0xe8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1309
                    fl_fflush(file);
 1005524:	83 ec 0c             	sub    esp,0xc
 1005527:	56                   	push   esi
 1005528:	e8 41 fa ff ff       	call   1004f6e <fl_fflush>
 100552d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1311

                file->file_data_address = 0xFFFFFFFF;
 1005530:	c7 86 28 07 00 00 ff 	mov    DWORD PTR [esi+0x728],0xffffffff
 1005537:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1312
                file->file_data_dirty = 0;
 100553a:	c7 86 2c 07 00 00 00 	mov    DWORD PTR [esi+0x72c],0x0
 1005541:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1316
            }

            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
 1005544:	89 f9                	mov    ecx,edi
 1005546:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
 100554a:	83 ec 0c             	sub    esp,0xc
 100554d:	c1 eb 09             	shr    ebx,0x9
 1005550:	53                   	push   ebx
 1005551:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1005555:	89 da                	mov    edx,ebx
 1005557:	89 f0                	mov    eax,esi
 1005559:	e8 d8 f0 ff ff       	call   1004636 <_write_sectors>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1317
            copyCount = FAT_SECTOR_SIZE * sectorsWrote;
 100555e:	89 c2                	mov    edx,eax
 1005560:	c1 e2 09             	shl    edx,0x9
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1320

            // Increase total read count
            bytesWritten += copyCount;
 1005563:	01 d7                	add    edi,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1323

            // Increment file pointer
            file->bytenum += copyCount;
 1005565:	01 56 08             	add    DWORD PTR [esi+0x8],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1326

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
 1005568:	89 d9                	mov    ecx,ebx
 100556a:	01 c1                	add    ecx,eax
 100556c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1329
            offset = 0;

            if (!sectorsWrote)
 1005570:	83 c4 10             	add    esp,0x10
 1005573:	85 c0                	test   eax,eax
 1005575:	0f 85 af 00 00 00    	jne    100562a <fl_fwrite+0x1e2>
 100557b:	e9 b9 00 00 00       	jmp    1005639 <fl_fwrite+0x1f1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1335
                break;
        }
        else
        {
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
 1005580:	bb 00 02 00 00       	mov    ebx,0x200
 1005585:	29 eb                	sub    ebx,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1338

            // Only require some of this sector?
            if (copyCount > (length - bytesWritten))
 1005587:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 100558b:	29 f8                	sub    eax,edi
 100558d:	39 c3                	cmp    ebx,eax
 100558f:	0f 47 d8             	cmova  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1342
                copyCount = (length - bytesWritten);

            // Do we need to read a new sector?
            if (file->file_data_address != sector)
 1005592:	8b 04 24             	mov    eax,DWORD PTR [esp]
 1005595:	39 86 28 07 00 00    	cmp    DWORD PTR [esi+0x728],eax
 100559b:	74 61                	je     10055fe <fl_fwrite+0x1b6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1345
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
 100559d:	83 be 2c 07 00 00 00 	cmp    DWORD PTR [esi+0x72c],0x0
 10055a4:	74 0c                	je     10055b2 <fl_fwrite+0x16a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1346
                    fl_fflush(file);
 10055a6:	83 ec 0c             	sub    esp,0xc
 10055a9:	56                   	push   esi
 10055aa:	e8 bf f9 ff ff       	call   1004f6e <fl_fflush>
 10055af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1349

                // If we plan to overwrite the whole sector, we don't need to read it first!
                if (copyCount != FAT_SECTOR_SIZE)
 10055b2:	81 fb 00 02 00 00    	cmp    ebx,0x200
 10055b8:	74 31                	je     10055eb <fl_fwrite+0x1a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1356
                    // NOTE: This does not have succeed; if last sector of file
                    // reached, no valid data will be read in, but write will
                    // allocate some more space for new data.

                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
 10055ba:	83 ec 0c             	sub    esp,0xc
 10055bd:	6a 01                	push   0x1
 10055bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
 10055c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 10055c7:	89 f0                	mov    eax,esi
 10055c9:	e8 ce f1 ff ff       	call   100479c <_read_sectors>
 10055ce:	83 c4 10             	add    esp,0x10
 10055d1:	85 c0                	test   eax,eax
 10055d3:	75 16                	jne    10055eb <fl_fwrite+0x1a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1357
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
 10055d5:	83 ec 04             	sub    esp,0x4
 10055d8:	68 00 02 00 00       	push   0x200
 10055dd:	6a 00                	push   0x0
 10055df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 10055e3:	e8 4b 39 00 00       	call   1008f33 <memset>
 10055e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1360
                }

                file->file_data_address = sector;
 10055eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
 10055ee:	89 86 28 07 00 00    	mov    DWORD PTR [esi+0x728],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1361
                file->file_data_dirty = 0;
 10055f4:	c7 86 2c 07 00 00 00 	mov    DWORD PTR [esi+0x72c],0x0
 10055fb:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1365
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
 10055fe:	83 ec 04             	sub    esp,0x4
 1005601:	53                   	push   ebx
 1005602:	89 f8                	mov    eax,edi
 1005604:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
 1005608:	50                   	push   eax
 1005609:	03 6c 24 14          	add    ebp,DWORD PTR [esp+0x14]
 100560d:	55                   	push   ebp
 100560e:	e8 6d 41 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1368

            // Mark buffer as dirty
            file->file_data_dirty = 1;
 1005613:	c7 86 2c 07 00 00 01 	mov    DWORD PTR [esi+0x72c],0x1
 100561a:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1371

            // Increase total read count
            bytesWritten += copyCount;
 100561d:	01 df                	add    edi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1374

            // Increment file pointer
            file->bytenum += copyCount;
 100561f:	01 5e 08             	add    DWORD PTR [esi+0x8],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1377

            // Move onto next sector and reset copy offset
            sector++;
 1005622:	83 44 24 10 01       	add    DWORD PTR [esp+0x10],0x1
 1005627:	83 c4 10             	add    esp,0x10
 100562a:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1297
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
 100562f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
 1005633:	0f 87 c7 fe ff ff    	ja     1005500 <fl_fwrite+0xb8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1383
            offset = 0;
        }
    }

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
 1005639:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
 100563c:	3b 46 0c             	cmp    eax,DWORD PTR [esi+0xc]
 100563f:	76 03                	jbe    1005644 <fl_fwrite+0x1fc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1386
    {
        // Increase file size to new point
        file->filelength = file->bytenum;
 1005641:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1396
    }

#if FATFS_INC_TIME_DATE_SUPPORT
    // If time & date support is enabled, always force directory entry to be
    // written in-order to update file modify / access time & date.
    file->filelength_changed = 1;
 1005644:	c7 46 10 01 00 00 00 	mov    DWORD PTR [esi+0x10],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1399
#endif

    FL_UNLOCK(&_fs);
 100564b:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005650:	85 c0                	test   eax,eax
 1005652:	74 0c                	je     1005660 <fl_fwrite+0x218>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1399 (discriminator 1)
 1005654:	ff d0                	call   eax
 1005656:	eb 08                	jmp    1005660 <fl_fwrite+0x218>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1275

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (!file)
        return -1;
 1005658:	c7 44 24 0c ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
 100565f:	ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1402
#endif

    FL_UNLOCK(&_fs);

    return (size*count);
}
 1005660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1005664:	83 c4 1c             	add    esp,0x1c
 1005667:	5b                   	pop    ebx
 1005668:	5e                   	pop    esi
 1005669:	5f                   	pop    edi
 100566a:	5d                   	pop    ebp
 100566b:	c3                   	ret    

0100566c <fl_fputc>:
fl_fputc():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1246
//-----------------------------------------------------------------------------
// fl_fputc: Write a character to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputc(int c, void *f)
{
 100566c:	53                   	push   ebx
 100566d:	83 ec 18             	sub    esp,0x18
 1005670:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1247
    uint8 data = (uint8)c;
 1005674:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1250
    int res;

    res = fl_fwrite(&data, 1, 1, f);
 1005678:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 100567c:	6a 01                	push   0x1
 100567e:	6a 01                	push   0x1
 1005680:	8d 44 24 1b          	lea    eax,[esp+0x1b]
 1005684:	50                   	push   eax
 1005685:	e8 be fd ff ff       	call   1005448 <fl_fwrite>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1254
    if (res == 1)
        return c;
    else
        return res;
 100568a:	83 f8 01             	cmp    eax,0x1
 100568d:	0f 44 c3             	cmove  eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1255
}
 1005690:	83 c4 28             	add    esp,0x28
 1005693:	5b                   	pop    ebx
 1005694:	c3                   	ret    

01005695 <fl_fputs>:
fl_fputs():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1409
//-----------------------------------------------------------------------------
// fl_fputs: Write a character string to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
 1005695:	53                   	push   ebx
 1005696:	83 ec 14             	sub    esp,0x14
 1005699:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1410
    int len = (int)strlen(str);
 100569d:	53                   	push   ebx
 100569e:	e8 69 47 00 00       	call   1009e0c <strlen>
 10056a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1411
    int res = fl_fwrite(str, 1, len, f);
 10056a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 10056aa:	50                   	push   eax
 10056ab:	6a 01                	push   0x1
 10056ad:	53                   	push   ebx
 10056ae:	e8 95 fd ff ff       	call   1005448 <fl_fwrite>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1417

    if (res == len)
        return len;
    else
        return res;
}
 10056b3:	83 c4 18             	add    esp,0x18
 10056b6:	5b                   	pop    ebx
 10056b7:	c3                   	ret    

010056b8 <fl_remove>:
fl_remove():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1424
//-----------------------------------------------------------------------------
// fl_remove: Remove a file from the filesystem
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
 10056b8:	53                   	push   ebx
 10056b9:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1428
    FL_FILE* file;
    int res = -1;

    FL_LOCK(&_fs);
 10056bc:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 10056c1:	85 c0                	test   eax,eax
 10056c3:	74 02                	je     10056c7 <fl_remove+0xf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1428 (discriminator 1)
 10056c5:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1431

    // Use read_file as this will check if the file is already open!
    file = fl_fopen((char*)filename, "r");
 10056c7:	83 ec 08             	sub    esp,0x8
 10056ca:	68 e9 db 05 01       	push   0x105dbe9
 10056cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 10056d3:	e8 dd f4 ff ff       	call   1004bb5 <fl_fopen>
 10056d8:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1432
    if (file)
 10056da:	83 c4 10             	add    esp,0x10
 10056dd:	85 c0                	test   eax,eax
 10056df:	74 47                	je     1005728 <fl_remove+0x70>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1435
    {
        // Delete allocated space
        if (fatfs_free_cluster_chain(&_fs, file->startcluster))
 10056e1:	83 ec 08             	sub    esp,0x8
 10056e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
 10056e7:	68 60 00 12 00       	push   0x120060
 10056ec:	e8 e4 1e 00 00       	call   10075d5 <fatfs_free_cluster_chain>
 10056f1:	83 c4 10             	add    esp,0x10
 10056f4:	85 c0                	test   eax,eax
 10056f6:	74 37                	je     100572f <fl_remove+0x77>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1438
        {
            // Remove directory entries
            if (fatfs_mark_file_deleted(&_fs, file->parentcluster, (char*)file->shortfilename))
 10056f8:	83 ec 04             	sub    esp,0x4
 10056fb:	8d 83 14 01 00 00    	lea    eax,[ebx+0x114]
 1005701:	50                   	push   eax
 1005702:	ff 33                	push   DWORD PTR [ebx]
 1005704:	68 60 00 12 00       	push   0x120060
 1005709:	e8 56 e8 ff ff       	call   1003f64 <fatfs_mark_file_deleted>
 100570e:	83 c4 10             	add    esp,0x10
 1005711:	85 c0                	test   eax,eax
 1005713:	74 21                	je     1005736 <fl_remove+0x7e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1442
            {
                // Close the file handle (this should not write anything to the file
                // as we have not changed the file since opening it!)
                fl_fclose(file);
 1005715:	83 ec 0c             	sub    esp,0xc
 1005718:	53                   	push   ebx
 1005719:	e8 bc f8 ff ff       	call   1004fda <fl_fclose>
 100571e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1444

                res = 0;
 1005721:	bb 00 00 00 00       	mov    ebx,0x0
 1005726:	eb 13                	jmp    100573b <fl_remove+0x83>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1426
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
    FL_FILE* file;
    int res = -1;
 1005728:	bb ff ff ff ff       	mov    ebx,0xffffffff
 100572d:	eb 0c                	jmp    100573b <fl_remove+0x83>
 100572f:	bb ff ff ff ff       	mov    ebx,0xffffffff
 1005734:	eb 05                	jmp    100573b <fl_remove+0x83>
 1005736:	bb ff ff ff ff       	mov    ebx,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1449
                res = 0;
            }
        }
    }

    FL_UNLOCK(&_fs);
 100573b:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005740:	85 c0                	test   eax,eax
 1005742:	74 02                	je     1005746 <fl_remove+0x8e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1449 (discriminator 1)
 1005744:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1452

    return res;
}
 1005746:	89 d8                	mov    eax,ebx
 1005748:	83 c4 08             	add    esp,0x8
 100574b:	5b                   	pop    ebx
 100574c:	c3                   	ret    

0100574d <fl_createdirectory>:
fl_createdirectory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1459
//-----------------------------------------------------------------------------
// fl_createdirectory: Create a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_createdirectory(const char *path)
{
 100574d:	55                   	push   ebp
 100574e:	57                   	push   edi
 100574f:	56                   	push   esi
 1005750:	53                   	push   ebx
 1005751:	83 ec 4c             	sub    esp,0x4c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1463
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1005754:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 100575b:	75 05                	jne    1005762 <fl_createdirectory+0x15>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1463 (discriminator 1)
 100575d:	e8 4b f3 ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1465

    FL_LOCK(&_fs);
 1005762:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1005767:	85 c0                	test   eax,eax
 1005769:	74 02                	je     100576d <fl_createdirectory+0x20>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1465 (discriminator 1)
 100576b:	ff d0                	call   eax
_create_directory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:174
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
    int i;

    // Allocate a new file handle
    file = _allocate_file();
 100576d:	e8 37 ed ff ff       	call   10044a9 <_allocate_file>
 1005772:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:176
    if (!file)
        return 0;
 1005774:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:175
    int tailNum = 0;
    int i;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
 1005779:	85 c0                	test   eax,eax
 100577b:	0f 84 b2 02 00 00    	je     1005a33 <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:179
        return 0;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
 1005781:	8d 70 14             	lea    esi,[eax+0x14]
 1005784:	83 ec 04             	sub    esp,0x4
 1005787:	68 80 00 00 00       	push   0x80
 100578c:	6a 00                	push   0x0
 100578e:	56                   	push   esi
 100578f:	e8 9f 37 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:180
    memset(file->filename, '\0', sizeof(file->filename));
 1005794:	8d 83 94 00 00 00    	lea    eax,[ebx+0x94]
 100579a:	89 c7                	mov    edi,eax
 100579c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
 10057a0:	83 c4 0c             	add    esp,0xc
 10057a3:	68 80 00 00 00       	push   0x80
 10057a8:	6a 00                	push   0x0
 10057aa:	50                   	push   eax
 10057ab:	e8 83 37 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:183

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
 10057b0:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
 10057b7:	57                   	push   edi
 10057b8:	68 80 00 00 00       	push   0x80
 10057bd:	56                   	push   esi
 10057be:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 10057c2:	e8 37 15 00 00       	call   1006cfe <fatfs_split_path>
 10057c7:	83 c4 20             	add    esp,0x20
 10057ca:	83 f8 ff             	cmp    eax,0xffffffff
 10057cd:	75 11                	jne    10057e0 <fl_createdirectory+0x93>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:185
    {
        _free_file(file);
 10057cf:	89 d8                	mov    eax,ebx
 10057d1:	e8 f0 f0 ff ff       	call   10048c6 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:186
        return 0;
 10057d6:	bf 00 00 00 00       	mov    edi,0x0
 10057db:	e9 53 02 00 00       	jmp    1005a33 <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:190
    }

    // Check if file already open
    if (_check_file_open(file))
 10057e0:	89 d8                	mov    eax,ebx
 10057e2:	e8 10 ed ff ff       	call   10044f7 <_check_file_open>
 10057e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
 10057eb:	85 c0                	test   eax,eax
 10057ed:	74 11                	je     1005800 <fl_createdirectory+0xb3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:192
    {
        _free_file(file);
 10057ef:	89 d8                	mov    eax,ebx
 10057f1:	e8 d0 f0 ff ff       	call   10048c6 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:193
        return 0;
 10057f6:	bf 00 00 00 00       	mov    edi,0x0
 10057fb:	e9 33 02 00 00       	jmp    1005a33 <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:197
    }

    // If file is in the root dir
    if (file->path[0] == 0)
 1005800:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
 1005804:	75 14                	jne    100581a <fl_createdirectory+0xcd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:198
        file->parentcluster = fatfs_get_root_cluster(&_fs);
 1005806:	83 ec 0c             	sub    esp,0xc
 1005809:	68 60 00 12 00       	push   0x120060
 100580e:	e8 fd e2 ff ff       	call   1003b10 <fatfs_get_root_cluster>
 1005813:	89 03                	mov    DWORD PTR [ebx],eax
 1005815:	83 c4 10             	add    esp,0x10
 1005818:	eb 1b                	jmp    1005835 <fl_createdirectory+0xe8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:202
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
 100581a:	89 da                	mov    edx,ebx
 100581c:	89 f0                	mov    eax,esi
 100581e:	e8 58 ed ff ff       	call   100457b <_open_directory>
 1005823:	89 c7                	mov    edi,eax
 1005825:	85 c0                	test   eax,eax
 1005827:	75 0c                	jne    1005835 <fl_createdirectory+0xe8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:204
        {
            _free_file(file);
 1005829:	89 d8                	mov    eax,ebx
 100582b:	e8 96 f0 ff ff       	call   10048c6 <_free_file>
 1005830:	e9 fe 01 00 00       	jmp    1005a33 <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:210
            return 0;
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
 1005835:	8d 44 24 20          	lea    eax,[esp+0x20]
 1005839:	50                   	push   eax
 100583a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
 100583e:	ff 33                	push   DWORD PTR [ebx]
 1005840:	68 60 00 12 00       	push   0x120060
 1005845:	e8 ce e2 ff ff       	call   1003b18 <fatfs_get_file_entry>
 100584a:	83 c4 10             	add    esp,0x10
 100584d:	83 f8 01             	cmp    eax,0x1
 1005850:	75 10                	jne    1005862 <fl_createdirectory+0x115>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:212
    {
        _free_file(file);
 1005852:	89 d8                	mov    eax,ebx
 1005854:	e8 6d f0 ff ff       	call   10048c6 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:213
        return 0;
 1005859:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
 100585d:	e9 d1 01 00 00       	jmp    1005a33 <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:216
    }

    file->startcluster = 0;
 1005862:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:219

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
 1005869:	6a 01                	push   0x1
 100586b:	8d 43 04             	lea    eax,[ebx+0x4]
 100586e:	50                   	push   eax
 100586f:	6a 01                	push   0x1
 1005871:	68 60 00 12 00       	push   0x120060
 1005876:	e8 71 1f 00 00       	call   10077ec <fatfs_allocate_free_space>
 100587b:	89 c7                	mov    edi,eax
 100587d:	83 c4 10             	add    esp,0x10
 1005880:	85 c0                	test   eax,eax
 1005882:	75 0c                	jne    1005890 <fl_createdirectory+0x143>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:221
    {
        _free_file(file);
 1005884:	89 d8                	mov    eax,ebx
 1005886:	e8 3b f0 ff ff       	call   10048c6 <_free_file>
 100588b:	e9 a3 01 00 00       	jmp    1005a33 <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:226
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
 1005890:	8d ab 28 05 00 00    	lea    ebp,[ebx+0x528]
 1005896:	83 ec 04             	sub    esp,0x4
 1005899:	68 00 02 00 00       	push   0x200
 100589e:	6a 00                	push   0x0
 10058a0:	55                   	push   ebp
 10058a1:	e8 8d 36 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:227
    for (i=0;i<_fs.sectors_per_cluster;i++)
 10058a6:	83 c4 10             	add    esp,0x10
 10058a9:	80 3d 60 00 12 00 00 	cmp    BYTE PTR ds:0x120060,0x0
 10058b0:	74 37                	je     10058e9 <fl_createdirectory+0x19c>
 10058b2:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:229
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
 10058b7:	55                   	push   ebp
 10058b8:	56                   	push   esi
 10058b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 10058bc:	68 60 00 12 00       	push   0x120060
 10058c1:	e8 27 e1 ff ff       	call   10039ed <fatfs_write_sector>
 10058c6:	83 c4 10             	add    esp,0x10
 10058c9:	85 c0                	test   eax,eax
 10058cb:	75 0e                	jne    10058db <fl_createdirectory+0x18e>
 10058cd:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:231
        {
            _free_file(file);
 10058cf:	89 d8                	mov    eax,ebx
 10058d1:	e8 f0 ef ff ff       	call   10048c6 <_free_file>
 10058d6:	e9 58 01 00 00       	jmp    1005a33 <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:227
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
    for (i=0;i<_fs.sectors_per_cluster;i++)
 10058db:	83 c6 01             	add    esi,0x1
 10058de:	0f b6 05 60 00 12 00 	movzx  eax,BYTE PTR ds:0x120060
 10058e5:	39 c6                	cmp    esi,eax
 10058e7:	7c ce                	jl     10058b7 <fl_createdirectory+0x16a>
 10058e9:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:243
    // Generate a short filename & tail
    tailNum = 0;
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
 10058ee:	8d 6c 24 15          	lea    ebp,[esp+0x15]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:247

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
 10058f2:	8d bb 14 01 00 00    	lea    edi,[ebx+0x114]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:243
    // Generate a short filename & tail
    tailNum = 0;
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
 10058f8:	83 ec 08             	sub    esp,0x8
 10058fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 10058ff:	55                   	push   ebp
 1005900:	e8 07 0f 00 00       	call   100680c <fatfs_lfn_create_sfn>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:246

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
 1005905:	83 c4 10             	add    esp,0x10
 1005908:	85 f6                	test   esi,esi
 100590a:	74 28                	je     1005934 <fl_createdirectory+0x1e7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:247
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
 100590c:	83 ec 04             	sub    esp,0x4
 100590f:	56                   	push   esi
 1005910:	55                   	push   ebp
 1005911:	57                   	push   edi
 1005912:	e8 20 10 00 00       	call   1006937 <fatfs_lfn_generate_tail>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:253
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
 1005917:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
 100591b:	83 c4 0c             	add    esp,0xc
 100591e:	57                   	push   edi
 100591f:	ff 33                	push   DWORD PTR [ebx]
 1005921:	68 60 00 12 00       	push   0x120060
 1005926:	e8 0a e4 ff ff       	call   1003d35 <fatfs_sfn_exists>
 100592b:	83 c4 10             	add    esp,0x10
 100592e:	85 c0                	test   eax,eax
 1005930:	75 37                	jne    1005969 <fl_createdirectory+0x21c>
 1005932:	eb 2b                	jmp    100595f <fl_createdirectory+0x212>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:250
        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
 1005934:	83 ec 04             	sub    esp,0x4
 1005937:	6a 0b                	push   0xb
 1005939:	55                   	push   ebp
 100593a:	57                   	push   edi
 100593b:	e8 40 3e 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:253

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
 1005940:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
 1005944:	83 c4 0c             	add    esp,0xc
 1005947:	57                   	push   edi
 1005948:	ff 33                	push   DWORD PTR [ebx]
 100594a:	68 60 00 12 00       	push   0x120060
 100594f:	e8 e1 e3 ff ff       	call   1003d35 <fatfs_sfn_exists>
 1005954:	83 c4 10             	add    esp,0x10
 1005957:	85 c0                	test   eax,eax
 1005959:	0f 85 e1 00 00 00    	jne    1005a40 <fl_createdirectory+0x2f3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:261
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
 100595f:	81 fe 0f 27 00 00    	cmp    esi,0x270f
 1005965:	75 30                	jne    1005997 <fl_createdirectory+0x24a>
 1005967:	eb 0b                	jmp    1005974 <fl_createdirectory+0x227>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:256

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;

        tailNum++;
 1005969:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:258
    }
    while (tailNum < 9999);
 100596c:	81 fe 0f 27 00 00    	cmp    esi,0x270f
 1005972:	75 84                	jne    10058f8 <fl_createdirectory+0x1ab>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:264

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
 1005974:	83 ec 08             	sub    esp,0x8
 1005977:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 100597a:	68 60 00 12 00       	push   0x120060
 100597f:	e8 51 1c 00 00       	call   10075d5 <fatfs_free_cluster_chain>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:266

        _free_file(file);
 1005984:	89 d8                	mov    eax,ebx
 1005986:	e8 3b ef ff ff       	call   10048c6 <_free_file>
 100598b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:267
        return 0;
 100598e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
 1005992:	e9 9c 00 00 00       	jmp    1005a33 <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:295
        return 0;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 1))
 1005997:	83 ec 04             	sub    esp,0x4
 100599a:	6a 01                	push   0x1
 100599c:	6a 00                	push   0x0
 100599e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 10059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 10059a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 10059a9:	ff 33                	push   DWORD PTR [ebx]
 10059ab:	68 60 00 12 00       	push   0x120060
 10059b0:	e8 f2 1e 00 00       	call   10078a7 <fatfs_add_file_entry>
 10059b5:	89 c7                	mov    edi,eax
 10059b7:	83 c4 20             	add    esp,0x20
 10059ba:	85 c0                	test   eax,eax
 10059bc:	75 1c                	jne    10059da <fl_createdirectory+0x28d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:298
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
 10059be:	83 ec 08             	sub    esp,0x8
 10059c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 10059c4:	68 60 00 12 00       	push   0x120060
 10059c9:	e8 07 1c 00 00       	call   10075d5 <fatfs_free_cluster_chain>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:300

        _free_file(file);
 10059ce:	89 d8                	mov    eax,ebx
 10059d0:	e8 f1 ee ff ff       	call   10048c6 <_free_file>
 10059d5:	83 c4 10             	add    esp,0x10
 10059d8:	eb 59                	jmp    1005a33 <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:305
        return 0;
    }

    // General
    file->filelength = 0;
 10059da:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:306
    file->bytenum = 0;
 10059e1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:307
    file->file_data_address = 0xFFFFFFFF;
 10059e8:	c7 83 28 07 00 00 ff 	mov    DWORD PTR [ebx+0x728],0xffffffff
 10059ef:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:308
    file->file_data_dirty = 0;
 10059f2:	c7 83 2c 07 00 00 00 	mov    DWORD PTR [ebx+0x72c],0x0
 10059f9:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:309
    file->filelength_changed = 0;
 10059fc:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:312

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
 1005a03:	c7 83 20 05 00 00 ff 	mov    DWORD PTR [ebx+0x520],0xffffffff
 1005a0a:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:313
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
 1005a0d:	c7 83 24 05 00 00 ff 	mov    DWORD PTR [ebx+0x524],0xffffffff
 1005a14:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:315

    fatfs_fat_purge(&_fs);
 1005a17:	83 ec 0c             	sub    esp,0xc
 1005a1a:	68 60 00 12 00       	push   0x120060
 1005a1f:	e8 67 18 00 00       	call   100728b <fatfs_fat_purge>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:317

    _free_file(file);
 1005a24:	89 d8                	mov    eax,ebx
 1005a26:	e8 9b ee ff ff       	call   10048c6 <_free_file>
 1005a2b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:318
    return 1;
 1005a2e:	bf 01 00 00 00       	mov    edi,0x1
fl_createdirectory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1467
    // If first call to library, initialise
    CHECK_FL_INIT();

    FL_LOCK(&_fs);
    res =_create_directory((char*)path);
    FL_UNLOCK(&_fs);
 1005a33:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005a38:	85 c0                	test   eax,eax
 1005a3a:	74 0c                	je     1005a48 <fl_createdirectory+0x2fb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1467 (discriminator 1)
 1005a3c:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1469 (discriminator 1)

    return res;
 1005a3e:	eb 08                	jmp    1005a48 <fl_createdirectory+0x2fb>
_create_directory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:256

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;

        tailNum++;
 1005a40:	83 c6 01             	add    esi,0x1
 1005a43:	e9 b0 fe ff ff       	jmp    10058f8 <fl_createdirectory+0x1ab>
fl_createdirectory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1470
    FL_LOCK(&_fs);
    res =_create_directory((char*)path);
    FL_UNLOCK(&_fs);

    return res;
}
 1005a48:	89 f8                	mov    eax,edi
 1005a4a:	83 c4 4c             	add    esp,0x4c
 1005a4d:	5b                   	pop    ebx
 1005a4e:	5e                   	pop    esi
 1005a4f:	5f                   	pop    edi
 1005a50:	5d                   	pop    ebp
 1005a51:	c3                   	ret    

01005a52 <fl_opendir>:
fl_opendir():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1521
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
 1005a52:	56                   	push   esi
 1005a53:	53                   	push   ebx
 1005a54:	83 ec 14             	sub    esp,0x14
 1005a57:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
 1005a5b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1524
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;
 1005a5f:	c7 44 24 0c ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
 1005a66:	ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1527

    // If first call to library, initialise
    CHECK_FL_INIT();
 1005a67:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1005a6e:	75 05                	jne    1005a75 <fl_opendir+0x23>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1527 (discriminator 1)
 1005a70:	e8 38 f0 ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1529

    FL_LOCK(&_fs);
 1005a75:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1005a7a:	85 c0                	test   eax,eax
 1005a7c:	74 02                	je     1005a80 <fl_opendir+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1529 (discriminator 1)
 1005a7e:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1531

    levels = fatfs_total_path_levels((char*)path) + 1;
 1005a80:	83 ec 0c             	sub    esp,0xc
 1005a83:	56                   	push   esi
 1005a84:	e8 04 11 00 00       	call   1006b8d <fatfs_total_path_levels>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1534

    // If path is in the root dir
    if (levels == 0)
 1005a89:	83 c4 10             	add    esp,0x10
 1005a8c:	83 f8 ff             	cmp    eax,0xffffffff
 1005a8f:	75 16                	jne    1005aa7 <fl_opendir+0x55>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1535
        cluster = fatfs_get_root_cluster(&_fs);
 1005a91:	83 ec 0c             	sub    esp,0xc
 1005a94:	68 60 00 12 00       	push   0x120060
 1005a99:	e8 72 e0 ff ff       	call   1003b10 <fatfs_get_root_cluster>
 1005a9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
 1005aa2:	83 c4 10             	add    esp,0x10
 1005aa5:	eb 0f                	jmp    1005ab6 <fl_opendir+0x64>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1538
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
 1005aa7:	8d 54 24 0c          	lea    edx,[esp+0xc]
 1005aab:	89 f0                	mov    eax,esi
 1005aad:	e8 c9 ea ff ff       	call   100457b <_open_directory>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1540

    if (res)
 1005ab2:	85 c0                	test   eax,eax
 1005ab4:	74 15                	je     1005acb <fl_opendir+0x79>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1541
        fatfs_list_directory_start(&_fs, dir, cluster);
 1005ab6:	83 ec 04             	sub    esp,0x4
 1005ab9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1005abd:	53                   	push   ebx
 1005abe:	68 60 00 12 00       	push   0x120060
 1005ac3:	e8 85 e5 ff ff       	call   100404d <fatfs_list_directory_start>
 1005ac8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1543

    FL_UNLOCK(&_fs);
 1005acb:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005ad0:	85 c0                	test   eax,eax
 1005ad2:	74 02                	je     1005ad6 <fl_opendir+0x84>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1543 (discriminator 1)
 1005ad4:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1545

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
 1005ad6:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
 1005adb:	b8 00 00 00 00       	mov    eax,0x0
 1005ae0:	0f 45 c3             	cmovne eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1546
}
 1005ae3:	83 c4 14             	add    esp,0x14
 1005ae6:	5b                   	pop    ebx
 1005ae7:	5e                   	pop    esi
 1005ae8:	c3                   	ret    

01005ae9 <fl_readdir>:
fl_readdir():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1553
//-----------------------------------------------------------------------------
// fl_readdir: Get next item in directory
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
 1005ae9:	53                   	push   ebx
 1005aea:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1557
    int res = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1005aed:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1005af4:	75 05                	jne    1005afb <fl_readdir+0x12>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1557 (discriminator 1)
 1005af6:	e8 b2 ef ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1559

    FL_LOCK(&_fs);
 1005afb:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1005b00:	85 c0                	test   eax,eax
 1005b02:	74 02                	je     1005b06 <fl_readdir+0x1d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1559 (discriminator 1)
 1005b04:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1561

    res = fatfs_list_directory_next(&_fs, dirls, entry);
 1005b06:	83 ec 04             	sub    esp,0x4
 1005b09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005b0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005b11:	68 60 00 12 00       	push   0x120060
 1005b16:	e8 48 e5 ff ff       	call   1004063 <fatfs_list_directory_next>
 1005b1b:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1563

    FL_UNLOCK(&_fs);
 1005b1d:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005b22:	83 c4 10             	add    esp,0x10
 1005b25:	85 c0                	test   eax,eax
 1005b27:	74 02                	je     1005b2b <fl_readdir+0x42>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1563 (discriminator 1)
 1005b29:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1565

    return res ? 0 : -1;
 1005b2b:	85 db                	test   ebx,ebx
 1005b2d:	0f 94 c0             	sete   al
 1005b30:	0f b6 c0             	movzx  eax,al
 1005b33:	f7 d8                	neg    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1566
}
 1005b35:	83 c4 08             	add    esp,0x8
 1005b38:	5b                   	pop    ebx
 1005b39:	c3                   	ret    

01005b3a <fl_listdirectory>:
fl_listdirectory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1477
//-----------------------------------------------------------------------------
// fl_listdirectory: List a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fl_listdirectory(const char *path)
{
 1005b3a:	56                   	push   esi
 1005b3b:	53                   	push   ebx
 1005b3c:	81 ec c4 00 00 00    	sub    esp,0xc4
 1005b42:	8b 9c 24 d0 00 00 00 	mov    ebx,DWORD PTR [esp+0xd0]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1481
    FL_DIR dirstat;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1005b49:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1005b50:	75 05                	jne    1005b57 <fl_listdirectory+0x1d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1481 (discriminator 1)
 1005b52:	e8 56 ef ff ff       	call   1004aad <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1483

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
 1005b57:	83 ec 08             	sub    esp,0x8
 1005b5a:	53                   	push   ebx
 1005b5b:	68 58 74 06 01       	push   0x1067458
 1005b60:	e8 8a 41 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1484
        FL_LOCK(&_fs);
 1005b65:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1005b6a:	83 c4 10             	add    esp,0x10
 1005b6d:	85 c0                	test   eax,eax
 1005b6f:	74 02                	je     1005b73 <fl_listdirectory+0x39>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1484 (discriminator 1)
 1005b71:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1487


        if (fl_opendir(path, &dirstat))
 1005b73:	83 ec 08             	sub    esp,0x8
 1005b76:	8d 84 24 bc 00 00 00 	lea    eax,[esp+0xbc]
 1005b7d:	50                   	push   eax
 1005b7e:	53                   	push   ebx
 1005b7f:	e8 ce fe ff ff       	call   1005a52 <fl_opendir>
 1005b84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1491
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
 1005b87:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
 1005b8b:	8d b4 24 b4 00 00 00 	lea    esi,[esp+0xb4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1487

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
        FL_LOCK(&_fs);


        if (fl_opendir(path, &dirstat))
 1005b92:	85 c0                	test   eax,eax
 1005b94:	0f 85 98 00 00 00    	jne    1005c32 <fl_listdirectory+0xf8>
 1005b9a:	e9 a8 00 00 00       	jmp    1005c47 <fl_listdirectory+0x10d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1495

        while (fl_readdir(&dirstat, &dirent) == 0)
        {
#if FATFS_INC_TIME_DATE_SUPPORT
            int d,m,y,h,mn,s;
            fatfs_convert_from_fat_time(dirent.write_time, &h,&m,&s);
 1005b9f:	8d 44 24 18          	lea    eax,[esp+0x18]
 1005ba3:	50                   	push   eax
 1005ba4:	8d 44 24 0c          	lea    eax,[esp+0xc]
 1005ba8:	50                   	push   eax
 1005ba9:	8d 44 24 18          	lea    eax,[esp+0x18]
 1005bad:	50                   	push   eax
 1005bae:	0f b7 84 24 b6 00 00 	movzx  eax,WORD PTR [esp+0xb6]
 1005bb5:	00 
 1005bb6:	50                   	push   eax
 1005bb7:	e8 75 0e 00 00       	call   1006a31 <fatfs_convert_from_fat_time>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1496
            fatfs_convert_from_fat_date(dirent.write_date, &d,&mn,&y);
 1005bbc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
 1005bc0:	50                   	push   eax
 1005bc1:	8d 44 24 28          	lea    eax,[esp+0x28]
 1005bc5:	50                   	push   eax
 1005bc6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
 1005bca:	50                   	push   eax
 1005bcb:	0f b7 84 24 c8 00 00 	movzx  eax,WORD PTR [esp+0xc8]
 1005bd2:	00 
 1005bd3:	50                   	push   eax
 1005bd4:	e8 86 0e 00 00       	call   1006a5f <fatfs_convert_from_fat_date>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1497
            FAT_PRINTF(("%02d/%02d/%04d  %02d:%02d      ", mn,d,y,h,m));
 1005bd9:	83 c4 18             	add    esp,0x18
 1005bdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1005be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1005be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1005be8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005bec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1005bf0:	68 70 1c 04 01       	push   0x1041c70
 1005bf5:	e8 f5 40 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1500
#endif

            if (dirent.is_dir)
 1005bfa:	83 c4 20             	add    esp,0x20
 1005bfd:	80 bc 24 9c 00 00 00 	cmp    BYTE PTR [esp+0x9c],0x0
 1005c04:	00 
 1005c05:	74 13                	je     1005c1a <fl_listdirectory+0xe0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1502
            {
                FAT_PRINTF(("%s <DIR>\r\n", dirent.filename));
 1005c07:	83 ec 08             	sub    esp,0x8
 1005c0a:	53                   	push   ebx
 1005c0b:	68 69 74 06 01       	push   0x1067469
 1005c10:	e8 da 40 00 00       	call   1009cef <printk>
 1005c15:	83 c4 10             	add    esp,0x10
 1005c18:	eb 18                	jmp    1005c32 <fl_listdirectory+0xf8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1506
            }
            else
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
 1005c1a:	83 ec 04             	sub    esp,0x4
 1005c1d:	ff b4 24 a8 00 00 00 	push   DWORD PTR [esp+0xa8]
 1005c24:	53                   	push   ebx
 1005c25:	68 74 74 06 01       	push   0x1067474
 1005c2a:	e8 c0 40 00 00       	call   1009cef <printk>
 1005c2f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1491

        if (fl_opendir(path, &dirstat))
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
 1005c32:	83 ec 08             	sub    esp,0x8
 1005c35:	53                   	push   ebx
 1005c36:	56                   	push   esi
 1005c37:	e8 ad fe ff ff       	call   1005ae9 <fl_readdir>
 1005c3c:	83 c4 10             	add    esp,0x10
 1005c3f:	85 c0                	test   eax,eax
 1005c41:	0f 84 58 ff ff ff    	je     1005b9f <fl_listdirectory+0x65>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1513
        }

        fl_closedir(&dirstat);
    }

    FL_UNLOCK(&_fs);
 1005c47:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005c4c:	85 c0                	test   eax,eax
 1005c4e:	74 02                	je     1005c52 <fl_listdirectory+0x118>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1513 (discriminator 1)
 1005c50:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1514
}
 1005c52:	81 c4 c4 00 00 00    	add    esp,0xc4
 1005c58:	5b                   	pop    ebx
 1005c59:	5e                   	pop    esi
 1005c5a:	c3                   	ret    

01005c5b <fl_closedir>:
fl_closedir():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1576
#if FATFS_DIR_LIST_SUPPORT
int fl_closedir(FL_DIR* dir)
{
    // Not used
    return 0;
}
 1005c5b:	b8 00 00 00 00       	mov    eax,0x0
 1005c60:	c3                   	ret    

01005c61 <fl_is_dir>:
fl_is_dir():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1583
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
 1005c61:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1587
    int res = 0;
    FL_DIR dir;

    if (fl_opendir(path, &dir))
 1005c64:	8d 44 24 0c          	lea    eax,[esp+0xc]
 1005c68:	50                   	push   eax
 1005c69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1005c6d:	e8 e0 fd ff ff       	call   1005a52 <fl_opendir>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1593
    {
        res = 1;
        fl_closedir(&dir);
    }

    return res;
 1005c72:	85 c0                	test   eax,eax
 1005c74:	0f 95 c0             	setne  al
 1005c77:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1594
}
 1005c7a:	83 c4 2c             	add    esp,0x2c
 1005c7d:	c3                   	ret    

01005c7e <fl_format>:
fl_format():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1601
//-----------------------------------------------------------------------------
// fl_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
#if FATFS_INC_FORMAT_SUPPORT
int fl_format(uint32 volume_sectors, const char *name)
{
 1005c7e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1602
    return fatfs_format(&_fs, volume_sectors, name);
 1005c81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005c85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005c89:	68 60 00 12 00       	push   0x120060
 1005c8e:	e8 72 07 00 00       	call   1006405 <fatfs_format>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1603
}
 1005c93:	83 c4 1c             	add    esp,0x1c
 1005c96:	c3                   	ret    
 1005c97:	90                   	nop

01005c98 <fatfs_erase_fat>:
fatfs_erase_fat():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:393
}
//-----------------------------------------------------------------------------
// fatfs_erase_fat: Erase FAT table using fs details in fs struct
//-----------------------------------------------------------------------------
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
 1005c98:	57                   	push   edi
 1005c99:	56                   	push   esi
 1005c9a:	53                   	push   ebx
 1005c9b:	89 c3                	mov    ebx,eax
 1005c9d:	89 d6                	mov    esi,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:397
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 1005c9f:	8d 78 44             	lea    edi,[eax+0x44]
 1005ca2:	83 ec 04             	sub    esp,0x4
 1005ca5:	68 00 02 00 00       	push   0x200
 1005caa:	6a 00                	push   0x0
 1005cac:	57                   	push   edi
 1005cad:	e8 81 32 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:400

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
 1005cb2:	83 c4 10             	add    esp,0x10
 1005cb5:	85 f6                	test   esi,esi
 1005cb7:	75 12                	jne    1005ccb <fatfs_erase_fat+0x33>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:402
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
 1005cb9:	c6 43 44 f8          	mov    BYTE PTR [ebx+0x44],0xf8
 1005cbd:	c6 43 45 ff          	mov    BYTE PTR [ebx+0x45],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:403
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
 1005cc1:	c6 43 46 ff          	mov    BYTE PTR [ebx+0x46],0xff
 1005cc5:	c6 43 47 ff          	mov    BYTE PTR [ebx+0x47],0xff
 1005cc9:	eb 30                	jmp    1005cfb <fatfs_erase_fat+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:407
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
 1005ccb:	c6 43 44 f8          	mov    BYTE PTR [ebx+0x44],0xf8
 1005ccf:	c6 43 45 ff          	mov    BYTE PTR [ebx+0x45],0xff
 1005cd3:	c6 43 46 ff          	mov    BYTE PTR [ebx+0x46],0xff
 1005cd7:	c6 43 47 0f          	mov    BYTE PTR [ebx+0x47],0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:408
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
 1005cdb:	c6 43 48 ff          	mov    BYTE PTR [ebx+0x48],0xff
 1005cdf:	c6 43 49 ff          	mov    BYTE PTR [ebx+0x49],0xff
 1005ce3:	c6 43 4a ff          	mov    BYTE PTR [ebx+0x4a],0xff
 1005ce7:	c6 43 4b ff          	mov    BYTE PTR [ebx+0x4b],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:409
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
 1005ceb:	c6 43 4c ff          	mov    BYTE PTR [ebx+0x4c],0xff
 1005cef:	c6 43 4d ff          	mov    BYTE PTR [ebx+0x4d],0xff
 1005cf3:	c6 43 4e ff          	mov    BYTE PTR [ebx+0x4e],0xff
 1005cf7:	c6 43 4f 0f          	mov    BYTE PTR [ebx+0x4f],0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:412
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
 1005cfb:	83 ec 04             	sub    esp,0x4
 1005cfe:	6a 01                	push   0x1
 1005d00:	57                   	push   edi
 1005d01:	ff 73 14             	push   DWORD PTR [ebx+0x14]
 1005d04:	ff 53 38             	call   DWORD PTR [ebx+0x38]
 1005d07:	83 c4 10             	add    esp,0x10
 1005d0a:	85 c0                	test   eax,eax
 1005d0c:	74 56                	je     1005d64 <fatfs_erase_fat+0xcc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:416
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 1005d0e:	83 ec 04             	sub    esp,0x4
 1005d11:	68 00 02 00 00       	push   0x200
 1005d16:	6a 00                	push   0x0
 1005d18:	57                   	push   edi
 1005d19:	e8 15 32 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:417
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
 1005d1e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
 1005d22:	0f af 43 20          	imul   eax,DWORD PTR [ebx+0x20]
 1005d26:	83 c4 10             	add    esp,0x10
 1005d29:	83 f8 01             	cmp    eax,0x1
 1005d2c:	76 31                	jbe    1005d5f <fatfs_erase_fat+0xc7>
 1005d2e:	be 01 00 00 00       	mov    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:418
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
 1005d33:	83 ec 04             	sub    esp,0x4
 1005d36:	6a 01                	push   0x1
 1005d38:	57                   	push   edi
 1005d39:	89 f0                	mov    eax,esi
 1005d3b:	03 43 14             	add    eax,DWORD PTR [ebx+0x14]
 1005d3e:	50                   	push   eax
 1005d3f:	ff 53 38             	call   DWORD PTR [ebx+0x38]
 1005d42:	83 c4 10             	add    esp,0x10
 1005d45:	85 c0                	test   eax,eax
 1005d47:	74 1b                	je     1005d64 <fatfs_erase_fat+0xcc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:417 (discriminator 2)
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
 1005d49:	83 c6 01             	add    esi,0x1
 1005d4c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
 1005d50:	0f af 43 20          	imul   eax,DWORD PTR [ebx+0x20]
 1005d54:	39 f0                	cmp    eax,esi
 1005d56:	77 db                	ja     1005d33 <fatfs_erase_fat+0x9b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:421
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
 1005d58:	b8 01 00 00 00       	mov    eax,0x1
 1005d5d:	eb 05                	jmp    1005d64 <fatfs_erase_fat+0xcc>
 1005d5f:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:422
}
 1005d64:	5b                   	pop    ebx
 1005d65:	5e                   	pop    esi
 1005d66:	5f                   	pop    edi
 1005d67:	c3                   	ret    

01005d68 <fatfs_erase_sectors>:
fatfs_erase_sectors():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:100
}
//-----------------------------------------------------------------------------
// fatfs_erase_sectors: Erase a number of sectors
//-----------------------------------------------------------------------------
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
 1005d68:	55                   	push   ebp
 1005d69:	57                   	push   edi
 1005d6a:	56                   	push   esi
 1005d6b:	53                   	push   ebx
 1005d6c:	83 ec 10             	sub    esp,0x10
 1005d6f:	89 c5                	mov    ebp,eax
 1005d71:	89 d3                	mov    ebx,edx
 1005d73:	89 ce                	mov    esi,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:104
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 1005d75:	8d 78 44             	lea    edi,[eax+0x44]
 1005d78:	68 00 02 00 00       	push   0x200
 1005d7d:	6a 00                	push   0x0
 1005d7f:	57                   	push   edi
 1005d80:	e8 ae 31 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:106

    for (i=0;i<count;i++)
 1005d85:	83 c4 10             	add    esp,0x10
 1005d88:	85 f6                	test   esi,esi
 1005d8a:	7e 21                	jle    1005dad <fatfs_erase_sectors+0x45>
 1005d8c:	01 de                	add    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:107
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
 1005d8e:	83 ec 04             	sub    esp,0x4
 1005d91:	6a 01                	push   0x1
 1005d93:	57                   	push   edi
 1005d94:	53                   	push   ebx
 1005d95:	ff 55 38             	call   DWORD PTR [ebp+0x38]
 1005d98:	83 c4 10             	add    esp,0x10
 1005d9b:	85 c0                	test   eax,eax
 1005d9d:	74 13                	je     1005db2 <fatfs_erase_sectors+0x4a>
 1005d9f:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:106 (discriminator 2)
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
 1005da2:	39 f3                	cmp    ebx,esi
 1005da4:	75 e8                	jne    1005d8e <fatfs_erase_sectors+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:110
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
 1005da6:	b8 01 00 00 00       	mov    eax,0x1
 1005dab:	eb 05                	jmp    1005db2 <fatfs_erase_sectors+0x4a>
 1005dad:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:111
}
 1005db2:	83 c4 0c             	add    esp,0xc
 1005db5:	5b                   	pop    ebx
 1005db6:	5e                   	pop    esi
 1005db7:	5f                   	pop    edi
 1005db8:	5d                   	pop    ebp
 1005db9:	c3                   	ret    

01005dba <fatfs_format_fat16>:
fatfs_format_fat16():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:427
}
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
 1005dba:	55                   	push   ebp
 1005dbb:	57                   	push   edi
 1005dbc:	56                   	push   esi
 1005dbd:	53                   	push   ebx
 1005dbe:	83 ec 18             	sub    esp,0x18
 1005dc1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
 1005dc5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
 1005dc9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:428
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
 1005dcd:	c7 83 44 02 00 00 ff 	mov    DWORD PTR [ebx+0x244],0xffffffff
 1005dd4:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:429
    fs->currentsector.dirty = 0;
 1005dd7:	c7 83 48 02 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
 1005dde:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:431

    fs->next_free_cluster = 0; // Invalid
 1005de1:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:433

    fatfs_fat_init(fs);
 1005de8:	53                   	push   ebx
 1005de9:	e8 41 14 00 00       	call   100722f <fatfs_fat_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:436

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
 1005dee:	83 c4 10             	add    esp,0x10
 1005df1:	83 7b 34 00          	cmp    DWORD PTR [ebx+0x34],0x0
 1005df5:	0f 84 7b 01 00 00    	je     1005f76 <fatfs_format_fat16+0x1bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:436 (discriminator 1)
 1005dfb:	83 7b 38 00          	cmp    DWORD PTR [ebx+0x38],0x0
 1005dff:	0f 84 7b 01 00 00    	je     1005f80 <fatfs_format_fat16+0x1c6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:440
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Volume is FAT16
    fs->fat_type = FAT_TYPE_16;
 1005e05:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:443

    // Not valid for FAT16
    fs->fs_info_sector = 0;
 1005e0c:	66 c7 43 18 00 00    	mov    WORD PTR [ebx+0x18],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:444
    fs->rootdir_first_cluster = 0;
 1005e12:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:448

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
 1005e19:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:121
{
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 1005e20:	8d 6b 44             	lea    ebp,[ebx+0x44]
 1005e23:	83 ec 04             	sub    esp,0x4
 1005e26:	68 00 02 00 00       	push   0x200
 1005e2b:	6a 00                	push   0x0
 1005e2d:	55                   	push   ebp
 1005e2e:	e8 00 31 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:124

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
 1005e33:	c6 43 44 eb          	mov    BYTE PTR [ebx+0x44],0xeb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:125
    fs->currentsector.sector[1] = 0x3C;
 1005e37:	c6 43 45 3c          	mov    BYTE PTR [ebx+0x45],0x3c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:126
    fs->currentsector.sector[2] = 0x90;
 1005e3b:	c6 43 46 90          	mov    BYTE PTR [ebx+0x46],0x90
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:127
    fs->currentsector.sector[3] = 0x4D;
 1005e3f:	c6 43 47 4d          	mov    BYTE PTR [ebx+0x47],0x4d
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:128
    fs->currentsector.sector[4] = 0x53;
 1005e43:	c6 43 48 53          	mov    BYTE PTR [ebx+0x48],0x53
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:129
    fs->currentsector.sector[5] = 0x44;
 1005e47:	c6 43 49 44          	mov    BYTE PTR [ebx+0x49],0x44
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:130
    fs->currentsector.sector[6] = 0x4F;
 1005e4b:	c6 43 4a 4f          	mov    BYTE PTR [ebx+0x4a],0x4f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:131
    fs->currentsector.sector[7] = 0x53;
 1005e4f:	c6 43 4b 53          	mov    BYTE PTR [ebx+0x4b],0x53
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:132
    fs->currentsector.sector[8] = 0x35;
 1005e53:	c6 43 4c 35          	mov    BYTE PTR [ebx+0x4c],0x35
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:133
    fs->currentsector.sector[9] = 0x2E;
 1005e57:	c6 43 4d 2e          	mov    BYTE PTR [ebx+0x4d],0x2e
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:134
    fs->currentsector.sector[10] = 0x30;
 1005e5b:	c6 43 4e 30          	mov    BYTE PTR [ebx+0x4e],0x30
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:137

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
 1005e5f:	c6 43 4f 00          	mov    BYTE PTR [ebx+0x4f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:138
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
 1005e63:	c6 43 50 02          	mov    BYTE PTR [ebx+0x50],0x2
fatfs_calc_cluster_size():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:83
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
 1005e67:	0f b6 15 a4 d9 00 01 	movzx  edx,BYTE PTR ds:0x100d9a4
 1005e6e:	83 c4 10             	add    esp,0x10
 1005e71:	84 d2                	test   dl,dl
 1005e73:	0f 84 11 01 00 00    	je     1005f8a <fatfs_format_fat16+0x1d0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:84
            if (sectors <= _cluster_size_table16[i].sectors)
 1005e79:	3b 35 a0 d9 00 01    	cmp    esi,DWORD PTR ds:0x100d9a0
 1005e7f:	0f 86 12 01 00 00    	jbe    1005f97 <fatfs_format_fat16+0x1dd>
 1005e85:	b8 ac d9 00 01       	mov    eax,0x100d9ac
 1005e8a:	eb 0c                	jmp    1005e98 <fatfs_format_fat16+0xde>
 1005e8c:	83 c0 08             	add    eax,0x8
 1005e8f:	3b 70 f4             	cmp    esi,DWORD PTR [eax-0xc]
 1005e92:	0f 86 ff 00 00 00    	jbe    1005f97 <fatfs_format_fat16+0x1dd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:83
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
 1005e98:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1005e9b:	84 d2                	test   dl,dl
 1005e9d:	75 ed                	jne    1005e8c <fatfs_format_fat16+0xd2>
 1005e9f:	e9 e6 00 00 00       	jmp    1005f8a <fatfs_format_fat16+0x1d0>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:229
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
 1005ea4:	83 ec 0c             	sub    esp,0xc
 1005ea7:	57                   	push   edi
 1005ea8:	e8 5f 3f 00 00       	call   1009e0c <strlen>
 1005ead:	83 c4 10             	add    esp,0x10
 1005eb0:	39 f0                	cmp    eax,esi
 1005eb2:	7e 0a                	jle    1005ebe <fatfs_format_fat16+0x104>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:230
                fs->currentsector.sector[i+43] = name[i];
 1005eb4:	0f b6 04 37          	movzx  eax,BYTE PTR [edi+esi*1]
 1005eb8:	88 44 33 6f          	mov    BYTE PTR [ebx+esi*1+0x6f],al
 1005ebc:	eb 05                	jmp    1005ec3 <fatfs_format_fat16+0x109>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:232
            else
                fs->currentsector.sector[i+43] = ' ';
 1005ebe:	c6 44 33 6f 20       	mov    BYTE PTR [ebx+esi*1+0x6f],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:227
        fs->currentsector.sector[40] = 0x34;
        fs->currentsector.sector[41] = 0x56;
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
 1005ec3:	83 c6 01             	add    esi,0x1
 1005ec6:	83 fe 0b             	cmp    esi,0xb
 1005ec9:	75 d9                	jne    1005ea4 <fatfs_format_fat16+0xea>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:236
            else
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
 1005ecb:	c6 43 7a 46          	mov    BYTE PTR [ebx+0x7a],0x46
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:237
        fs->currentsector.sector[55] = 'A';
 1005ecf:	c6 43 7b 41          	mov    BYTE PTR [ebx+0x7b],0x41
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:238
        fs->currentsector.sector[56] = 'T';
 1005ed3:	c6 43 7c 54          	mov    BYTE PTR [ebx+0x7c],0x54
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:239
        fs->currentsector.sector[57] = '1';
 1005ed7:	c6 43 7d 31          	mov    BYTE PTR [ebx+0x7d],0x31
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:240
        fs->currentsector.sector[58] = '6';
 1005edb:	c6 43 7e 36          	mov    BYTE PTR [ebx+0x7e],0x36
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:241
        fs->currentsector.sector[59] = ' ';
 1005edf:	c6 43 7f 20          	mov    BYTE PTR [ebx+0x7f],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:242
        fs->currentsector.sector[60] = ' ';
 1005ee3:	c6 83 80 00 00 00 20 	mov    BYTE PTR [ebx+0x80],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:243
        fs->currentsector.sector[61] = ' ';
 1005eea:	c6 83 81 00 00 00 20 	mov    BYTE PTR [ebx+0x81],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:246

        // Signature
        fs->currentsector.sector[510] = 0x55;
 1005ef1:	c6 83 42 02 00 00 55 	mov    BYTE PTR [ebx+0x242],0x55
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:247
        fs->currentsector.sector[511] = 0xAA;
 1005ef8:	c6 83 43 02 00 00 aa 	mov    BYTE PTR [ebx+0x243],0xaa
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:343
        // Signature
        fs->currentsector.sector[510] = 0x55;
        fs->currentsector.sector[511] = 0xAA;
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
 1005eff:	83 ec 04             	sub    esp,0x4
 1005f02:	6a 01                	push   0x1
 1005f04:	55                   	push   ebp
 1005f05:	6a 00                	push   0x0
 1005f07:	ff 53 38             	call   DWORD PTR [ebx+0x38]
fatfs_format_fat16():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:449
    fs->rootdir_first_cluster = 0;

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
 1005f0a:	83 c4 10             	add    esp,0x10
 1005f0d:	85 c0                	test   eax,eax
 1005f0f:	0f 84 3b 01 00 00    	je     1006050 <fatfs_format_fat16+0x296>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:453
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
 1005f15:	0f b7 43 2a          	movzx  eax,WORD PTR [ebx+0x2a]
 1005f19:	0f b6 53 2c          	movzx  edx,BYTE PTR [ebx+0x2c]
 1005f1d:	0f af 53 20          	imul   edx,DWORD PTR [ebx+0x20]
 1005f21:	8d 0c 10             	lea    ecx,[eax+edx*1]
 1005f24:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:454
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
 1005f27:	0f b7 4b 28          	movzx  ecx,WORD PTR [ebx+0x28]
 1005f2b:	c1 e1 05             	shl    ecx,0x5
 1005f2e:	8d 89 ff 01 00 00    	lea    ecx,[ecx+0x1ff]
 1005f34:	c1 f9 09             	sar    ecx,0x9
 1005f37:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:457

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
 1005f3a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
 1005f3d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:460

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
 1005f40:	01 d0                	add    eax,edx
 1005f42:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:463

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
 1005f45:	ba 00 00 00 00       	mov    edx,0x0
 1005f4a:	89 d8                	mov    eax,ebx
 1005f4c:	e8 47 fd ff ff       	call   1005c98 <fatfs_erase_fat>
 1005f51:	85 c0                	test   eax,eax
 1005f53:	0f 84 f7 00 00 00    	je     1006050 <fatfs_format_fat16+0x296>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:467
        return 0;

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
 1005f59:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
 1005f5c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
 1005f5f:	03 53 1c             	add    edx,DWORD PTR [ebx+0x1c]
 1005f62:	89 d8                	mov    eax,ebx
 1005f64:	e8 ff fd ff ff       	call   1005d68 <fatfs_erase_sectors>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:437

    fatfs_fat_init(fs);

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;
 1005f69:	85 c0                	test   eax,eax
 1005f6b:	0f 95 c0             	setne  al
 1005f6e:	0f b6 c0             	movzx  eax,al
 1005f71:	e9 da 00 00 00       	jmp    1006050 <fatfs_format_fat16+0x296>
 1005f76:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1005f7b:	e9 d0 00 00 00       	jmp    1006050 <fatfs_format_fat16+0x296>
 1005f80:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1005f85:	e9 c6 00 00 00       	jmp    1006050 <fatfs_format_fat16+0x296>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:141
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
 1005f8a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
fatfs_format_fat16():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:450

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;
 1005f8d:	b8 00 00 00 00       	mov    eax,0x0
 1005f92:	e9 b9 00 00 00       	jmp    1006050 <fatfs_format_fat16+0x296>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:141
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
 1005f97:	88 13                	mov    BYTE PTR [ebx],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:146
    if (!fs->sectors_per_cluster)
        return 0; // Invalid disk size

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
 1005f99:	88 53 51             	mov    BYTE PTR [ebx+0x51],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:150

    // Reserved Sectors
    if (!is_fat32)
        fs->reserved_sectors = 8;
 1005f9c:	66 c7 43 2a 08 00    	mov    WORD PTR [ebx+0x2a],0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:153
    else
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
 1005fa2:	c6 43 52 08          	mov    BYTE PTR [ebx+0x52],0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:154
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
 1005fa6:	c6 43 53 00          	mov    BYTE PTR [ebx+0x53],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:157

    // Number of FATS
    fs->num_of_fats = 2;
 1005faa:	c6 43 2c 02          	mov    BYTE PTR [ebx+0x2c],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:158
    fs->currentsector.sector[16] = fs->num_of_fats;
 1005fae:	c6 43 54 02          	mov    BYTE PTR [ebx+0x54],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:163

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
    {
        fs->root_entry_count = 512;
 1005fb2:	66 c7 43 28 00 02    	mov    WORD PTR [ebx+0x28],0x200
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:164
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
 1005fb8:	c6 43 55 00          	mov    BYTE PTR [ebx+0x55],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:165
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
 1005fbc:	c6 43 56 02          	mov    BYTE PTR [ebx+0x56],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:175
        fs->currentsector.sector[17] = 0;
        fs->currentsector.sector[18] = 0;
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
 1005fc0:	c6 43 57 00          	mov    BYTE PTR [ebx+0x57],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:176
    fs->currentsector.sector[20] = 0x00;
 1005fc4:	c6 43 58 00          	mov    BYTE PTR [ebx+0x58],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:179

    // Media type
    fs->currentsector.sector[21] = 0xF8;
 1005fc8:	c6 43 59 f8          	mov    BYTE PTR [ebx+0x59],0xf8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:187
    // FAT16 BS Details
    if (!is_fat32)
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
 1005fcc:	0f b6 ca             	movzx  ecx,dl
 1005fcf:	89 f0                	mov    eax,esi
 1005fd1:	ba 00 00 00 00       	mov    edx,0x0
 1005fd6:	f7 f1                	div    ecx
 1005fd8:	83 c0 01             	add    eax,0x1
 1005fdb:	c1 e8 08             	shr    eax,0x8
 1005fde:	83 c0 01             	add    eax,0x1
 1005fe1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:188
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
 1005fe4:	88 43 5a             	mov    BYTE PTR [ebx+0x5a],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:189
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);
 1005fe7:	c1 e8 08             	shr    eax,0x8
 1005fea:	88 43 5b             	mov    BYTE PTR [ebx+0x5b],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:192

        // Sectors per track
        fs->currentsector.sector[24] = 0x00;
 1005fed:	c6 43 5c 00          	mov    BYTE PTR [ebx+0x5c],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:193
        fs->currentsector.sector[25] = 0x00;
 1005ff1:	c6 43 5d 00          	mov    BYTE PTR [ebx+0x5d],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:196

        // Heads
        fs->currentsector.sector[26] = 0x00;
 1005ff5:	c6 43 5e 00          	mov    BYTE PTR [ebx+0x5e],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:197
        fs->currentsector.sector[27] = 0x00;
 1005ff9:	c6 43 5f 00          	mov    BYTE PTR [ebx+0x5f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:200

        // Hidden sectors
        fs->currentsector.sector[28] = 0x20;
 1005ffd:	c6 43 60 20          	mov    BYTE PTR [ebx+0x60],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:201
        fs->currentsector.sector[29] = 0x00;
 1006001:	c6 43 61 00          	mov    BYTE PTR [ebx+0x61],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:202
        fs->currentsector.sector[30] = 0x00;
 1006005:	c6 43 62 00          	mov    BYTE PTR [ebx+0x62],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:203
        fs->currentsector.sector[31] = 0x00;
 1006009:	c6 43 63 00          	mov    BYTE PTR [ebx+0x63],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:206

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
 100600d:	89 f0                	mov    eax,esi
 100600f:	88 43 64             	mov    BYTE PTR [ebx+0x64],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:207
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
 1006012:	89 f0                	mov    eax,esi
 1006014:	c1 e8 08             	shr    eax,0x8
 1006017:	88 43 65             	mov    BYTE PTR [ebx+0x65],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:208
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
 100601a:	89 f0                	mov    eax,esi
 100601c:	c1 e8 10             	shr    eax,0x10
 100601f:	88 43 66             	mov    BYTE PTR [ebx+0x66],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:209
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
 1006022:	89 f0                	mov    eax,esi
 1006024:	c1 e8 18             	shr    eax,0x18
 1006027:	88 43 67             	mov    BYTE PTR [ebx+0x67],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:212

        // Drive number
        fs->currentsector.sector[36] = 0x00;
 100602a:	c6 43 68 00          	mov    BYTE PTR [ebx+0x68],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:215

        // Reserved
        fs->currentsector.sector[37] = 0x00;
 100602e:	c6 43 69 00          	mov    BYTE PTR [ebx+0x69],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:218

        // Boot signature
        fs->currentsector.sector[38] = 0x29;
 1006032:	c6 43 6a 29          	mov    BYTE PTR [ebx+0x6a],0x29
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:221

        // Volume ID
        fs->currentsector.sector[39] = 0x12;
 1006036:	c6 43 6b 12          	mov    BYTE PTR [ebx+0x6b],0x12
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:222
        fs->currentsector.sector[40] = 0x34;
 100603a:	c6 43 6c 34          	mov    BYTE PTR [ebx+0x6c],0x34
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:223
        fs->currentsector.sector[41] = 0x56;
 100603e:	c6 43 6d 56          	mov    BYTE PTR [ebx+0x6d],0x56
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:224
        fs->currentsector.sector[42] = 0x78;
 1006042:	c6 43 6e 78          	mov    BYTE PTR [ebx+0x6e],0x78
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:227

        // Volume name
        for (i=0;i<11;i++)
 1006046:	be 00 00 00 00       	mov    esi,0x0
 100604b:	e9 54 fe ff ff       	jmp    1005ea4 <fatfs_format_fat16+0xea>
fatfs_format_fat16():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:471
    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
        return 0;

    return 1;
}
 1006050:	83 c4 0c             	add    esp,0xc
 1006053:	5b                   	pop    ebx
 1006054:	5e                   	pop    esi
 1006055:	5f                   	pop    edi
 1006056:	5d                   	pop    ebp
 1006057:	c3                   	ret    

01006058 <fatfs_format_fat32>:
fatfs_format_fat32():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:476
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
 1006058:	55                   	push   ebp
 1006059:	57                   	push   edi
 100605a:	56                   	push   esi
 100605b:	53                   	push   ebx
 100605c:	83 ec 18             	sub    esp,0x18
 100605f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
 1006063:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
 1006067:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:477
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
 100606b:	c7 83 44 02 00 00 ff 	mov    DWORD PTR [ebx+0x244],0xffffffff
 1006072:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:478
    fs->currentsector.dirty = 0;
 1006075:	c7 83 48 02 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
 100607c:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:480

    fs->next_free_cluster = 0; // Invalid
 100607f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:482

    fatfs_fat_init(fs);
 1006086:	53                   	push   ebx
 1006087:	e8 a3 11 00 00       	call   100722f <fatfs_fat_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:485

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
 100608c:	83 c4 10             	add    esp,0x10
 100608f:	83 7b 34 00          	cmp    DWORD PTR [ebx+0x34],0x0
 1006093:	0f 84 22 02 00 00    	je     10062bb <fatfs_format_fat32+0x263>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:485 (discriminator 1)
 1006099:	83 7b 38 00          	cmp    DWORD PTR [ebx+0x38],0x0
 100609d:	0f 84 22 02 00 00    	je     10062c5 <fatfs_format_fat32+0x26d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:489
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;
 10060a3:	c7 43 30 01 00 00 00 	mov    DWORD PTR [ebx+0x30],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:492

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
 10060aa:	66 c7 43 18 01 00    	mov    WORD PTR [ebx+0x18],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:493
    fs->rootdir_first_cluster = 2;
 10060b0:	c7 43 08 02 00 00 00 	mov    DWORD PTR [ebx+0x8],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:497

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
 10060b7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:121
{
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 10060be:	8d 6b 44             	lea    ebp,[ebx+0x44]
 10060c1:	83 ec 04             	sub    esp,0x4
 10060c4:	68 00 02 00 00       	push   0x200
 10060c9:	6a 00                	push   0x0
 10060cb:	55                   	push   ebp
 10060cc:	e8 62 2e 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:124

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
 10060d1:	c6 43 44 eb          	mov    BYTE PTR [ebx+0x44],0xeb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:125
    fs->currentsector.sector[1] = 0x3C;
 10060d5:	c6 43 45 3c          	mov    BYTE PTR [ebx+0x45],0x3c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:126
    fs->currentsector.sector[2] = 0x90;
 10060d9:	c6 43 46 90          	mov    BYTE PTR [ebx+0x46],0x90
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:127
    fs->currentsector.sector[3] = 0x4D;
 10060dd:	c6 43 47 4d          	mov    BYTE PTR [ebx+0x47],0x4d
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:128
    fs->currentsector.sector[4] = 0x53;
 10060e1:	c6 43 48 53          	mov    BYTE PTR [ebx+0x48],0x53
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:129
    fs->currentsector.sector[5] = 0x44;
 10060e5:	c6 43 49 44          	mov    BYTE PTR [ebx+0x49],0x44
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:130
    fs->currentsector.sector[6] = 0x4F;
 10060e9:	c6 43 4a 4f          	mov    BYTE PTR [ebx+0x4a],0x4f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:131
    fs->currentsector.sector[7] = 0x53;
 10060ed:	c6 43 4b 53          	mov    BYTE PTR [ebx+0x4b],0x53
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:132
    fs->currentsector.sector[8] = 0x35;
 10060f1:	c6 43 4c 35          	mov    BYTE PTR [ebx+0x4c],0x35
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:133
    fs->currentsector.sector[9] = 0x2E;
 10060f5:	c6 43 4d 2e          	mov    BYTE PTR [ebx+0x4d],0x2e
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:134
    fs->currentsector.sector[10] = 0x30;
 10060f9:	c6 43 4e 30          	mov    BYTE PTR [ebx+0x4e],0x30
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:137

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
 10060fd:	c6 43 4f 00          	mov    BYTE PTR [ebx+0x4f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:138
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
 1006101:	c6 43 50 02          	mov    BYTE PTR [ebx+0x50],0x2
fatfs_calc_cluster_size():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:89
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
 1006105:	0f b6 15 64 d9 00 01 	movzx  edx,BYTE PTR ds:0x100d964
 100610c:	83 c4 10             	add    esp,0x10
 100610f:	84 d2                	test   dl,dl
 1006111:	0f 84 b8 01 00 00    	je     10062cf <fatfs_format_fat32+0x277>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:90
            if (sectors <= _cluster_size_table32[i].sectors)
 1006117:	3b 35 60 d9 00 01    	cmp    esi,DWORD PTR ds:0x100d960
 100611d:	0f 86 b9 01 00 00    	jbe    10062dc <fatfs_format_fat32+0x284>
 1006123:	b8 60 d9 00 01       	mov    eax,0x100d960
 1006128:	eb 0b                	jmp    1006135 <fatfs_format_fat32+0xdd>
 100612a:	83 c0 08             	add    eax,0x8
 100612d:	3b 30                	cmp    esi,DWORD PTR [eax]
 100612f:	0f 86 a7 01 00 00    	jbe    10062dc <fatfs_format_fat32+0x284>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:89
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
 1006135:	0f b6 50 0c          	movzx  edx,BYTE PTR [eax+0xc]
 1006139:	84 d2                	test   dl,dl
 100613b:	75 ed                	jne    100612a <fatfs_format_fat32+0xd2>
 100613d:	e9 8d 01 00 00       	jmp    10062cf <fatfs_format_fat32+0x277>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:322
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
 1006142:	83 ec 0c             	sub    esp,0xc
 1006145:	57                   	push   edi
 1006146:	e8 c1 3c 00 00       	call   1009e0c <strlen>
 100614b:	83 c4 10             	add    esp,0x10
 100614e:	39 f0                	cmp    eax,esi
 1006150:	7e 0d                	jle    100615f <fatfs_format_fat32+0x107>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:323
                fs->currentsector.sector[i+71] = name[i];
 1006152:	0f b6 04 37          	movzx  eax,BYTE PTR [edi+esi*1]
 1006156:	88 84 33 8b 00 00 00 	mov    BYTE PTR [ebx+esi*1+0x8b],al
 100615d:	eb 08                	jmp    1006167 <fatfs_format_fat32+0x10f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:325
            else
                fs->currentsector.sector[i+71] = ' ';
 100615f:	c6 84 33 8b 00 00 00 	mov    BYTE PTR [ebx+esi*1+0x8b],0x20
 1006166:	20 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:320
        fs->currentsector.sector[68] = 0x34;
        fs->currentsector.sector[69] = 0x56;
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
 1006167:	83 c6 01             	add    esi,0x1
 100616a:	83 fe 0b             	cmp    esi,0xb
 100616d:	75 d3                	jne    1006142 <fatfs_format_fat32+0xea>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:329
            else
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
 100616f:	c6 83 96 00 00 00 46 	mov    BYTE PTR [ebx+0x96],0x46
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:330
        fs->currentsector.sector[83] = 'A';
 1006176:	c6 83 97 00 00 00 41 	mov    BYTE PTR [ebx+0x97],0x41
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:331
        fs->currentsector.sector[84] = 'T';
 100617d:	c6 83 98 00 00 00 54 	mov    BYTE PTR [ebx+0x98],0x54
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:332
        fs->currentsector.sector[85] = '3';
 1006184:	c6 83 99 00 00 00 33 	mov    BYTE PTR [ebx+0x99],0x33
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:333
        fs->currentsector.sector[86] = '2';
 100618b:	c6 83 9a 00 00 00 32 	mov    BYTE PTR [ebx+0x9a],0x32
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:334
        fs->currentsector.sector[87] = ' ';
 1006192:	c6 83 9b 00 00 00 20 	mov    BYTE PTR [ebx+0x9b],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:335
        fs->currentsector.sector[88] = ' ';
 1006199:	c6 83 9c 00 00 00 20 	mov    BYTE PTR [ebx+0x9c],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:336
        fs->currentsector.sector[89] = ' ';
 10061a0:	c6 83 9d 00 00 00 20 	mov    BYTE PTR [ebx+0x9d],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:339

        // Signature
        fs->currentsector.sector[510] = 0x55;
 10061a7:	c6 83 42 02 00 00 55 	mov    BYTE PTR [ebx+0x242],0x55
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:340
        fs->currentsector.sector[511] = 0xAA;
 10061ae:	c6 83 43 02 00 00 aa 	mov    BYTE PTR [ebx+0x243],0xaa
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:343
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
 10061b5:	83 ec 04             	sub    esp,0x4
 10061b8:	6a 01                	push   0x1
 10061ba:	55                   	push   ebp
 10061bb:	6a 00                	push   0x0
 10061bd:	ff 53 38             	call   DWORD PTR [ebx+0x38]
fatfs_format_fat32():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:498
    fs->rootdir_first_cluster = 2;

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
 10061c0:	83 c4 10             	add    esp,0x10
 10061c3:	85 c0                	test   eax,eax
 10061c5:	0f 84 32 02 00 00    	je     10063fd <fatfs_format_fat32+0x3a5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:502
        return 0;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
 10061cb:	0f b7 43 2a          	movzx  eax,WORD PTR [ebx+0x2a]
 10061cf:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
 10061d2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:505

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
 10061d5:	0f b6 53 2c          	movzx  edx,BYTE PTR [ebx+0x2c]
 10061d9:	0f af 53 20          	imul   edx,DWORD PTR [ebx+0x20]
 10061dd:	01 d0                	add    eax,edx
 10061df:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:508

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
 10061e2:	0f b7 73 18          	movzx  esi,WORD PTR [ebx+0x18]
fatfs_create_fsinfo_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:354
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 10061e6:	83 ec 04             	sub    esp,0x4
 10061e9:	68 00 02 00 00       	push   0x200
 10061ee:	6a 00                	push   0x0
 10061f0:	55                   	push   ebp
 10061f1:	e8 3d 2d 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:357

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
 10061f6:	c6 43 44 52          	mov    BYTE PTR [ebx+0x44],0x52
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:358
    fs->currentsector.sector[1] = 0x52;
 10061fa:	c6 43 45 52          	mov    BYTE PTR [ebx+0x45],0x52
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:359
    fs->currentsector.sector[2] = 0x61;
 10061fe:	c6 43 46 61          	mov    BYTE PTR [ebx+0x46],0x61
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:360
    fs->currentsector.sector[3] = 0x41;
 1006202:	c6 43 47 41          	mov    BYTE PTR [ebx+0x47],0x41
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:363

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
 1006206:	c6 83 28 02 00 00 72 	mov    BYTE PTR [ebx+0x228],0x72
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:364
    fs->currentsector.sector[485] = 0x72;
 100620d:	c6 83 29 02 00 00 72 	mov    BYTE PTR [ebx+0x229],0x72
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:365
    fs->currentsector.sector[486] = 0x41;
 1006214:	c6 83 2a 02 00 00 41 	mov    BYTE PTR [ebx+0x22a],0x41
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:366
    fs->currentsector.sector[487] = 0x61;
 100621b:	c6 83 2b 02 00 00 61 	mov    BYTE PTR [ebx+0x22b],0x61
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:369

    // FSI_Free_Count
    fs->currentsector.sector[488] = 0xFF;
 1006222:	c6 83 2c 02 00 00 ff 	mov    BYTE PTR [ebx+0x22c],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:370
    fs->currentsector.sector[489] = 0xFF;
 1006229:	c6 83 2d 02 00 00 ff 	mov    BYTE PTR [ebx+0x22d],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:371
    fs->currentsector.sector[490] = 0xFF;
 1006230:	c6 83 2e 02 00 00 ff 	mov    BYTE PTR [ebx+0x22e],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:372
    fs->currentsector.sector[491] = 0xFF;
 1006237:	c6 83 2f 02 00 00 ff 	mov    BYTE PTR [ebx+0x22f],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:375

    // FSI_Nxt_Free
    fs->currentsector.sector[492] = 0xFF;
 100623e:	c6 83 30 02 00 00 ff 	mov    BYTE PTR [ebx+0x230],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:376
    fs->currentsector.sector[493] = 0xFF;
 1006245:	c6 83 31 02 00 00 ff 	mov    BYTE PTR [ebx+0x231],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:377
    fs->currentsector.sector[494] = 0xFF;
 100624c:	c6 83 32 02 00 00 ff 	mov    BYTE PTR [ebx+0x232],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:378
    fs->currentsector.sector[495] = 0xFF;
 1006253:	c6 83 33 02 00 00 ff 	mov    BYTE PTR [ebx+0x233],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:381

    // Signature
    fs->currentsector.sector[510] = 0x55;
 100625a:	c6 83 42 02 00 00 55 	mov    BYTE PTR [ebx+0x242],0x55
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:382
    fs->currentsector.sector[511] = 0xAA;
 1006261:	c6 83 43 02 00 00 aa 	mov    BYTE PTR [ebx+0x243],0xaa
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:384

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
 1006268:	83 c4 0c             	add    esp,0xc
 100626b:	6a 01                	push   0x1
 100626d:	55                   	push   ebp
 100626e:	56                   	push   esi
 100626f:	ff 53 38             	call   DWORD PTR [ebx+0x38]
fatfs_format_fat32():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:508

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
 1006272:	83 c4 10             	add    esp,0x10
 1006275:	85 c0                	test   eax,eax
 1006277:	0f 84 80 01 00 00    	je     10063fd <fatfs_format_fat32+0x3a5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:512
        return 0;

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 1))
 100627d:	ba 01 00 00 00       	mov    edx,0x1
 1006282:	89 d8                	mov    eax,ebx
 1006284:	e8 0f fa ff ff       	call   1005c98 <fatfs_erase_fat>
 1006289:	85 c0                	test   eax,eax
 100628b:	0f 84 6c 01 00 00    	je     10063fd <fatfs_format_fat32+0x3a5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:516
        return 0;

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
 1006291:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
 1006294:	83 ec 08             	sub    esp,0x8
 1006297:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 100629a:	53                   	push   ebx
 100629b:	e8 77 d5 ff ff       	call   1003817 <fatfs_lba_of_cluster>
 10062a0:	89 f1                	mov    ecx,esi
 10062a2:	89 c2                	mov    edx,eax
 10062a4:	89 d8                	mov    eax,ebx
 10062a6:	e8 bd fa ff ff       	call   1005d68 <fatfs_erase_sectors>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:486

    fatfs_fat_init(fs);

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;
 10062ab:	83 c4 10             	add    esp,0x10
 10062ae:	85 c0                	test   eax,eax
 10062b0:	0f 95 c0             	setne  al
 10062b3:	0f b6 c0             	movzx  eax,al
 10062b6:	e9 42 01 00 00       	jmp    10063fd <fatfs_format_fat32+0x3a5>
 10062bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
 10062c0:	e9 38 01 00 00       	jmp    10063fd <fatfs_format_fat32+0x3a5>
 10062c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
 10062ca:	e9 2e 01 00 00       	jmp    10063fd <fatfs_format_fat32+0x3a5>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:141
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
 10062cf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
fatfs_format_fat32():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:499

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
        return 0;
 10062d2:	b8 00 00 00 00       	mov    eax,0x0
 10062d7:	e9 21 01 00 00       	jmp    10063fd <fatfs_format_fat32+0x3a5>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:141
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
 10062dc:	88 13                	mov    BYTE PTR [ebx],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:146
    if (!fs->sectors_per_cluster)
        return 0; // Invalid disk size

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
 10062de:	88 53 51             	mov    BYTE PTR [ebx+0x51],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:152

    // Reserved Sectors
    if (!is_fat32)
        fs->reserved_sectors = 8;
    else
        fs->reserved_sectors = 32;
 10062e1:	66 c7 43 2a 20 00    	mov    WORD PTR [ebx+0x2a],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:153
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
 10062e7:	c6 43 52 20          	mov    BYTE PTR [ebx+0x52],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:154
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
 10062eb:	c6 43 53 00          	mov    BYTE PTR [ebx+0x53],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:157

    // Number of FATS
    fs->num_of_fats = 2;
 10062ef:	c6 43 2c 02          	mov    BYTE PTR [ebx+0x2c],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:158
    fs->currentsector.sector[16] = fs->num_of_fats;
 10062f3:	c6 43 54 02          	mov    BYTE PTR [ebx+0x54],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:169
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
    }
    else
    {
        fs->root_entry_count = 0;
 10062f7:	66 c7 43 28 00 00    	mov    WORD PTR [ebx+0x28],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:170
        fs->currentsector.sector[17] = 0;
 10062fd:	c6 43 55 00          	mov    BYTE PTR [ebx+0x55],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:171
        fs->currentsector.sector[18] = 0;
 1006301:	c6 43 56 00          	mov    BYTE PTR [ebx+0x56],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:175
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
 1006305:	c6 43 57 00          	mov    BYTE PTR [ebx+0x57],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:176
    fs->currentsector.sector[20] = 0x00;
 1006309:	c6 43 58 00          	mov    BYTE PTR [ebx+0x58],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:179

    // Media type
    fs->currentsector.sector[21] = 0xF8;
 100630d:	c6 43 59 f8          	mov    BYTE PTR [ebx+0x59],0xf8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:253
    }
    // FAT32 BS Details
    else
    {
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
 1006311:	c6 43 5a 00          	mov    BYTE PTR [ebx+0x5a],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:254
        fs->currentsector.sector[23] = 0;
 1006315:	c6 43 5b 00          	mov    BYTE PTR [ebx+0x5b],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:257

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
 1006319:	c6 43 5c 3f          	mov    BYTE PTR [ebx+0x5c],0x3f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:258
        fs->currentsector.sector[25] = 0x00;
 100631d:	c6 43 5d 00          	mov    BYTE PTR [ebx+0x5d],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:261

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
 1006321:	c6 43 5e ff          	mov    BYTE PTR [ebx+0x5e],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:262
        fs->currentsector.sector[27] = 0x00;
 1006325:	c6 43 5f 00          	mov    BYTE PTR [ebx+0x5f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:265

        // Hidden sectors
        fs->currentsector.sector[28] = 0x00;
 1006329:	c6 43 60 00          	mov    BYTE PTR [ebx+0x60],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:266
        fs->currentsector.sector[29] = 0x00;
 100632d:	c6 43 61 00          	mov    BYTE PTR [ebx+0x61],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:267
        fs->currentsector.sector[30] = 0x00;
 1006331:	c6 43 62 00          	mov    BYTE PTR [ebx+0x62],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:268
        fs->currentsector.sector[31] = 0x00;
 1006335:	c6 43 63 00          	mov    BYTE PTR [ebx+0x63],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:271

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
 1006339:	89 f0                	mov    eax,esi
 100633b:	88 43 64             	mov    BYTE PTR [ebx+0x64],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:272
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
 100633e:	89 f0                	mov    eax,esi
 1006340:	c1 e8 08             	shr    eax,0x8
 1006343:	88 43 65             	mov    BYTE PTR [ebx+0x65],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:273
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
 1006346:	89 f0                	mov    eax,esi
 1006348:	c1 e8 10             	shr    eax,0x10
 100634b:	88 43 66             	mov    BYTE PTR [ebx+0x66],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:274
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
 100634e:	89 f0                	mov    eax,esi
 1006350:	c1 e8 18             	shr    eax,0x18
 1006353:	88 43 67             	mov    BYTE PTR [ebx+0x67],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:277

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
 1006356:	0f b6 ca             	movzx  ecx,dl
 1006359:	89 f0                	mov    eax,esi
 100635b:	ba 00 00 00 00       	mov    edx,0x0
 1006360:	f7 f1                	div    ecx
 1006362:	83 c0 01             	add    eax,0x1
 1006365:	c1 e8 07             	shr    eax,0x7
 1006368:	83 c0 01             	add    eax,0x1
 100636b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:280

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
 100636e:	88 43 68             	mov    BYTE PTR [ebx+0x68],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:281
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
 1006371:	89 c2                	mov    edx,eax
 1006373:	c1 ea 08             	shr    edx,0x8
 1006376:	88 53 69             	mov    BYTE PTR [ebx+0x69],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:282
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
 1006379:	89 c2                	mov    edx,eax
 100637b:	c1 ea 10             	shr    edx,0x10
 100637e:	88 53 6a             	mov    BYTE PTR [ebx+0x6a],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:283
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
 1006381:	c1 e8 18             	shr    eax,0x18
 1006384:	88 43 6b             	mov    BYTE PTR [ebx+0x6b],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:286

        // BPB_ExtFlags
        fs->currentsector.sector[40] = 0;
 1006387:	c6 43 6c 00          	mov    BYTE PTR [ebx+0x6c],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:287
        fs->currentsector.sector[41] = 0;
 100638b:	c6 43 6d 00          	mov    BYTE PTR [ebx+0x6d],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:290

        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
 100638f:	c6 43 6e 00          	mov    BYTE PTR [ebx+0x6e],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:291
        fs->currentsector.sector[43] = 0;
 1006393:	c6 43 6f 00          	mov    BYTE PTR [ebx+0x6f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:294

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
 1006397:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
 100639a:	88 43 70             	mov    BYTE PTR [ebx+0x70],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:295
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
 100639d:	89 c2                	mov    edx,eax
 100639f:	c1 ea 08             	shr    edx,0x8
 10063a2:	88 53 71             	mov    BYTE PTR [ebx+0x71],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:296
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
 10063a5:	89 c2                	mov    edx,eax
 10063a7:	c1 ea 10             	shr    edx,0x10
 10063aa:	88 53 72             	mov    BYTE PTR [ebx+0x72],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:297
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);
 10063ad:	c1 e8 18             	shr    eax,0x18
 10063b0:	88 43 73             	mov    BYTE PTR [ebx+0x73],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:300

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
 10063b3:	0f b7 43 18          	movzx  eax,WORD PTR [ebx+0x18]
 10063b7:	88 43 74             	mov    BYTE PTR [ebx+0x74],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:301
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);
 10063ba:	66 c1 e8 08          	shr    ax,0x8
 10063be:	88 43 75             	mov    BYTE PTR [ebx+0x75],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:304

        // BPB_BkBootSec
        fs->currentsector.sector[50] = 6;
 10063c1:	c6 43 76 06          	mov    BYTE PTR [ebx+0x76],0x6
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:305
        fs->currentsector.sector[51] = 0;
 10063c5:	c6 43 77 00          	mov    BYTE PTR [ebx+0x77],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:308

        // Drive number
        fs->currentsector.sector[64] = 0x00;
 10063c9:	c6 83 84 00 00 00 00 	mov    BYTE PTR [ebx+0x84],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:311

        // Boot signature
        fs->currentsector.sector[66] = 0x29;
 10063d0:	c6 83 86 00 00 00 29 	mov    BYTE PTR [ebx+0x86],0x29
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:314

        // Volume ID
        fs->currentsector.sector[67] = 0x12;
 10063d7:	c6 83 87 00 00 00 12 	mov    BYTE PTR [ebx+0x87],0x12
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:315
        fs->currentsector.sector[68] = 0x34;
 10063de:	c6 83 88 00 00 00 34 	mov    BYTE PTR [ebx+0x88],0x34
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:316
        fs->currentsector.sector[69] = 0x56;
 10063e5:	c6 83 89 00 00 00 56 	mov    BYTE PTR [ebx+0x89],0x56
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:317
        fs->currentsector.sector[70] = 0x78;
 10063ec:	c6 83 8a 00 00 00 78 	mov    BYTE PTR [ebx+0x8a],0x78
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:320

        // Volume name
        for (i=0;i<11;i++)
 10063f3:	be 00 00 00 00       	mov    esi,0x0
 10063f8:	e9 45 fd ff ff       	jmp    1006142 <fatfs_format_fat32+0xea>
fatfs_format_fat32():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:520
    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
        return 0;

    return 1;
}
 10063fd:	83 c4 0c             	add    esp,0xc
 1006400:	5b                   	pop    ebx
 1006401:	5e                   	pop    esi
 1006402:	5f                   	pop    edi
 1006403:	5d                   	pop    ebp
 1006404:	c3                   	ret    

01006405 <fatfs_format>:
fatfs_format():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:525
//-----------------------------------------------------------------------------
// fatfs_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
int fatfs_format(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
 1006405:	83 ec 0c             	sub    esp,0xc
 1006408:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 100640c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1006410:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:527
    // 2GB - 32K limit for safe behaviour for FAT16
    if (volume_sectors <= 4194304)
 1006414:	3d 00 00 40 00       	cmp    eax,0x400000
 1006419:	77 10                	ja     100642b <fatfs_format+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:528
        return fatfs_format_fat16(fs, volume_sectors, name);
 100641b:	83 ec 04             	sub    esp,0x4
 100641e:	51                   	push   ecx
 100641f:	50                   	push   eax
 1006420:	52                   	push   edx
 1006421:	e8 94 f9 ff ff       	call   1005dba <fatfs_format_fat16>
 1006426:	83 c4 10             	add    esp,0x10
 1006429:	eb 0e                	jmp    1006439 <fatfs_format+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:530
    else
        return fatfs_format_fat32(fs, volume_sectors, name);
 100642b:	83 ec 04             	sub    esp,0x4
 100642e:	51                   	push   ecx
 100642f:	50                   	push   eax
 1006430:	52                   	push   edx
 1006431:	e8 22 fc ff ff       	call   1006058 <fatfs_format_fat32>
 1006436:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:531
}
 1006439:	83 c4 0c             	add    esp,0xc
 100643c:	c3                   	ret    
 100643d:	66 90                	xchg   ax,ax
 100643f:	90                   	nop

01006440 <fatfs_lfn_cache_init>:
fatfs_lfn_cache_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:40

//-----------------------------------------------------------------------------
// fatfs_lfn_cache_init: Clear long file name cache
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
 1006440:	56                   	push   esi
 1006441:	53                   	push   ebx
 1006442:	83 ec 04             	sub    esp,0x4
 1006445:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:43
    int i = 0;

    lfn->no_of_strings = 0;
 1006449:	c6 86 05 01 00 00 00 	mov    BYTE PTR [esi+0x105],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:48

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
 1006450:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
 1006455:	74 1f                	je     1006476 <fatfs_lfn_cache_init+0x36>
 1006457:	89 f3                	mov    ebx,esi
 1006459:	81 c6 04 01 00 00    	add    esi,0x104
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:50 (discriminator 3)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
 100645f:	83 ec 04             	sub    esp,0x4
 1006462:	6a 0d                	push   0xd
 1006464:	6a 00                	push   0x0
 1006466:	53                   	push   ebx
 1006467:	e8 c7 2a 00 00       	call   1008f33 <memset>
 100646c:	83 c3 0d             	add    ebx,0xd
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:49 (discriminator 3)

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
 100646f:	83 c4 10             	add    esp,0x10
 1006472:	39 f3                	cmp    ebx,esi
 1006474:	75 e9                	jne    100645f <fatfs_lfn_cache_init+0x1f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:52
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
#endif
}
 1006476:	83 c4 04             	add    esp,0x4
 1006479:	5b                   	pop    ebx
 100647a:	5e                   	pop    esi
 100647b:	c3                   	ret    

0100647c <fatfs_lfn_cache_entry>:
fatfs_lfn_cache_entry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:59
// fatfs_lfn_cache_entry - Function extracts long file name text from sector
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
 100647c:	56                   	push   esi
 100647d:	53                   	push   ebx
 100647e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
 1006482:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:61
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
 1006486:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 1006489:	83 e0 1f             	and    eax,0x1f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:68
    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
        return ;

    // This is an error condition
    if (LFNIndex == 0)
 100648c:	8d 58 ff             	lea    ebx,[eax-0x1]
 100648f:	80 fb 13             	cmp    bl,0x13
 1006492:	0f 87 8b 00 00 00    	ja     1006523 <fatfs_lfn_cache_entry+0xa7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:71
        return ;

    if (lfn->no_of_strings == 0)
 1006498:	80 b9 05 01 00 00 00 	cmp    BYTE PTR [ecx+0x105],0x0
 100649f:	75 06                	jne    10064a7 <fatfs_lfn_cache_entry+0x2b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:72
        lfn->no_of_strings = LFNIndex;
 10064a1:	88 81 05 01 00 00    	mov    BYTE PTR [ecx+0x105],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:74

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
 10064a7:	0f b6 c0             	movzx  eax,al
 10064aa:	83 e8 01             	sub    eax,0x1
 10064ad:	8d 1c 40             	lea    ebx,[eax+eax*2]
 10064b0:	8d 34 98             	lea    esi,[eax+ebx*4]
 10064b3:	8d 04 31             	lea    eax,[ecx+esi*1]
 10064b6:	0f b6 5a 01          	movzx  ebx,BYTE PTR [edx+0x1]
 10064ba:	88 18                	mov    BYTE PTR [eax],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:75
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
 10064bc:	0f b6 5a 03          	movzx  ebx,BYTE PTR [edx+0x3]
 10064c0:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:76
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
 10064c3:	0f b6 5a 05          	movzx  ebx,BYTE PTR [edx+0x5]
 10064c7:	88 58 02             	mov    BYTE PTR [eax+0x2],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:77
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
 10064ca:	0f b6 5a 07          	movzx  ebx,BYTE PTR [edx+0x7]
 10064ce:	88 58 03             	mov    BYTE PTR [eax+0x3],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:78
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
 10064d1:	0f b6 5a 09          	movzx  ebx,BYTE PTR [edx+0x9]
 10064d5:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:79
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
 10064d8:	0f b6 5a 0e          	movzx  ebx,BYTE PTR [edx+0xe]
 10064dc:	88 58 05             	mov    BYTE PTR [eax+0x5],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:80
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
 10064df:	0f b6 5a 10          	movzx  ebx,BYTE PTR [edx+0x10]
 10064e3:	88 58 06             	mov    BYTE PTR [eax+0x6],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:81
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
 10064e6:	0f b6 5a 12          	movzx  ebx,BYTE PTR [edx+0x12]
 10064ea:	88 58 07             	mov    BYTE PTR [eax+0x7],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:82
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
 10064ed:	0f b6 5a 14          	movzx  ebx,BYTE PTR [edx+0x14]
 10064f1:	88 58 08             	mov    BYTE PTR [eax+0x8],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:83
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
 10064f4:	0f b6 5a 16          	movzx  ebx,BYTE PTR [edx+0x16]
 10064f8:	88 58 09             	mov    BYTE PTR [eax+0x9],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:84
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
 10064fb:	0f b6 5a 18          	movzx  ebx,BYTE PTR [edx+0x18]
 10064ff:	88 58 0a             	mov    BYTE PTR [eax+0xa],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:85
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
 1006502:	0f b6 5a 1c          	movzx  ebx,BYTE PTR [edx+0x1c]
 1006506:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:86
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
 1006509:	0f b6 52 1e          	movzx  edx,BYTE PTR [edx+0x1e]
 100650d:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
 1006510:	8d 54 31 0d          	lea    edx,[ecx+esi*1+0xd]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:89

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
 1006514:	80 38 ff             	cmp    BYTE PTR [eax],0xff
 1006517:	75 03                	jne    100651c <fatfs_lfn_cache_entry+0xa0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:90
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
 1006519:	c6 00 20             	mov    BYTE PTR [eax],0x20
 100651c:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:88 (discriminator 2)
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
 100651f:	39 d0                	cmp    eax,edx
 1006521:	75 f1                	jne    1006514 <fatfs_lfn_cache_entry+0x98>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:91
        if (lfn->String[LFNIndex-1][i]==0xFF)
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
}
 1006523:	5b                   	pop    ebx
 1006524:	5e                   	pop    esi
 1006525:	c3                   	ret    

01006526 <fatfs_lfn_cache_get>:
fatfs_lfn_cache_get():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:98
//-----------------------------------------------------------------------------
// fatfs_lfn_cache_get: Get a reference to the long filename
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
 1006526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:100
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
 100652a:	0f b6 90 05 01 00 00 	movzx  edx,BYTE PTR [eax+0x105]
 1006531:	80 fa 14             	cmp    dl,0x14
 1006534:	75 08                	jne    100653e <fatfs_lfn_cache_get+0x18>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:101
        lfn->Null = '\0';
 1006536:	c6 80 04 01 00 00 00 	mov    BYTE PTR [eax+0x104],0x0
 100653d:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:102
    else if (lfn->no_of_strings)
 100653e:	84 d2                	test   dl,dl
 1006540:	74 0e                	je     1006550 <fatfs_lfn_cache_get+0x2a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:103
        lfn->String[lfn->no_of_strings][0] = '\0';
 1006542:	0f b6 d2             	movzx  edx,dl
 1006545:	8d 0c 52             	lea    ecx,[edx+edx*2]
 1006548:	8d 14 8a             	lea    edx,[edx+ecx*4]
 100654b:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
 100654f:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:105
    else
        lfn->String[0][0] = '\0';
 1006550:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:108

    return (char*)&lfn->String[0][0];
}
 1006553:	c3                   	ret    

01006554 <fatfs_entry_lfn_text>:
fatfs_entry_lfn_text():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:115
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
 1006554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1006558:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
 100655c:	83 e0 0f             	and    eax,0xf
 100655f:	3c 0f                	cmp    al,0xf
 1006561:	0f 94 c0             	sete   al
 1006564:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:120
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT)
        return 1;
    else
        return 0;
}
 1006567:	c3                   	ret    

01006568 <fatfs_entry_lfn_invalid>:
fatfs_entry_lfn_invalid():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:127
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
 1006568:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:128
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
 100656c:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 100656f:	84 c0                	test   al,al
 1006571:	74 15                	je     1006588 <fatfs_entry_lfn_invalid+0x20>
 1006573:	3c e5                	cmp    al,0xe5
 1006575:	74 11                	je     1006588 <fatfs_entry_lfn_invalid+0x20>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:130
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
 1006577:	0f b6 42 0b          	movzx  eax,BYTE PTR [edx+0xb]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:129
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
 100657b:	3c 08                	cmp    al,0x8
 100657d:	74 0f                	je     100658e <fatfs_entry_lfn_invalid+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:132
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
         (entry->Attr & FILE_ATTR_SYSHID) )
        return 1;
 100657f:	a8 06                	test   al,0x6
 1006581:	0f 95 c0             	setne  al
 1006584:	0f b6 c0             	movzx  eax,al
 1006587:	c3                   	ret    
 1006588:	b8 01 00 00 00       	mov    eax,0x1
 100658d:	c3                   	ret    
 100658e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:135
    else
        return 0;
}
 1006593:	c3                   	ret    

01006594 <fatfs_entry_lfn_exists>:
fatfs_entry_lfn_exists():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:142
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
 1006594:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:143
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
 1006598:	0f b6 51 0b          	movzx  edx,BYTE PTR [ecx+0xb]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:151
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
        return 1;
    else
        return 0;
 100659c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:143
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
 10065a1:	80 fa 0f             	cmp    dl,0xf
 10065a4:	74 37                	je     10065dd <fatfs_entry_lfn_exists+0x49>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:144 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
 10065a6:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:145 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
 10065a9:	3c e5                	cmp    al,0xe5
 10065ab:	0f 95 c1             	setne  cl
 10065ae:	84 c0                	test   al,al
 10065b0:	0f 95 c0             	setne  al
 10065b3:	84 c1                	test   cl,al
 10065b5:	74 21                	je     10065d8 <fatfs_entry_lfn_exists+0x44>
 10065b7:	80 fa 08             	cmp    dl,0x8
 10065ba:	74 1c                	je     10065d8 <fatfs_entry_lfn_exists+0x44>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:151
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
        return 1;
    else
        return 0;
 10065bc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:146
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
 10065c1:	f6 c2 06             	test   dl,0x6
 10065c4:	75 17                	jne    10065dd <fatfs_entry_lfn_exists+0x49>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:149
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
        return 1;
 10065c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 10065ca:	80 b8 05 01 00 00 00 	cmp    BYTE PTR [eax+0x105],0x0
 10065d1:	0f 95 c0             	setne  al
 10065d4:	0f b6 c0             	movzx  eax,al
 10065d7:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:151
    else
        return 0;
 10065d8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:152
}
 10065dd:	f3 c3                	repz ret 

010065df <fatfs_entry_sfn_only>:
fatfs_entry_sfn_only():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:158
#endif
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
 10065df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:159
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
 10065e3:	0f b6 51 0b          	movzx  edx,BYTE PTR [ecx+0xb]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:166
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
    else
        return 0;
 10065e7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:159
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
 10065ec:	80 fa 0f             	cmp    dl,0xf
 10065ef:	74 25                	je     1006616 <fatfs_entry_sfn_only+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:160 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
 10065f1:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:161 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
 10065f4:	3c e5                	cmp    al,0xe5
 10065f6:	0f 95 c1             	setne  cl
 10065f9:	84 c0                	test   al,al
 10065fb:	0f 95 c0             	setne  al
 10065fe:	84 c1                	test   cl,al
 1006600:	74 0f                	je     1006611 <fatfs_entry_sfn_only+0x32>
 1006602:	80 fa 08             	cmp    dl,0x8
 1006605:	74 0a                	je     1006611 <fatfs_entry_sfn_only+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:164
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
 1006607:	f6 c2 06             	test   dl,0x6
 100660a:	0f 94 c0             	sete   al
 100660d:	0f b6 c0             	movzx  eax,al
 1006610:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:166
    else
        return 0;
 1006611:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:167
}
 1006616:	f3 c3                	repz ret 

01006618 <fatfs_entry_is_dir>:
fatfs_entry_is_dir():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:173
// TODO: FILE_ATTR_SYSHID ?!?!??!
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
 1006618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 100661c:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
 1006620:	c0 e8 04             	shr    al,0x4
 1006623:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:178
    if (entry->Attr & FILE_TYPE_DIR)
        return 1;
    else
        return 0;
}
 1006626:	c3                   	ret    

01006627 <fatfs_entry_is_file>:
fatfs_entry_is_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:183
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
 1006627:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 100662b:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
 100662f:	c0 e8 05             	shr    al,0x5
 1006632:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:188
    if (entry->Attr & FILE_TYPE_FILE)
        return 1;
    else
        return 0;
}
 1006635:	c3                   	ret    

01006636 <fatfs_lfn_entries_required>:
fatfs_lfn_entries_required():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:194
//-----------------------------------------------------------------------------
// fatfs_lfn_entries_required: Calculate number of 13 characters entries
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
 1006636:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:195
    int length = (int)strlen(filename);
 1006639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100663d:	e8 ca 37 00 00       	call   1009e0c <strlen>
 1006642:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:200

    if (length)
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
    else
        return 0;
 1006645:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:197
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
    int length = (int)strlen(filename);

    if (length)
 100664a:	85 c0                	test   eax,eax
 100664c:	74 16                	je     1006664 <fatfs_lfn_entries_required+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:198
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
 100664e:	8d 48 0c             	lea    ecx,[eax+0xc]
 1006651:	ba 4f ec c4 4e       	mov    edx,0x4ec4ec4f
 1006656:	89 c8                	mov    eax,ecx
 1006658:	f7 ea                	imul   edx
 100665a:	c1 fa 02             	sar    edx,0x2
 100665d:	89 c8                	mov    eax,ecx
 100665f:	c1 f8 1f             	sar    eax,0x1f
 1006662:	29 c2                	sub    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:201
    else
        return 0;
}
 1006664:	89 d0                	mov    eax,edx
 1006666:	83 c4 0c             	add    esp,0xc
 1006669:	c3                   	ret    

0100666a <fatfs_filename_to_lfn>:
fatfs_filename_to_lfn():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:208
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
 100666a:	55                   	push   ebp
 100666b:	57                   	push   edi
 100666c:	56                   	push   esi
 100666d:	53                   	push   ebx
 100666e:	83 ec 68             	sub    esp,0x68
 1006671:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
 1006675:	8b 9c 24 80 00 00 00 	mov    ebx,DWORD PTR [esp+0x80]
 100667c:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
 1006683:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
 100668a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:210
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
 100668e:	c7 44 24 28 01 00 00 	mov    DWORD PTR [esp+0x28],0x1
 1006695:	00 
 1006696:	c7 44 24 2c 03 00 00 	mov    DWORD PTR [esp+0x2c],0x3
 100669d:	00 
 100669e:	c7 44 24 30 05 00 00 	mov    DWORD PTR [esp+0x30],0x5
 10066a5:	00 
 10066a6:	c7 44 24 34 07 00 00 	mov    DWORD PTR [esp+0x34],0x7
 10066ad:	00 
 10066ae:	c7 44 24 38 09 00 00 	mov    DWORD PTR [esp+0x38],0x9
 10066b5:	00 
 10066b6:	c7 44 24 3c 0e 00 00 	mov    DWORD PTR [esp+0x3c],0xe
 10066bd:	00 
 10066be:	c7 44 24 40 10 00 00 	mov    DWORD PTR [esp+0x40],0x10
 10066c5:	00 
 10066c6:	c7 44 24 44 12 00 00 	mov    DWORD PTR [esp+0x44],0x12
 10066cd:	00 
 10066ce:	c7 44 24 48 14 00 00 	mov    DWORD PTR [esp+0x48],0x14
 10066d5:	00 
 10066d6:	c7 44 24 4c 16 00 00 	mov    DWORD PTR [esp+0x4c],0x16
 10066dd:	00 
 10066de:	c7 44 24 50 18 00 00 	mov    DWORD PTR [esp+0x50],0x18
 10066e5:	00 
 10066e6:	c7 44 24 54 1c 00 00 	mov    DWORD PTR [esp+0x54],0x1c
 10066ed:	00 
 10066ee:	c7 44 24 58 1e 00 00 	mov    DWORD PTR [esp+0x58],0x1e
 10066f5:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:213

    // 13 characters entries
    int length = (int)strlen(filename);
 10066f6:	57                   	push   edi
 10066f7:	e8 10 37 00 00       	call   1009e0c <strlen>
 10066fc:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:214
    int entriesRequired = fatfs_lfn_entries_required(filename);
 10066fe:	89 3c 24             	mov    DWORD PTR [esp],edi
 1006701:	e8 30 ff ff ff       	call   1006636 <fatfs_lfn_entries_required>
 1006706:	83 c4 0c             	add    esp,0xc
 1006709:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:217

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
 100670d:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
 1006711:	8d 4c 85 00          	lea    ecx,[ebp+eax*4+0x0]
 1006715:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:220

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
 1006719:	6a 20                	push   0x20
 100671b:	6a 00                	push   0x0
 100671d:	53                   	push   ebx
 100671e:	e8 10 28 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:223

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
 1006723:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1006727:	83 e8 01             	sub    eax,0x1
 100672a:	83 c4 10             	add    esp,0x10
 100672d:	8d 55 01             	lea    edx,[ebp+0x1]
 1006730:	39 c5                	cmp    ebp,eax
 1006732:	75 03                	jne    1006737 <fatfs_filename_to_lfn+0xcd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:223 (discriminator 1)
 1006734:	83 ca 40             	or     edx,0x40
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:223 (discriminator 4)
 1006737:	88 13                	mov    BYTE PTR [ebx],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:226 (discriminator 4)

    // LFN flag
    buffer[11] = 0x0F;
 1006739:	c6 43 0b 0f          	mov    BYTE PTR [ebx+0xb],0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:229 (discriminator 4)

    // Checksum of short filename
    buffer[13] = sfnChk;
 100673d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
 1006742:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
 1006745:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1006749:	8d 54 24 1c          	lea    edx,[esp+0x1c]
 100674d:	8d 4c 24 50          	lea    ecx,[esp+0x50]
 1006751:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:234

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
 1006755:	39 c6                	cmp    esi,eax
 1006757:	7e 0b                	jle    1006764 <fatfs_filename_to_lfn+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:235
            buffer[nameIndexes[i]] = filename[start+i];
 1006759:	8b 2a                	mov    ebp,DWORD PTR [edx]
 100675b:	0f b6 0c 07          	movzx  ecx,BYTE PTR [edi+eax*1]
 100675f:	88 0c 2b             	mov    BYTE PTR [ebx+ebp*1],cl
 1006762:	eb 17                	jmp    100677b <fatfs_filename_to_lfn+0x111>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:236
        else if ( (start+i) == length )
 1006764:	39 c6                	cmp    esi,eax
 1006766:	75 08                	jne    1006770 <fatfs_filename_to_lfn+0x106>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:237
            buffer[nameIndexes[i]] = 0x00;
 1006768:	8b 2a                	mov    ebp,DWORD PTR [edx]
 100676a:	c6 04 2b 00          	mov    BYTE PTR [ebx+ebp*1],0x0
 100676e:	eb 0b                	jmp    100677b <fatfs_filename_to_lfn+0x111>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:240
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
 1006770:	8b 2a                	mov    ebp,DWORD PTR [edx]
 1006772:	c6 04 2b ff          	mov    BYTE PTR [ebx+ebp*1],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:241
            buffer[nameIndexes[i]+1] = 0xFF;
 1006776:	c6 44 2b 01 ff       	mov    BYTE PTR [ebx+ebp*1+0x1],0xff
 100677b:	83 c0 01             	add    eax,0x1
 100677e:	83 c2 04             	add    edx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:232 (discriminator 2)

    // Checksum of short filename
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
 1006781:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
 1006785:	75 ce                	jne    1006755 <fatfs_filename_to_lfn+0xeb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:244
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
 1006787:	83 c4 5c             	add    esp,0x5c
 100678a:	5b                   	pop    ebx
 100678b:	5e                   	pop    esi
 100678c:	5f                   	pop    edi
 100678d:	5d                   	pop    ebp
 100678e:	c3                   	ret    

0100678f <fatfs_sfn_create_entry>:
fatfs_sfn_create_entry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:251
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
 100678f:	57                   	push   edi
 1006790:	56                   	push   esi
 1006791:	53                   	push   ebx
 1006792:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1006796:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
 100679a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
 100679e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:255
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
 10067a2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:256 (discriminator 3)
        entry->Name[i] = shortfilename[i];
 10067a7:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
 10067ab:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:255 (discriminator 3)
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
 10067ae:	83 c0 01             	add    eax,0x1
 10067b1:	83 f8 0b             	cmp    eax,0xb
 10067b4:	75 f1                	jne    10067a7 <fatfs_sfn_create_entry+0x18>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:259
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
 10067b6:	c6 42 0d 00          	mov    BYTE PTR [edx+0xd],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:260
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
 10067ba:	c6 42 0e 00          	mov    BYTE PTR [edx+0xe],0x0
 10067be:	c6 42 0f 00          	mov    BYTE PTR [edx+0xf],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:261
    entry->CrtDate[1] = 0x00;
 10067c2:	c6 42 11 00          	mov    BYTE PTR [edx+0x11],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:262
    entry->CrtDate[0] = 0x20;
 10067c6:	c6 42 10 20          	mov    BYTE PTR [edx+0x10],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:263
    entry->LstAccDate[1] = 0x00;
 10067ca:	c6 42 13 00          	mov    BYTE PTR [edx+0x13],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:264
    entry->LstAccDate[0] = 0x20;
 10067ce:	c6 42 12 20          	mov    BYTE PTR [edx+0x12],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:265
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
 10067d2:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
 10067d6:	c6 42 17 00          	mov    BYTE PTR [edx+0x17],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:266
    entry->WrtDate[1] = 0x00;
 10067da:	c6 42 19 00          	mov    BYTE PTR [edx+0x19],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:267
    entry->WrtDate[0] = 0x20;
 10067de:	c6 42 18 20          	mov    BYTE PTR [edx+0x18],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:270

    if (!dir)
        entry->Attr = FILE_TYPE_FILE;
 10067e2:	83 ff 01             	cmp    edi,0x1
 10067e5:	19 c0                	sbb    eax,eax
 10067e7:	83 e0 10             	and    eax,0x10
 10067ea:	83 c0 10             	add    eax,0x10
 10067ed:	88 42 0b             	mov    BYTE PTR [edx+0xb],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:274
    else
        entry->Attr = FILE_TYPE_DIR;

    entry->NTRes = 0x00;
 10067f0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:276

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
 10067f4:	89 f0                	mov    eax,esi
 10067f6:	c1 e8 10             	shr    eax,0x10
 10067f9:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:277
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
 10067fd:	66 89 72 1a          	mov    WORD PTR [edx+0x1a],si
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:278
    entry->FileSize = FAT_HTONL(size);
 1006801:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1006805:	89 42 1c             	mov    DWORD PTR [edx+0x1c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:279
}
 1006808:	5b                   	pop    ebx
 1006809:	5e                   	pop    esi
 100680a:	5f                   	pop    edi
 100680b:	c3                   	ret    

0100680c <fatfs_lfn_create_sfn>:
fatfs_lfn_create_sfn():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:286
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
 100680c:	55                   	push   ebp
 100680d:	57                   	push   edi
 100680e:	56                   	push   esi
 100680f:	53                   	push   ebx
 1006810:	83 ec 38             	sub    esp,0x38
 1006813:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
 1006817:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:291
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
 100681b:	53                   	push   ebx
 100681c:	e8 eb 35 00 00       	call   1009e0c <strlen>
 1006821:	83 c4 10             	add    esp,0x10
 1006824:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:295

    // Invalid to start with .
    if (filename[0]=='.')
        return 0;
 1006826:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:294
    char ext[3];
    int pos;
    int len = (int)strlen(filename);

    // Invalid to start with .
    if (filename[0]=='.')
 100682b:	80 3b 2e             	cmp    BYTE PTR [ebx],0x2e
 100682e:	0f 84 fb 00 00 00    	je     100692f <fatfs_lfn_create_sfn+0x123>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:291
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
 1006834:	89 ee                	mov    esi,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:297

    // Invalid to start with .
    if (filename[0]=='.')
        return 0;

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
 1006836:	83 ec 04             	sub    esp,0x4
 1006839:	6a 0b                	push   0xb
 100683b:	6a 20                	push   0x20
 100683d:	57                   	push   edi
 100683e:	e8 f0 26 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:298
    memset(ext, ' ', 3);
 1006843:	83 c4 0c             	add    esp,0xc
 1006846:	6a 03                	push   0x3
 1006848:	6a 20                	push   0x20
 100684a:	8d 44 24 29          	lea    eax,[esp+0x29]
 100684e:	50                   	push   eax
 100684f:	e8 df 26 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:301

    // Find dot seperator
    for (i = 0; i< len; i++)
 1006854:	83 c4 10             	add    esp,0x10
 1006857:	85 ed                	test   ebp,ebp
 1006859:	0f 8e 87 00 00 00    	jle    10068e6 <fatfs_lfn_create_sfn+0xda>
 100685f:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1006864:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:303
    {
        if (filename[i]=='.')
 1006869:	80 3c 13 2e          	cmp    BYTE PTR [ebx+edx*1],0x2e
 100686d:	0f 44 c2             	cmove  eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:301

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);

    // Find dot seperator
    for (i = 0; i< len; i++)
 1006870:	83 c2 01             	add    edx,0x1
 1006873:	39 d6                	cmp    esi,edx
 1006875:	75 f2                	jne    1006869 <fatfs_lfn_create_sfn+0x5d>
 1006877:	e9 a3 00 00 00       	jmp    100691f <fatfs_lfn_create_sfn+0x113>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:311

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
 100687c:	8d 50 01             	lea    edx,[eax+0x1]
 100687f:	8d 48 04             	lea    ecx,[eax+0x4]
 1006882:	39 ca                	cmp    edx,ecx
 1006884:	7d 21                	jge    10068a7 <fatfs_lfn_create_sfn+0x9b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:313
            if (i<len)
                ext[i-(dotPos+1)] = filename[i];
 1006886:	8d 6c 24 1d          	lea    ebp,[esp+0x1d]
 100688a:	29 c5                	sub    ebp,eax
 100688c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:312
    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
            if (i<len)
 1006890:	39 d6                	cmp    esi,edx
 1006892:	7e 08                	jle    100689c <fatfs_lfn_create_sfn+0x90>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:313
                ext[i-(dotPos+1)] = filename[i];
 1006894:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
 1006898:	88 44 15 ff          	mov    BYTE PTR [ebp+edx*1-0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:311 (discriminator 2)

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
 100689c:	83 c2 01             	add    edx,0x1
 100689f:	39 ca                	cmp    edx,ecx
 10068a1:	75 ed                	jne    1006890 <fatfs_lfn_create_sfn+0x84>
 10068a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:321
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
 10068a7:	85 c0                	test   eax,eax
 10068a9:	7e 3b                	jle    10068e6 <fatfs_lfn_create_sfn+0xda>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:291
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
 10068ab:	be 00 00 00 00       	mov    esi,0x0
 10068b0:	b9 00 00 00 00       	mov    ecx,0x0
 10068b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:323

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
 10068b9:	0f b6 14 0b          	movzx  edx,BYTE PTR [ebx+ecx*1]
 10068bd:	80 fa 20             	cmp    dl,0x20
 10068c0:	74 1f                	je     10068e1 <fatfs_lfn_create_sfn+0xd5>
 10068c2:	80 fa 2e             	cmp    dl,0x2e
 10068c5:	74 1a                	je     10068e1 <fatfs_lfn_create_sfn+0xd5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:325
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
 10068c7:	8d 6a 9f             	lea    ebp,[edx-0x61]
 10068ca:	89 e8                	mov    eax,ebp
 10068cc:	3c 19                	cmp    al,0x19
 10068ce:	77 0b                	ja     10068db <fatfs_lfn_create_sfn+0xcf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:326
                sfn_output[pos++] = filename[i] - 'a' + 'A';
 10068d0:	83 ea 20             	sub    edx,0x20
 10068d3:	88 14 37             	mov    BYTE PTR [edi+esi*1],dl
 10068d6:	8d 76 01             	lea    esi,[esi+0x1]
 10068d9:	eb 06                	jmp    10068e1 <fatfs_lfn_create_sfn+0xd5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:328
            else
                sfn_output[pos++] = filename[i];
 10068db:	88 14 37             	mov    BYTE PTR [edi+esi*1],dl
 10068de:	8d 76 01             	lea    esi,[esi+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:332
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
 10068e1:	83 fe 08             	cmp    esi,0x8
 10068e4:	75 07                	jne    10068ed <fatfs_lfn_create_sfn+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:328 (discriminator 1)
        if ( (filename[i]!=' ') && (filename[i]!='.') )
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
                sfn_output[pos++] = filename[i] - 'a' + 'A';
            else
                sfn_output[pos++] = filename[i];
 10068e6:	b8 08 00 00 00       	mov    eax,0x8
 10068eb:	eb 0b                	jmp    10068f8 <fatfs_lfn_create_sfn+0xec>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:321 (discriminator 2)
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
 10068ed:	83 c1 01             	add    ecx,0x1
 10068f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
 10068f4:	7f c3                	jg     10068b9 <fatfs_lfn_create_sfn+0xad>
 10068f6:	eb ee                	jmp    10068e6 <fatfs_lfn_create_sfn+0xda>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:339
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
 10068f8:	0f b6 54 04 15       	movzx  edx,BYTE PTR [esp+eax*1+0x15]
 10068fd:	8d 4a 9f             	lea    ecx,[edx-0x61]
 1006900:	80 f9 19             	cmp    cl,0x19
 1006903:	77 08                	ja     100690d <fatfs_lfn_create_sfn+0x101>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:340
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
 1006905:	83 ea 20             	sub    edx,0x20
 1006908:	88 14 07             	mov    BYTE PTR [edi+eax*1],dl
 100690b:	eb 03                	jmp    1006910 <fatfs_lfn_create_sfn+0x104>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:342
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
 100690d:	88 14 07             	mov    BYTE PTR [edi+eax*1],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:337 (discriminator 2)
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
 1006910:	83 c0 01             	add    eax,0x1
 1006913:	83 f8 0b             	cmp    eax,0xb
 1006916:	75 e0                	jne    10068f8 <fatfs_lfn_create_sfn+0xec>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:345
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
 1006918:	b8 01 00 00 00       	mov    eax,0x1
 100691d:	eb 10                	jmp    100692f <fatfs_lfn_create_sfn+0x123>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:308
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
 100691f:	83 f8 ff             	cmp    eax,0xffffffff
 1006922:	0f 85 54 ff ff ff    	jne    100687c <fatfs_lfn_create_sfn+0x70>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:291
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
 1006928:	89 e8                	mov    eax,ebp
 100692a:	e9 7c ff ff ff       	jmp    10068ab <fatfs_lfn_create_sfn+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:346
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
}
 100692f:	83 c4 2c             	add    esp,0x2c
 1006932:	5b                   	pop    ebx
 1006933:	5e                   	pop    esi
 1006934:	5f                   	pop    edi
 1006935:	5d                   	pop    ebp
 1006936:	c3                   	ret    

01006937 <fatfs_lfn_generate_tail>:
fatfs_lfn_generate_tail():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:381
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
 1006937:	57                   	push   edi
 1006938:	56                   	push   esi
 1006939:	53                   	push   ebx
 100693a:	83 ec 30             	sub    esp,0x30
 100693d:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:386
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
        return 0;
 1006941:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:385
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
 1006946:	81 fb 9f 86 01 00    	cmp    ebx,0x1869f
 100694c:	0f 87 d8 00 00 00    	ja     1006a2a <fatfs_lfn_generate_tail+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:389
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
 1006952:	83 ec 04             	sub    esp,0x4
 1006955:	6a 0c                	push   0xc
 1006957:	6a 00                	push   0x0
 1006959:	8d 44 24 30          	lea    eax,[esp+0x30]
 100695d:	50                   	push   eax
 100695e:	e8 d0 25 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:390
    tail_str[0] = '~';
 1006963:	c6 44 24 34 7e       	mov    BYTE PTR [esp+0x34],0x7e
fatfs_itoa():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:354
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
 1006968:	c7 44 24 23 30 31 32 	mov    DWORD PTR [esp+0x23],0x33323130
 100696f:	33 
 1006970:	c7 44 24 27 34 35 36 	mov    DWORD PTR [esp+0x27],0x37363534
 1006977:	37 
 1006978:	c7 44 24 2b 38 39 41 	mov    DWORD PTR [esp+0x2b],0x42413938
 100697f:	42 
 1006980:	c7 44 24 2f 43 44 45 	mov    DWORD PTR [esp+0x2f],0x46454443
 1006987:	46 
 1006988:	c6 44 24 33 00       	mov    BYTE PTR [esp+0x33],0x0
 100698d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:357

    // Build string backwards
    cp = outbuf;
 1006990:	8d 74 24 07          	lea    esi,[esp+0x7]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:360
    do
    {
        *cp++ = digits[(int)(num % 10)];
 1006994:	bf cd cc cc cc       	mov    edi,0xcccccccd
 1006999:	eb 02                	jmp    100699d <fatfs_lfn_generate_tail+0x66>
 100699b:	89 ce                	mov    esi,ecx
 100699d:	8d 4e 01             	lea    ecx,[esi+0x1]
 10069a0:	89 d8                	mov    eax,ebx
 10069a2:	f7 e7                	mul    edi
 10069a4:	c1 ea 03             	shr    edx,0x3
 10069a7:	8d 04 92             	lea    eax,[edx+edx*4]
 10069aa:	01 c0                	add    eax,eax
 10069ac:	29 c3                	sub    ebx,eax
 10069ae:	0f b6 44 1c 13       	movzx  eax,BYTE PTR [esp+ebx*1+0x13]
 10069b3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:362
    }
    while ((num /= 10) > 0);
 10069b6:	89 d3                	mov    ebx,edx
 10069b8:	85 d2                	test   edx,edx
 10069ba:	75 df                	jne    100699b <fatfs_lfn_generate_tail+0x64>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:364

    *cp-- = 0;
 10069bc:	c6 46 01 00          	mov    BYTE PTR [esi+0x1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:367

    // Copy in forwards
    while (cp >= outbuf)
 10069c0:	8d 44 24 07          	lea    eax,[esp+0x7]
 10069c4:	39 c6                	cmp    esi,eax
 10069c6:	72 20                	jb     10069e8 <fatfs_lfn_generate_tail+0xb1>
 10069c8:	89 f0                	mov    eax,esi
 10069ca:	8d 54 24 25          	lea    edx,[esp+0x25]
 10069ce:	8d 5c 24 06          	lea    ebx,[esp+0x6]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:368
        *s++ = *cp--;
 10069d2:	83 c2 01             	add    edx,0x1
 10069d5:	83 e8 01             	sub    eax,0x1
 10069d8:	0f b6 48 01          	movzx  ecx,BYTE PTR [eax+0x1]
 10069dc:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:367
    while ((num /= 10) > 0);

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
 10069df:	39 d8                	cmp    eax,ebx
 10069e1:	75 ef                	jne    10069d2 <fatfs_lfn_generate_tail+0x9b>
 10069e3:	8d 46 1f             	lea    eax,[esi+0x1f]
 10069e6:	eb 04                	jmp    10069ec <fatfs_lfn_generate_tail+0xb5>
 10069e8:	8d 44 24 25          	lea    eax,[esp+0x25]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:370
        *s++ = *cp--;

    *s = 0;
 10069ec:	c6 00 00             	mov    BYTE PTR [eax],0x0
fatfs_lfn_generate_tail():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:394
    memset(tail_str, 0x00, sizeof(tail_str));
    tail_str[0] = '~';
    fatfs_itoa(tailNum, tail_str+1);

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
 10069ef:	83 ec 04             	sub    esp,0x4
 10069f2:	6a 0b                	push   0xb
 10069f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 10069f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 10069fc:	e8 7f 2d 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:397

    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
 1006a01:	83 c4 04             	add    esp,0x4
 1006a04:	8d 5c 24 30          	lea    ebx,[esp+0x30]
 1006a08:	53                   	push   ebx
 1006a09:	e8 fe 33 00 00       	call   1009e0c <strlen>
 1006a0e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:398
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
 1006a11:	50                   	push   eax
 1006a12:	53                   	push   ebx
 1006a13:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
 1006a17:	29 c7                	sub    edi,eax
 1006a19:	8d 47 08             	lea    eax,[edi+0x8]
 1006a1c:	50                   	push   eax
 1006a1d:	e8 5e 2d 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:400

    return 1;
 1006a22:	83 c4 10             	add    esp,0x10
 1006a25:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:401
}
 1006a2a:	83 c4 30             	add    esp,0x30
 1006a2d:	5b                   	pop    ebx
 1006a2e:	5e                   	pop    esi
 1006a2f:	5f                   	pop    edi
 1006a30:	c3                   	ret    

01006a31 <fatfs_convert_from_fat_time>:
fatfs_convert_from_fat_time():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:409
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_time: Convert FAT time to h/m/s
//-----------------------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds)
{
 1006a31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:410
    *hours = (fat_time >> FAT_TIME_HOURS_SHIFT) & FAT_TIME_HOURS_MASK;
 1006a35:	89 c2                	mov    edx,eax
 1006a37:	66 c1 ea 0b          	shr    dx,0xb
 1006a3b:	0f b7 d2             	movzx  edx,dx
 1006a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
 1006a42:	89 11                	mov    DWORD PTR [ecx],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:411
    *minutes = (fat_time >> FAT_TIME_MINUTES_SHIFT) & FAT_TIME_MINUTES_MASK;
 1006a44:	89 c2                	mov    edx,eax
 1006a46:	66 c1 ea 05          	shr    dx,0x5
 1006a4a:	83 e2 3f             	and    edx,0x3f
 1006a4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
 1006a51:	89 11                	mov    DWORD PTR [ecx],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:413
    *seconds = (fat_time >> FAT_TIME_SECONDS_SHIFT) & FAT_TIME_SECONDS_MASK;
    *seconds = *seconds * FAT_TIME_SECONDS_SCALE;
 1006a53:	83 e0 1f             	and    eax,0x1f
 1006a56:	01 c0                	add    eax,eax
 1006a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 1006a5c:	89 02                	mov    DWORD PTR [edx],eax
 1006a5e:	c3                   	ret    

01006a5f <fatfs_convert_from_fat_date>:
fatfs_convert_from_fat_date():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:419
}
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_date: Convert FAT date to d/m/y
//-----------------------------------------------------------------------------
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year)
{
 1006a5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:420
    *day = (fat_date >> FAT_DATE_DAY_SHIFT) & FAT_DATE_DAY_MASK;
 1006a63:	89 c1                	mov    ecx,eax
 1006a65:	83 e1 1f             	and    ecx,0x1f
 1006a68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 1006a6c:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:421
    *month = (fat_date >> FAT_DATE_MONTH_SHIFT) & FAT_DATE_MONTH_MASK;
 1006a6e:	89 c2                	mov    edx,eax
 1006a70:	66 c1 ea 05          	shr    dx,0x5
 1006a74:	83 e2 0f             	and    edx,0xf
 1006a77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
 1006a7b:	89 11                	mov    DWORD PTR [ecx],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:423
    *year = (fat_date >> FAT_DATE_YEAR_SHIFT) & FAT_DATE_YEAR_MASK;
    *year = *year + FAT_DATE_YEAR_OFFSET;
 1006a7d:	66 c1 e8 09          	shr    ax,0x9
 1006a81:	0f b7 c0             	movzx  eax,ax
 1006a84:	05 bc 07 00 00       	add    eax,0x7bc
 1006a89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 1006a8d:	89 02                	mov    DWORD PTR [edx],eax
 1006a8f:	c3                   	ret    

01006a90 <fatfs_convert_to_fat_time>:
fatfs_convert_to_fat_time():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:429
}
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_time: Convert h/m/s to FAT time
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds)
{
 1006a90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:439

    fat_time = (hours & FAT_TIME_HOURS_MASK) << FAT_TIME_HOURS_SHIFT;
    fat_time|= (minutes & FAT_TIME_MINUTES_MASK) << FAT_TIME_MINUTES_SHIFT;
    fat_time|= (seconds & FAT_TIME_SECONDS_MASK) << FAT_TIME_SECONDS_SHIFT;

    return fat_time;
 1006a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1006a98:	83 e0 3f             	and    eax,0x3f
 1006a9b:	c1 e0 05             	shl    eax,0x5
 1006a9e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
 1006aa2:	c1 e1 0b             	shl    ecx,0xb
 1006aa5:	09 c8                	or     eax,ecx
 1006aa7:	89 d1                	mov    ecx,edx
 1006aa9:	c1 e9 1f             	shr    ecx,0x1f
 1006aac:	01 ca                	add    edx,ecx
 1006aae:	d1 fa                	sar    edx,1
 1006ab0:	83 e2 1f             	and    edx,0x1f
 1006ab3:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:440
}
 1006ab5:	c3                   	ret    

01006ab6 <fatfs_convert_to_fat_date>:
fatfs_convert_to_fat_date():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:445
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_date: Convert d/m/y to FAT date
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_date(int day, int month, int year)
{
 1006ab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:450
    uint16 fat_date = 0;

    // FAT dates are relative to 1980
    if (year >= FAT_DATE_YEAR_OFFSET)
        year -= FAT_DATE_YEAR_OFFSET;
 1006aba:	8d 82 44 f8 ff ff    	lea    eax,[edx-0x7bc]
 1006ac0:	81 fa bc 07 00 00    	cmp    edx,0x7bc
 1006ac6:	0f 4d d0             	cmovge edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:454

    fat_date = (day & FAT_DATE_DAY_MASK) << FAT_DATE_DAY_SHIFT;
    fat_date|= (month & FAT_DATE_MONTH_MASK) << FAT_DATE_MONTH_SHIFT;
    fat_date|= (year & FAT_DATE_YEAR_MASK) << FAT_DATE_YEAR_SHIFT;
 1006ac9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1006acd:	83 e0 0f             	and    eax,0xf
 1006ad0:	c1 e0 05             	shl    eax,0x5
 1006ad3:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
 1006ad8:	83 e1 1f             	and    ecx,0x1f
 1006adb:	09 c8                	or     eax,ecx
 1006add:	c1 e2 09             	shl    edx,0x9
 1006ae0:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:457

    return fat_date;
}
 1006ae2:	c3                   	ret    
 1006ae3:	90                   	nop

01006ae4 <FileString_StrCmpNoCase>:
FileString_StrCmpNoCase():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:183
}
//-----------------------------------------------------------------------------
// FileString_StrCmpNoCase: Compare two strings case with case sensitivity
//-----------------------------------------------------------------------------
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
 1006ae4:	55                   	push   ebp
 1006ae5:	57                   	push   edi
 1006ae6:	56                   	push   esi
 1006ae7:	53                   	push   ebx
 1006ae8:	83 ec 0c             	sub    esp,0xc
 1006aeb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 1006aef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:187
    int diff;
    char a,b;

    while (n--)
 1006af3:	85 c9                	test   ecx,ecx
 1006af5:	74 54                	je     1006b4b <FileString_StrCmpNoCase+0x67>
 1006af7:	89 d7                	mov    edi,edx
 1006af9:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:189
    {
        a = *s1;
 1006afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1006b02:	0f b6 1c 30          	movzx  ebx,BYTE PTR [eax+esi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:190
        b = *s2;
 1006b06:	0f b6 0c 37          	movzx  ecx,BYTE PTR [edi+esi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:193

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
 1006b0a:	8d 53 bf             	lea    edx,[ebx-0x41]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:194
            a+= 32;
 1006b0d:	8d 43 20             	lea    eax,[ebx+0x20]
 1006b10:	80 fa 19             	cmp    dl,0x19
 1006b13:	0f 47 c3             	cmova  eax,ebx
 1006b16:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:195
        if ((b>='A') && (b<='Z'))
 1006b1a:	8d 69 bf             	lea    ebp,[ecx-0x41]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:196
            b+= 32;
 1006b1d:	8d 51 20             	lea    edx,[ecx+0x20]
 1006b20:	89 e8                	mov    eax,ebp
 1006b22:	3c 19                	cmp    al,0x19
 1006b24:	0f 47 d1             	cmova  edx,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:198

        diff = a - b;
 1006b27:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
 1006b2c:	0f be d2             	movsx  edx,dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:201

        // If different
        if (diff)
 1006b2f:	29 d0                	sub    eax,edx
 1006b31:	75 24                	jne    1006b57 <FileString_StrCmpNoCase+0x73>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:205 (discriminator 1)
            return diff;

        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
 1006b33:	84 c9                	test   cl,cl
 1006b35:	74 1b                	je     1006b52 <FileString_StrCmpNoCase+0x6e>
 1006b37:	84 db                	test   bl,bl
 1006b39:	74 17                	je     1006b52 <FileString_StrCmpNoCase+0x6e>
 1006b3b:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:187
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
 1006b3e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
 1006b42:	75 ba                	jne    1006afe <FileString_StrCmpNoCase+0x1a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:211
            break;

        s1++;
        s2++;
    }
    return 0;
 1006b44:	b8 00 00 00 00       	mov    eax,0x0
 1006b49:	eb 0c                	jmp    1006b57 <FileString_StrCmpNoCase+0x73>
 1006b4b:	b8 00 00 00 00       	mov    eax,0x0
 1006b50:	eb 05                	jmp    1006b57 <FileString_StrCmpNoCase+0x73>
 1006b52:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:212
}
 1006b57:	83 c4 0c             	add    esp,0xc
 1006b5a:	5b                   	pop    ebx
 1006b5b:	5e                   	pop    esi
 1006b5c:	5f                   	pop    edi
 1006b5d:	5d                   	pop    ebp
 1006b5e:	c3                   	ret    

01006b5f <FileString_GetExtension>:
FileString_GetExtension():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:218
//-----------------------------------------------------------------------------
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
 1006b5f:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:223
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
 1006b60:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1006b63:	84 d2                	test   dl,dl
 1006b65:	74 1d                	je     1006b84 <FileString_GetExtension+0x25>
 1006b67:	b9 00 00 00 00       	mov    ecx,0x0
 1006b6c:	bb ff ff ff ff       	mov    ebx,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:225
    {
        if (*strSrc=='.')
 1006b71:	80 fa 2e             	cmp    dl,0x2e
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:226
            dotPos = (int)(strSrc-str);
 1006b74:	0f 44 d9             	cmove  ebx,ecx
 1006b77:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:223
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
 1006b7a:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
 1006b7e:	84 d2                	test   dl,dl
 1006b80:	75 ef                	jne    1006b71 <FileString_GetExtension+0x12>
 1006b82:	eb 05                	jmp    1006b89 <FileString_GetExtension+0x2a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:219
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
    int dotPos = -1;
 1006b84:	bb ff ff ff ff       	mov    ebx,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:232

        strSrc++;
    }

    return dotPos;
}
 1006b89:	89 d8                	mov    eax,ebx
 1006b8b:	5b                   	pop    ebx
 1006b8c:	c3                   	ret    

01006b8d <fatfs_total_path_levels>:
fatfs_total_path_levels():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:45
//        c:\folder\file.zip
//        /dev/etc/samba.conf
// Returns: -1 = Error, 0 or more = Ok
//-----------------------------------------------------------------------------
int fatfs_total_path_levels(char *path)
{
 1006b8d:	56                   	push   esi
 1006b8e:	53                   	push   ebx
 1006b8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:49
    int levels = 0;
    char expectedchar;

    if (!path)
 1006b93:	85 c0                	test   eax,eax
 1006b95:	74 5e                	je     1006bf5 <fatfs_total_path_levels+0x68>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:55
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
 1006b97:	80 38 2f             	cmp    BYTE PTR [eax],0x2f
 1006b9a:	75 16                	jne    1006bb2 <fatfs_total_path_levels+0x25>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:58
    {
        expectedchar = '/';
        path++;
 1006b9c:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:57
    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
 1006b9f:	b9 2f 00 00 00       	mov    ecx,0x2f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:69
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
 1006ba4:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1006ba7:	bb 00 00 00 00       	mov    ebx,0x0
 1006bac:	84 d2                	test   dl,dl
 1006bae:	75 3a                	jne    1006bea <fatfs_total_path_levels+0x5d>
 1006bb0:	eb 3e                	jmp    1006bf0 <fatfs_total_path_levels+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:60
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
 1006bb2:	80 78 01 3a          	cmp    BYTE PTR [eax+0x1],0x3a
 1006bb6:	74 06                	je     1006bbe <fatfs_total_path_levels+0x31>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:60 (discriminator 1)
 1006bb8:	80 78 02 5c          	cmp    BYTE PTR [eax+0x2],0x5c
 1006bbc:	75 3e                	jne    1006bfc <fatfs_total_path_levels+0x6f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:63
    {
        expectedchar = '\\';
        path += 3;
 1006bbe:	83 c0 03             	add    eax,0x3
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:62
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
    {
        expectedchar = '\\';
 1006bc1:	b9 5c 00 00 00       	mov    ecx,0x5c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:63
        path += 3;
 1006bc6:	eb dc                	jmp    1006ba4 <fatfs_total_path_levels+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
 1006bc8:	38 d1                	cmp    cl,dl
 1006bca:	75 10                	jne    1006bdc <fatfs_total_path_levels+0x4f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:75 (discriminator 1)
 1006bcc:	8d 70 01             	lea    esi,[eax+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:80 (discriminator 1)
            path++;
        }

        // Increase number of subdirs founds
        levels++;
 1006bcf:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:69 (discriminator 1)
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
 1006bd2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
 1006bd6:	84 d2                	test   dl,dl
 1006bd8:	75 0e                	jne    1006be8 <fatfs_total_path_levels+0x5b>
 1006bda:	eb 14                	jmp    1006bf0 <fatfs_total_path_levels+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:76
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
            path++;
 1006bdc:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:72

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
 1006bdf:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1006be2:	84 d2                	test   dl,dl
 1006be4:	75 e2                	jne    1006bc8 <fatfs_total_path_levels+0x3b>
 1006be6:	eb 1b                	jmp    1006c03 <fatfs_total_path_levels+0x76>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:57
    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
 1006be8:	89 f0                	mov    eax,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
 1006bea:	38 d1                	cmp    cl,dl
 1006bec:	75 ee                	jne    1006bdc <fatfs_total_path_levels+0x4f>
 1006bee:	eb 18                	jmp    1006c08 <fatfs_total_path_levels+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:84
        // Increase number of subdirs founds
        levels++;
    }

    // Subtract the file itself
    return levels-1;
 1006bf0:	8d 43 ff             	lea    eax,[ebx-0x1]
 1006bf3:	eb 23                	jmp    1006c18 <fatfs_total_path_levels+0x8b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:50
{
    int levels = 0;
    char expectedchar;

    if (!path)
        return -1;
 1006bf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1006bfa:	eb 1c                	jmp    1006c18 <fatfs_total_path_levels+0x8b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:66
    {
        expectedchar = '\\';
        path += 3;
    }
    else
        return -1;
 1006bfc:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1006c01:	eb 15                	jmp    1006c18 <fatfs_total_path_levels+0x8b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:80
            if (*path == expectedchar) { path++; break; }
            path++;
        }

        // Increase number of subdirs founds
        levels++;
 1006c03:	83 c3 01             	add    ebx,0x1
 1006c06:	eb e8                	jmp    1006bf0 <fatfs_total_path_levels+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
 1006c08:	8d 70 01             	lea    esi,[eax+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:80
            path++;
        }

        // Increase number of subdirs founds
        levels++;
 1006c0b:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:69
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
 1006c0e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
 1006c12:	84 d2                	test   dl,dl
 1006c14:	75 d2                	jne    1006be8 <fatfs_total_path_levels+0x5b>
 1006c16:	eb d8                	jmp    1006bf0 <fatfs_total_path_levels+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:85
        levels++;
    }

    // Subtract the file itself
    return levels-1;
}
 1006c18:	5b                   	pop    ebx
 1006c19:	5e                   	pop    esi
 1006c1a:	c3                   	ret    

01006c1b <fatfs_get_substring>:
fatfs_get_substring():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:93
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
 1006c1b:	55                   	push   ebp
 1006c1c:	57                   	push   edi
 1006c1d:	56                   	push   esi
 1006c1e:	53                   	push   ebx
 1006c1f:	83 ec 1c             	sub    esp,0x1c
 1006c22:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
 1006c26:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
 1006c2a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:100
    int pathlen=0;
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
 1006c2e:	85 db                	test   ebx,ebx
 1006c30:	0f 84 b4 00 00 00    	je     1006cea <fatfs_get_substring+0xcf>
 1006c36:	85 ed                	test   ebp,ebp
 1006c38:	0f 8e ac 00 00 00    	jle    1006cea <fatfs_get_substring+0xcf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:106
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
 1006c3e:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
 1006c41:	75 0a                	jne    1006c4d <fatfs_get_substring+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:109
    {
        expectedchar = '/';
        path++;
 1006c43:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:108
    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
 1006c46:	be 2f 00 00 00       	mov    esi,0x2f
 1006c4b:	eb 18                	jmp    1006c65 <fatfs_get_substring+0x4a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:111
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
 1006c4d:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
 1006c51:	74 0a                	je     1006c5d <fatfs_get_substring+0x42>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:111 (discriminator 1)
 1006c53:	80 7b 02 5c          	cmp    BYTE PTR [ebx+0x2],0x5c
 1006c57:	0f 85 94 00 00 00    	jne    1006cf1 <fatfs_get_substring+0xd6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:114
    {
        expectedchar = '\\';
        path += 3;
 1006c5d:	83 c3 03             	add    ebx,0x3
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:113
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
    {
        expectedchar = '\\';
 1006c60:	be 5c 00 00 00       	mov    esi,0x5c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:120
    }
    else
        return -1;

    // Get string length of path
    pathlen = (int)strlen (path);
 1006c65:	83 ec 0c             	sub    esp,0xc
 1006c68:	53                   	push   ebx
 1006c69:	e8 9e 31 00 00       	call   1009e0c <strlen>
 1006c6e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:123

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
 1006c71:	85 c0                	test   eax,eax
 1006c73:	7e 54                	jle    1006cc9 <fatfs_get_substring+0xae>
 1006c75:	01 d8                	add    eax,ebx
 1006c77:	c7 44 24 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
 1006c7e:	00 
 1006c7f:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:129
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
 1006c84:	8d 4d ff             	lea    ecx,[ebp-0x1]
 1006c87:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
 1006c8b:	bd 00 00 00 00       	mov    ebp,0x0
 1006c90:	89 c1                	mov    ecx,eax
 1006c92:	89 f0                	mov    eax,esi
 1006c94:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
 1006c98:	89 ce                	mov    esi,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:126

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
 1006c9a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
 1006c9d:	38 c8                	cmp    al,cl
 1006c9f:	75 05                	jne    1006ca6 <fatfs_get_substring+0x8b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:126 (discriminator 1)
 1006ca1:	83 c2 01             	add    edx,0x1
 1006ca4:	eb 16                	jmp    1006cbc <fatfs_get_substring+0xa1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:129

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
 1006ca6:	39 54 24 34          	cmp    DWORD PTR [esp+0x34],edx
 1006caa:	75 10                	jne    1006cbc <fatfs_get_substring+0xa1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:129 (discriminator 2)
 1006cac:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
 1006cb0:	7e 0a                	jle    1006cbc <fatfs_get_substring+0xa1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:130
            output[copypnt++] = *path;
 1006cb2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
 1006cb6:	88 0c 2f             	mov    BYTE PTR [edi+ebp*1],cl
 1006cb9:	8d 6d 01             	lea    ebp,[ebp+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:133 (discriminator 2)

        // Increment through path string
        path++;
 1006cbc:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:123 (discriminator 2)

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
 1006cbf:	39 f3                	cmp    ebx,esi
 1006cc1:	75 d7                	jne    1006c9a <fatfs_get_substring+0x7f>
 1006cc3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
 1006cc7:	eb 08                	jmp    1006cd1 <fatfs_get_substring+0xb6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:97
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
    int i;
    int pathlen=0;
    int levels=0;
    int copypnt=0;
 1006cc9:	c7 44 24 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
 1006cd0:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:137
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
 1006cd1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 1006cd5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
 1006cd9:	c6 04 38 00          	mov    BYTE PTR [eax+edi*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:140

    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
 1006cdd:	80 38 00             	cmp    BYTE PTR [eax],0x0
 1006ce0:	0f 94 c0             	sete   al
 1006ce3:	0f b6 c0             	movzx  eax,al
 1006ce6:	f7 d8                	neg    eax
 1006ce8:	eb 0c                	jmp    1006cf6 <fatfs_get_substring+0xdb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:101
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
        return -1;
 1006cea:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1006cef:	eb 05                	jmp    1006cf6 <fatfs_get_substring+0xdb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:117
    {
        expectedchar = '\\';
        path += 3;
    }
    else
        return -1;
 1006cf1:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:144
    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
        return 0;    // OK
    else
        return -1;    // Error
}
 1006cf6:	83 c4 1c             	add    esp,0x1c
 1006cf9:	5b                   	pop    ebx
 1006cfa:	5e                   	pop    esi
 1006cfb:	5f                   	pop    edi
 1006cfc:	5d                   	pop    ebp
 1006cfd:	c3                   	ret    

01006cfe <fatfs_split_path>:
fatfs_split_path():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:152
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
 1006cfe:	55                   	push   ebp
 1006cff:	57                   	push   edi
 1006d00:	56                   	push   esi
 1006d01:	53                   	push   ebx
 1006d02:	83 ec 0c             	sub    esp,0xc
 1006d05:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
 1006d09:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:156
    int strindex;

    // Count the levels to the filepath
    int levels = fatfs_total_path_levels(full_path);
 1006d0d:	56                   	push   esi
 1006d0e:	e8 7a fe ff ff       	call   1006b8d <fatfs_total_path_levels>
 1006d13:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:157
    if (levels == -1)
 1006d16:	83 f8 ff             	cmp    eax,0xffffffff
 1006d19:	74 5e                	je     1006d79 <fatfs_split_path+0x7b>
 1006d1b:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:161
        return -1;

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
 1006d1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 1006d21:	55                   	push   ebp
 1006d22:	50                   	push   eax
 1006d23:	56                   	push   esi
 1006d24:	e8 f2 fe ff ff       	call   1006c1b <fatfs_get_substring>
 1006d29:	89 c7                	mov    edi,eax
 1006d2b:	83 c4 10             	add    esp,0x10
 1006d2e:	85 c0                	test   eax,eax
 1006d30:	75 4e                	jne    1006d80 <fatfs_split_path+0x82>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:165
        return -1;

    // If root file
    if (levels == 0)
 1006d32:	85 db                	test   ebx,ebx
 1006d34:	75 09                	jne    1006d3f <fatfs_split_path+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:166
        path[0] = '\0';
 1006d36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
 1006d3a:	c6 00 00             	mov    BYTE PTR [eax],0x0
 1006d3d:	eb 46                	jmp    1006d85 <fatfs_split_path+0x87>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:169
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
 1006d3f:	83 ec 0c             	sub    esp,0xc
 1006d42:	56                   	push   esi
 1006d43:	e8 c4 30 00 00       	call   1009e0c <strlen>
 1006d48:	89 c3                	mov    ebx,eax
 1006d4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
 1006d4d:	e8 ba 30 00 00       	call   1009e0c <strlen>
 1006d52:	83 c4 0c             	add    esp,0xc
 1006d55:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:173
        if (strindex > max_path)
            strindex = max_path;

        memcpy(path, full_path, strindex);
 1006d57:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
 1006d5b:	0f 4f 5c 24 2c       	cmovg  ebx,DWORD PTR [esp+0x2c]
 1006d60:	53                   	push   ebx
 1006d61:	56                   	push   esi
 1006d62:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 1006d66:	e8 15 2a 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:174
        path[strindex-1] = '\0';
 1006d6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 1006d6f:	c6 44 18 ff 00       	mov    BYTE PTR [eax+ebx*1-0x1],0x0
 1006d74:	83 c4 10             	add    esp,0x10
 1006d77:	eb 0c                	jmp    1006d85 <fatfs_split_path+0x87>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:158
    int strindex;

    // Count the levels to the filepath
    int levels = fatfs_total_path_levels(full_path);
    if (levels == -1)
        return -1;
 1006d79:	bf ff ff ff ff       	mov    edi,0xffffffff
 1006d7e:	eb 05                	jmp    1006d85 <fatfs_split_path+0x87>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:162

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
        return -1;
 1006d80:	bf ff ff ff ff       	mov    edi,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:178
        memcpy(path, full_path, strindex);
        path[strindex-1] = '\0';
    }

    return 0;
}
 1006d85:	89 f8                	mov    eax,edi
 1006d87:	83 c4 0c             	add    esp,0xc
 1006d8a:	5b                   	pop    ebx
 1006d8b:	5e                   	pop    esi
 1006d8c:	5f                   	pop    edi
 1006d8d:	5d                   	pop    ebp
 1006d8e:	c3                   	ret    

01006d8f <fatfs_compare_names>:
fatfs_compare_names():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:261
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
 1006d8f:	55                   	push   ebp
 1006d90:	57                   	push   edi
 1006d91:	56                   	push   esi
 1006d92:	53                   	push   ebx
 1006d93:	83 ec 1c             	sub    esp,0x1c
 1006d96:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
 1006d9a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:268
    char *ext2 = NULL;
    int ext1Pos, ext2Pos;
    int file1Len, file2Len;

    // Get both files extension
    ext1Pos = FileString_GetExtension(strA);
 1006d9e:	89 f8                	mov    eax,edi
 1006da0:	e8 ba fd ff ff       	call   1006b5f <FileString_GetExtension>
 1006da5:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:269
    ext2Pos = FileString_GetExtension(strB);
 1006da7:	89 e8                	mov    eax,ebp
 1006da9:	e8 b1 fd ff ff       	call   1006b5f <FileString_GetExtension>
 1006dae:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:274

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
 1006db0:	83 fb ff             	cmp    ebx,0xffffffff
 1006db3:	75 0e                	jne    1006dc3 <fatfs_compare_names+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:275
        return 0;
 1006db5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:274
    ext2Pos = FileString_GetExtension(strB);

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
 1006dba:	83 fe ff             	cmp    esi,0xffffffff
 1006dbd:	0f 85 22 01 00 00    	jne    1006ee5 <fatfs_compare_names+0x156>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:276
        return 0;
    if ((ext2Pos==-1) && (ext1Pos!=-1))
 1006dc3:	83 fe ff             	cmp    esi,0xffffffff
 1006dc6:	75 0e                	jne    1006dd6 <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:277
        return 0;
 1006dc8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:276
    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
        return 0;
    if ((ext2Pos==-1) && (ext1Pos!=-1))
 1006dcd:	83 fb ff             	cmp    ebx,0xffffffff
 1006dd0:	0f 85 0f 01 00 00    	jne    1006ee5 <fatfs_compare_names+0x156>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:280
        return 0;

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
 1006dd6:	83 fb ff             	cmp    ebx,0xffffffff
 1006dd9:	74 5e                	je     1006e39 <fatfs_compare_names+0xaa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:283
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
 1006ddb:	8d 44 1f 01          	lea    eax,[edi+ebx*1+0x1]
 1006ddf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:284
        ext2 = strB+ext2Pos+1;
 1006de3:	8d 4c 35 01          	lea    ecx,[ebp+esi*1+0x1]
 1006de7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:287

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
 1006deb:	83 ec 0c             	sub    esp,0xc
 1006dee:	50                   	push   eax
 1006def:	e8 18 30 00 00       	call   1009e0c <strlen>
 1006df4:	83 c4 04             	add    esp,0x4
 1006df7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
 1006dfb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1006dff:	e8 08 30 00 00       	call   1009e0c <strlen>
 1006e04:	83 c4 10             	add    esp,0x10
 1006e07:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:288
            return 0;
 1006e09:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:287
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
        ext2 = strB+ext2Pos+1;

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
 1006e0e:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
 1006e12:	0f 85 cd 00 00 00    	jne    1006ee5 <fatfs_compare_names+0x156>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:291
            return 0;

        // If they dont match
        if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
 1006e18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
 1006e1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
 1006e20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1006e24:	e8 bb fc ff ff       	call   1006ae4 <FileString_StrCmpNoCase>
 1006e29:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:292
            return 0;
 1006e2b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:291
        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
            return 0;

        // If they dont match
        if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
 1006e30:	85 d2                	test   edx,edx
 1006e32:	74 1d                	je     1006e51 <fatfs_compare_names+0xc2>
 1006e34:	e9 ac 00 00 00       	jmp    1006ee5 <fatfs_compare_names+0x156>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:302
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
 1006e39:	83 ec 0c             	sub    esp,0xc
 1006e3c:	57                   	push   edi
 1006e3d:	e8 ca 2f 00 00       	call   1009e0c <strlen>
 1006e42:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:303
        file2Len = (int)strlen(strB);
 1006e44:	89 2c 24             	mov    DWORD PTR [esp],ebp
 1006e47:	e8 c0 2f 00 00       	call   1009e0c <strlen>
 1006e4c:	83 c4 10             	add    esp,0x10
 1006e4f:	89 c6                	mov    esi,eax
FileString_TrimLength():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:240
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
 1006e51:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
 1006e55:	8d 43 ff             	lea    eax,[ebx-0x1]
 1006e58:	8d 0c 07             	lea    ecx,[edi+eax*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
 1006e5b:	85 db                	test   ebx,ebx
 1006e5d:	74 6d                	je     1006ecc <fatfs_compare_names+0x13d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:245
    {
        if (*strSrc == ' ')
 1006e5f:	80 39 20             	cmp    BYTE PTR [ecx],0x20
 1006e62:	75 74                	jne    1006ed8 <fatfs_compare_names+0x149>
 1006e64:	ba 01 00 00 00       	mov    edx,0x1
 1006e69:	29 fa                	sub    edx,edi
 1006e6b:	29 da                	sub    edx,ebx
 1006e6d:	01 ca                	add    edx,ecx
 1006e6f:	eb 09                	jmp    1006e7a <fatfs_compare_names+0xeb>
 1006e71:	83 e8 01             	sub    eax,0x1
 1006e74:	80 3c 07 20          	cmp    BYTE PTR [edi+eax*1],0x20
 1006e78:	75 06                	jne    1006e80 <fatfs_compare_names+0xf1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:246
            length = (int)(strSrc - str);
 1006e7a:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
 1006e7c:	39 d0                	cmp    eax,edx
 1006e7e:	75 f1                	jne    1006e71 <fatfs_compare_names+0xe2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:240
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
 1006e80:	8d 4c 35 ff          	lea    ecx,[ebp+esi*1-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
 1006e84:	85 f6                	test   esi,esi
 1006e86:	74 26                	je     1006eae <fatfs_compare_names+0x11f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:245
    {
        if (*strSrc == ' ')
 1006e88:	80 39 20             	cmp    BYTE PTR [ecx],0x20
 1006e8b:	75 21                	jne    1006eae <fatfs_compare_names+0x11f>
 1006e8d:	89 c8                	mov    eax,ecx
 1006e8f:	29 e8                	sub    eax,ebp
 1006e91:	ba 01 00 00 00       	mov    edx,0x1
 1006e96:	29 ea                	sub    edx,ebp
 1006e98:	29 f2                	sub    edx,esi
 1006e9a:	01 ca                	add    edx,ecx
 1006e9c:	eb 0a                	jmp    1006ea8 <fatfs_compare_names+0x119>
 1006e9e:	83 e8 01             	sub    eax,0x1
 1006ea1:	80 7c 05 00 20       	cmp    BYTE PTR [ebp+eax*1+0x0],0x20
 1006ea6:	75 06                	jne    1006eae <fatfs_compare_names+0x11f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:246
            length = (int)(strSrc - str);
 1006ea8:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
 1006eaa:	39 d0                	cmp    eax,edx
 1006eac:	75 f0                	jne    1006e9e <fatfs_compare_names+0x10f>
fatfs_compare_names():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:312
    file1Len = FileString_TrimLength(strA, file1Len);
    file2Len = FileString_TrimLength(strB, file2Len);

    // Check the file lengths match
    if (file1Len!=file2Len)
        return 0;
 1006eae:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:311
    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
    file2Len = FileString_TrimLength(strB, file2Len);

    // Check the file lengths match
    if (file1Len!=file2Len)
 1006eb3:	39 de                	cmp    esi,ebx
 1006eb5:	75 2e                	jne    1006ee5 <fatfs_compare_names+0x156>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:315
        return 0;

    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
 1006eb7:	89 d9                	mov    ecx,ebx
 1006eb9:	89 ea                	mov    edx,ebp
 1006ebb:	89 f8                	mov    eax,edi
 1006ebd:	e8 22 fc ff ff       	call   1006ae4 <FileString_StrCmpNoCase>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:275

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
        return 0;
 1006ec2:	85 c0                	test   eax,eax
 1006ec4:	0f 94 c0             	sete   al
 1006ec7:	0f b6 c0             	movzx  eax,al
 1006eca:	eb 19                	jmp    1006ee5 <fatfs_compare_names+0x156>
FileString_TrimLength():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:240
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
 1006ecc:	8d 4c 35 ff          	lea    ecx,[ebp+esi*1-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
 1006ed0:	85 f6                	test   esi,esi
 1006ed2:	75 b4                	jne    1006e88 <fatfs_compare_names+0xf9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:239
// FileString_TrimLength: Get length of string excluding trailing spaces
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
 1006ed4:	89 f3                	mov    ebx,esi
 1006ed6:	eb df                	jmp    1006eb7 <fatfs_compare_names+0x128>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:240
    char *strSrc = str+strLen-1;
 1006ed8:	8d 4c 35 ff          	lea    ecx,[ebp+esi*1-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
 1006edc:	85 f6                	test   esi,esi
 1006ede:	75 a8                	jne    1006e88 <fatfs_compare_names+0xf9>
fatfs_compare_names():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:312
    file1Len = FileString_TrimLength(strA, file1Len);
    file2Len = FileString_TrimLength(strB, file2Len);

    // Check the file lengths match
    if (file1Len!=file2Len)
        return 0;
 1006ee0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:319
    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
        return 0;
    else
        return 1;
}
 1006ee5:	83 c4 1c             	add    esp,0x1c
 1006ee8:	5b                   	pop    ebx
 1006ee9:	5e                   	pop    esi
 1006eea:	5f                   	pop    edi
 1006eeb:	5d                   	pop    ebp
 1006eec:	c3                   	ret    

01006eed <fatfs_string_ends_with_slash>:
fatfs_string_ends_with_slash():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:324
//-----------------------------------------------------------------------------
// fatfs_string_ends_with_slash: Does the string end with a slash (\ or /)
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
 1006eed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:325
    if (path)
 1006ef1:	85 c0                	test   eax,eax
 1006ef3:	74 27                	je     1006f1c <fatfs_string_ends_with_slash+0x2f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:327
    {
        while (*path)
 1006ef5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1006ef8:	84 d2                	test   dl,dl
 1006efa:	74 26                	je     1006f22 <fatfs_string_ends_with_slash+0x35>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:330
        {
            // Last character?
            if (!(*(path+1)))
 1006efc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
 1006f00:	75 0a                	jne    1006f0c <fatfs_string_ends_with_slash+0x1f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:332
            {
                if (*path == '\\' || *path == '/')
 1006f02:	80 fa 5c             	cmp    dl,0x5c
 1006f05:	74 21                	je     1006f28 <fatfs_string_ends_with_slash+0x3b>
 1006f07:	80 fa 2f             	cmp    dl,0x2f
 1006f0a:	74 1c                	je     1006f28 <fatfs_string_ends_with_slash+0x3b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:336
                    return 1;
            }

            path++;
 1006f0c:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:327
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
    if (path)
    {
        while (*path)
 1006f0f:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1006f12:	84 d2                	test   dl,dl
 1006f14:	75 e6                	jne    1006efc <fatfs_string_ends_with_slash+0xf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:340

            path++;
        }
    }

    return 0;
 1006f16:	b8 00 00 00 00       	mov    eax,0x0
 1006f1b:	c3                   	ret    
 1006f1c:	b8 00 00 00 00       	mov    eax,0x0
 1006f21:	c3                   	ret    
 1006f22:	b8 00 00 00 00       	mov    eax,0x0
 1006f27:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:333
        {
            // Last character?
            if (!(*(path+1)))
            {
                if (*path == '\\' || *path == '/')
                    return 1;
 1006f28:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:341
            path++;
        }
    }

    return 0;
}
 1006f2d:	c3                   	ret    

01006f2e <fatfs_get_sfn_display_name>:
fatfs_get_sfn_display_name():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:346
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
 1006f2e:	55                   	push   ebp
 1006f2f:	57                   	push   edi
 1006f30:	56                   	push   esi
 1006f31:	53                   	push   ebx
 1006f32:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
 1006f36:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:347
    int len = 0;
 1006f3a:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:348
    while (*in && len <= 11)
 1006f3f:	eb 1e                	jmp    1006f5f <fatfs_get_sfn_display_name+0x31>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:350
    {
        char a = *in++;
 1006f41:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:352

        if (a == ' ')
 1006f44:	3c 20                	cmp    al,0x20
 1006f46:	74 17                	je     1006f5f <fatfs_get_sfn_display_name+0x31>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:355
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
 1006f48:	8d 78 bf             	lea    edi,[eax-0x41]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:356
            a+= 32;
 1006f4b:	8d 70 20             	lea    esi,[eax+0x20]
 1006f4e:	89 fb                	mov    ebx,edi
 1006f50:	80 fb 19             	cmp    bl,0x19
 1006f53:	0f 46 c6             	cmovbe eax,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:358

        *out++ = a;
 1006f56:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:359
        len++;
 1006f59:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:358
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
            a+= 32;

        *out++ = a;
 1006f5c:	8d 6d 01             	lea    ebp,[ebp+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:348
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
 1006f5f:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 1006f62:	83 f9 0b             	cmp    ecx,0xb
 1006f65:	7f 04                	jg     1006f6b <fatfs_get_sfn_display_name+0x3d>
 1006f67:	84 c0                	test   al,al
 1006f69:	75 d6                	jne    1006f41 <fatfs_get_sfn_display_name+0x13>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:362

        *out++ = a;
        len++;
    }

    *out = '\0';
 1006f6b:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:364
    return 1;
}
 1006f6f:	b8 01 00 00 00       	mov    eax,0x1
 1006f74:	5b                   	pop    ebx
 1006f75:	5e                   	pop    esi
 1006f76:	5f                   	pop    edi
 1006f77:	5d                   	pop    ebp
 1006f78:	c3                   	ret    

01006f79 <fatfs_get_extension>:
fatfs_get_extension():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:371
// fatfs_get_extension: Get extension of filename passed in 'filename'.
// Returned extension is always lower case.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_get_extension(char* filename, char* out, int maxlen)
{
 1006f79:	55                   	push   ebp
 1006f7a:	57                   	push   edi
 1006f7b:	56                   	push   esi
 1006f7c:	53                   	push   ebx
 1006f7d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
 1006f81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
 1006f85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:375
    int len = 0;

    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);
 1006f89:	89 f8                	mov    eax,edi
 1006f8b:	e8 cf fb ff ff       	call   1006b5f <FileString_GetExtension>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:377

    if (ext_pos > 0 && out && maxlen)
 1006f90:	85 db                	test   ebx,ebx
 1006f92:	0f 95 c1             	setne  cl
 1006f95:	85 f6                	test   esi,esi
 1006f97:	0f 95 c2             	setne  dl
 1006f9a:	84 d1                	test   cl,dl
 1006f9c:	74 48                	je     1006fe6 <fatfs_get_extension+0x6d>
 1006f9e:	85 c0                	test   eax,eax
 1006fa0:	7e 44                	jle    1006fe6 <fatfs_get_extension+0x6d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:379
    {
        filename += ext_pos + 1;
 1006fa2:	8d 54 07 01          	lea    edx,[edi+eax*1+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:381

        while (*filename && len < (maxlen-1))
 1006fa6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 1006fa9:	84 c0                	test   al,al
 1006fab:	74 2f                	je     1006fdc <fatfs_get_extension+0x63>
 1006fad:	8d 4e ff             	lea    ecx,[esi-0x1]
 1006fb0:	85 c9                	test   ecx,ecx
 1006fb2:	7e 28                	jle    1006fdc <fatfs_get_extension+0x63>
 1006fb4:	8d 7c 33 ff          	lea    edi,[ebx+esi*1-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:383
        {
            char a = *filename++;
 1006fb8:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:386

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
 1006fbb:	8d 70 bf             	lea    esi,[eax-0x41]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:387
                a+= 32;
 1006fbe:	8d 68 20             	lea    ebp,[eax+0x20]
 1006fc1:	89 f1                	mov    ecx,esi
 1006fc3:	80 f9 19             	cmp    cl,0x19
 1006fc6:	0f 46 c5             	cmovbe eax,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:389

            *out++ = a;
 1006fc9:	83 c3 01             	add    ebx,0x1
 1006fcc:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:381

    if (ext_pos > 0 && out && maxlen)
    {
        filename += ext_pos + 1;

        while (*filename && len < (maxlen-1))
 1006fcf:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 1006fd2:	84 c0                	test   al,al
 1006fd4:	74 06                	je     1006fdc <fatfs_get_extension+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:381 (discriminator 1)
 1006fd6:	39 df                	cmp    edi,ebx
 1006fd8:	75 de                	jne    1006fb8 <fatfs_get_extension+0x3f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:389

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
                a+= 32;

            *out++ = a;
 1006fda:	89 fb                	mov    ebx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:393
            len++;
        }

        *out = '\0';
 1006fdc:	c6 03 00             	mov    BYTE PTR [ebx],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:394
        return 1;
 1006fdf:	b8 01 00 00 00       	mov    eax,0x1
 1006fe4:	eb 05                	jmp    1006feb <fatfs_get_extension+0x72>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:397
    }

    return 0;
 1006fe6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:398
}
 1006feb:	5b                   	pop    ebx
 1006fec:	5e                   	pop    esi
 1006fed:	5f                   	pop    edi
 1006fee:	5d                   	pop    ebp
 1006fef:	c3                   	ret    

01006ff0 <fatfs_create_path_string>:
fatfs_create_path_string():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:404
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
{
 1006ff0:	55                   	push   ebp
 1006ff1:	57                   	push   edi
 1006ff2:	56                   	push   esi
 1006ff3:	53                   	push   ebx
 1006ff4:	83 ec 04             	sub    esp,0x4
 1006ff7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
 1006ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:409
    int len = 0;
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
 1006fff:	85 ff                	test   edi,edi
 1007001:	0f 84 cd 00 00 00    	je     10070d4 <fatfs_create_path_string+0xe4>
 1007007:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
 100700c:	0f 84 c2 00 00 00    	je     10070d4 <fatfs_create_path_string+0xe4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:409 (discriminator 1)
 1007012:	85 c0                	test   eax,eax
 1007014:	0f 84 c1 00 00 00    	je     10070db <fatfs_create_path_string+0xeb>
 100701a:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
 100701f:	0f 8e b6 00 00 00    	jle    10070db <fatfs_create_path_string+0xeb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:411
    {
        while (*path && len < (maxlen-2))
 1007025:	0f b6 0f             	movzx  ecx,BYTE PTR [edi]
 1007028:	84 c9                	test   cl,cl
 100702a:	74 4c                	je     1007078 <fatfs_create_path_string+0x88>
 100702c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
 1007030:	8d 56 fe             	lea    edx,[esi-0x2]
 1007033:	85 d2                	test   edx,edx
 1007035:	7e 4d                	jle    1007084 <fatfs_create_path_string+0x94>
 1007037:	89 14 24             	mov    DWORD PTR [esp],edx
 100703a:	be 2f 00 00 00       	mov    esi,0x2f
 100703f:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:415
        {
            last = *path++;
            if (last == '\\')
                seperator = '\\';
 1007044:	bd 5c 00 00 00       	mov    ebp,0x5c
 1007049:	eb 02                	jmp    100704d <fatfs_create_path_string+0x5d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
 100704b:	89 d9                	mov    ecx,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:415
        {
            last = *path++;
            if (last == '\\')
                seperator = '\\';
 100704d:	80 f9 5c             	cmp    cl,0x5c
 1007050:	0f 44 f5             	cmove  esi,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:416
            *out++ = last;
 1007053:	83 c0 01             	add    eax,0x1
 1007056:	88 48 ff             	mov    BYTE PTR [eax-0x1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:417
            len++;
 1007059:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
 100705c:	0f b6 1c 17          	movzx  ebx,BYTE PTR [edi+edx*1]
 1007060:	84 db                	test   bl,bl
 1007062:	74 08                	je     100706c <fatfs_create_path_string+0x7c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:411 (discriminator 1)
 1007064:	39 14 24             	cmp    DWORD PTR [esp],edx
 1007067:	75 e2                	jne    100704b <fatfs_create_path_string+0x5b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:417
        {
            last = *path++;
            if (last == '\\')
                seperator = '\\';
            *out++ = last;
            len++;
 1007069:	8b 14 24             	mov    edx,DWORD PTR [esp]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:421
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
 100706c:	80 f9 5c             	cmp    cl,0x5c
 100706f:	74 24                	je     1007095 <fatfs_create_path_string+0xa5>
 1007071:	80 f9 2f             	cmp    cl,0x2f
 1007074:	75 18                	jne    100708e <fatfs_create_path_string+0x9e>
 1007076:	eb 1d                	jmp    1007095 <fatfs_create_path_string+0xa5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
 1007078:	be 2f 00 00 00       	mov    esi,0x2f
 100707d:	ba 00 00 00 00       	mov    edx,0x0
 1007082:	eb 0a                	jmp    100708e <fatfs_create_path_string+0x9e>
 1007084:	be 2f 00 00 00       	mov    esi,0x2f
 1007089:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:422
            len++;
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;
 100708e:	89 f3                	mov    ebx,esi
 1007090:	88 18                	mov    BYTE PTR [eax],bl
 1007092:	8d 40 01             	lea    eax,[eax+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:424

        while (*filename && len < (maxlen-1))
 1007095:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
 1007099:	0f b6 1f             	movzx  ebx,BYTE PTR [edi]
 100709c:	84 db                	test   bl,bl
 100709e:	74 2a                	je     10070ca <fatfs_create_path_string+0xda>
 10070a0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
 10070a4:	8d 77 ff             	lea    esi,[edi-0x1]
 10070a7:	39 d6                	cmp    esi,edx
 10070a9:	7e 1f                	jle    10070ca <fatfs_create_path_string+0xda>
 10070ab:	89 d1                	mov    ecx,edx
 10070ad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
 10070b1:	29 d7                	sub    edi,edx
 10070b3:	89 fa                	mov    edx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:426
        {
            *out++ = *filename++;
 10070b5:	83 c0 01             	add    eax,0x1
 10070b8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:427
            len++;
 10070bb:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:424

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
 10070be:	0f b6 1c 0a          	movzx  ebx,BYTE PTR [edx+ecx*1]
 10070c2:	84 db                	test   bl,bl
 10070c4:	74 04                	je     10070ca <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:424 (discriminator 1)
 10070c6:	39 ce                	cmp    esi,ecx
 10070c8:	7f eb                	jg     10070b5 <fatfs_create_path_string+0xc5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:430
        {
            *out++ = *filename++;
            len++;
        }

        *out = '\0';
 10070ca:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:432

        return 1;
 10070cd:	b8 01 00 00 00       	mov    eax,0x1
 10070d2:	eb 0c                	jmp    10070e0 <fatfs_create_path_string+0xf0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:435
    }

    return 0;
 10070d4:	b8 00 00 00 00       	mov    eax,0x0
 10070d9:	eb 05                	jmp    10070e0 <fatfs_create_path_string+0xf0>
 10070db:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:436
}
 10070e0:	83 c4 04             	add    esp,0x4
 10070e3:	5b                   	pop    ebx
 10070e4:	5e                   	pop    esi
 10070e5:	5f                   	pop    edi
 10070e6:	5d                   	pop    ebp
 10070e7:	c3                   	ret    

010070e8 <fatfs_fat_writeback>:
fatfs_fat_writeback():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:85
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
    if (pcur)
 10070e8:	85 d2                	test   edx,edx
 10070ea:	74 61                	je     100714d <fatfs_fat_writeback+0x65>
 10070ec:	89 c1                	mov    ecx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:108
            }

            pcur->dirty = 0;
        }

        return 1;
 10070ee:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:88
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
    if (pcur)
    {
        // Writeback sector if changed
        if (pcur->dirty)
 10070f3:	83 ba 04 02 00 00 00 	cmp    DWORD PTR [edx+0x204],0x0
 10070fa:	74 5e                	je     100715a <fatfs_fat_writeback+0x72>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:84
}
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
 10070fc:	55                   	push   ebp
 10070fd:	57                   	push   edi
 10070fe:	56                   	push   esi
 10070ff:	53                   	push   ebx
 1007100:	83 ec 0c             	sub    esp,0xc
 1007103:	89 d3                	mov    ebx,edx
 1007105:	89 c8                	mov    eax,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:90
    if (pcur)
    {
        // Writeback sector if changed
        if (pcur->dirty)
        {
            if (fs->disk_io.write_media)
 1007107:	8b 49 38             	mov    ecx,DWORD PTR [ecx+0x38]
 100710a:	85 c9                	test   ecx,ecx
 100710c:	74 2e                	je     100713c <fatfs_fat_writeback+0x54>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:93
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
 100710e:	8b b2 00 02 00 00    	mov    esi,DWORD PTR [edx+0x200]
 1007114:	89 f5                	mov    ebp,esi
 1007116:	2b 68 14             	sub    ebp,DWORD PTR [eax+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:96

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
 1007119:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
 100711c:	8d 7d 01             	lea    edi,[ebp+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:99
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
 100711f:	89 d0                	mov    eax,edx
 1007121:	29 e8                	sub    eax,ebp
 1007123:	39 d7                	cmp    edi,edx
 1007125:	ba 01 00 00 00       	mov    edx,0x1
 100712a:	0f 46 c2             	cmovbe eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:101

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
 100712d:	83 ec 04             	sub    esp,0x4
 1007130:	50                   	push   eax
 1007131:	53                   	push   ebx
 1007132:	56                   	push   esi
 1007133:	ff d1                	call   ecx
 1007135:	83 c4 10             	add    esp,0x10
 1007138:	85 c0                	test   eax,eax
 100713a:	74 17                	je     1007153 <fatfs_fat_writeback+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:105
                    return 0;
            }

            pcur->dirty = 0;
 100713c:	c7 83 04 02 00 00 00 	mov    DWORD PTR [ebx+0x204],0x0
 1007143:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:108
        }

        return 1;
 1007146:	b8 01 00 00 00       	mov    eax,0x1
 100714b:	eb 06                	jmp    1007153 <fatfs_fat_writeback+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:111
    }
    else
        return 0;
 100714d:	b8 00 00 00 00       	mov    eax,0x0
 1007152:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:112
}
 1007153:	83 c4 0c             	add    esp,0xc
 1007156:	5b                   	pop    ebx
 1007157:	5e                   	pop    esi
 1007158:	5f                   	pop    edi
 1007159:	5d                   	pop    ebp
 100715a:	f3 c3                	repz ret 

0100715c <fatfs_fat_read_sector>:
fatfs_fat_read_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:117
//-----------------------------------------------------------------------------
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
 100715c:	57                   	push   edi
 100715d:	56                   	push   esi
 100715e:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:119
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
 100715f:	8b 98 54 02 00 00    	mov    ebx,DWORD PTR [eax+0x254]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:122

    // Itterate through sector buffer list
    while (pcur)
 1007165:	be 00 00 00 00       	mov    esi,0x0
 100716a:	85 db                	test   ebx,ebx
 100716c:	75 06                	jne    1007174 <fatfs_fat_read_sector+0x18>
 100716e:	eb 5d                	jmp    10071cd <fatfs_fat_read_sector+0x71>
 1007170:	89 de                	mov    esi,ebx
 1007172:	89 cb                	mov    ebx,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:125
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
 1007174:	8b 8b 00 02 00 00    	mov    ecx,DWORD PTR [ebx+0x200]
 100717a:	39 d1                	cmp    ecx,edx
 100717c:	77 07                	ja     1007185 <fatfs_fat_read_sector+0x29>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:125 (discriminator 1)
 100717e:	8d 79 01             	lea    edi,[ecx+0x1]
 1007181:	39 fa                	cmp    edx,edi
 1007183:	72 30                	jb     10071b5 <fatfs_fat_read_sector+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:129
            break;

        // End of list?
        if (pcur->next == NULL)
 1007185:	8b 8b 0c 02 00 00    	mov    ecx,DWORD PTR [ebx+0x20c]
 100718b:	85 c9                	test   ecx,ecx
 100718d:	75 e1                	jne    1007170 <fatfs_fat_read_sector+0x14>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:132
        {
            // Remove buffer from list
            if (last)
 100718f:	85 f6                	test   esi,esi
 1007191:	74 0c                	je     100719f <fatfs_fat_read_sector+0x43>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:133
                last->next = NULL;
 1007193:	c7 86 0c 02 00 00 00 	mov    DWORD PTR [esi+0x20c],0x0
 100719a:	00 00 00 
 100719d:	eb 0a                	jmp    10071a9 <fatfs_fat_read_sector+0x4d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:136
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
 100719f:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
 10071a6:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:140
        }

        last = pcur;
        pcur = pcur->next;
 10071a9:	8b 8b 0c 02 00 00    	mov    ecx,DWORD PTR [ebx+0x20c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:122
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
 10071af:	85 c9                	test   ecx,ecx
 10071b1:	75 bd                	jne    1007170 <fatfs_fat_read_sector+0x14>
 10071b3:	eb 18                	jmp    10071cd <fatfs_fat_read_sector+0x71>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:144
        last = pcur;
        pcur = pcur->next;
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
 10071b5:	85 db                	test   ebx,ebx
 10071b7:	74 12                	je     10071cb <fatfs_fat_read_sector+0x6f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:146
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
 10071b9:	29 ca                	sub    edx,ecx
 10071bb:	c1 e2 09             	shl    edx,0x9
 10071be:	8d 04 13             	lea    eax,[ebx+edx*1]
 10071c1:	89 83 08 02 00 00    	mov    DWORD PTR [ebx+0x208],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:147
        return pcur;
 10071c7:	89 d8                	mov    eax,ebx
 10071c9:	eb 60                	jmp    100722b <fatfs_fat_read_sector+0xcf>
 10071cb:	89 f3                	mov    ebx,esi
 10071cd:	89 d6                	mov    esi,edx
 10071cf:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:154

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
 10071d1:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
 10071d7:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:155
    fs->fat_buffer_head = pcur;
 10071dd:	89 9f 54 02 00 00    	mov    DWORD PTR [edi+0x254],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:158

    // Writeback sector if changed
    if (pcur->dirty)
 10071e3:	83 bb 04 02 00 00 00 	cmp    DWORD PTR [ebx+0x204],0x0
 10071ea:	74 0d                	je     10071f9 <fatfs_fat_read_sector+0x9d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:159
        if (!fatfs_fat_writeback(fs, pcur))
 10071ec:	89 da                	mov    edx,ebx
 10071ee:	89 f8                	mov    eax,edi
 10071f0:	e8 f3 fe ff ff       	call   10070e8 <fatfs_fat_writeback>
 10071f5:	85 c0                	test   eax,eax
 10071f7:	74 2d                	je     1007226 <fatfs_fat_read_sector+0xca>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:163
            return 0;

    // Address is now new sector
    pcur->address = sector;
 10071f9:	89 b3 00 02 00 00    	mov    DWORD PTR [ebx+0x200],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:166

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
 10071ff:	83 ec 04             	sub    esp,0x4
 1007202:	6a 01                	push   0x1
 1007204:	53                   	push   ebx
 1007205:	56                   	push   esi
 1007206:	ff 57 34             	call   DWORD PTR [edi+0x34]
 1007209:	83 c4 10             	add    esp,0x10
 100720c:	85 c0                	test   eax,eax
 100720e:	75 0c                	jne    100721c <fatfs_fat_read_sector+0xc0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:169
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
 1007210:	c7 83 00 02 00 00 ff 	mov    DWORD PTR [ebx+0x200],0xffffffff
 1007217:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:170
        return NULL;
 100721a:	eb 0f                	jmp    100722b <fatfs_fat_read_sector+0xcf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:173
    }

    pcur->ptr = pcur->sector;
 100721c:	89 9b 08 02 00 00    	mov    DWORD PTR [ebx+0x208],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:174
    return pcur;
 1007222:	89 d8                	mov    eax,ebx
 1007224:	eb 05                	jmp    100722b <fatfs_fat_read_sector+0xcf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:160
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;
 1007226:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:175
        return NULL;
    }

    pcur->ptr = pcur->sector;
    return pcur;
}
 100722b:	5b                   	pop    ebx
 100722c:	5e                   	pop    esi
 100722d:	5f                   	pop    edi
 100722e:	c3                   	ret    

0100722f <fatfs_fat_init>:
fatfs_fat_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:61

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
 100722f:	56                   	push   esi
 1007230:	53                   	push   ebx
 1007231:	83 ec 08             	sub    esp,0x8
 1007234:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:65
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
 1007238:	c7 83 54 02 00 00 00 	mov    DWORD PTR [ebx+0x254],0x0
 100723f:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:70

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
 1007242:	c7 83 58 04 00 00 ff 	mov    DWORD PTR [ebx+0x458],0xffffffff
 1007249:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:71
        fs->fat_buffers[i].dirty = 0;
 100724c:	c7 83 5c 04 00 00 00 	mov    DWORD PTR [ebx+0x45c],0x0
 1007253:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:72
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
 1007256:	8d b3 58 02 00 00    	lea    esi,[ebx+0x258]
 100725c:	68 00 02 00 00       	push   0x200
 1007261:	6a 00                	push   0x0
 1007263:	56                   	push   esi
 1007264:	e8 ca 1c 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:73
        fs->fat_buffers[i].ptr = NULL;
 1007269:	c7 83 60 04 00 00 00 	mov    DWORD PTR [ebx+0x460],0x0
 1007270:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:76

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
 1007273:	8b 83 54 02 00 00    	mov    eax,DWORD PTR [ebx+0x254]
 1007279:	89 83 64 04 00 00    	mov    DWORD PTR [ebx+0x464],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:77
        fs->fat_buffer_head = &fs->fat_buffers[i];
 100727f:	89 b3 54 02 00 00    	mov    DWORD PTR [ebx+0x254],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:79
    }
}
 1007285:	83 c4 14             	add    esp,0x14
 1007288:	5b                   	pop    ebx
 1007289:	5e                   	pop    esi
 100728a:	c3                   	ret    

0100728b <fatfs_fat_purge>:
fatfs_fat_purge():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:180
}
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
 100728b:	56                   	push   esi
 100728c:	53                   	push   ebx
 100728d:	83 ec 04             	sub    esp,0x4
 1007290:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:181
    struct fat_buffer *pcur = fs->fat_buffer_head;
 1007294:	8b 9e 54 02 00 00    	mov    ebx,DWORD PTR [esi+0x254]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:184

    // Itterate through sector buffer list
    while (pcur)
 100729a:	85 db                	test   ebx,ebx
 100729c:	74 27                	je     10072c5 <fatfs_fat_purge+0x3a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:187
    {
        // Writeback sector if changed
        if (pcur->dirty)
 100729e:	83 bb 04 02 00 00 00 	cmp    DWORD PTR [ebx+0x204],0x0
 10072a5:	74 0d                	je     10072b4 <fatfs_fat_purge+0x29>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:188
            if (!fatfs_fat_writeback(fs, pcur))
 10072a7:	89 da                	mov    edx,ebx
 10072a9:	89 f0                	mov    eax,esi
 10072ab:	e8 38 fe ff ff       	call   10070e8 <fatfs_fat_writeback>
 10072b0:	85 c0                	test   eax,eax
 10072b2:	74 16                	je     10072ca <fatfs_fat_purge+0x3f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:191
                return 0;

        pcur = pcur->next;
 10072b4:	8b 9b 0c 02 00 00    	mov    ebx,DWORD PTR [ebx+0x20c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:184
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
 10072ba:	85 db                	test   ebx,ebx
 10072bc:	75 e0                	jne    100729e <fatfs_fat_purge+0x13>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:194
                return 0;

        pcur = pcur->next;
    }

    return 1;
 10072be:	b8 01 00 00 00       	mov    eax,0x1
 10072c3:	eb 05                	jmp    10072ca <fatfs_fat_purge+0x3f>
 10072c5:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:195
}
 10072ca:	83 c4 04             	add    esp,0x4
 10072cd:	5b                   	pop    ebx
 10072ce:	5e                   	pop    esi
 10072cf:	c3                   	ret    

010072d0 <fatfs_find_next_cluster>:
fatfs_find_next_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:206
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
 10072d0:	57                   	push   edi
 10072d1:	56                   	push   esi
 10072d2:	53                   	push   ebx
 10072d3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 10072d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:213
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
        current_cluster = 2;
 10072db:	85 db                	test   ebx,ebx
 10072dd:	b8 02 00 00 00       	mov    eax,0x2
 10072e2:	0f 44 d8             	cmove  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:217

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = current_cluster / 256;
 10072e5:	89 d8                	mov    eax,ebx
 10072e7:	c1 e8 08             	shr    eax,0x8
 10072ea:	89 de                	mov    esi,ebx
 10072ec:	c1 ee 07             	shr    esi,0x7
 10072ef:	83 7f 30 00          	cmp    DWORD PTR [edi+0x30],0x0
 10072f3:	0f 44 f0             	cmove  esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:222
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
 10072f6:	89 f2                	mov    edx,esi
 10072f8:	03 57 14             	add    edx,DWORD PTR [edi+0x14]
 10072fb:	89 f8                	mov    eax,edi
 10072fd:	e8 5a fe ff ff       	call   100715c <fatfs_fat_read_sector>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:224
    if (!pbuf)
        return (FAT32_LAST_CLUSTER);
 1007302:	ba ff ff ff ff       	mov    edx,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:223
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
 1007307:	85 c0                	test   eax,eax
 1007309:	0f 84 83 00 00 00    	je     1007392 <fatfs_find_next_cluster+0xc2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:226
        return (FAT32_LAST_CLUSTER);

    if (fs->fat_type == FAT_TYPE_16)
 100730f:	83 7f 30 00          	cmp    DWORD PTR [edi+0x30],0x0
 1007313:	75 31                	jne    1007346 <fatfs_find_next_cluster+0x76>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:232
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
 1007315:	8b 88 08 02 00 00    	mov    ecx,DWORD PTR [eax+0x208]
 100731b:	c1 e6 08             	shl    esi,0x8
 100731e:	29 f3                	sub    ebx,esi
 1007320:	01 db                	add    ebx,ebx
 1007322:	0f b7 db             	movzx  ebx,bx
 1007325:	0f b6 44 19 01       	movzx  eax,BYTE PTR [ecx+ebx*1+0x1]
 100732a:	c1 e0 08             	shl    eax,0x8
 100732d:	0f b6 0c 19          	movzx  ecx,BYTE PTR [ecx+ebx*1]
 1007331:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:235

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
 1007333:	8d 90 08 00 ff ff    	lea    edx,[eax-0xfff8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:232
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
 1007339:	83 fa 08             	cmp    edx,0x8
 100733c:	ba ff ff ff ff       	mov    edx,0xffffffff
 1007341:	0f 43 d0             	cmovae edx,eax
 1007344:	eb 4c                	jmp    1007392 <fatfs_find_next_cluster+0xc2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:244
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 128)) * 4;

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
 1007346:	8b 88 08 02 00 00    	mov    ecx,DWORD PTR [eax+0x208]
 100734c:	c1 e6 07             	shl    esi,0x7
 100734f:	29 f3                	sub    ebx,esi
 1007351:	c1 e3 02             	shl    ebx,0x2
 1007354:	0f b7 db             	movzx  ebx,bx
 1007357:	0f b6 44 19 03       	movzx  eax,BYTE PTR [ecx+ebx*1+0x3]
 100735c:	c1 e0 18             	shl    eax,0x18
 100735f:	89 c2                	mov    edx,eax
 1007361:	0f b6 44 19 02       	movzx  eax,BYTE PTR [ecx+ebx*1+0x2]
 1007366:	c1 e0 10             	shl    eax,0x10
 1007369:	01 d0                	add    eax,edx
 100736b:	0f b6 14 19          	movzx  edx,BYTE PTR [ecx+ebx*1]
 100736f:	01 d0                	add    eax,edx
 1007371:	0f b6 54 19 01       	movzx  edx,BYTE PTR [ecx+ebx*1+0x1]
 1007376:	c1 e2 08             	shl    edx,0x8
 1007379:	01 c2                	add    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:247

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
 100737b:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:250

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF)
 1007381:	8d 82 08 00 00 f0    	lea    eax,[edx-0xffffff8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:247

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
 1007387:	83 f8 08             	cmp    eax,0x8
 100738a:	b8 ff ff ff ff       	mov    eax,0xffffffff
 100738f:	0f 42 d0             	cmovb  edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:256
            return (FAT32_LAST_CLUSTER);
    }

    // Else return next cluster
    return (nextcluster);
}
 1007392:	89 d0                	mov    eax,edx
 1007394:	5b                   	pop    ebx
 1007395:	5e                   	pop    esi
 1007396:	5f                   	pop    edi
 1007397:	c3                   	ret    

01007398 <fatfs_set_fs_info_next_free_cluster>:
fatfs_set_fs_info_next_free_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:261
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
 1007398:	57                   	push   edi
 1007399:	56                   	push   esi
 100739a:	53                   	push   ebx
 100739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 100739f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:262
    if (fs->fat_type == FAT_TYPE_16)
 10073a3:	83 7b 30 00          	cmp    DWORD PTR [ebx+0x30],0x0
 10073a7:	0f 84 8e 00 00 00    	je     100743b <fatfs_set_fs_info_next_free_cluster+0xa3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:267
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
 10073ad:	0f b7 53 18          	movzx  edx,WORD PTR [ebx+0x18]
 10073b1:	03 53 1c             	add    edx,DWORD PTR [ebx+0x1c]
 10073b4:	89 d8                	mov    eax,ebx
 10073b6:	e8 a1 fd ff ff       	call   100715c <fatfs_fat_read_sector>
 10073bb:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:268
        if (!pbuf)
 10073bd:	85 c0                	test   eax,eax
 10073bf:	74 7a                	je     100743b <fatfs_set_fs_info_next_free_cluster+0xa3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:272
            return ;

        // Change
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
 10073c1:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
 10073c7:	89 f9                	mov    ecx,edi
 10073c9:	88 88 ec 01 00 00    	mov    BYTE PTR [eax+0x1ec],cl
 10073cf:	8b 86 08 02 00 00    	mov    eax,DWORD PTR [esi+0x208]
 10073d5:	89 fa                	mov    edx,edi
 10073d7:	c1 ea 08             	shr    edx,0x8
 10073da:	88 90 ed 01 00 00    	mov    BYTE PTR [eax+0x1ed],dl
 10073e0:	8b 86 08 02 00 00    	mov    eax,DWORD PTR [esi+0x208]
 10073e6:	89 fa                	mov    edx,edi
 10073e8:	c1 ea 10             	shr    edx,0x10
 10073eb:	88 90 ee 01 00 00    	mov    BYTE PTR [eax+0x1ee],dl
 10073f1:	8b 86 08 02 00 00    	mov    eax,DWORD PTR [esi+0x208]
 10073f7:	89 fa                	mov    edx,edi
 10073f9:	c1 ea 18             	shr    edx,0x18
 10073fc:	88 90 ef 01 00 00    	mov    BYTE PTR [eax+0x1ef],dl
 1007402:	c7 86 04 02 00 00 01 	mov    DWORD PTR [esi+0x204],0x1
 1007409:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:273
        fs->next_free_cluster = newValue;
 100740c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:276

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
 100740f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 1007412:	85 c0                	test   eax,eax
 1007414:	74 11                	je     1007427 <fatfs_set_fs_info_next_free_cluster+0x8f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:277
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);
 1007416:	83 ec 04             	sub    esp,0x4
 1007419:	6a 01                	push   0x1
 100741b:	56                   	push   esi
 100741c:	ff b6 00 02 00 00    	push   DWORD PTR [esi+0x200]
 1007422:	ff d0                	call   eax
 1007424:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:280

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
 1007427:	c7 86 00 02 00 00 ff 	mov    DWORD PTR [esi+0x200],0xffffffff
 100742e:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:281
        pbuf->dirty = 0;
 1007431:	c7 86 04 02 00 00 00 	mov    DWORD PTR [esi+0x204],0x0
 1007438:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:283
    }
}
 100743b:	5b                   	pop    ebx
 100743c:	5e                   	pop    esi
 100743d:	5f                   	pop    edi
 100743e:	c3                   	ret    

0100743f <fatfs_find_blank_cluster>:
fatfs_find_blank_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:289
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
 100743f:	57                   	push   edi
 1007440:	56                   	push   esi
 1007441:	53                   	push   ebx
 1007442:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 1007446:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:299

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
            fat_sector_offset = current_cluster / 256;
 100744a:	89 f8                	mov    eax,edi
 100744c:	c1 e8 08             	shr    eax,0x8
 100744f:	89 fb                	mov    ebx,edi
 1007451:	c1 eb 07             	shr    ebx,0x7
 1007454:	83 7e 30 00          	cmp    DWORD PTR [esi+0x30],0x0
 1007458:	0f 44 d8             	cmove  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:303
        else
            fat_sector_offset = current_cluster / 128;

        if ( fat_sector_offset < fs->fat_sectors)
 100745b:	3b 5e 20             	cmp    ebx,DWORD PTR [esi+0x20]
 100745e:	0f 83 80 00 00 00    	jae    10074e4 <fatfs_find_blank_cluster+0xa5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:306
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
 1007464:	89 da                	mov    edx,ebx
 1007466:	03 56 14             	add    edx,DWORD PTR [esi+0x14]
 1007469:	89 f0                	mov    eax,esi
 100746b:	e8 ec fc ff ff       	call   100715c <fatfs_fat_read_sector>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:307
            if (!pbuf)
 1007470:	85 c0                	test   eax,eax
 1007472:	74 77                	je     10074eb <fatfs_find_blank_cluster+0xac>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:310
                return 0;

            if (fs->fat_type == FAT_TYPE_16)
 1007474:	83 7e 30 00          	cmp    DWORD PTR [esi+0x30],0x0
 1007478:	75 22                	jne    100749c <fatfs_find_blank_cluster+0x5d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:316
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
 100747a:	8b 88 08 02 00 00    	mov    ecx,DWORD PTR [eax+0x208]
 1007480:	c1 e3 08             	shl    ebx,0x8
 1007483:	89 fa                	mov    edx,edi
 1007485:	29 da                	sub    edx,ebx
 1007487:	01 d2                	add    edx,edx
 1007489:	0f b7 d2             	movzx  edx,dx
 100748c:	0f b6 44 11 01       	movzx  eax,BYTE PTR [ecx+edx*1+0x1]
 1007491:	c1 e0 08             	shl    eax,0x8
 1007494:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
 1007498:	01 d0                	add    eax,edx
 100749a:	eb 3c                	jmp    10074d8 <fatfs_find_blank_cluster+0x99>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:324
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
 100749c:	8b 88 08 02 00 00    	mov    ecx,DWORD PTR [eax+0x208]
 10074a2:	c1 e3 07             	shl    ebx,0x7
 10074a5:	89 fa                	mov    edx,edi
 10074a7:	29 da                	sub    edx,ebx
 10074a9:	c1 e2 02             	shl    edx,0x2
 10074ac:	0f b7 d2             	movzx  edx,dx
 10074af:	0f b6 44 11 03       	movzx  eax,BYTE PTR [ecx+edx*1+0x3]
 10074b4:	c1 e0 18             	shl    eax,0x18
 10074b7:	89 c3                	mov    ebx,eax
 10074b9:	0f b6 44 11 02       	movzx  eax,BYTE PTR [ecx+edx*1+0x2]
 10074be:	c1 e0 10             	shl    eax,0x10
 10074c1:	01 d8                	add    eax,ebx
 10074c3:	0f b6 1c 11          	movzx  ebx,BYTE PTR [ecx+edx*1]
 10074c7:	01 c3                	add    ebx,eax
 10074c9:	0f b6 44 11 01       	movzx  eax,BYTE PTR [ecx+edx*1+0x1]
 10074ce:	c1 e0 08             	shl    eax,0x8
 10074d1:	01 d8                	add    eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:327

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;
 10074d3:	25 ff ff ff 0f       	and    eax,0xfffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:330
            }

            if (nextcluster !=0 )
 10074d8:	85 c0                	test   eax,eax
 10074da:	74 16                	je     10074f2 <fatfs_find_blank_cluster+0xb3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:331
                current_cluster++;
 10074dc:	83 c7 01             	add    edi,0x1
 10074df:	e9 66 ff ff ff       	jmp    100744a <fatfs_find_blank_cluster+0xb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:335
        }
        else
            // Otherwise, run out of FAT sectors to check...
            return 0;
 10074e4:	b8 00 00 00 00       	mov    eax,0x0
 10074e9:	eb 12                	jmp    10074fd <fatfs_find_blank_cluster+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:308
        if ( fat_sector_offset < fs->fat_sectors)
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
            if (!pbuf)
                return 0;
 10074eb:	b8 00 00 00 00       	mov    eax,0x0
 10074f0:	eb 0b                	jmp    10074fd <fatfs_find_blank_cluster+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:340
            return 0;
    }
    while (nextcluster != 0x0);

    // Found blank entry
    *free_cluster = current_cluster;
 10074f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 10074f6:	89 38                	mov    DWORD PTR [eax],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:341
    return 1;
 10074f8:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:342
}
 10074fd:	5b                   	pop    ebx
 10074fe:	5e                   	pop    esi
 10074ff:	5f                   	pop    edi
 1007500:	c3                   	ret    

01007501 <fatfs_fat_set_cluster>:
fatfs_fat_set_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:350
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
 1007501:	55                   	push   ebp
 1007502:	57                   	push   edi
 1007503:	56                   	push   esi
 1007504:	53                   	push   ebx
 1007505:	83 ec 0c             	sub    esp,0xc
 1007508:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 100750c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
 1007510:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:356
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
 1007514:	89 d8                	mov    eax,ebx
 1007516:	c1 e8 08             	shr    eax,0x8
 1007519:	89 df                	mov    edi,ebx
 100751b:	c1 ef 07             	shr    edi,0x7
 100751e:	83 7d 30 00          	cmp    DWORD PTR [ebp+0x30],0x0
 1007522:	0f 44 f8             	cmove  edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:361
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
 1007525:	89 fa                	mov    edx,edi
 1007527:	03 55 14             	add    edx,DWORD PTR [ebp+0x14]
 100752a:	89 e8                	mov    eax,ebp
 100752c:	e8 2b fc ff ff       	call   100715c <fatfs_fat_read_sector>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:362
    if (!pbuf)
 1007531:	85 c0                	test   eax,eax
 1007533:	0f 84 8f 00 00 00    	je     10075c8 <fatfs_fat_set_cluster+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:365
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
 1007539:	83 7d 30 00          	cmp    DWORD PTR [ebp+0x30],0x0
 100753d:	75 35                	jne    1007574 <fatfs_fat_set_cluster+0x73>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:371
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
 100753f:	c1 e7 08             	shl    edi,0x8
 1007542:	29 fb                	sub    ebx,edi
 1007544:	01 db                	add    ebx,ebx
 1007546:	0f b7 db             	movzx  ebx,bx
 1007549:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
 100754f:	89 f1                	mov    ecx,esi
 1007551:	88 0c 1a             	mov    BYTE PTR [edx+ebx*1],cl
 1007554:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
 100755a:	89 f1                	mov    ecx,esi
 100755c:	0f b6 cd             	movzx  ecx,ch
 100755f:	88 4c 1a 01          	mov    BYTE PTR [edx+ebx*1+0x1],cl
 1007563:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
 100756a:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:382

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
    }

    return 1;
 100756d:	b8 01 00 00 00       	mov    eax,0x1
 1007572:	eb 59                	jmp    10075cd <fatfs_fat_set_cluster+0xcc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:379
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
 1007574:	c1 e7 07             	shl    edi,0x7
 1007577:	29 fb                	sub    ebx,edi
 1007579:	c1 e3 02             	shl    ebx,0x2
 100757c:	0f b7 db             	movzx  ebx,bx
 100757f:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
 1007585:	89 f1                	mov    ecx,esi
 1007587:	88 0c 1a             	mov    BYTE PTR [edx+ebx*1],cl
 100758a:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
 1007590:	89 f1                	mov    ecx,esi
 1007592:	c1 e9 08             	shr    ecx,0x8
 1007595:	88 4c 1a 01          	mov    BYTE PTR [edx+ebx*1+0x1],cl
 1007599:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
 100759f:	89 f1                	mov    ecx,esi
 10075a1:	c1 e9 10             	shr    ecx,0x10
 10075a4:	88 4c 1a 02          	mov    BYTE PTR [edx+ebx*1+0x2],cl
 10075a8:	8b 88 08 02 00 00    	mov    ecx,DWORD PTR [eax+0x208]
 10075ae:	c1 ee 18             	shr    esi,0x18
 10075b1:	89 f2                	mov    edx,esi
 10075b3:	88 54 19 03          	mov    BYTE PTR [ecx+ebx*1+0x3],dl
 10075b7:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
 10075be:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:382
    }

    return 1;
 10075c1:	b8 01 00 00 00       	mov    eax,0x1
 10075c6:	eb 05                	jmp    10075cd <fatfs_fat_set_cluster+0xcc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:363
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return 0;
 10075c8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:383
        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
    }

    return 1;
}
 10075cd:	83 c4 0c             	add    esp,0xc
 10075d0:	5b                   	pop    ebx
 10075d1:	5e                   	pop    esi
 10075d2:	5f                   	pop    edi
 10075d3:	5d                   	pop    ebp
 10075d4:	c3                   	ret    

010075d5 <fatfs_free_cluster_chain>:
fatfs_free_cluster_chain():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:390
//-----------------------------------------------------------------------------
// fatfs_free_cluster_chain: Follow a chain marking each element as free
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
 10075d5:	57                   	push   edi
 10075d6:	56                   	push   esi
 10075d7:	53                   	push   ebx
 10075d8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 10075dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:395
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
 10075e0:	8d 46 ff             	lea    eax,[esi-0x1]
 10075e3:	83 f8 fd             	cmp    eax,0xfffffffd
 10075e6:	77 25                	ja     100760d <fatfs_free_cluster_chain+0x38>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:400
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
 10075e8:	83 ec 08             	sub    esp,0x8
 10075eb:	56                   	push   esi
 10075ec:	57                   	push   edi
 10075ed:	e8 de fc ff ff       	call   10072d0 <fatfs_find_next_cluster>
 10075f2:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:403

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
 10075f4:	83 c4 0c             	add    esp,0xc
 10075f7:	6a 00                	push   0x0
 10075f9:	56                   	push   esi
 10075fa:	57                   	push   edi
 10075fb:	e8 01 ff ff ff       	call   1007501 <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:400
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
 1007600:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:395
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
 1007602:	83 eb 01             	sub    ebx,0x1
 1007605:	83 c4 10             	add    esp,0x10
 1007608:	83 fb fd             	cmp    ebx,0xfffffffd
 100760b:	76 db                	jbe    10075e8 <fatfs_free_cluster_chain+0x13>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:407
        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
}
 100760d:	b8 01 00 00 00       	mov    eax,0x1
 1007612:	5b                   	pop    ebx
 1007613:	5e                   	pop    esi
 1007614:	5f                   	pop    edi
 1007615:	c3                   	ret    

01007616 <fatfs_fat_add_cluster_to_chain>:
fatfs_fat_add_cluster_to_chain():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:415
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
 1007616:	56                   	push   esi
 1007617:	53                   	push   ebx
 1007618:	83 ec 04             	sub    esp,0x4
 100761b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 100761f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:419
    uint32 last_cluster = FAT32_LAST_CLUSTER;
    uint32 next_cluster = start_cluster;

    if (start_cluster == FAT32_LAST_CLUSTER)
 1007623:	83 fb ff             	cmp    ebx,0xffffffff
 1007626:	75 04                	jne    100762c <fatfs_fat_add_cluster_to_chain+0x16>
 1007628:	eb 3f                	jmp    1007669 <fatfs_fat_add_cluster_to_chain+0x53>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:428
    while ( next_cluster != FAT32_LAST_CLUSTER )
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
 100762a:	89 c3                	mov    ebx,eax
 100762c:	83 ec 08             	sub    esp,0x8
 100762f:	53                   	push   ebx
 1007630:	56                   	push   esi
 1007631:	e8 9a fc ff ff       	call   10072d0 <fatfs_find_next_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:429
        if (!next_cluster)
 1007636:	83 c4 10             	add    esp,0x10
 1007639:	85 c0                	test   eax,eax
 100763b:	74 33                	je     1007670 <fatfs_fat_add_cluster_to_chain+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:423

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
 100763d:	83 f8 ff             	cmp    eax,0xffffffff
 1007640:	75 e8                	jne    100762a <fatfs_fat_add_cluster_to_chain+0x14>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:434
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
 1007642:	83 ec 04             	sub    esp,0x4
 1007645:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1007649:	53                   	push   ebx
 100764a:	56                   	push   esi
 100764b:	e8 b1 fe ff ff       	call   1007501 <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:437

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
 1007650:	83 c4 0c             	add    esp,0xc
 1007653:	6a ff                	push   0xffffffff
 1007655:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1007659:	56                   	push   esi
 100765a:	e8 a2 fe ff ff       	call   1007501 <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:439

    return 1;
 100765f:	83 c4 10             	add    esp,0x10
 1007662:	b8 01 00 00 00       	mov    eax,0x1
 1007667:	eb 0c                	jmp    1007675 <fatfs_fat_add_cluster_to_chain+0x5f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:420
{
    uint32 last_cluster = FAT32_LAST_CLUSTER;
    uint32 next_cluster = start_cluster;

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;
 1007669:	b8 00 00 00 00       	mov    eax,0x0
 100766e:	eb 05                	jmp    1007675 <fatfs_fat_add_cluster_to_chain+0x5f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:430
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
        if (!next_cluster)
            return 0;
 1007670:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:440

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);

    return 1;
}
 1007675:	83 c4 04             	add    esp,0x4
 1007678:	5b                   	pop    ebx
 1007679:	5e                   	pop    esi
 100767a:	c3                   	ret    

0100767b <fatfs_count_free_clusters>:
fatfs_count_free_clusters():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:446
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
 100767b:	55                   	push   ebp
 100767c:	57                   	push   edi
 100767d:	56                   	push   esi
 100767e:	53                   	push   ebx
 100767f:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:451
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
 1007682:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
 1007686:	83 78 20 00          	cmp    DWORD PTR [eax+0x20],0x0
 100768a:	0f 84 b6 00 00 00    	je     1007746 <fatfs_count_free_clusters+0xcb>
 1007690:	bd 00 00 00 00       	mov    ebp,0x0
 1007695:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 100769c:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:454
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
 100769d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
 10076a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 10076a5:	03 50 14             	add    edx,DWORD PTR [eax+0x14]
 10076a8:	e8 af fa ff ff       	call   100715c <fatfs_fat_read_sector>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:455
        if (!pbuf)
 10076ad:	85 c0                	test   eax,eax
 10076af:	0f 84 96 00 00 00    	je     100774b <fatfs_count_free_clusters+0xd0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:460
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
        {
            if (fs->fat_type == FAT_TYPE_16)
 10076b5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
 10076b9:	8b 5b 30             	mov    ebx,DWORD PTR [ebx+0x30]
 10076bc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
 10076c0:	bb 00 00 00 00       	mov    ebx,0x0
 10076c5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
 10076ca:	75 24                	jne    10076f0 <fatfs_count_free_clusters+0x75>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:462
            {
                if (FAT16_GET_16BIT_WORD(pbuf, (uint16)j) == 0)
 10076cc:	8b b8 08 02 00 00    	mov    edi,DWORD PTR [eax+0x208]
 10076d2:	0f b7 f3             	movzx  esi,bx
 10076d5:	0f b6 54 37 01       	movzx  edx,BYTE PTR [edi+esi*1+0x1]
 10076da:	89 d1                	mov    ecx,edx
 10076dc:	c1 e1 08             	shl    ecx,0x8
 10076df:	0f b6 14 37          	movzx  edx,BYTE PTR [edi+esi*1]
 10076e3:	01 ca                	add    edx,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:463
                    count++;
 10076e5:	83 fa 01             	cmp    edx,0x1
 10076e8:	83 d5 00             	adc    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:465

                j += 2;
 10076eb:	83 c3 02             	add    ebx,0x2
 10076ee:	eb 36                	jmp    1007726 <fatfs_count_free_clusters+0xab>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:469
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
 10076f0:	8b b0 08 02 00 00    	mov    esi,DWORD PTR [eax+0x208]
 10076f6:	0f b7 cb             	movzx  ecx,bx
 10076f9:	0f b6 54 0e 03       	movzx  edx,BYTE PTR [esi+ecx*1+0x3]
 10076fe:	89 d7                	mov    edi,edx
 1007700:	c1 e7 18             	shl    edi,0x18
 1007703:	0f b6 54 0e 02       	movzx  edx,BYTE PTR [esi+ecx*1+0x2]
 1007708:	c1 e2 10             	shl    edx,0x10
 100770b:	01 fa                	add    edx,edi
 100770d:	0f b6 3c 0e          	movzx  edi,BYTE PTR [esi+ecx*1]
 1007711:	01 fa                	add    edx,edi
 1007713:	0f b6 7c 0e 01       	movzx  edi,BYTE PTR [esi+ecx*1+0x1]
 1007718:	c1 e7 08             	shl    edi,0x8
 100771b:	01 fa                	add    edx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:470
                    count++;
 100771d:	83 fa 01             	cmp    edx,0x1
 1007720:	83 d5 00             	adc    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:472

                j += 4;
 1007723:	83 c3 04             	add    ebx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:458 (discriminator 1)
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
 1007726:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
 100772c:	76 97                	jbe    10076c5 <fatfs_count_free_clusters+0x4a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:451 (discriminator 2)
{
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
 100772e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
 1007733:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1007737:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
 100773b:	39 43 20             	cmp    DWORD PTR [ebx+0x20],eax
 100773e:	0f 87 59 ff ff ff    	ja     100769d <fatfs_count_free_clusters+0x22>
 1007744:	eb 05                	jmp    100774b <fatfs_count_free_clusters+0xd0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:448
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
    uint32 i,j;
    uint32 count = 0;
 1007746:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:478
            }
        }
    }

    return count;
}
 100774b:	89 e8                	mov    eax,ebp
 100774d:	83 c4 1c             	add    esp,0x1c
 1007750:	5b                   	pop    ebx
 1007751:	5e                   	pop    esi
 1007752:	5f                   	pop    edi
 1007753:	5d                   	pop    ebp
 1007754:	c3                   	ret    
 1007755:	66 90                	xchg   ax,ax
 1007757:	90                   	nop

01007758 <fatfs_add_free_space>:
fatfs_add_free_space():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:46
//-----------------------------------------------------------------------------
// fatfs_add_free_space: Allocate another cluster of free space to the end
// of a files cluster chain.
//-----------------------------------------------------------------------------
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
 1007758:	55                   	push   ebp
 1007759:	57                   	push   edi
 100775a:	56                   	push   esi
 100775b:	53                   	push   ebx
 100775c:	83 ec 1c             	sub    esp,0x1c
 100775f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:49
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;
 1007763:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 1007767:	8b 38                	mov    edi,DWORD PTR [eax]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:52

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
 1007769:	83 7b 24 ff          	cmp    DWORD PTR [ebx+0x24],0xffffffff
 100776d:	74 0e                	je     100777d <fatfs_add_free_space+0x25>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:53
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
 100776f:	83 ec 08             	sub    esp,0x8
 1007772:	6a ff                	push   0xffffffff
 1007774:	53                   	push   ebx
 1007775:	e8 1e fc ff ff       	call   1007398 <fatfs_set_fs_info_next_free_cluster>
 100777a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:55 (discriminator 1)

    for (i=0;i<clusters;i++)
 100777d:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
 1007782:	74 5b                	je     10077df <fatfs_add_free_space+0x87>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:55
 1007784:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:58
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
 1007789:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
 100778d:	83 ec 04             	sub    esp,0x4
 1007790:	55                   	push   ebp
 1007791:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 1007794:	53                   	push   ebx
 1007795:	e8 a5 fc ff ff       	call   100743f <fatfs_find_blank_cluster>
 100779a:	83 c4 10             	add    esp,0x10
 100779d:	85 c0                	test   eax,eax
 100779f:	74 43                	je     10077e4 <fatfs_add_free_space+0x8c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:61
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
 10077a1:	83 ec 04             	sub    esp,0x4
 10077a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 10077a8:	57                   	push   edi
 10077a9:	53                   	push   ebx
 10077aa:	e8 52 fd ff ff       	call   1007501 <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:64

            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
 10077af:	83 c4 0c             	add    esp,0xc
 10077b2:	6a ff                	push   0xffffffff
 10077b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 10077b8:	53                   	push   ebx
 10077b9:	e8 43 fd ff ff       	call   1007501 <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:67

            // Adjust argument reference
            start = nextcluster;
 10077be:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:68
            if (i == 0)
 10077c2:	83 c4 10             	add    esp,0x10
 10077c5:	85 f6                	test   esi,esi
 10077c7:	75 06                	jne    10077cf <fatfs_add_free_space+0x77>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:69
                *startCluster = nextcluster;
 10077c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 10077cd:	89 38                	mov    DWORD PTR [eax],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:55 (discriminator 2)

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
 10077cf:	83 c6 01             	add    esi,0x1
 10077d2:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
 10077d6:	75 b5                	jne    100778d <fatfs_add_free_space+0x35>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:75
        }
        else
            return 0;
    }

    return 1;
 10077d8:	b8 01 00 00 00       	mov    eax,0x1
 10077dd:	eb 05                	jmp    10077e4 <fatfs_add_free_space+0x8c>
 10077df:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:76
}
 10077e4:	83 c4 1c             	add    esp,0x1c
 10077e7:	5b                   	pop    ebx
 10077e8:	5e                   	pop    esi
 10077e9:	5f                   	pop    edi
 10077ea:	5d                   	pop    ebp
 10077eb:	c3                   	ret    

010077ec <fatfs_allocate_free_space>:
fatfs_allocate_free_space():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:83
// fatfs_allocate_free_space: Add an ammount of free space to a file either from
// 'startCluster' if newFile = false, or allocating a new start to the chain if
// newFile = true.
//-----------------------------------------------------------------------------
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
 10077ec:	56                   	push   esi
 10077ed:	53                   	push   ebx
 10077ee:	83 ec 14             	sub    esp,0x14
 10077f1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
 10077f5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:89
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
        return 0;
 10077f9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:88
{
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
 10077fe:	85 db                	test   ebx,ebx
 1007800:	0f 84 9b 00 00 00    	je     10078a1 <fatfs_allocate_free_space+0xb5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:92
        return 0;

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
 1007806:	83 7e 24 ff          	cmp    DWORD PTR [esi+0x24],0xffffffff
 100780a:	74 0e                	je     100781a <fatfs_allocate_free_space+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:93
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
 100780c:	83 ec 08             	sub    esp,0x8
 100780f:	6a ff                	push   0xffffffff
 1007811:	56                   	push   esi
 1007812:	e8 81 fb ff ff       	call   1007398 <fatfs_set_fs_info_next_free_cluster>
 1007817:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:96

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
 100781a:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
 100781d:	c1 e1 09             	shl    ecx,0x9
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:97
    clusterCount = (size / clusterSize);
 1007820:	89 d8                	mov    eax,ebx
 1007822:	ba 00 00 00 00       	mov    edx,0x0
 1007827:	f7 f1                	div    ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:100

    // If any left over
    if (size-(clusterSize*clusterCount))
 1007829:	0f af c8             	imul   ecx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:101
        clusterCount++;
 100782c:	8d 50 01             	lea    edx,[eax+0x1]
 100782f:	39 cb                	cmp    ebx,ecx
 1007831:	0f 45 c2             	cmovne eax,edx
 1007834:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:104

    // Allocated first link in the chain if a new file
    if (newFile)
 1007836:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
 100783b:	74 40                	je     100787d <fatfs_allocate_free_space+0x91>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:106
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
 100783d:	83 ec 04             	sub    esp,0x4
 1007840:	8d 44 24 10          	lea    eax,[esp+0x10]
 1007844:	50                   	push   eax
 1007845:	ff 76 08             	push   DWORD PTR [esi+0x8]
 1007848:	56                   	push   esi
 1007849:	e8 f1 fb ff ff       	call   100743f <fatfs_find_blank_cluster>
 100784e:	83 c4 10             	add    esp,0x10
 1007851:	85 c0                	test   eax,eax
 1007853:	74 4c                	je     10078a1 <fatfs_allocate_free_space+0xb5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:110
            return 0;

        // If this is all that is needed then all done
        if (clusterCount==1)
 1007855:	83 fb 01             	cmp    ebx,0x1
 1007858:	75 2d                	jne    1007887 <fatfs_allocate_free_space+0x9b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:112
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
 100785a:	83 ec 04             	sub    esp,0x4
 100785d:	6a ff                	push   0xffffffff
 100785f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1007863:	56                   	push   esi
 1007864:	e8 98 fc ff ff       	call   1007501 <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:113
            *startCluster = nextcluster;
 1007869:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 100786d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
 1007871:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:114
            return 1;
 1007873:	83 c4 10             	add    esp,0x10
 1007876:	b8 01 00 00 00       	mov    eax,0x1
 100787b:	eb 24                	jmp    10078a1 <fatfs_allocate_free_space+0xb5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:119
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
 100787d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
 1007881:	8b 00                	mov    eax,DWORD PTR [eax]
 1007883:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:121

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
 1007887:	83 ec 04             	sub    esp,0x4
 100788a:	53                   	push   ebx
 100788b:	8d 44 24 14          	lea    eax,[esp+0x14]
 100788f:	50                   	push   eax
 1007890:	56                   	push   esi
 1007891:	e8 c2 fe ff ff       	call   1007758 <fatfs_add_free_space>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:89
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
        return 0;
 1007896:	83 c4 10             	add    esp,0x10
 1007899:	85 c0                	test   eax,eax
 100789b:	0f 95 c0             	setne  al
 100789e:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:125

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
            return 0;

    return 1;
}
 10078a1:	83 c4 14             	add    esp,0x14
 10078a4:	5b                   	pop    ebx
 10078a5:	5e                   	pop    esi
 10078a6:	c3                   	ret    

010078a7 <fatfs_add_file_entry>:
fatfs_add_file_entry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:267
}
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
 10078a7:	55                   	push   ebp
 10078a8:	57                   	push   edi
 10078a9:	56                   	push   esi
 10078aa:	53                   	push   ebx
 10078ab:	83 ec 5c             	sub    esp,0x5c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:285
    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
 10078ae:	c7 44 24 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
 10078b5:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:284

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
 10078b6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
 10078ba:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
 10078be:	0f 84 a3 03 00 00    	je     1007c67 <fatfs_add_file_entry+0x3c0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:290
        return 0;

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
 10078c4:	83 ec 0c             	sub    esp,0xc
 10078c7:	ff b4 24 84 00 00 00 	push   DWORD PTR [esp+0x84]
 10078ce:	e8 63 ed ff ff       	call   1006636 <fatfs_lfn_entries_required>
 10078d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:291
    if (!entryCount)
 10078d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:292
        return 0;
 10078da:	c7 44 24 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
 10078e1:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:291

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
    if (!entryCount)
 10078e2:	85 c0                	test   eax,eax
 10078e4:	0f 84 7d 03 00 00    	je     1007c67 <fatfs_add_file_entry+0x3c0>
fatfs_find_free_dir_offset():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:141
    int x=0;
    int possible_spaces = 0;
    int start_recorded = 0;

    // No entries required?
    if (entryCount == 0)
 10078ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 10078ee:	83 c0 01             	add    eax,0x1
 10078f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
 10078f5:	0f 84 6c 03 00 00    	je     1007c67 <fatfs_add_file_entry+0x3c0>
 10078fb:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 1007902:	00 
 1007903:	bd 00 00 00 00       	mov    ebp,0x0
 1007908:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 100790f:	00 
 1007910:	c7 44 24 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
 1007917:	00 
 1007918:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:148

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
 100791d:	6a 00                	push   0x0
 100791f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1007923:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 1007927:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 100792b:	e8 55 bf ff ff       	call   1003885 <fatfs_sector_reader>
 1007930:	83 c4 10             	add    esp,0x10
 1007933:	85 c0                	test   eax,eax
 1007935:	0f 84 cf 00 00 00    	je     1007a0a <fatfs_add_file_entry+0x163>
 100793b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
 100793f:	8d 78 44             	lea    edi,[eax+0x44]
 1007942:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:160

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
 1007947:	83 ec 0c             	sub    esp,0xc
 100794a:	57                   	push   edi
 100794b:	e8 04 ec ff ff       	call   1006554 <fatfs_entry_lfn_text>
 1007950:	83 c4 10             	add    esp,0x10
 1007953:	85 c0                	test   eax,eax
 1007955:	74 25                	je     100797c <fatfs_add_file_entry+0xd5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:163
                {
                    // First entry?
                    if (possible_spaces == 0)
 1007957:	85 db                	test   ebx,ebx
 1007959:	0f 44 ee             	cmove  ebp,esi
 100795c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1007960:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
 1007965:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 1007969:	b8 01 00 00 00       	mov    eax,0x1
 100796e:	0f 45 44 24 08       	cmovne eax,DWORD PTR [esp+0x8]
 1007973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:173
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns
                    // out to be deleted...
                    possible_spaces++;
 1007977:	83 c3 01             	add    ebx,0x1
 100797a:	eb 74                	jmp    10079f0 <fatfs_add_file_entry+0x149>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:179
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
 100797c:	0f b6 07             	movzx  eax,BYTE PTR [edi]
 100797f:	3c e5                	cmp    al,0xe5
 1007981:	75 2e                	jne    10079b1 <fatfs_add_file_entry+0x10a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:182
                    {
                        // First entry?
                        if (possible_spaces == 0)
 1007983:	85 db                	test   ebx,ebx
 1007985:	0f 44 ee             	cmove  ebp,esi
 1007988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 100798c:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
 1007991:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 1007995:	b8 01 00 00 00       	mov    eax,0x1
 100799a:	0f 45 44 24 08       	cmovne eax,DWORD PTR [esp+0x8]
 100799f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:190
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
 10079a3:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:193

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
 10079a6:	39 5c 24 10          	cmp    DWORD PTR [esp+0x10],ebx
 10079aa:	7f 44                	jg     10079f0 <fatfs_add_file_entry+0x149>
 10079ac:	e9 04 01 00 00       	jmp    1007ab5 <fatfs_add_file_entry+0x20e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:199
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
 10079b1:	84 c0                	test   al,al
 10079b3:	75 2e                	jne    10079e3 <fatfs_add_file_entry+0x13c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:202
                    {
                        // First entry?
                        if (possible_spaces == 0)
 10079b5:	85 db                	test   ebx,ebx
 10079b7:	0f 44 ee             	cmove  ebp,esi
 10079ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 10079be:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
 10079c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 10079c7:	b8 01 00 00 00       	mov    eax,0x1
 10079cc:	0f 45 44 24 08       	cmovne eax,DWORD PTR [esp+0x8]
 10079d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:211
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
 10079d5:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:214

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
 10079d8:	39 5c 24 10          	cmp    DWORD PTR [esp+0x10],ebx
 10079dc:	7f 12                	jg     10079f0 <fatfs_add_file_entry+0x149>
 10079de:	e9 d2 00 00 00       	jmp    1007ab5 <fatfs_add_file_entry+0x20e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:222
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
                        start_recorded = 0;
 10079e3:	c7 44 24 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
 10079ea:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:221
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
 10079eb:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:151
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 10079f0:	83 c6 01             	add    esi,0x1
 10079f3:	83 c7 20             	add    edi,0x20
 10079f6:	89 f0                	mov    eax,esi
 10079f8:	3c 10                	cmp    al,0x10
 10079fa:	0f 85 47 ff ff ff    	jne    1007947 <fatfs_add_file_entry+0xa0>
 1007a00:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
 1007a05:	e9 13 ff ff ff       	jmp    100791d <fatfs_add_file_entry+0x76>
 1007a0a:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:233
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
 1007a0c:	83 ec 04             	sub    esp,0x4
 1007a0f:	8d 44 24 30          	lea    eax,[esp+0x30]
 1007a13:	50                   	push   eax
 1007a14:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
 1007a18:	ff 70 08             	push   DWORD PTR [eax+0x8]
 1007a1b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 1007a1f:	e8 1b fa ff ff       	call   100743f <fatfs_find_blank_cluster>
 1007a24:	83 c4 10             	add    esp,0x10
 1007a27:	85 c0                	test   eax,eax
 1007a29:	0f 84 2e 02 00 00    	je     1007c5d <fatfs_add_file_entry+0x3b6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:237
                return 0;

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
 1007a2f:	83 ec 04             	sub    esp,0x4
 1007a32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 1007a36:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 1007a3a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 1007a3e:	e8 d3 fb ff ff       	call   1007616 <fatfs_fat_add_cluster_to_chain>
 1007a43:	83 c4 10             	add    esp,0x10
 1007a46:	85 c0                	test   eax,eax
 1007a48:	0f 84 0f 02 00 00    	je     1007c5d <fatfs_add_file_entry+0x3b6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:241
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
 1007a4e:	83 ec 04             	sub    esp,0x4
 1007a51:	68 00 02 00 00       	push   0x200
 1007a56:	6a 00                	push   0x0
 1007a58:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
 1007a5c:	83 c0 44             	add    eax,0x44
 1007a5f:	50                   	push   eax
 1007a60:	e8 ce 14 00 00       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:242
            for (i=0;i<fs->sectors_per_cluster;i++)
 1007a65:	83 c4 10             	add    esp,0x10
 1007a68:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
 1007a6c:	80 38 00             	cmp    BYTE PTR [eax],0x0
 1007a6f:	74 29                	je     1007a9a <fatfs_add_file_entry+0x1f3>
 1007a71:	bb 00 00 00 00       	mov    ebx,0x0
 1007a76:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:244
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
 1007a78:	6a 00                	push   0x0
 1007a7a:	0f b6 c3             	movzx  eax,bl
 1007a7d:	50                   	push   eax
 1007a7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
 1007a82:	57                   	push   edi
 1007a83:	e8 65 bf ff ff       	call   10039ed <fatfs_write_sector>
 1007a88:	83 c4 10             	add    esp,0x10
 1007a8b:	85 c0                	test   eax,eax
 1007a8d:	0f 84 ca 01 00 00    	je     1007c5d <fatfs_add_file_entry+0x3b6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:242
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
 1007a93:	83 c3 01             	add    ebx,0x1
 1007a96:	3a 1f                	cmp    bl,BYTE PTR [edi]
 1007a98:	72 de                	jb     1007a78 <fatfs_add_file_entry+0x1d1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:148

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
 1007a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1007a9e:	85 c0                	test   eax,eax
 1007aa0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1007aa4:	0f 45 54 24 04       	cmovne edx,DWORD PTR [esp+0x4]
 1007aa9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
 1007aad:	b8 00 00 00 00       	mov    eax,0x0
 1007ab2:	0f 44 e8             	cmove  ebp,eax
 1007ab5:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
 1007ab9:	8d 70 0b             	lea    esi,[eax+0xb]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:242 (discriminator 6)
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
 1007abc:	89 c1                	mov    ecx,eax
 1007abe:	b8 00 00 00 00       	mov    eax,0x0
fatfs_add_file_entry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:305 (discriminator 6)
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
 1007ac3:	bb 80 ff ff ff       	mov    ebx,0xffffff80
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:305 (discriminator 7)
 1007ac8:	89 c2                	mov    edx,eax
 1007aca:	83 e2 01             	and    edx,0x1
 1007acd:	0f 45 d3             	cmovne edx,ebx
 1007ad0:	83 c1 01             	add    ecx,0x1
 1007ad3:	d0 e8                	shr    al,1
 1007ad5:	02 41 ff             	add    al,BYTE PTR [ecx-0x1]
 1007ad8:	01 d0                	add    eax,edx
 1007ada:	39 ce                	cmp    esi,ecx
 1007adc:	75 ea                	jne    1007ac8 <fatfs_add_file_entry+0x221>
 1007ade:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
 1007ae2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
 1007ae6:	bf 00 00 00 00       	mov    edi,0x0
 1007aeb:	c7 44 24 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
 1007af2:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:351
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
 1007af3:	0f b6 c0             	movzx  eax,al
 1007af6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:361
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
 1007afa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
 1007afe:	83 c0 44             	add    eax,0x44
 1007b01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
 1007b05:	89 e8                	mov    eax,ebp
 1007b07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
 1007b0b:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
 1007b0f:	eb 0d                	jmp    1007b1e <fatfs_add_file_entry+0x277>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:364
                    return 0;

                dirtySector = 0;
 1007b11:	c7 44 24 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
 1007b18:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:314

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
 1007b19:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
 1007b1e:	6a 00                	push   0x0
 1007b20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 1007b24:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 1007b28:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 1007b2c:	e8 54 bd ff ff       	call   1003885 <fatfs_sector_reader>
 1007b31:	83 c4 10             	add    esp,0x10
 1007b34:	85 c0                	test   eax,eax
 1007b36:	0f 84 27 01 00 00    	je     1007c63 <fatfs_add_file_entry+0x3bc>
 1007b3c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
 1007b40:	8d 70 44             	lea    esi,[eax+0x44]
 1007b43:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:324
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
 1007b48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
 1007b4c:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
 1007b50:	0f 94 c2             	sete   dl
 1007b53:	85 ff                	test   edi,edi
 1007b55:	0f 94 c0             	sete   al
 1007b58:	84 c2                	test   dl,al
 1007b5a:	74 06                	je     1007b62 <fatfs_add_file_entry+0x2bb>
 1007b5c:	38 5c 24 0c          	cmp    BYTE PTR [esp+0xc],bl
 1007b60:	74 0a                	je     1007b6c <fatfs_add_file_entry+0x2c5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:328
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
 1007b62:	85 ff                	test   edi,edi
 1007b64:	0f 84 ab 00 00 00    	je     1007c15 <fatfs_add_file_entry+0x36e>
 1007b6a:	eb 05                	jmp    1007b71 <fatfs_add_file_entry+0x2ca>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:325
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
                        foundEnd = 1;
 1007b6c:	bf 01 00 00 00       	mov    edi,0x1
 1007b71:	89 d8                	mov    eax,ebx
 1007b73:	c1 e0 05             	shl    eax,0x5
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:330

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
 1007b76:	85 ed                	test   ebp,ebp
 1007b78:	75 7b                	jne    1007bf5 <fatfs_add_file_entry+0x34e>
 1007b7a:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:333
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
 1007b7c:	83 ec 0c             	sub    esp,0xc
 1007b7f:	ff b4 24 94 00 00 00 	push   DWORD PTR [esp+0x94]
 1007b86:	8d 5c 24 40          	lea    ebx,[esp+0x40]
 1007b8a:	53                   	push   ebx
 1007b8b:	ff b4 24 94 00 00 00 	push   DWORD PTR [esp+0x94]
 1007b92:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
 1007b99:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
 1007ba0:	e8 ea eb ff ff       	call   100678f <fatfs_sfn_create_entry>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:337

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
 1007ba5:	83 c4 20             	add    esp,0x20
 1007ba8:	6a 01                	push   0x1
 1007baa:	6a 01                	push   0x1
 1007bac:	6a 01                	push   0x1
 1007bae:	53                   	push   ebx
 1007baf:	e8 14 c2 ff ff       	call   1003dc8 <fatfs_update_timestamps>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:340
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
 1007bb4:	83 c4 0c             	add    esp,0xc
 1007bb7:	6a 20                	push   0x20
 1007bb9:	53                   	push   ebx
 1007bba:	0f b7 ef             	movzx  ebp,di
 1007bbd:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
 1007bc1:	8d 44 28 44          	lea    eax,[eax+ebp*1+0x44]
 1007bc5:	50                   	push   eax
 1007bc6:	e8 b5 1b 00 00       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:343

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1007bcb:	83 c4 0c             	add    esp,0xc
 1007bce:	6a 01                	push   0x1
 1007bd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
 1007bd4:	83 c0 44             	add    eax,0x44
 1007bd7:	50                   	push   eax
 1007bd8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
 1007bdc:	ff b0 44 02 00 00    	push   DWORD PTR [eax+0x244]
 1007be2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
 1007be9:	ff 50 38             	call   DWORD PTR [eax+0x38]
 1007bec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
 1007bf0:	83 c4 10             	add    esp,0x10
 1007bf3:	eb 72                	jmp    1007c67 <fatfs_add_file_entry+0x3c0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:348
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
 1007bf5:	83 ed 01             	sub    ebp,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:351

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
 1007bf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1007bfc:	55                   	push   ebp
 1007bfd:	56                   	push   esi
 1007bfe:	ff b4 24 84 00 00 00 	push   DWORD PTR [esp+0x84]
 1007c05:	e8 60 ea ff ff       	call   100666a <fatfs_filename_to_lfn>
 1007c0a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:352
                        dirtySector = 1;
 1007c0d:	c7 44 24 10 01 00 00 	mov    DWORD PTR [esp+0x10],0x1
 1007c14:	00 
 1007c15:	83 c3 01             	add    ebx,0x1
 1007c18:	83 c6 20             	add    esi,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:317 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1007c1b:	83 fb 10             	cmp    ebx,0x10
 1007c1e:	0f 85 24 ff ff ff    	jne    1007b48 <fatfs_add_file_entry+0x2a1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:359
#endif
                }
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
 1007c24:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
 1007c29:	0f 84 ea fe ff ff    	je     1007b19 <fatfs_add_file_entry+0x272>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:361
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
 1007c2f:	83 ec 04             	sub    esp,0x4
 1007c32:	6a 01                	push   0x1
 1007c34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 1007c38:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
 1007c3c:	ff b0 44 02 00 00    	push   DWORD PTR [eax+0x244]
 1007c42:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
 1007c49:	ff 50 38             	call   DWORD PTR [eax+0x38]
 1007c4c:	83 c4 10             	add    esp,0x10
 1007c4f:	85 c0                	test   eax,eax
 1007c51:	0f 85 ba fe ff ff    	jne    1007b11 <fatfs_add_file_entry+0x26a>
 1007c57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
 1007c5b:	eb 0a                	jmp    1007c67 <fatfs_add_file_entry+0x3c0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:300
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
        return 0;
 1007c5d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
 1007c61:	eb 04                	jmp    1007c67 <fatfs_add_file_entry+0x3c0>
 1007c63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:372
        else
            return 0;
    } // End of while loop

    return 0;
}
 1007c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1007c6b:	83 c4 5c             	add    esp,0x5c
 1007c6e:	5b                   	pop    ebx
 1007c6f:	5e                   	pop    esi
 1007c70:	5f                   	pop    edi
 1007c71:	5d                   	pop    ebp
 1007c72:	c3                   	ret    
 1007c73:	90                   	nop

01007c74 <ataWaitForDRQ>:
ataWaitForDRQ():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:22
float ticks=0;
struct ataDeviceInfo_t* atablockingReadDev;

//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
 1007c74:	57                   	push   edi
 1007c75:	56                   	push   esi
 1007c76:	53                   	push   ebx
 1007c77:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 1007c7b:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:23
    int ticks = forHowManyMS*kTicksPerMS;
 1007c80:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
 1007c84:	0f af 0d c4 97 12 00 	imul   ecx,DWORD PTR ds:0x1297c4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:25
    uint8_t inValue=0;
    while (ticks > 0)
 1007c8b:	85 c9                	test   ecx,ecx
 1007c8d:	7e 26                	jle    1007cb5 <ataWaitForDRQ+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:30
    {
        STI
        //waitTicks(1);
        __asm__("sti\nhlt\n");
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
 1007c8f:	0f b7 87 69 02 00 00 	movzx  eax,WORD PTR [edi+0x269]
 1007c96:	8d 50 07             	lea    edx,[eax+0x7]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:27
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
    while (ticks > 0)
    {
        STI
 1007c99:	fb                   	sti    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:29
        //waitTicks(1);
        __asm__("sti\nhlt\n");
 1007c9a:	fb                   	sti    
 1007c9b:	f4                   	hlt    
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1007c9c:	ec                   	in     al,dx
 1007c9d:	89 c6                	mov    esi,eax
ataWaitForDRQ():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:31
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
        if (toBeSet && (inValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ)
 1007c9f:	84 db                	test   bl,bl
 1007ca1:	74 06                	je     1007ca9 <ataWaitForDRQ+0x35>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:31 (discriminator 1)
 1007ca3:	a8 08                	test   al,0x8
 1007ca5:	74 07                	je     1007cae <ataWaitForDRQ+0x3a>
 1007ca7:	eb 31                	jmp    1007cda <ataWaitForDRQ+0x66>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:33 (discriminator 1)
                return 0;
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
 1007ca9:	83 e0 08             	and    eax,0x8
 1007cac:	74 31                	je     1007cdf <ataWaitForDRQ+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:25
//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
    while (ticks > 0)
 1007cae:	83 e9 01             	sub    ecx,0x1
 1007cb1:	75 e6                	jne    1007c99 <ataWaitForDRQ+0x25>
 1007cb3:	eb 05                	jmp    1007cba <ataWaitForDRQ+0x46>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:24

//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
 1007cb5:	be 00 00 00 00       	mov    esi,0x0
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007cba:	8b 87 69 02 00 00    	mov    eax,DWORD PTR [edi+0x269]
 1007cc0:	8d 50 01             	lea    edx,[eax+0x1]
 1007cc3:	ec                   	in     al,dx
ataWaitForDRQ():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:37
                return 0;
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
                return 0;
        ticks--;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
 1007cc4:	0f b6 d0             	movzx  edx,al
 1007cc7:	89 15 7c 9c 07 01    	mov    DWORD PTR ds:0x1079c7c,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:38
    if ((hdError & 0x4)==0x4)
 1007ccd:	83 e0 04             	and    eax,0x4
 1007cd0:	b8 00 00 00 00       	mov    eax,0x0
 1007cd5:	0f 44 c6             	cmove  eax,esi
 1007cd8:	eb 05                	jmp    1007cdf <ataWaitForDRQ+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:32
        STI
        //waitTicks(1);
        __asm__("sti\nhlt\n");
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
        if (toBeSet && (inValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ)
                return 0;
 1007cda:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:41
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
    if ((hdError & 0x4)==0x4)
        return 0;
    return inValue;
}
 1007cdf:	5b                   	pop    ebx
 1007ce0:	5e                   	pop    esi
 1007ce1:	5f                   	pop    edi
 1007ce2:	c3                   	ret    

01007ce3 <ataWaitForIdle>:
ataWaitForIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:44

uint8_t ataWaitForIdle(struct ataDeviceInfo_t* devInfo)
{
 1007ce3:	53                   	push   ebx
 1007ce4:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:48
    ticks = 0;
    uint8_t lValue=0;
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
 1007ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1007ceb:	8b 98 69 02 00 00    	mov    ebx,DWORD PTR [eax+0x269]
 1007cf1:	8d 53 07             	lea    edx,[ebx+0x7]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007cf4:	ec                   	in     al,dx
 1007cf5:	89 c1                	mov    ecx,eax
ataWaitForIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:51
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
 1007cf7:	c7 05 70 9c 07 01 00 	mov    DWORD PTR ds:0x1079c70,0x3f800000
 1007cfe:	00 80 3f 
 1007d01:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 1007d06:	8d 04 80             	lea    eax,[eax+eax*4]
 1007d09:	01 c0                	add    eax,eax
 1007d0b:	89 04 24             	mov    DWORD PTR [esp],eax
 1007d0e:	db 04 24             	fild   DWORD PTR [esp]
 1007d11:	d9 5c 24 04          	fstp   DWORD PTR [esp+0x4]
 1007d15:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
 1007d19:	d9 ee                	fldz   
 1007d1b:	d9 c9                	fxch   st(1)
 1007d1d:	db e9                	fucomi st,st(1)
 1007d1f:	dd d9                	fstp   st(1)
 1007d21:	72 5a                	jb     1007d7d <ataWaitForIdle+0x9a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:53
    {
        __asm__("sti\nhlt\n");
 1007d23:	fb                   	sti    
 1007d24:	f4                   	hlt    
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007d25:	ec                   	in     al,dx
 1007d26:	89 c1                	mov    ecx,eax
ataWaitForIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:56
        lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
 1007d28:	25 88 00 00 00       	and    eax,0x88
 1007d2d:	74 60                	je     1007d8f <ataWaitForIdle+0xac>
 1007d2f:	d9 e8                	fld1   
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:58
                    return 0;
        ticks++;
 1007d31:	d9 e8                	fld1   
 1007d33:	eb 1c                	jmp    1007d51 <ataWaitForIdle+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:53
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
    {
        __asm__("sti\nhlt\n");
 1007d35:	fb                   	sti    
 1007d36:	f4                   	hlt    
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007d37:	ec                   	in     al,dx
 1007d38:	89 c1                	mov    ecx,eax
ataWaitForIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:56
        lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
 1007d3a:	25 88 00 00 00       	and    eax,0x88
 1007d3f:	75 0c                	jne    1007d4d <ataWaitForIdle+0x6a>
 1007d41:	dd d8                	fstp   st(0)
 1007d43:	dd d8                	fstp   st(0)
 1007d45:	d9 1d 70 9c 07 01    	fstp   DWORD PTR ds:0x1079c70
 1007d4b:	eb 44                	jmp    1007d91 <ataWaitForIdle+0xae>
 1007d4d:	d9 ca                	fxch   st(2)
 1007d4f:	d9 c9                	fxch   st(1)
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:58
                    return 0;
        ticks++;
 1007d51:	dc c1                	fadd   st(1),st
 1007d53:	d9 c9                	fxch   st(1)
 1007d55:	d9 5c 24 04          	fstp   DWORD PTR [esp+0x4]
 1007d59:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:51
    uint8_t lValue=0;
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
 1007d5d:	d9 c1                	fld    st(1)
 1007d5f:	d8 c1                	fadd   st,st(1)
 1007d61:	d9 5c 24 04          	fstp   DWORD PTR [esp+0x4]
 1007d65:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
 1007d69:	d9 cb                	fxch   st(3)
 1007d6b:	db e9                	fucomi st,st(1)
 1007d6d:	dd d9                	fstp   st(1)
 1007d6f:	73 c4                	jae    1007d35 <ataWaitForIdle+0x52>
 1007d71:	dd d8                	fstp   st(0)
 1007d73:	dd d8                	fstp   st(0)
 1007d75:	d9 1d 70 9c 07 01    	fstp   DWORD PTR ds:0x1079c70
 1007d7b:	eb 02                	jmp    1007d7f <ataWaitForIdle+0x9c>
 1007d7d:	dd d8                	fstp   st(0)
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007d7f:	8d 53 01             	lea    edx,[ebx+0x1]
 1007d82:	ec                   	in     al,dx
ataWaitForIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:60
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
                    return 0;
        ticks++;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
 1007d83:	0f b6 c0             	movzx  eax,al
 1007d86:	a3 7c 9c 07 01       	mov    ds:0x1079c7c,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:61
    return lValue;
 1007d8b:	89 c8                	mov    eax,ecx
 1007d8d:	eb 02                	jmp    1007d91 <ataWaitForIdle+0xae>
 1007d8f:	dd d8                	fstp   st(0)
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:62
}
 1007d91:	83 c4 08             	add    esp,0x8
 1007d94:	5b                   	pop    ebx
 1007d95:	c3                   	ret    

01007d96 <ataControllerIsReady>:
ataControllerIsReady():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:66


uint8_t ataControllerIsReady(struct ataDeviceInfo_t* devInfo)
{
 1007d96:	55                   	push   ebp
 1007d97:	57                   	push   edi
 1007d98:	56                   	push   esi
 1007d99:	53                   	push   ebx
 1007d9a:	83 ec 0c             	sub    esp,0xc
 1007d9d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:69
    int ticks = 0;
    
    int lStatus=0;
 1007da1:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:67
}


uint8_t ataControllerIsReady(struct ataDeviceInfo_t* devInfo)
{
    int ticks = 0;
 1007da6:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:72
    
    int lStatus=0;
    uint8_t err=0;

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
 1007dab:	eb 2a                	jmp    1007dd7 <ataControllerIsReady+0x41>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007dad:	0f b7 87 69 02 00 00 	movzx  eax,WORD PTR [edi+0x269]
 1007db4:	8d 50 07             	lea    edx,[eax+0x7]
 1007db7:	ec                   	in     al,dx
 1007db8:	89 c3                	mov    ebx,eax
ataControllerIsReady():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:75
    {
        lStatus=inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
 1007dba:	83 ec 0c             	sub    esp,0xc
 1007dbd:	6a 01                	push   0x1
 1007dbf:	e8 44 29 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:76
        ticks++;
 1007dc4:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:77
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
 1007dc7:	89 dd                	mov    ebp,ebx
 1007dc9:	81 e5 d0 00 00 00    	and    ebp,0xd0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:78
        if (lStatus & ATA_STATUS_READY )
 1007dcf:	83 c4 10             	add    esp,0x10
 1007dd2:	f6 c3 40             	test   bl,0x40
 1007dd5:	75 71                	jne    1007e48 <ataControllerIsReady+0xb2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:72
    int ticks = 0;
    
    int lStatus=0;
    uint8_t err=0;

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
 1007dd7:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 1007ddc:	8d 04 80             	lea    eax,[eax+eax*4]
 1007ddf:	01 c0                	add    eax,eax
 1007de1:	39 c6                	cmp    esi,eax
 1007de3:	7e c8                	jle    1007dad <ataControllerIsReady+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:82
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
        if (lStatus & ATA_STATUS_READY )
                return true;
    }

    if (lStatus==ATA_STATUS_ERROR || lStatus==ATA_STATUS_BUSY)
 1007de5:	81 fd 80 00 00 00    	cmp    ebp,0x80
 1007deb:	75 41                	jne    1007e2e <ataControllerIsReady+0x98>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007ded:	ba f1 01 00 00       	mov    edx,0x1f1
 1007df2:	ec                   	in     al,dx
 1007df3:	89 c3                	mov    ebx,eax
ataControllerIsReady():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:86
    {
         err=inb(0x1f1);
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007df5:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007dfc:	74 4a                	je     1007e48 <ataControllerIsReady+0xb2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:87
            printd(DEBUG_HARDDRIVE,"ataControllerIsReady: DRQ wait failed, lStatus=%02X, err=%02X\n",lStatus,err);
 1007dfe:	0f b6 c0             	movzx  eax,al
 1007e01:	50                   	push   eax
 1007e02:	68 80 00 00 00       	push   0x80
 1007e07:	68 90 1c 04 01       	push   0x1041c90
 1007e0c:	6a 08                	push   0x8
 1007e0e:	e8 f4 1e 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:90
#endif
    }
    if ( (lStatus & ATA_STATUS_READY)==0 && err==4)
 1007e13:	83 c4 10             	add    esp,0x10
 1007e16:	f7 c5 40 00 00 00    	test   ebp,0x40
 1007e1c:	75 10                	jne    1007e2e <ataControllerIsReady+0x98>
 1007e1e:	80 fb 04             	cmp    bl,0x4
 1007e21:	0f 94 c0             	sete   al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:91
        lStatus=ATA_STATUS_READY;
 1007e24:	84 c0                	test   al,al
 1007e26:	b8 40 00 00 00       	mov    eax,0x40
 1007e2b:	0f 45 e8             	cmovne ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:93
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007e2e:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007e35:	74 11                	je     1007e48 <ataControllerIsReady+0xb2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:94
            printk("ataControllerIsReady: returning %02X\n",lStatus);
 1007e37:	83 ec 08             	sub    esp,0x8
 1007e3a:	55                   	push   ebp
 1007e3b:	68 d0 1c 04 01       	push   0x1041cd0
 1007e40:	e8 aa 1e 00 00       	call   1009cef <printk>
 1007e45:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:97
#endif
    return true;
}
 1007e48:	b8 01 00 00 00       	mov    eax,0x1
 1007e4d:	83 c4 0c             	add    esp,0xc
 1007e50:	5b                   	pop    ebx
 1007e51:	5e                   	pop    esi
 1007e52:	5f                   	pop    edi
 1007e53:	5d                   	pop    ebp
 1007e54:	c3                   	ret    

01007e55 <ataSelectDrive>:
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:115
		return true;
	return 1;
}

bool ataSelectDrive(struct ataDeviceInfo_t* devInfo, uint8_t head)
{
 1007e55:	57                   	push   edi
 1007e56:	56                   	push   esi
 1007e57:	53                   	push   ebx
 1007e58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 1007e5c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:116
    ataWaitForIdle(devInfo);
 1007e60:	56                   	push   esi
 1007e61:	e8 7d fe ff ff       	call   1007ce3 <ataWaitForIdle>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:117
    outb(devInfo->ioPort+ATA_DRIVE_SELECT, devInfo->driveHeadPortDesignation | (head& 0xF) ); 
 1007e66:	8b 8e 69 02 00 00    	mov    ecx,DWORD PTR [esi+0x269]
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1007e6c:	89 d8                	mov    eax,ebx
 1007e6e:	83 e0 0f             	and    eax,0xf
 1007e71:	0a 86 6e 02 00 00    	or     al,BYTE PTR [esi+0x26e]
 1007e77:	8d 51 06             	lea    edx,[ecx+0x6]
 1007e7a:	ee                   	out    dx,al
ataStatusIsOk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:101
    return true;
}

static bool ataStatusIsOk(struct ataDeviceInfo_t* devInfo)
{
	unsigned char status = inb(devInfo->ioPort+ATA_PORT_STATUS);
 1007e7b:	8d 51 07             	lea    edx,[ecx+0x7]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1007e7e:	ec                   	in     al,dx
ataStatusIsOk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:103

	if (status & ATA_STATUS_BUSY)
 1007e7f:	83 c4 04             	add    esp,0x4
 1007e82:	84 c0                	test   al,al
 1007e84:	0f 88 92 00 00 00    	js     1007f1c <ataSelectDrive+0xc7>
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:136
        unsigned lDrive=inb(devInfo->ioPort+ATA_DRIVE_SELECT);
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
    }
#endif
        
    return 0;
 1007e8a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:128
            printk("ataSelectDrive: Failed to select drive %u, bus %u, status=0x%02X is not ok\n", devInfo->driveNo, devInfo->bus, inb(devInfo->ioPort+ATA_PORT_STATUS));
#endif
            return inb(devInfo->ioPort+ATA_PORT_STATUS);
    }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007e8f:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007e96:	0f 84 8e 00 00 00    	je     1007f2a <ataSelectDrive+0xd5>
 1007e9c:	eb 2f                	jmp    1007ecd <ataSelectDrive+0x78>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007e9e:	ec                   	in     al,dx
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:123
    //printk("Sending 0x%02X", drive==master?ATA_DRIVE_MASTER:ATA_DRIVE_SLAVE | (head& 0xF));
    if (!ataStatusIsOk(devInfo))
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataSelectDrive: Failed to select drive %u, bus %u, status=0x%02X is not ok\n", devInfo->driveNo, devInfo->bus, inb(devInfo->ioPort+ATA_PORT_STATUS));
 1007e9f:	0f b6 c0             	movzx  eax,al
 1007ea2:	50                   	push   eax
 1007ea3:	ff b6 61 02 00 00    	push   DWORD PTR [esi+0x261]
 1007ea9:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 1007eaf:	68 f8 1c 04 01       	push   0x1041cf8
 1007eb4:	e8 36 1e 00 00       	call   1009cef <printk>
 1007eb9:	83 c4 10             	add    esp,0x10
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007ebc:	8b 86 69 02 00 00    	mov    eax,DWORD PTR [esi+0x269]
 1007ec2:	8d 50 07             	lea    edx,[eax+0x7]
 1007ec5:	ec                   	in     al,dx
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:125
#endif
            return inb(devInfo->ioPort+ATA_PORT_STATUS);
 1007ec6:	84 c0                	test   al,al
 1007ec8:	0f 95 c0             	setne  al
 1007ecb:	eb 5d                	jmp    1007f2a <ataSelectDrive+0xd5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:130
    }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
    {
        wait(10);
 1007ecd:	83 ec 0c             	sub    esp,0xc
 1007ed0:	6a 0a                	push   0xa
 1007ed2:	e8 31 28 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:131
        unsigned lDrive=inb(devInfo->ioPort+ATA_DRIVE_SELECT);
 1007ed7:	8b 8e 69 02 00 00    	mov    ecx,DWORD PTR [esi+0x269]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007edd:	8d 51 06             	lea    edx,[ecx+0x6]
 1007ee0:	ec                   	in     al,dx
 1007ee1:	89 c3                	mov    ebx,eax
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:131
 1007ee3:	0f b6 f8             	movzx  edi,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007ee6:	8d 51 01             	lea    edx,[ecx+0x1]
 1007ee9:	ec                   	in     al,dx
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:132
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
 1007eea:	0f b6 c8             	movzx  ecx,al
 1007eed:	83 e3 10             	and    ebx,0x10
 1007ef0:	ba 7a ed 05 01       	mov    edx,0x105ed7a
 1007ef5:	b8 84 74 06 01       	mov    eax,0x1067484
 1007efa:	0f 44 c2             	cmove  eax,edx
 1007efd:	89 0c 24             	mov    DWORD PTR [esp],ecx
 1007f00:	57                   	push   edi
 1007f01:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 1007f07:	50                   	push   eax
 1007f08:	68 44 1d 04 01       	push   0x1041d44
 1007f0d:	e8 dd 1d 00 00       	call   1009cef <printk>
 1007f12:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:136
    }
#endif
        
    return 0;
 1007f15:	b8 00 00 00 00       	mov    eax,0x0
 1007f1a:	eb 0e                	jmp    1007f2a <ataSelectDrive+0xd5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:122
    outb(devInfo->ioPort+ATA_DRIVE_SELECT, devInfo->driveHeadPortDesignation | (head& 0xF) ); 
    //printk("Sending 0x%02X", drive==master?ATA_DRIVE_MASTER:ATA_DRIVE_SLAVE | (head& 0xF));
    if (!ataStatusIsOk(devInfo))
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007f1c:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007f23:	74 97                	je     1007ebc <ataSelectDrive+0x67>
 1007f25:	e9 74 ff ff ff       	jmp    1007e9e <ataSelectDrive+0x49>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:137
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
    }
#endif
        
    return 0;
}
 1007f2a:	5b                   	pop    ebx
 1007f2b:	5e                   	pop    esi
 1007f2c:	5f                   	pop    edi
 1007f2d:	c3                   	ret    

01007f2e <ataInit>:
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:180
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataResetController: controller is ready\n");
#endif
}
int ataInit(struct ataDeviceInfo_t* devInfo)
{
 1007f2e:	57                   	push   edi
 1007f2f:	56                   	push   esi
 1007f30:	53                   	push   ebx
 1007f31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1007f35:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1007f3c:	8d 50 07             	lea    edx,[eax+0x7]
 1007f3f:	b8 04 00 00 00       	mov    eax,0x4
 1007f44:	ee                   	out    dx,al
ataResetController():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:163
}
*/
static void ataResetController(struct ataDeviceInfo_t* devInfo)
{
        outb(devInfo->ioPort+ATA_PORT_COMMAND, 4);
        waitTicks(kTicksPerSecond/10);
 1007f45:	83 ec 0c             	sub    esp,0xc
 1007f48:	8b 0d c0 97 12 00    	mov    ecx,DWORD PTR ds:0x1297c0
 1007f4e:	ba 67 66 66 66       	mov    edx,0x66666667
 1007f53:	89 c8                	mov    eax,ecx
 1007f55:	f7 ea                	imul   edx
 1007f57:	c1 fa 02             	sar    edx,0x2
 1007f5a:	c1 f9 1f             	sar    ecx,0x1f
 1007f5d:	29 ca                	sub    edx,ecx
 1007f5f:	52                   	push   edx
 1007f60:	e8 90 27 00 00       	call   100a6f5 <waitTicks>
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
 1007f65:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1007f6c:	8d 90 f6 03 00 00    	lea    edx,[eax+0x3f6]
 1007f72:	b8 04 00 00 00       	mov    eax,0x4
 1007f77:	ee                   	out    dx,al
ataResetController():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:165
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 1<<2);
        wait(10);
 1007f78:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
 1007f7f:	e8 84 27 00 00       	call   100a708 <wait>
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
 1007f84:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1007f8b:	8d 90 f6 03 00 00    	lea    edx,[eax+0x3f6]
 1007f91:	b8 00 00 00 00       	mov    eax,0x0
 1007f96:	ee                   	out    dx,al
ataResetController():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:167
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 0);
        if (!ataControllerIsReady(devInfo))
 1007f97:	89 34 24             	mov    DWORD PTR [esp],esi
 1007f9a:	e8 f7 fd ff ff       	call   1007d96 <ataControllerIsReady>
 1007f9f:	83 c4 10             	add    esp,0x10
 1007fa2:	84 c0                	test   al,al
 1007fa4:	75 19                	jne    1007fbf <ataInit+0x91>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:169
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007fa6:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007fad:	74 10                	je     1007fbf <ataInit+0x91>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:170
            printk("HD-controller still busy\n");
 1007faf:	83 ec 0c             	sub    esp,0xc
 1007fb2:	68 92 74 06 01       	push   0x1067492
 1007fb7:	e8 33 1d 00 00       	call   1009cef <printk>
 1007fbc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:172
#endif
        if ((hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 0 && (hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 4)
 1007fbf:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1007fc6:	8d 50 01             	lea    edx,[eax+0x1]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1007fc9:	ec                   	in     al,dx
ataResetController():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:172
 1007fca:	84 c0                	test   al,al
 1007fcc:	75 0c                	jne    1007fda <ataInit+0xac>
 1007fce:	c7 05 7c 9c 07 01 00 	mov    DWORD PTR ds:0x1079c7c,0x0
 1007fd5:	00 00 00 
 1007fd8:	eb 34                	jmp    100800e <ataInit+0xe0>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007fda:	ec                   	in     al,dx
ataResetController():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:172
 1007fdb:	0f b6 c0             	movzx  eax,al
 1007fde:	a3 7c 9c 07 01       	mov    ds:0x1079c7c,eax
 1007fe3:	83 f8 04             	cmp    eax,0x4
 1007fe6:	74 26                	je     100800e <ataInit+0xe0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:173
            printk("Controller reset failed on %s bus: %02x\n",devInfo->bus==0?"Primary":"Secondary", hdError);
 1007fe8:	83 be 61 02 00 00 00 	cmp    DWORD PTR [esi+0x261],0x0
 1007fef:	b9 27 eb 04 01       	mov    ecx,0x104eb27
 1007ff4:	ba 8a 74 06 01       	mov    edx,0x106748a
 1007ff9:	0f 45 d1             	cmovne edx,ecx
 1007ffc:	83 ec 04             	sub    esp,0x4
 1007fff:	50                   	push   eax
 1008000:	52                   	push   edx
 1008001:	68 84 1d 04 01       	push   0x1041d84
 1008006:	e8 e4 1c 00 00       	call   1009cef <printk>
 100800b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:175
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 100800e:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1008015:	74 10                	je     1008027 <ataInit+0xf9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:176
            printk("ataResetController: controller is ready\n");
 1008017:	83 ec 0c             	sub    esp,0xc
 100801a:	68 b0 1d 04 01       	push   0x1041db0
 100801f:	e8 cb 1c 00 00       	call   1009cef <printk>
 1008024:	83 c4 10             	add    esp,0x10
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:183
}
int ataInit(struct ataDeviceInfo_t* devInfo)
{
    ataResetController(devInfo);
    int cStatus=0, ticks=0;
    ataSelectDrive(devInfo,0);
 1008027:	83 ec 08             	sub    esp,0x8
 100802a:	6a 00                	push   0x0
 100802c:	56                   	push   esi
 100802d:	e8 23 fe ff ff       	call   1007e55 <ataSelectDrive>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:184
    outb(devInfo->ioPort+ATA_PORT_SECTORCOUNT, 0x55);
 1008032:	8b 8e 69 02 00 00    	mov    ecx,DWORD PTR [esi+0x269]
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1008038:	8d 51 02             	lea    edx,[ecx+0x2]
 100803b:	b8 55 00 00 00       	mov    eax,0x55
 1008040:	ee                   	out    dx,al
 1008041:	8d 51 03             	lea    edx,[ecx+0x3]
 1008044:	b8 aa ff ff ff       	mov    eax,0xffffffaa
 1008049:	ee                   	out    dx,al
 100804a:	8d 51 04             	lea    edx,[ecx+0x4]
 100804d:	b8 55 00 00 00       	mov    eax,0x55
 1008052:	ee                   	out    dx,al
 1008053:	8d 51 05             	lea    edx,[ecx+0x5]
 1008056:	b8 aa ff ff ff       	mov    eax,0xffffffaa
 100805b:	ee                   	out    dx,al
 100805c:	8d 51 07             	lea    edx,[ecx+0x7]
 100805f:	b8 ec ff ff ff       	mov    eax,0xffffffec
 1008064:	ee                   	out    dx,al
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:189
    outb(devInfo->ioPort+ATA_PORT_SECTOR_NUMBER, 0xAA);
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW,0x55);
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH,0xAA);
    outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
    wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
 1008065:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 100806a:	8d 04 80             	lea    eax,[eax+eax*4]
 100806d:	01 c0                	add    eax,eax
 100806f:	89 04 24             	mov    DWORD PTR [esp],eax
 1008072:	e8 91 26 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:190
    cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
 1008077:	8b 8e 69 02 00 00    	mov    ecx,DWORD PTR [esi+0x269]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 100807d:	8d 51 07             	lea    edx,[ecx+0x7]
 1008080:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:190
 1008081:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:191
    if (cStatus==0)
 1008084:	83 c4 10             	add    esp,0x10
 1008087:	85 db                	test   ebx,ebx
 1008089:	75 34                	jne    10080bf <ataInit+0x191>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:197
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
#endif
        return false;
 100808b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:194
    wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
    cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
    if (cStatus==0)
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1008090:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1008097:	0f 84 4d 01 00 00    	je     10081ea <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:195
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
 100809d:	83 ec 04             	sub    esp,0x4
 10080a0:	6a 00                	push   0x0
 10080a2:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 10080a8:	68 ac 74 06 01       	push   0x10674ac
 10080ad:	e8 3d 1c 00 00       	call   1009cef <printk>
 10080b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:197
#endif
        return false;
 10080b5:	b8 00 00 00 00       	mov    eax,0x0
 10080ba:	e9 2b 01 00 00       	jmp    10081ea <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:199
    }
    if ((cStatus & 1) == 1)
 10080bf:	a8 01                	test   al,0x1
 10080c1:	0f 84 80 00 00 00    	je     1008147 <ataInit+0x219>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 10080c7:	8d 51 01             	lea    edx,[ecx+0x1]
 10080ca:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:201
    {
        int err = inb(devInfo->ioPort+ATA_PORT_ERROR);
 10080cb:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:203
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 10080ce:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 10080d5:	74 15                	je     10080ec <ataInit+0x1be>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:204
            printk("drive %02X, cStatus=%02X, errreg=%02X\n",devInfo->driveNo, cStatus,err);
 10080d7:	57                   	push   edi
 10080d8:	53                   	push   ebx
 10080d9:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 10080df:	68 dc 1d 04 01       	push   0x1041ddc
 10080e4:	e8 06 1c 00 00       	call   1009cef <printk>
 10080e9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:207
#endif
        if (err!=4)
            return false;
 10080ec:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:206
        int err = inb(devInfo->ioPort+ATA_PORT_ERROR);
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("drive %02X, cStatus=%02X, errreg=%02X\n",devInfo->driveNo, cStatus,err);
#endif
        if (err!=4)
 10080f1:	83 ff 04             	cmp    edi,0x4
 10080f4:	0f 85 f0 00 00 00    	jne    10081ea <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:208
            return false;
        useCDROMIdentify = true;
 10080fa:	c6 05 80 9c 07 01 01 	mov    BYTE PTR ds:0x1079c80,0x1
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1008101:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1008108:	8d 50 07             	lea    edx,[eax+0x7]
 100810b:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:209
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
 100810c:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:210
        if (cStatus==0)
 100810f:	85 db                	test   ebx,ebx
 1008111:	75 34                	jne    1008147 <ataInit+0x219>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:216
        {
#ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
                printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
#endif
            return false;
 1008113:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:213
        useCDROMIdentify = true;
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        if (cStatus==0)
        {
#ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1008118:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 100811f:	0f 84 c5 00 00 00    	je     10081ea <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:214
                printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
 1008125:	83 ec 04             	sub    esp,0x4
 1008128:	6a 00                	push   0x0
 100812a:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 1008130:	68 ac 74 06 01       	push   0x10674ac
 1008135:	e8 b5 1b 00 00       	call   1009cef <printk>
 100813a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:216
#endif
            return false;
 100813d:	b8 00 00 00 00       	mov    eax,0x0
 1008142:	e9 a3 00 00 00       	jmp    10081ea <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:219
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
 1008147:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 100814c:	8d 04 80             	lea    eax,[eax+eax*4]
 100814f:	01 c0                	add    eax,eax
 1008151:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:220
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
 1008153:	c1 eb 07             	shr    ebx,0x7
 1008156:	84 db                	test   bl,bl
 1008158:	74 29                	je     1008183 <ataInit+0x255>
 100815a:	85 c0                	test   eax,eax
 100815c:	7e 25                	jle    1008183 <ataInit+0x255>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 100815e:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1008165:	8d 50 07             	lea    edx,[eax+0x7]
 1008168:	ec                   	in     al,dx
 1008169:	89 c3                	mov    ebx,eax
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:223
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
 100816b:	83 ec 0c             	sub    esp,0xc
 100816e:	6a 01                	push   0x1
 1008170:	e8 93 25 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:224
        ticks--;
 1008175:	83 ef 01             	sub    edi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:220
#endif
            return false;
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
 1008178:	83 c4 10             	add    esp,0x10
 100817b:	84 db                	test   bl,bl
 100817d:	79 04                	jns    1008183 <ataInit+0x255>
 100817f:	85 ff                	test   edi,edi
 1008181:	7f db                	jg     100815e <ataInit+0x230>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:226
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
        ticks--;
    }
    if (!ataControllerIsReady(devInfo))
 1008183:	83 ec 0c             	sub    esp,0xc
 1008186:	56                   	push   esi
 1008187:	e8 0a fc ff ff       	call   1007d96 <ataControllerIsReady>
 100818c:	89 c2                	mov    edx,eax
 100818e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:227
        return false;
 1008191:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:226
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
        ticks--;
    }
    if (!ataControllerIsReady(devInfo))
 1008196:	84 d2                	test   dl,dl
 1008198:	74 50                	je     10081ea <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:228
        return false;
    if (inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW)!=0x55 || inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH)!=0xaa)
 100819a:	8b 8e 69 02 00 00    	mov    ecx,DWORD PTR [esi+0x269]
 10081a0:	8d 59 04             	lea    ebx,[ecx+0x4]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 10081a3:	89 da                	mov    edx,ebx
 10081a5:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:228
 10081a6:	3c 55                	cmp    al,0x55
 10081a8:	75 08                	jne    10081b2 <ataInit+0x284>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39 (discriminator 1)
 10081aa:	8d 51 05             	lea    edx,[ecx+0x5]
 10081ad:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:228 (discriminator 1)
 10081ae:	3c aa                	cmp    al,0xaa
 10081b0:	74 33                	je     10081e5 <ataInit+0x2b7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:231
    {
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 10081b2:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 10081b9:	74 21                	je     10081dc <ataInit+0x2ae>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 10081bb:	8d 51 05             	lea    edx,[ecx+0x5]
 10081be:	ec                   	in     al,dx
 10081bf:	89 c1                	mov    ecx,eax
 10081c1:	89 da                	mov    edx,ebx
 10081c3:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:232
        printk("Cylinder port non-zero (%X,%X), device is non-ATA\n",inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW), inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH));
 10081c4:	83 ec 04             	sub    esp,0x4
 10081c7:	0f b6 c9             	movzx  ecx,cl
 10081ca:	51                   	push   ecx
 10081cb:	0f b6 c0             	movzx  eax,al
 10081ce:	50                   	push   eax
 10081cf:	68 04 1e 04 01       	push   0x1041e04
 10081d4:	e8 16 1b 00 00       	call   1009cef <printk>
 10081d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:197
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
#endif
        return false;
 10081dc:	0f b6 05 80 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c80
 10081e3:	eb 05                	jmp    10081ea <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:239
        if (useCDROMIdentify)
            return true;
        else
            return false;
    }
    return true;
 10081e5:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:240
}
 10081ea:	5b                   	pop    ebx
 10081eb:	5e                   	pop    esi
 10081ec:	5f                   	pop    edi
 10081ed:	c3                   	ret    

010081ee <ataGetModelFromIdentify>:
ataGetModelFromIdentify():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:243

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
 10081ee:	56                   	push   esi
 10081ef:	53                   	push   ebx
 10081f0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:244
    uint16_t* ident=devInfo->ATAIdentifyData+27;
 10081f4:	8d 46 36             	lea    eax,[esi+0x36]
 10081f7:	8d 96 01 02 00 00    	lea    edx,[esi+0x201]
 10081fd:	8d 5e 5e             	lea    ebx,[esi+0x5e]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:247 (discriminator 3)
    for (int cnt=0;cnt<40;cnt+=2)
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
 1008200:	0f b7 08             	movzx  ecx,WORD PTR [eax]
 1008203:	66 c1 e9 08          	shr    cx,0x8
 1008207:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:248 (discriminator 3)
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
 100820a:	83 c0 02             	add    eax,0x2
 100820d:	0f b7 48 fe          	movzx  ecx,WORD PTR [eax-0x2]
 1008211:	88 0a                	mov    BYTE PTR [edx],cl
 1008213:	83 c2 02             	add    edx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:245 (discriminator 3)
}

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
    uint16_t* ident=devInfo->ATAIdentifyData+27;
    for (int cnt=0;cnt<40;cnt+=2)
 1008216:	39 d8                	cmp    eax,ebx
 1008218:	75 e6                	jne    1008200 <ataGetModelFromIdentify+0x12>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:250
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
    }
    devInfo->ATADeviceModel[79]='\0';
 100821a:	c6 86 4f 02 00 00 00 	mov    BYTE PTR [esi+0x24f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:251
}
 1008221:	5b                   	pop    ebx
 1008222:	5e                   	pop    esi
 1008223:	c3                   	ret    

01008224 <ataIdentify>:
ataIdentify():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:254

int ataIdentify(struct ataDeviceInfo_t* devInfo)
{
 1008224:	56                   	push   esi
 1008225:	53                   	push   ebx
 1008226:	83 ec 04             	sub    esp,0x4
 1008229:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:256
    //For ATA devices, read the identity data.  For SATA, we've already read it into ATAIdentityData
    if (devInfo->queryATAData)
 100822d:	80 be 50 02 00 00 00 	cmp    BYTE PTR [esi+0x250],0x0
 1008234:	74 5c                	je     1008292 <ataIdentify+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:258
    {
        if (useCDROMIdentify)
 1008236:	80 3d 80 9c 07 01 00 	cmp    BYTE PTR ds:0x1079c80,0x0
 100823d:	74 12                	je     1008251 <ataIdentify+0x2d>
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 100823f:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1008246:	8d 50 07             	lea    edx,[eax+0x7]
 1008249:	b8 a1 ff ff ff       	mov    eax,0xffffffa1
 100824e:	ee                   	out    dx,al
 100824f:	eb 10                	jmp    1008261 <ataIdentify+0x3d>
 1008251:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1008258:	8d 50 07             	lea    edx,[eax+0x7]
 100825b:	b8 ec ff ff ff       	mov    eax,0xffffffec
 1008260:	ee                   	out    dx,al
ataIdentify():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:262
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
 1008261:	83 ec 0c             	sub    esp,0xc
 1008264:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 1008269:	8d 04 80             	lea    eax,[eax+eax*4]
 100826c:	01 c0                	add    eax,eax
 100826e:	50                   	push   eax
 100826f:	e8 94 24 00 00       	call   100a708 <wait>
 1008274:	0f b7 96 69 02 00 00 	movzx  edx,WORD PTR [esi+0x269]
 100827b:	89 f1                	mov    ecx,esi
 100827d:	8d 9e 00 02 00 00    	lea    ebx,[esi+0x200]
 1008283:	83 c4 10             	add    esp,0x10
inw():
/home/yogi/src/os/chrisOSKernel/include/io.h:46 (discriminator 3)
}

static __inline unsigned short inw(unsigned short __port)
{
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
 1008286:	66 ed                	in     ax,dx
ataIdentify():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:265 (discriminator 3)
        for (int readCount=0;readCount<=255;readCount++)
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
 1008288:	66 89 01             	mov    WORD PTR [ecx],ax
 100828b:	83 c1 02             	add    ecx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:263 (discriminator 3)
        if (useCDROMIdentify)
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
        for (int readCount=0;readCount<=255;readCount++)
 100828e:	39 d9                	cmp    ecx,ebx
 1008290:	75 f4                	jne    1008286 <ataIdentify+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:268
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
 1008292:	83 ec 0c             	sub    esp,0xc
 1008295:	56                   	push   esi
 1008296:	e8 53 ff ff ff       	call   10081ee <ataGetModelFromIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:269
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
 100829b:	0f b7 46 7a          	movzx  eax,WORD PTR [esi+0x7a]
 100829f:	c1 e0 10             	shl    eax,0x10
 10082a2:	0f b7 56 78          	movzx  edx,WORD PTR [esi+0x78]
 10082a6:	09 d0                	or     eax,edx
 10082a8:	89 86 56 02 00 00    	mov    DWORD PTR [esi+0x256],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:270
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
 10082ae:	83 c4 10             	add    esp,0x10
 10082b1:	b8 00 02 00 00       	mov    eax,0x200
 10082b6:	f6 86 d5 00 00 00 10 	test   BYTE PTR [esi+0xd5],0x10
 10082bd:	74 12                	je     10082d1 <ataIdentify+0xad>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:270 (discriminator 1)
 10082bf:	0f b7 46 24          	movzx  eax,WORD PTR [esi+0x24]
 10082c3:	c1 e0 10             	shl    eax,0x10
 10082c6:	89 c2                	mov    edx,eax
 10082c8:	0f b7 86 ea 00 00 00 	movzx  eax,WORD PTR [esi+0xea]
 10082cf:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:270 (discriminator 4)
 10082d1:	89 86 5a 02 00 00    	mov    DWORD PTR [esi+0x25a],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:273 (discriminator 4)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
            :512;
    devInfo->dmaSupported=devInfo->ATAIdentifyData[49]>>8 & 0x1;
 10082d7:	0f b7 46 62          	movzx  eax,WORD PTR [esi+0x62]
 10082db:	89 c2                	mov    edx,eax
 10082dd:	66 c1 ea 08          	shr    dx,0x8
 10082e1:	83 e2 01             	and    edx,0x1
 10082e4:	88 96 60 02 00 00    	mov    BYTE PTR [esi+0x260],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:274 (discriminator 4)
    devInfo->lbaSupported=devInfo->ATAIdentifyData[49]>>9 & 0x1;
 10082ea:	66 c1 e8 09          	shr    ax,0x9
 10082ee:	83 e0 01             	and    eax,0x1
 10082f1:	88 86 5e 02 00 00    	mov    BYTE PTR [esi+0x25e],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:275 (discriminator 4)
    devInfo->lba48Supported=devInfo->ATAIdentifyData[83]>>10 & 0x1;
 10082f7:	0f b7 86 a6 00 00 00 	movzx  eax,WORD PTR [esi+0xa6]
 10082fe:	66 c1 e8 0a          	shr    ax,0xa
 1008302:	83 e0 01             	and    eax,0x1
 1008305:	88 86 5f 02 00 00    	mov    BYTE PTR [esi+0x25f],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:278 (discriminator 4)
    
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 100830b:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1008312:	74 1d                	je     1008331 <ataIdentify+0x10d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:279
        printk("drive %d, model=%s\n",devInfo->driveNo, devInfo->ATADeviceModel);
 1008314:	83 ec 04             	sub    esp,0x4
 1008317:	8d 86 00 02 00 00    	lea    eax,[esi+0x200]
 100831d:	50                   	push   eax
 100831e:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 1008324:	68 c9 74 06 01       	push   0x10674c9
 1008329:	e8 c1 19 00 00       	call   1009cef <printk>
 100832e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:282
#endif
    return 1;
}
 1008331:	b8 01 00 00 00       	mov    eax,0x1
 1008336:	83 c4 04             	add    esp,0x4
 1008339:	5b                   	pop    ebx
 100833a:	5e                   	pop    esi
 100833b:	c3                   	ret    

0100833c <ataScanForHarddrives>:
ataScanForHarddrives():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:285

int ataScanForHarddrives()
{
 100833c:	53                   	push   ebx
 100833d:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:286
    kATADeviceInfo[0].bus=ATAPrimary;
 1008340:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
 1008346:	c7 83 61 02 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
 100834d:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:287
    kATADeviceInfo[0].driveNo=0;
 1008350:	c7 83 65 02 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
 1008357:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:288
    kATADeviceInfo[0].ioPort=0x1F0;
 100835a:	c7 83 69 02 00 00 f0 	mov    DWORD PTR [ebx+0x269],0x1f0
 1008361:	01 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:289
    kATADeviceInfo[0].irqNum=0x14;
 1008364:	c6 83 6d 02 00 00 14 	mov    BYTE PTR [ebx+0x26d],0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:290
    kATADeviceInfo[0].driveHeadPortDesignation=0xA0;
 100836b:	c6 83 6e 02 00 00 a0 	mov    BYTE PTR [ebx+0x26e],0xa0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:291
    kATADeviceInfo[0].queryATAData=true;
 1008372:	c6 83 50 02 00 00 01 	mov    BYTE PTR [ebx+0x250],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:292
    kATADeviceInfo[0].ATADeviceAvailable=ataInit(&kATADeviceInfo[0]);
 1008379:	53                   	push   ebx
 100837a:	e8 af fb ff ff       	call   1007f2e <ataInit>
 100837f:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:293
    if (kATADeviceInfo[0].ATADeviceAvailable)
 1008385:	a1 00 98 12 00       	mov    eax,ds:0x129800
 100838a:	83 c4 10             	add    esp,0x10
 100838d:	80 b8 51 02 00 00 00 	cmp    BYTE PTR [eax+0x251],0x0
 1008394:	74 35                	je     10083cb <ataScanForHarddrives+0x8f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:295
    {
        ataIdentify(&kATADeviceInfo[0]);
 1008396:	83 ec 0c             	sub    esp,0xc
 1008399:	50                   	push   eax
 100839a:	e8 85 fe ff ff       	call   1008224 <ataIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:296
        if (useCDROMIdentify)
 100839f:	83 c4 10             	add    esp,0x10
 10083a2:	80 3d 80 9c 07 01 00 	cmp    BYTE PTR ds:0x1079c80,0x0
 10083a9:	74 11                	je     10083bc <ataScanForHarddrives+0x80>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:297
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_CD;
 10083ab:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10083b0:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
 10083b7:	00 00 00 
 10083ba:	eb 0f                	jmp    10083cb <ataScanForHarddrives+0x8f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:299
        else
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_HD;
 10083bc:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10083c1:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
 10083c8:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:301
    }
    useCDROMIdentify=false;
 10083cb:	c6 05 80 9c 07 01 00 	mov    BYTE PTR ds:0x1079c80,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:303

    kATADeviceInfo[1].bus=ATAPrimary;
 10083d2:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
 10083d8:	c7 83 d4 04 00 00 00 	mov    DWORD PTR [ebx+0x4d4],0x0
 10083df:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:304
    kATADeviceInfo[1].driveNo=1;
 10083e2:	c7 83 d8 04 00 00 01 	mov    DWORD PTR [ebx+0x4d8],0x1
 10083e9:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:305
    kATADeviceInfo[1].ioPort=0x1F0;
 10083ec:	c7 83 dc 04 00 00 f0 	mov    DWORD PTR [ebx+0x4dc],0x1f0
 10083f3:	01 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:306
    kATADeviceInfo[1].irqNum=0x14;
 10083f6:	c6 83 e0 04 00 00 14 	mov    BYTE PTR [ebx+0x4e0],0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:307
    kATADeviceInfo[1].driveHeadPortDesignation=0xB0;
 10083fd:	c6 83 e1 04 00 00 b0 	mov    BYTE PTR [ebx+0x4e1],0xb0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:308
    kATADeviceInfo[1].queryATAData=true;
 1008404:	c6 83 c3 04 00 00 01 	mov    BYTE PTR [ebx+0x4c3],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:309
    kATADeviceInfo[1].ATADeviceAvailable=ataInit(&kATADeviceInfo[1]);
 100840b:	83 ec 0c             	sub    esp,0xc
 100840e:	8d 83 73 02 00 00    	lea    eax,[ebx+0x273]
 1008414:	50                   	push   eax
 1008415:	e8 14 fb ff ff       	call   1007f2e <ataInit>
 100841a:	88 83 c4 04 00 00    	mov    BYTE PTR [ebx+0x4c4],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:310
    if (kATADeviceInfo[1].ATADeviceAvailable)
 1008420:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1008425:	83 c4 10             	add    esp,0x10
 1008428:	80 b8 c4 04 00 00 00 	cmp    BYTE PTR [eax+0x4c4],0x0
 100842f:	74 3a                	je     100846b <ataScanForHarddrives+0x12f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:312
    {
        ataIdentify(&kATADeviceInfo[1]);
 1008431:	83 ec 0c             	sub    esp,0xc
 1008434:	05 73 02 00 00       	add    eax,0x273
 1008439:	50                   	push   eax
 100843a:	e8 e5 fd ff ff       	call   1008224 <ataIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:313
        if (useCDROMIdentify)
 100843f:	83 c4 10             	add    esp,0x10
 1008442:	80 3d 80 9c 07 01 00 	cmp    BYTE PTR ds:0x1079c80,0x0
 1008449:	74 11                	je     100845c <ataScanForHarddrives+0x120>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:314
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_CD;
 100844b:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1008450:	c7 80 c5 04 00 00 01 	mov    DWORD PTR [eax+0x4c5],0x1
 1008457:	00 00 00 
 100845a:	eb 0f                	jmp    100846b <ataScanForHarddrives+0x12f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:316
        else
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_HD;
 100845c:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1008461:	c7 80 c5 04 00 00 00 	mov    DWORD PTR [eax+0x4c5],0x0
 1008468:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:318
    }
    kATADeviceInfo[2].bus=ATASecondary;
 100846b:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
 1008471:	c7 83 47 07 00 00 01 	mov    DWORD PTR [ebx+0x747],0x1
 1008478:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:319
    kATADeviceInfo[2].driveNo=2;
 100847b:	c7 83 4b 07 00 00 02 	mov    DWORD PTR [ebx+0x74b],0x2
 1008482:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:320
    kATADeviceInfo[2].ioPort=0x170;
 1008485:	c7 83 4f 07 00 00 70 	mov    DWORD PTR [ebx+0x74f],0x170
 100848c:	01 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:321
    kATADeviceInfo[2].irqNum=0x15;
 100848f:	c6 83 53 07 00 00 15 	mov    BYTE PTR [ebx+0x753],0x15
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:322
    kATADeviceInfo[2].driveHeadPortDesignation=0xA0;
 1008496:	c6 83 54 07 00 00 a0 	mov    BYTE PTR [ebx+0x754],0xa0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:323
    kATADeviceInfo[2].queryATAData=false;
 100849d:	c6 83 36 07 00 00 00 	mov    BYTE PTR [ebx+0x736],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:324
    kATADeviceInfo[2].ATADeviceAvailable=ataInit(&kATADeviceInfo[2]);
 10084a4:	83 ec 0c             	sub    esp,0xc
 10084a7:	8d 83 e6 04 00 00    	lea    eax,[ebx+0x4e6]
 10084ad:	50                   	push   eax
 10084ae:	e8 7b fa ff ff       	call   1007f2e <ataInit>
 10084b3:	88 83 37 07 00 00    	mov    BYTE PTR [ebx+0x737],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:325
    if (kATADeviceInfo[2].ATADeviceAvailable)
 10084b9:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10084be:	83 c4 10             	add    esp,0x10
 10084c1:	80 b8 37 07 00 00 00 	cmp    BYTE PTR [eax+0x737],0x0
 10084c8:	74 3a                	je     1008504 <ataScanForHarddrives+0x1c8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:327
    {
        ataIdentify(&kATADeviceInfo[2]);
 10084ca:	83 ec 0c             	sub    esp,0xc
 10084cd:	05 e6 04 00 00       	add    eax,0x4e6
 10084d2:	50                   	push   eax
 10084d3:	e8 4c fd ff ff       	call   1008224 <ataIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:328
        if (useCDROMIdentify)
 10084d8:	83 c4 10             	add    esp,0x10
 10084db:	80 3d 80 9c 07 01 00 	cmp    BYTE PTR ds:0x1079c80,0x0
 10084e2:	74 11                	je     10084f5 <ataScanForHarddrives+0x1b9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:329
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_CD;
 10084e4:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10084e9:	c7 80 38 07 00 00 01 	mov    DWORD PTR [eax+0x738],0x1
 10084f0:	00 00 00 
 10084f3:	eb 0f                	jmp    1008504 <ataScanForHarddrives+0x1c8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:331
        else
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_HD;
 10084f5:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10084fa:	c7 80 38 07 00 00 00 	mov    DWORD PTR [eax+0x738],0x0
 1008501:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:334
    }

    kATADeviceInfo[3].bus=ATASecondary;
 1008504:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
 100850a:	c7 83 ba 09 00 00 01 	mov    DWORD PTR [ebx+0x9ba],0x1
 1008511:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:335
    kATADeviceInfo[3].driveNo=3;
 1008514:	c7 83 be 09 00 00 03 	mov    DWORD PTR [ebx+0x9be],0x3
 100851b:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:336
    kATADeviceInfo[3].ioPort=0x170;
 100851e:	c7 83 c2 09 00 00 70 	mov    DWORD PTR [ebx+0x9c2],0x170
 1008525:	01 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:337
    kATADeviceInfo[3].irqNum=0x15;
 1008528:	c6 83 c6 09 00 00 15 	mov    BYTE PTR [ebx+0x9c6],0x15
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:338
    kATADeviceInfo[3].driveHeadPortDesignation=0xB0;
 100852f:	c6 83 c7 09 00 00 b0 	mov    BYTE PTR [ebx+0x9c7],0xb0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:339
    kATADeviceInfo[3].queryATAData=true;
 1008536:	c6 83 a9 09 00 00 01 	mov    BYTE PTR [ebx+0x9a9],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:340
    kATADeviceInfo[3].ATADeviceAvailable=ataInit(&kATADeviceInfo[3]);
 100853d:	83 ec 0c             	sub    esp,0xc
 1008540:	8d 83 59 07 00 00    	lea    eax,[ebx+0x759]
 1008546:	50                   	push   eax
 1008547:	e8 e2 f9 ff ff       	call   1007f2e <ataInit>
 100854c:	88 83 aa 09 00 00    	mov    BYTE PTR [ebx+0x9aa],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:341
    if (kATADeviceInfo[3].ATADeviceAvailable)
 1008552:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1008557:	83 c4 10             	add    esp,0x10
 100855a:	80 b8 aa 09 00 00 00 	cmp    BYTE PTR [eax+0x9aa],0x0
 1008561:	74 3a                	je     100859d <ataScanForHarddrives+0x261>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:343
    {
        ataIdentify(&kATADeviceInfo[3]);
 1008563:	83 ec 0c             	sub    esp,0xc
 1008566:	05 59 07 00 00       	add    eax,0x759
 100856b:	50                   	push   eax
 100856c:	e8 b3 fc ff ff       	call   1008224 <ataIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:344
        if (useCDROMIdentify)
 1008571:	83 c4 10             	add    esp,0x10
 1008574:	80 3d 80 9c 07 01 00 	cmp    BYTE PTR ds:0x1079c80,0x0
 100857b:	74 11                	je     100858e <ataScanForHarddrives+0x252>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:345
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_CD;
 100857d:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1008582:	c7 80 ab 09 00 00 01 	mov    DWORD PTR [eax+0x9ab],0x1
 1008589:	00 00 00 
 100858c:	eb 0f                	jmp    100859d <ataScanForHarddrives+0x261>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:347
        else
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_HD;
 100858e:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1008593:	c7 80 ab 09 00 00 00 	mov    DWORD PTR [eax+0x9ab],0x0
 100859a:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:351
    }

#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 100859d:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 10085a4:	74 22                	je     10085c8 <ataScanForHarddrives+0x28c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:352
        printk("INIT: Disk1=%s  Disk2=%s\n", kATADeviceInfo[0].ATADeviceModel, kATADeviceInfo[1].ATADeviceModel);
 10085a6:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10085ab:	83 ec 04             	sub    esp,0x4
 10085ae:	8d 90 73 04 00 00    	lea    edx,[eax+0x473]
 10085b4:	52                   	push   edx
 10085b5:	05 00 02 00 00       	add    eax,0x200
 10085ba:	50                   	push   eax
 10085bb:	68 dd 74 06 01       	push   0x10674dd
 10085c0:	e8 2a 17 00 00       	call   1009cef <printk>
 10085c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:355
#endif
            return 0;
}
 10085c8:	b8 00 00 00 00       	mov    eax,0x0
 10085cd:	83 c4 08             	add    esp,0x8
 10085d0:	5b                   	pop    ebx
 10085d1:	c3                   	ret    

010085d2 <ataBlockingRead28>:
ataBlockingRead28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:365
        return -1;
    return ataBlockingRead28(sector, buffer, sector_count);
}

int ataBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
 10085d2:	55                   	push   ebp
 10085d3:	57                   	push   edi
 10085d4:	56                   	push   esi
 10085d5:	53                   	push   ebx
 10085d6:	83 ec 1c             	sub    esp,0x1c
 10085d9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:370
    //For now if the FAT library calls this, we assume we've already read the same partition most recently
    int lResult=0;
    uint8_t* bufp=buffer;
    uint32_t lSectorsLeft=sector_count;
    uint32_t lSector=sector+partOffset; //this represents the start of the partition
 10085dd:	a1 78 9c 07 01       	mov    eax,ds:0x1079c78
 10085e2:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
 10085e6:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:373

#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 10085e8:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 10085ef:	74 18                	je     1008609 <ataBlockingRead28+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:375
        {
            printk("ataBlockingRead28: sec: 0x%08X, buf 0x%08X, cnt 0x%08X\n", lSector, bufp, sector_count);
 10085f1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
 10085f5:	56                   	push   esi
 10085f6:	50                   	push   eax
 10085f7:	68 38 1e 04 01       	push   0x1041e38
 10085fc:	e8 ee 16 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:376
            waitForKeyboardKey();
 1008601:	e8 85 ab ff ff       	call   100318b <waitForKeyboardKey>
 1008606:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:379
        }
#endif
    lResult=ataWaitForIdle(atablockingReadDev);
 1008609:	83 ec 0c             	sub    esp,0xc
 100860c:	ff 35 28 9c 07 01    	push   DWORD PTR ds:0x1079c28
 1008612:	e8 cc f6 ff ff       	call   1007ce3 <ataWaitForIdle>
 1008617:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:380
    if (lResult)
 100861a:	83 c4 10             	add    esp,0x10
 100861d:	85 c0                	test   eax,eax
 100861f:	74 11                	je     1008632 <ataBlockingRead28+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:381
        panic("ataBlockingRead28: Timeout waiting for DRQ and BSY to be clear (0x%02X)", lResult);
 1008621:	83 ec 08             	sub    esp,0x8
 1008624:	50                   	push   eax
 1008625:	68 70 1e 04 01       	push   0x1041e70
 100862a:	e8 39 12 00 00       	call   1009868 <panic>
 100862f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:386
        //Select the drive we want
        //NOTE: Drive selected prior to calling this function
        //ataSelectDrive(drive,0);
        //Magic bit (6) to set LBA mode and top 4 bits of LBA28 sector # go in bottom 4
    outb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT, inb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT) | (1 << 6) | ((lSector >> 24) & 0x0F));
 1008632:	8b 1d 28 9c 07 01    	mov    ebx,DWORD PTR ds:0x1079c28
 1008638:	8b 8b 69 02 00 00    	mov    ecx,DWORD PTR [ebx+0x269]
 100863e:	8d 51 06             	lea    edx,[ecx+0x6]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1008641:	ec                   	in     al,dx
 1008642:	89 c7                	mov    edi,eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1008644:	89 e8                	mov    eax,ebp
 1008646:	c1 e8 18             	shr    eax,0x18
 1008649:	83 e0 0f             	and    eax,0xf
 100864c:	83 c8 40             	or     eax,0x40
 100864f:	09 f8                	or     eax,edi
 1008651:	ee                   	out    dx,al
 1008652:	8d 51 02             	lea    edx,[ecx+0x2]
 1008655:	0f b6 44 24 38       	movzx  eax,BYTE PTR [esp+0x38]
 100865a:	ee                   	out    dx,al
 100865b:	8d 51 03             	lea    edx,[ecx+0x3]
 100865e:	89 e8                	mov    eax,ebp
 1008660:	ee                   	out    dx,al
 1008661:	89 e8                	mov    eax,ebp
 1008663:	c1 e8 08             	shr    eax,0x8
 1008666:	8d 51 04             	lea    edx,[ecx+0x4]
 1008669:	ee                   	out    dx,al
 100866a:	89 e8                	mov    eax,ebp
 100866c:	c1 e8 10             	shr    eax,0x10
 100866f:	8d 51 05             	lea    edx,[ecx+0x5]
 1008672:	ee                   	out    dx,al
 1008673:	8d 51 07             	lea    edx,[ecx+0x7]
 1008676:	b8 20 00 00 00       	mov    eax,0x20
 100867b:	ee                   	out    dx,al
ataBlockingRead28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:396
    //Send the LBA sector number in the next 3 fields + high bit in the 
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTOR_NUMBER, (lSector) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_LOW, (lSector >> 8) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
 100867c:	83 ec 04             	sub    esp,0x4
 100867f:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 1008684:	8d 04 80             	lea    eax,[eax+eax*4]
 1008687:	01 c0                	add    eax,eax
 1008689:	50                   	push   eax
 100868a:	6a 01                	push   0x1
 100868c:	53                   	push   ebx
 100868d:	e8 e2 f5 ff ff       	call   1007c74 <ataWaitForDRQ>
 1008692:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:397
    if (lResult)
 1008695:	83 c4 10             	add    esp,0x10
 1008698:	85 c0                	test   eax,eax
 100869a:	74 17                	je     10086b3 <ataBlockingRead28+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:398
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
 100869c:	83 ec 04             	sub    esp,0x4
 100869f:	ff 35 7c 9c 07 01    	push   DWORD PTR ds:0x1079c7c
 10086a5:	50                   	push   eax
 10086a6:	68 b8 1e 04 01       	push   0x1041eb8
 10086ab:	e8 b8 11 00 00       	call   1009868 <panic>
 10086b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:399
    while (lSectorsLeft)
 10086b3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
 10086b8:	0f 84 e7 00 00 00    	je     10087a5 <ataBlockingRead28+0x1d3>
 10086be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 10086c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:401
    {
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
 10086c6:	a1 28 9c 07 01       	mov    eax,ds:0x1079c28
insw():
/home/yogi/src/os/chrisOSKernel/include/io.h:87
		      : "d" (__port));
}

static __inline void insw(unsigned short __port, void *__buf, unsigned long __n)
{
	__asm__ volatile ("cld; rep; insw"
 10086cb:	8b 90 69 02 00 00    	mov    edx,DWORD PTR [eax+0x269]
 10086d1:	89 f7                	mov    edi,esi
 10086d3:	b9 00 01 00 00       	mov    ecx,0x100
 10086d8:	fc                   	cld    
 10086d9:	f3 66 6d             	rep ins WORD PTR es:[edi],dx
ataBlockingRead28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:403
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 10086dc:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 10086e3:	74 40                	je     1008725 <ataBlockingRead28+0x153>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:405
            {
                printk("ataBlockingRead28: Debugging: ");
 10086e5:	83 ec 0c             	sub    esp,0xc
 10086e8:	68 08 1f 04 01       	push   0x1041f08
 10086ed:	e8 fd 15 00 00       	call   1009cef <printk>
 10086f2:	89 f3                	mov    ebx,esi
 10086f4:	8d 7e 14             	lea    edi,[esi+0x14]
 10086f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:407 (discriminator 3)
                for (int cnt2=0;cnt2<20;cnt2++)
                    printk("%02X ", bufp[cnt2]);
 10086fa:	83 ec 08             	sub    esp,0x8
 10086fd:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1008700:	50                   	push   eax
 1008701:	68 f7 74 06 01       	push   0x10674f7
 1008706:	e8 e4 15 00 00       	call   1009cef <printk>
 100870b:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:406 (discriminator 3)
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            {
                printk("ataBlockingRead28: Debugging: ");
                for (int cnt2=0;cnt2<20;cnt2++)
 100870e:	83 c4 10             	add    esp,0x10
 1008711:	39 df                	cmp    edi,ebx
 1008713:	75 e5                	jne    10086fa <ataBlockingRead28+0x128>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:408
                    printk("%02X ", bufp[cnt2]);
                printk("\n");
 1008715:	83 ec 0c             	sub    esp,0xc
 1008718:	68 7b 78 06 01       	push   0x106787b
 100871d:	e8 cd 15 00 00       	call   1009cef <printk>
 1008722:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:411
            }
        #endif
        if (--lSectorsLeft>0) //zero based vs 1 based
 1008725:	83 6c 24 0c 01       	sub    DWORD PTR [esp+0xc],0x1
 100872a:	74 79                	je     10087a5 <ataBlockingRead28+0x1d3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:413
        {
            wait(50);
 100872c:	83 ec 0c             	sub    esp,0xc
 100872f:	6a 32                	push   0x32
 1008731:	e8 d2 1f 00 00       	call   100a708 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:414
            lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
 1008736:	83 c4 0c             	add    esp,0xc
 1008739:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 100873e:	8d 04 80             	lea    eax,[eax+eax*4]
 1008741:	01 c0                	add    eax,eax
 1008743:	50                   	push   eax
 1008744:	6a 01                	push   0x1
 1008746:	ff 35 28 9c 07 01    	push   DWORD PTR ds:0x1079c28
 100874c:	e8 23 f5 ff ff       	call   1007c74 <ataWaitForDRQ>
 1008751:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:415
            bufp+=512;
 1008754:	81 c6 00 02 00 00    	add    esi,0x200
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:416
            lSector++;
 100875a:	83 c5 01             	add    ebp,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:417
            if (lResult)
 100875d:	83 c4 10             	add    esp,0x10
 1008760:	85 c0                	test   eax,eax
 1008762:	74 17                	je     100877b <ataBlockingRead28+0x1a9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:418
                panic("ataBlockingRead28: Timeout in read loop, waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
 1008764:	83 ec 04             	sub    esp,0x4
 1008767:	ff 35 7c 9c 07 01    	push   DWORD PTR ds:0x1079c7c
 100876d:	50                   	push   eax
 100876e:	68 28 1f 04 01       	push   0x1041f28
 1008773:	e8 f0 10 00 00       	call   1009868 <panic>
 1008778:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:420
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 100877b:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1008782:	0f 84 3e ff ff ff    	je     10086c6 <ataBlockingRead28+0xf4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:422
        {
            printk("ataBlockingRead28: sec=0x%08X, buf=0x%08X, rep=0x%08X    \n", lSector, bufp, lSectorsLeft);
 1008788:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 100878c:	56                   	push   esi
 100878d:	55                   	push   ebp
 100878e:	68 84 1f 04 01       	push   0x1041f84
 1008793:	e8 57 15 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:423
            waitForKeyboardKey();
 1008798:	e8 ee a9 ff ff       	call   100318b <waitForKeyboardKey>
 100879d:	83 c4 10             	add    esp,0x10
 10087a0:	e9 21 ff ff ff       	jmp    10086c6 <ataBlockingRead28+0xf4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:428
        }
#endif
        }
    }
    return 512*sector_count;
 10087a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 10087a9:	c1 e0 09             	shl    eax,0x9
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:429
}
 10087ac:	83 c4 1c             	add    esp,0x1c
 10087af:	5b                   	pop    ebx
 10087b0:	5e                   	pop    esi
 10087b1:	5f                   	pop    edi
 10087b2:	5d                   	pop    ebp
 10087b3:	c3                   	ret    

010087b4 <ataReadDisk>:
ataReadDisk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:357
        printk("INIT: Disk1=%s  Disk2=%s\n", kATADeviceInfo[0].ATADeviceModel, kATADeviceInfo[1].ATADeviceModel);
#endif
            return 0;
}
int ataReadDisk(struct ataDeviceInfo_t* devInfo, uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
 10087b4:	83 ec 0c             	sub    esp,0xc
 10087b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:358
    atablockingReadDev = devInfo;
 10087bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 10087bf:	89 15 28 9c 07 01    	mov    DWORD PTR ds:0x1079c28,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:359
    if (sector_count==0)    //this function can be called with a sector_count of 0 in order to set partOffset
 10087c5:	85 c0                	test   eax,eax
 10087c7:	74 16                	je     10087df <ataReadDisk+0x2b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:361
        return -1;
    return ataBlockingRead28(sector, buffer, sector_count);
 10087c9:	83 ec 04             	sub    esp,0x4
 10087cc:	50                   	push   eax
 10087cd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 10087d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 10087d5:	e8 f8 fd ff ff       	call   10085d2 <ataBlockingRead28>
 10087da:	83 c4 10             	add    esp,0x10
 10087dd:	eb 05                	jmp    10087e4 <ataReadDisk+0x30>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:360
}
int ataReadDisk(struct ataDeviceInfo_t* devInfo, uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
    atablockingReadDev = devInfo;
    if (sector_count==0)    //this function can be called with a sector_count of 0 in order to set partOffset
        return -1;
 10087df:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:362
    return ataBlockingRead28(sector, buffer, sector_count);
}
 10087e4:	83 c4 0c             	add    esp,0xc
 10087e7:	c3                   	ret    

010087e8 <ataBlockingWrite28>:
ataBlockingWrite28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:468
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataBlockingWrite28: Finished sending data\n");
#endif
    return 512;
*/}
 10087e8:	f3 c3                	repz ret 
 10087ea:	66 90                	xchg   ax,ax

010087ec <kPagingGet4kPDEntryValueCR3>:
kPagingGet4kPDEntryValueCR3():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:21
extern uint32_t kDebugLevel;



uint32_t kPagingGet4kPDEntryValueCR3(uintptr_t PageDirAddress, uint32_t address)
{
 10087ec:	53                   	push   ebx
 10087ed:	83 ec 08             	sub    esp,0x8
 10087f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:24
    address&=0xFFFFF000;
    uintptr_t*pageDirEntry=((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
    uintptr_t* lTemp=(uint32_t*)((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
 10087f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 10087f8:	c1 e8 16             	shr    eax,0x16
 10087fb:	8d 1c 82             	lea    ebx,[edx+eax*4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:26
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 10087fe:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008805:	74 13                	je     100881a <kPagingGet4kPDEntryValueCR3+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:27
            printk("kPagingGet4kPDEntryValueCR3: dirAddressPtr=0x%08x (PDIR=0x%08X)\n", *lTemp,PageDirAddress);
 1008807:	83 ec 04             	sub    esp,0x4
 100880a:	52                   	push   edx
 100880b:	ff 33                	push   DWORD PTR [ebx]
 100880d:	68 c0 1f 04 01       	push   0x1041fc0
 1008812:	e8 d8 14 00 00       	call   1009cef <printk>
 1008817:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:29
#endif
    return (uint32_t)*lTemp;
 100881a:	8b 03                	mov    eax,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:30
}
 100881c:	83 c4 08             	add    esp,0x8
 100881f:	5b                   	pop    ebx
 1008820:	c3                   	ret    

01008821 <kPagingGet4kPDEntryValue>:
kPagingGet4kPDEntryValue():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:33

uint32_t kPagingGet4kPDEntryValue(uint32_t address)
{
 1008821:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:34
    return kPagingGet4kPDEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 1008824:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1008828:	68 00 a0 4b 00       	push   0x4ba000
 100882d:	e8 ba ff ff ff       	call   10087ec <kPagingGet4kPDEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:35
}
 1008832:	83 c4 1c             	add    esp,0x1c
 1008835:	c3                   	ret    

01008836 <kPagingGet4kPDEntryAddressCR3>:
kPagingGet4kPDEntryAddressCR3():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:38

uint32_t kPagingGet4kPDEntryAddressCR3(uintptr_t PageDirAddress, uint32_t address)
{
 1008836:	53                   	push   ebx
 1008837:	83 ec 08             	sub    esp,0x8
 100883a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:40
    address&=0xFFFFF000;
    uintptr_t lTemp=((PageDirAddress  | (((address & 0xFFC00000) >> 22) << 2)));
 100883e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 1008842:	c1 eb 16             	shr    ebx,0x16
 1008845:	c1 e3 02             	shl    ebx,0x2
 1008848:	09 c3                	or     ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:42
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 100884a:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008851:	74 12                	je     1008865 <kPagingGet4kPDEntryAddressCR3+0x2f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:43
            printk("kPagingGet4kPDEntryAddressCR3: dirEntryAddress=0x%08x  (PDIR=0x%08X)\n", lTemp, PageDirAddress);
 1008853:	83 ec 04             	sub    esp,0x4
 1008856:	50                   	push   eax
 1008857:	53                   	push   ebx
 1008858:	68 04 20 04 01       	push   0x1042004
 100885d:	e8 8d 14 00 00       	call   1009cef <printk>
 1008862:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:46
#endif
    return (uint32_t)lTemp & 0xFFFFFFFF;
}
 1008865:	89 d8                	mov    eax,ebx
 1008867:	83 c4 08             	add    esp,0x8
 100886a:	5b                   	pop    ebx
 100886b:	c3                   	ret    

0100886c <kPagingGet4kPDEntryAddress>:
kPagingGet4kPDEntryAddress():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:49

uint32_t kPagingGet4kPDEntryAddress(uint32_t address)
{
 100886c:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:50
    return kPagingGet4kPDEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 100886f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1008873:	68 00 a0 4b 00       	push   0x4ba000
 1008878:	e8 b9 ff ff ff       	call   1008836 <kPagingGet4kPDEntryAddressCR3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:51
}
 100887d:	83 c4 1c             	add    esp,0x1c
 1008880:	c3                   	ret    

01008881 <kPagingGet4kPTEntryAddressCR3>:
kPagingGet4kPTEntryAddressCR3():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:54

uint32_t kPagingGet4kPTEntryAddressCR3(uintptr_t pageDirAddress, uint32_t address)
{
 1008881:	53                   	push   ebx
 1008882:	83 ec 10             	sub    esp,0x10
 1008885:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:56
    address&=0xFFFFF000;
    uintptr_t pDirPtr=kPagingGet4kPDEntryValueCR3(pageDirAddress,address) & 0xFFFFF000;
 1008889:	89 d8                	mov    eax,ebx
 100888b:	25 00 f0 ff ff       	and    eax,0xfffff000
 1008890:	50                   	push   eax
 1008891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1008895:	e8 52 ff ff ff       	call   10087ec <kPagingGet4kPDEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:57
    return ((address & 0x3FF000) >> 12) << 2 | pDirPtr;
 100889a:	81 e3 00 f0 3f 00    	and    ebx,0x3ff000
 10088a0:	c1 eb 0a             	shr    ebx,0xa
 10088a3:	25 00 f0 ff ff       	and    eax,0xfffff000
 10088a8:	09 d8                	or     eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:58
}
 10088aa:	83 c4 18             	add    esp,0x18
 10088ad:	5b                   	pop    ebx
 10088ae:	c3                   	ret    

010088af <kPagingGet4kPTEntryAddress>:
kPagingGet4kPTEntryAddress():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:61

uint32_t kPagingGet4kPTEntryAddress(uint32_t address)
{
 10088af:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:62
    return kPagingGet4kPTEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 10088b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 10088b6:	68 00 a0 4b 00       	push   0x4ba000
 10088bb:	e8 c1 ff ff ff       	call   1008881 <kPagingGet4kPTEntryAddressCR3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:63
}
 10088c0:	83 c4 1c             	add    esp,0x1c
 10088c3:	c3                   	ret    

010088c4 <kPagingGet4kPTEntryValueCR3>:
kPagingGet4kPTEntryValueCR3():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:66

uint32_t kPagingGet4kPTEntryValueCR3(uintptr_t pageDirAddress, uint32_t address)
{
 10088c4:	56                   	push   esi
 10088c5:	53                   	push   ebx
 10088c6:	83 ec 0c             	sub    esp,0xc
 10088c9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:68
    address&=0xFFFFF000;
    uint32_t* pTablePtr=(uint32_t*)kPagingGet4kPTEntryAddressCR3(pageDirAddress,address);
 10088cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 10088d1:	25 00 f0 ff ff       	and    eax,0xfffff000
 10088d6:	50                   	push   eax
 10088d7:	56                   	push   esi
 10088d8:	e8 a4 ff ff ff       	call   1008881 <kPagingGet4kPTEntryAddressCR3>
 10088dd:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:70
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 10088df:	83 c4 10             	add    esp,0x10
 10088e2:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 10088e9:	74 11                	je     10088fc <kPagingGet4kPTEntryValueCR3+0x38>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:71
             printk("kPagingGet4kPTEntryValueCR3: PTAddress=0x%08X, PTValue=0x%08X (PDIR=0x%08X)\n", pTablePtr,*pTablePtr,pageDirAddress);
 10088eb:	56                   	push   esi
 10088ec:	ff 30                	push   DWORD PTR [eax]
 10088ee:	50                   	push   eax
 10088ef:	68 4c 20 04 01       	push   0x104204c
 10088f4:	e8 f6 13 00 00       	call   1009cef <printk>
 10088f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:73
#endif
    return *pTablePtr;
 10088fc:	8b 03                	mov    eax,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:74
}
 10088fe:	83 c4 04             	add    esp,0x4
 1008901:	5b                   	pop    ebx
 1008902:	5e                   	pop    esi
 1008903:	c3                   	ret    

01008904 <kPagingGet4kPTEntryValue>:
kPagingGet4kPTEntryValue():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:77

uint32_t kPagingGet4kPTEntryValue(uint32_t address)
{
 1008904:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:78
    return kPagingGet4kPTEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 1008907:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100890b:	68 00 a0 4b 00       	push   0x4ba000
 1008910:	e8 af ff ff ff       	call   10088c4 <kPagingGet4kPTEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:79
}
 1008915:	83 c4 1c             	add    esp,0x1c
 1008918:	c3                   	ret    

01008919 <kPagingSetPageReadOnlyFlag>:
kPagingSetPageReadOnlyFlag():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:85




void kPagingSetPageReadOnlyFlag(uintptr_t* ptEntry, bool readOnly)
{
 1008919:	56                   	push   esi
 100891a:	53                   	push   ebx
 100891b:	83 ec 04             	sub    esp,0x4
 100891e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1008922:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:87
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008926:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 100892d:	74 13                	je     1008942 <kPagingSetPageReadOnlyFlag+0x29>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:88
            printk("pagingMakePageReadOnly: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
 100892f:	83 ec 04             	sub    esp,0x4
 1008932:	ff 33                	push   DWORD PTR [ebx]
 1008934:	53                   	push   ebx
 1008935:	68 9c 20 04 01       	push   0x104209c
 100893a:	e8 b0 13 00 00       	call   1009cef <printk>
 100893f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:90
#endif
         if (readOnly)
 1008942:	89 f0                	mov    eax,esi
 1008944:	84 c0                	test   al,al
 1008946:	74 05                	je     100894d <kPagingSetPageReadOnlyFlag+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:91
            *ptEntry&=0xFFFFFFFD;
 1008948:	83 23 fd             	and    DWORD PTR [ebx],0xfffffffd
 100894b:	eb 03                	jmp    1008950 <kPagingSetPageReadOnlyFlag+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:93
         else
            *ptEntry|=2; 
 100894d:	83 0b 02             	or     DWORD PTR [ebx],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:94
    RELOAD_CR3
 1008950:	0f 20 d8             	mov    eax,cr3
 1008953:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:96
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008956:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 100895d:	74 12                	je     1008971 <kPagingSetPageReadOnlyFlag+0x58>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:97
            printk("0x%08X\n", *ptEntry);
 100895f:	83 ec 08             	sub    esp,0x8
 1008962:	ff 33                	push   DWORD PTR [ebx]
 1008964:	68 a2 78 06 01       	push   0x10678a2
 1008969:	e8 81 13 00 00       	call   1009cef <printk>
 100896e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:99
#endif
}
 1008971:	83 c4 04             	add    esp,0x4
 1008974:	5b                   	pop    ebx
 1008975:	5e                   	pop    esi
 1008976:	c3                   	ret    

01008977 <kPagingUpdatePTEPresentFlag>:
kPagingUpdatePTEPresentFlag():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:102

void kPagingUpdatePTEPresentFlag(uintptr_t* ptEntry, bool present)
{
 1008977:	56                   	push   esi
 1008978:	53                   	push   ebx
 1008979:	83 ec 04             	sub    esp,0x4
 100897c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1008980:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:103
         printd(DEBUG_PAGING,"pagingUpdatePTEPresentFlag: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
 1008984:	ff 33                	push   DWORD PTR [ebx]
 1008986:	53                   	push   ebx
 1008987:	68 d4 20 04 01       	push   0x10420d4
 100898c:	6a 40                	push   0x40
 100898e:	e8 74 13 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:104
         if (present)
 1008993:	83 c4 10             	add    esp,0x10
 1008996:	89 f0                	mov    eax,esi
 1008998:	84 c0                	test   al,al
 100899a:	74 05                	je     10089a1 <kPagingUpdatePTEPresentFlag+0x2a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:105
             *ptEntry=*ptEntry | 1;
 100899c:	83 0b 01             	or     DWORD PTR [ebx],0x1
 100899f:	eb 03                	jmp    10089a4 <kPagingUpdatePTEPresentFlag+0x2d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:107
         else
             *ptEntry&=0xFFFFFFFE;
 10089a1:	83 23 fe             	and    DWORD PTR [ebx],0xfffffffe
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:108
         __asm__("mov eax,cr3\nmov cr3,eax\n":::"eax");
 10089a4:	0f 20 d8             	mov    eax,cr3
 10089a7:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:109
         printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
 10089aa:	83 ec 04             	sub    esp,0x4
 10089ad:	ff 33                	push   DWORD PTR [ebx]
 10089af:	68 a2 78 06 01       	push   0x10678a2
 10089b4:	6a 40                	push   0x40
 10089b6:	e8 4c 13 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:110
}
 10089bb:	83 c4 14             	add    esp,0x14
 10089be:	5b                   	pop    ebx
 10089bf:	5e                   	pop    esi
 10089c0:	c3                   	ret    

010089c1 <kSetVirtualRangeRO>:
kSetVirtualRangeRO():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:113

void kSetVirtualRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
 10089c1:	55                   	push   ebp
 10089c2:	57                   	push   edi
 10089c3:	56                   	push   esi
 10089c4:	53                   	push   ebx
 10089c5:	83 ec 1c             	sub    esp,0x1c
 10089c8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
 10089cc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
 10089d0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
 10089d4:	89 f7                	mov    edi,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:116
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 10089d6:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 10089dd:	74 12                	je     10089f1 <kSetVirtualRangeRO+0x30>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:117
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
 10089df:	83 ec 04             	sub    esp,0x4
 10089e2:	55                   	push   ebp
 10089e3:	53                   	push   ebx
 10089e4:	68 10 21 04 01       	push   0x1042110
 10089e9:	e8 01 13 00 00       	call   1009cef <printk>
 10089ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:119 (discriminator 1)
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
 10089f1:	83 c5 01             	add    ebp,0x1
 10089f4:	39 eb                	cmp    ebx,ebp
 10089f6:	77 5b                	ja     1008a53 <kSetVirtualRangeRO+0x92>
 10089f8:	89 f0                	mov    eax,esi
 10089fa:	84 c0                	test   al,al
 10089fc:	b8 fd 74 06 01       	mov    eax,0x10674fd
 1008a01:	ba 71 de 04 01       	mov    edx,0x104de71
 1008a06:	0f 45 c2             	cmovne eax,edx
 1008a09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:126
        startPTE=(uintptr_t*)kPagingGet4kPTEntryAddress(cnt);
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
            printk("0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
 1008a0d:	89 f8                	mov    eax,edi
 1008a0f:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:121
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
    {
        startPTE=(uintptr_t*)kPagingGet4kPTEntryAddress(cnt);
 1008a12:	83 ec 0c             	sub    esp,0xc
 1008a15:	53                   	push   ebx
 1008a16:	e8 94 fe ff ff       	call   10088af <kPagingGet4kPTEntryAddress>
 1008a1b:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:123
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008a1d:	83 c4 10             	add    esp,0x10
 1008a20:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008a27:	74 13                	je     1008a3c <kSetVirtualRangeRO+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:124 (discriminator 4)
            printk("0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
 1008a29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 1008a2d:	50                   	push   eax
 1008a2e:	53                   	push   ebx
 1008a2f:	68 00 75 06 01       	push   0x1067500
 1008a34:	e8 b6 12 00 00       	call   1009cef <printk>
 1008a39:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:126 (discriminator 2)
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
 1008a3c:	83 ec 08             	sub    esp,0x8
 1008a3f:	57                   	push   edi
 1008a40:	56                   	push   esi
 1008a41:	e8 d3 fe ff ff       	call   1008919 <kPagingSetPageReadOnlyFlag>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:119 (discriminator 2)
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
 1008a46:	81 c3 00 10 00 00    	add    ebx,0x1000
 1008a4c:	83 c4 10             	add    esp,0x10
 1008a4f:	39 eb                	cmp    ebx,ebp
 1008a51:	76 bf                	jbe    1008a12 <kSetVirtualRangeRO+0x51>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:130
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
            
    }
        //for cnt=0;cnt<=8192;cnt+=4096
}
 1008a53:	83 c4 1c             	add    esp,0x1c
 1008a56:	5b                   	pop    ebx
 1008a57:	5e                   	pop    esi
 1008a58:	5f                   	pop    edi
 1008a59:	5d                   	pop    ebp
 1008a5a:	c3                   	ret    

01008a5b <kpagingUpdatePresentFlagA>:
kpagingUpdatePresentFlagA():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:134

//Absolute version, page passed is already virtual
void kpagingUpdatePresentFlagA(uint32_t address, bool present)
{
 1008a5b:	56                   	push   esi
 1008a5c:	53                   	push   ebx
 1008a5d:	83 ec 04             	sub    esp,0x4
 1008a60:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 1008a64:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:136
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008a68:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008a6f:	74 21                	je     1008a92 <kpagingUpdatePresentFlagA+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:137
            printk("kpagingUpdatePresentFlagA: Make 0x%08X %s\n", address, present?"present":"not present");
 1008a71:	84 db                	test   bl,bl
 1008a73:	ba 18 75 06 01       	mov    edx,0x1067518
 1008a78:	b8 1c 75 06 01       	mov    eax,0x106751c
 1008a7d:	0f 44 c2             	cmove  eax,edx
 1008a80:	83 ec 04             	sub    esp,0x4
 1008a83:	50                   	push   eax
 1008a84:	56                   	push   esi
 1008a85:	68 40 21 04 01       	push   0x1042140
 1008a8a:	e8 60 12 00 00       	call   1009cef <printk>
 1008a8f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:139
#endif
        uintptr_t* pagePTE= (uintptr_t*)kPagingGet4kPTEntryAddress(address&0xFFFFF000);
 1008a92:	83 ec 0c             	sub    esp,0xc
 1008a95:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
 1008a9b:	56                   	push   esi
 1008a9c:	e8 0e fe ff ff       	call   10088af <kPagingGet4kPTEntryAddress>
 1008aa1:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:141
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008aa3:	83 c4 10             	add    esp,0x10
 1008aa6:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008aad:	74 11                	je     1008ac0 <kpagingUpdatePresentFlagA+0x65>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:142
            printk("kpagingUpdatePresentFlagA: updating entry 0x%08X\n", pagePTE);
 1008aaf:	83 ec 08             	sub    esp,0x8
 1008ab2:	50                   	push   eax
 1008ab3:	68 6c 21 04 01       	push   0x104216c
 1008ab8:	e8 32 12 00 00       	call   1009cef <printk>
 1008abd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:144
#endif
        kPagingUpdatePTEPresentFlag(pagePTE, present);
 1008ac0:	83 ec 08             	sub    esp,0x8
 1008ac3:	0f b6 db             	movzx  ebx,bl
 1008ac6:	53                   	push   ebx
 1008ac7:	56                   	push   esi
 1008ac8:	e8 aa fe ff ff       	call   1008977 <kPagingUpdatePTEPresentFlag>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:145
}
 1008acd:	83 c4 14             	add    esp,0x14
 1008ad0:	5b                   	pop    ebx
 1008ad1:	5e                   	pop    esi
 1008ad2:	c3                   	ret    

01008ad3 <kpagingUpdatePresentFlagV>:
kpagingUpdatePresentFlagV():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:148

void kpagingUpdatePresentFlagV(uint32_t address, bool present)
{
 1008ad3:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:150
    address+=KERNEL_PAGED_BASE_ADDRESS; 
    kpagingUpdatePresentFlagA(address, present);
 1008ad6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
 1008adb:	50                   	push   eax
 1008adc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 1008ae0:	2d 00 00 00 40       	sub    eax,0x40000000
 1008ae5:	50                   	push   eax
 1008ae6:	e8 70 ff ff ff       	call   1008a5b <kpagingUpdatePresentFlagA>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:151
}
 1008aeb:	83 c4 1c             	add    esp,0x1c
 1008aee:	c3                   	ret    

01008aef <kMapPage>:
kMapPage():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:154

void kMapPage(uintptr_t mapTo, uintptr_t mapFrom, uint8_t flags)
{
 1008aef:	57                   	push   edi
 1008af0:	56                   	push   esi
 1008af1:	53                   	push   ebx
 1008af2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
 1008af6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:159
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
    ptrVal=ptr[(mapTo>>22)];
 1008afa:	89 cb                	mov    ebx,ecx
 1008afc:	c1 eb 16             	shr    ebx,0x16
 1008aff:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
 1008b04:	8d 1c 98             	lea    ebx,[eax+ebx*4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:160
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
 1008b07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
 1008b0a:	75 6a                	jne    1008b76 <kMapPage+0x87>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:160 (discriminator 1)
 1008b0c:	bf 00 00 00 00       	mov    edi,0x0
 1008b11:	3b 3d 8c 95 12 00    	cmp    edi,DWORD PTR ds:0x12958c
 1008b17:	72 08                	jb     1008b21 <kMapPage+0x32>
 1008b19:	3b 0d 88 95 12 00    	cmp    ecx,DWORD PTR ds:0x129588
 1008b1f:	73 41                	jae    1008b62 <kMapPage+0x73>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:163
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
 1008b21:	c7 03 63 00 00 20    	mov    DWORD PTR [ebx],0x20000063
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:164
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
 1008b27:	89 c8                	mov    eax,ecx
 1008b29:	25 ff 03 00 00       	and    eax,0x3ff
 1008b2e:	8d 34 85 00 00 00 20 	lea    esi,[eax*4+0x20000000]
 1008b35:	0f b6 d2             	movzx  edx,dl
 1008b38:	0b 54 24 14          	or     edx,DWORD PTR [esp+0x14]
 1008b3c:	89 14 85 00 00 00 20 	mov    DWORD PTR [eax*4+0x20000000],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:166
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008b43:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008b4a:	74 64                	je     1008bb0 <kMapPage+0xc1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:167
            printk("kMapPage: Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)],ptrT[(mapTo&0x003FFFFF/4096)]);
 1008b4c:	83 ec 0c             	sub    esp,0xc
 1008b4f:	52                   	push   edx
 1008b50:	56                   	push   esi
 1008b51:	53                   	push   ebx
 1008b52:	51                   	push   ecx
 1008b53:	68 a0 21 04 01       	push   0x10421a0
 1008b58:	e8 92 11 00 00       	call   1009cef <printk>
 1008b5d:	83 c4 20             	add    esp,0x20
 1008b60:	eb 4e                	jmp    1008bb0 <kMapPage+0xc1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:175
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
        if (ptr[(mapTo>>22)]==0)
            ptr[mapTo>>22]=(KERNEL_PAGE_TABLE_BASE_ADDRESS + ((mapTo&0x003FFFFF)/4096)) | 0x63;
 1008b62:	89 c8                	mov    eax,ecx
 1008b64:	25 ff ff 3f 00       	and    eax,0x3fffff
 1008b69:	c1 e8 0c             	shr    eax,0xc
 1008b6c:	05 00 c0 4c 00       	add    eax,0x4cc000
 1008b71:	83 c8 63             	or     eax,0x63
 1008b74:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:181
        ptrVal=ptr[mapTo>>22];
        ptrVal=(ptrVal&0xFFFFF000);
        ptrT=(uint32_t*)ptrVal;
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
        ptrT[ptrVal]=mapFrom | flags;
 1008b76:	8b 33                	mov    esi,DWORD PTR [ebx]
 1008b78:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
 1008b7e:	89 c8                	mov    eax,ecx
 1008b80:	c1 e8 0a             	shr    eax,0xa
 1008b83:	25 fc 0f 00 00       	and    eax,0xffc
 1008b88:	01 f0                	add    eax,esi
 1008b8a:	0f b6 d2             	movzx  edx,dl
 1008b8d:	0b 54 24 14          	or     edx,DWORD PTR [esp+0x14]
 1008b91:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:185
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008b93:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008b9a:	74 14                	je     1008bb0 <kMapPage+0xc1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:186
            printk("2) Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal],ptrT[ptrVal]);
 1008b9c:	83 ec 0c             	sub    esp,0xc
 1008b9f:	52                   	push   edx
 1008ba0:	50                   	push   eax
 1008ba1:	53                   	push   ebx
 1008ba2:	51                   	push   ecx
 1008ba3:	68 e0 21 04 01       	push   0x10421e0
 1008ba8:	e8 42 11 00 00       	call   1009cef <printk>
 1008bad:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:190
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
 1008bb0:	5b                   	pop    ebx
 1008bb1:	5e                   	pop    esi
 1008bb2:	5f                   	pop    edi
 1008bb3:	c3                   	ret    

01008bb4 <kIsPageMapped>:
kIsPageMapped():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:193

bool kIsPageMapped(uintptr_t Address)
{
 1008bb4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:194
    if (!kPagingGet4kPTEntryValue(Address))
 1008bb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1008bbb:	e8 44 fd ff ff       	call   1008904 <kPagingGet4kPTEntryValue>
 1008bc0:	85 c0                	test   eax,eax
 1008bc2:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:197
        return false;
    return true;
}
 1008bc5:	83 c4 1c             	add    esp,0x1c
 1008bc8:	c3                   	ret    

01008bc9 <kUnMapPage>:
kUnMapPage():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:200

void kUnMapPage(uintptr_t mapTo)
{
 1008bc9:	57                   	push   edi
 1008bca:	56                   	push   esi
 1008bcb:	83 ec 04             	sub    esp,0x4
 1008bce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:205
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
    ptrVal=ptr[(mapTo>>22)];
 1008bd2:	89 d1                	mov    ecx,edx
 1008bd4:	c1 e9 16             	shr    ecx,0x16
 1008bd7:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
 1008bdc:	8d 0c 88             	lea    ecx,[eax+ecx*4]
 1008bdf:	8b 01                	mov    eax,DWORD PTR [ecx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:206
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
 1008be1:	85 c0                	test   eax,eax
 1008be3:	75 4f                	jne    1008c34 <kUnMapPage+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:206 (discriminator 1)
 1008be5:	bf 00 00 00 00       	mov    edi,0x0
 1008bea:	3b 3d 8c 95 12 00    	cmp    edi,DWORD PTR ds:0x12958c
 1008bf0:	72 08                	jb     1008bfa <kUnMapPage+0x31>
 1008bf2:	3b 15 88 95 12 00    	cmp    edx,DWORD PTR ds:0x129588
 1008bf8:	73 3a                	jae    1008c34 <kUnMapPage+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:209
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
 1008bfa:	c7 01 63 00 00 20    	mov    DWORD PTR [ecx],0x20000063
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:210
        ptrT[(mapTo&0x003FFFFF/4096)]=0;
 1008c00:	89 d0                	mov    eax,edx
 1008c02:	25 ff 03 00 00       	and    eax,0x3ff
 1008c07:	8d 34 85 00 00 00 20 	lea    esi,[eax*4+0x20000000]
 1008c0e:	c7 04 85 00 00 00 20 	mov    DWORD PTR [eax*4+0x20000000],0x0
 1008c15:	00 00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:212
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008c19:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008c20:	74 44                	je     1008c66 <kUnMapPage+0x9d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:213
            printk("kMapPage: Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)]);
 1008c22:	56                   	push   esi
 1008c23:	51                   	push   ecx
 1008c24:	52                   	push   edx
 1008c25:	68 1c 22 04 01       	push   0x104221c
 1008c2a:	e8 c0 10 00 00       	call   1009cef <printk>
 1008c2f:	83 c4 10             	add    esp,0x10
 1008c32:	eb 32                	jmp    1008c66 <kUnMapPage+0x9d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:225
        ptrVal=ptr[mapTo>>22];
        ptrVal=(ptrVal&0xFFFFF000);
        ptrT=(uint32_t*)ptrVal;
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
        ptrT[ptrVal]=0;
 1008c34:	25 00 f0 ff ff       	and    eax,0xfffff000
 1008c39:	89 c6                	mov    esi,eax
 1008c3b:	89 d0                	mov    eax,edx
 1008c3d:	c1 e8 0a             	shr    eax,0xa
 1008c40:	25 fc 0f 00 00       	and    eax,0xffc
 1008c45:	01 f0                	add    eax,esi
 1008c47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:229
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008c4d:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008c54:	74 10                	je     1008c66 <kUnMapPage+0x9d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:230
            printk("2) Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal]);
 1008c56:	50                   	push   eax
 1008c57:	51                   	push   ecx
 1008c58:	52                   	push   edx
 1008c59:	68 54 22 04 01       	push   0x1042254
 1008c5e:	e8 8c 10 00 00       	call   1009cef <printk>
 1008c63:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:234
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
 1008c66:	83 c4 04             	add    esp,0x4
 1008c69:	5e                   	pop    esi
 1008c6a:	5f                   	pop    edi
 1008c6b:	c3                   	ret    

01008c6c <kSetPhysicalRangeRO>:
kSetPhysicalRangeRO():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:237

void kSetPhysicalRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
 1008c6c:	55                   	push   ebp
 1008c6d:	57                   	push   edi
 1008c6e:	56                   	push   esi
 1008c6f:	53                   	push   ebx
 1008c70:	83 ec 0c             	sub    esp,0xc
 1008c73:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 1008c77:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
 1008c7b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:239
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008c7f:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008c86:	74 22                	je     1008caa <kSetPhysicalRangeRO+0x3e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:240
            printk("kMakePhysicalRangeRO: Make 0x%08X(0x%08X)-0x%08X(0x%08X) r/o\n", startAddy, startAddy&0xFffff000, endAddy, endAddy&0xFFFFF000);
 1008c88:	83 ec 0c             	sub    esp,0xc
 1008c8b:	89 f0                	mov    eax,esi
 1008c8d:	25 00 f0 ff ff       	and    eax,0xfffff000
 1008c92:	50                   	push   eax
 1008c93:	56                   	push   esi
 1008c94:	89 e8                	mov    eax,ebp
 1008c96:	25 00 f0 ff ff       	and    eax,0xfffff000
 1008c9b:	50                   	push   eax
 1008c9c:	55                   	push   ebp
 1008c9d:	68 84 22 04 01       	push   0x1042284
 1008ca2:	e8 48 10 00 00       	call   1009cef <printk>
 1008ca7:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:242
#endif
    kSetVirtualRangeRO((startAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, (endAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, readOnly);
 1008caa:	83 ec 04             	sub    esp,0x4
 1008cad:	0f b6 fb             	movzx  edi,bl
 1008cb0:	57                   	push   edi
 1008cb1:	81 ee 00 00 00 40    	sub    esi,0x40000000
 1008cb7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
 1008cbd:	56                   	push   esi
 1008cbe:	8d 9d 00 00 00 c0    	lea    ebx,[ebp-0x40000000]
 1008cc4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
 1008cca:	53                   	push   ebx
 1008ccb:	e8 f1 fc ff ff       	call   10089c1 <kSetVirtualRangeRO>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:243
}
 1008cd0:	83 c4 1c             	add    esp,0x1c
 1008cd3:	5b                   	pop    ebx
 1008cd4:	5e                   	pop    esi
 1008cd5:	5f                   	pop    edi
 1008cd6:	5d                   	pop    ebp
 1008cd7:	c3                   	ret    

01008cd8 <mmKernelSetPageInUseFlag>:
mmKernelSetPageInUseFlag():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:246

void mmKernelSetPageInUseFlag(uintptr_t address, bool inUse)
{
 1008cd8:	56                   	push   esi
 1008cd9:	53                   	push   ebx
 1008cda:	83 ec 04             	sub    esp,0x4
 1008cdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1008ce1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:249
    uintptr_t* ptEntry;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008ce5:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008cec:	74 22                	je     1008d10 <mmKernelSetPageInUseFlag+0x38>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:250
           printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
 1008cee:	89 f0                	mov    eax,esi
 1008cf0:	84 c0                	test   al,al
 1008cf2:	ba 24 75 06 01       	mov    edx,0x1067524
 1008cf7:	b8 28 75 06 01       	mov    eax,0x1067528
 1008cfc:	0f 44 c2             	cmove  eax,edx
 1008cff:	50                   	push   eax
 1008d00:	53                   	push   ebx
 1008d01:	68 c4 22 04 01       	push   0x10422c4
 1008d06:	6a 40                	push   0x40
 1008d08:	e8 fa 0f 00 00       	call   1009d07 <printd>
 1008d0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:252
#endif
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
 1008d10:	83 ec 0c             	sub    esp,0xc
 1008d13:	53                   	push   ebx
 1008d14:	e8 96 fb ff ff       	call   10088af <kPagingGet4kPTEntryAddress>
 1008d19:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:253
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
 1008d1b:	ff 30                	push   DWORD PTR [eax]
 1008d1d:	50                   	push   eax
 1008d1e:	68 08 23 04 01       	push   0x1042308
 1008d23:	6a 40                	push   0x40
 1008d25:	e8 dd 0f 00 00       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:254
        if (inUse)
 1008d2a:	83 c4 20             	add    esp,0x20
 1008d2d:	89 f0                	mov    eax,esi
 1008d2f:	84 c0                	test   al,al
 1008d31:	74 08                	je     1008d3b <mmKernelSetPageInUseFlag+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:255
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
 1008d33:	81 0b 00 08 00 00    	or     DWORD PTR [ebx],0x800
 1008d39:	eb 06                	jmp    1008d41 <mmKernelSetPageInUseFlag+0x69>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:257
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
 1008d3b:	81 23 ff f7 ff ff    	and    DWORD PTR [ebx],0xfffff7ff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:258
}
 1008d41:	83 c4 04             	add    esp,0x4
 1008d44:	5b                   	pop    ebx
 1008d45:	5e                   	pop    esi
 1008d46:	c3                   	ret    

01008d47 <mmKernelSetPageRangeInUseFlag>:
mmKernelSetPageRangeInUseFlag():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:261

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
 1008d47:	55                   	push   ebp
 1008d48:	57                   	push   edi
 1008d49:	56                   	push   esi
 1008d4a:	53                   	push   ebx
 1008d4b:	83 ec 0c             	sub    esp,0xc
 1008d4e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
 1008d52:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
 1008d56:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
 1008d5a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:262
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
 1008d5f:	39 fb                	cmp    ebx,edi
 1008d61:	73 16                	jae    1008d79 <mmKernelSetPageRangeInUseFlag+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:263 (discriminator 3)
        mmKernelSetPageInUseFlag(cnt,inUse);
 1008d63:	0f b6 f0             	movzx  esi,al
 1008d66:	83 ec 08             	sub    esp,0x8
 1008d69:	56                   	push   esi
 1008d6a:	53                   	push   ebx
 1008d6b:	e8 68 ff ff ff       	call   1008cd8 <mmKernelSetPageInUseFlag>
 1008d70:	01 eb                	add    ebx,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:262 (discriminator 3)
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
 1008d72:	83 c4 10             	add    esp,0x10
 1008d75:	39 fb                	cmp    ebx,edi
 1008d77:	72 ed                	jb     1008d66 <mmKernelSetPageRangeInUseFlag+0x1f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:264
        mmKernelSetPageInUseFlag(cnt,inUse);
}
 1008d79:	83 c4 0c             	add    esp,0xc
 1008d7c:	5b                   	pop    ebx
 1008d7d:	5e                   	pop    esi
 1008d7e:	5f                   	pop    edi
 1008d7f:	5d                   	pop    ebp
 1008d80:	c3                   	ret    

01008d81 <mmUnusePageRange>:
mmUnusePageRange():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:267

void mmUnusePageRange()
{
 1008d81:	f3 c3                	repz ret 
 1008d83:	90                   	nop

01008d84 <reverse>:
reverse():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:31
//#include <string.h>

/* reverse:  reverse string s in place */
extern int strlen(char*);
 void reverse(char s[])
 {
 1008d84:	56                   	push   esi
 1008d85:	53                   	push   ebx
 1008d86:	83 ec 10             	sub    esp,0x10
 1008d89:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:35
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 1008d8d:	53                   	push   ebx
 1008d8e:	e8 79 10 00 00       	call   1009e0c <strlen>
 1008d93:	83 e8 01             	sub    eax,0x1
 1008d96:	83 c4 10             	add    esp,0x10
 1008d99:	85 c0                	test   eax,eax
 1008d9b:	7e 1f                	jle    1008dbc <reverse+0x38>
 1008d9d:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:36 (discriminator 3)
         c = s[i];
 1008da2:	0f b6 34 13          	movzx  esi,BYTE PTR [ebx+edx*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:37 (discriminator 3)
         s[i] = s[j];
 1008da6:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
 1008daa:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:38 (discriminator 3)
         s[j] = c;
 1008dad:	89 f1                	mov    ecx,esi
 1008daf:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:35 (discriminator 3)
 void reverse(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 1008db2:	83 c2 01             	add    edx,0x1
 1008db5:	83 e8 01             	sub    eax,0x1
 1008db8:	39 c2                	cmp    edx,eax
 1008dba:	7c e6                	jl     1008da2 <reverse+0x1e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:40
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
 1008dbc:	83 c4 04             	add    esp,0x4
 1008dbf:	5b                   	pop    ebx
 1008dc0:	5e                   	pop    esi
 1008dc1:	c3                   	ret    

01008dc2 <itoa>:
itoa():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:42
 void itoa(int n, char s[])
 {
 1008dc2:	55                   	push   ebp
 1008dc3:	57                   	push   edi
 1008dc4:	56                   	push   esi
 1008dc5:	53                   	push   ebx
 1008dc6:	83 ec 1c             	sub    esp,0x1c
 1008dc9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
 1008dcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
 1008dd1:	c1 f8 1f             	sar    eax,0x1f
 1008dd4:	89 c1                	mov    ecx,eax
 1008dd6:	33 4c 24 30          	xor    ecx,DWORD PTR [esp+0x30]
 1008dda:	29 c1                	sub    ecx,eax
 1008ddc:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:49

     if ((sign = n) < 0)  /* record sign */
         n = -n;          /* make n positive */
     i = 0;
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
 1008de1:	bd 67 66 66 66       	mov    ebp,0x66666667
 1008de6:	eb 02                	jmp    1008dea <itoa+0x28>
 1008de8:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:49 (discriminator 1)
 1008dea:	8d 5e 01             	lea    ebx,[esi+0x1]
 1008ded:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
 1008df1:	89 c8                	mov    eax,ecx
 1008df3:	f7 ed                	imul   ebp
 1008df5:	c1 fa 02             	sar    edx,0x2
 1008df8:	89 c8                	mov    eax,ecx
 1008dfa:	c1 f8 1f             	sar    eax,0x1f
 1008dfd:	29 c2                	sub    edx,eax
 1008dff:	8d 04 92             	lea    eax,[edx+edx*4]
 1008e02:	01 c0                	add    eax,eax
 1008e04:	29 c1                	sub    ecx,eax
 1008e06:	83 c1 30             	add    ecx,0x30
 1008e09:	88 4c 1f ff          	mov    BYTE PTR [edi+ebx*1-0x1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:50 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
 1008e0d:	89 d1                	mov    ecx,edx
 1008e0f:	85 d2                	test   edx,edx
 1008e11:	7f d5                	jg     1008de8 <itoa+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:51
     if (sign < 0)
 1008e13:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
 1008e18:	79 0b                	jns    1008e25 <itoa+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:52
         s[i++] = '-';
 1008e1a:	8d 5e 02             	lea    ebx,[esi+0x2]
 1008e1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1008e21:	c6 04 07 2d          	mov    BYTE PTR [edi+eax*1],0x2d
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:53
     s[i] = '\0';
 1008e25:	c6 04 1f 00          	mov    BYTE PTR [edi+ebx*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:54
     reverse(s);
 1008e29:	83 ec 0c             	sub    esp,0xc
 1008e2c:	57                   	push   edi
 1008e2d:	e8 52 ff ff ff       	call   1008d84 <reverse>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:55
 }
 1008e32:	83 c4 2c             	add    esp,0x2c
 1008e35:	5b                   	pop    ebx
 1008e36:	5e                   	pop    esi
 1008e37:	5f                   	pop    edi
 1008e38:	5d                   	pop    ebp
 1008e39:	c3                   	ret    

01008e3a <itox>:
itox():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:57
void itox(unsigned int i, char *s)
{
 1008e3a:	53                   	push   ebx
 1008e3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 1008e3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:60
    unsigned char n;

    s += 4;
 1008e43:	8d 43 04             	lea    eax,[ebx+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:61
    *s = '\0';
 1008e46:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
 1008e4a:	83 eb 04             	sub    ebx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:64 (discriminator 3)

    for (n = 8; n != 0; --n) {
        *--s = "0123456789ABCDEF"[i & 0x0F];
 1008e4d:	83 e8 01             	sub    eax,0x1
 1008e50:	89 d1                	mov    ecx,edx
 1008e52:	83 e1 0f             	and    ecx,0xf
 1008e55:	0f b6 89 2f 75 06 01 	movzx  ecx,BYTE PTR [ecx+0x106752f]
 1008e5c:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:65 (discriminator 3)
        i >>= 4;
 1008e5e:	c1 ea 04             	shr    edx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:63 (discriminator 3)
    unsigned char n;

    s += 4;
    *s = '\0';

    for (n = 8; n != 0; --n) {
 1008e61:	39 c3                	cmp    ebx,eax
 1008e63:	75 e8                	jne    1008e4d <itox+0x13>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:67
        *--s = "0123456789ABCDEF"[i & 0x0F];
        i >>= 4;
    }
}
 1008e65:	5b                   	pop    ebx
 1008e66:	c3                   	ret    

01008e67 <atoi>:
atoi():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:70
// A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoi(char *str)
{
 1008e67:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:75
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
 1008e6b:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
 1008e6e:	84 d2                	test   dl,dl
 1008e70:	74 1f                	je     1008e91 <atoi+0x2a>
 1008e72:	83 c1 01             	add    ecx,0x1
 1008e75:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:76 (discriminator 3)
        res = res*10 + str[i] - '0';
 1008e7a:	8d 04 80             	lea    eax,[eax+eax*4]
 1008e7d:	0f be d2             	movsx  edx,dl
 1008e80:	8d 44 42 d0          	lea    eax,[edx+eax*2-0x30]
 1008e84:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:75 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
 1008e87:	0f b6 51 ff          	movzx  edx,BYTE PTR [ecx-0x1]
 1008e8b:	84 d2                	test   dl,dl
 1008e8d:	75 eb                	jne    1008e7a <atoi+0x13>
 1008e8f:	f3 c3                	repz ret 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:71
    }
}
// A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoi(char *str)
{
    int res = 0; // Initialize result
 1008e91:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:80
    for (int i = 0; str[i] != '\0'; ++i)
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
}
 1008e96:	c3                   	ret    

01008e97 <convert>:
convert():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:83

int convert(int s)
{
 1008e97:	83 ec 10             	sub    esp,0x10
 1008e9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:85
  int c;
  char hex[] = {'A', 'B', 'C', 'D', 'E', 'F'};
 1008e9e:	c6 44 24 0a 41       	mov    BYTE PTR [esp+0xa],0x41
 1008ea3:	c6 44 24 0b 42       	mov    BYTE PTR [esp+0xb],0x42
 1008ea8:	c6 44 24 0c 43       	mov    BYTE PTR [esp+0xc],0x43
 1008ead:	c6 44 24 0d 44       	mov    BYTE PTR [esp+0xd],0x44
 1008eb2:	c6 44 24 0e 45       	mov    BYTE PTR [esp+0xe],0x45
 1008eb7:	c6 44 24 0f 46       	mov    BYTE PTR [esp+0xf],0x46
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:86
  c = (s >= 0 && s < 9) ? s + '0' : hex[s - 10];
 1008ebc:	83 f8 08             	cmp    eax,0x8
 1008ebf:	77 05                	ja     1008ec6 <convert+0x2f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:86 (discriminator 1)
 1008ec1:	83 c0 30             	add    eax,0x30
 1008ec4:	eb 04                	jmp    1008eca <convert+0x33>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:86 (discriminator 2)
 1008ec6:	0f be 04 04          	movsx  eax,BYTE PTR [esp+eax*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:88 (discriminator 4)
  return c;
}
 1008eca:	83 c4 10             	add    esp,0x10
 1008ecd:	c3                   	ret    

01008ece <itoha>:
itoha():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:91

void itoha(unsigned int n, char *buf)
{
 1008ece:	55                   	push   ebp
 1008ecf:	57                   	push   edi
 1008ed0:	56                   	push   esi
 1008ed1:	53                   	push   ebx
 1008ed2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 1008ed6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:94
  int i = 0, j =0;
  j=7;
  while(n != 0)
 1008eda:	85 db                	test   ebx,ebx
 1008edc:	74 25                	je     1008f03 <itoha+0x35>
 1008ede:	be 07 00 00 00       	mov    esi,0x7
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:96
  {
    i = n % 16;
 1008ee3:	89 dd                	mov    ebp,ebx
 1008ee5:	83 e5 0f             	and    ebp,0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:97
      buf[j--] = convert(i);
 1008ee8:	83 ee 01             	sub    esi,0x1
 1008eeb:	55                   	push   ebp
 1008eec:	e8 a6 ff ff ff       	call   1008e97 <convert>
 1008ef1:	83 c4 04             	add    esp,0x4
 1008ef4:	88 44 37 01          	mov    BYTE PTR [edi+esi*1+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:98
      n = (n - i) / 16;
 1008ef8:	29 eb                	sub    ebx,ebp
 1008efa:	c1 eb 04             	shr    ebx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:94

void itoha(unsigned int n, char *buf)
{
  int i = 0, j =0;
  j=7;
  while(n != 0)
 1008efd:	85 db                	test   ebx,ebx
 1008eff:	75 e2                	jne    1008ee3 <itoha+0x15>
 1008f01:	eb 05                	jmp    1008f08 <itoha+0x3a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:93
}

void itoha(unsigned int n, char *buf)
{
  int i = 0, j =0;
  j=7;
 1008f03:	be 07 00 00 00       	mov    esi,0x7
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:100
  {
    i = n % 16;
      buf[j--] = convert(i);
      n = (n - i) / 16;
  }
  buf[j] = '\0';
 1008f08:	c6 04 37 00          	mov    BYTE PTR [edi+esi*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:101
}
 1008f0c:	5b                   	pop    ebx
 1008f0d:	5e                   	pop    esi
 1008f0e:	5f                   	pop    edi
 1008f0f:	5d                   	pop    ebp
 1008f10:	c3                   	ret    

01008f11 <identify_data_sizes>:
identify_data_sizes():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:104

void identify_data_sizes(sizeof_t* sizes)
{
 1008f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:105
    sizes->shortSize = sizeof(short);
 1008f15:	66 c7 00 02 00       	mov    WORD PTR [eax],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:106
    sizes->intSize = sizeof(int);
 1008f1a:	66 c7 40 02 04 00    	mov    WORD PTR [eax+0x2],0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:107
    sizes->longSize = sizeof(long);
 1008f20:	66 c7 40 04 04 00    	mov    WORD PTR [eax+0x4],0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:108
    sizes->longLongSize = sizeof(long long);
 1008f26:	66 c7 40 06 08 00    	mov    WORD PTR [eax+0x6],0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:109
    sizes->longLongIntSize = sizeof(long long int);
 1008f2c:	66 c7 40 08 08 00    	mov    WORD PTR [eax+0x8],0x8
 1008f32:	c3                   	ret    

01008f33 <memset>:
memset():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:113
}

void *memset(void *d1, int val, size_t len)
{
 1008f33:	56                   	push   esi
 1008f34:	53                   	push   ebx
 1008f35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1008f39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 1008f3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:116
    uint8_t *d = d1;
    uint16_t*e = d1;
    uint16_t eVal=(val << 16) | (val << 8) | val;
 1008f41:	89 f1                	mov    ecx,esi
 1008f43:	c1 e1 08             	shl    ecx,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:120
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
 1008f46:	f6 c2 03             	test   dl,0x3
 1008f49:	75 16                	jne    1008f61 <memset+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:121
    while (len-=4) {
 1008f4b:	83 ea 04             	sub    edx,0x4
 1008f4e:	74 43                	je     1008f93 <memset+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:122
        *d++ = fVal;
 1008f50:	89 f3                	mov    ebx,esi
 1008f52:	89 c1                	mov    ecx,eax
 1008f54:	83 c1 01             	add    ecx,0x1
 1008f57:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:121
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
 1008f5a:	83 ea 04             	sub    edx,0x4
 1008f5d:	75 f5                	jne    1008f54 <memset+0x21>
 1008f5f:	eb 32                	jmp    1008f93 <memset+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:124
        *d++ = fVal;
    }
    else if (((len%2)==0))
 1008f61:	f6 c2 01             	test   dl,0x1
 1008f64:	74 0b                	je     1008f71 <memset+0x3e>
 1008f66:	8d 1c 10             	lea    ebx,[eax+edx*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:129
    while (len-=2) {
        *d++ = eVal;
    }
    else
    while (len--) {
 1008f69:	89 c1                	mov    ecx,eax
 1008f6b:	85 d2                	test   edx,edx
 1008f6d:	75 18                	jne    1008f87 <memset+0x54>
 1008f6f:	eb 22                	jmp    1008f93 <memset+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:125
    if ((len%4)==0)
    while (len-=4) {
        *d++ = fVal;
    }
    else if (((len%2)==0))
    while (len-=2) {
 1008f71:	83 ea 02             	sub    edx,0x2
 1008f74:	74 1d                	je     1008f93 <memset+0x60>
 1008f76:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:126
        *d++ = eVal;
 1008f78:	09 f1                	or     ecx,esi
 1008f7a:	83 c3 01             	add    ebx,0x1
 1008f7d:	88 4b ff             	mov    BYTE PTR [ebx-0x1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:125
    if ((len%4)==0)
    while (len-=4) {
        *d++ = fVal;
    }
    else if (((len%2)==0))
    while (len-=2) {
 1008f80:	83 ea 02             	sub    edx,0x2
 1008f83:	75 f5                	jne    1008f7a <memset+0x47>
 1008f85:	eb 0c                	jmp    1008f93 <memset+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:130
        *d++ = eVal;
    }
    else
    while (len--) {
        *d++ = val;
 1008f87:	83 c1 01             	add    ecx,0x1
 1008f8a:	89 f2                	mov    edx,esi
 1008f8c:	88 51 ff             	mov    BYTE PTR [ecx-0x1],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:129
    else if (((len%2)==0))
    while (len-=2) {
        *d++ = eVal;
    }
    else
    while (len--) {
 1008f8f:	39 cb                	cmp    ebx,ecx
 1008f91:	75 f4                	jne    1008f87 <memset+0x54>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:133
        *d++ = val;
    }
    return d1;
}
 1008f93:	5b                   	pop    ebx
 1008f94:	5e                   	pop    esi
 1008f95:	c3                   	ret    

01008f96 <bcdToDec>:
bcdToDec():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:136

uint8_t bcdToDec(uint8_t val)
{
 1008f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:137
  return ( (val/16*10) + (val%16) );
 1008f9a:	89 c2                	mov    edx,eax
 1008f9c:	c0 ea 04             	shr    dl,0x4
 1008f9f:	8d 14 92             	lea    edx,[edx+edx*4]
 1008fa2:	83 e0 0f             	and    eax,0xf
 1008fa5:	8d 04 50             	lea    eax,[eax+edx*2]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:138
}
 1008fa8:	c3                   	ret    

01008fa9 <decToBcd>:
decToBcd():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:141

uint8_t decToBcd(uint8_t val)
{
 1008fa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:142
  return ( (val/10*16) + (val%10) );
 1008fad:	0f b6 c8             	movzx  ecx,al
 1008fb0:	8d 14 89             	lea    edx,[ecx+ecx*4]
 1008fb3:	8d 14 d1             	lea    edx,[ecx+edx*8]
 1008fb6:	8d 14 92             	lea    edx,[edx+edx*4]
 1008fb9:	66 c1 ea 0b          	shr    dx,0xb
 1008fbd:	89 d1                	mov    ecx,edx
 1008fbf:	c1 e1 04             	shl    ecx,0x4
 1008fc2:	8d 14 92             	lea    edx,[edx+edx*4]
 1008fc5:	01 d2                	add    edx,edx
 1008fc7:	29 d0                	sub    eax,edx
 1008fc9:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:143
}
 1008fcb:	c3                   	ret    

01008fcc <initSystemDate>:
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:145
void initSystemDate()
{
 1008fcc:	83 ec 3c             	sub    esp,0x3c
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1008fcf:	b8 00 00 00 00       	mov    eax,0x0
 1008fd4:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1008fd6:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:149
    struct tm tmbuf;

    outb(0x70, 0x00);
    tmbuf.tm_sec = bcdToDec(inb(0x71));
 1008fd8:	0f b6 c0             	movzx  eax,al
 1008fdb:	50                   	push   eax
 1008fdc:	e8 b5 ff ff ff       	call   1008f96 <bcdToDec>
 1008fe1:	0f b6 c0             	movzx  eax,al
 1008fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1008fe8:	b8 02 00 00 00       	mov    eax,0x2
 1008fed:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1008fef:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:151
    outb(0x70, 0x02);
    tmbuf.tm_min = bcdToDec(inb(0x71));
 1008ff1:	0f b6 c0             	movzx  eax,al
 1008ff4:	89 04 24             	mov    DWORD PTR [esp],eax
 1008ff7:	e8 9a ff ff ff       	call   1008f96 <bcdToDec>
 1008ffc:	0f b6 c0             	movzx  eax,al
 1008fff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1009003:	b8 04 00 00 00       	mov    eax,0x4
 1009008:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 100900a:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:153
    outb(0x70, 0x04);
    tmbuf.tm_hour = bcdToDec(inb(0x71));
 100900c:	0f b6 c0             	movzx  eax,al
 100900f:	89 04 24             	mov    DWORD PTR [esp],eax
 1009012:	e8 7f ff ff ff       	call   1008f96 <bcdToDec>
 1009017:	0f b6 c0             	movzx  eax,al
 100901a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 100901e:	b8 07 00 00 00       	mov    eax,0x7
 1009023:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1009025:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:155
    outb(0x70, 0x07);
    tmbuf.tm_mday = bcdToDec(inb(0x71));
 1009027:	0f b6 c0             	movzx  eax,al
 100902a:	89 04 24             	mov    DWORD PTR [esp],eax
 100902d:	e8 64 ff ff ff       	call   1008f96 <bcdToDec>
 1009032:	0f b6 c0             	movzx  eax,al
 1009035:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1009039:	b8 08 00 00 00       	mov    eax,0x8
 100903e:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1009040:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:157
    outb(0x70, 0x08);
    tmbuf.tm_mon = bcdToDec(inb(0x71));
 1009042:	0f b6 c0             	movzx  eax,al
 1009045:	89 04 24             	mov    DWORD PTR [esp],eax
 1009048:	e8 49 ff ff ff       	call   1008f96 <bcdToDec>
 100904d:	0f b6 c0             	movzx  eax,al
 1009050:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1009054:	b8 09 00 00 00       	mov    eax,0x9
 1009059:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 100905b:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:159
    outb(0x70, 0x09);
    tmbuf.tm_year = bcdToDec(inb(0x71));
 100905d:	0f b6 c0             	movzx  eax,al
 1009060:	89 04 24             	mov    DWORD PTR [esp],eax
 1009063:	e8 2e ff ff ff       	call   1008f96 <bcdToDec>
 1009068:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:160
    tmbuf.tm_isdst = -1;
 100906b:	c7 44 24 30 ff ff ff 	mov    DWORD PTR [esp+0x30],0xffffffff
 1009072:	ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:162
    tmbuf.tm_year += 2000;
    tmbuf.tm_year = tmbuf.tm_year - 1900;
 1009073:	0f b6 c0             	movzx  eax,al
 1009076:	83 c0 64             	add    eax,0x64
 1009079:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:163
    kSystemStartTime = mktime(&tmbuf);
 100907d:	8d 44 24 10          	lea    eax,[esp+0x10]
 1009081:	50                   	push   eax
 1009082:	e8 43 11 00 00       	call   100a1ca <mktime>
 1009087:	a3 c8 97 12 00       	mov    ds:0x1297c8,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:164
    kSystemCurrentTime = kSystemStartTime;
 100908c:	a3 cc 97 12 00       	mov    ds:0x1297cc,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:166
//printf("System Date = %d/%d/%d %d:%d:%d\n", tmbuf.tm_mon, tmbuf.tm_mday, tmbuf.tm_year, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);
}
 1009091:	83 c4 4c             	add    esp,0x4c
 1009094:	c3                   	ret    

01009095 <strtoupper>:
strtoupper():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:168
char * strtoupper(char* pointerToString)
{
 1009095:	56                   	push   esi
 1009096:	53                   	push   ebx
 1009097:	83 ec 10             	sub    esp,0x10
 100909a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:169
    uint8_t start=0, length=strlen(pointerToString);
 100909e:	53                   	push   ebx
 100909f:	e8 68 0d 00 00       	call   1009e0c <strlen>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:173
    char* myPtr=pointerToString;
    
        // Trim.Start:
        while (start<length)
 10090a4:	83 c4 10             	add    esp,0x10
 10090a7:	84 c0                	test   al,al
 10090a9:	74 23                	je     10090ce <strtoupper+0x39>
 10090ab:	89 da                	mov    edx,ebx
 10090ad:	83 e8 01             	sub    eax,0x1
 10090b0:	0f b6 c0             	movzx  eax,al
 10090b3:	8d 74 03 01          	lea    esi,[ebx+eax*1+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:175
        {
            if (myPtr[start]>='a' && myPtr[start]<='z')
 10090b7:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 10090ba:	8d 48 9f             	lea    ecx,[eax-0x61]
 10090bd:	80 f9 19             	cmp    cl,0x19
 10090c0:	77 05                	ja     10090c7 <strtoupper+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:176
                myPtr[start]-=32;
 10090c2:	83 e8 20             	sub    eax,0x20
 10090c5:	88 02                	mov    BYTE PTR [edx],al
 10090c7:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:173
{
    uint8_t start=0, length=strlen(pointerToString);
    char* myPtr=pointerToString;
    
        // Trim.Start:
        while (start<length)
 10090ca:	39 f2                	cmp    edx,esi
 10090cc:	75 e9                	jne    10090b7 <strtoupper+0x22>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:181
                myPtr[start]-=32;
            start++;
        }

    return pointerToString;
}
 10090ce:	89 d8                	mov    eax,ebx
 10090d0:	83 c4 04             	add    esp,0x4
 10090d3:	5b                   	pop    ebx
 10090d4:	5e                   	pop    esi
 10090d5:	c3                   	ret    

010090d6 <printDumpedRegs>:
printDumpedRegs():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:184

void printDumpedRegs()
{
 10090d6:	56                   	push   esi
 10090d7:	53                   	push   ebx
 10090d8:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:185
    uint32_t esp = exceptionSavedESP;
 10090db:	8b 35 2c 97 12 00    	mov    esi,DWORD PTR ds:0x12972c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:190
    uint8_t* lCSIPPtr;

    
    lCSIPPtr=(uint8_t*)(exceptionEIP);
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", exceptionAX, exceptionBX, exceptionCX, exceptionDX,exceptionFlags);
 10090e1:	ff 35 30 97 12 00    	push   DWORD PTR ds:0x129730
 10090e7:	ff 35 fc 96 12 00    	push   DWORD PTR ds:0x1296fc
 10090ed:	ff 35 f8 96 12 00    	push   DWORD PTR ds:0x1296f8
 10090f3:	ff 35 f4 96 12 00    	push   DWORD PTR ds:0x1296f4
 10090f9:	ff 35 f0 96 12 00    	push   DWORD PTR ds:0x1296f0
 10090ff:	68 48 23 04 01       	push   0x1042348
 1009104:	e8 e6 0b 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:191
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", exceptionBP, exceptionSI, exceptionDI, exceptionSavedESP);
 1009109:	83 c4 14             	add    esp,0x14
 100910c:	ff 35 2c 97 12 00    	push   DWORD PTR ds:0x12972c
 1009112:	ff 35 04 97 12 00    	push   DWORD PTR ds:0x129704
 1009118:	ff 35 00 97 12 00    	push   DWORD PTR ds:0x129700
 100911e:	ff 35 08 97 12 00    	push   DWORD PTR ds:0x129708
 1009124:	68 78 23 04 01       	push   0x1042378
 1009129:	e8 c1 0b 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:192
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
 100912e:	83 c4 14             	add    esp,0x14
 1009131:	ff 35 14 97 12 00    	push   DWORD PTR ds:0x129714
 1009137:	ff 35 10 97 12 00    	push   DWORD PTR ds:0x129710
 100913d:	ff 35 40 97 12 00    	push   DWORD PTR ds:0x129740
 1009143:	ff 35 0c 97 12 00    	push   DWORD PTR ds:0x12970c
 1009149:	68 a0 23 04 01       	push   0x10423a0
 100914e:	e8 9c 0b 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:193
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionFS, exceptionGS);
 1009153:	83 c4 14             	add    esp,0x14
 1009156:	ff 35 24 97 12 00    	push   DWORD PTR ds:0x129724
 100915c:	ff 35 20 97 12 00    	push   DWORD PTR ds:0x129720
 1009162:	ff 35 1c 97 12 00    	push   DWORD PTR ds:0x12971c
 1009168:	ff 35 18 97 12 00    	push   DWORD PTR ds:0x129718
 100916e:	68 c8 23 04 01       	push   0x10423c8
 1009173:	e8 77 0b 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:194
    printk("GDT=%08X\t TR=0x%08X\n",kernelGDT.base,exceptionTR);
 1009178:	83 c4 1c             	add    esp,0x1c
 100917b:	ff 35 44 97 12 00    	push   DWORD PTR ds:0x129744
 1009181:	ff 35 8a 99 12 00    	push   DWORD PTR ds:0x12998a
 1009187:	68 40 75 06 01       	push   0x1067540
 100918c:	e8 5e 0b 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:195
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
 1009191:	ff 35 34 97 12 00    	push   DWORD PTR ds:0x129734
 1009197:	ff 35 38 97 12 00    	push   DWORD PTR ds:0x129738
 100919d:	ff 35 3c 97 12 00    	push   DWORD PTR ds:0x12973c
 10091a3:	68 f0 23 04 01       	push   0x10423f0
 10091a8:	e8 42 0b 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:196
          printk("Bytes at CS:EIP: ");
 10091ad:	83 c4 14             	add    esp,0x14
 10091b0:	68 55 75 06 01       	push   0x1067555
 10091b5:	e8 35 0b 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:199
/*          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
*/          printk("\n");
 10091ba:	c7 04 24 7b 78 06 01 	mov    DWORD PTR [esp],0x106787b
 10091c1:	e8 29 0b 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:200
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
 10091c6:	83 c4 0c             	add    esp,0xc
 10091c9:	56                   	push   esi
 10091ca:	ff 35 28 97 12 00    	push   DWORD PTR ds:0x129728
 10091d0:	68 67 75 06 01       	push   0x1067567
 10091d5:	e8 15 0b 00 00       	call   1009cef <printk>
 10091da:	83 c4 10             	add    esp,0x10
 10091dd:	bb 00 00 00 00       	mov    ebx,0x0
 10091e2:	8d 04 33             	lea    eax,[ebx+esi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:203 (discriminator 3)
          for (int cnt=0;cnt<10;cnt++)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
 10091e5:	83 ec 04             	sub    esp,0x4
 10091e8:	8b 15 e8 96 12 00    	mov    edx,DWORD PTR ds:0x1296e8
 10091ee:	ff 34 1a             	push   DWORD PTR [edx+ebx*1]
 10091f1:	50                   	push   eax
 10091f2:	68 7f 75 06 01       	push   0x106757f
 10091f7:	e8 f3 0a 00 00       	call   1009cef <printk>
 10091fc:	83 c3 04             	add    ebx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:201 (discriminator 3)
          printk("Bytes at CS:EIP: ");
/*          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
*/          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
          for (int cnt=0;cnt<10;cnt++)
 10091ff:	83 c4 10             	add    esp,0x10
 1009202:	83 fb 28             	cmp    ebx,0x28
 1009205:	75 db                	jne    10091e2 <printDumpedRegs+0x10c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:208
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
              esp+=4;
          }


}
 1009207:	83 c4 04             	add    esp,0x4
 100920a:	5b                   	pop    ebx
 100920b:	5e                   	pop    esi
 100920c:	c3                   	ret    

0100920d <printDebugRegs>:
printDebugRegs():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:211

void printDebugRegs()
{
 100920d:	57                   	push   edi
 100920e:	56                   	push   esi
 100920f:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:212
    uint32_t esp = debugSavedESP;
 1009210:	8b 35 84 97 12 00    	mov    esi,DWORD PTR ds:0x129784
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:215
    uint8_t* lCSIPPtr;

    lCSIPPtr=(uint8_t*)(debugEIP);
 1009216:	8b 1d 94 97 12 00    	mov    ebx,DWORD PTR ds:0x129794
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:216
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", debugAX, debugBX, debugCX, debugDX,debugFlags);
 100921c:	83 ec 08             	sub    esp,0x8
 100921f:	ff 35 88 97 12 00    	push   DWORD PTR ds:0x129788
 1009225:	ff 35 54 97 12 00    	push   DWORD PTR ds:0x129754
 100922b:	ff 35 50 97 12 00    	push   DWORD PTR ds:0x129750
 1009231:	ff 35 4c 97 12 00    	push   DWORD PTR ds:0x12974c
 1009237:	ff 35 48 97 12 00    	push   DWORD PTR ds:0x129748
 100923d:	68 48 23 04 01       	push   0x1042348
 1009242:	e8 a8 0a 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:217
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
 1009247:	83 c4 14             	add    esp,0x14
 100924a:	ff 35 84 97 12 00    	push   DWORD PTR ds:0x129784
 1009250:	ff 35 5c 97 12 00    	push   DWORD PTR ds:0x12975c
 1009256:	ff 35 58 97 12 00    	push   DWORD PTR ds:0x129758
 100925c:	ff 35 60 97 12 00    	push   DWORD PTR ds:0x129760
 1009262:	68 78 23 04 01       	push   0x1042378
 1009267:	e8 83 0a 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:218
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
 100926c:	83 c4 20             	add    esp,0x20
 100926f:	ff 35 6c 97 12 00    	push   DWORD PTR ds:0x12976c
 1009275:	ff 35 68 97 12 00    	push   DWORD PTR ds:0x129768
 100927b:	ff 35 64 97 12 00    	push   DWORD PTR ds:0x129764
 1009281:	68 91 75 06 01       	push   0x1067591
 1009286:	e8 64 0a 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:219
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugFS, debugGS);
 100928b:	83 c4 04             	add    esp,0x4
 100928e:	ff 35 7c 97 12 00    	push   DWORD PTR ds:0x12977c
 1009294:	ff 35 78 97 12 00    	push   DWORD PTR ds:0x129778
 100929a:	ff 35 74 97 12 00    	push   DWORD PTR ds:0x129774
 10092a0:	ff 35 70 97 12 00    	push   DWORD PTR ds:0x129770
 10092a6:	68 c8 23 04 01       	push   0x10423c8
 10092ab:	e8 3f 0a 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:220
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
 10092b0:	83 c4 20             	add    esp,0x20
 10092b3:	ff 35 8c 97 12 00    	push   DWORD PTR ds:0x12978c
 10092b9:	ff 35 94 97 12 00    	push   DWORD PTR ds:0x129794
 10092bf:	ff 35 90 97 12 00    	push   DWORD PTR ds:0x129790
 10092c5:	68 f0 23 04 01       	push   0x10423f0
 10092ca:	e8 20 0a 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:221
          printk("Bytes at CS:EIP: ");
 10092cf:	c7 04 24 55 75 06 01 	mov    DWORD PTR [esp],0x1067555
 10092d6:	e8 14 0a 00 00       	call   1009cef <printk>
 10092db:	8d 7b 13             	lea    edi,[ebx+0x13]
 10092de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:223 (discriminator 3)
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
 10092e1:	83 ec 08             	sub    esp,0x8
 10092e4:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 10092e7:	50                   	push   eax
 10092e8:	68 f7 74 06 01       	push   0x10674f7
 10092ed:	e8 fd 09 00 00       	call   1009cef <printk>
 10092f2:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:222 (discriminator 3)
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugFS, debugGS);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
 10092f5:	83 c4 10             	add    esp,0x10
 10092f8:	39 df                	cmp    edi,ebx
 10092fa:	75 e5                	jne    10092e1 <printDebugRegs+0xd4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:224
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
 10092fc:	83 ec 0c             	sub    esp,0xc
 10092ff:	68 7b 78 06 01       	push   0x106787b
 1009304:	e8 e6 09 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:225
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
 1009309:	83 c4 0c             	add    esp,0xc
 100930c:	56                   	push   esi
 100930d:	ff 35 80 97 12 00    	push   DWORD PTR ds:0x129780
 1009313:	68 67 75 06 01       	push   0x1067567
 1009318:	e8 d2 09 00 00       	call   1009cef <printk>
 100931d:	83 c4 10             	add    esp,0x10
 1009320:	bb 00 00 00 00       	mov    ebx,0x0
 1009325:	8d 04 33             	lea    eax,[ebx+esi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:228 (discriminator 3)
          for (int cnt=0;cnt<10;cnt++)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
 1009328:	83 ec 04             	sub    esp,0x4
 100932b:	8b 15 ec 96 12 00    	mov    edx,DWORD PTR ds:0x1296ec
 1009331:	ff 34 1a             	push   DWORD PTR [edx+ebx*1]
 1009334:	50                   	push   eax
 1009335:	68 7f 75 06 01       	push   0x106757f
 100933a:	e8 b0 09 00 00       	call   1009cef <printk>
 100933f:	83 c3 04             	add    ebx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:226 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
          for (int cnt=0;cnt<10;cnt++)
 1009342:	83 c4 10             	add    esp,0x10
 1009345:	83 fb 28             	cmp    ebx,0x28
 1009348:	75 db                	jne    1009325 <printDebugRegs+0x118>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:233
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
              esp+=4;
          }


}
 100934a:	5b                   	pop    ebx
 100934b:	5e                   	pop    esi
 100934c:	5f                   	pop    edi
 100934d:	c3                   	ret    

0100934e <reboot>:
reboot():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:241
/* keyboard interface IO port: data and control
   READ:   status port
   WRITE:  control register */
 
void reboot(bool waitFirst)
{
 100934e:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:244
    uint8_t temp;
 
    if (waitFirst)
 1009351:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
 1009356:	74 1d                	je     1009375 <reboot+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:246
    {
        puts("Rebooting ... ");
 1009358:	83 ec 0c             	sub    esp,0xc
 100935b:	68 ad 75 06 01       	push   0x10675ad
 1009360:	e8 a8 9d ff ff       	call   100310d <puts>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:247
        __asm__("sti\n");
 1009365:	fb                   	sti    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:248
        wait(3000);
 1009366:	c7 04 24 b8 0b 00 00 	mov    DWORD PTR [esp],0xbb8
 100936d:	e8 96 13 00 00       	call   100a708 <wait>
 1009372:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:250
    }
    __asm__ volatile ("cli"); /* disable all interrupts */
 1009375:	fa                   	cli    
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1009376:	e4 64                	in     al,0x64
 1009378:	89 c2                	mov    edx,eax
reboot():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:256
 
    /* Clear all keyboard buffers (output and command buffers) */
    do
    {
        temp = inb(KBRD_INTRFC); /* empty user data */
        if (check_flag(temp, KBRD_BIT_KDATA) != 0)
 100937a:	a8 01                	test   al,0x1
 100937c:	74 02                	je     1009380 <reboot+0x32>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 100937e:	e4 60                	in     al,0x60
reboot():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:258
            inb(KBRD_IO); /* empty keyboard data */
    } while (check_flag(temp, KBRD_BIT_UDATA) != 0);
 1009380:	f6 c2 02             	test   dl,0x2
 1009383:	75 f1                	jne    1009376 <reboot+0x28>
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1009385:	b8 fe ff ff ff       	mov    eax,0xfffffffe
 100938a:	e6 64                	out    0x64,al
reboot():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:262 (discriminator 1)
 
    outb(KBRD_INTRFC, KBRD_RESET); /* pulse CPU reset line */
loop:
    __asm__ volatile ("hlt"); /* if that didn't work, halt the CPU */
 100938c:	f4                   	hlt    
 100938d:	eb fd                	jmp    100938c <reboot+0x3e>

0100938f <dumpKernelAddresses>:
dumpKernelAddresses():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:267
    goto loop; /* if a NMI is received, halt again */
}

void dumpKernelAddresses()
{
 100938f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:268
printk("Kernel Variable List:\n");
 1009392:	68 bc 75 06 01       	push   0x10675bc
 1009397:	e8 53 09 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:269
printk("\tKERNEL_OBJECT_BASE_ADDRESS=0x%08x\n",KERNEL_OBJECT_BASE_ADDRESS);
 100939c:	83 c4 08             	add    esp,0x8
 100939f:	68 00 00 16 00       	push   0x160000
 10093a4:	68 18 24 04 01       	push   0x1042418
 10093a9:	e8 41 09 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:270
printk("\tE820_TABLE_ADDRESS=0x%08x (0x%08X)\n",E820_TABLE_ADDRESS);
 10093ae:	83 c4 08             	add    esp,0x8
 10093b1:	68 00 00 16 00       	push   0x160000
 10093b6:	68 3c 24 04 01       	push   0x104243c
 10093bb:	e8 2f 09 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:271
printk("\tMP_CONFIG_TABLE_ADDRESS=0x%08x\n",MP_CONFIG_TABLE_ADDRESS);
 10093c0:	83 c4 08             	add    esp,0x8
 10093c3:	68 b0 04 16 00       	push   0x1604b0
 10093c8:	68 64 24 04 01       	push   0x1042464
 10093cd:	e8 1d 09 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:272
printk("\tKEYBOARD_BUFFER_ADDRESS=0x%08x\n",KEYBOARD_BUFFER_ADDRESS);
 10093d2:	83 c4 08             	add    esp,0x8
 10093d5:	68 b0 24 16 00       	push   0x1624b0
 10093da:	68 88 24 04 01       	push   0x1042488
 10093df:	e8 0b 09 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:273
printk("\tIDT_TABLE_ADDRESS=0x%08x\n",IDT_TABLE_ADDRESS);
 10093e4:	83 c4 08             	add    esp,0x8
 10093e7:	68 00 30 16 00       	push   0x163000
 10093ec:	68 d3 75 06 01       	push   0x10675d3
 10093f1:	e8 f9 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:274
printk("\tINIT_GDT_TABLE_ADDRESS=0x%08x\n",INIT_GDT_TABLE_ADDRESS);
 10093f6:	83 c4 08             	add    esp,0x8
 10093f9:	68 00 48 16 00       	push   0x164800
 10093fe:	68 ac 24 04 01       	push   0x10424ac
 1009403:	e8 e7 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:275
printk("\tTASK_TABLE_ADDRESS=0x%08x\n",TASK_TABLE_ADDRESS);
 1009408:	83 c4 08             	add    esp,0x8
 100940b:	68 00 60 16 00       	push   0x166000
 1009410:	68 ee 75 06 01       	push   0x10675ee
 1009415:	e8 d5 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:276
printk("\tTSS_TABLE_ADDRESS=0x%08x\n",TSS_TABLE_ADDRESS);
 100941a:	83 c4 08             	add    esp,0x8
 100941d:	68 00 70 2f 00       	push   0x2f7000
 1009422:	68 0a 76 06 01       	push   0x106760a
 1009427:	e8 c3 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:277
printk("\tATA_MBR_ARRAY_ADDRESS=0x%08x\n",ATA_MBR_ARRAY_ADDRESS);
 100942c:	83 c4 08             	add    esp,0x8
 100942f:	68 00 70 49 00       	push   0x497000
 1009434:	68 cc 24 04 01       	push   0x10424cc
 1009439:	e8 b1 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:278
printk("\tPCI_DEVICE_LIST_ADDRESS=0x%08x\n",PCI_DEVICE_LIST_ADDRESS);
 100943e:	83 c4 08             	add    esp,0x8
 1009441:	68 00 80 49 00       	push   0x498000
 1009446:	68 ec 24 04 01       	push   0x10424ec
 100944b:	e8 9f 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:279
printk("\tPCI_BRIDGE_LIST_ADDRESS=0x%08x\n",PCI_BRIDGE_LIST_ADDRESS);
 1009450:	83 c4 08             	add    esp,0x8
 1009453:	68 00 80 4a 00       	push   0x4a8000
 1009458:	68 10 25 04 01       	push   0x1042510
 100945d:	e8 8d 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:280
printk("\tPCI_FUNCTION_LIST_ADDRESS=0x%08x\n",PCI_FUNCTION_LIST_ADDRESS);
 1009462:	83 c4 08             	add    esp,0x8
 1009465:	68 00 80 4b 00       	push   0x4b8000
 100946a:	68 34 25 04 01       	push   0x1042534
 100946f:	e8 7b 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:281
printk("\tGDT_PMODE_16BIT_TABLE_ADDRESS=0x%08x\n",GDT_PMODE_16BIT_TABLE_ADDRESS);
 1009474:	83 c4 08             	add    esp,0x8
 1009477:	68 00 90 4b 00       	push   0x4b9000
 100947c:	68 58 25 04 01       	push   0x1042558
 1009481:	e8 69 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:282
printk("\tKERNEL_PAGE_DIR_ADDRESS=0x%08x\n",KERNEL_PAGE_DIR_ADDRESS);
 1009486:	83 c4 08             	add    esp,0x8
 1009489:	68 00 a0 4b 00       	push   0x4ba000
 100948e:	68 80 25 04 01       	push   0x1042580
 1009493:	e8 57 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:283
printk("\tKERNEL_PAGE_TABLE_BASE_ADDRESS=0x%08x\n",KERNEL_PAGE_TABLE_BASE_ADDRESS);
 1009498:	83 c4 08             	add    esp,0x8
 100949b:	68 00 c0 4c 00       	push   0x4cc000
 10094a0:	68 a4 25 04 01       	push   0x10425a4
 10094a5:	e8 45 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:284
printk("\tSAVED_STACK_FOR_EXCEPTIONS_ADDRESS=0x%08x\n",SAVED_STACK_FOR_EXCEPTIONS_ADDRESS);
 10094aa:	83 c4 08             	add    esp,0x8
 10094ad:	68 00 d0 ac 00       	push   0xacd000
 10094b2:	68 cc 25 04 01       	push   0x10425cc
 10094b7:	e8 33 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:285
printk("\tSAVED_STACK_FOR_DEBUGGING_ADDRESS=0x%08x\n",SAVED_STACK_FOR_DEBUGGING_ADDRESS);
 10094bc:	83 c4 08             	add    esp,0x8
 10094bf:	68 00 f0 ac 00       	push   0xacf000
 10094c4:	68 f8 25 04 01       	push   0x10425f8
 10094c9:	e8 21 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:286
printk("\tCPU_APIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_APIC_REGISTER_REMAP_BASE_ADDRESS);
 10094ce:	83 c4 08             	add    esp,0x8
 10094d1:	68 00 10 ad 00       	push   0xad1000
 10094d6:	68 24 26 04 01       	push   0x1042624
 10094db:	e8 0f 08 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:287
printk("\tCPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS);
 10094e0:	83 c4 08             	add    esp,0x8
 10094e3:	68 00 20 ad 00       	push   0xad2000
 10094e8:	68 54 26 04 01       	push   0x1042654
 10094ed:	e8 fd 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:288
printk("\tKERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS=0x%08x\n",KERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS);
 10094f2:	83 c4 08             	add    esp,0x8
 10094f5:	68 04 20 ad 00       	push   0xad2004
 10094fa:	68 84 26 04 01       	push   0x1042684
 10094ff:	e8 eb 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:289
printk("\tAHCI_ABAR_REMAPPED_ADDRESS=0x%08x\n",AHCI_ABAR_REMAPPED_ADDRESS);
 1009504:	83 c4 08             	add    esp,0x8
 1009507:	68 00 30 ad 00       	push   0xad3000
 100950c:	68 b8 26 04 01       	push   0x10426b8
 1009511:	e8 d9 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:290
printk("\tAHCI_PORT_BASE_REMAP_ADDRESS=0x%08x\n",AHCI_PORT_BASE_REMAP_ADDRESS);
 1009516:	83 c4 08             	add    esp,0x8
 1009519:	68 00 30 b1 00       	push   0xb13000
 100951e:	68 dc 26 04 01       	push   0x10426dc
 1009523:	e8 c7 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:291
printk("\tAHCI_DISK_BUFFER_ADDRESS=0x%08x\n",AHCI_DISK_BUFFER_ADDRESS);
 1009528:	83 c4 08             	add    esp,0x8
 100952b:	68 00 30 c5 00       	push   0xc53000
 1009530:	68 04 27 04 01       	push   0x1042704
 1009535:	e8 b5 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:292
printk("\tATA_DEVICE_INFO_ADDRESS=0x%08x\n",ATA_DEVICE_INFO_ADDRESS);
 100953a:	83 c4 08             	add    esp,0x8
 100953d:	68 00 30 d9 00       	push   0xd93000
 1009542:	68 28 27 04 01       	push   0x1042728
 1009547:	e8 a3 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:293
printk("\tAHCI_CAPS_ADDRESS=0x%08x\n",AHCI_CAPS_ADDRESS);
 100954c:	83 c4 08             	add    esp,0x8
 100954f:	68 20 7e d9 00       	push   0xd97e20
 1009554:	68 25 76 06 01       	push   0x1067625
 1009559:	e8 91 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:294
printk("\tTSS_AVAILABLE_ADDRESS=0x%08x\n",TASK_AVAILABLE_ADDRESS);
 100955e:	83 c4 08             	add    esp,0x8
 1009561:	68 40 cc d9 00       	push   0xd9cc40
 1009566:	68 4c 27 04 01       	push   0x104274c
 100956b:	e8 7f 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:295
printk("\tGDT_AVAILABLE_ADDRESS=0x%08x\n",GDT_AVAILABLE_ADDRESS);
 1009570:	83 c4 08             	add    esp,0x8
 1009573:	68 40 d4 d9 00       	push   0xd9d440
 1009578:	68 6c 27 04 01       	push   0x104276c
 100957d:	e8 6d 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:296
printk("\tEXEC_FILE_LOAD_INFO=0x%08x\n",EXEC_FILE_LOAD_INFO);
 1009582:	83 c4 08             	add    esp,0x8
 1009585:	68 40 dc d9 00       	push   0xd9dc40
 100958a:	68 40 76 06 01       	push   0x1067640
 100958f:	e8 5b 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:297
printk("\tAHCI_ABAR_ADDRESS=0x%08x\n",AHCI_ABAR_ADDRESS);
 1009594:	83 c4 08             	add    esp,0x8
 1009597:	68 e0 62 db 00       	push   0xdb62e0
 100959c:	68 5d 76 06 01       	push   0x106765d
 10095a1:	e8 49 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:298
printk("\tEND_OF_KERNEL_OBJECTS_ADDRESS=0x%08x\n",END_OF_KERNEL_OBJECTS_ADDRESS);
 10095a6:	83 c4 08             	add    esp,0x8
 10095a9:	68 e0 62 eb 00       	push   0xeb62e0
 10095ae:	68 8c 27 04 01       	push   0x104278c
 10095b3:	e8 37 07 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:299
}
 10095b8:	83 c4 1c             	add    esp,0x1c
 10095bb:	c3                   	ret    

010095bc <pauseDisplay>:
pauseDisplay():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:302

bool pauseDisplay(bool offerToQuit)
{
 10095bc:	56                   	push   esi
 10095bd:	53                   	push   ebx
 10095be:	83 ec 04             	sub    esp,0x4
 10095c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:303
    if (offerToQuit)
 10095c5:	84 db                	test   bl,bl
 10095c7:	74 12                	je     10095db <pauseDisplay+0x1f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:304
        printk("Press q to quit, any other key to continue ...");
 10095c9:	83 ec 0c             	sub    esp,0xc
 10095cc:	68 b4 27 04 01       	push   0x10427b4
 10095d1:	e8 19 07 00 00       	call   1009cef <printk>
 10095d6:	83 c4 10             	add    esp,0x10
 10095d9:	eb 10                	jmp    10095eb <pauseDisplay+0x2f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:306
    else
        printk("Press a key to continue ... ");
 10095db:	83 ec 0c             	sub    esp,0xc
 10095de:	68 78 76 06 01       	push   0x1067678
 10095e3:	e8 07 07 00 00       	call   1009cef <printk>
 10095e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:307
    char lPressedKey=waitForKeyboardKey();
 10095eb:	e8 9b 9b ff ff       	call   100318b <waitForKeyboardKey>
 10095f0:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:308
    cursorMoveToX(0);
 10095f2:	83 ec 0c             	sub    esp,0xc
 10095f5:	6a 00                	push   0x0
 10095f7:	e8 62 9a ff ff       	call   100305e <cursorMoveToX>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:309
    printk("                                           ");
 10095fc:	c7 04 24 e4 27 04 01 	mov    DWORD PTR [esp],0x10427e4
 1009603:	e8 e7 06 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:310
    cursorMoveToX(0);
 1009608:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
 100960f:	e8 4a 9a ff ff       	call   100305e <cursorMoveToX>
 1009614:	89 f0                	mov    eax,esi
 1009616:	3c 71                	cmp    al,0x71
 1009618:	0f 94 c0             	sete   al
 100961b:	21 d8                	and    eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:314
    if (lPressedKey=='q' && offerToQuit)
        return true;
    return false;
}
 100961d:	83 c4 14             	add    esp,0x14
 1009620:	5b                   	pop    ebx
 1009621:	5e                   	pop    esi
 1009622:	c3                   	ret    

01009623 <mallocTemp>:
mallocTemp():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:319

int memPtr=0xe00000;
uintptr_t* mallocTemp(int size)
{
    uintptr_t lRetVal = memPtr;
 1009623:	a1 e0 d9 00 01       	mov    eax,ds:0x100d9e0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:320
    memPtr+=size;
 1009628:	89 c2                	mov    edx,eax
 100962a:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
 100962e:	89 15 e0 d9 00 01    	mov    DWORD PTR ds:0x100d9e0,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:322
    return (uintptr_t*)lRetVal;
}
 1009634:	c3                   	ret    

01009635 <dumpGDTTable>:
dumpGDTTable():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:325

void dumpGDTTable()
{
 1009635:	56                   	push   esi
 1009636:	53                   	push   ebx
 1009637:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:326
    sGDT* theGDT=bootGdt;
 100963a:	8b 1d 84 99 12 00    	mov    ebx,DWORD PTR ds:0x129984
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:328
    
    printk("Listing GDT Table\n");
 1009640:	68 95 76 06 01       	push   0x1067695
 1009645:	e8 a5 06 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:329
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
 100964a:	c7 04 24 10 28 04 01 	mov    DWORD PTR [esp],0x1042810
 1009651:	e8 99 06 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:330
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
 1009656:	0f b7 05 88 99 12 00 	movzx  eax,WORD PTR ds:0x129988
 100965d:	66 c1 e8 03          	shr    ax,0x3
 1009661:	83 c4 10             	add    esp,0x10
 1009664:	66 85 c0             	test   ax,ax
 1009667:	74 73                	je     10096dc <dumpGDTTable+0xa7>
 1009669:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:332
    {
        if ((theGDT->access & 0x80)!=0 || cnt==0)
 100966e:	0f b6 53 05          	movzx  edx,BYTE PTR [ebx+0x5]
 1009672:	85 f6                	test   esi,esi
 1009674:	74 04                	je     100967a <dumpGDTTable+0x45>
 1009676:	84 d2                	test   dl,dl
 1009678:	79 4a                	jns    10096c4 <dumpGDTTable+0x8f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:343
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
 100967a:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if ((theGDT->access & 0x80)!=0 || cnt==0)
        {
            printk("0x%02X\t\t"     /*GDT#*/
 100967e:	83 ec 08             	sub    esp,0x8
 1009681:	89 c1                	mov    ecx,eax
 1009683:	81 e1 f0 00 00 00    	and    ecx,0xf0
 1009689:	c1 e9 04             	shr    ecx,0x4
 100968c:	51                   	push   ecx
 100968d:	0f b6 d2             	movzx  edx,dl
 1009690:	52                   	push   edx
 1009691:	83 e0 0f             	and    eax,0xf
 1009694:	c1 e0 10             	shl    eax,0x10
 1009697:	0f b7 13             	movzx  edx,WORD PTR [ebx]
 100969a:	09 d0                	or     eax,edx
 100969c:	50                   	push   eax
 100969d:	0f be 43 07          	movsx  eax,BYTE PTR [ebx+0x7]
 10096a1:	c1 e0 18             	shl    eax,0x18
 10096a4:	89 c2                	mov    edx,eax
 10096a6:	0f be 43 04          	movsx  eax,BYTE PTR [ebx+0x4]
 10096aa:	c1 e0 10             	shl    eax,0x10
 10096ad:	09 d0                	or     eax,edx
 10096af:	0f b7 53 02          	movzx  edx,WORD PTR [ebx+0x2]
 10096b3:	09 d0                	or     eax,edx
 10096b5:	50                   	push   eax
 10096b6:	56                   	push   esi
 10096b7:	68 34 28 04 01       	push   0x1042834
 10096bc:	e8 2e 06 00 00       	call   1009cef <printk>
 10096c1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:345 (discriminator 2)
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
 10096c4:	83 c3 08             	add    ebx,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:330 (discriminator 2)
{
    sGDT* theGDT=bootGdt;
    
    printk("Listing GDT Table\n");
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
 10096c7:	83 c6 01             	add    esi,0x1
 10096ca:	0f b7 05 88 99 12 00 	movzx  eax,WORD PTR ds:0x129988
 10096d1:	66 c1 e8 03          	shr    ax,0x3
 10096d5:	0f b7 c0             	movzx  eax,ax
 10096d8:	39 f0                	cmp    eax,esi
 10096da:	7f 92                	jg     100966e <dumpGDTTable+0x39>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:347
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
    }
}
 10096dc:	83 c4 04             	add    esp,0x4
 10096df:	5b                   	pop    ebx
 10096e0:	5e                   	pop    esi
 10096e1:	c3                   	ret    

010096e2 <displayTSS>:
displayTSS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:350

void displayTSS(int tssAddress)
{
 10096e2:	53                   	push   ebx
 10096e3:	83 ec 10             	sub    esp,0x10
 10096e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:352
    tss_t* tss=(tss_t*)tssAddress;
    printk("TSS Entry at 0x%08X:\n",tssAddress);
 10096ea:	53                   	push   ebx
 10096eb:	68 a8 76 06 01       	push   0x10676a8
 10096f0:	e8 fa 05 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:353
    printk("\tEAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", tss->EAX, tss->EBX, tss->ECX, tss->EDX,tss->EFLAGS);
 10096f5:	83 c4 08             	add    esp,0x8
 10096f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
 10096fb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
 10096fe:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
 1009701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
 1009704:	ff 73 28             	push   DWORD PTR [ebx+0x28]
 1009707:	68 5c 28 04 01       	push   0x104285c
 100970c:	e8 de 05 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:354
    printk("\tEBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\tCR3=%08X\n", tss->EBP, tss->ESI, tss->EDI, tss->ESP,tss->CR3);
 1009711:	83 c4 18             	add    esp,0x18
 1009714:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
 1009717:	ff 73 38             	push   DWORD PTR [ebx+0x38]
 100971a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
 100971d:	ff 73 40             	push   DWORD PTR [ebx+0x40]
 1009720:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
 1009723:	68 8c 28 04 01       	push   0x104288c
 1009728:	e8 c2 05 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:355
    printk("\t DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\tLDT=%08X\n", tss->DS, tss->ES, tss->FS, tss->GS,tss->LDTR);
 100972d:	83 c4 18             	add    esp,0x18
 1009730:	ff 73 60             	push   DWORD PTR [ebx+0x60]
 1009733:	ff 73 5c             	push   DWORD PTR [ebx+0x5c]
 1009736:	ff 73 58             	push   DWORD PTR [ebx+0x58]
 1009739:	ff 73 48             	push   DWORD PTR [ebx+0x48]
 100973c:	ff 73 54             	push   DWORD PTR [ebx+0x54]
 100973f:	68 bc 28 04 01       	push   0x10428bc
 1009744:	e8 a6 05 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:356
    printk("\t SS=%08X\tSS0=%08X\tESP0=%08X\tLINK=%08X\tIOP=%08X\n",tss->SS,tss->SS0,tss->ESP0,tss->LINK,tss->IOPB);
 1009749:	83 c4 18             	add    esp,0x18
 100974c:	0f b7 43 66          	movzx  eax,WORD PTR [ebx+0x66]
 1009750:	50                   	push   eax
 1009751:	ff 33                	push   DWORD PTR [ebx]
 1009753:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 1009756:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 1009759:	ff 73 50             	push   DWORD PTR [ebx+0x50]
 100975c:	68 ec 28 04 01       	push   0x10428ec
 1009761:	e8 89 05 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:357
    printk("\tCS:EIP = %04X:%08X\n", tss->CS, tss->EIP);
 1009766:	83 c4 1c             	add    esp,0x1c
 1009769:	ff 73 20             	push   DWORD PTR [ebx+0x20]
 100976c:	ff 73 4c             	push   DWORD PTR [ebx+0x4c]
 100976f:	68 be 76 06 01       	push   0x10676be
 1009774:	e8 76 05 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:358
}
 1009779:	83 c4 18             	add    esp,0x18
 100977c:	5b                   	pop    ebx
 100977d:	c3                   	ret    
 100977e:	66 90                	xchg   ax,ax

01009780 <memcpy>:
memcpy():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:12
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
void * memcpy(void *dest, const void *src, size_t n)
{
 1009780:	57                   	push   edi
 1009781:	56                   	push   esi
 1009782:	53                   	push   ebx
 1009783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1009787:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 100978b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:17
    bool dw,dd;
    
    dd=n%4==0;
    dw=n%2==0;
    if (dd)
 100978f:	89 d1                	mov    ecx,edx
 1009791:	83 e1 03             	and    ecx,0x3
 1009794:	75 4d                	jne    10097e3 <memcpy+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:19
    {
        n /=4;
 1009796:	c1 ea 02             	shr    edx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:23
        const uint32_t *f = src;
        uint32_t *t = dest;

        if (f < t) {
 1009799:	39 c3                	cmp    ebx,eax
 100979b:	72 0e                	jb     10097ab <memcpy+0x2b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
 100979d:	b9 00 00 00 00       	mov    ecx,0x0
 10097a2:	85 d2                	test   edx,edx
 10097a4:	75 2e                	jne    10097d4 <memcpy+0x54>
 10097a6:	e9 b6 00 00 00       	jmp    1009861 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:24
        n /=4;
        const uint32_t *f = src;
        uint32_t *t = dest;

        if (f < t) {
                f += n;
 10097ab:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
 10097b2:	01 fb                	add    ebx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:25
                t += n;
 10097b4:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
 10097b6:	85 d2                	test   edx,edx
 10097b8:	0f 84 a3 00 00 00    	je     1009861 <memcpy+0xe1>
 10097be:	f7 da                	neg    edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:27
                        *--t = *--f;
 10097c0:	8b 74 8b fc          	mov    esi,DWORD PTR [ebx+ecx*4-0x4]
 10097c4:	89 74 8f fc          	mov    DWORD PTR [edi+ecx*4-0x4],esi
 10097c8:	83 e9 01             	sub    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
 10097cb:	39 d1                	cmp    ecx,edx
 10097cd:	75 f1                	jne    10097c0 <memcpy+0x40>
 10097cf:	e9 8d 00 00 00       	jmp    1009861 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
 10097d4:	8b 34 8b             	mov    esi,DWORD PTR [ebx+ecx*4]
 10097d7:	89 34 88             	mov    DWORD PTR [eax+ecx*4],esi
 10097da:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
 10097dd:	39 ca                	cmp    edx,ecx
 10097df:	75 f3                	jne    10097d4 <memcpy+0x54>
 10097e1:	eb 7e                	jmp    1009861 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:33
                        *t++ = *f++;
        return dest;
    }
    else if (dw)
 10097e3:	89 d1                	mov    ecx,edx
 10097e5:	83 e1 01             	and    ecx,0x1
 10097e8:	75 42                	jne    100982c <memcpy+0xac>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:35
    {
        n /=2;
 10097ea:	d1 ea                	shr    edx,1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:39
        const uint32_t *f = src;
        uint32_t *t = dest;

        if (f < t) {
 10097ec:	39 c3                	cmp    ebx,eax
 10097ee:	72 0b                	jb     10097fb <memcpy+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
 10097f0:	b9 00 00 00 00       	mov    ecx,0x0
 10097f5:	85 d2                	test   edx,edx
 10097f7:	75 24                	jne    100981d <memcpy+0x9d>
 10097f9:	eb 66                	jmp    1009861 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:40
        n /=2;
        const uint32_t *f = src;
        uint32_t *t = dest;

        if (f < t) {
                f += n;
 10097fb:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
 1009802:	01 fb                	add    ebx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:41
                t += n;
 1009804:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
 1009806:	85 d2                	test   edx,edx
 1009808:	74 57                	je     1009861 <memcpy+0xe1>
 100980a:	f7 da                	neg    edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:43
                        *--t = *--f;
 100980c:	8b 74 8b fc          	mov    esi,DWORD PTR [ebx+ecx*4-0x4]
 1009810:	89 74 8f fc          	mov    DWORD PTR [edi+ecx*4-0x4],esi
 1009814:	83 e9 01             	sub    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
 1009817:	39 ca                	cmp    edx,ecx
 1009819:	75 f1                	jne    100980c <memcpy+0x8c>
 100981b:	eb 44                	jmp    1009861 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
 100981d:	8b 34 8b             	mov    esi,DWORD PTR [ebx+ecx*4]
 1009820:	89 34 88             	mov    DWORD PTR [eax+ecx*4],esi
 1009823:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
 1009826:	39 ca                	cmp    edx,ecx
 1009828:	75 f3                	jne    100981d <memcpy+0x9d>
 100982a:	eb 35                	jmp    1009861 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:54
    else
    {
        const char *f = src;
        char *t = dest;

        if (f < t) {
 100982c:	39 c3                	cmp    ebx,eax
 100982e:	72 0b                	jb     100983b <memcpy+0xbb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
 1009830:	be 00 00 00 00       	mov    esi,0x0
 1009835:	85 d2                	test   edx,edx
 1009837:	75 1a                	jne    1009853 <memcpy+0xd3>
 1009839:	eb 26                	jmp    1009861 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
 100983b:	8d 4a ff             	lea    ecx,[edx-0x1]
 100983e:	85 d2                	test   edx,edx
 1009840:	74 1f                	je     1009861 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:58
                        *--t = *--f;
 1009842:	0f b6 14 0b          	movzx  edx,BYTE PTR [ebx+ecx*1]
 1009846:	88 14 08             	mov    BYTE PTR [eax+ecx*1],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
 1009849:	83 e9 01             	sub    ecx,0x1
 100984c:	83 f9 ff             	cmp    ecx,0xffffffff
 100984f:	75 f1                	jne    1009842 <memcpy+0xc2>
 1009851:	eb 0e                	jmp    1009861 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
 1009853:	0f b6 0c 33          	movzx  ecx,BYTE PTR [ebx+esi*1]
 1009857:	88 0c 30             	mov    BYTE PTR [eax+esi*1],cl
 100985a:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
 100985d:	39 f2                	cmp    edx,esi
 100985f:	75 f2                	jne    1009853 <memcpy+0xd3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:64
                        *t++ = *f++;
        return dest;
    }
 1009861:	5b                   	pop    ebx
 1009862:	5e                   	pop    esi
 1009863:	5f                   	pop    edi
 1009864:	c3                   	ret    
 1009865:	66 90                	xchg   ax,ax
 1009867:	90                   	nop

01009868 <panic>:
panic():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:8
#include <stdarg.h>
#include <time.h>
#include "printf.h"

void __attribute__((noinline))panic(const char *format, ...)
{
 1009868:	53                   	push   ebx
 1009869:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:10
    va_list args;
    va_start( args, format );
 100986c:	8d 5c 24 14          	lea    ebx,[esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:11
    printk("\n>>>panic at instruction prior to address 0x%08X<<<\n", __builtin_return_address(0));
 1009870:	83 ec 08             	sub    esp,0x8
 1009873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1009877:	68 20 29 04 01       	push   0x1042920
 100987c:	e8 6e 04 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:12
    printk("  >>>");
 1009881:	c7 04 24 d3 76 06 01 	mov    DWORD PTR [esp],0x10676d3
 1009888:	e8 62 04 00 00       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:13
    printk_valist( format,args);
 100988d:	83 c4 08             	add    esp,0x8
 1009890:	53                   	push   ebx
 1009891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1009895:	e8 3c 04 00 00       	call   1009cd6 <printk_valist>
 100989a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:15 (discriminator 1)
    panicLoop: 
    __asm__("cli\nhlt\n");
 100989d:	fa                   	cli    
 100989e:	f4                   	hlt    
 100989f:	eb fc                	jmp    100989d <panic+0x35>
 10098a1:	66 90                	xchg   ax,ax
 10098a3:	90                   	nop

010098a4 <printchar>:
printchar():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:43
uint8_t printDLineCount;

static void printchar(char **str, int c)
{
	
	if (str) {
 10098a4:	85 c0                	test   eax,eax
 10098a6:	74 08                	je     10098b0 <printchar+0xc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:44
		**str = c;
 10098a8:	8b 08                	mov    ecx,DWORD PTR [eax]
 10098aa:	88 11                	mov    BYTE PTR [ecx],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:45
		++(*str);
 10098ac:	83 00 01             	add    DWORD PTR [eax],0x1
 10098af:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:41
//extern bool pauseDisplay(bool offerToQuit);
extern uint32_t kDebugLevel;
uint8_t printDLineCount;

static void printchar(char **str, int c)
{
 10098b0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:47
	
	if (str) {
		**str = c;
		++(*str);
	}
	else terminal_putchar((unsigned char)c);
 10098b3:	0f b6 d2             	movzx  edx,dl
 10098b6:	52                   	push   edx
 10098b7:	e8 2d 96 ff ff       	call   1002ee9 <terminal_putchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:48
}
 10098bc:	83 c4 1c             	add    esp,0x1c
 10098bf:	c3                   	ret    

010098c0 <prints>:
prints():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:54

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 10098c0:	55                   	push   ebp
 10098c1:	57                   	push   edi
 10098c2:	56                   	push   esi
 10098c3:	53                   	push   ebx
 10098c4:	83 ec 1c             	sub    esp,0x1c
 10098c7:	89 c7                	mov    edi,eax
 10098c9:	89 d6                	mov    esi,edx
 10098cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
 10098cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:57
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 10098d3:	85 c9                	test   ecx,ecx
 10098d5:	0f 8e cb 00 00 00    	jle    10099a6 <prints+0xe6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:60 (discriminator 1)
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 10098db:	80 3e 00             	cmp    BYTE PTR [esi],0x0
 10098de:	74 1b                	je     10098fb <prints+0x3b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:60
 10098e0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:60 (discriminator 3)
 10098e5:	83 c0 01             	add    eax,0x1
 10098e8:	80 3c 06 00          	cmp    BYTE PTR [esi+eax*1],0x0
 10098ec:	75 f7                	jne    10098e5 <prints+0x25>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:61
		if (len >= width) width = 0;
 10098ee:	bb 00 00 00 00       	mov    ebx,0x0
 10098f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
 10098f7:	7e 0f                	jle    1009908 <prints+0x48>
 10098f9:	eb 05                	jmp    1009900 <prints+0x40>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:60
	register int pc = 0, padchar = ' ';

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 10098fb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:62
		if (len >= width) width = 0;
		else width -= len;
 1009900:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
 1009904:	29 c1                	sub    ecx,eax
 1009906:	89 cb                	mov    ebx,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:63
		if (pad & PAD_ZERO) padchar = '0';
 1009908:	89 d0                	mov    eax,edx
 100990a:	83 e0 02             	and    eax,0x2
 100990d:	83 f8 01             	cmp    eax,0x1
 1009910:	19 ed                	sbb    ebp,ebp
 1009912:	83 e5 f0             	and    ebp,0xfffffff0
 1009915:	83 c5 30             	add    ebp,0x30
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:65
	}
	if (!(pad & PAD_RIGHT)) {
 1009918:	f6 c2 01             	test   dl,0x1
 100991b:	75 1a                	jne    1009937 <prints+0x77>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:66 (discriminator 1)
		for ( ; width > 0; --width) {
 100991d:	85 db                	test   ebx,ebx
 100991f:	7e 67                	jle    1009988 <prints+0xc8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:66
 1009921:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:67 (discriminator 2)
			printchar (out, padchar);
 1009925:	89 ea                	mov    edx,ebp
 1009927:	89 f8                	mov    eax,edi
 1009929:	e8 76 ff ff ff       	call   10098a4 <printchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:66 (discriminator 2)
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 100992e:	83 6c 24 0c 01       	sub    DWORD PTR [esp+0xc],0x1
 1009933:	75 f0                	jne    1009925 <prints+0x65>
 1009935:	eb 66                	jmp    100999d <prints+0xdd>
 1009937:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:71 (discriminator 1)
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 100993b:	0f b6 16             	movzx  edx,BYTE PTR [esi]
 100993e:	84 d2                	test   dl,dl
 1009940:	74 1e                	je     1009960 <prints+0xa0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:55
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 1009942:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:71 (discriminator 2)
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 1009947:	29 de                	sub    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:72 (discriminator 2)
		printchar (out, *string);
 1009949:	0f be d2             	movsx  edx,dl
 100994c:	89 f8                	mov    eax,edi
 100994e:	e8 51 ff ff ff       	call   10098a4 <printchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:73 (discriminator 2)
		++pc;
 1009953:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:71 (discriminator 2)
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 1009956:	0f b6 14 1e          	movzx  edx,BYTE PTR [esi+ebx*1]
 100995a:	84 d2                	test   dl,dl
 100995c:	75 eb                	jne    1009949 <prints+0x89>
 100995e:	eb 05                	jmp    1009965 <prints+0xa5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:55
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 1009960:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:75 (discriminator 1)
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 1009965:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1009969:	85 c0                	test   eax,eax
 100996b:	7e 45                	jle    10099b2 <prints+0xf2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:75
 100996d:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:76 (discriminator 2)
		printchar (out, padchar);
 100996f:	89 ea                	mov    edx,ebp
 1009971:	89 f8                	mov    eax,edi
 1009973:	e8 2c ff ff ff       	call   10098a4 <printchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:75 (discriminator 2)
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 1009978:	83 ee 01             	sub    esi,0x1
 100997b:	75 f2                	jne    100996f <prints+0xaf>
 100997d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1009981:	8d 04 03             	lea    eax,[ebx+eax*1]
 1009984:	89 c3                	mov    ebx,eax
 1009986:	eb 2a                	jmp    10099b2 <prints+0xf2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:66
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 1009988:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
 100998c:	bb 00 00 00 00       	mov    ebx,0x0
 1009991:	eb 0a                	jmp    100999d <prints+0xdd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:55
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 1009993:	bd 20 00 00 00       	mov    ebp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:65
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
 1009998:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:71
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 100999d:	0f b6 16             	movzx  edx,BYTE PTR [esi]
 10099a0:	84 d2                	test   dl,dl
 10099a2:	75 a3                	jne    1009947 <prints+0x87>
 10099a4:	eb 0c                	jmp    10099b2 <prints+0xf2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:65
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
 10099a6:	f6 c2 01             	test   dl,0x1
 10099a9:	74 e8                	je     1009993 <prints+0xd3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:55
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 10099ab:	bd 20 00 00 00       	mov    ebp,0x20
 10099b0:	eb 89                	jmp    100993b <prints+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:81
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 10099b2:	89 d8                	mov    eax,ebx
 10099b4:	83 c4 1c             	add    esp,0x1c
 10099b7:	5b                   	pop    ebx
 10099b8:	5e                   	pop    esi
 10099b9:	5f                   	pop    edi
 10099ba:	5d                   	pop    ebp
 10099bb:	c3                   	ret    

010099bc <printi>:
printi():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:87

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 10099bc:	55                   	push   ebp
 10099bd:	57                   	push   edi
 10099be:	56                   	push   esi
 10099bf:	53                   	push   ebx
 10099c0:	83 ec 2c             	sub    esp,0x2c
 10099c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:93
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
 10099c7:	85 d2                	test   edx,edx
 10099c9:	75 2a                	jne    10099f5 <printi+0x39>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:94
		print_buf[0] = '0';
 10099cb:	c6 44 24 14 30       	mov    BYTE PTR [esp+0x14],0x30
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:95
		print_buf[1] = '\0';
 10099d0:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:96
		return prints (out, print_buf, width, pad);
 10099d5:	83 ec 0c             	sub    esp,0xc
 10099d8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
 10099dc:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
 10099e0:	8d 54 24 24          	lea    edx,[esp+0x24]
 10099e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 10099e8:	e8 d3 fe ff ff       	call   10098c0 <prints>
 10099ed:	83 c4 10             	add    esp,0x10
 10099f0:	e9 f1 00 00 00       	jmp    1009ae6 <printi+0x12a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:99
	}

	if (sg && b == 10 && i < 0) {
 10099f5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
 10099fa:	0f 95 c3             	setne  bl
 10099fd:	83 f9 0a             	cmp    ecx,0xa
 1009a00:	0f 94 c0             	sete   al
 1009a03:	84 c3                	test   bl,al
 1009a05:	0f 84 c1 00 00 00    	je     1009acc <printi+0x110>
 1009a0b:	89 d0                	mov    eax,edx
 1009a0d:	c1 e8 1f             	shr    eax,0x1f
 1009a10:	84 c0                	test   al,al
 1009a12:	0f 84 b4 00 00 00    	je     1009acc <printi+0x110>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:105
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 1009a18:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:104
	if (sg && b == 10 && i < 0) {
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
 1009a1d:	8d 74 24 1f          	lea    esi,[esp+0x1f]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:107
	*s = '\0';

	while (u) {
 1009a21:	89 d3                	mov    ebx,edx
 1009a23:	f7 db                	neg    ebx
 1009a25:	74 54                	je     1009a7b <printi+0xbf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:100
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 1009a27:	c7 44 24 0c 01 00 00 	mov    DWORD PTR [esp+0xc],0x1
 1009a2e:	00 
 1009a2f:	eb 08                	jmp    1009a39 <printi+0x7d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:90

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 1009a31:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 1009a38:	00 
 1009a39:	8d 74 24 1f          	lea    esi,[esp+0x1f]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:108

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
		t = u % b;
 1009a3d:	89 cf                	mov    edi,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:110
		if( t >= 10 )
			t += letbase - '0' - 10;
 1009a3f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
 1009a43:	8d 68 c6             	lea    ebp,[eax-0x3a]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:108

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
		t = u % b;
 1009a46:	89 d8                	mov    eax,ebx
 1009a48:	ba 00 00 00 00       	mov    edx,0x0
 1009a4d:	f7 f1                	div    ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:110
		if( t >= 10 )
			t += letbase - '0' - 10;
 1009a4f:	8d 04 2a             	lea    eax,[edx+ebp*1]
 1009a52:	83 fa 0a             	cmp    edx,0xa
 1009a55:	0f 4c c2             	cmovl  eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:111
		*--s = t + '0';
 1009a58:	83 ee 01             	sub    esi,0x1
 1009a5b:	83 c0 30             	add    eax,0x30
 1009a5e:	88 06                	mov    BYTE PTR [esi],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:112
		u /= b;
 1009a60:	89 d8                	mov    eax,ebx
 1009a62:	ba 00 00 00 00       	mov    edx,0x0
 1009a67:	f7 f7                	div    edi
 1009a69:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:107
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 1009a6b:	85 c0                	test   eax,eax
 1009a6d:	75 d7                	jne    1009a46 <printi+0x8a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:90

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 1009a6f:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:115
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
 1009a74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
 1009a79:	74 34                	je     1009aaf <printi+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:116
		if( width && (pad & PAD_ZERO) ) {
 1009a7b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
 1009a80:	74 21                	je     1009aa3 <printi+0xe7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:116 (discriminator 1)
 1009a82:	f6 44 24 48 02       	test   BYTE PTR [esp+0x48],0x2
 1009a87:	74 1a                	je     1009aa3 <printi+0xe7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:117
			printchar (out, '-');
 1009a89:	ba 2d 00 00 00       	mov    edx,0x2d
 1009a8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1009a92:	e8 0d fe ff ff       	call   10098a4 <printchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:119
			++pc;
			--width;
 1009a97:	83 6c 24 44 01       	sub    DWORD PTR [esp+0x44],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:118
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 1009a9c:	bb 01 00 00 00       	mov    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:119
			--width;
 1009aa1:	eb 0c                	jmp    1009aaf <printi+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:122
		}
		else {
			*--s = '-';
 1009aa3:	c6 46 ff 2d          	mov    BYTE PTR [esi-0x1],0x2d
 1009aa7:	8d 76 ff             	lea    esi,[esi-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:90

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 1009aaa:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:126
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 1009aaf:	83 ec 0c             	sub    esp,0xc
 1009ab2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
 1009ab6:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
 1009aba:	89 f2                	mov    edx,esi
 1009abc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 1009ac0:	e8 fb fd ff ff       	call   10098c0 <prints>
 1009ac5:	01 d8                	add    eax,ebx
 1009ac7:	83 c4 10             	add    esp,0x10
 1009aca:	eb 1a                	jmp    1009ae6 <printi+0x12a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:91
static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 1009acc:	89 d3                	mov    ebx,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:105
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 1009ace:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:107

	while (u) {
 1009ad3:	85 d2                	test   edx,edx
 1009ad5:	0f 85 56 ff ff ff    	jne    1009a31 <printi+0x75>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:90

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 1009adb:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:104
	if (sg && b == 10 && i < 0) {
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
 1009ae0:	8d 74 24 1f          	lea    esi,[esp+0x1f]
 1009ae4:	eb c9                	jmp    1009aaf <printi+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:127
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
}
 1009ae6:	83 c4 2c             	add    esp,0x2c
 1009ae9:	5b                   	pop    ebx
 1009aea:	5e                   	pop    esi
 1009aeb:	5f                   	pop    edi
 1009aec:	5d                   	pop    ebp
 1009aed:	c3                   	ret    

01009aee <print>:
print():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:130

static int print(char **out, const char *format, va_list args )
{
 1009aee:	55                   	push   ebp
 1009aef:	57                   	push   edi
 1009af0:	56                   	push   esi
 1009af1:	53                   	push   ebx
 1009af2:	83 ec 2c             	sub    esp,0x2c
 1009af5:	89 c7                	mov    edi,eax
 1009af7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:135
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 1009afb:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 1009afe:	84 c0                	test   al,al
 1009b00:	0f 84 b8 01 00 00    	je     1009cbe <print+0x1d0>
 1009b06:	89 d5                	mov    ebp,edx
 1009b08:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:136
		if (*format == '%') {
 1009b0d:	3c 25                	cmp    al,0x25
 1009b0f:	0f 85 88 01 00 00    	jne    1009c9d <print+0x1af>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:137
			++format;
 1009b15:	8d 5d 01             	lea    ebx,[ebp+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:139
			width = pad = 0;
			if (*format == '\0') break;
 1009b18:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
 1009b1c:	84 d2                	test   dl,dl
 1009b1e:	0f 84 9f 01 00 00    	je     1009cc3 <print+0x1d5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:140
			if (*format == '%') goto out;
 1009b24:	80 fa 25             	cmp    dl,0x25
 1009b27:	0f 84 6e 01 00 00    	je     1009c9b <print+0x1ad>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:138
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 1009b2d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:141
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
 1009b32:	80 fa 2d             	cmp    dl,0x2d
 1009b35:	75 08                	jne    1009b3f <print+0x51>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:142
				++format;
 1009b37:	8d 5d 02             	lea    ebx,[ebp+0x2]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:143
				pad = PAD_RIGHT;
 1009b3a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:145
			}
			while (*format == '0') {
 1009b3f:	80 3b 30             	cmp    BYTE PTR [ebx],0x30
 1009b42:	75 0b                	jne    1009b4f <print+0x61>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:146
				++format;
 1009b44:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:147
				pad |= PAD_ZERO;
 1009b47:	83 c8 02             	or     eax,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:145
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 1009b4a:	80 3b 30             	cmp    BYTE PTR [ebx],0x30
 1009b4d:	74 f5                	je     1009b44 <print+0x56>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:149 (discriminator 1)
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 1009b4f:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
 1009b52:	8d 4a d0             	lea    ecx,[edx-0x30]
 1009b55:	80 f9 09             	cmp    cl,0x9
 1009b58:	77 22                	ja     1009b7c <print+0x8e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:149
 1009b5a:	b9 00 00 00 00       	mov    ecx,0x0
 1009b5f:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:150 (discriminator 2)
				width *= 10;
 1009b61:	8d 04 89             	lea    eax,[ecx+ecx*4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:151 (discriminator 2)
				width += *format - '0';
 1009b64:	0f be d2             	movsx  edx,dl
 1009b67:	8d 4c 42 d0          	lea    ecx,[edx+eax*2-0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:149 (discriminator 2)
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 1009b6b:	83 c3 01             	add    ebx,0x1
 1009b6e:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
 1009b71:	8d 42 d0             	lea    eax,[edx-0x30]
 1009b74:	3c 09                	cmp    al,0x9
 1009b76:	76 e9                	jbe    1009b61 <print+0x73>
 1009b78:	89 e8                	mov    eax,ebp
 1009b7a:	eb 05                	jmp    1009b81 <print+0x93>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:149
 1009b7c:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:153
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
 1009b81:	80 fa 73             	cmp    dl,0x73
 1009b84:	75 2c                	jne    1009bb2 <print+0xc4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:154
				register char *s = (char *)va_arg( args, int );
 1009b86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1009b8a:	8d 6a 04             	lea    ebp,[edx+0x4]
 1009b8d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
 1009b91:	8b 12                	mov    edx,DWORD PTR [edx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:155
				pc += prints (out, s?s:"(null)", width, pad);
 1009b93:	85 d2                	test   edx,edx
 1009b95:	bd d9 76 06 01       	mov    ebp,0x10676d9
 1009b9a:	0f 44 d5             	cmove  edx,ebp
 1009b9d:	83 ec 0c             	sub    esp,0xc
 1009ba0:	50                   	push   eax
 1009ba1:	89 f8                	mov    eax,edi
 1009ba3:	e8 18 fd ff ff       	call   10098c0 <prints>
 1009ba8:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:156
				continue;
 1009baa:	83 c4 10             	add    esp,0x10
 1009bad:	e9 fb 00 00 00       	jmp    1009cad <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:158
			}
			if( *format == 'd' ) {
 1009bb2:	80 fa 64             	cmp    dl,0x64
 1009bb5:	75 29                	jne    1009be0 <print+0xf2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:159
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 1009bb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1009bbb:	8d 6a 04             	lea    ebp,[edx+0x4]
 1009bbe:	6a 61                	push   0x61
 1009bc0:	50                   	push   eax
 1009bc1:	51                   	push   ecx
 1009bc2:	6a 01                	push   0x1
 1009bc4:	b9 0a 00 00 00       	mov    ecx,0xa
 1009bc9:	8b 12                	mov    edx,DWORD PTR [edx]
 1009bcb:	89 f8                	mov    eax,edi
 1009bcd:	e8 ea fd ff ff       	call   10099bc <printi>
 1009bd2:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:160
				continue;
 1009bd4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:159
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 1009bd7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:160
				continue;
 1009bdb:	e9 cd 00 00 00       	jmp    1009cad <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:162
			}
			if( *format == 'x' ) {
 1009be0:	80 fa 78             	cmp    dl,0x78
 1009be3:	75 2b                	jne    1009c10 <print+0x122>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:163
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 1009be5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
 1009be9:	89 ea                	mov    edx,ebp
 1009beb:	83 c5 04             	add    ebp,0x4
 1009bee:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
 1009bf2:	6a 61                	push   0x61
 1009bf4:	50                   	push   eax
 1009bf5:	51                   	push   ecx
 1009bf6:	6a 00                	push   0x0
 1009bf8:	b9 10 00 00 00       	mov    ecx,0x10
 1009bfd:	8b 12                	mov    edx,DWORD PTR [edx]
 1009bff:	89 f8                	mov    eax,edi
 1009c01:	e8 b6 fd ff ff       	call   10099bc <printi>
 1009c06:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:164
				continue;
 1009c08:	83 c4 10             	add    esp,0x10
 1009c0b:	e9 9d 00 00 00       	jmp    1009cad <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:166
			}
			if( *format == 'X' ) {
 1009c10:	80 fa 58             	cmp    dl,0x58
 1009c13:	75 26                	jne    1009c3b <print+0x14d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:167
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 1009c15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1009c19:	8d 6a 04             	lea    ebp,[edx+0x4]
 1009c1c:	6a 41                	push   0x41
 1009c1e:	50                   	push   eax
 1009c1f:	51                   	push   ecx
 1009c20:	6a 00                	push   0x0
 1009c22:	b9 10 00 00 00       	mov    ecx,0x10
 1009c27:	8b 12                	mov    edx,DWORD PTR [edx]
 1009c29:	89 f8                	mov    eax,edi
 1009c2b:	e8 8c fd ff ff       	call   10099bc <printi>
 1009c30:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:168
				continue;
 1009c32:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:167
			if( *format == 'x' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 1009c35:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:168
				continue;
 1009c39:	eb 72                	jmp    1009cad <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:170
			}
			if( *format == 'u' ) {
 1009c3b:	80 fa 75             	cmp    dl,0x75
 1009c3e:	75 28                	jne    1009c68 <print+0x17a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:171
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 1009c40:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
 1009c44:	89 ea                	mov    edx,ebp
 1009c46:	83 c5 04             	add    ebp,0x4
 1009c49:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
 1009c4d:	6a 61                	push   0x61
 1009c4f:	50                   	push   eax
 1009c50:	51                   	push   ecx
 1009c51:	6a 00                	push   0x0
 1009c53:	b9 0a 00 00 00       	mov    ecx,0xa
 1009c58:	8b 12                	mov    edx,DWORD PTR [edx]
 1009c5a:	89 f8                	mov    eax,edi
 1009c5c:	e8 5b fd ff ff       	call   10099bc <printi>
 1009c61:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:172
				continue;
 1009c63:	83 c4 10             	add    esp,0x10
 1009c66:	eb 45                	jmp    1009cad <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:174
			}
			if( *format == 'c' ) {
 1009c68:	80 fa 63             	cmp    dl,0x63
 1009c6b:	75 40                	jne    1009cad <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:176
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 1009c6d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
 1009c71:	89 ea                	mov    edx,ebp
 1009c73:	83 c5 04             	add    ebp,0x4
 1009c76:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
 1009c7a:	8b 12                	mov    edx,DWORD PTR [edx]
 1009c7c:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:177
				scr[1] = '\0';
 1009c80:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:178
				pc += prints (out, scr, width, pad);
 1009c85:	83 ec 0c             	sub    esp,0xc
 1009c88:	50                   	push   eax
 1009c89:	8d 54 24 2e          	lea    edx,[esp+0x2e]
 1009c8d:	89 f8                	mov    eax,edi
 1009c8f:	e8 2c fc ff ff       	call   10098c0 <prints>
 1009c94:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:179
				continue;
 1009c96:	83 c4 10             	add    esp,0x10
 1009c99:	eb 12                	jmp    1009cad <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:137
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 1009c9b:	89 dd                	mov    ebp,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:184
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 1009c9d:	0f be 55 00          	movsx  edx,BYTE PTR [ebp+0x0]
 1009ca1:	89 f8                	mov    eax,edi
 1009ca3:	e8 fc fb ff ff       	call   10098a4 <printchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:185
			++pc;
 1009ca8:	83 c6 01             	add    esi,0x1
 1009cab:	89 eb                	mov    ebx,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:135
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 1009cad:	8d 6b 01             	lea    ebp,[ebx+0x1]
 1009cb0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
 1009cb4:	84 c0                	test   al,al
 1009cb6:	0f 85 51 fe ff ff    	jne    1009b0d <print+0x1f>
 1009cbc:	eb 05                	jmp    1009cc3 <print+0x1d5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:132
}

static int print(char **out, const char *format, va_list args )
{
	register int width, pad;
	register int pc = 0;
 1009cbe:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:188
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 1009cc3:	85 ff                	test   edi,edi
 1009cc5:	74 05                	je     1009ccc <print+0x1de>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:188 (discriminator 1)
 1009cc7:	8b 07                	mov    eax,DWORD PTR [edi]
 1009cc9:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:191
	va_end( args );
	return pc;
}
 1009ccc:	89 f0                	mov    eax,esi
 1009cce:	83 c4 2c             	add    esp,0x2c
 1009cd1:	5b                   	pop    ebx
 1009cd2:	5e                   	pop    esi
 1009cd3:	5f                   	pop    edi
 1009cd4:	5d                   	pop    ebp
 1009cd5:	c3                   	ret    

01009cd6 <printk_valist>:
printk_valist():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:194

int printk_valist(const char *format, va_list args)
{
 1009cd6:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:195
    return print(0, format, args);
 1009cd9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
 1009cdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 1009ce1:	b8 00 00 00 00       	mov    eax,0x0
 1009ce6:	e8 03 fe ff ff       	call   1009aee <print>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:196
}
 1009ceb:	83 c4 0c             	add    esp,0xc
 1009cee:	c3                   	ret    

01009cef <printk>:
printk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:199

int printk(const char *format, ...)
{
 1009cef:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:201
        va_list args;
        va_start( args, format );
 1009cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:202
        return printk_valist(format, args);
 1009cf6:	83 ec 08             	sub    esp,0x8
 1009cf9:	50                   	push   eax
 1009cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1009cfe:	e8 d3 ff ff ff       	call   1009cd6 <printk_valist>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:203
}
 1009d03:	83 c4 1c             	add    esp,0x1c
 1009d06:	c3                   	ret    

01009d07 <printd>:
printd():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:209

#ifdef DEBUG_NONE
int printd() {}
#else
int printd(uint32_t DebugLevel, const char *format, ...)
{
 1009d07:	83 ec 0c             	sub    esp,0xc
 1009d0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:210
    if ((kDebugLevel & DebugLevel) == DebugLevel)    
 1009d0e:	89 d1                	mov    ecx,edx
 1009d10:	23 0d 78 98 12 00    	and    ecx,DWORD PTR ds:0x129878
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:222
//            pauseDisplay(false);
//            printDLineCount=0;
//        }
        return printk_valist(format, args);
    }
    return 0;
 1009d16:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:210
#ifdef DEBUG_NONE
int printd() {}
#else
int printd(uint32_t DebugLevel, const char *format, ...)
{
    if ((kDebugLevel & DebugLevel) == DebugLevel)    
 1009d1b:	39 ca                	cmp    edx,ecx
 1009d1d:	75 14                	jne    1009d33 <printd+0x2c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:214
    {
        va_list args;

        va_start( args, format );
 1009d1f:	8d 44 24 18          	lea    eax,[esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:220
//        if (++printDLineCount==SYS_VGA_HEIGHT-1)
//        {
//            pauseDisplay(false);
//            printDLineCount=0;
//        }
        return printk_valist(format, args);
 1009d23:	83 ec 08             	sub    esp,0x8
 1009d26:	50                   	push   eax
 1009d27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1009d2b:	e8 a6 ff ff ff       	call   1009cd6 <printk_valist>
 1009d30:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:223 (discriminator 1)
    }
    return 0;
}
 1009d33:	83 c4 0c             	add    esp,0xc
 1009d36:	c3                   	ret    

01009d37 <sprintf>:
sprintf():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:227
#endif

int sprintf(char *out, const char *format, ...)
{
 1009d37:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:231
        va_list args;
        
        va_start( args, format );
        return print( &out, format, args );
 1009d3a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
 1009d3e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
 1009d42:	8d 44 24 10          	lea    eax,[esp+0x10]
 1009d46:	e8 a3 fd ff ff       	call   1009aee <print>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:232
}
 1009d4b:	83 c4 0c             	add    esp,0xc
 1009d4e:	c3                   	ret    
 1009d4f:	90                   	nop

01009d50 <strcat>:
strcat():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   char *
   STRCAT (char *dest, const char *src)
   {
 1009d50:	53                   	push   ebx
 1009d51:	83 ec 14             	sub    esp,0x14
 1009d54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:31
     strcpy (dest + strlen (dest), src);
 1009d58:	53                   	push   ebx
 1009d59:	e8 ae 00 00 00       	call   1009e0c <strlen>
 1009d5e:	83 c4 08             	add    esp,0x8
 1009d61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1009d65:	01 d8                	add    eax,ebx
 1009d67:	50                   	push   eax
 1009d68:	e8 53 00 00 00       	call   1009dc0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:33
     return dest;
   }
 1009d6d:	89 d8                	mov    eax,ebx
 1009d6f:	83 c4 18             	add    esp,0x18
 1009d72:	5b                   	pop    ebx
 1009d73:	c3                   	ret    

01009d74 <concatenate>:
concatenate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:35

   void concatenate(char p[], char q[]) {
 1009d74:	56                   	push   esi
 1009d75:	53                   	push   ebx
 1009d76:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
 1009d7a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:40
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
 1009d7e:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
 1009d81:	74 10                	je     1009d93 <concatenate+0x1f>
 1009d83:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:41
      c++;  	
 1009d88:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:40
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
 1009d8b:	80 3c 13 00          	cmp    BYTE PTR [ebx+edx*1],0x0
 1009d8f:	75 f7                	jne    1009d88 <concatenate+0x14>
 1009d91:	eb 05                	jmp    1009d98 <concatenate+0x24>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:38
   }

   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 1009d93:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:46
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
 1009d98:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
 1009d9b:	84 c9                	test   cl,cl
 1009d9d:	74 16                	je     1009db5 <concatenate+0x41>
 1009d9f:	89 d0                	mov    eax,edx
 1009da1:	29 d6                	sub    esi,edx
 1009da3:	89 f2                	mov    edx,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:47
      p[c] = q[d];
 1009da5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:49
      d++;
      c++;	
 1009da8:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:46
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
 1009dab:	0f b6 0c 02          	movzx  ecx,BYTE PTR [edx+eax*1]
 1009daf:	84 c9                	test   cl,cl
 1009db1:	75 f2                	jne    1009da5 <concatenate+0x31>
 1009db3:	eb 02                	jmp    1009db7 <concatenate+0x43>
 1009db5:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:52
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
 1009db7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:53
 1009dbb:	5b                   	pop    ebx
 1009dbc:	5e                   	pop    esi
 1009dbd:	c3                   	ret    
 1009dbe:	66 90                	xchg   ax,ax

01009dc0 <strcpy>:
strcpy():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:5
#include "strings.h"

char *
strcpy(char *s1, const char *s2)
{
 1009dc0:	53                   	push   ebx
 1009dc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1009dc5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:6
    char *s = s1;
 1009dc9:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:7 (discriminator 1)
    while ((*s++ = *s2++) != 0)
 1009dcb:	83 c2 01             	add    edx,0x1
 1009dce:	83 c1 01             	add    ecx,0x1
 1009dd1:	0f b6 59 ff          	movzx  ebx,BYTE PTR [ecx-0x1]
 1009dd5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
 1009dd8:	84 db                	test   bl,bl
 1009dda:	75 ef                	jne    1009dcb <strcpy+0xb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:10
	;
    return (s1);
}
 1009ddc:	5b                   	pop    ebx
 1009ddd:	c3                   	ret    

01009dde <strcpyc>:
strcpyc():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:14

char *
strcpyc(char *s1, const char *s2, unsigned count)
{
 1009dde:	56                   	push   esi
 1009ddf:	53                   	push   ebx
 1009de0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1009de4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:16
    char *s = s1;
    while ((*s++ = *s2++) != 0 && count-->0)
 1009de8:	ba 00 00 00 00       	mov    edx,0x0
 1009ded:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 1009df1:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:16 (discriminator 2)
 1009df4:	0f b6 0c 16          	movzx  ecx,BYTE PTR [esi+edx*1]
 1009df8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
 1009dfb:	84 c9                	test   cl,cl
 1009dfd:	74 07                	je     1009e06 <strcpyc+0x28>
 1009dff:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:16 (discriminator 1)
 1009e02:	39 d3                	cmp    ebx,edx
 1009e04:	75 ee                	jne    1009df4 <strcpyc+0x16>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:19
	;
    return (s1);
}
 1009e06:	5b                   	pop    ebx
 1009e07:	5e                   	pop    esi
 1009e08:	c3                   	ret    
 1009e09:	66 90                	xchg   ax,ax
 1009e0b:	90                   	nop

01009e0c <strlen>:
strlen():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:3
#include <stddef.h>

size_t strlen(const char* str) {
 1009e0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:5
          size_t ret = 0;
        while ( str[ret] != 0 )
 1009e10:	80 3a 00             	cmp    BYTE PTR [edx],0x0
 1009e13:	74 10                	je     1009e25 <strlen+0x19>
 1009e15:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:6
                ret++;
 1009e1a:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:5
#include <stddef.h>

size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
 1009e1d:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
 1009e21:	75 f7                	jne    1009e1a <strlen+0xe>
 1009e23:	f3 c3                	repz ret 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:4
#include <stddef.h>

size_t strlen(const char* str) {
          size_t ret = 0;
 1009e25:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:8
        while ( str[ret] != 0 )
                ret++;
        return ret;
}
 1009e2a:	c3                   	ret    
 1009e2b:	90                   	nop

01009e2c <strncmp>:
strncmp():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
 1009e2c:	57                   	push   edi
 1009e2d:	56                   	push   esi
 1009e2e:	53                   	push   ebx
 1009e2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 1009e33:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
 1009e37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
 1009e3b:	85 db                	test   ebx,ebx
 1009e3d:	74 41                	je     1009e80 <strncmp+0x54>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
 1009e3f:	0f b6 16             	movzx  edx,BYTE PTR [esi]
 1009e42:	0f b6 0f             	movzx  ecx,BYTE PTR [edi]
 1009e45:	38 ca                	cmp    dl,cl
 1009e47:	75 1c                	jne    1009e65 <strncmp+0x39>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:17
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
 1009e49:	84 d2                	test   dl,dl
 1009e4b:	74 3a                	je     1009e87 <strncmp+0x5b>
 1009e4d:	83 eb 01             	sub    ebx,0x1
 1009e50:	b8 00 00 00 00       	mov    eax,0x0
 1009e55:	eb 1e                	jmp    1009e75 <strncmp+0x49>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:15
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
	if (*s1 != *s2)
 1009e57:	0f b6 54 06 01       	movzx  edx,BYTE PTR [esi+eax*1+0x1]
 1009e5c:	0f b6 4c 07 01       	movzx  ecx,BYTE PTR [edi+eax*1+0x1]
 1009e61:	38 ca                	cmp    dl,cl
 1009e63:	74 09                	je     1009e6e <strncmp+0x42>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
 1009e65:	38 ca                	cmp    dl,cl
 1009e67:	19 c0                	sbb    eax,eax
 1009e69:	83 c8 01             	or     eax,0x1
 1009e6c:	eb 25                	jmp    1009e93 <strncmp+0x67>
 1009e6e:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
 1009e71:	84 d2                	test   dl,dl
 1009e73:	74 19                	je     1009e8e <strncmp+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
 1009e75:	39 d8                	cmp    eax,ebx
 1009e77:	75 de                	jne    1009e57 <strncmp+0x2b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
 1009e79:	b8 00 00 00 00       	mov    eax,0x0
 1009e7e:	eb 13                	jmp    1009e93 <strncmp+0x67>
 1009e80:	b8 00 00 00 00       	mov    eax,0x0
 1009e85:	eb 0c                	jmp    1009e93 <strncmp+0x67>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:18
{
    for ( ; n > 0; s1++, s2++, --n)
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
 1009e87:	b8 00 00 00 00       	mov    eax,0x0
 1009e8c:	eb 05                	jmp    1009e93 <strncmp+0x67>
 1009e8e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:20
    return 0;
}
 1009e93:	5b                   	pop    ebx
 1009e94:	5e                   	pop    esi
 1009e95:	5f                   	pop    edi
 1009e96:	c3                   	ret    
 1009e97:	90                   	nop

01009e98 <strncpy>:
strncpy():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
 1009e98:	56                   	push   esi
 1009e99:	53                   	push   ebx
 1009e9a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
 1009e9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1009ea2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:16
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
 1009ea6:	85 c9                	test   ecx,ecx
 1009ea8:	74 33                	je     1009edd <strncpy+0x45>
 1009eaa:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1009ead:	84 c0                	test   al,al
 1009eaf:	74 26                	je     1009ed7 <strncpy+0x3f>
 1009eb1:	89 f2                	mov    edx,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
 1009eb3:	83 c2 01             	add    edx,0x1
 1009eb6:	83 c3 01             	add    ebx,0x1
 1009eb9:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
 1009ebc:	83 e9 01             	sub    ecx,0x1
 1009ebf:	74 1c                	je     1009edd <strncpy+0x45>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:16 (discriminator 1)
 1009ec1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1009ec4:	84 c0                	test   al,al
 1009ec6:	75 eb                	jne    1009eb3 <strncpy+0x1b>
 1009ec8:	eb 0f                	jmp    1009ed9 <strncpy+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:21
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
	*s++ = '\0';
 1009eca:	83 c2 01             	add    edx,0x1
 1009ecd:	c6 42 ff 00          	mov    BYTE PTR [edx-0x1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
 1009ed1:	39 d1                	cmp    ecx,edx
 1009ed3:	75 f5                	jne    1009eca <strncpy+0x32>
 1009ed5:	eb 06                	jmp    1009edd <strncpy+0x45>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:15
 */
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
 1009ed7:	89 f2                	mov    edx,esi
 1009ed9:	01 d1                	add    ecx,edx
 1009edb:	eb ed                	jmp    1009eca <strncpy+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:25
    while (n > 0) {
	*s++ = '\0';
	--n;
    }
    return s1;
}
 1009edd:	89 f0                	mov    eax,esi
 1009edf:	5b                   	pop    ebx
 1009ee0:	5e                   	pop    esi
 1009ee1:	c3                   	ret    
 1009ee2:	66 90                	xchg   ax,ax

01009ee4 <strleft>:
strleft():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strparts.c:2
char* strleft(char* val, int cnt)
{
 1009ee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
 1009ee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 1009eec:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strparts.c:5
    return val;
}
 1009ef0:	c3                   	ret    
 1009ef1:	66 90                	xchg   ax,ax
 1009ef3:	90                   	nop

01009ef4 <time>:
time():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:84
};

extern time_t kSystemCurrentTime;
time_t time(time_t* arg)
{
    *arg = kSystemCurrentTime;
 1009ef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1009ef8:	8b 15 cc 97 12 00    	mov    edx,DWORD PTR ds:0x1297cc
 1009efe:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:86
    return kSystemCurrentTime;
}
 1009f00:	a1 cc 97 12 00       	mov    eax,ds:0x1297cc
 1009f05:	c3                   	ret    

01009f06 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:88

struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
 1009f06:	55                   	push   ebp
 1009f07:	57                   	push   edi
 1009f08:	56                   	push   esi
 1009f09:	53                   	push   ebx
 1009f0a:	83 ec 08             	sub    esp,0x8
 1009f0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:93
  time_t time = *timer;
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;

  dayclock = (unsigned long) time % SECS_DAY;
 1009f11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 1009f15:	8b 18                	mov    ebx,DWORD PTR [eax]
 1009f17:	ba 07 45 2e c2       	mov    edx,0xc22e4507
 1009f1c:	89 d8                	mov    eax,ebx
 1009f1e:	f7 e2                	mul    edx
 1009f20:	89 d1                	mov    ecx,edx
 1009f22:	c1 e9 10             	shr    ecx,0x10
 1009f25:	69 c9 80 51 01 00    	imul   ecx,ecx,0x15180
 1009f2b:	29 cb                	sub    ebx,ecx
 1009f2d:	89 d9                	mov    ecx,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:94
  dayno = (unsigned long) time / SECS_DAY;
 1009f2f:	89 d3                	mov    ebx,edx
 1009f31:	c1 eb 10             	shr    ebx,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:96

  tmbuf->tm_sec = dayclock % 60;
 1009f34:	bd 89 88 88 88       	mov    ebp,0x88888889
 1009f39:	89 c8                	mov    eax,ecx
 1009f3b:	f7 e5                	mul    ebp
 1009f3d:	c1 ea 05             	shr    edx,0x5
 1009f40:	6b d2 3c             	imul   edx,edx,0x3c
 1009f43:	89 c8                	mov    eax,ecx
 1009f45:	29 d0                	sub    eax,edx
 1009f47:	89 06                	mov    DWORD PTR [esi],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:97
  tmbuf->tm_min = (dayclock % 3600) / 60;
 1009f49:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
 1009f4e:	89 c8                	mov    eax,ecx
 1009f50:	f7 e2                	mul    edx
 1009f52:	89 d7                	mov    edi,edx
 1009f54:	c1 ef 0b             	shr    edi,0xb
 1009f57:	69 c7 10 0e 00 00    	imul   eax,edi,0xe10
 1009f5d:	29 c1                	sub    ecx,eax
 1009f5f:	89 c8                	mov    eax,ecx
 1009f61:	f7 e5                	mul    ebp
 1009f63:	89 d1                	mov    ecx,edx
 1009f65:	c1 e9 05             	shr    ecx,0x5
 1009f68:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:98
  tmbuf->tm_hour = dayclock / 3600;
 1009f6b:	89 7e 08             	mov    DWORD PTR [esi+0x8],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:99
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
 1009f6e:	8d 4b 04             	lea    ecx,[ebx+0x4]
 1009f71:	ba 25 49 92 24       	mov    edx,0x24924925
 1009f76:	89 c8                	mov    eax,ecx
 1009f78:	f7 e2                	mul    edx
 1009f7a:	89 c8                	mov    eax,ecx
 1009f7c:	29 d0                	sub    eax,edx
 1009f7e:	d1 e8                	shr    eax,1
 1009f80:	01 c2                	add    edx,eax
 1009f82:	c1 ea 02             	shr    edx,0x2
 1009f85:	8d 04 d5 00 00 00 00 	lea    eax,[edx*8+0x0]
 1009f8c:	29 d0                	sub    eax,edx
 1009f8e:	29 c1                	sub    ecx,eax
 1009f90:	89 4e 18             	mov    DWORD PTR [esi+0x18],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:91
}

struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
  time_t time = *timer;
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
 1009f93:	b9 b2 07 00 00       	mov    ecx,0x7b2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
 1009f98:	bd 1f 85 eb 51       	mov    ebp,0x51eb851f
 1009f9d:	eb 53                	jmp    1009ff2 <gmtime_r+0xec>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:101 (discriminator 1)
    dayno -= YEARSIZE(year);
 1009f9f:	89 c8                	mov    eax,ecx
 1009fa1:	f7 ed                	imul   ebp
 1009fa3:	c1 fa 05             	sar    edx,0x5
 1009fa6:	89 c8                	mov    eax,ecx
 1009fa8:	c1 f8 1f             	sar    eax,0x1f
 1009fab:	29 c2                	sub    edx,eax
 1009fad:	6b d2 64             	imul   edx,edx,0x64
 1009fb0:	39 d1                	cmp    ecx,edx
 1009fb2:	75 26                	jne    1009fda <gmtime_r+0xd4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:101 (discriminator 4)
 1009fb4:	89 c8                	mov    eax,ecx
 1009fb6:	f7 ed                	imul   ebp
 1009fb8:	c1 fa 07             	sar    edx,0x7
 1009fbb:	89 c8                	mov    eax,ecx
 1009fbd:	c1 f8 1f             	sar    eax,0x1f
 1009fc0:	29 c2                	sub    edx,eax
 1009fc2:	69 c2 90 01 00 00    	imul   eax,edx,0x190
 1009fc8:	89 cf                	mov    edi,ecx
 1009fca:	29 c7                	sub    edi,eax
 1009fcc:	83 ff 01             	cmp    edi,0x1
 1009fcf:	19 c0                	sbb    eax,eax
 1009fd1:	f7 d0                	not    eax
 1009fd3:	05 6e 01 00 00       	add    eax,0x16e
 1009fd8:	eb 13                	jmp    1009fed <gmtime_r+0xe7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:101
 1009fda:	b8 6e 01 00 00       	mov    eax,0x16e
 1009fdf:	eb 0c                	jmp    1009fed <gmtime_r+0xe7>
 1009fe1:	b8 6d 01 00 00       	mov    eax,0x16d
 1009fe6:	eb 05                	jmp    1009fed <gmtime_r+0xe7>
 1009fe8:	b8 6e 01 00 00       	mov    eax,0x16e
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:101 (discriminator 8)
 1009fed:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:102 (discriminator 8)
    year++;
 1009fef:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
 1009ff2:	89 cf                	mov    edi,ecx
 1009ff4:	83 e7 03             	and    edi,0x3
 1009ff7:	0f 85 d5 00 00 00    	jne    100a0d2 <gmtime_r+0x1cc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100 (discriminator 1)
 1009ffd:	89 c8                	mov    eax,ecx
 1009fff:	f7 ed                	imul   ebp
 100a001:	c1 fa 05             	sar    edx,0x5
 100a004:	89 c8                	mov    eax,ecx
 100a006:	c1 f8 1f             	sar    eax,0x1f
 100a009:	29 c2                	sub    edx,eax
 100a00b:	6b d2 64             	imul   edx,edx,0x64
 100a00e:	39 d1                	cmp    ecx,edx
 100a010:	0f 85 0a 01 00 00    	jne    100a120 <gmtime_r+0x21a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100 (discriminator 4)
 100a016:	89 c8                	mov    eax,ecx
 100a018:	f7 ed                	imul   ebp
 100a01a:	c1 fa 07             	sar    edx,0x7
 100a01d:	89 c8                	mov    eax,ecx
 100a01f:	c1 f8 1f             	sar    eax,0x1f
 100a022:	29 c2                	sub    edx,eax
 100a024:	69 d2 90 01 00 00    	imul   edx,edx,0x190
 100a02a:	39 d1                	cmp    ecx,edx
 100a02c:	0f 84 03 01 00 00    	je     100a135 <gmtime_r+0x22f>
 100a032:	e9 b0 00 00 00       	jmp    100a0e7 <gmtime_r+0x1e1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:104
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
 100a037:	8d 81 94 f8 ff ff    	lea    eax,[ecx-0x76c]
 100a03d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:105
  tmbuf->tm_yday = dayno;
 100a040:	89 5e 1c             	mov    DWORD PTR [esi+0x1c],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:106
  tmbuf->tm_mon = 0;
 100a043:	c7 46 10 00 00 00 00 	mov    DWORD PTR [esi+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
 100a04a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
 100a04f:	89 c8                	mov    eax,ecx
 100a051:	f7 ea                	imul   edx
 100a053:	89 d5                	mov    ebp,edx
 100a055:	c1 fd 05             	sar    ebp,0x5
 100a058:	89 c8                	mov    eax,ecx
 100a05a:	c1 f8 1f             	sar    eax,0x1f
 100a05d:	29 c5                	sub    ebp,eax
 100a05f:	6b ed 64             	imul   ebp,ebp,0x64
 100a062:	89 cf                	mov    edi,ecx
 100a064:	29 ef                	sub    edi,ebp
 100a066:	89 fd                	mov    ebp,edi
 100a068:	c1 fa 07             	sar    edx,0x7
 100a06b:	29 c2                	sub    edx,eax
 100a06d:	69 d2 90 01 00 00    	imul   edx,edx,0x190
 100a073:	29 d1                	sub    ecx,edx
 100a075:	89 0c 24             	mov    DWORD PTR [esp],ecx
 100a078:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
 100a07c:	eb 40                	jmp    100a0be <gmtime_r+0x1b8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108 (discriminator 1)
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
 100a07e:	85 ed                	test   ebp,ebp
 100a080:	75 0d                	jne    100a08f <gmtime_r+0x189>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108 (discriminator 4)
 100a082:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
 100a086:	74 0e                	je     100a096 <gmtime_r+0x190>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108 (discriminator 6)
 100a088:	ba 00 00 00 00       	mov    edx,0x0
 100a08d:	eb 1a                	jmp    100a0a9 <gmtime_r+0x1a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108
 100a08f:	ba 01 00 00 00       	mov    edx,0x1
 100a094:	eb 13                	jmp    100a0a9 <gmtime_r+0x1a3>
 100a096:	ba 01 00 00 00       	mov    edx,0x1
 100a09b:	eb 0c                	jmp    100a0a9 <gmtime_r+0x1a3>
 100a09d:	ba 01 00 00 00       	mov    edx,0x1
 100a0a2:	eb 05                	jmp    100a0a9 <gmtime_r+0x1a3>
 100a0a4:	ba 01 00 00 00       	mov    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108 (discriminator 8)
 100a0a9:	8d 0c 12             	lea    ecx,[edx+edx*1]
 100a0ac:	01 ca                	add    edx,ecx
 100a0ae:	8d 14 90             	lea    edx,[eax+edx*4]
 100a0b1:	2b 1c 95 80 9b 02 01 	sub    ebx,DWORD PTR [edx*4+0x1029b80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:109 (discriminator 8)
    tmbuf->tm_mon++;
 100a0b8:	83 c0 01             	add    eax,0x1
 100a0bb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
 100a0be:	85 ff                	test   edi,edi
 100a0c0:	75 4c                	jne    100a10e <gmtime_r+0x208>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107 (discriminator 1)
 100a0c2:	85 ed                	test   ebp,ebp
 100a0c4:	0f 85 92 00 00 00    	jne    100a15c <gmtime_r+0x256>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107 (discriminator 4)
 100a0ca:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
 100a0ce:	74 7a                	je     100a14a <gmtime_r+0x244>
 100a0d0:	eb 2a                	jmp    100a0fc <gmtime_r+0x1f6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
 100a0d2:	81 fb 6c 01 00 00    	cmp    ebx,0x16c
 100a0d8:	0f 87 03 ff ff ff    	ja     1009fe1 <gmtime_r+0xdb>
 100a0de:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
 100a0e2:	e9 50 ff ff ff       	jmp    100a037 <gmtime_r+0x131>
 100a0e7:	81 fb 6c 01 00 00    	cmp    ebx,0x16c
 100a0ed:	0f 87 ac fe ff ff    	ja     1009f9f <gmtime_r+0x99>
 100a0f3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
 100a0f7:	e9 3b ff ff ff       	jmp    100a037 <gmtime_r+0x131>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
 100a0fc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
 100a0ff:	3b 1c 85 80 9b 02 01 	cmp    ebx,DWORD PTR [eax*4+0x1029b80]
 100a106:	0f 83 72 ff ff ff    	jae    100a07e <gmtime_r+0x178>
 100a10c:	eb 5e                	jmp    100a16c <gmtime_r+0x266>
 100a10e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
 100a111:	3b 1c 85 80 9b 02 01 	cmp    ebx,DWORD PTR [eax*4+0x1029b80]
 100a118:	0f 83 6a ff ff ff    	jae    100a088 <gmtime_r+0x182>
 100a11e:	eb 4c                	jmp    100a16c <gmtime_r+0x266>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
 100a120:	81 fb 6d 01 00 00    	cmp    ebx,0x16d
 100a126:	0f 87 bc fe ff ff    	ja     1009fe8 <gmtime_r+0xe2>
 100a12c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
 100a130:	e9 02 ff ff ff       	jmp    100a037 <gmtime_r+0x131>
 100a135:	81 fb 6d 01 00 00    	cmp    ebx,0x16d
 100a13b:	0f 87 73 fe ff ff    	ja     1009fb4 <gmtime_r+0xae>
 100a141:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
 100a145:	e9 ed fe ff ff       	jmp    100a037 <gmtime_r+0x131>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
 100a14a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
 100a14d:	3b 1c 85 b0 9b 02 01 	cmp    ebx,DWORD PTR [eax*4+0x1029bb0]
 100a154:	0f 83 43 ff ff ff    	jae    100a09d <gmtime_r+0x197>
 100a15a:	eb 10                	jmp    100a16c <gmtime_r+0x266>
 100a15c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
 100a15f:	3b 1c 85 b0 9b 02 01 	cmp    ebx,DWORD PTR [eax*4+0x1029bb0]
 100a166:	0f 83 38 ff ff ff    	jae    100a0a4 <gmtime_r+0x19e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:111
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
 100a16c:	83 c3 01             	add    ebx,0x1
 100a16f:	89 5e 0c             	mov    DWORD PTR [esi+0xc],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:112
  tmbuf->tm_isdst = 0;
 100a172:	c7 46 20 00 00 00 00 	mov    DWORD PTR [esi+0x20],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:114
  return tmbuf;
}
 100a179:	89 f0                	mov    eax,esi
 100a17b:	83 c4 08             	add    esp,0x8
 100a17e:	5b                   	pop    ebx
 100a17f:	5e                   	pop    esi
 100a180:	5f                   	pop    edi
 100a181:	5d                   	pop    ebp
 100a182:	c3                   	ret    

0100a183 <localtime>:
localtime():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:116

struct tm *localtime(const time_t *timer) {
 100a183:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:120
  time_t t;
  struct tm tmbuf;
  
  t = *timer - kTimeZone;
 100a186:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100a18a:	8b 00                	mov    eax,DWORD PTR [eax]
 100a18c:	2b 05 d0 97 12 00    	sub    eax,DWORD PTR ds:0x1297d0
 100a192:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:121
  return gmtime_r(&t, &tmbuf);
 100a196:	54                   	push   esp
 100a197:	8d 44 24 30          	lea    eax,[esp+0x30]
 100a19b:	50                   	push   eax
 100a19c:	e8 65 fd ff ff       	call   1009f06 <gmtime_r>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:122
}
 100a1a1:	83 c4 38             	add    esp,0x38
 100a1a4:	c3                   	ret    

0100a1a5 <localtime_r>:
localtime_r():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:124

struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
 100a1a5:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:127
  time_t t;

  t = *timer - kTimeZone;
 100a1a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 100a1ac:	8b 00                	mov    eax,DWORD PTR [eax]
 100a1ae:	2b 05 d0 97 12 00    	sub    eax,DWORD PTR ds:0x1297d0
 100a1b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:128
  return gmtime_r(&t, tmbuf);
 100a1b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100a1bc:	8d 44 24 10          	lea    eax,[esp+0x10]
 100a1c0:	50                   	push   eax
 100a1c1:	e8 40 fd ff ff       	call   1009f06 <gmtime_r>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:129
}
 100a1c6:	83 c4 18             	add    esp,0x18
 100a1c9:	c3                   	ret    

0100a1ca <mktime>:
mktime():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:131

time_t mktime(struct tm *tmbuf) {
 100a1ca:	55                   	push   ebp
 100a1cb:	57                   	push   edi
 100a1cc:	56                   	push   esi
 100a1cd:	53                   	push   ebx
 100a1ce:	83 ec 20             	sub    esp,0x20
 100a1d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:139
  int yday, month;
  /*unsigned*/ long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
 100a1d5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
 100a1d7:	ba 89 88 88 88       	mov    edx,0x88888889
 100a1dc:	89 c8                	mov    eax,ecx
 100a1de:	f7 ea                	imul   edx
 100a1e0:	8d 04 0a             	lea    eax,[edx+ecx*1]
 100a1e3:	c1 f8 05             	sar    eax,0x5
 100a1e6:	89 ca                	mov    edx,ecx
 100a1e8:	c1 fa 1f             	sar    edx,0x1f
 100a1eb:	29 d0                	sub    eax,edx
 100a1ed:	89 c2                	mov    edx,eax
 100a1ef:	03 53 04             	add    edx,DWORD PTR [ebx+0x4]
 100a1f2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:140
  tmbuf->tm_sec %= 60;
 100a1f5:	6b c0 3c             	imul   eax,eax,0x3c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:141
  if (tmbuf->tm_sec < 0) {
 100a1f8:	29 c1                	sub    ecx,eax
 100a1fa:	78 04                	js     100a200 <mktime+0x36>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:140
  /*unsigned*/ long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
  tmbuf->tm_sec %= 60;
 100a1fc:	89 0b                	mov    DWORD PTR [ebx],ecx
 100a1fe:	eb 0b                	jmp    100a20b <mktime+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:142
  if (tmbuf->tm_sec < 0) {
    tmbuf->tm_sec += 60;
 100a200:	83 c1 3c             	add    ecx,0x3c
 100a203:	89 0b                	mov    DWORD PTR [ebx],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:143
    tmbuf->tm_min--;
 100a205:	83 ea 01             	sub    edx,0x1
 100a208:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:145
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
 100a20b:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
 100a20e:	ba 89 88 88 88       	mov    edx,0x88888889
 100a213:	89 c8                	mov    eax,ecx
 100a215:	f7 ea                	imul   edx
 100a217:	8d 04 0a             	lea    eax,[edx+ecx*1]
 100a21a:	c1 f8 05             	sar    eax,0x5
 100a21d:	89 ca                	mov    edx,ecx
 100a21f:	c1 fa 1f             	sar    edx,0x1f
 100a222:	29 d0                	sub    eax,edx
 100a224:	89 c2                	mov    edx,eax
 100a226:	03 53 08             	add    edx,DWORD PTR [ebx+0x8]
 100a229:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:146
  tmbuf->tm_min = tmbuf->tm_min % 60;
 100a22c:	6b c0 3c             	imul   eax,eax,0x3c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:147
  if (tmbuf->tm_min < 0) {
 100a22f:	29 c1                	sub    ecx,eax
 100a231:	78 05                	js     100a238 <mktime+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:146
  if (tmbuf->tm_sec < 0) {
    tmbuf->tm_sec += 60;
    tmbuf->tm_min--;
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
  tmbuf->tm_min = tmbuf->tm_min % 60;
 100a233:	89 4b 04             	mov    DWORD PTR [ebx+0x4],ecx
 100a236:	eb 0c                	jmp    100a244 <mktime+0x7a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:148
  if (tmbuf->tm_min < 0) {
    tmbuf->tm_min += 60;
 100a238:	83 c1 3c             	add    ecx,0x3c
 100a23b:	89 4b 04             	mov    DWORD PTR [ebx+0x4],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:149
    tmbuf->tm_hour--;
 100a23e:	83 ea 01             	sub    edx,0x1
 100a241:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:151
  }
  day = tmbuf->tm_hour / 24;
 100a244:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
 100a247:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
 100a24c:	89 f0                	mov    eax,esi
 100a24e:	f7 ea                	imul   edx
 100a250:	c1 fa 02             	sar    edx,0x2
 100a253:	89 f0                	mov    eax,esi
 100a255:	c1 f8 1f             	sar    eax,0x1f
 100a258:	89 d1                	mov    ecx,edx
 100a25a:	29 c1                	sub    ecx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:152
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
 100a25c:	8d 04 49             	lea    eax,[ecx+ecx*2]
 100a25f:	c1 e0 03             	shl    eax,0x3
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:153
  if (tmbuf->tm_hour < 0) {
 100a262:	29 c6                	sub    esi,eax
 100a264:	78 05                	js     100a26b <mktime+0xa1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:152
  if (tmbuf->tm_min < 0) {
    tmbuf->tm_min += 60;
    tmbuf->tm_hour--;
  }
  day = tmbuf->tm_hour / 24;
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
 100a266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
 100a269:	eb 09                	jmp    100a274 <mktime+0xaa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:154
  if (tmbuf->tm_hour < 0) {
    tmbuf->tm_hour += 24;
 100a26b:	83 c6 18             	add    esi,0x18
 100a26e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:155
    day--;
 100a271:	83 e9 01             	sub    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:157
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
 100a274:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
 100a277:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
 100a27c:	89 f0                	mov    eax,esi
 100a27e:	f7 ea                	imul   edx
 100a280:	d1 fa                	sar    edx,1
 100a282:	89 f0                	mov    eax,esi
 100a284:	c1 f8 1f             	sar    eax,0x1f
 100a287:	29 c2                	sub    edx,eax
 100a289:	89 d0                	mov    eax,edx
 100a28b:	03 43 14             	add    eax,DWORD PTR [ebx+0x14]
 100a28e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:158
  tmbuf->tm_mon %= 12;
 100a291:	8d 14 52             	lea    edx,[edx+edx*2]
 100a294:	c1 e2 02             	shl    edx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:159
  if (tmbuf->tm_mon < 0) {
 100a297:	29 d6                	sub    esi,edx
 100a299:	78 05                	js     100a2a0 <mktime+0xd6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:158
  if (tmbuf->tm_hour < 0) {
    tmbuf->tm_hour += 24;
    day--;
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
  tmbuf->tm_mon %= 12;
 100a29b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
 100a29e:	eb 0c                	jmp    100a2ac <mktime+0xe2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:160
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
 100a2a0:	83 c6 0c             	add    esi,0xc
 100a2a3:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:161
    tmbuf->tm_year--;
 100a2a6:	83 e8 01             	sub    eax,0x1
 100a2a9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:163
  }
  day += (tmbuf->tm_mday - 1);
 100a2ac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 100a2af:	8d 6c 01 ff          	lea    ebp,[ecx+eax*1-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:164
  while (day < 0) {
 100a2b3:	85 ed                	test   ebp,ebp
 100a2b5:	0f 89 f1 00 00 00    	jns    100a3ac <mktime+0x1e2>
 100a2bb:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:169
    if(--tmbuf->tm_mon < 0) {
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
 100a2be:	bf 1f 85 eb 51       	mov    edi,0x51eb851f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:165
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
    if(--tmbuf->tm_mon < 0) {
 100a2c3:	83 ee 01             	sub    esi,0x1
 100a2c6:	79 09                	jns    100a2d1 <mktime+0x107>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:166
      tmbuf->tm_year--;
 100a2c8:	83 6b 14 01          	sub    DWORD PTR [ebx+0x14],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:167
      tmbuf->tm_mon = 11;
 100a2cc:	be 0b 00 00 00       	mov    esi,0xb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:169
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
 100a2d1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
 100a2d4:	b8 00 00 00 00       	mov    eax,0x0
 100a2d9:	f6 c1 03             	test   cl,0x3
 100a2dc:	75 3c                	jne    100a31a <mktime+0x150>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:169 (discriminator 1)
 100a2de:	81 c1 6c 07 00 00    	add    ecx,0x76c
 100a2e4:	89 c8                	mov    eax,ecx
 100a2e6:	f7 ef                	imul   edi
 100a2e8:	c1 fa 05             	sar    edx,0x5
 100a2eb:	89 c8                	mov    eax,ecx
 100a2ed:	c1 f8 1f             	sar    eax,0x1f
 100a2f0:	29 c2                	sub    edx,eax
 100a2f2:	6b d2 64             	imul   edx,edx,0x64
 100a2f5:	b8 01 00 00 00       	mov    eax,0x1
 100a2fa:	39 d1                	cmp    ecx,edx
 100a2fc:	75 1c                	jne    100a31a <mktime+0x150>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:169 (discriminator 4)
 100a2fe:	89 c8                	mov    eax,ecx
 100a300:	f7 ef                	imul   edi
 100a302:	c1 fa 07             	sar    edx,0x7
 100a305:	89 c8                	mov    eax,ecx
 100a307:	c1 f8 1f             	sar    eax,0x1f
 100a30a:	29 c2                	sub    edx,eax
 100a30c:	69 d2 90 01 00 00    	imul   edx,edx,0x190
 100a312:	39 d1                	cmp    ecx,edx
 100a314:	0f 94 c0             	sete   al
 100a317:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:169 (discriminator 8)
 100a31a:	8d 14 00             	lea    edx,[eax+eax*1]
 100a31d:	01 d0                	add    eax,edx
 100a31f:	8d 04 86             	lea    eax,[esi+eax*4]
 100a322:	03 2c 85 80 9b 02 01 	add    ebp,DWORD PTR [eax*4+0x1029b80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:164 (discriminator 8)
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
 100a329:	85 ed                	test   ebp,ebp
 100a32b:	78 96                	js     100a2c3 <mktime+0xf9>
 100a32d:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
 100a330:	eb 7a                	jmp    100a3ac <mktime+0x1e2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172 (discriminator 1)
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
 100a332:	8d be 6c 07 00 00    	lea    edi,[esi+0x76c]
 100a338:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
 100a33d:	f7 ef                	imul   edi
 100a33f:	c1 fa 05             	sar    edx,0x5
 100a342:	89 f8                	mov    eax,edi
 100a344:	c1 f8 1f             	sar    eax,0x1f
 100a347:	29 c2                	sub    edx,eax
 100a349:	6b d2 64             	imul   edx,edx,0x64
 100a34c:	39 d7                	cmp    edi,edx
 100a34e:	75 27                	jne    100a377 <mktime+0x1ad>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172 (discriminator 4)
 100a350:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
 100a355:	f7 ef                	imul   edi
 100a357:	c1 fa 07             	sar    edx,0x7
 100a35a:	89 f8                	mov    eax,edi
 100a35c:	c1 f8 1f             	sar    eax,0x1f
 100a35f:	29 c2                	sub    edx,eax
 100a361:	69 d2 90 01 00 00    	imul   edx,edx,0x190
 100a367:	b8 01 00 00 00       	mov    eax,0x1
 100a36c:	39 d7                	cmp    edi,edx
 100a36e:	74 13                	je     100a383 <mktime+0x1b9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172 (discriminator 6)
 100a370:	b8 00 00 00 00       	mov    eax,0x0
 100a375:	eb 0c                	jmp    100a383 <mktime+0x1b9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172
 100a377:	b8 01 00 00 00       	mov    eax,0x1
 100a37c:	eb 05                	jmp    100a383 <mktime+0x1b9>
 100a37e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172 (discriminator 8)
 100a383:	8d 14 00             	lea    edx,[eax+eax*1]
 100a386:	01 d0                	add    eax,edx
 100a388:	8d 04 81             	lea    eax,[ecx+eax*4]
 100a38b:	2b 2c 85 80 9b 02 01 	sub    ebp,DWORD PTR [eax*4+0x1029b80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:173 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
 100a392:	83 c1 01             	add    ecx,0x1
 100a395:	83 f9 0c             	cmp    ecx,0xc
 100a398:	74 05                	je     100a39f <mktime+0x1d5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:173
 100a39a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
 100a39d:	eb 0d                	jmp    100a3ac <mktime+0x1e2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:174
      tmbuf->tm_mon = 0;
 100a39f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:175
      tmbuf->tm_year++;
 100a3a6:	83 c6 01             	add    esi,0x1
 100a3a9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
 100a3ac:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
 100a3af:	f7 c6 03 00 00 00    	test   esi,0x3
 100a3b5:	0f 85 ad 02 00 00    	jne    100a668 <mktime+0x49e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:171 (discriminator 1)
 100a3bb:	8d 8e 6c 07 00 00    	lea    ecx,[esi+0x76c]
 100a3c1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
 100a3c6:	f7 e9                	imul   ecx
 100a3c8:	c1 fa 05             	sar    edx,0x5
 100a3cb:	89 c8                	mov    eax,ecx
 100a3cd:	c1 f8 1f             	sar    eax,0x1f
 100a3d0:	29 c2                	sub    edx,eax
 100a3d2:	6b d2 64             	imul   edx,edx,0x64
 100a3d5:	39 d1                	cmp    ecx,edx
 100a3d7:	0f 85 b5 02 00 00    	jne    100a692 <mktime+0x4c8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:171 (discriminator 4)
 100a3dd:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
 100a3e2:	f7 e9                	imul   ecx
 100a3e4:	c1 fa 07             	sar    edx,0x7
 100a3e7:	89 c8                	mov    eax,ecx
 100a3e9:	c1 f8 1f             	sar    eax,0x1f
 100a3ec:	29 c2                	sub    edx,eax
 100a3ee:	69 d2 90 01 00 00    	imul   edx,edx,0x190
 100a3f4:	39 d1                	cmp    ecx,edx
 100a3f6:	0f 84 b6 02 00 00    	je     100a6b2 <mktime+0x4e8>
 100a3fc:	e9 7c 02 00 00       	jmp    100a67d <mktime+0x4b3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:178
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
 100a401:	8d 45 01             	lea    eax,[ebp+0x1]
 100a404:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:180
  year = EPOCH_YR;
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
 100a407:	83 fe 45             	cmp    esi,0x45
 100a40a:	0f 8e 51 02 00 00    	jle    100a661 <mktime+0x497>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:190
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
 100a410:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
 100a416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:192

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
 100a41a:	8d 46 ba             	lea    eax,[esi-0x46]
 100a41d:	89 c7                	mov    edi,eax
 100a41f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:183
  tmbuf->tm_mday = day + 1;
  year = EPOCH_YR;
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
  seconds = 0;
  day = 0;                      // Means days since day 0 now
  overflow = 0;
 100a423:	3d 7c c6 59 00       	cmp    eax,0x59c67c
 100a428:	0f 9f c0             	setg   al
 100a42b:	0f b6 c0             	movzx  eax,al
 100a42e:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:193
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
  day = (tm_year - year) * 365;
 100a430:	89 f8                	mov    eax,edi
 100a432:	69 ff 6d 01 00 00    	imul   edi,edi,0x16d
 100a438:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:194
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
 100a43c:	8d 7e bd             	lea    edi,[esi-0x43]
 100a43f:	85 c0                	test   eax,eax
 100a441:	0f 49 f8             	cmovns edi,eax
 100a444:	c1 ff 02             	sar    edi,0x2
 100a447:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
 100a44c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
 100a450:	8d 77 01             	lea    esi,[edi+0x1]
 100a453:	89 14 24             	mov    DWORD PTR [esp],edx
 100a456:	83 ca 02             	or     edx,0x2
 100a459:	39 f0                	cmp    eax,esi
 100a45b:	89 d6                	mov    esi,edx
 100a45d:	0f 4d 34 24          	cmovge esi,DWORD PTR [esp]
 100a461:	89 34 24             	mov    DWORD PTR [esp],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:195
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
 100a464:	b8 00 00 00 00       	mov    eax,0x0
 100a469:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 100a46d:	89 d6                	mov    esi,edx
 100a46f:	83 e6 03             	and    esi,0x3
 100a472:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
 100a476:	74 19                	je     100a491 <mktime+0x2c7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:195 (discriminator 1)
 100a478:	89 d6                	mov    esi,edx
 100a47a:	c1 fa 1f             	sar    edx,0x1f
 100a47d:	c1 ea 1e             	shr    edx,0x1e
 100a480:	8d 04 16             	lea    eax,[esi+edx*1]
 100a483:	83 e0 03             	and    eax,0x3
 100a486:	29 d0                	sub    eax,edx
 100a488:	83 f8 01             	cmp    eax,0x1
 100a48b:	0f 9e c0             	setle  al
 100a48e:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:195 (discriminator 6)
 100a491:	01 c7                	add    edi,eax
 100a493:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
 100a497:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:196 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
 100a49b:	bf 1f 85 eb 51       	mov    edi,0x51eb851f
 100a4a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100a4a4:	f7 ef                	imul   edi
 100a4a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
 100a4aa:	89 d0                	mov    eax,edx
 100a4ac:	c1 f8 05             	sar    eax,0x5
 100a4af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 100a4b3:	89 d6                	mov    esi,edx
 100a4b5:	c1 fe 1f             	sar    esi,0x1f
 100a4b8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
 100a4bc:	29 f0                	sub    eax,esi
 100a4be:	6b c0 64             	imul   eax,eax,0x64
 100a4c1:	29 c2                	sub    edx,eax
 100a4c3:	89 d0                	mov    eax,edx
 100a4c5:	0f 95 44 24 04       	setne  BYTE PTR [esp+0x4]
 100a4ca:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
 100a4cf:	83 f8 45             	cmp    eax,0x45
 100a4d2:	0f 9e c0             	setle  al
 100a4d5:	0f b6 c0             	movzx  eax,al
 100a4d8:	89 c6                	mov    esi,eax
 100a4da:	21 d6                	and    esi,edx
 100a4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 100a4e0:	f7 ef                	imul   edi
 100a4e2:	89 d7                	mov    edi,edx
 100a4e4:	c1 ff 05             	sar    edi,0x5
 100a4e7:	89 f8                	mov    eax,edi
 100a4e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
 100a4ed:	c1 ff 1f             	sar    edi,0x1f
 100a4f0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
 100a4f4:	29 f8                	sub    eax,edi
 100a4f6:	01 c6                	add    esi,eax
 100a4f8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 100a4fc:	29 f7                	sub    edi,esi
 100a4fe:	89 fe                	mov    esi,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:197 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
 100a500:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 100a504:	c1 f8 07             	sar    eax,0x7
 100a507:	89 c7                	mov    edi,eax
 100a509:	2b 7c 24 18          	sub    edi,DWORD PTR [esp+0x18]
 100a50d:	69 c7 90 01 00 00    	imul   eax,edi,0x190
 100a513:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
 100a517:	29 c7                	sub    edi,eax
 100a519:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
 100a51d:	81 ff 71 01 00 00    	cmp    edi,0x171
 100a523:	0f 9e 44 24 10       	setle  BYTE PTR [esp+0x10]
 100a528:	85 ff                	test   edi,edi
 100a52a:	0f 95 c0             	setne  al
 100a52d:	0f b6 c0             	movzx  eax,al
 100a530:	23 44 24 10          	and    eax,DWORD PTR [esp+0x10]
 100a534:	c1 fa 07             	sar    edx,0x7
 100a537:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
 100a53b:	01 c2                	add    edx,eax
 100a53d:	8d 04 32             	lea    eax,[edx+esi*1]
 100a540:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:200 (discriminator 6)

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
 100a544:	85 c9                	test   ecx,ecx
 100a546:	7e 46                	jle    100a58e <mktime+0x3c4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:200
 100a548:	be 00 00 00 00       	mov    esi,0x0
 100a54d:	bf 00 00 00 00       	mov    edi,0x0
 100a552:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
 100a556:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:201
    yday += _ytab[LEAPYEAR(tm_year)][month];
 100a55a:	b8 00 00 00 00       	mov    eax,0x0
 100a55f:	85 ed                	test   ebp,ebp
 100a561:	75 0f                	jne    100a572 <mktime+0x3a8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:201 (discriminator 4)
 100a563:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
 100a568:	0f 94 c0             	sete   al
 100a56b:	0a 44 24 04          	or     al,BYTE PTR [esp+0x4]
 100a56f:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:201 (discriminator 8)
 100a572:	8d 14 00             	lea    edx,[eax+eax*1]
 100a575:	01 d0                	add    eax,edx
 100a577:	8d 04 86             	lea    eax,[esi+eax*4]
 100a57a:	03 3c 85 80 9b 02 01 	add    edi,DWORD PTR [eax*4+0x1029b80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:202 (discriminator 8)
    month++;
 100a581:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:200 (discriminator 8)
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
 100a584:	39 ce                	cmp    esi,ecx
 100a586:	75 d2                	jne    100a55a <mktime+0x390>
 100a588:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
 100a58c:	eb 05                	jmp    100a593 <mktime+0x3c9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:199
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
 100a58e:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:204
  while (month < tmbuf->tm_mon) {
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
 100a593:	01 ef                	add    edi,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:205
  if (day + yday < 0) overflow|=4;
 100a595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
 100a599:	01 fe                	add    esi,edi
 100a59b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
 100a59e:	89 c8                	mov    eax,ecx
 100a5a0:	83 c8 04             	or     eax,0x4
 100a5a3:	85 f6                	test   esi,esi
 100a5a5:	0f 49 c1             	cmovns eax,ecx
 100a5a8:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:208
  day += yday;

  tmbuf->tm_yday = yday;
 100a5aa:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:209
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
 100a5ad:	8d 4e 04             	lea    ecx,[esi+0x4]
 100a5b0:	ba 93 24 49 92       	mov    edx,0x92492493
 100a5b5:	89 c8                	mov    eax,ecx
 100a5b7:	f7 ea                	imul   edx
 100a5b9:	01 ca                	add    edx,ecx
 100a5bb:	c1 fa 02             	sar    edx,0x2
 100a5be:	89 c8                	mov    eax,ecx
 100a5c0:	c1 f8 1f             	sar    eax,0x1f
 100a5c3:	29 c2                	sub    edx,eax
 100a5c5:	8d 04 d5 00 00 00 00 	lea    eax,[edx*8+0x0]
 100a5cc:	29 d0                	sub    eax,edx
 100a5ce:	29 c1                	sub    ecx,eax
 100a5d0:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:211

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
 100a5d3:	6b 4b 08 3c          	imul   ecx,DWORD PTR [ebx+0x8],0x3c
 100a5d7:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
 100a5da:	6b c9 3c             	imul   ecx,ecx,0x3c
 100a5dd:	03 0b                	add    ecx,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:213

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
 100a5df:	bf ff ff ff 7f       	mov    edi,0x7fffffff
 100a5e4:	29 cf                	sub    edi,ecx
 100a5e6:	ba 07 45 2e c2       	mov    edx,0xc22e4507
 100a5eb:	89 f8                	mov    eax,edi
 100a5ed:	f7 ea                	imul   edx
 100a5ef:	01 fa                	add    edx,edi
 100a5f1:	c1 fa 10             	sar    edx,0x10
 100a5f4:	c1 ff 1f             	sar    edi,0x1f
 100a5f7:	29 fa                	sub    edx,edi
 100a5f9:	89 e8                	mov    eax,ebp
 100a5fb:	83 c8 08             	or     eax,0x8
 100a5fe:	39 d6                	cmp    esi,edx
 100a600:	0f 4e c5             	cmovle eax,ebp
 100a603:	89 04 24             	mov    DWORD PTR [esp],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:214
  seconds += day * SECS_DAY;
 100a606:	69 f6 80 51 01 00    	imul   esi,esi,0x15180
 100a60c:	01 f1                	add    ecx,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:217

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
 100a60e:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
 100a613:	85 c0                	test   eax,eax
 100a615:	7e 0b                	jle    100a622 <mktime+0x458>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:217 (discriminator 1)
 100a617:	ba ff ff ff 7f       	mov    edx,0x7fffffff
 100a61c:	29 c2                	sub    edx,eax
 100a61e:	39 d1                	cmp    ecx,edx
 100a620:	7f 0c                	jg     100a62e <mktime+0x464>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:217 (discriminator 3)
 100a622:	85 c0                	test   eax,eax
 100a624:	79 0c                	jns    100a632 <mktime+0x468>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:218
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
 100a626:	89 c2                	mov    edx,eax
 100a628:	f7 da                	neg    edx
 100a62a:	39 d1                	cmp    ecx,edx
 100a62c:	7d 04                	jge    100a632 <mktime+0x468>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:219
          overflow|=16;
 100a62e:	83 0c 24 10          	or     DWORD PTR [esp],0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:221
  }
  seconds += kTimeZone;
 100a632:	01 c1                	add    ecx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:224

  if (tmbuf->tm_isdst) {
    dst = _dstbias;
 100a634:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
 100a638:	ba 00 00 00 00       	mov    edx,0x0
 100a63d:	0f 45 15 68 99 12 00 	cmovne edx,DWORD PTR ds:0x129968
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:229
  } else {
    dst = 0;
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
 100a644:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 100a647:	89 d8                	mov    eax,ebx
 100a649:	83 c8 20             	or     eax,0x20
 100a64c:	39 ca                	cmp    edx,ecx
 100a64e:	0f 4e c3             	cmovle eax,ebx
 100a651:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:232
  seconds -= dst;

  if (overflow) return (time_t) overflow-2;
 100a653:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:235

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
 100a655:	29 d1                	sub    ecx,edx
 100a657:	83 e8 02             	sub    eax,0x2
 100a65a:	85 ff                	test   edi,edi
 100a65c:	0f 44 c1             	cmove  eax,ecx
 100a65f:	eb 62                	jmp    100a6c3 <mktime+0x4f9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:180
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
  year = EPOCH_YR;
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
 100a661:	b8 19 fc ff ff       	mov    eax,0xfffffc19
 100a666:	eb 5b                	jmp    100a6c3 <mktime+0x4f9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
 100a668:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
 100a66b:	3b 2c 8d 80 9b 02 01 	cmp    ebp,DWORD PTR [ecx*4+0x1029b80]
 100a672:	0f 8d f8 fc ff ff    	jge    100a370 <mktime+0x1a6>
 100a678:	e9 84 fd ff ff       	jmp    100a401 <mktime+0x237>
 100a67d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
 100a680:	3b 2c 8d 80 9b 02 01 	cmp    ebp,DWORD PTR [ecx*4+0x1029b80]
 100a687:	0f 8d a5 fc ff ff    	jge    100a332 <mktime+0x168>
 100a68d:	e9 6f fd ff ff       	jmp    100a401 <mktime+0x237>
 100a692:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
 100a695:	3b 2c 8d b0 9b 02 01 	cmp    ebp,DWORD PTR [ecx*4+0x1029bb0]
 100a69c:	0f 8d dc fc ff ff    	jge    100a37e <mktime+0x1b4>
 100a6a2:	e9 5a fd ff ff       	jmp    100a401 <mktime+0x237>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
 100a6a7:	8d be 6c 07 00 00    	lea    edi,[esi+0x76c]
 100a6ad:	e9 9e fc ff ff       	jmp    100a350 <mktime+0x186>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
 100a6b2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
 100a6b5:	3b 2c 8d b0 9b 02 01 	cmp    ebp,DWORD PTR [ecx*4+0x1029bb0]
 100a6bc:	7d e9                	jge    100a6a7 <mktime+0x4dd>
 100a6be:	e9 3e fd ff ff       	jmp    100a401 <mktime+0x237>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:236

  if (overflow) return (time_t) overflow-2;

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
}
 100a6c3:	83 c4 20             	add    esp,0x20
 100a6c6:	5b                   	pop    ebx
 100a6c7:	5e                   	pop    esi
 100a6c8:	5f                   	pop    edi
 100a6c9:	5d                   	pop    ebp
 100a6ca:	c3                   	ret    

0100a6cb <_strdate>:
_strdate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:241

#if !defined(KERNEL) && !defined(OS_LIB)


char *_strdate(char *s) {
 100a6cb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:244
  time_t now;

  time(&now);
 100a6ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
 100a6d2:	50                   	push   eax
 100a6d3:	e8 1c f8 ff ff       	call   1009ef4 <time>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:248
  //fix me!
  //  strftime(s, 9, "%D", localtime(&now));
  return s;
}
 100a6d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 100a6dc:	83 c4 14             	add    esp,0x14
 100a6df:	c3                   	ret    

0100a6e0 <_strtime>:
_strtime():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:250

char *_strtime(char *s) {
 100a6e0:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:253
  time_t now;

  time(&now);
 100a6e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
 100a6e7:	50                   	push   eax
 100a6e8:	e8 07 f8 ff ff       	call   1009ef4 <time>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:257
  //fix me
  //  strftime(s, 9, "%T", localtime(&now));
  return s;
}
 100a6ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 100a6f1:	83 c4 14             	add    esp,0x14
 100a6f4:	c3                   	ret    

0100a6f5 <waitTicks>:
waitTicks():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:260

void __attribute__((noinline))waitTicks(int TicksToWait)
{
 100a6f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:262
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
 100a6f9:	85 c0                	test   eax,eax
 100a6fb:	74 09                	je     100a706 <waitTicks+0x11>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:267 (discriminator 1)
        return;
    //printd(DEBUG_TIMER,"ttw=%08X", TicksToWait);
    do
    {
        __asm("sti\nhlt\n");
 100a6fd:	fb                   	sti    
 100a6fe:	f4                   	hlt    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:268 (discriminator 1)
        TicksToWait--;
 100a6ff:	83 e8 01             	sub    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:269 (discriminator 1)
    } while (TicksToWait>0);
 100a702:	85 c0                	test   eax,eax
 100a704:	7f f7                	jg     100a6fd <waitTicks+0x8>
 100a706:	f3 c3                	repz ret 

0100a708 <wait>:
wait():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:274
    return;
}

void /*__attribute__((noinline))*/wait(int msToWait)
{
 100a708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:277
    //printk("msToWait=%u, ticksperms=%u, ticksToWait=%u",msToWait, kTicksPerMS, msToWait*kTicksPerMS);
    //STOPHERE2
    waitTicks(msToWait/kTicksPerMS);
 100a70c:	99                   	cdq    
 100a70d:	f7 3d c4 97 12 00    	idiv   DWORD PTR ds:0x1297c4
 100a713:	50                   	push   eax
 100a714:	e8 dc ff ff ff       	call   100a6f5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:278
}
 100a719:	83 c4 04             	add    esp,0x4
 100a71c:	c3                   	ret    

0100a71d <wait3>:
wait3():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:281

void wait3(double msToWait)
{
 100a71d:	56                   	push   esi
 100a71e:	53                   	push   ebx
 100a71f:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:282
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);
 100a722:	8b 0d a4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297a4
 100a728:	8b 19                	mov    ebx,DWORD PTR [ecx]
 100a72a:	8b 35 c0 97 12 00    	mov    esi,DWORD PTR ds:0x1297c0
 100a730:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
 100a734:	b8 e8 03 00 00       	mov    eax,0x3e8
 100a739:	ba 00 00 00 00       	mov    edx,0x0
 100a73e:	f7 f6                	div    esi
 100a740:	89 04 24             	mov    DWORD PTR [esp],eax
 100a743:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 100a74a:	00 
 100a74b:	df 2c 24             	fild   QWORD PTR [esp]
 100a74e:	de f9                	fdivp  st(1),st
 100a750:	89 1c 24             	mov    DWORD PTR [esp],ebx
 100a753:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 100a75a:	00 
 100a75b:	df 2c 24             	fild   QWORD PTR [esp]
 100a75e:	de c1                	faddp  st(1),st
 100a760:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
 100a764:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
 100a768:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:284

while (endTicks > (double)*kTicksSinceStart)
 100a76c:	8b 01                	mov    eax,DWORD PTR [ecx]
 100a76e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
 100a772:	89 04 24             	mov    DWORD PTR [esp],eax
 100a775:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 100a77c:	00 
 100a77d:	df 2c 24             	fild   QWORD PTR [esp]
 100a780:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
 100a784:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
 100a788:	d9 c9                	fxch   st(1)
 100a78a:	df e9                	fucomip st,st(1)
 100a78c:	dd d8                	fstp   st(0)
 100a78e:	76 26                	jbe    100a7b6 <wait3+0x99>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:285
    {__asm__("sti\n hlt\n");}
 100a790:	fb                   	sti    
 100a791:	f4                   	hlt    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:284

void wait3(double msToWait)
{
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);

while (endTicks > (double)*kTicksSinceStart)
 100a792:	8b 01                	mov    eax,DWORD PTR [ecx]
 100a794:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
 100a798:	89 04 24             	mov    DWORD PTR [esp],eax
 100a79b:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 100a7a2:	00 
 100a7a3:	df 2c 24             	fild   QWORD PTR [esp]
 100a7a6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
 100a7aa:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
 100a7ae:	d9 c9                	fxch   st(1)
 100a7b0:	df e9                	fucomip st,st(1)
 100a7b2:	dd d8                	fstp   st(0)
 100a7b4:	77 da                	ja     100a790 <wait3+0x73>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:287
    {__asm__("sti\n hlt\n");}
    
}
 100a7b6:	83 c4 24             	add    esp,0x24
 100a7b9:	5b                   	pop    ebx
 100a7ba:	5e                   	pop    esi
 100a7bb:	c3                   	ret    

0100a7bc <wait2>:
wait2():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:290

void wait2(unsigned msToWait)
{
 100a7bc:	57                   	push   edi
 100a7bd:	56                   	push   esi
 100a7be:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:291
    uint64_t startTicks = *kTicksSinceStart;             //25
 100a7bf:	8b 1d a4 97 12 00    	mov    ebx,DWORD PTR ds:0x1297a4
 100a7c5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:292
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
 100a7c7:	8b 3d c0 97 12 00    	mov    edi,DWORD PTR ds:0x1297c0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:294
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
    uint64_t endTicks = startTicks + totalTicksToWait;
 100a7cd:	b8 e8 03 00 00       	mov    eax,0x3e8
 100a7d2:	ba 00 00 00 00       	mov    edx,0x0
 100a7d7:	f7 f7                	div    edi
 100a7d9:	89 c6                	mov    esi,eax
 100a7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 100a7df:	ba 00 00 00 00       	mov    edx,0x0
 100a7e4:	f7 f6                	div    esi
 100a7e6:	89 c6                	mov    esi,eax
 100a7e8:	bf 00 00 00 00       	mov    edi,0x0
 100a7ed:	89 c8                	mov    eax,ecx
 100a7ef:	ba 00 00 00 00       	mov    edx,0x0
 100a7f4:	01 f0                	add    eax,esi
 100a7f6:	11 fa                	adc    edx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:296

    if (endTicks < *kTicksSinceStart)
 100a7f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
 100a7fa:	83 fa 00             	cmp    edx,0x0
 100a7fd:	77 04                	ja     100a803 <wait2+0x47>
 100a7ff:	39 c8                	cmp    eax,ecx
 100a801:	72 17                	jb     100a81a <wait2+0x5e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
 100a803:	8b 0b                	mov    ecx,DWORD PTR [ebx]
 100a805:	83 fa 00             	cmp    edx,0x0
 100a808:	77 04                	ja     100a80e <wait2+0x52>
 100a80a:	39 c8                	cmp    eax,ecx
 100a80c:	76 0c                	jbe    100a81a <wait2+0x5e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:305
    {__asm__("hlt\n");}
 100a80e:	f4                   	hlt    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
 100a80f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
 100a811:	83 fa 00             	cmp    edx,0x0
 100a814:	77 f8                	ja     100a80e <wait2+0x52>
 100a816:	39 c8                	cmp    eax,ecx
 100a818:	77 f4                	ja     100a80e <wait2+0x52>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:307
    {__asm__("hlt\n");}
    //printf("done waiting!\n");
}
 100a81a:	5b                   	pop    ebx
 100a81b:	5e                   	pop    esi
 100a81c:	5f                   	pop    edi
 100a81d:	c3                   	ret    
 100a81e:	66 90                	xchg   ax,ax

0100a820 <idt_set_gate>:
idt_set_gate():
/home/yogi/src/os/chrisOSKernel/x86idt.c:14
#include "chrisos.h"

/* Use this function to set an entry in the IDT. Alot simpler
*  than twiddling with the GDT ;) */
void idt_set_gate(struct idt_entry *idt, unsigned short sel, uint32_t base, unsigned char flags)
{
 100a820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 100a824:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/x86idt.c:15
  idt->base_lo = base & 0xFFFF;
 100a828:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOSKernel/x86idt.c:16
  idt->sel = sel;
 100a82b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
 100a82f:	66 89 48 02          	mov    WORD PTR [eax+0x2],cx
/home/yogi/src/os/chrisOSKernel/x86idt.c:17
  idt->flags = flags | 0x80;
 100a833:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
 100a838:	83 c9 80             	or     ecx,0xffffff80
 100a83b:	88 48 05             	mov    BYTE PTR [eax+0x5],cl
/home/yogi/src/os/chrisOSKernel/x86idt.c:18
  idt->base_hi = (base >> 16) & 0xFFFF;}
 100a83e:	c1 ea 10             	shr    edx,0x10
 100a841:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
 100a845:	c3                   	ret    

0100a846 <idt_install>:
idt_install():
/home/yogi/src/os/chrisOSKernel/x86idt.c:22

/* Installs the IDT */
void idt_install(struct idt_ptr* idtp)
{
 100a846:	83 ec 14             	sub    esp,0x14
 100a849:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/x86idt.c:24
    /* Sets the special IDT pointer up, just like in 'gdt.c' */
    idtp->limit = (sizeof (struct idt_entry) * 256) - 1;
 100a84d:	66 c7 00 ff 07       	mov    WORD PTR [eax],0x7ff
/home/yogi/src/os/chrisOSKernel/x86idt.c:25
    idtp->base = (int)IDT_TABLE_ADDRESS;
 100a852:	c7 40 02 00 30 16 00 	mov    DWORD PTR [eax+0x2],0x163000
/home/yogi/src/os/chrisOSKernel/x86idt.c:33
    //memset(&idt, 0, sizeof(struct idt_entry) * 256);

    /* Add any new ISRs to the IDT here using idt_set_gate */

    /* Points the processor's internal register to the new IDT */
    idt_load((uint64_t)((uint64_t)(idtp->limit)<<32 | idtp->base));
 100a859:	68 ff 07 00 00       	push   0x7ff
 100a85e:	68 00 30 16 00       	push   0x163000
 100a863:	e8 82 28 00 00       	call   100d0ea <idt_load>
/home/yogi/src/os/chrisOSKernel/x86idt.c:34
}
 100a868:	83 c4 1c             	add    esp,0x1c
 100a86b:	c3                   	ret    

0100a86c <kbd_handler_generic>:
kbd_handler_generic():
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:38
    kbd_handler_generic();
    return;
}

void kbd_handler_generic()
{
 100a86c:	53                   	push   ebx
 100a86d:	83 ec 08             	sub    esp,0x8
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 100a870:	e4 60                	in     al,0x60
kbd_handler_generic():
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:44
    unsigned char lKeyControlVal=0;
    unsigned char rawKey=0;
    unsigned char translatedKeypress=0;
   
    rawKey = inb(KEYB_DATA_PORT);
    kKeyChar = rawKey;//& 0x80;
 100a872:	a2 84 9c 07 01       	mov    ds:0x1079c84,al
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:46

    __asm__("cli\n");
 100a877:	fa                   	cli    
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:48
    
    switch(rawKey)  
 100a878:	3c 9d                	cmp    al,0x9d
 100a87a:	74 44                	je     100a8c0 <kbd_handler_generic+0x54>
 100a87c:	3c 9d                	cmp    al,0x9d
 100a87e:	77 0e                	ja     100a88e <kbd_handler_generic+0x22>
 100a880:	3c 2a                	cmp    al,0x2a
 100a882:	74 18                	je     100a89c <kbd_handler_generic+0x30>
 100a884:	3c 38                	cmp    al,0x38
 100a886:	74 44                	je     100a8cc <kbd_handler_generic+0x60>
 100a888:	3c 1d                	cmp    al,0x1d
 100a88a:	75 6e                	jne    100a8fa <kbd_handler_generic+0x8e>
 100a88c:	eb 26                	jmp    100a8b4 <kbd_handler_generic+0x48>
 100a88e:	3c b8                	cmp    al,0xb8
 100a890:	74 46                	je     100a8d8 <kbd_handler_generic+0x6c>
 100a892:	3c ba                	cmp    al,0xba
 100a894:	74 4e                	je     100a8e4 <kbd_handler_generic+0x78>
 100a896:	3c aa                	cmp    al,0xaa
 100a898:	75 60                	jne    100a8fa <kbd_handler_generic+0x8e>
 100a89a:	eb 0c                	jmp    100a8a8 <kbd_handler_generic+0x3c>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:50
    {
        case KEY_SHIFT_DN: kKeyStatus[INDEX_SHIFT]=1;break;
 100a89c:	c6 05 34 9c 07 01 01 	mov    BYTE PTR ds:0x1079c34,0x1
 100a8a3:	e9 94 01 00 00       	jmp    100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:51
        case KEY_SHIFT_UP: kKeyStatus[INDEX_SHIFT]=0;break;
 100a8a8:	c6 05 34 9c 07 01 00 	mov    BYTE PTR ds:0x1079c34,0x0
 100a8af:	e9 88 01 00 00       	jmp    100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:52
        case KEY_CTRL_DN: kKeyStatus[INDEX_CTRL]=1;break;
 100a8b4:	c6 05 35 9c 07 01 01 	mov    BYTE PTR ds:0x1079c35,0x1
 100a8bb:	e9 7c 01 00 00       	jmp    100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:53
        case KEY_CTRL_UP: kKeyStatus[INDEX_CTRL]=0;break;
 100a8c0:	c6 05 35 9c 07 01 00 	mov    BYTE PTR ds:0x1079c35,0x0
 100a8c7:	e9 70 01 00 00       	jmp    100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:54
        case KEY_ALT_DN: kKeyStatus[INDEX_ALT]=1;break;
 100a8cc:	c6 05 36 9c 07 01 01 	mov    BYTE PTR ds:0x1079c36,0x1
 100a8d3:	e9 64 01 00 00       	jmp    100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:55
        case KEY_ALT_UP: kKeyStatus[INDEX_ALT]=0;break;
 100a8d8:	c6 05 36 9c 07 01 00 	mov    BYTE PTR ds:0x1079c36,0x0
 100a8df:	e9 58 01 00 00       	jmp    100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:56
        case KEY_CAPSLOCK_UP: kKeyStatus[INDEX_CAPSLOCK]=!kKeyStatus[INDEX_CAPSLOCK];break;
 100a8e4:	0f b6 05 37 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c37
 100a8eb:	84 c0                	test   al,al
 100a8ed:	0f 94 c0             	sete   al
 100a8f0:	a2 37 9c 07 01       	mov    ds:0x1079c37,al
 100a8f5:	e9 42 01 00 00       	jmp    100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:64
//        case MAKE_UP: kKeyStatus[INDEX_UP]=0;break;
//        case MAKE_DOWN: kKeyStatus[INDEX_DOWN]=0;break;
       default:
//printk("%02X",rawKey);
           //changed from if rawkey & 0x80, so that keydown triggers the key being input
           if (rawKey==BREAK_RIGHT || rawKey==BREAK_LEFT || rawKey==BREAK_UP || rawKey==BREAK_DOWN)
 100a8fa:	8d 50 35             	lea    edx,[eax+0x35]
 100a8fd:	f6 c2 fd             	test   dl,0xfd
 100a900:	74 08                	je     100a90a <kbd_handler_generic+0x9e>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:64 (discriminator 1)
 100a902:	8d 50 38             	lea    edx,[eax+0x38]
 100a905:	f6 c2 f7             	test   dl,0xf7
 100a908:	75 24                	jne    100a92e <kbd_handler_generic+0xc2>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:65
               if (kKbdBuffCurrTop<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
 100a90a:	8b 15 60 99 12 00    	mov    edx,DWORD PTR ds:0x129960
 100a910:	81 fa 2f 25 16 00    	cmp    edx,0x16252f
 100a916:	77 16                	ja     100a92e <kbd_handler_generic+0xc2>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:65 (discriminator 1)
 100a918:	0f b6 0d 36 9c 07 01 	movzx  ecx,BYTE PTR ds:0x1079c36
 100a91f:	84 c9                	test   cl,cl
 100a921:	75 0b                	jne    100a92e <kbd_handler_generic+0xc2>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:66
                   *kKbdBuffCurrTop++=rawKey;
 100a923:	8d 4a 01             	lea    ecx,[edx+0x1]
 100a926:	89 0d 60 99 12 00    	mov    DWORD PTR ds:0x129960,ecx
 100a92c:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:67
           if (!(rawKey & 0x80))
 100a92e:	84 c0                	test   al,al
 100a930:	0f 88 06 01 00 00    	js     100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:71
           {
                //rawKey &= 0x7f;
               //printk("%02X",rawKey); 48=up, 50=down
                 if (kKeyStatus[INDEX_SHIFT] || kKeyStatus[INDEX_CAPSLOCK])
 100a936:	0f b6 15 34 9c 07 01 	movzx  edx,BYTE PTR ds:0x1079c34
 100a93d:	84 d2                	test   dl,dl
 100a93f:	75 0b                	jne    100a94c <kbd_handler_generic+0xe0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:71 (discriminator 1)
 100a941:	0f b6 15 37 9c 07 01 	movzx  edx,BYTE PTR ds:0x1079c37
 100a948:	84 d2                	test   dl,dl
 100a94a:	74 0c                	je     100a958 <kbd_handler_generic+0xec>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:73
                 {
                     translatedKeypress=keyboard_map_up[rawKey];
 100a94c:	0f b6 c0             	movzx  eax,al
 100a94f:	0f b6 98 e0 9b 02 01 	movzx  ebx,BYTE PTR [eax+0x1029be0]
 100a956:	eb 0a                	jmp    100a962 <kbd_handler_generic+0xf6>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:76
                 }
                 else
                     translatedKeypress=keyboard_map[rawKey];
 100a958:	0f b6 c0             	movzx  eax,al
 100a95b:	0f b6 98 60 9c 02 01 	movzx  ebx,BYTE PTR [eax+0x1029c60]
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:83
//                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
//                 {
//                      printf("%u, %u, %c\n",kKeyChar, rawKey, translatedKeypress);
//                 }
#endif
                if (kKeyStatus[INDEX_CTRL])
 100a962:	0f b6 05 35 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c35
 100a969:	84 c0                	test   al,al
 100a96b:	74 13                	je     100a980 <kbd_handler_generic+0x114>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:85
                {
                    printk("^");
 100a96d:	83 ec 0c             	sub    esp,0xc
 100a970:	68 e0 76 06 01       	push   0x10676e0
 100a975:	e8 75 f3 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:86
                    translatedKeypress-=32;
 100a97a:	83 eb 20             	sub    ebx,0x20
 100a97d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:89
                }
                //Debug
                if (kKeyStatus[INDEX_ALT] && translatedKeypress==0x6A)
 100a980:	0f b6 05 36 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c36
 100a987:	80 fb 6a             	cmp    bl,0x6a
 100a98a:	75 05                	jne    100a991 <kbd_handler_generic+0x125>
 100a98c:	84 c0                	test   al,al
 100a98e:	74 01                	je     100a991 <kbd_handler_generic+0x125>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:91
                {
                    __asm("int 0x3");
 100a990:	cc                   	int3   
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:93
                }
            if (kKeyStatus[INDEX_ALT] && kKeyStatus[INDEX_CTRL] && translatedKeypress==0xE0)
 100a991:	0f b6 05 36 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c36
 100a998:	84 c0                	test   al,al
 100a99a:	74 2f                	je     100a9cb <kbd_handler_generic+0x15f>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:93 (discriminator 1)
 100a99c:	0f b6 05 35 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c35
 100a9a3:	80 fb e0             	cmp    bl,0xe0
 100a9a6:	75 23                	jne    100a9cb <kbd_handler_generic+0x15f>
 100a9a8:	84 c0                	test   al,al
 100a9aa:	74 1f                	je     100a9cb <kbd_handler_generic+0x15f>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:96
            {
                translatedKeypress=0;
                reboot(false);
 100a9ac:	83 ec 0c             	sub    esp,0xc
 100a9af:	6a 00                	push   0x0
 100a9b1:	e8 98 e9 ff ff       	call   100934e <reboot>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:98
            }
            if (kKeyStatus[INDEX_ALT])
 100a9b6:	0f b6 05 36 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c36
 100a9bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:95
                {
                    __asm("int 0x3");
                }
            if (kKeyStatus[INDEX_ALT] && kKeyStatus[INDEX_CTRL] && translatedKeypress==0xE0)
            {
                translatedKeypress=0;
 100a9c0:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:98
                reboot(false);
            }
            if (kKeyStatus[INDEX_ALT])
 100a9c5:	84 c0                	test   al,al
 100a9c7:	75 69                	jne    100aa32 <kbd_handler_generic+0x1c6>
 100a9c9:	eb 71                	jmp    100aa3c <kbd_handler_generic+0x1d0>
 100a9cb:	0f b6 05 36 9c 07 01 	movzx  eax,BYTE PTR ds:0x1079c36
 100a9d2:	84 c0                	test   al,al
 100a9d4:	74 66                	je     100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:100
            {
                if (translatedKeypress=='c')
 100a9d6:	80 fb 63             	cmp    bl,0x63
 100a9d9:	75 4b                	jne    100aa26 <kbd_handler_generic+0x1ba>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:102
                {
                    printk("%u",*kTicksSinceStart);
 100a9db:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
 100a9e0:	8b 00                	mov    eax,DWORD PTR [eax]
 100a9e2:	83 ec 08             	sub    esp,0x8
 100a9e5:	50                   	push   eax
 100a9e6:	68 e2 76 06 01       	push   0x10676e2
 100a9eb:	e8 ff f2 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:103
                    printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
 100a9f0:	8b 0d 38 97 12 00    	mov    ecx,DWORD PTR ds:0x129738
 100a9f6:	8b 15 3c 97 12 00    	mov    edx,DWORD PTR ds:0x12973c
 100a9fc:	a1 30 97 12 00       	mov    eax,ds:0x129730
 100aa01:	83 c4 10             	add    esp,0x10
 100aa04:	25 00 02 00 00       	and    eax,0x200
 100aa09:	83 f8 01             	cmp    eax,0x1
 100aa0c:	19 c0                	sbb    eax,eax
 100aa0e:	83 e0 20             	and    eax,0x20
 100aa11:	83 c0 49             	add    eax,0x49
 100aa14:	51                   	push   ecx
 100aa15:	52                   	push   edx
 100aa16:	50                   	push   eax
 100aa17:	68 e5 76 06 01       	push   0x10676e5
 100aa1c:	e8 ce f2 ff ff       	call   1009cef <printk>
 100aa21:	83 c4 10             	add    esp,0x10
 100aa24:	eb 16                	jmp    100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:116
                    printk("The time is currently %s", &currTime);
                    cursorMoveTo(65,SYS_VGA_HEIGHT-1);
                    printk("ticks=%d", *kTicksSinceStart);
                    cursorRestorePosition();
                }
*/                if (translatedKeypress=='d')
 100aa26:	80 fb 64             	cmp    bl,0x64
 100aa29:	75 07                	jne    100aa32 <kbd_handler_generic+0x1c6>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:118
                {
                    printDumpedRegs();
 100aa2b:	e8 a6 e6 ff ff       	call   10090d6 <printDumpedRegs>
 100aa30:	eb 0a                	jmp    100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:120
                }
                if (translatedKeypress=='e')
 100aa32:	80 fb 65             	cmp    bl,0x65
 100aa35:	75 05                	jne    100aa3c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:122
                {
                    dumpKernelAddresses();
 100aa37:	e8 53 e9 ff ff       	call   100938f <dumpKernelAddresses>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 100aa3c:	e4 61                	in     al,0x61
 100aa3e:	89 c2                	mov    edx,eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 100aa40:	83 c8 82             	or     eax,0xffffff82
 100aa43:	e6 61                	out    0x61,al
 100aa45:	89 d0                	mov    eax,edx
 100aa47:	83 e0 7f             	and    eax,0x7f
 100aa4a:	83 c8 02             	or     eax,0x2
 100aa4d:	e6 61                	out    0x61,al
kbd_handler_generic():
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:135
    lKeyControlVal |= 0x82;
    outb(KEYB_CTRL_PORT, lKeyControlVal);
    lKeyControlVal &= 0x7f;
    outb(KEYB_CTRL_PORT, lKeyControlVal);
    return;
}
 100aa4f:	83 c4 08             	add    esp,0x8
 100aa52:	5b                   	pop    ebx
 100aa53:	c3                   	ret    

0100aa54 <ih_keyboard_generic>:
ih_keyboard_generic():
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:32
extern volatile uint32_t exceptionSavedESP;
extern volatile uint32_t* kTicksSinceStart;

__attribute__ ((interrupt))
void ih_keyboard_generic(struct interrupt_frame *frame)
{
 100aa54:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:33
    kbd_handler_generic();
 100aa57:	e8 10 fe ff ff       	call   100a86c <kbd_handler_generic>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:35
    return;
}
 100aa5c:	83 c4 0c             	add    esp,0xc
 100aa5f:	c3                   	ret    

0100aa60 <main>:
main():
/home/yogi/src/os/chrisOSKernel/src/kernel.c:32
extern task_t* kKernelTask;
uint32_t saveESP;
/*
 * 
 */
int main(int argc, char** argv) {
 100aa60:	8d 4c 24 04          	lea    ecx,[esp+0x4]
 100aa64:	83 e4 f0             	and    esp,0xfffffff0
 100aa67:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
 100aa6a:	55                   	push   ebp
 100aa6b:	89 e5                	mov    ebp,esp
 100aa6d:	53                   	push   ebx
 100aa6e:	51                   	push   ecx
 100aa6f:	83 ec 3c             	sub    esp,0x3c
/home/yogi/src/os/chrisOSKernel/src/kernel.c:34
    //terminal_clear();
    printk("\nkernel loaded ... \n");
 100aa72:	68 f3 76 06 01       	push   0x10676f3
 100aa77:	e8 73 f2 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:43
        printk("Param %u=%s\n",cnt,argv[cnt]);
        //if (cnt>5)
        //    break;
    }
*/
    printk("Initializing memory management ...\n");
 100aa7c:	c7 04 24 58 29 04 01 	mov    DWORD PTR [esp],0x1042958
 100aa83:	e8 67 f2 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:44
    mmInit();
 100aa88:	e8 3d 07 00 00       	call   100b1ca <mmInit>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:45
    printk("Done initializing memory management.\n\nInitializing malloc ...\n");
 100aa8d:	c7 04 24 7c 29 04 01 	mov    DWORD PTR [esp],0x104297c
 100aa94:	e8 56 f2 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:46
    initMalloc();
 100aa99:	e8 5d 04 00 00       	call   100aefb <initMalloc>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:47
    printk("Done initializing malloc\n\nInitializing task management ...\n");
 100aa9e:	c7 04 24 bc 29 04 01 	mov    DWORD PTR [esp],0x10429bc
 100aaa5:	e8 45 f2 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:48
    taskInit();
 100aaaa:	e8 a5 21 00 00       	call   100cc54 <taskInit>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:49
    printk("Done initializing task management\n\n");
 100aaaf:	c7 04 24 f8 29 04 01 	mov    DWORD PTR [esp],0x10429f8
 100aab6:	e8 34 f2 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:51
    
    int lRetVal=fl_attach_media((fn_diskio_read)ahciBlockingRead28, (fn_diskio_write)ahciBlockingWrite28);
 100aabb:	83 c4 08             	add    esp,0x8
 100aabe:	68 7b 11 00 01       	push   0x100117b
 100aac3:	68 51 0f 00 01       	push   0x1000f51
 100aac8:	e8 4a a0 ff ff       	call   1004b17 <fl_attach_media>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:53

    kKernelTask=getTaskSlot();
 100aacd:	e8 a0 21 00 00       	call   100cc72 <getTaskSlot>
 100aad2:	a3 98 99 12 00       	mov    ds:0x129998,eax
/home/yogi/src/os/chrisOSKernel/src/kernel.c:56
    
    
    char program[40]="/testmainprogramentry";
 100aad7:	c7 45 d0 2f 74 65 73 	mov    DWORD PTR [ebp-0x30],0x7365742f
 100aade:	c7 45 d4 74 6d 61 69 	mov    DWORD PTR [ebp-0x2c],0x69616d74
 100aae5:	c7 45 d8 6e 70 72 6f 	mov    DWORD PTR [ebp-0x28],0x6f72706e
 100aaec:	c7 45 dc 67 72 61 6d 	mov    DWORD PTR [ebp-0x24],0x6d617267
 100aaf3:	c7 45 e0 65 6e 74 72 	mov    DWORD PTR [ebp-0x20],0x72746e65
 100aafa:	c7 45 e4 79 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x79
 100ab01:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
 100ab08:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
 100ab0f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
 100ab16:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOSKernel/src/kernel.c:57
    printk("Loading %s\n",program);
 100ab1d:	83 c4 08             	add    esp,0x8
 100ab20:	8d 5d d0             	lea    ebx,[ebp-0x30]
 100ab23:	53                   	push   ebx
 100ab24:	68 08 77 06 01       	push   0x1067708
 100ab29:	e8 c1 f1 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:58
    process_t* process = createProcess(program,false);
 100ab2e:	83 c4 08             	add    esp,0x8
 100ab31:	6a 00                	push   0x0
 100ab33:	53                   	push   ebx
 100ab34:	e8 03 11 00 00       	call   100bc3c <createProcess>
 100ab39:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/kernel.c:59
    printk("Executing %u %s\n",process->task->kernel, process->path);
 100ab3b:	83 c4 0c             	add    esp,0xc
 100ab3e:	ff 70 0c             	push   DWORD PTR [eax+0xc]
 100ab41:	8b 00                	mov    eax,DWORD PTR [eax]
 100ab43:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
 100ab47:	50                   	push   eax
 100ab48:	68 14 77 06 01       	push   0x1067714
 100ab4d:	e8 9d f1 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:60
    sysExec(process,1,"");
 100ab52:	83 c4 0c             	add    esp,0xc
 100ab55:	68 df 73 06 01       	push   0x10673df
 100ab5a:	6a 01                	push   0x1
 100ab5c:	53                   	push   ebx
 100ab5d:	e8 e6 1d 00 00       	call   100c948 <sysExec>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:95

    printk("ca[0]=0x%08X, *ca[0]=%u\n",ca[0],*ca[0]);
    printk("ca[1]=0x%08X, *ca[1]=%u\n",ca[1],*ca[1]);
    printk("\n");
*/    
    return (0xbad);
 100ab62:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/kernel.c:96
}
 100ab65:	b8 ad 0b 00 00       	mov    eax,0xbad
 100ab6a:	8d 65 f8             	lea    esp,[ebp-0x8]
 100ab6d:	59                   	pop    ecx
 100ab6e:	5b                   	pop    ebx
 100ab6f:	5d                   	pop    ebp
 100ab70:	8d 61 fc             	lea    esp,[ecx-0x4]
 100ab73:	c3                   	ret    

0100ab74 <findEmptyBlock>:
findEmptyBlock():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:18
                      __asm__("mov eax,cr3\n mov %[cr3Val],eax\n":[cr3Val] "=r" (cr3Val));\
                      cr3Val;})

//Returns pointer to first empty block found
sMemInfo* findEmptyBlock()
{
 100ab74:	53                   	push   ebx
 100ab75:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:19
    sMemInfo* mInfo=heapMemoryInfo;
 100ab78:	a1 50 9c 07 01       	mov    eax,ds:0x1079c50
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:22
    sMemInfo* lRetVal;
    
    while (mInfo<heapMemoryInfo+(sizeof(sMemInfo)*1000))
 100ab7d:	8d 90 80 f6 0b 00    	lea    edx,[eax+0xbf680]
 100ab83:	39 d0                	cmp    eax,edx
 100ab85:	73 32                	jae    100abb9 <findEmptyBlock+0x45>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:24
    {
        if (mInfo->next==NULL)
 100ab87:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
 100ab8b:	75 25                	jne    100abb2 <findEmptyBlock+0x3e>
 100ab8d:	eb 06                	jmp    100ab95 <findEmptyBlock+0x21>
 100ab8f:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
 100ab93:	75 1d                	jne    100abb2 <findEmptyBlock+0x3e>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:26
        {
            lRetVal=mInfo+1;
 100ab95:	8d 58 1c             	lea    ebx,[eax+0x1c]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:27
            printd(DEBUG_MEMORY_MANAGEMENT,"findEmptyBlock: Returning block # 0x%08X\n",lRetVal);
 100ab98:	83 ec 04             	sub    esp,0x4
 100ab9b:	53                   	push   ebx
 100ab9c:	68 1c 2a 04 01       	push   0x1042a1c
 100aba1:	68 00 00 01 00       	push   0x10000
 100aba6:	e8 5c f1 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:28
            return lRetVal;
 100abab:	83 c4 10             	add    esp,0x10
 100abae:	89 d8                	mov    eax,ebx
 100abb0:	eb 21                	jmp    100abd3 <findEmptyBlock+0x5f>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:30
        }
         mInfo++;
 100abb2:	83 c0 1c             	add    eax,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:22
sMemInfo* findEmptyBlock()
{
    sMemInfo* mInfo=heapMemoryInfo;
    sMemInfo* lRetVal;
    
    while (mInfo<heapMemoryInfo+(sizeof(sMemInfo)*1000))
 100abb5:	39 d0                	cmp    eax,edx
 100abb7:	75 d6                	jne    100ab8f <findEmptyBlock+0x1b>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:32
            printd(DEBUG_MEMORY_MANAGEMENT,"findEmptyBlock: Returning block # 0x%08X\n",lRetVal);
            return lRetVal;
        }
         mInfo++;
    }
    printd(DEBUG_MEMORY_MANAGEMENT,"findEmptyBlock: No empty block found, returning NULL\n");
 100abb9:	83 ec 08             	sub    esp,0x8
 100abbc:	68 48 2a 04 01       	push   0x1042a48
 100abc1:	68 00 00 01 00       	push   0x10000
 100abc6:	e8 3c f1 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:33
    return NULL;
 100abcb:	83 c4 10             	add    esp,0x10
 100abce:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:34
}
 100abd3:	83 c4 08             	add    esp,0x8
 100abd6:	5b                   	pop    ebx
 100abd7:	c3                   	ret    

0100abd8 <findBlockByMemoryAddress>:
findBlockByMemoryAddress():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:37

sMemInfo* findBlockByMemoryAddress(uintptr_t* address)
{
 100abd8:	53                   	push   ebx
 100abd9:	83 ec 08             	sub    esp,0x8
 100abdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:38
    sMemInfo* mInfo=heapMemoryInfo;
 100abe0:	8b 1d 50 9c 07 01    	mov    ebx,DWORD PTR ds:0x1079c50
 100abe6:	8d 93 80 f6 0b 00    	lea    edx,[ebx+0xbf680]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:41
    do
    {
        if (mInfo->address==address)
 100abec:	3b 43 04             	cmp    eax,DWORD PTR [ebx+0x4]
 100abef:	75 18                	jne    100ac09 <findBlockByMemoryAddress+0x31>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:43
        {
            printd(DEBUG_MEMORY_MANAGEMENT,"findBlockByMemoryAddress: Found block 0x%08X for memory address 0x%08X\n",mInfo,address);
 100abf1:	50                   	push   eax
 100abf2:	53                   	push   ebx
 100abf3:	68 80 2a 04 01       	push   0x1042a80
 100abf8:	68 00 00 01 00       	push   0x10000
 100abfd:	e8 05 f1 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:44
            return (sMemInfo*)mInfo;
 100ac02:	83 c4 10             	add    esp,0x10
 100ac05:	89 d8                	mov    eax,ebx
 100ac07:	eb 0c                	jmp    100ac15 <findBlockByMemoryAddress+0x3d>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:46
        }
        mInfo++;
 100ac09:	83 c3 1c             	add    ebx,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:47
    } while (mInfo<heapMemoryInfo+(sizeof(sMemInfo)*1000));
 100ac0c:	39 d3                	cmp    ebx,edx
 100ac0e:	75 dc                	jne    100abec <findBlockByMemoryAddress+0x14>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:48
    return NULL;
 100ac10:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:49
}
 100ac15:	83 c4 08             	add    esp,0x8
 100ac18:	5b                   	pop    ebx
 100ac19:	c3                   	ret    

0100ac1a <findAvailableBlockBySize>:
findAvailableBlockBySize():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:53

//Returns a block with enough memory to fulfill the request
sMemInfo* findAvailableBlockBySize(uint32_t pSize)
{
 100ac1a:	53                   	push   ebx
 100ac1b:	83 ec 08             	sub    esp,0x8
 100ac1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:54
    sMemInfo* mInfo=heapMemoryInfo;
 100ac22:	a1 50 9c 07 01       	mov    eax,ds:0x1079c50
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:58
    
    //First try finding a block starting at the last block instead of the first
    //Get to the last block
    while (mInfo->next)
 100ac27:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
 100ac2b:	74 11                	je     100ac3e <findAvailableBlockBySize+0x24>
 100ac2d:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:59
        mInfo++;
 100ac2f:	83 c3 1c             	add    ebx,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:58
{
    sMemInfo* mInfo=heapMemoryInfo;
    
    //First try finding a block starting at the last block instead of the first
    //Get to the last block
    while (mInfo->next)
 100ac32:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
 100ac36:	75 f7                	jne    100ac2f <findAvailableBlockBySize+0x15>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:60
        mInfo++;
    while (mInfo>=heapMemoryInfo)
 100ac38:	39 d8                	cmp    eax,ebx
 100ac3a:	76 04                	jbe    100ac40 <findAvailableBlockBySize+0x26>
 100ac3c:	eb 2e                	jmp    100ac6c <findAvailableBlockBySize+0x52>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:54
}

//Returns a block with enough memory to fulfill the request
sMemInfo* findAvailableBlockBySize(uint32_t pSize)
{
    sMemInfo* mInfo=heapMemoryInfo;
 100ac3e:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:62
    //Get to the last block
    while (mInfo->next)
        mInfo++;
    while (mInfo>=heapMemoryInfo)
    {
        if (mInfo->size>=pSize && (mInfo->inUse==false))
 100ac40:	39 53 08             	cmp    DWORD PTR [ebx+0x8],edx
 100ac43:	72 20                	jb     100ac65 <findAvailableBlockBySize+0x4b>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:62 (discriminator 1)
 100ac45:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
 100ac49:	75 1a                	jne    100ac65 <findAvailableBlockBySize+0x4b>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:64
        {
            printd(DEBUG_MEMORY_MANAGEMENT,"findAvailableBlockBySize: Returning block address 0x%08X\n",mInfo);
 100ac4b:	83 ec 04             	sub    esp,0x4
 100ac4e:	53                   	push   ebx
 100ac4f:	68 c8 2a 04 01       	push   0x1042ac8
 100ac54:	68 00 00 01 00       	push   0x10000
 100ac59:	e8 a9 f0 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:65
            return mInfo;
 100ac5e:	89 d8                	mov    eax,ebx
 100ac60:	83 c4 10             	add    esp,0x10
 100ac63:	eb 07                	jmp    100ac6c <findAvailableBlockBySize+0x52>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:67
        }
        mInfo--;
 100ac65:	83 eb 1c             	sub    ebx,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:60
    
    //First try finding a block starting at the last block instead of the first
    //Get to the last block
    while (mInfo->next)
        mInfo++;
    while (mInfo>=heapMemoryInfo)
 100ac68:	39 d8                	cmp    eax,ebx
 100ac6a:	76 d4                	jbe    100ac40 <findAvailableBlockBySize+0x26>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:69
            printd(DEBUG_MEMORY_MANAGEMENT,"findAvailableBlockBySize: Returning block address 0x%08X\n",mInfo);
            return mInfo;
        }
        mInfo--;
    }
}
 100ac6c:	83 c4 08             	add    esp,0x8
 100ac6f:	5b                   	pop    ebx
 100ac70:	c3                   	ret    

0100ac71 <allocateBlockFrom>:
allocateBlockFrom():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:73

//Create a new block with the requested amount of memory, and adjust the old block's size and pointer appropriately
uintptr_t* allocateBlockFrom(sMemInfo* mInfoToAllocateFrom, uint32_t size)
{
 100ac71:	57                   	push   edi
 100ac72:	56                   	push   esi
 100ac73:	53                   	push   ebx
 100ac74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 100ac78:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:74
    sMemInfo* mNewInfo=findEmptyBlock();
 100ac7c:	e8 f3 fe ff ff       	call   100ab74 <findEmptyBlock>
 100ac81:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:77
    sMemInfo* mPriorInfo=mNewInfo-1;
    
    printd(DEBUG_MEMORY_MANAGEMENT,"allocateBlockFrom: findEmptyBlock returned 0x%08X\n",mNewInfo);
 100ac83:	83 ec 04             	sub    esp,0x4
 100ac86:	50                   	push   eax
 100ac87:	68 04 2b 04 01       	push   0x1042b04
 100ac8c:	68 00 00 01 00       	push   0x10000
 100ac91:	e8 71 f0 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:79
    
    mPriorInfo->next=(uintptr_t*)mNewInfo;
 100ac96:	89 5b fc             	mov    DWORD PTR [ebx-0x4],ebx
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:82
    
    //Set up the new sMemInfo
    mNewInfo->prev=(uintptr_t*)mPriorInfo;
 100ac99:	8d 43 e4             	lea    eax,[ebx-0x1c]
 100ac9c:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:83
    mNewInfo->address=mInfoToAllocateFrom->address;
 100ac9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
 100aca1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:84
    mNewInfo->size=size;
 100aca4:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:85
    mNewInfo->inUse=true;
 100aca7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:86
    mNewInfo->cr3=CURRENT_CR3;
 100acab:	0f 20 d8             	mov    eax,cr3
 100acae:	89 c0                	mov    eax,eax
 100acb0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:89
    //mNewInfo pid and next don't get set
    
    mInfoToAllocateFrom->address+=size;
 100acb3:	01 7e 04             	add    DWORD PTR [esi+0x4],edi
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:90
    mInfoToAllocateFrom->size-=size;
 100acb6:	29 7e 08             	sub    DWORD PTR [esi+0x8],edi
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:91
    return (uintptr_t*)mNewInfo->address;
 100acb9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
 100acbc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:92
}
 100acbf:	5b                   	pop    ebx
 100acc0:	5e                   	pop    esi
 100acc1:	5f                   	pop    edi
 100acc2:	c3                   	ret    

0100acc3 <allocPages>:
allocPages():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:95

void* allocPages(uint32_t size)
{
 100acc3:	56                   	push   esi
 100acc4:	53                   	push   ebx
 100acc5:	83 ec 04             	sub    esp,0x4
 100acc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:98
    uint32_t newSize=size;

    if (newSize%PAGE_SIZE)
 100accc:	89 d8                	mov    eax,ebx
 100acce:	25 ff 0f 00 00       	and    eax,0xfff
 100acd3:	74 1e                	je     100acf3 <allocPages+0x30>
 100acd5:	8d b3 00 10 00 00    	lea    esi,[ebx+0x1000]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:100
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100acdb:	29 c6                	sub    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:101
        printd(DEBUG_MEMORY_MANAGEMENT,"allocPages: Size adjusted from %u to %u\n",size,newSize);
 100acdd:	56                   	push   esi
 100acde:	53                   	push   ebx
 100acdf:	68 38 2b 04 01       	push   0x1042b38
 100ace4:	68 00 00 01 00       	push   0x10000
 100ace9:	e8 19 f0 ff ff       	call   1009d07 <printd>
 100acee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:100
{
    uint32_t newSize=size;

    if (newSize%PAGE_SIZE)
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100acf1:	89 f3                	mov    ebx,esi
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:104
        printd(DEBUG_MEMORY_MANAGEMENT,"allocPages: Size adjusted from %u to %u\n",size,newSize);
    }
    uintptr_t* lRetVal;
    sMemInfo* block=findAvailableBlockBySize(newSize);
 100acf3:	83 ec 0c             	sub    esp,0xc
 100acf6:	53                   	push   ebx
 100acf7:	e8 1e ff ff ff       	call   100ac1a <findAvailableBlockBySize>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:105
    block->inUse=true;
 100acfc:	c6 40 0c 01          	mov    BYTE PTR [eax+0xc],0x1
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:106
    if ( block->size > newSize)
 100ad00:	83 c4 10             	add    esp,0x10
 100ad03:	3b 58 08             	cmp    ebx,DWORD PTR [eax+0x8]
 100ad06:	73 0f                	jae    100ad17 <allocPages+0x54>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:107
       lRetVal=allocateBlockFrom(block,newSize);
 100ad08:	83 ec 08             	sub    esp,0x8
 100ad0b:	53                   	push   ebx
 100ad0c:	50                   	push   eax
 100ad0d:	e8 5f ff ff ff       	call   100ac71 <allocateBlockFrom>
 100ad12:	83 c4 10             	add    esp,0x10
 100ad15:	eb 03                	jmp    100ad1a <allocPages+0x57>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:109
    else
        lRetVal=block->address;
 100ad17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:111
    return lRetVal;
}
 100ad1a:	83 c4 04             	add    esp,0x4
 100ad1d:	5b                   	pop    ebx
 100ad1e:	5e                   	pop    esi
 100ad1f:	c3                   	ret    

0100ad20 <allocPagesAndMapI>:
allocPagesAndMapI():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:114

void* allocPagesAndMapI(uintptr_t cr3,uint32_t size)
{
 100ad20:	55                   	push   ebp
 100ad21:	57                   	push   edi
 100ad22:	56                   	push   esi
 100ad23:	53                   	push   ebx
 100ad24:	83 ec 0c             	sub    esp,0xc
 100ad27:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:118
    uintptr_t* phys;
    uint32_t newSize=size;

    if (newSize%PAGE_SIZE)
 100ad2b:	89 d8                	mov    eax,ebx
 100ad2d:	25 ff 0f 00 00       	and    eax,0xfff
 100ad32:	74 1e                	je     100ad52 <allocPagesAndMapI+0x32>
 100ad34:	8d b3 00 10 00 00    	lea    esi,[ebx+0x1000]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:120
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100ad3a:	29 c6                	sub    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:121
        printd(DEBUG_MEMORY_MANAGEMENT,"allocPagesAndMap: Size adjusted from %u to %u\n",size,newSize);
 100ad3c:	56                   	push   esi
 100ad3d:	53                   	push   ebx
 100ad3e:	68 64 2b 04 01       	push   0x1042b64
 100ad43:	68 00 00 01 00       	push   0x10000
 100ad48:	e8 ba ef ff ff       	call   1009d07 <printd>
 100ad4d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:120
    uintptr_t* phys;
    uint32_t newSize=size;

    if (newSize%PAGE_SIZE)
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100ad50:	89 f3                	mov    ebx,esi
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:124
        printd(DEBUG_MEMORY_MANAGEMENT,"allocPagesAndMap: Size adjusted from %u to %u\n",size,newSize);
    }
    
    phys=allocPages(newSize);
 100ad52:	83 ec 0c             	sub    esp,0xc
 100ad55:	53                   	push   ebx
 100ad56:	e8 68 ff ff ff       	call   100acc3 <allocPages>
 100ad5b:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:125
    printd("allocPagesAndMap: allocPage'd 0x%08X bytes at 0x%08X\n",newSize,phys);
 100ad5d:	83 c4 0c             	add    esp,0xc
 100ad60:	50                   	push   eax
 100ad61:	53                   	push   ebx
 100ad62:	68 94 2b 04 01       	push   0x1042b94
 100ad67:	e8 9b ef ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:127
    
    uintptr_t virtualAddress=pagingFindAvailableAddressToMapTo(cr3,newSize/PAGE_SIZE);
 100ad6c:	89 dd                	mov    ebp,ebx
 100ad6e:	c1 ed 0c             	shr    ebp,0xc
 100ad71:	83 c4 08             	add    esp,0x8
 100ad74:	55                   	push   ebp
 100ad75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 100ad79:	e8 37 0a 00 00       	call   100b7b5 <pagingFindAvailableAddressToMapTo>
 100ad7e:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:129
    //Map page into cr3 address space
    pagingMapPageCount(cr3,virtualAddress,phys,newSize/PAGE_SIZE,0x7); //CLR 02/25/2017 - changed map page to map page count
 100ad80:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
 100ad87:	55                   	push   ebp
 100ad88:	57                   	push   edi
 100ad89:	50                   	push   eax
 100ad8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100ad8e:	e8 63 0c 00 00       	call   100b9f6 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:130
    printd(DEBUG_MEMORY_MANAGEMENT,"allocPagesAndMap: Mapped v=0x%08X to p=0x%08X\n",virtualAddress,phys);
 100ad93:	83 c4 20             	add    esp,0x20
 100ad96:	57                   	push   edi
 100ad97:	56                   	push   esi
 100ad98:	68 cc 2b 04 01       	push   0x1042bcc
 100ad9d:	68 00 00 01 00       	push   0x10000
 100ada2:	e8 60 ef ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:132
    //Zero out the memory
    pagingMapPageCount(KERNEL_PAGE_DIR_ADDRESS,virtualAddress | 0xC0000000,phys,newSize/PAGE_SIZE,0x7); //CLR 02/25/2017 - changed map page to map page count
 100ada7:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
 100adae:	55                   	push   ebp
 100adaf:	57                   	push   edi
 100adb0:	89 f0                	mov    eax,esi
 100adb2:	0d 00 00 00 c0       	or     eax,0xc0000000
 100adb7:	50                   	push   eax
 100adb8:	68 00 a0 4b 00       	push   0x4ba000
 100adbd:	e8 34 0c 00 00       	call   100b9f6 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:133
    printd(DEBUG_MEMORY_MANAGEMENT,"allocPagesAndMap: Zeroing out page(s) at 0x%08X for 0x%08X\n",phys,newSize);
 100adc2:	83 c4 20             	add    esp,0x20
 100adc5:	53                   	push   ebx
 100adc6:	57                   	push   edi
 100adc7:	68 fc 2b 04 01       	push   0x1042bfc
 100adcc:	68 00 00 01 00       	push   0x10000
 100add1:	e8 31 ef ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:134
    memset(virtualAddress,0,newSize);
 100add6:	83 c4 0c             	add    esp,0xc
 100add9:	53                   	push   ebx
 100adda:	6a 00                	push   0x0
 100addc:	56                   	push   esi
 100addd:	e8 51 e1 ff ff       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:135
    printd(DEBUG_MEMORY_MANAGEMENT,"allocPagesAndMap: Returning address 0x%08X\n",phys);
 100ade2:	83 c4 0c             	add    esp,0xc
 100ade5:	57                   	push   edi
 100ade6:	68 38 2c 04 01       	push   0x1042c38
 100adeb:	68 00 00 01 00       	push   0x10000
 100adf0:	e8 12 ef ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:136
    return virtualAddress & 0xFFFFF000;
 100adf5:	89 f0                	mov    eax,esi
 100adf7:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:137
}
 100adfc:	83 c4 1c             	add    esp,0x1c
 100adff:	5b                   	pop    ebx
 100ae00:	5e                   	pop    esi
 100ae01:	5f                   	pop    edi
 100ae02:	5d                   	pop    ebp
 100ae03:	c3                   	ret    

0100ae04 <allocProcessPages>:
allocProcessPages():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:140

void* allocProcessPages(uintptr_t cr3, uint32_t size)
{
 100ae04:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:141
    return allocPagesAndMapI(cr3,size);
 100ae07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100ae0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100ae0f:	e8 0c ff ff ff       	call   100ad20 <allocPagesAndMapI>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:142
}
 100ae14:	83 c4 1c             	add    esp,0x1c
 100ae17:	c3                   	ret    

0100ae18 <allocPagesAndMap>:
allocPagesAndMap():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:145

void* allocPagesAndMap(uint32_t size)
{
 100ae18:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:146
    return allocPagesAndMapI(CURRENT_CR3, size);
 100ae1b:	0f 20 d8             	mov    eax,cr3
 100ae1e:	89 c0                	mov    eax,eax
 100ae20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100ae24:	50                   	push   eax
 100ae25:	e8 f6 fe ff ff       	call   100ad20 <allocPagesAndMapI>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:147
}
 100ae2a:	83 c4 1c             	add    esp,0x1c
 100ae2d:	c3                   	ret    

0100ae2e <freePage>:
freePage():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:150

void freePage(void* address)
{
 100ae2e:	53                   	push   ebx
 100ae2f:	83 ec 14             	sub    esp,0x14
 100ae32:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:151
    sMemInfo* mInfo = findBlockByMemoryAddress(address);
 100ae36:	53                   	push   ebx
 100ae37:	e8 9c fd ff ff       	call   100abd8 <findBlockByMemoryAddress>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:152
    if (mInfo!=NULL)
 100ae3c:	83 c4 10             	add    esp,0x10
 100ae3f:	85 c0                	test   eax,eax
 100ae41:	74 1a                	je     100ae5d <freePage+0x2f>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:154
    {
        mInfo->inUse=false;
 100ae43:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:155
        printd(DEBUG_MEMORY_MANAGEMENT,"Freed block 0x%08x for memory address 0x%08x\n",mInfo,address);
 100ae47:	53                   	push   ebx
 100ae48:	50                   	push   eax
 100ae49:	68 64 2c 04 01       	push   0x1042c64
 100ae4e:	68 00 00 01 00       	push   0x10000
 100ae53:	e8 af ee ff ff       	call   1009d07 <printd>
 100ae58:	83 c4 10             	add    esp,0x10
 100ae5b:	eb 16                	jmp    100ae73 <freePage+0x45>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:158
    }
    else
        printd(DEBUG_MEMORY_MANAGEMENT,"free: Could not find memory block for 0x%08X to free, doing nothing\n",address);
 100ae5d:	83 ec 04             	sub    esp,0x4
 100ae60:	53                   	push   ebx
 100ae61:	68 94 2c 04 01       	push   0x1042c94
 100ae66:	68 00 00 01 00       	push   0x10000
 100ae6b:	e8 97 ee ff ff       	call   1009d07 <printd>
 100ae70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:159
}
 100ae73:	83 c4 08             	add    esp,0x8
 100ae76:	5b                   	pop    ebx
 100ae77:	c3                   	ret    

0100ae78 <mallocA1k>:
mallocA1k():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:166
uintptr_t* mallocA1k(uint32_t size)
{
    uintptr_t* lRetVal=0;
    
    return lRetVal;
}
 100ae78:	b8 00 00 00 00       	mov    eax,0x0
 100ae7d:	c3                   	ret    

0100ae7e <memAvailable>:
memAvailable():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:171

uint32_t memAvailable()
{
    uint32_t lRetVal;
    sMemInfo* mInfo=heapMemoryInfo;
 100ae7e:	8b 15 50 9c 07 01    	mov    edx,DWORD PTR ds:0x1079c50
 100ae84:	8d 8a 80 f6 0b 00    	lea    ecx,[edx+0xbf680]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:175

    do
    {
        if (!mInfo->inUse)
 100ae8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
 100ae8e:	75 03                	jne    100ae93 <memAvailable+0x15>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:176
            lRetVal+=mInfo->size;
 100ae90:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:177
        mInfo++;
 100ae93:	83 c2 1c             	add    edx,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:178
    } while (mInfo<heapMemoryInfo+(sizeof(sMemInfo)*1000));
 100ae96:	39 ca                	cmp    edx,ecx
 100ae98:	75 f0                	jne    100ae8a <memAvailable+0xc>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:180
    return lRetVal;
}
 100ae9a:	f3 c3                	repz ret 

0100ae9c <initHeapPagePtr>:
initHeapPagePtr():
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:40
    kHeapPagePtr->prev=NO_PREV_HEAP_PTR;
    initHeapPagePtr(kHeapPagePtr);
}

void initHeapPagePtr(heapPtrPage* pagePtr)
{
 100ae9c:	53                   	push   ebx
 100ae9d:	83 ec 08             	sub    esp,0x8
 100aea0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:41
    printd(DEBUG_MALLOC,"initHeapPagePtr Initializing pointer page @ 0x%08X, 0x%08X pointers\n",pagePtr,POINTERS_PER_HEAP_PTR_PAGE);
 100aea4:	68 ff 01 00 00       	push   0x1ff
 100aea9:	53                   	push   ebx
 100aeaa:	68 dc 2c 04 01       	push   0x1042cdc
 100aeaf:	68 00 00 08 00       	push   0x80000
 100aeb4:	e8 4e ee ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:42
    pagePtr->next=NO_NEXT_HEAP_PTR;
 100aeb9:	c7 83 fc 0f 00 00 ff 	mov    DWORD PTR [ebx+0xffc],0xffffffff
 100aec0:	ff ff ff 
 100aec3:	8d 43 04             	lea    eax,[ebx+0x4]
 100aec6:	8d 93 fc 0f 00 00    	lea    edx,[ebx+0xffc]
 100aecc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:45 (discriminator 3)
    for (int cnt=0;cnt<(int)(POINTERS_PER_HEAP_PTR_PAGE);cnt++)
    {
        pagePtr->ptrs[cnt].address=NULL;
 100aecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:46 (discriminator 3)
        pagePtr->ptrs[cnt].size=0;
 100aed5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
 100aedc:	83 c0 08             	add    eax,0x8
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:43 (discriminator 3)

void initHeapPagePtr(heapPtrPage* pagePtr)
{
    printd(DEBUG_MALLOC,"initHeapPagePtr Initializing pointer page @ 0x%08X, 0x%08X pointers\n",pagePtr,POINTERS_PER_HEAP_PTR_PAGE);
    pagePtr->next=NO_NEXT_HEAP_PTR;
    for (int cnt=0;cnt<(int)(POINTERS_PER_HEAP_PTR_PAGE);cnt++)
 100aedf:	39 d0                	cmp    eax,edx
 100aee1:	75 ec                	jne    100aecf <initHeapPagePtr+0x33>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:48
    {
        pagePtr->ptrs[cnt].address=NULL;
        pagePtr->ptrs[cnt].size=0;
    }
    printd(DEBUG_MALLOC,"initHeapPagePtr Done\n",pagePtr);
 100aee3:	83 ec 04             	sub    esp,0x4
 100aee6:	53                   	push   ebx
 100aee7:	68 fc 77 06 01       	push   0x10677fc
 100aeec:	68 00 00 08 00       	push   0x80000
 100aef1:	e8 11 ee ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:49
}
 100aef6:	83 c4 18             	add    esp,0x18
 100aef9:	5b                   	pop    ebx
 100aefa:	c3                   	ret    

0100aefb <initMalloc>:
initMalloc():
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:33
                      cr3Val;})

void initHeapPagePtr(heapPtrPage* pagePtr);

void initMalloc()
{
 100aefb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:34
    kHeapPagePtr = allocPagesAndMap(sizeof(heapPtrPage));
 100aefe:	68 00 10 00 00       	push   0x1000
 100af03:	e8 10 ff ff ff       	call   100ae18 <allocPagesAndMap>
 100af08:	a3 40 9c 07 01       	mov    ds:0x1079c40,eax
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:35
    kHeapPagePtr->prev=NO_PREV_HEAP_PTR;
 100af0d:	c7 00 fe ff ff ff    	mov    DWORD PTR [eax],0xfffffffe
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:36
    initHeapPagePtr(kHeapPagePtr);
 100af13:	83 c4 04             	add    esp,0x4
 100af16:	ff 35 40 9c 07 01    	push   DWORD PTR ds:0x1079c40
 100af1c:	e8 7b ff ff ff       	call   100ae9c <initHeapPagePtr>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:37
}
 100af21:	83 c4 1c             	add    esp,0x1c
 100af24:	c3                   	ret    

0100af25 <findFreeMallocPointer>:
findFreeMallocPointer():
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:52
    }
    printd(DEBUG_MALLOC,"initHeapPagePtr Done\n",pagePtr);
}

void* findFreeMallocPointer()
{
 100af25:	56                   	push   esi
 100af26:	53                   	push   ebx
 100af27:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:53
    heapPtrPage* ptrPg=kHeapPagePtr;
 100af2a:	8b 35 40 9c 07 01    	mov    esi,DWORD PTR ds:0x1079c40
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:58
    heapPtrPage* newPtrPage;

    while (1==1)
    {
        printd(DEBUG_MALLOC,"findFreeMallocPointer: Scanning for a free memory pointer\n");
 100af30:	83 ec 08             	sub    esp,0x8
 100af33:	68 24 2d 04 01       	push   0x1042d24
 100af38:	68 00 00 08 00       	push   0x80000
 100af3d:	e8 c5 ed ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:60
        for (int cnt=0;cnt<(int)(POINTERS_PER_HEAP_PTR_PAGE);cnt++)
        if (ptrPg->ptrs[cnt].address==NULL)
 100af42:	83 c4 10             	add    esp,0x10
 100af45:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
 100af49:	74 11                	je     100af5c <findFreeMallocPointer+0x37>
 100af4b:	bb 01 00 00 00       	mov    ebx,0x1
 100af50:	83 7c de 04 00       	cmp    DWORD PTR [esi+ebx*8+0x4],0x0
 100af55:	75 0f                	jne    100af66 <findFreeMallocPointer+0x41>
 100af57:	e9 8c 00 00 00       	jmp    100afe8 <findFreeMallocPointer+0xc3>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:59
    heapPtrPage* newPtrPage;

    while (1==1)
    {
        printd(DEBUG_MALLOC,"findFreeMallocPointer: Scanning for a free memory pointer\n");
        for (int cnt=0;cnt<(int)(POINTERS_PER_HEAP_PTR_PAGE);cnt++)
 100af5c:	bb 00 00 00 00       	mov    ebx,0x0
 100af61:	e9 82 00 00 00       	jmp    100afe8 <findFreeMallocPointer+0xc3>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:59 (discriminator 2)
 100af66:	83 c3 01             	add    ebx,0x1
 100af69:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
 100af6f:	75 df                	jne    100af50 <findFreeMallocPointer+0x2b>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:67
            printd(DEBUG_MALLOC,"findFreeMallocPointer: Found memory pointer on page 0 (0x%08X)\n",ptrPg);
            return &ptrPg->ptrs[cnt];
        }
        
        //If we've reached the last memory pointer on the page
        if (ptrPg->next==NO_NEXT_HEAP_PTR)
 100af71:	83 be fc 0f 00 00 ff 	cmp    DWORD PTR [esi+0xffc],0xffffffff
 100af78:	75 48                	jne    100afc2 <findFreeMallocPointer+0x9d>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:69
        {
            printd(DEBUG_MALLOC,"No next heapPtrPage, creating one\n",ptrPg->next);
 100af7a:	83 ec 04             	sub    esp,0x4
 100af7d:	6a ff                	push   0xffffffff
 100af7f:	68 a0 2d 04 01       	push   0x1042da0
 100af84:	68 00 00 08 00       	push   0x80000
 100af89:	e8 79 ed ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:71
            //Create a new page and link it to the existing one
            newPtrPage=allocPagesAndMap(sizeof(heapPtrPage));
 100af8e:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
 100af95:	e8 7e fe ff ff       	call   100ae18 <allocPagesAndMap>
 100af9a:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:72
            initHeapPagePtr(newPtrPage);
 100af9c:	89 04 24             	mov    DWORD PTR [esp],eax
 100af9f:	e8 f8 fe ff ff       	call   100ae9c <initHeapPagePtr>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:73
            ptrPg->next=newPtrPage;
 100afa4:	89 9e fc 0f 00 00    	mov    DWORD PTR [esi+0xffc],ebx
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:74
            newPtrPage->prev=ptrPg;
 100afaa:	89 33                	mov    DWORD PTR [ebx],esi
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:75
            printd(DEBUG_MALLOC,"Initialized new heapPtrPage @ 0x%08X\n\n",newPtrPage);
 100afac:	83 c4 0c             	add    esp,0xc
 100afaf:	53                   	push   ebx
 100afb0:	68 c4 2d 04 01       	push   0x1042dc4
 100afb5:	68 00 00 08 00       	push   0x80000
 100afba:	e8 48 ed ff ff       	call   1009d07 <printd>
 100afbf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:77
        }
        printd(DEBUG_MALLOC,"Moving to next heapPtrPage @ 0x%08X\n",ptrPg->next);
 100afc2:	83 ec 04             	sub    esp,0x4
 100afc5:	ff b6 fc 0f 00 00    	push   DWORD PTR [esi+0xffc]
 100afcb:	68 ec 2d 04 01       	push   0x1042dec
 100afd0:	68 00 00 08 00       	push   0x80000
 100afd5:	e8 2d ed ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:78
        ptrPg=(heapPtrPage*)ptrPg->next;
 100afda:	8b b6 fc 0f 00 00    	mov    esi,DWORD PTR [esi+0xffc]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:79
    }
 100afe0:	83 c4 10             	add    esp,0x10
 100afe3:	e9 48 ff ff ff       	jmp    100af30 <findFreeMallocPointer+0xb>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:62
    {
        printd(DEBUG_MALLOC,"findFreeMallocPointer: Scanning for a free memory pointer\n");
        for (int cnt=0;cnt<(int)(POINTERS_PER_HEAP_PTR_PAGE);cnt++)
        if (ptrPg->ptrs[cnt].address==NULL)
        {
            printd(DEBUG_MALLOC,"findFreeMallocPointer: Found memory pointer on page 0 (0x%08X)\n",ptrPg);
 100afe8:	83 ec 04             	sub    esp,0x4
 100afeb:	56                   	push   esi
 100afec:	68 60 2d 04 01       	push   0x1042d60
 100aff1:	68 00 00 08 00       	push   0x80000
 100aff6:	e8 0c ed ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:63
            return &ptrPg->ptrs[cnt];
 100affb:	8d 44 de 04          	lea    eax,[esi+ebx*8+0x4]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:81
        }
        printd(DEBUG_MALLOC,"Moving to next heapPtrPage @ 0x%08X\n",ptrPg->next);
        ptrPg=(heapPtrPage*)ptrPg->next;
    }
    panic("findFreeMallocPointer: Should not have gotten to this point");
}
 100afff:	83 c4 14             	add    esp,0x14
 100b002:	5b                   	pop    ebx
 100b003:	5e                   	pop    esi
 100b004:	c3                   	ret    

0100b005 <allocateMemoryToProcess>:
allocateMemoryToProcess():
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:84

void allocateMemoryToProcess(heapPtr* ptr, size_t size, bool isKernel)
{
 100b005:	56                   	push   esi
 100b006:	53                   	push   ebx
 100b007:	83 ec 04             	sub    esp,0x4
 100b00a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 100b00e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:90
    uint32_t newSize=size;
    uint32_t* allocdPage;
    
    //While we are using allocPages, we need to adjust the size to a multiple of 4096
    //*******************************************************************************
    if (newSize%PAGE_SIZE)
 100b012:	89 c2                	mov    edx,eax
 100b014:	81 e2 ff 0f 00 00    	and    edx,0xfff
 100b01a:	74 1e                	je     100b03a <allocateMemoryToProcess+0x35>
 100b01c:	8d b0 00 10 00 00    	lea    esi,[eax+0x1000]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:92
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100b022:	29 d6                	sub    esi,edx
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:93
        printd(DEBUG_MALLOC,"aMTP: Size adjusted from %u to %u\n",size,newSize);
 100b024:	56                   	push   esi
 100b025:	50                   	push   eax
 100b026:	68 14 2e 04 01       	push   0x1042e14
 100b02b:	68 00 00 08 00       	push   0x80000
 100b030:	e8 d2 ec ff ff       	call   1009d07 <printd>
 100b035:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:92
    
    //While we are using allocPages, we need to adjust the size to a multiple of 4096
    //*******************************************************************************
    if (newSize%PAGE_SIZE)
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100b038:	89 f0                	mov    eax,esi
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:96
        printd(DEBUG_MALLOC,"aMTP: Size adjusted from %u to %u\n",size,newSize);
    }
    //*******************************************************************************
    allocdPage=allocPagesAndMap(newSize);
 100b03a:	83 ec 0c             	sub    esp,0xc
 100b03d:	50                   	push   eax
 100b03e:	e8 d5 fd ff ff       	call   100ae18 <allocPagesAndMap>
 100b043:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:97
    printd(DEBUG_MALLOC,"aMTP: Used allocPagesAndMap to allocate 0x%08X bytes at 0x%08X\n",ptr->size,allocdPage);
 100b045:	50                   	push   eax
 100b046:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 100b049:	68 38 2e 04 01       	push   0x1042e38
 100b04e:	68 00 00 08 00       	push   0x80000
 100b053:	e8 af ec ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:99
    uintptr_t virtualAddress=allocdPage;  //=pagingFindAvailableAddressToMapTo(CURRENT_CR3,newSize/PAGE_SIZE);
   ptr->address=virtualAddress;
 100b058:	89 33                	mov    DWORD PTR [ebx],esi
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:100
}
 100b05a:	83 c4 24             	add    esp,0x24
 100b05d:	5b                   	pop    ebx
 100b05e:	5e                   	pop    esi
 100b05f:	c3                   	ret    

0100b060 <malloc>:
malloc():
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:104


void* malloc(size_t size)
{
 100b060:	57                   	push   edi
 100b061:	56                   	push   esi
 100b062:	53                   	push   ebx
 100b063:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:105
    uint32_t cs=getCS()>>3;
 100b067:	e8 e2 4f ff ff       	call   100004e <getCS>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:106
    bool isKernel=(bootGdt[cs].access & 0x60)==0x0;
 100b06c:	c1 e8 03             	shr    eax,0x3
 100b06f:	8b 15 84 99 12 00    	mov    edx,DWORD PTR ds:0x129984
 100b075:	f6 44 c2 05 60       	test   BYTE PTR [edx+eax*8+0x5],0x60
 100b07a:	0f 94 c0             	sete   al
 100b07d:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:110
    
    heapPtr* ptr;
    //First find a page to place the memory pointer on
    ptr=findFreeMallocPointer();
 100b07f:	e8 a1 fe ff ff       	call   100af25 <findFreeMallocPointer>
 100b084:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:113
    //Next get a memory address to point to and map the memory into the process
    
    ptr->address=0;
 100b086:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:114
    ptr->size=size;
 100b08c:	89 78 04             	mov    DWORD PTR [eax+0x4],edi
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:115
    allocateMemoryToProcess(ptr,size,isKernel);
 100b08f:	83 ec 04             	sub    esp,0x4
 100b092:	89 f0                	mov    eax,esi
 100b094:	0f b6 f0             	movzx  esi,al
 100b097:	56                   	push   esi
 100b098:	57                   	push   edi
 100b099:	53                   	push   ebx
 100b09a:	e8 66 ff ff ff       	call   100b005 <allocateMemoryToProcess>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:116
    return ptr->address;
 100b09f:	8b 03                	mov    eax,DWORD PTR [ebx]
 100b0a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:117
}
 100b0a4:	5b                   	pop    ebx
 100b0a5:	5e                   	pop    esi
 100b0a6:	5f                   	pop    edi
 100b0a7:	c3                   	ret    

0100b0a8 <mmInitHeapTracking>:
mmInitHeapTracking():
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:36
uint32_t kernelPoolMemorySize=1400000;   //20 MB kernel memory

sMemInfo* heapMemoryInfo;

void mmInitHeapTracking()
{
 100b0a8:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:37
    heapMemoryInfo=kmmHeapMemoryBaseAddress;
 100b0ab:	a1 84 9a 12 00       	mov    eax,ds:0x129a84
 100b0b0:	a3 50 9c 07 01       	mov    ds:0x1079c50,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:38
    printd(DEBUG_MEMORY_MANAGEMENT,"Assigning heapMemoryInfo address of 0x%08X\n",heapMemoryInfo);
 100b0b5:	50                   	push   eax
 100b0b6:	68 78 2e 04 01       	push   0x1042e78
 100b0bb:	68 00 00 01 00       	push   0x10000
 100b0c0:	e8 42 ec ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:42
    
    kmmHeapMemoryBaseAddress += sizeof(sMemInfo)*1000;
    kmmHeapMemoryBaseAddress += 0x1000;
    kmmHeapMemoryBaseAddress &= 0xFFFFF000;
 100b0c5:	a1 84 9a 12 00       	mov    eax,ds:0x129a84
 100b0ca:	05 60 7d 00 00       	add    eax,0x7d60
 100b0cf:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b0d4:	a3 84 9a 12 00       	mov    ds:0x129a84,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:43
    kmmHeapMemoryTotal-= sizeof(sMemInfo)*1000; 
 100b0d9:	81 2d 88 9a 12 00 60 	sub    DWORD PTR ds:0x129a88,0x6d60
 100b0e0:	6d 00 00 
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:44
    printd(DEBUG_MEMORY_MANAGEMENT,"heapMemoryInfo = 0x%08X\n",heapMemoryInfo);
 100b0e3:	83 c4 0c             	add    esp,0xc
 100b0e6:	ff 35 50 9c 07 01    	push   DWORD PTR ds:0x1079c50
 100b0ec:	68 12 78 06 01       	push   0x1067812
 100b0f1:	68 00 00 01 00       	push   0x10000
 100b0f6:	e8 0c ec ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:45
    printd(DEBUG_MEMORY_MANAGEMENT,"Allocating 0x%08X bytes to memory block tracking\n",sizeof(sMemInfo)*1000);
 100b0fb:	83 c4 0c             	add    esp,0xc
 100b0fe:	68 60 6d 00 00       	push   0x6d60
 100b103:	68 a4 2e 04 01       	push   0x1042ea4
 100b108:	68 00 00 01 00       	push   0x10000
 100b10d:	e8 f5 eb ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:46
    printd(DEBUG_MEMORY_MANAGEMENT,"User memory base adjusted to 0x%08X\n",kmmHeapMemoryBaseAddress);
 100b112:	83 c4 0c             	add    esp,0xc
 100b115:	ff 35 84 9a 12 00    	push   DWORD PTR ds:0x129a84
 100b11b:	68 d8 2e 04 01       	push   0x1042ed8
 100b120:	68 00 00 01 00       	push   0x10000
 100b125:	e8 dd eb ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:47
    printd(DEBUG_MEMORY_MANAGEMENT,"User memory size adjusted to 0x%08X\n",kmmHeapMemoryTotal);
 100b12a:	83 c4 0c             	add    esp,0xc
 100b12d:	ff 35 88 9a 12 00    	push   DWORD PTR ds:0x129a88
 100b133:	68 00 2f 04 01       	push   0x1042f00
 100b138:	68 00 00 01 00       	push   0x10000
 100b13d:	e8 c5 eb ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:49

    heapMemoryInfo->address=kmmHeapMemoryBaseAddress;
 100b142:	a1 50 9c 07 01       	mov    eax,ds:0x1079c50
 100b147:	8b 15 84 9a 12 00    	mov    edx,DWORD PTR ds:0x129a84
 100b14d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:50
    heapMemoryInfo->size=kmmHeapMemoryTotal;
 100b150:	8b 15 88 9a 12 00    	mov    edx,DWORD PTR ds:0x129a88
 100b156:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:51
    heapMemoryInfo->next=NULL;
 100b159:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:52
    heapMemoryInfo->prev=NULL;
 100b160:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 100b166:	83 c4 10             	add    esp,0x10
 100b169:	b8 1c 00 00 00       	mov    eax,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:54
    
    for (int cnt=1;cnt<1000;cnt++)
 100b16e:	ba 01 00 00 00       	mov    edx,0x1
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:56
    {
        heapMemoryInfo[cnt].address=0;
 100b173:	89 c1                	mov    ecx,eax
 100b175:	03 0d 50 9c 07 01    	add    ecx,DWORD PTR ds:0x1079c50
 100b17b:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:57
        heapMemoryInfo[cnt].prev=NULL;
 100b182:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:58
        if (cnt<999)
 100b188:	81 fa e6 03 00 00    	cmp    edx,0x3e6
 100b18e:	7f 0e                	jg     100b19e <mmInitHeapTracking+0xf6>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:59
            heapMemoryInfo[cnt].next=NULL;
 100b190:	8b 0d 50 9c 07 01    	mov    ecx,DWORD PTR ds:0x1079c50
 100b196:	c7 44 01 18 00 00 00 	mov    DWORD PTR [ecx+eax*1+0x18],0x0
 100b19d:	00 
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:60 (discriminator 2)
        heapMemoryInfo[cnt].inUse=false;
 100b19e:	89 c1                	mov    ecx,eax
 100b1a0:	03 0d 50 9c 07 01    	add    ecx,DWORD PTR ds:0x1079c50
 100b1a6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:61 (discriminator 2)
        heapMemoryInfo[cnt].pid=0;
 100b1aa:	c7 41 10 00 00 00 00 	mov    DWORD PTR [ecx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:62 (discriminator 2)
        heapMemoryInfo[cnt].size=0;
 100b1b1:	c7 41 08 00 00 00 00 	mov    DWORD PTR [ecx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:54 (discriminator 2)
    heapMemoryInfo->address=kmmHeapMemoryBaseAddress;
    heapMemoryInfo->size=kmmHeapMemoryTotal;
    heapMemoryInfo->next=NULL;
    heapMemoryInfo->prev=NULL;
    
    for (int cnt=1;cnt<1000;cnt++)
 100b1b8:	83 c2 01             	add    edx,0x1
 100b1bb:	83 c0 1c             	add    eax,0x1c
 100b1be:	81 fa e8 03 00 00    	cmp    edx,0x3e8
 100b1c4:	75 ad                	jne    100b173 <mmInitHeapTracking+0xcb>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:64
            heapMemoryInfo[cnt].next=NULL;
        heapMemoryInfo[cnt].inUse=false;
        heapMemoryInfo[cnt].pid=0;
        heapMemoryInfo[cnt].size=0;
    }
}
 100b1c6:	83 c4 0c             	add    esp,0xc
 100b1c9:	c3                   	ret    

0100b1ca <mmInit>:
mmInit():
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:68


void mmInit()
{
 100b1ca:	56                   	push   esi
 100b1cb:	53                   	push   ebx
 100b1cc:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:69
    kernelSize=kernelLoadEnd-kernelLoadAddress;
 100b1cf:	0f be 05 90 9c 07 01 	movsx  eax,BYTE PTR ds:0x1079c90
 100b1d6:	0f be 15 00 00 00 01 	movsx  edx,BYTE PTR ds:0x1000000
 100b1dd:	29 d0                	sub    eax,edx
 100b1df:	a3 54 9c 07 01       	mov    ds:0x1079c54,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:71
    //0x10000000 represents segment 0xC0000000-0xCFFFFFFF ... don't want to map anything there for now
    kernelMemoryUsed=kernelStart + kernelSize;
 100b1e4:	03 05 e8 d9 00 01    	add    eax,DWORD PTR ds:0x100d9e8
 100b1ea:	a3 4c 9c 07 01       	mov    ds:0x1079c4c,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:72
    kmmGrossUserMemoryAvailable=kE820MemoryBytes - kernelMemoryUsed;
 100b1ef:	8b 0d 88 95 12 00    	mov    ecx,DWORD PTR ds:0x129588
 100b1f5:	8b 1d 8c 95 12 00    	mov    ebx,DWORD PTR ds:0x12958c
 100b1fb:	89 ca                	mov    edx,ecx
 100b1fd:	29 c2                	sub    edx,eax
 100b1ff:	89 15 80 9a 12 00    	mov    DWORD PTR ds:0x129a80,edx
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:73
    kmmHeapMemoryTotal=kmmGrossUserMemoryAvailable - kernelPoolMemorySize - kernelMemoryUsed;
 100b205:	8b 35 e4 d9 00 01    	mov    esi,DWORD PTR ds:0x100d9e4
 100b20b:	29 f2                	sub    edx,esi
 100b20d:	29 c2                	sub    edx,eax
 100b20f:	89 15 88 9a 12 00    	mov    DWORD PTR ds:0x129a88,edx
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:74
    kmmHeapMemoryBaseAddress=(kernelMemoryUsed + 0x100000) & 0xFFFFF000 ;
 100b215:	05 00 00 10 00       	add    eax,0x100000
 100b21a:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:75
    kKernelPoolMemoryAddress=kmmHeapMemoryBaseAddress;
 100b21f:	a3 58 9c 07 01       	mov    ds:0x1079c58,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:76
    kmmHeapMemoryBaseAddress+=kernelPoolMemorySize; //Need some page table memory but we don't want to use Malloc while creating page tables to get it
 100b224:	01 f0                	add    eax,esi
 100b226:	a3 84 9a 12 00       	mov    ds:0x129a84,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:78
    //Setup the base of the heap
    kMallocBaseAddress=kmmHeapMemoryBaseAddress;
 100b22b:	a3 7c 9a 12 00       	mov    ds:0x129a7c,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:79
    kMallocCurrAddress=kMallocBaseAddress;
 100b230:	a3 78 9a 12 00       	mov    ds:0x129a78,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:81
    
    printd(DEBUG_MEMORY_MANAGEMENT,"E820 memory total: %u kb\n", kE820MemoryBytes/1024);
 100b235:	0f ac d9 0a          	shrd   ecx,ebx,0xa
 100b239:	c1 eb 0a             	shr    ebx,0xa
 100b23c:	53                   	push   ebx
 100b23d:	51                   	push   ecx
 100b23e:	68 2b 78 06 01       	push   0x106782b
 100b243:	68 00 00 01 00       	push   0x10000
 100b248:	e8 ba ea ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:82
    printd(DEBUG_MEMORY_MANAGEMENT,"Memory used by the kernel: %u\n",kernelMemoryUsed);
 100b24d:	83 c4 0c             	add    esp,0xc
 100b250:	ff 35 4c 9c 07 01    	push   DWORD PTR ds:0x1079c4c
 100b256:	68 28 2f 04 01       	push   0x1042f28
 100b25b:	68 00 00 01 00       	push   0x10000
 100b260:	e8 a2 ea ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:83
    printd(DEBUG_MEMORY_MANAGEMENT,"Memory available to mm: %u kb\n",kmmGrossUserMemoryAvailable/1024);
 100b265:	83 c4 0c             	add    esp,0xc
 100b268:	a1 80 9a 12 00       	mov    eax,ds:0x129a80
 100b26d:	c1 e8 0a             	shr    eax,0xa
 100b270:	50                   	push   eax
 100b271:	68 48 2f 04 01       	push   0x1042f48
 100b276:	68 00 00 01 00       	push   0x10000
 100b27b:	e8 87 ea ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:84
    printd(DEBUG_MEMORY_MANAGEMENT,"Total memory availabe to user applications: %u kb\n",(kmmGrossUserMemoryAvailable - kernelPoolMemorySize)/1024);
 100b280:	83 c4 0c             	add    esp,0xc
 100b283:	a1 80 9a 12 00       	mov    eax,ds:0x129a80
 100b288:	2b 05 e4 d9 00 01    	sub    eax,DWORD PTR ds:0x100d9e4
 100b28e:	c1 e8 0a             	shr    eax,0xa
 100b291:	50                   	push   eax
 100b292:	68 68 2f 04 01       	push   0x1042f68
 100b297:	68 00 00 01 00       	push   0x10000
 100b29c:	e8 66 ea ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:85
    printd(DEBUG_MEMORY_MANAGEMENT,"Initializing memory manager\n\n");
 100b2a1:	83 c4 08             	add    esp,0x8
 100b2a4:	68 45 78 06 01       	push   0x1067845
 100b2a9:	68 00 00 01 00       	push   0x10000
 100b2ae:	e8 54 ea ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:86
    printd(DEBUG_MEMORY_MANAGEMENT,"Pool\t\tAddress\t\t\tLength\t\t\n");
 100b2b3:	83 c4 08             	add    esp,0x8
 100b2b6:	68 63 78 06 01       	push   0x1067863
 100b2bb:	68 00 00 01 00       	push   0x10000
 100b2c0:	e8 42 ea ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:87
    printd(DEBUG_MEMORY_MANAGEMENT,"Kernel\t0x%08X\t\t0x%08X\n",kKernelPoolMemoryAddress,kernelPoolMemorySize);
 100b2c5:	ff 35 e4 d9 00 01    	push   DWORD PTR ds:0x100d9e4
 100b2cb:	ff 35 58 9c 07 01    	push   DWORD PTR ds:0x1079c58
 100b2d1:	68 7d 78 06 01       	push   0x106787d
 100b2d6:	68 00 00 01 00       	push   0x10000
 100b2db:	e8 27 ea ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:88
    printd(DEBUG_MEMORY_MANAGEMENT,"User\t\t0x%08X\t\t0x%08X\n",kmmHeapMemoryBaseAddress,kmmHeapMemoryTotal);
 100b2e0:	83 c4 20             	add    esp,0x20
 100b2e3:	ff 35 88 9a 12 00    	push   DWORD PTR ds:0x129a88
 100b2e9:	ff 35 84 9a 12 00    	push   DWORD PTR ds:0x129a84
 100b2ef:	68 94 78 06 01       	push   0x1067894
 100b2f4:	68 00 00 01 00       	push   0x10000
 100b2f9:	e8 09 ea ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:90

    mmInitHeapTracking();    
 100b2fe:	e8 a5 fd ff ff       	call   100b0a8 <mmInitHeapTracking>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:94
    //We need to
    uintptr_t startAddr=0x1000;
    //CLR 02/21/2017 - Changed from (kernelMemoryUsed + 0x1000) & 0xFFFFF000 to heap memory base address
    uintptr_t endAddr= kmmHeapMemoryBaseAddress;
 100b303:	8b 1d 84 9a 12 00    	mov    ebx,DWORD PTR ds:0x129a84
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:96
    //Mark everything from the beginning of memory (0xC0000000) to the end of the kernel objects as in-use
    printd(DEBUG_KERNEL_PAGING,"Setting kernel memory range from 0x%08X-0x%08X as in-use\n",startAddr,endAddr);
 100b309:	53                   	push   ebx
 100b30a:	68 00 10 00 00       	push   0x1000
 100b30f:	68 9c 2f 04 01       	push   0x1042f9c
 100b314:	68 00 80 00 00       	push   0x8000
 100b319:	e8 e9 e9 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:97
    mmKernelSetPageRangeInUseFlag(startAddr,
 100b31e:	83 c4 20             	add    esp,0x20
 100b321:	6a 01                	push   0x1
 100b323:	68 00 10 00 00       	push   0x1000
 100b328:	8d 43 01             	lea    eax,[ebx+0x1]
 100b32b:	50                   	push   eax
 100b32c:	68 00 10 00 00       	push   0x1000
 100b331:	e8 11 da ff ff       	call   1008d47 <mmKernelSetPageRangeInUseFlag>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:103
            endAddr+1,
            0x1000, /*page size*/
            true);
    startAddr+=0xc0000000;
    endAddr+=0xc0000000;
    printd(DEBUG_KERNEL_PAGING,"Setting kernel memory range from 0x%08X-0x%08X as in-use\n",startAddr,endAddr);
 100b336:	8d 83 00 00 00 c0    	lea    eax,[ebx-0x40000000]
 100b33c:	50                   	push   eax
 100b33d:	68 00 10 00 c0       	push   0xc0001000
 100b342:	68 9c 2f 04 01       	push   0x1042f9c
 100b347:	68 00 80 00 00       	push   0x8000
 100b34c:	e8 b6 e9 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:104
    mmKernelSetPageRangeInUseFlag(startAddr,
 100b351:	83 c4 20             	add    esp,0x20
 100b354:	6a 01                	push   0x1
 100b356:	68 00 10 00 00       	push   0x1000
 100b35b:	81 eb ff ff ff 3f    	sub    ebx,0x3fffffff
 100b361:	53                   	push   ebx
 100b362:	68 00 10 00 c0       	push   0xc0001000
 100b367:	e8 db d9 ff ff       	call   1008d47 <mmKernelSetPageRangeInUseFlag>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:109
            endAddr+1,
            0x1000, /*page size*/
            true);

    startAddr=kmmHeapMemoryBaseAddress; 
 100b36c:	8b 1d 84 9a 12 00    	mov    ebx,DWORD PTR ds:0x129a84
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:110
    printd(DEBUG_KERNEL_PAGING,"Zeroing page entries for memory range 0x%08X-0x%08X",startAddr,0x9FFFFFFF);
 100b372:	68 ff ff ff 9f       	push   0x9fffffff
 100b377:	53                   	push   ebx
 100b378:	68 d8 2f 04 01       	push   0x1042fd8
 100b37d:	68 00 80 00 00       	push   0x8000
 100b382:	e8 80 e9 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:111
    for (uintptr_t cnt=startAddr;cnt<=0x9FFFFFFF;cnt+=0x1000)
 100b387:	83 c4 20             	add    esp,0x20
 100b38a:	81 fb ff ff ff 9f    	cmp    ebx,0x9fffffff
 100b390:	77 4c                	ja     100b3de <mmInit+0x214>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:115
    {
        if (cnt<0xC0000000 || cnt>0xCFFFFFFF)
        {
            unMapPage(CURRENT_CR3,cnt,0x0);
 100b392:	0f 20 d8             	mov    eax,cr3
 100b395:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:113

    startAddr=kmmHeapMemoryBaseAddress; 
    printd(DEBUG_KERNEL_PAGING,"Zeroing page entries for memory range 0x%08X-0x%08X",startAddr,0x9FFFFFFF);
    for (uintptr_t cnt=startAddr;cnt<=0x9FFFFFFF;cnt+=0x1000)
    {
        if (cnt<0xC0000000 || cnt>0xCFFFFFFF)
 100b397:	8d 83 00 00 00 40    	lea    eax,[ebx+0x40000000]
 100b39d:	3d ff ff ff 0f       	cmp    eax,0xfffffff
 100b3a2:	76 2c                	jbe    100b3d0 <mmInit+0x206>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:115
        {
            unMapPage(CURRENT_CR3,cnt,0x0);
 100b3a4:	83 ec 04             	sub    esp,0x4
 100b3a7:	6a 00                	push   0x0
 100b3a9:	53                   	push   ebx
 100b3aa:	56                   	push   esi
 100b3ab:	e8 dd 06 00 00       	call   100ba8d <unMapPage>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:116
            if (cnt%0x10000000==0)
 100b3b0:	83 c4 10             	add    esp,0x10
 100b3b3:	f7 c3 ff ff ff 0f    	test   ebx,0xfffffff
 100b3b9:	75 15                	jne    100b3d0 <mmInit+0x206>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:119
            {
//                printk("0x%08X-0x%08X\n",cnt,kPagingGet4kPTEntryValue(cnt));
                printd(DEBUG_KERNEL_PAGING,".");
 100b3bb:	83 ec 08             	sub    esp,0x8
 100b3be:	68 77 79 06 01       	push   0x1067977
 100b3c3:	68 00 80 00 00       	push   0x8000
 100b3c8:	e8 3a e9 ff ff       	call   1009d07 <printd>
 100b3cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:111 (discriminator 2)
            0x1000, /*page size*/
            true);

    startAddr=kmmHeapMemoryBaseAddress; 
    printd(DEBUG_KERNEL_PAGING,"Zeroing page entries for memory range 0x%08X-0x%08X",startAddr,0x9FFFFFFF);
    for (uintptr_t cnt=startAddr;cnt<=0x9FFFFFFF;cnt+=0x1000)
 100b3d0:	81 c3 00 10 00 00    	add    ebx,0x1000
 100b3d6:	81 fb ff ff ff 9f    	cmp    ebx,0x9fffffff
 100b3dc:	76 b9                	jbe    100b397 <mmInit+0x1cd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:125
//                cursorMoveTo(0,cursorGetPosY()-1);
            }
        }
    }
 
    printk("\n");
 100b3de:	83 ec 0c             	sub    esp,0xc
 100b3e1:	68 7b 78 06 01       	push   0x106787b
 100b3e6:	e8 04 e9 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:147
    printd(DEBUG_KERNEL_PAGING,"Available memory: %u\n",memAvailable());
    return;
  */  
//    for (int cnt=KERNEL_VIRTUAL_EXEC_ADDRESS;cnt<KERNEL_VIRTUAL_EXEC_ADDRESS+0x10000000;cnt+=4096)
//        pagingMapPage
}
 100b3eb:	83 c4 14             	add    esp,0x14
 100b3ee:	5b                   	pop    ebx
 100b3ef:	5e                   	pop    esi
 100b3f0:	c3                   	ret    
 100b3f1:	66 90                	xchg   ax,ax
 100b3f3:	90                   	nop

0100b3f4 <pagingAllocatePagingTablePage>:
pagingAllocatePagingTablePage():
/home/yogi/src/os/chrisOSKernel/src/paging.c:127
    return lRetVal;
}

uint32_t pagingAllocatePagingTablePage()
{
    uint32_t lRetVal = kKernelPoolMemoryAddress;
 100b3f4:	a1 58 9c 07 01       	mov    eax,ds:0x1079c58
/home/yogi/src/os/chrisOSKernel/src/paging.c:128
    kKernelPoolMemoryAddress+=0x1000;
 100b3f9:	8d 90 00 10 00 00    	lea    edx,[eax+0x1000]
 100b3ff:	89 15 58 9c 07 01    	mov    DWORD PTR ds:0x1079c58,edx
/home/yogi/src/os/chrisOSKernel/src/paging.c:130
    return lRetVal;
}
 100b405:	c3                   	ret    

0100b406 <pagingGet4kPDEntryValueCR3>:
pagingGet4kPDEntryValueCR3():
/home/yogi/src/os/chrisOSKernel/src/paging.c:133

uint32_t pagingGet4kPDEntryValueCR3(uintptr_t PageDirAddress, uint32_t address)
{
 100b406:	53                   	push   ebx
 100b407:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/src/paging.c:136
    address&=0xFFFFF000;
    uintptr_t*pageDirEntry=((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
    uintptr_t* lTemp=(uint32_t*)((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
 100b40a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 100b40e:	c1 eb 16             	shr    ebx,0x16
 100b411:	c1 e3 02             	shl    ebx,0x2
 100b414:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/paging.c:138
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 100b418:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 100b41f:	74 12                	je     100b433 <pagingGet4kPDEntryValueCR3+0x2d>
/home/yogi/src/os/chrisOSKernel/src/paging.c:139
            printk("pagingGet4kPDEntryValue: dirAddressPtr=0x%08x\n", *lTemp);
 100b421:	83 ec 08             	sub    esp,0x8
 100b424:	ff 33                	push   DWORD PTR [ebx]
 100b426:	68 0c 30 04 01       	push   0x104300c
 100b42b:	e8 bf e8 ff ff       	call   1009cef <printk>
 100b430:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:141
#endif
    return (uint32_t)*lTemp;
 100b433:	8b 03                	mov    eax,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/src/paging.c:142
}
 100b435:	83 c4 08             	add    esp,0x8
 100b438:	5b                   	pop    ebx
 100b439:	c3                   	ret    

0100b43a <pagingGet4kPDEntryValue>:
pagingGet4kPDEntryValue():
/home/yogi/src/os/chrisOSKernel/src/paging.c:145

uint32_t pagingGet4kPDEntryValue(uint32_t address)
{
 100b43a:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/paging.c:146
    return pagingGet4kPDEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 100b43d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100b441:	68 00 a0 4b 00       	push   0x4ba000
 100b446:	e8 bb ff ff ff       	call   100b406 <pagingGet4kPDEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/src/paging.c:147
}
 100b44b:	83 c4 1c             	add    esp,0x1c
 100b44e:	c3                   	ret    

0100b44f <pagingGet4kPDEntryAddressCR3>:
pagingGet4kPDEntryAddressCR3():
/home/yogi/src/os/chrisOSKernel/src/paging.c:150

uint32_t pagingGet4kPDEntryAddressCR3(uintptr_t PageDirAddress, uint32_t address)
{
 100b44f:	53                   	push   ebx
 100b450:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/src/paging.c:152
    address&=0xFFFFF000;
    uintptr_t lTemp=((PageDirAddress  | (((address & 0xFFC00000) >> 22) << 2)));
 100b453:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 100b457:	c1 eb 16             	shr    ebx,0x16
 100b45a:	c1 e3 02             	shl    ebx,0x2
 100b45d:	0b 5c 24 10          	or     ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/paging.c:154
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 100b461:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 100b468:	74 11                	je     100b47b <pagingGet4kPDEntryAddressCR3+0x2c>
/home/yogi/src/os/chrisOSKernel/src/paging.c:155
            printk("dirEntryAddress=0x%08x\n", lTemp);
 100b46a:	83 ec 08             	sub    esp,0x8
 100b46d:	53                   	push   ebx
 100b46e:	68 aa 78 06 01       	push   0x10678aa
 100b473:	e8 77 e8 ff ff       	call   1009cef <printk>
 100b478:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:158
#endif
    return (uint32_t)lTemp & 0xFFFFFFFF;
}
 100b47b:	89 d8                	mov    eax,ebx
 100b47d:	83 c4 08             	add    esp,0x8
 100b480:	5b                   	pop    ebx
 100b481:	c3                   	ret    

0100b482 <pagingGet4kPDEntryAddress>:
pagingGet4kPDEntryAddress():
/home/yogi/src/os/chrisOSKernel/src/paging.c:161

uint32_t pagingGet4kPDEntryAddress(uint32_t address)
{
 100b482:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/paging.c:162
    return pagingGet4kPDEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 100b485:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100b489:	68 00 a0 4b 00       	push   0x4ba000
 100b48e:	e8 bc ff ff ff       	call   100b44f <pagingGet4kPDEntryAddressCR3>
/home/yogi/src/os/chrisOSKernel/src/paging.c:163
}
 100b493:	83 c4 1c             	add    esp,0x1c
 100b496:	c3                   	ret    

0100b497 <pagingGet4kPTEntryAddressCR3>:
pagingGet4kPTEntryAddressCR3():
/home/yogi/src/os/chrisOSKernel/src/paging.c:166

uint32_t pagingGet4kPTEntryAddressCR3(uintptr_t pageDirAddress, uint32_t address)
{
 100b497:	53                   	push   ebx
 100b498:	83 ec 10             	sub    esp,0x10
 100b49b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/src/paging.c:168
    address&=0xFFFFF000;
    uintptr_t pDirPtr=pagingGet4kPDEntryValueCR3(pageDirAddress,address) & 0xFFFFF000;
 100b49f:	89 d8                	mov    eax,ebx
 100b4a1:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b4a6:	50                   	push   eax
 100b4a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b4ab:	e8 56 ff ff ff       	call   100b406 <pagingGet4kPDEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/src/paging.c:169
    return ((address & 0x3FF000) >> 12) << 2 | pDirPtr;
 100b4b0:	81 e3 00 f0 3f 00    	and    ebx,0x3ff000
 100b4b6:	c1 eb 0a             	shr    ebx,0xa
 100b4b9:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b4be:	09 d8                	or     eax,ebx
/home/yogi/src/os/chrisOSKernel/src/paging.c:170
}
 100b4c0:	83 c4 18             	add    esp,0x18
 100b4c3:	5b                   	pop    ebx
 100b4c4:	c3                   	ret    

0100b4c5 <pagingGet4kPTEntryAddress>:
pagingGet4kPTEntryAddress():
/home/yogi/src/os/chrisOSKernel/src/paging.c:173

uint32_t pagingGet4kPTEntryAddress(uint32_t address)
{
 100b4c5:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/paging.c:174
    return pagingGet4kPTEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 100b4c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100b4cc:	68 00 a0 4b 00       	push   0x4ba000
 100b4d1:	e8 c1 ff ff ff       	call   100b497 <pagingGet4kPTEntryAddressCR3>
/home/yogi/src/os/chrisOSKernel/src/paging.c:175
}
 100b4d6:	83 c4 1c             	add    esp,0x1c
 100b4d9:	c3                   	ret    

0100b4da <pagingGet4kPTEntryValueCR3>:
pagingGet4kPTEntryValueCR3():
/home/yogi/src/os/chrisOSKernel/src/paging.c:178

uint32_t pagingGet4kPTEntryValueCR3(uintptr_t pageDirAddress, uint32_t address)
{
 100b4da:	56                   	push   esi
 100b4db:	53                   	push   ebx
 100b4dc:	83 ec 0c             	sub    esp,0xc
 100b4df:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/src/paging.c:180
    address&=0xFFFFF000;
    uint32_t* pTablePtr=(uint32_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,address);
 100b4e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 100b4e7:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b4ec:	50                   	push   eax
 100b4ed:	56                   	push   esi
 100b4ee:	e8 a4 ff ff ff       	call   100b497 <pagingGet4kPTEntryAddressCR3>
 100b4f3:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:182
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 100b4f5:	83 c4 10             	add    esp,0x10
 100b4f8:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 100b4ff:	74 11                	je     100b512 <pagingGet4kPTEntryValueCR3+0x38>
/home/yogi/src/os/chrisOSKernel/src/paging.c:183
             printk("pagingGet4kPTEntryValueCR3: PTAddress=0x%08X, PTValue=0x%08X (PDIR=0x%08X)\n", pTablePtr,*pTablePtr,pageDirAddress);
 100b501:	56                   	push   esi
 100b502:	ff 30                	push   DWORD PTR [eax]
 100b504:	50                   	push   eax
 100b505:	68 3c 30 04 01       	push   0x104303c
 100b50a:	e8 e0 e7 ff ff       	call   1009cef <printk>
 100b50f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:185
#endif
    return *pTablePtr;
 100b512:	8b 03                	mov    eax,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/src/paging.c:186
}
 100b514:	83 c4 04             	add    esp,0x4
 100b517:	5b                   	pop    ebx
 100b518:	5e                   	pop    esi
 100b519:	c3                   	ret    

0100b51a <pagingGet4kPTEntryValue>:
pagingGet4kPTEntryValue():
/home/yogi/src/os/chrisOSKernel/src/paging.c:189

uint32_t pagingGet4kPTEntryValue(uint32_t address)
{
 100b51a:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/paging.c:190
    return pagingGet4kPTEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 100b51d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100b521:	68 00 a0 4b 00       	push   0x4ba000
 100b526:	e8 af ff ff ff       	call   100b4da <pagingGet4kPTEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/src/paging.c:191
}
 100b52b:	83 c4 1c             	add    esp,0x1c
 100b52e:	c3                   	ret    

0100b52f <pagingSetPageReadOnlyFlag>:
pagingSetPageReadOnlyFlag():
/home/yogi/src/os/chrisOSKernel/src/paging.c:194

void pagingSetPageReadOnlyFlag(uintptr_t* ptEntry, bool readOnly)
{
 100b52f:	56                   	push   esi
 100b530:	53                   	push   ebx
 100b531:	83 ec 04             	sub    esp,0x4
 100b534:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 100b538:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/paging.c:195
    printd(DEBUG_PAGING,"pagingMakePageReadOnly: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
 100b53c:	ff 33                	push   DWORD PTR [ebx]
 100b53e:	53                   	push   ebx
 100b53f:	68 9c 20 04 01       	push   0x104209c
 100b544:	6a 40                	push   0x40
 100b546:	e8 bc e7 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:196
    if (readOnly)
 100b54b:	83 c4 10             	add    esp,0x10
 100b54e:	89 f0                	mov    eax,esi
 100b550:	84 c0                	test   al,al
 100b552:	74 05                	je     100b559 <pagingSetPageReadOnlyFlag+0x2a>
/home/yogi/src/os/chrisOSKernel/src/paging.c:197
       *ptEntry&=0xFFFFFFFD;
 100b554:	83 23 fd             	and    DWORD PTR [ebx],0xfffffffd
 100b557:	eb 03                	jmp    100b55c <pagingSetPageReadOnlyFlag+0x2d>
/home/yogi/src/os/chrisOSKernel/src/paging.c:199
    else
       *ptEntry|=2; 
 100b559:	83 0b 02             	or     DWORD PTR [ebx],0x2
/home/yogi/src/os/chrisOSKernel/src/paging.c:200
    RELOAD_CR3
 100b55c:	0f 20 d8             	mov    eax,cr3
 100b55f:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:201
    printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
 100b562:	83 ec 04             	sub    esp,0x4
 100b565:	ff 33                	push   DWORD PTR [ebx]
 100b567:	68 a2 78 06 01       	push   0x10678a2
 100b56c:	6a 40                	push   0x40
 100b56e:	e8 94 e7 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:202
}
 100b573:	83 c4 14             	add    esp,0x14
 100b576:	5b                   	pop    ebx
 100b577:	5e                   	pop    esi
 100b578:	c3                   	ret    

0100b579 <pagingUpdatePTEPresentFlag>:
pagingUpdatePTEPresentFlag():
/home/yogi/src/os/chrisOSKernel/src/paging.c:205

void pagingUpdatePTEPresentFlag(uintptr_t* ptEntry, bool present)
{
 100b579:	56                   	push   esi
 100b57a:	53                   	push   ebx
 100b57b:	83 ec 04             	sub    esp,0x4
 100b57e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 100b582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/paging.c:206
         printd(DEBUG_PAGING,"pagingUpdatePTEPresentFlag: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
 100b586:	ff 33                	push   DWORD PTR [ebx]
 100b588:	53                   	push   ebx
 100b589:	68 d4 20 04 01       	push   0x10420d4
 100b58e:	6a 40                	push   0x40
 100b590:	e8 72 e7 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:207
         if (present)
 100b595:	83 c4 10             	add    esp,0x10
 100b598:	89 f0                	mov    eax,esi
 100b59a:	84 c0                	test   al,al
 100b59c:	74 05                	je     100b5a3 <pagingUpdatePTEPresentFlag+0x2a>
/home/yogi/src/os/chrisOSKernel/src/paging.c:208
             *ptEntry=*ptEntry | 1;
 100b59e:	83 0b 01             	or     DWORD PTR [ebx],0x1
 100b5a1:	eb 03                	jmp    100b5a6 <pagingUpdatePTEPresentFlag+0x2d>
/home/yogi/src/os/chrisOSKernel/src/paging.c:210
         else
             *ptEntry&=0xFFFFFFFE;
 100b5a3:	83 23 fe             	and    DWORD PTR [ebx],0xfffffffe
/home/yogi/src/os/chrisOSKernel/src/paging.c:211
         __asm__("mov eax,cr3\nmov cr3,eax\n":::"eax");
 100b5a6:	0f 20 d8             	mov    eax,cr3
 100b5a9:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:212
         printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
 100b5ac:	83 ec 04             	sub    esp,0x4
 100b5af:	ff 33                	push   DWORD PTR [ebx]
 100b5b1:	68 a2 78 06 01       	push   0x10678a2
 100b5b6:	6a 40                	push   0x40
 100b5b8:	e8 4a e7 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:213
}
 100b5bd:	83 c4 14             	add    esp,0x14
 100b5c0:	5b                   	pop    ebx
 100b5c1:	5e                   	pop    esi
 100b5c2:	c3                   	ret    

0100b5c3 <pagingSetVirtualRangeRO>:
pagingSetVirtualRangeRO():
/home/yogi/src/os/chrisOSKernel/src/paging.c:216

void pagingSetVirtualRangeRO(uintptr_t pageDirAddress, uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
 100b5c3:	55                   	push   ebp
 100b5c4:	57                   	push   edi
 100b5c5:	56                   	push   esi
 100b5c6:	53                   	push   ebx
 100b5c7:	83 ec 1c             	sub    esp,0x1c
 100b5ca:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
 100b5ce:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
 100b5d2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
 100b5d6:	89 f0                	mov    eax,esi
 100b5d8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
/home/yogi/src/os/chrisOSKernel/src/paging.c:218
    uintptr_t* startPTE;
    printd(DEBUG_PAGING,"kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
 100b5dc:	57                   	push   edi
 100b5dd:	53                   	push   ebx
 100b5de:	68 10 21 04 01       	push   0x1042110
 100b5e3:	6a 40                	push   0x40
 100b5e5:	e8 1d e7 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:219
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
 100b5ea:	8d 4f 01             	lea    ecx,[edi+0x1]
 100b5ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
 100b5f1:	83 c4 10             	add    esp,0x10
 100b5f4:	39 cb                	cmp    ebx,ecx
 100b5f6:	77 4f                	ja     100b647 <pagingSetVirtualRangeRO+0x84>
 100b5f8:	89 f2                	mov    edx,esi
 100b5fa:	84 d2                	test   dl,dl
 100b5fc:	b8 fd 74 06 01       	mov    eax,0x10674fd
 100b601:	bd 71 de 04 01       	mov    ebp,0x104de71
 100b606:	0f 44 e8             	cmove  ebp,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:223
    {
        startPTE=(uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,cnt);
        printd(DEBUG_PAGING,"0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
 100b609:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
/home/yogi/src/os/chrisOSKernel/src/paging.c:221
{
    uintptr_t* startPTE;
    printd(DEBUG_PAGING,"kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
    {
        startPTE=(uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,cnt);
 100b60e:	83 ec 08             	sub    esp,0x8
 100b611:	53                   	push   ebx
 100b612:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100b616:	e8 7c fe ff ff       	call   100b497 <pagingGet4kPTEntryAddressCR3>
 100b61b:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:222
        printd(DEBUG_PAGING,"0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
 100b61d:	89 2c 24             	mov    DWORD PTR [esp],ebp
 100b620:	50                   	push   eax
 100b621:	53                   	push   ebx
 100b622:	68 00 75 06 01       	push   0x1067500
 100b627:	6a 40                	push   0x40
 100b629:	e8 d9 e6 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:223
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
 100b62e:	83 c4 18             	add    esp,0x18
 100b631:	57                   	push   edi
 100b632:	56                   	push   esi
 100b633:	e8 e1 d2 ff ff       	call   1008919 <kPagingSetPageReadOnlyFlag>
/home/yogi/src/os/chrisOSKernel/src/paging.c:219

void pagingSetVirtualRangeRO(uintptr_t pageDirAddress, uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
    uintptr_t* startPTE;
    printd(DEBUG_PAGING,"kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
 100b638:	81 c3 00 10 00 00    	add    ebx,0x1000
 100b63e:	83 c4 10             	add    esp,0x10
 100b641:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
 100b645:	76 c7                	jbe    100b60e <pagingSetVirtualRangeRO+0x4b>
/home/yogi/src/os/chrisOSKernel/src/paging.c:226
        startPTE=(uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,cnt);
        printd(DEBUG_PAGING,"0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
            
    }
}
 100b647:	83 c4 1c             	add    esp,0x1c
 100b64a:	5b                   	pop    ebx
 100b64b:	5e                   	pop    esi
 100b64c:	5f                   	pop    edi
 100b64d:	5d                   	pop    ebp
 100b64e:	c3                   	ret    

0100b64f <pagingUpdatePresentFlagA>:
pagingUpdatePresentFlagA():
/home/yogi/src/os/chrisOSKernel/src/paging.c:230

//Absolute version, page passed is already virtual
void pagingUpdatePresentFlagA(uintptr_t pageDirAddress, uint32_t address, bool present)
{
 100b64f:	56                   	push   esi
 100b650:	53                   	push   ebx
 100b651:	83 ec 04             	sub    esp,0x4
 100b654:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
 100b658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/src/paging.c:231
    printd(DEBUG_PAGING,"kpagingUpdatePresentFlagA: Make 0x%08X %s\n", address, present?"present":"not present");
 100b65c:	84 db                	test   bl,bl
 100b65e:	ba 18 75 06 01       	mov    edx,0x1067518
 100b663:	b8 1c 75 06 01       	mov    eax,0x106751c
 100b668:	0f 44 c2             	cmove  eax,edx
 100b66b:	50                   	push   eax
 100b66c:	56                   	push   esi
 100b66d:	68 40 21 04 01       	push   0x1042140
 100b672:	6a 40                	push   0x40
 100b674:	e8 8e e6 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:232
        uintptr_t* pagePTE= (uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,address&0xFFFFF000);
 100b679:	83 c4 08             	add    esp,0x8
 100b67c:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
 100b682:	56                   	push   esi
 100b683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b687:	e8 0b fe ff ff       	call   100b497 <pagingGet4kPTEntryAddressCR3>
 100b68c:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:233
    printd(DEBUG_PAGING,"kpagingUpdatePresentFlagA: updating entry 0x%08X\n", pagePTE);
 100b68e:	83 c4 0c             	add    esp,0xc
 100b691:	50                   	push   eax
 100b692:	68 6c 21 04 01       	push   0x104216c
 100b697:	6a 40                	push   0x40
 100b699:	e8 69 e6 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:234
    pagingUpdatePTEPresentFlag(pagePTE, present);
 100b69e:	83 c4 08             	add    esp,0x8
 100b6a1:	0f b6 db             	movzx  ebx,bl
 100b6a4:	53                   	push   ebx
 100b6a5:	56                   	push   esi
 100b6a6:	e8 ce fe ff ff       	call   100b579 <pagingUpdatePTEPresentFlag>
/home/yogi/src/os/chrisOSKernel/src/paging.c:235
}
 100b6ab:	83 c4 14             	add    esp,0x14
 100b6ae:	5b                   	pop    ebx
 100b6af:	5e                   	pop    esi
 100b6b0:	c3                   	ret    

0100b6b1 <pagingUpdatePresentFlagV>:
pagingUpdatePresentFlagV():
/home/yogi/src/os/chrisOSKernel/src/paging.c:238

void pagingUpdatePresentFlagV(uintptr_t pageDirAddress,uint32_t address, bool present)
{
 100b6b1:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:240
    address+=KERNEL_PAGED_BASE_ADDRESS; 
    pagingUpdatePresentFlagA(pageDirAddress,address, present);
 100b6b4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
 100b6b9:	50                   	push   eax
 100b6ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 100b6be:	2d 00 00 00 40       	sub    eax,0x40000000
 100b6c3:	50                   	push   eax
 100b6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b6c8:	e8 82 ff ff ff       	call   100b64f <pagingUpdatePresentFlagA>
/home/yogi/src/os/chrisOSKernel/src/paging.c:241
}
 100b6cd:	83 c4 1c             	add    esp,0x1c
 100b6d0:	c3                   	ret    

0100b6d1 <pagingMapPage>:
pagingMapPage():
/home/yogi/src/os/chrisOSKernel/src/paging.c:245

///Map a page to a new address
void pagingMapPage(uintptr_t pageDirAddress, uintptr_t virtualAddress, uintptr_t physicalAddress, uint8_t flags)
{
 100b6d1:	55                   	push   ebp
 100b6d2:	57                   	push   edi
 100b6d3:	56                   	push   esi
 100b6d4:	53                   	push   ebx
 100b6d5:	83 ec 24             	sub    esp,0x24
 100b6d8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
 100b6dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:250
    uint32_t *dirPtr;
    uint32_t dirPtrVal;
    uint32_t *pagePtr;
    
    virtualAddress &= 0xFFFFF000;
 100b6e0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
 100b6e4:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/paging.c:251
    physicalAddress &= 0xFFFFF000;
 100b6ea:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
 100b6ee:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/paging.c:253
    
    printd(DEBUG_PAGING,"pagingMapPage: Via CR3=0x%08X, mapping v=0x%08X to p=0x%08X with flags 0x%02X\n",pageDirAddress,virtualAddress,physicalAddress,flags);
 100b6f4:	0f b6 f8             	movzx  edi,al
 100b6f7:	57                   	push   edi
 100b6f8:	55                   	push   ebp
 100b6f9:	56                   	push   esi
 100b6fa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
 100b6fe:	68 88 30 04 01       	push   0x1043088
 100b703:	6a 40                	push   0x40
 100b705:	e8 fd e5 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:258
    
    //Get pointer to the page directory
    dirPtr=(uint32_t*)pageDirAddress;
    //Get the appropriate entry in the page table
    dirPtrVal=dirPtr[(virtualAddress>>22)];
 100b70a:	89 f0                	mov    eax,esi
 100b70c:	c1 e8 16             	shr    eax,0x16
 100b70f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
 100b713:	8d 1c 81             	lea    ebx,[ecx+eax*4]
/home/yogi/src/os/chrisOSKernel/src/paging.c:259
    if (dirPtrVal==0)
 100b716:	83 c4 20             	add    esp,0x20
 100b719:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
 100b71c:	75 5c                	jne    100b77a <pagingMapPage+0xa9>
/home/yogi/src/os/chrisOSKernel/src/paging.c:262
    {
        //Get a page for the page table
        pagePtr=(uint32_t*)pagingAllocatePagingTablePage();
 100b71e:	e8 d1 fc ff ff       	call   100b3f4 <pagingAllocatePagingTablePage>
 100b723:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:263
        printd(DEBUG_PAGING,"pmp:Page table doesn't exist for address 0x%08X (CR3=0x%08X)\n",virtualAddress,pageDirAddress);
 100b727:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 100b72b:	56                   	push   esi
 100b72c:	68 d8 30 04 01       	push   0x10430d8
 100b731:	6a 40                	push   0x40
 100b733:	e8 cf e5 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:265
        //Set the page directory entry to the newly allocated page, with flags
        dirPtr[(virtualAddress>>22)]=((uint32_t)(pagePtr) | flags);
 100b738:	0f b6 4c 24 18       	movzx  ecx,BYTE PTR [esp+0x18]
 100b73d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
 100b741:	89 d0                	mov    eax,edx
 100b743:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
 100b747:	09 c8                	or     eax,ecx
 100b749:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:266
        printd(DEBUG_PAGING,"pmp:Allocated page @ 0x%08X for the page table, PDE=0x%08X (flags=0x%02X)\n", pagePtr,dirPtr[(virtualAddress>>22)],flags);
 100b74b:	89 3c 24             	mov    DWORD PTR [esp],edi
 100b74e:	50                   	push   eax
 100b74f:	52                   	push   edx
 100b750:	68 18 31 04 01       	push   0x1043118
 100b755:	6a 40                	push   0x40
 100b757:	e8 ab e5 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:271
/*        ptrT[(virtualAddress&0x003FFFFF/4096)]=physicalAddress | flags;
        printd(DEBUG_PAGING,"kMapPage: Mapped v=0x%08X via dir=0x%08X, page=0x%08X, to p=0x%08X\n", virtualAddress, &dirPtr[(virtualAddress>>22)], &pagePtr[(virtualAddress&0x003FFFFF/4096)],pagePtr[(virtualAddress&0x003FFFFF/4096)]);
*/
    }
    if (dirPtr[(virtualAddress>>22)]==0)
 100b75c:	83 c4 20             	add    esp,0x20
 100b75f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
 100b762:	75 16                	jne    100b77a <pagingMapPage+0xa9>
/home/yogi/src/os/chrisOSKernel/src/paging.c:272
        dirPtr[virtualAddress>>22]=(pageDirAddress + ((virtualAddress&0x003FFFFF)/4096)) | flags;
 100b764:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100b768:	25 00 f0 3f 00       	and    eax,0x3ff000
 100b76d:	c1 e8 0c             	shr    eax,0xc
 100b770:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
 100b774:	0b 44 24 0c          	or     eax,DWORD PTR [esp+0xc]
 100b778:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:278
    dirPtrVal=dirPtr[virtualAddress>>22];
    dirPtrVal=(dirPtrVal&0xFFFFF000);
    pagePtr=(uint32_t*)dirPtrVal;
    //Now ptrVal will point to offset within page table
    dirPtrVal=(virtualAddress&0x003FFFFF)/4096;
    pagePtr[dirPtrVal]=physicalAddress | flags;
 100b77a:	8b 13                	mov    edx,DWORD PTR [ebx]
 100b77c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
 100b782:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100b786:	25 00 f0 3f 00       	and    eax,0x3ff000
 100b78b:	c1 e8 0a             	shr    eax,0xa
 100b78e:	01 d0                	add    eax,edx
 100b790:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
 100b795:	09 ea                	or     edx,ebp
 100b797:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/src/paging.c:279
    printd(DEBUG_PAGING,"pmp:v=0x%08X via dir=0x%08X, page=0x%08X, to p=0x%08X, flags=%02X\n", virtualAddress, &dirPtr[(virtualAddress>>22)], &pagePtr[dirPtrVal],pagePtr[dirPtrVal],flags);
 100b799:	83 ec 04             	sub    esp,0x4
 100b79c:	57                   	push   edi
 100b79d:	52                   	push   edx
 100b79e:	50                   	push   eax
 100b79f:	53                   	push   ebx
 100b7a0:	56                   	push   esi
 100b7a1:	68 64 31 04 01       	push   0x1043164
 100b7a6:	6a 40                	push   0x40
 100b7a8:	e8 5a e5 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:280
}
 100b7ad:	83 c4 3c             	add    esp,0x3c
 100b7b0:	5b                   	pop    ebx
 100b7b1:	5e                   	pop    esi
 100b7b2:	5f                   	pop    edi
 100b7b3:	5d                   	pop    ebp
 100b7b4:	c3                   	ret    

0100b7b5 <pagingFindAvailableAddressToMapTo>:
pagingFindAvailableAddressToMapTo():
/home/yogi/src/os/chrisOSKernel/src/paging.c:20
extern uint64_t kE820MemoryBytes;
extern uint32_t kDebugLevel;
uint32_t kKernelPoolMemoryAddress;

uint32_t pagingFindAvailableAddressToMapTo(uintptr_t pageDirAddress,int pagesToFind)
{
 100b7b5:	55                   	push   ebp
 100b7b6:	57                   	push   edi
 100b7b7:	56                   	push   esi
 100b7b8:	53                   	push   ebx
 100b7b9:	83 ec 30             	sub    esp,0x30
 100b7bc:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
/home/yogi/src/os/chrisOSKernel/src/paging.c:21
    uint32_t* dir=(uint32_t*)pageDirAddress;
 100b7c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
 100b7c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:32
    uint32_t foundPageTableEntryNum;
    int dirEntryNumber=0;
    uint32_t lRetVal;

    currentPDE=dir;
    lastPDE=dir+(PAGE_SIZE/4);
 100b7c8:	05 00 10 00 00       	add    eax,0x1000
 100b7cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:33
    printd(DEBUG_PAGING,"pFAATMT: Finding PTEs to accomodate 0x%08X pgs\n",pagesToFind);
 100b7d1:	55                   	push   ebp
 100b7d2:	68 a8 31 04 01       	push   0x10431a8
 100b7d7:	6a 40                	push   0x40
 100b7d9:	e8 29 e5 ff ff       	call   1009d07 <printd>
 100b7de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:31
    uint32_t foundPageTableEntry;
    uint32_t foundPageTableEntryNum;
    int dirEntryNumber=0;
    uint32_t lRetVal;

    currentPDE=dir;
 100b7e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
 100b7e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:21
extern uint32_t kDebugLevel;
uint32_t kKernelPoolMemoryAddress;

uint32_t pagingFindAvailableAddressToMapTo(uintptr_t pageDirAddress,int pagesToFind)
{
    uint32_t* dir=(uint32_t*)pageDirAddress;
 100b7e9:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:28
    uint32_t* currentPDE,*lastPDE;
    int foundPageEntryCount;
    bool found=false;
    uint32_t foundPageTableEntry;
    uint32_t foundPageTableEntryNum;
    int dirEntryNumber=0;
 100b7eb:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:25
{
    uint32_t* dir=(uint32_t*)pageDirAddress;
    uint32_t* tablePtr;
    uint32_t* currentPDE,*lastPDE;
    int foundPageEntryCount;
    bool found=false;
 100b7f0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
 100b7f5:	05 04 10 00 00       	add    eax,0x1004
 100b7fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:37
    lastPDE=dir+(PAGE_SIZE/4);
    printd(DEBUG_PAGING,"pFAATMT: Finding PTEs to accomodate 0x%08X pgs\n",pagesToFind);
    //Scan the page directory for an entry that is in use
    do
    {
        printd(DEBUG_PAGING,"pFAATMT: Finding existing page directory entry (0x%08X)\n",dir);
 100b7fe:	83 ec 04             	sub    esp,0x4
 100b801:	56                   	push   esi
 100b802:	68 d8 31 04 01       	push   0x10431d8
 100b807:	6a 40                	push   0x40
 100b809:	e8 f9 e4 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:38
        for (uint32_t* cnt=currentPDE;cnt<=lastPDE;cnt++)
 100b80e:	83 c4 10             	add    esp,0x10
 100b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100b815:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
 100b819:	39 c8                	cmp    eax,ecx
 100b81b:	77 32                	ja     100b84f <pagingFindAvailableAddressToMapTo+0x9a>
/home/yogi/src/os/chrisOSKernel/src/paging.c:40
        {
            if (*dir==0)
 100b81d:	83 3e 00             	cmp    DWORD PTR [esi],0x0
 100b820:	0f 85 35 01 00 00    	jne    100b95b <pagingFindAvailableAddressToMapTo+0x1a6>
 100b826:	83 c0 04             	add    eax,0x4
 100b829:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
 100b82d:	29 c1                	sub    ecx,eax
 100b82f:	89 c8                	mov    eax,ecx
 100b831:	c1 e8 02             	shr    eax,0x2
 100b834:	8d 4c 07 01          	lea    ecx,[edi+eax*1+0x1]
 100b838:	eb 09                	jmp    100b843 <pagingFindAvailableAddressToMapTo+0x8e>
 100b83a:	83 3e 00             	cmp    DWORD PTR [esi],0x0
 100b83d:	0f 85 18 01 00 00    	jne    100b95b <pagingFindAvailableAddressToMapTo+0x1a6>
/home/yogi/src/os/chrisOSKernel/src/paging.c:42 (discriminator 2)
            {
                dir++;
 100b843:	83 c6 04             	add    esi,0x4
/home/yogi/src/os/chrisOSKernel/src/paging.c:43 (discriminator 2)
                dirEntryNumber++;
 100b846:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOSKernel/src/paging.c:38 (discriminator 2)
    printd(DEBUG_PAGING,"pFAATMT: Finding PTEs to accomodate 0x%08X pgs\n",pagesToFind);
    //Scan the page directory for an entry that is in use
    do
    {
        printd(DEBUG_PAGING,"pFAATMT: Finding existing page directory entry (0x%08X)\n",dir);
        for (uint32_t* cnt=currentPDE;cnt<=lastPDE;cnt++)
 100b849:	39 cf                	cmp    edi,ecx
 100b84b:	75 ed                	jne    100b83a <pagingFindAvailableAddressToMapTo+0x85>
 100b84d:	eb 02                	jmp    100b851 <pagingFindAvailableAddressToMapTo+0x9c>
/home/yogi/src/os/chrisOSKernel/src/paging.c:38
 100b84f:	89 f9                	mov    ecx,edi
 100b851:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
/home/yogi/src/os/chrisOSKernel/src/paging.c:50
            else
                break;
        }

        //If we didn't find a page directory in use, put the first entry into use
        if (*dir==0)
 100b855:	83 3e 00             	cmp    DWORD PTR [esi],0x0
 100b858:	75 62                	jne    100b8bc <pagingFindAvailableAddressToMapTo+0x107>
/home/yogi/src/os/chrisOSKernel/src/paging.c:53
        {
            dir=(uint32_t*)pageDirAddress;
            *dir=(uint32_t)allocPages(PAGE_SIZE);
 100b85a:	83 ec 0c             	sub    esp,0xc
 100b85d:	68 00 10 00 00       	push   0x1000
 100b862:	e8 5c f4 ff ff       	call   100acc3 <allocPages>
 100b867:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
 100b86b:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:54
            pagingMapPage(pageDirAddress,*dir,*dir,0x07);
 100b86d:	6a 07                	push   0x7
 100b86f:	50                   	push   eax
 100b870:	50                   	push   eax
 100b871:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
 100b875:	e8 57 fe ff ff       	call   100b6d1 <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/paging.c:55
            pagingMapPage(KERNEL_PAGE_DIR_ADDRESS,*dir | KERNEL_PAGED_BASE_ADDRESS,*dir,0x03);
 100b87a:	8b 03                	mov    eax,DWORD PTR [ebx]
 100b87c:	83 c4 20             	add    esp,0x20
 100b87f:	6a 03                	push   0x3
 100b881:	50                   	push   eax
 100b882:	0d 00 00 00 c0       	or     eax,0xc0000000
 100b887:	50                   	push   eax
 100b888:	68 00 a0 4b 00       	push   0x4ba000
 100b88d:	e8 3f fe ff ff       	call   100b6d1 <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/paging.c:57
            *dir &= 0xFFFFF000;
            *dir |= 0x7;
 100b892:	8b 03                	mov    eax,DWORD PTR [ebx]
 100b894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
 100b898:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b89d:	83 c8 07             	or     eax,0x7
 100b8a0:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:59
            dirEntryNumber=0;
            printd(DEBUG_PAGING,"pFAATMT: No available directory entry, allocated one at 0x%08X, placed at PDE entry 0 (0x%08X)\n",*dir,dir);
 100b8a2:	53                   	push   ebx
 100b8a3:	50                   	push   eax
 100b8a4:	68 14 32 04 01       	push   0x1043214
 100b8a9:	6a 40                	push   0x40
 100b8ab:	e8 57 e4 ff ff       	call   1009d07 <printd>
 100b8b0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/paging.c:52
        }

        //If we didn't find a page directory in use, put the first entry into use
        if (*dir==0)
        {
            dir=(uint32_t*)pageDirAddress;
 100b8b3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
/home/yogi/src/os/chrisOSKernel/src/paging.c:58
            *dir=(uint32_t)allocPages(PAGE_SIZE);
            pagingMapPage(pageDirAddress,*dir,*dir,0x07);
            pagingMapPage(KERNEL_PAGE_DIR_ADDRESS,*dir | KERNEL_PAGED_BASE_ADDRESS,*dir,0x03);
            *dir &= 0xFFFFF000;
            *dir |= 0x7;
            dirEntryNumber=0;
 100b8b7:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:68
        foundPageEntryCount=0;
        foundPageTableEntry=0;
        foundPageTableEntryNum=0;
        
        tablePtr=(uint32_t*)*dir;
        tablePtr=(uint32_t*)((uint32_t)tablePtr & 0xFFFFF000);
 100b8bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100b8c0:	8b 00                	mov    eax,DWORD PTR [eax]
 100b8c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
 100b8c6:	89 c6                	mov    esi,eax
 100b8c8:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/paging.c:77
        
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Found PDE=0x%08X (0x%08X)\n",currentPDE,*currentPDE);
        
        //Find sequential table entries large enough to hold the requested amount of memory
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Finding free page table entries\n");
        for (int cnt=0;cnt<(PAGE_SIZE/4)-1;cnt++)
 100b8ce:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:65
        }

        currentPDE=dir;
        foundPageEntryCount=0;
        foundPageTableEntry=0;
        foundPageTableEntryNum=0;
 100b8d3:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:64
            printd(DEBUG_PAGING,"pFAATMT: No available directory entry, allocated one at 0x%08X, placed at PDE entry 0 (0x%08X)\n",*dir,dir);
        }

        currentPDE=dir;
        foundPageEntryCount=0;
        foundPageTableEntry=0;
 100b8d8:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:63
            dirEntryNumber=0;
            printd(DEBUG_PAGING,"pFAATMT: No available directory entry, allocated one at 0x%08X, placed at PDE entry 0 (0x%08X)\n",*dir,dir);
        }

        currentPDE=dir;
        foundPageEntryCount=0;
 100b8dd:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:80
        //Find sequential table entries large enough to hold the requested amount of memory
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Finding free page table entries\n");
        for (int cnt=0;cnt<(PAGE_SIZE/4)-1;cnt++)
        {
            //If entry is in use
            if (*tablePtr!=0)
 100b8e2:	83 3e 00             	cmp    DWORD PTR [esi],0x0
 100b8e5:	74 14                	je     100b8fb <pagingFindAvailableAddressToMapTo+0x146>
/home/yogi/src/os/chrisOSKernel/src/paging.c:85
            {
                //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Page %u of %u is in use (0x%08X=0x%08X), starting again\n",foundEntryCount+1,pagesToFind,tablePtr,*tablePtr);
                //reset the found entry count and move to the next entry
                foundPageEntryCount=0;
                tablePtr++;
 100b8e7:	83 c6 04             	add    esi,0x4
/home/yogi/src/os/chrisOSKernel/src/paging.c:87
                foundPageTableEntry=0;
                foundPageTableEntryNum=0;
 100b8ea:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:86
            {
                //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Page %u of %u is in use (0x%08X=0x%08X), starting again\n",foundEntryCount+1,pagesToFind,tablePtr,*tablePtr);
                //reset the found entry count and move to the next entry
                foundPageEntryCount=0;
                tablePtr++;
                foundPageTableEntry=0;
 100b8ef:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:84
            //If entry is in use
            if (*tablePtr!=0)
            {
                //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Page %u of %u is in use (0x%08X=0x%08X), starting again\n",foundEntryCount+1,pagesToFind,tablePtr,*tablePtr);
                //reset the found entry count and move to the next entry
                foundPageEntryCount=0;
 100b8f4:	bf 00 00 00 00       	mov    edi,0x0
 100b8f9:	eb 0f                	jmp    100b90a <pagingFindAvailableAddressToMapTo+0x155>
/home/yogi/src/os/chrisOSKernel/src/paging.c:92
                foundPageTableEntryNum=0;
            }
            else
            {
                //Entry not in use, increment the found entry count
                foundPageEntryCount++;
 100b8fb:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOSKernel/src/paging.c:94
                //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Page %u of %u available ... continuing\n",foundEntryCount,pagesToFind);
                if (foundPageTableEntry==0)
 100b8fe:	85 db                	test   ebx,ebx
 100b900:	75 04                	jne    100b906 <pagingFindAvailableAddressToMapTo+0x151>
/home/yogi/src/os/chrisOSKernel/src/paging.c:96
                {
                    foundPageTableEntry=(uint32_t)tablePtr;
 100b902:	89 f3                	mov    ebx,esi
/home/yogi/src/os/chrisOSKernel/src/paging.c:97
                    foundPageTableEntryNum=cnt;
 100b904:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:100
                }
                //If we found enough entries which aren't in use, bail out of the FOR
                if (foundPageEntryCount==pagesToFind)
 100b906:	39 fd                	cmp    ebp,edi
 100b908:	74 2b                	je     100b935 <pagingFindAvailableAddressToMapTo+0x180>
/home/yogi/src/os/chrisOSKernel/src/paging.c:77 (discriminator 2)
        
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Found PDE=0x%08X (0x%08X)\n",currentPDE,*currentPDE);
        
        //Find sequential table entries large enough to hold the requested amount of memory
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Finding free page table entries\n");
        for (int cnt=0;cnt<(PAGE_SIZE/4)-1;cnt++)
 100b90a:	83 c0 01             	add    eax,0x1
 100b90d:	3d ff 03 00 00       	cmp    eax,0x3ff
 100b912:	75 ce                	jne    100b8e2 <pagingFindAvailableAddressToMapTo+0x12d>
/home/yogi/src/os/chrisOSKernel/src/paging.c:109
                    break;
                }
            }
        }
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Not enough pages at dir entry 0x%08X (%u-%u)\n",currentPDE,foundEntryCount,pagesToFind);
        dir++;
 100b914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100b918:	8d 70 04             	lea    esi,[eax+0x4]
/home/yogi/src/os/chrisOSKernel/src/paging.c:110
        dirEntryNumber++;
 100b91b:	8d 79 01             	lea    edi,[ecx+0x1]
/home/yogi/src/os/chrisOSKernel/src/paging.c:111
    } while ( !found && currentPDE<lastPDE);
 100b91e:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
 100b922:	0f 92 c0             	setb   al
 100b925:	38 44 24 17          	cmp    BYTE PTR [esp+0x17],al
 100b929:	0f 82 cf fe ff ff    	jb     100b7fe <pagingFindAvailableAddressToMapTo+0x49>
 100b92f:	89 d7                	mov    edi,edx
 100b931:	89 ce                	mov    esi,ecx
 100b933:	eb 09                	jmp    100b93e <pagingFindAvailableAddressToMapTo+0x189>
 100b935:	89 d7                	mov    edi,edx
 100b937:	89 ce                	mov    esi,ecx
/home/yogi/src/os/chrisOSKernel/src/paging.c:103
                }
                //If we found enough entries which aren't in use, bail out of the FOR
                if (foundPageEntryCount==pagesToFind)
                {
                    //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Found available page entries at entry 0x%08X\n",foundPageTableEntry);
                    found=true;
 100b939:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
/home/yogi/src/os/chrisOSKernel/src/paging.c:113
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Not enough pages at dir entry 0x%08X (%u-%u)\n",currentPDE,foundEntryCount,pagesToFind);
        dir++;
        dirEntryNumber++;
    } while ( !found && currentPDE<lastPDE);
    
    if (!found)
 100b93e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
 100b943:	75 21                	jne    100b966 <pagingFindAvailableAddressToMapTo+0x1b1>
/home/yogi/src/os/chrisOSKernel/src/paging.c:114
        panic("pFAATMT: Could not find a free PTE, PDE=0x%08X\n",pageDirAddress);
 100b945:	83 ec 08             	sub    esp,0x8
 100b948:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
 100b94c:	68 74 32 04 01       	push   0x1043274
 100b951:	e8 12 df ff ff       	call   1009868 <panic>
 100b956:	83 c4 10             	add    esp,0x10
 100b959:	eb 0b                	jmp    100b966 <pagingFindAvailableAddressToMapTo+0x1b1>
/home/yogi/src/os/chrisOSKernel/src/paging.c:58
            *dir=(uint32_t)allocPages(PAGE_SIZE);
            pagingMapPage(pageDirAddress,*dir,*dir,0x07);
            pagingMapPage(KERNEL_PAGE_DIR_ADDRESS,*dir | KERNEL_PAGED_BASE_ADDRESS,*dir,0x03);
            *dir &= 0xFFFFF000;
            *dir |= 0x7;
            dirEntryNumber=0;
 100b95b:	89 f9                	mov    ecx,edi
 100b95d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
 100b961:	e9 56 ff ff ff       	jmp    100b8bc <pagingFindAvailableAddressToMapTo+0x107>
/home/yogi/src/os/chrisOSKernel/src/paging.c:118
    if (!found)
        panic("pFAATMT: Could not find a free PTE, PDE=0x%08X\n",pageDirAddress);

    dirEntryNumber--;
    
    printd(DEBUG_PAGING,"pFAATMT: dirEntry#=0x%08X, ptEntry#=0x%08X\n",dirEntryNumber,foundPageTableEntryNum);
 100b966:	57                   	push   edi
 100b967:	56                   	push   esi
 100b968:	68 a4 32 04 01       	push   0x10432a4
 100b96d:	6a 40                	push   0x40
 100b96f:	e8 93 e3 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:119
    lRetVal=(uint32_t)((dirEntryNumber*(PAGE_SIZE*1024)) + (foundPageTableEntryNum*PAGE_SIZE));
 100b974:	c1 e6 16             	shl    esi,0x16
 100b977:	89 f8                	mov    eax,edi
 100b979:	c1 e0 0c             	shl    eax,0xc
 100b97c:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:120
    printd(DEBUG_PAGING,"pFAATMT: Found PDE 0x%08X, starting PTE 0x%08X\n",currentPDE,foundPageTableEntry);
 100b97e:	53                   	push   ebx
 100b97f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b983:	68 d0 32 04 01       	push   0x10432d0
 100b988:	6a 40                	push   0x40
 100b98a:	e8 78 e3 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:121
    printd(DEBUG_PAGING,"\tfor 0x%08X bytes at virt address 0x%08X\n",pagesToFind*PAGE_SIZE,lRetVal);
 100b98f:	83 c4 20             	add    esp,0x20
 100b992:	56                   	push   esi
 100b993:	89 e8                	mov    eax,ebp
 100b995:	c1 e0 0c             	shl    eax,0xc
 100b998:	50                   	push   eax
 100b999:	68 00 33 04 01       	push   0x1043300
 100b99e:	6a 40                	push   0x40
 100b9a0:	e8 62 e3 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:123
    return lRetVal;
}
 100b9a5:	89 f0                	mov    eax,esi
 100b9a7:	83 c4 3c             	add    esp,0x3c
 100b9aa:	5b                   	pop    ebx
 100b9ab:	5e                   	pop    esi
 100b9ac:	5f                   	pop    edi
 100b9ad:	5d                   	pop    ebp
 100b9ae:	c3                   	ret    

0100b9af <pagingMapPageRange>:
pagingMapPageRange():
/home/yogi/src/os/chrisOSKernel/src/paging.c:283
    pagePtr[dirPtrVal]=physicalAddress | flags;
    printd(DEBUG_PAGING,"pmp:v=0x%08X via dir=0x%08X, page=0x%08X, to p=0x%08X, flags=%02X\n", virtualAddress, &dirPtr[(virtualAddress>>22)], &pagePtr[dirPtrVal],pagePtr[dirPtrVal],flags);
}

void pagingMapPageRange(uintptr_t pageDirAddress, uintptr_t startVirtualAddress, uintptr_t endVirtualAddress, uintptr_t startPhysicalAddress,uint8_t flags)
{
 100b9af:	55                   	push   ebp
 100b9b0:	57                   	push   edi
 100b9b1:	56                   	push   esi
 100b9b2:	53                   	push   ebx
 100b9b3:	83 ec 0c             	sub    esp,0xc
 100b9b6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 100b9ba:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
 100b9be:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
 100b9c2:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/src/paging.c:284
    while (startVirtualAddress<=endVirtualAddress)
 100b9c7:	3b 5c 24 28          	cmp    ebx,DWORD PTR [esp+0x28]
 100b9cb:	77 21                	ja     100b9ee <pagingMapPageRange+0x3f>
/home/yogi/src/os/chrisOSKernel/src/paging.c:285
        pagingMapPage(pageDirAddress,
 100b9cd:	0f b6 f8             	movzx  edi,al
 100b9d0:	81 c6 00 10 00 00    	add    esi,0x1000
 100b9d6:	81 c3 00 10 00 00    	add    ebx,0x1000
 100b9dc:	57                   	push   edi
 100b9dd:	56                   	push   esi
 100b9de:	53                   	push   ebx
 100b9df:	55                   	push   ebp
 100b9e0:	e8 ec fc ff ff       	call   100b6d1 <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/paging.c:284
    printd(DEBUG_PAGING,"pmp:v=0x%08X via dir=0x%08X, page=0x%08X, to p=0x%08X, flags=%02X\n", virtualAddress, &dirPtr[(virtualAddress>>22)], &pagePtr[dirPtrVal],pagePtr[dirPtrVal],flags);
}

void pagingMapPageRange(uintptr_t pageDirAddress, uintptr_t startVirtualAddress, uintptr_t endVirtualAddress, uintptr_t startPhysicalAddress,uint8_t flags)
{
    while (startVirtualAddress<=endVirtualAddress)
 100b9e5:	83 c4 10             	add    esp,0x10
 100b9e8:	39 5c 24 28          	cmp    DWORD PTR [esp+0x28],ebx
 100b9ec:	73 e2                	jae    100b9d0 <pagingMapPageRange+0x21>
/home/yogi/src/os/chrisOSKernel/src/paging.c:289
        pagingMapPage(pageDirAddress,
                startVirtualAddress+=0x1000,
                startPhysicalAddress+=0x1000,
                flags);
}
 100b9ee:	83 c4 0c             	add    esp,0xc
 100b9f1:	5b                   	pop    ebx
 100b9f2:	5e                   	pop    esi
 100b9f3:	5f                   	pop    edi
 100b9f4:	5d                   	pop    ebp
 100b9f5:	c3                   	ret    

0100b9f6 <pagingMapPageCount>:
pagingMapPageCount():
/home/yogi/src/os/chrisOSKernel/src/paging.c:291
void pagingMapPageCount(uintptr_t pageDirAddress, uintptr_t virtualAddress, uintptr_t physicalAddress,int pageCount, uint8_t flags)
{
 100b9f6:	55                   	push   ebp
 100b9f7:	57                   	push   edi
 100b9f8:	56                   	push   esi
 100b9f9:	53                   	push   ebx
 100b9fa:	83 ec 0c             	sub    esp,0xc
 100b9fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
 100ba01:	0f b6 54 24 30       	movzx  edx,BYTE PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/src/paging.c:292
    for (int cnt=0;cnt<pageCount;cnt++)
 100ba06:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
 100ba0b:	7e 32                	jle    100ba3f <pagingMapPageCount+0x49>
 100ba0d:	89 c3                	mov    ebx,eax
 100ba0f:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:293
        pagingMapPage(pageDirAddress,virtualAddress+(0x1000*cnt),physicalAddress+(0x1000*cnt),flags);
 100ba14:	0f b6 fa             	movzx  edi,dl
 100ba17:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
 100ba1b:	29 c5                	sub    ebp,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:293 (discriminator 3)
 100ba1d:	57                   	push   edi
 100ba1e:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
 100ba22:	50                   	push   eax
 100ba23:	53                   	push   ebx
 100ba24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 100ba28:	e8 a4 fc ff ff       	call   100b6d1 <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/paging.c:292 (discriminator 3)
                startPhysicalAddress+=0x1000,
                flags);
}
void pagingMapPageCount(uintptr_t pageDirAddress, uintptr_t virtualAddress, uintptr_t physicalAddress,int pageCount, uint8_t flags)
{
    for (int cnt=0;cnt<pageCount;cnt++)
 100ba2d:	83 c6 01             	add    esi,0x1
 100ba30:	81 c3 00 10 00 00    	add    ebx,0x1000
 100ba36:	83 c4 10             	add    esp,0x10
 100ba39:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
 100ba3d:	75 de                	jne    100ba1d <pagingMapPageCount+0x27>
/home/yogi/src/os/chrisOSKernel/src/paging.c:294
        pagingMapPage(pageDirAddress,virtualAddress+(0x1000*cnt),physicalAddress+(0x1000*cnt),flags);
}
 100ba3f:	83 c4 0c             	add    esp,0xc
 100ba42:	5b                   	pop    ebx
 100ba43:	5e                   	pop    esi
 100ba44:	5f                   	pop    edi
 100ba45:	5d                   	pop    ebp
 100ba46:	c3                   	ret    

0100ba47 <pagingMapPageIntoKernel>:
pagingMapPageIntoKernel():
/home/yogi/src/os/chrisOSKernel/src/paging.c:298

//Can only be called by kernel code
bool pagingMapPageIntoKernel(uintptr_t processCR3, uintptr_t virtualAddress, uint8_t flags)
{
 100ba47:	56                   	push   esi
 100ba48:	53                   	push   ebx
 100ba49:	83 ec 0c             	sub    esp,0xc
 100ba4c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
 100ba50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/src/paging.c:300
    
    pagingMapPage(KERNEL_PAGE_DIR_ADDRESS, virtualAddress, pagingGet4kPTEntryValueCR3(processCR3,virtualAddress), flags);
 100ba54:	56                   	push   esi
 100ba55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100ba59:	e8 7c fa ff ff       	call   100b4da <pagingGet4kPTEntryValueCR3>
 100ba5e:	0f b6 db             	movzx  ebx,bl
 100ba61:	53                   	push   ebx
 100ba62:	50                   	push   eax
 100ba63:	56                   	push   esi
 100ba64:	68 00 a0 4b 00       	push   0x4ba000
 100ba69:	e8 63 fc ff ff       	call   100b6d1 <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/paging.c:301
}
 100ba6e:	83 c4 24             	add    esp,0x24
 100ba71:	5b                   	pop    ebx
 100ba72:	5e                   	pop    esi
 100ba73:	c3                   	ret    

0100ba74 <isPageMapped>:
isPageMapped():
/home/yogi/src/os/chrisOSKernel/src/paging.c:304

bool isPageMapped(uintptr_t pageDirAddress, uintptr_t Address)
{
 100ba74:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/paging.c:305
    if (!pagingGet4kPTEntryValueCR3(pageDirAddress,Address))
 100ba77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100ba7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100ba7f:	e8 56 fa ff ff       	call   100b4da <pagingGet4kPTEntryValueCR3>
 100ba84:	85 c0                	test   eax,eax
 100ba86:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/src/paging.c:308
        return false;
    return true;
}
 100ba89:	83 c4 1c             	add    esp,0x1c
 100ba8c:	c3                   	ret    

0100ba8d <unMapPage>:
unMapPage():
/home/yogi/src/os/chrisOSKernel/src/paging.c:311

void unMapPage(uintptr_t pageDirAddress, uintptr_t pageToUnmap, uint8_t newFlags)
{
 100ba8d:	57                   	push   edi
 100ba8e:	56                   	push   esi
 100ba8f:	53                   	push   ebx
 100ba90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
 100ba94:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/src/paging.c:316
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)pageDirAddress;
    ptrVal=ptr[(pageToUnmap>>22)];
 100ba98:	89 c8                	mov    eax,ecx
 100ba9a:	c1 e8 16             	shr    eax,0x16
 100ba9d:	c1 e0 02             	shl    eax,0x2
 100baa0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
 100baa4:	8b 10                	mov    edx,DWORD PTR [eax]
/home/yogi/src/os/chrisOSKernel/src/paging.c:317
    if (ptrVal==0 && pageToUnmap < kE820MemoryBytes)
 100baa6:	85 d2                	test   edx,edx
 100baa8:	75 4b                	jne    100baf5 <unMapPage+0x68>
/home/yogi/src/os/chrisOSKernel/src/paging.c:317 (discriminator 1)
 100baaa:	bf 00 00 00 00       	mov    edi,0x0
 100baaf:	3b 3d 8c 95 12 00    	cmp    edi,DWORD PTR ds:0x12958c
 100bab5:	72 08                	jb     100babf <unMapPage+0x32>
 100bab7:	3b 0d 88 95 12 00    	cmp    ecx,DWORD PTR ds:0x129588
 100babd:	73 36                	jae    100baf5 <unMapPage+0x68>
/home/yogi/src/os/chrisOSKernel/src/paging.c:320
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(pageToUnmap>>22)]=0x20000063;
 100babf:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os/chrisOSKernel/src/paging.c:321
        ptrT[(pageToUnmap&0x003FFFFF/4096)]=0 | newFlags;
 100bac5:	89 ca                	mov    edx,ecx
 100bac7:	81 e2 ff 03 00 00    	and    edx,0x3ff
 100bacd:	8d 34 95 00 00 00 20 	lea    esi,[edx*4+0x20000000]
 100bad4:	0f b6 db             	movzx  ebx,bl
 100bad7:	89 1c 95 00 00 00 20 	mov    DWORD PTR [edx*4+0x20000000],ebx
/home/yogi/src/os/chrisOSKernel/src/paging.c:322
        printd(DEBUG_PAGING,"kMapPage: Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", pageToUnmap, &ptr[(pageToUnmap>>22)], &ptrT[(pageToUnmap&0x003FFFFF/4096)]);
 100bade:	83 ec 0c             	sub    esp,0xc
 100bae1:	56                   	push   esi
 100bae2:	50                   	push   eax
 100bae3:	51                   	push   ecx
 100bae4:	68 1c 22 04 01       	push   0x104221c
 100bae9:	6a 40                	push   0x40
 100baeb:	e8 17 e2 ff ff       	call   1009d07 <printd>
 100baf0:	83 c4 20             	add    esp,0x20
 100baf3:	eb 2f                	jmp    100bb24 <unMapPage+0x97>
/home/yogi/src/os/chrisOSKernel/src/paging.c:333
        ptrVal=ptr[pageToUnmap>>22];
        ptrVal=(ptrVal&0xFFFFF000);
        ptrT=(uint32_t*)ptrVal;
        //Now ptrVal will point to offset within page table
        ptrVal=(pageToUnmap&0x003FFFFF)/4096;
        ptrT[ptrVal]=0 | newFlags;
 100baf5:	89 d6                	mov    esi,edx
 100baf7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
 100bafd:	89 ca                	mov    edx,ecx
 100baff:	c1 ea 0a             	shr    edx,0xa
 100bb02:	81 e2 fc 0f 00 00    	and    edx,0xffc
 100bb08:	01 f2                	add    edx,esi
 100bb0a:	0f b6 db             	movzx  ebx,bl
 100bb0d:	89 1a                	mov    DWORD PTR [edx],ebx
/home/yogi/src/os/chrisOSKernel/src/paging.c:334
        printd(DEBUG_PAGING,"2) Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", pageToUnmap, &ptr[(pageToUnmap>>22)], &ptrT[ptrVal]);
 100bb0f:	83 ec 0c             	sub    esp,0xc
 100bb12:	52                   	push   edx
 100bb13:	50                   	push   eax
 100bb14:	51                   	push   ecx
 100bb15:	68 54 22 04 01       	push   0x1042254
 100bb1a:	6a 40                	push   0x40
 100bb1c:	e8 e6 e1 ff ff       	call   1009d07 <printd>
 100bb21:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/paging.c:336
    }
}
 100bb24:	5b                   	pop    ebx
 100bb25:	5e                   	pop    esi
 100bb26:	5f                   	pop    edi
 100bb27:	c3                   	ret    

0100bb28 <pagingSetPhysicalRangeRO>:
pagingSetPhysicalRangeRO():
/home/yogi/src/os/chrisOSKernel/src/paging.c:339

void pagingSetPhysicalRangeRO(uintptr_t pageDirAddress, uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
 100bb28:	83 ec 14             	sub    esp,0x14
 100bb2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 100bb2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/src/paging.c:340
    printd(DEBUG_PAGING,"kMakePhysicalRangeRO: Make 0x%08X(0x%08X)-0x%08X(0x%08X) r/o\n", startAddy, startAddy&0xFffff000, endAddy, endAddy&0xFFFFF000);
 100bb33:	89 d1                	mov    ecx,edx
 100bb35:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
 100bb3b:	51                   	push   ecx
 100bb3c:	52                   	push   edx
 100bb3d:	89 c2                	mov    edx,eax
 100bb3f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
 100bb45:	52                   	push   edx
 100bb46:	50                   	push   eax
 100bb47:	68 84 22 04 01       	push   0x1042284
 100bb4c:	6a 40                	push   0x40
 100bb4e:	e8 b4 e1 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:341
        panic("fix this!!!");
 100bb53:	83 c4 14             	add    esp,0x14
 100bb56:	68 c2 78 06 01       	push   0x10678c2
 100bb5b:	e8 08 dd ff ff       	call   1009868 <panic>
/home/yogi/src/os/chrisOSKernel/src/paging.c:343
        //SetVirtualRangeRO((startAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, (endAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, readOnly);
}
 100bb60:	83 c4 1c             	add    esp,0x1c
 100bb63:	c3                   	ret    

0100bb64 <pagingSetPageInUseFlag>:
pagingSetPageInUseFlag():
/home/yogi/src/os/chrisOSKernel/src/paging.c:346

void pagingSetPageInUseFlag(uintptr_t pageDirAddress, uintptr_t address, bool inUse)
{
 100bb64:	56                   	push   esi
 100bb65:	53                   	push   ebx
 100bb66:	83 ec 04             	sub    esp,0x4
 100bb69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 100bb6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/paging.c:348
    uintptr_t* ptEntry;
    printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
 100bb71:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
 100bb76:	74 38                	je     100bbb0 <pagingSetPageInUseFlag+0x4c>
 100bb78:	68 28 75 06 01       	push   0x1067528
 100bb7d:	53                   	push   ebx
 100bb7e:	68 c4 22 04 01       	push   0x10422c4
 100bb83:	6a 40                	push   0x40
 100bb85:	e8 7d e1 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:349
    ptEntry=(uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,address);
 100bb8a:	83 c4 08             	add    esp,0x8
 100bb8d:	53                   	push   ebx
 100bb8e:	56                   	push   esi
 100bb8f:	e8 03 f9 ff ff       	call   100b497 <pagingGet4kPTEntryAddressCR3>
 100bb94:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:350
    printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
 100bb96:	ff 30                	push   DWORD PTR [eax]
 100bb98:	50                   	push   eax
 100bb99:	68 08 23 04 01       	push   0x1042308
 100bb9e:	6a 40                	push   0x40
 100bba0:	e8 62 e1 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:352
    if (inUse)
        *ptEntry|=PAGING_IN_USE_FLAG_MASK;
 100bba5:	81 0b 00 08 00 00    	or     DWORD PTR [ebx],0x800
 100bbab:	83 c4 20             	add    esp,0x20
 100bbae:	eb 36                	jmp    100bbe6 <pagingSetPageInUseFlag+0x82>
/home/yogi/src/os/chrisOSKernel/src/paging.c:348
}

void pagingSetPageInUseFlag(uintptr_t pageDirAddress, uintptr_t address, bool inUse)
{
    uintptr_t* ptEntry;
    printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
 100bbb0:	68 24 75 06 01       	push   0x1067524
 100bbb5:	53                   	push   ebx
 100bbb6:	68 c4 22 04 01       	push   0x10422c4
 100bbbb:	6a 40                	push   0x40
 100bbbd:	e8 45 e1 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:349
    ptEntry=(uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,address);
 100bbc2:	83 c4 08             	add    esp,0x8
 100bbc5:	53                   	push   ebx
 100bbc6:	56                   	push   esi
 100bbc7:	e8 cb f8 ff ff       	call   100b497 <pagingGet4kPTEntryAddressCR3>
 100bbcc:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:350
    printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
 100bbce:	ff 30                	push   DWORD PTR [eax]
 100bbd0:	50                   	push   eax
 100bbd1:	68 08 23 04 01       	push   0x1042308
 100bbd6:	6a 40                	push   0x40
 100bbd8:	e8 2a e1 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:354
    if (inUse)
        *ptEntry|=PAGING_IN_USE_FLAG_MASK;
    else
        *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
 100bbdd:	81 23 ff f7 ff ff    	and    DWORD PTR [ebx],0xfffff7ff
 100bbe3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/paging.c:355
}
 100bbe6:	83 c4 04             	add    esp,0x4
 100bbe9:	5b                   	pop    ebx
 100bbea:	5e                   	pop    esi
 100bbeb:	c3                   	ret    

0100bbec <pagingSetPageRangeInUseFlag>:
pagingSetPageRangeInUseFlag():
/home/yogi/src/os/chrisOSKernel/src/paging.c:358

void pagingSetPageRangeInUseFlag(uintptr_t pageDirAddress, uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
 100bbec:	55                   	push   ebp
 100bbed:	57                   	push   edi
 100bbee:	56                   	push   esi
 100bbef:	53                   	push   ebx
 100bbf0:	83 ec 0c             	sub    esp,0xc
 100bbf3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 100bbf7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
 100bbfb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
 100bbff:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/src/paging.c:359
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
 100bc04:	39 fb                	cmp    ebx,edi
 100bc06:	73 19                	jae    100bc21 <pagingSetPageRangeInUseFlag+0x35>
/home/yogi/src/os/chrisOSKernel/src/paging.c:360 (discriminator 3)
        pagingSetPageInUseFlag(pageDirAddress,cnt,inUse);
 100bc08:	0f b6 f0             	movzx  esi,al
 100bc0b:	83 ec 04             	sub    esp,0x4
 100bc0e:	56                   	push   esi
 100bc0f:	53                   	push   ebx
 100bc10:	55                   	push   ebp
 100bc11:	e8 4e ff ff ff       	call   100bb64 <pagingSetPageInUseFlag>
 100bc16:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/src/paging.c:359 (discriminator 3)
        *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}

void pagingSetPageRangeInUseFlag(uintptr_t pageDirAddress, uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
 100bc1a:	83 c4 10             	add    esp,0x10
 100bc1d:	39 fb                	cmp    ebx,edi
 100bc1f:	72 ea                	jb     100bc0b <pagingSetPageRangeInUseFlag+0x1f>
/home/yogi/src/os/chrisOSKernel/src/paging.c:361
        pagingSetPageInUseFlag(pageDirAddress,cnt,inUse);
}
 100bc21:	83 c4 0c             	add    esp,0xc
 100bc24:	5b                   	pop    ebx
 100bc25:	5e                   	pop    esi
 100bc26:	5f                   	pop    edi
 100bc27:	5d                   	pop    ebp
 100bc28:	c3                   	ret    
 100bc29:	66 90                	xchg   ax,ax
 100bc2b:	90                   	nop

0100bc2c <destroyProcess>:
destroyProcess():
/home/yogi/src/os/chrisOSKernel/src/process.c:21

extern elfInfo_t* kExecLoadInfo;
extern int kExecLoadCount;

void destroyProcess(process_t* process)
{
 100bc2c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/src/process.c:22
    freePage(process);
 100bc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100bc33:	e8 f6 f1 ff ff       	call   100ae2e <freePage>
/home/yogi/src/os/chrisOSKernel/src/process.c:23
}
 100bc38:	83 c4 1c             	add    esp,0x1c
 100bc3b:	c3                   	ret    

0100bc3c <createProcess>:
createProcess():
/home/yogi/src/os/chrisOSKernel/src/process.c:26

process_t* createProcess(char* path,bool kernelProcess)
{
 100bc3c:	57                   	push   edi
 100bc3d:	56                   	push   esi
 100bc3e:	53                   	push   ebx
 100bc3f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 100bc43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/process.c:31

    process_t* process;
    

    printd(DEBUG_PROCESS,"Creating %s process for %s\n",kernelProcess?"kernel":"user",path);
 100bc47:	89 f0                	mov    eax,esi
 100bc49:	84 c0                	test   al,al
 100bc4b:	ba d5 78 06 01       	mov    edx,0x10678d5
 100bc50:	b8 ce 78 06 01       	mov    eax,0x10678ce
 100bc55:	0f 44 c2             	cmove  eax,edx
 100bc58:	57                   	push   edi
 100bc59:	50                   	push   eax
 100bc5a:	68 da 78 06 01       	push   0x10678da
 100bc5f:	68 00 00 04 00       	push   0x40000
 100bc64:	e8 9e e0 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/process.c:32
    process=(process_t*)malloc(sizeof(process_t));
 100bc69:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
 100bc70:	e8 eb f3 ff ff       	call   100b060 <malloc>
 100bc75:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/process.c:33
    process->path=(char*)malloc(512);
 100bc77:	c7 04 24 00 02 00 00 	mov    DWORD PTR [esp],0x200
 100bc7e:	e8 dd f3 ff ff       	call   100b060 <malloc>
 100bc83:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
/home/yogi/src/os/chrisOSKernel/src/process.c:34
    printd(DEBUG_PROCESS,"createProcess: Malloc'd 0x%08X for process->path\n",process->path);
 100bc86:	83 c4 0c             	add    esp,0xc
 100bc89:	50                   	push   eax
 100bc8a:	68 2c 33 04 01       	push   0x104332c
 100bc8f:	68 00 00 04 00       	push   0x40000
 100bc94:	e8 6e e0 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/process.c:35
    strcpy(process->path,path);
 100bc99:	83 c4 08             	add    esp,0x8
 100bc9c:	57                   	push   edi
 100bc9d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 100bca0:	e8 1b e1 ff ff       	call   1009dc0 <strcpy>
/home/yogi/src/os/chrisOSKernel/src/process.c:36
    printd(DEBUG_PROCESS,"createProcess: Copied path (0x%08X) to process->path (0x%08X)\n",path,process->path);
 100bca5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 100bca8:	57                   	push   edi
 100bca9:	68 60 33 04 01       	push   0x1043360
 100bcae:	68 00 00 04 00       	push   0x40000
 100bcb3:	e8 4f e0 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/process.c:37
    printd(DEBUG_PROCESS,"process->path (0x%08X)=%s\n",process->path,process->path);
 100bcb8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 100bcbb:	83 c4 20             	add    esp,0x20
 100bcbe:	50                   	push   eax
 100bcbf:	50                   	push   eax
 100bcc0:	68 f6 78 06 01       	push   0x10678f6
 100bcc5:	68 00 00 04 00       	push   0x40000
 100bcca:	e8 38 e0 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/process.c:38
    process->elf=&kExecLoadInfo[kExecLoadCount++];
 100bccf:	a1 40 99 12 00       	mov    eax,ds:0x129940
 100bcd4:	8d 50 01             	lea    edx,[eax+0x1]
 100bcd7:	89 15 40 99 12 00    	mov    DWORD PTR ds:0x129940,edx
 100bcdd:	69 c0 d9 18 00 00    	imul   eax,eax,0x18d9
 100bce3:	03 05 3c 99 12 00    	add    eax,DWORD PTR ds:0x12993c
 100bce9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
/home/yogi/src/os/chrisOSKernel/src/process.c:39
    process->task=createTask(kernelProcess);
 100bcec:	89 f0                	mov    eax,esi
 100bcee:	0f b6 f0             	movzx  esi,al
 100bcf1:	89 34 24             	mov    DWORD PTR [esp],esi
 100bcf4:	e8 f3 11 00 00       	call   100ceec <createTask>
 100bcf9:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/process.c:58
        process->task->tss->FS=getNonKernelDataGDTIndex();
        process->task->tss->GS=getNonKernelDataGDTIndex();
    }
*/
    //CR3 was set and PDir created by createTask.  Page tables will be created by the load process
    if (!sysLoadElf(process->path,process->elf,process->task->tss->CR3,false))
 100bcfb:	6a 00                	push   0x0
 100bcfd:	8b 00                	mov    eax,DWORD PTR [eax]
 100bcff:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100bd02:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 100bd05:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 100bd08:	e8 11 06 00 00       	call   100c31e <sysLoadElf>
 100bd0d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/process.c:59
        return NULL;
 100bd10:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/src/process.c:58
        process->task->tss->FS=getNonKernelDataGDTIndex();
        process->task->tss->GS=getNonKernelDataGDTIndex();
    }
*/
    //CR3 was set and PDir created by createTask.  Page tables will be created by the load process
    if (!sysLoadElf(process->path,process->elf,process->task->tss->CR3,false))
 100bd15:	85 c0                	test   eax,eax
 100bd17:	74 18                	je     100bd31 <createProcess+0xf5>
/home/yogi/src/os/chrisOSKernel/src/process.c:60
        return NULL;
    printd(DEBUG_PROCESS,"Created Process @ 0x%08X\n",process);
 100bd19:	83 ec 04             	sub    esp,0x4
 100bd1c:	53                   	push   ebx
 100bd1d:	68 11 79 06 01       	push   0x1067911
 100bd22:	68 00 00 04 00       	push   0x40000
 100bd27:	e8 db df ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/process.c:61
    return process;
 100bd2c:	83 c4 10             	add    esp,0x10
 100bd2f:	89 da                	mov    edx,ebx
/home/yogi/src/os/chrisOSKernel/src/process.c:62
 100bd31:	89 d0                	mov    eax,edx
 100bd33:	5b                   	pop    ebx
 100bd34:	5e                   	pop    esi
 100bd35:	5f                   	pop    edi
 100bd36:	c3                   	ret    
 100bd37:	90                   	nop

0100bd38 <syscall169>:
syscall169():
/home/yogi/src/os/chrisOSKernel/src/syscall.c:25

void syscall169()
{
    uint8_t temp;
 
    __asm__ volatile ("cli"); /* disable all interrupts */
 100bd38:	fa                   	cli    
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 100bd39:	e4 64                	in     al,0x64
 100bd3b:	89 c2                	mov    edx,eax
syscall169():
/home/yogi/src/os/chrisOSKernel/src/syscall.c:30
    /* Clear all keyboard buffers (output and command buffers) */
    do
    {
        temp = inb(KBRD_INTRFC); /* empty user data */
        if (check_flag(temp, KBRD_BIT_KDATA) != 0)
 100bd3d:	a8 01                	test   al,0x1
 100bd3f:	74 02                	je     100bd43 <syscall169+0xb>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 100bd41:	e4 60                	in     al,0x60
syscall169():
/home/yogi/src/os/chrisOSKernel/src/syscall.c:32
            inb(KBRD_IO); /* empty keyboard data */
    } while (check_flag(temp, KBRD_BIT_UDATA) != 0);
 100bd43:	f6 c2 02             	test   dl,0x2
 100bd46:	75 f1                	jne    100bd39 <syscall169+0x1>
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 100bd48:	b8 fe ff ff ff       	mov    eax,0xfffffffe
 100bd4d:	e6 64                	out    0x64,al
syscall169():
/home/yogi/src/os/chrisOSKernel/src/syscall.c:36 (discriminator 1)
 
    outb(KBRD_INTRFC, KBRD_RESET); /* pulse CPU reset line */
loop:
    __asm__ volatile ("hlt"); /* if that didn't work, halt the CPU */
 100bd4f:	f4                   	hlt    
 100bd50:	eb fd                	jmp    100bd4f <syscall169+0x17>
 100bd52:	66 90                	xchg   ax,ax

0100bd54 <_call_gate_wrapper>:
_call_gate_wrapper():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:556
    }
    return lsysExecRetVal;
}

void _call_gate_wrapper()
{
 100bd54:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:557
    printk("Returned from user process\n");
 100bd57:	68 2b 79 06 01       	push   0x106792b
 100bd5c:	e8 8e df ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:558
    STOPHERE2
 100bd61:	fa                   	cli    
 100bd62:	f4                   	hlt    
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:559
 100bd63:	83 c4 1c             	add    esp,0x1c
 100bd66:	c3                   	ret    

0100bd67 <strTabEntry>:
strTabEntry():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:50

#define GET_OLD_CR3 __asm__("mov ebx,cr3\n":[oldCR3] "=b" (oldCR3));
#define SWITCH_CR3 __asm__("mov cr3,eax\n"::[newCR3] "a" (newCR3));

char* strTabEntry(elfInfo_t* elf, int index)
{
 100bd67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
 100bd6b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:52
    char* addr=NULL;
    if (elf->dynamicInfo.strTableAddress && index < elf->dynamicInfo.strTableSize)
 100bd6f:	8b 82 b8 18 00 00    	mov    eax,DWORD PTR [edx+0x18b8]
 100bd75:	85 c0                	test   eax,eax
 100bd77:	74 11                	je     100bd8a <strTabEntry+0x23>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:55 (discriminator 1)
    {
        addr=(char*)elf->dynamicInfo.strTableAddress;
        addr+=index;
 100bd79:	01 c8                	add    eax,ecx
 100bd7b:	39 8a 8c 18 00 00    	cmp    DWORD PTR [edx+0x188c],ecx
 100bd81:	ba 00 00 00 00       	mov    edx,0x0
 100bd86:	0f 4e c2             	cmovle eax,edx
 100bd89:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:51
#define GET_OLD_CR3 __asm__("mov ebx,cr3\n":[oldCR3] "=b" (oldCR3));
#define SWITCH_CR3 __asm__("mov cr3,eax\n"::[newCR3] "a" (newCR3));

char* strTabEntry(elfInfo_t* elf, int index)
{
    char* addr=NULL;
 100bd8a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:58
    {
        addr=(char*)elf->dynamicInfo.strTableAddress;
        addr+=index;
    }
    return (char*)addr;
}
 100bd8f:	c3                   	ret    

0100bd90 <restoreCR3>:
restoreCR3():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:62

void restoreCR3()
{
    __asm__("mov cr3,eax\n"::[oldCR3] "a" (INIT_GDT_TABLE_ADDRESS));
 100bd90:	b8 00 48 16 00       	mov    eax,0x164800
 100bd95:	0f 22 d8             	mov    cr3,eax
 100bd98:	c3                   	ret    

0100bd99 <putDataOnPages>:
putDataOnPages():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:190

}

//Read the data from the file and write it to the virtual addresses, mapping new pages as necessary
bool putDataOnPages(uintptr_t CR3, uintptr_t virtAddr, void* file, bool writeFromFile, int size, byte nonFileWriteValue)
{
 100bd99:	55                   	push   ebp
 100bd9a:	57                   	push   edi
 100bd9b:	56                   	push   esi
 100bd9c:	53                   	push   ebx
 100bd9d:	83 ec 1c             	sub    esp,0x1c
 100bda0:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
 100bda5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
 100bda9:	0f b6 44 24 44       	movzx  eax,BYTE PTR [esp+0x44]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:191
    int startVirtAddr=virtAddr;
 100bdae:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:196
    int startPhysAddr=0;
    int countToWrite=0;
    int totalLeftToWrite=size;

    while(totalLeftToWrite>0)
 100bdb2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
 100bdb7:	0f 8e 96 01 00 00    	jle    100bf53 <putDataOnPages+0x1ba>
 100bdbd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:233
        printd(DEBUG_ELF_LOADER,"putDataOnPages: Reading %u bytes to 0x%08X (0x%08X)\n",countToWrite,startVirtAddr,startPhysAddr);
        //write the data to the page
        if (writeFromFile)
            fl_fread((void*)startPhysAddr, 1, countToWrite, file);
        else
            memset((void*)startPhysAddr,nonFileWriteValue,countToWrite);
 100bdc1:	0f b6 c0             	movzx  eax,al
 100bdc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:198
    int countToWrite=0;
    int totalLeftToWrite=size;

    while(totalLeftToWrite>0)
    {
        printd(DEBUG_ELF_LOADER,"putDataOnPages: Bytes left to go: 0x%08X\n",totalLeftToWrite);
 100bdc8:	83 ec 04             	sub    esp,0x4
 100bdcb:	55                   	push   ebp
 100bdcc:	68 a0 33 04 01       	push   0x10433a0
 100bdd1:	68 00 02 00 00       	push   0x200
 100bdd6:	e8 2c df ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:200
        //If either the write doesn't start at the beginning of the page, or there is less than a page left to write
        if ((!startVirtAddr%PAGE_SIZE) | (totalLeftToWrite < PAGE_SIZE))
 100bddb:	83 c4 10             	add    esp,0x10
 100bdde:	85 ff                	test   edi,edi
 100bde0:	74 08                	je     100bdea <putDataOnPages+0x51>
 100bde2:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
 100bde8:	7f 2b                	jg     100be15 <putDataOnPages+0x7c>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:202
        {
                countToWrite=totalLeftToWrite%PAGE_SIZE;
 100bdea:	89 ea                	mov    edx,ebp
 100bdec:	c1 fa 1f             	sar    edx,0x1f
 100bdef:	c1 ea 14             	shr    edx,0x14
 100bdf2:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
 100bdf6:	25 ff 0f 00 00       	and    eax,0xfff
 100bdfb:	29 d0                	sub    eax,edx
 100bdfd:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:203
                printd(DEBUG_ELF_LOADER,"putDataOnPages: Non-aligned or not full page write, writing 0x%08X bytes to 0x%08X\n",countToWrite,startVirtAddr);
 100bdff:	57                   	push   edi
 100be00:	50                   	push   eax
 100be01:	68 cc 33 04 01       	push   0x10433cc
 100be06:	68 00 02 00 00       	push   0x200
 100be0b:	e8 f7 de ff ff       	call   1009d07 <printd>
 100be10:	83 c4 10             	add    esp,0x10
 100be13:	eb 1b                	jmp    100be30 <putDataOnPages+0x97>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:208
        }
        else
        {
                countToWrite=PAGE_SIZE;
                printd(DEBUG_ELF_LOADER,"putDataOnPages: Full page write, writing 1 page to 0x%08X\n",startVirtAddr);
 100be15:	83 ec 04             	sub    esp,0x4
 100be18:	57                   	push   edi
 100be19:	68 20 34 04 01       	push   0x1043420
 100be1e:	68 00 02 00 00       	push   0x200
 100be23:	e8 df de ff ff       	call   1009d07 <printd>
 100be28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:207
                countToWrite=totalLeftToWrite%PAGE_SIZE;
                printd(DEBUG_ELF_LOADER,"putDataOnPages: Non-aligned or not full page write, writing 0x%08X bytes to 0x%08X\n",countToWrite,startVirtAddr);
        }
        else
        {
                countToWrite=PAGE_SIZE;
 100be2b:	be 00 10 00 00       	mov    esi,0x1000
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:213
                printd(DEBUG_ELF_LOADER,"putDataOnPages: Full page write, writing 1 page to 0x%08X\n",startVirtAddr);
        }
        
        //find out if page is mapped
        //printd(DEBUG_ELF_LOADER,"isPageMapped returning %s for startVirtAddr=0x%08X\n",isPageMapped(CR3,startVirtAddr)==true?"true":"false",startVirtAddr);
        if (isPageMapped(CR3,startVirtAddr))
 100be30:	83 ec 08             	sub    esp,0x8
 100be33:	57                   	push   edi
 100be34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100be38:	e8 37 fc ff ff       	call   100ba74 <isPageMapped>
 100be3d:	83 c4 10             	add    esp,0x10
 100be40:	84 c0                	test   al,al
 100be42:	74 32                	je     100be76 <putDataOnPages+0xdd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:215
        {
            startPhysAddr=pagingGet4kPTEntryValueCR3(CR3,startVirtAddr) & 0xFFFFF000;  //Clear the last 3 bytes of the 
 100be44:	83 ec 08             	sub    esp,0x8
 100be47:	57                   	push   edi
 100be48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100be4c:	e8 89 f6 ff ff       	call   100b4da <pagingGet4kPTEntryValueCR3>
 100be51:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:216
            startPhysAddr |= (startVirtAddr & 0x00000FFF);
 100be56:	89 fb                	mov    ebx,edi
 100be58:	81 e3 ff 0f 00 00    	and    ebx,0xfff
 100be5e:	09 c3                	or     ebx,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:217
            printd(DEBUG_ELF_LOADER,"putDataOnPages: V=0x%08X already mapped to P=0x%08X\n",startVirtAddr,startPhysAddr);
 100be60:	53                   	push   ebx
 100be61:	57                   	push   edi
 100be62:	68 5c 34 04 01       	push   0x104345c
 100be67:	68 00 02 00 00       	push   0x200
 100be6c:	e8 96 de ff ff       	call   1009d07 <printd>
 100be71:	83 c4 20             	add    esp,0x20
 100be74:	eb 79                	jmp    100beef <putDataOnPages+0x156>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:221
        }
        else
        {
            startPhysAddr=(uintptr_t)allocPages(size) | (startVirtAddr & 0x00000FFF);
 100be76:	83 ec 0c             	sub    esp,0xc
 100be79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 100be7d:	e8 41 ee ff ff       	call   100acc3 <allocPages>
 100be82:	89 fa                	mov    edx,edi
 100be84:	81 e2 ff 0f 00 00    	and    edx,0xfff
 100be8a:	09 d0                	or     eax,edx
 100be8c:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:222
            pagingMapPage(CR3,startVirtAddr,startPhysAddr,0x7);
 100be8e:	6a 07                	push   0x7
 100be90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
 100be94:	50                   	push   eax
 100be95:	57                   	push   edi
 100be96:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 100be9a:	e8 32 f8 ff ff       	call   100b6d1 <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:223
            printd(DEBUG_ELF_LOADER,"putDataOnPages: V=0x%08X not mapped, mapped to P=0x%08X\n",startVirtAddr,startPhysAddr);
 100be9f:	83 c4 20             	add    esp,0x20
 100bea2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
 100bea6:	57                   	push   edi
 100bea7:	68 94 34 04 01       	push   0x1043494
 100beac:	68 00 02 00 00       	push   0x200
 100beb1:	e8 51 de ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:224
            pagingMapPage(oldCR3,startPhysAddr | KERNEL_PAGED_BASE_ADDRESS,startPhysAddr,0x7);
 100beb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 100beba:	89 c1                	mov    ecx,eax
 100bebc:	81 c9 00 00 00 c0    	or     ecx,0xc0000000
 100bec2:	6a 07                	push   0x7
 100bec4:	50                   	push   eax
 100bec5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
 100bec9:	51                   	push   ecx
 100beca:	ff 35 88 9c 07 01    	push   DWORD PTR ds:0x1079c88
 100bed0:	e8 fc f7 ff ff       	call   100b6d1 <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:225
            printd(DEBUG_ELF_LOADER,"putDataOnPages: V=0x%08X also mapped to KP=0x%08X\n",startVirtAddr,startPhysAddr| KERNEL_PAGED_BASE_ADDRESS);
 100bed5:	83 c4 20             	add    esp,0x20
 100bed8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
 100bedc:	57                   	push   edi
 100bedd:	68 d0 34 04 01       	push   0x10434d0
 100bee2:	68 00 02 00 00       	push   0x200
 100bee7:	e8 1b de ff ff       	call   1009d07 <printd>
 100beec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:228
        }
        //if page is not mapped, map it!
        printd(DEBUG_ELF_LOADER,"putDataOnPages: Reading %u bytes to 0x%08X (0x%08X)\n",countToWrite,startVirtAddr,startPhysAddr);
 100beef:	83 ec 0c             	sub    esp,0xc
 100bef2:	53                   	push   ebx
 100bef3:	57                   	push   edi
 100bef4:	56                   	push   esi
 100bef5:	68 04 35 04 01       	push   0x1043504
 100befa:	68 00 02 00 00       	push   0x200
 100beff:	e8 03 de ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:230
        //write the data to the page
        if (writeFromFile)
 100bf04:	83 c4 20             	add    esp,0x20
 100bf07:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
 100bf0c:	74 12                	je     100bf20 <putDataOnPages+0x187>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:231
            fl_fread((void*)startPhysAddr, 1, countToWrite, file);
 100bf0e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
 100bf12:	56                   	push   esi
 100bf13:	6a 01                	push   0x1
 100bf15:	53                   	push   ebx
 100bf16:	e8 6a 91 ff ff       	call   1005085 <fl_fread>
 100bf1b:	83 c4 10             	add    esp,0x10
 100bf1e:	eb 11                	jmp    100bf31 <putDataOnPages+0x198>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:233
        else
            memset((void*)startPhysAddr,nonFileWriteValue,countToWrite);
 100bf20:	83 ec 04             	sub    esp,0x4
 100bf23:	56                   	push   esi
 100bf24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 100bf28:	53                   	push   ebx
 100bf29:	e8 05 d0 ff ff       	call   1008f33 <memset>
 100bf2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:235
        //Decrement the total left to write by the count written
        totalLeftToWrite-=countToWrite;
 100bf31:	29 f5                	sub    ebp,esi
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:236
        printd(DEBUG_ELF_LOADER,"putDataOnPages: Page written, 0x%08X bytes left to go\n",totalLeftToWrite);
 100bf33:	83 ec 04             	sub    esp,0x4
 100bf36:	55                   	push   ebp
 100bf37:	68 3c 35 04 01       	push   0x104353c
 100bf3c:	68 00 02 00 00       	push   0x200
 100bf41:	e8 c1 dd ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:237
        startVirtAddr+=countToWrite;
 100bf46:	01 f7                	add    edi,esi
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:196
    int startVirtAddr=virtAddr;
    int startPhysAddr=0;
    int countToWrite=0;
    int totalLeftToWrite=size;

    while(totalLeftToWrite>0)
 100bf48:	83 c4 10             	add    esp,0x10
 100bf4b:	85 ed                	test   ebp,ebp
 100bf4d:	0f 8f 75 fe ff ff    	jg     100bdc8 <putDataOnPages+0x2f>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:241
        printd(DEBUG_ELF_LOADER,"putDataOnPages: Page written, 0x%08X bytes left to go\n",totalLeftToWrite);
        startVirtAddr+=countToWrite;
        startPhysAddr+=countToWrite;
    }
    return true;
}
 100bf53:	b8 01 00 00 00       	mov    eax,0x1
 100bf58:	83 c4 1c             	add    esp,0x1c
 100bf5b:	5b                   	pop    ebx
 100bf5c:	5e                   	pop    esi
 100bf5d:	5f                   	pop    edi
 100bf5e:	5d                   	pop    ebp
 100bf5f:	c3                   	ret    

0100bf60 <loadSections>:
loadSections():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:244

bool loadSections(void* file,elfInfo_t* elfInfo,uintptr_t CR3,bool isLibrary)
{
 100bf60:	55                   	push   ebp
 100bf61:	57                   	push   edi
 100bf62:	56                   	push   esi
 100bf63:	53                   	push   ebx
 100bf64:	83 ec 20             	sub    esp,0x20
 100bf67:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:248
    uint32_t virtualLoadAddress;
    
    //Go to the beginning of the file and get the elf header
    fl_fseek(file, 0, SEEK_SET);
 100bf6b:	6a 00                	push   0x0
 100bf6d:	6a 00                	push   0x0
 100bf6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100bf73:	e8 42 93 ff ff       	call   10052ba <fl_fseek>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:249
    fl_fread(&elfInfo->hdr, sizeof(elfInfo->hdr),1,file);
 100bf78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
 100bf7c:	6a 01                	push   0x1
 100bf7e:	6a 34                	push   0x34
 100bf80:	56                   	push   esi
 100bf81:	e8 ff 90 ff ff       	call   1005085 <fl_fread>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:250
    if (elfInfo->hdr.e_ident[0] != 0x7F) 
 100bf86:	83 c4 20             	add    esp,0x20
 100bf89:	80 3e 7f             	cmp    BYTE PTR [esi],0x7f
 100bf8c:	74 48                	je     100bfd6 <loadSections+0x76>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:251
        if (elfInfo->hdr.e_ident[1] != 'E') 
 100bf8e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:252
            if (elfInfo->hdr.e_ident[1] != 'L') 
 100bf92:	3c 4c                	cmp    al,0x4c
 100bf94:	74 40                	je     100bfd6 <loadSections+0x76>
 100bf96:	3c 45                	cmp    al,0x45
 100bf98:	74 3c                	je     100bfd6 <loadSections+0x76>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:253
                if (elfInfo->hdr.e_ident[2] != 'F')
 100bf9a:	0f b6 56 02          	movzx  edx,BYTE PTR [esi+0x2]
 100bf9e:	80 fa 46             	cmp    dl,0x46
 100bfa1:	74 33                	je     100bfd6 <loadSections+0x76>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:255
                {
                    printd(DEBUG_ELF_LOADER,"Invalid ELF magic '%c' '%c' '%c', cannot load", elfInfo->hdr.e_ident[1], elfInfo->hdr.e_ident[2], elfInfo->hdr.e_ident[3]);
 100bfa3:	83 ec 0c             	sub    esp,0xc
 100bfa6:	0f b6 4e 03          	movzx  ecx,BYTE PTR [esi+0x3]
 100bfaa:	51                   	push   ecx
 100bfab:	0f b6 d2             	movzx  edx,dl
 100bfae:	52                   	push   edx
 100bfaf:	0f b6 c0             	movzx  eax,al
 100bfb2:	50                   	push   eax
 100bfb3:	68 74 35 04 01       	push   0x1043574
 100bfb8:	68 00 02 00 00       	push   0x200
 100bfbd:	e8 45 dd ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:256
                    elfInfo->loadCompleted=false;
 100bfc2:	c6 86 d8 18 00 00 00 	mov    BYTE PTR [esi+0x18d8],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:257
                    return false;
 100bfc9:	83 c4 20             	add    esp,0x20
 100bfcc:	b8 00 00 00 00       	mov    eax,0x0
 100bfd1:	e9 40 03 00 00       	jmp    100c316 <loadSections+0x3b6>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:261
                }
    
    //Make sure the file is viable
    if (elfInfo->hdr.e_type!=ET_EXEC && elfInfo->hdr.e_type!=ET_DYN)
 100bfd6:	0f b7 46 10          	movzx  eax,WORD PTR [esi+0x10]
 100bfda:	8d 50 fe             	lea    edx,[eax-0x2]
 100bfdd:	66 83 fa 01          	cmp    dx,0x1
 100bfe1:	76 2a                	jbe    100c00d <loadSections+0xad>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:263
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF type 0x%04X, cannot load\n", elfInfo->hdr.e_type);
 100bfe3:	83 ec 04             	sub    esp,0x4
 100bfe6:	0f b7 c0             	movzx  eax,ax
 100bfe9:	50                   	push   eax
 100bfea:	68 a4 35 04 01       	push   0x10435a4
 100bfef:	68 00 02 00 00       	push   0x200
 100bff4:	e8 0e dd ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:264
        elfInfo->loadCompleted=false;
 100bff9:	c6 86 d8 18 00 00 00 	mov    BYTE PTR [esi+0x18d8],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:265
        return false;
 100c000:	83 c4 10             	add    esp,0x10
 100c003:	b8 00 00 00 00       	mov    eax,0x0
 100c008:	e9 09 03 00 00       	jmp    100c316 <loadSections+0x3b6>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:267
    }
    if (elfInfo->hdr.e_machine!=EM_386)
 100c00d:	66 83 7e 12 03       	cmp    WORD PTR [esi+0x12],0x3
 100c012:	74 2a                	je     100c03e <loadSections+0xde>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:269
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF architecture 0x%04X, cannot load\n", elfInfo->hdr.e_type);
 100c014:	83 ec 04             	sub    esp,0x4
 100c017:	0f b7 c0             	movzx  eax,ax
 100c01a:	50                   	push   eax
 100c01b:	68 c8 35 04 01       	push   0x10435c8
 100c020:	68 00 02 00 00       	push   0x200
 100c025:	e8 dd dc ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:270
        elfInfo->loadCompleted=false;
 100c02a:	c6 86 d8 18 00 00 00 	mov    BYTE PTR [esi+0x18d8],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:271
        return false;
 100c031:	83 c4 10             	add    esp,0x10
 100c034:	b8 00 00 00 00       	mov    eax,0x0
 100c039:	e9 d8 02 00 00       	jmp    100c316 <loadSections+0x3b6>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:275
    }
    
    //Get the section header tablex
    printd(DEBUG_ELF_LOADER,"section header record count= %u\n", elfInfo->hdr.e_shnum);
 100c03e:	83 ec 04             	sub    esp,0x4
 100c041:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
 100c045:	50                   	push   eax
 100c046:	68 f4 35 04 01       	push   0x10435f4
 100c04b:	68 00 02 00 00       	push   0x200
 100c050:	e8 b2 dc ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:276
    elfInfo->secHdrRecordCount= elfInfo->hdr.e_shnum;
 100c055:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
 100c059:	89 86 44 0e 00 00    	mov    DWORD PTR [esi+0xe44],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:278

    printd(DEBUG_ELF_LOADER,"e_shentsize=%u, oursize=%u\n", elfInfo->hdr.e_shentsize, sizeof(Elf32_Shdr) );
 100c05f:	6a 28                	push   0x28
 100c061:	0f b7 46 2e          	movzx  eax,WORD PTR [esi+0x2e]
 100c065:	50                   	push   eax
 100c066:	68 47 79 06 01       	push   0x1067947
 100c06b:	68 00 02 00 00       	push   0x200
 100c070:	e8 92 dc ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:279
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_shoff);
 100c075:	83 c4 1c             	add    esp,0x1c
 100c078:	ff 76 20             	push   DWORD PTR [esi+0x20]
 100c07b:	68 63 79 06 01       	push   0x1067963
 100c080:	68 00 02 00 00       	push   0x200
 100c085:	e8 7d dc ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:280
    fl_fseek(file, elfInfo->hdr.e_shoff,SEEK_SET);
 100c08a:	83 c4 0c             	add    esp,0xc
 100c08d:	6a 00                	push   0x0
 100c08f:	ff 76 20             	push   DWORD PTR [esi+0x20]
 100c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100c096:	e8 1f 92 ff ff       	call   10052ba <fl_fseek>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:281
    printd(DEBUG_ELF_LOADER,"reading SHOFF: 0x%08X bytes (s=0x%08X*n=0x%08X), to 0x%08X\n",elfInfo->hdr.e_shentsize*elfInfo->hdr.e_shnum,elfInfo->hdr.e_shentsize,elfInfo->hdr.e_shnum,elfInfo->secHdrTable);
 100c09b:	8d 5e 34             	lea    ebx,[esi+0x34]
 100c09e:	0f b7 56 2e          	movzx  edx,WORD PTR [esi+0x2e]
 100c0a2:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
 100c0a6:	83 c4 08             	add    esp,0x8
 100c0a9:	53                   	push   ebx
 100c0aa:	50                   	push   eax
 100c0ab:	52                   	push   edx
 100c0ac:	0f af c2             	imul   eax,edx
 100c0af:	50                   	push   eax
 100c0b0:	68 18 36 04 01       	push   0x1043618
 100c0b5:	68 00 02 00 00       	push   0x200
 100c0ba:	e8 48 dc ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:282
    fl_fread(elfInfo->secHdrTable, elfInfo->hdr.e_shentsize,elfInfo->hdr.e_shnum,file);
 100c0bf:	83 c4 20             	add    esp,0x20
 100c0c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 100c0c6:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
 100c0ca:	50                   	push   eax
 100c0cb:	0f b7 46 2e          	movzx  eax,WORD PTR [esi+0x2e]
 100c0cf:	50                   	push   eax
 100c0d0:	53                   	push   ebx
 100c0d1:	e8 af 8f ff ff       	call   1005085 <fl_fread>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:284
    //Get the program header table
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_phoff);
 100c0d6:	83 c4 0c             	add    esp,0xc
 100c0d9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
 100c0dc:	68 63 79 06 01       	push   0x1067963
 100c0e1:	68 00 02 00 00       	push   0x200
 100c0e6:	e8 1c dc ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:285
    printd(DEBUG_ELF_LOADER,"reading PHOFF: 0x%08X bytes (s=0x%08X*n=0x%08X), to 0x%08X\n",elfInfo->hdr.e_phentsize*elfInfo->hdr.e_phnum,elfInfo->hdr.e_phentsize,elfInfo->hdr.e_phnum,elfInfo->pgmHdrTable);
 100c0eb:	8d 9e 04 08 00 00    	lea    ebx,[esi+0x804]
 100c0f1:	0f b7 56 2a          	movzx  edx,WORD PTR [esi+0x2a]
 100c0f5:	0f b7 46 2c          	movzx  eax,WORD PTR [esi+0x2c]
 100c0f9:	83 c4 08             	add    esp,0x8
 100c0fc:	53                   	push   ebx
 100c0fd:	50                   	push   eax
 100c0fe:	52                   	push   edx
 100c0ff:	0f af c2             	imul   eax,edx
 100c102:	50                   	push   eax
 100c103:	68 54 36 04 01       	push   0x1043654
 100c108:	68 00 02 00 00       	push   0x200
 100c10d:	e8 f5 db ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:286
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
 100c112:	83 c4 1c             	add    esp,0x1c
 100c115:	6a 00                	push   0x0
 100c117:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
 100c11a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100c11e:	e8 97 91 ff ff       	call   10052ba <fl_fseek>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:287
    fl_fread(elfInfo->pgmHdrTable, elfInfo->hdr.e_phentsize,elfInfo->hdr.e_phnum,file);
 100c123:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
 100c127:	0f b7 46 2c          	movzx  eax,WORD PTR [esi+0x2c]
 100c12b:	50                   	push   eax
 100c12c:	0f b7 46 2a          	movzx  eax,WORD PTR [esi+0x2a]
 100c130:	50                   	push   eax
 100c131:	53                   	push   ebx
 100c132:	e8 4e 8f ff ff       	call   1005085 <fl_fread>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:289
    //Process the program header table and load all of the sections in the file into memory
    for (int pgmSectionNum=0;pgmSectionNum<elfInfo->hdr.e_phnum;pgmSectionNum++)
 100c137:	83 c4 20             	add    esp,0x20
 100c13a:	66 83 7e 2c 00       	cmp    WORD PTR [esi+0x2c],0x0
 100c13f:	0f 84 b7 01 00 00    	je     100c2fc <loadSections+0x39c>
 100c145:	8d 9e 18 08 00 00    	lea    ebx,[esi+0x818]
 100c14b:	bf 00 00 00 00       	mov    edi,0x0
 100c150:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
 100c154:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:291
    {
        virtualLoadAddress = elfInfo->pgmHdrTable[pgmSectionNum].p_vaddr;
 100c156:	8b 6b f4             	mov    ebp,DWORD PTR [ebx-0xc]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:298
        {
            //virtualLoadAddress+=libLoadOffset;
            //elfInfo->pgmHdrTable[cnt].p_vaddr=virtualLoadAddress;
        }

        if (virtualLoadAddress==(uint32_t)KERNEL_DATA_LOAD_ADDRESS)
 100c159:	39 2d 00 00 12 00    	cmp    DWORD PTR ds:0x120000,ebp
 100c15f:	75 19                	jne    100c17a <loadSections+0x21a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:300
        {
            printd(DEBUG_ELF_LOADER,"Section %u load address is kernel data base address (0x%08X), skipping load\n",pgmSectionNum,virtualLoadAddress);
 100c161:	55                   	push   ebp
 100c162:	57                   	push   edi
 100c163:	68 90 36 04 01       	push   0x1043690
 100c168:	68 00 02 00 00       	push   0x200
 100c16d:	e8 95 db ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:301
            continue;
 100c172:	83 c4 10             	add    esp,0x10
 100c175:	e9 6c 01 00 00       	jmp    100c2e6 <loadSections+0x386>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:303
        }
        else if (elfInfo->pgmHdrTable[pgmSectionNum].p_offset==elfInfo->hdr.e_phoff)
 100c17a:	8b 43 f0             	mov    eax,DWORD PTR [ebx-0x10]
 100c17d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
 100c181:	3b 41 1c             	cmp    eax,DWORD PTR [ecx+0x1c]
 100c184:	75 19                	jne    100c19f <loadSections+0x23f>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:305
        {
            printd(DEBUG_ELF_LOADER,"Section %u file offset is program header address (0x%08X),skipping load\n",pgmSectionNum,elfInfo->pgmHdrTable[pgmSectionNum].p_offset);
 100c186:	50                   	push   eax
 100c187:	57                   	push   edi
 100c188:	68 e0 36 04 01       	push   0x10436e0
 100c18d:	68 00 02 00 00       	push   0x200
 100c192:	e8 70 db ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:306
            continue;
 100c197:	83 c4 10             	add    esp,0x10
 100c19a:	e9 47 01 00 00       	jmp    100c2e6 <loadSections+0x386>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:308
        }
        if (virtualLoadAddress!=0 && elfInfo->libLoadAddress==0 && (elfInfo->hdr.e_type!=ET_REL && elfInfo->hdr.e_type!=ET_DYN))
 100c19f:	85 ed                	test   ebp,ebp
 100c1a1:	74 3f                	je     100c1e2 <loadSections+0x282>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:308 (discriminator 1)
 100c1a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100c1a7:	83 b8 d4 18 00 00 00 	cmp    DWORD PTR [eax+0x18d4],0x0
 100c1ae:	75 32                	jne    100c1e2 <loadSections+0x282>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:308 (discriminator 2)
 100c1b0:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
 100c1b4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
 100c1b9:	83 e0 fd             	and    eax,0xfffffffd
 100c1bc:	66 83 f8 01          	cmp    ax,0x1
 100c1c0:	74 20                	je     100c1e2 <loadSections+0x282>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:310
        {
            elfInfo->libLoadAddress=(uintptr_t)virtualLoadAddress;
 100c1c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100c1c6:	89 a8 d4 18 00 00    	mov    DWORD PTR [eax+0x18d4],ebp
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:311
            printd(DEBUG_ELF_LOADER,"Setting main load address to 0x%08X\n",virtualLoadAddress);
 100c1cc:	83 ec 04             	sub    esp,0x4
 100c1cf:	55                   	push   ebp
 100c1d0:	68 2c 37 04 01       	push   0x104372c
 100c1d5:	68 00 02 00 00       	push   0x200
 100c1da:	e8 28 db ff ff       	call   1009d07 <printd>
 100c1df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:314
            
        }
        if (elfInfo->pgmHdrTable[pgmSectionNum].p_filesz>0)
 100c1e2:	83 7e fc 00          	cmp    DWORD PTR [esi-0x4],0x0
 100c1e6:	0f 84 b7 00 00 00    	je     100c2a3 <loadSections+0x343>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:316
        {
            printd(DEBUG_ELF_LOADER,"Found loadable section (fsize > 0), seeking to 0x%08X ...\n",elfInfo->pgmHdrTable[pgmSectionNum].p_offset);
 100c1ec:	83 ec 04             	sub    esp,0x4
 100c1ef:	ff 76 f0             	push   DWORD PTR [esi-0x10]
 100c1f2:	68 54 37 04 01       	push   0x1043754
 100c1f7:	68 00 02 00 00       	push   0x200
 100c1fc:	e8 06 db ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:318
            //Seek to the loadable section in the file
            fl_fseek(file, elfInfo->pgmHdrTable[pgmSectionNum].p_offset, SEEK_SET);
 100c201:	83 c4 0c             	add    esp,0xc
 100c204:	6a 00                	push   0x0
 100c206:	ff 76 f0             	push   DWORD PTR [esi-0x10]
 100c209:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100c20d:	e8 a8 90 ff ff       	call   10052ba <fl_fseek>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:321
            
            //Get pages 
            printd(DEBUG_ELF_LOADER,"Allocating pages to store %u bytes of data on\n",elfInfo->pgmHdrTable[pgmSectionNum].p_memsz);
 100c212:	83 c4 0c             	add    esp,0xc
 100c215:	ff 36                	push   DWORD PTR [esi]
 100c217:	68 90 37 04 01       	push   0x1043790
 100c21c:	68 00 02 00 00       	push   0x200
 100c221:	e8 e1 da ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:322
            if (!putDataOnPages(CR3,virtualLoadAddress,file,true,elfInfo->pgmHdrTable[pgmSectionNum].p_memsz,0))
 100c226:	83 c4 08             	add    esp,0x8
 100c229:	6a 00                	push   0x0
 100c22b:	ff 36                	push   DWORD PTR [esi]
 100c22d:	6a 01                	push   0x1
 100c22f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
 100c233:	55                   	push   ebp
 100c234:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
 100c238:	e8 5c fb ff ff       	call   100bd99 <putDataOnPages>
 100c23d:	83 c4 20             	add    esp,0x20
 100c240:	84 c0                	test   al,al
 100c242:	0f 84 ce 00 00 00    	je     100c316 <loadSections+0x3b6>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:324
                return false;
            printd(DEBUG_ELF_LOADER,"Section %u loaded 0x%08X bytes at 0x%08X\n", pgmSectionNum, elfInfo->pgmHdrTable[pgmSectionNum].p_memsz, virtualLoadAddress);
 100c248:	83 ec 0c             	sub    esp,0xc
 100c24b:	55                   	push   ebp
 100c24c:	ff 36                	push   DWORD PTR [esi]
 100c24e:	57                   	push   edi
 100c24f:	68 c0 37 04 01       	push   0x10437c0
 100c254:	68 00 02 00 00       	push   0x200
 100c259:	e8 a9 da ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:325
            if (elfInfo->pgmHdrTable[pgmSectionNum].p_filesz<elfInfo->pgmHdrTable[pgmSectionNum].p_memsz)
 100c25e:	8b 56 fc             	mov    edx,DWORD PTR [esi-0x4]
 100c261:	8b 06                	mov    eax,DWORD PTR [esi]
 100c263:	83 c4 20             	add    esp,0x20
 100c266:	39 c2                	cmp    edx,eax
 100c268:	73 7c                	jae    100c2e6 <loadSections+0x386>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:327
            {
                printd(DEBUG_ELF_LOADER,"Section %u has uninitialized data (msize>fsize), zeroed 0x%08X bytes at 0x%08X\n", pgmSectionNum, elfInfo->pgmHdrTable[pgmSectionNum].p_memsz-elfInfo->pgmHdrTable[pgmSectionNum].p_filesz, virtualLoadAddress);
 100c26a:	83 ec 0c             	sub    esp,0xc
 100c26d:	55                   	push   ebp
 100c26e:	29 d0                	sub    eax,edx
 100c270:	50                   	push   eax
 100c271:	57                   	push   edi
 100c272:	68 ec 37 04 01       	push   0x10437ec
 100c277:	68 00 02 00 00       	push   0x200
 100c27c:	e8 86 da ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:329
                //CLR 02/20/2017 - Replaced memset
                if (!putDataOnPages(CR3,virtualLoadAddress,NULL,false,elfInfo->pgmHdrTable[pgmSectionNum].p_memsz-elfInfo->pgmHdrTable[pgmSectionNum].p_filesz,0))
 100c281:	83 c4 18             	add    esp,0x18
 100c284:	6a 00                	push   0x0
 100c286:	8b 06                	mov    eax,DWORD PTR [esi]
 100c288:	2b 46 fc             	sub    eax,DWORD PTR [esi-0x4]
 100c28b:	50                   	push   eax
 100c28c:	6a 00                	push   0x0
 100c28e:	6a 00                	push   0x0
 100c290:	55                   	push   ebp
 100c291:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
 100c295:	e8 ff fa ff ff       	call   100bd99 <putDataOnPages>
 100c29a:	83 c4 20             	add    esp,0x20
 100c29d:	84 c0                	test   al,al
 100c29f:	75 45                	jne    100c2e6 <loadSections+0x386>
 100c2a1:	eb 73                	jmp    100c316 <loadSections+0x3b6>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:333
                    return false;
            }
        }
        else if (elfInfo->pgmHdrTable[pgmSectionNum].p_memsz>0)
 100c2a3:	8b 06                	mov    eax,DWORD PTR [esi]
 100c2a5:	85 c0                	test   eax,eax
 100c2a7:	74 1a                	je     100c2c3 <loadSections+0x363>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:335
        {
            printd(DEBUG_ELF_LOADER,"Section %u not loadable (fsize=0,msize>0), zeroed 0x%08X bytes at 0x%08X\n",pgmSectionNum, elfInfo->pgmHdrTable[pgmSectionNum].p_memsz, virtualLoadAddress);
 100c2a9:	83 ec 0c             	sub    esp,0xc
 100c2ac:	55                   	push   ebp
 100c2ad:	50                   	push   eax
 100c2ae:	57                   	push   edi
 100c2af:	68 3c 38 04 01       	push   0x104383c
 100c2b4:	68 00 02 00 00       	push   0x200
 100c2b9:	e8 49 da ff ff       	call   1009d07 <printd>
 100c2be:	83 c4 20             	add    esp,0x20
 100c2c1:	eb 23                	jmp    100c2e6 <loadSections+0x386>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:339
        }
#ifndef DEBUG_NONE
        else
            if ((kDebugLevel & DEBUG_ELF_LOADER) == DEBUG_ELF_LOADER)
 100c2c3:	f6 05 79 98 12 00 02 	test   BYTE PTR ds:0x129879,0x2
 100c2ca:	74 1a                	je     100c2e6 <loadSections+0x386>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:340
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", pgmSectionNum, elfInfo->pgmHdrTable[pgmSectionNum].p_filesz>0,elfInfo->pgmHdrTable[pgmSectionNum].p_memsz);
 100c2cc:	83 ec 0c             	sub    esp,0xc
 100c2cf:	6a 00                	push   0x0
 100c2d1:	6a 00                	push   0x0
 100c2d3:	57                   	push   edi
 100c2d4:	68 88 38 04 01       	push   0x1043888
 100c2d9:	68 00 02 00 00       	push   0x200
 100c2de:	e8 24 da ff ff       	call   1009d07 <printd>
 100c2e3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:289 (discriminator 2)
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_phoff);
    printd(DEBUG_ELF_LOADER,"reading PHOFF: 0x%08X bytes (s=0x%08X*n=0x%08X), to 0x%08X\n",elfInfo->hdr.e_phentsize*elfInfo->hdr.e_phnum,elfInfo->hdr.e_phentsize,elfInfo->hdr.e_phnum,elfInfo->pgmHdrTable);
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
    fl_fread(elfInfo->pgmHdrTable, elfInfo->hdr.e_phentsize,elfInfo->hdr.e_phnum,file);
    //Process the program header table and load all of the sections in the file into memory
    for (int pgmSectionNum=0;pgmSectionNum<elfInfo->hdr.e_phnum;pgmSectionNum++)
 100c2e6:	83 c7 01             	add    edi,0x1
 100c2e9:	83 c3 20             	add    ebx,0x20
 100c2ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100c2f0:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
 100c2f4:	39 f8                	cmp    eax,edi
 100c2f6:	0f 8f 58 fe ff ff    	jg     100c154 <loadSections+0x1f4>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:345
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", pgmSectionNum, elfInfo->pgmHdrTable[pgmSectionNum].p_filesz>0,elfInfo->pgmHdrTable[pgmSectionNum].p_memsz);
#endif

    }
    //Done processing the program header table
    printd(DEBUG_ELF_LOADER,"LoadElf: done loading elf sections\n");
 100c2fc:	83 ec 08             	sub    esp,0x8
 100c2ff:	68 bc 38 04 01       	push   0x10438bc
 100c304:	68 00 02 00 00       	push   0x200
 100c309:	e8 f9 d9 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:346
    return true;
 100c30e:	83 c4 10             	add    esp,0x10
 100c311:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:347
}
 100c316:	83 c4 1c             	add    esp,0x1c
 100c319:	5b                   	pop    ebx
 100c31a:	5e                   	pop    esi
 100c31b:	5f                   	pop    edi
 100c31c:	5d                   	pop    ebp
 100c31d:	c3                   	ret    

0100c31e <sysLoadElf>:
sysLoadElf():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:350

uint32_t sysLoadElf(char* fileName, elfInfo_t* pElfInfo, uintptr_t CR3, bool isLibrary)
{
 100c31e:	55                   	push   ebp
 100c31f:	57                   	push   edi
 100c320:	56                   	push   esi
 100c321:	53                   	push   ebx
 100c322:	83 ec 20             	sub    esp,0x20
 100c325:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
 100c329:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
 100c32d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
 100c331:	89 e8                	mov    eax,ebp
 100c333:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:352

    printd(DEBUG_ELF_LOADER,"Opening image file %s\n",fileName);
 100c337:	53                   	push   ebx
 100c338:	68 79 79 06 01       	push   0x1067979
 100c33d:	68 00 02 00 00       	push   0x200
 100c342:	e8 c0 d9 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:353
    void* fPtr=fopen(fileName, "r");
 100c347:	83 c4 08             	add    esp,0x8
 100c34a:	68 e9 db 05 01       	push   0x105dbe9
 100c34f:	53                   	push   ebx
 100c350:	e8 60 88 ff ff       	call   1004bb5 <fl_fopen>
 100c355:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:354
    printd(DEBUG_ELF_LOADER,"fopen returned %u\n",fPtr);
 100c357:	83 c4 0c             	add    esp,0xc
 100c35a:	50                   	push   eax
 100c35b:	68 90 79 06 01       	push   0x1067990
 100c360:	68 00 02 00 00       	push   0x200
 100c365:	e8 9d d9 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:355
    if (fPtr==0)
 100c36a:	83 c4 10             	add    esp,0x10
 100c36d:	85 ff                	test   edi,edi
 100c36f:	75 1d                	jne    100c38e <sysLoadElf+0x70>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:357
    {
        printk("Error opening file '%s' (err=%u), cannot exec\n",fileName,fPtr);
 100c371:	83 ec 04             	sub    esp,0x4
 100c374:	6a 00                	push   0x0
 100c376:	53                   	push   ebx
 100c377:	68 e0 38 04 01       	push   0x10438e0
 100c37c:	e8 6e d9 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:358
        return -3;
 100c381:	83 c4 10             	add    esp,0x10
 100c384:	ba fd ff ff ff       	mov    edx,0xfffffffd
 100c389:	e9 1d 03 00 00       	jmp    100c6ab <sysLoadElf+0x38d>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:361
    }   
 
    GET_OLD_CR3;
 100c38e:	0f 20 db             	mov    ebx,cr3
 100c391:	89 1d 88 9c 07 01    	mov    DWORD PTR ds:0x1079c88,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:363
            
    if (CR3==0x0)
 100c397:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
 100c39c:	75 09                	jne    100c3a7 <sysLoadElf+0x89>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:364
        CR3=CURRENT_CR3
 100c39e:	0f 20 d8             	mov    eax,cr3
 100c3a1:	89 c0                	mov    eax,eax
 100c3a3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:366
    elfInfo_t* elfInfo;
    if (pElfInfo==NULL)
 100c3a7:	85 f6                	test   esi,esi
 100c3a9:	75 1a                	jne    100c3c5 <sysLoadElf+0xa7>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:368
        //Get a slot in the load info
        elfInfo=&kExecLoadInfo[kExecLoadCount++];
 100c3ab:	8b 35 40 99 12 00    	mov    esi,DWORD PTR ds:0x129940
 100c3b1:	8d 46 01             	lea    eax,[esi+0x1]
 100c3b4:	a3 40 99 12 00       	mov    ds:0x129940,eax
 100c3b9:	69 f6 dc 18 00 00    	imul   esi,esi,0x18dc
 100c3bf:	03 35 3c 99 12 00    	add    esi,DWORD PTR ds:0x12993c
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:373
    else
        elfInfo=pElfInfo;
    
    //Initialize the structs we will be using
    memset(elfInfo,0,sizeof(elfInfo_t));
 100c3c5:	83 ec 04             	sub    esp,0x4
 100c3c8:	68 dc 18 00 00       	push   0x18dc
 100c3cd:	6a 00                	push   0x0
 100c3cf:	56                   	push   esi
 100c3d0:	e8 5e cb ff ff       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:374
    memset(&elfInfo->dynamicInfo,0,sizeof(elfDynamic_t));
 100c3d5:	83 c4 0c             	add    esp,0xc
 100c3d8:	68 80 0a 00 00       	push   0xa80
 100c3dd:	6a 00                	push   0x0
 100c3df:	8d 86 54 0e 00 00    	lea    eax,[esi+0xe54]
 100c3e5:	50                   	push   eax
 100c3e6:	e8 48 cb ff ff       	call   1008f33 <memset>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:376

    elfInfo->loadCompleted=true;
 100c3eb:	c6 86 d8 18 00 00 01 	mov    BYTE PTR [esi+0x18d8],0x1
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:378
    //Load all of the sections in the file to memory
    if (!loadSections(fPtr,elfInfo,CR3,isLibrary))
 100c3f2:	89 e8                	mov    eax,ebp
 100c3f4:	0f b6 e8             	movzx  ebp,al
 100c3f7:	55                   	push   ebp
 100c3f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 100c3fc:	56                   	push   esi
 100c3fd:	57                   	push   edi
 100c3fe:	e8 5d fb ff ff       	call   100bf60 <loadSections>
 100c403:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:379
        return -4;
 100c406:	ba fc ff ff ff       	mov    edx,0xfffffffc
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:378
    memset(elfInfo,0,sizeof(elfInfo_t));
    memset(&elfInfo->dynamicInfo,0,sizeof(elfDynamic_t));

    elfInfo->loadCompleted=true;
    //Load all of the sections in the file to memory
    if (!loadSections(fPtr,elfInfo,CR3,isLibrary))
 100c40b:	84 c0                	test   al,al
 100c40d:	0f 84 98 02 00 00    	je     100c6ab <sysLoadElf+0x38d>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:382
        return -4;

    //First iterate the sections to find the string & symbol tables
    printd(DEBUG_ELF_LOADER,"Scanning section header entries (%u)\n",elfInfo->secHdrRecordCount);
 100c413:	83 ec 04             	sub    esp,0x4
 100c416:	ff b6 44 0e 00 00    	push   DWORD PTR [esi+0xe44]
 100c41c:	68 10 39 04 01       	push   0x1043910
 100c421:	68 00 02 00 00       	push   0x200
 100c426:	e8 dc d8 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:384
    //First find the string table
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
 100c42b:	8b 96 44 0e 00 00    	mov    edx,DWORD PTR [esi+0xe44]
 100c431:	83 c4 10             	add    esp,0x10
 100c434:	85 d2                	test   edx,edx
 100c436:	0f 8e 5e 02 00 00    	jle    100c69a <sysLoadElf+0x37c>
 100c43c:	8d 46 60             	lea    eax,[esi+0x60]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:386
    {
        if (elfInfo->secHdrTable[cnt].sh_type==SHT_STRTAB)
 100c43f:	bb 00 00 00 00       	mov    ebx,0x0
 100c444:	83 7e 38 03          	cmp    DWORD PTR [esi+0x38],0x3
 100c448:	0f 85 92 00 00 00    	jne    100c4e0 <sysLoadElf+0x1c2>
 100c44e:	eb 0f                	jmp    100c45f <sysLoadElf+0x141>
 100c450:	83 c0 28             	add    eax,0x28
 100c453:	83 78 d8 03          	cmp    DWORD PTR [eax-0x28],0x3
 100c457:	0f 85 83 00 00 00    	jne    100c4e0 <sysLoadElf+0x1c2>
 100c45d:	eb 05                	jmp    100c464 <sysLoadElf+0x146>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:384
        return -4;

    //First iterate the sections to find the string & symbol tables
    printd(DEBUG_ELF_LOADER,"Scanning section header entries (%u)\n",elfInfo->secHdrRecordCount);
    //First find the string table
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
 100c45f:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:388
    {
        if (elfInfo->secHdrTable[cnt].sh_type==SHT_STRTAB)
        {
            fl_fseek(fPtr,elfInfo->secHdrTable[cnt].sh_offset,SEEK_SET);
 100c464:	83 ec 04             	sub    esp,0x4
 100c467:	6a 00                	push   0x0
 100c469:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
 100c470:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
 100c474:	01 d8                	add    eax,ebx
 100c476:	8d 2c c6             	lea    ebp,[esi+eax*8]
 100c479:	ff 75 44             	push   DWORD PTR [ebp+0x44]
 100c47c:	57                   	push   edi
 100c47d:	e8 38 8e ff ff       	call   10052ba <fl_fseek>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:389
            elfInfo->dynamicInfo.strTableAddress=malloc(elfInfo->secHdrTable[cnt].sh_size);
 100c482:	83 c4 04             	add    esp,0x4
 100c485:	ff 75 48             	push   DWORD PTR [ebp+0x48]
 100c488:	e8 d3 eb ff ff       	call   100b060 <malloc>
 100c48d:	89 86 b8 18 00 00    	mov    DWORD PTR [esi+0x18b8],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:390
            fl_fread((char*)elfInfo->dynamicInfo.strTableAddress,1,elfInfo->secHdrTable[cnt].sh_size,fPtr);
 100c493:	57                   	push   edi
 100c494:	ff 75 48             	push   DWORD PTR [ebp+0x48]
 100c497:	6a 01                	push   0x1
 100c499:	50                   	push   eax
 100c49a:	e8 e6 8b ff ff       	call   1005085 <fl_fread>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:391
            elfInfo->dynamicInfo.strTableFilePtr=elfInfo->secHdrTable[cnt].sh_offset;
 100c49f:	8b 45 44             	mov    eax,DWORD PTR [ebp+0x44]
 100c4a2:	89 86 bc 18 00 00    	mov    DWORD PTR [esi+0x18bc],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:392
            elfInfo->dynamicInfo.strTableSize=elfInfo->secHdrTable[cnt].sh_size;
 100c4a8:	03 5c 24 2c          	add    ebx,DWORD PTR [esp+0x2c]
 100c4ac:	8b 44 de 48          	mov    eax,DWORD PTR [esi+ebx*8+0x48]
 100c4b0:	89 86 8c 18 00 00    	mov    DWORD PTR [esi+0x188c],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:393
            printd(DEBUG_ELF_LOADER,"Found string (STRTAB) table, read to address 0x%08X, size=0x%08X\n",elfInfo->dynamicInfo.strTableAddress, elfInfo->secHdrTable[cnt].sh_size);
 100c4b6:	83 c4 20             	add    esp,0x20
 100c4b9:	50                   	push   eax
 100c4ba:	ff b6 b8 18 00 00    	push   DWORD PTR [esi+0x18b8]
 100c4c0:	68 38 39 04 01       	push   0x1043938
 100c4c5:	68 00 02 00 00       	push   0x200
 100c4ca:	e8 38 d8 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:397
            break;
        }
    }    
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
 100c4cf:	83 c4 10             	add    esp,0x10
 100c4d2:	83 be 44 0e 00 00 00 	cmp    DWORD PTR [esi+0xe44],0x0
 100c4d9:	7f 10                	jg     100c4eb <sysLoadElf+0x1cd>
 100c4db:	e9 ba 01 00 00       	jmp    100c69a <sysLoadElf+0x37c>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:384 (discriminator 2)
        return -4;

    //First iterate the sections to find the string & symbol tables
    printd(DEBUG_ELF_LOADER,"Scanning section header entries (%u)\n",elfInfo->secHdrRecordCount);
    //First find the string table
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
 100c4e0:	83 c3 01             	add    ebx,0x1
 100c4e3:	39 d3                	cmp    ebx,edx
 100c4e5:	0f 85 65 ff ff ff    	jne    100c450 <sysLoadElf+0x132>
 100c4eb:	8d 5e 40             	lea    ebx,[esi+0x40]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:386
    {
        if (elfInfo->secHdrTable[cnt].sh_type==SHT_STRTAB)
 100c4ee:	bf 00 00 00 00       	mov    edi,0x0
 100c4f3:	89 dd                	mov    ebp,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:399
            break;
        }
    }    
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
    {
        if (elfInfo->secHdrTable[cnt].sh_type==SHT_STRTAB)
 100c4f5:	8b 43 f8             	mov    eax,DWORD PTR [ebx-0x8]
 100c4f8:	83 f8 03             	cmp    eax,0x3
 100c4fb:	75 2b                	jne    100c528 <sysLoadElf+0x20a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:400
            if (elfInfo->dynamicInfo.strTableFilePtr==elfInfo->secHdrTable[cnt].sh_offset)
 100c4fd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
 100c500:	39 86 bc 18 00 00    	cmp    DWORD PTR [esi+0x18bc],eax
 100c506:	0f 84 7c 01 00 00    	je     100c688 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:406
            {
             /*do nothing, we already found this*/   
            }
            else
            {
                printd(DEBUG_ELF_LOADER,"Found secondary string (STRTAB) table address 0x%08X, ***not using***\n",elfInfo->secHdrTable[cnt].sh_addr);
 100c50c:	83 ec 04             	sub    esp,0x4
 100c50f:	ff 33                	push   DWORD PTR [ebx]
 100c511:	68 7c 39 04 01       	push   0x104397c
 100c516:	68 00 02 00 00       	push   0x200
 100c51b:	e8 e7 d7 ff ff       	call   1009d07 <printd>
 100c520:	83 c4 10             	add    esp,0x10
 100c523:	e9 60 01 00 00       	jmp    100c688 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:408
            }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_SYMTAB)
 100c528:	83 f8 02             	cmp    eax,0x2
 100c52b:	75 3b                	jne    100c568 <sysLoadElf+0x24a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:410
        {
            elfInfo->dynamicInfo.symTableAddress=elfInfo->secHdrTable[cnt].sh_addr;
 100c52d:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c52f:	89 86 c0 18 00 00    	mov    DWORD PTR [esi+0x18c0],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:411
            if (isLibrary)
 100c535:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
 100c53a:	74 0c                	je     100c548 <sysLoadElf+0x22a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:412
                elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
 100c53c:	03 05 8c 9c 07 01    	add    eax,DWORD PTR ds:0x1079c8c
 100c542:	89 86 c0 18 00 00    	mov    DWORD PTR [esi+0x18c0],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:413
            printd(DEBUG_ELF_LOADER,"Found symbol (SYMTAB) table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
 100c548:	83 ec 04             	sub    esp,0x4
 100c54b:	ff b6 c0 18 00 00    	push   DWORD PTR [esi+0x18c0]
 100c551:	68 c4 39 04 01       	push   0x10439c4
 100c556:	68 00 02 00 00       	push   0x200
 100c55b:	e8 a7 d7 ff ff       	call   1009d07 <printd>
 100c560:	83 c4 10             	add    esp,0x10
 100c563:	e9 20 01 00 00       	jmp    100c688 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:415
        }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_DYNAMIC)
 100c568:	83 f8 06             	cmp    eax,0x6
 100c56b:	75 48                	jne    100c5b5 <sysLoadElf+0x297>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:417
        {
            elfInfo->dynamicSectionAddress=elfInfo->secHdrTable[cnt].sh_addr;
 100c56d:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c56f:	89 86 50 0e 00 00    	mov    DWORD PTR [esi+0xe50],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:418
            if (isLibrary)
 100c575:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
 100c57a:	74 0c                	je     100c588 <sysLoadElf+0x26a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:419
                elfInfo->dynamicSectionAddress+=libLoadOffset;
 100c57c:	03 05 8c 9c 07 01    	add    eax,DWORD PTR ds:0x1079c8c
 100c582:	89 86 50 0e 00 00    	mov    DWORD PTR [esi+0xe50],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:420
            printd(DEBUG_ELF_LOADER,"Found section %s (DYNAMIC)  table address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->dynamicInfo.symTableAddress);
 100c588:	83 ec 08             	sub    esp,0x8
 100c58b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
 100c58e:	56                   	push   esi
 100c58f:	e8 d3 f7 ff ff       	call   100bd67 <strTabEntry>
 100c594:	83 c4 10             	add    esp,0x10
 100c597:	ff b6 c0 18 00 00    	push   DWORD PTR [esi+0x18c0]
 100c59d:	50                   	push   eax
 100c59e:	68 f0 39 04 01       	push   0x10439f0
 100c5a3:	68 00 02 00 00       	push   0x200
 100c5a8:	e8 5a d7 ff ff       	call   1009d07 <printd>
 100c5ad:	83 c4 10             	add    esp,0x10
 100c5b0:	e9 d3 00 00 00       	jmp    100c688 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:422
        }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_DYNSYM)
 100c5b5:	83 f8 0b             	cmp    eax,0xb
 100c5b8:	75 29                	jne    100c5e3 <sysLoadElf+0x2c5>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:424
        {
            printd(DEBUG_ELF_LOADER,"Found %s (DYNSYM) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
 100c5ba:	83 ec 08             	sub    esp,0x8
 100c5bd:	ff 73 f4             	push   DWORD PTR [ebx-0xc]
 100c5c0:	56                   	push   esi
 100c5c1:	e8 a1 f7 ff ff       	call   100bd67 <strTabEntry>
 100c5c6:	83 c4 10             	add    esp,0x10
 100c5c9:	ff 33                	push   DWORD PTR [ebx]
 100c5cb:	50                   	push   eax
 100c5cc:	68 24 3a 04 01       	push   0x1043a24
 100c5d1:	68 00 02 00 00       	push   0x200
 100c5d6:	e8 2c d7 ff ff       	call   1009d07 <printd>
 100c5db:	83 c4 10             	add    esp,0x10
 100c5de:	e9 a5 00 00 00       	jmp    100c688 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:426
        }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_RELA)
 100c5e3:	83 f8 04             	cmp    eax,0x4
 100c5e6:	75 26                	jne    100c60e <sysLoadElf+0x2f0>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:428
        {
            printd(DEBUG_ELF_LOADER,"Found %s (RELA) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
 100c5e8:	83 ec 08             	sub    esp,0x8
 100c5eb:	ff 73 f4             	push   DWORD PTR [ebx-0xc]
 100c5ee:	56                   	push   esi
 100c5ef:	e8 73 f7 ff ff       	call   100bd67 <strTabEntry>
 100c5f4:	83 c4 10             	add    esp,0x10
 100c5f7:	ff 33                	push   DWORD PTR [ebx]
 100c5f9:	50                   	push   eax
 100c5fa:	68 50 3a 04 01       	push   0x1043a50
 100c5ff:	68 00 02 00 00       	push   0x200
 100c604:	e8 fe d6 ff ff       	call   1009d07 <printd>
 100c609:	83 c4 10             	add    esp,0x10
 100c60c:	eb 7a                	jmp    100c688 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:430
        }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_HASH)
 100c60e:	83 f8 05             	cmp    eax,0x5
 100c611:	75 26                	jne    100c639 <sysLoadElf+0x31b>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:432
        {
            printd(DEBUG_ELF_LOADER,"Found %s (HASH) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
 100c613:	83 ec 08             	sub    esp,0x8
 100c616:	ff 73 f4             	push   DWORD PTR [ebx-0xc]
 100c619:	56                   	push   esi
 100c61a:	e8 48 f7 ff ff       	call   100bd67 <strTabEntry>
 100c61f:	83 c4 10             	add    esp,0x10
 100c622:	ff 33                	push   DWORD PTR [ebx]
 100c624:	50                   	push   eax
 100c625:	68 7c 3a 04 01       	push   0x1043a7c
 100c62a:	68 00 02 00 00       	push   0x200
 100c62f:	e8 d3 d6 ff ff       	call   1009d07 <printd>
 100c634:	83 c4 10             	add    esp,0x10
 100c637:	eb 4f                	jmp    100c688 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:434
        }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_NOTE)
 100c639:	83 f8 07             	cmp    eax,0x7
 100c63c:	75 26                	jne    100c664 <sysLoadElf+0x346>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:436
        {
            printd(DEBUG_ELF_LOADER,"Found %s (NOTE) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
 100c63e:	83 ec 08             	sub    esp,0x8
 100c641:	ff 73 f4             	push   DWORD PTR [ebx-0xc]
 100c644:	56                   	push   esi
 100c645:	e8 1d f7 ff ff       	call   100bd67 <strTabEntry>
 100c64a:	83 c4 10             	add    esp,0x10
 100c64d:	ff 33                	push   DWORD PTR [ebx]
 100c64f:	50                   	push   eax
 100c650:	68 a8 3a 04 01       	push   0x1043aa8
 100c655:	68 00 02 00 00       	push   0x200
 100c65a:	e8 a8 d6 ff ff       	call   1009d07 <printd>
 100c65f:	83 c4 10             	add    esp,0x10
 100c662:	eb 24                	jmp    100c688 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:440
        }
        else
        {
            printd(DEBUG_ELF_LOADER,"Found (%s) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
 100c664:	83 ec 08             	sub    esp,0x8
 100c667:	ff 73 f4             	push   DWORD PTR [ebx-0xc]
 100c66a:	56                   	push   esi
 100c66b:	e8 f7 f6 ff ff       	call   100bd67 <strTabEntry>
 100c670:	83 c4 10             	add    esp,0x10
 100c673:	ff 33                	push   DWORD PTR [ebx]
 100c675:	50                   	push   eax
 100c676:	68 d4 3a 04 01       	push   0x1043ad4
 100c67b:	68 00 02 00 00       	push   0x200
 100c680:	e8 82 d6 ff ff       	call   1009d07 <printd>
 100c685:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:397 (discriminator 2)
            elfInfo->dynamicInfo.strTableSize=elfInfo->secHdrTable[cnt].sh_size;
            printd(DEBUG_ELF_LOADER,"Found string (STRTAB) table, read to address 0x%08X, size=0x%08X\n",elfInfo->dynamicInfo.strTableAddress, elfInfo->secHdrTable[cnt].sh_size);
            break;
        }
    }    
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
 100c688:	83 c7 01             	add    edi,0x1
 100c68b:	83 c3 28             	add    ebx,0x28
 100c68e:	39 be 44 0e 00 00    	cmp    DWORD PTR [esi+0xe44],edi
 100c694:	0f 8f 59 fe ff ff    	jg     100c4f3 <sysLoadElf+0x1d5>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:443
        else
        {
            printd(DEBUG_ELF_LOADER,"Found (%s) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
        }
    }
     processELFDynamicSection(elfInfo);   
 100c69a:	83 ec 0c             	sub    esp,0xc
 100c69d:	56                   	push   esi
 100c69e:	e8 12 00 00 00       	call   100c6b5 <processELFDynamicSection>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:444
     return true;
 100c6a3:	83 c4 10             	add    esp,0x10
 100c6a6:	ba 01 00 00 00       	mov    edx,0x1
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:445
}
 100c6ab:	89 d0                	mov    eax,edx
 100c6ad:	83 c4 1c             	add    esp,0x1c
 100c6b0:	5b                   	pop    ebx
 100c6b1:	5e                   	pop    esi
 100c6b2:	5f                   	pop    edi
 100c6b3:	5d                   	pop    ebp
 100c6b4:	c3                   	ret    

0100c6b5 <processELFDynamicSection>:
processELFDynamicSection():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:66
{
    __asm__("mov cr3,eax\n"::[oldCR3] "a" (INIT_GDT_TABLE_ADDRESS));
}

void processELFDynamicSection(elfInfo_t* elfInfo)
{
 100c6b5:	55                   	push   ebp
 100c6b6:	57                   	push   edi
 100c6b7:	56                   	push   esi
 100c6b8:	53                   	push   ebx
 100c6b9:	81 ec 8c 00 00 00    	sub    esp,0x8c
 100c6bf:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:67
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
 100c6c6:	8b 9d 50 0e 00 00    	mov    ebx,DWORD PTR [ebp+0xe50]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:70

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
 100c6cc:	c7 85 a0 18 00 00 00 	mov    DWORD PTR [ebp+0x18a0],0x0
 100c6d3:	00 00 00 
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:71
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
 100c6d6:	83 bd 4c 0e 00 00 00 	cmp    DWORD PTR [ebp+0xe4c],0x0
 100c6dd:	0f 8e 5a 02 00 00    	jle    100c93d <processELFDynamicSection+0x288>
 100c6e3:	83 c3 04             	add    ebx,0x4
 100c6e6:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:73
    {
        switch (dyn[cnt].d_tag)
 100c6eb:	83 7b fc 1a          	cmp    DWORD PTR [ebx-0x4],0x1a
 100c6ef:	0f 87 36 02 00 00    	ja     100c92b <processELFDynamicSection+0x276>
 100c6f5:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
 100c6f8:	ff 24 85 e0 9c 02 01 	jmp    DWORD PTR [eax*4+0x1029ce0]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:77
        {
            //DT_NEEDED is a library which we need to load
            case DT_NEEDED:
                printk("ELF at: 0x%08X, copy to: 0x%08X, neededCount=0x%08X\n",elfInfo, elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount],elfInfo->dynamicInfo.neededCount);
 100c6ff:	8b 85 a0 18 00 00    	mov    eax,DWORD PTR [ebp+0x18a0]
 100c705:	50                   	push   eax
 100c706:	c1 e0 08             	shl    eax,0x8
 100c709:	8d 84 05 54 0e 00 00 	lea    eax,[ebp+eax*1+0xe54]
 100c710:	50                   	push   eax
 100c711:	55                   	push   ebp
 100c712:	68 f8 3a 04 01       	push   0x1043af8
 100c717:	e8 d3 d5 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:78
                strcpy(elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount++],(char*)(elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr));
 100c71c:	8b 13                	mov    edx,DWORD PTR [ebx]
 100c71e:	8b 85 b8 18 00 00    	mov    eax,DWORD PTR [ebp+0x18b8]
 100c724:	8d 14 90             	lea    edx,[eax+edx*4]
 100c727:	8b 85 a0 18 00 00    	mov    eax,DWORD PTR [ebp+0x18a0]
 100c72d:	8d 48 01             	lea    ecx,[eax+0x1]
 100c730:	89 8d a0 18 00 00    	mov    DWORD PTR [ebp+0x18a0],ecx
 100c736:	83 c4 08             	add    esp,0x8
 100c739:	52                   	push   edx
 100c73a:	c1 e0 08             	shl    eax,0x8
 100c73d:	8d 84 05 54 0e 00 00 	lea    eax,[ebp+eax*1+0xe54]
 100c744:	50                   	push   eax
 100c745:	e8 76 d6 ff ff       	call   1009dc0 <strcpy>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:79
                char fileName[100]="/";
 100c74a:	c7 44 24 2c 2f 00 00 	mov    DWORD PTR [esp+0x2c],0x2f
 100c751:	00 
 100c752:	8d 7c 24 30          	lea    edi,[esp+0x30]
 100c756:	b9 18 00 00 00       	mov    ecx,0x18
 100c75b:	b8 00 00 00 00       	mov    eax,0x0
 100c760:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:80
                strcat(fileName,elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount-1]);
 100c762:	83 c4 08             	add    esp,0x8
 100c765:	8b 85 a0 18 00 00    	mov    eax,DWORD PTR [ebp+0x18a0]
 100c76b:	c1 e0 08             	shl    eax,0x8
 100c76e:	8d 84 05 54 0d 00 00 	lea    eax,[ebp+eax*1+0xd54]
 100c775:	50                   	push   eax
 100c776:	8d 44 24 28          	lea    eax,[esp+0x28]
 100c77a:	50                   	push   eax
 100c77b:	e8 d0 d5 ff ff       	call   1009d50 <strcat>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:81
                printd(DEBUG_ELF_LOADER,"Found NEEDED, library name='%s', orig name='%s'\n",fileName,elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr);
 100c780:	8b 13                	mov    edx,DWORD PTR [ebx]
 100c782:	8b 85 b8 18 00 00    	mov    eax,DWORD PTR [ebp+0x18b8]
 100c788:	8d 04 90             	lea    eax,[eax+edx*4]
 100c78b:	50                   	push   eax
 100c78c:	8d 44 24 30          	lea    eax,[esp+0x30]
 100c790:	50                   	push   eax
 100c791:	68 30 3b 04 01       	push   0x1043b30
 100c796:	68 00 02 00 00       	push   0x200
 100c79b:	e8 67 d5 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:82
                if (kDebugLevel&DEBUG_ELF_LOADER)
 100c7a0:	83 c4 20             	add    esp,0x20
 100c7a3:	f6 05 79 98 12 00 02 	test   BYTE PTR ds:0x129879,0x2
 100c7aa:	74 1f                	je     100c7cb <processELFDynamicSection+0x116>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:84
                {
                    printd(DEBUG_ELF_LOADER,"loadElf: Calling loadElf again to load '%s' ... press a key to continue\n",&fileName);
 100c7ac:	83 ec 04             	sub    esp,0x4
 100c7af:	8d 44 24 20          	lea    eax,[esp+0x20]
 100c7b3:	50                   	push   eax
 100c7b4:	68 64 3b 04 01       	push   0x1043b64
 100c7b9:	68 00 02 00 00       	push   0x200
 100c7be:	e8 44 d5 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:85
                    waitForKeyboardKey();
 100c7c3:	e8 c3 69 ff ff       	call   100318b <waitForKeyboardKey>
 100c7c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:87
                }
                void* fPtr=fopen(fileName, "r");
 100c7cb:	83 ec 08             	sub    esp,0x8
 100c7ce:	68 e9 db 05 01       	push   0x105dbe9
 100c7d3:	8d 44 24 28          	lea    eax,[esp+0x28]
 100c7d7:	50                   	push   eax
 100c7d8:	e8 d8 83 ff ff       	call   1004bb5 <fl_fopen>
 100c7dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:88
                if (fPtr==0)
 100c7e1:	83 c4 10             	add    esp,0x10
 100c7e4:	85 c0                	test   eax,eax
 100c7e6:	75 21                	jne    100c809 <processELFDynamicSection+0x154>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:90
                {
                    printk("Error opening file '%s', cannot exec\n",fileName);
 100c7e8:	83 ec 08             	sub    esp,0x8
 100c7eb:	8d 44 24 24          	lea    eax,[esp+0x24]
 100c7ef:	50                   	push   eax
 100c7f0:	68 b0 3b 04 01       	push   0x1043bb0
 100c7f5:	e8 f5 d4 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:91
                    elfInfo->loadCompleted=false;
 100c7fa:	c6 85 d8 18 00 00 00 	mov    BYTE PTR [ebp+0x18d8],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:92
                    return;
 100c801:	83 c4 10             	add    esp,0x10
 100c804:	e9 34 01 00 00       	jmp    100c93d <processELFDynamicSection+0x288>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:94
                }   
                elfInfo->dynamicInfo.neededExecLoadNum[elfInfo->dynamicInfo.neededPtr++]=kExecLoadCount;
 100c809:	8b 85 54 18 00 00    	mov    eax,DWORD PTR [ebp+0x1854]
 100c80f:	8d 50 01             	lea    edx,[eax+0x1]
 100c812:	89 95 54 18 00 00    	mov    DWORD PTR [ebp+0x1854],edx
 100c818:	8b 3d 40 99 12 00    	mov    edi,DWORD PTR ds:0x129940
 100c81e:	89 bc 85 58 18 00 00 	mov    DWORD PTR [ebp+eax*4+0x1858],edi
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:95
                elfInfo_t* elfLibPtr=&kExecLoadInfo[kExecLoadCount++];
 100c825:	8d 47 01             	lea    eax,[edi+0x1]
 100c828:	a3 40 99 12 00       	mov    ds:0x129940,eax
 100c82d:	69 ff dc 18 00 00    	imul   edi,edi,0x18dc
 100c833:	03 3d 3c 99 12 00    	add    edi,DWORD PTR ds:0x12993c
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:96
                sysLoadElf(fPtr,elfLibPtr,0x0,true);
 100c839:	6a 01                	push   0x1
 100c83b:	6a 00                	push   0x0
 100c83d:	57                   	push   edi
 100c83e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100c842:	e8 d7 fa ff ff       	call   100c31e <sysLoadElf>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:97
                fclose(fPtr);
 100c847:	83 c4 04             	add    esp,0x4
 100c84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100c84e:	e8 87 87 ff ff       	call   1004fda <fl_fclose>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:98
                if (!elfLibPtr->loadCompleted)
 100c853:	83 c4 10             	add    esp,0x10
 100c856:	80 bf d8 18 00 00 00 	cmp    BYTE PTR [edi+0x18d8],0x0
 100c85d:	0f 85 c8 00 00 00    	jne    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:100
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
 100c863:	83 ec 08             	sub    esp,0x8
 100c866:	68 d8 3b 04 01       	push   0x1043bd8
 100c86b:	68 00 02 00 00       	push   0x200
 100c870:	e8 92 d4 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:101
                    elfInfo->loadCompleted=false;
 100c875:	c6 85 d8 18 00 00 00 	mov    BYTE PTR [ebp+0x18d8],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:102
                    return;
 100c87c:	83 c4 10             	add    esp,0x10
 100c87f:	e9 b9 00 00 00       	jmp    100c93d <processELFDynamicSection+0x288>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:106
                }
                break;
            case DT_PLTRELSZ:
                elfInfo->dynamicInfo.pltGOTTableTableSize=dyn[cnt].d_un.d_val;
 100c884:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c886:	89 85 98 18 00 00    	mov    DWORD PTR [ebp+0x1898],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:107
                break;
 100c88c:	e9 9a 00 00 00       	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:109
            case DT_PLTGOT:
                elfInfo->dynamicInfo.pltGOTTableAddress=dyn[cnt].d_un.d_ptr;
 100c891:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c893:	89 85 b0 18 00 00    	mov    DWORD PTR [ebp+0x18b0],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:110
                break;
 100c899:	e9 8d 00 00 00       	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:112
            case DT_HASH:
                elfInfo->dynamicInfo.hashTableAddress=dyn[cnt].d_un.d_ptr;
 100c89e:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c8a0:	89 85 b4 18 00 00    	mov    DWORD PTR [ebp+0x18b4],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:113
                break;
 100c8a6:	e9 80 00 00 00       	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:121
                break;
            case DT_SYMTAB:
                //Already found it above
                break;
            case DT_RELA:
                elfInfo->dynamicInfo.relATableAddress=dyn[cnt].d_un.d_ptr;
 100c8ab:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c8ad:	89 85 c4 18 00 00    	mov    DWORD PTR [ebp+0x18c4],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:122
                break;
 100c8b3:	eb 76                	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:124
            case DT_RELASZ:
                elfInfo->dynamicInfo.relATableSize=dyn[cnt].d_un.d_val;
 100c8b5:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c8b7:	89 85 84 18 00 00    	mov    DWORD PTR [ebp+0x1884],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:125
                break;
 100c8bd:	eb 6c                	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:127
            case DT_RELAENT:
                elfInfo->dynamicInfo.relAEntrySize=dyn[cnt].d_un.d_val;
 100c8bf:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c8c1:	89 85 88 18 00 00    	mov    DWORD PTR [ebp+0x1888],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:128
                break;
 100c8c7:	eb 62                	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:130
            case DT_STRSZ:
                elfInfo->dynamicInfo.strTableSize=dyn[cnt].d_un.d_val;
 100c8c9:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c8cb:	89 85 8c 18 00 00    	mov    DWORD PTR [ebp+0x188c],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:131
                break;
 100c8d1:	eb 58                	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:133
            case DT_SYMENT:
                elfInfo->dynamicInfo.symEntrySize=dyn[cnt].d_un.d_val;
 100c8d3:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c8d5:	89 85 90 18 00 00    	mov    DWORD PTR [ebp+0x1890],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:134
                break;
 100c8db:	eb 4e                	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:137
            case DT_INIT:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
 100c8dd:	a1 8c 9c 07 01       	mov    eax,ds:0x1079c8c
 100c8e2:	03 03                	add    eax,DWORD PTR [ebx]
 100c8e4:	89 85 c8 18 00 00    	mov    DWORD PTR [ebp+0x18c8],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:138
                break;
 100c8ea:	eb 3f                	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:141
            case DT_FINI:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
 100c8ec:	a1 8c 9c 07 01       	mov    eax,ds:0x1079c8c
 100c8f1:	03 03                	add    eax,DWORD PTR [ebx]
 100c8f3:	89 85 cc 18 00 00    	mov    DWORD PTR [ebp+0x18cc],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:142
                break;
 100c8f9:	eb 30                	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:152
                //Can't find the relocation section this way, using section headers
                //elfInfo->dynamicInfo.relTableAddress=dyn[cnt].d_un.d_ptr;
                //printk("%s: Found DT_REL, address=0x%08X (0x%08X)\n",isLibrary?"library":"executable",dyn[cnt].d_un.d_ptr,elfInfo->dynamicInfo.relTableAddress);
                break;
            case DT_RELSZ:
                elfInfo->dynamicInfo.relTableSize=dyn[cnt].d_un.d_val;
 100c8fb:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c8fd:	89 85 94 18 00 00    	mov    DWORD PTR [ebp+0x1894],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:153
                break;
 100c903:	eb 26                	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:155
            case DT_RELENT:
                elfInfo->dynamicInfo.relEntrySize=dyn[cnt].d_un.d_val;
 100c905:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c907:	89 85 9c 18 00 00    	mov    DWORD PTR [ebp+0x189c],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:156
                break;
 100c90d:	eb 1c                	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:169
                break;
            case DT_BIND_NOW:
                break;
            case DT_INIT_ARRAY:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
 100c90f:	a1 8c 9c 07 01       	mov    eax,ds:0x1079c8c
 100c914:	03 03                	add    eax,DWORD PTR [ebx]
 100c916:	89 85 c8 18 00 00    	mov    DWORD PTR [ebp+0x18c8],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:170
                break;
 100c91c:	eb 0d                	jmp    100c92b <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:173
            case DT_FINI_ARRAY:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
 100c91e:	a1 8c 9c 07 01       	mov    eax,ds:0x1079c8c
 100c923:	03 03                	add    eax,DWORD PTR [ebx]
 100c925:	89 85 cc 18 00 00    	mov    DWORD PTR [ebp+0x18cc],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:71
{
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
 100c92b:	83 c6 01             	add    esi,0x1
 100c92e:	83 c3 08             	add    ebx,0x8
 100c931:	39 b5 4c 0e 00 00    	cmp    DWORD PTR [ebp+0xe4c],esi
 100c937:	0f 8f ae fd ff ff    	jg     100c6eb <processELFDynamicSection+0x36>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:186
            default:
                break;
        }
    }

}
 100c93d:	81 c4 8c 00 00 00    	add    esp,0x8c
 100c943:	5b                   	pop    ebx
 100c944:	5e                   	pop    esi
 100c945:	5f                   	pop    edi
 100c946:	5d                   	pop    ebp
 100c947:	c3                   	ret    

0100c948 <sysExec>:
sysExec():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:448
     processELFDynamicSection(elfInfo);   
     return true;
}

int sysExec(process_t* process,int argc,char** argv)
{
 100c948:	57                   	push   edi
 100c949:	56                   	push   esi
 100c94a:	53                   	push   ebx
 100c94b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:452
    int lsysExecRetVal=0;
     register int *eax __asm__("eax");

    newCR3=process->task->tss->CR3;
 100c94f:	8b 06                	mov    eax,DWORD PTR [esi]
 100c951:	8b 00                	mov    eax,DWORD PTR [eax]
 100c953:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
 100c956:	a3 5c 9c 07 01       	mov    ds:0x1079c5c,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:453
    printd(DEBUG_LOADER,"sysExec: Entered ... executing '%s'\n",process->path);
 100c95b:	83 ec 04             	sub    esp,0x4
 100c95e:	ff 76 0c             	push   DWORD PTR [esi+0xc]
 100c961:	68 14 3c 04 01       	push   0x1043c14
 100c966:	68 00 00 02 00       	push   0x20000
 100c96b:	e8 97 d3 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:454
    process->task->tss->CS=0x3B;
 100c970:	8b 06                	mov    eax,DWORD PTR [esi]
 100c972:	8b 00                	mov    eax,DWORD PTR [eax]
 100c974:	c7 40 4c 3b 00 00 00 	mov    DWORD PTR [eax+0x4c],0x3b
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:455
    process->task->tss->EIP=process->elf->hdr.e_entry;
 100c97b:	8b 06                	mov    eax,DWORD PTR [esi]
 100c97d:	8b 00                	mov    eax,DWORD PTR [eax]
 100c97f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
 100c982:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
 100c985:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:460
    //If loaded successfully then execute

    //__asm__("mov ax,0x203\nltr ax\n");
    
    if (process->elf->loadCompleted)
 100c988:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
 100c98b:	83 c4 10             	add    esp,0x10
 100c98e:	80 b8 d8 18 00 00 00 	cmp    BYTE PTR [eax+0x18d8],0x0
 100c995:	0f 84 9a 02 00 00    	je     100cc35 <ReturnPoint+0x22>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:462
    {
        printd(DEBUG_ELF_LOADER,"exec: Executing %s at 0x%08X, CR3=0x%08X, return address is =0x%08X\n", process->path, process->elf->hdr.e_entry, newCR3 ,__builtin_return_address(0));
 100c99b:	83 ec 08             	sub    esp,0x8
 100c99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 100c9a2:	ff 35 5c 9c 07 01    	push   DWORD PTR ds:0x1079c5c
 100c9a8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
 100c9ab:	ff 70 18             	push   DWORD PTR [eax+0x18]
 100c9ae:	ff 76 0c             	push   DWORD PTR [esi+0xc]
 100c9b1:	68 3c 3c 04 01       	push   0x1043c3c
 100c9b6:	68 00 02 00 00       	push   0x200
 100c9bb:	e8 47 d3 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:464
    
        GET_OLD_CR3;
 100c9c0:	0f 20 db             	mov    ebx,cr3
 100c9c3:	89 1d 88 9c 07 01    	mov    DWORD PTR ds:0x1079c88,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:465
        kKernelTask->tss->EIP=(uint32_t)_call_gate_wrapper;
 100c9c9:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c9ce:	8b 10                	mov    edx,DWORD PTR [eax]
 100c9d0:	c7 42 20 54 bd 00 01 	mov    DWORD PTR [edx+0x20],0x100bd54
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:466
        kKernelTask->tss->CS=getCS();
 100c9d7:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c9d9:	83 c4 20             	add    esp,0x20
 100c9dc:	e8 6d 36 ff ff       	call   100004e <getCS>
 100c9e1:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:467
        kKernelTask->tss->DS=getDS();
 100c9e4:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c9e9:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c9eb:	e8 61 36 ff ff       	call   1000051 <getDS>
 100c9f0:	89 43 54             	mov    DWORD PTR [ebx+0x54],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:468
        kKernelTask->tss->ES=getES();
 100c9f3:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c9f8:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c9fa:	e8 55 36 ff ff       	call   1000054 <getES>
 100c9ff:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:469
        kKernelTask->tss->FS=getFS();
 100ca02:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100ca07:	8b 18                	mov    ebx,DWORD PTR [eax]
 100ca09:	e8 49 36 ff ff       	call   1000057 <getFS>
 100ca0e:	89 43 58             	mov    DWORD PTR [ebx+0x58],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:470
        kKernelTask->tss->GS=getGS();
 100ca11:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100ca16:	8b 18                	mov    ebx,DWORD PTR [eax]
 100ca18:	e8 3e 36 ff ff       	call   100005b <getGS>
 100ca1d:	89 43 5c             	mov    DWORD PTR [ebx+0x5c],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:471
        kKernelTask->tss->SS=0x108;
 100ca20:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100ca25:	8b 10                	mov    edx,DWORD PTR [eax]
 100ca27:	c7 42 50 08 01 00 00 	mov    DWORD PTR [edx+0x50],0x108
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:472
        kKernelTask->tss->CR3=oldCR3;
 100ca2e:	8b 10                	mov    edx,DWORD PTR [eax]
 100ca30:	8b 0d 88 9c 07 01    	mov    ecx,DWORD PTR ds:0x1079c88
 100ca36:	89 4a 1c             	mov    DWORD PTR [edx+0x1c],ecx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:473
        kKernelTask->tss->SS0=0x108;
 100ca39:	8b 10                	mov    edx,DWORD PTR [eax]
 100ca3b:	c7 42 08 08 01 00 00 	mov    DWORD PTR [edx+0x8],0x108
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:474
        kKernelTask->tss->ESP0=0xFF000;
 100ca42:	8b 10                	mov    edx,DWORD PTR [eax]
 100ca44:	c7 42 04 00 f0 0f 00 	mov    DWORD PTR [edx+0x4],0xff000
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:475
        kKernelTask->tss->EFLAGS=0x200207;
 100ca4b:	8b 10                	mov    edx,DWORD PTR [eax]
 100ca4d:	c7 42 24 07 02 20 00 	mov    DWORD PTR [edx+0x24],0x200207
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:476
        kKernelTask->tss->ESP=getESP() + 21;
 100ca54:	8b 18                	mov    ebx,DWORD PTR [eax]
 100ca56:	e8 07 36 ff ff       	call   1000062 <getESP>
 100ca5b:	83 c0 15             	add    eax,0x15
 100ca5e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:477
        kKernelTask->tss->ESP0=getESP() + 21;
 100ca61:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100ca66:	8b 18                	mov    ebx,DWORD PTR [eax]
 100ca68:	e8 f5 35 ff ff       	call   1000062 <getESP>
 100ca6d:	83 c0 15             	add    eax,0x15
 100ca70:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:478
        kKernelTask->tss->LINK=0x0;
 100ca73:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100ca78:	8b 00                	mov    eax,DWORD PTR [eax]
 100ca7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:479
        kKernelTask->tss->IOPB=sizeof(tss_t);
 100ca80:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100ca85:	8b 10                	mov    edx,DWORD PTR [eax]
 100ca87:	66 c7 42 66 68 00    	mov    WORD PTR [edx+0x66],0x68
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:480
        tss_t* t=kKernelTask->tss;
 100ca8d:	8b 18                	mov    ebx,DWORD PTR [eax]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:481
        tss_t* junk=(tss_t*)allocPages(0x1000);
 100ca8f:	83 ec 0c             	sub    esp,0xc
 100ca92:	68 00 10 00 00       	push   0x1000
 100ca97:	e8 27 e2 ff ff       	call   100acc3 <allocPages>
 100ca9c:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:482
        pagingMapPage(KERNEL_PAGE_DIR_ADDRESS,(uint32_t)junk|0xC0000000,(uint32_t)junk,0x07);
 100ca9e:	6a 07                	push   0x7
 100caa0:	50                   	push   eax
 100caa1:	0d 00 00 00 c0       	or     eax,0xc0000000
 100caa6:	50                   	push   eax
 100caa7:	68 00 a0 4b 00       	push   0x4ba000
 100caac:	e8 20 ec ff ff       	call   100b6d1 <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:483
        memcpy(junk,process->task->tss,sizeof(tss_t)-1);
 100cab1:	83 c4 1c             	add    esp,0x1c
 100cab4:	6a 67                	push   0x67
 100cab6:	8b 06                	mov    eax,DWORD PTR [esi]
 100cab8:	ff 30                	push   DWORD PTR [eax]
 100caba:	57                   	push   edi
 100cabb:	e8 c0 cc ff ff       	call   1009780 <memcpy>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:484
        junk->LINK=0x82;
 100cac0:	c7 07 82 00 00 00    	mov    DWORD PTR [edi],0x82
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:485
        printd(DEBUG_ELF_LOADER,"cs=%2X, ds=%2X, es=%2X, fs=%2X, gs=%2X, ss=%2X, cr3=0x%08X, flags=0x%08X, return=0x%08X\n",t->CS, t->DS, t->ES, t->FS, t->GS, t->SS,t->EFLAGS,_call_gate_wrapper);
 100cac6:	83 c4 08             	add    esp,0x8
 100cac9:	68 54 bd 00 01       	push   0x100bd54
 100cace:	ff 73 24             	push   DWORD PTR [ebx+0x24]
 100cad1:	ff 73 50             	push   DWORD PTR [ebx+0x50]
 100cad4:	ff 73 5c             	push   DWORD PTR [ebx+0x5c]
 100cad7:	ff 73 58             	push   DWORD PTR [ebx+0x58]
 100cada:	ff 73 48             	push   DWORD PTR [ebx+0x48]
 100cadd:	ff 73 54             	push   DWORD PTR [ebx+0x54]
 100cae0:	ff 73 4c             	push   DWORD PTR [ebx+0x4c]
 100cae3:	68 84 3c 04 01       	push   0x1043c84
 100cae8:	68 00 02 00 00       	push   0x200
 100caed:	e8 15 d2 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:488

        struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
        idt_set_gate (&idtTable[0x80], 9<<3, (int)&_call_gate_wrapper, ACS_INT_GATE | ACS_DPL_0);               //
 100caf2:	83 c4 30             	add    esp,0x30
 100caf5:	6a 0e                	push   0xe
 100caf7:	68 54 bd 00 01       	push   0x100bd54
 100cafc:	6a 48                	push   0x48
 100cafe:	68 00 34 16 00       	push   0x163400
 100cb03:	e8 18 dd ff ff       	call   100a820 <idt_set_gate>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:490
        //Create our return task gate
        gdtEntryApplication(0x9,(uint32_t)kKernelTask->tss,sizeof(tss_t)-1,0x89 ,GDT_GRANULAR | GDT_32BIT,true);
 100cb08:	83 c4 08             	add    esp,0x8
 100cb0b:	6a 01                	push   0x1
 100cb0d:	6a c0                	push   0xffffffc0
 100cb0f:	6a 89                	push   0xffffff89
 100cb11:	6a 67                	push   0x67
 100cb13:	8b 15 98 99 12 00    	mov    edx,DWORD PTR ds:0x129998
 100cb19:	ff 32                	push   DWORD PTR [edx]
 100cb1b:	6a 09                	push   0x9
 100cb1d:	e8 0e 69 ff ff       	call   1003430 <gdtEntryApplication>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:492
        //Create tss GDT entry for the process
        gdtEntryApplication(0x11,(uint32_t)process->task->tss,sizeof(tss_t)-1, GDT_PRESENT | GDT_DPL3 | GDT_CODE,GDT_GRANULAR | GDT_32BIT,true);
 100cb22:	83 c4 18             	add    esp,0x18
 100cb25:	6a 01                	push   0x1
 100cb27:	6a c0                	push   0xffffffc0
 100cb29:	6a e8                	push   0xffffffe8
 100cb2b:	6a 67                	push   0x67
 100cb2d:	8b 16                	mov    edx,DWORD PTR [esi]
 100cb2f:	ff 32                	push   DWORD PTR [edx]
 100cb31:	6a 11                	push   0x11
 100cb33:	e8 f8 68 ff ff       	call   1003430 <gdtEntryApplication>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:494
        //This is the gdt entry to iret to
        gdtEntryOS(0x10,(uint32_t)process->task->tss,sizeof(tss_t), ACS_DPL_3 | ACS_TSS ,GDT_GRANULAR | GDT_32BIT,true);
 100cb38:	83 c4 18             	add    esp,0x18
 100cb3b:	6a 01                	push   0x1
 100cb3d:	6a c0                	push   0xffffffc0
 100cb3f:	6a e9                	push   0xffffffe9
 100cb41:	6a 68                	push   0x68
 100cb43:	8b 16                	mov    edx,DWORD PTR [esi]
 100cb45:	ff 32                	push   DWORD PTR [edx]
 100cb47:	6a 10                	push   0x10
 100cb49:	e8 0e 69 ff ff       	call   100345c <gdtEntryOS>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:496
        //Create a junk GDT to point at a junk TSS to go in the previous field
        gdtEntryOS(0x12,(uint32_t)junk              ,sizeof(tss_t), ACS_DPL_3 | ACS_TSS ,GDT_GRANULAR | GDT_32BIT,true);
 100cb4e:	83 c4 18             	add    esp,0x18
 100cb51:	6a 01                	push   0x1
 100cb53:	6a c0                	push   0xffffffc0
 100cb55:	6a e9                	push   0xffffffe9
 100cb57:	6a 68                	push   0x68
 100cb59:	57                   	push   edi
 100cb5a:	6a 12                	push   0x12
 100cb5c:	e8 fb 68 ff ff       	call   100345c <gdtEntryOS>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:498
        //displayTSS(kKernelTask->tss);
        kernelGDT.limit = sizeof(sGDT) * GDT_TABLE_SIZE - 1;
 100cb61:	66 c7 05 88 99 12 00 	mov    WORD PTR ds:0x129988,0x3fff
 100cb68:	ff 3f 
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:499
        kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
 100cb6a:	c7 05 8a 99 12 00 00 	mov    DWORD PTR ds:0x12998a,0x164800
 100cb71:	48 16 00 
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:500
        set_gdt(&kernelGDT);
 100cb74:	83 c4 14             	add    esp,0x14
 100cb77:	68 88 99 12 00       	push   0x129988
 100cb7c:	e8 4b 05 00 00       	call   100d0cc <set_gdt>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:505


        //return 0;

        __asm__("push ds\n"
 100cb81:	1e                   	push   ds
 100cb82:	06                   	push   es
 100cb83:	0f a0                	push   fs
 100cb85:	0f a8                	push   gs
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:509
                "push es\n"
                "push fs\n"
                "push gs\n");
        if (process->task->kernel)
 100cb87:	8b 16                	mov    edx,DWORD PTR [esi]
 100cb89:	83 c4 10             	add    esp,0x10
 100cb8c:	80 7a 14 00          	cmp    BYTE PTR [edx+0x14],0x0
 100cb90:	74 45                	je     100cbd7 <sysExec_reload_CS+0x2a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:511
        {
            __asm__("mov  ds,bx\n":: "b" (0x33));
 100cb92:	bb 33 00 00 00       	mov    ebx,0x33
 100cb97:	8e db                	mov    ds,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:512
            __asm__("mov  es,bx\n":: "b" (0x33));
 100cb99:	8e c3                	mov    es,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:513
            __asm__("mov  fs,bx\n":: "b" (0x33));
 100cb9b:	8e e3                	mov    fs,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:514
            __asm__("mov  gs,bx\n":: "b" (0x33));
 100cb9d:	8e eb                	mov    gs,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:515
            __asm__("mov ax,0x48\nltr ax\n");
 100cb9f:	66 b8 48 00          	mov    ax,0x48
 100cba3:	0f 00 d8             	ltr    ax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:517
            //__asm__("push ebx\npush ecx\n"::[argvp] "b" (argv), [argcv] "c" (argc));
            __asm__("ljmp 0x100:sysExec_reload_CS\n sysExec_reload_CS:\ncall 0x01000a14");
 100cba6:	ea ad cb 00 01 00 01 	jmp    0x100:0x100cbad

0100cbad <sysExec_reload_CS>:
 100cbad:	e8 62 3e ff ff       	call   1000a14 <port_rebase+0x7d>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:544
            __asm__("ReturnPoint:nop\n");
            printk("MADE IT!!!\n");
           __asm__("mov eax,esp\nadd eax,12\npush eax\npush cs\npush %[entryPoint]\nretf\n"::[entryPoint] "m" (process->task->tss->EIP));
            JMPHR: goto JMPHR;
       }
        lsysExecRetVal=(uint32_t)eax;
 100cbb2:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:545
        printd(DEBUG_ELF_LOADER,"exec: Back from executing %s, return value is 0x%08X, 0x%08X, __bra=0x%08X\n", process->path, lsysExecRetVal, &process->path, __builtin_return_address(0));
 100cbb4:	83 ec 08             	sub    esp,0x8
 100cbb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 100cbbb:	8d 46 0c             	lea    eax,[esi+0xc]
 100cbbe:	50                   	push   eax
 100cbbf:	53                   	push   ebx
 100cbc0:	ff 76 0c             	push   DWORD PTR [esi+0xc]
 100cbc3:	68 e0 3c 04 01       	push   0x1043ce0
 100cbc8:	68 00 02 00 00       	push   0x200
 100cbcd:	e8 35 d1 ff ff       	call   1009d07 <printd>
 100cbd2:	83 c4 20             	add    esp,0x20
 100cbd5:	eb 75                	jmp    100cc4c <ReturnPoint+0x39>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:521
            //__asm__("push ebx\npush ecx\n"::[argvp] "b" (argv), [argcv] "c" (argc));
            __asm__("ljmp 0x100:sysExec_reload_CS\n sysExec_reload_CS:\ncall 0x01000a14");
        }
        else
        {
            __asm__("mov  ds,bx\n":: "b" (0x33));
 100cbd7:	bb 33 00 00 00       	mov    ebx,0x33
 100cbdc:	8e db                	mov    ds,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:522
            __asm__("mov  es,bx\n":: "b" (0x33));
 100cbde:	8e c3                	mov    es,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:523
            __asm__("mov  fs,bx\n":: "b" (0x33));
 100cbe0:	8e e3                	mov    fs,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:524
            __asm__("mov  gs,bx\n":: "b" (0x33));
 100cbe2:	8e eb                	mov    gs,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:536
            "ltr ax\n"
            "mov eax,0x3b\n" //7
            "push eax\n"                                        //Target CS
            //"push %[exec]\n"                                    //Target EIP
            "lea eax,jmpHere\npush eax\n"
            ::[stackPtr] "b" (process->task->tss->ESP),[eFlags] "d" (process->task->tss->EFLAGS));
 100cbe4:	8b 02                	mov    eax,DWORD PTR [edx]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:525
        {
            __asm__("mov  ds,bx\n":: "b" (0x33));
            __asm__("mov  es,bx\n":: "b" (0x33));
            __asm__("mov  fs,bx\n":: "b" (0x33));
            __asm__("mov  gs,bx\n":: "b" (0x33));
            __asm__("mov eax,0x00000043\n"                              //Target SS
 100cbe6:	8b 58 38             	mov    ebx,DWORD PTR [eax+0x38]
 100cbe9:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
 100cbec:	b8 43 00 00 00       	mov    eax,0x43
 100cbf1:	50                   	push   eax
 100cbf2:	53                   	push   ebx
 100cbf3:	52                   	push   edx
 100cbf4:	b8 82 00 00 00       	mov    eax,0x82
 100cbf9:	0f 00 d8             	ltr    ax
 100cbfc:	b8 3b 00 00 00       	mov    eax,0x3b
 100cc01:	50                   	push   eax
 100cc02:	8d 05 12 cc 00 01    	lea    eax,ds:0x100cc12
 100cc08:	50                   	push   eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:537
            "mov eax,0x3b\n" //7
            "push eax\n"                                        //Target CS
            //"push %[exec]\n"                                    //Target EIP
            "lea eax,jmpHere\npush eax\n"
            ::[stackPtr] "b" (process->task->tss->ESP),[eFlags] "d" (process->task->tss->EFLAGS));
           SWITCH_CR3;
 100cc09:	a1 5c 9c 07 01       	mov    eax,ds:0x1079c5c
 100cc0e:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:538
            __asm__("iretd\njmpHere:nop\n");
 100cc11:	cf                   	iret   

0100cc12 <jmpHere>:
 100cc12:	90                   	nop

0100cc13 <ReturnPoint>:
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:539
            __asm__("ReturnPoint:nop\n");
 100cc13:	90                   	nop
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:540
            printk("MADE IT!!!\n");
 100cc14:	83 ec 0c             	sub    esp,0xc
 100cc17:	68 a3 79 06 01       	push   0x10679a3
 100cc1c:	e8 ce d0 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:541
           __asm__("mov eax,esp\nadd eax,12\npush eax\npush cs\npush %[entryPoint]\nretf\n"::[entryPoint] "m" (process->task->tss->EIP));
 100cc21:	8b 06                	mov    eax,DWORD PTR [esi]
 100cc23:	8b 00                	mov    eax,DWORD PTR [eax]
 100cc25:	89 e0                	mov    eax,esp
 100cc27:	83 c0 0c             	add    eax,0xc
 100cc2a:	50                   	push   eax
 100cc2b:	0e                   	push   cs
 100cc2c:	ff 70 20             	push   DWORD PTR [eax+0x20]
 100cc2f:	cb                   	retf   
 100cc30:	83 c4 10             	add    esp,0x10
 100cc33:	eb fe                	jmp    100cc33 <ReturnPoint+0x20>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:549
        lsysExecRetVal=(uint32_t)eax;
        printd(DEBUG_ELF_LOADER,"exec: Back from executing %s, return value is 0x%08X, 0x%08X, __bra=0x%08X\n", process->path, lsysExecRetVal, &process->path, __builtin_return_address(0));
    }
    else
    {
        printk("sysExec: Should never get here!!!\n");
 100cc35:	83 ec 0c             	sub    esp,0xc
 100cc38:	68 2c 3d 04 01       	push   0x1043d2c
 100cc3d:	e8 ad d0 ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:550
        STOPHERE2
 100cc42:	fa                   	cli    
 100cc43:	f4                   	hlt    
 100cc44:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:449
     return true;
}

int sysExec(process_t* process,int argc,char** argv)
{
    int lsysExecRetVal=0;
 100cc47:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:553
    {
        printk("sysExec: Should never get here!!!\n");
        STOPHERE2
    }
    return lsysExecRetVal;
}
 100cc4c:	89 d8                	mov    eax,ebx
 100cc4e:	5b                   	pop    ebx
 100cc4f:	5e                   	pop    esi
 100cc50:	5f                   	pop    edi
 100cc51:	c3                   	ret    
ReturnPoint():
 100cc52:	66 90                	xchg   ax,ax

0100cc54 <taskInit>:
taskInit():
/home/yogi/src/os/chrisOSKernel/src/task.c:23
extern void pagingMapPageIntoKernel(uintptr_t processCR3, uintptr_t virtualAddress, uint8_t flags);
extern char* kernelDataLoadAddress, *kernelLoadAddress, *kernelLoadEnd;
extern uint32_t getESP();

void taskInit()
{
 100cc54:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:26 (discriminator 3)
    for (int cnt=0;cnt<TSS_TABLE_RECORD_COUNT/8;cnt++)
    {
        kTaskSlotAvailableInd[cnt]=0xFFFFFFFF;
 100cc59:	8b 15 30 99 12 00    	mov    edx,DWORD PTR ds:0x129930
 100cc5f:	c7 04 02 ff ff ff ff 	mov    DWORD PTR [edx+eax*1],0xffffffff
 100cc66:	83 c0 04             	add    eax,0x4
/home/yogi/src/os/chrisOSKernel/src/task.c:24 (discriminator 3)
extern char* kernelDataLoadAddress, *kernelLoadAddress, *kernelLoadEnd;
extern uint32_t getESP();

void taskInit()
{
    for (int cnt=0;cnt<TSS_TABLE_RECORD_COUNT/8;cnt++)
 100cc69:	3d 00 20 00 00       	cmp    eax,0x2000
 100cc6e:	75 e9                	jne    100cc59 <taskInit+0x5>
/home/yogi/src/os/chrisOSKernel/src/task.c:28
    {
        kTaskSlotAvailableInd[cnt]=0xFFFFFFFF;
    }
}
 100cc70:	f3 c3                	repz ret 

0100cc72 <getTaskSlot>:
getTaskSlot():
/home/yogi/src/os/chrisOSKernel/src/task.c:32

///Find an open TSS slot and mark it in use
task_t* getTaskSlot()
{
 100cc72:	57                   	push   edi
 100cc73:	56                   	push   esi
 100cc74:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/src/task.c:34
   int cnt=1,slot=0; //The first slot will ALWAYS be blank, so start with slot 1
   uint32_t* ptr=kTaskSlotAvailableInd;
 100cc75:	8b 1d 30 99 12 00    	mov    ebx,DWORD PTR ds:0x129930
/home/yogi/src/os/chrisOSKernel/src/task.c:33
}

///Find an open TSS slot and mark it in use
task_t* getTaskSlot()
{
   int cnt=1,slot=0; //The first slot will ALWAYS be blank, so start with slot 1
 100cc7b:	be 01 00 00 00       	mov    esi,0x1
/home/yogi/src/os/chrisOSKernel/src/task.c:37
   uint32_t* ptr=kTaskSlotAvailableInd;
    while (cnt < TSS_TABLE_RECORD_COUNT/32)
    {
        printd (DEBUG_TASK,"getTask: Checking slots at 0x%08X, cnt=%u\n",ptr,cnt);
 100cc80:	56                   	push   esi
 100cc81:	53                   	push   ebx
 100cc82:	68 50 3d 04 01       	push   0x1043d50
 100cc87:	68 00 40 00 00       	push   0x4000
 100cc8c:	e8 76 d0 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:38
        slot=bitsScanF(ptr);
 100cc91:	89 1c 24             	mov    DWORD PTR [esp],ebx
 100cc94:	e8 86 66 ff ff       	call   100331f <bitsScanF>
 100cc99:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/src/task.c:39
        if (slot>-1)
 100cc9b:	83 c4 10             	add    esp,0x10
 100cc9e:	85 c0                	test   eax,eax
 100cca0:	78 77                	js     100cd19 <getTaskSlot+0xa7>
/home/yogi/src/os/chrisOSKernel/src/task.c:41
        {
            task_t* task=&kTaskTable[slot];
 100cca2:	8d 04 40             	lea    eax,[eax+eax*2]
 100cca5:	8b 15 38 99 12 00    	mov    edx,DWORD PTR ds:0x129938
 100ccab:	8d 34 c2             	lea    esi,[edx+eax*8]
/home/yogi/src/os/chrisOSKernel/src/task.c:42
            printd(DEBUG_TASK,"getTaskSlot: Marking TSS %u used\n",slot);
 100ccae:	83 ec 04             	sub    esp,0x4
 100ccb1:	57                   	push   edi
 100ccb2:	68 7c 3d 04 01       	push   0x1043d7c
 100ccb7:	68 00 40 00 00       	push   0x4000
 100ccbc:	e8 46 d0 ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:43
            bitsReset(ptr,slot);
 100ccc1:	83 c4 08             	add    esp,0x8
 100ccc4:	57                   	push   edi
 100ccc5:	53                   	push   ebx
 100ccc6:	e8 22 66 ff ff       	call   10032ed <bitsReset>
/home/yogi/src/os/chrisOSKernel/src/task.c:44
            task->tss=allocPages(PAGE_SIZE); //&kTSSTable[slot];
 100cccb:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
 100ccd2:	e8 ec df ff ff       	call   100acc3 <allocPages>
 100ccd7:	89 06                	mov    DWORD PTR [esi],eax
/home/yogi/src/os/chrisOSKernel/src/task.c:45
            pagingMapPage(KERNEL_PAGE_DIR_ADDRESS,(uint32_t)task->tss | KERNEL_PAGED_BASE_ADDRESS,task->tss,0x3);
 100ccd9:	6a 03                	push   0x3
 100ccdb:	50                   	push   eax
 100ccdc:	0d 00 00 00 c0       	or     eax,0xc0000000
 100cce1:	50                   	push   eax
 100cce2:	68 00 a0 4b 00       	push   0x4ba000
 100cce7:	e8 e5 e9 ff ff       	call   100b6d1 <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/task.c:46
            if (slot>0)
 100ccec:	83 c4 20             	add    esp,0x20
 100ccef:	85 ff                	test   edi,edi
 100ccf1:	7e 09                	jle    100ccfc <getTaskSlot+0x8a>
/home/yogi/src/os/chrisOSKernel/src/task.c:48
            {
                (task-1)->next=task;
 100ccf3:	89 76 f4             	mov    DWORD PTR [esi-0xc],esi
/home/yogi/src/os/chrisOSKernel/src/task.c:49
                task->prev=(task-1);
 100ccf6:	8d 46 e8             	lea    eax,[esi-0x18]
 100ccf9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
/home/yogi/src/os/chrisOSKernel/src/task.c:51
            }
            printd(DEBUG_TASK,"getTaskSlot: Using task %u @ 0x%08X, set TSS to 0x%08X\n",slot, task,task->tss);
 100ccfc:	83 ec 0c             	sub    esp,0xc
 100ccff:	ff 36                	push   DWORD PTR [esi]
 100cd01:	56                   	push   esi
 100cd02:	57                   	push   edi
 100cd03:	68 a0 3d 04 01       	push   0x1043da0
 100cd08:	68 00 40 00 00       	push   0x4000
 100cd0d:	e8 f5 cf ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:52
            return task;
 100cd12:	83 c4 20             	add    esp,0x20
 100cd15:	89 f0                	mov    eax,esi
 100cd17:	eb 27                	jmp    100cd40 <getTaskSlot+0xce>
/home/yogi/src/os/chrisOSKernel/src/task.c:54
        }
        ptr++;cnt++;
 100cd19:	83 c3 04             	add    ebx,0x4
 100cd1c:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/src/task.c:35
///Find an open TSS slot and mark it in use
task_t* getTaskSlot()
{
   int cnt=1,slot=0; //The first slot will ALWAYS be blank, so start with slot 1
   uint32_t* ptr=kTaskSlotAvailableInd;
    while (cnt < TSS_TABLE_RECORD_COUNT/32)
 100cd1f:	81 fe 00 02 00 00    	cmp    esi,0x200
 100cd25:	0f 85 55 ff ff ff    	jne    100cc80 <getTaskSlot+0xe>
/home/yogi/src/os/chrisOSKernel/src/task.c:56
            printd(DEBUG_TASK,"getTaskSlot: Using task %u @ 0x%08X, set TSS to 0x%08X\n",slot, task,task->tss);
            return task;
        }
        ptr++;cnt++;
    }
    printk("tssUseAvailable: Cannot allocate TSS for new task");
 100cd2b:	83 ec 0c             	sub    esp,0xc
 100cd2e:	68 d8 3d 04 01       	push   0x1043dd8
 100cd33:	e8 b7 cf ff ff       	call   1009cef <printk>
/home/yogi/src/os/chrisOSKernel/src/task.c:57
    return NULL;
 100cd38:	83 c4 10             	add    esp,0x10
 100cd3b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:58
}
 100cd40:	5b                   	pop    ebx
 100cd41:	5e                   	pop    esi
 100cd42:	5f                   	pop    edi
 100cd43:	c3                   	ret    

0100cd44 <mmMapKernelIntoTask>:
mmMapKernelIntoTask():
/home/yogi/src/os/chrisOSKernel/src/task.c:61

void mmMapKernelIntoTask(task_t* task)
{
 100cd44:	55                   	push   ebp
 100cd45:	57                   	push   edi
 100cd46:	56                   	push   esi
 100cd47:	53                   	push   ebx
 100cd48:	83 ec 0c             	sub    esp,0xc
 100cd4b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/src/task.c:62
    uint32_t oldDebugLevel=kDebugLevel;
 100cd4f:	8b 35 78 98 12 00    	mov    esi,DWORD PTR ds:0x129878
/home/yogi/src/os/chrisOSKernel/src/task.c:63
    kDebugLevel &= (~DEBUG_PAGING);  //Temporarily turn off paging debug if it is on or this takes forever and produces copious output
 100cd55:	89 f0                	mov    eax,esi
 100cd57:	83 e0 80             	and    eax,0xffffff80
 100cd5a:	a3 78 98 12 00       	mov    ds:0x129878,eax
/home/yogi/src/os/chrisOSKernel/src/task.c:74

    //printd(DEBUG_TASK,"kla=0x%08X, kle=0x%08X, klda=0x%08X\n",kla,kle,kdla);

    //Map the kernel data into the user process (read/write - process memory space)
    //NOTE: This mapping is first because it is read/write so it will set up the PDE as read/write
    printd(DEBUG_TASK,"Map kernel data into user process: 0x%08X to 0x%08X\n",kdla,kdla+(0x1000*0x100));
 100cd5f:	68 00 00 22 00       	push   0x220000
 100cd64:	68 00 00 12 00       	push   0x120000
 100cd69:	68 0c 3e 04 01       	push   0x1043e0c
 100cd6e:	68 00 40 00 00       	push   0x4000
 100cd73:	e8 8f cf ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:75
    pagingMapPageCount(task->tss->CR3,kdla,kdla,0x100,0x7);
 100cd78:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
 100cd7f:	68 00 01 00 00       	push   0x100
 100cd84:	68 00 00 12 00       	push   0x120000
 100cd89:	68 00 00 12 00       	push   0x120000
 100cd8e:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cd90:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100cd93:	e8 5e ec ff ff       	call   100b9f6 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:77
    //Map map kernel into the user process (read only - 0x0 memory space)
    printd(DEBUG_TASK,"Map K to U: p=0x%08X (v=0x%08X) to p=0x%08X (v=0x%08X)\n",kla,kla,kle,kle);
 100cd98:	83 c4 18             	add    esp,0x18
 100cd9b:	68 90 9c 07 01       	push   0x1079c90
 100cda0:	68 90 9c 07 01       	push   0x1079c90
 100cda5:	68 00 00 00 01       	push   0x1000000
 100cdaa:	68 00 00 00 01       	push   0x1000000
 100cdaf:	68 44 3e 04 01       	push   0x1043e44
 100cdb4:	68 00 40 00 00       	push   0x4000
 100cdb9:	e8 49 cf ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:78
    pagingMapPageRange(task->tss->CR3,kla, kle, kla,0x7);
 100cdbe:	83 c4 14             	add    esp,0x14
 100cdc1:	6a 07                	push   0x7
 100cdc3:	68 00 00 00 01       	push   0x1000000
 100cdc8:	68 90 9c 07 01       	push   0x1079c90
 100cdcd:	68 00 00 00 01       	push   0x1000000
 100cdd2:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cdd4:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100cdd7:	e8 d3 eb ff ff       	call   100b9af <pagingMapPageRange>
/home/yogi/src/os/chrisOSKernel/src/task.c:81

    //Map map kernel into the user process (read only - kernel memory space)
    printd(DEBUG_TASK,"Map K to U: p=0x%08X (v=0x%08X) to p=0x%08X (v=0x%08X)\n",kla | KERNEL_PAGED_BASE_ADDRESS,kla,kle | KERNEL_PAGED_BASE_ADDRESS,kle);
 100cddc:	bd 90 9c 07 01       	mov    ebp,0x1079c90
 100cde1:	81 cd 00 00 00 c0    	or     ebp,0xc0000000
 100cde7:	bf 00 00 00 01       	mov    edi,0x1000000
 100cdec:	81 cf 00 00 00 c0    	or     edi,0xc0000000
 100cdf2:	83 c4 18             	add    esp,0x18
 100cdf5:	68 90 9c 07 01       	push   0x1079c90
 100cdfa:	55                   	push   ebp
 100cdfb:	68 00 00 00 01       	push   0x1000000
 100ce00:	57                   	push   edi
 100ce01:	68 44 3e 04 01       	push   0x1043e44
 100ce06:	68 00 40 00 00       	push   0x4000
 100ce0b:	e8 f7 ce ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:82
    pagingMapPageRange(task->tss->CR3,kla |  KERNEL_PAGED_BASE_ADDRESS, kle | KERNEL_PAGED_BASE_ADDRESS, kla,0x3);
 100ce10:	83 c4 14             	add    esp,0x14
 100ce13:	6a 03                	push   0x3
 100ce15:	68 00 00 00 01       	push   0x1000000
 100ce1a:	55                   	push   ebp
 100ce1b:	57                   	push   edi
 100ce1c:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ce1e:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100ce21:	e8 89 eb ff ff       	call   100b9af <pagingMapPageRange>
/home/yogi/src/os/chrisOSKernel/src/task.c:85

    //Map map kernel into the user process (read only - process memory space)
    printd(DEBUG_TASK,"Map K to U: p=0x%08X (v=0x%08X) to p=0x%08X (v=0x%08X)\n",kla,kla|0xC0000000,kle,kle|0xC0000000);
 100ce26:	83 c4 18             	add    esp,0x18
 100ce29:	55                   	push   ebp
 100ce2a:	68 90 9c 07 01       	push   0x1079c90
 100ce2f:	57                   	push   edi
 100ce30:	68 00 00 00 01       	push   0x1000000
 100ce35:	68 44 3e 04 01       	push   0x1043e44
 100ce3a:	68 00 40 00 00       	push   0x4000
 100ce3f:	e8 c3 ce ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:86
    pagingMapPageRange(task->tss->CR3,kla, kle, kla,0x5);
 100ce44:	83 c4 14             	add    esp,0x14
 100ce47:	6a 05                	push   0x5
 100ce49:	68 00 00 00 01       	push   0x1000000
 100ce4e:	68 90 9c 07 01       	push   0x1079c90
 100ce53:	68 00 00 00 01       	push   0x1000000
 100ce58:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ce5a:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100ce5d:	e8 4d eb ff ff       	call   100b9af <pagingMapPageRange>
/home/yogi/src/os/chrisOSKernel/src/task.c:89

//    //Map our kernel stack into the user process ... FIXME: this is BAD***
    uint32_t kStack=getESP();
 100ce62:	83 c4 20             	add    esp,0x20
 100ce65:	e8 f8 31 ff ff       	call   1000062 <getESP>
/home/yogi/src/os/chrisOSKernel/src/task.c:90
    pagingMapPageCount(task->tss->CR3,kStack-0x1000  | 0xC0000000,kStack-0x1000,3,0x7); //read/write
 100ce6a:	2d 00 10 00 00       	sub    eax,0x1000
 100ce6f:	83 ec 0c             	sub    esp,0xc
 100ce72:	6a 07                	push   0x7
 100ce74:	6a 03                	push   0x3
 100ce76:	50                   	push   eax
 100ce77:	0d 00 00 00 c0       	or     eax,0xc0000000
 100ce7c:	50                   	push   eax
 100ce7d:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ce7f:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100ce82:	e8 6f eb ff ff       	call   100b9f6 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:93
    
    //Map the kernel interrupt table into the process so that it can execute 0x80 to return to the kernel
    pagingMapPageCount(task->tss->CR3,IDT_TABLE_ADDRESS,IDT_TABLE_ADDRESS,10,0x7);
 100ce87:	83 c4 14             	add    esp,0x14
 100ce8a:	6a 07                	push   0x7
 100ce8c:	6a 0a                	push   0xa
 100ce8e:	68 00 30 16 00       	push   0x163000
 100ce93:	68 00 30 16 00       	push   0x163000
 100ce98:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ce9a:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100ce9d:	e8 54 eb ff ff       	call   100b9f6 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:96
    
    //Map the first 0x100000 (minus 0x0) into the process, where the OS loader is, so that ISRs can run
    printd(DEBUG_TASK,"Map OS loader into user process: 0x%08X to 0x%08X r/o\n",0xC0001000,0x1000+(0x100*0x1000));
 100cea2:	83 c4 20             	add    esp,0x20
 100cea5:	68 00 10 10 00       	push   0x101000
 100ceaa:	68 00 10 00 c0       	push   0xc0001000
 100ceaf:	68 7c 3e 04 01       	push   0x1043e7c
 100ceb4:	68 00 40 00 00       	push   0x4000
 100ceb9:	e8 49 ce ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:97
    pagingMapPageCount(task->tss->CR3,0x00001000,0x1000,0x100,0x5);
 100cebe:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
 100cec5:	68 00 01 00 00       	push   0x100
 100ceca:	68 00 10 00 00       	push   0x1000
 100cecf:	68 00 10 00 00       	push   0x1000
 100ced4:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ced6:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100ced9:	e8 18 eb ff ff       	call   100b9f6 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:98
    kDebugLevel=oldDebugLevel;
 100cede:	89 35 78 98 12 00    	mov    DWORD PTR ds:0x129878,esi
/home/yogi/src/os/chrisOSKernel/src/task.c:99
}
 100cee4:	83 c4 2c             	add    esp,0x2c
 100cee7:	5b                   	pop    ebx
 100cee8:	5e                   	pop    esi
 100cee9:	5f                   	pop    edi
 100ceea:	5d                   	pop    ebp
 100ceeb:	c3                   	ret    

0100ceec <createTask>:
createTask():
/home/yogi/src/os/chrisOSKernel/src/task.c:102

task_t* createTask(bool kernelTSS)
{
 100ceec:	57                   	push   edi
 100ceed:	56                   	push   esi
 100ceee:	53                   	push   ebx
 100ceef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/task.c:103
    printd(DEBUG_TASK,"createTask: calling getTaskSlot\n");
 100cef3:	83 ec 08             	sub    esp,0x8
 100cef6:	68 b4 3e 04 01       	push   0x1043eb4
 100cefb:	68 00 40 00 00       	push   0x4000
 100cf00:	e8 02 ce ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:104
    task_t* task=getTaskSlot();     //create task in the kTaskTable, also a tss in the same slot# in kTSSTable
 100cf05:	e8 68 fd ff ff       	call   100cc72 <getTaskSlot>
/home/yogi/src/os/chrisOSKernel/src/task.c:106
    
    if (task==0)
 100cf0a:	83 c4 10             	add    esp,0x10
 100cf0d:	85 c0                	test   eax,eax
 100cf0f:	0f 84 ab 01 00 00    	je     100d0c0 <createTask+0x1d4>
 100cf15:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/task.c:110
        return NULL;
    
    //Configure the task registers
    printd(DEBUG_TASK,"createTask: Set task CR3 to 1k page directory @ 0x%08X\n",task->tss->CR3);
 100cf17:	83 ec 04             	sub    esp,0x4
 100cf1a:	8b 00                	mov    eax,DWORD PTR [eax]
 100cf1c:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100cf1f:	68 d8 3e 04 01       	push   0x1043ed8
 100cf24:	68 00 40 00 00       	push   0x4000
 100cf29:	e8 d9 cd ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:111
    task->tss->CR3=(uint32_t)pagingAllocatePagingTablePage();
 100cf2e:	8b 3b                	mov    edi,DWORD PTR [ebx]
 100cf30:	e8 bf e4 ff ff       	call   100b3f4 <pagingAllocatePagingTablePage>
 100cf35:	89 47 1c             	mov    DWORD PTR [edi+0x1c],eax
/home/yogi/src/os/chrisOSKernel/src/task.c:113
    //Map the CR3 into our memory space for before the iRet
    pagingMapPage(KERNEL_PAGE_DIR_ADDRESS,task->tss->CR3 | KERNEL_PAGED_BASE_ADDRESS,task->tss->CR3,0x3);
 100cf38:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cf3a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
 100cf3d:	6a 03                	push   0x3
 100cf3f:	50                   	push   eax
 100cf40:	0d 00 00 00 c0       	or     eax,0xc0000000
 100cf45:	50                   	push   eax
 100cf46:	68 00 a0 4b 00       	push   0x4ba000
 100cf4b:	e8 81 e7 ff ff       	call   100b6d1 <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/task.c:114
    task->pageDir=(uint32_t*)task->tss->CR3;
 100cf50:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cf52:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
 100cf55:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/src/task.c:115
    mmMapKernelIntoTask(task);
 100cf58:	83 c4 14             	add    esp,0x14
 100cf5b:	53                   	push   ebx
 100cf5c:	e8 e3 fd ff ff       	call   100cd44 <mmMapKernelIntoTask>
/home/yogi/src/os/chrisOSKernel/src/task.c:117
    //Map our CR3 into program's memory space, needed before the iRet
    printd(DEBUG_TASK,"Mapping our CR3 into program, v=0x%08X, p=0x%08X\n",KERNEL_PAGE_DIR_ADDRESS & ~KERNEL_PAGED_BASE_ADDRESS, KERNEL_PAGE_DIR_ADDRESS & ~KERNEL_PAGED_BASE_ADDRESS);
 100cf61:	68 00 a0 4b 00       	push   0x4ba000
 100cf66:	68 00 a0 4b 00       	push   0x4ba000
 100cf6b:	68 10 3f 04 01       	push   0x1043f10
 100cf70:	68 00 40 00 00       	push   0x4000
 100cf75:	e8 8d cd ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:118
    pagingMapPageCount(task->tss->CR3,KERNEL_PAGE_DIR_ADDRESS & ~KERNEL_PAGED_BASE_ADDRESS, KERNEL_PAGE_DIR_ADDRESS & ~KERNEL_PAGED_BASE_ADDRESS,(0xFFFFFFFF/0x400000)+1,0x7);
 100cf7a:	83 c4 14             	add    esp,0x14
 100cf7d:	6a 07                	push   0x7
 100cf7f:	68 00 04 00 00       	push   0x400
 100cf84:	68 00 a0 4b 00       	push   0x4ba000
 100cf89:	68 00 a0 4b 00       	push   0x4ba000
 100cf8e:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cf90:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100cf93:	e8 5e ea ff ff       	call   100b9f6 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:119
    printd(DEBUG_TASK,"createTask: Mapping kernel into task\n");
 100cf98:	83 c4 18             	add    esp,0x18
 100cf9b:	68 44 3f 04 01       	push   0x1043f44
 100cfa0:	68 00 40 00 00       	push   0x4000
 100cfa5:	e8 5d cd ff ff       	call   1009d07 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:120
    task->tss->EAX=0;
 100cfaa:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cfac:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:121
    task->tss->EBX=task->tss->ECX=task->tss->EDX=task->tss->ESI=task->tss->EDI=task->tss->EBP=0;
 100cfb3:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cfb5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
 100cfbc:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
 100cfc3:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
 100cfca:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
 100cfd1:	c7 40 2c 00 00 00 00 	mov    DWORD PTR [eax+0x2c],0x0
 100cfd8:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:122
    task->tss->SS0=0x10;
 100cfdf:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cfe1:	c7 40 08 10 00 00 00 	mov    DWORD PTR [eax+0x8],0x10
/home/yogi/src/os/chrisOSKernel/src/task.c:123
    if (kernelTSS)
 100cfe8:	83 c4 10             	add    esp,0x10
 100cfeb:	89 f0                	mov    eax,esi
 100cfed:	84 c0                	test   al,al
 100cfef:	74 0b                	je     100cffc <createTask+0x110>
/home/yogi/src/os/chrisOSKernel/src/task.c:124
        task->tss->SS=0x10;
 100cff1:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cff3:	c7 40 50 10 00 00 00 	mov    DWORD PTR [eax+0x50],0x10
 100cffa:	eb 09                	jmp    100d005 <createTask+0x119>
/home/yogi/src/os/chrisOSKernel/src/task.c:126
    else
        task->tss->SS=0x43;
 100cffc:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cffe:	c7 40 50 43 00 00 00 	mov    DWORD PTR [eax+0x50],0x43
/home/yogi/src/os/chrisOSKernel/src/task.c:127
    task->tss->ESP0=0x1ffffff0;
 100d005:	8b 03                	mov    eax,DWORD PTR [ebx]
 100d007:	c7 40 04 f0 ff ff 1f 	mov    DWORD PTR [eax+0x4],0x1ffffff0
/home/yogi/src/os/chrisOSKernel/src/task.c:129
    //Allocate space for the stack
    task->tss->ESP=(uint32_t)allocPages(0x16000);
 100d00e:	8b 3b                	mov    edi,DWORD PTR [ebx]
 100d010:	83 ec 0c             	sub    esp,0xc
 100d013:	68 00 60 01 00       	push   0x16000
 100d018:	e8 a6 dc ff ff       	call   100acc3 <allocPages>
 100d01d:	89 47 38             	mov    DWORD PTR [edi+0x38],eax
/home/yogi/src/os/chrisOSKernel/src/task.c:130
    pagingMapPageCount(task->tss->CR3,task->tss->ESP,task->tss->ESP,0x16,0x7);
 100d020:	8b 03                	mov    eax,DWORD PTR [ebx]
 100d022:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
 100d025:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
 100d02c:	6a 16                	push   0x16
 100d02e:	52                   	push   edx
 100d02f:	52                   	push   edx
 100d030:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100d033:	e8 be e9 ff ff       	call   100b9f6 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:132
    //Map the stack process into our address space so that we can use it after the iRet
    pagingMapPageCount(KERNEL_PAGE_DIR_ADDRESS,task->tss->ESP,task->tss->ESP,0x16,0x7);
 100d038:	8b 03                	mov    eax,DWORD PTR [ebx]
 100d03a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
 100d03d:	83 c4 14             	add    esp,0x14
 100d040:	6a 07                	push   0x7
 100d042:	6a 16                	push   0x16
 100d044:	50                   	push   eax
 100d045:	50                   	push   eax
 100d046:	68 00 a0 4b 00       	push   0x4ba000
 100d04b:	e8 a6 e9 ff ff       	call   100b9f6 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:134
    //Set the pointer so that we don't go off the pages
    task->tss->ESP+=0x15000;
 100d050:	8b 03                	mov    eax,DWORD PTR [ebx]
 100d052:	81 40 38 00 50 01 00 	add    DWORD PTR [eax+0x38],0x15000
/home/yogi/src/os/chrisOSKernel/src/task.c:135
    task->tss->EFLAGS=0x200046;
 100d059:	8b 03                	mov    eax,DWORD PTR [ebx]
 100d05b:	c7 40 24 46 00 20 00 	mov    DWORD PTR [eax+0x24],0x200046
/home/yogi/src/os/chrisOSKernel/src/task.c:136
    task->tss->LINK=0x0; //need an old TSS entry (garbage) to "store" the old variables to on LTR
 100d062:	8b 03                	mov    eax,DWORD PTR [ebx]
 100d064:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:138
    //If it is a kernel task
    task->kernel=kernelTSS;
 100d06a:	89 f0                	mov    eax,esi
 100d06c:	88 43 14             	mov    BYTE PTR [ebx+0x14],al
/home/yogi/src/os/chrisOSKernel/src/task.c:139
    if (kernelTSS)
 100d06f:	83 c4 20             	add    esp,0x20
 100d072:	84 c0                	test   al,al
 100d074:	74 20                	je     100d096 <createTask+0x1aa>
/home/yogi/src/os/chrisOSKernel/src/task.c:140
        task->tss->DS=task->tss->ES=task->tss->FS=task->tss->GS=0x108;
 100d076:	8b 03                	mov    eax,DWORD PTR [ebx]
 100d078:	c7 40 5c 08 01 00 00 	mov    DWORD PTR [eax+0x5c],0x108
 100d07f:	c7 40 58 08 01 00 00 	mov    DWORD PTR [eax+0x58],0x108
 100d086:	c7 40 48 08 01 00 00 	mov    DWORD PTR [eax+0x48],0x108
 100d08d:	c7 40 54 08 01 00 00 	mov    DWORD PTR [eax+0x54],0x108
 100d094:	eb 1e                	jmp    100d0b4 <createTask+0x1c8>
/home/yogi/src/os/chrisOSKernel/src/task.c:142
    else
        task->tss->DS=task->tss->ES=task->tss->FS=task->tss->GS=0x33;
 100d096:	8b 03                	mov    eax,DWORD PTR [ebx]
 100d098:	c7 40 5c 33 00 00 00 	mov    DWORD PTR [eax+0x5c],0x33
 100d09f:	c7 40 58 33 00 00 00 	mov    DWORD PTR [eax+0x58],0x33
 100d0a6:	c7 40 48 33 00 00 00 	mov    DWORD PTR [eax+0x48],0x33
 100d0ad:	c7 40 54 33 00 00 00 	mov    DWORD PTR [eax+0x54],0x33
/home/yogi/src/os/chrisOSKernel/src/task.c:143
    task->tss->IOPB=sizeof(tss_t);
 100d0b4:	8b 03                	mov    eax,DWORD PTR [ebx]
 100d0b6:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
/home/yogi/src/os/chrisOSKernel/src/task.c:144
    return task;
 100d0bc:	89 d8                	mov    eax,ebx
 100d0be:	eb 05                	jmp    100d0c5 <createTask+0x1d9>
/home/yogi/src/os/chrisOSKernel/src/task.c:107
{
    printd(DEBUG_TASK,"createTask: calling getTaskSlot\n");
    task_t* task=getTaskSlot();     //create task in the kTaskTable, also a tss in the same slot# in kTSSTable
    
    if (task==0)
        return NULL;
 100d0c0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:145
        task->tss->DS=task->tss->ES=task->tss->FS=task->tss->GS=0x108;
    else
        task->tss->DS=task->tss->ES=task->tss->FS=task->tss->GS=0x33;
    task->tss->IOPB=sizeof(tss_t);
    return task;
}
 100d0c5:	5b                   	pop    ebx
 100d0c6:	5e                   	pop    esi
 100d0c7:	5f                   	pop    edi
 100d0c8:	c3                   	ret    
 100d0c9:	66 90                	xchg   ax,ax
 100d0cb:	90                   	nop

0100d0cc <set_gdt>:
set_gdt():
/home/yogi/src/os/chrisOSKernel/src/x86.s:6
.intel_syntax noprefix
.globl set_gdt
.type set_gdt, @function
set_gdt:
.code32
push eax
 100d0cc:	50                   	push   eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:7
    mov eax, [esp + 0x8]
 100d0cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/src/x86.s:8
    lgdt [eax]
 100d0d1:	0f 01 10             	lgdtd  [eax]
/home/yogi/src/os/chrisOSKernel/src/x86.s:9
    pop eax
 100d0d4:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:10
    jmp 0x20:.reload_CS
 100d0d5:	ea dc d0 00 01 20 00 	jmp    0x20:0x100d0dc

0100d0dc <.reload_CS>:
.reload_CS():
/home/yogi/src/os/chrisOSKernel/src/x86.s:13
.reload_CS:
.code16
    mov ax, 0x10
 100d0dc:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOSKernel/src/x86.s:15
    mov ds, ax
    mov es, ax
 100d0e1:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:16
    mov fs, ax
 100d0e3:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:17
    mov gs, ax
 100d0e5:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:18
    mov ss, ax
 100d0e7:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:20
.code32
    ret
 100d0e9:	c3                   	ret    

0100d0ea <idt_load>:
idt_load():
/home/yogi/src/os/chrisOSKernel/src/x86.s:27
// Loads the IDT defined in '_idtp' into the processor.
// This is declared in C as 'extern void idt_load();'
.globl idt_load
.type idt_load, @function
idt_load:
    push ebp
 100d0ea:	55                   	push   ebp
/home/yogi/src/os/chrisOSKernel/src/x86.s:28
    mov ebp, esp
 100d0eb:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOSKernel/src/x86.s:29
    push eax
 100d0ed:	50                   	push   eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:30
    push ebx
 100d0ee:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/src/x86.s:31
    cli
 100d0ef:	fa                   	cli    
/home/yogi/src/os/chrisOSKernel/src/x86.s:32
    mov eax,[ebp+12]    #size + bottom of offset
 100d0f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOSKernel/src/x86.s:33
    mov ebx,[ebp+8]     #top of offset
 100d0f3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOSKernel/src/x86.s:34
    ror eax,16          #mov the size out of the way
 100d0f6:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOSKernel/src/x86.s:35
    mov ax,bx           #move the top of the address
 100d0f9:	66 89 d8             	mov    ax,bx
/home/yogi/src/os/chrisOSKernel/src/x86.s:36
    ror eax,16
 100d0fc:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOSKernel/src/x86.s:37
    shr ebx,16
 100d0ff:	c1 eb 10             	shr    ebx,0x10
/home/yogi/src/os/chrisOSKernel/src/x86.s:38
    mov idtPtrToLoad,eax
 100d102:	a3 19 d1 00 01       	mov    ds:0x100d119,eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:39
    mov idtPtrToLoad+4,ebx
 100d107:	89 1d 1d d1 00 01    	mov    DWORD PTR ds:0x100d11d,ebx
/home/yogi/src/os/chrisOSKernel/src/x86.s:42
    //we always put our IDT in idtPtrToLoad before calling idt_load
//    mov eax, word ptr idtPtrToLoad
    lidt [idtPtrToLoad]
 100d10d:	0f 01 1d 19 d1 00 01 	lidtd  ds:0x100d119
/home/yogi/src/os/chrisOSKernel/src/x86.s:43
    sti
 100d114:	fb                   	sti    
/home/yogi/src/os/chrisOSKernel/src/x86.s:44
    pop ebx
 100d115:	5b                   	pop    ebx
/home/yogi/src/os/chrisOSKernel/src/x86.s:45
    pop eax
 100d116:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:46
    pop ebp
 100d117:	5d                   	pop    ebp
/home/yogi/src/os/chrisOSKernel/src/x86.s:47
    ret
 100d118:	c3                   	ret    

0100d119 <idtPtrToLoad>:
	...
