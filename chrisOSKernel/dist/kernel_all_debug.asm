
Debug/cross-Linux/kernel:     file format elf32-i386


Disassembly of section .text:

01000000 <dumpregs>:
kernelLoadAddress():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:22

.globl dumpregs
.type dumpregs, @function
dumpregs:
.code32
        mov exceptionAX, eax
 1000000:	a3 f0 96 12 00       	mov    ds:0x1296f0,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:23
        mov exceptionBX, ebx
 1000005:	89 1d f4 96 12 00    	mov    DWORD PTR ds:0x1296f4,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:24
        mov exceptionCX, ecx
 100000b:	89 0d f8 96 12 00    	mov    DWORD PTR ds:0x1296f8,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:25
        mov exceptionDX, edx
 1000011:	89 15 fc 96 12 00    	mov    DWORD PTR ds:0x1296fc,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:26
        mov exceptionSI, esi
 1000017:	89 35 00 97 12 00    	mov    DWORD PTR ds:0x129700,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:27
        mov exceptionDI, edi
 100001d:	89 3d 04 97 12 00    	mov    DWORD PTR ds:0x129704,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:28
        mov exceptionBP, eax
 1000023:	a3 08 97 12 00       	mov    ds:0x129708,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:29
        mov eax, cr0
 1000028:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:30
        mov exceptionCR0, eax
 100002b:	a3 0c 97 12 00       	mov    ds:0x12970c,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:31
        mov eax, cr3
 1000030:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:32
        mov exceptionCR3, eax
 1000033:	a3 10 97 12 00       	mov    ds:0x129710,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:33
        mov eax, cr4
 1000038:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:34
        mov exceptionCR4, eax
 100003b:	a3 14 97 12 00       	mov    ds:0x129714,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:35
        mov eax, exceptionAX
 1000040:	a1 f0 96 12 00       	mov    eax,ds:0x1296f0
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:36
        ret 
 1000045:	c3                   	ret    

01000046 <storeGDT>:
storeGDT():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:42

.global storeGDT
.type storeGDT, @function
storeGDT:
.code32
    mov eax,[esp+4]
 1000046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:43
    sgdt [eax]
 100004a:	0f 01 00             	sgdtd  [eax]
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:44
    ret
 100004d:	c3                   	ret    

0100004e <getCS>:
getCS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:50

.global getCS
.type getCS, @function
getCS:
.code32
    push cs
 100004e:	0e                   	push   cs
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:51
    pop eax
 100004f:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:52
    ret
 1000050:	c3                   	ret    

01000051 <getDS>:
getDS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:58

.global getDS
.type getDS, @function
getDS:
.code32
    push DS
 1000051:	1e                   	push   ds
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:59
    pop eax
 1000052:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:60
    ret
 1000053:	c3                   	ret    

01000054 <getES>:
getES():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:66

.global getES
.type getES, @function
getES:
.code32
    push ES
 1000054:	06                   	push   es
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:67
    pop eax
 1000055:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:68
    ret
 1000056:	c3                   	ret    

01000057 <getFS>:
getFS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:74

.global getFS
.type getFS, @function
getFS:
.code32
    push FS
 1000057:	0f a0                	push   fs
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:75
    pop eax
 1000059:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:76
    ret
 100005a:	c3                   	ret    

0100005b <getGS>:
getGS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:82

.global getGS
.type getGS, @function
getGS:
.code32
    push GS
 100005b:	0f a8                	push   gs
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:83
    pop eax
 100005d:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:84
    ret
 100005e:	c3                   	ret    

0100005f <getSS>:
getSS():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:90

.global getSS
.type getSS, @function
getSS:
.code32
    push SS
 100005f:	16                   	push   ss
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:91
    pop eax
 1000060:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:92
    ret
 1000061:	c3                   	ret    

01000062 <getESP>:
getESP():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:98

.global getESP
.type getESP, @function
getESP:
.code32
    push ESP
 1000062:	54                   	push   esp
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:99
    pop eax
 1000063:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:100
    sub eax,4
 1000064:	83 e8 04             	sub    eax,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:101
    ret
 1000067:	c3                   	ret    

01000068 <getEFlags>:
getEFlags():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:108

.global getEFlags
.type getEFlags, @function
getEFlags:
.code32
    pushfd
 1000068:	9c                   	pushf  
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:109
    pop eax
 1000069:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:110
    ret
 100006a:	c3                   	ret    

0100006b <enableCR0_WP>:
enableCR0_WP():
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:116


.global enableCR0_WP
.type enableCR0_WP, @function
enableCR0_WP:
    push eax
 100006b:	50                   	push   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:117
    mov eax,cr0
 100006c:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:118
    or eax,0x10000
 100006f:	0d 00 00 01 00       	or     eax,0x10000
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:119
    mov cr0,eax
 1000074:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:120
    pop eax
 1000077:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/asm/asmFunctions.s:121
    ret
 1000078:	c3                   	ret    
 1000079:	66 90                	xchg   ax,ax
 100007b:	90                   	nop

0100007c <AhciIssueCmd>:
AhciIssueCmd():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:38


// Check device type

int AhciIssueCmd(volatile HBA_PORT *port,int cmdslot) 
{
 100007c:	57                   	push   edi
 100007d:	56                   	push   esi
 100007e:	53                   	push   ebx
 100007f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:43
    unsigned i;
    int delay = 0;
    int Status = true;

    port->cmd.ST=0;
 1000083:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000086:	83 e0 fe             	and    eax,0xfffffffe
 1000089:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:45
    //make sure bit0 Start set to enable process cmd list
    if (!(port->cmd.ST)) {
 100008c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100008f:	a8 01                	test   al,0x1
 1000091:	75 27                	jne    10000ba <AhciIssueCmd+0x3e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:46
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - ST was cleared, setting FRE and STE\n");
 1000093:	83 ec 08             	sub    esp,0x8
 1000096:	68 4c 8d 02 01       	push   0x1028d4c
 100009b:	68 00 20 00 00       	push   0x2000
 10000a0:	e8 52 9b 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:47
        port->cmd.FRE = 1;
 10000a5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10000a8:	83 c8 10             	or     eax,0x10
 10000ab:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:48
        port->cmd.ST = 1;
 10000ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10000b1:	83 c8 01             	or     eax,0x1
 10000b4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
 10000b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52
    }

    //if err status or busy, reset PxCMD.
    if ((port->pxis.TFES || port->pxis.HBFS || port->pxis.HBDS || port->pxis.IFS || port->pxis.INFS || port->pxis.OFS || port->pxis.IPMS) || (port->tfd.BSY || port->tfd.BSY)) {
 10000ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000bd:	a9 00 00 00 40       	test   eax,0x40000000
 10000c2:	75 4a                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 1)
 10000c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000c7:	a9 00 00 00 20       	test   eax,0x20000000
 10000cc:	75 40                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 2)
 10000ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000d1:	a9 00 00 00 10       	test   eax,0x10000000
 10000d6:	75 36                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 3)
 10000d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000db:	a9 00 00 00 08       	test   eax,0x8000000
 10000e0:	75 2c                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 4)
 10000e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000e5:	a9 00 00 00 04       	test   eax,0x4000000
 10000ea:	75 22                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 5)
 10000ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000ef:	a9 00 00 00 01       	test   eax,0x1000000
 10000f4:	75 18                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 6)
 10000f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10000f9:	a9 00 00 80 00       	test   eax,0x800000
 10000fe:	75 0e                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 7)
 1000100:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
 1000103:	a8 80                	test   al,0x80
 1000105:	75 07                	jne    100010e <AhciIssueCmd+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:52 (discriminator 8)
 1000107:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
 100010a:	a8 80                	test   al,0x80
 100010c:	74 5b                	je     1000169 <AhciIssueCmd+0xed>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:53
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - clearing error/busy\n");
 100010e:	83 ec 08             	sub    esp,0x8
 1000111:	68 88 8d 02 01       	push   0x1028d88
 1000116:	68 00 20 00 00       	push   0x2000
 100011b:	e8 d7 9a 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:54
        port->cmd.ST &= ~port->cmd.ST;
 1000120:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000123:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
 1000126:	83 e0 01             	and    eax,0x1
 1000129:	f7 d0                	not    eax
 100012b:	21 d0                	and    eax,edx
 100012d:	83 e0 01             	and    eax,0x1
 1000130:	89 c2                	mov    edx,eax
 1000132:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000135:	83 e0 fe             	and    eax,0xfffffffe
 1000138:	09 d0                	or     eax,edx
 100013a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:56
        //Start|Command List Override|FIS Receive Enable
        port->cmd.CLO=1;
 100013d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000140:	83 c8 08             	or     eax,0x8
 1000143:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:57
        while (port->cmd.CLO);
 1000146:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:57 (discriminator 1)
 1000149:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100014c:	a8 08                	test   al,0x8
 100014e:	75 f9                	jne    1000149 <AhciIssueCmd+0xcd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:58
        port->cmd.ST = 1;
 1000150:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000153:	83 c8 01             	or     eax,0x1
 1000156:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:59
        port->cmd.FRE = 1;
 1000159:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100015c:	83 c8 10             	or     eax,0x10
 100015f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:60
        port->pxis.AsUlong = 0;
 1000162:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:64
    }

    //issue cmd
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
 1000169:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 100016c:	83 ec 04             	sub    esp,0x4
 100016f:	50                   	push   eax
 1000170:	68 b4 8d 02 01       	push   0x1028db4
 1000175:	68 00 20 00 00       	push   0x2000
 100017a:	e8 78 9a 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:65
    port->ci |= (1 << cmdslot);
 100017f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 1000182:	bf 01 00 00 00       	mov    edi,0x1
 1000187:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
 100018b:	d3 e7                	shl    edi,cl
 100018d:	09 f8                	or     eax,edi
 100018f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:66
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);
 1000192:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 1000195:	83 c4 0c             	add    esp,0xc
 1000198:	50                   	push   eax
 1000199:	68 e8 8d 02 01       	push   0x1028de8
 100019e:	68 00 20 00 00       	push   0x2000
 10001a3:	e8 4f 9a 00 00       	call   1009bf7 <printd>
 10001a8:	83 c4 10             	add    esp,0x10
 10001ab:	be 64 00 00 00       	mov    esi,0x64
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:70

    //wait cmd
    for (i = 0; i < 100; i++) {
        wait(50);
 10001b0:	83 ec 0c             	sub    esp,0xc
 10001b3:	6a 32                	push   0x32
 10001b5:	e8 3e a4 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:71
        if (!port->tfd.BSY)
 10001ba:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
 10001bd:	83 c4 10             	add    esp,0x10
 10001c0:	a8 80                	test   al,0x80
 10001c2:	75 13                	jne    10001d7 <AhciIssueCmd+0x15b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:79

    // Wait for completion
    delay = 5000;
    while (delay > 0) {

        if ((port->ci & (1 << cmdslot)) == 0)
 10001c4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 10001c7:	85 c7                	test   edi,eax
 10001c9:	74 54                	je     100021f <AhciIssueCmd+0x1a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:83
            break;
        // In some longer duration reads, it may be helpful to spin on the DPS bit 
        // in the PxIS port field as well (1 << 5)
        if (port->pxis.TFES) // Task file error
 10001cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10001ce:	a9 00 00 00 40       	test   eax,0x40000000
 10001d3:	74 6b                	je     1000240 <AhciIssueCmd+0x1c4>
 10001d5:	eb 18                	jmp    10001ef <AhciIssueCmd+0x173>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:69 (discriminator 2)
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
    port->ci |= (1 << cmdslot);
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);

    //wait cmd
    for (i = 0; i < 100; i++) {
 10001d7:	83 ee 01             	sub    esi,0x1
 10001da:	75 d4                	jne    10001b0 <AhciIssueCmd+0x134>
 10001dc:	eb e6                	jmp    10001c4 <AhciIssueCmd+0x148>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:79

    // Wait for completion
    delay = 5000;
    while (delay > 0) {

        if ((port->ci & (1 << cmdslot)) == 0)
 10001de:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 10001e1:	85 c7                	test   edi,eax
 10001e3:	74 3f                	je     1000224 <AhciIssueCmd+0x1a8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:83
            break;
        // In some longer duration reads, it may be helpful to spin on the DPS bit 
        // in the PxIS port field as well (1 << 5)
        if (port->pxis.TFES) // Task file error
 10001e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 10001e8:	a9 00 00 00 40       	test   eax,0x40000000
 10001ed:	74 1c                	je     100020b <AhciIssueCmd+0x18f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:85
        {
            printd(DEBUG_AHCI, "AHCI: Read disk error\n");
 10001ef:	83 ec 08             	sub    esp,0x8
 10001f2:	68 e8 2e 04 01       	push   0x1042ee8
 10001f7:	68 00 20 00 00       	push   0x2000
 10001fc:	e8 f6 99 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:86
            return -1;
 1000201:	83 c4 10             	add    esp,0x10
 1000204:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1000209:	eb 51                	jmp    100025c <AhciIssueCmd+0x1e0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:88
        }
        wait(20);
 100020b:	83 ec 0c             	sub    esp,0xc
 100020e:	6a 14                	push   0x14
 1000210:	e8 e3 a3 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:77
            break;
    }

    // Wait for completion
    delay = 5000;
    while (delay > 0) {
 1000215:	83 c4 10             	add    esp,0x10
 1000218:	83 ee 01             	sub    esi,0x1
 100021b:	75 c1                	jne    10001de <AhciIssueCmd+0x162>
 100021d:	eb 35                	jmp    1000254 <AhciIssueCmd+0x1d8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:79

        if ((port->ci & (1 << cmdslot)) == 0)
 100021f:	be 88 13 00 00       	mov    esi,0x1388
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:92
        }
        wait(20);
        delay -= 1;
    }

    if (port->tfd.ERR || delay == 0)
 1000224:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
 1000227:	83 e0 01             	and    eax,0x1
 100022a:	85 f6                	test   esi,esi
 100022c:	74 04                	je     1000232 <AhciIssueCmd+0x1b6>
 100022e:	84 c0                	test   al,al
 1000230:	74 07                	je     1000239 <AhciIssueCmd+0x1bd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:93
        Status = -2;
 1000232:	b8 fe ff ff ff       	mov    eax,0xfffffffe
 1000237:	eb 23                	jmp    100025c <AhciIssueCmd+0x1e0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:41

int AhciIssueCmd(volatile HBA_PORT *port,int cmdslot) 
{
    unsigned i;
    int delay = 0;
    int Status = true;
 1000239:	b8 01 00 00 00       	mov    eax,0x1
 100023e:	eb 1c                	jmp    100025c <AhciIssueCmd+0x1e0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:88
        if (port->pxis.TFES) // Task file error
        {
            printd(DEBUG_AHCI, "AHCI: Read disk error\n");
            return -1;
        }
        wait(20);
 1000240:	83 ec 0c             	sub    esp,0xc
 1000243:	6a 14                	push   0x14
 1000245:	e8 ae a3 00 00       	call   100a5f8 <wait>
 100024a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:89
        delay -= 1;
 100024d:	be 87 13 00 00       	mov    esi,0x1387
 1000252:	eb 8a                	jmp    10001de <AhciIssueCmd+0x162>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:92
    }

    if (port->tfd.ERR || delay == 0)
 1000254:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:93
        Status = -2;
 1000257:	b8 fe ff ff ff       	mov    eax,0xfffffffe
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:96

    return Status;
}
 100025c:	5b                   	pop    ebx
 100025d:	5e                   	pop    esi
 100025e:	5f                   	pop    edi
 100025f:	c3                   	ret    

01000260 <check_type>:
check_type():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:98

int check_type(volatile HBA_PORT *port, uint32_t* sig) {
 1000260:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:99
    uint32_t ssts = port->ssts;
 1000264:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:105
    uint8_t ipm = (ssts >> 8) & 0x0F;
    uint8_t det = ssts & 0x0F;

    if (det != HBA_PORT_DET_PRESENT) // Check drive status
        return AHCI_DEV_NULL;
    if (ipm != HBA_PORT_IPM_ACTIVE)
 1000267:	89 c2                	mov    edx,eax
 1000269:	c1 ea 08             	shr    edx,0x8
 100026c:	83 e2 0f             	and    edx,0xf
 100026f:	80 fa 01             	cmp    dl,0x1
 1000272:	75 4d                	jne    10002c1 <check_type+0x61>
 1000274:	83 e0 0f             	and    eax,0xf
 1000277:	3c 03                	cmp    al,0x3
 1000279:	75 46                	jne    10002c1 <check_type+0x61>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:108
        return AHCI_DEV_NULL;

    *sig = port->sig;
 100027b:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
 100027e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1000282:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:109
    switch (port->sig) {
 1000284:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:113
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
        case SATA_SIG_SEMB:
            return AHCI_DEV_SEMB;
 1000287:	b8 02 00 00 00       	mov    eax,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:109
        return AHCI_DEV_NULL;
    if (ipm != HBA_PORT_IPM_ACTIVE)
        return AHCI_DEV_NULL;

    *sig = port->sig;
    switch (port->sig) {
 100028c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
 1000292:	74 38                	je     10002cc <check_type+0x6c>
 1000294:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
 100029a:	77 0f                	ja     10002ab <check_type+0x4b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:115
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
        case SATA_SIG_SEMB:
            return AHCI_DEV_SEMB;
        case SATA_SIG_PM:
            return AHCI_DEV_PM;
 100029c:	b8 03 00 00 00       	mov    eax,0x3
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:109
        return AHCI_DEV_NULL;
    if (ipm != HBA_PORT_IPM_ACTIVE)
        return AHCI_DEV_NULL;

    *sig = port->sig;
    switch (port->sig) {
 10002a1:	81 fa 01 01 69 96    	cmp    edx,0x96690101
 10002a7:	74 23                	je     10002cc <check_type+0x6c>
 10002a9:	eb 10                	jmp    10002bb <check_type+0x5b>
 10002ab:	81 fa 00 00 14 eb    	cmp    edx,0xeb140000
 10002b1:	74 14                	je     10002c7 <check_type+0x67>
 10002b3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
 10002b9:	74 0c                	je     10002c7 <check_type+0x67>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:119
        case SATA_SIG_PM:
            return AHCI_DEV_PM;
        case SATA_SIG_ATAPI & 0xFFFF0000:
            return AHCI_DEV_SATAPI;
        default:
            return AHCI_DEV_SATA;
 10002bb:	b8 01 00 00 00       	mov    eax,0x1
 10002c0:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:106
    uint8_t det = ssts & 0x0F;

    if (det != HBA_PORT_DET_PRESENT) // Check drive status
        return AHCI_DEV_NULL;
    if (ipm != HBA_PORT_IPM_ACTIVE)
        return AHCI_DEV_NULL;
 10002c1:	b8 00 00 00 00       	mov    eax,0x0
 10002c6:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:111

    *sig = port->sig;
    switch (port->sig) {
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
 10002c7:	b8 04 00 00 00       	mov    eax,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:121
        case SATA_SIG_ATAPI & 0xFFFF0000:
            return AHCI_DEV_SATAPI;
        default:
            return AHCI_DEV_SATA;
    }
}
 10002cc:	f3 c3                	repz ret 

010002ce <ahciSpinupDrive>:
ahciSpinupDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:188
    cmdfis->control &= ~(1 << 2); //reset bit
    cmdfis->pmport = 0xf;
    port->ci |= slot;
}

bool ahciSpinupDrive(volatile HBA_PORT* port, int portno) {
 10002ce:	56                   	push   esi
 10002cf:	53                   	push   ebx
 10002d0:	83 ec 10             	sub    esp,0x10
 10002d3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:190
    int waitMS = 0;
    port->sctl.SPD = 1;
 10002d7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
 10002da:	24 0f                	and    al,0xf
 10002dc:	83 c8 10             	or     eax,0x10
 10002df:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:199
    //stop_cmd(&abar->ports[i]);
    //port->cmd.PMA=1;
    //start_cmd(&abar->ports[i]);

    //Spin up the drive
    port->cmd.ST = 0;
 10002e2:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
 10002e5:	83 e0 fe             	and    eax,0xfffffffe
 10002e8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:201

    port->sctl.DET = 1;
 10002eb:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
 10002ee:	83 e0 f0             	and    eax,0xfffffff0
 10002f1:	83 c8 01             	or     eax,0x1
 10002f4:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:202
    wait(100);
 10002f7:	6a 64                	push   0x64
 10002f9:	e8 fa a2 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:203
    port->sctl.DET = 0;
 10002fe:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
 1000301:	83 e0 f0             	and    eax,0xfffffff0
 1000304:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:208


    waitMS = 1000;
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
 1000307:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100030a:	83 e0 0f             	and    eax,0xf
 100030d:	83 c4 10             	add    esp,0x10
 1000310:	83 f8 03             	cmp    eax,0x3
 1000313:	0f 84 8f 00 00 00    	je     10003a8 <ahciSpinupDrive+0xda>
 1000319:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100031c:	83 e0 0f             	and    eax,0xf
 100031f:	83 f8 01             	cmp    eax,0x1
 1000322:	0f 84 80 00 00 00    	je     10003a8 <ahciSpinupDrive+0xda>
 1000328:	bb e8 03 00 00       	mov    ebx,0x3e8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:209
        wait(10);
 100032d:	83 ec 0c             	sub    esp,0xc
 1000330:	6a 0a                	push   0xa
 1000332:	e8 c1 a2 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:210
        waitMS -= 10;
 1000337:	83 eb 0a             	sub    ebx,0xa
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:208
    port->sctl.DET = 0;


    waitMS = 1000;
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
 100033a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100033d:	83 e0 0f             	and    eax,0xf
 1000340:	83 c4 10             	add    esp,0x10
 1000343:	83 f8 03             	cmp    eax,0x3
 1000346:	74 0f                	je     1000357 <ahciSpinupDrive+0x89>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:208 (discriminator 1)
 1000348:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100034b:	83 e0 0f             	and    eax,0xf
 100034e:	83 f8 01             	cmp    eax,0x1
 1000351:	74 04                	je     1000357 <ahciSpinupDrive+0x89>
 1000353:	85 db                	test   ebx,ebx
 1000355:	7f d6                	jg     100032d <ahciSpinupDrive+0x5f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:212
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
 1000357:	85 db                	test   ebx,ebx
 1000359:	75 4d                	jne    10003a8 <ahciSpinupDrive+0xda>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:213
        printd(DEBUG_AHCI, "AHCI: Error spinning up device,  DET not cleared (0x%08X)\n", port->ssts);
 100035b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100035e:	83 ec 04             	sub    esp,0x4
 1000361:	50                   	push   eax
 1000362:	68 1c 8e 02 01       	push   0x1028e1c
 1000367:	68 00 20 00 00       	push   0x2000
 100036c:	e8 86 98 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:215
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
 1000371:	8b 56 10             	mov    edx,DWORD PTR [esi+0x10]
 1000374:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 1000377:	83 c4 08             	add    esp,0x8
 100037a:	52                   	push   edx
 100037b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
 100037e:	52                   	push   edx
 100037f:	50                   	push   eax
 1000380:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
 1000383:	50                   	push   eax
 1000384:	68 58 8e 02 01       	push   0x1028e58
 1000389:	68 00 20 00 00       	push   0x2000
 100038e:	e8 64 98 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:216
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
 1000393:	83 c4 18             	add    esp,0x18
 1000396:	68 ff 2e 04 01       	push   0x1042eff
 100039b:	68 00 20 00 00       	push   0x2000
 10003a0:	e8 52 98 00 00       	call   1009bf7 <printd>
 10003a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:219
    }
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
 10003a8:	8b 1d 94 99 12 00    	mov    ebx,DWORD PTR ds:0x129994
 10003ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 10003b1:	ba 01 00 00 00       	mov    edx,0x1
 10003b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
 10003ba:	d3 e2                	shl    edx,cl
 10003bc:	09 d0                	or     eax,edx
 10003be:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:220
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
 10003c1:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
 10003c4:	83 ec 04             	sub    esp,0x4
 10003c7:	50                   	push   eax
 10003c8:	68 1c 2f 04 01       	push   0x1042f1c
 10003cd:	68 00 20 00 00       	push   0x2000
 10003d2:	e8 20 98 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:223
    waitMS = 1000;
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
 10003d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:221
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
    }
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
    waitMS = 1000;
 10003da:	bb e8 03 00 00       	mov    ebx,0x3e8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:223
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
 10003df:	eb 10                	jmp    10003f1 <ahciSpinupDrive+0x123>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:224
        wait(10);
 10003e1:	83 ec 0c             	sub    esp,0xc
 10003e4:	6a 0a                	push   0xa
 10003e6:	e8 0d a2 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:225
        waitMS -= 10;
 10003eb:	83 eb 0a             	sub    ebx,0xa
 10003ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:223
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
    waitMS = 1000;
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
 10003f1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
 10003f4:	a8 80                	test   al,0x80
 10003f6:	75 07                	jne    10003ff <ahciSpinupDrive+0x131>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:223 (discriminator 2)
 10003f8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
 10003fb:	a8 01                	test   al,0x1
 10003fd:	74 06                	je     1000405 <ahciSpinupDrive+0x137>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:223 (discriminator 3)
 10003ff:	85 db                	test   ebx,ebx
 1000401:	75 de                	jne    10003e1 <ahciSpinupDrive+0x113>
 1000403:	eb 04                	jmp    1000409 <ahciSpinupDrive+0x13b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:227
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
 1000405:	85 db                	test   ebx,ebx
 1000407:	75 4d                	jne    1000456 <ahciSpinupDrive+0x188>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:228
        printd(DEBUG_AHCI, "AHCI: Error spinning up device, BSY, DRQ OR ERR not cleared (0x%08X)\n", port->ssts);
 1000409:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 100040c:	83 ec 04             	sub    esp,0x4
 100040f:	50                   	push   eax
 1000410:	68 8c 8e 02 01       	push   0x1028e8c
 1000415:	68 00 20 00 00       	push   0x2000
 100041a:	e8 d8 97 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:230
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
 100041f:	8b 56 10             	mov    edx,DWORD PTR [esi+0x10]
 1000422:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
 1000425:	83 c4 08             	add    esp,0x8
 1000428:	52                   	push   edx
 1000429:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
 100042c:	52                   	push   edx
 100042d:	50                   	push   eax
 100042e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
 1000431:	50                   	push   eax
 1000432:	68 58 8e 02 01       	push   0x1028e58
 1000437:	68 00 20 00 00       	push   0x2000
 100043c:	e8 b6 97 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:231
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
 1000441:	83 c4 18             	add    esp,0x18
 1000444:	68 ff 2e 04 01       	push   0x1042eff
 1000449:	68 00 20 00 00       	push   0x2000
 100044e:	e8 a4 97 00 00       	call   1009bf7 <printd>
 1000453:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:233
    }
    port->cmd.ST = 1;
 1000456:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
 1000459:	83 c8 01             	or     eax,0x1
 100045c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
 100045f:	85 db                	test   ebx,ebx
 1000461:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:237
    if (waitMS == 0)
        return false;
    return true;
}
 1000464:	83 c4 04             	add    esp,0x4
 1000467:	5b                   	pop    ebx
 1000468:	5e                   	pop    esi
 1000469:	c3                   	ret    

0100046a <printAHCICaps>:
printAHCICaps():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:295
        pi >>= 1;
        i++;
    }
}

void printAHCICaps() {
 100046a:	55                   	push   ebp
 100046b:	57                   	push   edi
 100046c:	56                   	push   esi
 100046d:	53                   	push   ebx
 100046e:	81 ec 0c 02 00 00    	sub    esp,0x20c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:297
    //printk("ahciCaps=0x%08X, sizeof=%u\n",ahciCaps,sizeof(ahcicaps_t));
    terminal_clear();
 1000474:	e8 a0 29 00 00       	call   1002e19 <terminal_clear>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:298
    printk("AHCI Caps:\n");
 1000479:	83 ec 0c             	sub    esp,0xc
 100047c:	68 69 2f 04 01       	push   0x1042f69
 1000481:	e8 59 97 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:299
    printk("\tSupports 64-bit Addressing (S64A):\t\t\t\t%s\n", ahciCaps->S64A ? "Yes" : "No");
 1000486:	a1 24 99 12 00       	mov    eax,ds:0x129924
 100048b:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 100048f:	83 c4 08             	add    esp,0x8
 1000492:	25 80 00 00 00       	and    eax,0x80
 1000497:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 100049c:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 10004a1:	0f 44 c2             	cmove  eax,edx
 10004a4:	50                   	push   eax
 10004a5:	68 d4 8e 02 01       	push   0x1028ed4
 10004aa:	e8 30 97 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:300
    printk("\tSupprorts Native Command Queueing (SNCQ):\t\t%s\n", ahciCaps->SNCQ ? "Yes" : "No");
 10004af:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10004b4:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 10004b8:	83 c4 08             	add    esp,0x8
 10004bb:	83 e0 40             	and    eax,0x40
 10004be:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 10004c3:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 10004c8:	0f 44 c2             	cmove  eax,edx
 10004cb:	50                   	push   eax
 10004cc:	68 00 8f 02 01       	push   0x1028f00
 10004d1:	e8 09 97 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:301
    printk("\tSupports SNotification Register (SSNTF):\t\t%s\n", ahciCaps->SSNTF ? "Yes" : "No");
 10004d6:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10004db:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 10004df:	83 c4 08             	add    esp,0x8
 10004e2:	83 e0 20             	and    eax,0x20
 10004e5:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 10004ea:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 10004ef:	0f 44 c2             	cmove  eax,edx
 10004f2:	50                   	push   eax
 10004f3:	68 30 8f 02 01       	push   0x1028f30
 10004f8:	e8 e2 96 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:302
    printk("\tSupports Mechanical Presence Switch (SMPS):\t\t%s\n", ahciCaps->SMPS ? "Yes" : "No");
 10004fd:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000502:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 1000506:	83 c4 08             	add    esp,0x8
 1000509:	83 e0 10             	and    eax,0x10
 100050c:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 1000511:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 1000516:	0f 44 c2             	cmove  eax,edx
 1000519:	50                   	push   eax
 100051a:	68 60 8f 02 01       	push   0x1028f60
 100051f:	e8 bb 96 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:303
    printk("\tSupports Staggered Spin-up (SSS):\t\t\t\t%s\n", ahciCaps->SSS ? "Yes" : "No");
 1000524:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000529:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 100052d:	83 c4 08             	add    esp,0x8
 1000530:	83 e0 08             	and    eax,0x8
 1000533:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 1000538:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 100053d:	0f 44 c2             	cmove  eax,edx
 1000540:	50                   	push   eax
 1000541:	68 94 8f 02 01       	push   0x1028f94
 1000546:	e8 94 96 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:304
    printk("\tSupports Aggressive Link Power Management (SALP):\t%s\n", ahciCaps->SALP ? "Yes" : "No");
 100054b:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000550:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 1000554:	83 c4 08             	add    esp,0x8
 1000557:	83 e0 04             	and    eax,0x4
 100055a:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 100055f:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 1000564:	0f 44 c2             	cmove  eax,edx
 1000567:	50                   	push   eax
 1000568:	68 c0 8f 02 01       	push   0x1028fc0
 100056d:	e8 6d 96 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:305
    printk("\tSupports Active LED (SAL):\t\t\t\t\t%s\n", ahciCaps->SAL ? "Yes" : "No");
 1000572:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000577:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 100057b:	83 c4 08             	add    esp,0x8
 100057e:	83 e0 02             	and    eax,0x2
 1000581:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 1000586:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 100058b:	0f 44 c2             	cmove  eax,edx
 100058e:	50                   	push   eax
 100058f:	68 f8 8f 02 01       	push   0x1028ff8
 1000594:	e8 46 96 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:306
    printk("\tSupports Command List Override (SCLO):\t\t\t%s\n", ahciCaps->SCLO ? "Yes" : "No");
 1000599:	a1 24 99 12 00       	mov    eax,ds:0x129924
 100059e:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
 10005a2:	83 c4 08             	add    esp,0x8
 10005a5:	83 e0 01             	and    eax,0x1
 10005a8:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 10005ad:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 10005b2:	0f 44 c2             	cmove  eax,edx
 10005b5:	50                   	push   eax
 10005b6:	68 1c 90 02 01       	push   0x102901c
 10005bb:	e8 1f 96 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:307
    printk("\tInterface Speed Support (ISS):\t\t\t\t%s\n", ahciCaps->ISS == 1 ? "1.5 Gbps" : ahciCaps->ISS == 2 ? "3 Gbps" : ahciCaps->ISS == 3 ? "6 Gbps" : "Reserved");
 10005c0:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10005c5:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
 10005c9:	83 e0 f0             	and    eax,0xfffffff0
 10005cc:	83 c4 10             	add    esp,0x10
 10005cf:	ba 39 2f 04 01       	mov    edx,0x1042f39
 10005d4:	3c 10                	cmp    al,0x10
 10005d6:	74 18                	je     10005f0 <printAHCICaps+0x186>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:307 (discriminator 1)
 10005d8:	ba 32 2f 04 01       	mov    edx,0x1042f32
 10005dd:	3c 20                	cmp    al,0x20
 10005df:	74 0f                	je     10005f0 <printAHCICaps+0x186>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:307 (discriminator 3)
 10005e1:	3c 30                	cmp    al,0x30
 10005e3:	ba 42 2f 04 01       	mov    edx,0x1042f42
 10005e8:	b8 4b 2f 04 01       	mov    eax,0x1042f4b
 10005ed:	0f 44 d0             	cmove  edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:307 (discriminator 12)
 10005f0:	83 ec 08             	sub    esp,0x8
 10005f3:	52                   	push   edx
 10005f4:	68 4c 90 02 01       	push   0x102904c
 10005f9:	e8 e1 95 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:308 (discriminator 12)
    printk("\tSupports AHCI mode only (SAM):\t\t\t\t%s\n", ahciCaps->SAM ? "Yes" : "No");
 10005fe:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000603:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
 1000607:	83 c4 08             	add    esp,0x8
 100060a:	83 e0 04             	and    eax,0x4
 100060d:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 1000612:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 1000617:	0f 44 c2             	cmove  eax,edx
 100061a:	50                   	push   eax
 100061b:	68 74 90 02 01       	push   0x1029074
 1000620:	e8 ba 95 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:309 (discriminator 12)
    printk("\tSupports Port Multiplier (SPM):\t\t\t\t%s\n", ahciCaps->SPM ? "Yes" : "No");
 1000625:	a1 24 99 12 00       	mov    eax,ds:0x129924
 100062a:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
 100062e:	83 c4 08             	add    esp,0x8
 1000631:	83 e0 02             	and    eax,0x2
 1000634:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 1000639:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 100063e:	0f 44 c2             	cmove  eax,edx
 1000641:	50                   	push   eax
 1000642:	68 9c 90 02 01       	push   0x102909c
 1000647:	e8 93 95 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:310 (discriminator 12)
    printk("\tFIS-based Switching Support (FBSS):\t\t\t%s\n", ahciCaps->FBSS ? "Yes" : "No");   
 100064c:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000651:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
 1000655:	83 c4 08             	add    esp,0x8
 1000658:	83 e0 01             	and    eax,0x1
 100065b:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 1000660:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 1000665:	0f 44 c2             	cmove  eax,edx
 1000668:	50                   	push   eax
 1000669:	68 c4 90 02 01       	push   0x10290c4
 100066e:	e8 6c 95 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:311 (discriminator 12)
    printk("\tPIO Multiple DRQ Block (PMD):\t\t\t\t\t%s\n", ahciCaps->PMD ? "Yes" : "No");
 1000673:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000678:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
 100067c:	83 c4 08             	add    esp,0x8
 100067f:	25 80 00 00 00       	and    eax,0x80
 1000684:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 1000689:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 100068e:	0f 44 c2             	cmove  eax,edx
 1000691:	50                   	push   eax
 1000692:	68 f0 90 02 01       	push   0x10290f0
 1000697:	e8 43 95 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:312 (discriminator 12)
    printk("\tSlumber State Capable (SSC):\t\t\t\t\t%s\n", ahciCaps->SSC ? "Yes" : "No");
 100069c:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10006a1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
 10006a5:	83 c4 08             	add    esp,0x8
 10006a8:	83 e0 40             	and    eax,0x40
 10006ab:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 10006b0:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 10006b5:	0f 44 c2             	cmove  eax,edx
 10006b8:	50                   	push   eax
 10006b9:	68 18 91 02 01       	push   0x1029118
 10006be:	e8 1c 95 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:313 (discriminator 12)
    printk("\tPartial State Capable (PSC):\t\t\t\t\t%s\n", ahciCaps->PSC ? "Yes" : "No");
 10006c3:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10006c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
 10006cc:	83 c4 08             	add    esp,0x8
 10006cf:	83 e0 20             	and    eax,0x20
 10006d2:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 10006d7:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 10006dc:	0f 44 c2             	cmove  eax,edx
 10006df:	50                   	push   eax
 10006e0:	68 40 91 02 01       	push   0x1029140
 10006e5:	e8 f5 94 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:314 (discriminator 12)
    printk("\tNumber of Command Slots (NSC):\t\t\t\t%u\n", ahciCaps->NCS);
 10006ea:	83 c4 08             	add    esp,0x8
 10006ed:	a1 24 99 12 00       	mov    eax,ds:0x129924
 10006f2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
 10006f6:	83 e0 1f             	and    eax,0x1f
 10006f9:	50                   	push   eax
 10006fa:	68 68 91 02 01       	push   0x1029168
 10006ff:	e8 db 94 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:315 (discriminator 12)
    printk("\tCommand Completion Coalescing Supported (CCCS):\t%s\n", ahciCaps->CCCS ? "Yes" : "No");
 1000704:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000709:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 100070c:	83 c4 08             	add    esp,0x8
 100070f:	25 80 00 00 00       	and    eax,0x80
 1000714:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 1000719:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 100071e:	0f 44 c2             	cmove  eax,edx
 1000721:	50                   	push   eax
 1000722:	68 90 91 02 01       	push   0x1029190
 1000727:	e8 b3 94 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:316 (discriminator 12)
    printk("\tEnclosure Management Supported (EMS):\t\t\t%s\n", ahciCaps->EMS ? "Yes" : "No");
 100072c:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000731:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 1000734:	83 c4 08             	add    esp,0x8
 1000737:	83 e0 40             	and    eax,0x40
 100073a:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 100073f:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 1000744:	0f 44 c2             	cmove  eax,edx
 1000747:	50                   	push   eax
 1000748:	68 c8 91 02 01       	push   0x10291c8
 100074d:	e8 8d 94 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:317 (discriminator 12)
    printk("\tSupports External SATA (SXS):\t\t\t\t\t%s\n", ahciCaps->SXS ? "Yes" : "No");
 1000752:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000757:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 100075a:	83 c4 08             	add    esp,0x8
 100075d:	83 e0 20             	and    eax,0x20
 1000760:	ba 2f 2f 04 01       	mov    edx,0x1042f2f
 1000765:	b8 2b 2f 04 01       	mov    eax,0x1042f2b
 100076a:	0f 44 c2             	cmove  eax,edx
 100076d:	50                   	push   eax
 100076e:	68 f8 91 02 01       	push   0x10291f8
 1000773:	e8 67 94 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:318 (discriminator 12)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
 1000778:	83 c4 08             	add    esp,0x8
 100077b:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1000780:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 1000783:	83 e0 1f             	and    eax,0x1f
 1000786:	50                   	push   eax
 1000787:	68 20 92 02 01       	push   0x1029220
 100078c:	e8 4e 94 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:321 (discriminator 12)
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
 1000791:	c7 04 24 75 2f 04 01 	mov    DWORD PTR [esp],0x1042f75
 1000798:	e8 42 94 00 00       	call   1009bdf <printk>
 100079d:	83 c4 10             	add    esp,0x10
 10007a0:	bb cc 09 00 00       	mov    ebx,0x9cc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:323 (discriminator 12)
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
 10007a5:	be 04 00 00 00       	mov    esi,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:324
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
 10007aa:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10007af:	80 bc 18 51 02 00 00 	cmp    BYTE PTR [eax+ebx*1+0x251],0x0
 10007b6:	00 
 10007b7:	0f 84 f8 00 00 00    	je     10008b5 <printAHCICaps+0x44b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:325
            memset(p1, 0, 512);
 10007bd:	83 ec 04             	sub    esp,0x4
 10007c0:	68 00 02 00 00       	push   0x200
 10007c5:	6a 00                	push   0x0
 10007c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
 10007cb:	50                   	push   eax
 10007cc:	e8 ee 86 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:326
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
 10007d1:	83 c4 08             	add    esp,0x8
 10007d4:	89 d8                	mov    eax,ebx
 10007d6:	03 05 00 98 12 00    	add    eax,DWORD PTR ds:0x129800
 10007dc:	05 00 02 00 00       	add    eax,0x200
 10007e1:	50                   	push   eax
 10007e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
 10007e6:	50                   	push   eax
 10007e7:	e8 c4 94 00 00       	call   1009cb0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:327
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
 10007ec:	83 c4 10             	add    esp,0x10
 10007ef:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10007f4:	80 bc 18 51 02 00 00 	cmp    BYTE PTR [eax+ebx*1+0x251],0x1
 10007fb:	01 
 10007fc:	b8 52 2f 04 01       	mov    eax,0x1042f52
 1000801:	0f 44 c4             	cmove  eax,esp
 1000804:	83 ec 04             	sub    esp,0x4
 1000807:	50                   	push   eax
 1000808:	56                   	push   esi
 1000809:	68 88 2f 04 01       	push   0x1042f88
 100080e:	e8 cc 93 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:335
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
 1000813:	89 d8                	mov    eax,ebx
 1000815:	03 05 00 98 12 00    	add    eax,DWORD PTR ds:0x129800
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
 100081b:	83 c4 10             	add    esp,0x10
 100081e:	80 b8 60 02 00 00 00 	cmp    BYTE PTR [eax+0x260],0x0
 1000825:	ba 5b 63 06 01       	mov    edx,0x106635b
 100082a:	bd 58 2f 04 01       	mov    ebp,0x1042f58
 100082f:	0f 44 ea             	cmove  ebp,edx
 1000832:	80 b8 5f 02 00 00 00 	cmp    BYTE PTR [eax+0x25f],0x0
 1000839:	bf 5d 2f 04 01       	mov    edi,0x1042f5d
 100083e:	0f 44 fa             	cmove  edi,edx
 1000841:	80 b8 5e 02 00 00 00 	cmp    BYTE PTR [eax+0x25e],0x0
 1000848:	89 d1                	mov    ecx,edx
 100084a:	ba 64 2f 04 01       	mov    edx,0x1042f64
 100084f:	0f 45 ca             	cmovne ecx,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:329
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
 1000852:	8b 90 5a 02 00 00    	mov    edx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
 1000858:	ff b0 69 02 00 00    	push   DWORD PTR [eax+0x269]
 100085e:	ff b0 6f 02 00 00    	push   DWORD PTR [eax+0x26f]
 1000864:	55                   	push   ebp
 1000865:	57                   	push   edi
 1000866:	51                   	push   ecx
 1000867:	52                   	push   edx
 1000868:	0f af 90 56 02 00 00 	imul   edx,DWORD PTR [eax+0x256]
 100086f:	c1 ea 14             	shr    edx,0x14
 1000872:	52                   	push   edx
 1000873:	68 40 92 02 01       	push   0x1029240
 1000878:	e8 62 93 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:336
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
            volatile HBA_PORT* port = (HBA_PORT*) kATADeviceInfo[cnt].ioPort;
 100087d:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1000882:	8b bc 18 69 02 00 00 	mov    edi,DWORD PTR [eax+ebx*1+0x269]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:337
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
 1000889:	8b 2f                	mov    ebp,DWORD PTR [edi]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:339
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
 100088b:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
 100088e:	8b 07                	mov    eax,DWORD PTR [edi]
 1000890:	83 c4 1c             	add    esp,0x1c
 1000893:	52                   	push   edx
 1000894:	50                   	push   eax
 1000895:	68 9d 2f 04 01       	push   0x1042f9d
 100089a:	e8 40 93 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:340
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
 100089f:	8b 07                	mov    eax,DWORD PTR [edi]
 10008a1:	83 c4 0c             	add    esp,0xc
 10008a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
 10008a7:	50                   	push   eax
 10008a8:	68 74 92 02 01       	push   0x1029274
 10008ad:	e8 2d 93 00 00       	call   1009bdf <printk>
 10008b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:323 (discriminator 2)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
 10008b5:	83 c6 01             	add    esi,0x1
 10008b8:	81 c3 73 02 00 00    	add    ebx,0x273
 10008be:	83 fe 0a             	cmp    esi,0xa
 10008c1:	0f 85 e3 fe ff ff    	jne    10007aa <printAHCICaps+0x340>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:342
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
        }
}
 10008c7:	81 c4 0c 02 00 00    	add    esp,0x20c
 10008cd:	5b                   	pop    ebx
 10008ce:	5e                   	pop    esi
 10008cf:	5f                   	pop    edi
 10008d0:	5d                   	pop    ebp
 10008d1:	c3                   	ret    

010008d2 <start_cmd>:
start_cmd():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:385
    start_cmd(port); // Start command engine
}

// Start command engine

void start_cmd(volatile HBA_PORT *port) {
 10008d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:387 (discriminator 1)
    // Wait until CR (bit15) is cleared
    while (port->cmd.CR);
 10008d6:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
 10008d9:	f6 c4 80             	test   ah,0x80
 10008dc:	75 f8                	jne    10008d6 <start_cmd+0x4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:390

    // Set FRE (bit4) and ST (bit0)
    port->cmd.FRE = 1;
 10008de:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
 10008e1:	83 c8 10             	or     eax,0x10
 10008e4:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:391
    port->cmd.ST = 1;
 10008e7:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
 10008ea:	83 c8 01             	or     eax,0x1
 10008ed:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
 10008f0:	c3                   	ret    

010008f1 <waitForPortIdle>:
waitForPortIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:394
}

void waitForPortIdle(volatile HBA_PORT *port) {
 10008f1:	53                   	push   ebx
 10008f2:	83 ec 08             	sub    esp,0x8
 10008f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:395
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
 10008f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
 10008fc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10008ff:	c1 e8 0f             	shr    eax,0xf
 1000902:	09 d0                	or     eax,edx
 1000904:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
 1000907:	c1 e9 04             	shr    ecx,0x4
 100090a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
 100090d:	c1 ea 0e             	shr    edx,0xe
 1000910:	09 c8                	or     eax,ecx
 1000912:	09 d0                	or     eax,edx
 1000914:	a8 01                	test   al,0x1
 1000916:	74 2c                	je     1000944 <waitForPortIdle+0x53>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:396
        waitTicks(20);
 1000918:	83 ec 0c             	sub    esp,0xc
 100091b:	6a 14                	push   0x14
 100091d:	e8 c3 9c 00 00       	call   100a5e5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:395
    port->cmd.FRE = 1;
    port->cmd.ST = 1;
}

void waitForPortIdle(volatile HBA_PORT *port) {
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
 1000922:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
 1000925:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000928:	c1 e8 0f             	shr    eax,0xf
 100092b:	09 d0                	or     eax,edx
 100092d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
 1000930:	c1 e9 04             	shr    ecx,0x4
 1000933:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
 1000936:	c1 ea 0e             	shr    edx,0xe
 1000939:	09 c8                	or     eax,ecx
 100093b:	09 d0                	or     eax,edx
 100093d:	83 c4 10             	add    esp,0x10
 1000940:	a8 01                	test   al,0x1
 1000942:	75 d4                	jne    1000918 <waitForPortIdle+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:398
        waitTicks(20);
    }
}
 1000944:	83 c4 08             	add    esp,0x8
 1000947:	5b                   	pop    ebx
 1000948:	c3                   	ret    

01000949 <stop_cmd>:
stop_cmd():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:402

// Stop command engine

void stop_cmd(volatile volatile HBA_PORT *port) {
 1000949:	53                   	push   ebx
 100094a:	83 ec 08             	sub    esp,0x8
 100094d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:404
    // Clear ST (bit0)
    port->cmd.ST = 0;
 1000951:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000954:	83 e0 fe             	and    eax,0xfffffffe
 1000957:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:407
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
 100095a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100095d:	f6 c4 40             	test   ah,0x40
 1000960:	74 27                	je     1000989 <stop_cmd+0x40>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:409
            break;
        if (!(port->cmd.CR))
 1000962:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000965:	f6 c4 80             	test   ah,0x80
 1000968:	75 0a                	jne    1000974 <stop_cmd+0x2b>
 100096a:	eb 1d                	jmp    1000989 <stop_cmd+0x40>
 100096c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100096f:	f6 c4 80             	test   ah,0x80
 1000972:	74 15                	je     1000989 <stop_cmd+0x40>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:411
            break;
        waitTicks(20);
 1000974:	83 ec 0c             	sub    esp,0xc
 1000977:	6a 14                	push   0x14
 1000979:	e8 67 9c 00 00       	call   100a5e5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:407
void stop_cmd(volatile volatile HBA_PORT *port) {
    // Clear ST (bit0)
    port->cmd.ST = 0;
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
 100097e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000981:	83 c4 10             	add    esp,0x10
 1000984:	f6 c4 40             	test   ah,0x40
 1000987:	75 e3                	jne    100096c <stop_cmd+0x23>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:415
            break;
        waitTicks(20);
    }

    // Clear FRE (bit4)
    port->cmd.FRE = 0;
 1000989:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100098c:	83 e0 ef             	and    eax,0xffffffef
 100098f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:416
}
 1000992:	83 c4 08             	add    esp,0x8
 1000995:	5b                   	pop    ebx
 1000996:	c3                   	ret    

01000997 <port_rebase>:
port_rebase():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:344
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
        }
}

void port_rebase(volatile HBA_PORT *port, int portno, uintptr_t remapBase) {
 1000997:	55                   	push   ebp
 1000998:	57                   	push   edi
 1000999:	56                   	push   esi
 100099a:	53                   	push   ebx
 100099b:	83 ec 14             	sub    esp,0x14
 100099e:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
 10009a2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
 10009a6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:346
    //each command list is 1k (32k possible per port))
    printd(DEBUG_AHCI, "AHCI: Rebasing port %u (0x%08X) clb/fb from 0x%08X/0x%08X\n\t", portno, port, port->clb, port->fb);
 10009aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 10009ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
 10009b0:	52                   	push   edx
 10009b1:	50                   	push   eax
 10009b2:	55                   	push   ebp
 10009b3:	56                   	push   esi
 10009b4:	68 9c 92 02 01       	push   0x102929c
 10009b9:	68 00 20 00 00       	push   0x2000
 10009be:	e8 34 92 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:347
    stop_cmd(port); // Stop command engine
 10009c3:	83 c4 14             	add    esp,0x14
 10009c6:	55                   	push   ebp
 10009c7:	e8 7d ff ff ff       	call   1000949 <stop_cmd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:353

    // Command list offset: 1K*portno
    // Command list entry size = 32
    // Command list entry maxim count = 32
    // Command list maxim size = 32*32 = 1K per port
    port->clbu = 0;
 10009cc:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:354
    port->clb = (remapBase + (portno<<15) + 0x1000) & 0xFFFFF000;
 10009d3:	89 f0                	mov    eax,esi
 10009d5:	c1 e0 0f             	shl    eax,0xf
 10009d8:	8d 84 07 00 10 00 00 	lea    eax,[edi+eax*1+0x1000]
 10009df:	25 00 f0 ff ff       	and    eax,0xfffff000
 10009e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:355
    memset((void*) (port->clb), 0, 1024);
 10009e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
 10009ea:	83 c4 0c             	add    esp,0xc
 10009ed:	68 00 04 00 00       	push   0x400
 10009f2:	6a 00                	push   0x0
 10009f4:	50                   	push   eax
 10009f5:	e8 c5 84 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:356
    kMapPage(port->clb,port->clb,0x73); //make un-cached
 10009fa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
 10009fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
 1000a00:	83 c4 0c             	add    esp,0xc
 1000a03:	6a 73                	push   0x73
 1000a05:	52                   	push   edx
 1000a06:	50                   	push   eax
 1000a07:	e8 6f 80 00 00       	call   1008a7b <kMapPage>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:361
    
    //each FIS is 256 bytes
    // FIS offset: 32K+256*portno
    // FIS entry size = 256 bytes per port
    port->fbu = 0;
 1000a0c:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:363
//    port->fb = (remapBase + (32 << 10) + (portno << 12) + 0x1000) & 0xFFFFF000;
    port->fb = (port->clb + 0x1000);
 1000a13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
 1000a16:	05 00 10 00 00       	add    eax,0x1000
 1000a1b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:364
    memset((void*) (port->fb), 0, 256);
 1000a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 1000a21:	83 c4 0c             	add    esp,0xc
 1000a24:	68 00 01 00 00       	push   0x100
 1000a29:	6a 00                	push   0x0
 1000a2b:	50                   	push   eax
 1000a2c:	e8 8e 84 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:365
    kMapPage(port->fb,port->fb,0x73); //make un-cached
 1000a31:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 1000a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 1000a37:	83 c4 0c             	add    esp,0xc
 1000a3a:	6a 73                	push   0x73
 1000a3c:	52                   	push   edx
 1000a3d:	50                   	push   eax
 1000a3e:	e8 38 80 00 00       	call   1008a7b <kMapPage>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:370


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
 1000a43:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
 1000a46:	c1 e6 0d             	shl    esi,0xd
 1000a49:	8d bc 37 00 a0 00 00 	lea    edi,[edi+esi*1+0xa000]
 1000a50:	83 c3 02             	add    ebx,0x2
 1000a53:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:371
    for (int i = 0; i < 32; i++) {
 1000a56:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:372 (discriminator 3)
        cmdheader[i].prdtl = 8; // 8 prdt entries per command table
 1000a5b:	66 c7 03 08 00       	mov    WORD PTR [ebx],0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:375 (discriminator 3)
        // 256 bytes per command table, 64+16+48+16*8
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
 1000a60:	89 f0                	mov    eax,esi
 1000a62:	c1 e0 08             	shl    eax,0x8
 1000a65:	01 f8                	add    eax,edi
 1000a67:	89 43 06             	mov    DWORD PTR [ebx+0x6],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:376 (discriminator 3)
        cmdheader[i].ctbau = 0;
 1000a6a:	c7 43 0a 00 00 00 00 	mov    DWORD PTR [ebx+0xa],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:377 (discriminator 3)
        memset((void*) cmdheader[i].ctba, 0, 256);
 1000a71:	83 ec 04             	sub    esp,0x4
 1000a74:	68 00 01 00 00       	push   0x100
 1000a79:	6a 00                	push   0x0
 1000a7b:	50                   	push   eax
 1000a7c:	e8 3e 84 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:371 (discriminator 3)


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
    for (int i = 0; i < 32; i++) {
 1000a81:	83 c6 01             	add    esi,0x1
 1000a84:	83 c3 20             	add    ebx,0x20
 1000a87:	83 c4 10             	add    esp,0x10
 1000a8a:	83 fe 20             	cmp    esi,0x20
 1000a8d:	75 cc                	jne    1000a5b <port_rebase+0xc4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:379
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
        cmdheader[i].ctbau = 0;
        memset((void*) cmdheader[i].ctba, 0, 256);
    }
    printd(DEBUG_AHCI, " to 0x%08X/0x%08X\n", port->clb, port->fb);
 1000a8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
 1000a92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
 1000a95:	52                   	push   edx
 1000a96:	50                   	push   eax
 1000a97:	68 b6 2f 04 01       	push   0x1042fb6
 1000a9c:	68 00 20 00 00       	push   0x2000
 1000aa1:	e8 51 91 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:380
    start_cmd(port); // Start command engine
 1000aa6:	89 2c 24             	mov    DWORD PTR [esp],ebp
 1000aa9:	e8 24 fe ff ff       	call   10008d2 <start_cmd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:381
}
 1000aae:	83 c4 1c             	add    esp,0x1c
 1000ab1:	5b                   	pop    ebx
 1000ab2:	5e                   	pop    esi
 1000ab3:	5f                   	pop    edi
 1000ab4:	5d                   	pop    ebp
 1000ab5:	c3                   	ret    

01000ab6 <find_cmdslot>:
find_cmdslot():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:482
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
}
// Find a free command list slot

int find_cmdslot(volatile HBA_PORT *port) {
 1000ab6:	57                   	push   edi
 1000ab7:	56                   	push   esi
 1000ab8:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:483
    printd(DEBUG_AHCI, "AHCI: find_cmdslot - finding a slot to use to execute a command\n");
 1000ab9:	83 ec 08             	sub    esp,0x8
 1000abc:	68 d8 92 02 01       	push   0x10292d8
 1000ac1:	68 00 20 00 00       	push   0x2000
 1000ac6:	e8 2c 91 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:487
    // An empty command slot has its respective bit cleared to �0� in both the PxCI and PxSACT registers.
    // If not set in SACT and CI, the slot is free // Checked
    
    uint32_t slots = (/*port->sact | */port->ci);
 1000acb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 1000acf:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:488
    int num_of_slots = ahciABAR->cap.NCS;
 1000ad2:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
 1000ad8:	8b 3a                	mov    edi,DWORD PTR [edx]
 1000ada:	c1 ef 08             	shr    edi,0x8
 1000add:	83 e7 1f             	and    edi,0x1f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:489
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
 1000ae0:	8b 02                	mov    eax,DWORD PTR [edx]
 1000ae2:	c1 e8 08             	shr    eax,0x8
 1000ae5:	83 e0 1f             	and    eax,0x1f
 1000ae8:	50                   	push   eax
 1000ae9:	52                   	push   edx
 1000aea:	68 1c 93 02 01       	push   0x102931c
 1000aef:	68 00 20 00 00       	push   0x2000
 1000af4:	e8 fe 90 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:491
    int i;
    for (i = 0; i < num_of_slots; i++) {
 1000af9:	83 c4 20             	add    esp,0x20
 1000afc:	85 ff                	test   edi,edi
 1000afe:	7e 55                	jle    1000b55 <find_cmdslot+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:493

        if ((slots & 1) == 0) {
 1000b00:	f7 c6 01 00 00 00    	test   esi,0x1
 1000b06:	74 11                	je     1000b19 <find_cmdslot+0x63>
 1000b08:	bb 00 00 00 00       	mov    ebx,0x0
 1000b0d:	eb 29                	jmp    1000b38 <find_cmdslot+0x82>
 1000b0f:	f7 c6 01 00 00 00    	test   esi,0x1
 1000b15:	75 21                	jne    1000b38 <find_cmdslot+0x82>
 1000b17:	eb 05                	jmp    1000b1e <find_cmdslot+0x68>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:491
    
    uint32_t slots = (/*port->sact | */port->ci);
    int num_of_slots = ahciABAR->cap.NCS;
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
    int i;
    for (i = 0; i < num_of_slots; i++) {
 1000b19:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:494

        if ((slots & 1) == 0) {
            printd(DEBUG_AHCI, "AHCI: [command slot is : %d]\n", i);
 1000b1e:	83 ec 04             	sub    esp,0x4
 1000b21:	53                   	push   ebx
 1000b22:	68 c9 2f 04 01       	push   0x1042fc9
 1000b27:	68 00 20 00 00       	push   0x2000
 1000b2c:	e8 c6 90 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:495
            return i;
 1000b31:	83 c4 10             	add    esp,0x10
 1000b34:	89 d8                	mov    eax,ebx
 1000b36:	eb 36                	jmp    1000b6e <find_cmdslot+0xb8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:498 (discriminator 2)

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
 1000b38:	56                   	push   esi
 1000b39:	53                   	push   ebx
 1000b3a:	68 e7 2f 04 01       	push   0x1042fe7
 1000b3f:	68 00 20 00 00       	push   0x2000
 1000b44:	e8 ae 90 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:499 (discriminator 2)
        slots >>= 1;
 1000b49:	d1 ee                	shr    esi,1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:491 (discriminator 2)
    
    uint32_t slots = (/*port->sact | */port->ci);
    int num_of_slots = ahciABAR->cap.NCS;
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
    int i;
    for (i = 0; i < num_of_slots; i++) {
 1000b4b:	83 c3 01             	add    ebx,0x1
 1000b4e:	83 c4 10             	add    esp,0x10
 1000b51:	39 df                	cmp    edi,ebx
 1000b53:	75 ba                	jne    1000b0f <find_cmdslot+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:501

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
        slots >>= 1;
    }
    printd(DEBUG_AHCI, "AHCI: Cannot find free command list entry, count=%u, slots=0x%08X\n", num_of_slots, slots);
 1000b55:	56                   	push   esi
 1000b56:	57                   	push   edi
 1000b57:	68 48 93 02 01       	push   0x1029348
 1000b5c:	68 00 20 00 00       	push   0x2000
 1000b61:	e8 91 90 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:502
    return -1;
 1000b66:	83 c4 10             	add    esp,0x10
 1000b69:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:503
}
 1000b6e:	5b                   	pop    ebx
 1000b6f:	5e                   	pop    esi
 1000b70:	5f                   	pop    edi
 1000b71:	c3                   	ret    

01000b72 <ahciEnablePortMultiplier>:
ahciEnablePortMultiplier():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:123
        default:
            return AHCI_DEV_SATA;
    }
}

void ahciEnablePortMultiplier(volatile HBA_PORT* port) {
 1000b72:	55                   	push   ebp
 1000b73:	57                   	push   edi
 1000b74:	56                   	push   esi
 1000b75:	53                   	push   ebx
 1000b76:	83 ec 10             	sub    esp,0x10
 1000b79:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:124
    HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
 1000b7d:	8b 33                	mov    esi,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:126

    port->cmd.ST = 0;
 1000b7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000b82:	83 e0 fe             	and    eax,0xfffffffe
 1000b85:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:130

    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
 1000b88:	53                   	push   ebx
 1000b89:	68 8c 93 02 01       	push   0x102938c
 1000b8e:	68 00 20 00 00       	push   0x2000
 1000b93:	e8 5f 90 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:131
    int slot = find_cmdslot(port);
 1000b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
 1000b9b:	e8 16 ff ff ff       	call   1000ab6 <find_cmdslot>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:132
    if (slot == -1)
 1000ba0:	83 c4 10             	add    esp,0x10
 1000ba3:	83 f8 ff             	cmp    eax,0xffffffff
 1000ba6:	0f 84 78 01 00 00    	je     1000d24 <ahciEnablePortMultiplier+0x1b2>
 1000bac:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:134
        return;
    port->ie.AsUlong = 0; //xffffffff;
 1000bae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:135
    cmdheader += slot;
 1000bb5:	c1 e0 05             	shl    eax,0x5
 1000bb8:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:136
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
 1000bba:	83 ec 04             	sub    esp,0x4
 1000bbd:	56                   	push   esi
 1000bbe:	68 01 30 04 01       	push   0x1043001
 1000bc3:	68 00 20 00 00       	push   0x2000
 1000bc8:	e8 2a 90 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:137
    cmdheader->prdtl = 1;
 1000bcd:	66 c7 46 02 01 00    	mov    WORD PTR [esi+0x2],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:138
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
 1000bd3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
 1000bd6:	83 e0 20             	and    eax,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:141
    cmdheader->w = 0;
    cmdheader->c = 1; //required for reset
    cmdheader->p = 0;
 1000bd9:	83 c8 05             	or     eax,0x5
 1000bdc:	88 06                	mov    BYTE PTR [esi],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:142
    cmdheader->r = 1; //srst field
 1000bde:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
 1000be2:	83 c8 05             	or     eax,0x5
 1000be5:	88 46 01             	mov    BYTE PTR [esi+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:144

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
 1000be8:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:145
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
 1000beb:	55                   	push   ebp
 1000bec:	55                   	push   ebp
 1000bed:	68 b4 93 02 01       	push   0x10293b4
 1000bf2:	68 00 20 00 00       	push   0x2000
 1000bf7:	e8 fb 8f 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:146
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
 1000bfc:	c7 85 80 00 00 00 00 	mov    DWORD PTR [ebp+0x80],0xc53000
 1000c03:	30 c5 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:147
    cmdtbl->prdt_entry[0].dbc = 0;
 1000c06:	8b 85 8c 00 00 00    	mov    eax,DWORD PTR [ebp+0x8c]
 1000c0c:	25 00 00 c0 ff       	and    eax,0xffc00000
 1000c11:	89 85 8c 00 00 00    	mov    DWORD PTR [ebp+0x8c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:148
    cmdtbl->prdt_entry[0].i = 0;
 1000c17:	c1 e8 18             	shr    eax,0x18
 1000c1a:	83 e0 7f             	and    eax,0x7f
 1000c1d:	88 85 8f 00 00 00    	mov    BYTE PTR [ebp+0x8f],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:151

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
 1000c23:	83 c4 1c             	add    esp,0x1c
 1000c26:	6a 14                	push   0x14
 1000c28:	6a 00                	push   0x0
 1000c2a:	55                   	push   ebp
 1000c2b:	e8 8f 82 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:152
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
 1000c30:	c6 45 00 27          	mov    BYTE PTR [ebp+0x0],0x27
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:153
    cmdfis->c = 0; // Control
 1000c34:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
 1000c38:	83 e0 7f             	and    eax,0x7f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:154
    cmdfis->control |= (1 << 2); //reset bit
 1000c3b:	80 4d 0f 04          	or     BYTE PTR [ebp+0xf],0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:155
    cmdfis->pmport = 0xf;
 1000c3f:	83 c8 0f             	or     eax,0xf
 1000c42:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:156
    port->cmd.CLO = 1;
 1000c45:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000c48:	83 c8 08             	or     eax,0x8
 1000c4b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:157
    while (port->cmd.CLO);
 1000c4e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:157 (discriminator 1)
 1000c51:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000c54:	a8 08                	test   al,0x8
 1000c56:	75 f9                	jne    1000c51 <ahciEnablePortMultiplier+0xdf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:158
    port->cmd.ST = 1;
 1000c58:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1000c5b:	83 c8 01             	or     eax,0x1
 1000c5e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:159
    port->ci |= slot;
 1000c61:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 1000c64:	09 c7                	or     edi,eax
 1000c66:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:161

    slot = find_cmdslot(port);
 1000c69:	83 ec 0c             	sub    esp,0xc
 1000c6c:	53                   	push   ebx
 1000c6d:	e8 44 fe ff ff       	call   1000ab6 <find_cmdslot>
 1000c72:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:162
    if (slot == -1)
 1000c74:	83 c4 10             	add    esp,0x10
 1000c77:	83 f8 ff             	cmp    eax,0xffffffff
 1000c7a:	0f 84 a4 00 00 00    	je     1000d24 <ahciEnablePortMultiplier+0x1b2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:164
        return;
    port->ie.AsUlong = 0; //xffffffff;
 1000c80:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:165
    cmdheader += slot;
 1000c87:	c1 e0 05             	shl    eax,0x5
 1000c8a:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:166
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
 1000c8c:	83 ec 04             	sub    esp,0x4
 1000c8f:	56                   	push   esi
 1000c90:	68 01 30 04 01       	push   0x1043001
 1000c95:	68 00 20 00 00       	push   0x2000
 1000c9a:	e8 58 8f 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:167
    cmdheader->prdtl = 1;
 1000c9f:	66 c7 46 02 01 00    	mov    WORD PTR [esi+0x2],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:168
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
 1000ca5:	0f b6 16             	movzx  edx,BYTE PTR [esi]
 1000ca8:	83 e2 20             	and    edx,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:170
    cmdheader->w = 0;
    cmdheader->c = 1; //required for reset
 1000cab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
 1000caf:	83 c8 04             	or     eax,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:171
    cmdheader->p = 0;
 1000cb2:	83 ca 05             	or     edx,0x5
 1000cb5:	88 16                	mov    BYTE PTR [esi],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:172
    cmdheader->r = 0; //srst field
 1000cb7:	83 e0 fe             	and    eax,0xfffffffe
 1000cba:	88 46 01             	mov    BYTE PTR [esi+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:173
    cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
 1000cbd:	8b 76 08             	mov    esi,DWORD PTR [esi+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:174
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
 1000cc0:	56                   	push   esi
 1000cc1:	56                   	push   esi
 1000cc2:	68 b4 93 02 01       	push   0x10293b4
 1000cc7:	68 00 20 00 00       	push   0x2000
 1000ccc:	e8 26 8f 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:175
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
 1000cd1:	c7 86 80 00 00 00 00 	mov    DWORD PTR [esi+0x80],0xc53000
 1000cd8:	30 c5 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:176
    cmdtbl->prdt_entry[0].dbc = 0;
 1000cdb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
 1000ce1:	25 00 00 c0 ff       	and    eax,0xffc00000
 1000ce6:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:177
    cmdtbl->prdt_entry[0].i = 0;
 1000cec:	c1 e8 18             	shr    eax,0x18
 1000cef:	83 e0 7f             	and    eax,0x7f
 1000cf2:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:180

    cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
 1000cf8:	83 c4 1c             	add    esp,0x1c
 1000cfb:	6a 14                	push   0x14
 1000cfd:	6a 00                	push   0x0
 1000cff:	56                   	push   esi
 1000d00:	e8 ba 81 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:181
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
 1000d05:	c6 06 27             	mov    BYTE PTR [esi],0x27
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:182
    cmdfis->c = 0; // control
 1000d08:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
 1000d0c:	83 e0 7f             	and    eax,0x7f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:183
    cmdfis->control &= ~(1 << 2); //reset bit
 1000d0f:	80 66 0f fb          	and    BYTE PTR [esi+0xf],0xfb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:184
    cmdfis->pmport = 0xf;
 1000d13:	83 c8 0f             	or     eax,0xf
 1000d16:	88 46 01             	mov    BYTE PTR [esi+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:185
    port->ci |= slot;
 1000d19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 1000d1c:	09 c7                	or     edi,eax
 1000d1e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
 1000d21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:186
}
 1000d24:	83 c4 0c             	add    esp,0xc
 1000d27:	5b                   	pop    ebx
 1000d28:	5e                   	pop    esi
 1000d29:	5f                   	pop    edi
 1000d2a:	5d                   	pop    ebp
 1000d2b:	c3                   	ret    

01000d2c <ahciIdentify>:
ahciIdentify():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:418

    // Clear FRE (bit4)
    port->cmd.FRE = 0;
}

void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
 1000d2c:	55                   	push   ebp
 1000d2d:	57                   	push   edi
 1000d2e:	56                   	push   esi
 1000d2f:	53                   	push   ebx
 1000d30:	83 ec 18             	sub    esp,0x18
 1000d33:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:419
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
 1000d37:	56                   	push   esi
 1000d38:	ff 35 04 98 12 00    	push   DWORD PTR ds:0x129804
 1000d3e:	56                   	push   esi
 1000d3f:	68 d8 93 02 01       	push   0x10293d8
 1000d44:	68 00 20 00 00       	push   0x2000
 1000d49:	e8 a9 8e 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:420
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
 1000d4e:	8b 2e                	mov    ebp,DWORD PTR [esi]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:421
    int slot = find_cmdslot(port);
 1000d50:	83 c4 14             	add    esp,0x14
 1000d53:	56                   	push   esi
 1000d54:	e8 5d fd ff ff       	call   1000ab6 <find_cmdslot>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:422
    if (slot == -1)
 1000d59:	83 c4 10             	add    esp,0x10
 1000d5c:	83 f8 ff             	cmp    eax,0xffffffff
 1000d5f:	0f 84 b5 01 00 00    	je     1000f1a <ahciIdentify+0x1ee>
 1000d65:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:424
        return;
    port->ie.AsUlong = 0xFFFFFFFF;
 1000d67:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:425
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
 1000d6e:	c1 e0 05             	shl    eax,0x5
 1000d71:	01 c5                	add    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:426
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
 1000d73:	83 ec 04             	sub    esp,0x4
 1000d76:	55                   	push   ebp
 1000d77:	68 01 30 04 01       	push   0x1043001
 1000d7c:	68 00 20 00 00       	push   0x2000
 1000d81:	e8 71 8e 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:427
    cmdheader->prdtl = 1;
 1000d86:	66 c7 45 02 01 00    	mov    WORD PTR [ebp+0x2],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:431
    cmdheader->cfl = 5; //sizeof (FIS_REG_H2D) / sizeof (uint32_t);
    cmdheader->w = 0;
    cmdheader->a = 0;
    cmdheader->c = 0;
 1000d8c:	80 65 01 fb          	and    BYTE PTR [ebp+0x1],0xfb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:432
    cmdheader->p = 0;
 1000d90:	c6 45 00 05          	mov    BYTE PTR [ebp+0x0],0x5
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:433
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
 1000d94:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:434
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
 1000d97:	83 c4 0c             	add    esp,0xc
 1000d9a:	68 90 00 00 00       	push   0x90
 1000d9f:	6a 00                	push   0x0
 1000da1:	53                   	push   ebx
 1000da2:	e8 18 81 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:436
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
 1000da7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
 1000daa:	53                   	push   ebx
 1000dab:	68 b4 93 02 01       	push   0x10293b4
 1000db0:	68 00 20 00 00       	push   0x2000
 1000db5:	e8 3d 8e 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:437
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
 1000dba:	c7 83 80 00 00 00 00 	mov    DWORD PTR [ebx+0x80],0xc53000
 1000dc1:	30 c5 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:438
    cmdtbl->prdt_entry[0].dbc = 0x1ff;
 1000dc4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
 1000dca:	25 00 00 c0 ff       	and    eax,0xffc00000
 1000dcf:	0d ff 01 00 00       	or     eax,0x1ff
 1000dd4:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:439
    cmdtbl->prdt_entry[0].i = 1;
 1000dda:	c1 e8 18             	shr    eax,0x18
 1000ddd:	83 c8 80             	or     eax,0xffffff80
 1000de0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:442

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
 1000de6:	c6 03 27             	mov    BYTE PTR [ebx],0x27
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:444
    cmdfis->c = 1; // Command
    if (deviceType == AHCI_DEV_SATAPI)
 1000de9:	83 c4 18             	add    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:445
        cmdfis->command = ATA_IDENTIFY_CDROM_COMMAND;
 1000dec:	83 7c 24 2c 04       	cmp    DWORD PTR [esp+0x2c],0x4
 1000df1:	ba a1 ff ff ff       	mov    edx,0xffffffa1
 1000df6:	b8 ec ff ff ff       	mov    eax,0xffffffec
 1000dfb:	0f 44 c2             	cmove  eax,edx
 1000dfe:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:448
    else
        cmdfis->command = ATA_IDENTIFY_COMMAND;
    cmdfis->lba0 = 0;
 1000e01:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:449
    cmdfis->lba1 = 0;
 1000e05:	c6 43 05 00          	mov    BYTE PTR [ebx+0x5],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:450
    cmdfis->lba2 = 0;
 1000e09:	c6 43 06 00          	mov    BYTE PTR [ebx+0x6],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:451
    cmdfis->lba3 = 0;
 1000e0d:	c6 43 08 00          	mov    BYTE PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:452
    cmdfis->lba4 = 0;
 1000e11:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:453
    cmdfis->lba5 = 0;
 1000e15:	c6 43 0a 00          	mov    BYTE PTR [ebx+0xa],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:455
    cmdfis->lba5 = 0;
    cmdfis->pmport = 0;
 1000e19:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
 1000e1d:	83 c8 80             	or     eax,0xffffff80
 1000e20:	83 e0 f0             	and    eax,0xfffffff0
 1000e23:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:456
    cmdfis->device = 0;
 1000e26:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:457
    cmdfis->countl = 1;
 1000e2a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:458
    cmdfis->counth = 0;
 1000e2e:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:459
    int lCmdVal = AhciIssueCmd(port, slot);
 1000e32:	57                   	push   edi
 1000e33:	56                   	push   esi
 1000e34:	e8 43 f2 ff ff       	call   100007c <AhciIssueCmd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:460
    if (!lCmdVal) {
 1000e39:	83 c4 10             	add    esp,0x10
 1000e3c:	85 c0                	test   eax,eax
 1000e3e:	75 17                	jne    1000e57 <ahciIdentify+0x12b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:461
        printk("AHCI: ***Error identifying device (%u)***\n",lCmdVal);
 1000e40:	83 ec 08             	sub    esp,0x8
 1000e43:	6a 00                	push   0x0
 1000e45:	68 08 94 02 01       	push   0x1029408
 1000e4a:	e8 90 8d 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:462
        return;
 1000e4f:	83 c4 10             	add    esp,0x10
 1000e52:	e9 c3 00 00 00       	jmp    1000f1a <ahciIdentify+0x1ee>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:464
    }
    kATADeviceInfo[kATADeviceInfoCount].ATADeviceAvailable = true;
 1000e57:	8b 15 04 98 12 00    	mov    edx,DWORD PTR ds:0x129804
 1000e5d:	69 c2 73 02 00 00    	imul   eax,edx,0x273
 1000e63:	03 05 00 98 12 00    	add    eax,DWORD PTR ds:0x129800
 1000e69:	c6 80 51 02 00 00 01 	mov    BYTE PTR [eax+0x251],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:465
    kATADeviceInfo[kATADeviceInfoCount].bus = SATA;
 1000e70:	c7 80 61 02 00 00 02 	mov    DWORD PTR [eax+0x261],0x2
 1000e77:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:466
    kATADeviceInfo[kATADeviceInfoCount].driveNo = kATADeviceInfoCount;
 1000e7a:	89 90 65 02 00 00    	mov    DWORD PTR [eax+0x265],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:467
    kATADeviceInfo[kATADeviceInfoCount].ioPort = (uintptr_t) port;
 1000e80:	89 b0 69 02 00 00    	mov    DWORD PTR [eax+0x269],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:468
    kATADeviceInfo[kATADeviceInfoCount].irqNum = 0;
 1000e86:	c6 80 6d 02 00 00 00 	mov    BYTE PTR [eax+0x26d],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:469
    kATADeviceInfo[kATADeviceInfoCount].driveHeadPortDesignation = 0x0;
 1000e8d:	c6 80 6e 02 00 00 00 	mov    BYTE PTR [eax+0x26e],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:470
    kATADeviceInfo[kATADeviceInfoCount].queryATAData = false;
 1000e94:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:472
    if (deviceType == AHCI_DEV_SATAPI)
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_CD;
 1000e9b:	83 7c 24 24 04       	cmp    DWORD PTR [esp+0x24],0x4
 1000ea0:	0f 94 c2             	sete   dl
 1000ea3:	0f b6 d2             	movzx  edx,dl
 1000ea6:	83 c2 02             	add    edx,0x2
 1000ea9:	89 90 52 02 00 00    	mov    DWORD PTR [eax+0x252],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:475
    else
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
 1000eaf:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
 1000eb5:	89 90 6f 02 00 00    	mov    DWORD PTR [eax+0x26f],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:476
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
 1000ebb:	83 ec 04             	sub    esp,0x4
 1000ebe:	68 00 02 00 00       	push   0x200
 1000ec3:	68 00 30 c5 00       	push   0xc53000
 1000ec8:	50                   	push   eax
 1000ec9:	e8 a2 87 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:477
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
 1000ece:	a1 04 98 12 00       	mov    eax,ds:0x129804
 1000ed3:	8d 50 01             	lea    edx,[eax+0x1]
 1000ed6:	89 15 04 98 12 00    	mov    DWORD PTR ds:0x129804,edx
 1000edc:	69 c0 73 02 00 00    	imul   eax,eax,0x273
 1000ee2:	03 05 00 98 12 00    	add    eax,DWORD PTR ds:0x129800
 1000ee8:	89 04 24             	mov    DWORD PTR [esp],eax
 1000eeb:	e8 c0 72 00 00       	call   10081b0 <ataIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:478
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
 1000ef0:	83 c4 0c             	add    esp,0xc
 1000ef3:	69 05 04 98 12 00 73 	imul   eax,DWORD PTR ds:0x129804,0x273
 1000efa:	02 00 00 
 1000efd:	8b 15 00 98 12 00    	mov    edx,DWORD PTR ds:0x129800
 1000f03:	8d 44 02 8d          	lea    eax,[edx+eax*1-0x73]
 1000f07:	50                   	push   eax
 1000f08:	68 34 94 02 01       	push   0x1029434
 1000f0d:	68 00 20 00 00       	push   0x2000
 1000f12:	e8 e0 8c 00 00       	call   1009bf7 <printd>
 1000f17:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:479
}
 1000f1a:	83 c4 0c             	add    esp,0xc
 1000f1d:	5b                   	pop    ebx
 1000f1e:	5e                   	pop    esi
 1000f1f:	5f                   	pop    edi
 1000f20:	5d                   	pop    ebp
 1000f21:	c3                   	ret    

01000f22 <ahciSetCurrentDisk>:
ahciSetCurrentDisk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:509

#define ATA_DEV_BUSY 0x80
#define ATA_DEV_DRQ 0x08

void ahciSetCurrentDisk(volatile HBA_PORT* port) {
    kAHCICurrentDisk = port;
 1000f22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1000f26:	a3 4c 99 12 00       	mov    ds:0x12994c,eax
 1000f2b:	c3                   	ret    

01000f2c <ahciSetCurrentPart>:
ahciSetCurrentPart():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:514
}

void ahciSetCurrentPart(partEntry_t part) 
{
    kAHCICurrentPart = part;
 1000f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1000f30:	a3 50 99 12 00       	mov    ds:0x129950,eax
 1000f35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1000f39:	a3 54 99 12 00       	mov    ds:0x129954,eax
 1000f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1000f42:	a3 58 99 12 00       	mov    ds:0x129958,eax
 1000f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1000f4b:	a3 5c 99 12 00       	mov    ds:0x12995c,eax
 1000f50:	c3                   	ret    

01000f51 <ahciBlockingRead28>:
ahciBlockingRead28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:526
    else
        return 0;
}

///Read the current disk *partition* 
int ahciBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
 1000f51:	55                   	push   ebp
 1000f52:	57                   	push   edi
 1000f53:	56                   	push   esi
 1000f54:	53                   	push   ebx
 1000f55:	83 ec 20             	sub    esp,0x20
 1000f58:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
 1000f5c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:530
    int prdCntr = 0;

    //CLR 06/07/2016 - Must add partition start sector
    sector+=kAHCICurrentPart.partStartSector;
 1000f60:	a1 50 99 12 00       	mov    eax,ds:0x129950
 1000f65:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
 1000f69:	89 c7                	mov    edi,eax
 1000f6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:532
    
    memset(buffer,0,sector_count*512);
 1000f6f:	89 f0                	mov    eax,esi
 1000f71:	c1 e0 09             	shl    eax,0x9
 1000f74:	50                   	push   eax
 1000f75:	6a 00                	push   0x0
 1000f77:	53                   	push   ebx
 1000f78:	e8 42 7f 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:534
    
    printd(DEBUG_AHCI, "AHCI: read on port=0x%08X,sector=0x%08X,buffer=0x%08X,sector_count=%u\n", kAHCICurrentDisk,sector,buffer,sector_count);
 1000f7d:	83 c4 08             	add    esp,0x8
 1000f80:	56                   	push   esi
 1000f81:	53                   	push   ebx
 1000f82:	57                   	push   edi
 1000f83:	ff 35 4c 99 12 00    	push   DWORD PTR ds:0x12994c
 1000f89:	68 58 94 02 01       	push   0x1029458
 1000f8e:	68 00 20 00 00       	push   0x2000
 1000f93:	e8 5f 8c 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:536

    kAHCICurrentDisk->pxis.AsUlong = (uint32_t) - 1; // Clear pending interrupt bits
 1000f98:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
 1000f9d:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:539
    int spin = 0; // Spin lock timeout counter

    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) kAHCICurrentDisk->clb;
 1000fa4:	8b 38                	mov    edi,DWORD PTR [eax]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:540
    int slot = find_cmdslot(kAHCICurrentDisk);
 1000fa6:	83 c4 14             	add    esp,0x14
 1000fa9:	50                   	push   eax
 1000faa:	e8 07 fb ff ff       	call   1000ab6 <find_cmdslot>
 1000faf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:541
    if (slot == -1)
 1000fb3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:542
        return false;
 1000fb6:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:541
    kAHCICurrentDisk->pxis.AsUlong = (uint32_t) - 1; // Clear pending interrupt bits
    int spin = 0; // Spin lock timeout counter

    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) kAHCICurrentDisk->clb;
    int slot = find_cmdslot(kAHCICurrentDisk);
    if (slot == -1)
 1000fbb:	83 f8 ff             	cmp    eax,0xffffffff
 1000fbe:	0f 84 84 01 00 00    	je     1001148 <ahciBlockingRead28+0x1f7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:543
        return false;
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
 1000fc4:	c1 e0 05             	shl    eax,0x5
 1000fc7:	01 f8                	add    eax,edi
 1000fc9:	89 c5                	mov    ebp,eax
 1000fcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:544
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
 1000fcf:	83 ec 04             	sub    esp,0x4
 1000fd2:	50                   	push   eax
 1000fd3:	68 01 30 04 01       	push   0x1043001
 1000fd8:	68 00 20 00 00       	push   0x2000
 1000fdd:	e8 15 8c 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:545
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count
 1000fe2:	8d 46 ff             	lea    eax,[esi-0x1]
 1000fe5:	c1 e8 04             	shr    eax,0x4
 1000fe8:	83 c0 01             	add    eax,0x1
 1000feb:	66 89 45 02          	mov    WORD PTR [ebp+0x2],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:547

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
 1000fef:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:548
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
 1000ff2:	83 c4 0c             	add    esp,0xc
 1000ff5:	0f b7 c0             	movzx  eax,ax
 1000ff8:	83 c0 08             	add    eax,0x8
 1000ffb:	c1 e0 04             	shl    eax,0x4
 1000ffe:	50                   	push   eax
 1000fff:	6a 00                	push   0x0
 1001001:	57                   	push   edi
 1001002:	e8 b8 7e 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:550
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
 1001007:	ff 75 08             	push   DWORD PTR [ebp+0x8]
 100100a:	57                   	push   edi
 100100b:	68 a0 94 02 01       	push   0x10294a0
 1001010:	68 00 20 00 00       	push   0x2000
 1001015:	e8 dd 8b 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:553

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
 100101a:	0f b7 45 02          	movzx  eax,WORD PTR [ebp+0x2]
 100101e:	83 e8 01             	sub    eax,0x1
 1001021:	83 c4 20             	add    esp,0x20
 1001024:	85 c0                	test   eax,eax
 1001026:	7e 4d                	jle    1001075 <ahciBlockingRead28+0x124>
 1001028:	8d af 80 00 00 00    	lea    ebp,[edi+0x80]
 100102e:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:554 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
 1001033:	89 5d 00             	mov    DWORD PTR [ebp+0x0],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:555 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dbc = 8 * 1024; // 8K bytes
 1001036:	8d 51 08             	lea    edx,[ecx+0x8]
 1001039:	c1 e2 04             	shl    edx,0x4
 100103c:	01 fa                	add    edx,edi
 100103e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
 1001041:	25 00 00 c0 ff       	and    eax,0xffc00000
 1001046:	80 cc 20             	or     ah,0x20
 1001049:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:556 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].i = 1;
 100104c:	c1 e8 18             	shr    eax,0x18
 100104f:	83 c8 80             	or     eax,0xffffff80
 1001052:	88 42 0f             	mov    BYTE PTR [edx+0xf],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:557 (discriminator 3)
        buffer += 4 * 1024; // 4K words
 1001055:	81 c3 00 10 00 00    	add    ebx,0x1000
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:558 (discriminator 3)
        sector_count -= 16; // 16 sectors
 100105b:	83 ee 10             	sub    esi,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:559 (discriminator 3)
        prdCntr++;
 100105e:	83 c1 01             	add    ecx,0x1
 1001061:	83 c5 10             	add    ebp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:553 (discriminator 3)
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
 1001064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1001068:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
 100106c:	83 e8 01             	sub    eax,0x1
 100106f:	39 c8                	cmp    eax,ecx
 1001071:	7f c0                	jg     1001033 <ahciBlockingRead28+0xe2>
 1001073:	eb 05                	jmp    100107a <ahciBlockingRead28+0x129>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:527
        return 0;
}

///Read the current disk *partition* 
int ahciBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
    int prdCntr = 0;
 1001075:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:562
        buffer += 4 * 1024; // 4K words
        sector_count -= 16; // 16 sectors
        prdCntr++;
    }
    // Last entry
    cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
 100107a:	83 c1 08             	add    ecx,0x8
 100107d:	c1 e1 04             	shl    ecx,0x4
 1001080:	01 f9                	add    ecx,edi
 1001082:	89 19                	mov    DWORD PTR [ecx],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:563
    cmdtbl->prdt_entry[prdCntr].dbc = sector_count << 9; // 512 bytes per sector
 1001084:	89 f0                	mov    eax,esi
 1001086:	c1 e0 09             	shl    eax,0x9
 1001089:	25 ff ff 3f 00       	and    eax,0x3fffff
 100108e:	8b 51 0c             	mov    edx,DWORD PTR [ecx+0xc]
 1001091:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
 1001097:	09 d0                	or     eax,edx
 1001099:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:564
    cmdtbl->prdt_entry[prdCntr].i = 1;
 100109c:	c1 e8 18             	shr    eax,0x18
 100109f:	83 c8 80             	or     eax,0xffffff80
 10010a2:	88 41 0f             	mov    BYTE PTR [ecx+0xf],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:569

    // Setup command
    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);

    cmdfis->fis_type = FIS_TYPE_REG_H2D;
 10010a5:	c6 07 27             	mov    BYTE PTR [edi],0x27
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:570
    cmdfis->c = 1; // Command
 10010a8:	80 4f 01 80          	or     BYTE PTR [edi+0x1],0x80
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:571
    cmdfis->command = ATA_CMD_READ_DMA_EX;
 10010ac:	c6 47 02 25          	mov    BYTE PTR [edi+0x2],0x25
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:572
    cmdfis->lba0 = (uint8_t) sector;
 10010b0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
 10010b4:	88 5f 04             	mov    BYTE PTR [edi+0x4],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:573
    cmdfis->lba1 = (uint8_t) (sector >> 8);
 10010b7:	89 d8                	mov    eax,ebx
 10010b9:	c1 e8 08             	shr    eax,0x8
 10010bc:	88 47 05             	mov    BYTE PTR [edi+0x5],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:574
    cmdfis->lba2 = (uint8_t) (sector >> 16);
 10010bf:	89 d8                	mov    eax,ebx
 10010c1:	c1 e8 10             	shr    eax,0x10
 10010c4:	88 47 06             	mov    BYTE PTR [edi+0x6],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:575
    cmdfis->device = 1 << 6; // LBA mode
 10010c7:	c6 47 07 40          	mov    BYTE PTR [edi+0x7],0x40
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:577

    cmdfis->lba3 = (uint8_t) (sector >> 24);
 10010cb:	89 d8                	mov    eax,ebx
 10010cd:	c1 e8 18             	shr    eax,0x18
 10010d0:	88 47 08             	mov    BYTE PTR [edi+0x8],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:578
    cmdfis->lba4 = (uint8_t) 0;
 10010d3:	c6 47 09 00          	mov    BYTE PTR [edi+0x9],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:579
    cmdfis->lba5 = (uint8_t) 0;
 10010d7:	c6 47 0a 00          	mov    BYTE PTR [edi+0xa],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:581

    cmdfis->countl = LOBYTE((uint16_t) sector_count);
 10010db:	89 f0                	mov    eax,esi
 10010dd:	88 47 0c             	mov    BYTE PTR [edi+0xc],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:582
    cmdfis->counth = HIBYTE((uint16_t) sector_count);
 10010e0:	89 f5                	mov    ebp,esi
 10010e2:	89 f0                	mov    eax,esi
 10010e4:	0f b6 c4             	movzx  eax,ah
 10010e7:	88 47 0d             	mov    BYTE PTR [edi+0xd],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:584

    int lCMdVal = AhciIssueCmd(kAHCICurrentDisk, slot);
 10010ea:	83 ec 08             	sub    esp,0x8
 10010ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 10010f1:	ff 35 4c 99 12 00    	push   DWORD PTR ds:0x12994c
 10010f7:	e8 80 ef ff ff       	call   100007c <AhciIssueCmd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:585
    if (!lCMdVal) {
 10010fc:	83 c4 10             	add    esp,0x10
 10010ff:	85 c0                	test   eax,eax
 1001101:	75 1c                	jne    100111f <ahciBlockingRead28+0x1ce>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:586
        printd(DEBUG_AHCI, "AHCI: ***Error reading from disk***\n");
 1001103:	83 ec 08             	sub    esp,0x8
 1001106:	68 cc 94 02 01       	push   0x10294cc
 100110b:	68 00 20 00 00       	push   0x2000
 1001110:	e8 e2 8a 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:587
        return -1;
 1001115:	83 c4 10             	add    esp,0x10
 1001118:	bd ff ff ff ff       	mov    ebp,0xffffffff
 100111d:	eb 29                	jmp    1001148 <ahciBlockingRead28+0x1f7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:591
    }

    // Check again
    if (kAHCICurrentDisk->pxis.TFES) {
 100111f:	a1 4c 99 12 00       	mov    eax,ds:0x12994c
 1001124:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
 1001127:	a9 00 00 00 40       	test   eax,0x40000000
 100112c:	74 1a                	je     1001148 <ahciBlockingRead28+0x1f7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:592
        printd(DEBUG_AHCI, "AHCI: Read disk error\n");
 100112e:	83 ec 08             	sub    esp,0x8
 1001131:	68 e8 2e 04 01       	push   0x1042ee8
 1001136:	68 00 20 00 00       	push   0x2000
 100113b:	e8 b7 8a 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:593
        return false;
 1001140:	83 c4 10             	add    esp,0x10
 1001143:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:597
    }

    return sector_count;
}
 1001148:	89 e8                	mov    eax,ebp
 100114a:	83 c4 1c             	add    esp,0x1c
 100114d:	5b                   	pop    ebx
 100114e:	5e                   	pop    esi
 100114f:	5f                   	pop    edi
 1001150:	5d                   	pop    ebp
 1001151:	c3                   	ret    

01001152 <ahciRead>:
ahciRead():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:517
void ahciSetCurrentPart(partEntry_t part) 
{
    kAHCICurrentPart = part;
}

int ahciRead(volatile HBA_PORT* port, int sector, uint8_t* buffer, int sector_count) {
 1001152:	53                   	push   ebx
 1001153:	83 ec 0c             	sub    esp,0xc
 1001156:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
ahciSetCurrentDisk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:509

#define ATA_DEV_BUSY 0x80
#define ATA_DEV_DRQ 0x08

void ahciSetCurrentDisk(volatile HBA_PORT* port) {
    kAHCICurrentDisk = port;
 100115a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 100115e:	a3 4c 99 12 00       	mov    ds:0x12994c,eax
ahciRead():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:519
    kAHCICurrentPart = part;
}

int ahciRead(volatile HBA_PORT* port, int sector, uint8_t* buffer, int sector_count) {
    ahciSetCurrentDisk(port);
    if (ahciBlockingRead28(sector, buffer, sector_count))
 1001163:	53                   	push   ebx
 1001164:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1001168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 100116c:	e8 e0 fd ff ff       	call   1000f51 <ahciBlockingRead28>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:520
        return sector_count;
 1001171:	85 c0                	test   eax,eax
 1001173:	0f 45 c3             	cmovne eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:523
    else
        return 0;
}
 1001176:	83 c4 18             	add    esp,0x18
 1001179:	5b                   	pop    ebx
 100117a:	c3                   	ret    

0100117b <ahciBlockingWrite28>:
ahciBlockingWrite28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:601
    return sector_count;
}

int ahciBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
    return 0;
}
 100117b:	b8 00 00 00 00       	mov    eax,0x0
 1001180:	c3                   	ret    

01001181 <ahci_port_activate_device>:
ahci_port_activate_device():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:672

    return true;
}

void ahci_port_activate_device(HBA_MEM* h, HBA_PORT* p)
{
 1001181:	55                   	push   ebp
 1001182:	57                   	push   edi
 1001183:	56                   	push   esi
 1001184:	53                   	push   ebx
 1001185:	83 ec 0c             	sub    esp,0xc
 1001188:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:673
    printd(DEBUG_AHCI,"activate port %d @ 0x%08X:\n", p - h->ports,p);
 100118c:	89 d8                	mov    eax,ebx
 100118e:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
 1001192:	8d b8 00 ff ff ff    	lea    edi,[eax-0x100]
 1001198:	c1 ff 07             	sar    edi,0x7
 100119b:	53                   	push   ebx
 100119c:	57                   	push   edi
 100119d:	68 19 30 04 01       	push   0x1043019
 10011a2:	68 00 20 00 00       	push   0x2000
 10011a7:	e8 4b 8a 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:675
    /* first check the presence flag */
    if ( (p->ssts & 0x7) == HBA_PORT_DET_NOT_PRESENT) { //check DET status
 10011ac:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 10011af:	83 c4 10             	add    esp,0x10
 10011b2:	a8 07                	test   al,0x7
 10011b4:	0f 85 c8 01 00 00    	jne    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:676
                    printd(DEBUG_AHCI,"activate: DET_NOT_PRESENT\n");
 10011ba:	83 ec 08             	sub    esp,0x8
 10011bd:	68 35 30 04 01       	push   0x1043035
 10011c2:	68 00 20 00 00       	push   0x2000
 10011c7:	e8 2b 8a 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:678
                    /* nothing attached? */
                    if (p->cmd.CPD) { /* we rely on CPD */
 10011cc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10011cf:	83 c4 10             	add    esp,0x10
 10011d2:	a9 00 00 10 00       	test   eax,0x100000
 10011d7:	74 4c                	je     1001225 <ahci_port_activate_device+0xa4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:679
                                    if (!p->cmd.CPS) {
 10011d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10011dc:	a9 00 00 01 00       	test   eax,0x10000
 10011e1:	75 1a                	jne    10011fd <ahci_port_activate_device+0x7c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:680
                                                    printd(DEBUG_AHCI,"confirmed by CPD\n");
 10011e3:	83 ec 08             	sub    esp,0x8
 10011e6:	68 50 30 04 01       	push   0x1043050
 10011eb:	68 00 20 00 00       	push   0x2000
 10011f0:	e8 02 8a 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:681
                                                    return;
 10011f5:	83 c4 10             	add    esp,0x10
 10011f8:	e9 e8 02 00 00       	jmp    10014e5 <ahci_port_activate_device+0x364>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:684
                                    }
                                    /* there's something */
                                    if (!p->cmd.POD) {
 10011fd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001200:	a8 04                	test   al,0x4
 1001202:	75 16                	jne    100121a <ahci_port_activate_device+0x99>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:685
                                                    p->cmd.POD = 1; /* power it */
 1001204:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001207:	83 c8 04             	or     eax,0x4
 100120a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:686
                                                    wait(20);
 100120d:	83 ec 0c             	sub    esp,0xc
 1001210:	6a 14                	push   0x14
 1001212:	e8 e1 93 00 00       	call   100a5f8 <wait>
 1001217:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:688
                                    }
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
 100121a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 100121d:	a8 07                	test   al,0x7
 100121f:	0f 85 5d 01 00 00    	jne    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:692
                                                    goto next_step;
                    }
                    /* spin-up? */
                    if (!p->cmd.SUD) { /* always !1 if cap.sss == 0 */
 1001225:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001228:	a8 02                	test   al,0x2
 100122a:	0f 85 c7 00 00 00    	jne    10012f7 <ahci_port_activate_device+0x176>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:693
                                    printd(DEBUG_AHCI,"not spun-up yet?\n");
 1001230:	83 ec 08             	sub    esp,0x8
 1001233:	68 62 30 04 01       	push   0x1043062
 1001238:	68 00 20 00 00       	push   0x2000
 100123d:	e8 b5 89 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:694
                                    if (p->serr.AsUlong & (1 << 26)) /* eXchange bit */
 1001242:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
 1001245:	83 c4 10             	add    esp,0x10
 1001248:	a9 00 00 00 04       	test   eax,0x4000000
 100124d:	74 0b                	je     100125a <ahci_port_activate_device+0xd9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:695
                                                    p->serr.AsUlong |= (1 << 26); /* RWC */
 100124f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
 1001252:	0d 00 00 00 04       	or     eax,0x4000000
 1001257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:696
                                    if ((p->ssts & 0x7) != 0) { /* set to 0 prior sud */
 100125a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 100125d:	a8 07                	test   al,0x7
 100125f:	74 16                	je     1001277 <ahci_port_activate_device+0xf6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:697
                                                    p->sctl.DET = 0;
 1001261:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 1001264:	83 e0 f0             	and    eax,0xfffffff0
 1001267:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:698
                                                    wait(20);
 100126a:	83 ec 0c             	sub    esp,0xc
 100126d:	6a 14                	push   0x14
 100126f:	e8 84 93 00 00       	call   100a5f8 <wait>
 1001274:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:700
                                    }
                                    p->cmd.SUD = 1;
 1001277:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 100127a:	83 c8 02             	or     eax,0x2
 100127d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:701
                                    waitTicks(5); /* wait 50 mus */
 1001280:	83 ec 0c             	sub    esp,0xc
 1001283:	6a 05                	push   0x5
 1001285:	e8 5b 93 00 00       	call   100a5e5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:702
                                    if (p->serr.AsUlong & ((1 << 26) | (1 << 18))) { /* received sth. */
 100128a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
 100128d:	83 c4 10             	add    esp,0x10
 1001290:	a9 00 00 04 04       	test   eax,0x4040000
 1001295:	0f 85 e7 00 00 00    	jne    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:707
                                                    /* COMRESET, COMWAKE */
                                                    goto next_step;
                                    }
                                    /* send the reset */
                                    p->sctl.DET = 1;
 100129b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 100129e:	83 e0 f0             	and    eax,0xfffffff0
 10012a1:	83 c8 01             	or     eax,0x1
 10012a4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:708
                                    waitTicks(100);
 10012a7:	83 ec 0c             	sub    esp,0xc
 10012aa:	6a 64                	push   0x64
 10012ac:	e8 34 93 00 00       	call   100a5e5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:709
                                    p->sctl.DET = 0;
 10012b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 10012b4:	83 e0 f0             	and    eax,0xfffffff0
 10012b7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:710
                                    wait(20);
 10012ba:	c7 04 24 14 00 00 00 	mov    DWORD PTR [esp],0x14
 10012c1:	e8 32 93 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:711
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
 10012c6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 10012c9:	83 c4 10             	add    esp,0x10
 10012cc:	a8 07                	test   al,0x7
 10012ce:	0f 85 ae 00 00 00    	jne    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:713
                                                    goto next_step;
                                    p->cmd.SUD = 0; /* we're done enter listening mode */
 10012d4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10012d7:	83 e0 fd             	and    eax,0xfffffffd
 10012da:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:714
                                    printd(DEBUG_AHCI,"not present\n");
 10012dd:	83 ec 08             	sub    esp,0x8
 10012e0:	68 74 30 04 01       	push   0x1043074
 10012e5:	68 00 20 00 00       	push   0x2000
 10012ea:	e8 08 89 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:715
                                    goto exit;
 10012ef:	83 c4 10             	add    esp,0x10
 10012f2:	e9 d8 01 00 00       	jmp    10014cf <ahci_port_activate_device+0x34e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:718
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
 10012f7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 10012fa:	c1 e8 08             	shr    eax,0x8
 10012fd:	83 e0 0f             	and    eax,0xf
 1001300:	3c 01                	cmp    al,0x1
 1001302:	74 7e                	je     1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:719
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
 1001304:	83 ec 08             	sub    esp,0x8
 1001307:	68 81 30 04 01       	push   0x1043081
 100130c:	68 00 20 00 00       	push   0x2000
 1001311:	e8 e1 88 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:721
                                    int ct = 50;
                                    while (p->cmd.ICC && ct--)
 1001316:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001319:	c1 e8 1c             	shr    eax,0x1c
 100131c:	83 c4 10             	add    esp,0x10
 100131f:	84 c0                	test   al,al
 1001321:	74 21                	je     1001344 <ahci_port_activate_device+0x1c3>
 1001323:	be 32 00 00 00       	mov    esi,0x32
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:722
                                                    waitTicks(1);
 1001328:	83 ec 0c             	sub    esp,0xc
 100132b:	6a 01                	push   0x1
 100132d:	e8 b3 92 00 00       	call   100a5e5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:721
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
                                    int ct = 50;
                                    while (p->cmd.ICC && ct--)
 1001332:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001335:	c1 e8 1c             	shr    eax,0x1c
 1001338:	83 c4 10             	add    esp,0x10
 100133b:	84 c0                	test   al,al
 100133d:	74 05                	je     1001344 <ahci_port_activate_device+0x1c3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:721 (discriminator 1)
 100133f:	83 ee 01             	sub    esi,0x1
 1001342:	75 e4                	jne    1001328 <ahci_port_activate_device+0x1a7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:723
                                                    waitTicks(1);
                                    p->cmd.ICC = 1;
 1001344:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 1001347:	25 ff ff ff 0f       	and    eax,0xfffffff
 100134c:	0d 00 00 00 10       	or     eax,0x10000000
 1001351:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:724
                                    wait(10);
 1001354:	83 ec 0c             	sub    esp,0xc
 1001357:	6a 0a                	push   0xa
 1001359:	e8 9a 92 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:725
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
 100135e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 1001361:	83 c4 10             	add    esp,0x10
 1001364:	a8 07                	test   al,0x7
 1001366:	75 1a                	jne    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:727
                                                    goto next_step;
                                    printd(DEBUG_AHCI,"unable to set to active\n");
 1001368:	83 ec 08             	sub    esp,0x8
 100136b:	68 90 30 04 01       	push   0x1043090
 1001370:	68 00 20 00 00       	push   0x2000
 1001375:	e8 7d 88 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:728
                                    goto exit;
 100137a:	83 c4 10             	add    esp,0x10
 100137d:	e9 4d 01 00 00       	jmp    10014cf <ahci_port_activate_device+0x34e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:734
                    }
    }

    /* det != 1*/
next_step:
    if ((p->ssts & 0x7) == HBA_PORT_DET_PRESENT) {
 1001382:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 1001385:	83 e0 07             	and    eax,0x7
 1001388:	83 f8 03             	cmp    eax,0x3
 100138b:	0f 85 f4 00 00 00    	jne    1001485 <ahci_port_activate_device+0x304>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:736
                    /* almost done */
                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE) {
 1001391:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 1001394:	c1 e8 08             	shr    eax,0x8
 1001397:	83 e0 0f             	and    eax,0xf
 100139a:	3c 01                	cmp    al,0x1
 100139c:	0f 84 99 00 00 00    	je     100143b <ahci_port_activate_device+0x2ba>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:738
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
 10013a2:	83 ec 08             	sub    esp,0x8
 10013a5:	68 a9 30 04 01       	push   0x10430a9
 10013aa:	68 00 20 00 00       	push   0x2000
 10013af:	e8 43 88 00 00       	call   1009bf7 <printd>
 10013b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:747
                                    while (p->cmd.ICC && ct--) /* 500ms */
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
                                                    p->cmd.ICC = 1;
                                                    waitTicks(1);
                                                    wc++; ct = 50;
 10013b7:	be 00 00 00 00       	mov    esi,0x0
 10013bc:	bd 32 00 00 00       	mov    ebp,0x32
 10013c1:	eb 10                	jmp    10013d3 <ahci_port_activate_device+0x252>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:742
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
activ:
                                    ct = 50, wc = 0;
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
 10013c3:	83 ed 01             	sub    ebp,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:743
                                                    waitTicks(1);
 10013c6:	83 ec 0c             	sub    esp,0xc
 10013c9:	6a 01                	push   0x1
 10013cb:	e8 15 92 00 00       	call   100a5e5 <waitTicks>
 10013d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:742
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
activ:
                                    ct = 50, wc = 0;
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
 10013d3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10013d6:	c1 e8 1c             	shr    eax,0x1c
 10013d9:	84 c0                	test   al,al
 10013db:	74 04                	je     10013e1 <ahci_port_activate_device+0x260>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:742 (discriminator 1)
 10013dd:	85 ed                	test   ebp,ebp
 10013df:	75 e2                	jne    10013c3 <ahci_port_activate_device+0x242>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:744
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
 10013e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 10013e4:	c1 e8 08             	shr    eax,0x8
 10013e7:	83 e0 0f             	and    eax,0xf
 10013ea:	85 f6                	test   esi,esi
 10013ec:	75 2b                	jne    1001419 <ahci_port_activate_device+0x298>
 10013ee:	3c 01                	cmp    al,0x1
 10013f0:	74 27                	je     1001419 <ahci_port_activate_device+0x298>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:745
                                                    p->cmd.ICC = 1;
 10013f2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
 10013f5:	25 ff ff ff 0f       	and    eax,0xfffffff
 10013fa:	0d 00 00 00 10       	or     eax,0x10000000
 10013ff:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:746
                                                    waitTicks(1);
 1001402:	83 ec 0c             	sub    esp,0xc
 1001405:	6a 01                	push   0x1
 1001407:	e8 d9 91 00 00       	call   100a5e5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:747
                                                    wc++; ct = 50;
 100140c:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:748
                                                    goto rewait;
 100140f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:747
                                    while (p->cmd.ICC && ct--) /* 500ms */
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
                                                    p->cmd.ICC = 1;
                                                    waitTicks(1);
                                                    wc++; ct = 50;
 1001412:	bd 32 00 00 00       	mov    ebp,0x32
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:748
                                                    goto rewait;
 1001417:	eb ba                	jmp    10013d3 <ahci_port_activate_device+0x252>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:750
                                    }
                                    if (wc) {
 1001419:	85 f6                	test   esi,esi
 100141b:	74 1e                	je     100143b <ahci_port_activate_device+0x2ba>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:752
                                                    /* reset */
                                                    p->sctl.DET = 1;
 100141d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 1001420:	83 e0 f0             	and    eax,0xfffffff0
 1001423:	83 c8 01             	or     eax,0x1
 1001426:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:753
                                                    waitTicks(100);
 1001429:	83 ec 0c             	sub    esp,0xc
 100142c:	6a 64                	push   0x64
 100142e:	e8 b2 91 00 00       	call   100a5e5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:754
                                                    goto next_step;
 1001433:	83 c4 10             	add    esp,0x10
 1001436:	e9 47 ff ff ff       	jmp    1001382 <ahci_port_activate_device+0x201>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:757
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
 100143b:	83 ec 04             	sub    esp,0x4
 100143e:	57                   	push   edi
 100143f:	68 f4 94 02 01       	push   0x10294f4
 1001444:	68 00 20 00 00       	push   0x2000
 1001449:	e8 a9 87 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:760
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
 100144e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
 1001451:	c1 e8 08             	shr    eax,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
 1001454:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
 1001457:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
 100145a:	83 e1 07             	and    ecx,0x7
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
 100145d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
 1001460:	83 e2 01             	and    edx,0x1
 1001463:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
 1001466:	83 c4 0c             	add    esp,0xc
 1001469:	50                   	push   eax
 100146a:	51                   	push   ecx
 100146b:	52                   	push   edx
 100146c:	56                   	push   esi
 100146d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
 1001470:	50                   	push   eax
 1001471:	68 c2 30 04 01       	push   0x10430c2
 1001476:	68 00 20 00 00       	push   0x2000
 100147b:	e8 77 87 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:761
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
                    return;
 1001480:	83 c4 20             	add    esp,0x20
 1001483:	eb 60                	jmp    10014e5 <ahci_port_activate_device+0x364>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:762
    } else if ((p->ssts & 0x7) == 4/*?*/) {
 1001485:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 1001488:	83 e0 07             	and    eax,0x7
 100148b:	83 f8 04             	cmp    eax,0x4
 100148e:	75 1a                	jne    10014aa <ahci_port_activate_device+0x329>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:764
                    /* just deactivated */
                    printd(DEBUG_AHCI,"PHY offline mode\n");
 1001490:	83 ec 08             	sub    esp,0x8
 1001493:	68 db 30 04 01       	push   0x10430db
 1001498:	68 00 20 00 00       	push   0x2000
 100149d:	e8 55 87 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:765
                    goto activ;
 10014a2:	83 c4 10             	add    esp,0x10
 10014a5:	e9 0d ff ff ff       	jmp    10013b7 <ahci_port_activate_device+0x236>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:766
    } else if ((p->ssts & 0x7) == 5/*DET_PRESENT_NO_PHY*/) {
 10014aa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
 10014ad:	83 e0 07             	and    eax,0x7
 10014b0:	83 f8 05             	cmp    eax,0x5
 10014b3:	75 1a                	jne    10014cf <ahci_port_activate_device+0x34e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:767
                    printd(DEBUG_AHCI,"PRESENT_NO_PHY mode\n");
 10014b5:	83 ec 08             	sub    esp,0x8
 10014b8:	68 ed 30 04 01       	push   0x10430ed
 10014bd:	68 00 20 00 00       	push   0x2000
 10014c2:	e8 30 87 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:768
                    goto activ; /* try the same */
 10014c7:	83 c4 10             	add    esp,0x10
 10014ca:	e9 e8 fe ff ff       	jmp    10013b7 <ahci_port_activate_device+0x236>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:772
    }
exit:
                    /* we're really done */
                    printd(DEBUG_AHCI,"Not present at port %d\n", p - h->ports);
 10014cf:	83 ec 04             	sub    esp,0x4
 10014d2:	57                   	push   edi
 10014d3:	68 02 31 04 01       	push   0x1043102
 10014d8:	68 00 20 00 00       	push   0x2000
 10014dd:	e8 15 87 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:773
                    return;
 10014e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:774
}
 10014e5:	83 c4 0c             	add    esp,0xc
 10014e8:	5b                   	pop    ebx
 10014e9:	5e                   	pop    esi
 10014ea:	5f                   	pop    edi
 10014eb:	5d                   	pop    ebp
 10014ec:	c3                   	ret    

010014ed <ahci_enable_port>:
ahci_enable_port():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:777

void ahci_enable_port(HBA_MEM* ad, int pt)
{
 10014ed:	55                   	push   ebp
 10014ee:	57                   	push   edi
 10014ef:	56                   	push   esi
 10014f0:	53                   	push   ebx
 10014f1:	83 ec 1c             	sub    esp,0x1c
 10014f4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
 10014f8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:782
        HBA_PORT* p = &ad->ports[pt];
        int reset_ct = 0;
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
 10014fc:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
 10014ff:	b8 01 00 00 00       	mov    eax,0x1
 1001504:	89 f1                	mov    ecx,esi
 1001506:	d3 e0                	shl    eax,cl
 1001508:	85 d0                	test   eax,edx
 100150a:	0f 84 23 02 00 00    	je     1001733 <ahci_enable_port+0x246>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:778
                    return;
}

void ahci_enable_port(HBA_MEM* ad, int pt)
{
        HBA_PORT* p = &ad->ports[pt];
 1001510:	8d 46 02             	lea    eax,[esi+0x2]
 1001513:	c1 e0 07             	shl    eax,0x7
 1001516:	01 f8                	add    eax,edi
 1001518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
 100151c:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:787
        if (!(ad->pi & (1 << pt)))
                return;
 
Pos1:
        /* clear old data */
        p->serr.AsUlong = 0xffffffff; /* 10.1.2 -> 6. */
 1001521:	89 f3                	mov    ebx,esi
 1001523:	c1 e3 07             	shl    ebx,0x7
 1001526:	01 fb                	add    ebx,edi
 1001528:	c7 83 30 01 00 00 ff 	mov    DWORD PTR [ebx+0x130],0xffffffff
 100152f:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:788
        p->pxis.AsUlong = 0xffffffff; /* clear all pending interrupts */
 1001532:	c7 83 10 01 00 00 ff 	mov    DWORD PTR [ebx+0x110],0xffffffff
 1001539:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:791
 
        /* first allow for the reception of FISes */
        p->cmd.FRE = 1;
 100153c:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
 1001542:	83 c8 10             	or     eax,0x10
 1001545:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:792
        wait(20); /* wait for BSY to show up */
 100154b:	83 ec 0c             	sub    esp,0xc
 100154e:	6a 14                	push   0x14
 1001550:	e8 a3 90 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:794
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
 1001555:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:795
                if (sts & 1) {
 100155b:	0f b6 c2             	movzx  eax,dl
 100155e:	83 c4 10             	add    esp,0x10
 1001561:	a8 01                	test   al,0x1
 1001563:	75 0d                	jne    1001572 <ahci_enable_port+0x85>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:817
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
 1001565:	a8 88                	test   al,0x88
 1001567:	0f 85 b0 00 00 00    	jne    100161d <ahci_enable_port+0x130>
 100156d:	e9 ca 00 00 00       	jmp    100163c <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:797
        wait(20); /* wait for BSY to show up */
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
                if (sts & 1) {
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
 1001572:	80 fa 7f             	cmp    dl,0x7f
 1001575:	0f 84 c1 00 00 00    	je     100163c <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:799
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
 100157b:	80 fa 41             	cmp    dl,0x41
 100157e:	75 06                	jne    1001586 <ahci_enable_port+0x99>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:799 (discriminator 1)
 1001580:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:804
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
                                " while starting up.\n", pt, p->tfd.ERR);
 1001586:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:803
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
 100158c:	83 ec 04             	sub    esp,0x4
 100158f:	83 e0 01             	and    eax,0x1
 1001592:	50                   	push   eax
 1001593:	56                   	push   esi
 1001594:	68 20 95 02 01       	push   0x1029520
 1001599:	e8 41 86 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:805
                                " while starting up.\n", pt, p->tfd.ERR);
                        printd(DEBUG_AHCI,"AHCI: scr1: %x %x\n", p->serr.AsUlong, p->tfd.ERR);
 100159e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
 10015a4:	8b 93 30 01 00 00    	mov    edx,DWORD PTR [ebx+0x130]
 10015aa:	83 e0 01             	and    eax,0x1
 10015ad:	50                   	push   eax
 10015ae:	52                   	push   edx
 10015af:	68 1a 31 04 01       	push   0x104311a
 10015b4:	68 00 20 00 00       	push   0x2000
 10015b9:	e8 39 86 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:806
                        printd(DEBUG_AHCI,"AHCI: tfd: %x %x\n", p->tfd.AsUchar, p->tfd.ERR);
 10015be:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
 10015c4:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
 10015ca:	83 c4 20             	add    esp,0x20
 10015cd:	83 e0 01             	and    eax,0x1
 10015d0:	50                   	push   eax
 10015d1:	52                   	push   edx
 10015d2:	68 2d 31 04 01       	push   0x104312d
 10015d7:	68 00 20 00 00       	push   0x2000
 10015dc:	e8 16 86 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:807
                        p->serr.AsUlong = 0xffffffff;
 10015e1:	c7 83 30 01 00 00 ff 	mov    DWORD PTR [ebx+0x130],0xffffffff
 10015e8:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:808
                        if (!reset_ct++) {
 10015eb:	83 c5 01             	add    ebp,0x1
 10015ee:	83 c4 10             	add    esp,0x10
 10015f1:	83 fd 01             	cmp    ebp,0x1
 10015f4:	75 15                	jne    100160b <ahci_enable_port+0x11e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:809
                                ahci_port_activate_device(ad, p);
 10015f6:	83 ec 08             	sub    esp,0x8
 10015f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 10015fd:	57                   	push   edi
 10015fe:	e8 7e fb ff ff       	call   1001181 <ahci_port_activate_device>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:810
                                goto Pos1;
 1001603:	83 c4 10             	add    esp,0x10
 1001606:	e9 1d ff ff ff       	jmp    1001528 <ahci_enable_port+0x3b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:811
                        } else if (reset_ct == 1) {
 100160b:	83 fd 01             	cmp    ebp,0x1
 100160e:	0f 84 14 ff ff ff    	je     1001528 <ahci_enable_port+0x3b>
 1001614:	e9 f5 00 00 00       	jmp    100170e <ahci_enable_port+0x221>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:817
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
 1001619:	a8 88                	test   al,0x88
 100161b:	74 1f                	je     100163c <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:819
                        break;
                wait(50);
 100161d:	83 ec 0c             	sub    esp,0xc
 1001620:	6a 32                	push   0x32
 1001622:	e8 d1 8f 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:794
 
        /* first allow for the reception of FISes */
        p->cmd.FRE = 1;
        wait(20); /* wait for BSY to show up */
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
 1001627:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:795
                if (sts & 1) {
 100162d:	0f b6 c2             	movzx  eax,dl
 1001630:	83 c4 10             	add    esp,0x10
 1001633:	a8 01                	test   al,0x1
 1001635:	74 e2                	je     1001619 <ahci_enable_port+0x12c>
 1001637:	e9 36 ff ff ff       	jmp    1001572 <ahci_enable_port+0x85>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:823
                        break;
                wait(50);
        }
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
 100163c:	89 f0                	mov    eax,esi
 100163e:	c1 e0 07             	shl    eax,0x7
 1001641:	01 f8                	add    eax,edi
 1001643:	8b 80 28 01 00 00    	mov    eax,DWORD PTR [eax+0x128]
 1001649:	83 e0 07             	and    eax,0x7
 100164c:	83 f8 03             	cmp    eax,0x3
 100164f:	74 10                	je     1001661 <ahci_enable_port+0x174>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:824
                ahci_port_activate_device(ad, p);
 1001651:	83 ec 08             	sub    esp,0x8
 1001654:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1001658:	57                   	push   edi
 1001659:	e8 23 fb ff ff       	call   1001181 <ahci_port_activate_device>
 100165e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:825
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
 1001661:	89 f0                	mov    eax,esi
 1001663:	c1 e0 07             	shl    eax,0x7
 1001666:	01 f8                	add    eax,edi
 1001668:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
 100166e:	a8 88                	test   al,0x88
 1001670:	0f 85 98 00 00 00    	jne    100170e <ahci_enable_port+0x221>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:827
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
 1001676:	89 f0                	mov    eax,esi
 1001678:	c1 e0 07             	shl    eax,0x7
 100167b:	01 f8                	add    eax,edi
 100167d:	8b 80 28 01 00 00    	mov    eax,DWORD PTR [eax+0x128]
 1001683:	83 e0 07             	and    eax,0x7
 1001686:	83 f8 03             	cmp    eax,0x3
 1001689:	74 4b                	je     10016d6 <ahci_enable_port+0x1e9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:827 (discriminator 1)
 100168b:	89 f0                	mov    eax,esi
 100168d:	c1 e0 07             	shl    eax,0x7
 1001690:	8d 84 07 20 01 00 00 	lea    eax,[edi+eax*1+0x120]
 1001697:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
 100169a:	c1 e8 08             	shr    eax,0x8
 100169d:	83 e0 0f             	and    eax,0xf
 10016a0:	3c 02                	cmp    al,0x2
 10016a2:	74 32                	je     10016d6 <ahci_enable_port+0x1e9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:828 (discriminator 2)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
 10016a4:	89 f0                	mov    eax,esi
 10016a6:	c1 e0 07             	shl    eax,0x7
 10016a9:	8d 84 07 20 01 00 00 	lea    eax,[edi+eax*1+0x120]
 10016b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
 10016b3:	c1 e8 08             	shr    eax,0x8
 10016b6:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:827 (discriminator 2)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
 10016b9:	3c 06                	cmp    al,0x6
 10016bb:	74 19                	je     10016d6 <ahci_enable_port+0x1e9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:828 (discriminator 3)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
 10016bd:	89 f0                	mov    eax,esi
 10016bf:	c1 e0 07             	shl    eax,0x7
 10016c2:	8d 84 07 20 01 00 00 	lea    eax,[edi+eax*1+0x120]
 10016c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
 10016cc:	c1 e8 08             	shr    eax,0x8
 10016cf:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:827 (discriminator 3)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
 10016d2:	3c 08                	cmp    al,0x8
 10016d4:	75 38                	jne    100170e <ahci_enable_port+0x221>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:831
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
        /* we're allowed so set it */
        p->cmd.ST = 1;
 10016d6:	89 f0                	mov    eax,esi
 10016d8:	c1 e0 07             	shl    eax,0x7
 10016db:	01 c7                	add    edi,eax
 10016dd:	8b 87 18 01 00 00    	mov    eax,DWORD PTR [edi+0x118]
 10016e3:	83 c8 01             	or     eax,0x1
 10016e6:	89 87 18 01 00 00    	mov    DWORD PTR [edi+0x118],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:833
        /* Change in PhyRdy, CPS, TFS.err, PCS, DPS(I=1), UFS, HBFS, HBDS, IFS */
        p->ie.AsUlong = (1 << 22) | (1 << 6) | (1 << 31) | (1 << 30)
 10016ec:	c7 87 14 01 00 00 70 	mov    DWORD PTR [edi+0x114],0xf8400070
 10016f3:	00 40 f8 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:839
                | (1 << 5) | (1 << 4) | (1 << 29) | (1 << 28) | (1 << 27);
 
        ///* issue the IDENTIFY_(PACKET)_DEVICE command */
        //ahci_issue_command(ad, pt, 0, disk_cmd_identify, 0, 0, NULL, NULL /* wq_worker_ad*/);
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
 10016f6:	83 ec 04             	sub    esp,0x4
 10016f9:	56                   	push   esi
 10016fa:	68 58 95 02 01       	push   0x1029558
 10016ff:	68 00 20 00 00       	push   0x2000
 1001704:	e8 ee 84 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:840
        return;
 1001709:	83 c4 10             	add    esp,0x10
 100170c:	eb 25                	jmp    1001733 <ahci_enable_port+0x246>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:843
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
 100170e:	83 ec 04             	sub    esp,0x4
 1001711:	56                   	push   esi
 1001712:	68 84 95 02 01       	push   0x1029584
 1001717:	68 00 20 00 00       	push   0x2000
 100171c:	e8 d6 84 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:844
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
 1001721:	c1 e6 07             	shl    esi,0x7
 1001724:	01 f7                	add    edi,esi
 1001726:	c7 87 14 01 00 00 40 	mov    DWORD PTR [edi+0x114],0x80400040
 100172d:	00 40 80 
 1001730:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:845
}
 1001733:	83 c4 1c             	add    esp,0x1c
 1001736:	5b                   	pop    ebx
 1001737:	5e                   	pop    esi
 1001738:	5f                   	pop    edi
 1001739:	5d                   	pop    ebp
 100173a:	c3                   	ret    

0100173b <ahciProbePorts>:
ahciProbePorts():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:239
    if (waitMS == 0)
        return false;
    return true;
}

void ahciProbePorts(HBA_MEM *abar) {
 100173b:	55                   	push   ebp
 100173c:	57                   	push   edi
 100173d:	56                   	push   esi
 100173e:	53                   	push   ebx
 100173f:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:241
    // Search disk in impelemented ports
    uint32_t pi = abar->pi;
 1001742:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
 1001746:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:243
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
 1001749:	a1 00 d0 00 01       	mov    eax,ds:0x100d000
 100174e:	c1 e0 10             	shl    eax,0x10
 1001751:	05 00 30 b1 00       	add    eax,0xb13000
 1001756:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:244
    if (pi > 0)
 100175a:	85 ed                	test   ebp,ebp
 100175c:	74 1e                	je     100177c <ahciProbePorts+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:245
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
 100175e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
 1001762:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
 1001765:	50                   	push   eax
 1001766:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
 100176a:	68 ac 95 02 01       	push   0x10295ac
 100176f:	68 00 20 00 00       	push   0x2000
 1001774:	e8 7e 84 00 00       	call   1009bf7 <printd>
 1001779:	83 c4 10             	add    esp,0x10
 100177c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
 1001780:	8d b0 00 01 00 00    	lea    esi,[eax+0x100]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:239
    if (waitMS == 0)
        return false;
    return true;
}

void ahciProbePorts(HBA_MEM *abar) {
 1001786:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:247
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
    if (pi > 0)
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
    while (i < 32) {
        if (pi & 1) {
 100178b:	f7 c5 01 00 00 00    	test   ebp,0x1
 1001791:	0f 84 39 01 00 00    	je     10018d0 <ahciProbePorts+0x195>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:248
        ahci_enable_port(abar,i);
 1001797:	83 ec 08             	sub    esp,0x8
 100179a:	53                   	push   ebx
 100179b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 100179f:	e8 49 fd ff ff       	call   10014ed <ahci_enable_port>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:250
        //waitForPortIdle(&abar->ports[i]);
            uint32_t sig = 0;
 10017a4:	c7 44 24 2c 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
 10017ab:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:252
            //Get the SATA device signature
            int dt = check_type(&abar->ports[i], &sig);
 10017ac:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
 10017b0:	83 c4 08             	add    esp,0x8
 10017b3:	8d 44 24 24          	lea    eax,[esp+0x24]
 10017b7:	50                   	push   eax
 10017b8:	56                   	push   esi
 10017b9:	e8 a2 ea ff ff       	call   1000260 <check_type>
 10017be:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:253
            printd(DEBUG_AHCI, "AHCI: Checking port %u (0x%08X), sig=%08X\n", i, &abar->ports[i], sig);
 10017c0:	83 c4 04             	add    esp,0x4
 10017c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
 10017c7:	56                   	push   esi
 10017c8:	53                   	push   ebx
 10017c9:	68 e0 95 02 01       	push   0x10295e0
 10017ce:	68 00 20 00 00       	push   0x2000
 10017d3:	e8 1f 84 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:255
            //Found a SATA disk
            if (dt == AHCI_DEV_SATA) {
 10017d8:	83 c4 20             	add    esp,0x20
 10017db:	83 ff 01             	cmp    edi,0x1
 10017de:	75 58                	jne    1001838 <ahciProbePorts+0xfd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:256
                printd(DEBUG_AHCI, "AHCI: SATA drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
 10017e0:	56                   	push   esi
 10017e1:	53                   	push   ebx
 10017e2:	68 0c 96 02 01       	push   0x102960c
 10017e7:	68 00 20 00 00       	push   0x2000
 10017ec:	e8 06 84 00 00       	call   1009bf7 <printd>
 10017f1:	89 d8                	mov    eax,ebx
 10017f3:	c1 e0 07             	shl    eax,0x7
 10017f6:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:257
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
 10017fa:	8b 90 08 01 00 00    	mov    edx,DWORD PTR [eax+0x108]
 1001800:	8b 80 00 01 00 00    	mov    eax,DWORD PTR [eax+0x100]
 1001806:	52                   	push   edx
 1001807:	50                   	push   eax
 1001808:	68 3f 31 04 01       	push   0x104313f
 100180d:	68 00 20 00 00       	push   0x2000
 1001812:	e8 e0 83 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:258
                port_rebase(&abar->ports[i], i, rb);
 1001817:	83 c4 1c             	add    esp,0x1c
 100181a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 100181e:	53                   	push   ebx
 100181f:	56                   	push   esi
 1001820:	e8 72 f1 ff ff       	call   1000997 <port_rebase>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:261
                	//det reset, disable slumber and Partial state
			//reset port, send COMRESET signal
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATA);
 1001825:	83 c4 08             	add    esp,0x8
 1001828:	6a 01                	push   0x1
 100182a:	56                   	push   esi
 100182b:	e8 fc f4 ff ff       	call   1000d2c <ahciIdentify>
 1001830:	83 c4 10             	add    esp,0x10
 1001833:	e9 98 00 00 00       	jmp    10018d0 <ahciProbePorts+0x195>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:271
                    printk("AHCI: Successfully read sector 0 from device to 0x%08X\n",ahciReadBuff);
                    printk("AHCI: Read Buffer: %s\n",ahciReadBuff);
                    printk("sig=0x%08X\n",abar->ports[i].sig);
                }
                 */
            } else if (dt == AHCI_DEV_SATAPI) {
 1001838:	83 ff 04             	cmp    edi,0x4
 100183b:	75 59                	jne    1001896 <ahciProbePorts+0x15b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:272
                printd(DEBUG_AHCI, "AHCI:SATAPI drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
 100183d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
 1001841:	57                   	push   edi
 1001842:	53                   	push   ebx
 1001843:	68 38 96 02 01       	push   0x1029638
 1001848:	68 00 20 00 00       	push   0x2000
 100184d:	e8 a5 83 00 00       	call   1009bf7 <printd>
 1001852:	89 d8                	mov    eax,ebx
 1001854:	c1 e0 07             	shl    eax,0x7
 1001857:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:273
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
 100185b:	8b 90 08 01 00 00    	mov    edx,DWORD PTR [eax+0x108]
 1001861:	8b 80 00 01 00 00    	mov    eax,DWORD PTR [eax+0x100]
 1001867:	52                   	push   edx
 1001868:	50                   	push   eax
 1001869:	68 3f 31 04 01       	push   0x104313f
 100186e:	68 00 20 00 00       	push   0x2000
 1001873:	e8 7f 83 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:274
                port_rebase(&abar->ports[i], i, rb);
 1001878:	83 c4 1c             	add    esp,0x1c
 100187b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 100187f:	53                   	push   ebx
 1001880:	57                   	push   edi
 1001881:	e8 11 f1 ff ff       	call   1000997 <port_rebase>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:276
                //Run an ATA_IDENTIFY
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATAPI);
 1001886:	83 c4 08             	add    esp,0x8
 1001889:	6a 04                	push   0x4
 100188b:	57                   	push   edi
 100188c:	e8 9b f4 ff ff       	call   1000d2c <ahciIdentify>
 1001891:	83 c4 10             	add    esp,0x10
 1001894:	eb 3a                	jmp    10018d0 <ahciProbePorts+0x195>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:277
            } else if (dt == AHCI_DEV_SEMB) {
 1001896:	83 ff 02             	cmp    edi,0x2
 1001899:	75 19                	jne    10018b4 <ahciProbePorts+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:278
                printd(DEBUG_AHCI, "AHCI: SEMB drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
 100189b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
 100189f:	53                   	push   ebx
 10018a0:	68 68 96 02 01       	push   0x1029668
 10018a5:	68 00 20 00 00       	push   0x2000
 10018aa:	e8 48 83 00 00       	call   1009bf7 <printd>
 10018af:	83 c4 10             	add    esp,0x10
 10018b2:	eb 1c                	jmp    10018d0 <ahciProbePorts+0x195>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:280
                //port_rebase(abar->ports,i,rb+=0x10000);
            } else if (dt == AHCI_DEV_PM) {
 10018b4:	83 ff 03             	cmp    edi,0x3
 10018b7:	75 17                	jne    10018d0 <ahciProbePorts+0x195>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:281
                printd(DEBUG_AHCI, "AHCI: PM drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
 10018b9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
 10018bd:	53                   	push   ebx
 10018be:	68 94 96 02 01       	push   0x1029694
 10018c3:	68 00 20 00 00       	push   0x2000
 10018c8:	e8 2a 83 00 00       	call   1009bf7 <printd>
 10018cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:290
            //			{
            //				printk("No drive found at port %d\n", i);
            //			}
        }

        pi >>= 1;
 10018d0:	d1 ed                	shr    ebp,1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:291
        i++;
 10018d2:	83 c3 01             	add    ebx,0x1
 10018d5:	83 ee 80             	sub    esi,0xffffff80
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:246
    uint32_t pi = abar->pi;
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
    if (pi > 0)
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
    while (i < 32) {
 10018d8:	83 fb 20             	cmp    ebx,0x20
 10018db:	0f 85 aa fe ff ff    	jne    100178b <ahciProbePorts+0x50>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:293
        }

        pi >>= 1;
        i++;
    }
}
 10018e1:	83 c4 2c             	add    esp,0x2c
 10018e4:	5b                   	pop    ebx
 10018e5:	5e                   	pop    esi
 10018e6:	5f                   	pop    edi
 10018e7:	5d                   	pop    ebp
 10018e8:	c3                   	ret    

010018e9 <ahciInit>:
ahciInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:603

int ahciBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
    return 0;
}

bool ahciInit() {
 10018e9:	56                   	push   esi
 10018ea:	53                   	push   ebx
 10018eb:	81 ec a8 00 00 00    	sub    esp,0xa8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:604
    kATADeviceInfoCount = 4;
 10018f1:	c7 05 04 98 12 00 04 	mov    DWORD PTR ds:0x129804,0x4
 10018f8:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:608
    bool ahciDeviceFound = false;
    char buffer[150];

    memset(buffer, 0, 150);
 10018fb:	68 96 00 00 00       	push   0x96
 1001900:	6a 00                	push   0x0
 1001902:	8d 44 24 16          	lea    eax,[esp+0x16]
 1001906:	50                   	push   eax
 1001907:	e8 b3 75 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:610

    if (!kPCIDeviceCount) {
 100190c:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1001913:	83 c4 10             	add    esp,0x10
 1001916:	84 c0                	test   al,al
 1001918:	74 16                	je     1001930 <ahciInit+0x47>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:615 (discriminator 1)
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
        return false;
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
 100191a:	be 00 00 00 00       	mov    esi,0x0
 100191f:	bb 00 00 00 00       	mov    ebx,0x0
 1001924:	ba 00 00 00 00       	mov    edx,0x0
 1001929:	75 24                	jne    100194f <ahciInit+0x66>
 100192b:	e9 72 03 00 00       	jmp    1001ca2 <ahciInit+0x3b9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:611
    char buffer[150];

    memset(buffer, 0, 150);

    if (!kPCIDeviceCount) {
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
 1001930:	83 ec 08             	sub    esp,0x8
 1001933:	68 c0 96 02 01       	push   0x10296c0
 1001938:	68 00 20 00 00       	push   0x2000
 100193d:	e8 b5 82 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:612
        return false;
 1001942:	83 c4 10             	add    esp,0x10
 1001945:	b8 00 00 00 00       	mov    eax,0x0
 100194a:	e9 6d 03 00 00       	jmp    1001cbc <ahciInit+0x3d3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:616
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
        if (kPCIDeviceHeaders[cnt].class == 1 && kPCIDeviceHeaders[cnt].subClass == 6) 
 100194f:	89 f0                	mov    eax,esi
 1001951:	03 05 f4 97 12 00    	add    eax,DWORD PTR ds:0x1297f4
 1001957:	83 78 10 01          	cmp    DWORD PTR [eax+0x10],0x1
 100195b:	0f 85 82 01 00 00    	jne    1001ae3 <ahciInit+0x1fa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:616 (discriminator 1)
 1001961:	83 78 14 06          	cmp    DWORD PTR [eax+0x14],0x6
 1001965:	0f 85 78 01 00 00    	jne    1001ae3 <ahciInit+0x1fa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:618
        {
            memcpy(&kPCISATADevice, &kPCIDeviceHeaders[cnt], sizeof (struct pci_device_t));
 100196b:	83 ec 04             	sub    esp,0x4
 100196e:	6a 50                	push   0x50
 1001970:	50                   	push   eax
 1001971:	68 20 98 12 00       	push   0x129820
 1001976:	e8 f5 7c 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:620
            ahciDeviceFound = true;
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (D) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceHeaders[cnt].class, kPCIDeviceHeaders[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
 100197b:	83 c4 08             	add    esp,0x8
 100197e:	8d 44 24 12          	lea    eax,[esp+0x12]
 1001982:	50                   	push   eax
 1001983:	68 20 98 12 00       	push   0x129820
 1001988:	e8 67 07 00 00       	call   10020f4 <getDeviceNameP>
 100198d:	89 f2                	mov    edx,esi
 100198f:	03 15 f4 97 12 00    	add    edx,DWORD PTR ds:0x1297f4
 1001995:	83 c4 08             	add    esp,0x8
 1001998:	50                   	push   eax
 1001999:	ff 72 14             	push   DWORD PTR [edx+0x14]
 100199c:	ff 72 10             	push   DWORD PTR [edx+0x10]
 100199f:	53                   	push   ebx
 10019a0:	68 f4 96 02 01       	push   0x10296f4
 10019a5:	68 00 20 00 00       	push   0x2000
 10019aa:	e8 48 82 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:621
            printd(DEBUG_AHCI, "ABAR is at: before/remapped - 0x%08X/", kPCISATADevice.baseAdd[5]);
 10019af:	83 c4 1c             	add    esp,0x1c
 10019b2:	ff 35 54 98 12 00    	push   DWORD PTR ds:0x129854
 10019b8:	68 2c 97 02 01       	push   0x102972c
 10019bd:	68 00 20 00 00       	push   0x2000
 10019c2:	e8 30 82 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:622
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
 10019c7:	69 05 00 d0 00 01 00 	imul   eax,DWORD PTR ds:0x100d000,0x11000
 10019ce:	10 01 00 
 10019d1:	05 00 30 ad 00       	add    eax,0xad3000
 10019d6:	a3 94 99 12 00       	mov    ds:0x129994,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:623
                kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5] , 0x73); //0x63 + cache disabled
 10019db:	83 c4 0c             	add    esp,0xc
 10019de:	6a 73                	push   0x73
 10019e0:	ff 35 54 98 12 00    	push   DWORD PTR ds:0x129854
 10019e6:	50                   	push   eax
 10019e7:	e8 8f 70 00 00       	call   1008a7b <kMapPage>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:624
                kMapPage(kPCISATADevice.baseAdd[5],kPCISATADevice.baseAdd[5],0x73);
 10019ec:	a1 54 98 12 00       	mov    eax,ds:0x129854
 10019f1:	83 c4 0c             	add    esp,0xc
 10019f4:	6a 73                	push   0x73
 10019f6:	50                   	push   eax
 10019f7:	50                   	push   eax
 10019f8:	e8 7e 70 00 00       	call   1008a7b <kMapPage>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:625
            RELOAD_CR3
 10019fd:	0f 20 d8             	mov    eax,cr3
 1001a00:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:626
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
 1001a03:	a1 00 d0 00 01       	mov    eax,ds:0x100d000
 1001a08:	8d 50 01             	lea    edx,[eax+0x1]
 1001a0b:	89 15 00 d0 00 01    	mov    DWORD PTR ds:0x100d000,edx
 1001a11:	83 c4 0c             	add    esp,0xc
 1001a14:	68 00 11 00 00       	push   0x1100
 1001a19:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001a1f:	69 c0 00 11 00 00    	imul   eax,eax,0x1100
 1001a25:	05 20 e2 06 01       	add    eax,0x106e220
 1001a2a:	50                   	push   eax
 1001a2b:	e8 40 7c 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:627
            printd(DEBUG_AHCI, "0x%08X\n", ahciABAR);
 1001a30:	83 c4 0c             	add    esp,0xc
 1001a33:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001a39:	68 f3 67 06 01       	push   0x10667f3
 1001a3e:	68 00 20 00 00       	push   0x2000
 1001a43:	e8 af 81 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:628
            memcpy(&ahciCaps[ahciCapsCount++], (void*) ahciABAR, sizeof (ahcicaps_t));
 1001a48:	a1 28 99 12 00       	mov    eax,ds:0x129928
 1001a4d:	8d 50 01             	lea    edx,[eax+0x1]
 1001a50:	89 15 28 99 12 00    	mov    DWORD PTR ds:0x129928,edx
 1001a56:	83 c4 0c             	add    esp,0xc
 1001a59:	6a 04                	push   0x4
 1001a5b:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001a61:	8b 15 24 99 12 00    	mov    edx,DWORD PTR ds:0x129924
 1001a67:	8d 04 82             	lea    eax,[edx+eax*4]
 1001a6a:	50                   	push   eax
 1001a6b:	e8 00 7c 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:629
            if (!(ahciABAR->ghc.AE)) {
 1001a70:	a1 94 99 12 00       	mov    eax,ds:0x129994
 1001a75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
 1001a78:	c1 e8 1f             	shr    eax,0x1f
 1001a7b:	83 c4 10             	add    esp,0x10
 1001a7e:	84 c0                	test   al,al
 1001a80:	75 26                	jne    1001aa8 <ahciInit+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:630
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
 1001a82:	83 ec 08             	sub    esp,0x8
 1001a85:	68 5c 31 04 01       	push   0x104315c
 1001a8a:	68 00 20 00 00       	push   0x2000
 1001a8f:	e8 63 81 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:631
                ahciABAR->ghc.AE=1;
 1001a94:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
 1001a9a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
 1001a9d:	0d 00 00 00 80       	or     eax,0x80000000
 1001aa2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
 1001aa5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:633
            }
            ahciABAR->ghc.IE=1;
 1001aa8:	a1 94 99 12 00       	mov    eax,ds:0x129994
 1001aad:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
 1001ab0:	83 ca 02             	or     edx,0x2
 1001ab3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:634
            if (ahciABAR->cap2 & 1) {
 1001ab6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
 1001ab9:	a8 01                	test   al,0x1
 1001abb:	74 10                	je     1001acd <ahciInit+0x1e4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:635
                panic("Write support for BIOS handoff!!!");
 1001abd:	83 ec 0c             	sub    esp,0xc
 1001ac0:	68 54 97 02 01       	push   0x1029754
 1001ac5:	e8 8e 7c 00 00       	call   1009758 <panic>
 1001aca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:637
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
 1001acd:	83 ec 0c             	sub    esp,0xc
 1001ad0:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001ad6:	e8 60 fc ff ff       	call   100173b <ahciProbePorts>
 1001adb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:619

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
        if (kPCIDeviceHeaders[cnt].class == 1 && kPCIDeviceHeaders[cnt].subClass == 6) 
        {
            memcpy(&kPCISATADevice, &kPCIDeviceHeaders[cnt], sizeof (struct pci_device_t));
            ahciDeviceFound = true;
 1001ade:	ba 01 00 00 00       	mov    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:615 (discriminator 2)
    if (!kPCIDeviceCount) {
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
        return false;
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
 1001ae3:	83 c3 01             	add    ebx,0x1
 1001ae6:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1001aed:	83 c6 50             	add    esi,0x50
 1001af0:	39 d8                	cmp    eax,ebx
 1001af2:	0f 8f 57 fe ff ff    	jg     100194f <ahciInit+0x66>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:639 (discriminator 1)
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
 1001af8:	85 c0                	test   eax,eax
 1001afa:	0f 8e 99 01 00 00    	jle    1001c99 <ahciInit+0x3b0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:639
 1001b00:	be 00 00 00 00       	mov    esi,0x0
 1001b05:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:640
        if (kPCIDeviceFunctions[cnt].class == 1 && kPCIDeviceFunctions[cnt].subClass == 6) 
 1001b0a:	89 f0                	mov    eax,esi
 1001b0c:	03 05 fc 97 12 00    	add    eax,DWORD PTR ds:0x1297fc
 1001b12:	83 78 10 01          	cmp    DWORD PTR [eax+0x10],0x1
 1001b16:	0f 85 68 01 00 00    	jne    1001c84 <ahciInit+0x39b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:640 (discriminator 1)
 1001b1c:	83 78 14 06          	cmp    DWORD PTR [eax+0x14],0x6
 1001b20:	0f 85 5e 01 00 00    	jne    1001c84 <ahciInit+0x39b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:642
        {
            memcpy(&kPCISATADevice, &kPCIDeviceFunctions[cnt], sizeof (struct pci_device_t));
 1001b26:	83 ec 04             	sub    esp,0x4
 1001b29:	6a 50                	push   0x50
 1001b2b:	50                   	push   eax
 1001b2c:	68 20 98 12 00       	push   0x129820
 1001b31:	e8 3a 7b 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:644
            ahciDeviceFound = true;
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (F) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceFunctions[cnt].class, kPCIDeviceFunctions[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
 1001b36:	83 c4 08             	add    esp,0x8
 1001b39:	8d 44 24 12          	lea    eax,[esp+0x12]
 1001b3d:	50                   	push   eax
 1001b3e:	68 20 98 12 00       	push   0x129820
 1001b43:	e8 ac 05 00 00       	call   10020f4 <getDeviceNameP>
 1001b48:	89 f2                	mov    edx,esi
 1001b4a:	03 15 fc 97 12 00    	add    edx,DWORD PTR ds:0x1297fc
 1001b50:	83 c4 08             	add    esp,0x8
 1001b53:	50                   	push   eax
 1001b54:	ff 72 14             	push   DWORD PTR [edx+0x14]
 1001b57:	ff 72 10             	push   DWORD PTR [edx+0x10]
 1001b5a:	53                   	push   ebx
 1001b5b:	68 78 97 02 01       	push   0x1029778
 1001b60:	68 00 20 00 00       	push   0x2000
 1001b65:	e8 8d 80 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:645
            printd(DEBUG_AHCI, "ABAR is at: 0x%08X\n", kPCISATADevice.baseAdd[5]);
 1001b6a:	83 c4 1c             	add    esp,0x1c
 1001b6d:	ff 35 54 98 12 00    	push   DWORD PTR ds:0x129854
 1001b73:	68 74 31 04 01       	push   0x1043174
 1001b78:	68 00 20 00 00       	push   0x2000
 1001b7d:	e8 75 80 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:646
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
 1001b82:	69 05 00 d0 00 01 00 	imul   eax,DWORD PTR ds:0x100d000,0x11000
 1001b89:	10 01 00 
 1001b8c:	05 00 30 ad 00       	add    eax,0xad3000
 1001b91:	a3 94 99 12 00       	mov    ds:0x129994,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:647
            kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
 1001b96:	83 c4 0c             	add    esp,0xc
 1001b99:	6a 73                	push   0x73
 1001b9b:	ff 35 54 98 12 00    	push   DWORD PTR ds:0x129854
 1001ba1:	50                   	push   eax
 1001ba2:	e8 d4 6e 00 00       	call   1008a7b <kMapPage>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:648
            RELOAD_CR3
 1001ba7:	0f 20 d8             	mov    eax,cr3
 1001baa:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:649
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
 1001bad:	a1 00 d0 00 01       	mov    eax,ds:0x100d000
 1001bb2:	8d 50 01             	lea    edx,[eax+0x1]
 1001bb5:	89 15 00 d0 00 01    	mov    DWORD PTR ds:0x100d000,edx
 1001bbb:	83 c4 0c             	add    esp,0xc
 1001bbe:	68 00 11 00 00       	push   0x1100
 1001bc3:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001bc9:	69 c0 00 11 00 00    	imul   eax,eax,0x1100
 1001bcf:	05 20 e2 06 01       	add    eax,0x106e220
 1001bd4:	50                   	push   eax
 1001bd5:	e8 96 7a 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:650
            printd(DEBUG_AHCI, "Remapped ABAR is now at: 0x%08X\n", ahciABAR);
 1001bda:	83 c4 0c             	add    esp,0xc
 1001bdd:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001be3:	68 b0 97 02 01       	push   0x10297b0
 1001be8:	68 00 20 00 00       	push   0x2000
 1001bed:	e8 05 80 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:651
            memcpy(&ahciCaps[ahciCapsCount], (void*) ahciABAR, sizeof (ahcicaps_t));
 1001bf2:	83 c4 0c             	add    esp,0xc
 1001bf5:	6a 04                	push   0x4
 1001bf7:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001bfd:	a1 24 99 12 00       	mov    eax,ds:0x129924
 1001c02:	8b 15 28 99 12 00    	mov    edx,DWORD PTR ds:0x129928
 1001c08:	8d 04 90             	lea    eax,[eax+edx*4]
 1001c0b:	50                   	push   eax
 1001c0c:	e8 5f 7a 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:652
            if (!(ahciABAR->ghc.AE)) {
 1001c11:	a1 94 99 12 00       	mov    eax,ds:0x129994
 1001c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
 1001c19:	c1 e8 1f             	shr    eax,0x1f
 1001c1c:	83 c4 10             	add    esp,0x10
 1001c1f:	84 c0                	test   al,al
 1001c21:	75 26                	jne    1001c49 <ahciInit+0x360>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:653
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
 1001c23:	83 ec 08             	sub    esp,0x8
 1001c26:	68 5c 31 04 01       	push   0x104315c
 1001c2b:	68 00 20 00 00       	push   0x2000
 1001c30:	e8 c2 7f 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:654
                ahciABAR->ghc.AE=1;
 1001c35:	8b 15 94 99 12 00    	mov    edx,DWORD PTR ds:0x129994
 1001c3b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
 1001c3e:	0d 00 00 00 80       	or     eax,0x80000000
 1001c43:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
 1001c46:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:656
            }
            ahciABAR->ghc.IE=1;
 1001c49:	a1 94 99 12 00       	mov    eax,ds:0x129994
 1001c4e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
 1001c51:	83 ca 02             	or     edx,0x2
 1001c54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:657
            if (ahciABAR->cap2 & 1) {
 1001c57:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
 1001c5a:	a8 01                	test   al,0x1
 1001c5c:	74 10                	je     1001c6e <ahciInit+0x385>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:658
                panic("Write support for BIOS handoff!!!");
 1001c5e:	83 ec 0c             	sub    esp,0xc
 1001c61:	68 54 97 02 01       	push   0x1029754
 1001c66:	e8 ed 7a 00 00       	call   1009758 <panic>
 1001c6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:660
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
 1001c6e:	83 ec 0c             	sub    esp,0xc
 1001c71:	ff 35 94 99 12 00    	push   DWORD PTR ds:0x129994
 1001c77:	e8 bf fa ff ff       	call   100173b <ahciProbePorts>
 1001c7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:643
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
        if (kPCIDeviceFunctions[cnt].class == 1 && kPCIDeviceFunctions[cnt].subClass == 6) 
        {
            memcpy(&kPCISATADevice, &kPCIDeviceFunctions[cnt], sizeof (struct pci_device_t));
            ahciDeviceFound = true;
 1001c7f:	ba 01 00 00 00       	mov    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:639 (discriminator 2)
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
 1001c84:	83 c3 01             	add    ebx,0x1
 1001c87:	83 c6 50             	add    esi,0x50
 1001c8a:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1001c91:	39 d8                	cmp    eax,ebx
 1001c93:	0f 8f 71 fe ff ff    	jg     1001b0a <ahciInit+0x221>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:668
        printd(DEBUG_AHCI, "AHCI: No AHCI devices found.");
        return false;
    }


    return true;
 1001c99:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:662
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    if (!ahciDeviceFound) {
 1001c9e:	84 d2                	test   dl,dl
 1001ca0:	75 1a                	jne    1001cbc <ahciInit+0x3d3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:663
        printd(DEBUG_AHCI, "AHCI: No AHCI devices found.");
 1001ca2:	83 ec 08             	sub    esp,0x8
 1001ca5:	68 88 31 04 01       	push   0x1043188
 1001caa:	68 00 20 00 00       	push   0x2000
 1001caf:	e8 43 7f 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:664
        return false;
 1001cb4:	83 c4 10             	add    esp,0x10
 1001cb7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/ahci.c:669
    }


    return true;
}
 1001cbc:	81 c4 a4 00 00 00    	add    esp,0xa4
 1001cc2:	5b                   	pop    ebx
 1001cc3:	5e                   	pop    esi
 1001cc4:	c3                   	ret    
 1001cc5:	66 90                	xchg   ax,ax
 1001cc7:	90                   	nop

01001cc8 <pciConfigReadWord>:
pciConfigReadWord():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:90
}

//struct pci_device_id* pci_deviceList = (struct pci_device_id*)PCI_DEVICE_LIST_ADDRESS;
  uint16_t pciConfigReadWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
 1001cc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
outl():
/home/yogi/src/os/chrisOSKernel/include/io.h:33
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline void outl(unsigned short __port, unsigned int __val)
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
 1001ccc:	89 c8                	mov    eax,ecx
 1001cce:	25 fc 00 00 00       	and    eax,0xfc
 1001cd3:	0d 00 00 00 80       	or     eax,0x80000000
 1001cd8:	89 c2                	mov    edx,eax
 1001cda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
 1001cdf:	c1 e0 08             	shl    eax,0x8
 1001ce2:	09 d0                	or     eax,edx
 1001ce4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
 1001ce9:	c1 e2 0b             	shl    edx,0xb
 1001cec:	09 d0                	or     eax,edx
 1001cee:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
 1001cf3:	c1 e2 10             	shl    edx,0x10
 1001cf6:	09 d0                	or     eax,edx
 1001cf8:	ba f8 0c 00 00       	mov    edx,0xcf8
 1001cfd:	ef                   	out    dx,eax
inl():
/home/yogi/src/os/chrisOSKernel/include/io.h:53
}

static __inline unsigned int inl(unsigned short __port)
{
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
 1001cfe:	ba fc 0c 00 00       	mov    edx,0xcfc
 1001d03:	ed                   	in     eax,dx
pciConfigReadWord():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:105
    /* write out the address */
    outl (0xCF8, address);
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    tmp = (uint16_t)((inl (0xCFC) >> ((offset & 2) * 8)) & 0xffff);
    return (tmp);
 1001d04:	83 e1 02             	and    ecx,0x2
 1001d07:	0f b6 c9             	movzx  ecx,cl
 1001d0a:	c1 e1 03             	shl    ecx,0x3
 1001d0d:	d3 e8                	shr    eax,cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:106
 }
 1001d0f:	c3                   	ret    

01001d10 <pciConfigReadDWord>:
outl():
/home/yogi/src/os/chrisOSKernel/include/io.h:33
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline void outl(unsigned short __port, unsigned int __val)
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
 1001d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1001d14:	25 fc 00 00 00       	and    eax,0xfc
 1001d19:	0d 00 00 00 80       	or     eax,0x80000000
 1001d1e:	89 c2                	mov    edx,eax
 1001d20:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
 1001d25:	c1 e0 08             	shl    eax,0x8
 1001d28:	09 d0                	or     eax,edx
 1001d2a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
 1001d2f:	c1 e2 0b             	shl    edx,0xb
 1001d32:	09 d0                	or     eax,edx
 1001d34:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
 1001d39:	c1 e2 10             	shl    edx,0x10
 1001d3c:	09 d0                	or     eax,edx
 1001d3e:	ba f8 0c 00 00       	mov    edx,0xcf8
 1001d43:	ef                   	out    dx,eax
inl():
/home/yogi/src/os/chrisOSKernel/include/io.h:53
}

static __inline unsigned int inl(unsigned short __port)
{
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
 1001d44:	ba fc 0c 00 00       	mov    edx,0xcfc
 1001d49:	ed                   	in     eax,dx
pciConfigReadDWord():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:128
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    num = inl (0xCFC);
    //return ((num >> 24)) | ((num & 0x0000FF000) << 8) | ((num & 0x00FF0000)>>8) | ((num << 24));
    return num;
 }
 1001d4a:	c3                   	ret    

01001d4b <getVendorLongName>:
getVendorLongName():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:162
    uint32_t subvendor, subdevice;  // Subsystem ID's or PCI_ANY_ID 
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
 1001d4b:	53                   	push   ebx
 1001d4c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:164
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
 1001d4f:	0f b7 5c 24 10       	movzx  ebx,WORD PTR [esp+0x10]
 1001d54:	81 fb 36 1b 00 00    	cmp    ebx,0x1b36
 1001d5a:	74 13                	je     1001d6f <getVendorLongName+0x24>
 1001d5c:	ba 8c 40 02 01       	mov    edx,0x102408c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:163
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
 1001d61:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:164
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
 1001d66:	0f b7 0a             	movzx  ecx,WORD PTR [edx]
 1001d69:	39 d9                	cmp    ecx,ebx
 1001d6b:	75 22                	jne    1001d8f <getVendorLongName+0x44>
 1001d6d:	eb 05                	jmp    1001d74 <getVendorLongName+0x29>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:163
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
 1001d6f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:166
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
 1001d74:	83 ec 08             	sub    esp,0x8
 1001d77:	8d 04 40             	lea    eax,[eax+eax*2]
 1001d7a:	ff 34 85 88 40 02 01 	push   DWORD PTR [eax*4+0x1024088]
 1001d81:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1001d85:	e8 26 7f 00 00       	call   1009cb0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:167
            return;
 1001d8a:	83 c4 10             	add    esp,0x10
 1001d8d:	eb 21                	jmp    1001db0 <getVendorLongName+0x65>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:163 (discriminator 2)
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
 1001d8f:	83 c0 01             	add    eax,0x1
 1001d92:	83 c2 0c             	add    edx,0xc
 1001d95:	3d 21 06 00 00       	cmp    eax,0x621
 1001d9a:	75 ca                	jne    1001d66 <getVendorLongName+0x1b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:169
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
            return;
        }
    strcpy(vendorLongName,"Not Found");
 1001d9c:	83 ec 08             	sub    esp,0x8
 1001d9f:	68 a5 31 04 01       	push   0x10431a5
 1001da4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1001da8:	e8 03 7f 00 00       	call   1009cb0 <strcpy>
 1001dad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:170
}
 1001db0:	83 c4 08             	add    esp,0x8
 1001db3:	5b                   	pop    ebx
 1001db4:	c3                   	ret    

01001db5 <getDeviceName>:
getDeviceName():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:173

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
 1001db5:	56                   	push   esi
 1001db6:	53                   	push   ebx
 1001db7:	83 ec 04             	sub    esp,0x4
 1001dba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1001dbe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
 1001dc2:	b8 00 d6 00 01       	mov    eax,0x100d600
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:174
    for (int cnt=0; cnt<7000;cnt++)
 1001dc7:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:175
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
 1001dcc:	0f b7 08             	movzx  ecx,WORD PTR [eax]
 1001dcf:	39 d9                	cmp    ecx,ebx
 1001dd1:	75 23                	jne    1001df6 <getDeviceName+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:175 (discriminator 1)
 1001dd3:	0f b7 48 02          	movzx  ecx,WORD PTR [eax+0x2]
 1001dd7:	39 f1                	cmp    ecx,esi
 1001dd9:	75 1b                	jne    1001df6 <getDeviceName+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:177
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
 1001ddb:	83 ec 08             	sub    esp,0x8
 1001dde:	8d 04 52             	lea    eax,[edx+edx*2]
 1001de1:	ff 34 85 08 d6 00 01 	push   DWORD PTR [eax*4+0x100d608]
 1001de8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 1001dec:	e8 bf 7e 00 00       	call   1009cb0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:178
            return;
 1001df1:	83 c4 10             	add    esp,0x10
 1001df4:	eb 22                	jmp    1001e18 <getDeviceName+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:174 (discriminator 2)
    strcpy(vendorLongName,"Not Found");
}

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
    for (int cnt=0; cnt<7000;cnt++)
 1001df6:	83 c2 01             	add    edx,0x1
 1001df9:	83 c0 0c             	add    eax,0xc
 1001dfc:	81 fa 58 1b 00 00    	cmp    edx,0x1b58
 1001e02:	75 c8                	jne    1001dcc <getDeviceName+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:180
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
            return;
        }
    strcpy(deviceName,"Not Found");
 1001e04:	83 ec 08             	sub    esp,0x8
 1001e07:	68 a5 31 04 01       	push   0x10431a5
 1001e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 1001e10:	e8 9b 7e 00 00       	call   1009cb0 <strcpy>
 1001e15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:181
}
 1001e18:	83 c4 04             	add    esp,0x4
 1001e1b:	5b                   	pop    ebx
 1001e1c:	5e                   	pop    esi
 1001e1d:	c3                   	ret    

01001e1e <printPCIConfig>:
printPCIConfig():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:26
extern struct pci_bridge_t* kPCIBridgeHeaders;
extern struct pci_device_t* kPCIDeviceFunctions;
extern uint32_t kDebugLevel;

void printPCIConfig()
{
 1001e1e:	55                   	push   ebp
 1001e1f:	57                   	push   edi
 1001e20:	56                   	push   esi
 1001e21:	53                   	push   ebx
 1001e22:	81 ec b4 00 00 00    	sub    esp,0xb4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:30
    char buffer[150];
    int totalCnt=0;
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
 1001e28:	0f b6 15 ec 97 12 00 	movzx  edx,BYTE PTR ds:0x1297ec
 1001e2f:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
 1001e36:	01 d0                	add    eax,edx
 1001e38:	50                   	push   eax
 1001e39:	68 d4 97 02 01       	push   0x10297d4
 1001e3e:	e8 9c 7d 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:31
    puts("Devices:\n");
 1001e43:	c7 04 24 af 31 04 01 	mov    DWORD PTR [esp],0x10431af
 1001e4a:	e8 be 12 00 00       	call   100310d <puts>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:32
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
 1001e4f:	c7 04 24 fc 97 02 01 	mov    DWORD PTR [esp],0x10297fc
 1001e56:	e8 84 7d 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:33
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
 1001e5b:	83 c4 10             	add    esp,0x10
 1001e5e:	80 3d ec 97 12 00 00 	cmp    BYTE PTR ds:0x1297ec,0x0
 1001e65:	0f 84 b7 00 00 00    	je     1001f22 <printPCIConfig+0x104>
 1001e6b:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:40
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //printk("%s",buffer);
        getDeviceName(kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, buffer);
 1001e70:	8d 7c 24 0a          	lea    edi,[esp+0xa]
 1001e74:	8d 34 9b             	lea    esi,[ebx+ebx*4]
 1001e77:	c1 e6 04             	shl    esi,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:37
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
 1001e7a:	89 f0                	mov    eax,esi
 1001e7c:	03 05 f4 97 12 00    	add    eax,DWORD PTR ds:0x1297f4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
 1001e82:	83 ec 08             	sub    esp,0x8
 1001e85:	ff 70 14             	push   DWORD PTR [eax+0x14]
 1001e88:	ff 70 10             	push   DWORD PTR [eax+0x10]
 1001e8b:	0f b7 50 08          	movzx  edx,WORD PTR [eax+0x8]
 1001e8f:	52                   	push   edx
 1001e90:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
 1001e94:	52                   	push   edx
 1001e95:	0f b6 50 3e          	movzx  edx,BYTE PTR [eax+0x3e]
 1001e99:	52                   	push   edx
 1001e9a:	0f b6 50 3d          	movzx  edx,BYTE PTR [eax+0x3d]
 1001e9e:	52                   	push   edx
 1001e9f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
 1001ea3:	52                   	push   edx
 1001ea4:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
 1001ea8:	52                   	push   edx
 1001ea9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 1001eac:	50                   	push   eax
 1001ead:	68 38 98 02 01       	push   0x1029838
 1001eb2:	e8 28 7d 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:40
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //printk("%s",buffer);
        getDeviceName(kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, buffer);
 1001eb7:	03 35 f4 97 12 00    	add    esi,DWORD PTR ds:0x1297f4
 1001ebd:	83 c4 2c             	add    esp,0x2c
 1001ec0:	57                   	push   edi
 1001ec1:	0f b7 46 08          	movzx  eax,WORD PTR [esi+0x8]
 1001ec5:	50                   	push   eax
 1001ec6:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
 1001eca:	50                   	push   eax
 1001ecb:	e8 e5 fe ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:41
        strleft(buffer,28);
 1001ed0:	83 c4 08             	add    esp,0x8
 1001ed3:	6a 1c                	push   0x1c
 1001ed5:	57                   	push   edi
 1001ed6:	e8 f9 7e 00 00       	call   1009dd4 <strleft>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:42
        printk("%s\n",buffer);
 1001edb:	83 c4 08             	add    esp,0x8
 1001ede:	57                   	push   edi
 1001edf:	68 ec 31 04 01       	push   0x10431ec
 1001ee4:	e8 f6 7c 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:43
        totalCnt++;
 1001ee9:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:44
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
 1001eec:	83 c4 10             	add    esp,0x10
 1001eef:	85 db                	test   ebx,ebx
 1001ef1:	7e 1e                	jle    1001f11 <printPCIConfig+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:44 (discriminator 1)
 1001ef3:	e8 8a 11 00 00       	call   1003082 <cursorGetMaxY>
 1001ef8:	89 c1                	mov    ecx,eax
 1001efa:	8d 43 04             	lea    eax,[ebx+0x4]
 1001efd:	99                   	cdq    
 1001efe:	f7 f9                	idiv   ecx
 1001f00:	85 d2                	test   edx,edx
 1001f02:	75 0d                	jne    1001f11 <printPCIConfig+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:45
            pauseDisplay(false);
 1001f04:	83 ec 0c             	sub    esp,0xc
 1001f07:	6a 00                	push   0x0
 1001f09:	e8 3a 76 00 00       	call   1009548 <pauseDisplay>
 1001f0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:33 (discriminator 2)
    int totalCnt=0;
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
 1001f11:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1001f18:	39 d8                	cmp    eax,ebx
 1001f1a:	0f 8f 54 ff ff ff    	jg     1001e74 <printPCIConfig+0x56>
 1001f20:	eb 05                	jmp    1001f27 <printPCIConfig+0x109>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:28
extern uint32_t kDebugLevel;

void printPCIConfig()
{
    char buffer[150];
    int totalCnt=0;
 1001f22:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:47
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
 1001f27:	83 ec 0c             	sub    esp,0xc
 1001f2a:	68 b9 31 04 01       	push   0x10431b9
 1001f2f:	e8 d9 11 00 00       	call   100310d <puts>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:48
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
 1001f34:	83 c4 10             	add    esp,0x10
 1001f37:	80 3d ed 97 12 00 00 	cmp    BYTE PTR ds:0x1297ed,0x0
 1001f3e:	0f 84 cc 00 00 00    	je     1002010 <printPCIConfig+0x1f2>
 1001f44:	89 de                	mov    esi,ebx
 1001f46:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:60
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //strleft(buffer,10);
        //printk("%s",buffer);
//        strleft(buffer,20);
        getDeviceName(kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, buffer);
 1001f4b:	8d 6c 24 0a          	lea    ebp,[esp+0xa]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:55
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
 1001f4f:	8b 15 f8 97 12 00    	mov    edx,DWORD PTR ds:0x1297f8
 1001f55:	8d 04 3a             	lea    eax,[edx+edi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
 1001f58:	83 ec 0c             	sub    esp,0xc
 1001f5b:	0f b6 52 26          	movzx  edx,BYTE PTR [edx+0x26]
 1001f5f:	52                   	push   edx
 1001f60:	0f b6 50 27          	movzx  edx,BYTE PTR [eax+0x27]
 1001f64:	52                   	push   edx
 1001f65:	0f b6 50 28          	movzx  edx,BYTE PTR [eax+0x28]
 1001f69:	52                   	push   edx
 1001f6a:	ff 70 0d             	push   DWORD PTR [eax+0xd]
 1001f6d:	ff 70 09             	push   DWORD PTR [eax+0x9]
 1001f70:	0f b7 50 07          	movzx  edx,WORD PTR [eax+0x7]
 1001f74:	52                   	push   edx
 1001f75:	0f b7 50 05          	movzx  edx,WORD PTR [eax+0x5]
 1001f79:	52                   	push   edx
 1001f7a:	0f b6 50 2b          	movzx  edx,BYTE PTR [eax+0x2b]
 1001f7e:	52                   	push   edx
 1001f7f:	0f b6 50 2a          	movzx  edx,BYTE PTR [eax+0x2a]
 1001f83:	52                   	push   edx
 1001f84:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
 1001f88:	52                   	push   edx
 1001f89:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
 1001f8d:	52                   	push   edx
 1001f8e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 1001f91:	50                   	push   eax
 1001f92:	68 6c 98 02 01       	push   0x102986c
 1001f97:	e8 43 7c 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:60
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //strleft(buffer,10);
        //printk("%s",buffer);
//        strleft(buffer,20);
        getDeviceName(kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, buffer);
 1001f9c:	89 f8                	mov    eax,edi
 1001f9e:	03 05 f8 97 12 00    	add    eax,DWORD PTR ds:0x1297f8
 1001fa4:	83 c4 3c             	add    esp,0x3c
 1001fa7:	55                   	push   ebp
 1001fa8:	0f b7 50 07          	movzx  edx,WORD PTR [eax+0x7]
 1001fac:	52                   	push   edx
 1001fad:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
 1001fb1:	50                   	push   eax
 1001fb2:	e8 fe fd ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:61
        strleft(buffer,28);
 1001fb7:	83 c4 08             	add    esp,0x8
 1001fba:	6a 1c                	push   0x1c
 1001fbc:	55                   	push   ebp
 1001fbd:	e8 12 7e 00 00       	call   1009dd4 <strleft>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:62
        printk("%s\n",buffer);
 1001fc2:	83 c4 08             	add    esp,0x8
 1001fc5:	55                   	push   ebp
 1001fc6:	68 ec 31 04 01       	push   0x10431ec
 1001fcb:	e8 0f 7c 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:63
        totalCnt++;
 1001fd0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:64
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
 1001fd3:	83 c4 10             	add    esp,0x10
 1001fd6:	85 f6                	test   esi,esi
 1001fd8:	7e 1e                	jle    1001ff8 <printPCIConfig+0x1da>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:64 (discriminator 1)
 1001fda:	e8 a3 10 00 00       	call   1003082 <cursorGetMaxY>
 1001fdf:	89 c1                	mov    ecx,eax
 1001fe1:	8d 46 04             	lea    eax,[esi+0x4]
 1001fe4:	99                   	cdq    
 1001fe5:	f7 f9                	idiv   ecx
 1001fe7:	85 d2                	test   edx,edx
 1001fe9:	75 0d                	jne    1001ff8 <printPCIConfig+0x1da>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:65
            pauseDisplay(false);
 1001feb:	83 ec 0c             	sub    esp,0xc
 1001fee:	6a 00                	push   0x0
 1001ff0:	e8 53 75 00 00       	call   1009548 <pauseDisplay>
 1001ff5:	83 c4 10             	add    esp,0x10
 1001ff8:	83 c7 4e             	add    edi,0x4e
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:48 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
 1001ffb:	89 f2                	mov    edx,esi
 1001ffd:	29 da                	sub    edx,ebx
 1001fff:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
 1002006:	39 c2                	cmp    edx,eax
 1002008:	0f 8c 41 ff ff ff    	jl     1001f4f <printPCIConfig+0x131>
 100200e:	eb 02                	jmp    1002012 <printPCIConfig+0x1f4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:48
 1002010:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:67
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
 1002012:	83 ec 0c             	sub    esp,0xc
 1002015:	68 c3 31 04 01       	push   0x10431c3
 100201a:	e8 ee 10 00 00       	call   100310d <puts>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:68
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
 100201f:	83 c4 10             	add    esp,0x10
 1002022:	80 3d ee 97 12 00 00 	cmp    BYTE PTR ds:0x1297ee,0x0
 1002029:	0f 84 ba 00 00 00    	je     10020e9 <printPCIConfig+0x2cb>
 100202f:	89 f3                	mov    ebx,esi
 1002031:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:77
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
            //getVendorLongName(kPCIDeviceFunctions[cnt].vendor, buffer);
            //printk("%s",buffer);
            getDeviceName(kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, buffer);
 1002036:	8d 6c 24 0a          	lea    ebp,[esp+0xa]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:74
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
 100203a:	89 f8                	mov    eax,edi
 100203c:	03 05 fc 97 12 00    	add    eax,DWORD PTR ds:0x1297fc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
 1002042:	83 ec 08             	sub    esp,0x8
 1002045:	ff 70 14             	push   DWORD PTR [eax+0x14]
 1002048:	ff 70 10             	push   DWORD PTR [eax+0x10]
 100204b:	0f b7 50 08          	movzx  edx,WORD PTR [eax+0x8]
 100204f:	52                   	push   edx
 1002050:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
 1002054:	52                   	push   edx
 1002055:	0f b6 50 3e          	movzx  edx,BYTE PTR [eax+0x3e]
 1002059:	52                   	push   edx
 100205a:	0f b6 50 3d          	movzx  edx,BYTE PTR [eax+0x3d]
 100205e:	52                   	push   edx
 100205f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
 1002063:	52                   	push   edx
 1002064:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
 1002068:	52                   	push   edx
 1002069:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 100206c:	50                   	push   eax
 100206d:	68 38 98 02 01       	push   0x1029838
 1002072:	e8 68 7b 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:77
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
            //getVendorLongName(kPCIDeviceFunctions[cnt].vendor, buffer);
            //printk("%s",buffer);
            getDeviceName(kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, buffer);
 1002077:	89 f8                	mov    eax,edi
 1002079:	03 05 fc 97 12 00    	add    eax,DWORD PTR ds:0x1297fc
 100207f:	83 c4 2c             	add    esp,0x2c
 1002082:	55                   	push   ebp
 1002083:	0f b7 50 08          	movzx  edx,WORD PTR [eax+0x8]
 1002087:	52                   	push   edx
 1002088:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
 100208c:	50                   	push   eax
 100208d:	e8 23 fd ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:78
            strleft(buffer,28);
 1002092:	83 c4 08             	add    esp,0x8
 1002095:	6a 1c                	push   0x1c
 1002097:	55                   	push   ebp
 1002098:	e8 37 7d 00 00       	call   1009dd4 <strleft>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:79
            printk("%s\n",buffer);
 100209d:	83 c4 08             	add    esp,0x8
 10020a0:	55                   	push   ebp
 10020a1:	68 ec 31 04 01       	push   0x10431ec
 10020a6:	e8 34 7b 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:80
            totalCnt++;
 10020ab:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:81
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
 10020ae:	83 c4 10             	add    esp,0x10
 10020b1:	85 db                	test   ebx,ebx
 10020b3:	7e 1e                	jle    10020d3 <printPCIConfig+0x2b5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:81 (discriminator 1)
 10020b5:	e8 c8 0f 00 00       	call   1003082 <cursorGetMaxY>
 10020ba:	89 c1                	mov    ecx,eax
 10020bc:	8d 43 04             	lea    eax,[ebx+0x4]
 10020bf:	99                   	cdq    
 10020c0:	f7 f9                	idiv   ecx
 10020c2:	85 d2                	test   edx,edx
 10020c4:	75 0d                	jne    10020d3 <printPCIConfig+0x2b5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:82
            pauseDisplay(false);
 10020c6:	83 ec 0c             	sub    esp,0xc
 10020c9:	6a 00                	push   0x0
 10020cb:	e8 78 74 00 00       	call   1009548 <pauseDisplay>
 10020d0:	83 c4 10             	add    esp,0x10
 10020d3:	83 c7 50             	add    edi,0x50
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:68 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
 10020d6:	89 da                	mov    edx,ebx
 10020d8:	29 f2                	sub    edx,esi
 10020da:	0f b6 05 ee 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ee
 10020e1:	39 c2                	cmp    edx,eax
 10020e3:	0f 8c 51 ff ff ff    	jl     100203a <printPCIConfig+0x21c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:85
            totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
        }
    }
}
 10020e9:	81 c4 ac 00 00 00    	add    esp,0xac
 10020ef:	5b                   	pop    ebx
 10020f0:	5e                   	pop    esi
 10020f1:	5f                   	pop    edi
 10020f2:	5d                   	pop    ebp
 10020f3:	c3                   	ret    

010020f4 <getDeviceNameP>:
getDeviceNameP():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:184
        }
    strcpy(deviceName,"Not Found");
}

char* getDeviceNameP(struct pci_device_t* node, char* buffer)
{
 10020f4:	53                   	push   ebx
 10020f5:	83 ec 0c             	sub    esp,0xc
 10020f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 10020fc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:185
    getDeviceName(node->vendor, node->device, buffer);
 1002100:	53                   	push   ebx
 1002101:	0f b7 50 08          	movzx  edx,WORD PTR [eax+0x8]
 1002105:	52                   	push   edx
 1002106:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
 100210a:	50                   	push   eax
 100210b:	e8 a5 fc ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:187
    return buffer;
}
 1002110:	89 d8                	mov    eax,ebx
 1002112:	83 c4 18             	add    esp,0x18
 1002115:	5b                   	pop    ebx
 1002116:	c3                   	ret    

01002117 <getClass>:
getClass():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:190

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
 1002117:	53                   	push   ebx
 1002118:	83 ec 08             	sub    esp,0x8
 100211b:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
 1002120:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
 1002125:	b8 c0 d0 00 01       	mov    eax,0x100d0c0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:192
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
 100212a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:194
    {
        if (PciClassCodeTable[cnt].BaseClass==class && PciClassCodeTable[cnt].SubClass==subClass /*&& PciClassCodeTable[cnt].ProgIf==prog*/ )
 100212f:	38 08                	cmp    BYTE PTR [eax],cl
 1002131:	75 43                	jne    1002176 <getClass+0x5f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:194 (discriminator 1)
 1002133:	38 58 01             	cmp    BYTE PTR [eax+0x1],bl
 1002136:	75 3e                	jne    1002176 <getClass+0x5f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:196
        {
            strcpy(BaseDesc,PciClassCodeTable[cnt].BaseDesc);
 1002138:	83 ec 08             	sub    esp,0x8
 100213b:	c1 e2 04             	shl    edx,0x4
 100213e:	8d 9a c0 d0 00 01    	lea    ebx,[edx+0x100d0c0]
 1002144:	ff b2 c4 d0 00 01    	push   DWORD PTR [edx+0x100d0c4]
 100214a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 100214e:	e8 5d 7b 00 00       	call   1009cb0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:197
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
 1002153:	83 c4 08             	add    esp,0x8
 1002156:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 1002159:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
 100215d:	e8 4e 7b 00 00       	call   1009cb0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:198
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
 1002162:	83 c4 08             	add    esp,0x8
 1002165:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 1002168:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 100216c:	e8 3f 7b 00 00       	call   1009cb0 <strcpy>
 1002171:	83 c4 10             	add    esp,0x10
 1002174:	eb 08                	jmp    100217e <getClass+0x67>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:192 (discriminator 2)
}

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
 1002176:	83 c2 01             	add    edx,0x1
 1002179:	83 c0 10             	add    eax,0x10
 100217c:	eb b1                	jmp    100212f <getClass+0x18>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:206
    }
    strcpy(BaseDesc,notFound);
    strcpy(SubDesc,notFound);
    strcpy(ProgDesc,notFound);
    return;
}
 100217e:	83 c4 08             	add    esp,0x8
 1002181:	5b                   	pop    ebx
 1002182:	c3                   	ret    

01002183 <getDeviceHeader>:
getDeviceHeader():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:209

bool getDeviceHeader(struct pci_device_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
 1002183:	55                   	push   ebp
 1002184:	57                   	push   edi
 1002185:	56                   	push   esi
 1002186:	53                   	push   ebx
 1002187:	83 ec 38             	sub    esp,0x38
 100218a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
 100218e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
 1002192:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
 1002196:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
 100219a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
 100219e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
 10021a2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:212
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
 10021a6:	0f b6 d2             	movzx  edx,dl
 10021a9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
 10021ad:	0f b6 c9             	movzx  ecx,cl
 10021b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
 10021b4:	0f b6 c0             	movzx  eax,al
 10021b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
 10021bb:	52                   	push   edx
 10021bc:	51                   	push   ecx
 10021bd:	50                   	push   eax
 10021be:	68 b0 98 02 01       	push   0x10298b0
 10021c3:	68 00 01 00 00       	push   0x100
 10021c8:	e8 2a 7a 00 00       	call   1009bf7 <printd>
 10021cd:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
 10021d1:	83 c4 20             	add    esp,0x20
 10021d4:	89 ee                	mov    esi,ebp
 10021d6:	bb 01 00 00 00       	mov    ebx,0x1
 10021db:	eb 06                	jmp    10021e3 <getDeviceHeader+0x60>
 10021dd:	83 c3 01             	add    ebx,0x1
 10021e0:	83 c6 04             	add    esi,0x4
 10021e3:	8d 7b ff             	lea    edi,[ebx-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:216
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
 10021e6:	89 f0                	mov    eax,esi
 10021e8:	2a 44 24 10          	sub    al,BYTE PTR [esp+0x10]
 10021ec:	0f b6 c0             	movzx  eax,al
 10021ef:	50                   	push   eax
 10021f0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
 10021f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 10021f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 10021fc:	e8 0f fb ff ff       	call   1001d10 <pciConfigReadDWord>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:217
        if (value==0xFFFFFFFF)
 1002201:	83 c4 10             	add    esp,0x10
 1002204:	83 f8 ff             	cmp    eax,0xffffffff
 1002207:	0f 84 c6 00 00 00    	je     10022d3 <getDeviceHeader+0x150>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:219
            return false;
        switch(cnt)
 100220d:	83 ff 0f             	cmp    edi,0xf
 1002210:	0f 87 95 00 00 00    	ja     10022ab <getDeviceHeader+0x128>
 1002216:	ff 24 bd 00 40 02 01 	jmp    DWORD PTR [edi*4+0x1024000]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:222
        {
            case 0:
                node->vendor=value;
 100221d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:223
                node->device=value >> 16;
 1002221:	c1 e8 10             	shr    eax,0x10
 1002224:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:224
                break;
 1002228:	eb b3                	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:226
            case 1:
                node->command=value&0xFFFF;
 100222a:	66 89 45 4c          	mov    WORD PTR [ebp+0x4c],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:227
                node->status=value>>16&0xFFFF;
 100222e:	c1 e8 10             	shr    eax,0x10
 1002231:	66 89 45 4a          	mov    WORD PTR [ebp+0x4a],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:228
                break;
 1002235:	eb a6                	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:230
            case 2:
                node->class=value >> 24;
 1002237:	89 c2                	mov    edx,eax
 1002239:	c1 ea 18             	shr    edx,0x18
 100223c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:231
                node->subClass=(value & 0x00FF0000) >> 16;
 100223f:	89 c2                	mov    edx,eax
 1002241:	81 e2 00 00 ff 00    	and    edx,0xff0000
 1002247:	c1 ea 10             	shr    edx,0x10
 100224a:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:232
                node->prog=(value & 0x0000FF00) >> 8;
 100224d:	0f b6 c4             	movzx  eax,ah
 1002250:	88 45 18             	mov    BYTE PTR [ebp+0x18],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:233
                break;
 1002253:	eb 88                	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:235
            case 3:
                node->headerType=(value >> 16) & 0x7f;
 1002255:	89 c2                	mov    edx,eax
 1002257:	c1 ea 10             	shr    edx,0x10
 100225a:	83 e2 7f             	and    edx,0x7f
 100225d:	88 55 03             	mov    BYTE PTR [ebp+0x3],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:236
                node->multiFunction=(value & 0x00800000)==0x00800000;
 1002260:	89 c2                	mov    edx,eax
 1002262:	c1 ea 17             	shr    edx,0x17
 1002265:	83 e2 01             	and    edx,0x1
 1002268:	88 55 04             	mov    BYTE PTR [ebp+0x4],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:237
                node->cacheSize=value&0xFF;
 100226b:	88 45 41             	mov    BYTE PTR [ebp+0x41],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:238
                node->latencyTimer=value>>8;
 100226e:	c1 e8 08             	shr    eax,0x8
 1002271:	88 45 40             	mov    BYTE PTR [ebp+0x40],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:239
                break;
 1002274:	e9 64 ff ff ff       	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:241
            case 4: case 5: case 6: case 7: case 8: case 9:
                node->baseAdd[cnt+1-5]=value;
 1002279:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:242
                break;
 100227c:	eb 2d                	jmp    10022ab <getDeviceHeader+0x128>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:244
            case 11:
                node->subdevice=value >> 16;
 100227e:	89 c2                	mov    edx,eax
 1002280:	c1 ea 10             	shr    edx,0x10
 1002283:	66 89 55 0c          	mov    WORD PTR [ebp+0xc],dx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:245
                node->subvendor=value & 0xFFFF;
 1002287:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:246
                break;
 100228b:	e9 4d ff ff ff       	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:248
            case 12:
                node->expROMAddress=value;
 1002290:	89 45 38             	mov    DWORD PTR [ebp+0x38],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:249
                break;
 1002293:	e9 45 ff ff ff       	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:251
            case 13:
                node->caps = value & 0xFF;
 1002298:	88 45 3c             	mov    BYTE PTR [ebp+0x3c],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:252
                break;
 100229b:	e9 3d ff ff ff       	jmp    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:254
            case 15:
                node->interrupt_line=value&0xFF;
 10022a0:	88 45 3d             	mov    BYTE PTR [ebp+0x3d],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:255
                node->interrupt_pin=(value >> 8)&0xFF;
 10022a3:	c1 e8 08             	shr    eax,0x8
 10022a6:	88 45 3e             	mov    BYTE PTR [ebp+0x3e],al
 10022a9:	eb 09                	jmp    10022b4 <getDeviceHeader+0x131>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:214 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
 10022ab:	83 fb 0f             	cmp    ebx,0xf
 10022ae:	0f 8e 29 ff ff ff    	jle    10021dd <getDeviceHeader+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:259
                node->interrupt_line=value&0xFF;
                node->interrupt_pin=(value >> 8)&0xFF;
                break;
        }
    }
    node->busNo=bus;
 10022b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
 10022b9:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:260
    node->deviceNo=slot;
 10022bc:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
 10022c1:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:261
    node->funcNo=func;
 10022c4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
 10022c9:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:262
    return true;
 10022cc:	b8 01 00 00 00       	mov    eax,0x1
 10022d1:	eb 05                	jmp    10022d8 <getDeviceHeader+0x155>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:218
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
        if (value==0xFFFFFFFF)
            return false;
 10022d3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:263
    }
    node->busNo=bus;
    node->deviceNo=slot;
    node->funcNo=func;
    return true;
}
 10022d8:	83 c4 2c             	add    esp,0x2c
 10022db:	5b                   	pop    ebx
 10022dc:	5e                   	pop    esi
 10022dd:	5f                   	pop    edi
 10022de:	5d                   	pop    ebp
 10022df:	c3                   	ret    

010022e0 <getBridgeHeader>:
getBridgeHeader():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:266

bool getBridgeHeader(struct pci_bridge_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
 10022e0:	55                   	push   ebp
 10022e1:	57                   	push   edi
 10022e2:	56                   	push   esi
 10022e3:	53                   	push   ebx
 10022e4:	83 ec 38             	sub    esp,0x38
 10022e7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
 10022eb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
 10022ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
 10022f3:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
 10022f7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
 10022fb:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
 10022ff:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:269
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
 1002303:	0f b6 fa             	movzx  edi,dl
 1002306:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
 100230a:	0f b6 c9             	movzx  ecx,cl
 100230d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
 1002311:	0f b6 c0             	movzx  eax,al
 1002314:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
 1002318:	57                   	push   edi
 1002319:	51                   	push   ecx
 100231a:	50                   	push   eax
 100231b:	68 d8 98 02 01       	push   0x10298d8
 1002320:	68 00 01 00 00       	push   0x100
 1002325:	e8 cd 78 00 00       	call   1009bf7 <printd>
 100232a:	83 c4 20             	add    esp,0x20
 100232d:	be 01 00 00 00       	mov    esi,0x1
 1002332:	bf 00 00 00 00       	mov    edi,0x0
 1002337:	eb 06                	jmp    100233f <getBridgeHeader+0x5f>
 1002339:	83 c7 04             	add    edi,0x4
 100233c:	83 c6 01             	add    esi,0x1
 100233f:	8d 5e ff             	lea    ebx,[esi-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:273
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
 1002342:	89 f8                	mov    eax,edi
 1002344:	0f b6 c0             	movzx  eax,al
 1002347:	50                   	push   eax
 1002348:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 100234c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1002350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1002354:	e8 b7 f9 ff ff       	call   1001d10 <pciConfigReadDWord>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:274
        if (value==0xFFFFFFFF)
 1002359:	83 c4 10             	add    esp,0x10
 100235c:	83 f8 ff             	cmp    eax,0xffffffff
 100235f:	0f 84 60 01 00 00    	je     10024c5 <getBridgeHeader+0x1e5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:276
            return false;
        switch(cnt)
 1002365:	83 fb 0f             	cmp    ebx,0xf
 1002368:	0f 87 2f 01 00 00    	ja     100249d <getBridgeHeader+0x1bd>
 100236e:	ff 24 9d 40 40 02 01 	jmp    DWORD PTR [ebx*4+0x1024040]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:279
        {
            case 0:
                node->vendor=value;
 1002375:	66 89 45 05          	mov    WORD PTR [ebp+0x5],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:280
                node->device=value >> 16;
 1002379:	c1 e8 10             	shr    eax,0x10
 100237c:	66 89 45 07          	mov    WORD PTR [ebp+0x7],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:281
                break;
 1002380:	eb b7                	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:283
            case 1:
                node->command=value&0xFFFF;
 1002382:	66 89 45 3a          	mov    WORD PTR [ebp+0x3a],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:284
                node->status=value>>16&0xFFFF;
 1002386:	c1 e8 10             	shr    eax,0x10
 1002389:	66 89 45 38          	mov    WORD PTR [ebp+0x38],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:285
                break;
 100238d:	eb aa                	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:287
            case 2:
                node->class=value >> 24;
 100238f:	89 c2                	mov    edx,eax
 1002391:	c1 ea 18             	shr    edx,0x18
 1002394:	89 55 09             	mov    DWORD PTR [ebp+0x9],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:288
                node->subClass=(value & 0x00FF0000) >> 16;
 1002397:	89 c2                	mov    edx,eax
 1002399:	81 e2 00 00 ff 00    	and    edx,0xff0000
 100239f:	c1 ea 10             	shr    edx,0x10
 10023a2:	89 55 0d             	mov    DWORD PTR [ebp+0xd],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:289
                node->prog=(value & 0x0000FF00) >> 8;
 10023a5:	0f b6 c4             	movzx  eax,ah
 10023a8:	88 45 11             	mov    BYTE PTR [ebp+0x11],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:290
                break;
 10023ab:	eb 8c                	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:292
            case 3:
                node->headerType=(value >> 16) & 0x7f;
 10023ad:	89 c2                	mov    edx,eax
 10023af:	c1 ea 10             	shr    edx,0x10
 10023b2:	83 e2 7f             	and    edx,0x7f
 10023b5:	88 55 03             	mov    BYTE PTR [ebp+0x3],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:293
                node->multiFunction=(value & 0x00800000)==0x00800000;
 10023b8:	89 c2                	mov    edx,eax
 10023ba:	c1 ea 17             	shr    edx,0x17
 10023bd:	83 e2 01             	and    edx,0x1
 10023c0:	88 55 04             	mov    BYTE PTR [ebp+0x4],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:294
                node->cacheSize=value&0xFF;
 10023c3:	88 45 2e             	mov    BYTE PTR [ebp+0x2e],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:295
                node->latencyTimer=value>>8;
 10023c6:	c1 e8 08             	shr    eax,0x8
 10023c9:	88 45 2d             	mov    BYTE PTR [ebp+0x2d],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:296
                break;
 10023cc:	e9 68 ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:298
            case 4: 
                node->baseAdd[0]=value;
 10023d1:	89 45 12             	mov    DWORD PTR [ebp+0x12],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:299
                break;
 10023d4:	e9 60 ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:301
            case 5:
                node->baseAdd[1]=value;
 10023d9:	89 45 16             	mov    DWORD PTR [ebp+0x16],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:302
                break;
 10023dc:	e9 58 ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:304
            case 6:
                node->secLatencyTimer=(value>>24);
 10023e1:	89 c2                	mov    edx,eax
 10023e3:	c1 ea 18             	shr    edx,0x18
 10023e6:	88 55 31             	mov    BYTE PTR [ebp+0x31],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:305
                node->subordinateBusNum=(value>>16) & 0xFF;
 10023e9:	89 c2                	mov    edx,eax
 10023eb:	c1 ea 10             	shr    edx,0x10
 10023ee:	88 55 28             	mov    BYTE PTR [ebp+0x28],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:306
                node->secondaryBusNum=(value >> 8) & 0xFF;
 10023f1:	89 c2                	mov    edx,eax
 10023f3:	c1 ea 08             	shr    edx,0x8
 10023f6:	88 55 26             	mov    BYTE PTR [ebp+0x26],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:307
                node->primaryBusNum=value & 0xFF;
 10023f9:	88 45 27             	mov    BYTE PTR [ebp+0x27],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:309
                //printk("pr:se:su %02X:%02X:%02X\n", node->primaryBusNum, node->secondaryBusNum, node->subordinateBusNum);
                break;
 10023fc:	e9 38 ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:311
            case 7:
                node->secStatus=(value>>16);
 1002401:	89 c2                	mov    edx,eax
 1002403:	c1 ea 10             	shr    edx,0x10
 1002406:	66 89 55 3c          	mov    WORD PTR [ebp+0x3c],dx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:312
                node->ioLimit=(value>>8)&0xFF;
 100240a:	0f b6 d4             	movzx  edx,ah
 100240d:	89 55 1e             	mov    DWORD PTR [ebp+0x1e],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:313
                node->ioBase=value&0xFF;
 1002410:	25 ff 00 00 00       	and    eax,0xff
 1002415:	89 45 22             	mov    DWORD PTR [ebp+0x22],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:314
                break;
 1002418:	e9 1c ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:316
            case 8:
                node->memoryLimit=value>>16;
 100241d:	89 c2                	mov    edx,eax
 100241f:	c1 ea 10             	shr    edx,0x10
 1002422:	66 89 55 36          	mov    WORD PTR [ebp+0x36],dx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:317
                node->memoryBase=value;
 1002426:	66 89 45 34          	mov    WORD PTR [ebp+0x34],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:318
                break;
 100242a:	e9 0a ff ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:320
            case 9:
                node->prefMemLimit=value>>16;
 100242f:	89 c2                	mov    edx,eax
 1002431:	c1 ea 10             	shr    edx,0x10
 1002434:	89 55 3e             	mov    DWORD PTR [ebp+0x3e],edx
 1002437:	c7 45 42 00 00 00 00 	mov    DWORD PTR [ebp+0x42],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:321
                node->prefMemBase=value&0xFFFF;
 100243e:	0f b7 c0             	movzx  eax,ax
 1002441:	89 45 46             	mov    DWORD PTR [ebp+0x46],eax
 1002444:	c7 45 4a 00 00 00 00 	mov    DWORD PTR [ebp+0x4a],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:322
                break;
 100244b:	e9 e9 fe ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:324
            case 10:
                node->prefMemLimit|=value<<16;
 1002450:	c1 e0 10             	shl    eax,0x10
 1002453:	09 45 3e             	or     DWORD PTR [ebp+0x3e],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:325
                break;
 1002456:	e9 de fe ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:327
            case 11:
                node->prefMemBase|=value<<16;
 100245b:	c1 e0 10             	shl    eax,0x10
 100245e:	09 45 46             	or     DWORD PTR [ebp+0x46],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:328
                break;
 1002461:	e9 d3 fe ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:330
            case 12:
                node->ioLimit|=(value&0xFFFF0000)>>8;
 1002466:	89 c2                	mov    edx,eax
 1002468:	66 ba 00 00          	mov    dx,0x0
 100246c:	c1 ea 08             	shr    edx,0x8
 100246f:	09 55 1e             	or     DWORD PTR [ebp+0x1e],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:331
                node->ioBase|=value&0xFFFF<<8;
 1002472:	25 00 ff ff 00       	and    eax,0xffff00
 1002477:	09 45 22             	or     DWORD PTR [ebp+0x22],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:332
                break;
 100247a:	e9 ba fe ff ff       	jmp    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:334
            case 13:
                node->caps = value & 0xFF;
 100247f:	88 45 29             	mov    BYTE PTR [ebp+0x29],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:335
                break;
 1002482:	eb 22                	jmp    10024a6 <getBridgeHeader+0x1c6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:337
            case 14:
                node->expROMAddress=value;
 1002484:	89 45 1a             	mov    DWORD PTR [ebp+0x1a],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:338
                break;
 1002487:	eb 1d                	jmp    10024a6 <getBridgeHeader+0x1c6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:340
            case 15:
                node->interrupt_line=value&0xFF;
 1002489:	88 45 2a             	mov    BYTE PTR [ebp+0x2a],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:341
                node->interrupt_pin=(value >> 8)&0xFF;
 100248c:	89 c2                	mov    edx,eax
 100248e:	c1 ea 08             	shr    edx,0x8
 1002491:	88 55 2b             	mov    BYTE PTR [ebp+0x2b],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:342
                node->bridgeControl=(value>>16)&0xFFFF;
 1002494:	c1 e8 10             	shr    eax,0x10
 1002497:	66 89 45 32          	mov    WORD PTR [ebp+0x32],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:343
                break;
 100249b:	eb 09                	jmp    10024a6 <getBridgeHeader+0x1c6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:271 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
 100249d:	83 fe 0d             	cmp    esi,0xd
 10024a0:	0f 8e 93 fe ff ff    	jle    1002339 <getBridgeHeader+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:347
                node->bridgeControl=(value>>16)&0xFFFF;
                break;

        }
    }
    node->busNo=bus;
 10024a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
 10024ab:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:348
    node->deviceNo=slot;
 10024ae:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
 10024b3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:349
    node->funcNo=func;
 10024b6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
 10024bb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:350
    return true;
 10024be:	b8 01 00 00 00       	mov    eax,0x1
 10024c3:	eb 05                	jmp    10024ca <getBridgeHeader+0x1ea>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:275
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
        if (value==0xFFFFFFFF)
            return false;
 10024c5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:351
    }
    node->busNo=bus;
    node->deviceNo=slot;
    node->funcNo=func;
    return true;
}
 10024ca:	83 c4 2c             	add    esp,0x2c
 10024cd:	5b                   	pop    ebx
 10024ce:	5e                   	pop    esi
 10024cf:	5f                   	pop    edi
 10024d0:	5d                   	pop    ebp
 10024d1:	c3                   	ret    

010024d2 <printPCIBridgeHeader>:
printPCIBridgeHeader():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:353
void printPCIBridgeHeader(struct pci_bridge_t* node)
{          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
 10024d2:	55                   	push   ebp
 10024d3:	57                   	push   edi
 10024d4:	56                   	push   esi
 10024d5:	53                   	push   ebx
 10024d6:	81 ec 98 06 00 00    	sub    esp,0x698
 10024dc:	8b 9c 24 ac 06 00 00 	mov    ebx,DWORD PTR [esp+0x6ac]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:356
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
 10024e3:	8d ac 24 b0 00 00 00 	lea    ebp,[esp+0xb0]
 10024ea:	55                   	push   ebp
 10024eb:	8d bc 24 a8 02 00 00 	lea    edi,[esp+0x2a8]
 10024f2:	57                   	push   edi
 10024f3:	8d 84 24 a0 04 00 00 	lea    eax,[esp+0x4a0]
 10024fa:	50                   	push   eax
 10024fb:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
 10024ff:	50                   	push   eax
 1002500:	0f b6 43 09          	movzx  eax,BYTE PTR [ebx+0x9]
 1002504:	50                   	push   eax
 1002505:	e8 0d fc ff ff       	call   1002117 <getClass>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:357
    printk("Bridge:\n");
 100250a:	83 c4 14             	add    esp,0x14
 100250d:	68 cf 31 04 01       	push   0x10431cf
 1002512:	e8 c8 76 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:358
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
 1002517:	c7 04 24 fc 97 02 01 	mov    DWORD PTR [esp],0x10297fc
 100251e:	e8 bc 76 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:364
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
 1002523:	a1 f8 97 12 00       	mov    eax,ds:0x1297f8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
 1002528:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
 100252c:	89 04 24             	mov    DWORD PTR [esp],eax
 100252f:	0f b6 43 27          	movzx  eax,BYTE PTR [ebx+0x27]
 1002533:	50                   	push   eax
 1002534:	0f b6 43 28          	movzx  eax,BYTE PTR [ebx+0x28]
 1002538:	50                   	push   eax
 1002539:	ff 73 0d             	push   DWORD PTR [ebx+0xd]
 100253c:	ff 73 09             	push   DWORD PTR [ebx+0x9]
 100253f:	0f b7 43 07          	movzx  eax,WORD PTR [ebx+0x7]
 1002543:	50                   	push   eax
 1002544:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
 1002548:	50                   	push   eax
 1002549:	0f b6 43 2b          	movzx  eax,BYTE PTR [ebx+0x2b]
 100254d:	50                   	push   eax
 100254e:	0f b6 43 2a          	movzx  eax,BYTE PTR [ebx+0x2a]
 1002552:	50                   	push   eax
 1002553:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
 1002557:	50                   	push   eax
 1002558:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
 100255c:	50                   	push   eax
 100255d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1002560:	50                   	push   eax
 1002561:	68 00 99 02 01       	push   0x1029900
 1002566:	e8 74 76 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:366
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);

    getVendorLongName(node->vendor, tempString);
 100256b:	83 c4 38             	add    esp,0x38
 100256e:	8d 74 24 16          	lea    esi,[esp+0x16]
 1002572:	56                   	push   esi
 1002573:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
 1002577:	50                   	push   eax
 1002578:	e8 ce f7 ff ff       	call   1001d4b <getVendorLongName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:367
    printk("Vendor: %s\t",tempString);
 100257d:	83 c4 08             	add    esp,0x8
 1002580:	56                   	push   esi
 1002581:	68 d8 31 04 01       	push   0x10431d8
 1002586:	e8 54 76 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:368
    getDeviceName(node->vendor, node->device, tempString);
 100258b:	83 c4 0c             	add    esp,0xc
 100258e:	56                   	push   esi
 100258f:	0f b7 43 07          	movzx  eax,WORD PTR [ebx+0x7]
 1002593:	50                   	push   eax
 1002594:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
 1002598:	50                   	push   eax
 1002599:	e8 17 f8 ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:369
    printk("Device: %s\n",tempString);
 100259e:	83 c4 08             	add    esp,0x8
 10025a1:	56                   	push   esi
 10025a2:	68 e4 31 04 01       	push   0x10431e4
 10025a7:	e8 33 76 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:370
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
 10025ac:	55                   	push   ebp
 10025ad:	57                   	push   edi
 10025ae:	8d 84 24 a4 04 00 00 	lea    eax,[esp+0x4a4]
 10025b5:	50                   	push   eax
 10025b6:	68 44 99 02 01       	push   0x1029944
 10025bb:	e8 1f 76 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:371
    printk("Base addresses:\n");
 10025c0:	83 c4 14             	add    esp,0x14
 10025c3:	68 f0 31 04 01       	push   0x10431f0
 10025c8:	e8 12 76 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:373
    for (int cnt=0;cnt<2;cnt++)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
 10025cd:	83 c4 0c             	add    esp,0xc
 10025d0:	ff 73 12             	push   DWORD PTR [ebx+0x12]
 10025d3:	6a 00                	push   0x0
 10025d5:	68 01 32 04 01       	push   0x1043201
 10025da:	e8 00 76 00 00       	call   1009bdf <printk>
 10025df:	83 c4 0c             	add    esp,0xc
 10025e2:	ff 73 16             	push   DWORD PTR [ebx+0x16]
 10025e5:	6a 01                	push   0x1
 10025e7:	68 01 32 04 01       	push   0x1043201
 10025ec:	e8 ee 75 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:374
    printk("IO Base: 0x%04X\tIO Limit: 0x%04X\n",node->ioBase,node->ioLimit);
 10025f1:	83 c4 0c             	add    esp,0xc
 10025f4:	ff 73 1e             	push   DWORD PTR [ebx+0x1e]
 10025f7:	ff 73 22             	push   DWORD PTR [ebx+0x22]
 10025fa:	68 68 99 02 01       	push   0x1029968
 10025ff:	e8 db 75 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:375
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
 1002604:	83 c4 0c             	add    esp,0xc
 1002607:	0f b7 43 38          	movzx  eax,WORD PTR [ebx+0x38]
 100260b:	50                   	push   eax
 100260c:	0f b7 43 3a          	movzx  eax,WORD PTR [ebx+0x3a]
 1002610:	50                   	push   eax
 1002611:	68 8c 99 02 01       	push   0x102998c
 1002616:	e8 c4 75 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:376
}   
 100261b:	81 c4 9c 06 00 00    	add    esp,0x69c
 1002621:	5b                   	pop    ebx
 1002622:	5e                   	pop    esi
 1002623:	5f                   	pop    edi
 1002624:	5d                   	pop    ebp
 1002625:	c3                   	ret    

01002626 <printPCIHeader>:
printPCIHeader():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:379

void printPCIHeader(struct pci_device_t* node)
{
 1002626:	55                   	push   ebp
 1002627:	57                   	push   edi
 1002628:	56                   	push   esi
 1002629:	53                   	push   ebx
 100262a:	81 ec 98 06 00 00    	sub    esp,0x698
 1002630:	8b 9c 24 ac 06 00 00 	mov    ebx,DWORD PTR [esp+0x6ac]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:382
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
 1002637:	8d ac 24 b0 00 00 00 	lea    ebp,[esp+0xb0]
 100263e:	55                   	push   ebp
 100263f:	8d bc 24 a8 02 00 00 	lea    edi,[esp+0x2a8]
 1002646:	57                   	push   edi
 1002647:	8d 84 24 a0 04 00 00 	lea    eax,[esp+0x4a0]
 100264e:	50                   	push   eax
 100264f:	0f b6 43 14          	movzx  eax,BYTE PTR [ebx+0x14]
 1002653:	50                   	push   eax
 1002654:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
 1002658:	50                   	push   eax
 1002659:	e8 b9 fa ff ff       	call   1002117 <getClass>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:386
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
 100265e:	83 c4 14             	add    esp,0x14
 1002661:	68 11 32 04 01       	push   0x1043211
 1002666:	e8 74 75 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:387
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
 100266b:	c7 04 24 fc 97 02 01 	mov    DWORD PTR [esp],0x10297fc
 1002672:	e8 68 75 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:388
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
 1002677:	83 c4 08             	add    esp,0x8
 100267a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
 100267d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
 1002680:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
 1002684:	50                   	push   eax
 1002685:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
 1002689:	50                   	push   eax
 100268a:	0f b6 43 3e          	movzx  eax,BYTE PTR [ebx+0x3e]
 100268e:	50                   	push   eax
 100268f:	0f b6 43 3d          	movzx  eax,BYTE PTR [ebx+0x3d]
 1002693:	50                   	push   eax
 1002694:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
 1002698:	50                   	push   eax
 1002699:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
 100269d:	50                   	push   eax
 100269e:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 10026a1:	50                   	push   eax
 10026a2:	68 b0 99 02 01       	push   0x10299b0
 10026a7:	e8 33 75 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:391
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
                node->subClass);
    getVendorLongName(node->vendor, tempString);
 10026ac:	83 c4 28             	add    esp,0x28
 10026af:	8d 74 24 16          	lea    esi,[esp+0x16]
 10026b3:	56                   	push   esi
 10026b4:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
 10026b8:	50                   	push   eax
 10026b9:	e8 8d f6 ff ff       	call   1001d4b <getVendorLongName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:392
    printk("Vendor: %s\t",tempString);
 10026be:	83 c4 08             	add    esp,0x8
 10026c1:	56                   	push   esi
 10026c2:	68 d8 31 04 01       	push   0x10431d8
 10026c7:	e8 13 75 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:393
    getDeviceName(node->vendor, node->device, tempString);
 10026cc:	83 c4 0c             	add    esp,0xc
 10026cf:	56                   	push   esi
 10026d0:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
 10026d4:	50                   	push   eax
 10026d5:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
 10026d9:	50                   	push   eax
 10026da:	e8 d6 f6 ff ff       	call   1001db5 <getDeviceName>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:394
    printk("Device: %s\n",tempString);
 10026df:	83 c4 08             	add    esp,0x8
 10026e2:	56                   	push   esi
 10026e3:	68 e4 31 04 01       	push   0x10431e4
 10026e8:	e8 f2 74 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:395
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
 10026ed:	55                   	push   ebp
 10026ee:	57                   	push   edi
 10026ef:	8d 84 24 a4 04 00 00 	lea    eax,[esp+0x4a4]
 10026f6:	50                   	push   eax
 10026f7:	68 44 99 02 01       	push   0x1029944
 10026fc:	e8 de 74 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:396
    printk("Base addresses:\n");
 1002701:	83 c4 14             	add    esp,0x14
 1002704:	68 f0 31 04 01       	push   0x10431f0
 1002709:	e8 d1 74 00 00       	call   1009bdf <printk>
 100270e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:397
    for (int cnt=0;cnt<6;cnt++)
 1002711:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:398 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
 1002716:	83 ec 04             	sub    esp,0x4
 1002719:	ff 74 b3 20          	push   DWORD PTR [ebx+esi*4+0x20]
 100271d:	56                   	push   esi
 100271e:	68 01 32 04 01       	push   0x1043201
 1002723:	e8 b7 74 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:397 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<6;cnt++)
 1002728:	83 c6 01             	add    esi,0x1
 100272b:	83 c4 10             	add    esp,0x10
 100272e:	83 fe 06             	cmp    esi,0x6
 1002731:	75 e3                	jne    1002716 <printPCIHeader+0xf0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:399
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("Subsystem: %04X\tSubsys Vendor: %04X\n",node->subdevice,node->subvendor);
 1002733:	83 ec 04             	sub    esp,0x4
 1002736:	0f b7 43 0a          	movzx  eax,WORD PTR [ebx+0xa]
 100273a:	50                   	push   eax
 100273b:	0f b7 43 0c          	movzx  eax,WORD PTR [ebx+0xc]
 100273f:	50                   	push   eax
 1002740:	68 e8 99 02 01       	push   0x10299e8
 1002745:	e8 95 74 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:400
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
 100274a:	83 c4 0c             	add    esp,0xc
 100274d:	0f b7 43 4a          	movzx  eax,WORD PTR [ebx+0x4a]
 1002751:	50                   	push   eax
 1002752:	0f b7 43 4c          	movzx  eax,WORD PTR [ebx+0x4c]
 1002756:	50                   	push   eax
 1002757:	68 8c 99 02 01       	push   0x102998c
 100275c:	e8 7e 74 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:401
    printk("Interrupt Pin/Line: 0x%04X/0x%04X\n",node->interrupt_pin,node->interrupt_line);
 1002761:	83 c4 0c             	add    esp,0xc
 1002764:	0f b6 43 3d          	movzx  eax,BYTE PTR [ebx+0x3d]
 1002768:	50                   	push   eax
 1002769:	0f b6 43 3e          	movzx  eax,BYTE PTR [ebx+0x3e]
 100276d:	50                   	push   eax
 100276e:	68 10 9a 02 01       	push   0x1029a10
 1002773:	e8 67 74 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:402
}
 1002778:	81 c4 9c 06 00 00    	add    esp,0x69c
 100277e:	5b                   	pop    ebx
 100277f:	5e                   	pop    esi
 1002780:	5f                   	pop    edi
 1002781:	5d                   	pop    ebp
 1002782:	c3                   	ret    

01002783 <pciQueryBDF>:
pciQueryBDF():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:131
    //return ((num >> 24)) | ((num & 0x0000FF000) << 8) | ((num & 0x00FF0000)>>8) | ((num << 24));
    return num;
 }

 void pciQueryBDF(uint8_t bus, uint8_t device, uint8_t function)
 {
 1002783:	57                   	push   edi
 1002784:	56                   	push   esi
 1002785:	53                   	push   ebx
 1002786:	81 ec a0 00 00 00    	sub    esp,0xa0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:135
     struct pci_device_t header;
     struct pci_bridge_t bridge;

     printk("Retrieving info for PCI address %02X:%02X:%02X\n",bus,device,function);
 100278c:	0f b6 bc 24 b8 00 00 	movzx  edi,BYTE PTR [esp+0xb8]
 1002793:	00 
 1002794:	0f b6 b4 24 b4 00 00 	movzx  esi,BYTE PTR [esp+0xb4]
 100279b:	00 
 100279c:	0f b6 9c 24 b0 00 00 	movzx  ebx,BYTE PTR [esp+0xb0]
 10027a3:	00 
 10027a4:	57                   	push   edi
 10027a5:	56                   	push   esi
 10027a6:	53                   	push   ebx
 10027a7:	68 34 9a 02 01       	push   0x1029a34
 10027ac:	e8 2e 74 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:136
    if (!getDeviceHeader(&header, bus, device, function))
 10027b1:	57                   	push   edi
 10027b2:	56                   	push   esi
 10027b3:	53                   	push   ebx
 10027b4:	8d 44 24 6c          	lea    eax,[esp+0x6c]
 10027b8:	50                   	push   eax
 10027b9:	e8 c5 f9 ff ff       	call   1002183 <getDeviceHeader>
 10027be:	83 c4 20             	add    esp,0x20
 10027c1:	84 c0                	test   al,al
 10027c3:	75 12                	jne    10027d7 <pciQueryBDF+0x54>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:138
    {
        printk("No device at that address\n");
 10027c5:	83 ec 0c             	sub    esp,0xc
 10027c8:	68 1a 32 04 01       	push   0x104321a
 10027cd:	e8 0d 74 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:139
        return;
 10027d2:	83 c4 10             	add    esp,0x10
 10027d5:	eb 4b                	jmp    1002822 <pciQueryBDF+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:141
    }
    if (header.vendor==0xFFFF)
 10027d7:	66 83 7c 24 56 ff    	cmp    WORD PTR [esp+0x56],0xffff
 10027dd:	75 12                	jne    10027f1 <pciQueryBDF+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:143
    {
        printk("Nothing found at %02X:%02X:%02X\n",bus,device,function);
 10027df:	57                   	push   edi
 10027e0:	56                   	push   esi
 10027e1:	53                   	push   ebx
 10027e2:	68 64 9a 02 01       	push   0x1029a64
 10027e7:	e8 f3 73 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:144
        return;
 10027ec:	83 c4 10             	add    esp,0x10
 10027ef:	eb 31                	jmp    1002822 <pciQueryBDF+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:146
    }
     if (header.class==0x06)
 10027f1:	83 7c 24 60 06       	cmp    DWORD PTR [esp+0x60],0x6
 10027f6:	75 1a                	jne    1002812 <pciQueryBDF+0x8f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:148
     {
         getBridgeHeader(&bridge,bus,device,function);
 10027f8:	57                   	push   edi
 10027f9:	56                   	push   esi
 10027fa:	53                   	push   ebx
 10027fb:	8d 5c 24 0e          	lea    ebx,[esp+0xe]
 10027ff:	53                   	push   ebx
 1002800:	e8 db fa ff ff       	call   10022e0 <getBridgeHeader>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:149
         printPCIBridgeHeader(&bridge);
 1002805:	89 1c 24             	mov    DWORD PTR [esp],ebx
 1002808:	e8 c5 fc ff ff       	call   10024d2 <printPCIBridgeHeader>
 100280d:	83 c4 10             	add    esp,0x10
 1002810:	eb 10                	jmp    1002822 <pciQueryBDF+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:152
     }
     else
         printPCIHeader(&header);
 1002812:	83 ec 0c             	sub    esp,0xc
 1002815:	8d 44 24 5c          	lea    eax,[esp+0x5c]
 1002819:	50                   	push   eax
 100281a:	e8 07 fe ff ff       	call   1002626 <printPCIHeader>
 100281f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:153
 }
 1002822:	81 c4 a0 00 00 00    	add    esp,0xa0
 1002828:	5b                   	pop    ebx
 1002829:	5e                   	pop    esi
 100282a:	5f                   	pop    edi
 100282b:	c3                   	ret    

0100282c <addFunction>:
addFunction():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:404
    printk("Subsystem: %04X\tSubsys Vendor: %04X\n",node->subdevice,node->subvendor);
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
    printk("Interrupt Pin/Line: 0x%04X/0x%04X\n",node->interrupt_pin,node->interrupt_line);
}
void addFunction(struct pci_device_t* node)
{
 100282c:	53                   	push   ebx
 100282d:	83 ec 10             	sub    esp,0x10
 1002830:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:405
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFound function: deviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", node->device, node->vendor, node->class, node->subClass);
 1002834:	ff 73 14             	push   DWORD PTR [ebx+0x14]
 1002837:	ff 73 10             	push   DWORD PTR [ebx+0x10]
 100283a:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
 100283e:	50                   	push   eax
 100283f:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
 1002843:	50                   	push   eax
 1002844:	68 88 9a 02 01       	push   0x1029a88
 1002849:	68 00 01 00 00       	push   0x100
 100284e:	e8 a4 73 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:406
    memcpy(&kPCIDeviceFunctions[kPCIFunctionCount++],node,sizeof(struct pci_bridge_t));
 1002853:	0f b6 05 ee 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ee
 100285a:	8d 50 01             	lea    edx,[eax+0x1]
 100285d:	88 15 ee 97 12 00    	mov    BYTE PTR ds:0x1297ee,dl
 1002863:	83 c4 1c             	add    esp,0x1c
 1002866:	6a 4e                	push   0x4e
 1002868:	53                   	push   ebx
 1002869:	0f b6 c0             	movzx  eax,al
 100286c:	8d 04 80             	lea    eax,[eax+eax*4]
 100286f:	c1 e0 04             	shl    eax,0x4
 1002872:	03 05 fc 97 12 00    	add    eax,DWORD PTR ds:0x1297fc
 1002878:	50                   	push   eax
 1002879:	e8 f2 6d 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:407
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFunction entry created\n");
 100287e:	83 c4 08             	add    esp,0x8
 1002881:	68 35 32 04 01       	push   0x1043235
 1002886:	68 00 01 00 00       	push   0x100
 100288b:	e8 67 73 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:408
}
 1002890:	83 c4 18             	add    esp,0x18
 1002893:	5b                   	pop    ebx
 1002894:	c3                   	ret    

01002895 <addBridge>:
addBridge():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:410
void addBridge(struct pci_device_t* node, uint8_t bus, uint8_t device, uint8_t function)
{
 1002895:	57                   	push   edi
 1002896:	56                   	push   esi
 1002897:	53                   	push   ebx
 1002898:	81 ec a0 00 00 00    	sub    esp,0xa0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:414
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
 100289e:	0f b6 bc 24 bc 00 00 	movzx  edi,BYTE PTR [esp+0xbc]
 10028a5:	00 
 10028a6:	0f b6 b4 24 b8 00 00 	movzx  esi,BYTE PTR [esp+0xb8]
 10028ad:	00 
 10028ae:	0f b6 9c 24 b4 00 00 	movzx  ebx,BYTE PTR [esp+0xb4]
 10028b5:	00 
 10028b6:	57                   	push   edi
 10028b7:	56                   	push   esi
 10028b8:	53                   	push   ebx
 10028b9:	8d 44 24 0e          	lea    eax,[esp+0xe]
 10028bd:	50                   	push   eax
 10028be:	e8 1d fa ff ff       	call   10022e0 <getBridgeHeader>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:415
    if (bridge.vendor==0xFFFF)
 10028c3:	83 c4 10             	add    esp,0x10
 10028c6:	66 83 7c 24 07 ff    	cmp    WORD PTR [esp+0x7],0xffff
 10028cc:	0f 84 ae 00 00 00    	je     1002980 <addBridge+0xeb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:418
        return;
    //         bridge.busNo=bus;bridge.deviceNo=device;bridge.funcNo=function;
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tFound bridge on %02X:%02X:%02X,Cls#%02XpBus#%02X,sBus#%02X,suBus# %02X,MF=%u\n",bus, device, function, bridge.class, bridge.primaryBusNum, bridge.secondaryBusNum, bridge.subordinateBusNum, bridge.multiFunction);
 10028d2:	83 ec 08             	sub    esp,0x8
 10028d5:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
 10028da:	50                   	push   eax
 10028db:	0f b6 44 24 36       	movzx  eax,BYTE PTR [esp+0x36]
 10028e0:	50                   	push   eax
 10028e1:	0f b6 44 24 38       	movzx  eax,BYTE PTR [esp+0x38]
 10028e6:	50                   	push   eax
 10028e7:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
 10028ec:	50                   	push   eax
 10028ed:	ff 74 24 23          	push   DWORD PTR [esp+0x23]
 10028f1:	57                   	push   edi
 10028f2:	56                   	push   esi
 10028f3:	53                   	push   ebx
 10028f4:	68 e0 9a 02 01       	push   0x1029ae0
 10028f9:	68 00 01 00 00       	push   0x100
 10028fe:	e8 f4 72 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:419
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tdeviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", bridge.device, bridge.vendor, bridge.class, bridge.subClass);
 1002903:	83 c4 28             	add    esp,0x28
 1002906:	ff 74 24 17          	push   DWORD PTR [esp+0x17]
 100290a:	ff 74 24 17          	push   DWORD PTR [esp+0x17]
 100290e:	0f b7 44 24 17       	movzx  eax,WORD PTR [esp+0x17]
 1002913:	50                   	push   eax
 1002914:	0f b7 44 24 1d       	movzx  eax,WORD PTR [esp+0x1d]
 1002919:	50                   	push   eax
 100291a:	68 34 9b 02 01       	push   0x1029b34
 100291f:	68 00 01 00 00       	push   0x100
 1002924:	e8 ce 72 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:420
    memcpy(&kPCIBridgeHeaders[kPCIBridgeCount++],&bridge,sizeof(struct pci_bridge_t));
 1002929:	0f b6 05 ed 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ed
 1002930:	8d 50 01             	lea    edx,[eax+0x1]
 1002933:	88 15 ed 97 12 00    	mov    BYTE PTR ds:0x1297ed,dl
 1002939:	83 c4 1c             	add    esp,0x1c
 100293c:	6a 4e                	push   0x4e
 100293e:	8d 54 24 0a          	lea    edx,[esp+0xa]
 1002942:	52                   	push   edx
 1002943:	0f b6 c0             	movzx  eax,al
 1002946:	6b c0 4e             	imul   eax,eax,0x4e
 1002949:	03 05 f8 97 12 00    	add    eax,DWORD PTR ds:0x1297f8
 100294f:	50                   	push   eax
 1002950:	e8 1b 6d 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:421
    memcpy(&newNode,node,sizeof(struct pci_device_t));
 1002955:	83 c4 0c             	add    esp,0xc
 1002958:	6a 50                	push   0x50
 100295a:	ff b4 24 b8 00 00 00 	push   DWORD PTR [esp+0xb8]
 1002961:	8d 44 24 5c          	lea    eax,[esp+0x5c]
 1002965:	50                   	push   eax
 1002966:	e8 05 6d 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:422
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tbridge entry created\n");
 100296b:	83 c4 08             	add    esp,0x8
 100296e:	68 51 32 04 01       	push   0x1043251
 1002973:	68 00 01 00 00       	push   0x100
 1002978:	e8 7a 72 00 00       	call   1009bf7 <printd>
 100297d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:438
//       checkBus(&newNode, bridge.secondaryBusNum);
//#ifndef DEBUG_NONE
//       printd(DEBUG_PCI_DISCOVERY,"Done checking bus %02X\n",bridge.secondaryBusNum);
//#endif
    }
}
 1002980:	81 c4 a0 00 00 00    	add    esp,0xa0
 1002986:	5b                   	pop    ebx
 1002987:	5e                   	pop    esi
 1002988:	5f                   	pop    edi
 1002989:	c3                   	ret    

0100298a <checkFunctions>:
checkFunctions():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:440

void checkFunctions(uint8_t bus, uint8_t device) {
 100298a:	55                   	push   ebp
 100298b:	57                   	push   edi
 100298c:	56                   	push   esi
 100298d:	53                   	push   ebx
 100298e:	83 ec 6c             	sub    esp,0x6c
 1002991:	0f b6 84 24 80 00 00 	movzx  eax,BYTE PTR [esp+0x80]
 1002998:	00 
 1002999:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
 100299d:	0f b6 ac 24 84 00 00 	movzx  ebp,BYTE PTR [esp+0x84]
 10029a4:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:443
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
 10029a5:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:445
    {
        getDeviceHeader(&funcDevice, bus, device, function);
 10029aa:	89 ea                	mov    edx,ebp
 10029ac:	0f b6 fa             	movzx  edi,dl
 10029af:	0f b6 f0             	movzx  esi,al
 10029b2:	0f b6 c3             	movzx  eax,bl
 10029b5:	50                   	push   eax
 10029b6:	57                   	push   edi
 10029b7:	56                   	push   esi
 10029b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
 10029bc:	50                   	push   eax
 10029bd:	e8 c1 f7 ff ff       	call   1002183 <getDeviceHeader>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:446
        if (funcDevice.vendor!=0xFFFF)
 10029c2:	83 c4 10             	add    esp,0x10
 10029c5:	66 83 7c 24 16 ff    	cmp    WORD PTR [esp+0x16],0xffff
 10029cb:	74 23                	je     10029f0 <checkFunctions+0x66>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:448
        {
            funcDevice.busNo=bus;
 10029cd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 10029d2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:449
            funcDevice.deviceNo=device;
 10029d6:	89 e8                	mov    eax,ebp
 10029d8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:450
            funcDevice.funcNo=function;
 10029dc:	88 5c 24 12          	mov    BYTE PTR [esp+0x12],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:451
            addFunction(&funcDevice);
 10029e0:	83 ec 0c             	sub    esp,0xc
 10029e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
 10029e7:	50                   	push   eax
 10029e8:	e8 3f fe ff ff       	call   100282c <addFunction>
 10029ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:443 (discriminator 2)
}

void checkFunctions(uint8_t bus, uint8_t device) {
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
 10029f0:	83 c3 01             	add    ebx,0x1
 10029f3:	83 fb 08             	cmp    ebx,0x8
 10029f6:	75 ba                	jne    10029b2 <checkFunctions+0x28>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:455
            funcDevice.funcNo=function;
            addFunction(&funcDevice);
        }
    }

 }
 10029f8:	83 c4 6c             	add    esp,0x6c
 10029fb:	5b                   	pop    ebx
 10029fc:	5e                   	pop    esi
 10029fd:	5f                   	pop    edi
 10029fe:	5d                   	pop    ebp
 10029ff:	c3                   	ret    

01002a00 <addDevice>:
addDevice():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:458

void addDevice(struct pci_device_t* node)
{
 1002a00:	53                   	push   ebx
 1002a01:	83 ec 14             	sub    esp,0x14
 1002a04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:460
#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\tFound device #%u on %02X:%02X:0, Ven# %04X Dev# %04X Cls# %02X MF=%u\n",kPCIDeviceCount, node->busNo, node->deviceNo, node->vendor, node->device, node->class, node->multiFunction);
 1002a08:	0f b6 43 04          	movzx  eax,BYTE PTR [ebx+0x4]
 1002a0c:	50                   	push   eax
 1002a0d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
 1002a10:	0f b7 43 08          	movzx  eax,WORD PTR [ebx+0x8]
 1002a14:	50                   	push   eax
 1002a15:	0f b7 43 06          	movzx  eax,WORD PTR [ebx+0x6]
 1002a19:	50                   	push   eax
 1002a1a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
 1002a1e:	50                   	push   eax
 1002a1f:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1002a22:	50                   	push   eax
 1002a23:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1002a2a:	50                   	push   eax
 1002a2b:	68 78 9b 02 01       	push   0x1029b78
 1002a30:	68 00 01 00 00       	push   0x100
 1002a35:	e8 bd 71 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:462
#endif
    memcpy(&kPCIDeviceHeaders[kPCIDeviceCount++],node,sizeof(struct pci_device_t));
 1002a3a:	0f b6 05 ec 97 12 00 	movzx  eax,BYTE PTR ds:0x1297ec
 1002a41:	8d 50 01             	lea    edx,[eax+0x1]
 1002a44:	88 15 ec 97 12 00    	mov    BYTE PTR ds:0x1297ec,dl
 1002a4a:	83 c4 2c             	add    esp,0x2c
 1002a4d:	6a 50                	push   0x50
 1002a4f:	53                   	push   ebx
 1002a50:	0f b6 c0             	movzx  eax,al
 1002a53:	8d 04 80             	lea    eax,[eax+eax*4]
 1002a56:	c1 e0 04             	shl    eax,0x4
 1002a59:	03 05 f4 97 12 00    	add    eax,DWORD PTR ds:0x1297f4
 1002a5f:	50                   	push   eax
 1002a60:	e8 0b 6c 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:463
    printd(DEBUG_PCI_DISCOVERY,"\tdevice entry created\n");
 1002a65:	83 c4 08             	add    esp,0x8
 1002a68:	68 6a 32 04 01       	push   0x104326a
 1002a6d:	68 00 01 00 00       	push   0x100
 1002a72:	e8 80 71 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:464
}
 1002a77:	83 c4 18             	add    esp,0x18
 1002a7a:	5b                   	pop    ebx
 1002a7b:	c3                   	ret    

01002a7c <checkDevice>:
checkDevice():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:467

bool checkDevice(struct pci_device_t* node, uint8_t bus, uint8_t device)
{
 1002a7c:	57                   	push   edi
 1002a7d:	56                   	push   esi
 1002a7e:	53                   	push   ebx
 1002a7f:	83 ec 54             	sub    esp,0x54
 1002a82:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
 1002a86:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:471
    int func=0;
    struct pci_device_t newNode;

    memcpy(&newNode,node,sizeof(struct pci_device_t));
 1002a8a:	6a 50                	push   0x50
 1002a8c:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
 1002a90:	8d 7c 24 0c          	lea    edi,[esp+0xc]
 1002a94:	57                   	push   edi
 1002a95:	e8 d6 6b 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:472
    if (getDeviceHeader(&newNode, bus, device, 0))
 1002a9a:	0f b6 db             	movzx  ebx,bl
 1002a9d:	89 f0                	mov    eax,esi
 1002a9f:	0f b6 f0             	movzx  esi,al
 1002aa2:	6a 00                	push   0x0
 1002aa4:	53                   	push   ebx
 1002aa5:	56                   	push   esi
 1002aa6:	57                   	push   edi
 1002aa7:	e8 d7 f6 ff ff       	call   1002183 <getDeviceHeader>
 1002aac:	89 c7                	mov    edi,eax
 1002aae:	83 c4 20             	add    esp,0x20
 1002ab1:	84 c0                	test   al,al
 1002ab3:	74 4a                	je     1002aff <checkDevice+0x83>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:474
    {
        if (newNode.class!=6)
 1002ab5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
 1002aba:	74 12                	je     1002ace <checkDevice+0x52>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:476
        {
            addDevice(&newNode);
 1002abc:	83 ec 0c             	sub    esp,0xc
 1002abf:	8d 44 24 0c          	lea    eax,[esp+0xc]
 1002ac3:	50                   	push   eax
 1002ac4:	e8 37 ff ff ff       	call   1002a00 <addDevice>
 1002ac9:	83 c4 10             	add    esp,0x10
 1002acc:	eb 11                	jmp    1002adf <checkDevice+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:480
        }
        else
        {
            addBridge(&newNode, bus, device,func);
 1002ace:	6a 00                	push   0x0
 1002ad0:	53                   	push   ebx
 1002ad1:	56                   	push   esi
 1002ad2:	8d 44 24 0c          	lea    eax,[esp+0xc]
 1002ad6:	50                   	push   eax
 1002ad7:	e8 b9 fd ff ff       	call   1002895 <addBridge>
 1002adc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:483
        }
#ifndef DEBUG_NONE
        printd(DEBUG_PCI_DISCOVERY,"\tChecking functions\n",device);
 1002adf:	83 ec 04             	sub    esp,0x4
 1002ae2:	53                   	push   ebx
 1002ae3:	68 81 32 04 01       	push   0x1043281
 1002ae8:	68 00 01 00 00       	push   0x100
 1002aed:	e8 05 71 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:485
#endif
        checkFunctions(bus, device);
 1002af2:	83 c4 08             	add    esp,0x8
 1002af5:	53                   	push   ebx
 1002af6:	56                   	push   esi
 1002af7:	e8 8e fe ff ff       	call   100298a <checkFunctions>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:486
        return true;
 1002afc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:489
    }
    return false;
}
 1002aff:	89 f8                	mov    eax,edi
 1002b01:	83 c4 50             	add    esp,0x50
 1002b04:	5b                   	pop    ebx
 1002b05:	5e                   	pop    esi
 1002b06:	5f                   	pop    edi
 1002b07:	c3                   	ret    

01002b08 <checkBus>:
checkBus():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:491

void checkBus(struct pci_device_t* node, uint8_t bus) {
 1002b08:	57                   	push   edi
 1002b09:	56                   	push   esi
 1002b0a:	53                   	push   ebx
 1002b0b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 1002b0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:495
 uint8_t device;

#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\n");
 1002b13:	83 ec 08             	sub    esp,0x8
 1002b16:	68 cc 67 06 01       	push   0x10667cc
 1002b1b:	68 00 01 00 00       	push   0x100
 1002b20:	e8 d2 70 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:496
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
 1002b25:	0f b6 f3             	movzx  esi,bl
 1002b28:	83 c4 0c             	add    esp,0xc
 1002b2b:	56                   	push   esi
 1002b2c:	68 96 32 04 01       	push   0x1043296
 1002b31:	68 00 01 00 00       	push   0x100
 1002b36:	e8 bc 70 00 00       	call   1009bf7 <printd>
 1002b3b:	83 c4 10             	add    esp,0x10
 1002b3e:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:508
        if ((kDebugLevel & DEBUG_PCI_DISCOVERY) == DEBUG_PCI_DISCOVERY)
        {
            //waitForKeyboardKey();
        }
#endif
        checkDevice(node, bus, device);
 1002b43:	83 ec 04             	sub    esp,0x4
 1002b46:	53                   	push   ebx
 1002b47:	56                   	push   esi
 1002b48:	57                   	push   edi
 1002b49:	e8 2e ff ff ff       	call   1002a7c <checkDevice>
 1002b4e:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:500
    printd(DEBUG_PCI_DISCOVERY,"\n");
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
 1002b51:	83 c4 10             	add    esp,0x10
 1002b54:	83 fb 20             	cmp    ebx,0x20
 1002b57:	75 ea                	jne    1002b43 <checkBus+0x3b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:511
        }
#endif
        checkDevice(node, bus, device);
     }
 }
}
 1002b59:	5b                   	pop    ebx
 1002b5a:	5e                   	pop    esi
 1002b5b:	5f                   	pop    edi
 1002b5c:	c3                   	ret    

01002b5d <pciInitialize>:
pciInitialize():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:514
    
 void pciInitialize()
 {
 1002b5d:	55                   	push   ebp
 1002b5e:	57                   	push   edi
 1002b5f:	56                   	push   esi
 1002b60:	53                   	push   ebx
 1002b61:	81 ec c4 00 00 00    	sub    esp,0xc4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:519
    //Iterate Busses/Slots
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
 1002b67:	c6 05 ef 97 12 00 00 	mov    BYTE PTR ds:0x1297ef,0x0
 1002b6e:	c6 05 ee 97 12 00 00 	mov    BYTE PTR ds:0x1297ee,0x0
 1002b75:	c6 05 ed 97 12 00 00 	mov    BYTE PTR ds:0x1297ed,0x0
 1002b7c:	c6 05 ec 97 12 00 00 	mov    BYTE PTR ds:0x1297ec,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:520
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
 1002b83:	68 a9 32 04 01       	push   0x10432a9
 1002b88:	68 00 01 00 00       	push   0x100
 1002b8d:	e8 65 70 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:521
     for (currBus=0;currBus<50;currBus++)
 1002b92:	c7 05 6c 8c 07 01 00 	mov    DWORD PTR ds:0x1078c6c,0x0
 1002b99:	00 00 00 
 1002b9c:	83 c4 10             	add    esp,0x10
 1002b9f:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:529
         {
            //if device found print it
            currFunc=0;
            prevDev=0;
            printd(DEBUG_PCI_DISCOVERY,"Current bus=%u, slot=%u\n",currBus,currSlot);
            if (getDeviceHeader(&device, currBus, currSlot, currFunc)==true)
 1002ba6:	8d 6c 24 60          	lea    ebp,[esp+0x60]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:547
                    addDevice(&device);
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
                {
                    //printd(DEBUG_PCI_DISCOVERY,"Current function=%u\n",currFunc);
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
 1002baa:	8d 74 24 10          	lea    esi,[esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:523

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
     {
         for (currSlot=0;currSlot<32;currSlot++)
 1002bae:	c7 05 68 8c 07 01 00 	mov    DWORD PTR ds:0x1078c68,0x0
 1002bb5:	00 00 00 
 1002bb8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:526
         {
            //if device found print it
            currFunc=0;
 1002bbd:	c7 05 64 8c 07 01 00 	mov    DWORD PTR ds:0x1078c64,0x0
 1002bc4:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:528
            prevDev=0;
            printd(DEBUG_PCI_DISCOVERY,"Current bus=%u, slot=%u\n",currBus,currSlot);
 1002bc7:	50                   	push   eax
 1002bc8:	ff 35 6c 8c 07 01    	push   DWORD PTR ds:0x1078c6c
 1002bce:	68 c7 32 04 01       	push   0x10432c7
 1002bd3:	68 00 01 00 00       	push   0x100
 1002bd8:	e8 1a 70 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:529
            if (getDeviceHeader(&device, currBus, currSlot, currFunc)==true)
 1002bdd:	0f b6 05 64 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c64
 1002be4:	50                   	push   eax
 1002be5:	0f b6 05 68 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c68
 1002bec:	50                   	push   eax
 1002bed:	0f b6 05 6c 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c6c
 1002bf4:	50                   	push   eax
 1002bf5:	55                   	push   ebp
 1002bf6:	e8 88 f5 ff ff       	call   1002183 <getDeviceHeader>
 1002bfb:	83 c4 20             	add    esp,0x20
 1002bfe:	84 c0                	test   al,al
 1002c00:	0f 84 e6 00 00 00    	je     1002cec <pciInitialize+0x18f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:531
            {
                if (prevBus!=currBus)
 1002c06:	a1 6c 8c 07 01       	mov    eax,ds:0x1078c6c
 1002c0b:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
 1002c10:	39 c2                	cmp    edx,eax
 1002c12:	74 0c                	je     1002c20 <pciInitialize+0xc3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:533
                {
                    prevBus=currBus;
 1002c14:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:534
                    kPCIBusCount++;
 1002c19:	80 05 ef 97 12 00 01 	add    BYTE PTR ds:0x1297ef,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:537
                }
                //printPCIHeader(&device);
                if (device.class==0x06)
 1002c20:	83 7c 24 70 06       	cmp    DWORD PTR [esp+0x70],0x6
 1002c25:	75 1f                	jne    1002c46 <pciInitialize+0xe9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:539
                {
                    addBridge(&device, currBus, currSlot, currFunc);
 1002c27:	0f b6 15 64 8c 07 01 	movzx  edx,BYTE PTR ds:0x1078c64
 1002c2e:	52                   	push   edx
 1002c2f:	0f b6 15 68 8c 07 01 	movzx  edx,BYTE PTR ds:0x1078c68
 1002c36:	52                   	push   edx
 1002c37:	0f b6 c0             	movzx  eax,al
 1002c3a:	50                   	push   eax
 1002c3b:	55                   	push   ebp
 1002c3c:	e8 54 fc ff ff       	call   1002895 <addBridge>
 1002c41:	83 c4 10             	add    esp,0x10
 1002c44:	eb 0c                	jmp    1002c52 <pciInitialize+0xf5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:542
                }
                else
                    addDevice(&device);
 1002c46:	83 ec 0c             	sub    esp,0xc
 1002c49:	55                   	push   ebp
 1002c4a:	e8 b1 fd ff ff       	call   1002a00 <addDevice>
 1002c4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:544
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
 1002c52:	c7 05 64 8c 07 01 00 	mov    DWORD PTR ds:0x1078c64,0x0
 1002c59:	00 00 00 
 1002c5c:	b8 00 00 00 00       	mov    eax,0x0
 1002c61:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:547
                {
                    //printd(DEBUG_PCI_DISCOVERY,"Current function=%u\n",currFunc);
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
 1002c66:	0f b6 c0             	movzx  eax,al
 1002c69:	50                   	push   eax
 1002c6a:	0f b6 05 68 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c68
 1002c71:	50                   	push   eax
 1002c72:	0f b6 05 6c 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c6c
 1002c79:	50                   	push   eax
 1002c7a:	56                   	push   esi
 1002c7b:	e8 03 f5 ff ff       	call   1002183 <getDeviceHeader>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:548
                    if (funcDevice.vendor!=0xFFFF)
 1002c80:	83 c4 10             	add    esp,0x10
 1002c83:	66 83 7c 24 16 ff    	cmp    WORD PTR [esp+0x16],0xffff
 1002c89:	74 4b                	je     1002cd6 <pciInitialize+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:549
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
 1002c8b:	0f b7 5c 24 18       	movzx  ebx,WORD PTR [esp+0x18]
 1002c90:	66 39 5c 24 68       	cmp    WORD PTR [esp+0x68],bx
 1002c95:	74 3f                	je     1002cd6 <pciInitialize+0x179>
 1002c97:	66 39 fb             	cmp    bx,di
 1002c9a:	74 3a                	je     1002cd6 <pciInitialize+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:553
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
                            if (funcDevice.class == 0x06)
 1002c9c:	83 7c 24 20 06       	cmp    DWORD PTR [esp+0x20],0x6
 1002ca1:	75 25                	jne    1002cc8 <pciInitialize+0x16b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:554
                                addBridge(&funcDevice, currBus, currSlot, currFunc);
 1002ca3:	0f b6 05 64 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c64
 1002caa:	50                   	push   eax
 1002cab:	0f b6 05 68 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c68
 1002cb2:	50                   	push   eax
 1002cb3:	0f b6 05 6c 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c6c
 1002cba:	50                   	push   eax
 1002cbb:	56                   	push   esi
 1002cbc:	e8 d4 fb ff ff       	call   1002895 <addBridge>
 1002cc1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:552
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
                    if (funcDevice.vendor!=0xFFFF)
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
 1002cc4:	89 df                	mov    edi,ebx
 1002cc6:	eb 0e                	jmp    1002cd6 <pciInitialize+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:556
                            if (funcDevice.class == 0x06)
                                addBridge(&funcDevice, currBus, currSlot, currFunc);
                            else
                                addFunction(&funcDevice);
 1002cc8:	83 ec 0c             	sub    esp,0xc
 1002ccb:	56                   	push   esi
 1002ccc:	e8 5b fb ff ff       	call   100282c <addFunction>
 1002cd1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:552
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
                    if (funcDevice.vendor!=0xFFFF)
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
 1002cd4:	89 df                	mov    edi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:544 (discriminator 2)
                    addBridge(&device, currBus, currSlot, currFunc);
                }
                else
                    addDevice(&device);
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
 1002cd6:	a1 64 8c 07 01       	mov    eax,ds:0x1078c64
 1002cdb:	83 c0 01             	add    eax,0x1
 1002cde:	a3 64 8c 07 01       	mov    ds:0x1078c64,eax
 1002ce3:	83 f8 07             	cmp    eax,0x7
 1002ce6:	0f 8e 7a ff ff ff    	jle    1002c66 <pciInitialize+0x109>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:523 (discriminator 2)

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
     {
         for (currSlot=0;currSlot<32;currSlot++)
 1002cec:	a1 68 8c 07 01       	mov    eax,ds:0x1078c68
 1002cf1:	83 c0 01             	add    eax,0x1
 1002cf4:	a3 68 8c 07 01       	mov    ds:0x1078c68,eax
 1002cf9:	83 f8 1f             	cmp    eax,0x1f
 1002cfc:	0f 8e bb fe ff ff    	jle    1002bbd <pciInitialize+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:521 (discriminator 2)
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
 1002d02:	a1 6c 8c 07 01       	mov    eax,ds:0x1078c6c
 1002d07:	83 c0 01             	add    eax,0x1
 1002d0a:	a3 6c 8c 07 01       	mov    ds:0x1078c6c,eax
 1002d0f:	83 f8 31             	cmp    eax,0x31
 1002d12:	0f 8e 96 fe ff ff    	jle    1002bae <pciInitialize+0x51>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/block/pci.c:563
                    }
            }
 
        }
     }
 1002d18:	81 c4 bc 00 00 00    	add    esp,0xbc
 1002d1e:	5b                   	pop    ebx
 1002d1f:	5e                   	pop    esi
 1002d20:	5f                   	pop    edi
 1002d21:	5d                   	pop    ebp
 1002d22:	c3                   	ret    
 1002d23:	90                   	nop

01002d24 <update_cursor>:
update_cursor():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:26
KERNEL_DATA_SECTION int8_t savedPosPointer=0;
KERNEL_DATA_SECTION uint8_t kTerminalHeight;

void update_cursor()
 {
    unsigned short position=(terminal_row*VGA_WIDTH) + terminal_column;
 1002d24:	8b 0d 00 00 12 00    	mov    ecx,DWORD PTR ds:0x120000
 1002d2a:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
 1002d2d:	c1 e1 04             	shl    ecx,0x4
 1002d30:	66 03 0d 04 00 12 00 	add    cx,WORD PTR ds:0x120004
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1002d37:	ba d4 03 00 00       	mov    edx,0x3d4
 1002d3c:	b8 0f 00 00 00       	mov    eax,0xf
 1002d41:	ee                   	out    dx,al
 1002d42:	ba d5 03 00 00       	mov    edx,0x3d5
 1002d47:	89 c8                	mov    eax,ecx
 1002d49:	ee                   	out    dx,al
 1002d4a:	ba d4 03 00 00       	mov    edx,0x3d4
 1002d4f:	b8 0e 00 00 00       	mov    eax,0xe
 1002d54:	ee                   	out    dx,al
 1002d55:	89 c8                	mov    eax,ecx
 1002d57:	66 c1 e8 08          	shr    ax,0x8
 1002d5b:	ba d5 03 00 00       	mov    edx,0x3d5
 1002d60:	ee                   	out    dx,al
 1002d61:	c3                   	ret    

01002d62 <make_color>:
make_color():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:38
    outb(0x3D5, (unsigned char )((position>>8)&0xFF));
    //Move the cursor in the bios data area
 }

uint8_t make_color(enum vga_color fg, enum vga_color bg) {
        return fg | bg << 4;
 1002d62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
 1002d67:	c1 e0 04             	shl    eax,0x4
 1002d6a:	0a 44 24 04          	or     al,BYTE PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:39
}
 1002d6e:	c3                   	ret    

01002d6f <make_vgaentry>:
make_vgaentry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:44

uint16_t make_vgaentry(char c, uint8_t color) {
        uint16_t c16 = c;
        uint16_t color16 = color;
        return c16 | color16 << 8;
 1002d6f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
 1002d74:	c1 e0 08             	shl    eax,0x8
 1002d77:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
 1002d7d:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:45
}
 1002d7f:	c3                   	ret    

01002d80 <terminal_setcolor>:
terminal_setcolor():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:49


void terminal_setcolor(uint8_t color) {
        terminal_color = color;
 1002d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1002d84:	a2 08 00 12 00       	mov    ds:0x120008,al
 1002d89:	c3                   	ret    

01002d8a <terminal_putentryat>:
terminal_putentryat():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:52
}

void terminal_putentryat(char c, uint8_t color, size_t x, size_t y) {
 1002d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:54
    const size_t index = y * VGA_WIDTH + x;
        terminal_buffer[index] = make_vgaentry(c, color);
 1002d8e:	8d 04 80             	lea    eax,[eax+eax*4]
 1002d91:	c1 e0 04             	shl    eax,0x4
 1002d94:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
 1002d98:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
 1002d9d:	c1 e2 08             	shl    edx,0x8
 1002da0:	66 0f be 4c 24 04    	movsx  cx,BYTE PTR [esp+0x4]
 1002da6:	09 ca                	or     edx,ecx
 1002da8:	8b 0d 0c 00 12 00    	mov    ecx,DWORD PTR ds:0x12000c
 1002dae:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
 1002db2:	c3                   	ret    

01002db3 <cursorSavePosition>:
cursorSavePosition():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:59
}

void cursorSavePosition()
{
    if (savedPosPointer < 10)
 1002db3:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
 1002dba:	3c 09                	cmp    al,0x9
 1002dbc:	7f 23                	jg     1002de1 <cursorSavePosition+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:61
    {
        savedPosX[++savedPosPointer] = terminal_column;
 1002dbe:	83 c0 01             	add    eax,0x1
 1002dc1:	a2 26 00 12 00       	mov    ds:0x120026,al
 1002dc6:	0f be c0             	movsx  eax,al
 1002dc9:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
 1002dcf:	88 90 10 00 12 00    	mov    BYTE PTR [eax+0x120010],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:62
        savedPosY[savedPosPointer] = terminal_row;
 1002dd5:	8b 15 00 00 12 00    	mov    edx,DWORD PTR ds:0x120000
 1002ddb:	88 90 1c 00 12 00    	mov    BYTE PTR [eax+0x12001c],dl
 1002de1:	f3 c3                	repz ret 

01002de3 <cursorRestorePosition>:
cursorRestorePosition():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:68
    }
}

void cursorRestorePosition()
{
    if (savedPosPointer > 0)
 1002de3:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
 1002dea:	84 c0                	test   al,al
 1002dec:	7e 29                	jle    1002e17 <cursorRestorePosition+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:70
    {
        terminal_column = savedPosX[savedPosPointer];
 1002dee:	0f be d0             	movsx  edx,al
 1002df1:	0f b6 8a 10 00 12 00 	movzx  ecx,BYTE PTR [edx+0x120010]
 1002df8:	89 0d 04 00 12 00    	mov    DWORD PTR ds:0x120004,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:71
        terminal_row = savedPosY[savedPosPointer--];
 1002dfe:	83 e8 01             	sub    eax,0x1
 1002e01:	a2 26 00 12 00       	mov    ds:0x120026,al
 1002e06:	0f b6 82 1c 00 12 00 	movzx  eax,BYTE PTR [edx+0x12001c]
 1002e0d:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:72
        update_cursor();
 1002e12:	e8 0d ff ff ff       	call   1002d24 <update_cursor>
 1002e17:	f3 c3                	repz ret 

01002e19 <terminal_clear>:
terminal_clear():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:77
    }
}

void terminal_clear()
{
 1002e19:	56                   	push   esi
 1002e1a:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:79
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
 1002e1b:	ba 00 00 00 00       	mov    edx,0x0
 1002e20:	be 00 00 00 00       	mov    esi,0x0
 1002e25:	80 3d 27 00 12 00 00 	cmp    BYTE PTR ds:0x120027,0x0
 1002e2c:	75 30                	jne    1002e5e <terminal_clear+0x45>
 1002e2e:	eb 36                	jmp    1002e66 <terminal_clear+0x4d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:82 (discriminator 3)
                for (size_t x = 0; x < VGA_WIDTH; x++) {
                        const size_t index = y * VGA_WIDTH + x;
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
 1002e30:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
 1002e37:	c1 e0 08             	shl    eax,0x8
 1002e3a:	83 c8 20             	or     eax,0x20
 1002e3d:	8b 0d 0c 00 12 00    	mov    ecx,DWORD PTR ds:0x12000c
 1002e43:	66 89 04 11          	mov    WORD PTR [ecx+edx*1],ax
 1002e47:	83 c2 02             	add    edx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:80 (discriminator 3)

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
                for (size_t x = 0; x < VGA_WIDTH; x++) {
 1002e4a:	39 d3                	cmp    ebx,edx
 1002e4c:	75 e2                	jne    1002e30 <terminal_clear+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:79 (discriminator 2)
}

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
 1002e4e:	83 c6 01             	add    esi,0x1
 1002e51:	89 da                	mov    edx,ebx
 1002e53:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
 1002e5a:	39 f0                	cmp    eax,esi
 1002e5c:	76 08                	jbe    1002e66 <terminal_clear+0x4d>
 1002e5e:	8d 9a a0 00 00 00    	lea    ebx,[edx+0xa0]
 1002e64:	eb ca                	jmp    1002e30 <terminal_clear+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:85
                for (size_t x = 0; x < VGA_WIDTH; x++) {
                        const size_t index = y * VGA_WIDTH + x;
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
                }
        }
    terminal_column=0;
 1002e66:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
 1002e6d:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:86
    terminal_row=0;
 1002e70:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
 1002e77:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:87
    update_cursor();
 1002e7a:	e8 a5 fe ff ff       	call   1002d24 <update_cursor>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:88
}
 1002e7f:	5b                   	pop    ebx
 1002e80:	5e                   	pop    esi
 1002e81:	c3                   	ret    

01002e82 <terminal_clear_line>:
terminal_clear_line():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:91

void terminal_clear_line(unsigned lineNo)
{
 1002e82:	53                   	push   ebx
 1002e83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:92
    if (lineNo>SYS_VGA_HEIGHT-1)
 1002e87:	83 f8 31             	cmp    eax,0x31
 1002e8a:	77 2a                	ja     1002eb6 <terminal_clear_line+0x34>
 1002e8c:	8d 14 80             	lea    edx,[eax+eax*4]
 1002e8f:	c1 e2 05             	shl    edx,0x5
 1002e92:	8d 9a a0 00 00 00    	lea    ebx,[edx+0xa0]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:97 (discriminator 3)
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
 1002e98:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
 1002e9f:	c1 e0 08             	shl    eax,0x8
 1002ea2:	83 c8 20             	or     eax,0x20
 1002ea5:	8b 0d 0c 00 12 00    	mov    ecx,DWORD PTR ds:0x12000c
 1002eab:	66 89 04 11          	mov    WORD PTR [ecx+edx*1],ax
 1002eaf:	83 c2 02             	add    edx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:94 (discriminator 3)

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
 1002eb2:	39 da                	cmp    edx,ebx
 1002eb4:	75 e2                	jne    1002e98 <terminal_clear_line+0x16>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:99
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
    }
}
 1002eb6:	5b                   	pop    ebx
 1002eb7:	c3                   	ret    

01002eb8 <terminal_copyline>:
terminal_copyline():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:102

void terminal_copyline(unsigned dstLine, unsigned srcLine)
{
 1002eb8:	83 ec 10             	sub    esp,0x10
 1002ebb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
 1002ebf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:107
    unsigned rowBytes = VGA_WIDTH*2;
    uintptr_t dest=(uintptr_t)TEXTMODE_MEMORY_START+(dstLine*rowBytes);
    uintptr_t src=(uintptr_t)TEXTMODE_MEMORY_START+(srcLine*rowBytes);
    
    memcpy((void*)dest,(void*)src,rowBytes);
 1002ec3:	68 a0 00 00 00       	push   0xa0
 1002ec8:	8d 04 80             	lea    eax,[eax+eax*4]
 1002ecb:	c1 e0 05             	shl    eax,0x5
 1002ece:	05 00 80 0b 00       	add    eax,0xb8000
 1002ed3:	50                   	push   eax
 1002ed4:	8d 04 92             	lea    eax,[edx+edx*4]
 1002ed7:	c1 e0 05             	shl    eax,0x5
 1002eda:	05 00 80 0b 00       	add    eax,0xb8000
 1002edf:	50                   	push   eax
 1002ee0:	e8 8b 67 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:108
}
 1002ee5:	83 c4 1c             	add    esp,0x1c
 1002ee8:	c3                   	ret    

01002ee9 <terminal_putchar>:
terminal_putchar():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:110

void terminal_putchar(char c) {
 1002ee9:	53                   	push   ebx
 1002eea:	83 ec 08             	sub    esp,0x8
 1002eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:111
    if (c=='\n')
 1002ef1:	3c 0a                	cmp    al,0xa
 1002ef3:	75 16                	jne    1002f0b <terminal_putchar+0x22>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:113
    {
            terminal_column = 0;
 1002ef5:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
 1002efc:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:114
            terminal_row += 1;
 1002eff:	83 05 00 00 12 00 01 	add    DWORD PTR ds:0x120000,0x1
 1002f06:	e9 d8 00 00 00       	jmp    1002fe3 <terminal_putchar+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:116
    }
    else if (c=='\b')
 1002f0b:	3c 08                	cmp    al,0x8
 1002f0d:	75 48                	jne    1002f57 <terminal_putchar+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:118
    {
        if (terminal_column > 1)
 1002f0f:	a1 04 00 12 00       	mov    eax,ds:0x120004
 1002f14:	83 f8 01             	cmp    eax,0x1
 1002f17:	76 0a                	jbe    1002f23 <terminal_putchar+0x3a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:119
            terminal_column--;
 1002f19:	83 e8 01             	sub    eax,0x1
 1002f1c:	a3 04 00 12 00       	mov    ds:0x120004,eax
 1002f21:	eb 11                	jmp    1002f34 <terminal_putchar+0x4b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:122
        else
        {
            terminal_row--;
 1002f23:	83 2d 00 00 12 00 01 	sub    DWORD PTR ds:0x120000,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:123
            terminal_column=VGA_WIDTH;
 1002f2a:	c7 05 04 00 12 00 50 	mov    DWORD PTR ds:0x120004,0x50
 1002f31:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:125
        }
        terminal_putentryat(' ', terminal_color, terminal_column, terminal_row);
 1002f34:	ff 35 00 00 12 00    	push   DWORD PTR ds:0x120000
 1002f3a:	ff 35 04 00 12 00    	push   DWORD PTR ds:0x120004
 1002f40:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
 1002f47:	50                   	push   eax
 1002f48:	6a 20                	push   0x20
 1002f4a:	e8 3b fe ff ff       	call   1002d8a <terminal_putentryat>
 1002f4f:	83 c4 10             	add    esp,0x10
 1002f52:	e9 8c 00 00 00       	jmp    1002fe3 <terminal_putchar+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:128
        
    }
    else if (c=='\t')
 1002f57:	3c 09                	cmp    al,0x9
 1002f59:	75 3b                	jne    1002f96 <terminal_putchar+0xad>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:130
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
 1002f5b:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
 1002f61:	ba cd cc cc cc       	mov    edx,0xcccccccd
 1002f66:	89 c8                	mov    eax,ecx
 1002f68:	f7 e2                	mul    edx
 1002f6a:	c1 ea 02             	shr    edx,0x2
 1002f6d:	8d 5c 92 05          	lea    ebx,[edx+edx*4+0x5]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:132
        if (goTo==terminal_column)
            goTo=SCREEN_SPACES_PER_TAB;
 1002f71:	39 d9                	cmp    ecx,ebx
 1002f73:	b8 05 00 00 00       	mov    eax,0x5
 1002f78:	0f 44 d8             	cmove  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:134
        
        while (terminal_column < goTo)
 1002f7b:	39 d9                	cmp    ecx,ebx
 1002f7d:	73 64                	jae    1002fe3 <terminal_putchar+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:135
            terminal_putchar(' ');;
 1002f7f:	83 ec 0c             	sub    esp,0xc
 1002f82:	6a 20                	push   0x20
 1002f84:	e8 60 ff ff ff       	call   1002ee9 <terminal_putchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:134
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
        if (goTo==terminal_column)
            goTo=SCREEN_SPACES_PER_TAB;
        
        while (terminal_column < goTo)
 1002f89:	83 c4 10             	add    esp,0x10
 1002f8c:	3b 1d 04 00 12 00    	cmp    ebx,DWORD PTR ds:0x120004
 1002f92:	77 eb                	ja     1002f7f <terminal_putchar+0x96>
 1002f94:	eb 4d                	jmp    1002fe3 <terminal_putchar+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:141
    
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
 1002f96:	3c 0d                	cmp    al,0xd
 1002f98:	0f 84 86 00 00 00    	je     1003024 <terminal_putchar+0x13b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:146
        return;

        else
        {
                terminal_putentryat(c, terminal_color, terminal_column, terminal_row);
 1002f9e:	ff 35 00 00 12 00    	push   DWORD PTR ds:0x120000
 1002fa4:	ff 35 04 00 12 00    	push   DWORD PTR ds:0x120004
 1002faa:	0f b6 15 08 00 12 00 	movzx  edx,BYTE PTR ds:0x120008
 1002fb1:	52                   	push   edx
 1002fb2:	0f be c0             	movsx  eax,al
 1002fb5:	50                   	push   eax
 1002fb6:	e8 cf fd ff ff       	call   1002d8a <terminal_putentryat>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:147
                if (++terminal_column == VGA_WIDTH) {
 1002fbb:	a1 04 00 12 00       	mov    eax,ds:0x120004
 1002fc0:	83 c0 01             	add    eax,0x1
 1002fc3:	83 c4 10             	add    esp,0x10
 1002fc6:	83 f8 50             	cmp    eax,0x50
 1002fc9:	74 07                	je     1002fd2 <terminal_putchar+0xe9>
 1002fcb:	a3 04 00 12 00       	mov    ds:0x120004,eax
 1002fd0:	eb 11                	jmp    1002fe3 <terminal_putchar+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:148
                        terminal_column = 0;
 1002fd2:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
 1002fd9:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:149
                        terminal_row++;
 1002fdc:	83 05 00 00 12 00 01 	add    DWORD PTR ds:0x120000,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:152
                }
        }
    if (terminal_row == kTerminalHeight)
 1002fe3:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
 1002fea:	3b 05 00 00 12 00    	cmp    eax,DWORD PTR ds:0x120000
 1002ff0:	75 2d                	jne    100301f <terminal_putchar+0x136>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:154 (discriminator 1)
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
 1002ff2:	85 c0                	test   eax,eax
 1002ff4:	74 22                	je     1003018 <terminal_putchar+0x12f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:154
 1002ff6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:155 (discriminator 3)
            terminal_copyline(row, row+1);
 1002ffb:	8d 58 01             	lea    ebx,[eax+0x1]
 1002ffe:	83 ec 08             	sub    esp,0x8
 1003001:	53                   	push   ebx
 1003002:	50                   	push   eax
 1003003:	e8 b0 fe ff ff       	call   1002eb8 <terminal_copyline>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:154 (discriminator 3)
                        terminal_row++;
                }
        }
    if (terminal_row == kTerminalHeight)
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
 1003008:	89 d8                	mov    eax,ebx
 100300a:	0f b6 15 27 00 12 00 	movzx  edx,BYTE PTR ds:0x120027
 1003011:	83 c4 10             	add    esp,0x10
 1003014:	39 da                	cmp    edx,ebx
 1003016:	77 e3                	ja     1002ffb <terminal_putchar+0x112>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:157
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
 1003018:	83 2d 00 00 12 00 01 	sub    DWORD PTR ds:0x120000,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:159
    }
    update_cursor();
 100301f:	e8 00 fd ff ff       	call   1002d24 <update_cursor>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:160
}
 1003024:	83 c4 08             	add    esp,0x8
 1003027:	5b                   	pop    ebx
 1003028:	c3                   	ret    

01003029 <cursorUpdateBiosCursor>:
cursorUpdateBiosCursor():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:165

void cursorUpdateBiosCursor()
{
    uint8_t* bda=(uint8_t*)0x450;
    *bda=(uint8_t)(terminal_column & 0xFF);
 1003029:	a1 04 00 12 00       	mov    eax,ds:0x120004
 100302e:	a2 50 04 00 00       	mov    ds:0x450,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:167
    bda++;
    *bda=(uint8_t)((terminal_row+3) & 0xFF);
 1003033:	0f b6 05 00 00 12 00 	movzx  eax,BYTE PTR ds:0x120000
 100303a:	83 c0 03             	add    eax,0x3
 100303d:	a2 51 04 00 00       	mov    ds:0x451,al
 1003042:	c3                   	ret    

01003043 <cursorMoveTo>:
cursorMoveTo():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:172
}

void cursorMoveTo(uint8_t x, uint8_t y)
{
    terminal_row = y;
 1003043:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
 1003048:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:173
    terminal_column = x;
 100304d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
 1003052:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:174
    update_cursor();
 1003057:	e8 c8 fc ff ff       	call   1002d24 <update_cursor>
 100305c:	f3 c3                	repz ret 

0100305e <cursorMoveToX>:
cursorMoveToX():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:179
}

void cursorMoveToX(uint8_t x)
{
    terminal_column = x;
 100305e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
 1003063:	a3 04 00 12 00       	mov    ds:0x120004,eax
 1003068:	c3                   	ret    

01003069 <cursorMoveToY>:
cursorMoveToY():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:184
}

void cursorMoveToY(uint8_t y)
{
    terminal_row = y;
 1003069:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
 100306e:	a3 00 00 12 00       	mov    ds:0x120000,eax
 1003073:	c3                   	ret    

01003074 <cursorGetPosX>:
cursorGetPosX():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:190
}

uint8_t cursorGetPosX()
{
    return terminal_column;
}
 1003074:	0f b6 05 04 00 12 00 	movzx  eax,BYTE PTR ds:0x120004
 100307b:	c3                   	ret    

0100307c <cursorGetMaxX>:
cursorGetMaxX():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:194
int cursorGetMaxX()
{
    return VGA_WIDTH;
}
 100307c:	b8 50 00 00 00       	mov    eax,0x50
 1003081:	c3                   	ret    

01003082 <cursorGetMaxY>:
cursorGetMaxY():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:198

int cursorGetMaxY()
{
    return kTerminalHeight;
 1003082:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:199
}
 1003089:	c3                   	ret    

0100308a <displayGetMaxXY>:
displayGetMaxXY():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:203

void displayGetMaxXY(int* maxX, int* maxY)
{
    *maxX=VGA_WIDTH;
 100308a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 100308e:	c7 00 50 00 00 00    	mov    DWORD PTR [eax],0x50
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:204
    *maxY=kTerminalHeight;
 1003094:	0f b6 15 27 00 12 00 	movzx  edx,BYTE PTR ds:0x120027
 100309b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100309f:	89 10                	mov    DWORD PTR [eax],edx
 10030a1:	c3                   	ret    

010030a2 <cursorGetPosY>:
cursorGetPosY():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:211
}

uint8_t cursorGetPosY()
{
    return terminal_row;
}
 10030a2:	0f b6 05 00 00 12 00 	movzx  eax,BYTE PTR ds:0x120000
 10030a9:	c3                   	ret    

010030aa <kTermPrint>:
kTermPrint():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:213

void kTermPrint(const char* data) {
 10030aa:	56                   	push   esi
 10030ab:	53                   	push   ebx
 10030ac:	83 ec 10             	sub    esp,0x10
 10030af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:214
        size_t datalen = strlen(data);
 10030b3:	56                   	push   esi
 10030b4:	e8 43 6c 00 00       	call   1009cfc <strlen>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:215
        for (size_t i = 0; i < datalen; i++)
 10030b9:	83 c4 10             	add    esp,0x10
 10030bc:	85 c0                	test   eax,eax
 10030be:	74 1a                	je     10030da <kTermPrint+0x30>
 10030c0:	89 f3                	mov    ebx,esi
 10030c2:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:216 (discriminator 3)
                terminal_putchar(data[i]);
 10030c4:	83 ec 0c             	sub    esp,0xc
 10030c7:	0f be 13             	movsx  edx,BYTE PTR [ebx]
 10030ca:	52                   	push   edx
 10030cb:	e8 19 fe ff ff       	call   1002ee9 <terminal_putchar>
 10030d0:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:215 (discriminator 3)
    return terminal_row;
}

void kTermPrint(const char* data) {
        size_t datalen = strlen(data);
        for (size_t i = 0; i < datalen; i++)
 10030d3:	83 c4 10             	add    esp,0x10
 10030d6:	39 f3                	cmp    ebx,esi
 10030d8:	75 ea                	jne    10030c4 <kTermPrint+0x1a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:217
                terminal_putchar(data[i]);
}
 10030da:	83 c4 04             	add    esp,0x4
 10030dd:	5b                   	pop    ebx
 10030de:	5e                   	pop    esi
 10030df:	c3                   	ret    

010030e0 <kTermInit>:
kTermInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:221


void kTermInit() {
    kTerminalHeight=SYS_VGA_HEIGHT;
 10030e0:	c6 05 27 00 12 00 32 	mov    BYTE PTR ds:0x120027,0x32
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:222
    terminal_row = 0;
 10030e7:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
 10030ee:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:223
    terminal_column = 0;
 10030f1:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
 10030f8:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:224
    terminal_color = make_color(COLOR_LIGHT_BROWN, COLOR_BLACK);
 10030fb:	c6 05 08 00 12 00 0e 	mov    BYTE PTR ds:0x120008,0xe
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:225
    terminal_buffer = (uint16_t*) TEXTMODE_MEMORY_START;
 1003102:	c7 05 0c 00 12 00 00 	mov    DWORD PTR ds:0x12000c,0xb8000
 1003109:	80 0b 00 
 100310c:	c3                   	ret    

0100310d <puts>:
puts():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:230
    //terminal_clear();
}

void puts(char* in)
{
 100310d:	53                   	push   ebx
 100310e:	83 ec 08             	sub    esp,0x8
 1003111:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:231
    while (*in>'\0')
 1003115:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1003118:	84 c0                	test   al,al
 100311a:	7e 19                	jle    1003135 <puts+0x28>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:233
    {
        terminal_putchar(*in++);
 100311c:	83 c3 01             	add    ebx,0x1
 100311f:	83 ec 0c             	sub    esp,0xc
 1003122:	0f be c0             	movsx  eax,al
 1003125:	50                   	push   eax
 1003126:	e8 be fd ff ff       	call   1002ee9 <terminal_putchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:231
    //terminal_clear();
}

void puts(char* in)
{
    while (*in>'\0')
 100312b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 100312e:	83 c4 10             	add    esp,0x10
 1003131:	84 c0                	test   al,al
 1003133:	7f e7                	jg     100311c <puts+0xf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:235
    {
        terminal_putchar(*in++);
    }
}
 1003135:	83 c4 08             	add    esp,0x8
 1003138:	5b                   	pop    ebx
 1003139:	c3                   	ret    

0100313a <putc>:
putc():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:238

void putc(char c)
{
 100313a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:239
    terminal_putchar(c);
 100313d:	0f be 44 24 1c       	movsx  eax,BYTE PTR [esp+0x1c]
 1003142:	50                   	push   eax
 1003143:	e8 a1 fd ff ff       	call   1002ee9 <terminal_putchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/console/basic_display.c:240
 1003148:	83 c4 1c             	add    esp,0x1c
 100314b:	c3                   	ret    

0100314c <keyboardGetKeyFromBuffer>:
keyboardGetKeyFromBuffer():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:20
//Base moves when a key is taken from the buffer
uint8_t keyboardGetKeyFromBuffer()
{
    char lTemp=0;
    //If top > buffer address, there are new characters to be processed
    if (kKbdBuffCurrTop>(char*)KEYBOARD_BUFFER_ADDRESS)
 100314c:	8b 15 60 99 12 00    	mov    edx,DWORD PTR ds:0x129960
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:18
//Get a key from the keyboard buffer
//Curr moves when a key is put into the buffer
//Base moves when a key is taken from the buffer
uint8_t keyboardGetKeyFromBuffer()
{
    char lTemp=0;
 1003152:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:20
    //If top > buffer address, there are new characters to be processed
    if (kKbdBuffCurrTop>(char*)KEYBOARD_BUFFER_ADDRESS)
 1003157:	81 fa b0 24 16 00    	cmp    edx,0x1624b0
 100315d:	76 2a                	jbe    1003189 <keyboardGetKeyFromBuffer+0x3d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:23
    {
        //increment the current character pointer
        kKbdBuffCurrChar++;
 100315f:	a1 90 99 12 00       	mov    eax,ds:0x129990
 1003164:	8d 48 01             	lea    ecx,[eax+0x1]
 1003167:	89 0d 90 99 12 00    	mov    DWORD PTR ds:0x129990,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:25
        //get the character from the buffer
        lTemp=*kKbdBuffCurrChar;
 100316d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:27
        //If we've reached top, reset both char and top
        if (kKbdBuffCurrChar>=kKbdBuffCurrTop)
 1003171:	39 ca                	cmp    edx,ecx
 1003173:	77 14                	ja     1003189 <keyboardGetKeyFromBuffer+0x3d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:29
        {
            kKbdBuffCurrChar=(char*)KEYBOARD_BUFFER_ADDRESS;
 1003175:	c7 05 90 99 12 00 b0 	mov    DWORD PTR ds:0x129990,0x1624b0
 100317c:	24 16 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:30
            kKbdBuffCurrTop=(char*)KEYBOARD_BUFFER_ADDRESS;
 100317f:	c7 05 60 99 12 00 b0 	mov    DWORD PTR ds:0x129960,0x1624b0
 1003186:	24 16 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:34
        }
    }
    return lTemp;
}
 1003189:	f3 c3                	repz ret 

0100318b <waitForKeyboardKey>:
waitForKeyboardKey():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:37

char waitForKeyboardKey()
{
 100318b:	53                   	push   ebx
 100318c:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:38
    printd(DEBUG_KEYBOARD_DRIVER,"buffer=%08X, char=%08X, top=%08X\t", KEYBOARD_BUFFER_ADDRESS, kKbdBuffCurrChar, kKbdBuffCurrTop);
 100318f:	ff 35 60 99 12 00    	push   DWORD PTR ds:0x129960
 1003195:	ff 35 90 99 12 00    	push   DWORD PTR ds:0x129990
 100319b:	68 b0 24 16 00       	push   0x1624b0
 10031a0:	68 f8 0b 04 01       	push   0x1040bf8
 10031a5:	68 00 00 10 00       	push   0x100000
 10031aa:	e8 48 6a 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:42
    char lTemp=0;
    bool debugMsgPrinted=false;
    //CLR 02/19/2017 - Had to change the conditon because of modifications I made to how buffer & bufferbase are used.
    while (kKbdBuffCurrTop==(char*)KEYBOARD_BUFFER_ADDRESS)
 10031af:	83 c4 20             	add    esp,0x20
 10031b2:	81 3d 60 99 12 00 b0 	cmp    DWORD PTR ds:0x129960,0x1624b0
 10031b9:	24 16 00 
 10031bc:	75 1b                	jne    10031d9 <waitForKeyboardKey+0x4e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:48
    {
        if (!debugMsgPrinted)
        {
            debugMsgPrinted=true;
        }
        __asm__("sti\nhlt\n");
 10031be:	fb                   	sti    
 10031bf:	f4                   	hlt    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:49
        waitTicks(1);
 10031c0:	83 ec 0c             	sub    esp,0xc
 10031c3:	6a 01                	push   0x1
 10031c5:	e8 1b 74 00 00       	call   100a5e5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:42
{
    printd(DEBUG_KEYBOARD_DRIVER,"buffer=%08X, char=%08X, top=%08X\t", KEYBOARD_BUFFER_ADDRESS, kKbdBuffCurrChar, kKbdBuffCurrTop);
    char lTemp=0;
    bool debugMsgPrinted=false;
    //CLR 02/19/2017 - Had to change the conditon because of modifications I made to how buffer & bufferbase are used.
    while (kKbdBuffCurrTop==(char*)KEYBOARD_BUFFER_ADDRESS)
 10031ca:	83 c4 10             	add    esp,0x10
 10031cd:	81 3d 60 99 12 00 b0 	cmp    DWORD PTR ds:0x129960,0x1624b0
 10031d4:	24 16 00 
 10031d7:	74 e5                	je     10031be <waitForKeyboardKey+0x33>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:51
            debugMsgPrinted=true;
        }
        __asm__("sti\nhlt\n");
        waitTicks(1);
    }
    lTemp=keyboardGetKeyFromBuffer();
 10031d9:	e8 6e ff ff ff       	call   100314c <keyboardGetKeyFromBuffer>
 10031de:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:52
    printd(DEBUG_KEYBOARD_DRIVER,"got a key %u!\n", lTemp);
 10031e0:	83 ec 04             	sub    esp,0x4
 10031e3:	0f be c0             	movsx  eax,al
 10031e6:	50                   	push   eax
 10031e7:	68 4b 63 06 01       	push   0x106634b
 10031ec:	68 00 00 10 00       	push   0x100000
 10031f1:	e8 01 6a 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:54
    return lTemp;
}
 10031f6:	89 d8                	mov    eax,ebx
 10031f8:	83 c4 18             	add    esp,0x18
 10031fb:	5b                   	pop    ebx
 10031fc:	c3                   	ret    

010031fd <gets>:
gets():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:57

void gets(char* buffer, int len)
{
 10031fd:	57                   	push   edi
 10031fe:	56                   	push   esi
 10031ff:	53                   	push   ebx
 1003200:	83 ec 14             	sub    esp,0x14
 1003203:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
 1003207:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:58
    volatile char inchar=0;
 100320b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:60
    int cnt=0;
    memset(buffer,0,len);
 1003210:	56                   	push   esi
 1003211:	6a 00                	push   0x0
 1003213:	57                   	push   edi
 1003214:	e8 a6 5c 00 00       	call   1008ebf <memset>
 1003219:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:59
}

void gets(char* buffer, int len)
{
    volatile char inchar=0;
    int cnt=0;
 100321c:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:77
            if (inchar==0x0a)
            {
                printk("%c",inchar);
                return;
            }
            if (cnt<len-2)
 1003221:	83 ee 02             	sub    esi,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:63
    volatile char inchar=0;
    int cnt=0;
    memset(buffer,0,len);
    while (1==1)
    {
        inchar=waitForKeyboardKey();
 1003224:	e8 62 ff ff ff       	call   100318b <waitForKeyboardKey>
 1003229:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:64
        if (inchar=='\b' && cnt>0)
 100322d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 1003232:	85 db                	test   ebx,ebx
 1003234:	7e 1d                	jle    1003253 <gets+0x56>
 1003236:	3c 08                	cmp    al,0x8
 1003238:	75 19                	jne    1003253 <gets+0x56>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:66
        {
            buffer[cnt]=0;
 100323a:	c6 04 1f 00          	mov    BYTE PTR [edi+ebx*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:67
            cnt--;
 100323e:	83 eb 01             	sub    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:68
            puts("\b");
 1003241:	83 ec 0c             	sub    esp,0xc
 1003244:	68 5a 63 06 01       	push   0x106635a
 1003249:	e8 bf fe ff ff       	call   100310d <puts>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:65
    memset(buffer,0,len);
    while (1==1)
    {
        inchar=waitForKeyboardKey();
        if (inchar=='\b' && cnt>0)
        {
 100324e:	83 c4 10             	add    esp,0x10
 1003251:	eb d1                	jmp    1003224 <gets+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:70
            buffer[cnt]=0;
            cnt--;
            puts("\b");
        }
        else if (inchar>0)
 1003253:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 1003258:	84 c0                	test   al,al
 100325a:	7e c8                	jle    1003224 <gets+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:72
        {
            if (inchar==0x0a)
 100325c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 1003261:	3c 0a                	cmp    al,0xa
 1003263:	75 1b                	jne    1003280 <gets+0x83>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:74
            {
                printk("%c",inchar);
 1003265:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 100326a:	83 ec 08             	sub    esp,0x8
 100326d:	0f be c0             	movsx  eax,al
 1003270:	50                   	push   eax
 1003271:	68 5c 63 06 01       	push   0x106635c
 1003276:	e8 64 69 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:75
                return;
 100327b:	83 c4 10             	add    esp,0x10
 100327e:	eb 2d                	jmp    10032ad <gets+0xb0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:77
            }
            if (cnt<len-2)
 1003280:	39 f3                	cmp    ebx,esi
 1003282:	7d a0                	jge    1003224 <gets+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:79
            {
                printk("%c",inchar);
 1003284:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
 1003289:	83 ec 08             	sub    esp,0x8
 100328c:	0f be c0             	movsx  eax,al
 100328f:	50                   	push   eax
 1003290:	68 5c 63 06 01       	push   0x106635c
 1003295:	e8 45 69 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:80
                buffer[cnt++]=inchar;
 100329a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
 100329f:	88 04 1f             	mov    BYTE PTR [edi+ebx*1],al
 10032a2:	83 c4 10             	add    esp,0x10
 10032a5:	8d 5b 01             	lea    ebx,[ebx+0x1]
 10032a8:	e9 77 ff ff ff       	jmp    1003224 <gets+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:84
            }
        }
    }
}
 10032ad:	83 c4 10             	add    esp,0x10
 10032b0:	5b                   	pop    ebx
 10032b1:	5e                   	pop    esi
 10032b2:	5f                   	pop    edi
 10032b3:	c3                   	ret    

010032b4 <getc>:
getc():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:87

char getc()
{
 10032b4:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:88
   int inchar=waitForKeyboardKey();
 10032b7:	e8 cf fe ff ff       	call   100318b <waitForKeyboardKey>
 10032bc:	0f be c0             	movsx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:90
   
   while (inchar==0)
 10032bf:	85 c0                	test   eax,eax
 10032c1:	75 0c                	jne    10032cf <getc+0x1b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:92
   {
       inchar=waitForKeyboardKey();
 10032c3:	e8 c3 fe ff ff       	call   100318b <waitForKeyboardKey>
 10032c8:	0f be c0             	movsx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:90

char getc()
{
   int inchar=waitForKeyboardKey();
   
   while (inchar==0)
 10032cb:	85 c0                	test   eax,eax
 10032cd:	74 f4                	je     10032c3 <getc+0xf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/char/keyboard.c:95
   {
       inchar=waitForKeyboardKey();
   }
   return inchar;
}
 10032cf:	83 c4 0c             	add    esp,0xc
 10032d2:	c3                   	ret    
 10032d3:	90                   	nop

010032d4 <bitsSet>:
bitsSet():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:5
#include <stdint.h>
#include <stdbool.h>

bool bitsSet(volatile uint32_t* array, uint32_t bit)
{
 10032d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:7
    int lRetVal=0;
    __asm__ volatile ("bts [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
 10032d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 10032dc:	0f ab 02             	bts    DWORD PTR [edx],eax
 10032df:	b8 00 00 00 00       	mov    eax,0x0
 10032e4:	0f 92 c0             	setb   al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:8
    return lRetVal;
 10032e7:	85 c0                	test   eax,eax
 10032e9:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:9
}
 10032ec:	c3                   	ret    

010032ed <bitsReset>:
bitsReset():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:11
bool bitsReset(volatile uint32_t* array, uint32_t bit)
{
 10032ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:13
    int lRetVal=0;
    __asm__ volatile ("btr [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
 10032f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 10032f5:	0f b3 02             	btr    DWORD PTR [edx],eax
 10032f8:	b8 00 00 00 00       	mov    eax,0x0
 10032fd:	0f 92 c0             	setb   al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:14
    return lRetVal;
 1003300:	85 c0                	test   eax,eax
 1003302:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:15
}
 1003305:	c3                   	ret    

01003306 <bitsTest>:
bitsTest():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:17
bool bitsTest(volatile uint32_t* array, uint32_t bit)
{
 1003306:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:19
    int lRetVal=0;
    __asm__ volatile ("bt [%[array]],%[bit]\nmov eax,0\nsetc al\n" :[array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
 100330a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100330e:	0f a3 02             	bt     DWORD PTR [edx],eax
 1003311:	b8 00 00 00 00       	mov    eax,0x0
 1003316:	0f 92 c0             	setb   al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:20
    return lRetVal;
 1003319:	85 c0                	test   eax,eax
 100331b:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:21
}
 100331e:	c3                   	ret    

0100331f <bitsScanF>:
bitsScanF():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:24

int bitsScanF(volatile uint32_t* array)
{
 100331f:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:27
    int lRetVal=0;
    bool lErr=false;
    __asm__ volatile ("bsf %[ret],[%[array]]\nsetz cl\n" : [ret] "=b" (lRetVal), [lErr] "=c" (lErr) : [array] "m" (*array));
 1003320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1003324:	0f bc 18             	bsf    ebx,DWORD PTR [eax]
 1003327:	0f 94 c1             	sete   cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:28
    if (lErr==false)
 100332a:	84 c9                	test   cl,cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:29
        return lRetVal;
 100332c:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1003331:	0f 44 c3             	cmove  eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/bits.c:32
    else
        return -1;
 1003334:	5b                   	pop    ebx
 1003335:	c3                   	ret    
 1003336:	66 90                	xchg   ax,ax

01003338 <getNonKernelCodeGDTIndex>:
getNonKernelCodeGDTIndex():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:13
extern uint32_t* kGDTSlotAvailableInd;

uint16_t HIGH_CODE_SECTION getNonKernelCodeGDTIndex()
{
    return 7<<3;
}
 1003338:	b8 38 00 00 00       	mov    eax,0x38
 100333d:	c3                   	ret    

0100333e <getNonKernelDataGDTIndex>:
getNonKernelDataGDTIndex():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:18

uint16_t HIGH_CODE_SECTION getNonKernelDataGDTIndex()
{
    return 6<<3;
}
 100333e:	b8 30 00 00 00       	mov    eax,0x30
 1003343:	c3                   	ret    

01003344 <getKernelCodeGDTIndex>:
getKernelCodeGDTIndex():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:23

uint16_t HIGH_CODE_SECTION getKernelCodeGDTIndex()
{
    return 4<<3;
}
 1003344:	b8 20 00 00 00       	mov    eax,0x20
 1003349:	c3                   	ret    

0100334a <getKernelDataGDTIndex>:
getKernelDataGDTIndex():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:28

uint16_t HIGH_CODE_SECTION getKernelDataGDTIndex()
{
    return 2<<3;
}
 100334a:	b8 10 00 00 00       	mov    eax,0x10
 100334f:	c3                   	ret    

01003350 <getNewGDTEntry>:
getNewGDTEntry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:31

sGDT* HIGH_CODE_SECTION getNewGDTEntry()
{
 1003350:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:34
   int cnt=0,slot=0;
   uint32_t* ptr=kGDTSlotAvailableInd;
    slot=bitsScanF(ptr);
 1003353:	ff 35 2c 99 12 00    	push   DWORD PTR ds:0x12992c
 1003359:	e8 c1 ff ff ff       	call   100331f <bitsScanF>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:36
   sGDT* gdt=bootGdt+slot; 
   return gdt;
 100335e:	8b 15 84 99 12 00    	mov    edx,DWORD PTR ds:0x129984
 1003364:	8d 04 c2             	lea    eax,[edx+eax*8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:37
}
 1003367:	83 c4 1c             	add    esp,0x1c
 100336a:	c3                   	ret    

0100336b <gdtEntry>:
gdtEntry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:41

//Create/modify entries in the protected mode GDT
void HIGH_CODE_SECTION gdtEntry(int entryNo, int base, int limit, char access, char flags,bool inUse)
{
 100336b:	55                   	push   ebp
 100336c:	57                   	push   edi
 100336d:	56                   	push   esi
 100336e:	53                   	push   ebx
 100336f:	83 ec 1c             	sub    esp,0x1c
 1003372:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
 1003376:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
 100337a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
 100337e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
 1003382:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:42
    bootGdt[entryNo].base_low        = base & 0xFFFF;
 1003386:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
 100338a:	c1 e0 03             	shl    eax,0x3
 100338d:	8b 35 84 99 12 00    	mov    esi,DWORD PTR ds:0x129984
 1003393:	66 89 54 06 02       	mov    WORD PTR [esi+eax*1+0x2],dx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:43
    bootGdt[entryNo].base_middle     = (base >> 16) & 0xFF;
 1003398:	89 c6                	mov    esi,eax
 100339a:	03 35 84 99 12 00    	add    esi,DWORD PTR ds:0x129984
 10033a0:	89 d5                	mov    ebp,edx
 10033a2:	c1 fd 10             	sar    ebp,0x10
 10033a5:	89 e9                	mov    ecx,ebp
 10033a7:	88 4e 04             	mov    BYTE PTR [esi+0x4],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:44
    bootGdt[entryNo].base_high       = (base >> 24) & 0xFF;
 10033aa:	c1 ea 18             	shr    edx,0x18
 10033ad:	88 56 07             	mov    BYTE PTR [esi+0x7],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:45
    bootGdt[entryNo].limit_low       = limit & 0xFFFF;
 10033b0:	0f b7 4c 24 38       	movzx  ecx,WORD PTR [esp+0x38]
 10033b5:	66 89 0e             	mov    WORD PTR [esi],cx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:46
    bootGdt[entryNo].flags_and_limit = flags | (((limit >> 8) & 0xF));
 10033b8:	03 05 84 99 12 00    	add    eax,DWORD PTR ds:0x129984
 10033be:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
 10033c2:	c1 fa 08             	sar    edx,0x8
 10033c5:	83 e2 0f             	and    edx,0xf
 10033c8:	09 d3                	or     ebx,edx
 10033ca:	88 58 06             	mov    BYTE PTR [eax+0x6],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:47
    bootGdt[entryNo].access          = access | 0x10;
 10033cd:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
 10033d2:	83 c9 10             	or     ecx,0x10
 10033d5:	88 48 05             	mov    BYTE PTR [eax+0x5],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:48
    if (inUse)
 10033d8:	89 f8                	mov    eax,edi
 10033da:	84 c0                	test   al,al
 10033dc:	74 17                	je     10033f5 <gdtEntry+0x8a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:49
        bitsReset(kGDTSlotAvailableInd,entryNo);
 10033de:	83 ec 08             	sub    esp,0x8
 10033e1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
 10033e5:	ff 35 2c 99 12 00    	push   DWORD PTR ds:0x12992c
 10033eb:	e8 fd fe ff ff       	call   10032ed <bitsReset>
 10033f0:	83 c4 10             	add    esp,0x10
 10033f3:	eb 15                	jmp    100340a <gdtEntry+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:51
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
 10033f5:	83 ec 08             	sub    esp,0x8
 10033f8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
 10033fc:	ff 35 2c 99 12 00    	push   DWORD PTR ds:0x12992c
 1003402:	e8 cd fe ff ff       	call   10032d4 <bitsSet>
 1003407:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:52
}
 100340a:	83 c4 1c             	add    esp,0x1c
 100340d:	5b                   	pop    ebx
 100340e:	5e                   	pop    esi
 100340f:	5f                   	pop    edi
 1003410:	5d                   	pop    ebp
 1003411:	c3                   	ret    

01003412 <gdtEntryRM>:
gdtEntryRM():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:56

//Create entries in the real mode GDT table
void HIGH_CODE_SECTION gdtEntryRM(int entryNo, int base, int limit, char access, char flags)
{
 1003412:	55                   	push   ebp
 1003413:	57                   	push   edi
 1003414:	56                   	push   esi
 1003415:	53                   	push   ebx
 1003416:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
 100341a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
 100341e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:57
    rmGdt[entryNo].base_low        = base & 0xFFFF;
 1003422:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1003426:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
 100342d:	8b 3d 80 99 12 00    	mov    edi,DWORD PTR ds:0x129980
 1003433:	66 89 74 17 02       	mov    WORD PTR [edi+edx*1+0x2],si
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:58
    rmGdt[entryNo].base_middle     = base >> 16 & 0xFF;
 1003438:	89 d7                	mov    edi,edx
 100343a:	03 3d 80 99 12 00    	add    edi,DWORD PTR ds:0x129980
 1003440:	89 f5                	mov    ebp,esi
 1003442:	c1 fd 10             	sar    ebp,0x10
 1003445:	89 e8                	mov    eax,ebp
 1003447:	88 47 04             	mov    BYTE PTR [edi+0x4],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:59
    rmGdt[entryNo].base_high       = base >> 24 & 0xFF;
 100344a:	c1 ee 18             	shr    esi,0x18
 100344d:	89 f0                	mov    eax,esi
 100344f:	88 47 07             	mov    BYTE PTR [edi+0x7],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:60
    rmGdt[entryNo].limit_low       = limit & 0xFFFF;
 1003452:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
 1003457:	66 89 07             	mov    WORD PTR [edi],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:61
    rmGdt[entryNo].flags_and_limit = flags | (limit >> 8 & 0xF);
 100345a:	03 15 80 99 12 00    	add    edx,DWORD PTR ds:0x129980
 1003460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 1003464:	c1 f8 08             	sar    eax,0x8
 1003467:	83 e0 0f             	and    eax,0xf
 100346a:	09 d8                	or     eax,ebx
 100346c:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:62
    rmGdt[entryNo].access          = access | 0x10;
 100346f:	83 c9 10             	or     ecx,0x10
 1003472:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/cpu/gdt.c:63
}
 1003475:	5b                   	pop    ebx
 1003476:	5e                   	pop    esi
 1003477:	5f                   	pop    edi
 1003478:	5d                   	pop    ebp
 1003479:	c3                   	ret    
 100347a:	66 90                	xchg   ax,ax

0100347c <fatfs_init>:
fatfs_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:44

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
 100347c:	55                   	push   ebp
 100347d:	57                   	push   edi
 100347e:	56                   	push   esi
 100347f:	53                   	push   ebx
 1003480:	83 ec 28             	sub    esp,0x28
 1003483:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:54
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
 1003487:	c7 83 44 02 00 00 ff 	mov    DWORD PTR [ebx+0x244],0xffffffff
 100348e:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:55
    fs->currentsector.dirty = 0;
 1003491:	c7 83 48 02 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
 1003498:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:57

    fs->next_free_cluster = 0; // Invalid
 100349b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:59

    fatfs_fat_init(fs);
 10034a2:	53                   	push   ebx
 10034a3:	e8 13 3d 00 00       	call   10071bb <fatfs_fat_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:62

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
 10034a8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
 10034ab:	83 c4 10             	add    esp,0x10
 10034ae:	85 c0                	test   eax,eax
 10034b0:	0f 84 a8 02 00 00    	je     100375e <fatfs_init+0x2e2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:69

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
 10034b6:	8d 73 44             	lea    esi,[ebx+0x44]
 10034b9:	83 ec 04             	sub    esp,0x4
 10034bc:	6a 01                	push   0x1
 10034be:	56                   	push   esi
 10034bf:	6a 00                	push   0x0
 10034c1:	ff d0                	call   eax
 10034c3:	83 c4 10             	add    esp,0x10
 10034c6:	85 c0                	test   eax,eax
 10034c8:	0f 84 97 02 00 00    	je     1003765 <fatfs_init+0x2e9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:74
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
 10034ce:	66 81 bb 42 02 00 00 	cmp    WORD PTR [ebx+0x242],0xaa55
 10034d5:	55 aa 
 10034d7:	0f 85 8f 02 00 00    	jne    100376c <fatfs_init+0x2f0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:78
        return FAT_INIT_INVALID_SIGNATURE;

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
 10034dd:	0f b6 83 43 02 00 00 	movzx  eax,BYTE PTR [ebx+0x243]
 10034e4:	c1 e0 08             	shl    eax,0x8
 10034e7:	0f b6 93 42 02 00 00 	movzx  edx,BYTE PTR [ebx+0x242]
 10034ee:	01 d0                	add    eax,edx
 10034f0:	3d 55 aa 00 00       	cmp    eax,0xaa55
 10034f5:	0f 85 78 02 00 00    	jne    1003773 <fatfs_init+0x2f7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:86
    // Verify packed structures
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
 10034fb:	0f b6 83 06 02 00 00 	movzx  eax,BYTE PTR [ebx+0x206]
 1003502:	3c 0f                	cmp    al,0xf
 1003504:	77 0a                	ja     1003510 <fatfs_init+0x94>
 1003506:	0f b6 d0             	movzx  edx,al
 1003509:	ff 24 95 0c 8a 02 01 	jmp    DWORD PTR [edx*4+0x1028a0c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:94
        case 0x06:
        case 0x0C:
        case 0x0E:
        case 0x0F:
        case 0x05:
            valid_partition = 1;
 1003510:	3c 06                	cmp    al,0x6
 1003512:	0f 96 c0             	setbe  al
 1003515:	eb 05                	jmp    100351c <fatfs_init+0xa0>
 1003517:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:106
                valid_partition = 1;
        break;
    }

    // Read LBA Begin for the file system
    if (valid_partition)
 100351c:	84 c0                	test   al,al
 100351e:	74 32                	je     1003552 <fatfs_init+0xd6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:107
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
 1003520:	0f b6 83 0d 02 00 00 	movzx  eax,BYTE PTR [ebx+0x20d]
 1003527:	c1 e0 18             	shl    eax,0x18
 100352a:	89 c2                	mov    edx,eax
 100352c:	0f b6 83 0c 02 00 00 	movzx  eax,BYTE PTR [ebx+0x20c]
 1003533:	c1 e0 10             	shl    eax,0x10
 1003536:	01 d0                	add    eax,edx
 1003538:	0f b6 93 0a 02 00 00 	movzx  edx,BYTE PTR [ebx+0x20a]
 100353f:	01 c2                	add    edx,eax
 1003541:	0f b6 83 0b 02 00 00 	movzx  eax,BYTE PTR [ebx+0x20b]
 1003548:	c1 e0 08             	shl    eax,0x8
 100354b:	01 d0                	add    eax,edx
 100354d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
 1003550:	eb 07                	jmp    1003559 <fatfs_init+0xdd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:110
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
 1003552:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:114

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
 1003559:	83 ec 04             	sub    esp,0x4
 100355c:	6a 01                	push   0x1
 100355e:	56                   	push   esi
 100355f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
 1003562:	ff 53 34             	call   DWORD PTR [ebx+0x34]
 1003565:	83 c4 10             	add    esp,0x10
 1003568:	85 c0                	test   eax,eax
 100356a:	0f 84 0a 02 00 00    	je     100377a <fatfs_init+0x2fe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:118
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
 1003570:	0f b6 43 50          	movzx  eax,BYTE PTR [ebx+0x50]
 1003574:	c1 e0 08             	shl    eax,0x8
 1003577:	0f b6 53 4f          	movzx  edx,BYTE PTR [ebx+0x4f]
 100357b:	01 d0                	add    eax,edx
 100357d:	3d 00 02 00 00       	cmp    eax,0x200
 1003582:	0f 85 f9 01 00 00    	jne    1003781 <fatfs_init+0x305>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:122
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
 1003588:	0f b6 43 51          	movzx  eax,BYTE PTR [ebx+0x51]
 100358c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
 1003590:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:123
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
 1003592:	0f b6 43 53          	movzx  eax,BYTE PTR [ebx+0x53]
 1003596:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
 100359a:	0f b6 53 52          	movzx  edx,BYTE PTR [ebx+0x52]
 100359e:	89 d1                	mov    ecx,edx
 10035a0:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
 10035a4:	89 c2                	mov    edx,eax
 10035a6:	c1 e2 08             	shl    edx,0x8
 10035a9:	0f b6 c1             	movzx  eax,cl
 10035ac:	8d 34 02             	lea    esi,[edx+eax*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:124
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
 10035af:	0f b6 43 54          	movzx  eax,BYTE PTR [ebx+0x54]
 10035b3:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:125
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
 10035b7:	0f b6 43 56          	movzx  eax,BYTE PTR [ebx+0x56]
 10035bb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
 10035bf:	0f b6 53 55          	movzx  edx,BYTE PTR [ebx+0x55]
 10035c3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
 10035c7:	89 c1                	mov    ecx,eax
 10035c9:	c1 e1 08             	shl    ecx,0x8
 10035cc:	0f b6 c2             	movzx  eax,dl
 10035cf:	01 c1                	add    ecx,eax
 10035d1:	66 89 4b 28          	mov    WORD PTR [ebx+0x28],cx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:127

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
 10035d5:	0f b6 53 5b          	movzx  edx,BYTE PTR [ebx+0x5b]
 10035d9:	c1 e2 08             	shl    edx,0x8
 10035dc:	0f b6 43 5a          	movzx  eax,BYTE PTR [ebx+0x5a]
 10035e0:	01 c2                	add    edx,eax
 10035e2:	74 05                	je     10035e9 <fatfs_init+0x16d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:128
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
 10035e4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
 10035e7:	eb 24                	jmp    100360d <fatfs_init+0x191>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:130
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
 10035e9:	0f b6 43 6b          	movzx  eax,BYTE PTR [ebx+0x6b]
 10035ed:	c1 e0 18             	shl    eax,0x18
 10035f0:	89 c5                	mov    ebp,eax
 10035f2:	0f b6 43 6a          	movzx  eax,BYTE PTR [ebx+0x6a]
 10035f6:	c1 e0 10             	shl    eax,0x10
 10035f9:	01 e8                	add    eax,ebp
 10035fb:	0f b6 7b 68          	movzx  edi,BYTE PTR [ebx+0x68]
 10035ff:	01 c7                	add    edi,eax
 1003601:	0f b6 43 69          	movzx  eax,BYTE PTR [ebx+0x69]
 1003605:	c1 e0 08             	shl    eax,0x8
 1003608:	01 f8                	add    eax,edi
 100360a:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:133

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
 100360d:	0f b6 43 73          	movzx  eax,BYTE PTR [ebx+0x73]
 1003611:	c1 e0 18             	shl    eax,0x18
 1003614:	89 c5                	mov    ebp,eax
 1003616:	0f b6 43 72          	movzx  eax,BYTE PTR [ebx+0x72]
 100361a:	c1 e0 10             	shl    eax,0x10
 100361d:	01 e8                	add    eax,ebp
 100361f:	0f b6 7b 70          	movzx  edi,BYTE PTR [ebx+0x70]
 1003623:	01 c7                	add    edi,eax
 1003625:	0f b6 43 71          	movzx  eax,BYTE PTR [ebx+0x71]
 1003629:	c1 e0 08             	shl    eax,0x8
 100362c:	01 f8                	add    eax,edi
 100362e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:134
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
 1003631:	0f b6 7b 75          	movzx  edi,BYTE PTR [ebx+0x75]
 1003635:	c1 e7 08             	shl    edi,0x8
 1003638:	0f b6 43 74          	movzx  eax,BYTE PTR [ebx+0x74]
 100363c:	01 f8                	add    eax,edi
 100363e:	66 89 43 18          	mov    WORD PTR [ebx+0x18],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:137

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
 1003642:	0f b7 c6             	movzx  eax,si
 1003645:	0f b6 74 24 0a       	movzx  esi,BYTE PTR [esp+0xa]
 100364a:	89 f7                	mov    edi,esi
 100364c:	0f af 7b 20          	imul   edi,DWORD PTR [ebx+0x20]
 1003650:	8d 2c 38             	lea    ebp,[eax+edi*1]
 1003653:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:138
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
 1003656:	0f b7 c9             	movzx  ecx,cx
 1003659:	c1 e1 05             	shl    ecx,0x5
 100365c:	8d 89 ff 01 00 00    	lea    ecx,[ecx+0x1ff]
 1003662:	c1 f9 09             	sar    ecx,0x9
 1003665:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:141

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
 1003668:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
 100366b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:144

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
 100366e:	01 f8                	add    eax,edi
 1003670:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:146

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
 1003673:	0f b6 8b 43 02 00 00 	movzx  ecx,BYTE PTR [ebx+0x243]
 100367a:	c1 e1 08             	shl    ecx,0x8
 100367d:	0f b6 83 42 02 00 00 	movzx  eax,BYTE PTR [ebx+0x242]
 1003684:	01 c8                	add    eax,ecx
 1003686:	3d 55 aa 00 00       	cmp    eax,0xaa55
 100368b:	0f 85 f7 00 00 00    	jne    1003788 <fatfs_init+0x30c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:150
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
 1003691:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
 1003696:	c1 e0 08             	shl    eax,0x8
 1003699:	0f b6 4c 24 0f       	movzx  ecx,BYTE PTR [esp+0xf]
 100369e:	01 c8                	add    eax,ecx
 10036a0:	c1 e0 05             	shl    eax,0x5
 10036a3:	8d a8 ff 01 00 00    	lea    ebp,[eax+0x1ff]
 10036a9:	c1 fd 09             	sar    ebp,0x9
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:152

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
 10036ac:	85 d2                	test   edx,edx
 10036ae:	75 21                	jne    10036d1 <fatfs_init+0x255>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:155
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
 10036b0:	0f b6 43 6b          	movzx  eax,BYTE PTR [ebx+0x6b]
 10036b4:	c1 e0 18             	shl    eax,0x18
 10036b7:	89 c1                	mov    ecx,eax
 10036b9:	0f b6 43 6a          	movzx  eax,BYTE PTR [ebx+0x6a]
 10036bd:	c1 e0 10             	shl    eax,0x10
 10036c0:	01 c8                	add    eax,ecx
 10036c2:	0f b6 53 68          	movzx  edx,BYTE PTR [ebx+0x68]
 10036c6:	01 d0                	add    eax,edx
 10036c8:	0f b6 53 69          	movzx  edx,BYTE PTR [ebx+0x69]
 10036cc:	c1 e2 08             	shl    edx,0x8
 10036cf:	01 c2                	add    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:157

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
 10036d1:	0f b6 43 58          	movzx  eax,BYTE PTR [ebx+0x58]
 10036d5:	c1 e0 08             	shl    eax,0x8
 10036d8:	0f b6 4b 57          	movzx  ecx,BYTE PTR [ebx+0x57]
 10036dc:	01 c8                	add    eax,ecx
 10036de:	75 22                	jne    1003702 <fatfs_init+0x286>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:160
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
 10036e0:	0f b6 43 67          	movzx  eax,BYTE PTR [ebx+0x67]
 10036e4:	c1 e0 18             	shl    eax,0x18
 10036e7:	89 c1                	mov    ecx,eax
 10036e9:	0f b6 43 66          	movzx  eax,BYTE PTR [ebx+0x66]
 10036ed:	c1 e0 10             	shl    eax,0x10
 10036f0:	01 c8                	add    eax,ecx
 10036f2:	0f b6 7b 64          	movzx  edi,BYTE PTR [ebx+0x64]
 10036f6:	01 c7                	add    edi,eax
 10036f8:	0f b6 43 65          	movzx  eax,BYTE PTR [ebx+0x65]
 10036fc:	c1 e0 08             	shl    eax,0x8
 10036ff:	8d 04 07             	lea    eax,[edi+eax*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:162

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
 1003702:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
 1003707:	c1 e7 08             	shl    edi,0x8
 100370a:	0f b6 4c 24 0d       	movzx  ecx,BYTE PTR [esp+0xd]
 100370f:	01 f9                	add    ecx,edi
 1003711:	01 cd                	add    ebp,ecx
 1003713:	0f af d6             	imul   edx,esi
 1003716:	01 ea                	add    edx,ebp
 1003718:	29 d0                	sub    eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:165

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
 100371a:	0f b6 4c 24 0b       	movzx  ecx,BYTE PTR [esp+0xb]
 100371f:	84 c9                	test   cl,cl
 1003721:	74 6c                	je     100378f <fatfs_init+0x313>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:167
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
 1003723:	0f b6 c9             	movzx  ecx,cl
 1003726:	ba 00 00 00 00       	mov    edx,0x0
 100372b:	f7 f1                	div    ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:169

        if(count_of_clusters < 4085)
 100372d:	3d f4 0f 00 00       	cmp    eax,0xff4
 1003732:	76 62                	jbe    1003796 <fatfs_init+0x31a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:172
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
        else if(count_of_clusters < 65525)
 1003734:	3d f4 ff 00 00       	cmp    eax,0xfff4
 1003739:	77 15                	ja     1003750 <fatfs_init+0x2d4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:175
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
 100373b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:178

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
 1003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:179
            return FAT_INIT_OK;
 1003749:	b8 00 00 00 00       	mov    eax,0x0
 100374e:	eb 4b                	jmp    100379b <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:184
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
 1003750:	c7 43 30 01 00 00 00 	mov    DWORD PTR [ebx+0x30],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:185
            return FAT_INIT_OK;
 1003757:	b8 00 00 00 00       	mov    eax,0x0
 100375c:	eb 3d                	jmp    100379b <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:63

    fatfs_fat_init(fs);

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;
 100375e:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1003763:	eb 36                	jmp    100379b <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:70
    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
        return FAT_INIT_MEDIA_ACCESS_ERROR;
 1003765:	b8 ff ff ff ff       	mov    eax,0xffffffff
 100376a:	eb 2f                	jmp    100379b <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:75

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
        return FAT_INIT_INVALID_SIGNATURE;
 100376c:	b8 fd ff ff ff       	mov    eax,0xfffffffd
 1003771:	eb 28                	jmp    100379b <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:79

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
        return FAT_INIT_ENDIAN_ERROR;
 1003773:	b8 fc ff ff ff       	mov    eax,0xfffffffc
 1003778:	eb 21                	jmp    100379b <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:115
        fs->lba_begin = 0;

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
        return FAT_INIT_MEDIA_ACCESS_ERROR;
 100377a:	b8 ff ff ff ff       	mov    eax,0xffffffff
 100377f:	eb 1a                	jmp    100379b <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:119

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
        return FAT_INIT_INVALID_SECTOR_SIZE;
 1003781:	b8 fe ff ff ff       	mov    eax,0xfffffffe
 1003786:	eb 13                	jmp    100379b <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:147

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;
 1003788:	b8 fd ff ff ff       	mov    eax,0xfffffffd
 100378d:	eb 0c                	jmp    100379b <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:189
            fs->fat_type = FAT_TYPE_32;
            return FAT_INIT_OK;
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
 100378f:	b8 fb ff ff ff       	mov    eax,0xfffffffb
 1003794:	eb 05                	jmp    100379b <fatfs_init+0x31f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:171
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;

        if(count_of_clusters < 4085)
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
 1003796:	b8 fb ff ff ff       	mov    eax,0xfffffffb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:190
            return FAT_INIT_OK;
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
}
 100379b:	83 c4 1c             	add    esp,0x1c
 100379e:	5b                   	pop    ebx
 100379f:	5e                   	pop    esi
 10037a0:	5f                   	pop    edi
 10037a1:	5d                   	pop    ebp
 10037a2:	c3                   	ret    

010037a3 <fatfs_lba_of_cluster>:
fatfs_lba_of_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:196
//-----------------------------------------------------------------------------
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
 10037a3:	53                   	push   ebx
 10037a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:197
    if (fs->fat_type == FAT_TYPE_16)
 10037a8:	83 79 30 00          	cmp    DWORD PTR [ecx+0x30],0x0
 10037ac:	75 1d                	jne    10037cb <fatfs_lba_of_cluster+0x28>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:198
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
 10037ae:	0f b7 41 28          	movzx  eax,WORD PTR [ecx+0x28]
 10037b2:	c1 e8 04             	shr    eax,0x4
 10037b5:	89 c3                	mov    ebx,eax
 10037b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 10037bb:	83 e8 02             	sub    eax,0x2
 10037be:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
 10037c1:	0f af c2             	imul   eax,edx
 10037c4:	01 d8                	add    eax,ebx
 10037c6:	03 41 04             	add    eax,DWORD PTR [ecx+0x4]
 10037c9:	eb 10                	jmp    10037db <fatfs_lba_of_cluster+0x38>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:200
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
 10037cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 10037cf:	8d 50 fe             	lea    edx,[eax-0x2]
 10037d2:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
 10037d5:	0f af c2             	imul   eax,edx
 10037d8:	03 41 04             	add    eax,DWORD PTR [ecx+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:201
}
 10037db:	5b                   	pop    ebx
 10037dc:	c3                   	ret    

010037dd <fatfs_sector_read>:
fatfs_sector_read():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:206
//-----------------------------------------------------------------------------
// fatfs_sector_read:
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
 10037dd:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:207
    return fs->disk_io.read_media(lba, target, count);
 10037e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 10037e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 10037e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 10037ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 10037f0:	ff 50 34             	call   DWORD PTR [eax+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:208
}
 10037f3:	83 c4 1c             	add    esp,0x1c
 10037f6:	c3                   	ret    

010037f7 <fatfs_sector_write>:
fatfs_sector_write():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:213
//-----------------------------------------------------------------------------
// fatfs_sector_write:
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
 10037f7:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:214
    return fs->disk_io.write_media(lba, target, count);
 10037fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 10037fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1003802:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1003806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 100380a:	ff 50 38             	call   DWORD PTR [eax+0x38]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:215
}
 100380d:	83 c4 1c             	add    esp,0x1c
 1003810:	c3                   	ret    

01003811 <fatfs_sector_reader>:
fatfs_sector_reader():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:221
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
 1003811:	55                   	push   ebp
 1003812:	57                   	push   edi
 1003813:	56                   	push   esi
 1003814:	53                   	push   ebx
 1003815:	83 ec 0c             	sub    esp,0xc
 1003818:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
 100381c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
 1003820:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:229
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
 1003824:	83 7e 30 00          	cmp    DWORD PTR [esi+0x30],0x0
 1003828:	75 1c                	jne    1003846 <fatfs_sector_reader+0x35>
 100382a:	85 c9                	test   ecx,ecx
 100382c:	75 18                	jne    1003846 <fatfs_sector_reader+0x35>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:234
    {
        if (offset < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
        else
            return 0;
 100382e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:231
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
 1003833:	39 6e 10             	cmp    DWORD PTR [esi+0x10],ebp
 1003836:	0f 86 93 00 00 00    	jbe    10038cf <fatfs_sector_reader+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:232
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
 100383c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
 100383f:	03 46 1c             	add    eax,DWORD PTR [esi+0x1c]
 1003842:	01 c5                	add    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:231
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
 1003844:	eb 46                	jmp    100388c <fatfs_sector_reader+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:243
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
 1003846:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
 1003849:	89 e8                	mov    eax,ebp
 100384b:	ba 00 00 00 00       	mov    edx,0x0
 1003850:	f7 f3                	div    ebx
 1003852:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:244
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
 1003854:	0f af d8             	imul   ebx,eax
 1003857:	29 dd                	sub    ebp,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:247

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
 1003859:	85 c0                	test   eax,eax
 100385b:	74 1b                	je     1003878 <fatfs_sector_reader+0x67>
 100385d:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:248 (discriminator 3)
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
 1003862:	83 ec 08             	sub    esp,0x8
 1003865:	51                   	push   ecx
 1003866:	56                   	push   esi
 1003867:	e8 f0 39 00 00       	call   100725c <fatfs_find_next_cluster>
 100386c:	89 c1                	mov    ecx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:247 (discriminator 3)
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
 100386e:	83 c3 01             	add    ebx,0x1
 1003871:	83 c4 10             	add    esp,0x10
 1003874:	39 df                	cmp    edi,ebx
 1003876:	75 ea                	jne    1003862 <fatfs_sector_reader+0x51>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:251
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
 1003878:	83 f9 ff             	cmp    ecx,0xffffffff
 100387b:	74 4d                	je     10038ca <fatfs_sector_reader+0xb9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:255
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
 100387d:	83 ec 08             	sub    esp,0x8
 1003880:	51                   	push   ecx
 1003881:	56                   	push   esi
 1003882:	e8 1c ff ff ff       	call   10037a3 <fatfs_lba_of_cluster>
 1003887:	83 c4 10             	add    esp,0x10
 100388a:	01 c5                	add    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:259
    }

    // User provided target array
    if (target)
 100388c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
 1003891:	74 12                	je     10038a5 <fatfs_sector_reader+0x94>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:260
        return fs->disk_io.read_media(lba, target, 1);
 1003893:	83 ec 04             	sub    esp,0x4
 1003896:	6a 01                	push   0x1
 1003898:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
 100389c:	55                   	push   ebp
 100389d:	ff 56 34             	call   DWORD PTR [esi+0x34]
 10038a0:	83 c4 10             	add    esp,0x10
 10038a3:	eb 2a                	jmp    10038cf <fatfs_sector_reader+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:268
    {
        fs->currentsector.address = lba;
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    }
    else
        return 1;
 10038a5:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:262

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
 10038aa:	3b ae 44 02 00 00    	cmp    ebp,DWORD PTR [esi+0x244]
 10038b0:	74 1d                	je     10038cf <fatfs_sector_reader+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:264
    {
        fs->currentsector.address = lba;
 10038b2:	89 ae 44 02 00 00    	mov    DWORD PTR [esi+0x244],ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:265
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
 10038b8:	83 ec 04             	sub    esp,0x4
 10038bb:	6a 01                	push   0x1
 10038bd:	8d 46 44             	lea    eax,[esi+0x44]
 10038c0:	50                   	push   eax
 10038c1:	55                   	push   ebp
 10038c2:	ff 56 34             	call   DWORD PTR [esi+0x34]
 10038c5:	83 c4 10             	add    esp,0x10
 10038c8:	eb 05                	jmp    10038cf <fatfs_sector_reader+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:252
        for (i=0; i<cluster_to_read; i++)
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
            return 0;
 10038ca:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:269
        fs->currentsector.address = lba;
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
    }
    else
        return 1;
}
 10038cf:	83 c4 0c             	add    esp,0xc
 10038d2:	5b                   	pop    ebx
 10038d3:	5e                   	pop    esi
 10038d4:	5f                   	pop    edi
 10038d5:	5d                   	pop    ebp
 10038d6:	c3                   	ret    

010038d7 <fatfs_read_sector>:
fatfs_read_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:275
//-----------------------------------------------------------------------------
// fatfs_read_sector: Read from the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
 10038d7:	56                   	push   esi
 10038d8:	53                   	push   ebx
 10038d9:	83 ec 04             	sub    esp,0x4
 10038dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 10038e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 10038e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:277
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
 10038e8:	83 7b 30 00          	cmp    DWORD PTR [ebx+0x30],0x0
 10038ec:	75 40                	jne    100392e <fatfs_read_sector+0x57>
 10038ee:	85 c0                	test   eax,eax
 10038f0:	75 3c                	jne    100392e <fatfs_read_sector+0x57>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:282
    {
        uint32 lba;

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
 10038f2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
 10038f6:	39 4b 10             	cmp    DWORD PTR [ebx+0x10],ecx
 10038f9:	76 78                	jbe    1003973 <fatfs_read_sector+0x9c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:283
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
 10038fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 10038fe:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
 1003901:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:288
        else
            return 0;

        // User target buffer passed in
        if (target)
 1003903:	85 f6                	test   esi,esi
 1003905:	74 0f                	je     1003916 <fatfs_read_sector+0x3f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:291
        {
            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
 1003907:	83 ec 04             	sub    esp,0x4
 100390a:	6a 01                	push   0x1
 100390c:	56                   	push   esi
 100390d:	50                   	push   eax
 100390e:	ff 53 34             	call   DWORD PTR [ebx+0x34]
 1003911:	83 c4 10             	add    esp,0x10
 1003914:	eb 5d                	jmp    1003973 <fatfs_read_sector+0x9c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:296
        }
        else
        {
            // Calculate read address
            fs->currentsector.address = lba;
 1003916:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:299

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
 100391c:	83 ec 04             	sub    esp,0x4
 100391f:	6a 01                	push   0x1
 1003921:	8d 53 44             	lea    edx,[ebx+0x44]
 1003924:	52                   	push   edx
 1003925:	50                   	push   eax
 1003926:	ff 53 34             	call   DWORD PTR [ebx+0x34]
 1003929:	83 c4 10             	add    esp,0x10
 100392c:	eb 45                	jmp    1003973 <fatfs_read_sector+0x9c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:306
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
 100392e:	85 f6                	test   esi,esi
 1003930:	74 1d                	je     100394f <fatfs_read_sector+0x78>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:309
        {
            // Calculate read address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
 1003932:	83 ec 08             	sub    esp,0x8
 1003935:	50                   	push   eax
 1003936:	53                   	push   ebx
 1003937:	e8 67 fe ff ff       	call   10037a3 <fatfs_lba_of_cluster>
 100393c:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:312

            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
 100393f:	6a 01                	push   0x1
 1003941:	56                   	push   esi
 1003942:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
 1003946:	50                   	push   eax
 1003947:	ff 53 34             	call   DWORD PTR [ebx+0x34]
 100394a:	83 c4 10             	add    esp,0x10
 100394d:	eb 24                	jmp    1003973 <fatfs_read_sector+0x9c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:317
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
 100394f:	83 ec 08             	sub    esp,0x8
 1003952:	50                   	push   eax
 1003953:	53                   	push   ebx
 1003954:	e8 4a fe ff ff       	call   10037a3 <fatfs_lba_of_cluster>
 1003959:	83 c4 0c             	add    esp,0xc
 100395c:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
 1003960:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:320

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1003966:	6a 01                	push   0x1
 1003968:	8d 53 44             	lea    edx,[ebx+0x44]
 100396b:	52                   	push   edx
 100396c:	50                   	push   eax
 100396d:	ff 53 34             	call   DWORD PTR [ebx+0x34]
 1003970:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:323
        }
    }
}
 1003973:	83 c4 04             	add    esp,0x4
 1003976:	5b                   	pop    ebx
 1003977:	5e                   	pop    esi
 1003978:	c3                   	ret    

01003979 <fatfs_write_sector>:
fatfs_write_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:330
// fatfs_write_sector: Write to the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
 1003979:	57                   	push   edi
 100397a:	56                   	push   esi
 100397b:	53                   	push   ebx
 100397c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1003980:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1003984:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:332
    // No write access?
    if (!fs->disk_io.write_media)
 1003988:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
 100398b:	85 f6                	test   esi,esi
 100398d:	0f 84 89 00 00 00    	je     1003a1c <fatfs_write_sector+0xa3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:336
        return 0;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
 1003993:	83 7b 30 00          	cmp    DWORD PTR [ebx+0x30],0x0
 1003997:	75 3e                	jne    10039d7 <fatfs_write_sector+0x5e>
 1003999:	85 c0                	test   eax,eax
 100399b:	75 3a                	jne    10039d7 <fatfs_write_sector+0x5e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:341
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
 100399d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
 10039a1:	39 53 10             	cmp    DWORD PTR [ebx+0x10],edx
 10039a4:	76 7b                	jbe    1003a21 <fatfs_write_sector+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:342
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
 10039a6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 10039a9:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
 10039ac:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:347
        else
            return 0;

        // User target buffer passed in
        if (target)
 10039ae:	85 ff                	test   edi,edi
 10039b0:	74 0e                	je     10039c0 <fatfs_write_sector+0x47>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:350
        {
            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
 10039b2:	83 ec 04             	sub    esp,0x4
 10039b5:	6a 01                	push   0x1
 10039b7:	57                   	push   edi
 10039b8:	50                   	push   eax
 10039b9:	ff d6                	call   esi
 10039bb:	83 c4 10             	add    esp,0x10
 10039be:	eb 61                	jmp    1003a21 <fatfs_write_sector+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:355
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = lba;
 10039c0:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:358

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
 10039c6:	83 ec 04             	sub    esp,0x4
 10039c9:	6a 01                	push   0x1
 10039cb:	83 c3 44             	add    ebx,0x44
 10039ce:	53                   	push   ebx
 10039cf:	50                   	push   eax
 10039d0:	ff d6                	call   esi
 10039d2:	83 c4 10             	add    esp,0x10
 10039d5:	eb 4a                	jmp    1003a21 <fatfs_write_sector+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:365
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
 10039d7:	85 ff                	test   edi,edi
 10039d9:	74 1c                	je     10039f7 <fatfs_write_sector+0x7e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:368
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
 10039db:	83 ec 08             	sub    esp,0x8
 10039de:	50                   	push   eax
 10039df:	53                   	push   ebx
 10039e0:	e8 be fd ff ff       	call   10037a3 <fatfs_lba_of_cluster>
 10039e5:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:371

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
 10039e8:	6a 01                	push   0x1
 10039ea:	57                   	push   edi
 10039eb:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
 10039ef:	50                   	push   eax
 10039f0:	ff d6                	call   esi
 10039f2:	83 c4 10             	add    esp,0x10
 10039f5:	eb 2a                	jmp    1003a21 <fatfs_write_sector+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:376
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
 10039f7:	83 ec 08             	sub    esp,0x8
 10039fa:	50                   	push   eax
 10039fb:	53                   	push   ebx
 10039fc:	e8 a2 fd ff ff       	call   10037a3 <fatfs_lba_of_cluster>
 1003a01:	83 c4 0c             	add    esp,0xc
 1003a04:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
 1003a08:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:379

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1003a0e:	6a 01                	push   0x1
 1003a10:	83 c3 44             	add    ebx,0x44
 1003a13:	53                   	push   ebx
 1003a14:	50                   	push   eax
 1003a15:	ff d6                	call   esi
 1003a17:	83 c4 10             	add    esp,0x10
 1003a1a:	eb 05                	jmp    1003a21 <fatfs_write_sector+0xa8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:333
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
 1003a1c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:382

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
        }
    }
}
 1003a21:	5b                   	pop    ebx
 1003a22:	5e                   	pop    esi
 1003a23:	5f                   	pop    edi
 1003a24:	c3                   	ret    

01003a25 <fatfs_show_details>:
fatfs_show_details():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:388
#endif
//-----------------------------------------------------------------------------
// fatfs_show_details: Show the details about the filesystem
//-----------------------------------------------------------------------------
void fatfs_show_details(struct fatfs *fs)
{
 1003a25:	53                   	push   ebx
 1003a26:	83 ec 14             	sub    esp,0x14
 1003a29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:389
    FAT_PRINTF(("FAT details:\r\n"));
 1003a2d:	68 6b 63 06 01       	push   0x106636b
 1003a32:	e8 a8 61 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:390
    FAT_PRINTF((" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16"));
 1003a37:	83 c4 08             	add    esp,0x8
 1003a3a:	83 7b 30 01          	cmp    DWORD PTR [ebx+0x30],0x1
 1003a3e:	ba 65 63 06 01       	mov    edx,0x1066365
 1003a43:	b8 5f 63 06 01       	mov    eax,0x106635f
 1003a48:	0f 45 c2             	cmovne eax,edx
 1003a4b:	50                   	push   eax
 1003a4c:	68 7a 63 06 01       	push   0x106637a
 1003a51:	e8 89 61 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:391
    FAT_PRINTF((" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster));
 1003a56:	83 c4 08             	add    esp,0x8
 1003a59:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 1003a5c:	68 1c 0c 04 01       	push   0x1040c1c
 1003a61:	e8 79 61 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:392
    FAT_PRINTF((" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba));
 1003a66:	83 c4 08             	add    esp,0x8
 1003a69:	ff 73 14             	push   DWORD PTR [ebx+0x14]
 1003a6c:	68 84 63 06 01       	push   0x1066384
 1003a71:	e8 69 61 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:393
    FAT_PRINTF((" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba));
 1003a76:	83 c4 08             	add    esp,0x8
 1003a79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 1003a7c:	68 9c 63 06 01       	push   0x106639c
 1003a81:	e8 59 61 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:394
    FAT_PRINTF((" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster));
 1003a86:	83 c4 08             	add    esp,0x8
 1003a89:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1003a8c:	50                   	push   eax
 1003a8d:	68 b8 63 06 01       	push   0x10663b8
 1003a92:	e8 48 61 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:395
}
 1003a97:	83 c4 18             	add    esp,0x18
 1003a9a:	5b                   	pop    ebx
 1003a9b:	c3                   	ret    

01003a9c <fatfs_get_root_cluster>:
fatfs_get_root_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:402
// fatfs_get_root_cluster: Get the root dir cluster
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
 1003a9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1003aa0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:403
}
 1003aa3:	c3                   	ret    

01003aa4 <fatfs_get_file_entry>:
fatfs_get_file_entry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:408
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
 1003aa4:	55                   	push   ebp
 1003aa5:	57                   	push   edi
 1003aa6:	56                   	push   esi
 1003aa7:	53                   	push   ebx
 1003aa8:	81 ec 44 01 00 00    	sub    esp,0x144
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:419
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
 1003aae:	6a 01                	push   0x1
 1003ab0:	8d 44 24 29          	lea    eax,[esp+0x29]
 1003ab4:	50                   	push   eax
 1003ab5:	e8 12 29 00 00       	call   10063cc <fatfs_lfn_cache_init>
 1003aba:	83 c4 10             	add    esp,0x10
 1003abd:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 1003ac4:	00 
 1003ac5:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
 1003acc:	8d a8 44 02 00 00    	lea    ebp,[eax+0x244]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:446
                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
                    fatfs_lfn_cache_init(&lfn, 0);

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
 1003ad2:	8d 7c 24 1d          	lea    edi,[esp+0x1d]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:425

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
 1003ad6:	6a 00                	push   0x0
 1003ad8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1003adc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
 1003ae3:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
 1003aea:	e8 22 fd ff ff       	call   1003811 <fatfs_sector_reader>
 1003aef:	83 c4 10             	add    esp,0x10
 1003af2:	85 c0                	test   eax,eax
 1003af4:	0f 84 b7 01 00 00    	je     1003cb1 <fatfs_get_file_entry+0x20d>
 1003afa:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
 1003b01:	8d 58 44             	lea    ebx,[eax+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:434
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
 1003b04:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:438

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
 1003b06:	83 ec 0c             	sub    esp,0xc
 1003b09:	53                   	push   ebx
 1003b0a:	e8 d1 29 00 00       	call   10064e0 <fatfs_entry_lfn_text>
 1003b0f:	83 c4 10             	add    esp,0x10
 1003b12:	85 c0                	test   eax,eax
 1003b14:	74 12                	je     1003b28 <fatfs_get_file_entry+0x84>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:439
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
 1003b16:	83 ec 08             	sub    esp,0x8
 1003b19:	53                   	push   ebx
 1003b1a:	57                   	push   edi
 1003b1b:	e8 e8 28 00 00       	call   1006408 <fatfs_lfn_cache_entry>
 1003b20:	83 c4 10             	add    esp,0x10
 1003b23:	e9 74 01 00 00       	jmp    1003c9c <fatfs_get_file_entry+0x1f8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:442

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
 1003b28:	83 ec 0c             	sub    esp,0xc
 1003b2b:	53                   	push   ebx
 1003b2c:	e8 c3 29 00 00       	call   10064f4 <fatfs_entry_lfn_invalid>
 1003b31:	83 c4 10             	add    esp,0x10
 1003b34:	85 c0                	test   eax,eax
 1003b36:	74 13                	je     1003b4b <fatfs_get_file_entry+0xa7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:443
                    fatfs_lfn_cache_init(&lfn, 0);
 1003b38:	83 ec 08             	sub    esp,0x8
 1003b3b:	6a 00                	push   0x0
 1003b3d:	57                   	push   edi
 1003b3e:	e8 89 28 00 00       	call   10063cc <fatfs_lfn_cache_init>
 1003b43:	83 c4 10             	add    esp,0x10
 1003b46:	e9 51 01 00 00       	jmp    1003c9c <fatfs_get_file_entry+0x1f8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:446

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
 1003b4b:	83 ec 08             	sub    esp,0x8
 1003b4e:	53                   	push   ebx
 1003b4f:	57                   	push   edi
 1003b50:	e8 cb 29 00 00       	call   1006520 <fatfs_entry_lfn_exists>
 1003b55:	83 c4 10             	add    esp,0x10
 1003b58:	85 c0                	test   eax,eax
 1003b5a:	74 52                	je     1003bae <fatfs_get_file_entry+0x10a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:448
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
 1003b5c:	83 ec 0c             	sub    esp,0xc
 1003b5f:	57                   	push   edi
 1003b60:	e8 4d 29 00 00       	call   10064b2 <fatfs_lfn_cache_get>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:451

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find))
 1003b65:	83 c4 08             	add    esp,0x8
 1003b68:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
 1003b6f:	50                   	push   eax
 1003b70:	e8 a6 31 00 00       	call   1006d1b <fatfs_compare_names>
 1003b75:	83 c4 10             	add    esp,0x10
 1003b78:	85 c0                	test   eax,eax
 1003b7a:	74 1f                	je     1003b9b <fatfs_get_file_entry+0xf7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:453
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
 1003b7c:	83 ec 04             	sub    esp,0x4
 1003b7f:	6a 20                	push   0x20
 1003b81:	53                   	push   ebx
 1003b82:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
 1003b89:	e8 e2 5a 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:454
                        return 1;
 1003b8e:	83 c4 10             	add    esp,0x10
 1003b91:	b8 01 00 00 00       	mov    eax,0x1
 1003b96:	e9 1b 01 00 00       	jmp    1003cb6 <fatfs_get_file_entry+0x212>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:457
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
 1003b9b:	83 ec 08             	sub    esp,0x8
 1003b9e:	6a 00                	push   0x0
 1003ba0:	57                   	push   edi
 1003ba1:	e8 26 28 00 00       	call   10063cc <fatfs_lfn_cache_init>
 1003ba6:	83 c4 10             	add    esp,0x10
 1003ba9:	e9 ee 00 00 00       	jmp    1003c9c <fatfs_get_file_entry+0x1f8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:462
                }
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
 1003bae:	83 ec 0c             	sub    esp,0xc
 1003bb1:	53                   	push   ebx
 1003bb2:	e8 b4 29 00 00       	call   100656b <fatfs_entry_sfn_only>
 1003bb7:	83 c4 10             	add    esp,0x10
 1003bba:	85 c0                	test   eax,eax
 1003bbc:	0f 84 da 00 00 00    	je     1003c9c <fatfs_get_file_entry+0x1f8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:464
                {
                    memset(short_filename, 0, sizeof(short_filename));
 1003bc2:	83 ec 04             	sub    esp,0x4
 1003bc5:	6a 0d                	push   0xd
 1003bc7:	6a 00                	push   0x0
 1003bc9:	8d 84 24 2f 01 00 00 	lea    eax,[esp+0x12f]
 1003bd0:	50                   	push   eax
 1003bd1:	e8 e9 52 00 00       	call   1008ebf <memset>
 1003bd6:	83 c4 10             	add    esp,0x10
 1003bd9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:468 (discriminator 3)

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
 1003bde:	0f b6 14 06          	movzx  edx,BYTE PTR [esi+eax*1]
 1003be2:	88 94 04 23 01 00 00 	mov    BYTE PTR [esp+eax*1+0x123],dl
 1003be9:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:467 (discriminator 3)
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
 1003bec:	83 f8 08             	cmp    eax,0x8
 1003bef:	75 ed                	jne    1003bde <fatfs_get_file_entry+0x13a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:474

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 1003bf1:	0f b6 46 08          	movzx  eax,BYTE PTR [esi+0x8]
 1003bf5:	88 84 24 2c 01 00 00 	mov    BYTE PTR [esp+0x12c],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:476
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
 1003bfc:	3c 20                	cmp    al,0x20
 1003bfe:	0f 95 c0             	setne  al
 1003c01:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:474

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 1003c04:	0f b6 56 09          	movzx  edx,BYTE PTR [esi+0x9]
 1003c08:	88 94 24 2d 01 00 00 	mov    BYTE PTR [esp+0x12d],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:476
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
 1003c0f:	80 fa 20             	cmp    dl,0x20
 1003c12:	ba 01 00 00 00       	mov    edx,0x1
 1003c17:	0f 45 c2             	cmovne eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:474

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 1003c1a:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
 1003c1e:	88 94 24 2e 01 00 00 	mov    BYTE PTR [esp+0x12e],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:475
                        if (directoryEntry->Name[i] != ' ')
 1003c25:	80 fa 20             	cmp    dl,0x20
 1003c28:	75 04                	jne    1003c2e <fatfs_get_file_entry+0x18a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:480 (discriminator 2)
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
 1003c2a:	85 c0                	test   eax,eax
 1003c2c:	74 1e                	je     1003c4c <fatfs_get_file_entry+0x1a8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:484
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
                            short_filename[8] = '.';
 1003c2e:	80 bc 24 23 01 00 00 	cmp    BYTE PTR [esp+0x123],0x2e
 1003c35:	2e 
 1003c36:	ba 2e 00 00 00       	mov    edx,0x2e
 1003c3b:	b8 20 00 00 00       	mov    eax,0x20
 1003c40:	0f 45 c2             	cmovne eax,edx
 1003c43:	88 84 24 2b 01 00 00 	mov    BYTE PTR [esp+0x12b],al
 1003c4a:	eb 08                	jmp    1003c54 <fatfs_get_file_entry+0x1b0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:489
                        else
                            short_filename[8] = ' ';
                    }
                    else
                        short_filename[8] = ' ';
 1003c4c:	c6 84 24 2b 01 00 00 	mov    BYTE PTR [esp+0x12b],0x20
 1003c53:	20 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:492

                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find))
 1003c54:	83 ec 08             	sub    esp,0x8
 1003c57:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
 1003c5e:	8d 84 24 2f 01 00 00 	lea    eax,[esp+0x12f]
 1003c65:	50                   	push   eax
 1003c66:	e8 b0 30 00 00       	call   1006d1b <fatfs_compare_names>
 1003c6b:	83 c4 10             	add    esp,0x10
 1003c6e:	85 c0                	test   eax,eax
 1003c70:	74 1c                	je     1003c8e <fatfs_get_file_entry+0x1ea>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:494
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
 1003c72:	83 ec 04             	sub    esp,0x4
 1003c75:	6a 20                	push   0x20
 1003c77:	56                   	push   esi
 1003c78:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
 1003c7f:	e8 ec 59 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:495
                        return 1;
 1003c84:	83 c4 10             	add    esp,0x10
 1003c87:	b8 01 00 00 00       	mov    eax,0x1
 1003c8c:	eb 28                	jmp    1003cb6 <fatfs_get_file_entry+0x212>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:498
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
 1003c8e:	83 ec 08             	sub    esp,0x8
 1003c91:	6a 00                	push   0x0
 1003c93:	57                   	push   edi
 1003c94:	e8 33 27 00 00       	call   10063cc <fatfs_lfn_cache_init>
 1003c99:	83 c4 10             	add    esp,0x10
 1003c9c:	83 c3 20             	add    ebx,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:428 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1003c9f:	39 eb                	cmp    ebx,ebp
 1003ca1:	0f 85 5d fe ff ff    	jne    1003b04 <fatfs_get_file_entry+0x60>
 1003ca7:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
 1003cac:	e9 25 fe ff ff       	jmp    1003ad6 <fatfs_get_file_entry+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:506
        }
        else
            break;
    } // End of while loop

    return 0;
 1003cb1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:507
}
 1003cb6:	81 c4 3c 01 00 00    	add    esp,0x13c
 1003cbc:	5b                   	pop    ebx
 1003cbd:	5e                   	pop    esi
 1003cbe:	5f                   	pop    edi
 1003cbf:	5d                   	pop    ebp
 1003cc0:	c3                   	ret    

01003cc1 <fatfs_sfn_exists>:
fatfs_sfn_exists():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:514
// fatfs_sfn_exists: Check if a short filename exists.
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
 1003cc1:	55                   	push   ebp
 1003cc2:	57                   	push   edi
 1003cc3:	56                   	push   esi
 1003cc4:	53                   	push   ebx
 1003cc5:	83 ec 0c             	sub    esp,0xc
 1003cc8:	bd 00 00 00 00       	mov    ebp,0x0
 1003ccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 1003cd1:	8d b8 44 02 00 00    	lea    edi,[eax+0x244]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:524

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
 1003cd7:	6a 00                	push   0x0
 1003cd9:	55                   	push   ebp
 1003cda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1003cde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1003ce2:	e8 2a fb ff ff       	call   1003811 <fatfs_sector_reader>
 1003ce7:	83 c4 10             	add    esp,0x10
 1003cea:	85 c0                	test   eax,eax
 1003cec:	74 5e                	je     1003d4c <fatfs_sfn_exists+0x8b>
 1003cee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
 1003cf2:	8d 58 44             	lea    ebx,[eax+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:537
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
 1003cf5:	83 ec 0c             	sub    esp,0xc
 1003cf8:	53                   	push   ebx
 1003cf9:	e8 e2 27 00 00       	call   10064e0 <fatfs_entry_lfn_text>
 1003cfe:	83 c4 10             	add    esp,0x10
 1003d01:	85 c0                	test   eax,eax
 1003d03:	75 36                	jne    1003d3b <fatfs_sfn_exists+0x7a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:541
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
 1003d05:	83 ec 0c             	sub    esp,0xc
 1003d08:	53                   	push   ebx
 1003d09:	e8 e6 27 00 00       	call   10064f4 <fatfs_entry_lfn_invalid>
 1003d0e:	83 c4 10             	add    esp,0x10
 1003d11:	85 c0                	test   eax,eax
 1003d13:	75 26                	jne    1003d3b <fatfs_sfn_exists+0x7a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:546
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
 1003d15:	83 ec 0c             	sub    esp,0xc
 1003d18:	53                   	push   ebx
 1003d19:	e8 4d 28 00 00       	call   100656b <fatfs_entry_sfn_only>
 1003d1e:	83 c4 10             	add    esp,0x10
 1003d21:	85 c0                	test   eax,eax
 1003d23:	74 16                	je     1003d3b <fatfs_sfn_exists+0x7a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:548
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
 1003d25:	83 ec 04             	sub    esp,0x4
 1003d28:	6a 0b                	push   0xb
 1003d2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 1003d2e:	53                   	push   ebx
 1003d2f:	e8 e8 5f 00 00       	call   1009d1c <strncmp>
 1003d34:	83 c4 10             	add    esp,0x10
 1003d37:	85 c0                	test   eax,eax
 1003d39:	74 0c                	je     1003d47 <fatfs_sfn_exists+0x86>
 1003d3b:	83 c3 20             	add    ebx,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:527 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1003d3e:	39 fb                	cmp    ebx,edi
 1003d40:	75 b3                	jne    1003cf5 <fatfs_sfn_exists+0x34>
 1003d42:	83 c5 01             	add    ebp,0x1
 1003d45:	eb 90                	jmp    1003cd7 <fatfs_sfn_exists+0x16>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:549
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
                        return 1;
 1003d47:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:558
        else
            break;
    } // End of while loop

    return 0;
}
 1003d4c:	83 c4 0c             	add    esp,0xc
 1003d4f:	5b                   	pop    ebx
 1003d50:	5e                   	pop    esi
 1003d51:	5f                   	pop    edi
 1003d52:	5d                   	pop    ebp
 1003d53:	c3                   	ret    

01003d54 <fatfs_update_timestamps>:
fatfs_update_timestamps():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:565
//-------------------------------------------------------------
// fatfs_update_timestamps: Update date/time details
//-------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access)
{
 1003d54:	57                   	push   edi
 1003d55:	56                   	push   esi
 1003d56:	53                   	push   ebx
 1003d57:	83 ec 1c             	sub    esp,0x1c
 1003d5a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:572
    struct tm * time_info;
    uint16 fat_time;
    uint16 fat_date;

    // Get system time
    time(&time_now);
 1003d5e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
 1003d62:	53                   	push   ebx
 1003d63:	e8 7c 60 00 00       	call   1009de4 <time>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:575

    // Convert to local time
    time_info = localtime(&time_now);
 1003d68:	89 1c 24             	mov    DWORD PTR [esp],ebx
 1003d6b:	e8 03 63 00 00       	call   100a073 <localtime>
 1003d70:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:578

    // Convert time to FAT format
    fat_time = fatfs_convert_to_fat_time(time_info->tm_hour, time_info->tm_min, time_info->tm_sec);
 1003d72:	83 c4 0c             	add    esp,0xc
 1003d75:	ff 30                	push   DWORD PTR [eax]
 1003d77:	ff 70 04             	push   DWORD PTR [eax+0x4]
 1003d7a:	ff 70 08             	push   DWORD PTR [eax+0x8]
 1003d7d:	e8 9a 2c 00 00       	call   1006a1c <fatfs_convert_to_fat_time>
 1003d82:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:581

    // Convert date to FAT format
    fat_date = fatfs_convert_to_fat_date(time_info->tm_mday, time_info->tm_mon + 1, time_info->tm_year + 1900);
 1003d84:	83 c4 0c             	add    esp,0xc
 1003d87:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
 1003d8a:	05 6c 07 00 00       	add    eax,0x76c
 1003d8f:	50                   	push   eax
 1003d90:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
 1003d93:	83 c0 01             	add    eax,0x1
 1003d96:	50                   	push   eax
 1003d97:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 1003d9a:	e8 a3 2c 00 00       	call   1006a42 <fatfs_convert_to_fat_date>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:584

    // Update requested fields
    if (create)
 1003d9f:	83 c4 10             	add    esp,0x10
 1003da2:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
 1003da7:	74 1a                	je     1003dc3 <fatfs_update_timestamps+0x6f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:586
    {
        directoryEntry->CrtTime[1] = fat_time >> 8;
 1003da9:	89 fa                	mov    edx,edi
 1003dab:	66 c1 ea 08          	shr    dx,0x8
 1003daf:	88 56 0f             	mov    BYTE PTR [esi+0xf],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:587
        directoryEntry->CrtTime[0] = fat_time >> 0;
 1003db2:	89 f9                	mov    ecx,edi
 1003db4:	88 4e 0e             	mov    BYTE PTR [esi+0xe],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:588
        directoryEntry->CrtDate[1] = fat_date >> 8;
 1003db7:	89 c2                	mov    edx,eax
 1003db9:	66 c1 ea 08          	shr    dx,0x8
 1003dbd:	88 56 11             	mov    BYTE PTR [esi+0x11],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:589
        directoryEntry->CrtDate[0] = fat_date >> 0;
 1003dc0:	88 46 10             	mov    BYTE PTR [esi+0x10],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:592
    }

    if (modify)
 1003dc3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
 1003dc8:	74 1a                	je     1003de4 <fatfs_update_timestamps+0x90>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:594
    {
        directoryEntry->WrtTime[1] = fat_time >> 8;
 1003dca:	89 fa                	mov    edx,edi
 1003dcc:	66 c1 ea 08          	shr    dx,0x8
 1003dd0:	88 56 17             	mov    BYTE PTR [esi+0x17],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:595
        directoryEntry->WrtTime[0] = fat_time >> 0;
 1003dd3:	89 f9                	mov    ecx,edi
 1003dd5:	88 4e 16             	mov    BYTE PTR [esi+0x16],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:596
        directoryEntry->WrtDate[1] = fat_date >> 8;
 1003dd8:	89 c2                	mov    edx,eax
 1003dda:	66 c1 ea 08          	shr    dx,0x8
 1003dde:	88 56 19             	mov    BYTE PTR [esi+0x19],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:597
        directoryEntry->WrtDate[0] = fat_date >> 0;
 1003de1:	88 46 18             	mov    BYTE PTR [esi+0x18],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:600
    }

    if (access)
 1003de4:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
 1003de9:	74 0c                	je     1003df7 <fatfs_update_timestamps+0xa3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:604
    {
        directoryEntry->LstAccDate[1] = fat_time >> 8;
        directoryEntry->LstAccDate[0] = fat_time >> 0;
        directoryEntry->LstAccDate[1] = fat_date >> 8;
 1003deb:	89 c2                	mov    edx,eax
 1003ded:	66 c1 ea 08          	shr    dx,0x8
 1003df1:	88 56 13             	mov    BYTE PTR [esi+0x13],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:605
        directoryEntry->LstAccDate[0] = fat_date >> 0;
 1003df4:	88 46 12             	mov    BYTE PTR [esi+0x12],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:609
    }

    return 1;
}
 1003df7:	b8 01 00 00 00       	mov    eax,0x1
 1003dfc:	83 c4 10             	add    esp,0x10
 1003dff:	5b                   	pop    ebx
 1003e00:	5e                   	pop    esi
 1003e01:	5f                   	pop    edi
 1003e02:	c3                   	ret    

01003e03 <fatfs_update_file_length>:
fatfs_update_file_length():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:617
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
 1003e03:	55                   	push   ebp
 1003e04:	57                   	push   edi
 1003e05:	56                   	push   esi
 1003e06:	53                   	push   ebx
 1003e07:	83 ec 1c             	sub    esp,0x1c
 1003e0a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:624
    uint16 recordoffset = 0;
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
 1003e0e:	83 7e 38 00          	cmp    DWORD PTR [esi+0x38],0x0
 1003e12:	0f 84 cb 00 00 00    	je     1003ee3 <fatfs_update_file_length+0xe0>
 1003e18:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 1003e1f:	00 
 1003e20:	8d be 44 02 00 00    	lea    edi,[esi+0x244]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:631

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
 1003e26:	6a 00                	push   0x0
 1003e28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1003e2c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 1003e30:	56                   	push   esi
 1003e31:	e8 db f9 ff ff       	call   1003811 <fatfs_sector_reader>
 1003e36:	83 c4 10             	add    esp,0x10
 1003e39:	85 c0                	test   eax,eax
 1003e3b:	0f 84 a7 00 00 00    	je     1003ee8 <fatfs_update_file_length+0xe5>
 1003e41:	8d 5e 44             	lea    ebx,[esi+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:640
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
 1003e44:	8d 6e 44             	lea    ebp,[esi+0x44]
 1003e47:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:644

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
 1003e4b:	83 ec 0c             	sub    esp,0xc
 1003e4e:	53                   	push   ebx
 1003e4f:	e8 8c 26 00 00       	call   10064e0 <fatfs_entry_lfn_text>
 1003e54:	83 c4 10             	add    esp,0x10
 1003e57:	85 c0                	test   eax,eax
 1003e59:	75 73                	jne    1003ece <fatfs_update_file_length+0xcb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:648
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
 1003e5b:	83 ec 0c             	sub    esp,0xc
 1003e5e:	53                   	push   ebx
 1003e5f:	e8 90 26 00 00       	call   10064f4 <fatfs_entry_lfn_invalid>
 1003e64:	83 c4 10             	add    esp,0x10
 1003e67:	85 c0                	test   eax,eax
 1003e69:	75 63                	jne    1003ece <fatfs_update_file_length+0xcb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:654
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
 1003e6b:	83 ec 0c             	sub    esp,0xc
 1003e6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1003e72:	e8 f4 26 00 00       	call   100656b <fatfs_entry_sfn_only>
 1003e77:	83 c4 10             	add    esp,0x10
 1003e7a:	85 c0                	test   eax,eax
 1003e7c:	74 50                	je     1003ece <fatfs_update_file_length+0xcb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:656
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
 1003e7e:	83 ec 04             	sub    esp,0x4
 1003e81:	6a 0b                	push   0xb
 1003e83:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
 1003e87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1003e8b:	e8 8c 5e 00 00       	call   1009d1c <strncmp>
 1003e90:	83 c4 10             	add    esp,0x10
 1003e93:	85 c0                	test   eax,eax
 1003e95:	75 37                	jne    1003ece <fatfs_update_file_length+0xcb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:658
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
 1003e97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
 1003e9b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
 1003e9f:	89 47 1c             	mov    DWORD PTR [edi+0x1c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:662

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
 1003ea2:	6a 01                	push   0x1
 1003ea4:	6a 01                	push   0x1
 1003ea6:	6a 00                	push   0x0
 1003ea8:	57                   	push   edi
 1003ea9:	e8 a6 fe ff ff       	call   1003d54 <fatfs_update_timestamps>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:666
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
 1003eae:	83 c4 0c             	add    esp,0xc
 1003eb1:	6a 20                	push   0x20
 1003eb3:	57                   	push   edi
 1003eb4:	57                   	push   edi
 1003eb5:	e8 b6 57 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:669

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1003eba:	83 c4 0c             	add    esp,0xc
 1003ebd:	6a 01                	push   0x1
 1003ebf:	55                   	push   ebp
 1003ec0:	ff b6 44 02 00 00    	push   DWORD PTR [esi+0x244]
 1003ec6:	ff 56 38             	call   DWORD PTR [esi+0x38]
 1003ec9:	83 c4 10             	add    esp,0x10
 1003ecc:	eb 1a                	jmp    1003ee8 <fatfs_update_file_length+0xe5>
 1003ece:	83 c3 20             	add    ebx,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:634 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1003ed1:	39 fb                	cmp    ebx,edi
 1003ed3:	0f 85 6b ff ff ff    	jne    1003e44 <fatfs_update_file_length+0x41>
 1003ed9:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
 1003ede:	e9 43 ff ff ff       	jmp    1003e26 <fatfs_update_file_length+0x23>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:625
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
 1003ee3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:679
        else
            break;
    } // End of while loop

    return 0;
}
 1003ee8:	83 c4 1c             	add    esp,0x1c
 1003eeb:	5b                   	pop    ebx
 1003eec:	5e                   	pop    esi
 1003eed:	5f                   	pop    edi
 1003eee:	5d                   	pop    ebp
 1003eef:	c3                   	ret    

01003ef0 <fatfs_mark_file_deleted>:
fatfs_mark_file_deleted():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:687
// fatfs_mark_file_deleted: Find a SFN entry and mark if as deleted
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
 1003ef0:	55                   	push   ebp
 1003ef1:	57                   	push   edi
 1003ef2:	56                   	push   esi
 1003ef3:	53                   	push   ebx
 1003ef4:	83 ec 1c             	sub    esp,0x1c
 1003ef7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:694
    uint16 recordoffset = 0;
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
 1003efb:	83 7e 38 00          	cmp    DWORD PTR [esi+0x38],0x0
 1003eff:	0f 84 c7 00 00 00    	je     1003fcc <fatfs_mark_file_deleted+0xdc>
 1003f05:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 1003f0c:	00 
 1003f0d:	8d be 44 02 00 00    	lea    edi,[esi+0x244]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:701

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
 1003f13:	6a 00                	push   0x0
 1003f15:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1003f19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 1003f1d:	56                   	push   esi
 1003f1e:	e8 ee f8 ff ff       	call   1003811 <fatfs_sector_reader>
 1003f23:	83 c4 10             	add    esp,0x10
 1003f26:	85 c0                	test   eax,eax
 1003f28:	0f 84 a3 00 00 00    	je     1003fd1 <fatfs_mark_file_deleted+0xe1>
 1003f2e:	8d 5e 44             	lea    ebx,[esi+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:710
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
 1003f31:	8d 6e 44             	lea    ebp,[esi+0x44]
 1003f34:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:714

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
 1003f38:	83 ec 0c             	sub    esp,0xc
 1003f3b:	53                   	push   ebx
 1003f3c:	e8 9f 25 00 00       	call   10064e0 <fatfs_entry_lfn_text>
 1003f41:	83 c4 10             	add    esp,0x10
 1003f44:	85 c0                	test   eax,eax
 1003f46:	75 6f                	jne    1003fb7 <fatfs_mark_file_deleted+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:718
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
 1003f48:	83 ec 0c             	sub    esp,0xc
 1003f4b:	53                   	push   ebx
 1003f4c:	e8 a3 25 00 00       	call   10064f4 <fatfs_entry_lfn_invalid>
 1003f51:	83 c4 10             	add    esp,0x10
 1003f54:	85 c0                	test   eax,eax
 1003f56:	75 5f                	jne    1003fb7 <fatfs_mark_file_deleted+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:724
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
 1003f58:	83 ec 0c             	sub    esp,0xc
 1003f5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1003f5f:	e8 07 26 00 00       	call   100656b <fatfs_entry_sfn_only>
 1003f64:	83 c4 10             	add    esp,0x10
 1003f67:	85 c0                	test   eax,eax
 1003f69:	74 4c                	je     1003fb7 <fatfs_mark_file_deleted+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:726
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
 1003f6b:	83 ec 04             	sub    esp,0x4
 1003f6e:	6a 0b                	push   0xb
 1003f70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
 1003f74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1003f78:	e8 9f 5d 00 00       	call   1009d1c <strncmp>
 1003f7d:	83 c4 10             	add    esp,0x10
 1003f80:	85 c0                	test   eax,eax
 1003f82:	75 33                	jne    1003fb7 <fatfs_mark_file_deleted+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:729
                    {
                        // Mark as deleted
                        directoryEntry->Name[0] = FILE_HEADER_DELETED;
 1003f84:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
 1003f88:	c6 07 e5             	mov    BYTE PTR [edi],0xe5
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:733

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
 1003f8b:	6a 01                	push   0x1
 1003f8d:	6a 01                	push   0x1
 1003f8f:	6a 00                	push   0x0
 1003f91:	57                   	push   edi
 1003f92:	e8 bd fd ff ff       	call   1003d54 <fatfs_update_timestamps>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:737
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
 1003f97:	83 c4 0c             	add    esp,0xc
 1003f9a:	6a 20                	push   0x20
 1003f9c:	57                   	push   edi
 1003f9d:	57                   	push   edi
 1003f9e:	e8 cd 56 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:740

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1003fa3:	83 c4 0c             	add    esp,0xc
 1003fa6:	6a 01                	push   0x1
 1003fa8:	55                   	push   ebp
 1003fa9:	ff b6 44 02 00 00    	push   DWORD PTR [esi+0x244]
 1003faf:	ff 56 38             	call   DWORD PTR [esi+0x38]
 1003fb2:	83 c4 10             	add    esp,0x10
 1003fb5:	eb 1a                	jmp    1003fd1 <fatfs_mark_file_deleted+0xe1>
 1003fb7:	83 c3 20             	add    ebx,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:704 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1003fba:	39 fb                	cmp    ebx,edi
 1003fbc:	0f 85 6f ff ff ff    	jne    1003f31 <fatfs_mark_file_deleted+0x41>
 1003fc2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
 1003fc7:	e9 47 ff ff ff       	jmp    1003f13 <fatfs_mark_file_deleted+0x23>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:695
    int x=0;
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
 1003fcc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:750
        else
            break;
    } // End of while loop

    return 0;
}
 1003fd1:	83 c4 1c             	add    esp,0x1c
 1003fd4:	5b                   	pop    ebx
 1003fd5:	5e                   	pop    esi
 1003fd6:	5f                   	pop    edi
 1003fd7:	5d                   	pop    ebp
 1003fd8:	c3                   	ret    

01003fd9 <fatfs_list_directory_start>:
fatfs_list_directory_start():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:757
//-----------------------------------------------------------------------------
// fatfs_list_directory_start: Initialise a directory listing procedure
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
 1003fd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:758
    dirls->cluster = StartCluster;
 1003fdd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1003fe1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:759
    dirls->sector = 0;
 1003fe4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:760
    dirls->offset = 0;
 1003fea:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
 1003fee:	c3                   	ret    

01003fef <fatfs_list_directory_next>:
fatfs_list_directory_next():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:769
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
 1003fef:	55                   	push   ebp
 1003ff0:	57                   	push   edi
 1003ff1:	56                   	push   esi
 1003ff2:	53                   	push   ebx
 1003ff3:	81 ec 34 01 00 00    	sub    esp,0x134
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:780
    struct lfn_cache lfn;
    int dotRequired = 0;
    int result = 0;

    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
 1003ff9:	6a 00                	push   0x0
 1003ffb:	8d 44 24 19          	lea    eax,[esp+0x19]
 1003fff:	50                   	push   eax
 1004000:	e8 c7 23 00 00       	call   10063cc <fatfs_lfn_cache_init>
 1004005:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:794
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
 1004008:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
 100400f:	8d 78 44             	lea    edi,[eax+0x44]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:799

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
 1004012:	8d 6c 24 0d          	lea    ebp,[esp+0xd]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:785
    fatfs_lfn_cache_init(&lfn, 0);

    while (1)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
 1004016:	6a 00                	push   0x0
 1004018:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
 100401f:	ff 30                	push   DWORD PTR [eax]
 1004021:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
 1004028:	ff 70 04             	push   DWORD PTR [eax+0x4]
 100402b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
 1004032:	e8 da f7 ff ff       	call   1003811 <fatfs_sector_reader>
 1004037:	83 c4 10             	add    esp,0x10
 100403a:	85 c0                	test   eax,eax
 100403c:	0f 84 fa 02 00 00    	je     100433c <fatfs_list_directory_next+0x34d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:788
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1004042:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
 1004049:	0f b6 70 08          	movzx  esi,BYTE PTR [eax+0x8]
 100404d:	89 f0                	mov    eax,esi
 100404f:	3c 0f                	cmp    al,0xf
 1004051:	0f 87 d2 02 00 00    	ja     1004329 <fatfs_list_directory_next+0x33a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:794
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
 1004057:	89 f3                	mov    ebx,esi
 1004059:	c1 e3 05             	shl    ebx,0x5
 100405c:	81 e3 e0 1f 00 00    	and    ebx,0x1fe0
 1004062:	01 fb                	add    ebx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:798

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
 1004064:	83 ec 0c             	sub    esp,0xc
 1004067:	53                   	push   ebx
 1004068:	e8 73 24 00 00       	call   10064e0 <fatfs_entry_lfn_text>
 100406d:	83 c4 10             	add    esp,0x10
 1004070:	85 c0                	test   eax,eax
 1004072:	74 12                	je     1004086 <fatfs_list_directory_next+0x97>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:799
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
 1004074:	83 ec 08             	sub    esp,0x8
 1004077:	53                   	push   ebx
 1004078:	55                   	push   ebp
 1004079:	e8 8a 23 00 00       	call   1006408 <fatfs_lfn_cache_entry>
 100407e:	83 c4 10             	add    esp,0x10
 1004081:	e9 96 02 00 00       	jmp    100431c <fatfs_list_directory_next+0x32d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:802

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
 1004086:	83 ec 0c             	sub    esp,0xc
 1004089:	53                   	push   ebx
 100408a:	e8 65 24 00 00       	call   10064f4 <fatfs_entry_lfn_invalid>
 100408f:	83 c4 10             	add    esp,0x10
 1004092:	85 c0                	test   eax,eax
 1004094:	74 13                	je     10040a9 <fatfs_list_directory_next+0xba>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:803
                    fatfs_lfn_cache_init(&lfn, 0);
 1004096:	83 ec 08             	sub    esp,0x8
 1004099:	6a 00                	push   0x0
 100409b:	55                   	push   ebp
 100409c:	e8 2b 23 00 00       	call   10063cc <fatfs_lfn_cache_init>
 10040a1:	83 c4 10             	add    esp,0x10
 10040a4:	e9 73 02 00 00       	jmp    100431c <fatfs_list_directory_next+0x32d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:806

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
 10040a9:	83 ec 08             	sub    esp,0x8
 10040ac:	53                   	push   ebx
 10040ad:	55                   	push   ebp
 10040ae:	e8 6d 24 00 00       	call   1006520 <fatfs_entry_lfn_exists>
 10040b3:	83 c4 10             	add    esp,0x10
 10040b6:	85 c0                	test   eax,eax
 10040b8:	0f 84 da 00 00 00    	je     1004198 <fatfs_list_directory_next+0x1a9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:809
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
 10040be:	83 ec 0c             	sub    esp,0xc
 10040c1:	8d 44 24 19          	lea    eax,[esp+0x19]
 10040c5:	50                   	push   eax
 10040c6:	e8 e7 23 00 00       	call   10064b2 <fatfs_lfn_cache_get>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:810
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
 10040cb:	83 c4 0c             	add    esp,0xc
 10040ce:	6a 7f                	push   0x7f
 10040d0:	50                   	push   eax
 10040d1:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
 10040d8:	e8 ab 5c 00 00       	call   1009d88 <strncpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:812

                    if (fatfs_entry_is_dir(directoryEntry))
 10040dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
 10040e0:	e8 bf 24 00 00       	call   10065a4 <fatfs_entry_is_dir>
 10040e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:813
                        entry->is_dir = 1;
 10040e8:	85 c0                	test   eax,eax
 10040ea:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
 10040f1:	0f 95 80 80 00 00 00 	setne  BYTE PTR [eax+0x80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:819
                    else
                        entry->is_dir = 0;

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
 10040f8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
 10040fc:	c1 e0 08             	shl    eax,0x8
 10040ff:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
 1004103:	09 d0                	or     eax,edx
 1004105:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
 100410c:	66 89 81 94 00 00 00 	mov    WORD PTR [ecx+0x94],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:820
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
 1004113:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
 1004117:	c1 e0 08             	shl    eax,0x8
 100411a:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
 100411e:	09 d0                	or     eax,edx
 1004120:	66 89 81 92 00 00 00 	mov    WORD PTR [ecx+0x92],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:821
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
 1004127:	0f b6 43 13          	movzx  eax,BYTE PTR [ebx+0x13]
 100412b:	c1 e0 08             	shl    eax,0x8
 100412e:	0f b6 53 12          	movzx  edx,BYTE PTR [ebx+0x12]
 1004132:	09 d0                	or     eax,edx
 1004134:	66 89 81 8c 00 00 00 	mov    WORD PTR [ecx+0x8c],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:822
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
 100413b:	0f b6 43 17          	movzx  eax,BYTE PTR [ebx+0x17]
 100413f:	c1 e0 08             	shl    eax,0x8
 1004142:	0f b6 53 16          	movzx  edx,BYTE PTR [ebx+0x16]
 1004146:	09 d0                	or     eax,edx
 1004148:	66 89 81 8e 00 00 00 	mov    WORD PTR [ecx+0x8e],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:823
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
 100414f:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
 1004153:	c1 e0 08             	shl    eax,0x8
 1004156:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
 100415a:	09 d0                	or     eax,edx
 100415c:	66 89 81 90 00 00 00 	mov    WORD PTR [ecx+0x90],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:826
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
 1004163:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
 1004166:	89 81 88 00 00 00    	mov    DWORD PTR [ecx+0x88],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:827
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
 100416c:	0f b7 43 14          	movzx  eax,WORD PTR [ebx+0x14]
 1004170:	c1 e0 10             	shl    eax,0x10
 1004173:	89 c2                	mov    edx,eax
 1004175:	0f b7 43 1a          	movzx  eax,WORD PTR [ebx+0x1a]
 1004179:	09 d0                	or     eax,edx
 100417b:	89 81 84 00 00 00    	mov    DWORD PTR [ecx+0x84],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:830

                    // Next starting position
                    dirls->offset = item + 1;
 1004181:	8d 46 01             	lea    eax,[esi+0x1]
 1004184:	8b 8c 24 44 01 00 00 	mov    ecx,DWORD PTR [esp+0x144]
 100418b:	88 41 08             	mov    BYTE PTR [ecx+0x8],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:832
                    result = 1;
                    return 1;
 100418e:	b8 01 00 00 00       	mov    eax,0x1
 1004193:	e9 a4 01 00 00       	jmp    100433c <fatfs_list_directory_next+0x34d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:837
                }
                // Normal Entry, only 8.3 Text
                else
#endif
                if ( fatfs_entry_sfn_only(directoryEntry) )
 1004198:	83 ec 0c             	sub    esp,0xc
 100419b:	53                   	push   ebx
 100419c:	e8 ca 23 00 00       	call   100656b <fatfs_entry_sfn_only>
 10041a1:	83 c4 10             	add    esp,0x10
 10041a4:	85 c0                	test   eax,eax
 10041a6:	0f 84 70 01 00 00    	je     100431c <fatfs_list_directory_next+0x32d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:839
                {
                    fatfs_lfn_cache_init(&lfn, 0);
 10041ac:	83 ec 08             	sub    esp,0x8
 10041af:	6a 00                	push   0x0
 10041b1:	8d 44 24 19          	lea    eax,[esp+0x19]
 10041b5:	50                   	push   eax
 10041b6:	e8 11 22 00 00       	call   10063cc <fatfs_lfn_cache_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:841

                    memset(short_filename, 0, sizeof(short_filename));
 10041bb:	83 c4 0c             	add    esp,0xc
 10041be:	6a 0d                	push   0xd
 10041c0:	6a 00                	push   0x0
 10041c2:	8d 84 24 1f 01 00 00 	lea    eax,[esp+0x11f]
 10041c9:	50                   	push   eax
 10041ca:	e8 f0 4c 00 00       	call   1008ebf <memset>
 10041cf:	83 c4 10             	add    esp,0x10
 10041d2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:845 (discriminator 3)

                    // Copy name to string
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];
 10041d7:	0f b6 14 03          	movzx  edx,BYTE PTR [ebx+eax*1]
 10041db:	88 94 04 13 01 00 00 	mov    BYTE PTR [esp+eax*1+0x113],dl
 10041e2:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:844 (discriminator 3)
                    fatfs_lfn_cache_init(&lfn, 0);

                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
 10041e5:	83 f8 08             	cmp    eax,0x8
 10041e8:	75 ed                	jne    10041d7 <fatfs_list_directory_next+0x1e8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:851

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 10041ea:	0f b6 43 08          	movzx  eax,BYTE PTR [ebx+0x8]
 10041ee:	88 84 24 1c 01 00 00 	mov    BYTE PTR [esp+0x11c],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:853
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
 10041f5:	3c 20                	cmp    al,0x20
 10041f7:	0f 95 c0             	setne  al
 10041fa:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:851

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 10041fd:	0f b6 53 09          	movzx  edx,BYTE PTR [ebx+0x9]
 1004201:	88 94 24 1d 01 00 00 	mov    BYTE PTR [esp+0x11d],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:853
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
 1004208:	80 fa 20             	cmp    dl,0x20
 100420b:	ba 01 00 00 00       	mov    edx,0x1
 1004210:	0f 45 c2             	cmovne eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:851

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
 1004213:	0f b6 53 0a          	movzx  edx,BYTE PTR [ebx+0xa]
 1004217:	88 94 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:852
                        if (directoryEntry->Name[i] != ' ')
 100421e:	80 fa 20             	cmp    dl,0x20
 1004221:	75 04                	jne    1004227 <fatfs_list_directory_next+0x238>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:857 (discriminator 2)
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
 1004223:	85 c0                	test   eax,eax
 1004225:	74 1e                	je     1004245 <fatfs_list_directory_next+0x256>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:861
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
                            short_filename[8] = '.';
 1004227:	80 bc 24 13 01 00 00 	cmp    BYTE PTR [esp+0x113],0x2e
 100422e:	2e 
 100422f:	ba 2e 00 00 00       	mov    edx,0x2e
 1004234:	b8 20 00 00 00       	mov    eax,0x20
 1004239:	0f 45 c2             	cmovne eax,edx
 100423c:	88 84 24 1b 01 00 00 	mov    BYTE PTR [esp+0x11b],al
 1004243:	eb 08                	jmp    100424d <fatfs_list_directory_next+0x25e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:866
                        else
                            short_filename[8] = ' ';
                    }
                    else
                        short_filename[8] = ' ';
 1004245:	c6 84 24 1b 01 00 00 	mov    BYTE PTR [esp+0x11b],0x20
 100424c:	20 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:868

                    fatfs_get_sfn_display_name(entry->filename, short_filename);
 100424d:	83 ec 08             	sub    esp,0x8
 1004250:	8d 84 24 1b 01 00 00 	lea    eax,[esp+0x11b]
 1004257:	50                   	push   eax
 1004258:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
 100425f:	e8 56 2c 00 00       	call   1006eba <fatfs_get_sfn_display_name>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:870

                    if (fatfs_entry_is_dir(directoryEntry))
 1004264:	89 1c 24             	mov    DWORD PTR [esp],ebx
 1004267:	e8 38 23 00 00       	call   10065a4 <fatfs_entry_is_dir>
 100426c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:871
                        entry->is_dir = 1;
 100426f:	85 c0                	test   eax,eax
 1004271:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
 1004278:	0f 95 80 80 00 00 00 	setne  BYTE PTR [eax+0x80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:877
                    else
                        entry->is_dir = 0;

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
 100427f:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
 1004283:	c1 e0 08             	shl    eax,0x8
 1004286:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
 100428a:	09 d0                	or     eax,edx
 100428c:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
 1004293:	66 89 81 94 00 00 00 	mov    WORD PTR [ecx+0x94],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:878
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
 100429a:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
 100429e:	c1 e0 08             	shl    eax,0x8
 10042a1:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
 10042a5:	09 d0                	or     eax,edx
 10042a7:	66 89 81 92 00 00 00 	mov    WORD PTR [ecx+0x92],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:879
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
 10042ae:	0f b6 43 13          	movzx  eax,BYTE PTR [ebx+0x13]
 10042b2:	c1 e0 08             	shl    eax,0x8
 10042b5:	0f b6 53 12          	movzx  edx,BYTE PTR [ebx+0x12]
 10042b9:	09 d0                	or     eax,edx
 10042bb:	66 89 81 8c 00 00 00 	mov    WORD PTR [ecx+0x8c],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:880
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
 10042c2:	0f b6 43 17          	movzx  eax,BYTE PTR [ebx+0x17]
 10042c6:	c1 e0 08             	shl    eax,0x8
 10042c9:	0f b6 53 16          	movzx  edx,BYTE PTR [ebx+0x16]
 10042cd:	09 d0                	or     eax,edx
 10042cf:	66 89 81 8e 00 00 00 	mov    WORD PTR [ecx+0x8e],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:881
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
 10042d6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
 10042da:	c1 e0 08             	shl    eax,0x8
 10042dd:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
 10042e1:	09 d0                	or     eax,edx
 10042e3:	66 89 81 90 00 00 00 	mov    WORD PTR [ecx+0x90],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:884
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
 10042ea:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
 10042ed:	89 81 88 00 00 00    	mov    DWORD PTR [ecx+0x88],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:885
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
 10042f3:	0f b7 43 14          	movzx  eax,WORD PTR [ebx+0x14]
 10042f7:	c1 e0 10             	shl    eax,0x10
 10042fa:	89 c2                	mov    edx,eax
 10042fc:	0f b7 43 1a          	movzx  eax,WORD PTR [ebx+0x1a]
 1004300:	09 d0                	or     eax,edx
 1004302:	89 81 84 00 00 00    	mov    DWORD PTR [ecx+0x84],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:888

                    // Next starting position
                    dirls->offset = item + 1;
 1004308:	8d 46 01             	lea    eax,[esi+0x1]
 100430b:	8b 8c 24 44 01 00 00 	mov    ecx,DWORD PTR [esp+0x144]
 1004312:	88 41 08             	mov    BYTE PTR [ecx+0x8],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:890
                    result = 1;
                    return 1;
 1004315:	b8 01 00 00 00       	mov    eax,0x1
 100431a:	eb 20                	jmp    100433c <fatfs_list_directory_next+0x34d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:788 (discriminator 2)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 100431c:	83 c6 01             	add    esi,0x1
 100431f:	89 f0                	mov    eax,esi
 1004321:	3c 10                	cmp    al,0x10
 1004323:	0f 85 2e fd ff ff    	jne    1004057 <fatfs_list_directory_next+0x68>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:895
                    return 1;
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
 1004329:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
 1004330:	83 00 01             	add    DWORD PTR [eax],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:896
            dirls->offset = 0;
 1004333:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:900
        }
        else
            break;
    }
 1004337:	e9 da fc ff ff       	jmp    1004016 <fatfs_list_directory_next+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_access.c:903

    return result;
}
 100433c:	81 c4 2c 01 00 00    	add    esp,0x12c
 1004342:	5b                   	pop    ebx
 1004343:	5e                   	pop    esi
 1004344:	5f                   	pop    edi
 1004345:	5d                   	pop    ebp
 1004346:	c3                   	ret    
 1004347:	90                   	nop

01004348 <fatfs_cache_init>:
fatfs_cache_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:43

//-----------------------------------------------------------------------------
// fatfs_cache_init:
//-----------------------------------------------------------------------------
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
 1004348:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 100434c:	8d 82 20 01 00 00    	lea    eax,[edx+0x120]
 1004352:	81 c2 20 03 00 00    	add    edx,0x320
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:49 (discriminator 3)
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
    {
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
 1004358:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:50 (discriminator 3)
        file->cluster_cache_data[i] = 0;
 100435e:	c7 80 00 02 00 00 00 	mov    DWORD PTR [eax+0x200],0x0
 1004365:	00 00 00 
 1004368:	83 c0 04             	add    eax,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:47 (discriminator 3)
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    int i;

    for (i=0;i<FAT_CLUSTER_CACHE_ENTRIES;i++)
 100436b:	39 d0                	cmp    eax,edx
 100436d:	75 e9                	jne    1004358 <fatfs_cache_init+0x10>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:55
        file->cluster_cache_data[i] = 0;
    }
#endif

    return 1;
}
 100436f:	b8 01 00 00 00       	mov    eax,0x1
 1004374:	c3                   	ret    

01004375 <fatfs_cache_get_next_cluster>:
fatfs_cache_get_next_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:60
//-----------------------------------------------------------------------------
// fatfs_cache_get_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
 1004375:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
 1004379:	89 ca                	mov    edx,ecx
 100437b:	83 e2 7f             	and    edx,0x7f
 100437e:	c1 e2 02             	shl    edx,0x2
 1004381:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:71
        *pNextCluster = file->cluster_cache_data[slot];
        return 1;
    }
#endif

    return 0;
 1004385:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:64
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;

    if (file->cluster_cache_idx[slot] == clusterIdx)
 100438a:	3b 8a 20 01 00 00    	cmp    ecx,DWORD PTR [edx+0x120]
 1004390:	75 11                	jne    10043a3 <fatfs_cache_get_next_cluster+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:66
    {
        *pNextCluster = file->cluster_cache_data[slot];
 1004392:	8b 92 20 03 00 00    	mov    edx,DWORD PTR [edx+0x320]
 1004398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 100439c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:67
        return 1;
 100439e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:72
    }
#endif

    return 0;
}
 10043a3:	f3 c3                	repz ret 

010043a5 <fatfs_cache_set_next_cluster>:
fatfs_cache_set_next_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:77
//-----------------------------------------------------------------------------
// fatfs_cache_set_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_set_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 nextCluster)
{
 10043a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 10043a9:	89 d0                	mov    eax,edx
 10043ab:	83 e0 7f             	and    eax,0x7f
 10043ae:	c1 e0 02             	shl    eax,0x2
 10043b1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:81
#ifdef FAT_CLUSTER_CACHE_ENTRIES
    uint32 slot = clusterIdx % FAT_CLUSTER_CACHE_ENTRIES;

    if (file->cluster_cache_idx[slot] == clusterIdx)
 10043b5:	3b 90 20 01 00 00    	cmp    edx,DWORD PTR [eax+0x120]
 10043bb:	75 0c                	jne    10043c9 <fatfs_cache_set_next_cluster+0x24>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:82
        file->cluster_cache_data[slot] = nextCluster;
 10043bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
 10043c1:	89 88 20 03 00 00    	mov    DWORD PTR [eax+0x320],ecx
 10043c7:	eb 10                	jmp    10043d9 <fatfs_cache_set_next_cluster+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:85
    else
    {
        file->cluster_cache_idx[slot] = clusterIdx;
 10043c9:	89 90 20 01 00 00    	mov    DWORD PTR [eax+0x120],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:86
        file->cluster_cache_data[slot] = nextCluster;
 10043cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
 10043d3:	89 88 20 03 00 00    	mov    DWORD PTR [eax+0x320],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_cache.c:91
    }
#endif

    return 1;
}
 10043d9:	b8 01 00 00 00       	mov    eax,0x1
 10043de:	c3                   	ret    
 10043df:	90                   	nop

010043e0 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:126
}
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
 10043e0:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
 10043e1:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
 10043e4:	85 c9                	test   ecx,ecx
 10043e6:	75 32                	jne    100441a <fat_list_insert_last+0x3a>
fat_list_insert_first():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:112
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
 10043e8:	8b 08                	mov    ecx,DWORD PTR [eax]
 10043ea:	85 c9                	test   ecx,ecx
 10043ec:	75 14                	jne    1004402 <fat_list_insert_last+0x22>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
 10043ee:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:115
        list->tail = node;
 10043f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
 10043f3:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:117
        node->next = 0;
 10043f9:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
 1004400:	eb 31                	jmp    1004433 <fat_list_insert_last+0x53>
fat_list_insert_before():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:96
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
 1004402:	8b 19                	mov    ebx,DWORD PTR [ecx]
 1004404:	89 1a                	mov    DWORD PTR [edx],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
 1004406:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
 1004409:	8b 19                	mov    ebx,DWORD PTR [ecx]
 100440b:	85 db                	test   ebx,ebx
 100440d:	75 04                	jne    1004413 <fat_list_insert_last+0x33>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
 100440f:	89 10                	mov    DWORD PTR [eax],edx
 1004411:	eb 03                	jmp    1004416 <fat_list_insert_last+0x36>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
 1004413:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
 1004416:	89 11                	mov    DWORD PTR [ecx],edx
 1004418:	eb 19                	jmp    1004433 <fat_list_insert_last+0x53>
fat_list_insert_after():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:79
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
 100441a:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
 100441c:	8b 59 04             	mov    ebx,DWORD PTR [ecx+0x4]
 100441f:	89 5a 04             	mov    DWORD PTR [edx+0x4],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:81
    if (!node->next)
 1004422:	8b 59 04             	mov    ebx,DWORD PTR [ecx+0x4]
 1004425:	85 db                	test   ebx,ebx
 1004427:	75 05                	jne    100442e <fat_list_insert_last+0x4e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
 1004429:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
 100442c:	eb 02                	jmp    1004430 <fat_list_insert_last+0x50>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
 100442e:	89 13                	mov    DWORD PTR [ebx],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
 1004430:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
fat_list_insert_last():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:134

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
}
 1004433:	5b                   	pop    ebx
 1004434:	c3                   	ret    

01004435 <_allocate_file>:
_allocate_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:72

//-----------------------------------------------------------------------------
// _allocate_file: Find a slot in the open files buffer for a new file
//-----------------------------------------------------------------------------
static FL_FILE* _allocate_file(void)
{
 1004435:	53                   	push   ebx
fat_list_pop_head():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:153
{
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
 1004436:	8b 1d 40 00 12 00    	mov    ebx,DWORD PTR ds:0x120040
_allocate_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:80

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
 100443c:	b8 00 00 00 00       	mov    eax,0x0
fat_list_pop_head():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:154
    if (node)
 1004441:	85 db                	test   ebx,ebx
 1004443:	74 3c                	je     1004481 <_allocate_file+0x4c>
fat_list_remove():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:60
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
 1004445:	8b 03                	mov    eax,DWORD PTR [ebx]
 1004447:	85 c0                	test   eax,eax
 1004449:	75 0a                	jne    1004455 <_allocate_file+0x20>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
 100444b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
 100444e:	a3 40 00 12 00       	mov    ds:0x120040,eax
 1004453:	eb 06                	jmp    100445b <_allocate_file+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
 1004455:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
 1004458:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:65

    if(!node->next)
 100445b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
 100445e:	85 c0                	test   eax,eax
 1004460:	75 09                	jne    100446b <_allocate_file+0x36>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
 1004462:	8b 03                	mov    eax,DWORD PTR [ebx]
 1004464:	a3 44 00 12 00       	mov    ds:0x120044,eax
 1004469:	eb 04                	jmp    100446f <_allocate_file+0x3a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:68
    else
        node->next->previous = node->previous;
 100446b:	8b 13                	mov    edx,DWORD PTR [ebx]
 100446d:	89 10                	mov    DWORD PTR [eax],edx
_allocate_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:78
    // Allocate free file
    struct fat_node *node = fat_list_pop_head(&_free_file_list);

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);
 100446f:	89 da                	mov    edx,ebx
 1004471:	b8 48 00 12 00       	mov    eax,0x120048
 1004476:	e8 65 ff ff ff       	call   10043e0 <fat_list_insert_last>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:80

    return fat_list_entry(node, FL_FILE, list_node);
 100447b:	8d 83 cc f8 ff ff    	lea    eax,[ebx-0x734]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:81
}
 1004481:	5b                   	pop    ebx
 1004482:	c3                   	ret    

01004483 <_check_file_open>:
_check_file_open():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:86
//-----------------------------------------------------------------------------
// _check_file_open: Returns true if the file is already open
//-----------------------------------------------------------------------------
static int _check_file_open(FL_FILE* file)
{
 1004483:	55                   	push   ebp
 1004484:	57                   	push   edi
 1004485:	56                   	push   esi
 1004486:	53                   	push   ebx
 1004487:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:90
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
 100448a:	8b 1d 48 00 12 00    	mov    ebx,DWORD PTR ds:0x120048
 1004490:	85 db                	test   ebx,ebx
 1004492:	74 5f                	je     10044f3 <_check_file_open+0x70>
 1004494:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:98

        // If not the current file
        if (openFile != file)
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
 1004496:	8d 68 14             	lea    ebp,[eax+0x14]
 1004499:	8d 80 94 00 00 00    	lea    eax,[eax+0x94]
 100449f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:92
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
 10044a3:	8d b3 cc f8 ff ff    	lea    esi,[ebx-0x734]
 10044a9:	85 db                	test   ebx,ebx
 10044ab:	b8 00 00 00 00       	mov    eax,0x0
 10044b0:	0f 44 f0             	cmove  esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:95

        // If not the current file
        if (openFile != file)
 10044b3:	39 fe                	cmp    esi,edi
 10044b5:	74 2e                	je     10044e5 <_check_file_open+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:98
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
 10044b7:	83 ec 08             	sub    esp,0x8
 10044ba:	55                   	push   ebp
 10044bb:	8d 46 14             	lea    eax,[esi+0x14]
 10044be:	50                   	push   eax
 10044bf:	e8 57 28 00 00       	call   1006d1b <fatfs_compare_names>
 10044c4:	83 c4 10             	add    esp,0x10
 10044c7:	85 c0                	test   eax,eax
 10044c9:	74 1a                	je     10044e5 <_check_file_open+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:98 (discriminator 1)
 10044cb:	83 ec 08             	sub    esp,0x8
 10044ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 10044d2:	81 c6 94 00 00 00    	add    esi,0x94
 10044d8:	56                   	push   esi
 10044d9:	e8 3d 28 00 00       	call   1006d1b <fatfs_compare_names>
 10044de:	83 c4 10             	add    esp,0x10
 10044e1:	85 c0                	test   eax,eax
 10044e3:	75 15                	jne    10044fa <_check_file_open+0x77>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:90 (discriminator 2)
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
 10044e5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
 10044e8:	85 db                	test   ebx,ebx
 10044ea:	75 b7                	jne    10044a3 <_check_file_open+0x20>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:103
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
                return 1;
        }
    }

    return 0;
 10044ec:	b8 00 00 00 00       	mov    eax,0x0
 10044f1:	eb 0c                	jmp    10044ff <_check_file_open+0x7c>
 10044f3:	b8 00 00 00 00       	mov    eax,0x0
 10044f8:	eb 05                	jmp    10044ff <_check_file_open+0x7c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:99
        // If not the current file
        if (openFile != file)
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
                return 1;
 10044fa:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:104
        }
    }

    return 0;
}
 10044ff:	83 c4 1c             	add    esp,0x1c
 1004502:	5b                   	pop    ebx
 1004503:	5e                   	pop    esi
 1004504:	5f                   	pop    edi
 1004505:	5d                   	pop    ebp
 1004506:	c3                   	ret    

01004507 <_open_directory>:
_open_directory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:126
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
 1004507:	55                   	push   ebp
 1004508:	57                   	push   edi
 1004509:	56                   	push   esi
 100450a:	53                   	push   ebx
 100450b:	81 ec c8 00 00 00    	sub    esp,0xc8
 1004511:	89 c7                	mov    edi,eax
 1004513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
 1004517:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:134
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
 100451b:	68 60 00 12 00       	push   0x120060
 1004520:	e8 77 f5 ff ff       	call   1003a9c <fatfs_get_root_cluster>
 1004525:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:137

    // Find number of levels
    levels = fatfs_total_path_levels(path);
 1004527:	89 3c 24             	mov    DWORD PTR [esp],edi
 100452a:	e8 ea 25 00 00       	call   1006b19 <fatfs_total_path_levels>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:140

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
 100452f:	8d 50 01             	lea    edx,[eax+0x1]
 1004532:	83 c4 10             	add    esp,0x10
 1004535:	85 d2                	test   edx,edx
 1004537:	7e 65                	jle    100459e <_open_directory+0x97>
 1004539:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
 100453d:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:142
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
 1004542:	8d 7c 24 30          	lea    edi,[esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:146
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
 1004546:	8d 6c 24 10          	lea    ebp,[esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:142
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
 100454a:	68 80 00 00 00       	push   0x80
 100454f:	57                   	push   edi
 1004550:	56                   	push   esi
 1004551:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1004555:	e8 4d 26 00 00       	call   1006ba7 <fatfs_get_substring>
 100455a:	83 c4 10             	add    esp,0x10
 100455d:	83 f8 ff             	cmp    eax,0xffffffff
 1004560:	74 49                	je     10045ab <_open_directory+0xa4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:146
            return 0;

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
 1004562:	55                   	push   ebp
 1004563:	57                   	push   edi
 1004564:	53                   	push   ebx
 1004565:	68 60 00 12 00       	push   0x120060
 100456a:	e8 35 f5 ff ff       	call   1003aa4 <fatfs_get_file_entry>
 100456f:	83 c4 10             	add    esp,0x10
 1004572:	85 c0                	test   eax,eax
 1004574:	74 3c                	je     10045b2 <_open_directory+0xab>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:149
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
 1004576:	83 ec 0c             	sub    esp,0xc
 1004579:	55                   	push   ebp
 100457a:	e8 25 20 00 00       	call   10065a4 <fatfs_entry_is_dir>
 100457f:	83 c4 10             	add    esp,0x10
 1004582:	85 c0                	test   eax,eax
 1004584:	74 31                	je     10045b7 <_open_directory+0xb0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:150
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
 1004586:	0f b7 5c 24 24       	movzx  ebx,WORD PTR [esp+0x24]
 100458b:	c1 e3 10             	shl    ebx,0x10
 100458e:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
 1004593:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:140

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
 1004595:	83 c6 01             	add    esi,0x1
 1004598:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
 100459c:	75 ac                	jne    100454a <_open_directory+0x43>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:158
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
 100459e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 10045a2:	89 18                	mov    DWORD PTR [eax],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:159
    return 1;
 10045a4:	b8 01 00 00 00       	mov    eax,0x1
 10045a9:	eb 0c                	jmp    10045b7 <_open_directory+0xb0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:143

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;
 10045ab:	b8 00 00 00 00       	mov    eax,0x0
 10045b0:	eb 05                	jmp    10045b7 <_open_directory+0xb0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:155
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            else
                return 0;
        }
        else
            return 0;
 10045b2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:160
    }

    *pathCluster = startcluster;
    return 1;
}
 10045b7:	81 c4 bc 00 00 00    	add    esp,0xbc
 10045bd:	5b                   	pop    ebx
 10045be:	5e                   	pop    esi
 10045bf:	5f                   	pop    edi
 10045c0:	5d                   	pop    ebp
 10045c1:	c3                   	ret    

010045c2 <_write_sectors>:
_write_sectors():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:817
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
 10045c2:	55                   	push   ebp
 10045c3:	57                   	push   edi
 10045c4:	56                   	push   esi
 10045c5:	53                   	push   ebx
 10045c6:	83 ec 3c             	sub    esp,0x3c
 10045c9:	89 c7                	mov    edi,eax
 10045cb:	89 d3                	mov    ebx,edx
 10045cd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:821
    uint32 SectorNumber = 0;
    uint32 ClusterIdx = 0;
    uint32 Cluster = 0;
    uint32 LastCluster = FAT32_LAST_CLUSTER;
 10045d1:	c7 44 24 2c ff ff ff 	mov    DWORD PTR [esp+0x2c],0xffffffff
 10045d8:	ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:827
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
 10045d9:	0f b6 0d 60 00 12 00 	movzx  ecx,BYTE PTR ds:0x120060
 10045e0:	89 d0                	mov    eax,edx
 10045e2:	ba 00 00 00 00       	mov    edx,0x0
 10045e7:	f7 f1                	div    ecx
 10045e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
 10045ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:828
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
 10045f1:	89 c6                	mov    esi,eax
 10045f3:	0f af c1             	imul   eax,ecx
 10045f6:	29 c3                	sub    ebx,eax
 10045f8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:831

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
 10045fc:	89 da                	mov    edx,ebx
 10045fe:	03 54 24 50          	add    edx,DWORD PTR [esp+0x50]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:832
        count = _fs.sectors_per_cluster - SectorNumber;
 1004602:	89 c8                	mov    eax,ecx
 1004604:	29 d8                	sub    eax,ebx
 1004606:	39 d1                	cmp    ecx,edx
 1004608:	0f 43 44 24 50       	cmovae eax,DWORD PTR [esp+0x50]
 100460d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:835

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
 1004611:	8b 9f 20 05 00 00    	mov    ebx,DWORD PTR [edi+0x520]
 1004617:	39 de                	cmp    esi,ebx
 1004619:	75 0b                	jne    1004626 <_write_sectors+0x64>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:836
        Cluster = file->last_fat_lookup.CurrentCluster;
 100461b:	8b b7 24 05 00 00    	mov    esi,DWORD PTR [edi+0x524]
 1004621:	e9 c7 00 00 00       	jmp    10046ed <_write_sectors+0x12b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:841
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
 1004626:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
 100462a:	85 c9                	test   ecx,ecx
 100462c:	74 0f                	je     100463d <_write_sectors+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:841 (discriminator 1)
 100462e:	8d 43 01             	lea    eax,[ebx+0x1]
 1004631:	39 c1                	cmp    ecx,eax
 1004633:	75 08                	jne    100463d <_write_sectors+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:844
        {
            i = file->last_fat_lookup.ClusterIdx;
            Cluster = file->last_fat_lookup.CurrentCluster;
 1004635:	8b b7 24 05 00 00    	mov    esi,DWORD PTR [edi+0x524]
 100463b:	eb 08                	jmp    1004645 <_write_sectors+0x83>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:851
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
            Cluster = file->startcluster;
 100463d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:850
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
 1004640:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:855 (discriminator 1)
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
 1004645:	39 5c 24 10          	cmp    DWORD PTR [esp+0x10],ebx
 1004649:	76 52                	jbe    100469d <_write_sectors+0xdb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:860
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
 100464b:	8d 6c 24 28          	lea    ebp,[esp+0x28]
 100464f:	55                   	push   ebp
 1004650:	53                   	push   ebx
 1004651:	57                   	push   edi
 1004652:	68 60 00 12 00       	push   0x120060
 1004657:	e8 19 fd ff ff       	call   1004375 <fatfs_cache_get_next_cluster>
 100465c:	83 c4 10             	add    esp,0x10
 100465f:	85 c0                	test   eax,eax
 1004661:	75 22                	jne    1004685 <_write_sectors+0xc3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:863
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
 1004663:	83 ec 08             	sub    esp,0x8
 1004666:	56                   	push   esi
 1004667:	68 60 00 12 00       	push   0x120060
 100466c:	e8 eb 2b 00 00       	call   100725c <fatfs_find_next_cluster>
 1004671:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:866

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
 1004675:	50                   	push   eax
 1004676:	53                   	push   ebx
 1004677:	57                   	push   edi
 1004678:	68 60 00 12 00       	push   0x120060
 100467d:	e8 23 fd ff ff       	call   10043a5 <fatfs_cache_set_next_cluster>
 1004682:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:869
            }

            LastCluster = Cluster;
 1004685:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:870
            Cluster = nextCluster;
 1004689:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:873

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
 100468d:	83 fe ff             	cmp    esi,0xffffffff
 1004690:	74 10                	je     10046a2 <_write_sectors+0xe0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:855
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
 1004692:	83 c3 01             	add    ebx,0x1
 1004695:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
 1004699:	77 b4                	ja     100464f <_write_sectors+0x8d>
 100469b:	eb 40                	jmp    10046dd <_write_sectors+0x11b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:878
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
 100469d:	83 fe ff             	cmp    esi,0xffffffff
 10046a0:	75 3b                	jne    10046dd <_write_sectors+0x11b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:881
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
 10046a2:	0f b6 0d 60 00 12 00 	movzx  ecx,BYTE PTR ds:0x120060
 10046a9:	83 ec 04             	sub    esp,0x4
 10046ac:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
 10046b0:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
 10046b4:	ba 00 00 00 00       	mov    edx,0x0
 10046b9:	f7 f1                	div    ecx
 10046bb:	50                   	push   eax
 10046bc:	8d 44 24 34          	lea    eax,[esp+0x34]
 10046c0:	50                   	push   eax
 10046c1:	68 60 00 12 00       	push   0x120060
 10046c6:	e8 19 30 00 00       	call   10076e4 <fatfs_add_free_space>
 10046cb:	89 c2                	mov    edx,eax
 10046cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:882
                return 0;
 10046d0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:881

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
 10046d5:	85 d2                	test   edx,edx
 10046d7:	74 47                	je     1004720 <_write_sectors+0x15e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:884
                return 0;

            Cluster = LastCluster;
 10046d9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:888
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
 10046dd:	89 b7 24 05 00 00    	mov    DWORD PTR [edi+0x524],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:889
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
 10046e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 10046e7:	89 87 20 05 00 00    	mov    DWORD PTR [edi+0x520],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:893
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
 10046ed:	83 ec 08             	sub    esp,0x8
 10046f0:	56                   	push   esi
 10046f1:	68 60 00 12 00       	push   0x120060
 10046f6:	e8 a8 f0 ff ff       	call   10037a3 <fatfs_lba_of_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:895

    if (fatfs_sector_write(&_fs, lba, buf, count))
 10046fb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
 10046ff:	57                   	push   edi
 1004700:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 1004704:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
 1004708:	50                   	push   eax
 1004709:	68 60 00 12 00       	push   0x120060
 100470e:	e8 e4 f0 ff ff       	call   10037f7 <fatfs_sector_write>
 1004713:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:896
        return count;
 1004716:	85 c0                	test   eax,eax
 1004718:	b8 00 00 00 00       	mov    eax,0x0
 100471d:	0f 45 c7             	cmovne eax,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:899
    else
        return 0;
}
 1004720:	83 c4 3c             	add    esp,0x3c
 1004723:	5b                   	pop    ebx
 1004724:	5e                   	pop    esi
 1004725:	5f                   	pop    edi
 1004726:	5d                   	pop    ebp
 1004727:	c3                   	ret    

01004728 <_read_sectors>:
_read_sectors():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:549
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
 1004728:	55                   	push   ebp
 1004729:	57                   	push   edi
 100472a:	56                   	push   esi
 100472b:	53                   	push   ebx
 100472c:	83 ec 2c             	sub    esp,0x2c
 100472f:	89 c6                	mov    esi,eax
 1004731:	89 d3                	mov    ebx,edx
 1004733:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:557
    uint32 Cluster = 0;
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
 1004737:	0f b6 0d 60 00 12 00 	movzx  ecx,BYTE PTR ds:0x120060
 100473e:	89 d0                	mov    eax,edx
 1004740:	ba 00 00 00 00       	mov    edx,0x0
 1004745:	f7 f1                	div    ecx
 1004747:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 100474b:	89 04 24             	mov    DWORD PTR [esp],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:558
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
 100474e:	89 c7                	mov    edi,eax
 1004750:	0f af c1             	imul   eax,ecx
 1004753:	29 c3                	sub    ebx,eax
 1004755:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:561

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
 1004759:	89 d8                	mov    eax,ebx
 100475b:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:562
        count = _fs.sectors_per_cluster - Sector;
 100475f:	89 ca                	mov    edx,ecx
 1004761:	29 da                	sub    edx,ebx
 1004763:	39 c1                	cmp    ecx,eax
 1004765:	0f 43 54 24 40       	cmovae edx,DWORD PTR [esp+0x40]
 100476a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:565

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
 100476e:	8b 9e 20 05 00 00    	mov    ebx,DWORD PTR [esi+0x520]
 1004774:	39 df                	cmp    edi,ebx
 1004776:	75 19                	jne    1004791 <_read_sectors+0x69>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:566
        Cluster = file->last_fat_lookup.CurrentCluster;
 1004778:	8b be 24 05 00 00    	mov    edi,DWORD PTR [esi+0x524]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:612
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
        return 0;
 100477e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:611
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
 1004783:	83 ff ff             	cmp    edi,0xffffffff
 1004786:	0f 84 be 00 00 00    	je     100484a <_read_sectors+0x122>
 100478c:	e9 85 00 00 00       	jmp    1004816 <_read_sectors+0xee>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:571
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
 1004791:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
 1004795:	85 c9                	test   ecx,ecx
 1004797:	74 0f                	je     10047a8 <_read_sectors+0x80>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:571 (discriminator 1)
 1004799:	8d 43 01             	lea    eax,[ebx+0x1]
 100479c:	39 c1                	cmp    ecx,eax
 100479e:	75 08                	jne    10047a8 <_read_sectors+0x80>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:574
        {
            i = file->last_fat_lookup.ClusterIdx;
            Cluster = file->last_fat_lookup.CurrentCluster;
 10047a0:	8b be 24 05 00 00    	mov    edi,DWORD PTR [esi+0x524]
 10047a6:	eb 08                	jmp    10047b0 <_read_sectors+0x88>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:581
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
            Cluster = file->startcluster;
 10047a8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:580
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
 10047ab:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:585 (discriminator 1)
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
 10047b0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
 10047b4:	76 46                	jbe    10047fc <_read_sectors+0xd4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:590
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
 10047b6:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
 10047ba:	55                   	push   ebp
 10047bb:	53                   	push   ebx
 10047bc:	56                   	push   esi
 10047bd:	68 60 00 12 00       	push   0x120060
 10047c2:	e8 ae fb ff ff       	call   1004375 <fatfs_cache_get_next_cluster>
 10047c7:	83 c4 10             	add    esp,0x10
 10047ca:	85 c0                	test   eax,eax
 10047cc:	75 22                	jne    10047f0 <_read_sectors+0xc8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:593
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
 10047ce:	83 ec 08             	sub    esp,0x8
 10047d1:	57                   	push   edi
 10047d2:	68 60 00 12 00       	push   0x120060
 10047d7:	e8 80 2a 00 00       	call   100725c <fatfs_find_next_cluster>
 10047dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:596

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
 10047e0:	50                   	push   eax
 10047e1:	53                   	push   ebx
 10047e2:	56                   	push   esi
 10047e3:	68 60 00 12 00       	push   0x120060
 10047e8:	e8 b8 fb ff ff       	call   10043a5 <fatfs_cache_set_next_cluster>
 10047ed:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:599
            }

            Cluster = nextCluster;
 10047f0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:585
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
 10047f4:	83 c3 01             	add    ebx,0x1
 10047f7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
 10047fa:	77 be                	ja     10047ba <_read_sectors+0x92>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:612
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
        return 0;
 10047fc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:603

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
 1004801:	83 ff ff             	cmp    edi,0xffffffff
 1004804:	74 44                	je     100484a <_read_sectors+0x122>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:605
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
 1004806:	89 be 24 05 00 00    	mov    DWORD PTR [esi+0x524],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:606
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
 100480c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1004810:	89 86 20 05 00 00    	mov    DWORD PTR [esi+0x520],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:615
    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
 1004816:	83 ec 08             	sub    esp,0x8
 1004819:	57                   	push   edi
 100481a:	68 60 00 12 00       	push   0x120060
 100481f:	e8 7f ef ff ff       	call   10037a3 <fatfs_lba_of_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:618

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
 1004824:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
 1004828:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 100482c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
 1004830:	50                   	push   eax
 1004831:	68 60 00 12 00       	push   0x120060
 1004836:	e8 a2 ef ff ff       	call   10037dd <fatfs_sector_read>
 100483b:	83 c4 20             	add    esp,0x20
 100483e:	85 c0                	test   eax,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:619
        return count;
 1004840:	b8 00 00 00 00       	mov    eax,0x0
 1004845:	0f 45 44 24 40       	cmovne eax,DWORD PTR [esp+0x40]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:622
    else
        return 0;
}
 100484a:	83 c4 2c             	add    esp,0x2c
 100484d:	5b                   	pop    ebx
 100484e:	5e                   	pop    esi
 100484f:	5f                   	pop    edi
 1004850:	5d                   	pop    ebp
 1004851:	c3                   	ret    

01004852 <_free_file>:
_free_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:109
}
//-----------------------------------------------------------------------------
// _free_file: Free open file handle
//-----------------------------------------------------------------------------
static void _free_file(FL_FILE* file)
{
 1004852:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:111
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);
 1004853:	8d 90 34 07 00 00    	lea    edx,[eax+0x734]
fat_list_remove():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:60
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
 1004859:	8b 88 34 07 00 00    	mov    ecx,DWORD PTR [eax+0x734]
 100485f:	85 c9                	test   ecx,ecx
 1004861:	75 0e                	jne    1004871 <_free_file+0x1f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
 1004863:	8b 88 38 07 00 00    	mov    ecx,DWORD PTR [eax+0x738]
 1004869:	89 0d 48 00 12 00    	mov    DWORD PTR ds:0x120048,ecx
 100486f:	eb 09                	jmp    100487a <_free_file+0x28>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
 1004871:	8b 98 38 07 00 00    	mov    ebx,DWORD PTR [eax+0x738]
 1004877:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:65

    if(!node->next)
 100487a:	8b 88 38 07 00 00    	mov    ecx,DWORD PTR [eax+0x738]
 1004880:	85 c9                	test   ecx,ecx
 1004882:	75 0d                	jne    1004891 <_free_file+0x3f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
 1004884:	8b 80 34 07 00 00    	mov    eax,DWORD PTR [eax+0x734]
 100488a:	a3 4c 00 12 00       	mov    ds:0x12004c,eax
 100488f:	eb 08                	jmp    1004899 <_free_file+0x47>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:68
    else
        node->next->previous = node->previous;
 1004891:	8b 80 34 07 00 00    	mov    eax,DWORD PTR [eax+0x734]
 1004897:	89 01                	mov    DWORD PTR [ecx],eax
_free_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:114

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
 1004899:	b8 40 00 12 00       	mov    eax,0x120040
 100489e:	e8 3d fb ff ff       	call   10043e0 <fat_list_insert_last>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:115
}
 10048a3:	5b                   	pop    ebx
 10048a4:	c3                   	ret    

010048a5 <_open_file>:
_open_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:325
#endif
//-----------------------------------------------------------------------------
// _open_file: Open a file for reading
//-----------------------------------------------------------------------------
static FL_FILE* _open_file(const char *path)
{
 10048a5:	55                   	push   ebp
 10048a6:	57                   	push   edi
 10048a7:	56                   	push   esi
 10048a8:	53                   	push   ebx
 10048a9:	83 ec 2c             	sub    esp,0x2c
 10048ac:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:330
    FL_FILE* file;
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
 10048ae:	e8 82 fb ff ff       	call   1004435 <_allocate_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:331
    if (!file)
 10048b3:	85 c0                	test   eax,eax
 10048b5:	0f 84 71 01 00 00    	je     1004a2c <_open_file+0x187>
 10048bb:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:335
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
 10048bd:	8d 78 14             	lea    edi,[eax+0x14]
 10048c0:	83 ec 04             	sub    esp,0x4
 10048c3:	68 80 00 00 00       	push   0x80
 10048c8:	6a 00                	push   0x0
 10048ca:	57                   	push   edi
 10048cb:	e8 ef 45 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:336
    memset(file->filename, '\0', sizeof(file->filename));
 10048d0:	8d b3 94 00 00 00    	lea    esi,[ebx+0x94]
 10048d6:	83 c4 0c             	add    esp,0xc
 10048d9:	68 80 00 00 00       	push   0x80
 10048de:	6a 00                	push   0x0
 10048e0:	56                   	push   esi
 10048e1:	e8 d9 45 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:339

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
 10048e6:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
 10048ed:	56                   	push   esi
 10048ee:	68 80 00 00 00       	push   0x80
 10048f3:	57                   	push   edi
 10048f4:	55                   	push   ebp
 10048f5:	e8 90 23 00 00       	call   1006c8a <fatfs_split_path>
 10048fa:	83 c4 20             	add    esp,0x20
 10048fd:	83 f8 ff             	cmp    eax,0xffffffff
 1004900:	75 11                	jne    1004913 <_open_file+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:341
    {
        _free_file(file);
 1004902:	89 d8                	mov    eax,ebx
 1004904:	e8 49 ff ff ff       	call   1004852 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:342
        return NULL;
 1004909:	b8 00 00 00 00       	mov    eax,0x0
 100490e:	e9 1e 01 00 00       	jmp    1004a31 <_open_file+0x18c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:346
    }

    // Check if file already open
    if (_check_file_open(file))
 1004913:	89 d8                	mov    eax,ebx
 1004915:	e8 69 fb ff ff       	call   1004483 <_check_file_open>
 100491a:	85 c0                	test   eax,eax
 100491c:	74 11                	je     100492f <_open_file+0x8a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:348
    {
        _free_file(file);
 100491e:	89 d8                	mov    eax,ebx
 1004920:	e8 2d ff ff ff       	call   1004852 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:349
        return NULL;
 1004925:	b8 00 00 00 00       	mov    eax,0x0
 100492a:	e9 02 01 00 00       	jmp    1004a31 <_open_file+0x18c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:353
    }

    // If file is in the root dir
    if (file->path[0]==0)
 100492f:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
 1004933:	75 14                	jne    1004949 <_open_file+0xa4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:354
        file->parentcluster = fatfs_get_root_cluster(&_fs);
 1004935:	83 ec 0c             	sub    esp,0xc
 1004938:	68 60 00 12 00       	push   0x120060
 100493d:	e8 5a f1 ff ff       	call   1003a9c <fatfs_get_root_cluster>
 1004942:	89 03                	mov    DWORD PTR [ebx],eax
 1004944:	83 c4 10             	add    esp,0x10
 1004947:	eb 1e                	jmp    1004967 <_open_file+0xc2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:358
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
 1004949:	89 da                	mov    edx,ebx
 100494b:	89 f8                	mov    eax,edi
 100494d:	e8 b5 fb ff ff       	call   1004507 <_open_directory>
 1004952:	85 c0                	test   eax,eax
 1004954:	75 11                	jne    1004967 <_open_file+0xc2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:360
        {
            _free_file(file);
 1004956:	89 d8                	mov    eax,ebx
 1004958:	e8 f5 fe ff ff       	call   1004852 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:361
            return NULL;
 100495d:	b8 00 00 00 00       	mov    eax,0x0
 1004962:	e9 ca 00 00 00       	jmp    1004a31 <_open_file+0x18c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:366
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
 1004967:	54                   	push   esp
 1004968:	56                   	push   esi
 1004969:	ff 33                	push   DWORD PTR [ebx]
 100496b:	68 60 00 12 00       	push   0x120060
 1004970:	e8 2f f1 ff ff       	call   1003aa4 <fatfs_get_file_entry>
 1004975:	83 c4 10             	add    esp,0x10
 1004978:	85 c0                	test   eax,eax
 100497a:	0f 84 9e 00 00 00    	je     1004a1e <_open_file+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:368
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
 1004980:	83 ec 0c             	sub    esp,0xc
 1004983:	8d 44 24 0c          	lea    eax,[esp+0xc]
 1004987:	50                   	push   eax
 1004988:	e8 26 1c 00 00       	call   10065b3 <fatfs_entry_is_file>
 100498d:	83 c4 10             	add    esp,0x10
 1004990:	85 c0                	test   eax,eax
 1004992:	0f 84 86 00 00 00    	je     1004a1e <_open_file+0x179>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:371
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
 1004998:	83 ec 04             	sub    esp,0x4
 100499b:	6a 0b                	push   0xb
 100499d:	8d 44 24 08          	lea    eax,[esp+0x8]
 10049a1:	50                   	push   eax
 10049a2:	8d 83 14 01 00 00    	lea    eax,[ebx+0x114]
 10049a8:	50                   	push   eax
 10049a9:	e8 c2 4c 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:372
            file->filelength = FAT_HTONL(sfEntry.FileSize);
 10049ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
 10049b2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:373
            file->bytenum = 0;
 10049b5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:374
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
 10049bc:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
 10049c1:	c1 e0 10             	shl    eax,0x10
 10049c4:	0f b7 54 24 2a       	movzx  edx,WORD PTR [esp+0x2a]
 10049c9:	01 d0                	add    eax,edx
 10049cb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:375
            file->file_data_address = 0xFFFFFFFF;
 10049ce:	c7 83 28 07 00 00 ff 	mov    DWORD PTR [ebx+0x728],0xffffffff
 10049d5:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:376
            file->file_data_dirty = 0;
 10049d8:	c7 83 2c 07 00 00 00 	mov    DWORD PTR [ebx+0x72c],0x0
 10049df:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:377
            file->filelength_changed = 0;
 10049e2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:380

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
 10049e9:	c7 83 20 05 00 00 ff 	mov    DWORD PTR [ebx+0x520],0xffffffff
 10049f0:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:381
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
 10049f3:	c7 83 24 05 00 00 ff 	mov    DWORD PTR [ebx+0x524],0xffffffff
 10049fa:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:383

            fatfs_cache_init(&_fs, file);
 10049fd:	83 c4 08             	add    esp,0x8
 1004a00:	53                   	push   ebx
 1004a01:	68 60 00 12 00       	push   0x120060
 1004a06:	e8 3d f9 ff ff       	call   1004348 <fatfs_cache_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:385

            fatfs_fat_purge(&_fs);
 1004a0b:	c7 04 24 60 00 12 00 	mov    DWORD PTR [esp],0x120060
 1004a12:	e8 00 28 00 00       	call   1007217 <fatfs_fat_purge>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:387

            return file;
 1004a17:	83 c4 10             	add    esp,0x10
 1004a1a:	89 d8                	mov    eax,ebx
 1004a1c:	eb 13                	jmp    1004a31 <_open_file+0x18c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:390
        }

    _free_file(file);
 1004a1e:	89 d8                	mov    eax,ebx
 1004a20:	e8 2d fe ff ff       	call   1004852 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:391
    return NULL;
 1004a25:	b8 00 00 00 00       	mov    eax,0x0
 1004a2a:	eb 05                	jmp    1004a31 <_open_file+0x18c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:332
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
        return NULL;
 1004a2c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:392
            return file;
        }

    _free_file(file);
    return NULL;
}
 1004a31:	83 c4 2c             	add    esp,0x2c
 1004a34:	5b                   	pop    ebx
 1004a35:	5e                   	pop    esi
 1004a36:	5f                   	pop    edi
 1004a37:	5d                   	pop    ebp
 1004a38:	c3                   	ret    

01004a39 <fl_init>:
fl_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:632

//-----------------------------------------------------------------------------
// fl_init: Initialise library
//-----------------------------------------------------------------------------
void __attribute__ ((constructor)) fl_init(void)
{
 1004a39:	56                   	push   esi
 1004a3a:	53                   	push   ebx
fat_list_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_list.h:50
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
 1004a3b:	c7 05 44 00 12 00 00 	mov    DWORD PTR ds:0x120044,0x0
 1004a42:	00 00 00 
 1004a45:	c7 05 40 00 12 00 00 	mov    DWORD PTR ds:0x120040,0x0
 1004a4c:	00 00 00 
 1004a4f:	c7 05 4c 00 12 00 00 	mov    DWORD PTR ds:0x12004c,0x0
 1004a56:	00 00 00 
 1004a59:	c7 05 48 00 12 00 00 	mov    DWORD PTR ds:0x120048,0x0
 1004a60:	00 00 00 
 1004a63:	bb 14 0c 12 00       	mov    ebx,0x120c14
 1004a68:	be c4 9c 12 00       	mov    esi,0x129cc4
fl_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:647 (discriminator 3)
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
 1004a6d:	89 da                	mov    edx,ebx
 1004a6f:	b8 40 00 12 00       	mov    eax,0x120040
 1004a74:	e8 67 f9 ff ff       	call   10043e0 <fat_list_insert_last>
 1004a79:	81 c3 3c 07 00 00    	add    ebx,0x73c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:646 (discriminator 3)
    fat_list_init(&_open_file_list);
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
 1004a7f:	39 f3                	cmp    ebx,esi
 1004a81:	75 ea                	jne    1004a6d <fl_init+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:650
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    //printk("fl_init: Returning\n");
    _filelib_init = 1;
 1004a83:	c7 05 cc 04 12 00 01 	mov    DWORD PTR ds:0x1204cc,0x1
 1004a8a:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:651
}
 1004a8d:	5b                   	pop    ebx
 1004a8e:	5e                   	pop    esi
 1004a8f:	c3                   	ret    

01004a90 <fl_attach_locks>:
fl_attach_locks():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:657
//-----------------------------------------------------------------------------
// fl_attach_locks:
//-----------------------------------------------------------------------------
void fl_attach_locks(void (*lock)(void), void (*unlock)(void))
{
    _fs.fl_lock = lock;
 1004a90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1004a94:	a3 9c 00 12 00       	mov    ds:0x12009c,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:658
    _fs.fl_unlock = unlock;
 1004a99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1004a9d:	a3 a0 00 12 00       	mov    ds:0x1200a0,eax
 1004aa2:	c3                   	ret    

01004aa3 <fl_attach_media>:
fl_attach_media():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:664
}
//-----------------------------------------------------------------------------
// fl_attach_media:
//-----------------------------------------------------------------------------
int fl_attach_media(fn_diskio_read rd, fn_diskio_write wr)
{
 1004aa3:	53                   	push   ebx
 1004aa4:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:669
    int res;

    //printk("fl_attach_media: Entered\n");
    // If first call to library, initialise
    CHECK_FL_INIT();
 1004aa7:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1004aae:	75 05                	jne    1004ab5 <fl_attach_media+0x12>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:669 (discriminator 1)
 1004ab0:	e8 84 ff ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:671
    //FAT_PRINTF(("fl_attach_media: CHEKC_FL_INIT returned\n")); //clr
    _fs.disk_io.read_media = rd;
 1004ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1004ab9:	a3 94 00 12 00       	mov    ds:0x120094,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:672
    _fs.disk_io.write_media = wr;
 1004abe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1004ac2:	a3 98 00 12 00       	mov    ds:0x120098,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:675

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
 1004ac7:	83 ec 0c             	sub    esp,0xc
 1004aca:	68 60 00 12 00       	push   0x120060
 1004acf:	e8 a8 e9 ff ff       	call   100347c <fatfs_init>
 1004ad4:	89 c3                	mov    ebx,eax
 1004ad6:	83 c4 10             	add    esp,0x10
 1004ad9:	85 c0                	test   eax,eax
 1004adb:	74 15                	je     1004af2 <fl_attach_media+0x4f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:677
    {
        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
 1004add:	83 ec 08             	sub    esp,0x8
 1004ae0:	50                   	push   eax
 1004ae1:	68 3c 0c 04 01       	push   0x1040c3c
 1004ae6:	e8 f4 50 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:678
        return res;
 1004aeb:	83 c4 10             	add    esp,0x10
 1004aee:	89 d8                	mov    eax,ebx
 1004af0:	eb 0f                	jmp    1004b01 <fl_attach_media+0x5e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:682
    }

    //FAT_PRINTF(("fl_attach_media: returning valid=1\n")); //clr
    _filelib_valid = 1;
 1004af2:	c7 05 c8 04 12 00 01 	mov    DWORD PTR ds:0x1204c8,0x1
 1004af9:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:683
    return FAT_INIT_OK;
 1004afc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:684
}
 1004b01:	83 c4 08             	add    esp,0x8
 1004b04:	5b                   	pop    ebx
 1004b05:	c3                   	ret    

01004b06 <fl_shutdown>:
fl_shutdown():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:689
//-----------------------------------------------------------------------------
// fl_shutdown: Call before shutting down system
//-----------------------------------------------------------------------------
 void __attribute__ ((destructor))fl_shutdown(void)
{
 1004b06:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:691
    // If first call to library, initialise
    CHECK_FL_INIT();
 1004b09:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1004b10:	75 05                	jne    1004b17 <fl_shutdown+0x11>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:691 (discriminator 1)
 1004b12:	e8 22 ff ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:693

    FL_LOCK(&_fs);
 1004b17:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1004b1c:	85 c0                	test   eax,eax
 1004b1e:	74 02                	je     1004b22 <fl_shutdown+0x1c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:693 (discriminator 1)
 1004b20:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:694
    fatfs_fat_purge(&_fs);
 1004b22:	83 ec 0c             	sub    esp,0xc
 1004b25:	68 60 00 12 00       	push   0x120060
 1004b2a:	e8 e8 26 00 00       	call   1007217 <fatfs_fat_purge>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:695
    FL_UNLOCK(&_fs);
 1004b2f:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1004b34:	83 c4 10             	add    esp,0x10
 1004b37:	85 c0                	test   eax,eax
 1004b39:	74 02                	je     1004b3d <fl_shutdown+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:695 (discriminator 1)
 1004b3b:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:696
}
 1004b3d:	83 c4 0c             	add    esp,0xc
 1004b40:	c3                   	ret    

01004b41 <fl_fopen>:
fl_fopen():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:701
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
{
 1004b41:	55                   	push   ebp
 1004b42:	57                   	push   edi
 1004b43:	56                   	push   esi
 1004b44:	53                   	push   ebx
 1004b45:	83 ec 4c             	sub    esp,0x4c
 1004b48:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:707
    int i;
    FL_FILE* file;
    uint8 flags = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1004b4c:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1004b53:	75 05                	jne    1004b5a <fl_fopen+0x19>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:707 (discriminator 1)
 1004b55:	e8 df fe ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:709

    if (!_filelib_valid)
 1004b5a:	83 3d c8 04 12 00 00 	cmp    DWORD PTR ds:0x1204c8,0x0
 1004b61:	0f 84 5b 03 00 00    	je     1004ec2 <fl_fopen+0x381>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:712
        return NULL;

    if (!path || !mode)
 1004b67:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
 1004b6c:	0f 84 57 03 00 00    	je     1004ec9 <fl_fopen+0x388>
 1004b72:	85 f6                	test   esi,esi
 1004b74:	0f 84 4f 03 00 00    	je     1004ec9 <fl_fopen+0x388>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:733
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
 1004b7a:	83 ec 0c             	sub    esp,0xc
 1004b7d:	56                   	push   esi
 1004b7e:	e8 79 51 00 00       	call   1009cfc <strlen>
 1004b83:	83 c4 10             	add    esp,0x10
 1004b86:	bb 00 00 00 00       	mov    ebx,0x0
 1004b8b:	b9 00 00 00 00       	mov    ecx,0x0
 1004b90:	eb 54                	jmp    1004be6 <fl_fopen+0xa5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:735
    {
        switch (mode[i])
 1004b92:	0f b6 3c 0e          	movzx  edi,BYTE PTR [esi+ecx*1]
 1004b96:	8d 57 d5             	lea    edx,[edi-0x2b]
 1004b99:	80 fa 4c             	cmp    dl,0x4c
 1004b9c:	77 45                	ja     1004be3 <fl_fopen+0xa2>
 1004b9e:	0f b6 d2             	movzx  edx,dl
 1004ba1:	ff 24 95 4c 8a 02 01 	jmp    DWORD PTR [edx*4+0x1028a4c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:739
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
 1004ba8:	83 cb 01             	or     ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:740
            break;
 1004bab:	eb 36                	jmp    1004be3 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:745
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
            flags |= FILE_ERASE;
            flags |= FILE_CREATE;
 1004bad:	83 cb 32             	or     ebx,0x32
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:746
            break;
 1004bb0:	eb 31                	jmp    1004be3 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:751
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
            flags |= FILE_APPEND;
            flags |= FILE_CREATE;
 1004bb2:	83 cb 26             	or     ebx,0x26
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:752
            break;
 1004bb5:	eb 2c                	jmp    1004be3 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:754
        case '+':
            if (flags & FILE_READ)
 1004bb7:	f6 c3 01             	test   bl,0x1
 1004bba:	74 05                	je     1004bc1 <fl_fopen+0x80>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:755
                flags |= FILE_WRITE;
 1004bbc:	83 cb 02             	or     ebx,0x2
 1004bbf:	eb 22                	jmp    1004be3 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:756
            else if (flags & FILE_WRITE)
 1004bc1:	f6 c3 02             	test   bl,0x2
 1004bc4:	74 05                	je     1004bcb <fl_fopen+0x8a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:760
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
 1004bc6:	83 cb 31             	or     ebx,0x31
 1004bc9:	eb 18                	jmp    1004be3 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:762
            }
            else if (flags & FILE_APPEND)
 1004bcb:	89 df                	mov    edi,ebx
 1004bcd:	83 e7 04             	and    edi,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:767
            {
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
 1004bd0:	89 da                	mov    edx,ebx
 1004bd2:	83 ca 27             	or     edx,0x27
 1004bd5:	89 d5                	mov    ebp,edx
 1004bd7:	89 fa                	mov    edx,edi
 1004bd9:	84 d2                	test   dl,dl
 1004bdb:	0f 45 dd             	cmovne ebx,ebp
 1004bde:	eb 03                	jmp    1004be3 <fl_fopen+0xa2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:772
            }
            break;
        case 'b':
        case 'B':
            flags |= FILE_BINARY;
 1004be0:	83 cb 08             	or     ebx,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:733 (discriminator 2)
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
 1004be3:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:733 (discriminator 1)
 1004be6:	39 c1                	cmp    ecx,eax
 1004be8:	7c a8                	jl     1004b92 <fl_fopen+0x51>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:786
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
 1004bea:	89 d8                	mov    eax,ebx
 1004bec:	83 e0 d9             	and    eax,0xffffffd9
 1004bef:	83 3d 98 00 12 00 00 	cmp    DWORD PTR ds:0x120098,0x0
 1004bf6:	0f 44 d8             	cmove  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:788

    FL_LOCK(&_fs);
 1004bf9:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1004bfe:	85 c0                	test   eax,eax
 1004c00:	74 02                	je     1004c04 <fl_fopen+0xc3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:788 (discriminator 1)
 1004c02:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:791

    // Read
    if (flags & FILE_READ)
 1004c04:	89 d8                	mov    eax,ebx
 1004c06:	83 e0 01             	and    eax,0x1
 1004c09:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
 1004c0d:	74 13                	je     1004c22 <fl_fopen+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:792
        file = _open_file(path);
 1004c0f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
 1004c13:	e8 8d fc ff ff       	call   10048a5 <_open_file>
 1004c18:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:796

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
 1004c1a:	85 c0                	test   eax,eax
 1004c1c:	0f 85 88 02 00 00    	jne    1004eaa <fl_fopen+0x369>
 1004c22:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:796 (discriminator 1)
 1004c27:	f6 c3 20             	test   bl,0x20
 1004c2a:	0f 84 80 02 00 00    	je     1004eb0 <fl_fopen+0x36f>
_create_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:405
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;

    // No write access?
    if (!_fs.disk_io.write_media)
 1004c30:	83 3d 98 00 12 00 00 	cmp    DWORD PTR ds:0x120098,0x0
 1004c37:	0f 84 a7 02 00 00    	je     1004ee4 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:409
        return NULL;

    // Allocate a new file handle
    file = _allocate_file();
 1004c3d:	e8 f3 f7 ff ff       	call   1004435 <_allocate_file>
 1004c42:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:410
    if (!file)
 1004c44:	85 c0                	test   eax,eax
 1004c46:	0f 84 98 02 00 00    	je     1004ee4 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:414
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
 1004c4c:	8d 78 14             	lea    edi,[eax+0x14]
 1004c4f:	83 ec 04             	sub    esp,0x4
 1004c52:	68 80 00 00 00       	push   0x80
 1004c57:	6a 00                	push   0x0
 1004c59:	57                   	push   edi
 1004c5a:	e8 60 42 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:415
    memset(file->filename, '\0', sizeof(file->filename));
 1004c5f:	8d 86 94 00 00 00    	lea    eax,[esi+0x94]
 1004c65:	89 c5                	mov    ebp,eax
 1004c67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
 1004c6b:	83 c4 0c             	add    esp,0xc
 1004c6e:	68 80 00 00 00       	push   0x80
 1004c73:	6a 00                	push   0x0
 1004c75:	50                   	push   eax
 1004c76:	e8 44 42 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:418

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
 1004c7b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
 1004c82:	55                   	push   ebp
 1004c83:	68 80 00 00 00       	push   0x80
 1004c88:	57                   	push   edi
 1004c89:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 1004c8d:	e8 f8 1f 00 00       	call   1006c8a <fatfs_split_path>
 1004c92:	83 c4 20             	add    esp,0x20
 1004c95:	83 f8 ff             	cmp    eax,0xffffffff
 1004c98:	75 0c                	jne    1004ca6 <fl_fopen+0x165>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:420
    {
        _free_file(file);
 1004c9a:	89 f0                	mov    eax,esi
 1004c9c:	e8 b1 fb ff ff       	call   1004852 <_free_file>
 1004ca1:	e9 3e 02 00 00       	jmp    1004ee4 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:425
        return NULL;
    }

    // Check if file already open
    if (_check_file_open(file))
 1004ca6:	89 f0                	mov    eax,esi
 1004ca8:	e8 d6 f7 ff ff       	call   1004483 <_check_file_open>
 1004cad:	85 c0                	test   eax,eax
 1004caf:	74 0c                	je     1004cbd <fl_fopen+0x17c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:427
    {
        _free_file(file);
 1004cb1:	89 f0                	mov    eax,esi
 1004cb3:	e8 9a fb ff ff       	call   1004852 <_free_file>
 1004cb8:	e9 27 02 00 00       	jmp    1004ee4 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:432
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0] == 0)
 1004cbd:	80 7e 14 00          	cmp    BYTE PTR [esi+0x14],0x0
 1004cc1:	75 14                	jne    1004cd7 <fl_fopen+0x196>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:433
        file->parentcluster = fatfs_get_root_cluster(&_fs);
 1004cc3:	83 ec 0c             	sub    esp,0xc
 1004cc6:	68 60 00 12 00       	push   0x120060
 1004ccb:	e8 cc ed ff ff       	call   1003a9c <fatfs_get_root_cluster>
 1004cd0:	89 06                	mov    DWORD PTR [esi],eax
 1004cd2:	83 c4 10             	add    esp,0x10
 1004cd5:	eb 19                	jmp    1004cf0 <fl_fopen+0x1af>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:437
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
 1004cd7:	89 f2                	mov    edx,esi
 1004cd9:	89 f8                	mov    eax,edi
 1004cdb:	e8 27 f8 ff ff       	call   1004507 <_open_directory>
 1004ce0:	85 c0                	test   eax,eax
 1004ce2:	75 0c                	jne    1004cf0 <fl_fopen+0x1af>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:439
        {
            _free_file(file);
 1004ce4:	89 f0                	mov    eax,esi
 1004ce6:	e8 67 fb ff ff       	call   1004852 <_free_file>
 1004ceb:	e9 f4 01 00 00       	jmp    1004ee4 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:445
            return NULL;
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
 1004cf0:	8d 44 24 20          	lea    eax,[esp+0x20]
 1004cf4:	50                   	push   eax
 1004cf5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 1004cf9:	ff 36                	push   DWORD PTR [esi]
 1004cfb:	68 60 00 12 00       	push   0x120060
 1004d00:	e8 9f ed ff ff       	call   1003aa4 <fatfs_get_file_entry>
 1004d05:	83 c4 10             	add    esp,0x10
 1004d08:	83 f8 01             	cmp    eax,0x1
 1004d0b:	75 0c                	jne    1004d19 <fl_fopen+0x1d8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:447
    {
        _free_file(file);
 1004d0d:	89 f0                	mov    eax,esi
 1004d0f:	e8 3e fb ff ff       	call   1004852 <_free_file>
 1004d14:	e9 cb 01 00 00       	jmp    1004ee4 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:451
        return NULL;
    }

    file->startcluster = 0;
 1004d19:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:454

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
 1004d20:	6a 01                	push   0x1
 1004d22:	8d 46 04             	lea    eax,[esi+0x4]
 1004d25:	50                   	push   eax
 1004d26:	6a 01                	push   0x1
 1004d28:	68 60 00 12 00       	push   0x120060
 1004d2d:	e8 46 2a 00 00       	call   1007778 <fatfs_allocate_free_space>
 1004d32:	83 c4 10             	add    esp,0x10
 1004d35:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:473
        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
 1004d3a:	8d ae 14 01 00 00    	lea    ebp,[esi+0x114]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:454
    }

    file->startcluster = 0;

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
 1004d40:	85 c0                	test   eax,eax
 1004d42:	75 0c                	jne    1004d50 <fl_fopen+0x20f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:456
    {
        _free_file(file);
 1004d44:	89 f0                	mov    eax,esi
 1004d46:	e8 07 fb ff ff       	call   1004852 <_free_file>
 1004d4b:	e9 94 01 00 00       	jmp    1004ee4 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:466
    // Generate a short filename & tail
    tailNum = 0;
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
 1004d50:	83 ec 08             	sub    esp,0x8
 1004d53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1004d57:	8d 44 24 21          	lea    eax,[esp+0x21]
 1004d5b:	50                   	push   eax
 1004d5c:	e8 37 1a 00 00       	call   1006798 <fatfs_lfn_create_sfn>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:469

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
 1004d61:	83 c4 10             	add    esp,0x10
 1004d64:	85 ff                	test   edi,edi
 1004d66:	74 2c                	je     1004d94 <fl_fopen+0x253>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:470
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
 1004d68:	83 ec 04             	sub    esp,0x4
 1004d6b:	57                   	push   edi
 1004d6c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
 1004d70:	50                   	push   eax
 1004d71:	55                   	push   ebp
 1004d72:	e8 4c 1b 00 00       	call   10068c3 <fatfs_lfn_generate_tail>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:476
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
 1004d77:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
 1004d7b:	83 c4 0c             	add    esp,0xc
 1004d7e:	55                   	push   ebp
 1004d7f:	ff 36                	push   DWORD PTR [esi]
 1004d81:	68 60 00 12 00       	push   0x120060
 1004d86:	e8 36 ef ff ff       	call   1003cc1 <fatfs_sfn_exists>
 1004d8b:	83 c4 10             	add    esp,0x10
 1004d8e:	85 c0                	test   eax,eax
 1004d90:	75 3b                	jne    1004dcd <fl_fopen+0x28c>
 1004d92:	eb 2f                	jmp    1004dc3 <fl_fopen+0x282>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:473
        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
 1004d94:	83 ec 04             	sub    esp,0x4
 1004d97:	6a 0b                	push   0xb
 1004d99:	8d 44 24 1d          	lea    eax,[esp+0x1d]
 1004d9d:	50                   	push   eax
 1004d9e:	55                   	push   ebp
 1004d9f:	e8 cc 48 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:476

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
 1004da4:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
 1004da8:	83 c4 0c             	add    esp,0xc
 1004dab:	55                   	push   ebp
 1004dac:	ff 36                	push   DWORD PTR [esi]
 1004dae:	68 60 00 12 00       	push   0x120060
 1004db3:	e8 09 ef ff ff       	call   1003cc1 <fatfs_sfn_exists>
 1004db8:	83 c4 10             	add    esp,0x10
 1004dbb:	85 c0                	test   eax,eax
 1004dbd:	0f 85 0d 01 00 00    	jne    1004ed0 <fl_fopen+0x38f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:484
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
 1004dc3:	81 ff 0f 27 00 00    	cmp    edi,0x270f
 1004dc9:	75 30                	jne    1004dfb <fl_fopen+0x2ba>
 1004dcb:	eb 0f                	jmp    1004ddc <fl_fopen+0x29b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:479

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;

        tailNum++;
 1004dcd:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:481
    }
    while (tailNum < 9999);
 1004dd0:	81 ff 0f 27 00 00    	cmp    edi,0x270f
 1004dd6:	0f 85 74 ff ff ff    	jne    1004d50 <fl_fopen+0x20f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:487

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
 1004ddc:	83 ec 08             	sub    esp,0x8
 1004ddf:	ff 76 04             	push   DWORD PTR [esi+0x4]
 1004de2:	68 60 00 12 00       	push   0x120060
 1004de7:	e8 75 27 00 00       	call   1007561 <fatfs_free_cluster_chain>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:489

        _free_file(file);
 1004dec:	89 f0                	mov    eax,esi
 1004dee:	e8 5f fa ff ff       	call   1004852 <_free_file>
 1004df3:	83 c4 10             	add    esp,0x10
 1004df6:	e9 e9 00 00 00       	jmp    1004ee4 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:518
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
 1004dfb:	83 ec 04             	sub    esp,0x4
 1004dfe:	6a 00                	push   0x0
 1004e00:	6a 00                	push   0x0
 1004e02:	ff 76 04             	push   DWORD PTR [esi+0x4]
 1004e05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1004e09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1004e0d:	ff 36                	push   DWORD PTR [esi]
 1004e0f:	68 60 00 12 00       	push   0x120060
 1004e14:	e8 1a 2a 00 00       	call   1007833 <fatfs_add_file_entry>
 1004e19:	83 c4 20             	add    esp,0x20
 1004e1c:	85 c0                	test   eax,eax
 1004e1e:	75 1f                	jne    1004e3f <fl_fopen+0x2fe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:521
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
 1004e20:	83 ec 08             	sub    esp,0x8
 1004e23:	ff 76 04             	push   DWORD PTR [esi+0x4]
 1004e26:	68 60 00 12 00       	push   0x120060
 1004e2b:	e8 31 27 00 00       	call   1007561 <fatfs_free_cluster_chain>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:523

        _free_file(file);
 1004e30:	89 f0                	mov    eax,esi
 1004e32:	e8 1b fa ff ff       	call   1004852 <_free_file>
 1004e37:	83 c4 10             	add    esp,0x10
 1004e3a:	e9 a5 00 00 00       	jmp    1004ee4 <fl_fopen+0x3a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:528
        return NULL;
    }

    // General
    file->filelength = 0;
 1004e3f:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:529
    file->bytenum = 0;
 1004e46:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:530
    file->file_data_address = 0xFFFFFFFF;
 1004e4d:	c7 86 28 07 00 00 ff 	mov    DWORD PTR [esi+0x728],0xffffffff
 1004e54:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:531
    file->file_data_dirty = 0;
 1004e57:	c7 86 2c 07 00 00 00 	mov    DWORD PTR [esi+0x72c],0x0
 1004e5e:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:532
    file->filelength_changed = 0;
 1004e61:	c7 46 10 00 00 00 00 	mov    DWORD PTR [esi+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:535

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
 1004e68:	c7 86 20 05 00 00 ff 	mov    DWORD PTR [esi+0x520],0xffffffff
 1004e6f:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:536
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
 1004e72:	c7 86 24 05 00 00 ff 	mov    DWORD PTR [esi+0x524],0xffffffff
 1004e79:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:538

    fatfs_cache_init(&_fs, file);
 1004e7c:	83 ec 08             	sub    esp,0x8
 1004e7f:	56                   	push   esi
 1004e80:	68 60 00 12 00       	push   0x120060
 1004e85:	e8 be f4 ff ff       	call   1004348 <fatfs_cache_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:540

    fatfs_fat_purge(&_fs);
 1004e8a:	c7 04 24 60 00 12 00 	mov    DWORD PTR [esp],0x120060
 1004e91:	e8 81 23 00 00       	call   1007217 <fatfs_fat_purge>
 1004e96:	83 c4 10             	add    esp,0x10
 1004e99:	eb 0b                	jmp    1004ea6 <fl_fopen+0x365>
fl_fopen():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:804

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
        if ((flags & FILE_CREATE) && !file)
            if (flags & (FILE_WRITE | FILE_APPEND))
                file = _open_file(path);
 1004e9b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
 1004e9f:	e8 01 fa ff ff       	call   10048a5 <_open_file>
 1004ea4:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:806

    if (file)
 1004ea6:	85 f6                	test   esi,esi
 1004ea8:	74 06                	je     1004eb0 <fl_fopen+0x36f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:807
        file->flags = flags;
 1004eaa:	88 9e 30 07 00 00    	mov    BYTE PTR [esi+0x730],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:809

    FL_UNLOCK(&_fs);
 1004eb0:	8b 15 a0 00 12 00    	mov    edx,DWORD PTR ds:0x1200a0
 1004eb6:	89 f0                	mov    eax,esi
 1004eb8:	85 d2                	test   edx,edx
 1004eba:	74 36                	je     1004ef2 <fl_fopen+0x3b1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:809 (discriminator 1)
 1004ebc:	ff d2                	call   edx
 1004ebe:	89 f0                	mov    eax,esi
 1004ec0:	eb 30                	jmp    1004ef2 <fl_fopen+0x3b1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:710

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (!_filelib_valid)
        return NULL;
 1004ec2:	b8 00 00 00 00       	mov    eax,0x0
 1004ec7:	eb 29                	jmp    1004ef2 <fl_fopen+0x3b1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:713

    if (!path || !mode)
        return NULL;
 1004ec9:	b8 00 00 00 00       	mov    eax,0x0
 1004ece:	eb 22                	jmp    1004ef2 <fl_fopen+0x3b1>
_create_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:479

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;

        tailNum++;
 1004ed0:	83 c7 01             	add    edi,0x1
 1004ed3:	e9 78 fe ff ff       	jmp    1004d50 <fl_fopen+0x20f>
fl_fopen():
 1004ed8:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:803
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
        if ((flags & FILE_CREATE) && !file)
            if (flags & (FILE_WRITE | FILE_APPEND))
 1004edd:	f6 c3 06             	test   bl,0x6
 1004ee0:	74 c4                	je     1004ea6 <fl_fopen+0x365>
 1004ee2:	eb b7                	jmp    1004e9b <fl_fopen+0x35a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:801
    if (!file && (flags & FILE_CREATE))
        file = _create_file(path);
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
 1004ee4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
 1004ee9:	74 ed                	je     1004ed8 <fl_fopen+0x397>
 1004eeb:	be 00 00 00 00       	mov    esi,0x0
 1004ef0:	eb b4                	jmp    1004ea6 <fl_fopen+0x365>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:811
    if (file)
        file->flags = flags;

    FL_UNLOCK(&_fs);
    return file;
}
 1004ef2:	83 c4 4c             	add    esp,0x4c
 1004ef5:	5b                   	pop    ebx
 1004ef6:	5e                   	pop    esi
 1004ef7:	5f                   	pop    edi
 1004ef8:	5d                   	pop    ebp
 1004ef9:	c3                   	ret    

01004efa <fl_fflush>:
fl_fflush():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:905
#endif
//-----------------------------------------------------------------------------
// fl_fflush: Flush un-written data to the file
//-----------------------------------------------------------------------------
int fl_fflush(void *f)
{
 1004efa:	53                   	push   ebx
 1004efb:	83 ec 08             	sub    esp,0x8
 1004efe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:910
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1004f02:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1004f09:	75 05                	jne    1004f10 <fl_fflush+0x16>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:910 (discriminator 1)
 1004f0b:	e8 29 fb ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:912

    if (file)
 1004f10:	85 db                	test   ebx,ebx
 1004f12:	74 48                	je     1004f5c <fl_fflush+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:914
    {
        FL_LOCK(&_fs);
 1004f14:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1004f19:	85 c0                	test   eax,eax
 1004f1b:	74 02                	je     1004f1f <fl_fflush+0x25>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:914 (discriminator 1)
 1004f1d:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:917

        // If some write data still in buffer
        if (file->file_data_dirty)
 1004f1f:	83 bb 2c 07 00 00 00 	cmp    DWORD PTR [ebx+0x72c],0x0
 1004f26:	74 29                	je     1004f51 <fl_fflush+0x57>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:920
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
 1004f28:	8d 8b 28 05 00 00    	lea    ecx,[ebx+0x528]
 1004f2e:	8b 93 28 07 00 00    	mov    edx,DWORD PTR [ebx+0x728]
 1004f34:	83 ec 0c             	sub    esp,0xc
 1004f37:	6a 01                	push   0x1
 1004f39:	89 d8                	mov    eax,ebx
 1004f3b:	e8 82 f6 ff ff       	call   10045c2 <_write_sectors>
 1004f40:	83 c4 10             	add    esp,0x10
 1004f43:	85 c0                	test   eax,eax
 1004f45:	74 0a                	je     1004f51 <fl_fflush+0x57>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:921
                file->file_data_dirty = 0;
 1004f47:	c7 83 2c 07 00 00 00 	mov    DWORD PTR [ebx+0x72c],0x0
 1004f4e:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:924
        }

        FL_UNLOCK(&_fs);
 1004f51:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1004f56:	85 c0                	test   eax,eax
 1004f58:	74 02                	je     1004f5c <fl_fflush+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:924 (discriminator 1)
 1004f5a:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:928
    }
#endif
    return 0;
}
 1004f5c:	b8 00 00 00 00       	mov    eax,0x0
 1004f61:	83 c4 08             	add    esp,0x8
 1004f64:	5b                   	pop    ebx
 1004f65:	c3                   	ret    

01004f66 <fl_fclose>:
fl_fclose():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:933
//-----------------------------------------------------------------------------
// fl_fclose: Close an open file
//-----------------------------------------------------------------------------
void fl_fclose(void *f)
{
 1004f66:	53                   	push   ebx
 1004f67:	83 ec 08             	sub    esp,0x8
 1004f6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:937
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1004f6e:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1004f75:	75 05                	jne    1004f7c <fl_fclose+0x16>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:937 (discriminator 1)
 1004f77:	e8 bd fa ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:939

    if (file)
 1004f7c:	85 db                	test   ebx,ebx
 1004f7e:	0f 84 88 00 00 00    	je     100500c <fl_fclose+0xa6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:941
    {
        FL_LOCK(&_fs);
 1004f84:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1004f89:	85 c0                	test   eax,eax
 1004f8b:	74 02                	je     1004f8f <fl_fclose+0x29>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:941 (discriminator 1)
 1004f8d:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:944

        // Flush un-written data to file
        fl_fflush(f);
 1004f8f:	83 ec 0c             	sub    esp,0xc
 1004f92:	53                   	push   ebx
 1004f93:	e8 62 ff ff ff       	call   1004efa <fl_fflush>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:947

        // File size changed?
        if (file->filelength_changed)
 1004f98:	83 c4 10             	add    esp,0x10
 1004f9b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
 1004f9f:	74 19                	je     1004fba <fl_fclose+0x54>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:951
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
 1004fa1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 1004fa4:	8d 83 14 01 00 00    	lea    eax,[ebx+0x114]
 1004faa:	50                   	push   eax
 1004fab:	ff 33                	push   DWORD PTR [ebx]
 1004fad:	68 60 00 12 00       	push   0x120060
 1004fb2:	e8 4c ee ff ff       	call   1003e03 <fatfs_update_file_length>
 1004fb7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:956
#endif
            file->filelength_changed = 0;
        }

        file->bytenum = 0;
 1004fba:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:957
        file->filelength = 0;
 1004fc1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:958
        file->startcluster = 0;
 1004fc8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:959
        file->file_data_address = 0xFFFFFFFF;
 1004fcf:	c7 83 28 07 00 00 ff 	mov    DWORD PTR [ebx+0x728],0xffffffff
 1004fd6:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:960
        file->file_data_dirty = 0;
 1004fd9:	c7 83 2c 07 00 00 00 	mov    DWORD PTR [ebx+0x72c],0x0
 1004fe0:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:961
        file->filelength_changed = 0;
 1004fe3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:964

        // Free file handle
        _free_file(file);
 1004fea:	89 d8                	mov    eax,ebx
 1004fec:	e8 61 f8 ff ff       	call   1004852 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:966

        fatfs_fat_purge(&_fs);
 1004ff1:	83 ec 0c             	sub    esp,0xc
 1004ff4:	68 60 00 12 00       	push   0x120060
 1004ff9:	e8 19 22 00 00       	call   1007217 <fatfs_fat_purge>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:968

        FL_UNLOCK(&_fs);
 1004ffe:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005003:	83 c4 10             	add    esp,0x10
 1005006:	85 c0                	test   eax,eax
 1005008:	74 02                	je     100500c <fl_fclose+0xa6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:968 (discriminator 1)
 100500a:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:970
    }
}
 100500c:	83 c4 08             	add    esp,0x8
 100500f:	5b                   	pop    ebx
 1005010:	c3                   	ret    

01005011 <fl_fread>:
fl_fread():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1022
}
//-----------------------------------------------------------------------------
// fl_fread: Read a block of data from the file
//-----------------------------------------------------------------------------
int fl_fread(void * buffer, int size, int length, void *f )
{
 1005011:	55                   	push   ebp
 1005012:	57                   	push   edi
 1005013:	56                   	push   esi
 1005014:	53                   	push   ebx
 1005015:	83 ec 1c             	sub    esp,0x1c
 1005018:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1026
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
 100501c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 1005020:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
 1005025:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1032
    int bytesRead = 0;

    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1005029:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1005030:	75 05                	jne    1005037 <fl_fread+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1032 (discriminator 1)
 1005032:	e8 02 fa ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1034

    if (buffer==NULL || file==NULL)
 1005037:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
 100503c:	0f 84 4f 01 00 00    	je     1005191 <fl_fread+0x180>
 1005042:	85 f6                	test   esi,esi
 1005044:	0f 84 47 01 00 00    	je     1005191 <fl_fread+0x180>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1038
        return -1;

    // No read permissions
    if (!(file->flags & FILE_READ))
 100504a:	f6 86 30 07 00 00 01 	test   BYTE PTR [esi+0x730],0x1
 1005051:	0f 84 41 01 00 00    	je     1005198 <fl_fread+0x187>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1043
        return -1;

    // Nothing to be done
    if (!count)
        return 0;
 1005057:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1042
    // No read permissions
    if (!(file->flags & FILE_READ))
        return -1;

    // Nothing to be done
    if (!count)
 100505c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
 1005060:	85 db                	test   ebx,ebx
 1005062:	0f 84 4b 01 00 00    	je     10051b3 <fl_fread+0x1a2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1046
        return 0;

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
 1005068:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
 100506b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
 100506e:	39 c7                	cmp    edi,eax
 1005070:	0f 83 29 01 00 00    	jae    100519f <fl_fread+0x18e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1050
        return -1;

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
 1005076:	8d 0c 3b             	lea    ecx,[ebx+edi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1051
        count = file->filelength - file->bytenum;
 1005079:	89 c2                	mov    edx,eax
 100507b:	29 fa                	sub    edx,edi
 100507d:	39 c8                	cmp    eax,ecx
 100507f:	0f 43 d3             	cmovae edx,ebx
 1005082:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1054

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
 1005086:	89 f8                	mov    eax,edi
 1005088:	c1 e8 09             	shr    eax,0x9
 100508b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1057

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
 100508f:	81 e7 ff 01 00 00    	and    edi,0x1ff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1059

    while (bytesRead < count)
 1005095:	85 d2                	test   edx,edx
 1005097:	0f 8e 09 01 00 00    	jle    10051a6 <fl_fread+0x195>
 100509d:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1104
            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
                copyCount = (count - bytesRead);

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
 10050a2:	8d 86 28 05 00 00    	lea    eax,[esi+0x528]
 10050a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1062
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
 10050ac:	85 ff                	test   edi,edi
 10050ae:	75 4c                	jne    10050fc <fl_fread+0xeb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1062 (discriminator 1)
 10050b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 10050b4:	29 e8                	sub    eax,ebp
 10050b6:	3d ff 01 00 00       	cmp    eax,0x1ff
 10050bb:	7e 3f                	jle    10050fc <fl_fread+0xeb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1065
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);
 10050bd:	89 e9                	mov    ecx,ebp
 10050bf:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
 10050c3:	83 ec 0c             	sub    esp,0xc
 10050c6:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
 10050cc:	85 c0                	test   eax,eax
 10050ce:	0f 48 c2             	cmovs  eax,edx
 10050d1:	c1 f8 09             	sar    eax,0x9
 10050d4:	50                   	push   eax
 10050d5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
 10050d9:	89 fa                	mov    edx,edi
 10050db:	89 f0                	mov    eax,esi
 10050dd:	e8 46 f6 ff ff       	call   1004728 <_read_sectors>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1066
            if (sectorsRead)
 10050e2:	83 c4 10             	add    esp,0x10
 10050e5:	85 c0                	test   eax,eax
 10050e7:	0f 84 c0 00 00 00    	je     10051ad <fl_fread+0x19c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1069
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
 10050ed:	89 c3                	mov    ebx,eax
 10050ef:	c1 e3 09             	shl    ebx,0x9
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1072

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
 10050f2:	89 fa                	mov    edx,edi
 10050f4:	01 c2                	add    edx,eax
 10050f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1063

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
 10050fa:	eb 7d                	jmp    1005179 <fl_fread+0x168>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1081
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
 10050fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1005100:	39 86 28 07 00 00    	cmp    DWORD PTR [esi+0x728],eax
 1005106:	74 42                	je     100514a <fl_fread+0x139>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1084
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
 1005108:	83 be 2c 07 00 00 00 	cmp    DWORD PTR [esi+0x72c],0x0
 100510f:	74 0c                	je     100511d <fl_fread+0x10c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1085
                    fl_fflush(file);
 1005111:	83 ec 0c             	sub    esp,0xc
 1005114:	56                   	push   esi
 1005115:	e8 e0 fd ff ff       	call   1004efa <fl_fflush>
 100511a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1088

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
 100511d:	83 ec 0c             	sub    esp,0xc
 1005120:	6a 01                	push   0x1
 1005122:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
 1005126:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 100512a:	89 da                	mov    edx,ebx
 100512c:	89 f0                	mov    eax,esi
 100512e:	e8 f5 f5 ff ff       	call   1004728 <_read_sectors>
 1005133:	83 c4 10             	add    esp,0x10
 1005136:	85 c0                	test   eax,eax
 1005138:	74 77                	je     10051b1 <fl_fread+0x1a0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1092
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
 100513a:	89 9e 28 07 00 00    	mov    DWORD PTR [esi+0x728],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1093
                file->file_data_dirty = 0;
 1005140:	c7 86 2c 07 00 00 00 	mov    DWORD PTR [esi+0x72c],0x0
 1005147:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1097
            }

            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
 100514a:	bb 00 02 00 00       	mov    ebx,0x200
 100514f:	29 fb                	sub    ebx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1100

            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
 1005151:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1005155:	29 e8                	sub    eax,ebp
 1005157:	39 c3                	cmp    ebx,eax
 1005159:	0f 4f d8             	cmovg  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1104
                copyCount = (count - bytesRead);

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
 100515c:	83 ec 04             	sub    esp,0x4
 100515f:	53                   	push   ebx
 1005160:	03 7c 24 14          	add    edi,DWORD PTR [esp+0x14]
 1005164:	57                   	push   edi
 1005165:	89 e8                	mov    eax,ebp
 1005167:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
 100516b:	50                   	push   eax
 100516c:	e8 ff 44 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1107

            // Move onto next sector and reset copy offset
            sector++;
 1005171:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
 1005176:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1112
            offset = 0;
        }

        // Increase total read count
        bytesRead += copyCount;
 1005179:	01 dd                	add    ebp,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1115

        // Increment file pointer
        file->bytenum += copyCount;
 100517b:	01 5e 08             	add    DWORD PTR [esi+0x8],ebx
 100517e:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1059
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
 1005183:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
 1005187:	0f 8f 1f ff ff ff    	jg     10050ac <fl_fread+0x9b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1112
            sector++;
            offset = 0;
        }

        // Increase total read count
        bytesRead += copyCount;
 100518d:	89 e8                	mov    eax,ebp
 100518f:	eb 22                	jmp    10051b3 <fl_fread+0x1a2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1035

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (buffer==NULL || file==NULL)
        return -1;
 1005191:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1005196:	eb 1b                	jmp    10051b3 <fl_fread+0x1a2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1039

    // No read permissions
    if (!(file->flags & FILE_READ))
        return -1;
 1005198:	b8 ff ff ff ff       	mov    eax,0xffffffff
 100519d:	eb 14                	jmp    10051b3 <fl_fread+0x1a2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1047
    if (!count)
        return 0;

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
        return -1;
 100519f:	b8 ff ff ff ff       	mov    eax,0xffffffff
 10051a4:	eb 0d                	jmp    10051b3 <fl_fread+0x1a2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1027
{
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
    int bytesRead = 0;
 10051a6:	b8 00 00 00 00       	mov    eax,0x0
 10051ab:	eb 06                	jmp    10051b3 <fl_fread+0x1a2>
 10051ad:	89 e8                	mov    eax,ebp
 10051af:	eb 02                	jmp    10051b3 <fl_fread+0x1a2>
 10051b1:	89 e8                	mov    eax,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1119
        // Increment file pointer
        file->bytenum += copyCount;
    }

    return bytesRead;
}
 10051b3:	83 c4 1c             	add    esp,0x1c
 10051b6:	5b                   	pop    ebx
 10051b7:	5e                   	pop    esi
 10051b8:	5f                   	pop    edi
 10051b9:	5d                   	pop    ebp
 10051ba:	c3                   	ret    

010051bb <fl_fgetc>:
fl_fgetc():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:975
}
//-----------------------------------------------------------------------------
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
 10051bb:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:977
    int res;
    uint8 data = 0;
 10051be:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:979

    res = fl_fread(&data, 1, 1, f);
 10051c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 10051c7:	6a 01                	push   0x1
 10051c9:	6a 01                	push   0x1
 10051cb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
 10051cf:	50                   	push   eax
 10051d0:	e8 3c fe ff ff       	call   1005011 <fl_fread>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:981
    if (res == 1)
        return (int)data;
 10051d5:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
 10051da:	83 f8 01             	cmp    eax,0x1
 10051dd:	0f 44 c2             	cmove  eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:984
    else
        return res;
}
 10051e0:	83 c4 2c             	add    esp,0x2c
 10051e3:	c3                   	ret    

010051e4 <fl_fgets>:
fl_fgets():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:989
//-----------------------------------------------------------------------------
// fl_fgets: Get a string from a stream
//-----------------------------------------------------------------------------
char *fl_fgets(char *s, int n, void *f)
{
 10051e4:	55                   	push   ebp
 10051e5:	57                   	push   edi
 10051e6:	56                   	push   esi
 10051e7:	53                   	push   ebx
 10051e8:	83 ec 0c             	sub    esp,0xc
 10051eb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
 10051ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
 10051f3:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:993
    int idx = 0;

    // Space for null terminator?
    if (n > 0)
 10051f7:	85 f6                	test   esi,esi
 10051f9:	7e 3e                	jle    1005239 <fl_fgets+0x55>
 10051fb:	83 ee 01             	sub    esi,0x1
 10051fe:	bb 00 00 00 00       	mov    ebx,0x0
 1005203:	eb 1c                	jmp    1005221 <fl_fgets+0x3d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:998
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
        {
            int ch = fl_fgetc(f);
 1005205:	83 ec 0c             	sub    esp,0xc
 1005208:	55                   	push   ebp
 1005209:	e8 ad ff ff ff       	call   10051bb <fl_fgetc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1001

            // EOF / Error?
            if (ch < 0)
 100520e:	83 c4 10             	add    esp,0x10
 1005211:	85 c0                	test   eax,eax
 1005213:	78 12                	js     1005227 <fl_fgets+0x43>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1005
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
 1005215:	83 c3 01             	add    ebx,0x1
 1005218:	88 44 1f ff          	mov    BYTE PTR [edi+ebx*1-0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1008

            // End of line?
            if (ch == '\n')
 100521c:	83 f8 0a             	cmp    eax,0xa
 100521f:	74 0a                	je     100522b <fl_fgets+0x47>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:996

    // Space for null terminator?
    if (n > 0)
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
 1005221:	39 f3                	cmp    ebx,esi
 1005223:	75 e0                	jne    1005205 <fl_fgets+0x21>
 1005225:	eb 06                	jmp    100522d <fl_fgets+0x49>
 1005227:	89 de                	mov    esi,ebx
 1005229:	eb 02                	jmp    100522d <fl_fgets+0x49>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1005
            // EOF / Error?
            if (ch < 0)
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
 100522b:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1012
            // End of line?
            if (ch == '\n')
                break;
        }

        if (idx > 0)
 100522d:	85 f6                	test   esi,esi
 100522f:	7e 08                	jle    1005239 <fl_fgets+0x55>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1013
            s[idx] = '\0';
 1005231:	c6 04 37 00          	mov    BYTE PTR [edi+esi*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1016
    }

    return (idx > 0) ? s : 0;
 1005235:	89 f8                	mov    eax,edi
 1005237:	eb 05                	jmp    100523e <fl_fgets+0x5a>
 1005239:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1017
}
 100523e:	83 c4 0c             	add    esp,0xc
 1005241:	5b                   	pop    ebx
 1005242:	5e                   	pop    esi
 1005243:	5f                   	pop    edi
 1005244:	5d                   	pop    ebp
 1005245:	c3                   	ret    

01005246 <fl_fseek>:
fl_fseek():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1124
}
//-----------------------------------------------------------------------------
// fl_fseek: Seek to a specific place in the file
//-----------------------------------------------------------------------------
int fl_fseek( void *f, long offset, int origin )
{
 1005246:	55                   	push   ebp
 1005247:	57                   	push   edi
 1005248:	56                   	push   esi
 1005249:	53                   	push   ebx
 100524a:	83 ec 0c             	sub    esp,0xc
 100524d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
 1005251:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
 1005255:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1129
    FL_FILE *file = (FL_FILE *)f;
    int res = -1;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1005259:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1005260:	75 05                	jne    1005267 <fl_fseek+0x21>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1129 (discriminator 1)
 1005262:	e8 d2 f7 ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1131

    if (!file)
 1005267:	85 db                	test   ebx,ebx
 1005269:	0f 84 b0 00 00 00    	je     100531f <fl_fseek+0xd9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1134
        return -1;

    if (origin == SEEK_END && offset != 0)
 100526f:	83 fe 02             	cmp    esi,0x2
 1005272:	75 08                	jne    100527c <fl_fseek+0x36>
 1005274:	85 ff                	test   edi,edi
 1005276:	0f 85 aa 00 00 00    	jne    1005326 <fl_fseek+0xe0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1137
        return -1;

    FL_LOCK(&_fs);
 100527c:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1005281:	85 c0                	test   eax,eax
 1005283:	74 02                	je     1005287 <fl_fseek+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1137 (discriminator 1)
 1005285:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1140

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
 1005287:	c7 83 28 07 00 00 ff 	mov    DWORD PTR [ebx+0x728],0xffffffff
 100528e:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1141
    file->file_data_dirty = 0;
 1005291:	c7 83 2c 07 00 00 00 	mov    DWORD PTR [ebx+0x72c],0x0
 1005298:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1143

    if (origin == SEEK_SET)
 100529b:	85 f6                	test   esi,esi
 100529d:	75 14                	jne    10052b3 <fl_fseek+0x6d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1145
    {
        file->bytenum = (uint32)offset;
 100529f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1147

        if (file->bytenum > file->filelength)
 10052a2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1150
            file->bytenum = file->filelength;

        res = 0;
 10052a5:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1147

    if (origin == SEEK_SET)
    {
        file->bytenum = (uint32)offset;

        if (file->bytenum > file->filelength)
 10052aa:	39 c7                	cmp    edi,eax
 10052ac:	76 5f                	jbe    100530d <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1148
            file->bytenum = file->filelength;
 10052ae:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
 10052b1:	eb 5a                	jmp    100530d <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1152

        res = 0;
    }
    else if (origin == SEEK_CUR)
 10052b3:	83 fe 01             	cmp    esi,0x1
 10052b6:	75 40                	jne    10052f8 <fl_fseek+0xb2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1155
    {
        // Positive shift
        if (offset >= 0)
 10052b8:	85 ff                	test   edi,edi
 10052ba:	78 17                	js     10052d3 <fl_fseek+0x8d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1157
        {
            file->bytenum += offset;
 10052bc:	03 7b 08             	add    edi,DWORD PTR [ebx+0x8]
 10052bf:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1159

            if (file->bytenum > file->filelength)
 10052c2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1175
                file->bytenum = 0;
            else
                file->bytenum-= offset;
        }

        res = 0;
 10052c5:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1159
        // Positive shift
        if (offset >= 0)
        {
            file->bytenum += offset;

            if (file->bytenum > file->filelength)
 10052ca:	39 c7                	cmp    edi,eax
 10052cc:	76 3f                	jbe    100530d <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1160
                file->bytenum = file->filelength;
 10052ce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
 10052d1:	eb 3a                	jmp    100530d <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1169
        {
            // Make shift positive
            offset = -offset;

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
 10052d3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
 10052d6:	89 fa                	mov    edx,edi
 10052d8:	f7 da                	neg    edx
 10052da:	39 d0                	cmp    eax,edx
 10052dc:	73 0e                	jae    10052ec <fl_fseek+0xa6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1170
                file->bytenum = 0;
 10052de:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1175
            else
                file->bytenum-= offset;
        }

        res = 0;
 10052e5:	bd 00 00 00 00       	mov    ebp,0x0
 10052ea:	eb 21                	jmp    100530d <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1172

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
                file->bytenum = 0;
            else
                file->bytenum-= offset;
 10052ec:	01 c7                	add    edi,eax
 10052ee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1175
        }

        res = 0;
 10052f1:	bd 00 00 00 00       	mov    ebp,0x0
 10052f6:	eb 15                	jmp    100530d <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1183
    {
        file->bytenum = file->filelength;
        res = 0;
    }
    else
        res = -1;
 10052f8:	bd ff ff ff ff       	mov    ebp,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1177
                file->bytenum-= offset;
        }

        res = 0;
    }
    else if (origin == SEEK_END)
 10052fd:	83 fe 02             	cmp    esi,0x2
 1005300:	75 0b                	jne    100530d <fl_fseek+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1179
    {
        file->bytenum = file->filelength;
 1005302:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 1005305:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1180
        res = 0;
 1005308:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1185
    }
    else
        res = -1;

    FL_UNLOCK(&_fs);
 100530d:	8b 15 a0 00 12 00    	mov    edx,DWORD PTR ds:0x1200a0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1187

    return res;
 1005313:	89 e8                	mov    eax,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1185
        res = 0;
    }
    else
        res = -1;

    FL_UNLOCK(&_fs);
 1005315:	85 d2                	test   edx,edx
 1005317:	74 12                	je     100532b <fl_fseek+0xe5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1185 (discriminator 1)
 1005319:	ff d2                	call   edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1187 (discriminator 1)

    return res;
 100531b:	89 e8                	mov    eax,ebp
 100531d:	eb 0c                	jmp    100532b <fl_fseek+0xe5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1132

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (!file)
        return -1;
 100531f:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1005324:	eb 05                	jmp    100532b <fl_fseek+0xe5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1135

    if (origin == SEEK_END && offset != 0)
        return -1;
 1005326:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1188
        res = -1;

    FL_UNLOCK(&_fs);

    return res;
}
 100532b:	83 c4 0c             	add    esp,0xc
 100532e:	5b                   	pop    ebx
 100532f:	5e                   	pop    esi
 1005330:	5f                   	pop    edi
 1005331:	5d                   	pop    ebp
 1005332:	c3                   	ret    

01005333 <fl_fgetpos>:
fl_fgetpos():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1193
//-----------------------------------------------------------------------------
// fl_fgetpos: Get the current file position
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
 1005333:	53                   	push   ebx
 1005334:	83 ec 08             	sub    esp,0x8
 1005337:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1196
    FL_FILE *file = (FL_FILE *)f;

    if (!file)
 100533b:	85 db                	test   ebx,ebx
 100533d:	74 2c                	je     100536b <fl_fgetpos+0x38>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1199
        return -1;

    FL_LOCK(&_fs);
 100533f:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1005344:	85 c0                	test   eax,eax
 1005346:	74 02                	je     100534a <fl_fgetpos+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1199 (discriminator 1)
 1005348:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1202

    // Get position
    *position = file->bytenum;
 100534a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
 100534d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1005351:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1204

    FL_UNLOCK(&_fs);
 1005353:	8b 15 a0 00 12 00    	mov    edx,DWORD PTR ds:0x1200a0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1206

    return 0;
 1005359:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1204
    FL_LOCK(&_fs);

    // Get position
    *position = file->bytenum;

    FL_UNLOCK(&_fs);
 100535e:	85 d2                	test   edx,edx
 1005360:	74 0e                	je     1005370 <fl_fgetpos+0x3d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1204 (discriminator 1)
 1005362:	ff d2                	call   edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1206 (discriminator 1)

    return 0;
 1005364:	b8 00 00 00 00       	mov    eax,0x0
 1005369:	eb 05                	jmp    1005370 <fl_fgetpos+0x3d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1197
int fl_fgetpos(void *f , uint32 * position)
{
    FL_FILE *file = (FL_FILE *)f;

    if (!file)
        return -1;
 100536b:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1207
    *position = file->bytenum;

    FL_UNLOCK(&_fs);

    return 0;
}
 1005370:	83 c4 08             	add    esp,0x8
 1005373:	5b                   	pop    ebx
 1005374:	c3                   	ret    

01005375 <fl_ftell>:
fl_ftell():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1212
//-----------------------------------------------------------------------------
// fl_ftell: Get the current file position
//-----------------------------------------------------------------------------
long fl_ftell(void *f)
{
 1005375:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1213
    uint32 pos = 0;
 1005378:	c7 44 24 14 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
 100537f:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1215

    fl_fgetpos(f, &pos);
 1005380:	8d 44 24 14          	lea    eax,[esp+0x14]
 1005384:	50                   	push   eax
 1005385:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1005389:	e8 a5 ff ff ff       	call   1005333 <fl_fgetpos>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1218

    return (long)pos;
}
 100538e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 1005392:	83 c4 2c             	add    esp,0x2c
 1005395:	c3                   	ret    

01005396 <fl_feof>:
fl_feof():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1223
//-----------------------------------------------------------------------------
// fl_feof: Is the file pointer at the end of the stream?
//-----------------------------------------------------------------------------
int fl_feof(void *f)
{
 1005396:	53                   	push   ebx
 1005397:	83 ec 08             	sub    esp,0x8
 100539a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1227
    FL_FILE *file = (FL_FILE *)f;
    int res;

    if (!file)
 100539e:	85 db                	test   ebx,ebx
 10053a0:	74 26                	je     10053c8 <fl_feof+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1230
        return -1;

    FL_LOCK(&_fs);
 10053a2:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 10053a7:	85 c0                	test   eax,eax
 10053a9:	74 02                	je     10053ad <fl_feof+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1230 (discriminator 1)
 10053ab:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1232

    if (file->bytenum == file->filelength)
 10053ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 10053b0:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
 10053b3:	0f 94 c3             	sete   bl
 10053b6:	0f b6 db             	movzx  ebx,bl
 10053b9:	f7 db                	neg    ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1237
        res = EOF;
    else
        res = 0;

    FL_UNLOCK(&_fs);
 10053bb:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 10053c0:	85 c0                	test   eax,eax
 10053c2:	74 09                	je     10053cd <fl_feof+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1237 (discriminator 1)
 10053c4:	ff d0                	call   eax
 10053c6:	eb 05                	jmp    10053cd <fl_feof+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1228
{
    FL_FILE *file = (FL_FILE *)f;
    int res;

    if (!file)
        return -1;
 10053c8:	bb ff ff ff ff       	mov    ebx,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1240
        res = 0;

    FL_UNLOCK(&_fs);

    return res;
}
 10053cd:	89 d8                	mov    eax,ebx
 10053cf:	83 c4 08             	add    esp,0x8
 10053d2:	5b                   	pop    ebx
 10053d3:	c3                   	ret    

010053d4 <fl_fwrite>:
fl_fwrite():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1262
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
 10053d4:	55                   	push   ebp
 10053d5:	57                   	push   edi
 10053d6:	56                   	push   esi
 10053d7:	53                   	push   ebx
 10053d8:	83 ec 1c             	sub    esp,0x1c
 10053db:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1272
    uint8 *buffer = (uint8 *)data;
    uint32 bytesWritten = 0;
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
 10053df:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 10053e6:	75 05                	jne    10053ed <fl_fwrite+0x19>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1272 (discriminator 1)
 10053e8:	e8 4c f6 ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1274

    if (!file)
 10053ed:	85 f6                	test   esi,esi
 10053ef:	0f 84 ef 01 00 00    	je     10055e4 <fl_fwrite+0x210>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1277
        return -1;

    FL_LOCK(&_fs);
 10053f5:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 10053fa:	85 c0                	test   eax,eax
 10053fc:	74 02                	je     1005400 <fl_fwrite+0x2c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1277 (discriminator 1)
 10053fe:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1280

    // No write permissions
    if (!(file->flags & FILE_WRITE))
 1005400:	0f b6 86 30 07 00 00 	movzx  eax,BYTE PTR [esi+0x730]
 1005407:	a8 02                	test   al,0x2
 1005409:	75 24                	jne    100542f <fl_fwrite+0x5b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1282
    {
        FL_UNLOCK(&_fs);
 100540b:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1283
        return -1;
 1005410:	c7 44 24 0c ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
 1005417:	ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1282
    FL_LOCK(&_fs);

    // No write permissions
    if (!(file->flags & FILE_WRITE))
    {
        FL_UNLOCK(&_fs);
 1005418:	85 c0                	test   eax,eax
 100541a:	0f 84 cc 01 00 00    	je     10055ec <fl_fwrite+0x218>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1282 (discriminator 1)
 1005420:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1283 (discriminator 1)
        return -1;
 1005422:	c7 44 24 0c ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
 1005429:	ff 
 100542a:	e9 bd 01 00 00       	jmp    10055ec <fl_fwrite+0x218>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1266
int fl_fwrite(const void * data, int size, int count, void *f )
{
    FL_FILE *file = (FL_FILE *)f;
    uint32 sector;
    uint32 offset;
    uint32 length = (size*count);
 100542f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
 1005433:	0f af 54 24 38       	imul   edx,DWORD PTR [esp+0x38]
 1005438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
 100543c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1287
        FL_UNLOCK(&_fs);
        return -1;
    }

    // Append writes to end of file
    if (file->flags & FILE_APPEND)
 1005440:	a8 04                	test   al,0x4
 1005442:	74 1d                	je     1005461 <fl_fwrite+0x8d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1288
        file->bytenum = file->filelength;
 1005444:	8b 6e 0c             	mov    ebp,DWORD PTR [esi+0xc]
 1005447:	89 6e 08             	mov    DWORD PTR [esi+0x8],ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1292
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
 100544a:	89 e8                	mov    eax,ebp
 100544c:	c1 e8 09             	shr    eax,0x9
 100544f:	89 04 24             	mov    DWORD PTR [esp],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1295

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
 1005452:	81 e5 ff 01 00 00    	and    ebp,0x1ff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1297

    while (bytesWritten < length)
 1005458:	85 d2                	test   edx,edx
 100545a:	75 21                	jne    100547d <fl_fwrite+0xa9>
 100545c:	e9 6f 01 00 00       	jmp    10055d0 <fl_fwrite+0x1fc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1292
    if (file->flags & FILE_APPEND)
        file->bytenum = file->filelength;
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
 1005461:	8b 6e 08             	mov    ebp,DWORD PTR [esi+0x8]
 1005464:	89 e8                	mov    eax,ebp
 1005466:	c1 e8 09             	shr    eax,0x9
 1005469:	89 04 24             	mov    DWORD PTR [esp],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1295

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
 100546c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1297

    while (bytesWritten < length)
 1005472:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
 1005477:	0f 84 48 01 00 00    	je     10055c5 <fl_fwrite+0x1f1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1262
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
 100547d:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1365
                file->file_data_address = sector;
                file->file_data_dirty = 0;
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
 1005482:	8d 86 28 05 00 00    	lea    eax,[esi+0x528]
 1005488:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1300
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
 100548c:	85 ed                	test   ebp,ebp
 100548e:	75 7c                	jne    100550c <fl_fwrite+0x138>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1300 (discriminator 1)
 1005490:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
 1005494:	29 fb                	sub    ebx,edi
 1005496:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
 100549c:	76 6e                	jbe    100550c <fl_fwrite+0x138>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1305
        {
            uint32 sectorsWrote;

            // Buffered sector, flush back to disk
            if (file->file_data_address != 0xFFFFFFFF)
 100549e:	83 be 28 07 00 00 ff 	cmp    DWORD PTR [esi+0x728],0xffffffff
 10054a5:	74 29                	je     10054d0 <fl_fwrite+0xfc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1308
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
 10054a7:	83 be 2c 07 00 00 00 	cmp    DWORD PTR [esi+0x72c],0x0
 10054ae:	74 0c                	je     10054bc <fl_fwrite+0xe8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1309
                    fl_fflush(file);
 10054b0:	83 ec 0c             	sub    esp,0xc
 10054b3:	56                   	push   esi
 10054b4:	e8 41 fa ff ff       	call   1004efa <fl_fflush>
 10054b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1311

                file->file_data_address = 0xFFFFFFFF;
 10054bc:	c7 86 28 07 00 00 ff 	mov    DWORD PTR [esi+0x728],0xffffffff
 10054c3:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1312
                file->file_data_dirty = 0;
 10054c6:	c7 86 2c 07 00 00 00 	mov    DWORD PTR [esi+0x72c],0x0
 10054cd:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1316
            }

            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
 10054d0:	89 f9                	mov    ecx,edi
 10054d2:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
 10054d6:	83 ec 0c             	sub    esp,0xc
 10054d9:	c1 eb 09             	shr    ebx,0x9
 10054dc:	53                   	push   ebx
 10054dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 10054e1:	89 da                	mov    edx,ebx
 10054e3:	89 f0                	mov    eax,esi
 10054e5:	e8 d8 f0 ff ff       	call   10045c2 <_write_sectors>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1317
            copyCount = FAT_SECTOR_SIZE * sectorsWrote;
 10054ea:	89 c2                	mov    edx,eax
 10054ec:	c1 e2 09             	shl    edx,0x9
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1320

            // Increase total read count
            bytesWritten += copyCount;
 10054ef:	01 d7                	add    edi,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1323

            // Increment file pointer
            file->bytenum += copyCount;
 10054f1:	01 56 08             	add    DWORD PTR [esi+0x8],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1326

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
 10054f4:	89 d9                	mov    ecx,ebx
 10054f6:	01 c1                	add    ecx,eax
 10054f8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1329
            offset = 0;

            if (!sectorsWrote)
 10054fc:	83 c4 10             	add    esp,0x10
 10054ff:	85 c0                	test   eax,eax
 1005501:	0f 85 af 00 00 00    	jne    10055b6 <fl_fwrite+0x1e2>
 1005507:	e9 b9 00 00 00       	jmp    10055c5 <fl_fwrite+0x1f1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1335
                break;
        }
        else
        {
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
 100550c:	bb 00 02 00 00       	mov    ebx,0x200
 1005511:	29 eb                	sub    ebx,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1338

            // Only require some of this sector?
            if (copyCount > (length - bytesWritten))
 1005513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1005517:	29 f8                	sub    eax,edi
 1005519:	39 c3                	cmp    ebx,eax
 100551b:	0f 47 d8             	cmova  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1342
                copyCount = (length - bytesWritten);

            // Do we need to read a new sector?
            if (file->file_data_address != sector)
 100551e:	8b 04 24             	mov    eax,DWORD PTR [esp]
 1005521:	39 86 28 07 00 00    	cmp    DWORD PTR [esi+0x728],eax
 1005527:	74 61                	je     100558a <fl_fwrite+0x1b6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1345
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
 1005529:	83 be 2c 07 00 00 00 	cmp    DWORD PTR [esi+0x72c],0x0
 1005530:	74 0c                	je     100553e <fl_fwrite+0x16a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1346
                    fl_fflush(file);
 1005532:	83 ec 0c             	sub    esp,0xc
 1005535:	56                   	push   esi
 1005536:	e8 bf f9 ff ff       	call   1004efa <fl_fflush>
 100553b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1349

                // If we plan to overwrite the whole sector, we don't need to read it first!
                if (copyCount != FAT_SECTOR_SIZE)
 100553e:	81 fb 00 02 00 00    	cmp    ebx,0x200
 1005544:	74 31                	je     1005577 <fl_fwrite+0x1a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1356
                    // NOTE: This does not have succeed; if last sector of file
                    // reached, no valid data will be read in, but write will
                    // allocate some more space for new data.

                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
 1005546:	83 ec 0c             	sub    esp,0xc
 1005549:	6a 01                	push   0x1
 100554b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
 100554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 1005553:	89 f0                	mov    eax,esi
 1005555:	e8 ce f1 ff ff       	call   1004728 <_read_sectors>
 100555a:	83 c4 10             	add    esp,0x10
 100555d:	85 c0                	test   eax,eax
 100555f:	75 16                	jne    1005577 <fl_fwrite+0x1a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1357
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
 1005561:	83 ec 04             	sub    esp,0x4
 1005564:	68 00 02 00 00       	push   0x200
 1005569:	6a 00                	push   0x0
 100556b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 100556f:	e8 4b 39 00 00       	call   1008ebf <memset>
 1005574:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1360
                }

                file->file_data_address = sector;
 1005577:	8b 04 24             	mov    eax,DWORD PTR [esp]
 100557a:	89 86 28 07 00 00    	mov    DWORD PTR [esi+0x728],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1361
                file->file_data_dirty = 0;
 1005580:	c7 86 2c 07 00 00 00 	mov    DWORD PTR [esi+0x72c],0x0
 1005587:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1365
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
 100558a:	83 ec 04             	sub    esp,0x4
 100558d:	53                   	push   ebx
 100558e:	89 f8                	mov    eax,edi
 1005590:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
 1005594:	50                   	push   eax
 1005595:	03 6c 24 14          	add    ebp,DWORD PTR [esp+0x14]
 1005599:	55                   	push   ebp
 100559a:	e8 d1 40 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1368

            // Mark buffer as dirty
            file->file_data_dirty = 1;
 100559f:	c7 86 2c 07 00 00 01 	mov    DWORD PTR [esi+0x72c],0x1
 10055a6:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1371

            // Increase total read count
            bytesWritten += copyCount;
 10055a9:	01 df                	add    edi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1374

            // Increment file pointer
            file->bytenum += copyCount;
 10055ab:	01 5e 08             	add    DWORD PTR [esi+0x8],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1377

            // Move onto next sector and reset copy offset
            sector++;
 10055ae:	83 44 24 10 01       	add    DWORD PTR [esp+0x10],0x1
 10055b3:	83 c4 10             	add    esp,0x10
 10055b6:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1297
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
 10055bb:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
 10055bf:	0f 87 c7 fe ff ff    	ja     100548c <fl_fwrite+0xb8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1383
            offset = 0;
        }
    }

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
 10055c5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
 10055c8:	3b 46 0c             	cmp    eax,DWORD PTR [esi+0xc]
 10055cb:	76 03                	jbe    10055d0 <fl_fwrite+0x1fc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1386
    {
        // Increase file size to new point
        file->filelength = file->bytenum;
 10055cd:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1396
    }

#if FATFS_INC_TIME_DATE_SUPPORT
    // If time & date support is enabled, always force directory entry to be
    // written in-order to update file modify / access time & date.
    file->filelength_changed = 1;
 10055d0:	c7 46 10 01 00 00 00 	mov    DWORD PTR [esi+0x10],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1399
#endif

    FL_UNLOCK(&_fs);
 10055d7:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 10055dc:	85 c0                	test   eax,eax
 10055de:	74 0c                	je     10055ec <fl_fwrite+0x218>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1399 (discriminator 1)
 10055e0:	ff d0                	call   eax
 10055e2:	eb 08                	jmp    10055ec <fl_fwrite+0x218>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1275

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (!file)
        return -1;
 10055e4:	c7 44 24 0c ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
 10055eb:	ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1402
#endif

    FL_UNLOCK(&_fs);

    return (size*count);
}
 10055ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 10055f0:	83 c4 1c             	add    esp,0x1c
 10055f3:	5b                   	pop    ebx
 10055f4:	5e                   	pop    esi
 10055f5:	5f                   	pop    edi
 10055f6:	5d                   	pop    ebp
 10055f7:	c3                   	ret    

010055f8 <fl_fputc>:
fl_fputc():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1246
//-----------------------------------------------------------------------------
// fl_fputc: Write a character to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputc(int c, void *f)
{
 10055f8:	53                   	push   ebx
 10055f9:	83 ec 18             	sub    esp,0x18
 10055fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1247
    uint8 data = (uint8)c;
 1005600:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1250
    int res;

    res = fl_fwrite(&data, 1, 1, f);
 1005604:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 1005608:	6a 01                	push   0x1
 100560a:	6a 01                	push   0x1
 100560c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
 1005610:	50                   	push   eax
 1005611:	e8 be fd ff ff       	call   10053d4 <fl_fwrite>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1254
    if (res == 1)
        return c;
    else
        return res;
 1005616:	83 f8 01             	cmp    eax,0x1
 1005619:	0f 44 c3             	cmove  eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1255
}
 100561c:	83 c4 28             	add    esp,0x28
 100561f:	5b                   	pop    ebx
 1005620:	c3                   	ret    

01005621 <fl_fputs>:
fl_fputs():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1409
//-----------------------------------------------------------------------------
// fl_fputs: Write a character string to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
 1005621:	53                   	push   ebx
 1005622:	83 ec 14             	sub    esp,0x14
 1005625:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1410
    int len = (int)strlen(str);
 1005629:	53                   	push   ebx
 100562a:	e8 cd 46 00 00       	call   1009cfc <strlen>
 100562f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1411
    int res = fl_fwrite(str, 1, len, f);
 1005632:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1005636:	50                   	push   eax
 1005637:	6a 01                	push   0x1
 1005639:	53                   	push   ebx
 100563a:	e8 95 fd ff ff       	call   10053d4 <fl_fwrite>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1417

    if (res == len)
        return len;
    else
        return res;
}
 100563f:	83 c4 18             	add    esp,0x18
 1005642:	5b                   	pop    ebx
 1005643:	c3                   	ret    

01005644 <fl_remove>:
fl_remove():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1424
//-----------------------------------------------------------------------------
// fl_remove: Remove a file from the filesystem
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
 1005644:	53                   	push   ebx
 1005645:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1428
    FL_FILE* file;
    int res = -1;

    FL_LOCK(&_fs);
 1005648:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 100564d:	85 c0                	test   eax,eax
 100564f:	74 02                	je     1005653 <fl_remove+0xf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1428 (discriminator 1)
 1005651:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1431

    // Use read_file as this will check if the file is already open!
    file = fl_fopen((char*)filename, "r");
 1005653:	83 ec 08             	sub    esp,0x8
 1005656:	68 65 cb 05 01       	push   0x105cb65
 100565b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100565f:	e8 dd f4 ff ff       	call   1004b41 <fl_fopen>
 1005664:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1432
    if (file)
 1005666:	83 c4 10             	add    esp,0x10
 1005669:	85 c0                	test   eax,eax
 100566b:	74 47                	je     10056b4 <fl_remove+0x70>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1435
    {
        // Delete allocated space
        if (fatfs_free_cluster_chain(&_fs, file->startcluster))
 100566d:	83 ec 08             	sub    esp,0x8
 1005670:	ff 70 04             	push   DWORD PTR [eax+0x4]
 1005673:	68 60 00 12 00       	push   0x120060
 1005678:	e8 e4 1e 00 00       	call   1007561 <fatfs_free_cluster_chain>
 100567d:	83 c4 10             	add    esp,0x10
 1005680:	85 c0                	test   eax,eax
 1005682:	74 37                	je     10056bb <fl_remove+0x77>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1438
        {
            // Remove directory entries
            if (fatfs_mark_file_deleted(&_fs, file->parentcluster, (char*)file->shortfilename))
 1005684:	83 ec 04             	sub    esp,0x4
 1005687:	8d 83 14 01 00 00    	lea    eax,[ebx+0x114]
 100568d:	50                   	push   eax
 100568e:	ff 33                	push   DWORD PTR [ebx]
 1005690:	68 60 00 12 00       	push   0x120060
 1005695:	e8 56 e8 ff ff       	call   1003ef0 <fatfs_mark_file_deleted>
 100569a:	83 c4 10             	add    esp,0x10
 100569d:	85 c0                	test   eax,eax
 100569f:	74 21                	je     10056c2 <fl_remove+0x7e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1442
            {
                // Close the file handle (this should not write anything to the file
                // as we have not changed the file since opening it!)
                fl_fclose(file);
 10056a1:	83 ec 0c             	sub    esp,0xc
 10056a4:	53                   	push   ebx
 10056a5:	e8 bc f8 ff ff       	call   1004f66 <fl_fclose>
 10056aa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1444

                res = 0;
 10056ad:	bb 00 00 00 00       	mov    ebx,0x0
 10056b2:	eb 13                	jmp    10056c7 <fl_remove+0x83>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1426
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
    FL_FILE* file;
    int res = -1;
 10056b4:	bb ff ff ff ff       	mov    ebx,0xffffffff
 10056b9:	eb 0c                	jmp    10056c7 <fl_remove+0x83>
 10056bb:	bb ff ff ff ff       	mov    ebx,0xffffffff
 10056c0:	eb 05                	jmp    10056c7 <fl_remove+0x83>
 10056c2:	bb ff ff ff ff       	mov    ebx,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1449
                res = 0;
            }
        }
    }

    FL_UNLOCK(&_fs);
 10056c7:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 10056cc:	85 c0                	test   eax,eax
 10056ce:	74 02                	je     10056d2 <fl_remove+0x8e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1449 (discriminator 1)
 10056d0:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1452

    return res;
}
 10056d2:	89 d8                	mov    eax,ebx
 10056d4:	83 c4 08             	add    esp,0x8
 10056d7:	5b                   	pop    ebx
 10056d8:	c3                   	ret    

010056d9 <fl_createdirectory>:
fl_createdirectory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1459
//-----------------------------------------------------------------------------
// fl_createdirectory: Create a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_createdirectory(const char *path)
{
 10056d9:	55                   	push   ebp
 10056da:	57                   	push   edi
 10056db:	56                   	push   esi
 10056dc:	53                   	push   ebx
 10056dd:	83 ec 4c             	sub    esp,0x4c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1463
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
 10056e0:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 10056e7:	75 05                	jne    10056ee <fl_createdirectory+0x15>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1463 (discriminator 1)
 10056e9:	e8 4b f3 ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1465

    FL_LOCK(&_fs);
 10056ee:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 10056f3:	85 c0                	test   eax,eax
 10056f5:	74 02                	je     10056f9 <fl_createdirectory+0x20>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1465 (discriminator 1)
 10056f7:	ff d0                	call   eax
_create_directory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:174
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
    int i;

    // Allocate a new file handle
    file = _allocate_file();
 10056f9:	e8 37 ed ff ff       	call   1004435 <_allocate_file>
 10056fe:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:176
    if (!file)
        return 0;
 1005700:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:175
    int tailNum = 0;
    int i;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
 1005705:	85 c0                	test   eax,eax
 1005707:	0f 84 b2 02 00 00    	je     10059bf <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:179
        return 0;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
 100570d:	8d 70 14             	lea    esi,[eax+0x14]
 1005710:	83 ec 04             	sub    esp,0x4
 1005713:	68 80 00 00 00       	push   0x80
 1005718:	6a 00                	push   0x0
 100571a:	56                   	push   esi
 100571b:	e8 9f 37 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:180
    memset(file->filename, '\0', sizeof(file->filename));
 1005720:	8d 83 94 00 00 00    	lea    eax,[ebx+0x94]
 1005726:	89 c7                	mov    edi,eax
 1005728:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
 100572c:	83 c4 0c             	add    esp,0xc
 100572f:	68 80 00 00 00       	push   0x80
 1005734:	6a 00                	push   0x0
 1005736:	50                   	push   eax
 1005737:	e8 83 37 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:183

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
 100573c:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
 1005743:	57                   	push   edi
 1005744:	68 80 00 00 00       	push   0x80
 1005749:	56                   	push   esi
 100574a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 100574e:	e8 37 15 00 00       	call   1006c8a <fatfs_split_path>
 1005753:	83 c4 20             	add    esp,0x20
 1005756:	83 f8 ff             	cmp    eax,0xffffffff
 1005759:	75 11                	jne    100576c <fl_createdirectory+0x93>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:185
    {
        _free_file(file);
 100575b:	89 d8                	mov    eax,ebx
 100575d:	e8 f0 f0 ff ff       	call   1004852 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:186
        return 0;
 1005762:	bf 00 00 00 00       	mov    edi,0x0
 1005767:	e9 53 02 00 00       	jmp    10059bf <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:190
    }

    // Check if file already open
    if (_check_file_open(file))
 100576c:	89 d8                	mov    eax,ebx
 100576e:	e8 10 ed ff ff       	call   1004483 <_check_file_open>
 1005773:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
 1005777:	85 c0                	test   eax,eax
 1005779:	74 11                	je     100578c <fl_createdirectory+0xb3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:192
    {
        _free_file(file);
 100577b:	89 d8                	mov    eax,ebx
 100577d:	e8 d0 f0 ff ff       	call   1004852 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:193
        return 0;
 1005782:	bf 00 00 00 00       	mov    edi,0x0
 1005787:	e9 33 02 00 00       	jmp    10059bf <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:197
    }

    // If file is in the root dir
    if (file->path[0] == 0)
 100578c:	80 7b 14 00          	cmp    BYTE PTR [ebx+0x14],0x0
 1005790:	75 14                	jne    10057a6 <fl_createdirectory+0xcd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:198
        file->parentcluster = fatfs_get_root_cluster(&_fs);
 1005792:	83 ec 0c             	sub    esp,0xc
 1005795:	68 60 00 12 00       	push   0x120060
 100579a:	e8 fd e2 ff ff       	call   1003a9c <fatfs_get_root_cluster>
 100579f:	89 03                	mov    DWORD PTR [ebx],eax
 10057a1:	83 c4 10             	add    esp,0x10
 10057a4:	eb 1b                	jmp    10057c1 <fl_createdirectory+0xe8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:202
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
 10057a6:	89 da                	mov    edx,ebx
 10057a8:	89 f0                	mov    eax,esi
 10057aa:	e8 58 ed ff ff       	call   1004507 <_open_directory>
 10057af:	89 c7                	mov    edi,eax
 10057b1:	85 c0                	test   eax,eax
 10057b3:	75 0c                	jne    10057c1 <fl_createdirectory+0xe8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:204
        {
            _free_file(file);
 10057b5:	89 d8                	mov    eax,ebx
 10057b7:	e8 96 f0 ff ff       	call   1004852 <_free_file>
 10057bc:	e9 fe 01 00 00       	jmp    10059bf <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:210
            return 0;
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
 10057c1:	8d 44 24 20          	lea    eax,[esp+0x20]
 10057c5:	50                   	push   eax
 10057c6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
 10057ca:	ff 33                	push   DWORD PTR [ebx]
 10057cc:	68 60 00 12 00       	push   0x120060
 10057d1:	e8 ce e2 ff ff       	call   1003aa4 <fatfs_get_file_entry>
 10057d6:	83 c4 10             	add    esp,0x10
 10057d9:	83 f8 01             	cmp    eax,0x1
 10057dc:	75 10                	jne    10057ee <fl_createdirectory+0x115>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:212
    {
        _free_file(file);
 10057de:	89 d8                	mov    eax,ebx
 10057e0:	e8 6d f0 ff ff       	call   1004852 <_free_file>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:213
        return 0;
 10057e5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
 10057e9:	e9 d1 01 00 00       	jmp    10059bf <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:216
    }

    file->startcluster = 0;
 10057ee:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:219

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
 10057f5:	6a 01                	push   0x1
 10057f7:	8d 43 04             	lea    eax,[ebx+0x4]
 10057fa:	50                   	push   eax
 10057fb:	6a 01                	push   0x1
 10057fd:	68 60 00 12 00       	push   0x120060
 1005802:	e8 71 1f 00 00       	call   1007778 <fatfs_allocate_free_space>
 1005807:	89 c7                	mov    edi,eax
 1005809:	83 c4 10             	add    esp,0x10
 100580c:	85 c0                	test   eax,eax
 100580e:	75 0c                	jne    100581c <fl_createdirectory+0x143>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:221
    {
        _free_file(file);
 1005810:	89 d8                	mov    eax,ebx
 1005812:	e8 3b f0 ff ff       	call   1004852 <_free_file>
 1005817:	e9 a3 01 00 00       	jmp    10059bf <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:226
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
 100581c:	8d ab 28 05 00 00    	lea    ebp,[ebx+0x528]
 1005822:	83 ec 04             	sub    esp,0x4
 1005825:	68 00 02 00 00       	push   0x200
 100582a:	6a 00                	push   0x0
 100582c:	55                   	push   ebp
 100582d:	e8 8d 36 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:227
    for (i=0;i<_fs.sectors_per_cluster;i++)
 1005832:	83 c4 10             	add    esp,0x10
 1005835:	80 3d 60 00 12 00 00 	cmp    BYTE PTR ds:0x120060,0x0
 100583c:	74 37                	je     1005875 <fl_createdirectory+0x19c>
 100583e:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:229
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
 1005843:	55                   	push   ebp
 1005844:	56                   	push   esi
 1005845:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 1005848:	68 60 00 12 00       	push   0x120060
 100584d:	e8 27 e1 ff ff       	call   1003979 <fatfs_write_sector>
 1005852:	83 c4 10             	add    esp,0x10
 1005855:	85 c0                	test   eax,eax
 1005857:	75 0e                	jne    1005867 <fl_createdirectory+0x18e>
 1005859:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:231
        {
            _free_file(file);
 100585b:	89 d8                	mov    eax,ebx
 100585d:	e8 f0 ef ff ff       	call   1004852 <_free_file>
 1005862:	e9 58 01 00 00       	jmp    10059bf <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:227
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
    for (i=0;i<_fs.sectors_per_cluster;i++)
 1005867:	83 c6 01             	add    esi,0x1
 100586a:	0f b6 05 60 00 12 00 	movzx  eax,BYTE PTR ds:0x120060
 1005871:	39 c6                	cmp    esi,eax
 1005873:	7c ce                	jl     1005843 <fl_createdirectory+0x16a>
 1005875:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:243
    // Generate a short filename & tail
    tailNum = 0;
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
 100587a:	8d 6c 24 15          	lea    ebp,[esp+0x15]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:247

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
 100587e:	8d bb 14 01 00 00    	lea    edi,[ebx+0x114]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:243
    // Generate a short filename & tail
    tailNum = 0;
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
 1005884:	83 ec 08             	sub    esp,0x8
 1005887:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 100588b:	55                   	push   ebp
 100588c:	e8 07 0f 00 00       	call   1006798 <fatfs_lfn_create_sfn>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:246

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
 1005891:	83 c4 10             	add    esp,0x10
 1005894:	85 f6                	test   esi,esi
 1005896:	74 28                	je     10058c0 <fl_createdirectory+0x1e7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:247
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
 1005898:	83 ec 04             	sub    esp,0x4
 100589b:	56                   	push   esi
 100589c:	55                   	push   ebp
 100589d:	57                   	push   edi
 100589e:	e8 20 10 00 00       	call   10068c3 <fatfs_lfn_generate_tail>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:253
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
 10058a3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
 10058a7:	83 c4 0c             	add    esp,0xc
 10058aa:	57                   	push   edi
 10058ab:	ff 33                	push   DWORD PTR [ebx]
 10058ad:	68 60 00 12 00       	push   0x120060
 10058b2:	e8 0a e4 ff ff       	call   1003cc1 <fatfs_sfn_exists>
 10058b7:	83 c4 10             	add    esp,0x10
 10058ba:	85 c0                	test   eax,eax
 10058bc:	75 37                	jne    10058f5 <fl_createdirectory+0x21c>
 10058be:	eb 2b                	jmp    10058eb <fl_createdirectory+0x212>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:250
        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
 10058c0:	83 ec 04             	sub    esp,0x4
 10058c3:	6a 0b                	push   0xb
 10058c5:	55                   	push   ebp
 10058c6:	57                   	push   edi
 10058c7:	e8 a4 3d 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:253

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
 10058cc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
 10058d0:	83 c4 0c             	add    esp,0xc
 10058d3:	57                   	push   edi
 10058d4:	ff 33                	push   DWORD PTR [ebx]
 10058d6:	68 60 00 12 00       	push   0x120060
 10058db:	e8 e1 e3 ff ff       	call   1003cc1 <fatfs_sfn_exists>
 10058e0:	83 c4 10             	add    esp,0x10
 10058e3:	85 c0                	test   eax,eax
 10058e5:	0f 85 e1 00 00 00    	jne    10059cc <fl_createdirectory+0x2f3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:261
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
 10058eb:	81 fe 0f 27 00 00    	cmp    esi,0x270f
 10058f1:	75 30                	jne    1005923 <fl_createdirectory+0x24a>
 10058f3:	eb 0b                	jmp    1005900 <fl_createdirectory+0x227>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:256

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;

        tailNum++;
 10058f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:258
    }
    while (tailNum < 9999);
 10058f8:	81 fe 0f 27 00 00    	cmp    esi,0x270f
 10058fe:	75 84                	jne    1005884 <fl_createdirectory+0x1ab>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:264

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
 1005900:	83 ec 08             	sub    esp,0x8
 1005903:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 1005906:	68 60 00 12 00       	push   0x120060
 100590b:	e8 51 1c 00 00       	call   1007561 <fatfs_free_cluster_chain>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:266

        _free_file(file);
 1005910:	89 d8                	mov    eax,ebx
 1005912:	e8 3b ef ff ff       	call   1004852 <_free_file>
 1005917:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:267
        return 0;
 100591a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
 100591e:	e9 9c 00 00 00       	jmp    10059bf <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:295
        return 0;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 1))
 1005923:	83 ec 04             	sub    esp,0x4
 1005926:	6a 01                	push   0x1
 1005928:	6a 00                	push   0x0
 100592a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 100592d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005931:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005935:	ff 33                	push   DWORD PTR [ebx]
 1005937:	68 60 00 12 00       	push   0x120060
 100593c:	e8 f2 1e 00 00       	call   1007833 <fatfs_add_file_entry>
 1005941:	89 c7                	mov    edi,eax
 1005943:	83 c4 20             	add    esp,0x20
 1005946:	85 c0                	test   eax,eax
 1005948:	75 1c                	jne    1005966 <fl_createdirectory+0x28d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:298
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
 100594a:	83 ec 08             	sub    esp,0x8
 100594d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 1005950:	68 60 00 12 00       	push   0x120060
 1005955:	e8 07 1c 00 00       	call   1007561 <fatfs_free_cluster_chain>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:300

        _free_file(file);
 100595a:	89 d8                	mov    eax,ebx
 100595c:	e8 f1 ee ff ff       	call   1004852 <_free_file>
 1005961:	83 c4 10             	add    esp,0x10
 1005964:	eb 59                	jmp    10059bf <fl_createdirectory+0x2e6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:305
        return 0;
    }

    // General
    file->filelength = 0;
 1005966:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:306
    file->bytenum = 0;
 100596d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:307
    file->file_data_address = 0xFFFFFFFF;
 1005974:	c7 83 28 07 00 00 ff 	mov    DWORD PTR [ebx+0x728],0xffffffff
 100597b:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:308
    file->file_data_dirty = 0;
 100597e:	c7 83 2c 07 00 00 00 	mov    DWORD PTR [ebx+0x72c],0x0
 1005985:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:309
    file->filelength_changed = 0;
 1005988:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:312

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
 100598f:	c7 83 20 05 00 00 ff 	mov    DWORD PTR [ebx+0x520],0xffffffff
 1005996:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:313
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
 1005999:	c7 83 24 05 00 00 ff 	mov    DWORD PTR [ebx+0x524],0xffffffff
 10059a0:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:315

    fatfs_fat_purge(&_fs);
 10059a3:	83 ec 0c             	sub    esp,0xc
 10059a6:	68 60 00 12 00       	push   0x120060
 10059ab:	e8 67 18 00 00       	call   1007217 <fatfs_fat_purge>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:317

    _free_file(file);
 10059b0:	89 d8                	mov    eax,ebx
 10059b2:	e8 9b ee ff ff       	call   1004852 <_free_file>
 10059b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:318
    return 1;
 10059ba:	bf 01 00 00 00       	mov    edi,0x1
fl_createdirectory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1467
    // If first call to library, initialise
    CHECK_FL_INIT();

    FL_LOCK(&_fs);
    res =_create_directory((char*)path);
    FL_UNLOCK(&_fs);
 10059bf:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 10059c4:	85 c0                	test   eax,eax
 10059c6:	74 0c                	je     10059d4 <fl_createdirectory+0x2fb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1467 (discriminator 1)
 10059c8:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1469 (discriminator 1)

    return res;
 10059ca:	eb 08                	jmp    10059d4 <fl_createdirectory+0x2fb>
_create_directory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:256

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;

        tailNum++;
 10059cc:	83 c6 01             	add    esi,0x1
 10059cf:	e9 b0 fe ff ff       	jmp    1005884 <fl_createdirectory+0x1ab>
fl_createdirectory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1470
    FL_LOCK(&_fs);
    res =_create_directory((char*)path);
    FL_UNLOCK(&_fs);

    return res;
}
 10059d4:	89 f8                	mov    eax,edi
 10059d6:	83 c4 4c             	add    esp,0x4c
 10059d9:	5b                   	pop    ebx
 10059da:	5e                   	pop    esi
 10059db:	5f                   	pop    edi
 10059dc:	5d                   	pop    ebp
 10059dd:	c3                   	ret    

010059de <fl_opendir>:
fl_opendir():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1521
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
 10059de:	56                   	push   esi
 10059df:	53                   	push   ebx
 10059e0:	83 ec 14             	sub    esp,0x14
 10059e3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
 10059e7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1524
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;
 10059eb:	c7 44 24 0c ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
 10059f2:	ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1527

    // If first call to library, initialise
    CHECK_FL_INIT();
 10059f3:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 10059fa:	75 05                	jne    1005a01 <fl_opendir+0x23>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1527 (discriminator 1)
 10059fc:	e8 38 f0 ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1529

    FL_LOCK(&_fs);
 1005a01:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1005a06:	85 c0                	test   eax,eax
 1005a08:	74 02                	je     1005a0c <fl_opendir+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1529 (discriminator 1)
 1005a0a:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1531

    levels = fatfs_total_path_levels((char*)path) + 1;
 1005a0c:	83 ec 0c             	sub    esp,0xc
 1005a0f:	56                   	push   esi
 1005a10:	e8 04 11 00 00       	call   1006b19 <fatfs_total_path_levels>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1534

    // If path is in the root dir
    if (levels == 0)
 1005a15:	83 c4 10             	add    esp,0x10
 1005a18:	83 f8 ff             	cmp    eax,0xffffffff
 1005a1b:	75 16                	jne    1005a33 <fl_opendir+0x55>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1535
        cluster = fatfs_get_root_cluster(&_fs);
 1005a1d:	83 ec 0c             	sub    esp,0xc
 1005a20:	68 60 00 12 00       	push   0x120060
 1005a25:	e8 72 e0 ff ff       	call   1003a9c <fatfs_get_root_cluster>
 1005a2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
 1005a2e:	83 c4 10             	add    esp,0x10
 1005a31:	eb 0f                	jmp    1005a42 <fl_opendir+0x64>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1538
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
 1005a33:	8d 54 24 0c          	lea    edx,[esp+0xc]
 1005a37:	89 f0                	mov    eax,esi
 1005a39:	e8 c9 ea ff ff       	call   1004507 <_open_directory>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1540

    if (res)
 1005a3e:	85 c0                	test   eax,eax
 1005a40:	74 15                	je     1005a57 <fl_opendir+0x79>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1541
        fatfs_list_directory_start(&_fs, dir, cluster);
 1005a42:	83 ec 04             	sub    esp,0x4
 1005a45:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1005a49:	53                   	push   ebx
 1005a4a:	68 60 00 12 00       	push   0x120060
 1005a4f:	e8 85 e5 ff ff       	call   1003fd9 <fatfs_list_directory_start>
 1005a54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1543

    FL_UNLOCK(&_fs);
 1005a57:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005a5c:	85 c0                	test   eax,eax
 1005a5e:	74 02                	je     1005a62 <fl_opendir+0x84>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1543 (discriminator 1)
 1005a60:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1545

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
 1005a62:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
 1005a67:	b8 00 00 00 00       	mov    eax,0x0
 1005a6c:	0f 45 c3             	cmovne eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1546
}
 1005a6f:	83 c4 14             	add    esp,0x14
 1005a72:	5b                   	pop    ebx
 1005a73:	5e                   	pop    esi
 1005a74:	c3                   	ret    

01005a75 <fl_readdir>:
fl_readdir():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1553
//-----------------------------------------------------------------------------
// fl_readdir: Get next item in directory
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
 1005a75:	53                   	push   ebx
 1005a76:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1557
    int res = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1005a79:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1005a80:	75 05                	jne    1005a87 <fl_readdir+0x12>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1557 (discriminator 1)
 1005a82:	e8 b2 ef ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1559

    FL_LOCK(&_fs);
 1005a87:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1005a8c:	85 c0                	test   eax,eax
 1005a8e:	74 02                	je     1005a92 <fl_readdir+0x1d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1559 (discriminator 1)
 1005a90:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1561

    res = fatfs_list_directory_next(&_fs, dirls, entry);
 1005a92:	83 ec 04             	sub    esp,0x4
 1005a95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005a99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005a9d:	68 60 00 12 00       	push   0x120060
 1005aa2:	e8 48 e5 ff ff       	call   1003fef <fatfs_list_directory_next>
 1005aa7:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1563

    FL_UNLOCK(&_fs);
 1005aa9:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005aae:	83 c4 10             	add    esp,0x10
 1005ab1:	85 c0                	test   eax,eax
 1005ab3:	74 02                	je     1005ab7 <fl_readdir+0x42>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1563 (discriminator 1)
 1005ab5:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1565

    return res ? 0 : -1;
 1005ab7:	85 db                	test   ebx,ebx
 1005ab9:	0f 94 c0             	sete   al
 1005abc:	0f b6 c0             	movzx  eax,al
 1005abf:	f7 d8                	neg    eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1566
}
 1005ac1:	83 c4 08             	add    esp,0x8
 1005ac4:	5b                   	pop    ebx
 1005ac5:	c3                   	ret    

01005ac6 <fl_listdirectory>:
fl_listdirectory():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1477
//-----------------------------------------------------------------------------
// fl_listdirectory: List a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fl_listdirectory(const char *path)
{
 1005ac6:	56                   	push   esi
 1005ac7:	53                   	push   ebx
 1005ac8:	81 ec c4 00 00 00    	sub    esp,0xc4
 1005ace:	8b 9c 24 d0 00 00 00 	mov    ebx,DWORD PTR [esp+0xd0]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1481
    FL_DIR dirstat;

    // If first call to library, initialise
    CHECK_FL_INIT();
 1005ad5:	83 3d cc 04 12 00 00 	cmp    DWORD PTR ds:0x1204cc,0x0
 1005adc:	75 05                	jne    1005ae3 <fl_listdirectory+0x1d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1481 (discriminator 1)
 1005ade:	e8 56 ef ff ff       	call   1004a39 <fl_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1483

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
 1005ae3:	83 ec 08             	sub    esp,0x8
 1005ae6:	53                   	push   ebx
 1005ae7:	68 d4 63 06 01       	push   0x10663d4
 1005aec:	e8 ee 40 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1484
        FL_LOCK(&_fs);
 1005af1:	a1 9c 00 12 00       	mov    eax,ds:0x12009c
 1005af6:	83 c4 10             	add    esp,0x10
 1005af9:	85 c0                	test   eax,eax
 1005afb:	74 02                	je     1005aff <fl_listdirectory+0x39>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1484 (discriminator 1)
 1005afd:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1487


        if (fl_opendir(path, &dirstat))
 1005aff:	83 ec 08             	sub    esp,0x8
 1005b02:	8d 84 24 bc 00 00 00 	lea    eax,[esp+0xbc]
 1005b09:	50                   	push   eax
 1005b0a:	53                   	push   ebx
 1005b0b:	e8 ce fe ff ff       	call   10059de <fl_opendir>
 1005b10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1491
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
 1005b13:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
 1005b17:	8d b4 24 b4 00 00 00 	lea    esi,[esp+0xb4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1487

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
        FL_LOCK(&_fs);


        if (fl_opendir(path, &dirstat))
 1005b1e:	85 c0                	test   eax,eax
 1005b20:	0f 85 98 00 00 00    	jne    1005bbe <fl_listdirectory+0xf8>
 1005b26:	e9 a8 00 00 00       	jmp    1005bd3 <fl_listdirectory+0x10d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1495

        while (fl_readdir(&dirstat, &dirent) == 0)
        {
#if FATFS_INC_TIME_DATE_SUPPORT
            int d,m,y,h,mn,s;
            fatfs_convert_from_fat_time(dirent.write_time, &h,&m,&s);
 1005b2b:	8d 44 24 18          	lea    eax,[esp+0x18]
 1005b2f:	50                   	push   eax
 1005b30:	8d 44 24 0c          	lea    eax,[esp+0xc]
 1005b34:	50                   	push   eax
 1005b35:	8d 44 24 18          	lea    eax,[esp+0x18]
 1005b39:	50                   	push   eax
 1005b3a:	0f b7 84 24 b6 00 00 	movzx  eax,WORD PTR [esp+0xb6]
 1005b41:	00 
 1005b42:	50                   	push   eax
 1005b43:	e8 75 0e 00 00       	call   10069bd <fatfs_convert_from_fat_time>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1496
            fatfs_convert_from_fat_date(dirent.write_date, &d,&mn,&y);
 1005b48:	8d 44 24 1c          	lea    eax,[esp+0x1c]
 1005b4c:	50                   	push   eax
 1005b4d:	8d 44 24 28          	lea    eax,[esp+0x28]
 1005b51:	50                   	push   eax
 1005b52:	8d 44 24 1c          	lea    eax,[esp+0x1c]
 1005b56:	50                   	push   eax
 1005b57:	0f b7 84 24 c8 00 00 	movzx  eax,WORD PTR [esp+0xc8]
 1005b5e:	00 
 1005b5f:	50                   	push   eax
 1005b60:	e8 86 0e 00 00       	call   10069eb <fatfs_convert_from_fat_date>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1497
            FAT_PRINTF(("%02d/%02d/%04d  %02d:%02d      ", mn,d,y,h,m));
 1005b65:	83 c4 18             	add    esp,0x18
 1005b68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1005b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1005b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1005b74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005b78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1005b7c:	68 70 0c 04 01       	push   0x1040c70
 1005b81:	e8 59 40 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1500
#endif

            if (dirent.is_dir)
 1005b86:	83 c4 20             	add    esp,0x20
 1005b89:	80 bc 24 9c 00 00 00 	cmp    BYTE PTR [esp+0x9c],0x0
 1005b90:	00 
 1005b91:	74 13                	je     1005ba6 <fl_listdirectory+0xe0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1502
            {
                FAT_PRINTF(("%s <DIR>\r\n", dirent.filename));
 1005b93:	83 ec 08             	sub    esp,0x8
 1005b96:	53                   	push   ebx
 1005b97:	68 e5 63 06 01       	push   0x10663e5
 1005b9c:	e8 3e 40 00 00       	call   1009bdf <printk>
 1005ba1:	83 c4 10             	add    esp,0x10
 1005ba4:	eb 18                	jmp    1005bbe <fl_listdirectory+0xf8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1506
            }
            else
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
 1005ba6:	83 ec 04             	sub    esp,0x4
 1005ba9:	ff b4 24 a8 00 00 00 	push   DWORD PTR [esp+0xa8]
 1005bb0:	53                   	push   ebx
 1005bb1:	68 f0 63 06 01       	push   0x10663f0
 1005bb6:	e8 24 40 00 00       	call   1009bdf <printk>
 1005bbb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1491

        if (fl_opendir(path, &dirstat))
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
 1005bbe:	83 ec 08             	sub    esp,0x8
 1005bc1:	53                   	push   ebx
 1005bc2:	56                   	push   esi
 1005bc3:	e8 ad fe ff ff       	call   1005a75 <fl_readdir>
 1005bc8:	83 c4 10             	add    esp,0x10
 1005bcb:	85 c0                	test   eax,eax
 1005bcd:	0f 84 58 ff ff ff    	je     1005b2b <fl_listdirectory+0x65>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1513
        }

        fl_closedir(&dirstat);
    }

    FL_UNLOCK(&_fs);
 1005bd3:	a1 a0 00 12 00       	mov    eax,ds:0x1200a0
 1005bd8:	85 c0                	test   eax,eax
 1005bda:	74 02                	je     1005bde <fl_listdirectory+0x118>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1513 (discriminator 1)
 1005bdc:	ff d0                	call   eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1514
}
 1005bde:	81 c4 c4 00 00 00    	add    esp,0xc4
 1005be4:	5b                   	pop    ebx
 1005be5:	5e                   	pop    esi
 1005be6:	c3                   	ret    

01005be7 <fl_closedir>:
fl_closedir():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1576
#if FATFS_DIR_LIST_SUPPORT
int fl_closedir(FL_DIR* dir)
{
    // Not used
    return 0;
}
 1005be7:	b8 00 00 00 00       	mov    eax,0x0
 1005bec:	c3                   	ret    

01005bed <fl_is_dir>:
fl_is_dir():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1583
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
 1005bed:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1587
    int res = 0;
    FL_DIR dir;

    if (fl_opendir(path, &dir))
 1005bf0:	8d 44 24 0c          	lea    eax,[esp+0xc]
 1005bf4:	50                   	push   eax
 1005bf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 1005bf9:	e8 e0 fd ff ff       	call   10059de <fl_opendir>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1593
    {
        res = 1;
        fl_closedir(&dir);
    }

    return res;
 1005bfe:	85 c0                	test   eax,eax
 1005c00:	0f 95 c0             	setne  al
 1005c03:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1594
}
 1005c06:	83 c4 2c             	add    esp,0x2c
 1005c09:	c3                   	ret    

01005c0a <fl_format>:
fl_format():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1601
//-----------------------------------------------------------------------------
// fl_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
#if FATFS_INC_FORMAT_SUPPORT
int fl_format(uint32 volume_sectors, const char *name)
{
 1005c0a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1602
    return fatfs_format(&_fs, volume_sectors, name);
 1005c0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005c11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1005c15:	68 60 00 12 00       	push   0x120060
 1005c1a:	e8 72 07 00 00       	call   1006391 <fatfs_format>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_filelib.c:1603
}
 1005c1f:	83 c4 1c             	add    esp,0x1c
 1005c22:	c3                   	ret    
 1005c23:	90                   	nop

01005c24 <fatfs_erase_fat>:
fatfs_erase_fat():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:393
}
//-----------------------------------------------------------------------------
// fatfs_erase_fat: Erase FAT table using fs details in fs struct
//-----------------------------------------------------------------------------
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
 1005c24:	57                   	push   edi
 1005c25:	56                   	push   esi
 1005c26:	53                   	push   ebx
 1005c27:	89 c3                	mov    ebx,eax
 1005c29:	89 d6                	mov    esi,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:397
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 1005c2b:	8d 78 44             	lea    edi,[eax+0x44]
 1005c2e:	83 ec 04             	sub    esp,0x4
 1005c31:	68 00 02 00 00       	push   0x200
 1005c36:	6a 00                	push   0x0
 1005c38:	57                   	push   edi
 1005c39:	e8 81 32 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:400

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
 1005c3e:	83 c4 10             	add    esp,0x10
 1005c41:	85 f6                	test   esi,esi
 1005c43:	75 12                	jne    1005c57 <fatfs_erase_fat+0x33>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:402
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
 1005c45:	c6 43 44 f8          	mov    BYTE PTR [ebx+0x44],0xf8
 1005c49:	c6 43 45 ff          	mov    BYTE PTR [ebx+0x45],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:403
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
 1005c4d:	c6 43 46 ff          	mov    BYTE PTR [ebx+0x46],0xff
 1005c51:	c6 43 47 ff          	mov    BYTE PTR [ebx+0x47],0xff
 1005c55:	eb 30                	jmp    1005c87 <fatfs_erase_fat+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:407
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
 1005c57:	c6 43 44 f8          	mov    BYTE PTR [ebx+0x44],0xf8
 1005c5b:	c6 43 45 ff          	mov    BYTE PTR [ebx+0x45],0xff
 1005c5f:	c6 43 46 ff          	mov    BYTE PTR [ebx+0x46],0xff
 1005c63:	c6 43 47 0f          	mov    BYTE PTR [ebx+0x47],0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:408
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
 1005c67:	c6 43 48 ff          	mov    BYTE PTR [ebx+0x48],0xff
 1005c6b:	c6 43 49 ff          	mov    BYTE PTR [ebx+0x49],0xff
 1005c6f:	c6 43 4a ff          	mov    BYTE PTR [ebx+0x4a],0xff
 1005c73:	c6 43 4b ff          	mov    BYTE PTR [ebx+0x4b],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:409
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
 1005c77:	c6 43 4c ff          	mov    BYTE PTR [ebx+0x4c],0xff
 1005c7b:	c6 43 4d ff          	mov    BYTE PTR [ebx+0x4d],0xff
 1005c7f:	c6 43 4e ff          	mov    BYTE PTR [ebx+0x4e],0xff
 1005c83:	c6 43 4f 0f          	mov    BYTE PTR [ebx+0x4f],0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:412
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
 1005c87:	83 ec 04             	sub    esp,0x4
 1005c8a:	6a 01                	push   0x1
 1005c8c:	57                   	push   edi
 1005c8d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
 1005c90:	ff 53 38             	call   DWORD PTR [ebx+0x38]
 1005c93:	83 c4 10             	add    esp,0x10
 1005c96:	85 c0                	test   eax,eax
 1005c98:	74 56                	je     1005cf0 <fatfs_erase_fat+0xcc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:416
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 1005c9a:	83 ec 04             	sub    esp,0x4
 1005c9d:	68 00 02 00 00       	push   0x200
 1005ca2:	6a 00                	push   0x0
 1005ca4:	57                   	push   edi
 1005ca5:	e8 15 32 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:417
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
 1005caa:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
 1005cae:	0f af 43 20          	imul   eax,DWORD PTR [ebx+0x20]
 1005cb2:	83 c4 10             	add    esp,0x10
 1005cb5:	83 f8 01             	cmp    eax,0x1
 1005cb8:	76 31                	jbe    1005ceb <fatfs_erase_fat+0xc7>
 1005cba:	be 01 00 00 00       	mov    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:418
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
 1005cbf:	83 ec 04             	sub    esp,0x4
 1005cc2:	6a 01                	push   0x1
 1005cc4:	57                   	push   edi
 1005cc5:	89 f0                	mov    eax,esi
 1005cc7:	03 43 14             	add    eax,DWORD PTR [ebx+0x14]
 1005cca:	50                   	push   eax
 1005ccb:	ff 53 38             	call   DWORD PTR [ebx+0x38]
 1005cce:	83 c4 10             	add    esp,0x10
 1005cd1:	85 c0                	test   eax,eax
 1005cd3:	74 1b                	je     1005cf0 <fatfs_erase_fat+0xcc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:417 (discriminator 2)
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
 1005cd5:	83 c6 01             	add    esi,0x1
 1005cd8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
 1005cdc:	0f af 43 20          	imul   eax,DWORD PTR [ebx+0x20]
 1005ce0:	39 f0                	cmp    eax,esi
 1005ce2:	77 db                	ja     1005cbf <fatfs_erase_fat+0x9b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:421
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
 1005ce4:	b8 01 00 00 00       	mov    eax,0x1
 1005ce9:	eb 05                	jmp    1005cf0 <fatfs_erase_fat+0xcc>
 1005ceb:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:422
}
 1005cf0:	5b                   	pop    ebx
 1005cf1:	5e                   	pop    esi
 1005cf2:	5f                   	pop    edi
 1005cf3:	c3                   	ret    

01005cf4 <fatfs_erase_sectors>:
fatfs_erase_sectors():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:100
}
//-----------------------------------------------------------------------------
// fatfs_erase_sectors: Erase a number of sectors
//-----------------------------------------------------------------------------
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
 1005cf4:	55                   	push   ebp
 1005cf5:	57                   	push   edi
 1005cf6:	56                   	push   esi
 1005cf7:	53                   	push   ebx
 1005cf8:	83 ec 10             	sub    esp,0x10
 1005cfb:	89 c5                	mov    ebp,eax
 1005cfd:	89 d3                	mov    ebx,edx
 1005cff:	89 ce                	mov    esi,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:104
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 1005d01:	8d 78 44             	lea    edi,[eax+0x44]
 1005d04:	68 00 02 00 00       	push   0x200
 1005d09:	6a 00                	push   0x0
 1005d0b:	57                   	push   edi
 1005d0c:	e8 ae 31 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:106

    for (i=0;i<count;i++)
 1005d11:	83 c4 10             	add    esp,0x10
 1005d14:	85 f6                	test   esi,esi
 1005d16:	7e 21                	jle    1005d39 <fatfs_erase_sectors+0x45>
 1005d18:	01 de                	add    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:107
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
 1005d1a:	83 ec 04             	sub    esp,0x4
 1005d1d:	6a 01                	push   0x1
 1005d1f:	57                   	push   edi
 1005d20:	53                   	push   ebx
 1005d21:	ff 55 38             	call   DWORD PTR [ebp+0x38]
 1005d24:	83 c4 10             	add    esp,0x10
 1005d27:	85 c0                	test   eax,eax
 1005d29:	74 13                	je     1005d3e <fatfs_erase_sectors+0x4a>
 1005d2b:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:106 (discriminator 2)
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
 1005d2e:	39 f3                	cmp    ebx,esi
 1005d30:	75 e8                	jne    1005d1a <fatfs_erase_sectors+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:110
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
 1005d32:	b8 01 00 00 00       	mov    eax,0x1
 1005d37:	eb 05                	jmp    1005d3e <fatfs_erase_sectors+0x4a>
 1005d39:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:111
}
 1005d3e:	83 c4 0c             	add    esp,0xc
 1005d41:	5b                   	pop    ebx
 1005d42:	5e                   	pop    esi
 1005d43:	5f                   	pop    edi
 1005d44:	5d                   	pop    ebp
 1005d45:	c3                   	ret    

01005d46 <fatfs_format_fat16>:
fatfs_format_fat16():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:427
}
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
 1005d46:	55                   	push   ebp
 1005d47:	57                   	push   edi
 1005d48:	56                   	push   esi
 1005d49:	53                   	push   ebx
 1005d4a:	83 ec 18             	sub    esp,0x18
 1005d4d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
 1005d51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
 1005d55:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:428
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
 1005d59:	c7 83 44 02 00 00 ff 	mov    DWORD PTR [ebx+0x244],0xffffffff
 1005d60:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:429
    fs->currentsector.dirty = 0;
 1005d63:	c7 83 48 02 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
 1005d6a:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:431

    fs->next_free_cluster = 0; // Invalid
 1005d6d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:433

    fatfs_fat_init(fs);
 1005d74:	53                   	push   ebx
 1005d75:	e8 41 14 00 00       	call   10071bb <fatfs_fat_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:436

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
 1005d7a:	83 c4 10             	add    esp,0x10
 1005d7d:	83 7b 34 00          	cmp    DWORD PTR [ebx+0x34],0x0
 1005d81:	0f 84 7b 01 00 00    	je     1005f02 <fatfs_format_fat16+0x1bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:436 (discriminator 1)
 1005d87:	83 7b 38 00          	cmp    DWORD PTR [ebx+0x38],0x0
 1005d8b:	0f 84 7b 01 00 00    	je     1005f0c <fatfs_format_fat16+0x1c6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:440
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Volume is FAT16
    fs->fat_type = FAT_TYPE_16;
 1005d91:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:443

    // Not valid for FAT16
    fs->fs_info_sector = 0;
 1005d98:	66 c7 43 18 00 00    	mov    WORD PTR [ebx+0x18],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:444
    fs->rootdir_first_cluster = 0;
 1005d9e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:448

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
 1005da5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:121
{
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 1005dac:	8d 6b 44             	lea    ebp,[ebx+0x44]
 1005daf:	83 ec 04             	sub    esp,0x4
 1005db2:	68 00 02 00 00       	push   0x200
 1005db7:	6a 00                	push   0x0
 1005db9:	55                   	push   ebp
 1005dba:	e8 00 31 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:124

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
 1005dbf:	c6 43 44 eb          	mov    BYTE PTR [ebx+0x44],0xeb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:125
    fs->currentsector.sector[1] = 0x3C;
 1005dc3:	c6 43 45 3c          	mov    BYTE PTR [ebx+0x45],0x3c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:126
    fs->currentsector.sector[2] = 0x90;
 1005dc7:	c6 43 46 90          	mov    BYTE PTR [ebx+0x46],0x90
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:127
    fs->currentsector.sector[3] = 0x4D;
 1005dcb:	c6 43 47 4d          	mov    BYTE PTR [ebx+0x47],0x4d
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:128
    fs->currentsector.sector[4] = 0x53;
 1005dcf:	c6 43 48 53          	mov    BYTE PTR [ebx+0x48],0x53
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:129
    fs->currentsector.sector[5] = 0x44;
 1005dd3:	c6 43 49 44          	mov    BYTE PTR [ebx+0x49],0x44
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:130
    fs->currentsector.sector[6] = 0x4F;
 1005dd7:	c6 43 4a 4f          	mov    BYTE PTR [ebx+0x4a],0x4f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:131
    fs->currentsector.sector[7] = 0x53;
 1005ddb:	c6 43 4b 53          	mov    BYTE PTR [ebx+0x4b],0x53
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:132
    fs->currentsector.sector[8] = 0x35;
 1005ddf:	c6 43 4c 35          	mov    BYTE PTR [ebx+0x4c],0x35
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:133
    fs->currentsector.sector[9] = 0x2E;
 1005de3:	c6 43 4d 2e          	mov    BYTE PTR [ebx+0x4d],0x2e
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:134
    fs->currentsector.sector[10] = 0x30;
 1005de7:	c6 43 4e 30          	mov    BYTE PTR [ebx+0x4e],0x30
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:137

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
 1005deb:	c6 43 4f 00          	mov    BYTE PTR [ebx+0x4f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:138
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
 1005def:	c6 43 50 02          	mov    BYTE PTR [ebx+0x50],0x2
fatfs_calc_cluster_size():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:83
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
 1005df3:	0f b6 15 a4 d5 00 01 	movzx  edx,BYTE PTR ds:0x100d5a4
 1005dfa:	83 c4 10             	add    esp,0x10
 1005dfd:	84 d2                	test   dl,dl
 1005dff:	0f 84 11 01 00 00    	je     1005f16 <fatfs_format_fat16+0x1d0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:84
            if (sectors <= _cluster_size_table16[i].sectors)
 1005e05:	3b 35 a0 d5 00 01    	cmp    esi,DWORD PTR ds:0x100d5a0
 1005e0b:	0f 86 12 01 00 00    	jbe    1005f23 <fatfs_format_fat16+0x1dd>
 1005e11:	b8 ac d5 00 01       	mov    eax,0x100d5ac
 1005e16:	eb 0c                	jmp    1005e24 <fatfs_format_fat16+0xde>
 1005e18:	83 c0 08             	add    eax,0x8
 1005e1b:	3b 70 f4             	cmp    esi,DWORD PTR [eax-0xc]
 1005e1e:	0f 86 ff 00 00 00    	jbe    1005f23 <fatfs_format_fat16+0x1dd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:83
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
 1005e24:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1005e27:	84 d2                	test   dl,dl
 1005e29:	75 ed                	jne    1005e18 <fatfs_format_fat16+0xd2>
 1005e2b:	e9 e6 00 00 00       	jmp    1005f16 <fatfs_format_fat16+0x1d0>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:229
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
 1005e30:	83 ec 0c             	sub    esp,0xc
 1005e33:	57                   	push   edi
 1005e34:	e8 c3 3e 00 00       	call   1009cfc <strlen>
 1005e39:	83 c4 10             	add    esp,0x10
 1005e3c:	39 f0                	cmp    eax,esi
 1005e3e:	7e 0a                	jle    1005e4a <fatfs_format_fat16+0x104>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:230
                fs->currentsector.sector[i+43] = name[i];
 1005e40:	0f b6 04 37          	movzx  eax,BYTE PTR [edi+esi*1]
 1005e44:	88 44 33 6f          	mov    BYTE PTR [ebx+esi*1+0x6f],al
 1005e48:	eb 05                	jmp    1005e4f <fatfs_format_fat16+0x109>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:232
            else
                fs->currentsector.sector[i+43] = ' ';
 1005e4a:	c6 44 33 6f 20       	mov    BYTE PTR [ebx+esi*1+0x6f],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:227
        fs->currentsector.sector[40] = 0x34;
        fs->currentsector.sector[41] = 0x56;
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
 1005e4f:	83 c6 01             	add    esi,0x1
 1005e52:	83 fe 0b             	cmp    esi,0xb
 1005e55:	75 d9                	jne    1005e30 <fatfs_format_fat16+0xea>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:236
            else
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
 1005e57:	c6 43 7a 46          	mov    BYTE PTR [ebx+0x7a],0x46
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:237
        fs->currentsector.sector[55] = 'A';
 1005e5b:	c6 43 7b 41          	mov    BYTE PTR [ebx+0x7b],0x41
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:238
        fs->currentsector.sector[56] = 'T';
 1005e5f:	c6 43 7c 54          	mov    BYTE PTR [ebx+0x7c],0x54
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:239
        fs->currentsector.sector[57] = '1';
 1005e63:	c6 43 7d 31          	mov    BYTE PTR [ebx+0x7d],0x31
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:240
        fs->currentsector.sector[58] = '6';
 1005e67:	c6 43 7e 36          	mov    BYTE PTR [ebx+0x7e],0x36
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:241
        fs->currentsector.sector[59] = ' ';
 1005e6b:	c6 43 7f 20          	mov    BYTE PTR [ebx+0x7f],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:242
        fs->currentsector.sector[60] = ' ';
 1005e6f:	c6 83 80 00 00 00 20 	mov    BYTE PTR [ebx+0x80],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:243
        fs->currentsector.sector[61] = ' ';
 1005e76:	c6 83 81 00 00 00 20 	mov    BYTE PTR [ebx+0x81],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:246

        // Signature
        fs->currentsector.sector[510] = 0x55;
 1005e7d:	c6 83 42 02 00 00 55 	mov    BYTE PTR [ebx+0x242],0x55
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:247
        fs->currentsector.sector[511] = 0xAA;
 1005e84:	c6 83 43 02 00 00 aa 	mov    BYTE PTR [ebx+0x243],0xaa
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:343
        // Signature
        fs->currentsector.sector[510] = 0x55;
        fs->currentsector.sector[511] = 0xAA;
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
 1005e8b:	83 ec 04             	sub    esp,0x4
 1005e8e:	6a 01                	push   0x1
 1005e90:	55                   	push   ebp
 1005e91:	6a 00                	push   0x0
 1005e93:	ff 53 38             	call   DWORD PTR [ebx+0x38]
fatfs_format_fat16():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:449
    fs->rootdir_first_cluster = 0;

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
 1005e96:	83 c4 10             	add    esp,0x10
 1005e99:	85 c0                	test   eax,eax
 1005e9b:	0f 84 3b 01 00 00    	je     1005fdc <fatfs_format_fat16+0x296>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:453
        return 0;

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
 1005ea1:	0f b7 43 2a          	movzx  eax,WORD PTR [ebx+0x2a]
 1005ea5:	0f b6 53 2c          	movzx  edx,BYTE PTR [ebx+0x2c]
 1005ea9:	0f af 53 20          	imul   edx,DWORD PTR [ebx+0x20]
 1005ead:	8d 0c 10             	lea    ecx,[eax+edx*1]
 1005eb0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:454
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
 1005eb3:	0f b7 4b 28          	movzx  ecx,WORD PTR [ebx+0x28]
 1005eb7:	c1 e1 05             	shl    ecx,0x5
 1005eba:	8d 89 ff 01 00 00    	lea    ecx,[ecx+0x1ff]
 1005ec0:	c1 f9 09             	sar    ecx,0x9
 1005ec3:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:457

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
 1005ec6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
 1005ec9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:460

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
 1005ecc:	01 d0                	add    eax,edx
 1005ece:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:463

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
 1005ed1:	ba 00 00 00 00       	mov    edx,0x0
 1005ed6:	89 d8                	mov    eax,ebx
 1005ed8:	e8 47 fd ff ff       	call   1005c24 <fatfs_erase_fat>
 1005edd:	85 c0                	test   eax,eax
 1005edf:	0f 84 f7 00 00 00    	je     1005fdc <fatfs_format_fat16+0x296>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:467
        return 0;

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
 1005ee5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
 1005ee8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
 1005eeb:	03 53 1c             	add    edx,DWORD PTR [ebx+0x1c]
 1005eee:	89 d8                	mov    eax,ebx
 1005ef0:	e8 ff fd ff ff       	call   1005cf4 <fatfs_erase_sectors>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:437

    fatfs_fat_init(fs);

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;
 1005ef5:	85 c0                	test   eax,eax
 1005ef7:	0f 95 c0             	setne  al
 1005efa:	0f b6 c0             	movzx  eax,al
 1005efd:	e9 da 00 00 00       	jmp    1005fdc <fatfs_format_fat16+0x296>
 1005f02:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1005f07:	e9 d0 00 00 00       	jmp    1005fdc <fatfs_format_fat16+0x296>
 1005f0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1005f11:	e9 c6 00 00 00       	jmp    1005fdc <fatfs_format_fat16+0x296>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:141
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
 1005f16:	c6 03 00             	mov    BYTE PTR [ebx],0x0
fatfs_format_fat16():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:450

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
        return 0;
 1005f19:	b8 00 00 00 00       	mov    eax,0x0
 1005f1e:	e9 b9 00 00 00       	jmp    1005fdc <fatfs_format_fat16+0x296>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:141
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
 1005f23:	88 13                	mov    BYTE PTR [ebx],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:146
    if (!fs->sectors_per_cluster)
        return 0; // Invalid disk size

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
 1005f25:	88 53 51             	mov    BYTE PTR [ebx+0x51],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:150

    // Reserved Sectors
    if (!is_fat32)
        fs->reserved_sectors = 8;
 1005f28:	66 c7 43 2a 08 00    	mov    WORD PTR [ebx+0x2a],0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:153
    else
        fs->reserved_sectors = 32;
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
 1005f2e:	c6 43 52 08          	mov    BYTE PTR [ebx+0x52],0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:154
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
 1005f32:	c6 43 53 00          	mov    BYTE PTR [ebx+0x53],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:157

    // Number of FATS
    fs->num_of_fats = 2;
 1005f36:	c6 43 2c 02          	mov    BYTE PTR [ebx+0x2c],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:158
    fs->currentsector.sector[16] = fs->num_of_fats;
 1005f3a:	c6 43 54 02          	mov    BYTE PTR [ebx+0x54],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:163

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
    {
        fs->root_entry_count = 512;
 1005f3e:	66 c7 43 28 00 02    	mov    WORD PTR [ebx+0x28],0x200
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:164
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
 1005f44:	c6 43 55 00          	mov    BYTE PTR [ebx+0x55],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:165
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
 1005f48:	c6 43 56 02          	mov    BYTE PTR [ebx+0x56],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:175
        fs->currentsector.sector[17] = 0;
        fs->currentsector.sector[18] = 0;
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
 1005f4c:	c6 43 57 00          	mov    BYTE PTR [ebx+0x57],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:176
    fs->currentsector.sector[20] = 0x00;
 1005f50:	c6 43 58 00          	mov    BYTE PTR [ebx+0x58],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:179

    // Media type
    fs->currentsector.sector[21] = 0xF8;
 1005f54:	c6 43 59 f8          	mov    BYTE PTR [ebx+0x59],0xf8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:187
    // FAT16 BS Details
    if (!is_fat32)
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
 1005f58:	0f b6 ca             	movzx  ecx,dl
 1005f5b:	89 f0                	mov    eax,esi
 1005f5d:	ba 00 00 00 00       	mov    edx,0x0
 1005f62:	f7 f1                	div    ecx
 1005f64:	83 c0 01             	add    eax,0x1
 1005f67:	c1 e8 08             	shr    eax,0x8
 1005f6a:	83 c0 01             	add    eax,0x1
 1005f6d:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:188
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
 1005f70:	88 43 5a             	mov    BYTE PTR [ebx+0x5a],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:189
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);
 1005f73:	c1 e8 08             	shr    eax,0x8
 1005f76:	88 43 5b             	mov    BYTE PTR [ebx+0x5b],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:192

        // Sectors per track
        fs->currentsector.sector[24] = 0x00;
 1005f79:	c6 43 5c 00          	mov    BYTE PTR [ebx+0x5c],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:193
        fs->currentsector.sector[25] = 0x00;
 1005f7d:	c6 43 5d 00          	mov    BYTE PTR [ebx+0x5d],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:196

        // Heads
        fs->currentsector.sector[26] = 0x00;
 1005f81:	c6 43 5e 00          	mov    BYTE PTR [ebx+0x5e],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:197
        fs->currentsector.sector[27] = 0x00;
 1005f85:	c6 43 5f 00          	mov    BYTE PTR [ebx+0x5f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:200

        // Hidden sectors
        fs->currentsector.sector[28] = 0x20;
 1005f89:	c6 43 60 20          	mov    BYTE PTR [ebx+0x60],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:201
        fs->currentsector.sector[29] = 0x00;
 1005f8d:	c6 43 61 00          	mov    BYTE PTR [ebx+0x61],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:202
        fs->currentsector.sector[30] = 0x00;
 1005f91:	c6 43 62 00          	mov    BYTE PTR [ebx+0x62],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:203
        fs->currentsector.sector[31] = 0x00;
 1005f95:	c6 43 63 00          	mov    BYTE PTR [ebx+0x63],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:206

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
 1005f99:	89 f0                	mov    eax,esi
 1005f9b:	88 43 64             	mov    BYTE PTR [ebx+0x64],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:207
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
 1005f9e:	89 f0                	mov    eax,esi
 1005fa0:	c1 e8 08             	shr    eax,0x8
 1005fa3:	88 43 65             	mov    BYTE PTR [ebx+0x65],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:208
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
 1005fa6:	89 f0                	mov    eax,esi
 1005fa8:	c1 e8 10             	shr    eax,0x10
 1005fab:	88 43 66             	mov    BYTE PTR [ebx+0x66],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:209
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
 1005fae:	89 f0                	mov    eax,esi
 1005fb0:	c1 e8 18             	shr    eax,0x18
 1005fb3:	88 43 67             	mov    BYTE PTR [ebx+0x67],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:212

        // Drive number
        fs->currentsector.sector[36] = 0x00;
 1005fb6:	c6 43 68 00          	mov    BYTE PTR [ebx+0x68],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:215

        // Reserved
        fs->currentsector.sector[37] = 0x00;
 1005fba:	c6 43 69 00          	mov    BYTE PTR [ebx+0x69],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:218

        // Boot signature
        fs->currentsector.sector[38] = 0x29;
 1005fbe:	c6 43 6a 29          	mov    BYTE PTR [ebx+0x6a],0x29
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:221

        // Volume ID
        fs->currentsector.sector[39] = 0x12;
 1005fc2:	c6 43 6b 12          	mov    BYTE PTR [ebx+0x6b],0x12
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:222
        fs->currentsector.sector[40] = 0x34;
 1005fc6:	c6 43 6c 34          	mov    BYTE PTR [ebx+0x6c],0x34
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:223
        fs->currentsector.sector[41] = 0x56;
 1005fca:	c6 43 6d 56          	mov    BYTE PTR [ebx+0x6d],0x56
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:224
        fs->currentsector.sector[42] = 0x78;
 1005fce:	c6 43 6e 78          	mov    BYTE PTR [ebx+0x6e],0x78
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:227

        // Volume name
        for (i=0;i<11;i++)
 1005fd2:	be 00 00 00 00       	mov    esi,0x0
 1005fd7:	e9 54 fe ff ff       	jmp    1005e30 <fatfs_format_fat16+0xea>
fatfs_format_fat16():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:471
    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
        return 0;

    return 1;
}
 1005fdc:	83 c4 0c             	add    esp,0xc
 1005fdf:	5b                   	pop    ebx
 1005fe0:	5e                   	pop    esi
 1005fe1:	5f                   	pop    edi
 1005fe2:	5d                   	pop    ebp
 1005fe3:	c3                   	ret    

01005fe4 <fatfs_format_fat32>:
fatfs_format_fat32():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:476
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
 1005fe4:	55                   	push   ebp
 1005fe5:	57                   	push   edi
 1005fe6:	56                   	push   esi
 1005fe7:	53                   	push   ebx
 1005fe8:	83 ec 18             	sub    esp,0x18
 1005feb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
 1005fef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
 1005ff3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:477
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
 1005ff7:	c7 83 44 02 00 00 ff 	mov    DWORD PTR [ebx+0x244],0xffffffff
 1005ffe:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:478
    fs->currentsector.dirty = 0;
 1006001:	c7 83 48 02 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
 1006008:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:480

    fs->next_free_cluster = 0; // Invalid
 100600b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:482

    fatfs_fat_init(fs);
 1006012:	53                   	push   ebx
 1006013:	e8 a3 11 00 00       	call   10071bb <fatfs_fat_init>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:485

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
 1006018:	83 c4 10             	add    esp,0x10
 100601b:	83 7b 34 00          	cmp    DWORD PTR [ebx+0x34],0x0
 100601f:	0f 84 22 02 00 00    	je     1006247 <fatfs_format_fat32+0x263>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:485 (discriminator 1)
 1006025:	83 7b 38 00          	cmp    DWORD PTR [ebx+0x38],0x0
 1006029:	0f 84 22 02 00 00    	je     1006251 <fatfs_format_fat32+0x26d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:489
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;
 100602f:	c7 43 30 01 00 00 00 	mov    DWORD PTR [ebx+0x30],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:492

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
 1006036:	66 c7 43 18 01 00    	mov    WORD PTR [ebx+0x18],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:493
    fs->rootdir_first_cluster = 2;
 100603c:	c7 43 08 02 00 00 00 	mov    DWORD PTR [ebx+0x8],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:497

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
 1006043:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:121
{
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 100604a:	8d 6b 44             	lea    ebp,[ebx+0x44]
 100604d:	83 ec 04             	sub    esp,0x4
 1006050:	68 00 02 00 00       	push   0x200
 1006055:	6a 00                	push   0x0
 1006057:	55                   	push   ebp
 1006058:	e8 62 2e 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:124

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
 100605d:	c6 43 44 eb          	mov    BYTE PTR [ebx+0x44],0xeb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:125
    fs->currentsector.sector[1] = 0x3C;
 1006061:	c6 43 45 3c          	mov    BYTE PTR [ebx+0x45],0x3c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:126
    fs->currentsector.sector[2] = 0x90;
 1006065:	c6 43 46 90          	mov    BYTE PTR [ebx+0x46],0x90
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:127
    fs->currentsector.sector[3] = 0x4D;
 1006069:	c6 43 47 4d          	mov    BYTE PTR [ebx+0x47],0x4d
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:128
    fs->currentsector.sector[4] = 0x53;
 100606d:	c6 43 48 53          	mov    BYTE PTR [ebx+0x48],0x53
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:129
    fs->currentsector.sector[5] = 0x44;
 1006071:	c6 43 49 44          	mov    BYTE PTR [ebx+0x49],0x44
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:130
    fs->currentsector.sector[6] = 0x4F;
 1006075:	c6 43 4a 4f          	mov    BYTE PTR [ebx+0x4a],0x4f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:131
    fs->currentsector.sector[7] = 0x53;
 1006079:	c6 43 4b 53          	mov    BYTE PTR [ebx+0x4b],0x53
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:132
    fs->currentsector.sector[8] = 0x35;
 100607d:	c6 43 4c 35          	mov    BYTE PTR [ebx+0x4c],0x35
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:133
    fs->currentsector.sector[9] = 0x2E;
 1006081:	c6 43 4d 2e          	mov    BYTE PTR [ebx+0x4d],0x2e
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:134
    fs->currentsector.sector[10] = 0x30;
 1006085:	c6 43 4e 30          	mov    BYTE PTR [ebx+0x4e],0x30
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:137

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
 1006089:	c6 43 4f 00          	mov    BYTE PTR [ebx+0x4f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:138
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
 100608d:	c6 43 50 02          	mov    BYTE PTR [ebx+0x50],0x2
fatfs_calc_cluster_size():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:89
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
 1006091:	0f b6 15 64 d5 00 01 	movzx  edx,BYTE PTR ds:0x100d564
 1006098:	83 c4 10             	add    esp,0x10
 100609b:	84 d2                	test   dl,dl
 100609d:	0f 84 b8 01 00 00    	je     100625b <fatfs_format_fat32+0x277>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:90
            if (sectors <= _cluster_size_table32[i].sectors)
 10060a3:	3b 35 60 d5 00 01    	cmp    esi,DWORD PTR ds:0x100d560
 10060a9:	0f 86 b9 01 00 00    	jbe    1006268 <fatfs_format_fat32+0x284>
 10060af:	b8 60 d5 00 01       	mov    eax,0x100d560
 10060b4:	eb 0b                	jmp    10060c1 <fatfs_format_fat32+0xdd>
 10060b6:	83 c0 08             	add    eax,0x8
 10060b9:	3b 30                	cmp    esi,DWORD PTR [eax]
 10060bb:	0f 86 a7 01 00 00    	jbe    1006268 <fatfs_format_fat32+0x284>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:89
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
 10060c1:	0f b6 50 0c          	movzx  edx,BYTE PTR [eax+0xc]
 10060c5:	84 d2                	test   dl,dl
 10060c7:	75 ed                	jne    10060b6 <fatfs_format_fat32+0xd2>
 10060c9:	e9 8d 01 00 00       	jmp    100625b <fatfs_format_fat32+0x277>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:322
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
        {
            if (i < (int)strlen(name))
 10060ce:	83 ec 0c             	sub    esp,0xc
 10060d1:	57                   	push   edi
 10060d2:	e8 25 3c 00 00       	call   1009cfc <strlen>
 10060d7:	83 c4 10             	add    esp,0x10
 10060da:	39 f0                	cmp    eax,esi
 10060dc:	7e 0d                	jle    10060eb <fatfs_format_fat32+0x107>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:323
                fs->currentsector.sector[i+71] = name[i];
 10060de:	0f b6 04 37          	movzx  eax,BYTE PTR [edi+esi*1]
 10060e2:	88 84 33 8b 00 00 00 	mov    BYTE PTR [ebx+esi*1+0x8b],al
 10060e9:	eb 08                	jmp    10060f3 <fatfs_format_fat32+0x10f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:325
            else
                fs->currentsector.sector[i+71] = ' ';
 10060eb:	c6 84 33 8b 00 00 00 	mov    BYTE PTR [ebx+esi*1+0x8b],0x20
 10060f2:	20 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:320
        fs->currentsector.sector[68] = 0x34;
        fs->currentsector.sector[69] = 0x56;
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
 10060f3:	83 c6 01             	add    esi,0x1
 10060f6:	83 fe 0b             	cmp    esi,0xb
 10060f9:	75 d3                	jne    10060ce <fatfs_format_fat32+0xea>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:329
            else
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
 10060fb:	c6 83 96 00 00 00 46 	mov    BYTE PTR [ebx+0x96],0x46
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:330
        fs->currentsector.sector[83] = 'A';
 1006102:	c6 83 97 00 00 00 41 	mov    BYTE PTR [ebx+0x97],0x41
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:331
        fs->currentsector.sector[84] = 'T';
 1006109:	c6 83 98 00 00 00 54 	mov    BYTE PTR [ebx+0x98],0x54
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:332
        fs->currentsector.sector[85] = '3';
 1006110:	c6 83 99 00 00 00 33 	mov    BYTE PTR [ebx+0x99],0x33
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:333
        fs->currentsector.sector[86] = '2';
 1006117:	c6 83 9a 00 00 00 32 	mov    BYTE PTR [ebx+0x9a],0x32
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:334
        fs->currentsector.sector[87] = ' ';
 100611e:	c6 83 9b 00 00 00 20 	mov    BYTE PTR [ebx+0x9b],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:335
        fs->currentsector.sector[88] = ' ';
 1006125:	c6 83 9c 00 00 00 20 	mov    BYTE PTR [ebx+0x9c],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:336
        fs->currentsector.sector[89] = ' ';
 100612c:	c6 83 9d 00 00 00 20 	mov    BYTE PTR [ebx+0x9d],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:339

        // Signature
        fs->currentsector.sector[510] = 0x55;
 1006133:	c6 83 42 02 00 00 55 	mov    BYTE PTR [ebx+0x242],0x55
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:340
        fs->currentsector.sector[511] = 0xAA;
 100613a:	c6 83 43 02 00 00 aa 	mov    BYTE PTR [ebx+0x243],0xaa
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:343
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
 1006141:	83 ec 04             	sub    esp,0x4
 1006144:	6a 01                	push   0x1
 1006146:	55                   	push   ebp
 1006147:	6a 00                	push   0x0
 1006149:	ff 53 38             	call   DWORD PTR [ebx+0x38]
fatfs_format_fat32():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:498
    fs->rootdir_first_cluster = 2;

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
 100614c:	83 c4 10             	add    esp,0x10
 100614f:	85 c0                	test   eax,eax
 1006151:	0f 84 32 02 00 00    	je     1006389 <fatfs_format_fat32+0x3a5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:502
        return 0;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
 1006157:	0f b7 43 2a          	movzx  eax,WORD PTR [ebx+0x2a]
 100615b:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
 100615e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:505

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
 1006161:	0f b6 53 2c          	movzx  edx,BYTE PTR [ebx+0x2c]
 1006165:	0f af 53 20          	imul   edx,DWORD PTR [ebx+0x20]
 1006169:	01 d0                	add    eax,edx
 100616b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:508

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
 100616e:	0f b7 73 18          	movzx  esi,WORD PTR [ebx+0x18]
fatfs_create_fsinfo_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:354
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
 1006172:	83 ec 04             	sub    esp,0x4
 1006175:	68 00 02 00 00       	push   0x200
 100617a:	6a 00                	push   0x0
 100617c:	55                   	push   ebp
 100617d:	e8 3d 2d 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:357

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
 1006182:	c6 43 44 52          	mov    BYTE PTR [ebx+0x44],0x52
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:358
    fs->currentsector.sector[1] = 0x52;
 1006186:	c6 43 45 52          	mov    BYTE PTR [ebx+0x45],0x52
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:359
    fs->currentsector.sector[2] = 0x61;
 100618a:	c6 43 46 61          	mov    BYTE PTR [ebx+0x46],0x61
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:360
    fs->currentsector.sector[3] = 0x41;
 100618e:	c6 43 47 41          	mov    BYTE PTR [ebx+0x47],0x41
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:363

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
 1006192:	c6 83 28 02 00 00 72 	mov    BYTE PTR [ebx+0x228],0x72
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:364
    fs->currentsector.sector[485] = 0x72;
 1006199:	c6 83 29 02 00 00 72 	mov    BYTE PTR [ebx+0x229],0x72
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:365
    fs->currentsector.sector[486] = 0x41;
 10061a0:	c6 83 2a 02 00 00 41 	mov    BYTE PTR [ebx+0x22a],0x41
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:366
    fs->currentsector.sector[487] = 0x61;
 10061a7:	c6 83 2b 02 00 00 61 	mov    BYTE PTR [ebx+0x22b],0x61
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:369

    // FSI_Free_Count
    fs->currentsector.sector[488] = 0xFF;
 10061ae:	c6 83 2c 02 00 00 ff 	mov    BYTE PTR [ebx+0x22c],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:370
    fs->currentsector.sector[489] = 0xFF;
 10061b5:	c6 83 2d 02 00 00 ff 	mov    BYTE PTR [ebx+0x22d],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:371
    fs->currentsector.sector[490] = 0xFF;
 10061bc:	c6 83 2e 02 00 00 ff 	mov    BYTE PTR [ebx+0x22e],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:372
    fs->currentsector.sector[491] = 0xFF;
 10061c3:	c6 83 2f 02 00 00 ff 	mov    BYTE PTR [ebx+0x22f],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:375

    // FSI_Nxt_Free
    fs->currentsector.sector[492] = 0xFF;
 10061ca:	c6 83 30 02 00 00 ff 	mov    BYTE PTR [ebx+0x230],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:376
    fs->currentsector.sector[493] = 0xFF;
 10061d1:	c6 83 31 02 00 00 ff 	mov    BYTE PTR [ebx+0x231],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:377
    fs->currentsector.sector[494] = 0xFF;
 10061d8:	c6 83 32 02 00 00 ff 	mov    BYTE PTR [ebx+0x232],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:378
    fs->currentsector.sector[495] = 0xFF;
 10061df:	c6 83 33 02 00 00 ff 	mov    BYTE PTR [ebx+0x233],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:381

    // Signature
    fs->currentsector.sector[510] = 0x55;
 10061e6:	c6 83 42 02 00 00 55 	mov    BYTE PTR [ebx+0x242],0x55
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:382
    fs->currentsector.sector[511] = 0xAA;
 10061ed:	c6 83 43 02 00 00 aa 	mov    BYTE PTR [ebx+0x243],0xaa
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:384

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
 10061f4:	83 c4 0c             	add    esp,0xc
 10061f7:	6a 01                	push   0x1
 10061f9:	55                   	push   ebp
 10061fa:	56                   	push   esi
 10061fb:	ff 53 38             	call   DWORD PTR [ebx+0x38]
fatfs_format_fat32():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:508

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
 10061fe:	83 c4 10             	add    esp,0x10
 1006201:	85 c0                	test   eax,eax
 1006203:	0f 84 80 01 00 00    	je     1006389 <fatfs_format_fat32+0x3a5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:512
        return 0;

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 1))
 1006209:	ba 01 00 00 00       	mov    edx,0x1
 100620e:	89 d8                	mov    eax,ebx
 1006210:	e8 0f fa ff ff       	call   1005c24 <fatfs_erase_fat>
 1006215:	85 c0                	test   eax,eax
 1006217:	0f 84 6c 01 00 00    	je     1006389 <fatfs_format_fat32+0x3a5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:516
        return 0;

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
 100621d:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
 1006220:	83 ec 08             	sub    esp,0x8
 1006223:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 1006226:	53                   	push   ebx
 1006227:	e8 77 d5 ff ff       	call   10037a3 <fatfs_lba_of_cluster>
 100622c:	89 f1                	mov    ecx,esi
 100622e:	89 c2                	mov    edx,eax
 1006230:	89 d8                	mov    eax,ebx
 1006232:	e8 bd fa ff ff       	call   1005cf4 <fatfs_erase_sectors>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:486

    fatfs_fat_init(fs);

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
        return FAT_INIT_MEDIA_ACCESS_ERROR;
 1006237:	83 c4 10             	add    esp,0x10
 100623a:	85 c0                	test   eax,eax
 100623c:	0f 95 c0             	setne  al
 100623f:	0f b6 c0             	movzx  eax,al
 1006242:	e9 42 01 00 00       	jmp    1006389 <fatfs_format_fat32+0x3a5>
 1006247:	b8 ff ff ff ff       	mov    eax,0xffffffff
 100624c:	e9 38 01 00 00       	jmp    1006389 <fatfs_format_fat32+0x3a5>
 1006251:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1006256:	e9 2e 01 00 00       	jmp    1006389 <fatfs_format_fat32+0x3a5>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:141
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
 100625b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
fatfs_format_fat32():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:499

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
        return 0;
 100625e:	b8 00 00 00 00       	mov    eax,0x0
 1006263:	e9 21 01 00 00       	jmp    1006389 <fatfs_format_fat32+0x3a5>
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:141
    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
 1006268:	88 13                	mov    BYTE PTR [ebx],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:146
    if (!fs->sectors_per_cluster)
        return 0; // Invalid disk size

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
 100626a:	88 53 51             	mov    BYTE PTR [ebx+0x51],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:152

    // Reserved Sectors
    if (!is_fat32)
        fs->reserved_sectors = 8;
    else
        fs->reserved_sectors = 32;
 100626d:	66 c7 43 2a 20 00    	mov    WORD PTR [ebx+0x2a],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:153
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
 1006273:	c6 43 52 20          	mov    BYTE PTR [ebx+0x52],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:154
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
 1006277:	c6 43 53 00          	mov    BYTE PTR [ebx+0x53],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:157

    // Number of FATS
    fs->num_of_fats = 2;
 100627b:	c6 43 2c 02          	mov    BYTE PTR [ebx+0x2c],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:158
    fs->currentsector.sector[16] = fs->num_of_fats;
 100627f:	c6 43 54 02          	mov    BYTE PTR [ebx+0x54],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:169
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
    }
    else
    {
        fs->root_entry_count = 0;
 1006283:	66 c7 43 28 00 00    	mov    WORD PTR [ebx+0x28],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:170
        fs->currentsector.sector[17] = 0;
 1006289:	c6 43 55 00          	mov    BYTE PTR [ebx+0x55],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:171
        fs->currentsector.sector[18] = 0;
 100628d:	c6 43 56 00          	mov    BYTE PTR [ebx+0x56],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:175
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
 1006291:	c6 43 57 00          	mov    BYTE PTR [ebx+0x57],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:176
    fs->currentsector.sector[20] = 0x00;
 1006295:	c6 43 58 00          	mov    BYTE PTR [ebx+0x58],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:179

    // Media type
    fs->currentsector.sector[21] = 0xF8;
 1006299:	c6 43 59 f8          	mov    BYTE PTR [ebx+0x59],0xf8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:253
    }
    // FAT32 BS Details
    else
    {
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
 100629d:	c6 43 5a 00          	mov    BYTE PTR [ebx+0x5a],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:254
        fs->currentsector.sector[23] = 0;
 10062a1:	c6 43 5b 00          	mov    BYTE PTR [ebx+0x5b],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:257

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
 10062a5:	c6 43 5c 3f          	mov    BYTE PTR [ebx+0x5c],0x3f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:258
        fs->currentsector.sector[25] = 0x00;
 10062a9:	c6 43 5d 00          	mov    BYTE PTR [ebx+0x5d],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:261

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
 10062ad:	c6 43 5e ff          	mov    BYTE PTR [ebx+0x5e],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:262
        fs->currentsector.sector[27] = 0x00;
 10062b1:	c6 43 5f 00          	mov    BYTE PTR [ebx+0x5f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:265

        // Hidden sectors
        fs->currentsector.sector[28] = 0x00;
 10062b5:	c6 43 60 00          	mov    BYTE PTR [ebx+0x60],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:266
        fs->currentsector.sector[29] = 0x00;
 10062b9:	c6 43 61 00          	mov    BYTE PTR [ebx+0x61],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:267
        fs->currentsector.sector[30] = 0x00;
 10062bd:	c6 43 62 00          	mov    BYTE PTR [ebx+0x62],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:268
        fs->currentsector.sector[31] = 0x00;
 10062c1:	c6 43 63 00          	mov    BYTE PTR [ebx+0x63],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:271

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
 10062c5:	89 f0                	mov    eax,esi
 10062c7:	88 43 64             	mov    BYTE PTR [ebx+0x64],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:272
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
 10062ca:	89 f0                	mov    eax,esi
 10062cc:	c1 e8 08             	shr    eax,0x8
 10062cf:	88 43 65             	mov    BYTE PTR [ebx+0x65],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:273
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
 10062d2:	89 f0                	mov    eax,esi
 10062d4:	c1 e8 10             	shr    eax,0x10
 10062d7:	88 43 66             	mov    BYTE PTR [ebx+0x66],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:274
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
 10062da:	89 f0                	mov    eax,esi
 10062dc:	c1 e8 18             	shr    eax,0x18
 10062df:	88 43 67             	mov    BYTE PTR [ebx+0x67],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:277

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
 10062e2:	0f b6 ca             	movzx  ecx,dl
 10062e5:	89 f0                	mov    eax,esi
 10062e7:	ba 00 00 00 00       	mov    edx,0x0
 10062ec:	f7 f1                	div    ecx
 10062ee:	83 c0 01             	add    eax,0x1
 10062f1:	c1 e8 07             	shr    eax,0x7
 10062f4:	83 c0 01             	add    eax,0x1
 10062f7:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:280

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
 10062fa:	88 43 68             	mov    BYTE PTR [ebx+0x68],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:281
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
 10062fd:	89 c2                	mov    edx,eax
 10062ff:	c1 ea 08             	shr    edx,0x8
 1006302:	88 53 69             	mov    BYTE PTR [ebx+0x69],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:282
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
 1006305:	89 c2                	mov    edx,eax
 1006307:	c1 ea 10             	shr    edx,0x10
 100630a:	88 53 6a             	mov    BYTE PTR [ebx+0x6a],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:283
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
 100630d:	c1 e8 18             	shr    eax,0x18
 1006310:	88 43 6b             	mov    BYTE PTR [ebx+0x6b],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:286

        // BPB_ExtFlags
        fs->currentsector.sector[40] = 0;
 1006313:	c6 43 6c 00          	mov    BYTE PTR [ebx+0x6c],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:287
        fs->currentsector.sector[41] = 0;
 1006317:	c6 43 6d 00          	mov    BYTE PTR [ebx+0x6d],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:290

        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
 100631b:	c6 43 6e 00          	mov    BYTE PTR [ebx+0x6e],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:291
        fs->currentsector.sector[43] = 0;
 100631f:	c6 43 6f 00          	mov    BYTE PTR [ebx+0x6f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:294

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
 1006323:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
 1006326:	88 43 70             	mov    BYTE PTR [ebx+0x70],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:295
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
 1006329:	89 c2                	mov    edx,eax
 100632b:	c1 ea 08             	shr    edx,0x8
 100632e:	88 53 71             	mov    BYTE PTR [ebx+0x71],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:296
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
 1006331:	89 c2                	mov    edx,eax
 1006333:	c1 ea 10             	shr    edx,0x10
 1006336:	88 53 72             	mov    BYTE PTR [ebx+0x72],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:297
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);
 1006339:	c1 e8 18             	shr    eax,0x18
 100633c:	88 43 73             	mov    BYTE PTR [ebx+0x73],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:300

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
 100633f:	0f b7 43 18          	movzx  eax,WORD PTR [ebx+0x18]
 1006343:	88 43 74             	mov    BYTE PTR [ebx+0x74],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:301
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);
 1006346:	66 c1 e8 08          	shr    ax,0x8
 100634a:	88 43 75             	mov    BYTE PTR [ebx+0x75],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:304

        // BPB_BkBootSec
        fs->currentsector.sector[50] = 6;
 100634d:	c6 43 76 06          	mov    BYTE PTR [ebx+0x76],0x6
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:305
        fs->currentsector.sector[51] = 0;
 1006351:	c6 43 77 00          	mov    BYTE PTR [ebx+0x77],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:308

        // Drive number
        fs->currentsector.sector[64] = 0x00;
 1006355:	c6 83 84 00 00 00 00 	mov    BYTE PTR [ebx+0x84],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:311

        // Boot signature
        fs->currentsector.sector[66] = 0x29;
 100635c:	c6 83 86 00 00 00 29 	mov    BYTE PTR [ebx+0x86],0x29
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:314

        // Volume ID
        fs->currentsector.sector[67] = 0x12;
 1006363:	c6 83 87 00 00 00 12 	mov    BYTE PTR [ebx+0x87],0x12
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:315
        fs->currentsector.sector[68] = 0x34;
 100636a:	c6 83 88 00 00 00 34 	mov    BYTE PTR [ebx+0x88],0x34
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:316
        fs->currentsector.sector[69] = 0x56;
 1006371:	c6 83 89 00 00 00 56 	mov    BYTE PTR [ebx+0x89],0x56
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:317
        fs->currentsector.sector[70] = 0x78;
 1006378:	c6 83 8a 00 00 00 78 	mov    BYTE PTR [ebx+0x8a],0x78
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:320

        // Volume name
        for (i=0;i<11;i++)
 100637f:	be 00 00 00 00       	mov    esi,0x0
 1006384:	e9 45 fd ff ff       	jmp    10060ce <fatfs_format_fat32+0xea>
fatfs_format_fat32():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:520
    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
        return 0;

    return 1;
}
 1006389:	83 c4 0c             	add    esp,0xc
 100638c:	5b                   	pop    ebx
 100638d:	5e                   	pop    esi
 100638e:	5f                   	pop    edi
 100638f:	5d                   	pop    ebp
 1006390:	c3                   	ret    

01006391 <fatfs_format>:
fatfs_format():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:525
//-----------------------------------------------------------------------------
// fatfs_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
int fatfs_format(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
 1006391:	83 ec 0c             	sub    esp,0xc
 1006394:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 1006398:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 100639c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:527
    // 2GB - 32K limit for safe behaviour for FAT16
    if (volume_sectors <= 4194304)
 10063a0:	3d 00 00 40 00       	cmp    eax,0x400000
 10063a5:	77 10                	ja     10063b7 <fatfs_format+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:528
        return fatfs_format_fat16(fs, volume_sectors, name);
 10063a7:	83 ec 04             	sub    esp,0x4
 10063aa:	51                   	push   ecx
 10063ab:	50                   	push   eax
 10063ac:	52                   	push   edx
 10063ad:	e8 94 f9 ff ff       	call   1005d46 <fatfs_format_fat16>
 10063b2:	83 c4 10             	add    esp,0x10
 10063b5:	eb 0e                	jmp    10063c5 <fatfs_format+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:530
    else
        return fatfs_format_fat32(fs, volume_sectors, name);
 10063b7:	83 ec 04             	sub    esp,0x4
 10063ba:	51                   	push   ecx
 10063bb:	50                   	push   eax
 10063bc:	52                   	push   edx
 10063bd:	e8 22 fc ff ff       	call   1005fe4 <fatfs_format_fat32>
 10063c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_format.c:531
}
 10063c5:	83 c4 0c             	add    esp,0xc
 10063c8:	c3                   	ret    
 10063c9:	66 90                	xchg   ax,ax
 10063cb:	90                   	nop

010063cc <fatfs_lfn_cache_init>:
fatfs_lfn_cache_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:40

//-----------------------------------------------------------------------------
// fatfs_lfn_cache_init: Clear long file name cache
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
 10063cc:	56                   	push   esi
 10063cd:	53                   	push   ebx
 10063ce:	83 ec 04             	sub    esp,0x4
 10063d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:43
    int i = 0;

    lfn->no_of_strings = 0;
 10063d5:	c6 86 05 01 00 00 00 	mov    BYTE PTR [esi+0x105],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:48

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
 10063dc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
 10063e1:	74 1f                	je     1006402 <fatfs_lfn_cache_init+0x36>
 10063e3:	89 f3                	mov    ebx,esi
 10063e5:	81 c6 04 01 00 00    	add    esi,0x104
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:50 (discriminator 3)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
 10063eb:	83 ec 04             	sub    esp,0x4
 10063ee:	6a 0d                	push   0xd
 10063f0:	6a 00                	push   0x0
 10063f2:	53                   	push   ebx
 10063f3:	e8 c7 2a 00 00       	call   1008ebf <memset>
 10063f8:	83 c3 0d             	add    ebx,0xd
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:49 (discriminator 3)

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
 10063fb:	83 c4 10             	add    esp,0x10
 10063fe:	39 f3                	cmp    ebx,esi
 1006400:	75 e9                	jne    10063eb <fatfs_lfn_cache_init+0x1f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:52
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
#endif
}
 1006402:	83 c4 04             	add    esp,0x4
 1006405:	5b                   	pop    ebx
 1006406:	5e                   	pop    esi
 1006407:	c3                   	ret    

01006408 <fatfs_lfn_cache_entry>:
fatfs_lfn_cache_entry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:59
// fatfs_lfn_cache_entry - Function extracts long file name text from sector
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
 1006408:	56                   	push   esi
 1006409:	53                   	push   ebx
 100640a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
 100640e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:61
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
 1006412:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 1006415:	83 e0 1f             	and    eax,0x1f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:68
    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
        return ;

    // This is an error condition
    if (LFNIndex == 0)
 1006418:	8d 58 ff             	lea    ebx,[eax-0x1]
 100641b:	80 fb 13             	cmp    bl,0x13
 100641e:	0f 87 8b 00 00 00    	ja     10064af <fatfs_lfn_cache_entry+0xa7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:71
        return ;

    if (lfn->no_of_strings == 0)
 1006424:	80 b9 05 01 00 00 00 	cmp    BYTE PTR [ecx+0x105],0x0
 100642b:	75 06                	jne    1006433 <fatfs_lfn_cache_entry+0x2b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:72
        lfn->no_of_strings = LFNIndex;
 100642d:	88 81 05 01 00 00    	mov    BYTE PTR [ecx+0x105],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:74

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
 1006433:	0f b6 c0             	movzx  eax,al
 1006436:	83 e8 01             	sub    eax,0x1
 1006439:	8d 1c 40             	lea    ebx,[eax+eax*2]
 100643c:	8d 34 98             	lea    esi,[eax+ebx*4]
 100643f:	8d 04 31             	lea    eax,[ecx+esi*1]
 1006442:	0f b6 5a 01          	movzx  ebx,BYTE PTR [edx+0x1]
 1006446:	88 18                	mov    BYTE PTR [eax],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:75
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
 1006448:	0f b6 5a 03          	movzx  ebx,BYTE PTR [edx+0x3]
 100644c:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:76
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
 100644f:	0f b6 5a 05          	movzx  ebx,BYTE PTR [edx+0x5]
 1006453:	88 58 02             	mov    BYTE PTR [eax+0x2],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:77
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
 1006456:	0f b6 5a 07          	movzx  ebx,BYTE PTR [edx+0x7]
 100645a:	88 58 03             	mov    BYTE PTR [eax+0x3],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:78
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
 100645d:	0f b6 5a 09          	movzx  ebx,BYTE PTR [edx+0x9]
 1006461:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:79
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
 1006464:	0f b6 5a 0e          	movzx  ebx,BYTE PTR [edx+0xe]
 1006468:	88 58 05             	mov    BYTE PTR [eax+0x5],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:80
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
 100646b:	0f b6 5a 10          	movzx  ebx,BYTE PTR [edx+0x10]
 100646f:	88 58 06             	mov    BYTE PTR [eax+0x6],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:81
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
 1006472:	0f b6 5a 12          	movzx  ebx,BYTE PTR [edx+0x12]
 1006476:	88 58 07             	mov    BYTE PTR [eax+0x7],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:82
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
 1006479:	0f b6 5a 14          	movzx  ebx,BYTE PTR [edx+0x14]
 100647d:	88 58 08             	mov    BYTE PTR [eax+0x8],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:83
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
 1006480:	0f b6 5a 16          	movzx  ebx,BYTE PTR [edx+0x16]
 1006484:	88 58 09             	mov    BYTE PTR [eax+0x9],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:84
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
 1006487:	0f b6 5a 18          	movzx  ebx,BYTE PTR [edx+0x18]
 100648b:	88 58 0a             	mov    BYTE PTR [eax+0xa],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:85
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
 100648e:	0f b6 5a 1c          	movzx  ebx,BYTE PTR [edx+0x1c]
 1006492:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:86
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
 1006495:	0f b6 52 1e          	movzx  edx,BYTE PTR [edx+0x1e]
 1006499:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
 100649c:	8d 54 31 0d          	lea    edx,[ecx+esi*1+0xd]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:89

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
 10064a0:	80 38 ff             	cmp    BYTE PTR [eax],0xff
 10064a3:	75 03                	jne    10064a8 <fatfs_lfn_cache_entry+0xa0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:90
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
 10064a5:	c6 00 20             	mov    BYTE PTR [eax],0x20
 10064a8:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:88 (discriminator 2)
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
 10064ab:	39 d0                	cmp    eax,edx
 10064ad:	75 f1                	jne    10064a0 <fatfs_lfn_cache_entry+0x98>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:91
        if (lfn->String[LFNIndex-1][i]==0xFF)
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
}
 10064af:	5b                   	pop    ebx
 10064b0:	5e                   	pop    esi
 10064b1:	c3                   	ret    

010064b2 <fatfs_lfn_cache_get>:
fatfs_lfn_cache_get():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:98
//-----------------------------------------------------------------------------
// fatfs_lfn_cache_get: Get a reference to the long filename
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
 10064b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:100
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
 10064b6:	0f b6 90 05 01 00 00 	movzx  edx,BYTE PTR [eax+0x105]
 10064bd:	80 fa 14             	cmp    dl,0x14
 10064c0:	75 08                	jne    10064ca <fatfs_lfn_cache_get+0x18>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:101
        lfn->Null = '\0';
 10064c2:	c6 80 04 01 00 00 00 	mov    BYTE PTR [eax+0x104],0x0
 10064c9:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:102
    else if (lfn->no_of_strings)
 10064ca:	84 d2                	test   dl,dl
 10064cc:	74 0e                	je     10064dc <fatfs_lfn_cache_get+0x2a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:103
        lfn->String[lfn->no_of_strings][0] = '\0';
 10064ce:	0f b6 d2             	movzx  edx,dl
 10064d1:	8d 0c 52             	lea    ecx,[edx+edx*2]
 10064d4:	8d 14 8a             	lea    edx,[edx+ecx*4]
 10064d7:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
 10064db:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:105
    else
        lfn->String[0][0] = '\0';
 10064dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:108

    return (char*)&lfn->String[0][0];
}
 10064df:	c3                   	ret    

010064e0 <fatfs_entry_lfn_text>:
fatfs_entry_lfn_text():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:115
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
 10064e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 10064e4:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
 10064e8:	83 e0 0f             	and    eax,0xf
 10064eb:	3c 0f                	cmp    al,0xf
 10064ed:	0f 94 c0             	sete   al
 10064f0:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:120
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT)
        return 1;
    else
        return 0;
}
 10064f3:	c3                   	ret    

010064f4 <fatfs_entry_lfn_invalid>:
fatfs_entry_lfn_invalid():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:127
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
 10064f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:128
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
 10064f8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 10064fb:	84 c0                	test   al,al
 10064fd:	74 15                	je     1006514 <fatfs_entry_lfn_invalid+0x20>
 10064ff:	3c e5                	cmp    al,0xe5
 1006501:	74 11                	je     1006514 <fatfs_entry_lfn_invalid+0x20>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:130
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
 1006503:	0f b6 42 0b          	movzx  eax,BYTE PTR [edx+0xb]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:129
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
 1006507:	3c 08                	cmp    al,0x8
 1006509:	74 0f                	je     100651a <fatfs_entry_lfn_invalid+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:132
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
         (entry->Attr & FILE_ATTR_SYSHID) )
        return 1;
 100650b:	a8 06                	test   al,0x6
 100650d:	0f 95 c0             	setne  al
 1006510:	0f b6 c0             	movzx  eax,al
 1006513:	c3                   	ret    
 1006514:	b8 01 00 00 00       	mov    eax,0x1
 1006519:	c3                   	ret    
 100651a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:135
    else
        return 0;
}
 100651f:	c3                   	ret    

01006520 <fatfs_entry_lfn_exists>:
fatfs_entry_lfn_exists():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:142
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
 1006520:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:143
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
 1006524:	0f b6 51 0b          	movzx  edx,BYTE PTR [ecx+0xb]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:151
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
        return 1;
    else
        return 0;
 1006528:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:143
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
 100652d:	80 fa 0f             	cmp    dl,0xf
 1006530:	74 37                	je     1006569 <fatfs_entry_lfn_exists+0x49>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:144 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
 1006532:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:145 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
 1006535:	3c e5                	cmp    al,0xe5
 1006537:	0f 95 c1             	setne  cl
 100653a:	84 c0                	test   al,al
 100653c:	0f 95 c0             	setne  al
 100653f:	84 c1                	test   cl,al
 1006541:	74 21                	je     1006564 <fatfs_entry_lfn_exists+0x44>
 1006543:	80 fa 08             	cmp    dl,0x8
 1006546:	74 1c                	je     1006564 <fatfs_entry_lfn_exists+0x44>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:151
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
        return 1;
    else
        return 0;
 1006548:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:146
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
 100654d:	f6 c2 06             	test   dl,0x6
 1006550:	75 17                	jne    1006569 <fatfs_entry_lfn_exists+0x49>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:149
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
        return 1;
 1006552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1006556:	80 b8 05 01 00 00 00 	cmp    BYTE PTR [eax+0x105],0x0
 100655d:	0f 95 c0             	setne  al
 1006560:	0f b6 c0             	movzx  eax,al
 1006563:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:151
    else
        return 0;
 1006564:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:152
}
 1006569:	f3 c3                	repz ret 

0100656b <fatfs_entry_sfn_only>:
fatfs_entry_sfn_only():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:158
#endif
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
 100656b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:159
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
 100656f:	0f b6 51 0b          	movzx  edx,BYTE PTR [ecx+0xb]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:166
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
    else
        return 0;
 1006573:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:159
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
 1006578:	80 fa 0f             	cmp    dl,0xf
 100657b:	74 25                	je     10065a2 <fatfs_entry_sfn_only+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:160 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
 100657d:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:161 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
 1006580:	3c e5                	cmp    al,0xe5
 1006582:	0f 95 c1             	setne  cl
 1006585:	84 c0                	test   al,al
 1006587:	0f 95 c0             	setne  al
 100658a:	84 c1                	test   cl,al
 100658c:	74 0f                	je     100659d <fatfs_entry_sfn_only+0x32>
 100658e:	80 fa 08             	cmp    dl,0x8
 1006591:	74 0a                	je     100659d <fatfs_entry_sfn_only+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:164
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
 1006593:	f6 c2 06             	test   dl,0x6
 1006596:	0f 94 c0             	sete   al
 1006599:	0f b6 c0             	movzx  eax,al
 100659c:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:166
    else
        return 0;
 100659d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:167
}
 10065a2:	f3 c3                	repz ret 

010065a4 <fatfs_entry_is_dir>:
fatfs_entry_is_dir():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:173
// TODO: FILE_ATTR_SYSHID ?!?!??!
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
 10065a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 10065a8:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
 10065ac:	c0 e8 04             	shr    al,0x4
 10065af:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:178
    if (entry->Attr & FILE_TYPE_DIR)
        return 1;
    else
        return 0;
}
 10065b2:	c3                   	ret    

010065b3 <fatfs_entry_is_file>:
fatfs_entry_is_file():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:183
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
 10065b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 10065b7:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
 10065bb:	c0 e8 05             	shr    al,0x5
 10065be:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:188
    if (entry->Attr & FILE_TYPE_FILE)
        return 1;
    else
        return 0;
}
 10065c1:	c3                   	ret    

010065c2 <fatfs_lfn_entries_required>:
fatfs_lfn_entries_required():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:194
//-----------------------------------------------------------------------------
// fatfs_lfn_entries_required: Calculate number of 13 characters entries
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
 10065c2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:195
    int length = (int)strlen(filename);
 10065c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 10065c9:	e8 2e 37 00 00       	call   1009cfc <strlen>
 10065ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:200

    if (length)
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
    else
        return 0;
 10065d1:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:197
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
    int length = (int)strlen(filename);

    if (length)
 10065d6:	85 c0                	test   eax,eax
 10065d8:	74 16                	je     10065f0 <fatfs_lfn_entries_required+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:198
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
 10065da:	8d 48 0c             	lea    ecx,[eax+0xc]
 10065dd:	ba 4f ec c4 4e       	mov    edx,0x4ec4ec4f
 10065e2:	89 c8                	mov    eax,ecx
 10065e4:	f7 ea                	imul   edx
 10065e6:	c1 fa 02             	sar    edx,0x2
 10065e9:	89 c8                	mov    eax,ecx
 10065eb:	c1 f8 1f             	sar    eax,0x1f
 10065ee:	29 c2                	sub    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:201
    else
        return 0;
}
 10065f0:	89 d0                	mov    eax,edx
 10065f2:	83 c4 0c             	add    esp,0xc
 10065f5:	c3                   	ret    

010065f6 <fatfs_filename_to_lfn>:
fatfs_filename_to_lfn():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:208
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
 10065f6:	55                   	push   ebp
 10065f7:	57                   	push   edi
 10065f8:	56                   	push   esi
 10065f9:	53                   	push   ebx
 10065fa:	83 ec 68             	sub    esp,0x68
 10065fd:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
 1006601:	8b 9c 24 80 00 00 00 	mov    ebx,DWORD PTR [esp+0x80]
 1006608:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
 100660f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
 1006616:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:210
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
 100661a:	c7 44 24 28 01 00 00 	mov    DWORD PTR [esp+0x28],0x1
 1006621:	00 
 1006622:	c7 44 24 2c 03 00 00 	mov    DWORD PTR [esp+0x2c],0x3
 1006629:	00 
 100662a:	c7 44 24 30 05 00 00 	mov    DWORD PTR [esp+0x30],0x5
 1006631:	00 
 1006632:	c7 44 24 34 07 00 00 	mov    DWORD PTR [esp+0x34],0x7
 1006639:	00 
 100663a:	c7 44 24 38 09 00 00 	mov    DWORD PTR [esp+0x38],0x9
 1006641:	00 
 1006642:	c7 44 24 3c 0e 00 00 	mov    DWORD PTR [esp+0x3c],0xe
 1006649:	00 
 100664a:	c7 44 24 40 10 00 00 	mov    DWORD PTR [esp+0x40],0x10
 1006651:	00 
 1006652:	c7 44 24 44 12 00 00 	mov    DWORD PTR [esp+0x44],0x12
 1006659:	00 
 100665a:	c7 44 24 48 14 00 00 	mov    DWORD PTR [esp+0x48],0x14
 1006661:	00 
 1006662:	c7 44 24 4c 16 00 00 	mov    DWORD PTR [esp+0x4c],0x16
 1006669:	00 
 100666a:	c7 44 24 50 18 00 00 	mov    DWORD PTR [esp+0x50],0x18
 1006671:	00 
 1006672:	c7 44 24 54 1c 00 00 	mov    DWORD PTR [esp+0x54],0x1c
 1006679:	00 
 100667a:	c7 44 24 58 1e 00 00 	mov    DWORD PTR [esp+0x58],0x1e
 1006681:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:213

    // 13 characters entries
    int length = (int)strlen(filename);
 1006682:	57                   	push   edi
 1006683:	e8 74 36 00 00       	call   1009cfc <strlen>
 1006688:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:214
    int entriesRequired = fatfs_lfn_entries_required(filename);
 100668a:	89 3c 24             	mov    DWORD PTR [esp],edi
 100668d:	e8 30 ff ff ff       	call   10065c2 <fatfs_lfn_entries_required>
 1006692:	83 c4 0c             	add    esp,0xc
 1006695:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:217

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
 1006699:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
 100669d:	8d 4c 85 00          	lea    ecx,[ebp+eax*4+0x0]
 10066a1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:220

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
 10066a5:	6a 20                	push   0x20
 10066a7:	6a 00                	push   0x0
 10066a9:	53                   	push   ebx
 10066aa:	e8 10 28 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:223

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
 10066af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 10066b3:	83 e8 01             	sub    eax,0x1
 10066b6:	83 c4 10             	add    esp,0x10
 10066b9:	8d 55 01             	lea    edx,[ebp+0x1]
 10066bc:	39 c5                	cmp    ebp,eax
 10066be:	75 03                	jne    10066c3 <fatfs_filename_to_lfn+0xcd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:223 (discriminator 1)
 10066c0:	83 ca 40             	or     edx,0x40
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:223 (discriminator 4)
 10066c3:	88 13                	mov    BYTE PTR [ebx],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:226 (discriminator 4)

    // LFN flag
    buffer[11] = 0x0F;
 10066c5:	c6 43 0b 0f          	mov    BYTE PTR [ebx+0xb],0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:229 (discriminator 4)

    // Checksum of short filename
    buffer[13] = sfnChk;
 10066c9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
 10066ce:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
 10066d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 10066d5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
 10066d9:	8d 4c 24 50          	lea    ecx,[esp+0x50]
 10066dd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:234

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
 10066e1:	39 c6                	cmp    esi,eax
 10066e3:	7e 0b                	jle    10066f0 <fatfs_filename_to_lfn+0xfa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:235
            buffer[nameIndexes[i]] = filename[start+i];
 10066e5:	8b 2a                	mov    ebp,DWORD PTR [edx]
 10066e7:	0f b6 0c 07          	movzx  ecx,BYTE PTR [edi+eax*1]
 10066eb:	88 0c 2b             	mov    BYTE PTR [ebx+ebp*1],cl
 10066ee:	eb 17                	jmp    1006707 <fatfs_filename_to_lfn+0x111>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:236
        else if ( (start+i) == length )
 10066f0:	39 c6                	cmp    esi,eax
 10066f2:	75 08                	jne    10066fc <fatfs_filename_to_lfn+0x106>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:237
            buffer[nameIndexes[i]] = 0x00;
 10066f4:	8b 2a                	mov    ebp,DWORD PTR [edx]
 10066f6:	c6 04 2b 00          	mov    BYTE PTR [ebx+ebp*1],0x0
 10066fa:	eb 0b                	jmp    1006707 <fatfs_filename_to_lfn+0x111>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:240
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
 10066fc:	8b 2a                	mov    ebp,DWORD PTR [edx]
 10066fe:	c6 04 2b ff          	mov    BYTE PTR [ebx+ebp*1],0xff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:241
            buffer[nameIndexes[i]+1] = 0xFF;
 1006702:	c6 44 2b 01 ff       	mov    BYTE PTR [ebx+ebp*1+0x1],0xff
 1006707:	83 c0 01             	add    eax,0x1
 100670a:	83 c2 04             	add    edx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:232 (discriminator 2)

    // Checksum of short filename
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
 100670d:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
 1006711:	75 ce                	jne    10066e1 <fatfs_filename_to_lfn+0xeb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:244
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
 1006713:	83 c4 5c             	add    esp,0x5c
 1006716:	5b                   	pop    ebx
 1006717:	5e                   	pop    esi
 1006718:	5f                   	pop    edi
 1006719:	5d                   	pop    ebp
 100671a:	c3                   	ret    

0100671b <fatfs_sfn_create_entry>:
fatfs_sfn_create_entry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:251
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
 100671b:	57                   	push   edi
 100671c:	56                   	push   esi
 100671d:	53                   	push   ebx
 100671e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1006722:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
 1006726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
 100672a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:255
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
 100672e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:256 (discriminator 3)
        entry->Name[i] = shortfilename[i];
 1006733:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
 1006737:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:255 (discriminator 3)
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
 100673a:	83 c0 01             	add    eax,0x1
 100673d:	83 f8 0b             	cmp    eax,0xb
 1006740:	75 f1                	jne    1006733 <fatfs_sfn_create_entry+0x18>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:259
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
 1006742:	c6 42 0d 00          	mov    BYTE PTR [edx+0xd],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:260
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
 1006746:	c6 42 0e 00          	mov    BYTE PTR [edx+0xe],0x0
 100674a:	c6 42 0f 00          	mov    BYTE PTR [edx+0xf],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:261
    entry->CrtDate[1] = 0x00;
 100674e:	c6 42 11 00          	mov    BYTE PTR [edx+0x11],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:262
    entry->CrtDate[0] = 0x20;
 1006752:	c6 42 10 20          	mov    BYTE PTR [edx+0x10],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:263
    entry->LstAccDate[1] = 0x00;
 1006756:	c6 42 13 00          	mov    BYTE PTR [edx+0x13],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:264
    entry->LstAccDate[0] = 0x20;
 100675a:	c6 42 12 20          	mov    BYTE PTR [edx+0x12],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:265
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
 100675e:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
 1006762:	c6 42 17 00          	mov    BYTE PTR [edx+0x17],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:266
    entry->WrtDate[1] = 0x00;
 1006766:	c6 42 19 00          	mov    BYTE PTR [edx+0x19],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:267
    entry->WrtDate[0] = 0x20;
 100676a:	c6 42 18 20          	mov    BYTE PTR [edx+0x18],0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:270

    if (!dir)
        entry->Attr = FILE_TYPE_FILE;
 100676e:	83 ff 01             	cmp    edi,0x1
 1006771:	19 c0                	sbb    eax,eax
 1006773:	83 e0 10             	and    eax,0x10
 1006776:	83 c0 10             	add    eax,0x10
 1006779:	88 42 0b             	mov    BYTE PTR [edx+0xb],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:274
    else
        entry->Attr = FILE_TYPE_DIR;

    entry->NTRes = 0x00;
 100677c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:276

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
 1006780:	89 f0                	mov    eax,esi
 1006782:	c1 e8 10             	shr    eax,0x10
 1006785:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:277
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
 1006789:	66 89 72 1a          	mov    WORD PTR [edx+0x1a],si
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:278
    entry->FileSize = FAT_HTONL(size);
 100678d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1006791:	89 42 1c             	mov    DWORD PTR [edx+0x1c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:279
}
 1006794:	5b                   	pop    ebx
 1006795:	5e                   	pop    esi
 1006796:	5f                   	pop    edi
 1006797:	c3                   	ret    

01006798 <fatfs_lfn_create_sfn>:
fatfs_lfn_create_sfn():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:286
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
 1006798:	55                   	push   ebp
 1006799:	57                   	push   edi
 100679a:	56                   	push   esi
 100679b:	53                   	push   ebx
 100679c:	83 ec 38             	sub    esp,0x38
 100679f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
 10067a3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:291
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
 10067a7:	53                   	push   ebx
 10067a8:	e8 4f 35 00 00       	call   1009cfc <strlen>
 10067ad:	83 c4 10             	add    esp,0x10
 10067b0:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:295

    // Invalid to start with .
    if (filename[0]=='.')
        return 0;
 10067b2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:294
    char ext[3];
    int pos;
    int len = (int)strlen(filename);

    // Invalid to start with .
    if (filename[0]=='.')
 10067b7:	80 3b 2e             	cmp    BYTE PTR [ebx],0x2e
 10067ba:	0f 84 fb 00 00 00    	je     10068bb <fatfs_lfn_create_sfn+0x123>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:291
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
 10067c0:	89 ee                	mov    esi,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:297

    // Invalid to start with .
    if (filename[0]=='.')
        return 0;

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
 10067c2:	83 ec 04             	sub    esp,0x4
 10067c5:	6a 0b                	push   0xb
 10067c7:	6a 20                	push   0x20
 10067c9:	57                   	push   edi
 10067ca:	e8 f0 26 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:298
    memset(ext, ' ', 3);
 10067cf:	83 c4 0c             	add    esp,0xc
 10067d2:	6a 03                	push   0x3
 10067d4:	6a 20                	push   0x20
 10067d6:	8d 44 24 29          	lea    eax,[esp+0x29]
 10067da:	50                   	push   eax
 10067db:	e8 df 26 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:301

    // Find dot seperator
    for (i = 0; i< len; i++)
 10067e0:	83 c4 10             	add    esp,0x10
 10067e3:	85 ed                	test   ebp,ebp
 10067e5:	0f 8e 87 00 00 00    	jle    1006872 <fatfs_lfn_create_sfn+0xda>
 10067eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
 10067f0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:303
    {
        if (filename[i]=='.')
 10067f5:	80 3c 13 2e          	cmp    BYTE PTR [ebx+edx*1],0x2e
 10067f9:	0f 44 c2             	cmove  eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:301

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);

    // Find dot seperator
    for (i = 0; i< len; i++)
 10067fc:	83 c2 01             	add    edx,0x1
 10067ff:	39 d6                	cmp    esi,edx
 1006801:	75 f2                	jne    10067f5 <fatfs_lfn_create_sfn+0x5d>
 1006803:	e9 a3 00 00 00       	jmp    10068ab <fatfs_lfn_create_sfn+0x113>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:311

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
 1006808:	8d 50 01             	lea    edx,[eax+0x1]
 100680b:	8d 48 04             	lea    ecx,[eax+0x4]
 100680e:	39 ca                	cmp    edx,ecx
 1006810:	7d 21                	jge    1006833 <fatfs_lfn_create_sfn+0x9b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:313
            if (i<len)
                ext[i-(dotPos+1)] = filename[i];
 1006812:	8d 6c 24 1d          	lea    ebp,[esp+0x1d]
 1006816:	29 c5                	sub    ebp,eax
 1006818:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:312
    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
            if (i<len)
 100681c:	39 d6                	cmp    esi,edx
 100681e:	7e 08                	jle    1006828 <fatfs_lfn_create_sfn+0x90>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:313
                ext[i-(dotPos+1)] = filename[i];
 1006820:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
 1006824:	88 44 15 ff          	mov    BYTE PTR [ebp+edx*1-0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:311 (discriminator 2)

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
 1006828:	83 c2 01             	add    edx,0x1
 100682b:	39 ca                	cmp    edx,ecx
 100682d:	75 ed                	jne    100681c <fatfs_lfn_create_sfn+0x84>
 100682f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:321
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
 1006833:	85 c0                	test   eax,eax
 1006835:	7e 3b                	jle    1006872 <fatfs_lfn_create_sfn+0xda>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:291
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
 1006837:	be 00 00 00 00       	mov    esi,0x0
 100683c:	b9 00 00 00 00       	mov    ecx,0x0
 1006841:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:323

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
 1006845:	0f b6 14 0b          	movzx  edx,BYTE PTR [ebx+ecx*1]
 1006849:	80 fa 20             	cmp    dl,0x20
 100684c:	74 1f                	je     100686d <fatfs_lfn_create_sfn+0xd5>
 100684e:	80 fa 2e             	cmp    dl,0x2e
 1006851:	74 1a                	je     100686d <fatfs_lfn_create_sfn+0xd5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:325
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
 1006853:	8d 6a 9f             	lea    ebp,[edx-0x61]
 1006856:	89 e8                	mov    eax,ebp
 1006858:	3c 19                	cmp    al,0x19
 100685a:	77 0b                	ja     1006867 <fatfs_lfn_create_sfn+0xcf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:326
                sfn_output[pos++] = filename[i] - 'a' + 'A';
 100685c:	83 ea 20             	sub    edx,0x20
 100685f:	88 14 37             	mov    BYTE PTR [edi+esi*1],dl
 1006862:	8d 76 01             	lea    esi,[esi+0x1]
 1006865:	eb 06                	jmp    100686d <fatfs_lfn_create_sfn+0xd5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:328
            else
                sfn_output[pos++] = filename[i];
 1006867:	88 14 37             	mov    BYTE PTR [edi+esi*1],dl
 100686a:	8d 76 01             	lea    esi,[esi+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:332
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
 100686d:	83 fe 08             	cmp    esi,0x8
 1006870:	75 07                	jne    1006879 <fatfs_lfn_create_sfn+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:328 (discriminator 1)
        if ( (filename[i]!=' ') && (filename[i]!='.') )
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
                sfn_output[pos++] = filename[i] - 'a' + 'A';
            else
                sfn_output[pos++] = filename[i];
 1006872:	b8 08 00 00 00       	mov    eax,0x8
 1006877:	eb 0b                	jmp    1006884 <fatfs_lfn_create_sfn+0xec>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:321 (discriminator 2)
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
 1006879:	83 c1 01             	add    ecx,0x1
 100687c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
 1006880:	7f c3                	jg     1006845 <fatfs_lfn_create_sfn+0xad>
 1006882:	eb ee                	jmp    1006872 <fatfs_lfn_create_sfn+0xda>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:339
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
 1006884:	0f b6 54 04 15       	movzx  edx,BYTE PTR [esp+eax*1+0x15]
 1006889:	8d 4a 9f             	lea    ecx,[edx-0x61]
 100688c:	80 f9 19             	cmp    cl,0x19
 100688f:	77 08                	ja     1006899 <fatfs_lfn_create_sfn+0x101>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:340
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
 1006891:	83 ea 20             	sub    edx,0x20
 1006894:	88 14 07             	mov    BYTE PTR [edi+eax*1],dl
 1006897:	eb 03                	jmp    100689c <fatfs_lfn_create_sfn+0x104>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:342
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
 1006899:	88 14 07             	mov    BYTE PTR [edi+eax*1],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:337 (discriminator 2)
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
 100689c:	83 c0 01             	add    eax,0x1
 100689f:	83 f8 0b             	cmp    eax,0xb
 10068a2:	75 e0                	jne    1006884 <fatfs_lfn_create_sfn+0xec>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:345
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
 10068a4:	b8 01 00 00 00       	mov    eax,0x1
 10068a9:	eb 10                	jmp    10068bb <fatfs_lfn_create_sfn+0x123>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:308
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
 10068ab:	83 f8 ff             	cmp    eax,0xffffffff
 10068ae:	0f 85 54 ff ff ff    	jne    1006808 <fatfs_lfn_create_sfn+0x70>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:291
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
 10068b4:	89 e8                	mov    eax,ebp
 10068b6:	e9 7c ff ff ff       	jmp    1006837 <fatfs_lfn_create_sfn+0x9f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:346
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
}
 10068bb:	83 c4 2c             	add    esp,0x2c
 10068be:	5b                   	pop    ebx
 10068bf:	5e                   	pop    esi
 10068c0:	5f                   	pop    edi
 10068c1:	5d                   	pop    ebp
 10068c2:	c3                   	ret    

010068c3 <fatfs_lfn_generate_tail>:
fatfs_lfn_generate_tail():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:381
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
 10068c3:	57                   	push   edi
 10068c4:	56                   	push   esi
 10068c5:	53                   	push   ebx
 10068c6:	83 ec 30             	sub    esp,0x30
 10068c9:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:386
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
        return 0;
 10068cd:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:385
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
 10068d2:	81 fb 9f 86 01 00    	cmp    ebx,0x1869f
 10068d8:	0f 87 d8 00 00 00    	ja     10069b6 <fatfs_lfn_generate_tail+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:389
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
 10068de:	83 ec 04             	sub    esp,0x4
 10068e1:	6a 0c                	push   0xc
 10068e3:	6a 00                	push   0x0
 10068e5:	8d 44 24 30          	lea    eax,[esp+0x30]
 10068e9:	50                   	push   eax
 10068ea:	e8 d0 25 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:390
    tail_str[0] = '~';
 10068ef:	c6 44 24 34 7e       	mov    BYTE PTR [esp+0x34],0x7e
fatfs_itoa():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:354
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
 10068f4:	c7 44 24 23 30 31 32 	mov    DWORD PTR [esp+0x23],0x33323130
 10068fb:	33 
 10068fc:	c7 44 24 27 34 35 36 	mov    DWORD PTR [esp+0x27],0x37363534
 1006903:	37 
 1006904:	c7 44 24 2b 38 39 41 	mov    DWORD PTR [esp+0x2b],0x42413938
 100690b:	42 
 100690c:	c7 44 24 2f 43 44 45 	mov    DWORD PTR [esp+0x2f],0x46454443
 1006913:	46 
 1006914:	c6 44 24 33 00       	mov    BYTE PTR [esp+0x33],0x0
 1006919:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:357

    // Build string backwards
    cp = outbuf;
 100691c:	8d 74 24 07          	lea    esi,[esp+0x7]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:360
    do
    {
        *cp++ = digits[(int)(num % 10)];
 1006920:	bf cd cc cc cc       	mov    edi,0xcccccccd
 1006925:	eb 02                	jmp    1006929 <fatfs_lfn_generate_tail+0x66>
 1006927:	89 ce                	mov    esi,ecx
 1006929:	8d 4e 01             	lea    ecx,[esi+0x1]
 100692c:	89 d8                	mov    eax,ebx
 100692e:	f7 e7                	mul    edi
 1006930:	c1 ea 03             	shr    edx,0x3
 1006933:	8d 04 92             	lea    eax,[edx+edx*4]
 1006936:	01 c0                	add    eax,eax
 1006938:	29 c3                	sub    ebx,eax
 100693a:	0f b6 44 1c 13       	movzx  eax,BYTE PTR [esp+ebx*1+0x13]
 100693f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:362
    }
    while ((num /= 10) > 0);
 1006942:	89 d3                	mov    ebx,edx
 1006944:	85 d2                	test   edx,edx
 1006946:	75 df                	jne    1006927 <fatfs_lfn_generate_tail+0x64>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:364

    *cp-- = 0;
 1006948:	c6 46 01 00          	mov    BYTE PTR [esi+0x1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:367

    // Copy in forwards
    while (cp >= outbuf)
 100694c:	8d 44 24 07          	lea    eax,[esp+0x7]
 1006950:	39 c6                	cmp    esi,eax
 1006952:	72 20                	jb     1006974 <fatfs_lfn_generate_tail+0xb1>
 1006954:	89 f0                	mov    eax,esi
 1006956:	8d 54 24 25          	lea    edx,[esp+0x25]
 100695a:	8d 5c 24 06          	lea    ebx,[esp+0x6]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:368
        *s++ = *cp--;
 100695e:	83 c2 01             	add    edx,0x1
 1006961:	83 e8 01             	sub    eax,0x1
 1006964:	0f b6 48 01          	movzx  ecx,BYTE PTR [eax+0x1]
 1006968:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:367
    while ((num /= 10) > 0);

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
 100696b:	39 d8                	cmp    eax,ebx
 100696d:	75 ef                	jne    100695e <fatfs_lfn_generate_tail+0x9b>
 100696f:	8d 46 1f             	lea    eax,[esi+0x1f]
 1006972:	eb 04                	jmp    1006978 <fatfs_lfn_generate_tail+0xb5>
 1006974:	8d 44 24 25          	lea    eax,[esp+0x25]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:370
        *s++ = *cp--;

    *s = 0;
 1006978:	c6 00 00             	mov    BYTE PTR [eax],0x0
fatfs_lfn_generate_tail():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:394
    memset(tail_str, 0x00, sizeof(tail_str));
    tail_str[0] = '~';
    fatfs_itoa(tailNum, tail_str+1);

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
 100697b:	83 ec 04             	sub    esp,0x4
 100697e:	6a 0b                	push   0xb
 1006980:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 1006984:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 1006988:	e8 e3 2c 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:397

    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
 100698d:	83 c4 04             	add    esp,0x4
 1006990:	8d 5c 24 30          	lea    ebx,[esp+0x30]
 1006994:	53                   	push   ebx
 1006995:	e8 62 33 00 00       	call   1009cfc <strlen>
 100699a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:398
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
 100699d:	50                   	push   eax
 100699e:	53                   	push   ebx
 100699f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
 10069a3:	29 c7                	sub    edi,eax
 10069a5:	8d 47 08             	lea    eax,[edi+0x8]
 10069a8:	50                   	push   eax
 10069a9:	e8 c2 2c 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:400

    return 1;
 10069ae:	83 c4 10             	add    esp,0x10
 10069b1:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:401
}
 10069b6:	83 c4 30             	add    esp,0x30
 10069b9:	5b                   	pop    ebx
 10069ba:	5e                   	pop    esi
 10069bb:	5f                   	pop    edi
 10069bc:	c3                   	ret    

010069bd <fatfs_convert_from_fat_time>:
fatfs_convert_from_fat_time():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:409
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_time: Convert FAT time to h/m/s
//-----------------------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds)
{
 10069bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:410
    *hours = (fat_time >> FAT_TIME_HOURS_SHIFT) & FAT_TIME_HOURS_MASK;
 10069c1:	89 c2                	mov    edx,eax
 10069c3:	66 c1 ea 0b          	shr    dx,0xb
 10069c7:	0f b7 d2             	movzx  edx,dx
 10069ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
 10069ce:	89 11                	mov    DWORD PTR [ecx],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:411
    *minutes = (fat_time >> FAT_TIME_MINUTES_SHIFT) & FAT_TIME_MINUTES_MASK;
 10069d0:	89 c2                	mov    edx,eax
 10069d2:	66 c1 ea 05          	shr    dx,0x5
 10069d6:	83 e2 3f             	and    edx,0x3f
 10069d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
 10069dd:	89 11                	mov    DWORD PTR [ecx],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:413
    *seconds = (fat_time >> FAT_TIME_SECONDS_SHIFT) & FAT_TIME_SECONDS_MASK;
    *seconds = *seconds * FAT_TIME_SECONDS_SCALE;
 10069df:	83 e0 1f             	and    eax,0x1f
 10069e2:	01 c0                	add    eax,eax
 10069e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 10069e8:	89 02                	mov    DWORD PTR [edx],eax
 10069ea:	c3                   	ret    

010069eb <fatfs_convert_from_fat_date>:
fatfs_convert_from_fat_date():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:419
}
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_date: Convert FAT date to d/m/y
//-----------------------------------------------------------------------------
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year)
{
 10069eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:420
    *day = (fat_date >> FAT_DATE_DAY_SHIFT) & FAT_DATE_DAY_MASK;
 10069ef:	89 c1                	mov    ecx,eax
 10069f1:	83 e1 1f             	and    ecx,0x1f
 10069f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 10069f8:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:421
    *month = (fat_date >> FAT_DATE_MONTH_SHIFT) & FAT_DATE_MONTH_MASK;
 10069fa:	89 c2                	mov    edx,eax
 10069fc:	66 c1 ea 05          	shr    dx,0x5
 1006a00:	83 e2 0f             	and    edx,0xf
 1006a03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
 1006a07:	89 11                	mov    DWORD PTR [ecx],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:423
    *year = (fat_date >> FAT_DATE_YEAR_SHIFT) & FAT_DATE_YEAR_MASK;
    *year = *year + FAT_DATE_YEAR_OFFSET;
 1006a09:	66 c1 e8 09          	shr    ax,0x9
 1006a0d:	0f b7 c0             	movzx  eax,ax
 1006a10:	05 bc 07 00 00       	add    eax,0x7bc
 1006a15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 1006a19:	89 02                	mov    DWORD PTR [edx],eax
 1006a1b:	c3                   	ret    

01006a1c <fatfs_convert_to_fat_time>:
fatfs_convert_to_fat_time():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:429
}
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_time: Convert h/m/s to FAT time
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds)
{
 1006a1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:439

    fat_time = (hours & FAT_TIME_HOURS_MASK) << FAT_TIME_HOURS_SHIFT;
    fat_time|= (minutes & FAT_TIME_MINUTES_MASK) << FAT_TIME_MINUTES_SHIFT;
    fat_time|= (seconds & FAT_TIME_SECONDS_MASK) << FAT_TIME_SECONDS_SHIFT;

    return fat_time;
 1006a20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1006a24:	83 e0 3f             	and    eax,0x3f
 1006a27:	c1 e0 05             	shl    eax,0x5
 1006a2a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
 1006a2e:	c1 e1 0b             	shl    ecx,0xb
 1006a31:	09 c8                	or     eax,ecx
 1006a33:	89 d1                	mov    ecx,edx
 1006a35:	c1 e9 1f             	shr    ecx,0x1f
 1006a38:	01 ca                	add    edx,ecx
 1006a3a:	d1 fa                	sar    edx,1
 1006a3c:	83 e2 1f             	and    edx,0x1f
 1006a3f:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:440
}
 1006a41:	c3                   	ret    

01006a42 <fatfs_convert_to_fat_date>:
fatfs_convert_to_fat_date():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:445
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_date: Convert d/m/y to FAT date
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_date(int day, int month, int year)
{
 1006a42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:450
    uint16 fat_date = 0;

    // FAT dates are relative to 1980
    if (year >= FAT_DATE_YEAR_OFFSET)
        year -= FAT_DATE_YEAR_OFFSET;
 1006a46:	8d 82 44 f8 ff ff    	lea    eax,[edx-0x7bc]
 1006a4c:	81 fa bc 07 00 00    	cmp    edx,0x7bc
 1006a52:	0f 4d d0             	cmovge edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:454

    fat_date = (day & FAT_DATE_DAY_MASK) << FAT_DATE_DAY_SHIFT;
    fat_date|= (month & FAT_DATE_MONTH_MASK) << FAT_DATE_MONTH_SHIFT;
    fat_date|= (year & FAT_DATE_YEAR_MASK) << FAT_DATE_YEAR_SHIFT;
 1006a55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1006a59:	83 e0 0f             	and    eax,0xf
 1006a5c:	c1 e0 05             	shl    eax,0x5
 1006a5f:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
 1006a64:	83 e1 1f             	and    ecx,0x1f
 1006a67:	09 c8                	or     eax,ecx
 1006a69:	c1 e2 09             	shl    edx,0x9
 1006a6c:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_misc.c:457

    return fat_date;
}
 1006a6e:	c3                   	ret    
 1006a6f:	90                   	nop

01006a70 <FileString_StrCmpNoCase>:
FileString_StrCmpNoCase():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:183
}
//-----------------------------------------------------------------------------
// FileString_StrCmpNoCase: Compare two strings case with case sensitivity
//-----------------------------------------------------------------------------
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
 1006a70:	55                   	push   ebp
 1006a71:	57                   	push   edi
 1006a72:	56                   	push   esi
 1006a73:	53                   	push   ebx
 1006a74:	83 ec 0c             	sub    esp,0xc
 1006a77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 1006a7b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:187
    int diff;
    char a,b;

    while (n--)
 1006a7f:	85 c9                	test   ecx,ecx
 1006a81:	74 54                	je     1006ad7 <FileString_StrCmpNoCase+0x67>
 1006a83:	89 d7                	mov    edi,edx
 1006a85:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:189
    {
        a = *s1;
 1006a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1006a8e:	0f b6 1c 30          	movzx  ebx,BYTE PTR [eax+esi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:190
        b = *s2;
 1006a92:	0f b6 0c 37          	movzx  ecx,BYTE PTR [edi+esi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:193

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
 1006a96:	8d 53 bf             	lea    edx,[ebx-0x41]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:194
            a+= 32;
 1006a99:	8d 43 20             	lea    eax,[ebx+0x20]
 1006a9c:	80 fa 19             	cmp    dl,0x19
 1006a9f:	0f 47 c3             	cmova  eax,ebx
 1006aa2:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:195
        if ((b>='A') && (b<='Z'))
 1006aa6:	8d 69 bf             	lea    ebp,[ecx-0x41]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:196
            b+= 32;
 1006aa9:	8d 51 20             	lea    edx,[ecx+0x20]
 1006aac:	89 e8                	mov    eax,ebp
 1006aae:	3c 19                	cmp    al,0x19
 1006ab0:	0f 47 d1             	cmova  edx,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:198

        diff = a - b;
 1006ab3:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
 1006ab8:	0f be d2             	movsx  edx,dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:201

        // If different
        if (diff)
 1006abb:	29 d0                	sub    eax,edx
 1006abd:	75 24                	jne    1006ae3 <FileString_StrCmpNoCase+0x73>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:205 (discriminator 1)
            return diff;

        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
 1006abf:	84 c9                	test   cl,cl
 1006ac1:	74 1b                	je     1006ade <FileString_StrCmpNoCase+0x6e>
 1006ac3:	84 db                	test   bl,bl
 1006ac5:	74 17                	je     1006ade <FileString_StrCmpNoCase+0x6e>
 1006ac7:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:187
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
 1006aca:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
 1006ace:	75 ba                	jne    1006a8a <FileString_StrCmpNoCase+0x1a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:211
            break;

        s1++;
        s2++;
    }
    return 0;
 1006ad0:	b8 00 00 00 00       	mov    eax,0x0
 1006ad5:	eb 0c                	jmp    1006ae3 <FileString_StrCmpNoCase+0x73>
 1006ad7:	b8 00 00 00 00       	mov    eax,0x0
 1006adc:	eb 05                	jmp    1006ae3 <FileString_StrCmpNoCase+0x73>
 1006ade:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:212
}
 1006ae3:	83 c4 0c             	add    esp,0xc
 1006ae6:	5b                   	pop    ebx
 1006ae7:	5e                   	pop    esi
 1006ae8:	5f                   	pop    edi
 1006ae9:	5d                   	pop    ebp
 1006aea:	c3                   	ret    

01006aeb <FileString_GetExtension>:
FileString_GetExtension():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:218
//-----------------------------------------------------------------------------
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
 1006aeb:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:223
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
 1006aec:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1006aef:	84 d2                	test   dl,dl
 1006af1:	74 1d                	je     1006b10 <FileString_GetExtension+0x25>
 1006af3:	b9 00 00 00 00       	mov    ecx,0x0
 1006af8:	bb ff ff ff ff       	mov    ebx,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:225
    {
        if (*strSrc=='.')
 1006afd:	80 fa 2e             	cmp    dl,0x2e
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:226
            dotPos = (int)(strSrc-str);
 1006b00:	0f 44 d9             	cmove  ebx,ecx
 1006b03:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:223
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
 1006b06:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
 1006b0a:	84 d2                	test   dl,dl
 1006b0c:	75 ef                	jne    1006afd <FileString_GetExtension+0x12>
 1006b0e:	eb 05                	jmp    1006b15 <FileString_GetExtension+0x2a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:219
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
    int dotPos = -1;
 1006b10:	bb ff ff ff ff       	mov    ebx,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:232

        strSrc++;
    }

    return dotPos;
}
 1006b15:	89 d8                	mov    eax,ebx
 1006b17:	5b                   	pop    ebx
 1006b18:	c3                   	ret    

01006b19 <fatfs_total_path_levels>:
fatfs_total_path_levels():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:45
//        c:\folder\file.zip
//        /dev/etc/samba.conf
// Returns: -1 = Error, 0 or more = Ok
//-----------------------------------------------------------------------------
int fatfs_total_path_levels(char *path)
{
 1006b19:	56                   	push   esi
 1006b1a:	53                   	push   ebx
 1006b1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:49
    int levels = 0;
    char expectedchar;

    if (!path)
 1006b1f:	85 c0                	test   eax,eax
 1006b21:	74 5e                	je     1006b81 <fatfs_total_path_levels+0x68>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:55
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
 1006b23:	80 38 2f             	cmp    BYTE PTR [eax],0x2f
 1006b26:	75 16                	jne    1006b3e <fatfs_total_path_levels+0x25>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:58
    {
        expectedchar = '/';
        path++;
 1006b28:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:57
    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
 1006b2b:	b9 2f 00 00 00       	mov    ecx,0x2f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:69
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
 1006b30:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1006b33:	bb 00 00 00 00       	mov    ebx,0x0
 1006b38:	84 d2                	test   dl,dl
 1006b3a:	75 3a                	jne    1006b76 <fatfs_total_path_levels+0x5d>
 1006b3c:	eb 3e                	jmp    1006b7c <fatfs_total_path_levels+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:60
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
 1006b3e:	80 78 01 3a          	cmp    BYTE PTR [eax+0x1],0x3a
 1006b42:	74 06                	je     1006b4a <fatfs_total_path_levels+0x31>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:60 (discriminator 1)
 1006b44:	80 78 02 5c          	cmp    BYTE PTR [eax+0x2],0x5c
 1006b48:	75 3e                	jne    1006b88 <fatfs_total_path_levels+0x6f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:63
    {
        expectedchar = '\\';
        path += 3;
 1006b4a:	83 c0 03             	add    eax,0x3
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:62
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
    {
        expectedchar = '\\';
 1006b4d:	b9 5c 00 00 00       	mov    ecx,0x5c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:63
        path += 3;
 1006b52:	eb dc                	jmp    1006b30 <fatfs_total_path_levels+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
 1006b54:	38 d1                	cmp    cl,dl
 1006b56:	75 10                	jne    1006b68 <fatfs_total_path_levels+0x4f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:75 (discriminator 1)
 1006b58:	8d 70 01             	lea    esi,[eax+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:80 (discriminator 1)
            path++;
        }

        // Increase number of subdirs founds
        levels++;
 1006b5b:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:69 (discriminator 1)
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
 1006b5e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
 1006b62:	84 d2                	test   dl,dl
 1006b64:	75 0e                	jne    1006b74 <fatfs_total_path_levels+0x5b>
 1006b66:	eb 14                	jmp    1006b7c <fatfs_total_path_levels+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:76
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
            path++;
 1006b68:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:72

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
 1006b6b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1006b6e:	84 d2                	test   dl,dl
 1006b70:	75 e2                	jne    1006b54 <fatfs_total_path_levels+0x3b>
 1006b72:	eb 1b                	jmp    1006b8f <fatfs_total_path_levels+0x76>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:57
    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
 1006b74:	89 f0                	mov    eax,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
 1006b76:	38 d1                	cmp    cl,dl
 1006b78:	75 ee                	jne    1006b68 <fatfs_total_path_levels+0x4f>
 1006b7a:	eb 18                	jmp    1006b94 <fatfs_total_path_levels+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:84
        // Increase number of subdirs founds
        levels++;
    }

    // Subtract the file itself
    return levels-1;
 1006b7c:	8d 43 ff             	lea    eax,[ebx-0x1]
 1006b7f:	eb 23                	jmp    1006ba4 <fatfs_total_path_levels+0x8b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:50
{
    int levels = 0;
    char expectedchar;

    if (!path)
        return -1;
 1006b81:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1006b86:	eb 1c                	jmp    1006ba4 <fatfs_total_path_levels+0x8b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:66
    {
        expectedchar = '\\';
        path += 3;
    }
    else
        return -1;
 1006b88:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1006b8d:	eb 15                	jmp    1006ba4 <fatfs_total_path_levels+0x8b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:80
            if (*path == expectedchar) { path++; break; }
            path++;
        }

        // Increase number of subdirs founds
        levels++;
 1006b8f:	83 c3 01             	add    ebx,0x1
 1006b92:	eb e8                	jmp    1006b7c <fatfs_total_path_levels+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
 1006b94:	8d 70 01             	lea    esi,[eax+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:80
            path++;
        }

        // Increase number of subdirs founds
        levels++;
 1006b97:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:69
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
 1006b9a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
 1006b9e:	84 d2                	test   dl,dl
 1006ba0:	75 d2                	jne    1006b74 <fatfs_total_path_levels+0x5b>
 1006ba2:	eb d8                	jmp    1006b7c <fatfs_total_path_levels+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:85
        levels++;
    }

    // Subtract the file itself
    return levels-1;
}
 1006ba4:	5b                   	pop    ebx
 1006ba5:	5e                   	pop    esi
 1006ba6:	c3                   	ret    

01006ba7 <fatfs_get_substring>:
fatfs_get_substring():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:93
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
 1006ba7:	55                   	push   ebp
 1006ba8:	57                   	push   edi
 1006ba9:	56                   	push   esi
 1006baa:	53                   	push   ebx
 1006bab:	83 ec 1c             	sub    esp,0x1c
 1006bae:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
 1006bb2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
 1006bb6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:100
    int pathlen=0;
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
 1006bba:	85 db                	test   ebx,ebx
 1006bbc:	0f 84 b4 00 00 00    	je     1006c76 <fatfs_get_substring+0xcf>
 1006bc2:	85 ed                	test   ebp,ebp
 1006bc4:	0f 8e ac 00 00 00    	jle    1006c76 <fatfs_get_substring+0xcf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:106
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
 1006bca:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
 1006bcd:	75 0a                	jne    1006bd9 <fatfs_get_substring+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:109
    {
        expectedchar = '/';
        path++;
 1006bcf:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:108
    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
 1006bd2:	be 2f 00 00 00       	mov    esi,0x2f
 1006bd7:	eb 18                	jmp    1006bf1 <fatfs_get_substring+0x4a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:111
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
 1006bd9:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
 1006bdd:	74 0a                	je     1006be9 <fatfs_get_substring+0x42>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:111 (discriminator 1)
 1006bdf:	80 7b 02 5c          	cmp    BYTE PTR [ebx+0x2],0x5c
 1006be3:	0f 85 94 00 00 00    	jne    1006c7d <fatfs_get_substring+0xd6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:114
    {
        expectedchar = '\\';
        path += 3;
 1006be9:	83 c3 03             	add    ebx,0x3
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:113
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
    {
        expectedchar = '\\';
 1006bec:	be 5c 00 00 00       	mov    esi,0x5c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:120
    }
    else
        return -1;

    // Get string length of path
    pathlen = (int)strlen (path);
 1006bf1:	83 ec 0c             	sub    esp,0xc
 1006bf4:	53                   	push   ebx
 1006bf5:	e8 02 31 00 00       	call   1009cfc <strlen>
 1006bfa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:123

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
 1006bfd:	85 c0                	test   eax,eax
 1006bff:	7e 54                	jle    1006c55 <fatfs_get_substring+0xae>
 1006c01:	01 d8                	add    eax,ebx
 1006c03:	c7 44 24 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
 1006c0a:	00 
 1006c0b:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:129
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
 1006c10:	8d 4d ff             	lea    ecx,[ebp-0x1]
 1006c13:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
 1006c17:	bd 00 00 00 00       	mov    ebp,0x0
 1006c1c:	89 c1                	mov    ecx,eax
 1006c1e:	89 f0                	mov    eax,esi
 1006c20:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
 1006c24:	89 ce                	mov    esi,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:126

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
 1006c26:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
 1006c29:	38 c8                	cmp    al,cl
 1006c2b:	75 05                	jne    1006c32 <fatfs_get_substring+0x8b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:126 (discriminator 1)
 1006c2d:	83 c2 01             	add    edx,0x1
 1006c30:	eb 16                	jmp    1006c48 <fatfs_get_substring+0xa1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:129

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
 1006c32:	39 54 24 34          	cmp    DWORD PTR [esp+0x34],edx
 1006c36:	75 10                	jne    1006c48 <fatfs_get_substring+0xa1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:129 (discriminator 2)
 1006c38:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
 1006c3c:	7e 0a                	jle    1006c48 <fatfs_get_substring+0xa1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:130
            output[copypnt++] = *path;
 1006c3e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
 1006c42:	88 0c 2f             	mov    BYTE PTR [edi+ebp*1],cl
 1006c45:	8d 6d 01             	lea    ebp,[ebp+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:133 (discriminator 2)

        // Increment through path string
        path++;
 1006c48:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:123 (discriminator 2)

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
 1006c4b:	39 f3                	cmp    ebx,esi
 1006c4d:	75 d7                	jne    1006c26 <fatfs_get_substring+0x7f>
 1006c4f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
 1006c53:	eb 08                	jmp    1006c5d <fatfs_get_substring+0xb6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:97
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
    int i;
    int pathlen=0;
    int levels=0;
    int copypnt=0;
 1006c55:	c7 44 24 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
 1006c5c:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:137
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
 1006c5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 1006c61:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
 1006c65:	c6 04 38 00          	mov    BYTE PTR [eax+edi*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:140

    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
 1006c69:	80 38 00             	cmp    BYTE PTR [eax],0x0
 1006c6c:	0f 94 c0             	sete   al
 1006c6f:	0f b6 c0             	movzx  eax,al
 1006c72:	f7 d8                	neg    eax
 1006c74:	eb 0c                	jmp    1006c82 <fatfs_get_substring+0xdb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:101
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
        return -1;
 1006c76:	b8 ff ff ff ff       	mov    eax,0xffffffff
 1006c7b:	eb 05                	jmp    1006c82 <fatfs_get_substring+0xdb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:117
    {
        expectedchar = '\\';
        path += 3;
    }
    else
        return -1;
 1006c7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:144
    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
        return 0;    // OK
    else
        return -1;    // Error
}
 1006c82:	83 c4 1c             	add    esp,0x1c
 1006c85:	5b                   	pop    ebx
 1006c86:	5e                   	pop    esi
 1006c87:	5f                   	pop    edi
 1006c88:	5d                   	pop    ebp
 1006c89:	c3                   	ret    

01006c8a <fatfs_split_path>:
fatfs_split_path():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:152
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
 1006c8a:	55                   	push   ebp
 1006c8b:	57                   	push   edi
 1006c8c:	56                   	push   esi
 1006c8d:	53                   	push   ebx
 1006c8e:	83 ec 0c             	sub    esp,0xc
 1006c91:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
 1006c95:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:156
    int strindex;

    // Count the levels to the filepath
    int levels = fatfs_total_path_levels(full_path);
 1006c99:	56                   	push   esi
 1006c9a:	e8 7a fe ff ff       	call   1006b19 <fatfs_total_path_levels>
 1006c9f:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:157
    if (levels == -1)
 1006ca2:	83 f8 ff             	cmp    eax,0xffffffff
 1006ca5:	74 5e                	je     1006d05 <fatfs_split_path+0x7b>
 1006ca7:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:161
        return -1;

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
 1006ca9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 1006cad:	55                   	push   ebp
 1006cae:	50                   	push   eax
 1006caf:	56                   	push   esi
 1006cb0:	e8 f2 fe ff ff       	call   1006ba7 <fatfs_get_substring>
 1006cb5:	89 c7                	mov    edi,eax
 1006cb7:	83 c4 10             	add    esp,0x10
 1006cba:	85 c0                	test   eax,eax
 1006cbc:	75 4e                	jne    1006d0c <fatfs_split_path+0x82>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:165
        return -1;

    // If root file
    if (levels == 0)
 1006cbe:	85 db                	test   ebx,ebx
 1006cc0:	75 09                	jne    1006ccb <fatfs_split_path+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:166
        path[0] = '\0';
 1006cc2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
 1006cc6:	c6 00 00             	mov    BYTE PTR [eax],0x0
 1006cc9:	eb 46                	jmp    1006d11 <fatfs_split_path+0x87>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:169
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
 1006ccb:	83 ec 0c             	sub    esp,0xc
 1006cce:	56                   	push   esi
 1006ccf:	e8 28 30 00 00       	call   1009cfc <strlen>
 1006cd4:	89 c3                	mov    ebx,eax
 1006cd6:	89 2c 24             	mov    DWORD PTR [esp],ebp
 1006cd9:	e8 1e 30 00 00       	call   1009cfc <strlen>
 1006cde:	83 c4 0c             	add    esp,0xc
 1006ce1:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:173
        if (strindex > max_path)
            strindex = max_path;

        memcpy(path, full_path, strindex);
 1006ce3:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
 1006ce7:	0f 4f 5c 24 2c       	cmovg  ebx,DWORD PTR [esp+0x2c]
 1006cec:	53                   	push   ebx
 1006ced:	56                   	push   esi
 1006cee:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 1006cf2:	e8 79 29 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:174
        path[strindex-1] = '\0';
 1006cf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 1006cfb:	c6 44 18 ff 00       	mov    BYTE PTR [eax+ebx*1-0x1],0x0
 1006d00:	83 c4 10             	add    esp,0x10
 1006d03:	eb 0c                	jmp    1006d11 <fatfs_split_path+0x87>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:158
    int strindex;

    // Count the levels to the filepath
    int levels = fatfs_total_path_levels(full_path);
    if (levels == -1)
        return -1;
 1006d05:	bf ff ff ff ff       	mov    edi,0xffffffff
 1006d0a:	eb 05                	jmp    1006d11 <fatfs_split_path+0x87>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:162

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
        return -1;
 1006d0c:	bf ff ff ff ff       	mov    edi,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:178
        memcpy(path, full_path, strindex);
        path[strindex-1] = '\0';
    }

    return 0;
}
 1006d11:	89 f8                	mov    eax,edi
 1006d13:	83 c4 0c             	add    esp,0xc
 1006d16:	5b                   	pop    ebx
 1006d17:	5e                   	pop    esi
 1006d18:	5f                   	pop    edi
 1006d19:	5d                   	pop    ebp
 1006d1a:	c3                   	ret    

01006d1b <fatfs_compare_names>:
fatfs_compare_names():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:261
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
 1006d1b:	55                   	push   ebp
 1006d1c:	57                   	push   edi
 1006d1d:	56                   	push   esi
 1006d1e:	53                   	push   ebx
 1006d1f:	83 ec 1c             	sub    esp,0x1c
 1006d22:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
 1006d26:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:268
    char *ext2 = NULL;
    int ext1Pos, ext2Pos;
    int file1Len, file2Len;

    // Get both files extension
    ext1Pos = FileString_GetExtension(strA);
 1006d2a:	89 f8                	mov    eax,edi
 1006d2c:	e8 ba fd ff ff       	call   1006aeb <FileString_GetExtension>
 1006d31:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:269
    ext2Pos = FileString_GetExtension(strB);
 1006d33:	89 e8                	mov    eax,ebp
 1006d35:	e8 b1 fd ff ff       	call   1006aeb <FileString_GetExtension>
 1006d3a:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:274

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
 1006d3c:	83 fb ff             	cmp    ebx,0xffffffff
 1006d3f:	75 0e                	jne    1006d4f <fatfs_compare_names+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:275
        return 0;
 1006d41:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:274
    ext2Pos = FileString_GetExtension(strB);

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
 1006d46:	83 fe ff             	cmp    esi,0xffffffff
 1006d49:	0f 85 22 01 00 00    	jne    1006e71 <fatfs_compare_names+0x156>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:276
        return 0;
    if ((ext2Pos==-1) && (ext1Pos!=-1))
 1006d4f:	83 fe ff             	cmp    esi,0xffffffff
 1006d52:	75 0e                	jne    1006d62 <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:277
        return 0;
 1006d54:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:276
    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
        return 0;
    if ((ext2Pos==-1) && (ext1Pos!=-1))
 1006d59:	83 fb ff             	cmp    ebx,0xffffffff
 1006d5c:	0f 85 0f 01 00 00    	jne    1006e71 <fatfs_compare_names+0x156>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:280
        return 0;

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
 1006d62:	83 fb ff             	cmp    ebx,0xffffffff
 1006d65:	74 5e                	je     1006dc5 <fatfs_compare_names+0xaa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:283
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
 1006d67:	8d 44 1f 01          	lea    eax,[edi+ebx*1+0x1]
 1006d6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:284
        ext2 = strB+ext2Pos+1;
 1006d6f:	8d 4c 35 01          	lea    ecx,[ebp+esi*1+0x1]
 1006d73:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:287

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
 1006d77:	83 ec 0c             	sub    esp,0xc
 1006d7a:	50                   	push   eax
 1006d7b:	e8 7c 2f 00 00       	call   1009cfc <strlen>
 1006d80:	83 c4 04             	add    esp,0x4
 1006d83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
 1006d87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1006d8b:	e8 6c 2f 00 00       	call   1009cfc <strlen>
 1006d90:	83 c4 10             	add    esp,0x10
 1006d93:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:288
            return 0;
 1006d95:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:287
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
        ext2 = strB+ext2Pos+1;

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
 1006d9a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
 1006d9e:	0f 85 cd 00 00 00    	jne    1006e71 <fatfs_compare_names+0x156>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:291
            return 0;

        // If they dont match
        if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
 1006da4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
 1006da8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
 1006dac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1006db0:	e8 bb fc ff ff       	call   1006a70 <FileString_StrCmpNoCase>
 1006db5:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:292
            return 0;
 1006db7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:291
        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
            return 0;

        // If they dont match
        if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
 1006dbc:	85 d2                	test   edx,edx
 1006dbe:	74 1d                	je     1006ddd <fatfs_compare_names+0xc2>
 1006dc0:	e9 ac 00 00 00       	jmp    1006e71 <fatfs_compare_names+0x156>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:302
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
 1006dc5:	83 ec 0c             	sub    esp,0xc
 1006dc8:	57                   	push   edi
 1006dc9:	e8 2e 2f 00 00       	call   1009cfc <strlen>
 1006dce:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:303
        file2Len = (int)strlen(strB);
 1006dd0:	89 2c 24             	mov    DWORD PTR [esp],ebp
 1006dd3:	e8 24 2f 00 00       	call   1009cfc <strlen>
 1006dd8:	83 c4 10             	add    esp,0x10
 1006ddb:	89 c6                	mov    esi,eax
FileString_TrimLength():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:240
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
 1006ddd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
 1006de1:	8d 43 ff             	lea    eax,[ebx-0x1]
 1006de4:	8d 0c 07             	lea    ecx,[edi+eax*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
 1006de7:	85 db                	test   ebx,ebx
 1006de9:	74 6d                	je     1006e58 <fatfs_compare_names+0x13d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:245
    {
        if (*strSrc == ' ')
 1006deb:	80 39 20             	cmp    BYTE PTR [ecx],0x20
 1006dee:	75 74                	jne    1006e64 <fatfs_compare_names+0x149>
 1006df0:	ba 01 00 00 00       	mov    edx,0x1
 1006df5:	29 fa                	sub    edx,edi
 1006df7:	29 da                	sub    edx,ebx
 1006df9:	01 ca                	add    edx,ecx
 1006dfb:	eb 09                	jmp    1006e06 <fatfs_compare_names+0xeb>
 1006dfd:	83 e8 01             	sub    eax,0x1
 1006e00:	80 3c 07 20          	cmp    BYTE PTR [edi+eax*1],0x20
 1006e04:	75 06                	jne    1006e0c <fatfs_compare_names+0xf1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:246
            length = (int)(strSrc - str);
 1006e06:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
 1006e08:	39 d0                	cmp    eax,edx
 1006e0a:	75 f1                	jne    1006dfd <fatfs_compare_names+0xe2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:240
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
 1006e0c:	8d 4c 35 ff          	lea    ecx,[ebp+esi*1-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
 1006e10:	85 f6                	test   esi,esi
 1006e12:	74 26                	je     1006e3a <fatfs_compare_names+0x11f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:245
    {
        if (*strSrc == ' ')
 1006e14:	80 39 20             	cmp    BYTE PTR [ecx],0x20
 1006e17:	75 21                	jne    1006e3a <fatfs_compare_names+0x11f>
 1006e19:	89 c8                	mov    eax,ecx
 1006e1b:	29 e8                	sub    eax,ebp
 1006e1d:	ba 01 00 00 00       	mov    edx,0x1
 1006e22:	29 ea                	sub    edx,ebp
 1006e24:	29 f2                	sub    edx,esi
 1006e26:	01 ca                	add    edx,ecx
 1006e28:	eb 0a                	jmp    1006e34 <fatfs_compare_names+0x119>
 1006e2a:	83 e8 01             	sub    eax,0x1
 1006e2d:	80 7c 05 00 20       	cmp    BYTE PTR [ebp+eax*1+0x0],0x20
 1006e32:	75 06                	jne    1006e3a <fatfs_compare_names+0x11f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:246
            length = (int)(strSrc - str);
 1006e34:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
 1006e36:	39 d0                	cmp    eax,edx
 1006e38:	75 f0                	jne    1006e2a <fatfs_compare_names+0x10f>
fatfs_compare_names():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:312
    file1Len = FileString_TrimLength(strA, file1Len);
    file2Len = FileString_TrimLength(strB, file2Len);

    // Check the file lengths match
    if (file1Len!=file2Len)
        return 0;
 1006e3a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:311
    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
    file2Len = FileString_TrimLength(strB, file2Len);

    // Check the file lengths match
    if (file1Len!=file2Len)
 1006e3f:	39 de                	cmp    esi,ebx
 1006e41:	75 2e                	jne    1006e71 <fatfs_compare_names+0x156>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:315
        return 0;

    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
 1006e43:	89 d9                	mov    ecx,ebx
 1006e45:	89 ea                	mov    edx,ebp
 1006e47:	89 f8                	mov    eax,edi
 1006e49:	e8 22 fc ff ff       	call   1006a70 <FileString_StrCmpNoCase>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:275

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
        return 0;
 1006e4e:	85 c0                	test   eax,eax
 1006e50:	0f 94 c0             	sete   al
 1006e53:	0f b6 c0             	movzx  eax,al
 1006e56:	eb 19                	jmp    1006e71 <fatfs_compare_names+0x156>
FileString_TrimLength():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:240
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
 1006e58:	8d 4c 35 ff          	lea    ecx,[ebp+esi*1-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
 1006e5c:	85 f6                	test   esi,esi
 1006e5e:	75 b4                	jne    1006e14 <fatfs_compare_names+0xf9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:239
// FileString_TrimLength: Get length of string excluding trailing spaces
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
 1006e60:	89 f3                	mov    ebx,esi
 1006e62:	eb df                	jmp    1006e43 <fatfs_compare_names+0x128>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:240
    char *strSrc = str+strLen-1;
 1006e64:	8d 4c 35 ff          	lea    ecx,[ebp+esi*1-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
 1006e68:	85 f6                	test   esi,esi
 1006e6a:	75 a8                	jne    1006e14 <fatfs_compare_names+0xf9>
fatfs_compare_names():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:312
    file1Len = FileString_TrimLength(strA, file1Len);
    file2Len = FileString_TrimLength(strB, file2Len);

    // Check the file lengths match
    if (file1Len!=file2Len)
        return 0;
 1006e6c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:319
    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
        return 0;
    else
        return 1;
}
 1006e71:	83 c4 1c             	add    esp,0x1c
 1006e74:	5b                   	pop    ebx
 1006e75:	5e                   	pop    esi
 1006e76:	5f                   	pop    edi
 1006e77:	5d                   	pop    ebp
 1006e78:	c3                   	ret    

01006e79 <fatfs_string_ends_with_slash>:
fatfs_string_ends_with_slash():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:324
//-----------------------------------------------------------------------------
// fatfs_string_ends_with_slash: Does the string end with a slash (\ or /)
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
 1006e79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:325
    if (path)
 1006e7d:	85 c0                	test   eax,eax
 1006e7f:	74 27                	je     1006ea8 <fatfs_string_ends_with_slash+0x2f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:327
    {
        while (*path)
 1006e81:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1006e84:	84 d2                	test   dl,dl
 1006e86:	74 26                	je     1006eae <fatfs_string_ends_with_slash+0x35>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:330
        {
            // Last character?
            if (!(*(path+1)))
 1006e88:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
 1006e8c:	75 0a                	jne    1006e98 <fatfs_string_ends_with_slash+0x1f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:332
            {
                if (*path == '\\' || *path == '/')
 1006e8e:	80 fa 5c             	cmp    dl,0x5c
 1006e91:	74 21                	je     1006eb4 <fatfs_string_ends_with_slash+0x3b>
 1006e93:	80 fa 2f             	cmp    dl,0x2f
 1006e96:	74 1c                	je     1006eb4 <fatfs_string_ends_with_slash+0x3b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:336
                    return 1;
            }

            path++;
 1006e98:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:327
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
    if (path)
    {
        while (*path)
 1006e9b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
 1006e9e:	84 d2                	test   dl,dl
 1006ea0:	75 e6                	jne    1006e88 <fatfs_string_ends_with_slash+0xf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:340

            path++;
        }
    }

    return 0;
 1006ea2:	b8 00 00 00 00       	mov    eax,0x0
 1006ea7:	c3                   	ret    
 1006ea8:	b8 00 00 00 00       	mov    eax,0x0
 1006ead:	c3                   	ret    
 1006eae:	b8 00 00 00 00       	mov    eax,0x0
 1006eb3:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:333
        {
            // Last character?
            if (!(*(path+1)))
            {
                if (*path == '\\' || *path == '/')
                    return 1;
 1006eb4:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:341
            path++;
        }
    }

    return 0;
}
 1006eb9:	c3                   	ret    

01006eba <fatfs_get_sfn_display_name>:
fatfs_get_sfn_display_name():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:346
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
 1006eba:	55                   	push   ebp
 1006ebb:	57                   	push   edi
 1006ebc:	56                   	push   esi
 1006ebd:	53                   	push   ebx
 1006ebe:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
 1006ec2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:347
    int len = 0;
 1006ec6:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:348
    while (*in && len <= 11)
 1006ecb:	eb 1e                	jmp    1006eeb <fatfs_get_sfn_display_name+0x31>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:350
    {
        char a = *in++;
 1006ecd:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:352

        if (a == ' ')
 1006ed0:	3c 20                	cmp    al,0x20
 1006ed2:	74 17                	je     1006eeb <fatfs_get_sfn_display_name+0x31>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:355
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
 1006ed4:	8d 78 bf             	lea    edi,[eax-0x41]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:356
            a+= 32;
 1006ed7:	8d 70 20             	lea    esi,[eax+0x20]
 1006eda:	89 fb                	mov    ebx,edi
 1006edc:	80 fb 19             	cmp    bl,0x19
 1006edf:	0f 46 c6             	cmovbe eax,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:358

        *out++ = a;
 1006ee2:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:359
        len++;
 1006ee5:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:358
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
            a+= 32;

        *out++ = a;
 1006ee8:	8d 6d 01             	lea    ebp,[ebp+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:348
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
 1006eeb:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 1006eee:	83 f9 0b             	cmp    ecx,0xb
 1006ef1:	7f 04                	jg     1006ef7 <fatfs_get_sfn_display_name+0x3d>
 1006ef3:	84 c0                	test   al,al
 1006ef5:	75 d6                	jne    1006ecd <fatfs_get_sfn_display_name+0x13>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:362

        *out++ = a;
        len++;
    }

    *out = '\0';
 1006ef7:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:364
    return 1;
}
 1006efb:	b8 01 00 00 00       	mov    eax,0x1
 1006f00:	5b                   	pop    ebx
 1006f01:	5e                   	pop    esi
 1006f02:	5f                   	pop    edi
 1006f03:	5d                   	pop    ebp
 1006f04:	c3                   	ret    

01006f05 <fatfs_get_extension>:
fatfs_get_extension():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:371
// fatfs_get_extension: Get extension of filename passed in 'filename'.
// Returned extension is always lower case.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_get_extension(char* filename, char* out, int maxlen)
{
 1006f05:	55                   	push   ebp
 1006f06:	57                   	push   edi
 1006f07:	56                   	push   esi
 1006f08:	53                   	push   ebx
 1006f09:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
 1006f0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
 1006f11:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:375
    int len = 0;

    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);
 1006f15:	89 f8                	mov    eax,edi
 1006f17:	e8 cf fb ff ff       	call   1006aeb <FileString_GetExtension>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:377

    if (ext_pos > 0 && out && maxlen)
 1006f1c:	85 db                	test   ebx,ebx
 1006f1e:	0f 95 c1             	setne  cl
 1006f21:	85 f6                	test   esi,esi
 1006f23:	0f 95 c2             	setne  dl
 1006f26:	84 d1                	test   cl,dl
 1006f28:	74 48                	je     1006f72 <fatfs_get_extension+0x6d>
 1006f2a:	85 c0                	test   eax,eax
 1006f2c:	7e 44                	jle    1006f72 <fatfs_get_extension+0x6d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:379
    {
        filename += ext_pos + 1;
 1006f2e:	8d 54 07 01          	lea    edx,[edi+eax*1+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:381

        while (*filename && len < (maxlen-1))
 1006f32:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 1006f35:	84 c0                	test   al,al
 1006f37:	74 2f                	je     1006f68 <fatfs_get_extension+0x63>
 1006f39:	8d 4e ff             	lea    ecx,[esi-0x1]
 1006f3c:	85 c9                	test   ecx,ecx
 1006f3e:	7e 28                	jle    1006f68 <fatfs_get_extension+0x63>
 1006f40:	8d 7c 33 ff          	lea    edi,[ebx+esi*1-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:383
        {
            char a = *filename++;
 1006f44:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:386

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
 1006f47:	8d 70 bf             	lea    esi,[eax-0x41]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:387
                a+= 32;
 1006f4a:	8d 68 20             	lea    ebp,[eax+0x20]
 1006f4d:	89 f1                	mov    ecx,esi
 1006f4f:	80 f9 19             	cmp    cl,0x19
 1006f52:	0f 46 c5             	cmovbe eax,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:389

            *out++ = a;
 1006f55:	83 c3 01             	add    ebx,0x1
 1006f58:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:381

    if (ext_pos > 0 && out && maxlen)
    {
        filename += ext_pos + 1;

        while (*filename && len < (maxlen-1))
 1006f5b:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 1006f5e:	84 c0                	test   al,al
 1006f60:	74 06                	je     1006f68 <fatfs_get_extension+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:381 (discriminator 1)
 1006f62:	39 df                	cmp    edi,ebx
 1006f64:	75 de                	jne    1006f44 <fatfs_get_extension+0x3f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:389

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
                a+= 32;

            *out++ = a;
 1006f66:	89 fb                	mov    ebx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:393
            len++;
        }

        *out = '\0';
 1006f68:	c6 03 00             	mov    BYTE PTR [ebx],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:394
        return 1;
 1006f6b:	b8 01 00 00 00       	mov    eax,0x1
 1006f70:	eb 05                	jmp    1006f77 <fatfs_get_extension+0x72>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:397
    }

    return 0;
 1006f72:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:398
}
 1006f77:	5b                   	pop    ebx
 1006f78:	5e                   	pop    esi
 1006f79:	5f                   	pop    edi
 1006f7a:	5d                   	pop    ebp
 1006f7b:	c3                   	ret    

01006f7c <fatfs_create_path_string>:
fatfs_create_path_string():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:404
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
{
 1006f7c:	55                   	push   ebp
 1006f7d:	57                   	push   edi
 1006f7e:	56                   	push   esi
 1006f7f:	53                   	push   ebx
 1006f80:	83 ec 04             	sub    esp,0x4
 1006f83:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
 1006f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:409
    int len = 0;
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
 1006f8b:	85 ff                	test   edi,edi
 1006f8d:	0f 84 cd 00 00 00    	je     1007060 <fatfs_create_path_string+0xe4>
 1006f93:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
 1006f98:	0f 84 c2 00 00 00    	je     1007060 <fatfs_create_path_string+0xe4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:409 (discriminator 1)
 1006f9e:	85 c0                	test   eax,eax
 1006fa0:	0f 84 c1 00 00 00    	je     1007067 <fatfs_create_path_string+0xeb>
 1006fa6:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
 1006fab:	0f 8e b6 00 00 00    	jle    1007067 <fatfs_create_path_string+0xeb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:411
    {
        while (*path && len < (maxlen-2))
 1006fb1:	0f b6 0f             	movzx  ecx,BYTE PTR [edi]
 1006fb4:	84 c9                	test   cl,cl
 1006fb6:	74 4c                	je     1007004 <fatfs_create_path_string+0x88>
 1006fb8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
 1006fbc:	8d 56 fe             	lea    edx,[esi-0x2]
 1006fbf:	85 d2                	test   edx,edx
 1006fc1:	7e 4d                	jle    1007010 <fatfs_create_path_string+0x94>
 1006fc3:	89 14 24             	mov    DWORD PTR [esp],edx
 1006fc6:	be 2f 00 00 00       	mov    esi,0x2f
 1006fcb:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:415
        {
            last = *path++;
            if (last == '\\')
                seperator = '\\';
 1006fd0:	bd 5c 00 00 00       	mov    ebp,0x5c
 1006fd5:	eb 02                	jmp    1006fd9 <fatfs_create_path_string+0x5d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
 1006fd7:	89 d9                	mov    ecx,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:415
        {
            last = *path++;
            if (last == '\\')
                seperator = '\\';
 1006fd9:	80 f9 5c             	cmp    cl,0x5c
 1006fdc:	0f 44 f5             	cmove  esi,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:416
            *out++ = last;
 1006fdf:	83 c0 01             	add    eax,0x1
 1006fe2:	88 48 ff             	mov    BYTE PTR [eax-0x1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:417
            len++;
 1006fe5:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
 1006fe8:	0f b6 1c 17          	movzx  ebx,BYTE PTR [edi+edx*1]
 1006fec:	84 db                	test   bl,bl
 1006fee:	74 08                	je     1006ff8 <fatfs_create_path_string+0x7c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:411 (discriminator 1)
 1006ff0:	39 14 24             	cmp    DWORD PTR [esp],edx
 1006ff3:	75 e2                	jne    1006fd7 <fatfs_create_path_string+0x5b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:417
        {
            last = *path++;
            if (last == '\\')
                seperator = '\\';
            *out++ = last;
            len++;
 1006ff5:	8b 14 24             	mov    edx,DWORD PTR [esp]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:421
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
 1006ff8:	80 f9 5c             	cmp    cl,0x5c
 1006ffb:	74 24                	je     1007021 <fatfs_create_path_string+0xa5>
 1006ffd:	80 f9 2f             	cmp    cl,0x2f
 1007000:	75 18                	jne    100701a <fatfs_create_path_string+0x9e>
 1007002:	eb 1d                	jmp    1007021 <fatfs_create_path_string+0xa5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
 1007004:	be 2f 00 00 00       	mov    esi,0x2f
 1007009:	ba 00 00 00 00       	mov    edx,0x0
 100700e:	eb 0a                	jmp    100701a <fatfs_create_path_string+0x9e>
 1007010:	be 2f 00 00 00       	mov    esi,0x2f
 1007015:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:422
            len++;
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;
 100701a:	89 f3                	mov    ebx,esi
 100701c:	88 18                	mov    BYTE PTR [eax],bl
 100701e:	8d 40 01             	lea    eax,[eax+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:424

        while (*filename && len < (maxlen-1))
 1007021:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
 1007025:	0f b6 1f             	movzx  ebx,BYTE PTR [edi]
 1007028:	84 db                	test   bl,bl
 100702a:	74 2a                	je     1007056 <fatfs_create_path_string+0xda>
 100702c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
 1007030:	8d 77 ff             	lea    esi,[edi-0x1]
 1007033:	39 d6                	cmp    esi,edx
 1007035:	7e 1f                	jle    1007056 <fatfs_create_path_string+0xda>
 1007037:	89 d1                	mov    ecx,edx
 1007039:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
 100703d:	29 d7                	sub    edi,edx
 100703f:	89 fa                	mov    edx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:426
        {
            *out++ = *filename++;
 1007041:	83 c0 01             	add    eax,0x1
 1007044:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:427
            len++;
 1007047:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:424

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
 100704a:	0f b6 1c 0a          	movzx  ebx,BYTE PTR [edx+ecx*1]
 100704e:	84 db                	test   bl,bl
 1007050:	74 04                	je     1007056 <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:424 (discriminator 1)
 1007052:	39 ce                	cmp    esi,ecx
 1007054:	7f eb                	jg     1007041 <fatfs_create_path_string+0xc5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:430
        {
            *out++ = *filename++;
            len++;
        }

        *out = '\0';
 1007056:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:432

        return 1;
 1007059:	b8 01 00 00 00       	mov    eax,0x1
 100705e:	eb 0c                	jmp    100706c <fatfs_create_path_string+0xf0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:435
    }

    return 0;
 1007060:	b8 00 00 00 00       	mov    eax,0x0
 1007065:	eb 05                	jmp    100706c <fatfs_create_path_string+0xf0>
 1007067:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_string.c:436
}
 100706c:	83 c4 04             	add    esp,0x4
 100706f:	5b                   	pop    ebx
 1007070:	5e                   	pop    esi
 1007071:	5f                   	pop    edi
 1007072:	5d                   	pop    ebp
 1007073:	c3                   	ret    

01007074 <fatfs_fat_writeback>:
fatfs_fat_writeback():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:85
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
    if (pcur)
 1007074:	85 d2                	test   edx,edx
 1007076:	74 61                	je     10070d9 <fatfs_fat_writeback+0x65>
 1007078:	89 c1                	mov    ecx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:108
            }

            pcur->dirty = 0;
        }

        return 1;
 100707a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:88
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
    if (pcur)
    {
        // Writeback sector if changed
        if (pcur->dirty)
 100707f:	83 ba 04 02 00 00 00 	cmp    DWORD PTR [edx+0x204],0x0
 1007086:	74 5e                	je     10070e6 <fatfs_fat_writeback+0x72>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:84
}
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
 1007088:	55                   	push   ebp
 1007089:	57                   	push   edi
 100708a:	56                   	push   esi
 100708b:	53                   	push   ebx
 100708c:	83 ec 0c             	sub    esp,0xc
 100708f:	89 d3                	mov    ebx,edx
 1007091:	89 c8                	mov    eax,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:90
    if (pcur)
    {
        // Writeback sector if changed
        if (pcur->dirty)
        {
            if (fs->disk_io.write_media)
 1007093:	8b 49 38             	mov    ecx,DWORD PTR [ecx+0x38]
 1007096:	85 c9                	test   ecx,ecx
 1007098:	74 2e                	je     10070c8 <fatfs_fat_writeback+0x54>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:93
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
 100709a:	8b b2 00 02 00 00    	mov    esi,DWORD PTR [edx+0x200]
 10070a0:	89 f5                	mov    ebp,esi
 10070a2:	2b 68 14             	sub    ebp,DWORD PTR [eax+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:96

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
 10070a5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
 10070a8:	8d 7d 01             	lea    edi,[ebp+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:99
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
 10070ab:	89 d0                	mov    eax,edx
 10070ad:	29 e8                	sub    eax,ebp
 10070af:	39 d7                	cmp    edi,edx
 10070b1:	ba 01 00 00 00       	mov    edx,0x1
 10070b6:	0f 46 c2             	cmovbe eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:101

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
 10070b9:	83 ec 04             	sub    esp,0x4
 10070bc:	50                   	push   eax
 10070bd:	53                   	push   ebx
 10070be:	56                   	push   esi
 10070bf:	ff d1                	call   ecx
 10070c1:	83 c4 10             	add    esp,0x10
 10070c4:	85 c0                	test   eax,eax
 10070c6:	74 17                	je     10070df <fatfs_fat_writeback+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:105
                    return 0;
            }

            pcur->dirty = 0;
 10070c8:	c7 83 04 02 00 00 00 	mov    DWORD PTR [ebx+0x204],0x0
 10070cf:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:108
        }

        return 1;
 10070d2:	b8 01 00 00 00       	mov    eax,0x1
 10070d7:	eb 06                	jmp    10070df <fatfs_fat_writeback+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:111
    }
    else
        return 0;
 10070d9:	b8 00 00 00 00       	mov    eax,0x0
 10070de:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:112
}
 10070df:	83 c4 0c             	add    esp,0xc
 10070e2:	5b                   	pop    ebx
 10070e3:	5e                   	pop    esi
 10070e4:	5f                   	pop    edi
 10070e5:	5d                   	pop    ebp
 10070e6:	f3 c3                	repz ret 

010070e8 <fatfs_fat_read_sector>:
fatfs_fat_read_sector():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:117
//-----------------------------------------------------------------------------
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
 10070e8:	57                   	push   edi
 10070e9:	56                   	push   esi
 10070ea:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:119
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
 10070eb:	8b 98 54 02 00 00    	mov    ebx,DWORD PTR [eax+0x254]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:122

    // Itterate through sector buffer list
    while (pcur)
 10070f1:	be 00 00 00 00       	mov    esi,0x0
 10070f6:	85 db                	test   ebx,ebx
 10070f8:	75 06                	jne    1007100 <fatfs_fat_read_sector+0x18>
 10070fa:	eb 5d                	jmp    1007159 <fatfs_fat_read_sector+0x71>
 10070fc:	89 de                	mov    esi,ebx
 10070fe:	89 cb                	mov    ebx,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:125
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
 1007100:	8b 8b 00 02 00 00    	mov    ecx,DWORD PTR [ebx+0x200]
 1007106:	39 d1                	cmp    ecx,edx
 1007108:	77 07                	ja     1007111 <fatfs_fat_read_sector+0x29>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:125 (discriminator 1)
 100710a:	8d 79 01             	lea    edi,[ecx+0x1]
 100710d:	39 fa                	cmp    edx,edi
 100710f:	72 30                	jb     1007141 <fatfs_fat_read_sector+0x59>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:129
            break;

        // End of list?
        if (pcur->next == NULL)
 1007111:	8b 8b 0c 02 00 00    	mov    ecx,DWORD PTR [ebx+0x20c]
 1007117:	85 c9                	test   ecx,ecx
 1007119:	75 e1                	jne    10070fc <fatfs_fat_read_sector+0x14>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:132
        {
            // Remove buffer from list
            if (last)
 100711b:	85 f6                	test   esi,esi
 100711d:	74 0c                	je     100712b <fatfs_fat_read_sector+0x43>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:133
                last->next = NULL;
 100711f:	c7 86 0c 02 00 00 00 	mov    DWORD PTR [esi+0x20c],0x0
 1007126:	00 00 00 
 1007129:	eb 0a                	jmp    1007135 <fatfs_fat_read_sector+0x4d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:136
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
 100712b:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
 1007132:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:140
        }

        last = pcur;
        pcur = pcur->next;
 1007135:	8b 8b 0c 02 00 00    	mov    ecx,DWORD PTR [ebx+0x20c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:122
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
 100713b:	85 c9                	test   ecx,ecx
 100713d:	75 bd                	jne    10070fc <fatfs_fat_read_sector+0x14>
 100713f:	eb 18                	jmp    1007159 <fatfs_fat_read_sector+0x71>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:144
        last = pcur;
        pcur = pcur->next;
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
 1007141:	85 db                	test   ebx,ebx
 1007143:	74 12                	je     1007157 <fatfs_fat_read_sector+0x6f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:146
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
 1007145:	29 ca                	sub    edx,ecx
 1007147:	c1 e2 09             	shl    edx,0x9
 100714a:	8d 04 13             	lea    eax,[ebx+edx*1]
 100714d:	89 83 08 02 00 00    	mov    DWORD PTR [ebx+0x208],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:147
        return pcur;
 1007153:	89 d8                	mov    eax,ebx
 1007155:	eb 60                	jmp    10071b7 <fatfs_fat_read_sector+0xcf>
 1007157:	89 f3                	mov    ebx,esi
 1007159:	89 d6                	mov    esi,edx
 100715b:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:154

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
 100715d:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
 1007163:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:155
    fs->fat_buffer_head = pcur;
 1007169:	89 9f 54 02 00 00    	mov    DWORD PTR [edi+0x254],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:158

    // Writeback sector if changed
    if (pcur->dirty)
 100716f:	83 bb 04 02 00 00 00 	cmp    DWORD PTR [ebx+0x204],0x0
 1007176:	74 0d                	je     1007185 <fatfs_fat_read_sector+0x9d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:159
        if (!fatfs_fat_writeback(fs, pcur))
 1007178:	89 da                	mov    edx,ebx
 100717a:	89 f8                	mov    eax,edi
 100717c:	e8 f3 fe ff ff       	call   1007074 <fatfs_fat_writeback>
 1007181:	85 c0                	test   eax,eax
 1007183:	74 2d                	je     10071b2 <fatfs_fat_read_sector+0xca>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:163
            return 0;

    // Address is now new sector
    pcur->address = sector;
 1007185:	89 b3 00 02 00 00    	mov    DWORD PTR [ebx+0x200],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:166

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
 100718b:	83 ec 04             	sub    esp,0x4
 100718e:	6a 01                	push   0x1
 1007190:	53                   	push   ebx
 1007191:	56                   	push   esi
 1007192:	ff 57 34             	call   DWORD PTR [edi+0x34]
 1007195:	83 c4 10             	add    esp,0x10
 1007198:	85 c0                	test   eax,eax
 100719a:	75 0c                	jne    10071a8 <fatfs_fat_read_sector+0xc0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:169
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
 100719c:	c7 83 00 02 00 00 ff 	mov    DWORD PTR [ebx+0x200],0xffffffff
 10071a3:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:170
        return NULL;
 10071a6:	eb 0f                	jmp    10071b7 <fatfs_fat_read_sector+0xcf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:173
    }

    pcur->ptr = pcur->sector;
 10071a8:	89 9b 08 02 00 00    	mov    DWORD PTR [ebx+0x208],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:174
    return pcur;
 10071ae:	89 d8                	mov    eax,ebx
 10071b0:	eb 05                	jmp    10071b7 <fatfs_fat_read_sector+0xcf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:160
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;
 10071b2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:175
        return NULL;
    }

    pcur->ptr = pcur->sector;
    return pcur;
}
 10071b7:	5b                   	pop    ebx
 10071b8:	5e                   	pop    esi
 10071b9:	5f                   	pop    edi
 10071ba:	c3                   	ret    

010071bb <fatfs_fat_init>:
fatfs_fat_init():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:61

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
 10071bb:	56                   	push   esi
 10071bc:	53                   	push   ebx
 10071bd:	83 ec 08             	sub    esp,0x8
 10071c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:65
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
 10071c4:	c7 83 54 02 00 00 00 	mov    DWORD PTR [ebx+0x254],0x0
 10071cb:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:70

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
 10071ce:	c7 83 58 04 00 00 ff 	mov    DWORD PTR [ebx+0x458],0xffffffff
 10071d5:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:71
        fs->fat_buffers[i].dirty = 0;
 10071d8:	c7 83 5c 04 00 00 00 	mov    DWORD PTR [ebx+0x45c],0x0
 10071df:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:72
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
 10071e2:	8d b3 58 02 00 00    	lea    esi,[ebx+0x258]
 10071e8:	68 00 02 00 00       	push   0x200
 10071ed:	6a 00                	push   0x0
 10071ef:	56                   	push   esi
 10071f0:	e8 ca 1c 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:73
        fs->fat_buffers[i].ptr = NULL;
 10071f5:	c7 83 60 04 00 00 00 	mov    DWORD PTR [ebx+0x460],0x0
 10071fc:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:76

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
 10071ff:	8b 83 54 02 00 00    	mov    eax,DWORD PTR [ebx+0x254]
 1007205:	89 83 64 04 00 00    	mov    DWORD PTR [ebx+0x464],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:77
        fs->fat_buffer_head = &fs->fat_buffers[i];
 100720b:	89 b3 54 02 00 00    	mov    DWORD PTR [ebx+0x254],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:79
    }
}
 1007211:	83 c4 14             	add    esp,0x14
 1007214:	5b                   	pop    ebx
 1007215:	5e                   	pop    esi
 1007216:	c3                   	ret    

01007217 <fatfs_fat_purge>:
fatfs_fat_purge():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:180
}
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
 1007217:	56                   	push   esi
 1007218:	53                   	push   ebx
 1007219:	83 ec 04             	sub    esp,0x4
 100721c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:181
    struct fat_buffer *pcur = fs->fat_buffer_head;
 1007220:	8b 9e 54 02 00 00    	mov    ebx,DWORD PTR [esi+0x254]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:184

    // Itterate through sector buffer list
    while (pcur)
 1007226:	85 db                	test   ebx,ebx
 1007228:	74 27                	je     1007251 <fatfs_fat_purge+0x3a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:187
    {
        // Writeback sector if changed
        if (pcur->dirty)
 100722a:	83 bb 04 02 00 00 00 	cmp    DWORD PTR [ebx+0x204],0x0
 1007231:	74 0d                	je     1007240 <fatfs_fat_purge+0x29>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:188
            if (!fatfs_fat_writeback(fs, pcur))
 1007233:	89 da                	mov    edx,ebx
 1007235:	89 f0                	mov    eax,esi
 1007237:	e8 38 fe ff ff       	call   1007074 <fatfs_fat_writeback>
 100723c:	85 c0                	test   eax,eax
 100723e:	74 16                	je     1007256 <fatfs_fat_purge+0x3f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:191
                return 0;

        pcur = pcur->next;
 1007240:	8b 9b 0c 02 00 00    	mov    ebx,DWORD PTR [ebx+0x20c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:184
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
 1007246:	85 db                	test   ebx,ebx
 1007248:	75 e0                	jne    100722a <fatfs_fat_purge+0x13>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:194
                return 0;

        pcur = pcur->next;
    }

    return 1;
 100724a:	b8 01 00 00 00       	mov    eax,0x1
 100724f:	eb 05                	jmp    1007256 <fatfs_fat_purge+0x3f>
 1007251:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:195
}
 1007256:	83 c4 04             	add    esp,0x4
 1007259:	5b                   	pop    ebx
 100725a:	5e                   	pop    esi
 100725b:	c3                   	ret    

0100725c <fatfs_find_next_cluster>:
fatfs_find_next_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:206
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
 100725c:	57                   	push   edi
 100725d:	56                   	push   esi
 100725e:	53                   	push   ebx
 100725f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 1007263:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:213
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
        current_cluster = 2;
 1007267:	85 db                	test   ebx,ebx
 1007269:	b8 02 00 00 00       	mov    eax,0x2
 100726e:	0f 44 d8             	cmove  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:217

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = current_cluster / 256;
 1007271:	89 d8                	mov    eax,ebx
 1007273:	c1 e8 08             	shr    eax,0x8
 1007276:	89 de                	mov    esi,ebx
 1007278:	c1 ee 07             	shr    esi,0x7
 100727b:	83 7f 30 00          	cmp    DWORD PTR [edi+0x30],0x0
 100727f:	0f 44 f0             	cmove  esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:222
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
 1007282:	89 f2                	mov    edx,esi
 1007284:	03 57 14             	add    edx,DWORD PTR [edi+0x14]
 1007287:	89 f8                	mov    eax,edi
 1007289:	e8 5a fe ff ff       	call   10070e8 <fatfs_fat_read_sector>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:224
    if (!pbuf)
        return (FAT32_LAST_CLUSTER);
 100728e:	ba ff ff ff ff       	mov    edx,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:223
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
 1007293:	85 c0                	test   eax,eax
 1007295:	0f 84 83 00 00 00    	je     100731e <fatfs_find_next_cluster+0xc2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:226
        return (FAT32_LAST_CLUSTER);

    if (fs->fat_type == FAT_TYPE_16)
 100729b:	83 7f 30 00          	cmp    DWORD PTR [edi+0x30],0x0
 100729f:	75 31                	jne    10072d2 <fatfs_find_next_cluster+0x76>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:232
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
 10072a1:	8b 88 08 02 00 00    	mov    ecx,DWORD PTR [eax+0x208]
 10072a7:	c1 e6 08             	shl    esi,0x8
 10072aa:	29 f3                	sub    ebx,esi
 10072ac:	01 db                	add    ebx,ebx
 10072ae:	0f b7 db             	movzx  ebx,bx
 10072b1:	0f b6 44 19 01       	movzx  eax,BYTE PTR [ecx+ebx*1+0x1]
 10072b6:	c1 e0 08             	shl    eax,0x8
 10072b9:	0f b6 0c 19          	movzx  ecx,BYTE PTR [ecx+ebx*1]
 10072bd:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:235

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
 10072bf:	8d 90 08 00 ff ff    	lea    edx,[eax-0xfff8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:232
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
 10072c5:	83 fa 08             	cmp    edx,0x8
 10072c8:	ba ff ff ff ff       	mov    edx,0xffffffff
 10072cd:	0f 43 d0             	cmovae edx,eax
 10072d0:	eb 4c                	jmp    100731e <fatfs_find_next_cluster+0xc2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:244
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 128)) * 4;

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
 10072d2:	8b 88 08 02 00 00    	mov    ecx,DWORD PTR [eax+0x208]
 10072d8:	c1 e6 07             	shl    esi,0x7
 10072db:	29 f3                	sub    ebx,esi
 10072dd:	c1 e3 02             	shl    ebx,0x2
 10072e0:	0f b7 db             	movzx  ebx,bx
 10072e3:	0f b6 44 19 03       	movzx  eax,BYTE PTR [ecx+ebx*1+0x3]
 10072e8:	c1 e0 18             	shl    eax,0x18
 10072eb:	89 c2                	mov    edx,eax
 10072ed:	0f b6 44 19 02       	movzx  eax,BYTE PTR [ecx+ebx*1+0x2]
 10072f2:	c1 e0 10             	shl    eax,0x10
 10072f5:	01 d0                	add    eax,edx
 10072f7:	0f b6 14 19          	movzx  edx,BYTE PTR [ecx+ebx*1]
 10072fb:	01 d0                	add    eax,edx
 10072fd:	0f b6 54 19 01       	movzx  edx,BYTE PTR [ecx+ebx*1+0x1]
 1007302:	c1 e2 08             	shl    edx,0x8
 1007305:	01 c2                	add    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:247

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
 1007307:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:250

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF)
 100730d:	8d 82 08 00 00 f0    	lea    eax,[edx-0xffffff8]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:247

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
 1007313:	83 f8 08             	cmp    eax,0x8
 1007316:	b8 ff ff ff ff       	mov    eax,0xffffffff
 100731b:	0f 42 d0             	cmovb  edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:256
            return (FAT32_LAST_CLUSTER);
    }

    // Else return next cluster
    return (nextcluster);
}
 100731e:	89 d0                	mov    eax,edx
 1007320:	5b                   	pop    ebx
 1007321:	5e                   	pop    esi
 1007322:	5f                   	pop    edi
 1007323:	c3                   	ret    

01007324 <fatfs_set_fs_info_next_free_cluster>:
fatfs_set_fs_info_next_free_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:261
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
 1007324:	57                   	push   edi
 1007325:	56                   	push   esi
 1007326:	53                   	push   ebx
 1007327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 100732b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:262
    if (fs->fat_type == FAT_TYPE_16)
 100732f:	83 7b 30 00          	cmp    DWORD PTR [ebx+0x30],0x0
 1007333:	0f 84 8e 00 00 00    	je     10073c7 <fatfs_set_fs_info_next_free_cluster+0xa3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:267
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
 1007339:	0f b7 53 18          	movzx  edx,WORD PTR [ebx+0x18]
 100733d:	03 53 1c             	add    edx,DWORD PTR [ebx+0x1c]
 1007340:	89 d8                	mov    eax,ebx
 1007342:	e8 a1 fd ff ff       	call   10070e8 <fatfs_fat_read_sector>
 1007347:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:268
        if (!pbuf)
 1007349:	85 c0                	test   eax,eax
 100734b:	74 7a                	je     10073c7 <fatfs_set_fs_info_next_free_cluster+0xa3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:272
            return ;

        // Change
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
 100734d:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
 1007353:	89 f9                	mov    ecx,edi
 1007355:	88 88 ec 01 00 00    	mov    BYTE PTR [eax+0x1ec],cl
 100735b:	8b 86 08 02 00 00    	mov    eax,DWORD PTR [esi+0x208]
 1007361:	89 fa                	mov    edx,edi
 1007363:	c1 ea 08             	shr    edx,0x8
 1007366:	88 90 ed 01 00 00    	mov    BYTE PTR [eax+0x1ed],dl
 100736c:	8b 86 08 02 00 00    	mov    eax,DWORD PTR [esi+0x208]
 1007372:	89 fa                	mov    edx,edi
 1007374:	c1 ea 10             	shr    edx,0x10
 1007377:	88 90 ee 01 00 00    	mov    BYTE PTR [eax+0x1ee],dl
 100737d:	8b 86 08 02 00 00    	mov    eax,DWORD PTR [esi+0x208]
 1007383:	89 fa                	mov    edx,edi
 1007385:	c1 ea 18             	shr    edx,0x18
 1007388:	88 90 ef 01 00 00    	mov    BYTE PTR [eax+0x1ef],dl
 100738e:	c7 86 04 02 00 00 01 	mov    DWORD PTR [esi+0x204],0x1
 1007395:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:273
        fs->next_free_cluster = newValue;
 1007398:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:276

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
 100739b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
 100739e:	85 c0                	test   eax,eax
 10073a0:	74 11                	je     10073b3 <fatfs_set_fs_info_next_free_cluster+0x8f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:277
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);
 10073a2:	83 ec 04             	sub    esp,0x4
 10073a5:	6a 01                	push   0x1
 10073a7:	56                   	push   esi
 10073a8:	ff b6 00 02 00 00    	push   DWORD PTR [esi+0x200]
 10073ae:	ff d0                	call   eax
 10073b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:280

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
 10073b3:	c7 86 00 02 00 00 ff 	mov    DWORD PTR [esi+0x200],0xffffffff
 10073ba:	ff ff ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:281
        pbuf->dirty = 0;
 10073bd:	c7 86 04 02 00 00 00 	mov    DWORD PTR [esi+0x204],0x0
 10073c4:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:283
    }
}
 10073c7:	5b                   	pop    ebx
 10073c8:	5e                   	pop    esi
 10073c9:	5f                   	pop    edi
 10073ca:	c3                   	ret    

010073cb <fatfs_find_blank_cluster>:
fatfs_find_blank_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:289
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
 10073cb:	57                   	push   edi
 10073cc:	56                   	push   esi
 10073cd:	53                   	push   ebx
 10073ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 10073d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:299

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
            fat_sector_offset = current_cluster / 256;
 10073d6:	89 f8                	mov    eax,edi
 10073d8:	c1 e8 08             	shr    eax,0x8
 10073db:	89 fb                	mov    ebx,edi
 10073dd:	c1 eb 07             	shr    ebx,0x7
 10073e0:	83 7e 30 00          	cmp    DWORD PTR [esi+0x30],0x0
 10073e4:	0f 44 d8             	cmove  ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:303
        else
            fat_sector_offset = current_cluster / 128;

        if ( fat_sector_offset < fs->fat_sectors)
 10073e7:	3b 5e 20             	cmp    ebx,DWORD PTR [esi+0x20]
 10073ea:	0f 83 80 00 00 00    	jae    1007470 <fatfs_find_blank_cluster+0xa5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:306
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
 10073f0:	89 da                	mov    edx,ebx
 10073f2:	03 56 14             	add    edx,DWORD PTR [esi+0x14]
 10073f5:	89 f0                	mov    eax,esi
 10073f7:	e8 ec fc ff ff       	call   10070e8 <fatfs_fat_read_sector>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:307
            if (!pbuf)
 10073fc:	85 c0                	test   eax,eax
 10073fe:	74 77                	je     1007477 <fatfs_find_blank_cluster+0xac>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:310
                return 0;

            if (fs->fat_type == FAT_TYPE_16)
 1007400:	83 7e 30 00          	cmp    DWORD PTR [esi+0x30],0x0
 1007404:	75 22                	jne    1007428 <fatfs_find_blank_cluster+0x5d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:316
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
 1007406:	8b 88 08 02 00 00    	mov    ecx,DWORD PTR [eax+0x208]
 100740c:	c1 e3 08             	shl    ebx,0x8
 100740f:	89 fa                	mov    edx,edi
 1007411:	29 da                	sub    edx,ebx
 1007413:	01 d2                	add    edx,edx
 1007415:	0f b7 d2             	movzx  edx,dx
 1007418:	0f b6 44 11 01       	movzx  eax,BYTE PTR [ecx+edx*1+0x1]
 100741d:	c1 e0 08             	shl    eax,0x8
 1007420:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
 1007424:	01 d0                	add    eax,edx
 1007426:	eb 3c                	jmp    1007464 <fatfs_find_blank_cluster+0x99>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:324
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
 1007428:	8b 88 08 02 00 00    	mov    ecx,DWORD PTR [eax+0x208]
 100742e:	c1 e3 07             	shl    ebx,0x7
 1007431:	89 fa                	mov    edx,edi
 1007433:	29 da                	sub    edx,ebx
 1007435:	c1 e2 02             	shl    edx,0x2
 1007438:	0f b7 d2             	movzx  edx,dx
 100743b:	0f b6 44 11 03       	movzx  eax,BYTE PTR [ecx+edx*1+0x3]
 1007440:	c1 e0 18             	shl    eax,0x18
 1007443:	89 c3                	mov    ebx,eax
 1007445:	0f b6 44 11 02       	movzx  eax,BYTE PTR [ecx+edx*1+0x2]
 100744a:	c1 e0 10             	shl    eax,0x10
 100744d:	01 d8                	add    eax,ebx
 100744f:	0f b6 1c 11          	movzx  ebx,BYTE PTR [ecx+edx*1]
 1007453:	01 c3                	add    ebx,eax
 1007455:	0f b6 44 11 01       	movzx  eax,BYTE PTR [ecx+edx*1+0x1]
 100745a:	c1 e0 08             	shl    eax,0x8
 100745d:	01 d8                	add    eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:327

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;
 100745f:	25 ff ff ff 0f       	and    eax,0xfffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:330
            }

            if (nextcluster !=0 )
 1007464:	85 c0                	test   eax,eax
 1007466:	74 16                	je     100747e <fatfs_find_blank_cluster+0xb3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:331
                current_cluster++;
 1007468:	83 c7 01             	add    edi,0x1
 100746b:	e9 66 ff ff ff       	jmp    10073d6 <fatfs_find_blank_cluster+0xb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:335
        }
        else
            // Otherwise, run out of FAT sectors to check...
            return 0;
 1007470:	b8 00 00 00 00       	mov    eax,0x0
 1007475:	eb 12                	jmp    1007489 <fatfs_find_blank_cluster+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:308
        if ( fat_sector_offset < fs->fat_sectors)
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
            if (!pbuf)
                return 0;
 1007477:	b8 00 00 00 00       	mov    eax,0x0
 100747c:	eb 0b                	jmp    1007489 <fatfs_find_blank_cluster+0xbe>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:340
            return 0;
    }
    while (nextcluster != 0x0);

    // Found blank entry
    *free_cluster = current_cluster;
 100747e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 1007482:	89 38                	mov    DWORD PTR [eax],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:341
    return 1;
 1007484:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:342
}
 1007489:	5b                   	pop    ebx
 100748a:	5e                   	pop    esi
 100748b:	5f                   	pop    edi
 100748c:	c3                   	ret    

0100748d <fatfs_fat_set_cluster>:
fatfs_fat_set_cluster():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:350
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
 100748d:	55                   	push   ebp
 100748e:	57                   	push   edi
 100748f:	56                   	push   esi
 1007490:	53                   	push   ebx
 1007491:	83 ec 0c             	sub    esp,0xc
 1007494:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 1007498:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
 100749c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:356
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
 10074a0:	89 d8                	mov    eax,ebx
 10074a2:	c1 e8 08             	shr    eax,0x8
 10074a5:	89 df                	mov    edi,ebx
 10074a7:	c1 ef 07             	shr    edi,0x7
 10074aa:	83 7d 30 00          	cmp    DWORD PTR [ebp+0x30],0x0
 10074ae:	0f 44 f8             	cmove  edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:361
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
 10074b1:	89 fa                	mov    edx,edi
 10074b3:	03 55 14             	add    edx,DWORD PTR [ebp+0x14]
 10074b6:	89 e8                	mov    eax,ebp
 10074b8:	e8 2b fc ff ff       	call   10070e8 <fatfs_fat_read_sector>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:362
    if (!pbuf)
 10074bd:	85 c0                	test   eax,eax
 10074bf:	0f 84 8f 00 00 00    	je     1007554 <fatfs_fat_set_cluster+0xc7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:365
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
 10074c5:	83 7d 30 00          	cmp    DWORD PTR [ebp+0x30],0x0
 10074c9:	75 35                	jne    1007500 <fatfs_fat_set_cluster+0x73>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:371
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
 10074cb:	c1 e7 08             	shl    edi,0x8
 10074ce:	29 fb                	sub    ebx,edi
 10074d0:	01 db                	add    ebx,ebx
 10074d2:	0f b7 db             	movzx  ebx,bx
 10074d5:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
 10074db:	89 f1                	mov    ecx,esi
 10074dd:	88 0c 1a             	mov    BYTE PTR [edx+ebx*1],cl
 10074e0:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
 10074e6:	89 f1                	mov    ecx,esi
 10074e8:	0f b6 cd             	movzx  ecx,ch
 10074eb:	88 4c 1a 01          	mov    BYTE PTR [edx+ebx*1+0x1],cl
 10074ef:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
 10074f6:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:382

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
    }

    return 1;
 10074f9:	b8 01 00 00 00       	mov    eax,0x1
 10074fe:	eb 59                	jmp    1007559 <fatfs_fat_set_cluster+0xcc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:379
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
 1007500:	c1 e7 07             	shl    edi,0x7
 1007503:	29 fb                	sub    ebx,edi
 1007505:	c1 e3 02             	shl    ebx,0x2
 1007508:	0f b7 db             	movzx  ebx,bx
 100750b:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
 1007511:	89 f1                	mov    ecx,esi
 1007513:	88 0c 1a             	mov    BYTE PTR [edx+ebx*1],cl
 1007516:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
 100751c:	89 f1                	mov    ecx,esi
 100751e:	c1 e9 08             	shr    ecx,0x8
 1007521:	88 4c 1a 01          	mov    BYTE PTR [edx+ebx*1+0x1],cl
 1007525:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
 100752b:	89 f1                	mov    ecx,esi
 100752d:	c1 e9 10             	shr    ecx,0x10
 1007530:	88 4c 1a 02          	mov    BYTE PTR [edx+ebx*1+0x2],cl
 1007534:	8b 88 08 02 00 00    	mov    ecx,DWORD PTR [eax+0x208]
 100753a:	c1 ee 18             	shr    esi,0x18
 100753d:	89 f2                	mov    edx,esi
 100753f:	88 54 19 03          	mov    BYTE PTR [ecx+ebx*1+0x3],dl
 1007543:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
 100754a:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:382
    }

    return 1;
 100754d:	b8 01 00 00 00       	mov    eax,0x1
 1007552:	eb 05                	jmp    1007559 <fatfs_fat_set_cluster+0xcc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:363
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return 0;
 1007554:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:383
        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
    }

    return 1;
}
 1007559:	83 c4 0c             	add    esp,0xc
 100755c:	5b                   	pop    ebx
 100755d:	5e                   	pop    esi
 100755e:	5f                   	pop    edi
 100755f:	5d                   	pop    ebp
 1007560:	c3                   	ret    

01007561 <fatfs_free_cluster_chain>:
fatfs_free_cluster_chain():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:390
//-----------------------------------------------------------------------------
// fatfs_free_cluster_chain: Follow a chain marking each element as free
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
 1007561:	57                   	push   edi
 1007562:	56                   	push   esi
 1007563:	53                   	push   ebx
 1007564:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 1007568:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:395
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
 100756c:	8d 46 ff             	lea    eax,[esi-0x1]
 100756f:	83 f8 fd             	cmp    eax,0xfffffffd
 1007572:	77 25                	ja     1007599 <fatfs_free_cluster_chain+0x38>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:400
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
 1007574:	83 ec 08             	sub    esp,0x8
 1007577:	56                   	push   esi
 1007578:	57                   	push   edi
 1007579:	e8 de fc ff ff       	call   100725c <fatfs_find_next_cluster>
 100757e:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:403

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
 1007580:	83 c4 0c             	add    esp,0xc
 1007583:	6a 00                	push   0x0
 1007585:	56                   	push   esi
 1007586:	57                   	push   edi
 1007587:	e8 01 ff ff ff       	call   100748d <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:400
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
 100758c:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:395
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
 100758e:	83 eb 01             	sub    ebx,0x1
 1007591:	83 c4 10             	add    esp,0x10
 1007594:	83 fb fd             	cmp    ebx,0xfffffffd
 1007597:	76 db                	jbe    1007574 <fatfs_free_cluster_chain+0x13>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:407
        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
}
 1007599:	b8 01 00 00 00       	mov    eax,0x1
 100759e:	5b                   	pop    ebx
 100759f:	5e                   	pop    esi
 10075a0:	5f                   	pop    edi
 10075a1:	c3                   	ret    

010075a2 <fatfs_fat_add_cluster_to_chain>:
fatfs_fat_add_cluster_to_chain():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:415
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
 10075a2:	56                   	push   esi
 10075a3:	53                   	push   ebx
 10075a4:	83 ec 04             	sub    esp,0x4
 10075a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 10075ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:419
    uint32 last_cluster = FAT32_LAST_CLUSTER;
    uint32 next_cluster = start_cluster;

    if (start_cluster == FAT32_LAST_CLUSTER)
 10075af:	83 fb ff             	cmp    ebx,0xffffffff
 10075b2:	75 04                	jne    10075b8 <fatfs_fat_add_cluster_to_chain+0x16>
 10075b4:	eb 3f                	jmp    10075f5 <fatfs_fat_add_cluster_to_chain+0x53>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:428
    while ( next_cluster != FAT32_LAST_CLUSTER )
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
 10075b6:	89 c3                	mov    ebx,eax
 10075b8:	83 ec 08             	sub    esp,0x8
 10075bb:	53                   	push   ebx
 10075bc:	56                   	push   esi
 10075bd:	e8 9a fc ff ff       	call   100725c <fatfs_find_next_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:429
        if (!next_cluster)
 10075c2:	83 c4 10             	add    esp,0x10
 10075c5:	85 c0                	test   eax,eax
 10075c7:	74 33                	je     10075fc <fatfs_fat_add_cluster_to_chain+0x5a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:423

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
 10075c9:	83 f8 ff             	cmp    eax,0xffffffff
 10075cc:	75 e8                	jne    10075b6 <fatfs_fat_add_cluster_to_chain+0x14>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:434
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
 10075ce:	83 ec 04             	sub    esp,0x4
 10075d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 10075d5:	53                   	push   ebx
 10075d6:	56                   	push   esi
 10075d7:	e8 b1 fe ff ff       	call   100748d <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:437

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
 10075dc:	83 c4 0c             	add    esp,0xc
 10075df:	6a ff                	push   0xffffffff
 10075e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 10075e5:	56                   	push   esi
 10075e6:	e8 a2 fe ff ff       	call   100748d <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:439

    return 1;
 10075eb:	83 c4 10             	add    esp,0x10
 10075ee:	b8 01 00 00 00       	mov    eax,0x1
 10075f3:	eb 0c                	jmp    1007601 <fatfs_fat_add_cluster_to_chain+0x5f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:420
{
    uint32 last_cluster = FAT32_LAST_CLUSTER;
    uint32 next_cluster = start_cluster;

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;
 10075f5:	b8 00 00 00 00       	mov    eax,0x0
 10075fa:	eb 05                	jmp    1007601 <fatfs_fat_add_cluster_to_chain+0x5f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:430
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
        if (!next_cluster)
            return 0;
 10075fc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:440

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);

    return 1;
}
 1007601:	83 c4 04             	add    esp,0x4
 1007604:	5b                   	pop    ebx
 1007605:	5e                   	pop    esi
 1007606:	c3                   	ret    

01007607 <fatfs_count_free_clusters>:
fatfs_count_free_clusters():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:446
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
 1007607:	55                   	push   ebp
 1007608:	57                   	push   edi
 1007609:	56                   	push   esi
 100760a:	53                   	push   ebx
 100760b:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:451
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
 100760e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
 1007612:	83 78 20 00          	cmp    DWORD PTR [eax+0x20],0x0
 1007616:	0f 84 b6 00 00 00    	je     10076d2 <fatfs_count_free_clusters+0xcb>
 100761c:	bd 00 00 00 00       	mov    ebp,0x0
 1007621:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 1007628:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:454
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
 1007629:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
 100762d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1007631:	03 50 14             	add    edx,DWORD PTR [eax+0x14]
 1007634:	e8 af fa ff ff       	call   10070e8 <fatfs_fat_read_sector>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:455
        if (!pbuf)
 1007639:	85 c0                	test   eax,eax
 100763b:	0f 84 96 00 00 00    	je     10076d7 <fatfs_count_free_clusters+0xd0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:460
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
        {
            if (fs->fat_type == FAT_TYPE_16)
 1007641:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
 1007645:	8b 5b 30             	mov    ebx,DWORD PTR [ebx+0x30]
 1007648:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
 100764c:	bb 00 00 00 00       	mov    ebx,0x0
 1007651:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
 1007656:	75 24                	jne    100767c <fatfs_count_free_clusters+0x75>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:462
            {
                if (FAT16_GET_16BIT_WORD(pbuf, (uint16)j) == 0)
 1007658:	8b b8 08 02 00 00    	mov    edi,DWORD PTR [eax+0x208]
 100765e:	0f b7 f3             	movzx  esi,bx
 1007661:	0f b6 54 37 01       	movzx  edx,BYTE PTR [edi+esi*1+0x1]
 1007666:	89 d1                	mov    ecx,edx
 1007668:	c1 e1 08             	shl    ecx,0x8
 100766b:	0f b6 14 37          	movzx  edx,BYTE PTR [edi+esi*1]
 100766f:	01 ca                	add    edx,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:463
                    count++;
 1007671:	83 fa 01             	cmp    edx,0x1
 1007674:	83 d5 00             	adc    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:465

                j += 2;
 1007677:	83 c3 02             	add    ebx,0x2
 100767a:	eb 36                	jmp    10076b2 <fatfs_count_free_clusters+0xab>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:469
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
 100767c:	8b b0 08 02 00 00    	mov    esi,DWORD PTR [eax+0x208]
 1007682:	0f b7 cb             	movzx  ecx,bx
 1007685:	0f b6 54 0e 03       	movzx  edx,BYTE PTR [esi+ecx*1+0x3]
 100768a:	89 d7                	mov    edi,edx
 100768c:	c1 e7 18             	shl    edi,0x18
 100768f:	0f b6 54 0e 02       	movzx  edx,BYTE PTR [esi+ecx*1+0x2]
 1007694:	c1 e2 10             	shl    edx,0x10
 1007697:	01 fa                	add    edx,edi
 1007699:	0f b6 3c 0e          	movzx  edi,BYTE PTR [esi+ecx*1]
 100769d:	01 fa                	add    edx,edi
 100769f:	0f b6 7c 0e 01       	movzx  edi,BYTE PTR [esi+ecx*1+0x1]
 10076a4:	c1 e7 08             	shl    edi,0x8
 10076a7:	01 fa                	add    edx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:470
                    count++;
 10076a9:	83 fa 01             	cmp    edx,0x1
 10076ac:	83 d5 00             	adc    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:472

                j += 4;
 10076af:	83 c3 04             	add    ebx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:458 (discriminator 1)
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
 10076b2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
 10076b8:	76 97                	jbe    1007651 <fatfs_count_free_clusters+0x4a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:451 (discriminator 2)
{
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
 10076ba:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
 10076bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 10076c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
 10076c7:	39 43 20             	cmp    DWORD PTR [ebx+0x20],eax
 10076ca:	0f 87 59 ff ff ff    	ja     1007629 <fatfs_count_free_clusters+0x22>
 10076d0:	eb 05                	jmp    10076d7 <fatfs_count_free_clusters+0xd0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:448
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
    uint32 i,j;
    uint32 count = 0;
 10076d2:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_table.c:478
            }
        }
    }

    return count;
}
 10076d7:	89 e8                	mov    eax,ebp
 10076d9:	83 c4 1c             	add    esp,0x1c
 10076dc:	5b                   	pop    ebx
 10076dd:	5e                   	pop    esi
 10076de:	5f                   	pop    edi
 10076df:	5d                   	pop    ebp
 10076e0:	c3                   	ret    
 10076e1:	66 90                	xchg   ax,ax
 10076e3:	90                   	nop

010076e4 <fatfs_add_free_space>:
fatfs_add_free_space():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:46
//-----------------------------------------------------------------------------
// fatfs_add_free_space: Allocate another cluster of free space to the end
// of a files cluster chain.
//-----------------------------------------------------------------------------
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
 10076e4:	55                   	push   ebp
 10076e5:	57                   	push   edi
 10076e6:	56                   	push   esi
 10076e7:	53                   	push   ebx
 10076e8:	83 ec 1c             	sub    esp,0x1c
 10076eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:49
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;
 10076ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 10076f3:	8b 38                	mov    edi,DWORD PTR [eax]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:52

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
 10076f5:	83 7b 24 ff          	cmp    DWORD PTR [ebx+0x24],0xffffffff
 10076f9:	74 0e                	je     1007709 <fatfs_add_free_space+0x25>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:53
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
 10076fb:	83 ec 08             	sub    esp,0x8
 10076fe:	6a ff                	push   0xffffffff
 1007700:	53                   	push   ebx
 1007701:	e8 1e fc ff ff       	call   1007324 <fatfs_set_fs_info_next_free_cluster>
 1007706:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:55 (discriminator 1)

    for (i=0;i<clusters;i++)
 1007709:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
 100770e:	74 5b                	je     100776b <fatfs_add_free_space+0x87>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:55
 1007710:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:58
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
 1007715:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
 1007719:	83 ec 04             	sub    esp,0x4
 100771c:	55                   	push   ebp
 100771d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 1007720:	53                   	push   ebx
 1007721:	e8 a5 fc ff ff       	call   10073cb <fatfs_find_blank_cluster>
 1007726:	83 c4 10             	add    esp,0x10
 1007729:	85 c0                	test   eax,eax
 100772b:	74 43                	je     1007770 <fatfs_add_free_space+0x8c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:61
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
 100772d:	83 ec 04             	sub    esp,0x4
 1007730:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 1007734:	57                   	push   edi
 1007735:	53                   	push   ebx
 1007736:	e8 52 fd ff ff       	call   100748d <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:64

            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
 100773b:	83 c4 0c             	add    esp,0xc
 100773e:	6a ff                	push   0xffffffff
 1007740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1007744:	53                   	push   ebx
 1007745:	e8 43 fd ff ff       	call   100748d <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:67

            // Adjust argument reference
            start = nextcluster;
 100774a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:68
            if (i == 0)
 100774e:	83 c4 10             	add    esp,0x10
 1007751:	85 f6                	test   esi,esi
 1007753:	75 06                	jne    100775b <fatfs_add_free_space+0x77>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:69
                *startCluster = nextcluster;
 1007755:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 1007759:	89 38                	mov    DWORD PTR [eax],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:55 (discriminator 2)

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
 100775b:	83 c6 01             	add    esi,0x1
 100775e:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
 1007762:	75 b5                	jne    1007719 <fatfs_add_free_space+0x35>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:75
        }
        else
            return 0;
    }

    return 1;
 1007764:	b8 01 00 00 00       	mov    eax,0x1
 1007769:	eb 05                	jmp    1007770 <fatfs_add_free_space+0x8c>
 100776b:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:76
}
 1007770:	83 c4 1c             	add    esp,0x1c
 1007773:	5b                   	pop    ebx
 1007774:	5e                   	pop    esi
 1007775:	5f                   	pop    edi
 1007776:	5d                   	pop    ebp
 1007777:	c3                   	ret    

01007778 <fatfs_allocate_free_space>:
fatfs_allocate_free_space():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:83
// fatfs_allocate_free_space: Add an ammount of free space to a file either from
// 'startCluster' if newFile = false, or allocating a new start to the chain if
// newFile = true.
//-----------------------------------------------------------------------------
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
 1007778:	56                   	push   esi
 1007779:	53                   	push   ebx
 100777a:	83 ec 14             	sub    esp,0x14
 100777d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
 1007781:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:89
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
        return 0;
 1007785:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:88
{
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
 100778a:	85 db                	test   ebx,ebx
 100778c:	0f 84 9b 00 00 00    	je     100782d <fatfs_allocate_free_space+0xb5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:92
        return 0;

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
 1007792:	83 7e 24 ff          	cmp    DWORD PTR [esi+0x24],0xffffffff
 1007796:	74 0e                	je     10077a6 <fatfs_allocate_free_space+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:93
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
 1007798:	83 ec 08             	sub    esp,0x8
 100779b:	6a ff                	push   0xffffffff
 100779d:	56                   	push   esi
 100779e:	e8 81 fb ff ff       	call   1007324 <fatfs_set_fs_info_next_free_cluster>
 10077a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:96

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
 10077a6:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
 10077a9:	c1 e1 09             	shl    ecx,0x9
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:97
    clusterCount = (size / clusterSize);
 10077ac:	89 d8                	mov    eax,ebx
 10077ae:	ba 00 00 00 00       	mov    edx,0x0
 10077b3:	f7 f1                	div    ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:100

    // If any left over
    if (size-(clusterSize*clusterCount))
 10077b5:	0f af c8             	imul   ecx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:101
        clusterCount++;
 10077b8:	8d 50 01             	lea    edx,[eax+0x1]
 10077bb:	39 cb                	cmp    ebx,ecx
 10077bd:	0f 45 c2             	cmovne eax,edx
 10077c0:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:104

    // Allocated first link in the chain if a new file
    if (newFile)
 10077c2:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
 10077c7:	74 40                	je     1007809 <fatfs_allocate_free_space+0x91>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:106
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
 10077c9:	83 ec 04             	sub    esp,0x4
 10077cc:	8d 44 24 10          	lea    eax,[esp+0x10]
 10077d0:	50                   	push   eax
 10077d1:	ff 76 08             	push   DWORD PTR [esi+0x8]
 10077d4:	56                   	push   esi
 10077d5:	e8 f1 fb ff ff       	call   10073cb <fatfs_find_blank_cluster>
 10077da:	83 c4 10             	add    esp,0x10
 10077dd:	85 c0                	test   eax,eax
 10077df:	74 4c                	je     100782d <fatfs_allocate_free_space+0xb5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:110
            return 0;

        // If this is all that is needed then all done
        if (clusterCount==1)
 10077e1:	83 fb 01             	cmp    ebx,0x1
 10077e4:	75 2d                	jne    1007813 <fatfs_allocate_free_space+0x9b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:112
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
 10077e6:	83 ec 04             	sub    esp,0x4
 10077e9:	6a ff                	push   0xffffffff
 10077eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 10077ef:	56                   	push   esi
 10077f0:	e8 98 fc ff ff       	call   100748d <fatfs_fat_set_cluster>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:113
            *startCluster = nextcluster;
 10077f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 10077f9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
 10077fd:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:114
            return 1;
 10077ff:	83 c4 10             	add    esp,0x10
 1007802:	b8 01 00 00 00       	mov    eax,0x1
 1007807:	eb 24                	jmp    100782d <fatfs_allocate_free_space+0xb5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:119
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
 1007809:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
 100780d:	8b 00                	mov    eax,DWORD PTR [eax]
 100780f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:121

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
 1007813:	83 ec 04             	sub    esp,0x4
 1007816:	53                   	push   ebx
 1007817:	8d 44 24 14          	lea    eax,[esp+0x14]
 100781b:	50                   	push   eax
 100781c:	56                   	push   esi
 100781d:	e8 c2 fe ff ff       	call   10076e4 <fatfs_add_free_space>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:89
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
        return 0;
 1007822:	83 c4 10             	add    esp,0x10
 1007825:	85 c0                	test   eax,eax
 1007827:	0f 95 c0             	setne  al
 100782a:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:125

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
            return 0;

    return 1;
}
 100782d:	83 c4 14             	add    esp,0x14
 1007830:	5b                   	pop    ebx
 1007831:	5e                   	pop    esi
 1007832:	c3                   	ret    

01007833 <fatfs_add_file_entry>:
fatfs_add_file_entry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:267
}
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
 1007833:	55                   	push   ebp
 1007834:	57                   	push   edi
 1007835:	56                   	push   esi
 1007836:	53                   	push   ebx
 1007837:	83 ec 5c             	sub    esp,0x5c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:285
    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
        return 0;
 100783a:	c7 44 24 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
 1007841:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:284

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
 1007842:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
 1007846:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
 100784a:	0f 84 a3 03 00 00    	je     1007bf3 <fatfs_add_file_entry+0x3c0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:290
        return 0;

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
 1007850:	83 ec 0c             	sub    esp,0xc
 1007853:	ff b4 24 84 00 00 00 	push   DWORD PTR [esp+0x84]
 100785a:	e8 63 ed ff ff       	call   10065c2 <fatfs_lfn_entries_required>
 100785f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:291
    if (!entryCount)
 1007863:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:292
        return 0;
 1007866:	c7 44 24 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
 100786d:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:291

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
    if (!entryCount)
 100786e:	85 c0                	test   eax,eax
 1007870:	0f 84 7d 03 00 00    	je     1007bf3 <fatfs_add_file_entry+0x3c0>
fatfs_find_free_dir_offset():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:141
    int x=0;
    int possible_spaces = 0;
    int start_recorded = 0;

    // No entries required?
    if (entryCount == 0)
 1007876:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 100787a:	83 c0 01             	add    eax,0x1
 100787d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
 1007881:	0f 84 6c 03 00 00    	je     1007bf3 <fatfs_add_file_entry+0x3c0>
 1007887:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 100788e:	00 
 100788f:	bd 00 00 00 00       	mov    ebp,0x0
 1007894:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 100789b:	00 
 100789c:	c7 44 24 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
 10078a3:	00 
 10078a4:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:148

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
 10078a9:	6a 00                	push   0x0
 10078ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
 10078af:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 10078b3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 10078b7:	e8 55 bf ff ff       	call   1003811 <fatfs_sector_reader>
 10078bc:	83 c4 10             	add    esp,0x10
 10078bf:	85 c0                	test   eax,eax
 10078c1:	0f 84 cf 00 00 00    	je     1007996 <fatfs_add_file_entry+0x163>
 10078c7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
 10078cb:	8d 78 44             	lea    edi,[eax+0x44]
 10078ce:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:160

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
 10078d3:	83 ec 0c             	sub    esp,0xc
 10078d6:	57                   	push   edi
 10078d7:	e8 04 ec ff ff       	call   10064e0 <fatfs_entry_lfn_text>
 10078dc:	83 c4 10             	add    esp,0x10
 10078df:	85 c0                	test   eax,eax
 10078e1:	74 25                	je     1007908 <fatfs_add_file_entry+0xd5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:163
                {
                    // First entry?
                    if (possible_spaces == 0)
 10078e3:	85 db                	test   ebx,ebx
 10078e5:	0f 44 ee             	cmove  ebp,esi
 10078e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 10078ec:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
 10078f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 10078f5:	b8 01 00 00 00       	mov    eax,0x1
 10078fa:	0f 45 44 24 08       	cmovne eax,DWORD PTR [esp+0x8]
 10078ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:173
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns
                    // out to be deleted...
                    possible_spaces++;
 1007903:	83 c3 01             	add    ebx,0x1
 1007906:	eb 74                	jmp    100797c <fatfs_add_file_entry+0x149>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:179
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
 1007908:	0f b6 07             	movzx  eax,BYTE PTR [edi]
 100790b:	3c e5                	cmp    al,0xe5
 100790d:	75 2e                	jne    100793d <fatfs_add_file_entry+0x10a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:182
                    {
                        // First entry?
                        if (possible_spaces == 0)
 100790f:	85 db                	test   ebx,ebx
 1007911:	0f 44 ee             	cmove  ebp,esi
 1007914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1007918:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
 100791d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 1007921:	b8 01 00 00 00       	mov    eax,0x1
 1007926:	0f 45 44 24 08       	cmovne eax,DWORD PTR [esp+0x8]
 100792b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:190
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
 100792f:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:193

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
 1007932:	39 5c 24 10          	cmp    DWORD PTR [esp+0x10],ebx
 1007936:	7f 44                	jg     100797c <fatfs_add_file_entry+0x149>
 1007938:	e9 04 01 00 00       	jmp    1007a41 <fatfs_add_file_entry+0x20e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:199
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
 100793d:	84 c0                	test   al,al
 100793f:	75 2e                	jne    100796f <fatfs_add_file_entry+0x13c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:202
                    {
                        // First entry?
                        if (possible_spaces == 0)
 1007941:	85 db                	test   ebx,ebx
 1007943:	0f 44 ee             	cmove  ebp,esi
 1007946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 100794a:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
 100794f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 1007953:	b8 01 00 00 00       	mov    eax,0x1
 1007958:	0f 45 44 24 08       	cmovne eax,DWORD PTR [esp+0x8]
 100795d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:211
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        // Increment the blank entries count
                        possible_spaces++;
 1007961:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:214

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
 1007964:	39 5c 24 10          	cmp    DWORD PTR [esp+0x10],ebx
 1007968:	7f 12                	jg     100797c <fatfs_add_file_entry+0x149>
 100796a:	e9 d2 00 00 00       	jmp    1007a41 <fatfs_add_file_entry+0x20e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:222
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
                        start_recorded = 0;
 100796f:	c7 44 24 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
 1007976:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:221
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
 1007977:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:151
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 100797c:	83 c6 01             	add    esi,0x1
 100797f:	83 c7 20             	add    edi,0x20
 1007982:	89 f0                	mov    eax,esi
 1007984:	3c 10                	cmp    al,0x10
 1007986:	0f 85 47 ff ff ff    	jne    10078d3 <fatfs_add_file_entry+0xa0>
 100798c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
 1007991:	e9 13 ff ff ff       	jmp    10078a9 <fatfs_add_file_entry+0x76>
 1007996:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:233
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
 1007998:	83 ec 04             	sub    esp,0x4
 100799b:	8d 44 24 30          	lea    eax,[esp+0x30]
 100799f:	50                   	push   eax
 10079a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
 10079a4:	ff 70 08             	push   DWORD PTR [eax+0x8]
 10079a7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 10079ab:	e8 1b fa ff ff       	call   10073cb <fatfs_find_blank_cluster>
 10079b0:	83 c4 10             	add    esp,0x10
 10079b3:	85 c0                	test   eax,eax
 10079b5:	0f 84 2e 02 00 00    	je     1007be9 <fatfs_add_file_entry+0x3b6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:237
                return 0;

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
 10079bb:	83 ec 04             	sub    esp,0x4
 10079be:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 10079c2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 10079c6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 10079ca:	e8 d3 fb ff ff       	call   10075a2 <fatfs_fat_add_cluster_to_chain>
 10079cf:	83 c4 10             	add    esp,0x10
 10079d2:	85 c0                	test   eax,eax
 10079d4:	0f 84 0f 02 00 00    	je     1007be9 <fatfs_add_file_entry+0x3b6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:241
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
 10079da:	83 ec 04             	sub    esp,0x4
 10079dd:	68 00 02 00 00       	push   0x200
 10079e2:	6a 00                	push   0x0
 10079e4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
 10079e8:	83 c0 44             	add    eax,0x44
 10079eb:	50                   	push   eax
 10079ec:	e8 ce 14 00 00       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:242
            for (i=0;i<fs->sectors_per_cluster;i++)
 10079f1:	83 c4 10             	add    esp,0x10
 10079f4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
 10079f8:	80 38 00             	cmp    BYTE PTR [eax],0x0
 10079fb:	74 29                	je     1007a26 <fatfs_add_file_entry+0x1f3>
 10079fd:	bb 00 00 00 00       	mov    ebx,0x0
 1007a02:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:244
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
 1007a04:	6a 00                	push   0x0
 1007a06:	0f b6 c3             	movzx  eax,bl
 1007a09:	50                   	push   eax
 1007a0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
 1007a0e:	57                   	push   edi
 1007a0f:	e8 65 bf ff ff       	call   1003979 <fatfs_write_sector>
 1007a14:	83 c4 10             	add    esp,0x10
 1007a17:	85 c0                	test   eax,eax
 1007a19:	0f 84 ca 01 00 00    	je     1007be9 <fatfs_add_file_entry+0x3b6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:242
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
 1007a1f:	83 c3 01             	add    ebx,0x1
 1007a22:	3a 1f                	cmp    bl,BYTE PTR [edi]
 1007a24:	72 de                	jb     1007a04 <fatfs_add_file_entry+0x1d1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:148

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
 1007a26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1007a2a:	85 c0                	test   eax,eax
 1007a2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1007a30:	0f 45 54 24 04       	cmovne edx,DWORD PTR [esp+0x4]
 1007a35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
 1007a39:	b8 00 00 00 00       	mov    eax,0x0
 1007a3e:	0f 44 e8             	cmove  ebp,eax
 1007a41:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
 1007a45:	8d 70 0b             	lea    esi,[eax+0xb]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:242 (discriminator 6)
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
 1007a48:	89 c1                	mov    ecx,eax
 1007a4a:	b8 00 00 00 00       	mov    eax,0x0
fatfs_add_file_entry():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:305 (discriminator 6)
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
 1007a4f:	bb 80 ff ff ff       	mov    ebx,0xffffff80
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:305 (discriminator 7)
 1007a54:	89 c2                	mov    edx,eax
 1007a56:	83 e2 01             	and    edx,0x1
 1007a59:	0f 45 d3             	cmovne edx,ebx
 1007a5c:	83 c1 01             	add    ecx,0x1
 1007a5f:	d0 e8                	shr    al,1
 1007a61:	02 41 ff             	add    al,BYTE PTR [ecx-0x1]
 1007a64:	01 d0                	add    eax,edx
 1007a66:	39 ce                	cmp    esi,ecx
 1007a68:	75 ea                	jne    1007a54 <fatfs_add_file_entry+0x221>
 1007a6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
 1007a6e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
 1007a72:	bf 00 00 00 00       	mov    edi,0x0
 1007a77:	c7 44 24 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
 1007a7e:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:351
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
 1007a7f:	0f b6 c0             	movzx  eax,al
 1007a82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:361
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
 1007a86:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
 1007a8a:	83 c0 44             	add    eax,0x44
 1007a8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
 1007a91:	89 e8                	mov    eax,ebp
 1007a93:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
 1007a97:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
 1007a9b:	eb 0d                	jmp    1007aaa <fatfs_add_file_entry+0x277>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:364
                    return 0;

                dirtySector = 0;
 1007a9d:	c7 44 24 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
 1007aa4:	00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:314

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
 1007aa5:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
 1007aaa:	6a 00                	push   0x0
 1007aac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 1007ab0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 1007ab4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
 1007ab8:	e8 54 bd ff ff       	call   1003811 <fatfs_sector_reader>
 1007abd:	83 c4 10             	add    esp,0x10
 1007ac0:	85 c0                	test   eax,eax
 1007ac2:	0f 84 27 01 00 00    	je     1007bef <fatfs_add_file_entry+0x3bc>
 1007ac8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
 1007acc:	8d 70 44             	lea    esi,[eax+0x44]
 1007acf:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:324
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
 1007ad4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
 1007ad8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
 1007adc:	0f 94 c2             	sete   dl
 1007adf:	85 ff                	test   edi,edi
 1007ae1:	0f 94 c0             	sete   al
 1007ae4:	84 c2                	test   dl,al
 1007ae6:	74 06                	je     1007aee <fatfs_add_file_entry+0x2bb>
 1007ae8:	38 5c 24 0c          	cmp    BYTE PTR [esp+0xc],bl
 1007aec:	74 0a                	je     1007af8 <fatfs_add_file_entry+0x2c5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:328
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
 1007aee:	85 ff                	test   edi,edi
 1007af0:	0f 84 ab 00 00 00    	je     1007ba1 <fatfs_add_file_entry+0x36e>
 1007af6:	eb 05                	jmp    1007afd <fatfs_add_file_entry+0x2ca>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:325
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
                        foundEnd = 1;
 1007af8:	bf 01 00 00 00       	mov    edi,0x1
 1007afd:	89 d8                	mov    eax,ebx
 1007aff:	c1 e0 05             	shl    eax,0x5
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:330

                // Start adding filename
                if (foundEnd)
                {
                    if (entryCount==0)
 1007b02:	85 ed                	test   ebp,ebp
 1007b04:	75 7b                	jne    1007b81 <fatfs_add_file_entry+0x34e>
 1007b06:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:333
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
 1007b08:	83 ec 0c             	sub    esp,0xc
 1007b0b:	ff b4 24 94 00 00 00 	push   DWORD PTR [esp+0x94]
 1007b12:	8d 5c 24 40          	lea    ebx,[esp+0x40]
 1007b16:	53                   	push   ebx
 1007b17:	ff b4 24 94 00 00 00 	push   DWORD PTR [esp+0x94]
 1007b1e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
 1007b25:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
 1007b2c:	e8 ea eb ff ff       	call   100671b <fatfs_sfn_create_entry>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:337

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
 1007b31:	83 c4 20             	add    esp,0x20
 1007b34:	6a 01                	push   0x1
 1007b36:	6a 01                	push   0x1
 1007b38:	6a 01                	push   0x1
 1007b3a:	53                   	push   ebx
 1007b3b:	e8 14 c2 ff ff       	call   1003d54 <fatfs_update_timestamps>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:340
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
 1007b40:	83 c4 0c             	add    esp,0xc
 1007b43:	6a 20                	push   0x20
 1007b45:	53                   	push   ebx
 1007b46:	0f b7 ef             	movzx  ebp,di
 1007b49:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
 1007b4d:	8d 44 28 44          	lea    eax,[eax+ebp*1+0x44]
 1007b51:	50                   	push   eax
 1007b52:	e8 19 1b 00 00       	call   1009670 <memcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:343

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
 1007b57:	83 c4 0c             	add    esp,0xc
 1007b5a:	6a 01                	push   0x1
 1007b5c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
 1007b60:	83 c0 44             	add    eax,0x44
 1007b63:	50                   	push   eax
 1007b64:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
 1007b68:	ff b0 44 02 00 00    	push   DWORD PTR [eax+0x244]
 1007b6e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
 1007b75:	ff 50 38             	call   DWORD PTR [eax+0x38]
 1007b78:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
 1007b7c:	83 c4 10             	add    esp,0x10
 1007b7f:	eb 72                	jmp    1007bf3 <fatfs_add_file_entry+0x3c0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:348
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
 1007b81:	83 ed 01             	sub    ebp,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:351

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
 1007b84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1007b88:	55                   	push   ebp
 1007b89:	56                   	push   esi
 1007b8a:	ff b4 24 84 00 00 00 	push   DWORD PTR [esp+0x84]
 1007b91:	e8 60 ea ff ff       	call   10065f6 <fatfs_filename_to_lfn>
 1007b96:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:352
                        dirtySector = 1;
 1007b99:	c7 44 24 10 01 00 00 	mov    DWORD PTR [esp+0x10],0x1
 1007ba0:	00 
 1007ba1:	83 c3 01             	add    ebx,0x1
 1007ba4:	83 c6 20             	add    esi,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:317 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
 1007ba7:	83 fb 10             	cmp    ebx,0x10
 1007baa:	0f 85 24 ff ff ff    	jne    1007ad4 <fatfs_add_file_entry+0x2a1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:359
#endif
                }
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
 1007bb0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
 1007bb5:	0f 84 ea fe ff ff    	je     1007aa5 <fatfs_add_file_entry+0x272>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:361
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
 1007bbb:	83 ec 04             	sub    esp,0x4
 1007bbe:	6a 01                	push   0x1
 1007bc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 1007bc4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
 1007bc8:	ff b0 44 02 00 00    	push   DWORD PTR [eax+0x244]
 1007bce:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
 1007bd5:	ff 50 38             	call   DWORD PTR [eax+0x38]
 1007bd8:	83 c4 10             	add    esp,0x10
 1007bdb:	85 c0                	test   eax,eax
 1007bdd:	0f 85 ba fe ff ff    	jne    1007a9d <fatfs_add_file_entry+0x26a>
 1007be3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
 1007be7:	eb 0a                	jmp    1007bf3 <fatfs_add_file_entry+0x3c0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:300
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
        return 0;
 1007be9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
 1007bed:	eb 04                	jmp    1007bf3 <fatfs_add_file_entry+0x3c0>
 1007bef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/fat/fat_write.c:372
        else
            return 0;
    } // End of while loop

    return 0;
}
 1007bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1007bf7:	83 c4 5c             	add    esp,0x5c
 1007bfa:	5b                   	pop    ebx
 1007bfb:	5e                   	pop    esi
 1007bfc:	5f                   	pop    edi
 1007bfd:	5d                   	pop    ebp
 1007bfe:	c3                   	ret    
 1007bff:	90                   	nop

01007c00 <ataWaitForDRQ>:
ataWaitForDRQ():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:22
float ticks=0;
struct ataDeviceInfo_t* atablockingReadDev;

//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
 1007c00:	57                   	push   edi
 1007c01:	56                   	push   esi
 1007c02:	53                   	push   ebx
 1007c03:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 1007c07:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:23
    int ticks = forHowManyMS*kTicksPerMS;
 1007c0c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
 1007c10:	0f af 0d c4 97 12 00 	imul   ecx,DWORD PTR ds:0x1297c4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:25
    uint8_t inValue=0;
    while (ticks > 0)
 1007c17:	85 c9                	test   ecx,ecx
 1007c19:	7e 26                	jle    1007c41 <ataWaitForDRQ+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:30
    {
        STI
        //waitTicks(1);
        __asm__("sti\nhlt\n");
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
 1007c1b:	0f b7 87 69 02 00 00 	movzx  eax,WORD PTR [edi+0x269]
 1007c22:	8d 50 07             	lea    edx,[eax+0x7]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:27
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
    while (ticks > 0)
    {
        STI
 1007c25:	fb                   	sti    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:29
        //waitTicks(1);
        __asm__("sti\nhlt\n");
 1007c26:	fb                   	sti    
 1007c27:	f4                   	hlt    
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1007c28:	ec                   	in     al,dx
 1007c29:	89 c6                	mov    esi,eax
ataWaitForDRQ():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:31
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
        if (toBeSet && (inValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ)
 1007c2b:	84 db                	test   bl,bl
 1007c2d:	74 06                	je     1007c35 <ataWaitForDRQ+0x35>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:31 (discriminator 1)
 1007c2f:	a8 08                	test   al,0x8
 1007c31:	74 07                	je     1007c3a <ataWaitForDRQ+0x3a>
 1007c33:	eb 31                	jmp    1007c66 <ataWaitForDRQ+0x66>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:33 (discriminator 1)
                return 0;
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
 1007c35:	83 e0 08             	and    eax,0x8
 1007c38:	74 31                	je     1007c6b <ataWaitForDRQ+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:25
//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
    while (ticks > 0)
 1007c3a:	83 e9 01             	sub    ecx,0x1
 1007c3d:	75 e6                	jne    1007c25 <ataWaitForDRQ+0x25>
 1007c3f:	eb 05                	jmp    1007c46 <ataWaitForDRQ+0x46>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:24

//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
 1007c41:	be 00 00 00 00       	mov    esi,0x0
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007c46:	8b 87 69 02 00 00    	mov    eax,DWORD PTR [edi+0x269]
 1007c4c:	8d 50 01             	lea    edx,[eax+0x1]
 1007c4f:	ec                   	in     al,dx
ataWaitForDRQ():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:37
                return 0;
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
                return 0;
        ticks--;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
 1007c50:	0f b6 d0             	movzx  edx,al
 1007c53:	89 15 7c 8c 07 01    	mov    DWORD PTR ds:0x1078c7c,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:38
    if ((hdError & 0x4)==0x4)
 1007c59:	83 e0 04             	and    eax,0x4
 1007c5c:	b8 00 00 00 00       	mov    eax,0x0
 1007c61:	0f 44 c6             	cmove  eax,esi
 1007c64:	eb 05                	jmp    1007c6b <ataWaitForDRQ+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:32
        STI
        //waitTicks(1);
        __asm__("sti\nhlt\n");
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
        if (toBeSet && (inValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ)
                return 0;
 1007c66:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:41
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
    if ((hdError & 0x4)==0x4)
        return 0;
    return inValue;
}
 1007c6b:	5b                   	pop    ebx
 1007c6c:	5e                   	pop    esi
 1007c6d:	5f                   	pop    edi
 1007c6e:	c3                   	ret    

01007c6f <ataWaitForIdle>:
ataWaitForIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:44

uint8_t ataWaitForIdle(struct ataDeviceInfo_t* devInfo)
{
 1007c6f:	53                   	push   ebx
 1007c70:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:48
    ticks = 0;
    uint8_t lValue=0;
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
 1007c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1007c77:	8b 98 69 02 00 00    	mov    ebx,DWORD PTR [eax+0x269]
 1007c7d:	8d 53 07             	lea    edx,[ebx+0x7]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007c80:	ec                   	in     al,dx
 1007c81:	89 c1                	mov    ecx,eax
ataWaitForIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:51
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
 1007c83:	c7 05 70 8c 07 01 00 	mov    DWORD PTR ds:0x1078c70,0x3f800000
 1007c8a:	00 80 3f 
 1007c8d:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 1007c92:	8d 04 80             	lea    eax,[eax+eax*4]
 1007c95:	01 c0                	add    eax,eax
 1007c97:	89 04 24             	mov    DWORD PTR [esp],eax
 1007c9a:	db 04 24             	fild   DWORD PTR [esp]
 1007c9d:	d9 5c 24 04          	fstp   DWORD PTR [esp+0x4]
 1007ca1:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
 1007ca5:	d9 ee                	fldz   
 1007ca7:	d9 c9                	fxch   st(1)
 1007ca9:	db e9                	fucomi st,st(1)
 1007cab:	dd d9                	fstp   st(1)
 1007cad:	72 5a                	jb     1007d09 <ataWaitForIdle+0x9a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:53
    {
        __asm__("sti\nhlt\n");
 1007caf:	fb                   	sti    
 1007cb0:	f4                   	hlt    
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007cb1:	ec                   	in     al,dx
 1007cb2:	89 c1                	mov    ecx,eax
ataWaitForIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:56
        lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
 1007cb4:	25 88 00 00 00       	and    eax,0x88
 1007cb9:	74 60                	je     1007d1b <ataWaitForIdle+0xac>
 1007cbb:	d9 e8                	fld1   
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:58
                    return 0;
        ticks++;
 1007cbd:	d9 e8                	fld1   
 1007cbf:	eb 1c                	jmp    1007cdd <ataWaitForIdle+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:53
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
    {
        __asm__("sti\nhlt\n");
 1007cc1:	fb                   	sti    
 1007cc2:	f4                   	hlt    
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007cc3:	ec                   	in     al,dx
 1007cc4:	89 c1                	mov    ecx,eax
ataWaitForIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:56
        lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
 1007cc6:	25 88 00 00 00       	and    eax,0x88
 1007ccb:	75 0c                	jne    1007cd9 <ataWaitForIdle+0x6a>
 1007ccd:	dd d8                	fstp   st(0)
 1007ccf:	dd d8                	fstp   st(0)
 1007cd1:	d9 1d 70 8c 07 01    	fstp   DWORD PTR ds:0x1078c70
 1007cd7:	eb 44                	jmp    1007d1d <ataWaitForIdle+0xae>
 1007cd9:	d9 ca                	fxch   st(2)
 1007cdb:	d9 c9                	fxch   st(1)
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:58
                    return 0;
        ticks++;
 1007cdd:	dc c1                	fadd   st(1),st
 1007cdf:	d9 c9                	fxch   st(1)
 1007ce1:	d9 5c 24 04          	fstp   DWORD PTR [esp+0x4]
 1007ce5:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:51
    uint8_t lValue=0;
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
 1007ce9:	d9 c1                	fld    st(1)
 1007ceb:	d8 c1                	fadd   st,st(1)
 1007ced:	d9 5c 24 04          	fstp   DWORD PTR [esp+0x4]
 1007cf1:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
 1007cf5:	d9 cb                	fxch   st(3)
 1007cf7:	db e9                	fucomi st,st(1)
 1007cf9:	dd d9                	fstp   st(1)
 1007cfb:	73 c4                	jae    1007cc1 <ataWaitForIdle+0x52>
 1007cfd:	dd d8                	fstp   st(0)
 1007cff:	dd d8                	fstp   st(0)
 1007d01:	d9 1d 70 8c 07 01    	fstp   DWORD PTR ds:0x1078c70
 1007d07:	eb 02                	jmp    1007d0b <ataWaitForIdle+0x9c>
 1007d09:	dd d8                	fstp   st(0)
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007d0b:	8d 53 01             	lea    edx,[ebx+0x1]
 1007d0e:	ec                   	in     al,dx
ataWaitForIdle():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:60
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
                    return 0;
        ticks++;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
 1007d0f:	0f b6 c0             	movzx  eax,al
 1007d12:	a3 7c 8c 07 01       	mov    ds:0x1078c7c,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:61
    return lValue;
 1007d17:	89 c8                	mov    eax,ecx
 1007d19:	eb 02                	jmp    1007d1d <ataWaitForIdle+0xae>
 1007d1b:	dd d8                	fstp   st(0)
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:62
}
 1007d1d:	83 c4 08             	add    esp,0x8
 1007d20:	5b                   	pop    ebx
 1007d21:	c3                   	ret    

01007d22 <ataControllerIsReady>:
ataControllerIsReady():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:66


uint8_t ataControllerIsReady(struct ataDeviceInfo_t* devInfo)
{
 1007d22:	55                   	push   ebp
 1007d23:	57                   	push   edi
 1007d24:	56                   	push   esi
 1007d25:	53                   	push   ebx
 1007d26:	83 ec 0c             	sub    esp,0xc
 1007d29:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:69
    int ticks = 0;
    
    int lStatus=0;
 1007d2d:	bd 00 00 00 00       	mov    ebp,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:67
}


uint8_t ataControllerIsReady(struct ataDeviceInfo_t* devInfo)
{
    int ticks = 0;
 1007d32:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:72
    
    int lStatus=0;
    uint8_t err=0;

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
 1007d37:	eb 2a                	jmp    1007d63 <ataControllerIsReady+0x41>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007d39:	0f b7 87 69 02 00 00 	movzx  eax,WORD PTR [edi+0x269]
 1007d40:	8d 50 07             	lea    edx,[eax+0x7]
 1007d43:	ec                   	in     al,dx
 1007d44:	89 c3                	mov    ebx,eax
ataControllerIsReady():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:75
    {
        lStatus=inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
 1007d46:	83 ec 0c             	sub    esp,0xc
 1007d49:	6a 01                	push   0x1
 1007d4b:	e8 a8 28 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:76
        ticks++;
 1007d50:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:77
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
 1007d53:	89 dd                	mov    ebp,ebx
 1007d55:	81 e5 d0 00 00 00    	and    ebp,0xd0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:78
        if (lStatus & ATA_STATUS_READY )
 1007d5b:	83 c4 10             	add    esp,0x10
 1007d5e:	f6 c3 40             	test   bl,0x40
 1007d61:	75 71                	jne    1007dd4 <ataControllerIsReady+0xb2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:72
    int ticks = 0;
    
    int lStatus=0;
    uint8_t err=0;

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
 1007d63:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 1007d68:	8d 04 80             	lea    eax,[eax+eax*4]
 1007d6b:	01 c0                	add    eax,eax
 1007d6d:	39 c6                	cmp    esi,eax
 1007d6f:	7e c8                	jle    1007d39 <ataControllerIsReady+0x17>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:82
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
        if (lStatus & ATA_STATUS_READY )
                return true;
    }

    if (lStatus==ATA_STATUS_ERROR || lStatus==ATA_STATUS_BUSY)
 1007d71:	81 fd 80 00 00 00    	cmp    ebp,0x80
 1007d77:	75 41                	jne    1007dba <ataControllerIsReady+0x98>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007d79:	ba f1 01 00 00       	mov    edx,0x1f1
 1007d7e:	ec                   	in     al,dx
 1007d7f:	89 c3                	mov    ebx,eax
ataControllerIsReady():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:86
    {
         err=inb(0x1f1);
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007d81:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007d88:	74 4a                	je     1007dd4 <ataControllerIsReady+0xb2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:87
            printd(DEBUG_HARDDRIVE,"ataControllerIsReady: DRQ wait failed, lStatus=%02X, err=%02X\n",lStatus,err);
 1007d8a:	0f b6 c0             	movzx  eax,al
 1007d8d:	50                   	push   eax
 1007d8e:	68 80 00 00 00       	push   0x80
 1007d93:	68 90 0c 04 01       	push   0x1040c90
 1007d98:	6a 08                	push   0x8
 1007d9a:	e8 58 1e 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:90
#endif
    }
    if ( (lStatus & ATA_STATUS_READY)==0 && err==4)
 1007d9f:	83 c4 10             	add    esp,0x10
 1007da2:	f7 c5 40 00 00 00    	test   ebp,0x40
 1007da8:	75 10                	jne    1007dba <ataControllerIsReady+0x98>
 1007daa:	80 fb 04             	cmp    bl,0x4
 1007dad:	0f 94 c0             	sete   al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:91
        lStatus=ATA_STATUS_READY;
 1007db0:	84 c0                	test   al,al
 1007db2:	b8 40 00 00 00       	mov    eax,0x40
 1007db7:	0f 45 e8             	cmovne ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:93
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007dba:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007dc1:	74 11                	je     1007dd4 <ataControllerIsReady+0xb2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:94
            printk("ataControllerIsReady: returning %02X\n",lStatus);
 1007dc3:	83 ec 08             	sub    esp,0x8
 1007dc6:	55                   	push   ebp
 1007dc7:	68 d0 0c 04 01       	push   0x1040cd0
 1007dcc:	e8 0e 1e 00 00       	call   1009bdf <printk>
 1007dd1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:97
#endif
    return true;
}
 1007dd4:	b8 01 00 00 00       	mov    eax,0x1
 1007dd9:	83 c4 0c             	add    esp,0xc
 1007ddc:	5b                   	pop    ebx
 1007ddd:	5e                   	pop    esi
 1007dde:	5f                   	pop    edi
 1007ddf:	5d                   	pop    ebp
 1007de0:	c3                   	ret    

01007de1 <ataSelectDrive>:
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:115
		return true;
	return 1;
}

bool ataSelectDrive(struct ataDeviceInfo_t* devInfo, uint8_t head)
{
 1007de1:	57                   	push   edi
 1007de2:	56                   	push   esi
 1007de3:	53                   	push   ebx
 1007de4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 1007de8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:116
    ataWaitForIdle(devInfo);
 1007dec:	56                   	push   esi
 1007ded:	e8 7d fe ff ff       	call   1007c6f <ataWaitForIdle>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:117
    outb(devInfo->ioPort+ATA_DRIVE_SELECT, devInfo->driveHeadPortDesignation | (head& 0xF) ); 
 1007df2:	8b 8e 69 02 00 00    	mov    ecx,DWORD PTR [esi+0x269]
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1007df8:	89 d8                	mov    eax,ebx
 1007dfa:	83 e0 0f             	and    eax,0xf
 1007dfd:	0a 86 6e 02 00 00    	or     al,BYTE PTR [esi+0x26e]
 1007e03:	8d 51 06             	lea    edx,[ecx+0x6]
 1007e06:	ee                   	out    dx,al
ataStatusIsOk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:101
    return true;
}

static bool ataStatusIsOk(struct ataDeviceInfo_t* devInfo)
{
	unsigned char status = inb(devInfo->ioPort+ATA_PORT_STATUS);
 1007e07:	8d 51 07             	lea    edx,[ecx+0x7]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1007e0a:	ec                   	in     al,dx
ataStatusIsOk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:103

	if (status & ATA_STATUS_BUSY)
 1007e0b:	83 c4 04             	add    esp,0x4
 1007e0e:	84 c0                	test   al,al
 1007e10:	0f 88 92 00 00 00    	js     1007ea8 <ataSelectDrive+0xc7>
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:136
        unsigned lDrive=inb(devInfo->ioPort+ATA_DRIVE_SELECT);
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
    }
#endif
        
    return 0;
 1007e16:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:128
            printk("ataSelectDrive: Failed to select drive %u, bus %u, status=0x%02X is not ok\n", devInfo->driveNo, devInfo->bus, inb(devInfo->ioPort+ATA_PORT_STATUS));
#endif
            return inb(devInfo->ioPort+ATA_PORT_STATUS);
    }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007e1b:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007e22:	0f 84 8e 00 00 00    	je     1007eb6 <ataSelectDrive+0xd5>
 1007e28:	eb 2f                	jmp    1007e59 <ataSelectDrive+0x78>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007e2a:	ec                   	in     al,dx
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:123
    //printk("Sending 0x%02X", drive==master?ATA_DRIVE_MASTER:ATA_DRIVE_SLAVE | (head& 0xF));
    if (!ataStatusIsOk(devInfo))
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataSelectDrive: Failed to select drive %u, bus %u, status=0x%02X is not ok\n", devInfo->driveNo, devInfo->bus, inb(devInfo->ioPort+ATA_PORT_STATUS));
 1007e2b:	0f b6 c0             	movzx  eax,al
 1007e2e:	50                   	push   eax
 1007e2f:	ff b6 61 02 00 00    	push   DWORD PTR [esi+0x261]
 1007e35:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 1007e3b:	68 f8 0c 04 01       	push   0x1040cf8
 1007e40:	e8 9a 1d 00 00       	call   1009bdf <printk>
 1007e45:	83 c4 10             	add    esp,0x10
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007e48:	8b 86 69 02 00 00    	mov    eax,DWORD PTR [esi+0x269]
 1007e4e:	8d 50 07             	lea    edx,[eax+0x7]
 1007e51:	ec                   	in     al,dx
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:125
#endif
            return inb(devInfo->ioPort+ATA_PORT_STATUS);
 1007e52:	84 c0                	test   al,al
 1007e54:	0f 95 c0             	setne  al
 1007e57:	eb 5d                	jmp    1007eb6 <ataSelectDrive+0xd5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:130
    }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
    {
        wait(10);
 1007e59:	83 ec 0c             	sub    esp,0xc
 1007e5c:	6a 0a                	push   0xa
 1007e5e:	e8 95 27 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:131
        unsigned lDrive=inb(devInfo->ioPort+ATA_DRIVE_SELECT);
 1007e63:	8b 8e 69 02 00 00    	mov    ecx,DWORD PTR [esi+0x269]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007e69:	8d 51 06             	lea    edx,[ecx+0x6]
 1007e6c:	ec                   	in     al,dx
 1007e6d:	89 c3                	mov    ebx,eax
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:131
 1007e6f:	0f b6 f8             	movzx  edi,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007e72:	8d 51 01             	lea    edx,[ecx+0x1]
 1007e75:	ec                   	in     al,dx
ataSelectDrive():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:132
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
 1007e76:	0f b6 c8             	movzx  ecx,al
 1007e79:	83 e3 10             	and    ebx,0x10
 1007e7c:	ba f6 dc 05 01       	mov    edx,0x105dcf6
 1007e81:	b8 00 64 06 01       	mov    eax,0x1066400
 1007e86:	0f 44 c2             	cmove  eax,edx
 1007e89:	89 0c 24             	mov    DWORD PTR [esp],ecx
 1007e8c:	57                   	push   edi
 1007e8d:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 1007e93:	50                   	push   eax
 1007e94:	68 44 0d 04 01       	push   0x1040d44
 1007e99:	e8 41 1d 00 00       	call   1009bdf <printk>
 1007e9e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:136
    }
#endif
        
    return 0;
 1007ea1:	b8 00 00 00 00       	mov    eax,0x0
 1007ea6:	eb 0e                	jmp    1007eb6 <ataSelectDrive+0xd5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:122
    outb(devInfo->ioPort+ATA_DRIVE_SELECT, devInfo->driveHeadPortDesignation | (head& 0xF) ); 
    //printk("Sending 0x%02X", drive==master?ATA_DRIVE_MASTER:ATA_DRIVE_SLAVE | (head& 0xF));
    if (!ataStatusIsOk(devInfo))
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007ea8:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007eaf:	74 97                	je     1007e48 <ataSelectDrive+0x67>
 1007eb1:	e9 74 ff ff ff       	jmp    1007e2a <ataSelectDrive+0x49>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:137
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
    }
#endif
        
    return 0;
}
 1007eb6:	5b                   	pop    ebx
 1007eb7:	5e                   	pop    esi
 1007eb8:	5f                   	pop    edi
 1007eb9:	c3                   	ret    

01007eba <ataInit>:
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:180
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataResetController: controller is ready\n");
#endif
}
int ataInit(struct ataDeviceInfo_t* devInfo)
{
 1007eba:	57                   	push   edi
 1007ebb:	56                   	push   esi
 1007ebc:	53                   	push   ebx
 1007ebd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1007ec1:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1007ec8:	8d 50 07             	lea    edx,[eax+0x7]
 1007ecb:	b8 04 00 00 00       	mov    eax,0x4
 1007ed0:	ee                   	out    dx,al
ataResetController():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:163
}
*/
static void ataResetController(struct ataDeviceInfo_t* devInfo)
{
        outb(devInfo->ioPort+ATA_PORT_COMMAND, 4);
        waitTicks(kTicksPerSecond/10);
 1007ed1:	83 ec 0c             	sub    esp,0xc
 1007ed4:	8b 0d c0 97 12 00    	mov    ecx,DWORD PTR ds:0x1297c0
 1007eda:	ba 67 66 66 66       	mov    edx,0x66666667
 1007edf:	89 c8                	mov    eax,ecx
 1007ee1:	f7 ea                	imul   edx
 1007ee3:	c1 fa 02             	sar    edx,0x2
 1007ee6:	c1 f9 1f             	sar    ecx,0x1f
 1007ee9:	29 ca                	sub    edx,ecx
 1007eeb:	52                   	push   edx
 1007eec:	e8 f4 26 00 00       	call   100a5e5 <waitTicks>
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
 1007ef1:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1007ef8:	8d 90 f6 03 00 00    	lea    edx,[eax+0x3f6]
 1007efe:	b8 04 00 00 00       	mov    eax,0x4
 1007f03:	ee                   	out    dx,al
ataResetController():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:165
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 1<<2);
        wait(10);
 1007f04:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
 1007f0b:	e8 e8 26 00 00       	call   100a5f8 <wait>
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
 1007f10:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1007f17:	8d 90 f6 03 00 00    	lea    edx,[eax+0x3f6]
 1007f1d:	b8 00 00 00 00       	mov    eax,0x0
 1007f22:	ee                   	out    dx,al
ataResetController():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:167
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 0);
        if (!ataControllerIsReady(devInfo))
 1007f23:	89 34 24             	mov    DWORD PTR [esp],esi
 1007f26:	e8 f7 fd ff ff       	call   1007d22 <ataControllerIsReady>
 1007f2b:	83 c4 10             	add    esp,0x10
 1007f2e:	84 c0                	test   al,al
 1007f30:	75 19                	jne    1007f4b <ataInit+0x91>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:169
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007f32:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007f39:	74 10                	je     1007f4b <ataInit+0x91>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:170
            printk("HD-controller still busy\n");
 1007f3b:	83 ec 0c             	sub    esp,0xc
 1007f3e:	68 0e 64 06 01       	push   0x106640e
 1007f43:	e8 97 1c 00 00       	call   1009bdf <printk>
 1007f48:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:172
#endif
        if ((hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 0 && (hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 4)
 1007f4b:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1007f52:	8d 50 01             	lea    edx,[eax+0x1]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1007f55:	ec                   	in     al,dx
ataResetController():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:172
 1007f56:	84 c0                	test   al,al
 1007f58:	75 0c                	jne    1007f66 <ataInit+0xac>
 1007f5a:	c7 05 7c 8c 07 01 00 	mov    DWORD PTR ds:0x1078c7c,0x0
 1007f61:	00 00 00 
 1007f64:	eb 34                	jmp    1007f9a <ataInit+0xe0>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1007f66:	ec                   	in     al,dx
ataResetController():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:172
 1007f67:	0f b6 c0             	movzx  eax,al
 1007f6a:	a3 7c 8c 07 01       	mov    ds:0x1078c7c,eax
 1007f6f:	83 f8 04             	cmp    eax,0x4
 1007f72:	74 26                	je     1007f9a <ataInit+0xe0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:173
            printk("Controller reset failed on %s bus: %02x\n",devInfo->bus==0?"Primary":"Secondary", hdError);
 1007f74:	83 be 61 02 00 00 00 	cmp    DWORD PTR [esi+0x261],0x0
 1007f7b:	b9 a3 da 04 01       	mov    ecx,0x104daa3
 1007f80:	ba 06 64 06 01       	mov    edx,0x1066406
 1007f85:	0f 45 d1             	cmovne edx,ecx
 1007f88:	83 ec 04             	sub    esp,0x4
 1007f8b:	50                   	push   eax
 1007f8c:	52                   	push   edx
 1007f8d:	68 84 0d 04 01       	push   0x1040d84
 1007f92:	e8 48 1c 00 00       	call   1009bdf <printk>
 1007f97:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:175
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1007f9a:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1007fa1:	74 10                	je     1007fb3 <ataInit+0xf9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:176
            printk("ataResetController: controller is ready\n");
 1007fa3:	83 ec 0c             	sub    esp,0xc
 1007fa6:	68 b0 0d 04 01       	push   0x1040db0
 1007fab:	e8 2f 1c 00 00       	call   1009bdf <printk>
 1007fb0:	83 c4 10             	add    esp,0x10
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:183
}
int ataInit(struct ataDeviceInfo_t* devInfo)
{
    ataResetController(devInfo);
    int cStatus=0, ticks=0;
    ataSelectDrive(devInfo,0);
 1007fb3:	83 ec 08             	sub    esp,0x8
 1007fb6:	6a 00                	push   0x0
 1007fb8:	56                   	push   esi
 1007fb9:	e8 23 fe ff ff       	call   1007de1 <ataSelectDrive>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:184
    outb(devInfo->ioPort+ATA_PORT_SECTORCOUNT, 0x55);
 1007fbe:	8b 8e 69 02 00 00    	mov    ecx,DWORD PTR [esi+0x269]
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1007fc4:	8d 51 02             	lea    edx,[ecx+0x2]
 1007fc7:	b8 55 00 00 00       	mov    eax,0x55
 1007fcc:	ee                   	out    dx,al
 1007fcd:	8d 51 03             	lea    edx,[ecx+0x3]
 1007fd0:	b8 aa ff ff ff       	mov    eax,0xffffffaa
 1007fd5:	ee                   	out    dx,al
 1007fd6:	8d 51 04             	lea    edx,[ecx+0x4]
 1007fd9:	b8 55 00 00 00       	mov    eax,0x55
 1007fde:	ee                   	out    dx,al
 1007fdf:	8d 51 05             	lea    edx,[ecx+0x5]
 1007fe2:	b8 aa ff ff ff       	mov    eax,0xffffffaa
 1007fe7:	ee                   	out    dx,al
 1007fe8:	8d 51 07             	lea    edx,[ecx+0x7]
 1007feb:	b8 ec ff ff ff       	mov    eax,0xffffffec
 1007ff0:	ee                   	out    dx,al
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:189
    outb(devInfo->ioPort+ATA_PORT_SECTOR_NUMBER, 0xAA);
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW,0x55);
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH,0xAA);
    outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
    wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
 1007ff1:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 1007ff6:	8d 04 80             	lea    eax,[eax+eax*4]
 1007ff9:	01 c0                	add    eax,eax
 1007ffb:	89 04 24             	mov    DWORD PTR [esp],eax
 1007ffe:	e8 f5 25 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:190
    cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
 1008003:	8b 8e 69 02 00 00    	mov    ecx,DWORD PTR [esi+0x269]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1008009:	8d 51 07             	lea    edx,[ecx+0x7]
 100800c:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:190
 100800d:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:191
    if (cStatus==0)
 1008010:	83 c4 10             	add    esp,0x10
 1008013:	85 db                	test   ebx,ebx
 1008015:	75 34                	jne    100804b <ataInit+0x191>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:197
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
#endif
        return false;
 1008017:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:194
    wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
    cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
    if (cStatus==0)
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 100801c:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1008023:	0f 84 4d 01 00 00    	je     1008176 <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:195
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
 1008029:	83 ec 04             	sub    esp,0x4
 100802c:	6a 00                	push   0x0
 100802e:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 1008034:	68 28 64 06 01       	push   0x1066428
 1008039:	e8 a1 1b 00 00       	call   1009bdf <printk>
 100803e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:197
#endif
        return false;
 1008041:	b8 00 00 00 00       	mov    eax,0x0
 1008046:	e9 2b 01 00 00       	jmp    1008176 <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:199
    }
    if ((cStatus & 1) == 1)
 100804b:	a8 01                	test   al,0x1
 100804d:	0f 84 80 00 00 00    	je     10080d3 <ataInit+0x219>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1008053:	8d 51 01             	lea    edx,[ecx+0x1]
 1008056:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:201
    {
        int err = inb(devInfo->ioPort+ATA_PORT_ERROR);
 1008057:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:203
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 100805a:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1008061:	74 15                	je     1008078 <ataInit+0x1be>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:204
            printk("drive %02X, cStatus=%02X, errreg=%02X\n",devInfo->driveNo, cStatus,err);
 1008063:	57                   	push   edi
 1008064:	53                   	push   ebx
 1008065:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 100806b:	68 dc 0d 04 01       	push   0x1040ddc
 1008070:	e8 6a 1b 00 00       	call   1009bdf <printk>
 1008075:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:207
#endif
        if (err!=4)
            return false;
 1008078:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:206
        int err = inb(devInfo->ioPort+ATA_PORT_ERROR);
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("drive %02X, cStatus=%02X, errreg=%02X\n",devInfo->driveNo, cStatus,err);
#endif
        if (err!=4)
 100807d:	83 ff 04             	cmp    edi,0x4
 1008080:	0f 85 f0 00 00 00    	jne    1008176 <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:208
            return false;
        useCDROMIdentify = true;
 1008086:	c6 05 80 8c 07 01 01 	mov    BYTE PTR ds:0x1078c80,0x1
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 100808d:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 1008094:	8d 50 07             	lea    edx,[eax+0x7]
 1008097:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:209
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
 1008098:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:210
        if (cStatus==0)
 100809b:	85 db                	test   ebx,ebx
 100809d:	75 34                	jne    10080d3 <ataInit+0x219>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:216
        {
#ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
                printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
#endif
            return false;
 100809f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:213
        useCDROMIdentify = true;
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        if (cStatus==0)
        {
#ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 10080a4:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 10080ab:	0f 84 c5 00 00 00    	je     1008176 <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:214
                printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
 10080b1:	83 ec 04             	sub    esp,0x4
 10080b4:	6a 00                	push   0x0
 10080b6:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 10080bc:	68 28 64 06 01       	push   0x1066428
 10080c1:	e8 19 1b 00 00       	call   1009bdf <printk>
 10080c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:216
#endif
            return false;
 10080c9:	b8 00 00 00 00       	mov    eax,0x0
 10080ce:	e9 a3 00 00 00       	jmp    1008176 <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:219
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
 10080d3:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 10080d8:	8d 04 80             	lea    eax,[eax+eax*4]
 10080db:	01 c0                	add    eax,eax
 10080dd:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:220
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
 10080df:	c1 eb 07             	shr    ebx,0x7
 10080e2:	84 db                	test   bl,bl
 10080e4:	74 29                	je     100810f <ataInit+0x255>
 10080e6:	85 c0                	test   eax,eax
 10080e8:	7e 25                	jle    100810f <ataInit+0x255>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 10080ea:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 10080f1:	8d 50 07             	lea    edx,[eax+0x7]
 10080f4:	ec                   	in     al,dx
 10080f5:	89 c3                	mov    ebx,eax
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:223
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
 10080f7:	83 ec 0c             	sub    esp,0xc
 10080fa:	6a 01                	push   0x1
 10080fc:	e8 f7 24 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:224
        ticks--;
 1008101:	83 ef 01             	sub    edi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:220
#endif
            return false;
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
 1008104:	83 c4 10             	add    esp,0x10
 1008107:	84 db                	test   bl,bl
 1008109:	79 04                	jns    100810f <ataInit+0x255>
 100810b:	85 ff                	test   edi,edi
 100810d:	7f db                	jg     10080ea <ataInit+0x230>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:226
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
        ticks--;
    }
    if (!ataControllerIsReady(devInfo))
 100810f:	83 ec 0c             	sub    esp,0xc
 1008112:	56                   	push   esi
 1008113:	e8 0a fc ff ff       	call   1007d22 <ataControllerIsReady>
 1008118:	89 c2                	mov    edx,eax
 100811a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:227
        return false;
 100811d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:226
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
        ticks--;
    }
    if (!ataControllerIsReady(devInfo))
 1008122:	84 d2                	test   dl,dl
 1008124:	74 50                	je     1008176 <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:228
        return false;
    if (inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW)!=0x55 || inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH)!=0xaa)
 1008126:	8b 8e 69 02 00 00    	mov    ecx,DWORD PTR [esi+0x269]
 100812c:	8d 59 04             	lea    ebx,[ecx+0x4]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 100812f:	89 da                	mov    edx,ebx
 1008131:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:228
 1008132:	3c 55                	cmp    al,0x55
 1008134:	75 08                	jne    100813e <ataInit+0x284>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39 (discriminator 1)
 1008136:	8d 51 05             	lea    edx,[ecx+0x5]
 1008139:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:228 (discriminator 1)
 100813a:	3c aa                	cmp    al,0xaa
 100813c:	74 33                	je     1008171 <ataInit+0x2b7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:231
    {
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 100813e:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1008145:	74 21                	je     1008168 <ataInit+0x2ae>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1008147:	8d 51 05             	lea    edx,[ecx+0x5]
 100814a:	ec                   	in     al,dx
 100814b:	89 c1                	mov    ecx,eax
 100814d:	89 da                	mov    edx,ebx
 100814f:	ec                   	in     al,dx
ataInit():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:232
        printk("Cylinder port non-zero (%X,%X), device is non-ATA\n",inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW), inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH));
 1008150:	83 ec 04             	sub    esp,0x4
 1008153:	0f b6 c9             	movzx  ecx,cl
 1008156:	51                   	push   ecx
 1008157:	0f b6 c0             	movzx  eax,al
 100815a:	50                   	push   eax
 100815b:	68 04 0e 04 01       	push   0x1040e04
 1008160:	e8 7a 1a 00 00       	call   1009bdf <printk>
 1008165:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:197
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
#endif
        return false;
 1008168:	0f b6 05 80 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c80
 100816f:	eb 05                	jmp    1008176 <ataInit+0x2bc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:239
        if (useCDROMIdentify)
            return true;
        else
            return false;
    }
    return true;
 1008171:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:240
}
 1008176:	5b                   	pop    ebx
 1008177:	5e                   	pop    esi
 1008178:	5f                   	pop    edi
 1008179:	c3                   	ret    

0100817a <ataGetModelFromIdentify>:
ataGetModelFromIdentify():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:243

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
 100817a:	56                   	push   esi
 100817b:	53                   	push   ebx
 100817c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:244
    uint16_t* ident=devInfo->ATAIdentifyData+27;
 1008180:	8d 46 36             	lea    eax,[esi+0x36]
 1008183:	8d 96 01 02 00 00    	lea    edx,[esi+0x201]
 1008189:	8d 5e 5e             	lea    ebx,[esi+0x5e]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:247 (discriminator 3)
    for (int cnt=0;cnt<40;cnt+=2)
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
 100818c:	0f b7 08             	movzx  ecx,WORD PTR [eax]
 100818f:	66 c1 e9 08          	shr    cx,0x8
 1008193:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:248 (discriminator 3)
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
 1008196:	83 c0 02             	add    eax,0x2
 1008199:	0f b7 48 fe          	movzx  ecx,WORD PTR [eax-0x2]
 100819d:	88 0a                	mov    BYTE PTR [edx],cl
 100819f:	83 c2 02             	add    edx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:245 (discriminator 3)
}

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
    uint16_t* ident=devInfo->ATAIdentifyData+27;
    for (int cnt=0;cnt<40;cnt+=2)
 10081a2:	39 d8                	cmp    eax,ebx
 10081a4:	75 e6                	jne    100818c <ataGetModelFromIdentify+0x12>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:250
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
    }
    devInfo->ATADeviceModel[79]='\0';
 10081a6:	c6 86 4f 02 00 00 00 	mov    BYTE PTR [esi+0x24f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:251
}
 10081ad:	5b                   	pop    ebx
 10081ae:	5e                   	pop    esi
 10081af:	c3                   	ret    

010081b0 <ataIdentify>:
ataIdentify():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:254

int ataIdentify(struct ataDeviceInfo_t* devInfo)
{
 10081b0:	56                   	push   esi
 10081b1:	53                   	push   ebx
 10081b2:	83 ec 04             	sub    esp,0x4
 10081b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:256
    //For ATA devices, read the identity data.  For SATA, we've already read it into ATAIdentityData
    if (devInfo->queryATAData)
 10081b9:	80 be 50 02 00 00 00 	cmp    BYTE PTR [esi+0x250],0x0
 10081c0:	74 5c                	je     100821e <ataIdentify+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:258
    {
        if (useCDROMIdentify)
 10081c2:	80 3d 80 8c 07 01 00 	cmp    BYTE PTR ds:0x1078c80,0x0
 10081c9:	74 12                	je     10081dd <ataIdentify+0x2d>
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 10081cb:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 10081d2:	8d 50 07             	lea    edx,[eax+0x7]
 10081d5:	b8 a1 ff ff ff       	mov    eax,0xffffffa1
 10081da:	ee                   	out    dx,al
 10081db:	eb 10                	jmp    10081ed <ataIdentify+0x3d>
 10081dd:	0f b7 86 69 02 00 00 	movzx  eax,WORD PTR [esi+0x269]
 10081e4:	8d 50 07             	lea    edx,[eax+0x7]
 10081e7:	b8 ec ff ff ff       	mov    eax,0xffffffec
 10081ec:	ee                   	out    dx,al
ataIdentify():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:262
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
 10081ed:	83 ec 0c             	sub    esp,0xc
 10081f0:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 10081f5:	8d 04 80             	lea    eax,[eax+eax*4]
 10081f8:	01 c0                	add    eax,eax
 10081fa:	50                   	push   eax
 10081fb:	e8 f8 23 00 00       	call   100a5f8 <wait>
 1008200:	0f b7 96 69 02 00 00 	movzx  edx,WORD PTR [esi+0x269]
 1008207:	89 f1                	mov    ecx,esi
 1008209:	8d 9e 00 02 00 00    	lea    ebx,[esi+0x200]
 100820f:	83 c4 10             	add    esp,0x10
inw():
/home/yogi/src/os/chrisOSKernel/include/io.h:46 (discriminator 3)
}

static __inline unsigned short inw(unsigned short __port)
{
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
 1008212:	66 ed                	in     ax,dx
ataIdentify():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:265 (discriminator 3)
        for (int readCount=0;readCount<=255;readCount++)
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
 1008214:	66 89 01             	mov    WORD PTR [ecx],ax
 1008217:	83 c1 02             	add    ecx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:263 (discriminator 3)
        if (useCDROMIdentify)
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
        for (int readCount=0;readCount<=255;readCount++)
 100821a:	39 d9                	cmp    ecx,ebx
 100821c:	75 f4                	jne    1008212 <ataIdentify+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:268
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
 100821e:	83 ec 0c             	sub    esp,0xc
 1008221:	56                   	push   esi
 1008222:	e8 53 ff ff ff       	call   100817a <ataGetModelFromIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:269
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
 1008227:	0f b7 46 7a          	movzx  eax,WORD PTR [esi+0x7a]
 100822b:	c1 e0 10             	shl    eax,0x10
 100822e:	0f b7 56 78          	movzx  edx,WORD PTR [esi+0x78]
 1008232:	09 d0                	or     eax,edx
 1008234:	89 86 56 02 00 00    	mov    DWORD PTR [esi+0x256],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:270
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
 100823a:	83 c4 10             	add    esp,0x10
 100823d:	b8 00 02 00 00       	mov    eax,0x200
 1008242:	f6 86 d5 00 00 00 10 	test   BYTE PTR [esi+0xd5],0x10
 1008249:	74 12                	je     100825d <ataIdentify+0xad>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:270 (discriminator 1)
 100824b:	0f b7 46 24          	movzx  eax,WORD PTR [esi+0x24]
 100824f:	c1 e0 10             	shl    eax,0x10
 1008252:	89 c2                	mov    edx,eax
 1008254:	0f b7 86 ea 00 00 00 	movzx  eax,WORD PTR [esi+0xea]
 100825b:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:270 (discriminator 4)
 100825d:	89 86 5a 02 00 00    	mov    DWORD PTR [esi+0x25a],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:273 (discriminator 4)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
            :512;
    devInfo->dmaSupported=devInfo->ATAIdentifyData[49]>>8 & 0x1;
 1008263:	0f b7 46 62          	movzx  eax,WORD PTR [esi+0x62]
 1008267:	89 c2                	mov    edx,eax
 1008269:	66 c1 ea 08          	shr    dx,0x8
 100826d:	83 e2 01             	and    edx,0x1
 1008270:	88 96 60 02 00 00    	mov    BYTE PTR [esi+0x260],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:274 (discriminator 4)
    devInfo->lbaSupported=devInfo->ATAIdentifyData[49]>>9 & 0x1;
 1008276:	66 c1 e8 09          	shr    ax,0x9
 100827a:	83 e0 01             	and    eax,0x1
 100827d:	88 86 5e 02 00 00    	mov    BYTE PTR [esi+0x25e],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:275 (discriminator 4)
    devInfo->lba48Supported=devInfo->ATAIdentifyData[83]>>10 & 0x1;
 1008283:	0f b7 86 a6 00 00 00 	movzx  eax,WORD PTR [esi+0xa6]
 100828a:	66 c1 e8 0a          	shr    ax,0xa
 100828e:	83 e0 01             	and    eax,0x1
 1008291:	88 86 5f 02 00 00    	mov    BYTE PTR [esi+0x25f],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:278 (discriminator 4)
    
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1008297:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 100829e:	74 1d                	je     10082bd <ataIdentify+0x10d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:279
        printk("drive %d, model=%s\n",devInfo->driveNo, devInfo->ATADeviceModel);
 10082a0:	83 ec 04             	sub    esp,0x4
 10082a3:	8d 86 00 02 00 00    	lea    eax,[esi+0x200]
 10082a9:	50                   	push   eax
 10082aa:	ff b6 65 02 00 00    	push   DWORD PTR [esi+0x265]
 10082b0:	68 45 64 06 01       	push   0x1066445
 10082b5:	e8 25 19 00 00       	call   1009bdf <printk>
 10082ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:282
#endif
    return 1;
}
 10082bd:	b8 01 00 00 00       	mov    eax,0x1
 10082c2:	83 c4 04             	add    esp,0x4
 10082c5:	5b                   	pop    ebx
 10082c6:	5e                   	pop    esi
 10082c7:	c3                   	ret    

010082c8 <ataScanForHarddrives>:
ataScanForHarddrives():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:285

int ataScanForHarddrives()
{
 10082c8:	53                   	push   ebx
 10082c9:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:286
    kATADeviceInfo[0].bus=ATAPrimary;
 10082cc:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
 10082d2:	c7 83 61 02 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
 10082d9:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:287
    kATADeviceInfo[0].driveNo=0;
 10082dc:	c7 83 65 02 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
 10082e3:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:288
    kATADeviceInfo[0].ioPort=0x1F0;
 10082e6:	c7 83 69 02 00 00 f0 	mov    DWORD PTR [ebx+0x269],0x1f0
 10082ed:	01 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:289
    kATADeviceInfo[0].irqNum=0x14;
 10082f0:	c6 83 6d 02 00 00 14 	mov    BYTE PTR [ebx+0x26d],0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:290
    kATADeviceInfo[0].driveHeadPortDesignation=0xA0;
 10082f7:	c6 83 6e 02 00 00 a0 	mov    BYTE PTR [ebx+0x26e],0xa0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:291
    kATADeviceInfo[0].queryATAData=true;
 10082fe:	c6 83 50 02 00 00 01 	mov    BYTE PTR [ebx+0x250],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:292
    kATADeviceInfo[0].ATADeviceAvailable=ataInit(&kATADeviceInfo[0]);
 1008305:	53                   	push   ebx
 1008306:	e8 af fb ff ff       	call   1007eba <ataInit>
 100830b:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:293
    if (kATADeviceInfo[0].ATADeviceAvailable)
 1008311:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1008316:	83 c4 10             	add    esp,0x10
 1008319:	80 b8 51 02 00 00 00 	cmp    BYTE PTR [eax+0x251],0x0
 1008320:	74 35                	je     1008357 <ataScanForHarddrives+0x8f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:295
    {
        ataIdentify(&kATADeviceInfo[0]);
 1008322:	83 ec 0c             	sub    esp,0xc
 1008325:	50                   	push   eax
 1008326:	e8 85 fe ff ff       	call   10081b0 <ataIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:296
        if (useCDROMIdentify)
 100832b:	83 c4 10             	add    esp,0x10
 100832e:	80 3d 80 8c 07 01 00 	cmp    BYTE PTR ds:0x1078c80,0x0
 1008335:	74 11                	je     1008348 <ataScanForHarddrives+0x80>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:297
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_CD;
 1008337:	a1 00 98 12 00       	mov    eax,ds:0x129800
 100833c:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
 1008343:	00 00 00 
 1008346:	eb 0f                	jmp    1008357 <ataScanForHarddrives+0x8f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:299
        else
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_HD;
 1008348:	a1 00 98 12 00       	mov    eax,ds:0x129800
 100834d:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
 1008354:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:301
    }
    useCDROMIdentify=false;
 1008357:	c6 05 80 8c 07 01 00 	mov    BYTE PTR ds:0x1078c80,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:303

    kATADeviceInfo[1].bus=ATAPrimary;
 100835e:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
 1008364:	c7 83 d4 04 00 00 00 	mov    DWORD PTR [ebx+0x4d4],0x0
 100836b:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:304
    kATADeviceInfo[1].driveNo=1;
 100836e:	c7 83 d8 04 00 00 01 	mov    DWORD PTR [ebx+0x4d8],0x1
 1008375:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:305
    kATADeviceInfo[1].ioPort=0x1F0;
 1008378:	c7 83 dc 04 00 00 f0 	mov    DWORD PTR [ebx+0x4dc],0x1f0
 100837f:	01 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:306
    kATADeviceInfo[1].irqNum=0x14;
 1008382:	c6 83 e0 04 00 00 14 	mov    BYTE PTR [ebx+0x4e0],0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:307
    kATADeviceInfo[1].driveHeadPortDesignation=0xB0;
 1008389:	c6 83 e1 04 00 00 b0 	mov    BYTE PTR [ebx+0x4e1],0xb0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:308
    kATADeviceInfo[1].queryATAData=true;
 1008390:	c6 83 c3 04 00 00 01 	mov    BYTE PTR [ebx+0x4c3],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:309
    kATADeviceInfo[1].ATADeviceAvailable=ataInit(&kATADeviceInfo[1]);
 1008397:	83 ec 0c             	sub    esp,0xc
 100839a:	8d 83 73 02 00 00    	lea    eax,[ebx+0x273]
 10083a0:	50                   	push   eax
 10083a1:	e8 14 fb ff ff       	call   1007eba <ataInit>
 10083a6:	88 83 c4 04 00 00    	mov    BYTE PTR [ebx+0x4c4],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:310
    if (kATADeviceInfo[1].ATADeviceAvailable)
 10083ac:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10083b1:	83 c4 10             	add    esp,0x10
 10083b4:	80 b8 c4 04 00 00 00 	cmp    BYTE PTR [eax+0x4c4],0x0
 10083bb:	74 3a                	je     10083f7 <ataScanForHarddrives+0x12f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:312
    {
        ataIdentify(&kATADeviceInfo[1]);
 10083bd:	83 ec 0c             	sub    esp,0xc
 10083c0:	05 73 02 00 00       	add    eax,0x273
 10083c5:	50                   	push   eax
 10083c6:	e8 e5 fd ff ff       	call   10081b0 <ataIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:313
        if (useCDROMIdentify)
 10083cb:	83 c4 10             	add    esp,0x10
 10083ce:	80 3d 80 8c 07 01 00 	cmp    BYTE PTR ds:0x1078c80,0x0
 10083d5:	74 11                	je     10083e8 <ataScanForHarddrives+0x120>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:314
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_CD;
 10083d7:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10083dc:	c7 80 c5 04 00 00 01 	mov    DWORD PTR [eax+0x4c5],0x1
 10083e3:	00 00 00 
 10083e6:	eb 0f                	jmp    10083f7 <ataScanForHarddrives+0x12f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:316
        else
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_HD;
 10083e8:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10083ed:	c7 80 c5 04 00 00 00 	mov    DWORD PTR [eax+0x4c5],0x0
 10083f4:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:318
    }
    kATADeviceInfo[2].bus=ATASecondary;
 10083f7:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
 10083fd:	c7 83 47 07 00 00 01 	mov    DWORD PTR [ebx+0x747],0x1
 1008404:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:319
    kATADeviceInfo[2].driveNo=2;
 1008407:	c7 83 4b 07 00 00 02 	mov    DWORD PTR [ebx+0x74b],0x2
 100840e:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:320
    kATADeviceInfo[2].ioPort=0x170;
 1008411:	c7 83 4f 07 00 00 70 	mov    DWORD PTR [ebx+0x74f],0x170
 1008418:	01 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:321
    kATADeviceInfo[2].irqNum=0x15;
 100841b:	c6 83 53 07 00 00 15 	mov    BYTE PTR [ebx+0x753],0x15
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:322
    kATADeviceInfo[2].driveHeadPortDesignation=0xA0;
 1008422:	c6 83 54 07 00 00 a0 	mov    BYTE PTR [ebx+0x754],0xa0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:323
    kATADeviceInfo[2].queryATAData=false;
 1008429:	c6 83 36 07 00 00 00 	mov    BYTE PTR [ebx+0x736],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:324
    kATADeviceInfo[2].ATADeviceAvailable=ataInit(&kATADeviceInfo[2]);
 1008430:	83 ec 0c             	sub    esp,0xc
 1008433:	8d 83 e6 04 00 00    	lea    eax,[ebx+0x4e6]
 1008439:	50                   	push   eax
 100843a:	e8 7b fa ff ff       	call   1007eba <ataInit>
 100843f:	88 83 37 07 00 00    	mov    BYTE PTR [ebx+0x737],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:325
    if (kATADeviceInfo[2].ATADeviceAvailable)
 1008445:	a1 00 98 12 00       	mov    eax,ds:0x129800
 100844a:	83 c4 10             	add    esp,0x10
 100844d:	80 b8 37 07 00 00 00 	cmp    BYTE PTR [eax+0x737],0x0
 1008454:	74 3a                	je     1008490 <ataScanForHarddrives+0x1c8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:327
    {
        ataIdentify(&kATADeviceInfo[2]);
 1008456:	83 ec 0c             	sub    esp,0xc
 1008459:	05 e6 04 00 00       	add    eax,0x4e6
 100845e:	50                   	push   eax
 100845f:	e8 4c fd ff ff       	call   10081b0 <ataIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:328
        if (useCDROMIdentify)
 1008464:	83 c4 10             	add    esp,0x10
 1008467:	80 3d 80 8c 07 01 00 	cmp    BYTE PTR ds:0x1078c80,0x0
 100846e:	74 11                	je     1008481 <ataScanForHarddrives+0x1b9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:329
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_CD;
 1008470:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1008475:	c7 80 38 07 00 00 01 	mov    DWORD PTR [eax+0x738],0x1
 100847c:	00 00 00 
 100847f:	eb 0f                	jmp    1008490 <ataScanForHarddrives+0x1c8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:331
        else
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_HD;
 1008481:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1008486:	c7 80 38 07 00 00 00 	mov    DWORD PTR [eax+0x738],0x0
 100848d:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:334
    }

    kATADeviceInfo[3].bus=ATASecondary;
 1008490:	8b 1d 00 98 12 00    	mov    ebx,DWORD PTR ds:0x129800
 1008496:	c7 83 ba 09 00 00 01 	mov    DWORD PTR [ebx+0x9ba],0x1
 100849d:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:335
    kATADeviceInfo[3].driveNo=3;
 10084a0:	c7 83 be 09 00 00 03 	mov    DWORD PTR [ebx+0x9be],0x3
 10084a7:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:336
    kATADeviceInfo[3].ioPort=0x170;
 10084aa:	c7 83 c2 09 00 00 70 	mov    DWORD PTR [ebx+0x9c2],0x170
 10084b1:	01 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:337
    kATADeviceInfo[3].irqNum=0x15;
 10084b4:	c6 83 c6 09 00 00 15 	mov    BYTE PTR [ebx+0x9c6],0x15
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:338
    kATADeviceInfo[3].driveHeadPortDesignation=0xB0;
 10084bb:	c6 83 c7 09 00 00 b0 	mov    BYTE PTR [ebx+0x9c7],0xb0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:339
    kATADeviceInfo[3].queryATAData=true;
 10084c2:	c6 83 a9 09 00 00 01 	mov    BYTE PTR [ebx+0x9a9],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:340
    kATADeviceInfo[3].ATADeviceAvailable=ataInit(&kATADeviceInfo[3]);
 10084c9:	83 ec 0c             	sub    esp,0xc
 10084cc:	8d 83 59 07 00 00    	lea    eax,[ebx+0x759]
 10084d2:	50                   	push   eax
 10084d3:	e8 e2 f9 ff ff       	call   1007eba <ataInit>
 10084d8:	88 83 aa 09 00 00    	mov    BYTE PTR [ebx+0x9aa],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:341
    if (kATADeviceInfo[3].ATADeviceAvailable)
 10084de:	a1 00 98 12 00       	mov    eax,ds:0x129800
 10084e3:	83 c4 10             	add    esp,0x10
 10084e6:	80 b8 aa 09 00 00 00 	cmp    BYTE PTR [eax+0x9aa],0x0
 10084ed:	74 3a                	je     1008529 <ataScanForHarddrives+0x261>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:343
    {
        ataIdentify(&kATADeviceInfo[3]);
 10084ef:	83 ec 0c             	sub    esp,0xc
 10084f2:	05 59 07 00 00       	add    eax,0x759
 10084f7:	50                   	push   eax
 10084f8:	e8 b3 fc ff ff       	call   10081b0 <ataIdentify>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:344
        if (useCDROMIdentify)
 10084fd:	83 c4 10             	add    esp,0x10
 1008500:	80 3d 80 8c 07 01 00 	cmp    BYTE PTR ds:0x1078c80,0x0
 1008507:	74 11                	je     100851a <ataScanForHarddrives+0x252>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:345
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_CD;
 1008509:	a1 00 98 12 00       	mov    eax,ds:0x129800
 100850e:	c7 80 ab 09 00 00 01 	mov    DWORD PTR [eax+0x9ab],0x1
 1008515:	00 00 00 
 1008518:	eb 0f                	jmp    1008529 <ataScanForHarddrives+0x261>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:347
        else
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_HD;
 100851a:	a1 00 98 12 00       	mov    eax,ds:0x129800
 100851f:	c7 80 ab 09 00 00 00 	mov    DWORD PTR [eax+0x9ab],0x0
 1008526:	00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:351
    }

#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1008529:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 1008530:	74 22                	je     1008554 <ataScanForHarddrives+0x28c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:352
        printk("INIT: Disk1=%s  Disk2=%s\n", kATADeviceInfo[0].ATADeviceModel, kATADeviceInfo[1].ATADeviceModel);
 1008532:	a1 00 98 12 00       	mov    eax,ds:0x129800
 1008537:	83 ec 04             	sub    esp,0x4
 100853a:	8d 90 73 04 00 00    	lea    edx,[eax+0x473]
 1008540:	52                   	push   edx
 1008541:	05 00 02 00 00       	add    eax,0x200
 1008546:	50                   	push   eax
 1008547:	68 59 64 06 01       	push   0x1066459
 100854c:	e8 8e 16 00 00       	call   1009bdf <printk>
 1008551:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:355
#endif
            return 0;
}
 1008554:	b8 00 00 00 00       	mov    eax,0x0
 1008559:	83 c4 08             	add    esp,0x8
 100855c:	5b                   	pop    ebx
 100855d:	c3                   	ret    

0100855e <ataBlockingRead28>:
ataBlockingRead28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:365
        return -1;
    return ataBlockingRead28(sector, buffer, sector_count);
}

int ataBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
 100855e:	55                   	push   ebp
 100855f:	57                   	push   edi
 1008560:	56                   	push   esi
 1008561:	53                   	push   ebx
 1008562:	83 ec 1c             	sub    esp,0x1c
 1008565:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:370
    //For now if the FAT library calls this, we assume we've already read the same partition most recently
    int lResult=0;
    uint8_t* bufp=buffer;
    uint32_t lSectorsLeft=sector_count;
    uint32_t lSector=sector+partOffset; //this represents the start of the partition
 1008569:	a1 78 8c 07 01       	mov    eax,ds:0x1078c78
 100856e:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
 1008572:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:373

#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1008574:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 100857b:	74 18                	je     1008595 <ataBlockingRead28+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:375
        {
            printk("ataBlockingRead28: sec: 0x%08X, buf 0x%08X, cnt 0x%08X\n", lSector, bufp, sector_count);
 100857d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
 1008581:	56                   	push   esi
 1008582:	50                   	push   eax
 1008583:	68 38 0e 04 01       	push   0x1040e38
 1008588:	e8 52 16 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:376
            waitForKeyboardKey();
 100858d:	e8 f9 ab ff ff       	call   100318b <waitForKeyboardKey>
 1008592:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:379
        }
#endif
    lResult=ataWaitForIdle(atablockingReadDev);
 1008595:	83 ec 0c             	sub    esp,0xc
 1008598:	ff 35 28 8c 07 01    	push   DWORD PTR ds:0x1078c28
 100859e:	e8 cc f6 ff ff       	call   1007c6f <ataWaitForIdle>
 10085a3:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:380
    if (lResult)
 10085a6:	83 c4 10             	add    esp,0x10
 10085a9:	85 c0                	test   eax,eax
 10085ab:	74 11                	je     10085be <ataBlockingRead28+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:381
        panic("ataBlockingRead28: Timeout waiting for DRQ and BSY to be clear (0x%02X)", lResult);
 10085ad:	83 ec 08             	sub    esp,0x8
 10085b0:	50                   	push   eax
 10085b1:	68 70 0e 04 01       	push   0x1040e70
 10085b6:	e8 9d 11 00 00       	call   1009758 <panic>
 10085bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:386
        //Select the drive we want
        //NOTE: Drive selected prior to calling this function
        //ataSelectDrive(drive,0);
        //Magic bit (6) to set LBA mode and top 4 bits of LBA28 sector # go in bottom 4
    outb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT, inb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT) | (1 << 6) | ((lSector >> 24) & 0x0F));
 10085be:	8b 1d 28 8c 07 01    	mov    ebx,DWORD PTR ds:0x1078c28
 10085c4:	8b 8b 69 02 00 00    	mov    ecx,DWORD PTR [ebx+0x269]
 10085ca:	8d 51 06             	lea    edx,[ecx+0x6]
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 10085cd:	ec                   	in     al,dx
 10085ce:	89 c7                	mov    edi,eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 10085d0:	89 e8                	mov    eax,ebp
 10085d2:	c1 e8 18             	shr    eax,0x18
 10085d5:	83 e0 0f             	and    eax,0xf
 10085d8:	83 c8 40             	or     eax,0x40
 10085db:	09 f8                	or     eax,edi
 10085dd:	ee                   	out    dx,al
 10085de:	8d 51 02             	lea    edx,[ecx+0x2]
 10085e1:	0f b6 44 24 38       	movzx  eax,BYTE PTR [esp+0x38]
 10085e6:	ee                   	out    dx,al
 10085e7:	8d 51 03             	lea    edx,[ecx+0x3]
 10085ea:	89 e8                	mov    eax,ebp
 10085ec:	ee                   	out    dx,al
 10085ed:	89 e8                	mov    eax,ebp
 10085ef:	c1 e8 08             	shr    eax,0x8
 10085f2:	8d 51 04             	lea    edx,[ecx+0x4]
 10085f5:	ee                   	out    dx,al
 10085f6:	89 e8                	mov    eax,ebp
 10085f8:	c1 e8 10             	shr    eax,0x10
 10085fb:	8d 51 05             	lea    edx,[ecx+0x5]
 10085fe:	ee                   	out    dx,al
 10085ff:	8d 51 07             	lea    edx,[ecx+0x7]
 1008602:	b8 20 00 00 00       	mov    eax,0x20
 1008607:	ee                   	out    dx,al
ataBlockingRead28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:396
    //Send the LBA sector number in the next 3 fields + high bit in the 
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTOR_NUMBER, (lSector) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_LOW, (lSector >> 8) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
 1008608:	83 ec 04             	sub    esp,0x4
 100860b:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 1008610:	8d 04 80             	lea    eax,[eax+eax*4]
 1008613:	01 c0                	add    eax,eax
 1008615:	50                   	push   eax
 1008616:	6a 01                	push   0x1
 1008618:	53                   	push   ebx
 1008619:	e8 e2 f5 ff ff       	call   1007c00 <ataWaitForDRQ>
 100861e:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:397
    if (lResult)
 1008621:	83 c4 10             	add    esp,0x10
 1008624:	85 c0                	test   eax,eax
 1008626:	74 17                	je     100863f <ataBlockingRead28+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:398
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
 1008628:	83 ec 04             	sub    esp,0x4
 100862b:	ff 35 7c 8c 07 01    	push   DWORD PTR ds:0x1078c7c
 1008631:	50                   	push   eax
 1008632:	68 b8 0e 04 01       	push   0x1040eb8
 1008637:	e8 1c 11 00 00       	call   1009758 <panic>
 100863c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:399
    while (lSectorsLeft)
 100863f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
 1008644:	0f 84 e7 00 00 00    	je     1008731 <ataBlockingRead28+0x1d3>
 100864a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 100864e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:401
    {
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
 1008652:	a1 28 8c 07 01       	mov    eax,ds:0x1078c28
insw():
/home/yogi/src/os/chrisOSKernel/include/io.h:87
		      : "d" (__port));
}

static __inline void insw(unsigned short __port, void *__buf, unsigned long __n)
{
	__asm__ volatile ("cld; rep; insw"
 1008657:	8b 90 69 02 00 00    	mov    edx,DWORD PTR [eax+0x269]
 100865d:	89 f7                	mov    edi,esi
 100865f:	b9 00 01 00 00       	mov    ecx,0x100
 1008664:	fc                   	cld    
 1008665:	f3 66 6d             	rep ins WORD PTR es:[edi],dx
ataBlockingRead28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:403
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1008668:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 100866f:	74 40                	je     10086b1 <ataBlockingRead28+0x153>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:405
            {
                printk("ataBlockingRead28: Debugging: ");
 1008671:	83 ec 0c             	sub    esp,0xc
 1008674:	68 08 0f 04 01       	push   0x1040f08
 1008679:	e8 61 15 00 00       	call   1009bdf <printk>
 100867e:	89 f3                	mov    ebx,esi
 1008680:	8d 7e 14             	lea    edi,[esi+0x14]
 1008683:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:407 (discriminator 3)
                for (int cnt2=0;cnt2<20;cnt2++)
                    printk("%02X ", bufp[cnt2]);
 1008686:	83 ec 08             	sub    esp,0x8
 1008689:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 100868c:	50                   	push   eax
 100868d:	68 73 64 06 01       	push   0x1066473
 1008692:	e8 48 15 00 00       	call   1009bdf <printk>
 1008697:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:406 (discriminator 3)
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            {
                printk("ataBlockingRead28: Debugging: ");
                for (int cnt2=0;cnt2<20;cnt2++)
 100869a:	83 c4 10             	add    esp,0x10
 100869d:	39 df                	cmp    edi,ebx
 100869f:	75 e5                	jne    1008686 <ataBlockingRead28+0x128>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:408
                    printk("%02X ", bufp[cnt2]);
                printk("\n");
 10086a1:	83 ec 0c             	sub    esp,0xc
 10086a4:	68 cc 67 06 01       	push   0x10667cc
 10086a9:	e8 31 15 00 00       	call   1009bdf <printk>
 10086ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:411
            }
        #endif
        if (--lSectorsLeft>0) //zero based vs 1 based
 10086b1:	83 6c 24 0c 01       	sub    DWORD PTR [esp+0xc],0x1
 10086b6:	74 79                	je     1008731 <ataBlockingRead28+0x1d3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:413
        {
            wait(50);
 10086b8:	83 ec 0c             	sub    esp,0xc
 10086bb:	6a 32                	push   0x32
 10086bd:	e8 36 1f 00 00       	call   100a5f8 <wait>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:414
            lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
 10086c2:	83 c4 0c             	add    esp,0xc
 10086c5:	a1 c4 97 12 00       	mov    eax,ds:0x1297c4
 10086ca:	8d 04 80             	lea    eax,[eax+eax*4]
 10086cd:	01 c0                	add    eax,eax
 10086cf:	50                   	push   eax
 10086d0:	6a 01                	push   0x1
 10086d2:	ff 35 28 8c 07 01    	push   DWORD PTR ds:0x1078c28
 10086d8:	e8 23 f5 ff ff       	call   1007c00 <ataWaitForDRQ>
 10086dd:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:415
            bufp+=512;
 10086e0:	81 c6 00 02 00 00    	add    esi,0x200
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:416
            lSector++;
 10086e6:	83 c5 01             	add    ebp,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:417
            if (lResult)
 10086e9:	83 c4 10             	add    esp,0x10
 10086ec:	85 c0                	test   eax,eax
 10086ee:	74 17                	je     1008707 <ataBlockingRead28+0x1a9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:418
                panic("ataBlockingRead28: Timeout in read loop, waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
 10086f0:	83 ec 04             	sub    esp,0x4
 10086f3:	ff 35 7c 8c 07 01    	push   DWORD PTR ds:0x1078c7c
 10086f9:	50                   	push   eax
 10086fa:	68 28 0f 04 01       	push   0x1040f28
 10086ff:	e8 54 10 00 00       	call   1009758 <panic>
 1008704:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:420
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
 1008707:	f6 05 78 98 12 00 08 	test   BYTE PTR ds:0x129878,0x8
 100870e:	0f 84 3e ff ff ff    	je     1008652 <ataBlockingRead28+0xf4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:422
        {
            printk("ataBlockingRead28: sec=0x%08X, buf=0x%08X, rep=0x%08X    \n", lSector, bufp, lSectorsLeft);
 1008714:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 1008718:	56                   	push   esi
 1008719:	55                   	push   ebp
 100871a:	68 84 0f 04 01       	push   0x1040f84
 100871f:	e8 bb 14 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:423
            waitForKeyboardKey();
 1008724:	e8 62 aa ff ff       	call   100318b <waitForKeyboardKey>
 1008729:	83 c4 10             	add    esp,0x10
 100872c:	e9 21 ff ff ff       	jmp    1008652 <ataBlockingRead28+0xf4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:428
        }
#endif
        }
    }
    return 512*sector_count;
 1008731:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 1008735:	c1 e0 09             	shl    eax,0x9
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:429
}
 1008738:	83 c4 1c             	add    esp,0x1c
 100873b:	5b                   	pop    ebx
 100873c:	5e                   	pop    esi
 100873d:	5f                   	pop    edi
 100873e:	5d                   	pop    ebp
 100873f:	c3                   	ret    

01008740 <ataReadDisk>:
ataReadDisk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:357
        printk("INIT: Disk1=%s  Disk2=%s\n", kATADeviceInfo[0].ATADeviceModel, kATADeviceInfo[1].ATADeviceModel);
#endif
            return 0;
}
int ataReadDisk(struct ataDeviceInfo_t* devInfo, uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
 1008740:	83 ec 0c             	sub    esp,0xc
 1008743:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:358
    atablockingReadDev = devInfo;
 1008747:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 100874b:	89 15 28 8c 07 01    	mov    DWORD PTR ds:0x1078c28,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:359
    if (sector_count==0)    //this function can be called with a sector_count of 0 in order to set partOffset
 1008751:	85 c0                	test   eax,eax
 1008753:	74 16                	je     100876b <ataReadDisk+0x2b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:361
        return -1;
    return ataBlockingRead28(sector, buffer, sector_count);
 1008755:	83 ec 04             	sub    esp,0x4
 1008758:	50                   	push   eax
 1008759:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 100875d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1008761:	e8 f8 fd ff ff       	call   100855e <ataBlockingRead28>
 1008766:	83 c4 10             	add    esp,0x10
 1008769:	eb 05                	jmp    1008770 <ataReadDisk+0x30>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:360
}
int ataReadDisk(struct ataDeviceInfo_t* devInfo, uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
    atablockingReadDev = devInfo;
    if (sector_count==0)    //this function can be called with a sector_count of 0 in order to set partOffset
        return -1;
 100876b:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:362
    return ataBlockingRead28(sector, buffer, sector_count);
}
 1008770:	83 c4 0c             	add    esp,0xc
 1008773:	c3                   	ret    

01008774 <ataBlockingWrite28>:
ataBlockingWrite28():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/ata_disk.c:468
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataBlockingWrite28: Finished sending data\n");
#endif
    return 512;
*/}
 1008774:	f3 c3                	repz ret 
 1008776:	66 90                	xchg   ax,ax

01008778 <kPagingGet4kPDEntryValueCR3>:
kPagingGet4kPDEntryValueCR3():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:21
extern uint32_t kDebugLevel;



uint32_t kPagingGet4kPDEntryValueCR3(uintptr_t PageDirAddress, uint32_t address)
{
 1008778:	53                   	push   ebx
 1008779:	83 ec 08             	sub    esp,0x8
 100877c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:24
    address&=0xFFFFF000;
    uintptr_t*pageDirEntry=((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
    uintptr_t* lTemp=(uint32_t*)((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
 1008780:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 1008784:	c1 e8 16             	shr    eax,0x16
 1008787:	8d 1c 82             	lea    ebx,[edx+eax*4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:26
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 100878a:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008791:	74 13                	je     10087a6 <kPagingGet4kPDEntryValueCR3+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:27
            printk("kPagingGet4kPDEntryValueCR3: dirAddressPtr=0x%08x (PDIR=0x%08X)\n", *lTemp,PageDirAddress);
 1008793:	83 ec 04             	sub    esp,0x4
 1008796:	52                   	push   edx
 1008797:	ff 33                	push   DWORD PTR [ebx]
 1008799:	68 c0 0f 04 01       	push   0x1040fc0
 100879e:	e8 3c 14 00 00       	call   1009bdf <printk>
 10087a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:29
#endif
    return (uint32_t)*lTemp;
 10087a6:	8b 03                	mov    eax,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:30
}
 10087a8:	83 c4 08             	add    esp,0x8
 10087ab:	5b                   	pop    ebx
 10087ac:	c3                   	ret    

010087ad <kPagingGet4kPDEntryValue>:
kPagingGet4kPDEntryValue():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:33

uint32_t kPagingGet4kPDEntryValue(uint32_t address)
{
 10087ad:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:34
    return kPagingGet4kPDEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 10087b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 10087b4:	68 00 a0 4b 00       	push   0x4ba000
 10087b9:	e8 ba ff ff ff       	call   1008778 <kPagingGet4kPDEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:35
}
 10087be:	83 c4 1c             	add    esp,0x1c
 10087c1:	c3                   	ret    

010087c2 <kPagingGet4kPDEntryAddressCR3>:
kPagingGet4kPDEntryAddressCR3():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:38

uint32_t kPagingGet4kPDEntryAddressCR3(uintptr_t PageDirAddress, uint32_t address)
{
 10087c2:	53                   	push   ebx
 10087c3:	83 ec 08             	sub    esp,0x8
 10087c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:40
    address&=0xFFFFF000;
    uintptr_t lTemp=((PageDirAddress  | (((address & 0xFFC00000) >> 22) << 2)));
 10087ca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 10087ce:	c1 eb 16             	shr    ebx,0x16
 10087d1:	c1 e3 02             	shl    ebx,0x2
 10087d4:	09 c3                	or     ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:42
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 10087d6:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 10087dd:	74 12                	je     10087f1 <kPagingGet4kPDEntryAddressCR3+0x2f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:43
            printk("kPagingGet4kPDEntryAddressCR3: dirEntryAddress=0x%08x  (PDIR=0x%08X)\n", lTemp, PageDirAddress);
 10087df:	83 ec 04             	sub    esp,0x4
 10087e2:	50                   	push   eax
 10087e3:	53                   	push   ebx
 10087e4:	68 04 10 04 01       	push   0x1041004
 10087e9:	e8 f1 13 00 00       	call   1009bdf <printk>
 10087ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:46
#endif
    return (uint32_t)lTemp & 0xFFFFFFFF;
}
 10087f1:	89 d8                	mov    eax,ebx
 10087f3:	83 c4 08             	add    esp,0x8
 10087f6:	5b                   	pop    ebx
 10087f7:	c3                   	ret    

010087f8 <kPagingGet4kPDEntryAddress>:
kPagingGet4kPDEntryAddress():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:49

uint32_t kPagingGet4kPDEntryAddress(uint32_t address)
{
 10087f8:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:50
    return kPagingGet4kPDEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 10087fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 10087ff:	68 00 a0 4b 00       	push   0x4ba000
 1008804:	e8 b9 ff ff ff       	call   10087c2 <kPagingGet4kPDEntryAddressCR3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:51
}
 1008809:	83 c4 1c             	add    esp,0x1c
 100880c:	c3                   	ret    

0100880d <kPagingGet4kPTEntryAddressCR3>:
kPagingGet4kPTEntryAddressCR3():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:54

uint32_t kPagingGet4kPTEntryAddressCR3(uintptr_t pageDirAddress, uint32_t address)
{
 100880d:	53                   	push   ebx
 100880e:	83 ec 10             	sub    esp,0x10
 1008811:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:56
    address&=0xFFFFF000;
    uintptr_t pDirPtr=kPagingGet4kPDEntryValueCR3(pageDirAddress,address) & 0xFFFFF000;
 1008815:	89 d8                	mov    eax,ebx
 1008817:	25 00 f0 ff ff       	and    eax,0xfffff000
 100881c:	50                   	push   eax
 100881d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1008821:	e8 52 ff ff ff       	call   1008778 <kPagingGet4kPDEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:57
    return ((address & 0x3FF000) >> 12) << 2 | pDirPtr;
 1008826:	81 e3 00 f0 3f 00    	and    ebx,0x3ff000
 100882c:	c1 eb 0a             	shr    ebx,0xa
 100882f:	25 00 f0 ff ff       	and    eax,0xfffff000
 1008834:	09 d8                	or     eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:58
}
 1008836:	83 c4 18             	add    esp,0x18
 1008839:	5b                   	pop    ebx
 100883a:	c3                   	ret    

0100883b <kPagingGet4kPTEntryAddress>:
kPagingGet4kPTEntryAddress():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:61

uint32_t kPagingGet4kPTEntryAddress(uint32_t address)
{
 100883b:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:62
    return kPagingGet4kPTEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 100883e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1008842:	68 00 a0 4b 00       	push   0x4ba000
 1008847:	e8 c1 ff ff ff       	call   100880d <kPagingGet4kPTEntryAddressCR3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:63
}
 100884c:	83 c4 1c             	add    esp,0x1c
 100884f:	c3                   	ret    

01008850 <kPagingGet4kPTEntryValueCR3>:
kPagingGet4kPTEntryValueCR3():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:66

uint32_t kPagingGet4kPTEntryValueCR3(uintptr_t pageDirAddress, uint32_t address)
{
 1008850:	56                   	push   esi
 1008851:	53                   	push   ebx
 1008852:	83 ec 0c             	sub    esp,0xc
 1008855:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:68
    address&=0xFFFFF000;
    uint32_t* pTablePtr=(uint32_t*)kPagingGet4kPTEntryAddressCR3(pageDirAddress,address);
 1008859:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 100885d:	25 00 f0 ff ff       	and    eax,0xfffff000
 1008862:	50                   	push   eax
 1008863:	56                   	push   esi
 1008864:	e8 a4 ff ff ff       	call   100880d <kPagingGet4kPTEntryAddressCR3>
 1008869:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:70
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 100886b:	83 c4 10             	add    esp,0x10
 100886e:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008875:	74 11                	je     1008888 <kPagingGet4kPTEntryValueCR3+0x38>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:71
             printk("kPagingGet4kPTEntryValueCR3: PTAddress=0x%08X, PTValue=0x%08X (PDIR=0x%08X)\n", pTablePtr,*pTablePtr,pageDirAddress);
 1008877:	56                   	push   esi
 1008878:	ff 30                	push   DWORD PTR [eax]
 100887a:	50                   	push   eax
 100887b:	68 4c 10 04 01       	push   0x104104c
 1008880:	e8 5a 13 00 00       	call   1009bdf <printk>
 1008885:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:73
#endif
    return *pTablePtr;
 1008888:	8b 03                	mov    eax,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:74
}
 100888a:	83 c4 04             	add    esp,0x4
 100888d:	5b                   	pop    ebx
 100888e:	5e                   	pop    esi
 100888f:	c3                   	ret    

01008890 <kPagingGet4kPTEntryValue>:
kPagingGet4kPTEntryValue():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:77

uint32_t kPagingGet4kPTEntryValue(uint32_t address)
{
 1008890:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:78
    return kPagingGet4kPTEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 1008893:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 1008897:	68 00 a0 4b 00       	push   0x4ba000
 100889c:	e8 af ff ff ff       	call   1008850 <kPagingGet4kPTEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:79
}
 10088a1:	83 c4 1c             	add    esp,0x1c
 10088a4:	c3                   	ret    

010088a5 <kPagingSetPageReadOnlyFlag>:
kPagingSetPageReadOnlyFlag():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:85




void kPagingSetPageReadOnlyFlag(uintptr_t* ptEntry, bool readOnly)
{
 10088a5:	56                   	push   esi
 10088a6:	53                   	push   ebx
 10088a7:	83 ec 04             	sub    esp,0x4
 10088aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 10088ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:87
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 10088b2:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 10088b9:	74 13                	je     10088ce <kPagingSetPageReadOnlyFlag+0x29>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:88
            printk("pagingMakePageReadOnly: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
 10088bb:	83 ec 04             	sub    esp,0x4
 10088be:	ff 33                	push   DWORD PTR [ebx]
 10088c0:	53                   	push   ebx
 10088c1:	68 9c 10 04 01       	push   0x104109c
 10088c6:	e8 14 13 00 00       	call   1009bdf <printk>
 10088cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:90
#endif
         if (readOnly)
 10088ce:	89 f0                	mov    eax,esi
 10088d0:	84 c0                	test   al,al
 10088d2:	74 05                	je     10088d9 <kPagingSetPageReadOnlyFlag+0x34>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:91
            *ptEntry&=0xFFFFFFFD;
 10088d4:	83 23 fd             	and    DWORD PTR [ebx],0xfffffffd
 10088d7:	eb 03                	jmp    10088dc <kPagingSetPageReadOnlyFlag+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:93
         else
            *ptEntry|=2; 
 10088d9:	83 0b 02             	or     DWORD PTR [ebx],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:94
    RELOAD_CR3
 10088dc:	0f 20 d8             	mov    eax,cr3
 10088df:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:96
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 10088e2:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 10088e9:	74 12                	je     10088fd <kPagingSetPageReadOnlyFlag+0x58>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:97
            printk("0x%08X\n", *ptEntry);
 10088eb:	83 ec 08             	sub    esp,0x8
 10088ee:	ff 33                	push   DWORD PTR [ebx]
 10088f0:	68 f3 67 06 01       	push   0x10667f3
 10088f5:	e8 e5 12 00 00       	call   1009bdf <printk>
 10088fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:99
#endif
}
 10088fd:	83 c4 04             	add    esp,0x4
 1008900:	5b                   	pop    ebx
 1008901:	5e                   	pop    esi
 1008902:	c3                   	ret    

01008903 <kPagingUpdatePTEPresentFlag>:
kPagingUpdatePTEPresentFlag():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:102

void kPagingUpdatePTEPresentFlag(uintptr_t* ptEntry, bool present)
{
 1008903:	56                   	push   esi
 1008904:	53                   	push   ebx
 1008905:	83 ec 04             	sub    esp,0x4
 1008908:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 100890c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:103
         printd(DEBUG_PAGING,"pagingUpdatePTEPresentFlag: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
 1008910:	ff 33                	push   DWORD PTR [ebx]
 1008912:	53                   	push   ebx
 1008913:	68 d4 10 04 01       	push   0x10410d4
 1008918:	6a 40                	push   0x40
 100891a:	e8 d8 12 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:104
         if (present)
 100891f:	83 c4 10             	add    esp,0x10
 1008922:	89 f0                	mov    eax,esi
 1008924:	84 c0                	test   al,al
 1008926:	74 05                	je     100892d <kPagingUpdatePTEPresentFlag+0x2a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:105
             *ptEntry=*ptEntry | 1;
 1008928:	83 0b 01             	or     DWORD PTR [ebx],0x1
 100892b:	eb 03                	jmp    1008930 <kPagingUpdatePTEPresentFlag+0x2d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:107
         else
             *ptEntry&=0xFFFFFFFE;
 100892d:	83 23 fe             	and    DWORD PTR [ebx],0xfffffffe
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:108
         __asm__("mov eax,cr3\nmov cr3,eax\n":::"eax");
 1008930:	0f 20 d8             	mov    eax,cr3
 1008933:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:109
         printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
 1008936:	83 ec 04             	sub    esp,0x4
 1008939:	ff 33                	push   DWORD PTR [ebx]
 100893b:	68 f3 67 06 01       	push   0x10667f3
 1008940:	6a 40                	push   0x40
 1008942:	e8 b0 12 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:110
}
 1008947:	83 c4 14             	add    esp,0x14
 100894a:	5b                   	pop    ebx
 100894b:	5e                   	pop    esi
 100894c:	c3                   	ret    

0100894d <kSetVirtualRangeRO>:
kSetVirtualRangeRO():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:113

void kSetVirtualRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
 100894d:	55                   	push   ebp
 100894e:	57                   	push   edi
 100894f:	56                   	push   esi
 1008950:	53                   	push   ebx
 1008951:	83 ec 1c             	sub    esp,0x1c
 1008954:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
 1008958:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
 100895c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
 1008960:	89 f7                	mov    edi,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:116
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008962:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008969:	74 12                	je     100897d <kSetVirtualRangeRO+0x30>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:117
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
 100896b:	83 ec 04             	sub    esp,0x4
 100896e:	55                   	push   ebp
 100896f:	53                   	push   ebx
 1008970:	68 10 11 04 01       	push   0x1041110
 1008975:	e8 65 12 00 00       	call   1009bdf <printk>
 100897a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:119 (discriminator 1)
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
 100897d:	83 c5 01             	add    ebp,0x1
 1008980:	39 eb                	cmp    ebx,ebp
 1008982:	77 5b                	ja     10089df <kSetVirtualRangeRO+0x92>
 1008984:	89 f0                	mov    eax,esi
 1008986:	84 c0                	test   al,al
 1008988:	b8 79 64 06 01       	mov    eax,0x1066479
 100898d:	ba ed cd 04 01       	mov    edx,0x104cded
 1008992:	0f 45 c2             	cmovne eax,edx
 1008995:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:126
        startPTE=(uintptr_t*)kPagingGet4kPTEntryAddress(cnt);
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
            printk("0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
 1008999:	89 f8                	mov    eax,edi
 100899b:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:121
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
    {
        startPTE=(uintptr_t*)kPagingGet4kPTEntryAddress(cnt);
 100899e:	83 ec 0c             	sub    esp,0xc
 10089a1:	53                   	push   ebx
 10089a2:	e8 94 fe ff ff       	call   100883b <kPagingGet4kPTEntryAddress>
 10089a7:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:123
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 10089a9:	83 c4 10             	add    esp,0x10
 10089ac:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 10089b3:	74 13                	je     10089c8 <kSetVirtualRangeRO+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:124 (discriminator 4)
            printk("0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
 10089b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 10089b9:	50                   	push   eax
 10089ba:	53                   	push   ebx
 10089bb:	68 7c 64 06 01       	push   0x106647c
 10089c0:	e8 1a 12 00 00       	call   1009bdf <printk>
 10089c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:126 (discriminator 2)
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
 10089c8:	83 ec 08             	sub    esp,0x8
 10089cb:	57                   	push   edi
 10089cc:	56                   	push   esi
 10089cd:	e8 d3 fe ff ff       	call   10088a5 <kPagingSetPageReadOnlyFlag>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:119 (discriminator 2)
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
 10089d2:	81 c3 00 10 00 00    	add    ebx,0x1000
 10089d8:	83 c4 10             	add    esp,0x10
 10089db:	39 eb                	cmp    ebx,ebp
 10089dd:	76 bf                	jbe    100899e <kSetVirtualRangeRO+0x51>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:130
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
            
    }
        //for cnt=0;cnt<=8192;cnt+=4096
}
 10089df:	83 c4 1c             	add    esp,0x1c
 10089e2:	5b                   	pop    ebx
 10089e3:	5e                   	pop    esi
 10089e4:	5f                   	pop    edi
 10089e5:	5d                   	pop    ebp
 10089e6:	c3                   	ret    

010089e7 <kpagingUpdatePresentFlagA>:
kpagingUpdatePresentFlagA():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:134

//Absolute version, page passed is already virtual
void kpagingUpdatePresentFlagA(uint32_t address, bool present)
{
 10089e7:	56                   	push   esi
 10089e8:	53                   	push   ebx
 10089e9:	83 ec 04             	sub    esp,0x4
 10089ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 10089f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:136
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 10089f4:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 10089fb:	74 21                	je     1008a1e <kpagingUpdatePresentFlagA+0x37>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:137
            printk("kpagingUpdatePresentFlagA: Make 0x%08X %s\n", address, present?"present":"not present");
 10089fd:	84 db                	test   bl,bl
 10089ff:	ba 94 64 06 01       	mov    edx,0x1066494
 1008a04:	b8 98 64 06 01       	mov    eax,0x1066498
 1008a09:	0f 44 c2             	cmove  eax,edx
 1008a0c:	83 ec 04             	sub    esp,0x4
 1008a0f:	50                   	push   eax
 1008a10:	56                   	push   esi
 1008a11:	68 40 11 04 01       	push   0x1041140
 1008a16:	e8 c4 11 00 00       	call   1009bdf <printk>
 1008a1b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:139
#endif
        uintptr_t* pagePTE= (uintptr_t*)kPagingGet4kPTEntryAddress(address&0xFFFFF000);
 1008a1e:	83 ec 0c             	sub    esp,0xc
 1008a21:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
 1008a27:	56                   	push   esi
 1008a28:	e8 0e fe ff ff       	call   100883b <kPagingGet4kPTEntryAddress>
 1008a2d:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:141
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008a2f:	83 c4 10             	add    esp,0x10
 1008a32:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008a39:	74 11                	je     1008a4c <kpagingUpdatePresentFlagA+0x65>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:142
            printk("kpagingUpdatePresentFlagA: updating entry 0x%08X\n", pagePTE);
 1008a3b:	83 ec 08             	sub    esp,0x8
 1008a3e:	50                   	push   eax
 1008a3f:	68 6c 11 04 01       	push   0x104116c
 1008a44:	e8 96 11 00 00       	call   1009bdf <printk>
 1008a49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:144
#endif
        kPagingUpdatePTEPresentFlag(pagePTE, present);
 1008a4c:	83 ec 08             	sub    esp,0x8
 1008a4f:	0f b6 db             	movzx  ebx,bl
 1008a52:	53                   	push   ebx
 1008a53:	56                   	push   esi
 1008a54:	e8 aa fe ff ff       	call   1008903 <kPagingUpdatePTEPresentFlag>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:145
}
 1008a59:	83 c4 14             	add    esp,0x14
 1008a5c:	5b                   	pop    ebx
 1008a5d:	5e                   	pop    esi
 1008a5e:	c3                   	ret    

01008a5f <kpagingUpdatePresentFlagV>:
kpagingUpdatePresentFlagV():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:148

void kpagingUpdatePresentFlagV(uint32_t address, bool present)
{
 1008a5f:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:150
    address+=KERNEL_PAGED_BASE_ADDRESS; 
    kpagingUpdatePresentFlagA(address, present);
 1008a62:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
 1008a67:	50                   	push   eax
 1008a68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 1008a6c:	2d 00 00 00 40       	sub    eax,0x40000000
 1008a71:	50                   	push   eax
 1008a72:	e8 70 ff ff ff       	call   10089e7 <kpagingUpdatePresentFlagA>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:151
}
 1008a77:	83 c4 1c             	add    esp,0x1c
 1008a7a:	c3                   	ret    

01008a7b <kMapPage>:
kMapPage():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:154

void kMapPage(uintptr_t mapTo, uintptr_t mapFrom, uint8_t flags)
{
 1008a7b:	57                   	push   edi
 1008a7c:	56                   	push   esi
 1008a7d:	53                   	push   ebx
 1008a7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
 1008a82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:159
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
    ptrVal=ptr[(mapTo>>22)];
 1008a86:	89 cb                	mov    ebx,ecx
 1008a88:	c1 eb 16             	shr    ebx,0x16
 1008a8b:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
 1008a90:	8d 1c 98             	lea    ebx,[eax+ebx*4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:160
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
 1008a93:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
 1008a96:	75 6a                	jne    1008b02 <kMapPage+0x87>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:160 (discriminator 1)
 1008a98:	bf 00 00 00 00       	mov    edi,0x0
 1008a9d:	3b 3d 8c 95 12 00    	cmp    edi,DWORD PTR ds:0x12958c
 1008aa3:	72 08                	jb     1008aad <kMapPage+0x32>
 1008aa5:	3b 0d 88 95 12 00    	cmp    ecx,DWORD PTR ds:0x129588
 1008aab:	73 41                	jae    1008aee <kMapPage+0x73>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:163
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
 1008aad:	c7 03 63 00 00 20    	mov    DWORD PTR [ebx],0x20000063
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:164
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
 1008ab3:	89 c8                	mov    eax,ecx
 1008ab5:	25 ff 03 00 00       	and    eax,0x3ff
 1008aba:	8d 34 85 00 00 00 20 	lea    esi,[eax*4+0x20000000]
 1008ac1:	0f b6 d2             	movzx  edx,dl
 1008ac4:	0b 54 24 14          	or     edx,DWORD PTR [esp+0x14]
 1008ac8:	89 14 85 00 00 00 20 	mov    DWORD PTR [eax*4+0x20000000],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:166
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008acf:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008ad6:	74 64                	je     1008b3c <kMapPage+0xc1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:167
            printk("kMapPage: Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)],ptrT[(mapTo&0x003FFFFF/4096)]);
 1008ad8:	83 ec 0c             	sub    esp,0xc
 1008adb:	52                   	push   edx
 1008adc:	56                   	push   esi
 1008add:	53                   	push   ebx
 1008ade:	51                   	push   ecx
 1008adf:	68 a0 11 04 01       	push   0x10411a0
 1008ae4:	e8 f6 10 00 00       	call   1009bdf <printk>
 1008ae9:	83 c4 20             	add    esp,0x20
 1008aec:	eb 4e                	jmp    1008b3c <kMapPage+0xc1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:175
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
        if (ptr[(mapTo>>22)]==0)
            ptr[mapTo>>22]=(KERNEL_PAGE_TABLE_BASE_ADDRESS + ((mapTo&0x003FFFFF)/4096)) | 0x63;
 1008aee:	89 c8                	mov    eax,ecx
 1008af0:	25 ff ff 3f 00       	and    eax,0x3fffff
 1008af5:	c1 e8 0c             	shr    eax,0xc
 1008af8:	05 00 c0 4c 00       	add    eax,0x4cc000
 1008afd:	83 c8 63             	or     eax,0x63
 1008b00:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:181
        ptrVal=ptr[mapTo>>22];
        ptrVal=(ptrVal&0xFFFFF000);
        ptrT=(uint32_t*)ptrVal;
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
        ptrT[ptrVal]=mapFrom | flags;
 1008b02:	8b 33                	mov    esi,DWORD PTR [ebx]
 1008b04:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
 1008b0a:	89 c8                	mov    eax,ecx
 1008b0c:	c1 e8 0a             	shr    eax,0xa
 1008b0f:	25 fc 0f 00 00       	and    eax,0xffc
 1008b14:	01 f0                	add    eax,esi
 1008b16:	0f b6 d2             	movzx  edx,dl
 1008b19:	0b 54 24 14          	or     edx,DWORD PTR [esp+0x14]
 1008b1d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:185
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008b1f:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008b26:	74 14                	je     1008b3c <kMapPage+0xc1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:186
            printk("2) Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal],ptrT[ptrVal]);
 1008b28:	83 ec 0c             	sub    esp,0xc
 1008b2b:	52                   	push   edx
 1008b2c:	50                   	push   eax
 1008b2d:	53                   	push   ebx
 1008b2e:	51                   	push   ecx
 1008b2f:	68 e0 11 04 01       	push   0x10411e0
 1008b34:	e8 a6 10 00 00       	call   1009bdf <printk>
 1008b39:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:190
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
 1008b3c:	5b                   	pop    ebx
 1008b3d:	5e                   	pop    esi
 1008b3e:	5f                   	pop    edi
 1008b3f:	c3                   	ret    

01008b40 <kIsPageMapped>:
kIsPageMapped():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:193

bool kIsPageMapped(uintptr_t Address)
{
 1008b40:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:194
    if (!kPagingGet4kPTEntryValue(Address))
 1008b43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1008b47:	e8 44 fd ff ff       	call   1008890 <kPagingGet4kPTEntryValue>
 1008b4c:	85 c0                	test   eax,eax
 1008b4e:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:197
        return false;
    return true;
}
 1008b51:	83 c4 1c             	add    esp,0x1c
 1008b54:	c3                   	ret    

01008b55 <kUnMapPage>:
kUnMapPage():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:200

void kUnMapPage(uintptr_t mapTo)
{
 1008b55:	57                   	push   edi
 1008b56:	56                   	push   esi
 1008b57:	83 ec 04             	sub    esp,0x4
 1008b5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:205
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
    ptrVal=ptr[(mapTo>>22)];
 1008b5e:	89 d1                	mov    ecx,edx
 1008b60:	c1 e9 16             	shr    ecx,0x16
 1008b63:	a1 e4 97 12 00       	mov    eax,ds:0x1297e4
 1008b68:	8d 0c 88             	lea    ecx,[eax+ecx*4]
 1008b6b:	8b 01                	mov    eax,DWORD PTR [ecx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:206
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
 1008b6d:	85 c0                	test   eax,eax
 1008b6f:	75 4f                	jne    1008bc0 <kUnMapPage+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:206 (discriminator 1)
 1008b71:	bf 00 00 00 00       	mov    edi,0x0
 1008b76:	3b 3d 8c 95 12 00    	cmp    edi,DWORD PTR ds:0x12958c
 1008b7c:	72 08                	jb     1008b86 <kUnMapPage+0x31>
 1008b7e:	3b 15 88 95 12 00    	cmp    edx,DWORD PTR ds:0x129588
 1008b84:	73 3a                	jae    1008bc0 <kUnMapPage+0x6b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:209
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
 1008b86:	c7 01 63 00 00 20    	mov    DWORD PTR [ecx],0x20000063
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:210
        ptrT[(mapTo&0x003FFFFF/4096)]=0;
 1008b8c:	89 d0                	mov    eax,edx
 1008b8e:	25 ff 03 00 00       	and    eax,0x3ff
 1008b93:	8d 34 85 00 00 00 20 	lea    esi,[eax*4+0x20000000]
 1008b9a:	c7 04 85 00 00 00 20 	mov    DWORD PTR [eax*4+0x20000000],0x0
 1008ba1:	00 00 00 00 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:212
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008ba5:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008bac:	74 44                	je     1008bf2 <kUnMapPage+0x9d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:213
            printk("kMapPage: Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)]);
 1008bae:	56                   	push   esi
 1008baf:	51                   	push   ecx
 1008bb0:	52                   	push   edx
 1008bb1:	68 1c 12 04 01       	push   0x104121c
 1008bb6:	e8 24 10 00 00       	call   1009bdf <printk>
 1008bbb:	83 c4 10             	add    esp,0x10
 1008bbe:	eb 32                	jmp    1008bf2 <kUnMapPage+0x9d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:225
        ptrVal=ptr[mapTo>>22];
        ptrVal=(ptrVal&0xFFFFF000);
        ptrT=(uint32_t*)ptrVal;
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
        ptrT[ptrVal]=0;
 1008bc0:	25 00 f0 ff ff       	and    eax,0xfffff000
 1008bc5:	89 c6                	mov    esi,eax
 1008bc7:	89 d0                	mov    eax,edx
 1008bc9:	c1 e8 0a             	shr    eax,0xa
 1008bcc:	25 fc 0f 00 00       	and    eax,0xffc
 1008bd1:	01 f0                	add    eax,esi
 1008bd3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:229
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008bd9:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008be0:	74 10                	je     1008bf2 <kUnMapPage+0x9d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:230
            printk("2) Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal]);
 1008be2:	50                   	push   eax
 1008be3:	51                   	push   ecx
 1008be4:	52                   	push   edx
 1008be5:	68 54 12 04 01       	push   0x1041254
 1008bea:	e8 f0 0f 00 00       	call   1009bdf <printk>
 1008bef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:234
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
 1008bf2:	83 c4 04             	add    esp,0x4
 1008bf5:	5e                   	pop    esi
 1008bf6:	5f                   	pop    edi
 1008bf7:	c3                   	ret    

01008bf8 <kSetPhysicalRangeRO>:
kSetPhysicalRangeRO():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:237

void kSetPhysicalRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
 1008bf8:	55                   	push   ebp
 1008bf9:	57                   	push   edi
 1008bfa:	56                   	push   esi
 1008bfb:	53                   	push   ebx
 1008bfc:	83 ec 0c             	sub    esp,0xc
 1008bff:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 1008c03:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
 1008c07:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:239
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008c0b:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008c12:	74 22                	je     1008c36 <kSetPhysicalRangeRO+0x3e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:240
            printk("kMakePhysicalRangeRO: Make 0x%08X(0x%08X)-0x%08X(0x%08X) r/o\n", startAddy, startAddy&0xFffff000, endAddy, endAddy&0xFFFFF000);
 1008c14:	83 ec 0c             	sub    esp,0xc
 1008c17:	89 f0                	mov    eax,esi
 1008c19:	25 00 f0 ff ff       	and    eax,0xfffff000
 1008c1e:	50                   	push   eax
 1008c1f:	56                   	push   esi
 1008c20:	89 e8                	mov    eax,ebp
 1008c22:	25 00 f0 ff ff       	and    eax,0xfffff000
 1008c27:	50                   	push   eax
 1008c28:	55                   	push   ebp
 1008c29:	68 84 12 04 01       	push   0x1041284
 1008c2e:	e8 ac 0f 00 00       	call   1009bdf <printk>
 1008c33:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:242
#endif
    kSetVirtualRangeRO((startAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, (endAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, readOnly);
 1008c36:	83 ec 04             	sub    esp,0x4
 1008c39:	0f b6 fb             	movzx  edi,bl
 1008c3c:	57                   	push   edi
 1008c3d:	81 ee 00 00 00 40    	sub    esi,0x40000000
 1008c43:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
 1008c49:	56                   	push   esi
 1008c4a:	8d 9d 00 00 00 c0    	lea    ebx,[ebp-0x40000000]
 1008c50:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
 1008c56:	53                   	push   ebx
 1008c57:	e8 f1 fc ff ff       	call   100894d <kSetVirtualRangeRO>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:243
}
 1008c5c:	83 c4 1c             	add    esp,0x1c
 1008c5f:	5b                   	pop    ebx
 1008c60:	5e                   	pop    esi
 1008c61:	5f                   	pop    edi
 1008c62:	5d                   	pop    ebp
 1008c63:	c3                   	ret    

01008c64 <mmKernelSetPageInUseFlag>:
mmKernelSetPageInUseFlag():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:246

void mmKernelSetPageInUseFlag(uintptr_t address, bool inUse)
{
 1008c64:	56                   	push   esi
 1008c65:	53                   	push   ebx
 1008c66:	83 ec 04             	sub    esp,0x4
 1008c69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1008c6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:249
    uintptr_t* ptEntry;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 1008c71:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 1008c78:	74 22                	je     1008c9c <mmKernelSetPageInUseFlag+0x38>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:250
           printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
 1008c7a:	89 f0                	mov    eax,esi
 1008c7c:	84 c0                	test   al,al
 1008c7e:	ba a0 64 06 01       	mov    edx,0x10664a0
 1008c83:	b8 a4 64 06 01       	mov    eax,0x10664a4
 1008c88:	0f 44 c2             	cmove  eax,edx
 1008c8b:	50                   	push   eax
 1008c8c:	53                   	push   ebx
 1008c8d:	68 c4 12 04 01       	push   0x10412c4
 1008c92:	6a 40                	push   0x40
 1008c94:	e8 5e 0f 00 00       	call   1009bf7 <printd>
 1008c99:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:252
#endif
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
 1008c9c:	83 ec 0c             	sub    esp,0xc
 1008c9f:	53                   	push   ebx
 1008ca0:	e8 96 fb ff ff       	call   100883b <kPagingGet4kPTEntryAddress>
 1008ca5:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:253
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
 1008ca7:	ff 30                	push   DWORD PTR [eax]
 1008ca9:	50                   	push   eax
 1008caa:	68 08 13 04 01       	push   0x1041308
 1008caf:	6a 40                	push   0x40
 1008cb1:	e8 41 0f 00 00       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:254
        if (inUse)
 1008cb6:	83 c4 20             	add    esp,0x20
 1008cb9:	89 f0                	mov    eax,esi
 1008cbb:	84 c0                	test   al,al
 1008cbd:	74 08                	je     1008cc7 <mmKernelSetPageInUseFlag+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:255
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
 1008cbf:	81 0b 00 08 00 00    	or     DWORD PTR [ebx],0x800
 1008cc5:	eb 06                	jmp    1008ccd <mmKernelSetPageInUseFlag+0x69>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:257
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
 1008cc7:	81 23 ff f7 ff ff    	and    DWORD PTR [ebx],0xfffff7ff
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:258
}
 1008ccd:	83 c4 04             	add    esp,0x4
 1008cd0:	5b                   	pop    ebx
 1008cd1:	5e                   	pop    esi
 1008cd2:	c3                   	ret    

01008cd3 <mmKernelSetPageRangeInUseFlag>:
mmKernelSetPageRangeInUseFlag():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:261

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
 1008cd3:	55                   	push   ebp
 1008cd4:	57                   	push   edi
 1008cd5:	56                   	push   esi
 1008cd6:	53                   	push   ebx
 1008cd7:	83 ec 0c             	sub    esp,0xc
 1008cda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
 1008cde:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
 1008ce2:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
 1008ce6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:262
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
 1008ceb:	39 fb                	cmp    ebx,edi
 1008ced:	73 16                	jae    1008d05 <mmKernelSetPageRangeInUseFlag+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:263 (discriminator 3)
        mmKernelSetPageInUseFlag(cnt,inUse);
 1008cef:	0f b6 f0             	movzx  esi,al
 1008cf2:	83 ec 08             	sub    esp,0x8
 1008cf5:	56                   	push   esi
 1008cf6:	53                   	push   ebx
 1008cf7:	e8 68 ff ff ff       	call   1008c64 <mmKernelSetPageInUseFlag>
 1008cfc:	01 eb                	add    ebx,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:262 (discriminator 3)
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
 1008cfe:	83 c4 10             	add    esp,0x10
 1008d01:	39 fb                	cmp    ebx,edi
 1008d03:	72 ed                	jb     1008cf2 <mmKernelSetPageRangeInUseFlag+0x1f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:264
        mmKernelSetPageInUseFlag(cnt,inUse);
}
 1008d05:	83 c4 0c             	add    esp,0xc
 1008d08:	5b                   	pop    ebx
 1008d09:	5e                   	pop    esi
 1008d0a:	5f                   	pop    edi
 1008d0b:	5d                   	pop    ebp
 1008d0c:	c3                   	ret    

01008d0d <mmUnusePageRange>:
mmUnusePageRange():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/kpaging.c:267

void mmUnusePageRange()
{
 1008d0d:	f3 c3                	repz ret 
 1008d0f:	90                   	nop

01008d10 <reverse>:
reverse():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:30
//#include <string.h>

/* reverse:  reverse string s in place */
extern int strlen(char*);
 void reverse(char s[])
 {
 1008d10:	56                   	push   esi
 1008d11:	53                   	push   ebx
 1008d12:	83 ec 10             	sub    esp,0x10
 1008d15:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:34
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 1008d19:	53                   	push   ebx
 1008d1a:	e8 dd 0f 00 00       	call   1009cfc <strlen>
 1008d1f:	83 e8 01             	sub    eax,0x1
 1008d22:	83 c4 10             	add    esp,0x10
 1008d25:	85 c0                	test   eax,eax
 1008d27:	7e 1f                	jle    1008d48 <reverse+0x38>
 1008d29:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:35 (discriminator 3)
         c = s[i];
 1008d2e:	0f b6 34 13          	movzx  esi,BYTE PTR [ebx+edx*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:36 (discriminator 3)
         s[i] = s[j];
 1008d32:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
 1008d36:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:37 (discriminator 3)
         s[j] = c;
 1008d39:	89 f1                	mov    ecx,esi
 1008d3b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:34 (discriminator 3)
 void reverse(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 1008d3e:	83 c2 01             	add    edx,0x1
 1008d41:	83 e8 01             	sub    eax,0x1
 1008d44:	39 c2                	cmp    edx,eax
 1008d46:	7c e6                	jl     1008d2e <reverse+0x1e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:39
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
 1008d48:	83 c4 04             	add    esp,0x4
 1008d4b:	5b                   	pop    ebx
 1008d4c:	5e                   	pop    esi
 1008d4d:	c3                   	ret    

01008d4e <itoa>:
itoa():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:41
 void itoa(int n, char s[])
 {
 1008d4e:	55                   	push   ebp
 1008d4f:	57                   	push   edi
 1008d50:	56                   	push   esi
 1008d51:	53                   	push   ebx
 1008d52:	83 ec 1c             	sub    esp,0x1c
 1008d55:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
 1008d59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
 1008d5d:	c1 f8 1f             	sar    eax,0x1f
 1008d60:	89 c1                	mov    ecx,eax
 1008d62:	33 4c 24 30          	xor    ecx,DWORD PTR [esp+0x30]
 1008d66:	29 c1                	sub    ecx,eax
 1008d68:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:48

     if ((sign = n) < 0)  /* record sign */
         n = -n;          /* make n positive */
     i = 0;
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
 1008d6d:	bd 67 66 66 66       	mov    ebp,0x66666667
 1008d72:	eb 02                	jmp    1008d76 <itoa+0x28>
 1008d74:	89 de                	mov    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:48 (discriminator 1)
 1008d76:	8d 5e 01             	lea    ebx,[esi+0x1]
 1008d79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
 1008d7d:	89 c8                	mov    eax,ecx
 1008d7f:	f7 ed                	imul   ebp
 1008d81:	c1 fa 02             	sar    edx,0x2
 1008d84:	89 c8                	mov    eax,ecx
 1008d86:	c1 f8 1f             	sar    eax,0x1f
 1008d89:	29 c2                	sub    edx,eax
 1008d8b:	8d 04 92             	lea    eax,[edx+edx*4]
 1008d8e:	01 c0                	add    eax,eax
 1008d90:	29 c1                	sub    ecx,eax
 1008d92:	83 c1 30             	add    ecx,0x30
 1008d95:	88 4c 1f ff          	mov    BYTE PTR [edi+ebx*1-0x1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:49 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
 1008d99:	89 d1                	mov    ecx,edx
 1008d9b:	85 d2                	test   edx,edx
 1008d9d:	7f d5                	jg     1008d74 <itoa+0x26>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:50
     if (sign < 0)
 1008d9f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
 1008da4:	79 0b                	jns    1008db1 <itoa+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:51
         s[i++] = '-';
 1008da6:	8d 5e 02             	lea    ebx,[esi+0x2]
 1008da9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1008dad:	c6 04 07 2d          	mov    BYTE PTR [edi+eax*1],0x2d
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:52
     s[i] = '\0';
 1008db1:	c6 04 1f 00          	mov    BYTE PTR [edi+ebx*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:53
     reverse(s);
 1008db5:	83 ec 0c             	sub    esp,0xc
 1008db8:	57                   	push   edi
 1008db9:	e8 52 ff ff ff       	call   1008d10 <reverse>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:54
 }
 1008dbe:	83 c4 2c             	add    esp,0x2c
 1008dc1:	5b                   	pop    ebx
 1008dc2:	5e                   	pop    esi
 1008dc3:	5f                   	pop    edi
 1008dc4:	5d                   	pop    ebp
 1008dc5:	c3                   	ret    

01008dc6 <itox>:
itox():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:56
void itox(unsigned int i, char *s)
{
 1008dc6:	53                   	push   ebx
 1008dc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 1008dcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:59
    unsigned char n;

    s += 4;
 1008dcf:	8d 43 04             	lea    eax,[ebx+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:60
    *s = '\0';
 1008dd2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
 1008dd6:	83 eb 04             	sub    ebx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:63 (discriminator 3)

    for (n = 8; n != 0; --n) {
        *--s = "0123456789ABCDEF"[i & 0x0F];
 1008dd9:	83 e8 01             	sub    eax,0x1
 1008ddc:	89 d1                	mov    ecx,edx
 1008dde:	83 e1 0f             	and    ecx,0xf
 1008de1:	0f b6 89 ab 64 06 01 	movzx  ecx,BYTE PTR [ecx+0x10664ab]
 1008de8:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:64 (discriminator 3)
        i >>= 4;
 1008dea:	c1 ea 04             	shr    edx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:62 (discriminator 3)
    unsigned char n;

    s += 4;
    *s = '\0';

    for (n = 8; n != 0; --n) {
 1008ded:	39 c3                	cmp    ebx,eax
 1008def:	75 e8                	jne    1008dd9 <itox+0x13>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:66
        *--s = "0123456789ABCDEF"[i & 0x0F];
        i >>= 4;
    }
}
 1008df1:	5b                   	pop    ebx
 1008df2:	c3                   	ret    

01008df3 <atoi>:
atoi():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:69
// A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoi(char *str)
{
 1008df3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:74
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
 1008df7:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
 1008dfa:	84 d2                	test   dl,dl
 1008dfc:	74 1f                	je     1008e1d <atoi+0x2a>
 1008dfe:	83 c1 01             	add    ecx,0x1
 1008e01:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:75 (discriminator 3)
        res = res*10 + str[i] - '0';
 1008e06:	8d 04 80             	lea    eax,[eax+eax*4]
 1008e09:	0f be d2             	movsx  edx,dl
 1008e0c:	8d 44 42 d0          	lea    eax,[edx+eax*2-0x30]
 1008e10:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:74 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
 1008e13:	0f b6 51 ff          	movzx  edx,BYTE PTR [ecx-0x1]
 1008e17:	84 d2                	test   dl,dl
 1008e19:	75 eb                	jne    1008e06 <atoi+0x13>
 1008e1b:	f3 c3                	repz ret 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:70
    }
}
// A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoi(char *str)
{
    int res = 0; // Initialize result
 1008e1d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:79
    for (int i = 0; str[i] != '\0'; ++i)
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
}
 1008e22:	c3                   	ret    

01008e23 <convert>:
convert():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:82

int convert(int s)
{
 1008e23:	83 ec 10             	sub    esp,0x10
 1008e26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:84
  int c;
  char hex[] = {'A', 'B', 'C', 'D', 'E', 'F'};
 1008e2a:	c6 44 24 0a 41       	mov    BYTE PTR [esp+0xa],0x41
 1008e2f:	c6 44 24 0b 42       	mov    BYTE PTR [esp+0xb],0x42
 1008e34:	c6 44 24 0c 43       	mov    BYTE PTR [esp+0xc],0x43
 1008e39:	c6 44 24 0d 44       	mov    BYTE PTR [esp+0xd],0x44
 1008e3e:	c6 44 24 0e 45       	mov    BYTE PTR [esp+0xe],0x45
 1008e43:	c6 44 24 0f 46       	mov    BYTE PTR [esp+0xf],0x46
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:85
  c = (s >= 0 && s < 9) ? s + '0' : hex[s - 10];
 1008e48:	83 f8 08             	cmp    eax,0x8
 1008e4b:	77 05                	ja     1008e52 <convert+0x2f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:85 (discriminator 1)
 1008e4d:	83 c0 30             	add    eax,0x30
 1008e50:	eb 04                	jmp    1008e56 <convert+0x33>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:85 (discriminator 2)
 1008e52:	0f be 04 04          	movsx  eax,BYTE PTR [esp+eax*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:87 (discriminator 4)
  return c;
}
 1008e56:	83 c4 10             	add    esp,0x10
 1008e59:	c3                   	ret    

01008e5a <itoha>:
itoha():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:90

void itoha(unsigned int n, char *buf)
{
 1008e5a:	55                   	push   ebp
 1008e5b:	57                   	push   edi
 1008e5c:	56                   	push   esi
 1008e5d:	53                   	push   ebx
 1008e5e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 1008e62:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:93
  int i = 0, j =0;
  j=7;
  while(n != 0)
 1008e66:	85 db                	test   ebx,ebx
 1008e68:	74 25                	je     1008e8f <itoha+0x35>
 1008e6a:	be 07 00 00 00       	mov    esi,0x7
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:95
  {
    i = n % 16;
 1008e6f:	89 dd                	mov    ebp,ebx
 1008e71:	83 e5 0f             	and    ebp,0xf
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:96
      buf[j--] = convert(i);
 1008e74:	83 ee 01             	sub    esi,0x1
 1008e77:	55                   	push   ebp
 1008e78:	e8 a6 ff ff ff       	call   1008e23 <convert>
 1008e7d:	83 c4 04             	add    esp,0x4
 1008e80:	88 44 37 01          	mov    BYTE PTR [edi+esi*1+0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:97
      n = (n - i) / 16;
 1008e84:	29 eb                	sub    ebx,ebp
 1008e86:	c1 eb 04             	shr    ebx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:93

void itoha(unsigned int n, char *buf)
{
  int i = 0, j =0;
  j=7;
  while(n != 0)
 1008e89:	85 db                	test   ebx,ebx
 1008e8b:	75 e2                	jne    1008e6f <itoha+0x15>
 1008e8d:	eb 05                	jmp    1008e94 <itoha+0x3a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:92
}

void itoha(unsigned int n, char *buf)
{
  int i = 0, j =0;
  j=7;
 1008e8f:	be 07 00 00 00       	mov    esi,0x7
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:99
  {
    i = n % 16;
      buf[j--] = convert(i);
      n = (n - i) / 16;
  }
  buf[j] = '\0';
 1008e94:	c6 04 37 00          	mov    BYTE PTR [edi+esi*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:100
}
 1008e98:	5b                   	pop    ebx
 1008e99:	5e                   	pop    esi
 1008e9a:	5f                   	pop    edi
 1008e9b:	5d                   	pop    ebp
 1008e9c:	c3                   	ret    

01008e9d <identify_data_sizes>:
identify_data_sizes():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:103

void identify_data_sizes(sizeof_t* sizes)
{
 1008e9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:104
    sizes->shortSize = sizeof(short);
 1008ea1:	66 c7 00 02 00       	mov    WORD PTR [eax],0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:105
    sizes->intSize = sizeof(int);
 1008ea6:	66 c7 40 02 04 00    	mov    WORD PTR [eax+0x2],0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:106
    sizes->longSize = sizeof(long);
 1008eac:	66 c7 40 04 04 00    	mov    WORD PTR [eax+0x4],0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:107
    sizes->longLongSize = sizeof(long long);
 1008eb2:	66 c7 40 06 08 00    	mov    WORD PTR [eax+0x6],0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:108
    sizes->longLongIntSize = sizeof(long long int);
 1008eb8:	66 c7 40 08 08 00    	mov    WORD PTR [eax+0x8],0x8
 1008ebe:	c3                   	ret    

01008ebf <memset>:
memset():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:112
}

void *memset(void *d1, int val, size_t len)
{
 1008ebf:	56                   	push   esi
 1008ec0:	53                   	push   ebx
 1008ec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1008ec5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 1008ec9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:115
    uint8_t *d = d1;
    uint16_t*e = d1;
    uint16_t eVal=(val << 16) | (val << 8) | val;
 1008ecd:	89 f1                	mov    ecx,esi
 1008ecf:	c1 e1 08             	shl    ecx,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:119
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
 1008ed2:	f6 c2 03             	test   dl,0x3
 1008ed5:	75 16                	jne    1008eed <memset+0x2e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:120
    while (len-=4) {
 1008ed7:	83 ea 04             	sub    edx,0x4
 1008eda:	74 43                	je     1008f1f <memset+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:121
        *d++ = fVal;
 1008edc:	89 f3                	mov    ebx,esi
 1008ede:	89 c1                	mov    ecx,eax
 1008ee0:	83 c1 01             	add    ecx,0x1
 1008ee3:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:120
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
 1008ee6:	83 ea 04             	sub    edx,0x4
 1008ee9:	75 f5                	jne    1008ee0 <memset+0x21>
 1008eeb:	eb 32                	jmp    1008f1f <memset+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:123
        *d++ = fVal;
    }
    else if (((len%2)==0))
 1008eed:	f6 c2 01             	test   dl,0x1
 1008ef0:	74 0b                	je     1008efd <memset+0x3e>
 1008ef2:	8d 1c 10             	lea    ebx,[eax+edx*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:128
    while (len-=2) {
        *d++ = eVal;
    }
    else
    while (len--) {
 1008ef5:	89 c1                	mov    ecx,eax
 1008ef7:	85 d2                	test   edx,edx
 1008ef9:	75 18                	jne    1008f13 <memset+0x54>
 1008efb:	eb 22                	jmp    1008f1f <memset+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:124
    if ((len%4)==0)
    while (len-=4) {
        *d++ = fVal;
    }
    else if (((len%2)==0))
    while (len-=2) {
 1008efd:	83 ea 02             	sub    edx,0x2
 1008f00:	74 1d                	je     1008f1f <memset+0x60>
 1008f02:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:125
        *d++ = eVal;
 1008f04:	09 f1                	or     ecx,esi
 1008f06:	83 c3 01             	add    ebx,0x1
 1008f09:	88 4b ff             	mov    BYTE PTR [ebx-0x1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:124
    if ((len%4)==0)
    while (len-=4) {
        *d++ = fVal;
    }
    else if (((len%2)==0))
    while (len-=2) {
 1008f0c:	83 ea 02             	sub    edx,0x2
 1008f0f:	75 f5                	jne    1008f06 <memset+0x47>
 1008f11:	eb 0c                	jmp    1008f1f <memset+0x60>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:129
        *d++ = eVal;
    }
    else
    while (len--) {
        *d++ = val;
 1008f13:	83 c1 01             	add    ecx,0x1
 1008f16:	89 f2                	mov    edx,esi
 1008f18:	88 51 ff             	mov    BYTE PTR [ecx-0x1],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:128
    else if (((len%2)==0))
    while (len-=2) {
        *d++ = eVal;
    }
    else
    while (len--) {
 1008f1b:	39 cb                	cmp    ebx,ecx
 1008f1d:	75 f4                	jne    1008f13 <memset+0x54>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:132
        *d++ = val;
    }
    return d1;
}
 1008f1f:	5b                   	pop    ebx
 1008f20:	5e                   	pop    esi
 1008f21:	c3                   	ret    

01008f22 <bcdToDec>:
bcdToDec():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:135

uint8_t bcdToDec(uint8_t val)
{
 1008f22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:136
  return ( (val/16*10) + (val%16) );
 1008f26:	89 c2                	mov    edx,eax
 1008f28:	c0 ea 04             	shr    dl,0x4
 1008f2b:	8d 14 92             	lea    edx,[edx+edx*4]
 1008f2e:	83 e0 0f             	and    eax,0xf
 1008f31:	8d 04 50             	lea    eax,[eax+edx*2]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:137
}
 1008f34:	c3                   	ret    

01008f35 <decToBcd>:
decToBcd():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:140

uint8_t decToBcd(uint8_t val)
{
 1008f35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:141
  return ( (val/10*16) + (val%10) );
 1008f39:	0f b6 c8             	movzx  ecx,al
 1008f3c:	8d 14 89             	lea    edx,[ecx+ecx*4]
 1008f3f:	8d 14 d1             	lea    edx,[ecx+edx*8]
 1008f42:	8d 14 92             	lea    edx,[edx+edx*4]
 1008f45:	66 c1 ea 0b          	shr    dx,0xb
 1008f49:	89 d1                	mov    ecx,edx
 1008f4b:	c1 e1 04             	shl    ecx,0x4
 1008f4e:	8d 14 92             	lea    edx,[edx+edx*4]
 1008f51:	01 d2                	add    edx,edx
 1008f53:	29 d0                	sub    eax,edx
 1008f55:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:142
}
 1008f57:	c3                   	ret    

01008f58 <initSystemDate>:
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:144
void initSystemDate()
{
 1008f58:	83 ec 3c             	sub    esp,0x3c
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1008f5b:	b8 00 00 00 00       	mov    eax,0x0
 1008f60:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1008f62:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:148
    struct tm tmbuf;

    outb(0x70, 0x00);
    tmbuf.tm_sec = bcdToDec(inb(0x71));
 1008f64:	0f b6 c0             	movzx  eax,al
 1008f67:	50                   	push   eax
 1008f68:	e8 b5 ff ff ff       	call   1008f22 <bcdToDec>
 1008f6d:	0f b6 c0             	movzx  eax,al
 1008f70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1008f74:	b8 02 00 00 00       	mov    eax,0x2
 1008f79:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1008f7b:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:150
    outb(0x70, 0x02);
    tmbuf.tm_min = bcdToDec(inb(0x71));
 1008f7d:	0f b6 c0             	movzx  eax,al
 1008f80:	89 04 24             	mov    DWORD PTR [esp],eax
 1008f83:	e8 9a ff ff ff       	call   1008f22 <bcdToDec>
 1008f88:	0f b6 c0             	movzx  eax,al
 1008f8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1008f8f:	b8 04 00 00 00       	mov    eax,0x4
 1008f94:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1008f96:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:152
    outb(0x70, 0x04);
    tmbuf.tm_hour = bcdToDec(inb(0x71));
 1008f98:	0f b6 c0             	movzx  eax,al
 1008f9b:	89 04 24             	mov    DWORD PTR [esp],eax
 1008f9e:	e8 7f ff ff ff       	call   1008f22 <bcdToDec>
 1008fa3:	0f b6 c0             	movzx  eax,al
 1008fa6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1008faa:	b8 07 00 00 00       	mov    eax,0x7
 1008faf:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1008fb1:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:154
    outb(0x70, 0x07);
    tmbuf.tm_mday = bcdToDec(inb(0x71));
 1008fb3:	0f b6 c0             	movzx  eax,al
 1008fb6:	89 04 24             	mov    DWORD PTR [esp],eax
 1008fb9:	e8 64 ff ff ff       	call   1008f22 <bcdToDec>
 1008fbe:	0f b6 c0             	movzx  eax,al
 1008fc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1008fc5:	b8 08 00 00 00       	mov    eax,0x8
 1008fca:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1008fcc:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:156
    outb(0x70, 0x08);
    tmbuf.tm_mon = bcdToDec(inb(0x71));
 1008fce:	0f b6 c0             	movzx  eax,al
 1008fd1:	89 04 24             	mov    DWORD PTR [esp],eax
 1008fd4:	e8 49 ff ff ff       	call   1008f22 <bcdToDec>
 1008fd9:	0f b6 c0             	movzx  eax,al
 1008fdc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1008fe0:	b8 09 00 00 00       	mov    eax,0x9
 1008fe5:	e6 70                	out    0x70,al
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 1008fe7:	e4 71                	in     al,0x71
initSystemDate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:158
    outb(0x70, 0x09);
    tmbuf.tm_year = bcdToDec(inb(0x71));
 1008fe9:	0f b6 c0             	movzx  eax,al
 1008fec:	89 04 24             	mov    DWORD PTR [esp],eax
 1008fef:	e8 2e ff ff ff       	call   1008f22 <bcdToDec>
 1008ff4:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:159
    tmbuf.tm_isdst = -1;
 1008ff7:	c7 44 24 30 ff ff ff 	mov    DWORD PTR [esp+0x30],0xffffffff
 1008ffe:	ff 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:161
    tmbuf.tm_year += 2000;
    tmbuf.tm_year = tmbuf.tm_year - 1900;
 1008fff:	0f b6 c0             	movzx  eax,al
 1009002:	83 c0 64             	add    eax,0x64
 1009005:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:162
    kSystemStartTime = mktime(&tmbuf);
 1009009:	8d 44 24 10          	lea    eax,[esp+0x10]
 100900d:	50                   	push   eax
 100900e:	e8 a7 10 00 00       	call   100a0ba <mktime>
 1009013:	a3 c8 97 12 00       	mov    ds:0x1297c8,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:163
    kSystemCurrentTime = kSystemStartTime;
 1009018:	a3 cc 97 12 00       	mov    ds:0x1297cc,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:165
//printf("System Date = %d/%d/%d %d:%d:%d\n", tmbuf.tm_mon, tmbuf.tm_mday, tmbuf.tm_year, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);
}
 100901d:	83 c4 4c             	add    esp,0x4c
 1009020:	c3                   	ret    

01009021 <strtoupper>:
strtoupper():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:167
char * strtoupper(char* pointerToString)
{
 1009021:	56                   	push   esi
 1009022:	53                   	push   ebx
 1009023:	83 ec 10             	sub    esp,0x10
 1009026:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:168
    uint8_t start=0, length=strlen(pointerToString);
 100902a:	53                   	push   ebx
 100902b:	e8 cc 0c 00 00       	call   1009cfc <strlen>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:172
    char* myPtr=pointerToString;
    
        // Trim.Start:
        while (start<length)
 1009030:	83 c4 10             	add    esp,0x10
 1009033:	84 c0                	test   al,al
 1009035:	74 23                	je     100905a <strtoupper+0x39>
 1009037:	89 da                	mov    edx,ebx
 1009039:	83 e8 01             	sub    eax,0x1
 100903c:	0f b6 c0             	movzx  eax,al
 100903f:	8d 74 03 01          	lea    esi,[ebx+eax*1+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:174
        {
            if (myPtr[start]>='a' && myPtr[start]<='z')
 1009043:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 1009046:	8d 48 9f             	lea    ecx,[eax-0x61]
 1009049:	80 f9 19             	cmp    cl,0x19
 100904c:	77 05                	ja     1009053 <strtoupper+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:175
                myPtr[start]-=32;
 100904e:	83 e8 20             	sub    eax,0x20
 1009051:	88 02                	mov    BYTE PTR [edx],al
 1009053:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:172
{
    uint8_t start=0, length=strlen(pointerToString);
    char* myPtr=pointerToString;
    
        // Trim.Start:
        while (start<length)
 1009056:	39 f2                	cmp    edx,esi
 1009058:	75 e9                	jne    1009043 <strtoupper+0x22>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:180
                myPtr[start]-=32;
            start++;
        }

    return pointerToString;
}
 100905a:	89 d8                	mov    eax,ebx
 100905c:	83 c4 04             	add    esp,0x4
 100905f:	5b                   	pop    ebx
 1009060:	5e                   	pop    esi
 1009061:	c3                   	ret    

01009062 <printDumpedRegs>:
printDumpedRegs():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:183

void printDumpedRegs()
{
 1009062:	56                   	push   esi
 1009063:	53                   	push   ebx
 1009064:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:184
    uint32_t esp = exceptionSavedESP;
 1009067:	8b 35 2c 97 12 00    	mov    esi,DWORD PTR ds:0x12972c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:189
    uint8_t* lCSIPPtr;

    
    lCSIPPtr=(uint8_t*)(exceptionEIP);
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", exceptionAX, exceptionBX, exceptionCX, exceptionDX,exceptionFlags);
 100906d:	ff 35 30 97 12 00    	push   DWORD PTR ds:0x129730
 1009073:	ff 35 fc 96 12 00    	push   DWORD PTR ds:0x1296fc
 1009079:	ff 35 f8 96 12 00    	push   DWORD PTR ds:0x1296f8
 100907f:	ff 35 f4 96 12 00    	push   DWORD PTR ds:0x1296f4
 1009085:	ff 35 f0 96 12 00    	push   DWORD PTR ds:0x1296f0
 100908b:	68 48 13 04 01       	push   0x1041348
 1009090:	e8 4a 0b 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:190
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", exceptionBP, exceptionSI, exceptionDI, exceptionSavedESP);
 1009095:	83 c4 14             	add    esp,0x14
 1009098:	ff 35 2c 97 12 00    	push   DWORD PTR ds:0x12972c
 100909e:	ff 35 04 97 12 00    	push   DWORD PTR ds:0x129704
 10090a4:	ff 35 00 97 12 00    	push   DWORD PTR ds:0x129700
 10090aa:	ff 35 08 97 12 00    	push   DWORD PTR ds:0x129708
 10090b0:	68 78 13 04 01       	push   0x1041378
 10090b5:	e8 25 0b 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:191
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
 10090ba:	83 c4 14             	add    esp,0x14
 10090bd:	ff 35 14 97 12 00    	push   DWORD PTR ds:0x129714
 10090c3:	ff 35 10 97 12 00    	push   DWORD PTR ds:0x129710
 10090c9:	ff 35 40 97 12 00    	push   DWORD PTR ds:0x129740
 10090cf:	ff 35 0c 97 12 00    	push   DWORD PTR ds:0x12970c
 10090d5:	68 a0 13 04 01       	push   0x10413a0
 10090da:	e8 00 0b 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:192
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionGS, exceptionFS);
 10090df:	83 c4 14             	add    esp,0x14
 10090e2:	ff 35 20 97 12 00    	push   DWORD PTR ds:0x129720
 10090e8:	ff 35 24 97 12 00    	push   DWORD PTR ds:0x129724
 10090ee:	ff 35 1c 97 12 00    	push   DWORD PTR ds:0x12971c
 10090f4:	ff 35 18 97 12 00    	push   DWORD PTR ds:0x129718
 10090fa:	68 c8 13 04 01       	push   0x10413c8
 10090ff:	e8 db 0a 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:193
    printk("GDT=%08X\t TR=0x%08X\n",kernelGDT.base,exceptionTR);
 1009104:	83 c4 1c             	add    esp,0x1c
 1009107:	ff 35 44 97 12 00    	push   DWORD PTR ds:0x129744
 100910d:	ff 35 8a 99 12 00    	push   DWORD PTR ds:0x12998a
 1009113:	68 bc 64 06 01       	push   0x10664bc
 1009118:	e8 c2 0a 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:194
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
 100911d:	ff 35 34 97 12 00    	push   DWORD PTR ds:0x129734
 1009123:	ff 35 38 97 12 00    	push   DWORD PTR ds:0x129738
 1009129:	ff 35 3c 97 12 00    	push   DWORD PTR ds:0x12973c
 100912f:	68 f0 13 04 01       	push   0x10413f0
 1009134:	e8 a6 0a 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:195
          printk("Bytes at CS:EIP: ");
 1009139:	83 c4 14             	add    esp,0x14
 100913c:	68 d1 64 06 01       	push   0x10664d1
 1009141:	e8 99 0a 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:198
/*          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
*/          printk("\n");
 1009146:	c7 04 24 cc 67 06 01 	mov    DWORD PTR [esp],0x10667cc
 100914d:	e8 8d 0a 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:199
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
 1009152:	83 c4 0c             	add    esp,0xc
 1009155:	56                   	push   esi
 1009156:	ff 35 28 97 12 00    	push   DWORD PTR ds:0x129728
 100915c:	68 e3 64 06 01       	push   0x10664e3
 1009161:	e8 79 0a 00 00       	call   1009bdf <printk>
 1009166:	83 c4 10             	add    esp,0x10
 1009169:	bb 00 00 00 00       	mov    ebx,0x0
 100916e:	8d 04 33             	lea    eax,[ebx+esi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:202 (discriminator 3)
          for (int cnt=0;cnt<10;cnt++)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
 1009171:	83 ec 04             	sub    esp,0x4
 1009174:	8b 15 e8 96 12 00    	mov    edx,DWORD PTR ds:0x1296e8
 100917a:	ff 34 1a             	push   DWORD PTR [edx+ebx*1]
 100917d:	50                   	push   eax
 100917e:	68 fb 64 06 01       	push   0x10664fb
 1009183:	e8 57 0a 00 00       	call   1009bdf <printk>
 1009188:	83 c3 04             	add    ebx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:200 (discriminator 3)
          printk("Bytes at CS:EIP: ");
/*          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
*/          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
          for (int cnt=0;cnt<10;cnt++)
 100918b:	83 c4 10             	add    esp,0x10
 100918e:	83 fb 28             	cmp    ebx,0x28
 1009191:	75 db                	jne    100916e <printDumpedRegs+0x10c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:207
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
              esp+=4;
          }


}
 1009193:	83 c4 04             	add    esp,0x4
 1009196:	5b                   	pop    ebx
 1009197:	5e                   	pop    esi
 1009198:	c3                   	ret    

01009199 <printDebugRegs>:
printDebugRegs():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:210

void printDebugRegs()
{
 1009199:	57                   	push   edi
 100919a:	56                   	push   esi
 100919b:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:211
    uint32_t esp = debugSavedESP;
 100919c:	8b 35 84 97 12 00    	mov    esi,DWORD PTR ds:0x129784
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:214
    uint8_t* lCSIPPtr;

    lCSIPPtr=(uint8_t*)(debugEIP);
 10091a2:	8b 1d 94 97 12 00    	mov    ebx,DWORD PTR ds:0x129794
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:215
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", debugAX, debugBX, debugCX, debugDX,debugFlags);
 10091a8:	83 ec 08             	sub    esp,0x8
 10091ab:	ff 35 88 97 12 00    	push   DWORD PTR ds:0x129788
 10091b1:	ff 35 54 97 12 00    	push   DWORD PTR ds:0x129754
 10091b7:	ff 35 50 97 12 00    	push   DWORD PTR ds:0x129750
 10091bd:	ff 35 4c 97 12 00    	push   DWORD PTR ds:0x12974c
 10091c3:	ff 35 48 97 12 00    	push   DWORD PTR ds:0x129748
 10091c9:	68 48 13 04 01       	push   0x1041348
 10091ce:	e8 0c 0a 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:216
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
 10091d3:	83 c4 14             	add    esp,0x14
 10091d6:	ff 35 84 97 12 00    	push   DWORD PTR ds:0x129784
 10091dc:	ff 35 5c 97 12 00    	push   DWORD PTR ds:0x12975c
 10091e2:	ff 35 58 97 12 00    	push   DWORD PTR ds:0x129758
 10091e8:	ff 35 60 97 12 00    	push   DWORD PTR ds:0x129760
 10091ee:	68 78 13 04 01       	push   0x1041378
 10091f3:	e8 e7 09 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:217
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
 10091f8:	83 c4 20             	add    esp,0x20
 10091fb:	ff 35 6c 97 12 00    	push   DWORD PTR ds:0x12976c
 1009201:	ff 35 68 97 12 00    	push   DWORD PTR ds:0x129768
 1009207:	ff 35 64 97 12 00    	push   DWORD PTR ds:0x129764
 100920d:	68 0d 65 06 01       	push   0x106650d
 1009212:	e8 c8 09 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:218
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
 1009217:	83 c4 04             	add    esp,0x4
 100921a:	ff 35 78 97 12 00    	push   DWORD PTR ds:0x129778
 1009220:	ff 35 7c 97 12 00    	push   DWORD PTR ds:0x12977c
 1009226:	ff 35 74 97 12 00    	push   DWORD PTR ds:0x129774
 100922c:	ff 35 70 97 12 00    	push   DWORD PTR ds:0x129770
 1009232:	68 c8 13 04 01       	push   0x10413c8
 1009237:	e8 a3 09 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:219
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
 100923c:	83 c4 20             	add    esp,0x20
 100923f:	ff 35 8c 97 12 00    	push   DWORD PTR ds:0x12978c
 1009245:	ff 35 94 97 12 00    	push   DWORD PTR ds:0x129794
 100924b:	ff 35 90 97 12 00    	push   DWORD PTR ds:0x129790
 1009251:	68 f0 13 04 01       	push   0x10413f0
 1009256:	e8 84 09 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:220
          printk("Bytes at CS:EIP: ");
 100925b:	c7 04 24 d1 64 06 01 	mov    DWORD PTR [esp],0x10664d1
 1009262:	e8 78 09 00 00       	call   1009bdf <printk>
 1009267:	8d 7b 13             	lea    edi,[ebx+0x13]
 100926a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:222 (discriminator 3)
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
 100926d:	83 ec 08             	sub    esp,0x8
 1009270:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1009273:	50                   	push   eax
 1009274:	68 73 64 06 01       	push   0x1066473
 1009279:	e8 61 09 00 00       	call   1009bdf <printk>
 100927e:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:221 (discriminator 3)
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
 1009281:	83 c4 10             	add    esp,0x10
 1009284:	39 df                	cmp    edi,ebx
 1009286:	75 e5                	jne    100926d <printDebugRegs+0xd4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:223
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
 1009288:	83 ec 0c             	sub    esp,0xc
 100928b:	68 cc 67 06 01       	push   0x10667cc
 1009290:	e8 4a 09 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:224
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
 1009295:	83 c4 0c             	add    esp,0xc
 1009298:	56                   	push   esi
 1009299:	ff 35 80 97 12 00    	push   DWORD PTR ds:0x129780
 100929f:	68 e3 64 06 01       	push   0x10664e3
 10092a4:	e8 36 09 00 00       	call   1009bdf <printk>
 10092a9:	83 c4 10             	add    esp,0x10
 10092ac:	bb 00 00 00 00       	mov    ebx,0x0
 10092b1:	8d 04 33             	lea    eax,[ebx+esi*1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:227 (discriminator 3)
          for (int cnt=0;cnt<10;cnt++)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
 10092b4:	83 ec 04             	sub    esp,0x4
 10092b7:	8b 15 ec 96 12 00    	mov    edx,DWORD PTR ds:0x1296ec
 10092bd:	ff 34 1a             	push   DWORD PTR [edx+ebx*1]
 10092c0:	50                   	push   eax
 10092c1:	68 fb 64 06 01       	push   0x10664fb
 10092c6:	e8 14 09 00 00       	call   1009bdf <printk>
 10092cb:	83 c3 04             	add    ebx,0x4
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:225 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
          for (int cnt=0;cnt<10;cnt++)
 10092ce:	83 c4 10             	add    esp,0x10
 10092d1:	83 fb 28             	cmp    ebx,0x28
 10092d4:	75 db                	jne    10092b1 <printDebugRegs+0x118>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:232
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
              esp+=4;
          }


}
 10092d6:	5b                   	pop    ebx
 10092d7:	5e                   	pop    esi
 10092d8:	5f                   	pop    edi
 10092d9:	c3                   	ret    

010092da <reboot>:
reboot():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:240
/* keyboard interface IO port: data and control
   READ:   status port
   WRITE:  control register */
 
void reboot(bool waitFirst)
{
 10092da:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:243
    uint8_t temp;
 
    if (waitFirst)
 10092dd:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
 10092e2:	74 1d                	je     1009301 <reboot+0x27>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:245
    {
        puts("Rebooting ... ");
 10092e4:	83 ec 0c             	sub    esp,0xc
 10092e7:	68 29 65 06 01       	push   0x1066529
 10092ec:	e8 1c 9e ff ff       	call   100310d <puts>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:246
        __asm__("sti\n");
 10092f1:	fb                   	sti    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:247
        wait(3000);
 10092f2:	c7 04 24 b8 0b 00 00 	mov    DWORD PTR [esp],0xbb8
 10092f9:	e8 fa 12 00 00       	call   100a5f8 <wait>
 10092fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:249
    }
    __asm__ volatile ("cli"); /* disable all interrupts */
 1009301:	fa                   	cli    
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 1009302:	e4 64                	in     al,0x64
 1009304:	89 c2                	mov    edx,eax
reboot():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:255
 
    /* Clear all keyboard buffers (output and command buffers) */
    do
    {
        temp = inb(KBRD_INTRFC); /* empty user data */
        if (check_flag(temp, KBRD_BIT_KDATA) != 0)
 1009306:	a8 01                	test   al,0x1
 1009308:	74 02                	je     100930c <reboot+0x32>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 100930a:	e4 60                	in     al,0x60
reboot():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:257
            inb(KBRD_IO); /* empty keyboard data */
    } while (check_flag(temp, KBRD_BIT_UDATA) != 0);
 100930c:	f6 c2 02             	test   dl,0x2
 100930f:	75 f1                	jne    1009302 <reboot+0x28>
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 1009311:	b8 fe ff ff ff       	mov    eax,0xfffffffe
 1009316:	e6 64                	out    0x64,al
reboot():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:261 (discriminator 1)
 
    outb(KBRD_INTRFC, KBRD_RESET); /* pulse CPU reset line */
loop:
    __asm__ volatile ("hlt"); /* if that didn't work, halt the CPU */
 1009318:	f4                   	hlt    
 1009319:	eb fd                	jmp    1009318 <reboot+0x3e>

0100931b <dumpKernelAddresses>:
dumpKernelAddresses():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:266
    goto loop; /* if a NMI is received, halt again */
}

void dumpKernelAddresses()
{
 100931b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:267
printk("Kernel Variable List:\n");
 100931e:	68 38 65 06 01       	push   0x1066538
 1009323:	e8 b7 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:268
printk("\tKERNEL_OBJECT_BASE_ADDRESS=0x%08x\n",KERNEL_OBJECT_BASE_ADDRESS);
 1009328:	83 c4 08             	add    esp,0x8
 100932b:	68 00 00 16 00       	push   0x160000
 1009330:	68 18 14 04 01       	push   0x1041418
 1009335:	e8 a5 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:269
printk("\tE820_TABLE_ADDRESS=0x%08x (0x%08X)\n",E820_TABLE_ADDRESS);
 100933a:	83 c4 08             	add    esp,0x8
 100933d:	68 00 00 16 00       	push   0x160000
 1009342:	68 3c 14 04 01       	push   0x104143c
 1009347:	e8 93 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:270
printk("\tMP_CONFIG_TABLE_ADDRESS=0x%08x\n",MP_CONFIG_TABLE_ADDRESS);
 100934c:	83 c4 08             	add    esp,0x8
 100934f:	68 b0 04 16 00       	push   0x1604b0
 1009354:	68 64 14 04 01       	push   0x1041464
 1009359:	e8 81 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:271
printk("\tKEYBOARD_BUFFER_ADDRESS=0x%08x\n",KEYBOARD_BUFFER_ADDRESS);
 100935e:	83 c4 08             	add    esp,0x8
 1009361:	68 b0 24 16 00       	push   0x1624b0
 1009366:	68 88 14 04 01       	push   0x1041488
 100936b:	e8 6f 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:272
printk("\tIDT_TABLE_ADDRESS=0x%08x\n",IDT_TABLE_ADDRESS);
 1009370:	83 c4 08             	add    esp,0x8
 1009373:	68 00 30 16 00       	push   0x163000
 1009378:	68 4f 65 06 01       	push   0x106654f
 100937d:	e8 5d 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:273
printk("\tINIT_GDT_TABLE_ADDRESS=0x%08x\n",INIT_GDT_TABLE_ADDRESS);
 1009382:	83 c4 08             	add    esp,0x8
 1009385:	68 00 48 16 00       	push   0x164800
 100938a:	68 ac 14 04 01       	push   0x10414ac
 100938f:	e8 4b 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:274
printk("\tTASK_TABLE_ADDRESS=0x%08x\n",TASK_TABLE_ADDRESS);
 1009394:	83 c4 08             	add    esp,0x8
 1009397:	68 00 60 16 00       	push   0x166000
 100939c:	68 6a 65 06 01       	push   0x106656a
 10093a1:	e8 39 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:275
printk("\tTSS_TABLE_ADDRESS=0x%08x\n",TSS_TABLE_ADDRESS);
 10093a6:	83 c4 08             	add    esp,0x8
 10093a9:	68 00 70 2f 00       	push   0x2f7000
 10093ae:	68 86 65 06 01       	push   0x1066586
 10093b3:	e8 27 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:276
printk("\tATA_MBR_ARRAY_ADDRESS=0x%08x\n",ATA_MBR_ARRAY_ADDRESS);
 10093b8:	83 c4 08             	add    esp,0x8
 10093bb:	68 00 70 49 00       	push   0x497000
 10093c0:	68 cc 14 04 01       	push   0x10414cc
 10093c5:	e8 15 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:277
printk("\tPCI_DEVICE_LIST_ADDRESS=0x%08x\n",PCI_DEVICE_LIST_ADDRESS);
 10093ca:	83 c4 08             	add    esp,0x8
 10093cd:	68 00 80 49 00       	push   0x498000
 10093d2:	68 ec 14 04 01       	push   0x10414ec
 10093d7:	e8 03 08 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:278
printk("\tPCI_BRIDGE_LIST_ADDRESS=0x%08x\n",PCI_BRIDGE_LIST_ADDRESS);
 10093dc:	83 c4 08             	add    esp,0x8
 10093df:	68 00 80 4a 00       	push   0x4a8000
 10093e4:	68 10 15 04 01       	push   0x1041510
 10093e9:	e8 f1 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:279
printk("\tPCI_FUNCTION_LIST_ADDRESS=0x%08x\n",PCI_FUNCTION_LIST_ADDRESS);
 10093ee:	83 c4 08             	add    esp,0x8
 10093f1:	68 00 80 4b 00       	push   0x4b8000
 10093f6:	68 34 15 04 01       	push   0x1041534
 10093fb:	e8 df 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:280
printk("\tGDT_PMODE_16BIT_TABLE_ADDRESS=0x%08x\n",GDT_PMODE_16BIT_TABLE_ADDRESS);
 1009400:	83 c4 08             	add    esp,0x8
 1009403:	68 00 90 4b 00       	push   0x4b9000
 1009408:	68 58 15 04 01       	push   0x1041558
 100940d:	e8 cd 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:281
printk("\tKERNEL_PAGE_DIR_ADDRESS=0x%08x\n",KERNEL_PAGE_DIR_ADDRESS);
 1009412:	83 c4 08             	add    esp,0x8
 1009415:	68 00 a0 4b 00       	push   0x4ba000
 100941a:	68 80 15 04 01       	push   0x1041580
 100941f:	e8 bb 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:282
printk("\tKERNEL_PAGE_TABLE_BASE_ADDRESS=0x%08x\n",KERNEL_PAGE_TABLE_BASE_ADDRESS);
 1009424:	83 c4 08             	add    esp,0x8
 1009427:	68 00 c0 4c 00       	push   0x4cc000
 100942c:	68 a4 15 04 01       	push   0x10415a4
 1009431:	e8 a9 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:283
printk("\tSAVED_STACK_FOR_EXCEPTIONS_ADDRESS=0x%08x\n",SAVED_STACK_FOR_EXCEPTIONS_ADDRESS);
 1009436:	83 c4 08             	add    esp,0x8
 1009439:	68 00 d0 ac 00       	push   0xacd000
 100943e:	68 cc 15 04 01       	push   0x10415cc
 1009443:	e8 97 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:284
printk("\tSAVED_STACK_FOR_DEBUGGING_ADDRESS=0x%08x\n",SAVED_STACK_FOR_DEBUGGING_ADDRESS);
 1009448:	83 c4 08             	add    esp,0x8
 100944b:	68 00 f0 ac 00       	push   0xacf000
 1009450:	68 f8 15 04 01       	push   0x10415f8
 1009455:	e8 85 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:285
printk("\tCPU_APIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_APIC_REGISTER_REMAP_BASE_ADDRESS);
 100945a:	83 c4 08             	add    esp,0x8
 100945d:	68 00 10 ad 00       	push   0xad1000
 1009462:	68 24 16 04 01       	push   0x1041624
 1009467:	e8 73 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:286
printk("\tCPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS);
 100946c:	83 c4 08             	add    esp,0x8
 100946f:	68 00 20 ad 00       	push   0xad2000
 1009474:	68 54 16 04 01       	push   0x1041654
 1009479:	e8 61 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:287
printk("\tKERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS=0x%08x\n",KERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS);
 100947e:	83 c4 08             	add    esp,0x8
 1009481:	68 04 20 ad 00       	push   0xad2004
 1009486:	68 84 16 04 01       	push   0x1041684
 100948b:	e8 4f 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:288
printk("\tAHCI_ABAR_REMAPPED_ADDRESS=0x%08x\n",AHCI_ABAR_REMAPPED_ADDRESS);
 1009490:	83 c4 08             	add    esp,0x8
 1009493:	68 00 30 ad 00       	push   0xad3000
 1009498:	68 b8 16 04 01       	push   0x10416b8
 100949d:	e8 3d 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:289
printk("\tAHCI_PORT_BASE_REMAP_ADDRESS=0x%08x\n",AHCI_PORT_BASE_REMAP_ADDRESS);
 10094a2:	83 c4 08             	add    esp,0x8
 10094a5:	68 00 30 b1 00       	push   0xb13000
 10094aa:	68 dc 16 04 01       	push   0x10416dc
 10094af:	e8 2b 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:290
printk("\tAHCI_DISK_BUFFER_ADDRESS=0x%08x\n",AHCI_DISK_BUFFER_ADDRESS);
 10094b4:	83 c4 08             	add    esp,0x8
 10094b7:	68 00 30 c5 00       	push   0xc53000
 10094bc:	68 04 17 04 01       	push   0x1041704
 10094c1:	e8 19 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:291
printk("\tATA_DEVICE_INFO_ADDRESS=0x%08x\n",ATA_DEVICE_INFO_ADDRESS);
 10094c6:	83 c4 08             	add    esp,0x8
 10094c9:	68 00 30 d9 00       	push   0xd93000
 10094ce:	68 28 17 04 01       	push   0x1041728
 10094d3:	e8 07 07 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:292
printk("\tAHCI_CAPS_ADDRESS=0x%08x\n",AHCI_CAPS_ADDRESS);
 10094d8:	83 c4 08             	add    esp,0x8
 10094db:	68 20 7e d9 00       	push   0xd97e20
 10094e0:	68 a1 65 06 01       	push   0x10665a1
 10094e5:	e8 f5 06 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:293
printk("\tTSS_AVAILABLE_ADDRESS=0x%08x\n",TASK_AVAILABLE_ADDRESS);
 10094ea:	83 c4 08             	add    esp,0x8
 10094ed:	68 40 cc d9 00       	push   0xd9cc40
 10094f2:	68 4c 17 04 01       	push   0x104174c
 10094f7:	e8 e3 06 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:294
printk("\tGDT_AVAILABLE_ADDRESS=0x%08x\n",GDT_AVAILABLE_ADDRESS);
 10094fc:	83 c4 08             	add    esp,0x8
 10094ff:	68 40 d4 d9 00       	push   0xd9d440
 1009504:	68 6c 17 04 01       	push   0x104176c
 1009509:	e8 d1 06 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:295
printk("\tEXEC_FILE_LOAD_INFO=0x%08x\n",EXEC_FILE_LOAD_INFO);
 100950e:	83 c4 08             	add    esp,0x8
 1009511:	68 40 dc d9 00       	push   0xd9dc40
 1009516:	68 bc 65 06 01       	push   0x10665bc
 100951b:	e8 bf 06 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:296
printk("\tAHCI_ABAR_ADDRESS=0x%08x\n",AHCI_ABAR_ADDRESS);
 1009520:	83 c4 08             	add    esp,0x8
 1009523:	68 e0 62 db 00       	push   0xdb62e0
 1009528:	68 d9 65 06 01       	push   0x10665d9
 100952d:	e8 ad 06 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:297
printk("\tEND_OF_KERNEL_OBJECTS_ADDRESS=0x%08x\n",END_OF_KERNEL_OBJECTS_ADDRESS);
 1009532:	83 c4 08             	add    esp,0x8
 1009535:	68 e0 62 eb 00       	push   0xeb62e0
 100953a:	68 8c 17 04 01       	push   0x104178c
 100953f:	e8 9b 06 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:298
}
 1009544:	83 c4 1c             	add    esp,0x1c
 1009547:	c3                   	ret    

01009548 <pauseDisplay>:
pauseDisplay():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:301

bool pauseDisplay(bool offerToQuit)
{
 1009548:	56                   	push   esi
 1009549:	53                   	push   ebx
 100954a:	83 ec 04             	sub    esp,0x4
 100954d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:302
    if (offerToQuit)
 1009551:	84 db                	test   bl,bl
 1009553:	74 12                	je     1009567 <pauseDisplay+0x1f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:303
        printk("Press q to quit, any other key to continue ...");
 1009555:	83 ec 0c             	sub    esp,0xc
 1009558:	68 b4 17 04 01       	push   0x10417b4
 100955d:	e8 7d 06 00 00       	call   1009bdf <printk>
 1009562:	83 c4 10             	add    esp,0x10
 1009565:	eb 10                	jmp    1009577 <pauseDisplay+0x2f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:305
    else
        printk("Press a key to continue ... ");
 1009567:	83 ec 0c             	sub    esp,0xc
 100956a:	68 f4 65 06 01       	push   0x10665f4
 100956f:	e8 6b 06 00 00       	call   1009bdf <printk>
 1009574:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:306
    char lPressedKey=waitForKeyboardKey();
 1009577:	e8 0f 9c ff ff       	call   100318b <waitForKeyboardKey>
 100957c:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:307
    cursorMoveToX(0);
 100957e:	83 ec 0c             	sub    esp,0xc
 1009581:	6a 00                	push   0x0
 1009583:	e8 d6 9a ff ff       	call   100305e <cursorMoveToX>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:308
    printk("                                           ");
 1009588:	c7 04 24 e4 17 04 01 	mov    DWORD PTR [esp],0x10417e4
 100958f:	e8 4b 06 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:309
    cursorMoveToX(0);
 1009594:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
 100959b:	e8 be 9a ff ff       	call   100305e <cursorMoveToX>
 10095a0:	89 f0                	mov    eax,esi
 10095a2:	3c 71                	cmp    al,0x71
 10095a4:	0f 94 c0             	sete   al
 10095a7:	21 d8                	and    eax,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:313
    if (lPressedKey=='q' && offerToQuit)
        return true;
    return false;
}
 10095a9:	83 c4 14             	add    esp,0x14
 10095ac:	5b                   	pop    ebx
 10095ad:	5e                   	pop    esi
 10095ae:	c3                   	ret    

010095af <mallocTemp>:
mallocTemp():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:318

int memPtr=0xe00000;
uintptr_t* mallocTemp(int size)
{
    uintptr_t lRetVal = memPtr;
 10095af:	a1 e0 d5 00 01       	mov    eax,ds:0x100d5e0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:319
    memPtr+=size;
 10095b4:	89 c2                	mov    edx,eax
 10095b6:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
 10095ba:	89 15 e0 d5 00 01    	mov    DWORD PTR ds:0x100d5e0,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:321
    return (uintptr_t*)lRetVal;
}
 10095c0:	c3                   	ret    

010095c1 <displayGDT>:
displayGDT():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:324

void displayGDT()
{
 10095c1:	56                   	push   esi
 10095c2:	53                   	push   ebx
 10095c3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:325
    sGDT* theGDT=bootGdt;
 10095c6:	8b 1d 84 99 12 00    	mov    ebx,DWORD PTR ds:0x129984
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:327
    
    printk("Listing GDT Table\n");
 10095cc:	68 11 66 06 01       	push   0x1066611
 10095d1:	e8 09 06 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:328
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
 10095d6:	c7 04 24 10 18 04 01 	mov    DWORD PTR [esp],0x1041810
 10095dd:	e8 fd 05 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:329
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
 10095e2:	0f b7 05 88 99 12 00 	movzx  eax,WORD PTR ds:0x129988
 10095e9:	66 c1 e8 03          	shr    ax,0x3
 10095ed:	83 c4 10             	add    esp,0x10
 10095f0:	66 85 c0             	test   ax,ax
 10095f3:	74 73                	je     1009668 <displayGDT+0xa7>
 10095f5:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:331
    {
        if (theGDT->access!=0 || cnt==0)
 10095fa:	0f b6 53 05          	movzx  edx,BYTE PTR [ebx+0x5]
 10095fe:	85 f6                	test   esi,esi
 1009600:	74 04                	je     1009606 <displayGDT+0x45>
 1009602:	84 d2                	test   dl,dl
 1009604:	74 4a                	je     1009650 <displayGDT+0x8f>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:342
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
 1009606:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
 100960a:	83 ec 08             	sub    esp,0x8
 100960d:	89 c1                	mov    ecx,eax
 100960f:	81 e1 f0 00 00 00    	and    ecx,0xf0
 1009615:	c1 e9 04             	shr    ecx,0x4
 1009618:	51                   	push   ecx
 1009619:	0f b6 d2             	movzx  edx,dl
 100961c:	52                   	push   edx
 100961d:	83 e0 0f             	and    eax,0xf
 1009620:	c1 e0 10             	shl    eax,0x10
 1009623:	0f b7 13             	movzx  edx,WORD PTR [ebx]
 1009626:	09 d0                	or     eax,edx
 1009628:	50                   	push   eax
 1009629:	0f be 43 07          	movsx  eax,BYTE PTR [ebx+0x7]
 100962d:	c1 e0 18             	shl    eax,0x18
 1009630:	89 c2                	mov    edx,eax
 1009632:	0f be 43 04          	movsx  eax,BYTE PTR [ebx+0x4]
 1009636:	c1 e0 10             	shl    eax,0x10
 1009639:	09 d0                	or     eax,edx
 100963b:	0f b7 53 02          	movzx  edx,WORD PTR [ebx+0x2]
 100963f:	09 d0                	or     eax,edx
 1009641:	50                   	push   eax
 1009642:	56                   	push   esi
 1009643:	68 34 18 04 01       	push   0x1041834
 1009648:	e8 92 05 00 00       	call   1009bdf <printk>
 100964d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:344 (discriminator 2)
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
 1009650:	83 c3 08             	add    ebx,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:329 (discriminator 2)
{
    sGDT* theGDT=bootGdt;
    
    printk("Listing GDT Table\n");
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
 1009653:	83 c6 01             	add    esi,0x1
 1009656:	0f b7 05 88 99 12 00 	movzx  eax,WORD PTR ds:0x129988
 100965d:	66 c1 e8 03          	shr    ax,0x3
 1009661:	0f b7 c0             	movzx  eax,ax
 1009664:	39 f0                	cmp    eax,esi
 1009666:	7f 92                	jg     10095fa <displayGDT+0x39>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/init/utility.c:346
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
    }
 1009668:	83 c4 04             	add    esp,0x4
 100966b:	5b                   	pop    ebx
 100966c:	5e                   	pop    esi
 100966d:	c3                   	ret    
 100966e:	66 90                	xchg   ax,ax

01009670 <memcpy>:
memcpy():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:12
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
void * memcpy(void *dest, const void *src, size_t n)
{
 1009670:	57                   	push   edi
 1009671:	56                   	push   esi
 1009672:	53                   	push   ebx
 1009673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 1009677:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 100967b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:17
    bool dw,dd;
    
    dd=n%4==0;
    dw=n%2==0;
    if (dd)
 100967f:	89 d1                	mov    ecx,edx
 1009681:	83 e1 03             	and    ecx,0x3
 1009684:	75 4d                	jne    10096d3 <memcpy+0x63>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:19
    {
        n /=4;
 1009686:	c1 ea 02             	shr    edx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:23
        const uint32_t *f = src;
        uint32_t *t = dest;

        if (f < t) {
 1009689:	39 c3                	cmp    ebx,eax
 100968b:	72 0e                	jb     100969b <memcpy+0x2b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
 100968d:	b9 00 00 00 00       	mov    ecx,0x0
 1009692:	85 d2                	test   edx,edx
 1009694:	75 2e                	jne    10096c4 <memcpy+0x54>
 1009696:	e9 b6 00 00 00       	jmp    1009751 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:24
        n /=4;
        const uint32_t *f = src;
        uint32_t *t = dest;

        if (f < t) {
                f += n;
 100969b:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
 10096a2:	01 fb                	add    ebx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:25
                t += n;
 10096a4:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
 10096a6:	85 d2                	test   edx,edx
 10096a8:	0f 84 a3 00 00 00    	je     1009751 <memcpy+0xe1>
 10096ae:	f7 da                	neg    edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:27
                        *--t = *--f;
 10096b0:	8b 74 8b fc          	mov    esi,DWORD PTR [ebx+ecx*4-0x4]
 10096b4:	89 74 8f fc          	mov    DWORD PTR [edi+ecx*4-0x4],esi
 10096b8:	83 e9 01             	sub    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
 10096bb:	39 d1                	cmp    ecx,edx
 10096bd:	75 f1                	jne    10096b0 <memcpy+0x40>
 10096bf:	e9 8d 00 00 00       	jmp    1009751 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
 10096c4:	8b 34 8b             	mov    esi,DWORD PTR [ebx+ecx*4]
 10096c7:	89 34 88             	mov    DWORD PTR [eax+ecx*4],esi
 10096ca:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
 10096cd:	39 ca                	cmp    edx,ecx
 10096cf:	75 f3                	jne    10096c4 <memcpy+0x54>
 10096d1:	eb 7e                	jmp    1009751 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:33
                        *t++ = *f++;
        return dest;
    }
    else if (dw)
 10096d3:	89 d1                	mov    ecx,edx
 10096d5:	83 e1 01             	and    ecx,0x1
 10096d8:	75 42                	jne    100971c <memcpy+0xac>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:35
    {
        n /=2;
 10096da:	d1 ea                	shr    edx,1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:39
        const uint32_t *f = src;
        uint32_t *t = dest;

        if (f < t) {
 10096dc:	39 c3                	cmp    ebx,eax
 10096de:	72 0b                	jb     10096eb <memcpy+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
 10096e0:	b9 00 00 00 00       	mov    ecx,0x0
 10096e5:	85 d2                	test   edx,edx
 10096e7:	75 24                	jne    100970d <memcpy+0x9d>
 10096e9:	eb 66                	jmp    1009751 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:40
        n /=2;
        const uint32_t *f = src;
        uint32_t *t = dest;

        if (f < t) {
                f += n;
 10096eb:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
 10096f2:	01 fb                	add    ebx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:41
                t += n;
 10096f4:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
 10096f6:	85 d2                	test   edx,edx
 10096f8:	74 57                	je     1009751 <memcpy+0xe1>
 10096fa:	f7 da                	neg    edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:43
                        *--t = *--f;
 10096fc:	8b 74 8b fc          	mov    esi,DWORD PTR [ebx+ecx*4-0x4]
 1009700:	89 74 8f fc          	mov    DWORD PTR [edi+ecx*4-0x4],esi
 1009704:	83 e9 01             	sub    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
 1009707:	39 ca                	cmp    edx,ecx
 1009709:	75 f1                	jne    10096fc <memcpy+0x8c>
 100970b:	eb 44                	jmp    1009751 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
 100970d:	8b 34 8b             	mov    esi,DWORD PTR [ebx+ecx*4]
 1009710:	89 34 88             	mov    DWORD PTR [eax+ecx*4],esi
 1009713:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
 1009716:	39 ca                	cmp    edx,ecx
 1009718:	75 f3                	jne    100970d <memcpy+0x9d>
 100971a:	eb 35                	jmp    1009751 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:54
    else
    {
        const char *f = src;
        char *t = dest;

        if (f < t) {
 100971c:	39 c3                	cmp    ebx,eax
 100971e:	72 0b                	jb     100972b <memcpy+0xbb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
 1009720:	be 00 00 00 00       	mov    esi,0x0
 1009725:	85 d2                	test   edx,edx
 1009727:	75 1a                	jne    1009743 <memcpy+0xd3>
 1009729:	eb 26                	jmp    1009751 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
 100972b:	8d 4a ff             	lea    ecx,[edx-0x1]
 100972e:	85 d2                	test   edx,edx
 1009730:	74 1f                	je     1009751 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:58
                        *--t = *--f;
 1009732:	0f b6 14 0b          	movzx  edx,BYTE PTR [ebx+ecx*1]
 1009736:	88 14 08             	mov    BYTE PTR [eax+ecx*1],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
 1009739:	83 e9 01             	sub    ecx,0x1
 100973c:	83 f9 ff             	cmp    ecx,0xffffffff
 100973f:	75 f1                	jne    1009732 <memcpy+0xc2>
 1009741:	eb 0e                	jmp    1009751 <memcpy+0xe1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
 1009743:	0f b6 0c 33          	movzx  ecx,BYTE PTR [ebx+esi*1]
 1009747:	88 0c 30             	mov    BYTE PTR [eax+esi*1],cl
 100974a:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
 100974d:	39 f2                	cmp    edx,esi
 100974f:	75 f2                	jne    1009743 <memcpy+0xd3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/memcpy.c:64
                        *t++ = *f++;
        return dest;
    }
 1009751:	5b                   	pop    ebx
 1009752:	5e                   	pop    esi
 1009753:	5f                   	pop    edi
 1009754:	c3                   	ret    
 1009755:	66 90                	xchg   ax,ax
 1009757:	90                   	nop

01009758 <panic>:
panic():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:8
#include <stdarg.h>
#include <time.h>
#include "printf.h"

void __attribute__((noinline))panic(const char *format, ...)
{
 1009758:	53                   	push   ebx
 1009759:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:10
    va_list args;
    va_start( args, format );
 100975c:	8d 5c 24 14          	lea    ebx,[esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:11
    printk("\n>>>panic at instruction prior to address 0x%08X<<<\n", __builtin_return_address(0));
 1009760:	83 ec 08             	sub    esp,0x8
 1009763:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 1009767:	68 58 18 04 01       	push   0x1041858
 100976c:	e8 6e 04 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:12
    printk("  >>>");
 1009771:	c7 04 24 24 66 06 01 	mov    DWORD PTR [esp],0x1066624
 1009778:	e8 62 04 00 00       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:13
    printk_valist( format,args);
 100977d:	83 c4 08             	add    esp,0x8
 1009780:	53                   	push   ebx
 1009781:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1009785:	e8 3c 04 00 00       	call   1009bc6 <printk_valist>
 100978a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/panic.c:15 (discriminator 1)
    panicLoop: 
    __asm__("cli\nhlt\n");
 100978d:	fa                   	cli    
 100978e:	f4                   	hlt    
 100978f:	eb fc                	jmp    100978d <panic+0x35>
 1009791:	66 90                	xchg   ax,ax
 1009793:	90                   	nop

01009794 <printchar>:
printchar():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:43
uint8_t printDLineCount;

static void printchar(char **str, int c)
{
	
	if (str) {
 1009794:	85 c0                	test   eax,eax
 1009796:	74 08                	je     10097a0 <printchar+0xc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:44
		**str = c;
 1009798:	8b 08                	mov    ecx,DWORD PTR [eax]
 100979a:	88 11                	mov    BYTE PTR [ecx],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:45
		++(*str);
 100979c:	83 00 01             	add    DWORD PTR [eax],0x1
 100979f:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:41
//extern bool pauseDisplay(bool offerToQuit);
extern uint32_t kDebugLevel;
uint8_t printDLineCount;

static void printchar(char **str, int c)
{
 10097a0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:47
	
	if (str) {
		**str = c;
		++(*str);
	}
	else terminal_putchar((unsigned char)c);
 10097a3:	0f b6 d2             	movzx  edx,dl
 10097a6:	52                   	push   edx
 10097a7:	e8 3d 97 ff ff       	call   1002ee9 <terminal_putchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:48
}
 10097ac:	83 c4 1c             	add    esp,0x1c
 10097af:	c3                   	ret    

010097b0 <prints>:
prints():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:54

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 10097b0:	55                   	push   ebp
 10097b1:	57                   	push   edi
 10097b2:	56                   	push   esi
 10097b3:	53                   	push   ebx
 10097b4:	83 ec 1c             	sub    esp,0x1c
 10097b7:	89 c7                	mov    edi,eax
 10097b9:	89 d6                	mov    esi,edx
 10097bb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
 10097bf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:57
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 10097c3:	85 c9                	test   ecx,ecx
 10097c5:	0f 8e cb 00 00 00    	jle    1009896 <prints+0xe6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:60 (discriminator 1)
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 10097cb:	80 3e 00             	cmp    BYTE PTR [esi],0x0
 10097ce:	74 1b                	je     10097eb <prints+0x3b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:60
 10097d0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:60 (discriminator 3)
 10097d5:	83 c0 01             	add    eax,0x1
 10097d8:	80 3c 06 00          	cmp    BYTE PTR [esi+eax*1],0x0
 10097dc:	75 f7                	jne    10097d5 <prints+0x25>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:61
		if (len >= width) width = 0;
 10097de:	bb 00 00 00 00       	mov    ebx,0x0
 10097e3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
 10097e7:	7e 0f                	jle    10097f8 <prints+0x48>
 10097e9:	eb 05                	jmp    10097f0 <prints+0x40>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:60
	register int pc = 0, padchar = ' ';

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 10097eb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:62
		if (len >= width) width = 0;
		else width -= len;
 10097f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
 10097f4:	29 c1                	sub    ecx,eax
 10097f6:	89 cb                	mov    ebx,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:63
		if (pad & PAD_ZERO) padchar = '0';
 10097f8:	89 d0                	mov    eax,edx
 10097fa:	83 e0 02             	and    eax,0x2
 10097fd:	83 f8 01             	cmp    eax,0x1
 1009800:	19 ed                	sbb    ebp,ebp
 1009802:	83 e5 f0             	and    ebp,0xfffffff0
 1009805:	83 c5 30             	add    ebp,0x30
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:65
	}
	if (!(pad & PAD_RIGHT)) {
 1009808:	f6 c2 01             	test   dl,0x1
 100980b:	75 1a                	jne    1009827 <prints+0x77>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:66 (discriminator 1)
		for ( ; width > 0; --width) {
 100980d:	85 db                	test   ebx,ebx
 100980f:	7e 67                	jle    1009878 <prints+0xc8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:66
 1009811:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:67 (discriminator 2)
			printchar (out, padchar);
 1009815:	89 ea                	mov    edx,ebp
 1009817:	89 f8                	mov    eax,edi
 1009819:	e8 76 ff ff ff       	call   1009794 <printchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:66 (discriminator 2)
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 100981e:	83 6c 24 0c 01       	sub    DWORD PTR [esp+0xc],0x1
 1009823:	75 f0                	jne    1009815 <prints+0x65>
 1009825:	eb 66                	jmp    100988d <prints+0xdd>
 1009827:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:71 (discriminator 1)
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 100982b:	0f b6 16             	movzx  edx,BYTE PTR [esi]
 100982e:	84 d2                	test   dl,dl
 1009830:	74 1e                	je     1009850 <prints+0xa0>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:55
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 1009832:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:71 (discriminator 2)
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 1009837:	29 de                	sub    esi,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:72 (discriminator 2)
		printchar (out, *string);
 1009839:	0f be d2             	movsx  edx,dl
 100983c:	89 f8                	mov    eax,edi
 100983e:	e8 51 ff ff ff       	call   1009794 <printchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:73 (discriminator 2)
		++pc;
 1009843:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:71 (discriminator 2)
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 1009846:	0f b6 14 1e          	movzx  edx,BYTE PTR [esi+ebx*1]
 100984a:	84 d2                	test   dl,dl
 100984c:	75 eb                	jne    1009839 <prints+0x89>
 100984e:	eb 05                	jmp    1009855 <prints+0xa5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:55
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 1009850:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:75 (discriminator 1)
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 1009855:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1009859:	85 c0                	test   eax,eax
 100985b:	7e 45                	jle    10098a2 <prints+0xf2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:75
 100985d:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:76 (discriminator 2)
		printchar (out, padchar);
 100985f:	89 ea                	mov    edx,ebp
 1009861:	89 f8                	mov    eax,edi
 1009863:	e8 2c ff ff ff       	call   1009794 <printchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:75 (discriminator 2)
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 1009868:	83 ee 01             	sub    esi,0x1
 100986b:	75 f2                	jne    100985f <prints+0xaf>
 100986d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1009871:	8d 04 03             	lea    eax,[ebx+eax*1]
 1009874:	89 c3                	mov    ebx,eax
 1009876:	eb 2a                	jmp    10098a2 <prints+0xf2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:66
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 1009878:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
 100987c:	bb 00 00 00 00       	mov    ebx,0x0
 1009881:	eb 0a                	jmp    100988d <prints+0xdd>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:55
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 1009883:	bd 20 00 00 00       	mov    ebp,0x20
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:65
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
 1009888:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:71
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 100988d:	0f b6 16             	movzx  edx,BYTE PTR [esi]
 1009890:	84 d2                	test   dl,dl
 1009892:	75 a3                	jne    1009837 <prints+0x87>
 1009894:	eb 0c                	jmp    10098a2 <prints+0xf2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:65
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
 1009896:	f6 c2 01             	test   dl,0x1
 1009899:	74 e8                	je     1009883 <prints+0xd3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:55
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 100989b:	bd 20 00 00 00       	mov    ebp,0x20
 10098a0:	eb 89                	jmp    100982b <prints+0x7b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:81
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 10098a2:	89 d8                	mov    eax,ebx
 10098a4:	83 c4 1c             	add    esp,0x1c
 10098a7:	5b                   	pop    ebx
 10098a8:	5e                   	pop    esi
 10098a9:	5f                   	pop    edi
 10098aa:	5d                   	pop    ebp
 10098ab:	c3                   	ret    

010098ac <printi>:
printi():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:87

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 10098ac:	55                   	push   ebp
 10098ad:	57                   	push   edi
 10098ae:	56                   	push   esi
 10098af:	53                   	push   ebx
 10098b0:	83 ec 2c             	sub    esp,0x2c
 10098b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:93
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
 10098b7:	85 d2                	test   edx,edx
 10098b9:	75 2a                	jne    10098e5 <printi+0x39>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:94
		print_buf[0] = '0';
 10098bb:	c6 44 24 14 30       	mov    BYTE PTR [esp+0x14],0x30
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:95
		print_buf[1] = '\0';
 10098c0:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:96
		return prints (out, print_buf, width, pad);
 10098c5:	83 ec 0c             	sub    esp,0xc
 10098c8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
 10098cc:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
 10098d0:	8d 54 24 24          	lea    edx,[esp+0x24]
 10098d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 10098d8:	e8 d3 fe ff ff       	call   10097b0 <prints>
 10098dd:	83 c4 10             	add    esp,0x10
 10098e0:	e9 f1 00 00 00       	jmp    10099d6 <printi+0x12a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:99
	}

	if (sg && b == 10 && i < 0) {
 10098e5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
 10098ea:	0f 95 c3             	setne  bl
 10098ed:	83 f9 0a             	cmp    ecx,0xa
 10098f0:	0f 94 c0             	sete   al
 10098f3:	84 c3                	test   bl,al
 10098f5:	0f 84 c1 00 00 00    	je     10099bc <printi+0x110>
 10098fb:	89 d0                	mov    eax,edx
 10098fd:	c1 e8 1f             	shr    eax,0x1f
 1009900:	84 c0                	test   al,al
 1009902:	0f 84 b4 00 00 00    	je     10099bc <printi+0x110>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:105
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 1009908:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:104
	if (sg && b == 10 && i < 0) {
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
 100990d:	8d 74 24 1f          	lea    esi,[esp+0x1f]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:107
	*s = '\0';

	while (u) {
 1009911:	89 d3                	mov    ebx,edx
 1009913:	f7 db                	neg    ebx
 1009915:	74 54                	je     100996b <printi+0xbf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:100
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 1009917:	c7 44 24 0c 01 00 00 	mov    DWORD PTR [esp+0xc],0x1
 100991e:	00 
 100991f:	eb 08                	jmp    1009929 <printi+0x7d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:90

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 1009921:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
 1009928:	00 
 1009929:	8d 74 24 1f          	lea    esi,[esp+0x1f]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:108

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
		t = u % b;
 100992d:	89 cf                	mov    edi,ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:110
		if( t >= 10 )
			t += letbase - '0' - 10;
 100992f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
 1009933:	8d 68 c6             	lea    ebp,[eax-0x3a]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:108

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
		t = u % b;
 1009936:	89 d8                	mov    eax,ebx
 1009938:	ba 00 00 00 00       	mov    edx,0x0
 100993d:	f7 f1                	div    ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:110
		if( t >= 10 )
			t += letbase - '0' - 10;
 100993f:	8d 04 2a             	lea    eax,[edx+ebp*1]
 1009942:	83 fa 0a             	cmp    edx,0xa
 1009945:	0f 4c c2             	cmovl  eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:111
		*--s = t + '0';
 1009948:	83 ee 01             	sub    esi,0x1
 100994b:	83 c0 30             	add    eax,0x30
 100994e:	88 06                	mov    BYTE PTR [esi],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:112
		u /= b;
 1009950:	89 d8                	mov    eax,ebx
 1009952:	ba 00 00 00 00       	mov    edx,0x0
 1009957:	f7 f7                	div    edi
 1009959:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:107
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
 100995b:	85 c0                	test   eax,eax
 100995d:	75 d7                	jne    1009936 <printi+0x8a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:90

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 100995f:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:115
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
 1009964:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
 1009969:	74 34                	je     100999f <printi+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:116
		if( width && (pad & PAD_ZERO) ) {
 100996b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
 1009970:	74 21                	je     1009993 <printi+0xe7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:116 (discriminator 1)
 1009972:	f6 44 24 48 02       	test   BYTE PTR [esp+0x48],0x2
 1009977:	74 1a                	je     1009993 <printi+0xe7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:117
			printchar (out, '-');
 1009979:	ba 2d 00 00 00       	mov    edx,0x2d
 100997e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1009982:	e8 0d fe ff ff       	call   1009794 <printchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:119
			++pc;
			--width;
 1009987:	83 6c 24 44 01       	sub    DWORD PTR [esp+0x44],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:118
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 100998c:	bb 01 00 00 00       	mov    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:119
			--width;
 1009991:	eb 0c                	jmp    100999f <printi+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:122
		}
		else {
			*--s = '-';
 1009993:	c6 46 ff 2d          	mov    BYTE PTR [esi-0x1],0x2d
 1009997:	8d 76 ff             	lea    esi,[esi-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:90

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 100999a:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:126
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 100999f:	83 ec 0c             	sub    esp,0xc
 10099a2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
 10099a6:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
 10099aa:	89 f2                	mov    edx,esi
 10099ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 10099b0:	e8 fb fd ff ff       	call   10097b0 <prints>
 10099b5:	01 d8                	add    eax,ebx
 10099b7:	83 c4 10             	add    esp,0x10
 10099ba:	eb 1a                	jmp    10099d6 <printi+0x12a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:91
static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 10099bc:	89 d3                	mov    ebx,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:105
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 10099be:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:107

	while (u) {
 10099c3:	85 d2                	test   edx,edx
 10099c5:	0f 85 56 ff ff ff    	jne    1009921 <printi+0x75>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:90

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 10099cb:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:104
	if (sg && b == 10 && i < 0) {
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
 10099d0:	8d 74 24 1f          	lea    esi,[esp+0x1f]
 10099d4:	eb c9                	jmp    100999f <printi+0xf3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:127
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
}
 10099d6:	83 c4 2c             	add    esp,0x2c
 10099d9:	5b                   	pop    ebx
 10099da:	5e                   	pop    esi
 10099db:	5f                   	pop    edi
 10099dc:	5d                   	pop    ebp
 10099dd:	c3                   	ret    

010099de <print>:
print():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:130

static int print(char **out, const char *format, va_list args )
{
 10099de:	55                   	push   ebp
 10099df:	57                   	push   edi
 10099e0:	56                   	push   esi
 10099e1:	53                   	push   ebx
 10099e2:	83 ec 2c             	sub    esp,0x2c
 10099e5:	89 c7                	mov    edi,eax
 10099e7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:135
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 10099eb:	0f b6 02             	movzx  eax,BYTE PTR [edx]
 10099ee:	84 c0                	test   al,al
 10099f0:	0f 84 b8 01 00 00    	je     1009bae <print+0x1d0>
 10099f6:	89 d5                	mov    ebp,edx
 10099f8:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:136
		if (*format == '%') {
 10099fd:	3c 25                	cmp    al,0x25
 10099ff:	0f 85 88 01 00 00    	jne    1009b8d <print+0x1af>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:137
			++format;
 1009a05:	8d 5d 01             	lea    ebx,[ebp+0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:139
			width = pad = 0;
			if (*format == '\0') break;
 1009a08:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
 1009a0c:	84 d2                	test   dl,dl
 1009a0e:	0f 84 9f 01 00 00    	je     1009bb3 <print+0x1d5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:140
			if (*format == '%') goto out;
 1009a14:	80 fa 25             	cmp    dl,0x25
 1009a17:	0f 84 6e 01 00 00    	je     1009b8b <print+0x1ad>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:138
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 1009a1d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:141
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
 1009a22:	80 fa 2d             	cmp    dl,0x2d
 1009a25:	75 08                	jne    1009a2f <print+0x51>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:142
				++format;
 1009a27:	8d 5d 02             	lea    ebx,[ebp+0x2]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:143
				pad = PAD_RIGHT;
 1009a2a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:145
			}
			while (*format == '0') {
 1009a2f:	80 3b 30             	cmp    BYTE PTR [ebx],0x30
 1009a32:	75 0b                	jne    1009a3f <print+0x61>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:146
				++format;
 1009a34:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:147
				pad |= PAD_ZERO;
 1009a37:	83 c8 02             	or     eax,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:145
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 1009a3a:	80 3b 30             	cmp    BYTE PTR [ebx],0x30
 1009a3d:	74 f5                	je     1009a34 <print+0x56>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:149 (discriminator 1)
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 1009a3f:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
 1009a42:	8d 4a d0             	lea    ecx,[edx-0x30]
 1009a45:	80 f9 09             	cmp    cl,0x9
 1009a48:	77 22                	ja     1009a6c <print+0x8e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:149
 1009a4a:	b9 00 00 00 00       	mov    ecx,0x0
 1009a4f:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:150 (discriminator 2)
				width *= 10;
 1009a51:	8d 04 89             	lea    eax,[ecx+ecx*4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:151 (discriminator 2)
				width += *format - '0';
 1009a54:	0f be d2             	movsx  edx,dl
 1009a57:	8d 4c 42 d0          	lea    ecx,[edx+eax*2-0x30]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:149 (discriminator 2)
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 1009a5b:	83 c3 01             	add    ebx,0x1
 1009a5e:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
 1009a61:	8d 42 d0             	lea    eax,[edx-0x30]
 1009a64:	3c 09                	cmp    al,0x9
 1009a66:	76 e9                	jbe    1009a51 <print+0x73>
 1009a68:	89 e8                	mov    eax,ebp
 1009a6a:	eb 05                	jmp    1009a71 <print+0x93>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:149
 1009a6c:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:153
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
 1009a71:	80 fa 73             	cmp    dl,0x73
 1009a74:	75 2c                	jne    1009aa2 <print+0xc4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:154
				register char *s = (char *)va_arg( args, int );
 1009a76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1009a7a:	8d 6a 04             	lea    ebp,[edx+0x4]
 1009a7d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
 1009a81:	8b 12                	mov    edx,DWORD PTR [edx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:155
				pc += prints (out, s?s:"(null)", width, pad);
 1009a83:	85 d2                	test   edx,edx
 1009a85:	bd 2a 66 06 01       	mov    ebp,0x106662a
 1009a8a:	0f 44 d5             	cmove  edx,ebp
 1009a8d:	83 ec 0c             	sub    esp,0xc
 1009a90:	50                   	push   eax
 1009a91:	89 f8                	mov    eax,edi
 1009a93:	e8 18 fd ff ff       	call   10097b0 <prints>
 1009a98:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:156
				continue;
 1009a9a:	83 c4 10             	add    esp,0x10
 1009a9d:	e9 fb 00 00 00       	jmp    1009b9d <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:158
			}
			if( *format == 'd' ) {
 1009aa2:	80 fa 64             	cmp    dl,0x64
 1009aa5:	75 29                	jne    1009ad0 <print+0xf2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:159
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 1009aa7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1009aab:	8d 6a 04             	lea    ebp,[edx+0x4]
 1009aae:	6a 61                	push   0x61
 1009ab0:	50                   	push   eax
 1009ab1:	51                   	push   ecx
 1009ab2:	6a 01                	push   0x1
 1009ab4:	b9 0a 00 00 00       	mov    ecx,0xa
 1009ab9:	8b 12                	mov    edx,DWORD PTR [edx]
 1009abb:	89 f8                	mov    eax,edi
 1009abd:	e8 ea fd ff ff       	call   10098ac <printi>
 1009ac2:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:160
				continue;
 1009ac4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:159
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 1009ac7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:160
				continue;
 1009acb:	e9 cd 00 00 00       	jmp    1009b9d <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:162
			}
			if( *format == 'x' ) {
 1009ad0:	80 fa 78             	cmp    dl,0x78
 1009ad3:	75 2b                	jne    1009b00 <print+0x122>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:163
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 1009ad5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
 1009ad9:	89 ea                	mov    edx,ebp
 1009adb:	83 c5 04             	add    ebp,0x4
 1009ade:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
 1009ae2:	6a 61                	push   0x61
 1009ae4:	50                   	push   eax
 1009ae5:	51                   	push   ecx
 1009ae6:	6a 00                	push   0x0
 1009ae8:	b9 10 00 00 00       	mov    ecx,0x10
 1009aed:	8b 12                	mov    edx,DWORD PTR [edx]
 1009aef:	89 f8                	mov    eax,edi
 1009af1:	e8 b6 fd ff ff       	call   10098ac <printi>
 1009af6:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:164
				continue;
 1009af8:	83 c4 10             	add    esp,0x10
 1009afb:	e9 9d 00 00 00       	jmp    1009b9d <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:166
			}
			if( *format == 'X' ) {
 1009b00:	80 fa 58             	cmp    dl,0x58
 1009b03:	75 26                	jne    1009b2b <print+0x14d>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:167
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 1009b05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
 1009b09:	8d 6a 04             	lea    ebp,[edx+0x4]
 1009b0c:	6a 41                	push   0x41
 1009b0e:	50                   	push   eax
 1009b0f:	51                   	push   ecx
 1009b10:	6a 00                	push   0x0
 1009b12:	b9 10 00 00 00       	mov    ecx,0x10
 1009b17:	8b 12                	mov    edx,DWORD PTR [edx]
 1009b19:	89 f8                	mov    eax,edi
 1009b1b:	e8 8c fd ff ff       	call   10098ac <printi>
 1009b20:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:168
				continue;
 1009b22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:167
			if( *format == 'x' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 1009b25:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:168
				continue;
 1009b29:	eb 72                	jmp    1009b9d <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:170
			}
			if( *format == 'u' ) {
 1009b2b:	80 fa 75             	cmp    dl,0x75
 1009b2e:	75 28                	jne    1009b58 <print+0x17a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:171
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 1009b30:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
 1009b34:	89 ea                	mov    edx,ebp
 1009b36:	83 c5 04             	add    ebp,0x4
 1009b39:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
 1009b3d:	6a 61                	push   0x61
 1009b3f:	50                   	push   eax
 1009b40:	51                   	push   ecx
 1009b41:	6a 00                	push   0x0
 1009b43:	b9 0a 00 00 00       	mov    ecx,0xa
 1009b48:	8b 12                	mov    edx,DWORD PTR [edx]
 1009b4a:	89 f8                	mov    eax,edi
 1009b4c:	e8 5b fd ff ff       	call   10098ac <printi>
 1009b51:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:172
				continue;
 1009b53:	83 c4 10             	add    esp,0x10
 1009b56:	eb 45                	jmp    1009b9d <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:174
			}
			if( *format == 'c' ) {
 1009b58:	80 fa 63             	cmp    dl,0x63
 1009b5b:	75 40                	jne    1009b9d <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:176
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 1009b5d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
 1009b61:	89 ea                	mov    edx,ebp
 1009b63:	83 c5 04             	add    ebp,0x4
 1009b66:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
 1009b6a:	8b 12                	mov    edx,DWORD PTR [edx]
 1009b6c:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:177
				scr[1] = '\0';
 1009b70:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:178
				pc += prints (out, scr, width, pad);
 1009b75:	83 ec 0c             	sub    esp,0xc
 1009b78:	50                   	push   eax
 1009b79:	8d 54 24 2e          	lea    edx,[esp+0x2e]
 1009b7d:	89 f8                	mov    eax,edi
 1009b7f:	e8 2c fc ff ff       	call   10097b0 <prints>
 1009b84:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:179
				continue;
 1009b86:	83 c4 10             	add    esp,0x10
 1009b89:	eb 12                	jmp    1009b9d <print+0x1bf>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:137
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 1009b8b:	89 dd                	mov    ebp,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:184
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 1009b8d:	0f be 55 00          	movsx  edx,BYTE PTR [ebp+0x0]
 1009b91:	89 f8                	mov    eax,edi
 1009b93:	e8 fc fb ff ff       	call   1009794 <printchar>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:185
			++pc;
 1009b98:	83 c6 01             	add    esi,0x1
 1009b9b:	89 eb                	mov    ebx,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:135
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 1009b9d:	8d 6b 01             	lea    ebp,[ebx+0x1]
 1009ba0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
 1009ba4:	84 c0                	test   al,al
 1009ba6:	0f 85 51 fe ff ff    	jne    10099fd <print+0x1f>
 1009bac:	eb 05                	jmp    1009bb3 <print+0x1d5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:132
}

static int print(char **out, const char *format, va_list args )
{
	register int width, pad;
	register int pc = 0;
 1009bae:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:188
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 1009bb3:	85 ff                	test   edi,edi
 1009bb5:	74 05                	je     1009bbc <print+0x1de>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:188 (discriminator 1)
 1009bb7:	8b 07                	mov    eax,DWORD PTR [edi]
 1009bb9:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:191
	va_end( args );
	return pc;
}
 1009bbc:	89 f0                	mov    eax,esi
 1009bbe:	83 c4 2c             	add    esp,0x2c
 1009bc1:	5b                   	pop    ebx
 1009bc2:	5e                   	pop    esi
 1009bc3:	5f                   	pop    edi
 1009bc4:	5d                   	pop    ebp
 1009bc5:	c3                   	ret    

01009bc6 <printk_valist>:
printk_valist():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:194

int printk_valist(const char *format, va_list args)
{
 1009bc6:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:195
    return print(0, format, args);
 1009bc9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
 1009bcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
 1009bd1:	b8 00 00 00 00       	mov    eax,0x0
 1009bd6:	e8 03 fe ff ff       	call   10099de <print>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:196
}
 1009bdb:	83 c4 0c             	add    esp,0xc
 1009bde:	c3                   	ret    

01009bdf <printk>:
printk():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:199

int printk(const char *format, ...)
{
 1009bdf:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:201
        va_list args;
        va_start( args, format );
 1009be2:	8d 44 24 14          	lea    eax,[esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:202
        return printk_valist(format, args);
 1009be6:	83 ec 08             	sub    esp,0x8
 1009be9:	50                   	push   eax
 1009bea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1009bee:	e8 d3 ff ff ff       	call   1009bc6 <printk_valist>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:203
}
 1009bf3:	83 c4 1c             	add    esp,0x1c
 1009bf6:	c3                   	ret    

01009bf7 <printd>:
printd():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:209

#ifdef DEBUG_NONE
int printd() {}
#else
int printd(uint32_t DebugLevel, const char *format, ...)
{
 1009bf7:	83 ec 0c             	sub    esp,0xc
 1009bfa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:210
    if ((kDebugLevel & DebugLevel) == DebugLevel)    
 1009bfe:	89 d1                	mov    ecx,edx
 1009c00:	23 0d 78 98 12 00    	and    ecx,DWORD PTR ds:0x129878
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:222
//            pauseDisplay(false);
//            printDLineCount=0;
//        }
        return printk_valist(format, args);
    }
    return 0;
 1009c06:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:210
#ifdef DEBUG_NONE
int printd() {}
#else
int printd(uint32_t DebugLevel, const char *format, ...)
{
    if ((kDebugLevel & DebugLevel) == DebugLevel)    
 1009c0b:	39 ca                	cmp    edx,ecx
 1009c0d:	75 14                	jne    1009c23 <printd+0x2c>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:214
    {
        va_list args;

        va_start( args, format );
 1009c0f:	8d 44 24 18          	lea    eax,[esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:220
//        if (++printDLineCount==SYS_VGA_HEIGHT-1)
//        {
//            pauseDisplay(false);
//            printDLineCount=0;
//        }
        return printk_valist(format, args);
 1009c13:	83 ec 08             	sub    esp,0x8
 1009c16:	50                   	push   eax
 1009c17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
 1009c1b:	e8 a6 ff ff ff       	call   1009bc6 <printk_valist>
 1009c20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:223 (discriminator 1)
    }
    return 0;
}
 1009c23:	83 c4 0c             	add    esp,0xc
 1009c26:	c3                   	ret    

01009c27 <sprintf>:
sprintf():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:227
#endif

int sprintf(char *out, const char *format, ...)
{
 1009c27:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:231
        va_list args;
        
        va_start( args, format );
        return print( &out, format, args );
 1009c2a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
 1009c2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
 1009c32:	8d 44 24 10          	lea    eax,[esp+0x10]
 1009c36:	e8 a3 fd ff ff       	call   10099de <print>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/printf.c:232
}
 1009c3b:	83 c4 0c             	add    esp,0xc
 1009c3e:	c3                   	ret    
 1009c3f:	90                   	nop

01009c40 <strcat>:
strcat():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   char *
   STRCAT (char *dest, const char *src)
   {
 1009c40:	53                   	push   ebx
 1009c41:	83 ec 14             	sub    esp,0x14
 1009c44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:31
     strcpy (dest + strlen (dest), src);
 1009c48:	53                   	push   ebx
 1009c49:	e8 ae 00 00 00       	call   1009cfc <strlen>
 1009c4e:	83 c4 08             	add    esp,0x8
 1009c51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 1009c55:	01 d8                	add    eax,ebx
 1009c57:	50                   	push   eax
 1009c58:	e8 53 00 00 00       	call   1009cb0 <strcpy>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:33
     return dest;
   }
 1009c5d:	89 d8                	mov    eax,ebx
 1009c5f:	83 c4 18             	add    esp,0x18
 1009c62:	5b                   	pop    ebx
 1009c63:	c3                   	ret    

01009c64 <concatenate>:
concatenate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:35

   void concatenate(char p[], char q[]) {
 1009c64:	56                   	push   esi
 1009c65:	53                   	push   ebx
 1009c66:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
 1009c6a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:40
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
 1009c6e:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
 1009c71:	74 10                	je     1009c83 <concatenate+0x1f>
 1009c73:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:41
      c++;  	
 1009c78:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:40
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
 1009c7b:	80 3c 13 00          	cmp    BYTE PTR [ebx+edx*1],0x0
 1009c7f:	75 f7                	jne    1009c78 <concatenate+0x14>
 1009c81:	eb 05                	jmp    1009c88 <concatenate+0x24>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:38
   }

   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 1009c83:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:46
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
 1009c88:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
 1009c8b:	84 c9                	test   cl,cl
 1009c8d:	74 16                	je     1009ca5 <concatenate+0x41>
 1009c8f:	89 d0                	mov    eax,edx
 1009c91:	29 d6                	sub    esi,edx
 1009c93:	89 f2                	mov    edx,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:47
      p[c] = q[d];
 1009c95:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:49
      d++;
      c++;	
 1009c98:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:46
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
 1009c9b:	0f b6 0c 02          	movzx  ecx,BYTE PTR [edx+eax*1]
 1009c9f:	84 c9                	test   cl,cl
 1009ca1:	75 f2                	jne    1009c95 <concatenate+0x31>
 1009ca3:	eb 02                	jmp    1009ca7 <concatenate+0x43>
 1009ca5:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:52
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
 1009ca7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcat.c:53
 1009cab:	5b                   	pop    ebx
 1009cac:	5e                   	pop    esi
 1009cad:	c3                   	ret    
 1009cae:	66 90                	xchg   ax,ax

01009cb0 <strcpy>:
strcpy():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:5
#include "strings.h"

char *
strcpy(char *s1, const char *s2)
{
 1009cb0:	53                   	push   ebx
 1009cb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 1009cb5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:6
    char *s = s1;
 1009cb9:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:7 (discriminator 1)
    while ((*s++ = *s2++) != 0)
 1009cbb:	83 c2 01             	add    edx,0x1
 1009cbe:	83 c1 01             	add    ecx,0x1
 1009cc1:	0f b6 59 ff          	movzx  ebx,BYTE PTR [ecx-0x1]
 1009cc5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
 1009cc8:	84 db                	test   bl,bl
 1009cca:	75 ef                	jne    1009cbb <strcpy+0xb>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:10
	;
    return (s1);
}
 1009ccc:	5b                   	pop    ebx
 1009ccd:	c3                   	ret    

01009cce <strcpyc>:
strcpyc():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:14

char *
strcpyc(char *s1, const char *s2, unsigned count)
{
 1009cce:	56                   	push   esi
 1009ccf:	53                   	push   ebx
 1009cd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 1009cd4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:16
    char *s = s1;
    while ((*s++ = *s2++) != 0 && count-->0)
 1009cd8:	ba 00 00 00 00       	mov    edx,0x0
 1009cdd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 1009ce1:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:16 (discriminator 2)
 1009ce4:	0f b6 0c 16          	movzx  ecx,BYTE PTR [esi+edx*1]
 1009ce8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
 1009ceb:	84 c9                	test   cl,cl
 1009ced:	74 07                	je     1009cf6 <strcpyc+0x28>
 1009cef:	83 c2 01             	add    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:16 (discriminator 1)
 1009cf2:	39 d3                	cmp    ebx,edx
 1009cf4:	75 ee                	jne    1009ce4 <strcpyc+0x16>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strcpy.c:19
	;
    return (s1);
}
 1009cf6:	5b                   	pop    ebx
 1009cf7:	5e                   	pop    esi
 1009cf8:	c3                   	ret    
 1009cf9:	66 90                	xchg   ax,ax
 1009cfb:	90                   	nop

01009cfc <strlen>:
strlen():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:3
#include <stddef.h>

size_t strlen(const char* str) {
 1009cfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:5
          size_t ret = 0;
        while ( str[ret] != 0 )
 1009d00:	80 3a 00             	cmp    BYTE PTR [edx],0x0
 1009d03:	74 10                	je     1009d15 <strlen+0x19>
 1009d05:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:6
                ret++;
 1009d0a:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:5
#include <stddef.h>

size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
 1009d0d:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
 1009d11:	75 f7                	jne    1009d0a <strlen+0xe>
 1009d13:	f3 c3                	repz ret 
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:4
#include <stddef.h>

size_t strlen(const char* str) {
          size_t ret = 0;
 1009d15:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strlen.c:8
        while ( str[ret] != 0 )
                ret++;
        return ret;
}
 1009d1a:	c3                   	ret    
 1009d1b:	90                   	nop

01009d1c <strncmp>:
strncmp():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
 1009d1c:	57                   	push   edi
 1009d1d:	56                   	push   esi
 1009d1e:	53                   	push   ebx
 1009d1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 1009d23:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
 1009d27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
 1009d2b:	85 db                	test   ebx,ebx
 1009d2d:	74 41                	je     1009d70 <strncmp+0x54>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
 1009d2f:	0f b6 16             	movzx  edx,BYTE PTR [esi]
 1009d32:	0f b6 0f             	movzx  ecx,BYTE PTR [edi]
 1009d35:	38 ca                	cmp    dl,cl
 1009d37:	75 1c                	jne    1009d55 <strncmp+0x39>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:17
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
 1009d39:	84 d2                	test   dl,dl
 1009d3b:	74 3a                	je     1009d77 <strncmp+0x5b>
 1009d3d:	83 eb 01             	sub    ebx,0x1
 1009d40:	b8 00 00 00 00       	mov    eax,0x0
 1009d45:	eb 1e                	jmp    1009d65 <strncmp+0x49>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:15
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
	if (*s1 != *s2)
 1009d47:	0f b6 54 06 01       	movzx  edx,BYTE PTR [esi+eax*1+0x1]
 1009d4c:	0f b6 4c 07 01       	movzx  ecx,BYTE PTR [edi+eax*1+0x1]
 1009d51:	38 ca                	cmp    dl,cl
 1009d53:	74 09                	je     1009d5e <strncmp+0x42>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
 1009d55:	38 ca                	cmp    dl,cl
 1009d57:	19 c0                	sbb    eax,eax
 1009d59:	83 c8 01             	or     eax,0x1
 1009d5c:	eb 25                	jmp    1009d83 <strncmp+0x67>
 1009d5e:	83 c0 01             	add    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
 1009d61:	84 d2                	test   dl,dl
 1009d63:	74 19                	je     1009d7e <strncmp+0x62>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
 1009d65:	39 d8                	cmp    eax,ebx
 1009d67:	75 de                	jne    1009d47 <strncmp+0x2b>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
 1009d69:	b8 00 00 00 00       	mov    eax,0x0
 1009d6e:	eb 13                	jmp    1009d83 <strncmp+0x67>
 1009d70:	b8 00 00 00 00       	mov    eax,0x0
 1009d75:	eb 0c                	jmp    1009d83 <strncmp+0x67>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:18
{
    for ( ; n > 0; s1++, s2++, --n)
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
 1009d77:	b8 00 00 00 00       	mov    eax,0x0
 1009d7c:	eb 05                	jmp    1009d83 <strncmp+0x67>
 1009d7e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncmp.c:20
    return 0;
}
 1009d83:	5b                   	pop    ebx
 1009d84:	5e                   	pop    esi
 1009d85:	5f                   	pop    edi
 1009d86:	c3                   	ret    
 1009d87:	90                   	nop

01009d88 <strncpy>:
strncpy():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
 1009d88:	56                   	push   esi
 1009d89:	53                   	push   ebx
 1009d8a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
 1009d8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 1009d92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:16
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
 1009d96:	85 c9                	test   ecx,ecx
 1009d98:	74 33                	je     1009dcd <strncpy+0x45>
 1009d9a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1009d9d:	84 c0                	test   al,al
 1009d9f:	74 26                	je     1009dc7 <strncpy+0x3f>
 1009da1:	89 f2                	mov    edx,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
 1009da3:	83 c2 01             	add    edx,0x1
 1009da6:	83 c3 01             	add    ebx,0x1
 1009da9:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
 1009dac:	83 e9 01             	sub    ecx,0x1
 1009daf:	74 1c                	je     1009dcd <strncpy+0x45>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:16 (discriminator 1)
 1009db1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
 1009db4:	84 c0                	test   al,al
 1009db6:	75 eb                	jne    1009da3 <strncpy+0x1b>
 1009db8:	eb 0f                	jmp    1009dc9 <strncpy+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:21
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
	*s++ = '\0';
 1009dba:	83 c2 01             	add    edx,0x1
 1009dbd:	c6 42 ff 00          	mov    BYTE PTR [edx-0x1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
 1009dc1:	39 d1                	cmp    ecx,edx
 1009dc3:	75 f5                	jne    1009dba <strncpy+0x32>
 1009dc5:	eb 06                	jmp    1009dcd <strncpy+0x45>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:15
 */
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
 1009dc7:	89 f2                	mov    edx,esi
 1009dc9:	01 d1                	add    ecx,edx
 1009dcb:	eb ed                	jmp    1009dba <strncpy+0x32>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strncpy.c:25
    while (n > 0) {
	*s++ = '\0';
	--n;
    }
    return s1;
}
 1009dcd:	89 f0                	mov    eax,esi
 1009dcf:	5b                   	pop    ebx
 1009dd0:	5e                   	pop    esi
 1009dd1:	c3                   	ret    
 1009dd2:	66 90                	xchg   ax,ax

01009dd4 <strleft>:
strleft():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strparts.c:2
char* strleft(char* val, int cnt)
{
 1009dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
 1009dd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 1009ddc:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/strings/strparts.c:5
    return val;
}
 1009de0:	c3                   	ret    
 1009de1:	66 90                	xchg   ax,ax
 1009de3:	90                   	nop

01009de4 <time>:
time():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:84
};

extern time_t kSystemCurrentTime;
time_t time(time_t* arg)
{
    *arg = kSystemCurrentTime;
 1009de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 1009de8:	8b 15 cc 97 12 00    	mov    edx,DWORD PTR ds:0x1297cc
 1009dee:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:86
    return kSystemCurrentTime;
}
 1009df0:	a1 cc 97 12 00       	mov    eax,ds:0x1297cc
 1009df5:	c3                   	ret    

01009df6 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:88

struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
 1009df6:	55                   	push   ebp
 1009df7:	57                   	push   edi
 1009df8:	56                   	push   esi
 1009df9:	53                   	push   ebx
 1009dfa:	83 ec 08             	sub    esp,0x8
 1009dfd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:93
  time_t time = *timer;
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;

  dayclock = (unsigned long) time % SECS_DAY;
 1009e01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 1009e05:	8b 18                	mov    ebx,DWORD PTR [eax]
 1009e07:	ba 07 45 2e c2       	mov    edx,0xc22e4507
 1009e0c:	89 d8                	mov    eax,ebx
 1009e0e:	f7 e2                	mul    edx
 1009e10:	89 d1                	mov    ecx,edx
 1009e12:	c1 e9 10             	shr    ecx,0x10
 1009e15:	69 c9 80 51 01 00    	imul   ecx,ecx,0x15180
 1009e1b:	29 cb                	sub    ebx,ecx
 1009e1d:	89 d9                	mov    ecx,ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:94
  dayno = (unsigned long) time / SECS_DAY;
 1009e1f:	89 d3                	mov    ebx,edx
 1009e21:	c1 eb 10             	shr    ebx,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:96

  tmbuf->tm_sec = dayclock % 60;
 1009e24:	bd 89 88 88 88       	mov    ebp,0x88888889
 1009e29:	89 c8                	mov    eax,ecx
 1009e2b:	f7 e5                	mul    ebp
 1009e2d:	c1 ea 05             	shr    edx,0x5
 1009e30:	6b d2 3c             	imul   edx,edx,0x3c
 1009e33:	89 c8                	mov    eax,ecx
 1009e35:	29 d0                	sub    eax,edx
 1009e37:	89 06                	mov    DWORD PTR [esi],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:97
  tmbuf->tm_min = (dayclock % 3600) / 60;
 1009e39:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
 1009e3e:	89 c8                	mov    eax,ecx
 1009e40:	f7 e2                	mul    edx
 1009e42:	89 d7                	mov    edi,edx
 1009e44:	c1 ef 0b             	shr    edi,0xb
 1009e47:	69 c7 10 0e 00 00    	imul   eax,edi,0xe10
 1009e4d:	29 c1                	sub    ecx,eax
 1009e4f:	89 c8                	mov    eax,ecx
 1009e51:	f7 e5                	mul    ebp
 1009e53:	89 d1                	mov    ecx,edx
 1009e55:	c1 e9 05             	shr    ecx,0x5
 1009e58:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:98
  tmbuf->tm_hour = dayclock / 3600;
 1009e5b:	89 7e 08             	mov    DWORD PTR [esi+0x8],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:99
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
 1009e5e:	8d 4b 04             	lea    ecx,[ebx+0x4]
 1009e61:	ba 25 49 92 24       	mov    edx,0x24924925
 1009e66:	89 c8                	mov    eax,ecx
 1009e68:	f7 e2                	mul    edx
 1009e6a:	89 c8                	mov    eax,ecx
 1009e6c:	29 d0                	sub    eax,edx
 1009e6e:	d1 e8                	shr    eax,1
 1009e70:	01 c2                	add    edx,eax
 1009e72:	c1 ea 02             	shr    edx,0x2
 1009e75:	8d 04 d5 00 00 00 00 	lea    eax,[edx*8+0x0]
 1009e7c:	29 d0                	sub    eax,edx
 1009e7e:	29 c1                	sub    ecx,eax
 1009e80:	89 4e 18             	mov    DWORD PTR [esi+0x18],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:91
}

struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
  time_t time = *timer;
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
 1009e83:	b9 b2 07 00 00       	mov    ecx,0x7b2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
 1009e88:	bd 1f 85 eb 51       	mov    ebp,0x51eb851f
 1009e8d:	eb 53                	jmp    1009ee2 <gmtime_r+0xec>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:101 (discriminator 1)
    dayno -= YEARSIZE(year);
 1009e8f:	89 c8                	mov    eax,ecx
 1009e91:	f7 ed                	imul   ebp
 1009e93:	c1 fa 05             	sar    edx,0x5
 1009e96:	89 c8                	mov    eax,ecx
 1009e98:	c1 f8 1f             	sar    eax,0x1f
 1009e9b:	29 c2                	sub    edx,eax
 1009e9d:	6b d2 64             	imul   edx,edx,0x64
 1009ea0:	39 d1                	cmp    ecx,edx
 1009ea2:	75 26                	jne    1009eca <gmtime_r+0xd4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:101 (discriminator 4)
 1009ea4:	89 c8                	mov    eax,ecx
 1009ea6:	f7 ed                	imul   ebp
 1009ea8:	c1 fa 07             	sar    edx,0x7
 1009eab:	89 c8                	mov    eax,ecx
 1009ead:	c1 f8 1f             	sar    eax,0x1f
 1009eb0:	29 c2                	sub    edx,eax
 1009eb2:	69 c2 90 01 00 00    	imul   eax,edx,0x190
 1009eb8:	89 cf                	mov    edi,ecx
 1009eba:	29 c7                	sub    edi,eax
 1009ebc:	83 ff 01             	cmp    edi,0x1
 1009ebf:	19 c0                	sbb    eax,eax
 1009ec1:	f7 d0                	not    eax
 1009ec3:	05 6e 01 00 00       	add    eax,0x16e
 1009ec8:	eb 13                	jmp    1009edd <gmtime_r+0xe7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:101
 1009eca:	b8 6e 01 00 00       	mov    eax,0x16e
 1009ecf:	eb 0c                	jmp    1009edd <gmtime_r+0xe7>
 1009ed1:	b8 6d 01 00 00       	mov    eax,0x16d
 1009ed6:	eb 05                	jmp    1009edd <gmtime_r+0xe7>
 1009ed8:	b8 6e 01 00 00       	mov    eax,0x16e
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:101 (discriminator 8)
 1009edd:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:102 (discriminator 8)
    year++;
 1009edf:	83 c1 01             	add    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
 1009ee2:	89 cf                	mov    edi,ecx
 1009ee4:	83 e7 03             	and    edi,0x3
 1009ee7:	0f 85 d5 00 00 00    	jne    1009fc2 <gmtime_r+0x1cc>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100 (discriminator 1)
 1009eed:	89 c8                	mov    eax,ecx
 1009eef:	f7 ed                	imul   ebp
 1009ef1:	c1 fa 05             	sar    edx,0x5
 1009ef4:	89 c8                	mov    eax,ecx
 1009ef6:	c1 f8 1f             	sar    eax,0x1f
 1009ef9:	29 c2                	sub    edx,eax
 1009efb:	6b d2 64             	imul   edx,edx,0x64
 1009efe:	39 d1                	cmp    ecx,edx
 1009f00:	0f 85 0a 01 00 00    	jne    100a010 <gmtime_r+0x21a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100 (discriminator 4)
 1009f06:	89 c8                	mov    eax,ecx
 1009f08:	f7 ed                	imul   ebp
 1009f0a:	c1 fa 07             	sar    edx,0x7
 1009f0d:	89 c8                	mov    eax,ecx
 1009f0f:	c1 f8 1f             	sar    eax,0x1f
 1009f12:	29 c2                	sub    edx,eax
 1009f14:	69 d2 90 01 00 00    	imul   edx,edx,0x190
 1009f1a:	39 d1                	cmp    ecx,edx
 1009f1c:	0f 84 03 01 00 00    	je     100a025 <gmtime_r+0x22f>
 1009f22:	e9 b0 00 00 00       	jmp    1009fd7 <gmtime_r+0x1e1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:104
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
 1009f27:	8d 81 94 f8 ff ff    	lea    eax,[ecx-0x76c]
 1009f2d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:105
  tmbuf->tm_yday = dayno;
 1009f30:	89 5e 1c             	mov    DWORD PTR [esi+0x1c],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:106
  tmbuf->tm_mon = 0;
 1009f33:	c7 46 10 00 00 00 00 	mov    DWORD PTR [esi+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
 1009f3a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
 1009f3f:	89 c8                	mov    eax,ecx
 1009f41:	f7 ea                	imul   edx
 1009f43:	89 d5                	mov    ebp,edx
 1009f45:	c1 fd 05             	sar    ebp,0x5
 1009f48:	89 c8                	mov    eax,ecx
 1009f4a:	c1 f8 1f             	sar    eax,0x1f
 1009f4d:	29 c5                	sub    ebp,eax
 1009f4f:	6b ed 64             	imul   ebp,ebp,0x64
 1009f52:	89 cf                	mov    edi,ecx
 1009f54:	29 ef                	sub    edi,ebp
 1009f56:	89 fd                	mov    ebp,edi
 1009f58:	c1 fa 07             	sar    edx,0x7
 1009f5b:	29 c2                	sub    edx,eax
 1009f5d:	69 d2 90 01 00 00    	imul   edx,edx,0x190
 1009f63:	29 d1                	sub    ecx,edx
 1009f65:	89 0c 24             	mov    DWORD PTR [esp],ecx
 1009f68:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
 1009f6c:	eb 40                	jmp    1009fae <gmtime_r+0x1b8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108 (discriminator 1)
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
 1009f6e:	85 ed                	test   ebp,ebp
 1009f70:	75 0d                	jne    1009f7f <gmtime_r+0x189>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108 (discriminator 4)
 1009f72:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
 1009f76:	74 0e                	je     1009f86 <gmtime_r+0x190>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108 (discriminator 6)
 1009f78:	ba 00 00 00 00       	mov    edx,0x0
 1009f7d:	eb 1a                	jmp    1009f99 <gmtime_r+0x1a3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108
 1009f7f:	ba 01 00 00 00       	mov    edx,0x1
 1009f84:	eb 13                	jmp    1009f99 <gmtime_r+0x1a3>
 1009f86:	ba 01 00 00 00       	mov    edx,0x1
 1009f8b:	eb 0c                	jmp    1009f99 <gmtime_r+0x1a3>
 1009f8d:	ba 01 00 00 00       	mov    edx,0x1
 1009f92:	eb 05                	jmp    1009f99 <gmtime_r+0x1a3>
 1009f94:	ba 01 00 00 00       	mov    edx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:108 (discriminator 8)
 1009f99:	8d 0c 12             	lea    ecx,[edx+edx*1]
 1009f9c:	01 ca                	add    edx,ecx
 1009f9e:	8d 14 90             	lea    edx,[eax+edx*4]
 1009fa1:	2b 1c 95 80 8b 02 01 	sub    ebx,DWORD PTR [edx*4+0x1028b80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:109 (discriminator 8)
    tmbuf->tm_mon++;
 1009fa8:	83 c0 01             	add    eax,0x1
 1009fab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
 1009fae:	85 ff                	test   edi,edi
 1009fb0:	75 4c                	jne    1009ffe <gmtime_r+0x208>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107 (discriminator 1)
 1009fb2:	85 ed                	test   ebp,ebp
 1009fb4:	0f 85 92 00 00 00    	jne    100a04c <gmtime_r+0x256>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107 (discriminator 4)
 1009fba:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
 1009fbe:	74 7a                	je     100a03a <gmtime_r+0x244>
 1009fc0:	eb 2a                	jmp    1009fec <gmtime_r+0x1f6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
 1009fc2:	81 fb 6c 01 00 00    	cmp    ebx,0x16c
 1009fc8:	0f 87 03 ff ff ff    	ja     1009ed1 <gmtime_r+0xdb>
 1009fce:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
 1009fd2:	e9 50 ff ff ff       	jmp    1009f27 <gmtime_r+0x131>
 1009fd7:	81 fb 6c 01 00 00    	cmp    ebx,0x16c
 1009fdd:	0f 87 ac fe ff ff    	ja     1009e8f <gmtime_r+0x99>
 1009fe3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
 1009fe7:	e9 3b ff ff ff       	jmp    1009f27 <gmtime_r+0x131>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
 1009fec:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
 1009fef:	3b 1c 85 80 8b 02 01 	cmp    ebx,DWORD PTR [eax*4+0x1028b80]
 1009ff6:	0f 83 72 ff ff ff    	jae    1009f6e <gmtime_r+0x178>
 1009ffc:	eb 5e                	jmp    100a05c <gmtime_r+0x266>
 1009ffe:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
 100a001:	3b 1c 85 80 8b 02 01 	cmp    ebx,DWORD PTR [eax*4+0x1028b80]
 100a008:	0f 83 6a ff ff ff    	jae    1009f78 <gmtime_r+0x182>
 100a00e:	eb 4c                	jmp    100a05c <gmtime_r+0x266>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
 100a010:	81 fb 6d 01 00 00    	cmp    ebx,0x16d
 100a016:	0f 87 bc fe ff ff    	ja     1009ed8 <gmtime_r+0xe2>
 100a01c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
 100a020:	e9 02 ff ff ff       	jmp    1009f27 <gmtime_r+0x131>
 100a025:	81 fb 6d 01 00 00    	cmp    ebx,0x16d
 100a02b:	0f 87 73 fe ff ff    	ja     1009ea4 <gmtime_r+0xae>
 100a031:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
 100a035:	e9 ed fe ff ff       	jmp    1009f27 <gmtime_r+0x131>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
 100a03a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
 100a03d:	3b 1c 85 b0 8b 02 01 	cmp    ebx,DWORD PTR [eax*4+0x1028bb0]
 100a044:	0f 83 43 ff ff ff    	jae    1009f8d <gmtime_r+0x197>
 100a04a:	eb 10                	jmp    100a05c <gmtime_r+0x266>
 100a04c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
 100a04f:	3b 1c 85 b0 8b 02 01 	cmp    ebx,DWORD PTR [eax*4+0x1028bb0]
 100a056:	0f 83 38 ff ff ff    	jae    1009f94 <gmtime_r+0x19e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:111
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
 100a05c:	83 c3 01             	add    ebx,0x1
 100a05f:	89 5e 0c             	mov    DWORD PTR [esi+0xc],ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:112
  tmbuf->tm_isdst = 0;
 100a062:	c7 46 20 00 00 00 00 	mov    DWORD PTR [esi+0x20],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:114
  return tmbuf;
}
 100a069:	89 f0                	mov    eax,esi
 100a06b:	83 c4 08             	add    esp,0x8
 100a06e:	5b                   	pop    ebx
 100a06f:	5e                   	pop    esi
 100a070:	5f                   	pop    edi
 100a071:	5d                   	pop    ebp
 100a072:	c3                   	ret    

0100a073 <localtime>:
localtime():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:116

struct tm *localtime(const time_t *timer) {
 100a073:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:120
  time_t t;
  struct tm tmbuf;
  
  t = *timer - kTimeZone;
 100a076:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100a07a:	8b 00                	mov    eax,DWORD PTR [eax]
 100a07c:	2b 05 d0 97 12 00    	sub    eax,DWORD PTR ds:0x1297d0
 100a082:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:121
  return gmtime_r(&t, &tmbuf);
 100a086:	54                   	push   esp
 100a087:	8d 44 24 30          	lea    eax,[esp+0x30]
 100a08b:	50                   	push   eax
 100a08c:	e8 65 fd ff ff       	call   1009df6 <gmtime_r>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:122
}
 100a091:	83 c4 38             	add    esp,0x38
 100a094:	c3                   	ret    

0100a095 <localtime_r>:
localtime_r():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:124

struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
 100a095:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:127
  time_t t;

  t = *timer - kTimeZone;
 100a098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 100a09c:	8b 00                	mov    eax,DWORD PTR [eax]
 100a09e:	2b 05 d0 97 12 00    	sub    eax,DWORD PTR ds:0x1297d0
 100a0a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:128
  return gmtime_r(&t, tmbuf);
 100a0a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100a0ac:	8d 44 24 10          	lea    eax,[esp+0x10]
 100a0b0:	50                   	push   eax
 100a0b1:	e8 40 fd ff ff       	call   1009df6 <gmtime_r>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:129
}
 100a0b6:	83 c4 18             	add    esp,0x18
 100a0b9:	c3                   	ret    

0100a0ba <mktime>:
mktime():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:131

time_t mktime(struct tm *tmbuf) {
 100a0ba:	55                   	push   ebp
 100a0bb:	57                   	push   edi
 100a0bc:	56                   	push   esi
 100a0bd:	53                   	push   ebx
 100a0be:	83 ec 20             	sub    esp,0x20
 100a0c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:139
  int yday, month;
  /*unsigned*/ long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
 100a0c5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
 100a0c7:	ba 89 88 88 88       	mov    edx,0x88888889
 100a0cc:	89 c8                	mov    eax,ecx
 100a0ce:	f7 ea                	imul   edx
 100a0d0:	8d 04 0a             	lea    eax,[edx+ecx*1]
 100a0d3:	c1 f8 05             	sar    eax,0x5
 100a0d6:	89 ca                	mov    edx,ecx
 100a0d8:	c1 fa 1f             	sar    edx,0x1f
 100a0db:	29 d0                	sub    eax,edx
 100a0dd:	89 c2                	mov    edx,eax
 100a0df:	03 53 04             	add    edx,DWORD PTR [ebx+0x4]
 100a0e2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:140
  tmbuf->tm_sec %= 60;
 100a0e5:	6b c0 3c             	imul   eax,eax,0x3c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:141
  if (tmbuf->tm_sec < 0) {
 100a0e8:	29 c1                	sub    ecx,eax
 100a0ea:	78 04                	js     100a0f0 <mktime+0x36>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:140
  /*unsigned*/ long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
  tmbuf->tm_sec %= 60;
 100a0ec:	89 0b                	mov    DWORD PTR [ebx],ecx
 100a0ee:	eb 0b                	jmp    100a0fb <mktime+0x41>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:142
  if (tmbuf->tm_sec < 0) {
    tmbuf->tm_sec += 60;
 100a0f0:	83 c1 3c             	add    ecx,0x3c
 100a0f3:	89 0b                	mov    DWORD PTR [ebx],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:143
    tmbuf->tm_min--;
 100a0f5:	83 ea 01             	sub    edx,0x1
 100a0f8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:145
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
 100a0fb:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
 100a0fe:	ba 89 88 88 88       	mov    edx,0x88888889
 100a103:	89 c8                	mov    eax,ecx
 100a105:	f7 ea                	imul   edx
 100a107:	8d 04 0a             	lea    eax,[edx+ecx*1]
 100a10a:	c1 f8 05             	sar    eax,0x5
 100a10d:	89 ca                	mov    edx,ecx
 100a10f:	c1 fa 1f             	sar    edx,0x1f
 100a112:	29 d0                	sub    eax,edx
 100a114:	89 c2                	mov    edx,eax
 100a116:	03 53 08             	add    edx,DWORD PTR [ebx+0x8]
 100a119:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:146
  tmbuf->tm_min = tmbuf->tm_min % 60;
 100a11c:	6b c0 3c             	imul   eax,eax,0x3c
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:147
  if (tmbuf->tm_min < 0) {
 100a11f:	29 c1                	sub    ecx,eax
 100a121:	78 05                	js     100a128 <mktime+0x6e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:146
  if (tmbuf->tm_sec < 0) {
    tmbuf->tm_sec += 60;
    tmbuf->tm_min--;
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
  tmbuf->tm_min = tmbuf->tm_min % 60;
 100a123:	89 4b 04             	mov    DWORD PTR [ebx+0x4],ecx
 100a126:	eb 0c                	jmp    100a134 <mktime+0x7a>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:148
  if (tmbuf->tm_min < 0) {
    tmbuf->tm_min += 60;
 100a128:	83 c1 3c             	add    ecx,0x3c
 100a12b:	89 4b 04             	mov    DWORD PTR [ebx+0x4],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:149
    tmbuf->tm_hour--;
 100a12e:	83 ea 01             	sub    edx,0x1
 100a131:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:151
  }
  day = tmbuf->tm_hour / 24;
 100a134:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
 100a137:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
 100a13c:	89 f0                	mov    eax,esi
 100a13e:	f7 ea                	imul   edx
 100a140:	c1 fa 02             	sar    edx,0x2
 100a143:	89 f0                	mov    eax,esi
 100a145:	c1 f8 1f             	sar    eax,0x1f
 100a148:	89 d1                	mov    ecx,edx
 100a14a:	29 c1                	sub    ecx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:152
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
 100a14c:	8d 04 49             	lea    eax,[ecx+ecx*2]
 100a14f:	c1 e0 03             	shl    eax,0x3
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:153
  if (tmbuf->tm_hour < 0) {
 100a152:	29 c6                	sub    esi,eax
 100a154:	78 05                	js     100a15b <mktime+0xa1>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:152
  if (tmbuf->tm_min < 0) {
    tmbuf->tm_min += 60;
    tmbuf->tm_hour--;
  }
  day = tmbuf->tm_hour / 24;
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
 100a156:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
 100a159:	eb 09                	jmp    100a164 <mktime+0xaa>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:154
  if (tmbuf->tm_hour < 0) {
    tmbuf->tm_hour += 24;
 100a15b:	83 c6 18             	add    esi,0x18
 100a15e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:155
    day--;
 100a161:	83 e9 01             	sub    ecx,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:157
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
 100a164:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
 100a167:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
 100a16c:	89 f0                	mov    eax,esi
 100a16e:	f7 ea                	imul   edx
 100a170:	d1 fa                	sar    edx,1
 100a172:	89 f0                	mov    eax,esi
 100a174:	c1 f8 1f             	sar    eax,0x1f
 100a177:	29 c2                	sub    edx,eax
 100a179:	89 d0                	mov    eax,edx
 100a17b:	03 43 14             	add    eax,DWORD PTR [ebx+0x14]
 100a17e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:158
  tmbuf->tm_mon %= 12;
 100a181:	8d 14 52             	lea    edx,[edx+edx*2]
 100a184:	c1 e2 02             	shl    edx,0x2
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:159
  if (tmbuf->tm_mon < 0) {
 100a187:	29 d6                	sub    esi,edx
 100a189:	78 05                	js     100a190 <mktime+0xd6>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:158
  if (tmbuf->tm_hour < 0) {
    tmbuf->tm_hour += 24;
    day--;
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
  tmbuf->tm_mon %= 12;
 100a18b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
 100a18e:	eb 0c                	jmp    100a19c <mktime+0xe2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:160
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
 100a190:	83 c6 0c             	add    esi,0xc
 100a193:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:161
    tmbuf->tm_year--;
 100a196:	83 e8 01             	sub    eax,0x1
 100a199:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:163
  }
  day += (tmbuf->tm_mday - 1);
 100a19c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 100a19f:	8d 6c 01 ff          	lea    ebp,[ecx+eax*1-0x1]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:164
  while (day < 0) {
 100a1a3:	85 ed                	test   ebp,ebp
 100a1a5:	0f 89 f1 00 00 00    	jns    100a29c <mktime+0x1e2>
 100a1ab:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:169
    if(--tmbuf->tm_mon < 0) {
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
 100a1ae:	bf 1f 85 eb 51       	mov    edi,0x51eb851f
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:165
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
    if(--tmbuf->tm_mon < 0) {
 100a1b3:	83 ee 01             	sub    esi,0x1
 100a1b6:	79 09                	jns    100a1c1 <mktime+0x107>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:166
      tmbuf->tm_year--;
 100a1b8:	83 6b 14 01          	sub    DWORD PTR [ebx+0x14],0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:167
      tmbuf->tm_mon = 11;
 100a1bc:	be 0b 00 00 00       	mov    esi,0xb
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:169
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
 100a1c1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
 100a1c4:	b8 00 00 00 00       	mov    eax,0x0
 100a1c9:	f6 c1 03             	test   cl,0x3
 100a1cc:	75 3c                	jne    100a20a <mktime+0x150>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:169 (discriminator 1)
 100a1ce:	81 c1 6c 07 00 00    	add    ecx,0x76c
 100a1d4:	89 c8                	mov    eax,ecx
 100a1d6:	f7 ef                	imul   edi
 100a1d8:	c1 fa 05             	sar    edx,0x5
 100a1db:	89 c8                	mov    eax,ecx
 100a1dd:	c1 f8 1f             	sar    eax,0x1f
 100a1e0:	29 c2                	sub    edx,eax
 100a1e2:	6b d2 64             	imul   edx,edx,0x64
 100a1e5:	b8 01 00 00 00       	mov    eax,0x1
 100a1ea:	39 d1                	cmp    ecx,edx
 100a1ec:	75 1c                	jne    100a20a <mktime+0x150>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:169 (discriminator 4)
 100a1ee:	89 c8                	mov    eax,ecx
 100a1f0:	f7 ef                	imul   edi
 100a1f2:	c1 fa 07             	sar    edx,0x7
 100a1f5:	89 c8                	mov    eax,ecx
 100a1f7:	c1 f8 1f             	sar    eax,0x1f
 100a1fa:	29 c2                	sub    edx,eax
 100a1fc:	69 d2 90 01 00 00    	imul   edx,edx,0x190
 100a202:	39 d1                	cmp    ecx,edx
 100a204:	0f 94 c0             	sete   al
 100a207:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:169 (discriminator 8)
 100a20a:	8d 14 00             	lea    edx,[eax+eax*1]
 100a20d:	01 d0                	add    eax,edx
 100a20f:	8d 04 86             	lea    eax,[esi+eax*4]
 100a212:	03 2c 85 80 8b 02 01 	add    ebp,DWORD PTR [eax*4+0x1028b80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:164 (discriminator 8)
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
 100a219:	85 ed                	test   ebp,ebp
 100a21b:	78 96                	js     100a1b3 <mktime+0xf9>
 100a21d:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
 100a220:	eb 7a                	jmp    100a29c <mktime+0x1e2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172 (discriminator 1)
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
 100a222:	8d be 6c 07 00 00    	lea    edi,[esi+0x76c]
 100a228:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
 100a22d:	f7 ef                	imul   edi
 100a22f:	c1 fa 05             	sar    edx,0x5
 100a232:	89 f8                	mov    eax,edi
 100a234:	c1 f8 1f             	sar    eax,0x1f
 100a237:	29 c2                	sub    edx,eax
 100a239:	6b d2 64             	imul   edx,edx,0x64
 100a23c:	39 d7                	cmp    edi,edx
 100a23e:	75 27                	jne    100a267 <mktime+0x1ad>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172 (discriminator 4)
 100a240:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
 100a245:	f7 ef                	imul   edi
 100a247:	c1 fa 07             	sar    edx,0x7
 100a24a:	89 f8                	mov    eax,edi
 100a24c:	c1 f8 1f             	sar    eax,0x1f
 100a24f:	29 c2                	sub    edx,eax
 100a251:	69 d2 90 01 00 00    	imul   edx,edx,0x190
 100a257:	b8 01 00 00 00       	mov    eax,0x1
 100a25c:	39 d7                	cmp    edi,edx
 100a25e:	74 13                	je     100a273 <mktime+0x1b9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172 (discriminator 6)
 100a260:	b8 00 00 00 00       	mov    eax,0x0
 100a265:	eb 0c                	jmp    100a273 <mktime+0x1b9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172
 100a267:	b8 01 00 00 00       	mov    eax,0x1
 100a26c:	eb 05                	jmp    100a273 <mktime+0x1b9>
 100a26e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172 (discriminator 8)
 100a273:	8d 14 00             	lea    edx,[eax+eax*1]
 100a276:	01 d0                	add    eax,edx
 100a278:	8d 04 81             	lea    eax,[ecx+eax*4]
 100a27b:	2b 2c 85 80 8b 02 01 	sub    ebp,DWORD PTR [eax*4+0x1028b80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:173 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
 100a282:	83 c1 01             	add    ecx,0x1
 100a285:	83 f9 0c             	cmp    ecx,0xc
 100a288:	74 05                	je     100a28f <mktime+0x1d5>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:173
 100a28a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
 100a28d:	eb 0d                	jmp    100a29c <mktime+0x1e2>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:174
      tmbuf->tm_mon = 0;
 100a28f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:175
      tmbuf->tm_year++;
 100a296:	83 c6 01             	add    esi,0x1
 100a299:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
 100a29c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
 100a29f:	f7 c6 03 00 00 00    	test   esi,0x3
 100a2a5:	0f 85 ad 02 00 00    	jne    100a558 <mktime+0x49e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:171 (discriminator 1)
 100a2ab:	8d 8e 6c 07 00 00    	lea    ecx,[esi+0x76c]
 100a2b1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
 100a2b6:	f7 e9                	imul   ecx
 100a2b8:	c1 fa 05             	sar    edx,0x5
 100a2bb:	89 c8                	mov    eax,ecx
 100a2bd:	c1 f8 1f             	sar    eax,0x1f
 100a2c0:	29 c2                	sub    edx,eax
 100a2c2:	6b d2 64             	imul   edx,edx,0x64
 100a2c5:	39 d1                	cmp    ecx,edx
 100a2c7:	0f 85 b5 02 00 00    	jne    100a582 <mktime+0x4c8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:171 (discriminator 4)
 100a2cd:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
 100a2d2:	f7 e9                	imul   ecx
 100a2d4:	c1 fa 07             	sar    edx,0x7
 100a2d7:	89 c8                	mov    eax,ecx
 100a2d9:	c1 f8 1f             	sar    eax,0x1f
 100a2dc:	29 c2                	sub    edx,eax
 100a2de:	69 d2 90 01 00 00    	imul   edx,edx,0x190
 100a2e4:	39 d1                	cmp    ecx,edx
 100a2e6:	0f 84 b6 02 00 00    	je     100a5a2 <mktime+0x4e8>
 100a2ec:	e9 7c 02 00 00       	jmp    100a56d <mktime+0x4b3>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:178
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
 100a2f1:	8d 45 01             	lea    eax,[ebp+0x1]
 100a2f4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:180
  year = EPOCH_YR;
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
 100a2f7:	83 fe 45             	cmp    esi,0x45
 100a2fa:	0f 8e 51 02 00 00    	jle    100a551 <mktime+0x497>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:190
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
 100a300:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
 100a306:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:192

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
 100a30a:	8d 46 ba             	lea    eax,[esi-0x46]
 100a30d:	89 c7                	mov    edi,eax
 100a30f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:183
  tmbuf->tm_mday = day + 1;
  year = EPOCH_YR;
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
  seconds = 0;
  day = 0;                      // Means days since day 0 now
  overflow = 0;
 100a313:	3d 7c c6 59 00       	cmp    eax,0x59c67c
 100a318:	0f 9f c0             	setg   al
 100a31b:	0f b6 c0             	movzx  eax,al
 100a31e:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:193
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
  day = (tm_year - year) * 365;
 100a320:	89 f8                	mov    eax,edi
 100a322:	69 ff 6d 01 00 00    	imul   edi,edi,0x16d
 100a328:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:194
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
 100a32c:	8d 7e bd             	lea    edi,[esi-0x43]
 100a32f:	85 c0                	test   eax,eax
 100a331:	0f 49 f8             	cmovns edi,eax
 100a334:	c1 ff 02             	sar    edi,0x2
 100a337:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
 100a33c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
 100a340:	8d 77 01             	lea    esi,[edi+0x1]
 100a343:	89 14 24             	mov    DWORD PTR [esp],edx
 100a346:	83 ca 02             	or     edx,0x2
 100a349:	39 f0                	cmp    eax,esi
 100a34b:	89 d6                	mov    esi,edx
 100a34d:	0f 4d 34 24          	cmovge esi,DWORD PTR [esp]
 100a351:	89 34 24             	mov    DWORD PTR [esp],esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:195
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
 100a354:	b8 00 00 00 00       	mov    eax,0x0
 100a359:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 100a35d:	89 d6                	mov    esi,edx
 100a35f:	83 e6 03             	and    esi,0x3
 100a362:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
 100a366:	74 19                	je     100a381 <mktime+0x2c7>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:195 (discriminator 1)
 100a368:	89 d6                	mov    esi,edx
 100a36a:	c1 fa 1f             	sar    edx,0x1f
 100a36d:	c1 ea 1e             	shr    edx,0x1e
 100a370:	8d 04 16             	lea    eax,[esi+edx*1]
 100a373:	83 e0 03             	and    eax,0x3
 100a376:	29 d0                	sub    eax,edx
 100a378:	83 f8 01             	cmp    eax,0x1
 100a37b:	0f 9e c0             	setle  al
 100a37e:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:195 (discriminator 6)
 100a381:	01 c7                	add    edi,eax
 100a383:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
 100a387:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:196 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
 100a38b:	bf 1f 85 eb 51       	mov    edi,0x51eb851f
 100a390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100a394:	f7 ef                	imul   edi
 100a396:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
 100a39a:	89 d0                	mov    eax,edx
 100a39c:	c1 f8 05             	sar    eax,0x5
 100a39f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 100a3a3:	89 d6                	mov    esi,edx
 100a3a5:	c1 fe 1f             	sar    esi,0x1f
 100a3a8:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
 100a3ac:	29 f0                	sub    eax,esi
 100a3ae:	6b c0 64             	imul   eax,eax,0x64
 100a3b1:	29 c2                	sub    edx,eax
 100a3b3:	89 d0                	mov    eax,edx
 100a3b5:	0f 95 44 24 04       	setne  BYTE PTR [esp+0x4]
 100a3ba:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
 100a3bf:	83 f8 45             	cmp    eax,0x45
 100a3c2:	0f 9e c0             	setle  al
 100a3c5:	0f b6 c0             	movzx  eax,al
 100a3c8:	89 c6                	mov    esi,eax
 100a3ca:	21 d6                	and    esi,edx
 100a3cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 100a3d0:	f7 ef                	imul   edi
 100a3d2:	89 d7                	mov    edi,edx
 100a3d4:	c1 ff 05             	sar    edi,0x5
 100a3d7:	89 f8                	mov    eax,edi
 100a3d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
 100a3dd:	c1 ff 1f             	sar    edi,0x1f
 100a3e0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
 100a3e4:	29 f8                	sub    eax,edi
 100a3e6:	01 c6                	add    esi,eax
 100a3e8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 100a3ec:	29 f7                	sub    edi,esi
 100a3ee:	89 fe                	mov    esi,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:197 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
 100a3f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 100a3f4:	c1 f8 07             	sar    eax,0x7
 100a3f7:	89 c7                	mov    edi,eax
 100a3f9:	2b 7c 24 18          	sub    edi,DWORD PTR [esp+0x18]
 100a3fd:	69 c7 90 01 00 00    	imul   eax,edi,0x190
 100a403:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
 100a407:	29 c7                	sub    edi,eax
 100a409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
 100a40d:	81 ff 71 01 00 00    	cmp    edi,0x171
 100a413:	0f 9e 44 24 10       	setle  BYTE PTR [esp+0x10]
 100a418:	85 ff                	test   edi,edi
 100a41a:	0f 95 c0             	setne  al
 100a41d:	0f b6 c0             	movzx  eax,al
 100a420:	23 44 24 10          	and    eax,DWORD PTR [esp+0x10]
 100a424:	c1 fa 07             	sar    edx,0x7
 100a427:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
 100a42b:	01 c2                	add    edx,eax
 100a42d:	8d 04 32             	lea    eax,[edx+esi*1]
 100a430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:200 (discriminator 6)

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
 100a434:	85 c9                	test   ecx,ecx
 100a436:	7e 46                	jle    100a47e <mktime+0x3c4>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:200
 100a438:	be 00 00 00 00       	mov    esi,0x0
 100a43d:	bf 00 00 00 00       	mov    edi,0x0
 100a442:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
 100a446:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:201
    yday += _ytab[LEAPYEAR(tm_year)][month];
 100a44a:	b8 00 00 00 00       	mov    eax,0x0
 100a44f:	85 ed                	test   ebp,ebp
 100a451:	75 0f                	jne    100a462 <mktime+0x3a8>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:201 (discriminator 4)
 100a453:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
 100a458:	0f 94 c0             	sete   al
 100a45b:	0a 44 24 04          	or     al,BYTE PTR [esp+0x4]
 100a45f:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:201 (discriminator 8)
 100a462:	8d 14 00             	lea    edx,[eax+eax*1]
 100a465:	01 d0                	add    eax,edx
 100a467:	8d 04 86             	lea    eax,[esi+eax*4]
 100a46a:	03 3c 85 80 8b 02 01 	add    edi,DWORD PTR [eax*4+0x1028b80]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:202 (discriminator 8)
    month++;
 100a471:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:200 (discriminator 8)
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
 100a474:	39 ce                	cmp    esi,ecx
 100a476:	75 d2                	jne    100a44a <mktime+0x390>
 100a478:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
 100a47c:	eb 05                	jmp    100a483 <mktime+0x3c9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:199
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
 100a47e:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:204
  while (month < tmbuf->tm_mon) {
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
 100a483:	01 ef                	add    edi,ebp
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:205
  if (day + yday < 0) overflow|=4;
 100a485:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
 100a489:	01 fe                	add    esi,edi
 100a48b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
 100a48e:	89 c8                	mov    eax,ecx
 100a490:	83 c8 04             	or     eax,0x4
 100a493:	85 f6                	test   esi,esi
 100a495:	0f 49 c1             	cmovns eax,ecx
 100a498:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:208
  day += yday;

  tmbuf->tm_yday = yday;
 100a49a:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:209
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
 100a49d:	8d 4e 04             	lea    ecx,[esi+0x4]
 100a4a0:	ba 93 24 49 92       	mov    edx,0x92492493
 100a4a5:	89 c8                	mov    eax,ecx
 100a4a7:	f7 ea                	imul   edx
 100a4a9:	01 ca                	add    edx,ecx
 100a4ab:	c1 fa 02             	sar    edx,0x2
 100a4ae:	89 c8                	mov    eax,ecx
 100a4b0:	c1 f8 1f             	sar    eax,0x1f
 100a4b3:	29 c2                	sub    edx,eax
 100a4b5:	8d 04 d5 00 00 00 00 	lea    eax,[edx*8+0x0]
 100a4bc:	29 d0                	sub    eax,edx
 100a4be:	29 c1                	sub    ecx,eax
 100a4c0:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:211

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
 100a4c3:	6b 4b 08 3c          	imul   ecx,DWORD PTR [ebx+0x8],0x3c
 100a4c7:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
 100a4ca:	6b c9 3c             	imul   ecx,ecx,0x3c
 100a4cd:	03 0b                	add    ecx,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:213

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
 100a4cf:	bf ff ff ff 7f       	mov    edi,0x7fffffff
 100a4d4:	29 cf                	sub    edi,ecx
 100a4d6:	ba 07 45 2e c2       	mov    edx,0xc22e4507
 100a4db:	89 f8                	mov    eax,edi
 100a4dd:	f7 ea                	imul   edx
 100a4df:	01 fa                	add    edx,edi
 100a4e1:	c1 fa 10             	sar    edx,0x10
 100a4e4:	c1 ff 1f             	sar    edi,0x1f
 100a4e7:	29 fa                	sub    edx,edi
 100a4e9:	89 e8                	mov    eax,ebp
 100a4eb:	83 c8 08             	or     eax,0x8
 100a4ee:	39 d6                	cmp    esi,edx
 100a4f0:	0f 4e c5             	cmovle eax,ebp
 100a4f3:	89 04 24             	mov    DWORD PTR [esp],eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:214
  seconds += day * SECS_DAY;
 100a4f6:	69 f6 80 51 01 00    	imul   esi,esi,0x15180
 100a4fc:	01 f1                	add    ecx,esi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:217

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
 100a4fe:	a1 d0 97 12 00       	mov    eax,ds:0x1297d0
 100a503:	85 c0                	test   eax,eax
 100a505:	7e 0b                	jle    100a512 <mktime+0x458>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:217 (discriminator 1)
 100a507:	ba ff ff ff 7f       	mov    edx,0x7fffffff
 100a50c:	29 c2                	sub    edx,eax
 100a50e:	39 d1                	cmp    ecx,edx
 100a510:	7f 0c                	jg     100a51e <mktime+0x464>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:217 (discriminator 3)
 100a512:	85 c0                	test   eax,eax
 100a514:	79 0c                	jns    100a522 <mktime+0x468>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:218
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
 100a516:	89 c2                	mov    edx,eax
 100a518:	f7 da                	neg    edx
 100a51a:	39 d1                	cmp    ecx,edx
 100a51c:	7d 04                	jge    100a522 <mktime+0x468>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:219
          overflow|=16;
 100a51e:	83 0c 24 10          	or     DWORD PTR [esp],0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:221
  }
  seconds += kTimeZone;
 100a522:	01 c1                	add    ecx,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:224

  if (tmbuf->tm_isdst) {
    dst = _dstbias;
 100a524:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
 100a528:	ba 00 00 00 00       	mov    edx,0x0
 100a52d:	0f 45 15 68 99 12 00 	cmovne edx,DWORD PTR ds:0x129968
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:229
  } else {
    dst = 0;
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
 100a534:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 100a537:	89 d8                	mov    eax,ebx
 100a539:	83 c8 20             	or     eax,0x20
 100a53c:	39 ca                	cmp    edx,ecx
 100a53e:	0f 4e c3             	cmovle eax,ebx
 100a541:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:232
  seconds -= dst;

  if (overflow) return (time_t) overflow-2;
 100a543:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:235

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
 100a545:	29 d1                	sub    ecx,edx
 100a547:	83 e8 02             	sub    eax,0x2
 100a54a:	85 ff                	test   edi,edi
 100a54c:	0f 44 c1             	cmove  eax,ecx
 100a54f:	eb 62                	jmp    100a5b3 <mktime+0x4f9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:180
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
  year = EPOCH_YR;
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
 100a551:	b8 19 fc ff ff       	mov    eax,0xfffffc19
 100a556:	eb 5b                	jmp    100a5b3 <mktime+0x4f9>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
 100a558:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
 100a55b:	3b 2c 8d 80 8b 02 01 	cmp    ebp,DWORD PTR [ecx*4+0x1028b80]
 100a562:	0f 8d f8 fc ff ff    	jge    100a260 <mktime+0x1a6>
 100a568:	e9 84 fd ff ff       	jmp    100a2f1 <mktime+0x237>
 100a56d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
 100a570:	3b 2c 8d 80 8b 02 01 	cmp    ebp,DWORD PTR [ecx*4+0x1028b80]
 100a577:	0f 8d a5 fc ff ff    	jge    100a222 <mktime+0x168>
 100a57d:	e9 6f fd ff ff       	jmp    100a2f1 <mktime+0x237>
 100a582:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
 100a585:	3b 2c 8d b0 8b 02 01 	cmp    ebp,DWORD PTR [ecx*4+0x1028bb0]
 100a58c:	0f 8d dc fc ff ff    	jge    100a26e <mktime+0x1b4>
 100a592:	e9 5a fd ff ff       	jmp    100a2f1 <mktime+0x237>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:172
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
 100a597:	8d be 6c 07 00 00    	lea    edi,[esi+0x76c]
 100a59d:	e9 9e fc ff ff       	jmp    100a240 <mktime+0x186>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
 100a5a2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
 100a5a5:	3b 2c 8d b0 8b 02 01 	cmp    ebp,DWORD PTR [ecx*4+0x1028bb0]
 100a5ac:	7d e9                	jge    100a597 <mktime+0x4dd>
 100a5ae:	e9 3e fd ff ff       	jmp    100a2f1 <mktime+0x237>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:236

  if (overflow) return (time_t) overflow-2;

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
}
 100a5b3:	83 c4 20             	add    esp,0x20
 100a5b6:	5b                   	pop    ebx
 100a5b7:	5e                   	pop    esi
 100a5b8:	5f                   	pop    edi
 100a5b9:	5d                   	pop    ebp
 100a5ba:	c3                   	ret    

0100a5bb <_strdate>:
_strdate():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:241

#if !defined(KERNEL) && !defined(OS_LIB)


char *_strdate(char *s) {
 100a5bb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:244
  time_t now;

  time(&now);
 100a5be:	8d 44 24 0c          	lea    eax,[esp+0xc]
 100a5c2:	50                   	push   eax
 100a5c3:	e8 1c f8 ff ff       	call   1009de4 <time>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:248
  //fix me!
  //  strftime(s, 9, "%D", localtime(&now));
  return s;
}
 100a5c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 100a5cc:	83 c4 14             	add    esp,0x14
 100a5cf:	c3                   	ret    

0100a5d0 <_strtime>:
_strtime():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:250

char *_strtime(char *s) {
 100a5d0:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:253
  time_t now;

  time(&now);
 100a5d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
 100a5d7:	50                   	push   eax
 100a5d8:	e8 07 f8 ff ff       	call   1009de4 <time>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:257
  //fix me
  //  strftime(s, 9, "%T", localtime(&now));
  return s;
}
 100a5dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
 100a5e1:	83 c4 14             	add    esp,0x14
 100a5e4:	c3                   	ret    

0100a5e5 <waitTicks>:
waitTicks():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:260

void __attribute__((noinline))waitTicks(int TicksToWait)
{
 100a5e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:262
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
 100a5e9:	85 c0                	test   eax,eax
 100a5eb:	74 09                	je     100a5f6 <waitTicks+0x11>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:267 (discriminator 1)
        return;
    //printd(DEBUG_TIMER,"ttw=%08X", TicksToWait);
    do
    {
        __asm("sti\nhlt\n");
 100a5ed:	fb                   	sti    
 100a5ee:	f4                   	hlt    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:268 (discriminator 1)
        TicksToWait--;
 100a5ef:	83 e8 01             	sub    eax,0x1
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:269 (discriminator 1)
    } while (TicksToWait>0);
 100a5f2:	85 c0                	test   eax,eax
 100a5f4:	7f f7                	jg     100a5ed <waitTicks+0x8>
 100a5f6:	f3 c3                	repz ret 

0100a5f8 <wait>:
wait():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:274
    return;
}

void /*__attribute__((noinline))*/wait(int msToWait)
{
 100a5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:277
    //printk("msToWait=%u, ticksperms=%u, ticksToWait=%u",msToWait, kTicksPerMS, msToWait*kTicksPerMS);
    //STOPHERE2
    waitTicks(msToWait/kTicksPerMS);
 100a5fc:	99                   	cdq    
 100a5fd:	f7 3d c4 97 12 00    	idiv   DWORD PTR ds:0x1297c4
 100a603:	50                   	push   eax
 100a604:	e8 dc ff ff ff       	call   100a5e5 <waitTicks>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:278
}
 100a609:	83 c4 04             	add    esp,0x4
 100a60c:	c3                   	ret    

0100a60d <wait3>:
wait3():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:281

void wait3(double msToWait)
{
 100a60d:	56                   	push   esi
 100a60e:	53                   	push   ebx
 100a60f:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:282
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);
 100a612:	8b 0d a4 97 12 00    	mov    ecx,DWORD PTR ds:0x1297a4
 100a618:	8b 19                	mov    ebx,DWORD PTR [ecx]
 100a61a:	8b 35 c0 97 12 00    	mov    esi,DWORD PTR ds:0x1297c0
 100a620:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
 100a624:	b8 e8 03 00 00       	mov    eax,0x3e8
 100a629:	ba 00 00 00 00       	mov    edx,0x0
 100a62e:	f7 f6                	div    esi
 100a630:	89 04 24             	mov    DWORD PTR [esp],eax
 100a633:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 100a63a:	00 
 100a63b:	df 2c 24             	fild   QWORD PTR [esp]
 100a63e:	de f9                	fdivp  st(1),st
 100a640:	89 1c 24             	mov    DWORD PTR [esp],ebx
 100a643:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 100a64a:	00 
 100a64b:	df 2c 24             	fild   QWORD PTR [esp]
 100a64e:	de c1                	faddp  st(1),st
 100a650:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
 100a654:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
 100a658:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:284

while (endTicks > (double)*kTicksSinceStart)
 100a65c:	8b 01                	mov    eax,DWORD PTR [ecx]
 100a65e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
 100a662:	89 04 24             	mov    DWORD PTR [esp],eax
 100a665:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 100a66c:	00 
 100a66d:	df 2c 24             	fild   QWORD PTR [esp]
 100a670:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
 100a674:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
 100a678:	d9 c9                	fxch   st(1)
 100a67a:	df e9                	fucomip st,st(1)
 100a67c:	dd d8                	fstp   st(0)
 100a67e:	76 26                	jbe    100a6a6 <wait3+0x99>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:285
    {__asm__("sti\n hlt\n");}
 100a680:	fb                   	sti    
 100a681:	f4                   	hlt    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:284

void wait3(double msToWait)
{
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);

while (endTicks > (double)*kTicksSinceStart)
 100a682:	8b 01                	mov    eax,DWORD PTR [ecx]
 100a684:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
 100a688:	89 04 24             	mov    DWORD PTR [esp],eax
 100a68b:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 100a692:	00 
 100a693:	df 2c 24             	fild   QWORD PTR [esp]
 100a696:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
 100a69a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
 100a69e:	d9 c9                	fxch   st(1)
 100a6a0:	df e9                	fucomip st,st(1)
 100a6a2:	dd d8                	fstp   st(0)
 100a6a4:	77 da                	ja     100a680 <wait3+0x73>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:287
    {__asm__("sti\n hlt\n");}
    
}
 100a6a6:	83 c4 24             	add    esp,0x24
 100a6a9:	5b                   	pop    ebx
 100a6aa:	5e                   	pop    esi
 100a6ab:	c3                   	ret    

0100a6ac <wait2>:
wait2():
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:290

void wait2(unsigned msToWait)
{
 100a6ac:	57                   	push   edi
 100a6ad:	56                   	push   esi
 100a6ae:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:291
    uint64_t startTicks = *kTicksSinceStart;             //25
 100a6af:	8b 1d a4 97 12 00    	mov    ebx,DWORD PTR ds:0x1297a4
 100a6b5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:292
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
 100a6b7:	8b 3d c0 97 12 00    	mov    edi,DWORD PTR ds:0x1297c0
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:294
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
    uint64_t endTicks = startTicks + totalTicksToWait;
 100a6bd:	b8 e8 03 00 00       	mov    eax,0x3e8
 100a6c2:	ba 00 00 00 00       	mov    edx,0x0
 100a6c7:	f7 f7                	div    edi
 100a6c9:	89 c6                	mov    esi,eax
 100a6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
 100a6cf:	ba 00 00 00 00       	mov    edx,0x0
 100a6d4:	f7 f6                	div    esi
 100a6d6:	89 c6                	mov    esi,eax
 100a6d8:	bf 00 00 00 00       	mov    edi,0x0
 100a6dd:	89 c8                	mov    eax,ecx
 100a6df:	ba 00 00 00 00       	mov    edx,0x0
 100a6e4:	01 f0                	add    eax,esi
 100a6e6:	11 fa                	adc    edx,edi
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:296

    if (endTicks < *kTicksSinceStart)
 100a6e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
 100a6ea:	83 fa 00             	cmp    edx,0x0
 100a6ed:	77 04                	ja     100a6f3 <wait2+0x47>
 100a6ef:	39 c8                	cmp    eax,ecx
 100a6f1:	72 17                	jb     100a70a <wait2+0x5e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
 100a6f3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
 100a6f5:	83 fa 00             	cmp    edx,0x0
 100a6f8:	77 04                	ja     100a6fe <wait2+0x52>
 100a6fa:	39 c8                	cmp    eax,ecx
 100a6fc:	76 0c                	jbe    100a70a <wait2+0x5e>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:305
    {__asm__("hlt\n");}
 100a6fe:	f4                   	hlt    
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
 100a6ff:	8b 0b                	mov    ecx,DWORD PTR [ebx]
 100a701:	83 fa 00             	cmp    edx,0x0
 100a704:	77 f8                	ja     100a6fe <wait2+0x52>
 100a706:	39 c8                	cmp    eax,ecx
 100a708:	77 f4                	ja     100a6fe <wait2+0x52>
/home/yogi/src/os/chrisOSKernel/../chrisOS/src/time.c:307
    {__asm__("hlt\n");}
    //printf("done waiting!\n");
}
 100a70a:	5b                   	pop    ebx
 100a70b:	5e                   	pop    esi
 100a70c:	5f                   	pop    edi
 100a70d:	c3                   	ret    
 100a70e:	66 90                	xchg   ax,ax

0100a710 <idt_set_gate>:
idt_set_gate():
/home/yogi/src/os/chrisOSKernel/x86idt.c:14
#include "chrisos.h"

/* Use this function to set an entry in the IDT. Alot simpler
*  than twiddling with the GDT ;) */
void idt_set_gate(struct idt_entry *idt, unsigned short sel, uint32_t base, unsigned char flags)
{
 100a710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 100a714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/x86idt.c:15
  idt->base_lo = base & 0xFFFF;
 100a718:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOSKernel/x86idt.c:16
  idt->sel = sel;
 100a71b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
 100a71f:	66 89 48 02          	mov    WORD PTR [eax+0x2],cx
/home/yogi/src/os/chrisOSKernel/x86idt.c:17
  idt->flags = flags | 0x80;
 100a723:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
 100a728:	83 c9 80             	or     ecx,0xffffff80
 100a72b:	88 48 05             	mov    BYTE PTR [eax+0x5],cl
/home/yogi/src/os/chrisOSKernel/x86idt.c:18
  idt->base_hi = (base >> 16) & 0xFFFF;}
 100a72e:	c1 ea 10             	shr    edx,0x10
 100a731:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
 100a735:	c3                   	ret    

0100a736 <idt_install>:
idt_install():
/home/yogi/src/os/chrisOSKernel/x86idt.c:22

/* Installs the IDT */
void idt_install(struct idt_ptr* idtp)
{
 100a736:	83 ec 14             	sub    esp,0x14
 100a739:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/x86idt.c:24
    /* Sets the special IDT pointer up, just like in 'gdt.c' */
    idtp->limit = (sizeof (struct idt_entry) * 256) - 1;
 100a73d:	66 c7 00 ff 07       	mov    WORD PTR [eax],0x7ff
/home/yogi/src/os/chrisOSKernel/x86idt.c:25
    idtp->base = (int)IDT_TABLE_ADDRESS;
 100a742:	c7 40 02 00 30 16 00 	mov    DWORD PTR [eax+0x2],0x163000
/home/yogi/src/os/chrisOSKernel/x86idt.c:33
    //memset(&idt, 0, sizeof(struct idt_entry) * 256);

    /* Add any new ISRs to the IDT here using idt_set_gate */

    /* Points the processor's internal register to the new IDT */
    idt_load((uint64_t)((uint64_t)(idtp->limit)<<32 | idtp->base));
 100a749:	68 ff 07 00 00       	push   0x7ff
 100a74e:	68 00 30 16 00       	push   0x163000
 100a753:	e8 46 28 00 00       	call   100cf9e <idt_load>
/home/yogi/src/os/chrisOSKernel/x86idt.c:34
}
 100a758:	83 c4 1c             	add    esp,0x1c
 100a75b:	c3                   	ret    

0100a75c <kbd_handler_generic>:
kbd_handler_generic():
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:38
    kbd_handler_generic();
    return;
}

void kbd_handler_generic()
{
 100a75c:	53                   	push   ebx
 100a75d:	83 ec 08             	sub    esp,0x8
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 100a760:	e4 60                	in     al,0x60
kbd_handler_generic():
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:44
    unsigned char lKeyControlVal=0;
    unsigned char rawKey=0;
    unsigned char translatedKeypress=0;
   
    rawKey = inb(KEYB_DATA_PORT);
    kKeyChar = rawKey;//& 0x80;
 100a762:	a2 84 8c 07 01       	mov    ds:0x1078c84,al
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:46

    __asm__("cli\n");
 100a767:	fa                   	cli    
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:48
    
    switch(rawKey)  
 100a768:	3c 9d                	cmp    al,0x9d
 100a76a:	74 44                	je     100a7b0 <kbd_handler_generic+0x54>
 100a76c:	3c 9d                	cmp    al,0x9d
 100a76e:	77 0e                	ja     100a77e <kbd_handler_generic+0x22>
 100a770:	3c 2a                	cmp    al,0x2a
 100a772:	74 18                	je     100a78c <kbd_handler_generic+0x30>
 100a774:	3c 38                	cmp    al,0x38
 100a776:	74 44                	je     100a7bc <kbd_handler_generic+0x60>
 100a778:	3c 1d                	cmp    al,0x1d
 100a77a:	75 6e                	jne    100a7ea <kbd_handler_generic+0x8e>
 100a77c:	eb 26                	jmp    100a7a4 <kbd_handler_generic+0x48>
 100a77e:	3c b8                	cmp    al,0xb8
 100a780:	74 46                	je     100a7c8 <kbd_handler_generic+0x6c>
 100a782:	3c ba                	cmp    al,0xba
 100a784:	74 4e                	je     100a7d4 <kbd_handler_generic+0x78>
 100a786:	3c aa                	cmp    al,0xaa
 100a788:	75 60                	jne    100a7ea <kbd_handler_generic+0x8e>
 100a78a:	eb 0c                	jmp    100a798 <kbd_handler_generic+0x3c>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:50
    {
        case KEY_SHIFT_DN: kKeyStatus[INDEX_SHIFT]=1;break;
 100a78c:	c6 05 34 8c 07 01 01 	mov    BYTE PTR ds:0x1078c34,0x1
 100a793:	e9 94 01 00 00       	jmp    100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:51
        case KEY_SHIFT_UP: kKeyStatus[INDEX_SHIFT]=0;break;
 100a798:	c6 05 34 8c 07 01 00 	mov    BYTE PTR ds:0x1078c34,0x0
 100a79f:	e9 88 01 00 00       	jmp    100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:52
        case KEY_CTRL_DN: kKeyStatus[INDEX_CTRL]=1;break;
 100a7a4:	c6 05 35 8c 07 01 01 	mov    BYTE PTR ds:0x1078c35,0x1
 100a7ab:	e9 7c 01 00 00       	jmp    100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:53
        case KEY_CTRL_UP: kKeyStatus[INDEX_CTRL]=0;break;
 100a7b0:	c6 05 35 8c 07 01 00 	mov    BYTE PTR ds:0x1078c35,0x0
 100a7b7:	e9 70 01 00 00       	jmp    100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:54
        case KEY_ALT_DN: kKeyStatus[INDEX_ALT]=1;break;
 100a7bc:	c6 05 36 8c 07 01 01 	mov    BYTE PTR ds:0x1078c36,0x1
 100a7c3:	e9 64 01 00 00       	jmp    100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:55
        case KEY_ALT_UP: kKeyStatus[INDEX_ALT]=0;break;
 100a7c8:	c6 05 36 8c 07 01 00 	mov    BYTE PTR ds:0x1078c36,0x0
 100a7cf:	e9 58 01 00 00       	jmp    100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:56
        case KEY_CAPSLOCK_UP: kKeyStatus[INDEX_CAPSLOCK]=!kKeyStatus[INDEX_CAPSLOCK];break;
 100a7d4:	0f b6 05 37 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c37
 100a7db:	84 c0                	test   al,al
 100a7dd:	0f 94 c0             	sete   al
 100a7e0:	a2 37 8c 07 01       	mov    ds:0x1078c37,al
 100a7e5:	e9 42 01 00 00       	jmp    100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:64
//        case MAKE_UP: kKeyStatus[INDEX_UP]=0;break;
//        case MAKE_DOWN: kKeyStatus[INDEX_DOWN]=0;break;
       default:
//printk("%02X",rawKey);
           //changed from if rawkey & 0x80, so that keydown triggers the key being input
           if (rawKey==BREAK_RIGHT || rawKey==BREAK_LEFT || rawKey==BREAK_UP || rawKey==BREAK_DOWN)
 100a7ea:	8d 50 35             	lea    edx,[eax+0x35]
 100a7ed:	f6 c2 fd             	test   dl,0xfd
 100a7f0:	74 08                	je     100a7fa <kbd_handler_generic+0x9e>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:64 (discriminator 1)
 100a7f2:	8d 50 38             	lea    edx,[eax+0x38]
 100a7f5:	f6 c2 f7             	test   dl,0xf7
 100a7f8:	75 24                	jne    100a81e <kbd_handler_generic+0xc2>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:65
               if (kKbdBuffCurrTop<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
 100a7fa:	8b 15 60 99 12 00    	mov    edx,DWORD PTR ds:0x129960
 100a800:	81 fa 2f 25 16 00    	cmp    edx,0x16252f
 100a806:	77 16                	ja     100a81e <kbd_handler_generic+0xc2>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:65 (discriminator 1)
 100a808:	0f b6 0d 36 8c 07 01 	movzx  ecx,BYTE PTR ds:0x1078c36
 100a80f:	84 c9                	test   cl,cl
 100a811:	75 0b                	jne    100a81e <kbd_handler_generic+0xc2>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:66
                   *kKbdBuffCurrTop++=rawKey;
 100a813:	8d 4a 01             	lea    ecx,[edx+0x1]
 100a816:	89 0d 60 99 12 00    	mov    DWORD PTR ds:0x129960,ecx
 100a81c:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:67
           if (!(rawKey & 0x80))
 100a81e:	84 c0                	test   al,al
 100a820:	0f 88 06 01 00 00    	js     100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:71
           {
                //rawKey &= 0x7f;
               //printk("%02X",rawKey); 48=up, 50=down
                 if (kKeyStatus[INDEX_SHIFT] || kKeyStatus[INDEX_CAPSLOCK])
 100a826:	0f b6 15 34 8c 07 01 	movzx  edx,BYTE PTR ds:0x1078c34
 100a82d:	84 d2                	test   dl,dl
 100a82f:	75 0b                	jne    100a83c <kbd_handler_generic+0xe0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:71 (discriminator 1)
 100a831:	0f b6 15 37 8c 07 01 	movzx  edx,BYTE PTR ds:0x1078c37
 100a838:	84 d2                	test   dl,dl
 100a83a:	74 0c                	je     100a848 <kbd_handler_generic+0xec>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:73
                 {
                     translatedKeypress=keyboard_map_up[rawKey];
 100a83c:	0f b6 c0             	movzx  eax,al
 100a83f:	0f b6 98 e0 8b 02 01 	movzx  ebx,BYTE PTR [eax+0x1028be0]
 100a846:	eb 0a                	jmp    100a852 <kbd_handler_generic+0xf6>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:76
                 }
                 else
                     translatedKeypress=keyboard_map[rawKey];
 100a848:	0f b6 c0             	movzx  eax,al
 100a84b:	0f b6 98 60 8c 02 01 	movzx  ebx,BYTE PTR [eax+0x1028c60]
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:83
//                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
//                 {
//                      printf("%u, %u, %c\n",kKeyChar, rawKey, translatedKeypress);
//                 }
#endif
                if (kKeyStatus[INDEX_CTRL])
 100a852:	0f b6 05 35 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c35
 100a859:	84 c0                	test   al,al
 100a85b:	74 13                	je     100a870 <kbd_handler_generic+0x114>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:85
                {
                    printk("^");
 100a85d:	83 ec 0c             	sub    esp,0xc
 100a860:	68 31 66 06 01       	push   0x1066631
 100a865:	e8 75 f3 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:86
                    translatedKeypress-=32;
 100a86a:	83 eb 20             	sub    ebx,0x20
 100a86d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:89
                }
                //Debug
                if (kKeyStatus[INDEX_ALT] && translatedKeypress==0x6A)
 100a870:	0f b6 05 36 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c36
 100a877:	80 fb 6a             	cmp    bl,0x6a
 100a87a:	75 05                	jne    100a881 <kbd_handler_generic+0x125>
 100a87c:	84 c0                	test   al,al
 100a87e:	74 01                	je     100a881 <kbd_handler_generic+0x125>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:91
                {
                    __asm("int 0x3");
 100a880:	cc                   	int3   
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:93
                }
            if (kKeyStatus[INDEX_ALT] && kKeyStatus[INDEX_CTRL] && translatedKeypress==0xE0)
 100a881:	0f b6 05 36 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c36
 100a888:	84 c0                	test   al,al
 100a88a:	74 2f                	je     100a8bb <kbd_handler_generic+0x15f>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:93 (discriminator 1)
 100a88c:	0f b6 05 35 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c35
 100a893:	80 fb e0             	cmp    bl,0xe0
 100a896:	75 23                	jne    100a8bb <kbd_handler_generic+0x15f>
 100a898:	84 c0                	test   al,al
 100a89a:	74 1f                	je     100a8bb <kbd_handler_generic+0x15f>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:96
            {
                translatedKeypress=0;
                reboot(false);
 100a89c:	83 ec 0c             	sub    esp,0xc
 100a89f:	6a 00                	push   0x0
 100a8a1:	e8 34 ea ff ff       	call   10092da <reboot>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:98
            }
            if (kKeyStatus[INDEX_ALT])
 100a8a6:	0f b6 05 36 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c36
 100a8ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:95
                {
                    __asm("int 0x3");
                }
            if (kKeyStatus[INDEX_ALT] && kKeyStatus[INDEX_CTRL] && translatedKeypress==0xE0)
            {
                translatedKeypress=0;
 100a8b0:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:98
                reboot(false);
            }
            if (kKeyStatus[INDEX_ALT])
 100a8b5:	84 c0                	test   al,al
 100a8b7:	75 69                	jne    100a922 <kbd_handler_generic+0x1c6>
 100a8b9:	eb 71                	jmp    100a92c <kbd_handler_generic+0x1d0>
 100a8bb:	0f b6 05 36 8c 07 01 	movzx  eax,BYTE PTR ds:0x1078c36
 100a8c2:	84 c0                	test   al,al
 100a8c4:	74 66                	je     100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:100
            {
                if (translatedKeypress=='c')
 100a8c6:	80 fb 63             	cmp    bl,0x63
 100a8c9:	75 4b                	jne    100a916 <kbd_handler_generic+0x1ba>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:102
                {
                    printk("%u",*kTicksSinceStart);
 100a8cb:	a1 a4 97 12 00       	mov    eax,ds:0x1297a4
 100a8d0:	8b 00                	mov    eax,DWORD PTR [eax]
 100a8d2:	83 ec 08             	sub    esp,0x8
 100a8d5:	50                   	push   eax
 100a8d6:	68 33 66 06 01       	push   0x1066633
 100a8db:	e8 ff f2 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:103
                    printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
 100a8e0:	8b 0d 38 97 12 00    	mov    ecx,DWORD PTR ds:0x129738
 100a8e6:	8b 15 3c 97 12 00    	mov    edx,DWORD PTR ds:0x12973c
 100a8ec:	a1 30 97 12 00       	mov    eax,ds:0x129730
 100a8f1:	83 c4 10             	add    esp,0x10
 100a8f4:	25 00 02 00 00       	and    eax,0x200
 100a8f9:	83 f8 01             	cmp    eax,0x1
 100a8fc:	19 c0                	sbb    eax,eax
 100a8fe:	83 e0 20             	and    eax,0x20
 100a901:	83 c0 49             	add    eax,0x49
 100a904:	51                   	push   ecx
 100a905:	52                   	push   edx
 100a906:	50                   	push   eax
 100a907:	68 36 66 06 01       	push   0x1066636
 100a90c:	e8 ce f2 ff ff       	call   1009bdf <printk>
 100a911:	83 c4 10             	add    esp,0x10
 100a914:	eb 16                	jmp    100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:116
                    printk("The time is currently %s", &currTime);
                    cursorMoveTo(65,SYS_VGA_HEIGHT-1);
                    printk("ticks=%d", *kTicksSinceStart);
                    cursorRestorePosition();
                }
*/                if (translatedKeypress=='d')
 100a916:	80 fb 64             	cmp    bl,0x64
 100a919:	75 07                	jne    100a922 <kbd_handler_generic+0x1c6>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:118
                {
                    printDumpedRegs();
 100a91b:	e8 42 e7 ff ff       	call   1009062 <printDumpedRegs>
 100a920:	eb 0a                	jmp    100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:120
                }
                if (translatedKeypress=='e')
 100a922:	80 fb 65             	cmp    bl,0x65
 100a925:	75 05                	jne    100a92c <kbd_handler_generic+0x1d0>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:122
                {
                    dumpKernelAddresses();
 100a927:	e8 ef e9 ff ff       	call   100931b <dumpKernelAddresses>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 100a92c:	e4 61                	in     al,0x61
 100a92e:	89 c2                	mov    edx,eax
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 100a930:	83 c8 82             	or     eax,0xffffff82
 100a933:	e6 61                	out    0x61,al
 100a935:	89 d0                	mov    eax,edx
 100a937:	83 e0 7f             	and    eax,0x7f
 100a93a:	83 c8 02             	or     eax,0x2
 100a93d:	e6 61                	out    0x61,al
kbd_handler_generic():
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:135
    lKeyControlVal |= 0x82;
    outb(KEYB_CTRL_PORT, lKeyControlVal);
    lKeyControlVal &= 0x7f;
    outb(KEYB_CTRL_PORT, lKeyControlVal);
    return;
}
 100a93f:	83 c4 08             	add    esp,0x8
 100a942:	5b                   	pop    ebx
 100a943:	c3                   	ret    

0100a944 <ih_keyboard_generic>:
ih_keyboard_generic():
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:32
extern volatile uint32_t exceptionSavedESP;
extern volatile uint32_t* kTicksSinceStart;

__attribute__ ((interrupt))
void ih_keyboard_generic(struct interrupt_frame *frame)
{
 100a944:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:33
    kbd_handler_generic();
 100a947:	e8 10 fe ff ff       	call   100a75c <kbd_handler_generic>
/home/yogi/src/os/chrisOSKernel/src/drivers/drv_genKeyboard.c:35
    return;
}
 100a94c:	83 c4 0c             	add    esp,0xc
 100a94f:	c3                   	ret    

0100a950 <main>:
main():
/home/yogi/src/os/chrisOSKernel/src/kernel.c:32
extern task_t* kKernelTask;
uint32_t saveESP;
/*
 * 
 */
int main(int argc, char** argv) {
 100a950:	8d 4c 24 04          	lea    ecx,[esp+0x4]
 100a954:	83 e4 f0             	and    esp,0xfffffff0
 100a957:	ff 71 fc             	push   DWORD PTR [ecx-0x4]
 100a95a:	55                   	push   ebp
 100a95b:	89 e5                	mov    ebp,esp
 100a95d:	53                   	push   ebx
 100a95e:	51                   	push   ecx
 100a95f:	83 ec 3c             	sub    esp,0x3c
/home/yogi/src/os/chrisOSKernel/src/kernel.c:34
    //terminal_clear();
    printk("\nkernel loaded ... \n");
 100a962:	68 44 66 06 01       	push   0x1066644
 100a967:	e8 73 f2 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:43
        printk("Param %u=%s\n",cnt,argv[cnt]);
        //if (cnt>5)
        //    break;
    }
*/
    printk("Initializing memory management ...\n");
 100a96c:	c7 04 24 90 18 04 01 	mov    DWORD PTR [esp],0x1041890
 100a973:	e8 67 f2 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:44
    mmInit();
 100a978:	e8 49 07 00 00       	call   100b0c6 <mmInit>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:45
    printk("Done initializing memory management.\n\nInitializing malloc ...\n");
 100a97d:	c7 04 24 b4 18 04 01 	mov    DWORD PTR [esp],0x10418b4
 100a984:	e8 56 f2 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:46
    initMalloc();
 100a989:	e8 69 04 00 00       	call   100adf7 <initMalloc>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:47
    printk("Done initializing malloc\n\nInitializing task management ...\n");
 100a98e:	c7 04 24 f4 18 04 01 	mov    DWORD PTR [esp],0x10418f4
 100a995:	e8 45 f2 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:48
    taskInit();
 100a99a:	e8 e9 21 00 00       	call   100cb88 <taskInit>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:49
    printk("Done initializing task management\n\n");
 100a99f:	c7 04 24 30 19 04 01 	mov    DWORD PTR [esp],0x1041930
 100a9a6:	e8 34 f2 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:51
    
    int lRetVal=fl_attach_media((fn_diskio_read)ahciBlockingRead28, (fn_diskio_write)ahciBlockingWrite28);
 100a9ab:	83 c4 08             	add    esp,0x8
 100a9ae:	68 7b 11 00 01       	push   0x100117b
 100a9b3:	68 51 0f 00 01       	push   0x1000f51
 100a9b8:	e8 e6 a0 ff ff       	call   1004aa3 <fl_attach_media>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:53

    kDebugLevel |= DEBUG_TASK;
 100a9bd:	81 0d 78 98 12 00 00 	or     DWORD PTR ds:0x129878,0x4000
 100a9c4:	40 00 00 
/home/yogi/src/os/chrisOSKernel/src/kernel.c:54
    kKernelTask=getTaskSlot();
 100a9c7:	e8 da 21 00 00       	call   100cba6 <getTaskSlot>
 100a9cc:	a3 98 99 12 00       	mov    ds:0x129998,eax
/home/yogi/src/os/chrisOSKernel/src/kernel.c:57
    
    
    char program[40]="/testmainprogramentry";
 100a9d1:	c7 45 d0 2f 74 65 73 	mov    DWORD PTR [ebp-0x30],0x7365742f
 100a9d8:	c7 45 d4 74 6d 61 69 	mov    DWORD PTR [ebp-0x2c],0x69616d74
 100a9df:	c7 45 d8 6e 70 72 6f 	mov    DWORD PTR [ebp-0x28],0x6f72706e
 100a9e6:	c7 45 dc 67 72 61 6d 	mov    DWORD PTR [ebp-0x24],0x6d617267
 100a9ed:	c7 45 e0 65 6e 74 72 	mov    DWORD PTR [ebp-0x20],0x72746e65
 100a9f4:	c7 45 e4 79 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x79
 100a9fb:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
 100aa02:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
 100aa09:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
 100aa10:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOSKernel/src/kernel.c:58
    printk("Loading %s\n",program);
 100aa17:	83 c4 08             	add    esp,0x8
 100aa1a:	8d 5d d0             	lea    ebx,[ebp-0x30]
 100aa1d:	53                   	push   ebx
 100aa1e:	68 59 66 06 01       	push   0x1066659
 100aa23:	e8 b7 f1 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:59
    process_t* process = createProcess(program,false);
 100aa28:	83 c4 08             	add    esp,0x8
 100aa2b:	6a 00                	push   0x0
 100aa2d:	53                   	push   ebx
 100aa2e:	e8 59 11 00 00       	call   100bb8c <createProcess>
 100aa33:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/kernel.c:60
    printk("Executing %u %s\n",process->task->kernel, process->path);
 100aa35:	83 c4 0c             	add    esp,0xc
 100aa38:	ff 70 0c             	push   DWORD PTR [eax+0xc]
 100aa3b:	8b 00                	mov    eax,DWORD PTR [eax]
 100aa3d:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
 100aa41:	50                   	push   eax
 100aa42:	68 65 66 06 01       	push   0x1066665
 100aa47:	e8 93 f1 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:61
    sysExec(process,1,"");
 100aa4c:	83 c4 0c             	add    esp,0xc
 100aa4f:	68 5b 63 06 01       	push   0x106635b
 100aa54:	6a 01                	push   0x1
 100aa56:	53                   	push   ebx
 100aa57:	e8 4d 1e 00 00       	call   100c8a9 <sysExec>
/home/yogi/src/os/chrisOSKernel/src/kernel.c:96

    printk("ca[0]=0x%08X, *ca[0]=%u\n",ca[0],*ca[0]);
    printk("ca[1]=0x%08X, *ca[1]=%u\n",ca[1],*ca[1]);
    printk("\n");
*/    
    return (0xbad);
 100aa5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/kernel.c:97
}
 100aa5f:	b8 ad 0b 00 00       	mov    eax,0xbad
 100aa64:	8d 65 f8             	lea    esp,[ebp-0x8]
 100aa67:	59                   	pop    ecx
 100aa68:	5b                   	pop    ebx
 100aa69:	5d                   	pop    ebp
 100aa6a:	8d 61 fc             	lea    esp,[ecx-0x4]
 100aa6d:	c3                   	ret    
 100aa6e:	66 90                	xchg   ax,ax

0100aa70 <findEmptyBlock>:
findEmptyBlock():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:18
                      __asm__("mov eax,cr3\n mov %[cr3Val],eax\n":[cr3Val] "=r" (cr3Val));\
                      cr3Val;})

//Returns pointer to first empty block found
sMemInfo* findEmptyBlock()
{
 100aa70:	53                   	push   ebx
 100aa71:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:19
    sMemInfo* mInfo=heapMemoryInfo;
 100aa74:	a1 50 8c 07 01       	mov    eax,ds:0x1078c50
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:22
    sMemInfo* lRetVal;
    
    while (mInfo<heapMemoryInfo+(sizeof(sMemInfo)*1000))
 100aa79:	8d 90 80 f6 0b 00    	lea    edx,[eax+0xbf680]
 100aa7f:	39 d0                	cmp    eax,edx
 100aa81:	73 32                	jae    100aab5 <findEmptyBlock+0x45>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:24
    {
        if (mInfo->next==NULL)
 100aa83:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
 100aa87:	75 25                	jne    100aaae <findEmptyBlock+0x3e>
 100aa89:	eb 06                	jmp    100aa91 <findEmptyBlock+0x21>
 100aa8b:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
 100aa8f:	75 1d                	jne    100aaae <findEmptyBlock+0x3e>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:26
        {
            lRetVal=mInfo+1;
 100aa91:	8d 58 1c             	lea    ebx,[eax+0x1c]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:27
            printd(DEBUG_MEMORY_MANAGEMENT,"findEmptyBlock: Returning block # 0x%08X\n",lRetVal);
 100aa94:	83 ec 04             	sub    esp,0x4
 100aa97:	53                   	push   ebx
 100aa98:	68 54 19 04 01       	push   0x1041954
 100aa9d:	68 00 00 01 00       	push   0x10000
 100aaa2:	e8 50 f1 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:28
            return lRetVal;
 100aaa7:	83 c4 10             	add    esp,0x10
 100aaaa:	89 d8                	mov    eax,ebx
 100aaac:	eb 21                	jmp    100aacf <findEmptyBlock+0x5f>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:30
        }
         mInfo++;
 100aaae:	83 c0 1c             	add    eax,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:22
sMemInfo* findEmptyBlock()
{
    sMemInfo* mInfo=heapMemoryInfo;
    sMemInfo* lRetVal;
    
    while (mInfo<heapMemoryInfo+(sizeof(sMemInfo)*1000))
 100aab1:	39 d0                	cmp    eax,edx
 100aab3:	75 d6                	jne    100aa8b <findEmptyBlock+0x1b>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:32
            printd(DEBUG_MEMORY_MANAGEMENT,"findEmptyBlock: Returning block # 0x%08X\n",lRetVal);
            return lRetVal;
        }
         mInfo++;
    }
    printd(DEBUG_MEMORY_MANAGEMENT,"findEmptyBlock: No empty block found, returning NULL\n");
 100aab5:	83 ec 08             	sub    esp,0x8
 100aab8:	68 80 19 04 01       	push   0x1041980
 100aabd:	68 00 00 01 00       	push   0x10000
 100aac2:	e8 30 f1 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:33
    return NULL;
 100aac7:	83 c4 10             	add    esp,0x10
 100aaca:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:34
}
 100aacf:	83 c4 08             	add    esp,0x8
 100aad2:	5b                   	pop    ebx
 100aad3:	c3                   	ret    

0100aad4 <findBlockByMemoryAddress>:
findBlockByMemoryAddress():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:37

sMemInfo* findBlockByMemoryAddress(uintptr_t* address)
{
 100aad4:	53                   	push   ebx
 100aad5:	83 ec 08             	sub    esp,0x8
 100aad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:38
    sMemInfo* mInfo=heapMemoryInfo;
 100aadc:	8b 1d 50 8c 07 01    	mov    ebx,DWORD PTR ds:0x1078c50
 100aae2:	8d 93 80 f6 0b 00    	lea    edx,[ebx+0xbf680]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:41
    do
    {
        if (mInfo->address==address)
 100aae8:	3b 43 04             	cmp    eax,DWORD PTR [ebx+0x4]
 100aaeb:	75 18                	jne    100ab05 <findBlockByMemoryAddress+0x31>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:43
        {
            printd(DEBUG_MEMORY_MANAGEMENT,"findBlockByMemoryAddress: Found block 0x%08X for memory address 0x%08X\n",mInfo,address);
 100aaed:	50                   	push   eax
 100aaee:	53                   	push   ebx
 100aaef:	68 b8 19 04 01       	push   0x10419b8
 100aaf4:	68 00 00 01 00       	push   0x10000
 100aaf9:	e8 f9 f0 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:44
            return (sMemInfo*)mInfo;
 100aafe:	83 c4 10             	add    esp,0x10
 100ab01:	89 d8                	mov    eax,ebx
 100ab03:	eb 0c                	jmp    100ab11 <findBlockByMemoryAddress+0x3d>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:46
        }
        mInfo++;
 100ab05:	83 c3 1c             	add    ebx,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:47
    } while (mInfo<heapMemoryInfo+(sizeof(sMemInfo)*1000));
 100ab08:	39 d3                	cmp    ebx,edx
 100ab0a:	75 dc                	jne    100aae8 <findBlockByMemoryAddress+0x14>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:48
    return NULL;
 100ab0c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:49
}
 100ab11:	83 c4 08             	add    esp,0x8
 100ab14:	5b                   	pop    ebx
 100ab15:	c3                   	ret    

0100ab16 <findAvailableBlockBySize>:
findAvailableBlockBySize():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:53

//Returns a block with enough memory to fulfill the request
sMemInfo* findAvailableBlockBySize(uint32_t pSize)
{
 100ab16:	53                   	push   ebx
 100ab17:	83 ec 08             	sub    esp,0x8
 100ab1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:54
    sMemInfo* mInfo=heapMemoryInfo;
 100ab1e:	a1 50 8c 07 01       	mov    eax,ds:0x1078c50
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:58
    
    //First try finding a block starting at the last block instead of the first
    //Get to the last block
    while (mInfo->next)
 100ab23:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
 100ab27:	74 11                	je     100ab3a <findAvailableBlockBySize+0x24>
 100ab29:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:59
        mInfo++;
 100ab2b:	83 c3 1c             	add    ebx,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:58
{
    sMemInfo* mInfo=heapMemoryInfo;
    
    //First try finding a block starting at the last block instead of the first
    //Get to the last block
    while (mInfo->next)
 100ab2e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
 100ab32:	75 f7                	jne    100ab2b <findAvailableBlockBySize+0x15>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:60
        mInfo++;
    while (mInfo>=heapMemoryInfo)
 100ab34:	39 d8                	cmp    eax,ebx
 100ab36:	76 04                	jbe    100ab3c <findAvailableBlockBySize+0x26>
 100ab38:	eb 2e                	jmp    100ab68 <findAvailableBlockBySize+0x52>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:54
}

//Returns a block with enough memory to fulfill the request
sMemInfo* findAvailableBlockBySize(uint32_t pSize)
{
    sMemInfo* mInfo=heapMemoryInfo;
 100ab3a:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:62
    //Get to the last block
    while (mInfo->next)
        mInfo++;
    while (mInfo>=heapMemoryInfo)
    {
        if (mInfo->size>=pSize && (mInfo->inUse==false))
 100ab3c:	39 53 08             	cmp    DWORD PTR [ebx+0x8],edx
 100ab3f:	72 20                	jb     100ab61 <findAvailableBlockBySize+0x4b>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:62 (discriminator 1)
 100ab41:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
 100ab45:	75 1a                	jne    100ab61 <findAvailableBlockBySize+0x4b>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:64
        {
            printd(DEBUG_MEMORY_MANAGEMENT,"findAvailableBlockBySize: Returning block address 0x%08X\n",mInfo);
 100ab47:	83 ec 04             	sub    esp,0x4
 100ab4a:	53                   	push   ebx
 100ab4b:	68 00 1a 04 01       	push   0x1041a00
 100ab50:	68 00 00 01 00       	push   0x10000
 100ab55:	e8 9d f0 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:65
            return mInfo;
 100ab5a:	89 d8                	mov    eax,ebx
 100ab5c:	83 c4 10             	add    esp,0x10
 100ab5f:	eb 07                	jmp    100ab68 <findAvailableBlockBySize+0x52>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:67
        }
        mInfo--;
 100ab61:	83 eb 1c             	sub    ebx,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:60
    
    //First try finding a block starting at the last block instead of the first
    //Get to the last block
    while (mInfo->next)
        mInfo++;
    while (mInfo>=heapMemoryInfo)
 100ab64:	39 d8                	cmp    eax,ebx
 100ab66:	76 d4                	jbe    100ab3c <findAvailableBlockBySize+0x26>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:69
            printd(DEBUG_MEMORY_MANAGEMENT,"findAvailableBlockBySize: Returning block address 0x%08X\n",mInfo);
            return mInfo;
        }
        mInfo--;
    }
}
 100ab68:	83 c4 08             	add    esp,0x8
 100ab6b:	5b                   	pop    ebx
 100ab6c:	c3                   	ret    

0100ab6d <allocateBlockFrom>:
allocateBlockFrom():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:73

//Create a new block with the requested amount of memory, and adjust the old block's size and pointer appropriately
uintptr_t* allocateBlockFrom(sMemInfo* mInfoToAllocateFrom, uint32_t size)
{
 100ab6d:	57                   	push   edi
 100ab6e:	56                   	push   esi
 100ab6f:	53                   	push   ebx
 100ab70:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 100ab74:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:74
    sMemInfo* mNewInfo=findEmptyBlock();
 100ab78:	e8 f3 fe ff ff       	call   100aa70 <findEmptyBlock>
 100ab7d:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:77
    sMemInfo* mPriorInfo=mNewInfo-1;
    
    printd(DEBUG_MEMORY_MANAGEMENT,"allocateBlockFrom: findEmptyBlock returned 0x%08X\n",mNewInfo);
 100ab7f:	83 ec 04             	sub    esp,0x4
 100ab82:	50                   	push   eax
 100ab83:	68 3c 1a 04 01       	push   0x1041a3c
 100ab88:	68 00 00 01 00       	push   0x10000
 100ab8d:	e8 65 f0 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:79
    
    mPriorInfo->next=(uintptr_t*)mNewInfo;
 100ab92:	89 5b fc             	mov    DWORD PTR [ebx-0x4],ebx
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:82
    
    //Set up the new sMemInfo
    mNewInfo->prev=(uintptr_t*)mPriorInfo;
 100ab95:	8d 43 e4             	lea    eax,[ebx-0x1c]
 100ab98:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:83
    mNewInfo->address=mInfoToAllocateFrom->address;
 100ab9a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
 100ab9d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:84
    mNewInfo->size=size;
 100aba0:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:85
    mNewInfo->inUse=true;
 100aba3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:86
    mNewInfo->cr3=CURRENT_CR3;
 100aba7:	0f 20 d8             	mov    eax,cr3
 100abaa:	89 c0                	mov    eax,eax
 100abac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:89
    //mNewInfo pid and next don't get set
    
    mInfoToAllocateFrom->address+=size;
 100abaf:	01 7e 04             	add    DWORD PTR [esi+0x4],edi
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:90
    mInfoToAllocateFrom->size-=size;
 100abb2:	29 7e 08             	sub    DWORD PTR [esi+0x8],edi
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:91
    return (uintptr_t*)mNewInfo->address;
 100abb5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
 100abb8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:92
}
 100abbb:	5b                   	pop    ebx
 100abbc:	5e                   	pop    esi
 100abbd:	5f                   	pop    edi
 100abbe:	c3                   	ret    

0100abbf <allocPages>:
allocPages():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:95

void* allocPages(uint32_t size)
{
 100abbf:	56                   	push   esi
 100abc0:	53                   	push   ebx
 100abc1:	83 ec 04             	sub    esp,0x4
 100abc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:98
    uint32_t newSize=size;

    if (newSize%PAGE_SIZE)
 100abc8:	89 d8                	mov    eax,ebx
 100abca:	25 ff 0f 00 00       	and    eax,0xfff
 100abcf:	74 1e                	je     100abef <allocPages+0x30>
 100abd1:	8d b3 00 10 00 00    	lea    esi,[ebx+0x1000]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:100
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100abd7:	29 c6                	sub    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:101
        printd(DEBUG_MEMORY_MANAGEMENT,"allocPages: Size adjusted from %u to %u\n",size,newSize);
 100abd9:	56                   	push   esi
 100abda:	53                   	push   ebx
 100abdb:	68 70 1a 04 01       	push   0x1041a70
 100abe0:	68 00 00 01 00       	push   0x10000
 100abe5:	e8 0d f0 ff ff       	call   1009bf7 <printd>
 100abea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:100
{
    uint32_t newSize=size;

    if (newSize%PAGE_SIZE)
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100abed:	89 f3                	mov    ebx,esi
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:104
        printd(DEBUG_MEMORY_MANAGEMENT,"allocPages: Size adjusted from %u to %u\n",size,newSize);
    }
    uintptr_t* lRetVal;
    sMemInfo* block=findAvailableBlockBySize(newSize);
 100abef:	83 ec 0c             	sub    esp,0xc
 100abf2:	53                   	push   ebx
 100abf3:	e8 1e ff ff ff       	call   100ab16 <findAvailableBlockBySize>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:105
    block->inUse=true;
 100abf8:	c6 40 0c 01          	mov    BYTE PTR [eax+0xc],0x1
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:106
    if ( block->size > newSize)
 100abfc:	83 c4 10             	add    esp,0x10
 100abff:	3b 58 08             	cmp    ebx,DWORD PTR [eax+0x8]
 100ac02:	73 0f                	jae    100ac13 <allocPages+0x54>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:107
       lRetVal=allocateBlockFrom(block,newSize);
 100ac04:	83 ec 08             	sub    esp,0x8
 100ac07:	53                   	push   ebx
 100ac08:	50                   	push   eax
 100ac09:	e8 5f ff ff ff       	call   100ab6d <allocateBlockFrom>
 100ac0e:	83 c4 10             	add    esp,0x10
 100ac11:	eb 03                	jmp    100ac16 <allocPages+0x57>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:109
    else
        lRetVal=block->address;
 100ac13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:111
    return lRetVal;
}
 100ac16:	83 c4 04             	add    esp,0x4
 100ac19:	5b                   	pop    ebx
 100ac1a:	5e                   	pop    esi
 100ac1b:	c3                   	ret    

0100ac1c <allocPagesAndMapI>:
allocPagesAndMapI():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:114

void* allocPagesAndMapI(uintptr_t cr3,uint32_t size)
{
 100ac1c:	55                   	push   ebp
 100ac1d:	57                   	push   edi
 100ac1e:	56                   	push   esi
 100ac1f:	53                   	push   ebx
 100ac20:	83 ec 0c             	sub    esp,0xc
 100ac23:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:118
    uintptr_t* phys;
    uint32_t newSize=size;

    if (newSize%PAGE_SIZE)
 100ac27:	89 d8                	mov    eax,ebx
 100ac29:	25 ff 0f 00 00       	and    eax,0xfff
 100ac2e:	74 1e                	je     100ac4e <allocPagesAndMapI+0x32>
 100ac30:	8d b3 00 10 00 00    	lea    esi,[ebx+0x1000]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:120
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100ac36:	29 c6                	sub    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:121
        printd(DEBUG_MEMORY_MANAGEMENT,"allocPagesAndMap: Size adjusted from %u to %u\n",size,newSize);
 100ac38:	56                   	push   esi
 100ac39:	53                   	push   ebx
 100ac3a:	68 9c 1a 04 01       	push   0x1041a9c
 100ac3f:	68 00 00 01 00       	push   0x10000
 100ac44:	e8 ae ef ff ff       	call   1009bf7 <printd>
 100ac49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:120
    uintptr_t* phys;
    uint32_t newSize=size;

    if (newSize%PAGE_SIZE)
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100ac4c:	89 f3                	mov    ebx,esi
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:124
        printd(DEBUG_MEMORY_MANAGEMENT,"allocPagesAndMap: Size adjusted from %u to %u\n",size,newSize);
    }
    
    phys=allocPages(newSize);
 100ac4e:	83 ec 0c             	sub    esp,0xc
 100ac51:	53                   	push   ebx
 100ac52:	e8 68 ff ff ff       	call   100abbf <allocPages>
 100ac57:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:125
    printd("allocPagesAndMap: allocPage'd 0x%08X bytes at 0x%08X\n",newSize,phys);
 100ac59:	83 c4 0c             	add    esp,0xc
 100ac5c:	50                   	push   eax
 100ac5d:	53                   	push   ebx
 100ac5e:	68 cc 1a 04 01       	push   0x1041acc
 100ac63:	e8 8f ef ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:127
    
    uintptr_t virtualAddress=pagingFindAvailableAddressToMapTo(cr3,newSize/PAGE_SIZE);
 100ac68:	89 dd                	mov    ebp,ebx
 100ac6a:	c1 ed 0c             	shr    ebp,0xc
 100ac6d:	83 c4 08             	add    esp,0x8
 100ac70:	55                   	push   ebp
 100ac71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 100ac75:	e8 8e 0a 00 00       	call   100b708 <pagingFindAvailableAddressToMapTo>
 100ac7a:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:129
    //Map page into cr3 address space
    pagingMapPageCount(cr3,virtualAddress,phys,newSize/PAGE_SIZE,0x7); //CLR 02/25/2017 - changed map page to map page count
 100ac7c:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
 100ac83:	55                   	push   ebp
 100ac84:	57                   	push   edi
 100ac85:	50                   	push   eax
 100ac86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100ac8a:	e8 ba 0c 00 00       	call   100b949 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:130
    printd(DEBUG_MEMORY_MANAGEMENT,"allocPagesAndMap: Mapped v=0x%08X to p=0x%08X\n",virtualAddress,phys);
 100ac8f:	83 c4 20             	add    esp,0x20
 100ac92:	57                   	push   edi
 100ac93:	56                   	push   esi
 100ac94:	68 04 1b 04 01       	push   0x1041b04
 100ac99:	68 00 00 01 00       	push   0x10000
 100ac9e:	e8 54 ef ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:132
    //Zero out the memory
    pagingMapPageCount(KERNEL_PAGE_DIR_ADDRESS,virtualAddress | 0xC0000000,phys,newSize/PAGE_SIZE,0x7); //CLR 02/25/2017 - changed map page to map page count
 100aca3:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
 100acaa:	55                   	push   ebp
 100acab:	57                   	push   edi
 100acac:	89 f0                	mov    eax,esi
 100acae:	0d 00 00 00 c0       	or     eax,0xc0000000
 100acb3:	50                   	push   eax
 100acb4:	68 00 a0 4b 00       	push   0x4ba000
 100acb9:	e8 8b 0c 00 00       	call   100b949 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:133
    printd(DEBUG_MEMORY_MANAGEMENT,"allocPagesAndMap: Zeroing out page(s) at 0x%08X for 0x%08X\n",phys,newSize);
 100acbe:	83 c4 20             	add    esp,0x20
 100acc1:	53                   	push   ebx
 100acc2:	57                   	push   edi
 100acc3:	68 34 1b 04 01       	push   0x1041b34
 100acc8:	68 00 00 01 00       	push   0x10000
 100accd:	e8 25 ef ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:134
    memset(virtualAddress,0,newSize);
 100acd2:	83 c4 0c             	add    esp,0xc
 100acd5:	53                   	push   ebx
 100acd6:	6a 00                	push   0x0
 100acd8:	56                   	push   esi
 100acd9:	e8 e1 e1 ff ff       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:135
    printd(DEBUG_MEMORY_MANAGEMENT,"allocPagesAndMap: Returning address 0x%08X\n",phys);
 100acde:	83 c4 0c             	add    esp,0xc
 100ace1:	57                   	push   edi
 100ace2:	68 70 1b 04 01       	push   0x1041b70
 100ace7:	68 00 00 01 00       	push   0x10000
 100acec:	e8 06 ef ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:136
    return virtualAddress & 0xFFFFF000;
 100acf1:	89 f0                	mov    eax,esi
 100acf3:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:137
}
 100acf8:	83 c4 1c             	add    esp,0x1c
 100acfb:	5b                   	pop    ebx
 100acfc:	5e                   	pop    esi
 100acfd:	5f                   	pop    edi
 100acfe:	5d                   	pop    ebp
 100acff:	c3                   	ret    

0100ad00 <allocProcessPages>:
allocProcessPages():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:140

void* allocProcessPages(uintptr_t cr3, uint32_t size)
{
 100ad00:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:141
    return allocPagesAndMapI(cr3,size);
 100ad03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100ad07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100ad0b:	e8 0c ff ff ff       	call   100ac1c <allocPagesAndMapI>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:142
}
 100ad10:	83 c4 1c             	add    esp,0x1c
 100ad13:	c3                   	ret    

0100ad14 <allocPagesAndMap>:
allocPagesAndMap():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:145

void* allocPagesAndMap(uint32_t size)
{
 100ad14:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:146
    return allocPagesAndMapI(CURRENT_CR3, size);
 100ad17:	0f 20 d8             	mov    eax,cr3
 100ad1a:	89 c0                	mov    eax,eax
 100ad1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100ad20:	50                   	push   eax
 100ad21:	e8 f6 fe ff ff       	call   100ac1c <allocPagesAndMapI>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:147
}
 100ad26:	83 c4 1c             	add    esp,0x1c
 100ad29:	c3                   	ret    

0100ad2a <freePage>:
freePage():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:150

void freePage(void* address)
{
 100ad2a:	53                   	push   ebx
 100ad2b:	83 ec 14             	sub    esp,0x14
 100ad2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:151
    sMemInfo* mInfo = findBlockByMemoryAddress(address);
 100ad32:	53                   	push   ebx
 100ad33:	e8 9c fd ff ff       	call   100aad4 <findBlockByMemoryAddress>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:152
    if (mInfo!=NULL)
 100ad38:	83 c4 10             	add    esp,0x10
 100ad3b:	85 c0                	test   eax,eax
 100ad3d:	74 1a                	je     100ad59 <freePage+0x2f>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:154
    {
        mInfo->inUse=false;
 100ad3f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:155
        printd(DEBUG_MEMORY_MANAGEMENT,"Freed block 0x%08x for memory address 0x%08x\n",mInfo,address);
 100ad43:	53                   	push   ebx
 100ad44:	50                   	push   eax
 100ad45:	68 9c 1b 04 01       	push   0x1041b9c
 100ad4a:	68 00 00 01 00       	push   0x10000
 100ad4f:	e8 a3 ee ff ff       	call   1009bf7 <printd>
 100ad54:	83 c4 10             	add    esp,0x10
 100ad57:	eb 16                	jmp    100ad6f <freePage+0x45>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:158
    }
    else
        printd(DEBUG_MEMORY_MANAGEMENT,"free: Could not find memory block for 0x%08X to free, doing nothing\n",address);
 100ad59:	83 ec 04             	sub    esp,0x4
 100ad5c:	53                   	push   ebx
 100ad5d:	68 cc 1b 04 01       	push   0x1041bcc
 100ad62:	68 00 00 01 00       	push   0x10000
 100ad67:	e8 8b ee ff ff       	call   1009bf7 <printd>
 100ad6c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:159
}
 100ad6f:	83 c4 08             	add    esp,0x8
 100ad72:	5b                   	pop    ebx
 100ad73:	c3                   	ret    

0100ad74 <mallocA1k>:
mallocA1k():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:166
uintptr_t* mallocA1k(uint32_t size)
{
    uintptr_t* lRetVal=0;
    
    return lRetVal;
}
 100ad74:	b8 00 00 00 00       	mov    eax,0x0
 100ad79:	c3                   	ret    

0100ad7a <memAvailable>:
memAvailable():
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:171

uint32_t memAvailable()
{
    uint32_t lRetVal;
    sMemInfo* mInfo=heapMemoryInfo;
 100ad7a:	8b 15 50 8c 07 01    	mov    edx,DWORD PTR ds:0x1078c50
 100ad80:	8d 8a 80 f6 0b 00    	lea    ecx,[edx+0xbf680]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:175

    do
    {
        if (!mInfo->inUse)
 100ad86:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
 100ad8a:	75 03                	jne    100ad8f <memAvailable+0x15>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:176
            lRetVal+=mInfo->size;
 100ad8c:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:177
        mInfo++;
 100ad8f:	83 c2 1c             	add    edx,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:178
    } while (mInfo<heapMemoryInfo+(sizeof(sMemInfo)*1000));
 100ad92:	39 ca                	cmp    edx,ecx
 100ad94:	75 f0                	jne    100ad86 <memAvailable+0xc>
/home/yogi/src/os/chrisOSKernel/src/mm/alloc.c:180
    return lRetVal;
}
 100ad96:	f3 c3                	repz ret 

0100ad98 <initHeapPagePtr>:
initHeapPagePtr():
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:40
    kHeapPagePtr->prev=NO_PREV_HEAP_PTR;
    initHeapPagePtr(kHeapPagePtr);
}

void initHeapPagePtr(heapPtrPage* pagePtr)
{
 100ad98:	53                   	push   ebx
 100ad99:	83 ec 08             	sub    esp,0x8
 100ad9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:41
    printd(DEBUG_MALLOC,"initHeapPagePtr Initializing pointer page @ 0x%08X, 0x%08X pointers\n",pagePtr,POINTERS_PER_HEAP_PTR_PAGE);
 100ada0:	68 ff 01 00 00       	push   0x1ff
 100ada5:	53                   	push   ebx
 100ada6:	68 14 1c 04 01       	push   0x1041c14
 100adab:	68 00 00 08 00       	push   0x80000
 100adb0:	e8 42 ee ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:42
    pagePtr->next=NO_NEXT_HEAP_PTR;
 100adb5:	c7 83 fc 0f 00 00 ff 	mov    DWORD PTR [ebx+0xffc],0xffffffff
 100adbc:	ff ff ff 
 100adbf:	8d 43 04             	lea    eax,[ebx+0x4]
 100adc2:	8d 93 fc 0f 00 00    	lea    edx,[ebx+0xffc]
 100adc8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:45 (discriminator 3)
    for (int cnt=0;cnt<(int)(POINTERS_PER_HEAP_PTR_PAGE);cnt++)
    {
        pagePtr->ptrs[cnt].address=NULL;
 100adcb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:46 (discriminator 3)
        pagePtr->ptrs[cnt].size=0;
 100add1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
 100add8:	83 c0 08             	add    eax,0x8
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:43 (discriminator 3)

void initHeapPagePtr(heapPtrPage* pagePtr)
{
    printd(DEBUG_MALLOC,"initHeapPagePtr Initializing pointer page @ 0x%08X, 0x%08X pointers\n",pagePtr,POINTERS_PER_HEAP_PTR_PAGE);
    pagePtr->next=NO_NEXT_HEAP_PTR;
    for (int cnt=0;cnt<(int)(POINTERS_PER_HEAP_PTR_PAGE);cnt++)
 100addb:	39 d0                	cmp    eax,edx
 100addd:	75 ec                	jne    100adcb <initHeapPagePtr+0x33>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:48
    {
        pagePtr->ptrs[cnt].address=NULL;
        pagePtr->ptrs[cnt].size=0;
    }
    printd(DEBUG_MALLOC,"initHeapPagePtr Done\n",pagePtr);
 100addf:	83 ec 04             	sub    esp,0x4
 100ade2:	53                   	push   ebx
 100ade3:	68 4d 67 06 01       	push   0x106674d
 100ade8:	68 00 00 08 00       	push   0x80000
 100aded:	e8 05 ee ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:49
}
 100adf2:	83 c4 18             	add    esp,0x18
 100adf5:	5b                   	pop    ebx
 100adf6:	c3                   	ret    

0100adf7 <initMalloc>:
initMalloc():
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:33
                      cr3Val;})

void initHeapPagePtr(heapPtrPage* pagePtr);

void initMalloc()
{
 100adf7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:34
    kHeapPagePtr = allocPagesAndMap(sizeof(heapPtrPage));
 100adfa:	68 00 10 00 00       	push   0x1000
 100adff:	e8 10 ff ff ff       	call   100ad14 <allocPagesAndMap>
 100ae04:	a3 40 8c 07 01       	mov    ds:0x1078c40,eax
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:35
    kHeapPagePtr->prev=NO_PREV_HEAP_PTR;
 100ae09:	c7 00 fe ff ff ff    	mov    DWORD PTR [eax],0xfffffffe
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:36
    initHeapPagePtr(kHeapPagePtr);
 100ae0f:	83 c4 04             	add    esp,0x4
 100ae12:	ff 35 40 8c 07 01    	push   DWORD PTR ds:0x1078c40
 100ae18:	e8 7b ff ff ff       	call   100ad98 <initHeapPagePtr>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:37
}
 100ae1d:	83 c4 1c             	add    esp,0x1c
 100ae20:	c3                   	ret    

0100ae21 <findFreeMallocPointer>:
findFreeMallocPointer():
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:52
    }
    printd(DEBUG_MALLOC,"initHeapPagePtr Done\n",pagePtr);
}

void* findFreeMallocPointer()
{
 100ae21:	56                   	push   esi
 100ae22:	53                   	push   ebx
 100ae23:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:53
    heapPtrPage* ptrPg=kHeapPagePtr;
 100ae26:	8b 35 40 8c 07 01    	mov    esi,DWORD PTR ds:0x1078c40
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:58
    heapPtrPage* newPtrPage;

    while (1==1)
    {
        printd(DEBUG_MALLOC,"findFreeMallocPointer: Scanning for a free memory pointer\n");
 100ae2c:	83 ec 08             	sub    esp,0x8
 100ae2f:	68 5c 1c 04 01       	push   0x1041c5c
 100ae34:	68 00 00 08 00       	push   0x80000
 100ae39:	e8 b9 ed ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:60
        for (int cnt=0;cnt<(int)(POINTERS_PER_HEAP_PTR_PAGE);cnt++)
        if (ptrPg->ptrs[cnt].address==NULL)
 100ae3e:	83 c4 10             	add    esp,0x10
 100ae41:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
 100ae45:	74 11                	je     100ae58 <findFreeMallocPointer+0x37>
 100ae47:	bb 01 00 00 00       	mov    ebx,0x1
 100ae4c:	83 7c de 04 00       	cmp    DWORD PTR [esi+ebx*8+0x4],0x0
 100ae51:	75 0f                	jne    100ae62 <findFreeMallocPointer+0x41>
 100ae53:	e9 8c 00 00 00       	jmp    100aee4 <findFreeMallocPointer+0xc3>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:59
    heapPtrPage* newPtrPage;

    while (1==1)
    {
        printd(DEBUG_MALLOC,"findFreeMallocPointer: Scanning for a free memory pointer\n");
        for (int cnt=0;cnt<(int)(POINTERS_PER_HEAP_PTR_PAGE);cnt++)
 100ae58:	bb 00 00 00 00       	mov    ebx,0x0
 100ae5d:	e9 82 00 00 00       	jmp    100aee4 <findFreeMallocPointer+0xc3>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:59 (discriminator 2)
 100ae62:	83 c3 01             	add    ebx,0x1
 100ae65:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
 100ae6b:	75 df                	jne    100ae4c <findFreeMallocPointer+0x2b>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:67
            printd(DEBUG_MALLOC,"findFreeMallocPointer: Found memory pointer on page 0 (0x%08X)\n",ptrPg);
            return &ptrPg->ptrs[cnt];
        }
        
        //If we've reached the last memory pointer on the page
        if (ptrPg->next==NO_NEXT_HEAP_PTR)
 100ae6d:	83 be fc 0f 00 00 ff 	cmp    DWORD PTR [esi+0xffc],0xffffffff
 100ae74:	75 48                	jne    100aebe <findFreeMallocPointer+0x9d>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:69
        {
            printd(DEBUG_MALLOC,"No next heapPtrPage, creating one\n",ptrPg->next);
 100ae76:	83 ec 04             	sub    esp,0x4
 100ae79:	6a ff                	push   0xffffffff
 100ae7b:	68 d8 1c 04 01       	push   0x1041cd8
 100ae80:	68 00 00 08 00       	push   0x80000
 100ae85:	e8 6d ed ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:71
            //Create a new page and link it to the existing one
            newPtrPage=allocPagesAndMap(sizeof(heapPtrPage));
 100ae8a:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
 100ae91:	e8 7e fe ff ff       	call   100ad14 <allocPagesAndMap>
 100ae96:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:72
            initHeapPagePtr(newPtrPage);
 100ae98:	89 04 24             	mov    DWORD PTR [esp],eax
 100ae9b:	e8 f8 fe ff ff       	call   100ad98 <initHeapPagePtr>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:73
            ptrPg->next=newPtrPage;
 100aea0:	89 9e fc 0f 00 00    	mov    DWORD PTR [esi+0xffc],ebx
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:74
            newPtrPage->prev=ptrPg;
 100aea6:	89 33                	mov    DWORD PTR [ebx],esi
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:75
            printd(DEBUG_MALLOC,"Initialized new heapPtrPage @ 0x%08X\n\n",newPtrPage);
 100aea8:	83 c4 0c             	add    esp,0xc
 100aeab:	53                   	push   ebx
 100aeac:	68 fc 1c 04 01       	push   0x1041cfc
 100aeb1:	68 00 00 08 00       	push   0x80000
 100aeb6:	e8 3c ed ff ff       	call   1009bf7 <printd>
 100aebb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:77
        }
        printd(DEBUG_MALLOC,"Moving to next heapPtrPage @ 0x%08X\n",ptrPg->next);
 100aebe:	83 ec 04             	sub    esp,0x4
 100aec1:	ff b6 fc 0f 00 00    	push   DWORD PTR [esi+0xffc]
 100aec7:	68 24 1d 04 01       	push   0x1041d24
 100aecc:	68 00 00 08 00       	push   0x80000
 100aed1:	e8 21 ed ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:78
        ptrPg=(heapPtrPage*)ptrPg->next;
 100aed6:	8b b6 fc 0f 00 00    	mov    esi,DWORD PTR [esi+0xffc]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:79
    }
 100aedc:	83 c4 10             	add    esp,0x10
 100aedf:	e9 48 ff ff ff       	jmp    100ae2c <findFreeMallocPointer+0xb>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:62
    {
        printd(DEBUG_MALLOC,"findFreeMallocPointer: Scanning for a free memory pointer\n");
        for (int cnt=0;cnt<(int)(POINTERS_PER_HEAP_PTR_PAGE);cnt++)
        if (ptrPg->ptrs[cnt].address==NULL)
        {
            printd(DEBUG_MALLOC,"findFreeMallocPointer: Found memory pointer on page 0 (0x%08X)\n",ptrPg);
 100aee4:	83 ec 04             	sub    esp,0x4
 100aee7:	56                   	push   esi
 100aee8:	68 98 1c 04 01       	push   0x1041c98
 100aeed:	68 00 00 08 00       	push   0x80000
 100aef2:	e8 00 ed ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:63
            return &ptrPg->ptrs[cnt];
 100aef7:	8d 44 de 04          	lea    eax,[esi+ebx*8+0x4]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:81
        }
        printd(DEBUG_MALLOC,"Moving to next heapPtrPage @ 0x%08X\n",ptrPg->next);
        ptrPg=(heapPtrPage*)ptrPg->next;
    }
    panic("findFreeMallocPointer: Should not have gotten to this point");
}
 100aefb:	83 c4 14             	add    esp,0x14
 100aefe:	5b                   	pop    ebx
 100aeff:	5e                   	pop    esi
 100af00:	c3                   	ret    

0100af01 <allocateMemoryToProcess>:
allocateMemoryToProcess():
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:84

void allocateMemoryToProcess(heapPtr* ptr, size_t size, bool isKernel)
{
 100af01:	56                   	push   esi
 100af02:	53                   	push   ebx
 100af03:	83 ec 04             	sub    esp,0x4
 100af06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 100af0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:90
    uint32_t newSize=size;
    uint32_t* allocdPage;
    
    //While we are using allocPages, we need to adjust the size to a multiple of 4096
    //*******************************************************************************
    if (newSize%PAGE_SIZE)
 100af0e:	89 c2                	mov    edx,eax
 100af10:	81 e2 ff 0f 00 00    	and    edx,0xfff
 100af16:	74 1e                	je     100af36 <allocateMemoryToProcess+0x35>
 100af18:	8d b0 00 10 00 00    	lea    esi,[eax+0x1000]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:92
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100af1e:	29 d6                	sub    esi,edx
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:93
        printd(DEBUG_MALLOC,"aMTP: Size adjusted from %u to %u\n",size,newSize);
 100af20:	56                   	push   esi
 100af21:	50                   	push   eax
 100af22:	68 4c 1d 04 01       	push   0x1041d4c
 100af27:	68 00 00 08 00       	push   0x80000
 100af2c:	e8 c6 ec ff ff       	call   1009bf7 <printd>
 100af31:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:92
    
    //While we are using allocPages, we need to adjust the size to a multiple of 4096
    //*******************************************************************************
    if (newSize%PAGE_SIZE)
    {
        newSize+=(PAGE_SIZE-(size % PAGE_SIZE));
 100af34:	89 f0                	mov    eax,esi
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:96
        printd(DEBUG_MALLOC,"aMTP: Size adjusted from %u to %u\n",size,newSize);
    }
    //*******************************************************************************
    allocdPage=allocPagesAndMap(newSize);
 100af36:	83 ec 0c             	sub    esp,0xc
 100af39:	50                   	push   eax
 100af3a:	e8 d5 fd ff ff       	call   100ad14 <allocPagesAndMap>
 100af3f:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:97
    printd(DEBUG_MALLOC,"aMTP: Used allocPagesAndMap to allocate 0x%08X bytes at 0x%08X\n",ptr->size,allocdPage);
 100af41:	50                   	push   eax
 100af42:	ff 73 04             	push   DWORD PTR [ebx+0x4]
 100af45:	68 70 1d 04 01       	push   0x1041d70
 100af4a:	68 00 00 08 00       	push   0x80000
 100af4f:	e8 a3 ec ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:99
    uintptr_t virtualAddress=allocdPage;  //=pagingFindAvailableAddressToMapTo(CURRENT_CR3,newSize/PAGE_SIZE);
   ptr->address=virtualAddress;
 100af54:	89 33                	mov    DWORD PTR [ebx],esi
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:100
}
 100af56:	83 c4 24             	add    esp,0x24
 100af59:	5b                   	pop    ebx
 100af5a:	5e                   	pop    esi
 100af5b:	c3                   	ret    

0100af5c <malloc>:
malloc():
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:104


void* malloc(size_t size)
{
 100af5c:	57                   	push   edi
 100af5d:	56                   	push   esi
 100af5e:	53                   	push   ebx
 100af5f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:105
    uint32_t cs=getCS()>>3;
 100af63:	e8 e6 50 ff ff       	call   100004e <getCS>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:106
    bool isKernel=(bootGdt[cs].access & 0x60)==0x0;
 100af68:	c1 e8 03             	shr    eax,0x3
 100af6b:	8b 15 84 99 12 00    	mov    edx,DWORD PTR ds:0x129984
 100af71:	f6 44 c2 05 60       	test   BYTE PTR [edx+eax*8+0x5],0x60
 100af76:	0f 94 c0             	sete   al
 100af79:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:110
    
    heapPtr* ptr;
    //First find a page to place the memory pointer on
    ptr=findFreeMallocPointer();
 100af7b:	e8 a1 fe ff ff       	call   100ae21 <findFreeMallocPointer>
 100af80:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:113
    //Next get a memory address to point to and map the memory into the process
    
    ptr->address=0;
 100af82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:114
    ptr->size=size;
 100af88:	89 78 04             	mov    DWORD PTR [eax+0x4],edi
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:115
    allocateMemoryToProcess(ptr,size,isKernel);
 100af8b:	83 ec 04             	sub    esp,0x4
 100af8e:	89 f0                	mov    eax,esi
 100af90:	0f b6 f0             	movzx  esi,al
 100af93:	56                   	push   esi
 100af94:	57                   	push   edi
 100af95:	53                   	push   ebx
 100af96:	e8 66 ff ff ff       	call   100af01 <allocateMemoryToProcess>
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:116
    return ptr->address;
 100af9b:	8b 03                	mov    eax,DWORD PTR [ebx]
 100af9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/malloc.c:117
}
 100afa0:	5b                   	pop    ebx
 100afa1:	5e                   	pop    esi
 100afa2:	5f                   	pop    edi
 100afa3:	c3                   	ret    

0100afa4 <mmInitHeapTracking>:
mmInitHeapTracking():
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:36
uint32_t kernelPoolMemorySize=1400000;   //20 MB kernel memory

sMemInfo* heapMemoryInfo;

void mmInitHeapTracking()
{
 100afa4:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:37
    heapMemoryInfo=kmmHeapMemoryBaseAddress;
 100afa7:	a1 84 9a 12 00       	mov    eax,ds:0x129a84
 100afac:	a3 50 8c 07 01       	mov    ds:0x1078c50,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:38
    printd(DEBUG_MEMORY_MANAGEMENT,"Assigning heapMemoryInfo address of 0x%08X\n",heapMemoryInfo);
 100afb1:	50                   	push   eax
 100afb2:	68 b0 1d 04 01       	push   0x1041db0
 100afb7:	68 00 00 01 00       	push   0x10000
 100afbc:	e8 36 ec ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:42
    
    kmmHeapMemoryBaseAddress += sizeof(sMemInfo)*1000;
    kmmHeapMemoryBaseAddress += 0x1000;
    kmmHeapMemoryBaseAddress &= 0xFFFFF000;
 100afc1:	a1 84 9a 12 00       	mov    eax,ds:0x129a84
 100afc6:	05 60 7d 00 00       	add    eax,0x7d60
 100afcb:	25 00 f0 ff ff       	and    eax,0xfffff000
 100afd0:	a3 84 9a 12 00       	mov    ds:0x129a84,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:43
    kmmHeapMemoryTotal-= sizeof(sMemInfo)*1000; 
 100afd5:	81 2d 88 9a 12 00 60 	sub    DWORD PTR ds:0x129a88,0x6d60
 100afdc:	6d 00 00 
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:44
    printd(DEBUG_MEMORY_MANAGEMENT,"heapMemoryInfo = 0x%08X\n",heapMemoryInfo);
 100afdf:	83 c4 0c             	add    esp,0xc
 100afe2:	ff 35 50 8c 07 01    	push   DWORD PTR ds:0x1078c50
 100afe8:	68 63 67 06 01       	push   0x1066763
 100afed:	68 00 00 01 00       	push   0x10000
 100aff2:	e8 00 ec ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:45
    printd(DEBUG_MEMORY_MANAGEMENT,"Allocating 0x%08X bytes to memory block tracking\n",sizeof(sMemInfo)*1000);
 100aff7:	83 c4 0c             	add    esp,0xc
 100affa:	68 60 6d 00 00       	push   0x6d60
 100afff:	68 dc 1d 04 01       	push   0x1041ddc
 100b004:	68 00 00 01 00       	push   0x10000
 100b009:	e8 e9 eb ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:46
    printd(DEBUG_MEMORY_MANAGEMENT,"User memory base adjusted to 0x%08X\n",kmmHeapMemoryBaseAddress);
 100b00e:	83 c4 0c             	add    esp,0xc
 100b011:	ff 35 84 9a 12 00    	push   DWORD PTR ds:0x129a84
 100b017:	68 10 1e 04 01       	push   0x1041e10
 100b01c:	68 00 00 01 00       	push   0x10000
 100b021:	e8 d1 eb ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:47
    printd(DEBUG_MEMORY_MANAGEMENT,"User memory size adjusted to 0x%08X\n",kmmHeapMemoryTotal);
 100b026:	83 c4 0c             	add    esp,0xc
 100b029:	ff 35 88 9a 12 00    	push   DWORD PTR ds:0x129a88
 100b02f:	68 38 1e 04 01       	push   0x1041e38
 100b034:	68 00 00 01 00       	push   0x10000
 100b039:	e8 b9 eb ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:49

    heapMemoryInfo->address=kmmHeapMemoryBaseAddress;
 100b03e:	a1 50 8c 07 01       	mov    eax,ds:0x1078c50
 100b043:	8b 15 84 9a 12 00    	mov    edx,DWORD PTR ds:0x129a84
 100b049:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:50
    heapMemoryInfo->size=kmmHeapMemoryTotal;
 100b04c:	8b 15 88 9a 12 00    	mov    edx,DWORD PTR ds:0x129a88
 100b052:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:51
    heapMemoryInfo->next=NULL;
 100b055:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:52
    heapMemoryInfo->prev=NULL;
 100b05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 100b062:	83 c4 10             	add    esp,0x10
 100b065:	b8 1c 00 00 00       	mov    eax,0x1c
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:54
    
    for (int cnt=1;cnt<1000;cnt++)
 100b06a:	ba 01 00 00 00       	mov    edx,0x1
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:56
    {
        heapMemoryInfo[cnt].address=0;
 100b06f:	89 c1                	mov    ecx,eax
 100b071:	03 0d 50 8c 07 01    	add    ecx,DWORD PTR ds:0x1078c50
 100b077:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:57
        heapMemoryInfo[cnt].prev=NULL;
 100b07e:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:58
        if (cnt<999)
 100b084:	81 fa e6 03 00 00    	cmp    edx,0x3e6
 100b08a:	7f 0e                	jg     100b09a <mmInitHeapTracking+0xf6>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:59
            heapMemoryInfo[cnt].next=NULL;
 100b08c:	8b 0d 50 8c 07 01    	mov    ecx,DWORD PTR ds:0x1078c50
 100b092:	c7 44 01 18 00 00 00 	mov    DWORD PTR [ecx+eax*1+0x18],0x0
 100b099:	00 
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:60 (discriminator 2)
        heapMemoryInfo[cnt].inUse=false;
 100b09a:	89 c1                	mov    ecx,eax
 100b09c:	03 0d 50 8c 07 01    	add    ecx,DWORD PTR ds:0x1078c50
 100b0a2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:61 (discriminator 2)
        heapMemoryInfo[cnt].pid=0;
 100b0a6:	c7 41 10 00 00 00 00 	mov    DWORD PTR [ecx+0x10],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:62 (discriminator 2)
        heapMemoryInfo[cnt].size=0;
 100b0ad:	c7 41 08 00 00 00 00 	mov    DWORD PTR [ecx+0x8],0x0
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:54 (discriminator 2)
    heapMemoryInfo->address=kmmHeapMemoryBaseAddress;
    heapMemoryInfo->size=kmmHeapMemoryTotal;
    heapMemoryInfo->next=NULL;
    heapMemoryInfo->prev=NULL;
    
    for (int cnt=1;cnt<1000;cnt++)
 100b0b4:	83 c2 01             	add    edx,0x1
 100b0b7:	83 c0 1c             	add    eax,0x1c
 100b0ba:	81 fa e8 03 00 00    	cmp    edx,0x3e8
 100b0c0:	75 ad                	jne    100b06f <mmInitHeapTracking+0xcb>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:64
            heapMemoryInfo[cnt].next=NULL;
        heapMemoryInfo[cnt].inUse=false;
        heapMemoryInfo[cnt].pid=0;
        heapMemoryInfo[cnt].size=0;
    }
}
 100b0c2:	83 c4 0c             	add    esp,0xc
 100b0c5:	c3                   	ret    

0100b0c6 <mmInit>:
mmInit():
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:68


void mmInit()
{
 100b0c6:	56                   	push   esi
 100b0c7:	53                   	push   ebx
 100b0c8:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:69
    kernelSize=kernelLoadEnd-kernelLoadAddress;
 100b0cb:	0f be 05 90 8c 07 01 	movsx  eax,BYTE PTR ds:0x1078c90
 100b0d2:	0f be 15 00 00 00 01 	movsx  edx,BYTE PTR ds:0x1000000
 100b0d9:	29 d0                	sub    eax,edx
 100b0db:	a3 54 8c 07 01       	mov    ds:0x1078c54,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:71
    //0x10000000 represents segment 0xC0000000-0xCFFFFFFF ... don't want to map anything there for now
    kernelMemoryUsed=kernelStart + kernelSize;
 100b0e0:	03 05 e8 d5 00 01    	add    eax,DWORD PTR ds:0x100d5e8
 100b0e6:	a3 4c 8c 07 01       	mov    ds:0x1078c4c,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:72
    kmmGrossUserMemoryAvailable=kE820MemoryBytes - kernelMemoryUsed;
 100b0eb:	8b 0d 88 95 12 00    	mov    ecx,DWORD PTR ds:0x129588
 100b0f1:	8b 1d 8c 95 12 00    	mov    ebx,DWORD PTR ds:0x12958c
 100b0f7:	89 ca                	mov    edx,ecx
 100b0f9:	29 c2                	sub    edx,eax
 100b0fb:	89 15 80 9a 12 00    	mov    DWORD PTR ds:0x129a80,edx
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:73
    kmmHeapMemoryTotal=kmmGrossUserMemoryAvailable - kernelPoolMemorySize - kernelMemoryUsed;
 100b101:	8b 35 e4 d5 00 01    	mov    esi,DWORD PTR ds:0x100d5e4
 100b107:	29 f2                	sub    edx,esi
 100b109:	29 c2                	sub    edx,eax
 100b10b:	89 15 88 9a 12 00    	mov    DWORD PTR ds:0x129a88,edx
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:74
    kmmHeapMemoryBaseAddress=(kernelMemoryUsed + 0x100000) & 0xFFFFF000 ;
 100b111:	05 00 00 10 00       	add    eax,0x100000
 100b116:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:75
    kKernelPoolMemoryAddress=kmmHeapMemoryBaseAddress;
 100b11b:	a3 58 8c 07 01       	mov    ds:0x1078c58,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:76
    kmmHeapMemoryBaseAddress+=kernelPoolMemorySize; //Need some page table memory but we don't want to use Malloc while creating page tables to get it
 100b120:	01 f0                	add    eax,esi
 100b122:	a3 84 9a 12 00       	mov    ds:0x129a84,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:78
    //Setup the base of the heap
    kMallocBaseAddress=kmmHeapMemoryBaseAddress;
 100b127:	a3 7c 9a 12 00       	mov    ds:0x129a7c,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:79
    kMallocCurrAddress=kMallocBaseAddress;
 100b12c:	a3 78 9a 12 00       	mov    ds:0x129a78,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:81
    
    printd(DEBUG_MEMORY_MANAGEMENT,"E820 memory total: %u kb\n", kE820MemoryBytes/1024);
 100b131:	0f ac d9 0a          	shrd   ecx,ebx,0xa
 100b135:	c1 eb 0a             	shr    ebx,0xa
 100b138:	53                   	push   ebx
 100b139:	51                   	push   ecx
 100b13a:	68 7c 67 06 01       	push   0x106677c
 100b13f:	68 00 00 01 00       	push   0x10000
 100b144:	e8 ae ea ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:82
    printd(DEBUG_MEMORY_MANAGEMENT,"Memory used by the kernel: %u\n",kernelMemoryUsed);
 100b149:	83 c4 0c             	add    esp,0xc
 100b14c:	ff 35 4c 8c 07 01    	push   DWORD PTR ds:0x1078c4c
 100b152:	68 60 1e 04 01       	push   0x1041e60
 100b157:	68 00 00 01 00       	push   0x10000
 100b15c:	e8 96 ea ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:83
    printd(DEBUG_MEMORY_MANAGEMENT,"Memory available to mm: %u kb\n",kmmGrossUserMemoryAvailable/1024);
 100b161:	83 c4 0c             	add    esp,0xc
 100b164:	a1 80 9a 12 00       	mov    eax,ds:0x129a80
 100b169:	c1 e8 0a             	shr    eax,0xa
 100b16c:	50                   	push   eax
 100b16d:	68 80 1e 04 01       	push   0x1041e80
 100b172:	68 00 00 01 00       	push   0x10000
 100b177:	e8 7b ea ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:84
    printd(DEBUG_MEMORY_MANAGEMENT,"Total memory availabe to user applications: %u kb\n",(kmmGrossUserMemoryAvailable - kernelPoolMemorySize)/1024);
 100b17c:	83 c4 0c             	add    esp,0xc
 100b17f:	a1 80 9a 12 00       	mov    eax,ds:0x129a80
 100b184:	2b 05 e4 d5 00 01    	sub    eax,DWORD PTR ds:0x100d5e4
 100b18a:	c1 e8 0a             	shr    eax,0xa
 100b18d:	50                   	push   eax
 100b18e:	68 a0 1e 04 01       	push   0x1041ea0
 100b193:	68 00 00 01 00       	push   0x10000
 100b198:	e8 5a ea ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:85
    printd(DEBUG_MEMORY_MANAGEMENT,"Initializing memory manager\n\n");
 100b19d:	83 c4 08             	add    esp,0x8
 100b1a0:	68 96 67 06 01       	push   0x1066796
 100b1a5:	68 00 00 01 00       	push   0x10000
 100b1aa:	e8 48 ea ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:86
    printd(DEBUG_MEMORY_MANAGEMENT,"Pool\t\tAddress\t\t\tLength\t\t\n");
 100b1af:	83 c4 08             	add    esp,0x8
 100b1b2:	68 b4 67 06 01       	push   0x10667b4
 100b1b7:	68 00 00 01 00       	push   0x10000
 100b1bc:	e8 36 ea ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:87
    printd(DEBUG_MEMORY_MANAGEMENT,"Kernel\t0x%08X\t\t0x%08X\n",kKernelPoolMemoryAddress,kernelPoolMemorySize);
 100b1c1:	ff 35 e4 d5 00 01    	push   DWORD PTR ds:0x100d5e4
 100b1c7:	ff 35 58 8c 07 01    	push   DWORD PTR ds:0x1078c58
 100b1cd:	68 ce 67 06 01       	push   0x10667ce
 100b1d2:	68 00 00 01 00       	push   0x10000
 100b1d7:	e8 1b ea ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:88
    printd(DEBUG_MEMORY_MANAGEMENT,"User\t\t0x%08X\t\t0x%08X\n",kmmHeapMemoryBaseAddress,kmmHeapMemoryTotal);
 100b1dc:	83 c4 20             	add    esp,0x20
 100b1df:	ff 35 88 9a 12 00    	push   DWORD PTR ds:0x129a88
 100b1e5:	ff 35 84 9a 12 00    	push   DWORD PTR ds:0x129a84
 100b1eb:	68 e5 67 06 01       	push   0x10667e5
 100b1f0:	68 00 00 01 00       	push   0x10000
 100b1f5:	e8 fd e9 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:90

    mmInitHeapTracking();    
 100b1fa:	e8 a5 fd ff ff       	call   100afa4 <mmInitHeapTracking>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:94
    //We need to
    uintptr_t startAddr=0x1000;
    //CLR 02/21/2017 - Changed from (kernelMemoryUsed + 0x1000) & 0xFFFFF000 to heap memory base address
    uintptr_t endAddr= kmmHeapMemoryBaseAddress;
 100b1ff:	8b 1d 84 9a 12 00    	mov    ebx,DWORD PTR ds:0x129a84
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:96
    //Mark everything from the beginning of memory (0xC0000000) to the end of the kernel objects as in-use
    printd(DEBUG_KERNEL_PAGING,"Setting kernel memory range from 0x%08X-0x%08X as in-use\n",startAddr,endAddr);
 100b205:	53                   	push   ebx
 100b206:	68 00 10 00 00       	push   0x1000
 100b20b:	68 d4 1e 04 01       	push   0x1041ed4
 100b210:	68 00 80 00 00       	push   0x8000
 100b215:	e8 dd e9 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:97
    mmKernelSetPageRangeInUseFlag(startAddr,
 100b21a:	83 c4 20             	add    esp,0x20
 100b21d:	6a 01                	push   0x1
 100b21f:	68 00 10 00 00       	push   0x1000
 100b224:	8d 43 01             	lea    eax,[ebx+0x1]
 100b227:	50                   	push   eax
 100b228:	68 00 10 00 00       	push   0x1000
 100b22d:	e8 a1 da ff ff       	call   1008cd3 <mmKernelSetPageRangeInUseFlag>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:103
            endAddr+1,
            0x1000, /*page size*/
            true);
    startAddr+=0xc0000000;
    endAddr+=0xc0000000;
    printd(DEBUG_KERNEL_PAGING,"Setting kernel memory range from 0x%08X-0x%08X as in-use\n",startAddr,endAddr);
 100b232:	8d 83 00 00 00 c0    	lea    eax,[ebx-0x40000000]
 100b238:	50                   	push   eax
 100b239:	68 00 10 00 c0       	push   0xc0001000
 100b23e:	68 d4 1e 04 01       	push   0x1041ed4
 100b243:	68 00 80 00 00       	push   0x8000
 100b248:	e8 aa e9 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:104
    mmKernelSetPageRangeInUseFlag(startAddr,
 100b24d:	83 c4 20             	add    esp,0x20
 100b250:	6a 01                	push   0x1
 100b252:	68 00 10 00 00       	push   0x1000
 100b257:	81 eb ff ff ff 3f    	sub    ebx,0x3fffffff
 100b25d:	53                   	push   ebx
 100b25e:	68 00 10 00 c0       	push   0xc0001000
 100b263:	e8 6b da ff ff       	call   1008cd3 <mmKernelSetPageRangeInUseFlag>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:109
            endAddr+1,
            0x1000, /*page size*/
            true);

    startAddr=kmmHeapMemoryBaseAddress; 
 100b268:	8b 1d 84 9a 12 00    	mov    ebx,DWORD PTR ds:0x129a84
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:110
    printd(DEBUG_KERNEL_PAGING,"Zeroing page entries for memory range 0x%08X-0x%08X",startAddr,0x9FFFFFFF);
 100b26e:	68 ff ff ff 9f       	push   0x9fffffff
 100b273:	53                   	push   ebx
 100b274:	68 10 1f 04 01       	push   0x1041f10
 100b279:	68 00 80 00 00       	push   0x8000
 100b27e:	e8 74 e9 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:111
    for (uintptr_t cnt=startAddr;cnt<=0x9FFFFFFF;cnt+=0x1000)
 100b283:	83 c4 20             	add    esp,0x20
 100b286:	81 fb ff ff ff 9f    	cmp    ebx,0x9fffffff
 100b28c:	77 4c                	ja     100b2da <mmInit+0x214>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:115
    {
        if (cnt<0xC0000000 || cnt>0xCFFFFFFF)
        {
            unMapPage(CURRENT_CR3,cnt,0x0);
 100b28e:	0f 20 d8             	mov    eax,cr3
 100b291:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:113

    startAddr=kmmHeapMemoryBaseAddress; 
    printd(DEBUG_KERNEL_PAGING,"Zeroing page entries for memory range 0x%08X-0x%08X",startAddr,0x9FFFFFFF);
    for (uintptr_t cnt=startAddr;cnt<=0x9FFFFFFF;cnt+=0x1000)
    {
        if (cnt<0xC0000000 || cnt>0xCFFFFFFF)
 100b293:	8d 83 00 00 00 40    	lea    eax,[ebx+0x40000000]
 100b299:	3d ff ff ff 0f       	cmp    eax,0xfffffff
 100b29e:	76 2c                	jbe    100b2cc <mmInit+0x206>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:115
        {
            unMapPage(CURRENT_CR3,cnt,0x0);
 100b2a0:	83 ec 04             	sub    esp,0x4
 100b2a3:	6a 00                	push   0x0
 100b2a5:	53                   	push   ebx
 100b2a6:	56                   	push   esi
 100b2a7:	e8 34 07 00 00       	call   100b9e0 <unMapPage>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:116
            if (cnt%0x10000000==0)
 100b2ac:	83 c4 10             	add    esp,0x10
 100b2af:	f7 c3 ff ff ff 0f    	test   ebx,0xfffffff
 100b2b5:	75 15                	jne    100b2cc <mmInit+0x206>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:119
            {
//                printk("0x%08X-0x%08X\n",cnt,kPagingGet4kPTEntryValue(cnt));
                printd(DEBUG_KERNEL_PAGING,".");
 100b2b7:	83 ec 08             	sub    esp,0x8
 100b2ba:	68 df 68 06 01       	push   0x10668df
 100b2bf:	68 00 80 00 00       	push   0x8000
 100b2c4:	e8 2e e9 ff ff       	call   1009bf7 <printd>
 100b2c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:111 (discriminator 2)
            0x1000, /*page size*/
            true);

    startAddr=kmmHeapMemoryBaseAddress; 
    printd(DEBUG_KERNEL_PAGING,"Zeroing page entries for memory range 0x%08X-0x%08X",startAddr,0x9FFFFFFF);
    for (uintptr_t cnt=startAddr;cnt<=0x9FFFFFFF;cnt+=0x1000)
 100b2cc:	81 c3 00 10 00 00    	add    ebx,0x1000
 100b2d2:	81 fb ff ff ff 9f    	cmp    ebx,0x9fffffff
 100b2d8:	76 b9                	jbe    100b293 <mmInit+0x1cd>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:125
//                cursorMoveTo(0,cursorGetPosY()-1);
            }
        }
    }
 
    printk("\n");
 100b2da:	83 ec 0c             	sub    esp,0xc
 100b2dd:	68 cc 67 06 01       	push   0x10667cc
 100b2e2:	e8 f8 e8 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/mm/mm.c:147
    printd(DEBUG_KERNEL_PAGING,"Available memory: %u\n",memAvailable());
    return;
  */  
//    for (int cnt=KERNEL_VIRTUAL_EXEC_ADDRESS;cnt<KERNEL_VIRTUAL_EXEC_ADDRESS+0x10000000;cnt+=4096)
//        pagingMapPage
}
 100b2e7:	83 c4 14             	add    esp,0x14
 100b2ea:	5b                   	pop    ebx
 100b2eb:	5e                   	pop    esi
 100b2ec:	c3                   	ret    
 100b2ed:	66 90                	xchg   ax,ax
 100b2ef:	90                   	nop

0100b2f0 <pagingAllocatePagingTablePage>:
pagingAllocatePagingTablePage():
/home/yogi/src/os/chrisOSKernel/src/paging.c:127
    return lRetVal;
}

uint32_t pagingAllocatePagingTablePage()
{
    uint32_t lRetVal = kKernelPoolMemoryAddress;
 100b2f0:	a1 58 8c 07 01       	mov    eax,ds:0x1078c58
/home/yogi/src/os/chrisOSKernel/src/paging.c:128
    kKernelPoolMemoryAddress+=0x1000;
 100b2f5:	8d 90 00 10 00 00    	lea    edx,[eax+0x1000]
 100b2fb:	89 15 58 8c 07 01    	mov    DWORD PTR ds:0x1078c58,edx
/home/yogi/src/os/chrisOSKernel/src/paging.c:130
    return lRetVal;
}
 100b301:	c3                   	ret    

0100b302 <pagingGet4kPDEntryValueCR3>:
pagingGet4kPDEntryValueCR3():
/home/yogi/src/os/chrisOSKernel/src/paging.c:133

uint32_t pagingGet4kPDEntryValueCR3(uintptr_t PageDirAddress, uint32_t address)
{
 100b302:	53                   	push   ebx
 100b303:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/src/paging.c:136
    address&=0xFFFFF000;
    uintptr_t*pageDirEntry=((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
    uintptr_t* lTemp=(uint32_t*)((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
 100b306:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 100b30a:	c1 eb 16             	shr    ebx,0x16
 100b30d:	c1 e3 02             	shl    ebx,0x2
 100b310:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/paging.c:138
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 100b314:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 100b31b:	74 12                	je     100b32f <pagingGet4kPDEntryValueCR3+0x2d>
/home/yogi/src/os/chrisOSKernel/src/paging.c:139
            printk("pagingGet4kPDEntryValue: dirAddressPtr=0x%08x\n", *lTemp);
 100b31d:	83 ec 08             	sub    esp,0x8
 100b320:	ff 33                	push   DWORD PTR [ebx]
 100b322:	68 44 1f 04 01       	push   0x1041f44
 100b327:	e8 b3 e8 ff ff       	call   1009bdf <printk>
 100b32c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:141
#endif
    return (uint32_t)*lTemp;
 100b32f:	8b 03                	mov    eax,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/src/paging.c:142
}
 100b331:	83 c4 08             	add    esp,0x8
 100b334:	5b                   	pop    ebx
 100b335:	c3                   	ret    

0100b336 <pagingGet4kPDEntryValue>:
pagingGet4kPDEntryValue():
/home/yogi/src/os/chrisOSKernel/src/paging.c:145

uint32_t pagingGet4kPDEntryValue(uint32_t address)
{
 100b336:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/paging.c:146
    return pagingGet4kPDEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 100b339:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100b33d:	68 00 a0 4b 00       	push   0x4ba000
 100b342:	e8 bb ff ff ff       	call   100b302 <pagingGet4kPDEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/src/paging.c:147
}
 100b347:	83 c4 1c             	add    esp,0x1c
 100b34a:	c3                   	ret    

0100b34b <pagingGet4kPDEntryAddressCR3>:
pagingGet4kPDEntryAddressCR3():
/home/yogi/src/os/chrisOSKernel/src/paging.c:150

uint32_t pagingGet4kPDEntryAddressCR3(uintptr_t PageDirAddress, uint32_t address)
{
 100b34b:	53                   	push   ebx
 100b34c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOSKernel/src/paging.c:152
    address&=0xFFFFF000;
    uintptr_t lTemp=((PageDirAddress  | (((address & 0xFFC00000) >> 22) << 2)));
 100b34f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
 100b353:	c1 eb 16             	shr    ebx,0x16
 100b356:	c1 e3 02             	shl    ebx,0x2
 100b359:	0b 5c 24 10          	or     ebx,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/paging.c:154
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 100b35d:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 100b364:	74 11                	je     100b377 <pagingGet4kPDEntryAddressCR3+0x2c>
/home/yogi/src/os/chrisOSKernel/src/paging.c:155
            printk("dirEntryAddress=0x%08x\n", lTemp);
 100b366:	83 ec 08             	sub    esp,0x8
 100b369:	53                   	push   ebx
 100b36a:	68 fb 67 06 01       	push   0x10667fb
 100b36f:	e8 6b e8 ff ff       	call   1009bdf <printk>
 100b374:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:158
#endif
    return (uint32_t)lTemp & 0xFFFFFFFF;
}
 100b377:	89 d8                	mov    eax,ebx
 100b379:	83 c4 08             	add    esp,0x8
 100b37c:	5b                   	pop    ebx
 100b37d:	c3                   	ret    

0100b37e <pagingGet4kPDEntryAddress>:
pagingGet4kPDEntryAddress():
/home/yogi/src/os/chrisOSKernel/src/paging.c:161

uint32_t pagingGet4kPDEntryAddress(uint32_t address)
{
 100b37e:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/paging.c:162
    return pagingGet4kPDEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 100b381:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100b385:	68 00 a0 4b 00       	push   0x4ba000
 100b38a:	e8 bc ff ff ff       	call   100b34b <pagingGet4kPDEntryAddressCR3>
/home/yogi/src/os/chrisOSKernel/src/paging.c:163
}
 100b38f:	83 c4 1c             	add    esp,0x1c
 100b392:	c3                   	ret    

0100b393 <pagingGet4kPTEntryAddressCR3>:
pagingGet4kPTEntryAddressCR3():
/home/yogi/src/os/chrisOSKernel/src/paging.c:166

uint32_t pagingGet4kPTEntryAddressCR3(uintptr_t pageDirAddress, uint32_t address)
{
 100b393:	53                   	push   ebx
 100b394:	83 ec 10             	sub    esp,0x10
 100b397:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
/home/yogi/src/os/chrisOSKernel/src/paging.c:168
    address&=0xFFFFF000;
    uintptr_t pDirPtr=pagingGet4kPDEntryValueCR3(pageDirAddress,address) & 0xFFFFF000;
 100b39b:	89 d8                	mov    eax,ebx
 100b39d:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b3a2:	50                   	push   eax
 100b3a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b3a7:	e8 56 ff ff ff       	call   100b302 <pagingGet4kPDEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/src/paging.c:169
    return ((address & 0x3FF000) >> 12) << 2 | pDirPtr;
 100b3ac:	81 e3 00 f0 3f 00    	and    ebx,0x3ff000
 100b3b2:	c1 eb 0a             	shr    ebx,0xa
 100b3b5:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b3ba:	09 d8                	or     eax,ebx
/home/yogi/src/os/chrisOSKernel/src/paging.c:170
}
 100b3bc:	83 c4 18             	add    esp,0x18
 100b3bf:	5b                   	pop    ebx
 100b3c0:	c3                   	ret    

0100b3c1 <pagingGet4kPTEntryAddress>:
pagingGet4kPTEntryAddress():
/home/yogi/src/os/chrisOSKernel/src/paging.c:173

uint32_t pagingGet4kPTEntryAddress(uint32_t address)
{
 100b3c1:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/paging.c:174
    return pagingGet4kPTEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 100b3c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100b3c8:	68 00 a0 4b 00       	push   0x4ba000
 100b3cd:	e8 c1 ff ff ff       	call   100b393 <pagingGet4kPTEntryAddressCR3>
/home/yogi/src/os/chrisOSKernel/src/paging.c:175
}
 100b3d2:	83 c4 1c             	add    esp,0x1c
 100b3d5:	c3                   	ret    

0100b3d6 <pagingGet4kPTEntryValueCR3>:
pagingGet4kPTEntryValueCR3():
/home/yogi/src/os/chrisOSKernel/src/paging.c:178

uint32_t pagingGet4kPTEntryValueCR3(uintptr_t pageDirAddress, uint32_t address)
{
 100b3d6:	56                   	push   esi
 100b3d7:	53                   	push   ebx
 100b3d8:	83 ec 0c             	sub    esp,0xc
 100b3db:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/src/paging.c:180
    address&=0xFFFFF000;
    uint32_t* pTablePtr=(uint32_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,address);
 100b3df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 100b3e3:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b3e8:	50                   	push   eax
 100b3e9:	56                   	push   esi
 100b3ea:	e8 a4 ff ff ff       	call   100b393 <pagingGet4kPTEntryAddressCR3>
 100b3ef:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:182
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
 100b3f1:	83 c4 10             	add    esp,0x10
 100b3f4:	f6 05 78 98 12 00 40 	test   BYTE PTR ds:0x129878,0x40
 100b3fb:	74 11                	je     100b40e <pagingGet4kPTEntryValueCR3+0x38>
/home/yogi/src/os/chrisOSKernel/src/paging.c:183
             printk("pagingGet4kPTEntryValueCR3: PTAddress=0x%08X, PTValue=0x%08X (PDIR=0x%08X)\n", pTablePtr,*pTablePtr,pageDirAddress);
 100b3fd:	56                   	push   esi
 100b3fe:	ff 30                	push   DWORD PTR [eax]
 100b400:	50                   	push   eax
 100b401:	68 74 1f 04 01       	push   0x1041f74
 100b406:	e8 d4 e7 ff ff       	call   1009bdf <printk>
 100b40b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:185
#endif
    return *pTablePtr;
 100b40e:	8b 03                	mov    eax,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/src/paging.c:186
}
 100b410:	83 c4 04             	add    esp,0x4
 100b413:	5b                   	pop    ebx
 100b414:	5e                   	pop    esi
 100b415:	c3                   	ret    

0100b416 <pagingGet4kPTEntryValue>:
pagingGet4kPTEntryValue():
/home/yogi/src/os/chrisOSKernel/src/paging.c:189

uint32_t pagingGet4kPTEntryValue(uint32_t address)
{
 100b416:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/paging.c:190
    return pagingGet4kPTEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
 100b419:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100b41d:	68 00 a0 4b 00       	push   0x4ba000
 100b422:	e8 af ff ff ff       	call   100b3d6 <pagingGet4kPTEntryValueCR3>
/home/yogi/src/os/chrisOSKernel/src/paging.c:191
}
 100b427:	83 c4 1c             	add    esp,0x1c
 100b42a:	c3                   	ret    

0100b42b <pagingSetPageReadOnlyFlag>:
pagingSetPageReadOnlyFlag():
/home/yogi/src/os/chrisOSKernel/src/paging.c:194

void pagingSetPageReadOnlyFlag(uintptr_t* ptEntry, bool readOnly)
{
 100b42b:	56                   	push   esi
 100b42c:	53                   	push   ebx
 100b42d:	83 ec 04             	sub    esp,0x4
 100b430:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 100b434:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/paging.c:195
    printd(DEBUG_PAGING,"pagingMakePageReadOnly: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
 100b438:	ff 33                	push   DWORD PTR [ebx]
 100b43a:	53                   	push   ebx
 100b43b:	68 9c 10 04 01       	push   0x104109c
 100b440:	6a 40                	push   0x40
 100b442:	e8 b0 e7 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:196
    if (readOnly)
 100b447:	83 c4 10             	add    esp,0x10
 100b44a:	89 f0                	mov    eax,esi
 100b44c:	84 c0                	test   al,al
 100b44e:	74 05                	je     100b455 <pagingSetPageReadOnlyFlag+0x2a>
/home/yogi/src/os/chrisOSKernel/src/paging.c:197
       *ptEntry&=0xFFFFFFFD;
 100b450:	83 23 fd             	and    DWORD PTR [ebx],0xfffffffd
 100b453:	eb 03                	jmp    100b458 <pagingSetPageReadOnlyFlag+0x2d>
/home/yogi/src/os/chrisOSKernel/src/paging.c:199
    else
       *ptEntry|=2; 
 100b455:	83 0b 02             	or     DWORD PTR [ebx],0x2
/home/yogi/src/os/chrisOSKernel/src/paging.c:200
    RELOAD_CR3
 100b458:	0f 20 d8             	mov    eax,cr3
 100b45b:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:201
    printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
 100b45e:	83 ec 04             	sub    esp,0x4
 100b461:	ff 33                	push   DWORD PTR [ebx]
 100b463:	68 f3 67 06 01       	push   0x10667f3
 100b468:	6a 40                	push   0x40
 100b46a:	e8 88 e7 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:202
}
 100b46f:	83 c4 14             	add    esp,0x14
 100b472:	5b                   	pop    ebx
 100b473:	5e                   	pop    esi
 100b474:	c3                   	ret    

0100b475 <pagingUpdatePTEPresentFlag>:
pagingUpdatePTEPresentFlag():
/home/yogi/src/os/chrisOSKernel/src/paging.c:205

void pagingUpdatePTEPresentFlag(uintptr_t* ptEntry, bool present)
{
 100b475:	56                   	push   esi
 100b476:	53                   	push   ebx
 100b477:	83 ec 04             	sub    esp,0x4
 100b47a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
 100b47e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/paging.c:206
         printd(DEBUG_PAGING,"pagingUpdatePTEPresentFlag: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
 100b482:	ff 33                	push   DWORD PTR [ebx]
 100b484:	53                   	push   ebx
 100b485:	68 d4 10 04 01       	push   0x10410d4
 100b48a:	6a 40                	push   0x40
 100b48c:	e8 66 e7 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:207
         if (present)
 100b491:	83 c4 10             	add    esp,0x10
 100b494:	89 f0                	mov    eax,esi
 100b496:	84 c0                	test   al,al
 100b498:	74 05                	je     100b49f <pagingUpdatePTEPresentFlag+0x2a>
/home/yogi/src/os/chrisOSKernel/src/paging.c:208
             *ptEntry=*ptEntry | 1;
 100b49a:	83 0b 01             	or     DWORD PTR [ebx],0x1
 100b49d:	eb 03                	jmp    100b4a2 <pagingUpdatePTEPresentFlag+0x2d>
/home/yogi/src/os/chrisOSKernel/src/paging.c:210
         else
             *ptEntry&=0xFFFFFFFE;
 100b49f:	83 23 fe             	and    DWORD PTR [ebx],0xfffffffe
/home/yogi/src/os/chrisOSKernel/src/paging.c:211
         __asm__("mov eax,cr3\nmov cr3,eax\n":::"eax");
 100b4a2:	0f 20 d8             	mov    eax,cr3
 100b4a5:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:212
         printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
 100b4a8:	83 ec 04             	sub    esp,0x4
 100b4ab:	ff 33                	push   DWORD PTR [ebx]
 100b4ad:	68 f3 67 06 01       	push   0x10667f3
 100b4b2:	6a 40                	push   0x40
 100b4b4:	e8 3e e7 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:213
}
 100b4b9:	83 c4 14             	add    esp,0x14
 100b4bc:	5b                   	pop    ebx
 100b4bd:	5e                   	pop    esi
 100b4be:	c3                   	ret    

0100b4bf <pagingSetVirtualRangeRO>:
pagingSetVirtualRangeRO():
/home/yogi/src/os/chrisOSKernel/src/paging.c:216

void pagingSetVirtualRangeRO(uintptr_t pageDirAddress, uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
 100b4bf:	55                   	push   ebp
 100b4c0:	57                   	push   edi
 100b4c1:	56                   	push   esi
 100b4c2:	53                   	push   ebx
 100b4c3:	83 ec 1c             	sub    esp,0x1c
 100b4c6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
 100b4ca:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
 100b4ce:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
 100b4d2:	89 f0                	mov    eax,esi
 100b4d4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
/home/yogi/src/os/chrisOSKernel/src/paging.c:218
    uintptr_t* startPTE;
    printd(DEBUG_PAGING,"kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
 100b4d8:	57                   	push   edi
 100b4d9:	53                   	push   ebx
 100b4da:	68 10 11 04 01       	push   0x1041110
 100b4df:	6a 40                	push   0x40
 100b4e1:	e8 11 e7 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:219
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
 100b4e6:	8d 4f 01             	lea    ecx,[edi+0x1]
 100b4e9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
 100b4ed:	83 c4 10             	add    esp,0x10
 100b4f0:	39 cb                	cmp    ebx,ecx
 100b4f2:	77 4f                	ja     100b543 <pagingSetVirtualRangeRO+0x84>
 100b4f4:	89 f2                	mov    edx,esi
 100b4f6:	84 d2                	test   dl,dl
 100b4f8:	b8 79 64 06 01       	mov    eax,0x1066479
 100b4fd:	bd ed cd 04 01       	mov    ebp,0x104cded
 100b502:	0f 44 e8             	cmove  ebp,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:223
    {
        startPTE=(uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,cnt);
        printd(DEBUG_PAGING,"0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
 100b505:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
/home/yogi/src/os/chrisOSKernel/src/paging.c:221
{
    uintptr_t* startPTE;
    printd(DEBUG_PAGING,"kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
    {
        startPTE=(uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,cnt);
 100b50a:	83 ec 08             	sub    esp,0x8
 100b50d:	53                   	push   ebx
 100b50e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100b512:	e8 7c fe ff ff       	call   100b393 <pagingGet4kPTEntryAddressCR3>
 100b517:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:222
        printd(DEBUG_PAGING,"0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
 100b519:	89 2c 24             	mov    DWORD PTR [esp],ebp
 100b51c:	50                   	push   eax
 100b51d:	53                   	push   ebx
 100b51e:	68 7c 64 06 01       	push   0x106647c
 100b523:	6a 40                	push   0x40
 100b525:	e8 cd e6 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:223
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
 100b52a:	83 c4 18             	add    esp,0x18
 100b52d:	57                   	push   edi
 100b52e:	56                   	push   esi
 100b52f:	e8 71 d3 ff ff       	call   10088a5 <kPagingSetPageReadOnlyFlag>
/home/yogi/src/os/chrisOSKernel/src/paging.c:219

void pagingSetVirtualRangeRO(uintptr_t pageDirAddress, uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
    uintptr_t* startPTE;
    printd(DEBUG_PAGING,"kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
 100b534:	81 c3 00 10 00 00    	add    ebx,0x1000
 100b53a:	83 c4 10             	add    esp,0x10
 100b53d:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
 100b541:	76 c7                	jbe    100b50a <pagingSetVirtualRangeRO+0x4b>
/home/yogi/src/os/chrisOSKernel/src/paging.c:226
        startPTE=(uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,cnt);
        printd(DEBUG_PAGING,"0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
            
    }
}
 100b543:	83 c4 1c             	add    esp,0x1c
 100b546:	5b                   	pop    ebx
 100b547:	5e                   	pop    esi
 100b548:	5f                   	pop    edi
 100b549:	5d                   	pop    ebp
 100b54a:	c3                   	ret    

0100b54b <pagingUpdatePresentFlagA>:
pagingUpdatePresentFlagA():
/home/yogi/src/os/chrisOSKernel/src/paging.c:230

//Absolute version, page passed is already virtual
void pagingUpdatePresentFlagA(uintptr_t pageDirAddress, uint32_t address, bool present)
{
 100b54b:	56                   	push   esi
 100b54c:	53                   	push   ebx
 100b54d:	83 ec 04             	sub    esp,0x4
 100b550:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
 100b554:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/src/paging.c:231
    printd(DEBUG_PAGING,"kpagingUpdatePresentFlagA: Make 0x%08X %s\n", address, present?"present":"not present");
 100b558:	84 db                	test   bl,bl
 100b55a:	ba 94 64 06 01       	mov    edx,0x1066494
 100b55f:	b8 98 64 06 01       	mov    eax,0x1066498
 100b564:	0f 44 c2             	cmove  eax,edx
 100b567:	50                   	push   eax
 100b568:	56                   	push   esi
 100b569:	68 40 11 04 01       	push   0x1041140
 100b56e:	6a 40                	push   0x40
 100b570:	e8 82 e6 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:232
        uintptr_t* pagePTE= (uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,address&0xFFFFF000);
 100b575:	83 c4 08             	add    esp,0x8
 100b578:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
 100b57e:	56                   	push   esi
 100b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b583:	e8 0b fe ff ff       	call   100b393 <pagingGet4kPTEntryAddressCR3>
 100b588:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:233
    printd(DEBUG_PAGING,"kpagingUpdatePresentFlagA: updating entry 0x%08X\n", pagePTE);
 100b58a:	83 c4 0c             	add    esp,0xc
 100b58d:	50                   	push   eax
 100b58e:	68 6c 11 04 01       	push   0x104116c
 100b593:	6a 40                	push   0x40
 100b595:	e8 5d e6 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:234
    pagingUpdatePTEPresentFlag(pagePTE, present);
 100b59a:	83 c4 08             	add    esp,0x8
 100b59d:	0f b6 db             	movzx  ebx,bl
 100b5a0:	53                   	push   ebx
 100b5a1:	56                   	push   esi
 100b5a2:	e8 ce fe ff ff       	call   100b475 <pagingUpdatePTEPresentFlag>
/home/yogi/src/os/chrisOSKernel/src/paging.c:235
}
 100b5a7:	83 c4 14             	add    esp,0x14
 100b5aa:	5b                   	pop    ebx
 100b5ab:	5e                   	pop    esi
 100b5ac:	c3                   	ret    

0100b5ad <pagingUpdatePresentFlagV>:
pagingUpdatePresentFlagV():
/home/yogi/src/os/chrisOSKernel/src/paging.c:238

void pagingUpdatePresentFlagV(uintptr_t pageDirAddress,uint32_t address, bool present)
{
 100b5ad:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:240
    address+=KERNEL_PAGED_BASE_ADDRESS; 
    pagingUpdatePresentFlagA(pageDirAddress,address, present);
 100b5b0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
 100b5b5:	50                   	push   eax
 100b5b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 100b5ba:	2d 00 00 00 40       	sub    eax,0x40000000
 100b5bf:	50                   	push   eax
 100b5c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b5c4:	e8 82 ff ff ff       	call   100b54b <pagingUpdatePresentFlagA>
/home/yogi/src/os/chrisOSKernel/src/paging.c:241
}
 100b5c9:	83 c4 1c             	add    esp,0x1c
 100b5cc:	c3                   	ret    

0100b5cd <pagingMapPage>:
pagingMapPage():
/home/yogi/src/os/chrisOSKernel/src/paging.c:245

///Map a page to a new address
void pagingMapPage(uintptr_t pageDirAddress, uintptr_t virtualAddress, uintptr_t physicalAddress, uint8_t flags)
{
 100b5cd:	55                   	push   ebp
 100b5ce:	57                   	push   edi
 100b5cf:	56                   	push   esi
 100b5d0:	53                   	push   ebx
 100b5d1:	83 ec 24             	sub    esp,0x24
 100b5d4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
 100b5d8:	89 c1                	mov    ecx,eax
 100b5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:250
    uint32_t *dirPtr;
    uint32_t dirPtrVal;
    uint32_t *pagePtr;
    
    virtualAddress &= 0xFFFFF000;
 100b5de:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
 100b5e2:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/paging.c:251
    physicalAddress &= 0xFFFFF000;
 100b5e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
 100b5ec:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b5f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:253
    
    printd(DEBUG_PAGING,"pagingMapPage: Via CR3=0x%08X, mapping v=0x%08X to p=0x%08X with flags 0x%02X\n",pageDirAddress,virtualAddress,physicalAddress,flags);
 100b5f5:	0f b6 f9             	movzx  edi,cl
 100b5f8:	57                   	push   edi
 100b5f9:	50                   	push   eax
 100b5fa:	56                   	push   esi
 100b5fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
 100b5ff:	68 c0 1f 04 01       	push   0x1041fc0
 100b604:	6a 40                	push   0x40
 100b606:	e8 ec e5 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:258
    
    //Get pointer to the page directory
    dirPtr=(uint32_t*)pageDirAddress;
    //Get the appropriate entry in the page table
    dirPtrVal=dirPtr[(virtualAddress>>22)];
 100b60b:	89 f0                	mov    eax,esi
 100b60d:	c1 e8 16             	shr    eax,0x16
 100b610:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
 100b614:	8d 1c 81             	lea    ebx,[ecx+eax*4]
 100b617:	8b 2b                	mov    ebp,DWORD PTR [ebx]
/home/yogi/src/os/chrisOSKernel/src/paging.c:259
    if ((dirPtrVal&0xFFFFF000)==0x01102000)
 100b619:	89 e8                	mov    eax,ebp
 100b61b:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b620:	83 c4 20             	add    esp,0x20
 100b623:	3d 00 20 10 01       	cmp    eax,0x1102000
 100b628:	75 29                	jne    100b653 <pagingMapPage+0x86>
/home/yogi/src/os/chrisOSKernel/src/paging.c:261
    {
        printk("pmp:PDE=0x%08X, v=0x%08x, p=0x%08X\n",dirPtrVal,virtualAddress,physicalAddress);
 100b62a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
 100b62e:	56                   	push   esi
 100b62f:	55                   	push   ebp
 100b630:	68 10 20 04 01       	push   0x1042010
 100b635:	e8 a5 e5 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/paging.c:262
        printk("Caller return address is: 0x%08X\n",__builtin_return_address(0));
 100b63a:	83 c4 08             	add    esp,0x8
 100b63d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
 100b641:	68 34 20 04 01       	push   0x1042034
 100b646:	e8 94 e5 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/paging.c:263
        waitForKeyboardKey();
 100b64b:	e8 3b 7b ff ff       	call   100318b <waitForKeyboardKey>
 100b650:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:265
    }
    if (dirPtrVal==0)
 100b653:	85 ed                	test   ebp,ebp
 100b655:	75 56                	jne    100b6ad <pagingMapPage+0xe0>
/home/yogi/src/os/chrisOSKernel/src/paging.c:268
    {
        //Get a page for the page table
        pagePtr=(uint32_t*)pagingAllocatePagingTablePage();
 100b657:	e8 94 fc ff ff       	call   100b2f0 <pagingAllocatePagingTablePage>
 100b65c:	89 c5                	mov    ebp,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:269
        printd(DEBUG_PAGING,"pmp:Page table doesn't exist for address 0x%08X (CR3=0x%08X)\n",virtualAddress,pageDirAddress);
 100b65e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 100b662:	56                   	push   esi
 100b663:	68 58 20 04 01       	push   0x1042058
 100b668:	6a 40                	push   0x40
 100b66a:	e8 88 e5 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:271
        //Set the page directory entry to the newly allocated page, with flags
        dirPtr[(virtualAddress>>22)]=((uint32_t)(pagePtr) | flags);
 100b66f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
 100b674:	09 e8                	or     eax,ebp
 100b676:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:272
        printk("dirPtr value = 0x%08X\n",dirPtr[(virtualAddress>>22)]);
 100b678:	83 c4 08             	add    esp,0x8
 100b67b:	50                   	push   eax
 100b67c:	68 13 68 06 01       	push   0x1066813
 100b681:	e8 59 e5 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/paging.c:273
        printk("Caller return address is: 0x%08X, flags=0x%02X\n",__builtin_return_address(0),flags);
 100b686:	83 c4 0c             	add    esp,0xc
 100b689:	57                   	push   edi
 100b68a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
 100b68e:	68 98 20 04 01       	push   0x1042098
 100b693:	e8 47 e5 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/paging.c:274
        printd(DEBUG_PAGING,"pmp:Allocated page @ 0x%08X for the page table, PDE=0x%08X (flags=0x%02X)\n", pagePtr,dirPtr[(virtualAddress>>22)],flags);
 100b698:	89 3c 24             	mov    DWORD PTR [esp],edi
 100b69b:	ff 33                	push   DWORD PTR [ebx]
 100b69d:	55                   	push   ebp
 100b69e:	68 c8 20 04 01       	push   0x10420c8
 100b6a3:	6a 40                	push   0x40
 100b6a5:	e8 4d e5 ff ff       	call   1009bf7 <printd>
 100b6aa:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/paging.c:279
/*        ptrT[(virtualAddress&0x003FFFFF/4096)]=physicalAddress | flags;
        printd(DEBUG_PAGING,"kMapPage: Mapped v=0x%08X via dir=0x%08X, page=0x%08X, to p=0x%08X\n", virtualAddress, &dirPtr[(virtualAddress>>22)], &pagePtr[(virtualAddress&0x003FFFFF/4096)],pagePtr[(virtualAddress&0x003FFFFF/4096)]);
*/
    }
    if (dirPtr[(virtualAddress>>22)]==0)
 100b6ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
 100b6b0:	75 19                	jne    100b6cb <pagingMapPage+0xfe>
/home/yogi/src/os/chrisOSKernel/src/paging.c:280
        dirPtr[virtualAddress>>22]=(pageDirAddress + ((virtualAddress&0x003FFFFF)/4096)) | flags;
 100b6b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100b6b6:	25 00 f0 3f 00       	and    eax,0x3ff000
 100b6bb:	c1 e8 0c             	shr    eax,0xc
 100b6be:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
 100b6c2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
 100b6c7:	09 d0                	or     eax,edx
 100b6c9:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:286
    dirPtrVal=dirPtr[virtualAddress>>22];
    dirPtrVal=(dirPtrVal&0xFFFFF000);
    pagePtr=(uint32_t*)dirPtrVal;
    //Now ptrVal will point to offset within page table
    dirPtrVal=(virtualAddress&0x003FFFFF)/4096;
    pagePtr[dirPtrVal]=physicalAddress | flags;
 100b6cb:	8b 13                	mov    edx,DWORD PTR [ebx]
 100b6cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
 100b6d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100b6d7:	25 00 f0 3f 00       	and    eax,0x3ff000
 100b6dc:	c1 e8 0a             	shr    eax,0xa
 100b6df:	01 d0                	add    eax,edx
 100b6e1:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
 100b6e6:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
 100b6ea:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOSKernel/src/paging.c:287
    printd(DEBUG_PAGING,"pmp:v=0x%08X via dir=0x%08X, page=0x%08X, to p=0x%08X, flags=%02X\n", virtualAddress, &dirPtr[(virtualAddress>>22)], &pagePtr[dirPtrVal],pagePtr[dirPtrVal],flags);
 100b6ec:	83 ec 04             	sub    esp,0x4
 100b6ef:	57                   	push   edi
 100b6f0:	52                   	push   edx
 100b6f1:	50                   	push   eax
 100b6f2:	53                   	push   ebx
 100b6f3:	56                   	push   esi
 100b6f4:	68 14 21 04 01       	push   0x1042114
 100b6f9:	6a 40                	push   0x40
 100b6fb:	e8 f7 e4 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:288
}
 100b700:	83 c4 3c             	add    esp,0x3c
 100b703:	5b                   	pop    ebx
 100b704:	5e                   	pop    esi
 100b705:	5f                   	pop    edi
 100b706:	5d                   	pop    ebp
 100b707:	c3                   	ret    

0100b708 <pagingFindAvailableAddressToMapTo>:
pagingFindAvailableAddressToMapTo():
/home/yogi/src/os/chrisOSKernel/src/paging.c:20
extern uint64_t kE820MemoryBytes;
extern uint32_t kDebugLevel;
uint32_t kKernelPoolMemoryAddress;

uint32_t pagingFindAvailableAddressToMapTo(uintptr_t pageDirAddress,int pagesToFind)
{
 100b708:	55                   	push   ebp
 100b709:	57                   	push   edi
 100b70a:	56                   	push   esi
 100b70b:	53                   	push   ebx
 100b70c:	83 ec 30             	sub    esp,0x30
 100b70f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
/home/yogi/src/os/chrisOSKernel/src/paging.c:21
    uint32_t* dir=(uint32_t*)pageDirAddress;
 100b713:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
 100b717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:32
    uint32_t foundPageTableEntryNum;
    int dirEntryNumber=0;
    uint32_t lRetVal;

    currentPDE=dir;
    lastPDE=dir+(PAGE_SIZE/4);
 100b71b:	05 00 10 00 00       	add    eax,0x1000
 100b720:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:33
    printd(DEBUG_PAGING,"pFAATMT: Finding PTEs to accomodate 0x%08X pgs\n",pagesToFind);
 100b724:	55                   	push   ebp
 100b725:	68 58 21 04 01       	push   0x1042158
 100b72a:	6a 40                	push   0x40
 100b72c:	e8 c6 e4 ff ff       	call   1009bf7 <printd>
 100b731:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/paging.c:31
    uint32_t foundPageTableEntry;
    uint32_t foundPageTableEntryNum;
    int dirEntryNumber=0;
    uint32_t lRetVal;

    currentPDE=dir;
 100b734:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
 100b738:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:21
extern uint32_t kDebugLevel;
uint32_t kKernelPoolMemoryAddress;

uint32_t pagingFindAvailableAddressToMapTo(uintptr_t pageDirAddress,int pagesToFind)
{
    uint32_t* dir=(uint32_t*)pageDirAddress;
 100b73c:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:28
    uint32_t* currentPDE,*lastPDE;
    int foundPageEntryCount;
    bool found=false;
    uint32_t foundPageTableEntry;
    uint32_t foundPageTableEntryNum;
    int dirEntryNumber=0;
 100b73e:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:25
{
    uint32_t* dir=(uint32_t*)pageDirAddress;
    uint32_t* tablePtr;
    uint32_t* currentPDE,*lastPDE;
    int foundPageEntryCount;
    bool found=false;
 100b743:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
 100b748:	05 04 10 00 00       	add    eax,0x1004
 100b74d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:37
    lastPDE=dir+(PAGE_SIZE/4);
    printd(DEBUG_PAGING,"pFAATMT: Finding PTEs to accomodate 0x%08X pgs\n",pagesToFind);
    //Scan the page directory for an entry that is in use
    do
    {
        printd(DEBUG_PAGING,"pFAATMT: Finding existing page directory entry (0x%08X)\n",dir);
 100b751:	83 ec 04             	sub    esp,0x4
 100b754:	56                   	push   esi
 100b755:	68 88 21 04 01       	push   0x1042188
 100b75a:	6a 40                	push   0x40
 100b75c:	e8 96 e4 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:38
        for (uint32_t* cnt=currentPDE;cnt<=lastPDE;cnt++)
 100b761:	83 c4 10             	add    esp,0x10
 100b764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100b768:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
 100b76c:	39 c8                	cmp    eax,ecx
 100b76e:	77 32                	ja     100b7a2 <pagingFindAvailableAddressToMapTo+0x9a>
/home/yogi/src/os/chrisOSKernel/src/paging.c:40
        {
            if (*dir==0)
 100b770:	83 3e 00             	cmp    DWORD PTR [esi],0x0
 100b773:	0f 85 35 01 00 00    	jne    100b8ae <pagingFindAvailableAddressToMapTo+0x1a6>
 100b779:	83 c0 04             	add    eax,0x4
 100b77c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
 100b780:	29 c1                	sub    ecx,eax
 100b782:	89 c8                	mov    eax,ecx
 100b784:	c1 e8 02             	shr    eax,0x2
 100b787:	8d 4c 07 01          	lea    ecx,[edi+eax*1+0x1]
 100b78b:	eb 09                	jmp    100b796 <pagingFindAvailableAddressToMapTo+0x8e>
 100b78d:	83 3e 00             	cmp    DWORD PTR [esi],0x0
 100b790:	0f 85 18 01 00 00    	jne    100b8ae <pagingFindAvailableAddressToMapTo+0x1a6>
/home/yogi/src/os/chrisOSKernel/src/paging.c:42 (discriminator 2)
            {
                dir++;
 100b796:	83 c6 04             	add    esi,0x4
/home/yogi/src/os/chrisOSKernel/src/paging.c:43 (discriminator 2)
                dirEntryNumber++;
 100b799:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOSKernel/src/paging.c:38 (discriminator 2)
    printd(DEBUG_PAGING,"pFAATMT: Finding PTEs to accomodate 0x%08X pgs\n",pagesToFind);
    //Scan the page directory for an entry that is in use
    do
    {
        printd(DEBUG_PAGING,"pFAATMT: Finding existing page directory entry (0x%08X)\n",dir);
        for (uint32_t* cnt=currentPDE;cnt<=lastPDE;cnt++)
 100b79c:	39 cf                	cmp    edi,ecx
 100b79e:	75 ed                	jne    100b78d <pagingFindAvailableAddressToMapTo+0x85>
 100b7a0:	eb 02                	jmp    100b7a4 <pagingFindAvailableAddressToMapTo+0x9c>
/home/yogi/src/os/chrisOSKernel/src/paging.c:38
 100b7a2:	89 f9                	mov    ecx,edi
 100b7a4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
/home/yogi/src/os/chrisOSKernel/src/paging.c:50
            else
                break;
        }

        //If we didn't find a page directory in use, put the first entry into use
        if (*dir==0)
 100b7a8:	83 3e 00             	cmp    DWORD PTR [esi],0x0
 100b7ab:	75 62                	jne    100b80f <pagingFindAvailableAddressToMapTo+0x107>
/home/yogi/src/os/chrisOSKernel/src/paging.c:53
        {
            dir=(uint32_t*)pageDirAddress;
            *dir=(uint32_t)allocPages(PAGE_SIZE);
 100b7ad:	83 ec 0c             	sub    esp,0xc
 100b7b0:	68 00 10 00 00       	push   0x1000
 100b7b5:	e8 05 f4 ff ff       	call   100abbf <allocPages>
 100b7ba:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
 100b7be:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:54
            pagingMapPage(pageDirAddress,*dir,*dir,0x07);
 100b7c0:	6a 07                	push   0x7
 100b7c2:	50                   	push   eax
 100b7c3:	50                   	push   eax
 100b7c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
 100b7c8:	e8 00 fe ff ff       	call   100b5cd <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/paging.c:55
            pagingMapPage(KERNEL_PAGE_DIR_ADDRESS,*dir | KERNEL_PAGED_BASE_ADDRESS,*dir,0x03);
 100b7cd:	8b 03                	mov    eax,DWORD PTR [ebx]
 100b7cf:	83 c4 20             	add    esp,0x20
 100b7d2:	6a 03                	push   0x3
 100b7d4:	50                   	push   eax
 100b7d5:	0d 00 00 00 c0       	or     eax,0xc0000000
 100b7da:	50                   	push   eax
 100b7db:	68 00 a0 4b 00       	push   0x4ba000
 100b7e0:	e8 e8 fd ff ff       	call   100b5cd <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/paging.c:57
            *dir &= 0xFFFFF000;
            *dir |= 0x7;
 100b7e5:	8b 03                	mov    eax,DWORD PTR [ebx]
 100b7e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
 100b7eb:	25 00 f0 ff ff       	and    eax,0xfffff000
 100b7f0:	83 c8 07             	or     eax,0x7
 100b7f3:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:59
            dirEntryNumber=0;
            printd(DEBUG_PAGING,"pFAATMT: No available directory entry, allocated one at 0x%08X, placed at PDE entry 0 (0x%08X)\n",*dir,dir);
 100b7f5:	53                   	push   ebx
 100b7f6:	50                   	push   eax
 100b7f7:	68 c4 21 04 01       	push   0x10421c4
 100b7fc:	6a 40                	push   0x40
 100b7fe:	e8 f4 e3 ff ff       	call   1009bf7 <printd>
 100b803:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/paging.c:52
        }

        //If we didn't find a page directory in use, put the first entry into use
        if (*dir==0)
        {
            dir=(uint32_t*)pageDirAddress;
 100b806:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
/home/yogi/src/os/chrisOSKernel/src/paging.c:58
            *dir=(uint32_t)allocPages(PAGE_SIZE);
            pagingMapPage(pageDirAddress,*dir,*dir,0x07);
            pagingMapPage(KERNEL_PAGE_DIR_ADDRESS,*dir | KERNEL_PAGED_BASE_ADDRESS,*dir,0x03);
            *dir &= 0xFFFFF000;
            *dir |= 0x7;
            dirEntryNumber=0;
 100b80a:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:68
        foundPageEntryCount=0;
        foundPageTableEntry=0;
        foundPageTableEntryNum=0;
        
        tablePtr=(uint32_t*)*dir;
        tablePtr=(uint32_t*)((uint32_t)tablePtr & 0xFFFFF000);
 100b80f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100b813:	8b 00                	mov    eax,DWORD PTR [eax]
 100b815:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
 100b819:	89 c6                	mov    esi,eax
 100b81b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/paging.c:77
        
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Found PDE=0x%08X (0x%08X)\n",currentPDE,*currentPDE);
        
        //Find sequential table entries large enough to hold the requested amount of memory
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Finding free page table entries\n");
        for (int cnt=0;cnt<(PAGE_SIZE/4)-1;cnt++)
 100b821:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:65
        }

        currentPDE=dir;
        foundPageEntryCount=0;
        foundPageTableEntry=0;
        foundPageTableEntryNum=0;
 100b826:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:64
            printd(DEBUG_PAGING,"pFAATMT: No available directory entry, allocated one at 0x%08X, placed at PDE entry 0 (0x%08X)\n",*dir,dir);
        }

        currentPDE=dir;
        foundPageEntryCount=0;
        foundPageTableEntry=0;
 100b82b:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:63
            dirEntryNumber=0;
            printd(DEBUG_PAGING,"pFAATMT: No available directory entry, allocated one at 0x%08X, placed at PDE entry 0 (0x%08X)\n",*dir,dir);
        }

        currentPDE=dir;
        foundPageEntryCount=0;
 100b830:	bf 00 00 00 00       	mov    edi,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:80
        //Find sequential table entries large enough to hold the requested amount of memory
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Finding free page table entries\n");
        for (int cnt=0;cnt<(PAGE_SIZE/4)-1;cnt++)
        {
            //If entry is in use
            if (*tablePtr!=0)
 100b835:	83 3e 00             	cmp    DWORD PTR [esi],0x0
 100b838:	74 14                	je     100b84e <pagingFindAvailableAddressToMapTo+0x146>
/home/yogi/src/os/chrisOSKernel/src/paging.c:85
            {
                //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Page %u of %u is in use (0x%08X=0x%08X), starting again\n",foundEntryCount+1,pagesToFind,tablePtr,*tablePtr);
                //reset the found entry count and move to the next entry
                foundPageEntryCount=0;
                tablePtr++;
 100b83a:	83 c6 04             	add    esi,0x4
/home/yogi/src/os/chrisOSKernel/src/paging.c:87
                foundPageTableEntry=0;
                foundPageTableEntryNum=0;
 100b83d:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:86
            {
                //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Page %u of %u is in use (0x%08X=0x%08X), starting again\n",foundEntryCount+1,pagesToFind,tablePtr,*tablePtr);
                //reset the found entry count and move to the next entry
                foundPageEntryCount=0;
                tablePtr++;
                foundPageTableEntry=0;
 100b842:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:84
            //If entry is in use
            if (*tablePtr!=0)
            {
                //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Page %u of %u is in use (0x%08X=0x%08X), starting again\n",foundEntryCount+1,pagesToFind,tablePtr,*tablePtr);
                //reset the found entry count and move to the next entry
                foundPageEntryCount=0;
 100b847:	bf 00 00 00 00       	mov    edi,0x0
 100b84c:	eb 0f                	jmp    100b85d <pagingFindAvailableAddressToMapTo+0x155>
/home/yogi/src/os/chrisOSKernel/src/paging.c:92
                foundPageTableEntryNum=0;
            }
            else
            {
                //Entry not in use, increment the found entry count
                foundPageEntryCount++;
 100b84e:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOSKernel/src/paging.c:94
                //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Page %u of %u available ... continuing\n",foundEntryCount,pagesToFind);
                if (foundPageTableEntry==0)
 100b851:	85 db                	test   ebx,ebx
 100b853:	75 04                	jne    100b859 <pagingFindAvailableAddressToMapTo+0x151>
/home/yogi/src/os/chrisOSKernel/src/paging.c:96
                {
                    foundPageTableEntry=(uint32_t)tablePtr;
 100b855:	89 f3                	mov    ebx,esi
/home/yogi/src/os/chrisOSKernel/src/paging.c:97
                    foundPageTableEntryNum=cnt;
 100b857:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:100
                }
                //If we found enough entries which aren't in use, bail out of the FOR
                if (foundPageEntryCount==pagesToFind)
 100b859:	39 fd                	cmp    ebp,edi
 100b85b:	74 2b                	je     100b888 <pagingFindAvailableAddressToMapTo+0x180>
/home/yogi/src/os/chrisOSKernel/src/paging.c:77 (discriminator 2)
        
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Found PDE=0x%08X (0x%08X)\n",currentPDE,*currentPDE);
        
        //Find sequential table entries large enough to hold the requested amount of memory
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Finding free page table entries\n");
        for (int cnt=0;cnt<(PAGE_SIZE/4)-1;cnt++)
 100b85d:	83 c0 01             	add    eax,0x1
 100b860:	3d ff 03 00 00       	cmp    eax,0x3ff
 100b865:	75 ce                	jne    100b835 <pagingFindAvailableAddressToMapTo+0x12d>
/home/yogi/src/os/chrisOSKernel/src/paging.c:109
                    break;
                }
            }
        }
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Not enough pages at dir entry 0x%08X (%u-%u)\n",currentPDE,foundEntryCount,pagesToFind);
        dir++;
 100b867:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
 100b86b:	8d 70 04             	lea    esi,[eax+0x4]
/home/yogi/src/os/chrisOSKernel/src/paging.c:110
        dirEntryNumber++;
 100b86e:	8d 79 01             	lea    edi,[ecx+0x1]
/home/yogi/src/os/chrisOSKernel/src/paging.c:111
    } while ( !found && currentPDE<lastPDE);
 100b871:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
 100b875:	0f 92 c0             	setb   al
 100b878:	38 44 24 17          	cmp    BYTE PTR [esp+0x17],al
 100b87c:	0f 82 cf fe ff ff    	jb     100b751 <pagingFindAvailableAddressToMapTo+0x49>
 100b882:	89 d7                	mov    edi,edx
 100b884:	89 ce                	mov    esi,ecx
 100b886:	eb 09                	jmp    100b891 <pagingFindAvailableAddressToMapTo+0x189>
 100b888:	89 d7                	mov    edi,edx
 100b88a:	89 ce                	mov    esi,ecx
/home/yogi/src/os/chrisOSKernel/src/paging.c:103
                }
                //If we found enough entries which aren't in use, bail out of the FOR
                if (foundPageEntryCount==pagesToFind)
                {
                    //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Found available page entries at entry 0x%08X\n",foundPageTableEntry);
                    found=true;
 100b88c:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
/home/yogi/src/os/chrisOSKernel/src/paging.c:113
        //printd(DEBUG_PAGING,"pagingFindAvailablePageTable: Not enough pages at dir entry 0x%08X (%u-%u)\n",currentPDE,foundEntryCount,pagesToFind);
        dir++;
        dirEntryNumber++;
    } while ( !found && currentPDE<lastPDE);
    
    if (!found)
 100b891:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
 100b896:	75 21                	jne    100b8b9 <pagingFindAvailableAddressToMapTo+0x1b1>
/home/yogi/src/os/chrisOSKernel/src/paging.c:114
        panic("pFAATMT: Could not find a free PTE, PDE=0x%08X\n",pageDirAddress);
 100b898:	83 ec 08             	sub    esp,0x8
 100b89b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
 100b89f:	68 24 22 04 01       	push   0x1042224
 100b8a4:	e8 af de ff ff       	call   1009758 <panic>
 100b8a9:	83 c4 10             	add    esp,0x10
 100b8ac:	eb 0b                	jmp    100b8b9 <pagingFindAvailableAddressToMapTo+0x1b1>
/home/yogi/src/os/chrisOSKernel/src/paging.c:58
            *dir=(uint32_t)allocPages(PAGE_SIZE);
            pagingMapPage(pageDirAddress,*dir,*dir,0x07);
            pagingMapPage(KERNEL_PAGE_DIR_ADDRESS,*dir | KERNEL_PAGED_BASE_ADDRESS,*dir,0x03);
            *dir &= 0xFFFFF000;
            *dir |= 0x7;
            dirEntryNumber=0;
 100b8ae:	89 f9                	mov    ecx,edi
 100b8b0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
 100b8b4:	e9 56 ff ff ff       	jmp    100b80f <pagingFindAvailableAddressToMapTo+0x107>
/home/yogi/src/os/chrisOSKernel/src/paging.c:118
    if (!found)
        panic("pFAATMT: Could not find a free PTE, PDE=0x%08X\n",pageDirAddress);

    dirEntryNumber--;
    
    printd(DEBUG_PAGING,"pFAATMT: dirEntry#=0x%08X, ptEntry#=0x%08X\n",dirEntryNumber,foundPageTableEntryNum);
 100b8b9:	57                   	push   edi
 100b8ba:	56                   	push   esi
 100b8bb:	68 54 22 04 01       	push   0x1042254
 100b8c0:	6a 40                	push   0x40
 100b8c2:	e8 30 e3 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:119
    lRetVal=(uint32_t)((dirEntryNumber*(PAGE_SIZE*1024)) + (foundPageTableEntryNum*PAGE_SIZE));
 100b8c7:	c1 e6 16             	shl    esi,0x16
 100b8ca:	89 f8                	mov    eax,edi
 100b8cc:	c1 e0 0c             	shl    eax,0xc
 100b8cf:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:120
    printd(DEBUG_PAGING,"pFAATMT: Found PDE 0x%08X, starting PTE 0x%08X\n",currentPDE,foundPageTableEntry);
 100b8d1:	53                   	push   ebx
 100b8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b8d6:	68 80 22 04 01       	push   0x1042280
 100b8db:	6a 40                	push   0x40
 100b8dd:	e8 15 e3 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:121
    printd(DEBUG_PAGING,"\tfor 0x%08X bytes at virt address 0x%08X\n",pagesToFind*PAGE_SIZE,lRetVal);
 100b8e2:	83 c4 20             	add    esp,0x20
 100b8e5:	56                   	push   esi
 100b8e6:	89 e8                	mov    eax,ebp
 100b8e8:	c1 e0 0c             	shl    eax,0xc
 100b8eb:	50                   	push   eax
 100b8ec:	68 b0 22 04 01       	push   0x10422b0
 100b8f1:	6a 40                	push   0x40
 100b8f3:	e8 ff e2 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:123
    return lRetVal;
}
 100b8f8:	89 f0                	mov    eax,esi
 100b8fa:	83 c4 3c             	add    esp,0x3c
 100b8fd:	5b                   	pop    ebx
 100b8fe:	5e                   	pop    esi
 100b8ff:	5f                   	pop    edi
 100b900:	5d                   	pop    ebp
 100b901:	c3                   	ret    

0100b902 <pagingMapPageRange>:
pagingMapPageRange():
/home/yogi/src/os/chrisOSKernel/src/paging.c:291
    pagePtr[dirPtrVal]=physicalAddress | flags;
    printd(DEBUG_PAGING,"pmp:v=0x%08X via dir=0x%08X, page=0x%08X, to p=0x%08X, flags=%02X\n", virtualAddress, &dirPtr[(virtualAddress>>22)], &pagePtr[dirPtrVal],pagePtr[dirPtrVal],flags);
}

void pagingMapPageRange(uintptr_t pageDirAddress, uintptr_t startVirtualAddress, uintptr_t endVirtualAddress, uintptr_t startPhysicalAddress,uint8_t flags)
{
 100b902:	55                   	push   ebp
 100b903:	57                   	push   edi
 100b904:	56                   	push   esi
 100b905:	53                   	push   ebx
 100b906:	83 ec 0c             	sub    esp,0xc
 100b909:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 100b90d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
 100b911:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
 100b915:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/src/paging.c:292
    while (startVirtualAddress<=endVirtualAddress)
 100b91a:	3b 5c 24 28          	cmp    ebx,DWORD PTR [esp+0x28]
 100b91e:	77 21                	ja     100b941 <pagingMapPageRange+0x3f>
/home/yogi/src/os/chrisOSKernel/src/paging.c:293
        pagingMapPage(pageDirAddress,
 100b920:	0f b6 f8             	movzx  edi,al
 100b923:	81 c6 00 10 00 00    	add    esi,0x1000
 100b929:	81 c3 00 10 00 00    	add    ebx,0x1000
 100b92f:	57                   	push   edi
 100b930:	56                   	push   esi
 100b931:	53                   	push   ebx
 100b932:	55                   	push   ebp
 100b933:	e8 95 fc ff ff       	call   100b5cd <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/paging.c:292
    printd(DEBUG_PAGING,"pmp:v=0x%08X via dir=0x%08X, page=0x%08X, to p=0x%08X, flags=%02X\n", virtualAddress, &dirPtr[(virtualAddress>>22)], &pagePtr[dirPtrVal],pagePtr[dirPtrVal],flags);
}

void pagingMapPageRange(uintptr_t pageDirAddress, uintptr_t startVirtualAddress, uintptr_t endVirtualAddress, uintptr_t startPhysicalAddress,uint8_t flags)
{
    while (startVirtualAddress<=endVirtualAddress)
 100b938:	83 c4 10             	add    esp,0x10
 100b93b:	39 5c 24 28          	cmp    DWORD PTR [esp+0x28],ebx
 100b93f:	73 e2                	jae    100b923 <pagingMapPageRange+0x21>
/home/yogi/src/os/chrisOSKernel/src/paging.c:297
        pagingMapPage(pageDirAddress,
                startVirtualAddress+=0x1000,
                startPhysicalAddress+=0x1000,
                flags);
}
 100b941:	83 c4 0c             	add    esp,0xc
 100b944:	5b                   	pop    ebx
 100b945:	5e                   	pop    esi
 100b946:	5f                   	pop    edi
 100b947:	5d                   	pop    ebp
 100b948:	c3                   	ret    

0100b949 <pagingMapPageCount>:
pagingMapPageCount():
/home/yogi/src/os/chrisOSKernel/src/paging.c:299
void pagingMapPageCount(uintptr_t pageDirAddress, uintptr_t virtualAddress, uintptr_t physicalAddress,int pageCount, uint8_t flags)
{
 100b949:	55                   	push   ebp
 100b94a:	57                   	push   edi
 100b94b:	56                   	push   esi
 100b94c:	53                   	push   ebx
 100b94d:	83 ec 0c             	sub    esp,0xc
 100b950:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
 100b954:	0f b6 54 24 30       	movzx  edx,BYTE PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/src/paging.c:300
    for (int cnt=0;cnt<pageCount;cnt++)
 100b959:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
 100b95e:	7e 32                	jle    100b992 <pagingMapPageCount+0x49>
 100b960:	89 c3                	mov    ebx,eax
 100b962:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/src/paging.c:301
        pagingMapPage(pageDirAddress,virtualAddress+(0x1000*cnt),physicalAddress+(0x1000*cnt),flags);
 100b967:	0f b6 fa             	movzx  edi,dl
 100b96a:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
 100b96e:	29 c5                	sub    ebp,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:301 (discriminator 3)
 100b970:	57                   	push   edi
 100b971:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
 100b975:	50                   	push   eax
 100b976:	53                   	push   ebx
 100b977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 100b97b:	e8 4d fc ff ff       	call   100b5cd <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/paging.c:300 (discriminator 3)
                startPhysicalAddress+=0x1000,
                flags);
}
void pagingMapPageCount(uintptr_t pageDirAddress, uintptr_t virtualAddress, uintptr_t physicalAddress,int pageCount, uint8_t flags)
{
    for (int cnt=0;cnt<pageCount;cnt++)
 100b980:	83 c6 01             	add    esi,0x1
 100b983:	81 c3 00 10 00 00    	add    ebx,0x1000
 100b989:	83 c4 10             	add    esp,0x10
 100b98c:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
 100b990:	75 de                	jne    100b970 <pagingMapPageCount+0x27>
/home/yogi/src/os/chrisOSKernel/src/paging.c:302
        pagingMapPage(pageDirAddress,virtualAddress+(0x1000*cnt),physicalAddress+(0x1000*cnt),flags);
}
 100b992:	83 c4 0c             	add    esp,0xc
 100b995:	5b                   	pop    ebx
 100b996:	5e                   	pop    esi
 100b997:	5f                   	pop    edi
 100b998:	5d                   	pop    ebp
 100b999:	c3                   	ret    

0100b99a <pagingMapPageIntoKernel>:
pagingMapPageIntoKernel():
/home/yogi/src/os/chrisOSKernel/src/paging.c:306

//Can only be called by kernel code
bool pagingMapPageIntoKernel(uintptr_t processCR3, uintptr_t virtualAddress, uint8_t flags)
{
 100b99a:	56                   	push   esi
 100b99b:	53                   	push   ebx
 100b99c:	83 ec 0c             	sub    esp,0xc
 100b99f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
 100b9a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/src/paging.c:308
    
    pagingMapPage(KERNEL_PAGE_DIR_ADDRESS, virtualAddress, pagingGet4kPTEntryValueCR3(processCR3,virtualAddress), flags);
 100b9a7:	56                   	push   esi
 100b9a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b9ac:	e8 25 fa ff ff       	call   100b3d6 <pagingGet4kPTEntryValueCR3>
 100b9b1:	0f b6 db             	movzx  ebx,bl
 100b9b4:	53                   	push   ebx
 100b9b5:	50                   	push   eax
 100b9b6:	56                   	push   esi
 100b9b7:	68 00 a0 4b 00       	push   0x4ba000
 100b9bc:	e8 0c fc ff ff       	call   100b5cd <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/paging.c:309
}
 100b9c1:	83 c4 24             	add    esp,0x24
 100b9c4:	5b                   	pop    ebx
 100b9c5:	5e                   	pop    esi
 100b9c6:	c3                   	ret    

0100b9c7 <isPageMapped>:
isPageMapped():
/home/yogi/src/os/chrisOSKernel/src/paging.c:312

bool isPageMapped(uintptr_t pageDirAddress, uintptr_t Address)
{
 100b9c7:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOSKernel/src/paging.c:313
    if (!pagingGet4kPTEntryValueCR3(pageDirAddress,Address))
 100b9ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b9ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100b9d2:	e8 ff f9 ff ff       	call   100b3d6 <pagingGet4kPTEntryValueCR3>
 100b9d7:	85 c0                	test   eax,eax
 100b9d9:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOSKernel/src/paging.c:316
        return false;
    return true;
}
 100b9dc:	83 c4 1c             	add    esp,0x1c
 100b9df:	c3                   	ret    

0100b9e0 <unMapPage>:
unMapPage():
/home/yogi/src/os/chrisOSKernel/src/paging.c:319

void unMapPage(uintptr_t pageDirAddress, uintptr_t pageToUnmap, uint8_t newFlags)
{
 100b9e0:	57                   	push   edi
 100b9e1:	56                   	push   esi
 100b9e2:	53                   	push   ebx
 100b9e3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
 100b9e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
/home/yogi/src/os/chrisOSKernel/src/paging.c:324
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)pageDirAddress;
    ptrVal=ptr[(pageToUnmap>>22)];
 100b9eb:	89 c8                	mov    eax,ecx
 100b9ed:	c1 e8 16             	shr    eax,0x16
 100b9f0:	c1 e0 02             	shl    eax,0x2
 100b9f3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
 100b9f7:	8b 10                	mov    edx,DWORD PTR [eax]
/home/yogi/src/os/chrisOSKernel/src/paging.c:325
    if (ptrVal==0 && pageToUnmap < kE820MemoryBytes)
 100b9f9:	85 d2                	test   edx,edx
 100b9fb:	75 4b                	jne    100ba48 <unMapPage+0x68>
/home/yogi/src/os/chrisOSKernel/src/paging.c:325 (discriminator 1)
 100b9fd:	bf 00 00 00 00       	mov    edi,0x0
 100ba02:	3b 3d 8c 95 12 00    	cmp    edi,DWORD PTR ds:0x12958c
 100ba08:	72 08                	jb     100ba12 <unMapPage+0x32>
 100ba0a:	3b 0d 88 95 12 00    	cmp    ecx,DWORD PTR ds:0x129588
 100ba10:	73 36                	jae    100ba48 <unMapPage+0x68>
/home/yogi/src/os/chrisOSKernel/src/paging.c:328
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(pageToUnmap>>22)]=0x20000063;
 100ba12:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os/chrisOSKernel/src/paging.c:329
        ptrT[(pageToUnmap&0x003FFFFF/4096)]=0 | newFlags;
 100ba18:	89 ca                	mov    edx,ecx
 100ba1a:	81 e2 ff 03 00 00    	and    edx,0x3ff
 100ba20:	8d 34 95 00 00 00 20 	lea    esi,[edx*4+0x20000000]
 100ba27:	0f b6 db             	movzx  ebx,bl
 100ba2a:	89 1c 95 00 00 00 20 	mov    DWORD PTR [edx*4+0x20000000],ebx
/home/yogi/src/os/chrisOSKernel/src/paging.c:330
        printd(DEBUG_PAGING,"kMapPage: Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", pageToUnmap, &ptr[(pageToUnmap>>22)], &ptrT[(pageToUnmap&0x003FFFFF/4096)]);
 100ba31:	83 ec 0c             	sub    esp,0xc
 100ba34:	56                   	push   esi
 100ba35:	50                   	push   eax
 100ba36:	51                   	push   ecx
 100ba37:	68 1c 12 04 01       	push   0x104121c
 100ba3c:	6a 40                	push   0x40
 100ba3e:	e8 b4 e1 ff ff       	call   1009bf7 <printd>
 100ba43:	83 c4 20             	add    esp,0x20
 100ba46:	eb 2f                	jmp    100ba77 <unMapPage+0x97>
/home/yogi/src/os/chrisOSKernel/src/paging.c:341
        ptrVal=ptr[pageToUnmap>>22];
        ptrVal=(ptrVal&0xFFFFF000);
        ptrT=(uint32_t*)ptrVal;
        //Now ptrVal will point to offset within page table
        ptrVal=(pageToUnmap&0x003FFFFF)/4096;
        ptrT[ptrVal]=0 | newFlags;
 100ba48:	89 d6                	mov    esi,edx
 100ba4a:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
 100ba50:	89 ca                	mov    edx,ecx
 100ba52:	c1 ea 0a             	shr    edx,0xa
 100ba55:	81 e2 fc 0f 00 00    	and    edx,0xffc
 100ba5b:	01 f2                	add    edx,esi
 100ba5d:	0f b6 db             	movzx  ebx,bl
 100ba60:	89 1a                	mov    DWORD PTR [edx],ebx
/home/yogi/src/os/chrisOSKernel/src/paging.c:342
        printd(DEBUG_PAGING,"2) Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", pageToUnmap, &ptr[(pageToUnmap>>22)], &ptrT[ptrVal]);
 100ba62:	83 ec 0c             	sub    esp,0xc
 100ba65:	52                   	push   edx
 100ba66:	50                   	push   eax
 100ba67:	51                   	push   ecx
 100ba68:	68 54 12 04 01       	push   0x1041254
 100ba6d:	6a 40                	push   0x40
 100ba6f:	e8 83 e1 ff ff       	call   1009bf7 <printd>
 100ba74:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/paging.c:344
    }
}
 100ba77:	5b                   	pop    ebx
 100ba78:	5e                   	pop    esi
 100ba79:	5f                   	pop    edi
 100ba7a:	c3                   	ret    

0100ba7b <pagingSetPhysicalRangeRO>:
pagingSetPhysicalRangeRO():
/home/yogi/src/os/chrisOSKernel/src/paging.c:347

void pagingSetPhysicalRangeRO(uintptr_t pageDirAddress, uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
 100ba7b:	83 ec 14             	sub    esp,0x14
 100ba7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
 100ba82:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
/home/yogi/src/os/chrisOSKernel/src/paging.c:348
    printd(DEBUG_PAGING,"kMakePhysicalRangeRO: Make 0x%08X(0x%08X)-0x%08X(0x%08X) r/o\n", startAddy, startAddy&0xFffff000, endAddy, endAddy&0xFFFFF000);
 100ba86:	89 d1                	mov    ecx,edx
 100ba88:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
 100ba8e:	51                   	push   ecx
 100ba8f:	52                   	push   edx
 100ba90:	89 c2                	mov    edx,eax
 100ba92:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
 100ba98:	52                   	push   edx
 100ba99:	50                   	push   eax
 100ba9a:	68 84 12 04 01       	push   0x1041284
 100ba9f:	6a 40                	push   0x40
 100baa1:	e8 51 e1 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:349
        panic("fix this!!!");
 100baa6:	83 c4 14             	add    esp,0x14
 100baa9:	68 2a 68 06 01       	push   0x106682a
 100baae:	e8 a5 dc ff ff       	call   1009758 <panic>
/home/yogi/src/os/chrisOSKernel/src/paging.c:351
        //SetVirtualRangeRO((startAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, (endAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, readOnly);
}
 100bab3:	83 c4 1c             	add    esp,0x1c
 100bab6:	c3                   	ret    

0100bab7 <pagingSetPageInUseFlag>:
pagingSetPageInUseFlag():
/home/yogi/src/os/chrisOSKernel/src/paging.c:354

void pagingSetPageInUseFlag(uintptr_t pageDirAddress, uintptr_t address, bool inUse)
{
 100bab7:	56                   	push   esi
 100bab8:	53                   	push   ebx
 100bab9:	83 ec 04             	sub    esp,0x4
 100babc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 100bac0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/paging.c:356
    uintptr_t* ptEntry;
    printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
 100bac4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
 100bac9:	74 38                	je     100bb03 <pagingSetPageInUseFlag+0x4c>
 100bacb:	68 a4 64 06 01       	push   0x10664a4
 100bad0:	53                   	push   ebx
 100bad1:	68 c4 12 04 01       	push   0x10412c4
 100bad6:	6a 40                	push   0x40
 100bad8:	e8 1a e1 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:357
    ptEntry=(uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,address);
 100badd:	83 c4 08             	add    esp,0x8
 100bae0:	53                   	push   ebx
 100bae1:	56                   	push   esi
 100bae2:	e8 ac f8 ff ff       	call   100b393 <pagingGet4kPTEntryAddressCR3>
 100bae7:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:358
    printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
 100bae9:	ff 30                	push   DWORD PTR [eax]
 100baeb:	50                   	push   eax
 100baec:	68 08 13 04 01       	push   0x1041308
 100baf1:	6a 40                	push   0x40
 100baf3:	e8 ff e0 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:360
    if (inUse)
        *ptEntry|=PAGING_IN_USE_FLAG_MASK;
 100baf8:	81 0b 00 08 00 00    	or     DWORD PTR [ebx],0x800
 100bafe:	83 c4 20             	add    esp,0x20
 100bb01:	eb 36                	jmp    100bb39 <pagingSetPageInUseFlag+0x82>
/home/yogi/src/os/chrisOSKernel/src/paging.c:356
}

void pagingSetPageInUseFlag(uintptr_t pageDirAddress, uintptr_t address, bool inUse)
{
    uintptr_t* ptEntry;
    printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
 100bb03:	68 a0 64 06 01       	push   0x10664a0
 100bb08:	53                   	push   ebx
 100bb09:	68 c4 12 04 01       	push   0x10412c4
 100bb0e:	6a 40                	push   0x40
 100bb10:	e8 e2 e0 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:357
    ptEntry=(uintptr_t*)pagingGet4kPTEntryAddressCR3(pageDirAddress,address);
 100bb15:	83 c4 08             	add    esp,0x8
 100bb18:	53                   	push   ebx
 100bb19:	56                   	push   esi
 100bb1a:	e8 74 f8 ff ff       	call   100b393 <pagingGet4kPTEntryAddressCR3>
 100bb1f:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/paging.c:358
    printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
 100bb21:	ff 30                	push   DWORD PTR [eax]
 100bb23:	50                   	push   eax
 100bb24:	68 08 13 04 01       	push   0x1041308
 100bb29:	6a 40                	push   0x40
 100bb2b:	e8 c7 e0 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/paging.c:362
    if (inUse)
        *ptEntry|=PAGING_IN_USE_FLAG_MASK;
    else
        *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
 100bb30:	81 23 ff f7 ff ff    	and    DWORD PTR [ebx],0xfffff7ff
 100bb36:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/paging.c:363
}
 100bb39:	83 c4 04             	add    esp,0x4
 100bb3c:	5b                   	pop    ebx
 100bb3d:	5e                   	pop    esi
 100bb3e:	c3                   	ret    

0100bb3f <pagingSetPageRangeInUseFlag>:
pagingSetPageRangeInUseFlag():
/home/yogi/src/os/chrisOSKernel/src/paging.c:366

void pagingSetPageRangeInUseFlag(uintptr_t pageDirAddress, uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
 100bb3f:	55                   	push   ebp
 100bb40:	57                   	push   edi
 100bb41:	56                   	push   esi
 100bb42:	53                   	push   ebx
 100bb43:	83 ec 0c             	sub    esp,0xc
 100bb46:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 100bb4a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
 100bb4e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
 100bb52:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
/home/yogi/src/os/chrisOSKernel/src/paging.c:367
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
 100bb57:	39 fb                	cmp    ebx,edi
 100bb59:	73 19                	jae    100bb74 <pagingSetPageRangeInUseFlag+0x35>
/home/yogi/src/os/chrisOSKernel/src/paging.c:368 (discriminator 3)
        pagingSetPageInUseFlag(pageDirAddress,cnt,inUse);
 100bb5b:	0f b6 f0             	movzx  esi,al
 100bb5e:	83 ec 04             	sub    esp,0x4
 100bb61:	56                   	push   esi
 100bb62:	53                   	push   ebx
 100bb63:	55                   	push   ebp
 100bb64:	e8 4e ff ff ff       	call   100bab7 <pagingSetPageInUseFlag>
 100bb69:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
/home/yogi/src/os/chrisOSKernel/src/paging.c:367 (discriminator 3)
        *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}

void pagingSetPageRangeInUseFlag(uintptr_t pageDirAddress, uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
 100bb6d:	83 c4 10             	add    esp,0x10
 100bb70:	39 fb                	cmp    ebx,edi
 100bb72:	72 ea                	jb     100bb5e <pagingSetPageRangeInUseFlag+0x1f>
/home/yogi/src/os/chrisOSKernel/src/paging.c:369
        pagingSetPageInUseFlag(pageDirAddress,cnt,inUse);
}
 100bb74:	83 c4 0c             	add    esp,0xc
 100bb77:	5b                   	pop    ebx
 100bb78:	5e                   	pop    esi
 100bb79:	5f                   	pop    edi
 100bb7a:	5d                   	pop    ebp
 100bb7b:	c3                   	ret    

0100bb7c <destroyProcess>:
destroyProcess():
/home/yogi/src/os/chrisOSKernel/src/process.c:21

extern elfInfo_t* kExecLoadInfo;
extern int kExecLoadCount;

void destroyProcess(process_t* process)
{
 100bb7c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/src/process.c:22
    freePage(process);
 100bb7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
 100bb83:	e8 a2 f1 ff ff       	call   100ad2a <freePage>
/home/yogi/src/os/chrisOSKernel/src/process.c:23
}
 100bb88:	83 c4 1c             	add    esp,0x1c
 100bb8b:	c3                   	ret    

0100bb8c <createProcess>:
createProcess():
/home/yogi/src/os/chrisOSKernel/src/process.c:26

process_t* createProcess(char* path,bool kernelProcess)
{
 100bb8c:	57                   	push   edi
 100bb8d:	56                   	push   esi
 100bb8e:	53                   	push   ebx
 100bb8f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
 100bb93:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
/home/yogi/src/os/chrisOSKernel/src/process.c:31

    process_t* process;
    

    printd(DEBUG_PROCESS,"Creating %s process for %s\n",kernelProcess?"kernel":"user",path);
 100bb97:	89 f0                	mov    eax,esi
 100bb99:	84 c0                	test   al,al
 100bb9b:	ba 3d 68 06 01       	mov    edx,0x106683d
 100bba0:	b8 36 68 06 01       	mov    eax,0x1066836
 100bba5:	0f 44 c2             	cmove  eax,edx
 100bba8:	57                   	push   edi
 100bba9:	50                   	push   eax
 100bbaa:	68 42 68 06 01       	push   0x1066842
 100bbaf:	68 00 00 04 00       	push   0x40000
 100bbb4:	e8 3e e0 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/process.c:32
    process=(process_t*)malloc(sizeof(process_t));
 100bbb9:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
 100bbc0:	e8 97 f3 ff ff       	call   100af5c <malloc>
 100bbc5:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/process.c:33
    process->path=(char*)malloc(512);
 100bbc7:	c7 04 24 00 02 00 00 	mov    DWORD PTR [esp],0x200
 100bbce:	e8 89 f3 ff ff       	call   100af5c <malloc>
 100bbd3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
/home/yogi/src/os/chrisOSKernel/src/process.c:34
    printd(DEBUG_PROCESS,"createProcess: Malloc'd 0x%08X for process->path\n",process->path);
 100bbd6:	83 c4 0c             	add    esp,0xc
 100bbd9:	50                   	push   eax
 100bbda:	68 dc 22 04 01       	push   0x10422dc
 100bbdf:	68 00 00 04 00       	push   0x40000
 100bbe4:	e8 0e e0 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/process.c:35
    strcpy(process->path,path);
 100bbe9:	83 c4 08             	add    esp,0x8
 100bbec:	57                   	push   edi
 100bbed:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 100bbf0:	e8 bb e0 ff ff       	call   1009cb0 <strcpy>
/home/yogi/src/os/chrisOSKernel/src/process.c:36
    printd(DEBUG_PROCESS,"createProcess: Copied path (0x%08X) to process->path (0x%08X)\n",path,process->path);
 100bbf5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 100bbf8:	57                   	push   edi
 100bbf9:	68 10 23 04 01       	push   0x1042310
 100bbfe:	68 00 00 04 00       	push   0x40000
 100bc03:	e8 ef df ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/process.c:37
    printd(DEBUG_PROCESS,"process->path (0x%08X)=%s\n",process->path,process->path);
 100bc08:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
 100bc0b:	83 c4 20             	add    esp,0x20
 100bc0e:	50                   	push   eax
 100bc0f:	50                   	push   eax
 100bc10:	68 5e 68 06 01       	push   0x106685e
 100bc15:	68 00 00 04 00       	push   0x40000
 100bc1a:	e8 d8 df ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/process.c:38
    process->elf=&kExecLoadInfo[kExecLoadCount++];
 100bc1f:	a1 40 99 12 00       	mov    eax,ds:0x129940
 100bc24:	8d 50 01             	lea    edx,[eax+0x1]
 100bc27:	89 15 40 99 12 00    	mov    DWORD PTR ds:0x129940,edx
 100bc2d:	69 c0 d9 18 00 00    	imul   eax,eax,0x18d9
 100bc33:	03 05 3c 99 12 00    	add    eax,DWORD PTR ds:0x12993c
 100bc39:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
/home/yogi/src/os/chrisOSKernel/src/process.c:39
    process->task=createTask(kernelProcess);
 100bc3c:	89 f0                	mov    eax,esi
 100bc3e:	0f b6 f0             	movzx  esi,al
 100bc41:	89 34 24             	mov    DWORD PTR [esp],esi
 100bc44:	e8 84 11 00 00       	call   100cdcd <createTask>
 100bc49:	89 03                	mov    DWORD PTR [ebx],eax
/home/yogi/src/os/chrisOSKernel/src/process.c:58
        process->task->tss->FS=getNonKernelDataGDTIndex();
        process->task->tss->GS=getNonKernelDataGDTIndex();
    }
*/
    //CR3 was set and PDir created by createTask.  Page tables will be created by the load process
    if (!sysLoadElf(process->path,process->elf,process->task->tss->CR3,false))
 100bc4b:	6a 00                	push   0x0
 100bc4d:	8b 00                	mov    eax,DWORD PTR [eax]
 100bc4f:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100bc52:	ff 73 08             	push   DWORD PTR [ebx+0x8]
 100bc55:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
 100bc58:	e8 22 06 00 00       	call   100c27f <sysLoadElf>
 100bc5d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/process.c:59
        return NULL;
 100bc60:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOSKernel/src/process.c:58
        process->task->tss->FS=getNonKernelDataGDTIndex();
        process->task->tss->GS=getNonKernelDataGDTIndex();
    }
*/
    //CR3 was set and PDir created by createTask.  Page tables will be created by the load process
    if (!sysLoadElf(process->path,process->elf,process->task->tss->CR3,false))
 100bc65:	85 c0                	test   eax,eax
 100bc67:	74 18                	je     100bc81 <createProcess+0xf5>
/home/yogi/src/os/chrisOSKernel/src/process.c:60
        return NULL;
    printd(DEBUG_PROCESS,"Created Process @ 0x%08X\n",process);
 100bc69:	83 ec 04             	sub    esp,0x4
 100bc6c:	53                   	push   ebx
 100bc6d:	68 79 68 06 01       	push   0x1066879
 100bc72:	68 00 00 04 00       	push   0x40000
 100bc77:	e8 7b df ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/process.c:61
    return process;
 100bc7c:	83 c4 10             	add    esp,0x10
 100bc7f:	89 da                	mov    edx,ebx
/home/yogi/src/os/chrisOSKernel/src/process.c:62
 100bc81:	89 d0                	mov    eax,edx
 100bc83:	5b                   	pop    ebx
 100bc84:	5e                   	pop    esi
 100bc85:	5f                   	pop    edi
 100bc86:	c3                   	ret    
 100bc87:	90                   	nop

0100bc88 <syscall169>:
syscall169():
/home/yogi/src/os/chrisOSKernel/src/syscall.c:25

void syscall169()
{
    uint8_t temp;
 
    __asm__ volatile ("cli"); /* disable all interrupts */
 100bc88:	fa                   	cli    
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
}

static __inline unsigned char inb(unsigned short __port)
{
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
 100bc89:	e4 64                	in     al,0x64
 100bc8b:	89 c2                	mov    edx,eax
syscall169():
/home/yogi/src/os/chrisOSKernel/src/syscall.c:30
    /* Clear all keyboard buffers (output and command buffers) */
    do
    {
        temp = inb(KBRD_INTRFC); /* empty user data */
        if (check_flag(temp, KBRD_BIT_KDATA) != 0)
 100bc8d:	a8 01                	test   al,0x1
 100bc8f:	74 02                	je     100bc93 <syscall169+0xb>
inb():
/home/yogi/src/os/chrisOSKernel/include/io.h:39
 100bc91:	e4 60                	in     al,0x60
syscall169():
/home/yogi/src/os/chrisOSKernel/src/syscall.c:32
            inb(KBRD_IO); /* empty keyboard data */
    } while (check_flag(temp, KBRD_BIT_UDATA) != 0);
 100bc93:	f6 c2 02             	test   dl,0x2
 100bc96:	75 f1                	jne    100bc89 <syscall169+0x1>
outb():
/home/yogi/src/os/chrisOSKernel/include/io.h:23
void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
 100bc98:	b8 fe ff ff ff       	mov    eax,0xfffffffe
 100bc9d:	e6 64                	out    0x64,al
syscall169():
/home/yogi/src/os/chrisOSKernel/src/syscall.c:36 (discriminator 1)
 
    outb(KBRD_INTRFC, KBRD_RESET); /* pulse CPU reset line */
loop:
    __asm__ volatile ("hlt"); /* if that didn't work, halt the CPU */
 100bc9f:	f4                   	hlt    
 100bca0:	eb fd                	jmp    100bc9f <syscall169+0x17>
 100bca2:	66 90                	xchg   ax,ax

0100bca4 <_call_gate_wrapper>:
_call_gate_wrapper():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:544
    }
    return lsysExecRetVal;
}

void _call_gate_wrapper()
{
 100bca4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:545
    printk("Returned from user process\n");
 100bca7:	68 93 68 06 01       	push   0x1066893
 100bcac:	e8 2e df ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:546
    STOPHERE2
 100bcb1:	fa                   	cli    
 100bcb2:	f4                   	hlt    
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:547
 100bcb3:	83 c4 1c             	add    esp,0x1c
 100bcb6:	c3                   	ret    

0100bcb7 <strTabEntry>:
strTabEntry():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:49

#define GET_OLD_CR3 __asm__("mov ebx,cr3\n":[oldCR3] "=b" (oldCR3));
#define SWITCH_CR3 __asm__("mov cr3,eax\n"::[newCR3] "a" (newCR3));

char* strTabEntry(elfInfo_t* elf, int index)
{
 100bcb7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
 100bcbb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:51
    char* addr=NULL;
    if (elf->dynamicInfo.strTableAddress && index < elf->dynamicInfo.strTableSize)
 100bcbf:	8b 82 b8 18 00 00    	mov    eax,DWORD PTR [edx+0x18b8]
 100bcc5:	85 c0                	test   eax,eax
 100bcc7:	74 11                	je     100bcda <strTabEntry+0x23>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:54 (discriminator 1)
    {
        addr=(char*)elf->dynamicInfo.strTableAddress;
        addr+=index;
 100bcc9:	01 c8                	add    eax,ecx
 100bccb:	39 8a 8c 18 00 00    	cmp    DWORD PTR [edx+0x188c],ecx
 100bcd1:	ba 00 00 00 00       	mov    edx,0x0
 100bcd6:	0f 4e c2             	cmovle eax,edx
 100bcd9:	c3                   	ret    
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:50
#define GET_OLD_CR3 __asm__("mov ebx,cr3\n":[oldCR3] "=b" (oldCR3));
#define SWITCH_CR3 __asm__("mov cr3,eax\n"::[newCR3] "a" (newCR3));

char* strTabEntry(elfInfo_t* elf, int index)
{
    char* addr=NULL;
 100bcda:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:57
    {
        addr=(char*)elf->dynamicInfo.strTableAddress;
        addr+=index;
    }
    return (char*)addr;
}
 100bcdf:	c3                   	ret    

0100bce0 <restoreCR3>:
restoreCR3():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:61

void restoreCR3()
{
    __asm__("mov cr3,eax\n"::[oldCR3] "a" (INIT_GDT_TABLE_ADDRESS));
 100bce0:	b8 00 48 16 00       	mov    eax,0x164800
 100bce5:	0f 22 d8             	mov    cr3,eax
 100bce8:	c3                   	ret    

0100bce9 <putDataOnPages>:
putDataOnPages():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:189

}

//Read the data from the file and write it to the virtual addresses, mapping new pages as necessary
bool putDataOnPages(uintptr_t CR3, uintptr_t virtAddr, void* file, bool writeFromFile, int size, byte nonFileWriteValue)
{
 100bce9:	55                   	push   ebp
 100bcea:	57                   	push   edi
 100bceb:	56                   	push   esi
 100bcec:	53                   	push   ebx
 100bced:	83 ec 1c             	sub    esp,0x1c
 100bcf0:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
 100bcf5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
 100bcf9:	0f b6 44 24 44       	movzx  eax,BYTE PTR [esp+0x44]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:190
    int startVirtAddr=virtAddr;
 100bcfe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:195
    int startPhysAddr=0;
    int countToWrite=0;
    int totalLeftToWrite=size;

    while(totalLeftToWrite>0)
 100bd02:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
 100bd07:	0f 8e 96 01 00 00    	jle    100bea3 <putDataOnPages+0x1ba>
 100bd0d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:232
        printd(DEBUG_ELF_LOADER,"putDataOnPages: Reading %u bytes to 0x%08X (0x%08X)\n",countToWrite,startVirtAddr,startPhysAddr);
        //write the data to the page
        if (writeFromFile)
            fl_fread((void*)startPhysAddr, 1, countToWrite, file);
        else
            memset((void*)startPhysAddr,nonFileWriteValue,countToWrite);
 100bd11:	0f b6 c0             	movzx  eax,al
 100bd14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:197
    int countToWrite=0;
    int totalLeftToWrite=size;

    while(totalLeftToWrite>0)
    {
        printd(DEBUG_ELF_LOADER,"putDataOnPages: Bytes left to go: 0x%08X\n",totalLeftToWrite);
 100bd18:	83 ec 04             	sub    esp,0x4
 100bd1b:	55                   	push   ebp
 100bd1c:	68 50 23 04 01       	push   0x1042350
 100bd21:	68 00 02 00 00       	push   0x200
 100bd26:	e8 cc de ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:199
        //If either the write doesn't start at the beginning of the page, or there is less than a page left to write
        if ((!startVirtAddr%PAGE_SIZE) | (totalLeftToWrite < PAGE_SIZE))
 100bd2b:	83 c4 10             	add    esp,0x10
 100bd2e:	85 ff                	test   edi,edi
 100bd30:	74 08                	je     100bd3a <putDataOnPages+0x51>
 100bd32:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
 100bd38:	7f 2b                	jg     100bd65 <putDataOnPages+0x7c>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:201
        {
                countToWrite=totalLeftToWrite%PAGE_SIZE;
 100bd3a:	89 ea                	mov    edx,ebp
 100bd3c:	c1 fa 1f             	sar    edx,0x1f
 100bd3f:	c1 ea 14             	shr    edx,0x14
 100bd42:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
 100bd46:	25 ff 0f 00 00       	and    eax,0xfff
 100bd4b:	29 d0                	sub    eax,edx
 100bd4d:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:202
                printd(DEBUG_ELF_LOADER,"putDataOnPages: Non-aligned or not full page write, writing 0x%08X bytes to 0x%08X\n",countToWrite,startVirtAddr);
 100bd4f:	57                   	push   edi
 100bd50:	50                   	push   eax
 100bd51:	68 7c 23 04 01       	push   0x104237c
 100bd56:	68 00 02 00 00       	push   0x200
 100bd5b:	e8 97 de ff ff       	call   1009bf7 <printd>
 100bd60:	83 c4 10             	add    esp,0x10
 100bd63:	eb 1b                	jmp    100bd80 <putDataOnPages+0x97>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:207
        }
        else
        {
                countToWrite=PAGE_SIZE;
                printd(DEBUG_ELF_LOADER,"putDataOnPages: Full page write, writing 1 page to 0x%08X\n",startVirtAddr);
 100bd65:	83 ec 04             	sub    esp,0x4
 100bd68:	57                   	push   edi
 100bd69:	68 d0 23 04 01       	push   0x10423d0
 100bd6e:	68 00 02 00 00       	push   0x200
 100bd73:	e8 7f de ff ff       	call   1009bf7 <printd>
 100bd78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:206
                countToWrite=totalLeftToWrite%PAGE_SIZE;
                printd(DEBUG_ELF_LOADER,"putDataOnPages: Non-aligned or not full page write, writing 0x%08X bytes to 0x%08X\n",countToWrite,startVirtAddr);
        }
        else
        {
                countToWrite=PAGE_SIZE;
 100bd7b:	be 00 10 00 00       	mov    esi,0x1000
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:212
                printd(DEBUG_ELF_LOADER,"putDataOnPages: Full page write, writing 1 page to 0x%08X\n",startVirtAddr);
        }
        
        //find out if page is mapped
        //printd(DEBUG_ELF_LOADER,"isPageMapped returning %s for startVirtAddr=0x%08X\n",isPageMapped(CR3,startVirtAddr)==true?"true":"false",startVirtAddr);
        if (isPageMapped(CR3,startVirtAddr))
 100bd80:	83 ec 08             	sub    esp,0x8
 100bd83:	57                   	push   edi
 100bd84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100bd88:	e8 3a fc ff ff       	call   100b9c7 <isPageMapped>
 100bd8d:	83 c4 10             	add    esp,0x10
 100bd90:	84 c0                	test   al,al
 100bd92:	74 32                	je     100bdc6 <putDataOnPages+0xdd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:214
        {
            startPhysAddr=pagingGet4kPTEntryValueCR3(CR3,startVirtAddr) & 0xFFFFF000;  //Clear the last 3 bytes of the 
 100bd94:	83 ec 08             	sub    esp,0x8
 100bd97:	57                   	push   edi
 100bd98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100bd9c:	e8 35 f6 ff ff       	call   100b3d6 <pagingGet4kPTEntryValueCR3>
 100bda1:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:215
            startPhysAddr |= (startVirtAddr & 0x00000FFF);
 100bda6:	89 fb                	mov    ebx,edi
 100bda8:	81 e3 ff 0f 00 00    	and    ebx,0xfff
 100bdae:	09 c3                	or     ebx,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:216
            printd(DEBUG_ELF_LOADER,"putDataOnPages: V=0x%08X already mapped to P=0x%08X\n",startVirtAddr,startPhysAddr);
 100bdb0:	53                   	push   ebx
 100bdb1:	57                   	push   edi
 100bdb2:	68 0c 24 04 01       	push   0x104240c
 100bdb7:	68 00 02 00 00       	push   0x200
 100bdbc:	e8 36 de ff ff       	call   1009bf7 <printd>
 100bdc1:	83 c4 20             	add    esp,0x20
 100bdc4:	eb 79                	jmp    100be3f <putDataOnPages+0x156>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:220
        }
        else
        {
            startPhysAddr=(uintptr_t)allocPages(size) | (startVirtAddr & 0x00000FFF);
 100bdc6:	83 ec 0c             	sub    esp,0xc
 100bdc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 100bdcd:	e8 ed ed ff ff       	call   100abbf <allocPages>
 100bdd2:	89 fa                	mov    edx,edi
 100bdd4:	81 e2 ff 0f 00 00    	and    edx,0xfff
 100bdda:	09 d0                	or     eax,edx
 100bddc:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:221
            pagingMapPage(CR3,startVirtAddr,startPhysAddr,0x7);
 100bdde:	6a 07                	push   0x7
 100bde0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
 100bde4:	50                   	push   eax
 100bde5:	57                   	push   edi
 100bde6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 100bdea:	e8 de f7 ff ff       	call   100b5cd <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:222
            printd(DEBUG_ELF_LOADER,"putDataOnPages: V=0x%08X not mapped, mapped to P=0x%08X\n",startVirtAddr,startPhysAddr);
 100bdef:	83 c4 20             	add    esp,0x20
 100bdf2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
 100bdf6:	57                   	push   edi
 100bdf7:	68 44 24 04 01       	push   0x1042444
 100bdfc:	68 00 02 00 00       	push   0x200
 100be01:	e8 f1 dd ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:223
            pagingMapPage(oldCR3,startPhysAddr | KERNEL_PAGED_BASE_ADDRESS,startPhysAddr,0x7);
 100be06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 100be0a:	89 c1                	mov    ecx,eax
 100be0c:	81 c9 00 00 00 c0    	or     ecx,0xc0000000
 100be12:	6a 07                	push   0x7
 100be14:	50                   	push   eax
 100be15:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
 100be19:	51                   	push   ecx
 100be1a:	ff 35 88 8c 07 01    	push   DWORD PTR ds:0x1078c88
 100be20:	e8 a8 f7 ff ff       	call   100b5cd <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:224
            printd(DEBUG_ELF_LOADER,"putDataOnPages: V=0x%08X also mapped to KP=0x%08X\n",startVirtAddr,startPhysAddr| KERNEL_PAGED_BASE_ADDRESS);
 100be25:	83 c4 20             	add    esp,0x20
 100be28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
 100be2c:	57                   	push   edi
 100be2d:	68 80 24 04 01       	push   0x1042480
 100be32:	68 00 02 00 00       	push   0x200
 100be37:	e8 bb dd ff ff       	call   1009bf7 <printd>
 100be3c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:227
        }
        //if page is not mapped, map it!
        printd(DEBUG_ELF_LOADER,"putDataOnPages: Reading %u bytes to 0x%08X (0x%08X)\n",countToWrite,startVirtAddr,startPhysAddr);
 100be3f:	83 ec 0c             	sub    esp,0xc
 100be42:	53                   	push   ebx
 100be43:	57                   	push   edi
 100be44:	56                   	push   esi
 100be45:	68 b4 24 04 01       	push   0x10424b4
 100be4a:	68 00 02 00 00       	push   0x200
 100be4f:	e8 a3 dd ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:229
        //write the data to the page
        if (writeFromFile)
 100be54:	83 c4 20             	add    esp,0x20
 100be57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
 100be5c:	74 12                	je     100be70 <putDataOnPages+0x187>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:230
            fl_fread((void*)startPhysAddr, 1, countToWrite, file);
 100be5e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
 100be62:	56                   	push   esi
 100be63:	6a 01                	push   0x1
 100be65:	53                   	push   ebx
 100be66:	e8 a6 91 ff ff       	call   1005011 <fl_fread>
 100be6b:	83 c4 10             	add    esp,0x10
 100be6e:	eb 11                	jmp    100be81 <putDataOnPages+0x198>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:232
        else
            memset((void*)startPhysAddr,nonFileWriteValue,countToWrite);
 100be70:	83 ec 04             	sub    esp,0x4
 100be73:	56                   	push   esi
 100be74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
 100be78:	53                   	push   ebx
 100be79:	e8 41 d0 ff ff       	call   1008ebf <memset>
 100be7e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:234
        //Decrement the total left to write by the count written
        totalLeftToWrite-=countToWrite;
 100be81:	29 f5                	sub    ebp,esi
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:235
        printd(DEBUG_ELF_LOADER,"putDataOnPages: Page written, 0x%08X bytes left to go\n",totalLeftToWrite);
 100be83:	83 ec 04             	sub    esp,0x4
 100be86:	55                   	push   ebp
 100be87:	68 ec 24 04 01       	push   0x10424ec
 100be8c:	68 00 02 00 00       	push   0x200
 100be91:	e8 61 dd ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:236
        startVirtAddr+=countToWrite;
 100be96:	01 f7                	add    edi,esi
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:195
    int startVirtAddr=virtAddr;
    int startPhysAddr=0;
    int countToWrite=0;
    int totalLeftToWrite=size;

    while(totalLeftToWrite>0)
 100be98:	83 c4 10             	add    esp,0x10
 100be9b:	85 ed                	test   ebp,ebp
 100be9d:	0f 8f 75 fe ff ff    	jg     100bd18 <putDataOnPages+0x2f>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:240
        printd(DEBUG_ELF_LOADER,"putDataOnPages: Page written, 0x%08X bytes left to go\n",totalLeftToWrite);
        startVirtAddr+=countToWrite;
        startPhysAddr+=countToWrite;
    }
    return true;
}
 100bea3:	b8 01 00 00 00       	mov    eax,0x1
 100bea8:	83 c4 1c             	add    esp,0x1c
 100beab:	5b                   	pop    ebx
 100beac:	5e                   	pop    esi
 100bead:	5f                   	pop    edi
 100beae:	5d                   	pop    ebp
 100beaf:	c3                   	ret    

0100beb0 <loadSections>:
loadSections():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:243

bool loadSections(void* file,elfInfo_t* elfInfo,uintptr_t CR3,bool isLibrary)
{
 100beb0:	55                   	push   ebp
 100beb1:	57                   	push   edi
 100beb2:	56                   	push   esi
 100beb3:	53                   	push   ebx
 100beb4:	83 ec 20             	sub    esp,0x20
 100beb7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:247
    uint32_t virtualLoadAddress;
    
    //Go to the beginning of the file and get the elf header
    fl_fseek(file, 0, SEEK_SET);
 100bebb:	6a 00                	push   0x0
 100bebd:	6a 00                	push   0x0
 100bebf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100bec3:	e8 7e 93 ff ff       	call   1005246 <fl_fseek>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:248
    fl_fread(&elfInfo->hdr, sizeof(elfInfo->hdr),1,file);
 100bec8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
 100becc:	6a 01                	push   0x1
 100bece:	6a 34                	push   0x34
 100bed0:	57                   	push   edi
 100bed1:	e8 3b 91 ff ff       	call   1005011 <fl_fread>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:249
    if (elfInfo->hdr.e_ident[0] != 0x7F) 
 100bed6:	83 c4 20             	add    esp,0x20
 100bed9:	80 3f 7f             	cmp    BYTE PTR [edi],0x7f
 100bedc:	74 48                	je     100bf26 <loadSections+0x76>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:250
        if (elfInfo->hdr.e_ident[1] != 'E') 
 100bede:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:251
            if (elfInfo->hdr.e_ident[1] != 'L') 
 100bee2:	3c 4c                	cmp    al,0x4c
 100bee4:	74 40                	je     100bf26 <loadSections+0x76>
 100bee6:	3c 45                	cmp    al,0x45
 100bee8:	74 3c                	je     100bf26 <loadSections+0x76>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:252
                if (elfInfo->hdr.e_ident[2] != 'F')
 100beea:	0f b6 57 02          	movzx  edx,BYTE PTR [edi+0x2]
 100beee:	80 fa 46             	cmp    dl,0x46
 100bef1:	74 33                	je     100bf26 <loadSections+0x76>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:254
                {
                    printd(DEBUG_ELF_LOADER,"Invalid ELF magic '%c' '%c' '%c', cannot load", elfInfo->hdr.e_ident[1], elfInfo->hdr.e_ident[2], elfInfo->hdr.e_ident[3]);
 100bef3:	83 ec 0c             	sub    esp,0xc
 100bef6:	0f b6 4f 03          	movzx  ecx,BYTE PTR [edi+0x3]
 100befa:	51                   	push   ecx
 100befb:	0f b6 d2             	movzx  edx,dl
 100befe:	52                   	push   edx
 100beff:	0f b6 c0             	movzx  eax,al
 100bf02:	50                   	push   eax
 100bf03:	68 24 25 04 01       	push   0x1042524
 100bf08:	68 00 02 00 00       	push   0x200
 100bf0d:	e8 e5 dc ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:255
                    elfInfo->loadCompleted=false;
 100bf12:	c6 87 d8 18 00 00 00 	mov    BYTE PTR [edi+0x18d8],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:256
                    return false;
 100bf19:	83 c4 20             	add    esp,0x20
 100bf1c:	b8 00 00 00 00       	mov    eax,0x0
 100bf21:	e9 51 03 00 00       	jmp    100c277 <loadSections+0x3c7>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:260
                }
    
    //Make sure the file is viable
    if (elfInfo->hdr.e_type!=ET_EXEC && elfInfo->hdr.e_type!=ET_DYN)
 100bf26:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
 100bf2a:	8d 50 fe             	lea    edx,[eax-0x2]
 100bf2d:	66 83 fa 01          	cmp    dx,0x1
 100bf31:	76 2a                	jbe    100bf5d <loadSections+0xad>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:262
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF type 0x%04X, cannot load\n", elfInfo->hdr.e_type);
 100bf33:	83 ec 04             	sub    esp,0x4
 100bf36:	0f b7 c0             	movzx  eax,ax
 100bf39:	50                   	push   eax
 100bf3a:	68 54 25 04 01       	push   0x1042554
 100bf3f:	68 00 02 00 00       	push   0x200
 100bf44:	e8 ae dc ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:263
        elfInfo->loadCompleted=false;
 100bf49:	c6 87 d8 18 00 00 00 	mov    BYTE PTR [edi+0x18d8],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:264
        return false;
 100bf50:	83 c4 10             	add    esp,0x10
 100bf53:	b8 00 00 00 00       	mov    eax,0x0
 100bf58:	e9 1a 03 00 00       	jmp    100c277 <loadSections+0x3c7>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:266
    }
    if (elfInfo->hdr.e_machine!=EM_386)
 100bf5d:	66 83 7f 12 03       	cmp    WORD PTR [edi+0x12],0x3
 100bf62:	74 2a                	je     100bf8e <loadSections+0xde>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:268
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF architecture 0x%04X, cannot load\n", elfInfo->hdr.e_type);
 100bf64:	83 ec 04             	sub    esp,0x4
 100bf67:	0f b7 c0             	movzx  eax,ax
 100bf6a:	50                   	push   eax
 100bf6b:	68 78 25 04 01       	push   0x1042578
 100bf70:	68 00 02 00 00       	push   0x200
 100bf75:	e8 7d dc ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:269
        elfInfo->loadCompleted=false;
 100bf7a:	c6 87 d8 18 00 00 00 	mov    BYTE PTR [edi+0x18d8],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:270
        return false;
 100bf81:	83 c4 10             	add    esp,0x10
 100bf84:	b8 00 00 00 00       	mov    eax,0x0
 100bf89:	e9 e9 02 00 00       	jmp    100c277 <loadSections+0x3c7>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:274
    }
    
    //Get the section header tablex
    printd(DEBUG_ELF_LOADER,"section header record count= %u\n", elfInfo->hdr.e_shnum);
 100bf8e:	83 ec 04             	sub    esp,0x4
 100bf91:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
 100bf95:	50                   	push   eax
 100bf96:	68 a4 25 04 01       	push   0x10425a4
 100bf9b:	68 00 02 00 00       	push   0x200
 100bfa0:	e8 52 dc ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:275
    elfInfo->secHdrRecordCount= elfInfo->hdr.e_shnum;
 100bfa5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
 100bfa9:	89 87 44 0e 00 00    	mov    DWORD PTR [edi+0xe44],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:277

    printd(DEBUG_ELF_LOADER,"e_shentsize=%u, oursize=%u\n", elfInfo->hdr.e_shentsize, sizeof(Elf32_Shdr) );
 100bfaf:	6a 28                	push   0x28
 100bfb1:	0f b7 47 2e          	movzx  eax,WORD PTR [edi+0x2e]
 100bfb5:	50                   	push   eax
 100bfb6:	68 af 68 06 01       	push   0x10668af
 100bfbb:	68 00 02 00 00       	push   0x200
 100bfc0:	e8 32 dc ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:278
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_shoff);
 100bfc5:	83 c4 1c             	add    esp,0x1c
 100bfc8:	ff 77 20             	push   DWORD PTR [edi+0x20]
 100bfcb:	68 cb 68 06 01       	push   0x10668cb
 100bfd0:	68 00 02 00 00       	push   0x200
 100bfd5:	e8 1d dc ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:279
    fl_fseek(file, elfInfo->hdr.e_shoff,SEEK_SET);
 100bfda:	83 c4 0c             	add    esp,0xc
 100bfdd:	6a 00                	push   0x0
 100bfdf:	ff 77 20             	push   DWORD PTR [edi+0x20]
 100bfe2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100bfe6:	e8 5b 92 ff ff       	call   1005246 <fl_fseek>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:280
    printd(DEBUG_ELF_LOADER,"reading SHOFF: 0x%08X bytes (s=0x%08X*n=0x%08X), to 0x%08X\n",elfInfo->hdr.e_shentsize*elfInfo->hdr.e_shnum,elfInfo->hdr.e_shentsize,elfInfo->hdr.e_shnum,elfInfo->secHdrTable);
 100bfeb:	8d 5f 34             	lea    ebx,[edi+0x34]
 100bfee:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
 100bff2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
 100bff6:	83 c4 08             	add    esp,0x8
 100bff9:	53                   	push   ebx
 100bffa:	50                   	push   eax
 100bffb:	52                   	push   edx
 100bffc:	0f af c2             	imul   eax,edx
 100bfff:	50                   	push   eax
 100c000:	68 c8 25 04 01       	push   0x10425c8
 100c005:	68 00 02 00 00       	push   0x200
 100c00a:	e8 e8 db ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:281
    fl_fread(elfInfo->secHdrTable, elfInfo->hdr.e_shentsize,elfInfo->hdr.e_shnum,file);
 100c00f:	83 c4 20             	add    esp,0x20
 100c012:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
 100c016:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
 100c01a:	50                   	push   eax
 100c01b:	0f b7 47 2e          	movzx  eax,WORD PTR [edi+0x2e]
 100c01f:	50                   	push   eax
 100c020:	53                   	push   ebx
 100c021:	e8 eb 8f ff ff       	call   1005011 <fl_fread>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:283
    //Get the program header table
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_phoff);
 100c026:	83 c4 0c             	add    esp,0xc
 100c029:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
 100c02c:	68 cb 68 06 01       	push   0x10668cb
 100c031:	68 00 02 00 00       	push   0x200
 100c036:	e8 bc db ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:284
    printd(DEBUG_ELF_LOADER,"reading PHOFF: 0x%08X bytes (s=0x%08X*n=0x%08X), to 0x%08X\n",elfInfo->hdr.e_phentsize*elfInfo->hdr.e_phnum,elfInfo->hdr.e_phentsize,elfInfo->hdr.e_phnum,elfInfo->pgmHdrTable);
 100c03b:	8d 9f 04 08 00 00    	lea    ebx,[edi+0x804]
 100c041:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
 100c045:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
 100c049:	83 c4 08             	add    esp,0x8
 100c04c:	53                   	push   ebx
 100c04d:	50                   	push   eax
 100c04e:	52                   	push   edx
 100c04f:	0f af c2             	imul   eax,edx
 100c052:	50                   	push   eax
 100c053:	68 04 26 04 01       	push   0x1042604
 100c058:	68 00 02 00 00       	push   0x200
 100c05d:	e8 95 db ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:285
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
 100c062:	83 c4 1c             	add    esp,0x1c
 100c065:	6a 00                	push   0x0
 100c067:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
 100c06a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100c06e:	e8 d3 91 ff ff       	call   1005246 <fl_fseek>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:286
    fl_fread(elfInfo->pgmHdrTable, elfInfo->hdr.e_phentsize,elfInfo->hdr.e_phnum,file);
 100c073:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
 100c077:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
 100c07b:	50                   	push   eax
 100c07c:	0f b7 47 2a          	movzx  eax,WORD PTR [edi+0x2a]
 100c080:	50                   	push   eax
 100c081:	53                   	push   ebx
 100c082:	e8 8a 8f ff ff       	call   1005011 <fl_fread>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:288
    //Process the program header table and load all of the sections in the file into memory
    for (int pgmSectionNum=0;pgmSectionNum<elfInfo->hdr.e_phnum;pgmSectionNum++)
 100c087:	83 c4 20             	add    esp,0x20
 100c08a:	66 83 7f 2c 00       	cmp    WORD PTR [edi+0x2c],0x0
 100c08f:	0f 84 c8 01 00 00    	je     100c25d <loadSections+0x3ad>
 100c095:	8d 9f 18 08 00 00    	lea    ebx,[edi+0x818]
 100c09b:	bd 00 00 00 00       	mov    ebp,0x0
 100c0a0:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
 100c0a4:	89 df                	mov    edi,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:290
    {
        virtualLoadAddress = elfInfo->pgmHdrTable[pgmSectionNum].p_vaddr;
 100c0a6:	8b 73 f4             	mov    esi,DWORD PTR [ebx-0xc]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:291
        printk("virtualLoadAddress=0x%08X\n",virtualLoadAddress);
 100c0a9:	83 ec 08             	sub    esp,0x8
 100c0ac:	56                   	push   esi
 100c0ad:	68 e1 68 06 01       	push   0x10668e1
 100c0b2:	e8 28 db ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:298
        {
            //virtualLoadAddress+=libLoadOffset;
            //elfInfo->pgmHdrTable[cnt].p_vaddr=virtualLoadAddress;
        }

        if (virtualLoadAddress==(uint32_t)KERNEL_DATA_LOAD_ADDRESS)
 100c0b7:	83 c4 10             	add    esp,0x10
 100c0ba:	39 35 00 00 12 00    	cmp    DWORD PTR ds:0x120000,esi
 100c0c0:	75 19                	jne    100c0db <loadSections+0x22b>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:300
        {
            printd(DEBUG_ELF_LOADER,"Section %u load address is kernel data base address (0x%08X), skipping load\n",pgmSectionNum,virtualLoadAddress);
 100c0c2:	56                   	push   esi
 100c0c3:	55                   	push   ebp
 100c0c4:	68 40 26 04 01       	push   0x1042640
 100c0c9:	68 00 02 00 00       	push   0x200
 100c0ce:	e8 24 db ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:301
            continue;
 100c0d3:	83 c4 10             	add    esp,0x10
 100c0d6:	e9 6c 01 00 00       	jmp    100c247 <loadSections+0x397>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:303
        }
        else if (elfInfo->pgmHdrTable[pgmSectionNum].p_offset==elfInfo->hdr.e_phoff)
 100c0db:	8b 43 f0             	mov    eax,DWORD PTR [ebx-0x10]
 100c0de:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
 100c0e2:	3b 41 1c             	cmp    eax,DWORD PTR [ecx+0x1c]
 100c0e5:	75 19                	jne    100c100 <loadSections+0x250>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:305
        {
            printd(DEBUG_ELF_LOADER,"Section %u file offset is program header address (0x%08X),skipping load\n",pgmSectionNum,elfInfo->pgmHdrTable[pgmSectionNum].p_offset);
 100c0e7:	50                   	push   eax
 100c0e8:	55                   	push   ebp
 100c0e9:	68 90 26 04 01       	push   0x1042690
 100c0ee:	68 00 02 00 00       	push   0x200
 100c0f3:	e8 ff da ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:306
            continue;
 100c0f8:	83 c4 10             	add    esp,0x10
 100c0fb:	e9 47 01 00 00       	jmp    100c247 <loadSections+0x397>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:308
        }
        if (virtualLoadAddress!=0 && elfInfo->libLoadAddress==0 && (elfInfo->hdr.e_type!=ET_REL && elfInfo->hdr.e_type!=ET_DYN))
 100c100:	85 f6                	test   esi,esi
 100c102:	74 3f                	je     100c143 <loadSections+0x293>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:308 (discriminator 1)
 100c104:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100c108:	83 b8 d4 18 00 00 00 	cmp    DWORD PTR [eax+0x18d4],0x0
 100c10f:	75 32                	jne    100c143 <loadSections+0x293>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:308 (discriminator 2)
 100c111:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
 100c115:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
 100c11a:	83 e0 fd             	and    eax,0xfffffffd
 100c11d:	66 83 f8 01          	cmp    ax,0x1
 100c121:	74 20                	je     100c143 <loadSections+0x293>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:310
        {
            elfInfo->libLoadAddress=(uintptr_t)virtualLoadAddress;
 100c123:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100c127:	89 b0 d4 18 00 00    	mov    DWORD PTR [eax+0x18d4],esi
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:311
            printd(DEBUG_ELF_LOADER,"Setting main load address to 0x%08X\n",virtualLoadAddress);
 100c12d:	83 ec 04             	sub    esp,0x4
 100c130:	56                   	push   esi
 100c131:	68 dc 26 04 01       	push   0x10426dc
 100c136:	68 00 02 00 00       	push   0x200
 100c13b:	e8 b7 da ff ff       	call   1009bf7 <printd>
 100c140:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:314
            
        }
        if (elfInfo->pgmHdrTable[pgmSectionNum].p_filesz>0)
 100c143:	83 7f fc 00          	cmp    DWORD PTR [edi-0x4],0x0
 100c147:	0f 84 b7 00 00 00    	je     100c204 <loadSections+0x354>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:316
        {
            printd(DEBUG_ELF_LOADER,"Found loadable section (fsize > 0), seeking to 0x%08X ...\n",elfInfo->pgmHdrTable[pgmSectionNum].p_offset);
 100c14d:	83 ec 04             	sub    esp,0x4
 100c150:	ff 77 f0             	push   DWORD PTR [edi-0x10]
 100c153:	68 04 27 04 01       	push   0x1042704
 100c158:	68 00 02 00 00       	push   0x200
 100c15d:	e8 95 da ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:318
            //Seek to the loadable section in the file
            fl_fseek(file, elfInfo->pgmHdrTable[pgmSectionNum].p_offset, SEEK_SET);
 100c162:	83 c4 0c             	add    esp,0xc
 100c165:	6a 00                	push   0x0
 100c167:	ff 77 f0             	push   DWORD PTR [edi-0x10]
 100c16a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
 100c16e:	e8 d3 90 ff ff       	call   1005246 <fl_fseek>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:321
            
            //Get pages 
            printd(DEBUG_ELF_LOADER,"Allocating pages to store %u bytes of data on\n",elfInfo->pgmHdrTable[pgmSectionNum].p_memsz);
 100c173:	83 c4 0c             	add    esp,0xc
 100c176:	ff 37                	push   DWORD PTR [edi]
 100c178:	68 40 27 04 01       	push   0x1042740
 100c17d:	68 00 02 00 00       	push   0x200
 100c182:	e8 70 da ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:322
            if (!putDataOnPages(CR3,virtualLoadAddress,file,true,elfInfo->pgmHdrTable[pgmSectionNum].p_memsz,0))
 100c187:	83 c4 08             	add    esp,0x8
 100c18a:	6a 00                	push   0x0
 100c18c:	ff 37                	push   DWORD PTR [edi]
 100c18e:	6a 01                	push   0x1
 100c190:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
 100c194:	56                   	push   esi
 100c195:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
 100c199:	e8 4b fb ff ff       	call   100bce9 <putDataOnPages>
 100c19e:	83 c4 20             	add    esp,0x20
 100c1a1:	84 c0                	test   al,al
 100c1a3:	0f 84 ce 00 00 00    	je     100c277 <loadSections+0x3c7>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:324
                return false;
            printd(DEBUG_ELF_LOADER,"Section %u loaded 0x%08X bytes at 0x%08X\n", pgmSectionNum, elfInfo->pgmHdrTable[pgmSectionNum].p_memsz, virtualLoadAddress);
 100c1a9:	83 ec 0c             	sub    esp,0xc
 100c1ac:	56                   	push   esi
 100c1ad:	ff 37                	push   DWORD PTR [edi]
 100c1af:	55                   	push   ebp
 100c1b0:	68 70 27 04 01       	push   0x1042770
 100c1b5:	68 00 02 00 00       	push   0x200
 100c1ba:	e8 38 da ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:325
            if (elfInfo->pgmHdrTable[pgmSectionNum].p_filesz<elfInfo->pgmHdrTable[pgmSectionNum].p_memsz)
 100c1bf:	8b 57 fc             	mov    edx,DWORD PTR [edi-0x4]
 100c1c2:	8b 07                	mov    eax,DWORD PTR [edi]
 100c1c4:	83 c4 20             	add    esp,0x20
 100c1c7:	39 c2                	cmp    edx,eax
 100c1c9:	73 7c                	jae    100c247 <loadSections+0x397>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:327
            {
                printd(DEBUG_ELF_LOADER,"Section %u has uninitialized data (msize>fsize), zeroed 0x%08X bytes at 0x%08X\n", pgmSectionNum, elfInfo->pgmHdrTable[pgmSectionNum].p_memsz-elfInfo->pgmHdrTable[pgmSectionNum].p_filesz, virtualLoadAddress);
 100c1cb:	83 ec 0c             	sub    esp,0xc
 100c1ce:	56                   	push   esi
 100c1cf:	29 d0                	sub    eax,edx
 100c1d1:	50                   	push   eax
 100c1d2:	55                   	push   ebp
 100c1d3:	68 9c 27 04 01       	push   0x104279c
 100c1d8:	68 00 02 00 00       	push   0x200
 100c1dd:	e8 15 da ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:329
                //CLR 02/20/2017 - Replaced memset
                if (!putDataOnPages(CR3,virtualLoadAddress,NULL,false,elfInfo->pgmHdrTable[pgmSectionNum].p_memsz-elfInfo->pgmHdrTable[pgmSectionNum].p_filesz,0))
 100c1e2:	83 c4 18             	add    esp,0x18
 100c1e5:	6a 00                	push   0x0
 100c1e7:	8b 07                	mov    eax,DWORD PTR [edi]
 100c1e9:	2b 47 fc             	sub    eax,DWORD PTR [edi-0x4]
 100c1ec:	50                   	push   eax
 100c1ed:	6a 00                	push   0x0
 100c1ef:	6a 00                	push   0x0
 100c1f1:	56                   	push   esi
 100c1f2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
 100c1f6:	e8 ee fa ff ff       	call   100bce9 <putDataOnPages>
 100c1fb:	83 c4 20             	add    esp,0x20
 100c1fe:	84 c0                	test   al,al
 100c200:	75 45                	jne    100c247 <loadSections+0x397>
 100c202:	eb 73                	jmp    100c277 <loadSections+0x3c7>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:333
                    return false;
            }
        }
        else if (elfInfo->pgmHdrTable[pgmSectionNum].p_memsz>0)
 100c204:	8b 07                	mov    eax,DWORD PTR [edi]
 100c206:	85 c0                	test   eax,eax
 100c208:	74 1a                	je     100c224 <loadSections+0x374>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:335
        {
            printd(DEBUG_ELF_LOADER,"Section %u not loadable (fsize=0,msize>0), zeroed 0x%08X bytes at 0x%08X\n",pgmSectionNum, elfInfo->pgmHdrTable[pgmSectionNum].p_memsz, virtualLoadAddress);
 100c20a:	83 ec 0c             	sub    esp,0xc
 100c20d:	56                   	push   esi
 100c20e:	50                   	push   eax
 100c20f:	55                   	push   ebp
 100c210:	68 ec 27 04 01       	push   0x10427ec
 100c215:	68 00 02 00 00       	push   0x200
 100c21a:	e8 d8 d9 ff ff       	call   1009bf7 <printd>
 100c21f:	83 c4 20             	add    esp,0x20
 100c222:	eb 23                	jmp    100c247 <loadSections+0x397>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:339
        }
#ifndef DEBUG_NONE
        else
            if ((kDebugLevel & DEBUG_ELF_LOADER) == DEBUG_ELF_LOADER)
 100c224:	f6 05 79 98 12 00 02 	test   BYTE PTR ds:0x129879,0x2
 100c22b:	74 1a                	je     100c247 <loadSections+0x397>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:340
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", pgmSectionNum, elfInfo->pgmHdrTable[pgmSectionNum].p_filesz>0,elfInfo->pgmHdrTable[pgmSectionNum].p_memsz);
 100c22d:	83 ec 0c             	sub    esp,0xc
 100c230:	6a 00                	push   0x0
 100c232:	6a 00                	push   0x0
 100c234:	55                   	push   ebp
 100c235:	68 38 28 04 01       	push   0x1042838
 100c23a:	68 00 02 00 00       	push   0x200
 100c23f:	e8 b3 d9 ff ff       	call   1009bf7 <printd>
 100c244:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:288 (discriminator 2)
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_phoff);
    printd(DEBUG_ELF_LOADER,"reading PHOFF: 0x%08X bytes (s=0x%08X*n=0x%08X), to 0x%08X\n",elfInfo->hdr.e_phentsize*elfInfo->hdr.e_phnum,elfInfo->hdr.e_phentsize,elfInfo->hdr.e_phnum,elfInfo->pgmHdrTable);
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
    fl_fread(elfInfo->pgmHdrTable, elfInfo->hdr.e_phentsize,elfInfo->hdr.e_phnum,file);
    //Process the program header table and load all of the sections in the file into memory
    for (int pgmSectionNum=0;pgmSectionNum<elfInfo->hdr.e_phnum;pgmSectionNum++)
 100c247:	83 c5 01             	add    ebp,0x1
 100c24a:	83 c3 20             	add    ebx,0x20
 100c24d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 100c251:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
 100c255:	39 e8                	cmp    eax,ebp
 100c257:	0f 8f 47 fe ff ff    	jg     100c0a4 <loadSections+0x1f4>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:345
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", pgmSectionNum, elfInfo->pgmHdrTable[pgmSectionNum].p_filesz>0,elfInfo->pgmHdrTable[pgmSectionNum].p_memsz);
#endif

    }
    //Done processing the program header table
    printd(DEBUG_ELF_LOADER,"LoadElf: done loading elf sections\n");
 100c25d:	83 ec 08             	sub    esp,0x8
 100c260:	68 6c 28 04 01       	push   0x104286c
 100c265:	68 00 02 00 00       	push   0x200
 100c26a:	e8 88 d9 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:346
    return true;
 100c26f:	83 c4 10             	add    esp,0x10
 100c272:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:347
}
 100c277:	83 c4 1c             	add    esp,0x1c
 100c27a:	5b                   	pop    ebx
 100c27b:	5e                   	pop    esi
 100c27c:	5f                   	pop    edi
 100c27d:	5d                   	pop    ebp
 100c27e:	c3                   	ret    

0100c27f <sysLoadElf>:
sysLoadElf():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:350

uint32_t sysLoadElf(char* fileName, elfInfo_t* pElfInfo, uintptr_t CR3, bool isLibrary)
{
 100c27f:	55                   	push   ebp
 100c280:	57                   	push   edi
 100c281:	56                   	push   esi
 100c282:	53                   	push   ebx
 100c283:	83 ec 20             	sub    esp,0x20
 100c286:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
 100c28a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
 100c28e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
 100c292:	89 e8                	mov    eax,ebp
 100c294:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:352

    printd(DEBUG_ELF_LOADER,"Opening image file %s\n",fileName);
 100c298:	53                   	push   ebx
 100c299:	68 fc 68 06 01       	push   0x10668fc
 100c29e:	68 00 02 00 00       	push   0x200
 100c2a3:	e8 4f d9 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:353
    void* fPtr=fopen(fileName, "r");
 100c2a8:	83 c4 08             	add    esp,0x8
 100c2ab:	68 65 cb 05 01       	push   0x105cb65
 100c2b0:	53                   	push   ebx
 100c2b1:	e8 8b 88 ff ff       	call   1004b41 <fl_fopen>
 100c2b6:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:354
    printd(DEBUG_ELF_LOADER,"fopen returned %u\n",fPtr);
 100c2b8:	83 c4 0c             	add    esp,0xc
 100c2bb:	50                   	push   eax
 100c2bc:	68 13 69 06 01       	push   0x1066913
 100c2c1:	68 00 02 00 00       	push   0x200
 100c2c6:	e8 2c d9 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:355
    if (fPtr==0)
 100c2cb:	83 c4 10             	add    esp,0x10
 100c2ce:	85 ff                	test   edi,edi
 100c2d0:	75 1d                	jne    100c2ef <sysLoadElf+0x70>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:357
    {
        printk("Error opening file '%s' (err=%u), cannot exec\n",fileName,fPtr);
 100c2d2:	83 ec 04             	sub    esp,0x4
 100c2d5:	6a 00                	push   0x0
 100c2d7:	53                   	push   ebx
 100c2d8:	68 90 28 04 01       	push   0x1042890
 100c2dd:	e8 fd d8 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:358
        return -3;
 100c2e2:	83 c4 10             	add    esp,0x10
 100c2e5:	ba fd ff ff ff       	mov    edx,0xfffffffd
 100c2ea:	e9 1d 03 00 00       	jmp    100c60c <sysLoadElf+0x38d>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:361
    }   
 
    GET_OLD_CR3;
 100c2ef:	0f 20 db             	mov    ebx,cr3
 100c2f2:	89 1d 88 8c 07 01    	mov    DWORD PTR ds:0x1078c88,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:363
            
    if (CR3==0x0)
 100c2f8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
 100c2fd:	75 09                	jne    100c308 <sysLoadElf+0x89>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:364
        CR3=CURRENT_CR3
 100c2ff:	0f 20 d8             	mov    eax,cr3
 100c302:	89 c0                	mov    eax,eax
 100c304:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:366
    elfInfo_t* elfInfo;
    if (pElfInfo==NULL)
 100c308:	85 f6                	test   esi,esi
 100c30a:	75 1a                	jne    100c326 <sysLoadElf+0xa7>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:368
        //Get a slot in the load info
        elfInfo=&kExecLoadInfo[kExecLoadCount++];
 100c30c:	8b 35 40 99 12 00    	mov    esi,DWORD PTR ds:0x129940
 100c312:	8d 46 01             	lea    eax,[esi+0x1]
 100c315:	a3 40 99 12 00       	mov    ds:0x129940,eax
 100c31a:	69 f6 dc 18 00 00    	imul   esi,esi,0x18dc
 100c320:	03 35 3c 99 12 00    	add    esi,DWORD PTR ds:0x12993c
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:373
    else
        elfInfo=pElfInfo;
    
    //Initialize the structs we will be using
    memset(elfInfo,0,sizeof(elfInfo_t));
 100c326:	83 ec 04             	sub    esp,0x4
 100c329:	68 dc 18 00 00       	push   0x18dc
 100c32e:	6a 00                	push   0x0
 100c330:	56                   	push   esi
 100c331:	e8 89 cb ff ff       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:374
    memset(&elfInfo->dynamicInfo,0,sizeof(elfDynamic_t));
 100c336:	83 c4 0c             	add    esp,0xc
 100c339:	68 80 0a 00 00       	push   0xa80
 100c33e:	6a 00                	push   0x0
 100c340:	8d 86 54 0e 00 00    	lea    eax,[esi+0xe54]
 100c346:	50                   	push   eax
 100c347:	e8 73 cb ff ff       	call   1008ebf <memset>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:376

    elfInfo->loadCompleted=true;
 100c34c:	c6 86 d8 18 00 00 01 	mov    BYTE PTR [esi+0x18d8],0x1
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:378
    //Load all of the sections in the file to memory
    if (!loadSections(fPtr,elfInfo,CR3,isLibrary))
 100c353:	89 e8                	mov    eax,ebp
 100c355:	0f b6 e8             	movzx  ebp,al
 100c358:	55                   	push   ebp
 100c359:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
 100c35d:	56                   	push   esi
 100c35e:	57                   	push   edi
 100c35f:	e8 4c fb ff ff       	call   100beb0 <loadSections>
 100c364:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:379
        return -4;
 100c367:	ba fc ff ff ff       	mov    edx,0xfffffffc
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:378
    memset(elfInfo,0,sizeof(elfInfo_t));
    memset(&elfInfo->dynamicInfo,0,sizeof(elfDynamic_t));

    elfInfo->loadCompleted=true;
    //Load all of the sections in the file to memory
    if (!loadSections(fPtr,elfInfo,CR3,isLibrary))
 100c36c:	84 c0                	test   al,al
 100c36e:	0f 84 98 02 00 00    	je     100c60c <sysLoadElf+0x38d>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:382
        return -4;

    //First iterate the sections to find the string & symbol tables
    printd(DEBUG_ELF_LOADER,"Scanning section header entries (%u)\n",elfInfo->secHdrRecordCount);
 100c374:	83 ec 04             	sub    esp,0x4
 100c377:	ff b6 44 0e 00 00    	push   DWORD PTR [esi+0xe44]
 100c37d:	68 c0 28 04 01       	push   0x10428c0
 100c382:	68 00 02 00 00       	push   0x200
 100c387:	e8 6b d8 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:384
    //First find the string table
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
 100c38c:	8b 96 44 0e 00 00    	mov    edx,DWORD PTR [esi+0xe44]
 100c392:	83 c4 10             	add    esp,0x10
 100c395:	85 d2                	test   edx,edx
 100c397:	0f 8e 5e 02 00 00    	jle    100c5fb <sysLoadElf+0x37c>
 100c39d:	8d 46 60             	lea    eax,[esi+0x60]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:386
    {
        if (elfInfo->secHdrTable[cnt].sh_type==SHT_STRTAB)
 100c3a0:	bb 00 00 00 00       	mov    ebx,0x0
 100c3a5:	83 7e 38 03          	cmp    DWORD PTR [esi+0x38],0x3
 100c3a9:	0f 85 92 00 00 00    	jne    100c441 <sysLoadElf+0x1c2>
 100c3af:	eb 0f                	jmp    100c3c0 <sysLoadElf+0x141>
 100c3b1:	83 c0 28             	add    eax,0x28
 100c3b4:	83 78 d8 03          	cmp    DWORD PTR [eax-0x28],0x3
 100c3b8:	0f 85 83 00 00 00    	jne    100c441 <sysLoadElf+0x1c2>
 100c3be:	eb 05                	jmp    100c3c5 <sysLoadElf+0x146>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:384
        return -4;

    //First iterate the sections to find the string & symbol tables
    printd(DEBUG_ELF_LOADER,"Scanning section header entries (%u)\n",elfInfo->secHdrRecordCount);
    //First find the string table
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
 100c3c0:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:388
    {
        if (elfInfo->secHdrTable[cnt].sh_type==SHT_STRTAB)
        {
            fl_fseek(fPtr,elfInfo->secHdrTable[cnt].sh_offset,SEEK_SET);
 100c3c5:	83 ec 04             	sub    esp,0x4
 100c3c8:	6a 00                	push   0x0
 100c3ca:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
 100c3d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
 100c3d5:	01 d8                	add    eax,ebx
 100c3d7:	8d 2c c6             	lea    ebp,[esi+eax*8]
 100c3da:	ff 75 44             	push   DWORD PTR [ebp+0x44]
 100c3dd:	57                   	push   edi
 100c3de:	e8 63 8e ff ff       	call   1005246 <fl_fseek>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:389
            elfInfo->dynamicInfo.strTableAddress=malloc(elfInfo->secHdrTable[cnt].sh_size);
 100c3e3:	83 c4 04             	add    esp,0x4
 100c3e6:	ff 75 48             	push   DWORD PTR [ebp+0x48]
 100c3e9:	e8 6e eb ff ff       	call   100af5c <malloc>
 100c3ee:	89 86 b8 18 00 00    	mov    DWORD PTR [esi+0x18b8],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:390
            fl_fread((char*)elfInfo->dynamicInfo.strTableAddress,1,elfInfo->secHdrTable[cnt].sh_size,fPtr);
 100c3f4:	57                   	push   edi
 100c3f5:	ff 75 48             	push   DWORD PTR [ebp+0x48]
 100c3f8:	6a 01                	push   0x1
 100c3fa:	50                   	push   eax
 100c3fb:	e8 11 8c ff ff       	call   1005011 <fl_fread>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:391
            elfInfo->dynamicInfo.strTableFilePtr=elfInfo->secHdrTable[cnt].sh_offset;
 100c400:	8b 45 44             	mov    eax,DWORD PTR [ebp+0x44]
 100c403:	89 86 bc 18 00 00    	mov    DWORD PTR [esi+0x18bc],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:392
            elfInfo->dynamicInfo.strTableSize=elfInfo->secHdrTable[cnt].sh_size;
 100c409:	03 5c 24 2c          	add    ebx,DWORD PTR [esp+0x2c]
 100c40d:	8b 44 de 48          	mov    eax,DWORD PTR [esi+ebx*8+0x48]
 100c411:	89 86 8c 18 00 00    	mov    DWORD PTR [esi+0x188c],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:393
            printd(DEBUG_ELF_LOADER,"Found string (STRTAB) table, read to address 0x%08X, size=0x%08X\n",elfInfo->dynamicInfo.strTableAddress, elfInfo->secHdrTable[cnt].sh_size);
 100c417:	83 c4 20             	add    esp,0x20
 100c41a:	50                   	push   eax
 100c41b:	ff b6 b8 18 00 00    	push   DWORD PTR [esi+0x18b8]
 100c421:	68 e8 28 04 01       	push   0x10428e8
 100c426:	68 00 02 00 00       	push   0x200
 100c42b:	e8 c7 d7 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:397
            break;
        }
    }    
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
 100c430:	83 c4 10             	add    esp,0x10
 100c433:	83 be 44 0e 00 00 00 	cmp    DWORD PTR [esi+0xe44],0x0
 100c43a:	7f 10                	jg     100c44c <sysLoadElf+0x1cd>
 100c43c:	e9 ba 01 00 00       	jmp    100c5fb <sysLoadElf+0x37c>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:384 (discriminator 2)
        return -4;

    //First iterate the sections to find the string & symbol tables
    printd(DEBUG_ELF_LOADER,"Scanning section header entries (%u)\n",elfInfo->secHdrRecordCount);
    //First find the string table
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
 100c441:	83 c3 01             	add    ebx,0x1
 100c444:	39 d3                	cmp    ebx,edx
 100c446:	0f 85 65 ff ff ff    	jne    100c3b1 <sysLoadElf+0x132>
 100c44c:	8d 5e 40             	lea    ebx,[esi+0x40]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:386
    {
        if (elfInfo->secHdrTable[cnt].sh_type==SHT_STRTAB)
 100c44f:	bf 00 00 00 00       	mov    edi,0x0
 100c454:	89 dd                	mov    ebp,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:399
            break;
        }
    }    
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
    {
        if (elfInfo->secHdrTable[cnt].sh_type==SHT_STRTAB)
 100c456:	8b 43 f8             	mov    eax,DWORD PTR [ebx-0x8]
 100c459:	83 f8 03             	cmp    eax,0x3
 100c45c:	75 2b                	jne    100c489 <sysLoadElf+0x20a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:400
            if (elfInfo->dynamicInfo.strTableFilePtr==elfInfo->secHdrTable[cnt].sh_offset)
 100c45e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
 100c461:	39 86 bc 18 00 00    	cmp    DWORD PTR [esi+0x18bc],eax
 100c467:	0f 84 7c 01 00 00    	je     100c5e9 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:406
            {
             /*do nothing, we already found this*/   
            }
            else
            {
                printd(DEBUG_ELF_LOADER,"Found secondary string (STRTAB) table address 0x%08X, ***not using***\n",elfInfo->secHdrTable[cnt].sh_addr);
 100c46d:	83 ec 04             	sub    esp,0x4
 100c470:	ff 33                	push   DWORD PTR [ebx]
 100c472:	68 2c 29 04 01       	push   0x104292c
 100c477:	68 00 02 00 00       	push   0x200
 100c47c:	e8 76 d7 ff ff       	call   1009bf7 <printd>
 100c481:	83 c4 10             	add    esp,0x10
 100c484:	e9 60 01 00 00       	jmp    100c5e9 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:408
            }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_SYMTAB)
 100c489:	83 f8 02             	cmp    eax,0x2
 100c48c:	75 3b                	jne    100c4c9 <sysLoadElf+0x24a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:410
        {
            elfInfo->dynamicInfo.symTableAddress=elfInfo->secHdrTable[cnt].sh_addr;
 100c48e:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c490:	89 86 c0 18 00 00    	mov    DWORD PTR [esi+0x18c0],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:411
            if (isLibrary)
 100c496:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
 100c49b:	74 0c                	je     100c4a9 <sysLoadElf+0x22a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:412
                elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
 100c49d:	03 05 8c 8c 07 01    	add    eax,DWORD PTR ds:0x1078c8c
 100c4a3:	89 86 c0 18 00 00    	mov    DWORD PTR [esi+0x18c0],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:413
            printd(DEBUG_ELF_LOADER,"Found symbol (SYMTAB) table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
 100c4a9:	83 ec 04             	sub    esp,0x4
 100c4ac:	ff b6 c0 18 00 00    	push   DWORD PTR [esi+0x18c0]
 100c4b2:	68 74 29 04 01       	push   0x1042974
 100c4b7:	68 00 02 00 00       	push   0x200
 100c4bc:	e8 36 d7 ff ff       	call   1009bf7 <printd>
 100c4c1:	83 c4 10             	add    esp,0x10
 100c4c4:	e9 20 01 00 00       	jmp    100c5e9 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:415
        }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_DYNAMIC)
 100c4c9:	83 f8 06             	cmp    eax,0x6
 100c4cc:	75 48                	jne    100c516 <sysLoadElf+0x297>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:417
        {
            elfInfo->dynamicSectionAddress=elfInfo->secHdrTable[cnt].sh_addr;
 100c4ce:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c4d0:	89 86 50 0e 00 00    	mov    DWORD PTR [esi+0xe50],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:418
            if (isLibrary)
 100c4d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
 100c4db:	74 0c                	je     100c4e9 <sysLoadElf+0x26a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:419
                elfInfo->dynamicSectionAddress+=libLoadOffset;
 100c4dd:	03 05 8c 8c 07 01    	add    eax,DWORD PTR ds:0x1078c8c
 100c4e3:	89 86 50 0e 00 00    	mov    DWORD PTR [esi+0xe50],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:420
            printd(DEBUG_ELF_LOADER,"Found section %s (DYNAMIC)  table address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->dynamicInfo.symTableAddress);
 100c4e9:	83 ec 08             	sub    esp,0x8
 100c4ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
 100c4ef:	56                   	push   esi
 100c4f0:	e8 c2 f7 ff ff       	call   100bcb7 <strTabEntry>
 100c4f5:	83 c4 10             	add    esp,0x10
 100c4f8:	ff b6 c0 18 00 00    	push   DWORD PTR [esi+0x18c0]
 100c4fe:	50                   	push   eax
 100c4ff:	68 a0 29 04 01       	push   0x10429a0
 100c504:	68 00 02 00 00       	push   0x200
 100c509:	e8 e9 d6 ff ff       	call   1009bf7 <printd>
 100c50e:	83 c4 10             	add    esp,0x10
 100c511:	e9 d3 00 00 00       	jmp    100c5e9 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:422
        }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_DYNSYM)
 100c516:	83 f8 0b             	cmp    eax,0xb
 100c519:	75 29                	jne    100c544 <sysLoadElf+0x2c5>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:424
        {
            printd(DEBUG_ELF_LOADER,"Found %s (DYNSYM) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
 100c51b:	83 ec 08             	sub    esp,0x8
 100c51e:	ff 73 f4             	push   DWORD PTR [ebx-0xc]
 100c521:	56                   	push   esi
 100c522:	e8 90 f7 ff ff       	call   100bcb7 <strTabEntry>
 100c527:	83 c4 10             	add    esp,0x10
 100c52a:	ff 33                	push   DWORD PTR [ebx]
 100c52c:	50                   	push   eax
 100c52d:	68 d4 29 04 01       	push   0x10429d4
 100c532:	68 00 02 00 00       	push   0x200
 100c537:	e8 bb d6 ff ff       	call   1009bf7 <printd>
 100c53c:	83 c4 10             	add    esp,0x10
 100c53f:	e9 a5 00 00 00       	jmp    100c5e9 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:426
        }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_RELA)
 100c544:	83 f8 04             	cmp    eax,0x4
 100c547:	75 26                	jne    100c56f <sysLoadElf+0x2f0>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:428
        {
            printd(DEBUG_ELF_LOADER,"Found %s (RELA) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
 100c549:	83 ec 08             	sub    esp,0x8
 100c54c:	ff 73 f4             	push   DWORD PTR [ebx-0xc]
 100c54f:	56                   	push   esi
 100c550:	e8 62 f7 ff ff       	call   100bcb7 <strTabEntry>
 100c555:	83 c4 10             	add    esp,0x10
 100c558:	ff 33                	push   DWORD PTR [ebx]
 100c55a:	50                   	push   eax
 100c55b:	68 00 2a 04 01       	push   0x1042a00
 100c560:	68 00 02 00 00       	push   0x200
 100c565:	e8 8d d6 ff ff       	call   1009bf7 <printd>
 100c56a:	83 c4 10             	add    esp,0x10
 100c56d:	eb 7a                	jmp    100c5e9 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:430
        }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_HASH)
 100c56f:	83 f8 05             	cmp    eax,0x5
 100c572:	75 26                	jne    100c59a <sysLoadElf+0x31b>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:432
        {
            printd(DEBUG_ELF_LOADER,"Found %s (HASH) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
 100c574:	83 ec 08             	sub    esp,0x8
 100c577:	ff 73 f4             	push   DWORD PTR [ebx-0xc]
 100c57a:	56                   	push   esi
 100c57b:	e8 37 f7 ff ff       	call   100bcb7 <strTabEntry>
 100c580:	83 c4 10             	add    esp,0x10
 100c583:	ff 33                	push   DWORD PTR [ebx]
 100c585:	50                   	push   eax
 100c586:	68 2c 2a 04 01       	push   0x1042a2c
 100c58b:	68 00 02 00 00       	push   0x200
 100c590:	e8 62 d6 ff ff       	call   1009bf7 <printd>
 100c595:	83 c4 10             	add    esp,0x10
 100c598:	eb 4f                	jmp    100c5e9 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:434
        }
        else if (elfInfo->secHdrTable[cnt].sh_type==SHT_NOTE)
 100c59a:	83 f8 07             	cmp    eax,0x7
 100c59d:	75 26                	jne    100c5c5 <sysLoadElf+0x346>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:436
        {
            printd(DEBUG_ELF_LOADER,"Found %s (NOTE) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
 100c59f:	83 ec 08             	sub    esp,0x8
 100c5a2:	ff 73 f4             	push   DWORD PTR [ebx-0xc]
 100c5a5:	56                   	push   esi
 100c5a6:	e8 0c f7 ff ff       	call   100bcb7 <strTabEntry>
 100c5ab:	83 c4 10             	add    esp,0x10
 100c5ae:	ff 33                	push   DWORD PTR [ebx]
 100c5b0:	50                   	push   eax
 100c5b1:	68 58 2a 04 01       	push   0x1042a58
 100c5b6:	68 00 02 00 00       	push   0x200
 100c5bb:	e8 37 d6 ff ff       	call   1009bf7 <printd>
 100c5c0:	83 c4 10             	add    esp,0x10
 100c5c3:	eb 24                	jmp    100c5e9 <sysLoadElf+0x36a>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:440
        }
        else
        {
            printd(DEBUG_ELF_LOADER,"Found (%s) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
 100c5c5:	83 ec 08             	sub    esp,0x8
 100c5c8:	ff 73 f4             	push   DWORD PTR [ebx-0xc]
 100c5cb:	56                   	push   esi
 100c5cc:	e8 e6 f6 ff ff       	call   100bcb7 <strTabEntry>
 100c5d1:	83 c4 10             	add    esp,0x10
 100c5d4:	ff 33                	push   DWORD PTR [ebx]
 100c5d6:	50                   	push   eax
 100c5d7:	68 84 2a 04 01       	push   0x1042a84
 100c5dc:	68 00 02 00 00       	push   0x200
 100c5e1:	e8 11 d6 ff ff       	call   1009bf7 <printd>
 100c5e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:397 (discriminator 2)
            elfInfo->dynamicInfo.strTableSize=elfInfo->secHdrTable[cnt].sh_size;
            printd(DEBUG_ELF_LOADER,"Found string (STRTAB) table, read to address 0x%08X, size=0x%08X\n",elfInfo->dynamicInfo.strTableAddress, elfInfo->secHdrTable[cnt].sh_size);
            break;
        }
    }    
    for (int cnt=0;cnt<elfInfo->secHdrRecordCount;cnt++)
 100c5e9:	83 c7 01             	add    edi,0x1
 100c5ec:	83 c3 28             	add    ebx,0x28
 100c5ef:	39 be 44 0e 00 00    	cmp    DWORD PTR [esi+0xe44],edi
 100c5f5:	0f 8f 59 fe ff ff    	jg     100c454 <sysLoadElf+0x1d5>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:443
        else
        {
            printd(DEBUG_ELF_LOADER,"Found (%s) section address 0x%08X.\n",strTabEntry(elfInfo,elfInfo->secHdrTable[cnt].sh_name),elfInfo->secHdrTable[cnt].sh_addr);
        }
    }
     processELFDynamicSection(elfInfo);   
 100c5fb:	83 ec 0c             	sub    esp,0xc
 100c5fe:	56                   	push   esi
 100c5ff:	e8 12 00 00 00       	call   100c616 <processELFDynamicSection>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:444
     return true;
 100c604:	83 c4 10             	add    esp,0x10
 100c607:	ba 01 00 00 00       	mov    edx,0x1
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:445
}
 100c60c:	89 d0                	mov    eax,edx
 100c60e:	83 c4 1c             	add    esp,0x1c
 100c611:	5b                   	pop    ebx
 100c612:	5e                   	pop    esi
 100c613:	5f                   	pop    edi
 100c614:	5d                   	pop    ebp
 100c615:	c3                   	ret    

0100c616 <processELFDynamicSection>:
processELFDynamicSection():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:65
{
    __asm__("mov cr3,eax\n"::[oldCR3] "a" (INIT_GDT_TABLE_ADDRESS));
}

void processELFDynamicSection(elfInfo_t* elfInfo)
{
 100c616:	55                   	push   ebp
 100c617:	57                   	push   edi
 100c618:	56                   	push   esi
 100c619:	53                   	push   ebx
 100c61a:	81 ec 8c 00 00 00    	sub    esp,0x8c
 100c620:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:66
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
 100c627:	8b 9d 50 0e 00 00    	mov    ebx,DWORD PTR [ebp+0xe50]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:69

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
 100c62d:	c7 85 a0 18 00 00 00 	mov    DWORD PTR [ebp+0x18a0],0x0
 100c634:	00 00 00 
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:70
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
 100c637:	83 bd 4c 0e 00 00 00 	cmp    DWORD PTR [ebp+0xe4c],0x0
 100c63e:	0f 8e 5a 02 00 00    	jle    100c89e <processELFDynamicSection+0x288>
 100c644:	83 c3 04             	add    ebx,0x4
 100c647:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:72
    {
        switch (dyn[cnt].d_tag)
 100c64c:	83 7b fc 1a          	cmp    DWORD PTR [ebx-0x4],0x1a
 100c650:	0f 87 36 02 00 00    	ja     100c88c <processELFDynamicSection+0x276>
 100c656:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
 100c659:	ff 24 85 e0 8c 02 01 	jmp    DWORD PTR [eax*4+0x1028ce0]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:76
        {
            //DT_NEEDED is a library which we need to load
            case DT_NEEDED:
                printk("ELF at: 0x%08X, copy to: 0x%08X, neededCount=0x%08X\n",elfInfo, elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount],elfInfo->dynamicInfo.neededCount);
 100c660:	8b 85 a0 18 00 00    	mov    eax,DWORD PTR [ebp+0x18a0]
 100c666:	50                   	push   eax
 100c667:	c1 e0 08             	shl    eax,0x8
 100c66a:	8d 84 05 54 0e 00 00 	lea    eax,[ebp+eax*1+0xe54]
 100c671:	50                   	push   eax
 100c672:	55                   	push   ebp
 100c673:	68 a8 2a 04 01       	push   0x1042aa8
 100c678:	e8 62 d5 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:77
                strcpy(elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount++],(char*)(elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr));
 100c67d:	8b 13                	mov    edx,DWORD PTR [ebx]
 100c67f:	8b 85 b8 18 00 00    	mov    eax,DWORD PTR [ebp+0x18b8]
 100c685:	8d 14 90             	lea    edx,[eax+edx*4]
 100c688:	8b 85 a0 18 00 00    	mov    eax,DWORD PTR [ebp+0x18a0]
 100c68e:	8d 48 01             	lea    ecx,[eax+0x1]
 100c691:	89 8d a0 18 00 00    	mov    DWORD PTR [ebp+0x18a0],ecx
 100c697:	83 c4 08             	add    esp,0x8
 100c69a:	52                   	push   edx
 100c69b:	c1 e0 08             	shl    eax,0x8
 100c69e:	8d 84 05 54 0e 00 00 	lea    eax,[ebp+eax*1+0xe54]
 100c6a5:	50                   	push   eax
 100c6a6:	e8 05 d6 ff ff       	call   1009cb0 <strcpy>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:78
                char fileName[100]="/";
 100c6ab:	c7 44 24 2c 2f 00 00 	mov    DWORD PTR [esp+0x2c],0x2f
 100c6b2:	00 
 100c6b3:	8d 7c 24 30          	lea    edi,[esp+0x30]
 100c6b7:	b9 18 00 00 00       	mov    ecx,0x18
 100c6bc:	b8 00 00 00 00       	mov    eax,0x0
 100c6c1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:79
                strcat(fileName,elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount-1]);
 100c6c3:	83 c4 08             	add    esp,0x8
 100c6c6:	8b 85 a0 18 00 00    	mov    eax,DWORD PTR [ebp+0x18a0]
 100c6cc:	c1 e0 08             	shl    eax,0x8
 100c6cf:	8d 84 05 54 0d 00 00 	lea    eax,[ebp+eax*1+0xd54]
 100c6d6:	50                   	push   eax
 100c6d7:	8d 44 24 28          	lea    eax,[esp+0x28]
 100c6db:	50                   	push   eax
 100c6dc:	e8 5f d5 ff ff       	call   1009c40 <strcat>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:80
                printd(DEBUG_ELF_LOADER,"Found NEEDED, library name='%s', orig name='%s'\n",fileName,elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr);
 100c6e1:	8b 13                	mov    edx,DWORD PTR [ebx]
 100c6e3:	8b 85 b8 18 00 00    	mov    eax,DWORD PTR [ebp+0x18b8]
 100c6e9:	8d 04 90             	lea    eax,[eax+edx*4]
 100c6ec:	50                   	push   eax
 100c6ed:	8d 44 24 30          	lea    eax,[esp+0x30]
 100c6f1:	50                   	push   eax
 100c6f2:	68 e0 2a 04 01       	push   0x1042ae0
 100c6f7:	68 00 02 00 00       	push   0x200
 100c6fc:	e8 f6 d4 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:81
                if (kDebugLevel&DEBUG_ELF_LOADER)
 100c701:	83 c4 20             	add    esp,0x20
 100c704:	f6 05 79 98 12 00 02 	test   BYTE PTR ds:0x129879,0x2
 100c70b:	74 1f                	je     100c72c <processELFDynamicSection+0x116>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:83
                {
                    printd(DEBUG_ELF_LOADER,"loadElf: Calling loadElf again to load '%s' ... press a key to continue\n",&fileName);
 100c70d:	83 ec 04             	sub    esp,0x4
 100c710:	8d 44 24 20          	lea    eax,[esp+0x20]
 100c714:	50                   	push   eax
 100c715:	68 14 2b 04 01       	push   0x1042b14
 100c71a:	68 00 02 00 00       	push   0x200
 100c71f:	e8 d3 d4 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:84
                    waitForKeyboardKey();
 100c724:	e8 62 6a ff ff       	call   100318b <waitForKeyboardKey>
 100c729:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:86
                }
                void* fPtr=fopen(fileName, "r");
 100c72c:	83 ec 08             	sub    esp,0x8
 100c72f:	68 65 cb 05 01       	push   0x105cb65
 100c734:	8d 44 24 28          	lea    eax,[esp+0x28]
 100c738:	50                   	push   eax
 100c739:	e8 03 84 ff ff       	call   1004b41 <fl_fopen>
 100c73e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:87
                if (fPtr==0)
 100c742:	83 c4 10             	add    esp,0x10
 100c745:	85 c0                	test   eax,eax
 100c747:	75 21                	jne    100c76a <processELFDynamicSection+0x154>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:89
                {
                    printk("Error opening file '%s', cannot exec\n",fileName);
 100c749:	83 ec 08             	sub    esp,0x8
 100c74c:	8d 44 24 24          	lea    eax,[esp+0x24]
 100c750:	50                   	push   eax
 100c751:	68 60 2b 04 01       	push   0x1042b60
 100c756:	e8 84 d4 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:90
                    elfInfo->loadCompleted=false;
 100c75b:	c6 85 d8 18 00 00 00 	mov    BYTE PTR [ebp+0x18d8],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:91
                    return;
 100c762:	83 c4 10             	add    esp,0x10
 100c765:	e9 34 01 00 00       	jmp    100c89e <processELFDynamicSection+0x288>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:93
                }   
                elfInfo->dynamicInfo.neededExecLoadNum[elfInfo->dynamicInfo.neededPtr++]=kExecLoadCount;
 100c76a:	8b 85 54 18 00 00    	mov    eax,DWORD PTR [ebp+0x1854]
 100c770:	8d 50 01             	lea    edx,[eax+0x1]
 100c773:	89 95 54 18 00 00    	mov    DWORD PTR [ebp+0x1854],edx
 100c779:	8b 3d 40 99 12 00    	mov    edi,DWORD PTR ds:0x129940
 100c77f:	89 bc 85 58 18 00 00 	mov    DWORD PTR [ebp+eax*4+0x1858],edi
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:94
                elfInfo_t* elfLibPtr=&kExecLoadInfo[kExecLoadCount++];
 100c786:	8d 47 01             	lea    eax,[edi+0x1]
 100c789:	a3 40 99 12 00       	mov    ds:0x129940,eax
 100c78e:	69 ff dc 18 00 00    	imul   edi,edi,0x18dc
 100c794:	03 3d 3c 99 12 00    	add    edi,DWORD PTR ds:0x12993c
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:95
                sysLoadElf(fPtr,elfLibPtr,0x0,true);
 100c79a:	6a 01                	push   0x1
 100c79c:	6a 00                	push   0x0
 100c79e:	57                   	push   edi
 100c79f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100c7a3:	e8 d7 fa ff ff       	call   100c27f <sysLoadElf>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:96
                fclose(fPtr);
 100c7a8:	83 c4 04             	add    esp,0x4
 100c7ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
 100c7af:	e8 b2 87 ff ff       	call   1004f66 <fl_fclose>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:97
                if (!elfLibPtr->loadCompleted)
 100c7b4:	83 c4 10             	add    esp,0x10
 100c7b7:	80 bf d8 18 00 00 00 	cmp    BYTE PTR [edi+0x18d8],0x0
 100c7be:	0f 85 c8 00 00 00    	jne    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:99
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
 100c7c4:	83 ec 08             	sub    esp,0x8
 100c7c7:	68 88 2b 04 01       	push   0x1042b88
 100c7cc:	68 00 02 00 00       	push   0x200
 100c7d1:	e8 21 d4 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:100
                    elfInfo->loadCompleted=false;
 100c7d6:	c6 85 d8 18 00 00 00 	mov    BYTE PTR [ebp+0x18d8],0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:101
                    return;
 100c7dd:	83 c4 10             	add    esp,0x10
 100c7e0:	e9 b9 00 00 00       	jmp    100c89e <processELFDynamicSection+0x288>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:105
                }
                break;
            case DT_PLTRELSZ:
                elfInfo->dynamicInfo.pltGOTTableTableSize=dyn[cnt].d_un.d_val;
 100c7e5:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c7e7:	89 85 98 18 00 00    	mov    DWORD PTR [ebp+0x1898],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:106
                break;
 100c7ed:	e9 9a 00 00 00       	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:108
            case DT_PLTGOT:
                elfInfo->dynamicInfo.pltGOTTableAddress=dyn[cnt].d_un.d_ptr;
 100c7f2:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c7f4:	89 85 b0 18 00 00    	mov    DWORD PTR [ebp+0x18b0],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:109
                break;
 100c7fa:	e9 8d 00 00 00       	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:111
            case DT_HASH:
                elfInfo->dynamicInfo.hashTableAddress=dyn[cnt].d_un.d_ptr;
 100c7ff:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c801:	89 85 b4 18 00 00    	mov    DWORD PTR [ebp+0x18b4],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:112
                break;
 100c807:	e9 80 00 00 00       	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:120
                break;
            case DT_SYMTAB:
                //Already found it above
                break;
            case DT_RELA:
                elfInfo->dynamicInfo.relATableAddress=dyn[cnt].d_un.d_ptr;
 100c80c:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c80e:	89 85 c4 18 00 00    	mov    DWORD PTR [ebp+0x18c4],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:121
                break;
 100c814:	eb 76                	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:123
            case DT_RELASZ:
                elfInfo->dynamicInfo.relATableSize=dyn[cnt].d_un.d_val;
 100c816:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c818:	89 85 84 18 00 00    	mov    DWORD PTR [ebp+0x1884],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:124
                break;
 100c81e:	eb 6c                	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:126
            case DT_RELAENT:
                elfInfo->dynamicInfo.relAEntrySize=dyn[cnt].d_un.d_val;
 100c820:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c822:	89 85 88 18 00 00    	mov    DWORD PTR [ebp+0x1888],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:127
                break;
 100c828:	eb 62                	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:129
            case DT_STRSZ:
                elfInfo->dynamicInfo.strTableSize=dyn[cnt].d_un.d_val;
 100c82a:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c82c:	89 85 8c 18 00 00    	mov    DWORD PTR [ebp+0x188c],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:130
                break;
 100c832:	eb 58                	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:132
            case DT_SYMENT:
                elfInfo->dynamicInfo.symEntrySize=dyn[cnt].d_un.d_val;
 100c834:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c836:	89 85 90 18 00 00    	mov    DWORD PTR [ebp+0x1890],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:133
                break;
 100c83c:	eb 4e                	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:136
            case DT_INIT:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
 100c83e:	a1 8c 8c 07 01       	mov    eax,ds:0x1078c8c
 100c843:	03 03                	add    eax,DWORD PTR [ebx]
 100c845:	89 85 c8 18 00 00    	mov    DWORD PTR [ebp+0x18c8],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:137
                break;
 100c84b:	eb 3f                	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:140
            case DT_FINI:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
 100c84d:	a1 8c 8c 07 01       	mov    eax,ds:0x1078c8c
 100c852:	03 03                	add    eax,DWORD PTR [ebx]
 100c854:	89 85 cc 18 00 00    	mov    DWORD PTR [ebp+0x18cc],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:141
                break;
 100c85a:	eb 30                	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:151
                //Can't find the relocation section this way, using section headers
                //elfInfo->dynamicInfo.relTableAddress=dyn[cnt].d_un.d_ptr;
                //printk("%s: Found DT_REL, address=0x%08X (0x%08X)\n",isLibrary?"library":"executable",dyn[cnt].d_un.d_ptr,elfInfo->dynamicInfo.relTableAddress);
                break;
            case DT_RELSZ:
                elfInfo->dynamicInfo.relTableSize=dyn[cnt].d_un.d_val;
 100c85c:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c85e:	89 85 94 18 00 00    	mov    DWORD PTR [ebp+0x1894],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:152
                break;
 100c864:	eb 26                	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:154
            case DT_RELENT:
                elfInfo->dynamicInfo.relEntrySize=dyn[cnt].d_un.d_val;
 100c866:	8b 03                	mov    eax,DWORD PTR [ebx]
 100c868:	89 85 9c 18 00 00    	mov    DWORD PTR [ebp+0x189c],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:155
                break;
 100c86e:	eb 1c                	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:168
                break;
            case DT_BIND_NOW:
                break;
            case DT_INIT_ARRAY:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
 100c870:	a1 8c 8c 07 01       	mov    eax,ds:0x1078c8c
 100c875:	03 03                	add    eax,DWORD PTR [ebx]
 100c877:	89 85 c8 18 00 00    	mov    DWORD PTR [ebp+0x18c8],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:169
                break;
 100c87d:	eb 0d                	jmp    100c88c <processELFDynamicSection+0x276>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:172
            case DT_FINI_ARRAY:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
 100c87f:	a1 8c 8c 07 01       	mov    eax,ds:0x1078c8c
 100c884:	03 03                	add    eax,DWORD PTR [ebx]
 100c886:	89 85 cc 18 00 00    	mov    DWORD PTR [ebp+0x18cc],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:70
{
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
 100c88c:	83 c6 01             	add    esi,0x1
 100c88f:	83 c3 08             	add    ebx,0x8
 100c892:	39 b5 4c 0e 00 00    	cmp    DWORD PTR [ebp+0xe4c],esi
 100c898:	0f 8f ae fd ff ff    	jg     100c64c <processELFDynamicSection+0x36>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:185
            default:
                break;
        }
    }

}
 100c89e:	81 c4 8c 00 00 00    	add    esp,0x8c
 100c8a4:	5b                   	pop    ebx
 100c8a5:	5e                   	pop    esi
 100c8a6:	5f                   	pop    edi
 100c8a7:	5d                   	pop    ebp
 100c8a8:	c3                   	ret    

0100c8a9 <sysExec>:
sysExec():
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:448
     processELFDynamicSection(elfInfo);   
     return true;
}

int sysExec(process_t* process,int argc,char** argv)
{
 100c8a9:	56                   	push   esi
 100c8aa:	53                   	push   ebx
 100c8ab:	83 ec 18             	sub    esp,0x18
 100c8ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:452
    int lsysExecRetVal=0;
     register int *eax __asm__("eax");

    newCR3=process->task->tss->CR3;
 100c8b2:	8b 06                	mov    eax,DWORD PTR [esi]
 100c8b4:	8b 00                	mov    eax,DWORD PTR [eax]
 100c8b6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
 100c8b9:	a3 5c 8c 07 01       	mov    ds:0x1078c5c,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:453
    printd(DEBUG_LOADER,"sysExec: Entered ... executing '%s'\n",process->path);
 100c8be:	ff 76 0c             	push   DWORD PTR [esi+0xc]
 100c8c1:	68 c4 2b 04 01       	push   0x1042bc4
 100c8c6:	68 00 00 02 00       	push   0x20000
 100c8cb:	e8 27 d3 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:454
    process->task->tss->CS=0x3B;
 100c8d0:	8b 06                	mov    eax,DWORD PTR [esi]
 100c8d2:	8b 00                	mov    eax,DWORD PTR [eax]
 100c8d4:	66 c7 40 4e 3b 00    	mov    WORD PTR [eax+0x4e],0x3b
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:455
    process->task->tss->EIP=process->elf->hdr.e_entry;
 100c8da:	8b 06                	mov    eax,DWORD PTR [esi]
 100c8dc:	8b 00                	mov    eax,DWORD PTR [eax]
 100c8de:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
 100c8e1:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
 100c8e4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:460
    //If loaded successfully then execute

    //__asm__("mov ax,0x203\nltr ax\n");
    
    if (process->elf->loadCompleted)
 100c8e7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
 100c8ea:	83 c4 10             	add    esp,0x10
 100c8ed:	80 b8 d8 18 00 00 00 	cmp    BYTE PTR [eax+0x18d8],0x0
 100c8f4:	0f 84 6f 02 00 00    	je     100cb69 <ReturnPoint+0x34>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:462
    {
        printd(DEBUG_ELF_LOADER,"exec: Executing %s at 0x%08X, CR3=0x%08X, return address is =0x%08X\n", process->path, process->elf->hdr.e_entry, newCR3 ,__builtin_return_address(0));
 100c8fa:	83 ec 08             	sub    esp,0x8
 100c8fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 100c901:	ff 35 5c 8c 07 01    	push   DWORD PTR ds:0x1078c5c
 100c907:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
 100c90a:	ff 70 18             	push   DWORD PTR [eax+0x18]
 100c90d:	ff 76 0c             	push   DWORD PTR [esi+0xc]
 100c910:	68 ec 2b 04 01       	push   0x1042bec
 100c915:	68 00 02 00 00       	push   0x200
 100c91a:	e8 d8 d2 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:464
    
        GET_OLD_CR3;
 100c91f:	0f 20 db             	mov    ebx,cr3
 100c922:	89 1d 88 8c 07 01    	mov    DWORD PTR ds:0x1078c88,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:465
        kKernelTask->tss->EIP=(uint32_t)_call_gate_wrapper;
 100c928:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c92d:	8b 10                	mov    edx,DWORD PTR [eax]
 100c92f:	c7 42 20 a4 bc 00 01 	mov    DWORD PTR [edx+0x20],0x100bca4
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:466
        kKernelTask->tss->CS=getCS();
 100c936:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c938:	83 c4 20             	add    esp,0x20
 100c93b:	e8 0e 37 ff ff       	call   100004e <getCS>
 100c940:	66 89 43 4e          	mov    WORD PTR [ebx+0x4e],ax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:467
        kKernelTask->tss->DS=getDS();
 100c944:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c949:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c94b:	e8 01 37 ff ff       	call   1000051 <getDS>
 100c950:	66 89 43 56          	mov    WORD PTR [ebx+0x56],ax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:468
        kKernelTask->tss->ES=getES();
 100c954:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c959:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c95b:	e8 f4 36 ff ff       	call   1000054 <getES>
 100c960:	66 89 43 4a          	mov    WORD PTR [ebx+0x4a],ax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:469
        kKernelTask->tss->FS=getFS();
 100c964:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c969:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c96b:	e8 e7 36 ff ff       	call   1000057 <getFS>
 100c970:	66 89 43 5a          	mov    WORD PTR [ebx+0x5a],ax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:470
        kKernelTask->tss->GS=getGS();
 100c974:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c979:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c97b:	e8 db 36 ff ff       	call   100005b <getGS>
 100c980:	66 89 43 5e          	mov    WORD PTR [ebx+0x5e],ax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:471
        kKernelTask->tss->SS=getSS();
 100c984:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c989:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c98b:	e8 cf 36 ff ff       	call   100005f <getSS>
 100c990:	66 89 43 52          	mov    WORD PTR [ebx+0x52],ax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:472
        kKernelTask->tss->CR3=oldCR3;
 100c994:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c999:	8b 10                	mov    edx,DWORD PTR [eax]
 100c99b:	8b 0d 88 8c 07 01    	mov    ecx,DWORD PTR ds:0x1078c88
 100c9a1:	89 4a 1c             	mov    DWORD PTR [edx+0x1c],ecx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:473
        kKernelTask->tss->SS0=getSS();
 100c9a4:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c9a6:	e8 b4 36 ff ff       	call   100005f <getSS>
 100c9ab:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:474
        kKernelTask->tss->ESP0=0xFFF000;
 100c9af:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c9b4:	8b 10                	mov    edx,DWORD PTR [eax]
 100c9b6:	c7 42 04 00 f0 ff 00 	mov    DWORD PTR [edx+0x4],0xfff000
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:475
        kKernelTask->tss->EFLAGS=0x200207;
 100c9bd:	8b 10                	mov    edx,DWORD PTR [eax]
 100c9bf:	c7 42 24 07 02 20 00 	mov    DWORD PTR [edx+0x24],0x200207
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:476
        kKernelTask->tss->LINK=allocPagesAndMap(0x1000); //need an old TSS entry (garbage) to "store" the old variables to on LTR
 100c9c6:	8b 18                	mov    ebx,DWORD PTR [eax]
 100c9c8:	83 ec 0c             	sub    esp,0xc
 100c9cb:	68 00 10 00 00       	push   0x1000
 100c9d0:	e8 3f e3 ff ff       	call   100ad14 <allocPagesAndMap>
 100c9d5:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:477
        kKernelTask->tss->IOPB=kKernelTask->tss;
 100c9d9:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c9de:	8b 10                	mov    edx,DWORD PTR [eax]
 100c9e0:	66 89 52 64          	mov    WORD PTR [edx+0x64],dx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:478
        printk("kernel tss is at 0x%08X\n",kKernelTask->tss);
 100c9e4:	83 c4 08             	add    esp,0x8
 100c9e7:	ff 30                	push   DWORD PTR [eax]
 100c9e9:	68 26 69 06 01       	push   0x1066926
 100c9ee:	e8 ec d1 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:479
        tss_t* t=kKernelTask->tss;
 100c9f3:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100c9f8:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:480
        printd(DEBUG_ELF_LOADER,"cs=%2X, ds=%2X, es=%2X, fs=%2X, gs=%2X, ss=%2X, cr3=0x%08X, flags=0x%08X, return=0x%08X\n",t->CS, t->DS, t->ES, t->FS, t->GS, t->SS,t->EFLAGS,_call_gate_wrapper);
 100c9fa:	83 c4 08             	add    esp,0x8
 100c9fd:	68 a4 bc 00 01       	push   0x100bca4
 100ca02:	ff 70 24             	push   DWORD PTR [eax+0x24]
 100ca05:	0f b7 50 52          	movzx  edx,WORD PTR [eax+0x52]
 100ca09:	52                   	push   edx
 100ca0a:	0f b7 50 5e          	movzx  edx,WORD PTR [eax+0x5e]
 100ca0e:	52                   	push   edx
 100ca0f:	0f b7 50 5a          	movzx  edx,WORD PTR [eax+0x5a]
 100ca13:	52                   	push   edx
 100ca14:	0f b7 50 4a          	movzx  edx,WORD PTR [eax+0x4a]
 100ca18:	52                   	push   edx
 100ca19:	0f b7 50 56          	movzx  edx,WORD PTR [eax+0x56]
 100ca1d:	52                   	push   edx
 100ca1e:	0f b7 40 4e          	movzx  eax,WORD PTR [eax+0x4e]
 100ca22:	50                   	push   eax
 100ca23:	68 34 2c 04 01       	push   0x1042c34
 100ca28:	68 00 02 00 00       	push   0x200
 100ca2d:	e8 c5 d1 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:482
    struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
    idt_set_gate (&idtTable[0x80], 0x48, (int)&_call_gate_wrapper, ACS_INT_GATE | ACS_DPL_0);               //
 100ca32:	83 c4 30             	add    esp,0x30
 100ca35:	6a 0e                	push   0xe
 100ca37:	68 a4 bc 00 01       	push   0x100bca4
 100ca3c:	6a 48                	push   0x48
 100ca3e:	68 00 34 16 00       	push   0x163400
 100ca43:	e8 c8 dc ff ff       	call   100a710 <idt_set_gate>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:484
    //Create our return task gate
    gdtEntry(0x9,(uint32_t)kKernelTask->tss,sizeof(tss_t)-1,GDT_PRESENT | GDT_CODE | GDT_READABLE | GDT_DPL0 | GDT_CONFORMING, GDT_GRANULAR | GDT_32BIT ,true);
 100ca48:	83 c4 08             	add    esp,0x8
 100ca4b:	6a 01                	push   0x1
 100ca4d:	6a c0                	push   0xffffffc0
 100ca4f:	6a 8c                	push   0xffffff8c
 100ca51:	6a 67                	push   0x67
 100ca53:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100ca58:	ff 30                	push   DWORD PTR [eax]
 100ca5a:	6a 09                	push   0x9
 100ca5c:	e8 0a 69 ff ff       	call   100336b <gdtEntry>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:486
    //Create tss GDT entry for the process
    gdtEntry(0x10, (uint32_t)process->task->tss,process->task->tss+sizeof(tss_t)-1, GDT_PRESENT | GDT_DPL3 | GDT_CODE | GDT_READABLE ,GDT_GRANULAR | GDT_32BIT,true);
 100ca61:	8b 06                	mov    eax,DWORD PTR [esi]
 100ca63:	8b 00                	mov    eax,DWORD PTR [eax]
 100ca65:	83 c4 18             	add    esp,0x18
 100ca68:	6a 01                	push   0x1
 100ca6a:	6a c0                	push   0xffffffc0
 100ca6c:	6a e8                	push   0xffffffe8
 100ca6e:	8d 90 d8 29 00 00    	lea    edx,[eax+0x29d8]
 100ca74:	52                   	push   edx
 100ca75:	50                   	push   eax
 100ca76:	6a 10                	push   0x10
 100ca78:	e8 ee 68 ff ff       	call   100336b <gdtEntry>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:487
    kernelGDT.limit = sizeof(sGDT) * GDT_ENTRIES - 1;
 100ca7d:	66 c7 05 88 99 12 00 	mov    WORD PTR ds:0x129988,0x31f
 100ca84:	1f 03 
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:488
    kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
 100ca86:	c7 05 8a 99 12 00 00 	mov    DWORD PTR ds:0x12998a,0x164800
 100ca8d:	48 16 00 
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:489
    set_gdt(&kernelGDT);
 100ca90:	83 c4 14             	add    esp,0x14
 100ca93:	68 88 99 12 00       	push   0x129988
 100ca98:	e8 e3 04 00 00       	call   100cf80 <set_gdt>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:494


//return 0;
 
        __asm__("push ds\n"
 100ca9d:	1e                   	push   ds
 100ca9e:	06                   	push   es
 100ca9f:	0f a0                	push   fs
 100caa1:	0f a8                	push   gs
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:498
                "push es\n"
                "push fs\n"
                "push gs\n");
        __asm__("mov  ds,bx\n":: "b" (0x33));
 100caa3:	bb 33 00 00 00       	mov    ebx,0x33
 100caa8:	8e db                	mov    ds,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:499
        __asm__("mov  es,bx\n":: "b" (0x33));
 100caaa:	8e c3                	mov    es,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:500
        __asm__("mov  fs,bx\n":: "b" (0x33));
 100caac:	8e e3                	mov    fs,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:501
        __asm__("mov  gs,bx\n":: "b" (0x33));
 100caae:	8e eb                	mov    gs,ebx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:502
        kKernelTask->tss->ESP=getESP() + 21;
 100cab0:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100cab5:	8b 18                	mov    ebx,DWORD PTR [eax]
 100cab7:	e8 a6 35 ff ff       	call   1000062 <getESP>
 100cabc:	83 c0 15             	add    eax,0x15
 100cabf:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:503
        kKernelTask->tss->ESP0=getESP() + 21;
 100cac2:	a1 98 99 12 00       	mov    eax,ds:0x129998
 100cac7:	8b 18                	mov    ebx,DWORD PTR [eax]
 100cac9:	e8 94 35 ff ff       	call   1000062 <getESP>
 100cace:	89 c2                	mov    edx,eax
 100cad0:	83 c2 15             	add    edx,0x15
 100cad3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:504
        if (process->task->kernel)
 100cad6:	8b 16                	mov    edx,DWORD PTR [esi]
 100cad8:	83 c4 10             	add    esp,0x10
 100cadb:	80 7a 14 00          	cmp    BYTE PTR [edx+0x14],0x0
 100cadf:	74 15                	je     100caf6 <sysExec_reload_CS+0x7>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:506
        {
            __asm__("mov ax,0x48\nltr ax\n");
 100cae1:	66 b8 48 00          	mov    ax,0x48
 100cae5:	0f 00 d8             	ltr    ax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:508
            //__asm__("push ebx\npush ecx\n"::[argvp] "b" (argv), [argcv] "c" (argc));
            __asm__("ljmp 0x100:sysExec_reload_CS\n sysExec_reload_CS:\ncall 0x01000a14");
 100cae8:	ea ef ca 00 01 00 01 	jmp    0x100:0x100caef

0100caef <sysExec_reload_CS>:
 100caef:	e8 20 3f ff ff       	call   1000a14 <port_rebase+0x7d>
 100caf4:	eb 4e                	jmp    100cb44 <ReturnPoint+0xf>
 100caf6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:526
                    "mov esi,ReturnPoint\n"                             //ESI: Return EIP
                    "mov ebx,0x20\n"                                    //EBX: Return CS
                    "mov ecx,ds\n"                                      //ECX: Return DS, ES, FS, GS, SS
                    "mov edi,ss\n"                                      //EDI: Return SS
                    "mov edx,esp\n"                                     //EDX: Return ESP
                    ::[stackPtr] "b" (process->task->tss->ESP),[exec] "d" (process->elf->hdr.e_entry));
 100cafa:	8b 12                	mov    edx,DWORD PTR [edx]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:513
            __asm__("ljmp 0x100:sysExec_reload_CS\n sysExec_reload_CS:\ncall 0x01000a14");
        }
        else
        {
            //__asm__("mov eax,0x400\nltr ax\n");
            __asm__("mov eax,0x00000043\n"                              //Target SS
 100cafc:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:526
                    "mov esi,ReturnPoint\n"                             //ESI: Return EIP
                    "mov ebx,0x20\n"                                    //EBX: Return CS
                    "mov ecx,ds\n"                                      //ECX: Return DS, ES, FS, GS, SS
                    "mov edi,ss\n"                                      //EDI: Return SS
                    "mov edx,esp\n"                                     //EDX: Return ESP
                    ::[stackPtr] "b" (process->task->tss->ESP),[exec] "d" (process->elf->hdr.e_entry));
 100caff:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:513
            __asm__("ljmp 0x100:sysExec_reload_CS\n sysExec_reload_CS:\ncall 0x01000a14");
        }
        else
        {
            //__asm__("mov eax,0x400\nltr ax\n");
            __asm__("mov eax,0x00000043\n"                              //Target SS
 100cb02:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
 100cb05:	b8 43 00 00 00       	mov    eax,0x43
 100cb0a:	50                   	push   eax
 100cb0b:	53                   	push   ebx
 100cb0c:	9c                   	pushf  
 100cb0d:	81 0c 24 00 02 00 00 	or     DWORD PTR [esp],0x200
 100cb14:	b8 3b 00 00 00       	mov    eax,0x3b
 100cb19:	50                   	push   eax
 100cb1a:	52                   	push   edx
 100cb1b:	8b 35 35 cb 00 01    	mov    esi,DWORD PTR ds:0x100cb35
 100cb21:	bb 20 00 00 00       	mov    ebx,0x20
 100cb26:	8c d9                	mov    ecx,ds
 100cb28:	8c d7                	mov    edi,ss
 100cb2a:	89 e2                	mov    edx,esp
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:527
                    "mov ebx,0x20\n"                                    //EBX: Return CS
                    "mov ecx,ds\n"                                      //ECX: Return DS, ES, FS, GS, SS
                    "mov edi,ss\n"                                      //EDI: Return SS
                    "mov edx,esp\n"                                     //EDX: Return ESP
                    ::[stackPtr] "b" (process->task->tss->ESP),[exec] "d" (process->elf->hdr.e_entry));
           SWITCH_CR3
 100cb2c:	a1 5c 8c 07 01       	mov    eax,ds:0x1078c5c
 100cb31:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:528
                    __asm__("iretd\n");
 100cb34:	cf                   	iret   

0100cb35 <ReturnPoint>:
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:529
            __asm__("ReturnPoint:nop\n");
 100cb35:	90                   	nop
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:530
            __asm__("mov cr3,eax\n"::[oldCR3] "a" (INIT_GDT_TABLE_ADDRESS));
 100cb36:	ba 00 48 16 00       	mov    edx,0x164800
 100cb3b:	89 d0                	mov    eax,edx
 100cb3d:	0f 22 d8             	mov    cr3,eax
 100cb40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:532
       }
        lsysExecRetVal=(uint32_t)eax;
 100cb44:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:533
        printd(DEBUG_ELF_LOADER,"exec: Back from executing %s, return value is 0x%08X, 0x%08X, __bra=0x%08X\n", process->path, lsysExecRetVal, &process->path, __builtin_return_address(0));
 100cb46:	83 ec 08             	sub    esp,0x8
 100cb49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
 100cb4d:	8d 46 0c             	lea    eax,[esi+0xc]
 100cb50:	50                   	push   eax
 100cb51:	53                   	push   ebx
 100cb52:	ff 76 0c             	push   DWORD PTR [esi+0xc]
 100cb55:	68 90 2c 04 01       	push   0x1042c90
 100cb5a:	68 00 02 00 00       	push   0x200
 100cb5f:	e8 93 d0 ff ff       	call   1009bf7 <printd>
 100cb64:	83 c4 20             	add    esp,0x20
 100cb67:	eb 17                	jmp    100cb80 <ReturnPoint+0x4b>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:537
    }
    else
    {
        printk("sysExec: Should never get here!!!\n");
 100cb69:	83 ec 0c             	sub    esp,0xc
 100cb6c:	68 dc 2c 04 01       	push   0x1042cdc
 100cb71:	e8 69 d0 ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:538
        STOPHERE2
 100cb76:	fa                   	cli    
 100cb77:	f4                   	hlt    
 100cb78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:449
     return true;
}

int sysExec(process_t* process,int argc,char** argv)
{
    int lsysExecRetVal=0;
 100cb7b:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOSKernel/src/sysloader.c:541
    {
        printk("sysExec: Should never get here!!!\n");
        STOPHERE2
    }
    return lsysExecRetVal;
}
 100cb80:	89 d8                	mov    eax,ebx
 100cb82:	83 c4 14             	add    esp,0x14
 100cb85:	5b                   	pop    ebx
 100cb86:	5e                   	pop    esi
 100cb87:	c3                   	ret    

0100cb88 <taskInit>:
taskInit():
/home/yogi/src/os/chrisOSKernel/src/task.c:23
extern void pagingMapPageIntoKernel(uintptr_t processCR3, uintptr_t virtualAddress, uint8_t flags);
extern char* kernelDataLoadAddress, *kernelLoadAddress, *kernelLoadEnd;
extern uint32_t getESP();

void taskInit()
{
 100cb88:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:26 (discriminator 3)
    for (int cnt=0;cnt<TSS_TABLE_RECORD_COUNT/8;cnt++)
    {
        kTaskSlotAvailableInd[cnt]=0xFFFFFFFF;
 100cb8d:	8b 15 30 99 12 00    	mov    edx,DWORD PTR ds:0x129930
 100cb93:	c7 04 02 ff ff ff ff 	mov    DWORD PTR [edx+eax*1],0xffffffff
 100cb9a:	83 c0 04             	add    eax,0x4
/home/yogi/src/os/chrisOSKernel/src/task.c:24 (discriminator 3)
extern char* kernelDataLoadAddress, *kernelLoadAddress, *kernelLoadEnd;
extern uint32_t getESP();

void taskInit()
{
    for (int cnt=0;cnt<TSS_TABLE_RECORD_COUNT/8;cnt++)
 100cb9d:	3d 00 20 00 00       	cmp    eax,0x2000
 100cba2:	75 e9                	jne    100cb8d <taskInit+0x5>
/home/yogi/src/os/chrisOSKernel/src/task.c:28
    {
        kTaskSlotAvailableInd[cnt]=0xFFFFFFFF;
    }
}
 100cba4:	f3 c3                	repz ret 

0100cba6 <getTaskSlot>:
getTaskSlot():
/home/yogi/src/os/chrisOSKernel/src/task.c:32

///Find an open TSS slot and mark it in use
task_t* getTaskSlot()
{
 100cba6:	57                   	push   edi
 100cba7:	56                   	push   esi
 100cba8:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/src/task.c:34
   int cnt=1,slot=0; //The first slot will ALWAYS be blank, so start with slot 1
   uint32_t* ptr=kTaskSlotAvailableInd;
 100cba9:	8b 1d 30 99 12 00    	mov    ebx,DWORD PTR ds:0x129930
/home/yogi/src/os/chrisOSKernel/src/task.c:33
}

///Find an open TSS slot and mark it in use
task_t* getTaskSlot()
{
   int cnt=1,slot=0; //The first slot will ALWAYS be blank, so start with slot 1
 100cbaf:	be 01 00 00 00       	mov    esi,0x1
/home/yogi/src/os/chrisOSKernel/src/task.c:37
   uint32_t* ptr=kTaskSlotAvailableInd;
    while (cnt < TSS_TABLE_RECORD_COUNT/32)
    {
        printd (DEBUG_TASK,"getTask: Checking slots at 0x%08X, cnt=%u\n",ptr,cnt);
 100cbb4:	56                   	push   esi
 100cbb5:	53                   	push   ebx
 100cbb6:	68 00 2d 04 01       	push   0x1042d00
 100cbbb:	68 00 40 00 00       	push   0x4000
 100cbc0:	e8 32 d0 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:38
        slot=bitsScanF(ptr);
 100cbc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
 100cbc8:	e8 52 67 ff ff       	call   100331f <bitsScanF>
 100cbcd:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOSKernel/src/task.c:39
        if (slot>-1)
 100cbcf:	83 c4 10             	add    esp,0x10
 100cbd2:	85 c0                	test   eax,eax
 100cbd4:	78 60                	js     100cc36 <getTaskSlot+0x90>
/home/yogi/src/os/chrisOSKernel/src/task.c:41
        {
            task_t* task=&kTaskTable[slot];
 100cbd6:	8d 04 40             	lea    eax,[eax+eax*2]
 100cbd9:	8b 15 38 99 12 00    	mov    edx,DWORD PTR ds:0x129938
 100cbdf:	8d 34 c2             	lea    esi,[edx+eax*8]
/home/yogi/src/os/chrisOSKernel/src/task.c:42
            printd(DEBUG_TASK,"getTaskSlot: Marking TSS %u used\n",slot);
 100cbe2:	83 ec 04             	sub    esp,0x4
 100cbe5:	57                   	push   edi
 100cbe6:	68 2c 2d 04 01       	push   0x1042d2c
 100cbeb:	68 00 40 00 00       	push   0x4000
 100cbf0:	e8 02 d0 ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:43
            bitsReset(ptr,slot);
 100cbf5:	83 c4 08             	add    esp,0x8
 100cbf8:	57                   	push   edi
 100cbf9:	53                   	push   ebx
 100cbfa:	e8 ee 66 ff ff       	call   10032ed <bitsReset>
/home/yogi/src/os/chrisOSKernel/src/task.c:44
            task->tss=&kTSSTable[slot];
 100cbff:	6b c7 68             	imul   eax,edi,0x68
 100cc02:	03 05 34 99 12 00    	add    eax,DWORD PTR ds:0x129934
 100cc08:	89 06                	mov    DWORD PTR [esi],eax
/home/yogi/src/os/chrisOSKernel/src/task.c:45
            if (slot>0)
 100cc0a:	83 c4 10             	add    esp,0x10
 100cc0d:	85 ff                	test   edi,edi
 100cc0f:	7e 09                	jle    100cc1a <getTaskSlot+0x74>
/home/yogi/src/os/chrisOSKernel/src/task.c:47
            {
                (task-1)->next=task;
 100cc11:	89 76 f4             	mov    DWORD PTR [esi-0xc],esi
/home/yogi/src/os/chrisOSKernel/src/task.c:48
                task->prev=(task-1);
 100cc14:	8d 56 e8             	lea    edx,[esi-0x18]
 100cc17:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
/home/yogi/src/os/chrisOSKernel/src/task.c:50
            }
            printd(DEBUG_TASK,"getTaskSlot: Using task %u @ 0x%08X, set TSS to 0x%08X\n",slot, task,task->tss);
 100cc1a:	83 ec 0c             	sub    esp,0xc
 100cc1d:	50                   	push   eax
 100cc1e:	56                   	push   esi
 100cc1f:	57                   	push   edi
 100cc20:	68 50 2d 04 01       	push   0x1042d50
 100cc25:	68 00 40 00 00       	push   0x4000
 100cc2a:	e8 c8 cf ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:51
            return task;
 100cc2f:	83 c4 20             	add    esp,0x20
 100cc32:	89 f0                	mov    eax,esi
 100cc34:	eb 27                	jmp    100cc5d <getTaskSlot+0xb7>
/home/yogi/src/os/chrisOSKernel/src/task.c:53
        }
        ptr++;cnt++;
 100cc36:	83 c3 04             	add    ebx,0x4
 100cc39:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/chrisOSKernel/src/task.c:35
///Find an open TSS slot and mark it in use
task_t* getTaskSlot()
{
   int cnt=1,slot=0; //The first slot will ALWAYS be blank, so start with slot 1
   uint32_t* ptr=kTaskSlotAvailableInd;
    while (cnt < TSS_TABLE_RECORD_COUNT/32)
 100cc3c:	81 fe 00 02 00 00    	cmp    esi,0x200
 100cc42:	0f 85 6c ff ff ff    	jne    100cbb4 <getTaskSlot+0xe>
/home/yogi/src/os/chrisOSKernel/src/task.c:55
            printd(DEBUG_TASK,"getTaskSlot: Using task %u @ 0x%08X, set TSS to 0x%08X\n",slot, task,task->tss);
            return task;
        }
        ptr++;cnt++;
    }
    printk("tssUseAvailable: Cannot allocate TSS for new task");
 100cc48:	83 ec 0c             	sub    esp,0xc
 100cc4b:	68 88 2d 04 01       	push   0x1042d88
 100cc50:	e8 8a cf ff ff       	call   1009bdf <printk>
/home/yogi/src/os/chrisOSKernel/src/task.c:56
    return NULL;
 100cc55:	83 c4 10             	add    esp,0x10
 100cc58:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:57
}
 100cc5d:	5b                   	pop    ebx
 100cc5e:	5e                   	pop    esi
 100cc5f:	5f                   	pop    edi
 100cc60:	c3                   	ret    

0100cc61 <mmMapKernelIntoTask>:
mmMapKernelIntoTask():
/home/yogi/src/os/chrisOSKernel/src/task.c:60

void mmMapKernelIntoTask(task_t* task)
{
 100cc61:	55                   	push   ebp
 100cc62:	57                   	push   edi
 100cc63:	56                   	push   esi
 100cc64:	53                   	push   ebx
 100cc65:	83 ec 14             	sub    esp,0x14
 100cc68:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
/home/yogi/src/os/chrisOSKernel/src/task.c:61
    uint32_t oldDebugLevel=kDebugLevel;
 100cc6c:	8b 35 78 98 12 00    	mov    esi,DWORD PTR ds:0x129878
/home/yogi/src/os/chrisOSKernel/src/task.c:62
    kDebugLevel &= (~DEBUG_PAGING);  //Temporarily turn off paging debug if it is on or this takes forever and produces copious output
 100cc72:	89 f0                	mov    eax,esi
 100cc74:	83 e0 80             	and    eax,0xffffff80
 100cc77:	a3 78 98 12 00       	mov    ds:0x129878,eax
/home/yogi/src/os/chrisOSKernel/src/task.c:72
    uint32_t kle=kla+(kle1-kla);

    //printd(DEBUG_TASK,"kla=0x%08X, kle=0x%08X, klda=0x%08X\n",kla,kle,kdla);

    //Map map kernel into the user process (read only - 0x0 memory space)
    printd(DEBUG_TASK,"Map K to U: p=0x%08X (v=0x%08X) to p=0x%08X (v=0x%08X)\n",kla,kla,kle,kle);
 100cc7c:	68 90 8c 07 01       	push   0x1078c90
 100cc81:	68 90 8c 07 01       	push   0x1078c90
 100cc86:	68 00 00 00 01       	push   0x1000000
 100cc8b:	68 00 00 00 01       	push   0x1000000
 100cc90:	68 bc 2d 04 01       	push   0x1042dbc
 100cc95:	68 00 40 00 00       	push   0x4000
 100cc9a:	e8 58 cf ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:73
    pagingMapPageRange(task->tss->CR3,kla, kle, kla,0x5);
 100cc9f:	83 c4 14             	add    esp,0x14
 100cca2:	6a 05                	push   0x5
 100cca4:	68 00 00 00 01       	push   0x1000000
 100cca9:	68 90 8c 07 01       	push   0x1078c90
 100ccae:	68 00 00 00 01       	push   0x1000000
 100ccb3:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ccb5:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100ccb8:	e8 45 ec ff ff       	call   100b902 <pagingMapPageRange>
/home/yogi/src/os/chrisOSKernel/src/task.c:76

    //Map map kernel into the user process (read only - 0xC0000000 memory space)
    printd(DEBUG_TASK,"Map K to U: p=0x%08X (v=0x%08X) to p=0x%08X (v=0x%08X)\n",kla,kla|0xC0000000,kle,kle|0xC0000000);
 100ccbd:	bd 90 8c 07 01       	mov    ebp,0x1078c90
 100ccc2:	81 cd 00 00 00 c0    	or     ebp,0xc0000000
 100ccc8:	bf 00 00 00 01       	mov    edi,0x1000000
 100cccd:	81 cf 00 00 00 c0    	or     edi,0xc0000000
 100ccd3:	83 c4 18             	add    esp,0x18
 100ccd6:	55                   	push   ebp
 100ccd7:	68 90 8c 07 01       	push   0x1078c90
 100ccdc:	57                   	push   edi
 100ccdd:	68 00 00 00 01       	push   0x1000000
 100cce2:	68 bc 2d 04 01       	push   0x1042dbc
 100cce7:	68 00 40 00 00       	push   0x4000
 100ccec:	e8 06 cf ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:77
    pagingMapPageRange(task->tss->CR3,kla | 0xC0000000, kle | 0xC0000000, kla,0x5);
 100ccf1:	83 c4 14             	add    esp,0x14
 100ccf4:	6a 05                	push   0x5
 100ccf6:	68 00 00 00 01       	push   0x1000000
 100ccfb:	55                   	push   ebp
 100ccfc:	57                   	push   edi
 100ccfd:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ccff:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100cd02:	e8 fb eb ff ff       	call   100b902 <pagingMapPageRange>
/home/yogi/src/os/chrisOSKernel/src/task.c:80

    //Map the kernel data into the user process (read/write - 0x0 memory space)
    printd(DEBUG_TASK,"Map kernel data into user process: 0x%08X to 0x%08X\n",kdla,kdla+(0x1000*0x100));
 100cd07:	83 c4 20             	add    esp,0x20
 100cd0a:	68 00 00 22 00       	push   0x220000
 100cd0f:	68 00 00 12 00       	push   0x120000
 100cd14:	68 f4 2d 04 01       	push   0x1042df4
 100cd19:	68 00 40 00 00       	push   0x4000
 100cd1e:	e8 d4 ce ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:81
    pagingMapPageCount(task->tss->CR3,kdla,kdla,0x100,0x7);
 100cd23:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
 100cd2a:	68 00 01 00 00       	push   0x100
 100cd2f:	68 00 00 12 00       	push   0x120000
 100cd34:	68 00 00 12 00       	push   0x120000
 100cd39:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cd3b:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100cd3e:	e8 06 ec ff ff       	call   100b949 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:84
    
    //Map our kernel stack into the user process ... FIXME: this is BAD***
    uint32_t kStack=getESP();
 100cd43:	83 c4 20             	add    esp,0x20
 100cd46:	e8 17 33 ff ff       	call   1000062 <getESP>
/home/yogi/src/os/chrisOSKernel/src/task.c:85
    pagingMapPageCount(task->tss->CR3,kStack-0x1000  | 0xC0000000,kStack-0x1000,3,0x7); //read/write
 100cd4b:	2d 00 10 00 00       	sub    eax,0x1000
 100cd50:	83 ec 0c             	sub    esp,0xc
 100cd53:	6a 07                	push   0x7
 100cd55:	6a 03                	push   0x3
 100cd57:	50                   	push   eax
 100cd58:	0d 00 00 00 c0       	or     eax,0xc0000000
 100cd5d:	50                   	push   eax
 100cd5e:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cd60:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100cd63:	e8 e1 eb ff ff       	call   100b949 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:88
    
    //Map the kernel interrupt table into the process so that it can execute 0x80 to return to the kernel
    pagingMapPageCount(task->tss->CR3,IDT_TABLE_ADDRESS,IDT_TABLE_ADDRESS,10,0x7);
 100cd68:	83 c4 14             	add    esp,0x14
 100cd6b:	6a 07                	push   0x7
 100cd6d:	6a 0a                	push   0xa
 100cd6f:	68 00 30 16 00       	push   0x163000
 100cd74:	68 00 30 16 00       	push   0x163000
 100cd79:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cd7b:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100cd7e:	e8 c6 eb ff ff       	call   100b949 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:91
    
    //Map the first 0x100000 (minus 0x0) into the process, where the OS loader is, so that ISRs can run
    printd(DEBUG_TASK,"Map OS loader into user process: 0x%08X to 0x%08X r/o\n",0xC0001000,0x1000+(0x100*0x1000));
 100cd83:	83 c4 20             	add    esp,0x20
 100cd86:	68 00 10 10 00       	push   0x101000
 100cd8b:	68 00 10 00 c0       	push   0xc0001000
 100cd90:	68 2c 2e 04 01       	push   0x1042e2c
 100cd95:	68 00 40 00 00       	push   0x4000
 100cd9a:	e8 58 ce ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:92
    pagingMapPageCount(task->tss->CR3,0xC0001000,0x1000,0x100,0x5);
 100cd9f:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
 100cda6:	68 00 01 00 00       	push   0x100
 100cdab:	68 00 10 00 00       	push   0x1000
 100cdb0:	68 00 10 00 c0       	push   0xc0001000
 100cdb5:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cdb7:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100cdba:	e8 8a eb ff ff       	call   100b949 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:93
    kDebugLevel=oldDebugLevel;
 100cdbf:	89 35 78 98 12 00    	mov    DWORD PTR ds:0x129878,esi
/home/yogi/src/os/chrisOSKernel/src/task.c:94
}
 100cdc5:	83 c4 2c             	add    esp,0x2c
 100cdc8:	5b                   	pop    ebx
 100cdc9:	5e                   	pop    esi
 100cdca:	5f                   	pop    edi
 100cdcb:	5d                   	pop    ebp
 100cdcc:	c3                   	ret    

0100cdcd <createTask>:
createTask():
/home/yogi/src/os/chrisOSKernel/src/task.c:97

task_t* createTask(bool kernelTSS)
{
 100cdcd:	57                   	push   edi
 100cdce:	56                   	push   esi
 100cdcf:	53                   	push   ebx
 100cdd0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
/home/yogi/src/os/chrisOSKernel/src/task.c:98
    printd(DEBUG_TASK,"createTask: calling getTaskSlot\n");
 100cdd4:	83 ec 08             	sub    esp,0x8
 100cdd7:	68 64 2e 04 01       	push   0x1042e64
 100cddc:	68 00 40 00 00       	push   0x4000
 100cde1:	e8 11 ce ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:99
    task_t* task=getTaskSlot();     //create task in the kTaskTable, also a tss in the same slot# in kTSSTable
 100cde6:	e8 bb fd ff ff       	call   100cba6 <getTaskSlot>
/home/yogi/src/os/chrisOSKernel/src/task.c:101
    
    if (task==0)
 100cdeb:	83 c4 10             	add    esp,0x10
 100cdee:	85 c0                	test   eax,eax
 100cdf0:	0f 84 81 01 00 00    	je     100cf77 <createTask+0x1aa>
 100cdf6:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOSKernel/src/task.c:105
        return NULL;
    
    //Configure the task registers
    printd(DEBUG_TASK,"createTask: Set task CR3 to 1k page directory @ 0x%08X\n",task->tss->CR3);
 100cdf8:	83 ec 04             	sub    esp,0x4
 100cdfb:	8b 00                	mov    eax,DWORD PTR [eax]
 100cdfd:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100ce00:	68 88 2e 04 01       	push   0x1042e88
 100ce05:	68 00 40 00 00       	push   0x4000
 100ce0a:	e8 e8 cd ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:106
    task->tss->CR3=(uint32_t)pagingAllocatePagingTablePage();
 100ce0f:	8b 3b                	mov    edi,DWORD PTR [ebx]
 100ce11:	e8 da e4 ff ff       	call   100b2f0 <pagingAllocatePagingTablePage>
 100ce16:	89 47 1c             	mov    DWORD PTR [edi+0x1c],eax
/home/yogi/src/os/chrisOSKernel/src/task.c:107
    task->pageDir=(uint32_t*)task->tss->CR3;
 100ce19:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ce1b:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
 100ce1e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
/home/yogi/src/os/chrisOSKernel/src/task.c:109
    //Map our CR3 into program's memory space, needed before the iRet
    pagingMapPage(task->tss->CR3,KERNEL_PAGED_BASE_ADDRESS, KERNEL_PAGED_BASE_ADDRESS,0x7);
 100ce21:	6a 07                	push   0x7
 100ce23:	68 00 00 00 c0       	push   0xc0000000
 100ce28:	68 00 00 00 c0       	push   0xc0000000
 100ce2d:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100ce30:	e8 98 e7 ff ff       	call   100b5cd <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/task.c:111
    //Map the CR3 into our memory space
    pagingMapPage(KERNEL_PAGE_DIR_ADDRESS,task->tss->CR3 | KERNEL_PAGED_BASE_ADDRESS,task->tss->CR3,0x3);
 100ce35:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ce37:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
 100ce3a:	83 c4 20             	add    esp,0x20
 100ce3d:	6a 03                	push   0x3
 100ce3f:	50                   	push   eax
 100ce40:	0d 00 00 00 c0       	or     eax,0xc0000000
 100ce45:	50                   	push   eax
 100ce46:	68 00 a0 4b 00       	push   0x4ba000
 100ce4b:	e8 7d e7 ff ff       	call   100b5cd <pagingMapPage>
/home/yogi/src/os/chrisOSKernel/src/task.c:112
    printd(DEBUG_TASK,"createTask: Mapping kernel into task\n");
 100ce50:	83 c4 08             	add    esp,0x8
 100ce53:	68 c0 2e 04 01       	push   0x1042ec0
 100ce58:	68 00 40 00 00       	push   0x4000
 100ce5d:	e8 95 cd ff ff       	call   1009bf7 <printd>
/home/yogi/src/os/chrisOSKernel/src/task.c:113
    mmMapKernelIntoTask(task);
 100ce62:	89 1c 24             	mov    DWORD PTR [esp],ebx
 100ce65:	e8 f7 fd ff ff       	call   100cc61 <mmMapKernelIntoTask>
/home/yogi/src/os/chrisOSKernel/src/task.c:114
    task->tss->EAX=0;
 100ce6a:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ce6c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:115
    task->tss->EBX=task->tss->ECX=task->tss->EDX=task->tss->ESI=task->tss->EDI=task->tss->EBP=0;
 100ce73:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ce75:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
 100ce7c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
 100ce83:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
 100ce8a:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
 100ce91:	c7 40 2c 00 00 00 00 	mov    DWORD PTR [eax+0x2c],0x0
 100ce98:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:116
    task->tss->SS0=0x10;
 100ce9f:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cea1:	66 c7 40 0a 10 00    	mov    WORD PTR [eax+0xa],0x10
/home/yogi/src/os/chrisOSKernel/src/task.c:117
    if (kernelTSS)
 100cea7:	83 c4 10             	add    esp,0x10
 100ceaa:	89 f0                	mov    eax,esi
 100ceac:	84 c0                	test   al,al
 100ceae:	74 0a                	je     100ceba <createTask+0xed>
/home/yogi/src/os/chrisOSKernel/src/task.c:118
        task->tss->SS=0x10;
 100ceb0:	8b 03                	mov    eax,DWORD PTR [ebx]
 100ceb2:	66 c7 40 52 10 00    	mov    WORD PTR [eax+0x52],0x10
 100ceb8:	eb 08                	jmp    100cec2 <createTask+0xf5>
/home/yogi/src/os/chrisOSKernel/src/task.c:120
    else
        task->tss->SS=0x43;
 100ceba:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cebc:	66 c7 40 52 43 00    	mov    WORD PTR [eax+0x52],0x43
/home/yogi/src/os/chrisOSKernel/src/task.c:121
    task->tss->ESP0=0x1ffffff0;
 100cec2:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cec4:	c7 40 04 f0 ff ff 1f 	mov    DWORD PTR [eax+0x4],0x1ffffff0
/home/yogi/src/os/chrisOSKernel/src/task.c:123
    //Allocate space for the stack
    kDebugLevel|=DEBUG_PAGING;
 100cecb:	83 0d 78 98 12 00 40 	or     DWORD PTR ds:0x129878,0x40
/home/yogi/src/os/chrisOSKernel/src/task.c:124
    task->tss->ESP=(uint32_t)allocPages(0x16000);
 100ced2:	8b 3b                	mov    edi,DWORD PTR [ebx]
 100ced4:	83 ec 0c             	sub    esp,0xc
 100ced7:	68 00 60 01 00       	push   0x16000
 100cedc:	e8 de dc ff ff       	call   100abbf <allocPages>
 100cee1:	89 47 38             	mov    DWORD PTR [edi+0x38],eax
/home/yogi/src/os/chrisOSKernel/src/task.c:125
    pagingMapPageCount(task->tss->CR3,task->tss->ESP,task->tss->ESP,0x2,0x7);
 100cee4:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cee6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
 100cee9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
 100cef0:	6a 02                	push   0x2
 100cef2:	52                   	push   edx
 100cef3:	52                   	push   edx
 100cef4:	ff 70 1c             	push   DWORD PTR [eax+0x1c]
 100cef7:	e8 4d ea ff ff       	call   100b949 <pagingMapPageCount>
/home/yogi/src/os/chrisOSKernel/src/task.c:126
    waitForKeyboardKey();
 100cefc:	83 c4 20             	add    esp,0x20
 100ceff:	e8 87 62 ff ff       	call   100318b <waitForKeyboardKey>
/home/yogi/src/os/chrisOSKernel/src/task.c:128
    //Set the pointer so that we don't go off the pages
    task->tss->ESP+=0x15000;
 100cf04:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cf06:	81 40 38 00 50 01 00 	add    DWORD PTR [eax+0x38],0x15000
/home/yogi/src/os/chrisOSKernel/src/task.c:129
    task->tss->EFLAGS=0x200046;
 100cf0d:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cf0f:	c7 40 24 46 00 20 00 	mov    DWORD PTR [eax+0x24],0x200046
/home/yogi/src/os/chrisOSKernel/src/task.c:130
    task->tss->LINK=(uint32_t)allocPagesAndMap(0x1000); //need an old TSS entry (garbage) to "store" the old variables to on LTR
 100cf16:	8b 3b                	mov    edi,DWORD PTR [ebx]
 100cf18:	83 ec 0c             	sub    esp,0xc
 100cf1b:	68 00 10 00 00       	push   0x1000
 100cf20:	e8 ef dd ff ff       	call   100ad14 <allocPagesAndMap>
 100cf25:	66 89 47 02          	mov    WORD PTR [edi+0x2],ax
/home/yogi/src/os/chrisOSKernel/src/task.c:132
    //If it is a kernel task
    task->kernel=kernelTSS;
 100cf29:	89 f0                	mov    eax,esi
 100cf2b:	88 43 14             	mov    BYTE PTR [ebx+0x14],al
/home/yogi/src/os/chrisOSKernel/src/task.c:133
    if (kernelTSS)
 100cf2e:	83 c4 10             	add    esp,0x10
 100cf31:	84 c0                	test   al,al
 100cf33:	74 1c                	je     100cf51 <createTask+0x184>
/home/yogi/src/os/chrisOSKernel/src/task.c:134
        task->tss->DS=task->tss->ES=task->tss->FS=task->tss->GS=0x108;
 100cf35:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cf37:	66 c7 40 5e 08 01    	mov    WORD PTR [eax+0x5e],0x108
 100cf3d:	66 c7 40 5a 08 01    	mov    WORD PTR [eax+0x5a],0x108
 100cf43:	66 c7 40 4a 08 01    	mov    WORD PTR [eax+0x4a],0x108
 100cf49:	66 c7 40 56 08 01    	mov    WORD PTR [eax+0x56],0x108
 100cf4f:	eb 1a                	jmp    100cf6b <createTask+0x19e>
/home/yogi/src/os/chrisOSKernel/src/task.c:136
    else
        task->tss->DS=task->tss->ES=task->tss->FS=task->tss->GS=0x33;
 100cf51:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cf53:	66 c7 40 5e 33 00    	mov    WORD PTR [eax+0x5e],0x33
 100cf59:	66 c7 40 5a 33 00    	mov    WORD PTR [eax+0x5a],0x33
 100cf5f:	66 c7 40 4a 33 00    	mov    WORD PTR [eax+0x4a],0x33
 100cf65:	66 c7 40 56 33 00    	mov    WORD PTR [eax+0x56],0x33
/home/yogi/src/os/chrisOSKernel/src/task.c:137
    task->tss->IOPB=sizeof(tss_t);
 100cf6b:	8b 03                	mov    eax,DWORD PTR [ebx]
 100cf6d:	66 c7 40 64 68 00    	mov    WORD PTR [eax+0x64],0x68
/home/yogi/src/os/chrisOSKernel/src/task.c:138
    return task;
 100cf73:	89 d8                	mov    eax,ebx
 100cf75:	eb 05                	jmp    100cf7c <createTask+0x1af>
/home/yogi/src/os/chrisOSKernel/src/task.c:102
{
    printd(DEBUG_TASK,"createTask: calling getTaskSlot\n");
    task_t* task=getTaskSlot();     //create task in the kTaskTable, also a tss in the same slot# in kTSSTable
    
    if (task==0)
        return NULL;
 100cf77:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOSKernel/src/task.c:139
        task->tss->DS=task->tss->ES=task->tss->FS=task->tss->GS=0x108;
    else
        task->tss->DS=task->tss->ES=task->tss->FS=task->tss->GS=0x33;
    task->tss->IOPB=sizeof(tss_t);
    return task;
}
 100cf7c:	5b                   	pop    ebx
 100cf7d:	5e                   	pop    esi
 100cf7e:	5f                   	pop    edi
 100cf7f:	c3                   	ret    

0100cf80 <set_gdt>:
set_gdt():
/home/yogi/src/os/chrisOSKernel/src/x86.s:6
.intel_syntax noprefix
.globl set_gdt
.type set_gdt, @function
set_gdt:
.code32
push eax
 100cf80:	50                   	push   eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:7
    mov eax, [esp + 0x8]
 100cf81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOSKernel/src/x86.s:8
    lgdt [eax]
 100cf85:	0f 01 10             	lgdtd  [eax]
/home/yogi/src/os/chrisOSKernel/src/x86.s:9
    pop eax
 100cf88:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:10
    jmp 0x20:.reload_CS
 100cf89:	ea 90 cf 00 01 20 00 	jmp    0x20:0x100cf90

0100cf90 <.reload_CS>:
.reload_CS():
/home/yogi/src/os/chrisOSKernel/src/x86.s:13
.reload_CS:
.code16
    mov ax, 0x10
 100cf90:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOSKernel/src/x86.s:15
    mov ds, ax
    mov es, ax
 100cf95:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:16
    mov fs, ax
 100cf97:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:17
    mov gs, ax
 100cf99:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:18
    mov ss, ax
 100cf9b:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:20
.code32
    ret
 100cf9d:	c3                   	ret    

0100cf9e <idt_load>:
idt_load():
/home/yogi/src/os/chrisOSKernel/src/x86.s:27
// Loads the IDT defined in '_idtp' into the processor.
// This is declared in C as 'extern void idt_load();'
.globl idt_load
.type idt_load, @function
idt_load:
    push ebp
 100cf9e:	55                   	push   ebp
/home/yogi/src/os/chrisOSKernel/src/x86.s:28
    mov ebp, esp
 100cf9f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOSKernel/src/x86.s:29
    push eax
 100cfa1:	50                   	push   eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:30
    push ebx
 100cfa2:	53                   	push   ebx
/home/yogi/src/os/chrisOSKernel/src/x86.s:31
    cli
 100cfa3:	fa                   	cli    
/home/yogi/src/os/chrisOSKernel/src/x86.s:32
    mov eax,[ebp+12]    #size + bottom of offset
 100cfa4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOSKernel/src/x86.s:33
    mov ebx,[ebp+8]     #top of offset
 100cfa7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOSKernel/src/x86.s:34
    ror eax,16          #mov the size out of the way
 100cfaa:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOSKernel/src/x86.s:35
    mov ax,bx           #move the top of the address
 100cfad:	66 89 d8             	mov    ax,bx
/home/yogi/src/os/chrisOSKernel/src/x86.s:36
    ror eax,16
 100cfb0:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOSKernel/src/x86.s:37
    shr ebx,16
 100cfb3:	c1 eb 10             	shr    ebx,0x10
/home/yogi/src/os/chrisOSKernel/src/x86.s:38
    mov idtPtrToLoad,eax
 100cfb6:	a3 cd cf 00 01       	mov    ds:0x100cfcd,eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:39
    mov idtPtrToLoad+4,ebx
 100cfbb:	89 1d d1 cf 00 01    	mov    DWORD PTR ds:0x100cfd1,ebx
/home/yogi/src/os/chrisOSKernel/src/x86.s:42
    //we always put our IDT in idtPtrToLoad before calling idt_load
//    mov eax, word ptr idtPtrToLoad
    lidt [idtPtrToLoad]
 100cfc1:	0f 01 1d cd cf 00 01 	lidtd  ds:0x100cfcd
/home/yogi/src/os/chrisOSKernel/src/x86.s:43
    sti
 100cfc8:	fb                   	sti    
/home/yogi/src/os/chrisOSKernel/src/x86.s:44
    pop ebx
 100cfc9:	5b                   	pop    ebx
/home/yogi/src/os/chrisOSKernel/src/x86.s:45
    pop eax
 100cfca:	58                   	pop    eax
/home/yogi/src/os/chrisOSKernel/src/x86.s:46
    pop ebp
 100cfcb:	5d                   	pop    ebp
/home/yogi/src/os/chrisOSKernel/src/x86.s:47
    ret
 100cfcc:	c3                   	ret    

0100cfcd <idtPtrToLoad>:
	...
