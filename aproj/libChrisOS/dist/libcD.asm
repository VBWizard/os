
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

30000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
30000000:	55                   	push   ebp
30000001:	89 e5                	mov    ebp,esp
30000003:	e8 cf 2e 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000008:	05 10 4a 00 00       	add    eax,0x4a10
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
3000000d:	eb 17                	jmp    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
3000000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000012:	8d 50 01             	lea    edx,[eax+0x1]
30000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000001b:	84 c0                	test   al,al
3000001d:	75 07                	jne    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
3000001f:	b8 00 00 00 00       	mov    eax,0x0
30000024:	eb 10                	jmp    30000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
30000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000002f:	38 d0                	cmp    al,dl
30000031:	75 dc                	jne    3000000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
30000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
30000036:	5d                   	pop    ebp
30000037:	c3                   	ret    

30000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
30000038:	55                   	push   ebp
30000039:	89 e5                	mov    ebp,esp
3000003b:	e8 97 2e 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000040:	05 d8 49 00 00       	add    eax,0x49d8
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
30000045:	eb 17                	jmp    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
30000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000004a:	8d 50 01             	lea    edx,[eax+0x1]
3000004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000053:	84 c0                	test   al,al
30000055:	75 07                	jne    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
30000057:	b8 00 00 00 00       	mov    eax,0x0
3000005c:	eb 10                	jmp    3000006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
3000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000067:	38 d0                	cmp    al,dl
30000069:	75 dc                	jne    30000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
3000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
3000006e:	5d                   	pop    ebp
3000006f:	c3                   	ret    

30000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
30000070:	55                   	push   ebp
30000071:	89 e5                	mov    ebp,esp
30000073:	56                   	push   esi
30000074:	53                   	push   ebx
30000075:	e8 5d 2e 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
3000007a:	05 9e 49 00 00       	add    eax,0x499e
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
3000007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000085:	89 c1                	mov    ecx,eax
30000087:	eb 29                	jmp    300000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
30000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
3000008c:	eb 15                	jmp    300000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
3000008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30000091:	38 c8                	cmp    al,cl
30000093:	75 0b                	jne    300000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
30000095:	89 da                	mov    edx,ebx
30000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000009a:	29 c2                	sub    edx,eax
3000009c:	89 d0                	mov    eax,edx
3000009e:	eb 21                	jmp    300000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
300000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000a6:	84 c0                	test   al,al
300000a8:	75 e4                	jne    3000008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000aa:	83 c3 01             	add    ebx,0x1
300000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
300000b2:	89 c8                	mov    eax,ecx
300000b4:	84 c0                	test   al,al
300000b6:	75 d1                	jne    30000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
300000b8:	89 da                	mov    edx,ebx
300000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000bd:	29 c2                	sub    edx,eax
300000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
300000c1:	5b                   	pop    ebx
300000c2:	5e                   	pop    esi
300000c3:	5d                   	pop    ebp
300000c4:	c3                   	ret    

300000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
300000c5:	55                   	push   ebp
300000c6:	89 e5                	mov    ebp,esp
300000c8:	56                   	push   esi
300000c9:	53                   	push   ebx
300000ca:	e8 08 2e 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300000cf:	05 49 49 00 00       	add    eax,0x4949
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
300000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000da:	89 c1                	mov    ecx,eax
300000dc:	eb 29                	jmp    30000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
300000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
300000e1:	eb 15                	jmp    300000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
300000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000e6:	38 c8                	cmp    al,cl
300000e8:	75 0b                	jne    300000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
300000ea:	89 da                	mov    edx,ebx
300000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000ef:	29 c2                	sub    edx,eax
300000f1:	89 d0                	mov    eax,edx
300000f3:	eb 21                	jmp    30000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
300000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000fb:	84 c0                	test   al,al
300000fd:	75 e4                	jne    300000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000ff:	83 c3 01             	add    ebx,0x1
30000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
30000107:	89 c8                	mov    eax,ecx
30000109:	84 c0                	test   al,al
3000010b:	75 d1                	jne    300000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
3000010d:	89 da                	mov    edx,ebx
3000010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000112:	29 c2                	sub    edx,eax
30000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
30000116:	5b                   	pop    ebx
30000117:	5e                   	pop    esi
30000118:	5d                   	pop    ebp
30000119:	c3                   	ret    
3000011a:	66 90                	xchg   ax,ax

3000011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
3000011c:	55                   	push   ebp
3000011d:	89 e5                	mov    ebp,esp
3000011f:	56                   	push   esi
30000120:	53                   	push   ebx
30000121:	e8 da 2d 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
30000126:	81 c3 f2 48 00 00    	add    ebx,0x48f2
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
3000012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000130:	75 09                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
30000132:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
30000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
3000013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000013e:	8d 50 01             	lea    edx,[eax+0x1]
30000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000147:	0f be f0             	movsx  esi,al
3000014a:	85 f6                	test   esi,esi
3000014c:	75 07                	jne    30000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
3000014e:	b8 00 00 00 00       	mov    eax,0x0
30000153:	eb 57                	jmp    300001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
30000155:	83 ec 08             	sub    esp,0x8
30000158:	56                   	push   esi
30000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000015c:	e8 d7 fe ff ff       	call   30000038 <strchrI>
30000161:	83 c4 10             	add    esp,0x10
30000164:	85 c0                	test   eax,eax
30000166:	75 d3                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
30000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
3000016c:	83 ec 08             	sub    esp,0x8
3000016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000175:	e8 4b ff ff ff       	call   300000c5 <strcspnI>
3000017a:	83 c4 10             	add    esp,0x10
3000017d:	89 c2                	mov    edx,eax
3000017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000182:	01 d0                	add    eax,edx
30000184:	89 83 34 00 00 00    	mov    DWORD PTR [ebx+0x34],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
3000018a:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
30000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000193:	84 c0                	test   al,al
30000195:	74 12                	je     300001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
30000197:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
3000019d:	8d 50 01             	lea    edx,[eax+0x1]
300001a0:	89 93 34 00 00 00    	mov    DWORD PTR [ebx+0x34],edx
300001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
300001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
300001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
300001af:	5b                   	pop    ebx
300001b0:	5e                   	pop    esi
300001b1:	5d                   	pop    ebp
300001b2:	c3                   	ret    
300001b3:	90                   	nop

300001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
300001b4:	55                   	push   ebp
300001b5:	89 e5                	mov    ebp,esp
300001b7:	53                   	push   ebx
300001b8:	83 ec 14             	sub    esp,0x14
300001bb:	e8 17 2d 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300001c0:	05 58 48 00 00       	add    eax,0x4858
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
300001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
300001cc:	83 ec 0c             	sub    esp,0xc
300001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300001d2:	89 c3                	mov    ebx,eax
300001d4:	e8 2c 1a 00 00       	call   30001c05 <strlenI>
300001d9:	83 c4 10             	add    esp,0x10
300001dc:	83 e8 01             	sub    eax,0x1
300001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300001e2:	eb 39                	jmp    3000021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
300001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001ea:	01 d0                	add    eax,edx
300001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
300001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001f8:	01 c2                	add    edx,eax
300001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
300001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000200:	01 c8                	add    eax,ecx
30000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
30000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000020d:	01 c2                	add    edx,eax
3000020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
30000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
30000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
30000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
3000021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30000223:	7c bf                	jl     300001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
30000225:	90                   	nop
30000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000229:	c9                   	leave  
3000022a:	c3                   	ret    

3000022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
3000022b:	55                   	push   ebp
3000022c:	89 e5                	mov    ebp,esp
3000022e:	53                   	push   ebx
3000022f:	83 ec 14             	sub    esp,0x14
30000232:	e8 a0 2c 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000237:	05 e1 47 00 00       	add    eax,0x47e1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
3000023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000246:	79 03                	jns    3000024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
30000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
3000024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
30000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000255:	8d 50 01             	lea    edx,[eax+0x1]
30000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000025b:	89 c2                	mov    edx,eax
3000025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
30000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000266:	ba 67 66 66 66       	mov    edx,0x66666667
3000026b:	89 c8                	mov    eax,ecx
3000026d:	f7 ea                	imul   edx
3000026f:	c1 fa 02             	sar    edx,0x2
30000272:	89 c8                	mov    eax,ecx
30000274:	c1 f8 1f             	sar    eax,0x1f
30000277:	29 c2                	sub    edx,eax
30000279:	89 d0                	mov    eax,edx
3000027b:	c1 e0 02             	shl    eax,0x2
3000027e:	01 d0                	add    eax,edx
30000280:	01 c0                	add    eax,eax
30000282:	29 c1                	sub    ecx,eax
30000284:	89 ca                	mov    edx,ecx
30000286:	89 d0                	mov    eax,edx
30000288:	83 c0 30             	add    eax,0x30
3000028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
3000028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000290:	ba 67 66 66 66       	mov    edx,0x66666667
30000295:	89 c8                	mov    eax,ecx
30000297:	f7 ea                	imul   edx
30000299:	c1 fa 02             	sar    edx,0x2
3000029c:	89 c8                	mov    eax,ecx
3000029e:	c1 f8 1f             	sar    eax,0x1f
300002a1:	29 c2                	sub    edx,eax
300002a3:	89 d0                	mov    eax,edx
300002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
300002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
300002ac:	7f a4                	jg     30000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
300002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300002b2:	79 13                	jns    300002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
300002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300002b7:	8d 50 01             	lea    edx,[eax+0x1]
300002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300002bd:	89 c2                	mov    edx,eax
300002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002c2:	01 d0                	add    eax,edx
300002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
300002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002cd:	01 d0                	add    eax,edx
300002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
300002d2:	83 ec 0c             	sub    esp,0xc
300002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300002d8:	e8 d7 fe ff ff       	call   300001b4 <reverseI>
300002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
300002e0:	90                   	nop
300002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300002e4:	c9                   	leave  
300002e5:	c3                   	ret    

300002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
300002e6:	55                   	push   ebp
300002e7:	89 e5                	mov    ebp,esp
300002e9:	53                   	push   ebx
300002ea:	83 ec 14             	sub    esp,0x14
300002ed:	e8 e5 2b 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300002f2:	05 26 47 00 00       	add    eax,0x4726
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
300002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000301:	79 03                	jns    30000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
30000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
30000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
3000030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000310:	8d 50 01             	lea    edx,[eax+0x1]
30000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000316:	89 c2                	mov    edx,eax
30000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
3000031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000321:	ba 67 66 66 66       	mov    edx,0x66666667
30000326:	89 c8                	mov    eax,ecx
30000328:	f7 ea                	imul   edx
3000032a:	c1 fa 02             	sar    edx,0x2
3000032d:	89 c8                	mov    eax,ecx
3000032f:	c1 f8 1f             	sar    eax,0x1f
30000332:	29 c2                	sub    edx,eax
30000334:	89 d0                	mov    eax,edx
30000336:	c1 e0 02             	shl    eax,0x2
30000339:	01 d0                	add    eax,edx
3000033b:	01 c0                	add    eax,eax
3000033d:	29 c1                	sub    ecx,eax
3000033f:	89 ca                	mov    edx,ecx
30000341:	89 d0                	mov    eax,edx
30000343:	83 c0 30             	add    eax,0x30
30000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
30000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
3000034b:	ba 67 66 66 66       	mov    edx,0x66666667
30000350:	89 c8                	mov    eax,ecx
30000352:	f7 ea                	imul   edx
30000354:	c1 fa 02             	sar    edx,0x2
30000357:	89 c8                	mov    eax,ecx
30000359:	c1 f8 1f             	sar    eax,0x1f
3000035c:	29 c2                	sub    edx,eax
3000035e:	89 d0                	mov    eax,edx
30000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000367:	7f a4                	jg     3000030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
30000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000036d:	79 13                	jns    30000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
3000036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000372:	8d 50 01             	lea    edx,[eax+0x1]
30000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000378:	89 c2                	mov    edx,eax
3000037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000037d:	01 d0                	add    eax,edx
3000037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
30000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000388:	01 d0                	add    eax,edx
3000038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
3000038d:	83 ec 0c             	sub    esp,0xc
30000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000393:	e8 1c fe ff ff       	call   300001b4 <reverseI>
30000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
3000039b:	90                   	nop
3000039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000039f:	c9                   	leave  
300003a0:	c3                   	ret    

300003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
300003a1:	55                   	push   ebp
300003a2:	89 e5                	mov    ebp,esp
300003a4:	83 ec 10             	sub    esp,0x10
300003a7:	e8 2b 2b 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300003ac:	05 6c 46 00 00       	add    eax,0x466c
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
300003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
300003bf:	eb 28                	jmp    300003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
300003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300003c4:	89 d0                	mov    eax,edx
300003c6:	c1 e0 02             	shl    eax,0x2
300003c9:	01 d0                	add    eax,edx
300003cb:	01 c0                	add    eax,eax
300003cd:	89 c1                	mov    ecx,eax
300003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003d5:	01 d0                	add    eax,edx
300003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003da:	0f be c0             	movsx  eax,al
300003dd:	01 c8                	add    eax,ecx
300003df:	83 e8 30             	sub    eax,0x30
300003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
300003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003ef:	01 d0                	add    eax,edx
300003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003f4:	84 c0                	test   al,al
300003f6:	75 c9                	jne    300003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
300003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
300003fb:	c9                   	leave  
300003fc:	c3                   	ret    
300003fd:	66 90                	xchg   ax,ax
300003ff:	90                   	nop

30000400 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
30000400:	55                   	push   ebp
30000401:	89 e5                	mov    ebp,esp
30000403:	53                   	push   ebx
30000404:	83 ec 14             	sub    esp,0x14
30000407:	e8 f4 2a 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
3000040c:	81 c3 0c 46 00 00    	add    ebx,0x460c
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
30000412:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
30000419:	eb 7b                	jmp    30000496 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
3000041b:	83 ec 0c             	sub    esp,0xc
3000041e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000421:	e8 df 17 00 00       	call   30001c05 <strlenI>
30000426:	83 c4 10             	add    esp,0x10
30000429:	89 c1                	mov    ecx,eax
3000042b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000431:	8b 00                	mov    eax,DWORD PTR [eax]
30000433:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000436:	c1 e2 02             	shl    edx,0x2
30000439:	01 d0                	add    eax,edx
3000043b:	8b 00                	mov    eax,DWORD PTR [eax]
3000043d:	83 ec 04             	sub    esp,0x4
30000440:	51                   	push   ecx
30000441:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000444:	50                   	push   eax
30000445:	e8 55 18 00 00       	call   30001c9f <strncmpI>
3000044a:	83 c4 10             	add    esp,0x10
3000044d:	85 c0                	test   eax,eax
3000044f:	75 41                	jne    30000492 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
30000451:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000457:	8b 00                	mov    eax,DWORD PTR [eax]
30000459:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000045c:	c1 e2 02             	shl    edx,0x2
3000045f:	01 d0                	add    eax,edx
30000461:	8b 00                	mov    eax,DWORD PTR [eax]
30000463:	83 ec 08             	sub    esp,0x8
30000466:	8d 93 08 fb ff ff    	lea    edx,[ebx-0x4f8]
3000046c:	52                   	push   edx
3000046d:	50                   	push   eax
3000046e:	e8 09 1d 00 00       	call   3000217c <strstrI>
30000473:	83 c4 10             	add    esp,0x10
30000476:	83 c0 01             	add    eax,0x1
30000479:	83 ec 04             	sub    esp,0x4
3000047c:	6a 32                	push   0x32
3000047e:	50                   	push   eax
3000047f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000482:	e8 81 18 00 00       	call   30001d08 <strncpyI>
30000487:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
3000048a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000048d:	83 c0 01             	add    eax,0x1
30000490:	eb 13                	jmp    300004a5 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
30000492:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
30000496:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
3000049a:	0f 8e 7b ff ff ff    	jle    3000041b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
300004a0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
300004a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300004a8:	c9                   	leave  
300004a9:	c3                   	ret    

300004aa <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
300004aa:	55                   	push   ebp
300004ab:	89 e5                	mov    ebp,esp
300004ad:	53                   	push   ebx
300004ae:	83 ec 14             	sub    esp,0x14
300004b1:	e8 4a 2a 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
300004b6:	81 c3 62 45 00 00    	add    ebx,0x4562
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
300004bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
300004c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
300004ca:	e9 d5 00 00 00       	jmp    300005a4 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
300004cf:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004d5:	8b 00                	mov    eax,DWORD PTR [eax]
300004d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004da:	c1 e2 02             	shl    edx,0x2
300004dd:	01 d0                	add    eax,edx
300004df:	8b 00                	mov    eax,DWORD PTR [eax]
300004e1:	85 c0                	test   eax,eax
300004e3:	0f 84 b7 00 00 00    	je     300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
300004e9:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004ef:	8b 00                	mov    eax,DWORD PTR [eax]
300004f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004f4:	c1 e2 02             	shl    edx,0x2
300004f7:	01 d0                	add    eax,edx
300004f9:	8b 00                	mov    eax,DWORD PTR [eax]
300004fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
300004fe:	83 ec 0c             	sub    esp,0xc
30000501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000504:	e8 fc 16 00 00       	call   30001c05 <strlenI>
30000509:	83 c4 10             	add    esp,0x10
3000050c:	89 c1                	mov    ecx,eax
3000050e:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000514:	8b 00                	mov    eax,DWORD PTR [eax]
30000516:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000519:	c1 e2 02             	shl    edx,0x2
3000051c:	01 d0                	add    eax,edx
3000051e:	8b 00                	mov    eax,DWORD PTR [eax]
30000520:	83 ec 04             	sub    esp,0x4
30000523:	51                   	push   ecx
30000524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000527:	50                   	push   eax
30000528:	e8 72 17 00 00       	call   30001c9f <strncmpI>
3000052d:	83 c4 10             	add    esp,0x10
30000530:	85 c0                	test   eax,eax
30000532:	75 6c                	jne    300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
30000534:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000053a:	8b 00                	mov    eax,DWORD PTR [eax]
3000053c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000053f:	c1 e2 02             	shl    edx,0x2
30000542:	01 d0                	add    eax,edx
30000544:	8b 00                	mov    eax,DWORD PTR [eax]
30000546:	83 ec 08             	sub    esp,0x8
30000549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000054c:	50                   	push   eax
3000054d:	e8 6e 15 00 00       	call   30001ac0 <strcpyI>
30000552:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
30000555:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000055b:	8b 00                	mov    eax,DWORD PTR [eax]
3000055d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000560:	c1 e2 02             	shl    edx,0x2
30000563:	01 d0                	add    eax,edx
30000565:	8b 00                	mov    eax,DWORD PTR [eax]
30000567:	83 ec 08             	sub    esp,0x8
3000056a:	8d 93 08 fb ff ff    	lea    edx,[ebx-0x4f8]
30000570:	52                   	push   edx
30000571:	50                   	push   eax
30000572:	e8 fb 13 00 00       	call   30001972 <strcatI>
30000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
3000057a:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000580:	8b 00                	mov    eax,DWORD PTR [eax]
30000582:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000585:	c1 e2 02             	shl    edx,0x2
30000588:	01 d0                	add    eax,edx
3000058a:	8b 00                	mov    eax,DWORD PTR [eax]
3000058c:	83 ec 08             	sub    esp,0x8
3000058f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000592:	50                   	push   eax
30000593:	e8 da 13 00 00       	call   30001972 <strcatI>
30000598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
3000059b:	e9 c6 00 00 00       	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
300005a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
300005a4:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
300005a8:	0f 8e 21 ff ff ff    	jle    300004cf <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
300005ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
300005b5:	e9 a2 00 00 00       	jmp    3000065c <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
300005ba:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005c0:	8b 00                	mov    eax,DWORD PTR [eax]
300005c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005c5:	c1 e2 02             	shl    edx,0x2
300005c8:	01 d0                	add    eax,edx
300005ca:	8b 00                	mov    eax,DWORD PTR [eax]
300005cc:	85 c0                	test   eax,eax
300005ce:	0f 85 84 00 00 00    	jne    30000658 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
300005d4:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005da:	8b 00                	mov    eax,DWORD PTR [eax]
300005dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005df:	c1 e2 02             	shl    edx,0x2
300005e2:	01 d0                	add    eax,edx
300005e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300005e7:	81 c2 00 02 00 00    	add    edx,0x200
300005ed:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
300005ef:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005f5:	8b 00                	mov    eax,DWORD PTR [eax]
300005f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005fa:	c1 e2 02             	shl    edx,0x2
300005fd:	01 d0                	add    eax,edx
300005ff:	8b 00                	mov    eax,DWORD PTR [eax]
30000601:	83 ec 08             	sub    esp,0x8
30000604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000607:	50                   	push   eax
30000608:	e8 b3 14 00 00       	call   30001ac0 <strcpyI>
3000060d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
30000610:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000616:	8b 00                	mov    eax,DWORD PTR [eax]
30000618:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000061b:	c1 e2 02             	shl    edx,0x2
3000061e:	01 d0                	add    eax,edx
30000620:	8b 00                	mov    eax,DWORD PTR [eax]
30000622:	83 ec 08             	sub    esp,0x8
30000625:	8d 93 08 fb ff ff    	lea    edx,[ebx-0x4f8]
3000062b:	52                   	push   edx
3000062c:	50                   	push   eax
3000062d:	e8 40 13 00 00       	call   30001972 <strcatI>
30000632:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
30000635:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000063b:	8b 00                	mov    eax,DWORD PTR [eax]
3000063d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000640:	c1 e2 02             	shl    edx,0x2
30000643:	01 d0                	add    eax,edx
30000645:	8b 00                	mov    eax,DWORD PTR [eax]
30000647:	83 ec 08             	sub    esp,0x8
3000064a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000064d:	50                   	push   eax
3000064e:	e8 1f 13 00 00       	call   30001972 <strcatI>
30000653:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
30000656:	eb 0e                	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
30000658:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
3000065c:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
30000660:	0f 8e 54 ff ff ff    	jle    300005ba <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
30000666:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000669:	c9                   	leave  
3000066a:	c3                   	ret    
3000066b:	90                   	nop

3000066c <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:10
 */

#include "libChrisOS.h"

VISIBLE void* open(char* path, const char* mode)
{
3000066c:	55                   	push   ebp
3000066d:	89 e5                	mov    ebp,esp
3000066f:	53                   	push   ebx
30000670:	83 ec 04             	sub    esp,0x4
30000673:	e8 5f 28 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000678:	05 a0 43 00 00       	add    eax,0x43a0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
3000067d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000680:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000683:	83 ec 04             	sub    esp,0x4
30000686:	51                   	push   ecx
30000687:	52                   	push   edx
30000688:	6a 02                	push   0x2
3000068a:	89 c3                	mov    ebx,eax
3000068c:	e8 99 02 00 00       	call   3000092a <do_syscall2>
30000691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
}
30000694:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000697:	c9                   	leave  
30000698:	c3                   	ret    

30000699 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15

VISIBLE void close(void* handle)
{
30000699:	55                   	push   ebp
3000069a:	89 e5                	mov    ebp,esp
3000069c:	53                   	push   ebx
3000069d:	83 ec 04             	sub    esp,0x4
300006a0:	e8 32 28 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300006a5:	05 73 43 00 00       	add    eax,0x4373
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
300006aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006ad:	83 ec 08             	sub    esp,0x8
300006b0:	52                   	push   edx
300006b1:	6a 03                	push   0x3
300006b3:	89 c3                	mov    ebx,eax
300006b5:	e8 ae 02 00 00       	call   30000968 <do_syscall1>
300006ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
300006bd:	90                   	nop
300006be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300006c1:	c9                   	leave  
300006c2:	c3                   	ret    

300006c3 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
300006c3:	55                   	push   ebp
300006c4:	89 e5                	mov    ebp,esp
300006c6:	56                   	push   esi
300006c7:	53                   	push   ebx
300006c8:	e8 0a 28 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300006cd:	05 4b 43 00 00       	add    eax,0x434b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
300006d2:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
300006d5:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
300006d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
300006db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006de:	83 ec 0c             	sub    esp,0xc
300006e1:	56                   	push   esi
300006e2:	53                   	push   ebx
300006e3:	51                   	push   ecx
300006e4:	52                   	push   edx
300006e5:	6a 04                	push   0x4
300006e7:	89 c3                	mov    ebx,eax
300006e9:	e8 c6 01 00 00       	call   300008b4 <do_syscall4>
300006ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
}
300006f1:	8d 65 f8             	lea    esp,[ebp-0x8]
300006f4:	5b                   	pop    ebx
300006f5:	5e                   	pop    esi
300006f6:	5d                   	pop    ebp
300006f7:	c3                   	ret    

300006f8 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
300006f8:	55                   	push   ebp
300006f9:	89 e5                	mov    ebp,esp
300006fb:	56                   	push   esi
300006fc:	53                   	push   ebx
300006fd:	e8 d5 27 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000702:	05 16 43 00 00       	add    eax,0x4316
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
30000707:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
3000070a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
3000070d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000710:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000713:	83 ec 0c             	sub    esp,0xc
30000716:	56                   	push   esi
30000717:	53                   	push   ebx
30000718:	51                   	push   ecx
30000719:	52                   	push   edx
3000071a:	6a 05                	push   0x5
3000071c:	89 c3                	mov    ebx,eax
3000071e:	e8 91 01 00 00       	call   300008b4 <do_syscall4>
30000723:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
}
30000726:	8d 65 f8             	lea    esp,[ebp-0x8]
30000729:	5b                   	pop    ebx
3000072a:	5e                   	pop    esi
3000072b:	5d                   	pop    ebp
3000072c:	c3                   	ret    

3000072d <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31


VISIBLE int getdir(char* path, char *buffer, int bufferCount)
{
3000072d:	55                   	push   ebp
3000072e:	89 e5                	mov    ebp,esp
30000730:	53                   	push   ebx
30000731:	83 ec 04             	sub    esp,0x4
30000734:	e8 9e 27 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000739:	05 df 42 00 00       	add    eax,0x42df
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, bufferCount);
3000073e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
30000741:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000744:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000747:	53                   	push   ebx
30000748:	51                   	push   ecx
30000749:	52                   	push   edx
3000074a:	68 04 03 00 00       	push   0x304
3000074f:	89 c3                	mov    ebx,eax
30000751:	e8 98 01 00 00       	call   300008ee <do_syscall3>
30000756:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33
}
30000759:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000075c:	c9                   	leave  
3000075d:	c3                   	ret    
3000075e:	66 90                	xchg   ax,ax

30000760 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
30000760:	55                   	push   ebp
30000761:	89 e5                	mov    ebp,esp
30000763:	53                   	push   ebx
30000764:	e8 6e 27 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000769:	05 af 42 00 00       	add    eax,0x42af
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
3000076e:	b8 05 00 00 00       	mov    eax,0x5
30000773:	bb 01 00 00 00       	mov    ebx,0x1
30000778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000077b:	89 d1                	mov    ecx,edx
3000077d:	e8 fc ff ff ff       	call   3000077e <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
30000782:	90                   	nop
30000783:	5b                   	pop    ebx
30000784:	5d                   	pop    ebp
30000785:	c3                   	ret    

30000786 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
30000786:	55                   	push   ebp
30000787:	89 e5                	mov    ebp,esp
30000789:	53                   	push   ebx
3000078a:	83 ec 14             	sub    esp,0x14
3000078d:	e8 45 27 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000792:	05 86 42 00 00       	add    eax,0x4286
30000797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000079a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
3000079d:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
300007a3:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
300007a7:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
300007aa:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
300007ae:	b8 05 00 00 00       	mov    eax,0x5
300007b3:	bb 01 00 00 00       	mov    ebx,0x1
300007b8:	8d 55 fa             	lea    edx,[ebp-0x6]
300007bb:	89 d1                	mov    ecx,edx
300007bd:	e8 fc ff ff ff       	call   300007be <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
300007c2:	90                   	nop
300007c3:	83 c4 14             	add    esp,0x14
300007c6:	5b                   	pop    ebx
300007c7:	5d                   	pop    ebp
300007c8:	c3                   	ret    

300007c9 <getc>:
getc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:30

VISIBLE char getc()
{
300007c9:	55                   	push   ebp
300007ca:	89 e5                	mov    ebp,esp
300007cc:	53                   	push   ebx
300007cd:	83 ec 10             	sub    esp,0x10
300007d0:	e8 02 27 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300007d5:	05 43 42 00 00       	add    eax,0x4243
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32
    char c;
    READCHAR(c)
300007da:	b8 04 00 00 00       	mov    eax,0x4
300007df:	ba 00 00 00 00       	mov    edx,0x0
300007e4:	89 d3                	mov    ebx,edx
300007e6:	e8 fc ff ff ff       	call   300007e7 <getc+0x1e>
300007eb:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:33
    return c;
300007ee:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:34
}
300007f2:	83 c4 10             	add    esp,0x10
300007f5:	5b                   	pop    ebx
300007f6:	5d                   	pop    ebp
300007f7:	c3                   	ret    

300007f8 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
300007f8:	55                   	push   ebp
300007f9:	89 e5                	mov    ebp,esp
300007fb:	53                   	push   ebx
300007fc:	83 ec 14             	sub    esp,0x14
300007ff:	e8 d3 26 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000804:	05 14 42 00 00       	add    eax,0x4214
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    char inchar;
    int len=0;
30000809:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:41
    char lbuf[2]={0,0};
30000810:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
30000814:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:43
    
    if (stream!=1)
30000818:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
3000081c:	74 19                	je     30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:45
    {
        printI("Stream %u not implemented\n",stream);
3000081e:	83 ec 08             	sub    esp,0x8
30000821:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30000824:	8d 90 0a fb ff ff    	lea    edx,[eax-0x4f6]
3000082a:	52                   	push   edx
3000082b:	89 c3                	mov    ebx,eax
3000082d:	e8 e4 02 00 00       	call   30000b16 <printI>
30000832:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46 (discriminator 1)
        getsError: goto getsError;
30000835:	eb fe                	jmp    30000835 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    }
    
    while (1==1)
    {
        READCHAR(inchar)
30000837:	b8 04 00 00 00       	mov    eax,0x4
3000083c:	ba 00 00 00 00       	mov    edx,0x0
30000841:	89 d3                	mov    ebx,edx
30000843:	e8 fc ff ff ff       	call   30000844 <gets+0x4c>
30000848:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
        if (inchar=='\b' && len>0)
3000084b:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
3000084f:	75 17                	jne    30000868 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52 (discriminator 1)
30000851:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000855:	7e 11                	jle    30000868 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
        {
            buffer[len]=0;
30000857:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000085a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000085d:	01 d0                	add    eax,edx
3000085f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55
            len--;
30000862:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
30000866:	eb 43                	jmp    300008ab <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:57
        }
        else if (inchar!=0)
30000868:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
3000086c:	74 33                	je     300008a1 <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
        {
            lbuf[0]=inchar;
3000086e:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000872:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
30000875:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000878:	8d 50 01             	lea    edx,[eax+0x1]
3000087b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000087e:	89 c2                	mov    edx,eax
30000880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000883:	01 c2                	add    edx,eax
30000885:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000889:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
3000088b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000088e:	83 c0 01             	add    eax,0x1
30000891:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
30000894:	7d 06                	jge    3000089c <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63 (discriminator 1)
30000896:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
3000089a:	75 9b                	jne    30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
            
                return len;
3000089c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000089f:	eb 0c                	jmp    300008ad <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
300008a1:	b8 02 03 00 00       	mov    eax,0x302
300008a6:	e8 fc ff ff ff       	call   300008a7 <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70 (discriminator 2)

    }
300008ab:	eb 8a                	jmp    30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
}
300008ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300008b0:	c9                   	leave  
300008b1:	c3                   	ret    
300008b2:	66 90                	xchg   ax,ax

300008b4 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:16
extern void sysEnter_Vector();
bool libcInitialized = false;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
300008b4:	55                   	push   ebp
300008b5:	89 e5                	mov    ebp,esp
300008b7:	56                   	push   esi
300008b8:	53                   	push   ebx
300008b9:	83 ec 10             	sub    esp,0x10
300008bc:	e8 16 26 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300008c1:	05 57 41 00 00       	add    eax,0x4157
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:17
    int retVal=0;
300008c6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
300008cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300008d0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
300008d3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300008d6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300008d9:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
300008dc:	e8 fc ff ff ff       	call   300008dd <do_syscall4+0x29>
300008e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    return retVal;
300008e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
}
300008e7:	83 c4 10             	add    esp,0x10
300008ea:	5b                   	pop    ebx
300008eb:	5e                   	pop    esi
300008ec:	5d                   	pop    ebp
300008ed:	c3                   	ret    

300008ee <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:23

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
300008ee:	55                   	push   ebp
300008ef:	89 e5                	mov    ebp,esp
300008f1:	56                   	push   esi
300008f2:	53                   	push   ebx
300008f3:	83 ec 10             	sub    esp,0x10
300008f6:	e8 dc 25 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300008fb:	05 1d 41 00 00       	add    eax,0x411d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:24
    int retVal=0;
30000900:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25
    SYSCALL3(callnum, param1, param2, param3, retVal);
30000907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000090a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
3000090d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000910:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
30000913:	be 00 00 00 00       	mov    esi,0x0
30000918:	e8 fc ff ff ff       	call   30000919 <do_syscall3+0x2b>
3000091d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    return retVal;
30000920:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
}
30000923:	83 c4 10             	add    esp,0x10
30000926:	5b                   	pop    ebx
30000927:	5e                   	pop    esi
30000928:	5d                   	pop    ebp
30000929:	c3                   	ret    

3000092a <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:30

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
3000092a:	55                   	push   ebp
3000092b:	89 e5                	mov    ebp,esp
3000092d:	56                   	push   esi
3000092e:	53                   	push   ebx
3000092f:	83 ec 10             	sub    esp,0x10
30000932:	e8 a0 25 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000937:	05 e1 40 00 00       	add    eax,0x40e1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:31
    int retVal=0;
3000093c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32
    SYSCALL2(callnum, param1, param2, retVal);
30000943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000946:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000949:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
3000094c:	ba 00 00 00 00       	mov    edx,0x0
30000951:	be 00 00 00 00       	mov    esi,0x0
30000956:	e8 fc ff ff ff       	call   30000957 <do_syscall2+0x2d>
3000095b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    return retVal;
3000095e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
}
30000961:	83 c4 10             	add    esp,0x10
30000964:	5b                   	pop    ebx
30000965:	5e                   	pop    esi
30000966:	5d                   	pop    ebp
30000967:	c3                   	ret    

30000968 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:37

int do_syscall1(int callnum, uint32_t param1)
{
30000968:	55                   	push   ebp
30000969:	89 e5                	mov    ebp,esp
3000096b:	56                   	push   esi
3000096c:	53                   	push   ebx
3000096d:	83 ec 10             	sub    esp,0x10
30000970:	e8 62 25 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000975:	05 a3 40 00 00       	add    eax,0x40a3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:38
    int retVal=0;
3000097a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39
    SYSCALL1(callnum, param1, retVal);
30000981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000984:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000987:	b9 00 00 00 00       	mov    ecx,0x0
3000098c:	ba 00 00 00 00       	mov    edx,0x0
30000991:	be 00 00 00 00       	mov    esi,0x0
30000996:	e8 fc ff ff ff       	call   30000997 <do_syscall1+0x2f>
3000099b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    return retVal;
3000099e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
}
300009a1:	83 c4 10             	add    esp,0x10
300009a4:	5b                   	pop    ebx
300009a5:	5e                   	pop    esi
300009a6:	5d                   	pop    ebp
300009a7:	c3                   	ret    

300009a8 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:44

int do_syscall0(int callnum)
{
300009a8:	55                   	push   ebp
300009a9:	89 e5                	mov    ebp,esp
300009ab:	56                   	push   esi
300009ac:	53                   	push   ebx
300009ad:	83 ec 10             	sub    esp,0x10
300009b0:	e8 22 25 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300009b5:	05 63 40 00 00       	add    eax,0x4063
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:45
    int retVal=0;
300009ba:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46
    SYSCALL0(callnum, retVal);
300009c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300009c4:	bb 00 00 00 00       	mov    ebx,0x0
300009c9:	b9 00 00 00 00       	mov    ecx,0x0
300009ce:	ba 00 00 00 00       	mov    edx,0x0
300009d3:	be 00 00 00 00       	mov    esi,0x0
300009d8:	e8 fc ff ff ff       	call   300009d9 <do_syscall0+0x31>
300009dd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    return retVal;
300009e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
}
300009e3:	83 c4 10             	add    esp,0x10
300009e6:	5b                   	pop    ebx
300009e7:	5e                   	pop    esi
300009e8:	5d                   	pop    ebp
300009e9:	c3                   	ret    

300009ea <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:51

VISIBLE void __attribute__((constructor)) libc_init()
{
300009ea:	55                   	push   ebp
300009eb:	89 e5                	mov    ebp,esp
300009ed:	53                   	push   ebx
300009ee:	83 ec 04             	sub    esp,0x4
300009f1:	e8 0a 25 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
300009f6:	81 c3 22 40 00 00    	add    ebx,0x4022
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:52
    printdI(DEBUG_LIBC,"***libc_init called\n***");
300009fc:	83 ec 08             	sub    esp,0x8
300009ff:	8d 83 28 fb ff ff    	lea    eax,[ebx-0x4d8]
30000a05:	50                   	push   eax
30000a06:	68 00 00 00 02       	push   0x2000000
30000a0b:	e8 3a 01 00 00       	call   30000b4a <printdI>
30000a10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53
    if (!libcInitialized)
30000a13:	0f b6 83 38 00 00 00 	movzx  eax,BYTE PTR [ebx+0x38]
30000a1a:	83 f0 01             	xor    eax,0x1
30000a1d:	84 c0                	test   al,al
30000a1f:	74 56                	je     30000a77 <libc_init+0x8d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    {
        initmalloc();
30000a21:	e8 6a 08 00 00       	call   30001290 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
30000a26:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
30000a29:	89 c2                	mov    edx,eax
30000a2b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000a31:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        do_syscall0(SYSCALL_INVALID);
30000a33:	83 ec 0c             	sub    esp,0xc
30000a36:	6a 00                	push   0x0
30000a38:	e8 6b ff ff ff       	call   300009a8 <do_syscall0>
30000a3d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
30000a40:	8d 83 77 c0 ff ff    	lea    eax,[ebx-0x3f89]
30000a46:	83 ec 08             	sub    esp,0x8
30000a49:	50                   	push   eax
30000a4a:	68 63 01 00 00       	push   0x163
30000a4f:	e8 14 ff ff ff       	call   30000968 <do_syscall1>
30000a54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        libcInitialized = true;
30000a57:	c6 83 38 00 00 00 01 	mov    BYTE PTR [ebx+0x38],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        printdI(DEBUG_LIBC,"***libc_init completed\n");
30000a5e:	83 ec 08             	sub    esp,0x8
30000a61:	8d 83 40 fb ff ff    	lea    eax,[ebx-0x4c0]
30000a67:	50                   	push   eax
30000a68:	68 00 00 00 02       	push   0x2000000
30000a6d:	e8 d8 00 00 00       	call   30000b4a <printdI>
30000a72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
    }
    else
        printI("libc_init called previously, exiting\n");
}
30000a75:	eb 12                	jmp    30000a89 <libc_init+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
        libcInitialized = true;
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
30000a77:	83 ec 0c             	sub    esp,0xc
30000a7a:	8d 83 58 fb ff ff    	lea    eax,[ebx-0x4a8]
30000a80:	50                   	push   eax
30000a81:	e8 90 00 00 00       	call   30000b16 <printI>
30000a86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
}
30000a89:	90                   	nop
30000a8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000a8d:	c9                   	leave  
30000a8e:	c3                   	ret    

30000a8f <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:68

void __attribute__((destructor)) libc_cleanup(void)
{
30000a8f:	55                   	push   ebp
30000a90:	89 e5                	mov    ebp,esp
30000a92:	53                   	push   ebx
30000a93:	83 ec 04             	sub    esp,0x4
30000a96:	e8 3c 24 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000a9b:	05 7d 3f 00 00       	add    eax,0x3f7d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69
    malloc_cleanup();
30000aa0:	89 c3                	mov    ebx,eax
30000aa2:	e8 24 0b 00 00       	call   300015cb <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
}
30000aa7:	90                   	nop
30000aa8:	83 c4 04             	add    esp,0x4
30000aab:	5b                   	pop    ebx
30000aac:	5d                   	pop    ebp
30000aad:	c3                   	ret    

30000aae <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73

VISIBLE int print(const char *format, ...)
{
30000aae:	55                   	push   ebp
30000aaf:	89 e5                	mov    ebp,esp
30000ab1:	83 ec 10             	sub    esp,0x10
30000ab4:	e8 1e 24 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000ab9:	05 5f 3f 00 00       	add    eax,0x3f5f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75
    va_list args;
    va_start( args, format );
30000abe:	8d 45 0c             	lea    eax,[ebp+0xc]
30000ac1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000ac4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000ac7:	89 c2                	mov    edx,eax
30000ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000acc:	52                   	push   edx
30000acd:	50                   	push   eax
30000ace:	68 00 03 00 00       	push   0x300
30000ad3:	e8 52 fe ff ff       	call   3000092a <do_syscall2>
30000ad8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77
    return 0;
30000adb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:78
}
30000ae0:	c9                   	leave  
30000ae1:	c3                   	ret    

30000ae2 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81

VISIBLE int printf(const char *format, ...)
{
30000ae2:	55                   	push   ebp
30000ae3:	89 e5                	mov    ebp,esp
30000ae5:	83 ec 10             	sub    esp,0x10
30000ae8:	e8 ea 23 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000aed:	05 2b 3f 00 00       	add    eax,0x3f2b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    va_list args;
    va_start( args, format );
30000af2:	8d 45 0c             	lea    eax,[ebp+0xc]
30000af5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000af8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000afb:	89 c2                	mov    edx,eax
30000afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b00:	52                   	push   edx
30000b01:	50                   	push   eax
30000b02:	68 00 03 00 00       	push   0x300
30000b07:	e8 1e fe ff ff       	call   3000092a <do_syscall2>
30000b0c:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    return 0;
30000b0f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
}
30000b14:	c9                   	leave  
30000b15:	c3                   	ret    

30000b16 <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89

int printI(const char *format, ...)
{
30000b16:	55                   	push   ebp
30000b17:	89 e5                	mov    ebp,esp
30000b19:	83 ec 10             	sub    esp,0x10
30000b1c:	e8 b6 23 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000b21:	05 f7 3e 00 00       	add    eax,0x3ef7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    va_list args;
    va_start( args, format );
30000b26:	8d 45 0c             	lea    eax,[ebp+0xc]
30000b29:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000b2c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000b2f:	89 c2                	mov    edx,eax
30000b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b34:	52                   	push   edx
30000b35:	50                   	push   eax
30000b36:	68 00 03 00 00       	push   0x300
30000b3b:	e8 ea fd ff ff       	call   3000092a <do_syscall2>
30000b40:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    return 0;
30000b43:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
}
30000b48:	c9                   	leave  
30000b49:	c3                   	ret    

30000b4a <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:97

int printdI(uint32_t DebugLevel, const char *format, ...)
{
30000b4a:	55                   	push   ebp
30000b4b:	89 e5                	mov    ebp,esp
30000b4d:	83 ec 10             	sub    esp,0x10
30000b50:	e8 82 23 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000b55:	05 c3 3e 00 00       	add    eax,0x3ec3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:99
    va_list args;
    va_start( args, format );
30000b5a:	8d 45 10             	lea    eax,[ebp+0x10]
30000b5d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
30000b60:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000b63:	89 c2                	mov    edx,eax
30000b65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000b68:	52                   	push   edx
30000b69:	50                   	push   eax
30000b6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000b6d:	68 01 03 00 00       	push   0x301
30000b72:	e8 77 fd ff ff       	call   300008ee <do_syscall3>
30000b77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    return 0;
30000b7a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104
    va_end(args);
}
30000b7f:	c9                   	leave  
30000b80:	c3                   	ret    

30000b81 <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107

VISIBLE unsigned int sleep (unsigned int __seconds)
{
30000b81:	55                   	push   ebp
30000b82:	89 e5                	mov    ebp,esp
30000b84:	56                   	push   esi
30000b85:	53                   	push   ebx
30000b86:	83 ec 10             	sub    esp,0x10
30000b89:	e8 49 23 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000b8e:	05 8a 3e 00 00       	add    eax,0x3e8a
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108
    SLEEP_SECONDS(__seconds)
30000b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b96:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
30000b99:	b8 70 01 00 00       	mov    eax,0x170
30000b9e:	bb 00 00 00 00       	mov    ebx,0x0
30000ba3:	b9 00 00 00 00       	mov    ecx,0x0
30000ba8:	ba 00 00 00 00       	mov    edx,0x0
30000bad:	be 00 00 00 00       	mov    esi,0x0
30000bb2:	e8 fc ff ff ff       	call   30000bb3 <sleep+0x32>
30000bb7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000bbd:	69 d0 e8 03 00 00    	imul   edx,eax,0x3e8
30000bc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000bc6:	01 d0                	add    eax,edx
30000bc8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000bcb:	b8 66 01 00 00       	mov    eax,0x166
30000bd0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000bd3:	b9 00 00 00 00       	mov    ecx,0x0
30000bd8:	ba 00 00 00 00       	mov    edx,0x0
30000bdd:	be 00 00 00 00       	mov    esi,0x0
30000be2:	e8 fc ff ff ff       	call   30000be3 <sleep+0x62>
30000be7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    return 0;
30000bea:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
}
30000bef:	83 c4 10             	add    esp,0x10
30000bf2:	5b                   	pop    ebx
30000bf3:	5e                   	pop    esi
30000bf4:	5d                   	pop    ebp
30000bf5:	c3                   	ret    

30000bf6 <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:113

void stop()
{
30000bf6:	55                   	push   ebp
30000bf7:	89 e5                	mov    ebp,esp
30000bf9:	e8 d9 22 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000bfe:	05 1a 3e 00 00       	add    eax,0x3e1a
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:114
    do_syscall0(SYSCALL_STOP);
30000c03:	68 68 01 00 00       	push   0x168
30000c08:	e8 9b fd ff ff       	call   300009a8 <do_syscall0>
30000c0d:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115
}
30000c10:	90                   	nop
30000c11:	c9                   	leave  
30000c12:	c3                   	ret    

30000c13 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:118

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
30000c13:	55                   	push   ebp
30000c14:	89 e5                	mov    ebp,esp
30000c16:	e8 bc 22 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000c1b:	05 fd 3d 00 00       	add    eax,0x3dfd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
30000c20:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000c23:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000c26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c29:	51                   	push   ecx
30000c2a:	52                   	push   edx
30000c2b:	50                   	push   eax
30000c2c:	68 67 01 00 00       	push   0x167
30000c31:	e8 b8 fc ff ff       	call   300008ee <do_syscall3>
30000c36:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
}
30000c39:	90                   	nop
30000c3a:	c9                   	leave  
30000c3b:	c3                   	ret    

30000c3c <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:123

VISIBLE int fork()
{
30000c3c:	55                   	push   ebp
30000c3d:	89 e5                	mov    ebp,esp
30000c3f:	83 ec 10             	sub    esp,0x10
30000c42:	e8 90 22 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000c47:	05 d1 3d 00 00       	add    eax,0x3dd1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:124
    uint32_t retVal = 0;
30000c4c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:126
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
30000c53:	b8 06 00 00 00       	mov    eax,0x6
30000c58:	e8 fc ff ff ff       	call   30000c59 <fork+0x1d>
30000c5d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    return retVal;
30000c60:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:128
}
30000c63:	c9                   	leave  
30000c64:	c3                   	ret    

30000c65 <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:131

VISIBLE int exec(char* path, int argc, char** argv)
{
30000c65:	55                   	push   ebp
30000c66:	89 e5                	mov    ebp,esp
30000c68:	83 ec 10             	sub    esp,0x10
30000c6b:	e8 67 22 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000c70:	05 a8 3d 00 00       	add    eax,0x3da8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
    int pid=0;
30000c75:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:133
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
30000c7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c7f:	8d 80 7e fb ff ff    	lea    eax,[eax-0x482]
30000c85:	50                   	push   eax
30000c86:	68 00 00 00 02       	push   0x2000000
30000c8b:	e8 ba fe ff ff       	call   30000b4a <printdI>
30000c90:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
30000c93:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000c96:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c9c:	51                   	push   ecx
30000c9d:	52                   	push   edx
30000c9e:	50                   	push   eax
30000c9f:	6a 59                	push   0x59
30000ca1:	e8 48 fc ff ff       	call   300008ee <do_syscall3>
30000ca6:	83 c4 10             	add    esp,0x10
30000ca9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135
    return pid;
30000cac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
}
30000caf:	c9                   	leave  
30000cb0:	c3                   	ret    

30000cb1 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139

VISIBLE int execb(char* path)
{
30000cb1:	55                   	push   ebp
30000cb2:	89 e5                	mov    ebp,esp
30000cb4:	53                   	push   ebx
30000cb5:	83 ec 24             	sub    esp,0x24
30000cb8:	e8 43 22 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
30000cbd:	81 c3 5b 3d 00 00    	add    ebx,0x3d5b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:140
    int pid=0, argc=0;
30000cc3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
30000cca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
30000cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000cd4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000cda:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:144
    char* program;
    program=mallocI(512);
30000cdd:	83 ec 0c             	sub    esp,0xc
30000ce0:	68 00 02 00 00       	push   0x200
30000ce5:	e8 d2 06 00 00       	call   300013bc <mallocI>
30000cea:	83 c4 10             	add    esp,0x10
30000ced:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    do
    {
        spacePtr=strstrI(spacePtr," ");
30000cf0:	83 ec 08             	sub    esp,0x8
30000cf3:	8d 83 91 fb ff ff    	lea    eax,[ebx-0x46f]
30000cf9:	50                   	push   eax
30000cfa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000cfd:	e8 7a 14 00 00       	call   3000217c <strstrI>
30000d02:	83 c4 10             	add    esp,0x10
30000d05:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148
        if (argc==0)
30000d08:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000d0c:	75 44                	jne    30000d52 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:150
        {
            if (spacePtr==0)
30000d0e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000d12:	75 22                	jne    30000d36 <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151
                strncpyI(program, path, strlenI(path));
30000d14:	83 ec 0c             	sub    esp,0xc
30000d17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000d1a:	e8 e6 0e 00 00       	call   30001c05 <strlenI>
30000d1f:	83 c4 10             	add    esp,0x10
30000d22:	83 ec 04             	sub    esp,0x4
30000d25:	50                   	push   eax
30000d26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000d29:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000d2c:	e8 d7 0f 00 00       	call   30001d08 <strncpyI>
30000d31:	83 c4 10             	add    esp,0x10
30000d34:	eb 1c                	jmp    30000d52 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153
            else
                strncpyI(program, path, spacePtr-path);
30000d36:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000d3c:	29 c2                	sub    edx,eax
30000d3e:	89 d0                	mov    eax,edx
30000d40:	83 ec 04             	sub    esp,0x4
30000d43:	50                   	push   eax
30000d44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000d47:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000d4a:	e8 b9 0f 00 00       	call   30001d08 <strncpyI>
30000d4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:155
        }
        argc++;
30000d52:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
            
    } while (spacePtr++);
30000d56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000d59:	8d 50 01             	lea    edx,[eax+0x1]
30000d5c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000d5f:	85 c0                	test   eax,eax
30000d61:	75 8d                	jne    30000cf0 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
    
    argv=mallocI((argc*50)+(argc*4));
30000d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000d66:	6b c0 36             	imul   eax,eax,0x36
30000d69:	83 ec 0c             	sub    esp,0xc
30000d6c:	50                   	push   eax
30000d6d:	e8 4a 06 00 00       	call   300013bc <mallocI>
30000d72:	83 c4 10             	add    esp,0x10
30000d75:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:160
    int argvPtr=4*argc;
30000d78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000d7b:	c1 e0 02             	shl    eax,0x2
30000d7e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:161
    spacePtr=path;
30000d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000d84:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162
    for (int cnt=0;cnt<argc; cnt++)
30000d87:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
30000d8e:	e9 c8 00 00 00       	jmp    30000e5b <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164
    {
        argv[cnt]=(char*)argv+argvPtr;
30000d93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d96:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000d9d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000da0:	01 d0                	add    eax,edx
30000da2:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
30000da5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30000da8:	01 ca                	add    edx,ecx
30000daa:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:165
        spacePtr=strstrI(spacePtr," ");
30000dac:	83 ec 08             	sub    esp,0x8
30000daf:	8d 83 91 fb ff ff    	lea    eax,[ebx-0x46f]
30000db5:	50                   	push   eax
30000db6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000db9:	e8 be 13 00 00       	call   3000217c <strstrI>
30000dbe:	83 c4 10             	add    esp,0x10
30000dc1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
        if (spacePtr)
30000dc4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000dc8:	74 2f                	je     30000df9 <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
30000dca:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000dcd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000dd0:	29 c2                	sub    edx,eax
30000dd2:	89 d0                	mov    eax,edx
30000dd4:	89 c1                	mov    ecx,eax
30000dd6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000dd9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000de0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000de3:	01 d0                	add    eax,edx
30000de5:	8b 00                	mov    eax,DWORD PTR [eax]
30000de7:	83 ec 04             	sub    esp,0x4
30000dea:	51                   	push   ecx
30000deb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000dee:	50                   	push   eax
30000def:	e8 14 0f 00 00       	call   30001d08 <strncpyI>
30000df4:	83 c4 10             	add    esp,0x10
30000df7:	eb 31                	jmp    30000e2a <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
30000df9:	83 ec 0c             	sub    esp,0xc
30000dfc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000dff:	e8 01 0e 00 00       	call   30001c05 <strlenI>
30000e04:	83 c4 10             	add    esp,0x10
30000e07:	89 c2                	mov    edx,eax
30000e09:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000e0c:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
30000e13:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000e16:	01 c8                	add    eax,ecx
30000e18:	8b 00                	mov    eax,DWORD PTR [eax]
30000e1a:	83 ec 04             	sub    esp,0x4
30000e1d:	52                   	push   edx
30000e1e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000e21:	50                   	push   eax
30000e22:	e8 e1 0e 00 00       	call   30001d08 <strncpyI>
30000e27:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:170 (discriminator 2)
        strtrimI(argv[cnt]);
30000e2a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000e2d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000e34:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000e37:	01 d0                	add    eax,edx
30000e39:	8b 00                	mov    eax,DWORD PTR [eax]
30000e3b:	83 ec 0c             	sub    esp,0xc
30000e3e:	50                   	push   eax
30000e3f:	e8 80 12 00 00       	call   300020c4 <strtrimI>
30000e44:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171 (discriminator 2)
        lastSpacePtr=spacePtr++;
30000e47:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000e4a:	8d 50 01             	lea    edx,[eax+0x1]
30000e4d:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000e50:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172 (discriminator 2)
        argvPtr+=50;
30000e53:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
30000e57:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162 (discriminator 1)
30000e5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000e5e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30000e61:	0f 8c 2c ff ff ff    	jl     30000d93 <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:174
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
30000e67:	83 ec 04             	sub    esp,0x4
30000e6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000e6d:	8d 83 93 fb ff ff    	lea    eax,[ebx-0x46d]
30000e73:	50                   	push   eax
30000e74:	68 00 00 00 02       	push   0x2000000
30000e79:	e8 cc fc ff ff       	call   30000b4a <printdI>
30000e7e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
30000e81:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
30000e84:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000e87:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
30000e8a:	51                   	push   ecx
30000e8b:	52                   	push   edx
30000e8c:	50                   	push   eax
30000e8d:	68 05 03 00 00       	push   0x305
30000e92:	e8 57 fa ff ff       	call   300008ee <do_syscall3>
30000e97:	83 c4 10             	add    esp,0x10
30000e9a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
30000e9d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:182
    freeI(argv);
    freeI(program);
}
30000ea0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000ea3:	c9                   	leave  
30000ea4:	c3                   	ret    

30000ea5 <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:185

VISIBLE int execa(char* path, int argc, char** argv)
{
30000ea5:	55                   	push   ebp
30000ea6:	89 e5                	mov    ebp,esp
30000ea8:	83 ec 10             	sub    esp,0x10
30000eab:	e8 27 20 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000eb0:	05 68 3b 00 00       	add    eax,0x3b68
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186
    int pid=0;
30000eb5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
30000ebc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000ebf:	8d 80 a7 fb ff ff    	lea    eax,[eax-0x459]
30000ec5:	50                   	push   eax
30000ec6:	68 00 00 00 02       	push   0x2000000
30000ecb:	e8 7a fc ff ff       	call   30000b4a <printdI>
30000ed0:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:188
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
30000ed3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000ed6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000edc:	51                   	push   ecx
30000edd:	52                   	push   edx
30000ede:	50                   	push   eax
30000edf:	68 05 03 00 00       	push   0x305
30000ee4:	e8 05 fa ff ff       	call   300008ee <do_syscall3>
30000ee9:	83 c4 10             	add    esp,0x10
30000eec:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189
    return pid;
30000eef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
}
30000ef2:	c9                   	leave  
30000ef3:	c3                   	ret    

30000ef4 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:193

VISIBLE int waitpid(uint32_t pid)
{
30000ef4:	55                   	push   ebp
30000ef5:	89 e5                	mov    ebp,esp
30000ef7:	e8 db 1f 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000efc:	05 1c 3b 00 00       	add    eax,0x3b1c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:194
    return do_syscall1(SYSCALL_WAITFORPID,pid);
30000f01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000f04:	6a 61                	push   0x61
30000f06:	e8 5d fa ff ff       	call   30000968 <do_syscall1>
30000f0b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
}
30000f0e:	c9                   	leave  
30000f0f:	c3                   	ret    

30000f10 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:199


VISIBLE void exit (int status)
{
30000f10:	55                   	push   ebp
30000f11:	89 e5                	mov    ebp,esp
30000f13:	e8 bf 1f 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000f18:	05 00 3b 00 00       	add    eax,0x3b00
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
30000f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000f20:	50                   	push   eax
30000f21:	6a 00                	push   0x0
30000f23:	6a 01                	push   0x1
30000f25:	e8 00 fa ff ff       	call   3000092a <do_syscall2>
30000f2a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201
}
30000f2d:	90                   	nop
30000f2e:	c9                   	leave  
30000f2f:	c3                   	ret    

30000f30 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205


VISIBLE char* getcwd(char* buf, size_t size)
{
30000f30:	55                   	push   ebp
30000f31:	89 e5                	mov    ebp,esp
30000f33:	e8 9f 1f 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000f38:	05 e0 3a 00 00       	add    eax,0x3ae0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:206
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
30000f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000f40:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000f43:	50                   	push   eax
30000f44:	6a 4f                	push   0x4f
30000f46:	e8 df f9 ff ff       	call   3000092a <do_syscall2>
30000f4b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207
}
30000f4e:	c9                   	leave  
30000f4f:	c3                   	ret    

30000f50 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:211


size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
30000f50:	55                   	push   ebp
30000f51:	89 e5                	mov    ebp,esp
30000f53:	83 ec 20             	sub    esp,0x20
30000f56:	e8 7c 1f 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30000f5b:	05 bd 3a 00 00       	add    eax,0x3abd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:214
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
30000f60:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215
    size_t argc = 0;
30000f67:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:217

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
30000f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000f71:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
30000f74:	e9 d8 00 00 00       	jmp    30001051 <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:218
        c = (unsigned char) *p;
30000f79:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f7c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000f7f:	0f b6 c0             	movzx  eax,al
30000f82:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:219
        switch (state) {
30000f85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000f88:	83 f8 01             	cmp    eax,0x1
30000f8b:	74 7e                	je     3000100b <splitI+0xbb>
30000f8d:	83 f8 01             	cmp    eax,0x1
30000f90:	72 0a                	jb     30000f9c <splitI+0x4c>
30000f92:	83 f8 02             	cmp    eax,0x2
30000f95:	74 45                	je     30000fdc <splitI+0x8c>
30000f97:	e9 b1 00 00 00       	jmp    3000104d <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:221
        case DULL:
            if (ISSPACE(c)) {
30000f9c:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
30000fa0:	0f 94 c0             	sete   al
30000fa3:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
30000fa6:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
30000faa:	84 c0                	test   al,al
30000fac:	0f 85 94 00 00 00    	jne    30001046 <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:225
                continue;
            }

            if (c == '"') {
30000fb2:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
30000fb6:	75 15                	jne    30000fcd <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226
                state = IN_STRING;
30000fb8:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:227
                start_of_word = p + 1; 
30000fbf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000fc2:	83 c0 01             	add    eax,0x1
30000fc5:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:228
                continue;
30000fc8:	e9 80 00 00 00       	jmp    3000104d <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:230
            }
            state = IN_WORD;
30000fcd:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:231
            start_of_word = p;
30000fd4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000fd7:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232
            continue;
30000fda:	eb 71                	jmp    3000104d <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:235

        case IN_STRING:
            if (c == '"') {
30000fdc:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
30000fe0:	75 67                	jne    30001049 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:236
                *p = 0;
30000fe2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000fe5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:237
                argv[argc++] = start_of_word;
30000fe8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000feb:	8d 50 01             	lea    edx,[eax+0x1]
30000fee:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000ff1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000ff8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000ffb:	01 c2                	add    edx,eax
30000ffd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001000:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:238
                state = DULL;
30001002:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:240
            }
            continue;
30001009:	eb 3e                	jmp    30001049 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:243

        case IN_WORD:
            if (ISSPACE(c)) {
3000100b:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
3000100f:	0f 94 c0             	sete   al
30001012:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
30001015:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
30001019:	84 c0                	test   al,al
3000101b:	74 2f                	je     3000104c <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:244
                *p = 0;
3000101d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001020:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
                argv[argc++] = start_of_word;
30001023:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001026:	8d 50 01             	lea    edx,[eax+0x1]
30001029:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
3000102c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30001033:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001036:	01 c2                	add    edx,eax
30001038:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
3000103b:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
                state = DULL;
3000103d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248
            }
            continue;
30001044:	eb 06                	jmp    3000104c <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
30001046:	90                   	nop
30001047:	eb 04                	jmp    3000104d <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:240
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
30001049:	90                   	nop
3000104a:	eb 01                	jmp    3000104d <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
3000104c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:217 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
3000104d:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:217 (discriminator 1)
30001051:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001054:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
30001057:	73 0e                	jae    30001067 <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:217 (discriminator 3)
30001059:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000105c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000105f:	84 c0                	test   al,al
30001061:	0f 85 12 ff ff ff    	jne    30000f79 <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
30001067:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
3000106b:	74 22                	je     3000108f <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252 (discriminator 1)
3000106d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001070:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
30001073:	73 1a                	jae    3000108f <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
        argv[argc++] = start_of_word;
30001075:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001078:	8d 50 01             	lea    edx,[eax+0x1]
3000107b:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
3000107e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30001085:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001088:	01 c2                	add    edx,eax
3000108a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
3000108d:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255

    return argc;
3000108f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:256
}
30001092:	c9                   	leave  
30001093:	c3                   	ret    

30001094 <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
30001094:	55                   	push   ebp
30001095:	89 e5                	mov    ebp,esp
30001097:	e8 3b 1e 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
3000109c:	05 7c 39 00 00       	add    eax,0x397c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260
    return splitI(buffer, argv, argv_size);
300010a1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
300010a4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300010a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300010aa:	e8 a1 fe ff ff       	call   30000f50 <splitI>
300010af:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:261
}
300010b2:	c9                   	leave  
300010b3:	c3                   	ret    

300010b4 <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:264

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
300010b4:	55                   	push   ebp
300010b5:	89 e5                	mov    ebp,esp
300010b7:	53                   	push   ebx
300010b8:	81 ec 24 04 00 00    	sub    esp,0x424
300010be:	e8 3d 1e 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
300010c3:	81 c3 55 39 00 00    	add    ebx,0x3955
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd;
300010c9:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
300010cf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
300010d2:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
300010d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
    *argc = 0;
300010db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300010de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:270
    
    strncpyI(cmd,cmdline,1024);
300010e4:	83 ec 04             	sub    esp,0x4
300010e7:	68 00 04 00 00       	push   0x400
300010ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300010ef:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
300010f5:	50                   	push   eax
300010f6:	e8 0d 0c 00 00       	call   30001d08 <strncpyI>
300010fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
    strtrimI(cmd);
300010fe:	83 ec 0c             	sub    esp,0xc
30001101:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
30001107:	50                   	push   eax
30001108:	e8 b7 0f 00 00       	call   300020c4 <strtrimI>
3000110d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274 (discriminator 1)
    do
    {
        spacePtr=strstrI(spacePtr," ");
30001110:	83 ec 08             	sub    esp,0x8
30001113:	8d 83 91 fb ff ff    	lea    eax,[ebx-0x46f]
30001119:	50                   	push   eax
3000111a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
3000111d:	e8 5a 10 00 00       	call   3000217c <strstrI>
30001122:	83 c4 10             	add    esp,0x10
30001125:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275 (discriminator 1)
        *argc+=1;
30001128:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000112b:	8b 00                	mov    eax,DWORD PTR [eax]
3000112d:	8d 50 01             	lea    edx,[eax+0x1]
30001130:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001133:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:277 (discriminator 1)
    
    } while (spacePtr++);
30001135:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001138:	8d 50 01             	lea    edx,[eax+0x1]
3000113b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000113e:	85 c0                	test   eax,eax
30001140:	75 ce                	jne    30001110 <cmdlineToArgvI+0x5c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
30001142:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001145:	8b 10                	mov    edx,DWORD PTR [eax]
30001147:	89 d0                	mov    eax,edx
30001149:	c1 e0 08             	shl    eax,0x8
3000114c:	29 d0                	sub    eax,edx
3000114e:	89 c2                	mov    edx,eax
30001150:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001153:	8b 00                	mov    eax,DWORD PTR [eax]
30001155:	c1 e0 02             	shl    eax,0x2
30001158:	01 d0                	add    eax,edx
3000115a:	83 ec 0c             	sub    esp,0xc
3000115d:	50                   	push   eax
3000115e:	e8 59 02 00 00       	call   300013bc <mallocI>
30001163:	83 c4 10             	add    esp,0x10
30001166:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:280
    int argvPtr=4* *argc;
30001169:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000116c:	8b 00                	mov    eax,DWORD PTR [eax]
3000116e:	c1 e0 02             	shl    eax,0x2
30001171:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:281
    spacePtr=cmd;
30001174:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
3000117a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:282
    for (int cnt=0;cnt<*argc; cnt++)
3000117d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
30001184:	e9 cb 00 00 00       	jmp    30001254 <cmdlineToArgvI+0x1a0>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284
    {
        argv[cnt]=(char*)argv+argvPtr;
30001189:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
3000118c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30001193:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30001196:	01 d0                	add    eax,edx
30001198:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
3000119b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
3000119e:	01 ca                	add    edx,ecx
300011a0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:285
        spacePtr=strstrI(spacePtr," ");
300011a2:	83 ec 08             	sub    esp,0x8
300011a5:	8d 83 91 fb ff ff    	lea    eax,[ebx-0x46f]
300011ab:	50                   	push   eax
300011ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
300011af:	e8 c8 0f 00 00       	call   3000217c <strstrI>
300011b4:	83 c4 10             	add    esp,0x10
300011b7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286
        if (spacePtr)
300011ba:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
300011be:	74 2f                	je     300011ef <cmdlineToArgvI+0x13b>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
300011c0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300011c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300011c6:	29 c2                	sub    edx,eax
300011c8:	89 d0                	mov    eax,edx
300011ca:	89 c1                	mov    ecx,eax
300011cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
300011cf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
300011d6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
300011d9:	01 d0                	add    eax,edx
300011db:	8b 00                	mov    eax,DWORD PTR [eax]
300011dd:	83 ec 04             	sub    esp,0x4
300011e0:	51                   	push   ecx
300011e1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
300011e4:	50                   	push   eax
300011e5:	e8 1e 0b 00 00       	call   30001d08 <strncpyI>
300011ea:	83 c4 10             	add    esp,0x10
300011ed:	eb 31                	jmp    30001220 <cmdlineToArgvI+0x16c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
300011ef:	83 ec 0c             	sub    esp,0xc
300011f2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
300011f5:	e8 0b 0a 00 00       	call   30001c05 <strlenI>
300011fa:	83 c4 10             	add    esp,0x10
300011fd:	89 c2                	mov    edx,eax
300011ff:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001202:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
30001209:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
3000120c:	01 c8                	add    eax,ecx
3000120e:	8b 00                	mov    eax,DWORD PTR [eax]
30001210:	83 ec 04             	sub    esp,0x4
30001213:	52                   	push   edx
30001214:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001217:	50                   	push   eax
30001218:	e8 eb 0a 00 00       	call   30001d08 <strncpyI>
3000121d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290 (discriminator 2)
        strtrimI(argv[cnt]);
30001220:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001223:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
3000122a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
3000122d:	01 d0                	add    eax,edx
3000122f:	8b 00                	mov    eax,DWORD PTR [eax]
30001231:	83 ec 0c             	sub    esp,0xc
30001234:	50                   	push   eax
30001235:	e8 8a 0e 00 00       	call   300020c4 <strtrimI>
3000123a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291 (discriminator 2)
        lastSpacePtr=spacePtr++;
3000123d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001240:	8d 50 01             	lea    edx,[eax+0x1]
30001243:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001246:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
30001249:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:282 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
30001250:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:282 (discriminator 1)
30001254:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001257:	8b 00                	mov    eax,DWORD PTR [eax]
30001259:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
3000125c:	0f 8f 27 ff ff ff    	jg     30001189 <cmdlineToArgvI+0xd5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:294
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
30001262:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295
}
30001265:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001268:	c9                   	leave  
30001269:	c3                   	ret    

3000126a <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
3000126a:	55                   	push   ebp
3000126b:	89 e5                	mov    ebp,esp
3000126d:	83 ec 08             	sub    esp,0x8
30001270:	e8 62 1c 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001275:	05 a3 37 00 00       	add    eax,0x37a3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299
    return cmdlineToArgvI(cmdline, argc);
3000127a:	83 ec 08             	sub    esp,0x8
3000127d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001280:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001283:	e8 2c fe ff ff       	call   300010b4 <cmdlineToArgvI>
30001288:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:300
}
3000128b:	c9                   	leave  
3000128c:	c3                   	ret    
3000128d:	66 90                	xchg   ax,ax
3000128f:	90                   	nop

30001290 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:13
#include "libChrisOS.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
30001290:	55                   	push   ebp
30001291:	89 e5                	mov    ebp,esp
30001293:	53                   	push   ebx
30001294:	83 ec 04             	sub    esp,0x4
30001297:	e8 64 1c 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
3000129c:	81 c3 7c 37 00 00    	add    ebx,0x377c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
300012a2:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
300012a8:	8b 00                	mov    eax,DWORD PTR [eax]
300012aa:	50                   	push   eax
300012ab:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
300012b1:	50                   	push   eax
300012b2:	8d 83 bc fb ff ff    	lea    eax,[ebx-0x444]
300012b8:	50                   	push   eax
300012b9:	68 00 00 00 01       	push   0x1000000
300012be:	e8 87 f8 ff ff       	call   30000b4a <printdI>
300012c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    heapBase=0;
300012c6:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
300012cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapCurr=0;
300012d2:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300012d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapEnd=0;
300012de:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
300012e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    libcTZ=-5;
300012ea:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
300012f0:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:20

}
300012f6:	90                   	nop
300012f7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300012fa:	c9                   	leave  
300012fb:	c3                   	ret    

300012fc <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
300012fc:	55                   	push   ebp
300012fd:	89 e5                	mov    ebp,esp
300012ff:	83 ec 10             	sub    esp,0x10
30001302:	e8 d0 1b 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001307:	05 11 37 00 00       	add    eax,0x3711
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
3000130c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000130f:	83 c2 20             	add    edx,0x20
30001312:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
30001315:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
3000131b:	8b 0a                	mov    ecx,DWORD PTR [edx]
3000131d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001320:	01 d1                	add    ecx,edx
30001322:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
30001328:	8b 12                	mov    edx,DWORD PTR [edx]
3000132a:	39 d1                	cmp    ecx,edx
3000132c:	76 4e                	jbe    3000137c <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
3000132e:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30001334:	8b 12                	mov    edx,DWORD PTR [edx]
30001336:	8b 80 ec ff ff ff    	mov    eax,DWORD PTR [eax-0x14]
3000133c:	8b 00                	mov    eax,DWORD PTR [eax]
3000133e:	29 c2                	sub    edx,eax
30001340:	89 d0                	mov    eax,edx
30001342:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
        if (newSize== 0 || newSize%PAGE_SIZE)
30001345:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
30001349:	74 0c                	je     30001357 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32 (discriminator 1)
3000134b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000134e:	25 ff 0f 00 00       	and    eax,0xfff
30001353:	85 c0                	test   eax,eax
30001355:	74 10                	je     30001367 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
30001357:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000135a:	25 00 f0 ff ff       	and    eax,0xfffff000
3000135f:	05 00 10 00 00       	add    eax,0x1000
30001364:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:37
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
30001367:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
3000136e:	77 07                	ja     30001377 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
            return ALLOC_REQUEST_SIZE;
30001370:	b8 00 20 03 00       	mov    eax,0x32000
30001375:	eb 0a                	jmp    30001381 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        else
            return newSize;
30001377:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000137a:	eb 05                	jmp    30001381 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:43
    }
    else
        return 0;
3000137c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:44
}
30001381:	c9                   	leave  
30001382:	c3                   	ret    

30001383 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:47

void freeI(void* fpointer)
{
30001383:	55                   	push   ebp
30001384:	89 e5                	mov    ebp,esp
30001386:	83 ec 10             	sub    esp,0x10
30001389:	e8 49 1b 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
3000138e:	05 8a 36 00 00       	add    eax,0x368a
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:50
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
30001393:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30001397:	74 20                	je     300013b9 <freeI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
30001399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000139c:	83 e8 10             	sub    eax,0x10
3000139f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
300013a2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300013a5:	8b 00                	mov    eax,DWORD PTR [eax]
300013a7:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
300013ac:	74 02                	je     300013b0 <freeI+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59 (discriminator 2)
    {
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
300013ae:	eb fe                	jmp    300013ae <freeI+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
    }
    mp->inUse=false;
300013b0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300013b3:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
300013b7:	eb 01                	jmp    300013ba <freeI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
300013b9:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
    }
    mp->inUse=false;
}
300013ba:	c9                   	leave  
300013bb:	c3                   	ret    

300013bc <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65

void*  mallocI(size_t size)
{
300013bc:	55                   	push   ebp
300013bd:	89 e5                	mov    ebp,esp
300013bf:	53                   	push   ebx
300013c0:	83 ec 24             	sub    esp,0x24
300013c3:	e8 38 1b 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
300013c8:	81 c3 50 36 00 00    	add    ebx,0x3650
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
300013ce:	83 ec 04             	sub    esp,0x4
300013d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300013d4:	8d 83 df fb ff ff    	lea    eax,[ebx-0x421]
300013da:	50                   	push   eax
300013db:	68 00 00 00 01       	push   0x1000000
300013e0:	e8 65 f7 ff ff       	call   30000b4a <printdI>
300013e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    needed = newHeapRequiredToFulfillRequest(size);
300013e8:	83 ec 0c             	sub    esp,0xc
300013eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300013ee:	e8 09 ff ff ff       	call   300012fc <newHeapRequiredToFulfillRequest>
300013f3:	83 c4 10             	add    esp,0x10
300013f6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:74
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
300013f9:	83 ec 04             	sub    esp,0x4
300013fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
300013ff:	8d 83 ef fb ff ff    	lea    eax,[ebx-0x411]
30001405:	50                   	push   eax
30001406:	68 00 00 00 01       	push   0x1000000
3000140b:	e8 3a f7 ff ff       	call   30000b4a <printdI>
30001410:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    if (needed!=0)      //New heap required
30001413:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30001417:	0f 84 ae 00 00 00    	je     300014cb <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
3000141d:	83 ec 08             	sub    esp,0x8
30001420:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30001423:	68 65 01 00 00       	push   0x165
30001428:	e8 3b f5 ff ff       	call   30000968 <do_syscall1>
3000142d:	83 c4 10             	add    esp,0x10
30001430:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
30001433:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001439:	8b 00                	mov    eax,DWORD PTR [eax]
3000143b:	83 ec 04             	sub    esp,0x4
3000143e:	50                   	push   eax
3000143f:	8d 83 0b fc ff ff    	lea    eax,[ebx-0x3f5]
30001445:	50                   	push   eax
30001446:	68 00 00 00 01       	push   0x1000000
3000144b:	e8 fa f6 ff ff       	call   30000b4a <printdI>
30001450:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
        heapEnd=allocatedPtr+needed;
30001453:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001456:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001459:	01 c2                	add    edx,eax
3000145b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001461:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
30001463:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001469:	8b 00                	mov    eax,DWORD PTR [eax]
3000146b:	83 ec 0c             	sub    esp,0xc
3000146e:	50                   	push   eax
3000146f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001472:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30001475:	8d 83 28 fc ff ff    	lea    eax,[ebx-0x3d8]
3000147b:	50                   	push   eax
3000147c:	68 00 00 00 01       	push   0x1000000
30001481:	e8 c4 f6 ff ff       	call   30000b4a <printdI>
30001486:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        if (heapBase==0)    //Hasn't been initialized yet!
30001489:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
3000148f:	8b 00                	mov    eax,DWORD PTR [eax]
30001491:	85 c0                	test   eax,eax
30001493:	75 36                	jne    300014cb <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
        {
            heapCurr=allocatedPtr;
30001495:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000149b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000149e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
            heapBase=allocatedPtr;
300014a0:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
300014a6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300014a9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
300014ab:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300014b1:	8b 00                	mov    eax,DWORD PTR [eax]
300014b3:	83 ec 04             	sub    esp,0x4
300014b6:	50                   	push   eax
300014b7:	8d 83 68 fc ff ff    	lea    eax,[ebx-0x398]
300014bd:	50                   	push   eax
300014be:	68 00 00 00 01       	push   0x1000000
300014c3:	e8 82 f6 ff ff       	call   30000b4a <printdI>
300014c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
300014cb:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300014d1:	8b 00                	mov    eax,DWORD PTR [eax]
300014d3:	83 ec 04             	sub    esp,0x4
300014d6:	50                   	push   eax
300014d7:	8d 83 a4 fc ff ff    	lea    eax,[ebx-0x35c]
300014dd:	50                   	push   eax
300014de:	68 00 00 00 01       	push   0x1000000
300014e3:	e8 62 f6 ff ff       	call   30000b4a <printdI>
300014e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90
    heapPtr = (heaprec_t*)heapCurr;
300014eb:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300014f1:	8b 00                	mov    eax,DWORD PTR [eax]
300014f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    heapPtr->marker=ALLOC_MARKER_VALUE;
300014f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300014f9:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    heapPtr->len=size;
300014ff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001502:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001505:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    heapPtr->inUse=true;
30001508:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000150b:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
3000150f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001515:	8b 00                	mov    eax,DWORD PTR [eax]
30001517:	6a 10                	push   0x10
30001519:	50                   	push   eax
3000151a:	8d 83 cc fc ff ff    	lea    eax,[ebx-0x334]
30001520:	50                   	push   eax
30001521:	68 00 00 00 01       	push   0x1000000
30001526:	e8 1f f6 ff ff       	call   30000b4a <printdI>
3000152b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
3000152e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001534:	8b 00                	mov    eax,DWORD PTR [eax]
30001536:	83 c0 10             	add    eax,0x10
30001539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
3000153c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000153f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30001542:	8d 50 10             	lea    edx,[eax+0x10]
30001545:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001548:	01 d0                	add    eax,edx
3000154a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
3000154d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30001550:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30001553:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    heapCurr+=size+(sizeof(heaprec_t));
30001556:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000155c:	8b 10                	mov    edx,DWORD PTR [eax]
3000155e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001561:	01 d0                	add    eax,edx
30001563:	8d 50 10             	lea    edx,[eax+0x10]
30001566:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000156c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
3000156e:	83 ec 04             	sub    esp,0x4
30001571:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
30001574:	8d 83 04 fd ff ff    	lea    eax,[ebx-0x2fc]
3000157a:	50                   	push   eax
3000157b:	68 00 00 00 01       	push   0x1000000
30001580:	e8 c5 f5 ff ff       	call   30000b4a <printdI>
30001585:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    return retVal;
30001588:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101
}
3000158b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000158e:	c9                   	leave  
3000158f:	c3                   	ret    

30001590 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
30001590:	55                   	push   ebp
30001591:	89 e5                	mov    ebp,esp
30001593:	83 ec 08             	sub    esp,0x8
30001596:	e8 3c 19 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
3000159b:	05 7d 34 00 00       	add    eax,0x347d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:105
    return mallocI(size);
300015a0:	83 ec 0c             	sub    esp,0xc
300015a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300015a6:	e8 11 fe ff ff       	call   300013bc <mallocI>
300015ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
}
300015ae:	c9                   	leave  
300015af:	c3                   	ret    

300015b0 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109

__attribute__((visibility("default"))) void free(void* fpointer)
{
300015b0:	55                   	push   ebp
300015b1:	89 e5                	mov    ebp,esp
300015b3:	e8 1f 19 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300015b8:	05 60 34 00 00       	add    eax,0x3460
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110
    freeI(fpointer);
300015bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300015c0:	e8 be fd ff ff       	call   30001383 <freeI>
300015c5:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:111
}
300015c8:	90                   	nop
300015c9:	c9                   	leave  
300015ca:	c3                   	ret    

300015cb <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:114

void malloc_cleanup()
{
300015cb:	55                   	push   ebp
300015cc:	89 e5                	mov    ebp,esp
300015ce:	53                   	push   ebx
300015cf:	83 ec 04             	sub    esp,0x4
300015d2:	e8 00 19 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300015d7:	05 41 34 00 00       	add    eax,0x3441
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    do_syscall1(SYSCALL_FREE, heapBase);
300015dc:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
300015e2:	8b 12                	mov    edx,DWORD PTR [edx]
300015e4:	83 ec 08             	sub    esp,0x8
300015e7:	52                   	push   edx
300015e8:	68 64 01 00 00       	push   0x164
300015ed:	89 c3                	mov    ebx,eax
300015ef:	e8 74 f3 ff ff       	call   30000968 <do_syscall1>
300015f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:116
300015f7:	90                   	nop
300015f8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300015fb:	c9                   	leave  
300015fc:	c3                   	ret    
300015fd:	66 90                	xchg   ax,ax
300015ff:	90                   	nop

30001600 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:11
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
30001600:	55                   	push   ebp
30001601:	89 e5                	mov    ebp,esp
30001603:	83 ec 20             	sub    esp,0x20
30001606:	e8 cc 18 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
3000160b:	05 0d 34 00 00       	add    eax,0x340d
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:14
    bool dw,dd;
    
    dd=n%4==0;
30001610:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001613:	83 e0 03             	and    eax,0x3
30001616:	85 c0                	test   eax,eax
30001618:	0f 94 c0             	sete   al
3000161b:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    dw=n%2==0;
3000161e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001621:	83 e0 01             	and    eax,0x1
30001624:	85 c0                	test   eax,eax
30001626:	0f 94 c0             	sete   al
30001629:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    if (dd)
3000162c:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
30001630:	74 7d                	je     300016af <memcpy+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:18
    {
        n /=4;
30001632:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001635:	c1 e8 02             	shr    eax,0x2
30001638:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
        const uint32_t *f = src;
3000163b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000163e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        uint32_t *t = dest;
30001641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001644:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:22

        if (f < t) {
30001647:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000164a:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
3000164d:	73 4b                	jae    3000169a <memcpy+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23
                f += n;
3000164f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001652:	c1 e0 02             	shl    eax,0x2
30001655:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                t += n;
30001658:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000165b:	c1 e0 02             	shl    eax,0x2
3000165e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                while ( (n)-- > 0)
30001661:	eb 12                	jmp    30001675 <memcpy+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                        *--t = *--f;
30001663:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
30001667:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
3000166b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000166e:	8b 10                	mov    edx,DWORD PTR [eax]
30001670:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001673:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
30001675:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001678:	8d 50 ff             	lea    edx,[eax-0x1]
3000167b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000167e:	85 c0                	test   eax,eax
30001680:	75 e1                	jne    30001663 <memcpy+0x63>
30001682:	eb 23                	jmp    300016a7 <memcpy+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
30001684:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001687:	8d 50 04             	lea    edx,[eax+0x4]
3000168a:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
3000168d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001690:	8d 4a 04             	lea    ecx,[edx+0x4]
30001693:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
30001696:	8b 12                	mov    edx,DWORD PTR [edx]
30001698:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:28
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
3000169a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000169d:	8d 50 ff             	lea    edx,[eax-0x1]
300016a0:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300016a3:	85 c0                	test   eax,eax
300016a5:	75 dd                	jne    30001684 <memcpy+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *t++ = *f++;
        return dest;
300016a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300016aa:	e9 ea 00 00 00       	jmp    30001799 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:32
    }
    else if (dw)
300016af:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
300016b3:	74 79                	je     3000172e <memcpy+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:34
    {
        n /=2;
300016b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300016b8:	d1 e8                	shr    eax,1
300016ba:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
        const uint32_t *f = src;
300016bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300016c0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        uint32_t *t = dest;
300016c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300016c6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:38

        if (f < t) {
300016c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300016cc:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
300016cf:	73 4b                	jae    3000171c <memcpy+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39
                f += n;
300016d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300016d4:	c1 e0 02             	shl    eax,0x2
300016d7:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                t += n;
300016da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300016dd:	c1 e0 02             	shl    eax,0x2
300016e0:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                while ( (n)-- > 0)
300016e3:	eb 12                	jmp    300016f7 <memcpy+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                        *--t = *--f;
300016e5:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
300016e9:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
300016ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300016f0:	8b 10                	mov    edx,DWORD PTR [eax]
300016f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300016f5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
300016f7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300016fa:	8d 50 ff             	lea    edx,[eax-0x1]
300016fd:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001700:	85 c0                	test   eax,eax
30001702:	75 e1                	jne    300016e5 <memcpy+0xe5>
30001704:	eb 23                	jmp    30001729 <memcpy+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
30001706:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001709:	8d 50 04             	lea    edx,[eax+0x4]
3000170c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
3000170f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30001712:	8d 4a 04             	lea    ecx,[edx+0x4]
30001715:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
30001718:	8b 12                	mov    edx,DWORD PTR [edx]
3000171a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:44
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
3000171c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000171f:	8d 50 ff             	lea    edx,[eax-0x1]
30001722:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001725:	85 c0                	test   eax,eax
30001727:	75 dd                	jne    30001706 <memcpy+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *t++ = *f++;
        return dest;
30001729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000172c:	eb 6b                	jmp    30001799 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:50
    }
    else
    {
        const char *f = src;
3000172e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001731:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
        char *t = dest;
30001734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001737:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:53

        if (f < t) {
3000173a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000173d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
30001740:	73 47                	jae    30001789 <memcpy+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54
                f += n;
30001742:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001745:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                t += n;
30001748:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000174b:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                while (n-- > 0)
3000174e:	eb 13                	jmp    30001763 <memcpy+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                        *--t = *--f;
30001750:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
30001754:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
30001758:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000175b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
3000175e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001761:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
30001763:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001766:	8d 50 ff             	lea    edx,[eax-0x1]
30001769:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000176c:	85 c0                	test   eax,eax
3000176e:	75 e0                	jne    30001750 <memcpy+0x150>
30001770:	eb 24                	jmp    30001796 <memcpy+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
30001772:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001775:	8d 50 01             	lea    edx,[eax+0x1]
30001778:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
3000177b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000177e:	8d 4a 01             	lea    ecx,[edx+0x1]
30001781:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
30001784:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001787:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:59
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
30001789:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000178c:	8d 50 ff             	lea    edx,[eax-0x1]
3000178f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001792:	85 c0                	test   eax,eax
30001794:	75 dc                	jne    30001772 <memcpy+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *t++ = *f++;
        return dest;
30001796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:63
    }
}
30001799:	c9                   	leave  
3000179a:	c3                   	ret    
3000179b:	90                   	nop

3000179c <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
3000179c:	55                   	push   ebp
3000179d:	89 e5                	mov    ebp,esp
3000179f:	83 ec 20             	sub    esp,0x20
300017a2:	e8 30 17 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300017a7:	05 71 32 00 00       	add    eax,0x3271
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
300017ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300017af:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
300017b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300017b5:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
300017b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300017bb:	c1 e0 10             	shl    eax,0x10
300017be:	89 c2                	mov    edx,eax
300017c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300017c3:	c1 e0 08             	shl    eax,0x8
300017c6:	09 c2                	or     edx,eax
300017c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300017cb:	09 d0                	or     eax,edx
300017cd:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
300017d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300017d4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
300017d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300017da:	c1 e0 18             	shl    eax,0x18
300017dd:	89 c2                	mov    edx,eax
300017df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300017e2:	c1 e0 10             	shl    eax,0x10
300017e5:	09 c2                	or     edx,eax
300017e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300017ea:	c1 e0 08             	shl    eax,0x8
300017ed:	09 d0                	or     eax,edx
300017ef:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
300017f2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
300017f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300017f8:	83 e0 03             	and    eax,0x3
300017fb:	85 c0                	test   eax,eax
300017fd:	75 1c                	jne    3000181b <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
300017ff:	eb 0e                	jmp    3000180f <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
30001801:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001804:	8d 50 04             	lea    edx,[eax+0x4]
30001807:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000180a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000180d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
3000180f:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
30001813:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001817:	75 e8                	jne    30001801 <memsetI+0x65>
30001819:	eb 43                	jmp    3000185e <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
3000181b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000181e:	83 e0 01             	and    eax,0x1
30001821:	85 c0                	test   eax,eax
30001823:	75 2c                	jne    30001851 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
30001825:	eb 10                	jmp    30001837 <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
30001827:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
3000182a:	8d 50 02             	lea    edx,[eax+0x2]
3000182d:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30001830:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
30001834:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
30001837:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
3000183b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000183f:	75 e6                	jne    30001827 <memsetI+0x8b>
30001841:	eb 1b                	jmp    3000185e <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
30001843:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001846:	8d 50 01             	lea    edx,[eax+0x1]
30001849:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
3000184c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000184f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
30001851:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001854:	8d 50 ff             	lea    edx,[eax-0x1]
30001857:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000185a:	85 c0                	test   eax,eax
3000185c:	75 e5                	jne    30001843 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
3000185e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
30001861:	c9                   	leave  
30001862:	c3                   	ret    

30001863 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
30001863:	55                   	push   ebp
30001864:	89 e5                	mov    ebp,esp
30001866:	e8 6c 16 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
3000186b:	05 ad 31 00 00       	add    eax,0x31ad
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
30001870:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30001873:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001876:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001879:	e8 1e ff ff ff       	call   3000179c <memsetI>
3000187e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
30001881:	c9                   	leave  
30001882:	c3                   	ret    
30001883:	90                   	nop

30001884 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
30001884:	55                   	push   ebp
30001885:	89 e5                	mov    ebp,esp
30001887:	53                   	push   ebx
30001888:	83 ec 04             	sub    esp,0x4
3000188b:	e8 47 16 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001890:	05 88 31 00 00       	add    eax,0x3188
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
30001895:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001898:	83 ec 08             	sub    esp,0x8
3000189b:	52                   	push   edx
3000189c:	6a 07                	push   0x7
3000189e:	89 c3                	mov    ebx,eax
300018a0:	e8 c3 f0 ff ff       	call   30000968 <do_syscall1>
300018a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:13
300018a8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300018ab:	c9                   	leave  
300018ac:	c3                   	ret    
300018ad:	66 90                	xchg   ax,ax
300018af:	90                   	nop

300018b0 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:68
    return;
}
*/
//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
300018b0:	55                   	push   ebp
300018b1:	89 e5                	mov    ebp,esp
300018b3:	53                   	push   ebx
300018b4:	83 ec 14             	sub    esp,0x14
300018b7:	e8 44 16 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
300018bc:	81 c3 5c 31 00 00    	add    ebx,0x315c
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:70
    char buff[5];
    int buffPtr=0;
300018c2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:72

    memsetI(buff,0,10);
300018c9:	83 ec 04             	sub    esp,0x4
300018cc:	6a 0a                	push   0xa
300018ce:	6a 00                	push   0x0
300018d0:	8d 45 ef             	lea    eax,[ebp-0x11]
300018d3:	50                   	push   eax
300018d4:	e8 c3 fe ff ff       	call   3000179c <memsetI>
300018d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
300018dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300018df:	8d 50 01             	lea    edx,[eax+0x1]
300018e2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300018e5:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '[';
300018ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300018ed:	8d 50 01             	lea    edx,[eax+0x1]
300018f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300018f3:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = '0';
300018f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300018fb:	8d 50 01             	lea    edx,[eax+0x1]
300018fe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001901:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr++] = 'K';
30001906:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001909:	8d 50 01             	lea    edx,[eax+0x1]
3000190c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000190f:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    buff[buffPtr] = '\0';
30001914:	8d 55 ef             	lea    edx,[ebp-0x11]
30001917:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000191a:	01 d0                	add    eax,edx
3000191c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:80
    printI(buff);
3000191f:	83 ec 0c             	sub    esp,0xc
30001922:	8d 45 ef             	lea    eax,[ebp-0x11]
30001925:	50                   	push   eax
30001926:	e8 eb f1 ff ff       	call   30000b16 <printI>
3000192b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
    
    return;
3000192e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:83
}
3000192f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001932:	c9                   	leave  
30001933:	c3                   	ret    

30001934 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
30001934:	55                   	push   ebp
30001935:	89 e5                	mov    ebp,esp
30001937:	53                   	push   ebx
30001938:	83 ec 04             	sub    esp,0x4
3000193b:	e8 c0 15 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
30001940:	81 c3 d8 30 00 00    	add    ebx,0x30d8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
30001946:	83 ec 0c             	sub    esp,0xc
30001949:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000194c:	e8 b4 02 00 00       	call   30001c05 <strlenI>
30001951:	83 c4 10             	add    esp,0x10
30001954:	89 c2                	mov    edx,eax
30001956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001959:	01 d0                	add    eax,edx
3000195b:	83 ec 08             	sub    esp,0x8
3000195e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001961:	50                   	push   eax
30001962:	e8 59 01 00 00       	call   30001ac0 <strcpyI>
30001967:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
3000196a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
3000196d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001970:	c9                   	leave  
30001971:	c3                   	ret    

30001972 <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
30001972:	55                   	push   ebp
30001973:	89 e5                	mov    ebp,esp
30001975:	53                   	push   ebx
30001976:	83 ec 04             	sub    esp,0x4
30001979:	e8 82 15 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
3000197e:	81 c3 9a 30 00 00    	add    ebx,0x309a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
30001984:	83 ec 0c             	sub    esp,0xc
30001987:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000198a:	e8 76 02 00 00       	call   30001c05 <strlenI>
3000198f:	83 c4 10             	add    esp,0x10
30001992:	89 c2                	mov    edx,eax
30001994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001997:	01 d0                	add    eax,edx
30001999:	83 ec 08             	sub    esp,0x8
3000199c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000199f:	50                   	push   eax
300019a0:	e8 1b 01 00 00       	call   30001ac0 <strcpyI>
300019a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
300019a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
300019ab:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300019ae:	c9                   	leave  
300019af:	c3                   	ret    

300019b0 <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
300019b0:	55                   	push   ebp
300019b1:	89 e5                	mov    ebp,esp
300019b3:	83 ec 10             	sub    esp,0x10
300019b6:	e8 1c 15 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300019bb:	05 5d 30 00 00       	add    eax,0x305d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
300019c0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
300019c7:	eb 04                	jmp    300019cd <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
300019c9:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
300019cd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300019d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300019d3:	01 d0                	add    eax,edx
300019d5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019d8:	84 c0                	test   al,al
300019da:	75 ed                	jne    300019c9 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
300019dc:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
300019e3:	eb 1d                	jmp    30001a02 <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
300019e5:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300019e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300019eb:	01 c2                	add    edx,eax
300019ed:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
300019f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300019f3:	01 c8                	add    eax,ecx
300019f5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019f8:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
300019fa:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
300019fe:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
30001a02:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30001a05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001a08:	01 d0                	add    eax,edx
30001a0a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a0d:	84 c0                	test   al,al
30001a0f:	75 d4                	jne    300019e5 <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
30001a11:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001a17:	01 d0                	add    eax,edx
30001a19:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
30001a1c:	90                   	nop
30001a1d:	c9                   	leave  
30001a1e:	c3                   	ret    
30001a1f:	90                   	nop

30001a20 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
30001a20:	55                   	push   ebp
30001a21:	89 e5                	mov    ebp,esp
30001a23:	56                   	push   esi
30001a24:	53                   	push   ebx
30001a25:	83 ec 10             	sub    esp,0x10
30001a28:	e8 aa 14 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001a2d:	05 eb 2f 00 00       	add    eax,0x2feb
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
30001a32:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
30001a35:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
30001a38:	89 d8                	mov    eax,ebx
30001a3a:	8d 58 01             	lea    ebx,[eax+0x1]
30001a3d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a40:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
30001a43:	89 f0                	mov    eax,esi
30001a45:	8d 70 01             	lea    esi,[eax+0x1]
30001a48:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a4b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
30001a4e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
30001a52:	75 0e                	jne    30001a62 <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
30001a54:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
30001a58:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
30001a5c:	29 c2                	sub    edx,eax
30001a5e:	89 d0                	mov    eax,edx
30001a60:	eb 15                	jmp    30001a77 <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
30001a62:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
30001a66:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
30001a69:	74 cd                	je     30001a38 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
30001a6b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
30001a6f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
30001a73:	29 c2                	sub    edx,eax
30001a75:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
30001a77:	83 c4 10             	add    esp,0x10
30001a7a:	5b                   	pop    ebx
30001a7b:	5e                   	pop    esi
30001a7c:	5d                   	pop    ebp
30001a7d:	c3                   	ret    
30001a7e:	66 90                	xchg   ax,ax

30001a80 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
30001a80:	55                   	push   ebp
30001a81:	89 e5                	mov    ebp,esp
30001a83:	83 ec 10             	sub    esp,0x10
30001a86:	e8 4c 14 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001a8b:	05 8d 2f 00 00       	add    eax,0x2f8d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
30001a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001a93:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
30001a96:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
30001a97:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001a9a:	8d 50 01             	lea    edx,[eax+0x1]
30001a9d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001aa0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001aa3:	8d 4a 01             	lea    ecx,[edx+0x1]
30001aa6:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001aa9:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001aac:	88 10                	mov    BYTE PTR [eax],dl
30001aae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ab1:	84 c0                	test   al,al
30001ab3:	75 e2                	jne    30001a97 <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
30001ab5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001ab8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
30001abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
30001abe:	c9                   	leave  
30001abf:	c3                   	ret    

30001ac0 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
30001ac0:	55                   	push   ebp
30001ac1:	89 e5                	mov    ebp,esp
30001ac3:	83 ec 10             	sub    esp,0x10
30001ac6:	e8 0c 14 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001acb:	05 4d 2f 00 00       	add    eax,0x2f4d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
30001ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ad3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
30001ad6:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
30001ad7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001ada:	8d 50 01             	lea    edx,[eax+0x1]
30001add:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001ae0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001ae3:	8d 4a 01             	lea    ecx,[edx+0x1]
30001ae6:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001ae9:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001aec:	88 10                	mov    BYTE PTR [eax],dl
30001aee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001af1:	84 c0                	test   al,al
30001af3:	75 e2                	jne    30001ad7 <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
30001af5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001af8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
30001afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
30001afe:	c9                   	leave  
30001aff:	c3                   	ret    

30001b00 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
30001b00:	55                   	push   ebp
30001b01:	89 e5                	mov    ebp,esp
30001b03:	83 ec 10             	sub    esp,0x10
30001b06:	e8 cc 13 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001b0b:	05 0d 2f 00 00       	add    eax,0x2f0d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
30001b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001b13:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
30001b16:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
30001b17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001b1a:	8d 50 01             	lea    edx,[eax+0x1]
30001b1d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001b20:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001b23:	8d 4a 01             	lea    ecx,[edx+0x1]
30001b26:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001b29:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001b2c:	88 10                	mov    BYTE PTR [eax],dl
30001b2e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b31:	84 c0                	test   al,al
30001b33:	74 0d                	je     30001b42 <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
30001b35:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001b38:	8d 50 ff             	lea    edx,[eax-0x1]
30001b3b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001b3e:	85 c0                	test   eax,eax
30001b40:	75 d5                	jne    30001b17 <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
30001b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
30001b45:	c9                   	leave  
30001b46:	c3                   	ret    
30001b47:	90                   	nop

30001b48 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
30001b48:	55                   	push   ebp
30001b49:	89 e5                	mov    ebp,esp
30001b4b:	83 ec 04             	sub    esp,0x4
30001b4e:	e8 84 13 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001b53:	05 c5 2e 00 00       	add    eax,0x2ec5
30001b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001b5b:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
30001b5e:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
30001b62:	7e 0d                	jle    30001b71 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
30001b64:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
30001b68:	7f 07                	jg     30001b71 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
30001b6a:	b8 01 00 00 00       	mov    eax,0x1
30001b6f:	eb 05                	jmp    30001b76 <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
30001b71:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
30001b76:	c9                   	leave  
30001b77:	c3                   	ret    

30001b78 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
30001b78:	55                   	push   ebp
30001b79:	89 e5                	mov    ebp,esp
30001b7b:	83 ec 10             	sub    esp,0x10
30001b7e:	e8 54 13 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001b83:	05 95 2e 00 00       	add    eax,0x2e95
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
30001b88:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
30001b8f:	eb 27                	jmp    30001bb8 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
30001b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001b94:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b97:	89 c2                	mov    edx,eax
30001b99:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001b9c:	01 d0                	add    eax,edx
30001b9e:	0f be c0             	movsx  eax,al
30001ba1:	50                   	push   eax
30001ba2:	e8 a1 ff ff ff       	call   30001b48 <check_digit>
30001ba7:	83 c4 04             	add    esp,0x4
30001baa:	83 f0 01             	xor    eax,0x1
30001bad:	84 c0                	test   al,al
30001baf:	74 07                	je     30001bb8 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
30001bb1:	b8 00 00 00 00       	mov    eax,0x0
30001bb6:	eb 17                	jmp    30001bcf <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
30001bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001bbb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001bbe:	0f be d0             	movsx  edx,al
30001bc1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001bc4:	01 d0                	add    eax,edx
30001bc6:	85 c0                	test   eax,eax
30001bc8:	75 c7                	jne    30001b91 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
30001bca:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
30001bcf:	c9                   	leave  
30001bd0:	c3                   	ret    
30001bd1:	66 90                	xchg   ax,ax
30001bd3:	90                   	nop

30001bd4 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
30001bd4:	55                   	push   ebp
30001bd5:	89 e5                	mov    ebp,esp
30001bd7:	83 ec 10             	sub    esp,0x10
30001bda:	e8 f8 12 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001bdf:	05 39 2e 00 00       	add    eax,0x2e39
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
30001be4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
30001beb:	eb 04                	jmp    30001bf1 <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
30001bed:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
30001bf1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001bf4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001bf7:	01 d0                	add    eax,edx
30001bf9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001bfc:	84 c0                	test   al,al
30001bfe:	75 ed                	jne    30001bed <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
30001c00:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
30001c03:	c9                   	leave  
30001c04:	c3                   	ret    

30001c05 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
30001c05:	55                   	push   ebp
30001c06:	89 e5                	mov    ebp,esp
30001c08:	83 ec 10             	sub    esp,0x10
30001c0b:	e8 c7 12 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001c10:	05 08 2e 00 00       	add    eax,0x2e08
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
30001c15:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
30001c1c:	eb 04                	jmp    30001c22 <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
30001c1e:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
30001c22:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001c25:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001c28:	01 d0                	add    eax,edx
30001c2a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c2d:	84 c0                	test   al,al
30001c2f:	75 ed                	jne    30001c1e <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
30001c31:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
30001c34:	c9                   	leave  
30001c35:	c3                   	ret    
30001c36:	66 90                	xchg   ax,ax

30001c38 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
30001c38:	55                   	push   ebp
30001c39:	89 e5                	mov    ebp,esp
30001c3b:	e8 97 12 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001c40:	05 d8 2d 00 00       	add    eax,0x2dd8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
30001c45:	eb 4b                	jmp    30001c92 <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
30001c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001c4a:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001c4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001c50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c53:	38 c2                	cmp    dl,al
30001c55:	74 1e                	je     30001c75 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
30001c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001c5a:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001c5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001c60:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c63:	38 c2                	cmp    dl,al
30001c65:	73 07                	jae    30001c6e <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
30001c67:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001c6c:	eb 2f                	jmp    30001c9d <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
30001c6e:	b8 01 00 00 00       	mov    eax,0x1
30001c73:	eb 28                	jmp    30001c9d <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
30001c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001c78:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c7b:	84 c0                	test   al,al
30001c7d:	75 07                	jne    30001c86 <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
30001c7f:	b8 00 00 00 00       	mov    eax,0x0
30001c84:	eb 17                	jmp    30001c9d <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
30001c86:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
30001c8a:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
30001c8e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
30001c92:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001c96:	75 af                	jne    30001c47 <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
30001c98:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
30001c9d:	5d                   	pop    ebp
30001c9e:	c3                   	ret    

30001c9f <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
30001c9f:	55                   	push   ebp
30001ca0:	89 e5                	mov    ebp,esp
30001ca2:	e8 30 12 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001ca7:	05 71 2d 00 00       	add    eax,0x2d71
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
30001cac:	eb 4b                	jmp    30001cf9 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
30001cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001cb1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001cb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001cb7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001cba:	38 c2                	cmp    dl,al
30001cbc:	74 1e                	je     30001cdc <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
30001cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001cc1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001cc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001cc7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001cca:	38 c2                	cmp    dl,al
30001ccc:	73 07                	jae    30001cd5 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
30001cce:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001cd3:	eb 2f                	jmp    30001d04 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
30001cd5:	b8 01 00 00 00       	mov    eax,0x1
30001cda:	eb 28                	jmp    30001d04 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
30001cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001cdf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ce2:	84 c0                	test   al,al
30001ce4:	75 07                	jne    30001ced <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
30001ce6:	b8 00 00 00 00       	mov    eax,0x0
30001ceb:	eb 17                	jmp    30001d04 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
30001ced:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
30001cf1:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
30001cf5:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
30001cf9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001cfd:	75 af                	jne    30001cae <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
30001cff:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
30001d04:	5d                   	pop    ebp
30001d05:	c3                   	ret    
30001d06:	66 90                	xchg   ax,ax

30001d08 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
30001d08:	55                   	push   ebp
30001d09:	89 e5                	mov    ebp,esp
30001d0b:	83 ec 10             	sub    esp,0x10
30001d0e:	e8 c4 11 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001d13:	05 05 2d 00 00       	add    eax,0x2d05
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
30001d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d1b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
30001d1e:	eb 1b                	jmp    30001d3b <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
30001d20:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001d23:	8d 50 01             	lea    edx,[eax+0x1]
30001d26:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001d29:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001d2c:	8d 4a 01             	lea    ecx,[edx+0x1]
30001d2f:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001d32:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001d35:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
30001d37:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
30001d3b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001d3f:	74 1c                	je     30001d5d <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
30001d41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001d44:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d47:	84 c0                	test   al,al
30001d49:	75 d5                	jne    30001d20 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001d4b:	eb 10                	jmp    30001d5d <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
30001d4d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001d50:	8d 50 01             	lea    edx,[eax+0x1]
30001d53:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001d56:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
30001d59:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001d5d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001d61:	75 ea                	jne    30001d4d <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
30001d63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
30001d66:	c9                   	leave  
30001d67:	c3                   	ret    

30001d68 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
30001d68:	55                   	push   ebp
30001d69:	89 e5                	mov    ebp,esp
30001d6b:	e8 67 11 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001d70:	05 a8 2c 00 00       	add    eax,0x2ca8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
30001d75:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30001d78:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001d7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001d7e:	e8 85 ff ff ff       	call   30001d08 <strncpyI>
30001d83:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
30001d86:	c9                   	leave  
30001d87:	c3                   	ret    

30001d88 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
30001d88:	55                   	push   ebp
30001d89:	89 e5                	mov    ebp,esp
30001d8b:	57                   	push   edi
30001d8c:	56                   	push   esi
30001d8d:	53                   	push   ebx
30001d8e:	83 ec 08             	sub    esp,0x8
30001d91:	e8 41 11 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001d96:	05 82 2c 00 00       	add    eax,0x2c82
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
30001d9b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001d9e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
30001da5:	89 f0                	mov    eax,esi
30001da7:	8d 70 01             	lea    esi,[eax+0x1]
30001daa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001dad:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
30001db0:	83 fb 20             	cmp    ebx,0x20
30001db3:	74 f0                	je     30001da5 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
30001db5:	83 fb 2d             	cmp    ebx,0x2d
30001db8:	75 14                	jne    30001dce <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
30001dba:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
30001dc1:	89 f0                	mov    eax,esi
30001dc3:	8d 70 01             	lea    esi,[eax+0x1]
30001dc6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001dc9:	0f be d8             	movsx  ebx,al
30001dcc:	eb 10                	jmp    30001dde <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
30001dce:	83 fb 2b             	cmp    ebx,0x2b
30001dd1:	75 0b                	jne    30001dde <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
30001dd3:	89 f0                	mov    eax,esi
30001dd5:	8d 70 01             	lea    esi,[eax+0x1]
30001dd8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ddb:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
30001dde:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001de2:	74 06                	je     30001dea <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
30001de4:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001de8:	75 26                	jne    30001e10 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
30001dea:	83 fb 30             	cmp    ebx,0x30
30001ded:	75 21                	jne    30001e10 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001def:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001df2:	3c 78                	cmp    al,0x78
30001df4:	74 07                	je     30001dfd <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
30001df6:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001df9:	3c 58                	cmp    al,0x58
30001dfb:	75 13                	jne    30001e10 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
30001dfd:	8d 46 01             	lea    eax,[esi+0x1]
30001e00:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001e03:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
30001e06:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
30001e09:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
30001e10:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001e14:	75 14                	jne    30001e2a <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
30001e16:	83 fb 30             	cmp    ebx,0x30
30001e19:	75 07                	jne    30001e22 <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
30001e1b:	b8 08 00 00 00       	mov    eax,0x8
30001e20:	eb 05                	jmp    30001e27 <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
30001e22:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
30001e27:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
30001e2a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001e2d:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001e32:	ba 00 00 00 00       	mov    edx,0x0
30001e37:	f7 f1                	div    ecx
30001e39:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
30001e3c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001e3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001e44:	ba 00 00 00 00       	mov    edx,0x0
30001e49:	f7 f1                	div    ecx
30001e4b:	89 d0                	mov    eax,edx
30001e4d:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
30001e4f:	bf 00 00 00 00       	mov    edi,0x0
30001e54:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
30001e59:	8d 43 d0             	lea    eax,[ebx-0x30]
30001e5c:	83 f8 09             	cmp    eax,0x9
30001e5f:	77 05                	ja     30001e66 <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
30001e61:	83 eb 30             	sub    ebx,0x30
30001e64:	eb 25                	jmp    30001e8b <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
30001e66:	89 d8                	mov    eax,ebx
30001e68:	83 c8 20             	or     eax,0x20
30001e6b:	83 e8 61             	sub    eax,0x61
30001e6e:	83 f8 19             	cmp    eax,0x19
30001e71:	77 56                	ja     30001ec9 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001e73:	83 fb 40             	cmp    ebx,0x40
30001e76:	7e 0c                	jle    30001e84 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
30001e78:	83 fb 5a             	cmp    ebx,0x5a
30001e7b:	7f 07                	jg     30001e84 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
30001e7d:	b8 37 00 00 00       	mov    eax,0x37
30001e82:	eb 05                	jmp    30001e89 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
30001e84:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
30001e89:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
30001e8b:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001e8e:	7d 3c                	jge    30001ecc <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001e90:	89 c8                	mov    eax,ecx
30001e92:	85 c0                	test   eax,eax
30001e94:	78 10                	js     30001ea6 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
30001e96:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001e99:	77 0b                	ja     30001ea6 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
30001e9b:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001e9e:	75 0d                	jne    30001ead <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
30001ea0:	89 d0                	mov    eax,edx
30001ea2:	39 c3                	cmp    ebx,eax
30001ea4:	7e 07                	jle    30001ead <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
30001ea6:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001eab:	eb 0f                	jmp    30001ebc <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
30001ead:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
30001eb2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001eb5:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
30001eb8:	89 d8                	mov    eax,ebx
30001eba:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001ebc:	89 f0                	mov    eax,esi
30001ebe:	8d 70 01             	lea    esi,[eax+0x1]
30001ec1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ec4:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001ec7:	eb 90                	jmp    30001e59 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001ec9:	90                   	nop
30001eca:	eb 01                	jmp    30001ecd <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
30001ecc:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001ecd:	89 c8                	mov    eax,ecx
30001ecf:	85 c0                	test   eax,eax
30001ed1:	79 07                	jns    30001eda <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
30001ed3:	bf ff ff ff ff       	mov    edi,0xffffffff
30001ed8:	eb 08                	jmp    30001ee2 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
30001eda:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001ede:	74 02                	je     30001ee2 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
30001ee0:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
30001ee2:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001ee6:	74 13                	je     30001efb <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
30001ee8:	89 c8                	mov    eax,ecx
30001eea:	85 c0                	test   eax,eax
30001eec:	74 05                	je     30001ef3 <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
30001eee:	8d 46 ff             	lea    eax,[esi-0x1]
30001ef1:	eb 03                	jmp    30001ef6 <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
30001ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
30001ef6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001ef9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
30001efb:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
30001efd:	83 c4 08             	add    esp,0x8
30001f00:	5b                   	pop    ebx
30001f01:	5e                   	pop    esi
30001f02:	5f                   	pop    edi
30001f03:	5d                   	pop    ebp
30001f04:	c3                   	ret    
30001f05:	66 90                	xchg   ax,ax
30001f07:	90                   	nop

30001f08 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
30001f08:	55                   	push   ebp
30001f09:	89 e5                	mov    ebp,esp
30001f0b:	e8 c7 0f 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001f10:	05 08 2b 00 00       	add    eax,0x2b08
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
30001f15:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001f1b:	01 d0                	add    eax,edx
30001f1d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
30001f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
30001f23:	5d                   	pop    ebp
30001f24:	c3                   	ret    
30001f25:	66 90                	xchg   ax,ax
30001f27:	90                   	nop

30001f28 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
30001f28:	55                   	push   ebp
30001f29:	89 e5                	mov    ebp,esp
30001f2b:	57                   	push   edi
30001f2c:	56                   	push   esi
30001f2d:	53                   	push   ebx
30001f2e:	83 ec 0c             	sub    esp,0xc
30001f31:	e8 a1 0f 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30001f36:	05 e2 2a 00 00       	add    eax,0x2ae2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
30001f3b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001f3e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
30001f45:	89 f0                	mov    eax,esi
30001f47:	8d 70 01             	lea    esi,[eax+0x1]
30001f4a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001f4d:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
30001f50:	83 fb 20             	cmp    ebx,0x20
30001f53:	74 f0                	je     30001f45 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
30001f55:	83 fb 2d             	cmp    ebx,0x2d
30001f58:	75 14                	jne    30001f6e <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
30001f5a:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
30001f61:	89 f0                	mov    eax,esi
30001f63:	8d 70 01             	lea    esi,[eax+0x1]
30001f66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001f69:	0f be d8             	movsx  ebx,al
30001f6c:	eb 10                	jmp    30001f7e <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
30001f6e:	83 fb 2b             	cmp    ebx,0x2b
30001f71:	75 0b                	jne    30001f7e <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
30001f73:	89 f0                	mov    eax,esi
30001f75:	8d 70 01             	lea    esi,[eax+0x1]
30001f78:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001f7b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
30001f7e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001f82:	74 06                	je     30001f8a <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
30001f84:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001f88:	75 26                	jne    30001fb0 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
30001f8a:	83 fb 30             	cmp    ebx,0x30
30001f8d:	75 21                	jne    30001fb0 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001f8f:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001f92:	3c 78                	cmp    al,0x78
30001f94:	74 07                	je     30001f9d <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
30001f96:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001f99:	3c 58                	cmp    al,0x58
30001f9b:	75 13                	jne    30001fb0 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
30001f9d:	8d 46 01             	lea    eax,[esi+0x1]
30001fa0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001fa3:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
30001fa6:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
30001fa9:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
30001fb0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001fb4:	75 14                	jne    30001fca <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
30001fb6:	83 fb 30             	cmp    ebx,0x30
30001fb9:	75 07                	jne    30001fc2 <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
30001fbb:	b8 08 00 00 00       	mov    eax,0x8
30001fc0:	eb 05                	jmp    30001fc7 <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
30001fc2:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
30001fc7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
30001fca:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001fce:	74 07                	je     30001fd7 <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
30001fd0:	b8 00 00 00 80       	mov    eax,0x80000000
30001fd5:	eb 05                	jmp    30001fdc <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
30001fd7:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
30001fdc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001fdf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001fe2:	ba 00 00 00 00       	mov    edx,0x0
30001fe7:	f7 f1                	div    ecx
30001fe9:	89 d1                	mov    ecx,edx
30001feb:	89 c8                	mov    eax,ecx
30001fed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
30001ff0:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
30001ff3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001ff6:	ba 00 00 00 00       	mov    edx,0x0
30001ffb:	f7 f7                	div    edi
30001ffd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
30002000:	bf 00 00 00 00       	mov    edi,0x0
30002005:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
3000200a:	8d 43 d0             	lea    eax,[ebx-0x30]
3000200d:	83 f8 09             	cmp    eax,0x9
30002010:	77 05                	ja     30002017 <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
30002012:	83 eb 30             	sub    ebx,0x30
30002015:	eb 25                	jmp    3000203c <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
30002017:	89 d8                	mov    eax,ebx
30002019:	83 c8 20             	or     eax,0x20
3000201c:	83 e8 61             	sub    eax,0x61
3000201f:	83 f8 19             	cmp    eax,0x19
30002022:	77 55                	ja     30002079 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30002024:	83 fb 40             	cmp    ebx,0x40
30002027:	7e 0c                	jle    30002035 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
30002029:	83 fb 5a             	cmp    ebx,0x5a
3000202c:	7f 07                	jg     30002035 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
3000202e:	b8 37 00 00 00       	mov    eax,0x37
30002033:	eb 05                	jmp    3000203a <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
30002035:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
3000203a:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
3000203c:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
3000203f:	7d 3b                	jge    3000207c <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30002041:	89 c8                	mov    eax,ecx
30002043:	85 c0                	test   eax,eax
30002045:	78 0f                	js     30002056 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
30002047:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
3000204a:	77 0a                	ja     30002056 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
3000204c:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
3000204f:	75 0c                	jne    3000205d <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
30002051:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
30002054:	7e 07                	jle    3000205d <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
30002056:	b9 ff ff ff ff       	mov    ecx,0xffffffff
3000205b:	eb 0f                	jmp    3000206c <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
3000205d:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
30002062:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30002065:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
30002068:	89 d8                	mov    eax,ebx
3000206a:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
3000206c:	89 f0                	mov    eax,esi
3000206e:	8d 70 01             	lea    esi,[eax+0x1]
30002071:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30002074:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30002077:	eb 91                	jmp    3000200a <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30002079:	90                   	nop
3000207a:	eb 01                	jmp    3000207d <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
3000207c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
3000207d:	89 c8                	mov    eax,ecx
3000207f:	85 c0                	test   eax,eax
30002081:	79 16                	jns    30002099 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
30002083:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30002087:	74 07                	je     30002090 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
30002089:	b8 00 00 00 80       	mov    eax,0x80000000
3000208e:	eb 05                	jmp    30002095 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
30002090:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
30002095:	89 c7                	mov    edi,eax
30002097:	eb 08                	jmp    300020a1 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
30002099:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000209d:	74 02                	je     300020a1 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
3000209f:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
300020a1:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
300020a5:	74 13                	je     300020ba <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
300020a7:	89 c8                	mov    eax,ecx
300020a9:	85 c0                	test   eax,eax
300020ab:	74 05                	je     300020b2 <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
300020ad:	8d 46 ff             	lea    eax,[esi-0x1]
300020b0:	eb 03                	jmp    300020b5 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
300020b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
300020b5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300020b8:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
300020ba:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
300020bc:	83 c4 0c             	add    esp,0xc
300020bf:	5b                   	pop    ebx
300020c0:	5e                   	pop    esi
300020c1:	5f                   	pop    edi
300020c2:	5d                   	pop    ebp
300020c3:	c3                   	ret    

300020c4 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
300020c4:	55                   	push   ebp
300020c5:	89 e5                	mov    ebp,esp
300020c7:	53                   	push   ebx
300020c8:	83 ec 14             	sub    esp,0x14
300020cb:	e8 07 0e 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300020d0:	05 48 29 00 00       	add    eax,0x2948
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
300020d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300020d8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300020db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300020de:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
300020e1:	eb 04                	jmp    300020e7 <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
300020e3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
300020e7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300020ea:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300020ed:	80 fa 20             	cmp    dl,0x20
300020f0:	74 f1                	je     300020e3 <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
300020f2:	83 ec 0c             	sub    esp,0xc
300020f5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
300020f8:	89 c3                	mov    ebx,eax
300020fa:	e8 06 fb ff ff       	call   30001c05 <strlenI>
300020ff:	83 c4 10             	add    esp,0x10
30002102:	8d 50 ff             	lea    edx,[eax-0x1]
30002105:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002108:	01 d0                	add    eax,edx
3000210a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
3000210d:	eb 0c                	jmp    3000211b <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
3000210f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002112:	8d 50 ff             	lea    edx,[eax-0x1]
30002115:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
30002118:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
3000211b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000211e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30002121:	76 0a                	jbe    3000212d <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
30002123:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002126:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30002129:	3c 20                	cmp    al,0x20
3000212b:	74 e2                	je     3000210f <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
3000212d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002130:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30002133:	74 1f                	je     30002154 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
30002135:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
30002136:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30002139:	8d 50 01             	lea    edx,[eax+0x1]
3000213c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000213f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30002142:	8d 4a 01             	lea    ecx,[edx+0x1]
30002145:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
30002148:	0f b6 12             	movzx  edx,BYTE PTR [edx]
3000214b:	88 10                	mov    BYTE PTR [eax],dl
3000214d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30002150:	84 c0                	test   al,al
30002152:	75 e2                	jne    30002136 <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
30002154:	90                   	nop
30002155:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30002158:	c9                   	leave  
30002159:	c3                   	ret    

3000215a <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
3000215a:	55                   	push   ebp
3000215b:	89 e5                	mov    ebp,esp
3000215d:	83 ec 08             	sub    esp,0x8
30002160:	e8 72 0d 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30002165:	05 b3 28 00 00       	add    eax,0x28b3
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
3000216a:	83 ec 0c             	sub    esp,0xc
3000216d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002170:	e8 4f ff ff ff       	call   300020c4 <strtrimI>
30002175:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
30002178:	c9                   	leave  
30002179:	c3                   	ret    
3000217a:	66 90                	xchg   ax,ax

3000217c <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strstrI(char* string, char* substring)
{
3000217c:	55                   	push   ebp
3000217d:	89 e5                	mov    ebp,esp
3000217f:	56                   	push   esi
30002180:	53                   	push   ebx
30002181:	e8 51 0d 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30002186:	05 92 28 00 00       	add    eax,0x2892
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
3000218b:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    if (*b == 0) {
3000218e:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30002191:	84 c0                	test   al,al
30002193:	75 42                	jne    300021d7 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
	return string;
30002195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002198:	eb 4c                	jmp    300021e6 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
3000219a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000219d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300021a0:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300021a3:	38 c2                	cmp    dl,al
300021a5:	75 2b                	jne    300021d2 <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
	    continue;
	}
	a = string;
300021a7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	while (1) {
	    if (*b == 0) {
300021aa:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300021ad:	84 c0                	test   al,al
300021af:	75 05                	jne    300021b6 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
		return string;
300021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300021b4:	eb 30                	jmp    300021e6 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	    }
	    if (*a++ != *b++) {
300021b6:	89 f0                	mov    eax,esi
300021b8:	8d 70 01             	lea    esi,[eax+0x1]
300021bb:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300021be:	89 d8                	mov    eax,ebx
300021c0:	8d 58 01             	lea    ebx,[eax+0x1]
300021c3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300021c6:	38 c2                	cmp    dl,al
300021c8:	75 02                	jne    300021cc <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
		break;
	    }
	}
300021ca:	eb de                	jmp    300021aa <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
300021cc:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
	}
	b = substring;
300021cd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
300021d0:	eb 01                	jmp    300021d3 <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
300021d2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
300021d3:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64 (discriminator 1)
300021d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300021da:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300021dd:	84 c0                	test   al,al
300021df:	75 b9                	jne    3000219a <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
300021e1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
}
300021e6:	5b                   	pop    ebx
300021e7:	5e                   	pop    esi
300021e8:	5d                   	pop    ebp
300021e9:	c3                   	ret    

300021ea <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83

VISIBLE char* strstr(char* string, char* substring)
{
300021ea:	55                   	push   ebp
300021eb:	89 e5                	mov    ebp,esp
300021ed:	e8 e5 0c 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300021f2:	05 26 28 00 00       	add    eax,0x2826
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
    return strstrI(string, substring);
300021f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300021fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300021fd:	e8 7a ff ff ff       	call   3000217c <strstrI>
30002202:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
30002205:	c9                   	leave  
30002206:	c3                   	ret    
30002207:	90                   	nop

30002208 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:23
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
30002208:	55                   	push   ebp
30002209:	89 e5                	mov    ebp,esp
3000220b:	56                   	push   esi
3000220c:	53                   	push   ebx
3000220d:	83 ec 10             	sub    esp,0x10
30002210:	e8 c2 0c 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30002215:	05 03 28 00 00       	add    eax,0x2803
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
    uint32_t retVal=0;
3000221a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    GET_TICKS(retVal);
30002221:	b8 70 01 00 00       	mov    eax,0x170
30002226:	bb 00 00 00 00       	mov    ebx,0x0
3000222b:	b9 00 00 00 00       	mov    ecx,0x0
30002230:	ba 00 00 00 00       	mov    edx,0x0
30002235:	be 00 00 00 00       	mov    esi,0x0
3000223a:	e8 fc ff ff ff       	call   3000223b <getticks+0x33>
3000223f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    return (time_t)retVal;
30002242:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
}
30002245:	83 c4 10             	add    esp,0x10
30002248:	5b                   	pop    ebx
30002249:	5e                   	pop    esi
3000224a:	5d                   	pop    ebp
3000224b:	c3                   	ret    

3000224c <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
3000224c:	55                   	push   ebp
3000224d:	89 e5                	mov    ebp,esp
3000224f:	53                   	push   ebx
30002250:	83 ec 10             	sub    esp,0x10
30002253:	e8 a8 0c 00 00       	call   30002f00 <__x86.get_pc_thunk.bx>
30002258:	81 c3 c0 27 00 00    	add    ebx,0x27c0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32
  time_t time = *timer;
3000225e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002261:	8b 00                	mov    eax,DWORD PTR [eax]
30002263:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:34
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
30002266:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36

  dayclock = (unsigned long) time % SECS_DAY;
3000226d:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
30002270:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30002275:	89 c8                	mov    eax,ecx
30002277:	f7 e2                	mul    edx
30002279:	89 d0                	mov    eax,edx
3000227b:	c1 e8 10             	shr    eax,0x10
3000227e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30002281:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002284:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
3000228a:	29 c1                	sub    ecx,eax
3000228c:	89 c8                	mov    eax,ecx
3000228e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37
  dayno = (unsigned long) time / SECS_DAY;
30002291:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002294:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30002299:	f7 e2                	mul    edx
3000229b:	89 d0                	mov    eax,edx
3000229d:	c1 e8 10             	shr    eax,0x10
300022a0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:39

  tmbuf->tm_sec = dayclock % 60;
300022a3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
300022a6:	ba 89 88 88 88       	mov    edx,0x88888889
300022ab:	89 c8                	mov    eax,ecx
300022ad:	f7 e2                	mul    edx
300022af:	89 d0                	mov    eax,edx
300022b1:	c1 e8 05             	shr    eax,0x5
300022b4:	89 c2                	mov    edx,eax
300022b6:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
300022bd:	89 c2                	mov    edx,eax
300022bf:	89 d0                	mov    eax,edx
300022c1:	c1 e0 04             	shl    eax,0x4
300022c4:	29 d0                	sub    eax,edx
300022c6:	29 c1                	sub    ecx,eax
300022c8:	89 c8                	mov    eax,ecx
300022ca:	89 c2                	mov    edx,eax
300022cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300022cf:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40
  tmbuf->tm_min = (dayclock % 3600) / 60;
300022d1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
300022d4:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
300022d9:	89 c8                	mov    eax,ecx
300022db:	f7 e2                	mul    edx
300022dd:	89 d0                	mov    eax,edx
300022df:	c1 e8 0b             	shr    eax,0xb
300022e2:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
300022e8:	29 c1                	sub    ecx,eax
300022ea:	89 c8                	mov    eax,ecx
300022ec:	ba 89 88 88 88       	mov    edx,0x88888889
300022f1:	f7 e2                	mul    edx
300022f3:	89 d0                	mov    eax,edx
300022f5:	c1 e8 05             	shr    eax,0x5
300022f8:	89 c2                	mov    edx,eax
300022fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300022fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_hour = dayclock / 3600;
30002300:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002303:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30002308:	f7 e2                	mul    edx
3000230a:	89 d0                	mov    eax,edx
3000230c:	c1 e8 0b             	shr    eax,0xb
3000230f:	89 c2                	mov    edx,eax
30002311:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002314:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
30002317:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
3000231a:	8d 48 04             	lea    ecx,[eax+0x4]
3000231d:	ba 25 49 92 24       	mov    edx,0x24924925
30002322:	89 c8                	mov    eax,ecx
30002324:	f7 e2                	mul    edx
30002326:	89 c8                	mov    eax,ecx
30002328:	29 d0                	sub    eax,edx
3000232a:	d1 e8                	shr    eax,1
3000232c:	01 d0                	add    eax,edx
3000232e:	c1 e8 02             	shr    eax,0x2
30002331:	89 c2                	mov    edx,eax
30002333:	c1 e2 03             	shl    edx,0x3
30002336:	29 c2                	sub    edx,eax
30002338:	89 c8                	mov    eax,ecx
3000233a:	29 d0                	sub    eax,edx
3000233c:	89 c2                	mov    edx,eax
3000233e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002341:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30002344:	eb 66                	jmp    300023ac <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
    dayno -= YEARSIZE(year);
30002346:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30002349:	83 e0 03             	and    eax,0x3
3000234c:	85 c0                	test   eax,eax
3000234e:	75 50                	jne    300023a0 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
30002350:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002353:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002358:	89 c8                	mov    eax,ecx
3000235a:	f7 ea                	imul   edx
3000235c:	c1 fa 05             	sar    edx,0x5
3000235f:	89 c8                	mov    eax,ecx
30002361:	c1 f8 1f             	sar    eax,0x1f
30002364:	29 c2                	sub    edx,eax
30002366:	89 d0                	mov    eax,edx
30002368:	6b c0 64             	imul   eax,eax,0x64
3000236b:	29 c1                	sub    ecx,eax
3000236d:	89 c8                	mov    eax,ecx
3000236f:	85 c0                	test   eax,eax
30002371:	75 26                	jne    30002399 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
30002373:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002376:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000237b:	89 c8                	mov    eax,ecx
3000237d:	f7 ea                	imul   edx
3000237f:	c1 fa 07             	sar    edx,0x7
30002382:	89 c8                	mov    eax,ecx
30002384:	c1 f8 1f             	sar    eax,0x1f
30002387:	29 c2                	sub    edx,eax
30002389:	89 d0                	mov    eax,edx
3000238b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002391:	29 c1                	sub    ecx,eax
30002393:	89 c8                	mov    eax,ecx
30002395:	85 c0                	test   eax,eax
30002397:	75 07                	jne    300023a0 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
30002399:	b8 6e 01 00 00       	mov    eax,0x16e
3000239e:	eb 05                	jmp    300023a5 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
300023a0:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
300023a5:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
    year++;
300023a8:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
300023ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300023af:	83 e0 03             	and    eax,0x3
300023b2:	85 c0                	test   eax,eax
300023b4:	75 50                	jne    30002406 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 1)
300023b6:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300023b9:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300023be:	89 c8                	mov    eax,ecx
300023c0:	f7 ea                	imul   edx
300023c2:	c1 fa 05             	sar    edx,0x5
300023c5:	89 c8                	mov    eax,ecx
300023c7:	c1 f8 1f             	sar    eax,0x1f
300023ca:	29 c2                	sub    edx,eax
300023cc:	89 d0                	mov    eax,edx
300023ce:	6b c0 64             	imul   eax,eax,0x64
300023d1:	29 c1                	sub    ecx,eax
300023d3:	89 c8                	mov    eax,ecx
300023d5:	85 c0                	test   eax,eax
300023d7:	75 26                	jne    300023ff <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 4)
300023d9:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300023dc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300023e1:	89 c8                	mov    eax,ecx
300023e3:	f7 ea                	imul   edx
300023e5:	c1 fa 07             	sar    edx,0x7
300023e8:	89 c8                	mov    eax,ecx
300023ea:	c1 f8 1f             	sar    eax,0x1f
300023ed:	29 c2                	sub    edx,eax
300023ef:	89 d0                	mov    eax,edx
300023f1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300023f7:	29 c1                	sub    ecx,eax
300023f9:	89 c8                	mov    eax,ecx
300023fb:	85 c0                	test   eax,eax
300023fd:	75 07                	jne    30002406 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 5)
300023ff:	b8 6e 01 00 00       	mov    eax,0x16e
30002404:	eb 05                	jmp    3000240b <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 6)
30002406:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 8)
3000240b:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
3000240e:	0f 86 32 ff ff ff    	jbe    30002346 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
30002414:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30002417:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
3000241d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002420:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
  tmbuf->tm_yday = dayno;
30002423:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30002426:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002429:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_mon = 0;
3000242c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000242f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
30002436:	e9 89 00 00 00       	jmp    300024c4 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
3000243b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000243e:	83 e0 03             	and    eax,0x3
30002441:	85 c0                	test   eax,eax
30002443:	75 50                	jne    30002495 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
30002445:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002448:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000244d:	89 c8                	mov    eax,ecx
3000244f:	f7 ea                	imul   edx
30002451:	c1 fa 05             	sar    edx,0x5
30002454:	89 c8                	mov    eax,ecx
30002456:	c1 f8 1f             	sar    eax,0x1f
30002459:	29 c2                	sub    edx,eax
3000245b:	89 d0                	mov    eax,edx
3000245d:	6b c0 64             	imul   eax,eax,0x64
30002460:	29 c1                	sub    ecx,eax
30002462:	89 c8                	mov    eax,ecx
30002464:	85 c0                	test   eax,eax
30002466:	75 26                	jne    3000248e <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
30002468:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
3000246b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002470:	89 c8                	mov    eax,ecx
30002472:	f7 ea                	imul   edx
30002474:	c1 fa 07             	sar    edx,0x7
30002477:	89 c8                	mov    eax,ecx
30002479:	c1 f8 1f             	sar    eax,0x1f
3000247c:	29 c2                	sub    edx,eax
3000247e:	89 d0                	mov    eax,edx
30002480:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002486:	29 c1                	sub    ecx,eax
30002488:	89 c8                	mov    eax,ecx
3000248a:	85 c0                	test   eax,eax
3000248c:	75 07                	jne    30002495 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
3000248e:	ba 01 00 00 00       	mov    edx,0x1
30002493:	eb 05                	jmp    3000249a <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
30002495:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
3000249a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000249d:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
300024a0:	89 d0                	mov    eax,edx
300024a2:	01 c0                	add    eax,eax
300024a4:	01 d0                	add    eax,edx
300024a6:	c1 e0 02             	shl    eax,0x2
300024a9:	01 c8                	add    eax,ecx
300024ab:	8b 84 83 48 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2b8]
300024b2:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
    tmbuf->tm_mon++;
300024b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300024b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300024bb:	8d 50 01             	lea    edx,[eax+0x1]
300024be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300024c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
300024c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300024c7:	83 e0 03             	and    eax,0x3
300024ca:	85 c0                	test   eax,eax
300024cc:	75 50                	jne    3000251e <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 1)
300024ce:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300024d1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300024d6:	89 c8                	mov    eax,ecx
300024d8:	f7 ea                	imul   edx
300024da:	c1 fa 05             	sar    edx,0x5
300024dd:	89 c8                	mov    eax,ecx
300024df:	c1 f8 1f             	sar    eax,0x1f
300024e2:	29 c2                	sub    edx,eax
300024e4:	89 d0                	mov    eax,edx
300024e6:	6b c0 64             	imul   eax,eax,0x64
300024e9:	29 c1                	sub    ecx,eax
300024eb:	89 c8                	mov    eax,ecx
300024ed:	85 c0                	test   eax,eax
300024ef:	75 26                	jne    30002517 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 4)
300024f1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300024f4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300024f9:	89 c8                	mov    eax,ecx
300024fb:	f7 ea                	imul   edx
300024fd:	c1 fa 07             	sar    edx,0x7
30002500:	89 c8                	mov    eax,ecx
30002502:	c1 f8 1f             	sar    eax,0x1f
30002505:	29 c2                	sub    edx,eax
30002507:	89 d0                	mov    eax,edx
30002509:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000250f:	29 c1                	sub    ecx,eax
30002511:	89 c8                	mov    eax,ecx
30002513:	85 c0                	test   eax,eax
30002515:	75 07                	jne    3000251e <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 5)
30002517:	ba 01 00 00 00       	mov    edx,0x1
3000251c:	eb 05                	jmp    30002523 <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 6)
3000251e:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 8)
30002523:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002526:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
30002529:	89 d0                	mov    eax,edx
3000252b:	01 c0                	add    eax,eax
3000252d:	01 d0                	add    eax,edx
3000252f:	c1 e0 02             	shl    eax,0x2
30002532:	01 c8                	add    eax,ecx
30002534:	8b 84 83 48 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2b8]
3000253b:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
3000253e:	0f 86 f7 fe ff ff    	jbe    3000243b <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
30002544:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30002547:	83 c0 01             	add    eax,0x1
3000254a:	89 c2                	mov    edx,eax
3000254c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000254f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
  tmbuf->tm_isdst = 0;
30002552:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002555:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  return tmbuf;
3000255c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
}
3000255f:	83 c4 10             	add    esp,0x10
30002562:	5b                   	pop    ebx
30002563:	5d                   	pop    ebp
30002564:	c3                   	ret    

30002565 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
30002565:	55                   	push   ebp
30002566:	89 e5                	mov    ebp,esp
30002568:	e8 6a 09 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
3000256d:	05 ab 24 00 00       	add    eax,0x24ab
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
    return gmtime_rI(timer, tmbuf);
30002572:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30002575:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002578:	e8 cf fc ff ff       	call   3000224c <gmtime_rI>
3000257d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
}
30002580:	c9                   	leave  
30002581:	c3                   	ret    

30002582 <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *localtime(const time_t *timer) {
30002582:	55                   	push   ebp
30002583:	89 e5                	mov    ebp,esp
30002585:	53                   	push   ebx
30002586:	83 ec 34             	sub    esp,0x34
30002589:	e8 49 09 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
3000258e:	05 8a 24 00 00       	add    eax,0x248a
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
  struct tm tmbuf;
  
  t = *timer - libcTZ;
30002593:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002596:	8b 0a                	mov    ecx,DWORD PTR [edx]
30002598:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
3000259e:	8b 12                	mov    edx,DWORD PTR [edx]
300025a0:	29 d1                	sub    ecx,edx
300025a2:	89 ca                	mov    edx,ecx
300025a4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_r(&t, &tmbuf);
300025a7:	83 ec 08             	sub    esp,0x8
300025aa:	8d 55 c8             	lea    edx,[ebp-0x38]
300025ad:	52                   	push   edx
300025ae:	8d 55 f4             	lea    edx,[ebp-0xc]
300025b1:	52                   	push   edx
300025b2:	89 c3                	mov    ebx,eax
300025b4:	e8 37 09 00 00       	call   30002ef0 <__x86.get_pc_thunk.ax+0x19>
300025b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
300025bc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300025bf:	c9                   	leave  
300025c0:	c3                   	ret    

300025c1 <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
300025c1:	55                   	push   ebp
300025c2:	89 e5                	mov    ebp,esp
300025c4:	83 ec 10             	sub    esp,0x10
300025c7:	e8 0b 09 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300025cc:	05 4c 24 00 00       	add    eax,0x244c
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
300025d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300025d4:	8b 12                	mov    edx,DWORD PTR [edx]
300025d6:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
300025dc:	8b 00                	mov    eax,DWORD PTR [eax]
300025de:	29 c2                	sub    edx,eax
300025e0:	89 d0                	mov    eax,edx
300025e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
300025e5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300025e8:	8d 45 fc             	lea    eax,[ebp-0x4]
300025eb:	50                   	push   eax
300025ec:	e8 5b fc ff ff       	call   3000224c <gmtime_rI>
300025f1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
300025f4:	c9                   	leave  
300025f5:	c3                   	ret    

300025f6 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
300025f6:	55                   	push   ebp
300025f7:	89 e5                	mov    ebp,esp
300025f9:	e8 d9 08 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
300025fe:	05 1a 24 00 00       	add    eax,0x241a
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
30002603:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30002606:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002609:	e8 b3 ff ff ff       	call   300025c1 <localtime_rI>
3000260e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
30002611:	c9                   	leave  
30002612:	c3                   	ret    

30002613 <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
30002613:	55                   	push   ebp
30002614:	89 e5                	mov    ebp,esp
30002616:	57                   	push   edi
30002617:	56                   	push   esi
30002618:	53                   	push   ebx
30002619:	83 ec 20             	sub    esp,0x20
3000261c:	e8 e3 08 00 00       	call   30002f04 <__x86.get_pc_thunk.cx>
30002621:	81 c1 f7 23 00 00    	add    ecx,0x23f7
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
30002627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000262a:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
3000262d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002630:	8b 18                	mov    ebx,DWORD PTR [eax]
30002632:	ba 89 88 88 88       	mov    edx,0x88888889
30002637:	89 d8                	mov    eax,ebx
30002639:	f7 ea                	imul   edx
3000263b:	8d 04 1a             	lea    eax,[edx+ebx*1]
3000263e:	c1 f8 05             	sar    eax,0x5
30002641:	89 c2                	mov    edx,eax
30002643:	89 d8                	mov    eax,ebx
30002645:	c1 f8 1f             	sar    eax,0x1f
30002648:	29 c2                	sub    edx,eax
3000264a:	89 d0                	mov    eax,edx
3000264c:	8d 14 06             	lea    edx,[esi+eax*1]
3000264f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002652:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
30002655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002658:	8b 18                	mov    ebx,DWORD PTR [eax]
3000265a:	ba 89 88 88 88       	mov    edx,0x88888889
3000265f:	89 d8                	mov    eax,ebx
30002661:	f7 ea                	imul   edx
30002663:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002666:	c1 f8 05             	sar    eax,0x5
30002669:	89 c2                	mov    edx,eax
3000266b:	89 d8                	mov    eax,ebx
3000266d:	c1 f8 1f             	sar    eax,0x1f
30002670:	29 c2                	sub    edx,eax
30002672:	89 d0                	mov    eax,edx
30002674:	89 c2                	mov    edx,eax
30002676:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
3000267d:	89 c2                	mov    edx,eax
3000267f:	89 d0                	mov    eax,edx
30002681:	c1 e0 04             	shl    eax,0x4
30002684:	29 d0                	sub    eax,edx
30002686:	29 c3                	sub    ebx,eax
30002688:	89 d8                	mov    eax,ebx
3000268a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000268d:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
3000268f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002692:	8b 00                	mov    eax,DWORD PTR [eax]
30002694:	85 c0                	test   eax,eax
30002696:	79 1c                	jns    300026b4 <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
30002698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000269b:	8b 00                	mov    eax,DWORD PTR [eax]
3000269d:	8d 50 3c             	lea    edx,[eax+0x3c]
300026a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026a3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
300026a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300026ab:	8d 50 ff             	lea    edx,[eax-0x1]
300026ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
300026b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026b7:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
300026ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026bd:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
300026c0:	ba 89 88 88 88       	mov    edx,0x88888889
300026c5:	89 d8                	mov    eax,ebx
300026c7:	f7 ea                	imul   edx
300026c9:	8d 04 1a             	lea    eax,[edx+ebx*1]
300026cc:	c1 f8 05             	sar    eax,0x5
300026cf:	89 c2                	mov    edx,eax
300026d1:	89 d8                	mov    eax,ebx
300026d3:	c1 f8 1f             	sar    eax,0x1f
300026d6:	29 c2                	sub    edx,eax
300026d8:	89 d0                	mov    eax,edx
300026da:	8d 14 06             	lea    edx,[esi+eax*1]
300026dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
300026e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026e6:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
300026e9:	ba 89 88 88 88       	mov    edx,0x88888889
300026ee:	89 d8                	mov    eax,ebx
300026f0:	f7 ea                	imul   edx
300026f2:	8d 04 1a             	lea    eax,[edx+ebx*1]
300026f5:	c1 f8 05             	sar    eax,0x5
300026f8:	89 c2                	mov    edx,eax
300026fa:	89 d8                	mov    eax,ebx
300026fc:	c1 f8 1f             	sar    eax,0x1f
300026ff:	29 c2                	sub    edx,eax
30002701:	89 d0                	mov    eax,edx
30002703:	89 c2                	mov    edx,eax
30002705:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
3000270c:	89 c2                	mov    edx,eax
3000270e:	89 d0                	mov    eax,edx
30002710:	c1 e0 04             	shl    eax,0x4
30002713:	29 d0                	sub    eax,edx
30002715:	29 c3                	sub    ebx,eax
30002717:	89 d8                	mov    eax,ebx
30002719:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000271c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
3000271f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002722:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002725:	85 c0                	test   eax,eax
30002727:	79 1e                	jns    30002747 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
30002729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000272c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
3000272f:	8d 50 3c             	lea    edx,[eax+0x3c]
30002732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002735:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
30002738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000273b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
3000273e:	8d 50 ff             	lea    edx,[eax-0x1]
30002741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002744:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
30002747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000274a:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
3000274d:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002752:	89 d8                	mov    eax,ebx
30002754:	f7 ea                	imul   edx
30002756:	c1 fa 02             	sar    edx,0x2
30002759:	89 d8                	mov    eax,ebx
3000275b:	c1 f8 1f             	sar    eax,0x1f
3000275e:	29 c2                	sub    edx,eax
30002760:	89 d0                	mov    eax,edx
30002762:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
30002765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002768:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
3000276b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002770:	89 d8                	mov    eax,ebx
30002772:	f7 ea                	imul   edx
30002774:	c1 fa 02             	sar    edx,0x2
30002777:	89 d8                	mov    eax,ebx
30002779:	c1 f8 1f             	sar    eax,0x1f
3000277c:	29 c2                	sub    edx,eax
3000277e:	89 d0                	mov    eax,edx
30002780:	01 c0                	add    eax,eax
30002782:	01 d0                	add    eax,edx
30002784:	c1 e0 03             	shl    eax,0x3
30002787:	29 c3                	sub    ebx,eax
30002789:	89 da                	mov    edx,ebx
3000278b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000278e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
30002791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002794:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002797:	85 c0                	test   eax,eax
30002799:	79 13                	jns    300027ae <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
3000279b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000279e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
300027a1:	8d 50 18             	lea    edx,[eax+0x18]
300027a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027a7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
300027aa:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
300027ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027b1:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
300027b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027b7:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300027ba:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
300027bf:	89 d8                	mov    eax,ebx
300027c1:	f7 ea                	imul   edx
300027c3:	d1 fa                	sar    edx,1
300027c5:	89 d8                	mov    eax,ebx
300027c7:	c1 f8 1f             	sar    eax,0x1f
300027ca:	29 c2                	sub    edx,eax
300027cc:	89 d0                	mov    eax,edx
300027ce:	8d 14 06             	lea    edx,[esi+eax*1]
300027d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027d4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
300027d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027da:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300027dd:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
300027e2:	89 d8                	mov    eax,ebx
300027e4:	f7 ea                	imul   edx
300027e6:	d1 fa                	sar    edx,1
300027e8:	89 d8                	mov    eax,ebx
300027ea:	c1 f8 1f             	sar    eax,0x1f
300027ed:	29 c2                	sub    edx,eax
300027ef:	89 d0                	mov    eax,edx
300027f1:	01 c0                	add    eax,eax
300027f3:	01 d0                	add    eax,edx
300027f5:	c1 e0 02             	shl    eax,0x2
300027f8:	29 c3                	sub    ebx,eax
300027fa:	89 da                	mov    edx,ebx
300027fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300027ff:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
30002802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002808:	85 c0                	test   eax,eax
3000280a:	79 1e                	jns    3000282a <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
3000280c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000280f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002812:	8d 50 0c             	lea    edx,[eax+0xc]
30002815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002818:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
3000281b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000281e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002821:	8d 50 ff             	lea    edx,[eax-0x1]
30002824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002827:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
3000282a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000282d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
30002830:	83 e8 01             	sub    eax,0x1
30002833:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
30002836:	e9 c1 00 00 00       	jmp    300028fc <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
3000283b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000283e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002841:	8d 50 ff             	lea    edx,[eax-0x1]
30002844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002847:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
3000284a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000284d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002850:	85 c0                	test   eax,eax
30002852:	79 19                	jns    3000286d <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
30002854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002857:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000285a:	8d 50 ff             	lea    edx,[eax-0x1]
3000285d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002860:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
30002863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002866:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
3000286d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002870:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002873:	83 e0 03             	and    eax,0x3
30002876:	85 c0                	test   eax,eax
30002878:	75 62                	jne    300028dc <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
3000287a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000287d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002880:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002886:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000288b:	89 d8                	mov    eax,ebx
3000288d:	f7 ea                	imul   edx
3000288f:	c1 fa 05             	sar    edx,0x5
30002892:	89 d8                	mov    eax,ebx
30002894:	c1 f8 1f             	sar    eax,0x1f
30002897:	29 c2                	sub    edx,eax
30002899:	89 d0                	mov    eax,edx
3000289b:	6b c0 64             	imul   eax,eax,0x64
3000289e:	29 c3                	sub    ebx,eax
300028a0:	89 d8                	mov    eax,ebx
300028a2:	85 c0                	test   eax,eax
300028a4:	75 2f                	jne    300028d5 <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
300028a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300028a9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300028ac:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300028b2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300028b7:	89 d8                	mov    eax,ebx
300028b9:	f7 ea                	imul   edx
300028bb:	c1 fa 07             	sar    edx,0x7
300028be:	89 d8                	mov    eax,ebx
300028c0:	c1 f8 1f             	sar    eax,0x1f
300028c3:	29 c2                	sub    edx,eax
300028c5:	89 d0                	mov    eax,edx
300028c7:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300028cd:	29 c3                	sub    ebx,eax
300028cf:	89 d8                	mov    eax,ebx
300028d1:	85 c0                	test   eax,eax
300028d3:	75 07                	jne    300028dc <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
300028d5:	ba 01 00 00 00       	mov    edx,0x1
300028da:	eb 05                	jmp    300028e1 <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
300028dc:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
300028e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300028e4:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300028e7:	89 d0                	mov    eax,edx
300028e9:	01 c0                	add    eax,eax
300028eb:	01 d0                	add    eax,edx
300028ed:	c1 e0 02             	shl    eax,0x2
300028f0:	01 d8                	add    eax,ebx
300028f2:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
300028f9:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
300028fc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30002900:	0f 88 35 ff ff ff    	js     3000283b <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
30002906:	e9 c2 00 00 00       	jmp    300029cd <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
3000290b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000290e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002911:	83 e0 03             	and    eax,0x3
30002914:	85 c0                	test   eax,eax
30002916:	75 62                	jne    3000297a <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
30002918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000291b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000291e:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002924:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002929:	89 d8                	mov    eax,ebx
3000292b:	f7 ea                	imul   edx
3000292d:	c1 fa 05             	sar    edx,0x5
30002930:	89 d8                	mov    eax,ebx
30002932:	c1 f8 1f             	sar    eax,0x1f
30002935:	29 c2                	sub    edx,eax
30002937:	89 d0                	mov    eax,edx
30002939:	6b c0 64             	imul   eax,eax,0x64
3000293c:	29 c3                	sub    ebx,eax
3000293e:	89 d8                	mov    eax,ebx
30002940:	85 c0                	test   eax,eax
30002942:	75 2f                	jne    30002973 <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
30002944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002947:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000294a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002950:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002955:	89 d8                	mov    eax,ebx
30002957:	f7 ea                	imul   edx
30002959:	c1 fa 07             	sar    edx,0x7
3000295c:	89 d8                	mov    eax,ebx
3000295e:	c1 f8 1f             	sar    eax,0x1f
30002961:	29 c2                	sub    edx,eax
30002963:	89 d0                	mov    eax,edx
30002965:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000296b:	29 c3                	sub    ebx,eax
3000296d:	89 d8                	mov    eax,ebx
3000296f:	85 c0                	test   eax,eax
30002971:	75 07                	jne    3000297a <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
30002973:	ba 01 00 00 00       	mov    edx,0x1
30002978:	eb 05                	jmp    3000297f <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
3000297a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
3000297f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002982:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002985:	89 d0                	mov    eax,edx
30002987:	01 c0                	add    eax,eax
30002989:	01 d0                	add    eax,edx
3000298b:	c1 e0 02             	shl    eax,0x2
3000298e:	01 d8                	add    eax,ebx
30002990:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
30002997:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
3000299a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000299d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300029a0:	8d 50 01             	lea    edx,[eax+0x1]
300029a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
300029a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300029af:	83 f8 0c             	cmp    eax,0xc
300029b2:	75 19                	jne    300029cd <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
300029b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029b7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
300029be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029c1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300029c4:	8d 50 01             	lea    edx,[eax+0x1]
300029c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029ca:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
300029cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029d0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300029d3:	83 e0 03             	and    eax,0x3
300029d6:	85 c0                	test   eax,eax
300029d8:	75 62                	jne    30002a3c <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
300029da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029dd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300029e0:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300029e6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300029eb:	89 d8                	mov    eax,ebx
300029ed:	f7 ea                	imul   edx
300029ef:	c1 fa 05             	sar    edx,0x5
300029f2:	89 d8                	mov    eax,ebx
300029f4:	c1 f8 1f             	sar    eax,0x1f
300029f7:	29 c2                	sub    edx,eax
300029f9:	89 d0                	mov    eax,edx
300029fb:	6b c0 64             	imul   eax,eax,0x64
300029fe:	29 c3                	sub    ebx,eax
30002a00:	89 d8                	mov    eax,ebx
30002a02:	85 c0                	test   eax,eax
30002a04:	75 2f                	jne    30002a35 <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
30002a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002a09:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002a0c:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002a12:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002a17:	89 d8                	mov    eax,ebx
30002a19:	f7 ea                	imul   edx
30002a1b:	c1 fa 07             	sar    edx,0x7
30002a1e:	89 d8                	mov    eax,ebx
30002a20:	c1 f8 1f             	sar    eax,0x1f
30002a23:	29 c2                	sub    edx,eax
30002a25:	89 d0                	mov    eax,edx
30002a27:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002a2d:	29 c3                	sub    ebx,eax
30002a2f:	89 d8                	mov    eax,ebx
30002a31:	85 c0                	test   eax,eax
30002a33:	75 07                	jne    30002a3c <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
30002a35:	ba 01 00 00 00       	mov    edx,0x1
30002a3a:	eb 05                	jmp    30002a41 <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
30002a3c:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
30002a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002a44:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002a47:	89 d0                	mov    eax,edx
30002a49:	01 c0                	add    eax,eax
30002a4b:	01 d0                	add    eax,edx
30002a4d:	c1 e0 02             	shl    eax,0x2
30002a50:	01 d8                	add    eax,ebx
30002a52:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
30002a59:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30002a5c:	0f 8e a9 fe ff ff    	jle    3000290b <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
30002a62:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002a65:	8d 50 01             	lea    edx,[eax+0x1]
30002a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002a6b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
30002a6e:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
30002a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002a78:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002a7b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
30002a7e:	81 ea 6c 07 00 00    	sub    edx,0x76c
30002a84:	39 d0                	cmp    eax,edx
30002a86:	7d 0a                	jge    30002a92 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
30002a88:	b8 19 fc ff ff       	mov    eax,0xfffffc19
30002a8d:	e9 d0 03 00 00       	jmp    30002e62 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
30002a92:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
30002a99:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
30002aa0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
30002aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002aaa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002aad:	05 6c 07 00 00       	add    eax,0x76c
30002ab2:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
30002ab5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002ab8:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002abb:	3d 7c c6 59 00       	cmp    eax,0x59c67c
30002ac0:	7e 07                	jle    30002ac9 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
30002ac2:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
30002ac9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002acc:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002acf:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
30002ad5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
30002ad8:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
30002add:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
30002ae0:	89 c2                	mov    edx,eax
30002ae2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002ae5:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002ae8:	8d 58 03             	lea    ebx,[eax+0x3]
30002aeb:	85 c0                	test   eax,eax
30002aed:	0f 48 c3             	cmovs  eax,ebx
30002af0:	c1 f8 02             	sar    eax,0x2
30002af3:	83 c0 01             	add    eax,0x1
30002af6:	39 c2                	cmp    edx,eax
30002af8:	7d 04                	jge    30002afe <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
30002afa:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
30002afe:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002b01:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002b04:	8d 50 03             	lea    edx,[eax+0x3]
30002b07:	85 c0                	test   eax,eax
30002b09:	0f 48 c2             	cmovs  eax,edx
30002b0c:	c1 f8 02             	sar    eax,0x2
30002b0f:	89 c3                	mov    ebx,eax
30002b11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002b14:	83 e0 03             	and    eax,0x3
30002b17:	85 c0                	test   eax,eax
30002b19:	74 29                	je     30002b44 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
30002b1b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002b1e:	99                   	cdq    
30002b1f:	c1 ea 1e             	shr    edx,0x1e
30002b22:	01 d0                	add    eax,edx
30002b24:	83 e0 03             	and    eax,0x3
30002b27:	29 d0                	sub    eax,edx
30002b29:	89 c6                	mov    esi,eax
30002b2b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
30002b2e:	99                   	cdq    
30002b2f:	c1 ea 1e             	shr    edx,0x1e
30002b32:	01 d0                	add    eax,edx
30002b34:	83 e0 03             	and    eax,0x3
30002b37:	29 d0                	sub    eax,edx
30002b39:	39 c6                	cmp    esi,eax
30002b3b:	7d 07                	jge    30002b44 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
30002b3d:	b8 01 00 00 00       	mov    eax,0x1
30002b42:	eb 05                	jmp    30002b49 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
30002b44:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
30002b49:	01 d8                	add    eax,ebx
30002b4b:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
30002b4e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002b51:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002b54:	89 c3                	mov    ebx,eax
30002b56:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002b5b:	89 d8                	mov    eax,ebx
30002b5d:	f7 ea                	imul   edx
30002b5f:	c1 fa 05             	sar    edx,0x5
30002b62:	89 d8                	mov    eax,ebx
30002b64:	c1 f8 1f             	sar    eax,0x1f
30002b67:	89 d7                	mov    edi,edx
30002b69:	29 c7                	sub    edi,eax
30002b6b:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002b6e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002b73:	89 d8                	mov    eax,ebx
30002b75:	f7 ea                	imul   edx
30002b77:	c1 fa 05             	sar    edx,0x5
30002b7a:	89 d8                	mov    eax,ebx
30002b7c:	c1 f8 1f             	sar    eax,0x1f
30002b7f:	29 c2                	sub    edx,eax
30002b81:	89 d0                	mov    eax,edx
30002b83:	6b c0 64             	imul   eax,eax,0x64
30002b86:	29 c3                	sub    ebx,eax
30002b88:	89 d8                	mov    eax,ebx
30002b8a:	85 c0                	test   eax,eax
30002b8c:	74 49                	je     30002bd7 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
30002b8e:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002b91:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002b96:	89 d8                	mov    eax,ebx
30002b98:	f7 ea                	imul   edx
30002b9a:	c1 fa 05             	sar    edx,0x5
30002b9d:	89 d8                	mov    eax,ebx
30002b9f:	c1 f8 1f             	sar    eax,0x1f
30002ba2:	89 d6                	mov    esi,edx
30002ba4:	29 c6                	sub    esi,eax
30002ba6:	6b c6 64             	imul   eax,esi,0x64
30002ba9:	89 de                	mov    esi,ebx
30002bab:	29 c6                	sub    esi,eax
30002bad:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
30002bb0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002bb5:	89 d8                	mov    eax,ebx
30002bb7:	f7 ea                	imul   edx
30002bb9:	c1 fa 05             	sar    edx,0x5
30002bbc:	89 d8                	mov    eax,ebx
30002bbe:	c1 f8 1f             	sar    eax,0x1f
30002bc1:	29 c2                	sub    edx,eax
30002bc3:	89 d0                	mov    eax,edx
30002bc5:	6b c0 64             	imul   eax,eax,0x64
30002bc8:	29 c3                	sub    ebx,eax
30002bca:	89 d8                	mov    eax,ebx
30002bcc:	39 c6                	cmp    esi,eax
30002bce:	7d 07                	jge    30002bd7 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
30002bd0:	b8 01 00 00 00       	mov    eax,0x1
30002bd5:	eb 05                	jmp    30002bdc <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
30002bd7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
30002bdc:	01 f8                	add    eax,edi
30002bde:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
30002be1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002be4:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002be7:	89 c3                	mov    ebx,eax
30002be9:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002bee:	89 d8                	mov    eax,ebx
30002bf0:	f7 ea                	imul   edx
30002bf2:	c1 fa 07             	sar    edx,0x7
30002bf5:	89 d8                	mov    eax,ebx
30002bf7:	c1 f8 1f             	sar    eax,0x1f
30002bfa:	89 d7                	mov    edi,edx
30002bfc:	29 c7                	sub    edi,eax
30002bfe:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002c01:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002c06:	89 d8                	mov    eax,ebx
30002c08:	f7 ea                	imul   edx
30002c0a:	c1 fa 07             	sar    edx,0x7
30002c0d:	89 d8                	mov    eax,ebx
30002c0f:	c1 f8 1f             	sar    eax,0x1f
30002c12:	29 c2                	sub    edx,eax
30002c14:	89 d0                	mov    eax,edx
30002c16:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002c1c:	29 c3                	sub    ebx,eax
30002c1e:	89 d8                	mov    eax,ebx
30002c20:	85 c0                	test   eax,eax
30002c22:	74 4f                	je     30002c73 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
30002c24:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002c27:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002c2c:	89 d8                	mov    eax,ebx
30002c2e:	f7 ea                	imul   edx
30002c30:	c1 fa 07             	sar    edx,0x7
30002c33:	89 d8                	mov    eax,ebx
30002c35:	c1 f8 1f             	sar    eax,0x1f
30002c38:	89 d6                	mov    esi,edx
30002c3a:	29 c6                	sub    esi,eax
30002c3c:	69 c6 90 01 00 00    	imul   eax,esi,0x190
30002c42:	89 de                	mov    esi,ebx
30002c44:	29 c6                	sub    esi,eax
30002c46:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
30002c49:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002c4e:	89 d8                	mov    eax,ebx
30002c50:	f7 ea                	imul   edx
30002c52:	c1 fa 07             	sar    edx,0x7
30002c55:	89 d8                	mov    eax,ebx
30002c57:	c1 f8 1f             	sar    eax,0x1f
30002c5a:	29 c2                	sub    edx,eax
30002c5c:	89 d0                	mov    eax,edx
30002c5e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002c64:	29 c3                	sub    ebx,eax
30002c66:	89 d8                	mov    eax,ebx
30002c68:	39 c6                	cmp    esi,eax
30002c6a:	7d 07                	jge    30002c73 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
30002c6c:	b8 01 00 00 00       	mov    eax,0x1
30002c71:	eb 05                	jmp    30002c78 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
30002c73:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
30002c78:	01 f8                	add    eax,edi
30002c7a:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
30002c7d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
30002c84:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30002c87:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
30002c8a:	eb 7b                	jmp    30002d07 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
30002c8c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002c8f:	83 e0 03             	and    eax,0x3
30002c92:	85 c0                	test   eax,eax
30002c94:	75 50                	jne    30002ce6 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
30002c96:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002c99:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002c9e:	89 d8                	mov    eax,ebx
30002ca0:	f7 ea                	imul   edx
30002ca2:	c1 fa 05             	sar    edx,0x5
30002ca5:	89 d8                	mov    eax,ebx
30002ca7:	c1 f8 1f             	sar    eax,0x1f
30002caa:	29 c2                	sub    edx,eax
30002cac:	89 d0                	mov    eax,edx
30002cae:	6b c0 64             	imul   eax,eax,0x64
30002cb1:	29 c3                	sub    ebx,eax
30002cb3:	89 d8                	mov    eax,ebx
30002cb5:	85 c0                	test   eax,eax
30002cb7:	75 26                	jne    30002cdf <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
30002cb9:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002cbc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002cc1:	89 d8                	mov    eax,ebx
30002cc3:	f7 ea                	imul   edx
30002cc5:	c1 fa 07             	sar    edx,0x7
30002cc8:	89 d8                	mov    eax,ebx
30002cca:	c1 f8 1f             	sar    eax,0x1f
30002ccd:	29 c2                	sub    edx,eax
30002ccf:	89 d0                	mov    eax,edx
30002cd1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002cd7:	29 c3                	sub    ebx,eax
30002cd9:	89 d8                	mov    eax,ebx
30002cdb:	85 c0                	test   eax,eax
30002cdd:	75 07                	jne    30002ce6 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
30002cdf:	ba 01 00 00 00       	mov    edx,0x1
30002ce4:	eb 05                	jmp    30002ceb <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
30002ce6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
30002ceb:	89 d0                	mov    eax,edx
30002ced:	01 c0                	add    eax,eax
30002cef:	01 d0                	add    eax,edx
30002cf1:	c1 e0 02             	shl    eax,0x2
30002cf4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
30002cf7:	01 d0                	add    eax,edx
30002cf9:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
30002d00:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
30002d03:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
30002d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002d0a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002d0d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
30002d10:	0f 8f 76 ff ff ff    	jg     30002c8c <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
30002d16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002d19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
30002d1c:	83 e8 01             	sub    eax,0x1
30002d1f:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
30002d22:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30002d25:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002d28:	01 d0                	add    eax,edx
30002d2a:	85 c0                	test   eax,eax
30002d2c:	79 04                	jns    30002d32 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
30002d2e:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
30002d32:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002d35:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
30002d38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002d3b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30002d3e:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
30002d41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002d44:	8d 58 04             	lea    ebx,[eax+0x4]
30002d47:	ba 93 24 49 92       	mov    edx,0x92492493
30002d4c:	89 d8                	mov    eax,ebx
30002d4e:	f7 ea                	imul   edx
30002d50:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002d53:	c1 f8 02             	sar    eax,0x2
30002d56:	89 c2                	mov    edx,eax
30002d58:	89 d8                	mov    eax,ebx
30002d5a:	c1 f8 1f             	sar    eax,0x1f
30002d5d:	29 c2                	sub    edx,eax
30002d5f:	89 d0                	mov    eax,edx
30002d61:	89 c2                	mov    edx,eax
30002d63:	c1 e2 03             	shl    edx,0x3
30002d66:	29 c2                	sub    edx,eax
30002d68:	89 d8                	mov    eax,ebx
30002d6a:	29 d0                	sub    eax,edx
30002d6c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002d6f:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
30002d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002d75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002d78:	c1 e0 02             	shl    eax,0x2
30002d7b:	89 c2                	mov    edx,eax
30002d7d:	c1 e2 04             	shl    edx,0x4
30002d80:	29 c2                	sub    edx,eax
30002d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002d85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002d88:	01 d0                	add    eax,edx
30002d8a:	c1 e0 02             	shl    eax,0x2
30002d8d:	89 c2                	mov    edx,eax
30002d8f:	c1 e2 04             	shl    edx,0x4
30002d92:	29 c2                	sub    edx,eax
30002d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002d97:	8b 00                	mov    eax,DWORD PTR [eax]
30002d99:	01 d0                	add    eax,edx
30002d9b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
30002d9e:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
30002da3:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
30002da6:	89 c3                	mov    ebx,eax
30002da8:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30002dad:	89 d8                	mov    eax,ebx
30002daf:	f7 ea                	imul   edx
30002db1:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002db4:	c1 f8 10             	sar    eax,0x10
30002db7:	89 c2                	mov    edx,eax
30002db9:	89 d8                	mov    eax,ebx
30002dbb:	c1 f8 1f             	sar    eax,0x1f
30002dbe:	29 c2                	sub    edx,eax
30002dc0:	89 d0                	mov    eax,edx
30002dc2:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30002dc5:	7d 04                	jge    30002dcb <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
30002dc7:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
30002dcb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002dce:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30002dd4:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
30002dd7:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002ddd:	8b 00                	mov    eax,DWORD PTR [eax]
30002ddf:	85 c0                	test   eax,eax
30002de1:	7e 16                	jle    30002df9 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
30002de3:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002de9:	8b 00                	mov    eax,DWORD PTR [eax]
30002deb:	ba ff ff ff 7f       	mov    edx,0x7fffffff
30002df0:	29 c2                	sub    edx,eax
30002df2:	89 d0                	mov    eax,edx
30002df4:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
30002df7:	7c 1b                	jl     30002e14 <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
30002df9:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002dff:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
30002e01:	85 c0                	test   eax,eax
30002e03:	79 13                	jns    30002e18 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
      ((libcTZ < 0) && (seconds < -libcTZ))) {
30002e05:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002e0b:	8b 00                	mov    eax,DWORD PTR [eax]
30002e0d:	f7 d8                	neg    eax
30002e0f:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
30002e12:	7e 04                	jle    30002e18 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
          overflow|=16;
30002e14:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
30002e18:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002e1e:	8b 00                	mov    eax,DWORD PTR [eax]
30002e20:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
30002e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002e26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
30002e29:	85 c0                	test   eax,eax
30002e2b:	74 0b                	je     30002e38 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
30002e2d:	8b 81 54 00 00 00    	mov    eax,DWORD PTR [ecx+0x54]
30002e33:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
30002e36:	eb 07                	jmp    30002e3f <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
30002e38:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
30002e3f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
30002e42:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
30002e45:	7e 04                	jle    30002e4b <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
30002e47:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
30002e4b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
30002e4e:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
30002e51:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
30002e55:	74 08                	je     30002e5f <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
30002e57:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30002e5a:	83 e8 02             	sub    eax,0x2
30002e5d:	eb 03                	jmp    30002e62 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
30002e5f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
30002e62:	83 c4 20             	add    esp,0x20
30002e65:	5b                   	pop    ebx
30002e66:	5e                   	pop    esi
30002e67:	5f                   	pop    edi
30002e68:	5d                   	pop    ebp
30002e69:	c3                   	ret    

30002e6a <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
30002e6a:	55                   	push   ebp
30002e6b:	89 e5                	mov    ebp,esp
30002e6d:	56                   	push   esi
30002e6e:	53                   	push   ebx
30002e6f:	83 ec 14             	sub    esp,0x14
30002e72:	e8 60 00 00 00       	call   30002ed7 <__x86.get_pc_thunk.ax>
30002e77:	05 a1 1b 00 00       	add    eax,0x1ba1
30002e7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002e7f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
30002e82:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
30002e89:	b8 71 01 00 00       	mov    eax,0x171
30002e8e:	bb 00 00 00 00       	mov    ebx,0x0
30002e93:	b9 00 00 00 00       	mov    ecx,0x0
30002e98:	ba 00 00 00 00       	mov    edx,0x0
30002e9d:	be 00 00 00 00       	mov    esi,0x0
30002ea2:	e8 fc ff ff ff       	call   30002ea3 <gettime+0x39>
30002ea7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
30002eaa:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
30002eae:	74 11                	je     30002ec1 <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
30002eb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002eb3:	8d 45 f4             	lea    eax,[ebp-0xc]
30002eb6:	50                   	push   eax
30002eb7:	e8 05 f7 ff ff       	call   300025c1 <localtime_rI>
30002ebc:	83 c4 08             	add    esp,0x8
30002ebf:	eb 0f                	jmp    30002ed0 <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
30002ec1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002ec4:	8d 45 f4             	lea    eax,[ebp-0xc]
30002ec7:	50                   	push   eax
30002ec8:	e8 7f f3 ff ff       	call   3000224c <gmtime_rI>
30002ecd:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
30002ed0:	8d 65 f8             	lea    esp,[ebp-0x8]
30002ed3:	5b                   	pop    ebx
30002ed4:	5e                   	pop    esi
30002ed5:	5d                   	pop    ebp
30002ed6:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

30002ed7 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
30002ed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
30002eda:	c3                   	ret    

Disassembly of section .plt:

30002ee0 <.plt>:
30002ee0:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
30002ee6:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
30002eec:	00 00                	add    BYTE PTR [eax],al
30002eee:	00 00                	add    BYTE PTR [eax],al
30002ef0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
30002ef6:	68 00 00 00 00       	push   0x0
30002efb:	e9 e0 ff ff ff       	jmp    30002ee0 <__x86.get_pc_thunk.ax+0x9>

Disassembly of section .text.__x86.get_pc_thunk.bx:

30002f00 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
30002f00:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
30002f03:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

30002f04 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
30002f04:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
30002f07:	c3                   	ret    

Disassembly of section .eh_frame:

30002f08 <.eh_frame>:
30002f08:	14 00                	adc    al,0x0
30002f0a:	00 00                	add    BYTE PTR [eax],al
30002f0c:	00 00                	add    BYTE PTR [eax],al
30002f0e:	00 00                	add    BYTE PTR [eax],al
30002f10:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30002f13:	00 01                	add    BYTE PTR [ecx],al
30002f15:	7c 08                	jl     30002f1f <__x86.get_pc_thunk.cx+0x1b>
30002f17:	01 1b                	add    DWORD PTR [ebx],ebx
30002f19:	0c 04                	or     al,0x4
30002f1b:	04 88                	add    al,0x88
30002f1d:	01 00                	add    DWORD PTR [eax],eax
30002f1f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002f22:	00 00                	add    BYTE PTR [eax],al
30002f24:	1c 00                	sbb    al,0x0
30002f26:	00 00                	add    BYTE PTR [eax],al
30002f28:	d8 d0                	fcom   st(0)
30002f2a:	ff                   	(bad)  
30002f2b:	ff                   	(bad)  
30002f2c:	38 00                	cmp    BYTE PTR [eax],al
30002f2e:	00 00                	add    BYTE PTR [eax],al
30002f30:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f39:	74 c5                	je     30002f00 <__x86.get_pc_thunk.bx>
30002f3b:	0c 04                	or     al,0x4
30002f3d:	04 00                	add    al,0x0
30002f3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002f42:	00 00                	add    BYTE PTR [eax],al
30002f44:	3c 00                	cmp    al,0x0
30002f46:	00 00                	add    BYTE PTR [eax],al
30002f48:	f0 d0 ff             	lock sar bh,1
30002f4b:	ff                   	(bad)  
30002f4c:	38 00                	cmp    BYTE PTR [eax],al
30002f4e:	00 00                	add    BYTE PTR [eax],al
30002f50:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f59:	74 c5                	je     30002f20 <__x86.get_pc_thunk.cx+0x1c>
30002f5b:	0c 04                	or     al,0x4
30002f5d:	04 00                	add    al,0x0
30002f5f:	00 10                	add    BYTE PTR [eax],dl
30002f61:	00 00                	add    BYTE PTR [eax],al
30002f63:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
30002f67:	00 6f ff             	add    BYTE PTR [edi-0x1],ch
30002f6a:	ff                   	(bad)  
30002f6b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002f6e:	00 00                	add    BYTE PTR [eax],al
30002f70:	00 00                	add    BYTE PTR [eax],al
30002f72:	00 00                	add    BYTE PTR [eax],al
30002f74:	24 00                	and    al,0x0
30002f76:	00 00                	add    BYTE PTR [eax],al
30002f78:	70 00                	jo     30002f7a <__x86.get_pc_thunk.cx+0x76>
30002f7a:	00 00                	add    BYTE PTR [eax],al
30002f7c:	f4                   	hlt    
30002f7d:	d0 ff                	sar    bh,1
30002f7f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002f82:	00 00                	add    BYTE PTR [eax],al
30002f84:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f8d:	42                   	inc    edx
30002f8e:	86 03                	xchg   BYTE PTR [ebx],al
30002f90:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002f94:	c3                   	ret    
30002f95:	41                   	inc    ecx
30002f96:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002f9a:	04 04                	add    al,0x4
30002f9c:	24 00                	and    al,0x0
30002f9e:	00 00                	add    BYTE PTR [eax],al
30002fa0:	98                   	cwde   
30002fa1:	00 00                	add    BYTE PTR [eax],al
30002fa3:	00 21                	add    BYTE PTR [ecx],ah
30002fa5:	d1 ff                	sar    edi,1
30002fa7:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002faa:	00 00                	add    BYTE PTR [eax],al
30002fac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002faf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fb5:	42                   	inc    edx
30002fb6:	86 03                	xchg   BYTE PTR [ebx],al
30002fb8:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002fbc:	c3                   	ret    
30002fbd:	41                   	inc    ecx
30002fbe:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002fc2:	04 04                	add    al,0x4
30002fc4:	24 00                	and    al,0x0
30002fc6:	00 00                	add    BYTE PTR [eax],al
30002fc8:	c0 00 00             	rol    BYTE PTR [eax],0x0
30002fcb:	00 50 d1             	add    BYTE PTR [eax-0x2f],dl
30002fce:	ff                   	(bad)  
30002fcf:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
30002fd5:	41                   	inc    ecx
30002fd6:	0e                   	push   cs
30002fd7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fdd:	42                   	inc    edx
30002fde:	86 03                	xchg   BYTE PTR [ebx],al
30002fe0:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
30002fe4:	c3                   	ret    
30002fe5:	41                   	inc    ecx
30002fe6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002fea:	04 04                	add    al,0x4
30002fec:	10 00                	adc    BYTE PTR [eax],al
30002fee:	00 00                	add    BYTE PTR [eax],al
30002ff0:	e8 00 00 00 0c       	call   3c002ff5 <ticksToWait+0xbffe585>
30002ff5:	ff                   	(bad)  
30002ff6:	ff                   	(bad)  
30002ff7:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002ffa:	00 00                	add    BYTE PTR [eax],al
30002ffc:	00 00                	add    BYTE PTR [eax],al
30002ffe:	00 00                	add    BYTE PTR [eax],al
30003000:	20 00                	and    BYTE PTR [eax],al
30003002:	00 00                	add    BYTE PTR [eax],al
30003004:	fc                   	cld    
30003005:	00 00                	add    BYTE PTR [eax],al
30003007:	00 ac d1 ff ff 77 00 	add    BYTE PTR [ecx+edx*8+0x77ffff],ch
3000300e:	00 00                	add    BYTE PTR [eax],al
30003010:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003013:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003019:	44                   	inc    esp
3000301a:	83 03 02             	add    DWORD PTR [ebx],0x2
3000301d:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000301e:	c5 c3 0c             	(bad)  
30003021:	04 04                	add    al,0x4
30003023:	00 20                	add    BYTE PTR [eax],ah
30003025:	00 00                	add    BYTE PTR [eax],al
30003027:	00 20                	add    BYTE PTR [eax],ah
30003029:	01 00                	add    DWORD PTR [eax],eax
3000302b:	00 ff                	add    bh,bh
3000302d:	d1 ff                	sar    edi,1
3000302f:	ff                   	(bad)  
30003030:	bb 00 00 00 00       	mov    ebx,0x0
30003035:	41                   	inc    ecx
30003036:	0e                   	push   cs
30003037:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000303d:	44                   	inc    esp
3000303e:	83 03 02             	add    DWORD PTR [ebx],0x2
30003041:	b3 c5                	mov    bl,0xc5
30003043:	c3                   	ret    
30003044:	0c 04                	or     al,0x4
30003046:	04 00                	add    al,0x0
30003048:	20 00                	and    BYTE PTR [eax],al
3000304a:	00 00                	add    BYTE PTR [eax],al
3000304c:	44                   	inc    esp
3000304d:	01 00                	add    DWORD PTR [eax],eax
3000304f:	00 96 d2 ff ff bb    	add    BYTE PTR [esi-0x4400002e],dl
30003055:	00 00                	add    BYTE PTR [eax],al
30003057:	00 00                	add    BYTE PTR [eax],al
30003059:	41                   	inc    ecx
3000305a:	0e                   	push   cs
3000305b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003061:	44                   	inc    esp
30003062:	83 03 02             	add    DWORD PTR [ebx],0x2
30003065:	b3 c5                	mov    bl,0xc5
30003067:	c3                   	ret    
30003068:	0c 04                	or     al,0x4
3000306a:	04 00                	add    al,0x0
3000306c:	1c 00                	sbb    al,0x0
3000306e:	00 00                	add    BYTE PTR [eax],al
30003070:	68 01 00 00 2d       	push   0x2d000001
30003075:	d3 ff                	sar    edi,cl
30003077:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
3000307b:	00 00                	add    BYTE PTR [eax],al
3000307d:	41                   	inc    ecx
3000307e:	0e                   	push   cs
3000307f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003085:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
30003088:	0c 04                	or     al,0x4
3000308a:	04 00                	add    al,0x0
3000308c:	20 00                	and    BYTE PTR [eax],al
3000308e:	00 00                	add    BYTE PTR [eax],al
30003090:	88 01                	mov    BYTE PTR [ecx],al
30003092:	00 00                	add    BYTE PTR [eax],al
30003094:	6c                   	ins    BYTE PTR es:[edi],dx
30003095:	d3 ff                	sar    edi,cl
30003097:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
3000309d:	41                   	inc    ecx
3000309e:	0e                   	push   cs
3000309f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030a5:	44                   	inc    esp
300030a6:	83 03 02             	add    DWORD PTR [ebx],0x2
300030a9:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
300030ae:	04 00                	add    al,0x0
300030b0:	20 00                	and    BYTE PTR [eax],al
300030b2:	00 00                	add    BYTE PTR [eax],al
300030b4:	ac                   	lods   al,BYTE PTR ds:[esi]
300030b5:	01 00                	add    DWORD PTR [eax],eax
300030b7:	00 f2                	add    dl,dh
300030b9:	d3 ff                	sar    edi,cl
300030bb:	ff c1                	inc    ecx
300030bd:	01 00                	add    DWORD PTR [eax],eax
300030bf:	00 00                	add    BYTE PTR [eax],al
300030c1:	41                   	inc    ecx
300030c2:	0e                   	push   cs
300030c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030c9:	44                   	inc    esp
300030ca:	83 03 03             	add    DWORD PTR [ebx],0x3
300030cd:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
300030d2:	04 04                	add    al,0x4
300030d4:	20 00                	and    BYTE PTR [eax],al
300030d6:	00 00                	add    BYTE PTR [eax],al
300030d8:	d0 01                	rol    BYTE PTR [ecx],1
300030da:	00 00                	add    BYTE PTR [eax],al
300030dc:	90                   	nop
300030dd:	d5 ff                	aad    0xff
300030df:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
300030e5:	41                   	inc    ecx
300030e6:	0e                   	push   cs
300030e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030ed:	44                   	inc    esp
300030ee:	83 03 65             	add    DWORD PTR [ebx],0x65
300030f1:	c5 c3 0c             	(bad)  
300030f4:	04 04                	add    al,0x4
300030f6:	00 00                	add    BYTE PTR [eax],al
300030f8:	20 00                	and    BYTE PTR [eax],al
300030fa:	00 00                	add    BYTE PTR [eax],al
300030fc:	f4                   	hlt    
300030fd:	01 00                	add    DWORD PTR [eax],eax
300030ff:	00 99 d5 ff ff 2a    	add    BYTE PTR [ecx+0x2affffd5],bl
30003105:	00 00                	add    BYTE PTR [eax],al
30003107:	00 00                	add    BYTE PTR [eax],al
30003109:	41                   	inc    ecx
3000310a:	0e                   	push   cs
3000310b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003111:	44                   	inc    esp
30003112:	83 03 62             	add    DWORD PTR [ebx],0x62
30003115:	c5 c3 0c             	(bad)  
30003118:	04 04                	add    al,0x4
3000311a:	00 00                	add    BYTE PTR [eax],al
3000311c:	24 00                	and    al,0x0
3000311e:	00 00                	add    BYTE PTR [eax],al
30003120:	18 02                	sbb    BYTE PTR [edx],al
30003122:	00 00                	add    BYTE PTR [eax],al
30003124:	9f                   	lahf   
30003125:	d5 ff                	aad    0xff
30003127:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
3000312d:	41                   	inc    ecx
3000312e:	0e                   	push   cs
3000312f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003135:	42                   	inc    edx
30003136:	86 03                	xchg   BYTE PTR [ebx],al
30003138:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
3000313f:	c5 
30003140:	0c 04                	or     al,0x4
30003142:	04 00                	add    al,0x0
30003144:	24 00                	and    al,0x0
30003146:	00 00                	add    BYTE PTR [eax],al
30003148:	40                   	inc    eax
30003149:	02 00                	add    al,BYTE PTR [eax]
3000314b:	00 ac d5 ff ff 35 00 	add    BYTE PTR [ebp+edx*8+0x35ffff],ch
30003152:	00 00                	add    BYTE PTR [eax],al
30003154:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003157:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000315d:	42                   	inc    edx
3000315e:	86 03                	xchg   BYTE PTR [ebx],al
30003160:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
30003167:	c5 
30003168:	0c 04                	or     al,0x4
3000316a:	04 00                	add    al,0x0
3000316c:	20 00                	and    BYTE PTR [eax],al
3000316e:	00 00                	add    BYTE PTR [eax],al
30003170:	68 02 00 00 b9       	push   0xb9000002
30003175:	d5 ff                	aad    0xff
30003177:	ff 31                	push   DWORD PTR [ecx]
30003179:	00 00                	add    BYTE PTR [eax],al
3000317b:	00 00                	add    BYTE PTR [eax],al
3000317d:	41                   	inc    ecx
3000317e:	0e                   	push   cs
3000317f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003185:	44                   	inc    esp
30003186:	83 03 69             	add    DWORD PTR [ebx],0x69
30003189:	c5 c3 0c             	(bad)  
3000318c:	04 04                	add    al,0x4
3000318e:	00 00                	add    BYTE PTR [eax],al
30003190:	20 00                	and    BYTE PTR [eax],al
30003192:	00 00                	add    BYTE PTR [eax],al
30003194:	8c 02                	mov    WORD PTR [edx],es
30003196:	00 00                	add    BYTE PTR [eax],al
30003198:	c8 d5 ff ff          	enter  0xffd5,0xff
3000319c:	26 00 00             	add    BYTE PTR es:[eax],al
3000319f:	00 00                	add    BYTE PTR [eax],al
300031a1:	41                   	inc    ecx
300031a2:	0e                   	push   cs
300031a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031a9:	41                   	inc    ecx
300031aa:	83 03 60             	add    DWORD PTR [ebx],0x60
300031ad:	c3                   	ret    
300031ae:	41                   	inc    ecx
300031af:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300031b2:	04 00                	add    al,0x0
300031b4:	20 00                	and    BYTE PTR [eax],al
300031b6:	00 00                	add    BYTE PTR [eax],al
300031b8:	b0 02                	mov    al,0x2
300031ba:	00 00                	add    BYTE PTR [eax],al
300031bc:	ca d5 ff             	retf   0xffd5
300031bf:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
300031c2:	00 00                	add    BYTE PTR [eax],al
300031c4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300031c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031cd:	44                   	inc    esp
300031ce:	83 03 7a             	add    DWORD PTR [ebx],0x7a
300031d1:	c3                   	ret    
300031d2:	41                   	inc    ecx
300031d3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300031d6:	04 00                	add    al,0x0
300031d8:	20 00                	and    BYTE PTR [eax],al
300031da:	00 00                	add    BYTE PTR [eax],al
300031dc:	d4 02                	aam    0x2
300031de:	00 00                	add    BYTE PTR [eax],al
300031e0:	e9 d5 ff ff 2f       	jmp    600031ba <ticksToWait+0x2fffe74a>
300031e5:	00 00                	add    BYTE PTR [eax],al
300031e7:	00 00                	add    BYTE PTR [eax],al
300031e9:	41                   	inc    ecx
300031ea:	0e                   	push   cs
300031eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031f1:	44                   	inc    esp
300031f2:	83 03 66             	add    DWORD PTR [ebx],0x66
300031f5:	c3                   	ret    
300031f6:	41                   	inc    ecx
300031f7:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300031fa:	04 00                	add    al,0x0
300031fc:	20 00                	and    BYTE PTR [eax],al
300031fe:	00 00                	add    BYTE PTR [eax],al
30003200:	f8                   	clc    
30003201:	02 00                	add    al,BYTE PTR [eax]
30003203:	00 f4                	add    ah,dh
30003205:	d5 ff                	aad    0xff
30003207:	ff                   	(bad)  
30003208:	ba 00 00 00 00       	mov    edx,0x0
3000320d:	41                   	inc    ecx
3000320e:	0e                   	push   cs
3000320f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003215:	44                   	inc    esp
30003216:	83 03 02             	add    DWORD PTR [ebx],0x2
30003219:	b2 c5                	mov    dl,0xc5
3000321b:	c3                   	ret    
3000321c:	0c 04                	or     al,0x4
3000321e:	04 00                	add    al,0x0
30003220:	24 00                	and    al,0x0
30003222:	00 00                	add    BYTE PTR [eax],al
30003224:	1c 03                	sbb    al,0x3
30003226:	00 00                	add    BYTE PTR [eax],al
30003228:	8c d6                	mov    esi,ss
3000322a:	ff                   	(bad)  
3000322b:	ff                   	(bad)  
3000322c:	3a 00                	cmp    al,BYTE PTR [eax]
3000322e:	00 00                	add    BYTE PTR [eax],al
30003230:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003233:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003239:	45                   	inc    ebp
3000323a:	86 03                	xchg   BYTE PTR [ebx],al
3000323c:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
30003240:	41                   	inc    ecx
30003241:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003245:	04 04                	add    al,0x4
30003247:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
3000324a:	00 00                	add    BYTE PTR [eax],al
3000324c:	44                   	inc    esp
3000324d:	03 00                	add    eax,DWORD PTR [eax]
3000324f:	00 9e d6 ff ff 3c    	add    BYTE PTR [esi+0x3cffffd6],bl
30003255:	00 00                	add    BYTE PTR [eax],al
30003257:	00 00                	add    BYTE PTR [eax],al
30003259:	41                   	inc    ecx
3000325a:	0e                   	push   cs
3000325b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003261:	45                   	inc    ebp
30003262:	86 03                	xchg   BYTE PTR [ebx],al
30003264:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
30003268:	41                   	inc    ecx
30003269:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
3000326d:	04 04                	add    al,0x4
3000326f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003272:	00 00                	add    BYTE PTR [eax],al
30003274:	6c                   	ins    BYTE PTR es:[edi],dx
30003275:	03 00                	add    eax,DWORD PTR [eax]
30003277:	00 b2 d6 ff ff 3e    	add    BYTE PTR [edx+0x3effffd6],dh
3000327d:	00 00                	add    BYTE PTR [eax],al
3000327f:	00 00                	add    BYTE PTR [eax],al
30003281:	41                   	inc    ecx
30003282:	0e                   	push   cs
30003283:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003289:	45                   	inc    ebp
3000328a:	86 03                	xchg   BYTE PTR [ebx],al
3000328c:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
30003290:	41                   	inc    ecx
30003291:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003295:	04 04                	add    al,0x4
30003297:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
3000329a:	00 00                	add    BYTE PTR [eax],al
3000329c:	94                   	xchg   esp,eax
3000329d:	03 00                	add    eax,DWORD PTR [eax]
3000329f:	00 c8                	add    al,cl
300032a1:	d6                   	(bad)  
300032a2:	ff                   	(bad)  
300032a3:	ff 40 00             	inc    DWORD PTR [eax+0x0]
300032a6:	00 00                	add    BYTE PTR [eax],al
300032a8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300032ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032b1:	45                   	inc    ebp
300032b2:	86 03                	xchg   BYTE PTR [ebx],al
300032b4:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
300032bb:	c5 
300032bc:	0c 04                	or     al,0x4
300032be:	04 00                	add    al,0x0
300032c0:	24 00                	and    al,0x0
300032c2:	00 00                	add    BYTE PTR [eax],al
300032c4:	bc 03 00 00 e0       	mov    esp,0xe0000003
300032c9:	d6                   	(bad)  
300032ca:	ff                   	(bad)  
300032cb:	ff 42 00             	inc    DWORD PTR [edx+0x0]
300032ce:	00 00                	add    BYTE PTR [eax],al
300032d0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300032d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032d9:	45                   	inc    ebp
300032da:	86 03                	xchg   BYTE PTR [ebx],al
300032dc:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
300032e0:	41                   	inc    ecx
300032e1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300032e5:	04 04                	add    al,0x4
300032e7:	00 20                	add    BYTE PTR [eax],ah
300032e9:	00 00                	add    BYTE PTR [eax],al
300032eb:	00 e4                	add    ah,ah
300032ed:	03 00                	add    eax,DWORD PTR [eax]
300032ef:	00 fa                	add    dl,bh
300032f1:	d6                   	(bad)  
300032f2:	ff                   	(bad)  
300032f3:	ff a5 00 00 00 00    	jmp    DWORD PTR [ebp+0x0]
300032f9:	41                   	inc    ecx
300032fa:	0e                   	push   cs
300032fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003301:	44                   	inc    esp
30003302:	83 03 02             	add    DWORD PTR [ebx],0x2
30003305:	9d                   	popf   
30003306:	c5 c3 0c             	(bad)  
30003309:	04 04                	add    al,0x4
3000330b:	00 20                	add    BYTE PTR [eax],ah
3000330d:	00 00                	add    BYTE PTR [eax],al
3000330f:	00 08                	add    BYTE PTR [eax],cl
30003311:	04 00                	add    al,0x0
30003313:	00 7b d7             	add    BYTE PTR [ebx-0x29],bh
30003316:	ff                   	(bad)  
30003317:	ff 1f                	call   FWORD PTR [edi]
30003319:	00 00                	add    BYTE PTR [eax],al
3000331b:	00 00                	add    BYTE PTR [eax],al
3000331d:	41                   	inc    ecx
3000331e:	0e                   	push   cs
3000331f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003325:	44                   	inc    esp
30003326:	83 03 56             	add    DWORD PTR [ebx],0x56
30003329:	c3                   	ret    
3000332a:	41                   	inc    ecx
3000332b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000332e:	04 00                	add    al,0x0
30003330:	1c 00                	sbb    al,0x0
30003332:	00 00                	add    BYTE PTR [eax],al
30003334:	2c 04                	sub    al,0x4
30003336:	00 00                	add    BYTE PTR [eax],al
30003338:	76 d7                	jbe    30003311 <__x86.get_pc_thunk.cx+0x40d>
3000333a:	ff                   	(bad)  
3000333b:	ff 34 00             	push   DWORD PTR [eax+eax*1]
3000333e:	00 00                	add    BYTE PTR [eax],al
30003340:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003343:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003349:	70 c5                	jo     30003310 <__x86.get_pc_thunk.cx+0x40c>
3000334b:	0c 04                	or     al,0x4
3000334d:	04 00                	add    al,0x0
3000334f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003352:	00 00                	add    BYTE PTR [eax],al
30003354:	4c                   	dec    esp
30003355:	04 00                	add    al,0x0
30003357:	00 8a d7 ff ff 34    	add    BYTE PTR [edx+0x34ffffd7],cl
3000335d:	00 00                	add    BYTE PTR [eax],al
3000335f:	00 00                	add    BYTE PTR [eax],al
30003361:	41                   	inc    ecx
30003362:	0e                   	push   cs
30003363:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003369:	70 c5                	jo     30003330 <__x86.get_pc_thunk.cx+0x42c>
3000336b:	0c 04                	or     al,0x4
3000336d:	04 00                	add    al,0x0
3000336f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003372:	00 00                	add    BYTE PTR [eax],al
30003374:	6c                   	ins    BYTE PTR es:[edi],dx
30003375:	04 00                	add    al,0x0
30003377:	00 9e d7 ff ff 34    	add    BYTE PTR [esi+0x34ffffd7],bl
3000337d:	00 00                	add    BYTE PTR [eax],al
3000337f:	00 00                	add    BYTE PTR [eax],al
30003381:	41                   	inc    ecx
30003382:	0e                   	push   cs
30003383:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003389:	70 c5                	jo     30003350 <__x86.get_pc_thunk.cx+0x44c>
3000338b:	0c 04                	or     al,0x4
3000338d:	04 00                	add    al,0x0
3000338f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003392:	00 00                	add    BYTE PTR [eax],al
30003394:	8c 04 00             	mov    WORD PTR [eax+eax*1],es
30003397:	00 b2 d7 ff ff 37    	add    BYTE PTR [edx+0x37ffffd7],dh
3000339d:	00 00                	add    BYTE PTR [eax],al
3000339f:	00 00                	add    BYTE PTR [eax],al
300033a1:	41                   	inc    ecx
300033a2:	0e                   	push   cs
300033a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033a9:	73 c5                	jae    30003370 <__x86.get_pc_thunk.cx+0x46c>
300033ab:	0c 04                	or     al,0x4
300033ad:	04 00                	add    al,0x0
300033af:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
300033b2:	00 00                	add    BYTE PTR [eax],al
300033b4:	ac                   	lods   al,BYTE PTR ds:[esi]
300033b5:	04 00                	add    al,0x0
300033b7:	00 c9                	add    cl,cl
300033b9:	d7                   	xlat   BYTE PTR ds:[ebx]
300033ba:	ff                   	(bad)  
300033bb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
300033be:	00 00                	add    BYTE PTR [eax],al
300033c0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300033c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033c9:	45                   	inc    ebp
300033ca:	86 03                	xchg   BYTE PTR [ebx],al
300033cc:	83 04 02 6a          	add    DWORD PTR [edx+eax*1],0x6a
300033d0:	c3                   	ret    
300033d1:	41                   	inc    ecx
300033d2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300033d6:	04 04                	add    al,0x4
300033d8:	1c 00                	sbb    al,0x0
300033da:	00 00                	add    BYTE PTR [eax],al
300033dc:	d4 04                	aam    0x4
300033de:	00 00                	add    BYTE PTR [eax],al
300033e0:	16                   	push   ss
300033e1:	d8 ff                	fdivr  st,st(7)
300033e3:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
300033e9:	41                   	inc    ecx
300033ea:	0e                   	push   cs
300033eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033f1:	59                   	pop    ecx
300033f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033f5:	04 00                	add    al,0x0
300033f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300033fa:	00 00                	add    BYTE PTR [eax],al
300033fc:	f4                   	hlt    
300033fd:	04 00                	add    al,0x0
300033ff:	00 13                	add    BYTE PTR [ebx],dl
30003401:	d8 ff                	fdivr  st,st(7)
30003403:	ff 29                	jmp    FWORD PTR [ecx]
30003405:	00 00                	add    BYTE PTR [eax],al
30003407:	00 00                	add    BYTE PTR [eax],al
30003409:	41                   	inc    ecx
3000340a:	0e                   	push   cs
3000340b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003411:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
30003415:	04 00                	add    al,0x0
30003417:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000341a:	00 00                	add    BYTE PTR [eax],al
3000341c:	14 05                	adc    al,0x5
3000341e:	00 00                	add    BYTE PTR [eax],al
30003420:	1c d8                	sbb    al,0xd8
30003422:	ff                   	(bad)  
30003423:	ff 29                	jmp    FWORD PTR [ecx]
30003425:	00 00                	add    BYTE PTR [eax],al
30003427:	00 00                	add    BYTE PTR [eax],al
30003429:	41                   	inc    ecx
3000342a:	0e                   	push   cs
3000342b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003431:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
30003435:	04 00                	add    al,0x0
30003437:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000343a:	00 00                	add    BYTE PTR [eax],al
3000343c:	34 05                	xor    al,0x5
3000343e:	00 00                	add    BYTE PTR [eax],al
30003440:	25 d8 ff ff 4c       	and    eax,0x4cffffd8
30003445:	00 00                	add    BYTE PTR [eax],al
30003447:	00 00                	add    BYTE PTR [eax],al
30003449:	41                   	inc    ecx
3000344a:	0e                   	push   cs
3000344b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003451:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
30003454:	0c 04                	or     al,0x4
30003456:	04 00                	add    al,0x0
30003458:	20 00                	and    BYTE PTR [eax],al
3000345a:	00 00                	add    BYTE PTR [eax],al
3000345c:	54                   	push   esp
3000345d:	05 00 00 51 d8       	add    eax,0xd8510000
30003462:	ff                   	(bad)  
30003463:	ff f4                	push   esp
30003465:	01 00                	add    DWORD PTR [eax],eax
30003467:	00 00                	add    BYTE PTR [eax],al
30003469:	41                   	inc    ecx
3000346a:	0e                   	push   cs
3000346b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003471:	44                   	inc    esp
30003472:	83 03 03             	add    DWORD PTR [ebx],0x3
30003475:	ec                   	in     al,dx
30003476:	01 c5                	add    ebp,eax
30003478:	c3                   	ret    
30003479:	0c 04                	or     al,0x4
3000347b:	04 1c                	add    al,0x1c
3000347d:	00 00                	add    BYTE PTR [eax],al
3000347f:	00 78 05             	add    BYTE PTR [eax+0x5],bh
30003482:	00 00                	add    BYTE PTR [eax],al
30003484:	21 da                	and    edx,ebx
30003486:	ff                   	(bad)  
30003487:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
3000348a:	00 00                	add    BYTE PTR [eax],al
3000348c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000348f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003495:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
30003498:	0c 04                	or     al,0x4
3000349a:	04 00                	add    al,0x0
3000349c:	1c 00                	sbb    al,0x0
3000349e:	00 00                	add    BYTE PTR [eax],al
300034a0:	98                   	cwde   
300034a1:	05 00 00 50 da       	add    eax,0xda500000
300034a6:	ff                   	(bad)  
300034a7:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
300034aa:	00 00                	add    BYTE PTR [eax],al
300034ac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300034af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034b5:	58                   	pop    eax
300034b6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034b9:	04 00                	add    al,0x0
300034bb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300034be:	00 00                	add    BYTE PTR [eax],al
300034c0:	b8 05 00 00 4c       	mov    eax,0x4c000005
300034c5:	da ff                	(bad)  
300034c7:	ff 20                	jmp    DWORD PTR [eax]
300034c9:	00 00                	add    BYTE PTR [eax],al
300034cb:	00 00                	add    BYTE PTR [eax],al
300034cd:	41                   	inc    ecx
300034ce:	0e                   	push   cs
300034cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034d5:	5c                   	pop    esp
300034d6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034d9:	04 00                	add    al,0x0
300034db:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300034de:	00 00                	add    BYTE PTR [eax],al
300034e0:	d8 05 00 00 4c da    	fadd   DWORD PTR ds:0xda4c0000
300034e6:	ff                   	(bad)  
300034e7:	ff 20                	jmp    DWORD PTR [eax]
300034e9:	00 00                	add    BYTE PTR [eax],al
300034eb:	00 00                	add    BYTE PTR [eax],al
300034ed:	41                   	inc    ecx
300034ee:	0e                   	push   cs
300034ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034f5:	5c                   	pop    esp
300034f6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034f9:	04 00                	add    al,0x0
300034fb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300034fe:	00 00                	add    BYTE PTR [eax],al
30003500:	f8                   	clc    
30003501:	05 00 00 4c da       	add    eax,0xda4c0000
30003506:	ff                   	(bad)  
30003507:	ff 44 01 00          	inc    DWORD PTR [ecx+eax*1+0x0]
3000350b:	00 00                	add    BYTE PTR [eax],al
3000350d:	41                   	inc    ecx
3000350e:	0e                   	push   cs
3000350f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003515:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
30003518:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000351b:	04 1c                	add    al,0x1c
3000351d:	00 00                	add    BYTE PTR [eax],al
3000351f:	00 18                	add    BYTE PTR [eax],bl
30003521:	06                   	push   es
30003522:	00 00                	add    BYTE PTR [eax],al
30003524:	70 db                	jo     30003501 <__x86.get_pc_thunk.cx+0x5fd>
30003526:	ff                   	(bad)  
30003527:	ff 20                	jmp    DWORD PTR [eax]
30003529:	00 00                	add    BYTE PTR [eax],al
3000352b:	00 00                	add    BYTE PTR [eax],al
3000352d:	41                   	inc    ecx
3000352e:	0e                   	push   cs
3000352f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003535:	5c                   	pop    esp
30003536:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003539:	04 00                	add    al,0x0
3000353b:	00 20                	add    BYTE PTR [eax],ah
3000353d:	00 00                	add    BYTE PTR [eax],al
3000353f:	00 38                	add    BYTE PTR [eax],bh
30003541:	06                   	push   es
30003542:	00 00                	add    BYTE PTR [eax],al
30003544:	70 db                	jo     30003521 <__x86.get_pc_thunk.cx+0x61d>
30003546:	ff                   	(bad)  
30003547:	ff b6 01 00 00 00    	push   DWORD PTR [esi+0x1]
3000354d:	41                   	inc    ecx
3000354e:	0e                   	push   cs
3000354f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003555:	47                   	inc    edi
30003556:	83 03 03             	add    DWORD PTR [ebx],0x3
30003559:	ab                   	stos   DWORD PTR es:[edi],eax
3000355a:	01 c5                	add    ebp,eax
3000355c:	c3                   	ret    
3000355d:	0c 04                	or     al,0x4
3000355f:	04 1c                	add    al,0x1c
30003561:	00 00                	add    BYTE PTR [eax],al
30003563:	00 5c 06 00          	add    BYTE PTR [esi+eax*1+0x0],bl
30003567:	00 02                	add    BYTE PTR [edx],al
30003569:	dd ff                	(bad)  
3000356b:	ff 23                	jmp    DWORD PTR [ebx]
3000356d:	00 00                	add    BYTE PTR [eax],al
3000356f:	00 00                	add    BYTE PTR [eax],al
30003571:	41                   	inc    ecx
30003572:	0e                   	push   cs
30003573:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003579:	5f                   	pop    edi
3000357a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000357d:	04 00                	add    al,0x0
3000357f:	00 20                	add    BYTE PTR [eax],ah
30003581:	00 00                	add    BYTE PTR [eax],al
30003583:	00 7c 06 00          	add    BYTE PTR [esi+eax*1+0x0],bh
30003587:	00 08                	add    BYTE PTR [eax],cl
30003589:	dd ff                	(bad)  
3000358b:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
3000358f:	00 00                	add    BYTE PTR [eax],al
30003591:	41                   	inc    ecx
30003592:	0e                   	push   cs
30003593:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003599:	44                   	inc    esp
3000359a:	83 03 02             	add    DWORD PTR [ebx],0x2
3000359d:	64                   	fs
3000359e:	c5 c3 0c             	(bad)  
300035a1:	04 04                	add    al,0x4
300035a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300035a6:	00 00                	add    BYTE PTR [eax],al
300035a8:	a0 06 00 00 50       	mov    al,ds:0x50000006
300035ad:	dd ff                	(bad)  
300035af:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
300035b5:	41                   	inc    ecx
300035b6:	0e                   	push   cs
300035b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035bd:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
300035c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300035c6:	00 00                	add    BYTE PTR [eax],al
300035c8:	c0 06 00             	rol    BYTE PTR [esi],0x0
300035cb:	00 b7 dd ff ff 39    	add    BYTE PTR [edi+0x39ffffdd],dh
300035d1:	00 00                	add    BYTE PTR [eax],al
300035d3:	00 00                	add    BYTE PTR [eax],al
300035d5:	41                   	inc    ecx
300035d6:	0e                   	push   cs
300035d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035dd:	75 c5                	jne    300035a4 <__x86.get_pc_thunk.cx+0x6a0>
300035df:	0c 04                	or     al,0x4
300035e1:	04 00                	add    al,0x0
300035e3:	00 20                	add    BYTE PTR [eax],ah
300035e5:	00 00                	add    BYTE PTR [eax],al
300035e7:	00 e0                	add    al,ah
300035e9:	06                   	push   es
300035ea:	00 00                	add    BYTE PTR [eax],al
300035ec:	d0 dd                	rcr    ch,1
300035ee:	ff                   	(bad)  
300035ef:	ff d4                	call   esp
300035f1:	01 00                	add    DWORD PTR [eax],eax
300035f3:	00 00                	add    BYTE PTR [eax],al
300035f5:	41                   	inc    ecx
300035f6:	0e                   	push   cs
300035f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035fd:	44                   	inc    esp
300035fe:	83 03 03             	add    DWORD PTR [ebx],0x3
30003601:	cc                   	int3   
30003602:	01 c5                	add    ebp,eax
30003604:	c3                   	ret    
30003605:	0c 04                	or     al,0x4
30003607:	04 1c                	add    al,0x1c
30003609:	00 00                	add    BYTE PTR [eax],al
3000360b:	00 04 07             	add    BYTE PTR [edi+eax*1],al
3000360e:	00 00                	add    BYTE PTR [eax],al
30003610:	80 df ff             	sbb    bh,0xff
30003613:	ff 20                	jmp    DWORD PTR [eax]
30003615:	00 00                	add    BYTE PTR [eax],al
30003617:	00 00                	add    BYTE PTR [eax],al
30003619:	41                   	inc    ecx
3000361a:	0e                   	push   cs
3000361b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003621:	5c                   	pop    esp
30003622:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003625:	04 00                	add    al,0x0
30003627:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000362a:	00 00                	add    BYTE PTR [eax],al
3000362c:	24 07                	and    al,0x7
3000362e:	00 00                	add    BYTE PTR [eax],al
30003630:	80 df ff             	sbb    bh,0xff
30003633:	ff 1b                	call   FWORD PTR [ebx]
30003635:	00 00                	add    BYTE PTR [eax],al
30003637:	00 00                	add    BYTE PTR [eax],al
30003639:	41                   	inc    ecx
3000363a:	0e                   	push   cs
3000363b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003641:	57                   	push   edi
30003642:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003645:	04 00                	add    al,0x0
30003647:	00 20                	add    BYTE PTR [eax],ah
30003649:	00 00                	add    BYTE PTR [eax],al
3000364b:	00 44 07 00          	add    BYTE PTR [edi+eax*1+0x0],al
3000364f:	00 7b df             	add    BYTE PTR [ebx-0x21],bh
30003652:	ff                   	(bad)  
30003653:	ff 32                	push   DWORD PTR [edx]
30003655:	00 00                	add    BYTE PTR [eax],al
30003657:	00 00                	add    BYTE PTR [eax],al
30003659:	41                   	inc    ecx
3000365a:	0e                   	push   cs
3000365b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003661:	44                   	inc    esp
30003662:	83 03 6a             	add    DWORD PTR [ebx],0x6a
30003665:	c5 c3 0c             	(bad)  
30003668:	04 04                	add    al,0x4
3000366a:	00 00                	add    BYTE PTR [eax],al
3000366c:	1c 00                	sbb    al,0x0
3000366e:	00 00                	add    BYTE PTR [eax],al
30003670:	68 07 00 00 8c       	push   0x8c000007
30003675:	df ff                	(bad)  
30003677:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
3000367d:	41                   	inc    ecx
3000367e:	0e                   	push   cs
3000367f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003685:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
3000368b:	04 1c                	add    al,0x1c
3000368d:	00 00                	add    BYTE PTR [eax],al
3000368f:	00 88 07 00 00 08    	add    BYTE PTR [eax+0x8000007],cl
30003695:	e1 ff                	loope  30003696 <__x86.get_pc_thunk.cx+0x792>
30003697:	ff c7                	inc    edi
30003699:	00 00                	add    BYTE PTR [eax],al
3000369b:	00 00                	add    BYTE PTR [eax],al
3000369d:	41                   	inc    ecx
3000369e:	0e                   	push   cs
3000369f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300036a5:	02 c3                	add    al,bl
300036a7:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300036aa:	04 00                	add    al,0x0
300036ac:	1c 00                	sbb    al,0x0
300036ae:	00 00                	add    BYTE PTR [eax],al
300036b0:	a8 07                	test   al,0x7
300036b2:	00 00                	add    BYTE PTR [eax],al
300036b4:	af                   	scas   eax,DWORD PTR es:[edi]
300036b5:	e1 ff                	loope  300036b6 <__x86.get_pc_thunk.cx+0x7b2>
300036b7:	ff 20                	jmp    DWORD PTR [eax]
300036b9:	00 00                	add    BYTE PTR [eax],al
300036bb:	00 00                	add    BYTE PTR [eax],al
300036bd:	41                   	inc    ecx
300036be:	0e                   	push   cs
300036bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300036c5:	5c                   	pop    esp
300036c6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300036c9:	04 00                	add    al,0x0
300036cb:	00 20                	add    BYTE PTR [eax],ah
300036cd:	00 00                	add    BYTE PTR [eax],al
300036cf:	00 c8                	add    al,cl
300036d1:	07                   	pop    es
300036d2:	00 00                	add    BYTE PTR [eax],al
300036d4:	b0 e1                	mov    al,0xe1
300036d6:	ff                   	(bad)  
300036d7:	ff 29                	jmp    FWORD PTR [ecx]
300036d9:	00 00                	add    BYTE PTR [eax],al
300036db:	00 00                	add    BYTE PTR [eax],al
300036dd:	41                   	inc    ecx
300036de:	0e                   	push   cs
300036df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300036e5:	44                   	inc    esp
300036e6:	83 03 61             	add    DWORD PTR [ebx],0x61
300036e9:	c5 c3 0c             	(bad)  
300036ec:	04 04                	add    al,0x4
300036ee:	00 00                	add    BYTE PTR [eax],al
300036f0:	20 00                	and    BYTE PTR [eax],al
300036f2:	00 00                	add    BYTE PTR [eax],al
300036f4:	ec                   	in     al,dx
300036f5:	07                   	pop    es
300036f6:	00 00                	add    BYTE PTR [eax],al
300036f8:	b8 e1 ff ff 84       	mov    eax,0x84ffffe1
300036fd:	00 00                	add    BYTE PTR [eax],al
300036ff:	00 00                	add    BYTE PTR [eax],al
30003701:	41                   	inc    ecx
30003702:	0e                   	push   cs
30003703:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003709:	44                   	inc    esp
3000370a:	83 03 02             	add    DWORD PTR [ebx],0x2
3000370d:	7c c5                	jl     300036d4 <__x86.get_pc_thunk.cx+0x7d0>
3000370f:	c3                   	ret    
30003710:	0c 04                	or     al,0x4
30003712:	04 00                	add    al,0x0
30003714:	20 00                	and    BYTE PTR [eax],al
30003716:	00 00                	add    BYTE PTR [eax],al
30003718:	10 08                	adc    BYTE PTR [eax],cl
3000371a:	00 00                	add    BYTE PTR [eax],al
3000371c:	18 e2                	sbb    dl,ah
3000371e:	ff                   	(bad)  
3000371f:	ff                   	(bad)  
30003720:	3e 00 00             	add    BYTE PTR ds:[eax],al
30003723:	00 00                	add    BYTE PTR [eax],al
30003725:	41                   	inc    ecx
30003726:	0e                   	push   cs
30003727:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000372d:	44                   	inc    esp
3000372e:	83 03 76             	add    DWORD PTR [ebx],0x76
30003731:	c5 c3 0c             	(bad)  
30003734:	04 04                	add    al,0x4
30003736:	00 00                	add    BYTE PTR [eax],al
30003738:	20 00                	and    BYTE PTR [eax],al
3000373a:	00 00                	add    BYTE PTR [eax],al
3000373c:	34 08                	xor    al,0x8
3000373e:	00 00                	add    BYTE PTR [eax],al
30003740:	32 e2                	xor    ah,dl
30003742:	ff                   	(bad)  
30003743:	ff                   	(bad)  
30003744:	3e 00 00             	add    BYTE PTR ds:[eax],al
30003747:	00 00                	add    BYTE PTR [eax],al
30003749:	41                   	inc    ecx
3000374a:	0e                   	push   cs
3000374b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003751:	44                   	inc    esp
30003752:	83 03 76             	add    DWORD PTR [ebx],0x76
30003755:	c5 c3 0c             	(bad)  
30003758:	04 04                	add    al,0x4
3000375a:	00 00                	add    BYTE PTR [eax],al
3000375c:	1c 00                	sbb    al,0x0
3000375e:	00 00                	add    BYTE PTR [eax],al
30003760:	58                   	pop    eax
30003761:	08 00                	or     BYTE PTR [eax],al
30003763:	00 4c e2 ff          	add    BYTE PTR [edx+eiz*8-0x1],cl
30003767:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
3000376a:	00 00                	add    BYTE PTR [eax],al
3000376c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000376f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003775:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
30003778:	0c 04                	or     al,0x4
3000377a:	04 00                	add    al,0x0
3000377c:	24 00                	and    al,0x0
3000377e:	00 00                	add    BYTE PTR [eax],al
30003780:	78 08                	js     3000378a <__x86.get_pc_thunk.cx+0x886>
30003782:	00 00                	add    BYTE PTR [eax],al
30003784:	9c                   	pushf  
30003785:	e2 ff                	loop   30003786 <__x86.get_pc_thunk.cx+0x882>
30003787:	ff 5e 00             	call   FWORD PTR [esi+0x0]
3000378a:	00 00                	add    BYTE PTR [eax],al
3000378c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000378f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003795:	45                   	inc    ebp
30003796:	86 03                	xchg   BYTE PTR [ebx],al
30003798:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
3000379c:	c3                   	ret    
3000379d:	41                   	inc    ecx
3000379e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300037a2:	04 04                	add    al,0x4
300037a4:	1c 00                	sbb    al,0x0
300037a6:	00 00                	add    BYTE PTR [eax],al
300037a8:	a0 08 00 00 d4       	mov    al,ds:0xd4000008
300037ad:	e2 ff                	loop   300037ae <__x86.get_pc_thunk.cx+0x8aa>
300037af:	ff 40 00             	inc    DWORD PTR [eax+0x0]
300037b2:	00 00                	add    BYTE PTR [eax],al
300037b4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300037b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300037bd:	7c c5                	jl     30003784 <__x86.get_pc_thunk.cx+0x880>
300037bf:	0c 04                	or     al,0x4
300037c1:	04 00                	add    al,0x0
300037c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300037c6:	00 00                	add    BYTE PTR [eax],al
300037c8:	c0 08 00             	ror    BYTE PTR [eax],0x0
300037cb:	00 f4                	add    ah,dh
300037cd:	e2 ff                	loop   300037ce <__x86.get_pc_thunk.cx+0x8ca>
300037cf:	ff 40 00             	inc    DWORD PTR [eax+0x0]
300037d2:	00 00                	add    BYTE PTR [eax],al
300037d4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300037d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300037dd:	7c c5                	jl     300037a4 <__x86.get_pc_thunk.cx+0x8a0>
300037df:	0c 04                	or     al,0x4
300037e1:	04 00                	add    al,0x0
300037e3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300037e6:	00 00                	add    BYTE PTR [eax],al
300037e8:	e0 08                	loopne 300037f2 <__x86.get_pc_thunk.cx+0x8ee>
300037ea:	00 00                	add    BYTE PTR [eax],al
300037ec:	14 e3                	adc    al,0xe3
300037ee:	ff                   	(bad)  
300037ef:	ff 47 00             	inc    DWORD PTR [edi+0x0]
300037f2:	00 00                	add    BYTE PTR [eax],al
300037f4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300037f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300037fd:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
30003800:	0c 04                	or     al,0x4
30003802:	04 00                	add    al,0x0
30003804:	1c 00                	sbb    al,0x0
30003806:	00 00                	add    BYTE PTR [eax],al
30003808:	00 09                	add    BYTE PTR [ecx],cl
3000380a:	00 00                	add    BYTE PTR [eax],al
3000380c:	3c e3                	cmp    al,0xe3
3000380e:	ff                   	(bad)  
3000380f:	ff 30                	push   DWORD PTR [eax]
30003811:	00 00                	add    BYTE PTR [eax],al
30003813:	00 00                	add    BYTE PTR [eax],al
30003815:	41                   	inc    ecx
30003816:	0e                   	push   cs
30003817:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000381d:	6c                   	ins    BYTE PTR es:[edi],dx
3000381e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003821:	04 00                	add    al,0x0
30003823:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003826:	00 00                	add    BYTE PTR [eax],al
30003828:	20 09                	and    BYTE PTR [ecx],cl
3000382a:	00 00                	add    BYTE PTR [eax],al
3000382c:	4c                   	dec    esp
3000382d:	e3 ff                	jecxz  3000382e <__x86.get_pc_thunk.cx+0x92a>
3000382f:	ff 59 00             	call   FWORD PTR [ecx+0x0]
30003832:	00 00                	add    BYTE PTR [eax],al
30003834:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003837:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000383d:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
30003840:	0c 04                	or     al,0x4
30003842:	04 00                	add    al,0x0
30003844:	1c 00                	sbb    al,0x0
30003846:	00 00                	add    BYTE PTR [eax],al
30003848:	40                   	inc    eax
30003849:	09 00                	or     DWORD PTR [eax],eax
3000384b:	00 88 e3 ff ff 31    	add    BYTE PTR [eax+0x31ffffe3],cl
30003851:	00 00                	add    BYTE PTR [eax],al
30003853:	00 00                	add    BYTE PTR [eax],al
30003855:	41                   	inc    ecx
30003856:	0e                   	push   cs
30003857:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000385d:	6d                   	ins    DWORD PTR es:[edi],dx
3000385e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003861:	04 00                	add    al,0x0
30003863:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003866:	00 00                	add    BYTE PTR [eax],al
30003868:	60                   	pusha  
30003869:	09 00                	or     DWORD PTR [eax],eax
3000386b:	00 99 e3 ff ff 31    	add    BYTE PTR [ecx+0x31ffffe3],bl
30003871:	00 00                	add    BYTE PTR [eax],al
30003873:	00 00                	add    BYTE PTR [eax],al
30003875:	41                   	inc    ecx
30003876:	0e                   	push   cs
30003877:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000387d:	6d                   	ins    DWORD PTR es:[edi],dx
3000387e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003881:	04 00                	add    al,0x0
30003883:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003886:	00 00                	add    BYTE PTR [eax],al
30003888:	80 09 00             	or     BYTE PTR [ecx],0x0
3000388b:	00 ac e3 ff ff 67 00 	add    BYTE PTR [ebx+eiz*8+0x67ffff],ch
30003892:	00 00                	add    BYTE PTR [eax],al
30003894:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003897:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000389d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
300038a0:	0c 04                	or     al,0x4
300038a2:	04 00                	add    al,0x0
300038a4:	1c 00                	sbb    al,0x0
300038a6:	00 00                	add    BYTE PTR [eax],al
300038a8:	a0 09 00 00 f3       	mov    al,ds:0xf3000009
300038ad:	e3 ff                	jecxz  300038ae <__x86.get_pc_thunk.cx+0x9aa>
300038af:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
300038b2:	00 00                	add    BYTE PTR [eax],al
300038b4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300038b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300038bd:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
300038c0:	0c 04                	or     al,0x4
300038c2:	04 00                	add    al,0x0
300038c4:	1c 00                	sbb    al,0x0
300038c6:	00 00                	add    BYTE PTR [eax],al
300038c8:	c0 09 00             	ror    BYTE PTR [ecx],0x0
300038cb:	00 3c e4             	add    BYTE PTR [esp+eiz*8],bh
300038ce:	ff                   	(bad)  
300038cf:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
300038d2:	00 00                	add    BYTE PTR [eax],al
300038d4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300038d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300038dd:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
300038e1:	04 04                	add    al,0x4
300038e3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300038e6:	00 00                	add    BYTE PTR [eax],al
300038e8:	e0 09                	loopne 300038f3 <__x86.get_pc_thunk.cx+0x9ef>
300038ea:	00 00                	add    BYTE PTR [eax],al
300038ec:	7c e4                	jl     300038d2 <__x86.get_pc_thunk.cx+0x9ce>
300038ee:	ff                   	(bad)  
300038ef:	ff 20                	jmp    DWORD PTR [eax]
300038f1:	00 00                	add    BYTE PTR [eax],al
300038f3:	00 00                	add    BYTE PTR [eax],al
300038f5:	41                   	inc    ecx
300038f6:	0e                   	push   cs
300038f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300038fd:	5c                   	pop    esp
300038fe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003901:	04 00                	add    al,0x0
30003903:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003906:	00 00                	add    BYTE PTR [eax],al
30003908:	00 0a                	add    BYTE PTR [edx],cl
3000390a:	00 00                	add    BYTE PTR [eax],al
3000390c:	7c e4                	jl     300038f2 <__x86.get_pc_thunk.cx+0x9ee>
3000390e:	ff                   	(bad)  
3000390f:	ff                   	(bad)  
30003910:	7d 01                	jge    30003913 <__x86.get_pc_thunk.cx+0xa0f>
30003912:	00 00                	add    BYTE PTR [eax],al
30003914:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003917:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000391d:	46                   	inc    esi
3000391e:	87 03                	xchg   DWORD PTR [ebx],eax
30003920:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
30003923:	05 03 70 01 c3       	add    eax,0xc3017003
30003928:	41                   	inc    ecx
30003929:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
3000392d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003930:	04 00                	add    al,0x0
30003932:	00 00                	add    BYTE PTR [eax],al
30003934:	1c 00                	sbb    al,0x0
30003936:	00 00                	add    BYTE PTR [eax],al
30003938:	30 0a                	xor    BYTE PTR [edx],cl
3000393a:	00 00                	add    BYTE PTR [eax],al
3000393c:	cc                   	int3   
3000393d:	e5 ff                	in     eax,0xff
3000393f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003945:	41                   	inc    ecx
30003946:	0e                   	push   cs
30003947:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000394d:	59                   	pop    ecx
3000394e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003951:	04 00                	add    al,0x0
30003953:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003956:	00 00                	add    BYTE PTR [eax],al
30003958:	50                   	push   eax
30003959:	0a 00                	or     al,BYTE PTR [eax]
3000395b:	00 cc                	add    ah,cl
3000395d:	e5 ff                	in     eax,0xff
3000395f:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
30003966:	0e                   	push   cs
30003967:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000396d:	46                   	inc    esi
3000396e:	87 03                	xchg   DWORD PTR [ebx],eax
30003970:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
30003973:	05 03 8f 01 c3       	add    eax,0xc3018f03
30003978:	41                   	inc    ecx
30003979:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
3000397d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003980:	04 00                	add    al,0x0
30003982:	00 00                	add    BYTE PTR [eax],al
30003984:	20 00                	and    BYTE PTR [eax],al
30003986:	00 00                	add    BYTE PTR [eax],al
30003988:	80 0a 00             	or     BYTE PTR [edx],0x0
3000398b:	00 38                	add    BYTE PTR [eax],bh
3000398d:	e7 ff                	out    0xff,eax
3000398f:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
30003995:	41                   	inc    ecx
30003996:	0e                   	push   cs
30003997:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000399d:	44                   	inc    esp
3000399e:	83 03 02             	add    DWORD PTR [ebx],0x2
300039a1:	8e c5                	mov    es,ebp
300039a3:	c3                   	ret    
300039a4:	0c 04                	or     al,0x4
300039a6:	04 00                	add    al,0x0
300039a8:	1c 00                	sbb    al,0x0
300039aa:	00 00                	add    BYTE PTR [eax],al
300039ac:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
300039ad:	0a 00                	or     al,BYTE PTR [eax]
300039af:	00 aa e7 ff ff 20    	add    BYTE PTR [edx+0x20ffffe7],ch
300039b5:	00 00                	add    BYTE PTR [eax],al
300039b7:	00 00                	add    BYTE PTR [eax],al
300039b9:	41                   	inc    ecx
300039ba:	0e                   	push   cs
300039bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300039c1:	5c                   	pop    esp
300039c2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300039c5:	04 00                	add    al,0x0
300039c7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
300039ca:	00 00                	add    BYTE PTR [eax],al
300039cc:	c4 0a                	les    ecx,FWORD PTR [edx]
300039ce:	00 00                	add    BYTE PTR [eax],al
300039d0:	ac                   	lods   al,BYTE PTR ds:[esi]
300039d1:	e7 ff                	out    0xff,eax
300039d3:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
300039d6:	00 00                	add    BYTE PTR [eax],al
300039d8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300039db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300039e1:	42                   	inc    edx
300039e2:	86 03                	xchg   BYTE PTR [ebx],al
300039e4:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
300039e8:	c3                   	ret    
300039e9:	41                   	inc    ecx
300039ea:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300039ee:	04 04                	add    al,0x4
300039f0:	1c 00                	sbb    al,0x0
300039f2:	00 00                	add    BYTE PTR [eax],al
300039f4:	ec                   	in     al,dx
300039f5:	0a 00                	or     al,BYTE PTR [eax]
300039f7:	00 f2                	add    dl,dh
300039f9:	e7 ff                	out    0xff,eax
300039fb:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003a01:	41                   	inc    ecx
30003a02:	0e                   	push   cs
30003a03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003a09:	59                   	pop    ecx
30003a0a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003a0d:	04 00                	add    al,0x0
30003a0f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003a12:	00 00                	add    BYTE PTR [eax],al
30003a14:	0c 0b                	or     al,0xb
30003a16:	00 00                	add    BYTE PTR [eax],al
30003a18:	f0 e7 ff             	lock out 0xff,eax
30003a1b:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
30003a1f:	00 00                	add    BYTE PTR [eax],al
30003a21:	41                   	inc    ecx
30003a22:	0e                   	push   cs
30003a23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003a29:	45                   	inc    ebp
30003a2a:	86 03                	xchg   BYTE PTR [ebx],al
30003a2c:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
30003a30:	41                   	inc    ecx
30003a31:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003a35:	04 04                	add    al,0x4
30003a37:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003a3a:	00 00                	add    BYTE PTR [eax],al
30003a3c:	34 0b                	xor    al,0xb
30003a3e:	00 00                	add    BYTE PTR [eax],al
30003a40:	0c e8                	or     al,0xe8
30003a42:	ff                   	(bad)  
30003a43:	ff 19                	call   FWORD PTR [ecx]
30003a45:	03 00                	add    eax,DWORD PTR [eax]
30003a47:	00 00                	add    BYTE PTR [eax],al
30003a49:	41                   	inc    ecx
30003a4a:	0e                   	push   cs
30003a4b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003a51:	44                   	inc    esp
30003a52:	83 03 03             	add    DWORD PTR [ebx],0x3
30003a55:	10 03                	adc    BYTE PTR [ebx],al
30003a57:	c3                   	ret    
30003a58:	41                   	inc    ecx
30003a59:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003a5c:	04 00                	add    al,0x0
30003a5e:	00 00                	add    BYTE PTR [eax],al
30003a60:	1c 00                	sbb    al,0x0
30003a62:	00 00                	add    BYTE PTR [eax],al
30003a64:	5c                   	pop    esp
30003a65:	0b 00                	or     eax,DWORD PTR [eax]
30003a67:	00 fd                	add    ch,bh
30003a69:	ea ff ff 1d 00 00 00 	jmp    0x0:0x1dffff
30003a70:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003a73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003a79:	59                   	pop    ecx
30003a7a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003a7d:	04 00                	add    al,0x0
30003a7f:	00 20                	add    BYTE PTR [eax],ah
30003a81:	00 00                	add    BYTE PTR [eax],al
30003a83:	00 7c 0b 00          	add    BYTE PTR [ebx+ecx*1+0x0],bh
30003a87:	00 fa                	add    dl,bh
30003a89:	ea ff ff 3f 00 00 00 	jmp    0x0:0x3fffff
30003a90:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003a93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003a99:	44                   	inc    esp
30003a9a:	83 03 77             	add    DWORD PTR [ebx],0x77
30003a9d:	c5 c3 0c             	(bad)  
30003aa0:	04 04                	add    al,0x4
30003aa2:	00 00                	add    BYTE PTR [eax],al
30003aa4:	1c 00                	sbb    al,0x0
30003aa6:	00 00                	add    BYTE PTR [eax],al
30003aa8:	a0 0b 00 00 15       	mov    al,ds:0x1500000b
30003aad:	eb ff                	jmp    30003aae <__x86.get_pc_thunk.cx+0xbaa>
30003aaf:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30003ab5:	41                   	inc    ecx
30003ab6:	0e                   	push   cs
30003ab7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003abd:	71 c5                	jno    30003a84 <__x86.get_pc_thunk.cx+0xb80>
30003abf:	0c 04                	or     al,0x4
30003ac1:	04 00                	add    al,0x0
30003ac3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003ac6:	00 00                	add    BYTE PTR [eax],al
30003ac8:	c0 0b 00             	ror    BYTE PTR [ebx],0x0
30003acb:	00 2a                	add    BYTE PTR [edx],ch
30003acd:	eb ff                	jmp    30003ace <__x86.get_pc_thunk.cx+0xbca>
30003acf:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003ad5:	41                   	inc    ecx
30003ad6:	0e                   	push   cs
30003ad7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003add:	59                   	pop    ecx
30003ade:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003ae1:	04 00                	add    al,0x0
30003ae3:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003ae6:	00 00                	add    BYTE PTR [eax],al
30003ae8:	e0 0b                	loopne 30003af5 <__x86.get_pc_thunk.cx+0xbf1>
30003aea:	00 00                	add    BYTE PTR [eax],al
30003aec:	27                   	daa    
30003aed:	eb ff                	jmp    30003aee <__x86.get_pc_thunk.cx+0xbea>
30003aef:	ff 57 08             	call   DWORD PTR [edi+0x8]
30003af2:	00 00                	add    BYTE PTR [eax],al
30003af4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003af7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003afd:	46                   	inc    esi
30003afe:	87 03                	xchg   DWORD PTR [ebx],eax
30003b00:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
30003b03:	05 03 4a 08 c3       	add    eax,0xc3084a03
30003b08:	41                   	inc    ecx
30003b09:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003b0d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003b10:	04 00                	add    al,0x0
30003b12:	00 00                	add    BYTE PTR [eax],al
30003b14:	24 00                	and    al,0x0
30003b16:	00 00                	add    BYTE PTR [eax],al
30003b18:	10 0c 00             	adc    BYTE PTR [eax+eax*1],cl
30003b1b:	00 4e f3             	add    BYTE PTR [esi-0xd],cl
30003b1e:	ff                   	(bad)  
30003b1f:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
30003b22:	00 00                	add    BYTE PTR [eax],al
30003b24:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003b27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003b2d:	45                   	inc    ebp
30003b2e:	86 03                	xchg   BYTE PTR [ebx],al
30003b30:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
30003b34:	c3                   	ret    
30003b35:	41                   	inc    ecx
30003b36:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003b3a:	04 04                	add    al,0x4
30003b3c:	10 00                	adc    BYTE PTR [eax],al
30003b3e:	00 00                	add    BYTE PTR [eax],al
30003b40:	38 0c 00             	cmp    BYTE PTR [eax+eax*1],cl
30003b43:	00 c0                	add    al,al
30003b45:	f3 ff                	repz (bad) 
30003b47:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30003b4a:	00 00                	add    BYTE PTR [eax],al
30003b4c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

30003b50 <.dynsym>:
	...
30003b60:	0e                   	push   cs
30003b61:	01 00                	add    DWORD PTR [eax],eax
30003b63:	00 80 1a 00 30 40    	add    BYTE PTR [eax+0x4030001a],al
30003b69:	00 00                	add    BYTE PTR [eax],al
30003b6b:	00 12                	add    BYTE PTR [edx],dl
30003b6d:	00 01                	add    BYTE PTR [ecx],al
30003b6f:	00 b0 00 00 00 f4    	add    BYTE PTR [eax-0xc000000],dh
30003b75:	0e                   	push   cs
30003b76:	00 30                	add    BYTE PTR [eax],dh
30003b78:	1c 00                	sbb    al,0x0
30003b7a:	00 00                	add    BYTE PTR [eax],al
30003b7c:	12 00                	adc    al,BYTE PTR [eax]
30003b7e:	01 00                	add    DWORD PTR [eax],eax
30003b80:	7a 00                	jp     30003b82 <__x86.get_pc_thunk.cx+0xc7e>
30003b82:	00 00                	add    BYTE PTR [eax],al
30003b84:	ae                   	scas   al,BYTE PTR es:[edi]
30003b85:	0a 00                	or     al,BYTE PTR [eax]
30003b87:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
30003b8a:	00 00                	add    BYTE PTR [eax],al
30003b8c:	12 00                	adc    al,BYTE PTR [eax]
30003b8e:	01 00                	add    DWORD PTR [eax],eax
30003b90:	80 00 00             	add    BYTE PTR [eax],0x0
30003b93:	00 e2                	add    dl,ah
30003b95:	0a 00                	or     al,BYTE PTR [eax]
30003b97:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
30003b9a:	00 00                	add    BYTE PTR [eax],al
30003b9c:	12 00                	adc    al,BYTE PTR [eax]
30003b9e:	01 00                	add    DWORD PTR [eax],eax
30003ba0:	1d 01 00 00 78       	sbb    eax,0x78000001
30003ba5:	1b 00                	sbb    eax,DWORD PTR [eax]
30003ba7:	30 59 00             	xor    BYTE PTR [ecx+0x0],bl
30003baa:	00 00                	add    BYTE PTR [eax],al
30003bac:	12 00                	adc    al,BYTE PTR [eax]
30003bae:	01 00                	add    DWORD PTR [eax],eax
30003bb0:	f7 00 00 00 b0 18    	test   DWORD PTR [eax],0x18b00000
30003bb6:	00 30                	add    BYTE PTR [eax],dh
30003bb8:	84 00                	test   BYTE PTR [eax],al
30003bba:	00 00                	add    BYTE PTR [eax],al
30003bbc:	12 00                	adc    al,BYTE PTR [eax]
30003bbe:	01 00                	add    DWORD PTR [eax],eax
30003bc0:	21 00                	and    DWORD PTR [eax],eax
30003bc2:	00 00                	add    BYTE PTR [eax],al
30003bc4:	00 04 00             	add    BYTE PTR [eax+eax*1],al
30003bc7:	30 aa 00 00 00 12    	xor    BYTE PTR [edx+0x12000000],ch
30003bcd:	00 01                	add    BYTE PTR [ecx],al
30003bcf:	00 6b 00             	add    BYTE PTR [ebx+0x0],ch
30003bd2:	00 00                	add    BYTE PTR [eax],al
30003bd4:	f8                   	clc    
30003bd5:	07                   	pop    es
30003bd6:	00 30                	add    BYTE PTR [eax],dh
30003bd8:	ba 00 00 00 12       	mov    edx,0x12000000
30003bdd:	00 01                	add    BYTE PTR [ecx],al
30003bdf:	00 66 00             	add    BYTE PTR [esi+0x0],ah
30003be2:	00 00                	add    BYTE PTR [eax],al
30003be4:	c9                   	leave  
30003be5:	07                   	pop    es
30003be6:	00 30                	add    BYTE PTR [eax],dh
30003be8:	2f                   	das    
30003be9:	00 00                	add    BYTE PTR [eax],al
30003beb:	00 12                	add    BYTE PTR [edx],dl
30003bed:	00 01                	add    BYTE PTR [ecx],al
30003bef:	00 e4                	add    ah,ah
30003bf1:	00 00                	add    BYTE PTR [eax],al
30003bf3:	00 00                	add    BYTE PTR [eax],al
30003bf5:	16                   	push   ss
30003bf6:	00 30                	add    BYTE PTR [eax],dh
30003bf8:	9b                   	fwait
30003bf9:	01 00                	add    DWORD PTR [eax],eax
30003bfb:	00 12                	add    BYTE PTR [edx],dl
30003bfd:	00 01                	add    BYTE PTR [ecx],al
30003bff:	00 c4                	add    ah,al
30003c01:	00 00                	add    BYTE PTR [eax],al
30003c03:	00 94 10 00 30 20 00 	add    BYTE PTR [eax+edx*1+0x203000],dl
30003c0a:	00 00                	add    BYTE PTR [eax],al
30003c0c:	12 00                	adc    al,BYTE PTR [eax]
30003c0e:	01 00                	add    DWORD PTR [eax],eax
30003c10:	4c                   	dec    esp
30003c11:	00 00                	add    BYTE PTR [eax],al
30003c13:	00 60 07             	add    BYTE PTR [eax+0x7],ah
30003c16:	00 30                	add    BYTE PTR [eax],dh
30003c18:	26 00 00             	add    BYTE PTR es:[eax],al
30003c1b:	00 12                	add    BYTE PTR [edx],dl
30003c1d:	00 01                	add    BYTE PTR [ecx],al
30003c1f:	00 d8                	add    al,bl
30003c21:	00 00                	add    BYTE PTR [eax],al
30003c23:	00 90 15 00 30 20    	add    BYTE PTR [eax+0x20300015],dl
30003c29:	00 00                	add    BYTE PTR [eax],al
30003c2b:	00 12                	add    BYTE PTR [edx],dl
30003c2d:	00 01                	add    BYTE PTR [ecx],al
30003c2f:	00 87 00 00 00 81    	add    BYTE PTR [edi-0x7f000000],al
30003c35:	0b 00                	or     eax,DWORD PTR [eax]
30003c37:	30 75 00             	xor    BYTE PTR [ebp+0x0],dh
30003c3a:	00 00                	add    BYTE PTR [eax],al
30003c3c:	12 00                	adc    al,BYTE PTR [eax]
30003c3e:	01 00                	add    DWORD PTR [eax],eax
30003c40:	ca 00 00             	retf   0x0
30003c43:	00 6a 12             	add    BYTE PTR [edx+0x12],ch
30003c46:	00 30                	add    BYTE PTR [eax],dh
30003c48:	23 00                	and    eax,DWORD PTR [eax]
30003c4a:	00 00                	add    BYTE PTR [eax],al
30003c4c:	12 00                	adc    al,BYTE PTR [eax]
30003c4e:	01 00                	add    DWORD PTR [eax],eax
30003c50:	3d 01 00 00 88       	cmp    eax,0x88000001
30003c55:	1d 00 30 7d 01       	sbb    eax,0x17d3000
30003c5a:	00 00                	add    BYTE PTR [eax],al
30003c5c:	12 00                	adc    al,BYTE PTR [eax]
30003c5e:	01 00                	add    DWORD PTR [eax],eax
30003c60:	17                   	pop    ss
30003c61:	00 00                	add    BYTE PTR [eax],al
30003c63:	00 2b                	add    BYTE PTR [ebx],ch
30003c65:	02 00                	add    al,BYTE PTR [eax]
30003c67:	30 bb 00 00 00 12    	xor    BYTE PTR [ebx+0x12000000],bh
30003c6d:	00 01                	add    BYTE PTR [ecx],al
30003c6f:	00 6c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],ch
30003c73:	00 65 25             	add    BYTE PTR [ebp+0x25],ah
30003c76:	00 30                	add    BYTE PTR [eax],dh
30003c78:	1d 00 00 00 12       	sbb    eax,0x12000000
30003c7d:	00 01                	add    BYTE PTR [ecx],al
30003c7f:	00 4d 01             	add    BYTE PTR [ebp+0x1],cl
30003c82:	00 00                	add    BYTE PTR [eax],al
30003c84:	28 1f                	sub    BYTE PTR [edi],bl
30003c86:	00 30                	add    BYTE PTR [eax],dh
30003c88:	9c                   	pushf  
30003c89:	01 00                	add    DWORD PTR [eax],eax
30003c8b:	00 12                	add    BYTE PTR [edx],dl
30003c8d:	00 01                	add    BYTE PTR [ecx],al
30003c8f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
30003c92:	00 00                	add    BYTE PTR [eax],al
30003c94:	ea 09 00 30 a5 00 00 	jmp    0x0:0xa5300009
30003c9b:	00 12                	add    BYTE PTR [edx],dl
30003c9d:	00 01                	add    BYTE PTR [ecx],al
30003c9f:	00 f2                	add    dl,dh
30003ca1:	00 00                	add    BYTE PTR [eax],al
30003ca3:	00 84 18 00 30 29 00 	add    BYTE PTR [eax+ebx*1+0x293000],al
30003caa:	00 00                	add    BYTE PTR [eax],al
30003cac:	12 00                	adc    al,BYTE PTR [eax]
30003cae:	01 00                	add    DWORD PTR [eax],eax
30003cb0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
30003cb1:	00 00                	add    BYTE PTR [eax],al
30003cb3:	00 b1 0c 00 30 f4    	add    BYTE PTR [ecx-0xbcffff4],dh
30003cb9:	01 00                	add    DWORD PTR [eax],eax
30003cbb:	00 12                	add    BYTE PTR [edx],dl
30003cbd:	00 01                	add    BYTE PTR [ecx],al
30003cbf:	00 3f                	add    BYTE PTR [edi],bh
30003cc1:	00 00                	add    BYTE PTR [eax],al
30003cc3:	00 f8                	add    al,bh
30003cc5:	06                   	push   es
30003cc6:	00 30                	add    BYTE PTR [eax],dh
30003cc8:	35 00 00 00 12       	xor    eax,0x12000000
30003ccd:	00 01                	add    BYTE PTR [ecx],al
30003ccf:	00 00                	add    BYTE PTR [eax],al
30003cd1:	01 00                	add    DWORD PTR [eax],eax
30003cd3:	00 34 19             	add    BYTE PTR [ecx+ebx*1],dh
30003cd6:	00 30                	add    BYTE PTR [eax],dh
30003cd8:	3e 00 00             	add    BYTE PTR ds:[eax],al
30003cdb:	00 12                	add    BYTE PTR [edx],dl
30003cdd:	00 01                	add    BYTE PTR [ecx],al
30003cdf:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
30003ce2:	00 00                	add    BYTE PTR [eax],al
30003ce4:	08 22                	or     BYTE PTR [edx],ah
30003ce6:	00 30                	add    BYTE PTR [eax],dh
30003ce8:	44                   	inc    esp
30003ce9:	00 00                	add    BYTE PTR [eax],al
30003ceb:	00 12                	add    BYTE PTR [edx],dl
30003ced:	00 01                	add    BYTE PTR [ecx],al
30003cef:	00 9f 00 00 00 65    	add    BYTE PTR [edi+0x65000000],bl
30003cf5:	0c 00                	or     al,0x0
30003cf7:	30 4c 00 00          	xor    BYTE PTR [eax+eax*1+0x0],cl
30003cfb:	00 12                	add    BYTE PTR [edx],dl
30003cfd:	00 01                	add    BYTE PTR [ecx],al
30003cff:	00 45 00             	add    BYTE PTR [ebp+0x0],al
30003d02:	00 00                	add    BYTE PTR [eax],al
30003d04:	2d 07 00 30 31       	sub    eax,0x31300007
30003d09:	00 00                	add    BYTE PTR [eax],al
30003d0b:	00 12                	add    BYTE PTR [edx],dl
30003d0d:	00 01                	add    BYTE PTR [ecx],al
30003d0f:	00 8b 01 00 00 13    	add    BYTE PTR [ebx+0x13000001],cl
30003d15:	26 00 30             	add    BYTE PTR es:[eax],dh
30003d18:	57                   	push   edi
30003d19:	08 00                	or     BYTE PTR [eax],al
30003d1b:	00 12                	add    BYTE PTR [edx],dl
30003d1d:	00 01                	add    BYTE PTR [ecx],al
30003d1f:	00 5c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],bl
30003d23:	00 ea                	add    dl,ch
30003d25:	21 00                	and    DWORD PTR [eax],eax
30003d27:	30 1d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,bl
30003d2d:	00 01                	add    BYTE PTR [ecx],al
30003d2f:	00 3a                	add    BYTE PTR [edx],bh
30003d31:	00 00                	add    BYTE PTR [eax],al
30003d33:	00 c3                	add    bl,al
30003d35:	06                   	push   es
30003d36:	00 30                	add    BYTE PTR [eax],dh
30003d38:	35 00 00 00 12       	xor    eax,0x12000000
30003d3d:	00 01                	add    BYTE PTR [ecx],al
30003d3f:	00 2d 01 00 00 38    	add    BYTE PTR ds:0x38000001,ch
30003d45:	1c 00                	sbb    al,0x0
30003d47:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
30003d4a:	00 00                	add    BYTE PTR [eax],al
30003d4c:	12 00                	adc    al,BYTE PTR [eax]
30003d4e:	01 00                	add    DWORD PTR [eax],eax
30003d50:	35 01 00 00 68       	xor    eax,0x68000001
30003d55:	1d 00 30 20 00       	sbb    eax,0x203000
30003d5a:	00 00                	add    BYTE PTR [eax],al
30003d5c:	12 00                	adc    al,BYTE PTR [eax]
30003d5e:	01 00                	add    DWORD PTR [eax],eax
30003d60:	28 00                	sub    BYTE PTR [eax],al
30003d62:	00 00                	add    BYTE PTR [eax],al
30003d64:	aa                   	stos   BYTE PTR es:[edi],al
30003d65:	04 00                	add    al,0x0
30003d67:	30 c1                	xor    cl,al
30003d69:	01 00                	add    DWORD PTR [eax],eax
30003d6b:	00 12                	add    BYTE PTR [edx],dl
30003d6d:	00 01                	add    BYTE PTR [ecx],al
30003d6f:	00 10                	add    BYTE PTR [eax],dl
30003d71:	00 00                	add    BYTE PTR [eax],al
30003d73:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
30003d76:	00 30                	add    BYTE PTR [eax],dh
30003d78:	97                   	xchg   edi,eax
30003d79:	00 00                	add    BYTE PTR [eax],al
30003d7b:	00 12                	add    BYTE PTR [edx],dl
30003d7d:	00 01                	add    BYTE PTR [ecx],al
30003d7f:	00 9a 00 00 00 3c    	add    BYTE PTR [edx+0x3c000000],bl
30003d85:	0c 00                	or     al,0x0
30003d87:	30 29                	xor    BYTE PTR [ecx],ch
30003d89:	00 00                	add    BYTE PTR [eax],al
30003d8b:	00 12                	add    BYTE PTR [edx],dl
30003d8d:	00 01                	add    BYTE PTR [ecx],al
30003d8f:	00 51 00             	add    BYTE PTR [ecx+0x0],dl
30003d92:	00 00                	add    BYTE PTR [eax],al
30003d94:	00 00                	add    BYTE PTR [eax],al
30003d96:	13 00                	adc    eax,DWORD PTR [eax]
30003d98:	00 00                	add    BYTE PTR [eax],al
30003d9a:	00 00                	add    BYTE PTR [eax],al
30003d9c:	10 00                	adc    BYTE PTR [eax],al
30003d9e:	01 00                	add    DWORD PTR [eax],eax
30003da0:	75 01                	jne    30003da3 <__x86.get_pc_thunk.cx+0xe9f>
30003da2:	00 00                	add    BYTE PTR [eax],al
30003da4:	82                   	(bad)  
30003da5:	25 00 30 3f 00       	and    eax,0x3f3000
30003daa:	00 00                	add    BYTE PTR [eax],al
30003dac:	12 00                	adc    al,BYTE PTR [eax]
30003dae:	01 00                	add    DWORD PTR [eax],eax
30003db0:	eb 00                	jmp    30003db2 <__x86.get_pc_thunk.cx+0xeae>
30003db2:	00 00                	add    BYTE PTR [eax],al
30003db4:	63 18                	arpl   WORD PTR [eax],bx
30003db6:	00 30                	add    BYTE PTR [eax],dh
30003db8:	20 00                	and    BYTE PTR [eax],al
30003dba:	00 00                	add    BYTE PTR [eax],al
30003dbc:	12 00                	adc    al,BYTE PTR [eax]
30003dbe:	01 00                	add    DWORD PTR [eax],eax
30003dc0:	54                   	push   esp
30003dc1:	01 00                	add    DWORD PTR [eax],eax
30003dc3:	00 5a 21             	add    BYTE PTR [edx+0x21],bl
30003dc6:	00 30                	add    BYTE PTR [eax],dh
30003dc8:	20 00                	and    BYTE PTR [eax],al
30003dca:	00 00                	add    BYTE PTR [eax],al
30003dcc:	12 00                	adc    al,BYTE PTR [eax]
30003dce:	01 00                	add    DWORD PTR [eax],eax
30003dd0:	61                   	popa   
30003dd1:	00 00                	add    BYTE PTR [eax],al
30003dd3:	00 86 07 00 30 43    	add    BYTE PTR [esi+0x43300007],al
30003dd9:	00 00                	add    BYTE PTR [eax],al
30003ddb:	00 12                	add    BYTE PTR [edx],dl
30003ddd:	00 01                	add    BYTE PTR [ecx],al
30003ddf:	00 07                	add    BYTE PTR [edi],al
30003de1:	01 00                	add    DWORD PTR [eax],eax
30003de3:	00 20                	add    BYTE PTR [eax],ah
30003de5:	1a 00                	sbb    al,BYTE PTR [eax]
30003de7:	30 5e 00             	xor    BYTE PTR [esi+0x0],bl
30003dea:	00 00                	add    BYTE PTR [eax],al
30003dec:	12 00                	adc    al,BYTE PTR [eax]
30003dee:	01 00                	add    DWORD PTR [eax],eax
30003df0:	bd 00 00 00 30       	mov    ebp,0x30000000
30003df5:	0f 00                	(bad)  
30003df7:	30 20                	xor    BYTE PTR [eax],ah
30003df9:	00 00                	add    BYTE PTR [eax],al
30003dfb:	00 12                	add    BYTE PTR [edx],dl
30003dfd:	00 01                	add    BYTE PTR [ecx],al
30003dff:	00 08                	add    BYTE PTR [eax],cl
30003e01:	00 00                	add    BYTE PTR [eax],al
30003e03:	00 70 00             	add    BYTE PTR [eax+0x0],dh
30003e06:	00 30                	add    BYTE PTR [eax],dh
30003e08:	55                   	push   ebp
30003e09:	00 00                	add    BYTE PTR [eax],al
30003e0b:	00 12                	add    BYTE PTR [edx],dl
30003e0d:	00 01                	add    BYTE PTR [ecx],al
30003e0f:	00 15 01 00 00 00    	add    BYTE PTR ds:0x1,dl
30003e15:	1b 00                	sbb    eax,DWORD PTR [eax]
30003e17:	30 47 00             	xor    BYTE PTR [edi+0x0],al
30003e1a:	00 00                	add    BYTE PTR [eax],al
30003e1c:	12 00                	adc    al,BYTE PTR [eax]
30003e1e:	01 00                	add    DWORD PTR [eax],eax
30003e20:	8d 00                	lea    eax,[eax]
30003e22:	00 00                	add    BYTE PTR [eax],al
30003e24:	13 0c 00             	adc    ecx,DWORD PTR [eax+eax*1]
30003e27:	30 29                	xor    BYTE PTR [ecx],ch
30003e29:	00 00                	add    BYTE PTR [eax],al
30003e2b:	00 12                	add    BYTE PTR [edx],dl
30003e2d:	00 01                	add    BYTE PTR [ecx],al
30003e2f:	00 7f 01             	add    BYTE PTR [edi+0x1],bh
30003e32:	00 00                	add    BYTE PTR [eax],al
30003e34:	f6 25 00 30 1d 00    	mul    BYTE PTR ds:0x1d3000
30003e3a:	00 00                	add    BYTE PTR [eax],al
30003e3c:	12 00                	adc    al,BYTE PTR [eax]
30003e3e:	01 00                	add    DWORD PTR [eax],eax
30003e40:	92                   	xchg   edx,eax
30003e41:	01 00                	add    DWORD PTR [eax],eax
30003e43:	00 6a 2e             	add    BYTE PTR [edx+0x2e],ch
30003e46:	00 30                	add    BYTE PTR [eax],dh
30003e48:	6d                   	ins    DWORD PTR es:[edi],dx
30003e49:	00 00                	add    BYTE PTR [eax],al
30003e4b:	00 12                	add    BYTE PTR [edx],dl
30003e4d:	00 01                	add    BYTE PTR [ecx],al
30003e4f:	00 b8 00 00 00 10    	add    BYTE PTR [eax+0x10000000],bh
30003e55:	0f 00                	(bad)  
30003e57:	30 20                	xor    BYTE PTR [eax],ah
30003e59:	00 00                	add    BYTE PTR [eax],al
30003e5b:	00 12                	add    BYTE PTR [edx],dl
30003e5d:	00 01                	add    BYTE PTR [ecx],al
30003e5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003e62:	00 00                	add    BYTE PTR [eax],al
30003e64:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
30003e69:	00 00                	add    BYTE PTR [eax],al
30003e6b:	00 12                	add    BYTE PTR [edx],dl
30003e6d:	00 01                	add    BYTE PTR [ecx],al
30003e6f:	00 26                	add    BYTE PTR [esi],ah
30003e71:	01 00                	add    DWORD PTR [eax],eax
30003e73:	00 d4                	add    ah,dl
30003e75:	1b 00                	sbb    eax,DWORD PTR [eax]
30003e77:	30 31                	xor    BYTE PTR [ecx],dh
30003e79:	00 00                	add    BYTE PTR [eax],al
30003e7b:	00 12                	add    BYTE PTR [edx],dl
30003e7d:	00 01                	add    BYTE PTR [ecx],al
30003e7f:	00 2f                	add    BYTE PTR [edi],ch
30003e81:	00 00                	add    BYTE PTR [eax],al
30003e83:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
30003e87:	30 2d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,ch
30003e8d:	00 01                	add    BYTE PTR [ecx],al
30003e8f:	00 aa 00 00 00 a5    	add    BYTE PTR [edx-0x5b000000],ch
30003e95:	0e                   	push   cs
30003e96:	00 30                	add    BYTE PTR [eax],dh
30003e98:	4f                   	dec    edi
30003e99:	00 00                	add    BYTE PTR [eax],al
30003e9b:	00 12                	add    BYTE PTR [edx],dl
30003e9d:	00 01                	add    BYTE PTR [ecx],al
30003e9f:	00 01                	add    BYTE PTR [ecx],al
30003ea1:	00 00                	add    BYTE PTR [eax],al
30003ea3:	00 00                	add    BYTE PTR [eax],al
30003ea5:	00 00                	add    BYTE PTR [eax],al
30003ea7:	30 38                	xor    BYTE PTR [eax],bh
30003ea9:	00 00                	add    BYTE PTR [eax],al
30003eab:	00 12                	add    BYTE PTR [edx],dl
30003ead:	00 01                	add    BYTE PTR [ecx],al
30003eaf:	00 45 01             	add    BYTE PTR [ebp+0x1],al
30003eb2:	00 00                	add    BYTE PTR [eax],al
30003eb4:	08 1f                	or     BYTE PTR [edi],bl
30003eb6:	00 30                	add    BYTE PTR [eax],dh
30003eb8:	1d 00 00 00 12       	sbb    eax,0x12000000
30003ebd:	00 01                	add    BYTE PTR [ecx],al
30003ebf:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
30003ec2:	00 00                	add    BYTE PTR [eax],al
30003ec4:	99                   	cdq    
30003ec5:	06                   	push   es
30003ec6:	00 30                	add    BYTE PTR [eax],dh
30003ec8:	2a 00                	sub    al,BYTE PTR [eax]
30003eca:	00 00                	add    BYTE PTR [eax],al
30003ecc:	12 00                	adc    al,BYTE PTR [eax]
30003ece:	01 00                	add    DWORD PTR [eax],eax
30003ed0:	df 00                	fild   WORD PTR [eax]
30003ed2:	00 00                	add    BYTE PTR [eax],al
30003ed4:	b0 15                	mov    al,0x15
30003ed6:	00 30                	add    BYTE PTR [eax],dh
30003ed8:	1b 00                	sbb    eax,DWORD PTR [eax]
30003eda:	00 00                	add    BYTE PTR [eax],al
30003edc:	12 00                	adc    al,BYTE PTR [eax]
30003ede:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

30003ee0 <.dynstr>:
30003ee0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003ee3:	72 63                	jb     30003f48 <__x86.get_pc_thunk.cx+0x1044>
30003ee5:	68 72 00 73 74       	push   0x74730072
30003eea:	72 63                	jb     30003f4f <__x86.get_pc_thunk.cx+0x104b>
30003eec:	73 70                	jae    30003f5e <__x86.get_pc_thunk.cx+0x105a>
30003eee:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003eef:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003ef2:	72 74                	jb     30003f68 <__x86.get_pc_thunk.cx+0x1064>
30003ef4:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003ef5:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
30003ef8:	74 6f                	je     30003f69 <__x86.get_pc_thunk.cx+0x1065>
30003efa:	61                   	popa   
30003efb:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
30003efe:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003eff:	69 00 67 65 74 65    	imul   eax,DWORD PTR [eax],0x65746567
30003f05:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003f06:	76 00                	jbe    30003f08 <__x86.get_pc_thunk.cx+0x1004>
30003f08:	73 65                	jae    30003f6f <__x86.get_pc_thunk.cx+0x106b>
30003f0a:	74 65                	je     30003f71 <__x86.get_pc_thunk.cx+0x106d>
30003f0c:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003f0d:	76 00                	jbe    30003f0f <__x86.get_pc_thunk.cx+0x100b>
30003f0f:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003f10:	70 65                	jo     30003f77 <__x86.get_pc_thunk.cx+0x1073>
30003f12:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003f13:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
30003f16:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003f17:	73 65                	jae    30003f7e <__x86.get_pc_thunk.cx+0x107a>
30003f19:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003f1c:	61                   	popa   
30003f1d:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
30003f21:	69 74 65 00 67 65 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x64746567
30003f28:	64 
30003f29:	69 72 00 70 75 74 73 	imul   esi,DWORD PTR [edx+0x0],0x73747570
30003f30:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
30003f33:	73 45                	jae    30003f7a <__x86.get_pc_thunk.cx+0x1076>
30003f35:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003f36:	74 65                	je     30003f9d <__x86.get_pc_thunk.cx+0x1099>
30003f38:	72 5f                	jb     30003f99 <__x86.get_pc_thunk.cx+0x1095>
30003f3a:	56                   	push   esi
30003f3b:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
30003f40:	00 70 75             	add    BYTE PTR [eax+0x75],dh
30003f43:	74 63                	je     30003fa8 <__x86.get_pc_thunk.cx+0x10a4>
30003f45:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003f48:	74 63                	je     30003fad <__x86.get_pc_thunk.cx+0x10a9>
30003f4a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003f4d:	74 73                	je     30003fc2 <__x86.get_pc_thunk.cx+0x10be>
30003f4f:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003f53:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
30003f56:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003f57:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
30003f5e:	74 
30003f5f:	00 70 72             	add    BYTE PTR [eax+0x72],dh
30003f62:	69 6e 74 66 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730066
30003f69:	65                   	gs
30003f6a:	65                   	gs
30003f6b:	70 00                	jo     30003f6d <__x86.get_pc_thunk.cx+0x1069>
30003f6d:	6d                   	ins    DWORD PTR es:[edi],dx
30003f6e:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003f6f:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
30003f76:	6e 
30003f77:	61                   	popa   
30003f78:	6c                   	ins    BYTE PTR es:[edi],dx
30003f79:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
30003f7c:	72 6b                	jb     30003fe9 <__x86.get_pc_thunk.cx+0x10e5>
30003f7e:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
30003f81:	65 63 00             	arpl   WORD PTR gs:[eax],ax
30003f84:	65                   	gs
30003f85:	78 65                	js     30003fec <__x86.get_pc_thunk.cx+0x10e8>
30003f87:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
30003f8a:	65                   	gs
30003f8b:	78 65                	js     30003ff2 <__x86.get_pc_thunk.cx+0x10ee>
30003f8d:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
30003f90:	77 61                	ja     30003ff3 <__x86.get_pc_thunk.cx+0x10ef>
30003f92:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
30003f99:	78 
30003f9a:	69 74 00 67 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x67],0x77637465
30003fa1:	77 
30003fa2:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
30003fa6:	6c                   	ins    BYTE PTR es:[edi],dx
30003fa7:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
30003fae:	69 
30003faf:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003fb0:	65                   	gs
30003fb1:	54                   	push   esp
30003fb2:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003fb3:	41                   	inc    ecx
30003fb4:	72 67                	jb     3000401d <__x86.get_pc_thunk.cx+0x1119>
30003fb6:	76 00                	jbe    30003fb8 <__x86.get_pc_thunk.cx+0x10b4>
30003fb8:	6d                   	ins    DWORD PTR es:[edi],dx
30003fb9:	61                   	popa   
30003fba:	6c                   	ins    BYTE PTR es:[edi],dx
30003fbb:	6c                   	ins    BYTE PTR es:[edi],dx
30003fbc:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003fbd:	63 00                	arpl   WORD PTR [eax],ax
30003fbf:	66                   	data16
30003fc0:	72 65                	jb     30004027 <__x86.get_pc_thunk.cx+0x1123>
30003fc2:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
30003fc6:	6d                   	ins    DWORD PTR es:[edi],dx
30003fc7:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003fca:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
30003fcd:	6d                   	ins    DWORD PTR es:[edi],dx
30003fce:	73 65                	jae    30004035 <__x86.get_pc_thunk.cx+0x1131>
30003fd0:	74 00                	je     30003fd2 <__x86.get_pc_thunk.cx+0x10ce>
30003fd2:	70 69                	jo     3000403d <__x86.get_pc_thunk.cx+0x1139>
30003fd4:	70 65                	jo     3000403b <__x86.get_pc_thunk.cx+0x1137>
30003fd6:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003fd9:	73 65                	jae    30004040 <__x86.get_pc_thunk.cx+0x113c>
30003fdb:	74 52                	je     3000402f <__x86.get_pc_thunk.cx+0x112b>
30003fdd:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003fde:	77 00                	ja     30003fe0 <__x86.get_pc_thunk.cx+0x10dc>
30003fe0:	73 74                	jae    30004056 <__x86.get_pc_thunk.cx+0x1152>
30003fe2:	72 63                	jb     30004047 <__x86.get_pc_thunk.cx+0x1143>
30003fe4:	61                   	popa   
30003fe5:	74 00                	je     30003fe7 <__x86.get_pc_thunk.cx+0x10e3>
30003fe7:	73 74                	jae    3000405d <__x86.get_pc_thunk.cx+0x1159>
30003fe9:	72 63                	jb     3000404e <__x86.get_pc_thunk.cx+0x114a>
30003feb:	6d                   	ins    DWORD PTR es:[edi],dx
30003fec:	70 00                	jo     30003fee <__x86.get_pc_thunk.cx+0x10ea>
30003fee:	73 74                	jae    30004064 <__x86.get_pc_thunk.cx+0x1160>
30003ff0:	72 63                	jb     30004055 <__x86.get_pc_thunk.cx+0x1151>
30003ff2:	70 79                	jo     3000406d <__x86.get_pc_thunk.cx+0x1169>
30003ff4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003ff7:	72 63                	jb     3000405c <__x86.get_pc_thunk.cx+0x1158>
30003ff9:	70 79                	jo     30004074 <__x86.get_pc_thunk.cx+0x1170>
30003ffb:	63 00                	arpl   WORD PTR [eax],ax
30003ffd:	73 74                	jae    30004073 <__x86.get_pc_thunk.cx+0x116f>
30003fff:	72 69                	jb     3000406a <__x86.get_pc_thunk.cx+0x1166>
30004001:	73 6e                	jae    30004071 <__x86.get_pc_thunk.cx+0x116d>
30004003:	75 6d                	jne    30004072 <__x86.get_pc_thunk.cx+0x116e>
30004005:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30004008:	72 6c                	jb     30004076 <__x86.get_pc_thunk.cx+0x1172>
3000400a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
3000400c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000400f:	72 6e                	jb     3000407f <__x86.get_pc_thunk.cx+0x117b>
30004011:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
30004014:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30004017:	72 6e                	jb     30004087 <__x86.get_pc_thunk.cx+0x1183>
30004019:	63 70 79             	arpl   WORD PTR [eax+0x79],si
3000401c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000401f:	72 74                	jb     30004095 <__x86.get_pc_thunk.cx+0x1191>
30004021:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004022:	75 6c                	jne    30004090 <__x86.get_pc_thunk.cx+0x118c>
30004024:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30004027:	72 6c                	jb     30004095 <__x86.get_pc_thunk.cx+0x1191>
30004029:	65                   	gs
3000402a:	66                   	data16
3000402b:	74 00                	je     3000402d <__x86.get_pc_thunk.cx+0x1129>
3000402d:	73 74                	jae    300040a3 <__x86.get_pc_thunk.cx+0x119f>
3000402f:	72 74                	jb     300040a5 <__x86.get_pc_thunk.cx+0x11a1>
30004031:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004032:	6c                   	ins    BYTE PTR es:[edi],dx
30004033:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30004036:	72 74                	jb     300040ac <__x86.get_pc_thunk.cx+0x11a8>
30004038:	72 69                	jb     300040a3 <__x86.get_pc_thunk.cx+0x119f>
3000403a:	6d                   	ins    DWORD PTR es:[edi],dx
3000403b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000403e:	72 73                	jb     300040b3 <__x86.get_pc_thunk.cx+0x11af>
30004040:	74 72                	je     300040b4 <__x86.get_pc_thunk.cx+0x11b0>
30004042:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30004045:	74 74                	je     300040bb <__x86.get_pc_thunk.cx+0x11b7>
30004047:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
3000404e:	74 69                	je     300040b9 <__x86.get_pc_thunk.cx+0x11b5>
30004050:	6d                   	ins    DWORD PTR es:[edi],dx
30004051:	65                   	gs
30004052:	5f                   	pop    edi
30004053:	72 00                	jb     30004055 <__x86.get_pc_thunk.cx+0x1151>
30004055:	6c                   	ins    BYTE PTR es:[edi],dx
30004056:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004057:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
3000405a:	74 69                	je     300040c5 <__x86.get_pc_thunk.cx+0x11c1>
3000405c:	6d                   	ins    DWORD PTR es:[edi],dx
3000405d:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
30004062:	61                   	popa   
30004063:	6c                   	ins    BYTE PTR es:[edi],dx
30004064:	74 69                	je     300040cf <__x86.get_pc_thunk.cx+0x11cb>
30004066:	6d                   	ins    DWORD PTR es:[edi],dx
30004067:	65                   	gs
30004068:	5f                   	pop    edi
30004069:	72 00                	jb     3000406b <__x86.get_pc_thunk.cx+0x1167>
3000406b:	6d                   	ins    DWORD PTR es:[edi],dx
3000406c:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
30004071:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30004074:	74 74                	je     300040ea <__x86.get_pc_thunk.cx+0x11e6>
30004076:	69                   	.byte 0x69
30004077:	6d                   	ins    DWORD PTR es:[edi],dx
30004078:	65                   	gs
	...

Disassembly of section .hash:

3000407c <.hash>:
3000407c:	25 00 00 00 39       	and    eax,0x39000000
30004081:	00 00                	add    BYTE PTR [eax],al
30004083:	00 1f                	add    BYTE PTR [edi],bl
30004085:	00 00                	add    BYTE PTR [eax],al
30004087:	00 29                	add    BYTE PTR [ecx],ch
30004089:	00 00                	add    BYTE PTR [eax],al
3000408b:	00 28                	add    BYTE PTR [eax],ch
3000408d:	00 00                	add    BYTE PTR [eax],al
3000408f:	00 2a                	add    BYTE PTR [edx],ch
30004091:	00 00                	add    BYTE PTR [eax],al
30004093:	00 25 00 00 00 34    	add    BYTE PTR ds:0x34000000,ah
30004099:	00 00                	add    BYTE PTR [eax],al
3000409b:	00 16                	add    BYTE PTR [esi],dl
3000409d:	00 00                	add    BYTE PTR [eax],al
3000409f:	00 00                	add    BYTE PTR [eax],al
300040a1:	00 00                	add    BYTE PTR [eax],al
300040a3:	00 21                	add    BYTE PTR [ecx],ah
	...
300040ad:	00 00                	add    BYTE PTR [eax],al
300040af:	00 19                	add    BYTE PTR [ecx],bl
300040b1:	00 00                	add    BYTE PTR [eax],al
300040b3:	00 1b                	add    BYTE PTR [ebx],bl
300040b5:	00 00                	add    BYTE PTR [eax],al
300040b7:	00 15 00 00 00 22    	add    BYTE PTR ds:0x22000000,dl
300040bd:	00 00                	add    BYTE PTR [eax],al
300040bf:	00 13                	add    BYTE PTR [ebx],dl
300040c1:	00 00                	add    BYTE PTR [eax],al
300040c3:	00 37                	add    BYTE PTR [edi],dh
300040c5:	00 00                	add    BYTE PTR [eax],al
300040c7:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
300040ca:	00 00                	add    BYTE PTR [eax],al
300040cc:	2b 00                	sub    eax,DWORD PTR [eax]
300040ce:	00 00                	add    BYTE PTR [eax],al
300040d0:	07                   	pop    es
300040d1:	00 00                	add    BYTE PTR [eax],al
300040d3:	00 03                	add    BYTE PTR [ebx],al
300040d5:	00 00                	add    BYTE PTR [eax],al
300040d7:	00 33                	add    BYTE PTR [ebx],dh
300040d9:	00 00                	add    BYTE PTR [eax],al
300040db:	00 31                	add    BYTE PTR [ecx],dh
300040dd:	00 00                	add    BYTE PTR [eax],al
300040df:	00 0d 00 00 00 36    	add    BYTE PTR ds:0x36000000,cl
	...
300040f1:	00 00                	add    BYTE PTR [eax],al
300040f3:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
300040f6:	00 00                	add    BYTE PTR [eax],al
300040f8:	32 00                	xor    al,BYTE PTR [eax]
300040fa:	00 00                	add    BYTE PTR [eax],al
300040fc:	1d 00 00 00 38       	sbb    eax,0x38000000
30004101:	00 00                	add    BYTE PTR [eax],al
30004103:	00 26                	add    BYTE PTR [esi],ah
30004105:	00 00                	add    BYTE PTR [eax],al
30004107:	00 00                	add    BYTE PTR [eax],al
30004109:	00 00                	add    BYTE PTR [eax],al
3000410b:	00 35 00 00 00 20    	add    BYTE PTR ds:0x20000000,dh
	...
3000412d:	00 00                	add    BYTE PTR [eax],al
3000412f:	00 02                	add    BYTE PTR [edx],al
30004131:	00 00                	add    BYTE PTR [eax],al
30004133:	00 00                	add    BYTE PTR [eax],al
30004135:	00 00                	add    BYTE PTR [eax],al
30004137:	00 06                	add    BYTE PTR [esi],al
	...
30004141:	00 00                	add    BYTE PTR [eax],al
30004143:	00 08                	add    BYTE PTR [eax],cl
	...
30004155:	00 00                	add    BYTE PTR [eax],al
30004157:	00 0b                	add    BYTE PTR [ebx],cl
30004159:	00 00                	add    BYTE PTR [eax],al
3000415b:	00 00                	add    BYTE PTR [eax],al
3000415d:	00 00                	add    BYTE PTR [eax],al
3000415f:	00 10                	add    BYTE PTR [eax],dl
30004161:	00 00                	add    BYTE PTR [eax],al
30004163:	00 04 00             	add    BYTE PTR [eax+eax*1],al
	...
3000417a:	00 00                	add    BYTE PTR [eax],al
3000417c:	0f 00 00             	sldt   WORD PTR [eax]
	...
3000418f:	00 01                	add    BYTE PTR [ecx],al
30004191:	00 00                	add    BYTE PTR [eax],al
30004193:	00 11                	add    BYTE PTR [ecx],dl
30004195:	00 00                	add    BYTE PTR [eax],al
30004197:	00 18                	add    BYTE PTR [eax],bl
30004199:	00 00                	add    BYTE PTR [eax],al
3000419b:	00 00                	add    BYTE PTR [eax],al
3000419d:	00 00                	add    BYTE PTR [eax],al
3000419f:	00 0e                	add    BYTE PTR [esi],cl
300041a1:	00 00                	add    BYTE PTR [eax],al
300041a3:	00 00                	add    BYTE PTR [eax],al
300041a5:	00 00                	add    BYTE PTR [eax],al
300041a7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300041aa:	00 00                	add    BYTE PTR [eax],al
300041ac:	24 00                	and    al,0x0
300041ae:	00 00                	add    BYTE PTR [eax],al
300041b0:	23 00                	and    eax,DWORD PTR [eax]
300041b2:	00 00                	add    BYTE PTR [eax],al
300041b4:	1a 00                	sbb    al,BYTE PTR [eax]
300041b6:	00 00                	add    BYTE PTR [eax],al
300041b8:	0a 00                	or     al,BYTE PTR [eax]
300041ba:	00 00                	add    BYTE PTR [eax],al
300041bc:	09 00                	or     DWORD PTR [eax],eax
300041be:	00 00                	add    BYTE PTR [eax],al
300041c0:	00 00                	add    BYTE PTR [eax],al
300041c2:	00 00                	add    BYTE PTR [eax],al
300041c4:	0c 00                	or     al,0x0
300041c6:	00 00                	add    BYTE PTR [eax],al
300041c8:	12 00                	adc    al,BYTE PTR [eax]
300041ca:	00 00                	add    BYTE PTR [eax],al
300041cc:	00 00                	add    BYTE PTR [eax],al
300041ce:	00 00                	add    BYTE PTR [eax],al
300041d0:	1e                   	push   ds
	...
300041d9:	00 00                	add    BYTE PTR [eax],al
300041db:	00 27                	add    BYTE PTR [edi],ah
300041dd:	00 00                	add    BYTE PTR [eax],al
300041df:	00 30                	add    BYTE PTR [eax],dh
300041e1:	00 00                	add    BYTE PTR [eax],al
300041e3:	00 2e                	add    BYTE PTR [esi],ch
300041e5:	00 00                	add    BYTE PTR [eax],al
300041e7:	00 00                	add    BYTE PTR [eax],al
300041e9:	00 00                	add    BYTE PTR [eax],al
300041eb:	00 2f                	add    BYTE PTR [edi],ch
300041ed:	00 00                	add    BYTE PTR [eax],al
300041ef:	00 05 00 00 00 17    	add    BYTE PTR ds:0x17000000,al
300041f5:	00 00                	add    BYTE PTR [eax],al
300041f7:	00                   	.byte 0x0
300041f8:	2d                   	.byte 0x2d
300041f9:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

300041fc <.eh_frame>:
300041fc:	14 00                	adc    al,0x0
300041fe:	00 00                	add    BYTE PTR [eax],al
30004200:	00 00                	add    BYTE PTR [eax],al
30004202:	00 00                	add    BYTE PTR [eax],al
30004204:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30004207:	00 01                	add    BYTE PTR [ecx],al
30004209:	7c 08                	jl     30004213 <__x86.get_pc_thunk.cx+0x130f>
3000420b:	01 1b                	add    DWORD PTR [ebx],ebx
3000420d:	0c 04                	or     al,0x4
3000420f:	04 88                	add    al,0x88
30004211:	01 00                	add    DWORD PTR [eax],eax
30004213:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30004216:	00 00                	add    BYTE PTR [eax],al
30004218:	1c 00                	sbb    al,0x0
3000421a:	00 00                	add    BYTE PTR [eax],al
3000421c:	c4                   	(bad)  
3000421d:	ec                   	in     al,dx
3000421e:	ff                   	(bad)  
3000421f:	ff 20                	jmp    DWORD PTR [eax]
30004221:	00 00                	add    BYTE PTR [eax],al
30004223:	00 00                	add    BYTE PTR [eax],al
30004225:	0e                   	push   cs
30004226:	08 46 0e             	or     BYTE PTR [esi+0xe],al
30004229:	0c 4a                	or     al,0x4a
3000422b:	0f 0b                	ud2    
3000422d:	74 04                	je     30004233 <__x86.get_pc_thunk.cx+0x132f>
3000422f:	78 00                	js     30004231 <__x86.get_pc_thunk.cx+0x132d>
30004231:	3f                   	aas    
30004232:	1a 3b                	sbb    bh,BYTE PTR [ebx]
30004234:	2a 32                	sub    dh,BYTE PTR [edx]
30004236:	24 22                	and    al,0x22
30004238:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

3000423c <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
3000423c:	01 1b                	add    DWORD PTR [ebx],ebx
3000423e:	03 3b                	add    edi,DWORD PTR [ebx]
30004240:	c8 ec ff ff          	enter  0xffec,0xff
30004244:	5a                   	pop    edx
30004245:	00 00                	add    BYTE PTR [eax],al
30004247:	00 c4                	add    ah,al
30004249:	bd ff ff e4 ec       	mov    ebp,0xece4ffff
3000424e:	ff                   	(bad)  
3000424f:	ff                   	(bad)  
30004250:	fc                   	cld    
30004251:	bd ff ff 04 ed       	mov    ebp,0xed04ffff
30004256:	ff                   	(bad)  
30004257:	ff 34 be             	push   DWORD PTR [esi+edi*4]
3000425a:	ff                   	(bad)  
3000425b:	ff                   	(bad)  
3000425c:	38 ed                	cmp    ch,ch
3000425e:	ff                   	(bad)  
3000425f:	ff 89 be ff ff 60    	dec    DWORD PTR [ecx+0x60ffffbe]
30004265:	ed                   	in     eax,dx
30004266:	ff                   	(bad)  
30004267:	ff e0                	jmp    eax
30004269:	be ff ff 88 ed       	mov    esi,0xed88ffff
3000426e:	ff                   	(bad)  
3000426f:	ff                   	(bad)  
30004270:	78 bf                	js     30004231 <__x86.get_pc_thunk.cx+0x132d>
30004272:	ff                   	(bad)  
30004273:	ff c4                	inc    esp
30004275:	ed                   	in     eax,dx
30004276:	ff                   	(bad)  
30004277:	ff ef                	jmp    <internal disassembler error>
30004279:	bf ff ff e8 ed       	mov    edi,0xede8ffff
3000427e:	ff                   	(bad)  
3000427f:	ff aa c0 ff ff 0c    	jmp    FWORD PTR [edx+0xcffffc0]
30004285:	ee                   	out    dx,al
30004286:	ff                   	(bad)  
30004287:	ff 65 c1             	jmp    DWORD PTR [ebp-0x3f]
3000428a:	ff                   	(bad)  
3000428b:	ff 30                	push   DWORD PTR [eax]
3000428d:	ee                   	out    dx,al
3000428e:	ff                   	(bad)  
3000428f:	ff c4                	inc    esp
30004291:	c1 ff ff             	sar    edi,0xff
30004294:	50                   	push   eax
30004295:	ee                   	out    dx,al
30004296:	ff                   	(bad)  
30004297:	ff 6e c2             	jmp    FWORD PTR [esi-0x3e]
3000429a:	ff                   	(bad)  
3000429b:	ff 74 ee ff          	push   DWORD PTR [esi+ebp*8-0x1]
3000429f:	ff 30                	push   DWORD PTR [eax]
300042a1:	c4                   	(bad)  
300042a2:	ff                   	(bad)  
300042a3:	ff 98 ee ff ff 5d    	call   FWORD PTR [eax+0x5dffffee]
300042a9:	c4                   	(bad)  
300042aa:	ff                   	(bad)  
300042ab:	ff                   	(bad)  
300042ac:	bc ee ff ff 87       	mov    esp,0x87ffffee
300042b1:	c4                   	(bad)  
300042b2:	ff                   	(bad)  
300042b3:	ff e0                	jmp    eax
300042b5:	ee                   	out    dx,al
300042b6:	ff                   	(bad)  
300042b7:	ff                   	(bad)  
300042b8:	bc c4 ff ff 08       	mov    esp,0x8ffffc4
300042bd:	ef                   	out    dx,eax
300042be:	ff                   	(bad)  
300042bf:	ff f1                	push   ecx
300042c1:	c4                   	(bad)  
300042c2:	ff                   	(bad)  
300042c3:	ff 30                	push   DWORD PTR [eax]
300042c5:	ef                   	out    dx,eax
300042c6:	ff                   	(bad)  
300042c7:	ff 24 c5 ff ff 54 ef 	jmp    DWORD PTR [eax*8-0x10ab0001]
300042ce:	ff                   	(bad)  
300042cf:	ff 4a c5             	dec    DWORD PTR [edx-0x3b]
300042d2:	ff                   	(bad)  
300042d3:	ff                   	(bad)  
300042d4:	78 ef                	js     300042c5 <__GNU_EH_FRAME_HDR+0x89>
300042d6:	ff                   	(bad)  
300042d7:	ff 8d c5 ff ff 9c    	dec    DWORD PTR [ebp-0x6300003b]
300042dd:	ef                   	out    dx,eax
300042de:	ff                   	(bad)  
300042df:	ff                   	(bad)  
300042e0:	bc c5 ff ff c0       	mov    esp,0xc0ffffc5
300042e5:	ef                   	out    dx,eax
300042e6:	ff                   	(bad)  
300042e7:	ff                   	(bad)  
300042e8:	78 c6                	js     300042b0 <__GNU_EH_FRAME_HDR+0x74>
300042ea:	ff                   	(bad)  
300042eb:	ff e4                	jmp    esp
300042ed:	ef                   	out    dx,eax
300042ee:	ff                   	(bad)  
300042ef:	ff b2 c6 ff ff 0c    	push   DWORD PTR [edx+0xcffffc6]
300042f5:	f0 ff                	lock (bad) 
300042f7:	ff ee                	jmp    <internal disassembler error>
300042f9:	c6                   	(bad)  
300042fa:	ff                   	(bad)  
300042fb:	ff 34 f0             	push   DWORD PTR [eax+esi*8]
300042fe:	ff                   	(bad)  
300042ff:	ff 2c c7             	jmp    FWORD PTR [edi+eax*8]
30004302:	ff                   	(bad)  
30004303:	ff 5c f0 ff          	call   FWORD PTR [eax+esi*8-0x1]
30004307:	ff 6c c7 ff          	jmp    FWORD PTR [edi+eax*8-0x1]
3000430b:	ff 84 f0 ff ff ae c7 	inc    DWORD PTR [eax+esi*8-0x38510001]
30004312:	ff                   	(bad)  
30004313:	ff ac f0 ff ff 53 c8 	jmp    FWORD PTR [eax+esi*8-0x37ac0001]
3000431a:	ff                   	(bad)  
3000431b:	ff d0                	call   eax
3000431d:	f0 ff                	lock (bad) 
3000431f:	ff 72 c8             	push   DWORD PTR [edx-0x38]
30004322:	ff                   	(bad)  
30004323:	ff f4                	push   esp
30004325:	f0 ff                	lock (bad) 
30004327:	ff a6 c8 ff ff 14    	jmp    DWORD PTR [esi+0x14ffffc8]
3000432d:	f1                   	icebp  
3000432e:	ff                   	(bad)  
3000432f:	ff da                	call   <internal disassembler error>
30004331:	c8 ff ff 34          	enter  0xffff,0x34
30004335:	f1                   	icebp  
30004336:	ff                   	(bad)  
30004337:	ff 0e                	dec    DWORD PTR [esi]
30004339:	c9                   	leave  
3000433a:	ff                   	(bad)  
3000433b:	ff 54 f1 ff          	call   DWORD PTR [ecx+esi*8-0x1]
3000433f:	ff 45 c9             	inc    DWORD PTR [ebp-0x37]
30004342:	ff                   	(bad)  
30004343:	ff 74 f1 ff          	push   DWORD PTR [ecx+esi*8-0x1]
30004347:	ff                   	(bad)  
30004348:	ba c9 ff ff 9c       	mov    edx,0x9cffffc9
3000434d:	f1                   	icebp  
3000434e:	ff                   	(bad)  
3000434f:	ff d7                	call   edi
30004351:	c9                   	leave  
30004352:	ff                   	(bad)  
30004353:	ff                   	(bad)  
30004354:	bc f1 ff ff 00       	mov    esp,0xfffff1
30004359:	ca ff ff             	retf   0xffff
3000435c:	dc f1                	fdivr  st(1),st
3000435e:	ff                   	(bad)  
3000435f:	ff 29                	jmp    FWORD PTR [ecx]
30004361:	ca ff ff             	retf   0xffff
30004364:	fc                   	cld    
30004365:	f1                   	icebp  
30004366:	ff                   	(bad)  
30004367:	ff 75 ca             	push   DWORD PTR [ebp-0x36]
3000436a:	ff                   	(bad)  
3000436b:	ff 1c f2             	call   FWORD PTR [edx+esi*8]
3000436e:	ff                   	(bad)  
3000436f:	ff 69 cc             	jmp    FWORD PTR [ecx-0x34]
30004372:	ff                   	(bad)  
30004373:	ff 40 f2             	inc    DWORD PTR [eax-0xe]
30004376:	ff                   	(bad)  
30004377:	ff                   	(bad)  
30004378:	b8 cc ff ff 60       	mov    eax,0x60ffffcc
3000437d:	f2 ff                	repnz (bad) 
3000437f:	ff d4                	call   esp
30004381:	cc                   	int3   
30004382:	ff                   	(bad)  
30004383:	ff 80 f2 ff ff f4    	inc    DWORD PTR [eax-0xb00000e]
30004389:	cc                   	int3   
3000438a:	ff                   	(bad)  
3000438b:	ff a0 f2 ff ff 14    	jmp    DWORD PTR [eax+0x14fffff2]
30004391:	cd ff                	int    0xff
30004393:	ff c0                	inc    eax
30004395:	f2 ff                	repnz (bad) 
30004397:	ff 58 ce             	call   FWORD PTR [eax-0x32]
3000439a:	ff                   	(bad)  
3000439b:	ff e0                	jmp    eax
3000439d:	f2 ff                	repnz (bad) 
3000439f:	ff                   	(bad)  
300043a0:	78 ce                	js     30004370 <__GNU_EH_FRAME_HDR+0x134>
300043a2:	ff                   	(bad)  
300043a3:	ff 00                	inc    DWORD PTR [eax]
300043a5:	f3 ff                	repz (bad) 
300043a7:	ff 2e                	jmp    FWORD PTR [esi]
300043a9:	d0 ff                	sar    bh,1
300043ab:	ff 24 f3             	jmp    DWORD PTR [ebx+esi*8]
300043ae:	ff                   	(bad)  
300043af:	ff 54 d0 ff          	call   DWORD PTR [eax+edx*8-0x1]
300043b3:	ff 44 f3 ff          	inc    DWORD PTR [ebx+esi*8-0x1]
300043b7:	ff c0                	inc    eax
300043b9:	d0 ff                	sar    bh,1
300043bb:	ff 68 f3             	jmp    FWORD PTR [eax-0xd]
300043be:	ff                   	(bad)  
300043bf:	ff 47 d1             	inc    DWORD PTR [edi-0x2f]
300043c2:	ff                   	(bad)  
300043c3:	ff 88 f3 ff ff 80    	dec    DWORD PTR [eax-0x7f00000d]
300043c9:	d1 ff                	sar    edi,1
300043cb:	ff a8 f3 ff ff 54    	jmp    FWORD PTR [eax+0x54fffff3]
300043d1:	d3 ff                	sar    edi,cl
300043d3:	ff cc                	dec    esp
300043d5:	f3 ff                	repz (bad) 
300043d7:	ff 74 d3 ff          	push   DWORD PTR [ebx+edx*8-0x1]
300043db:	ff ec                	jmp    <internal disassembler error>
300043dd:	f3 ff                	repz (bad) 
300043df:	ff 8f d3 ff ff 0c    	dec    DWORD PTR [edi+0xcffffd3]
300043e5:	f4                   	hlt    
300043e6:	ff                   	(bad)  
300043e7:	ff c4                	inc    esp
300043e9:	d3 ff                	sar    edi,cl
300043eb:	ff 30                	push   DWORD PTR [eax]
300043ed:	f4                   	hlt    
300043ee:	ff                   	(bad)  
300043ef:	ff 60 d5             	jmp    DWORD PTR [eax-0x2b]
300043f2:	ff                   	(bad)  
300043f3:	ff 50 f4             	call   DWORD PTR [eax-0xc]
300043f6:	ff                   	(bad)  
300043f7:	ff 27                	jmp    DWORD PTR [edi]
300043f9:	d6                   	(bad)  
300043fa:	ff                   	(bad)  
300043fb:	ff 70 f4             	push   DWORD PTR [eax-0xc]
300043fe:	ff                   	(bad)  
300043ff:	ff 48 d6             	dec    DWORD PTR [eax-0x2a]
30004402:	ff                   	(bad)  
30004403:	ff 90 f4 ff ff 74    	call   DWORD PTR [eax+0x74fffff4]
30004409:	d6                   	(bad)  
3000440a:	ff                   	(bad)  
3000440b:	ff b4 f4 ff ff f8 d6 	push   DWORD PTR [esp+esi*8-0x29070001]
30004412:	ff                   	(bad)  
30004413:	ff d8                	call   <internal disassembler error>
30004415:	f4                   	hlt    
30004416:	ff                   	(bad)  
30004417:	ff 36                	push   DWORD PTR [esi]
30004419:	d7                   	xlat   BYTE PTR ds:[ebx]
3000441a:	ff                   	(bad)  
3000441b:	ff                   	(bad)  
3000441c:	fc                   	cld    
3000441d:	f4                   	hlt    
3000441e:	ff                   	(bad)  
3000441f:	ff 74 d7 ff          	push   DWORD PTR [edi+edx*8-0x1]
30004423:	ff 20                	jmp    DWORD PTR [eax]
30004425:	f5                   	cmc    
30004426:	ff                   	(bad)  
30004427:	ff e4                	jmp    esp
30004429:	d7                   	xlat   BYTE PTR ds:[ebx]
3000442a:	ff                   	(bad)  
3000442b:	ff 40 f5             	inc    DWORD PTR [eax-0xb]
3000442e:	ff                   	(bad)  
3000442f:	ff 44 d8 ff          	inc    DWORD PTR [eax+ebx*8-0x1]
30004433:	ff 68 f5             	jmp    FWORD PTR [eax-0xb]
30004436:	ff                   	(bad)  
30004437:	ff 84 d8 ff ff 88 f5 	inc    DWORD PTR [eax+ebx*8-0xa770001]
3000443e:	ff                   	(bad)  
3000443f:	ff c4                	inc    esp
30004441:	d8 ff                	fdivr  st,st(7)
30004443:	ff a8 f5 ff ff 0c    	jmp    FWORD PTR [eax+0xcfffff5]
30004449:	d9 ff                	fcos   
3000444b:	ff c8                	dec    eax
3000444d:	f5                   	cmc    
3000444e:	ff                   	(bad)  
3000444f:	ff                   	(bad)  
30004450:	3c d9                	cmp    al,0xd9
30004452:	ff                   	(bad)  
30004453:	ff e8                	jmp    <internal disassembler error>
30004455:	f5                   	cmc    
30004456:	ff                   	(bad)  
30004457:	ff 98 d9 ff ff 08    	call   FWORD PTR [eax+0x8ffffd9]
3000445d:	f6 ff                	idiv   bh
3000445f:	ff c9                	dec    ecx
30004461:	d9 ff                	fcos   
30004463:	ff 28                	jmp    FWORD PTR [eax]
30004465:	f6 ff                	idiv   bh
30004467:	ff                   	(bad)  
30004468:	fc                   	cld    
30004469:	d9 ff                	fcos   
3000446b:	ff 48 f6             	dec    DWORD PTR [eax-0xa]
3000446e:	ff                   	(bad)  
3000446f:	ff 63 da             	jmp    DWORD PTR [ebx-0x26]
30004472:	ff                   	(bad)  
30004473:	ff 68 f6             	jmp    FWORD PTR [eax-0xa]
30004476:	ff                   	(bad)  
30004477:	ff cc                	dec    esp
30004479:	da ff                	(bad)  
3000447b:	ff 88 f6 ff ff 2c    	dec    DWORD PTR [eax+0x2cfffff6]
30004481:	db ff                	(bad)  
30004483:	ff a8 f6 ff ff 4c    	jmp    FWORD PTR [eax+0x4cfffff6]
30004489:	db ff                	(bad)  
3000448b:	ff c8                	dec    eax
3000448d:	f6 ff                	idiv   bh
3000448f:	ff cc                	dec    esp
30004491:	dc ff                	fdiv   st(7),st
30004493:	ff                   	(bad)  
30004494:	f8                   	clc    
30004495:	f6 ff                	idiv   bh
30004497:	ff ec                	jmp    <internal disassembler error>
30004499:	dc ff                	fdiv   st(7),st
3000449b:	ff 18                	call   FWORD PTR [eax]
3000449d:	f7 ff                	idiv   edi
3000449f:	ff 88 de ff ff 48    	dec    DWORD PTR [eax+0x48ffffde]
300044a5:	f7 ff                	idiv   edi
300044a7:	ff 1e                	call   FWORD PTR [esi]
300044a9:	df ff                	(bad)  
300044ab:	ff 6c f7 ff          	jmp    FWORD PTR [edi+esi*8-0x1]
300044af:	ff 40 df             	inc    DWORD PTR [eax-0x21]
300044b2:	ff                   	(bad)  
300044b3:	ff 8c f7 ff ff ae df 	dec    DWORD PTR [edi+esi*8-0x20510001]
300044ba:	ff                   	(bad)  
300044bb:	ff b4 f7 ff ff cc df 	push   DWORD PTR [edi+esi*8-0x20330001]
300044c2:	ff                   	(bad)  
300044c3:	ff d4                	call   esp
300044c5:	f7 ff                	idiv   edi
300044c7:	ff 10                	call   DWORD PTR [eax]
300044c9:	e0 ff                	loopne 300044ca <__GNU_EH_FRAME_HDR+0x28e>
300044cb:	ff                   	(bad)  
300044cc:	fc                   	cld    
300044cd:	f7 ff                	idiv   edi
300044cf:	ff 29                	jmp    FWORD PTR [ecx]
300044d1:	e3 ff                	jecxz  300044d2 <__GNU_EH_FRAME_HDR+0x296>
300044d3:	ff 24 f8             	jmp    DWORD PTR [eax+edi*8]
300044d6:	ff                   	(bad)  
300044d7:	ff 46 e3             	inc    DWORD PTR [esi-0x1d]
300044da:	ff                   	(bad)  
300044db:	ff 44 f8 ff          	inc    DWORD PTR [eax+edi*8-0x1]
300044df:	ff 85 e3 ff ff 68    	inc    DWORD PTR [ebp+0x68ffffe3]
300044e5:	f8                   	clc    
300044e6:	ff                   	(bad)  
300044e7:	ff                   	(bad)  
300044e8:	ba e3 ff ff 88       	mov    edx,0x88ffffe3
300044ed:	f8                   	clc    
300044ee:	ff                   	(bad)  
300044ef:	ff d7                	call   edi
300044f1:	e3 ff                	jecxz  300044f2 <__GNU_EH_FRAME_HDR+0x2b6>
300044f3:	ff a8 f8 ff ff 2e    	jmp    FWORD PTR [eax+0x2efffff8]
300044f9:	ec                   	in     al,dx
300044fa:	ff                   	(bad)  
300044fb:	ff d8                	call   <internal disassembler error>
300044fd:	f8                   	clc    
300044fe:	ff                   	(bad)  
300044ff:	ff 9b ec ff ff 24    	call   FWORD PTR [ebx+0x24ffffec]
30004505:	ed                   	in     eax,dx
30004506:	ff                   	(bad)  
30004507:	ff c4                	inc    esp
30004509:	ec                   	in     al,dx
3000450a:	ff                   	(bad)  
3000450b:	ff b0 ed ff ff c8    	push   DWORD PTR [eax-0x37000013]
30004511:	ec                   	in     al,dx
30004512:	ff                   	(bad)  
30004513:	ff 00                	inc    DWORD PTR [eax]
30004515:	f9                   	stc    
30004516:	ff                   	(bad)  
30004517:	ff                   	.byte 0xff

Disassembly of section .rodata:

30004520 <_ytab-0x240>:
30004520:	3d 00 53 74 72       	cmp    eax,0x72745300
30004525:	65                   	gs
30004526:	61                   	popa   
30004527:	6d                   	ins    DWORD PTR es:[edi],dx
30004528:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
3000452e:	74 20                	je     30004550 <__GNU_EH_FRAME_HDR+0x314>
30004530:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
30004537:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004538:	74 65                	je     3000459f <__GNU_EH_FRAME_HDR+0x363>
3000453a:	64 0a 00             	or     al,BYTE PTR fs:[eax]
3000453d:	00 00                	add    BYTE PTR [eax],al
3000453f:	00 2a                	add    BYTE PTR [edx],ch
30004541:	2a 2a                	sub    ch,BYTE PTR [edx]
30004543:	6c                   	ins    BYTE PTR es:[edi],dx
30004544:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
3000454b:	74 20                	je     3000456d <__GNU_EH_FRAME_HDR+0x331>
3000454d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30004550:	6c                   	ins    BYTE PTR es:[edi],dx
30004551:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
30004555:	2a 2a                	sub    ch,BYTE PTR [edx]
30004557:	00 2a                	add    BYTE PTR [edx],ch
30004559:	2a 2a                	sub    ch,BYTE PTR [edx]
3000455b:	6c                   	ins    BYTE PTR es:[edi],dx
3000455c:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30004563:	74 20                	je     30004585 <__GNU_EH_FRAME_HDR+0x349>
30004565:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
30004568:	70 6c                	jo     300045d6 <__GNU_EH_FRAME_HDR+0x39a>
3000456a:	65                   	gs
3000456b:	74 65                	je     300045d2 <__GNU_EH_FRAME_HDR+0x396>
3000456d:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30004570:	6c                   	ins    BYTE PTR es:[edi],dx
30004571:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30004578:	74 20                	je     3000459a <__GNU_EH_FRAME_HDR+0x35e>
3000457a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
3000457d:	6c                   	ins    BYTE PTR es:[edi],dx
3000457e:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
30004583:	65                   	gs
30004584:	76 69                	jbe    300045ef <__GNU_EH_FRAME_HDR+0x3b3>
30004586:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004587:	75 73                	jne    300045fc <__GNU_EH_FRAME_HDR+0x3c0>
30004589:	6c                   	ins    BYTE PTR es:[edi],dx
3000458a:	79 2c                	jns    300045b8 <__GNU_EH_FRAME_HDR+0x37c>
3000458c:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
3000458f:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
30004596:	6c 
30004597:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
3000459e:	65 63 20             	arpl   WORD PTR gs:[eax],sp
300045a1:	66 6f                	outs   dx,WORD PTR ds:[esi]
300045a3:	72 20                	jb     300045c5 <__GNU_EH_FRAME_HDR+0x389>
300045a5:	25 73 0a 00 20       	and    eax,0x20000a73
300045aa:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
300045ae:	63 3a                	arpl   WORD PTR [edx],di
300045b0:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
300045b3:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
300045b7:	66 6f                	outs   dx,WORD PTR ds:[esi]
300045b9:	72 20                	jb     300045db <__GNU_EH_FRAME_HDR+0x39f>
300045bb:	25 73 0a 00 6c       	and    eax,0x6c000a73
300045c0:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
300045c7:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
300045cb:	66 6f                	outs   dx,WORD PTR ds:[esi]
300045cd:	72 20                	jb     300045ef <__GNU_EH_FRAME_HDR+0x3b3>
300045cf:	25 73 0a 00 00       	and    eax,0xa73
300045d4:	68 65 61 70 42       	push   0x42706165
300045d9:	61                   	popa   
300045da:	73 65                	jae    30004641 <__GNU_EH_FRAME_HDR+0x405>
300045dc:	20 40 20             	and    BYTE PTR [eax+0x20],al
300045df:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
300045e2:	30 38                	xor    BYTE PTR [eax],bh
300045e4:	58                   	pop    eax
300045e5:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
300045eb:	30 38                	xor    BYTE PTR [eax],bh
300045ed:	58                   	pop    eax
300045ee:	20 62 65             	and    BYTE PTR [edx+0x65],ah
300045f1:	66 6f                	outs   dx,WORD PTR ds:[esi]
300045f3:	72 65                	jb     3000465a <__GNU_EH_FRAME_HDR+0x41e>
300045f5:	0a 00                	or     al,BYTE PTR [eax]
300045f7:	6d                   	ins    DWORD PTR es:[edi],dx
300045f8:	61                   	popa   
300045f9:	6c                   	ins    BYTE PTR es:[edi],dx
300045fa:	6c                   	ins    BYTE PTR es:[edi],dx
300045fb:	6f                   	outs   dx,DWORD PTR ds:[esi]
300045fc:	63 28                	arpl   WORD PTR [eax],bp
300045fe:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004601:	30 38                	xor    BYTE PTR [eax],bh
30004603:	58                   	pop    eax
30004604:	29 0a                	sub    DWORD PTR [edx],ecx
30004606:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
3000460a:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
3000460d:	61                   	popa   
3000460e:	6c                   	ins    BYTE PTR es:[edi],dx
3000460f:	6c                   	ins    BYTE PTR es:[edi],dx
30004610:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004611:	63 3a                	arpl   WORD PTR [edx],di
30004613:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
30004616:	65                   	gs
30004617:	64                   	fs
30004618:	65                   	gs
30004619:	64                   	fs
3000461a:	3d 30 78 25 30       	cmp    eax,0x30257830
3000461f:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30004622:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30004626:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
30004629:	61                   	popa   
3000462a:	6c                   	ins    BYTE PTR es:[edi],dx
3000462b:	6c                   	ins    BYTE PTR es:[edi],dx
3000462c:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000462d:	63 3a                	arpl   WORD PTR [edx],di
3000462f:	20 68 65             	and    BYTE PTR [eax+0x65],ch
30004632:	61                   	popa   
30004633:	45                   	inc    ebp
30004634:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004635:	64                   	fs
30004636:	3d 30 78 25 30       	cmp    eax,0x30257830
3000463b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
3000463e:	00 00                	add    BYTE PTR [eax],al
30004640:	6c                   	ins    BYTE PTR es:[edi],dx
30004641:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004648:	6c                   	ins    BYTE PTR es:[edi],dx
30004649:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000464a:	63 3a                	arpl   WORD PTR [edx],di
3000464c:	20 52 65             	and    BYTE PTR [edx+0x65],dl
3000464f:	71 20                	jno    30004671 <__GNU_EH_FRAME_HDR+0x435>
30004651:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004654:	30 38                	xor    BYTE PTR [eax],bh
30004656:	58                   	pop    eax
30004657:	20 62 79             	and    BYTE PTR [edx+0x79],ah
3000465a:	74 65                	je     300046c1 <__GNU_EH_FRAME_HDR+0x485>
3000465c:	73 2c                	jae    3000468a <__GNU_EH_FRAME_HDR+0x44e>
3000465e:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30004661:	74 20                	je     30004683 <__GNU_EH_FRAME_HDR+0x447>
30004663:	77 61                	ja     300046c6 <__GNU_EH_FRAME_HDR+0x48a>
30004665:	73 20                	jae    30004687 <__GNU_EH_FRAME_HDR+0x44b>
30004667:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
3000466a:	30 38                	xor    BYTE PTR [eax],bh
3000466c:	58                   	pop    eax
3000466d:	2c 20                	sub    al,0x20
3000466f:	68 65 61 70 45       	push   0x45706165
30004674:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004675:	64                   	fs
30004676:	3d 30 78 25 30       	cmp    eax,0x30257830
3000467b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
3000467e:	00 00                	add    BYTE PTR [eax],al
30004680:	6c                   	ins    BYTE PTR es:[edi],dx
30004681:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004688:	6c                   	ins    BYTE PTR es:[edi],dx
30004689:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000468a:	63 3a                	arpl   WORD PTR [edx],di
3000468c:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
3000468f:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
30004696:	65 
30004697:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
3000469b:	61                   	popa   
3000469c:	70 43                	jo     300046e1 <__GNU_EH_FRAME_HDR+0x4a5>
3000469e:	75 72                	jne    30004712 <__GNU_EH_FRAME_HDR+0x4d6>
300046a0:	72 20                	jb     300046c2 <__GNU_EH_FRAME_HDR+0x486>
300046a2:	61                   	popa   
300046a3:	6e                   	outs   dx,BYTE PTR ds:[esi]
300046a4:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
300046a8:	61                   	popa   
300046a9:	70 42                	jo     300046ed <__GNU_EH_FRAME_HDR+0x4b1>
300046ab:	61                   	popa   
300046ac:	73 65                	jae    30004713 <__GNU_EH_FRAME_HDR+0x4d7>
300046ae:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
300046b2:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
300046b5:	30 38                	xor    BYTE PTR [eax],bh
300046b7:	58                   	pop    eax
300046b8:	0a 00                	or     al,BYTE PTR [eax]
300046ba:	00 00                	add    BYTE PTR [eax],al
300046bc:	6c                   	ins    BYTE PTR es:[edi],dx
300046bd:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
300046c4:	6c                   	ins    BYTE PTR es:[edi],dx
300046c5:	6f                   	outs   dx,DWORD PTR ds:[esi]
300046c6:	63 3a                	arpl   WORD PTR [edx],di
300046c8:	63 72 65             	arpl   WORD PTR [edx+0x65],si
300046cb:	61                   	popa   
300046cc:	74 69                	je     30004737 <__GNU_EH_FRAME_HDR+0x4fb>
300046ce:	6e                   	outs   dx,BYTE PTR ds:[esi]
300046cf:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
300046d3:	61                   	popa   
300046d4:	70 20                	jo     300046f6 <__GNU_EH_FRAME_HDR+0x4ba>
300046d6:	72 65                	jb     3000473d <__GNU_EH_FRAME_HDR+0x501>
300046d8:	63 20                	arpl   WORD PTR [eax],sp
300046da:	40                   	inc    eax
300046db:	20 30                	and    BYTE PTR [eax],dh
300046dd:	78 25                	js     30004704 <__GNU_EH_FRAME_HDR+0x4c8>
300046df:	30 38                	xor    BYTE PTR [eax],bh
300046e1:	58                   	pop    eax
300046e2:	0a 00                	or     al,BYTE PTR [eax]
300046e4:	6c                   	ins    BYTE PTR es:[edi],dx
300046e5:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
300046ec:	6c                   	ins    BYTE PTR es:[edi],dx
300046ed:	6f                   	outs   dx,DWORD PTR ds:[esi]
300046ee:	63 3a                	arpl   WORD PTR [edx],di
300046f0:	20 68 65             	and    BYTE PTR [eax+0x65],ch
300046f3:	61                   	popa   
300046f4:	70 43                	jo     30004739 <__GNU_EH_FRAME_HDR+0x4fd>
300046f6:	75 72                	jne    3000476a <_ytab+0xa>
300046f8:	72 3d                	jb     30004737 <__GNU_EH_FRAME_HDR+0x4fb>
300046fa:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
300046fd:	30 38                	xor    BYTE PTR [eax],bh
300046ff:	58                   	pop    eax
30004700:	2c 20                	sub    al,0x20
30004702:	73 69                	jae    3000476d <_ytab+0xd>
30004704:	7a 65                	jp     3000476b <_ytab+0xb>
30004706:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004707:	66                   	data16
30004708:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
3000470b:	61                   	popa   
3000470c:	70 72                	jo     30004780 <_ytab+0x20>
3000470e:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
30004712:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
30004718:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
3000471b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
3000471e:	6c                   	ins    BYTE PTR es:[edi],dx
3000471f:	6c                   	ins    BYTE PTR es:[edi],dx
30004720:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004721:	63 3a                	arpl   WORD PTR [edx],di
30004723:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30004726:	74 75                	je     3000479d <_ytab+0x3d>
30004728:	72 6e                	jb     30004798 <_ytab+0x38>
3000472a:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
30004731:	30 38                	xor    BYTE PTR [eax],bh
30004733:	58                   	pop    eax
30004734:	0a 00                	or     al,BYTE PTR [eax]
	...
3000473e:	00 00                	add    BYTE PTR [eax],al
30004740:	47                   	inc    edi
30004741:	4d                   	dec    ebp
30004742:	54                   	push   esp
	...

30004760 <_ytab>:
30004760:	1f                   	pop    ds
30004761:	00 00                	add    BYTE PTR [eax],al
30004763:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30004766:	00 00                	add    BYTE PTR [eax],al
30004768:	1f                   	pop    ds
30004769:	00 00                	add    BYTE PTR [eax],al
3000476b:	00 1e                	add    BYTE PTR [esi],bl
3000476d:	00 00                	add    BYTE PTR [eax],al
3000476f:	00 1f                	add    BYTE PTR [edi],bl
30004771:	00 00                	add    BYTE PTR [eax],al
30004773:	00 1e                	add    BYTE PTR [esi],bl
30004775:	00 00                	add    BYTE PTR [eax],al
30004777:	00 1f                	add    BYTE PTR [edi],bl
30004779:	00 00                	add    BYTE PTR [eax],al
3000477b:	00 1f                	add    BYTE PTR [edi],bl
3000477d:	00 00                	add    BYTE PTR [eax],al
3000477f:	00 1e                	add    BYTE PTR [esi],bl
30004781:	00 00                	add    BYTE PTR [eax],al
30004783:	00 1f                	add    BYTE PTR [edi],bl
30004785:	00 00                	add    BYTE PTR [eax],al
30004787:	00 1e                	add    BYTE PTR [esi],bl
30004789:	00 00                	add    BYTE PTR [eax],al
3000478b:	00 1f                	add    BYTE PTR [edi],bl
3000478d:	00 00                	add    BYTE PTR [eax],al
3000478f:	00 1f                	add    BYTE PTR [edi],bl
30004791:	00 00                	add    BYTE PTR [eax],al
30004793:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
30004799:	00 00                	add    BYTE PTR [eax],al
3000479b:	00 1e                	add    BYTE PTR [esi],bl
3000479d:	00 00                	add    BYTE PTR [eax],al
3000479f:	00 1f                	add    BYTE PTR [edi],bl
300047a1:	00 00                	add    BYTE PTR [eax],al
300047a3:	00 1e                	add    BYTE PTR [esi],bl
300047a5:	00 00                	add    BYTE PTR [eax],al
300047a7:	00 1f                	add    BYTE PTR [edi],bl
300047a9:	00 00                	add    BYTE PTR [eax],al
300047ab:	00 1f                	add    BYTE PTR [edi],bl
300047ad:	00 00                	add    BYTE PTR [eax],al
300047af:	00 1e                	add    BYTE PTR [esi],bl
300047b1:	00 00                	add    BYTE PTR [eax],al
300047b3:	00 1f                	add    BYTE PTR [edi],bl
300047b5:	00 00                	add    BYTE PTR [eax],al
300047b7:	00 1e                	add    BYTE PTR [esi],bl
300047b9:	00 00                	add    BYTE PTR [eax],al
300047bb:	00 1f                	add    BYTE PTR [edi],bl
300047bd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

300047c0 <.rel.dyn>:
300047c0:	04 4a                	add    al,0x4a
300047c2:	00 30                	add    BYTE PTR [eax],dh
300047c4:	08 00                	or     BYTE PTR [eax],al
300047c6:	00 00                	add    BYTE PTR [eax],al
300047c8:	08 4a 00             	or     BYTE PTR [edx+0x0],cl
300047cb:	30 08                	xor    BYTE PTR [eax],cl
300047cd:	00 00                	add    BYTE PTR [eax],al
300047cf:	00 0c 4a             	add    BYTE PTR [edx+ecx*2],cl
300047d2:	00 30                	add    BYTE PTR [eax],dh
300047d4:	08 00                	or     BYTE PTR [eax],al
300047d6:	00 00                	add    BYTE PTR [eax],al
300047d8:	10 4a 00             	adc    BYTE PTR [edx+0x0],cl
300047db:	30 08                	xor    BYTE PTR [eax],cl
300047dd:	00 00                	add    BYTE PTR [eax],al
300047df:	00 14 4a             	add    BYTE PTR [edx+ecx*2],dl
300047e2:	00 30                	add    BYTE PTR [eax],dh
300047e4:	08 00                	or     BYTE PTR [eax],al
300047e6:	00 00                	add    BYTE PTR [eax],al
300047e8:	2c 4a                	sub    al,0x4a
300047ea:	00 30                	add    BYTE PTR [eax],dh
300047ec:	08 00                	or     BYTE PTR [eax],al
300047ee:	00 00                	add    BYTE PTR [eax],al
300047f0:	30 4a 00             	xor    BYTE PTR [edx+0x0],cl
300047f3:	30 08                	xor    BYTE PTR [eax],cl
300047f5:	00 00                	add    BYTE PTR [eax],al
300047f7:	00 34 4a             	add    BYTE PTR [edx+ecx*2],dh
300047fa:	00 30                	add    BYTE PTR [eax],dh
300047fc:	08 00                	or     BYTE PTR [eax],al
300047fe:	00 00                	add    BYTE PTR [eax],al
30004800:	7e 07                	jle    30004809 <_ytab+0xa9>
30004802:	00 30                	add    BYTE PTR [eax],dh
30004804:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
30004807:	00 be 07 00 30 02    	add    BYTE PTR [esi+0x2300007],bh
3000480d:	24 00                	and    al,0x0
3000480f:	00 e7                	add    bh,ah
30004811:	07                   	pop    es
30004812:	00 30                	add    BYTE PTR [eax],dh
30004814:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
30004817:	00 44 08 00          	add    BYTE PTR [eax+ecx*1+0x0],al
3000481b:	30 02                	xor    BYTE PTR [edx],al
3000481d:	24 00                	and    al,0x0
3000481f:	00 a7 08 00 30 02    	add    BYTE PTR [edi+0x2300008],ah
30004825:	24 00                	and    al,0x0
30004827:	00 dd                	add    ch,bl
30004829:	08 00                	or     BYTE PTR [eax],al
3000482b:	30 02                	xor    BYTE PTR [edx],al
3000482d:	24 00                	and    al,0x0
3000482f:	00 19                	add    BYTE PTR [ecx],bl
30004831:	09 00                	or     DWORD PTR [eax],eax
30004833:	30 02                	xor    BYTE PTR [edx],al
30004835:	24 00                	and    al,0x0
30004837:	00 57 09             	add    BYTE PTR [edi+0x9],dl
3000483a:	00 30                	add    BYTE PTR [eax],dh
3000483c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
3000483f:	00 97 09 00 30 02    	add    BYTE PTR [edi+0x2300009],dl
30004845:	24 00                	and    al,0x0
30004847:	00 d9                	add    cl,bl
30004849:	09 00                	or     DWORD PTR [eax],eax
3000484b:	30 02                	xor    BYTE PTR [edx],al
3000484d:	24 00                	and    al,0x0
3000484f:	00 b3 0b 00 30 02    	add    BYTE PTR [ebx+0x230000b],dh
30004855:	24 00                	and    al,0x0
30004857:	00 e3                	add    bl,ah
30004859:	0b 00                	or     eax,DWORD PTR [eax]
3000485b:	30 02                	xor    BYTE PTR [edx],al
3000485d:	24 00                	and    al,0x0
3000485f:	00 59 0c             	add    BYTE PTR [ecx+0xc],bl
30004862:	00 30                	add    BYTE PTR [eax],dh
30004864:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
30004867:	00 3b                	add    BYTE PTR [ebx],bh
30004869:	22 00                	and    al,BYTE PTR [eax]
3000486b:	30 02                	xor    BYTE PTR [edx],al
3000486d:	24 00                	and    al,0x0
3000486f:	00 a3 2e 00 30 02    	add    BYTE PTR [ebx+0x230002e],ah
30004875:	24 00                	and    al,0x0
30004877:	00 28                	add    BYTE PTR [eax],ch
30004879:	4a                   	dec    edx
3000487a:	00 30                	add    BYTE PTR [eax],dh
3000487c:	01 14 00             	add    DWORD PTR [eax+eax*1],edx
3000487f:	00 24 4a             	add    BYTE PTR [edx+ecx*2],ah
30004882:	00 30                	add    BYTE PTR [eax],dh
30004884:	07                   	pop    es
30004885:	12 00                	adc    al,BYTE PTR [eax]
	...

Disassembly of section .data:

300048a0 <console_node>:
300048a0:	01 00                	add    DWORD PTR [eax],eax
	...

300048e0 <rcsid>:
300048e0:	24 48                	and    al,0x48
300048e2:	65                   	gs
300048e3:	61                   	popa   
300048e4:	64                   	fs
300048e5:	65                   	gs
300048e6:	72 3a                	jb     30004922 <rcsid+0x42>
300048e8:	20 2f                	and    BYTE PTR [edi],ch
300048ea:	75 73                	jne    3000495f <_DYNAMIC+0x13>
300048ec:	65                   	gs
300048ed:	72 36                	jb     30004925 <rcsid+0x45>
300048ef:	2f                   	das    
300048f0:	6f                   	outs   dx,DWORD PTR ds:[esi]
300048f1:	75 73                	jne    30004966 <_DYNAMIC+0x1a>
300048f3:	74 65                	je     3000495a <_DYNAMIC+0xe>
300048f5:	72 2f                	jb     30004926 <rcsid+0x46>
300048f7:	74 63                	je     3000495c <_DYNAMIC+0x10>
300048f9:	6c                   	ins    BYTE PTR es:[edi],dx
300048fa:	2f                   	das    
300048fb:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
300048fe:	70 61                	jo     30004961 <_DYNAMIC+0x15>
30004900:	74 2f                	je     30004931 <rcsid+0x51>
30004902:	52                   	push   edx
30004903:	43                   	inc    ebx
30004904:	53                   	push   ebx
30004905:	2f                   	das    
30004906:	73 74                	jae    3000497c <_DYNAMIC+0x30>
30004908:	72 73                	jb     3000497d <_DYNAMIC+0x31>
3000490a:	74 72                	je     3000497e <_DYNAMIC+0x32>
3000490c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
30004910:	20 31                	and    BYTE PTR [ecx],dh
30004912:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
30004915:	39 33                	cmp    DWORD PTR [ebx],esi
30004917:	2f                   	das    
30004918:	30 33                	xor    BYTE PTR [ebx],dh
3000491a:	2f                   	das    
3000491b:	31 39                	xor    DWORD PTR [ecx],edi
3000491d:	20 31                	and    BYTE PTR [ecx],dh
3000491f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
30004924:	34 30                	xor    al,0x30
30004926:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
30004929:	73 74                	jae    3000499f <_DYNAMIC+0x53>
3000492b:	65                   	gs
3000492c:	72 20                	jb     3000494e <_DYNAMIC+0x2>
3000492e:	45                   	inc    ebp
3000492f:	78 70                	js     300049a1 <_DYNAMIC+0x55>
30004931:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
30004934:	53                   	push   ebx
30004935:	50                   	push   eax
30004936:	52                   	push   edx
30004937:	49                   	dec    ecx
30004938:	54                   	push   esp
30004939:	45                   	inc    ebp
3000493a:	20 28                	and    BYTE PTR [eax],ch
3000493c:	42                   	inc    edx
3000493d:	65                   	gs
3000493e:	72 6b                	jb     300049ab <_DYNAMIC+0x5f>
30004940:	65                   	gs
30004941:	6c                   	ins    BYTE PTR es:[edi],dx
30004942:	65                   	gs
30004943:	79 29                	jns    3000496e <_DYNAMIC+0x22>
30004945:	00 00                	add    BYTE PTR [eax],al
	...

30004948 <_daylight>:
30004948:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

3000494c <_DYNAMIC>:
3000494c:	19 00                	sbb    DWORD PTR [eax],eax
3000494e:	00 00                	add    BYTE PTR [eax],al
30004950:	28 4a 00             	sub    BYTE PTR [edx+0x0],cl
30004953:	30 1b                	xor    BYTE PTR [ebx],bl
30004955:	00 00                	add    BYTE PTR [eax],al
30004957:	00 04 00             	add    BYTE PTR [eax+eax*1],al
3000495a:	00 00                	add    BYTE PTR [eax],al
3000495c:	1a 00                	sbb    al,BYTE PTR [eax]
3000495e:	00 00                	add    BYTE PTR [eax],al
30004960:	2c 4a                	sub    al,0x4a
30004962:	00 30                	add    BYTE PTR [eax],dh
30004964:	1c 00                	sbb    al,0x0
30004966:	00 00                	add    BYTE PTR [eax],al
30004968:	04 00                	add    al,0x0
3000496a:	00 00                	add    BYTE PTR [eax],al
3000496c:	04 00                	add    al,0x0
3000496e:	00 00                	add    BYTE PTR [eax],al
30004970:	7c 40                	jl     300049b2 <_DYNAMIC+0x66>
30004972:	00 30                	add    BYTE PTR [eax],dh
30004974:	05 00 00 00 e0       	add    eax,0xe0000000
30004979:	3e 00 30             	add    BYTE PTR ds:[eax],dh
3000497c:	06                   	push   es
3000497d:	00 00                	add    BYTE PTR [eax],al
3000497f:	00 50 3b             	add    BYTE PTR [eax+0x3b],dl
30004982:	00 30                	add    BYTE PTR [eax],dh
30004984:	0a 00                	or     al,BYTE PTR [eax]
30004986:	00 00                	add    BYTE PTR [eax],al
30004988:	9a 01 00 00 0b 00 00 	call   0x0:0xb000001
3000498f:	00 10                	add    BYTE PTR [eax],dl
30004991:	00 00                	add    BYTE PTR [eax],al
30004993:	00 03                	add    BYTE PTR [ebx],al
30004995:	00 00                	add    BYTE PTR [eax],al
30004997:	00 18                	add    BYTE PTR [eax],bl
30004999:	4a                   	dec    edx
3000499a:	00 30                	add    BYTE PTR [eax],dh
3000499c:	02 00                	add    al,BYTE PTR [eax]
3000499e:	00 00                	add    BYTE PTR [eax],al
300049a0:	08 00                	or     BYTE PTR [eax],al
300049a2:	00 00                	add    BYTE PTR [eax],al
300049a4:	14 00                	adc    al,0x0
300049a6:	00 00                	add    BYTE PTR [eax],al
300049a8:	11 00                	adc    DWORD PTR [eax],eax
300049aa:	00 00                	add    BYTE PTR [eax],al
300049ac:	17                   	pop    ss
300049ad:	00 00                	add    BYTE PTR [eax],al
300049af:	00 80 48 00 30 11    	add    BYTE PTR [eax+0x11300048],al
300049b5:	00 00                	add    BYTE PTR [eax],al
300049b7:	00 c0                	add    al,al
300049b9:	47                   	inc    edi
300049ba:	00 30                	add    BYTE PTR [eax],dh
300049bc:	12 00                	adc    al,BYTE PTR [eax]
300049be:	00 00                	add    BYTE PTR [eax],al
300049c0:	c0 00 00             	rol    BYTE PTR [eax],0x0
300049c3:	00 13                	add    BYTE PTR [ebx],dl
300049c5:	00 00                	add    BYTE PTR [eax],al
300049c7:	00 08                	add    BYTE PTR [eax],cl
300049c9:	00 00                	add    BYTE PTR [eax],al
300049cb:	00 16                	add    BYTE PTR [esi],dl
300049cd:	00 00                	add    BYTE PTR [eax],al
300049cf:	00 00                	add    BYTE PTR [eax],al
300049d1:	00 00                	add    BYTE PTR [eax],al
300049d3:	00 fa                	add    dl,bh
300049d5:	ff                   	(bad)  
300049d6:	ff 6f 08             	jmp    FWORD PTR [edi+0x8]
	...

Disassembly of section .got:

30004a04 <.got>:
30004a04:	38 4a 00             	cmp    BYTE PTR [edx+0x0],cl
30004a07:	30 3c 4a             	xor    BYTE PTR [edx+ecx*2],bh
30004a0a:	00 30                	add    BYTE PTR [eax],dh
30004a0c:	40                   	inc    eax
30004a0d:	4a                   	dec    edx
30004a0e:	00 30                	add    BYTE PTR [eax],dh
30004a10:	44                   	inc    esp
30004a11:	4a                   	dec    edx
30004a12:	00 30                	add    BYTE PTR [eax],dh
30004a14:	48                   	dec    eax
30004a15:	4a                   	dec    edx
30004a16:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .got.plt:

30004a18 <_GLOBAL_OFFSET_TABLE_>:
30004a18:	4c                   	dec    esp
30004a19:	49                   	dec    ecx
30004a1a:	00 30                	add    BYTE PTR [eax],dh
	...
30004a24:	f6 2e                	imul   BYTE PTR [esi]
30004a26:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .init_array:

30004a28 <.init_array>:
30004a28:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

30004a2c <.fini_array>:
30004a2c:	8f 0a                	(bad)  
30004a2e:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .data.rel.local:

30004a30 <_tzname>:
30004a30:	40                   	inc    eax
30004a31:	47                   	inc    edi
30004a32:	00 30                	add    BYTE PTR [eax],dh
30004a34:	40                   	inc    eax
30004a35:	47                   	inc    edi
30004a36:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .bss:

30004a38 <heapEnd>:
30004a38:	00 00                	add    BYTE PTR [eax],al
	...

30004a3c <heapBase>:
30004a3c:	00 00                	add    BYTE PTR [eax],al
	...

30004a40 <heapCurr>:
30004a40:	00 00                	add    BYTE PTR [eax],al
	...

30004a44 <processEnvp>:
30004a44:	00 00                	add    BYTE PTR [eax],al
	...

30004a48 <libcTZ>:
30004a48:	00 00                	add    BYTE PTR [eax],al
	...

30004a4c <lasts.1377>:
30004a4c:	00 00                	add    BYTE PTR [eax],al
	...

30004a50 <libcInitialized>:
30004a50:	00 00                	add    BYTE PTR [eax],al
	...

30004a54 <fops>:
	...

30004a5c <console_file>:
	...

30004a6c <_dstbias>:
30004a6c:	00 00                	add    BYTE PTR [eax],al
	...

30004a70 <ticksToWait>:
30004a70:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	5f                   	pop    edi
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	f4                   	hlt    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c b8             	add    BYTE PTR [eax+edi*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 72 00             	add    BYTE PTR [edx+0x0],dh
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 30                	add    BYTE PTR [eax],dh
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	64 00 00             	add    BYTE PTR fs:[eax],al
      2b:	00 02                	add    BYTE PTR [edx],al
      2d:	01 06                	add    DWORD PTR [esi],eax
      2f:	5d                   	pop    ebp
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
      4d:	00 00                	add    BYTE PTR [eax],al
      4f:	02 02                	add    al,BYTE PTR [edx]
      51:	07                   	pop    es
      52:	0e                   	push   cs
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
      5d:	61                   	popa   
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	3e 00 00             	add    BYTE PTR ds:[eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	34 00                	xor    al,0x0
      6d:	00 00                	add    BYTE PTR [eax],al
      6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
      76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
      79:	9b                   	fwait
      7a:	00 00                	add    BYTE PTR [eax],al
      7c:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
      82:	00 06                	add    BYTE PTR [esi],al
      84:	25 00 00 00 02       	and    eax,0x2000000
      89:	01 02                	add    DWORD PTR [edx],eax
      8b:	95                   	xchg   ebp,eax
      8c:	00 00                	add    BYTE PTR [eax],al
      8e:	00 02                	add    BYTE PTR [edx],al
      90:	04 07                	add    al,0x7
      92:	39 00                	cmp    DWORD PTR [eax],eax
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      99:	e1 00                	loope  9b <sysEnter_Vector-0x12ff65>
      9b:	00 00                	add    BYTE PTR [eax],al
      9d:	05 04 25 00 00       	add    eax,0x2504
      a2:	00 07                	add    BYTE PTR [edi],al
      a4:	21 00                	and    DWORD PTR [eax],eax
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	01 08                	add    DWORD PTR [eax],ecx
      aa:	9d                   	popf   
      ab:	00 00                	add    BYTE PTR [eax],al
      ad:	00 00                	add    BYTE PTR [eax],al
      af:	00 00                	add    BYTE PTR [eax],al
      b1:	30 38                	xor    BYTE PTR [eax],bh
      b3:	00 00                	add    BYTE PTR [eax],al
      b5:	00 01                	add    BYTE PTR [ecx],al
      b7:	9c                   	pushf  
      b8:	d5 00                	aad    0x0
      ba:	00 00                	add    BYTE PTR [eax],al
      bc:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
      bf:	01 08                	add    DWORD PTR [eax],ecx
      c1:	7d 00                	jge    c3 <sysEnter_Vector-0x12ff3d>
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      cb:	01 08                	add    DWORD PTR [eax],ecx
      cd:	3a 00                	cmp    al,BYTE PTR [eax]
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	02 91 04 00 07 a7    	add    dl,BYTE PTR [ecx-0x58f8fffc]
      d7:	00 00                	add    BYTE PTR [eax],al
      d9:	00 01                	add    BYTE PTR [ecx],al
      db:	10 9d 00 00 00 38    	adc    BYTE PTR [ebp+0x38000000],bl
      e1:	00 00                	add    BYTE PTR [eax],al
      e3:	30 38                	xor    BYTE PTR [eax],bh
      e5:	00 00                	add    BYTE PTR [eax],al
      e7:	00 01                	add    BYTE PTR [ecx],al
      e9:	9c                   	pushf  
      ea:	07                   	pop    es
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 08                	add    BYTE PTR [eax],cl
      ef:	73 00                	jae    f1 <sysEnter_Vector-0x12ff0f>
      f1:	01 10                	add    DWORD PTR [eax],edx
      f3:	7d 00                	jge    f5 <sysEnter_Vector-0x12ff0b>
      f5:	00 00                	add    BYTE PTR [eax],al
      f7:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      fd:	01 10                	add    DWORD PTR [eax],edx
      ff:	3a 00                	cmp    al,BYTE PTR [eax]
     101:	00 00                	add    BYTE PTR [eax],al
     103:	02 91 04 00 09 4b    	add    dl,BYTE PTR [ecx+0x4b090004]
     109:	00 00                	add    BYTE PTR [eax],al
     10b:	00 02                	add    BYTE PTR [edx],al
     10d:	34 56                	xor    al,0x56
     10f:	00 00                	add    BYTE PTR [eax],al
     111:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
     117:	30 09                	xor    BYTE PTR [ecx],cl
     119:	af                   	scas   eax,DWORD PTR es:[edi]
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 02                	add    BYTE PTR [edx],al
     11e:	35 56 00 00 00       	xor    eax,0x56
     123:	05 03 40 4a 00       	add    eax,0x4a4003
     128:	30 09                	xor    BYTE PTR [ecx],cl
     12a:	5b                   	pop    ebx
     12b:	01 00                	add    DWORD PTR [eax],eax
     12d:	00 02                	add    BYTE PTR [edx],al
     12f:	36                   	ss
     130:	56                   	push   esi
     131:	00 00                	add    BYTE PTR [eax],al
     133:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
     139:	30 09                	xor    BYTE PTR [ecx],cl
     13b:	54                   	push   esp
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 02                	add    BYTE PTR [edx],al
     140:	37                   	aaa    
     141:	6f                   	outs   dx,DWORD PTR ds:[esi]
     142:	00 00                	add    BYTE PTR [eax],al
     144:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
     14a:	30 09                	xor    BYTE PTR [ecx],cl
     14c:	28 00                	sub    BYTE PTR [eax],al
     14e:	00 00                	add    BYTE PTR [eax],al
     150:	03 4c 5c 01          	add    ecx,DWORD PTR [esp+ebx*2+0x1]
     154:	00 00                	add    BYTE PTR [eax],al
     156:	05 03 44 4a 00       	add    eax,0x4a4403
     15b:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     161:	00 00                	add    BYTE PTR [eax],al
     163:	9e                   	sahf   
     164:	01 00                	add    DWORD PTR [eax],eax
     166:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     169:	83 00 00             	add    DWORD PTR [eax],0x0
     16c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     16f:	f4                   	hlt    
     170:	00 00                	add    BYTE PTR [eax],al
     172:	00 0c 69             	add    BYTE PTR [ecx+ebp*2],cl
     175:	01 00                	add    DWORD PTR [eax],eax
     177:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     17a:	00 00                	add    BYTE PTR [eax],al
     17c:	70 00                	jo     17e <sysEnter_Vector-0x12fe82>
     17e:	00 30                	add    BYTE PTR [eax],dh
     180:	aa                   	stos   BYTE PTR es:[edi],al
     181:	00 00                	add    BYTE PTR [eax],al
     183:	00 d4                	add    ah,dl
     185:	00 00                	add    BYTE PTR [eax],al
     187:	00 02                	add    BYTE PTR [edx],al
     189:	01 06                	add    DWORD PTR [esi],eax
     18b:	64 00 00             	add    BYTE PTR fs:[eax],al
     18e:	00 02                	add    BYTE PTR [edx],al
     190:	01 06                	add    DWORD PTR [esi],eax
     192:	5d                   	pop    ebp
     193:	00 00                	add    BYTE PTR [eax],al
     195:	00 02                	add    BYTE PTR [edx],al
     197:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     19d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1a4:	02 08                	add    cl,BYTE PTR [eax]
     1a6:	05 00 00 00 00       	add    eax,0x0
     1ab:	02 01                	add    al,BYTE PTR [ecx]
     1ad:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     1b0:	00 00                	add    BYTE PTR [eax],al
     1b2:	02 02                	add    al,BYTE PTR [edx]
     1b4:	07                   	pop    es
     1b5:	0e                   	push   cs
     1b6:	00 00                	add    BYTE PTR [eax],al
     1b8:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     1c0:	61                   	popa   
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 02                	add    BYTE PTR [edx],al
     1c5:	04 07                	add    al,0x7
     1c7:	3e 00 00             	add    BYTE PTR ds:[eax],al
     1ca:	00 02                	add    BYTE PTR [edx],al
     1cc:	08 07                	or     BYTE PTR [edi],al
     1ce:	34 00                	xor    al,0x0
     1d0:	00 00                	add    BYTE PTR [eax],al
     1d2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     1d9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     1dc:	9b                   	fwait
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	00 02                	add    BYTE PTR [edx],al
     1e1:	01 02                	add    DWORD PTR [edx],eax
     1e3:	95                   	xchg   ebp,eax
     1e4:	00 00                	add    BYTE PTR [eax],al
     1e6:	00 02                	add    BYTE PTR [edx],al
     1e8:	04 07                	add    al,0x7
     1ea:	39 00                	cmp    DWORD PTR [eax],eax
     1ec:	00 00                	add    BYTE PTR [eax],al
     1ee:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     1f1:	e1 00                	loope  1f3 <sysEnter_Vector-0x12fe0d>
     1f3:	00 00                	add    BYTE PTR [eax],al
     1f5:	05 04 25 00 00       	add    eax,0x2504
     1fa:	00 06                	add    BYTE PTR [esi],al
     1fc:	93                   	xchg   ebx,eax
     1fd:	01 00                	add    DWORD PTR [eax],eax
     1ff:	00 01                	add    BYTE PTR [ecx],al
     201:	25 3a 00 00 00       	and    eax,0x3a
     206:	70 00                	jo     208 <sysEnter_Vector-0x12fdf8>
     208:	00 30                	add    BYTE PTR [eax],dh
     20a:	55                   	push   ebp
     20b:	00 00                	add    BYTE PTR [eax],al
     20d:	00 01                	add    BYTE PTR [ecx],al
     20f:	9c                   	pushf  
     210:	ef                   	out    dx,eax
     211:	00 00                	add    BYTE PTR [eax],al
     213:	00 07                	add    BYTE PTR [edi],al
     215:	20 0b                	and    BYTE PTR [ebx],cl
     217:	00 00                	add    BYTE PTR [eax],al
     219:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     21f:	02 91 00 07 63 01    	add    dl,BYTE PTR [ecx+0x1630700]
     225:	00 00                	add    BYTE PTR [eax],al
     227:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     22d:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     233:	01 27                	add    DWORD PTR [edi],esp
     235:	25 00 00 00 01       	and    eax,0x1000000
     23a:	51                   	push   ecx
     23b:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     23e:	01 27                	add    DWORD PTR [edi],esp
     240:	92                   	xchg   edx,eax
     241:	00 00                	add    BYTE PTR [eax],al
     243:	00 01                	add    BYTE PTR [ecx],al
     245:	56                   	push   esi
     246:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	92                   	xchg   edx,eax
     24c:	00 00                	add    BYTE PTR [eax],al
     24e:	00 01                	add    BYTE PTR [ecx],al
     250:	53                   	push   ebx
     251:	00 06                	add    BYTE PTR [esi],al
     253:	9b                   	fwait
     254:	01 00                	add    DWORD PTR [eax],eax
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	33 3a                	xor    edi,DWORD PTR [edx]
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	00 c5                	add    ch,al
     25e:	00 00                	add    BYTE PTR [eax],al
     260:	30 55 00             	xor    BYTE PTR [ebp+0x0],dl
     263:	00 00                	add    BYTE PTR [eax],al
     265:	01 9c 46 01 00 00 07 	add    DWORD PTR [esi+eax*2+0x7000001],ebx
     26c:	20 0b                	and    BYTE PTR [ebx],cl
     26e:	00 00                	add    BYTE PTR [eax],al
     270:	01 33                	add    DWORD PTR [ebx],esi
     272:	92                   	xchg   edx,eax
     273:	00 00                	add    BYTE PTR [eax],al
     275:	00 02                	add    BYTE PTR [edx],al
     277:	91                   	xchg   ecx,eax
     278:	00 07                	add    BYTE PTR [edi],al
     27a:	63 01                	arpl   WORD PTR [ecx],ax
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	01 33                	add    DWORD PTR [ebx],esi
     280:	92                   	xchg   edx,eax
     281:	00 00                	add    BYTE PTR [eax],al
     283:	00 02                	add    BYTE PTR [edx],al
     285:	91                   	xchg   ecx,eax
     286:	04 08                	add    al,0x8
     288:	63 00                	arpl   WORD PTR [eax],ax
     28a:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     290:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     293:	70 00                	jo     295 <sysEnter_Vector-0x12fd6b>
     295:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     29b:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     29e:	73 00                	jae    2a0 <sysEnter_Vector-0x12fd60>
     2a0:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     2a6:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2a9:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
     2b9:	30 09                	xor    BYTE PTR [ecx],cl
     2bb:	af                   	scas   eax,DWORD PTR es:[edi]
     2bc:	00 00                	add    BYTE PTR [eax],al
     2be:	00 02                	add    BYTE PTR [edx],al
     2c0:	35 56 00 00 00       	xor    eax,0x56
     2c5:	05 03 40 4a 00       	add    eax,0x4a4003
     2ca:	30 09                	xor    BYTE PTR [ecx],cl
     2cc:	5b                   	pop    ebx
     2cd:	01 00                	add    DWORD PTR [eax],eax
     2cf:	00 02                	add    BYTE PTR [edx],al
     2d1:	36                   	ss
     2d2:	56                   	push   esi
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
     2db:	30 09                	xor    BYTE PTR [ecx],cl
     2dd:	54                   	push   esp
     2de:	00 00                	add    BYTE PTR [eax],al
     2e0:	00 02                	add    BYTE PTR [edx],al
     2e2:	37                   	aaa    
     2e3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
     2ec:	30 09                	xor    BYTE PTR [ecx],cl
     2ee:	28 00                	sub    BYTE PTR [eax],al
     2f0:	00 00                	add    BYTE PTR [eax],al
     2f2:	03 4c 9b 01          	add    ecx,DWORD PTR [ebx+ebx*4+0x1]
     2f6:	00 00                	add    BYTE PTR [eax],al
     2f8:	05 03 44 4a 00       	add    eax,0x4a4403
     2fd:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     303:	00 00                	add    BYTE PTR [eax],al
     305:	41                   	inc    ecx
     306:	01 00                	add    DWORD PTR [eax],eax
     308:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     30b:	0e                   	push   cs
     30c:	01 00                	add    DWORD PTR [eax],eax
     30e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     311:	f4                   	hlt    
     312:	00 00                	add    BYTE PTR [eax],al
     314:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
     317:	01 00                	add    DWORD PTR [eax],eax
     319:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     31c:	00 00                	add    BYTE PTR [eax],al
     31e:	1c 01                	sbb    al,0x1
     320:	00 30                	add    BYTE PTR [eax],dh
     322:	97                   	xchg   edi,eax
     323:	00 00                	add    BYTE PTR [eax],al
     325:	00 db                	add    bl,bl
     327:	01 00                	add    DWORD PTR [eax],eax
     329:	00 02                	add    BYTE PTR [edx],al
     32b:	01 06                	add    DWORD PTR [esi],eax
     32d:	64 00 00             	add    BYTE PTR fs:[eax],al
     330:	00 02                	add    BYTE PTR [edx],al
     332:	01 06                	add    DWORD PTR [esi],eax
     334:	5d                   	pop    ebp
     335:	00 00                	add    BYTE PTR [eax],al
     337:	00 02                	add    BYTE PTR [edx],al
     339:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     33f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     346:	02 08                	add    cl,BYTE PTR [eax]
     348:	05 00 00 00 00       	add    eax,0x0
     34d:	02 01                	add    al,BYTE PTR [ecx]
     34f:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     352:	00 00                	add    BYTE PTR [eax],al
     354:	02 02                	add    al,BYTE PTR [edx]
     356:	07                   	pop    es
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     362:	61                   	popa   
     363:	00 00                	add    BYTE PTR [eax],al
     365:	00 02                	add    BYTE PTR [edx],al
     367:	04 07                	add    al,0x7
     369:	3e 00 00             	add    BYTE PTR ds:[eax],al
     36c:	00 02                	add    BYTE PTR [edx],al
     36e:	08 07                	or     BYTE PTR [edi],al
     370:	34 00                	xor    al,0x0
     372:	00 00                	add    BYTE PTR [eax],al
     374:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     37b:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     37e:	9b                   	fwait
     37f:	00 00                	add    BYTE PTR [eax],al
     381:	00 02                	add    BYTE PTR [edx],al
     383:	01 02                	add    DWORD PTR [edx],eax
     385:	95                   	xchg   ebp,eax
     386:	00 00                	add    BYTE PTR [eax],al
     388:	00 02                	add    BYTE PTR [edx],al
     38a:	04 07                	add    al,0x7
     38c:	39 00                	cmp    DWORD PTR [eax],eax
     38e:	00 00                	add    BYTE PTR [eax],al
     390:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     393:	e1 00                	loope  395 <sysEnter_Vector-0x12fc6b>
     395:	00 00                	add    BYTE PTR [eax],al
     397:	05 04 25 00 00       	add    eax,0x2504
     39c:	00 06                	add    BYTE PTR [esi],al
     39e:	d9 01                	fld    DWORD PTR [ecx]
     3a0:	00 00                	add    BYTE PTR [eax],al
     3a2:	01 28                	add    DWORD PTR [eax],ebp
     3a4:	92                   	xchg   edx,eax
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3aa:	00 30                	add    BYTE PTR [eax],dh
     3ac:	97                   	xchg   edi,eax
     3ad:	00 00                	add    BYTE PTR [eax],al
     3af:	00 01                	add    BYTE PTR [ecx],al
     3b1:	9c                   	pushf  
     3b2:	e9 00 00 00 07       	jmp    70003b7 <sysEnter_Vector+0x6ed03b7>
     3b7:	73 00                	jae    3b9 <sysEnter_Vector-0x12fc47>
     3b9:	01 28                	add    DWORD PTR [eax],ebp
     3bb:	92                   	xchg   edx,eax
     3bc:	00 00                	add    BYTE PTR [eax],al
     3be:	00 02                	add    BYTE PTR [edx],al
     3c0:	91                   	xchg   ecx,eax
     3c1:	00 08                	add    BYTE PTR [eax],cl
     3c3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     3c4:	01 00                	add    DWORD PTR [eax],eax
     3c6:	00 01                	add    BYTE PTR [ecx],al
     3c8:	28 92 00 00 00 02    	sub    BYTE PTR [edx+0x2000000],dl
     3ce:	91                   	xchg   ecx,eax
     3cf:	04 09                	add    al,0x9
     3d1:	d3 01                	rol    DWORD PTR [ecx],cl
     3d3:	00 00                	add    BYTE PTR [eax],al
     3d5:	01 2a                	add    DWORD PTR [edx],ebp
     3d7:	92                   	xchg   edx,eax
     3d8:	00 00                	add    BYTE PTR [eax],al
     3da:	00 05 03 4c 4a 00    	add    BYTE PTR ds:0x4a4c03,al
     3e0:	30 0a                	xor    BYTE PTR [edx],cl
     3e2:	63 68 00             	arpl   WORD PTR [eax+0x0],bp
     3e5:	01 2b                	add    DWORD PTR [ebx],ebp
     3e7:	3a 00                	cmp    al,BYTE PTR [eax]
     3e9:	00 00                	add    BYTE PTR [eax],al
     3eb:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     3ee:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
     3fe:	30 0b                	xor    BYTE PTR [ebx],cl
     400:	af                   	scas   eax,DWORD PTR es:[edi]
     401:	00 00                	add    BYTE PTR [eax],al
     403:	00 02                	add    BYTE PTR [edx],al
     405:	35 56 00 00 00       	xor    eax,0x56
     40a:	05 03 40 4a 00       	add    eax,0x4a4003
     40f:	30 0b                	xor    BYTE PTR [ebx],cl
     411:	5b                   	pop    ebx
     412:	01 00                	add    DWORD PTR [eax],eax
     414:	00 02                	add    BYTE PTR [edx],al
     416:	36                   	ss
     417:	56                   	push   esi
     418:	00 00                	add    BYTE PTR [eax],al
     41a:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
     420:	30 0b                	xor    BYTE PTR [ebx],cl
     422:	54                   	push   esp
     423:	00 00                	add    BYTE PTR [eax],al
     425:	00 02                	add    BYTE PTR [edx],al
     427:	37                   	aaa    
     428:	6f                   	outs   dx,DWORD PTR ds:[esi]
     429:	00 00                	add    BYTE PTR [eax],al
     42b:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
     431:	30 0b                	xor    BYTE PTR [ebx],cl
     433:	28 00                	sub    BYTE PTR [eax],al
     435:	00 00                	add    BYTE PTR [eax],al
     437:	03 4c 3e 01          	add    ecx,DWORD PTR [esi+edi*1+0x1]
     43b:	00 00                	add    BYTE PTR [eax],al
     43d:	05 03 44 4a 00       	add    eax,0x4a4403
     442:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	12 02                	adc    al,BYTE PTR [edx]
     44c:	00 00                	add    BYTE PTR [eax],al
     44e:	04 00                	add    al,0x0
     450:	b7 01                	mov    bh,0x1
     452:	00 00                	add    BYTE PTR [eax],al
     454:	04 01                	add    al,0x1
     456:	f4                   	hlt    
     457:	00 00                	add    BYTE PTR [eax],al
     459:	00 0c e6             	add    BYTE PTR [esi+eiz*8],cl
     45c:	01 00                	add    DWORD PTR [eax],eax
     45e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     461:	00 00                	add    BYTE PTR [eax],al
     463:	b4 01                	mov    ah,0x1
     465:	00 30                	add    BYTE PTR [eax],dh
     467:	49                   	dec    ecx
     468:	02 00                	add    al,BYTE PTR [eax]
     46a:	00 b3 02 00 00 02    	add    BYTE PTR [ebx+0x2000002],dh
     470:	01 06                	add    DWORD PTR [esi],eax
     472:	64 00 00             	add    BYTE PTR fs:[eax],al
     475:	00 02                	add    BYTE PTR [edx],al
     477:	01 06                	add    DWORD PTR [esi],eax
     479:	5d                   	pop    ebp
     47a:	00 00                	add    BYTE PTR [eax],al
     47c:	00 02                	add    BYTE PTR [edx],al
     47e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     484:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     48b:	02 08                	add    cl,BYTE PTR [eax]
     48d:	05 00 00 00 00       	add    eax,0x0
     492:	02 01                	add    al,BYTE PTR [ecx]
     494:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     497:	00 00                	add    BYTE PTR [eax],al
     499:	02 02                	add    al,BYTE PTR [edx]
     49b:	07                   	pop    es
     49c:	0e                   	push   cs
     49d:	00 00                	add    BYTE PTR [eax],al
     49f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     4a2:	00 00                	add    BYTE PTR [eax],al
     4a4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     4a7:	61                   	popa   
     4a8:	00 00                	add    BYTE PTR [eax],al
     4aa:	00 02                	add    BYTE PTR [edx],al
     4ac:	04 07                	add    al,0x7
     4ae:	3e 00 00             	add    BYTE PTR ds:[eax],al
     4b1:	00 02                	add    BYTE PTR [edx],al
     4b3:	08 07                	or     BYTE PTR [edi],al
     4b5:	34 00                	xor    al,0x0
     4b7:	00 00                	add    BYTE PTR [eax],al
     4b9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     4c0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     4c3:	9b                   	fwait
     4c4:	00 00                	add    BYTE PTR [eax],al
     4c6:	00 02                	add    BYTE PTR [edx],al
     4c8:	01 02                	add    DWORD PTR [edx],eax
     4ca:	95                   	xchg   ebp,eax
     4cb:	00 00                	add    BYTE PTR [eax],al
     4cd:	00 02                	add    BYTE PTR [edx],al
     4cf:	04 07                	add    al,0x7
     4d1:	39 00                	cmp    DWORD PTR [eax],eax
     4d3:	00 00                	add    BYTE PTR [eax],al
     4d5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     4d8:	e1 00                	loope  4da <sysEnter_Vector-0x12fb26>
     4da:	00 00                	add    BYTE PTR [eax],al
     4dc:	05 04 25 00 00       	add    eax,0x2504
     4e1:	00 06                	add    BYTE PTR [esi],al
     4e3:	fc                   	cld    
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 01                	add    BYTE PTR [ecx],al
     4e8:	09 b4 01 00 30 77 00 	or     DWORD PTR [ecx+eax*1+0x773000],esi
     4ef:	00 00                	add    BYTE PTR [eax],al
     4f1:	01 9c de 00 00 00 07 	add    DWORD PTR [esi+ebx*8+0x7000000],ebx
     4f8:	73 00                	jae    4fa <sysEnter_Vector-0x12fb06>
     4fa:	01 09                	add    DWORD PTR [ecx],ecx
     4fc:	92                   	xchg   edx,eax
     4fd:	00 00                	add    BYTE PTR [eax],al
     4ff:	00 02                	add    BYTE PTR [edx],al
     501:	91                   	xchg   ecx,eax
     502:	00 08                	add    BYTE PTR [eax],cl
     504:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     512:	01 0b                	add    DWORD PTR [ebx],ecx
     514:	3a 00                	cmp    al,BYTE PTR [eax]
     516:	00 00                	add    BYTE PTR [eax],al
     518:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     51e:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     525:	91                   	xchg   ecx,eax
     526:	67 00 06 f2 01       	add    BYTE PTR ds:0x1f2,al
     52b:	00 00                	add    BYTE PTR [eax],al
     52d:	01 15 2b 02 00 30    	add    DWORD PTR ds:0x3000022b,edx
     533:	bb 00 00 00 01       	mov    ebx,0x1000000
     538:	9c                   	pushf  
     539:	26 01 00             	add    DWORD PTR es:[eax],eax
     53c:	00 07                	add    BYTE PTR [edi],al
     53e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     53f:	00 01                	add    BYTE PTR [ecx],al
     541:	15 3a 00 00 00       	adc    eax,0x3a
     546:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     54c:	01 15 92 00 00 00    	add    DWORD PTR ds:0x92,edx
     552:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     558:	01 17                	add    DWORD PTR [edi],edx
     55a:	3a 00                	cmp    al,BYTE PTR [eax]
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	02 91 6c 09 05 02    	add    dl,BYTE PTR [ecx+0x205096c]
     564:	00 00                	add    BYTE PTR [eax],al
     566:	01 17                	add    DWORD PTR [edi],edx
     568:	3a 00                	cmp    al,BYTE PTR [eax]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	02 91 68 00 06 e0    	add    dl,BYTE PTR [ecx-0x1ff9ff98]
     572:	01 00                	add    DWORD PTR [eax],eax
     574:	00 01                	add    BYTE PTR [ecx],al
     576:	25 e6 02 00 30       	and    eax,0x300002e6
     57b:	bb 00 00 00 01       	mov    ebx,0x1000000
     580:	9c                   	pushf  
     581:	6e                   	outs   dx,BYTE PTR ds:[esi]
     582:	01 00                	add    DWORD PTR [eax],eax
     584:	00 07                	add    BYTE PTR [edi],al
     586:	6e                   	outs   dx,BYTE PTR ds:[esi]
     587:	00 01                	add    BYTE PTR [ecx],al
     589:	25 3a 00 00 00       	and    eax,0x3a
     58e:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     594:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     59a:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5a0:	01 27                	add    DWORD PTR [edi],esp
     5a2:	3a 00                	cmp    al,BYTE PTR [eax]
     5a4:	00 00                	add    BYTE PTR [eax],al
     5a6:	02 91 6c 09 05 02    	add    dl,BYTE PTR [ecx+0x205096c]
     5ac:	00 00                	add    BYTE PTR [eax],al
     5ae:	01 27                	add    DWORD PTR [edi],esp
     5b0:	3a 00                	cmp    al,BYTE PTR [eax]
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 91 68 00 0a f7    	add    dl,BYTE PTR [ecx-0x8f5ff98]
     5ba:	01 00                	add    DWORD PTR [eax],eax
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
     5c8:	00 00                	add    BYTE PTR [eax],al
     5ca:	00 01                	add    BYTE PTR [ecx],al
     5cc:	9c                   	pushf  
     5cd:	ba 01 00 00 07       	mov    edx,0x7000001
     5d2:	73 74                	jae    648 <sysEnter_Vector-0x12f9b8>
     5d4:	72 00                	jb     5d6 <sysEnter_Vector-0x12fa2a>
     5d6:	01 36                	add    DWORD PTR [esi],esi
     5d8:	92                   	xchg   edx,eax
     5d9:	00 00                	add    BYTE PTR [eax],al
     5db:	00 02                	add    BYTE PTR [edx],al
     5dd:	91                   	xchg   ecx,eax
     5de:	00 08                	add    BYTE PTR [eax],cl
     5e0:	72 65                	jb     647 <sysEnter_Vector-0x12f9b9>
     5e2:	73 00                	jae    5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	01 38                	add    DWORD PTR [eax],edi
     5e6:	3a 00                	cmp    al,BYTE PTR [eax]
     5e8:	00 00                	add    BYTE PTR [eax],al
     5ea:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     5f0:	00 30                	add    BYTE PTR [eax],dh
     5f2:	40                   	inc    eax
     5f3:	00 00                	add    BYTE PTR [eax],al
     5f5:	00 08                	add    BYTE PTR [eax],cl
     5f7:	69 00 01 3c 3a 00    	imul   eax,DWORD PTR [eax],0x3a3c01
     5fd:	00 00                	add    BYTE PTR [eax],al
     5ff:	02 91 70 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000070]
     605:	4b                   	dec    ebx
     606:	00 00                	add    BYTE PTR [eax],al
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	34 56                	xor    al,0x56
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
     614:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
     617:	00 00                	add    BYTE PTR [eax],al
     619:	00 02                	add    BYTE PTR [edx],al
     61b:	35 56 00 00 00       	xor    eax,0x56
     620:	05 03 40 4a 00       	add    eax,0x4a4003
     625:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
     628:	01 00                	add    DWORD PTR [eax],eax
     62a:	00 02                	add    BYTE PTR [edx],al
     62c:	36                   	ss
     62d:	56                   	push   esi
     62e:	00 00                	add    BYTE PTR [eax],al
     630:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
     636:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
     639:	00 00                	add    BYTE PTR [eax],al
     63b:	00 02                	add    BYTE PTR [edx],al
     63d:	37                   	aaa    
     63e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     63f:	00 00                	add    BYTE PTR [eax],al
     641:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
     647:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 03                	add    BYTE PTR [ebx],al
     64e:	4c                   	dec    esp
     64f:	0f 02 00             	lar    eax,WORD PTR [eax]
     652:	00 05 03 44 4a 00    	add    BYTE PTR ds:0x4a4403,al
     658:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     65e:	00 00                	add    BYTE PTR [eax],al
     660:	b2 01                	mov    dl,0x1
     662:	00 00                	add    BYTE PTR [eax],al
     664:	04 00                	add    al,0x0
     666:	74 02                	je     66a <sysEnter_Vector-0x12f996>
     668:	00 00                	add    BYTE PTR [eax],al
     66a:	04 01                	add    al,0x1
     66c:	f4                   	hlt    
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
     672:	02 00                	add    al,BYTE PTR [eax]
     674:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     677:	00 00                	add    BYTE PTR [eax],al
     679:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     67c:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	c7 03 00 00 02 01    	mov    DWORD PTR [ebx],0x1020000
     687:	06                   	push   es
     688:	64 00 00             	add    BYTE PTR fs:[eax],al
     68b:	00 02                	add    BYTE PTR [edx],al
     68d:	01 06                	add    DWORD PTR [esi],eax
     68f:	5d                   	pop    ebp
     690:	00 00                	add    BYTE PTR [eax],al
     692:	00 02                	add    BYTE PTR [edx],al
     694:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     69a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     6a1:	02 08                	add    cl,BYTE PTR [eax]
     6a3:	05 00 00 00 00       	add    eax,0x0
     6a8:	02 01                	add    al,BYTE PTR [ecx]
     6aa:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     6ad:	00 00                	add    BYTE PTR [eax],al
     6af:	02 02                	add    al,BYTE PTR [edx]
     6b1:	07                   	pop    es
     6b2:	0e                   	push   cs
     6b3:	00 00                	add    BYTE PTR [eax],al
     6b5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     6b8:	00 00                	add    BYTE PTR [eax],al
     6ba:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     6bd:	61                   	popa   
     6be:	00 00                	add    BYTE PTR [eax],al
     6c0:	00 02                	add    BYTE PTR [edx],al
     6c2:	04 07                	add    al,0x7
     6c4:	3e 00 00             	add    BYTE PTR ds:[eax],al
     6c7:	00 02                	add    BYTE PTR [edx],al
     6c9:	08 07                	or     BYTE PTR [edi],al
     6cb:	34 00                	xor    al,0x0
     6cd:	00 00                	add    BYTE PTR [eax],al
     6cf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     6d6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     6d9:	9b                   	fwait
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	01 02                	add    DWORD PTR [edx],eax
     6e0:	95                   	xchg   ebp,eax
     6e1:	00 00                	add    BYTE PTR [eax],al
     6e3:	00 02                	add    BYTE PTR [edx],al
     6e5:	04 07                	add    al,0x7
     6e7:	39 00                	cmp    DWORD PTR [eax],eax
     6e9:	00 00                	add    BYTE PTR [eax],al
     6eb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     6ee:	e1 00                	loope  6f0 <sysEnter_Vector-0x12f910>
     6f0:	00 00                	add    BYTE PTR [eax],al
     6f2:	05 04 25 00 00       	add    eax,0x2504
     6f7:	00 06                	add    BYTE PTR [esi],al
     6f9:	25 02 00 00 01       	and    eax,0x1000002
     6fe:	09 3a                	or     DWORD PTR [edx],edi
     700:	00 00                	add    BYTE PTR [eax],al
     702:	00 00                	add    BYTE PTR [eax],al
     704:	04 00                	add    al,0x0
     706:	30 aa 00 00 00 01    	xor    BYTE PTR [edx+0x1000000],ch
     70c:	9c                   	pushf  
     70d:	e6 00                	out    0x0,al
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	07                   	pop    es
     712:	3e 02 00             	add    al,BYTE PTR ds:[eax]
     715:	00 01                	add    BYTE PTR [ecx],al
     717:	09 92 00 00 00 02    	or     DWORD PTR [edx+0x2000000],edx
     71d:	91                   	xchg   ecx,eax
     71e:	00 07                	add    BYTE PTR [edi],al
     720:	0a 02                	or     al,BYTE PTR [edx]
     722:	00 00                	add    BYTE PTR [eax],al
     724:	01 09                	add    DWORD PTR [ecx],ecx
     726:	92                   	xchg   edx,eax
     727:	00 00                	add    BYTE PTR [eax],al
     729:	00 02                	add    BYTE PTR [edx],al
     72b:	91                   	xchg   ecx,eax
     72c:	04 08                	add    al,0x8
     72e:	12 04 00             	adc    al,BYTE PTR [eax+eax*1]
     731:	30 8e 00 00 00 09    	xor    BYTE PTR [esi+0x9000000],cl
     737:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     73a:	00 01                	add    BYTE PTR [ecx],al
     73c:	0b 3a                	or     edi,DWORD PTR [edx]
     73e:	00 00                	add    BYTE PTR [eax],al
     740:	00 02                	add    BYTE PTR [edx],al
     742:	91                   	xchg   ecx,eax
     743:	6c                   	ins    BYTE PTR es:[edi],dx
     744:	00 00                	add    BYTE PTR [eax],al
     746:	0a 1e                	or     bl,BYTE PTR [esi]
     748:	02 00                	add    al,BYTE PTR [eax]
     74a:	00 01                	add    BYTE PTR [ecx],al
     74c:	14 aa                	adc    al,0xaa
     74e:	04 00                	add    al,0x0
     750:	30 c1                	xor    cl,al
     752:	01 00                	add    DWORD PTR [eax],eax
     754:	00 01                	add    BYTE PTR [ecx],al
     756:	9c                   	pushf  
     757:	5a                   	pop    edx
     758:	01 00                	add    DWORD PTR [eax],eax
     75a:	00 07                	add    BYTE PTR [edi],al
     75c:	3e 02 00             	add    al,BYTE PTR ds:[eax]
     75f:	00 01                	add    BYTE PTR [ecx],al
     761:	14 92                	adc    al,0x92
     763:	00 00                	add    BYTE PTR [eax],al
     765:	00 02                	add    BYTE PTR [edx],al
     767:	91                   	xchg   ecx,eax
     768:	00 07                	add    BYTE PTR [edi],al
     76a:	0a 02                	or     al,BYTE PTR [edx]
     76c:	00 00                	add    BYTE PTR [eax],al
     76e:	01 14 92             	add    DWORD PTR [edx+edx*4],edx
     771:	00 00                	add    BYTE PTR [eax],al
     773:	00 02                	add    BYTE PTR [edx],al
     775:	91                   	xchg   ecx,eax
     776:	04 0b                	add    al,0xb
     778:	10 02                	adc    BYTE PTR [edx],al
     77a:	00 00                	add    BYTE PTR [eax],al
     77c:	01 16                	add    DWORD PTR [esi],edx
     77e:	56                   	push   esi
     77f:	00 00                	add    BYTE PTR [eax],al
     781:	00 02                	add    BYTE PTR [edx],al
     783:	91                   	xchg   ecx,eax
     784:	6c                   	ins    BYTE PTR es:[edi],dx
     785:	0c c3                	or     al,0xc3
     787:	04 00                	add    al,0x0
     789:	30 eb                	xor    bl,ch
     78b:	00 00                	add    BYTE PTR [eax],al
     78d:	00 41 01             	add    BYTE PTR [ecx+0x1],al
     790:	00 00                	add    BYTE PTR [eax],al
     792:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     795:	74 00                	je     797 <sysEnter_Vector-0x12f869>
     797:	01 18                	add    DWORD PTR [eax],ebx
     799:	3a 00                	cmp    al,BYTE PTR [eax]
     79b:	00 00                	add    BYTE PTR [eax],al
     79d:	02 91 68 00 08 ae    	add    dl,BYTE PTR [ecx-0x51f7ff98]
     7a3:	05 00 30 b8 00       	add    eax,0xb83000
     7a8:	00 00                	add    BYTE PTR [eax],al
     7aa:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     7ad:	74 00                	je     7af <sysEnter_Vector-0x12f851>
     7af:	01 24 3a             	add    DWORD PTR [edx+edi*1],esp
     7b2:	00 00                	add    BYTE PTR [eax],al
     7b4:	00 02                	add    BYTE PTR [edx],al
     7b6:	91                   	xchg   ecx,eax
     7b7:	64 00 00             	add    BYTE PTR fs:[eax],al
     7ba:	0d 4b 00 00 00       	or     eax,0x4b
     7bf:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     7c2:	00 00                	add    BYTE PTR [eax],al
     7c4:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
     7ca:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
     7d0:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
     7d6:	05 03 40 4a 00       	add    eax,0x4a4003
     7db:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
     7e1:	02 36                	add    dh,BYTE PTR [esi]
     7e3:	56                   	push   esi
     7e4:	00 00                	add    BYTE PTR [eax],al
     7e6:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
     7ec:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
     7f2:	02 37                	add    dh,BYTE PTR [edi]
     7f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7f5:	00 00                	add    BYTE PTR [eax],al
     7f7:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
     7fd:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
     803:	03 4c af 01          	add    ecx,DWORD PTR [edi+ebp*4+0x1]
     807:	00 00                	add    BYTE PTR [eax],al
     809:	05 03 44 4a 00       	add    eax,0x4a4403
     80e:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     814:	00 00                	add    BYTE PTR [eax],al
     816:	01 03                	add    DWORD PTR [ebx],eax
     818:	00 00                	add    BYTE PTR [eax],al
     81a:	04 00                	add    al,0x0
     81c:	3c 03                	cmp    al,0x3
     81e:	00 00                	add    BYTE PTR [eax],al
     820:	04 01                	add    al,0x1
     822:	f4                   	hlt    
     823:	00 00                	add    BYTE PTR [eax],al
     825:	00 0c a1             	add    BYTE PTR [ecx+eiz*4],cl
     828:	02 00                	add    al,BYTE PTR [eax]
     82a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     82d:	00 00                	add    BYTE PTR [eax],al
     82f:	6c                   	ins    BYTE PTR es:[edi],dx
     830:	06                   	push   es
     831:	00 30                	add    BYTE PTR [eax],dh
     833:	f2 00 00             	repnz add BYTE PTR [eax],al
     836:	00 d1                	add    cl,dl
     838:	04 00                	add    al,0x0
     83a:	00 02                	add    BYTE PTR [edx],al
     83c:	01 06                	add    DWORD PTR [esi],eax
     83e:	64 00 00             	add    BYTE PTR fs:[eax],al
     841:	00 02                	add    BYTE PTR [edx],al
     843:	01 06                	add    DWORD PTR [esi],eax
     845:	5d                   	pop    ebp
     846:	00 00                	add    BYTE PTR [eax],al
     848:	00 02                	add    BYTE PTR [edx],al
     84a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     850:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     857:	02 08                	add    cl,BYTE PTR [eax]
     859:	05 00 00 00 00       	add    eax,0x0
     85e:	02 01                	add    al,BYTE PTR [ecx]
     860:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     863:	00 00                	add    BYTE PTR [eax],al
     865:	02 02                	add    al,BYTE PTR [edx]
     867:	07                   	pop    es
     868:	0e                   	push   cs
     869:	00 00                	add    BYTE PTR [eax],al
     86b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     86e:	00 00                	add    BYTE PTR [eax],al
     870:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     873:	61                   	popa   
     874:	00 00                	add    BYTE PTR [eax],al
     876:	00 02                	add    BYTE PTR [edx],al
     878:	04 07                	add    al,0x7
     87a:	3e 00 00             	add    BYTE PTR ds:[eax],al
     87d:	00 02                	add    BYTE PTR [edx],al
     87f:	08 07                	or     BYTE PTR [edi],al
     881:	34 00                	xor    al,0x0
     883:	00 00                	add    BYTE PTR [eax],al
     885:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     88c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     88f:	9b                   	fwait
     890:	00 00                	add    BYTE PTR [eax],al
     892:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
     898:	00 06                	add    BYTE PTR [esi],al
     89a:	25 00 00 00 02       	and    eax,0x2000000
     89f:	01 02                	add    DWORD PTR [edx],eax
     8a1:	95                   	xchg   ebp,eax
     8a2:	00 00                	add    BYTE PTR [eax],al
     8a4:	00 07                	add    BYTE PTR [edi],al
     8a6:	17                   	pop    ss
     8a7:	03 00                	add    eax,DWORD PTR [eax]
     8a9:	00 04 61             	add    BYTE PTR [ecx+eiz*2],al
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	00 05 15 51 01 00    	add    BYTE PTR ds:0x15115,al
     8b4:	00 08                	add    BYTE PTR [eax],cl
     8b6:	7c 03                	jl     8bb <sysEnter_Vector-0x12f745>
     8b8:	00 00                	add    BYTE PTR [eax],al
     8ba:	00 08                	add    BYTE PTR [eax],cl
     8bc:	b4 03                	mov    ah,0x3
     8be:	00 00                	add    BYTE PTR [eax],al
     8c0:	01 08                	add    DWORD PTR [eax],ecx
     8c2:	73 02                	jae    8c6 <sysEnter_Vector-0x12f73a>
     8c4:	00 00                	add    BYTE PTR [eax],al
     8c6:	02 08                	add    cl,BYTE PTR [eax]
     8c8:	09 03                	or     DWORD PTR [ebx],eax
     8ca:	00 00                	add    BYTE PTR [eax],al
     8cc:	03 08                	add    ecx,DWORD PTR [eax]
     8ce:	53                   	push   ebx
     8cf:	02 00                	add    al,BYTE PTR [eax]
     8d1:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     8d4:	ce                   	into   
     8d5:	03 00                	add    eax,DWORD PTR [eax]
     8d7:	00 05 08 2d 03 00    	add    BYTE PTR ds:0x32d08,al
     8dd:	00 06                	add    BYTE PTR [esi],al
     8df:	08 66 02             	or     BYTE PTR [esi+0x2],ah
     8e2:	00 00                	add    BYTE PTR [eax],al
     8e4:	07                   	pop    es
     8e5:	08 ff                	or     bh,bh
     8e7:	03 00                	add    eax,DWORD PTR [eax]
     8e9:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     8ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8ed:	03 00                	add    eax,DWORD PTR [eax]
     8ef:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     8f2:	0e                   	push   cs
     8f3:	04 00                	add    al,0x0
     8f5:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
     8f8:	f5                   	cmc    
     8f9:	02 00                	add    al,BYTE PTR [eax]
     8fb:	00 97 09 8c 03 00    	add    BYTE PTR [edi+0x38c09],dl
     901:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     904:	09 62 03             	or     DWORD PTR [edx+0x3],esp
     907:	00 00                	add    BYTE PTR [eax],al
     909:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
     90c:	f1                   	icebp  
     90d:	03 00                	add    eax,DWORD PTR [eax]
     90f:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     912:	09 d7                	or     edi,edx
     914:	02 00                	add    al,BYTE PTR [eax]
     916:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     919:	09 26                	or     DWORD PTR [esi],esp
     91b:	04 00                	add    al,0x0
     91d:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     920:	09 3a                	or     DWORD PTR [edx],edi
     922:	03 00                	add    eax,DWORD PTR [eax]
     924:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     927:	09 ac 02 00 00 69 01 	or     DWORD PTR [edx+eax*1+0x1690000],ebp
     92e:	09 a3 03 00 00 70    	or     DWORD PTR [ebx+0x70000003],esp
     934:	01 09                	add    DWORD PTR [ecx],ecx
     936:	e5 02                	in     eax,0x2
     938:	00 00                	add    BYTE PTR [eax],al
     93a:	71 01                	jno    93d <sysEnter_Vector-0x12f6c3>
     93c:	09 dc                	or     esp,ebx
     93e:	03 00                	add    eax,DWORD PTR [eax]
     940:	00 00                	add    BYTE PTR [eax],al
     942:	03 09                	add    ecx,DWORD PTR [ecx]
     944:	47                   	inc    edi
     945:	03 00                	add    eax,DWORD PTR [eax]
     947:	00 01                	add    BYTE PTR [ecx],al
     949:	03 09                	add    ecx,DWORD PTR [ecx]
     94b:	bb 02 00 00 02       	mov    ebx,0x2000002
     950:	03 09                	add    ecx,DWORD PTR [ecx]
     952:	80 02 00             	add    BYTE PTR [edx],0x0
     955:	00 03                	add    BYTE PTR [ebx],al
     957:	03 09                	add    ecx,DWORD PTR [ecx]
     959:	90                   	nop
     95a:	02 00                	add    al,BYTE PTR [eax]
     95c:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     95f:	09 c7                	or     edi,eax
     961:	02 00                	add    al,BYTE PTR [eax]
     963:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
     969:	07                   	pop    es
     96a:	39 00                	cmp    DWORD PTR [eax],eax
     96c:	00 00                	add    BYTE PTR [eax],al
     96e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     971:	e1 00                	loope  973 <sysEnter_Vector-0x12f68d>
     973:	00 00                	add    BYTE PTR [eax],al
     975:	0a 04 05 04 25 00 00 	or     al,BYTE PTR [eax*1+0x2504]
     97c:	00 0b                	add    BYTE PTR [ebx],cl
     97e:	21 04 00             	and    DWORD PTR [eax+eax*1],eax
     981:	00 01                	add    BYTE PTR [ecx],al
     983:	09 5f 01             	or     DWORD PTR [edi+0x1],ebx
     986:	00 00                	add    BYTE PTR [eax],al
     988:	6c                   	ins    BYTE PTR es:[edi],dx
     989:	06                   	push   es
     98a:	00 30                	add    BYTE PTR [eax],dh
     98c:	2d 00 00 00 01       	sub    eax,0x1000000
     991:	9c                   	pushf  
     992:	9d                   	popf   
     993:	01 00                	add    DWORD PTR [eax],eax
     995:	00 0c 2f             	add    BYTE PTR [edi+ebp*1],cl
     998:	09 00                	or     DWORD PTR [eax],eax
     99a:	00 01                	add    BYTE PTR [ecx],al
     99c:	09 61 01             	or     DWORD PTR [ecx+0x1],esp
     99f:	00 00                	add    BYTE PTR [eax],al
     9a1:	02 91 00 0c dd 08    	add    dl,BYTE PTR [ecx+0x8dd0c00]
     9a7:	00 00                	add    BYTE PTR [eax],al
     9a9:	01 09                	add    DWORD PTR [ecx],ecx
     9ab:	7d 00                	jge    9ad <sysEnter_Vector-0x12f653>
     9ad:	00 00                	add    BYTE PTR [eax],al
     9af:	02 91 04 00 0d 4d    	add    dl,BYTE PTR [ecx+0x4d0d0004]
     9b5:	02 00                	add    al,BYTE PTR [eax]
     9b7:	00 01                	add    BYTE PTR [ecx],al
     9b9:	0e                   	push   cs
     9ba:	99                   	cdq    
     9bb:	06                   	push   es
     9bc:	00 30                	add    BYTE PTR [eax],dh
     9be:	2a 00                	sub    al,BYTE PTR [eax]
     9c0:	00 00                	add    BYTE PTR [eax],al
     9c2:	01 9c c1 01 00 00 0c 	add    DWORD PTR [ecx+eax*8+0xc000001],ebx
     9c9:	ea 03 00 00 01 0e 5f 	jmp    0x5f0e:0x1000003
     9d0:	01 00                	add    DWORD PTR [eax],eax
     9d2:	00 02                	add    BYTE PTR [edx],al
     9d4:	91                   	xchg   ecx,eax
     9d5:	00 00                	add    BYTE PTR [eax],al
     9d7:	0b 28                	or     ebp,DWORD PTR [eax]
     9d9:	03 00                	add    eax,DWORD PTR [eax]
     9db:	00 01                	add    BYTE PTR [ecx],al
     9dd:	13 3a                	adc    edi,DWORD PTR [edx]
     9df:	00 00                	add    BYTE PTR [eax],al
     9e1:	00 c3                	add    bl,al
     9e3:	06                   	push   es
     9e4:	00 30                	add    BYTE PTR [eax],dh
     9e6:	35 00 00 00 01       	xor    eax,0x1000000
     9eb:	9c                   	pushf  
     9ec:	13 02                	adc    eax,DWORD PTR [edx]
     9ee:	00 00                	add    BYTE PTR [eax],al
     9f0:	0c ea                	or     al,0xea
     9f2:	03 00                	add    eax,DWORD PTR [eax]
     9f4:	00 01                	add    BYTE PTR [ecx],al
     9f6:	13 5f 01             	adc    ebx,DWORD PTR [edi+0x1]
     9f9:	00 00                	add    BYTE PTR [eax],al
     9fb:	02 91 00 0c c7 03    	add    dl,BYTE PTR [ecx+0x3c70c00]
     a01:	00 00                	add    BYTE PTR [eax],al
     a03:	01 13                	add    DWORD PTR [ebx],edx
     a05:	5f                   	pop    edi
     a06:	01 00                	add    DWORD PTR [eax],eax
     a08:	00 02                	add    BYTE PTR [edx],al
     a0a:	91                   	xchg   ecx,eax
     a0b:	04 0c                	add    al,0xc
     a0d:	9a 05 00 00 01 13 3a 	call   0x3a13:0x1000005
     a14:	00 00                	add    BYTE PTR [eax],al
     a16:	00 02                	add    BYTE PTR [edx],al
     a18:	91                   	xchg   ecx,eax
     a19:	08 0c 21             	or     BYTE PTR [ecx+eiz*1],cl
     a1c:	03 00                	add    eax,DWORD PTR [eax]
     a1e:	00 01                	add    BYTE PTR [ecx],al
     a20:	13 3a                	adc    edi,DWORD PTR [edx]
     a22:	00 00                	add    BYTE PTR [eax],al
     a24:	00 02                	add    BYTE PTR [edx],al
     a26:	91                   	xchg   ecx,eax
     a27:	0c 00                	or     al,0x0
     a29:	0b 60 02             	or     esp,DWORD PTR [eax+0x2]
     a2c:	00 00                	add    BYTE PTR [eax],al
     a2e:	01 18                	add    DWORD PTR [eax],ebx
     a30:	3a 00                	cmp    al,BYTE PTR [eax]
     a32:	00 00                	add    BYTE PTR [eax],al
     a34:	f8                   	clc    
     a35:	06                   	push   es
     a36:	00 30                	add    BYTE PTR [eax],dh
     a38:	35 00 00 00 01       	xor    eax,0x1000000
     a3d:	9c                   	pushf  
     a3e:	65 02 00             	add    al,BYTE PTR gs:[eax]
     a41:	00 0c ea             	add    BYTE PTR [edx+ebp*8],cl
     a44:	03 00                	add    eax,DWORD PTR [eax]
     a46:	00 01                	add    BYTE PTR [ecx],al
     a48:	18 5f 01             	sbb    BYTE PTR [edi+0x1],bl
     a4b:	00 00                	add    BYTE PTR [eax],al
     a4d:	02 91 00 0c c7 03    	add    dl,BYTE PTR [ecx+0x3c70c00]
     a53:	00 00                	add    BYTE PTR [eax],al
     a55:	01 18                	add    DWORD PTR [eax],ebx
     a57:	5f                   	pop    edi
     a58:	01 00                	add    DWORD PTR [eax],eax
     a5a:	00 02                	add    BYTE PTR [edx],al
     a5c:	91                   	xchg   ecx,eax
     a5d:	04 0c                	add    al,0xc
     a5f:	9a 05 00 00 01 18 3a 	call   0x3a18:0x1000005
     a66:	00 00                	add    BYTE PTR [eax],al
     a68:	00 02                	add    BYTE PTR [edx],al
     a6a:	91                   	xchg   ecx,eax
     a6b:	08 0c 21             	or     BYTE PTR [ecx+eiz*1],cl
     a6e:	03 00                	add    eax,DWORD PTR [eax]
     a70:	00 01                	add    BYTE PTR [ecx],al
     a72:	18 3a                	sbb    BYTE PTR [edx],bh
     a74:	00 00                	add    BYTE PTR [eax],al
     a76:	00 02                	add    BYTE PTR [edx],al
     a78:	91                   	xchg   ecx,eax
     a79:	0c 00                	or     al,0x0
     a7b:	0b 46 02             	or     eax,DWORD PTR [esi+0x2]
     a7e:	00 00                	add    BYTE PTR [eax],al
     a80:	01 1e                	add    DWORD PTR [esi],ebx
     a82:	3a 00                	cmp    al,BYTE PTR [eax]
     a84:	00 00                	add    BYTE PTR [eax],al
     a86:	2d 07 00 30 31       	sub    eax,0x31300007
     a8b:	00 00                	add    BYTE PTR [eax],al
     a8d:	00 01                	add    BYTE PTR [ecx],al
     a8f:	9c                   	pushf  
     a90:	a9 02 00 00 0c       	test   eax,0xc000002
     a95:	2f                   	das    
     a96:	09 00                	or     DWORD PTR [eax],eax
     a98:	00 01                	add    BYTE PTR [ecx],al
     a9a:	1e                   	push   ds
     a9b:	61                   	popa   
     a9c:	01 00                	add    DWORD PTR [eax],eax
     a9e:	00 02                	add    BYTE PTR [edx],al
     aa0:	91                   	xchg   ecx,eax
     aa1:	00 0c c7             	add    BYTE PTR [edi+eax*8],cl
     aa4:	03 00                	add    eax,DWORD PTR [eax]
     aa6:	00 01                	add    BYTE PTR [ecx],al
     aa8:	1e                   	push   ds
     aa9:	61                   	popa   
     aaa:	01 00                	add    DWORD PTR [eax],eax
     aac:	00 02                	add    BYTE PTR [edx],al
     aae:	91                   	xchg   ecx,eax
     aaf:	04 0c                	add    al,0xc
     ab1:	56                   	push   esi
     ab2:	03 00                	add    eax,DWORD PTR [eax]
     ab4:	00 01                	add    BYTE PTR [ecx],al
     ab6:	1e                   	push   ds
     ab7:	3a 00                	cmp    al,BYTE PTR [eax]
     ab9:	00 00                	add    BYTE PTR [eax],al
     abb:	02 91 08 00 0e 4b    	add    dl,BYTE PTR [ecx+0x4b0e0008]
     ac1:	00 00                	add    BYTE PTR [eax],al
     ac3:	00 02                	add    BYTE PTR [edx],al
     ac5:	34 56                	xor    al,0x56
     ac7:	00 00                	add    BYTE PTR [eax],al
     ac9:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
     acf:	30 0e                	xor    BYTE PTR [esi],cl
     ad1:	af                   	scas   eax,DWORD PTR es:[edi]
     ad2:	00 00                	add    BYTE PTR [eax],al
     ad4:	00 02                	add    BYTE PTR [edx],al
     ad6:	35 56 00 00 00       	xor    eax,0x56
     adb:	05 03 40 4a 00       	add    eax,0x4a4003
     ae0:	30 0e                	xor    BYTE PTR [esi],cl
     ae2:	5b                   	pop    ebx
     ae3:	01 00                	add    DWORD PTR [eax],eax
     ae5:	00 02                	add    BYTE PTR [edx],al
     ae7:	36                   	ss
     ae8:	56                   	push   esi
     ae9:	00 00                	add    BYTE PTR [eax],al
     aeb:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
     af1:	30 0e                	xor    BYTE PTR [esi],cl
     af3:	54                   	push   esp
     af4:	00 00                	add    BYTE PTR [eax],al
     af6:	00 02                	add    BYTE PTR [edx],al
     af8:	37                   	aaa    
     af9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     afa:	00 00                	add    BYTE PTR [eax],al
     afc:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
     b02:	30 0e                	xor    BYTE PTR [esi],cl
     b04:	28 00                	sub    BYTE PTR [eax],al
     b06:	00 00                	add    BYTE PTR [eax],al
     b08:	03 4c fe 02          	add    ecx,DWORD PTR [esi+edi*8+0x2]
     b0c:	00 00                	add    BYTE PTR [eax],al
     b0e:	05 03 44 4a 00       	add    eax,0x4a4403
     b13:	30 05 04 61 01 00    	xor    BYTE PTR ds:0x16104,al
     b19:	00 00                	add    BYTE PTR [eax],al
     b1b:	b5 02                	mov    ch,0x2
     b1d:	00 00                	add    BYTE PTR [eax],al
     b1f:	04 00                	add    al,0x0
     b21:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     b24:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     b27:	f4                   	hlt    
     b28:	00 00                	add    BYTE PTR [eax],al
     b2a:	00 0c 51             	add    BYTE PTR [ecx+edx*2],cl
     b2d:	04 00                	add    al,0x0
     b2f:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     b32:	00 00                	add    BYTE PTR [eax],al
     b34:	60                   	pusha  
     b35:	07                   	pop    es
     b36:	00 30                	add    BYTE PTR [eax],dh
     b38:	52                   	push   edx
     b39:	01 00                	add    DWORD PTR [eax],eax
     b3b:	00 cd                	add    ch,cl
     b3d:	05 00 00 02 01       	add    eax,0x1020000
     b42:	06                   	push   es
     b43:	64 00 00             	add    BYTE PTR fs:[eax],al
     b46:	00 02                	add    BYTE PTR [edx],al
     b48:	01 06                	add    DWORD PTR [esi],eax
     b4a:	5d                   	pop    ebp
     b4b:	00 00                	add    BYTE PTR [eax],al
     b4d:	00 02                	add    BYTE PTR [edx],al
     b4f:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     b55:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b5c:	02 08                	add    cl,BYTE PTR [eax]
     b5e:	05 00 00 00 00       	add    eax,0x0
     b63:	02 01                	add    al,BYTE PTR [ecx]
     b65:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     b68:	00 00                	add    BYTE PTR [eax],al
     b6a:	02 02                	add    al,BYTE PTR [edx]
     b6c:	07                   	pop    es
     b6d:	0e                   	push   cs
     b6e:	00 00                	add    BYTE PTR [eax],al
     b70:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     b73:	00 00                	add    BYTE PTR [eax],al
     b75:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     b78:	61                   	popa   
     b79:	00 00                	add    BYTE PTR [eax],al
     b7b:	00 02                	add    BYTE PTR [edx],al
     b7d:	04 07                	add    al,0x7
     b7f:	3e 00 00             	add    BYTE PTR ds:[eax],al
     b82:	00 02                	add    BYTE PTR [edx],al
     b84:	08 07                	or     BYTE PTR [edi],al
     b86:	34 00                	xor    al,0x0
     b88:	00 00                	add    BYTE PTR [eax],al
     b8a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b91:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     b94:	9b                   	fwait
     b95:	00 00                	add    BYTE PTR [eax],al
     b97:	00 02                	add    BYTE PTR [edx],al
     b99:	01 02                	add    DWORD PTR [edx],eax
     b9b:	95                   	xchg   ebp,eax
     b9c:	00 00                	add    BYTE PTR [eax],al
     b9e:	00 05 17 03 00 00    	add    BYTE PTR ds:0x317,al
     ba4:	04 61                	add    al,0x61
     ba6:	00 00                	add    BYTE PTR [eax],al
     ba8:	00 05 15 46 01 00    	add    BYTE PTR ds:0x14615,al
     bae:	00 06                	add    BYTE PTR [esi],al
     bb0:	7c 03                	jl     bb5 <sysEnter_Vector-0x12f44b>
     bb2:	00 00                	add    BYTE PTR [eax],al
     bb4:	00 06                	add    BYTE PTR [esi],al
     bb6:	b4 03                	mov    ah,0x3
     bb8:	00 00                	add    BYTE PTR [eax],al
     bba:	01 06                	add    DWORD PTR [esi],eax
     bbc:	73 02                	jae    bc0 <sysEnter_Vector-0x12f440>
     bbe:	00 00                	add    BYTE PTR [eax],al
     bc0:	02 06                	add    al,BYTE PTR [esi]
     bc2:	09 03                	or     DWORD PTR [ebx],eax
     bc4:	00 00                	add    BYTE PTR [eax],al
     bc6:	03 06                	add    eax,DWORD PTR [esi]
     bc8:	53                   	push   ebx
     bc9:	02 00                	add    al,BYTE PTR [eax]
     bcb:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     bce:	ce                   	into   
     bcf:	03 00                	add    eax,DWORD PTR [eax]
     bd1:	00 05 06 2d 03 00    	add    BYTE PTR ds:0x32d06,al
     bd7:	00 06                	add    BYTE PTR [esi],al
     bd9:	06                   	push   es
     bda:	66                   	data16
     bdb:	02 00                	add    al,BYTE PTR [eax]
     bdd:	00 07                	add    BYTE PTR [edi],al
     bdf:	06                   	push   es
     be0:	ff 03                	inc    DWORD PTR [ebx]
     be2:	00 00                	add    BYTE PTR [eax],al
     be4:	4f                   	dec    edi
     be5:	06                   	push   es
     be6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     be7:	03 00                	add    eax,DWORD PTR [eax]
     be9:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
     bec:	0e                   	push   cs
     bed:	04 00                	add    al,0x0
     bef:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
     bf2:	f5                   	cmc    
     bf3:	02 00                	add    al,BYTE PTR [eax]
     bf5:	00 97 07 8c 03 00    	add    BYTE PTR [edi+0x38c07],dl
     bfb:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     bfe:	07                   	pop    es
     bff:	62 03                	bound  eax,QWORD PTR [ebx]
     c01:	00 00                	add    BYTE PTR [eax],al
     c03:	64 01 07             	add    DWORD PTR fs:[edi],eax
     c06:	f1                   	icebp  
     c07:	03 00                	add    eax,DWORD PTR [eax]
     c09:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     c0c:	07                   	pop    es
     c0d:	d7                   	xlat   BYTE PTR ds:[ebx]
     c0e:	02 00                	add    al,BYTE PTR [eax]
     c10:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     c13:	07                   	pop    es
     c14:	26                   	es
     c15:	04 00                	add    al,0x0
     c17:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     c1a:	07                   	pop    es
     c1b:	3a 03                	cmp    al,BYTE PTR [ebx]
     c1d:	00 00                	add    BYTE PTR [eax],al
     c1f:	68 01 07 ac 02       	push   0x2ac0701
     c24:	00 00                	add    BYTE PTR [eax],al
     c26:	69 01 07 a3 03 00    	imul   eax,DWORD PTR [ecx],0x3a307
     c2c:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     c2f:	07                   	pop    es
     c30:	e5 02                	in     eax,0x2
     c32:	00 00                	add    BYTE PTR [eax],al
     c34:	71 01                	jno    c37 <sysEnter_Vector-0x12f3c9>
     c36:	07                   	pop    es
     c37:	dc 03                	fadd   QWORD PTR [ebx]
     c39:	00 00                	add    BYTE PTR [eax],al
     c3b:	00 03                	add    BYTE PTR [ebx],al
     c3d:	07                   	pop    es
     c3e:	47                   	inc    edi
     c3f:	03 00                	add    eax,DWORD PTR [eax]
     c41:	00 01                	add    BYTE PTR [ecx],al
     c43:	03 07                	add    eax,DWORD PTR [edi]
     c45:	bb 02 00 00 02       	mov    ebx,0x2000002
     c4a:	03 07                	add    eax,DWORD PTR [edi]
     c4c:	80 02 00             	add    BYTE PTR [edx],0x0
     c4f:	00 03                	add    BYTE PTR [ebx],al
     c51:	03 07                	add    eax,DWORD PTR [edi]
     c53:	90                   	nop
     c54:	02 00                	add    al,BYTE PTR [eax]
     c56:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     c59:	07                   	pop    es
     c5a:	c7 02 00 00 05 03    	mov    DWORD PTR [edx],0x3050000
     c60:	00 02                	add    BYTE PTR [edx],al
     c62:	04 07                	add    al,0x7
     c64:	39 00                	cmp    DWORD PTR [eax],eax
     c66:	00 00                	add    BYTE PTR [eax],al
     c68:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     c6b:	e1 00                	loope  c6d <sysEnter_Vector-0x12f393>
     c6d:	00 00                	add    BYTE PTR [eax],al
     c6f:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
     c76:	80 04 00 00          	add    BYTE PTR [eax+eax*1],0x0
     c7a:	01 0f                	add    DWORD PTR [edi],ecx
     c7c:	60                   	pusha  
     c7d:	07                   	pop    es
     c7e:	00 30                	add    BYTE PTR [eax],dh
     c80:	26 00 00             	add    BYTE PTR es:[eax],al
     c83:	00 01                	add    BYTE PTR [ecx],al
     c85:	9c                   	pushf  
     c86:	7e 01                	jle    c89 <sysEnter_Vector-0x12f377>
     c88:	00 00                	add    BYTE PTR [eax],al
     c8a:	0a c7                	or     al,bh
     c8c:	03 00                	add    eax,DWORD PTR [eax]
     c8e:	00 01                	add    BYTE PTR [ecx],al
     c90:	0f 54 01             	andps  xmm0,XMMWORD PTR [ecx]
     c93:	00 00                	add    BYTE PTR [eax],al
     c95:	02 91 00 00 09 7b    	add    dl,BYTE PTR [ecx+0x7b090000]
     c9b:	04 00                	add    al,0x0
     c9d:	00 01                	add    BYTE PTR [ecx],al
     c9f:	14 86                	adc    al,0x86
     ca1:	07                   	pop    es
     ca2:	00 30                	add    BYTE PTR [eax],dh
     ca4:	43                   	inc    ebx
     ca5:	00 00                	add    BYTE PTR [eax],al
     ca7:	00 01                	add    BYTE PTR [ecx],al
     ca9:	9c                   	pushf  
     caa:	ae                   	scas   al,BYTE PTR es:[edi]
     cab:	01 00                	add    DWORD PTR [eax],eax
     cad:	00 0b                	add    BYTE PTR [ebx],cl
     caf:	63 00                	arpl   WORD PTR [eax],ax
     cb1:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     cb8:	91                   	xchg   ecx,eax
     cb9:	60                   	pusha  
     cba:	0c c7                	or     al,0xc7
     cbc:	03 00                	add    eax,DWORD PTR [eax]
     cbe:	00 01                	add    BYTE PTR [ecx],al
     cc0:	16                   	push   ss
     cc1:	ae                   	scas   al,BYTE PTR es:[edi]
     cc2:	01 00                	add    DWORD PTR [eax],eax
     cc4:	00 02                	add    BYTE PTR [edx],al
     cc6:	91                   	xchg   ecx,eax
     cc7:	72 00                	jb     cc9 <sysEnter_Vector-0x12f337>
     cc9:	0d 25 00 00 00       	or     eax,0x25
     cce:	be 01 00 00 0e       	mov    esi,0xe000001
     cd3:	4d                   	dec    ebp
     cd4:	01 00                	add    DWORD PTR [eax],eax
     cd6:	00 01                	add    BYTE PTR [ecx],al
     cd8:	00 0f                	add    BYTE PTR [edi],cl
     cda:	6a 04                	push   0x4
     cdc:	00 00                	add    BYTE PTR [eax],al
     cde:	01 1d 25 00 00 00    	add    DWORD PTR ds:0x25,ebx
     ce4:	c9                   	leave  
     ce5:	07                   	pop    es
     ce6:	00 30                	add    BYTE PTR [eax],dh
     ce8:	2f                   	das    
     ce9:	00 00                	add    BYTE PTR [eax],al
     ceb:	00 01                	add    BYTE PTR [ecx],al
     ced:	9c                   	pushf  
     cee:	e4 01                	in     al,0x1
     cf0:	00 00                	add    BYTE PTR [eax],al
     cf2:	10 63 00             	adc    BYTE PTR [ebx+0x0],ah
     cf5:	01 1f                	add    DWORD PTR [edi],ebx
     cf7:	25 00 00 00 02       	and    eax,0x2000000
     cfc:	91                   	xchg   ecx,eax
     cfd:	73 00                	jae    cff <sysEnter_Vector-0x12f301>
     cff:	11 76 04             	adc    DWORD PTR [esi+0x4],esi
     d02:	00 00                	add    BYTE PTR [eax],al
     d04:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d0a:	f8                   	clc    
     d0b:	07                   	pop    es
     d0c:	00 30                	add    BYTE PTR [eax],dh
     d0e:	ba 00 00 00 01       	mov    edx,0x1000000
     d13:	9c                   	pushf  
     d14:	5d                   	pop    ebp
     d15:	02 00                	add    al,BYTE PTR [eax]
     d17:	00 0a                	add    BYTE PTR [edx],cl
     d19:	c7 03 00 00 01 25    	mov    DWORD PTR [ebx],0x25010000
     d1f:	54                   	push   esp
     d20:	01 00                	add    DWORD PTR [eax],eax
     d22:	00 02                	add    BYTE PTR [edx],al
     d24:	91                   	xchg   ecx,eax
     d25:	00 0a                	add    BYTE PTR [edx],cl
     d27:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d28:	04 00                	add    al,0x0
     d2a:	00 01                	add    BYTE PTR [ecx],al
     d2c:	25 3a 00 00 00       	and    eax,0x3a
     d31:	02 91 04 0a 3b 04    	add    dl,BYTE PTR [ecx+0x43b0a04]
     d37:	00 00                	add    BYTE PTR [eax],al
     d39:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d3f:	02 91 08 0c 63 04    	add    dl,BYTE PTR [ecx+0x4630c08]
     d45:	00 00                	add    BYTE PTR [eax],al
     d47:	01 27                	add    DWORD PTR [edi],esp
     d49:	25 00 00 00 02       	and    eax,0x2000000
     d4e:	91                   	xchg   ecx,eax
     d4f:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     d52:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     d54:	00 01                	add    BYTE PTR [ecx],al
     d56:	28 3a                	sub    BYTE PTR [edx],bh
     d58:	00 00                	add    BYTE PTR [eax],al
     d5a:	00 02                	add    BYTE PTR [edx],al
     d5c:	91                   	xchg   ecx,eax
     d5d:	6c                   	ins    BYTE PTR es:[edi],dx
     d5e:	0c 4c                	or     al,0x4c
     d60:	04 00                	add    al,0x0
     d62:	00 01                	add    BYTE PTR [ecx],al
     d64:	29 ae 01 00 00 02    	sub    DWORD PTR [esi+0x2000001],ebp
     d6a:	91                   	xchg   ecx,eax
     d6b:	69 12 42 04 00 00    	imul   edx,DWORD PTR [edx],0x442
     d71:	01 2e                	add    DWORD PTR [esi],ebp
     d73:	35 08 00 30 00       	xor    eax,0x300008
     d78:	13 4b 00             	adc    ecx,DWORD PTR [ebx+0x0]
     d7b:	00 00                	add    BYTE PTR [eax],al
     d7d:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     d80:	00 00                	add    BYTE PTR [eax],al
     d82:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
     d88:	30 13                	xor    BYTE PTR [ebx],dl
     d8a:	af                   	scas   eax,DWORD PTR es:[edi]
     d8b:	00 00                	add    BYTE PTR [eax],al
     d8d:	00 02                	add    BYTE PTR [edx],al
     d8f:	35 56 00 00 00       	xor    eax,0x56
     d94:	05 03 40 4a 00       	add    eax,0x4a4003
     d99:	30 13                	xor    BYTE PTR [ebx],dl
     d9b:	5b                   	pop    ebx
     d9c:	01 00                	add    DWORD PTR [eax],eax
     d9e:	00 02                	add    BYTE PTR [edx],al
     da0:	36                   	ss
     da1:	56                   	push   esi
     da2:	00 00                	add    BYTE PTR [eax],al
     da4:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
     daa:	30 13                	xor    BYTE PTR [ebx],dl
     dac:	54                   	push   esp
     dad:	00 00                	add    BYTE PTR [eax],al
     daf:	00 02                	add    BYTE PTR [edx],al
     db1:	37                   	aaa    
     db2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     db3:	00 00                	add    BYTE PTR [eax],al
     db5:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
     dbb:	30 13                	xor    BYTE PTR [ebx],dl
     dbd:	28 00                	sub    BYTE PTR [eax],al
     dbf:	00 00                	add    BYTE PTR [eax],al
     dc1:	03 4c b2 02          	add    ecx,DWORD PTR [edx+esi*4+0x2]
     dc5:	00 00                	add    BYTE PTR [eax],al
     dc7:	05 03 44 4a 00       	add    eax,0x4a4403
     dcc:	30 08                	xor    BYTE PTR [eax],cl
     dce:	04 54                	add    al,0x54
     dd0:	01 00                	add    DWORD PTR [eax],eax
     dd2:	00 00                	add    BYTE PTR [eax],al
     dd4:	4c                   	dec    esp
     dd5:	09 00                	or     DWORD PTR [eax],eax
     dd7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     dda:	22 05 00 00 04 01    	and    al,BYTE PTR ds:0x1040000
     de0:	f4                   	hlt    
     de1:	00 00                	add    BYTE PTR [eax],al
     de3:	00 0c 29             	add    BYTE PTR [ecx+ebp*1],cl
     de6:	06                   	push   es
     de7:	00 00                	add    BYTE PTR [eax],al
     de9:	72 00                	jb     deb <sysEnter_Vector-0x12f215>
     deb:	00 00                	add    BYTE PTR [eax],al
     ded:	b4 08                	mov    ah,0x8
     def:	00 30                	add    BYTE PTR [eax],dh
     df1:	d9 09                	(bad)  [ecx]
     df3:	00 00                	add    BYTE PTR [eax],al
     df5:	f7 06 00 00 02 b7    	test   DWORD PTR [esi],0xb7020000
     dfb:	05 00 00 02 28       	add    eax,0x28020000
     e00:	30 00                	xor    BYTE PTR [eax],al
     e02:	00 00                	add    BYTE PTR [eax],al
     e04:	03 04 ed 04 00 00 3a 	add    eax,DWORD PTR [ebp*8+0x3a000004]
     e0b:	00 00                	add    BYTE PTR [eax],al
     e0d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e10:	06                   	push   es
     e11:	64 00 00             	add    BYTE PTR fs:[eax],al
     e14:	00 02                	add    BYTE PTR [edx],al
     e16:	be 05 00 00 02       	mov    esi,0x2000005
     e1b:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
     e21:	01 06                	add    DWORD PTR [esi],eax
     e23:	5d                   	pop    ebp
     e24:	00 00                	add    BYTE PTR [eax],al
     e26:	00 04 02             	add    BYTE PTR [edx+eax*1],al
     e29:	05 ea 00 00 00       	add    eax,0xea
     e2e:	05 04 05 69 6e       	add    eax,0x6e690504
     e33:	74 00                	je     e35 <sysEnter_Vector-0x12f1cb>
     e35:	04 08                	add    al,0x8
     e37:	05 00 00 00 00       	add    eax,0x0
     e3c:	04 01                	add    al,0x1
     e3e:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     e41:	00 00                	add    BYTE PTR [eax],al
     e43:	04 02                	add    al,0x2
     e45:	07                   	pop    es
     e46:	0e                   	push   cs
     e47:	00 00                	add    BYTE PTR [eax],al
     e49:	00 02                	add    BYTE PTR [edx],al
     e4b:	69 00 00 00 03 34    	imul   eax,DWORD PTR [eax],0x34030000
     e51:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e57:	07                   	pop    es
     e58:	3e 00 00             	add    BYTE PTR ds:[eax],al
     e5b:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     e5e:	07                   	pop    es
     e5f:	34 00                	xor    al,0x0
     e61:	00 00                	add    BYTE PTR [eax],al
     e63:	02 a6 04 00 00 03    	add    ah,BYTE PTR [esi+0x3000004]
     e69:	56                   	push   esi
     e6a:	81 00 00 00 02 9f    	add    DWORD PTR [eax],0x9f020000
     e70:	04 00                	add    al,0x0
     e72:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
     e75:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e7b:	05 05 00 00 00       	add    eax,0x5
     e80:	04 0c                	add    al,0xc
     e82:	04 9b                	add    al,0x9b
     e84:	00 00                	add    BYTE PTR [eax],al
     e86:	00 06                	add    BYTE PTR [esi],al
     e88:	04 b9                	add    al,0xb9
     e8a:	00 00                	add    BYTE PTR [eax],al
     e8c:	00 07                	add    BYTE PTR [edi],al
     e8e:	3a 00                	cmp    al,BYTE PTR [eax]
     e90:	00 00                	add    BYTE PTR [eax],al
     e92:	04 01                	add    al,0x1
     e94:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
     e9a:	17                   	pop    ss
     e9b:	03 00                	add    eax,DWORD PTR [eax]
     e9d:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
     ea0:	00 00                	add    BYTE PTR [eax],al
     ea2:	00 05 15 87 01 00    	add    BYTE PTR ds:0x18715,al
     ea8:	00 09                	add    BYTE PTR [ecx],cl
     eaa:	7c 03                	jl     eaf <sysEnter_Vector-0x12f151>
     eac:	00 00                	add    BYTE PTR [eax],al
     eae:	00 09                	add    BYTE PTR [ecx],cl
     eb0:	b4 03                	mov    ah,0x3
     eb2:	00 00                	add    BYTE PTR [eax],al
     eb4:	01 09                	add    DWORD PTR [ecx],ecx
     eb6:	73 02                	jae    eba <sysEnter_Vector-0x12f146>
     eb8:	00 00                	add    BYTE PTR [eax],al
     eba:	02 09                	add    cl,BYTE PTR [ecx]
     ebc:	09 03                	or     DWORD PTR [ebx],eax
     ebe:	00 00                	add    BYTE PTR [eax],al
     ec0:	03 09                	add    ecx,DWORD PTR [ecx]
     ec2:	53                   	push   ebx
     ec3:	02 00                	add    al,BYTE PTR [eax]
     ec5:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
     ec8:	ce                   	into   
     ec9:	03 00                	add    eax,DWORD PTR [eax]
     ecb:	00 05 09 2d 03 00    	add    BYTE PTR ds:0x32d09,al
     ed1:	00 06                	add    BYTE PTR [esi],al
     ed3:	09 66 02             	or     DWORD PTR [esi+0x2],esp
     ed6:	00 00                	add    BYTE PTR [eax],al
     ed8:	07                   	pop    es
     ed9:	09 ff                	or     edi,edi
     edb:	03 00                	add    eax,DWORD PTR [eax]
     edd:	00 4f 09             	add    BYTE PTR [edi+0x9],cl
     ee0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ee1:	03 00                	add    eax,DWORD PTR [eax]
     ee3:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
     ee6:	0e                   	push   cs
     ee7:	04 00                	add    al,0x0
     ee9:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
     eec:	f5                   	cmc    
     eed:	02 00                	add    al,BYTE PTR [eax]
     eef:	00 97 0a 8c 03 00    	add    BYTE PTR [edi+0x38c0a],dl
     ef5:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     ef8:	0a 62 03             	or     ah,BYTE PTR [edx+0x3]
     efb:	00 00                	add    BYTE PTR [eax],al
     efd:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
     f00:	f1                   	icebp  
     f01:	03 00                	add    eax,DWORD PTR [eax]
     f03:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     f06:	0a d7                	or     dl,bh
     f08:	02 00                	add    al,BYTE PTR [eax]
     f0a:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     f0d:	0a 26                	or     ah,BYTE PTR [esi]
     f0f:	04 00                	add    al,0x0
     f11:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     f14:	0a 3a                	or     bh,BYTE PTR [edx]
     f16:	03 00                	add    eax,DWORD PTR [eax]
     f18:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     f1b:	0a ac 02 00 00 69 01 	or     ch,BYTE PTR [edx+eax*1+0x1690000]
     f22:	0a a3 03 00 00 70    	or     ah,BYTE PTR [ebx+0x70000003]
     f28:	01 0a                	add    DWORD PTR [edx],ecx
     f2a:	e5 02                	in     eax,0x2
     f2c:	00 00                	add    BYTE PTR [eax],al
     f2e:	71 01                	jno    f31 <sysEnter_Vector-0x12f0cf>
     f30:	0a dc                	or     bl,ah
     f32:	03 00                	add    eax,DWORD PTR [eax]
     f34:	00 00                	add    BYTE PTR [eax],al
     f36:	03 0a                	add    ecx,DWORD PTR [edx]
     f38:	47                   	inc    edi
     f39:	03 00                	add    eax,DWORD PTR [eax]
     f3b:	00 01                	add    BYTE PTR [ecx],al
     f3d:	03 0a                	add    ecx,DWORD PTR [edx]
     f3f:	bb 02 00 00 02       	mov    ebx,0x2000002
     f44:	03 0a                	add    ecx,DWORD PTR [edx]
     f46:	80 02 00             	add    BYTE PTR [edx],0x0
     f49:	00 03                	add    BYTE PTR [ebx],al
     f4b:	03 0a                	add    ecx,DWORD PTR [edx]
     f4d:	90                   	nop
     f4e:	02 00                	add    al,BYTE PTR [eax]
     f50:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     f53:	0a c7                	or     al,bh
     f55:	02 00                	add    al,BYTE PTR [eax]
     f57:	00 05 03 00 04 04    	add    BYTE PTR ds:0x4040003,al
     f5d:	07                   	pop    es
     f5e:	39 00                	cmp    DWORD PTR [eax],eax
     f60:	00 00                	add    BYTE PTR [eax],al
     f62:	04 04                	add    al,0x4
     f64:	07                   	pop    es
     f65:	e1 00                	loope  f67 <sysEnter_Vector-0x12f099>
     f67:	00 00                	add    BYTE PTR [eax],al
     f69:	0b 04 06             	or     eax,DWORD PTR [esi+eax*1]
     f6c:	04 3a                	add    al,0x3a
     f6e:	00 00                	add    BYTE PTR [eax],al
     f70:	00 0c 81             	add    BYTE PTR [ecx+eax*4],cl
     f73:	05 00 00 01 0f       	add    eax,0xf010000
     f78:	5a                   	pop    edx
     f79:	00 00                	add    BYTE PTR [eax],al
     f7b:	00 b4 08 00 30 3a 00 	add    BYTE PTR [eax+ecx*1+0x3a3000],dh
     f82:	00 00                	add    BYTE PTR [eax],al
     f84:	01 9c 0b 02 00 00 0d 	add    DWORD PTR [ebx+ecx*1+0xd000002],ebx
     f8b:	34 05                	xor    al,0x5
     f8d:	00 00                	add    BYTE PTR [eax],al
     f8f:	01 0f                	add    DWORD PTR [edi],ecx
     f91:	5a                   	pop    edx
     f92:	00 00                	add    BYTE PTR [eax],al
     f94:	00 02                	add    BYTE PTR [edx],al
     f96:	91                   	xchg   ecx,eax
     f97:	00 0d ce 05 00 00    	add    BYTE PTR ds:0x5ce,cl
     f9d:	01 0f                	add    DWORD PTR [edi],ecx
     f9f:	76 00                	jbe    fa1 <sysEnter_Vector-0x12f05f>
     fa1:	00 00                	add    BYTE PTR [eax],al
     fa3:	02 91 04 0d d5 05    	add    dl,BYTE PTR [ecx+0x5d50d04]
     fa9:	00 00                	add    BYTE PTR [eax],al
     fab:	01 0f                	add    DWORD PTR [edi],ecx
     fad:	76 00                	jbe    faf <sysEnter_Vector-0x12f051>
     faf:	00 00                	add    BYTE PTR [eax],al
     fb1:	02 91 08 0d dc 05    	add    dl,BYTE PTR [ecx+0x5dc0d08]
     fb7:	00 00                	add    BYTE PTR [eax],al
     fb9:	01 0f                	add    DWORD PTR [edi],ecx
     fbb:	76 00                	jbe    fbd <sysEnter_Vector-0x12f043>
     fbd:	00 00                	add    BYTE PTR [eax],al
     fbf:	02 91 0c 0d e3 05    	add    dl,BYTE PTR [ecx+0x5e30d0c]
     fc5:	00 00                	add    BYTE PTR [eax],al
     fc7:	01 0f                	add    DWORD PTR [edi],ecx
     fc9:	76 00                	jbe    fcb <sysEnter_Vector-0x12f035>
     fcb:	00 00                	add    BYTE PTR [eax],al
     fcd:	02 91 10 0e 85 04    	add    dl,BYTE PTR [ecx+0x4850e10]
     fd3:	00 00                	add    BYTE PTR [eax],al
     fd5:	01 11                	add    DWORD PTR [ecx],edx
     fd7:	5a                   	pop    edx
     fd8:	00 00                	add    BYTE PTR [eax],al
     fda:	00 02                	add    BYTE PTR [edx],al
     fdc:	91                   	xchg   ecx,eax
     fdd:	6c                   	ins    BYTE PTR es:[edi],dx
     fde:	00 0c 75 05 00 00 01 	add    BYTE PTR [esi*2+0x1000005],cl
     fe5:	16                   	push   ss
     fe6:	5a                   	pop    edx
     fe7:	00 00                	add    BYTE PTR [eax],al
     fe9:	00 ee                	add    dh,ch
     feb:	08 00                	or     BYTE PTR [eax],al
     fed:	30 3c 00             	xor    BYTE PTR [eax+eax*1],bh
     ff0:	00 00                	add    BYTE PTR [eax],al
     ff2:	01 9c 6b 02 00 00 0d 	add    DWORD PTR [ebx+ebp*2+0xd000002],ebx
     ff9:	34 05                	xor    al,0x5
     ffb:	00 00                	add    BYTE PTR [eax],al
     ffd:	01 16                	add    DWORD PTR [esi],edx
     fff:	5a                   	pop    edx
    1000:	00 00                	add    BYTE PTR [eax],al
    1002:	00 02                	add    BYTE PTR [edx],al
    1004:	91                   	xchg   ecx,eax
    1005:	00 0d ce 05 00 00    	add    BYTE PTR ds:0x5ce,cl
    100b:	01 16                	add    DWORD PTR [esi],edx
    100d:	76 00                	jbe    100f <sysEnter_Vector-0x12eff1>
    100f:	00 00                	add    BYTE PTR [eax],al
    1011:	02 91 04 0d d5 05    	add    dl,BYTE PTR [ecx+0x5d50d04]
    1017:	00 00                	add    BYTE PTR [eax],al
    1019:	01 16                	add    DWORD PTR [esi],edx
    101b:	76 00                	jbe    101d <sysEnter_Vector-0x12efe3>
    101d:	00 00                	add    BYTE PTR [eax],al
    101f:	02 91 08 0d dc 05    	add    dl,BYTE PTR [ecx+0x5dc0d08]
    1025:	00 00                	add    BYTE PTR [eax],al
    1027:	01 16                	add    DWORD PTR [esi],edx
    1029:	76 00                	jbe    102b <sysEnter_Vector-0x12efd5>
    102b:	00 00                	add    BYTE PTR [eax],al
    102d:	02 91 0c 0e 85 04    	add    dl,BYTE PTR [ecx+0x4850e0c]
    1033:	00 00                	add    BYTE PTR [eax],al
    1035:	01 18                	add    DWORD PTR [eax],ebx
    1037:	5a                   	pop    edx
    1038:	00 00                	add    BYTE PTR [eax],al
    103a:	00 02                	add    BYTE PTR [edx],al
    103c:	91                   	xchg   ecx,eax
    103d:	6c                   	ins    BYTE PTR es:[edi],dx
    103e:	00 0c 69             	add    BYTE PTR [ecx+ebp*2],cl
    1041:	05 00 00 01 1d       	add    eax,0x1d010000
    1046:	5a                   	pop    edx
    1047:	00 00                	add    BYTE PTR [eax],al
    1049:	00 2a                	add    BYTE PTR [edx],ch
    104b:	09 00                	or     DWORD PTR [eax],eax
    104d:	30 3e                	xor    BYTE PTR [esi],bh
    104f:	00 00                	add    BYTE PTR [eax],al
    1051:	00 01                	add    BYTE PTR [ecx],al
    1053:	9c                   	pushf  
    1054:	bd 02 00 00 0d       	mov    ebp,0xd000002
    1059:	34 05                	xor    al,0x5
    105b:	00 00                	add    BYTE PTR [eax],al
    105d:	01 1d 5a 00 00 00    	add    DWORD PTR ds:0x5a,ebx
    1063:	02 91 00 0d ce 05    	add    dl,BYTE PTR [ecx+0x5ce0d00]
    1069:	00 00                	add    BYTE PTR [eax],al
    106b:	01 1d 76 00 00 00    	add    DWORD PTR ds:0x76,ebx
    1071:	02 91 04 0d d5 05    	add    dl,BYTE PTR [ecx+0x5d50d04]
    1077:	00 00                	add    BYTE PTR [eax],al
    1079:	01 1d 76 00 00 00    	add    DWORD PTR ds:0x76,ebx
    107f:	02 91 08 0e 85 04    	add    dl,BYTE PTR [ecx+0x4850e08]
    1085:	00 00                	add    BYTE PTR [eax],al
    1087:	01 1f                	add    DWORD PTR [edi],ebx
    1089:	5a                   	pop    edx
    108a:	00 00                	add    BYTE PTR [eax],al
    108c:	00 02                	add    BYTE PTR [edx],al
    108e:	91                   	xchg   ecx,eax
    108f:	6c                   	ins    BYTE PTR es:[edi],dx
    1090:	00 0c 5d 05 00 00 01 	add    BYTE PTR [ebx*2+0x1000005],cl
    1097:	24 5a                	and    al,0x5a
    1099:	00 00                	add    BYTE PTR [eax],al
    109b:	00 68 09             	add    BYTE PTR [eax+0x9],ch
    109e:	00 30                	add    BYTE PTR [eax],dh
    10a0:	40                   	inc    eax
    10a1:	00 00                	add    BYTE PTR [eax],al
    10a3:	00 01                	add    BYTE PTR [ecx],al
    10a5:	9c                   	pushf  
    10a6:	01 03                	add    DWORD PTR [ebx],eax
    10a8:	00 00                	add    BYTE PTR [eax],al
    10aa:	0d 34 05 00 00       	or     eax,0x534
    10af:	01 24 5a             	add    DWORD PTR [edx+ebx*2],esp
    10b2:	00 00                	add    BYTE PTR [eax],al
    10b4:	00 02                	add    BYTE PTR [edx],al
    10b6:	91                   	xchg   ecx,eax
    10b7:	00 0d ce 05 00 00    	add    BYTE PTR ds:0x5ce,cl
    10bd:	01 24 76             	add    DWORD PTR [esi+esi*2],esp
    10c0:	00 00                	add    BYTE PTR [eax],al
    10c2:	00 02                	add    BYTE PTR [edx],al
    10c4:	91                   	xchg   ecx,eax
    10c5:	04 0e                	add    al,0xe
    10c7:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
    10ca:	00 01                	add    BYTE PTR [ecx],al
    10cc:	26                   	es
    10cd:	5a                   	pop    edx
    10ce:	00 00                	add    BYTE PTR [eax],al
    10d0:	00 02                	add    BYTE PTR [edx],al
    10d2:	91                   	xchg   ecx,eax
    10d3:	6c                   	ins    BYTE PTR es:[edi],dx
    10d4:	00 0c 51             	add    BYTE PTR [ecx+edx*2],cl
    10d7:	05 00 00 01 2b       	add    eax,0x2b010000
    10dc:	5a                   	pop    edx
    10dd:	00 00                	add    BYTE PTR [eax],al
    10df:	00 a8 09 00 30 42    	add    BYTE PTR [eax+0x42300009],ch
    10e5:	00 00                	add    BYTE PTR [eax],al
    10e7:	00 01                	add    BYTE PTR [ecx],al
    10e9:	9c                   	pushf  
    10ea:	37                   	aaa    
    10eb:	03 00                	add    eax,DWORD PTR [eax]
    10ed:	00 0d 34 05 00 00    	add    BYTE PTR ds:0x534,cl
    10f3:	01 2b                	add    DWORD PTR [ebx],ebp
    10f5:	5a                   	pop    edx
    10f6:	00 00                	add    BYTE PTR [eax],al
    10f8:	00 02                	add    BYTE PTR [edx],al
    10fa:	91                   	xchg   ecx,eax
    10fb:	00 0e                	add    BYTE PTR [esi],cl
    10fd:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
    1100:	00 01                	add    BYTE PTR [ecx],al
    1102:	2d 5a 00 00 00       	sub    eax,0x5a
    1107:	02 91 6c 00 0f dd    	add    dl,BYTE PTR [ecx-0x22f0ff94]
    110d:	04 00                	add    al,0x0
    110f:	00 01                	add    BYTE PTR [ecx],al
    1111:	32 ea                	xor    ch,dl
    1113:	09 00                	or     DWORD PTR [eax],eax
    1115:	30 a5 00 00 00 01    	xor    BYTE PTR [ebp+0x1000000],ah
    111b:	9c                   	pushf  
    111c:	10 4e 06             	adc    BYTE PTR [esi+0x6],cl
    111f:	00 00                	add    BYTE PTR [eax],al
    1121:	01 43 8f             	add    DWORD PTR [ebx-0x71],eax
    1124:	0a 00                	or     al,BYTE PTR [eax]
    1126:	30 1f                	xor    BYTE PTR [edi],bl
    1128:	00 00                	add    BYTE PTR [eax],al
    112a:	00 01                	add    BYTE PTR [ecx],al
    112c:	9c                   	pushf  
    112d:	11 8c 04 00 00 01 48 	adc    DWORD PTR [esp+eax*1+0x48010000],ecx
    1134:	5a                   	pop    edx
    1135:	00 00                	add    BYTE PTR [eax],al
    1137:	00 ae 0a 00 30 34    	add    BYTE PTR [esi+0x3430000a],ch
    113d:	00 00                	add    BYTE PTR [eax],al
    113f:	00 01                	add    BYTE PTR [ecx],al
    1141:	9c                   	pushf  
    1142:	90                   	nop
    1143:	03 00                	add    eax,DWORD PTR [eax]
    1145:	00 0d f6 05 00 00    	add    BYTE PTR ds:0x5f6,cl
    114b:	01 48 b3             	add    DWORD PTR [eax-0x4d],ecx
    114e:	00 00                	add    BYTE PTR [eax],al
    1150:	00 02                	add    BYTE PTR [edx],al
    1152:	91                   	xchg   ecx,eax
    1153:	00 12                	add    BYTE PTR [edx],dl
    1155:	0e                   	push   cs
    1156:	84 06                	test   BYTE PTR [esi],al
    1158:	00 00                	add    BYTE PTR [eax],al
    115a:	01 4a 41             	add    DWORD PTR [edx+0x41],ecx
    115d:	00 00                	add    BYTE PTR [eax],al
    115f:	00 02                	add    BYTE PTR [edx],al
    1161:	91                   	xchg   ecx,eax
    1162:	74 00                	je     1164 <sysEnter_Vector-0x12ee9c>
    1164:	11 b8 04 00 00 01    	adc    DWORD PTR [eax+0x1000004],edi
    116a:	50                   	push   eax
    116b:	5a                   	pop    edx
    116c:	00 00                	add    BYTE PTR [eax],al
    116e:	00 e2                	add    dl,ah
    1170:	0a 00                	or     al,BYTE PTR [eax]
    1172:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
    1175:	00 00                	add    BYTE PTR [eax],al
    1177:	01 9c c7 03 00 00 0d 	add    DWORD PTR [edi+eax*8+0xd000003],ebx
    117e:	f6 05 00 00 01 50 b3 	test   BYTE PTR ds:0x50010000,0xb3
    1185:	00 00                	add    BYTE PTR [eax],al
    1187:	00 02                	add    BYTE PTR [edx],al
    1189:	91                   	xchg   ecx,eax
    118a:	00 12                	add    BYTE PTR [edx],dl
    118c:	0e                   	push   cs
    118d:	84 06                	test   BYTE PTR [esi],al
    118f:	00 00                	add    BYTE PTR [eax],al
    1191:	01 52 41             	add    DWORD PTR [edx+0x41],edx
    1194:	00 00                	add    BYTE PTR [eax],al
    1196:	00 02                	add    BYTE PTR [edx],al
    1198:	91                   	xchg   ecx,eax
    1199:	74 00                	je     119b <sysEnter_Vector-0x12ee65>
    119b:	11 89 06 00 00 01    	adc    DWORD PTR [ecx+0x1000006],ecx
    11a1:	58                   	pop    eax
    11a2:	5a                   	pop    edx
    11a3:	00 00                	add    BYTE PTR [eax],al
    11a5:	00 16                	add    BYTE PTR [esi],dl
    11a7:	0b 00                	or     eax,DWORD PTR [eax]
    11a9:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
    11ac:	00 00                	add    BYTE PTR [eax],al
    11ae:	01 9c fe 03 00 00 0d 	add    DWORD PTR [esi+edi*8+0xd000003],ebx
    11b5:	f6 05 00 00 01 58 b3 	test   BYTE PTR ds:0x58010000,0xb3
    11bc:	00 00                	add    BYTE PTR [eax],al
    11be:	00 02                	add    BYTE PTR [edx],al
    11c0:	91                   	xchg   ecx,eax
    11c1:	00 12                	add    BYTE PTR [edx],dl
    11c3:	0e                   	push   cs
    11c4:	84 06                	test   BYTE PTR [esi],al
    11c6:	00 00                	add    BYTE PTR [eax],al
    11c8:	01 5a 41             	add    DWORD PTR [edx+0x41],ebx
    11cb:	00 00                	add    BYTE PTR [eax],al
    11cd:	00 02                	add    BYTE PTR [edx],al
    11cf:	91                   	xchg   ecx,eax
    11d0:	74 00                	je     11d2 <sysEnter_Vector-0x12ee2e>
    11d2:	11 c6                	adc    esi,eax
    11d4:	05 00 00 01 60       	add    eax,0x60010000
    11d9:	5a                   	pop    edx
    11da:	00 00                	add    BYTE PTR [eax],al
    11dc:	00 4a 0b             	add    BYTE PTR [edx+0xb],cl
    11df:	00 30                	add    BYTE PTR [eax],dh
    11e1:	37                   	aaa    
    11e2:	00 00                	add    BYTE PTR [eax],al
    11e4:	00 01                	add    BYTE PTR [ecx],al
    11e6:	9c                   	pushf  
    11e7:	43                   	inc    ebx
    11e8:	04 00                	add    al,0x0
    11ea:	00 0d 29 05 00 00    	add    BYTE PTR ds:0x529,cl
    11f0:	01 60 76             	add    DWORD PTR [eax+0x76],esp
    11f3:	00 00                	add    BYTE PTR [eax],al
    11f5:	00 02                	add    BYTE PTR [edx],al
    11f7:	91                   	xchg   ecx,eax
    11f8:	00 0d f6 05 00 00    	add    BYTE PTR ds:0x5f6,cl
    11fe:	01 60 b3             	add    DWORD PTR [eax-0x4d],esp
    1201:	00 00                	add    BYTE PTR [eax],al
    1203:	00 02                	add    BYTE PTR [edx],al
    1205:	91                   	xchg   ecx,eax
    1206:	04 12                	add    al,0x12
    1208:	0e                   	push   cs
    1209:	84 06                	test   BYTE PTR [esi],al
    120b:	00 00                	add    BYTE PTR [eax],al
    120d:	01 62 41             	add    DWORD PTR [edx+0x41],esp
    1210:	00 00                	add    BYTE PTR [eax],al
    1212:	00 02                	add    BYTE PTR [edx],al
    1214:	91                   	xchg   ecx,eax
    1215:	74 00                	je     1217 <sysEnter_Vector-0x12ede9>
    1217:	0c 3c                	or     al,0x3c
    1219:	05 00 00 01 6a       	add    eax,0x6a010000
    121e:	81 00 00 00 81 0b    	add    DWORD PTR [eax],0xb810000
    1224:	00 30                	add    BYTE PTR [eax],dh
    1226:	75 00                	jne    1228 <sysEnter_Vector-0x12edd8>
    1228:	00 00                	add    BYTE PTR [eax],al
    122a:	01 9c 8f 04 00 00 0d 	add    DWORD PTR [edi+ecx*4+0xd000004],ebx
    1231:	09 06                	or     DWORD PTR [esi],eax
    1233:	00 00                	add    BYTE PTR [eax],al
    1235:	01 6a 81             	add    DWORD PTR [edx-0x7f],ebp
    1238:	00 00                	add    BYTE PTR [eax],al
    123a:	00 02                	add    BYTE PTR [edx],al
    123c:	91                   	xchg   ecx,eax
    123d:	00 13                	add    BYTE PTR [ebx],dl
    123f:	93                   	xchg   ebx,eax
    1240:	0b 00                	or     eax,DWORD PTR [eax]
    1242:	30 57 00             	xor    BYTE PTR [edi+0x0],dl
    1245:	00 00                	add    BYTE PTR [eax],al
    1247:	14 73                	adc    al,0x73
    1249:	32 00                	xor    al,BYTE PTR [eax]
    124b:	01 6c 76 00          	add    DWORD PTR [esi+esi*2+0x0],ebp
    124f:	00 00                	add    BYTE PTR [eax],al
    1251:	02 91 6c 14 63 74    	add    dl,BYTE PTR [ecx+0x7463146c]
    1257:	00 01                	add    BYTE PTR [ecx],al
    1259:	6c                   	ins    BYTE PTR es:[edi],dx
    125a:	76 00                	jbe    125c <sysEnter_Vector-0x12eda4>
    125c:	00 00                	add    BYTE PTR [eax],al
    125e:	02 91 68 00 00 0f    	add    dl,BYTE PTR [ecx+0xf000068]
    1264:	90                   	nop
    1265:	06                   	push   es
    1266:	00 00                	add    BYTE PTR [eax],al
    1268:	01 70 f6             	add    DWORD PTR [eax-0xa],esi
    126b:	0b 00                	or     eax,DWORD PTR [eax]
    126d:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    1273:	9c                   	pushf  
    1274:	15 77 06 00 00       	adc    eax,0x677
    1279:	01 75 13             	add    DWORD PTR [ebp+0x13],esi
    127c:	0c 00                	or     al,0x0
    127e:	30 29                	xor    BYTE PTR [ecx],ch
    1280:	00 00                	add    BYTE PTR [eax],al
    1282:	00 01                	add    BYTE PTR [ecx],al
    1284:	9c                   	pushf  
    1285:	e0 04                	loopne 128b <sysEnter_Vector-0x12ed75>
    1287:	00 00                	add    BYTE PTR [eax],al
    1289:	0d fd 05 00 00       	or     eax,0x5fd
    128e:	01 75 5a             	add    DWORD PTR [ebp+0x5a],esi
    1291:	00 00                	add    BYTE PTR [eax],al
    1293:	00 02                	add    BYTE PTR [edx],al
    1295:	91                   	xchg   ecx,eax
    1296:	00 0d 6c 06 00 00    	add    BYTE PTR ds:0x66c,cl
    129c:	01 75 95             	add    DWORD PTR [ebp-0x6b],esi
    129f:	01 00                	add    DWORD PTR [eax],eax
    12a1:	00 02                	add    BYTE PTR [edx],al
    12a3:	91                   	xchg   ecx,eax
    12a4:	04 0d                	add    al,0xd
    12a6:	b0 04                	mov    al,0x4
    12a8:	00 00                	add    BYTE PTR [eax],al
    12aa:	01 75 5a             	add    DWORD PTR [ebp+0x5a],esi
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	00 02                	add    BYTE PTR [edx],al
    12b1:	91                   	xchg   ecx,eax
    12b2:	08 00                	or     BYTE PTR [eax],al
    12b4:	16                   	push   ss
    12b5:	05 05 00 00 01       	add    eax,0x1000005
    12ba:	7a 5a                	jp     1316 <sysEnter_Vector-0x12ecea>
    12bc:	00 00                	add    BYTE PTR [eax],al
    12be:	00 3c 0c             	add    BYTE PTR [esp+ecx*1],bh
    12c1:	00 30                	add    BYTE PTR [eax],dh
    12c3:	29 00                	sub    DWORD PTR [eax],eax
    12c5:	00 00                	add    BYTE PTR [eax],al
    12c7:	01 9c 08 05 00 00 0e 	add    DWORD PTR [eax+ecx*1+0xe000005],ebx
    12ce:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
    12d1:	00 01                	add    BYTE PTR [ecx],al
    12d3:	7c 76                	jl     134b <sysEnter_Vector-0x12ecb5>
    12d5:	00 00                	add    BYTE PTR [eax],al
    12d7:	00 02                	add    BYTE PTR [edx],al
    12d9:	91                   	xchg   ecx,eax
    12da:	74 00                	je     12dc <sysEnter_Vector-0x12ed24>
    12dc:	11 04 06             	adc    DWORD PTR [esi+eax*1],eax
    12df:	00 00                	add    BYTE PTR [eax],al
    12e1:	01 82 5a 00 00 00    	add    DWORD PTR [edx+0x5a],eax
    12e7:	65                   	gs
    12e8:	0c 00                	or     al,0x0
    12ea:	30 4c 00 00          	xor    BYTE PTR [eax+eax*1+0x0],cl
    12ee:	00 01                	add    BYTE PTR [ecx],al
    12f0:	9c                   	pushf  
    12f1:	5a                   	pop    edx
    12f2:	05 00 00 0d 2f       	add    eax,0x2f0d0000
    12f7:	09 00                	or     DWORD PTR [eax],eax
    12f9:	00 01                	add    BYTE PTR [ecx],al
    12fb:	82                   	(bad)  
    12fc:	97                   	xchg   edi,eax
    12fd:	01 00                	add    DWORD PTR [eax],eax
    12ff:	00 02                	add    BYTE PTR [edx],al
    1301:	91                   	xchg   ecx,eax
    1302:	00 0d 3a 06 00 00    	add    BYTE PTR ds:0x63a,cl
    1308:	01 82 5a 00 00 00    	add    DWORD PTR [edx+0x5a],eax
    130e:	02 91 04 0d 5b 06    	add    dl,BYTE PTR [ecx+0x65b0d04]
    1314:	00 00                	add    BYTE PTR [eax],al
    1316:	01 82 5a 05 00 00    	add    DWORD PTR [edx+0x55a],eax
    131c:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    1322:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1325:	84 5a 00             	test   BYTE PTR [edx+0x0],bl
    1328:	00 00                	add    BYTE PTR [eax],al
    132a:	02 91 74 00 06 04    	add    dl,BYTE PTR [ecx+0x4060074]
    1330:	97                   	xchg   edi,eax
    1331:	01 00                	add    DWORD PTR [eax],eax
    1333:	00 11                	add    BYTE PTR [ecx],dl
    1335:	f0 05 00 00 01 8a    	lock add eax,0x8a010000
    133b:	5a                   	pop    edx
    133c:	00 00                	add    BYTE PTR [eax],al
    133e:	00 b1 0c 00 30 f4    	add    BYTE PTR [ecx-0xbcffff4],dh
    1344:	01 00                	add    DWORD PTR [eax],eax
    1346:	00 01                	add    BYTE PTR [ecx],al
    1348:	9c                   	pushf  
    1349:	02 06                	add    al,BYTE PTR [esi]
    134b:	00 00                	add    BYTE PTR [eax],al
    134d:	0d 2f 09 00 00       	or     eax,0x92f
    1352:	01 8a 97 01 00 00    	add    DWORD PTR [edx+0x197],ecx
    1358:	02 91 00 14 70 69    	add    dl,BYTE PTR [ecx+0x69701400]
    135e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1361:	8c 5a 00             	mov    WORD PTR [edx+0x0],ds
    1364:	00 00                	add    BYTE PTR [eax],al
    1366:	02 91 58 0e 3a 06    	add    dl,BYTE PTR [ecx+0x63a0e58]
    136c:	00 00                	add    BYTE PTR [eax],al
    136e:	01 8c 5a 00 00 00 02 	add    DWORD PTR [edx+ebx*2+0x2000000],ecx
    1375:	91                   	xchg   ecx,eax
    1376:	6c                   	ins    BYTE PTR es:[edi],dx
    1377:	0e                   	push   cs
    1378:	5b                   	pop    ebx
    1379:	06                   	push   es
    137a:	00 00                	add    BYTE PTR [eax],al
    137c:	01 8d 5a 05 00 00    	add    DWORD PTR [ebp+0x55a],ecx
    1382:	02 91 50 0e 0a 05    	add    dl,BYTE PTR [ecx+0x50a0e50]
    1388:	00 00                	add    BYTE PTR [eax],al
    138a:	01 8e 97 01 00 00    	add    DWORD PTR [esi+0x197],ecx
    1390:	02 91 68 0e 92 04    	add    dl,BYTE PTR [ecx+0x4920e68]
    1396:	00 00                	add    BYTE PTR [eax],al
    1398:	01 8e 97 01 00 00    	add    DWORD PTR [esi+0x197],ecx
    139e:	02 91 64 0e d5 04    	add    dl,BYTE PTR [ecx+0x4d50e64]
    13a4:	00 00                	add    BYTE PTR [eax],al
    13a6:	01 8f 97 01 00 00    	add    DWORD PTR [edi+0x197],ecx
    13ac:	02 91 54 0e bf 04    	add    dl,BYTE PTR [ecx+0x4bf0e54]
    13b2:	00 00                	add    BYTE PTR [eax],al
    13b4:	01 a0 5a 00 00 00    	add    DWORD PTR [eax+0x5a],esp
    13ba:	02 91 60 13 87 0d    	add    dl,BYTE PTR [ecx+0xd871360]
    13c0:	00 30                	add    BYTE PTR [eax],dh
    13c2:	e0 00                	loopne 13c4 <sysEnter_Vector-0x12ec3c>
    13c4:	00 00                	add    BYTE PTR [eax],al
    13c6:	14 63                	adc    al,0x63
    13c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13c9:	74 00                	je     13cb <sysEnter_Vector-0x12ec35>
    13cb:	01 a2 5a 00 00 00    	add    DWORD PTR [edx+0x5a],esp
    13d1:	02 91 5c 00 00 11    	add    dl,BYTE PTR [ecx+0x1100005c]
    13d7:	ea 05 00 00 01 b8 5a 	jmp    0x5ab8:0x1000005
    13de:	00 00                	add    BYTE PTR [eax],al
    13e0:	00 a5 0e 00 30 4f    	add    BYTE PTR [ebp+0x4f30000e],ah
    13e6:	00 00                	add    BYTE PTR [eax],al
    13e8:	00 01                	add    BYTE PTR [ecx],al
    13ea:	9c                   	pushf  
    13eb:	54                   	push   esp
    13ec:	06                   	push   es
    13ed:	00 00                	add    BYTE PTR [eax],al
    13ef:	0d 2f 09 00 00       	or     eax,0x92f
    13f4:	01 b8 97 01 00 00    	add    DWORD PTR [eax+0x197],edi
    13fa:	02 91 00 0d 3a 06    	add    dl,BYTE PTR [ecx+0x63a0d00]
    1400:	00 00                	add    BYTE PTR [eax],al
    1402:	01 b8 5a 00 00 00    	add    DWORD PTR [eax+0x5a],edi
    1408:	02 91 04 0d 5b 06    	add    dl,BYTE PTR [ecx+0x65b0d04]
    140e:	00 00                	add    BYTE PTR [eax],al
    1410:	01 b8 5a 05 00 00    	add    DWORD PTR [eax+0x55a],edi
    1416:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    141c:	64 00 01             	add    BYTE PTR fs:[ecx],al
    141f:	ba 5a 00 00 00       	mov    edx,0x5a
    1424:	02 91 74 00 11 21    	add    dl,BYTE PTR [ecx+0x21110074]
    142a:	05 00 00 01 c0       	add    eax,0xc0010000
    142f:	5a                   	pop    edx
    1430:	00 00                	add    BYTE PTR [eax],al
    1432:	00 f4                	add    ah,dh
    1434:	0e                   	push   cs
    1435:	00 30                	add    BYTE PTR [eax],dh
    1437:	1c 00                	sbb    al,0x0
    1439:	00 00                	add    BYTE PTR [eax],al
    143b:	01 9c 7c 06 00 00 17 	add    DWORD PTR [esp+edi*2+0x17000006],ebx
    1442:	70 69                	jo     14ad <sysEnter_Vector-0x12eb53>
    1444:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1447:	c0                   	(bad)  
    1448:	76 00                	jbe    144a <sysEnter_Vector-0x12ebb6>
    144a:	00 00                	add    BYTE PTR [eax],al
    144c:	02 91 00 00 15 60    	add    dl,BYTE PTR [ecx+0x60150000]
    1452:	06                   	push   es
    1453:	00 00                	add    BYTE PTR [eax],al
    1455:	01 c6                	add    esi,eax
    1457:	10 0f                	adc    BYTE PTR [edi],cl
    1459:	00 30                	add    BYTE PTR [eax],dh
    145b:	20 00                	and    BYTE PTR [eax],al
    145d:	00 00                	add    BYTE PTR [eax],al
    145f:	01 9c a0 06 00 00 0d 	add    DWORD PTR [eax+eiz*4+0xd000006],ebx
    1466:	65                   	gs
    1467:	06                   	push   es
    1468:	00 00                	add    BYTE PTR [eax],al
    146a:	01 c6                	add    esi,eax
    146c:	5a                   	pop    edx
    146d:	00 00                	add    BYTE PTR [eax],al
    146f:	00 02                	add    BYTE PTR [edx],al
    1471:	91                   	xchg   ecx,eax
    1472:	00 00                	add    BYTE PTR [eax],al
    1474:	11 95 06 00 00 01    	adc    DWORD PTR [ebp+0x1000006],edx
    147a:	cc                   	int3   
    147b:	97                   	xchg   edi,eax
    147c:	01 00                	add    DWORD PTR [eax],eax
    147e:	00 30                	add    BYTE PTR [eax],dh
    1480:	0f 00                	(bad)  
    1482:	30 20                	xor    BYTE PTR [eax],ah
    1484:	00 00                	add    BYTE PTR [eax],al
    1486:	00 01                	add    BYTE PTR [ecx],al
    1488:	9c                   	pushf  
    1489:	d6                   	(bad)  
    148a:	06                   	push   es
    148b:	00 00                	add    BYTE PTR [eax],al
    148d:	17                   	pop    ss
    148e:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    1491:	00 01                	add    BYTE PTR [ecx],al
    1493:	cc                   	int3   
    1494:	97                   	xchg   edi,eax
    1495:	01 00                	add    DWORD PTR [eax],eax
    1497:	00 02                	add    BYTE PTR [edx],al
    1499:	91                   	xchg   ecx,eax
    149a:	00 0d 9a 05 00 00    	add    BYTE PTR ds:0x59a,cl
    14a0:	01 cc                	add    esp,ecx
    14a2:	9a 00 00 00 02 91 04 	call   0x491:0x2000000
    14a9:	00 0c 47             	add    BYTE PTR [edi+eax*2],cl
    14ac:	06                   	push   es
    14ad:	00 00                	add    BYTE PTR [eax],al
    14af:	01 d2                	add    edx,edx
    14b1:	9a 00 00 00 50 0f 00 	call   0xf:0x50000000
    14b8:	30 44 01 00          	xor    BYTE PTR [ecx+eax*1+0x0],al
    14bc:	00 01                	add    BYTE PTR [ecx],al
    14be:	9c                   	pushf  
    14bf:	b3 07                	mov    bl,0x7
    14c1:	00 00                	add    BYTE PTR [eax],al
    14c3:	0d c7 03 00 00       	or     eax,0x3c7
    14c8:	01 d2                	add    edx,edx
    14ca:	97                   	xchg   edi,eax
    14cb:	01 00                	add    DWORD PTR [eax],eax
    14cd:	00 02                	add    BYTE PTR [edx],al
    14cf:	91                   	xchg   ecx,eax
    14d0:	00 0d 5b 06 00 00    	add    BYTE PTR ds:0x65b,cl
    14d6:	01 d2                	add    edx,edx
    14d8:	5a                   	pop    edx
    14d9:	05 00 00 02 91       	add    eax,0x91020000
    14de:	04 0d                	add    al,0xd
    14e0:	95                   	xchg   ebp,eax
    14e1:	05 00 00 01 d2       	add    eax,0xd2010000
    14e6:	9a 00 00 00 02 91 08 	call   0x891:0x2000000
    14ed:	14 70                	adc    al,0x70
    14ef:	00 01                	add    BYTE PTR [ecx],al
    14f1:	d4 97                	aam    0x97
    14f3:	01 00                	add    DWORD PTR [eax],eax
    14f5:	00 02                	add    BYTE PTR [edx],al
    14f7:	91                   	xchg   ecx,eax
    14f8:	74 0e                	je     1508 <sysEnter_Vector-0x12eaf8>
    14fa:	c7 04 00 00 01 d4 97 	mov    DWORD PTR [eax+eax*1],0x97d40100
    1501:	01 00                	add    DWORD PTR [eax],eax
    1503:	00 02                	add    BYTE PTR [edx],al
    1505:	91                   	xchg   ecx,eax
    1506:	70 14                	jo     151c <sysEnter_Vector-0x12eae4>
    1508:	63 00                	arpl   WORD PTR [eax],ax
    150a:	01 d5                	add    ebp,edx
    150c:	5a                   	pop    edx
    150d:	00 00                	add    BYTE PTR [eax],al
    150f:	00 02                	add    BYTE PTR [edx],al
    1511:	91                   	xchg   ecx,eax
    1512:	64 08 18             	or     BYTE PTR fs:[eax],bl
    1515:	06                   	push   es
    1516:	00 00                	add    BYTE PTR [eax],al
    1518:	04 81                	add    al,0x81
    151a:	00 00                	add    BYTE PTR [eax],al
    151c:	00 01                	add    BYTE PTR [ecx],al
    151e:	d6                   	(bad)  
    151f:	62 07                	bound  eax,QWORD PTR [edi]
    1521:	00 00                	add    BYTE PTR [eax],al
    1523:	09 13                	or     DWORD PTR [ebx],edx
    1525:	06                   	push   es
    1526:	00 00                	add    BYTE PTR [eax],al
    1528:	00 09                	add    BYTE PTR [ecx],cl
    152a:	8d 05 00 00 01 09    	lea    eax,ds:0x9010000
    1530:	1f                   	pop    ds
    1531:	06                   	push   es
    1532:	00 00                	add    BYTE PTR [eax],al
    1534:	02 00                	add    al,BYTE PTR [eax]
    1536:	0e                   	push   cs
    1537:	e7 04                	out    0x4,eax
    1539:	00 00                	add    BYTE PTR [eax],al
    153b:	01 d6                	add    esi,edx
    153d:	3f                   	aas    
    153e:	07                   	pop    es
    153f:	00 00                	add    BYTE PTR [eax],al
    1541:	02 91 6c 0e 3a 06    	add    dl,BYTE PTR [ecx+0x63a0e6c]
    1547:	00 00                	add    BYTE PTR [eax],al
    1549:	01 d7                	add    edi,edx
    154b:	9a 00 00 00 02 91 68 	call   0x6891:0x2000000
    1552:	18 9c 0f 00 30 0e 00 	sbb    BYTE PTR [edi+ecx*1+0xe3000],bl
    1559:	00 00                	add    BYTE PTR [eax],al
    155b:	9a 07 00 00 0e af 05 	call   0x5af:0xe000007
    1562:	00 00                	add    BYTE PTR [eax],al
    1564:	01 dd                	add    ebp,ebx
    1566:	be 00 00 00 02       	mov    esi,0x2000000
    156b:	91                   	xchg   ecx,eax
    156c:	63 00                	arpl   WORD PTR [eax],ax
    156e:	13 0b                	adc    ecx,DWORD PTR [ebx]
    1570:	10 00                	adc    BYTE PTR [eax],al
    1572:	30 0e                	xor    BYTE PTR [esi],cl
    1574:	00 00                	add    BYTE PTR [eax],al
    1576:	00 0e                	add    BYTE PTR [esi],cl
    1578:	af                   	scas   eax,DWORD PTR es:[edi]
    1579:	05 00 00 01 f3       	add    eax,0xf3010000
    157e:	be 00 00 00 02       	mov    esi,0x2000000
    1583:	91                   	xchg   ecx,eax
    1584:	62 00                	bound  eax,QWORD PTR [eax]
    1586:	00 19                	add    BYTE PTR [ecx],bl
    1588:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
    158b:	00 01                	add    BYTE PTR [ecx],al
    158d:	02 01                	add    al,BYTE PTR [ecx]
    158f:	9a 00 00 00 94 10 00 	call   0x10:0x94000000
    1596:	30 20                	xor    BYTE PTR [eax],ah
    1598:	00 00                	add    BYTE PTR [eax],al
    159a:	00 01                	add    BYTE PTR [ecx],al
    159c:	9c                   	pushf  
    159d:	fb                   	sti    
    159e:	07                   	pop    es
    159f:	00 00                	add    BYTE PTR [eax],al
    15a1:	1a c7                	sbb    al,bh
    15a3:	03 00                	add    eax,DWORD PTR [eax]
    15a5:	00 01                	add    BYTE PTR [ecx],al
    15a7:	02 01                	add    al,BYTE PTR [ecx]
    15a9:	97                   	xchg   edi,eax
    15aa:	01 00                	add    DWORD PTR [eax],eax
    15ac:	00 02                	add    BYTE PTR [edx],al
    15ae:	91                   	xchg   ecx,eax
    15af:	00 1a                	add    BYTE PTR [edx],bl
    15b1:	5b                   	pop    ebx
    15b2:	06                   	push   es
    15b3:	00 00                	add    BYTE PTR [eax],al
    15b5:	01 02                	add    DWORD PTR [edx],eax
    15b7:	01 5a 05             	add    DWORD PTR [edx+0x5],ebx
    15ba:	00 00                	add    BYTE PTR [eax],al
    15bc:	02 91 04 1a 95 05    	add    dl,BYTE PTR [ecx+0x5951a04]
    15c2:	00 00                	add    BYTE PTR [eax],al
    15c4:	01 02                	add    DWORD PTR [edx],eax
    15c6:	01 9a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ebx
    15cc:	91                   	xchg   ecx,eax
    15cd:	08 00                	or     BYTE PTR [eax],al
    15cf:	19 42 05             	sbb    DWORD PTR [edx+0x5],eax
    15d2:	00 00                	add    BYTE PTR [eax],al
    15d4:	01 07                	add    DWORD PTR [edi],eax
    15d6:	01 5a 05             	add    DWORD PTR [edx+0x5],ebx
    15d9:	00 00                	add    BYTE PTR [eax],al
    15db:	b4 10                	mov    ah,0x10
    15dd:	00 30                	add    BYTE PTR [eax],dh
    15df:	b6 01                	mov    dh,0x1
    15e1:	00 00                	add    BYTE PTR [eax],al
    15e3:	01 9c 99 08 00 00 1a 	add    DWORD PTR [ecx+ebx*4+0x1a000008],ebx
    15ea:	3f                   	aas    
    15eb:	06                   	push   es
    15ec:	00 00                	add    BYTE PTR [eax],al
    15ee:	01 07                	add    DWORD PTR [edi],eax
    15f0:	01 b3 00 00 00 02    	add    DWORD PTR [ebx+0x2000000],esi
    15f6:	91                   	xchg   ecx,eax
    15f7:	00 1a                	add    BYTE PTR [edx],bl
    15f9:	3a 06                	cmp    al,BYTE PTR [esi]
    15fb:	00 00                	add    BYTE PTR [eax],al
    15fd:	01 07                	add    DWORD PTR [edi],eax
    15ff:	01 99 08 00 00 02    	add    DWORD PTR [ecx+0x2000008],ebx
    1605:	91                   	xchg   ecx,eax
    1606:	04 1b                	add    al,0x1b
    1608:	5b                   	pop    ebx
    1609:	06                   	push   es
    160a:	00 00                	add    BYTE PTR [eax],al
    160c:	01 09                	add    DWORD PTR [ecx],ecx
    160e:	01 5a 05             	add    DWORD PTR [edx+0x5],ebx
    1611:	00 00                	add    BYTE PTR [eax],al
    1613:	02 91 5c 1c 63 6d    	add    dl,BYTE PTR [ecx+0x6d631c5c]
    1619:	64 00 01             	add    BYTE PTR fs:[ecx],al
    161c:	0a 01                	or     al,BYTE PTR [ecx]
    161e:	9f                   	lahf   
    161f:	08 00                	or     BYTE PTR [eax],al
    1621:	00 03                	add    BYTE PTR [ebx],al
    1623:	91                   	xchg   ecx,eax
    1624:	dc 77 1b             	fdiv   QWORD PTR [edi+0x1b]
    1627:	0a 05 00 00 01 0b    	or     al,BYTE PTR ds:0xb010000
    162d:	01 97 01 00 00 02    	add    DWORD PTR [edi+0x2000001],edx
    1633:	91                   	xchg   ecx,eax
    1634:	6c                   	ins    BYTE PTR es:[edi],dx
    1635:	1b 92 04 00 00 01    	sbb    edx,DWORD PTR [edx+0x1000004]
    163b:	0b 01                	or     eax,DWORD PTR [ecx]
    163d:	97                   	xchg   edi,eax
    163e:	01 00                	add    DWORD PTR [eax],eax
    1640:	00 02                	add    BYTE PTR [edx],al
    1642:	91                   	xchg   ecx,eax
    1643:	68 1b bf 04 00       	push   0x4bf1b
    1648:	00 01                	add    BYTE PTR [ecx],al
    164a:	18 01                	sbb    BYTE PTR [ecx],al
    164c:	5a                   	pop    edx
    164d:	00 00                	add    BYTE PTR [eax],al
    164f:	00 02                	add    BYTE PTR [edx],al
    1651:	91                   	xchg   ecx,eax
    1652:	64 13 7d 11          	adc    edi,DWORD PTR fs:[ebp+0x11]
    1656:	00 30                	add    BYTE PTR [eax],dh
    1658:	e5 00                	in     eax,0x0
    165a:	00 00                	add    BYTE PTR [eax],al
    165c:	1c 63                	sbb    al,0x63
    165e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    165f:	74 00                	je     1661 <sysEnter_Vector-0x12e99f>
    1661:	01 1a                	add    DWORD PTR [edx],ebx
    1663:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    1666:	00 00                	add    BYTE PTR [eax],al
    1668:	02 91 60 00 00 06    	add    dl,BYTE PTR [ecx+0x6000060]
    166e:	04 5a                	add    al,0x5a
    1670:	00 00                	add    BYTE PTR [eax],al
    1672:	00 1d 3a 00 00 00    	add    BYTE PTR ds:0x3a,bl
    1678:	b0 08                	mov    al,0x8
    167a:	00 00                	add    BYTE PTR [eax],al
    167c:	1e                   	push   ds
    167d:	8e 01                	mov    es,WORD PTR [ecx]
    167f:	00 00                	add    BYTE PTR [eax],al
    1681:	ff 03                	inc    DWORD PTR [ebx]
    1683:	00 19                	add    BYTE PTR [ecx],bl
    1685:	13 05 00 00 01 29    	adc    eax,DWORD PTR ds:0x29010000
    168b:	01 5a 05             	add    DWORD PTR [edx+0x5],ebx
    168e:	00 00                	add    BYTE PTR [eax],al
    1690:	6a 12                	push   0x12
    1692:	00 30                	add    BYTE PTR [eax],dh
    1694:	23 00                	and    eax,DWORD PTR [eax]
    1696:	00 00                	add    BYTE PTR [eax],al
    1698:	01 9c e9 08 00 00 1a 	add    DWORD PTR [ecx+ebp*8+0x1a000008],ebx
    169f:	3f                   	aas    
    16a0:	06                   	push   es
    16a1:	00 00                	add    BYTE PTR [eax],al
    16a3:	01 29                	add    DWORD PTR [ecx],ebp
    16a5:	01 97 01 00 00 02    	add    DWORD PTR [edi+0x2000001],edx
    16ab:	91                   	xchg   ecx,eax
    16ac:	00 1a                	add    BYTE PTR [edx],bl
    16ae:	3a 06                	cmp    al,BYTE PTR [esi]
    16b0:	00 00                	add    BYTE PTR [eax],al
    16b2:	01 29                	add    DWORD PTR [ecx],ebp
    16b4:	01 99 08 00 00 02    	add    DWORD PTR [ecx+0x2000008],ebx
    16ba:	91                   	xchg   ecx,eax
    16bb:	04 00                	add    al,0x0
    16bd:	1f                   	pop    ds
    16be:	4b                   	dec    ebx
    16bf:	00 00                	add    BYTE PTR [eax],al
    16c1:	00 06                	add    BYTE PTR [esi],al
    16c3:	34 76                	xor    al,0x76
    16c5:	00 00                	add    BYTE PTR [eax],al
    16c7:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    16cd:	30 1f                	xor    BYTE PTR [edi],bl
    16cf:	af                   	scas   eax,DWORD PTR es:[edi]
    16d0:	00 00                	add    BYTE PTR [eax],al
    16d2:	00 06                	add    BYTE PTR [esi],al
    16d4:	35 76 00 00 00       	xor    eax,0x76
    16d9:	05 03 40 4a 00       	add    eax,0x4a4003
    16de:	30 1f                	xor    BYTE PTR [edi],bl
    16e0:	5b                   	pop    ebx
    16e1:	01 00                	add    DWORD PTR [eax],eax
    16e3:	00 06                	add    BYTE PTR [esi],al
    16e5:	36                   	ss
    16e6:	76 00                	jbe    16e8 <sysEnter_Vector-0x12e918>
    16e8:	00 00                	add    BYTE PTR [eax],al
    16ea:	05 03 38 4a 00       	add    eax,0x4a3803
    16ef:	30 1f                	xor    BYTE PTR [edi],bl
    16f1:	54                   	push   esp
    16f2:	00 00                	add    BYTE PTR [eax],al
    16f4:	00 06                	add    BYTE PTR [esi],al
    16f6:	37                   	aaa    
    16f7:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    16f8:	00 00                	add    BYTE PTR [eax],al
    16fa:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    1700:	30 1f                	xor    BYTE PTR [edi],bl
    1702:	28 00                	sub    BYTE PTR [eax],al
    1704:	00 00                	add    BYTE PTR [eax],al
    1706:	07                   	pop    es
    1707:	4c                   	dec    esp
    1708:	5a                   	pop    edx
    1709:	05 00 00 05 03       	add    eax,0x3050000
    170e:	44                   	inc    esp
    170f:	4a                   	dec    edx
    1710:	00 30                	add    BYTE PTR [eax],dh
    1712:	1f                   	pop    ds
    1713:	9f                   	lahf   
    1714:	05 00 00 01 0c       	add    eax,0xc010000
    1719:	be 00 00 00 05       	mov    esi,0x5000000
    171e:	03 50 4a             	add    edx,DWORD PTR [eax+0x4a]
    1721:	00 30                	add    BYTE PTR [eax],dh
    1723:	00 72 03             	add    BYTE PTR [edx+0x3],dh
    1726:	00 00                	add    BYTE PTR [eax],al
    1728:	04 00                	add    al,0x0
    172a:	f9                   	stc    
    172b:	06                   	push   es
    172c:	00 00                	add    BYTE PTR [eax],al
    172e:	04 01                	add    al,0x1
    1730:	f4                   	hlt    
    1731:	00 00                	add    BYTE PTR [eax],al
    1733:	00 0c 40             	add    BYTE PTR [eax+eax*2],cl
    1736:	07                   	pop    es
    1737:	00 00                	add    BYTE PTR [eax],al
    1739:	72 00                	jb     173b <sysEnter_Vector-0x12e8c5>
    173b:	00 00                	add    BYTE PTR [eax],al
    173d:	90                   	nop
    173e:	12 00                	adc    al,BYTE PTR [eax]
    1740:	30 6d 03             	xor    BYTE PTR [ebp+0x3],ch
    1743:	00 00                	add    BYTE PTR [eax],al
    1745:	57                   	push   edi
    1746:	09 00                	or     DWORD PTR [eax],eax
    1748:	00 02                	add    BYTE PTR [edx],al
    174a:	01 06                	add    DWORD PTR [esi],eax
    174c:	5d                   	pop    ebp
    174d:	00 00                	add    BYTE PTR [eax],al
    174f:	00 02                	add    BYTE PTR [edx],al
    1751:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1757:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    175e:	02 08                	add    cl,BYTE PTR [eax]
    1760:	05 00 00 00 00       	add    eax,0x0
    1765:	04 e0                	add    al,0xe0
    1767:	06                   	push   es
    1768:	00 00                	add    BYTE PTR [eax],al
    176a:	02 2e                	add    ch,BYTE PTR [esi]
    176c:	4c                   	dec    esp
    176d:	00 00                	add    BYTE PTR [eax],al
    176f:	00 02                	add    BYTE PTR [edx],al
    1771:	01 08                	add    DWORD PTR [eax],ecx
    1773:	5b                   	pop    ebx
    1774:	00 00                	add    BYTE PTR [eax],al
    1776:	00 02                	add    BYTE PTR [edx],al
    1778:	02 07                	add    al,BYTE PTR [edi]
    177a:	0e                   	push   cs
    177b:	00 00                	add    BYTE PTR [eax],al
    177d:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1780:	00 00                	add    BYTE PTR [eax],al
    1782:	00 02                	add    BYTE PTR [edx],al
    1784:	34 65                	xor    al,0x65
    1786:	00 00                	add    BYTE PTR [eax],al
    1788:	00 02                	add    BYTE PTR [edx],al
    178a:	04 07                	add    al,0x7
    178c:	3e 00 00             	add    BYTE PTR ds:[eax],al
    178f:	00 02                	add    BYTE PTR [edx],al
    1791:	08 07                	or     BYTE PTR [edi],al
    1793:	34 00                	xor    al,0x0
    1795:	00 00                	add    BYTE PTR [eax],al
    1797:	04 9f                	add    al,0x9f
    1799:	04 00                	add    al,0x0
    179b:	00 03                	add    BYTE PTR [ebx],al
    179d:	d8 65 00             	fsub   DWORD PTR [ebp+0x0]
    17a0:	00 00                	add    BYTE PTR [eax],al
    17a2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    17a9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    17ac:	9b                   	fwait
    17ad:	00 00                	add    BYTE PTR [eax],al
    17af:	00 02                	add    BYTE PTR [edx],al
    17b1:	01 06                	add    DWORD PTR [esi],eax
    17b3:	64 00 00             	add    BYTE PTR fs:[eax],al
    17b6:	00 05 f4 06 00 00    	add    BYTE PTR ds:0x6f4,al
    17bc:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    17bf:	d0 00                	rol    BYTE PTR [eax],1
    17c1:	00 00                	add    BYTE PTR [eax],al
    17c3:	06                   	push   es
    17c4:	c9                   	leave  
    17c5:	06                   	push   es
    17c6:	00 00                	add    BYTE PTR [eax],al
    17c8:	04 2e                	add    al,0x2e
    17ca:	5a                   	pop    edx
    17cb:	00 00                	add    BYTE PTR [eax],al
    17cd:	00 00                	add    BYTE PTR [eax],al
    17cf:	07                   	pop    es
    17d0:	6c                   	ins    BYTE PTR es:[edi],dx
    17d1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    17d3:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    17d6:	5a                   	pop    edx
    17d7:	00 00                	add    BYTE PTR [eax],al
    17d9:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    17dc:	fa                   	cli    
    17dd:	06                   	push   es
    17de:	00 00                	add    BYTE PTR [eax],al
    17e0:	04 30                	add    al,0x30
    17e2:	d0 00                	rol    BYTE PTR [eax],1
    17e4:	00 00                	add    BYTE PTR [eax],al
    17e6:	08 06                	or     BYTE PTR [esi],al
    17e8:	53                   	push   ebx
    17e9:	07                   	pop    es
    17ea:	00 00                	add    BYTE PTR [eax],al
    17ec:	04 31                	add    al,0x31
    17ee:	d7                   	xlat   BYTE PTR ds:[ebx]
    17ef:	00 00                	add    BYTE PTR [eax],al
    17f1:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
    17f4:	02 01                	add    al,BYTE PTR [ecx]
    17f6:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
    17fc:	04 93                	add    al,0x93
    17fe:	00 00                	add    BYTE PTR [eax],al
    1800:	00 04 58             	add    BYTE PTR [eax+ebx*2],al
    1803:	07                   	pop    es
    1804:	00 00                	add    BYTE PTR [eax],al
    1806:	04 32                	add    al,0x32
    1808:	93                   	xchg   ebx,eax
    1809:	00 00                	add    BYTE PTR [eax],al
    180b:	00 09                	add    BYTE PTR [ecx],cl
    180d:	17                   	pop    ss
    180e:	03 00                	add    eax,DWORD PTR [eax]
    1810:	00 04 65 00 00 00 06 	add    BYTE PTR [eiz*2+0x6000000],al
    1817:	15 aa 01 00 00       	adc    eax,0x1aa
    181c:	0a 7c 03 00          	or     bh,BYTE PTR [ebx+eax*1+0x0]
    1820:	00 00                	add    BYTE PTR [eax],al
    1822:	0a b4 03 00 00 01 0a 	or     dh,BYTE PTR [ebx+eax*1+0xa010000]
    1829:	73 02                	jae    182d <sysEnter_Vector-0x12e7d3>
    182b:	00 00                	add    BYTE PTR [eax],al
    182d:	02 0a                	add    cl,BYTE PTR [edx]
    182f:	09 03                	or     DWORD PTR [ebx],eax
    1831:	00 00                	add    BYTE PTR [eax],al
    1833:	03 0a                	add    ecx,DWORD PTR [edx]
    1835:	53                   	push   ebx
    1836:	02 00                	add    al,BYTE PTR [eax]
    1838:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
    183b:	ce                   	into   
    183c:	03 00                	add    eax,DWORD PTR [eax]
    183e:	00 05 0a 2d 03 00    	add    BYTE PTR ds:0x32d0a,al
    1844:	00 06                	add    BYTE PTR [esi],al
    1846:	0a 66 02             	or     ah,BYTE PTR [esi+0x2]
    1849:	00 00                	add    BYTE PTR [eax],al
    184b:	07                   	pop    es
    184c:	0a ff                	or     bh,bh
    184e:	03 00                	add    eax,DWORD PTR [eax]
    1850:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    1853:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1854:	03 00                	add    eax,DWORD PTR [eax]
    1856:	00 59 0a             	add    BYTE PTR [ecx+0xa],bl
    1859:	0e                   	push   cs
    185a:	04 00                	add    al,0x0
    185c:	00 61 0a             	add    BYTE PTR [ecx+0xa],ah
    185f:	f5                   	cmc    
    1860:	02 00                	add    al,BYTE PTR [eax]
    1862:	00 97 0b 8c 03 00    	add    BYTE PTR [edi+0x38c0b],dl
    1868:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    186b:	0b 62 03             	or     esp,DWORD PTR [edx+0x3]
    186e:	00 00                	add    BYTE PTR [eax],al
    1870:	64 01 0b             	add    DWORD PTR fs:[ebx],ecx
    1873:	f1                   	icebp  
    1874:	03 00                	add    eax,DWORD PTR [eax]
    1876:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1879:	0b d7                	or     edx,edi
    187b:	02 00                	add    al,BYTE PTR [eax]
    187d:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    1880:	0b 26                	or     esp,DWORD PTR [esi]
    1882:	04 00                	add    al,0x0
    1884:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1887:	0b 3a                	or     edi,DWORD PTR [edx]
    1889:	03 00                	add    eax,DWORD PTR [eax]
    188b:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    188e:	0b ac 02 00 00 69 01 	or     ebp,DWORD PTR [edx+eax*1+0x1690000]
    1895:	0b a3 03 00 00 70    	or     esp,DWORD PTR [ebx+0x70000003]
    189b:	01 0b                	add    DWORD PTR [ebx],ecx
    189d:	e5 02                	in     eax,0x2
    189f:	00 00                	add    BYTE PTR [eax],al
    18a1:	71 01                	jno    18a4 <sysEnter_Vector-0x12e75c>
    18a3:	0b dc                	or     ebx,esp
    18a5:	03 00                	add    eax,DWORD PTR [eax]
    18a7:	00 00                	add    BYTE PTR [eax],al
    18a9:	03 0b                	add    ecx,DWORD PTR [ebx]
    18ab:	47                   	inc    edi
    18ac:	03 00                	add    eax,DWORD PTR [eax]
    18ae:	00 01                	add    BYTE PTR [ecx],al
    18b0:	03 0b                	add    ecx,DWORD PTR [ebx]
    18b2:	bb 02 00 00 02       	mov    ebx,0x2000002
    18b7:	03 0b                	add    ecx,DWORD PTR [ebx]
    18b9:	80 02 00             	add    BYTE PTR [edx],0x0
    18bc:	00 03                	add    BYTE PTR [ebx],al
    18be:	03 0b                	add    ecx,DWORD PTR [ebx]
    18c0:	90                   	nop
    18c1:	02 00                	add    al,BYTE PTR [eax]
    18c3:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    18c6:	0b c7                	or     eax,edi
    18c8:	02 00                	add    al,BYTE PTR [eax]
    18ca:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
    18d0:	07                   	pop    es
    18d1:	39 00                	cmp    DWORD PTR [eax],eax
    18d3:	00 00                	add    BYTE PTR [eax],al
    18d5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    18d8:	e1 00                	loope  18da <sysEnter_Vector-0x12e726>
    18da:	00 00                	add    BYTE PTR [eax],al
    18dc:	0c 04                	or     al,0x4
    18de:	08 04 8c             	or     BYTE PTR [esp+ecx*4],al
    18e1:	00 00                	add    BYTE PTR [eax],al
    18e3:	00 0d 00 07 00 00    	add    BYTE PTR ds:0x700,cl
    18e9:	01 0c 90             	add    DWORD PTR [eax+edx*4],ecx
    18ec:	12 00                	adc    al,BYTE PTR [eax]
    18ee:	30 6c 00 00          	xor    BYTE PTR [eax+eax*1+0x0],ch
    18f2:	00 01                	add    BYTE PTR [ecx],al
    18f4:	9c                   	pushf  
    18f5:	0e                   	push   cs
    18f6:	20 07                	and    BYTE PTR [edi],al
    18f8:	00 00                	add    BYTE PTR [eax],al
    18fa:	01 16                	add    DWORD PTR [esi],edx
    18fc:	5a                   	pop    edx
    18fd:	00 00                	add    BYTE PTR [eax],al
    18ff:	00 fc                	add    ah,bh
    1901:	12 00                	adc    al,BYTE PTR [eax]
    1903:	30 87 00 00 00 01    	xor    BYTE PTR [edi+0x1000000],al
    1909:	9c                   	pushf  
    190a:	07                   	pop    es
    190b:	02 00                	add    al,BYTE PTR [eax]
    190d:	00 0f                	add    BYTE PTR [edi],cl
    190f:	9a 05 00 00 01 16 73 	call   0x7316:0x1000005
    1916:	00 00                	add    BYTE PTR [eax],al
    1918:	00 02                	add    BYTE PTR [edx],al
    191a:	91                   	xchg   ecx,eax
    191b:	00 10                	add    BYTE PTR [eax],dl
    191d:	b2 06                	mov    dl,0x6
    191f:	00 00                	add    BYTE PTR [eax],al
    1921:	01 1a                	add    DWORD PTR [edx],ebx
    1923:	5a                   	pop    edx
    1924:	00 00                	add    BYTE PTR [eax],al
    1926:	00 02                	add    BYTE PTR [edx],al
    1928:	91                   	xchg   ecx,eax
    1929:	74 00                	je     192b <sysEnter_Vector-0x12e6d5>
    192b:	11 4d 07             	adc    DWORD PTR [ebp+0x7],ecx
    192e:	00 00                	add    BYTE PTR [eax],al
    1930:	01 2e                	add    DWORD PTR [esi],ebp
    1932:	83 13 00             	adc    DWORD PTR [ebx],0x0
    1935:	30 39                	xor    BYTE PTR [ecx],bh
    1937:	00 00                	add    BYTE PTR [eax],al
    1939:	00 01                	add    BYTE PTR [ecx],al
    193b:	9c                   	pushf  
    193c:	43                   	inc    ebx
    193d:	02 00                	add    al,BYTE PTR [eax]
    193f:	00 0f                	add    BYTE PTR [edi],cl
    1941:	a9 06 00 00 01       	test   eax,0x1000006
    1946:	2e                   	cs
    1947:	b8 01 00 00 02       	mov    eax,0x2000001
    194c:	91                   	xchg   ecx,eax
    194d:	00 12                	add    BYTE PTR [edx],dl
    194f:	6d                   	ins    DWORD PTR es:[edi],dx
    1950:	70 00                	jo     1952 <sysEnter_Vector-0x12e6ae>
    1952:	01 30                	add    DWORD PTR [eax],esi
    1954:	43                   	inc    ebx
    1955:	02 00                	add    al,BYTE PTR [eax]
    1957:	00 02                	add    BYTE PTR [edx],al
    1959:	91                   	xchg   ecx,eax
    195a:	74 13                	je     196f <sysEnter_Vector-0x12e691>
    195c:	0b 07                	or     eax,DWORD PTR [edi]
    195e:	00 00                	add    BYTE PTR [eax],al
    1960:	01 3a                	add    DWORD PTR [edx],edi
    1962:	ae                   	scas   al,BYTE PTR es:[edi]
    1963:	13 00                	adc    eax,DWORD PTR [eax]
    1965:	30 00                	xor    BYTE PTR [eax],al
    1967:	08 04 dd 00 00 00 14 	or     BYTE PTR [ebx*8+0x14000000],al
    196e:	d0 06                	rol    BYTE PTR [esi],1
    1970:	00 00                	add    BYTE PTR [eax],al
    1972:	01 40 b8             	add    DWORD PTR [eax-0x48],eax
    1975:	01 00                	add    DWORD PTR [eax],eax
    1977:	00 bc 13 00 30 d4 01 	add    BYTE PTR [ebx+edx*1+0x1d43000],bh
    197e:	00 00                	add    BYTE PTR [eax],al
    1980:	01 9c b7 02 00 00 0f 	add    DWORD PTR [edi+esi*4+0xf000002],ebx
    1987:	9a 05 00 00 01 40 73 	call   0x7340:0x1000005
    198e:	00 00                	add    BYTE PTR [eax],al
    1990:	00 02                	add    BYTE PTR [edx],al
    1992:	91                   	xchg   ecx,eax
    1993:	00 10                	add    BYTE PTR [eax],dl
    1995:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
    1998:	00 01                	add    BYTE PTR [ecx],al
    199a:	42                   	inc    edx
    199b:	b8 01 00 00 02       	mov    eax,0x2000001
    19a0:	91                   	xchg   ecx,eax
    19a1:	60                   	pusha  
    19a2:	10 ed                	adc    ch,ch
    19a4:	06                   	push   es
    19a5:	00 00                	add    BYTE PTR [eax],al
    19a7:	01 44 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],eax
    19ab:	00 00                	add    BYTE PTR [eax],al
    19ad:	02 91 6c 10 9c 06    	add    dl,BYTE PTR [ecx+0x69c106c]
    19b3:	00 00                	add    BYTE PTR [eax],al
    19b5:	01 45 5a             	add    DWORD PTR [ebp+0x5a],eax
    19b8:	00 00                	add    BYTE PTR [eax],al
    19ba:	00 02                	add    BYTE PTR [edx],al
    19bc:	91                   	xchg   ecx,eax
    19bd:	68 10 d8 06 00       	push   0x6d810
    19c2:	00 01                	add    BYTE PTR [ecx],al
    19c4:	46                   	inc    esi
    19c5:	43                   	inc    ebx
    19c6:	02 00                	add    al,BYTE PTR [eax]
    19c8:	00 02                	add    BYTE PTR [edx],al
    19ca:	91                   	xchg   ecx,eax
    19cb:	64 10 14 07          	adc    BYTE PTR fs:[edi+eax*1],dl
    19cf:	00 00                	add    BYTE PTR [eax],al
    19d1:	01 47 b7             	add    DWORD PTR [edi-0x49],eax
    19d4:	02 00                	add    al,BYTE PTR [eax]
    19d6:	00 02                	add    BYTE PTR [edx],al
    19d8:	91                   	xchg   ecx,eax
    19d9:	5c                   	pop    esp
    19da:	00 08                	add    BYTE PTR [eax],cl
    19dc:	04 41                	add    al,0x41
    19de:	00 00                	add    BYTE PTR [eax],al
    19e0:	00 14 04             	add    BYTE PTR [esp+eax*1],dl
    19e3:	07                   	pop    es
    19e4:	00 00                	add    BYTE PTR [eax],al
    19e6:	01 67 b8             	add    DWORD PTR [edi-0x48],esp
    19e9:	01 00                	add    DWORD PTR [eax],eax
    19eb:	00 90 15 00 30 20    	add    BYTE PTR [eax+0x20300015],dl
    19f1:	00 00                	add    BYTE PTR [eax],al
    19f3:	00 01                	add    BYTE PTR [ecx],al
    19f5:	9c                   	pushf  
    19f6:	e5 02                	in     eax,0x2
    19f8:	00 00                	add    BYTE PTR [eax],al
    19fa:	0f 9a 05 00 00 01 67 	setp   BYTE PTR ds:0x67010000
    1a01:	73 00                	jae    1a03 <sysEnter_Vector-0x12e5fd>
    1a03:	00 00                	add    BYTE PTR [eax],al
    1a05:	02 91 00 00 15 e8    	add    dl,BYTE PTR [ecx-0x17eb0000]
    1a0b:	06                   	push   es
    1a0c:	00 00                	add    BYTE PTR [eax],al
    1a0e:	01 6c b0 15          	add    DWORD PTR [eax+esi*4+0x15],ebp
    1a12:	00 30                	add    BYTE PTR [eax],dh
    1a14:	1b 00                	sbb    eax,DWORD PTR [eax]
    1a16:	00 00                	add    BYTE PTR [eax],al
    1a18:	01 9c 09 03 00 00 0f 	add    DWORD PTR [ecx+ecx*1+0xf000003],ebx
    1a1f:	a9 06 00 00 01       	test   eax,0x1000006
    1a24:	6c                   	ins    BYTE PTR es:[edi],dx
    1a25:	b8 01 00 00 02       	mov    eax,0x2000001
    1a2a:	91                   	xchg   ecx,eax
    1a2b:	00 00                	add    BYTE PTR [eax],al
    1a2d:	0d ba 06 00 00       	or     eax,0x6ba
    1a32:	01 71 cb             	add    DWORD PTR [ecx-0x35],esi
    1a35:	15 00 30 32 00       	adc    eax,0x323000
    1a3a:	00 00                	add    BYTE PTR [eax],al
    1a3c:	01 9c 16 4b 00 00 00 	add    DWORD PTR [esi+edx*1+0x4b],ebx
    1a43:	04 34                	add    al,0x34
    1a45:	5a                   	pop    edx
    1a46:	00 00                	add    BYTE PTR [eax],al
    1a48:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    1a4e:	30 16                	xor    BYTE PTR [esi],dl
    1a50:	af                   	scas   eax,DWORD PTR es:[edi]
    1a51:	00 00                	add    BYTE PTR [eax],al
    1a53:	00 04 35 5a 00 00 00 	add    BYTE PTR [esi*1+0x5a],al
    1a5a:	05 03 40 4a 00       	add    eax,0x4a4003
    1a5f:	30 16                	xor    BYTE PTR [esi],dl
    1a61:	5b                   	pop    ebx
    1a62:	01 00                	add    DWORD PTR [eax],eax
    1a64:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1a67:	5a                   	pop    edx
    1a68:	00 00                	add    BYTE PTR [eax],al
    1a6a:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    1a70:	30 16                	xor    BYTE PTR [esi],dl
    1a72:	54                   	push   esp
    1a73:	00 00                	add    BYTE PTR [eax],al
    1a75:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1a78:	7e 00                	jle    1a7a <sysEnter_Vector-0x12e586>
    1a7a:	00 00                	add    BYTE PTR [eax],al
    1a7c:	05 03 48 4a 00       	add    eax,0x4a4803
    1a81:	30 16                	xor    BYTE PTR [esi],dl
    1a83:	28 00                	sub    BYTE PTR [eax],al
    1a85:	00 00                	add    BYTE PTR [eax],al
    1a87:	05 4c 6f 03 00       	add    eax,0x36f4c
    1a8c:	00 05 03 44 4a 00    	add    BYTE PTR ds:0x4a4403,al
    1a92:	30 08                	xor    BYTE PTR [eax],cl
    1a94:	04 ba                	add    al,0xba
    1a96:	01 00                	add    DWORD PTR [eax],eax
    1a98:	00 00                	add    BYTE PTR [eax],al
    1a9a:	ea 01 00 00 04 00 5d 	jmp    0x5d00:0x4000001
    1aa1:	08 00                	or     BYTE PTR [eax],al
    1aa3:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1aa6:	f4                   	hlt    
    1aa7:	00 00                	add    BYTE PTR [eax],al
    1aa9:	00 0c 62             	add    BYTE PTR [edx+eiz*2],cl
    1aac:	07                   	pop    es
    1aad:	00 00                	add    BYTE PTR [eax],al
    1aaf:	72 00                	jb     1ab1 <sysEnter_Vector-0x12e54f>
    1ab1:	00 00                	add    BYTE PTR [eax],al
    1ab3:	00 16                	add    BYTE PTR [esi],dl
    1ab5:	00 30                	add    BYTE PTR [eax],dh
    1ab7:	9b                   	fwait
    1ab8:	01 00                	add    DWORD PTR [eax],eax
    1aba:	00 ab 0a 00 00 02    	add    BYTE PTR [ebx+0x200000a],ch
    1ac0:	01 08                	add    DWORD PTR [eax],ecx
    1ac2:	5b                   	pop    ebx
    1ac3:	00 00                	add    BYTE PTR [eax],al
    1ac5:	00 02                	add    BYTE PTR [edx],al
    1ac7:	02 07                	add    al,BYTE PTR [edi]
    1ac9:	0e                   	push   cs
    1aca:	00 00                	add    BYTE PTR [eax],al
    1acc:	00 02                	add    BYTE PTR [edx],al
    1ace:	04 07                	add    al,0x7
    1ad0:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1ad3:	00 02                	add    BYTE PTR [edx],al
    1ad5:	04 07                	add    al,0x7
    1ad7:	39 00                	cmp    DWORD PTR [eax],eax
    1ad9:	00 00                	add    BYTE PTR [eax],al
    1adb:	02 01                	add    al,BYTE PTR [ecx]
    1add:	06                   	push   es
    1ade:	5d                   	pop    ebp
    1adf:	00 00                	add    BYTE PTR [eax],al
    1ae1:	00 02                	add    BYTE PTR [edx],al
    1ae3:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1ae9:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1af0:	02 08                	add    cl,BYTE PTR [eax]
    1af2:	05 00 00 00 00       	add    eax,0x0
    1af7:	02 08                	add    cl,BYTE PTR [eax]
    1af9:	07                   	pop    es
    1afa:	34 00                	xor    al,0x0
    1afc:	00 00                	add    BYTE PTR [eax],al
    1afe:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1b05:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1b08:	e1 00                	loope  1b0a <sysEnter_Vector-0x12e4f6>
    1b0a:	00 00                	add    BYTE PTR [eax],al
    1b0c:	04 04                	add    al,0x4
    1b0e:	05 04 7a 00 00       	add    eax,0x7a04
    1b13:	00 02                	add    BYTE PTR [edx],al
    1b15:	01 06                	add    DWORD PTR [esi],eax
    1b17:	64 00 00             	add    BYTE PTR fs:[eax],al
    1b1a:	00 06                	add    BYTE PTR [esi],al
    1b1c:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    1b22:	33 00                	xor    eax,DWORD PTR [eax]
    1b24:	00 00                	add    BYTE PTR [eax],al
    1b26:	05 04 92 00 00       	add    eax,0x9204
    1b2b:	00 07                	add    BYTE PTR [edi],al
    1b2d:	7a 00                	jp     1b2f <sysEnter_Vector-0x12e4d1>
    1b2f:	00 00                	add    BYTE PTR [eax],al
    1b31:	06                   	push   es
    1b32:	9f                   	lahf   
    1b33:	04 00                	add    al,0x0
    1b35:	00 03                	add    BYTE PTR [ebx],al
    1b37:	d8 33                	fdiv   DWORD PTR [ebx]
    1b39:	00 00                	add    BYTE PTR [eax],al
    1b3b:	00 02                	add    BYTE PTR [edx],al
    1b3d:	0c 04                	or     al,0x4
    1b3f:	9b                   	fwait
    1b40:	00 00                	add    BYTE PTR [eax],al
    1b42:	00 02                	add    BYTE PTR [edx],al
    1b44:	01 02                	add    DWORD PTR [edx],eax
    1b46:	95                   	xchg   ebp,eax
    1b47:	00 00                	add    BYTE PTR [eax],al
    1b49:	00 08                	add    BYTE PTR [eax],cl
    1b4b:	74 07                	je     1b54 <sysEnter_Vector-0x12e4ac>
    1b4d:	00 00                	add    BYTE PTR [eax],al
    1b4f:	01 0a                	add    DWORD PTR [edx],ecx
    1b51:	72 00                	jb     1b53 <sysEnter_Vector-0x12e4ad>
    1b53:	00 00                	add    BYTE PTR [eax],al
    1b55:	00 16                	add    BYTE PTR [esi],dl
    1b57:	00 30                	add    BYTE PTR [eax],dh
    1b59:	9b                   	fwait
    1b5a:	01 00                	add    DWORD PTR [eax],eax
    1b5c:	00 01                	add    BYTE PTR [ecx],al
    1b5e:	9c                   	pushf  
    1b5f:	7a 01                	jp     1b62 <sysEnter_Vector-0x12e49e>
    1b61:	00 00                	add    BYTE PTR [eax],al
    1b63:	09 6f 07             	or     DWORD PTR [edi+0x7],ebp
    1b66:	00 00                	add    BYTE PTR [eax],al
    1b68:	01 0a                	add    DWORD PTR [edx],ecx
    1b6a:	72 00                	jb     1b6c <sysEnter_Vector-0x12e494>
    1b6c:	00 00                	add    BYTE PTR [eax],al
    1b6e:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    1b74:	63 00                	arpl   WORD PTR [eax],ax
    1b76:	01 0a                	add    DWORD PTR [edx],ecx
    1b78:	7a 01                	jp     1b7b <sysEnter_Vector-0x12e485>
    1b7a:	00 00                	add    BYTE PTR [eax],al
    1b7c:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    1b82:	01 0a                	add    DWORD PTR [edx],ecx
    1b84:	97                   	xchg   edi,eax
    1b85:	00 00                	add    BYTE PTR [eax],al
    1b87:	00 02                	add    BYTE PTR [edx],al
    1b89:	91                   	xchg   ecx,eax
    1b8a:	08 0b                	or     BYTE PTR [ebx],cl
    1b8c:	64                   	fs
    1b8d:	77 00                	ja     1b8f <sysEnter_Vector-0x12e471>
    1b8f:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    1b92:	00 00                	add    BYTE PTR [eax],al
    1b94:	00 02                	add    BYTE PTR [edx],al
    1b96:	91                   	xchg   ecx,eax
    1b97:	5e                   	pop    esi
    1b98:	0b 64 64 00          	or     esp,DWORD PTR [esp+eiz*2+0x0]
    1b9c:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    1b9f:	00 00                	add    BYTE PTR [eax],al
    1ba1:	00 02                	add    BYTE PTR [edx],al
    1ba3:	91                   	xchg   ecx,eax
    1ba4:	5f                   	pop    edi
    1ba5:	0c 32                	or     al,0x32
    1ba7:	16                   	push   ss
    1ba8:	00 30                	add    BYTE PTR [eax],dh
    1baa:	7d 00                	jge    1bac <sysEnter_Vector-0x12e454>
    1bac:	00 00                	add    BYTE PTR [eax],al
    1bae:	31 01                	xor    DWORD PTR [ecx],eax
    1bb0:	00 00                	add    BYTE PTR [eax],al
    1bb2:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    1bb5:	01 13                	add    DWORD PTR [ebx],edx
    1bb7:	81 01 00 00 02 91    	add    DWORD PTR [ecx],0x91020000
    1bbd:	74 0b                	je     1bca <sysEnter_Vector-0x12e436>
    1bbf:	74 00                	je     1bc1 <sysEnter_Vector-0x12e43f>
    1bc1:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    1bc4:	01 00                	add    DWORD PTR [eax],eax
    1bc6:	00 02                	add    BYTE PTR [edx],al
    1bc8:	91                   	xchg   ecx,eax
    1bc9:	70 00                	jo     1bcb <sysEnter_Vector-0x12e435>
    1bcb:	0c b5                	or     al,0xb5
    1bcd:	16                   	push   ss
    1bce:	00 30                	add    BYTE PTR [eax],dh
    1bd0:	79 00                	jns    1bd2 <sysEnter_Vector-0x12e42e>
    1bd2:	00 00                	add    BYTE PTR [eax],al
    1bd4:	57                   	push   edi
    1bd5:	01 00                	add    DWORD PTR [eax],eax
    1bd7:	00 0b                	add    BYTE PTR [ebx],cl
    1bd9:	66                   	data16
    1bda:	00 01                	add    BYTE PTR [ecx],al
    1bdc:	23 81 01 00 00 02    	and    eax,DWORD PTR [ecx+0x2000001]
    1be2:	91                   	xchg   ecx,eax
    1be3:	6c                   	ins    BYTE PTR es:[edi],dx
    1be4:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    1be8:	24 8c                	and    al,0x8c
    1bea:	01 00                	add    DWORD PTR [eax],eax
    1bec:	00 02                	add    BYTE PTR [edx],al
    1bee:	91                   	xchg   ecx,eax
    1bef:	68 00 0d 2e 17       	push   0x172e0d00
    1bf4:	00 30                	add    BYTE PTR [eax],dh
    1bf6:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    1bf9:	00 0b                	add    BYTE PTR [ebx],cl
    1bfb:	66                   	data16
    1bfc:	00 01                	add    BYTE PTR [ecx],al
    1bfe:	32 8c 00 00 00 02 91 	xor    cl,BYTE PTR [eax+eax*1-0x6efe0000]
    1c05:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    1c0a:	33 74 00 00          	xor    esi,DWORD PTR [eax+eax*1+0x0]
    1c0e:	00 02                	add    BYTE PTR [edx],al
    1c10:	91                   	xchg   ecx,eax
    1c11:	60                   	pusha  
    1c12:	00 00                	add    BYTE PTR [eax],al
    1c14:	05 04 80 01 00       	add    eax,0x18004
    1c19:	00 0e                	add    BYTE PTR [esi],cl
    1c1b:	05 04 87 01 00       	add    eax,0x18704
    1c20:	00 07                	add    BYTE PTR [edi],al
    1c22:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    1c28:	81 00 00 00 0f 4b    	add    DWORD PTR [eax],0x4b0f0000
    1c2e:	00 00                	add    BYTE PTR [eax],al
    1c30:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1c33:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1c39:	3c 4a                	cmp    al,0x4a
    1c3b:	00 30                	add    BYTE PTR [eax],dh
    1c3d:	0f af 00             	imul   eax,DWORD PTR [eax]
    1c40:	00 00                	add    BYTE PTR [eax],al
    1c42:	04 35                	add    al,0x35
    1c44:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1c4a:	40                   	inc    eax
    1c4b:	4a                   	dec    edx
    1c4c:	00 30                	add    BYTE PTR [eax],dh
    1c4e:	0f 5b 01             	cvtdq2ps xmm0,XMMWORD PTR [ecx]
    1c51:	00 00                	add    BYTE PTR [eax],al
    1c53:	04 36                	add    al,0x36
    1c55:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1c5b:	38 4a 00             	cmp    BYTE PTR [edx+0x0],cl
    1c5e:	30 0f                	xor    BYTE PTR [edi],cl
    1c60:	54                   	push   esp
    1c61:	00 00                	add    BYTE PTR [eax],al
    1c63:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1c66:	64 00 00             	add    BYTE PTR fs:[eax],al
    1c69:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    1c6f:	30 0f                	xor    BYTE PTR [edi],cl
    1c71:	28 00                	sub    BYTE PTR [eax],al
    1c73:	00 00                	add    BYTE PTR [eax],al
    1c75:	05 4c e7 01 00       	add    eax,0x1e74c
    1c7a:	00 05 03 44 4a 00    	add    BYTE PTR ds:0x4a4403,al
    1c80:	30 05 04 74 00 00    	xor    BYTE PTR ds:0x7404,al
    1c86:	00 00                	add    BYTE PTR [eax],al
    1c88:	eb 01                	jmp    1c8b <sysEnter_Vector-0x12e375>
    1c8a:	00 00                	add    BYTE PTR [eax],al
    1c8c:	04 00                	add    al,0x0
    1c8e:	1e                   	push   ds
    1c8f:	09 00                	or     DWORD PTR [eax],eax
    1c91:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1c94:	f4                   	hlt    
    1c95:	00 00                	add    BYTE PTR [eax],al
    1c97:	00 0c 87             	add    BYTE PTR [edi+eax*4],cl
    1c9a:	07                   	pop    es
    1c9b:	00 00                	add    BYTE PTR [eax],al
    1c9d:	72 00                	jb     1c9f <sysEnter_Vector-0x12e361>
    1c9f:	00 00                	add    BYTE PTR [eax],al
    1ca1:	9c                   	pushf  
    1ca2:	17                   	pop    ss
    1ca3:	00 30                	add    BYTE PTR [eax],dh
    1ca5:	e7 00                	out    0x0,eax
    1ca7:	00 00                	add    BYTE PTR [eax],al
    1ca9:	92                   	xchg   edx,eax
    1caa:	0b 00                	or     eax,DWORD PTR [eax]
    1cac:	00 02                	add    BYTE PTR [edx],al
    1cae:	01 06                	add    DWORD PTR [esi],eax
    1cb0:	64 00 00             	add    BYTE PTR fs:[eax],al
    1cb3:	00 02                	add    BYTE PTR [edx],al
    1cb5:	01 06                	add    DWORD PTR [esi],eax
    1cb7:	5d                   	pop    ebp
    1cb8:	00 00                	add    BYTE PTR [eax],al
    1cba:	00 02                	add    BYTE PTR [edx],al
    1cbc:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1cc2:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1cc9:	02 08                	add    cl,BYTE PTR [eax]
    1ccb:	05 00 00 00 00       	add    eax,0x0
    1cd0:	04 e0                	add    al,0xe0
    1cd2:	06                   	push   es
    1cd3:	00 00                	add    BYTE PTR [eax],al
    1cd5:	02 2e                	add    ch,BYTE PTR [esi]
    1cd7:	53                   	push   ebx
    1cd8:	00 00                	add    BYTE PTR [eax],al
    1cda:	00 02                	add    BYTE PTR [edx],al
    1cdc:	01 08                	add    DWORD PTR [eax],ecx
    1cde:	5b                   	pop    ebx
    1cdf:	00 00                	add    BYTE PTR [eax],al
    1ce1:	00 04 a1             	add    BYTE PTR [ecx+eiz*4],al
    1ce4:	07                   	pop    es
    1ce5:	00 00                	add    BYTE PTR [eax],al
    1ce7:	02 31                	add    dh,BYTE PTR [ecx]
    1ce9:	65 00 00             	add    BYTE PTR gs:[eax],al
    1cec:	00 02                	add    BYTE PTR [edx],al
    1cee:	02 07                	add    al,BYTE PTR [edi]
    1cf0:	0e                   	push   cs
    1cf1:	00 00                	add    BYTE PTR [eax],al
    1cf3:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1cf6:	00 00                	add    BYTE PTR [eax],al
    1cf8:	00 02                	add    BYTE PTR [edx],al
    1cfa:	34 77                	xor    al,0x77
    1cfc:	00 00                	add    BYTE PTR [eax],al
    1cfe:	00 02                	add    BYTE PTR [edx],al
    1d00:	04 07                	add    al,0x7
    1d02:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1d05:	00 02                	add    BYTE PTR [edx],al
    1d07:	08 07                	or     BYTE PTR [edi],al
    1d09:	34 00                	xor    al,0x0
    1d0b:	00 00                	add    BYTE PTR [eax],al
    1d0d:	04 9f                	add    al,0x9f
    1d0f:	04 00                	add    al,0x0
    1d11:	00 03                	add    BYTE PTR [ebx],al
    1d13:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    1d16:	00 00                	add    BYTE PTR [eax],al
    1d18:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1d1f:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1d22:	9b                   	fwait
    1d23:	00 00                	add    BYTE PTR [eax],al
    1d25:	00 02                	add    BYTE PTR [edx],al
    1d27:	01 02                	add    DWORD PTR [edx],eax
    1d29:	95                   	xchg   ebp,eax
    1d2a:	00 00                	add    BYTE PTR [eax],al
    1d2c:	00 02                	add    BYTE PTR [edx],al
    1d2e:	04 07                	add    al,0x7
    1d30:	39 00                	cmp    DWORD PTR [eax],eax
    1d32:	00 00                	add    BYTE PTR [eax],al
    1d34:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1d37:	e1 00                	loope  1d39 <sysEnter_Vector-0x12e2c7>
    1d39:	00 00                	add    BYTE PTR [eax],al
    1d3b:	05 04 06 04 25       	add    eax,0x25040604
    1d40:	00 00                	add    BYTE PTR [eax],al
    1d42:	00 07                	add    BYTE PTR [edi],al
    1d44:	99                   	cdq    
    1d45:	07                   	pop    es
    1d46:	00 00                	add    BYTE PTR [eax],al
    1d48:	01 08                	add    DWORD PTR [eax],ecx
    1d4a:	b3 00                	mov    bl,0x0
    1d4c:	00 00                	add    BYTE PTR [eax],al
    1d4e:	9c                   	pushf  
    1d4f:	17                   	pop    ss
    1d50:	00 30                	add    BYTE PTR [eax],dh
    1d52:	c7 00 00 00 01 9c    	mov    DWORD PTR [eax],0x9c010000
    1d58:	3e 01 00             	add    DWORD PTR ds:[eax],eax
    1d5b:	00 08                	add    BYTE PTR [eax],cl
    1d5d:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1d60:	01 08                	add    DWORD PTR [eax],ecx
    1d62:	b3 00                	mov    bl,0x0
    1d64:	00 00                	add    BYTE PTR [eax],al
    1d66:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1d6c:	6c                   	ins    BYTE PTR es:[edi],dx
    1d6d:	00 01                	add    BYTE PTR [ecx],al
    1d6f:	08 3a                	or     BYTE PTR [edx],bh
    1d71:	00 00                	add    BYTE PTR [eax],al
    1d73:	00 02                	add    BYTE PTR [edx],al
    1d75:	91                   	xchg   ecx,eax
    1d76:	04 08                	add    al,0x8
    1d78:	6c                   	ins    BYTE PTR es:[edi],dx
    1d79:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1d7b:	00 01                	add    BYTE PTR [ecx],al
    1d7d:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    1d83:	91                   	xchg   ecx,eax
    1d84:	08 09                	or     BYTE PTR [ecx],cl
    1d86:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1d89:	0a 3e                	or     bh,BYTE PTR [esi]
    1d8b:	01 00                	add    DWORD PTR [eax],eax
    1d8d:	00 02                	add    BYTE PTR [edx],al
    1d8f:	91                   	xchg   ecx,eax
    1d90:	74 09                	je     1d9b <sysEnter_Vector-0x12e265>
    1d92:	65 00 01             	add    BYTE PTR gs:[ecx],al
    1d95:	0b 44 01 00          	or     eax,DWORD PTR [ecx+eax*1+0x0]
    1d99:	00 02                	add    BYTE PTR [edx],al
    1d9b:	91                   	xchg   ecx,eax
    1d9c:	70 0a                	jo     1da8 <sysEnter_Vector-0x12e258>
    1d9e:	7b 07                	jnp    1da7 <sysEnter_Vector-0x12e259>
    1da0:	00 00                	add    BYTE PTR [eax],al
    1da2:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    1da5:	00 00                	add    BYTE PTR [eax],al
    1da7:	00 02                	add    BYTE PTR [edx],al
    1da9:	91                   	xchg   ecx,eax
    1daa:	6a 09                	push   0x9
    1dac:	66                   	data16
    1dad:	00 01                	add    BYTE PTR [ecx],al
    1daf:	0d 4a 01 00 00       	or     eax,0x14a
    1db4:	02 91 6c 0a 94 07    	add    dl,BYTE PTR [ecx+0x7940a6c]
    1dba:	00 00                	add    BYTE PTR [eax],al
    1dbc:	01 0e                	add    DWORD PTR [esi],ecx
    1dbe:	6c                   	ins    BYTE PTR es:[edi],dx
    1dbf:	00 00                	add    BYTE PTR [eax],al
    1dc1:	00 02                	add    BYTE PTR [edx],al
    1dc3:	91                   	xchg   ecx,eax
    1dc4:	64 00 06             	add    BYTE PTR fs:[esi],al
    1dc7:	04 48                	add    al,0x48
    1dc9:	00 00                	add    BYTE PTR [eax],al
    1dcb:	00 06                	add    BYTE PTR [esi],al
    1dcd:	04 5a                	add    al,0x5a
    1dcf:	00 00                	add    BYTE PTR [eax],al
    1dd1:	00 06                	add    BYTE PTR [esi],al
    1dd3:	04 6c                	add    al,0x6c
    1dd5:	00 00                	add    BYTE PTR [eax],al
    1dd7:	00 0b                	add    BYTE PTR [ebx],cl
    1dd9:	80 07 00             	add    BYTE PTR [edi],0x0
    1ddc:	00 01                	add    BYTE PTR [ecx],al
    1dde:	1f                   	pop    ds
    1ddf:	b3 00                	mov    bl,0x0
    1de1:	00 00                	add    BYTE PTR [eax],al
    1de3:	63 18                	arpl   WORD PTR [eax],bx
    1de5:	00 30                	add    BYTE PTR [eax],dh
    1de7:	20 00                	and    BYTE PTR [eax],al
    1de9:	00 00                	add    BYTE PTR [eax],al
    1deb:	01 9c 93 01 00 00 08 	add    DWORD PTR [ebx+edx*4+0x8000001],ebx
    1df2:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1df5:	01 1f                	add    DWORD PTR [edi],ebx
    1df7:	b3 00                	mov    bl,0x0
    1df9:	00 00                	add    BYTE PTR [eax],al
    1dfb:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1e01:	6c                   	ins    BYTE PTR es:[edi],dx
    1e02:	00 01                	add    BYTE PTR [ecx],al
    1e04:	1f                   	pop    ds
    1e05:	3a 00                	cmp    al,BYTE PTR [eax]
    1e07:	00 00                	add    BYTE PTR [eax],al
    1e09:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    1e0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1e10:	00 01                	add    BYTE PTR [ecx],al
    1e12:	1f                   	pop    ds
    1e13:	85 00                	test   DWORD PTR [eax],eax
    1e15:	00 00                	add    BYTE PTR [eax],al
    1e17:	02 91 08 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0008]
    1e1d:	00 00                	add    BYTE PTR [eax],al
    1e1f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1e22:	6c                   	ins    BYTE PTR es:[edi],dx
    1e23:	00 00                	add    BYTE PTR [eax],al
    1e25:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    1e2b:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    1e2e:	00 00                	add    BYTE PTR [eax],al
    1e30:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    1e37:	05 03 40 4a 00       	add    eax,0x4a4003
    1e3c:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    1e3f:	01 00                	add    DWORD PTR [eax],eax
    1e41:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1e44:	6c                   	ins    BYTE PTR es:[edi],dx
    1e45:	00 00                	add    BYTE PTR [eax],al
    1e47:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    1e4d:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    1e50:	00 00                	add    BYTE PTR [eax],al
    1e52:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1e55:	90                   	nop
    1e56:	00 00                	add    BYTE PTR [eax],al
    1e58:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    1e5e:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    1e61:	00 00                	add    BYTE PTR [eax],al
    1e63:	00 05 4c e8 01 00    	add    BYTE PTR ds:0x1e84c,al
    1e69:	00 05 03 44 4a 00    	add    BYTE PTR ds:0x4a4403,al
    1e6f:	30 06                	xor    BYTE PTR [esi],al
    1e71:	04 b5                	add    al,0xb5
    1e73:	00 00                	add    BYTE PTR [eax],al
    1e75:	00 00                	add    BYTE PTR [eax],al
    1e77:	e8 00 00 00 04       	call   4001e7c <sysEnter_Vector+0x3ed1e7c>
    1e7c:	00 db                	add    bl,bl
    1e7e:	09 00                	or     DWORD PTR [eax],eax
    1e80:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1e83:	f4                   	hlt    
    1e84:	00 00                	add    BYTE PTR [eax],al
    1e86:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
    1e89:	07                   	pop    es
    1e8a:	00 00                	add    BYTE PTR [eax],al
    1e8c:	72 00                	jb     1e8e <sysEnter_Vector-0x12e172>
    1e8e:	00 00                	add    BYTE PTR [eax],al
    1e90:	60                   	pusha  
    1e91:	0c 00                	or     al,0x0
    1e93:	00 02                	add    BYTE PTR [edx],al
    1e95:	01 06                	add    DWORD PTR [esi],eax
    1e97:	64 00 00             	add    BYTE PTR fs:[eax],al
    1e9a:	00 02                	add    BYTE PTR [edx],al
    1e9c:	01 06                	add    DWORD PTR [esi],eax
    1e9e:	5d                   	pop    ebp
    1e9f:	00 00                	add    BYTE PTR [eax],al
    1ea1:	00 02                	add    BYTE PTR [edx],al
    1ea3:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1ea9:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1eb0:	02 08                	add    cl,BYTE PTR [eax]
    1eb2:	05 00 00 00 00       	add    eax,0x0
    1eb7:	02 01                	add    al,BYTE PTR [ecx]
    1eb9:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1ebc:	00 00                	add    BYTE PTR [eax],al
    1ebe:	02 02                	add    al,BYTE PTR [edx]
    1ec0:	07                   	pop    es
    1ec1:	0e                   	push   cs
    1ec2:	00 00                	add    BYTE PTR [eax],al
    1ec4:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1ec7:	00 00                	add    BYTE PTR [eax],al
    1ec9:	00 03                	add    BYTE PTR [ebx],al
    1ecb:	34 59                	xor    al,0x59
    1ecd:	00 00                	add    BYTE PTR [eax],al
    1ecf:	00 02                	add    BYTE PTR [edx],al
    1ed1:	04 07                	add    al,0x7
    1ed3:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1ed6:	00 02                	add    BYTE PTR [edx],al
    1ed8:	08 07                	or     BYTE PTR [edi],al
    1eda:	34 00                	xor    al,0x0
    1edc:	00 00                	add    BYTE PTR [eax],al
    1ede:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1ee5:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1ee8:	9b                   	fwait
    1ee9:	00 00                	add    BYTE PTR [eax],al
    1eeb:	00 02                	add    BYTE PTR [edx],al
    1eed:	01 02                	add    DWORD PTR [edx],eax
    1eef:	95                   	xchg   ebp,eax
    1ef0:	00 00                	add    BYTE PTR [eax],al
    1ef2:	00 02                	add    BYTE PTR [edx],al
    1ef4:	04 07                	add    al,0x7
    1ef6:	39 00                	cmp    DWORD PTR [eax],eax
    1ef8:	00 00                	add    BYTE PTR [eax],al
    1efa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1efd:	e1 00                	loope  1eff <sysEnter_Vector-0x12e101>
    1eff:	00 00                	add    BYTE PTR [eax],al
    1f01:	05 04 1d 00 00       	add    eax,0x1d04
    1f06:	00 06                	add    BYTE PTR [esi],al
    1f08:	4b                   	dec    ebx
    1f09:	00 00                	add    BYTE PTR [eax],al
    1f0b:	00 01                	add    BYTE PTR [ecx],al
    1f0d:	34 4e                	xor    al,0x4e
    1f0f:	00 00                	add    BYTE PTR [eax],al
    1f11:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    1f17:	30 06                	xor    BYTE PTR [esi],al
    1f19:	af                   	scas   eax,DWORD PTR es:[edi]
    1f1a:	00 00                	add    BYTE PTR [eax],al
    1f1c:	00 01                	add    BYTE PTR [ecx],al
    1f1e:	35 4e 00 00 00       	xor    eax,0x4e
    1f23:	05 03 40 4a 00       	add    eax,0x4a4003
    1f28:	30 06                	xor    BYTE PTR [esi],al
    1f2a:	5b                   	pop    ebx
    1f2b:	01 00                	add    DWORD PTR [eax],eax
    1f2d:	00 01                	add    BYTE PTR [ecx],al
    1f2f:	36                   	ss
    1f30:	4e                   	dec    esi
    1f31:	00 00                	add    BYTE PTR [eax],al
    1f33:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    1f39:	30 06                	xor    BYTE PTR [esi],al
    1f3b:	54                   	push   esp
    1f3c:	00 00                	add    BYTE PTR [eax],al
    1f3e:	00 01                	add    BYTE PTR [ecx],al
    1f40:	37                   	aaa    
    1f41:	67 00 00             	add    BYTE PTR [bx+si],al
    1f44:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    1f4a:	30 06                	xor    BYTE PTR [esi],al
    1f4c:	28 00                	sub    BYTE PTR [eax],al
    1f4e:	00 00                	add    BYTE PTR [eax],al
    1f50:	02 4c e5 00          	add    cl,BYTE PTR [ebp+eiz*8+0x0]
    1f54:	00 00                	add    BYTE PTR [eax],al
    1f56:	05 03 44 4a 00       	add    eax,0x4a4403
    1f5b:	30 05 04 8a 00 00    	xor    BYTE PTR ds:0x8a04,al
    1f61:	00 00                	add    BYTE PTR [eax],al
    1f63:	eb 01                	jmp    1f66 <sysEnter_Vector-0x12e09a>
    1f65:	00 00                	add    BYTE PTR [eax],al
    1f67:	04 00                	add    al,0x0
    1f69:	28 0a                	sub    BYTE PTR [edx],cl
    1f6b:	00 00                	add    BYTE PTR [eax],al
    1f6d:	04 01                	add    al,0x1
    1f6f:	f4                   	hlt    
    1f70:	00 00                	add    BYTE PTR [eax],al
    1f72:	00 0c b5 07 00 00 72 	add    BYTE PTR [esi*4+0x72000007],cl
    1f79:	00 00                	add    BYTE PTR [eax],al
    1f7b:	00 84 18 00 30 29 00 	add    BYTE PTR [eax+ebx*1+0x293000],al
    1f82:	00 00                	add    BYTE PTR [eax],al
    1f84:	ee                   	out    dx,al
    1f85:	0c 00                	or     al,0x0
    1f87:	00 02                	add    BYTE PTR [edx],al
    1f89:	01 06                	add    DWORD PTR [esi],eax
    1f8b:	64 00 00             	add    BYTE PTR fs:[eax],al
    1f8e:	00 02                	add    BYTE PTR [edx],al
    1f90:	01 06                	add    DWORD PTR [esi],eax
    1f92:	5d                   	pop    ebp
    1f93:	00 00                	add    BYTE PTR [eax],al
    1f95:	00 02                	add    BYTE PTR [edx],al
    1f97:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1f9d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1fa4:	02 08                	add    cl,BYTE PTR [eax]
    1fa6:	05 00 00 00 00       	add    eax,0x0
    1fab:	02 01                	add    al,BYTE PTR [ecx]
    1fad:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1fb0:	00 00                	add    BYTE PTR [eax],al
    1fb2:	02 02                	add    al,BYTE PTR [edx]
    1fb4:	07                   	pop    es
    1fb5:	0e                   	push   cs
    1fb6:	00 00                	add    BYTE PTR [eax],al
    1fb8:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1fbb:	00 00                	add    BYTE PTR [eax],al
    1fbd:	00 02                	add    BYTE PTR [edx],al
    1fbf:	34 61                	xor    al,0x61
    1fc1:	00 00                	add    BYTE PTR [eax],al
    1fc3:	00 02                	add    BYTE PTR [edx],al
    1fc5:	04 07                	add    al,0x7
    1fc7:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1fca:	00 02                	add    BYTE PTR [edx],al
    1fcc:	08 07                	or     BYTE PTR [edi],al
    1fce:	34 00                	xor    al,0x0
    1fd0:	00 00                	add    BYTE PTR [eax],al
    1fd2:	04 a6                	add    al,0xa6
    1fd4:	04 00                	add    al,0x0
    1fd6:	00 02                	add    BYTE PTR [edx],al
    1fd8:	56                   	push   esi
    1fd9:	61                   	popa   
    1fda:	00 00                	add    BYTE PTR [eax],al
    1fdc:	00 02                	add    BYTE PTR [edx],al
    1fde:	04 05                	add    al,0x5
    1fe0:	05 00 00 00 02       	add    eax,0x2000000
    1fe5:	0c 04                	or     al,0x4
    1fe7:	9b                   	fwait
    1fe8:	00 00                	add    BYTE PTR [eax],al
    1fea:	00 02                	add    BYTE PTR [edx],al
    1fec:	01 02                	add    DWORD PTR [edx],eax
    1fee:	95                   	xchg   ebp,eax
    1fef:	00 00                	add    BYTE PTR [eax],al
    1ff1:	00 05 17 03 00 00    	add    BYTE PTR ds:0x317,al
    1ff7:	04 61                	add    al,0x61
    1ff9:	00 00                	add    BYTE PTR [eax],al
    1ffb:	00 05 15 51 01 00    	add    BYTE PTR ds:0x15115,al
    2001:	00 06                	add    BYTE PTR [esi],al
    2003:	7c 03                	jl     2008 <sysEnter_Vector-0x12dff8>
    2005:	00 00                	add    BYTE PTR [eax],al
    2007:	00 06                	add    BYTE PTR [esi],al
    2009:	b4 03                	mov    ah,0x3
    200b:	00 00                	add    BYTE PTR [eax],al
    200d:	01 06                	add    DWORD PTR [esi],eax
    200f:	73 02                	jae    2013 <sysEnter_Vector-0x12dfed>
    2011:	00 00                	add    BYTE PTR [eax],al
    2013:	02 06                	add    al,BYTE PTR [esi]
    2015:	09 03                	or     DWORD PTR [ebx],eax
    2017:	00 00                	add    BYTE PTR [eax],al
    2019:	03 06                	add    eax,DWORD PTR [esi]
    201b:	53                   	push   ebx
    201c:	02 00                	add    al,BYTE PTR [eax]
    201e:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    2021:	ce                   	into   
    2022:	03 00                	add    eax,DWORD PTR [eax]
    2024:	00 05 06 2d 03 00    	add    BYTE PTR ds:0x32d06,al
    202a:	00 06                	add    BYTE PTR [esi],al
    202c:	06                   	push   es
    202d:	66                   	data16
    202e:	02 00                	add    al,BYTE PTR [eax]
    2030:	00 07                	add    BYTE PTR [edi],al
    2032:	06                   	push   es
    2033:	ff 03                	inc    DWORD PTR [ebx]
    2035:	00 00                	add    BYTE PTR [eax],al
    2037:	4f                   	dec    edi
    2038:	06                   	push   es
    2039:	6f                   	outs   dx,DWORD PTR ds:[esi]
    203a:	03 00                	add    eax,DWORD PTR [eax]
    203c:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    203f:	0e                   	push   cs
    2040:	04 00                	add    al,0x0
    2042:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    2045:	f5                   	cmc    
    2046:	02 00                	add    al,BYTE PTR [eax]
    2048:	00 97 07 8c 03 00    	add    BYTE PTR [edi+0x38c07],dl
    204e:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2051:	07                   	pop    es
    2052:	62 03                	bound  eax,QWORD PTR [ebx]
    2054:	00 00                	add    BYTE PTR [eax],al
    2056:	64 01 07             	add    DWORD PTR fs:[edi],eax
    2059:	f1                   	icebp  
    205a:	03 00                	add    eax,DWORD PTR [eax]
    205c:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    205f:	07                   	pop    es
    2060:	d7                   	xlat   BYTE PTR ds:[ebx]
    2061:	02 00                	add    al,BYTE PTR [eax]
    2063:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    2066:	07                   	pop    es
    2067:	26                   	es
    2068:	04 00                	add    al,0x0
    206a:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    206d:	07                   	pop    es
    206e:	3a 03                	cmp    al,BYTE PTR [ebx]
    2070:	00 00                	add    BYTE PTR [eax],al
    2072:	68 01 07 ac 02       	push   0x2ac0701
    2077:	00 00                	add    BYTE PTR [eax],al
    2079:	69 01 07 a3 03 00    	imul   eax,DWORD PTR [ecx],0x3a307
    207f:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2082:	07                   	pop    es
    2083:	e5 02                	in     eax,0x2
    2085:	00 00                	add    BYTE PTR [eax],al
    2087:	71 01                	jno    208a <sysEnter_Vector-0x12df76>
    2089:	07                   	pop    es
    208a:	dc 03                	fadd   QWORD PTR [ebx]
    208c:	00 00                	add    BYTE PTR [eax],al
    208e:	00 03                	add    BYTE PTR [ebx],al
    2090:	07                   	pop    es
    2091:	47                   	inc    edi
    2092:	03 00                	add    eax,DWORD PTR [eax]
    2094:	00 01                	add    BYTE PTR [ecx],al
    2096:	03 07                	add    eax,DWORD PTR [edi]
    2098:	bb 02 00 00 02       	mov    ebx,0x2000002
    209d:	03 07                	add    eax,DWORD PTR [edi]
    209f:	80 02 00             	add    BYTE PTR [edx],0x0
    20a2:	00 03                	add    BYTE PTR [ebx],al
    20a4:	03 07                	add    eax,DWORD PTR [edi]
    20a6:	90                   	nop
    20a7:	02 00                	add    al,BYTE PTR [eax]
    20a9:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    20ac:	07                   	pop    es
    20ad:	c7 02 00 00 05 03    	mov    DWORD PTR [edx],0x3050000
    20b3:	00 02                	add    BYTE PTR [edx],al
    20b5:	04 07                	add    al,0x7
    20b7:	39 00                	cmp    DWORD PTR [eax],eax
    20b9:	00 00                	add    BYTE PTR [eax],al
    20bb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    20be:	e1 00                	loope  20c0 <sysEnter_Vector-0x12df40>
    20c0:	00 00                	add    BYTE PTR [eax],al
    20c2:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
    20c9:	c0 07 00             	rol    BYTE PTR [edi],0x0
    20cc:	00 01                	add    BYTE PTR [ecx],al
    20ce:	0a 3a                	or     bh,BYTE PTR [edx]
    20d0:	00 00                	add    BYTE PTR [eax],al
    20d2:	00 84 18 00 30 29 00 	add    BYTE PTR [eax+ebx*1+0x293000],al
    20d9:	00 00                	add    BYTE PTR [eax],al
    20db:	01 9c 8d 01 00 00 0a 	add    DWORD PTR [ebp+ecx*4+0xa000001],ebx
    20e2:	c5 07                	lds    eax,FWORD PTR [edi]
    20e4:	00 00                	add    BYTE PTR [eax],al
    20e6:	01 0a                	add    DWORD PTR [edx],ecx
    20e8:	8d 01                	lea    eax,[ecx]
    20ea:	00 00                	add    BYTE PTR [eax],al
    20ec:	02 91 00 00 08 04    	add    dl,BYTE PTR [ecx+0x4080000]
    20f2:	3a 00                	cmp    al,BYTE PTR [eax]
    20f4:	00 00                	add    BYTE PTR [eax],al
    20f6:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    20f9:	00 00                	add    BYTE PTR [eax],al
    20fb:	03 34 56             	add    esi,DWORD PTR [esi+edx*2]
    20fe:	00 00                	add    BYTE PTR [eax],al
    2100:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    2106:	30 0b                	xor    BYTE PTR [ebx],cl
    2108:	af                   	scas   eax,DWORD PTR es:[edi]
    2109:	00 00                	add    BYTE PTR [eax],al
    210b:	00 03                	add    BYTE PTR [ebx],al
    210d:	35 56 00 00 00       	xor    eax,0x56
    2112:	05 03 40 4a 00       	add    eax,0x4a4003
    2117:	30 0b                	xor    BYTE PTR [ebx],cl
    2119:	5b                   	pop    ebx
    211a:	01 00                	add    DWORD PTR [eax],eax
    211c:	00 03                	add    BYTE PTR [ebx],al
    211e:	36                   	ss
    211f:	56                   	push   esi
    2120:	00 00                	add    BYTE PTR [eax],al
    2122:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    2128:	30 0b                	xor    BYTE PTR [ebx],cl
    212a:	54                   	push   esp
    212b:	00 00                	add    BYTE PTR [eax],al
    212d:	00 03                	add    BYTE PTR [ebx],al
    212f:	37                   	aaa    
    2130:	7a 00                	jp     2132 <sysEnter_Vector-0x12dece>
    2132:	00 00                	add    BYTE PTR [eax],al
    2134:	05 03 48 4a 00       	add    eax,0x4a4803
    2139:	30 0b                	xor    BYTE PTR [ebx],cl
    213b:	28 00                	sub    BYTE PTR [eax],al
    213d:	00 00                	add    BYTE PTR [eax],al
    213f:	04 4c                	add    al,0x4c
    2141:	e8 01 00 00 05       	call   5002147 <sysEnter_Vector+0x4ed2147>
    2146:	03 44 4a 00          	add    eax,DWORD PTR [edx+ecx*2+0x0]
    214a:	30 08                	xor    BYTE PTR [eax],cl
    214c:	04 5f                	add    al,0x5f
    214e:	01 00                	add    DWORD PTR [eax],eax
    2150:	00 00                	add    BYTE PTR [eax],al
    2152:	58                   	pop    eax
    2153:	04 00                	add    al,0x0
    2155:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2158:	c7                   	(bad)  
    2159:	0a 00                	or     al,BYTE PTR [eax]
    215b:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    215e:	f4                   	hlt    
    215f:	00 00                	add    BYTE PTR [eax],al
    2161:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
    2164:	08 00                	or     BYTE PTR [eax],al
    2166:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2169:	00 00                	add    BYTE PTR [eax],al
    216b:	b0 18                	mov    al,0x18
    216d:	00 30                	add    BYTE PTR [eax],dh
    216f:	84 00                	test   BYTE PTR [eax],al
    2171:	00 00                	add    BYTE PTR [eax],al
    2173:	d8 0d 00 00 02 01    	fmul   DWORD PTR ds:0x1020000
    2179:	06                   	push   es
    217a:	64 00 00             	add    BYTE PTR fs:[eax],al
    217d:	00 02                	add    BYTE PTR [edx],al
    217f:	01 06                	add    DWORD PTR [esi],eax
    2181:	5d                   	pop    ebp
    2182:	00 00                	add    BYTE PTR [eax],al
    2184:	00 02                	add    BYTE PTR [edx],al
    2186:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    218c:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2193:	02 08                	add    cl,BYTE PTR [eax]
    2195:	05 00 00 00 00       	add    eax,0x0
    219a:	02 01                	add    al,BYTE PTR [ecx]
    219c:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    219f:	00 00                	add    BYTE PTR [eax],al
    21a1:	02 02                	add    al,BYTE PTR [edx]
    21a3:	07                   	pop    es
    21a4:	0e                   	push   cs
    21a5:	00 00                	add    BYTE PTR [eax],al
    21a7:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    21aa:	00 00                	add    BYTE PTR [eax],al
    21ac:	00 02                	add    BYTE PTR [edx],al
    21ae:	34 61                	xor    al,0x61
    21b0:	00 00                	add    BYTE PTR [eax],al
    21b2:	00 02                	add    BYTE PTR [edx],al
    21b4:	04 07                	add    al,0x7
    21b6:	3e 00 00             	add    BYTE PTR ds:[eax],al
    21b9:	00 04 d2             	add    BYTE PTR [edx+edx*8],al
    21bc:	07                   	pop    es
    21bd:	00 00                	add    BYTE PTR [eax],al
    21bf:	02 37                	add    dh,BYTE PTR [edi]
    21c1:	73 00                	jae    21c3 <sysEnter_Vector-0x12de3d>
    21c3:	00 00                	add    BYTE PTR [eax],al
    21c5:	02 08                	add    cl,BYTE PTR [eax]
    21c7:	07                   	pop    es
    21c8:	34 00                	xor    al,0x0
    21ca:	00 00                	add    BYTE PTR [eax],al
    21cc:	04 9f                	add    al,0x9f
    21ce:	04 00                	add    al,0x0
    21d0:	00 03                	add    BYTE PTR [ebx],al
    21d2:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    21d5:	00 00                	add    BYTE PTR [eax],al
    21d7:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    21de:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    21e1:	9b                   	fwait
    21e2:	00 00                	add    BYTE PTR [eax],al
    21e4:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    21ea:	00 06                	add    BYTE PTR [esi],al
    21ec:	25 00 00 00 02       	and    eax,0x2000000
    21f1:	01 02                	add    DWORD PTR [edx],eax
    21f3:	95                   	xchg   ebp,eax
    21f4:	00 00                	add    BYTE PTR [eax],al
    21f6:	00 02                	add    BYTE PTR [edx],al
    21f8:	04 07                	add    al,0x7
    21fa:	39 00                	cmp    DWORD PTR [eax],eax
    21fc:	00 00                	add    BYTE PTR [eax],al
    21fe:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2201:	e1 00                	loope  2203 <sysEnter_Vector-0x12ddfd>
    2203:	00 00                	add    BYTE PTR [eax],al
    2205:	07                   	pop    es
    2206:	04 05                	add    al,0x5
    2208:	04 25                	add    al,0x25
    220a:	00 00                	add    BYTE PTR [eax],al
    220c:	00 08                	add    BYTE PTR [eax],cl
    220e:	a9 08 00 00 0c       	test   eax,0xc000008
    2213:	04 17                	add    al,0x17
    2215:	ec                   	in     al,dx
    2216:	00 00                	add    BYTE PTR [eax],al
    2218:	00 09                	add    BYTE PTR [ecx],cl
    221a:	eb 07                	jmp    2223 <sysEnter_Vector-0x12dddd>
    221c:	00 00                	add    BYTE PTR [eax],al
    221e:	04 19                	add    al,0x19
    2220:	ec                   	in     al,dx
    2221:	00 00                	add    BYTE PTR [eax],al
    2223:	00 00                	add    BYTE PTR [eax],al
    2225:	09 53 07             	or     DWORD PTR [ebx+0x7],edx
    2228:	00 00                	add    BYTE PTR [eax],al
    222a:	04 19                	add    al,0x19
    222c:	ec                   	in     al,dx
    222d:	00 00                	add    BYTE PTR [eax],al
    222f:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2232:	a1 08 00 00 04       	mov    eax,ds:0x4000008
    2237:	1a b3 00 00 00 08    	sbb    dh,BYTE PTR [ebx+0x8000000]
    223d:	00 05 04 bb 00 00    	add    BYTE PTR ds:0xbb04,al
    2243:	00 04 5d 08 00 00 04 	add    BYTE PTR [ebx*2+0x4000008],al
    224a:	1b bb 00 00 00 08    	sbb    edi,DWORD PTR [ebx+0x8000000]
    2250:	09 08                	or     DWORD PTR [eax],ecx
    2252:	00 00                	add    BYTE PTR [eax],al
    2254:	14 05                	adc    al,0x5
    2256:	1b 2e                	sbb    ebp,DWORD PTR [esi]
    2258:	01 00                	add    DWORD PTR [eax],eax
    225a:	00 09                	add    BYTE PTR [ecx],cl
    225c:	02 08                	add    cl,BYTE PTR [eax]
    225e:	00 00                	add    BYTE PTR [eax],al
    2260:	05 1d f2 00 00       	add    eax,0xf21d
    2265:	00 00                	add    BYTE PTR [eax],al
    2267:	09 cc                	or     esp,ecx
    2269:	07                   	pop    es
    226a:	00 00                	add    BYTE PTR [eax],al
    226c:	05 1e 61 00 00       	add    eax,0x611e
    2271:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2274:	04 09                	add    al,0x9
    2276:	00 00                	add    BYTE PTR [eax],al
    2278:	05 1f 5f 01 00       	add    eax,0x15f1f
    227d:	00 10                	add    BYTE PTR [eax],dl
    227f:	00 08                	add    BYTE PTR [eax],cl
    2281:	3a 08                	cmp    cl,BYTE PTR [eax]
    2283:	00 00                	add    BYTE PTR [eax],al
    2285:	0c 05                	or     al,0x5
    2287:	37                   	aaa    
    2288:	5f                   	pop    edi
    2289:	01 00                	add    DWORD PTR [eax],eax
    228b:	00 09                	add    BYTE PTR [ecx],cl
    228d:	27                   	daa    
    228e:	08 00                	or     BYTE PTR [eax],al
    2290:	00 05 39 b5 00 00    	add    BYTE PTR ds:0xb539,al
    2296:	00 00                	add    BYTE PTR [eax],al
    2298:	09 0b                	or     DWORD PTR [ebx],ecx
    229a:	09 00                	or     DWORD PTR [eax],eax
    229c:	00 05 3a 68 02 00    	add    BYTE PTR ds:0x2683a,al
    22a2:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    22a5:	1c 09                	sbb    al,0x9
    22a7:	00 00                	add    BYTE PTR [eax],al
    22a9:	05 3b 5f 01 00       	add    eax,0x15f3b
    22ae:	00 08                	add    BYTE PTR [eax],cl
    22b0:	00 05 04 2e 01 00    	add    BYTE PTR ds:0x12e04,al
    22b6:	00 08                	add    BYTE PTR [eax],cl
    22b8:	17                   	pop    ss
    22b9:	08 00                	or     BYTE PTR [eax],al
    22bb:	00 0c 05 22 96 01 00 	add    BYTE PTR [eax*1+0x19622],cl
    22c2:	00 09                	add    BYTE PTR [ecx],cl
    22c4:	b8 08 00 00 05       	mov    eax,0x5000008
    22c9:	24 5f                	and    al,0x5f
    22cb:	01 00                	add    DWORD PTR [eax],eax
    22cd:	00 00                	add    BYTE PTR [eax],al
    22cf:	09 fb                	or     ebx,edi
    22d1:	07                   	pop    es
    22d2:	00 00                	add    BYTE PTR [eax],al
    22d4:	05 25 96 01 00       	add    eax,0x19625
    22d9:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    22dc:	db 07                	fild   DWORD PTR [edi]
    22de:	00 00                	add    BYTE PTR [eax],al
    22e0:	05 26 3a 00 00       	add    eax,0x3a26
    22e5:	00 08                	add    BYTE PTR [eax],cl
    22e7:	00 05 04 fd 00 00    	add    BYTE PTR ds:0xfd04,al
    22ed:	00 08                	add    BYTE PTR [eax],cl
    22ef:	0d 09 00 00 24       	or     eax,0x24000009
    22f4:	05 29 09 02 00       	add    eax,0x20929
    22f9:	00 09                	add    BYTE PTR [ecx],cl
    22fb:	9b                   	fwait
    22fc:	08 00                	or     BYTE PTR [eax],al
    22fe:	00 05 2b 61 00 00    	add    BYTE PTR ds:0x612b,al
    2304:	00 00                	add    BYTE PTR [eax],al
    2306:	09 db                	or     ebx,ebx
    2308:	08 00                	or     BYTE PTR [eax],al
    230a:	00 05 2c 4f 00 00    	add    BYTE PTR ds:0x4f2c,al
    2310:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2313:	77 08                	ja     231d <sysEnter_Vector-0x12dce3>
    2315:	00 00                	add    BYTE PTR [eax],al
    2317:	05 2d 4f 00 00       	add    eax,0x4f2d
    231c:	00 06                	add    BYTE PTR [esi],al
    231e:	09 d5                	or     ebp,edx
    2320:	08 00                	or     BYTE PTR [eax],al
    2322:	00 05 2e 61 00 00    	add    BYTE PTR ds:0x612e,al
    2328:	00 08                	add    BYTE PTR [eax],cl
    232a:	09 57 08             	or     DWORD PTR [edi+0x8],edx
    232d:	00 00                	add    BYTE PTR [eax],al
    232f:	05 2f 61 00 00       	add    eax,0x612f
    2334:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2337:	cd 08                	int    0x8
    2339:	00 00                	add    BYTE PTR [eax],al
    233b:	05 30 61 00 00       	add    eax,0x6130
    2340:	00 10                	add    BYTE PTR [eax],dl
    2342:	09 b3 08 00 00 05    	or     DWORD PTR [ebx+0x5000008],esi
    2348:	31 52 02             	xor    DWORD PTR [edx+0x2],edx
    234b:	00 00                	add    BYTE PTR [eax],al
    234d:	14 09                	adc    al,0x9
    234f:	15 08 00 00 05       	adc    eax,0x5000008
    2354:	32 65 01             	xor    ah,BYTE PTR [ebp+0x1]
    2357:	00 00                	add    BYTE PTR [eax],al
    2359:	18 00                	sbb    BYTE PTR [eax],al
    235b:	08 66 08             	or     BYTE PTR [esi+0x8],ah
    235e:	00 00                	add    BYTE PTR [eax],al
    2360:	14 05                	adc    al,0x5
    2362:	3e                   	ds
    2363:	52                   	push   edx
    2364:	02 00                	add    al,BYTE PTR [eax]
    2366:	00 09                	add    BYTE PTR [ecx],cl
    2368:	34 09                	xor    al,0x9
    236a:	00 00                	add    BYTE PTR [eax],al
    236c:	05 40 82 02 00       	add    eax,0x28240
    2371:	00 00                	add    BYTE PTR [eax],al
    2373:	09 f0                	or     eax,esi
    2375:	07                   	pop    es
    2376:	00 00                	add    BYTE PTR [eax],al
    2378:	05 41 82 02 00       	add    eax,0x28241
    237d:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2380:	51                   	push   ecx
    2381:	08 00                	or     BYTE PTR [eax],al
    2383:	00 05 42 82 02 00    	add    BYTE PTR ds:0x28242,al
    2389:	00 08                	add    BYTE PTR [eax],cl
    238b:	09 e5                	or     ebp,esp
    238d:	07                   	pop    es
    238e:	00 00                	add    BYTE PTR [eax],al
    2390:	05 43 9c 02 00       	add    eax,0x29c43
    2395:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2398:	20 08                	and    BYTE PTR [eax],cl
    239a:	00 00                	add    BYTE PTR [eax],al
    239c:	05 44 c5 02 00       	add    eax,0x2c544
    23a1:	00 10                	add    BYTE PTR [eax],dl
    23a3:	00 05 04 58 02 00    	add    BYTE PTR ds:0x25804,al
    23a9:	00 06                	add    BYTE PTR [esi],al
    23ab:	09 02                	or     DWORD PTR [edx],eax
    23ad:	00 00                	add    BYTE PTR [eax],al
    23af:	04 ef                	add    al,0xef
    23b1:	08 00                	or     BYTE PTR [eax],al
    23b3:	00 05 35 9c 01 00    	add    BYTE PTR ds:0x19c35,al
    23b9:	00 05 04 9c 01 00    	add    BYTE PTR ds:0x19c04,al
    23bf:	00 0a                	add    BYTE PTR [edx],cl
    23c1:	3a 00                	cmp    al,BYTE PTR [eax]
    23c3:	00 00                	add    BYTE PTR [eax],al
    23c5:	82                   	(bad)  
    23c6:	02 00                	add    al,BYTE PTR [eax]
    23c8:	00 0b                	add    BYTE PTR [ebx],cl
    23ca:	68 02 00 00 0b       	push   0xb000002
    23cf:	5f                   	pop    edi
    23d0:	01 00                	add    DWORD PTR [eax],eax
    23d2:	00 00                	add    BYTE PTR [eax],al
    23d4:	05 04 6e 02 00       	add    eax,0x26e04
    23d9:	00 0a                	add    BYTE PTR [edx],cl
    23db:	3a 00                	cmp    al,BYTE PTR [eax]
    23dd:	00 00                	add    BYTE PTR [eax],al
    23df:	9c                   	pushf  
    23e0:	02 00                	add    al,BYTE PTR [eax]
    23e2:	00 0b                	add    BYTE PTR [ebx],cl
    23e4:	68 02 00 00 0b       	push   0xb000002
    23e9:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    23ec:	00 00                	add    BYTE PTR [eax],al
    23ee:	05 04 88 02 00       	add    eax,0x28804
    23f3:	00 0a                	add    BYTE PTR [edx],cl
    23f5:	3a 00                	cmp    al,BYTE PTR [eax]
    23f7:	00 00                	add    BYTE PTR [eax],al
    23f9:	c5 02                	lds    eax,FWORD PTR [edx]
    23fb:	00 00                	add    BYTE PTR [eax],al
    23fd:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    2400:	00 00                	add    BYTE PTR [eax],al
    2402:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    2405:	00 00                	add    BYTE PTR [eax],al
    2407:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    240a:	00 00                	add    BYTE PTR [eax],al
    240c:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    240f:	00 00                	add    BYTE PTR [eax],al
    2411:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    2414:	00 00                	add    BYTE PTR [eax],al
    2416:	00 05 04 a2 02 00    	add    BYTE PTR ds:0x2a204,al
    241c:	00 04 c6             	add    BYTE PTR [esi+eax*8],al
    241f:	08 00                	or     BYTE PTR [eax],al
    2421:	00 05 47 d6 02 00    	add    BYTE PTR ds:0x2d647,al
    2427:	00 08                	add    BYTE PTR [eax],cl
    2429:	ff 08                	dec    DWORD PTR [eax]
    242b:	00 00                	add    BYTE PTR [eax],al
    242d:	10 05 4f 07 03 00    	adc    BYTE PTR ds:0x3074f,al
    2433:	00 09                	add    BYTE PTR [ecx],cl
    2435:	2d 09 00 00 05       	sub    eax,0x5000009
    243a:	51                   	push   ecx
    243b:	b5 00                	mov    ch,0x0
    243d:	00 00                	add    BYTE PTR [eax],al
    243f:	00 09                	add    BYTE PTR [ecx],cl
    2441:	25 09 00 00 05       	and    eax,0x5000009
    2446:	52                   	push   edx
    2447:	68 02 00 00 04       	push   0x4000002
    244c:	09 c1                	or     ecx,eax
    244e:	08 00                	or     BYTE PTR [eax],al
    2450:	00 05 53 07 03 00    	add    BYTE PTR ds:0x30753,al
    2456:	00 08                	add    BYTE PTR [eax],cl
    2458:	00 08                	add    BYTE PTR [eax],cl
    245a:	41                   	inc    ecx
    245b:	08 00                	or     BYTE PTR [eax],al
    245d:	00 08                	add    BYTE PTR [eax],cl
    245f:	05 49 2c 03 00       	add    eax,0x32c49
    2464:	00 09                	add    BYTE PTR [ecx],cl
    2466:	28 03                	sub    BYTE PTR [ebx],al
    2468:	00 00                	add    BYTE PTR [eax],al
    246a:	05 4b 56 03 00       	add    eax,0x3564b
    246f:	00 00                	add    BYTE PTR [eax],al
    2471:	09 60 02             	or     DWORD PTR [eax+0x2],esp
    2474:	00 00                	add    BYTE PTR [eax],al
    2476:	05 4c 7a 03 00       	add    eax,0x37a4c
    247b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    247e:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    2481:	00 00                	add    BYTE PTR [eax],al
    2483:	4a                   	dec    edx
    2484:	03 00                	add    eax,DWORD PTR [eax]
    2486:	00 0b                	add    BYTE PTR [ebx],cl
    2488:	4a                   	dec    edx
    2489:	03 00                	add    eax,DWORD PTR [eax]
    248b:	00 0b                	add    BYTE PTR [ebx],cl
    248d:	b5 00                	mov    ch,0x0
    248f:	00 00                	add    BYTE PTR [eax],al
    2491:	0b 7a 00             	or     edi,DWORD PTR [edx+0x0]
    2494:	00 00                	add    BYTE PTR [eax],al
    2496:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2499:	00 00                	add    BYTE PTR [eax],al
    249b:	00 05 04 d6 02 00    	add    BYTE PTR ds:0x2d604,al
    24a1:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    24a7:	00 05 04 2c 03 00    	add    BYTE PTR ds:0x32c04,al
    24ad:	00 0a                	add    BYTE PTR [edx],cl
    24af:	7a 00                	jp     24b1 <sysEnter_Vector-0x12db4f>
    24b1:	00 00                	add    BYTE PTR [eax],al
    24b3:	7a 03                	jp     24b8 <sysEnter_Vector-0x12db48>
    24b5:	00 00                	add    BYTE PTR [eax],al
    24b7:	0b 4a 03             	or     ecx,DWORD PTR [edx+0x3]
    24ba:	00 00                	add    BYTE PTR [eax],al
    24bc:	0b 93 00 00 00 0b    	or     edx,DWORD PTR [ebx+0xb000000]
    24c2:	7a 00                	jp     24c4 <sysEnter_Vector-0x12db3c>
    24c4:	00 00                	add    BYTE PTR [eax],al
    24c6:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    24c9:	00 00                	add    BYTE PTR [eax],al
    24cb:	00 05 04 5c 03 00    	add    BYTE PTR ds:0x35c04,al
    24d1:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
    24d4:	08 00                	or     BYTE PTR [eax],al
    24d6:	00 05 4d 07 03 00    	add    BYTE PTR ds:0x3074d,al
    24dc:	00 0c 13             	add    BYTE PTR [ebx+edx*1],cl
    24df:	09 00                	or     DWORD PTR [eax],eax
    24e1:	00 01                	add    BYTE PTR [ecx],al
    24e3:	43                   	inc    ebx
    24e4:	b0 18                	mov    al,0x18
    24e6:	00 30                	add    BYTE PTR [eax],dh
    24e8:	84 00                	test   BYTE PTR [eax],al
    24ea:	00 00                	add    BYTE PTR [eax],al
    24ec:	01 9c bd 03 00 00 0d 	add    DWORD PTR [ebp+edi*4+0xd000003],ebx
    24f3:	f6 07 00             	test   BYTE PTR [edi],0x0
    24f6:	00 01                	add    BYTE PTR [ecx],al
    24f8:	45                   	inc    ebp
    24f9:	bd 03 00 00 02       	mov    ebp,0x2000003
    24fe:	91                   	xchg   ecx,eax
    24ff:	67 0d 93 08 00 00    	addr16 or eax,0x893
    2505:	01 46 3a             	add    DWORD PTR [esi+0x3a],eax
    2508:	00 00                	add    BYTE PTR [eax],al
    250a:	00 02                	add    BYTE PTR [edx],al
    250c:	91                   	xchg   ecx,eax
    250d:	6c                   	ins    BYTE PTR es:[edi],dx
    250e:	00 0e                	add    BYTE PTR [esi],cl
    2510:	25 00 00 00 cd       	and    eax,0xcd000000
    2515:	03 00                	add    eax,DWORD PTR [eax]
    2517:	00 0f                	add    BYTE PTR [edi],cl
    2519:	ac                   	lods   al,BYTE PTR ds:[esi]
    251a:	00 00                	add    BYTE PTR [eax],al
    251c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    251f:	10 4b 00             	adc    BYTE PTR [ebx+0x0],cl
    2522:	00 00                	add    BYTE PTR [eax],al
    2524:	06                   	push   es
    2525:	34 56                	xor    al,0x56
    2527:	00 00                	add    BYTE PTR [eax],al
    2529:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    252f:	30 10                	xor    BYTE PTR [eax],dl
    2531:	af                   	scas   eax,DWORD PTR es:[edi]
    2532:	00 00                	add    BYTE PTR [eax],al
    2534:	00 06                	add    BYTE PTR [esi],al
    2536:	35 56 00 00 00       	xor    eax,0x56
    253b:	05 03 40 4a 00       	add    eax,0x4a4003
    2540:	30 10                	xor    BYTE PTR [eax],dl
    2542:	5b                   	pop    ebx
    2543:	01 00                	add    DWORD PTR [eax],eax
    2545:	00 06                	add    BYTE PTR [esi],al
    2547:	36                   	ss
    2548:	56                   	push   esi
    2549:	00 00                	add    BYTE PTR [eax],al
    254b:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    2551:	30 10                	xor    BYTE PTR [eax],dl
    2553:	54                   	push   esp
    2554:	00 00                	add    BYTE PTR [eax],al
    2556:	00 06                	add    BYTE PTR [esi],al
    2558:	37                   	aaa    
    2559:	85 00                	test   DWORD PTR [eax],eax
    255b:	00 00                	add    BYTE PTR [eax],al
    255d:	05 03 48 4a 00       	add    eax,0x4a4803
    2562:	30 10                	xor    BYTE PTR [eax],dl
    2564:	28 00                	sub    BYTE PTR [eax],al
    2566:	00 00                	add    BYTE PTR [eax],al
    2568:	07                   	pop    es
    2569:	4c                   	dec    esp
    256a:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    256d:	00 05 03 44 4a 00    	add    BYTE PTR ds:0x4a4403,al
    2573:	30 05 04 b5 00 00    	xor    BYTE PTR ds:0xb504,al
    2579:	00 10                	add    BYTE PTR [eax],dl
    257b:	c1 08 00             	ror    DWORD PTR [eax],0x0
    257e:	00 01                	add    BYTE PTR [ecx],al
    2580:	0e                   	push   cs
    2581:	80 03 00             	add    BYTE PTR [ebx],0x0
    2584:	00 05 03 54 4a 00    	add    BYTE PTR ds:0x4a5403,al
    258a:	30 10                	xor    BYTE PTR [eax],dl
    258c:	e2 08                	loop   2596 <sysEnter_Vector-0x12da6a>
    258e:	00 00                	add    BYTE PTR [eax],al
    2590:	01 0f                	add    DWORD PTR [edi],ecx
    2592:	5d                   	pop    ebp
    2593:	02 00                	add    al,BYTE PTR [eax]
    2595:	00 05 03 a0 48 00    	add    BYTE PTR ds:0x48a003,al
    259b:	30 10                	xor    BYTE PTR [eax],dl
    259d:	f7                   	(bad)  
    259e:	08 00                	or     BYTE PTR [eax],al
    25a0:	00 01                	add    BYTE PTR [ecx],al
    25a2:	10 cb                	adc    bl,cl
    25a4:	02 00                	add    al,BYTE PTR [eax]
    25a6:	00 05 03 5c 4a 00    	add    BYTE PTR ds:0x4a5c03,al
    25ac:	30 00                	xor    BYTE PTR [eax],al
    25ae:	ad                   	lods   eax,DWORD PTR ds:[esi]
    25af:	01 00                	add    DWORD PTR [eax],eax
    25b1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    25b4:	8f                   	(bad)  
    25b5:	0b 00                	or     eax,DWORD PTR [eax]
    25b7:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    25ba:	f4                   	hlt    
    25bb:	00 00                	add    BYTE PTR [eax],al
    25bd:	00 0c 56             	add    BYTE PTR [esi+edx*2],cl
    25c0:	09 00                	or     DWORD PTR [eax],eax
    25c2:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    25c5:	00 00                	add    BYTE PTR [eax],al
    25c7:	34 19                	xor    al,0x19
    25c9:	00 30                	add    BYTE PTR [eax],dh
    25cb:	eb 00                	jmp    25cd <sysEnter_Vector-0x12da33>
    25cd:	00 00                	add    BYTE PTR [eax],al
    25cf:	d6                   	(bad)  
    25d0:	0e                   	push   cs
    25d1:	00 00                	add    BYTE PTR [eax],al
    25d3:	02 01                	add    al,BYTE PTR [ecx]
    25d5:	06                   	push   es
    25d6:	64 00 00             	add    BYTE PTR fs:[eax],al
    25d9:	00 02                	add    BYTE PTR [edx],al
    25db:	01 06                	add    DWORD PTR [esi],eax
    25dd:	5d                   	pop    ebp
    25de:	00 00                	add    BYTE PTR [eax],al
    25e0:	00 02                	add    BYTE PTR [edx],al
    25e2:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    25e8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    25ef:	02 08                	add    cl,BYTE PTR [eax]
    25f1:	05 00 00 00 00       	add    eax,0x0
    25f6:	02 01                	add    al,BYTE PTR [ecx]
    25f8:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    25fb:	00 00                	add    BYTE PTR [eax],al
    25fd:	02 02                	add    al,BYTE PTR [edx]
    25ff:	07                   	pop    es
    2600:	0e                   	push   cs
    2601:	00 00                	add    BYTE PTR [eax],al
    2603:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2606:	00 00                	add    BYTE PTR [eax],al
    2608:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    260b:	61                   	popa   
    260c:	00 00                	add    BYTE PTR [eax],al
    260e:	00 02                	add    BYTE PTR [edx],al
    2610:	04 07                	add    al,0x7
    2612:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2615:	00 02                	add    BYTE PTR [edx],al
    2617:	08 07                	or     BYTE PTR [edi],al
    2619:	34 00                	xor    al,0x0
    261b:	00 00                	add    BYTE PTR [eax],al
    261d:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2624:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2627:	9b                   	fwait
    2628:	00 00                	add    BYTE PTR [eax],al
    262a:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2630:	00 06                	add    BYTE PTR [esi],al
    2632:	25 00 00 00 02       	and    eax,0x2000000
    2637:	01 02                	add    DWORD PTR [edx],eax
    2639:	95                   	xchg   ebp,eax
    263a:	00 00                	add    BYTE PTR [eax],al
    263c:	00 02                	add    BYTE PTR [edx],al
    263e:	04 07                	add    al,0x7
    2640:	39 00                	cmp    DWORD PTR [eax],eax
    2642:	00 00                	add    BYTE PTR [eax],al
    2644:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2647:	e1 00                	loope  2649 <sysEnter_Vector-0x12d9b7>
    2649:	00 00                	add    BYTE PTR [eax],al
    264b:	05 04 25 00 00       	add    eax,0x2504
    2650:	00 07                	add    BYTE PTR [edi],al
    2652:	4f                   	dec    edi
    2653:	09 00                	or     DWORD PTR [eax],eax
    2655:	00 01                	add    BYTE PTR [ecx],al
    2657:	1d 9d 00 00 00       	sbb    eax,0x9d
    265c:	34 19                	xor    al,0x19
    265e:	00 30                	add    BYTE PTR [eax],dh
    2660:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2663:	00 01                	add    BYTE PTR [ecx],al
    2665:	9c                   	pushf  
    2666:	d9 00                	fld    DWORD PTR [eax]
    2668:	00 00                	add    BYTE PTR [eax],al
    266a:	08 6f 07             	or     BYTE PTR [edi+0x7],ch
    266d:	00 00                	add    BYTE PTR [eax],al
    266f:	01 1d 9d 00 00 00    	add    DWORD PTR ds:0x9d,ebx
    2675:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    267b:	63 00                	arpl   WORD PTR [eax],ax
    267d:	01 1d 7d 00 00 00    	add    DWORD PTR ds:0x7d,ebx
    2683:	02 91 04 00 07 47    	add    dl,BYTE PTR [ecx+0x47070004]
    2689:	09 00                	or     DWORD PTR [eax],eax
    268b:	00 01                	add    BYTE PTR [ecx],al
    268d:	23 9d 00 00 00 72    	and    ebx,DWORD PTR [ebp+0x72000000]
    2693:	19 00                	sbb    DWORD PTR [eax],eax
    2695:	30 3e                	xor    BYTE PTR [esi],bh
    2697:	00 00                	add    BYTE PTR [eax],al
    2699:	00 01                	add    BYTE PTR [ecx],al
    269b:	9c                   	pushf  
    269c:	0f 01 00             	sgdtd  [eax]
    269f:	00 08                	add    BYTE PTR [eax],cl
    26a1:	6f                   	outs   dx,DWORD PTR ds:[esi]
    26a2:	07                   	pop    es
    26a3:	00 00                	add    BYTE PTR [eax],al
    26a5:	01 23                	add    DWORD PTR [ebx],esp
    26a7:	9d                   	popf   
    26a8:	00 00                	add    BYTE PTR [eax],al
    26aa:	00 02                	add    BYTE PTR [edx],al
    26ac:	91                   	xchg   ecx,eax
    26ad:	00 09                	add    BYTE PTR [ecx],cl
    26af:	73 72                	jae    2723 <sysEnter_Vector-0x12d8dd>
    26b1:	63 00                	arpl   WORD PTR [eax],ax
    26b3:	01 23                	add    DWORD PTR [ebx],esp
    26b5:	7d 00                	jge    26b7 <sysEnter_Vector-0x12d949>
    26b7:	00 00                	add    BYTE PTR [eax],al
    26b9:	02 91 04 00 0a 3b    	add    dl,BYTE PTR [ecx+0x3b0a0004]
    26bf:	09 00                	or     DWORD PTR [eax],eax
    26c1:	00 01                	add    BYTE PTR [ecx],al
    26c3:	29 b0 19 00 30 6f    	sub    DWORD PTR [eax+0x6f300019],esi
    26c9:	00 00                	add    BYTE PTR [eax],al
    26cb:	00 01                	add    BYTE PTR [ecx],al
    26cd:	9c                   	pushf  
    26ce:	55                   	push   ebp
    26cf:	01 00                	add    DWORD PTR [eax],eax
    26d1:	00 09                	add    BYTE PTR [ecx],cl
    26d3:	70 00                	jo     26d5 <sysEnter_Vector-0x12d92b>
    26d5:	01 29                	add    DWORD PTR [ecx],ebp
    26d7:	9d                   	popf   
    26d8:	00 00                	add    BYTE PTR [eax],al
    26da:	00 02                	add    BYTE PTR [edx],al
    26dc:	91                   	xchg   ecx,eax
    26dd:	00 09                	add    BYTE PTR [ecx],cl
    26df:	71 00                	jno    26e1 <sysEnter_Vector-0x12d91f>
    26e1:	01 29                	add    DWORD PTR [ecx],ebp
    26e3:	9d                   	popf   
    26e4:	00 00                	add    BYTE PTR [eax],al
    26e6:	00 02                	add    BYTE PTR [edx],al
    26e8:	91                   	xchg   ecx,eax
    26e9:	04 0b                	add    al,0xb
    26eb:	63 00                	arpl   WORD PTR [eax],ax
    26ed:	01 2a                	add    DWORD PTR [edx],ebp
    26ef:	3a 00                	cmp    al,BYTE PTR [eax]
    26f1:	00 00                	add    BYTE PTR [eax],al
    26f3:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    26f9:	01 2a                	add    DWORD PTR [edx],ebp
    26fb:	3a 00                	cmp    al,BYTE PTR [eax]
    26fd:	00 00                	add    BYTE PTR [eax],al
    26ff:	02 91 70 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0070]
    2705:	00 00                	add    BYTE PTR [eax],al
    2707:	00 02                	add    BYTE PTR [edx],al
    2709:	34 56                	xor    al,0x56
    270b:	00 00                	add    BYTE PTR [eax],al
    270d:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    2713:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    2716:	00 00                	add    BYTE PTR [eax],al
    2718:	00 02                	add    BYTE PTR [edx],al
    271a:	35 56 00 00 00       	xor    eax,0x56
    271f:	05 03 40 4a 00       	add    eax,0x4a4003
    2724:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    2727:	01 00                	add    DWORD PTR [eax],eax
    2729:	00 02                	add    BYTE PTR [edx],al
    272b:	36                   	ss
    272c:	56                   	push   esi
    272d:	00 00                	add    BYTE PTR [eax],al
    272f:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    2735:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    2738:	00 00                	add    BYTE PTR [eax],al
    273a:	00 02                	add    BYTE PTR [edx],al
    273c:	37                   	aaa    
    273d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    273e:	00 00                	add    BYTE PTR [eax],al
    2740:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    2746:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    2749:	00 00                	add    BYTE PTR [eax],al
    274b:	00 03                	add    BYTE PTR [ebx],al
    274d:	4c                   	dec    esp
    274e:	aa                   	stos   BYTE PTR es:[edi],al
    274f:	01 00                	add    DWORD PTR [eax],eax
    2751:	00 05 03 44 4a 00    	add    BYTE PTR ds:0x4a4403,al
    2757:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    275d:	00 00                	add    BYTE PTR [eax],al
    275f:	6c                   	ins    BYTE PTR es:[edi],dx
    2760:	01 00                	add    DWORD PTR [eax],eax
    2762:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2765:	4a                   	dec    edx
    2766:	0c 00                	or     al,0x0
    2768:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    276b:	f4                   	hlt    
    276c:	00 00                	add    BYTE PTR [eax],al
    276e:	00 0c 72             	add    BYTE PTR [edx+esi*2],cl
    2771:	09 00                	or     DWORD PTR [eax],eax
    2773:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2776:	00 00                	add    BYTE PTR [eax],al
    2778:	20 1a                	and    BYTE PTR [edx],bl
    277a:	00 30                	add    BYTE PTR [eax],dh
    277c:	5e                   	pop    esi
    277d:	00 00                	add    BYTE PTR [eax],al
    277f:	00 a6 0f 00 00 02    	add    BYTE PTR [esi+0x200000f],ah
    2785:	01 06                	add    DWORD PTR [esi],eax
    2787:	64 00 00             	add    BYTE PTR fs:[eax],al
    278a:	00 02                	add    BYTE PTR [edx],al
    278c:	01 06                	add    DWORD PTR [esi],eax
    278e:	5d                   	pop    ebp
    278f:	00 00                	add    BYTE PTR [eax],al
    2791:	00 02                	add    BYTE PTR [edx],al
    2793:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2799:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    27a0:	02 08                	add    cl,BYTE PTR [eax]
    27a2:	05 00 00 00 00       	add    eax,0x0
    27a7:	02 01                	add    al,BYTE PTR [ecx]
    27a9:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    27ac:	00 00                	add    BYTE PTR [eax],al
    27ae:	02 02                	add    al,BYTE PTR [edx]
    27b0:	07                   	pop    es
    27b1:	0e                   	push   cs
    27b2:	00 00                	add    BYTE PTR [eax],al
    27b4:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    27b7:	00 00                	add    BYTE PTR [eax],al
    27b9:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    27bc:	61                   	popa   
    27bd:	00 00                	add    BYTE PTR [eax],al
    27bf:	00 02                	add    BYTE PTR [edx],al
    27c1:	04 07                	add    al,0x7
    27c3:	3e 00 00             	add    BYTE PTR ds:[eax],al
    27c6:	00 02                	add    BYTE PTR [edx],al
    27c8:	08 07                	or     BYTE PTR [edi],al
    27ca:	34 00                	xor    al,0x0
    27cc:	00 00                	add    BYTE PTR [eax],al
    27ce:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    27d5:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    27d8:	9b                   	fwait
    27d9:	00 00                	add    BYTE PTR [eax],al
    27db:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    27e1:	00 06                	add    BYTE PTR [esi],al
    27e3:	25 00 00 00 02       	and    eax,0x2000000
    27e8:	01 02                	add    DWORD PTR [edx],eax
    27ea:	95                   	xchg   ebp,eax
    27eb:	00 00                	add    BYTE PTR [eax],al
    27ed:	00 02                	add    BYTE PTR [edx],al
    27ef:	04 07                	add    al,0x7
    27f1:	39 00                	cmp    DWORD PTR [eax],eax
    27f3:	00 00                	add    BYTE PTR [eax],al
    27f5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    27f8:	e1 00                	loope  27fa <sysEnter_Vector-0x12d806>
    27fa:	00 00                	add    BYTE PTR [eax],al
    27fc:	05 04 25 00 00       	add    eax,0x2504
    2801:	00 07                	add    BYTE PTR [edi],al
    2803:	6b 09 00             	imul   ecx,DWORD PTR [ecx],0x0
    2806:	00 01                	add    BYTE PTR [ecx],al
    2808:	18 3a                	sbb    BYTE PTR [edx],bh
    280a:	00 00                	add    BYTE PTR [eax],al
    280c:	00 20                	add    BYTE PTR [eax],ah
    280e:	1a 00                	sbb    al,BYTE PTR [eax]
    2810:	30 5e 00             	xor    BYTE PTR [esi+0x0],bl
    2813:	00 00                	add    BYTE PTR [eax],al
    2815:	01 9c 09 01 00 00 08 	add    DWORD PTR [ecx+ecx*1+0x8000001],ebx
    281c:	70 31                	jo     284f <sysEnter_Vector-0x12d7b1>
    281e:	00 01                	add    BYTE PTR [ecx],al
    2820:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2823:	00 00                	add    BYTE PTR [eax],al
    2825:	02 91 00 08 70 32    	add    dl,BYTE PTR [ecx+0x32700800]
    282b:	00 01                	add    BYTE PTR [ecx],al
    282d:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2830:	00 00                	add    BYTE PTR [eax],al
    2832:	02 91 04 09 73 31    	add    dl,BYTE PTR [ecx+0x31730904]
    2838:	00 01                	add    BYTE PTR [ecx],al
    283a:	1a 09                	sbb    cl,BYTE PTR [ecx]
    283c:	01 00                	add    DWORD PTR [eax],eax
    283e:	00 01                	add    BYTE PTR [ecx],al
    2840:	53                   	push   ebx
    2841:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    2844:	00 01                	add    BYTE PTR [ecx],al
    2846:	1b 09                	sbb    ecx,DWORD PTR [ecx]
    2848:	01 00                	add    DWORD PTR [eax],eax
    284a:	00 01                	add    BYTE PTR [ecx],al
    284c:	56                   	push   esi
    284d:	09 63 31             	or     DWORD PTR [ebx+0x31],esp
    2850:	00 01                	add    BYTE PTR [ecx],al
    2852:	1c 48                	sbb    al,0x48
    2854:	00 00                	add    BYTE PTR [eax],al
    2856:	00 02                	add    BYTE PTR [edx],al
    2858:	91                   	xchg   ecx,eax
    2859:	6f                   	outs   dx,DWORD PTR ds:[esi]
    285a:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    285d:	00 01                	add    BYTE PTR [ecx],al
    285f:	1c 48                	sbb    al,0x48
    2861:	00 00                	add    BYTE PTR [eax],al
    2863:	00 02                	add    BYTE PTR [edx],al
    2865:	91                   	xchg   ecx,eax
    2866:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2867:	00 05 04 0f 01 00    	add    BYTE PTR ds:0x10f04,al
    286d:	00 06                	add    BYTE PTR [esi],al
    286f:	48                   	dec    eax
    2870:	00 00                	add    BYTE PTR [eax],al
    2872:	00 0a                	add    BYTE PTR [edx],cl
    2874:	4b                   	dec    ebx
    2875:	00 00                	add    BYTE PTR [eax],al
    2877:	00 02                	add    BYTE PTR [edx],al
    2879:	34 56                	xor    al,0x56
    287b:	00 00                	add    BYTE PTR [eax],al
    287d:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    2883:	30 0a                	xor    BYTE PTR [edx],cl
    2885:	af                   	scas   eax,DWORD PTR es:[edi]
    2886:	00 00                	add    BYTE PTR [eax],al
    2888:	00 02                	add    BYTE PTR [edx],al
    288a:	35 56 00 00 00       	xor    eax,0x56
    288f:	05 03 40 4a 00       	add    eax,0x4a4003
    2894:	30 0a                	xor    BYTE PTR [edx],cl
    2896:	5b                   	pop    ebx
    2897:	01 00                	add    DWORD PTR [eax],eax
    2899:	00 02                	add    BYTE PTR [edx],al
    289b:	36                   	ss
    289c:	56                   	push   esi
    289d:	00 00                	add    BYTE PTR [eax],al
    289f:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    28a5:	30 0a                	xor    BYTE PTR [edx],cl
    28a7:	54                   	push   esp
    28a8:	00 00                	add    BYTE PTR [eax],al
    28aa:	00 02                	add    BYTE PTR [edx],al
    28ac:	37                   	aaa    
    28ad:	6f                   	outs   dx,DWORD PTR ds:[esi]
    28ae:	00 00                	add    BYTE PTR [eax],al
    28b0:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    28b6:	30 0a                	xor    BYTE PTR [edx],cl
    28b8:	28 00                	sub    BYTE PTR [eax],al
    28ba:	00 00                	add    BYTE PTR [eax],al
    28bc:	03 4c 69 01          	add    ecx,DWORD PTR [ecx+ebp*2+0x1]
    28c0:	00 00                	add    BYTE PTR [eax],al
    28c2:	05 03 44 4a 00       	add    eax,0x4a4403
    28c7:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    28cd:	00 00                	add    BYTE PTR [eax],al
    28cf:	c9                   	leave  
    28d0:	01 00                	add    DWORD PTR [eax],eax
    28d2:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    28d5:	dc 0c 00             	fmul   QWORD PTR [eax+eax*1]
    28d8:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    28db:	f4                   	hlt    
    28dc:	00 00                	add    BYTE PTR [eax],al
    28de:	00 0c a4             	add    BYTE PTR [esp+eiz*4],cl
    28e1:	09 00                	or     DWORD PTR [eax],eax
    28e3:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    28e6:	00 00                	add    BYTE PTR [eax],al
    28e8:	80 1a 00             	sbb    BYTE PTR [edx],0x0
    28eb:	30 c7                	xor    bh,al
    28ed:	00 00                	add    BYTE PTR [eax],al
    28ef:	00 65 10             	add    BYTE PTR [ebp+0x10],ah
    28f2:	00 00                	add    BYTE PTR [eax],al
    28f4:	02 01                	add    al,BYTE PTR [ecx]
    28f6:	06                   	push   es
    28f7:	64 00 00             	add    BYTE PTR fs:[eax],al
    28fa:	00 02                	add    BYTE PTR [edx],al
    28fc:	01 06                	add    DWORD PTR [esi],eax
    28fe:	5d                   	pop    ebp
    28ff:	00 00                	add    BYTE PTR [eax],al
    2901:	00 02                	add    BYTE PTR [edx],al
    2903:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2909:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2910:	02 08                	add    cl,BYTE PTR [eax]
    2912:	05 00 00 00 00       	add    eax,0x0
    2917:	02 01                	add    al,BYTE PTR [ecx]
    2919:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    291c:	00 00                	add    BYTE PTR [eax],al
    291e:	02 02                	add    al,BYTE PTR [edx]
    2920:	07                   	pop    es
    2921:	0e                   	push   cs
    2922:	00 00                	add    BYTE PTR [eax],al
    2924:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2927:	00 00                	add    BYTE PTR [eax],al
    2929:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    292c:	61                   	popa   
    292d:	00 00                	add    BYTE PTR [eax],al
    292f:	00 02                	add    BYTE PTR [edx],al
    2931:	04 07                	add    al,0x7
    2933:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2936:	00 02                	add    BYTE PTR [edx],al
    2938:	08 07                	or     BYTE PTR [edi],al
    293a:	34 00                	xor    al,0x0
    293c:	00 00                	add    BYTE PTR [eax],al
    293e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2945:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2948:	9b                   	fwait
    2949:	00 00                	add    BYTE PTR [eax],al
    294b:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2951:	00 06                	add    BYTE PTR [esi],al
    2953:	25 00 00 00 02       	and    eax,0x2000000
    2958:	01 02                	add    DWORD PTR [edx],eax
    295a:	95                   	xchg   ebp,eax
    295b:	00 00                	add    BYTE PTR [eax],al
    295d:	00 02                	add    BYTE PTR [edx],al
    295f:	04 07                	add    al,0x7
    2961:	39 00                	cmp    DWORD PTR [eax],eax
    2963:	00 00                	add    BYTE PTR [eax],al
    2965:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2968:	e1 00                	loope  296a <sysEnter_Vector-0x12d696>
    296a:	00 00                	add    BYTE PTR [eax],al
    296c:	05 04 25 00 00       	add    eax,0x2504
    2971:	00 07                	add    BYTE PTR [edi],al
    2973:	87 09                	xchg   DWORD PTR [ecx],ecx
    2975:	00 00                	add    BYTE PTR [eax],al
    2977:	01 04 9d 00 00 00 80 	add    DWORD PTR [ebx*4-0x80000000],eax
    297e:	1a 00                	sbb    al,BYTE PTR [eax]
    2980:	30 40 00             	xor    BYTE PTR [eax+0x0],al
    2983:	00 00                	add    BYTE PTR [eax],al
    2985:	01 9c e3 00 00 00 08 	add    DWORD PTR [ebx+eiz*8+0x8000000],ebx
    298c:	73 31                	jae    29bf <sysEnter_Vector-0x12d641>
    298e:	00 01                	add    BYTE PTR [ecx],al
    2990:	04 9d                	add    al,0x9d
    2992:	00 00                	add    BYTE PTR [eax],al
    2994:	00 02                	add    BYTE PTR [edx],al
    2996:	91                   	xchg   ecx,eax
    2997:	00 08                	add    BYTE PTR [eax],cl
    2999:	73 32                	jae    29cd <sysEnter_Vector-0x12d633>
    299b:	00 01                	add    BYTE PTR [ecx],al
    299d:	04 7d                	add    al,0x7d
    299f:	00 00                	add    BYTE PTR [eax],al
    29a1:	00 02                	add    BYTE PTR [edx],al
    29a3:	91                   	xchg   ecx,eax
    29a4:	04 09                	add    al,0x9
    29a6:	73 00                	jae    29a8 <sysEnter_Vector-0x12d658>
    29a8:	01 06                	add    DWORD PTR [esi],eax
    29aa:	9d                   	popf   
    29ab:	00 00                	add    BYTE PTR [eax],al
    29ad:	00 02                	add    BYTE PTR [edx],al
    29af:	91                   	xchg   ecx,eax
    29b0:	74 00                	je     29b2 <sysEnter_Vector-0x12d64e>
    29b2:	07                   	pop    es
    29b3:	9c                   	pushf  
    29b4:	09 00                	or     DWORD PTR [eax],eax
    29b6:	00 01                	add    BYTE PTR [ecx],al
    29b8:	0e                   	push   cs
    29b9:	9d                   	popf   
    29ba:	00 00                	add    BYTE PTR [eax],al
    29bc:	00 c0                	add    al,al
    29be:	1a 00                	sbb    al,BYTE PTR [eax]
    29c0:	30 40 00             	xor    BYTE PTR [eax+0x0],al
    29c3:	00 00                	add    BYTE PTR [eax],al
    29c5:	01 9c 23 01 00 00 08 	add    DWORD PTR [ebx+eiz*1+0x8000001],ebx
    29cc:	73 31                	jae    29ff <sysEnter_Vector-0x12d601>
    29ce:	00 01                	add    BYTE PTR [ecx],al
    29d0:	0e                   	push   cs
    29d1:	9d                   	popf   
    29d2:	00 00                	add    BYTE PTR [eax],al
    29d4:	00 02                	add    BYTE PTR [edx],al
    29d6:	91                   	xchg   ecx,eax
    29d7:	00 08                	add    BYTE PTR [eax],cl
    29d9:	73 32                	jae    2a0d <sysEnter_Vector-0x12d5f3>
    29db:	00 01                	add    BYTE PTR [ecx],al
    29dd:	0e                   	push   cs
    29de:	7d 00                	jge    29e0 <sysEnter_Vector-0x12d620>
    29e0:	00 00                	add    BYTE PTR [eax],al
    29e2:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    29e8:	01 10                	add    DWORD PTR [eax],edx
    29ea:	9d                   	popf   
    29eb:	00 00                	add    BYTE PTR [eax],al
    29ed:	00 02                	add    BYTE PTR [edx],al
    29ef:	91                   	xchg   ecx,eax
    29f0:	74 00                	je     29f2 <sysEnter_Vector-0x12d60e>
    29f2:	07                   	pop    es
    29f3:	94                   	xchg   esp,eax
    29f4:	09 00                	or     DWORD PTR [eax],eax
    29f6:	00 01                	add    BYTE PTR [ecx],al
    29f8:	18 9d 00 00 00 00    	sbb    BYTE PTR [ebp+0x0],bl
    29fe:	1b 00                	sbb    eax,DWORD PTR [eax]
    2a00:	30 47 00             	xor    BYTE PTR [edi+0x0],al
    2a03:	00 00                	add    BYTE PTR [eax],al
    2a05:	01 9c 71 01 00 00 08 	add    DWORD PTR [ecx+esi*2+0x8000001],ebx
    2a0c:	73 31                	jae    2a3f <sysEnter_Vector-0x12d5c1>
    2a0e:	00 01                	add    BYTE PTR [ecx],al
    2a10:	18 9d 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],bl
    2a16:	91                   	xchg   ecx,eax
    2a17:	00 08                	add    BYTE PTR [eax],cl
    2a19:	73 32                	jae    2a4d <sysEnter_Vector-0x12d5b3>
    2a1b:	00 01                	add    BYTE PTR [ecx],al
    2a1d:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2a20:	00 00                	add    BYTE PTR [eax],al
    2a22:	02 91 04 0a 8e 09    	add    dl,BYTE PTR [ecx+0x98e0a04]
    2a28:	00 00                	add    BYTE PTR [eax],al
    2a2a:	01 18                	add    DWORD PTR [eax],ebx
    2a2c:	61                   	popa   
    2a2d:	00 00                	add    BYTE PTR [eax],al
    2a2f:	00 02                	add    BYTE PTR [edx],al
    2a31:	91                   	xchg   ecx,eax
    2a32:	08 09                	or     BYTE PTR [ecx],cl
    2a34:	73 00                	jae    2a36 <sysEnter_Vector-0x12d5ca>
    2a36:	01 1a                	add    DWORD PTR [edx],ebx
    2a38:	9d                   	popf   
    2a39:	00 00                	add    BYTE PTR [eax],al
    2a3b:	00 02                	add    BYTE PTR [edx],al
    2a3d:	91                   	xchg   ecx,eax
    2a3e:	74 00                	je     2a40 <sysEnter_Vector-0x12d5c0>
    2a40:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    2a43:	00 00                	add    BYTE PTR [eax],al
    2a45:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2a48:	00 00                	add    BYTE PTR [eax],al
    2a4a:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    2a50:	30 0b                	xor    BYTE PTR [ebx],cl
    2a52:	af                   	scas   eax,DWORD PTR es:[edi]
    2a53:	00 00                	add    BYTE PTR [eax],al
    2a55:	00 02                	add    BYTE PTR [edx],al
    2a57:	35 56 00 00 00       	xor    eax,0x56
    2a5c:	05 03 40 4a 00       	add    eax,0x4a4003
    2a61:	30 0b                	xor    BYTE PTR [ebx],cl
    2a63:	5b                   	pop    ebx
    2a64:	01 00                	add    DWORD PTR [eax],eax
    2a66:	00 02                	add    BYTE PTR [edx],al
    2a68:	36                   	ss
    2a69:	56                   	push   esi
    2a6a:	00 00                	add    BYTE PTR [eax],al
    2a6c:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    2a72:	30 0b                	xor    BYTE PTR [ebx],cl
    2a74:	54                   	push   esp
    2a75:	00 00                	add    BYTE PTR [eax],al
    2a77:	00 02                	add    BYTE PTR [edx],al
    2a79:	37                   	aaa    
    2a7a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2a7b:	00 00                	add    BYTE PTR [eax],al
    2a7d:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    2a83:	30 0b                	xor    BYTE PTR [ebx],cl
    2a85:	28 00                	sub    BYTE PTR [eax],al
    2a87:	00 00                	add    BYTE PTR [eax],al
    2a89:	03 4c c6 01          	add    ecx,DWORD PTR [esi+eax*8+0x1]
    2a8d:	00 00                	add    BYTE PTR [eax],al
    2a8f:	05 03 44 4a 00       	add    eax,0x4a4403
    2a94:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2a9a:	00 00                	add    BYTE PTR [eax],al
    2a9c:	4c                   	dec    esp
    2a9d:	01 00                	add    DWORD PTR [eax],eax
    2a9f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2aa2:	7d 0d                	jge    2ab1 <sysEnter_Vector-0x12d54f>
    2aa4:	00 00                	add    BYTE PTR [eax],al
    2aa6:	04 01                	add    al,0x1
    2aa8:	f4                   	hlt    
    2aa9:	00 00                	add    BYTE PTR [eax],al
    2aab:	00 0c ce             	add    BYTE PTR [esi+ecx*8],cl
    2aae:	09 00                	or     DWORD PTR [eax],eax
    2ab0:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2ab3:	00 00                	add    BYTE PTR [eax],al
    2ab5:	48                   	dec    eax
    2ab6:	1b 00                	sbb    eax,DWORD PTR [eax]
    2ab8:	30 89 00 00 00 45    	xor    BYTE PTR [ecx+0x45000000],cl
    2abe:	11 00                	adc    DWORD PTR [eax],eax
    2ac0:	00 02                	add    BYTE PTR [edx],al
    2ac2:	01 06                	add    DWORD PTR [esi],eax
    2ac4:	64 00 00             	add    BYTE PTR fs:[eax],al
    2ac7:	00 02                	add    BYTE PTR [edx],al
    2ac9:	01 06                	add    DWORD PTR [esi],eax
    2acb:	5d                   	pop    ebp
    2acc:	00 00                	add    BYTE PTR [eax],al
    2ace:	00 02                	add    BYTE PTR [edx],al
    2ad0:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2ad6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2add:	02 08                	add    cl,BYTE PTR [eax]
    2adf:	05 00 00 00 00       	add    eax,0x0
    2ae4:	02 01                	add    al,BYTE PTR [ecx]
    2ae6:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2ae9:	00 00                	add    BYTE PTR [eax],al
    2aeb:	02 02                	add    al,BYTE PTR [edx]
    2aed:	07                   	pop    es
    2aee:	0e                   	push   cs
    2aef:	00 00                	add    BYTE PTR [eax],al
    2af1:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2af4:	00 00                	add    BYTE PTR [eax],al
    2af6:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2af9:	61                   	popa   
    2afa:	00 00                	add    BYTE PTR [eax],al
    2afc:	00 02                	add    BYTE PTR [edx],al
    2afe:	04 07                	add    al,0x7
    2b00:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2b03:	00 02                	add    BYTE PTR [edx],al
    2b05:	08 07                	or     BYTE PTR [edi],al
    2b07:	34 00                	xor    al,0x0
    2b09:	00 00                	add    BYTE PTR [eax],al
    2b0b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2b12:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2b15:	9b                   	fwait
    2b16:	00 00                	add    BYTE PTR [eax],al
    2b18:	00 02                	add    BYTE PTR [edx],al
    2b1a:	01 02                	add    DWORD PTR [edx],eax
    2b1c:	95                   	xchg   ebp,eax
    2b1d:	00 00                	add    BYTE PTR [eax],al
    2b1f:	00 02                	add    BYTE PTR [edx],al
    2b21:	04 07                	add    al,0x7
    2b23:	39 00                	cmp    DWORD PTR [eax],eax
    2b25:	00 00                	add    BYTE PTR [eax],al
    2b27:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2b2a:	e1 00                	loope  2b2c <sysEnter_Vector-0x12d4d4>
    2b2c:	00 00                	add    BYTE PTR [eax],al
    2b2e:	05 04 25 00 00       	add    eax,0x2504
    2b33:	00 06                	add    BYTE PTR [esi],al
    2b35:	b9 09 00 00 01       	mov    ecx,0x1000009
    2b3a:	09 7d 00             	or     DWORD PTR [ebp+0x0],edi
    2b3d:	00 00                	add    BYTE PTR [eax],al
    2b3f:	48                   	dec    eax
    2b40:	1b 00                	sbb    eax,DWORD PTR [eax]
    2b42:	30 30                	xor    BYTE PTR [eax],dh
    2b44:	00 00                	add    BYTE PTR [eax],al
    2b46:	00 01                	add    BYTE PTR [ecx],al
    2b48:	9c                   	pushf  
    2b49:	be 00 00 00 07       	mov    esi,0x7000000
    2b4e:	63 00                	arpl   WORD PTR [eax],ax
    2b50:	01 09                	add    DWORD PTR [ecx],ecx
    2b52:	25 00 00 00 02       	and    eax,0x2000000
    2b57:	91                   	xchg   ecx,eax
    2b58:	74 00                	je     2b5a <sysEnter_Vector-0x12d4a6>
    2b5a:	08 c5                	or     ch,al
    2b5c:	09 00                	or     DWORD PTR [eax],eax
    2b5e:	00 01                	add    BYTE PTR [ecx],al
    2b60:	0e                   	push   cs
    2b61:	7d 00                	jge    2b63 <sysEnter_Vector-0x12d49d>
    2b63:	00 00                	add    BYTE PTR [eax],al
    2b65:	78 1b                	js     2b82 <sysEnter_Vector-0x12d47e>
    2b67:	00 30                	add    BYTE PTR [eax],dh
    2b69:	59                   	pop    ecx
    2b6a:	00 00                	add    BYTE PTR [eax],al
    2b6c:	00 01                	add    BYTE PTR [ecx],al
    2b6e:	9c                   	pushf  
    2b6f:	f4                   	hlt    
    2b70:	00 00                	add    BYTE PTR [eax],al
    2b72:	00 07                	add    BYTE PTR [edi],al
    2b74:	73 74                	jae    2bea <sysEnter_Vector-0x12d416>
    2b76:	72 00                	jb     2b78 <sysEnter_Vector-0x12d488>
    2b78:	01 0e                	add    DWORD PTR [esi],ecx
    2b7a:	92                   	xchg   edx,eax
    2b7b:	00 00                	add    BYTE PTR [eax],al
    2b7d:	00 02                	add    BYTE PTR [edx],al
    2b7f:	91                   	xchg   ecx,eax
    2b80:	00 09                	add    BYTE PTR [ecx],cl
    2b82:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    2b85:	00 01                	add    BYTE PTR [ecx],al
    2b87:	10 3a                	adc    BYTE PTR [edx],bh
    2b89:	00 00                	add    BYTE PTR [eax],al
    2b8b:	00 02                	add    BYTE PTR [edx],al
    2b8d:	91                   	xchg   ecx,eax
    2b8e:	74 00                	je     2b90 <sysEnter_Vector-0x12d470>
    2b90:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    2b93:	00 00                	add    BYTE PTR [eax],al
    2b95:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2b98:	00 00                	add    BYTE PTR [eax],al
    2b9a:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    2ba0:	30 0a                	xor    BYTE PTR [edx],cl
    2ba2:	af                   	scas   eax,DWORD PTR es:[edi]
    2ba3:	00 00                	add    BYTE PTR [eax],al
    2ba5:	00 02                	add    BYTE PTR [edx],al
    2ba7:	35 56 00 00 00       	xor    eax,0x56
    2bac:	05 03 40 4a 00       	add    eax,0x4a4003
    2bb1:	30 0a                	xor    BYTE PTR [edx],cl
    2bb3:	5b                   	pop    ebx
    2bb4:	01 00                	add    DWORD PTR [eax],eax
    2bb6:	00 02                	add    BYTE PTR [edx],al
    2bb8:	36                   	ss
    2bb9:	56                   	push   esi
    2bba:	00 00                	add    BYTE PTR [eax],al
    2bbc:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    2bc2:	30 0a                	xor    BYTE PTR [edx],cl
    2bc4:	54                   	push   esp
    2bc5:	00 00                	add    BYTE PTR [eax],al
    2bc7:	00 02                	add    BYTE PTR [edx],al
    2bc9:	37                   	aaa    
    2bca:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2bcb:	00 00                	add    BYTE PTR [eax],al
    2bcd:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    2bd3:	30 0a                	xor    BYTE PTR [edx],cl
    2bd5:	28 00                	sub    BYTE PTR [eax],al
    2bd7:	00 00                	add    BYTE PTR [eax],al
    2bd9:	03 4c 49 01          	add    ecx,DWORD PTR [ecx+ecx*2+0x1]
    2bdd:	00 00                	add    BYTE PTR [eax],al
    2bdf:	05 03 44 4a 00       	add    eax,0x4a4403
    2be4:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    2bea:	00 00                	add    BYTE PTR [eax],al
    2bec:	ca 00 00             	retf   0x0
    2bef:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2bf2:	24 0e                	and    al,0xe
    2bf4:	00 00                	add    BYTE PTR [eax],al
    2bf6:	04 01                	add    al,0x1
    2bf8:	f4                   	hlt    
    2bf9:	00 00                	add    BYTE PTR [eax],al
    2bfb:	00 0c ec             	add    BYTE PTR [esp+ebp*8],cl
    2bfe:	09 00                	or     DWORD PTR [eax],eax
    2c00:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2c03:	00 00                	add    BYTE PTR [eax],al
    2c05:	d4 1b                	aam    0x1b
    2c07:	00 30                	add    BYTE PTR [eax],dh
    2c09:	62 00                	bound  eax,QWORD PTR [eax]
    2c0b:	00 00                	add    BYTE PTR [eax],al
    2c0d:	14 12                	adc    al,0x12
    2c0f:	00 00                	add    BYTE PTR [eax],al
    2c11:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    2c18:	03 9f 04 00 00 02    	add    ebx,DWORD PTR [edi+0x2000004]
    2c1e:	d8 37                	fdiv   DWORD PTR [edi]
    2c20:	00 00                	add    BYTE PTR [eax],al
    2c22:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2c25:	07                   	pop    es
    2c26:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2c29:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2c2c:	05 05 00 00 00       	add    eax,0x5
    2c31:	04 08                	add    al,0x8
    2c33:	05 00 00 00 00       	add    eax,0x0
    2c38:	04 0c                	add    al,0xc
    2c3a:	04 9b                	add    al,0x9b
    2c3c:	00 00                	add    BYTE PTR [eax],al
    2c3e:	00 05 e5 09 00 00    	add    BYTE PTR ds:0x9e5,al
    2c44:	01 03                	add    DWORD PTR [ebx],eax
    2c46:	2c 00                	sub    al,0x0
    2c48:	00 00                	add    BYTE PTR [eax],al
    2c4a:	d4 1b                	aam    0x1b
    2c4c:	00 30                	add    BYTE PTR [eax],dh
    2c4e:	31 00                	xor    DWORD PTR [eax],eax
    2c50:	00 00                	add    BYTE PTR [eax],al
    2c52:	01 9c 89 00 00 00 06 	add    DWORD PTR [ecx+ecx*4+0x6000000],ebx
    2c59:	73 74                	jae    2ccf <sysEnter_Vector-0x12d331>
    2c5b:	72 00                	jb     2c5d <sysEnter_Vector-0x12d3a3>
    2c5d:	01 03                	add    DWORD PTR [ebx],eax
    2c5f:	89 00                	mov    DWORD PTR [eax],eax
    2c61:	00 00                	add    BYTE PTR [eax],al
    2c63:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2c69:	74 00                	je     2c6b <sysEnter_Vector-0x12d395>
    2c6b:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    2c6e:	00 00                	add    BYTE PTR [eax],al
    2c70:	00 02                	add    BYTE PTR [edx],al
    2c72:	91                   	xchg   ecx,eax
    2c73:	74 00                	je     2c75 <sysEnter_Vector-0x12d38b>
    2c75:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    2c78:	00 00                	add    BYTE PTR [eax],al
    2c7a:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2c7d:	06                   	push   es
    2c7e:	64 00 00             	add    BYTE PTR fs:[eax],al
    2c81:	00 09                	add    BYTE PTR [ecx],cl
    2c83:	8f 00                	pop    DWORD PTR [eax]
    2c85:	00 00                	add    BYTE PTR [eax],al
    2c87:	0a 01                	or     al,BYTE PTR [ecx]
    2c89:	0a 00                	or     al,BYTE PTR [eax]
    2c8b:	00 01                	add    BYTE PTR [ecx],al
    2c8d:	0a 2c 00             	or     ch,BYTE PTR [eax+eax*1]
    2c90:	00 00                	add    BYTE PTR [eax],al
    2c92:	05 1c 00 30 31       	add    eax,0x3130001c
    2c97:	00 00                	add    BYTE PTR [eax],al
    2c99:	00 01                	add    BYTE PTR [ecx],al
    2c9b:	9c                   	pushf  
    2c9c:	06                   	push   es
    2c9d:	73 74                	jae    2d13 <sysEnter_Vector-0x12d2ed>
    2c9f:	72 00                	jb     2ca1 <sysEnter_Vector-0x12d35f>
    2ca1:	01 0a                	add    DWORD PTR [edx],ecx
    2ca3:	89 00                	mov    DWORD PTR [eax],eax
    2ca5:	00 00                	add    BYTE PTR [eax],al
    2ca7:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2cad:	74 00                	je     2caf <sysEnter_Vector-0x12d351>
    2caf:	01 0b                	add    DWORD PTR [ebx],ecx
    2cb1:	2c 00                	sub    al,0x0
    2cb3:	00 00                	add    BYTE PTR [eax],al
    2cb5:	02 91 74 00 00 de    	add    dl,BYTE PTR [ecx-0x21ffff8c]
    2cbb:	00 00                	add    BYTE PTR [eax],al
    2cbd:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2cc0:	bf 0e 00 00 04       	mov    edi,0x400000e
    2cc5:	01 f4                	add    esp,esi
    2cc7:	00 00                	add    BYTE PTR [eax],al
    2cc9:	00 0c 1a             	add    BYTE PTR [edx+ebx*1],cl
    2ccc:	0a 00                	or     al,BYTE PTR [eax]
    2cce:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2cd1:	00 00                	add    BYTE PTR [eax],al
    2cd3:	38 1c 00             	cmp    BYTE PTR [eax+eax*1],bl
    2cd6:	30 ce                	xor    dh,cl
    2cd8:	00 00                	add    BYTE PTR [eax],al
    2cda:	00 ac 12 00 00 02 04 	add    BYTE PTR [edx+edx*1+0x4020000],ch
    2ce1:	05 69 6e 74 00       	add    eax,0x746e69
    2ce6:	03 9f 04 00 00 02    	add    ebx,DWORD PTR [edi+0x2000004]
    2cec:	d8 37                	fdiv   DWORD PTR [edi]
    2cee:	00 00                	add    BYTE PTR [eax],al
    2cf0:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2cf3:	07                   	pop    es
    2cf4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2cf7:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2cfa:	05 05 00 00 00       	add    eax,0x5
    2cff:	04 08                	add    al,0x8
    2d01:	05 00 00 00 00       	add    eax,0x0
    2d06:	04 0c                	add    al,0xc
    2d08:	04 9b                	add    al,0x9b
    2d0a:	00 00                	add    BYTE PTR [eax],al
    2d0c:	00 05 12 0a 00 00    	add    BYTE PTR ds:0xa12,al
    2d12:	01 0c 25 00 00 00 38 	add    DWORD PTR [eiz*1+0x38000000],ecx
    2d19:	1c 00                	sbb    al,0x0
    2d1b:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2d1e:	00 00                	add    BYTE PTR [eax],al
    2d20:	01 9c 93 00 00 00 06 	add    DWORD PTR [ebx+edx*4+0x6000000],ebx
    2d27:	73 31                	jae    2d5a <sysEnter_Vector-0x12d2a6>
    2d29:	00 01                	add    BYTE PTR [ecx],al
    2d2b:	0c 93                	or     al,0x93
    2d2d:	00 00                	add    BYTE PTR [eax],al
    2d2f:	00 02                	add    BYTE PTR [edx],al
    2d31:	91                   	xchg   ecx,eax
    2d32:	00 06                	add    BYTE PTR [esi],al
    2d34:	73 32                	jae    2d68 <sysEnter_Vector-0x12d298>
    2d36:	00 01                	add    BYTE PTR [ecx],al
    2d38:	0c 93                	or     al,0x93
    2d3a:	00 00                	add    BYTE PTR [eax],al
    2d3c:	00 02                	add    BYTE PTR [edx],al
    2d3e:	91                   	xchg   ecx,eax
    2d3f:	04 06                	add    al,0x6
    2d41:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2d42:	00 01                	add    BYTE PTR [ecx],al
    2d44:	0c 2c                	or     al,0x2c
    2d46:	00 00                	add    BYTE PTR [eax],al
    2d48:	00 02                	add    BYTE PTR [edx],al
    2d4a:	91                   	xchg   ecx,eax
    2d4b:	08 00                	or     BYTE PTR [eax],al
    2d4d:	07                   	pop    es
    2d4e:	04 a0                	add    al,0xa0
    2d50:	00 00                	add    BYTE PTR [eax],al
    2d52:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2d55:	06                   	push   es
    2d56:	64 00 00             	add    BYTE PTR fs:[eax],al
    2d59:	00 08                	add    BYTE PTR [eax],cl
    2d5b:	99                   	cdq    
    2d5c:	00 00                	add    BYTE PTR [eax],al
    2d5e:	00 09                	add    BYTE PTR [ecx],cl
    2d60:	09 0a                	or     DWORD PTR [edx],ecx
    2d62:	00 00                	add    BYTE PTR [eax],al
    2d64:	01 16                	add    DWORD PTR [esi],edx
    2d66:	25 00 00 00 9f       	and    eax,0x9f000000
    2d6b:	1c 00                	sbb    al,0x0
    2d6d:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2d70:	00 00                	add    BYTE PTR [eax],al
    2d72:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    2d79:	16                   	push   ss
    2d7a:	93                   	xchg   ebx,eax
    2d7b:	00 00                	add    BYTE PTR [eax],al
    2d7d:	00 02                	add    BYTE PTR [edx],al
    2d7f:	91                   	xchg   ecx,eax
    2d80:	00 06                	add    BYTE PTR [esi],al
    2d82:	73 32                	jae    2db6 <sysEnter_Vector-0x12d24a>
    2d84:	00 01                	add    BYTE PTR [ecx],al
    2d86:	16                   	push   ss
    2d87:	93                   	xchg   ebx,eax
    2d88:	00 00                	add    BYTE PTR [eax],al
    2d8a:	00 02                	add    BYTE PTR [edx],al
    2d8c:	91                   	xchg   ecx,eax
    2d8d:	04 06                	add    al,0x6
    2d8f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2d90:	00 01                	add    BYTE PTR [ecx],al
    2d92:	16                   	push   ss
    2d93:	2c 00                	sub    al,0x0
    2d95:	00 00                	add    BYTE PTR [eax],al
    2d97:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    2d9d:	00 00                	add    BYTE PTR [eax],al
    2d9f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2da2:	4b                   	dec    ebx
    2da3:	0f 00 00             	sldt   WORD PTR [eax]
    2da6:	04 01                	add    al,0x1
    2da8:	f4                   	hlt    
    2da9:	00 00                	add    BYTE PTR [eax],al
    2dab:	00 0c 30             	add    BYTE PTR [eax+esi*1],cl
    2dae:	0a 00                	or     al,BYTE PTR [eax]
    2db0:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2db3:	00 00                	add    BYTE PTR [eax],al
    2db5:	08 1d 00 30 80 00    	or     BYTE PTR ds:0x803000,bl
    2dbb:	00 00                	add    BYTE PTR [eax],al
    2dbd:	71 13                	jno    2dd2 <sysEnter_Vector-0x12d22e>
    2dbf:	00 00                	add    BYTE PTR [eax],al
    2dc1:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    2dc8:	03 9f 04 00 00 02    	add    ebx,DWORD PTR [edi+0x2000004]
    2dce:	d8 37                	fdiv   DWORD PTR [edi]
    2dd0:	00 00                	add    BYTE PTR [eax],al
    2dd2:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2dd5:	07                   	pop    es
    2dd6:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2dd9:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2ddc:	05 05 00 00 00       	add    eax,0x5
    2de1:	04 08                	add    al,0x8
    2de3:	05 00 00 00 00       	add    eax,0x0
    2de8:	04 0c                	add    al,0xc
    2dea:	04 9b                	add    al,0x9b
    2dec:	00 00                	add    BYTE PTR [eax],al
    2dee:	00 05 46 0a 00 00    	add    BYTE PTR ds:0xa46,al
    2df4:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    2dfa:	08 1d 00 30 60 00    	or     BYTE PTR ds:0x603000,bl
    2e00:	00 00                	add    BYTE PTR [eax],al
    2e02:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    2e09:	73 31                	jae    2e3c <sysEnter_Vector-0x12d1c4>
    2e0b:	00 01                	add    BYTE PTR [ecx],al
    2e0d:	0d 9f 00 00 00       	or     eax,0x9f
    2e12:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    2e18:	00 01                	add    BYTE PTR [ecx],al
    2e1a:	0d ac 00 00 00       	or     eax,0xac
    2e1f:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    2e25:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    2e2b:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    2e31:	01 0f                	add    DWORD PTR [edi],ecx
    2e33:	9f                   	lahf   
    2e34:	00 00                	add    BYTE PTR [eax],al
    2e36:	00 02                	add    BYTE PTR [edx],al
    2e38:	91                   	xchg   ecx,eax
    2e39:	74 00                	je     2e3b <sysEnter_Vector-0x12d1c5>
    2e3b:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    2e42:	01 06                	add    DWORD PTR [esi],eax
    2e44:	64 00 00             	add    BYTE PTR fs:[eax],al
    2e47:	00 08                	add    BYTE PTR [eax],cl
    2e49:	04 b2                	add    al,0xb2
    2e4b:	00 00                	add    BYTE PTR [eax],al
    2e4d:	00 09                	add    BYTE PTR [ecx],cl
    2e4f:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2e50:	00 00                	add    BYTE PTR [eax],al
    2e52:	00 0a                	add    BYTE PTR [edx],cl
    2e54:	4f                   	dec    edi
    2e55:	0a 00                	or     al,BYTE PTR [eax]
    2e57:	00 01                	add    BYTE PTR [ecx],al
    2e59:	1b 9f 00 00 00 68    	sbb    ebx,DWORD PTR [edi+0x68000000]
    2e5f:	1d 00 30 20 00       	sbb    eax,0x203000
    2e64:	00 00                	add    BYTE PTR [eax],al
    2e66:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    2e6d:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    2e73:	91                   	xchg   ecx,eax
    2e74:	00 06                	add    BYTE PTR [esi],al
    2e76:	73 32                	jae    2eaa <sysEnter_Vector-0x12d156>
    2e78:	00 01                	add    BYTE PTR [ecx],al
    2e7a:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    2e81:	04 06                	add    al,0x6
    2e83:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2e84:	00 01                	add    BYTE PTR [ecx],al
    2e86:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    2e89:	00 00                	add    BYTE PTR [eax],al
    2e8b:	02 91 08 00 00 92    	add    dl,BYTE PTR [ecx-0x6dfffff8]
    2e91:	01 00                	add    DWORD PTR [eax],eax
    2e93:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2e96:	e6 0f                	out    0xf,al
    2e98:	00 00                	add    BYTE PTR [eax],al
    2e9a:	04 01                	add    al,0x1
    2e9c:	f4                   	hlt    
    2e9d:	00 00                	add    BYTE PTR [eax],al
    2e9f:	00 0c 57             	add    BYTE PTR [edi+edx*2],cl
    2ea2:	0a 00                	or     al,BYTE PTR [eax]
    2ea4:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2ea7:	00 00                	add    BYTE PTR [eax],al
    2ea9:	88 1d 00 30 7d 01    	mov    BYTE PTR ds:0x17d3000,bl
    2eaf:	00 00                	add    BYTE PTR [eax],al
    2eb1:	16                   	push   ss
    2eb2:	14 00                	adc    al,0x0
    2eb4:	00 02                	add    BYTE PTR [edx],al
    2eb6:	01 06                	add    DWORD PTR [esi],eax
    2eb8:	64 00 00             	add    BYTE PTR fs:[eax],al
    2ebb:	00 02                	add    BYTE PTR [edx],al
    2ebd:	01 06                	add    DWORD PTR [esi],eax
    2ebf:	5d                   	pop    ebp
    2ec0:	00 00                	add    BYTE PTR [eax],al
    2ec2:	00 02                	add    BYTE PTR [edx],al
    2ec4:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2eca:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2ed1:	02 08                	add    cl,BYTE PTR [eax]
    2ed3:	05 00 00 00 00       	add    eax,0x0
    2ed8:	02 01                	add    al,BYTE PTR [ecx]
    2eda:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2edd:	00 00                	add    BYTE PTR [eax],al
    2edf:	02 02                	add    al,BYTE PTR [edx]
    2ee1:	07                   	pop    es
    2ee2:	0e                   	push   cs
    2ee3:	00 00                	add    BYTE PTR [eax],al
    2ee5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2ee8:	00 00                	add    BYTE PTR [eax],al
    2eea:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2eed:	61                   	popa   
    2eee:	00 00                	add    BYTE PTR [eax],al
    2ef0:	00 02                	add    BYTE PTR [edx],al
    2ef2:	04 07                	add    al,0x7
    2ef4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2ef7:	00 02                	add    BYTE PTR [edx],al
    2ef9:	08 07                	or     BYTE PTR [edi],al
    2efb:	34 00                	xor    al,0x0
    2efd:	00 00                	add    BYTE PTR [eax],al
    2eff:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f06:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2f09:	9b                   	fwait
    2f0a:	00 00                	add    BYTE PTR [eax],al
    2f0c:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2f12:	00 06                	add    BYTE PTR [esi],al
    2f14:	25 00 00 00 02       	and    eax,0x2000000
    2f19:	01 02                	add    DWORD PTR [edx],eax
    2f1b:	95                   	xchg   ebp,eax
    2f1c:	00 00                	add    BYTE PTR [eax],al
    2f1e:	00 02                	add    BYTE PTR [edx],al
    2f20:	04 07                	add    al,0x7
    2f22:	39 00                	cmp    DWORD PTR [eax],eax
    2f24:	00 00                	add    BYTE PTR [eax],al
    2f26:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2f29:	e1 00                	loope  2f2b <sysEnter_Vector-0x12d0d5>
    2f2b:	00 00                	add    BYTE PTR [eax],al
    2f2d:	05 04 25 00 00       	add    eax,0x2504
    2f32:	00 07                	add    BYTE PTR [edi],al
    2f34:	7a 0a                	jp     2f40 <sysEnter_Vector-0x12d0c0>
    2f36:	00 00                	add    BYTE PTR [eax],al
    2f38:	01 3b                	add    DWORD PTR [ebx],edi
    2f3a:	8f 00                	pop    DWORD PTR [eax]
    2f3c:	00 00                	add    BYTE PTR [eax],al
    2f3e:	88 1d 00 30 7d 01    	mov    BYTE PTR ds:0x17d3000,bl
    2f44:	00 00                	add    BYTE PTR [eax],al
    2f46:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    2f4d:	89 0a                	mov    DWORD PTR [edx],ecx
    2f4f:	00 00                	add    BYTE PTR [eax],al
    2f51:	01 3b                	add    DWORD PTR [ebx],edi
    2f53:	7d 00                	jge    2f55 <sysEnter_Vector-0x12d0ab>
    2f55:	00 00                	add    BYTE PTR [eax],al
    2f57:	02 91 00 08 82 0a    	add    dl,BYTE PTR [ecx+0xa820800]
    2f5d:	00 00                	add    BYTE PTR [eax],al
    2f5f:	01 3b                	add    DWORD PTR [ebx],edi
    2f61:	3a 01                	cmp    al,BYTE PTR [ecx]
    2f63:	00 00                	add    BYTE PTR [eax],al
    2f65:	02 91 04 08 8e 0a    	add    dl,BYTE PTR [ecx+0xa8e0804]
    2f6b:	00 00                	add    BYTE PTR [eax],al
    2f6d:	01 3b                	add    DWORD PTR [ebx],edi
    2f6f:	3a 00                	cmp    al,BYTE PTR [eax]
    2f71:	00 00                	add    BYTE PTR [eax],al
    2f73:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    2f79:	01 3d 7d 00 00 00    	add    DWORD PTR ds:0x7d,edi
    2f7f:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    2f82:	61                   	popa   
    2f83:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    2f86:	01 3e                	add    DWORD PTR [esi],edi
    2f88:	8f 00                	pop    DWORD PTR [eax]
    2f8a:	00 00                	add    BYTE PTR [eax],al
    2f8c:	01 57 09             	add    DWORD PTR [edi+0x9],edx
    2f8f:	63 00                	arpl   WORD PTR [eax],ax
    2f91:	01 3f                	add    DWORD PTR [edi],edi
    2f93:	3a 00                	cmp    al,BYTE PTR [eax]
    2f95:	00 00                	add    BYTE PTR [eax],al
    2f97:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    2f9a:	6c                   	ins    BYTE PTR es:[edi],dx
    2f9b:	0a 00                	or     al,BYTE PTR [eax]
    2f9d:	00 01                	add    BYTE PTR [ecx],al
    2f9f:	40                   	inc    eax
    2fa0:	8f 00                	pop    DWORD PTR [eax]
    2fa2:	00 00                	add    BYTE PTR [eax],al
    2fa4:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    2fa7:	67 00 01             	add    BYTE PTR [bx+di],al
    2faa:	41                   	inc    ecx
    2fab:	3a 00                	cmp    al,BYTE PTR [eax]
    2fad:	00 00                	add    BYTE PTR [eax],al
    2faf:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2fb2:	79 00                	jns    2fb4 <sysEnter_Vector-0x12d04c>
    2fb4:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    2fb7:	00 00                	add    BYTE PTR [eax],al
    2fb9:	00 01                	add    BYTE PTR [ecx],al
    2fbb:	51                   	push   ecx
    2fbc:	0c 73                	or     al,0x73
    2fbe:	0a 00                	or     al,BYTE PTR [eax]
    2fc0:	00 01                	add    BYTE PTR [ecx],al
    2fc2:	41                   	inc    ecx
    2fc3:	3a 00                	cmp    al,BYTE PTR [eax]
    2fc5:	00 00                	add    BYTE PTR [eax],al
    2fc7:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    2fca:	05 04 9d 00 00       	add    eax,0x9d04
    2fcf:	00 0d 4b 00 00 00    	add    BYTE PTR ds:0x4b,cl
    2fd5:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2fd8:	00 00                	add    BYTE PTR [eax],al
    2fda:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    2fe0:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
    2fe6:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    2fec:	05 03 40 4a 00       	add    eax,0x4a4003
    2ff1:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
    2ff7:	02 36                	add    dh,BYTE PTR [esi]
    2ff9:	56                   	push   esi
    2ffa:	00 00                	add    BYTE PTR [eax],al
    2ffc:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    3002:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    3008:	02 37                	add    dh,BYTE PTR [edi]
    300a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    300b:	00 00                	add    BYTE PTR [eax],al
    300d:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    3013:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    3019:	03 4c 3a 01          	add    ecx,DWORD PTR [edx+edi*1+0x1]
    301d:	00 00                	add    BYTE PTR [eax],al
    301f:	05 03 44 4a 00       	add    eax,0x4a4403
    3024:	30 00                	xor    BYTE PTR [eax],al
    3026:	6c                   	ins    BYTE PTR es:[edi],dx
    3027:	00 00                	add    BYTE PTR [eax],al
    3029:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    302c:	a1 10 00 00 04       	mov    eax,ds:0x4000010
    3031:	01 f4                	add    esp,esi
    3033:	00 00                	add    BYTE PTR [eax],al
    3035:	00 0c 93             	add    BYTE PTR [ebx+edx*4],cl
    3038:	0a 00                	or     al,BYTE PTR [eax]
    303a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    303d:	00 00                	add    BYTE PTR [eax],al
    303f:	08 1f                	or     BYTE PTR [edi],bl
    3041:	00 30                	add    BYTE PTR [eax],dh
    3043:	1d 00 00 00 63       	sbb    eax,0x63000000
    3048:	15 00 00 02 aa       	adc    eax,0xaa020000
    304d:	0a 00                	or     al,BYTE PTR [eax]
    304f:	00 01                	add    BYTE PTR [ecx],al
    3051:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    3054:	00 00                	add    BYTE PTR [eax],al
    3056:	08 1f                	or     BYTE PTR [edi],bl
    3058:	00 30                	add    BYTE PTR [eax],dh
    305a:	1d 00 00 00 01       	sbb    eax,0x1000000
    305f:	9c                   	pushf  
    3060:	5b                   	pop    ebx
    3061:	00 00                	add    BYTE PTR [eax],al
    3063:	00 03                	add    BYTE PTR [ebx],al
    3065:	76 61                	jbe    30c8 <sysEnter_Vector-0x12cf38>
    3067:	6c                   	ins    BYTE PTR es:[edi],dx
    3068:	00 01                	add    BYTE PTR [ecx],al
    306a:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    306d:	00 00                	add    BYTE PTR [eax],al
    306f:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    3075:	74 00                	je     3077 <sysEnter_Vector-0x12cf89>
    3077:	01 01                	add    DWORD PTR [ecx],eax
    3079:	68 00 00 00 02       	push   0x2000000
    307e:	91                   	xchg   ecx,eax
    307f:	04 00                	add    al,0x0
    3081:	04 04                	add    al,0x4
    3083:	61                   	popa   
    3084:	00 00                	add    BYTE PTR [eax],al
    3086:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    308c:	00 00                	add    BYTE PTR [eax],al
    308e:	06                   	push   es
    308f:	04 05                	add    al,0x5
    3091:	69 6e 74 00 00 90 01 	imul   ebp,DWORD PTR [esi+0x74],0x1900000
    3098:	00 00                	add    BYTE PTR [eax],al
    309a:	04 00                	add    al,0x0
    309c:	ff 10                	call   DWORD PTR [eax]
    309e:	00 00                	add    BYTE PTR [eax],al
    30a0:	04 01                	add    al,0x1
    30a2:	f4                   	hlt    
    30a3:	00 00                	add    BYTE PTR [eax],al
    30a5:	00 0c b2             	add    BYTE PTR [edx+esi*4],cl
    30a8:	0a 00                	or     al,BYTE PTR [eax]
    30aa:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    30ad:	00 00                	add    BYTE PTR [eax],al
    30af:	28 1f                	sub    BYTE PTR [edi],bl
    30b1:	00 30                	add    BYTE PTR [eax],dh
    30b3:	9c                   	pushf  
    30b4:	01 00                	add    DWORD PTR [eax],eax
    30b6:	00 aa 15 00 00 02    	add    BYTE PTR [edx+0x2000015],ch
    30bc:	01 06                	add    DWORD PTR [esi],eax
    30be:	64 00 00             	add    BYTE PTR fs:[eax],al
    30c1:	00 02                	add    BYTE PTR [edx],al
    30c3:	01 06                	add    DWORD PTR [esi],eax
    30c5:	5d                   	pop    ebp
    30c6:	00 00                	add    BYTE PTR [eax],al
    30c8:	00 02                	add    BYTE PTR [edx],al
    30ca:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    30d0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    30d7:	02 08                	add    cl,BYTE PTR [eax]
    30d9:	05 00 00 00 00       	add    eax,0x0
    30de:	02 01                	add    al,BYTE PTR [ecx]
    30e0:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    30e3:	00 00                	add    BYTE PTR [eax],al
    30e5:	02 02                	add    al,BYTE PTR [edx]
    30e7:	07                   	pop    es
    30e8:	0e                   	push   cs
    30e9:	00 00                	add    BYTE PTR [eax],al
    30eb:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    30ee:	00 00                	add    BYTE PTR [eax],al
    30f0:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    30f3:	61                   	popa   
    30f4:	00 00                	add    BYTE PTR [eax],al
    30f6:	00 02                	add    BYTE PTR [edx],al
    30f8:	04 07                	add    al,0x7
    30fa:	3e 00 00             	add    BYTE PTR ds:[eax],al
    30fd:	00 02                	add    BYTE PTR [edx],al
    30ff:	08 07                	or     BYTE PTR [edi],al
    3101:	34 00                	xor    al,0x0
    3103:	00 00                	add    BYTE PTR [eax],al
    3105:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    310c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    310f:	9b                   	fwait
    3110:	00 00                	add    BYTE PTR [eax],al
    3112:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    3118:	00 06                	add    BYTE PTR [esi],al
    311a:	25 00 00 00 02       	and    eax,0x2000000
    311f:	01 02                	add    DWORD PTR [edx],eax
    3121:	95                   	xchg   ebp,eax
    3122:	00 00                	add    BYTE PTR [eax],al
    3124:	00 02                	add    BYTE PTR [edx],al
    3126:	04 07                	add    al,0x7
    3128:	39 00                	cmp    DWORD PTR [eax],eax
    312a:	00 00                	add    BYTE PTR [eax],al
    312c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    312f:	e1 00                	loope  3131 <sysEnter_Vector-0x12cecf>
    3131:	00 00                	add    BYTE PTR [eax],al
    3133:	05 04 25 00 00       	add    eax,0x2504
    3138:	00 07                	add    BYTE PTR [edi],al
    313a:	c7                   	(bad)  
    313b:	0a 00                	or     al,BYTE PTR [eax]
    313d:	00 01                	add    BYTE PTR [ecx],al
    313f:	57                   	push   edi
    3140:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3141:	00 00                	add    BYTE PTR [eax],al
    3143:	00 28                	add    BYTE PTR [eax],ch
    3145:	1f                   	pop    ds
    3146:	00 30                	add    BYTE PTR [eax],dh
    3148:	9c                   	pushf  
    3149:	01 00                	add    DWORD PTR [eax],eax
    314b:	00 01                	add    BYTE PTR [ecx],al
    314d:	9c                   	pushf  
    314e:	38 01                	cmp    BYTE PTR [ecx],al
    3150:	00 00                	add    BYTE PTR [eax],al
    3152:	08 89 0a 00 00 01    	or     BYTE PTR [ecx+0x100000a],cl
    3158:	57                   	push   edi
    3159:	7d 00                	jge    315b <sysEnter_Vector-0x12cea5>
    315b:	00 00                	add    BYTE PTR [eax],al
    315d:	02 91 00 08 82 0a    	add    dl,BYTE PTR [ecx+0xa820800]
    3163:	00 00                	add    BYTE PTR [eax],al
    3165:	01 57 38             	add    DWORD PTR [edi+0x38],edx
    3168:	01 00                	add    DWORD PTR [eax],eax
    316a:	00 02                	add    BYTE PTR [edx],al
    316c:	91                   	xchg   ecx,eax
    316d:	04 08                	add    al,0x8
    316f:	8e 0a                	mov    cs,WORD PTR [edx]
    3171:	00 00                	add    BYTE PTR [eax],al
    3173:	01 57 3a             	add    DWORD PTR [edi+0x3a],edx
    3176:	00 00                	add    BYTE PTR [eax],al
    3178:	00 02                	add    BYTE PTR [edx],al
    317a:	91                   	xchg   ecx,eax
    317b:	08 09                	or     BYTE PTR [ecx],cl
    317d:	73 00                	jae    317f <sysEnter_Vector-0x12ce81>
    317f:	01 59 7d             	add    DWORD PTR [ecx+0x7d],ebx
    3182:	00 00                	add    BYTE PTR [eax],al
    3184:	00 01                	add    BYTE PTR [ecx],al
    3186:	56                   	push   esi
    3187:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    318a:	63 00                	arpl   WORD PTR [eax],ax
    318c:	01 5a 8f             	add    DWORD PTR [edx-0x71],ebx
    318f:	00 00                	add    BYTE PTR [eax],al
    3191:	00 01                	add    BYTE PTR [ecx],al
    3193:	57                   	push   edi
    3194:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    3197:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    319a:	00 00                	add    BYTE PTR [eax],al
    319c:	00 01                	add    BYTE PTR [ecx],al
    319e:	53                   	push   ebx
    319f:	0a 6c 0a 00          	or     ch,BYTE PTR [edx+ecx*1+0x0]
    31a3:	00 01                	add    BYTE PTR [ecx],al
    31a5:	5c                   	pop    esp
    31a6:	8f 00                	pop    DWORD PTR [eax]
    31a8:	00 00                	add    BYTE PTR [eax],al
    31aa:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    31ad:	67 00 01             	add    BYTE PTR [bx+di],al
    31b0:	5d                   	pop    ebp
    31b1:	3a 00                	cmp    al,BYTE PTR [eax]
    31b3:	00 00                	add    BYTE PTR [eax],al
    31b5:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    31b8:	79 00                	jns    31ba <sysEnter_Vector-0x12ce46>
    31ba:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    31bd:	00 00                	add    BYTE PTR [eax],al
    31bf:	00 01                	add    BYTE PTR [ecx],al
    31c1:	51                   	push   ecx
    31c2:	0a 73 0a             	or     dh,BYTE PTR [ebx+0xa]
    31c5:	00 00                	add    BYTE PTR [eax],al
    31c7:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    31ca:	00 00                	add    BYTE PTR [eax],al
    31cc:	00 00                	add    BYTE PTR [eax],al
    31ce:	05 04 9d 00 00       	add    eax,0x9d04
    31d3:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
    31d6:	00 00                	add    BYTE PTR [eax],al
    31d8:	00 02                	add    BYTE PTR [edx],al
    31da:	34 56                	xor    al,0x56
    31dc:	00 00                	add    BYTE PTR [eax],al
    31de:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    31e4:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    31e7:	00 00                	add    BYTE PTR [eax],al
    31e9:	00 02                	add    BYTE PTR [edx],al
    31eb:	35 56 00 00 00       	xor    eax,0x56
    31f0:	05 03 40 4a 00       	add    eax,0x4a4003
    31f5:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    31f8:	01 00                	add    DWORD PTR [eax],eax
    31fa:	00 02                	add    BYTE PTR [edx],al
    31fc:	36                   	ss
    31fd:	56                   	push   esi
    31fe:	00 00                	add    BYTE PTR [eax],al
    3200:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    3206:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    3209:	00 00                	add    BYTE PTR [eax],al
    320b:	00 02                	add    BYTE PTR [edx],al
    320d:	37                   	aaa    
    320e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    320f:	00 00                	add    BYTE PTR [eax],al
    3211:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    3217:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    321a:	00 00                	add    BYTE PTR [eax],al
    321c:	00 03                	add    BYTE PTR [ebx],al
    321e:	4c                   	dec    esp
    321f:	38 01                	cmp    BYTE PTR [ecx],al
    3221:	00 00                	add    BYTE PTR [eax],al
    3223:	05 03 44 4a 00       	add    eax,0x4a4403
    3228:	30 00                	xor    BYTE PTR [eax],al
    322a:	62 01                	bound  eax,QWORD PTR [ecx]
    322c:	00 00                	add    BYTE PTR [eax],al
    322e:	04 00                	add    al,0x0
    3230:	ab                   	stos   DWORD PTR es:[edi],eax
    3231:	11 00                	adc    DWORD PTR [eax],eax
    3233:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3236:	f4                   	hlt    
    3237:	00 00                	add    BYTE PTR [eax],al
    3239:	00 0c d4             	add    BYTE PTR [esp+edx*8],cl
    323c:	0a 00                	or     al,BYTE PTR [eax]
    323e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    3241:	00 00                	add    BYTE PTR [eax],al
    3243:	c4 20                	les    esp,FWORD PTR [eax]
    3245:	00 30                	add    BYTE PTR [eax],dh
    3247:	b6 00                	mov    dh,0x0
    3249:	00 00                	add    BYTE PTR [eax],al
    324b:	23 17                	and    edx,DWORD PTR [edi]
    324d:	00 00                	add    BYTE PTR [eax],al
    324f:	02 01                	add    al,BYTE PTR [ecx]
    3251:	06                   	push   es
    3252:	64 00 00             	add    BYTE PTR fs:[eax],al
    3255:	00 02                	add    BYTE PTR [edx],al
    3257:	01 06                	add    DWORD PTR [esi],eax
    3259:	5d                   	pop    ebp
    325a:	00 00                	add    BYTE PTR [eax],al
    325c:	00 02                	add    BYTE PTR [edx],al
    325e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    3264:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    326b:	02 08                	add    cl,BYTE PTR [eax]
    326d:	05 00 00 00 00       	add    eax,0x0
    3272:	02 01                	add    al,BYTE PTR [ecx]
    3274:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    3277:	00 00                	add    BYTE PTR [eax],al
    3279:	02 02                	add    al,BYTE PTR [edx]
    327b:	07                   	pop    es
    327c:	0e                   	push   cs
    327d:	00 00                	add    BYTE PTR [eax],al
    327f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    3282:	00 00                	add    BYTE PTR [eax],al
    3284:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3287:	61                   	popa   
    3288:	00 00                	add    BYTE PTR [eax],al
    328a:	00 02                	add    BYTE PTR [edx],al
    328c:	04 07                	add    al,0x7
    328e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3291:	00 02                	add    BYTE PTR [edx],al
    3293:	08 07                	or     BYTE PTR [edi],al
    3295:	34 00                	xor    al,0x0
    3297:	00 00                	add    BYTE PTR [eax],al
    3299:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    32a0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    32a3:	9b                   	fwait
    32a4:	00 00                	add    BYTE PTR [eax],al
    32a6:	00 02                	add    BYTE PTR [edx],al
    32a8:	01 02                	add    DWORD PTR [edx],eax
    32aa:	95                   	xchg   ebp,eax
    32ab:	00 00                	add    BYTE PTR [eax],al
    32ad:	00 02                	add    BYTE PTR [edx],al
    32af:	04 07                	add    al,0x7
    32b1:	39 00                	cmp    DWORD PTR [eax],eax
    32b3:	00 00                	add    BYTE PTR [eax],al
    32b5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    32b8:	e1 00                	loope  32ba <sysEnter_Vector-0x12cd46>
    32ba:	00 00                	add    BYTE PTR [eax],al
    32bc:	05 04 25 00 00       	add    eax,0x2504
    32c1:	00 06                	add    BYTE PTR [esi],al
    32c3:	f2 0a 00             	repnz or al,BYTE PTR [eax]
    32c6:	00 01                	add    BYTE PTR [ecx],al
    32c8:	03 c4                	add    eax,esp
    32ca:	20 00                	and    BYTE PTR [eax],al
    32cc:	30 96 00 00 00 01    	xor    BYTE PTR [esi+0x1000000],dl
    32d2:	9c                   	pushf  
    32d3:	e6 00                	out    0x0,al
    32d5:	00 00                	add    BYTE PTR [eax],al
    32d7:	07                   	pop    es
    32d8:	ce                   	into   
    32d9:	0a 00                	or     al,BYTE PTR [eax]
    32db:	00 01                	add    BYTE PTR [ecx],al
    32dd:	03 92 00 00 00 02    	add    edx,DWORD PTR [edx+0x2000000]
    32e3:	91                   	xchg   ecx,eax
    32e4:	00 08                	add    BYTE PTR [eax],cl
    32e6:	64                   	fs
    32e7:	73 74                	jae    335d <sysEnter_Vector-0x12cca3>
    32e9:	00 01                	add    BYTE PTR [ecx],al
    32eb:	05 92 00 00 00       	add    eax,0x92
    32f0:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    32f6:	63 00                	arpl   WORD PTR [eax],ax
    32f8:	01 05 92 00 00 00    	add    DWORD PTR ds:0x92,eax
    32fe:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    3304:	64 00 01             	add    BYTE PTR fs:[ecx],al
    3307:	06                   	push   es
    3308:	92                   	xchg   edx,eax
    3309:	00 00                	add    BYTE PTR [eax],al
    330b:	00 02                	add    BYTE PTR [edx],al
    330d:	91                   	xchg   ecx,eax
    330e:	64 00 06             	add    BYTE PTR fs:[esi],al
    3311:	ea 0a 00 00 01 1f 5a 	jmp    0x5a1f:0x100000a
    3318:	21 00                	and    DWORD PTR [eax],eax
    331a:	30 20                	xor    BYTE PTR [eax],ah
    331c:	00 00                	add    BYTE PTR [eax],al
    331e:	00 01                	add    BYTE PTR [ecx],al
    3320:	9c                   	pushf  
    3321:	0a 01                	or     al,BYTE PTR [ecx]
    3323:	00 00                	add    BYTE PTR [eax],al
    3325:	07                   	pop    es
    3326:	ce                   	into   
    3327:	0a 00                	or     al,BYTE PTR [eax]
    3329:	00 01                	add    BYTE PTR [ecx],al
    332b:	1f                   	pop    ds
    332c:	92                   	xchg   edx,eax
    332d:	00 00                	add    BYTE PTR [eax],al
    332f:	00 02                	add    BYTE PTR [edx],al
    3331:	91                   	xchg   ecx,eax
    3332:	00 00                	add    BYTE PTR [eax],al
    3334:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
    3337:	00 00                	add    BYTE PTR [eax],al
    3339:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    333c:	00 00                	add    BYTE PTR [eax],al
    333e:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    3344:	30 09                	xor    BYTE PTR [ecx],cl
    3346:	af                   	scas   eax,DWORD PTR es:[edi]
    3347:	00 00                	add    BYTE PTR [eax],al
    3349:	00 02                	add    BYTE PTR [edx],al
    334b:	35 56 00 00 00       	xor    eax,0x56
    3350:	05 03 40 4a 00       	add    eax,0x4a4003
    3355:	30 09                	xor    BYTE PTR [ecx],cl
    3357:	5b                   	pop    ebx
    3358:	01 00                	add    DWORD PTR [eax],eax
    335a:	00 02                	add    BYTE PTR [edx],al
    335c:	36                   	ss
    335d:	56                   	push   esi
    335e:	00 00                	add    BYTE PTR [eax],al
    3360:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    3366:	30 09                	xor    BYTE PTR [ecx],cl
    3368:	54                   	push   esp
    3369:	00 00                	add    BYTE PTR [eax],al
    336b:	00 02                	add    BYTE PTR [edx],al
    336d:	37                   	aaa    
    336e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    336f:	00 00                	add    BYTE PTR [eax],al
    3371:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    3377:	30 09                	xor    BYTE PTR [ecx],cl
    3379:	28 00                	sub    BYTE PTR [eax],al
    337b:	00 00                	add    BYTE PTR [eax],al
    337d:	03 4c 5f 01          	add    ecx,DWORD PTR [edi+ebx*2+0x1]
    3381:	00 00                	add    BYTE PTR [eax],al
    3383:	05 03 44 4a 00       	add    eax,0x4a4403
    3388:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    338e:	00 00                	add    BYTE PTR [eax],al
    3390:	93                   	xchg   ebx,eax
    3391:	01 00                	add    DWORD PTR [eax],eax
    3393:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3396:	34 12                	xor    al,0x12
    3398:	00 00                	add    BYTE PTR [eax],al
    339a:	04 01                	add    al,0x1
    339c:	f4                   	hlt    
    339d:	00 00                	add    BYTE PTR [eax],al
    339f:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
    33a2:	0b 00                	or     eax,DWORD PTR [eax]
    33a4:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    33a7:	00 00                	add    BYTE PTR [eax],al
    33a9:	7c 21                	jl     33cc <sysEnter_Vector-0x12cc34>
    33ab:	00 30                	add    BYTE PTR [eax],dh
    33ad:	8b 00                	mov    eax,DWORD PTR [eax]
    33af:	00 00                	add    BYTE PTR [eax],al
    33b1:	f6 17                	not    BYTE PTR [edi]
    33b3:	00 00                	add    BYTE PTR [eax],al
    33b5:	02 01                	add    al,BYTE PTR [ecx]
    33b7:	06                   	push   es
    33b8:	64 00 00             	add    BYTE PTR fs:[eax],al
    33bb:	00 02                	add    BYTE PTR [edx],al
    33bd:	01 06                	add    DWORD PTR [esi],eax
    33bf:	5d                   	pop    ebp
    33c0:	00 00                	add    BYTE PTR [eax],al
    33c2:	00 02                	add    BYTE PTR [edx],al
    33c4:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    33ca:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    33d1:	02 08                	add    cl,BYTE PTR [eax]
    33d3:	05 00 00 00 00       	add    eax,0x0
    33d8:	02 01                	add    al,BYTE PTR [ecx]
    33da:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    33dd:	00 00                	add    BYTE PTR [eax],al
    33df:	02 02                	add    al,BYTE PTR [edx]
    33e1:	07                   	pop    es
    33e2:	0e                   	push   cs
    33e3:	00 00                	add    BYTE PTR [eax],al
    33e5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    33e8:	00 00                	add    BYTE PTR [eax],al
    33ea:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    33ed:	61                   	popa   
    33ee:	00 00                	add    BYTE PTR [eax],al
    33f0:	00 02                	add    BYTE PTR [edx],al
    33f2:	04 07                	add    al,0x7
    33f4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    33f7:	00 02                	add    BYTE PTR [edx],al
    33f9:	08 07                	or     BYTE PTR [edi],al
    33fb:	34 00                	xor    al,0x0
    33fd:	00 00                	add    BYTE PTR [eax],al
    33ff:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3406:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3409:	9b                   	fwait
    340a:	00 00                	add    BYTE PTR [eax],al
    340c:	00 02                	add    BYTE PTR [edx],al
    340e:	01 02                	add    DWORD PTR [edx],eax
    3410:	95                   	xchg   ebp,eax
    3411:	00 00                	add    BYTE PTR [eax],al
    3413:	00 02                	add    BYTE PTR [edx],al
    3415:	04 07                	add    al,0x7
    3417:	39 00                	cmp    DWORD PTR [eax],eax
    3419:	00 00                	add    BYTE PTR [eax],al
    341b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    341e:	e1 00                	loope  3420 <sysEnter_Vector-0x12cbe0>
    3420:	00 00                	add    BYTE PTR [eax],al
    3422:	05 04 25 00 00       	add    eax,0x2504
    3427:	00 06                	add    BYTE PTR [esi],al
    3429:	fb                   	sti    
    342a:	0a 00                	or     al,BYTE PTR [eax]
    342c:	00 01                	add    BYTE PTR [ecx],al
    342e:	33 92 00 00 00 7c    	xor    edx,DWORD PTR [edx+0x7c000000]
    3434:	21 00                	and    DWORD PTR [eax],eax
    3436:	30 6e 00             	xor    BYTE PTR [esi+0x0],ch
    3439:	00 00                	add    BYTE PTR [eax],al
    343b:	01 9c e4 00 00 00 07 	add    DWORD PTR [esp+eiz*8+0x7000000],ebx
    3442:	20 0b                	and    BYTE PTR [ebx],cl
    3444:	00 00                	add    BYTE PTR [eax],al
    3446:	01 33                	add    DWORD PTR [ebx],esi
    3448:	92                   	xchg   edx,eax
    3449:	00 00                	add    BYTE PTR [eax],al
    344b:	00 02                	add    BYTE PTR [edx],al
    344d:	91                   	xchg   ecx,eax
    344e:	00 07                	add    BYTE PTR [edi],al
    3450:	1d 0b 00 00 01       	sbb    eax,0x100000b
    3455:	33 92 00 00 00 02    	xor    edx,DWORD PTR [edx+0x2000000]
    345b:	91                   	xchg   ecx,eax
    345c:	04 08                	add    al,0x8
    345e:	61                   	popa   
    345f:	00 01                	add    BYTE PTR [ecx],al
    3461:	35 92 00 00 00       	xor    eax,0x92
    3466:	01 56 08             	add    DWORD PTR [esi+0x8],edx
    3469:	62 00                	bound  eax,QWORD PTR [eax]
    346b:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
    3471:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
    3474:	09 10                	or     DWORD PTR [eax],edx
    3476:	0b 00                	or     eax,DWORD PTR [eax]
    3478:	00 01                	add    BYTE PTR [ecx],al
    347a:	52                   	push   edx
    347b:	92                   	xchg   edx,eax
    347c:	00 00                	add    BYTE PTR [eax],al
    347e:	00 ea                	add    dl,ch
    3480:	21 00                	and    DWORD PTR [eax],eax
    3482:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    3488:	9c                   	pushf  
    3489:	1a 01                	sbb    al,BYTE PTR [ecx]
    348b:	00 00                	add    BYTE PTR [eax],al
    348d:	07                   	pop    es
    348e:	20 0b                	and    BYTE PTR [ebx],cl
    3490:	00 00                	add    BYTE PTR [eax],al
    3492:	01 52 92             	add    DWORD PTR [edx-0x6e],edx
    3495:	00 00                	add    BYTE PTR [eax],al
    3497:	00 02                	add    BYTE PTR [edx],al
    3499:	91                   	xchg   ecx,eax
    349a:	00 07                	add    BYTE PTR [edi],al
    349c:	1d 0b 00 00 01       	sbb    eax,0x100000b
    34a1:	52                   	push   edx
    34a2:	92                   	xchg   edx,eax
    34a3:	00 00                	add    BYTE PTR [eax],al
    34a5:	00 02                	add    BYTE PTR [edx],al
    34a7:	91                   	xchg   ecx,eax
    34a8:	04 00                	add    al,0x0
    34aa:	0a 25 00 00 00 2a    	or     ah,BYTE PTR ds:0x2a000000
    34b0:	01 00                	add    DWORD PTR [eax],eax
    34b2:	00 0b                	add    BYTE PTR [ebx],cl
    34b4:	8b 00                	mov    eax,DWORD PTR [eax]
    34b6:	00 00                	add    BYTE PTR [eax],al
    34b8:	65 00 0c 17          	add    BYTE PTR gs:[edi+edx*1],cl
    34bc:	0b 00                	or     eax,DWORD PTR [eax]
    34be:	00 01                	add    BYTE PTR [ecx],al
    34c0:	19 1a                	sbb    DWORD PTR [edx],ebx
    34c2:	01 00                	add    DWORD PTR [eax],eax
    34c4:	00 05 03 e0 48 00    	add    BYTE PTR ds:0x48e003,al
    34ca:	30 0d 4b 00 00 00    	xor    BYTE PTR ds:0x4b,cl
    34d0:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    34d3:	00 00                	add    BYTE PTR [eax],al
    34d5:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    34db:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
    34e1:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    34e7:	05 03 40 4a 00       	add    eax,0x4a4003
    34ec:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
    34f2:	02 36                	add    dh,BYTE PTR [esi]
    34f4:	56                   	push   esi
    34f5:	00 00                	add    BYTE PTR [eax],al
    34f7:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    34fd:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    3503:	02 37                	add    dh,BYTE PTR [edi]
    3505:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3506:	00 00                	add    BYTE PTR [eax],al
    3508:	00 05 03 48 4a 00    	add    BYTE PTR ds:0x4a4803,al
    350e:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    3514:	03 4c 90 01          	add    ecx,DWORD PTR [eax+edx*4+0x1]
    3518:	00 00                	add    BYTE PTR [eax],al
    351a:	05 03 44 4a 00       	add    eax,0x4a4403
    351f:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    3525:	00 00                	add    BYTE PTR [eax],al
    3527:	4b                   	dec    ebx
    3528:	05 00 00 04 00       	add    eax,0x40000
    352d:	fc                   	cld    
    352e:	12 00                	adc    al,BYTE PTR [eax]
    3530:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3533:	f4                   	hlt    
    3534:	00 00                	add    BYTE PTR [eax],al
    3536:	00 0c 27             	add    BYTE PTR [edi+eiz*1],cl
    3539:	0b 00                	or     eax,DWORD PTR [eax]
    353b:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    353e:	00 00                	add    BYTE PTR [eax],al
    3540:	08 22                	or     BYTE PTR [edx],ah
    3542:	00 30                	add    BYTE PTR [eax],dh
    3544:	cf                   	iret   
    3545:	0c 00                	or     al,0x0
    3547:	00 c1                	add    cl,al
    3549:	18 00                	sbb    BYTE PTR [eax],al
    354b:	00 02                	add    BYTE PTR [edx],al
    354d:	17                   	pop    ss
    354e:	03 00                	add    eax,DWORD PTR [eax]
    3550:	00 04 e7             	add    BYTE PTR [edi+eiz*8],al
    3553:	00 00                	add    BYTE PTR [eax],al
    3555:	00 06                	add    BYTE PTR [esi],al
    3557:	15 e7 00 00 00       	adc    eax,0xe7
    355c:	03 7c 03 00          	add    edi,DWORD PTR [ebx+eax*1+0x0]
    3560:	00 00                	add    BYTE PTR [eax],al
    3562:	03 b4 03 00 00 01 03 	add    esi,DWORD PTR [ebx+eax*1+0x3010000]
    3569:	73 02                	jae    356d <sysEnter_Vector-0x12ca93>
    356b:	00 00                	add    BYTE PTR [eax],al
    356d:	02 03                	add    al,BYTE PTR [ebx]
    356f:	09 03                	or     DWORD PTR [ebx],eax
    3571:	00 00                	add    BYTE PTR [eax],al
    3573:	03 03                	add    eax,DWORD PTR [ebx]
    3575:	53                   	push   ebx
    3576:	02 00                	add    al,BYTE PTR [eax]
    3578:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    357b:	ce                   	into   
    357c:	03 00                	add    eax,DWORD PTR [eax]
    357e:	00 05 03 2d 03 00    	add    BYTE PTR ds:0x32d03,al
    3584:	00 06                	add    BYTE PTR [esi],al
    3586:	03 66 02             	add    esp,DWORD PTR [esi+0x2]
    3589:	00 00                	add    BYTE PTR [eax],al
    358b:	07                   	pop    es
    358c:	03 ff                	add    edi,edi
    358e:	03 00                	add    eax,DWORD PTR [eax]
    3590:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    3593:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3594:	03 00                	add    eax,DWORD PTR [eax]
    3596:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    3599:	0e                   	push   cs
    359a:	04 00                	add    al,0x0
    359c:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    359f:	f5                   	cmc    
    35a0:	02 00                	add    al,BYTE PTR [eax]
    35a2:	00 97 04 8c 03 00    	add    BYTE PTR [edi+0x38c04],dl
    35a8:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    35ab:	04 62                	add    al,0x62
    35ad:	03 00                	add    eax,DWORD PTR [eax]
    35af:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    35b3:	f1                   	icebp  
    35b4:	03 00                	add    eax,DWORD PTR [eax]
    35b6:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    35b9:	04 d7                	add    al,0xd7
    35bb:	02 00                	add    al,BYTE PTR [eax]
    35bd:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    35c0:	04 26                	add    al,0x26
    35c2:	04 00                	add    al,0x0
    35c4:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    35c7:	04 3a                	add    al,0x3a
    35c9:	03 00                	add    eax,DWORD PTR [eax]
    35cb:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    35ce:	04 ac                	add    al,0xac
    35d0:	02 00                	add    al,BYTE PTR [eax]
    35d2:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    35d5:	04 a3                	add    al,0xa3
    35d7:	03 00                	add    eax,DWORD PTR [eax]
    35d9:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    35dc:	04 e5                	add    al,0xe5
    35de:	02 00                	add    al,BYTE PTR [eax]
    35e0:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    35e3:	04 dc                	add    al,0xdc
    35e5:	03 00                	add    eax,DWORD PTR [eax]
    35e7:	00 00                	add    BYTE PTR [eax],al
    35e9:	03 04 47             	add    eax,DWORD PTR [edi+eax*2]
    35ec:	03 00                	add    eax,DWORD PTR [eax]
    35ee:	00 01                	add    BYTE PTR [ecx],al
    35f0:	03 04 bb             	add    eax,DWORD PTR [ebx+edi*4]
    35f3:	02 00                	add    al,BYTE PTR [eax]
    35f5:	00 02                	add    BYTE PTR [edx],al
    35f7:	03 04 80             	add    eax,DWORD PTR [eax+eax*4]
    35fa:	02 00                	add    al,BYTE PTR [eax]
    35fc:	00 03                	add    BYTE PTR [ebx],al
    35fe:	03 04 90             	add    eax,DWORD PTR [eax+edx*4]
    3601:	02 00                	add    al,BYTE PTR [eax]
    3603:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    3606:	04 c7                	add    al,0xc7
    3608:	02 00                	add    al,BYTE PTR [eax]
    360a:	00 05 03 00 05 04    	add    BYTE PTR ds:0x4050003,al
    3610:	07                   	pop    es
    3611:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3614:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    361a:	00 00                	add    BYTE PTR [eax],al
    361c:	05 01 06 5d 00       	add    eax,0x5d0601
    3621:	00 00                	add    BYTE PTR [eax],al
    3623:	05 02 05 ea 00       	add    eax,0xea0502
    3628:	00 00                	add    BYTE PTR [eax],al
    362a:	06                   	push   es
    362b:	04 05                	add    al,0x5
    362d:	69 6e 74 00 05 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080500
    3634:	00 00                	add    BYTE PTR [eax],al
    3636:	00 00                	add    BYTE PTR [eax],al
    3638:	05 01 08 5b 00       	add    eax,0x5b0801
    363d:	00 00                	add    BYTE PTR [eax],al
    363f:	05 02 07 0e 00       	add    eax,0xe0702
    3644:	00 00                	add    BYTE PTR [eax],al
    3646:	07                   	pop    es
    3647:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    364d:	e7 00                	out    0x0,eax
    364f:	00 00                	add    BYTE PTR [eax],al
    3651:	05 08 07 34 00       	add    eax,0x340708
    3656:	00 00                	add    BYTE PTR [eax],al
    3658:	05 04 05 05 00       	add    eax,0x50504
    365d:	00 00                	add    BYTE PTR [eax],al
    365f:	05 0c 04 9b 00       	add    eax,0x9b040c
    3664:	00 00                	add    BYTE PTR [eax],al
    3666:	07                   	pop    es
    3667:	c9                   	leave  
    3668:	0b 00                	or     eax,DWORD PTR [eax]
    366a:	00 03                	add    BYTE PTR [ebx],al
    366c:	2a 31                	sub    dh,BYTE PTR [ecx]
    366e:	01 00                	add    DWORD PTR [eax],eax
    3670:	00 08                	add    BYTE PTR [eax],cl
    3672:	74 6d                	je     36e1 <sysEnter_Vector-0x12c91f>
    3674:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    3677:	2c da                	sub    al,0xda
    3679:	01 00                	add    DWORD PTR [eax],eax
    367b:	00 09                	add    BYTE PTR [ecx],cl
    367d:	0c 0c                	or     al,0xc
    367f:	00 00                	add    BYTE PTR [eax],al
    3681:	03 2e                	add    ebp,DWORD PTR [esi]
    3683:	03 01                	add    eax,DWORD PTR [ecx]
    3685:	00 00                	add    BYTE PTR [eax],al
    3687:	00 09                	add    BYTE PTR [ecx],cl
    3689:	aa                   	stos   BYTE PTR es:[edi],al
    368a:	0b 00                	or     eax,DWORD PTR [eax]
    368c:	00 03                	add    BYTE PTR [ebx],al
    368e:	2f                   	das    
    368f:	03 01                	add    eax,DWORD PTR [ecx]
    3691:	00 00                	add    BYTE PTR [eax],al
    3693:	04 09                	add    al,0x9
    3695:	3c 0b                	cmp    al,0xb
    3697:	00 00                	add    BYTE PTR [eax],al
    3699:	03 30                	add    esi,DWORD PTR [eax]
    369b:	03 01                	add    eax,DWORD PTR [ecx]
    369d:	00 00                	add    BYTE PTR [eax],al
    369f:	08 09                	or     BYTE PTR [ecx],cl
    36a1:	04 0c                	add    al,0xc
    36a3:	00 00                	add    BYTE PTR [eax],al
    36a5:	03 31                	add    esi,DWORD PTR [ecx]
    36a7:	03 01                	add    eax,DWORD PTR [ecx]
    36a9:	00 00                	add    BYTE PTR [eax],al
    36ab:	0c 09                	or     al,0x9
    36ad:	74 0b                	je     36ba <sysEnter_Vector-0x12c946>
    36af:	00 00                	add    BYTE PTR [eax],al
    36b1:	03 32                	add    esi,DWORD PTR [edx]
    36b3:	03 01                	add    eax,DWORD PTR [ecx]
    36b5:	00 00                	add    BYTE PTR [eax],al
    36b7:	10 09                	adc    BYTE PTR [ecx],cl
    36b9:	7b 0b                	jnp    36c6 <sysEnter_Vector-0x12c93a>
    36bb:	00 00                	add    BYTE PTR [eax],al
    36bd:	03 33                	add    esi,DWORD PTR [ebx]
    36bf:	03 01                	add    eax,DWORD PTR [ecx]
    36c1:	00 00                	add    BYTE PTR [eax],al
    36c3:	14 09                	adc    al,0x9
    36c5:	f6                   	(bad)  
    36c6:	0b 00                	or     eax,DWORD PTR [eax]
    36c8:	00 03                	add    BYTE PTR [ebx],al
    36ca:	34 03                	xor    al,0x3
    36cc:	01 00                	add    DWORD PTR [eax],eax
    36ce:	00 18                	add    BYTE PTR [eax],bl
    36d0:	09 b1 0b 00 00 03    	or     DWORD PTR [ecx+0x300000b],esi
    36d6:	35 03 01 00 00       	xor    eax,0x103
    36db:	1c 09                	sbb    al,0x9
    36dd:	91                   	xchg   ecx,eax
    36de:	0b 00                	or     eax,DWORD PTR [eax]
    36e0:	00 03                	add    BYTE PTR [ebx],al
    36e2:	36 03 01             	add    eax,DWORD PTR ss:[ecx]
    36e5:	00 00                	add    BYTE PTR [eax],al
    36e7:	20 09                	and    BYTE PTR [ecx],cl
    36e9:	ec                   	in     al,dx
    36ea:	0b 00                	or     eax,DWORD PTR [eax]
    36ec:	00 03                	add    BYTE PTR [ebx],al
    36ee:	37                   	aaa    
    36ef:	31 01                	xor    DWORD PTR [ecx],eax
    36f1:	00 00                	add    BYTE PTR [eax],al
    36f3:	24 09                	and    al,0x9
    36f5:	13 0c 00             	adc    ecx,DWORD PTR [eax+eax*1]
    36f8:	00 03                	add    BYTE PTR [ebx],al
    36fa:	38 da                	cmp    dl,bl
    36fc:	01 00                	add    DWORD PTR [eax],eax
    36fe:	00 28                	add    BYTE PTR [eax],ch
    3700:	00 0a                	add    BYTE PTR [edx],cl
    3702:	04 e0                	add    al,0xe0
    3704:	01 00                	add    DWORD PTR [eax],eax
    3706:	00 0b                	add    BYTE PTR [ebx],cl
    3708:	ee                   	out    dx,al
    3709:	00 00                	add    BYTE PTR [eax],al
    370b:	00 05 01 02 95 00    	add    BYTE PTR ds:0x950201,al
    3711:	00 00                	add    BYTE PTR [eax],al
    3713:	05 04 07 39 00       	add    eax,0x390704
    3718:	00 00                	add    BYTE PTR [eax],al
    371a:	05 04 07 e1 00       	add    eax,0xe10704
    371f:	00 00                	add    BYTE PTR [eax],al
    3721:	0a 04 ee             	or     al,BYTE PTR [esi+ebp*8]
    3724:	00 00                	add    BYTE PTR [eax],al
    3726:	00 0c 44             	add    BYTE PTR [esp+eax*2],cl
    3729:	0b 00                	or     eax,DWORD PTR [eax]
    372b:	00 01                	add    BYTE PTR [ecx],al
    372d:	16                   	push   ss
    372e:	3f                   	aas    
    372f:	01 00                	add    DWORD PTR [eax],eax
    3731:	00 08                	add    BYTE PTR [eax],cl
    3733:	22 00                	and    al,BYTE PTR [eax]
    3735:	30 44 00 00          	xor    BYTE PTR [eax+eax*1+0x0],al
    3739:	00 01                	add    BYTE PTR [ecx],al
    373b:	9c                   	pushf  
    373c:	28 02                	sub    BYTE PTR [edx],al
    373e:	00 00                	add    BYTE PTR [eax],al
    3740:	0d 85 04 00 00       	or     eax,0x485
    3745:	01 18                	add    DWORD PTR [eax],ebx
    3747:	1f                   	pop    ds
    3748:	01 00                	add    DWORD PTR [eax],eax
    374a:	00 02                	add    BYTE PTR [edx],al
    374c:	91                   	xchg   ecx,eax
    374d:	6c                   	ins    BYTE PTR es:[edi],dx
    374e:	00 0e                	add    BYTE PTR [esi],cl
    3750:	a0 0b 00 00 01       	mov    al,ds:0x100000b
    3755:	1e                   	push   ds
    3756:	96                   	xchg   esi,eax
    3757:	02 00                	add    al,BYTE PTR [eax]
    3759:	00 4c 22 00          	add    BYTE PTR [edx+eiz*1+0x0],cl
    375d:	30 19                	xor    BYTE PTR [ecx],bl
    375f:	03 00                	add    eax,DWORD PTR [eax]
    3761:	00 01                	add    BYTE PTR [ecx],al
    3763:	9c                   	pushf  
    3764:	96                   	xchg   esi,eax
    3765:	02 00                	add    al,BYTE PTR [eax]
    3767:	00 0f                	add    BYTE PTR [edi],cl
    3769:	1b 0c 00             	sbb    ecx,DWORD PTR [eax+eax*1]
    376c:	00 01                	add    BYTE PTR [ecx],al
    376e:	1e                   	push   ds
    376f:	9c                   	pushf  
    3770:	02 00                	add    al,BYTE PTR [eax]
    3772:	00 02                	add    BYTE PTR [edx],al
    3774:	91                   	xchg   ecx,eax
    3775:	00 0f                	add    BYTE PTR [edi],cl
    3777:	c3                   	ret    
    3778:	0b 00                	or     eax,DWORD PTR [eax]
    377a:	00 01                	add    BYTE PTR [ecx],al
    377c:	1e                   	push   ds
    377d:	96                   	xchg   esi,eax
    377e:	02 00                	add    al,BYTE PTR [eax]
    3780:	00 02                	add    BYTE PTR [edx],al
    3782:	91                   	xchg   ecx,eax
    3783:	04 0d                	add    al,0xd
    3785:	e7 0b                	out    0xb,eax
    3787:	00 00                	add    BYTE PTR [eax],al
    3789:	01 20                	add    DWORD PTR [eax],esp
    378b:	3f                   	aas    
    378c:	01 00                	add    DWORD PTR [eax],eax
    378e:	00 02                	add    BYTE PTR [edx],al
    3790:	91                   	xchg   ecx,eax
    3791:	68 0d dc 0b 00       	push   0xbdc0d
    3796:	00 01                	add    BYTE PTR [ecx],al
    3798:	21 ec                	and    esp,ebp
    379a:	01 00                	add    DWORD PTR [eax],eax
    379c:	00 02                	add    BYTE PTR [edx],al
    379e:	91                   	xchg   ecx,eax
    379f:	64                   	fs
    37a0:	0d 9a 0b 00 00       	or     eax,0xb9a
    37a5:	01 21                	add    DWORD PTR [ecx],esp
    37a7:	ec                   	in     al,dx
    37a8:	01 00                	add    DWORD PTR [eax],eax
    37aa:	00 02                	add    BYTE PTR [edx],al
    37ac:	91                   	xchg   ecx,eax
    37ad:	70 0d                	jo     37bc <sysEnter_Vector-0x12c844>
    37af:	7e 0b                	jle    37bc <sysEnter_Vector-0x12c844>
    37b1:	00 00                	add    BYTE PTR [eax],al
    37b3:	01 22                	add    DWORD PTR [edx],esp
    37b5:	03 01                	add    eax,DWORD PTR [ecx]
    37b7:	00 00                	add    BYTE PTR [eax],al
    37b9:	02 91 6c 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a006c]
    37bf:	4a                   	dec    edx
    37c0:	01 00                	add    DWORD PTR [eax],eax
    37c2:	00 0a                	add    BYTE PTR [edx],cl
    37c4:	04 a2                	add    al,0xa2
    37c6:	02 00                	add    al,BYTE PTR [eax]
    37c8:	00 0b                	add    BYTE PTR [ebx],cl
    37ca:	3f                   	aas    
    37cb:	01 00                	add    DWORD PTR [eax],eax
    37cd:	00 10                	add    BYTE PTR [eax],dl
    37cf:	5f                   	pop    edi
    37d0:	0b 00                	or     eax,DWORD PTR [eax]
    37d2:	00 01                	add    BYTE PTR [ecx],al
    37d4:	3b 96 02 00 00 65    	cmp    edx,DWORD PTR [esi+0x65000002]
    37da:	25 00 30 1d 00       	and    eax,0x1d3000
    37df:	00 00                	add    BYTE PTR [eax],al
    37e1:	01 9c dd 02 00 00 0f 	add    DWORD PTR [ebp+ebx*8+0xf000002],ebx
    37e8:	1b 0c 00             	sbb    ecx,DWORD PTR [eax+eax*1]
    37eb:	00 01                	add    BYTE PTR [ecx],al
    37ed:	3b 9c 02 00 00 02 91 	cmp    ebx,DWORD PTR [edx+eax*1-0x6efe0000]
    37f4:	00 0f                	add    BYTE PTR [edi],cl
    37f6:	c3                   	ret    
    37f7:	0b 00                	or     eax,DWORD PTR [eax]
    37f9:	00 01                	add    BYTE PTR [ecx],al
    37fb:	3b 96 02 00 00 02    	cmp    edx,DWORD PTR [esi+0x2000002]
    3801:	91                   	xchg   ecx,eax
    3802:	04 00                	add    al,0x0
    3804:	10 32                	adc    BYTE PTR [edx],dh
    3806:	0b 00                	or     eax,DWORD PTR [eax]
    3808:	00 01                	add    BYTE PTR [ecx],al
    380a:	40                   	inc    eax
    380b:	96                   	xchg   esi,eax
    380c:	02 00                	add    al,BYTE PTR [eax]
    380e:	00 82 25 00 30 3f    	add    BYTE PTR [edx+0x3f300025],al
    3814:	00 00                	add    BYTE PTR [eax],al
    3816:	00 01                	add    BYTE PTR [ecx],al
    3818:	9c                   	pushf  
    3819:	1f                   	pop    ds
    381a:	03 00                	add    eax,DWORD PTR [eax]
    381c:	00 0f                	add    BYTE PTR [edi],cl
    381e:	1b 0c 00             	sbb    ecx,DWORD PTR [eax+eax*1]
    3821:	00 01                	add    BYTE PTR [ecx],al
    3823:	40                   	inc    eax
    3824:	9c                   	pushf  
    3825:	02 00                	add    al,BYTE PTR [eax]
    3827:	00 02                	add    BYTE PTR [edx],al
    3829:	91                   	xchg   ecx,eax
    382a:	00 11                	add    BYTE PTR [ecx],dl
    382c:	74 00                	je     382e <sysEnter_Vector-0x12c7d2>
    382e:	01 41 3f             	add    DWORD PTR [ecx+0x3f],eax
    3831:	01 00                	add    DWORD PTR [eax],eax
    3833:	00 02                	add    BYTE PTR [edx],al
    3835:	91                   	xchg   ecx,eax
    3836:	6c                   	ins    BYTE PTR es:[edi],dx
    3837:	0d c3 0b 00 00       	or     eax,0xbc3
    383c:	01 42 4a             	add    DWORD PTR [edx+0x4a],eax
    383f:	01 00                	add    DWORD PTR [eax],eax
    3841:	00 02                	add    BYTE PTR [edx],al
    3843:	91                   	xchg   ecx,eax
    3844:	40                   	inc    eax
    3845:	00 10                	add    BYTE PTR [eax],dl
    3847:	21 0c 00             	and    DWORD PTR [eax+eax*1],ecx
    384a:	00 01                	add    BYTE PTR [ecx],al
    384c:	48                   	dec    eax
    384d:	96                   	xchg   esi,eax
    384e:	02 00                	add    al,BYTE PTR [eax]
    3850:	00 c1                	add    cl,al
    3852:	25 00 30 35 00       	and    eax,0x353000
    3857:	00 00                	add    BYTE PTR [eax],al
    3859:	01 9c 61 03 00 00 0f 	add    DWORD PTR [ecx+eiz*2+0xf000003],ebx
    3860:	1b 0c 00             	sbb    ecx,DWORD PTR [eax+eax*1]
    3863:	00 01                	add    BYTE PTR [ecx],al
    3865:	48                   	dec    eax
    3866:	9c                   	pushf  
    3867:	02 00                	add    al,BYTE PTR [eax]
    3869:	00 02                	add    BYTE PTR [edx],al
    386b:	91                   	xchg   ecx,eax
    386c:	00 0f                	add    BYTE PTR [edi],cl
    386e:	c3                   	ret    
    386f:	0b 00                	or     eax,DWORD PTR [eax]
    3871:	00 01                	add    BYTE PTR [ecx],al
    3873:	48                   	dec    eax
    3874:	96                   	xchg   esi,eax
    3875:	02 00                	add    al,BYTE PTR [eax]
    3877:	00 02                	add    BYTE PTR [edx],al
    3879:	91                   	xchg   ecx,eax
    387a:	04 11                	add    al,0x11
    387c:	74 00                	je     387e <sysEnter_Vector-0x12c782>
    387e:	01 4a 3f             	add    DWORD PTR [edx+0x3f],ecx
    3881:	01 00                	add    DWORD PTR [eax],eax
    3883:	00 02                	add    BYTE PTR [edx],al
    3885:	91                   	xchg   ecx,eax
    3886:	74 00                	je     3888 <sysEnter_Vector-0x12c778>
    3888:	10 d0                	adc    al,dl
    388a:	0b 00                	or     eax,DWORD PTR [eax]
    388c:	00 01                	add    BYTE PTR [ecx],al
    388e:	50                   	push   eax
    388f:	96                   	xchg   esi,eax
    3890:	02 00                	add    al,BYTE PTR [eax]
    3892:	00 f6                	add    dh,dh
    3894:	25 00 30 1d 00       	and    eax,0x1d3000
    3899:	00 00                	add    BYTE PTR [eax],al
    389b:	01 9c 97 03 00 00 0f 	add    DWORD PTR [edi+edx*4+0xf000003],ebx
    38a2:	1b 0c 00             	sbb    ecx,DWORD PTR [eax+eax*1]
    38a5:	00 01                	add    BYTE PTR [ecx],al
    38a7:	50                   	push   eax
    38a8:	9c                   	pushf  
    38a9:	02 00                	add    al,BYTE PTR [eax]
    38ab:	00 02                	add    BYTE PTR [edx],al
    38ad:	91                   	xchg   ecx,eax
    38ae:	00 0f                	add    BYTE PTR [edi],cl
    38b0:	c3                   	ret    
    38b1:	0b 00                	or     eax,DWORD PTR [eax]
    38b3:	00 01                	add    BYTE PTR [ecx],al
    38b5:	50                   	push   eax
    38b6:	96                   	xchg   esi,eax
    38b7:	02 00                	add    al,BYTE PTR [eax]
    38b9:	00 02                	add    BYTE PTR [edx],al
    38bb:	91                   	xchg   ecx,eax
    38bc:	04 00                	add    al,0x0
    38be:	0e                   	push   cs
    38bf:	e5 0b                	in     eax,0xb
    38c1:	00 00                	add    BYTE PTR [eax],al
    38c3:	01 54 3f 01          	add    DWORD PTR [edi+edi*1+0x1],edx
    38c7:	00 00                	add    BYTE PTR [eax],al
    38c9:	13 26                	adc    esp,DWORD PTR [esi]
    38cb:	00 30                	add    BYTE PTR [eax],dh
    38cd:	57                   	push   edi
    38ce:	08 00                	or     BYTE PTR [eax],al
    38d0:	00 01                	add    BYTE PTR [ecx],al
    38d2:	9c                   	pushf  
    38d3:	2f                   	das    
    38d4:	04 00                	add    al,0x0
    38d6:	00 0f                	add    BYTE PTR [edi],cl
    38d8:	c3                   	ret    
    38d9:	0b 00                	or     eax,DWORD PTR [eax]
    38db:	00 01                	add    BYTE PTR [ecx],al
    38dd:	54                   	push   esp
    38de:	96                   	xchg   esi,eax
    38df:	02 00                	add    al,BYTE PTR [eax]
    38e1:	00 02                	add    BYTE PTR [edx],al
    38e3:	91                   	xchg   ecx,eax
    38e4:	00 11                	add    BYTE PTR [ecx],dl
    38e6:	64                   	fs
    38e7:	61                   	popa   
    38e8:	79 00                	jns    38ea <sysEnter_Vector-0x12c716>
    38ea:	01 55 31             	add    DWORD PTR [ebp+0x31],edx
    38ed:	01 00                	add    DWORD PTR [eax],eax
    38ef:	00 02                	add    BYTE PTR [edx],al
    38f1:	91                   	xchg   ecx,eax
    38f2:	68 0d 7e 0b 00       	push   0xb7e0d
    38f7:	00 01                	add    BYTE PTR [ecx],al
    38f9:	55                   	push   ebp
    38fa:	31 01                	xor    DWORD PTR [ecx],eax
    38fc:	00 00                	add    BYTE PTR [eax],al
    38fe:	02 91 54 0d 7b 0b    	add    dl,BYTE PTR [ecx+0xb7b0d54]
    3904:	00 00                	add    BYTE PTR [eax],al
    3906:	01 56 03             	add    DWORD PTR [esi+0x3],edx
    3909:	01 00                	add    DWORD PTR [eax],eax
    390b:	00 02                	add    BYTE PTR [edx],al
    390d:	91                   	xchg   ecx,eax
    390e:	4c                   	dec    esp
    390f:	0d b4 0b 00 00       	or     eax,0xbb4
    3914:	01 57 03             	add    DWORD PTR [edi+0x3],edx
    3917:	01 00                	add    DWORD PTR [eax],eax
    3919:	00 02                	add    BYTE PTR [edx],al
    391b:	91                   	xchg   ecx,eax
    391c:	64                   	fs
    391d:	0d 83 0b 00 00       	or     eax,0xb83
    3922:	01 57 03             	add    DWORD PTR [edi+0x3],edx
    3925:	01 00                	add    DWORD PTR [eax],eax
    3927:	00 02                	add    BYTE PTR [edx],al
    3929:	91                   	xchg   ecx,eax
    392a:	60                   	pusha  
    392b:	0d 0b 06 00 00       	or     eax,0x60b
    3930:	01 58 31             	add    DWORD PTR [eax+0x31],ebx
    3933:	01 00                	add    DWORD PTR [eax],eax
    3935:	00 02                	add    BYTE PTR [edx],al
    3937:	91                   	xchg   ecx,eax
    3938:	50                   	push   eax
    3939:	0d 37 0c 00 00       	or     eax,0xc37
    393e:	01 59 03             	add    DWORD PTR [ecx+0x3],ebx
    3941:	01 00                	add    DWORD PTR [eax],eax
    3943:	00 02                	add    BYTE PTR [edx],al
    3945:	91                   	xchg   ecx,eax
    3946:	5c                   	pop    esp
    3947:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    394b:	00 01                	add    BYTE PTR [ecx],al
    394d:	5a                   	pop    edx
    394e:	31 01                	xor    DWORD PTR [ecx],eax
    3950:	00 00                	add    BYTE PTR [eax],al
    3952:	02 91 58 00 10 89    	add    dl,BYTE PTR [ecx-0x76efffa8]
    3958:	0b 00                	or     eax,DWORD PTR [eax]
    395a:	00 01                	add    BYTE PTR [ecx],al
    395c:	bf 96 02 00 00       	mov    edi,0x296
    3961:	6a 2e                	push   0x2e
    3963:	00 30                	add    BYTE PTR [eax],dh
    3965:	6d                   	ins    DWORD PTR es:[edi],dx
    3966:	00 00                	add    BYTE PTR [eax],al
    3968:	00 01                	add    BYTE PTR [ecx],al
    396a:	9c                   	pushf  
    396b:	73 04                	jae    3971 <sysEnter_Vector-0x12c68f>
    396d:	00 00                	add    BYTE PTR [eax],al
    396f:	0f e7 0b             	movntq QWORD PTR [ebx],mm1
    3972:	00 00                	add    BYTE PTR [eax],al
    3974:	01 bf 96 02 00 00    	add    DWORD PTR [edi+0x296],edi
    397a:	02 91 00 0f b9 0b    	add    dl,BYTE PTR [ecx+0xbb90f00]
    3980:	00 00                	add    BYTE PTR [eax],al
    3982:	01 bf e5 01 00 00    	add    DWORD PTR [edi+0x1e5],edi
    3988:	02 91 5c 0d 47 0b    	add    dl,BYTE PTR [ecx+0xb470d5c]
    398e:	00 00                	add    BYTE PTR [eax],al
    3990:	01 c1                	add    ecx,eax
    3992:	3f                   	aas    
    3993:	01 00                	add    DWORD PTR [eax],eax
    3995:	00 02                	add    BYTE PTR [edx],al
    3997:	91                   	xchg   ecx,eax
    3998:	6c                   	ins    BYTE PTR es:[edi],dx
    3999:	00 12                	add    BYTE PTR [edx],dl
    399b:	4b                   	dec    ebx
    399c:	00 00                	add    BYTE PTR [eax],al
    399e:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    39a1:	1f                   	pop    ds
    39a2:	01 00                	add    DWORD PTR [eax],eax
    39a4:	00 05 03 3c 4a 00    	add    BYTE PTR ds:0x4a3c03,al
    39aa:	30 12                	xor    BYTE PTR [edx],dl
    39ac:	af                   	scas   eax,DWORD PTR es:[edi]
    39ad:	00 00                	add    BYTE PTR [eax],al
    39af:	00 04 35 1f 01 00 00 	add    BYTE PTR [esi*1+0x11f],al
    39b6:	05 03 40 4a 00       	add    eax,0x4a4003
    39bb:	30 12                	xor    BYTE PTR [edx],dl
    39bd:	5b                   	pop    ebx
    39be:	01 00                	add    DWORD PTR [eax],eax
    39c0:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    39c3:	1f                   	pop    ds
    39c4:	01 00                	add    DWORD PTR [eax],eax
    39c6:	00 05 03 38 4a 00    	add    BYTE PTR ds:0x4a3803,al
    39cc:	30 12                	xor    BYTE PTR [edx],dl
    39ce:	54                   	push   esp
    39cf:	00 00                	add    BYTE PTR [eax],al
    39d1:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    39d4:	31 01                	xor    DWORD PTR [ecx],eax
    39d6:	00 00                	add    BYTE PTR [eax],al
    39d8:	05 03 48 4a 00       	add    eax,0x4a4803
    39dd:	30 12                	xor    BYTE PTR [edx],dl
    39df:	28 00                	sub    BYTE PTR [eax],al
    39e1:	00 00                	add    BYTE PTR [eax],al
    39e3:	05 4c c8 04 00       	add    eax,0x4c84c
    39e8:	00 05 03 44 4a 00    	add    BYTE PTR ds:0x4a4403,al
    39ee:	30 0a                	xor    BYTE PTR [edx],cl
    39f0:	04 fa                	add    al,0xfa
    39f2:	01 00                	add    DWORD PTR [eax],eax
    39f4:	00 12                	add    BYTE PTR [edx],dl
    39f6:	4d                   	dec    ebp
    39f7:	0b 00                	or     eax,DWORD PTR [eax]
    39f9:	00 01                	add    BYTE PTR [ecx],al
    39fb:	0c 03                	or     al,0x3
    39fd:	01 00                	add    DWORD PTR [eax],eax
    39ff:	00 05 03 48 49 00    	add    BYTE PTR ds:0x494803,al
    3a05:	30 12                	xor    BYTE PTR [edx],dl
    3a07:	2e                   	cs
    3a08:	0c 00                	or     al,0x0
    3a0a:	00 01                	add    BYTE PTR [ecx],al
    3a0c:	0d 31 01 00 00       	or     eax,0x131
    3a11:	05 03 6c 4a 00       	add    eax,0x4a6c03
    3a16:	30 13                	xor    BYTE PTR [ebx],dl
    3a18:	fa                   	cli    
    3a19:	01 00                	add    DWORD PTR [eax],eax
    3a1b:	00 00                	add    BYTE PTR [eax],al
    3a1d:	05 00 00 14 f3       	add    eax,0xf3140000
    3a22:	01 00                	add    DWORD PTR [eax],eax
    3a24:	00 01                	add    BYTE PTR [ecx],al
    3a26:	00 12                	add    BYTE PTR [edx],dl
    3a28:	57                   	push   edi
    3a29:	0b 00                	or     eax,DWORD PTR [eax]
    3a2b:	00 01                	add    BYTE PTR [ecx],al
    3a2d:	0e                   	push   cs
    3a2e:	f0 04 00             	lock add al,0x0
    3a31:	00 05 03 30 4a 00    	add    BYTE PTR ds:0x4a3003,al
    3a37:	30 12                	xor    BYTE PTR [edx],dl
    3a39:	68 0b 00 00 01       	push   0x100000b
    3a3e:	0f 03 01             	lsl    eax,WORD PTR [ecx]
    3a41:	00 00                	add    BYTE PTR [eax],al
    3a43:	05 03 70 4a 00       	add    eax,0x4a7003
    3a48:	30 13                	xor    BYTE PTR [ebx],dl
    3a4a:	03 01                	add    eax,DWORD PTR [ecx]
    3a4c:	00 00                	add    BYTE PTR [eax],al
    3a4e:	38 05 00 00 14 f3    	cmp    BYTE PTR ds:0xf3140000,al
    3a54:	01 00                	add    DWORD PTR [eax],eax
    3a56:	00 01                	add    BYTE PTR [ecx],al
    3a58:	14 f3                	adc    al,0xf3
    3a5a:	01 00                	add    DWORD PTR [eax],eax
    3a5c:	00 0b                	add    BYTE PTR [ebx],cl
    3a5e:	00 12                	add    BYTE PTR [edx],dl
    3a60:	fe 0b                	dec    BYTE PTR [ebx]
    3a62:	00 00                	add    BYTE PTR [eax],al
    3a64:	01 11                	add    DWORD PTR [ecx],edx
    3a66:	49                   	dec    ecx
    3a67:	05 00 00 05 03       	add    eax,0x3050000
    3a6c:	60                   	pusha  
    3a6d:	47                   	inc    edi
    3a6e:	00 30                	add    BYTE PTR [eax],dh
    3a70:	0b 22                	or     esp,DWORD PTR [edx]
    3a72:	05                   	.byte 0x5
    3a73:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     2c2:	11 01                	adc    DWORD PTR [ecx],eax
     2c4:	12 06                	adc    al,BYTE PTR [esi]
     2c6:	40                   	inc    eax
     2c7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cd:	00 00                	add    BYTE PTR [eax],al
     2cf:	07                   	pop    es
     2d0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     2d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2da:	02 18                	add    bl,BYTE PTR [eax]
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	08 0b                	or     BYTE PTR [ebx],cl
     2e0:	01 11                	add    DWORD PTR [ecx],edx
     2e2:	01 12                	add    DWORD PTR [edx],edx
     2e4:	06                   	push   es
     2e5:	00 00                	add    BYTE PTR [eax],al
     2e7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     2ea:	03 08                	add    ecx,DWORD PTR [eax]
     2ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f0:	49                   	dec    ecx
     2f1:	13 02                	adc    eax,DWORD PTR [edx]
     2f3:	18 00                	sbb    BYTE PTR [eax],al
     2f5:	00 0a                	add    BYTE PTR [edx],cl
     2f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2fa:	19 03                	sbb    DWORD PTR [ebx],eax
     2fc:	0e                   	push   cs
     2fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     301:	27                   	daa    
     302:	19 11                	sbb    DWORD PTR [ecx],edx
     304:	01 12                	add    DWORD PTR [edx],edx
     306:	06                   	push   es
     307:	40                   	inc    eax
     308:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30e:	00 00                	add    BYTE PTR [eax],al
     310:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     313:	03 0e                	add    ecx,DWORD PTR [esi]
     315:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     317:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     319:	49                   	dec    ecx
     31a:	13 02                	adc    eax,DWORD PTR [edx]
     31c:	18 00                	sbb    BYTE PTR [eax],al
     31e:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     321:	01 11                	add    DWORD PTR [ecx],edx
     323:	01 12                	add    DWORD PTR [edx],edx
     325:	06                   	push   es
     326:	01 13                	add    DWORD PTR [ebx],edx
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	0d 34 00 03 0e       	or     eax,0xe030034
     32f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     331:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     333:	49                   	dec    ecx
     334:	13 3f                	adc    edi,DWORD PTR [edi]
     336:	19 02                	sbb    DWORD PTR [edx],eax
     338:	18 00                	sbb    BYTE PTR [eax],al
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	01 11                	add    DWORD PTR [ecx],edx
     33e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     344:	0e                   	push   cs
     345:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     347:	11 01                	adc    DWORD PTR [ecx],eax
     349:	12 06                	adc    al,BYTE PTR [esi]
     34b:	10 17                	adc    BYTE PTR [edi],dl
     34d:	00 00                	add    BYTE PTR [eax],al
     34f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     352:	0b 0b                	or     ecx,DWORD PTR [ebx]
     354:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     35f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     362:	08 00                	or     BYTE PTR [eax],al
     364:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     367:	00 03                	add    BYTE PTR [ebx],al
     369:	0e                   	push   cs
     36a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36e:	49                   	dec    ecx
     36f:	13 00                	adc    eax,DWORD PTR [eax]
     371:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     377:	49                   	dec    ecx
     378:	13 00                	adc    eax,DWORD PTR [eax]
     37a:	00 06                	add    BYTE PTR [esi],al
     37c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     380:	00 00                	add    BYTE PTR [eax],al
     382:	07                   	pop    es
     383:	04 01                	add    al,0x1
     385:	03 0e                	add    ecx,DWORD PTR [esi]
     387:	0b 0b                	or     ecx,DWORD PTR [ebx]
     389:	49                   	dec    ecx
     38a:	13 3a                	adc    edi,DWORD PTR [edx]
     38c:	0b 3b                	or     edi,DWORD PTR [ebx]
     38e:	0b 01                	or     eax,DWORD PTR [ecx]
     390:	13 00                	adc    eax,DWORD PTR [eax]
     392:	00 08                	add    BYTE PTR [eax],cl
     394:	28 00                	sub    BYTE PTR [eax],al
     396:	03 0e                	add    ecx,DWORD PTR [esi]
     398:	1c 0b                	sbb    al,0xb
     39a:	00 00                	add    BYTE PTR [eax],al
     39c:	09 28                	or     DWORD PTR [eax],ebp
     39e:	00 03                	add    BYTE PTR [ebx],al
     3a0:	0e                   	push   cs
     3a1:	1c 05                	sbb    al,0x5
     3a3:	00 00                	add    BYTE PTR [eax],al
     3a5:	0a 0f                	or     cl,BYTE PTR [edi]
     3a7:	00 0b                	add    BYTE PTR [ebx],cl
     3a9:	0b 00                	or     eax,DWORD PTR [eax]
     3ab:	00 0b                	add    BYTE PTR [ebx],cl
     3ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3b0:	19 03                	sbb    DWORD PTR [ebx],eax
     3b2:	0e                   	push   cs
     3b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b7:	27                   	daa    
     3b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3bb:	11 01                	adc    DWORD PTR [ecx],eax
     3bd:	12 06                	adc    al,BYTE PTR [esi]
     3bf:	40                   	inc    eax
     3c0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	0c 05                	or     al,0x5
     3ca:	00 03                	add    BYTE PTR [ebx],al
     3cc:	0e                   	push   cs
     3cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d1:	49                   	dec    ecx
     3d2:	13 02                	adc    eax,DWORD PTR [edx]
     3d4:	18 00                	sbb    BYTE PTR [eax],al
     3d6:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	27                   	daa    
     3e3:	19 11                	sbb    DWORD PTR [ecx],edx
     3e5:	01 12                	add    DWORD PTR [edx],edx
     3e7:	06                   	push   es
     3e8:	40                   	inc    eax
     3e9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3ef:	00 00                	add    BYTE PTR [eax],al
     3f1:	0e                   	push   cs
     3f2:	34 00                	xor    al,0x0
     3f4:	03 0e                	add    ecx,DWORD PTR [esi]
     3f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fa:	49                   	dec    ecx
     3fb:	13 3f                	adc    edi,DWORD PTR [edi]
     3fd:	19 02                	sbb    DWORD PTR [edx],eax
     3ff:	18 00                	sbb    BYTE PTR [eax],al
     401:	00 00                	add    BYTE PTR [eax],al
     403:	01 11                	add    DWORD PTR [ecx],edx
     405:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40b:	0e                   	push   cs
     40c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	10 17                	adc    BYTE PTR [edi],dl
     414:	00 00                	add    BYTE PTR [eax],al
     416:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     419:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     41e:	0e                   	push   cs
     41f:	00 00                	add    BYTE PTR [eax],al
     421:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     424:	0b 0b                	or     ecx,DWORD PTR [ebx]
     426:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     429:	08 00                	or     BYTE PTR [eax],al
     42b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     42e:	00 03                	add    BYTE PTR [ebx],al
     430:	0e                   	push   cs
     431:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     433:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     435:	49                   	dec    ecx
     436:	13 00                	adc    eax,DWORD PTR [eax]
     438:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     43e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     440:	49                   	dec    ecx
     441:	13 3a                	adc    edi,DWORD PTR [edx]
     443:	0b 3b                	or     edi,DWORD PTR [ebx]
     445:	0b 01                	or     eax,DWORD PTR [ecx]
     447:	13 00                	adc    eax,DWORD PTR [eax]
     449:	00 06                	add    BYTE PTR [esi],al
     44b:	28 00                	sub    BYTE PTR [eax],al
     44d:	03 0e                	add    ecx,DWORD PTR [esi]
     44f:	1c 0b                	sbb    al,0xb
     451:	00 00                	add    BYTE PTR [eax],al
     453:	07                   	pop    es
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	03 0e                	add    ecx,DWORD PTR [esi]
     458:	1c 05                	sbb    al,0x5
     45a:	00 00                	add    BYTE PTR [eax],al
     45c:	08 0f                	or     BYTE PTR [edi],cl
     45e:	00 0b                	add    BYTE PTR [ebx],cl
     460:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 2e                	or     DWORD PTR [esi],ebp
     467:	01 3f                	add    DWORD PTR [edi],edi
     469:	19 03                	sbb    DWORD PTR [ebx],eax
     46b:	0e                   	push   cs
     46c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     46e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     470:	27                   	daa    
     471:	19 11                	sbb    DWORD PTR [ecx],edx
     473:	01 12                	add    DWORD PTR [edx],edx
     475:	06                   	push   es
     476:	40                   	inc    eax
     477:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     485:	0b 3b                	or     edi,DWORD PTR [ebx]
     487:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     48a:	02 18                	add    bl,BYTE PTR [eax]
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     494:	0b 3b                	or     edi,DWORD PTR [ebx]
     496:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     499:	02 18                	add    bl,BYTE PTR [eax]
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	0c 34                	or     al,0x34
     49f:	00 03                	add    BYTE PTR [ebx],al
     4a1:	0e                   	push   cs
     4a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a6:	49                   	dec    ecx
     4a7:	13 02                	adc    eax,DWORD PTR [edx]
     4a9:	18 00                	sbb    BYTE PTR [eax],al
     4ab:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     4b1:	01 13                	add    DWORD PTR [ebx],edx
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	0e                   	push   cs
     4b6:	21 00                	and    DWORD PTR [eax],eax
     4b8:	49                   	dec    ecx
     4b9:	13 2f                	adc    ebp,DWORD PTR [edi]
     4bb:	0b 00                	or     eax,DWORD PTR [eax]
     4bd:	00 0f                	add    BYTE PTR [edi],cl
     4bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4c2:	19 03                	sbb    DWORD PTR [ebx],eax
     4c4:	0e                   	push   cs
     4c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c9:	49                   	dec    ecx
     4ca:	13 11                	adc    edx,DWORD PTR [ecx]
     4cc:	01 12                	add    DWORD PTR [edx],edx
     4ce:	06                   	push   es
     4cf:	40                   	inc    eax
     4d0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     4d6:	00 00                	add    BYTE PTR [eax],al
     4d8:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4db:	03 08                	add    ecx,DWORD PTR [eax]
     4dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e1:	49                   	dec    ecx
     4e2:	13 02                	adc    eax,DWORD PTR [edx]
     4e4:	18 00                	sbb    BYTE PTR [eax],al
     4e6:	00 11                	add    BYTE PTR [ecx],dl
     4e8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4eb:	19 03                	sbb    DWORD PTR [ebx],eax
     4ed:	0e                   	push   cs
     4ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f2:	27                   	daa    
     4f3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4f6:	11 01                	adc    DWORD PTR [ecx],eax
     4f8:	12 06                	adc    al,BYTE PTR [esi]
     4fa:	40                   	inc    eax
     4fb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     501:	00 00                	add    BYTE PTR [eax],al
     503:	12 0a                	adc    cl,BYTE PTR [edx]
     505:	00 03                	add    BYTE PTR [ebx],al
     507:	0e                   	push   cs
     508:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     50a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     50c:	11 01                	adc    DWORD PTR [ecx],eax
     50e:	00 00                	add    BYTE PTR [eax],al
     510:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     513:	03 0e                	add    ecx,DWORD PTR [esi]
     515:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     517:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     519:	49                   	dec    ecx
     51a:	13 3f                	adc    edi,DWORD PTR [edi]
     51c:	19 02                	sbb    DWORD PTR [edx],eax
     51e:	18 00                	sbb    BYTE PTR [eax],al
     520:	00 00                	add    BYTE PTR [eax],al
     522:	01 11                	add    DWORD PTR [ecx],edx
     524:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     52a:	0e                   	push   cs
     52b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     52d:	11 01                	adc    DWORD PTR [ecx],eax
     52f:	12 06                	adc    al,BYTE PTR [esi]
     531:	10 17                	adc    BYTE PTR [edi],dl
     533:	00 00                	add    BYTE PTR [eax],al
     535:	02 16                	add    dl,BYTE PTR [esi]
     537:	00 03                	add    BYTE PTR [ebx],al
     539:	0e                   	push   cs
     53a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53e:	49                   	dec    ecx
     53f:	13 00                	adc    eax,DWORD PTR [eax]
     541:	00 03                	add    BYTE PTR [ebx],al
     543:	0f 00 0b             	str    WORD PTR [ebx]
     546:	0b 03                	or     eax,DWORD PTR [ebx]
     548:	0e                   	push   cs
     549:	49                   	dec    ecx
     54a:	13 00                	adc    eax,DWORD PTR [eax]
     54c:	00 04 24             	add    BYTE PTR [esp],al
     54f:	00 0b                	add    BYTE PTR [ebx],cl
     551:	0b 3e                	or     edi,DWORD PTR [esi]
     553:	0b 03                	or     eax,DWORD PTR [ebx]
     555:	0e                   	push   cs
     556:	00 00                	add    BYTE PTR [eax],al
     558:	05 24 00 0b 0b       	add    eax,0xb0b0024
     55d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     560:	08 00                	or     BYTE PTR [eax],al
     562:	00 06                	add    BYTE PTR [esi],al
     564:	0f 00 0b             	str    WORD PTR [ebx]
     567:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	07                   	pop    es
     56d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     571:	00 00                	add    BYTE PTR [eax],al
     573:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     576:	03 0e                	add    ecx,DWORD PTR [esi]
     578:	0b 0b                	or     ecx,DWORD PTR [ebx]
     57a:	49                   	dec    ecx
     57b:	13 3a                	adc    edi,DWORD PTR [edx]
     57d:	0b 3b                	or     edi,DWORD PTR [ebx]
     57f:	0b 01                	or     eax,DWORD PTR [ecx]
     581:	13 00                	adc    eax,DWORD PTR [eax]
     583:	00 09                	add    BYTE PTR [ecx],cl
     585:	28 00                	sub    BYTE PTR [eax],al
     587:	03 0e                	add    ecx,DWORD PTR [esi]
     589:	1c 0b                	sbb    al,0xb
     58b:	00 00                	add    BYTE PTR [eax],al
     58d:	0a 28                	or     ch,BYTE PTR [eax]
     58f:	00 03                	add    BYTE PTR [ebx],al
     591:	0e                   	push   cs
     592:	1c 05                	sbb    al,0x5
     594:	00 00                	add    BYTE PTR [eax],al
     596:	0b 0f                	or     ecx,DWORD PTR [edi]
     598:	00 0b                	add    BYTE PTR [ebx],cl
     59a:	0b 00                	or     eax,DWORD PTR [eax]
     59c:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     59f:	01 3f                	add    DWORD PTR [edi],edi
     5a1:	19 03                	sbb    DWORD PTR [ebx],eax
     5a3:	0e                   	push   cs
     5a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5a8:	27                   	daa    
     5a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ac:	11 01                	adc    DWORD PTR [ecx],eax
     5ae:	12 06                	adc    al,BYTE PTR [esi]
     5b0:	40                   	inc    eax
     5b1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	0d 05 00 03 0e       	or     eax,0xe030005
     5be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5c2:	49                   	dec    ecx
     5c3:	13 02                	adc    eax,DWORD PTR [edx]
     5c5:	18 00                	sbb    BYTE PTR [eax],al
     5c7:	00 0e                	add    BYTE PTR [esi],cl
     5c9:	34 00                	xor    al,0x0
     5cb:	03 0e                	add    ecx,DWORD PTR [esi]
     5cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d1:	49                   	dec    ecx
     5d2:	13 02                	adc    eax,DWORD PTR [edx]
     5d4:	18 00                	sbb    BYTE PTR [eax],al
     5d6:	00 0f                	add    BYTE PTR [edi],cl
     5d8:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     5db:	19 03                	sbb    DWORD PTR [ebx],eax
     5dd:	0e                   	push   cs
     5de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e2:	11 01                	adc    DWORD PTR [ecx],eax
     5e4:	12 06                	adc    al,BYTE PTR [esi]
     5e6:	40                   	inc    eax
     5e7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     5ed:	10 2e                	adc    BYTE PTR [esi],ch
     5ef:	00 3f                	add    BYTE PTR [edi],bh
     5f1:	19 03                	sbb    DWORD PTR [ebx],eax
     5f3:	0e                   	push   cs
     5f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5f8:	27                   	daa    
     5f9:	19 11                	sbb    DWORD PTR [ecx],edx
     5fb:	01 12                	add    DWORD PTR [edx],edx
     5fd:	06                   	push   es
     5fe:	40                   	inc    eax
     5ff:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     605:	11 2e                	adc    DWORD PTR [esi],ebp
     607:	01 3f                	add    DWORD PTR [edi],edi
     609:	19 03                	sbb    DWORD PTR [ebx],eax
     60b:	0e                   	push   cs
     60c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     60e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     610:	27                   	daa    
     611:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     614:	11 01                	adc    DWORD PTR [ecx],eax
     616:	12 06                	adc    al,BYTE PTR [esi]
     618:	40                   	inc    eax
     619:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     61f:	00 00                	add    BYTE PTR [eax],al
     621:	12 18                	adc    bl,BYTE PTR [eax]
     623:	00 00                	add    BYTE PTR [eax],al
     625:	00 13                	add    BYTE PTR [ebx],dl
     627:	0b 01                	or     eax,DWORD PTR [ecx]
     629:	11 01                	adc    DWORD PTR [ecx],eax
     62b:	12 06                	adc    al,BYTE PTR [esi]
     62d:	00 00                	add    BYTE PTR [eax],al
     62f:	14 34                	adc    al,0x34
     631:	00 03                	add    BYTE PTR [ebx],al
     633:	08 3a                	or     BYTE PTR [edx],bh
     635:	0b 3b                	or     edi,DWORD PTR [ebx]
     637:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     63a:	02 18                	add    bl,BYTE PTR [eax]
     63c:	00 00                	add    BYTE PTR [eax],al
     63e:	15 2e 01 3f 19       	adc    eax,0x193f012e
     643:	03 0e                	add    ecx,DWORD PTR [esi]
     645:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     647:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     649:	27                   	daa    
     64a:	19 11                	sbb    DWORD PTR [ecx],edx
     64c:	01 12                	add    DWORD PTR [edx],edx
     64e:	06                   	push   es
     64f:	40                   	inc    eax
     650:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     656:	00 00                	add    BYTE PTR [eax],al
     658:	16                   	push   ss
     659:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     65c:	19 03                	sbb    DWORD PTR [ebx],eax
     65e:	0e                   	push   cs
     65f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     661:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     663:	49                   	dec    ecx
     664:	13 11                	adc    edx,DWORD PTR [ecx]
     666:	01 12                	add    DWORD PTR [edx],edx
     668:	06                   	push   es
     669:	40                   	inc    eax
     66a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     670:	00 00                	add    BYTE PTR [eax],al
     672:	17                   	pop    ss
     673:	05 00 03 08 3a       	add    eax,0x3a080300
     678:	0b 3b                	or     edi,DWORD PTR [ebx]
     67a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     67d:	02 18                	add    bl,BYTE PTR [eax]
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	18 0b                	sbb    BYTE PTR [ebx],cl
     683:	01 11                	add    DWORD PTR [ecx],edx
     685:	01 12                	add    DWORD PTR [edx],edx
     687:	06                   	push   es
     688:	01 13                	add    DWORD PTR [ebx],edx
     68a:	00 00                	add    BYTE PTR [eax],al
     68c:	19 2e                	sbb    DWORD PTR [esi],ebp
     68e:	01 3f                	add    DWORD PTR [edi],edi
     690:	19 03                	sbb    DWORD PTR [ebx],eax
     692:	0e                   	push   cs
     693:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     695:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     69b:	11 01                	adc    DWORD PTR [ecx],eax
     69d:	12 06                	adc    al,BYTE PTR [esi]
     69f:	40                   	inc    eax
     6a0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     6a6:	00 00                	add    BYTE PTR [eax],al
     6a8:	1a 05 00 03 0e 3a    	sbb    al,BYTE PTR ds:0x3a0e0300
     6ae:	0b 3b                	or     edi,DWORD PTR [ebx]
     6b0:	05 49 13 02 18       	add    eax,0x18021349
     6b5:	00 00                	add    BYTE PTR [eax],al
     6b7:	1b 34 00             	sbb    esi,DWORD PTR [eax+eax*1]
     6ba:	03 0e                	add    ecx,DWORD PTR [esi]
     6bc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6be:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	1c 34                	sbb    al,0x34
     6c8:	00 03                	add    BYTE PTR [ebx],al
     6ca:	08 3a                	or     BYTE PTR [edx],bh
     6cc:	0b 3b                	or     edi,DWORD PTR [ebx]
     6ce:	05 49 13 02 18       	add    eax,0x18021349
     6d3:	00 00                	add    BYTE PTR [eax],al
     6d5:	1d 01 01 49 13       	sbb    eax,0x13490101
     6da:	01 13                	add    DWORD PTR [ebx],edx
     6dc:	00 00                	add    BYTE PTR [eax],al
     6de:	1e                   	push   ds
     6df:	21 00                	and    DWORD PTR [eax],eax
     6e1:	49                   	dec    ecx
     6e2:	13 2f                	adc    ebp,DWORD PTR [edi]
     6e4:	05 00 00 1f 34       	add    eax,0x341f0000
     6e9:	00 03                	add    BYTE PTR [ebx],al
     6eb:	0e                   	push   cs
     6ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6f0:	49                   	dec    ecx
     6f1:	13 3f                	adc    edi,DWORD PTR [edi]
     6f3:	19 02                	sbb    DWORD PTR [edx],eax
     6f5:	18 00                	sbb    BYTE PTR [eax],al
     6f7:	00 00                	add    BYTE PTR [eax],al
     6f9:	01 11                	add    DWORD PTR [ecx],edx
     6fb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     701:	0e                   	push   cs
     702:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     704:	11 01                	adc    DWORD PTR [ecx],eax
     706:	12 06                	adc    al,BYTE PTR [esi]
     708:	10 17                	adc    BYTE PTR [edi],dl
     70a:	00 00                	add    BYTE PTR [eax],al
     70c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     70f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     711:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     714:	0e                   	push   cs
     715:	00 00                	add    BYTE PTR [eax],al
     717:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     71a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     71c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     71f:	08 00                	or     BYTE PTR [eax],al
     721:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     724:	00 03                	add    BYTE PTR [ebx],al
     726:	0e                   	push   cs
     727:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     729:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     72b:	49                   	dec    ecx
     72c:	13 00                	adc    eax,DWORD PTR [eax]
     72e:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     734:	0b 0b                	or     ecx,DWORD PTR [ebx]
     736:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     738:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     73a:	01 13                	add    DWORD PTR [ebx],edx
     73c:	00 00                	add    BYTE PTR [eax],al
     73e:	06                   	push   es
     73f:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     744:	0b 3b                	or     edi,DWORD PTR [ebx]
     746:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     749:	38 0b                	cmp    BYTE PTR [ebx],cl
     74b:	00 00                	add    BYTE PTR [eax],al
     74d:	07                   	pop    es
     74e:	0d 00 03 08 3a       	or     eax,0x3a080300
     753:	0b 3b                	or     edi,DWORD PTR [ebx]
     755:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     758:	38 0b                	cmp    BYTE PTR [ebx],cl
     75a:	00 00                	add    BYTE PTR [eax],al
     75c:	08 0f                	or     BYTE PTR [edi],cl
     75e:	00 0b                	add    BYTE PTR [ebx],cl
     760:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     763:	00 00                	add    BYTE PTR [eax],al
     765:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     768:	03 0e                	add    ecx,DWORD PTR [esi]
     76a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     76c:	49                   	dec    ecx
     76d:	13 3a                	adc    edi,DWORD PTR [edx]
     76f:	0b 3b                	or     edi,DWORD PTR [ebx]
     771:	0b 01                	or     eax,DWORD PTR [ecx]
     773:	13 00                	adc    eax,DWORD PTR [eax]
     775:	00 0a                	add    BYTE PTR [edx],cl
     777:	28 00                	sub    BYTE PTR [eax],al
     779:	03 0e                	add    ecx,DWORD PTR [esi]
     77b:	1c 0b                	sbb    al,0xb
     77d:	00 00                	add    BYTE PTR [eax],al
     77f:	0b 28                	or     ebp,DWORD PTR [eax]
     781:	00 03                	add    BYTE PTR [ebx],al
     783:	0e                   	push   cs
     784:	1c 05                	sbb    al,0x5
     786:	00 00                	add    BYTE PTR [eax],al
     788:	0c 0f                	or     al,0xf
     78a:	00 0b                	add    BYTE PTR [ebx],cl
     78c:	0b 00                	or     eax,DWORD PTR [eax]
     78e:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     794:	03 0e                	add    ecx,DWORD PTR [esi]
     796:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     798:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     79a:	11 01                	adc    DWORD PTR [ecx],eax
     79c:	12 06                	adc    al,BYTE PTR [esi]
     79e:	40                   	inc    eax
     79f:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7a5:	0e                   	push   cs
     7a6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     7a9:	19 03                	sbb    DWORD PTR [ebx],eax
     7ab:	0e                   	push   cs
     7ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7b0:	27                   	daa    
     7b1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7b4:	11 01                	adc    DWORD PTR [ecx],eax
     7b6:	12 06                	adc    al,BYTE PTR [esi]
     7b8:	40                   	inc    eax
     7b9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7bf:	00 00                	add    BYTE PTR [eax],al
     7c1:	0f 05                	syscall 
     7c3:	00 03                	add    BYTE PTR [ebx],al
     7c5:	0e                   	push   cs
     7c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ca:	49                   	dec    ecx
     7cb:	13 02                	adc    eax,DWORD PTR [edx]
     7cd:	18 00                	sbb    BYTE PTR [eax],al
     7cf:	00 10                	add    BYTE PTR [eax],dl
     7d1:	34 00                	xor    al,0x0
     7d3:	03 0e                	add    ecx,DWORD PTR [esi]
     7d5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7d7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7d9:	49                   	dec    ecx
     7da:	13 02                	adc    eax,DWORD PTR [edx]
     7dc:	18 00                	sbb    BYTE PTR [eax],al
     7de:	00 11                	add    BYTE PTR [ecx],dl
     7e0:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     7e3:	19 03                	sbb    DWORD PTR [ebx],eax
     7e5:	0e                   	push   cs
     7e6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7e8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ea:	27                   	daa    
     7eb:	19 11                	sbb    DWORD PTR [ecx],edx
     7ed:	01 12                	add    DWORD PTR [edx],edx
     7ef:	06                   	push   es
     7f0:	40                   	inc    eax
     7f1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7f7:	00 00                	add    BYTE PTR [eax],al
     7f9:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     7fc:	03 08                	add    ecx,DWORD PTR [eax]
     7fe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     800:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     802:	49                   	dec    ecx
     803:	13 02                	adc    eax,DWORD PTR [edx]
     805:	18 00                	sbb    BYTE PTR [eax],al
     807:	00 13                	add    BYTE PTR [ebx],dl
     809:	0a 00                	or     al,BYTE PTR [eax]
     80b:	03 0e                	add    ecx,DWORD PTR [esi]
     80d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     80f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     811:	11 01                	adc    DWORD PTR [ecx],eax
     813:	00 00                	add    BYTE PTR [eax],al
     815:	14 2e                	adc    al,0x2e
     817:	01 3f                	add    DWORD PTR [edi],edi
     819:	19 03                	sbb    DWORD PTR [ebx],eax
     81b:	0e                   	push   cs
     81c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     81e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     820:	27                   	daa    
     821:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     824:	11 01                	adc    DWORD PTR [ecx],eax
     826:	12 06                	adc    al,BYTE PTR [esi]
     828:	40                   	inc    eax
     829:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     82f:	00 00                	add    BYTE PTR [eax],al
     831:	15 2e 01 3f 19       	adc    eax,0x193f012e
     836:	03 0e                	add    ecx,DWORD PTR [esi]
     838:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     83a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     83c:	27                   	daa    
     83d:	19 11                	sbb    DWORD PTR [ecx],edx
     83f:	01 12                	add    DWORD PTR [edx],edx
     841:	06                   	push   es
     842:	40                   	inc    eax
     843:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     849:	00 00                	add    BYTE PTR [eax],al
     84b:	16                   	push   ss
     84c:	34 00                	xor    al,0x0
     84e:	03 0e                	add    ecx,DWORD PTR [esi]
     850:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     852:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     854:	49                   	dec    ecx
     855:	13 3f                	adc    edi,DWORD PTR [edi]
     857:	19 02                	sbb    DWORD PTR [edx],eax
     859:	18 00                	sbb    BYTE PTR [eax],al
     85b:	00 00                	add    BYTE PTR [eax],al
     85d:	01 11                	add    DWORD PTR [ecx],edx
     85f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     865:	0e                   	push   cs
     866:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     868:	11 01                	adc    DWORD PTR [ecx],eax
     86a:	12 06                	adc    al,BYTE PTR [esi]
     86c:	10 17                	adc    BYTE PTR [edi],dl
     86e:	00 00                	add    BYTE PTR [eax],al
     870:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     873:	0b 0b                	or     ecx,DWORD PTR [ebx]
     875:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     878:	0e                   	push   cs
     879:	00 00                	add    BYTE PTR [eax],al
     87b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     87e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     880:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     883:	08 00                	or     BYTE PTR [eax],al
     885:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     888:	00 0b                	add    BYTE PTR [ebx],cl
     88a:	0b 00                	or     eax,DWORD PTR [eax]
     88c:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     892:	49                   	dec    ecx
     893:	13 00                	adc    eax,DWORD PTR [eax]
     895:	00 06                	add    BYTE PTR [esi],al
     897:	16                   	push   ss
     898:	00 03                	add    BYTE PTR [ebx],al
     89a:	0e                   	push   cs
     89b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     89d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     89f:	49                   	dec    ecx
     8a0:	13 00                	adc    eax,DWORD PTR [eax]
     8a2:	00 07                	add    BYTE PTR [edi],al
     8a4:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     8a8:	00 00                	add    BYTE PTR [eax],al
     8aa:	08 2e                	or     BYTE PTR [esi],ch
     8ac:	01 3f                	add    DWORD PTR [edi],edi
     8ae:	19 03                	sbb    DWORD PTR [ebx],eax
     8b0:	0e                   	push   cs
     8b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8b5:	27                   	daa    
     8b6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     8b9:	11 01                	adc    DWORD PTR [ecx],eax
     8bb:	12 06                	adc    al,BYTE PTR [esi]
     8bd:	40                   	inc    eax
     8be:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     8c4:	00 00                	add    BYTE PTR [eax],al
     8c6:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     8cc:	0b 3b                	or     edi,DWORD PTR [ebx]
     8ce:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8d1:	02 18                	add    bl,BYTE PTR [eax]
     8d3:	00 00                	add    BYTE PTR [eax],al
     8d5:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     8db:	0b 3b                	or     edi,DWORD PTR [ebx]
     8dd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8e0:	02 18                	add    bl,BYTE PTR [eax]
     8e2:	00 00                	add    BYTE PTR [eax],al
     8e4:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     8e7:	03 08                	add    ecx,DWORD PTR [eax]
     8e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8ed:	49                   	dec    ecx
     8ee:	13 02                	adc    eax,DWORD PTR [edx]
     8f0:	18 00                	sbb    BYTE PTR [eax],al
     8f2:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     8f5:	01 11                	add    DWORD PTR [ecx],edx
     8f7:	01 12                	add    DWORD PTR [edx],edx
     8f9:	06                   	push   es
     8fa:	01 13                	add    DWORD PTR [ebx],edx
     8fc:	00 00                	add    BYTE PTR [eax],al
     8fe:	0d 0b 01 11 01       	or     eax,0x111010b
     903:	12 06                	adc    al,BYTE PTR [esi]
     905:	00 00                	add    BYTE PTR [eax],al
     907:	0e                   	push   cs
     908:	26 00 00             	add    BYTE PTR es:[eax],al
     90b:	00 0f                	add    BYTE PTR [edi],cl
     90d:	34 00                	xor    al,0x0
     90f:	03 0e                	add    ecx,DWORD PTR [esi]
     911:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     913:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     915:	49                   	dec    ecx
     916:	13 3f                	adc    edi,DWORD PTR [edi]
     918:	19 02                	sbb    DWORD PTR [edx],eax
     91a:	18 00                	sbb    BYTE PTR [eax],al
     91c:	00 00                	add    BYTE PTR [eax],al
     91e:	01 11                	add    DWORD PTR [ecx],edx
     920:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     926:	0e                   	push   cs
     927:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     929:	11 01                	adc    DWORD PTR [ecx],eax
     92b:	12 06                	adc    al,BYTE PTR [esi]
     92d:	10 17                	adc    BYTE PTR [edi],dl
     92f:	00 00                	add    BYTE PTR [eax],al
     931:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     934:	0b 0b                	or     ecx,DWORD PTR [ebx]
     936:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     939:	0e                   	push   cs
     93a:	00 00                	add    BYTE PTR [eax],al
     93c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     93f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     941:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     944:	08 00                	or     BYTE PTR [eax],al
     946:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     949:	00 03                	add    BYTE PTR [ebx],al
     94b:	0e                   	push   cs
     94c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     94e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     950:	49                   	dec    ecx
     951:	13 00                	adc    eax,DWORD PTR [eax]
     953:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     959:	00 00                	add    BYTE PTR [eax],al
     95b:	06                   	push   es
     95c:	0f 00 0b             	str    WORD PTR [ebx]
     95f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     962:	00 00                	add    BYTE PTR [eax],al
     964:	07                   	pop    es
     965:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     968:	19 03                	sbb    DWORD PTR [ebx],eax
     96a:	0e                   	push   cs
     96b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     96d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     96f:	27                   	daa    
     970:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     973:	11 01                	adc    DWORD PTR [ecx],eax
     975:	12 06                	adc    al,BYTE PTR [esi]
     977:	40                   	inc    eax
     978:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     97e:	00 00                	add    BYTE PTR [eax],al
     980:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     986:	0b 3b                	or     edi,DWORD PTR [ebx]
     988:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     98b:	02 18                	add    bl,BYTE PTR [eax]
     98d:	00 00                	add    BYTE PTR [eax],al
     98f:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     992:	03 08                	add    ecx,DWORD PTR [eax]
     994:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     996:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     998:	49                   	dec    ecx
     999:	13 02                	adc    eax,DWORD PTR [edx]
     99b:	18 00                	sbb    BYTE PTR [eax],al
     99d:	00 0a                	add    BYTE PTR [edx],cl
     99f:	34 00                	xor    al,0x0
     9a1:	03 0e                	add    ecx,DWORD PTR [esi]
     9a3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9a5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9a7:	49                   	dec    ecx
     9a8:	13 02                	adc    eax,DWORD PTR [edx]
     9aa:	18 00                	sbb    BYTE PTR [eax],al
     9ac:	00 0b                	add    BYTE PTR [ebx],cl
     9ae:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9b1:	19 03                	sbb    DWORD PTR [ebx],eax
     9b3:	0e                   	push   cs
     9b4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9b6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9b8:	27                   	daa    
     9b9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9bc:	11 01                	adc    DWORD PTR [ecx],eax
     9be:	12 06                	adc    al,BYTE PTR [esi]
     9c0:	40                   	inc    eax
     9c1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     9c7:	00 00                	add    BYTE PTR [eax],al
     9c9:	0c 34                	or     al,0x34
     9cb:	00 03                	add    BYTE PTR [ebx],al
     9cd:	0e                   	push   cs
     9ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9d0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9d2:	49                   	dec    ecx
     9d3:	13 3f                	adc    edi,DWORD PTR [edi]
     9d5:	19 02                	sbb    DWORD PTR [edx],eax
     9d7:	18 00                	sbb    BYTE PTR [eax],al
     9d9:	00 00                	add    BYTE PTR [eax],al
     9db:	01 11                	add    DWORD PTR [ecx],edx
     9dd:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9e3:	0e                   	push   cs
     9e4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9e6:	10 17                	adc    BYTE PTR [edi],dl
     9e8:	00 00                	add    BYTE PTR [eax],al
     9ea:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     9ed:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9ef:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9f2:	0e                   	push   cs
     9f3:	00 00                	add    BYTE PTR [eax],al
     9f5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     9f8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9fa:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9fd:	08 00                	or     BYTE PTR [eax],al
     9ff:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a02:	00 03                	add    BYTE PTR [ebx],al
     a04:	0e                   	push   cs
     a05:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a07:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a09:	49                   	dec    ecx
     a0a:	13 00                	adc    eax,DWORD PTR [eax]
     a0c:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a12:	49                   	dec    ecx
     a13:	13 00                	adc    eax,DWORD PTR [eax]
     a15:	00 06                	add    BYTE PTR [esi],al
     a17:	34 00                	xor    al,0x0
     a19:	03 0e                	add    ecx,DWORD PTR [esi]
     a1b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a1d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a1f:	49                   	dec    ecx
     a20:	13 3f                	adc    edi,DWORD PTR [edi]
     a22:	19 02                	sbb    DWORD PTR [edx],eax
     a24:	18 00                	sbb    BYTE PTR [eax],al
     a26:	00 00                	add    BYTE PTR [eax],al
     a28:	01 11                	add    DWORD PTR [ecx],edx
     a2a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a30:	0e                   	push   cs
     a31:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a33:	11 01                	adc    DWORD PTR [ecx],eax
     a35:	12 06                	adc    al,BYTE PTR [esi]
     a37:	10 17                	adc    BYTE PTR [edi],dl
     a39:	00 00                	add    BYTE PTR [eax],al
     a3b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a3e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a40:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a43:	0e                   	push   cs
     a44:	00 00                	add    BYTE PTR [eax],al
     a46:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a49:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a4b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a4e:	08 00                	or     BYTE PTR [eax],al
     a50:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a53:	00 03                	add    BYTE PTR [ebx],al
     a55:	0e                   	push   cs
     a56:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a58:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a5a:	49                   	dec    ecx
     a5b:	13 00                	adc    eax,DWORD PTR [eax]
     a5d:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     a63:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a65:	49                   	dec    ecx
     a66:	13 3a                	adc    edi,DWORD PTR [edx]
     a68:	0b 3b                	or     edi,DWORD PTR [ebx]
     a6a:	0b 01                	or     eax,DWORD PTR [ecx]
     a6c:	13 00                	adc    eax,DWORD PTR [eax]
     a6e:	00 06                	add    BYTE PTR [esi],al
     a70:	28 00                	sub    BYTE PTR [eax],al
     a72:	03 0e                	add    ecx,DWORD PTR [esi]
     a74:	1c 0b                	sbb    al,0xb
     a76:	00 00                	add    BYTE PTR [eax],al
     a78:	07                   	pop    es
     a79:	28 00                	sub    BYTE PTR [eax],al
     a7b:	03 0e                	add    ecx,DWORD PTR [esi]
     a7d:	1c 05                	sbb    al,0x5
     a7f:	00 00                	add    BYTE PTR [eax],al
     a81:	08 0f                	or     BYTE PTR [edi],cl
     a83:	00 0b                	add    BYTE PTR [ebx],cl
     a85:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a88:	00 00                	add    BYTE PTR [eax],al
     a8a:	09 2e                	or     DWORD PTR [esi],ebp
     a8c:	01 3f                	add    DWORD PTR [edi],edi
     a8e:	19 03                	sbb    DWORD PTR [ebx],eax
     a90:	0e                   	push   cs
     a91:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a93:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a95:	27                   	daa    
     a96:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a99:	11 01                	adc    DWORD PTR [ecx],eax
     a9b:	12 06                	adc    al,BYTE PTR [esi]
     a9d:	40                   	inc    eax
     a9e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     aa4:	00 00                	add    BYTE PTR [eax],al
     aa6:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     aac:	0b 3b                	or     edi,DWORD PTR [ebx]
     aae:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ab1:	02 18                	add    bl,BYTE PTR [eax]
     ab3:	00 00                	add    BYTE PTR [eax],al
     ab5:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     ab8:	03 0e                	add    ecx,DWORD PTR [esi]
     aba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     abc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     abe:	49                   	dec    ecx
     abf:	13 3f                	adc    edi,DWORD PTR [edi]
     ac1:	19 02                	sbb    DWORD PTR [edx],eax
     ac3:	18 00                	sbb    BYTE PTR [eax],al
     ac5:	00 00                	add    BYTE PTR [eax],al
     ac7:	01 11                	add    DWORD PTR [ecx],edx
     ac9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     acf:	0e                   	push   cs
     ad0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ad2:	11 01                	adc    DWORD PTR [ecx],eax
     ad4:	12 06                	adc    al,BYTE PTR [esi]
     ad6:	10 17                	adc    BYTE PTR [edi],dl
     ad8:	00 00                	add    BYTE PTR [eax],al
     ada:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     add:	0b 0b                	or     ecx,DWORD PTR [ebx]
     adf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ae2:	0e                   	push   cs
     ae3:	00 00                	add    BYTE PTR [eax],al
     ae5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ae8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     aea:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     aed:	08 00                	or     BYTE PTR [eax],al
     aef:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     af2:	00 03                	add    BYTE PTR [ebx],al
     af4:	0e                   	push   cs
     af5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     af7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     af9:	49                   	dec    ecx
     afa:	13 00                	adc    eax,DWORD PTR [eax]
     afc:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b02:	49                   	dec    ecx
     b03:	13 00                	adc    eax,DWORD PTR [eax]
     b05:	00 06                	add    BYTE PTR [esi],al
     b07:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b0b:	00 00                	add    BYTE PTR [eax],al
     b0d:	07                   	pop    es
     b0e:	0f 00 0b             	str    WORD PTR [ebx]
     b11:	0b 00                	or     eax,DWORD PTR [eax]
     b13:	00 08                	add    BYTE PTR [eax],cl
     b15:	13 01                	adc    eax,DWORD PTR [ecx]
     b17:	03 0e                	add    ecx,DWORD PTR [esi]
     b19:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b1b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b1d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b1f:	01 13                	add    DWORD PTR [ebx],edx
     b21:	00 00                	add    BYTE PTR [eax],al
     b23:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     b29:	0b 3b                	or     edi,DWORD PTR [ebx]
     b2b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b2e:	38 0b                	cmp    BYTE PTR [ebx],cl
     b30:	00 00                	add    BYTE PTR [eax],al
     b32:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     b38:	13 01                	adc    eax,DWORD PTR [ecx]
     b3a:	13 00                	adc    eax,DWORD PTR [eax]
     b3c:	00 0b                	add    BYTE PTR [ebx],cl
     b3e:	05 00 49 13 00       	add    eax,0x134900
     b43:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     b46:	01 3f                	add    DWORD PTR [edi],edi
     b48:	19 03                	sbb    DWORD PTR [ebx],eax
     b4a:	0e                   	push   cs
     b4b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b4d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b4f:	11 01                	adc    DWORD PTR [ecx],eax
     b51:	12 06                	adc    al,BYTE PTR [esi]
     b53:	40                   	inc    eax
     b54:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b5a:	00 00                	add    BYTE PTR [eax],al
     b5c:	0d 34 00 03 0e       	or     eax,0xe030034
     b61:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b63:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b65:	49                   	dec    ecx
     b66:	13 02                	adc    eax,DWORD PTR [edx]
     b68:	18 00                	sbb    BYTE PTR [eax],al
     b6a:	00 0e                	add    BYTE PTR [esi],cl
     b6c:	01 01                	add    DWORD PTR [ecx],eax
     b6e:	49                   	dec    ecx
     b6f:	13 01                	adc    eax,DWORD PTR [ecx]
     b71:	13 00                	adc    eax,DWORD PTR [eax]
     b73:	00 0f                	add    BYTE PTR [edi],cl
     b75:	21 00                	and    DWORD PTR [eax],eax
     b77:	49                   	dec    ecx
     b78:	13 2f                	adc    ebp,DWORD PTR [edi]
     b7a:	0b 00                	or     eax,DWORD PTR [eax]
     b7c:	00 10                	add    BYTE PTR [eax],dl
     b7e:	34 00                	xor    al,0x0
     b80:	03 0e                	add    ecx,DWORD PTR [esi]
     b82:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b84:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b86:	49                   	dec    ecx
     b87:	13 3f                	adc    edi,DWORD PTR [edi]
     b89:	19 02                	sbb    DWORD PTR [edx],eax
     b8b:	18 00                	sbb    BYTE PTR [eax],al
     b8d:	00 00                	add    BYTE PTR [eax],al
     b8f:	01 11                	add    DWORD PTR [ecx],edx
     b91:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b97:	0e                   	push   cs
     b98:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b9a:	11 01                	adc    DWORD PTR [ecx],eax
     b9c:	12 06                	adc    al,BYTE PTR [esi]
     b9e:	10 17                	adc    BYTE PTR [edi],dl
     ba0:	00 00                	add    BYTE PTR [eax],al
     ba2:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ba5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ba7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     baa:	0e                   	push   cs
     bab:	00 00                	add    BYTE PTR [eax],al
     bad:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     bb0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     bb2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     bb5:	08 00                	or     BYTE PTR [eax],al
     bb7:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     bba:	00 03                	add    BYTE PTR [ebx],al
     bbc:	0e                   	push   cs
     bbd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bbf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bc1:	49                   	dec    ecx
     bc2:	13 00                	adc    eax,DWORD PTR [eax]
     bc4:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     bca:	49                   	dec    ecx
     bcb:	13 00                	adc    eax,DWORD PTR [eax]
     bcd:	00 06                	add    BYTE PTR [esi],al
     bcf:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     bd3:	00 00                	add    BYTE PTR [eax],al
     bd5:	07                   	pop    es
     bd6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bd9:	19 03                	sbb    DWORD PTR [ebx],eax
     bdb:	0e                   	push   cs
     bdc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bde:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     be0:	27                   	daa    
     be1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     be4:	11 01                	adc    DWORD PTR [ecx],eax
     be6:	12 06                	adc    al,BYTE PTR [esi]
     be8:	40                   	inc    eax
     be9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bef:	00 00                	add    BYTE PTR [eax],al
     bf1:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     bf7:	0b 3b                	or     edi,DWORD PTR [ebx]
     bf9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bfc:	02 18                	add    bl,BYTE PTR [eax]
     bfe:	00 00                	add    BYTE PTR [eax],al
     c00:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     c06:	0b 3b                	or     edi,DWORD PTR [ebx]
     c08:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c0b:	02 18                	add    bl,BYTE PTR [eax]
     c0d:	00 00                	add    BYTE PTR [eax],al
     c0f:	0a 2e                	or     ch,BYTE PTR [esi]
     c11:	01 3f                	add    DWORD PTR [edi],edi
     c13:	19 03                	sbb    DWORD PTR [ebx],eax
     c15:	0e                   	push   cs
     c16:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c18:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c1a:	27                   	daa    
     c1b:	19 11                	sbb    DWORD PTR [ecx],edx
     c1d:	01 12                	add    DWORD PTR [edx],edx
     c1f:	06                   	push   es
     c20:	40                   	inc    eax
     c21:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c27:	00 00                	add    BYTE PTR [eax],al
     c29:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     c2c:	03 08                	add    ecx,DWORD PTR [eax]
     c2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c32:	49                   	dec    ecx
     c33:	13 02                	adc    eax,DWORD PTR [edx]
     c35:	18 00                	sbb    BYTE PTR [eax],al
     c37:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     c3a:	00 03                	add    BYTE PTR [ebx],al
     c3c:	0e                   	push   cs
     c3d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c3f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c41:	49                   	dec    ecx
     c42:	13 3f                	adc    edi,DWORD PTR [edi]
     c44:	19 02                	sbb    DWORD PTR [edx],eax
     c46:	18 00                	sbb    BYTE PTR [eax],al
     c48:	00 00                	add    BYTE PTR [eax],al
     c4a:	01 11                	add    DWORD PTR [ecx],edx
     c4c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c52:	0e                   	push   cs
     c53:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c55:	11 01                	adc    DWORD PTR [ecx],eax
     c57:	12 06                	adc    al,BYTE PTR [esi]
     c59:	10 17                	adc    BYTE PTR [edi],dl
     c5b:	00 00                	add    BYTE PTR [eax],al
     c5d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c60:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c62:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c65:	0e                   	push   cs
     c66:	00 00                	add    BYTE PTR [eax],al
     c68:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c6b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c6d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c70:	08 00                	or     BYTE PTR [eax],al
     c72:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c75:	00 03                	add    BYTE PTR [ebx],al
     c77:	0e                   	push   cs
     c78:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c7a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c7c:	49                   	dec    ecx
     c7d:	13 00                	adc    eax,DWORD PTR [eax]
     c7f:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c85:	49                   	dec    ecx
     c86:	13 00                	adc    eax,DWORD PTR [eax]
     c88:	00 06                	add    BYTE PTR [esi],al
     c8a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     c8e:	00 00                	add    BYTE PTR [eax],al
     c90:	07                   	pop    es
     c91:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c94:	19 03                	sbb    DWORD PTR [ebx],eax
     c96:	0e                   	push   cs
     c97:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c99:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c9b:	27                   	daa    
     c9c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c9f:	11 01                	adc    DWORD PTR [ecx],eax
     ca1:	12 06                	adc    al,BYTE PTR [esi]
     ca3:	40                   	inc    eax
     ca4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     caa:	00 00                	add    BYTE PTR [eax],al
     cac:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     cb2:	0b 3b                	or     edi,DWORD PTR [ebx]
     cb4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     cb7:	02 18                	add    bl,BYTE PTR [eax]
     cb9:	00 00                	add    BYTE PTR [eax],al
     cbb:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     cbe:	03 08                	add    ecx,DWORD PTR [eax]
     cc0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cc2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cc4:	49                   	dec    ecx
     cc5:	13 02                	adc    eax,DWORD PTR [edx]
     cc7:	18 00                	sbb    BYTE PTR [eax],al
     cc9:	00 0a                	add    BYTE PTR [edx],cl
     ccb:	34 00                	xor    al,0x0
     ccd:	03 0e                	add    ecx,DWORD PTR [esi]
     ccf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cd1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cd3:	49                   	dec    ecx
     cd4:	13 3f                	adc    edi,DWORD PTR [edi]
     cd6:	19 02                	sbb    DWORD PTR [edx],eax
     cd8:	18 00                	sbb    BYTE PTR [eax],al
     cda:	00 00                	add    BYTE PTR [eax],al
     cdc:	01 11                	add    DWORD PTR [ecx],edx
     cde:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ce4:	0e                   	push   cs
     ce5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ce7:	11 01                	adc    DWORD PTR [ecx],eax
     ce9:	12 06                	adc    al,BYTE PTR [esi]
     ceb:	10 17                	adc    BYTE PTR [edi],dl
     ced:	00 00                	add    BYTE PTR [eax],al
     cef:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     cf2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cf4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cf7:	0e                   	push   cs
     cf8:	00 00                	add    BYTE PTR [eax],al
     cfa:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     cfd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cff:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d02:	08 00                	or     BYTE PTR [eax],al
     d04:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     d07:	00 03                	add    BYTE PTR [ebx],al
     d09:	0e                   	push   cs
     d0a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d0c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d0e:	49                   	dec    ecx
     d0f:	13 00                	adc    eax,DWORD PTR [eax]
     d11:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     d17:	49                   	dec    ecx
     d18:	13 00                	adc    eax,DWORD PTR [eax]
     d1a:	00 06                	add    BYTE PTR [esi],al
     d1c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     d20:	00 00                	add    BYTE PTR [eax],al
     d22:	07                   	pop    es
     d23:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d26:	19 03                	sbb    DWORD PTR [ebx],eax
     d28:	0e                   	push   cs
     d29:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d2b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d2d:	27                   	daa    
     d2e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d31:	11 01                	adc    DWORD PTR [ecx],eax
     d33:	12 06                	adc    al,BYTE PTR [esi]
     d35:	40                   	inc    eax
     d36:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d3c:	00 00                	add    BYTE PTR [eax],al
     d3e:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     d44:	0b 3b                	or     edi,DWORD PTR [ebx]
     d46:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d49:	02 18                	add    bl,BYTE PTR [eax]
     d4b:	00 00                	add    BYTE PTR [eax],al
     d4d:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     d50:	03 08                	add    ecx,DWORD PTR [eax]
     d52:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d54:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d56:	49                   	dec    ecx
     d57:	13 02                	adc    eax,DWORD PTR [edx]
     d59:	18 00                	sbb    BYTE PTR [eax],al
     d5b:	00 0a                	add    BYTE PTR [edx],cl
     d5d:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     d62:	0b 3b                	or     edi,DWORD PTR [ebx]
     d64:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d67:	02 18                	add    bl,BYTE PTR [eax]
     d69:	00 00                	add    BYTE PTR [eax],al
     d6b:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d6e:	03 0e                	add    ecx,DWORD PTR [esi]
     d70:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d72:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d74:	49                   	dec    ecx
     d75:	13 3f                	adc    edi,DWORD PTR [edi]
     d77:	19 02                	sbb    DWORD PTR [edx],eax
     d79:	18 00                	sbb    BYTE PTR [eax],al
     d7b:	00 00                	add    BYTE PTR [eax],al
     d7d:	01 11                	add    DWORD PTR [ecx],edx
     d7f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d85:	0e                   	push   cs
     d86:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d88:	11 01                	adc    DWORD PTR [ecx],eax
     d8a:	12 06                	adc    al,BYTE PTR [esi]
     d8c:	10 17                	adc    BYTE PTR [edi],dl
     d8e:	00 00                	add    BYTE PTR [eax],al
     d90:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d93:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d95:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d98:	0e                   	push   cs
     d99:	00 00                	add    BYTE PTR [eax],al
     d9b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d9e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     da0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     da3:	08 00                	or     BYTE PTR [eax],al
     da5:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     da8:	00 03                	add    BYTE PTR [ebx],al
     daa:	0e                   	push   cs
     dab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     daf:	49                   	dec    ecx
     db0:	13 00                	adc    eax,DWORD PTR [eax]
     db2:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     db8:	49                   	dec    ecx
     db9:	13 00                	adc    eax,DWORD PTR [eax]
     dbb:	00 06                	add    BYTE PTR [esi],al
     dbd:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     dc0:	19 03                	sbb    DWORD PTR [ebx],eax
     dc2:	0e                   	push   cs
     dc3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dc5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dc7:	27                   	daa    
     dc8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     dcb:	11 01                	adc    DWORD PTR [ecx],eax
     dcd:	12 06                	adc    al,BYTE PTR [esi]
     dcf:	40                   	inc    eax
     dd0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     dd6:	00 00                	add    BYTE PTR [eax],al
     dd8:	07                   	pop    es
     dd9:	05 00 03 08 3a       	add    eax,0x3a080300
     dde:	0b 3b                	or     edi,DWORD PTR [ebx]
     de0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     de3:	02 18                	add    bl,BYTE PTR [eax]
     de5:	00 00                	add    BYTE PTR [eax],al
     de7:	08 2e                	or     BYTE PTR [esi],ch
     de9:	01 3f                	add    DWORD PTR [edi],edi
     deb:	19 03                	sbb    DWORD PTR [ebx],eax
     ded:	0e                   	push   cs
     dee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     df0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     df2:	27                   	daa    
     df3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     df6:	11 01                	adc    DWORD PTR [ecx],eax
     df8:	12 06                	adc    al,BYTE PTR [esi]
     dfa:	40                   	inc    eax
     dfb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e01:	00 00                	add    BYTE PTR [eax],al
     e03:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     e06:	03 08                	add    ecx,DWORD PTR [eax]
     e08:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e0a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e0c:	49                   	dec    ecx
     e0d:	13 02                	adc    eax,DWORD PTR [edx]
     e0f:	18 00                	sbb    BYTE PTR [eax],al
     e11:	00 0a                	add    BYTE PTR [edx],cl
     e13:	34 00                	xor    al,0x0
     e15:	03 0e                	add    ecx,DWORD PTR [esi]
     e17:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e19:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e1b:	49                   	dec    ecx
     e1c:	13 3f                	adc    edi,DWORD PTR [edi]
     e1e:	19 02                	sbb    DWORD PTR [edx],eax
     e20:	18 00                	sbb    BYTE PTR [eax],al
     e22:	00 00                	add    BYTE PTR [eax],al
     e24:	01 11                	add    DWORD PTR [ecx],edx
     e26:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e2c:	0e                   	push   cs
     e2d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e2f:	11 01                	adc    DWORD PTR [ecx],eax
     e31:	12 06                	adc    al,BYTE PTR [esi]
     e33:	10 17                	adc    BYTE PTR [edi],dl
     e35:	00 00                	add    BYTE PTR [eax],al
     e37:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e3a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e3c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e3f:	08 00                	or     BYTE PTR [eax],al
     e41:	00 03                	add    BYTE PTR [ebx],al
     e43:	16                   	push   ss
     e44:	00 03                	add    BYTE PTR [ebx],al
     e46:	0e                   	push   cs
     e47:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e49:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e4b:	49                   	dec    ecx
     e4c:	13 00                	adc    eax,DWORD PTR [eax]
     e4e:	00 04 24             	add    BYTE PTR [esp],al
     e51:	00 0b                	add    BYTE PTR [ebx],cl
     e53:	0b 3e                	or     edi,DWORD PTR [esi]
     e55:	0b 03                	or     eax,DWORD PTR [ebx]
     e57:	0e                   	push   cs
     e58:	00 00                	add    BYTE PTR [eax],al
     e5a:	05 2e 01 3f 19       	add    eax,0x193f012e
     e5f:	03 0e                	add    ecx,DWORD PTR [esi]
     e61:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e63:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e65:	27                   	daa    
     e66:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e69:	11 01                	adc    DWORD PTR [ecx],eax
     e6b:	12 06                	adc    al,BYTE PTR [esi]
     e6d:	40                   	inc    eax
     e6e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e74:	00 00                	add    BYTE PTR [eax],al
     e76:	06                   	push   es
     e77:	05 00 03 08 3a       	add    eax,0x3a080300
     e7c:	0b 3b                	or     edi,DWORD PTR [ebx]
     e7e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e81:	02 18                	add    bl,BYTE PTR [eax]
     e83:	00 00                	add    BYTE PTR [eax],al
     e85:	07                   	pop    es
     e86:	34 00                	xor    al,0x0
     e88:	03 08                	add    ecx,DWORD PTR [eax]
     e8a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e8c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e8e:	49                   	dec    ecx
     e8f:	13 02                	adc    eax,DWORD PTR [edx]
     e91:	18 00                	sbb    BYTE PTR [eax],al
     e93:	00 08                	add    BYTE PTR [eax],cl
     e95:	0f 00 0b             	str    WORD PTR [ebx]
     e98:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e9b:	00 00                	add    BYTE PTR [eax],al
     e9d:	09 26                	or     DWORD PTR [esi],esp
     e9f:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     ea2:	00 00                	add    BYTE PTR [eax],al
     ea4:	0a 2e                	or     ch,BYTE PTR [esi]
     ea6:	01 3f                	add    DWORD PTR [edi],edi
     ea8:	19 03                	sbb    DWORD PTR [ebx],eax
     eaa:	0e                   	push   cs
     eab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ead:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eaf:	27                   	daa    
     eb0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     eb3:	11 01                	adc    DWORD PTR [ecx],eax
     eb5:	12 06                	adc    al,BYTE PTR [esi]
     eb7:	40                   	inc    eax
     eb8:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     ebe:	00 01                	add    BYTE PTR [ecx],al
     ec0:	11 01                	adc    DWORD PTR [ecx],eax
     ec2:	25 0e 13 0b 03       	and    eax,0x30b130e
     ec7:	0e                   	push   cs
     ec8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     eca:	11 01                	adc    DWORD PTR [ecx],eax
     ecc:	12 06                	adc    al,BYTE PTR [esi]
     ece:	10 17                	adc    BYTE PTR [edi],dl
     ed0:	00 00                	add    BYTE PTR [eax],al
     ed2:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ed5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ed7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     eda:	08 00                	or     BYTE PTR [eax],al
     edc:	00 03                	add    BYTE PTR [ebx],al
     ede:	16                   	push   ss
     edf:	00 03                	add    BYTE PTR [ebx],al
     ee1:	0e                   	push   cs
     ee2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ee4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ee6:	49                   	dec    ecx
     ee7:	13 00                	adc    eax,DWORD PTR [eax]
     ee9:	00 04 24             	add    BYTE PTR [esp],al
     eec:	00 0b                	add    BYTE PTR [ebx],cl
     eee:	0b 3e                	or     edi,DWORD PTR [esi]
     ef0:	0b 03                	or     eax,DWORD PTR [ebx]
     ef2:	0e                   	push   cs
     ef3:	00 00                	add    BYTE PTR [eax],al
     ef5:	05 2e 01 3f 19       	add    eax,0x193f012e
     efa:	03 0e                	add    ecx,DWORD PTR [esi]
     efc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     efe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f00:	27                   	daa    
     f01:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f04:	11 01                	adc    DWORD PTR [ecx],eax
     f06:	12 06                	adc    al,BYTE PTR [esi]
     f08:	40                   	inc    eax
     f09:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f0f:	00 00                	add    BYTE PTR [eax],al
     f11:	06                   	push   es
     f12:	05 00 03 08 3a       	add    eax,0x3a080300
     f17:	0b 3b                	or     edi,DWORD PTR [ebx]
     f19:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f1c:	02 18                	add    bl,BYTE PTR [eax]
     f1e:	00 00                	add    BYTE PTR [eax],al
     f20:	07                   	pop    es
     f21:	0f 00 0b             	str    WORD PTR [ebx]
     f24:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f27:	00 00                	add    BYTE PTR [eax],al
     f29:	08 26                	or     BYTE PTR [esi],ah
     f2b:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     f2e:	00 00                	add    BYTE PTR [eax],al
     f30:	09 2e                	or     DWORD PTR [esi],ebp
     f32:	01 3f                	add    DWORD PTR [edi],edi
     f34:	19 03                	sbb    DWORD PTR [ebx],eax
     f36:	0e                   	push   cs
     f37:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f39:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f3b:	27                   	daa    
     f3c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f3f:	11 01                	adc    DWORD PTR [ecx],eax
     f41:	12 06                	adc    al,BYTE PTR [esi]
     f43:	40                   	inc    eax
     f44:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     f4a:	00 01                	add    BYTE PTR [ecx],al
     f4c:	11 01                	adc    DWORD PTR [ecx],eax
     f4e:	25 0e 13 0b 03       	and    eax,0x30b130e
     f53:	0e                   	push   cs
     f54:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f56:	11 01                	adc    DWORD PTR [ecx],eax
     f58:	12 06                	adc    al,BYTE PTR [esi]
     f5a:	10 17                	adc    BYTE PTR [edi],dl
     f5c:	00 00                	add    BYTE PTR [eax],al
     f5e:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f61:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f63:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f66:	08 00                	or     BYTE PTR [eax],al
     f68:	00 03                	add    BYTE PTR [ebx],al
     f6a:	16                   	push   ss
     f6b:	00 03                	add    BYTE PTR [ebx],al
     f6d:	0e                   	push   cs
     f6e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f70:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f72:	49                   	dec    ecx
     f73:	13 00                	adc    eax,DWORD PTR [eax]
     f75:	00 04 24             	add    BYTE PTR [esp],al
     f78:	00 0b                	add    BYTE PTR [ebx],cl
     f7a:	0b 3e                	or     edi,DWORD PTR [esi]
     f7c:	0b 03                	or     eax,DWORD PTR [ebx]
     f7e:	0e                   	push   cs
     f7f:	00 00                	add    BYTE PTR [eax],al
     f81:	05 2e 01 3f 19       	add    eax,0x193f012e
     f86:	03 0e                	add    ecx,DWORD PTR [esi]
     f88:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f8a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f8c:	27                   	daa    
     f8d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f90:	11 01                	adc    DWORD PTR [ecx],eax
     f92:	12 06                	adc    al,BYTE PTR [esi]
     f94:	40                   	inc    eax
     f95:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f9b:	00 00                	add    BYTE PTR [eax],al
     f9d:	06                   	push   es
     f9e:	05 00 03 08 3a       	add    eax,0x3a080300
     fa3:	0b 3b                	or     edi,DWORD PTR [ebx]
     fa5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fa8:	02 18                	add    bl,BYTE PTR [eax]
     faa:	00 00                	add    BYTE PTR [eax],al
     fac:	07                   	pop    es
     fad:	34 00                	xor    al,0x0
     faf:	03 08                	add    ecx,DWORD PTR [eax]
     fb1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fb5:	49                   	dec    ecx
     fb6:	13 02                	adc    eax,DWORD PTR [edx]
     fb8:	18 00                	sbb    BYTE PTR [eax],al
     fba:	00 08                	add    BYTE PTR [eax],cl
     fbc:	0f 00 0b             	str    WORD PTR [ebx]
     fbf:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fc2:	00 00                	add    BYTE PTR [eax],al
     fc4:	09 26                	or     DWORD PTR [esi],esp
     fc6:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     fc9:	00 00                	add    BYTE PTR [eax],al
     fcb:	0a 2e                	or     ch,BYTE PTR [esi]
     fcd:	01 3f                	add    DWORD PTR [edi],edi
     fcf:	19 03                	sbb    DWORD PTR [ebx],eax
     fd1:	0e                   	push   cs
     fd2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fd4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fd6:	27                   	daa    
     fd7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fda:	11 01                	adc    DWORD PTR [ecx],eax
     fdc:	12 06                	adc    al,BYTE PTR [esi]
     fde:	40                   	inc    eax
     fdf:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     fe5:	00 01                	add    BYTE PTR [ecx],al
     fe7:	11 01                	adc    DWORD PTR [ecx],eax
     fe9:	25 0e 13 0b 03       	and    eax,0x30b130e
     fee:	0e                   	push   cs
     fef:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ff1:	11 01                	adc    DWORD PTR [ecx],eax
     ff3:	12 06                	adc    al,BYTE PTR [esi]
     ff5:	10 17                	adc    BYTE PTR [edi],dl
     ff7:	00 00                	add    BYTE PTR [eax],al
     ff9:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ffc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ffe:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1001:	0e                   	push   cs
    1002:	00 00                	add    BYTE PTR [eax],al
    1004:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1007:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1009:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    100c:	08 00                	or     BYTE PTR [eax],al
    100e:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1011:	00 03                	add    BYTE PTR [ebx],al
    1013:	0e                   	push   cs
    1014:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1016:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1018:	49                   	dec    ecx
    1019:	13 00                	adc    eax,DWORD PTR [eax]
    101b:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1021:	49                   	dec    ecx
    1022:	13 00                	adc    eax,DWORD PTR [eax]
    1024:	00 06                	add    BYTE PTR [esi],al
    1026:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    102a:	00 00                	add    BYTE PTR [eax],al
    102c:	07                   	pop    es
    102d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1030:	19 03                	sbb    DWORD PTR [ebx],eax
    1032:	0e                   	push   cs
    1033:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1035:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1037:	27                   	daa    
    1038:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    103b:	11 01                	adc    DWORD PTR [ecx],eax
    103d:	12 06                	adc    al,BYTE PTR [esi]
    103f:	40                   	inc    eax
    1040:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1046:	00 00                	add    BYTE PTR [eax],al
    1048:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    104e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1050:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1053:	02 18                	add    bl,BYTE PTR [eax]
    1055:	00 00                	add    BYTE PTR [eax],al
    1057:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    105a:	03 08                	add    ecx,DWORD PTR [eax]
    105c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    105e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1060:	49                   	dec    ecx
    1061:	13 02                	adc    eax,DWORD PTR [edx]
    1063:	18 00                	sbb    BYTE PTR [eax],al
    1065:	00 0a                	add    BYTE PTR [edx],cl
    1067:	34 00                	xor    al,0x0
    1069:	03 0e                	add    ecx,DWORD PTR [esi]
    106b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    106d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    106f:	49                   	dec    ecx
    1070:	13 00                	adc    eax,DWORD PTR [eax]
    1072:	00 0b                	add    BYTE PTR [ebx],cl
    1074:	34 00                	xor    al,0x0
    1076:	03 08                	add    ecx,DWORD PTR [eax]
    1078:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    107a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    107c:	49                   	dec    ecx
    107d:	13 00                	adc    eax,DWORD PTR [eax]
    107f:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1082:	00 03                	add    BYTE PTR [ebx],al
    1084:	0e                   	push   cs
    1085:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1087:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1089:	49                   	dec    ecx
    108a:	13 02                	adc    eax,DWORD PTR [edx]
    108c:	18 00                	sbb    BYTE PTR [eax],al
    108e:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1094:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1096:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1098:	49                   	dec    ecx
    1099:	13 3f                	adc    edi,DWORD PTR [edi]
    109b:	19 02                	sbb    DWORD PTR [edx],eax
    109d:	18 00                	sbb    BYTE PTR [eax],al
    109f:	00 00                	add    BYTE PTR [eax],al
    10a1:	01 11                	add    DWORD PTR [ecx],edx
    10a3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10a9:	0e                   	push   cs
    10aa:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10ac:	11 01                	adc    DWORD PTR [ecx],eax
    10ae:	12 06                	adc    al,BYTE PTR [esi]
    10b0:	10 17                	adc    BYTE PTR [edi],dl
    10b2:	00 00                	add    BYTE PTR [eax],al
    10b4:	02 2e                	add    ch,BYTE PTR [esi]
    10b6:	01 3f                	add    DWORD PTR [edi],edi
    10b8:	19 03                	sbb    DWORD PTR [ebx],eax
    10ba:	0e                   	push   cs
    10bb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10bd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10bf:	27                   	daa    
    10c0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10c3:	11 01                	adc    DWORD PTR [ecx],eax
    10c5:	12 06                	adc    al,BYTE PTR [esi]
    10c7:	40                   	inc    eax
    10c8:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10ce:	00 00                	add    BYTE PTR [eax],al
    10d0:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    10d6:	0b 3b                	or     edi,DWORD PTR [ebx]
    10d8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10db:	02 18                	add    bl,BYTE PTR [eax]
    10dd:	00 00                	add    BYTE PTR [eax],al
    10df:	04 0f                	add    al,0xf
    10e1:	00 0b                	add    BYTE PTR [ebx],cl
    10e3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10e6:	00 00                	add    BYTE PTR [eax],al
    10e8:	05 24 00 0b 0b       	add    eax,0xb0b0024
    10ed:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10f0:	0e                   	push   cs
    10f1:	00 00                	add    BYTE PTR [eax],al
    10f3:	06                   	push   es
    10f4:	24 00                	and    al,0x0
    10f6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10f8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10fb:	08 00                	or     BYTE PTR [eax],al
    10fd:	00 00                	add    BYTE PTR [eax],al
    10ff:	01 11                	add    DWORD PTR [ecx],edx
    1101:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1107:	0e                   	push   cs
    1108:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    110a:	11 01                	adc    DWORD PTR [ecx],eax
    110c:	12 06                	adc    al,BYTE PTR [esi]
    110e:	10 17                	adc    BYTE PTR [edi],dl
    1110:	00 00                	add    BYTE PTR [eax],al
    1112:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1115:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1117:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    111a:	0e                   	push   cs
    111b:	00 00                	add    BYTE PTR [eax],al
    111d:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1120:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1122:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1125:	08 00                	or     BYTE PTR [eax],al
    1127:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    112a:	00 03                	add    BYTE PTR [ebx],al
    112c:	0e                   	push   cs
    112d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    112f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1131:	49                   	dec    ecx
    1132:	13 00                	adc    eax,DWORD PTR [eax]
    1134:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    113a:	49                   	dec    ecx
    113b:	13 00                	adc    eax,DWORD PTR [eax]
    113d:	00 06                	add    BYTE PTR [esi],al
    113f:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1143:	00 00                	add    BYTE PTR [eax],al
    1145:	07                   	pop    es
    1146:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1149:	19 03                	sbb    DWORD PTR [ebx],eax
    114b:	0e                   	push   cs
    114c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    114e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1150:	27                   	daa    
    1151:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1154:	11 01                	adc    DWORD PTR [ecx],eax
    1156:	12 06                	adc    al,BYTE PTR [esi]
    1158:	40                   	inc    eax
    1159:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    115f:	00 00                	add    BYTE PTR [eax],al
    1161:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1167:	0b 3b                	or     edi,DWORD PTR [ebx]
    1169:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    116c:	02 18                	add    bl,BYTE PTR [eax]
    116e:	00 00                	add    BYTE PTR [eax],al
    1170:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1173:	03 08                	add    ecx,DWORD PTR [eax]
    1175:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1177:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1179:	49                   	dec    ecx
    117a:	13 02                	adc    eax,DWORD PTR [edx]
    117c:	18 00                	sbb    BYTE PTR [eax],al
    117e:	00 0a                	add    BYTE PTR [edx],cl
    1180:	34 00                	xor    al,0x0
    1182:	03 0e                	add    ecx,DWORD PTR [esi]
    1184:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1186:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1188:	49                   	dec    ecx
    1189:	13 00                	adc    eax,DWORD PTR [eax]
    118b:	00 0b                	add    BYTE PTR [ebx],cl
    118d:	34 00                	xor    al,0x0
    118f:	03 08                	add    ecx,DWORD PTR [eax]
    1191:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1193:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1195:	49                   	dec    ecx
    1196:	13 00                	adc    eax,DWORD PTR [eax]
    1198:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    119b:	00 03                	add    BYTE PTR [ebx],al
    119d:	0e                   	push   cs
    119e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11a0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11a2:	49                   	dec    ecx
    11a3:	13 3f                	adc    edi,DWORD PTR [edi]
    11a5:	19 02                	sbb    DWORD PTR [edx],eax
    11a7:	18 00                	sbb    BYTE PTR [eax],al
    11a9:	00 00                	add    BYTE PTR [eax],al
    11ab:	01 11                	add    DWORD PTR [ecx],edx
    11ad:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    11b3:	0e                   	push   cs
    11b4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    11b6:	11 01                	adc    DWORD PTR [ecx],eax
    11b8:	12 06                	adc    al,BYTE PTR [esi]
    11ba:	10 17                	adc    BYTE PTR [edi],dl
    11bc:	00 00                	add    BYTE PTR [eax],al
    11be:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    11c1:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11c3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11c6:	0e                   	push   cs
    11c7:	00 00                	add    BYTE PTR [eax],al
    11c9:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    11cc:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11ce:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11d1:	08 00                	or     BYTE PTR [eax],al
    11d3:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    11d6:	00 03                	add    BYTE PTR [ebx],al
    11d8:	0e                   	push   cs
    11d9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11db:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11dd:	49                   	dec    ecx
    11de:	13 00                	adc    eax,DWORD PTR [eax]
    11e0:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    11e6:	49                   	dec    ecx
    11e7:	13 00                	adc    eax,DWORD PTR [eax]
    11e9:	00 06                	add    BYTE PTR [esi],al
    11eb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    11ee:	19 03                	sbb    DWORD PTR [ebx],eax
    11f0:	0e                   	push   cs
    11f1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11f5:	27                   	daa    
    11f6:	19 11                	sbb    DWORD PTR [ecx],edx
    11f8:	01 12                	add    DWORD PTR [edx],edx
    11fa:	06                   	push   es
    11fb:	40                   	inc    eax
    11fc:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1202:	00 00                	add    BYTE PTR [eax],al
    1204:	07                   	pop    es
    1205:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    120a:	0b 3b                	or     edi,DWORD PTR [ebx]
    120c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    120f:	02 18                	add    bl,BYTE PTR [eax]
    1211:	00 00                	add    BYTE PTR [eax],al
    1213:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    1216:	03 08                	add    ecx,DWORD PTR [eax]
    1218:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    121a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    121c:	49                   	dec    ecx
    121d:	13 02                	adc    eax,DWORD PTR [edx]
    121f:	18 00                	sbb    BYTE PTR [eax],al
    1221:	00 09                	add    BYTE PTR [ecx],cl
    1223:	34 00                	xor    al,0x0
    1225:	03 0e                	add    ecx,DWORD PTR [esi]
    1227:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1229:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    122b:	49                   	dec    ecx
    122c:	13 3f                	adc    edi,DWORD PTR [edi]
    122e:	19 02                	sbb    DWORD PTR [edx],eax
    1230:	18 00                	sbb    BYTE PTR [eax],al
    1232:	00 00                	add    BYTE PTR [eax],al
    1234:	01 11                	add    DWORD PTR [ecx],edx
    1236:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    123c:	0e                   	push   cs
    123d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    123f:	11 01                	adc    DWORD PTR [ecx],eax
    1241:	12 06                	adc    al,BYTE PTR [esi]
    1243:	10 17                	adc    BYTE PTR [edi],dl
    1245:	00 00                	add    BYTE PTR [eax],al
    1247:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    124a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    124c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    124f:	0e                   	push   cs
    1250:	00 00                	add    BYTE PTR [eax],al
    1252:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1255:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1257:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    125a:	08 00                	or     BYTE PTR [eax],al
    125c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    125f:	00 03                	add    BYTE PTR [ebx],al
    1261:	0e                   	push   cs
    1262:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1264:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1266:	49                   	dec    ecx
    1267:	13 00                	adc    eax,DWORD PTR [eax]
    1269:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    126f:	49                   	dec    ecx
    1270:	13 00                	adc    eax,DWORD PTR [eax]
    1272:	00 06                	add    BYTE PTR [esi],al
    1274:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1277:	19 03                	sbb    DWORD PTR [ebx],eax
    1279:	0e                   	push   cs
    127a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    127c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    127e:	27                   	daa    
    127f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1282:	11 01                	adc    DWORD PTR [ecx],eax
    1284:	12 06                	adc    al,BYTE PTR [esi]
    1286:	40                   	inc    eax
    1287:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    128d:	00 00                	add    BYTE PTR [eax],al
    128f:	07                   	pop    es
    1290:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1295:	0b 3b                	or     edi,DWORD PTR [ebx]
    1297:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    129a:	02 18                	add    bl,BYTE PTR [eax]
    129c:	00 00                	add    BYTE PTR [eax],al
    129e:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    12a1:	03 08                	add    ecx,DWORD PTR [eax]
    12a3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12a5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12a7:	49                   	dec    ecx
    12a8:	13 02                	adc    eax,DWORD PTR [edx]
    12aa:	18 00                	sbb    BYTE PTR [eax],al
    12ac:	00 09                	add    BYTE PTR [ecx],cl
    12ae:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    12b1:	19 03                	sbb    DWORD PTR [ebx],eax
    12b3:	0e                   	push   cs
    12b4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12b6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12b8:	27                   	daa    
    12b9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12bc:	11 01                	adc    DWORD PTR [ecx],eax
    12be:	12 06                	adc    al,BYTE PTR [esi]
    12c0:	40                   	inc    eax
    12c1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12c7:	00 00                	add    BYTE PTR [eax],al
    12c9:	0a 01                	or     al,BYTE PTR [ecx]
    12cb:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    12ce:	01 13                	add    DWORD PTR [ebx],edx
    12d0:	00 00                	add    BYTE PTR [eax],al
    12d2:	0b 21                	or     esp,DWORD PTR [ecx]
    12d4:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12d7:	2f                   	das    
    12d8:	0b 00                	or     eax,DWORD PTR [eax]
    12da:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    12dd:	00 03                	add    BYTE PTR [ebx],al
    12df:	0e                   	push   cs
    12e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12e4:	49                   	dec    ecx
    12e5:	13 02                	adc    eax,DWORD PTR [edx]
    12e7:	18 00                	sbb    BYTE PTR [eax],al
    12e9:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    12ef:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12f1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12f3:	49                   	dec    ecx
    12f4:	13 3f                	adc    edi,DWORD PTR [edi]
    12f6:	19 02                	sbb    DWORD PTR [edx],eax
    12f8:	18 00                	sbb    BYTE PTR [eax],al
    12fa:	00 00                	add    BYTE PTR [eax],al
    12fc:	01 11                	add    DWORD PTR [ecx],edx
    12fe:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1304:	0e                   	push   cs
    1305:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1307:	11 01                	adc    DWORD PTR [ecx],eax
    1309:	12 06                	adc    al,BYTE PTR [esi]
    130b:	10 17                	adc    BYTE PTR [edi],dl
    130d:	00 00                	add    BYTE PTR [eax],al
    130f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1312:	03 0e                	add    ecx,DWORD PTR [esi]
    1314:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1316:	49                   	dec    ecx
    1317:	13 3a                	adc    edi,DWORD PTR [edx]
    1319:	0b 3b                	or     edi,DWORD PTR [ebx]
    131b:	0b 01                	or     eax,DWORD PTR [ecx]
    131d:	13 00                	adc    eax,DWORD PTR [eax]
    131f:	00 03                	add    BYTE PTR [ebx],al
    1321:	28 00                	sub    BYTE PTR [eax],al
    1323:	03 0e                	add    ecx,DWORD PTR [esi]
    1325:	1c 0b                	sbb    al,0xb
    1327:	00 00                	add    BYTE PTR [eax],al
    1329:	04 28                	add    al,0x28
    132b:	00 03                	add    BYTE PTR [ebx],al
    132d:	0e                   	push   cs
    132e:	1c 05                	sbb    al,0x5
    1330:	00 00                	add    BYTE PTR [eax],al
    1332:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1337:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    133a:	0e                   	push   cs
    133b:	00 00                	add    BYTE PTR [eax],al
    133d:	06                   	push   es
    133e:	24 00                	and    al,0x0
    1340:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1342:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1345:	08 00                	or     BYTE PTR [eax],al
    1347:	00 07                	add    BYTE PTR [edi],al
    1349:	16                   	push   ss
    134a:	00 03                	add    BYTE PTR [ebx],al
    134c:	0e                   	push   cs
    134d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    134f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1351:	49                   	dec    ecx
    1352:	13 00                	adc    eax,DWORD PTR [eax]
    1354:	00 08                	add    BYTE PTR [eax],cl
    1356:	13 01                	adc    eax,DWORD PTR [ecx]
    1358:	03 08                	add    ecx,DWORD PTR [eax]
    135a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    135c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    135e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1360:	01 13                	add    DWORD PTR [ebx],edx
    1362:	00 00                	add    BYTE PTR [eax],al
    1364:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    136a:	0b 3b                	or     edi,DWORD PTR [ebx]
    136c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    136f:	38 0b                	cmp    BYTE PTR [ebx],cl
    1371:	00 00                	add    BYTE PTR [eax],al
    1373:	0a 0f                	or     cl,BYTE PTR [edi]
    1375:	00 0b                	add    BYTE PTR [ebx],cl
    1377:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    137a:	00 00                	add    BYTE PTR [eax],al
    137c:	0b 26                	or     esp,DWORD PTR [esi]
    137e:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1381:	00 00                	add    BYTE PTR [eax],al
    1383:	0c 2e                	or     al,0x2e
    1385:	01 3f                	add    DWORD PTR [edi],edi
    1387:	19 03                	sbb    DWORD PTR [ebx],eax
    1389:	0e                   	push   cs
    138a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    138c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    138e:	49                   	dec    ecx
    138f:	13 11                	adc    edx,DWORD PTR [ecx]
    1391:	01 12                	add    DWORD PTR [edx],edx
    1393:	06                   	push   es
    1394:	40                   	inc    eax
    1395:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    139b:	00 00                	add    BYTE PTR [eax],al
    139d:	0d 34 00 03 0e       	or     eax,0xe030034
    13a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13a6:	49                   	dec    ecx
    13a7:	13 02                	adc    eax,DWORD PTR [edx]
    13a9:	18 00                	sbb    BYTE PTR [eax],al
    13ab:	00 0e                	add    BYTE PTR [esi],cl
    13ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13b0:	19 03                	sbb    DWORD PTR [ebx],eax
    13b2:	0e                   	push   cs
    13b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13b7:	27                   	daa    
    13b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13bb:	11 01                	adc    DWORD PTR [ecx],eax
    13bd:	12 06                	adc    al,BYTE PTR [esi]
    13bf:	40                   	inc    eax
    13c0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13c6:	00 00                	add    BYTE PTR [eax],al
    13c8:	0f 05                	syscall 
    13ca:	00 03                	add    BYTE PTR [ebx],al
    13cc:	0e                   	push   cs
    13cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13d1:	49                   	dec    ecx
    13d2:	13 02                	adc    eax,DWORD PTR [edx]
    13d4:	18 00                	sbb    BYTE PTR [eax],al
    13d6:	00 10                	add    BYTE PTR [eax],dl
    13d8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13db:	19 03                	sbb    DWORD PTR [ebx],eax
    13dd:	0e                   	push   cs
    13de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13e2:	27                   	daa    
    13e3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13e6:	11 01                	adc    DWORD PTR [ecx],eax
    13e8:	12 06                	adc    al,BYTE PTR [esi]
    13ea:	40                   	inc    eax
    13eb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    13f1:	00 00                	add    BYTE PTR [eax],al
    13f3:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    13f6:	03 08                	add    ecx,DWORD PTR [eax]
    13f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13fc:	49                   	dec    ecx
    13fd:	13 02                	adc    eax,DWORD PTR [edx]
    13ff:	18 00                	sbb    BYTE PTR [eax],al
    1401:	00 12                	add    BYTE PTR [edx],dl
    1403:	34 00                	xor    al,0x0
    1405:	03 0e                	add    ecx,DWORD PTR [esi]
    1407:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1409:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    140b:	49                   	dec    ecx
    140c:	13 3f                	adc    edi,DWORD PTR [edi]
    140e:	19 02                	sbb    DWORD PTR [edx],eax
    1410:	18 00                	sbb    BYTE PTR [eax],al
    1412:	00 13                	add    BYTE PTR [ebx],dl
    1414:	01 01                	add    DWORD PTR [ecx],eax
    1416:	49                   	dec    ecx
    1417:	13 01                	adc    eax,DWORD PTR [ecx]
    1419:	13 00                	adc    eax,DWORD PTR [eax]
    141b:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    141e:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1421:	2f                   	das    
    1422:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 30                	add    BYTE PTR [eax],dh
  14:	70 00                	jo     16 <sysEnter_Vector-0x12ffea>
	...
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	63 01                	arpl   WORD PTR [ecx],ax
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 00                	add    al,0x0
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 30                	add    BYTE PTR [eax],dh
  34:	aa                   	stos   BYTE PTR es:[edi],al
	...
  3d:	00 00                	add    BYTE PTR [eax],al
  3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	05 03 00 00 04       	add    eax,0x4000003
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	00 00                	add    BYTE PTR [eax],al
  4f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
  52:	00 30                	add    BYTE PTR [eax],dh
  54:	97                   	xchg   edi,eax
	...
  5d:	00 00                	add    BYTE PTR [eax],al
  5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	4a                   	dec    edx
  67:	04 00                	add    al,0x0
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 30                	add    BYTE PTR [eax],dh
  74:	49                   	dec    ecx
  75:	02 00                	add    al,BYTE PTR [eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	60                   	pusha  
  87:	06                   	push   es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
	...
  9e:	00 00                	add    BYTE PTR [eax],al
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	16                   	push   ss
  a7:	08 00                	or     BYTE PTR [eax],al
  a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	6c                   	ins    BYTE PTR es:[edi],dx
  b1:	06                   	push   es
  b2:	00 30                	add    BYTE PTR [eax],dh
  b4:	f2 00 00             	repnz add BYTE PTR [eax],al
	...
  bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	1b 0b                	sbb    ecx,DWORD PTR [ebx]
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	60                   	pusha  
  d1:	07                   	pop    es
  d2:	00 30                	add    BYTE PTR [eax],dh
  d4:	52                   	push   edx
  d5:	01 00                	add    DWORD PTR [eax],eax
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	d4 0d                	aam    0xd
  e8:	00 00                	add    BYTE PTR [eax],al
  ea:	04 00                	add    al,0x0
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	b4 08                	mov    ah,0x8
  f2:	00 30                	add    BYTE PTR [eax],dh
  f4:	d9 09                	(bad)  [ecx]
	...
  fe:	00 00                	add    BYTE PTR [eax],al
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	24 17                	and    al,0x17
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	90                   	nop
 111:	12 00                	adc    al,BYTE PTR [eax]
 113:	30 6d 03             	xor    BYTE PTR [ebp+0x3],ch
	...
 11e:	00 00                	add    BYTE PTR [eax],al
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	9a 1a 00 00 04 00 00 	call   0x0:0x400001a
 12d:	00 00                	add    BYTE PTR [eax],al
 12f:	00 00                	add    BYTE PTR [eax],al
 131:	16                   	push   ss
 132:	00 30                	add    BYTE PTR [eax],dh
 134:	9b                   	fwait
 135:	01 00                	add    DWORD PTR [eax],eax
	...
 13f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	88 1c 00             	mov    BYTE PTR [eax+eax*1],bl
 149:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	9c                   	pushf  
 151:	17                   	pop    ss
 152:	00 30                	add    BYTE PTR [eax],dh
 154:	e7 00                	out    0x0,eax
	...
 15e:	00 00                	add    BYTE PTR [eax],al
 160:	14 00                	adc    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	77 1e                	ja     186 <sysEnter_Vector-0x12fe7a>
 168:	00 00                	add    BYTE PTR [eax],al
 16a:	04 00                	add    al,0x0
	...
 178:	1c 00                	sbb    al,0x0
 17a:	00 00                	add    BYTE PTR [eax],al
 17c:	02 00                	add    al,BYTE PTR [eax]
 17e:	63 1f                	arpl   WORD PTR [edi],bx
 180:	00 00                	add    BYTE PTR [eax],al
 182:	04 00                	add    al,0x0
 184:	00 00                	add    BYTE PTR [eax],al
 186:	00 00                	add    BYTE PTR [eax],al
 188:	84 18                	test   BYTE PTR [eax],bl
 18a:	00 30                	add    BYTE PTR [eax],dh
 18c:	29 00                	sub    DWORD PTR [eax],eax
	...
 196:	00 00                	add    BYTE PTR [eax],al
 198:	1c 00                	sbb    al,0x0
 19a:	00 00                	add    BYTE PTR [eax],al
 19c:	02 00                	add    al,BYTE PTR [eax]
 19e:	52                   	push   edx
 19f:	21 00                	and    DWORD PTR [eax],eax
 1a1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1a4:	00 00                	add    BYTE PTR [eax],al
 1a6:	00 00                	add    BYTE PTR [eax],al
 1a8:	b0 18                	mov    al,0x18
 1aa:	00 30                	add    BYTE PTR [eax],dh
 1ac:	84 00                	test   BYTE PTR [eax],al
	...
 1b6:	00 00                	add    BYTE PTR [eax],al
 1b8:	1c 00                	sbb    al,0x0
 1ba:	00 00                	add    BYTE PTR [eax],al
 1bc:	02 00                	add    al,BYTE PTR [eax]
 1be:	ae                   	scas   al,BYTE PTR es:[edi]
 1bf:	25 00 00 04 00       	and    eax,0x40000
 1c4:	00 00                	add    BYTE PTR [eax],al
 1c6:	00 00                	add    BYTE PTR [eax],al
 1c8:	34 19                	xor    al,0x19
 1ca:	00 30                	add    BYTE PTR [eax],dh
 1cc:	eb 00                	jmp    1ce <sysEnter_Vector-0x12fe32>
	...
 1d6:	00 00                	add    BYTE PTR [eax],al
 1d8:	1c 00                	sbb    al,0x0
 1da:	00 00                	add    BYTE PTR [eax],al
 1dc:	02 00                	add    al,BYTE PTR [eax]
 1de:	5f                   	pop    edi
 1df:	27                   	daa    
 1e0:	00 00                	add    BYTE PTR [eax],al
 1e2:	04 00                	add    al,0x0
 1e4:	00 00                	add    BYTE PTR [eax],al
 1e6:	00 00                	add    BYTE PTR [eax],al
 1e8:	20 1a                	and    BYTE PTR [edx],bl
 1ea:	00 30                	add    BYTE PTR [eax],dh
 1ec:	5e                   	pop    esi
	...
 1f5:	00 00                	add    BYTE PTR [eax],al
 1f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1fa:	00 00                	add    BYTE PTR [eax],al
 1fc:	02 00                	add    al,BYTE PTR [eax]
 1fe:	cf                   	iret   
 1ff:	28 00                	sub    BYTE PTR [eax],al
 201:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 204:	00 00                	add    BYTE PTR [eax],al
 206:	00 00                	add    BYTE PTR [eax],al
 208:	80 1a 00             	sbb    BYTE PTR [edx],0x0
 20b:	30 c7                	xor    bh,al
	...
 215:	00 00                	add    BYTE PTR [eax],al
 217:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 21a:	00 00                	add    BYTE PTR [eax],al
 21c:	02 00                	add    al,BYTE PTR [eax]
 21e:	9c                   	pushf  
 21f:	2a 00                	sub    al,BYTE PTR [eax]
 221:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 224:	00 00                	add    BYTE PTR [eax],al
 226:	00 00                	add    BYTE PTR [eax],al
 228:	48                   	dec    eax
 229:	1b 00                	sbb    eax,DWORD PTR [eax]
 22b:	30 89 00 00 00 00    	xor    BYTE PTR [ecx+0x0],cl
 231:	00 00                	add    BYTE PTR [eax],al
 233:	00 00                	add    BYTE PTR [eax],al
 235:	00 00                	add    BYTE PTR [eax],al
 237:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 23a:	00 00                	add    BYTE PTR [eax],al
 23c:	02 00                	add    al,BYTE PTR [eax]
 23e:	ec                   	in     al,dx
 23f:	2b 00                	sub    eax,DWORD PTR [eax]
 241:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 244:	00 00                	add    BYTE PTR [eax],al
 246:	00 00                	add    BYTE PTR [eax],al
 248:	d4 1b                	aam    0x1b
 24a:	00 30                	add    BYTE PTR [eax],dh
 24c:	62 00                	bound  eax,QWORD PTR [eax]
	...
 256:	00 00                	add    BYTE PTR [eax],al
 258:	1c 00                	sbb    al,0x0
 25a:	00 00                	add    BYTE PTR [eax],al
 25c:	02 00                	add    al,BYTE PTR [eax]
 25e:	ba 2c 00 00 04       	mov    edx,0x400002c
 263:	00 00                	add    BYTE PTR [eax],al
 265:	00 00                	add    BYTE PTR [eax],al
 267:	00 38                	add    BYTE PTR [eax],bh
 269:	1c 00                	sbb    al,0x0
 26b:	30 ce                	xor    dh,cl
	...
 275:	00 00                	add    BYTE PTR [eax],al
 277:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 27a:	00 00                	add    BYTE PTR [eax],al
 27c:	02 00                	add    al,BYTE PTR [eax]
 27e:	9c                   	pushf  
 27f:	2d 00 00 04 00       	sub    eax,0x40000
 284:	00 00                	add    BYTE PTR [eax],al
 286:	00 00                	add    BYTE PTR [eax],al
 288:	08 1d 00 30 80 00    	or     BYTE PTR ds:0x803000,bl
	...
 296:	00 00                	add    BYTE PTR [eax],al
 298:	1c 00                	sbb    al,0x0
 29a:	00 00                	add    BYTE PTR [eax],al
 29c:	02 00                	add    al,BYTE PTR [eax]
 29e:	90                   	nop
 29f:	2e 00 00             	add    BYTE PTR cs:[eax],al
 2a2:	04 00                	add    al,0x0
 2a4:	00 00                	add    BYTE PTR [eax],al
 2a6:	00 00                	add    BYTE PTR [eax],al
 2a8:	88 1d 00 30 7d 01    	mov    BYTE PTR ds:0x17d3000,bl
	...
 2b6:	00 00                	add    BYTE PTR [eax],al
 2b8:	1c 00                	sbb    al,0x0
 2ba:	00 00                	add    BYTE PTR [eax],al
 2bc:	02 00                	add    al,BYTE PTR [eax]
 2be:	26 30 00             	xor    BYTE PTR es:[eax],al
 2c1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2c4:	00 00                	add    BYTE PTR [eax],al
 2c6:	00 00                	add    BYTE PTR [eax],al
 2c8:	08 1f                	or     BYTE PTR [edi],bl
 2ca:	00 30                	add    BYTE PTR [eax],dh
 2cc:	1d 00 00 00 00       	sbb    eax,0x0
 2d1:	00 00                	add    BYTE PTR [eax],al
 2d3:	00 00                	add    BYTE PTR [eax],al
 2d5:	00 00                	add    BYTE PTR [eax],al
 2d7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2da:	00 00                	add    BYTE PTR [eax],al
 2dc:	02 00                	add    al,BYTE PTR [eax]
 2de:	96                   	xchg   esi,eax
 2df:	30 00                	xor    BYTE PTR [eax],al
 2e1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2e4:	00 00                	add    BYTE PTR [eax],al
 2e6:	00 00                	add    BYTE PTR [eax],al
 2e8:	28 1f                	sub    BYTE PTR [edi],bl
 2ea:	00 30                	add    BYTE PTR [eax],dh
 2ec:	9c                   	pushf  
 2ed:	01 00                	add    DWORD PTR [eax],eax
	...
 2f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2fa:	00 00                	add    BYTE PTR [eax],al
 2fc:	02 00                	add    al,BYTE PTR [eax]
 2fe:	2a 32                	sub    dh,BYTE PTR [edx]
 300:	00 00                	add    BYTE PTR [eax],al
 302:	04 00                	add    al,0x0
 304:	00 00                	add    BYTE PTR [eax],al
 306:	00 00                	add    BYTE PTR [eax],al
 308:	c4 20                	les    esp,FWORD PTR [eax]
 30a:	00 30                	add    BYTE PTR [eax],dh
 30c:	b6 00                	mov    dh,0x0
	...
 316:	00 00                	add    BYTE PTR [eax],al
 318:	1c 00                	sbb    al,0x0
 31a:	00 00                	add    BYTE PTR [eax],al
 31c:	02 00                	add    al,BYTE PTR [eax]
 31e:	90                   	nop
 31f:	33 00                	xor    eax,DWORD PTR [eax]
 321:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 324:	00 00                	add    BYTE PTR [eax],al
 326:	00 00                	add    BYTE PTR [eax],al
 328:	7c 21                	jl     34b <sysEnter_Vector-0x12fcb5>
 32a:	00 30                	add    BYTE PTR [eax],dh
 32c:	8b 00                	mov    eax,DWORD PTR [eax]
	...
 336:	00 00                	add    BYTE PTR [eax],al
 338:	1c 00                	sbb    al,0x0
 33a:	00 00                	add    BYTE PTR [eax],al
 33c:	02 00                	add    al,BYTE PTR [eax]
 33e:	27                   	daa    
 33f:	35 00 00 04 00       	xor    eax,0x40000
 344:	00 00                	add    BYTE PTR [eax],al
 346:	00 00                	add    BYTE PTR [eax],al
 348:	08 22                	or     BYTE PTR [edx],ah
 34a:	00 30                	add    BYTE PTR [eax],dh
 34c:	cf                   	iret   
 34d:	0c 00                	or     al,0x0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	d0 00                	rol    BYTE PTR [eax],1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	b0 00                	mov    al,0x0
       8:	00 00                	add    BYTE PTR [eax],al
       a:	01 01                	add    DWORD PTR [ecx],eax
       c:	fb                   	sti    
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 2f                	add    BYTE PTR [edi],ch
      44:	68 6f 6d 65 2f       	push   0x2f656d6f
      49:	79 6f                	jns    ba <sysEnter_Vector-0x12ff46>
      4b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      52:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      55:	73 73                	jae    ca <sysEnter_Vector-0x12ff36>
      57:	2f                   	das    
      58:	6c                   	ins    BYTE PTR es:[edi],dx
      59:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      60:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      66:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      6c:	78 2d                	js     9b <sysEnter_Vector-0x12ff65>
      6e:	67 6e                	outs   dx,BYTE PTR ds:[si]
      70:	75 2f                	jne    a1 <sysEnter_Vector-0x12ff5f>
      72:	35 2e 33 2e 30       	xor    eax,0x302e332e
      77:	2f                   	das    
      78:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      7f:	00 00                	add    BYTE PTR [eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
      8f:	6c                   	ins    BYTE PTR es:[edi],dx
      90:	6c                   	ins    BYTE PTR es:[edi],dx
      91:	6f                   	outs   dx,DWORD PTR ds:[esi]
      92:	63 2e                	arpl   WORD PTR [esi],bp
      94:	68 00 02 00 00       	push   0x200
      99:	6c                   	ins    BYTE PTR es:[edi],dx
      9a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      a1:	4f                   	dec    edi
      a2:	53                   	push   ebx
      a3:	2e                   	cs
      a4:	68 00 02 00 00       	push   0x200
      a9:	73 74                	jae    11f <sysEnter_Vector-0x12fee1>
      ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      b2:	63 
      b3:	2e                   	cs
      b4:	68 00 03 00 00       	push   0x300
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	05 02 00 00 00       	add    eax,0x2
      c0:	30 1a                	xor    BYTE PTR [edx],bl
      c2:	c9                   	leave  
      c3:	2f                   	das    
      c4:	f3 72 cb             	repz jb 92 <sysEnter_Vector-0x12ff6e>
      c7:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      cc:	72 cb                	jb     99 <sysEnter_Vector-0x12ff67>
      ce:	3d 02 02 00 01       	cmp    eax,0x1000202
      d3:	01 03                	add    DWORD PTR [ebx],eax
      d5:	01 00                	add    DWORD PTR [eax],eax
      d7:	00 02                	add    BYTE PTR [edx],al
      d9:	00 b1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],dh
      df:	01 fb                	add    ebx,edi
      e1:	0e                   	push   cs
      e2:	0d 00 01 01 01       	or     eax,0x1010100
      e7:	01 00                	add    DWORD PTR [eax],eax
      e9:	00 00                	add    BYTE PTR [eax],al
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 01                	add    BYTE PTR [ecx],al
      ef:	2e                   	cs
      f0:	2e                   	cs
      f1:	2f                   	das    
      f2:	2e                   	cs
      f3:	2e                   	cs
      f4:	2f                   	das    
      f5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      f9:	6a 2f                	push   0x2f
      fb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      fe:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     105:	63 2f                	arpl   WORD PTR [edi],bp
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	72 69                	jb     174 <sysEnter_Vector-0x12fe8c>
     10b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10c:	67 73 00             	addr16 jae 10f <sysEnter_Vector-0x12fef1>
     10f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     116:	00 2f                	add    BYTE PTR [edi],ch
     118:	68 6f 6d 65 2f       	push   0x2f656d6f
     11d:	79 6f                	jns    18e <sysEnter_Vector-0x12fe72>
     11f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     126:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     129:	73 73                	jae    19e <sysEnter_Vector-0x12fe62>
     12b:	2f                   	das    
     12c:	6c                   	ins    BYTE PTR es:[edi],dx
     12d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     134:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     140:	78 2d                	js     16f <sysEnter_Vector-0x12fe91>
     142:	67 6e                	outs   dx,BYTE PTR ds:[si]
     144:	75 2f                	jne    175 <sysEnter_Vector-0x12fe8b>
     146:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14b:	2f                   	das    
     14c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     153:	00 00                	add    BYTE PTR [eax],al
     155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
     157:	72 63                	jb     1bc <sysEnter_Vector-0x12fe44>
     159:	73 70                	jae    1cb <sysEnter_Vector-0x12fe35>
     15b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     15f:	01 00                	add    DWORD PTR [eax],eax
     161:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     164:	6c                   	ins    BYTE PTR es:[edi],dx
     165:	6c                   	ins    BYTE PTR es:[edi],dx
     166:	6f                   	outs   dx,DWORD PTR ds:[esi]
     167:	63 2e                	arpl   WORD PTR [esi],bp
     169:	68 00 02 00 00       	push   0x200
     16e:	6c                   	ins    BYTE PTR es:[edi],dx
     16f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     176:	4f                   	dec    edi
     177:	53                   	push   ebx
     178:	2e                   	cs
     179:	68 00 02 00 00       	push   0x200
     17e:	73 74                	jae    1f4 <sysEnter_Vector-0x12fe0c>
     180:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     187:	63 
     188:	2e                   	cs
     189:	68 00 03 00 00       	push   0x300
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	05 02 70 00 00       	add    eax,0x7002
     195:	30 03                	xor    BYTE PTR [ebx],al
     197:	25 01 e7 9f 59       	and    eax,0x599fe701
     19c:	75 00                	jne    19e <sysEnter_Vector-0x12fe62>
     19e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1a1:	aa                   	stos   BYTE PTR es:[edi],al
     1a2:	00 02                	add    BYTE PTR [edx],al
     1a4:	04 01                	add    al,0x1
     1a6:	06                   	push   es
     1a7:	3c 00                	cmp    al,0x0
     1a9:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1ac:	06                   	push   es
     1ad:	73 00                	jae    1af <sysEnter_Vector-0x12fe51>
     1af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1b2:	06                   	push   es
     1b3:	82                   	(bad)  
     1b4:	06                   	push   es
     1b5:	6d                   	ins    DWORD PTR es:[edi],dx
     1b6:	91                   	xchg   ecx,eax
     1b7:	4d                   	dec    ebp
     1b8:	e7 9f                	out    0x9f,eax
     1ba:	59                   	pop    ecx
     1bb:	75 00                	jne    1bd <sysEnter_Vector-0x12fe43>
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	aa                   	stos   BYTE PTR es:[edi],al
     1c1:	00 02                	add    BYTE PTR [edx],al
     1c3:	04 01                	add    al,0x1
     1c5:	06                   	push   es
     1c6:	3c 00                	cmp    al,0x0
     1c8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1cb:	06                   	push   es
     1cc:	73 00                	jae    1ce <sysEnter_Vector-0x12fe32>
     1ce:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1d1:	06                   	push   es
     1d2:	82                   	(bad)  
     1d3:	06                   	push   es
     1d4:	6d                   	ins    DWORD PTR es:[edi],dx
     1d5:	91                   	xchg   ecx,eax
     1d6:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1d9:	01 01                	add    DWORD PTR [ecx],eax
     1db:	d4 00                	aam    0x0
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	02 00                	add    al,BYTE PTR [eax]
     1e1:	b0 00                	mov    al,0x0
     1e3:	00 00                	add    BYTE PTR [eax],al
     1e5:	01 01                	add    DWORD PTR [ecx],eax
     1e7:	fb                   	sti    
     1e8:	0e                   	push   cs
     1e9:	0d 00 01 01 01       	or     eax,0x1010100
     1ee:	01 00                	add    DWORD PTR [eax],eax
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	01 00                	add    DWORD PTR [eax],eax
     1f4:	00 01                	add    BYTE PTR [ecx],al
     1f6:	2e                   	cs
     1f7:	2e                   	cs
     1f8:	2f                   	das    
     1f9:	2e                   	cs
     1fa:	2e                   	cs
     1fb:	2f                   	das    
     1fc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     200:	6a 2f                	push   0x2f
     202:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     205:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     20c:	63 2f                	arpl   WORD PTR [edi],bp
     20e:	73 74                	jae    284 <sysEnter_Vector-0x12fd7c>
     210:	72 69                	jb     27b <sysEnter_Vector-0x12fd85>
     212:	6e                   	outs   dx,BYTE PTR ds:[esi]
     213:	67 73 00             	addr16 jae 216 <sysEnter_Vector-0x12fdea>
     216:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     21d:	00 2f                	add    BYTE PTR [edi],ch
     21f:	68 6f 6d 65 2f       	push   0x2f656d6f
     224:	79 6f                	jns    295 <sysEnter_Vector-0x12fd6b>
     226:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     22d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     230:	73 73                	jae    2a5 <sysEnter_Vector-0x12fd5b>
     232:	2f                   	das    
     233:	6c                   	ins    BYTE PTR es:[edi],dx
     234:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     23b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     241:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     247:	78 2d                	js     276 <sysEnter_Vector-0x12fd8a>
     249:	67 6e                	outs   dx,BYTE PTR ds:[si]
     24b:	75 2f                	jne    27c <sysEnter_Vector-0x12fd84>
     24d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     252:	2f                   	das    
     253:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	73 74                	jae    2d2 <sysEnter_Vector-0x12fd2e>
     25e:	72 74                	jb     2d4 <sysEnter_Vector-0x12fd2c>
     260:	6f                   	outs   dx,DWORD PTR ds:[esi]
     261:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	00 00                	add    BYTE PTR [eax],al
     268:	6d                   	ins    DWORD PTR es:[edi],dx
     269:	61                   	popa   
     26a:	6c                   	ins    BYTE PTR es:[edi],dx
     26b:	6c                   	ins    BYTE PTR es:[edi],dx
     26c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     26d:	63 2e                	arpl   WORD PTR [esi],bp
     26f:	68 00 02 00 00       	push   0x200
     274:	6c                   	ins    BYTE PTR es:[edi],dx
     275:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     27c:	4f                   	dec    edi
     27d:	53                   	push   ebx
     27e:	2e                   	cs
     27f:	68 00 02 00 00       	push   0x200
     284:	73 74                	jae    2fa <sysEnter_Vector-0x12fd06>
     286:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     28d:	63 
     28e:	2e                   	cs
     28f:	68 00 03 00 00       	push   0x300
     294:	00 00                	add    BYTE PTR [eax],al
     296:	05 02 1c 01 00       	add    eax,0x11c02
     29b:	30 03                	xor    BYTE PTR [ebx],al
     29d:	28 01                	sub    BYTE PTR [ecx],al
     29f:	f6 67 92             	mul    BYTE PTR [edi-0x6e]
     2a2:	08 2f                	or     BYTE PTR [edi],ch
     2a4:	75 08                	jne    2ae <sysEnter_Vector-0x12fd52>
     2a6:	2f                   	das    
     2a7:	4b                   	dec    ebx
     2a8:	08 c9                	or     cl,cl
     2aa:	c9                   	leave  
     2ab:	08 21                	or     BYTE PTR [ecx],ah
     2ad:	3d 02 07 00 01       	cmp    eax,0x1000702
     2b2:	01 10                	add    DWORD PTR [eax],edx
     2b4:	01 00                	add    DWORD PTR [eax],eax
     2b6:	00 02                	add    BYTE PTR [edx],al
     2b8:	00 93 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dl
     2be:	01 fb                	add    ebx,edi
     2c0:	0e                   	push   cs
     2c1:	0d 00 01 01 01       	or     eax,0x1010100
     2c6:	01 00                	add    DWORD PTR [eax],eax
     2c8:	00 00                	add    BYTE PTR [eax],al
     2ca:	01 00                	add    DWORD PTR [eax],eax
     2cc:	00 01                	add    BYTE PTR [ecx],al
     2ce:	73 72                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d0:	63 00                	arpl   WORD PTR [eax],ax
     2d2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2d9:	00 2f                	add    BYTE PTR [edi],ch
     2db:	68 6f 6d 65 2f       	push   0x2f656d6f
     2e0:	79 6f                	jns    351 <sysEnter_Vector-0x12fcaf>
     2e2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2e9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     2ec:	73 73                	jae    361 <sysEnter_Vector-0x12fc9f>
     2ee:	2f                   	das    
     2ef:	6c                   	ins    BYTE PTR es:[edi],dx
     2f0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2f7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2fd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     303:	78 2d                	js     332 <sysEnter_Vector-0x12fcce>
     305:	67 6e                	outs   dx,BYTE PTR ds:[si]
     307:	75 2f                	jne    338 <sysEnter_Vector-0x12fcc8>
     309:	35 2e 33 2e 30       	xor    eax,0x302e332e
     30e:	2f                   	das    
     30f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     316:	00 00                	add    BYTE PTR [eax],al
     318:	61                   	popa   
     319:	73 63                	jae    37e <sysEnter_Vector-0x12fc82>
     31b:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     322:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     325:	6c                   	ins    BYTE PTR es:[edi],dx
     326:	6c                   	ins    BYTE PTR es:[edi],dx
     327:	6f                   	outs   dx,DWORD PTR ds:[esi]
     328:	63 2e                	arpl   WORD PTR [esi],bp
     32a:	68 00 02 00 00       	push   0x200
     32f:	6c                   	ins    BYTE PTR es:[edi],dx
     330:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     337:	4f                   	dec    edi
     338:	53                   	push   ebx
     339:	2e                   	cs
     33a:	68 00 02 00 00       	push   0x200
     33f:	73 74                	jae    3b5 <sysEnter_Vector-0x12fc4b>
     341:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     348:	63 
     349:	2e                   	cs
     34a:	68 00 03 00 00       	push   0x300
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	05 02 b4 01 00       	add    eax,0x1b402
     356:	30 03                	xor    BYTE PTR [ebx],al
     358:	09 01                	or     DWORD PTR [ecx],eax
     35a:	08 16                	or     BYTE PTR [esi],dl
     35c:	00 02                	add    BYTE PTR [edx],al
     35e:	04 03                	add    al,0x3
     360:	08 d7                	or     bh,dl
     362:	00 02                	add    BYTE PTR [edx],al
     364:	04 03                	add    al,0x3
     366:	d7                   	xlat   BYTE PTR ds:[ebx]
     367:	00 02                	add    BYTE PTR [edx],al
     369:	04 03                	add    al,0x3
     36b:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     36e:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     371:	d3 00                	rol    DWORD PTR [eax],cl
     373:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     376:	06                   	push   es
     377:	82                   	(bad)  
     378:	06                   	push   es
     379:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     37c:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     381:	04 01                	add    al,0x1
     383:	76 00                	jbe    385 <sysEnter_Vector-0x12fc7b>
     385:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     388:	02 3b                	add    bh,BYTE PTR [ebx]
     38a:	13 08                	adc    ecx,DWORD PTR [eax]
     38c:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     390:	ad                   	lods   eax,DWORD PTR ds:[esi]
     391:	d7                   	xlat   BYTE PTR ds:[ebx]
     392:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     398:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39b:	76 00                	jbe    39d <sysEnter_Vector-0x12fc63>
     39d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3a0:	02 3b                	add    bh,BYTE PTR [ebx]
     3a2:	13 08                	adc    ecx,DWORD PTR [eax]
     3a4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3a8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3aa:	6a f3                	push   0xfffffff3
     3ac:	78 00                	js     3ae <sysEnter_Vector-0x12fc52>
     3ae:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3b1:	91                   	xchg   ecx,eax
     3b2:	00 02                	add    BYTE PTR [edx],al
     3b4:	04 03                	add    al,0x3
     3b6:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3b9:	00 02                	add    BYTE PTR [edx],al
     3bb:	04 01                	add    al,0x1
     3bd:	06                   	push   es
     3be:	4a                   	dec    edx
     3bf:	06                   	push   es
     3c0:	e8 3d 02 02 00       	call   20602 <sysEnter_Vector-0x10f9fe>
     3c5:	01 01                	add    DWORD PTR [ecx],eax
     3c7:	06                   	push   es
     3c8:	01 00                	add    DWORD PTR [eax],eax
     3ca:	00 02                	add    BYTE PTR [edx],al
     3cc:	00 99 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],bl
     3d2:	01 fb                	add    ebx,edi
     3d4:	0e                   	push   cs
     3d5:	0d 00 01 01 01       	or     eax,0x1010100
     3da:	01 00                	add    DWORD PTR [eax],eax
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	01 00                	add    DWORD PTR [eax],eax
     3e0:	00 01                	add    BYTE PTR [ecx],al
     3e2:	73 72                	jae    456 <sysEnter_Vector-0x12fbaa>
     3e4:	63 00                	arpl   WORD PTR [eax],ax
     3e6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3ed:	00 2f                	add    BYTE PTR [edi],ch
     3ef:	68 6f 6d 65 2f       	push   0x2f656d6f
     3f4:	79 6f                	jns    465 <sysEnter_Vector-0x12fb9b>
     3f6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     3fd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     400:	73 73                	jae    475 <sysEnter_Vector-0x12fb8b>
     402:	2f                   	das    
     403:	6c                   	ins    BYTE PTR es:[edi],dx
     404:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     40b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     411:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     417:	78 2d                	js     446 <sysEnter_Vector-0x12fbba>
     419:	67 6e                	outs   dx,BYTE PTR ds:[si]
     41b:	75 2f                	jne    44c <sysEnter_Vector-0x12fbb4>
     41d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     422:	2f                   	das    
     423:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     42a:	00 00                	add    BYTE PTR [eax],al
     42c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     42e:	76 69                	jbe    499 <sysEnter_Vector-0x12fb67>
     430:	72 6f                	jb     4a1 <sysEnter_Vector-0x12fb5f>
     432:	6e                   	outs   dx,BYTE PTR ds:[esi]
     433:	6d                   	ins    DWORD PTR es:[edi],dx
     434:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     436:	74 2e                	je     466 <sysEnter_Vector-0x12fb9a>
     438:	63 00                	arpl   WORD PTR [eax],ax
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     43f:	6c                   	ins    BYTE PTR es:[edi],dx
     440:	6c                   	ins    BYTE PTR es:[edi],dx
     441:	6f                   	outs   dx,DWORD PTR ds:[esi]
     442:	63 2e                	arpl   WORD PTR [esi],bp
     444:	68 00 02 00 00       	push   0x200
     449:	6c                   	ins    BYTE PTR es:[edi],dx
     44a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     451:	4f                   	dec    edi
     452:	53                   	push   ebx
     453:	2e                   	cs
     454:	68 00 02 00 00       	push   0x200
     459:	73 74                	jae    4cf <sysEnter_Vector-0x12fb31>
     45b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     462:	63 
     463:	2e                   	cs
     464:	68 00 03 00 00       	push   0x300
     469:	00 00                	add    BYTE PTR [eax],al
     46b:	05 02 00 04 00       	add    eax,0x40002
     470:	30 03                	xor    BYTE PTR [ebx],al
     472:	09 01                	or     DWORD PTR [ecx],eax
     474:	08 21                	or     BYTE PTR [ecx],ah
     476:	91                   	xchg   ecx,eax
     477:	02 36                	add    dh,BYTE PTR [esi]
     479:	14 02                	adc    al,0x2
     47b:	39 13                	cmp    DWORD PTR [ebx],edx
     47d:	00 02                	add    BYTE PTR [edx],al
     47f:	04 02                	add    al,0x2
     481:	7e 00                	jle    483 <sysEnter_Vector-0x12fb7d>
     483:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     486:	06                   	push   es
     487:	4a                   	dec    edx
     488:	06                   	push   es
     489:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     48a:	59                   	pop    ecx
     48b:	5b                   	pop    ebx
     48c:	08 21                	or     BYTE PTR [ecx],ah
     48e:	76 bb                	jbe    44b <sysEnter_Vector-0x12fbb5>
     490:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     496:	14 08                	adc    al,0x8
     498:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     49f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4a2:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     4a5:	00 02                	add    BYTE PTR [edx],al
     4a7:	04 01                	add    al,0x1
     4a9:	06                   	push   es
     4aa:	4a                   	dec    edx
     4ab:	06                   	push   es
     4ac:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     4af:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     4b4:	08 f3                	or     bl,dh
     4b6:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     4bc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4bf:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     4c2:	00 02                	add    BYTE PTR [edx],al
     4c4:	04 01                	add    al,0x1
     4c6:	06                   	push   es
     4c7:	4a                   	dec    edx
     4c8:	06                   	push   es
     4c9:	03 0b                	add    ecx,DWORD PTR [ebx]
     4cb:	9e                   	sahf   
     4cc:	02 05 00 01 01 f8    	add    al,BYTE PTR ds:0xf8010100
     4d2:	00 00                	add    BYTE PTR [eax],al
     4d4:	00 02                	add    BYTE PTR [edx],al
     4d6:	00 cd                	add    ch,cl
     4d8:	00 00                	add    BYTE PTR [eax],al
     4da:	00 01                	add    BYTE PTR [ecx],al
     4dc:	01 fb                	add    ebx,edi
     4de:	0e                   	push   cs
     4df:	0d 00 01 01 01       	or     eax,0x1010100
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 00                	add    BYTE PTR [eax],al
     4e8:	01 00                	add    DWORD PTR [eax],eax
     4ea:	00 01                	add    BYTE PTR [ecx],al
     4ec:	73 72                	jae    560 <sysEnter_Vector-0x12faa0>
     4ee:	63 00                	arpl   WORD PTR [eax],ax
     4f0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4f7:	00 2f                	add    BYTE PTR [edi],ch
     4f9:	68 6f 6d 65 2f       	push   0x2f656d6f
     4fe:	79 6f                	jns    56f <sysEnter_Vector-0x12fa91>
     500:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     507:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     50a:	73 73                	jae    57f <sysEnter_Vector-0x12fa81>
     50c:	2f                   	das    
     50d:	6c                   	ins    BYTE PTR es:[edi],dx
     50e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     515:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     51b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     521:	78 2d                	js     550 <sysEnter_Vector-0x12fab0>
     523:	67 6e                	outs   dx,BYTE PTR ds:[si]
     525:	75 2f                	jne    556 <sysEnter_Vector-0x12faaa>
     527:	35 2e 33 2e 30       	xor    eax,0x302e332e
     52c:	2f                   	das    
     52d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     534:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     537:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     53b:	65                   	gs
     53c:	2f                   	das    
     53d:	2e                   	cs
     53e:	2e                   	cs
     53f:	2f                   	das    
     540:	2e                   	cs
     541:	2e                   	cs
     542:	2f                   	das    
     543:	2e                   	cs
     544:	2e                   	cs
     545:	2f                   	das    
     546:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     54a:	6a 2f                	push   0x2f
     54c:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     54f:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     556:	6e                   	outs   dx,BYTE PTR ds:[esi]
     557:	65                   	gs
     558:	6c                   	ins    BYTE PTR es:[edi],dx
     559:	2f                   	das    
     55a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     561:	00 00                	add    BYTE PTR [eax],al
     563:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     56a:	01 00                	add    DWORD PTR [eax],eax
     56c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     56f:	6c                   	ins    BYTE PTR es:[edi],dx
     570:	6c                   	ins    BYTE PTR es:[edi],dx
     571:	6f                   	outs   dx,DWORD PTR ds:[esi]
     572:	63 2e                	arpl   WORD PTR [esi],bp
     574:	68 00 02 00 00       	push   0x200
     579:	6c                   	ins    BYTE PTR es:[edi],dx
     57a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     581:	4f                   	dec    edi
     582:	53                   	push   ebx
     583:	2e                   	cs
     584:	68 00 02 00 00       	push   0x200
     589:	73 74                	jae    5ff <sysEnter_Vector-0x12fa01>
     58b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     592:	63 
     593:	2e                   	cs
     594:	68 00 03 00 00       	push   0x300
     599:	73 79                	jae    614 <sysEnter_Vector-0x12f9ec>
     59b:	73 63                	jae    600 <sysEnter_Vector-0x12fa00>
     59d:	61                   	popa   
     59e:	6c                   	ins    BYTE PTR es:[edi],dx
     59f:	6c                   	ins    BYTE PTR es:[edi],dx
     5a0:	73 2e                	jae    5d0 <sysEnter_Vector-0x12fa30>
     5a2:	68 00 04 00 00       	push   0x400
     5a7:	00 00                	add    BYTE PTR [eax],al
     5a9:	05 02 6c 06 00       	add    eax,0x66c02
     5ae:	30 03                	xor    BYTE PTR [ebx],al
     5b0:	09 01                	or     DWORD PTR [ecx],eax
     5b2:	08 13                	or     BYTE PTR [ebx],dl
     5b4:	08 67 5b             	or     BYTE PTR [edi+0x5b],ah
     5b7:	08 13                	or     BYTE PTR [ebx],dl
     5b9:	08 2f                	or     BYTE PTR [edi],ch
     5bb:	69 e5 08 d7 77 e5    	imul   esp,ebp,0xe577d708
     5c1:	08 d7                	or     bh,dl
     5c3:	78 08                	js     5cd <sysEnter_Vector-0x12fa33>
     5c5:	13 08                	adc    ecx,DWORD PTR [eax]
     5c7:	9f                   	lahf   
     5c8:	02 05 00 01 01 26    	add    al,BYTE PTR ds:0x26010100
     5ce:	01 00                	add    DWORD PTR [eax],eax
     5d0:	00 02                	add    BYTE PTR [edx],al
     5d2:	00 d4                	add    ah,dl
     5d4:	00 00                	add    BYTE PTR [eax],al
     5d6:	00 01                	add    BYTE PTR [ecx],al
     5d8:	01 fb                	add    ebx,edi
     5da:	0e                   	push   cs
     5db:	0d 00 01 01 01       	or     eax,0x1010100
     5e0:	01 00                	add    DWORD PTR [eax],eax
     5e2:	00 00                	add    BYTE PTR [eax],al
     5e4:	01 00                	add    DWORD PTR [eax],eax
     5e6:	00 01                	add    BYTE PTR [ecx],al
     5e8:	73 72                	jae    65c <sysEnter_Vector-0x12f9a4>
     5ea:	63 2f                	arpl   WORD PTR [edi],bp
     5ec:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     5f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5f4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     5f8:	65 00 2f             	add    BYTE PTR gs:[edi],ch
     5fb:	68 6f 6d 65 2f       	push   0x2f656d6f
     600:	79 6f                	jns    671 <sysEnter_Vector-0x12f98f>
     602:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     609:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     60c:	73 73                	jae    681 <sysEnter_Vector-0x12f97f>
     60e:	2f                   	das    
     60f:	6c                   	ins    BYTE PTR es:[edi],dx
     610:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     617:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     61d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     623:	78 2d                	js     652 <sysEnter_Vector-0x12f9ae>
     625:	67 6e                	outs   dx,BYTE PTR ds:[si]
     627:	75 2f                	jne    658 <sysEnter_Vector-0x12f9a8>
     629:	35 2e 33 2e 30       	xor    eax,0x302e332e
     62e:	2f                   	das    
     62f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     636:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     639:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     63d:	65                   	gs
     63e:	2f                   	das    
     63f:	2e                   	cs
     640:	2e                   	cs
     641:	2f                   	das    
     642:	2e                   	cs
     643:	2e                   	cs
     644:	2f                   	das    
     645:	2e                   	cs
     646:	2e                   	cs
     647:	2f                   	das    
     648:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     64c:	6a 2f                	push   0x2f
     64e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     651:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     658:	6e                   	outs   dx,BYTE PTR ds:[esi]
     659:	65                   	gs
     65a:	6c                   	ins    BYTE PTR es:[edi],dx
     65b:	2f                   	das    
     65c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     663:	00 00                	add    BYTE PTR [eax],al
     665:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     66c:	00 01                	add    BYTE PTR [ecx],al
     66e:	00 00                	add    BYTE PTR [eax],al
     670:	6d                   	ins    DWORD PTR es:[edi],dx
     671:	61                   	popa   
     672:	6c                   	ins    BYTE PTR es:[edi],dx
     673:	6c                   	ins    BYTE PTR es:[edi],dx
     674:	6f                   	outs   dx,DWORD PTR ds:[esi]
     675:	63 2e                	arpl   WORD PTR [esi],bp
     677:	68 00 02 00 00       	push   0x200
     67c:	6c                   	ins    BYTE PTR es:[edi],dx
     67d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     684:	4f                   	dec    edi
     685:	53                   	push   ebx
     686:	2e                   	cs
     687:	68 00 02 00 00       	push   0x200
     68c:	73 74                	jae    702 <sysEnter_Vector-0x12f8fe>
     68e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     695:	63 
     696:	2e                   	cs
     697:	68 00 03 00 00       	push   0x300
     69c:	73 79                	jae    717 <sysEnter_Vector-0x12f8e9>
     69e:	73 63                	jae    703 <sysEnter_Vector-0x12f8fd>
     6a0:	61                   	popa   
     6a1:	6c                   	ins    BYTE PTR es:[edi],dx
     6a2:	6c                   	ins    BYTE PTR es:[edi],dx
     6a3:	73 2e                	jae    6d3 <sysEnter_Vector-0x12f92d>
     6a5:	68 00 04 00 00       	push   0x400
     6aa:	00 00                	add    BYTE PTR [eax],al
     6ac:	05 02 60 07 00       	add    eax,0x76002
     6b1:	30 03                	xor    BYTE PTR [ebx],al
     6b3:	0f 01                	(bad)  
     6b5:	d7                   	xlat   BYTE PTR ds:[ebx]
     6b6:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6bc:	75 4b                	jne    709 <sysEnter_Vector-0x12f8f7>
     6be:	08 3d 77 08 14 08    	or     BYTE PTR ds:0x8140877,bh
     6c4:	3d 4b 6a 08 14       	cmp    eax,0x14086a4b
     6c9:	75 84                	jne    64f <sysEnter_Vector-0x12f9b1>
     6cb:	68 00 02 04 01       	push   0x1040200
     6d0:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     6d3:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     6d9:	06                   	push   es
     6da:	66 06                	pushw  es
     6dc:	68 ad 68 68 76       	push   0x766868ad
     6e1:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     6e4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     6e7:	06                   	push   es
     6e8:	ac                   	lods   al,BYTE PTR ds:[esi]
     6e9:	06                   	push   es
     6ea:	68 5b 00 02 04       	push   0x402005b
     6ef:	02 a0 2f 02 05 00    	add    ah,BYTE PTR [eax+0x5022f]
     6f5:	01 01                	add    DWORD PTR [ecx],eax
     6f7:	5c                   	pop    esp
     6f8:	02 00                	add    al,BYTE PTR [eax]
     6fa:	00 02                	add    BYTE PTR [edx],al
     6fc:	00 eb                	add    bl,ch
     6fe:	00 00                	add    BYTE PTR [eax],al
     700:	00 01                	add    BYTE PTR [ecx],al
     702:	01 fb                	add    ebx,edi
     704:	0e                   	push   cs
     705:	0d 00 01 01 01       	or     eax,0x1010100
     70a:	01 00                	add    DWORD PTR [eax],eax
     70c:	00 00                	add    BYTE PTR [eax],al
     70e:	01 00                	add    DWORD PTR [eax],eax
     710:	00 01                	add    BYTE PTR [ecx],al
     712:	73 72                	jae    786 <sysEnter_Vector-0x12f87a>
     714:	63 00                	arpl   WORD PTR [eax],ax
     716:	2f                   	das    
     717:	68 6f 6d 65 2f       	push   0x2f656d6f
     71c:	79 6f                	jns    78d <sysEnter_Vector-0x12f873>
     71e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     725:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     728:	73 73                	jae    79d <sysEnter_Vector-0x12f863>
     72a:	2f                   	das    
     72b:	6c                   	ins    BYTE PTR es:[edi],dx
     72c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     733:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     739:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     73f:	78 2d                	js     76e <sysEnter_Vector-0x12f892>
     741:	67 6e                	outs   dx,BYTE PTR ds:[si]
     743:	75 2f                	jne    774 <sysEnter_Vector-0x12f88c>
     745:	35 2e 33 2e 30       	xor    eax,0x302e332e
     74a:	2f                   	das    
     74b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     752:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     755:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     759:	65                   	gs
     75a:	2f                   	das    
     75b:	2e                   	cs
     75c:	2e                   	cs
     75d:	2f                   	das    
     75e:	2e                   	cs
     75f:	2e                   	cs
     760:	2f                   	das    
     761:	2e                   	cs
     762:	2e                   	cs
     763:	2f                   	das    
     764:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     768:	6a 2f                	push   0x2f
     76a:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     76d:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     774:	6e                   	outs   dx,BYTE PTR ds:[esi]
     775:	65                   	gs
     776:	6c                   	ins    BYTE PTR es:[edi],dx
     777:	2f                   	das    
     778:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     77f:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     782:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     786:	65 00 00             	add    BYTE PTR gs:[eax],al
     789:	6c                   	ins    BYTE PTR es:[edi],dx
     78a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     791:	4f                   	dec    edi
     792:	53                   	push   ebx
     793:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     796:	01 00                	add    DWORD PTR [eax],eax
     798:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     79b:	64                   	fs
     79c:	61                   	popa   
     79d:	72 67                	jb     806 <sysEnter_Vector-0x12f7fa>
     79f:	2e                   	cs
     7a0:	68 00 02 00 00       	push   0x200
     7a5:	73 74                	jae    81b <sysEnter_Vector-0x12f7e5>
     7a7:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7ae:	63 
     7af:	2e                   	cs
     7b0:	68 00 02 00 00       	push   0x200
     7b5:	73 74                	jae    82b <sysEnter_Vector-0x12f7d5>
     7b7:	64                   	fs
     7b8:	64                   	fs
     7b9:	65                   	gs
     7ba:	66                   	data16
     7bb:	2e                   	cs
     7bc:	68 00 02 00 00       	push   0x200
     7c1:	73 79                	jae    83c <sysEnter_Vector-0x12f7c4>
     7c3:	73 63                	jae    828 <sysEnter_Vector-0x12f7d8>
     7c5:	61                   	popa   
     7c6:	6c                   	ins    BYTE PTR es:[edi],dx
     7c7:	6c                   	ins    BYTE PTR es:[edi],dx
     7c8:	73 2e                	jae    7f8 <sysEnter_Vector-0x12f808>
     7ca:	68 00 03 00 00       	push   0x300
     7cf:	6d                   	ins    DWORD PTR es:[edi],dx
     7d0:	61                   	popa   
     7d1:	6c                   	ins    BYTE PTR es:[edi],dx
     7d2:	6c                   	ins    BYTE PTR es:[edi],dx
     7d3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7d4:	63 2e                	arpl   WORD PTR [esi],bp
     7d6:	68 00 04 00 00       	push   0x400
     7db:	6c                   	ins    BYTE PTR es:[edi],dx
     7dc:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7e3:	4f                   	dec    edi
     7e4:	53                   	push   ebx
     7e5:	2e                   	cs
     7e6:	68 00 04 00 00       	push   0x400
     7eb:	00 00                	add    BYTE PTR [eax],al
     7ed:	05 02 b4 08 00       	add    eax,0x8b402
     7f2:	30 03                	xor    BYTE PTR [ebx],al
     7f4:	0f 01 08             	sidtd  [eax]
     7f7:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     7fa:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     800:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     806:	75 08                	jne    810 <sysEnter_Vector-0x12f7f0>
     808:	9f                   	lahf   
     809:	3d 77 08 21 75       	cmp    eax,0x75210877
     80e:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     814:	75 08                	jne    81e <sysEnter_Vector-0x12f7e2>
     816:	d7                   	xlat   BYTE PTR ds:[ebx]
     817:	3d 77 08 21 08       	cmp    eax,0x8210877
     81c:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     820:	c9                   	leave  
     821:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     824:	08 6a 2d             	or     BYTE PTR [edx+0x2d],ch
     827:	08 21                	or     BYTE PTR [ecx],ah
     829:	69 08 13 75 77 f4    	imul   ecx,DWORD PTR [eax],0xf4777513
     82f:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     833:	31 f4                	xor    esp,esi
     835:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     839:	31 f4                	xor    esp,esi
     83b:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     83f:	31 f4                	xor    esp,esi
     841:	68 08 91 5a 31       	push   0x315a9108
     846:	08 21                	or     BYTE PTR [ecx],ah
     848:	02 57 13             	add    dl,BYTE PTR [edi+0x13]
     84b:	59                   	pop    ecx
     84c:	77 c9                	ja     817 <sysEnter_Vector-0x12f7e9>
     84e:	c9                   	leave  
     84f:	3f                   	aas    
     850:	c9                   	leave  
     851:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     857:	3d 31 f3 75 08       	cmp    eax,0x875f331
     85c:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     861:	08 21                	or     BYTE PTR [ecx],ah
     863:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     86a:	67 02 22             	add    ah,BYTE PTR [bp+si]
     86d:	14 08                	adc    al,0x8
     86f:	ae                   	scas   al,BYTE PTR es:[edi]
     870:	4c                   	dec    esp
     871:	ca 08 4b             	retf   0x4b08
     874:	91                   	xchg   ecx,eax
     875:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     87b:	67 02 2f             	add    ch,BYTE PTR [bx]
     87e:	14 00                	adc    al,0x0
     880:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     883:	02 31                	add    dh,BYTE PTR [ecx]
     885:	13 00                	adc    eax,DWORD PTR [eax]
     887:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     88a:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     890:	bb 00 02 04 02       	mov    ebx,0x2040200
     895:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     898:	00 02                	add    BYTE PTR [edx],al
     89a:	04 01                	add    al,0x1
     89c:	06                   	push   es
     89d:	4a                   	dec    edx
     89e:	06                   	push   es
     89f:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     8a2:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     8a8:	f3 75 08             	repz jne 8b3 <sysEnter_Vector-0x12f74d>
     8ab:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     8b0:	c9                   	leave  
     8b1:	c9                   	leave  
     8b2:	32 c9                	xor    cl,cl
     8b4:	f3 40                	repz inc eax
     8b6:	c9                   	leave  
     8b7:	08 13                	or     BYTE PTR [ebx],dl
     8b9:	32 f5                	xor    dh,ch
     8bb:	75 76                	jne    933 <sysEnter_Vector-0x12f6cd>
     8bd:	ad                   	lods   eax,DWORD PTR ds:[esi]
     8be:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     8c3:	67 75 91             	addr16 jne 857 <sysEnter_Vector-0x12f7a9>
     8c6:	5a                   	pop    edx
     8c7:	75 67                	jne    930 <sysEnter_Vector-0x12f6d0>
     8c9:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     8cc:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     8d2:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     8d7:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     8db:	3c 44                	cmp    al,0x44
     8dd:	00 02                	add    BYTE PTR [edx],al
     8df:	04 02                	add    al,0x2
     8e1:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     8e4:	00 02                	add    BYTE PTR [edx],al
     8e6:	04 01                	add    al,0x1
     8e8:	06                   	push   es
     8e9:	4a                   	dec    edx
     8ea:	00 02                	add    BYTE PTR [edx],al
     8ec:	04 03                	add    al,0x3
     8ee:	82                   	(bad)  
     8ef:	06                   	push   es
     8f0:	03 23                	add    esp,DWORD PTR [ebx]
     8f2:	d6                   	(bad)  
     8f3:	00 02                	add    BYTE PTR [edx],al
     8f5:	04 01                	add    al,0x1
     8f7:	06                   	push   es
     8f8:	66 06                	pushw  es
     8fa:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     8fd:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     902:	31 08                	xor    DWORD PTR [eax],ecx
     904:	4d                   	dec    ebp
     905:	08 21                	or     BYTE PTR [ecx],ah
     907:	92                   	xchg   edx,eax
     908:	08 91 00 02 04 01    	or     BYTE PTR [ecx+0x1040200],dl
     90e:	08 23                	or     BYTE PTR [ebx],ah
     910:	00 02                	add    BYTE PTR [edx],al
     912:	04 01                	add    al,0x1
     914:	08 75 00             	or     BYTE PTR [ebp+0x0],dh
     917:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     91a:	ca ca 02             	retf   0x2ca
     91d:	27                   	daa    
     91e:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     924:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     927:	02 2f                	add    ch,BYTE PTR [edi]
     929:	14 00                	adc    al,0x0
     92b:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     92e:	02 31                	add    dh,BYTE PTR [ecx]
     930:	13 00                	adc    eax,DWORD PTR [eax]
     932:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     935:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     93b:	bb 00 02 04 02       	mov    ebx,0x2040200
     940:	03 76 74             	add    esi,DWORD PTR [esi+0x74]
     943:	00 02                	add    BYTE PTR [edx],al
     945:	04 01                	add    al,0x1
     947:	06                   	push   es
     948:	4a                   	dec    edx
     949:	06                   	push   es
     94a:	03 0c d6             	add    ecx,DWORD PTR [esi+edx*8]
     94d:	3d 5b f3 08 13       	cmp    eax,0x1308f35b
     952:	02 02                	add    al,BYTE PTR [edx]
     954:	00 01                	add    BYTE PTR [ecx],al
     956:	01 50 01             	add    DWORD PTR [eax+0x1],edx
     959:	00 00                	add    BYTE PTR [eax],al
     95b:	02 00                	add    al,BYTE PTR [eax]
     95d:	db 00                	fild   DWORD PTR [eax]
     95f:	00 00                	add    BYTE PTR [eax],al
     961:	01 01                	add    DWORD PTR [ecx],eax
     963:	fb                   	sti    
     964:	0e                   	push   cs
     965:	0d 00 01 01 01       	or     eax,0x1010100
     96a:	01 00                	add    DWORD PTR [eax],eax
     96c:	00 00                	add    BYTE PTR [eax],al
     96e:	01 00                	add    DWORD PTR [eax],eax
     970:	00 01                	add    BYTE PTR [ecx],al
     972:	73 72                	jae    9e6 <sysEnter_Vector-0x12f61a>
     974:	63 00                	arpl   WORD PTR [eax],ax
     976:	2f                   	das    
     977:	68 6f 6d 65 2f       	push   0x2f656d6f
     97c:	79 6f                	jns    9ed <sysEnter_Vector-0x12f613>
     97e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     985:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     988:	73 73                	jae    9fd <sysEnter_Vector-0x12f603>
     98a:	2f                   	das    
     98b:	6c                   	ins    BYTE PTR es:[edi],dx
     98c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     993:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     999:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     99f:	78 2d                	js     9ce <sysEnter_Vector-0x12f632>
     9a1:	67 6e                	outs   dx,BYTE PTR ds:[si]
     9a3:	75 2f                	jne    9d4 <sysEnter_Vector-0x12f62c>
     9a5:	35 2e 33 2e 30       	xor    eax,0x302e332e
     9aa:	2f                   	das    
     9ab:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     9b2:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     9b5:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9b9:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     9bd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9c1:	65                   	gs
     9c2:	2f                   	das    
     9c3:	2e                   	cs
     9c4:	2e                   	cs
     9c5:	2f                   	das    
     9c6:	2e                   	cs
     9c7:	2e                   	cs
     9c8:	2f                   	das    
     9c9:	2e                   	cs
     9ca:	2e                   	cs
     9cb:	2f                   	das    
     9cc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     9d0:	6a 2f                	push   0x2f
     9d2:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     9d5:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     9dc:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9dd:	65                   	gs
     9de:	6c                   	ins    BYTE PTR es:[edi],dx
     9df:	2f                   	das    
     9e0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     9e7:	00 00                	add    BYTE PTR [eax],al
     9e9:	6d                   	ins    DWORD PTR es:[edi],dx
     9ea:	61                   	popa   
     9eb:	6c                   	ins    BYTE PTR es:[edi],dx
     9ec:	6c                   	ins    BYTE PTR es:[edi],dx
     9ed:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9ee:	63 2e                	arpl   WORD PTR [esi],bp
     9f0:	63 00                	arpl   WORD PTR [eax],ax
     9f2:	01 00                	add    DWORD PTR [eax],eax
     9f4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     9f7:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     9fe:	63 
     9ff:	2e                   	cs
     a00:	68 00 02 00 00       	push   0x200
     a05:	73 74                	jae    a7b <sysEnter_Vector-0x12f585>
     a07:	64                   	fs
     a08:	64                   	fs
     a09:	65                   	gs
     a0a:	66                   	data16
     a0b:	2e                   	cs
     a0c:	68 00 02 00 00       	push   0x200
     a11:	6d                   	ins    DWORD PTR es:[edi],dx
     a12:	61                   	popa   
     a13:	6c                   	ins    BYTE PTR es:[edi],dx
     a14:	6c                   	ins    BYTE PTR es:[edi],dx
     a15:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a16:	63 2e                	arpl   WORD PTR [esi],bp
     a18:	68 00 03 00 00       	push   0x300
     a1d:	6c                   	ins    BYTE PTR es:[edi],dx
     a1e:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     a25:	4f                   	dec    edi
     a26:	53                   	push   ebx
     a27:	2e                   	cs
     a28:	68 00 03 00 00       	push   0x300
     a2d:	73 79                	jae    aa8 <sysEnter_Vector-0x12f558>
     a2f:	73 63                	jae    a94 <sysEnter_Vector-0x12f56c>
     a31:	61                   	popa   
     a32:	6c                   	ins    BYTE PTR es:[edi],dx
     a33:	6c                   	ins    BYTE PTR es:[edi],dx
     a34:	73 2e                	jae    a64 <sysEnter_Vector-0x12f59c>
     a36:	68 00 04 00 00       	push   0x400
     a3b:	00 00                	add    BYTE PTR [eax],al
     a3d:	05 02 90 12 00       	add    eax,0x129002
     a42:	30 03                	xor    BYTE PTR [ebx],al
     a44:	0c 01                	or     al,0x1
     a46:	08 21                	or     BYTE PTR [ecx],ah
     a48:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
     a4b:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     a50:	f5                   	cmc    
     a51:	92                   	xchg   edx,eax
     a52:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     a58:	04 01                	add    al,0x1
     a5a:	06                   	push   es
     a5b:	66 06                	pushw  es
     a5d:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     a62:	59                   	pop    ecx
     a63:	31 f5                	xor    ebp,esi
     a65:	68 93 00 02 04       	push   0x4020093
     a6a:	02 be 30 03 76 90    	add    bh,BYTE PTR [esi-0x6f89fcd0]
     a70:	03 0b                	add    ecx,DWORD PTR [ebx]
     a72:	20 31                	and    BYTE PTR [ecx],dh
     a74:	08 27                	or     BYTE PTR [edi],ah
     a76:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     a7c:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     a81:	f3 02 26             	repz add ah,BYTE PTR [esi]
     a84:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     a8b:	e5 ad                	in     eax,0xad
     a8d:	91                   	xchg   ecx,eax
     a8e:	91                   	xchg   ecx,eax
     a8f:	75 08                	jne    a99 <sysEnter_Vector-0x12f567>
     a91:	d7                   	xlat   BYTE PTR ds:[ebx]
     a92:	d7                   	xlat   BYTE PTR ds:[ebx]
     a93:	08 13                	or     BYTE PTR [ebx],dl
     a95:	91                   	xchg   ecx,eax
     a96:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     a99:	91                   	xchg   ecx,eax
     a9a:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     a9f:	c9                   	leave  
     aa0:	ad                   	lods   eax,DWORD PTR ds:[esi]
     aa1:	3f                   	aas    
     aa2:	08 13                	or     BYTE PTR [ebx],dl
     aa4:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     aaa:	01 e3                	add    ebx,esp
     aac:	00 00                	add    BYTE PTR [eax],al
     aae:	00 02                	add    BYTE PTR [edx],al
     ab0:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     ab6:	01 fb                	add    ebx,edi
     ab8:	0e                   	push   cs
     ab9:	0d 00 01 01 01       	or     eax,0x1010100
     abe:	01 00                	add    DWORD PTR [eax],eax
     ac0:	00 00                	add    BYTE PTR [eax],al
     ac2:	01 00                	add    DWORD PTR [eax],eax
     ac4:	00 01                	add    BYTE PTR [ecx],al
     ac6:	73 72                	jae    b3a <sysEnter_Vector-0x12f4c6>
     ac8:	63 00                	arpl   WORD PTR [eax],ax
     aca:	2f                   	das    
     acb:	68 6f 6d 65 2f       	push   0x2f656d6f
     ad0:	79 6f                	jns    b41 <sysEnter_Vector-0x12f4bf>
     ad2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ad9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     adc:	73 73                	jae    b51 <sysEnter_Vector-0x12f4af>
     ade:	2f                   	das    
     adf:	6c                   	ins    BYTE PTR es:[edi],dx
     ae0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     ae7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     aed:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     af3:	78 2d                	js     b22 <sysEnter_Vector-0x12f4de>
     af5:	67 6e                	outs   dx,BYTE PTR ds:[si]
     af7:	75 2f                	jne    b28 <sysEnter_Vector-0x12f4d8>
     af9:	35 2e 33 2e 30       	xor    eax,0x302e332e
     afe:	2f                   	das    
     aff:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b06:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b09:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b0d:	65 00 00             	add    BYTE PTR gs:[eax],al
     b10:	6d                   	ins    DWORD PTR es:[edi],dx
     b11:	65                   	gs
     b12:	6d                   	ins    DWORD PTR es:[edi],dx
     b13:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     b16:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     b19:	01 00                	add    DWORD PTR [eax],eax
     b1b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b1e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b25:	63 
     b26:	2e                   	cs
     b27:	68 00 02 00 00       	push   0x200
     b2c:	73 74                	jae    ba2 <sysEnter_Vector-0x12f45e>
     b2e:	64                   	fs
     b2f:	64                   	fs
     b30:	65                   	gs
     b31:	66                   	data16
     b32:	2e                   	cs
     b33:	68 00 02 00 00       	push   0x200
     b38:	6d                   	ins    DWORD PTR es:[edi],dx
     b39:	61                   	popa   
     b3a:	6c                   	ins    BYTE PTR es:[edi],dx
     b3b:	6c                   	ins    BYTE PTR es:[edi],dx
     b3c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b3d:	63 2e                	arpl   WORD PTR [esi],bp
     b3f:	68 00 03 00 00       	push   0x300
     b44:	6c                   	ins    BYTE PTR es:[edi],dx
     b45:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b4c:	4f                   	dec    edi
     b4d:	53                   	push   ebx
     b4e:	2e                   	cs
     b4f:	68 00 03 00 00       	push   0x300
     b54:	00 00                	add    BYTE PTR [eax],al
     b56:	05 02 00 16 00       	add    eax,0x160002
     b5b:	30 03                	xor    BYTE PTR [ebx],al
     b5d:	0a 01                	or     al,BYTE PTR [ecx]
     b5f:	f5                   	cmc    
     b60:	d7                   	xlat   BYTE PTR ds:[ebx]
     b61:	d7                   	xlat   BYTE PTR ds:[ebx]
     b62:	68 91 67 68 83       	push   0x83686791
     b67:	91                   	xchg   ecx,eax
     b68:	91                   	xchg   ecx,eax
     b69:	2f                   	das    
     b6a:	08 1f                	or     BYTE PTR [edi],bl
     b6c:	e8 08 57 ca 84       	call   84ca6279 <ticksToWait+0x54ca1809>
     b71:	68 83 67 68 83       	push   0x83686783
     b76:	91                   	xchg   ecx,eax
     b77:	91                   	xchg   ecx,eax
     b78:	2f                   	das    
     b79:	08 1f                	or     BYTE PTR [edi],bl
     b7b:	e8 08 57 ca 5c       	call   5cca6288 <ticksToWait+0x2cca1818>
     b80:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     b86:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     b8c:	3e 02 02             	add    al,BYTE PTR ds:[edx]
     b8f:	00 01                	add    BYTE PTR [ecx],al
     b91:	01 ca                	add    edx,ecx
     b93:	00 00                	add    BYTE PTR [eax],al
     b95:	00 02                	add    BYTE PTR [edx],al
     b97:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     b9d:	01 fb                	add    ebx,edi
     b9f:	0e                   	push   cs
     ba0:	0d 00 01 01 01       	or     eax,0x1010100
     ba5:	01 00                	add    DWORD PTR [eax],eax
     ba7:	00 00                	add    BYTE PTR [eax],al
     ba9:	01 00                	add    DWORD PTR [eax],eax
     bab:	00 01                	add    BYTE PTR [ecx],al
     bad:	73 72                	jae    c21 <sysEnter_Vector-0x12f3df>
     baf:	63 00                	arpl   WORD PTR [eax],ax
     bb1:	2f                   	das    
     bb2:	68 6f 6d 65 2f       	push   0x2f656d6f
     bb7:	79 6f                	jns    c28 <sysEnter_Vector-0x12f3d8>
     bb9:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     bc0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     bc3:	73 73                	jae    c38 <sysEnter_Vector-0x12f3c8>
     bc5:	2f                   	das    
     bc6:	6c                   	ins    BYTE PTR es:[edi],dx
     bc7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     bce:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     bd4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     bda:	78 2d                	js     c09 <sysEnter_Vector-0x12f3f7>
     bdc:	67 6e                	outs   dx,BYTE PTR ds:[si]
     bde:	75 2f                	jne    c0f <sysEnter_Vector-0x12f3f1>
     be0:	35 2e 33 2e 30       	xor    eax,0x302e332e
     be5:	2f                   	das    
     be6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     bed:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     bf0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     bf4:	65 00 00             	add    BYTE PTR gs:[eax],al
     bf7:	6d                   	ins    DWORD PTR es:[edi],dx
     bf8:	65                   	gs
     bf9:	6d                   	ins    DWORD PTR es:[edi],dx
     bfa:	73 65                	jae    c61 <sysEnter_Vector-0x12f39f>
     bfc:	74 2e                	je     c2c <sysEnter_Vector-0x12f3d4>
     bfe:	63 00                	arpl   WORD PTR [eax],ax
     c00:	01 00                	add    DWORD PTR [eax],eax
     c02:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c05:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c0c:	63 
     c0d:	2e                   	cs
     c0e:	68 00 02 00 00       	push   0x200
     c13:	73 74                	jae    c89 <sysEnter_Vector-0x12f377>
     c15:	64                   	fs
     c16:	64                   	fs
     c17:	65                   	gs
     c18:	66                   	data16
     c19:	2e                   	cs
     c1a:	68 00 02 00 00       	push   0x200
     c1f:	6d                   	ins    DWORD PTR es:[edi],dx
     c20:	61                   	popa   
     c21:	6c                   	ins    BYTE PTR es:[edi],dx
     c22:	6c                   	ins    BYTE PTR es:[edi],dx
     c23:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c24:	63 2e                	arpl   WORD PTR [esi],bp
     c26:	68 00 03 00 00       	push   0x300
     c2b:	6c                   	ins    BYTE PTR es:[edi],dx
     c2c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c33:	4f                   	dec    edi
     c34:	53                   	push   ebx
     c35:	2e                   	cs
     c36:	68 00 03 00 00       	push   0x300
     c3b:	00 00                	add    BYTE PTR [eax],al
     c3d:	05 02 9c 17 00       	add    eax,0x179c02
     c42:	30 1a                	xor    BYTE PTR [edx],bl
     c44:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     c4b:	ca 9f 2f             	retf   0x2f9f
     c4e:	d5 bd                	aad    0xbd
     c50:	9f                   	lahf   
     c51:	2f                   	das    
     c52:	f1                   	icebp  
     c53:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     c58:	c9                   	leave  
     c59:	08 13                	or     BYTE PTR [ebx],dl
     c5b:	02 02                	add    al,BYTE PTR [edx]
     c5d:	00 01                	add    BYTE PTR [ecx],al
     c5f:	01 8a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ecx
     c65:	00 84 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],al
     c6c:	fb                   	sti    
     c6d:	0e                   	push   cs
     c6e:	0d 00 01 01 01       	or     eax,0x1010100
     c73:	01 00                	add    DWORD PTR [eax],eax
     c75:	00 00                	add    BYTE PTR [eax],al
     c77:	01 00                	add    DWORD PTR [eax],eax
     c79:	00 01                	add    BYTE PTR [ecx],al
     c7b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c82:	00 2f                	add    BYTE PTR [edi],ch
     c84:	68 6f 6d 65 2f       	push   0x2f656d6f
     c89:	79 6f                	jns    cfa <sysEnter_Vector-0x12f306>
     c8b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     c92:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     c95:	73 73                	jae    d0a <sysEnter_Vector-0x12f2f6>
     c97:	2f                   	das    
     c98:	6c                   	ins    BYTE PTR es:[edi],dx
     c99:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     ca0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ca6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     cac:	78 2d                	js     cdb <sysEnter_Vector-0x12f325>
     cae:	67 6e                	outs   dx,BYTE PTR ds:[si]
     cb0:	75 2f                	jne    ce1 <sysEnter_Vector-0x12f31f>
     cb2:	35 2e 33 2e 30       	xor    eax,0x302e332e
     cb7:	2f                   	das    
     cb8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     cbf:	00 00                	add    BYTE PTR [eax],al
     cc1:	6d                   	ins    DWORD PTR es:[edi],dx
     cc2:	61                   	popa   
     cc3:	6c                   	ins    BYTE PTR es:[edi],dx
     cc4:	6c                   	ins    BYTE PTR es:[edi],dx
     cc5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cc6:	63 2e                	arpl   WORD PTR [esi],bp
     cc8:	68 00 01 00 00       	push   0x100
     ccd:	6c                   	ins    BYTE PTR es:[edi],dx
     cce:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     cd5:	4f                   	dec    edi
     cd6:	53                   	push   ebx
     cd7:	2e                   	cs
     cd8:	68 00 01 00 00       	push   0x100
     cdd:	73 74                	jae    d53 <sysEnter_Vector-0x12f2ad>
     cdf:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ce6:	63 
     ce7:	2e                   	cs
     ce8:	68 00 02 00 00       	push   0x200
     ced:	00 e6                	add    dh,ah
     cef:	00 00                	add    BYTE PTR [eax],al
     cf1:	00 02                	add    BYTE PTR [edx],al
     cf3:	00 cd                	add    ch,cl
     cf5:	00 00                	add    BYTE PTR [eax],al
     cf7:	00 01                	add    BYTE PTR [ecx],al
     cf9:	01 fb                	add    ebx,edi
     cfb:	0e                   	push   cs
     cfc:	0d 00 01 01 01       	or     eax,0x1010100
     d01:	01 00                	add    DWORD PTR [eax],eax
     d03:	00 00                	add    BYTE PTR [eax],al
     d05:	01 00                	add    DWORD PTR [eax],eax
     d07:	00 01                	add    BYTE PTR [ecx],al
     d09:	73 72                	jae    d7d <sysEnter_Vector-0x12f283>
     d0b:	63 00                	arpl   WORD PTR [eax],ax
     d0d:	2f                   	das    
     d0e:	68 6f 6d 65 2f       	push   0x2f656d6f
     d13:	79 6f                	jns    d84 <sysEnter_Vector-0x12f27c>
     d15:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d1c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d1f:	73 73                	jae    d94 <sysEnter_Vector-0x12f26c>
     d21:	2f                   	das    
     d22:	6c                   	ins    BYTE PTR es:[edi],dx
     d23:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d2a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d30:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d36:	78 2d                	js     d65 <sysEnter_Vector-0x12f29b>
     d38:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d3a:	75 2f                	jne    d6b <sysEnter_Vector-0x12f295>
     d3c:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d41:	2f                   	das    
     d42:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d49:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d4c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d50:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     d54:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d58:	65                   	gs
     d59:	2f                   	das    
     d5a:	2e                   	cs
     d5b:	2e                   	cs
     d5c:	2f                   	das    
     d5d:	2e                   	cs
     d5e:	2e                   	cs
     d5f:	2f                   	das    
     d60:	2e                   	cs
     d61:	2e                   	cs
     d62:	2f                   	das    
     d63:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     d67:	6a 2f                	push   0x2f
     d69:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     d6c:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     d73:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d74:	65                   	gs
     d75:	6c                   	ins    BYTE PTR es:[edi],dx
     d76:	2f                   	das    
     d77:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d7e:	00 00                	add    BYTE PTR [eax],al
     d80:	70 69                	jo     deb <sysEnter_Vector-0x12f215>
     d82:	70 65                	jo     de9 <sysEnter_Vector-0x12f217>
     d84:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d87:	01 00                	add    DWORD PTR [eax],eax
     d89:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d8c:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d93:	63 
     d94:	2e                   	cs
     d95:	68 00 02 00 00       	push   0x200
     d9a:	6d                   	ins    DWORD PTR es:[edi],dx
     d9b:	61                   	popa   
     d9c:	6c                   	ins    BYTE PTR es:[edi],dx
     d9d:	6c                   	ins    BYTE PTR es:[edi],dx
     d9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d9f:	63 2e                	arpl   WORD PTR [esi],bp
     da1:	68 00 03 00 00       	push   0x300
     da6:	6c                   	ins    BYTE PTR es:[edi],dx
     da7:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     dae:	4f                   	dec    edi
     daf:	53                   	push   ebx
     db0:	2e                   	cs
     db1:	68 00 03 00 00       	push   0x300
     db6:	73 79                	jae    e31 <sysEnter_Vector-0x12f1cf>
     db8:	73 63                	jae    e1d <sysEnter_Vector-0x12f1e3>
     dba:	61                   	popa   
     dbb:	6c                   	ins    BYTE PTR es:[edi],dx
     dbc:	6c                   	ins    BYTE PTR es:[edi],dx
     dbd:	73 2e                	jae    ded <sysEnter_Vector-0x12f213>
     dbf:	68 00 04 00 00       	push   0x400
     dc4:	00 00                	add    BYTE PTR [eax],al
     dc6:	05 02 84 18 00       	add    eax,0x188402
     dcb:	30 03                	xor    BYTE PTR [ebx],al
     dcd:	0a 01                	or     al,BYTE PTR [ecx]
     dcf:	08 13                	or     BYTE PTR [ebx],dl
     dd1:	08 2f                	or     BYTE PTR [edi],ch
     dd3:	02 05 00 01 01 fa    	add    al,BYTE PTR ds:0xfa010100
     dd9:	00 00                	add    BYTE PTR [eax],al
     ddb:	00 02                	add    BYTE PTR [edx],al
     ddd:	00 d8                	add    al,bl
     ddf:	00 00                	add    BYTE PTR [eax],al
     de1:	00 01                	add    BYTE PTR [ecx],al
     de3:	01 fb                	add    ebx,edi
     de5:	0e                   	push   cs
     de6:	0d 00 01 01 01       	or     eax,0x1010100
     deb:	01 00                	add    DWORD PTR [eax],eax
     ded:	00 00                	add    BYTE PTR [eax],al
     def:	01 00                	add    DWORD PTR [eax],eax
     df1:	00 01                	add    BYTE PTR [ecx],al
     df3:	73 72                	jae    e67 <sysEnter_Vector-0x12f199>
     df5:	63 00                	arpl   WORD PTR [eax],ax
     df7:	2f                   	das    
     df8:	68 6f 6d 65 2f       	push   0x2f656d6f
     dfd:	79 6f                	jns    e6e <sysEnter_Vector-0x12f192>
     dff:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e06:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e09:	73 73                	jae    e7e <sysEnter_Vector-0x12f182>
     e0b:	2f                   	das    
     e0c:	6c                   	ins    BYTE PTR es:[edi],dx
     e0d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e14:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e1a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     e20:	78 2d                	js     e4f <sysEnter_Vector-0x12f1b1>
     e22:	67 6e                	outs   dx,BYTE PTR ds:[si]
     e24:	75 2f                	jne    e55 <sysEnter_Vector-0x12f1ab>
     e26:	35 2e 33 2e 30       	xor    eax,0x302e332e
     e2b:	2f                   	das    
     e2c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e33:	00 2e                	add    BYTE PTR [esi],ch
     e35:	2e                   	cs
     e36:	2f                   	das    
     e37:	2e                   	cs
     e38:	2e                   	cs
     e39:	2f                   	das    
     e3a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     e3e:	6a 2f                	push   0x2f
     e40:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     e43:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     e4a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e4b:	65                   	gs
     e4c:	6c                   	ins    BYTE PTR es:[edi],dx
     e4d:	2f                   	das    
     e4e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e55:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     e58:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     e5c:	65 00 00             	add    BYTE PTR gs:[eax],al
     e5f:	73 74                	jae    ed5 <sysEnter_Vector-0x12f12b>
     e61:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
     e68:	00 
     e69:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e6c:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     e73:	63 
     e74:	2e                   	cs
     e75:	68 00 02 00 00       	push   0x200
     e7a:	73 74                	jae    ef0 <sysEnter_Vector-0x12f110>
     e7c:	64                   	fs
     e7d:	64                   	fs
     e7e:	65                   	gs
     e7f:	66                   	data16
     e80:	2e                   	cs
     e81:	68 00 02 00 00       	push   0x200
     e86:	64                   	fs
     e87:	6c                   	ins    BYTE PTR es:[edi],dx
     e88:	6c                   	ins    BYTE PTR es:[edi],dx
     e89:	69 73 74 2e 68 00 03 	imul   esi,DWORD PTR [ebx+0x74],0x300682e
     e90:	00 00                	add    BYTE PTR [eax],al
     e92:	73 74                	jae    f08 <sysEnter_Vector-0x12f0f8>
     e94:	64 69 6f 2e 68 00 04 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x40068
     e9b:	00 
     e9c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     e9f:	6c                   	ins    BYTE PTR es:[edi],dx
     ea0:	6c                   	ins    BYTE PTR es:[edi],dx
     ea1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ea2:	63 2e                	arpl   WORD PTR [esi],bp
     ea4:	68 00 04 00 00       	push   0x400
     ea9:	6c                   	ins    BYTE PTR es:[edi],dx
     eaa:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     eb1:	4f                   	dec    edi
     eb2:	53                   	push   ebx
     eb3:	2e                   	cs
     eb4:	68 00 04 00 00       	push   0x400
     eb9:	00 00                	add    BYTE PTR [eax],al
     ebb:	05 02 b0 18 00       	add    eax,0x18b002
     ec0:	30 03                	xor    BYTE PTR [ebx],al
     ec2:	c3                   	ret    
     ec3:	00 01                	add    BYTE PTR [ecx],al
     ec5:	08 22                	or     BYTE PTR [edx],ah
     ec7:	76 08                	jbe    ed1 <sysEnter_Vector-0x12f12f>
     ec9:	31 d7                	xor    edi,edx
     ecb:	d7                   	xlat   BYTE PTR ds:[ebx]
     ecc:	d7                   	xlat   BYTE PTR ds:[ebx]
     ecd:	d7                   	xlat   BYTE PTR ds:[ebx]
     ece:	ad                   	lods   eax,DWORD PTR ds:[esi]
     ecf:	e6 21                	out    0x21,al
     ed1:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
     ed7:	00 00                	add    BYTE PTR [eax],al
     ed9:	00 02                	add    BYTE PTR [edx],al
     edb:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
     ee2:	fb                   	sti    
     ee3:	0e                   	push   cs
     ee4:	0d 00 01 01 01       	or     eax,0x1010100
     ee9:	01 00                	add    DWORD PTR [eax],eax
     eeb:	00 00                	add    BYTE PTR [eax],al
     eed:	01 00                	add    DWORD PTR [eax],eax
     eef:	00 01                	add    BYTE PTR [ecx],al
     ef1:	73 72                	jae    f65 <sysEnter_Vector-0x12f09b>
     ef3:	63 2f                	arpl   WORD PTR [edi],bp
     ef5:	73 74                	jae    f6b <sysEnter_Vector-0x12f095>
     ef7:	72 69                	jb     f62 <sysEnter_Vector-0x12f09e>
     ef9:	6e                   	outs   dx,BYTE PTR ds:[esi]
     efa:	67 73 00             	addr16 jae efd <sysEnter_Vector-0x12f103>
     efd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f04:	00 2f                	add    BYTE PTR [edi],ch
     f06:	68 6f 6d 65 2f       	push   0x2f656d6f
     f0b:	79 6f                	jns    f7c <sysEnter_Vector-0x12f084>
     f0d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f14:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f17:	73 73                	jae    f8c <sysEnter_Vector-0x12f074>
     f19:	2f                   	das    
     f1a:	6c                   	ins    BYTE PTR es:[edi],dx
     f1b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f22:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f28:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f2e:	78 2d                	js     f5d <sysEnter_Vector-0x12f0a3>
     f30:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f32:	75 2f                	jne    f63 <sysEnter_Vector-0x12f09d>
     f34:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f39:	2f                   	das    
     f3a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f41:	00 00                	add    BYTE PTR [eax],al
     f43:	73 74                	jae    fb9 <sysEnter_Vector-0x12f047>
     f45:	72 63                	jb     faa <sysEnter_Vector-0x12f056>
     f47:	61                   	popa   
     f48:	74 2e                	je     f78 <sysEnter_Vector-0x12f088>
     f4a:	63 00                	arpl   WORD PTR [eax],ax
     f4c:	01 00                	add    DWORD PTR [eax],eax
     f4e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     f51:	6c                   	ins    BYTE PTR es:[edi],dx
     f52:	6c                   	ins    BYTE PTR es:[edi],dx
     f53:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f54:	63 2e                	arpl   WORD PTR [esi],bp
     f56:	68 00 02 00 00       	push   0x200
     f5b:	6c                   	ins    BYTE PTR es:[edi],dx
     f5c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     f63:	4f                   	dec    edi
     f64:	53                   	push   ebx
     f65:	2e                   	cs
     f66:	68 00 02 00 00       	push   0x200
     f6b:	73 74                	jae    fe1 <sysEnter_Vector-0x12f01f>
     f6d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f74:	63 
     f75:	2e                   	cs
     f76:	68 00 03 00 00       	push   0x300
     f7b:	00 00                	add    BYTE PTR [eax],al
     f7d:	05 02 34 19 00       	add    eax,0x193402
     f82:	30 03                	xor    BYTE PTR [ebx],al
     f84:	1d 01 08 21 02       	sbb    eax,0x2210801
     f89:	24 13                	and    al,0x13
     f8b:	3d 5b 08 21 02       	cmp    eax,0x221085b
     f90:	24 13                	and    al,0x13
     f92:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
     f97:	49                   	dec    ecx
     f98:	e8 76 2f 08 4b       	call   4b083f13 <ticksToWait+0x1b07f4a3>
     f9d:	4b                   	dec    ebx
     f9e:	47                   	inc    edi
     f9f:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
     fa6:	bb 00 00 00 02       	mov    ebx,0x2000000
     fab:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
     fb2:	fb                   	sti    
     fb3:	0e                   	push   cs
     fb4:	0d 00 01 01 01       	or     eax,0x1010100
     fb9:	01 00                	add    DWORD PTR [eax],eax
     fbb:	00 00                	add    BYTE PTR [eax],al
     fbd:	01 00                	add    DWORD PTR [eax],eax
     fbf:	00 01                	add    BYTE PTR [ecx],al
     fc1:	73 72                	jae    1035 <sysEnter_Vector-0x12efcb>
     fc3:	63 2f                	arpl   WORD PTR [edi],bp
     fc5:	73 74                	jae    103b <sysEnter_Vector-0x12efc5>
     fc7:	72 69                	jb     1032 <sysEnter_Vector-0x12efce>
     fc9:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fca:	67 73 00             	addr16 jae fcd <sysEnter_Vector-0x12f033>
     fcd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     fd4:	00 2f                	add    BYTE PTR [edi],ch
     fd6:	68 6f 6d 65 2f       	push   0x2f656d6f
     fdb:	79 6f                	jns    104c <sysEnter_Vector-0x12efb4>
     fdd:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     fe4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     fe7:	73 73                	jae    105c <sysEnter_Vector-0x12efa4>
     fe9:	2f                   	das    
     fea:	6c                   	ins    BYTE PTR es:[edi],dx
     feb:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     ff2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ff8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     ffe:	78 2d                	js     102d <sysEnter_Vector-0x12efd3>
    1000:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1002:	75 2f                	jne    1033 <sysEnter_Vector-0x12efcd>
    1004:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1009:	2f                   	das    
    100a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1011:	00 00                	add    BYTE PTR [eax],al
    1013:	73 74                	jae    1089 <sysEnter_Vector-0x12ef77>
    1015:	72 63                	jb     107a <sysEnter_Vector-0x12ef86>
    1017:	6d                   	ins    DWORD PTR es:[edi],dx
    1018:	70 2e                	jo     1048 <sysEnter_Vector-0x12efb8>
    101a:	63 00                	arpl   WORD PTR [eax],ax
    101c:	01 00                	add    DWORD PTR [eax],eax
    101e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1021:	6c                   	ins    BYTE PTR es:[edi],dx
    1022:	6c                   	ins    BYTE PTR es:[edi],dx
    1023:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1024:	63 2e                	arpl   WORD PTR [esi],bp
    1026:	68 00 02 00 00       	push   0x200
    102b:	6c                   	ins    BYTE PTR es:[edi],dx
    102c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1033:	4f                   	dec    edi
    1034:	53                   	push   ebx
    1035:	2e                   	cs
    1036:	68 00 02 00 00       	push   0x200
    103b:	73 74                	jae    10b1 <sysEnter_Vector-0x12ef4f>
    103d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1044:	63 
    1045:	2e                   	cs
    1046:	68 00 03 00 00       	push   0x300
    104b:	00 00                	add    BYTE PTR [eax],al
    104d:	05 02 20 1a 00       	add    eax,0x1a2002
    1052:	30 03                	xor    BYTE PTR [ebx],al
    1054:	18 01                	sbb    BYTE PTR [ecx],al
    1056:	08 21                	or     BYTE PTR [ecx],ah
    1058:	3d 41 ad ad 67       	cmp    eax,0x67adad41
    105d:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
    1063:	01 01                	add    DWORD PTR [ecx],eax
    1065:	dc 00                	fadd   QWORD PTR [eax]
    1067:	00 00                	add    BYTE PTR [eax],al
    1069:	02 00                	add    al,BYTE PTR [eax]
    106b:	9c                   	pushf  
    106c:	00 00                	add    BYTE PTR [eax],al
    106e:	00 01                	add    BYTE PTR [ecx],al
    1070:	01 fb                	add    ebx,edi
    1072:	0e                   	push   cs
    1073:	0d 00 01 01 01       	or     eax,0x1010100
    1078:	01 00                	add    DWORD PTR [eax],eax
    107a:	00 00                	add    BYTE PTR [eax],al
    107c:	01 00                	add    DWORD PTR [eax],eax
    107e:	00 01                	add    BYTE PTR [ecx],al
    1080:	73 72                	jae    10f4 <sysEnter_Vector-0x12ef0c>
    1082:	63 2f                	arpl   WORD PTR [edi],bp
    1084:	73 74                	jae    10fa <sysEnter_Vector-0x12ef06>
    1086:	72 69                	jb     10f1 <sysEnter_Vector-0x12ef0f>
    1088:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1089:	67 73 00             	addr16 jae 108c <sysEnter_Vector-0x12ef74>
    108c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1093:	00 2f                	add    BYTE PTR [edi],ch
    1095:	68 6f 6d 65 2f       	push   0x2f656d6f
    109a:	79 6f                	jns    110b <sysEnter_Vector-0x12eef5>
    109c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    10a3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    10a6:	73 73                	jae    111b <sysEnter_Vector-0x12eee5>
    10a8:	2f                   	das    
    10a9:	6c                   	ins    BYTE PTR es:[edi],dx
    10aa:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    10b1:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    10b7:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    10bd:	78 2d                	js     10ec <sysEnter_Vector-0x12ef14>
    10bf:	67 6e                	outs   dx,BYTE PTR ds:[si]
    10c1:	75 2f                	jne    10f2 <sysEnter_Vector-0x12ef0e>
    10c3:	35 2e 33 2e 30       	xor    eax,0x302e332e
    10c8:	2f                   	das    
    10c9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10d0:	00 00                	add    BYTE PTR [eax],al
    10d2:	73 74                	jae    1148 <sysEnter_Vector-0x12eeb8>
    10d4:	72 63                	jb     1139 <sysEnter_Vector-0x12eec7>
    10d6:	70 79                	jo     1151 <sysEnter_Vector-0x12eeaf>
    10d8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    10db:	01 00                	add    DWORD PTR [eax],eax
    10dd:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    10e0:	6c                   	ins    BYTE PTR es:[edi],dx
    10e1:	6c                   	ins    BYTE PTR es:[edi],dx
    10e2:	6f                   	outs   dx,DWORD PTR ds:[esi]
    10e3:	63 2e                	arpl   WORD PTR [esi],bp
    10e5:	68 00 02 00 00       	push   0x200
    10ea:	6c                   	ins    BYTE PTR es:[edi],dx
    10eb:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    10f2:	4f                   	dec    edi
    10f3:	53                   	push   ebx
    10f4:	2e                   	cs
    10f5:	68 00 02 00 00       	push   0x200
    10fa:	73 74                	jae    1170 <sysEnter_Vector-0x12ee90>
    10fc:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1103:	63 
    1104:	2e                   	cs
    1105:	68 00 03 00 00       	push   0x300
    110a:	00 00                	add    BYTE PTR [eax],al
    110c:	05 02 80 1a 00       	add    eax,0x1a8002
    1111:	30 16                	xor    BYTE PTR [esi],dl
    1113:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    1117:	04 01                	add    al,0x1
    1119:	06                   	push   es
    111a:	20 06                	and    BYTE PTR [esi],al
    111c:	08 ca                	or     dl,cl
    111e:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1124:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1127:	06                   	push   es
    1128:	20 06                	and    BYTE PTR [esi],al
    112a:	08 ca                	or     dl,cl
    112c:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1132:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1135:	06                   	push   es
    1136:	20 00                	and    BYTE PTR [eax],al
    1138:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    113b:	08 c8                	or     al,cl
    113d:	06                   	push   es
    113e:	ca 3d 02             	retf   0x23d
    1141:	02 00                	add    al,BYTE PTR [eax]
    1143:	01 01                	add    DWORD PTR [ecx],eax
    1145:	cb                   	retf   
    1146:	00 00                	add    BYTE PTR [eax],al
    1148:	00 02                	add    BYTE PTR [edx],al
    114a:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    1150:	01 fb                	add    ebx,edi
    1152:	0e                   	push   cs
    1153:	0d 00 01 01 01       	or     eax,0x1010100
    1158:	01 00                	add    DWORD PTR [eax],eax
    115a:	00 00                	add    BYTE PTR [eax],al
    115c:	01 00                	add    DWORD PTR [eax],eax
    115e:	00 01                	add    BYTE PTR [ecx],al
    1160:	73 72                	jae    11d4 <sysEnter_Vector-0x12ee2c>
    1162:	63 2f                	arpl   WORD PTR [edi],bp
    1164:	73 74                	jae    11da <sysEnter_Vector-0x12ee26>
    1166:	72 69                	jb     11d1 <sysEnter_Vector-0x12ee2f>
    1168:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1169:	67 73 00             	addr16 jae 116c <sysEnter_Vector-0x12ee94>
    116c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1173:	00 2f                	add    BYTE PTR [edi],ch
    1175:	68 6f 6d 65 2f       	push   0x2f656d6f
    117a:	79 6f                	jns    11eb <sysEnter_Vector-0x12ee15>
    117c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1183:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1186:	73 73                	jae    11fb <sysEnter_Vector-0x12ee05>
    1188:	2f                   	das    
    1189:	6c                   	ins    BYTE PTR es:[edi],dx
    118a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1191:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1197:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    119d:	78 2d                	js     11cc <sysEnter_Vector-0x12ee34>
    119f:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11a1:	75 2f                	jne    11d2 <sysEnter_Vector-0x12ee2e>
    11a3:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11a8:	2f                   	das    
    11a9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11b0:	00 00                	add    BYTE PTR [eax],al
    11b2:	73 74                	jae    1228 <sysEnter_Vector-0x12edd8>
    11b4:	72 69                	jb     121f <sysEnter_Vector-0x12ede1>
    11b6:	73 6e                	jae    1226 <sysEnter_Vector-0x12edda>
    11b8:	75 6d                	jne    1227 <sysEnter_Vector-0x12edd9>
    11ba:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    11bd:	01 00                	add    DWORD PTR [eax],eax
    11bf:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    11c2:	6c                   	ins    BYTE PTR es:[edi],dx
    11c3:	6c                   	ins    BYTE PTR es:[edi],dx
    11c4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    11c5:	63 2e                	arpl   WORD PTR [esi],bp
    11c7:	68 00 02 00 00       	push   0x200
    11cc:	6c                   	ins    BYTE PTR es:[edi],dx
    11cd:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    11d4:	4f                   	dec    edi
    11d5:	53                   	push   ebx
    11d6:	2e                   	cs
    11d7:	68 00 02 00 00       	push   0x200
    11dc:	73 74                	jae    1252 <sysEnter_Vector-0x12edae>
    11de:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    11e5:	63 
    11e6:	2e                   	cs
    11e7:	68 00 03 00 00       	push   0x300
    11ec:	00 00                	add    BYTE PTR [eax],al
    11ee:	05 02 48 1b 00       	add    eax,0x1b4802
    11f3:	30 1a                	xor    BYTE PTR [edx],bl
    11f5:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    11f8:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11fb:	06                   	push   es
    11fc:	66                   	data16
    11fd:	00 02                	add    BYTE PTR [edx],al
    11ff:	04 02                	add    al,0x2
    1201:	66 06                	pushw  es
    1203:	75 59                	jne    125e <sysEnter_Vector-0x12eda2>
    1205:	31 f3                	xor    ebx,esi
    1207:	76 2f                	jbe    1238 <sysEnter_Vector-0x12edc8>
    1209:	08 e5                	or     ch,ah
    120b:	72 08                	jb     1215 <sysEnter_Vector-0x12edeb>
    120d:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    1210:	02 00                	add    al,BYTE PTR [eax]
    1212:	01 01                	add    DWORD PTR [ecx],eax
    1214:	94                   	xchg   esp,eax
    1215:	00 00                	add    BYTE PTR [eax],al
    1217:	00 02                	add    BYTE PTR [edx],al
    1219:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
    121d:	00 01                	add    BYTE PTR [ecx],al
    121f:	01 fb                	add    ebx,edi
    1221:	0e                   	push   cs
    1222:	0d 00 01 01 01       	or     eax,0x1010100
    1227:	01 00                	add    DWORD PTR [eax],eax
    1229:	00 00                	add    BYTE PTR [eax],al
    122b:	01 00                	add    DWORD PTR [eax],eax
    122d:	00 01                	add    BYTE PTR [ecx],al
    122f:	73 72                	jae    12a3 <sysEnter_Vector-0x12ed5d>
    1231:	63 2f                	arpl   WORD PTR [edi],bp
    1233:	73 74                	jae    12a9 <sysEnter_Vector-0x12ed57>
    1235:	72 69                	jb     12a0 <sysEnter_Vector-0x12ed60>
    1237:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1238:	67 73 00             	addr16 jae 123b <sysEnter_Vector-0x12edc5>
    123b:	2f                   	das    
    123c:	68 6f 6d 65 2f       	push   0x2f656d6f
    1241:	79 6f                	jns    12b2 <sysEnter_Vector-0x12ed4e>
    1243:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    124a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    124d:	73 73                	jae    12c2 <sysEnter_Vector-0x12ed3e>
    124f:	2f                   	das    
    1250:	6c                   	ins    BYTE PTR es:[edi],dx
    1251:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1258:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    125e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1264:	78 2d                	js     1293 <sysEnter_Vector-0x12ed6d>
    1266:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1268:	75 2f                	jne    1299 <sysEnter_Vector-0x12ed67>
    126a:	35 2e 33 2e 30       	xor    eax,0x302e332e
    126f:	2f                   	das    
    1270:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1277:	00 00                	add    BYTE PTR [eax],al
    1279:	73 74                	jae    12ef <sysEnter_Vector-0x12ed11>
    127b:	72 6c                	jb     12e9 <sysEnter_Vector-0x12ed17>
    127d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    127f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1282:	01 00                	add    DWORD PTR [eax],eax
    1284:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1287:	64                   	fs
    1288:	64                   	fs
    1289:	65                   	gs
    128a:	66                   	data16
    128b:	2e                   	cs
    128c:	68 00 02 00 00       	push   0x200
    1291:	00 00                	add    BYTE PTR [eax],al
    1293:	05 02 d4 1b 00       	add    eax,0x1bd402
    1298:	30 14 f3             	xor    BYTE PTR [ebx+esi*8],dl
    129b:	75 2f                	jne    12cc <sysEnter_Vector-0x12ed34>
    129d:	49                   	dec    ecx
    129e:	e6 3d                	out    0x3d,al
    12a0:	30 f3                	xor    bl,dh
    12a2:	75 2f                	jne    12d3 <sysEnter_Vector-0x12ed2d>
    12a4:	49                   	dec    ecx
    12a5:	e6 3d                	out    0x3d,al
    12a7:	02 02                	add    al,BYTE PTR [edx]
    12a9:	00 01                	add    BYTE PTR [ecx],al
    12ab:	01 c1                	add    ecx,eax
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	00 02                	add    BYTE PTR [edx],al
    12b1:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    12b4:	00 00                	add    BYTE PTR [eax],al
    12b6:	01 01                	add    DWORD PTR [ecx],eax
    12b8:	fb                   	sti    
    12b9:	0e                   	push   cs
    12ba:	0d 00 01 01 01       	or     eax,0x1010100
    12bf:	01 00                	add    DWORD PTR [eax],eax
    12c1:	00 00                	add    BYTE PTR [eax],al
    12c3:	01 00                	add    DWORD PTR [eax],eax
    12c5:	00 01                	add    BYTE PTR [ecx],al
    12c7:	73 72                	jae    133b <sysEnter_Vector-0x12ecc5>
    12c9:	63 2f                	arpl   WORD PTR [edi],bp
    12cb:	73 74                	jae    1341 <sysEnter_Vector-0x12ecbf>
    12cd:	72 69                	jb     1338 <sysEnter_Vector-0x12ecc8>
    12cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12d0:	67 73 00             	addr16 jae 12d3 <sysEnter_Vector-0x12ed2d>
    12d3:	2f                   	das    
    12d4:	68 6f 6d 65 2f       	push   0x2f656d6f
    12d9:	79 6f                	jns    134a <sysEnter_Vector-0x12ecb6>
    12db:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    12e2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    12e5:	73 73                	jae    135a <sysEnter_Vector-0x12eca6>
    12e7:	2f                   	das    
    12e8:	6c                   	ins    BYTE PTR es:[edi],dx
    12e9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    12f0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    12f6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    12fc:	78 2d                	js     132b <sysEnter_Vector-0x12ecd5>
    12fe:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1300:	75 2f                	jne    1331 <sysEnter_Vector-0x12eccf>
    1302:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1307:	2f                   	das    
    1308:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    130f:	00 00                	add    BYTE PTR [eax],al
    1311:	73 74                	jae    1387 <sysEnter_Vector-0x12ec79>
    1313:	72 6e                	jb     1383 <sysEnter_Vector-0x12ec7d>
    1315:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1318:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    131b:	01 00                	add    DWORD PTR [eax],eax
    131d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1320:	64                   	fs
    1321:	64                   	fs
    1322:	65                   	gs
    1323:	66                   	data16
    1324:	2e                   	cs
    1325:	68 00 02 00 00       	push   0x200
    132a:	00 00                	add    BYTE PTR [eax],al
    132c:	05 02 38 1c 00       	add    eax,0x1c3802
    1331:	30 03                	xor    BYTE PTR [ebx],al
    1333:	0c 01                	or     al,0x1
    1335:	c9                   	leave  
    1336:	2f                   	das    
    1337:	f3 00 02             	repz add BYTE PTR [edx],al
    133a:	04 01                	add    al,0x1
    133c:	06                   	push   es
    133d:	f2 00 02             	repnz add BYTE PTR [edx],al
    1340:	04 02                	add    al,0x2
    1342:	74 06                	je     134a <sysEnter_Vector-0x12ecb6>
    1344:	75 9f                	jne    12e5 <sysEnter_Vector-0x12ed1b>
    1346:	70 00                	jo     1348 <sysEnter_Vector-0x12ecb8>
    1348:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    134b:	06                   	push   es
    134c:	ba 06 6b 59 31       	mov    edx,0x31596b06
    1351:	c9                   	leave  
    1352:	2f                   	das    
    1353:	f3 00 02             	repz add BYTE PTR [edx],al
    1356:	04 01                	add    al,0x1
    1358:	06                   	push   es
    1359:	f2 00 02             	repnz add BYTE PTR [edx],al
    135c:	04 02                	add    al,0x2
    135e:	74 06                	je     1366 <sysEnter_Vector-0x12ec9a>
    1360:	75 9f                	jne    1301 <sysEnter_Vector-0x12ecff>
    1362:	70 00                	jo     1364 <sysEnter_Vector-0x12ec9c>
    1364:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1367:	06                   	push   es
    1368:	ba 06 6b 59 02       	mov    edx,0x2596b06
    136d:	02 00                	add    al,BYTE PTR [eax]
    136f:	01 01                	add    DWORD PTR [ecx],eax
    1371:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1376:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1379:	00 00                	add    BYTE PTR [eax],al
    137b:	01 01                	add    DWORD PTR [ecx],eax
    137d:	fb                   	sti    
    137e:	0e                   	push   cs
    137f:	0d 00 01 01 01       	or     eax,0x1010100
    1384:	01 00                	add    DWORD PTR [eax],eax
    1386:	00 00                	add    BYTE PTR [eax],al
    1388:	01 00                	add    DWORD PTR [eax],eax
    138a:	00 01                	add    BYTE PTR [ecx],al
    138c:	73 72                	jae    1400 <sysEnter_Vector-0x12ec00>
    138e:	63 2f                	arpl   WORD PTR [edi],bp
    1390:	73 74                	jae    1406 <sysEnter_Vector-0x12ebfa>
    1392:	72 69                	jb     13fd <sysEnter_Vector-0x12ec03>
    1394:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1395:	67 73 00             	addr16 jae 1398 <sysEnter_Vector-0x12ec68>
    1398:	2f                   	das    
    1399:	68 6f 6d 65 2f       	push   0x2f656d6f
    139e:	79 6f                	jns    140f <sysEnter_Vector-0x12ebf1>
    13a0:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13a7:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13aa:	73 73                	jae    141f <sysEnter_Vector-0x12ebe1>
    13ac:	2f                   	das    
    13ad:	6c                   	ins    BYTE PTR es:[edi],dx
    13ae:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    13b5:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    13bb:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    13c1:	78 2d                	js     13f0 <sysEnter_Vector-0x12ec10>
    13c3:	67 6e                	outs   dx,BYTE PTR ds:[si]
    13c5:	75 2f                	jne    13f6 <sysEnter_Vector-0x12ec0a>
    13c7:	35 2e 33 2e 30       	xor    eax,0x302e332e
    13cc:	2f                   	das    
    13cd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13d4:	00 00                	add    BYTE PTR [eax],al
    13d6:	73 74                	jae    144c <sysEnter_Vector-0x12ebb4>
    13d8:	72 6e                	jb     1448 <sysEnter_Vector-0x12ebb8>
    13da:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    13dd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    13e0:	01 00                	add    DWORD PTR [eax],eax
    13e2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    13e5:	64                   	fs
    13e6:	64                   	fs
    13e7:	65                   	gs
    13e8:	66                   	data16
    13e9:	2e                   	cs
    13ea:	68 00 02 00 00       	push   0x200
    13ef:	00 00                	add    BYTE PTR [eax],al
    13f1:	05 02 08 1d 00       	add    eax,0x1d0802
    13f6:	30 03                	xor    BYTE PTR [ebx],al
    13f8:	0d 01 f3 67 2f       	or     eax,0x2f67f301
    13fd:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    1400:	00 02                	add    BYTE PTR [edx],al
    1402:	04 01                	add    al,0x1
    1404:	06                   	push   es
    1405:	66 06                	pushw  es
    1407:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    140c:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    1411:	02 02                	add    al,BYTE PTR [edx]
    1413:	00 01                	add    BYTE PTR [ecx],al
    1415:	01 49 01             	add    DWORD PTR [ecx+0x1],ecx
    1418:	00 00                	add    BYTE PTR [eax],al
    141a:	02 00                	add    al,BYTE PTR [eax]
    141c:	9c                   	pushf  
    141d:	00 00                	add    BYTE PTR [eax],al
    141f:	00 01                	add    BYTE PTR [ecx],al
    1421:	01 fb                	add    ebx,edi
    1423:	0e                   	push   cs
    1424:	0d 00 01 01 01       	or     eax,0x1010100
    1429:	01 00                	add    DWORD PTR [eax],eax
    142b:	00 00                	add    BYTE PTR [eax],al
    142d:	01 00                	add    DWORD PTR [eax],eax
    142f:	00 01                	add    BYTE PTR [ecx],al
    1431:	73 72                	jae    14a5 <sysEnter_Vector-0x12eb5b>
    1433:	63 2f                	arpl   WORD PTR [edi],bp
    1435:	73 74                	jae    14ab <sysEnter_Vector-0x12eb55>
    1437:	72 69                	jb     14a2 <sysEnter_Vector-0x12eb5e>
    1439:	6e                   	outs   dx,BYTE PTR ds:[esi]
    143a:	67 73 00             	addr16 jae 143d <sysEnter_Vector-0x12ebc3>
    143d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1444:	00 2f                	add    BYTE PTR [edi],ch
    1446:	68 6f 6d 65 2f       	push   0x2f656d6f
    144b:	79 6f                	jns    14bc <sysEnter_Vector-0x12eb44>
    144d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1454:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1457:	73 73                	jae    14cc <sysEnter_Vector-0x12eb34>
    1459:	2f                   	das    
    145a:	6c                   	ins    BYTE PTR es:[edi],dx
    145b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1462:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1468:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    146e:	78 2d                	js     149d <sysEnter_Vector-0x12eb63>
    1470:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1472:	75 2f                	jne    14a3 <sysEnter_Vector-0x12eb5d>
    1474:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1479:	2f                   	das    
    147a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1481:	00 00                	add    BYTE PTR [eax],al
    1483:	73 74                	jae    14f9 <sysEnter_Vector-0x12eb07>
    1485:	72 6f                	jb     14f6 <sysEnter_Vector-0x12eb0a>
    1487:	75 6c                	jne    14f5 <sysEnter_Vector-0x12eb0b>
    1489:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    148c:	01 00                	add    DWORD PTR [eax],eax
    148e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1491:	6c                   	ins    BYTE PTR es:[edi],dx
    1492:	6c                   	ins    BYTE PTR es:[edi],dx
    1493:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1494:	63 2e                	arpl   WORD PTR [esi],bp
    1496:	68 00 02 00 00       	push   0x200
    149b:	6c                   	ins    BYTE PTR es:[edi],dx
    149c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    14a3:	4f                   	dec    edi
    14a4:	53                   	push   ebx
    14a5:	2e                   	cs
    14a6:	68 00 02 00 00       	push   0x200
    14ab:	73 74                	jae    1521 <sysEnter_Vector-0x12eadf>
    14ad:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    14b4:	63 
    14b5:	2e                   	cs
    14b6:	68 00 03 00 00       	push   0x300
    14bb:	00 00                	add    BYTE PTR [eax],al
    14bd:	05 02 88 1d 00       	add    eax,0x1d8802
    14c2:	30 03                	xor    BYTE PTR [ebx],al
    14c4:	3b 01                	cmp    eax,DWORD PTR [ecx]
    14c6:	08 2f                	or     BYTE PTR [edi],ch
    14c8:	40                   	inc    eax
    14c9:	00 02                	add    BYTE PTR [edx],al
    14cb:	04 01                	add    al,0x1
    14cd:	7a 00                	jp     14cf <sysEnter_Vector-0x12eb31>
    14cf:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14d2:	ad                   	lods   eax,DWORD PTR ds:[esi]
    14d3:	59                   	pop    ecx
    14d4:	59                   	pop    ecx
    14d5:	75 c9                	jne    14a0 <sysEnter_Vector-0x12eb60>
    14d7:	59                   	pop    ecx
    14d8:	ad                   	lods   eax,DWORD PTR ds:[esi]
    14d9:	00 02                	add    BYTE PTR [edx],al
    14db:	04 02                	add    al,0x2
    14dd:	06                   	push   es
    14de:	66                   	data16
    14df:	00 02                	add    BYTE PTR [edx],al
    14e1:	04 03                	add    al,0x3
    14e3:	66 06                	pushw  es
    14e5:	59                   	pop    ecx
    14e6:	00 02                	add    BYTE PTR [edx],al
    14e8:	04 01                	add    al,0x1
    14ea:	06                   	push   es
    14eb:	74 06                	je     14f3 <sysEnter_Vector-0x12eb0d>
    14ed:	75 91                	jne    1480 <sysEnter_Vector-0x12eb80>
    14ef:	3d 76 67 00 02       	cmp    eax,0x2006776
    14f4:	04 01                	add    al,0x1
    14f6:	06                   	push   es
    14f7:	58                   	pop    eax
    14f8:	00 02                	add    BYTE PTR [edx],al
    14fa:	04 02                	add    al,0x2
    14fc:	74 00                	je     14fe <sysEnter_Vector-0x12eb02>
    14fe:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1501:	58                   	pop    eax
    1502:	06                   	push   es
    1503:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    1508:	9f                   	lahf   
    1509:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    150d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1510:	06                   	push   es
    1511:	58                   	pop    eax
    1512:	00 02                	add    BYTE PTR [edx],al
    1514:	04 03                	add    al,0x3
    1516:	58                   	pop    eax
    1517:	00 02                	add    BYTE PTR [edx],al
    1519:	04 04                	add    al,0x4
    151b:	74 00                	je     151d <sysEnter_Vector-0x12eae3>
    151d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1520:	58                   	pop    eax
    1521:	06                   	push   es
    1522:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1525:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1528:	06                   	push   es
    1529:	66                   	data16
    152a:	00 02                	add    BYTE PTR [edx],al
    152c:	04 02                	add    al,0x2
    152e:	58                   	pop    eax
    152f:	00 02                	add    BYTE PTR [edx],al
    1531:	04 03                	add    al,0x3
    1533:	58                   	pop    eax
    1534:	06                   	push   es
    1535:	67 76 59             	addr16 jbe 1591 <sysEnter_Vector-0x12ea6f>
    1538:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    153c:	03 10                	add    edx,DWORD PTR [eax]
    153e:	ac                   	lods   al,BYTE PTR ds:[esi]
    153f:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1542:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1545:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    1548:	67 2f                	addr16 das 
    154a:	67 00 02             	add    BYTE PTR [bp+si],al
    154d:	04 01                	add    al,0x1
    154f:	06                   	push   es
    1550:	66                   	data16
    1551:	00 02                	add    BYTE PTR [edx],al
    1553:	04 02                	add    al,0x2
    1555:	58                   	pop    eax
    1556:	00 02                	add    BYTE PTR [edx],al
    1558:	04 04                	add    al,0x4
    155a:	3c 06                	cmp    al,0x6
    155c:	59                   	pop    ecx
    155d:	2f                   	das    
    155e:	02 08                	add    cl,BYTE PTR [eax]
    1560:	00 01                	add    BYTE PTR [ecx],al
    1562:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1565:	00 00                	add    BYTE PTR [eax],al
    1567:	02 00                	add    al,BYTE PTR [eax]
    1569:	2d 00 00 00 01       	sub    eax,0x1000000
    156e:	01 fb                	add    ebx,edi
    1570:	0e                   	push   cs
    1571:	0d 00 01 01 01       	or     eax,0x1010100
    1576:	01 00                	add    DWORD PTR [eax],eax
    1578:	00 00                	add    BYTE PTR [eax],al
    157a:	01 00                	add    DWORD PTR [eax],eax
    157c:	00 01                	add    BYTE PTR [ecx],al
    157e:	73 72                	jae    15f2 <sysEnter_Vector-0x12ea0e>
    1580:	63 2f                	arpl   WORD PTR [edi],bp
    1582:	73 74                	jae    15f8 <sysEnter_Vector-0x12ea08>
    1584:	72 69                	jb     15ef <sysEnter_Vector-0x12ea11>
    1586:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1587:	67 73 00             	addr16 jae 158a <sysEnter_Vector-0x12ea76>
    158a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    158d:	72 70                	jb     15ff <sysEnter_Vector-0x12ea01>
    158f:	61                   	popa   
    1590:	72 74                	jb     1606 <sysEnter_Vector-0x12e9fa>
    1592:	73 2e                	jae    15c2 <sysEnter_Vector-0x12ea3e>
    1594:	63 00                	arpl   WORD PTR [eax],ax
    1596:	01 00                	add    DWORD PTR [eax],eax
    1598:	00 00                	add    BYTE PTR [eax],al
    159a:	00 05 02 08 1f 00    	add    BYTE PTR ds:0x1f0802,al
    15a0:	30 13                	xor    BYTE PTR [ebx],dl
    15a2:	c9                   	leave  
    15a3:	ad                   	lods   eax,DWORD PTR ds:[esi]
    15a4:	3d 02 02 00 01       	cmp    eax,0x1000202
    15a9:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    15ac:	00 00                	add    BYTE PTR [eax],al
    15ae:	02 00                	add    al,BYTE PTR [eax]
    15b0:	9c                   	pushf  
    15b1:	00 00                	add    BYTE PTR [eax],al
    15b3:	00 01                	add    BYTE PTR [ecx],al
    15b5:	01 fb                	add    ebx,edi
    15b7:	0e                   	push   cs
    15b8:	0d 00 01 01 01       	or     eax,0x1010100
    15bd:	01 00                	add    DWORD PTR [eax],eax
    15bf:	00 00                	add    BYTE PTR [eax],al
    15c1:	01 00                	add    DWORD PTR [eax],eax
    15c3:	00 01                	add    BYTE PTR [ecx],al
    15c5:	73 72                	jae    1639 <sysEnter_Vector-0x12e9c7>
    15c7:	63 2f                	arpl   WORD PTR [edi],bp
    15c9:	73 74                	jae    163f <sysEnter_Vector-0x12e9c1>
    15cb:	72 69                	jb     1636 <sysEnter_Vector-0x12e9ca>
    15cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    15ce:	67 73 00             	addr16 jae 15d1 <sysEnter_Vector-0x12ea2f>
    15d1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15d8:	00 2f                	add    BYTE PTR [edi],ch
    15da:	68 6f 6d 65 2f       	push   0x2f656d6f
    15df:	79 6f                	jns    1650 <sysEnter_Vector-0x12e9b0>
    15e1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    15e8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    15eb:	73 73                	jae    1660 <sysEnter_Vector-0x12e9a0>
    15ed:	2f                   	das    
    15ee:	6c                   	ins    BYTE PTR es:[edi],dx
    15ef:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    15f6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    15fc:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1602:	78 2d                	js     1631 <sysEnter_Vector-0x12e9cf>
    1604:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1606:	75 2f                	jne    1637 <sysEnter_Vector-0x12e9c9>
    1608:	35 2e 33 2e 30       	xor    eax,0x302e332e
    160d:	2f                   	das    
    160e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1615:	00 00                	add    BYTE PTR [eax],al
    1617:	73 74                	jae    168d <sysEnter_Vector-0x12e973>
    1619:	72 74                	jb     168f <sysEnter_Vector-0x12e971>
    161b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    161c:	6c                   	ins    BYTE PTR es:[edi],dx
    161d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1620:	01 00                	add    DWORD PTR [eax],eax
    1622:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1625:	6c                   	ins    BYTE PTR es:[edi],dx
    1626:	6c                   	ins    BYTE PTR es:[edi],dx
    1627:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1628:	63 2e                	arpl   WORD PTR [esi],bp
    162a:	68 00 02 00 00       	push   0x200
    162f:	6c                   	ins    BYTE PTR es:[edi],dx
    1630:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1637:	4f                   	dec    edi
    1638:	53                   	push   ebx
    1639:	2e                   	cs
    163a:	68 00 02 00 00       	push   0x200
    163f:	73 74                	jae    16b5 <sysEnter_Vector-0x12e94b>
    1641:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1648:	63 
    1649:	2e                   	cs
    164a:	68 00 03 00 00       	push   0x300
    164f:	00 00                	add    BYTE PTR [eax],al
    1651:	05 02 28 1f 00       	add    eax,0x1f2802
    1656:	30 03                	xor    BYTE PTR [ebx],al
    1658:	d7                   	xlat   BYTE PTR ds:[ebx]
    1659:	00 01                	add    BYTE PTR [ecx],al
    165b:	08 2f                	or     BYTE PTR [edi],ch
    165d:	40                   	inc    eax
    165e:	00 02                	add    BYTE PTR [edx],al
    1660:	04 01                	add    al,0x1
    1662:	7c 00                	jl     1664 <sysEnter_Vector-0x12e99c>
    1664:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1667:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1668:	59                   	pop    ecx
    1669:	59                   	pop    ecx
    166a:	75 c9                	jne    1635 <sysEnter_Vector-0x12e9cb>
    166c:	59                   	pop    ecx
    166d:	ad                   	lods   eax,DWORD PTR ds:[esi]
    166e:	00 02                	add    BYTE PTR [edx],al
    1670:	04 02                	add    al,0x2
    1672:	06                   	push   es
    1673:	66                   	data16
    1674:	00 02                	add    BYTE PTR [edx],al
    1676:	04 03                	add    al,0x3
    1678:	66 06                	pushw  es
    167a:	59                   	pop    ecx
    167b:	00 02                	add    BYTE PTR [edx],al
    167d:	04 01                	add    al,0x1
    167f:	06                   	push   es
    1680:	74 06                	je     1688 <sysEnter_Vector-0x12e978>
    1682:	75 91                	jne    1615 <sysEnter_Vector-0x12e9eb>
    1684:	3d 76 67 00 02       	cmp    eax,0x2006776
    1689:	04 01                	add    al,0x1
    168b:	06                   	push   es
    168c:	58                   	pop    eax
    168d:	00 02                	add    BYTE PTR [edx],al
    168f:	04 02                	add    al,0x2
    1691:	74 00                	je     1693 <sysEnter_Vector-0x12e96d>
    1693:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1696:	58                   	pop    eax
    1697:	06                   	push   es
    1698:	03 13                	add    edx,DWORD PTR [ebx]
    169a:	3c 00                	cmp    al,0x0
    169c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    169f:	06                   	push   es
    16a0:	66                   	data16
    16a1:	00 02                	add    BYTE PTR [edx],al
    16a3:	04 02                	add    al,0x2
    16a5:	74 00                	je     16a7 <sysEnter_Vector-0x12e959>
    16a7:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    16aa:	06                   	push   es
    16ab:	59                   	pop    ecx
    16ac:	00 02                	add    BYTE PTR [edx],al
    16ae:	04 04                	add    al,0x4
    16b0:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    16b6:	f3 9f                	repz lahf 
    16b8:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    16bc:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16bf:	06                   	push   es
    16c0:	58                   	pop    eax
    16c1:	00 02                	add    BYTE PTR [edx],al
    16c3:	04 03                	add    al,0x3
    16c5:	58                   	pop    eax
    16c6:	00 02                	add    BYTE PTR [edx],al
    16c8:	04 04                	add    al,0x4
    16ca:	74 00                	je     16cc <sysEnter_Vector-0x12e934>
    16cc:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    16cf:	58                   	pop    eax
    16d0:	06                   	push   es
    16d1:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    16d4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16d7:	06                   	push   es
    16d8:	66                   	data16
    16d9:	00 02                	add    BYTE PTR [edx],al
    16db:	04 02                	add    al,0x2
    16dd:	58                   	pop    eax
    16de:	00 02                	add    BYTE PTR [edx],al
    16e0:	04 03                	add    al,0x3
    16e2:	58                   	pop    eax
    16e3:	06                   	push   es
    16e4:	59                   	pop    ecx
    16e5:	76 59                	jbe    1740 <sysEnter_Vector-0x12e8c0>
    16e7:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    16eb:	03 10                	add    edx,DWORD PTR [eax]
    16ed:	ac                   	lods   al,BYTE PTR ds:[esi]
    16ee:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    16f1:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    16f4:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    16f7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16fa:	06                   	push   es
    16fb:	66                   	data16
    16fc:	00 02                	add    BYTE PTR [edx],al
    16fe:	04 02                	add    al,0x2
    1700:	74 00                	je     1702 <sysEnter_Vector-0x12e8fe>
    1702:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1705:	58                   	pop    eax
    1706:	06                   	push   es
    1707:	4b                   	dec    ebx
    1708:	67 2f                	addr16 das 
    170a:	67 00 02             	add    BYTE PTR [bp+si],al
    170d:	04 01                	add    al,0x1
    170f:	06                   	push   es
    1710:	66                   	data16
    1711:	00 02                	add    BYTE PTR [edx],al
    1713:	04 02                	add    al,0x2
    1715:	58                   	pop    eax
    1716:	00 02                	add    BYTE PTR [edx],al
    1718:	04 04                	add    al,0x4
    171a:	3c 06                	cmp    al,0x6
    171c:	59                   	pop    ecx
    171d:	2f                   	das    
    171e:	02 08                	add    cl,BYTE PTR [eax]
    1720:	00 01                	add    BYTE PTR [ecx],al
    1722:	01 cf                	add    edi,ecx
    1724:	00 00                	add    BYTE PTR [eax],al
    1726:	00 02                	add    BYTE PTR [edx],al
    1728:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    172e:	01 fb                	add    ebx,edi
    1730:	0e                   	push   cs
    1731:	0d 00 01 01 01       	or     eax,0x1010100
    1736:	01 00                	add    DWORD PTR [eax],eax
    1738:	00 00                	add    BYTE PTR [eax],al
    173a:	01 00                	add    DWORD PTR [eax],eax
    173c:	00 01                	add    BYTE PTR [ecx],al
    173e:	73 72                	jae    17b2 <sysEnter_Vector-0x12e84e>
    1740:	63 2f                	arpl   WORD PTR [edi],bp
    1742:	73 74                	jae    17b8 <sysEnter_Vector-0x12e848>
    1744:	72 69                	jb     17af <sysEnter_Vector-0x12e851>
    1746:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1747:	67 73 00             	addr16 jae 174a <sysEnter_Vector-0x12e8b6>
    174a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1751:	00 2f                	add    BYTE PTR [edi],ch
    1753:	68 6f 6d 65 2f       	push   0x2f656d6f
    1758:	79 6f                	jns    17c9 <sysEnter_Vector-0x12e837>
    175a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1761:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1764:	73 73                	jae    17d9 <sysEnter_Vector-0x12e827>
    1766:	2f                   	das    
    1767:	6c                   	ins    BYTE PTR es:[edi],dx
    1768:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    176f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1775:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    177b:	78 2d                	js     17aa <sysEnter_Vector-0x12e856>
    177d:	67 6e                	outs   dx,BYTE PTR ds:[si]
    177f:	75 2f                	jne    17b0 <sysEnter_Vector-0x12e850>
    1781:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1786:	2f                   	das    
    1787:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    178e:	00 00                	add    BYTE PTR [eax],al
    1790:	73 74                	jae    1806 <sysEnter_Vector-0x12e7fa>
    1792:	72 74                	jb     1808 <sysEnter_Vector-0x12e7f8>
    1794:	72 69                	jb     17ff <sysEnter_Vector-0x12e801>
    1796:	6d                   	ins    DWORD PTR es:[edi],dx
    1797:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    179a:	01 00                	add    DWORD PTR [eax],eax
    179c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    179f:	6c                   	ins    BYTE PTR es:[edi],dx
    17a0:	6c                   	ins    BYTE PTR es:[edi],dx
    17a1:	6f                   	outs   dx,DWORD PTR ds:[esi]
    17a2:	63 2e                	arpl   WORD PTR [esi],bp
    17a4:	68 00 02 00 00       	push   0x200
    17a9:	6c                   	ins    BYTE PTR es:[edi],dx
    17aa:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    17b1:	4f                   	dec    edi
    17b2:	53                   	push   ebx
    17b3:	2e                   	cs
    17b4:	68 00 02 00 00       	push   0x200
    17b9:	73 74                	jae    182f <sysEnter_Vector-0x12e7d1>
    17bb:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    17c2:	63 
    17c3:	2e                   	cs
    17c4:	68 00 03 00 00       	push   0x300
    17c9:	00 00                	add    BYTE PTR [eax],al
    17cb:	05 02 c4 20 00       	add    eax,0x20c402
    17d0:	30 15 08 13 bf 30    	xor    BYTE PTR ds:0x30bf1308,dl
    17d6:	48                   	dec    eax
    17d7:	b3 08                	mov    bl,0x8
    17d9:	9f                   	lahf   
    17da:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    17e0:	06                   	push   es
    17e1:	82                   	(bad)  
    17e2:	06                   	push   es
    17e3:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    17e4:	84 00                	test   BYTE PTR [eax],al
    17e6:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    17e9:	06                   	push   es
    17ea:	20 06                	and    BYTE PTR [esi],al
    17ec:	08 ca                	or     dl,cl
    17ee:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    17f4:	01 01                	add    DWORD PTR [ecx],eax
    17f6:	c7 00 00 00 02 00    	mov    DWORD PTR [eax],0x20000
    17fc:	94                   	xchg   esp,eax
    17fd:	00 00                	add    BYTE PTR [eax],al
    17ff:	00 01                	add    BYTE PTR [ecx],al
    1801:	01 fb                	add    ebx,edi
    1803:	0e                   	push   cs
    1804:	0d 00 01 01 01       	or     eax,0x1010100
    1809:	01 00                	add    DWORD PTR [eax],eax
    180b:	00 00                	add    BYTE PTR [eax],al
    180d:	01 00                	add    DWORD PTR [eax],eax
    180f:	00 01                	add    BYTE PTR [ecx],al
    1811:	73 72                	jae    1885 <sysEnter_Vector-0x12e77b>
    1813:	63 00                	arpl   WORD PTR [eax],ax
    1815:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    181c:	00 2f                	add    BYTE PTR [edi],ch
    181e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1823:	79 6f                	jns    1894 <sysEnter_Vector-0x12e76c>
    1825:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    182c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    182f:	73 73                	jae    18a4 <sysEnter_Vector-0x12e75c>
    1831:	2f                   	das    
    1832:	6c                   	ins    BYTE PTR es:[edi],dx
    1833:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    183a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1840:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1846:	78 2d                	js     1875 <sysEnter_Vector-0x12e78b>
    1848:	67 6e                	outs   dx,BYTE PTR ds:[si]
    184a:	75 2f                	jne    187b <sysEnter_Vector-0x12e785>
    184c:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1851:	2f                   	das    
    1852:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1859:	00 00                	add    BYTE PTR [eax],al
    185b:	73 74                	jae    18d1 <sysEnter_Vector-0x12e72f>
    185d:	72 73                	jb     18d2 <sysEnter_Vector-0x12e72e>
    185f:	74 72                	je     18d3 <sysEnter_Vector-0x12e72d>
    1861:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1864:	01 00                	add    DWORD PTR [eax],eax
    1866:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1869:	6c                   	ins    BYTE PTR es:[edi],dx
    186a:	6c                   	ins    BYTE PTR es:[edi],dx
    186b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    186c:	63 2e                	arpl   WORD PTR [esi],bp
    186e:	68 00 02 00 00       	push   0x200
    1873:	6c                   	ins    BYTE PTR es:[edi],dx
    1874:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    187b:	4f                   	dec    edi
    187c:	53                   	push   ebx
    187d:	2e                   	cs
    187e:	68 00 02 00 00       	push   0x200
    1883:	73 74                	jae    18f9 <sysEnter_Vector-0x12e707>
    1885:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    188c:	63 
    188d:	2e                   	cs
    188e:	68 00 03 00 00       	push   0x300
    1893:	00 00                	add    BYTE PTR [eax],al
    1895:	05 02 7c 21 00       	add    eax,0x217c02
    189a:	30 03                	xor    BYTE PTR [ebx],al
    189c:	33 01                	xor    eax,DWORD PTR [ecx]
    189e:	ec                   	in     al,dx
    189f:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    18a4:	75 5a                	jne    1900 <sysEnter_Vector-0x12e700>
    18a6:	08 3f                	or     BYTE PTR [edi],bh
    18a8:	2c 23                	sub    al,0x23
    18aa:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    18ad:	1e                   	push   ds
    18ae:	00 02                	add    BYTE PTR [edx],al
    18b0:	04 01                	add    al,0x1
    18b2:	06                   	push   es
    18b3:	4a                   	dec    edx
    18b4:	06                   	push   es
    18b5:	03 0f                	add    ecx,DWORD PTR [edi]
    18b7:	9e                   	sahf   
    18b8:	59                   	pop    ecx
    18b9:	4d                   	dec    ebp
    18ba:	c9                   	leave  
    18bb:	d7                   	xlat   BYTE PTR ds:[ebx]
    18bc:	02 02                	add    al,BYTE PTR [edx]
    18be:	00 01                	add    BYTE PTR [ecx],al
    18c0:	01 3b                	add    DWORD PTR [ebx],edi
    18c2:	03 00                	add    eax,DWORD PTR [eax]
    18c4:	00 02                	add    BYTE PTR [edx],al
    18c6:	00 cc                	add    ah,cl
    18c8:	00 00                	add    BYTE PTR [eax],al
    18ca:	00 01                	add    BYTE PTR [ecx],al
    18cc:	01 fb                	add    ebx,edi
    18ce:	0e                   	push   cs
    18cf:	0d 00 01 01 01       	or     eax,0x1010100
    18d4:	01 00                	add    DWORD PTR [eax],eax
    18d6:	00 00                	add    BYTE PTR [eax],al
    18d8:	01 00                	add    DWORD PTR [eax],eax
    18da:	00 01                	add    BYTE PTR [ecx],al
    18dc:	73 72                	jae    1950 <sysEnter_Vector-0x12e6b0>
    18de:	63 00                	arpl   WORD PTR [eax],ax
    18e0:	2f                   	das    
    18e1:	68 6f 6d 65 2f       	push   0x2f656d6f
    18e6:	79 6f                	jns    1957 <sysEnter_Vector-0x12e6a9>
    18e8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    18ef:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    18f2:	73 73                	jae    1967 <sysEnter_Vector-0x12e699>
    18f4:	2f                   	das    
    18f5:	6c                   	ins    BYTE PTR es:[edi],dx
    18f6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    18fd:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1903:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1909:	78 2d                	js     1938 <sysEnter_Vector-0x12e6c8>
    190b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    190d:	75 2f                	jne    193e <sysEnter_Vector-0x12e6c2>
    190f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1914:	2f                   	das    
    1915:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    191c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    191f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1923:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    1926:	2e                   	cs
    1927:	2f                   	das    
    1928:	2e                   	cs
    1929:	2e                   	cs
    192a:	2f                   	das    
    192b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    192f:	6a 2f                	push   0x2f
    1931:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1934:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    193b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    193c:	65                   	gs
    193d:	6c                   	ins    BYTE PTR es:[edi],dx
    193e:	2f                   	das    
    193f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1946:	00 00                	add    BYTE PTR [eax],al
    1948:	74 69                	je     19b3 <sysEnter_Vector-0x12e64d>
    194a:	6d                   	ins    DWORD PTR es:[edi],dx
    194b:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    194f:	01 00                	add    DWORD PTR [eax],eax
    1951:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1954:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    195b:	63 
    195c:	2e                   	cs
    195d:	68 00 02 00 00       	push   0x200
    1962:	74 69                	je     19cd <sysEnter_Vector-0x12e633>
    1964:	6d                   	ins    DWORD PTR es:[edi],dx
    1965:	65                   	gs
    1966:	2e                   	cs
    1967:	68 00 03 00 00       	push   0x300
    196c:	6d                   	ins    DWORD PTR es:[edi],dx
    196d:	61                   	popa   
    196e:	6c                   	ins    BYTE PTR es:[edi],dx
    196f:	6c                   	ins    BYTE PTR es:[edi],dx
    1970:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1971:	63 2e                	arpl   WORD PTR [esi],bp
    1973:	68 00 03 00 00       	push   0x300
    1978:	6c                   	ins    BYTE PTR es:[edi],dx
    1979:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1980:	4f                   	dec    edi
    1981:	53                   	push   ebx
    1982:	2e                   	cs
    1983:	68 00 03 00 00       	push   0x300
    1988:	73 79                	jae    1a03 <sysEnter_Vector-0x12e5fd>
    198a:	73 63                	jae    19ef <sysEnter_Vector-0x12e611>
    198c:	61                   	popa   
    198d:	6c                   	ins    BYTE PTR es:[edi],dx
    198e:	6c                   	ins    BYTE PTR es:[edi],dx
    198f:	73 2e                	jae    19bf <sysEnter_Vector-0x12e641>
    1991:	68 00 04 00 00       	push   0x400
    1996:	00 00                	add    BYTE PTR [eax],al
    1998:	05 02 08 22 00       	add    eax,0x220802
    199d:	30 03                	xor    BYTE PTR [ebx],al
    199f:	16                   	push   ss
    19a0:	01 08                	add    DWORD PTR [eax],ecx
    19a2:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    19a5:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    19ab:	76 02                	jbe    19af <sysEnter_Vector-0x12e651>
    19ad:	24 13                	and    al,0x13
    19af:	08 22                	or     BYTE PTR [edx],ah
    19b1:	02 2e                	add    ch,BYTE PTR [esi]
    19b3:	13 02                	adc    eax,DWORD PTR [edx]
    19b5:	2f                   	das    
    19b6:	13 08                	adc    ecx,DWORD PTR [eax]
    19b8:	67 02 2d             	add    ch,BYTE PTR [di]
    19bb:	13 2f                	adc    ebp,DWORD PTR [edi]
    19bd:	00 02                	add    BYTE PTR [edx],al
    19bf:	04 01                	add    al,0x1
    19c1:	06                   	push   es
    19c2:	9e                   	sahf   
    19c3:	00 02                	add    BYTE PTR [edx],al
    19c5:	04 04                	add    al,0x4
    19c7:	02 23                	add    ah,BYTE PTR [ebx]
    19c9:	12 00                	adc    al,BYTE PTR [eax]
    19cb:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19d2:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19d5:	74 00                	je     19d7 <sysEnter_Vector-0x12e629>
    19d7:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19da:	58                   	pop    eax
    19db:	00 02                	add    BYTE PTR [edx],al
    19dd:	04 08                	add    al,0x8
    19df:	06                   	push   es
    19e0:	3d 48 00 02 04       	cmp    eax,0x4020048
    19e5:	01 06                	add    DWORD PTR [esi],eax
    19e7:	9e                   	sahf   
    19e8:	00 02                	add    BYTE PTR [edx],al
    19ea:	04 04                	add    al,0x4
    19ec:	02 23                	add    ah,BYTE PTR [ebx]
    19ee:	12 00                	adc    al,BYTE PTR [eax]
    19f0:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19f7:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19fa:	74 00                	je     19fc <sysEnter_Vector-0x12e604>
    19fc:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19ff:	58                   	pop    eax
    1a00:	06                   	push   es
    1a01:	94                   	xchg   esp,eax
    1a02:	e5 91                	in     eax,0x91
    1a04:	9f                   	lahf   
    1a05:	59                   	pop    ecx
    1a06:	00 02                	add    BYTE PTR [edx],al
    1a08:	04 01                	add    al,0x1
    1a0a:	06                   	push   es
    1a0b:	9e                   	sahf   
    1a0c:	00 02                	add    BYTE PTR [edx],al
    1a0e:	04 04                	add    al,0x4
    1a10:	02 23                	add    ah,BYTE PTR [ebx]
    1a12:	12 00                	adc    al,BYTE PTR [eax]
    1a14:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1a1b:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a1e:	74 00                	je     1a20 <sysEnter_Vector-0x12e5e0>
    1a20:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a23:	58                   	pop    eax
    1a24:	00 02                	add    BYTE PTR [edx],al
    1a26:	04 08                	add    al,0x8
    1a28:	06                   	push   es
    1a29:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    1a2f:	01 06                	add    DWORD PTR [esi],eax
    1a31:	9e                   	sahf   
    1a32:	00 02                	add    BYTE PTR [edx],al
    1a34:	04 04                	add    al,0x4
    1a36:	02 23                	add    ah,BYTE PTR [ebx]
    1a38:	12 00                	adc    al,BYTE PTR [eax]
    1a3a:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1a41:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a44:	74 00                	je     1a46 <sysEnter_Vector-0x12e5ba>
    1a46:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a49:	58                   	pop    eax
    1a4a:	06                   	push   es
    1a4b:	08 f6                	or     dh,dh
    1a4d:	d7                   	xlat   BYTE PTR ds:[ebx]
    1a4e:	9f                   	lahf   
    1a4f:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    1a54:	08 16                	or     BYTE PTR [esi],dl
    1a56:	08 3d 08 4b 5b f5    	or     BYTE PTR ds:0xf55b4b08,bh
    1a5c:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    1a62:	30 08                	xor    BYTE PTR [eax],cl
    1a64:	44                   	inc    esp
    1a65:	02 2e                	add    ch,BYTE PTR [esi]
    1a67:	13 02                	adc    eax,DWORD PTR [edx]
    1a69:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1a6b:	91                   	xchg   ecx,eax
    1a6c:	c9                   	leave  
    1a6d:	e6 02                	out    0x2,al
    1a6f:	2f                   	das    
    1a70:	13 02                	adc    eax,DWORD PTR [edx]
    1a72:	3c 13                	cmp    al,0x13
    1a74:	9f                   	lahf   
    1a75:	e5 e6                	in     eax,0xe6
    1a77:	08 c9                	or     cl,cl
    1a79:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1a7c:	9f                   	lahf   
    1a7d:	e5 4c                	in     eax,0x4c
    1a7f:	02 29                	add    ch,BYTE PTR [ecx]
    1a81:	13 02                	adc    eax,DWORD PTR [edx]
    1a83:	2b 13                	sub    edx,DWORD PTR [ebx]
    1a85:	9f                   	lahf   
    1a86:	e5 e6                	in     eax,0xe6
    1a88:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1a8d:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1a92:	06                   	push   es
    1a93:	c8 00 02 04          	enter  0x200,0x4
    1a97:	04 02                	add    al,0x2
    1a99:	2c 12                	sub    al,0x12
    1a9b:	00 02                	add    BYTE PTR [edx],al
    1a9d:	04 05                	add    al,0x5
    1a9f:	02 2f                	add    ch,BYTE PTR [edi]
    1aa1:	12 00                	adc    al,BYTE PTR [eax]
    1aa3:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1aa6:	74 00                	je     1aa8 <sysEnter_Vector-0x12e558>
    1aa8:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1aab:	58                   	pop    eax
    1aac:	06                   	push   es
    1aad:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1ab3:	04 01                	add    al,0x1
    1ab5:	06                   	push   es
    1ab6:	c8 00 02 04          	enter  0x200,0x4
    1aba:	04 02                	add    al,0x2
    1abc:	2c 12                	sub    al,0x12
    1abe:	00 02                	add    BYTE PTR [edx],al
    1ac0:	04 05                	add    al,0x5
    1ac2:	02 2f                	add    ch,BYTE PTR [edi]
    1ac4:	12 00                	adc    al,BYTE PTR [eax]
    1ac6:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ac9:	74 00                	je     1acb <sysEnter_Vector-0x12e535>
    1acb:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1ace:	58                   	pop    eax
    1acf:	00 02                	add    BYTE PTR [edx],al
    1ad1:	04 08                	add    al,0x8
    1ad3:	06                   	push   es
    1ad4:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1ada:	00 02                	add    BYTE PTR [edx],al
    1adc:	04 01                	add    al,0x1
    1ade:	06                   	push   es
    1adf:	c8 00 02 04          	enter  0x200,0x4
    1ae3:	04 02                	add    al,0x2
    1ae5:	2c 12                	sub    al,0x12
    1ae7:	00 02                	add    BYTE PTR [edx],al
    1ae9:	04 05                	add    al,0x5
    1aeb:	02 2f                	add    ch,BYTE PTR [edi]
    1aed:	12 00                	adc    al,BYTE PTR [eax]
    1aef:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1af2:	74 00                	je     1af4 <sysEnter_Vector-0x12e50c>
    1af4:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1af7:	58                   	pop    eax
    1af8:	06                   	push   es
    1af9:	08 f9                	or     cl,bh
    1afb:	bb 75 00 02 04       	mov    ebx,0x4020075
    1b00:	01 06                	add    DWORD PTR [esi],eax
    1b02:	08 2e                	or     BYTE PTR [esi],ch
    1b04:	06                   	push   es
    1b05:	9f                   	lahf   
    1b06:	75 75                	jne    1b7d <sysEnter_Vector-0x12e483>
    1b08:	7b d8                	jnp    1ae2 <sysEnter_Vector-0x12e51e>
    1b0a:	00 02                	add    BYTE PTR [edx],al
    1b0c:	04 01                	add    al,0x1
    1b0e:	06                   	push   es
    1b0f:	c8 06 75 e5          	enter  0x7506,0xe5
    1b13:	00 02                	add    BYTE PTR [edx],al
    1b15:	04 01                	add    al,0x1
    1b17:	06                   	push   es
    1b18:	02 22                	add    ah,BYTE PTR [edx]
    1b1a:	12 06                	adc    al,BYTE PTR [esi]
    1b1c:	4b                   	dec    ebx
    1b1d:	00 02                	add    BYTE PTR [edx],al
    1b1f:	04 01                	add    al,0x1
    1b21:	06                   	push   es
    1b22:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1b28:	02 22                	add    ah,BYTE PTR [edx]
    1b2a:	12 00                	adc    al,BYTE PTR [eax]
    1b2c:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1b2f:	74 00                	je     1b31 <sysEnter_Vector-0x12e4cf>
    1b31:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b34:	58                   	pop    eax
    1b35:	00 02                	add    BYTE PTR [edx],al
    1b37:	04 06                	add    al,0x6
    1b39:	06                   	push   es
    1b3a:	59                   	pop    ecx
    1b3b:	00 02                	add    BYTE PTR [edx],al
    1b3d:	04 01                	add    al,0x1
    1b3f:	06                   	push   es
    1b40:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1b43:	00 02                	add    BYTE PTR [edx],al
    1b45:	04 03                	add    al,0x3
    1b47:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1b4a:	00 02                	add    BYTE PTR [edx],al
    1b4c:	04 04                	add    al,0x4
    1b4e:	74 00                	je     1b50 <sysEnter_Vector-0x12e4b0>
    1b50:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b53:	58                   	pop    eax
    1b54:	00 02                	add    BYTE PTR [edx],al
    1b56:	04 06                	add    al,0x6
    1b58:	06                   	push   es
    1b59:	59                   	pop    ecx
    1b5a:	00 02                	add    BYTE PTR [edx],al
    1b5c:	04 01                	add    al,0x1
    1b5e:	06                   	push   es
    1b5f:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1b62:	00 02                	add    BYTE PTR [edx],al
    1b64:	04 03                	add    al,0x3
    1b66:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1b69:	00 02                	add    BYTE PTR [edx],al
    1b6b:	04 04                	add    al,0x4
    1b6d:	74 00                	je     1b6f <sysEnter_Vector-0x12e491>
    1b6f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b72:	58                   	pop    eax
    1b73:	00 02                	add    BYTE PTR [edx],al
    1b75:	04 06                	add    al,0x6
    1b77:	06                   	push   es
    1b78:	5a                   	pop    edx
    1b79:	00 02                	add    BYTE PTR [edx],al
    1b7b:	04 06                	add    al,0x6
    1b7d:	c9                   	leave  
    1b7e:	2f                   	das    
    1b7f:	00 02                	add    BYTE PTR [edx],al
    1b81:	04 01                	add    al,0x1
    1b83:	06                   	push   es
    1b84:	9e                   	sahf   
    1b85:	00 02                	add    BYTE PTR [edx],al
    1b87:	04 04                	add    al,0x4
    1b89:	02 23                	add    ah,BYTE PTR [ebx]
    1b8b:	12 00                	adc    al,BYTE PTR [eax]
    1b8d:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1b94:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b97:	74 00                	je     1b99 <sysEnter_Vector-0x12e467>
    1b99:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1b9c:	58                   	pop    eax
    1b9d:	00 02                	add    BYTE PTR [edx],al
    1b9f:	04 08                	add    al,0x8
    1ba1:	06                   	push   es
    1ba2:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1ba5:	e8 bb 00 02 04       	call   4021c65 <sysEnter_Vector+0x3ef1c65>
    1baa:	01 06                	add    DWORD PTR [esi],eax
    1bac:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1bb1:	02 31                	add    dh,BYTE PTR [ecx]
    1bb3:	14 02                	adc    al,0x2
    1bb5:	2c 14                	sub    al,0x14
    1bb7:	00 02                	add    BYTE PTR [edx],al
    1bb9:	04 01                	add    al,0x1
    1bbb:	06                   	push   es
    1bbc:	02 29                	add    ch,BYTE PTR [ecx]
    1bbe:	12 06                	adc    al,BYTE PTR [esi]
    1bc0:	4b                   	dec    ebx
    1bc1:	bd 00 02 04 01       	mov    ebp,0x1040200
    1bc6:	06                   	push   es
    1bc7:	ba 00 02 04 03       	mov    edx,0x3040200
    1bcc:	06                   	push   es
    1bcd:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1bd0:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    1bd3:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    1bda:	77 00                	ja     1bdc <sysEnter_Vector-0x12e424>
    1bdc:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1bdf:	06                   	push   es
    1be0:	82                   	(bad)  
    1be1:	06                   	push   es
    1be2:	4b                   	dec    ebx
    1be3:	68 00 02 04 01       	push   0x1040200
    1be8:	06                   	push   es
    1be9:	66 06                	pushw  es
    1beb:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    1bf1:	08 f3                	or     bl,dh
    1bf3:	67 08 14             	or     BYTE PTR [si],dl
    1bf6:	00 02                	add    BYTE PTR [edx],al
    1bf8:	04 01                	add    al,0x1
    1bfa:	e5 02                	in     eax,0x2
    1bfc:	07                   	pop    es
    1bfd:	00 01                	add    BYTE PTR [ecx],al
    1bff:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
  10:	6f                   	outs   dx,DWORD PTR ds:[esi]
  11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
  13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
  18:	67 6e                	outs   dx,BYTE PTR ds:[si]
  1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
  21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
  23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
  25:	68 72 00 70 72       	push   0x72700072
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  2e:	73 45                	jae    75 <sysEnter_Vector-0x12ff8b>
  30:	6e                   	outs   dx,BYTE PTR ds:[esi]
  31:	76 70                	jbe    a3 <sysEnter_Vector-0x12ff5d>
  33:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  37:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  3c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  40:	73 69                	jae    ab <sysEnter_Vector-0x12ff55>
  42:	67 6e                	outs   dx,BYTE PTR ds:[si]
  44:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  49:	74 00                	je     4b <sysEnter_Vector-0x12ffb5>
  4b:	68 65 61 70 42       	push   0x42706165
  50:	61                   	popa   
  51:	73 65                	jae    b8 <sysEnter_Vector-0x12ff48>
  53:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
  57:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
  5b:	75 6e                	jne    cb <sysEnter_Vector-0x12ff35>
  5d:	73 69                	jae    c8 <sysEnter_Vector-0x12ff38>
  5f:	67 6e                	outs   dx,BYTE PTR ds:[si]
  61:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  66:	61                   	popa   
  67:	72 00                	jb     69 <sysEnter_Vector-0x12ff97>
  69:	75 69                	jne    d4 <sysEnter_Vector-0x12ff2c>
  6b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  6c:	74 33                	je     a1 <sysEnter_Vector-0x12ff5f>
  6e:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  71:	00 2f                	add    BYTE PTR [edi],ch
  73:	68 6f 6d 65 2f       	push   0x2f656d6f
  78:	79 6f                	jns    e9 <sysEnter_Vector-0x12ff17>
  7a:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  81:	6f                   	outs   dx,DWORD PTR ds:[esi]
  82:	73 2f                	jae    b3 <sysEnter_Vector-0x12ff4d>
  84:	61                   	popa   
  85:	70 72                	jo     f9 <sysEnter_Vector-0x12ff07>
  87:	6f                   	outs   dx,DWORD PTR ds:[esi]
  88:	6a 2f                	push   0x2f
  8a:	6c                   	ins    BYTE PTR es:[edi],dx
  8b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  92:	4f                   	dec    edi
  93:	53                   	push   ebx
  94:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  97:	6f                   	outs   dx,DWORD PTR ds:[esi]
  98:	6f                   	outs   dx,DWORD PTR ds:[esi]
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  9e:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
  a2:	75 62                	jne    106 <sysEnter_Vector-0x12fefa>
  a4:	6c                   	ins    BYTE PTR es:[edi],dx
  a5:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
  a9:	72 63                	jb     10e <sysEnter_Vector-0x12fef2>
  ab:	68 72 49 00 68       	push   0x68004972
  b0:	65                   	gs
  b1:	61                   	popa   
  b2:	70 43                	jo     f7 <sysEnter_Vector-0x12ff09>
  b4:	75 72                	jne    128 <sysEnter_Vector-0x12fed8>
  b6:	72 00                	jb     b8 <sysEnter_Vector-0x12ff48>
  b8:	2e                   	cs
  b9:	2e                   	cs
  ba:	2f                   	das    
  bb:	2e                   	cs
  bc:	2e                   	cs
  bd:	2f                   	das    
  be:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
  c2:	6a 2f                	push   0x2f
  c4:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
  c7:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
  ce:	63 2f                	arpl   WORD PTR [edi],bp
  d0:	73 74                	jae    146 <sysEnter_Vector-0x12feba>
  d2:	72 69                	jb     13d <sysEnter_Vector-0x12fec3>
  d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
  d5:	67 73 2f             	addr16 jae 107 <sysEnter_Vector-0x12fef9>
  d8:	73 74                	jae    14e <sysEnter_Vector-0x12feb2>
  da:	72 63                	jb     13f <sysEnter_Vector-0x12fec1>
  dc:	68 72 2e 63 00       	push   0x632e72
  e1:	73 69                	jae    14c <sysEnter_Vector-0x12feb4>
  e3:	7a 65                	jp     14a <sysEnter_Vector-0x12feb6>
  e5:	74 79                	je     160 <sysEnter_Vector-0x12fea0>
  e7:	70 65                	jo     14e <sysEnter_Vector-0x12feb2>
  e9:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ed:	72 74                	jb     163 <sysEnter_Vector-0x12fe9d>
  ef:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
  f2:	74 00                	je     f4 <sysEnter_Vector-0x12ff0c>
  f4:	47                   	inc    edi
  f5:	4e                   	dec    esi
  f6:	55                   	push   ebp
  f7:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  fa:	31 20                	xor    DWORD PTR [eax],esp
  fc:	35 2e 33 2e 30       	xor    eax,0x302e332e
 101:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
 107:	3d 69 6e 74 65       	cmp    eax,0x65746e69
 10c:	6c                   	ins    BYTE PTR es:[edi],dx
 10d:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
 113:	65                   	gs
 114:	3d 67 65 6e 65       	cmp    eax,0x656e6567
 119:	72 69                	jb     184 <sysEnter_Vector-0x12fe7c>
 11b:	63 20                	arpl   WORD PTR [eax],sp
 11d:	2d 6d 61 72 63       	sub    eax,0x6372616d
 122:	68 3d 70 65 6e       	push   0x6e65703d
 127:	74 69                	je     192 <sysEnter_Vector-0x12fe6e>
 129:	75 6d                	jne    198 <sysEnter_Vector-0x12fe68>
 12b:	70 72                	jo     19f <sysEnter_Vector-0x12fe61>
 12d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 12e:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
 134:	66                   	data16
 135:	72 65                	jb     19c <sysEnter_Vector-0x12fe64>
 137:	65                   	gs
 138:	73 74                	jae    1ae <sysEnter_Vector-0x12fe52>
 13a:	61                   	popa   
 13b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 13c:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
 143:	76 
 144:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 14b:	74 79                	je     1c6 <sysEnter_Vector-0x12fe3a>
 14d:	3d 68 69 64 64       	cmp    eax,0x64646968
 152:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 154:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 15a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 15d:	61                   	popa   
 15e:	70 45                	jo     1a5 <sysEnter_Vector-0x12fe5b>
 160:	6e                   	outs   dx,BYTE PTR ds:[esi]
 161:	64 00 63 68          	add    BYTE PTR fs:[ebx+0x68],ah
 165:	61                   	popa   
 166:	72 73                	jb     1db <sysEnter_Vector-0x12fe25>
 168:	00 2e                	add    BYTE PTR [esi],ch
 16a:	2e                   	cs
 16b:	2f                   	das    
 16c:	2e                   	cs
 16d:	2e                   	cs
 16e:	2f                   	das    
 16f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 173:	6a 2f                	push   0x2f
 175:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 178:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 17f:	63 2f                	arpl   WORD PTR [edi],bp
 181:	73 74                	jae    1f7 <sysEnter_Vector-0x12fe09>
 183:	72 69                	jb     1ee <sysEnter_Vector-0x12fe12>
 185:	6e                   	outs   dx,BYTE PTR ds:[esi]
 186:	67 73 2f             	addr16 jae 1b8 <sysEnter_Vector-0x12fe48>
 189:	73 74                	jae    1ff <sysEnter_Vector-0x12fe01>
 18b:	72 63                	jb     1f0 <sysEnter_Vector-0x12fe10>
 18d:	73 70                	jae    1ff <sysEnter_Vector-0x12fe01>
 18f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 190:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 193:	73 74                	jae    209 <sysEnter_Vector-0x12fdf7>
 195:	72 63                	jb     1fa <sysEnter_Vector-0x12fe06>
 197:	73 70                	jae    209 <sysEnter_Vector-0x12fdf7>
 199:	6e                   	outs   dx,BYTE PTR ds:[esi]
 19a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 19d:	72 63                	jb     202 <sysEnter_Vector-0x12fdfe>
 19f:	73 70                	jae    211 <sysEnter_Vector-0x12fdef>
 1a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a2:	49                   	dec    ecx
 1a3:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1a7:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
 1ae:	2e                   	cs
 1af:	2f                   	das    
 1b0:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1b4:	6a 2f                	push   0x2f
 1b6:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1b9:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c0:	63 2f                	arpl   WORD PTR [edi],bp
 1c2:	73 74                	jae    238 <sysEnter_Vector-0x12fdc8>
 1c4:	72 69                	jb     22f <sysEnter_Vector-0x12fdd1>
 1c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1c7:	67 73 2f             	addr16 jae 1f9 <sysEnter_Vector-0x12fe07>
 1ca:	73 74                	jae    240 <sysEnter_Vector-0x12fdc0>
 1cc:	72 74                	jb     242 <sysEnter_Vector-0x12fdbe>
 1ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1cf:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d2:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1d6:	74 73                	je     24b <sysEnter_Vector-0x12fdb5>
 1d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1db:	72 74                	jb     251 <sysEnter_Vector-0x12fdaf>
 1dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1de:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 1e1:	74 6f                	je     252 <sysEnter_Vector-0x12fdae>
 1e3:	61                   	popa   
 1e4:	49                   	dec    ecx
 1e5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 1e8:	63 2f                	arpl   WORD PTR [edi],bp
 1ea:	61                   	popa   
 1eb:	73 63                	jae    250 <sysEnter_Vector-0x12fdb0>
 1ed:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f5:	61                   	popa   
 1f6:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
 1f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1fa:	69 00 72 65 76 65    	imul   eax,DWORD PTR [eax],0x65766572
 200:	72 73                	jb     275 <sysEnter_Vector-0x12fd8b>
 202:	65                   	gs
 203:	49                   	dec    ecx
 204:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 207:	67 6e                	outs   dx,BYTE PTR ds:[si]
 209:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 20c:	6c                   	ins    BYTE PTR es:[edi],dx
 20d:	75 65                	jne    274 <sysEnter_Vector-0x12fd8c>
 20f:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 213:	74 50                	je     265 <sysEnter_Vector-0x12fd9b>
 215:	6f                   	outs   dx,DWORD PTR ds:[esi]
 216:	70 75                	jo     28d <sysEnter_Vector-0x12fd73>
 218:	6c                   	ins    BYTE PTR es:[edi],dx
 219:	61                   	popa   
 21a:	74 65                	je     281 <sysEnter_Vector-0x12fd7f>
 21c:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 220:	74 65                	je     287 <sysEnter_Vector-0x12fd79>
 222:	6e                   	outs   dx,BYTE PTR ds:[esi]
 223:	76 00                	jbe    225 <sysEnter_Vector-0x12fddb>
 225:	67                   	addr16
 226:	65                   	gs
 227:	74 65                	je     28e <sysEnter_Vector-0x12fd72>
 229:	6e                   	outs   dx,BYTE PTR ds:[esi]
 22a:	76 00                	jbe    22c <sysEnter_Vector-0x12fdd4>
 22c:	73 72                	jae    2a0 <sysEnter_Vector-0x12fd60>
 22e:	63 2f                	arpl   WORD PTR [edi],bp
 230:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 232:	76 69                	jbe    29d <sysEnter_Vector-0x12fd63>
 234:	72 6f                	jb     2a5 <sysEnter_Vector-0x12fd5b>
 236:	6e                   	outs   dx,BYTE PTR ds:[esi]
 237:	6d                   	ins    DWORD PTR es:[edi],dx
 238:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 23a:	74 2e                	je     26a <sysEnter_Vector-0x12fd96>
 23c:	63 00                	arpl   WORD PTR [eax],ax
 23e:	76 61                	jbe    2a1 <sysEnter_Vector-0x12fd5f>
 240:	72 6e                	jb     2b0 <sysEnter_Vector-0x12fd50>
 242:	61                   	popa   
 243:	6d                   	ins    DWORD PTR es:[edi],dx
 244:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
 248:	74 64                	je     2ae <sysEnter_Vector-0x12fd52>
 24a:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
 251:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 255:	53                   	push   ebx
 256:	43                   	inc    ebx
 257:	41                   	inc    ecx
 258:	4c                   	dec    esp
 259:	4c                   	dec    esp
 25a:	5f                   	pop    edi
 25b:	52                   	push   edx
 25c:	45                   	inc    ebp
 25d:	41                   	inc    ecx
 25e:	44                   	inc    esp
 25f:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 262:	69 74 65 00 53 59 53 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x43535953
 269:	43 
 26a:	41                   	inc    ecx
 26b:	4c                   	dec    esp
 26c:	4c                   	dec    esp
 26d:	5f                   	pop    edi
 26e:	50                   	push   eax
 26f:	49                   	dec    ecx
 270:	50                   	push   eax
 271:	45                   	inc    ebp
 272:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 275:	53                   	push   ebx
 276:	43                   	inc    ebx
 277:	41                   	inc    ecx
 278:	4c                   	dec    esp
 279:	4c                   	dec    esp
 27a:	5f                   	pop    edi
 27b:	4f                   	dec    edi
 27c:	50                   	push   eax
 27d:	45                   	inc    ebp
 27e:	4e                   	dec    esi
 27f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 282:	53                   	push   ebx
 283:	43                   	inc    ebx
 284:	41                   	inc    ecx
 285:	4c                   	dec    esp
 286:	4c                   	dec    esp
 287:	5f                   	pop    edi
 288:	4d                   	dec    ebp
 289:	41                   	inc    ecx
 28a:	53                   	push   ebx
 28b:	4b                   	dec    ebx
 28c:	53                   	push   ebx
 28d:	49                   	dec    ecx
 28e:	47                   	inc    edi
 28f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 292:	53                   	push   ebx
 293:	43                   	inc    ebx
 294:	41                   	inc    ecx
 295:	4c                   	dec    esp
 296:	4c                   	dec    esp
 297:	5f                   	pop    edi
 298:	47                   	inc    edi
 299:	45                   	inc    ebp
 29a:	54                   	push   esp
 29b:	44                   	inc    esp
 29c:	45                   	inc    ebp
 29d:	4e                   	dec    esi
 29e:	54                   	push   esp
 29f:	53                   	push   ebx
 2a0:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 2a3:	63 2f                	arpl   WORD PTR [edi],bp
 2a5:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 2ac:	53                   	push   ebx
 2ad:	59                   	pop    ecx
 2ae:	53                   	push   ebx
 2af:	43                   	inc    ebx
 2b0:	41                   	inc    ecx
 2b1:	4c                   	dec    esp
 2b2:	4c                   	dec    esp
 2b3:	5f                   	pop    edi
 2b4:	52                   	push   edx
 2b5:	45                   	inc    ebp
 2b6:	42                   	inc    edx
 2b7:	4f                   	dec    edi
 2b8:	4f                   	dec    edi
 2b9:	54                   	push   esp
 2ba:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2bd:	53                   	push   ebx
 2be:	43                   	inc    ebx
 2bf:	41                   	inc    ecx
 2c0:	4c                   	dec    esp
 2c1:	4c                   	dec    esp
 2c2:	5f                   	pop    edi
 2c3:	48                   	dec    eax
 2c4:	4c                   	dec    esp
 2c5:	54                   	push   esp
 2c6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2c9:	53                   	push   ebx
 2ca:	43                   	inc    ebx
 2cb:	41                   	inc    ecx
 2cc:	4c                   	dec    esp
 2cd:	4c                   	dec    esp
 2ce:	5f                   	pop    edi
 2cf:	45                   	inc    ebp
 2d0:	58                   	pop    eax
 2d1:	45                   	inc    ebp
 2d2:	43                   	inc    ebx
 2d3:	4e                   	dec    esi
 2d4:	45                   	inc    ebp
 2d5:	57                   	push   edi
 2d6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2d9:	53                   	push   ebx
 2da:	43                   	inc    ebx
 2db:	41                   	inc    ecx
 2dc:	4c                   	dec    esp
 2dd:	4c                   	dec    esp
 2de:	5f                   	pop    edi
 2df:	53                   	push   ebx
 2e0:	4c                   	dec    esp
 2e1:	45                   	inc    ebp
 2e2:	45                   	inc    ebp
 2e3:	50                   	push   eax
 2e4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e7:	53                   	push   ebx
 2e8:	43                   	inc    ebx
 2e9:	41                   	inc    ecx
 2ea:	4c                   	dec    esp
 2eb:	4c                   	dec    esp
 2ec:	5f                   	pop    edi
 2ed:	47                   	inc    edi
 2ee:	45                   	inc    ebp
 2ef:	54                   	push   esp
 2f0:	54                   	push   esp
 2f1:	49                   	dec    ecx
 2f2:	4d                   	dec    ebp
 2f3:	45                   	inc    ebp
 2f4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2f7:	53                   	push   ebx
 2f8:	43                   	inc    ebx
 2f9:	41                   	inc    ecx
 2fa:	4c                   	dec    esp
 2fb:	4c                   	dec    esp
 2fc:	5f                   	pop    edi
 2fd:	53                   	push   ebx
 2fe:	45                   	inc    ebp
 2ff:	54                   	push   esp
 300:	50                   	push   eax
 301:	52                   	push   edx
 302:	49                   	dec    ecx
 303:	4f                   	dec    edi
 304:	52                   	push   edx
 305:	49                   	dec    ecx
 306:	54                   	push   esp
 307:	59                   	pop    ecx
 308:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 30b:	53                   	push   ebx
 30c:	43                   	inc    ebx
 30d:	41                   	inc    ecx
 30e:	4c                   	dec    esp
 30f:	4c                   	dec    esp
 310:	5f                   	pop    edi
 311:	43                   	inc    ebx
 312:	4c                   	dec    esp
 313:	4f                   	dec    edi
 314:	53                   	push   ebx
 315:	45                   	inc    ebp
 316:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 319:	79 73                	jns    38e <sysEnter_Vector-0x12fc72>
 31b:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 31e:	6c                   	ins    BYTE PTR es:[edi],dx
 31f:	73 00                	jae    321 <sysEnter_Vector-0x12fcdf>
 321:	6c                   	ins    BYTE PTR es:[edi],dx
 322:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 324:	67 74 68             	addr16 je 38f <sysEnter_Vector-0x12fc71>
 327:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 32a:	61                   	popa   
 32b:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 32f:	53                   	push   ebx
 330:	43                   	inc    ebx
 331:	41                   	inc    ecx
 332:	4c                   	dec    esp
 333:	4c                   	dec    esp
 334:	5f                   	pop    edi
 335:	46                   	inc    esi
 336:	4f                   	dec    edi
 337:	52                   	push   edx
 338:	4b                   	dec    ebx
 339:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 33c:	53                   	push   ebx
 33d:	43                   	inc    ebx
 33e:	41                   	inc    ecx
 33f:	4c                   	dec    esp
 340:	4c                   	dec    esp
 341:	5f                   	pop    edi
 342:	53                   	push   ebx
 343:	54                   	push   esp
 344:	4f                   	dec    edi
 345:	50                   	push   eax
 346:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 349:	53                   	push   ebx
 34a:	43                   	inc    ebx
 34b:	41                   	inc    ecx
 34c:	4c                   	dec    esp
 34d:	4c                   	dec    esp
 34e:	5f                   	pop    edi
 34f:	50                   	push   eax
 350:	52                   	push   edx
 351:	49                   	dec    ecx
 352:	4e                   	dec    esi
 353:	54                   	push   esp
 354:	44                   	inc    esp
 355:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 358:	66                   	data16
 359:	66                   	data16
 35a:	65                   	gs
 35b:	72 43                	jb     3a0 <sysEnter_Vector-0x12fc60>
 35d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 35e:	75 6e                	jne    3ce <sysEnter_Vector-0x12fc32>
 360:	74 00                	je     362 <sysEnter_Vector-0x12fc9e>
 362:	53                   	push   ebx
 363:	59                   	pop    ecx
 364:	53                   	push   ebx
 365:	43                   	inc    ebx
 366:	41                   	inc    ecx
 367:	4c                   	dec    esp
 368:	4c                   	dec    esp
 369:	5f                   	pop    edi
 36a:	46                   	inc    esi
 36b:	52                   	push   edx
 36c:	45                   	inc    ebp
 36d:	45                   	inc    ebp
 36e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 371:	53                   	push   ebx
 372:	43                   	inc    ebx
 373:	41                   	inc    ecx
 374:	4c                   	dec    esp
 375:	4c                   	dec    esp
 376:	5f                   	pop    edi
 377:	45                   	inc    ebp
 378:	58                   	pop    eax
 379:	45                   	inc    ebp
 37a:	43                   	inc    ebx
 37b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 37e:	53                   	push   ebx
 37f:	43                   	inc    ebx
 380:	41                   	inc    ecx
 381:	4c                   	dec    esp
 382:	4c                   	dec    esp
 383:	5f                   	pop    edi
 384:	49                   	dec    ecx
 385:	4e                   	dec    esi
 386:	56                   	push   esi
 387:	41                   	inc    ecx
 388:	4c                   	dec    esp
 389:	49                   	dec    ecx
 38a:	44                   	inc    esp
 38b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 38e:	53                   	push   ebx
 38f:	43                   	inc    ebx
 390:	41                   	inc    ecx
 391:	4c                   	dec    esp
 392:	4c                   	dec    esp
 393:	5f                   	pop    edi
 394:	52                   	push   edx
 395:	45                   	inc    ebp
 396:	47                   	inc    edi
 397:	45                   	inc    ebp
 398:	58                   	pop    eax
 399:	49                   	dec    ecx
 39a:	54                   	push   esp
 39b:	48                   	dec    eax
 39c:	41                   	inc    ecx
 39d:	4e                   	dec    esi
 39e:	44                   	inc    esp
 39f:	4c                   	dec    esp
 3a0:	45                   	inc    ebp
 3a1:	52                   	push   edx
 3a2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3a5:	53                   	push   ebx
 3a6:	43                   	inc    ebx
 3a7:	41                   	inc    ecx
 3a8:	4c                   	dec    esp
 3a9:	4c                   	dec    esp
 3aa:	5f                   	pop    edi
 3ab:	47                   	inc    edi
 3ac:	45                   	inc    ebp
 3ad:	54                   	push   esp
 3ae:	54                   	push   esp
 3af:	49                   	dec    ecx
 3b0:	43                   	inc    ebx
 3b1:	4b                   	dec    ebx
 3b2:	53                   	push   ebx
 3b3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3b6:	53                   	push   ebx
 3b7:	43                   	inc    ebx
 3b8:	41                   	inc    ecx
 3b9:	4c                   	dec    esp
 3ba:	4c                   	dec    esp
 3bb:	5f                   	pop    edi
 3bc:	45                   	inc    ebp
 3bd:	4e                   	dec    esi
 3be:	44                   	inc    esp
 3bf:	50                   	push   eax
 3c0:	52                   	push   edx
 3c1:	4f                   	dec    edi
 3c2:	43                   	inc    ebx
 3c3:	45                   	inc    ebp
 3c4:	53                   	push   ebx
 3c5:	53                   	push   ebx
 3c6:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 3c9:	66                   	data16
 3ca:	66                   	data16
 3cb:	65                   	gs
 3cc:	72 00                	jb     3ce <sysEnter_Vector-0x12fc32>
 3ce:	53                   	push   ebx
 3cf:	59                   	pop    ecx
 3d0:	53                   	push   ebx
 3d1:	43                   	inc    ebx
 3d2:	41                   	inc    ecx
 3d3:	4c                   	dec    esp
 3d4:	4c                   	dec    esp
 3d5:	5f                   	pop    edi
 3d6:	57                   	push   edi
 3d7:	52                   	push   edx
 3d8:	49                   	dec    ecx
 3d9:	54                   	push   esp
 3da:	45                   	inc    ebp
 3db:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3de:	53                   	push   ebx
 3df:	43                   	inc    ebx
 3e0:	41                   	inc    ecx
 3e1:	4c                   	dec    esp
 3e2:	4c                   	dec    esp
 3e3:	5f                   	pop    edi
 3e4:	50                   	push   eax
 3e5:	52                   	push   edx
 3e6:	49                   	dec    ecx
 3e7:	4e                   	dec    esi
 3e8:	54                   	push   esp
 3e9:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 3ec:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3ed:	64                   	fs
 3ee:	6c                   	ins    BYTE PTR es:[edi],dx
 3ef:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 3f3:	53                   	push   ebx
 3f4:	43                   	inc    ebx
 3f5:	41                   	inc    ecx
 3f6:	4c                   	dec    esp
 3f7:	4c                   	dec    esp
 3f8:	5f                   	pop    edi
 3f9:	41                   	inc    ecx
 3fa:	4c                   	dec    esp
 3fb:	4c                   	dec    esp
 3fc:	4f                   	dec    edi
 3fd:	43                   	inc    ebx
 3fe:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 401:	53                   	push   ebx
 402:	43                   	inc    ebx
 403:	41                   	inc    ecx
 404:	4c                   	dec    esp
 405:	4c                   	dec    esp
 406:	5f                   	pop    edi
 407:	47                   	inc    edi
 408:	45                   	inc    ebp
 409:	54                   	push   esp
 40a:	43                   	inc    ebx
 40b:	57                   	push   edi
 40c:	44                   	inc    esp
 40d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 410:	53                   	push   ebx
 411:	43                   	inc    ebx
 412:	41                   	inc    ecx
 413:	4c                   	dec    esp
 414:	4c                   	dec    esp
 415:	5f                   	pop    edi
 416:	57                   	push   edi
 417:	41                   	inc    ecx
 418:	49                   	dec    ecx
 419:	54                   	push   esp
 41a:	46                   	inc    esi
 41b:	4f                   	dec    edi
 41c:	52                   	push   edx
 41d:	50                   	push   eax
 41e:	49                   	dec    ecx
 41f:	44                   	inc    esp
 420:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
 423:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 425:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 428:	53                   	push   ebx
 429:	43                   	inc    ebx
 42a:	41                   	inc    ecx
 42b:	4c                   	dec    esp
 42c:	4c                   	dec    esp
 42d:	5f                   	pop    edi
 42e:	53                   	push   ebx
 42f:	45                   	inc    ebp
 430:	54                   	push   esp
 431:	53                   	push   ebx
 432:	49                   	dec    ecx
 433:	47                   	inc    edi
 434:	41                   	inc    ecx
 435:	43                   	inc    ebx
 436:	54                   	push   esp
 437:	49                   	dec    ecx
 438:	4f                   	dec    edi
 439:	4e                   	dec    esi
 43a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 43d:	72 65                	jb     4a4 <sysEnter_Vector-0x12fb5c>
 43f:	61                   	popa   
 440:	6d                   	ins    DWORD PTR es:[edi],dx
 441:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 444:	74 73                	je     4b9 <sysEnter_Vector-0x12fb47>
 446:	45                   	inc    ebp
 447:	72 72                	jb     4bb <sysEnter_Vector-0x12fb45>
 449:	6f                   	outs   dx,DWORD PTR ds:[esi]
 44a:	72 00                	jb     44c <sysEnter_Vector-0x12fbb4>
 44c:	6c                   	ins    BYTE PTR es:[edi],dx
 44d:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 450:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 453:	63 2f                	arpl   WORD PTR [edi],bp
 455:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 45c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 45d:	70 75                	jo     4d4 <sysEnter_Vector-0x12fb2c>
 45f:	74 2e                	je     48f <sysEnter_Vector-0x12fb71>
 461:	63 00                	arpl   WORD PTR [eax],ax
 463:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 46a:	67                   	addr16
 46b:	65                   	gs
 46c:	74 63                	je     4d1 <sysEnter_Vector-0x12fb2f>
 46e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 471:	78 6c                	js     4df <sysEnter_Vector-0x12fb21>
 473:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 475:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 478:	74 73                	je     4ed <sysEnter_Vector-0x12fb13>
 47a:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 47d:	74 63                	je     4e2 <sysEnter_Vector-0x12fb1e>
 47f:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 482:	74 73                	je     4f7 <sysEnter_Vector-0x12fb09>
 484:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 487:	74 56                	je     4df <sysEnter_Vector-0x12fb21>
 489:	61                   	popa   
 48a:	6c                   	ins    BYTE PTR es:[edi],dx
 48b:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 48e:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
 495:	74 53                	je     4ea <sysEnter_Vector-0x12fb16>
 497:	70 61                	jo     4fa <sysEnter_Vector-0x12fb06>
 499:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 49c:	74 72                	je     510 <sysEnter_Vector-0x12faf0>
 49e:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 4a1:	7a 65                	jp     508 <sysEnter_Vector-0x12faf8>
 4a3:	5f                   	pop    edi
 4a4:	74 00                	je     4a6 <sysEnter_Vector-0x12fb5a>
 4a6:	75 69                	jne    511 <sysEnter_Vector-0x12faef>
 4a8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4a9:	74 70                	je     51b <sysEnter_Vector-0x12fae5>
 4ab:	74 72                	je     51f <sysEnter_Vector-0x12fae1>
 4ad:	5f                   	pop    edi
 4ae:	74 00                	je     4b0 <sysEnter_Vector-0x12fb50>
 4b0:	73 69                	jae    51b <sysEnter_Vector-0x12fae5>
 4b2:	67 44                	addr16 inc esp
 4b4:	61                   	popa   
 4b5:	74 61                	je     518 <sysEnter_Vector-0x12fae8>
 4b7:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 4ba:	69 6e 74 66 00 61 72 	imul   ebp,DWORD PTR [esi+0x74],0x72610066
 4c1:	67 76 50             	addr16 jbe 514 <sysEnter_Vector-0x12faec>
 4c4:	74 72                	je     538 <sysEnter_Vector-0x12fac8>
 4c6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 4c9:	61                   	popa   
 4ca:	72 74                	jb     540 <sysEnter_Vector-0x12fac0>
 4cc:	5f                   	pop    edi
 4cd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4ce:	66 5f                	pop    di
 4d0:	77 6f                	ja     541 <sysEnter_Vector-0x12fabf>
 4d2:	72 64                	jb     538 <sysEnter_Vector-0x12fac8>
 4d4:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 4d7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4d8:	67 72 61             	addr16 jb 53c <sysEnter_Vector-0x12fac4>
 4db:	6d                   	ins    DWORD PTR es:[edi],dx
 4dc:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 4e0:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 4e3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4e4:	69 74 00 73 74 61 74 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x65746174
 4eb:	65 
 4ec:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 4ef:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 4f2:	6c                   	ins    BYTE PTR es:[edi],dx
 4f3:	74 69                	je     55e <sysEnter_Vector-0x12faa2>
 4f5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4f6:	5f                   	pop    edi
 4f7:	76 61                	jbe    55a <sysEnter_Vector-0x12faa6>
 4f9:	5f                   	pop    edi
 4fa:	6c                   	ins    BYTE PTR es:[edi],dx
 4fb:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
 502:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
 509:	00 
 50a:	73 70                	jae    57c <sysEnter_Vector-0x12fa84>
 50c:	61                   	popa   
 50d:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 510:	74 72                	je     584 <sysEnter_Vector-0x12fa7c>
 512:	00 63 6d             	add    BYTE PTR [ebx+0x6d],ah
 515:	64                   	fs
 516:	6c                   	ins    BYTE PTR es:[edi],dx
 517:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 51e:	67 76 00             	addr16 jbe 521 <sysEnter_Vector-0x12fadf>
 521:	77 61                	ja     584 <sysEnter_Vector-0x12fa7c>
 523:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 52a:	65 
 52b:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 52e:	4c                   	dec    esp
 52f:	65                   	gs
 530:	76 65                	jbe    597 <sysEnter_Vector-0x12fa69>
 532:	6c                   	ins    BYTE PTR es:[edi],dx
 533:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 536:	6c                   	ins    BYTE PTR es:[edi],dx
 537:	6c                   	ins    BYTE PTR es:[edi],dx
 538:	6e                   	outs   dx,BYTE PTR ds:[esi]
 539:	75 6d                	jne    5a8 <sysEnter_Vector-0x12fa58>
 53b:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 53e:	65                   	gs
 53f:	65                   	gs
 540:	70 00                	jo     542 <sysEnter_Vector-0x12fabe>
 542:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 545:	6c                   	ins    BYTE PTR es:[edi],dx
 546:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 54d:	67 76 49             	addr16 jbe 599 <sysEnter_Vector-0x12fa67>
 550:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
 554:	73 79                	jae    5cf <sysEnter_Vector-0x12fa31>
 556:	73 63                	jae    5bb <sysEnter_Vector-0x12fa45>
 558:	61                   	popa   
 559:	6c                   	ins    BYTE PTR es:[edi],dx
 55a:	6c                   	ins    BYTE PTR es:[edi],dx
 55b:	30 00                	xor    BYTE PTR [eax],al
 55d:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 55f:	5f                   	pop    edi
 560:	73 79                	jae    5db <sysEnter_Vector-0x12fa25>
 562:	73 63                	jae    5c7 <sysEnter_Vector-0x12fa39>
 564:	61                   	popa   
 565:	6c                   	ins    BYTE PTR es:[edi],dx
 566:	6c                   	ins    BYTE PTR es:[edi],dx
 567:	31 00                	xor    DWORD PTR [eax],eax
 569:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 56b:	5f                   	pop    edi
 56c:	73 79                	jae    5e7 <sysEnter_Vector-0x12fa19>
 56e:	73 63                	jae    5d3 <sysEnter_Vector-0x12fa2d>
 570:	61                   	popa   
 571:	6c                   	ins    BYTE PTR es:[edi],dx
 572:	6c                   	ins    BYTE PTR es:[edi],dx
 573:	32 00                	xor    al,BYTE PTR [eax]
 575:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 577:	5f                   	pop    edi
 578:	73 79                	jae    5f3 <sysEnter_Vector-0x12fa0d>
 57a:	73 63                	jae    5df <sysEnter_Vector-0x12fa21>
 57c:	61                   	popa   
 57d:	6c                   	ins    BYTE PTR es:[edi],dx
 57e:	6c                   	ins    BYTE PTR es:[edi],dx
 57f:	33 00                	xor    eax,DWORD PTR [eax]
 581:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 583:	5f                   	pop    edi
 584:	73 79                	jae    5ff <sysEnter_Vector-0x12fa01>
 586:	73 63                	jae    5eb <sysEnter_Vector-0x12fa15>
 588:	61                   	popa   
 589:	6c                   	ins    BYTE PTR es:[edi],dx
 58a:	6c                   	ins    BYTE PTR es:[edi],dx
 58b:	34 00                	xor    al,0x0
 58d:	49                   	dec    ecx
 58e:	4e                   	dec    esi
 58f:	5f                   	pop    edi
 590:	57                   	push   edi
 591:	4f                   	dec    edi
 592:	52                   	push   edx
 593:	44                   	inc    esp
 594:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 597:	67 76 5f             	addr16 jbe 5f9 <sysEnter_Vector-0x12fa07>
 59a:	73 69                	jae    605 <sysEnter_Vector-0x12f9fb>
 59c:	7a 65                	jp     603 <sysEnter_Vector-0x12f9fd>
 59e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 5a2:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
 5a5:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
 5ac:	65 
 5ad:	64 00 69 73          	add    BYTE PTR fs:[ecx+0x73],ch
 5b1:	73 70                	jae    623 <sysEnter_Vector-0x12f9dd>
 5b3:	61                   	popa   
 5b4:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 5b7:	5f                   	pop    edi
 5b8:	5f                   	pop    edi
 5b9:	67 6e                	outs   dx,BYTE PTR ds:[si]
 5bb:	75 63                	jne    620 <sysEnter_Vector-0x12f9e0>
 5bd:	5f                   	pop    edi
 5be:	76 61                	jbe    621 <sysEnter_Vector-0x12f9df>
 5c0:	5f                   	pop    edi
 5c1:	6c                   	ins    BYTE PTR es:[edi],dx
 5c2:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 5c9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5ca:	74 64                	je     630 <sysEnter_Vector-0x12f9d0>
 5cc:	49                   	dec    ecx
 5cd:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 5d0:	72 61                	jb     633 <sysEnter_Vector-0x12f9cd>
 5d2:	6d                   	ins    DWORD PTR es:[edi],dx
 5d3:	31 00                	xor    DWORD PTR [eax],eax
 5d5:	70 61                	jo     638 <sysEnter_Vector-0x12f9c8>
 5d7:	72 61                	jb     63a <sysEnter_Vector-0x12f9c6>
 5d9:	6d                   	ins    DWORD PTR es:[edi],dx
 5da:	32 00                	xor    al,BYTE PTR [eax]
 5dc:	70 61                	jo     63f <sysEnter_Vector-0x12f9c1>
 5de:	72 61                	jb     641 <sysEnter_Vector-0x12f9bf>
 5e0:	6d                   	ins    DWORD PTR es:[edi],dx
 5e1:	33 00                	xor    eax,DWORD PTR [eax]
 5e3:	70 61                	jo     646 <sysEnter_Vector-0x12f9ba>
 5e5:	72 61                	jb     648 <sysEnter_Vector-0x12f9b8>
 5e7:	6d                   	ins    DWORD PTR es:[edi],dx
 5e8:	34 00                	xor    al,0x0
 5ea:	65                   	gs
 5eb:	78 65                	js     652 <sysEnter_Vector-0x12f9ae>
 5ed:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
 5f0:	65                   	gs
 5f1:	78 65                	js     658 <sysEnter_Vector-0x12f9a8>
 5f3:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
 5f6:	66 6f                	outs   dx,WORD PTR ds:[esi]
 5f8:	72 6d                	jb     667 <sysEnter_Vector-0x12f999>
 5fa:	61                   	popa   
 5fb:	74 00                	je     5fd <sysEnter_Vector-0x12fa03>
 5fd:	73 69                	jae    668 <sysEnter_Vector-0x12f998>
 5ff:	67 6e                	outs   dx,BYTE PTR ds:[si]
 601:	61                   	popa   
 602:	6c                   	ins    BYTE PTR es:[edi],dx
 603:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 606:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 609:	5f                   	pop    edi
 60a:	5f                   	pop    edi
 60b:	73 65                	jae    672 <sysEnter_Vector-0x12f98e>
 60d:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 610:	64                   	fs
 611:	73 00                	jae    613 <sysEnter_Vector-0x12f9ed>
 613:	44                   	inc    esp
 614:	55                   	push   ebp
 615:	4c                   	dec    esp
 616:	4c                   	dec    esp
 617:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 61a:	61                   	popa   
 61b:	74 65                	je     682 <sysEnter_Vector-0x12f97e>
 61d:	73 00                	jae    61f <sysEnter_Vector-0x12f9e1>
 61f:	49                   	dec    ecx
 620:	4e                   	dec    esi
 621:	5f                   	pop    edi
 622:	53                   	push   ebx
 623:	54                   	push   esp
 624:	52                   	push   edx
 625:	49                   	dec    ecx
 626:	4e                   	dec    esi
 627:	47                   	inc    edi
 628:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 62b:	63 2f                	arpl   WORD PTR [edi],bp
 62d:	6c                   	ins    BYTE PTR es:[edi],dx
 62e:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 635:	4f                   	dec    edi
 636:	53                   	push   ebx
 637:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 63a:	61                   	popa   
 63b:	72 67                	jb     6a4 <sysEnter_Vector-0x12f95c>
 63d:	63 00                	arpl   WORD PTR [eax],ax
 63f:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 642:	6c                   	ins    BYTE PTR es:[edi],dx
 643:	69 6e 65 00 73 70 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c707300
 64a:	69 74 49 00 6c 69 62 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x6362696c
 651:	63 
 652:	5f                   	pop    edi
 653:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
 657:	6e                   	outs   dx,BYTE PTR ds:[esi]
 658:	75 70                	jne    6ca <sysEnter_Vector-0x12f936>
 65a:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 65d:	67 76 00             	addr16 jbe 660 <sysEnter_Vector-0x12f9a0>
 660:	65                   	gs
 661:	78 69                	js     6cc <sysEnter_Vector-0x12f934>
 663:	74 00                	je     665 <sysEnter_Vector-0x12f99b>
 665:	73 74                	jae    6db <sysEnter_Vector-0x12f925>
 667:	61                   	popa   
 668:	74 75                	je     6df <sysEnter_Vector-0x12f921>
 66a:	73 00                	jae    66c <sysEnter_Vector-0x12f994>
 66c:	73 69                	jae    6d7 <sysEnter_Vector-0x12f929>
 66e:	67 48                	addr16 dec eax
 670:	61                   	popa   
 671:	6e                   	outs   dx,BYTE PTR ds:[esi]
 672:	64                   	fs
 673:	6c                   	ins    BYTE PTR es:[edi],dx
 674:	65                   	gs
 675:	72 00                	jb     677 <sysEnter_Vector-0x12f989>
 677:	6d                   	ins    DWORD PTR es:[edi],dx
 678:	6f                   	outs   dx,DWORD PTR ds:[esi]
 679:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 680:	6e 
 681:	61                   	popa   
 682:	6c                   	ins    BYTE PTR es:[edi],dx
 683:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 686:	67 73 00             	addr16 jae 689 <sysEnter_Vector-0x12f977>
 689:	70 72                	jo     6fd <sysEnter_Vector-0x12f903>
 68b:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 692:	6f                   	outs   dx,DWORD PTR ds:[esi]
 693:	70 00                	jo     695 <sysEnter_Vector-0x12f96b>
 695:	67                   	addr16
 696:	65                   	gs
 697:	74 63                	je     6fc <sysEnter_Vector-0x12f904>
 699:	77 64                	ja     6ff <sysEnter_Vector-0x12f901>
 69b:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 69e:	6c                   	ins    BYTE PTR es:[edi],dx
 69f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6a0:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 6a3:	65                   	gs
 6a4:	64                   	fs
 6a5:	50                   	push   eax
 6a6:	74 72                	je     71a <sysEnter_Vector-0x12f8e6>
 6a8:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 6ab:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6ac:	69 6e 74 65 72 00 6e 	imul   ebp,DWORD PTR [esi+0x74],0x6e007265
 6b3:	65                   	gs
 6b4:	77 53                	ja     709 <sysEnter_Vector-0x12f8f7>
 6b6:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 6bd:	6c                   	ins    BYTE PTR es:[edi],dx
 6be:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6bf:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 6c2:	6c                   	ins    BYTE PTR es:[edi],dx
 6c3:	65                   	gs
 6c4:	61                   	popa   
 6c5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6c6:	75 70                	jne    738 <sysEnter_Vector-0x12f8c8>
 6c8:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 6cb:	72 6b                	jb     738 <sysEnter_Vector-0x12f8c8>
 6cd:	65                   	gs
 6ce:	72 00                	jb     6d0 <sysEnter_Vector-0x12f930>
 6d0:	6d                   	ins    DWORD PTR es:[edi],dx
 6d1:	61                   	popa   
 6d2:	6c                   	ins    BYTE PTR es:[edi],dx
 6d3:	6c                   	ins    BYTE PTR es:[edi],dx
 6d4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6d5:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 6d8:	68 65 61 70 50       	push   0x50706165
 6dd:	74 72                	je     751 <sysEnter_Vector-0x12f8af>
 6df:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 6e2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6e3:	74 38                	je     71d <sysEnter_Vector-0x12f8e3>
 6e5:	5f                   	pop    edi
 6e6:	74 00                	je     6e8 <sysEnter_Vector-0x12f918>
 6e8:	66                   	data16
 6e9:	72 65                	jb     750 <sysEnter_Vector-0x12f8b0>
 6eb:	65 00 6e 65          	add    BYTE PTR gs:[esi+0x65],ch
 6ef:	65 64 65 64 00 73 68 	gs fs gs add BYTE PTR fs:gs:[ebx+0x68],dh
 6f6:	65                   	gs
 6f7:	61                   	popa   
 6f8:	70 00                	jo     6fa <sysEnter_Vector-0x12f906>
 6fa:	69 6e 55 73 65 00 69 	imul   ebp,DWORD PTR [esi+0x55],0x69006573
 701:	6e                   	outs   dx,BYTE PTR ds:[esi]
 702:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
 709:	63 
 70a:	00 67 6f             	add    BYTE PTR [edi+0x6f],ah
 70d:	74 6f                	je     77e <sysEnter_Vector-0x12f882>
 70f:	48                   	dec    eax
 710:	65                   	gs
 711:	72 65                	jb     778 <sysEnter_Vector-0x12f888>
 713:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 716:	61                   	popa   
 717:	70 50                	jo     769 <sysEnter_Vector-0x12f897>
 719:	74 72                	je     78d <sysEnter_Vector-0x12f873>
 71b:	4e                   	dec    esi
 71c:	65                   	gs
 71d:	78 74                	js     793 <sysEnter_Vector-0x12f86d>
 71f:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 722:	77 48                	ja     76c <sysEnter_Vector-0x12f894>
 724:	65                   	gs
 725:	61                   	popa   
 726:	70 52                	jo     77a <sysEnter_Vector-0x12f886>
 728:	65                   	gs
 729:	71 75                	jno    7a0 <sysEnter_Vector-0x12f860>
 72b:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 732:	75 6c                	jne    7a0 <sysEnter_Vector-0x12f860>
 734:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 73b:	75 65                	jne    7a2 <sysEnter_Vector-0x12f85e>
 73d:	73 74                	jae    7b3 <sysEnter_Vector-0x12f84d>
 73f:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 742:	63 2f                	arpl   WORD PTR [edi],bp
 744:	6d                   	ins    DWORD PTR es:[edi],dx
 745:	61                   	popa   
 746:	6c                   	ins    BYTE PTR es:[edi],dx
 747:	6c                   	ins    BYTE PTR es:[edi],dx
 748:	6f                   	outs   dx,DWORD PTR ds:[esi]
 749:	63 2e                	arpl   WORD PTR [esi],bp
 74b:	63 00                	arpl   WORD PTR [eax],ax
 74d:	66                   	data16
 74e:	72 65                	jb     7b5 <sysEnter_Vector-0x12f84b>
 750:	65                   	gs
 751:	49                   	dec    ecx
 752:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 755:	65                   	gs
 756:	76 00                	jbe    758 <sysEnter_Vector-0x12f8a8>
 758:	68 65 61 70 72       	push   0x72706165
 75d:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 761:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 764:	63 2f                	arpl   WORD PTR [edi],bp
 766:	6d                   	ins    DWORD PTR es:[edi],dx
 767:	65                   	gs
 768:	6d                   	ins    DWORD PTR es:[edi],dx
 769:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 76c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 76f:	64                   	fs
 770:	65                   	gs
 771:	73 74                	jae    7e7 <sysEnter_Vector-0x12f819>
 773:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 776:	6d                   	ins    DWORD PTR es:[edi],dx
 777:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 77a:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 77d:	61                   	popa   
 77e:	6c                   	ins    BYTE PTR es:[edi],dx
 77f:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 782:	6d                   	ins    DWORD PTR es:[edi],dx
 783:	73 65                	jae    7ea <sysEnter_Vector-0x12f816>
 785:	74 00                	je     787 <sysEnter_Vector-0x12f879>
 787:	73 72                	jae    7fb <sysEnter_Vector-0x12f805>
 789:	63 2f                	arpl   WORD PTR [edi],bp
 78b:	6d                   	ins    DWORD PTR es:[edi],dx
 78c:	65                   	gs
 78d:	6d                   	ins    DWORD PTR es:[edi],dx
 78e:	73 65                	jae    7f5 <sysEnter_Vector-0x12f80b>
 790:	74 2e                	je     7c0 <sysEnter_Vector-0x12f840>
 792:	63 00                	arpl   WORD PTR [eax],ax
 794:	66 56                	push   si
 796:	61                   	popa   
 797:	6c                   	ins    BYTE PTR es:[edi],dx
 798:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 79b:	6d                   	ins    DWORD PTR es:[edi],dx
 79c:	73 65                	jae    803 <sysEnter_Vector-0x12f7fd>
 79e:	74 49                	je     7e9 <sysEnter_Vector-0x12f817>
 7a0:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 7a3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7a4:	74 31                	je     7d7 <sysEnter_Vector-0x12f829>
 7a6:	36                   	ss
 7a7:	5f                   	pop    edi
 7a8:	74 00                	je     7aa <sysEnter_Vector-0x12f856>
 7aa:	73 72                	jae    81e <sysEnter_Vector-0x12f7e2>
 7ac:	63 2f                	arpl   WORD PTR [edi],bp
 7ae:	6d                   	ins    DWORD PTR es:[edi],dx
 7af:	6d                   	ins    DWORD PTR es:[edi],dx
 7b0:	61                   	popa   
 7b1:	70 2e                	jo     7e1 <sysEnter_Vector-0x12f81f>
 7b3:	63 00                	arpl   WORD PTR [eax],ax
 7b5:	73 72                	jae    829 <sysEnter_Vector-0x12f7d7>
 7b7:	63 2f                	arpl   WORD PTR [edi],bp
 7b9:	70 69                	jo     824 <sysEnter_Vector-0x12f7dc>
 7bb:	70 65                	jo     822 <sysEnter_Vector-0x12f7de>
 7bd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 7c0:	70 69                	jo     82b <sysEnter_Vector-0x12f7d5>
 7c2:	70 65                	jo     829 <sysEnter_Vector-0x12f7d7>
 7c4:	00 70 69             	add    BYTE PTR [eax+0x69],dh
 7c7:	70 65                	jo     82e <sysEnter_Vector-0x12f7d2>
 7c9:	66                   	data16
 7ca:	64 00 73 5f          	add    BYTE PTR fs:[ebx+0x5f],dh
 7ce:	64                   	fs
 7cf:	65                   	gs
 7d0:	76 00                	jbe    7d2 <sysEnter_Vector-0x12f82e>
 7d2:	75 69                	jne    83d <sysEnter_Vector-0x12f7c3>
 7d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7d5:	74 36                	je     80d <sysEnter_Vector-0x12f7f3>
 7d7:	34 5f                	xor    al,0x5f
 7d9:	74 00                	je     7db <sysEnter_Vector-0x12f825>
 7db:	6d                   	ins    DWORD PTR es:[edi],dx
 7dc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7dd:	74 5f                	je     83e <sysEnter_Vector-0x12f7c2>
 7df:	66                   	data16
 7e0:	6c                   	ins    BYTE PTR es:[edi],dx
 7e1:	61                   	popa   
 7e2:	67 73 00             	addr16 jae 7e5 <sysEnter_Vector-0x12f81b>
 7e5:	6d                   	ins    DWORD PTR es:[edi],dx
 7e6:	6b 6e 6f 64          	imul   ebp,DWORD PTR [esi+0x6f],0x64
 7ea:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 7ed:	78 74                	js     863 <sysEnter_Vector-0x12f79d>
 7ef:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 7f2:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 7f9:	66 
 7fa:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 7fd:	74 5f                	je     85e <sysEnter_Vector-0x12f7a2>
 7ff:	73 62                	jae    863 <sysEnter_Vector-0x12f79d>
 801:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 804:	6c                   	ins    BYTE PTR es:[edi],dx
 805:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 80c:	65                   	gs
 80d:	72 5f                	jb     86e <sysEnter_Vector-0x12f792>
 80f:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 813:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 816:	5f                   	pop    edi
 817:	76 66                	jbe    87f <sysEnter_Vector-0x12f781>
 819:	73 6d                	jae    888 <sysEnter_Vector-0x12f778>
 81b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 81c:	75 6e                	jne    88c <sysEnter_Vector-0x12f774>
 81e:	74 00                	je     820 <sysEnter_Vector-0x12f7e0>
 820:	72 65                	jb     887 <sysEnter_Vector-0x12f779>
 822:	6e                   	outs   dx,BYTE PTR ds:[esi]
 823:	61                   	popa   
 824:	6d                   	ins    DWORD PTR es:[edi],dx
 825:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 82a:	61                   	popa   
 82b:	6d                   	ins    DWORD PTR es:[edi],dx
 82c:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 830:	63 2f                	arpl   WORD PTR [edi],bp
 832:	73 74                	jae    8a8 <sysEnter_Vector-0x12f758>
 834:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 83b:	65 
 83c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 83d:	74 72                	je     8b1 <sysEnter_Vector-0x12f74f>
 83f:	79 00                	jns    841 <sysEnter_Vector-0x12f7bf>
 841:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 848:	65                   	gs
 849:	72 61                	jb     8ac <sysEnter_Vector-0x12f754>
 84b:	74 69                	je     8b6 <sysEnter_Vector-0x12f74a>
 84d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 84e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 84f:	73 00                	jae    851 <sysEnter_Vector-0x12f7af>
 851:	72 6d                	jb     8c0 <sysEnter_Vector-0x12f740>
 853:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 85a:	69 
 85b:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 860:	69 73 74 5f 74 00 69 	imul   esi,DWORD PTR [ebx+0x74],0x6900745f
 867:	6e                   	outs   dx,BYTE PTR ds:[esi]
 868:	6f                   	outs   dx,DWORD PTR ds:[esi]
 869:	64                   	fs
 86a:	65                   	gs
 86b:	5f                   	pop    edi
 86c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 86d:	70 65                	jo     8d4 <sysEnter_Vector-0x12f72c>
 86f:	72 61                	jb     8d2 <sysEnter_Vector-0x12f72e>
 871:	74 69                	je     8dc <sysEnter_Vector-0x12f724>
 873:	6f                   	outs   dx,DWORD PTR ds:[esi]
 874:	6e                   	outs   dx,BYTE PTR ds:[esi]
 875:	73 00                	jae    877 <sysEnter_Vector-0x12f789>
 877:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 87e:	67 73 00             	addr16 jae 881 <sysEnter_Vector-0x12f77f>
 881:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 888:	65                   	gs
 889:	72 61                	jb     8ec <sysEnter_Vector-0x12f714>
 88b:	74 69                	je     8f6 <sysEnter_Vector-0x12f70a>
 88d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 88e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 88f:	73 5f                	jae    8f0 <sysEnter_Vector-0x12f710>
 891:	74 00                	je     893 <sysEnter_Vector-0x12f76d>
 893:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 896:	66 50                	push   ax
 898:	74 72                	je     90c <sysEnter_Vector-0x12f6f4>
 89a:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 89d:	64                   	fs
 89e:	65                   	gs
 89f:	76 00                	jbe    8a1 <sysEnter_Vector-0x12f75f>
 8a1:	70 61                	jo     904 <sysEnter_Vector-0x12f6fc>
 8a3:	79 6c                	jns    911 <sysEnter_Vector-0x12f6ef>
 8a5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8a6:	61                   	popa   
 8a7:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 8ab:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 8b2:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 8b5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8b6:	70 00                	jo     8b8 <sysEnter_Vector-0x12f748>
 8b8:	6d                   	ins    DWORD PTR es:[edi],dx
 8b9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8ba:	74 5f                	je     91b <sysEnter_Vector-0x12f6e5>
 8bc:	72 6f                	jb     92d <sysEnter_Vector-0x12f6d3>
 8be:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8bf:	74 00                	je     8c1 <sysEnter_Vector-0x12f73f>
 8c1:	66 6f                	outs   dx,WORD PTR ds:[esi]
 8c3:	70 73                	jo     938 <sysEnter_Vector-0x12f6c8>
 8c5:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 8c8:	6c                   	ins    BYTE PTR es:[edi],dx
 8c9:	65                   	gs
 8ca:	5f                   	pop    edi
 8cb:	74 00                	je     8cd <sysEnter_Vector-0x12f733>
 8cd:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 8d4:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 8d7:	75 69                	jne    942 <sysEnter_Vector-0x12f6be>
 8d9:	64 00 69 5f          	add    BYTE PTR fs:[ecx+0x5f],ch
 8dd:	6d                   	ins    DWORD PTR es:[edi],dx
 8de:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8df:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 8e4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8e5:	73 6f                	jae    956 <sysEnter_Vector-0x12f6aa>
 8e7:	6c                   	ins    BYTE PTR es:[edi],dx
 8e8:	65                   	gs
 8e9:	5f                   	pop    edi
 8ea:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8eb:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8ec:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 8f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8f2:	64                   	fs
 8f3:	65                   	gs
 8f4:	5f                   	pop    edi
 8f5:	74 00                	je     8f7 <sysEnter_Vector-0x12f709>
 8f7:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 8fa:	73 6f                	jae    96b <sysEnter_Vector-0x12f695>
 8fc:	6c                   	ins    BYTE PTR es:[edi],dx
 8fd:	65                   	gs
 8fe:	5f                   	pop    edi
 8ff:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 906:	72 6f                	jb     977 <sysEnter_Vector-0x12f689>
 908:	6f                   	outs   dx,DWORD PTR ds:[esi]
 909:	74 00                	je     90b <sysEnter_Vector-0x12f6f5>
 90b:	64                   	fs
 90c:	5f                   	pop    edi
 90d:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 914:	65                   	gs
 915:	73 65                	jae    97c <sysEnter_Vector-0x12f684>
 917:	74 52                	je     96b <sysEnter_Vector-0x12f695>
 919:	6f                   	outs   dx,DWORD PTR ds:[esi]
 91a:	77 00                	ja     91c <sysEnter_Vector-0x12f6e4>
 91c:	64                   	fs
 91d:	5f                   	pop    edi
 91e:	70 61                	jo     981 <sysEnter_Vector-0x12f67f>
 920:	72 65                	jb     987 <sysEnter_Vector-0x12f679>
 922:	6e                   	outs   dx,BYTE PTR ds:[esi]
 923:	74 00                	je     925 <sysEnter_Vector-0x12f6db>
 925:	66 5f                	pop    di
 927:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 92e:	5f                   	pop    edi
 92f:	70 61                	jo     992 <sysEnter_Vector-0x12f66e>
 931:	74 68                	je     99b <sysEnter_Vector-0x12f665>
 933:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 936:	65                   	gs
 937:	61                   	popa   
 938:	74 65                	je     99f <sysEnter_Vector-0x12f661>
 93a:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 93d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 93e:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 941:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 943:	61                   	popa   
 944:	74 65                	je     9ab <sysEnter_Vector-0x12f655>
 946:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 949:	72 63                	jb     9ae <sysEnter_Vector-0x12f652>
 94b:	61                   	popa   
 94c:	74 49                	je     997 <sysEnter_Vector-0x12f669>
 94e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 951:	72 63                	jb     9b6 <sysEnter_Vector-0x12f64a>
 953:	61                   	popa   
 954:	74 00                	je     956 <sysEnter_Vector-0x12f6aa>
 956:	73 72                	jae    9ca <sysEnter_Vector-0x12f636>
 958:	63 2f                	arpl   WORD PTR [edi],bp
 95a:	73 74                	jae    9d0 <sysEnter_Vector-0x12f630>
 95c:	72 69                	jb     9c7 <sysEnter_Vector-0x12f639>
 95e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 95f:	67 73 2f             	addr16 jae 991 <sysEnter_Vector-0x12f66f>
 962:	73 74                	jae    9d8 <sysEnter_Vector-0x12f628>
 964:	72 63                	jb     9c9 <sysEnter_Vector-0x12f637>
 966:	61                   	popa   
 967:	74 2e                	je     997 <sysEnter_Vector-0x12f669>
 969:	63 00                	arpl   WORD PTR [eax],ax
 96b:	73 74                	jae    9e1 <sysEnter_Vector-0x12f61f>
 96d:	72 63                	jb     9d2 <sysEnter_Vector-0x12f62e>
 96f:	6d                   	ins    DWORD PTR es:[edi],dx
 970:	70 00                	jo     972 <sysEnter_Vector-0x12f68e>
 972:	73 72                	jae    9e6 <sysEnter_Vector-0x12f61a>
 974:	63 2f                	arpl   WORD PTR [edi],bp
 976:	73 74                	jae    9ec <sysEnter_Vector-0x12f614>
 978:	72 69                	jb     9e3 <sysEnter_Vector-0x12f61d>
 97a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 97b:	67 73 2f             	addr16 jae 9ad <sysEnter_Vector-0x12f653>
 97e:	73 74                	jae    9f4 <sysEnter_Vector-0x12f60c>
 980:	72 63                	jb     9e5 <sysEnter_Vector-0x12f61b>
 982:	6d                   	ins    DWORD PTR es:[edi],dx
 983:	70 2e                	jo     9b3 <sysEnter_Vector-0x12f64d>
 985:	63 00                	arpl   WORD PTR [eax],ax
 987:	73 74                	jae    9fd <sysEnter_Vector-0x12f603>
 989:	72 63                	jb     9ee <sysEnter_Vector-0x12f612>
 98b:	70 79                	jo     a06 <sysEnter_Vector-0x12f5fa>
 98d:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 990:	75 6e                	jne    a00 <sysEnter_Vector-0x12f600>
 992:	74 00                	je     994 <sysEnter_Vector-0x12f66c>
 994:	73 74                	jae    a0a <sysEnter_Vector-0x12f5f6>
 996:	72 63                	jb     9fb <sysEnter_Vector-0x12f605>
 998:	70 79                	jo     a13 <sysEnter_Vector-0x12f5ed>
 99a:	63 00                	arpl   WORD PTR [eax],ax
 99c:	73 74                	jae    a12 <sysEnter_Vector-0x12f5ee>
 99e:	72 63                	jb     a03 <sysEnter_Vector-0x12f5fd>
 9a0:	70 79                	jo     a1b <sysEnter_Vector-0x12f5e5>
 9a2:	49                   	dec    ecx
 9a3:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9a6:	63 2f                	arpl   WORD PTR [edi],bp
 9a8:	73 74                	jae    a1e <sysEnter_Vector-0x12f5e2>
 9aa:	72 69                	jb     a15 <sysEnter_Vector-0x12f5eb>
 9ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9ad:	67 73 2f             	addr16 jae 9df <sysEnter_Vector-0x12f621>
 9b0:	73 74                	jae    a26 <sysEnter_Vector-0x12f5da>
 9b2:	72 63                	jb     a17 <sysEnter_Vector-0x12f5e9>
 9b4:	70 79                	jo     a2f <sysEnter_Vector-0x12f5d1>
 9b6:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9b9:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 9bc:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 9bf:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 9c6:	74 
 9c7:	72 69                	jb     a32 <sysEnter_Vector-0x12f5ce>
 9c9:	73 6e                	jae    a39 <sysEnter_Vector-0x12f5c7>
 9cb:	75 6d                	jne    a3a <sysEnter_Vector-0x12f5c6>
 9cd:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9d0:	63 2f                	arpl   WORD PTR [edi],bp
 9d2:	73 74                	jae    a48 <sysEnter_Vector-0x12f5b8>
 9d4:	72 69                	jb     a3f <sysEnter_Vector-0x12f5c1>
 9d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9d7:	67 73 2f             	addr16 jae a09 <sysEnter_Vector-0x12f5f7>
 9da:	73 74                	jae    a50 <sysEnter_Vector-0x12f5b0>
 9dc:	72 69                	jb     a47 <sysEnter_Vector-0x12f5b9>
 9de:	73 6e                	jae    a4e <sysEnter_Vector-0x12f5b2>
 9e0:	75 6d                	jne    a4f <sysEnter_Vector-0x12f5b1>
 9e2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9e5:	73 74                	jae    a5b <sysEnter_Vector-0x12f5a5>
 9e7:	72 6c                	jb     a55 <sysEnter_Vector-0x12f5ab>
 9e9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9eb:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9ee:	63 2f                	arpl   WORD PTR [edi],bp
 9f0:	73 74                	jae    a66 <sysEnter_Vector-0x12f59a>
 9f2:	72 69                	jb     a5d <sysEnter_Vector-0x12f5a3>
 9f4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9f5:	67 73 2f             	addr16 jae a27 <sysEnter_Vector-0x12f5d9>
 9f8:	73 74                	jae    a6e <sysEnter_Vector-0x12f592>
 9fa:	72 6c                	jb     a68 <sysEnter_Vector-0x12f598>
 9fc:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9fe:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a01:	73 74                	jae    a77 <sysEnter_Vector-0x12f589>
 a03:	72 6c                	jb     a71 <sysEnter_Vector-0x12f58f>
 a05:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a07:	49                   	dec    ecx
 a08:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a0b:	72 6e                	jb     a7b <sysEnter_Vector-0x12f585>
 a0d:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a10:	49                   	dec    ecx
 a11:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a14:	72 6e                	jb     a84 <sysEnter_Vector-0x12f57c>
 a16:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a19:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a1c:	63 2f                	arpl   WORD PTR [edi],bp
 a1e:	73 74                	jae    a94 <sysEnter_Vector-0x12f56c>
 a20:	72 69                	jb     a8b <sysEnter_Vector-0x12f575>
 a22:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a23:	67 73 2f             	addr16 jae a55 <sysEnter_Vector-0x12f5ab>
 a26:	73 74                	jae    a9c <sysEnter_Vector-0x12f564>
 a28:	72 6e                	jb     a98 <sysEnter_Vector-0x12f568>
 a2a:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a2d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a30:	73 72                	jae    aa4 <sysEnter_Vector-0x12f55c>
 a32:	63 2f                	arpl   WORD PTR [edi],bp
 a34:	73 74                	jae    aaa <sysEnter_Vector-0x12f556>
 a36:	72 69                	jb     aa1 <sysEnter_Vector-0x12f55f>
 a38:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a39:	67 73 2f             	addr16 jae a6b <sysEnter_Vector-0x12f595>
 a3c:	73 74                	jae    ab2 <sysEnter_Vector-0x12f54e>
 a3e:	72 6e                	jb     aae <sysEnter_Vector-0x12f552>
 a40:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a43:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a46:	73 74                	jae    abc <sysEnter_Vector-0x12f544>
 a48:	72 6e                	jb     ab8 <sysEnter_Vector-0x12f548>
 a4a:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a4d:	49                   	dec    ecx
 a4e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a51:	72 6e                	jb     ac1 <sysEnter_Vector-0x12f53f>
 a53:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a56:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a59:	63 2f                	arpl   WORD PTR [edi],bp
 a5b:	73 74                	jae    ad1 <sysEnter_Vector-0x12f52f>
 a5d:	72 69                	jb     ac8 <sysEnter_Vector-0x12f538>
 a5f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a60:	67 73 2f             	addr16 jae a92 <sysEnter_Vector-0x12f56e>
 a63:	73 74                	jae    ad9 <sysEnter_Vector-0x12f527>
 a65:	72 6f                	jb     ad6 <sysEnter_Vector-0x12f52a>
 a67:	75 6c                	jne    ad5 <sysEnter_Vector-0x12f52b>
 a69:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a6c:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 a6f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a70:	66                   	data16
 a71:	66                   	data16
 a72:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 a75:	74 6c                	je     ae3 <sysEnter_Vector-0x12f51d>
 a77:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 a7e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a7f:	75 6c                	jne    aed <sysEnter_Vector-0x12f513>
 a81:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 a84:	64                   	fs
 a85:	70 74                	jo     afb <sysEnter_Vector-0x12f505>
 a87:	72 00                	jb     a89 <sysEnter_Vector-0x12f577>
 a89:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a8a:	70 74                	jo     b00 <sysEnter_Vector-0x12f500>
 a8c:	72 00                	jb     a8e <sysEnter_Vector-0x12f572>
 a8e:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 a91:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 a95:	63 2f                	arpl   WORD PTR [edi],bp
 a97:	73 74                	jae    b0d <sysEnter_Vector-0x12f4f3>
 a99:	72 69                	jb     b04 <sysEnter_Vector-0x12f4fc>
 a9b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a9c:	67 73 2f             	addr16 jae ace <sysEnter_Vector-0x12f532>
 a9f:	73 74                	jae    b15 <sysEnter_Vector-0x12f4eb>
 aa1:	72 70                	jb     b13 <sysEnter_Vector-0x12f4ed>
 aa3:	61                   	popa   
 aa4:	72 74                	jb     b1a <sysEnter_Vector-0x12f4e6>
 aa6:	73 2e                	jae    ad6 <sysEnter_Vector-0x12f52a>
 aa8:	63 00                	arpl   WORD PTR [eax],ax
 aaa:	73 74                	jae    b20 <sysEnter_Vector-0x12f4e0>
 aac:	72 6c                	jb     b1a <sysEnter_Vector-0x12f4e6>
 aae:	65                   	gs
 aaf:	66                   	data16
 ab0:	74 00                	je     ab2 <sysEnter_Vector-0x12f54e>
 ab2:	73 72                	jae    b26 <sysEnter_Vector-0x12f4da>
 ab4:	63 2f                	arpl   WORD PTR [edi],bp
 ab6:	73 74                	jae    b2c <sysEnter_Vector-0x12f4d4>
 ab8:	72 69                	jb     b23 <sysEnter_Vector-0x12f4dd>
 aba:	6e                   	outs   dx,BYTE PTR ds:[esi]
 abb:	67 73 2f             	addr16 jae aed <sysEnter_Vector-0x12f513>
 abe:	73 74                	jae    b34 <sysEnter_Vector-0x12f4cc>
 ac0:	72 74                	jb     b36 <sysEnter_Vector-0x12f4ca>
 ac2:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ac3:	6c                   	ins    BYTE PTR es:[edi],dx
 ac4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ac7:	73 74                	jae    b3d <sysEnter_Vector-0x12f4c3>
 ac9:	72 74                	jb     b3f <sysEnter_Vector-0x12f4c1>
 acb:	6f                   	outs   dx,DWORD PTR ds:[esi]
 acc:	6c                   	ins    BYTE PTR es:[edi],dx
 acd:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 ad0:	70 75                	jo     b47 <sysEnter_Vector-0x12f4b9>
 ad2:	74 00                	je     ad4 <sysEnter_Vector-0x12f52c>
 ad4:	73 72                	jae    b48 <sysEnter_Vector-0x12f4b8>
 ad6:	63 2f                	arpl   WORD PTR [edi],bp
 ad8:	73 74                	jae    b4e <sysEnter_Vector-0x12f4b2>
 ada:	72 69                	jb     b45 <sysEnter_Vector-0x12f4bb>
 adc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 add:	67 73 2f             	addr16 jae b0f <sysEnter_Vector-0x12f4f1>
 ae0:	73 74                	jae    b56 <sysEnter_Vector-0x12f4aa>
 ae2:	72 74                	jb     b58 <sysEnter_Vector-0x12f4a8>
 ae4:	72 69                	jb     b4f <sysEnter_Vector-0x12f4b1>
 ae6:	6d                   	ins    DWORD PTR es:[edi],dx
 ae7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 aea:	73 74                	jae    b60 <sysEnter_Vector-0x12f4a0>
 aec:	72 74                	jb     b62 <sysEnter_Vector-0x12f49e>
 aee:	72 69                	jb     b59 <sysEnter_Vector-0x12f4a7>
 af0:	6d                   	ins    DWORD PTR es:[edi],dx
 af1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 af4:	72 74                	jb     b6a <sysEnter_Vector-0x12f496>
 af6:	72 69                	jb     b61 <sysEnter_Vector-0x12f49f>
 af8:	6d                   	ins    DWORD PTR es:[edi],dx
 af9:	49                   	dec    ecx
 afa:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 afd:	72 73                	jb     b72 <sysEnter_Vector-0x12f48e>
 aff:	74 72                	je     b73 <sysEnter_Vector-0x12f48d>
 b01:	49                   	dec    ecx
 b02:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b05:	63 2f                	arpl   WORD PTR [edi],bp
 b07:	73 74                	jae    b7d <sysEnter_Vector-0x12f483>
 b09:	72 73                	jb     b7e <sysEnter_Vector-0x12f482>
 b0b:	74 72                	je     b7f <sysEnter_Vector-0x12f481>
 b0d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b10:	73 74                	jae    b86 <sysEnter_Vector-0x12f47a>
 b12:	72 73                	jb     b87 <sysEnter_Vector-0x12f479>
 b14:	74 72                	je     b88 <sysEnter_Vector-0x12f478>
 b16:	00 72 63             	add    BYTE PTR [edx+0x63],dh
 b19:	73 69                	jae    b84 <sysEnter_Vector-0x12f47c>
 b1b:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 b1f:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 b22:	72 69                	jb     b8d <sysEnter_Vector-0x12f473>
 b24:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b25:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
 b29:	63 2f                	arpl   WORD PTR [edi],bp
 b2b:	74 69                	je     b96 <sysEnter_Vector-0x12f46a>
 b2d:	6d                   	ins    DWORD PTR es:[edi],dx
 b2e:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 b32:	6c                   	ins    BYTE PTR es:[edi],dx
 b33:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b34:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b37:	74 69                	je     ba2 <sysEnter_Vector-0x12f45e>
 b39:	6d                   	ins    DWORD PTR es:[edi],dx
 b3a:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 b3f:	68 6f 75 72 00       	push   0x72756f
 b44:	67                   	addr16
 b45:	65                   	gs
 b46:	74 74                	je     bbc <sysEnter_Vector-0x12f444>
 b48:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 b4f:	61                   	popa   
 b50:	79 6c                	jns    bbe <sysEnter_Vector-0x12f442>
 b52:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 b59:	7a 6e                	jp     bc9 <sysEnter_Vector-0x12f437>
 b5b:	61                   	popa   
 b5c:	6d                   	ins    DWORD PTR es:[edi],dx
 b5d:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 b61:	74 69                	je     bcc <sysEnter_Vector-0x12f434>
 b63:	6d                   	ins    DWORD PTR es:[edi],dx
 b64:	65                   	gs
 b65:	5f                   	pop    edi
 b66:	72 00                	jb     b68 <sysEnter_Vector-0x12f498>
 b68:	74 69                	je     bd3 <sysEnter_Vector-0x12f42d>
 b6a:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 b6d:	54                   	push   esp
 b6e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b6f:	57                   	push   edi
 b70:	61                   	popa   
 b71:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 b78:	6f 
 b79:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b7a:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b7e:	79 65                	jns    be5 <sysEnter_Vector-0x12f41b>
 b80:	61                   	popa   
 b81:	72 00                	jb     b83 <sysEnter_Vector-0x12f47d>
 b83:	6d                   	ins    DWORD PTR es:[edi],dx
 b84:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b85:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b86:	74 68                	je     bf0 <sysEnter_Vector-0x12f410>
 b88:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 b8b:	74 74                	je     c01 <sysEnter_Vector-0x12f3ff>
 b8d:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 b94:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 b9b:	61                   	popa   
 b9c:	79 6e                	jns    c0c <sysEnter_Vector-0x12f3f4>
 b9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b9f:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 ba2:	74 69                	je     c0d <sysEnter_Vector-0x12f3f3>
 ba4:	6d                   	ins    DWORD PTR es:[edi],dx
 ba5:	65                   	gs
 ba6:	5f                   	pop    edi
 ba7:	72 49                	jb     bf2 <sysEnter_Vector-0x12f40e>
 ba9:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 bad:	6d                   	ins    DWORD PTR es:[edi],dx
 bae:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 bb5:	64                   	fs
 bb6:	61                   	popa   
 bb7:	79 00                	jns    bb9 <sysEnter_Vector-0x12f447>
 bb9:	6c                   	ins    BYTE PTR es:[edi],dx
 bba:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bbb:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 bbe:	54                   	push   esp
 bbf:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 bc6:	75 66                	jne    c2e <sysEnter_Vector-0x12f3d2>
 bc8:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 bcc:	65                   	gs
 bcd:	5f                   	pop    edi
 bce:	74 00                	je     bd0 <sysEnter_Vector-0x12f430>
 bd0:	6c                   	ins    BYTE PTR es:[edi],dx
 bd1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bd2:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 bd5:	74 69                	je     c40 <sysEnter_Vector-0x12f3c0>
 bd7:	6d                   	ins    DWORD PTR es:[edi],dx
 bd8:	65                   	gs
 bd9:	5f                   	pop    edi
 bda:	72 00                	jb     bdc <sysEnter_Vector-0x12f424>
 bdc:	64                   	fs
 bdd:	61                   	popa   
 bde:	79 63                	jns    c43 <sysEnter_Vector-0x12f3bd>
 be0:	6c                   	ins    BYTE PTR es:[edi],dx
 be1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 be2:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 be5:	6d                   	ins    DWORD PTR es:[edi],dx
 be6:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 beb:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 bef:	67 6d                	ins    DWORD PTR es:[di],dx
 bf1:	74 6f                	je     c62 <sysEnter_Vector-0x12f39e>
 bf3:	66                   	data16
 bf4:	66                   	data16
 bf5:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 bf9:	77 64                	ja     c5f <sysEnter_Vector-0x12f3a1>
 bfb:	61                   	popa   
 bfc:	79 00                	jns    bfe <sysEnter_Vector-0x12f402>
 bfe:	5f                   	pop    edi
 bff:	79 74                	jns    c75 <sysEnter_Vector-0x12f38b>
 c01:	61                   	popa   
 c02:	62 00                	bound  eax,QWORD PTR [eax]
 c04:	74 6d                	je     c73 <sysEnter_Vector-0x12f38d>
 c06:	5f                   	pop    edi
 c07:	6d                   	ins    DWORD PTR es:[edi],dx
 c08:	64                   	fs
 c09:	61                   	popa   
 c0a:	79 00                	jns    c0c <sysEnter_Vector-0x12f3f4>
 c0c:	74 6d                	je     c7b <sysEnter_Vector-0x12f385>
 c0e:	5f                   	pop    edi
 c0f:	73 65                	jae    c76 <sysEnter_Vector-0x12f38a>
 c11:	63 00                	arpl   WORD PTR [eax],ax
 c13:	74 6d                	je     c82 <sysEnter_Vector-0x12f37e>
 c15:	5f                   	pop    edi
 c16:	7a 6f                	jp     c87 <sysEnter_Vector-0x12f379>
 c18:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c19:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 c1e:	65                   	gs
 c1f:	72 00                	jb     c21 <sysEnter_Vector-0x12f3df>
 c21:	6c                   	ins    BYTE PTR es:[edi],dx
 c22:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c23:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c26:	74 69                	je     c91 <sysEnter_Vector-0x12f36f>
 c28:	6d                   	ins    DWORD PTR es:[edi],dx
 c29:	65                   	gs
 c2a:	5f                   	pop    edi
 c2b:	72 49                	jb     c76 <sysEnter_Vector-0x12f38a>
 c2d:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 c30:	73 74                	jae    ca6 <sysEnter_Vector-0x12f35a>
 c32:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 c35:	73 00                	jae    c37 <sysEnter_Vector-0x12f3c9>
 c37:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c38:	76 65                	jbe    c9f <sysEnter_Vector-0x12f361>
 c3a:	72 66                	jb     ca2 <sysEnter_Vector-0x12f35e>
 c3c:	6c                   	ins    BYTE PTR es:[edi],dx
 c3d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c3e:	77 00                	ja     c40 <sysEnter_Vector-0x12f3c0>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...
