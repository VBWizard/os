
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 5b 36 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000008:	05 14 54 00 00       	add    eax,0x5414
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 23 36 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000040:	05 dc 53 00 00       	add    eax,0x53dc
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 e9 35 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00007a:	05 a2 53 00 00       	add    eax,0x53a2
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 94 35 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0000cf:	05 4d 53 00 00       	add    eax,0x534d
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 6a 35 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 f6 52 00 00    	add    ebx,0x52f6
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
9f000132:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 34 00 00 00    	mov    DWORD PTR [ebx+0x34],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
9f00018a:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
9f000197:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 34 00 00 00    	mov    DWORD PTR [ebx+0x34],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    
9f0001b3:	90                   	nop

9f0001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
9f0001b4:	55                   	push   ebp
9f0001b5:	89 e5                	mov    ebp,esp
9f0001b7:	53                   	push   ebx
9f0001b8:	83 ec 14             	sub    esp,0x14
9f0001bb:	e8 a3 34 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0001c0:	05 5c 52 00 00       	add    eax,0x525c
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f0001cc:	83 ec 0c             	sub    esp,0xc
9f0001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0001d2:	89 c3                	mov    ebx,eax
9f0001d4:	e8 b8 21 00 00       	call   9f002391 <strlenI>
9f0001d9:	83 c4 10             	add    esp,0x10
9f0001dc:	83 e8 01             	sub    eax,0x1
9f0001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0001e2:	eb 39                	jmp    9f00021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
9f0001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001ea:	01 d0                	add    eax,edx
9f0001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
9f0001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001f8:	01 c2                	add    edx,eax
9f0001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000200:	01 c8                	add    eax,ecx
9f000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
9f000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00020d:	01 c2                	add    edx,eax
9f00020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
9f00021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f000223:	7c bf                	jl     9f0001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f000225:	90                   	nop
9f000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000229:	c9                   	leave  
9f00022a:	c3                   	ret    

9f00022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
9f00022b:	55                   	push   ebp
9f00022c:	89 e5                	mov    ebp,esp
9f00022e:	53                   	push   ebx
9f00022f:	83 ec 14             	sub    esp,0x14
9f000232:	e8 2c 34 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000237:	05 e5 51 00 00       	add    eax,0x51e5
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000246:	79 03                	jns    9f00024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
9f000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
9f00024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000255:	8d 50 01             	lea    edx,[eax+0x1]
9f000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00025b:	89 c2                	mov    edx,eax
9f00025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000266:	ba 67 66 66 66       	mov    edx,0x66666667
9f00026b:	89 c8                	mov    eax,ecx
9f00026d:	f7 ea                	imul   edx
9f00026f:	c1 fa 02             	sar    edx,0x2
9f000272:	89 c8                	mov    eax,ecx
9f000274:	c1 f8 1f             	sar    eax,0x1f
9f000277:	29 c2                	sub    edx,eax
9f000279:	89 d0                	mov    eax,edx
9f00027b:	c1 e0 02             	shl    eax,0x2
9f00027e:	01 d0                	add    eax,edx
9f000280:	01 c0                	add    eax,eax
9f000282:	29 c1                	sub    ecx,eax
9f000284:	89 ca                	mov    edx,ecx
9f000286:	89 d0                	mov    eax,edx
9f000288:	83 c0 30             	add    eax,0x30
9f00028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f00028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000290:	ba 67 66 66 66       	mov    edx,0x66666667
9f000295:	89 c8                	mov    eax,ecx
9f000297:	f7 ea                	imul   edx
9f000299:	c1 fa 02             	sar    edx,0x2
9f00029c:	89 c8                	mov    eax,ecx
9f00029e:	c1 f8 1f             	sar    eax,0x1f
9f0002a1:	29 c2                	sub    edx,eax
9f0002a3:	89 d0                	mov    eax,edx
9f0002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0002ac:	7f a4                	jg     9f000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
9f0002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002b2:	79 13                	jns    9f0002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
9f0002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b7:	8d 50 01             	lea    edx,[eax+0x1]
9f0002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002bd:	89 c2                	mov    edx,eax
9f0002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002c2:	01 d0                	add    eax,edx
9f0002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
9f0002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002cd:	01 d0                	add    eax,edx
9f0002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
9f0002d2:	83 ec 0c             	sub    esp,0xc
9f0002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0002d8:	e8 d7 fe ff ff       	call   9f0001b4 <reverseI>
9f0002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
9f0002e0:	90                   	nop
9f0002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002e4:	c9                   	leave  
9f0002e5:	c3                   	ret    

9f0002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
9f0002e6:	55                   	push   ebp
9f0002e7:	89 e5                	mov    ebp,esp
9f0002e9:	53                   	push   ebx
9f0002ea:	83 ec 14             	sub    esp,0x14
9f0002ed:	e8 71 33 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0002f2:	05 2a 51 00 00       	add    eax,0x512a
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000301:	79 03                	jns    9f000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
9f000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
9f000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f00030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000310:	8d 50 01             	lea    edx,[eax+0x1]
9f000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000316:	89 c2                	mov    edx,eax
9f000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f00031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000321:	ba 67 66 66 66       	mov    edx,0x66666667
9f000326:	89 c8                	mov    eax,ecx
9f000328:	f7 ea                	imul   edx
9f00032a:	c1 fa 02             	sar    edx,0x2
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	c1 f8 1f             	sar    eax,0x1f
9f000332:	29 c2                	sub    edx,eax
9f000334:	89 d0                	mov    eax,edx
9f000336:	c1 e0 02             	shl    eax,0x2
9f000339:	01 d0                	add    eax,edx
9f00033b:	01 c0                	add    eax,eax
9f00033d:	29 c1                	sub    ecx,eax
9f00033f:	89 ca                	mov    edx,ecx
9f000341:	89 d0                	mov    eax,edx
9f000343:	83 c0 30             	add    eax,0x30
9f000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f00034b:	ba 67 66 66 66       	mov    edx,0x66666667
9f000350:	89 c8                	mov    eax,ecx
9f000352:	f7 ea                	imul   edx
9f000354:	c1 fa 02             	sar    edx,0x2
9f000357:	89 c8                	mov    eax,ecx
9f000359:	c1 f8 1f             	sar    eax,0x1f
9f00035c:	29 c2                	sub    edx,eax
9f00035e:	89 d0                	mov    eax,edx
9f000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000367:	7f a4                	jg     9f00030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
9f000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00036d:	79 13                	jns    9f000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
9f00036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000372:	8d 50 01             	lea    edx,[eax+0x1]
9f000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000378:	89 c2                	mov    edx,eax
9f00037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00037d:	01 d0                	add    eax,edx
9f00037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
9f000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000388:	01 d0                	add    eax,edx
9f00038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
9f00038d:	83 ec 0c             	sub    esp,0xc
9f000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000393:	e8 1c fe ff ff       	call   9f0001b4 <reverseI>
9f000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
9f00039b:	90                   	nop
9f00039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00039f:	c9                   	leave  
9f0003a0:	c3                   	ret    

9f0003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
9f0003a1:	55                   	push   ebp
9f0003a2:	89 e5                	mov    ebp,esp
9f0003a4:	83 ec 10             	sub    esp,0x10
9f0003a7:	e8 b7 32 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0003ac:	05 70 50 00 00       	add    eax,0x5070
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
9f0003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f0003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f0003bf:	eb 28                	jmp    9f0003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
9f0003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0003c4:	89 d0                	mov    eax,edx
9f0003c6:	c1 e0 02             	shl    eax,0x2
9f0003c9:	01 d0                	add    eax,edx
9f0003cb:	01 c0                	add    eax,eax
9f0003cd:	89 c1                	mov    ecx,eax
9f0003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003d5:	01 d0                	add    eax,edx
9f0003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0003da:	0f be c0             	movsx  eax,al
9f0003dd:	01 c8                	add    eax,ecx
9f0003df:	83 e8 30             	sub    eax,0x30
9f0003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f0003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
9f0003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003ef:	01 d0                	add    eax,edx
9f0003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0003f4:	84 c0                	test   al,al
9f0003f6:	75 c9                	jne    9f0003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f0003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
9f0003fb:	c9                   	leave  
9f0003fc:	c3                   	ret    
9f0003fd:	66 90                	xchg   ax,ax
9f0003ff:	90                   	nop

9f000400 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
9f000400:	55                   	push   ebp
9f000401:	89 e5                	mov    ebp,esp
9f000403:	53                   	push   ebx
9f000404:	83 ec 14             	sub    esp,0x14
9f000407:	e8 84 32 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f00040c:	81 c3 10 50 00 00    	add    ebx,0x5010
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f000412:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000419:	eb 7b                	jmp    9f000496 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f00041b:	83 ec 0c             	sub    esp,0xc
9f00041e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000421:	e8 6b 1f 00 00       	call   9f002391 <strlenI>
9f000426:	83 c4 10             	add    esp,0x10
9f000429:	89 c1                	mov    ecx,eax
9f00042b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000431:	8b 00                	mov    eax,DWORD PTR [eax]
9f000433:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000436:	c1 e2 02             	shl    edx,0x2
9f000439:	01 d0                	add    eax,edx
9f00043b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00043d:	83 ec 04             	sub    esp,0x4
9f000440:	51                   	push   ecx
9f000441:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000444:	50                   	push   eax
9f000445:	e8 e1 1f 00 00       	call   9f00242b <strncmpI>
9f00044a:	83 c4 10             	add    esp,0x10
9f00044d:	85 c0                	test   eax,eax
9f00044f:	75 41                	jne    9f000492 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f000451:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000457:	8b 00                	mov    eax,DWORD PTR [eax]
9f000459:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00045c:	c1 e2 02             	shl    edx,0x2
9f00045f:	01 d0                	add    eax,edx
9f000461:	8b 00                	mov    eax,DWORD PTR [eax]
9f000463:	83 ec 08             	sub    esp,0x8
9f000466:	8d 93 64 f9 ff ff    	lea    edx,[ebx-0x69c]
9f00046c:	52                   	push   edx
9f00046d:	50                   	push   eax
9f00046e:	e8 95 24 00 00       	call   9f002908 <strstrI>
9f000473:	83 c4 10             	add    esp,0x10
9f000476:	83 c0 01             	add    eax,0x1
9f000479:	83 ec 04             	sub    esp,0x4
9f00047c:	6a 32                	push   0x32
9f00047e:	50                   	push   eax
9f00047f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000482:	e8 0d 20 00 00       	call   9f002494 <strncpyI>
9f000487:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f00048a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00048d:	83 c0 01             	add    eax,0x1
9f000490:	eb 13                	jmp    9f0004a5 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f000492:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f000496:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f00049a:	0f 8e 7b ff ff ff    	jle    9f00041b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f0004a0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f0004a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0004a8:	c9                   	leave  
9f0004a9:	c3                   	ret    

9f0004aa <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
9f0004aa:	55                   	push   ebp
9f0004ab:	89 e5                	mov    ebp,esp
9f0004ad:	53                   	push   ebx
9f0004ae:	83 ec 14             	sub    esp,0x14
9f0004b1:	e8 da 31 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f0004b6:	81 c3 66 4f 00 00    	add    ebx,0x4f66
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
9f0004bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
9f0004c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f0004ca:	e9 d5 00 00 00       	jmp    9f0005a4 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
9f0004cf:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0004d5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0004d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0004da:	c1 e2 02             	shl    edx,0x2
9f0004dd:	01 d0                	add    eax,edx
9f0004df:	8b 00                	mov    eax,DWORD PTR [eax]
9f0004e1:	85 c0                	test   eax,eax
9f0004e3:	0f 84 b7 00 00 00    	je     9f0005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f0004e9:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0004ef:	8b 00                	mov    eax,DWORD PTR [eax]
9f0004f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0004f4:	c1 e2 02             	shl    edx,0x2
9f0004f7:	01 d0                	add    eax,edx
9f0004f9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0004fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f0004fe:	83 ec 0c             	sub    esp,0xc
9f000501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000504:	e8 88 1e 00 00       	call   9f002391 <strlenI>
9f000509:	83 c4 10             	add    esp,0x10
9f00050c:	89 c1                	mov    ecx,eax
9f00050e:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000514:	8b 00                	mov    eax,DWORD PTR [eax]
9f000516:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000519:	c1 e2 02             	shl    edx,0x2
9f00051c:	01 d0                	add    eax,edx
9f00051e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000520:	83 ec 04             	sub    esp,0x4
9f000523:	51                   	push   ecx
9f000524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000527:	50                   	push   eax
9f000528:	e8 fe 1e 00 00       	call   9f00242b <strncmpI>
9f00052d:	83 c4 10             	add    esp,0x10
9f000530:	85 c0                	test   eax,eax
9f000532:	75 6c                	jne    9f0005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
9f000534:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00053a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00053c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00053f:	c1 e2 02             	shl    edx,0x2
9f000542:	01 d0                	add    eax,edx
9f000544:	8b 00                	mov    eax,DWORD PTR [eax]
9f000546:	83 ec 08             	sub    esp,0x8
9f000549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00054c:	50                   	push   eax
9f00054d:	e8 fa 1c 00 00       	call   9f00224c <strcpyI>
9f000552:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
9f000555:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00055b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00055d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000560:	c1 e2 02             	shl    edx,0x2
9f000563:	01 d0                	add    eax,edx
9f000565:	8b 00                	mov    eax,DWORD PTR [eax]
9f000567:	83 ec 08             	sub    esp,0x8
9f00056a:	8d 93 64 f9 ff ff    	lea    edx,[ebx-0x69c]
9f000570:	52                   	push   edx
9f000571:	50                   	push   eax
9f000572:	e8 87 1b 00 00       	call   9f0020fe <strcatI>
9f000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
9f00057a:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000580:	8b 00                	mov    eax,DWORD PTR [eax]
9f000582:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000585:	c1 e2 02             	shl    edx,0x2
9f000588:	01 d0                	add    eax,edx
9f00058a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00058c:	83 ec 08             	sub    esp,0x8
9f00058f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000592:	50                   	push   eax
9f000593:	e8 66 1b 00 00       	call   9f0020fe <strcatI>
9f000598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
9f00059b:	e9 c6 00 00 00       	jmp    9f000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f0005a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
9f0005a4:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f0005a8:	0f 8e 21 ff ff ff    	jle    9f0004cf <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f0005ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0005b5:	e9 a2 00 00 00       	jmp    9f00065c <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
9f0005ba:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0005c0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0005c5:	c1 e2 02             	shl    edx,0x2
9f0005c8:	01 d0                	add    eax,edx
9f0005ca:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005cc:	85 c0                	test   eax,eax
9f0005ce:	0f 85 84 00 00 00    	jne    9f000658 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f0005d4:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0005da:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0005df:	c1 e2 02             	shl    edx,0x2
9f0005e2:	01 d0                	add    eax,edx
9f0005e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0005e7:	81 c2 00 02 00 00    	add    edx,0x200
9f0005ed:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
9f0005ef:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0005f5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0005fa:	c1 e2 02             	shl    edx,0x2
9f0005fd:	01 d0                	add    eax,edx
9f0005ff:	8b 00                	mov    eax,DWORD PTR [eax]
9f000601:	83 ec 08             	sub    esp,0x8
9f000604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000607:	50                   	push   eax
9f000608:	e8 3f 1c 00 00       	call   9f00224c <strcpyI>
9f00060d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
9f000610:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000616:	8b 00                	mov    eax,DWORD PTR [eax]
9f000618:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00061b:	c1 e2 02             	shl    edx,0x2
9f00061e:	01 d0                	add    eax,edx
9f000620:	8b 00                	mov    eax,DWORD PTR [eax]
9f000622:	83 ec 08             	sub    esp,0x8
9f000625:	8d 93 64 f9 ff ff    	lea    edx,[ebx-0x69c]
9f00062b:	52                   	push   edx
9f00062c:	50                   	push   eax
9f00062d:	e8 cc 1a 00 00       	call   9f0020fe <strcatI>
9f000632:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
9f000635:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00063b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00063d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000640:	c1 e2 02             	shl    edx,0x2
9f000643:	01 d0                	add    eax,edx
9f000645:	8b 00                	mov    eax,DWORD PTR [eax]
9f000647:	83 ec 08             	sub    esp,0x8
9f00064a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00064d:	50                   	push   eax
9f00064e:	e8 ab 1a 00 00       	call   9f0020fe <strcatI>
9f000653:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
9f000656:	eb 0e                	jmp    9f000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f000658:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
9f00065c:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f000660:	0f 8e 54 ff ff ff    	jle    9f0005ba <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f000666:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000669:	c9                   	leave  
9f00066a:	c3                   	ret    
9f00066b:	90                   	nop

9f00066c <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:10
 */

#include "libChrisOS.h"

VISIBLE void* open(char* path, const char* mode)
{
9f00066c:	55                   	push   ebp
9f00066d:	89 e5                	mov    ebp,esp
9f00066f:	53                   	push   ebx
9f000670:	83 ec 04             	sub    esp,0x4
9f000673:	e8 eb 2f 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000678:	05 a4 4d 00 00       	add    eax,0x4da4
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
9f00067d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000680:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000683:	83 ec 04             	sub    esp,0x4
9f000686:	51                   	push   ecx
9f000687:	52                   	push   edx
9f000688:	6a 02                	push   0x2
9f00068a:	89 c3                	mov    ebx,eax
9f00068c:	e8 ad 02 00 00       	call   9f00093e <do_syscall2>
9f000691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
}
9f000694:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000697:	c9                   	leave  
9f000698:	c3                   	ret    

9f000699 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15

VISIBLE void close(void* handle)
{
9f000699:	55                   	push   ebp
9f00069a:	89 e5                	mov    ebp,esp
9f00069c:	53                   	push   ebx
9f00069d:	83 ec 04             	sub    esp,0x4
9f0006a0:	e8 be 2f 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0006a5:	05 77 4d 00 00       	add    eax,0x4d77
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f0006aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0006ad:	83 ec 08             	sub    esp,0x8
9f0006b0:	52                   	push   edx
9f0006b1:	6a 03                	push   0x3
9f0006b3:	89 c3                	mov    ebx,eax
9f0006b5:	e8 c2 02 00 00       	call   9f00097c <do_syscall1>
9f0006ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
9f0006bd:	90                   	nop
9f0006be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0006c1:	c9                   	leave  
9f0006c2:	c3                   	ret    

9f0006c3 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f0006c3:	55                   	push   ebp
9f0006c4:	89 e5                	mov    ebp,esp
9f0006c6:	56                   	push   esi
9f0006c7:	53                   	push   ebx
9f0006c8:	e8 96 2f 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0006cd:	05 4f 4d 00 00       	add    eax,0x4d4f
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f0006d2:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f0006d5:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0006d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0006db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0006de:	83 ec 0c             	sub    esp,0xc
9f0006e1:	56                   	push   esi
9f0006e2:	53                   	push   ebx
9f0006e3:	51                   	push   ecx
9f0006e4:	52                   	push   edx
9f0006e5:	6a 04                	push   0x4
9f0006e7:	89 c3                	mov    ebx,eax
9f0006e9:	e8 da 01 00 00       	call   9f0008c8 <do_syscall4>
9f0006ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
}
9f0006f1:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0006f4:	5b                   	pop    ebx
9f0006f5:	5e                   	pop    esi
9f0006f6:	5d                   	pop    ebp
9f0006f7:	c3                   	ret    

9f0006f8 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f0006f8:	55                   	push   ebp
9f0006f9:	89 e5                	mov    ebp,esp
9f0006fb:	56                   	push   esi
9f0006fc:	53                   	push   ebx
9f0006fd:	e8 61 2f 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000702:	05 1a 4d 00 00       	add    eax,0x4d1a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000707:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f00070a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f00070d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000710:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000713:	83 ec 0c             	sub    esp,0xc
9f000716:	56                   	push   esi
9f000717:	53                   	push   ebx
9f000718:	51                   	push   ecx
9f000719:	52                   	push   edx
9f00071a:	6a 05                	push   0x5
9f00071c:	89 c3                	mov    ebx,eax
9f00071e:	e8 a5 01 00 00       	call   9f0008c8 <do_syscall4>
9f000723:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
}
9f000726:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000729:	5b                   	pop    ebx
9f00072a:	5e                   	pop    esi
9f00072b:	5d                   	pop    ebp
9f00072c:	c3                   	ret    

9f00072d <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31


VISIBLE int getdir(char* path, char *buffer, int bufferCount)
{
9f00072d:	55                   	push   ebp
9f00072e:	89 e5                	mov    ebp,esp
9f000730:	53                   	push   ebx
9f000731:	83 ec 04             	sub    esp,0x4
9f000734:	e8 2a 2f 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000739:	05 e3 4c 00 00       	add    eax,0x4ce3
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, bufferCount);
9f00073e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000741:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000744:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000747:	53                   	push   ebx
9f000748:	51                   	push   ecx
9f000749:	52                   	push   edx
9f00074a:	68 04 03 00 00       	push   0x304
9f00074f:	89 c3                	mov    ebx,eax
9f000751:	e8 ac 01 00 00       	call   9f000902 <do_syscall3>
9f000756:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33
}
9f000759:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00075c:	c9                   	leave  
9f00075d:	c3                   	ret    
9f00075e:	66 90                	xchg   ax,ax

9f000760 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f000760:	55                   	push   ebp
9f000761:	89 e5                	mov    ebp,esp
9f000763:	53                   	push   ebx
9f000764:	e8 fa 2e 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000769:	05 b3 4c 00 00       	add    eax,0x4cb3
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f00076e:	b8 05 00 00 00       	mov    eax,0x5
9f000773:	bb 01 00 00 00       	mov    ebx,0x1
9f000778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00077b:	89 d1                	mov    ecx,edx
9f00077d:	e8 fc ff ff ff       	call   9f00077e <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f000782:	90                   	nop
9f000783:	5b                   	pop    ebx
9f000784:	5d                   	pop    ebp
9f000785:	c3                   	ret    

9f000786 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f000786:	55                   	push   ebp
9f000787:	89 e5                	mov    ebp,esp
9f000789:	53                   	push   ebx
9f00078a:	83 ec 14             	sub    esp,0x14
9f00078d:	e8 d1 2e 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000792:	05 8a 4c 00 00       	add    eax,0x4c8a
9f000797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00079a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f00079d:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f0007a3:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f0007a7:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f0007aa:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f0007ae:	b8 05 00 00 00       	mov    eax,0x5
9f0007b3:	bb 01 00 00 00       	mov    ebx,0x1
9f0007b8:	8d 55 fa             	lea    edx,[ebp-0x6]
9f0007bb:	89 d1                	mov    ecx,edx
9f0007bd:	e8 fc ff ff ff       	call   9f0007be <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f0007c2:	90                   	nop
9f0007c3:	83 c4 14             	add    esp,0x14
9f0007c6:	5b                   	pop    ebx
9f0007c7:	5d                   	pop    ebp
9f0007c8:	c3                   	ret    

9f0007c9 <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f0007c9:	55                   	push   ebp
9f0007ca:	89 e5                	mov    ebp,esp
9f0007cc:	53                   	push   ebx
9f0007cd:	83 ec 10             	sub    esp,0x10
9f0007d0:	e8 8e 2e 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0007d5:	05 47 4c 00 00       	add    eax,0x4c47
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f0007da:	b8 04 00 00 00       	mov    eax,0x4
9f0007df:	ba 00 00 00 00       	mov    edx,0x0
9f0007e4:	89 d3                	mov    ebx,edx
9f0007e6:	e8 fc ff ff ff       	call   9f0007e7 <getchar+0x1e>
9f0007eb:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f0007ee:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f0007f2:	74 06                	je     9f0007fa <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f0007f4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f0007f8:	eb 0c                	jmp    9f000806 <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f0007fa:	b8 02 03 00 00       	mov    eax,0x302
9f0007ff:	e8 fc ff ff ff       	call   9f000800 <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f000804:	eb d4                	jmp    9f0007da <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f000806:	83 c4 10             	add    esp,0x10
9f000809:	5b                   	pop    ebx
9f00080a:	5d                   	pop    ebp
9f00080b:	c3                   	ret    

9f00080c <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f00080c:	55                   	push   ebp
9f00080d:	89 e5                	mov    ebp,esp
9f00080f:	53                   	push   ebx
9f000810:	83 ec 14             	sub    esp,0x14
9f000813:	e8 4b 2e 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000818:	05 04 4c 00 00       	add    eax,0x4c04
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f00081d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:49
    char lbuf[2]={0,0};
9f000824:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
9f000828:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    
    if (stream!=1)
9f00082c:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f000830:	74 19                	je     9f00084b <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:53
    {
        printI("Stream %u not implemented\n",stream);
9f000832:	83 ec 08             	sub    esp,0x8
9f000835:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000838:	8d 90 66 f9 ff ff    	lea    edx,[eax-0x69a]
9f00083e:	52                   	push   edx
9f00083f:	89 c3                	mov    ebx,eax
9f000841:	e8 48 03 00 00       	call   9f000b8e <printI>
9f000846:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54 (discriminator 1)
        getsError: goto getsError;
9f000849:	eb fe                	jmp    9f000849 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f00084b:	b8 04 00 00 00       	mov    eax,0x4
9f000850:	ba 00 00 00 00       	mov    edx,0x0
9f000855:	89 d3                	mov    ebx,edx
9f000857:	e8 fc ff ff ff       	call   9f000858 <gets+0x4c>
9f00085c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
        if (inchar=='\b' && len>0)
9f00085f:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f000863:	75 17                	jne    9f00087c <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60 (discriminator 1)
9f000865:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000869:	7e 11                	jle    9f00087c <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:62
        {
            buffer[len]=0;
9f00086b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00086e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000871:	01 d0                	add    eax,edx
9f000873:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            len--;
9f000876:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f00087a:	eb 43                	jmp    9f0008bf <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
        }
        else if (inchar!=0)
9f00087c:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f000880:	74 33                	je     9f0008b5 <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:67
        {
            lbuf[0]=inchar;
9f000882:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f000886:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:69
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f000889:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00088c:	8d 50 01             	lea    edx,[eax+0x1]
9f00088f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000892:	89 c2                	mov    edx,eax
9f000894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000897:	01 c2                	add    edx,eax
9f000899:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f00089d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f00089f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0008a2:	83 c0 01             	add    eax,0x1
9f0008a5:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f0008a8:	7d 06                	jge    9f0008b0 <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71 (discriminator 1)
9f0008aa:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f0008ae:	75 9b                	jne    9f00084b <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:73
            
                return len;
9f0008b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0008b3:	eb 0c                	jmp    9f0008c1 <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:76
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f0008b5:	b8 02 03 00 00       	mov    eax,0x302
9f0008ba:	e8 fc ff ff ff       	call   9f0008bb <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:81 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f0008bf:	eb 8a                	jmp    9f00084b <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82
}
9f0008c1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0008c4:	c9                   	leave  
9f0008c5:	c3                   	ret    
9f0008c6:	66 90                	xchg   ax,ax

9f0008c8 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:17
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f0008c8:	55                   	push   ebp
9f0008c9:	89 e5                	mov    ebp,esp
9f0008cb:	56                   	push   esi
9f0008cc:	53                   	push   ebx
9f0008cd:	83 ec 10             	sub    esp,0x10
9f0008d0:	e8 8e 2d 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0008d5:	05 47 4b 00 00       	add    eax,0x4b47
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
    int retVal=0;
9f0008da:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f0008e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0008e4:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0008e7:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0008ea:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0008ed:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f0008f0:	e8 fc ff ff ff       	call   9f0008f1 <do_syscall4+0x29>
9f0008f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    return retVal;
9f0008f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
}
9f0008fb:	83 c4 10             	add    esp,0x10
9f0008fe:	5b                   	pop    ebx
9f0008ff:	5e                   	pop    esi
9f000900:	5d                   	pop    ebp
9f000901:	c3                   	ret    

9f000902 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:24

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f000902:	55                   	push   ebp
9f000903:	89 e5                	mov    ebp,esp
9f000905:	56                   	push   esi
9f000906:	53                   	push   ebx
9f000907:	83 ec 10             	sub    esp,0x10
9f00090a:	e8 54 2d 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00090f:	05 0d 4b 00 00       	add    eax,0x4b0d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25
    int retVal=0;
9f000914:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f00091b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00091e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000921:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000924:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f000927:	be 00 00 00 00       	mov    esi,0x0
9f00092c:	e8 fc ff ff ff       	call   9f00092d <do_syscall3+0x2b>
9f000931:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    return retVal;
9f000934:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
}
9f000937:	83 c4 10             	add    esp,0x10
9f00093a:	5b                   	pop    ebx
9f00093b:	5e                   	pop    esi
9f00093c:	5d                   	pop    ebp
9f00093d:	c3                   	ret    

9f00093e <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:31

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f00093e:	55                   	push   ebp
9f00093f:	89 e5                	mov    ebp,esp
9f000941:	56                   	push   esi
9f000942:	53                   	push   ebx
9f000943:	83 ec 10             	sub    esp,0x10
9f000946:	e8 18 2d 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00094b:	05 d1 4a 00 00       	add    eax,0x4ad1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32
    int retVal=0;
9f000950:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    SYSCALL2(callnum, param1, param2, retVal);
9f000957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00095a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00095d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000960:	ba 00 00 00 00       	mov    edx,0x0
9f000965:	be 00 00 00 00       	mov    esi,0x0
9f00096a:	e8 fc ff ff ff       	call   9f00096b <do_syscall2+0x2d>
9f00096f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    return retVal;
9f000972:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
}
9f000975:	83 c4 10             	add    esp,0x10
9f000978:	5b                   	pop    ebx
9f000979:	5e                   	pop    esi
9f00097a:	5d                   	pop    ebp
9f00097b:	c3                   	ret    

9f00097c <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:38

int do_syscall1(int callnum, uint32_t param1)
{
9f00097c:	55                   	push   ebp
9f00097d:	89 e5                	mov    ebp,esp
9f00097f:	56                   	push   esi
9f000980:	53                   	push   ebx
9f000981:	83 ec 10             	sub    esp,0x10
9f000984:	e8 da 2c 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000989:	05 93 4a 00 00       	add    eax,0x4a93
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39
    int retVal=0;
9f00098e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    SYSCALL1(callnum, param1, retVal);
9f000995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000998:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00099b:	b9 00 00 00 00       	mov    ecx,0x0
9f0009a0:	ba 00 00 00 00       	mov    edx,0x0
9f0009a5:	be 00 00 00 00       	mov    esi,0x0
9f0009aa:	e8 fc ff ff ff       	call   9f0009ab <do_syscall1+0x2f>
9f0009af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    return retVal;
9f0009b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
}
9f0009b5:	83 c4 10             	add    esp,0x10
9f0009b8:	5b                   	pop    ebx
9f0009b9:	5e                   	pop    esi
9f0009ba:	5d                   	pop    ebp
9f0009bb:	c3                   	ret    

9f0009bc <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:45

int do_syscall0(int callnum)
{
9f0009bc:	55                   	push   ebp
9f0009bd:	89 e5                	mov    ebp,esp
9f0009bf:	56                   	push   esi
9f0009c0:	53                   	push   ebx
9f0009c1:	83 ec 10             	sub    esp,0x10
9f0009c4:	e8 9a 2c 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0009c9:	05 53 4a 00 00       	add    eax,0x4a53
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46
    int retVal=0;
9f0009ce:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    SYSCALL0(callnum, retVal);
9f0009d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0009d8:	bb 00 00 00 00       	mov    ebx,0x0
9f0009dd:	b9 00 00 00 00       	mov    ecx,0x0
9f0009e2:	ba 00 00 00 00       	mov    edx,0x0
9f0009e7:	be 00 00 00 00       	mov    esi,0x0
9f0009ec:	e8 fc ff ff ff       	call   9f0009ed <do_syscall0+0x31>
9f0009f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    return retVal;
9f0009f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
}
9f0009f7:	83 c4 10             	add    esp,0x10
9f0009fa:	5b                   	pop    ebx
9f0009fb:	5e                   	pop    esi
9f0009fc:	5d                   	pop    ebp
9f0009fd:	c3                   	ret    

9f0009fe <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:52

VISIBLE void __attribute__((constructor)) libc_init()
{
9f0009fe:	55                   	push   ebp
9f0009ff:	89 e5                	mov    ebp,esp
9f000a01:	53                   	push   ebx
9f000a02:	83 ec 04             	sub    esp,0x4
9f000a05:	e8 86 2c 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f000a0a:	81 c3 12 4a 00 00    	add    ebx,0x4a12
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f000a10:	83 ec 08             	sub    esp,0x8
9f000a13:	8d 83 84 f9 ff ff    	lea    eax,[ebx-0x67c]
9f000a19:	50                   	push   eax
9f000a1a:	68 00 00 00 02       	push   0x2000000
9f000a1f:	e8 9e 01 00 00       	call   9f000bc2 <printdI>
9f000a24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    if (!libcInitialized)
9f000a27:	0f b6 83 38 00 00 00 	movzx  eax,BYTE PTR [ebx+0x38]
9f000a2e:	83 f0 01             	xor    eax,0x1
9f000a31:	84 c0                	test   al,al
9f000a33:	74 70                	je     9f000aa5 <libc_init+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:56
    {
        initmalloc();
9f000a35:	e8 ca 08 00 00       	call   9f001304 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f000a3a:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f000a3d:	89 c2                	mov    edx,eax
9f000a3f:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000a45:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        do_syscall0(SYSCALL_INVALID);
9f000a47:	83 ec 0c             	sub    esp,0xc
9f000a4a:	6a 00                	push   0x0
9f000a4c:	e8 6b ff ff ff       	call   9f0009bc <do_syscall0>
9f000a51:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f000a54:	8d 83 a1 b6 ff ff    	lea    eax,[ebx-0x495f]
9f000a5a:	83 ec 08             	sub    esp,0x8
9f000a5d:	50                   	push   eax
9f000a5e:	68 63 01 00 00       	push   0x163
9f000a63:	e8 14 ff ff ff       	call   9f00097c <do_syscall1>
9f000a68:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        libcInitialized = true;
9f000a6b:	c6 83 38 00 00 00 01 	mov    BYTE PTR [ebx+0x38],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        printBuffer = mallocI(0x1000);
9f000a72:	83 ec 0c             	sub    esp,0xc
9f000a75:	68 00 10 00 00       	push   0x1000
9f000a7a:	e8 b1 09 00 00       	call   9f001430 <mallocI>
9f000a7f:	83 c4 10             	add    esp,0x10
9f000a82:	89 c2                	mov    edx,eax
9f000a84:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000a8a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f000a8c:	83 ec 08             	sub    esp,0x8
9f000a8f:	8d 83 9c f9 ff ff    	lea    eax,[ebx-0x664]
9f000a95:	50                   	push   eax
9f000a96:	68 00 00 00 02       	push   0x2000000
9f000a9b:	e8 22 01 00 00       	call   9f000bc2 <printdI>
9f000aa0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f000aa3:	eb 12                	jmp    9f000ab7 <libc_init+0xb9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f000aa5:	83 ec 0c             	sub    esp,0xc
9f000aa8:	8d 83 b4 f9 ff ff    	lea    eax,[ebx-0x64c]
9f000aae:	50                   	push   eax
9f000aaf:	e8 da 00 00 00       	call   9f000b8e <printI>
9f000ab4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
}
9f000ab7:	90                   	nop
9f000ab8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000abb:	c9                   	leave  
9f000abc:	c3                   	ret    

9f000abd <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70

void __attribute__((destructor)) libc_cleanup(void)
{
9f000abd:	55                   	push   ebp
9f000abe:	89 e5                	mov    ebp,esp
9f000ac0:	53                   	push   ebx
9f000ac1:	83 ec 04             	sub    esp,0x4
9f000ac4:	e8 9a 2b 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000ac9:	05 53 49 00 00       	add    eax,0x4953
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71
    malloc_cleanup();
9f000ace:	89 c3                	mov    ebx,eax
9f000ad0:	e8 6a 0b 00 00       	call   9f00163f <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:72
}
9f000ad5:	90                   	nop
9f000ad6:	83 c4 04             	add    esp,0x4
9f000ad9:	5b                   	pop    ebx
9f000ada:	5d                   	pop    ebp
9f000adb:	c3                   	ret    

9f000adc <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75

VISIBLE int print(const char *format, ...)
{
9f000adc:	55                   	push   ebp
9f000add:	89 e5                	mov    ebp,esp
9f000adf:	53                   	push   ebx
9f000ae0:	83 ec 14             	sub    esp,0x14
9f000ae3:	e8 a8 2b 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f000ae8:	81 c3 34 49 00 00    	add    ebx,0x4934
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77
    va_list args;
    va_start( args, format );
9f000aee:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000af1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79
    
    int size = vsprintf(printBuffer, format, args);
9f000af4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000af7:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000afd:	8b 00                	mov    eax,DWORD PTR [eax]
9f000aff:	83 ec 04             	sub    esp,0x4
9f000b02:	52                   	push   edx
9f000b03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b06:	50                   	push   eax
9f000b07:	e8 b5 10 00 00       	call   9f001bc1 <vsprintf>
9f000b0c:	83 c4 10             	add    esp,0x10
9f000b0f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:80
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000b12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000b15:	8b 93 ec ff ff ff    	mov    edx,DWORD PTR [ebx-0x14]
9f000b1b:	8b 12                	mov    edx,DWORD PTR [edx]
9f000b1d:	50                   	push   eax
9f000b1e:	52                   	push   edx
9f000b1f:	6a 01                	push   0x1
9f000b21:	6a 05                	push   0x5
9f000b23:	e8 da fd ff ff       	call   9f000902 <do_syscall3>
9f000b28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    return 0;
9f000b2b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:82
}
9f000b30:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b33:	c9                   	leave  
9f000b34:	c3                   	ret    

9f000b35 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85

VISIBLE int printf(const char *format, ...)
{
9f000b35:	55                   	push   ebp
9f000b36:	89 e5                	mov    ebp,esp
9f000b38:	53                   	push   ebx
9f000b39:	83 ec 14             	sub    esp,0x14
9f000b3c:	e8 4f 2b 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f000b41:	81 c3 db 48 00 00    	add    ebx,0x48db
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:87
    va_list args;
    va_start( args, format );
9f000b47:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000b4a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89
    
    int size = vsprintf(printBuffer, format, args);
9f000b4d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000b50:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000b56:	8b 00                	mov    eax,DWORD PTR [eax]
9f000b58:	83 ec 04             	sub    esp,0x4
9f000b5b:	52                   	push   edx
9f000b5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b5f:	50                   	push   eax
9f000b60:	e8 5c 10 00 00       	call   9f001bc1 <vsprintf>
9f000b65:	83 c4 10             	add    esp,0x10
9f000b68:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:90
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000b6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000b6e:	8b 93 ec ff ff ff    	mov    edx,DWORD PTR [ebx-0x14]
9f000b74:	8b 12                	mov    edx,DWORD PTR [edx]
9f000b76:	50                   	push   eax
9f000b77:	52                   	push   edx
9f000b78:	6a 01                	push   0x1
9f000b7a:	6a 05                	push   0x5
9f000b7c:	e8 81 fd ff ff       	call   9f000902 <do_syscall3>
9f000b81:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
    //do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
    return 0;
9f000b84:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
}
9f000b89:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b8c:	c9                   	leave  
9f000b8d:	c3                   	ret    

9f000b8e <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:96

int printI(const char *format, ...)
{
9f000b8e:	55                   	push   ebp
9f000b8f:	89 e5                	mov    ebp,esp
9f000b91:	83 ec 10             	sub    esp,0x10
9f000b94:	e8 ca 2a 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000b99:	05 83 48 00 00       	add    eax,0x4883
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98
    va_list args;
    va_start( args, format );
9f000b9e:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000ba1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:99
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f000ba4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000ba7:	89 c2                	mov    edx,eax
9f000ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000bac:	52                   	push   edx
9f000bad:	50                   	push   eax
9f000bae:	68 00 03 00 00       	push   0x300
9f000bb3:	e8 86 fd ff ff       	call   9f00093e <do_syscall2>
9f000bb8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    return 0;
9f000bbb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
}
9f000bc0:	c9                   	leave  
9f000bc1:	c3                   	ret    

9f000bc2 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f000bc2:	55                   	push   ebp
9f000bc3:	89 e5                	mov    ebp,esp
9f000bc5:	83 ec 10             	sub    esp,0x10
9f000bc8:	e8 96 2a 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000bcd:	05 4f 48 00 00       	add    eax,0x484f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:106
    va_list args;
    va_start( args, format );
9f000bd2:	8d 45 10             	lea    eax,[ebp+0x10]
9f000bd5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f000bd8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000bdb:	89 c2                	mov    edx,eax
9f000bdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000be0:	52                   	push   edx
9f000be1:	50                   	push   eax
9f000be2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000be5:	68 01 03 00 00       	push   0x301
9f000bea:	e8 13 fd ff ff       	call   9f000902 <do_syscall3>
9f000bef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    return 0;
9f000bf2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    va_end(args);
}
9f000bf7:	c9                   	leave  
9f000bf8:	c3                   	ret    

9f000bf9 <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:114

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f000bf9:	55                   	push   ebp
9f000bfa:	89 e5                	mov    ebp,esp
9f000bfc:	56                   	push   esi
9f000bfd:	53                   	push   ebx
9f000bfe:	83 ec 10             	sub    esp,0x10
9f000c01:	e8 5d 2a 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000c06:	05 16 48 00 00       	add    eax,0x4816
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115
    SLEEP_SECONDS(__seconds)
9f000c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000c0e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f000c11:	b8 70 01 00 00       	mov    eax,0x170
9f000c16:	bb 00 00 00 00       	mov    ebx,0x0
9f000c1b:	b9 00 00 00 00       	mov    ecx,0x0
9f000c20:	ba 00 00 00 00       	mov    edx,0x0
9f000c25:	be 00 00 00 00       	mov    esi,0x0
9f000c2a:	e8 fc ff ff ff       	call   9f000c2b <sleep+0x32>
9f000c2f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000c32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000c35:	6b d0 64             	imul   edx,eax,0x64
9f000c38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000c3b:	01 d0                	add    eax,edx
9f000c3d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000c40:	b8 66 01 00 00       	mov    eax,0x166
9f000c45:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000c48:	b9 00 00 00 00       	mov    ecx,0x0
9f000c4d:	ba 00 00 00 00       	mov    edx,0x0
9f000c52:	be 00 00 00 00       	mov    esi,0x0
9f000c57:	e8 fc ff ff ff       	call   9f000c58 <sleep+0x5f>
9f000c5c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:116
    return 0;
9f000c5f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
}
9f000c64:	83 c4 10             	add    esp,0x10
9f000c67:	5b                   	pop    ebx
9f000c68:	5e                   	pop    esi
9f000c69:	5d                   	pop    ebp
9f000c6a:	c3                   	ret    

9f000c6b <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120

void stop()
{
9f000c6b:	55                   	push   ebp
9f000c6c:	89 e5                	mov    ebp,esp
9f000c6e:	e8 f0 29 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000c73:	05 a9 47 00 00       	add    eax,0x47a9
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:121
    do_syscall0(SYSCALL_STOP);
9f000c78:	68 68 01 00 00       	push   0x168
9f000c7d:	e8 3a fd ff ff       	call   9f0009bc <do_syscall0>
9f000c82:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
}
9f000c85:	90                   	nop
9f000c86:	c9                   	leave  
9f000c87:	c3                   	ret    

9f000c88 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f000c88:	55                   	push   ebp
9f000c89:	89 e5                	mov    ebp,esp
9f000c8b:	e8 d3 29 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000c90:	05 8c 47 00 00       	add    eax,0x478c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:126
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f000c95:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000c98:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000c9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000c9e:	51                   	push   ecx
9f000c9f:	52                   	push   edx
9f000ca0:	50                   	push   eax
9f000ca1:	68 67 01 00 00       	push   0x167
9f000ca6:	e8 57 fc ff ff       	call   9f000902 <do_syscall3>
9f000cab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
}
9f000cae:	90                   	nop
9f000caf:	c9                   	leave  
9f000cb0:	c3                   	ret    

9f000cb1 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130

VISIBLE int fork()
{
9f000cb1:	55                   	push   ebp
9f000cb2:	89 e5                	mov    ebp,esp
9f000cb4:	83 ec 10             	sub    esp,0x10
9f000cb7:	e8 a7 29 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000cbc:	05 60 47 00 00       	add    eax,0x4760
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:131
    uint32_t retVal = 0;
9f000cc1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:133
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
9f000cc8:	b8 06 00 00 00       	mov    eax,0x6
9f000ccd:	e8 fc ff ff ff       	call   9f000cce <fork+0x1d>
9f000cd2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134
    return retVal;
9f000cd5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135
}
9f000cd8:	c9                   	leave  
9f000cd9:	c3                   	ret    

9f000cda <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138

VISIBLE int exec(char* path, int argc, char** argv)
{
9f000cda:	55                   	push   ebp
9f000cdb:	89 e5                	mov    ebp,esp
9f000cdd:	83 ec 10             	sub    esp,0x10
9f000ce0:	e8 7e 29 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000ce5:	05 37 47 00 00       	add    eax,0x4737
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139
    int pid=0;
9f000cea:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:140
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f000cf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cf4:	8d 80 da f9 ff ff    	lea    eax,[eax-0x626]
9f000cfa:	50                   	push   eax
9f000cfb:	68 00 00 00 02       	push   0x2000000
9f000d00:	e8 bd fe ff ff       	call   9f000bc2 <printdI>
9f000d05:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f000d08:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000d0b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000d0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000d11:	51                   	push   ecx
9f000d12:	52                   	push   edx
9f000d13:	50                   	push   eax
9f000d14:	6a 59                	push   0x59
9f000d16:	e8 e7 fb ff ff       	call   9f000902 <do_syscall3>
9f000d1b:	83 c4 10             	add    esp,0x10
9f000d1e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    return pid;
9f000d21:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
}
9f000d24:	c9                   	leave  
9f000d25:	c3                   	ret    

9f000d26 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

VISIBLE int execb(char* path)
{
9f000d26:	55                   	push   ebp
9f000d27:	89 e5                	mov    ebp,esp
9f000d29:	53                   	push   ebx
9f000d2a:	83 ec 24             	sub    esp,0x24
9f000d2d:	e8 5e 29 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f000d32:	81 c3 ea 46 00 00    	add    ebx,0x46ea
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    int pid=0, argc=0;
9f000d38:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f000d3f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f000d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000d49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000d4f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151
    char* program;
    program=mallocI(512);
9f000d52:	83 ec 0c             	sub    esp,0xc
9f000d55:	68 00 02 00 00       	push   0x200
9f000d5a:	e8 d1 06 00 00       	call   9f001430 <mallocI>
9f000d5f:	83 c4 10             	add    esp,0x10
9f000d62:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f000d65:	83 ec 08             	sub    esp,0x8
9f000d68:	8d 83 ed f9 ff ff    	lea    eax,[ebx-0x613]
9f000d6e:	50                   	push   eax
9f000d6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f000d72:	e8 91 1b 00 00       	call   9f002908 <strstrI>
9f000d77:	83 c4 10             	add    esp,0x10
9f000d7a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:155
        if (argc==0)
9f000d7d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000d81:	75 44                	jne    9f000dc7 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
        {
            if (spacePtr==0)
9f000d83:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000d87:	75 22                	jne    9f000dab <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:158
                strncpyI(program, path, strlenI(path));
9f000d89:	83 ec 0c             	sub    esp,0xc
9f000d8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d8f:	e8 fd 15 00 00       	call   9f002391 <strlenI>
9f000d94:	83 c4 10             	add    esp,0x10
9f000d97:	83 ec 04             	sub    esp,0x4
9f000d9a:	50                   	push   eax
9f000d9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000da1:	e8 ee 16 00 00       	call   9f002494 <strncpyI>
9f000da6:	83 c4 10             	add    esp,0x10
9f000da9:	eb 1c                	jmp    9f000dc7 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:160
            else
                strncpyI(program, path, spacePtr-path);
9f000dab:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000db1:	29 c2                	sub    edx,eax
9f000db3:	89 d0                	mov    eax,edx
9f000db5:	83 ec 04             	sub    esp,0x4
9f000db8:	50                   	push   eax
9f000db9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000dbc:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000dbf:	e8 d0 16 00 00       	call   9f002494 <strncpyI>
9f000dc4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162
        }
        argc++;
9f000dc7:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164
            
    } while (spacePtr++);
9f000dcb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000dce:	8d 50 01             	lea    edx,[eax+0x1]
9f000dd1:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f000dd4:	85 c0                	test   eax,eax
9f000dd6:	75 8d                	jne    9f000d65 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
    
    argv=mallocI((argc*50)+(argc*4));
9f000dd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000ddb:	6b c0 36             	imul   eax,eax,0x36
9f000dde:	83 ec 0c             	sub    esp,0xc
9f000de1:	50                   	push   eax
9f000de2:	e8 49 06 00 00       	call   9f001430 <mallocI>
9f000de7:	83 c4 10             	add    esp,0x10
9f000dea:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
    int argvPtr=4*argc;
9f000ded:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000df0:	c1 e0 02             	shl    eax,0x2
9f000df3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    spacePtr=path;
9f000df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000df9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169
    for (int cnt=0;cnt<argc; cnt++)
9f000dfc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f000e03:	e9 c8 00 00 00       	jmp    9f000ed0 <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171
    {
        argv[cnt]=(char*)argv+argvPtr;
9f000e08:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f000e0b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f000e12:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000e15:	01 d0                	add    eax,edx
9f000e17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f000e1a:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f000e1d:	01 ca                	add    edx,ecx
9f000e1f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172
        spacePtr=strstrI(spacePtr," ");
9f000e21:	83 ec 08             	sub    esp,0x8
9f000e24:	8d 83 ed f9 ff ff    	lea    eax,[ebx-0x613]
9f000e2a:	50                   	push   eax
9f000e2b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f000e2e:	e8 d5 1a 00 00       	call   9f002908 <strstrI>
9f000e33:	83 c4 10             	add    esp,0x10
9f000e36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
        if (spacePtr)
9f000e39:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000e3d:	74 2f                	je     9f000e6e <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:174
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f000e3f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000e42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f000e45:	29 c2                	sub    edx,eax
9f000e47:	89 d0                	mov    eax,edx
9f000e49:	89 c1                	mov    ecx,eax
9f000e4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f000e4e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f000e55:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000e58:	01 d0                	add    eax,edx
9f000e5a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e5c:	83 ec 04             	sub    esp,0x4
9f000e5f:	51                   	push   ecx
9f000e60:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f000e63:	50                   	push   eax
9f000e64:	e8 2b 16 00 00       	call   9f002494 <strncpyI>
9f000e69:	83 c4 10             	add    esp,0x10
9f000e6c:	eb 31                	jmp    9f000e9f <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f000e6e:	83 ec 0c             	sub    esp,0xc
9f000e71:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f000e74:	e8 18 15 00 00       	call   9f002391 <strlenI>
9f000e79:	83 c4 10             	add    esp,0x10
9f000e7c:	89 c2                	mov    edx,eax
9f000e7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f000e81:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f000e88:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000e8b:	01 c8                	add    eax,ecx
9f000e8d:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e8f:	83 ec 04             	sub    esp,0x4
9f000e92:	52                   	push   edx
9f000e93:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f000e96:	50                   	push   eax
9f000e97:	e8 f8 15 00 00       	call   9f002494 <strncpyI>
9f000e9c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177 (discriminator 2)
        strtrimI(argv[cnt]);
9f000e9f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f000ea2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f000ea9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000eac:	01 d0                	add    eax,edx
9f000eae:	8b 00                	mov    eax,DWORD PTR [eax]
9f000eb0:	83 ec 0c             	sub    esp,0xc
9f000eb3:	50                   	push   eax
9f000eb4:	e8 97 19 00 00       	call   9f002850 <strtrimI>
9f000eb9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:178 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f000ebc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000ebf:	8d 50 01             	lea    edx,[eax+0x1]
9f000ec2:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f000ec5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179 (discriminator 2)
        argvPtr+=50;
9f000ec8:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f000ecc:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169 (discriminator 1)
9f000ed0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f000ed3:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f000ed6:	0f 8c 2c ff ff ff    	jl     9f000e08 <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f000edc:	83 ec 04             	sub    esp,0x4
9f000edf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ee2:	8d 83 ef f9 ff ff    	lea    eax,[ebx-0x611]
9f000ee8:	50                   	push   eax
9f000ee9:	68 00 00 00 02       	push   0x2000000
9f000eee:	e8 cf fc ff ff       	call   9f000bc2 <printdI>
9f000ef3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:182
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f000ef6:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f000ef9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000efc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000eff:	51                   	push   ecx
9f000f00:	52                   	push   edx
9f000f01:	50                   	push   eax
9f000f02:	68 05 03 00 00       	push   0x305
9f000f07:	e8 f6 f9 ff ff       	call   9f000902 <do_syscall3>
9f000f0c:	83 c4 10             	add    esp,0x10
9f000f0f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f000f12:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189
    freeI(argv);
    freeI(program);
}
9f000f15:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000f18:	c9                   	leave  
9f000f19:	c3                   	ret    

9f000f1a <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:192

VISIBLE int execa(char* path, int argc, char** argv)
{
9f000f1a:	55                   	push   ebp
9f000f1b:	89 e5                	mov    ebp,esp
9f000f1d:	83 ec 10             	sub    esp,0x10
9f000f20:	e8 3e 27 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000f25:	05 f7 44 00 00       	add    eax,0x44f7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:193
    int pid=0;
9f000f2a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:194
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f000f31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f34:	8d 80 03 fa ff ff    	lea    eax,[eax-0x5fd]
9f000f3a:	50                   	push   eax
9f000f3b:	68 00 00 00 02       	push   0x2000000
9f000f40:	e8 7d fc ff ff       	call   9f000bc2 <printdI>
9f000f45:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f000f48:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000f4b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f51:	51                   	push   ecx
9f000f52:	52                   	push   edx
9f000f53:	50                   	push   eax
9f000f54:	68 05 03 00 00       	push   0x305
9f000f59:	e8 a4 f9 ff ff       	call   9f000902 <do_syscall3>
9f000f5e:	83 c4 10             	add    esp,0x10
9f000f61:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:196
    return pid;
9f000f64:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:197
}
9f000f67:	c9                   	leave  
9f000f68:	c3                   	ret    

9f000f69 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200

VISIBLE int waitpid(uint32_t pid)
{
9f000f69:	55                   	push   ebp
9f000f6a:	89 e5                	mov    ebp,esp
9f000f6c:	e8 f2 26 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000f71:	05 ab 44 00 00       	add    eax,0x44ab
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f000f76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f79:	6a 61                	push   0x61
9f000f7b:	e8 fc f9 ff ff       	call   9f00097c <do_syscall1>
9f000f80:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
}
9f000f83:	c9                   	leave  
9f000f84:	c3                   	ret    

9f000f85 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:206


VISIBLE void exit (int status)
{
9f000f85:	55                   	push   ebp
9f000f86:	89 e5                	mov    ebp,esp
9f000f88:	e8 d6 26 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000f8d:	05 8f 44 00 00       	add    eax,0x448f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f000f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f95:	50                   	push   eax
9f000f96:	6a 00                	push   0x0
9f000f98:	6a 01                	push   0x1
9f000f9a:	e8 9f f9 ff ff       	call   9f00093e <do_syscall2>
9f000f9f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:208
}
9f000fa2:	90                   	nop
9f000fa3:	c9                   	leave  
9f000fa4:	c3                   	ret    

9f000fa5 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:212


VISIBLE char* getcwd(char* buf, size_t size)
{
9f000fa5:	55                   	push   ebp
9f000fa6:	89 e5                	mov    ebp,esp
9f000fa8:	e8 b6 26 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000fad:	05 6f 44 00 00       	add    eax,0x446f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:213
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f000fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000fb5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000fb8:	50                   	push   eax
9f000fb9:	6a 4f                	push   0x4f
9f000fbb:	e8 7e f9 ff ff       	call   9f00093e <do_syscall2>
9f000fc0:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:214
}
9f000fc3:	c9                   	leave  
9f000fc4:	c3                   	ret    

9f000fc5 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:218


size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f000fc5:	55                   	push   ebp
9f000fc6:	89 e5                	mov    ebp,esp
9f000fc8:	83 ec 20             	sub    esp,0x20
9f000fcb:	e8 93 26 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f000fd0:	05 4c 44 00 00       	add    eax,0x444c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:221
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f000fd5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
    size_t argc = 0;
9f000fdc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f000fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000fe6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f000fe9:	e9 d8 00 00 00       	jmp    9f0010c6 <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:225
        c = (unsigned char) *p;
9f000fee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000ff1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000ff4:	0f b6 c0             	movzx  eax,al
9f000ff7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226
        switch (state) {
9f000ffa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000ffd:	83 f8 01             	cmp    eax,0x1
9f001000:	74 7e                	je     9f001080 <splitI+0xbb>
9f001002:	83 f8 01             	cmp    eax,0x1
9f001005:	72 0a                	jb     9f001011 <splitI+0x4c>
9f001007:	83 f8 02             	cmp    eax,0x2
9f00100a:	74 45                	je     9f001051 <splitI+0x8c>
9f00100c:	e9 b1 00 00 00       	jmp    9f0010c2 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:228
        case DULL:
            if (ISSPACE(c)) {
9f001011:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001015:	0f 94 c0             	sete   al
9f001018:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f00101b:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f00101f:	84 c0                	test   al,al
9f001021:	0f 85 94 00 00 00    	jne    9f0010bb <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232
                continue;
            }

            if (c == '"') {
9f001027:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f00102b:	75 15                	jne    9f001042 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233
                state = IN_STRING;
9f00102d:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
                start_of_word = p + 1; 
9f001034:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001037:	83 c0 01             	add    eax,0x1
9f00103a:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:235
                continue;
9f00103d:	e9 80 00 00 00       	jmp    9f0010c2 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:237
            }
            state = IN_WORD;
9f001042:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:238
            start_of_word = p;
9f001049:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00104c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:239
            continue;
9f00104f:	eb 71                	jmp    9f0010c2 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:242

        case IN_STRING:
            if (c == '"') {
9f001051:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001055:	75 67                	jne    9f0010be <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:243
                *p = 0;
9f001057:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00105a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:244
                argv[argc++] = start_of_word;
9f00105d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001060:	8d 50 01             	lea    edx,[eax+0x1]
9f001063:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001066:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00106d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001070:	01 c2                	add    edx,eax
9f001072:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001075:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
                state = DULL;
9f001077:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:247
            }
            continue;
9f00107e:	eb 3e                	jmp    9f0010be <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:250

        case IN_WORD:
            if (ISSPACE(c)) {
9f001080:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001084:	0f 94 c0             	sete   al
9f001087:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f00108a:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f00108e:	84 c0                	test   al,al
9f001090:	74 2f                	je     9f0010c1 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:251
                *p = 0;
9f001092:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001095:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
                argv[argc++] = start_of_word;
9f001098:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00109b:	8d 50 01             	lea    edx,[eax+0x1]
9f00109e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0010a1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0010a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0010ab:	01 c2                	add    edx,eax
9f0010ad:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0010b0:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
                state = DULL;
9f0010b2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255
            }
            continue;
9f0010b9:	eb 06                	jmp    9f0010c1 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:229
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f0010bb:	90                   	nop
9f0010bc:	eb 04                	jmp    9f0010c2 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:247
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f0010be:	90                   	nop
9f0010bf:	eb 01                	jmp    9f0010c2 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f0010c1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f0010c2:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224 (discriminator 1)
9f0010c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0010c9:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f0010cc:	73 0e                	jae    9f0010dc <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224 (discriminator 3)
9f0010ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0010d1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0010d4:	84 c0                	test   al,al
9f0010d6:	0f 85 12 ff ff ff    	jne    9f000fee <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f0010dc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0010e0:	74 22                	je     9f001104 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259 (discriminator 1)
9f0010e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0010e5:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f0010e8:	73 1a                	jae    9f001104 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260
        argv[argc++] = start_of_word;
9f0010ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0010ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0010f0:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0010f3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0010fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0010fd:	01 c2                	add    edx,eax
9f0010ff:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001102:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:262

    return argc;
9f001104:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
}
9f001107:	c9                   	leave  
9f001108:	c3                   	ret    

9f001109 <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:266

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001109:	55                   	push   ebp
9f00110a:	89 e5                	mov    ebp,esp
9f00110c:	e8 52 25 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f001111:	05 0b 43 00 00       	add    eax,0x430b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267
    return splitI(buffer, argv, argv_size);
9f001116:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001119:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00111c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00111f:	e8 a1 fe ff ff       	call   9f000fc5 <splitI>
9f001124:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
}
9f001127:	c9                   	leave  
9f001128:	c3                   	ret    

9f001129 <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001129:	55                   	push   ebp
9f00112a:	89 e5                	mov    ebp,esp
9f00112c:	53                   	push   ebx
9f00112d:	81 ec 24 04 00 00    	sub    esp,0x424
9f001133:	e8 58 25 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f001138:	81 c3 e4 42 00 00    	add    ebx,0x42e4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd;
9f00113e:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
9f001144:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001147:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
9f00114d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
    *argc = 0;
9f001150:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001153:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:277
    
    strncpyI(cmd,cmdline,1024);
9f001159:	83 ec 04             	sub    esp,0x4
9f00115c:	68 00 04 00 00       	push   0x400
9f001161:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001164:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
9f00116a:	50                   	push   eax
9f00116b:	e8 24 13 00 00       	call   9f002494 <strncpyI>
9f001170:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:278
    strtrimI(cmd);
9f001173:	83 ec 0c             	sub    esp,0xc
9f001176:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
9f00117c:	50                   	push   eax
9f00117d:	e8 ce 16 00 00       	call   9f002850 <strtrimI>
9f001182:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:281 (discriminator 1)
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f001185:	83 ec 08             	sub    esp,0x8
9f001188:	8d 83 ed f9 ff ff    	lea    eax,[ebx-0x613]
9f00118e:	50                   	push   eax
9f00118f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001192:	e8 71 17 00 00       	call   9f002908 <strstrI>
9f001197:	83 c4 10             	add    esp,0x10
9f00119a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:282 (discriminator 1)
        *argc+=1;
9f00119d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011a0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011a2:	8d 50 01             	lea    edx,[eax+0x1]
9f0011a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011a8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284 (discriminator 1)
    
    } while (spacePtr++);
9f0011aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0011ad:	8d 50 01             	lea    edx,[eax+0x1]
9f0011b0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0011b3:	85 c0                	test   eax,eax
9f0011b5:	75 ce                	jne    9f001185 <cmdlineToArgvI+0x5c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f0011b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011ba:	8b 10                	mov    edx,DWORD PTR [eax]
9f0011bc:	89 d0                	mov    eax,edx
9f0011be:	c1 e0 08             	shl    eax,0x8
9f0011c1:	29 d0                	sub    eax,edx
9f0011c3:	89 c2                	mov    edx,eax
9f0011c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011c8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011ca:	c1 e0 02             	shl    eax,0x2
9f0011cd:	01 d0                	add    eax,edx
9f0011cf:	83 ec 0c             	sub    esp,0xc
9f0011d2:	50                   	push   eax
9f0011d3:	e8 58 02 00 00       	call   9f001430 <mallocI>
9f0011d8:	83 c4 10             	add    esp,0x10
9f0011db:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
    int argvPtr=4* *argc;
9f0011de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011e1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011e3:	c1 e0 02             	shl    eax,0x2
9f0011e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:288
    spacePtr=cmd;
9f0011e9:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
9f0011ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289
    for (int cnt=0;cnt<*argc; cnt++)
9f0011f2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f0011f9:	e9 cb 00 00 00       	jmp    9f0012c9 <cmdlineToArgvI+0x1a0>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
    {
        argv[cnt]=(char*)argv+argvPtr;
9f0011fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001201:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001208:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00120b:	01 d0                	add    eax,edx
9f00120d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f001210:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001213:	01 ca                	add    edx,ecx
9f001215:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292
        spacePtr=strstrI(spacePtr," ");
9f001217:	83 ec 08             	sub    esp,0x8
9f00121a:	8d 83 ed f9 ff ff    	lea    eax,[ebx-0x613]
9f001220:	50                   	push   eax
9f001221:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001224:	e8 df 16 00 00       	call   9f002908 <strstrI>
9f001229:	83 c4 10             	add    esp,0x10
9f00122c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:293
        if (spacePtr)
9f00122f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001233:	74 2f                	je     9f001264 <cmdlineToArgvI+0x13b>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:294
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001235:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001238:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00123b:	29 c2                	sub    edx,eax
9f00123d:	89 d0                	mov    eax,edx
9f00123f:	89 c1                	mov    ecx,eax
9f001241:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001244:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00124b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00124e:	01 d0                	add    eax,edx
9f001250:	8b 00                	mov    eax,DWORD PTR [eax]
9f001252:	83 ec 04             	sub    esp,0x4
9f001255:	51                   	push   ecx
9f001256:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001259:	50                   	push   eax
9f00125a:	e8 35 12 00 00       	call   9f002494 <strncpyI>
9f00125f:	83 c4 10             	add    esp,0x10
9f001262:	eb 31                	jmp    9f001295 <cmdlineToArgvI+0x16c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:296
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001264:	83 ec 0c             	sub    esp,0xc
9f001267:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00126a:	e8 22 11 00 00       	call   9f002391 <strlenI>
9f00126f:	83 c4 10             	add    esp,0x10
9f001272:	89 c2                	mov    edx,eax
9f001274:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001277:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f00127e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001281:	01 c8                	add    eax,ecx
9f001283:	8b 00                	mov    eax,DWORD PTR [eax]
9f001285:	83 ec 04             	sub    esp,0x4
9f001288:	52                   	push   edx
9f001289:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00128c:	50                   	push   eax
9f00128d:	e8 02 12 00 00       	call   9f002494 <strncpyI>
9f001292:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:297 (discriminator 2)
        strtrimI(argv[cnt]);
9f001295:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001298:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00129f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0012a2:	01 d0                	add    eax,edx
9f0012a4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0012a6:	83 ec 0c             	sub    esp,0xc
9f0012a9:	50                   	push   eax
9f0012aa:	e8 a1 15 00 00       	call   9f002850 <strtrimI>
9f0012af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f0012b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0012b5:	8d 50 01             	lea    edx,[eax+0x1]
9f0012b8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0012bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f0012be:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f0012c5:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289 (discriminator 1)
9f0012c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0012cc:	8b 00                	mov    eax,DWORD PTR [eax]
9f0012ce:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f0012d1:	0f 8f 27 ff ff ff    	jg     9f0011fe <cmdlineToArgvI+0xd5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:301
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f0012d7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302
}
9f0012da:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0012dd:	c9                   	leave  
9f0012de:	c3                   	ret    

9f0012df <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:305

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f0012df:	55                   	push   ebp
9f0012e0:	89 e5                	mov    ebp,esp
9f0012e2:	83 ec 08             	sub    esp,0x8
9f0012e5:	e8 79 23 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0012ea:	05 32 41 00 00       	add    eax,0x4132
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:306
    return cmdlineToArgvI(cmdline, argc);
9f0012ef:	83 ec 08             	sub    esp,0x8
9f0012f2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0012f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0012f8:	e8 2c fe ff ff       	call   9f001129 <cmdlineToArgvI>
9f0012fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:307
}
9f001300:	c9                   	leave  
9f001301:	c3                   	ret    
9f001302:	66 90                	xchg   ax,ax

9f001304 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:13
#include "libChrisOS.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
9f001304:	55                   	push   ebp
9f001305:	89 e5                	mov    ebp,esp
9f001307:	53                   	push   ebx
9f001308:	83 ec 04             	sub    esp,0x4
9f00130b:	e8 80 23 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f001310:	81 c3 0c 41 00 00    	add    ebx,0x410c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f001316:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f00131c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00131e:	50                   	push   eax
9f00131f:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001325:	50                   	push   eax
9f001326:	8d 83 18 fa ff ff    	lea    eax,[ebx-0x5e8]
9f00132c:	50                   	push   eax
9f00132d:	68 00 00 00 01       	push   0x1000000
9f001332:	e8 8b f8 ff ff       	call   9f000bc2 <printdI>
9f001337:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    heapBase=0;
9f00133a:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001340:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapCurr=0;
9f001346:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f00134c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapEnd=0;
9f001352:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f001358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    libcTZ=-5;
9f00135e:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
9f001364:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:20

}
9f00136a:	90                   	nop
9f00136b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00136e:	c9                   	leave  
9f00136f:	c3                   	ret    

9f001370 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f001370:	55                   	push   ebp
9f001371:	89 e5                	mov    ebp,esp
9f001373:	83 ec 10             	sub    esp,0x10
9f001376:	e8 e8 22 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00137b:	05 a1 40 00 00       	add    eax,0x40a1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f001380:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001383:	83 c2 20             	add    edx,0x20
9f001386:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f001389:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
9f00138f:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f001391:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f001394:	01 d1                	add    ecx,edx
9f001396:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f00139c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00139e:	39 d1                	cmp    ecx,edx
9f0013a0:	76 4e                	jbe    9f0013f0 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f0013a2:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
9f0013a8:	8b 12                	mov    edx,DWORD PTR [edx]
9f0013aa:	8b 80 e8 ff ff ff    	mov    eax,DWORD PTR [eax-0x18]
9f0013b0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0013b2:	29 c2                	sub    edx,eax
9f0013b4:	89 d0                	mov    eax,edx
9f0013b6:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
        if (newSize== 0 || newSize%PAGE_SIZE)
9f0013b9:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f0013bd:	74 0c                	je     9f0013cb <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32 (discriminator 1)
9f0013bf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0013c2:	25 ff 0f 00 00       	and    eax,0xfff
9f0013c7:	85 c0                	test   eax,eax
9f0013c9:	74 10                	je     9f0013db <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f0013cb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0013ce:	25 00 f0 ff ff       	and    eax,0xfffff000
9f0013d3:	05 00 10 00 00       	add    eax,0x1000
9f0013d8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:37
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
9f0013db:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
9f0013e2:	77 07                	ja     9f0013eb <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
            return ALLOC_REQUEST_SIZE;
9f0013e4:	b8 00 20 03 00       	mov    eax,0x32000
9f0013e9:	eb 0a                	jmp    9f0013f5 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        else
            return newSize;
9f0013eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0013ee:	eb 05                	jmp    9f0013f5 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:43
    }
    else
        return 0;
9f0013f0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:44
}
9f0013f5:	c9                   	leave  
9f0013f6:	c3                   	ret    

9f0013f7 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:47

void freeI(void* fpointer)
{
9f0013f7:	55                   	push   ebp
9f0013f8:	89 e5                	mov    ebp,esp
9f0013fa:	83 ec 10             	sub    esp,0x10
9f0013fd:	e8 61 22 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f001402:	05 1a 40 00 00       	add    eax,0x401a
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:50
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
9f001407:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f00140b:	74 20                	je     9f00142d <freeI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f00140d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001410:	83 e8 10             	sub    eax,0x10
9f001413:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
9f001416:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001419:	8b 00                	mov    eax,DWORD PTR [eax]
9f00141b:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
9f001420:	74 02                	je     9f001424 <freeI+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59 (discriminator 2)
    {
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
9f001422:	eb fe                	jmp    9f001422 <freeI+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
    }
    mp->inUse=false;
9f001424:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001427:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f00142b:	eb 01                	jmp    9f00142e <freeI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f00142d:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
    }
    mp->inUse=false;
}
9f00142e:	c9                   	leave  
9f00142f:	c3                   	ret    

9f001430 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65

void*  mallocI(size_t size)
{
9f001430:	55                   	push   ebp
9f001431:	89 e5                	mov    ebp,esp
9f001433:	53                   	push   ebx
9f001434:	83 ec 24             	sub    esp,0x24
9f001437:	e8 54 22 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f00143c:	81 c3 e0 3f 00 00    	add    ebx,0x3fe0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
9f001442:	83 ec 04             	sub    esp,0x4
9f001445:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001448:	8d 83 3b fa ff ff    	lea    eax,[ebx-0x5c5]
9f00144e:	50                   	push   eax
9f00144f:	68 00 00 00 01       	push   0x1000000
9f001454:	e8 69 f7 ff ff       	call   9f000bc2 <printdI>
9f001459:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    needed = newHeapRequiredToFulfillRequest(size);
9f00145c:	83 ec 0c             	sub    esp,0xc
9f00145f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001462:	e8 09 ff ff ff       	call   9f001370 <newHeapRequiredToFulfillRequest>
9f001467:	83 c4 10             	add    esp,0x10
9f00146a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:74
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f00146d:	83 ec 04             	sub    esp,0x4
9f001470:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001473:	8d 83 4b fa ff ff    	lea    eax,[ebx-0x5b5]
9f001479:	50                   	push   eax
9f00147a:	68 00 00 00 01       	push   0x1000000
9f00147f:	e8 3e f7 ff ff       	call   9f000bc2 <printdI>
9f001484:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    if (needed!=0)      //New heap required
9f001487:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f00148b:	0f 84 ae 00 00 00    	je     9f00153f <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
9f001491:	83 ec 08             	sub    esp,0x8
9f001494:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001497:	68 65 01 00 00       	push   0x165
9f00149c:	e8 db f4 ff ff       	call   9f00097c <do_syscall1>
9f0014a1:	83 c4 10             	add    esp,0x10
9f0014a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f0014a7:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0014ad:	8b 00                	mov    eax,DWORD PTR [eax]
9f0014af:	83 ec 04             	sub    esp,0x4
9f0014b2:	50                   	push   eax
9f0014b3:	8d 83 67 fa ff ff    	lea    eax,[ebx-0x599]
9f0014b9:	50                   	push   eax
9f0014ba:	68 00 00 00 01       	push   0x1000000
9f0014bf:	e8 fe f6 ff ff       	call   9f000bc2 <printdI>
9f0014c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
        heapEnd=allocatedPtr+needed;
9f0014c7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0014ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0014cd:	01 c2                	add    edx,eax
9f0014cf:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0014d5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f0014d7:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0014dd:	8b 00                	mov    eax,DWORD PTR [eax]
9f0014df:	83 ec 0c             	sub    esp,0xc
9f0014e2:	50                   	push   eax
9f0014e3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0014e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0014e9:	8d 83 84 fa ff ff    	lea    eax,[ebx-0x57c]
9f0014ef:	50                   	push   eax
9f0014f0:	68 00 00 00 01       	push   0x1000000
9f0014f5:	e8 c8 f6 ff ff       	call   9f000bc2 <printdI>
9f0014fa:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        if (heapBase==0)    //Hasn't been initialized yet!
9f0014fd:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001503:	8b 00                	mov    eax,DWORD PTR [eax]
9f001505:	85 c0                	test   eax,eax
9f001507:	75 36                	jne    9f00153f <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
        {
            heapCurr=allocatedPtr;
9f001509:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f00150f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001512:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
            heapBase=allocatedPtr;
9f001514:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f00151a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00151d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f00151f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f001525:	8b 00                	mov    eax,DWORD PTR [eax]
9f001527:	83 ec 04             	sub    esp,0x4
9f00152a:	50                   	push   eax
9f00152b:	8d 83 c4 fa ff ff    	lea    eax,[ebx-0x53c]
9f001531:	50                   	push   eax
9f001532:	68 00 00 00 01       	push   0x1000000
9f001537:	e8 86 f6 ff ff       	call   9f000bc2 <printdI>
9f00153c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f00153f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f001545:	8b 00                	mov    eax,DWORD PTR [eax]
9f001547:	83 ec 04             	sub    esp,0x4
9f00154a:	50                   	push   eax
9f00154b:	8d 83 00 fb ff ff    	lea    eax,[ebx-0x500]
9f001551:	50                   	push   eax
9f001552:	68 00 00 00 01       	push   0x1000000
9f001557:	e8 66 f6 ff ff       	call   9f000bc2 <printdI>
9f00155c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90
    heapPtr = (heaprec_t*)heapCurr;
9f00155f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f001565:	8b 00                	mov    eax,DWORD PTR [eax]
9f001567:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    heapPtr->marker=ALLOC_MARKER_VALUE;
9f00156a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00156d:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    heapPtr->len=size;
9f001573:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001576:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001579:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    heapPtr->inUse=true;
9f00157c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00157f:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
9f001583:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f001589:	8b 00                	mov    eax,DWORD PTR [eax]
9f00158b:	6a 10                	push   0x10
9f00158d:	50                   	push   eax
9f00158e:	8d 83 28 fb ff ff    	lea    eax,[ebx-0x4d8]
9f001594:	50                   	push   eax
9f001595:	68 00 00 00 01       	push   0x1000000
9f00159a:	e8 23 f6 ff ff       	call   9f000bc2 <printdI>
9f00159f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
9f0015a2:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0015a8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015aa:	83 c0 10             	add    eax,0x10
9f0015ad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
9f0015b0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0015b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0015b6:	8d 50 10             	lea    edx,[eax+0x10]
9f0015b9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0015bc:	01 d0                	add    eax,edx
9f0015be:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
9f0015c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0015c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0015c7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    heapCurr+=size+(sizeof(heaprec_t));
9f0015ca:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0015d0:	8b 10                	mov    edx,DWORD PTR [eax]
9f0015d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0015d5:	01 d0                	add    eax,edx
9f0015d7:	8d 50 10             	lea    edx,[eax+0x10]
9f0015da:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0015e0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f0015e2:	83 ec 04             	sub    esp,0x4
9f0015e5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0015e8:	8d 83 60 fb ff ff    	lea    eax,[ebx-0x4a0]
9f0015ee:	50                   	push   eax
9f0015ef:	68 00 00 00 01       	push   0x1000000
9f0015f4:	e8 c9 f5 ff ff       	call   9f000bc2 <printdI>
9f0015f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    return retVal;
9f0015fc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101
}
9f0015ff:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001602:	c9                   	leave  
9f001603:	c3                   	ret    

9f001604 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f001604:	55                   	push   ebp
9f001605:	89 e5                	mov    ebp,esp
9f001607:	83 ec 08             	sub    esp,0x8
9f00160a:	e8 54 20 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00160f:	05 0d 3e 00 00       	add    eax,0x3e0d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:105
    return mallocI(size);
9f001614:	83 ec 0c             	sub    esp,0xc
9f001617:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00161a:	e8 11 fe ff ff       	call   9f001430 <mallocI>
9f00161f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
}
9f001622:	c9                   	leave  
9f001623:	c3                   	ret    

9f001624 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f001624:	55                   	push   ebp
9f001625:	89 e5                	mov    ebp,esp
9f001627:	e8 37 20 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00162c:	05 f0 3d 00 00       	add    eax,0x3df0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110
    freeI(fpointer);
9f001631:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001634:	e8 be fd ff ff       	call   9f0013f7 <freeI>
9f001639:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:111
}
9f00163c:	90                   	nop
9f00163d:	c9                   	leave  
9f00163e:	c3                   	ret    

9f00163f <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:114

void malloc_cleanup()
{
9f00163f:	55                   	push   ebp
9f001640:	89 e5                	mov    ebp,esp
9f001642:	53                   	push   ebx
9f001643:	83 ec 04             	sub    esp,0x4
9f001646:	e8 18 20 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00164b:	05 d1 3d 00 00       	add    eax,0x3dd1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    do_syscall1(SYSCALL_FREE, heapBase);
9f001650:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
9f001656:	8b 12                	mov    edx,DWORD PTR [edx]
9f001658:	83 ec 08             	sub    esp,0x8
9f00165b:	52                   	push   edx
9f00165c:	68 64 01 00 00       	push   0x164
9f001661:	89 c3                	mov    ebx,eax
9f001663:	e8 14 f3 ff ff       	call   9f00097c <do_syscall1>
9f001668:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:116
9f00166b:	90                   	nop
9f00166c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00166f:	c9                   	leave  
9f001670:	c3                   	ret    
9f001671:	66 90                	xchg   ax,ax
9f001673:	90                   	nop

9f001674 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:11
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f001674:	55                   	push   ebp
9f001675:	89 e5                	mov    ebp,esp
9f001677:	83 ec 20             	sub    esp,0x20
9f00167a:	e8 e4 1f 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00167f:	05 9d 3d 00 00       	add    eax,0x3d9d
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:14
    bool dw,dd;
    
    dd=n%4==0;
9f001684:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001687:	83 e0 03             	and    eax,0x3
9f00168a:	85 c0                	test   eax,eax
9f00168c:	0f 94 c0             	sete   al
9f00168f:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    dw=n%2==0;
9f001692:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001695:	83 e0 01             	and    eax,0x1
9f001698:	85 c0                	test   eax,eax
9f00169a:	0f 94 c0             	sete   al
9f00169d:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    if (dd)
9f0016a0:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f0016a4:	74 7d                	je     9f001723 <memcpy+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:18
    {
        n /=4;
9f0016a6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0016a9:	c1 e8 02             	shr    eax,0x2
9f0016ac:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
        const uint32_t *f = src;
9f0016af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0016b2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        uint32_t *t = dest;
9f0016b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0016b8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:22

        if (f < t) {
9f0016bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0016be:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0016c1:	73 4b                	jae    9f00170e <memcpy+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23
                f += n;
9f0016c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0016c6:	c1 e0 02             	shl    eax,0x2
9f0016c9:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                t += n;
9f0016cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0016cf:	c1 e0 02             	shl    eax,0x2
9f0016d2:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                while ( (n)-- > 0)
9f0016d5:	eb 12                	jmp    9f0016e9 <memcpy+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                        *--t = *--f;
9f0016d7:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f0016db:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f0016df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0016e2:	8b 10                	mov    edx,DWORD PTR [eax]
9f0016e4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0016e7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f0016e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0016ec:	8d 50 ff             	lea    edx,[eax-0x1]
9f0016ef:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0016f2:	85 c0                	test   eax,eax
9f0016f4:	75 e1                	jne    9f0016d7 <memcpy+0x63>
9f0016f6:	eb 23                	jmp    9f00171b <memcpy+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f0016f8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0016fb:	8d 50 04             	lea    edx,[eax+0x4]
9f0016fe:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f001701:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f001704:	8d 4a 04             	lea    ecx,[edx+0x4]
9f001707:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f00170a:	8b 12                	mov    edx,DWORD PTR [edx]
9f00170c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:28
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f00170e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001711:	8d 50 ff             	lea    edx,[eax-0x1]
9f001714:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001717:	85 c0                	test   eax,eax
9f001719:	75 dd                	jne    9f0016f8 <memcpy+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *t++ = *f++;
        return dest;
9f00171b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00171e:	e9 ea 00 00 00       	jmp    9f00180d <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:32
    }
    else if (dw)
9f001723:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f001727:	74 79                	je     9f0017a2 <memcpy+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:34
    {
        n /=2;
9f001729:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00172c:	d1 e8                	shr    eax,1
9f00172e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
        const uint32_t *f = src;
9f001731:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001734:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        uint32_t *t = dest;
9f001737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00173a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:38

        if (f < t) {
9f00173d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001740:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f001743:	73 4b                	jae    9f001790 <memcpy+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39
                f += n;
9f001745:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001748:	c1 e0 02             	shl    eax,0x2
9f00174b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                t += n;
9f00174e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001751:	c1 e0 02             	shl    eax,0x2
9f001754:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                while ( (n)-- > 0)
9f001757:	eb 12                	jmp    9f00176b <memcpy+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                        *--t = *--f;
9f001759:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f00175d:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f001761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001764:	8b 10                	mov    edx,DWORD PTR [eax]
9f001766:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001769:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f00176b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00176e:	8d 50 ff             	lea    edx,[eax-0x1]
9f001771:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001774:	85 c0                	test   eax,eax
9f001776:	75 e1                	jne    9f001759 <memcpy+0xe5>
9f001778:	eb 23                	jmp    9f00179d <memcpy+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f00177a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00177d:	8d 50 04             	lea    edx,[eax+0x4]
9f001780:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001783:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001786:	8d 4a 04             	lea    ecx,[edx+0x4]
9f001789:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f00178c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00178e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:44
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f001790:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001793:	8d 50 ff             	lea    edx,[eax-0x1]
9f001796:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001799:	85 c0                	test   eax,eax
9f00179b:	75 dd                	jne    9f00177a <memcpy+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *t++ = *f++;
        return dest;
9f00179d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017a0:	eb 6b                	jmp    9f00180d <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:50
    }
    else
    {
        const char *f = src;
9f0017a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0017a5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
        char *t = dest;
9f0017a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017ab:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:53

        if (f < t) {
9f0017ae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0017b1:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f0017b4:	73 47                	jae    9f0017fd <memcpy+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54
                f += n;
9f0017b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0017b9:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                t += n;
9f0017bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0017bf:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                while (n-- > 0)
9f0017c2:	eb 13                	jmp    9f0017d7 <memcpy+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                        *--t = *--f;
9f0017c4:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f0017c8:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f0017cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0017cf:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0017d2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0017d5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f0017d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0017da:	8d 50 ff             	lea    edx,[eax-0x1]
9f0017dd:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0017e0:	85 c0                	test   eax,eax
9f0017e2:	75 e0                	jne    9f0017c4 <memcpy+0x150>
9f0017e4:	eb 24                	jmp    9f00180a <memcpy+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f0017e6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0017e9:	8d 50 01             	lea    edx,[eax+0x1]
9f0017ec:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0017ef:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0017f2:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0017f5:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f0017f8:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0017fb:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:59
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f0017fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001800:	8d 50 ff             	lea    edx,[eax-0x1]
9f001803:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001806:	85 c0                	test   eax,eax
9f001808:	75 dc                	jne    9f0017e6 <memcpy+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *t++ = *f++;
        return dest;
9f00180a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:63
    }
}
9f00180d:	c9                   	leave  
9f00180e:	c3                   	ret    
9f00180f:	90                   	nop

9f001810 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
9f001810:	55                   	push   ebp
9f001811:	89 e5                	mov    ebp,esp
9f001813:	83 ec 20             	sub    esp,0x20
9f001816:	e8 48 1e 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00181b:	05 01 3c 00 00       	add    eax,0x3c01
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f001820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001823:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f001826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001829:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f00182c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00182f:	c1 e0 10             	shl    eax,0x10
9f001832:	89 c2                	mov    edx,eax
9f001834:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001837:	c1 e0 08             	shl    eax,0x8
9f00183a:	09 c2                	or     edx,eax
9f00183c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00183f:	09 d0                	or     eax,edx
9f001841:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f001845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001848:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f00184b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00184e:	c1 e0 18             	shl    eax,0x18
9f001851:	89 c2                	mov    edx,eax
9f001853:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001856:	c1 e0 10             	shl    eax,0x10
9f001859:	09 c2                	or     edx,eax
9f00185b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00185e:	c1 e0 08             	shl    eax,0x8
9f001861:	09 d0                	or     eax,edx
9f001863:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f001866:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f001869:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00186c:	83 e0 03             	and    eax,0x3
9f00186f:	85 c0                	test   eax,eax
9f001871:	75 1c                	jne    9f00188f <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f001873:	eb 0e                	jmp    9f001883 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f001875:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001878:	8d 50 04             	lea    edx,[eax+0x4]
9f00187b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00187e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f001881:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f001883:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f001887:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00188b:	75 e8                	jne    9f001875 <memsetI+0x65>
9f00188d:	eb 43                	jmp    9f0018d2 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f00188f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001892:	83 e0 01             	and    eax,0x1
9f001895:	85 c0                	test   eax,eax
9f001897:	75 2c                	jne    9f0018c5 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f001899:	eb 10                	jmp    9f0018ab <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f00189b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00189e:	8d 50 02             	lea    edx,[eax+0x2]
9f0018a1:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f0018a4:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f0018a8:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f0018ab:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f0018af:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0018b3:	75 e6                	jne    9f00189b <memsetI+0x8b>
9f0018b5:	eb 1b                	jmp    9f0018d2 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f0018b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0018ba:	8d 50 01             	lea    edx,[eax+0x1]
9f0018bd:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0018c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0018c3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f0018c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0018c8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0018cb:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0018ce:	85 c0                	test   eax,eax
9f0018d0:	75 e5                	jne    9f0018b7 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f0018d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f0018d5:	c9                   	leave  
9f0018d6:	c3                   	ret    

9f0018d7 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f0018d7:	55                   	push   ebp
9f0018d8:	89 e5                	mov    ebp,esp
9f0018da:	e8 84 1d 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0018df:	05 3d 3b 00 00       	add    eax,0x3b3d
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f0018e4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0018e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0018ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0018ed:	e8 1e ff ff ff       	call   9f001810 <memsetI>
9f0018f2:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f0018f5:	c9                   	leave  
9f0018f6:	c3                   	ret    
9f0018f7:	90                   	nop

9f0018f8 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f0018f8:	55                   	push   ebp
9f0018f9:	89 e5                	mov    ebp,esp
9f0018fb:	53                   	push   ebx
9f0018fc:	83 ec 04             	sub    esp,0x4
9f0018ff:	e8 5f 1d 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f001904:	05 18 3b 00 00       	add    eax,0x3b18
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f001909:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00190c:	83 ec 08             	sub    esp,0x8
9f00190f:	52                   	push   edx
9f001910:	6a 07                	push   0x7
9f001912:	89 c3                	mov    ebx,eax
9f001914:	e8 63 f0 ff ff       	call   9f00097c <do_syscall1>
9f001919:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:13
9f00191c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00191f:	c9                   	leave  
9f001920:	c3                   	ret    
9f001921:	66 90                	xchg   ax,ax
9f001923:	90                   	nop

9f001924 <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:11

#include <stdarg.h>
#include "strings.h"

static int skip_atoi(const char **s)
{
9f001924:	55                   	push   ebp
9f001925:	89 e5                	mov    ebp,esp
9f001927:	53                   	push   ebx
9f001928:	83 ec 10             	sub    esp,0x10
9f00192b:	e8 33 1d 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f001930:	05 ec 3a 00 00       	add    eax,0x3aec
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
	int i = 0;
9f001935:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

	while (ISDIGIT(**s))
9f00193c:	eb 29                	jmp    9f001967 <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15
		i = i * 10 + *((*s)++) - '0';
9f00193e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f001941:	89 d0                	mov    eax,edx
9f001943:	c1 e0 02             	shl    eax,0x2
9f001946:	01 d0                	add    eax,edx
9f001948:	01 c0                	add    eax,eax
9f00194a:	89 c3                	mov    ebx,eax
9f00194c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00194f:	8b 00                	mov    eax,DWORD PTR [eax]
9f001951:	8d 48 01             	lea    ecx,[eax+0x1]
9f001954:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001957:	89 0a                	mov    DWORD PTR [edx],ecx
9f001959:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00195c:	0f be c0             	movsx  eax,al
9f00195f:	01 d8                	add    eax,ebx
9f001961:	83 e8 30             	sub    eax,0x30
9f001964:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

static int skip_atoi(const char **s)
{
	int i = 0;

	while (ISDIGIT(**s))
9f001967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00196a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00196c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00196f:	0f be c0             	movsx  eax,al
9f001972:	83 e8 30             	sub    eax,0x30
9f001975:	83 f8 09             	cmp    eax,0x9
9f001978:	76 c4                	jbe    9f00193e <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
	return i;
9f00197a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
}
9f00197d:	83 c4 10             	add    esp,0x10
9f001980:	5b                   	pop    ebx
9f001981:	5d                   	pop    ebp
9f001982:	c3                   	ret    

9f001983 <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:35
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f001983:	55                   	push   ebp
9f001984:	89 e5                	mov    ebp,esp
9f001986:	56                   	push   esi
9f001987:	53                   	push   ebx
9f001988:	83 ec 60             	sub    esp,0x60
9f00198b:	e8 00 1d 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f001990:	81 c3 8c 3a 00 00    	add    ebx,0x3a8c
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:45
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f001996:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001999:	83 e0 20             	and    eax,0x20
9f00199c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	if (type & LEFT)
9f00199f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0019a2:	83 e0 10             	and    eax,0x10
9f0019a5:	85 c0                	test   eax,eax
9f0019a7:	74 04                	je     9f0019ad <number+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
		type &= ~ZEROPAD;
9f0019a9:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
	if (base < 2 || base > 16)
9f0019ad:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f0019b1:	7e 06                	jle    9f0019b9 <number+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48 (discriminator 1)
9f0019b3:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0019b7:	7e 0a                	jle    9f0019c3 <number+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
		return NULL;
9f0019b9:	b8 00 00 00 00       	mov    eax,0x0
9f0019be:	e9 f7 01 00 00       	jmp    9f001bba <number+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
	c = (type & ZEROPAD) ? '0' : ' ';
9f0019c3:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0019c6:	83 e0 01             	and    eax,0x1
9f0019c9:	85 c0                	test   eax,eax
9f0019cb:	74 07                	je     9f0019d4 <number+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 1)
9f0019cd:	b8 30 00 00 00       	mov    eax,0x30
9f0019d2:	eb 05                	jmp    9f0019d9 <number+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 2)
9f0019d4:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 4)
9f0019d9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
	sign = 0;
9f0019dc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	if (type & SIGN) {
9f0019e0:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0019e3:	83 e0 02             	and    eax,0x2
9f0019e6:	85 c0                	test   eax,eax
9f0019e8:	74 39                	je     9f001a23 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53
		if (num < 0) {
9f0019ea:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0019ee:	79 0d                	jns    9f0019fd <number+0x7a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
			sign = '-';
9f0019f0:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			num = -num;
9f0019f4:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			size--;
9f0019f7:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f0019fb:	eb 26                	jmp    9f001a23 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
		} else if (type & PLUS) {
9f0019fd:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001a00:	83 e0 04             	and    eax,0x4
9f001a03:	85 c0                	test   eax,eax
9f001a05:	74 0a                	je     9f001a11 <number+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
			sign = '+';
9f001a07:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			size--;
9f001a0b:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f001a0f:	eb 12                	jmp    9f001a23 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
		} else if (type & SPACE) {
9f001a11:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001a14:	83 e0 08             	and    eax,0x8
9f001a17:	85 c0                	test   eax,eax
9f001a19:	74 08                	je     9f001a23 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
			sign = ' ';
9f001a1b:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			size--;
9f001a1f:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:65
		}
	}
	if (type & SPECIAL) {
9f001a23:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001a26:	83 e0 40             	and    eax,0x40
9f001a29:	85 c0                	test   eax,eax
9f001a2b:	74 16                	je     9f001a43 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		if (base == 16)
9f001a2d:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001a31:	75 06                	jne    9f001a39 <number+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
			size -= 2;
9f001a33:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f001a37:	eb 0a                	jmp    9f001a43 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
		else if (base == 8)
9f001a39:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f001a3d:	75 04                	jne    9f001a43 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
			size--;
9f001a3f:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71
	}
	i = 0;
9f001a43:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	if (num == 0)
9f001a4a:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001a4e:	75 4d                	jne    9f001a9d <number+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
		tmp[i++] = '0';
9f001a50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001a53:	8d 50 01             	lea    edx,[eax+0x1]
9f001a56:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001a59:	c6 44 05 a6 30       	mov    BYTE PTR [ebp+eax*1-0x5a],0x30
9f001a5e:	eb 43                	jmp    9f001aa3 <number+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f001a60:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f001a63:	8d 41 01             	lea    eax,[ecx+0x1]
9f001a66:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001a69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001a6c:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f001a6f:	ba 00 00 00 00       	mov    edx,0x0
9f001a74:	f7 f6                	div    esi
9f001a76:	89 d0                	mov    eax,edx
9f001a78:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f001a7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001a7e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f001a81:	ba 00 00 00 00       	mov    edx,0x0
9f001a86:	f7 f6                	div    esi
9f001a88:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f001a8b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001a8e:	0f b6 84 03 10 fd ff 	movzx  eax,BYTE PTR [ebx+eax*1-0x2f0]
9f001a95:	ff 
9f001a96:	0a 45 ef             	or     al,BYTE PTR [ebp-0x11]
9f001a99:	88 44 0d a6          	mov    BYTE PTR [ebp+ecx*1-0x5a],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:75
	}
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
		while (num != 0)
9f001a9d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001aa1:	75 bd                	jne    9f001a60 <number+0xdd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
9f001aa3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001aa6:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f001aa9:	7e 06                	jle    9f001ab1 <number+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
		precision = i;
9f001aab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001aae:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
	size -= precision;
9f001ab1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f001ab4:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	if (!(type & (ZEROPAD + LEFT)))
9f001ab7:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001aba:	83 e0 11             	and    eax,0x11
9f001abd:	85 c0                	test   eax,eax
9f001abf:	75 1b                	jne    9f001adc <number+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
		while (size-- > 0)
9f001ac1:	eb 0c                	jmp    9f001acf <number+0x14c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
			*str++ = ' ';
9f001ac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ac6:	8d 50 01             	lea    edx,[eax+0x1]
9f001ac9:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001acc:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
		precision = i;
	size -= precision;
	if (!(type & (ZEROPAD + LEFT)))
		while (size-- > 0)
9f001acf:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f001ad2:	8d 50 ff             	lea    edx,[eax-0x1]
9f001ad5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f001ad8:	85 c0                	test   eax,eax
9f001ada:	7f e7                	jg     9f001ac3 <number+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
	if (sign)
9f001adc:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f001ae0:	74 0f                	je     9f001af1 <number+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
		*str++ = sign;
9f001ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ae5:	8d 50 01             	lea    edx,[eax+0x1]
9f001ae8:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001aeb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f001aef:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
	if (type & SPECIAL) {
9f001af1:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001af4:	83 e0 40             	and    eax,0x40
9f001af7:	85 c0                	test   eax,eax
9f001af9:	74 38                	je     9f001b33 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
		if (base == 8)
9f001afb:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f001aff:	75 0e                	jne    9f001b0f <number+0x18c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
			*str++ = '0';
9f001b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b04:	8d 50 01             	lea    edx,[eax+0x1]
9f001b07:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b0a:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f001b0d:	eb 24                	jmp    9f001b33 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
		else if (base == 16) {
9f001b0f:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001b13:	75 1e                	jne    9f001b33 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
			*str++ = '0';
9f001b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b18:	8d 50 01             	lea    edx,[eax+0x1]
9f001b1b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b1e:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = ('X' | locase);
9f001b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b24:	8d 50 01             	lea    edx,[eax+0x1]
9f001b27:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b2a:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f001b2e:	83 ca 58             	or     edx,0x58
9f001b31:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93
		}
	}
	if (!(type & LEFT))
9f001b33:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001b36:	83 e0 10             	and    eax,0x10
9f001b39:	85 c0                	test   eax,eax
9f001b3b:	75 2c                	jne    9f001b69 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		while (size-- > 0)
9f001b3d:	eb 0f                	jmp    9f001b4e <number+0x1cb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
			*str++ = c;
9f001b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b42:	8d 50 01             	lea    edx,[eax+0x1]
9f001b45:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b48:	0f b6 55 ee          	movzx  edx,BYTE PTR [ebp-0x12]
9f001b4c:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
			*str++ = '0';
			*str++ = ('X' | locase);
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
9f001b4e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f001b51:	8d 50 ff             	lea    edx,[eax-0x1]
9f001b54:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f001b57:	85 c0                	test   eax,eax
9f001b59:	7f e4                	jg     9f001b3f <number+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
	while (i < precision--)
9f001b5b:	eb 0c                	jmp    9f001b69 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
		*str++ = '0';
9f001b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b60:	8d 50 01             	lea    edx,[eax+0x1]
9f001b63:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b66:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
9f001b69:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f001b6c:	8d 50 ff             	lea    edx,[eax-0x1]
9f001b6f:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f001b72:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f001b75:	7f e6                	jg     9f001b5d <number+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
	while (i-- > 0)
9f001b77:	eb 16                	jmp    9f001b8f <number+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
		*str++ = tmp[i];
9f001b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b7c:	8d 50 01             	lea    edx,[eax+0x1]
9f001b7f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b82:	8d 4d a6             	lea    ecx,[ebp-0x5a]
9f001b85:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001b88:	01 ca                	add    edx,ecx
9f001b8a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001b8d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
9f001b8f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b92:	8d 50 ff             	lea    edx,[eax-0x1]
9f001b95:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001b98:	85 c0                	test   eax,eax
9f001b9a:	7f dd                	jg     9f001b79 <number+0x1f6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
	while (size-- > 0)
9f001b9c:	eb 0c                	jmp    9f001baa <number+0x227>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
		*str++ = ' ';
9f001b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ba1:	8d 50 01             	lea    edx,[eax+0x1]
9f001ba4:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001ba7:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
		*str++ = tmp[i];
	while (size-- > 0)
9f001baa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f001bad:	8d 50 ff             	lea    edx,[eax-0x1]
9f001bb0:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f001bb3:	85 c0                	test   eax,eax
9f001bb5:	7f e7                	jg     9f001b9e <number+0x21b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
	return str;
9f001bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103 (discriminator 1)
}
9f001bba:	83 c4 60             	add    esp,0x60
9f001bbd:	5b                   	pop    ebx
9f001bbe:	5e                   	pop    esi
9f001bbf:	5d                   	pop    ebp
9f001bc0:	c3                   	ret    

9f001bc1 <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:105
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f001bc1:	55                   	push   ebp
9f001bc2:	89 e5                	mov    ebp,esp
9f001bc4:	53                   	push   ebx
9f001bc5:	83 ec 34             	sub    esp,0x34
9f001bc8:	e8 c3 1a 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f001bcd:	81 c3 4f 38 00 00    	add    ebx,0x384f
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f001bd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001bd6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f001bd9:	e9 08 04 00 00       	jmp    9f001fe6 <.L96+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
		if (*fmt != '%') {
9f001bde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001be1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001be4:	3c 25                	cmp    al,0x25
9f001be6:	74 16                	je     9f001bfe <vsprintf+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
			*str++ = *fmt;
9f001be8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001beb:	8d 50 01             	lea    edx,[eax+0x1]
9f001bee:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001bf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001bf4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001bf7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			continue;
9f001bf9:	e9 df 03 00 00       	jmp    9f001fdd <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:126
		}

		/* process flags */
		flags = 0;
9f001bfe:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:128
	      repeat:
		++fmt;		/* this also skips first '%' */
9f001c05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c08:	83 c0 01             	add    eax,0x1
9f001c0b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
		switch (*fmt) {
9f001c0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c11:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001c14:	0f be c0             	movsx  eax,al
9f001c17:	83 e8 20             	sub    eax,0x20
9f001c1a:	83 f8 10             	cmp    eax,0x10
9f001c1d:	77 2c                	ja     9f001c4b <.L43>
9f001c1f:	c1 e0 02             	shl    eax,0x2
9f001c22:	8b 84 18 7c fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x484]
9f001c29:	01 d8                	add    eax,ebx
9f001c2b:	ff e0                	jmp    eax

9f001c2d <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:131
		case '-':
			flags |= LEFT;
9f001c2d:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
			goto repeat;
9f001c31:	eb d2                	jmp    9f001c05 <vsprintf+0x44>

9f001c33 <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:134
		case '+':
			flags |= PLUS;
9f001c33:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
			goto repeat;
9f001c37:	eb cc                	jmp    9f001c05 <vsprintf+0x44>

9f001c39 <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:137
		case ' ':
			flags |= SPACE;
9f001c39:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
			goto repeat;
9f001c3d:	eb c6                	jmp    9f001c05 <vsprintf+0x44>

9f001c3f <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140
		case '#':
			flags |= SPECIAL;
9f001c3f:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
			goto repeat;
9f001c43:	eb c0                	jmp    9f001c05 <vsprintf+0x44>

9f001c45 <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:143
		case '0':
			flags |= ZEROPAD;
9f001c45:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
			goto repeat;
9f001c49:	eb ba                	jmp    9f001c05 <vsprintf+0x44>

9f001c4b <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148
		}

		/* get field width */
		field_width = -1;
9f001c4b:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		if (ISDIGIT(*fmt))
9f001c52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c55:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001c58:	0f be c0             	movsx  eax,al
9f001c5b:	83 e8 30             	sub    eax,0x30
9f001c5e:	83 f8 09             	cmp    eax,0x9
9f001c61:	77 11                	ja     9f001c74 <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
			field_width = skip_atoi(&fmt);
9f001c63:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001c66:	50                   	push   eax
9f001c67:	e8 b8 fc ff ff       	call   9f001924 <skip_atoi>
9f001c6c:	83 c4 04             	add    esp,0x4
9f001c6f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f001c72:	eb 2e                	jmp    9f001ca2 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
		else if (*fmt == '*') {
9f001c74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c77:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001c7a:	3c 2a                	cmp    al,0x2a
9f001c7c:	75 24                	jne    9f001ca2 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
			++fmt;
9f001c7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c81:	83 c0 01             	add    eax,0x1
9f001c84:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:154
			/* it's the next argument */
			field_width = va_arg(args, int);
9f001c87:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c8a:	8d 50 04             	lea    edx,[eax+0x4]
9f001c8d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001c90:	8b 00                	mov    eax,DWORD PTR [eax]
9f001c92:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			if (field_width < 0) {
9f001c95:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f001c99:	79 07                	jns    9f001ca2 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
				field_width = -field_width;
9f001c9b:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				flags |= LEFT;
9f001c9e:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:162
			}
		}

		/* get the precision */
		precision = -1;
9f001ca2:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
		if (*fmt == '.') {
9f001ca9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001caf:	3c 2e                	cmp    al,0x2e
9f001cb1:	75 59                	jne    9f001d0c <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
			++fmt;
9f001cb3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cb6:	83 c0 01             	add    eax,0x1
9f001cb9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			if (ISDIGIT(*fmt))
9f001cbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cbf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001cc2:	0f be c0             	movsx  eax,al
9f001cc5:	83 e8 30             	sub    eax,0x30
9f001cc8:	83 f8 09             	cmp    eax,0x9
9f001ccb:	77 11                	ja     9f001cde <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
				precision = skip_atoi(&fmt);
9f001ccd:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001cd0:	50                   	push   eax
9f001cd1:	e8 4e fc ff ff       	call   9f001924 <skip_atoi>
9f001cd6:	83 c4 04             	add    esp,0x4
9f001cd9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f001cdc:	eb 21                	jmp    9f001cff <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
			else if (*fmt == '*') {
9f001cde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ce1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001ce4:	3c 2a                	cmp    al,0x2a
9f001ce6:	75 17                	jne    9f001cff <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
				++fmt;
9f001ce8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ceb:	83 c0 01             	add    eax,0x1
9f001cee:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:170
				/* it's the next argument */
				precision = va_arg(args, int);
9f001cf1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001cf4:	8d 50 04             	lea    edx,[eax+0x4]
9f001cf7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001cfa:	8b 00                	mov    eax,DWORD PTR [eax]
9f001cfc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:172
			}
			if (precision < 0)
9f001cff:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f001d03:	79 07                	jns    9f001d0c <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
				precision = 0;
9f001d05:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:177
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f001d0c:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f001d13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d16:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d19:	3c 68                	cmp    al,0x68
9f001d1b:	74 14                	je     9f001d31 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 1)
9f001d1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d20:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d23:	3c 6c                	cmp    al,0x6c
9f001d25:	74 0a                	je     9f001d31 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 2)
9f001d27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d2a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d2d:	3c 4c                	cmp    al,0x4c
9f001d2f:	75 15                	jne    9f001d46 <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
			qualifier = *fmt;
9f001d31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d37:	0f be c0             	movsx  eax,al
9f001d3a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			++fmt;
9f001d3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d40:	83 c0 01             	add    eax,0x1
9f001d43:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:184
		}

		/* default base */
		base = 10;
9f001d46:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:186

		switch (*fmt) {
9f001d4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d53:	0f be c0             	movsx  eax,al
9f001d56:	83 e8 25             	sub    eax,0x25
9f001d59:	83 f8 53             	cmp    eax,0x53
9f001d5c:	0f 87 b5 01 00 00    	ja     9f001f17 <.L57>
9f001d62:	c1 e0 02             	shl    eax,0x2
9f001d65:	8b 84 18 c0 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x440]
9f001d6c:	01 d8                	add    eax,ebx
9f001d6e:	ff e0                	jmp    eax

9f001d70 <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188
		case 'c':
			if (!(flags & LEFT))
9f001d70:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001d73:	83 e0 10             	and    eax,0x10
9f001d76:	85 c0                	test   eax,eax
9f001d78:	75 18                	jne    9f001d92 <.L61+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
				while (--field_width > 0)
9f001d7a:	eb 0c                	jmp    9f001d88 <.L61+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
					*str++ = ' ';
9f001d7c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d7f:	8d 50 01             	lea    edx,[eax+0x1]
9f001d82:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001d85:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
9f001d88:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f001d8c:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f001d90:	7f ea                	jg     9f001d7c <.L61+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
9f001d92:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d95:	8d 50 01             	lea    edx,[eax+0x1]
9f001d98:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001d9b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f001d9e:	8d 4a 04             	lea    ecx,[edx+0x4]
9f001da1:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f001da4:	8b 12                	mov    edx,DWORD PTR [edx]
9f001da6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
			while (--field_width > 0)
9f001da8:	eb 0c                	jmp    9f001db6 <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
				*str++ = ' ';
9f001daa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001dad:	8d 50 01             	lea    edx,[eax+0x1]
9f001db0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001db3:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
			while (--field_width > 0)
9f001db6:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f001dba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f001dbe:	7f ea                	jg     9f001daa <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
			continue;
9f001dc0:	e9 18 02 00 00       	jmp    9f001fdd <.L96+0x8c>

9f001dc5 <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197

		case 's':
			s = va_arg(args, char *);
9f001dc5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001dc8:	8d 50 04             	lea    edx,[eax+0x4]
9f001dcb:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001dce:	8b 00                	mov    eax,DWORD PTR [eax]
9f001dd0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f001dd3:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f001dd7:	74 13                	je     9f001dec <.L66+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
                            len = strlenI(s);
9f001dd9:	83 ec 0c             	sub    esp,0xc
9f001ddc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f001ddf:	e8 ad 05 00 00       	call   9f002391 <strlenI>
9f001de4:	83 c4 10             	add    esp,0x10
9f001de7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001dea:	eb 07                	jmp    9f001df3 <.L66+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:201
                        else
                            len = 0;
9f001dec:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203

			if (!(flags & LEFT))
9f001df3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001df6:	83 e0 10             	and    eax,0x10
9f001df9:	85 c0                	test   eax,eax
9f001dfb:	75 1c                	jne    9f001e19 <.L66+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
				while (len < field_width--)
9f001dfd:	eb 0c                	jmp    9f001e0b <.L66+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
					*str++ = ' ';
9f001dff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001e02:	8d 50 01             	lea    edx,[eax+0x1]
9f001e05:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001e08:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
                            len = strlenI(s);
                        else
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
9f001e0b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001e0e:	8d 50 ff             	lea    edx,[eax-0x1]
9f001e11:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f001e14:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001e17:	7f e6                	jg     9f001dff <.L66+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f001e19:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f001e20:	eb 1b                	jmp    9f001e3d <.L66+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
				*str++ = *s++;
9f001e22:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001e25:	8d 50 01             	lea    edx,[eax+0x1]
9f001e28:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001e2b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f001e2e:	8d 4a 01             	lea    ecx,[edx+0x1]
9f001e31:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
9f001e34:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001e37:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 3)
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f001e39:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 1)
9f001e3d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001e40:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001e43:	7c dd                	jl     9f001e22 <.L66+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
				*str++ = *s++;
			while (len < field_width--)
9f001e45:	eb 0c                	jmp    9f001e53 <.L66+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
				*str++ = ' ';
9f001e47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001e4a:	8d 50 01             	lea    edx,[eax+0x1]
9f001e4d:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001e50:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
9f001e53:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001e56:	8d 50 ff             	lea    edx,[eax-0x1]
9f001e59:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f001e5c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001e5f:	7f e6                	jg     9f001e47 <.L66+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
			continue;
9f001e61:	e9 77 01 00 00       	jmp    9f001fdd <.L96+0x8c>

9f001e66 <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:213

		case 'p':
			if (field_width == -1) {
9f001e66:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f001e6a:	75 0b                	jne    9f001e77 <.L65+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214
				field_width = 2 * sizeof(void *);
9f001e6c:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				flags |= ZEROPAD;
9f001e73:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f001e77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001e7a:	8d 50 04             	lea    edx,[eax+0x4]
9f001e7d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001e80:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217
		case 'p':
			if (field_width == -1) {
				field_width = 2 * sizeof(void *);
				flags |= ZEROPAD;
			}
			str = number(str,
9f001e82:	83 ec 08             	sub    esp,0x8
9f001e85:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001e88:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f001e8b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f001e8e:	6a 10                	push   0x10
9f001e90:	50                   	push   eax
9f001e91:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f001e94:	e8 ea fa ff ff       	call   9f001983 <number>
9f001e99:	83 c4 20             	add    esp,0x20
9f001e9c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220
				     (unsigned long)va_arg(args, void *), 16,
				     field_width, precision, flags);
			continue;
9f001e9f:	e9 39 01 00 00       	jmp    9f001fdd <.L96+0x8c>

9f001ea4 <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223

		case 'n':
			if (qualifier == 'l') {
9f001ea4:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f001ea8:	75 20                	jne    9f001eca <.L63+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224
				long *ip = va_arg(args, long *);
9f001eaa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001ead:	8d 50 04             	lea    edx,[eax+0x4]
9f001eb0:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001eb3:	8b 00                	mov    eax,DWORD PTR [eax]
9f001eb5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				*ip = (str - buf);
9f001eb8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ebe:	29 c2                	sub    edx,eax
9f001ec0:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f001ec3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f001ec5:	e9 13 01 00 00       	jmp    9f001fdd <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:227
		case 'n':
			if (qualifier == 'l') {
				long *ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int *ip = va_arg(args, int *);
9f001eca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001ecd:	8d 50 04             	lea    edx,[eax+0x4]
9f001ed0:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001ed3:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ed5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
				*ip = (str - buf);
9f001ed8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ede:	29 c2                	sub    edx,eax
9f001ee0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f001ee3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			}
			continue;
9f001ee5:	e9 f3 00 00 00       	jmp    9f001fdd <.L96+0x8c>

9f001eea <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:233

		case '%':
			*str++ = '%';
9f001eea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001eed:	8d 50 01             	lea    edx,[eax+0x1]
9f001ef0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001ef3:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234
			continue;
9f001ef6:	e9 e2 00 00 00       	jmp    9f001fdd <.L96+0x8c>

9f001efb <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:238

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f001efb:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239
			break;
9f001f02:	eb 4e                	jmp    9f001f52 <.L96+0x1>

9f001f04 <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:242

		case 'x':
			flags |= SMALL;
9f001f04:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f001f08 <.L60>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:244
		case 'X':
			base = 16;
9f001f08:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
			break;
9f001f0f:	eb 41                	jmp    9f001f52 <.L96+0x1>

9f001f11 <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:249

		case 'd':
		case 'i':
			flags |= SIGN;
9f001f11:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251
		case 'u':
			break;
9f001f15:	eb 3a                	jmp    9f001f51 <.L96>

9f001f17 <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:254

		default:
			*str++ = '%';
9f001f17:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f1a:	8d 50 01             	lea    edx,[eax+0x1]
9f001f1d:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001f20:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255
			if (*fmt)
9f001f23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001f29:	84 c0                	test   al,al
9f001f2b:	74 16                	je     9f001f43 <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
				*str++ = *fmt;
9f001f2d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f30:	8d 50 01             	lea    edx,[eax+0x1]
9f001f33:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001f36:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001f39:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001f3c:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			else
				--fmt;
			continue;
9f001f3e:	e9 9a 00 00 00       	jmp    9f001fdd <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258
		default:
			*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
9f001f43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f46:	83 e8 01             	sub    eax,0x1
9f001f49:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			continue;
9f001f4c:	e9 8c 00 00 00       	jmp    9f001fdd <.L96+0x8c>

9f001f51 <.L96>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
9f001f51:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:261
				*str++ = *fmt;
			else
				--fmt;
			continue;
		}
		if (qualifier == 'l')
9f001f52:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f001f56:	75 10                	jne    9f001f68 <.L96+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
			num = va_arg(args, unsigned long);
9f001f58:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001f5b:	8d 50 04             	lea    edx,[eax+0x4]
9f001f5e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001f61:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f63:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001f66:	eb 54                	jmp    9f001fbc <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
		else if (qualifier == 'h') {
9f001f68:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f001f6c:	75 26                	jne    9f001f94 <.L96+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
			num = (unsigned short)va_arg(args, int);
9f001f6e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001f71:	8d 50 04             	lea    edx,[eax+0x4]
9f001f74:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001f77:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f79:	25 ff ff 00 00       	and    eax,0xffff
9f001f7e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			if (flags & SIGN)
9f001f81:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001f84:	83 e0 02             	and    eax,0x2
9f001f87:	85 c0                	test   eax,eax
9f001f89:	74 31                	je     9f001fbc <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
				num = (short)num;
9f001f8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f8e:	98                   	cwde   
9f001f8f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001f92:	eb 28                	jmp    9f001fbc <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
		} else if (flags & SIGN)
9f001f94:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001f97:	83 e0 02             	and    eax,0x2
9f001f9a:	85 c0                	test   eax,eax
9f001f9c:	74 10                	je     9f001fae <.L96+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
			num = va_arg(args, int);
9f001f9e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001fa1:	8d 50 04             	lea    edx,[eax+0x4]
9f001fa4:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001fa7:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fa9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001fac:	eb 0e                	jmp    9f001fbc <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270
		else
			num = va_arg(args, unsigned int);
9f001fae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001fb1:	8d 50 04             	lea    edx,[eax+0x4]
9f001fb4:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001fb7:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fb9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		str = number(str, num, base, field_width, precision, flags);
9f001fbc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001fbf:	83 ec 08             	sub    esp,0x8
9f001fc2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001fc5:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f001fc8:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f001fcb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f001fce:	50                   	push   eax
9f001fcf:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f001fd2:	e8 ac f9 ff ff       	call   9f001983 <number>
9f001fd7:	83 c4 20             	add    esp,0x20
9f001fda:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f001fdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001fe0:	83 c0 01             	add    eax,0x1
9f001fe3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 1)
9f001fe6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001fe9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001fec:	84 c0                	test   al,al
9f001fee:	0f 85 ea fb ff ff    	jne    9f001bde <vsprintf+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:273
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}
	*str = '\0';
9f001ff4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001ff7:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
	return str - buf;
9f001ffa:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002000:	29 c2                	sub    edx,eax
9f002002:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
}
9f002004:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002007:	c9                   	leave  
9f002008:	c3                   	ret    

9f002009 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:278

int sprintf(char *buf, const char *fmt, ...)
{
9f002009:	55                   	push   ebp
9f00200a:	89 e5                	mov    ebp,esp
9f00200c:	83 ec 18             	sub    esp,0x18
9f00200f:	e8 4f 16 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002014:	05 08 34 00 00       	add    eax,0x3408
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:282
	va_list args;
	int i;

	va_start(args, fmt);
9f002019:	8d 45 10             	lea    eax,[ebp+0x10]
9f00201c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	i = vsprintf(buf, fmt, args);
9f00201f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002022:	83 ec 04             	sub    esp,0x4
9f002025:	50                   	push   eax
9f002026:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002029:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00202c:	e8 90 fb ff ff       	call   9f001bc1 <vsprintf>
9f002031:	83 c4 10             	add    esp,0x10
9f002034:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:285
	va_end(args);
	return i;
9f002037:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
}
9f00203a:	c9                   	leave  
9f00203b:	c3                   	ret    

9f00203c <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:68
    return;
}
*/
//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f00203c:	55                   	push   ebp
9f00203d:	89 e5                	mov    ebp,esp
9f00203f:	53                   	push   ebx
9f002040:	83 ec 14             	sub    esp,0x14
9f002043:	e8 48 16 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f002048:	81 c3 d4 33 00 00    	add    ebx,0x33d4
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:70
    char buff[5];
    int buffPtr=0;
9f00204e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:72

    memsetI(buff,0,10);
9f002055:	83 ec 04             	sub    esp,0x4
9f002058:	6a 0a                	push   0xa
9f00205a:	6a 00                	push   0x0
9f00205c:	8d 45 ef             	lea    eax,[ebp-0x11]
9f00205f:	50                   	push   eax
9f002060:	e8 ab f7 ff ff       	call   9f001810 <memsetI>
9f002065:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f002068:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00206b:	8d 50 01             	lea    edx,[eax+0x1]
9f00206e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002071:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '[';
9f002076:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002079:	8d 50 01             	lea    edx,[eax+0x1]
9f00207c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00207f:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = '0';
9f002084:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002087:	8d 50 01             	lea    edx,[eax+0x1]
9f00208a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00208d:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr++] = 'K';
9f002092:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002095:	8d 50 01             	lea    edx,[eax+0x1]
9f002098:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00209b:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    buff[buffPtr] = '\0';
9f0020a0:	8d 55 ef             	lea    edx,[ebp-0x11]
9f0020a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0020a6:	01 d0                	add    eax,edx
9f0020a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:80
    printI(buff);
9f0020ab:	83 ec 0c             	sub    esp,0xc
9f0020ae:	8d 45 ef             	lea    eax,[ebp-0x11]
9f0020b1:	50                   	push   eax
9f0020b2:	e8 d7 ea ff ff       	call   9f000b8e <printI>
9f0020b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
    
    return;
9f0020ba:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:83
}
9f0020bb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0020be:	c9                   	leave  
9f0020bf:	c3                   	ret    

9f0020c0 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f0020c0:	55                   	push   ebp
9f0020c1:	89 e5                	mov    ebp,esp
9f0020c3:	53                   	push   ebx
9f0020c4:	83 ec 04             	sub    esp,0x4
9f0020c7:	e8 c4 15 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f0020cc:	81 c3 50 33 00 00    	add    ebx,0x3350
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
9f0020d2:	83 ec 0c             	sub    esp,0xc
9f0020d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0020d8:	e8 b4 02 00 00       	call   9f002391 <strlenI>
9f0020dd:	83 c4 10             	add    esp,0x10
9f0020e0:	89 c2                	mov    edx,eax
9f0020e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0020e5:	01 d0                	add    eax,edx
9f0020e7:	83 ec 08             	sub    esp,0x8
9f0020ea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0020ed:	50                   	push   eax
9f0020ee:	e8 59 01 00 00       	call   9f00224c <strcpyI>
9f0020f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
9f0020f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
9f0020f9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0020fc:	c9                   	leave  
9f0020fd:	c3                   	ret    

9f0020fe <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
9f0020fe:	55                   	push   ebp
9f0020ff:	89 e5                	mov    ebp,esp
9f002101:	53                   	push   ebx
9f002102:	83 ec 04             	sub    esp,0x4
9f002105:	e8 86 15 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f00210a:	81 c3 12 33 00 00    	add    ebx,0x3312
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
9f002110:	83 ec 0c             	sub    esp,0xc
9f002113:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002116:	e8 76 02 00 00       	call   9f002391 <strlenI>
9f00211b:	83 c4 10             	add    esp,0x10
9f00211e:	89 c2                	mov    edx,eax
9f002120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002123:	01 d0                	add    eax,edx
9f002125:	83 ec 08             	sub    esp,0x8
9f002128:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00212b:	50                   	push   eax
9f00212c:	e8 1b 01 00 00       	call   9f00224c <strcpyI>
9f002131:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
9f002134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
9f002137:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00213a:	c9                   	leave  
9f00213b:	c3                   	ret    

9f00213c <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
9f00213c:	55                   	push   ebp
9f00213d:	89 e5                	mov    ebp,esp
9f00213f:	83 ec 10             	sub    esp,0x10
9f002142:	e8 1c 15 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002147:	05 d5 32 00 00       	add    eax,0x32d5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
9f00214c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
9f002153:	eb 04                	jmp    9f002159 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
9f002155:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
9f002159:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00215c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00215f:	01 d0                	add    eax,edx
9f002161:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002164:	84 c0                	test   al,al
9f002166:	75 ed                	jne    9f002155 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
9f002168:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
9f00216f:	eb 1d                	jmp    9f00218e <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
9f002171:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002177:	01 c2                	add    edx,eax
9f002179:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
9f00217c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00217f:	01 c8                	add    eax,ecx
9f002181:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002184:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
9f002186:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
9f00218a:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
9f00218e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f002191:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002194:	01 d0                	add    eax,edx
9f002196:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002199:	84 c0                	test   al,al
9f00219b:	75 d4                	jne    9f002171 <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
9f00219d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0021a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0021a3:	01 d0                	add    eax,edx
9f0021a5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
9f0021a8:	90                   	nop
9f0021a9:	c9                   	leave  
9f0021aa:	c3                   	ret    
9f0021ab:	90                   	nop

9f0021ac <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
9f0021ac:	55                   	push   ebp
9f0021ad:	89 e5                	mov    ebp,esp
9f0021af:	56                   	push   esi
9f0021b0:	53                   	push   ebx
9f0021b1:	83 ec 10             	sub    esp,0x10
9f0021b4:	e8 aa 14 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0021b9:	05 63 32 00 00       	add    eax,0x3263
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
9f0021be:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
9f0021c1:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f0021c4:	89 d8                	mov    eax,ebx
9f0021c6:	8d 58 01             	lea    ebx,[eax+0x1]
9f0021c9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021cc:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
9f0021cf:	89 f0                	mov    eax,esi
9f0021d1:	8d 70 01             	lea    esi,[eax+0x1]
9f0021d4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021d7:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
9f0021da:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f0021de:	75 0e                	jne    9f0021ee <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
9f0021e0:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0021e4:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0021e8:	29 c2                	sub    edx,eax
9f0021ea:	89 d0                	mov    eax,edx
9f0021ec:	eb 15                	jmp    9f002203 <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
9f0021ee:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f0021f2:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f0021f5:	74 cd                	je     9f0021c4 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
9f0021f7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0021fb:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0021ff:	29 c2                	sub    edx,eax
9f002201:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
9f002203:	83 c4 10             	add    esp,0x10
9f002206:	5b                   	pop    ebx
9f002207:	5e                   	pop    esi
9f002208:	5d                   	pop    ebp
9f002209:	c3                   	ret    
9f00220a:	66 90                	xchg   ax,ax

9f00220c <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f00220c:	55                   	push   ebp
9f00220d:	89 e5                	mov    ebp,esp
9f00220f:	83 ec 10             	sub    esp,0x10
9f002212:	e8 4c 14 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002217:	05 05 32 00 00       	add    eax,0x3205
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f00221c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00221f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f002222:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f002223:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002226:	8d 50 01             	lea    edx,[eax+0x1]
9f002229:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f00222c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00222f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002232:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f002235:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002238:	88 10                	mov    BYTE PTR [eax],dl
9f00223a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00223d:	84 c0                	test   al,al
9f00223f:	75 e2                	jne    9f002223 <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f002241:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002244:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f002247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f00224a:	c9                   	leave  
9f00224b:	c3                   	ret    

9f00224c <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f00224c:	55                   	push   ebp
9f00224d:	89 e5                	mov    ebp,esp
9f00224f:	83 ec 10             	sub    esp,0x10
9f002252:	e8 0c 14 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002257:	05 c5 31 00 00       	add    eax,0x31c5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f00225c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00225f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f002262:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f002263:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002266:	8d 50 01             	lea    edx,[eax+0x1]
9f002269:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f00226c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00226f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002272:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f002275:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002278:	88 10                	mov    BYTE PTR [eax],dl
9f00227a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00227d:	84 c0                	test   al,al
9f00227f:	75 e2                	jne    9f002263 <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f002281:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002284:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f002287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f00228a:	c9                   	leave  
9f00228b:	c3                   	ret    

9f00228c <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f00228c:	55                   	push   ebp
9f00228d:	89 e5                	mov    ebp,esp
9f00228f:	83 ec 10             	sub    esp,0x10
9f002292:	e8 cc 13 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002297:	05 85 31 00 00       	add    eax,0x3185
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f00229c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00229f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f0022a2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f0022a3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0022a6:	8d 50 01             	lea    edx,[eax+0x1]
9f0022a9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0022ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0022af:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0022b2:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0022b5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0022b8:	88 10                	mov    BYTE PTR [eax],dl
9f0022ba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0022bd:	84 c0                	test   al,al
9f0022bf:	74 0d                	je     9f0022ce <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f0022c1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0022c4:	8d 50 ff             	lea    edx,[eax-0x1]
9f0022c7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0022ca:	85 c0                	test   eax,eax
9f0022cc:	75 d5                	jne    9f0022a3 <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f0022ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f0022d1:	c9                   	leave  
9f0022d2:	c3                   	ret    
9f0022d3:	90                   	nop

9f0022d4 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f0022d4:	55                   	push   ebp
9f0022d5:	89 e5                	mov    ebp,esp
9f0022d7:	83 ec 04             	sub    esp,0x4
9f0022da:	e8 84 13 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0022df:	05 3d 31 00 00       	add    eax,0x313d
9f0022e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0022e7:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f0022ea:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f0022ee:	7e 0d                	jle    9f0022fd <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f0022f0:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f0022f4:	7f 07                	jg     9f0022fd <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f0022f6:	b8 01 00 00 00       	mov    eax,0x1
9f0022fb:	eb 05                	jmp    9f002302 <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f0022fd:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f002302:	c9                   	leave  
9f002303:	c3                   	ret    

9f002304 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f002304:	55                   	push   ebp
9f002305:	89 e5                	mov    ebp,esp
9f002307:	83 ec 10             	sub    esp,0x10
9f00230a:	e8 54 13 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00230f:	05 0d 31 00 00       	add    eax,0x310d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f002314:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f00231b:	eb 27                	jmp    9f002344 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f00231d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002320:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002323:	89 c2                	mov    edx,eax
9f002325:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002328:	01 d0                	add    eax,edx
9f00232a:	0f be c0             	movsx  eax,al
9f00232d:	50                   	push   eax
9f00232e:	e8 a1 ff ff ff       	call   9f0022d4 <check_digit>
9f002333:	83 c4 04             	add    esp,0x4
9f002336:	83 f0 01             	xor    eax,0x1
9f002339:	84 c0                	test   al,al
9f00233b:	74 07                	je     9f002344 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f00233d:	b8 00 00 00 00       	mov    eax,0x0
9f002342:	eb 17                	jmp    9f00235b <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f002344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002347:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00234a:	0f be d0             	movsx  edx,al
9f00234d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002350:	01 d0                	add    eax,edx
9f002352:	85 c0                	test   eax,eax
9f002354:	75 c7                	jne    9f00231d <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f002356:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f00235b:	c9                   	leave  
9f00235c:	c3                   	ret    
9f00235d:	66 90                	xchg   ax,ax
9f00235f:	90                   	nop

9f002360 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
9f002360:	55                   	push   ebp
9f002361:	89 e5                	mov    ebp,esp
9f002363:	83 ec 10             	sub    esp,0x10
9f002366:	e8 f8 12 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00236b:	05 b1 30 00 00       	add    eax,0x30b1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
9f002370:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
9f002377:	eb 04                	jmp    9f00237d <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
9f002379:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f00237d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002380:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002383:	01 d0                	add    eax,edx
9f002385:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002388:	84 c0                	test   al,al
9f00238a:	75 ed                	jne    9f002379 <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
9f00238c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
9f00238f:	c9                   	leave  
9f002390:	c3                   	ret    

9f002391 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
9f002391:	55                   	push   ebp
9f002392:	89 e5                	mov    ebp,esp
9f002394:	83 ec 10             	sub    esp,0x10
9f002397:	e8 c7 12 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00239c:	05 80 30 00 00       	add    eax,0x3080
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
9f0023a1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
9f0023a8:	eb 04                	jmp    9f0023ae <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
9f0023aa:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f0023ae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0023b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0023b4:	01 d0                	add    eax,edx
9f0023b6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0023b9:	84 c0                	test   al,al
9f0023bb:	75 ed                	jne    9f0023aa <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
9f0023bd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
9f0023c0:	c9                   	leave  
9f0023c1:	c3                   	ret    
9f0023c2:	66 90                	xchg   ax,ax

9f0023c4 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f0023c4:	55                   	push   ebp
9f0023c5:	89 e5                	mov    ebp,esp
9f0023c7:	e8 97 12 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0023cc:	05 50 30 00 00       	add    eax,0x3050
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f0023d1:	eb 4b                	jmp    9f00241e <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f0023d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0023d6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0023d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0023dc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0023df:	38 c2                	cmp    dl,al
9f0023e1:	74 1e                	je     9f002401 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f0023e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0023e6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0023e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0023ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0023ef:	38 c2                	cmp    dl,al
9f0023f1:	73 07                	jae    9f0023fa <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f0023f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0023f8:	eb 2f                	jmp    9f002429 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f0023fa:	b8 01 00 00 00       	mov    eax,0x1
9f0023ff:	eb 28                	jmp    9f002429 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f002401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002404:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002407:	84 c0                	test   al,al
9f002409:	75 07                	jne    9f002412 <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f00240b:	b8 00 00 00 00       	mov    eax,0x0
9f002410:	eb 17                	jmp    9f002429 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f002412:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f002416:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f00241a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f00241e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002422:	75 af                	jne    9f0023d3 <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f002424:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f002429:	5d                   	pop    ebp
9f00242a:	c3                   	ret    

9f00242b <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f00242b:	55                   	push   ebp
9f00242c:	89 e5                	mov    ebp,esp
9f00242e:	e8 30 12 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002433:	05 e9 2f 00 00       	add    eax,0x2fe9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f002438:	eb 4b                	jmp    9f002485 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f00243a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00243d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002440:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002443:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002446:	38 c2                	cmp    dl,al
9f002448:	74 1e                	je     9f002468 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f00244a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00244d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002450:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002453:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002456:	38 c2                	cmp    dl,al
9f002458:	73 07                	jae    9f002461 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f00245a:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f00245f:	eb 2f                	jmp    9f002490 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f002461:	b8 01 00 00 00       	mov    eax,0x1
9f002466:	eb 28                	jmp    9f002490 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f002468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00246b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00246e:	84 c0                	test   al,al
9f002470:	75 07                	jne    9f002479 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f002472:	b8 00 00 00 00       	mov    eax,0x0
9f002477:	eb 17                	jmp    9f002490 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f002479:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f00247d:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f002481:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f002485:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002489:	75 af                	jne    9f00243a <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f00248b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f002490:	5d                   	pop    ebp
9f002491:	c3                   	ret    
9f002492:	66 90                	xchg   ax,ax

9f002494 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f002494:	55                   	push   ebp
9f002495:	89 e5                	mov    ebp,esp
9f002497:	83 ec 10             	sub    esp,0x10
9f00249a:	e8 c4 11 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00249f:	05 7d 2f 00 00       	add    eax,0x2f7d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f0024a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0024a7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f0024aa:	eb 1b                	jmp    9f0024c7 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f0024ac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0024af:	8d 50 01             	lea    edx,[eax+0x1]
9f0024b2:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0024b5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0024b8:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0024bb:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0024be:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0024c1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f0024c3:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f0024c7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0024cb:	74 1c                	je     9f0024e9 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f0024cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0024d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0024d3:	84 c0                	test   al,al
9f0024d5:	75 d5                	jne    9f0024ac <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f0024d7:	eb 10                	jmp    9f0024e9 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f0024d9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0024dc:	8d 50 01             	lea    edx,[eax+0x1]
9f0024df:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0024e2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f0024e5:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f0024e9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0024ed:	75 ea                	jne    9f0024d9 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
9f0024ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
9f0024f2:	c9                   	leave  
9f0024f3:	c3                   	ret    

9f0024f4 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f0024f4:	55                   	push   ebp
9f0024f5:	89 e5                	mov    ebp,esp
9f0024f7:	e8 67 11 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0024fc:	05 20 2f 00 00       	add    eax,0x2f20
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
9f002501:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002504:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002507:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00250a:	e8 85 ff ff ff       	call   9f002494 <strncpyI>
9f00250f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
9f002512:	c9                   	leave  
9f002513:	c3                   	ret    

9f002514 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f002514:	55                   	push   ebp
9f002515:	89 e5                	mov    ebp,esp
9f002517:	57                   	push   edi
9f002518:	56                   	push   esi
9f002519:	53                   	push   ebx
9f00251a:	83 ec 08             	sub    esp,0x8
9f00251d:	e8 41 11 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002522:	05 fa 2e 00 00       	add    eax,0x2efa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f002527:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f00252a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f002531:	89 f0                	mov    eax,esi
9f002533:	8d 70 01             	lea    esi,[eax+0x1]
9f002536:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002539:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f00253c:	83 fb 20             	cmp    ebx,0x20
9f00253f:	74 f0                	je     9f002531 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f002541:	83 fb 2d             	cmp    ebx,0x2d
9f002544:	75 14                	jne    9f00255a <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f002546:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f00254d:	89 f0                	mov    eax,esi
9f00254f:	8d 70 01             	lea    esi,[eax+0x1]
9f002552:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002555:	0f be d8             	movsx  ebx,al
9f002558:	eb 10                	jmp    9f00256a <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f00255a:	83 fb 2b             	cmp    ebx,0x2b
9f00255d:	75 0b                	jne    9f00256a <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f00255f:	89 f0                	mov    eax,esi
9f002561:	8d 70 01             	lea    esi,[eax+0x1]
9f002564:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002567:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f00256a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00256e:	74 06                	je     9f002576 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f002570:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002574:	75 26                	jne    9f00259c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f002576:	83 fb 30             	cmp    ebx,0x30
9f002579:	75 21                	jne    9f00259c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f00257b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f00257e:	3c 78                	cmp    al,0x78
9f002580:	74 07                	je     9f002589 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f002582:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002585:	3c 58                	cmp    al,0x58
9f002587:	75 13                	jne    9f00259c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f002589:	8d 46 01             	lea    eax,[esi+0x1]
9f00258c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00258f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f002592:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f002595:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f00259c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0025a0:	75 14                	jne    9f0025b6 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f0025a2:	83 fb 30             	cmp    ebx,0x30
9f0025a5:	75 07                	jne    9f0025ae <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f0025a7:	b8 08 00 00 00       	mov    eax,0x8
9f0025ac:	eb 05                	jmp    9f0025b3 <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f0025ae:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f0025b3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f0025b6:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0025b9:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0025be:	ba 00 00 00 00       	mov    edx,0x0
9f0025c3:	f7 f1                	div    ecx
9f0025c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f0025c8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0025cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0025d0:	ba 00 00 00 00       	mov    edx,0x0
9f0025d5:	f7 f1                	div    ecx
9f0025d7:	89 d0                	mov    eax,edx
9f0025d9:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f0025db:	bf 00 00 00 00       	mov    edi,0x0
9f0025e0:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f0025e5:	8d 43 d0             	lea    eax,[ebx-0x30]
9f0025e8:	83 f8 09             	cmp    eax,0x9
9f0025eb:	77 05                	ja     9f0025f2 <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f0025ed:	83 eb 30             	sub    ebx,0x30
9f0025f0:	eb 25                	jmp    9f002617 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f0025f2:	89 d8                	mov    eax,ebx
9f0025f4:	83 c8 20             	or     eax,0x20
9f0025f7:	83 e8 61             	sub    eax,0x61
9f0025fa:	83 f8 19             	cmp    eax,0x19
9f0025fd:	77 56                	ja     9f002655 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f0025ff:	83 fb 40             	cmp    ebx,0x40
9f002602:	7e 0c                	jle    9f002610 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f002604:	83 fb 5a             	cmp    ebx,0x5a
9f002607:	7f 07                	jg     9f002610 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f002609:	b8 37 00 00 00       	mov    eax,0x37
9f00260e:	eb 05                	jmp    9f002615 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f002610:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f002615:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f002617:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f00261a:	7d 3c                	jge    9f002658 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f00261c:	89 c8                	mov    eax,ecx
9f00261e:	85 c0                	test   eax,eax
9f002620:	78 10                	js     9f002632 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f002622:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002625:	77 0b                	ja     9f002632 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f002627:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f00262a:	75 0d                	jne    9f002639 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f00262c:	89 d0                	mov    eax,edx
9f00262e:	39 c3                	cmp    ebx,eax
9f002630:	7e 07                	jle    9f002639 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f002632:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f002637:	eb 0f                	jmp    9f002648 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f002639:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f00263e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002641:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f002644:	89 d8                	mov    eax,ebx
9f002646:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f002648:	89 f0                	mov    eax,esi
9f00264a:	8d 70 01             	lea    esi,[eax+0x1]
9f00264d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002650:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f002653:	eb 90                	jmp    9f0025e5 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f002655:	90                   	nop
9f002656:	eb 01                	jmp    9f002659 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f002658:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f002659:	89 c8                	mov    eax,ecx
9f00265b:	85 c0                	test   eax,eax
9f00265d:	79 07                	jns    9f002666 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f00265f:	bf ff ff ff ff       	mov    edi,0xffffffff
9f002664:	eb 08                	jmp    9f00266e <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f002666:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00266a:	74 02                	je     9f00266e <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f00266c:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f00266e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002672:	74 13                	je     9f002687 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f002674:	89 c8                	mov    eax,ecx
9f002676:	85 c0                	test   eax,eax
9f002678:	74 05                	je     9f00267f <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f00267a:	8d 46 ff             	lea    eax,[esi-0x1]
9f00267d:	eb 03                	jmp    9f002682 <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f00267f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f002682:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002685:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f002687:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f002689:	83 c4 08             	add    esp,0x8
9f00268c:	5b                   	pop    ebx
9f00268d:	5e                   	pop    esi
9f00268e:	5f                   	pop    edi
9f00268f:	5d                   	pop    ebp
9f002690:	c3                   	ret    
9f002691:	66 90                	xchg   ax,ax
9f002693:	90                   	nop

9f002694 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f002694:	55                   	push   ebp
9f002695:	89 e5                	mov    ebp,esp
9f002697:	e8 c7 0f 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00269c:	05 80 2d 00 00       	add    eax,0x2d80
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f0026a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0026a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0026a7:	01 d0                	add    eax,edx
9f0026a9:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f0026ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f0026af:	5d                   	pop    ebp
9f0026b0:	c3                   	ret    
9f0026b1:	66 90                	xchg   ax,ax
9f0026b3:	90                   	nop

9f0026b4 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f0026b4:	55                   	push   ebp
9f0026b5:	89 e5                	mov    ebp,esp
9f0026b7:	57                   	push   edi
9f0026b8:	56                   	push   esi
9f0026b9:	53                   	push   ebx
9f0026ba:	83 ec 0c             	sub    esp,0xc
9f0026bd:	e8 a1 0f 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0026c2:	05 5a 2d 00 00       	add    eax,0x2d5a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f0026c7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f0026ca:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f0026d1:	89 f0                	mov    eax,esi
9f0026d3:	8d 70 01             	lea    esi,[eax+0x1]
9f0026d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0026d9:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f0026dc:	83 fb 20             	cmp    ebx,0x20
9f0026df:	74 f0                	je     9f0026d1 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f0026e1:	83 fb 2d             	cmp    ebx,0x2d
9f0026e4:	75 14                	jne    9f0026fa <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f0026e6:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f0026ed:	89 f0                	mov    eax,esi
9f0026ef:	8d 70 01             	lea    esi,[eax+0x1]
9f0026f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0026f5:	0f be d8             	movsx  ebx,al
9f0026f8:	eb 10                	jmp    9f00270a <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f0026fa:	83 fb 2b             	cmp    ebx,0x2b
9f0026fd:	75 0b                	jne    9f00270a <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f0026ff:	89 f0                	mov    eax,esi
9f002701:	8d 70 01             	lea    esi,[eax+0x1]
9f002704:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002707:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f00270a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00270e:	74 06                	je     9f002716 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f002710:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002714:	75 26                	jne    9f00273c <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f002716:	83 fb 30             	cmp    ebx,0x30
9f002719:	75 21                	jne    9f00273c <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f00271b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f00271e:	3c 78                	cmp    al,0x78
9f002720:	74 07                	je     9f002729 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f002722:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002725:	3c 58                	cmp    al,0x58
9f002727:	75 13                	jne    9f00273c <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f002729:	8d 46 01             	lea    eax,[esi+0x1]
9f00272c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00272f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f002732:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f002735:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f00273c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002740:	75 14                	jne    9f002756 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f002742:	83 fb 30             	cmp    ebx,0x30
9f002745:	75 07                	jne    9f00274e <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f002747:	b8 08 00 00 00       	mov    eax,0x8
9f00274c:	eb 05                	jmp    9f002753 <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f00274e:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f002753:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f002756:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00275a:	74 07                	je     9f002763 <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f00275c:	b8 00 00 00 80       	mov    eax,0x80000000
9f002761:	eb 05                	jmp    9f002768 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f002763:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f002768:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00276b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f00276e:	ba 00 00 00 00       	mov    edx,0x0
9f002773:	f7 f1                	div    ecx
9f002775:	89 d1                	mov    ecx,edx
9f002777:	89 c8                	mov    eax,ecx
9f002779:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f00277c:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f00277f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002782:	ba 00 00 00 00       	mov    edx,0x0
9f002787:	f7 f7                	div    edi
9f002789:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f00278c:	bf 00 00 00 00       	mov    edi,0x0
9f002791:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f002796:	8d 43 d0             	lea    eax,[ebx-0x30]
9f002799:	83 f8 09             	cmp    eax,0x9
9f00279c:	77 05                	ja     9f0027a3 <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f00279e:	83 eb 30             	sub    ebx,0x30
9f0027a1:	eb 25                	jmp    9f0027c8 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f0027a3:	89 d8                	mov    eax,ebx
9f0027a5:	83 c8 20             	or     eax,0x20
9f0027a8:	83 e8 61             	sub    eax,0x61
9f0027ab:	83 f8 19             	cmp    eax,0x19
9f0027ae:	77 55                	ja     9f002805 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f0027b0:	83 fb 40             	cmp    ebx,0x40
9f0027b3:	7e 0c                	jle    9f0027c1 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f0027b5:	83 fb 5a             	cmp    ebx,0x5a
9f0027b8:	7f 07                	jg     9f0027c1 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f0027ba:	b8 37 00 00 00       	mov    eax,0x37
9f0027bf:	eb 05                	jmp    9f0027c6 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f0027c1:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f0027c6:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f0027c8:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f0027cb:	7d 3b                	jge    9f002808 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f0027cd:	89 c8                	mov    eax,ecx
9f0027cf:	85 c0                	test   eax,eax
9f0027d1:	78 0f                	js     9f0027e2 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f0027d3:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0027d6:	77 0a                	ja     9f0027e2 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f0027d8:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0027db:	75 0c                	jne    9f0027e9 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f0027dd:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f0027e0:	7e 07                	jle    9f0027e9 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f0027e2:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f0027e7:	eb 0f                	jmp    9f0027f8 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f0027e9:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f0027ee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027f1:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f0027f4:	89 d8                	mov    eax,ebx
9f0027f6:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f0027f8:	89 f0                	mov    eax,esi
9f0027fa:	8d 70 01             	lea    esi,[eax+0x1]
9f0027fd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002800:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f002803:	eb 91                	jmp    9f002796 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f002805:	90                   	nop
9f002806:	eb 01                	jmp    9f002809 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f002808:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f002809:	89 c8                	mov    eax,ecx
9f00280b:	85 c0                	test   eax,eax
9f00280d:	79 16                	jns    9f002825 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f00280f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002813:	74 07                	je     9f00281c <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f002815:	b8 00 00 00 80       	mov    eax,0x80000000
9f00281a:	eb 05                	jmp    9f002821 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f00281c:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f002821:	89 c7                	mov    edi,eax
9f002823:	eb 08                	jmp    9f00282d <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f002825:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002829:	74 02                	je     9f00282d <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f00282b:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f00282d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002831:	74 13                	je     9f002846 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f002833:	89 c8                	mov    eax,ecx
9f002835:	85 c0                	test   eax,eax
9f002837:	74 05                	je     9f00283e <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f002839:	8d 46 ff             	lea    eax,[esi-0x1]
9f00283c:	eb 03                	jmp    9f002841 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f00283e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f002841:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002844:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f002846:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f002848:	83 c4 0c             	add    esp,0xc
9f00284b:	5b                   	pop    ebx
9f00284c:	5e                   	pop    esi
9f00284d:	5f                   	pop    edi
9f00284e:	5d                   	pop    ebp
9f00284f:	c3                   	ret    

9f002850 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f002850:	55                   	push   ebp
9f002851:	89 e5                	mov    ebp,esp
9f002853:	53                   	push   ebx
9f002854:	83 ec 14             	sub    esp,0x14
9f002857:	e8 07 0e 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00285c:	05 c0 2b 00 00       	add    eax,0x2bc0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f002861:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002864:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002867:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00286a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f00286d:	eb 04                	jmp    9f002873 <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f00286f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f002873:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002876:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002879:	80 fa 20             	cmp    dl,0x20
9f00287c:	74 f1                	je     9f00286f <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f00287e:	83 ec 0c             	sub    esp,0xc
9f002881:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002884:	89 c3                	mov    ebx,eax
9f002886:	e8 06 fb ff ff       	call   9f002391 <strlenI>
9f00288b:	83 c4 10             	add    esp,0x10
9f00288e:	8d 50 ff             	lea    edx,[eax-0x1]
9f002891:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002894:	01 d0                	add    eax,edx
9f002896:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f002899:	eb 0c                	jmp    9f0028a7 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f00289b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00289e:	8d 50 ff             	lea    edx,[eax-0x1]
9f0028a1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f0028a4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f0028a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0028aa:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0028ad:	76 0a                	jbe    9f0028b9 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f0028af:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0028b2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028b5:	3c 20                	cmp    al,0x20
9f0028b7:	74 e2                	je     9f00289b <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f0028b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0028bc:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0028bf:	74 1f                	je     9f0028e0 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f0028c1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f0028c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0028c5:	8d 50 01             	lea    edx,[eax+0x1]
9f0028c8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0028cb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0028ce:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0028d1:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f0028d4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0028d7:	88 10                	mov    BYTE PTR [eax],dl
9f0028d9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028dc:	84 c0                	test   al,al
9f0028de:	75 e2                	jne    9f0028c2 <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f0028e0:	90                   	nop
9f0028e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0028e4:	c9                   	leave  
9f0028e5:	c3                   	ret    

9f0028e6 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f0028e6:	55                   	push   ebp
9f0028e7:	89 e5                	mov    ebp,esp
9f0028e9:	83 ec 08             	sub    esp,0x8
9f0028ec:	e8 72 0d 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0028f1:	05 2b 2b 00 00       	add    eax,0x2b2b
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f0028f6:	83 ec 0c             	sub    esp,0xc
9f0028f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0028fc:	e8 4f ff ff ff       	call   9f002850 <strtrimI>
9f002901:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f002904:	c9                   	leave  
9f002905:	c3                   	ret    
9f002906:	66 90                	xchg   ax,ax

9f002908 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strstrI(char* string, char* substring)
{
9f002908:	55                   	push   ebp
9f002909:	89 e5                	mov    ebp,esp
9f00290b:	56                   	push   esi
9f00290c:	53                   	push   ebx
9f00290d:	e8 51 0d 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002912:	05 0a 2b 00 00       	add    eax,0x2b0a
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f002917:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    if (*b == 0) {
9f00291a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00291d:	84 c0                	test   al,al
9f00291f:	75 42                	jne    9f002963 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
	return string;
9f002921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002924:	eb 4c                	jmp    9f002972 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f002926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002929:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00292c:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00292f:	38 c2                	cmp    dl,al
9f002931:	75 2b                	jne    9f00295e <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
	    continue;
	}
	a = string;
9f002933:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	while (1) {
	    if (*b == 0) {
9f002936:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002939:	84 c0                	test   al,al
9f00293b:	75 05                	jne    9f002942 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
		return string;
9f00293d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002940:	eb 30                	jmp    9f002972 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	    }
	    if (*a++ != *b++) {
9f002942:	89 f0                	mov    eax,esi
9f002944:	8d 70 01             	lea    esi,[eax+0x1]
9f002947:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00294a:	89 d8                	mov    eax,ebx
9f00294c:	8d 58 01             	lea    ebx,[eax+0x1]
9f00294f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002952:	38 c2                	cmp    dl,al
9f002954:	75 02                	jne    9f002958 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
		break;
	    }
	}
9f002956:	eb de                	jmp    9f002936 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f002958:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
	}
	b = substring;
9f002959:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00295c:	eb 01                	jmp    9f00295f <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f00295e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f00295f:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64 (discriminator 1)
9f002963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002966:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002969:	84 c0                	test   al,al
9f00296b:	75 b9                	jne    9f002926 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f00296d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
}
9f002972:	5b                   	pop    ebx
9f002973:	5e                   	pop    esi
9f002974:	5d                   	pop    ebp
9f002975:	c3                   	ret    

9f002976 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83

VISIBLE char* strstr(char* string, char* substring)
{
9f002976:	55                   	push   ebp
9f002977:	89 e5                	mov    ebp,esp
9f002979:	e8 e5 0c 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f00297e:	05 9e 2a 00 00       	add    eax,0x2a9e
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
    return strstrI(string, substring);
9f002983:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002986:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002989:	e8 7a ff ff ff       	call   9f002908 <strstrI>
9f00298e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
}
9f002991:	c9                   	leave  
9f002992:	c3                   	ret    
9f002993:	90                   	nop

9f002994 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:23
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f002994:	55                   	push   ebp
9f002995:	89 e5                	mov    ebp,esp
9f002997:	56                   	push   esi
9f002998:	53                   	push   ebx
9f002999:	83 ec 10             	sub    esp,0x10
9f00299c:	e8 c2 0c 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f0029a1:	05 7b 2a 00 00       	add    eax,0x2a7b
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
    uint32_t retVal=0;
9f0029a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    GET_TICKS(retVal);
9f0029ad:	b8 70 01 00 00       	mov    eax,0x170
9f0029b2:	bb 00 00 00 00       	mov    ebx,0x0
9f0029b7:	b9 00 00 00 00       	mov    ecx,0x0
9f0029bc:	ba 00 00 00 00       	mov    edx,0x0
9f0029c1:	be 00 00 00 00       	mov    esi,0x0
9f0029c6:	e8 fc ff ff ff       	call   9f0029c7 <getticks+0x33>
9f0029cb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    return (time_t)retVal;
9f0029ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
}
9f0029d1:	83 c4 10             	add    esp,0x10
9f0029d4:	5b                   	pop    ebx
9f0029d5:	5e                   	pop    esi
9f0029d6:	5d                   	pop    ebp
9f0029d7:	c3                   	ret    

9f0029d8 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f0029d8:	55                   	push   ebp
9f0029d9:	89 e5                	mov    ebp,esp
9f0029db:	53                   	push   ebx
9f0029dc:	83 ec 10             	sub    esp,0x10
9f0029df:	e8 ac 0c 00 00       	call   9f003690 <__x86.get_pc_thunk.bx>
9f0029e4:	81 c3 38 2a 00 00    	add    ebx,0x2a38
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32
  time_t time = *timer;
9f0029ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0029ed:	8b 00                	mov    eax,DWORD PTR [eax]
9f0029ef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:34
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f0029f2:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36

  dayclock = (unsigned long) time % SECS_DAY;
9f0029f9:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0029fc:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f002a01:	89 c8                	mov    eax,ecx
9f002a03:	f7 e2                	mul    edx
9f002a05:	89 d0                	mov    eax,edx
9f002a07:	c1 e8 10             	shr    eax,0x10
9f002a0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f002a0d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002a10:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f002a16:	29 c1                	sub    ecx,eax
9f002a18:	89 c8                	mov    eax,ecx
9f002a1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37
  dayno = (unsigned long) time / SECS_DAY;
9f002a1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002a20:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f002a25:	f7 e2                	mul    edx
9f002a27:	89 d0                	mov    eax,edx
9f002a29:	c1 e8 10             	shr    eax,0x10
9f002a2c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:39

  tmbuf->tm_sec = dayclock % 60;
9f002a2f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f002a32:	ba 89 88 88 88       	mov    edx,0x88888889
9f002a37:	89 c8                	mov    eax,ecx
9f002a39:	f7 e2                	mul    edx
9f002a3b:	89 d0                	mov    eax,edx
9f002a3d:	c1 e8 05             	shr    eax,0x5
9f002a40:	89 c2                	mov    edx,eax
9f002a42:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f002a49:	89 c2                	mov    edx,eax
9f002a4b:	89 d0                	mov    eax,edx
9f002a4d:	c1 e0 04             	shl    eax,0x4
9f002a50:	29 d0                	sub    eax,edx
9f002a52:	29 c1                	sub    ecx,eax
9f002a54:	89 c8                	mov    eax,ecx
9f002a56:	89 c2                	mov    edx,eax
9f002a58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a5b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f002a5d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f002a60:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f002a65:	89 c8                	mov    eax,ecx
9f002a67:	f7 e2                	mul    edx
9f002a69:	89 d0                	mov    eax,edx
9f002a6b:	c1 e8 0b             	shr    eax,0xb
9f002a6e:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f002a74:	29 c1                	sub    ecx,eax
9f002a76:	89 c8                	mov    eax,ecx
9f002a78:	ba 89 88 88 88       	mov    edx,0x88888889
9f002a7d:	f7 e2                	mul    edx
9f002a7f:	89 d0                	mov    eax,edx
9f002a81:	c1 e8 05             	shr    eax,0x5
9f002a84:	89 c2                	mov    edx,eax
9f002a86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a89:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_hour = dayclock / 3600;
9f002a8c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002a8f:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f002a94:	f7 e2                	mul    edx
9f002a96:	89 d0                	mov    eax,edx
9f002a98:	c1 e8 0b             	shr    eax,0xb
9f002a9b:	89 c2                	mov    edx,eax
9f002a9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002aa0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f002aa3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002aa6:	8d 48 04             	lea    ecx,[eax+0x4]
9f002aa9:	ba 25 49 92 24       	mov    edx,0x24924925
9f002aae:	89 c8                	mov    eax,ecx
9f002ab0:	f7 e2                	mul    edx
9f002ab2:	89 c8                	mov    eax,ecx
9f002ab4:	29 d0                	sub    eax,edx
9f002ab6:	d1 e8                	shr    eax,1
9f002ab8:	01 d0                	add    eax,edx
9f002aba:	c1 e8 02             	shr    eax,0x2
9f002abd:	89 c2                	mov    edx,eax
9f002abf:	c1 e2 03             	shl    edx,0x3
9f002ac2:	29 c2                	sub    edx,eax
9f002ac4:	89 c8                	mov    eax,ecx
9f002ac6:	29 d0                	sub    eax,edx
9f002ac8:	89 c2                	mov    edx,eax
9f002aca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002acd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f002ad0:	eb 66                	jmp    9f002b38 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
    dayno -= YEARSIZE(year);
9f002ad2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002ad5:	83 e0 03             	and    eax,0x3
9f002ad8:	85 c0                	test   eax,eax
9f002ada:	75 50                	jne    9f002b2c <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
9f002adc:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002adf:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002ae4:	89 c8                	mov    eax,ecx
9f002ae6:	f7 ea                	imul   edx
9f002ae8:	c1 fa 05             	sar    edx,0x5
9f002aeb:	89 c8                	mov    eax,ecx
9f002aed:	c1 f8 1f             	sar    eax,0x1f
9f002af0:	29 c2                	sub    edx,eax
9f002af2:	89 d0                	mov    eax,edx
9f002af4:	6b c0 64             	imul   eax,eax,0x64
9f002af7:	29 c1                	sub    ecx,eax
9f002af9:	89 c8                	mov    eax,ecx
9f002afb:	85 c0                	test   eax,eax
9f002afd:	75 26                	jne    9f002b25 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
9f002aff:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002b02:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002b07:	89 c8                	mov    eax,ecx
9f002b09:	f7 ea                	imul   edx
9f002b0b:	c1 fa 07             	sar    edx,0x7
9f002b0e:	89 c8                	mov    eax,ecx
9f002b10:	c1 f8 1f             	sar    eax,0x1f
9f002b13:	29 c2                	sub    edx,eax
9f002b15:	89 d0                	mov    eax,edx
9f002b17:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f002b1d:	29 c1                	sub    ecx,eax
9f002b1f:	89 c8                	mov    eax,ecx
9f002b21:	85 c0                	test   eax,eax
9f002b23:	75 07                	jne    9f002b2c <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
9f002b25:	b8 6e 01 00 00       	mov    eax,0x16e
9f002b2a:	eb 05                	jmp    9f002b31 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
9f002b2c:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
9f002b31:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
    year++;
9f002b34:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f002b38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002b3b:	83 e0 03             	and    eax,0x3
9f002b3e:	85 c0                	test   eax,eax
9f002b40:	75 50                	jne    9f002b92 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 1)
9f002b42:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002b45:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002b4a:	89 c8                	mov    eax,ecx
9f002b4c:	f7 ea                	imul   edx
9f002b4e:	c1 fa 05             	sar    edx,0x5
9f002b51:	89 c8                	mov    eax,ecx
9f002b53:	c1 f8 1f             	sar    eax,0x1f
9f002b56:	29 c2                	sub    edx,eax
9f002b58:	89 d0                	mov    eax,edx
9f002b5a:	6b c0 64             	imul   eax,eax,0x64
9f002b5d:	29 c1                	sub    ecx,eax
9f002b5f:	89 c8                	mov    eax,ecx
9f002b61:	85 c0                	test   eax,eax
9f002b63:	75 26                	jne    9f002b8b <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 4)
9f002b65:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002b68:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002b6d:	89 c8                	mov    eax,ecx
9f002b6f:	f7 ea                	imul   edx
9f002b71:	c1 fa 07             	sar    edx,0x7
9f002b74:	89 c8                	mov    eax,ecx
9f002b76:	c1 f8 1f             	sar    eax,0x1f
9f002b79:	29 c2                	sub    edx,eax
9f002b7b:	89 d0                	mov    eax,edx
9f002b7d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f002b83:	29 c1                	sub    ecx,eax
9f002b85:	89 c8                	mov    eax,ecx
9f002b87:	85 c0                	test   eax,eax
9f002b89:	75 07                	jne    9f002b92 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 5)
9f002b8b:	b8 6e 01 00 00       	mov    eax,0x16e
9f002b90:	eb 05                	jmp    9f002b97 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 6)
9f002b92:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 8)
9f002b97:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f002b9a:	0f 86 32 ff ff ff    	jbe    9f002ad2 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f002ba0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002ba3:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f002ba9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bac:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
  tmbuf->tm_yday = dayno;
9f002baf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f002bb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bb5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_mon = 0;
9f002bb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bbb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f002bc2:	e9 89 00 00 00       	jmp    9f002c50 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f002bc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002bca:	83 e0 03             	and    eax,0x3
9f002bcd:	85 c0                	test   eax,eax
9f002bcf:	75 50                	jne    9f002c21 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
9f002bd1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002bd4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002bd9:	89 c8                	mov    eax,ecx
9f002bdb:	f7 ea                	imul   edx
9f002bdd:	c1 fa 05             	sar    edx,0x5
9f002be0:	89 c8                	mov    eax,ecx
9f002be2:	c1 f8 1f             	sar    eax,0x1f
9f002be5:	29 c2                	sub    edx,eax
9f002be7:	89 d0                	mov    eax,edx
9f002be9:	6b c0 64             	imul   eax,eax,0x64
9f002bec:	29 c1                	sub    ecx,eax
9f002bee:	89 c8                	mov    eax,ecx
9f002bf0:	85 c0                	test   eax,eax
9f002bf2:	75 26                	jne    9f002c1a <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
9f002bf4:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002bf7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002bfc:	89 c8                	mov    eax,ecx
9f002bfe:	f7 ea                	imul   edx
9f002c00:	c1 fa 07             	sar    edx,0x7
9f002c03:	89 c8                	mov    eax,ecx
9f002c05:	c1 f8 1f             	sar    eax,0x1f
9f002c08:	29 c2                	sub    edx,eax
9f002c0a:	89 d0                	mov    eax,edx
9f002c0c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f002c12:	29 c1                	sub    ecx,eax
9f002c14:	89 c8                	mov    eax,ecx
9f002c16:	85 c0                	test   eax,eax
9f002c18:	75 07                	jne    9f002c21 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
9f002c1a:	ba 01 00 00 00       	mov    edx,0x1
9f002c1f:	eb 05                	jmp    9f002c26 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
9f002c21:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
9f002c26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c29:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f002c2c:	89 d0                	mov    eax,edx
9f002c2e:	01 c0                	add    eax,eax
9f002c30:	01 d0                	add    eax,edx
9f002c32:	c1 e0 02             	shl    eax,0x2
9f002c35:	01 c8                	add    eax,ecx
9f002c37:	8b 84 83 44 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2bc]
9f002c3e:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
    tmbuf->tm_mon++;
9f002c41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c44:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002c47:	8d 50 01             	lea    edx,[eax+0x1]
9f002c4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c4d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f002c50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002c53:	83 e0 03             	and    eax,0x3
9f002c56:	85 c0                	test   eax,eax
9f002c58:	75 50                	jne    9f002caa <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 1)
9f002c5a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002c5d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002c62:	89 c8                	mov    eax,ecx
9f002c64:	f7 ea                	imul   edx
9f002c66:	c1 fa 05             	sar    edx,0x5
9f002c69:	89 c8                	mov    eax,ecx
9f002c6b:	c1 f8 1f             	sar    eax,0x1f
9f002c6e:	29 c2                	sub    edx,eax
9f002c70:	89 d0                	mov    eax,edx
9f002c72:	6b c0 64             	imul   eax,eax,0x64
9f002c75:	29 c1                	sub    ecx,eax
9f002c77:	89 c8                	mov    eax,ecx
9f002c79:	85 c0                	test   eax,eax
9f002c7b:	75 26                	jne    9f002ca3 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 4)
9f002c7d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002c80:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002c85:	89 c8                	mov    eax,ecx
9f002c87:	f7 ea                	imul   edx
9f002c89:	c1 fa 07             	sar    edx,0x7
9f002c8c:	89 c8                	mov    eax,ecx
9f002c8e:	c1 f8 1f             	sar    eax,0x1f
9f002c91:	29 c2                	sub    edx,eax
9f002c93:	89 d0                	mov    eax,edx
9f002c95:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f002c9b:	29 c1                	sub    ecx,eax
9f002c9d:	89 c8                	mov    eax,ecx
9f002c9f:	85 c0                	test   eax,eax
9f002ca1:	75 07                	jne    9f002caa <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 5)
9f002ca3:	ba 01 00 00 00       	mov    edx,0x1
9f002ca8:	eb 05                	jmp    9f002caf <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 6)
9f002caa:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 8)
9f002caf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002cb2:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f002cb5:	89 d0                	mov    eax,edx
9f002cb7:	01 c0                	add    eax,eax
9f002cb9:	01 d0                	add    eax,edx
9f002cbb:	c1 e0 02             	shl    eax,0x2
9f002cbe:	01 c8                	add    eax,ecx
9f002cc0:	8b 84 83 44 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2bc]
9f002cc7:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f002cca:	0f 86 f7 fe ff ff    	jbe    9f002bc7 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f002cd0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002cd3:	83 c0 01             	add    eax,0x1
9f002cd6:	89 c2                	mov    edx,eax
9f002cd8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002cdb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
  tmbuf->tm_isdst = 0;
9f002cde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ce1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  return tmbuf;
9f002ce8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
}
9f002ceb:	83 c4 10             	add    esp,0x10
9f002cee:	5b                   	pop    ebx
9f002cef:	5d                   	pop    ebp
9f002cf0:	c3                   	ret    

9f002cf1 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f002cf1:	55                   	push   ebp
9f002cf2:	89 e5                	mov    ebp,esp
9f002cf4:	e8 6a 09 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002cf9:	05 23 27 00 00       	add    eax,0x2723
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
    return gmtime_rI(timer, tmbuf);
9f002cfe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002d01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002d04:	e8 cf fc ff ff       	call   9f0029d8 <gmtime_rI>
9f002d09:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
}
9f002d0c:	c9                   	leave  
9f002d0d:	c3                   	ret    

9f002d0e <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *localtime(const time_t *timer) {
9f002d0e:	55                   	push   ebp
9f002d0f:	89 e5                	mov    ebp,esp
9f002d11:	53                   	push   ebx
9f002d12:	83 ec 34             	sub    esp,0x34
9f002d15:	e8 49 09 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002d1a:	05 02 27 00 00       	add    eax,0x2702
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
  struct tm tmbuf;
  
  t = *timer - libcTZ;
9f002d1f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002d22:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f002d24:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
9f002d2a:	8b 12                	mov    edx,DWORD PTR [edx]
9f002d2c:	29 d1                	sub    ecx,edx
9f002d2e:	89 ca                	mov    edx,ecx
9f002d30:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_r(&t, &tmbuf);
9f002d33:	83 ec 08             	sub    esp,0x8
9f002d36:	8d 55 c8             	lea    edx,[ebp-0x38]
9f002d39:	52                   	push   edx
9f002d3a:	8d 55 f4             	lea    edx,[ebp-0xc]
9f002d3d:	52                   	push   edx
9f002d3e:	89 c3                	mov    ebx,eax
9f002d40:	e8 3b 09 00 00       	call   9f003680 <__x86.get_pc_thunk.ax+0x1d>
9f002d45:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
9f002d48:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002d4b:	c9                   	leave  
9f002d4c:	c3                   	ret    

9f002d4d <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f002d4d:	55                   	push   ebp
9f002d4e:	89 e5                	mov    ebp,esp
9f002d50:	83 ec 10             	sub    esp,0x10
9f002d53:	e8 0b 09 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002d58:	05 c4 26 00 00       	add    eax,0x26c4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
9f002d5d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002d60:	8b 12                	mov    edx,DWORD PTR [edx]
9f002d62:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
9f002d68:	8b 00                	mov    eax,DWORD PTR [eax]
9f002d6a:	29 c2                	sub    edx,eax
9f002d6c:	89 d0                	mov    eax,edx
9f002d6e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
9f002d71:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002d74:	8d 45 fc             	lea    eax,[ebp-0x4]
9f002d77:	50                   	push   eax
9f002d78:	e8 5b fc ff ff       	call   9f0029d8 <gmtime_rI>
9f002d7d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
9f002d80:	c9                   	leave  
9f002d81:	c3                   	ret    

9f002d82 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f002d82:	55                   	push   ebp
9f002d83:	89 e5                	mov    ebp,esp
9f002d85:	e8 d9 08 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f002d8a:	05 92 26 00 00       	add    eax,0x2692
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
9f002d8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002d92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002d95:	e8 b3 ff ff ff       	call   9f002d4d <localtime_rI>
9f002d9a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
9f002d9d:	c9                   	leave  
9f002d9e:	c3                   	ret    

9f002d9f <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
9f002d9f:	55                   	push   ebp
9f002da0:	89 e5                	mov    ebp,esp
9f002da2:	57                   	push   edi
9f002da3:	56                   	push   esi
9f002da4:	53                   	push   ebx
9f002da5:	83 ec 20             	sub    esp,0x20
9f002da8:	e8 e7 08 00 00       	call   9f003694 <__x86.get_pc_thunk.cx>
9f002dad:	81 c1 6f 26 00 00    	add    ecx,0x266f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f002db3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002db6:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f002db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002dbc:	8b 18                	mov    ebx,DWORD PTR [eax]
9f002dbe:	ba 89 88 88 88       	mov    edx,0x88888889
9f002dc3:	89 d8                	mov    eax,ebx
9f002dc5:	f7 ea                	imul   edx
9f002dc7:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f002dca:	c1 f8 05             	sar    eax,0x5
9f002dcd:	89 c2                	mov    edx,eax
9f002dcf:	89 d8                	mov    eax,ebx
9f002dd1:	c1 f8 1f             	sar    eax,0x1f
9f002dd4:	29 c2                	sub    edx,eax
9f002dd6:	89 d0                	mov    eax,edx
9f002dd8:	8d 14 06             	lea    edx,[esi+eax*1]
9f002ddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002dde:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
9f002de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002de4:	8b 18                	mov    ebx,DWORD PTR [eax]
9f002de6:	ba 89 88 88 88       	mov    edx,0x88888889
9f002deb:	89 d8                	mov    eax,ebx
9f002ded:	f7 ea                	imul   edx
9f002def:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f002df2:	c1 f8 05             	sar    eax,0x5
9f002df5:	89 c2                	mov    edx,eax
9f002df7:	89 d8                	mov    eax,ebx
9f002df9:	c1 f8 1f             	sar    eax,0x1f
9f002dfc:	29 c2                	sub    edx,eax
9f002dfe:	89 d0                	mov    eax,edx
9f002e00:	89 c2                	mov    edx,eax
9f002e02:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f002e09:	89 c2                	mov    edx,eax
9f002e0b:	89 d0                	mov    eax,edx
9f002e0d:	c1 e0 04             	shl    eax,0x4
9f002e10:	29 d0                	sub    eax,edx
9f002e12:	29 c3                	sub    ebx,eax
9f002e14:	89 d8                	mov    eax,ebx
9f002e16:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002e19:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
9f002e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e1e:	8b 00                	mov    eax,DWORD PTR [eax]
9f002e20:	85 c0                	test   eax,eax
9f002e22:	79 1c                	jns    9f002e40 <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
9f002e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e27:	8b 00                	mov    eax,DWORD PTR [eax]
9f002e29:	8d 50 3c             	lea    edx,[eax+0x3c]
9f002e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e2f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
9f002e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002e37:	8d 50 ff             	lea    edx,[eax-0x1]
9f002e3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e3d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f002e40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e43:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f002e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e49:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f002e4c:	ba 89 88 88 88       	mov    edx,0x88888889
9f002e51:	89 d8                	mov    eax,ebx
9f002e53:	f7 ea                	imul   edx
9f002e55:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f002e58:	c1 f8 05             	sar    eax,0x5
9f002e5b:	89 c2                	mov    edx,eax
9f002e5d:	89 d8                	mov    eax,ebx
9f002e5f:	c1 f8 1f             	sar    eax,0x1f
9f002e62:	29 c2                	sub    edx,eax
9f002e64:	89 d0                	mov    eax,edx
9f002e66:	8d 14 06             	lea    edx,[esi+eax*1]
9f002e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e6c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f002e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e72:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f002e75:	ba 89 88 88 88       	mov    edx,0x88888889
9f002e7a:	89 d8                	mov    eax,ebx
9f002e7c:	f7 ea                	imul   edx
9f002e7e:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f002e81:	c1 f8 05             	sar    eax,0x5
9f002e84:	89 c2                	mov    edx,eax
9f002e86:	89 d8                	mov    eax,ebx
9f002e88:	c1 f8 1f             	sar    eax,0x1f
9f002e8b:	29 c2                	sub    edx,eax
9f002e8d:	89 d0                	mov    eax,edx
9f002e8f:	89 c2                	mov    edx,eax
9f002e91:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f002e98:	89 c2                	mov    edx,eax
9f002e9a:	89 d0                	mov    eax,edx
9f002e9c:	c1 e0 04             	shl    eax,0x4
9f002e9f:	29 d0                	sub    eax,edx
9f002ea1:	29 c3                	sub    ebx,eax
9f002ea3:	89 d8                	mov    eax,ebx
9f002ea5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002ea8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
9f002eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002eae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002eb1:	85 c0                	test   eax,eax
9f002eb3:	79 1e                	jns    9f002ed3 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
9f002eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002eb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002ebb:	8d 50 3c             	lea    edx,[eax+0x3c]
9f002ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ec1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
9f002ec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ec7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f002eca:	8d 50 ff             	lea    edx,[eax-0x1]
9f002ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ed0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
9f002ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ed6:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f002ed9:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f002ede:	89 d8                	mov    eax,ebx
9f002ee0:	f7 ea                	imul   edx
9f002ee2:	c1 fa 02             	sar    edx,0x2
9f002ee5:	89 d8                	mov    eax,ebx
9f002ee7:	c1 f8 1f             	sar    eax,0x1f
9f002eea:	29 c2                	sub    edx,eax
9f002eec:	89 d0                	mov    eax,edx
9f002eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f002ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ef4:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f002ef7:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f002efc:	89 d8                	mov    eax,ebx
9f002efe:	f7 ea                	imul   edx
9f002f00:	c1 fa 02             	sar    edx,0x2
9f002f03:	89 d8                	mov    eax,ebx
9f002f05:	c1 f8 1f             	sar    eax,0x1f
9f002f08:	29 c2                	sub    edx,eax
9f002f0a:	89 d0                	mov    eax,edx
9f002f0c:	01 c0                	add    eax,eax
9f002f0e:	01 d0                	add    eax,edx
9f002f10:	c1 e0 03             	shl    eax,0x3
9f002f13:	29 c3                	sub    ebx,eax
9f002f15:	89 da                	mov    edx,ebx
9f002f17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f1a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
9f002f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f20:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f002f23:	85 c0                	test   eax,eax
9f002f25:	79 13                	jns    9f002f3a <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
9f002f27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f002f2d:	8d 50 18             	lea    edx,[eax+0x18]
9f002f30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f33:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
9f002f36:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f002f3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f3d:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f002f40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f43:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f002f46:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f002f4b:	89 d8                	mov    eax,ebx
9f002f4d:	f7 ea                	imul   edx
9f002f4f:	d1 fa                	sar    edx,1
9f002f51:	89 d8                	mov    eax,ebx
9f002f53:	c1 f8 1f             	sar    eax,0x1f
9f002f56:	29 c2                	sub    edx,eax
9f002f58:	89 d0                	mov    eax,edx
9f002f5a:	8d 14 06             	lea    edx,[esi+eax*1]
9f002f5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f60:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
9f002f63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f66:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f002f69:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f002f6e:	89 d8                	mov    eax,ebx
9f002f70:	f7 ea                	imul   edx
9f002f72:	d1 fa                	sar    edx,1
9f002f74:	89 d8                	mov    eax,ebx
9f002f76:	c1 f8 1f             	sar    eax,0x1f
9f002f79:	29 c2                	sub    edx,eax
9f002f7b:	89 d0                	mov    eax,edx
9f002f7d:	01 c0                	add    eax,eax
9f002f7f:	01 d0                	add    eax,edx
9f002f81:	c1 e0 02             	shl    eax,0x2
9f002f84:	29 c3                	sub    ebx,eax
9f002f86:	89 da                	mov    edx,ebx
9f002f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f8b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
9f002f8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f91:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002f94:	85 c0                	test   eax,eax
9f002f96:	79 1e                	jns    9f002fb6 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
9f002f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f9b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002f9e:	8d 50 0c             	lea    edx,[eax+0xc]
9f002fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fa4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
9f002fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002faa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f002fad:	8d 50 ff             	lea    edx,[eax-0x1]
9f002fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fb3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
9f002fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f002fbc:	83 e8 01             	sub    eax,0x1
9f002fbf:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
9f002fc2:	e9 c1 00 00 00       	jmp    9f003088 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
9f002fc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002fcd:	8d 50 ff             	lea    edx,[eax-0x1]
9f002fd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fd3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f002fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002fdc:	85 c0                	test   eax,eax
9f002fde:	79 19                	jns    9f002ff9 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
9f002fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fe3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f002fe6:	8d 50 ff             	lea    edx,[eax-0x1]
9f002fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fec:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
9f002fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ff2:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f002ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ffc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f002fff:	83 e0 03             	and    eax,0x3
9f003002:	85 c0                	test   eax,eax
9f003004:	75 62                	jne    9f003068 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
9f003006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003009:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00300c:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003012:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003017:	89 d8                	mov    eax,ebx
9f003019:	f7 ea                	imul   edx
9f00301b:	c1 fa 05             	sar    edx,0x5
9f00301e:	89 d8                	mov    eax,ebx
9f003020:	c1 f8 1f             	sar    eax,0x1f
9f003023:	29 c2                	sub    edx,eax
9f003025:	89 d0                	mov    eax,edx
9f003027:	6b c0 64             	imul   eax,eax,0x64
9f00302a:	29 c3                	sub    ebx,eax
9f00302c:	89 d8                	mov    eax,ebx
9f00302e:	85 c0                	test   eax,eax
9f003030:	75 2f                	jne    9f003061 <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
9f003032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003035:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003038:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00303e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003043:	89 d8                	mov    eax,ebx
9f003045:	f7 ea                	imul   edx
9f003047:	c1 fa 07             	sar    edx,0x7
9f00304a:	89 d8                	mov    eax,ebx
9f00304c:	c1 f8 1f             	sar    eax,0x1f
9f00304f:	29 c2                	sub    edx,eax
9f003051:	89 d0                	mov    eax,edx
9f003053:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003059:	29 c3                	sub    ebx,eax
9f00305b:	89 d8                	mov    eax,ebx
9f00305d:	85 c0                	test   eax,eax
9f00305f:	75 07                	jne    9f003068 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
9f003061:	ba 01 00 00 00       	mov    edx,0x1
9f003066:	eb 05                	jmp    9f00306d <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
9f003068:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
9f00306d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003070:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003073:	89 d0                	mov    eax,edx
9f003075:	01 c0                	add    eax,eax
9f003077:	01 d0                	add    eax,edx
9f003079:	c1 e0 02             	shl    eax,0x2
9f00307c:	01 d8                	add    eax,ebx
9f00307e:	8b 84 81 44 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2bc]
9f003085:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f003088:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00308c:	0f 88 35 ff ff ff    	js     9f002fc7 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f003092:	e9 c2 00 00 00       	jmp    9f003159 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f003097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00309a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00309d:	83 e0 03             	and    eax,0x3
9f0030a0:	85 c0                	test   eax,eax
9f0030a2:	75 62                	jne    9f003106 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f0030a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030a7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0030aa:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0030b0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0030b5:	89 d8                	mov    eax,ebx
9f0030b7:	f7 ea                	imul   edx
9f0030b9:	c1 fa 05             	sar    edx,0x5
9f0030bc:	89 d8                	mov    eax,ebx
9f0030be:	c1 f8 1f             	sar    eax,0x1f
9f0030c1:	29 c2                	sub    edx,eax
9f0030c3:	89 d0                	mov    eax,edx
9f0030c5:	6b c0 64             	imul   eax,eax,0x64
9f0030c8:	29 c3                	sub    ebx,eax
9f0030ca:	89 d8                	mov    eax,ebx
9f0030cc:	85 c0                	test   eax,eax
9f0030ce:	75 2f                	jne    9f0030ff <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f0030d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030d3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0030d6:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0030dc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0030e1:	89 d8                	mov    eax,ebx
9f0030e3:	f7 ea                	imul   edx
9f0030e5:	c1 fa 07             	sar    edx,0x7
9f0030e8:	89 d8                	mov    eax,ebx
9f0030ea:	c1 f8 1f             	sar    eax,0x1f
9f0030ed:	29 c2                	sub    edx,eax
9f0030ef:	89 d0                	mov    eax,edx
9f0030f1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0030f7:	29 c3                	sub    ebx,eax
9f0030f9:	89 d8                	mov    eax,ebx
9f0030fb:	85 c0                	test   eax,eax
9f0030fd:	75 07                	jne    9f003106 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f0030ff:	ba 01 00 00 00       	mov    edx,0x1
9f003104:	eb 05                	jmp    9f00310b <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f003106:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f00310b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00310e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003111:	89 d0                	mov    eax,edx
9f003113:	01 c0                	add    eax,eax
9f003115:	01 d0                	add    eax,edx
9f003117:	c1 e0 02             	shl    eax,0x2
9f00311a:	01 d8                	add    eax,ebx
9f00311c:	8b 84 81 44 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2bc]
9f003123:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f003126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003129:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00312c:	8d 50 01             	lea    edx,[eax+0x1]
9f00312f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003132:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f003135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003138:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00313b:	83 f8 0c             	cmp    eax,0xc
9f00313e:	75 19                	jne    9f003159 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
9f003140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003143:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
9f00314a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00314d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003150:	8d 50 01             	lea    edx,[eax+0x1]
9f003153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003156:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f003159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00315c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00315f:	83 e0 03             	and    eax,0x3
9f003162:	85 c0                	test   eax,eax
9f003164:	75 62                	jne    9f0031c8 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
9f003166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003169:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00316c:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003172:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003177:	89 d8                	mov    eax,ebx
9f003179:	f7 ea                	imul   edx
9f00317b:	c1 fa 05             	sar    edx,0x5
9f00317e:	89 d8                	mov    eax,ebx
9f003180:	c1 f8 1f             	sar    eax,0x1f
9f003183:	29 c2                	sub    edx,eax
9f003185:	89 d0                	mov    eax,edx
9f003187:	6b c0 64             	imul   eax,eax,0x64
9f00318a:	29 c3                	sub    ebx,eax
9f00318c:	89 d8                	mov    eax,ebx
9f00318e:	85 c0                	test   eax,eax
9f003190:	75 2f                	jne    9f0031c1 <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
9f003192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003195:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003198:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00319e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0031a3:	89 d8                	mov    eax,ebx
9f0031a5:	f7 ea                	imul   edx
9f0031a7:	c1 fa 07             	sar    edx,0x7
9f0031aa:	89 d8                	mov    eax,ebx
9f0031ac:	c1 f8 1f             	sar    eax,0x1f
9f0031af:	29 c2                	sub    edx,eax
9f0031b1:	89 d0                	mov    eax,edx
9f0031b3:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0031b9:	29 c3                	sub    ebx,eax
9f0031bb:	89 d8                	mov    eax,ebx
9f0031bd:	85 c0                	test   eax,eax
9f0031bf:	75 07                	jne    9f0031c8 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
9f0031c1:	ba 01 00 00 00       	mov    edx,0x1
9f0031c6:	eb 05                	jmp    9f0031cd <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
9f0031c8:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
9f0031cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031d0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0031d3:	89 d0                	mov    eax,edx
9f0031d5:	01 c0                	add    eax,eax
9f0031d7:	01 d0                	add    eax,edx
9f0031d9:	c1 e0 02             	shl    eax,0x2
9f0031dc:	01 d8                	add    eax,ebx
9f0031de:	8b 84 81 44 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2bc]
9f0031e5:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0031e8:	0f 8e a9 fe ff ff    	jle    9f003097 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f0031ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0031f1:	8d 50 01             	lea    edx,[eax+0x1]
9f0031f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
9f0031fa:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f003201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003204:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003207:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f00320a:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f003210:	39 d0                	cmp    eax,edx
9f003212:	7d 0a                	jge    9f00321e <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
9f003214:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f003219:	e9 d0 03 00 00       	jmp    9f0035ee <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
9f00321e:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
9f003225:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
9f00322c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f003233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003236:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003239:	05 6c 07 00 00       	add    eax,0x76c
9f00323e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f003241:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003244:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003247:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f00324c:	7e 07                	jle    9f003255 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
9f00324e:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
9f003255:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003258:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00325b:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f003261:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f003264:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f003269:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f00326c:	89 c2                	mov    edx,eax
9f00326e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003271:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003274:	8d 58 03             	lea    ebx,[eax+0x3]
9f003277:	85 c0                	test   eax,eax
9f003279:	0f 48 c3             	cmovs  eax,ebx
9f00327c:	c1 f8 02             	sar    eax,0x2
9f00327f:	83 c0 01             	add    eax,0x1
9f003282:	39 c2                	cmp    edx,eax
9f003284:	7d 04                	jge    9f00328a <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
9f003286:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f00328a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00328d:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003290:	8d 50 03             	lea    edx,[eax+0x3]
9f003293:	85 c0                	test   eax,eax
9f003295:	0f 48 c2             	cmovs  eax,edx
9f003298:	c1 f8 02             	sar    eax,0x2
9f00329b:	89 c3                	mov    ebx,eax
9f00329d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0032a0:	83 e0 03             	and    eax,0x3
9f0032a3:	85 c0                	test   eax,eax
9f0032a5:	74 29                	je     9f0032d0 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f0032a7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0032aa:	99                   	cdq    
9f0032ab:	c1 ea 1e             	shr    edx,0x1e
9f0032ae:	01 d0                	add    eax,edx
9f0032b0:	83 e0 03             	and    eax,0x3
9f0032b3:	29 d0                	sub    eax,edx
9f0032b5:	89 c6                	mov    esi,eax
9f0032b7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0032ba:	99                   	cdq    
9f0032bb:	c1 ea 1e             	shr    edx,0x1e
9f0032be:	01 d0                	add    eax,edx
9f0032c0:	83 e0 03             	and    eax,0x3
9f0032c3:	29 d0                	sub    eax,edx
9f0032c5:	39 c6                	cmp    esi,eax
9f0032c7:	7d 07                	jge    9f0032d0 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
9f0032c9:	b8 01 00 00 00       	mov    eax,0x1
9f0032ce:	eb 05                	jmp    9f0032d5 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
9f0032d0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
9f0032d5:	01 d8                	add    eax,ebx
9f0032d7:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f0032da:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0032dd:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0032e0:	89 c3                	mov    ebx,eax
9f0032e2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0032e7:	89 d8                	mov    eax,ebx
9f0032e9:	f7 ea                	imul   edx
9f0032eb:	c1 fa 05             	sar    edx,0x5
9f0032ee:	89 d8                	mov    eax,ebx
9f0032f0:	c1 f8 1f             	sar    eax,0x1f
9f0032f3:	89 d7                	mov    edi,edx
9f0032f5:	29 c7                	sub    edi,eax
9f0032f7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0032fa:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0032ff:	89 d8                	mov    eax,ebx
9f003301:	f7 ea                	imul   edx
9f003303:	c1 fa 05             	sar    edx,0x5
9f003306:	89 d8                	mov    eax,ebx
9f003308:	c1 f8 1f             	sar    eax,0x1f
9f00330b:	29 c2                	sub    edx,eax
9f00330d:	89 d0                	mov    eax,edx
9f00330f:	6b c0 64             	imul   eax,eax,0x64
9f003312:	29 c3                	sub    ebx,eax
9f003314:	89 d8                	mov    eax,ebx
9f003316:	85 c0                	test   eax,eax
9f003318:	74 49                	je     9f003363 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
9f00331a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f00331d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003322:	89 d8                	mov    eax,ebx
9f003324:	f7 ea                	imul   edx
9f003326:	c1 fa 05             	sar    edx,0x5
9f003329:	89 d8                	mov    eax,ebx
9f00332b:	c1 f8 1f             	sar    eax,0x1f
9f00332e:	89 d6                	mov    esi,edx
9f003330:	29 c6                	sub    esi,eax
9f003332:	6b c6 64             	imul   eax,esi,0x64
9f003335:	89 de                	mov    esi,ebx
9f003337:	29 c6                	sub    esi,eax
9f003339:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f00333c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003341:	89 d8                	mov    eax,ebx
9f003343:	f7 ea                	imul   edx
9f003345:	c1 fa 05             	sar    edx,0x5
9f003348:	89 d8                	mov    eax,ebx
9f00334a:	c1 f8 1f             	sar    eax,0x1f
9f00334d:	29 c2                	sub    edx,eax
9f00334f:	89 d0                	mov    eax,edx
9f003351:	6b c0 64             	imul   eax,eax,0x64
9f003354:	29 c3                	sub    ebx,eax
9f003356:	89 d8                	mov    eax,ebx
9f003358:	39 c6                	cmp    esi,eax
9f00335a:	7d 07                	jge    9f003363 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
9f00335c:	b8 01 00 00 00       	mov    eax,0x1
9f003361:	eb 05                	jmp    9f003368 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
9f003363:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
9f003368:	01 f8                	add    eax,edi
9f00336a:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f00336d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003370:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003373:	89 c3                	mov    ebx,eax
9f003375:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00337a:	89 d8                	mov    eax,ebx
9f00337c:	f7 ea                	imul   edx
9f00337e:	c1 fa 07             	sar    edx,0x7
9f003381:	89 d8                	mov    eax,ebx
9f003383:	c1 f8 1f             	sar    eax,0x1f
9f003386:	89 d7                	mov    edi,edx
9f003388:	29 c7                	sub    edi,eax
9f00338a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f00338d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003392:	89 d8                	mov    eax,ebx
9f003394:	f7 ea                	imul   edx
9f003396:	c1 fa 07             	sar    edx,0x7
9f003399:	89 d8                	mov    eax,ebx
9f00339b:	c1 f8 1f             	sar    eax,0x1f
9f00339e:	29 c2                	sub    edx,eax
9f0033a0:	89 d0                	mov    eax,edx
9f0033a2:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0033a8:	29 c3                	sub    ebx,eax
9f0033aa:	89 d8                	mov    eax,ebx
9f0033ac:	85 c0                	test   eax,eax
9f0033ae:	74 4f                	je     9f0033ff <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f0033b0:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0033b3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0033b8:	89 d8                	mov    eax,ebx
9f0033ba:	f7 ea                	imul   edx
9f0033bc:	c1 fa 07             	sar    edx,0x7
9f0033bf:	89 d8                	mov    eax,ebx
9f0033c1:	c1 f8 1f             	sar    eax,0x1f
9f0033c4:	89 d6                	mov    esi,edx
9f0033c6:	29 c6                	sub    esi,eax
9f0033c8:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f0033ce:	89 de                	mov    esi,ebx
9f0033d0:	29 c6                	sub    esi,eax
9f0033d2:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f0033d5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0033da:	89 d8                	mov    eax,ebx
9f0033dc:	f7 ea                	imul   edx
9f0033de:	c1 fa 07             	sar    edx,0x7
9f0033e1:	89 d8                	mov    eax,ebx
9f0033e3:	c1 f8 1f             	sar    eax,0x1f
9f0033e6:	29 c2                	sub    edx,eax
9f0033e8:	89 d0                	mov    eax,edx
9f0033ea:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0033f0:	29 c3                	sub    ebx,eax
9f0033f2:	89 d8                	mov    eax,ebx
9f0033f4:	39 c6                	cmp    esi,eax
9f0033f6:	7d 07                	jge    9f0033ff <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
9f0033f8:	b8 01 00 00 00       	mov    eax,0x1
9f0033fd:	eb 05                	jmp    9f003404 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
9f0033ff:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
9f003404:	01 f8                	add    eax,edi
9f003406:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
9f003409:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f003410:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003413:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f003416:	eb 7b                	jmp    9f003493 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f003418:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00341b:	83 e0 03             	and    eax,0x3
9f00341e:	85 c0                	test   eax,eax
9f003420:	75 50                	jne    9f003472 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
9f003422:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003425:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00342a:	89 d8                	mov    eax,ebx
9f00342c:	f7 ea                	imul   edx
9f00342e:	c1 fa 05             	sar    edx,0x5
9f003431:	89 d8                	mov    eax,ebx
9f003433:	c1 f8 1f             	sar    eax,0x1f
9f003436:	29 c2                	sub    edx,eax
9f003438:	89 d0                	mov    eax,edx
9f00343a:	6b c0 64             	imul   eax,eax,0x64
9f00343d:	29 c3                	sub    ebx,eax
9f00343f:	89 d8                	mov    eax,ebx
9f003441:	85 c0                	test   eax,eax
9f003443:	75 26                	jne    9f00346b <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
9f003445:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003448:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00344d:	89 d8                	mov    eax,ebx
9f00344f:	f7 ea                	imul   edx
9f003451:	c1 fa 07             	sar    edx,0x7
9f003454:	89 d8                	mov    eax,ebx
9f003456:	c1 f8 1f             	sar    eax,0x1f
9f003459:	29 c2                	sub    edx,eax
9f00345b:	89 d0                	mov    eax,edx
9f00345d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003463:	29 c3                	sub    ebx,eax
9f003465:	89 d8                	mov    eax,ebx
9f003467:	85 c0                	test   eax,eax
9f003469:	75 07                	jne    9f003472 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
9f00346b:	ba 01 00 00 00       	mov    edx,0x1
9f003470:	eb 05                	jmp    9f003477 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
9f003472:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
9f003477:	89 d0                	mov    eax,edx
9f003479:	01 c0                	add    eax,eax
9f00347b:	01 d0                	add    eax,edx
9f00347d:	c1 e0 02             	shl    eax,0x2
9f003480:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f003483:	01 d0                	add    eax,edx
9f003485:	8b 84 81 44 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2bc]
9f00348c:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
9f00348f:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f003493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003496:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003499:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f00349c:	0f 8f 76 ff ff ff    	jg     9f003418 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f0034a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f0034a8:	83 e8 01             	sub    eax,0x1
9f0034ab:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
9f0034ae:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0034b1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034b4:	01 d0                	add    eax,edx
9f0034b6:	85 c0                	test   eax,eax
9f0034b8:	79 04                	jns    9f0034be <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
9f0034ba:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
9f0034be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034c1:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
9f0034c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034c7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0034ca:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f0034cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0034d0:	8d 58 04             	lea    ebx,[eax+0x4]
9f0034d3:	ba 93 24 49 92       	mov    edx,0x92492493
9f0034d8:	89 d8                	mov    eax,ebx
9f0034da:	f7 ea                	imul   edx
9f0034dc:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0034df:	c1 f8 02             	sar    eax,0x2
9f0034e2:	89 c2                	mov    edx,eax
9f0034e4:	89 d8                	mov    eax,ebx
9f0034e6:	c1 f8 1f             	sar    eax,0x1f
9f0034e9:	29 c2                	sub    edx,eax
9f0034eb:	89 d0                	mov    eax,edx
9f0034ed:	89 c2                	mov    edx,eax
9f0034ef:	c1 e2 03             	shl    edx,0x3
9f0034f2:	29 c2                	sub    edx,eax
9f0034f4:	89 d8                	mov    eax,ebx
9f0034f6:	29 d0                	sub    eax,edx
9f0034f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0034fb:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f0034fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003501:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f003504:	c1 e0 02             	shl    eax,0x2
9f003507:	89 c2                	mov    edx,eax
9f003509:	c1 e2 04             	shl    edx,0x4
9f00350c:	29 c2                	sub    edx,eax
9f00350e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003511:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f003514:	01 d0                	add    eax,edx
9f003516:	c1 e0 02             	shl    eax,0x2
9f003519:	89 c2                	mov    edx,eax
9f00351b:	c1 e2 04             	shl    edx,0x4
9f00351e:	29 c2                	sub    edx,eax
9f003520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003523:	8b 00                	mov    eax,DWORD PTR [eax]
9f003525:	01 d0                	add    eax,edx
9f003527:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f00352a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f00352f:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f003532:	89 c3                	mov    ebx,eax
9f003534:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003539:	89 d8                	mov    eax,ebx
9f00353b:	f7 ea                	imul   edx
9f00353d:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003540:	c1 f8 10             	sar    eax,0x10
9f003543:	89 c2                	mov    edx,eax
9f003545:	89 d8                	mov    eax,ebx
9f003547:	c1 f8 1f             	sar    eax,0x1f
9f00354a:	29 c2                	sub    edx,eax
9f00354c:	89 d0                	mov    eax,edx
9f00354e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003551:	7d 04                	jge    9f003557 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
9f003553:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
9f003557:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00355a:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f003560:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f003563:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f003569:	8b 00                	mov    eax,DWORD PTR [eax]
9f00356b:	85 c0                	test   eax,eax
9f00356d:	7e 16                	jle    9f003585 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
9f00356f:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f003575:	8b 00                	mov    eax,DWORD PTR [eax]
9f003577:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f00357c:	29 c2                	sub    edx,eax
9f00357e:	89 d0                	mov    eax,edx
9f003580:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f003583:	7c 1b                	jl     9f0035a0 <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f003585:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f00358b:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f00358d:	85 c0                	test   eax,eax
9f00358f:	79 13                	jns    9f0035a4 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f003591:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f003597:	8b 00                	mov    eax,DWORD PTR [eax]
9f003599:	f7 d8                	neg    eax
9f00359b:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f00359e:	7e 04                	jle    9f0035a4 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
          overflow|=16;
9f0035a0:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
9f0035a4:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f0035aa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0035ac:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
9f0035af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f0035b5:	85 c0                	test   eax,eax
9f0035b7:	74 0b                	je     9f0035c4 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
9f0035b9:	8b 81 58 00 00 00    	mov    eax,DWORD PTR [ecx+0x58]
9f0035bf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f0035c2:	eb 07                	jmp    9f0035cb <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
9f0035c4:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f0035cb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0035ce:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f0035d1:	7e 04                	jle    9f0035d7 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
9f0035d3:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
9f0035d7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0035da:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
9f0035dd:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0035e1:	74 08                	je     9f0035eb <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f0035e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0035e6:	83 e8 02             	sub    eax,0x2
9f0035e9:	eb 03                	jmp    9f0035ee <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f0035eb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
9f0035ee:	83 c4 20             	add    esp,0x20
9f0035f1:	5b                   	pop    ebx
9f0035f2:	5e                   	pop    esi
9f0035f3:	5f                   	pop    edi
9f0035f4:	5d                   	pop    ebp
9f0035f5:	c3                   	ret    

9f0035f6 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f0035f6:	55                   	push   ebp
9f0035f7:	89 e5                	mov    ebp,esp
9f0035f9:	56                   	push   esi
9f0035fa:	53                   	push   ebx
9f0035fb:	83 ec 14             	sub    esp,0x14
9f0035fe:	e8 60 00 00 00       	call   9f003663 <__x86.get_pc_thunk.ax>
9f003603:	05 19 1e 00 00       	add    eax,0x1e19
9f003608:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00360b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
9f00360e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f003615:	b8 71 01 00 00       	mov    eax,0x171
9f00361a:	bb 00 00 00 00       	mov    ebx,0x0
9f00361f:	b9 00 00 00 00       	mov    ecx,0x0
9f003624:	ba 00 00 00 00       	mov    edx,0x0
9f003629:	be 00 00 00 00       	mov    esi,0x0
9f00362e:	e8 fc ff ff ff       	call   9f00362f <gettime+0x39>
9f003633:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
9f003636:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f00363a:	74 11                	je     9f00364d <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
9f00363c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00363f:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003642:	50                   	push   eax
9f003643:	e8 05 f7 ff ff       	call   9f002d4d <localtime_rI>
9f003648:	83 c4 08             	add    esp,0x8
9f00364b:	eb 0f                	jmp    9f00365c <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
9f00364d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003650:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003653:	50                   	push   eax
9f003654:	e8 7f f3 ff ff       	call   9f0029d8 <gmtime_rI>
9f003659:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
9f00365c:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00365f:	5b                   	pop    ebx
9f003660:	5e                   	pop    esi
9f003661:	5d                   	pop    ebp
9f003662:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f003663 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f003663:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f003666:	c3                   	ret    

Disassembly of section .plt:

9f003670 <.plt>:
9f003670:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
9f003676:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
9f00367c:	00 00                	add    BYTE PTR [eax],al
9f00367e:	00 00                	add    BYTE PTR [eax],al
9f003680:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
9f003686:	68 00 00 00 00       	push   0x0
9f00368b:	e9 e0 ff ff ff       	jmp    9f003670 <__x86.get_pc_thunk.ax+0xd>

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f003690 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f003690:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f003693:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f003694 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f003694:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f003697:	c3                   	ret    

Disassembly of section .eh_frame:

9f003698 <.eh_frame>:
9f003698:	14 00                	adc    al,0x0
9f00369a:	00 00                	add    BYTE PTR [eax],al
9f00369c:	00 00                	add    BYTE PTR [eax],al
9f00369e:	00 00                	add    BYTE PTR [eax],al
9f0036a0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0036a3:	00 01                	add    BYTE PTR [ecx],al
9f0036a5:	7c 08                	jl     9f0036af <__x86.get_pc_thunk.cx+0x1b>
9f0036a7:	01 1b                	add    DWORD PTR [ebx],ebx
9f0036a9:	0c 04                	or     al,0x4
9f0036ab:	04 88                	add    al,0x88
9f0036ad:	01 00                	add    DWORD PTR [eax],eax
9f0036af:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0036b2:	00 00                	add    BYTE PTR [eax],al
9f0036b4:	1c 00                	sbb    al,0x0
9f0036b6:	00 00                	add    BYTE PTR [eax],al
9f0036b8:	48                   	dec    eax
9f0036b9:	c9                   	leave  
9f0036ba:	ff                   	(bad)  
9f0036bb:	ff                   	(bad)  
9f0036bc:	38 00                	cmp    BYTE PTR [eax],al
9f0036be:	00 00                	add    BYTE PTR [eax],al
9f0036c0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0036c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0036c9:	74 c5                	je     9f003690 <__x86.get_pc_thunk.bx>
9f0036cb:	0c 04                	or     al,0x4
9f0036cd:	04 00                	add    al,0x0
9f0036cf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0036d2:	00 00                	add    BYTE PTR [eax],al
9f0036d4:	3c 00                	cmp    al,0x0
9f0036d6:	00 00                	add    BYTE PTR [eax],al
9f0036d8:	60                   	pusha  
9f0036d9:	c9                   	leave  
9f0036da:	ff                   	(bad)  
9f0036db:	ff                   	(bad)  
9f0036dc:	38 00                	cmp    BYTE PTR [eax],al
9f0036de:	00 00                	add    BYTE PTR [eax],al
9f0036e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0036e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0036e9:	74 c5                	je     9f0036b0 <__x86.get_pc_thunk.cx+0x1c>
9f0036eb:	0c 04                	or     al,0x4
9f0036ed:	04 00                	add    al,0x0
9f0036ef:	00 10                	add    BYTE PTR [eax],dl
9f0036f1:	00 00                	add    BYTE PTR [eax],al
9f0036f3:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f0036f7:	00 6b ff             	add    BYTE PTR [ebx-0x1],ch
9f0036fa:	ff                   	(bad)  
9f0036fb:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f0036fe:	00 00                	add    BYTE PTR [eax],al
9f003700:	00 00                	add    BYTE PTR [eax],al
9f003702:	00 00                	add    BYTE PTR [eax],al
9f003704:	24 00                	and    al,0x0
9f003706:	00 00                	add    BYTE PTR [eax],al
9f003708:	70 00                	jo     9f00370a <__x86.get_pc_thunk.cx+0x76>
9f00370a:	00 00                	add    BYTE PTR [eax],al
9f00370c:	64                   	fs
9f00370d:	c9                   	leave  
9f00370e:	ff                   	(bad)  
9f00370f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f003712:	00 00                	add    BYTE PTR [eax],al
9f003714:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003717:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00371d:	42                   	inc    edx
9f00371e:	86 03                	xchg   BYTE PTR [ebx],al
9f003720:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f003724:	c3                   	ret    
9f003725:	41                   	inc    ecx
9f003726:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00372a:	04 04                	add    al,0x4
9f00372c:	24 00                	and    al,0x0
9f00372e:	00 00                	add    BYTE PTR [eax],al
9f003730:	98                   	cwde   
9f003731:	00 00                	add    BYTE PTR [eax],al
9f003733:	00 91 c9 ff ff 55    	add    BYTE PTR [ecx+0x55ffffc9],dl
9f003739:	00 00                	add    BYTE PTR [eax],al
9f00373b:	00 00                	add    BYTE PTR [eax],al
9f00373d:	41                   	inc    ecx
9f00373e:	0e                   	push   cs
9f00373f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003745:	42                   	inc    edx
9f003746:	86 03                	xchg   BYTE PTR [ebx],al
9f003748:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f00374c:	c3                   	ret    
9f00374d:	41                   	inc    ecx
9f00374e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003752:	04 04                	add    al,0x4
9f003754:	24 00                	and    al,0x0
9f003756:	00 00                	add    BYTE PTR [eax],al
9f003758:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f00375b:	00 c0                	add    al,al
9f00375d:	c9                   	leave  
9f00375e:	ff                   	(bad)  
9f00375f:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f003765:	41                   	inc    ecx
9f003766:	0e                   	push   cs
9f003767:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00376d:	42                   	inc    edx
9f00376e:	86 03                	xchg   BYTE PTR [ebx],al
9f003770:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f003774:	c3                   	ret    
9f003775:	41                   	inc    ecx
9f003776:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00377a:	04 04                	add    al,0x4
9f00377c:	10 00                	adc    BYTE PTR [eax],al
9f00377e:	00 00                	add    BYTE PTR [eax],al
9f003780:	e8 00 00 00 0c       	call   ab003785 <ticksToWait+0xbffe30d>
9f003785:	ff                   	(bad)  
9f003786:	ff                   	(bad)  
9f003787:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f00378a:	00 00                	add    BYTE PTR [eax],al
9f00378c:	00 00                	add    BYTE PTR [eax],al
9f00378e:	00 00                	add    BYTE PTR [eax],al
9f003790:	20 00                	and    BYTE PTR [eax],al
9f003792:	00 00                	add    BYTE PTR [eax],al
9f003794:	fc                   	cld    
9f003795:	00 00                	add    BYTE PTR [eax],al
9f003797:	00 1c ca             	add    BYTE PTR [edx+ecx*8],bl
9f00379a:	ff                   	(bad)  
9f00379b:	ff 77 00             	push   DWORD PTR [edi+0x0]
9f00379e:	00 00                	add    BYTE PTR [eax],al
9f0037a0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0037a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0037a9:	44                   	inc    esp
9f0037aa:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0037ad:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0037ae:	c5 c3 0c             	(bad)  
9f0037b1:	04 04                	add    al,0x4
9f0037b3:	00 20                	add    BYTE PTR [eax],ah
9f0037b5:	00 00                	add    BYTE PTR [eax],al
9f0037b7:	00 20                	add    BYTE PTR [eax],ah
9f0037b9:	01 00                	add    DWORD PTR [eax],eax
9f0037bb:	00 6f ca             	add    BYTE PTR [edi-0x36],ch
9f0037be:	ff                   	(bad)  
9f0037bf:	ff                   	(bad)  
9f0037c0:	bb 00 00 00 00       	mov    ebx,0x0
9f0037c5:	41                   	inc    ecx
9f0037c6:	0e                   	push   cs
9f0037c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0037cd:	44                   	inc    esp
9f0037ce:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0037d1:	b3 c5                	mov    bl,0xc5
9f0037d3:	c3                   	ret    
9f0037d4:	0c 04                	or     al,0x4
9f0037d6:	04 00                	add    al,0x0
9f0037d8:	20 00                	and    BYTE PTR [eax],al
9f0037da:	00 00                	add    BYTE PTR [eax],al
9f0037dc:	44                   	inc    esp
9f0037dd:	01 00                	add    DWORD PTR [eax],eax
9f0037df:	00 06                	add    BYTE PTR [esi],al
9f0037e1:	cb                   	retf   
9f0037e2:	ff                   	(bad)  
9f0037e3:	ff                   	(bad)  
9f0037e4:	bb 00 00 00 00       	mov    ebx,0x0
9f0037e9:	41                   	inc    ecx
9f0037ea:	0e                   	push   cs
9f0037eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0037f1:	44                   	inc    esp
9f0037f2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0037f5:	b3 c5                	mov    bl,0xc5
9f0037f7:	c3                   	ret    
9f0037f8:	0c 04                	or     al,0x4
9f0037fa:	04 00                	add    al,0x0
9f0037fc:	1c 00                	sbb    al,0x0
9f0037fe:	00 00                	add    BYTE PTR [eax],al
9f003800:	68 01 00 00 9d       	push   0x9d000001
9f003805:	cb                   	retf   
9f003806:	ff                   	(bad)  
9f003807:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
9f00380b:	00 00                	add    BYTE PTR [eax],al
9f00380d:	41                   	inc    ecx
9f00380e:	0e                   	push   cs
9f00380f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003815:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f003818:	0c 04                	or     al,0x4
9f00381a:	04 00                	add    al,0x0
9f00381c:	20 00                	and    BYTE PTR [eax],al
9f00381e:	00 00                	add    BYTE PTR [eax],al
9f003820:	88 01                	mov    BYTE PTR [ecx],al
9f003822:	00 00                	add    BYTE PTR [eax],al
9f003824:	dc cb                	fmul   st(3),st
9f003826:	ff                   	(bad)  
9f003827:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
9f00382d:	41                   	inc    ecx
9f00382e:	0e                   	push   cs
9f00382f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003835:	44                   	inc    esp
9f003836:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003839:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f00383e:	04 00                	add    al,0x0
9f003840:	20 00                	and    BYTE PTR [eax],al
9f003842:	00 00                	add    BYTE PTR [eax],al
9f003844:	ac                   	lods   al,BYTE PTR ds:[esi]
9f003845:	01 00                	add    DWORD PTR [eax],eax
9f003847:	00 62 cc             	add    BYTE PTR [edx-0x34],ah
9f00384a:	ff                   	(bad)  
9f00384b:	ff c1                	inc    ecx
9f00384d:	01 00                	add    DWORD PTR [eax],eax
9f00384f:	00 00                	add    BYTE PTR [eax],al
9f003851:	41                   	inc    ecx
9f003852:	0e                   	push   cs
9f003853:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003859:	44                   	inc    esp
9f00385a:	83 03 03             	add    DWORD PTR [ebx],0x3
9f00385d:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f003862:	04 04                	add    al,0x4
9f003864:	20 00                	and    BYTE PTR [eax],al
9f003866:	00 00                	add    BYTE PTR [eax],al
9f003868:	d0 01                	rol    BYTE PTR [ecx],1
9f00386a:	00 00                	add    BYTE PTR [eax],al
9f00386c:	00 ce                	add    dh,cl
9f00386e:	ff                   	(bad)  
9f00386f:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
9f003875:	41                   	inc    ecx
9f003876:	0e                   	push   cs
9f003877:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00387d:	44                   	inc    esp
9f00387e:	83 03 65             	add    DWORD PTR [ebx],0x65
9f003881:	c5 c3 0c             	(bad)  
9f003884:	04 04                	add    al,0x4
9f003886:	00 00                	add    BYTE PTR [eax],al
9f003888:	20 00                	and    BYTE PTR [eax],al
9f00388a:	00 00                	add    BYTE PTR [eax],al
9f00388c:	f4                   	hlt    
9f00388d:	01 00                	add    DWORD PTR [eax],eax
9f00388f:	00 09                	add    BYTE PTR [ecx],cl
9f003891:	ce                   	into   
9f003892:	ff                   	(bad)  
9f003893:	ff 2a                	jmp    FWORD PTR [edx]
9f003895:	00 00                	add    BYTE PTR [eax],al
9f003897:	00 00                	add    BYTE PTR [eax],al
9f003899:	41                   	inc    ecx
9f00389a:	0e                   	push   cs
9f00389b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0038a1:	44                   	inc    esp
9f0038a2:	83 03 62             	add    DWORD PTR [ebx],0x62
9f0038a5:	c5 c3 0c             	(bad)  
9f0038a8:	04 04                	add    al,0x4
9f0038aa:	00 00                	add    BYTE PTR [eax],al
9f0038ac:	24 00                	and    al,0x0
9f0038ae:	00 00                	add    BYTE PTR [eax],al
9f0038b0:	18 02                	sbb    BYTE PTR [edx],al
9f0038b2:	00 00                	add    BYTE PTR [eax],al
9f0038b4:	0f ce                	bswap  esi
9f0038b6:	ff                   	(bad)  
9f0038b7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f0038bd:	41                   	inc    ecx
9f0038be:	0e                   	push   cs
9f0038bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0038c5:	42                   	inc    edx
9f0038c6:	86 03                	xchg   BYTE PTR [ebx],al
9f0038c8:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f0038cf:	c5 
9f0038d0:	0c 04                	or     al,0x4
9f0038d2:	04 00                	add    al,0x0
9f0038d4:	24 00                	and    al,0x0
9f0038d6:	00 00                	add    BYTE PTR [eax],al
9f0038d8:	40                   	inc    eax
9f0038d9:	02 00                	add    al,BYTE PTR [eax]
9f0038db:	00 1c ce             	add    BYTE PTR [esi+ecx*8],bl
9f0038de:	ff                   	(bad)  
9f0038df:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f0038e5:	41                   	inc    ecx
9f0038e6:	0e                   	push   cs
9f0038e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0038ed:	42                   	inc    edx
9f0038ee:	86 03                	xchg   BYTE PTR [ebx],al
9f0038f0:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f0038f7:	c5 
9f0038f8:	0c 04                	or     al,0x4
9f0038fa:	04 00                	add    al,0x0
9f0038fc:	20 00                	and    BYTE PTR [eax],al
9f0038fe:	00 00                	add    BYTE PTR [eax],al
9f003900:	68 02 00 00 29       	push   0x29000002
9f003905:	ce                   	into   
9f003906:	ff                   	(bad)  
9f003907:	ff 31                	push   DWORD PTR [ecx]
9f003909:	00 00                	add    BYTE PTR [eax],al
9f00390b:	00 00                	add    BYTE PTR [eax],al
9f00390d:	41                   	inc    ecx
9f00390e:	0e                   	push   cs
9f00390f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003915:	44                   	inc    esp
9f003916:	83 03 69             	add    DWORD PTR [ebx],0x69
9f003919:	c5 c3 0c             	(bad)  
9f00391c:	04 04                	add    al,0x4
9f00391e:	00 00                	add    BYTE PTR [eax],al
9f003920:	20 00                	and    BYTE PTR [eax],al
9f003922:	00 00                	add    BYTE PTR [eax],al
9f003924:	8c 02                	mov    WORD PTR [edx],es
9f003926:	00 00                	add    BYTE PTR [eax],al
9f003928:	38 ce                	cmp    dh,cl
9f00392a:	ff                   	(bad)  
9f00392b:	ff 26                	jmp    DWORD PTR [esi]
9f00392d:	00 00                	add    BYTE PTR [eax],al
9f00392f:	00 00                	add    BYTE PTR [eax],al
9f003931:	41                   	inc    ecx
9f003932:	0e                   	push   cs
9f003933:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003939:	41                   	inc    ecx
9f00393a:	83 03 60             	add    DWORD PTR [ebx],0x60
9f00393d:	c3                   	ret    
9f00393e:	41                   	inc    ecx
9f00393f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003942:	04 00                	add    al,0x0
9f003944:	20 00                	and    BYTE PTR [eax],al
9f003946:	00 00                	add    BYTE PTR [eax],al
9f003948:	b0 02                	mov    al,0x2
9f00394a:	00 00                	add    BYTE PTR [eax],al
9f00394c:	3a ce                	cmp    cl,dh
9f00394e:	ff                   	(bad)  
9f00394f:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f003952:	00 00                	add    BYTE PTR [eax],al
9f003954:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003957:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00395d:	44                   	inc    esp
9f00395e:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f003961:	c3                   	ret    
9f003962:	41                   	inc    ecx
9f003963:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003966:	04 00                	add    al,0x0
9f003968:	20 00                	and    BYTE PTR [eax],al
9f00396a:	00 00                	add    BYTE PTR [eax],al
9f00396c:	d4 02                	aam    0x2
9f00396e:	00 00                	add    BYTE PTR [eax],al
9f003970:	59                   	pop    ecx
9f003971:	ce                   	into   
9f003972:	ff                   	(bad)  
9f003973:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f003976:	00 00                	add    BYTE PTR [eax],al
9f003978:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00397b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003981:	44                   	inc    esp
9f003982:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f003985:	c3                   	ret    
9f003986:	41                   	inc    ecx
9f003987:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00398a:	04 00                	add    al,0x0
9f00398c:	20 00                	and    BYTE PTR [eax],al
9f00398e:	00 00                	add    BYTE PTR [eax],al
9f003990:	f8                   	clc    
9f003991:	02 00                	add    al,BYTE PTR [eax]
9f003993:	00 78 ce             	add    BYTE PTR [eax-0x32],bh
9f003996:	ff                   	(bad)  
9f003997:	ff                   	(bad)  
9f003998:	ba 00 00 00 00       	mov    edx,0x0
9f00399d:	41                   	inc    ecx
9f00399e:	0e                   	push   cs
9f00399f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0039a5:	44                   	inc    esp
9f0039a6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0039a9:	b2 c5                	mov    dl,0xc5
9f0039ab:	c3                   	ret    
9f0039ac:	0c 04                	or     al,0x4
9f0039ae:	04 00                	add    al,0x0
9f0039b0:	24 00                	and    al,0x0
9f0039b2:	00 00                	add    BYTE PTR [eax],al
9f0039b4:	1c 03                	sbb    al,0x3
9f0039b6:	00 00                	add    BYTE PTR [eax],al
9f0039b8:	10 cf                	adc    bh,cl
9f0039ba:	ff                   	(bad)  
9f0039bb:	ff                   	(bad)  
9f0039bc:	3a 00                	cmp    al,BYTE PTR [eax]
9f0039be:	00 00                	add    BYTE PTR [eax],al
9f0039c0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0039c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0039c9:	45                   	inc    ebp
9f0039ca:	86 03                	xchg   BYTE PTR [ebx],al
9f0039cc:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f0039d0:	41                   	inc    ecx
9f0039d1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0039d5:	04 04                	add    al,0x4
9f0039d7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0039da:	00 00                	add    BYTE PTR [eax],al
9f0039dc:	44                   	inc    esp
9f0039dd:	03 00                	add    eax,DWORD PTR [eax]
9f0039df:	00 22                	add    BYTE PTR [edx],ah
9f0039e1:	cf                   	iret   
9f0039e2:	ff                   	(bad)  
9f0039e3:	ff                   	(bad)  
9f0039e4:	3c 00                	cmp    al,0x0
9f0039e6:	00 00                	add    BYTE PTR [eax],al
9f0039e8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0039eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0039f1:	45                   	inc    ebp
9f0039f2:	86 03                	xchg   BYTE PTR [ebx],al
9f0039f4:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f0039f8:	41                   	inc    ecx
9f0039f9:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0039fd:	04 04                	add    al,0x4
9f0039ff:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f003a02:	00 00                	add    BYTE PTR [eax],al
9f003a04:	6c                   	ins    BYTE PTR es:[edi],dx
9f003a05:	03 00                	add    eax,DWORD PTR [eax]
9f003a07:	00 36                	add    BYTE PTR [esi],dh
9f003a09:	cf                   	iret   
9f003a0a:	ff                   	(bad)  
9f003a0b:	ff                   	(bad)  
9f003a0c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f003a0f:	00 00                	add    BYTE PTR [eax],al
9f003a11:	41                   	inc    ecx
9f003a12:	0e                   	push   cs
9f003a13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003a19:	45                   	inc    ebp
9f003a1a:	86 03                	xchg   BYTE PTR [ebx],al
9f003a1c:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f003a20:	41                   	inc    ecx
9f003a21:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003a25:	04 04                	add    al,0x4
9f003a27:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f003a2a:	00 00                	add    BYTE PTR [eax],al
9f003a2c:	94                   	xchg   esp,eax
9f003a2d:	03 00                	add    eax,DWORD PTR [eax]
9f003a2f:	00 4c cf ff          	add    BYTE PTR [edi+ecx*8-0x1],cl
9f003a33:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f003a36:	00 00                	add    BYTE PTR [eax],al
9f003a38:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003a3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003a41:	45                   	inc    ebp
9f003a42:	86 03                	xchg   BYTE PTR [ebx],al
9f003a44:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f003a4b:	c5 
9f003a4c:	0c 04                	or     al,0x4
9f003a4e:	04 00                	add    al,0x0
9f003a50:	24 00                	and    al,0x0
9f003a52:	00 00                	add    BYTE PTR [eax],al
9f003a54:	bc 03 00 00 64       	mov    esp,0x64000003
9f003a59:	cf                   	iret   
9f003a5a:	ff                   	(bad)  
9f003a5b:	ff 42 00             	inc    DWORD PTR [edx+0x0]
9f003a5e:	00 00                	add    BYTE PTR [eax],al
9f003a60:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003a63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003a69:	45                   	inc    ebp
9f003a6a:	86 03                	xchg   BYTE PTR [ebx],al
9f003a6c:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f003a70:	41                   	inc    ecx
9f003a71:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003a75:	04 04                	add    al,0x4
9f003a77:	00 20                	add    BYTE PTR [eax],ah
9f003a79:	00 00                	add    BYTE PTR [eax],al
9f003a7b:	00 e4                	add    ah,ah
9f003a7d:	03 00                	add    eax,DWORD PTR [eax]
9f003a7f:	00 7e cf             	add    BYTE PTR [esi-0x31],bh
9f003a82:	ff                   	(bad)  
9f003a83:	ff                   	(bad)  
9f003a84:	bf 00 00 00 00       	mov    edi,0x0
9f003a89:	41                   	inc    ecx
9f003a8a:	0e                   	push   cs
9f003a8b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003a91:	44                   	inc    esp
9f003a92:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003a95:	b7 c5                	mov    bh,0xc5
9f003a97:	c3                   	ret    
9f003a98:	0c 04                	or     al,0x4
9f003a9a:	04 00                	add    al,0x0
9f003a9c:	20 00                	and    BYTE PTR [eax],al
9f003a9e:	00 00                	add    BYTE PTR [eax],al
9f003aa0:	08 04 00             	or     BYTE PTR [eax+eax*1],al
9f003aa3:	00 19                	add    BYTE PTR [ecx],bl
9f003aa5:	d0 ff                	sar    bh,1
9f003aa7:	ff 1f                	call   FWORD PTR [edi]
9f003aa9:	00 00                	add    BYTE PTR [eax],al
9f003aab:	00 00                	add    BYTE PTR [eax],al
9f003aad:	41                   	inc    ecx
9f003aae:	0e                   	push   cs
9f003aaf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ab5:	44                   	inc    esp
9f003ab6:	83 03 56             	add    DWORD PTR [ebx],0x56
9f003ab9:	c3                   	ret    
9f003aba:	41                   	inc    ecx
9f003abb:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003abe:	04 00                	add    al,0x0
9f003ac0:	20 00                	and    BYTE PTR [eax],al
9f003ac2:	00 00                	add    BYTE PTR [eax],al
9f003ac4:	2c 04                	sub    al,0x4
9f003ac6:	00 00                	add    BYTE PTR [eax],al
9f003ac8:	14 d0                	adc    al,0xd0
9f003aca:	ff                   	(bad)  
9f003acb:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f003ace:	00 00                	add    BYTE PTR [eax],al
9f003ad0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003ad3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ad9:	44                   	inc    esp
9f003ada:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003add:	51                   	push   ecx
9f003ade:	c5 c3 0c             	(bad)  
9f003ae1:	04 04                	add    al,0x4
9f003ae3:	00 20                	add    BYTE PTR [eax],ah
9f003ae5:	00 00                	add    BYTE PTR [eax],al
9f003ae7:	00 50 04             	add    BYTE PTR [eax+0x4],dl
9f003aea:	00 00                	add    BYTE PTR [eax],al
9f003aec:	49                   	dec    ecx
9f003aed:	d0 ff                	sar    bh,1
9f003aef:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f003af2:	00 00                	add    BYTE PTR [eax],al
9f003af4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003af7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003afd:	44                   	inc    esp
9f003afe:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003b01:	51                   	push   ecx
9f003b02:	c5 c3 0c             	(bad)  
9f003b05:	04 04                	add    al,0x4
9f003b07:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003b0a:	00 00                	add    BYTE PTR [eax],al
9f003b0c:	74 04                	je     9f003b12 <__x86.get_pc_thunk.cx+0x47e>
9f003b0e:	00 00                	add    BYTE PTR [eax],al
9f003b10:	7e d0                	jle    9f003ae2 <__x86.get_pc_thunk.cx+0x44e>
9f003b12:	ff                   	(bad)  
9f003b13:	ff 34 00             	push   DWORD PTR [eax+eax*1]
9f003b16:	00 00                	add    BYTE PTR [eax],al
9f003b18:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003b1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003b21:	70 c5                	jo     9f003ae8 <__x86.get_pc_thunk.cx+0x454>
9f003b23:	0c 04                	or     al,0x4
9f003b25:	04 00                	add    al,0x0
9f003b27:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003b2a:	00 00                	add    BYTE PTR [eax],al
9f003b2c:	94                   	xchg   esp,eax
9f003b2d:	04 00                	add    al,0x0
9f003b2f:	00 92 d0 ff ff 37    	add    BYTE PTR [edx+0x37ffffd0],dl
9f003b35:	00 00                	add    BYTE PTR [eax],al
9f003b37:	00 00                	add    BYTE PTR [eax],al
9f003b39:	41                   	inc    ecx
9f003b3a:	0e                   	push   cs
9f003b3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003b41:	73 c5                	jae    9f003b08 <__x86.get_pc_thunk.cx+0x474>
9f003b43:	0c 04                	or     al,0x4
9f003b45:	04 00                	add    al,0x0
9f003b47:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f003b4a:	00 00                	add    BYTE PTR [eax],al
9f003b4c:	b4 04                	mov    ah,0x4
9f003b4e:	00 00                	add    BYTE PTR [eax],al
9f003b50:	a9 d0 ff ff 72       	test   eax,0x72ffffd0
9f003b55:	00 00                	add    BYTE PTR [eax],al
9f003b57:	00 00                	add    BYTE PTR [eax],al
9f003b59:	41                   	inc    ecx
9f003b5a:	0e                   	push   cs
9f003b5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003b61:	45                   	inc    ebp
9f003b62:	86 03                	xchg   BYTE PTR [ebx],al
9f003b64:	83 04 02 67          	add    DWORD PTR [edx+eax*1],0x67
9f003b68:	c3                   	ret    
9f003b69:	41                   	inc    ecx
9f003b6a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003b6e:	04 04                	add    al,0x4
9f003b70:	1c 00                	sbb    al,0x0
9f003b72:	00 00                	add    BYTE PTR [eax],al
9f003b74:	dc 04 00             	fadd   QWORD PTR [eax+eax*1]
9f003b77:	00 f3                	add    bl,dh
9f003b79:	d0 ff                	sar    bh,1
9f003b7b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f003b81:	41                   	inc    ecx
9f003b82:	0e                   	push   cs
9f003b83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003b89:	59                   	pop    ecx
9f003b8a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003b8d:	04 00                	add    al,0x0
9f003b8f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003b92:	00 00                	add    BYTE PTR [eax],al
9f003b94:	fc                   	cld    
9f003b95:	04 00                	add    al,0x0
9f003b97:	00 f0                	add    al,dh
9f003b99:	d0 ff                	sar    bh,1
9f003b9b:	ff 29                	jmp    FWORD PTR [ecx]
9f003b9d:	00 00                	add    BYTE PTR [eax],al
9f003b9f:	00 00                	add    BYTE PTR [eax],al
9f003ba1:	41                   	inc    ecx
9f003ba2:	0e                   	push   cs
9f003ba3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ba9:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f003bad:	04 00                	add    al,0x0
9f003baf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003bb2:	00 00                	add    BYTE PTR [eax],al
9f003bb4:	1c 05                	sbb    al,0x5
9f003bb6:	00 00                	add    BYTE PTR [eax],al
9f003bb8:	f9                   	stc    
9f003bb9:	d0 ff                	sar    bh,1
9f003bbb:	ff 29                	jmp    FWORD PTR [ecx]
9f003bbd:	00 00                	add    BYTE PTR [eax],al
9f003bbf:	00 00                	add    BYTE PTR [eax],al
9f003bc1:	41                   	inc    ecx
9f003bc2:	0e                   	push   cs
9f003bc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003bc9:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f003bcd:	04 00                	add    al,0x0
9f003bcf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003bd2:	00 00                	add    BYTE PTR [eax],al
9f003bd4:	3c 05                	cmp    al,0x5
9f003bd6:	00 00                	add    BYTE PTR [eax],al
9f003bd8:	02 d1                	add    dl,cl
9f003bda:	ff                   	(bad)  
9f003bdb:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
9f003bdf:	00 00                	add    BYTE PTR [eax],al
9f003be1:	41                   	inc    ecx
9f003be2:	0e                   	push   cs
9f003be3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003be9:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f003bec:	0c 04                	or     al,0x4
9f003bee:	04 00                	add    al,0x0
9f003bf0:	20 00                	and    BYTE PTR [eax],al
9f003bf2:	00 00                	add    BYTE PTR [eax],al
9f003bf4:	5c                   	pop    esp
9f003bf5:	05 00 00 2e d1       	add    eax,0xd12e0000
9f003bfa:	ff                   	(bad)  
9f003bfb:	ff f4                	push   esp
9f003bfd:	01 00                	add    DWORD PTR [eax],eax
9f003bff:	00 00                	add    BYTE PTR [eax],al
9f003c01:	41                   	inc    ecx
9f003c02:	0e                   	push   cs
9f003c03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003c09:	44                   	inc    esp
9f003c0a:	83 03 03             	add    DWORD PTR [ebx],0x3
9f003c0d:	ec                   	in     al,dx
9f003c0e:	01 c5                	add    ebp,eax
9f003c10:	c3                   	ret    
9f003c11:	0c 04                	or     al,0x4
9f003c13:	04 1c                	add    al,0x1c
9f003c15:	00 00                	add    BYTE PTR [eax],al
9f003c17:	00 80 05 00 00 fe    	add    BYTE PTR [eax-0x1fffffb],al
9f003c1d:	d2 ff                	sar    bh,cl
9f003c1f:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
9f003c22:	00 00                	add    BYTE PTR [eax],al
9f003c24:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003c27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003c2d:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f003c30:	0c 04                	or     al,0x4
9f003c32:	04 00                	add    al,0x0
9f003c34:	1c 00                	sbb    al,0x0
9f003c36:	00 00                	add    BYTE PTR [eax],al
9f003c38:	a0 05 00 00 2d       	mov    al,ds:0x2d000005
9f003c3d:	d3 ff                	sar    edi,cl
9f003c3f:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
9f003c42:	00 00                	add    BYTE PTR [eax],al
9f003c44:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003c47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003c4d:	58                   	pop    eax
9f003c4e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003c51:	04 00                	add    al,0x0
9f003c53:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003c56:	00 00                	add    BYTE PTR [eax],al
9f003c58:	c0 05 00 00 29 d3 ff 	rol    BYTE PTR ds:0xd3290000,0xff
9f003c5f:	ff 20                	jmp    DWORD PTR [eax]
9f003c61:	00 00                	add    BYTE PTR [eax],al
9f003c63:	00 00                	add    BYTE PTR [eax],al
9f003c65:	41                   	inc    ecx
9f003c66:	0e                   	push   cs
9f003c67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003c6d:	5c                   	pop    esp
9f003c6e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003c71:	04 00                	add    al,0x0
9f003c73:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003c76:	00 00                	add    BYTE PTR [eax],al
9f003c78:	e0 05                	loopne 9f003c7f <__x86.get_pc_thunk.cx+0x5eb>
9f003c7a:	00 00                	add    BYTE PTR [eax],al
9f003c7c:	29 d3                	sub    ebx,edx
9f003c7e:	ff                   	(bad)  
9f003c7f:	ff 20                	jmp    DWORD PTR [eax]
9f003c81:	00 00                	add    BYTE PTR [eax],al
9f003c83:	00 00                	add    BYTE PTR [eax],al
9f003c85:	41                   	inc    ecx
9f003c86:	0e                   	push   cs
9f003c87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003c8d:	5c                   	pop    esp
9f003c8e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003c91:	04 00                	add    al,0x0
9f003c93:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003c96:	00 00                	add    BYTE PTR [eax],al
9f003c98:	00 06                	add    BYTE PTR [esi],al
9f003c9a:	00 00                	add    BYTE PTR [eax],al
9f003c9c:	29 d3                	sub    ebx,edx
9f003c9e:	ff                   	(bad)  
9f003c9f:	ff 44 01 00          	inc    DWORD PTR [ecx+eax*1+0x0]
9f003ca3:	00 00                	add    BYTE PTR [eax],al
9f003ca5:	41                   	inc    ecx
9f003ca6:	0e                   	push   cs
9f003ca7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003cad:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f003cb0:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003cb3:	04 1c                	add    al,0x1c
9f003cb5:	00 00                	add    BYTE PTR [eax],al
9f003cb7:	00 20                	add    BYTE PTR [eax],ah
9f003cb9:	06                   	push   es
9f003cba:	00 00                	add    BYTE PTR [eax],al
9f003cbc:	4d                   	dec    ebp
9f003cbd:	d4 ff                	aam    0xff
9f003cbf:	ff 20                	jmp    DWORD PTR [eax]
9f003cc1:	00 00                	add    BYTE PTR [eax],al
9f003cc3:	00 00                	add    BYTE PTR [eax],al
9f003cc5:	41                   	inc    ecx
9f003cc6:	0e                   	push   cs
9f003cc7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ccd:	5c                   	pop    esp
9f003cce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003cd1:	04 00                	add    al,0x0
9f003cd3:	00 20                	add    BYTE PTR [eax],ah
9f003cd5:	00 00                	add    BYTE PTR [eax],al
9f003cd7:	00 40 06             	add    BYTE PTR [eax+0x6],al
9f003cda:	00 00                	add    BYTE PTR [eax],al
9f003cdc:	4d                   	dec    ebp
9f003cdd:	d4 ff                	aam    0xff
9f003cdf:	ff b6 01 00 00 00    	push   DWORD PTR [esi+0x1]
9f003ce5:	41                   	inc    ecx
9f003ce6:	0e                   	push   cs
9f003ce7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ced:	47                   	inc    edi
9f003cee:	83 03 03             	add    DWORD PTR [ebx],0x3
9f003cf1:	ab                   	stos   DWORD PTR es:[edi],eax
9f003cf2:	01 c5                	add    ebp,eax
9f003cf4:	c3                   	ret    
9f003cf5:	0c 04                	or     al,0x4
9f003cf7:	04 1c                	add    al,0x1c
9f003cf9:	00 00                	add    BYTE PTR [eax],al
9f003cfb:	00 64 06 00          	add    BYTE PTR [esi+eax*1+0x0],ah
9f003cff:	00 df                	add    bh,bl
9f003d01:	d5 ff                	aad    0xff
9f003d03:	ff 23                	jmp    DWORD PTR [ebx]
9f003d05:	00 00                	add    BYTE PTR [eax],al
9f003d07:	00 00                	add    BYTE PTR [eax],al
9f003d09:	41                   	inc    ecx
9f003d0a:	0e                   	push   cs
9f003d0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003d11:	5f                   	pop    edi
9f003d12:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003d15:	04 00                	add    al,0x0
9f003d17:	00 20                	add    BYTE PTR [eax],ah
9f003d19:	00 00                	add    BYTE PTR [eax],al
9f003d1b:	00 84 06 00 00 e4 d5 	add    BYTE PTR [esi+eax*1-0x2a1c0000],al
9f003d22:	ff                   	(bad)  
9f003d23:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f003d27:	00 00                	add    BYTE PTR [eax],al
9f003d29:	41                   	inc    ecx
9f003d2a:	0e                   	push   cs
9f003d2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003d31:	44                   	inc    esp
9f003d32:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003d35:	64                   	fs
9f003d36:	c5 c3 0c             	(bad)  
9f003d39:	04 04                	add    al,0x4
9f003d3b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003d3e:	00 00                	add    BYTE PTR [eax],al
9f003d40:	a8 06                	test   al,0x6
9f003d42:	00 00                	add    BYTE PTR [eax],al
9f003d44:	2c d6                	sub    al,0xd6
9f003d46:	ff                   	(bad)  
9f003d47:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f003d4d:	41                   	inc    ecx
9f003d4e:	0e                   	push   cs
9f003d4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003d55:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f003d5b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003d5e:	00 00                	add    BYTE PTR [eax],al
9f003d60:	c8 06 00 00          	enter  0x6,0x0
9f003d64:	93                   	xchg   ebx,eax
9f003d65:	d6                   	(bad)  
9f003d66:	ff                   	(bad)  
9f003d67:	ff                   	(bad)  
9f003d68:	39 00                	cmp    DWORD PTR [eax],eax
9f003d6a:	00 00                	add    BYTE PTR [eax],al
9f003d6c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003d6f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003d75:	75 c5                	jne    9f003d3c <__x86.get_pc_thunk.cx+0x6a8>
9f003d77:	0c 04                	or     al,0x4
9f003d79:	04 00                	add    al,0x0
9f003d7b:	00 20                	add    BYTE PTR [eax],ah
9f003d7d:	00 00                	add    BYTE PTR [eax],al
9f003d7f:	00 e8                	add    al,ch
9f003d81:	06                   	push   es
9f003d82:	00 00                	add    BYTE PTR [eax],al
9f003d84:	ac                   	lods   al,BYTE PTR ds:[esi]
9f003d85:	d6                   	(bad)  
9f003d86:	ff                   	(bad)  
9f003d87:	ff d4                	call   esp
9f003d89:	01 00                	add    DWORD PTR [eax],eax
9f003d8b:	00 00                	add    BYTE PTR [eax],al
9f003d8d:	41                   	inc    ecx
9f003d8e:	0e                   	push   cs
9f003d8f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003d95:	44                   	inc    esp
9f003d96:	83 03 03             	add    DWORD PTR [ebx],0x3
9f003d99:	cc                   	int3   
9f003d9a:	01 c5                	add    ebp,eax
9f003d9c:	c3                   	ret    
9f003d9d:	0c 04                	or     al,0x4
9f003d9f:	04 1c                	add    al,0x1c
9f003da1:	00 00                	add    BYTE PTR [eax],al
9f003da3:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
9f003da6:	00 00                	add    BYTE PTR [eax],al
9f003da8:	5c                   	pop    esp
9f003da9:	d8 ff                	fdivr  st,st(7)
9f003dab:	ff 20                	jmp    DWORD PTR [eax]
9f003dad:	00 00                	add    BYTE PTR [eax],al
9f003daf:	00 00                	add    BYTE PTR [eax],al
9f003db1:	41                   	inc    ecx
9f003db2:	0e                   	push   cs
9f003db3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003db9:	5c                   	pop    esp
9f003dba:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003dbd:	04 00                	add    al,0x0
9f003dbf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003dc2:	00 00                	add    BYTE PTR [eax],al
9f003dc4:	2c 07                	sub    al,0x7
9f003dc6:	00 00                	add    BYTE PTR [eax],al
9f003dc8:	5c                   	pop    esp
9f003dc9:	d8 ff                	fdivr  st,st(7)
9f003dcb:	ff 1b                	call   FWORD PTR [ebx]
9f003dcd:	00 00                	add    BYTE PTR [eax],al
9f003dcf:	00 00                	add    BYTE PTR [eax],al
9f003dd1:	41                   	inc    ecx
9f003dd2:	0e                   	push   cs
9f003dd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003dd9:	57                   	push   edi
9f003dda:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003ddd:	04 00                	add    al,0x0
9f003ddf:	00 20                	add    BYTE PTR [eax],ah
9f003de1:	00 00                	add    BYTE PTR [eax],al
9f003de3:	00 4c 07 00          	add    BYTE PTR [edi+eax*1+0x0],cl
9f003de7:	00 57 d8             	add    BYTE PTR [edi-0x28],dl
9f003dea:	ff                   	(bad)  
9f003deb:	ff 32                	push   DWORD PTR [edx]
9f003ded:	00 00                	add    BYTE PTR [eax],al
9f003def:	00 00                	add    BYTE PTR [eax],al
9f003df1:	41                   	inc    ecx
9f003df2:	0e                   	push   cs
9f003df3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003df9:	44                   	inc    esp
9f003dfa:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f003dfd:	c5 c3 0c             	(bad)  
9f003e00:	04 04                	add    al,0x4
9f003e02:	00 00                	add    BYTE PTR [eax],al
9f003e04:	1c 00                	sbb    al,0x0
9f003e06:	00 00                	add    BYTE PTR [eax],al
9f003e08:	70 07                	jo     9f003e11 <__x86.get_pc_thunk.cx+0x77d>
9f003e0a:	00 00                	add    BYTE PTR [eax],al
9f003e0c:	68 d8 ff ff 9b       	push   0x9bffffd8
9f003e11:	01 00                	add    DWORD PTR [eax],eax
9f003e13:	00 00                	add    BYTE PTR [eax],al
9f003e15:	41                   	inc    ecx
9f003e16:	0e                   	push   cs
9f003e17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e1d:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f003e23:	04 1c                	add    al,0x1c
9f003e25:	00 00                	add    BYTE PTR [eax],al
9f003e27:	00 90 07 00 00 e4    	add    BYTE PTR [eax-0x1bfffff9],dl
9f003e2d:	d9 ff                	fcos   
9f003e2f:	ff c7                	inc    edi
9f003e31:	00 00                	add    BYTE PTR [eax],al
9f003e33:	00 00                	add    BYTE PTR [eax],al
9f003e35:	41                   	inc    ecx
9f003e36:	0e                   	push   cs
9f003e37:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e3d:	02 c3                	add    al,bl
9f003e3f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003e42:	04 00                	add    al,0x0
9f003e44:	1c 00                	sbb    al,0x0
9f003e46:	00 00                	add    BYTE PTR [eax],al
9f003e48:	b0 07                	mov    al,0x7
9f003e4a:	00 00                	add    BYTE PTR [eax],al
9f003e4c:	8b da                	mov    ebx,edx
9f003e4e:	ff                   	(bad)  
9f003e4f:	ff 20                	jmp    DWORD PTR [eax]
9f003e51:	00 00                	add    BYTE PTR [eax],al
9f003e53:	00 00                	add    BYTE PTR [eax],al
9f003e55:	41                   	inc    ecx
9f003e56:	0e                   	push   cs
9f003e57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e5d:	5c                   	pop    esp
9f003e5e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003e61:	04 00                	add    al,0x0
9f003e63:	00 20                	add    BYTE PTR [eax],ah
9f003e65:	00 00                	add    BYTE PTR [eax],al
9f003e67:	00 d0                	add    al,dl
9f003e69:	07                   	pop    es
9f003e6a:	00 00                	add    BYTE PTR [eax],al
9f003e6c:	8c da                	mov    edx,ds
9f003e6e:	ff                   	(bad)  
9f003e6f:	ff 29                	jmp    FWORD PTR [ecx]
9f003e71:	00 00                	add    BYTE PTR [eax],al
9f003e73:	00 00                	add    BYTE PTR [eax],al
9f003e75:	41                   	inc    ecx
9f003e76:	0e                   	push   cs
9f003e77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e7d:	44                   	inc    esp
9f003e7e:	83 03 61             	add    DWORD PTR [ebx],0x61
9f003e81:	c5 c3 0c             	(bad)  
9f003e84:	04 04                	add    al,0x4
9f003e86:	00 00                	add    BYTE PTR [eax],al
9f003e88:	20 00                	and    BYTE PTR [eax],al
9f003e8a:	00 00                	add    BYTE PTR [eax],al
9f003e8c:	f4                   	hlt    
9f003e8d:	07                   	pop    es
9f003e8e:	00 00                	add    BYTE PTR [eax],al
9f003e90:	94                   	xchg   esp,eax
9f003e91:	da ff                	(bad)  
9f003e93:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f003e96:	00 00                	add    BYTE PTR [eax],al
9f003e98:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003e9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ea1:	44                   	inc    esp
9f003ea2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003ea5:	56                   	push   esi
9f003ea6:	c3                   	ret    
9f003ea7:	41                   	inc    ecx
9f003ea8:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003eab:	04 28                	add    al,0x28
9f003ead:	00 00                	add    BYTE PTR [eax],al
9f003eaf:	00 18                	add    BYTE PTR [eax],bl
9f003eb1:	08 00                	or     BYTE PTR [eax],al
9f003eb3:	00 cf                	add    bh,cl
9f003eb5:	da ff                	(bad)  
9f003eb7:	ff                   	(bad)  
9f003eb8:	3e 02 00             	add    al,BYTE PTR ds:[eax]
9f003ebb:	00 00                	add    BYTE PTR [eax],al
9f003ebd:	41                   	inc    ecx
9f003ebe:	0e                   	push   cs
9f003ebf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ec5:	45                   	inc    ebp
9f003ec6:	86 03                	xchg   BYTE PTR [ebx],al
9f003ec8:	83 04 03 33          	add    DWORD PTR [ebx+eax*1],0x33
9f003ecc:	02 c3                	add    al,bl
9f003ece:	41                   	inc    ecx
9f003ecf:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003ed3:	04 04                	add    al,0x4
9f003ed5:	00 00                	add    BYTE PTR [eax],al
9f003ed7:	00 20                	add    BYTE PTR [eax],ah
9f003ed9:	00 00                	add    BYTE PTR [eax],al
9f003edb:	00 44 08 00          	add    BYTE PTR [eax+ecx*1+0x0],al
9f003edf:	00 e1                	add    cl,ah
9f003ee1:	dc ff                	fdiv   st(7),st
9f003ee3:	ff 48 04             	dec    DWORD PTR [eax+0x4]
9f003ee6:	00 00                	add    BYTE PTR [eax],al
9f003ee8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003eeb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ef1:	44                   	inc    esp
9f003ef2:	83 03 03             	add    DWORD PTR [ebx],0x3
9f003ef5:	40                   	inc    eax
9f003ef6:	04 c5                	add    al,0xc5
9f003ef8:	c3                   	ret    
9f003ef9:	0c 04                	or     al,0x4
9f003efb:	04 1c                	add    al,0x1c
9f003efd:	00 00                	add    BYTE PTR [eax],al
9f003eff:	00 68 08             	add    BYTE PTR [eax+0x8],ch
9f003f02:	00 00                	add    BYTE PTR [eax],al
9f003f04:	05 e1 ff ff 33       	add    eax,0x33ffffe1
9f003f09:	00 00                	add    BYTE PTR [eax],al
9f003f0b:	00 00                	add    BYTE PTR [eax],al
9f003f0d:	41                   	inc    ecx
9f003f0e:	0e                   	push   cs
9f003f0f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f15:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f003f16:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003f19:	04 00                	add    al,0x0
9f003f1b:	00 20                	add    BYTE PTR [eax],ah
9f003f1d:	00 00                	add    BYTE PTR [eax],al
9f003f1f:	00 88 08 00 00 18    	add    BYTE PTR [eax+0x18000008],cl
9f003f25:	e1 ff                	loope  9f003f26 <__x86.get_pc_thunk.cx+0x892>
9f003f27:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f003f2e:	0e                   	push   cs
9f003f2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f35:	44                   	inc    esp
9f003f36:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003f39:	7c c5                	jl     9f003f00 <__x86.get_pc_thunk.cx+0x86c>
9f003f3b:	c3                   	ret    
9f003f3c:	0c 04                	or     al,0x4
9f003f3e:	04 00                	add    al,0x0
9f003f40:	20 00                	and    BYTE PTR [eax],al
9f003f42:	00 00                	add    BYTE PTR [eax],al
9f003f44:	ac                   	lods   al,BYTE PTR ds:[esi]
9f003f45:	08 00                	or     BYTE PTR [eax],al
9f003f47:	00 78 e1             	add    BYTE PTR [eax-0x1f],bh
9f003f4a:	ff                   	(bad)  
9f003f4b:	ff                   	(bad)  
9f003f4c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f003f4f:	00 00                	add    BYTE PTR [eax],al
9f003f51:	41                   	inc    ecx
9f003f52:	0e                   	push   cs
9f003f53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f59:	44                   	inc    esp
9f003f5a:	83 03 76             	add    DWORD PTR [ebx],0x76
9f003f5d:	c5 c3 0c             	(bad)  
9f003f60:	04 04                	add    al,0x4
9f003f62:	00 00                	add    BYTE PTR [eax],al
9f003f64:	20 00                	and    BYTE PTR [eax],al
9f003f66:	00 00                	add    BYTE PTR [eax],al
9f003f68:	d0 08                	ror    BYTE PTR [eax],1
9f003f6a:	00 00                	add    BYTE PTR [eax],al
9f003f6c:	92                   	xchg   edx,eax
9f003f6d:	e1 ff                	loope  9f003f6e <__x86.get_pc_thunk.cx+0x8da>
9f003f6f:	ff                   	(bad)  
9f003f70:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f003f73:	00 00                	add    BYTE PTR [eax],al
9f003f75:	41                   	inc    ecx
9f003f76:	0e                   	push   cs
9f003f77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f7d:	44                   	inc    esp
9f003f7e:	83 03 76             	add    DWORD PTR [ebx],0x76
9f003f81:	c5 c3 0c             	(bad)  
9f003f84:	04 04                	add    al,0x4
9f003f86:	00 00                	add    BYTE PTR [eax],al
9f003f88:	1c 00                	sbb    al,0x0
9f003f8a:	00 00                	add    BYTE PTR [eax],al
9f003f8c:	f4                   	hlt    
9f003f8d:	08 00                	or     BYTE PTR [eax],al
9f003f8f:	00 ac e1 ff ff 6f 00 	add    BYTE PTR [ecx+eiz*8+0x6fffff],ch
9f003f96:	00 00                	add    BYTE PTR [eax],al
9f003f98:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003f9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fa1:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
9f003fa4:	0c 04                	or     al,0x4
9f003fa6:	04 00                	add    al,0x0
9f003fa8:	24 00                	and    al,0x0
9f003faa:	00 00                	add    BYTE PTR [eax],al
9f003fac:	14 09                	adc    al,0x9
9f003fae:	00 00                	add    BYTE PTR [eax],al
9f003fb0:	fc                   	cld    
9f003fb1:	e1 ff                	loope  9f003fb2 <__x86.get_pc_thunk.cx+0x91e>
9f003fb3:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f003fb6:	00 00                	add    BYTE PTR [eax],al
9f003fb8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003fbb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fc1:	45                   	inc    ebp
9f003fc2:	86 03                	xchg   BYTE PTR [ebx],al
9f003fc4:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f003fc8:	c3                   	ret    
9f003fc9:	41                   	inc    ecx
9f003fca:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003fce:	04 04                	add    al,0x4
9f003fd0:	1c 00                	sbb    al,0x0
9f003fd2:	00 00                	add    BYTE PTR [eax],al
9f003fd4:	3c 09                	cmp    al,0x9
9f003fd6:	00 00                	add    BYTE PTR [eax],al
9f003fd8:	34 e2                	xor    al,0xe2
9f003fda:	ff                   	(bad)  
9f003fdb:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f003fde:	00 00                	add    BYTE PTR [eax],al
9f003fe0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003fe3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fe9:	7c c5                	jl     9f003fb0 <__x86.get_pc_thunk.cx+0x91c>
9f003feb:	0c 04                	or     al,0x4
9f003fed:	04 00                	add    al,0x0
9f003fef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003ff2:	00 00                	add    BYTE PTR [eax],al
9f003ff4:	5c                   	pop    esp
9f003ff5:	09 00                	or     DWORD PTR [eax],eax
9f003ff7:	00 54 e2 ff          	add    BYTE PTR [edx+eiz*8-0x1],dl
9f003ffb:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f003ffe:	00 00                	add    BYTE PTR [eax],al
9f004000:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004003:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004009:	7c c5                	jl     9f003fd0 <__x86.get_pc_thunk.cx+0x93c>
9f00400b:	0c 04                	or     al,0x4
9f00400d:	04 00                	add    al,0x0
9f00400f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004012:	00 00                	add    BYTE PTR [eax],al
9f004014:	7c 09                	jl     9f00401f <__x86.get_pc_thunk.cx+0x98b>
9f004016:	00 00                	add    BYTE PTR [eax],al
9f004018:	74 e2                	je     9f003ffc <__x86.get_pc_thunk.cx+0x968>
9f00401a:	ff                   	(bad)  
9f00401b:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f00401e:	00 00                	add    BYTE PTR [eax],al
9f004020:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004023:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004029:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f00402c:	0c 04                	or     al,0x4
9f00402e:	04 00                	add    al,0x0
9f004030:	1c 00                	sbb    al,0x0
9f004032:	00 00                	add    BYTE PTR [eax],al
9f004034:	9c                   	pushf  
9f004035:	09 00                	or     DWORD PTR [eax],eax
9f004037:	00 9c e2 ff ff 30 00 	add    BYTE PTR [edx+eiz*8+0x30ffff],bl
9f00403e:	00 00                	add    BYTE PTR [eax],al
9f004040:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004043:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004049:	6c                   	ins    BYTE PTR es:[edi],dx
9f00404a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00404d:	04 00                	add    al,0x0
9f00404f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004052:	00 00                	add    BYTE PTR [eax],al
9f004054:	bc 09 00 00 ac       	mov    esp,0xac000009
9f004059:	e2 ff                	loop   9f00405a <__x86.get_pc_thunk.cx+0x9c6>
9f00405b:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f00405e:	00 00                	add    BYTE PTR [eax],al
9f004060:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004063:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004069:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f00406c:	0c 04                	or     al,0x4
9f00406e:	04 00                	add    al,0x0
9f004070:	1c 00                	sbb    al,0x0
9f004072:	00 00                	add    BYTE PTR [eax],al
9f004074:	dc 09                	fmul   QWORD PTR [ecx]
9f004076:	00 00                	add    BYTE PTR [eax],al
9f004078:	e8 e2 ff ff 31       	call   d100405f <ticksToWait+0x31ffebe7>
9f00407d:	00 00                	add    BYTE PTR [eax],al
9f00407f:	00 00                	add    BYTE PTR [eax],al
9f004081:	41                   	inc    ecx
9f004082:	0e                   	push   cs
9f004083:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004089:	6d                   	ins    DWORD PTR es:[edi],dx
9f00408a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00408d:	04 00                	add    al,0x0
9f00408f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004092:	00 00                	add    BYTE PTR [eax],al
9f004094:	fc                   	cld    
9f004095:	09 00                	or     DWORD PTR [eax],eax
9f004097:	00 f9                	add    cl,bh
9f004099:	e2 ff                	loop   9f00409a <__x86.get_pc_thunk.cx+0xa06>
9f00409b:	ff 31                	push   DWORD PTR [ecx]
9f00409d:	00 00                	add    BYTE PTR [eax],al
9f00409f:	00 00                	add    BYTE PTR [eax],al
9f0040a1:	41                   	inc    ecx
9f0040a2:	0e                   	push   cs
9f0040a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040a9:	6d                   	ins    DWORD PTR es:[edi],dx
9f0040aa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0040ad:	04 00                	add    al,0x0
9f0040af:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0040b2:	00 00                	add    BYTE PTR [eax],al
9f0040b4:	1c 0a                	sbb    al,0xa
9f0040b6:	00 00                	add    BYTE PTR [eax],al
9f0040b8:	0c e3                	or     al,0xe3
9f0040ba:	ff                   	(bad)  
9f0040bb:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f0040be:	00 00                	add    BYTE PTR [eax],al
9f0040c0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0040c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040c9:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f0040cc:	0c 04                	or     al,0x4
9f0040ce:	04 00                	add    al,0x0
9f0040d0:	1c 00                	sbb    al,0x0
9f0040d2:	00 00                	add    BYTE PTR [eax],al
9f0040d4:	3c 0a                	cmp    al,0xa
9f0040d6:	00 00                	add    BYTE PTR [eax],al
9f0040d8:	53                   	push   ebx
9f0040d9:	e3 ff                	jecxz  9f0040da <__x86.get_pc_thunk.cx+0xa46>
9f0040db:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f0040de:	00 00                	add    BYTE PTR [eax],al
9f0040e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0040e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040e9:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f0040ec:	0c 04                	or     al,0x4
9f0040ee:	04 00                	add    al,0x0
9f0040f0:	1c 00                	sbb    al,0x0
9f0040f2:	00 00                	add    BYTE PTR [eax],al
9f0040f4:	5c                   	pop    esp
9f0040f5:	0a 00                	or     al,BYTE PTR [eax]
9f0040f7:	00 9c e3 ff ff 60 00 	add    BYTE PTR [ebx+eiz*8+0x60ffff],bl
9f0040fe:	00 00                	add    BYTE PTR [eax],al
9f004100:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004103:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004109:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
9f00410d:	04 04                	add    al,0x4
9f00410f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004112:	00 00                	add    BYTE PTR [eax],al
9f004114:	7c 0a                	jl     9f004120 <__x86.get_pc_thunk.cx+0xa8c>
9f004116:	00 00                	add    BYTE PTR [eax],al
9f004118:	dc e3                	fsubr  st(3),st
9f00411a:	ff                   	(bad)  
9f00411b:	ff 20                	jmp    DWORD PTR [eax]
9f00411d:	00 00                	add    BYTE PTR [eax],al
9f00411f:	00 00                	add    BYTE PTR [eax],al
9f004121:	41                   	inc    ecx
9f004122:	0e                   	push   cs
9f004123:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004129:	5c                   	pop    esp
9f00412a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00412d:	04 00                	add    al,0x0
9f00412f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004132:	00 00                	add    BYTE PTR [eax],al
9f004134:	9c                   	pushf  
9f004135:	0a 00                	or     al,BYTE PTR [eax]
9f004137:	00 dc                	add    ah,bl
9f004139:	e3 ff                	jecxz  9f00413a <__x86.get_pc_thunk.cx+0xaa6>
9f00413b:	ff                   	(bad)  
9f00413c:	7d 01                	jge    9f00413f <__x86.get_pc_thunk.cx+0xaab>
9f00413e:	00 00                	add    BYTE PTR [eax],al
9f004140:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004143:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004149:	46                   	inc    esi
9f00414a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00414c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00414f:	05 03 70 01 c3       	add    eax,0xc3017003
9f004154:	41                   	inc    ecx
9f004155:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004159:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00415c:	04 00                	add    al,0x0
9f00415e:	00 00                	add    BYTE PTR [eax],al
9f004160:	1c 00                	sbb    al,0x0
9f004162:	00 00                	add    BYTE PTR [eax],al
9f004164:	cc                   	int3   
9f004165:	0a 00                	or     al,BYTE PTR [eax]
9f004167:	00 2c e5 ff ff 1d 00 	add    BYTE PTR [eiz*8+0x1dffff],ch
9f00416e:	00 00                	add    BYTE PTR [eax],al
9f004170:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004173:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004179:	59                   	pop    ecx
9f00417a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00417d:	04 00                	add    al,0x0
9f00417f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004182:	00 00                	add    BYTE PTR [eax],al
9f004184:	ec                   	in     al,dx
9f004185:	0a 00                	or     al,BYTE PTR [eax]
9f004187:	00 2c e5 ff ff 9c 01 	add    BYTE PTR [eiz*8+0x19cffff],ch
9f00418e:	00 00                	add    BYTE PTR [eax],al
9f004190:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004193:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004199:	46                   	inc    esi
9f00419a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00419c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00419f:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f0041a4:	41                   	inc    ecx
9f0041a5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0041a9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0041ac:	04 00                	add    al,0x0
9f0041ae:	00 00                	add    BYTE PTR [eax],al
9f0041b0:	20 00                	and    BYTE PTR [eax],al
9f0041b2:	00 00                	add    BYTE PTR [eax],al
9f0041b4:	1c 0b                	sbb    al,0xb
9f0041b6:	00 00                	add    BYTE PTR [eax],al
9f0041b8:	98                   	cwde   
9f0041b9:	e6 ff                	out    0xff,al
9f0041bb:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f0041c1:	41                   	inc    ecx
9f0041c2:	0e                   	push   cs
9f0041c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041c9:	44                   	inc    esp
9f0041ca:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0041cd:	8e c5                	mov    es,ebp
9f0041cf:	c3                   	ret    
9f0041d0:	0c 04                	or     al,0x4
9f0041d2:	04 00                	add    al,0x0
9f0041d4:	1c 00                	sbb    al,0x0
9f0041d6:	00 00                	add    BYTE PTR [eax],al
9f0041d8:	40                   	inc    eax
9f0041d9:	0b 00                	or     eax,DWORD PTR [eax]
9f0041db:	00 0a                	add    BYTE PTR [edx],cl
9f0041dd:	e7 ff                	out    0xff,eax
9f0041df:	ff 20                	jmp    DWORD PTR [eax]
9f0041e1:	00 00                	add    BYTE PTR [eax],al
9f0041e3:	00 00                	add    BYTE PTR [eax],al
9f0041e5:	41                   	inc    ecx
9f0041e6:	0e                   	push   cs
9f0041e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041ed:	5c                   	pop    esp
9f0041ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0041f1:	04 00                	add    al,0x0
9f0041f3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0041f6:	00 00                	add    BYTE PTR [eax],al
9f0041f8:	60                   	pusha  
9f0041f9:	0b 00                	or     eax,DWORD PTR [eax]
9f0041fb:	00 0c e7             	add    BYTE PTR [edi+eiz*8],cl
9f0041fe:	ff                   	(bad)  
9f0041ff:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f004202:	00 00                	add    BYTE PTR [eax],al
9f004204:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004207:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00420d:	42                   	inc    edx
9f00420e:	86 03                	xchg   BYTE PTR [ebx],al
9f004210:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f004214:	c3                   	ret    
9f004215:	41                   	inc    ecx
9f004216:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00421a:	04 04                	add    al,0x4
9f00421c:	1c 00                	sbb    al,0x0
9f00421e:	00 00                	add    BYTE PTR [eax],al
9f004220:	88 0b                	mov    BYTE PTR [ebx],cl
9f004222:	00 00                	add    BYTE PTR [eax],al
9f004224:	52                   	push   edx
9f004225:	e7 ff                	out    0xff,eax
9f004227:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f00422d:	41                   	inc    ecx
9f00422e:	0e                   	push   cs
9f00422f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004235:	59                   	pop    ecx
9f004236:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004239:	04 00                	add    al,0x0
9f00423b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00423e:	00 00                	add    BYTE PTR [eax],al
9f004240:	a8 0b                	test   al,0xb
9f004242:	00 00                	add    BYTE PTR [eax],al
9f004244:	50                   	push   eax
9f004245:	e7 ff                	out    0xff,eax
9f004247:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f00424b:	00 00                	add    BYTE PTR [eax],al
9f00424d:	41                   	inc    ecx
9f00424e:	0e                   	push   cs
9f00424f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004255:	45                   	inc    ebp
9f004256:	86 03                	xchg   BYTE PTR [ebx],al
9f004258:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f00425c:	41                   	inc    ecx
9f00425d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004261:	04 04                	add    al,0x4
9f004263:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004266:	00 00                	add    BYTE PTR [eax],al
9f004268:	d0 0b                	ror    BYTE PTR [ebx],1
9f00426a:	00 00                	add    BYTE PTR [eax],al
9f00426c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00426d:	e7 ff                	out    0xff,eax
9f00426f:	ff 19                	call   FWORD PTR [ecx]
9f004271:	03 00                	add    eax,DWORD PTR [eax]
9f004273:	00 00                	add    BYTE PTR [eax],al
9f004275:	41                   	inc    ecx
9f004276:	0e                   	push   cs
9f004277:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00427d:	44                   	inc    esp
9f00427e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004281:	10 03                	adc    BYTE PTR [ebx],al
9f004283:	c3                   	ret    
9f004284:	41                   	inc    ecx
9f004285:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004288:	04 00                	add    al,0x0
9f00428a:	00 00                	add    BYTE PTR [eax],al
9f00428c:	1c 00                	sbb    al,0x0
9f00428e:	00 00                	add    BYTE PTR [eax],al
9f004290:	f8                   	clc    
9f004291:	0b 00                	or     eax,DWORD PTR [eax]
9f004293:	00 5d ea             	add    BYTE PTR [ebp-0x16],bl
9f004296:	ff                   	(bad)  
9f004297:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f00429d:	41                   	inc    ecx
9f00429e:	0e                   	push   cs
9f00429f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042a5:	59                   	pop    ecx
9f0042a6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0042a9:	04 00                	add    al,0x0
9f0042ab:	00 20                	add    BYTE PTR [eax],ah
9f0042ad:	00 00                	add    BYTE PTR [eax],al
9f0042af:	00 18                	add    BYTE PTR [eax],bl
9f0042b1:	0c 00                	or     al,0x0
9f0042b3:	00 5a ea             	add    BYTE PTR [edx-0x16],bl
9f0042b6:	ff                   	(bad)  
9f0042b7:	ff                   	(bad)  
9f0042b8:	3f                   	aas    
9f0042b9:	00 00                	add    BYTE PTR [eax],al
9f0042bb:	00 00                	add    BYTE PTR [eax],al
9f0042bd:	41                   	inc    ecx
9f0042be:	0e                   	push   cs
9f0042bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042c5:	44                   	inc    esp
9f0042c6:	83 03 77             	add    DWORD PTR [ebx],0x77
9f0042c9:	c5 c3 0c             	(bad)  
9f0042cc:	04 04                	add    al,0x4
9f0042ce:	00 00                	add    BYTE PTR [eax],al
9f0042d0:	1c 00                	sbb    al,0x0
9f0042d2:	00 00                	add    BYTE PTR [eax],al
9f0042d4:	3c 0c                	cmp    al,0xc
9f0042d6:	00 00                	add    BYTE PTR [eax],al
9f0042d8:	75 ea                	jne    9f0042c4 <__x86.get_pc_thunk.cx+0xc30>
9f0042da:	ff                   	(bad)  
9f0042db:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f0042e1:	41                   	inc    ecx
9f0042e2:	0e                   	push   cs
9f0042e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042e9:	71 c5                	jno    9f0042b0 <__x86.get_pc_thunk.cx+0xc1c>
9f0042eb:	0c 04                	or     al,0x4
9f0042ed:	04 00                	add    al,0x0
9f0042ef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0042f2:	00 00                	add    BYTE PTR [eax],al
9f0042f4:	5c                   	pop    esp
9f0042f5:	0c 00                	or     al,0x0
9f0042f7:	00 8a ea ff ff 1d    	add    BYTE PTR [edx+0x1dffffea],cl
9f0042fd:	00 00                	add    BYTE PTR [eax],al
9f0042ff:	00 00                	add    BYTE PTR [eax],al
9f004301:	41                   	inc    ecx
9f004302:	0e                   	push   cs
9f004303:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004309:	59                   	pop    ecx
9f00430a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00430d:	04 00                	add    al,0x0
9f00430f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004312:	00 00                	add    BYTE PTR [eax],al
9f004314:	7c 0c                	jl     9f004322 <__x86.get_pc_thunk.cx+0xc8e>
9f004316:	00 00                	add    BYTE PTR [eax],al
9f004318:	87 ea                	xchg   edx,ebp
9f00431a:	ff                   	(bad)  
9f00431b:	ff 57 08             	call   DWORD PTR [edi+0x8]
9f00431e:	00 00                	add    BYTE PTR [eax],al
9f004320:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004323:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004329:	46                   	inc    esi
9f00432a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00432c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00432f:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f004334:	41                   	inc    ecx
9f004335:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004339:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00433c:	04 00                	add    al,0x0
9f00433e:	00 00                	add    BYTE PTR [eax],al
9f004340:	24 00                	and    al,0x0
9f004342:	00 00                	add    BYTE PTR [eax],al
9f004344:	ac                   	lods   al,BYTE PTR ds:[esi]
9f004345:	0c 00                	or     al,0x0
9f004347:	00 ae f2 ff ff 6d    	add    BYTE PTR [esi+0x6dfffff2],ch
9f00434d:	00 00                	add    BYTE PTR [eax],al
9f00434f:	00 00                	add    BYTE PTR [eax],al
9f004351:	41                   	inc    ecx
9f004352:	0e                   	push   cs
9f004353:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004359:	45                   	inc    ebp
9f00435a:	86 03                	xchg   BYTE PTR [ebx],al
9f00435c:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f004360:	c3                   	ret    
9f004361:	41                   	inc    ecx
9f004362:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004366:	04 04                	add    al,0x4
9f004368:	10 00                	adc    BYTE PTR [eax],al
9f00436a:	00 00                	add    BYTE PTR [eax],al
9f00436c:	d4 0c                	aam    0xc
9f00436e:	00 00                	add    BYTE PTR [eax],al
9f004370:	24 f3                	and    al,0xf3
9f004372:	ff                   	(bad)  
9f004373:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f004376:	00 00                	add    BYTE PTR [eax],al
9f004378:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

9f00437c <.dynsym>:
	...
9f00438c:	11 01                	adc    DWORD PTR [ecx],eax
9f00438e:	00 00                	add    BYTE PTR [eax],al
9f004390:	0c 22                	or     al,0x22
9f004392:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
9f004398:	12 00                	adc    al,BYTE PTR [eax]
9f00439a:	01 00                	add    DWORD PTR [eax],eax
9f00439c:	b3 00                	mov    bl,0x0
9f00439e:	00 00                	add    BYTE PTR [eax],al
9f0043a0:	69 0f 00 9f 1c 00    	imul   ecx,DWORD PTR [edi],0x1c9f00
9f0043a6:	00 00                	add    BYTE PTR [eax],al
9f0043a8:	12 00                	adc    al,BYTE PTR [eax]
9f0043aa:	01 00                	add    DWORD PTR [eax],eax
9f0043ac:	7d 00                	jge    9f0043ae <__x86.get_pc_thunk.cx+0xd1a>
9f0043ae:	00 00                	add    BYTE PTR [eax],al
9f0043b0:	dc 0a                	fmul   QWORD PTR [edx]
9f0043b2:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
9f0043b8:	12 00                	adc    al,BYTE PTR [eax]
9f0043ba:	01 00                	add    DWORD PTR [eax],eax
9f0043bc:	83 00 00             	add    DWORD PTR [eax],0x0
9f0043bf:	00 35 0b 00 9f 59    	add    BYTE PTR ds:0x599f000b,dh
9f0043c5:	00 00                	add    BYTE PTR [eax],al
9f0043c7:	00 12                	add    BYTE PTR [edx],dl
9f0043c9:	00 01                	add    BYTE PTR [ecx],al
9f0043cb:	00 20                	add    BYTE PTR [eax],ah
9f0043cd:	01 00                	add    DWORD PTR [eax],eax
9f0043cf:	00 04 23             	add    BYTE PTR [ebx+eiz*1],al
9f0043d2:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
9f0043d8:	12 00                	adc    al,BYTE PTR [eax]
9f0043da:	01 00                	add    DWORD PTR [eax],eax
9f0043dc:	fa                   	cli    
9f0043dd:	00 00                	add    BYTE PTR [eax],al
9f0043df:	00 3c 20             	add    BYTE PTR [eax+eiz*1],bh
9f0043e2:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
9f0043e8:	12 00                	adc    al,BYTE PTR [eax]
9f0043ea:	01 00                	add    DWORD PTR [eax],eax
9f0043ec:	21 00                	and    DWORD PTR [eax],eax
9f0043ee:	00 00                	add    BYTE PTR [eax],al
9f0043f0:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f0043f3:	9f                   	lahf   
9f0043f4:	aa                   	stos   BYTE PTR es:[edi],al
9f0043f5:	00 00                	add    BYTE PTR [eax],al
9f0043f7:	00 12                	add    BYTE PTR [edx],dl
9f0043f9:	00 01                	add    BYTE PTR [ecx],al
9f0043fb:	00 6e 00             	add    BYTE PTR [esi+0x0],ch
9f0043fe:	00 00                	add    BYTE PTR [eax],al
9f004400:	0c 08                	or     al,0x8
9f004402:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
9f004408:	12 00                	adc    al,BYTE PTR [eax]
9f00440a:	01 00                	add    DWORD PTR [eax],eax
9f00440c:	e7 00                	out    0x0,eax
9f00440e:	00 00                	add    BYTE PTR [eax],al
9f004410:	74 16                	je     9f004428 <__x86.get_pc_thunk.cx+0xd94>
9f004412:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
9f004418:	12 00                	adc    al,BYTE PTR [eax]
9f00441a:	01 00                	add    DWORD PTR [eax],eax
9f00441c:	c7 00 00 00 09 11    	mov    DWORD PTR [eax],0x11090000
9f004422:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f004428:	12 00                	adc    al,BYTE PTR [eax]
9f00442a:	01 00                	add    DWORD PTR [eax],eax
9f00442c:	4c                   	dec    esp
9f00442d:	00 00                	add    BYTE PTR [eax],al
9f00442f:	00 60 07             	add    BYTE PTR [eax+0x7],ah
9f004432:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f004438:	12 00                	adc    al,BYTE PTR [eax]
9f00443a:	01 00                	add    DWORD PTR [eax],eax
9f00443c:	db 00                	fild   DWORD PTR [eax]
9f00443e:	00 00                	add    BYTE PTR [eax],al
9f004440:	04 16                	add    al,0x16
9f004442:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f004448:	12 00                	adc    al,BYTE PTR [eax]
9f00444a:	01 00                	add    DWORD PTR [eax],eax
9f00444c:	8a 00                	mov    al,BYTE PTR [eax]
9f00444e:	00 00                	add    BYTE PTR [eax],al
9f004450:	f9                   	stc    
9f004451:	0b 00                	or     eax,DWORD PTR [eax]
9f004453:	9f                   	lahf   
9f004454:	72 00                	jb     9f004456 <__x86.get_pc_thunk.cx+0xdc2>
9f004456:	00 00                	add    BYTE PTR [eax],al
9f004458:	12 00                	adc    al,BYTE PTR [eax]
9f00445a:	01 00                	add    DWORD PTR [eax],eax
9f00445c:	cd 00                	int    0x0
9f00445e:	00 00                	add    BYTE PTR [eax],al
9f004460:	df 12                	fist   WORD PTR [edx]
9f004462:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f004468:	12 00                	adc    al,BYTE PTR [eax]
9f00446a:	01 00                	add    DWORD PTR [eax],eax
9f00446c:	40                   	inc    eax
9f00446d:	01 00                	add    DWORD PTR [eax],eax
9f00446f:	00 14 25 00 9f 7d 01 	add    BYTE PTR [eiz*1+0x17d9f00],dl
9f004476:	00 00                	add    BYTE PTR [eax],al
9f004478:	12 00                	adc    al,BYTE PTR [eax]
9f00447a:	01 00                	add    DWORD PTR [eax],eax
9f00447c:	17                   	pop    ss
9f00447d:	00 00                	add    BYTE PTR [eax],al
9f00447f:	00 2b                	add    BYTE PTR [ebx],ch
9f004481:	02 00                	add    al,BYTE PTR [eax]
9f004483:	9f                   	lahf   
9f004484:	bb 00 00 00 12       	mov    ebx,0x12000000
9f004489:	00 01                	add    BYTE PTR [ecx],al
9f00448b:	00 6f 01             	add    BYTE PTR [edi+0x1],ch
9f00448e:	00 00                	add    BYTE PTR [eax],al
9f004490:	f1                   	icebp  
9f004491:	2c 00                	sub    al,0x0
9f004493:	9f                   	lahf   
9f004494:	1d 00 00 00 12       	sbb    eax,0x12000000
9f004499:	00 01                	add    BYTE PTR [ecx],al
9f00449b:	00 50 01             	add    BYTE PTR [eax+0x1],dl
9f00449e:	00 00                	add    BYTE PTR [eax],al
9f0044a0:	b4 26                	mov    ah,0x26
9f0044a2:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
9f0044a8:	12 00                	adc    al,BYTE PTR [eax]
9f0044aa:	01 00                	add    DWORD PTR [eax],eax
9f0044ac:	73 00                	jae    9f0044ae <__x86.get_pc_thunk.cx+0xe1a>
9f0044ae:	00 00                	add    BYTE PTR [eax],al
9f0044b0:	fe 09                	dec    BYTE PTR [ecx]
9f0044b2:	00 9f bf 00 00 00    	add    BYTE PTR [edi+0xbf],bl
9f0044b8:	12 00                	adc    al,BYTE PTR [eax]
9f0044ba:	01 00                	add    DWORD PTR [eax],eax
9f0044bc:	f5                   	cmc    
9f0044bd:	00 00                	add    BYTE PTR [eax],al
9f0044bf:	00 f8                	add    al,bh
9f0044c1:	18 00                	sbb    BYTE PTR [eax],al
9f0044c3:	9f                   	lahf   
9f0044c4:	29 00                	sub    DWORD PTR [eax],eax
9f0044c6:	00 00                	add    BYTE PTR [eax],al
9f0044c8:	12 00                	adc    al,BYTE PTR [eax]
9f0044ca:	01 00                	add    DWORD PTR [eax],eax
9f0044cc:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f0044cd:	00 00                	add    BYTE PTR [eax],al
9f0044cf:	00 26                	add    BYTE PTR [esi],ah
9f0044d1:	0d 00 9f f4 01       	or     eax,0x1f49f00
9f0044d6:	00 00                	add    BYTE PTR [eax],al
9f0044d8:	12 00                	adc    al,BYTE PTR [eax]
9f0044da:	01 00                	add    DWORD PTR [eax],eax
9f0044dc:	3f                   	aas    
9f0044dd:	00 00                	add    BYTE PTR [eax],al
9f0044df:	00 f8                	add    al,bh
9f0044e1:	06                   	push   es
9f0044e2:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
9f0044e8:	12 00                	adc    al,BYTE PTR [eax]
9f0044ea:	01 00                	add    DWORD PTR [eax],eax
9f0044ec:	03 01                	add    eax,DWORD PTR [ecx]
9f0044ee:	00 00                	add    BYTE PTR [eax],al
9f0044f0:	c0 20 00             	shl    BYTE PTR [eax],0x0
9f0044f3:	9f                   	lahf   
9f0044f4:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f0044f7:	00 12                	add    BYTE PTR [edx],dl
9f0044f9:	00 01                	add    BYTE PTR [ecx],al
9f0044fb:	00 66 01             	add    BYTE PTR [esi+0x1],ah
9f0044fe:	00 00                	add    BYTE PTR [eax],al
9f004500:	94                   	xchg   esp,eax
9f004501:	29 00                	sub    DWORD PTR [eax],eax
9f004503:	9f                   	lahf   
9f004504:	44                   	inc    esp
9f004505:	00 00                	add    BYTE PTR [eax],al
9f004507:	00 12                	add    BYTE PTR [edx],dl
9f004509:	00 01                	add    BYTE PTR [ecx],al
9f00450b:	00 a2 00 00 00 da    	add    BYTE PTR [edx-0x26000000],ah
9f004511:	0c 00                	or     al,0x0
9f004513:	9f                   	lahf   
9f004514:	4c                   	dec    esp
9f004515:	00 00                	add    BYTE PTR [eax],al
9f004517:	00 12                	add    BYTE PTR [edx],dl
9f004519:	00 01                	add    BYTE PTR [ecx],al
9f00451b:	00 45 00             	add    BYTE PTR [ebp+0x0],al
9f00451e:	00 00                	add    BYTE PTR [eax],al
9f004520:	2d 07 00 9f 31       	sub    eax,0x319f0007
9f004525:	00 00                	add    BYTE PTR [eax],al
9f004527:	00 12                	add    BYTE PTR [edx],dl
9f004529:	00 01                	add    BYTE PTR [ecx],al
9f00452b:	00 8e 01 00 00 9f    	add    BYTE PTR [esi-0x60ffffff],cl
9f004531:	2d 00 9f 57 08       	sub    eax,0x8579f00
9f004536:	00 00                	add    BYTE PTR [eax],al
9f004538:	12 00                	adc    al,BYTE PTR [eax]
9f00453a:	01 00                	add    DWORD PTR [eax],eax
9f00453c:	5f                   	pop    edi
9f00453d:	01 00                	add    DWORD PTR [eax],eax
9f00453f:	00 76 29             	add    BYTE PTR [esi+0x29],dh
9f004542:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f004548:	12 00                	adc    al,BYTE PTR [eax]
9f00454a:	01 00                	add    DWORD PTR [eax],eax
9f00454c:	3a 00                	cmp    al,BYTE PTR [eax]
9f00454e:	00 00                	add    BYTE PTR [eax],al
9f004550:	c3                   	ret    
9f004551:	06                   	push   es
9f004552:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
9f004558:	12 00                	adc    al,BYTE PTR [eax]
9f00455a:	01 00                	add    DWORD PTR [eax],eax
9f00455c:	30 01                	xor    BYTE PTR [ecx],al
9f00455e:	00 00                	add    BYTE PTR [eax],al
9f004560:	c4 23                	les    esp,FWORD PTR [ebx]
9f004562:	00 9f 67 00 00 00    	add    BYTE PTR [edi+0x67],bl
9f004568:	12 00                	adc    al,BYTE PTR [eax]
9f00456a:	01 00                	add    DWORD PTR [eax],eax
9f00456c:	38 01                	cmp    BYTE PTR [ecx],al
9f00456e:	00 00                	add    BYTE PTR [eax],al
9f004570:	f4                   	hlt    
9f004571:	24 00                	and    al,0x0
9f004573:	9f                   	lahf   
9f004574:	20 00                	and    BYTE PTR [eax],al
9f004576:	00 00                	add    BYTE PTR [eax],al
9f004578:	12 00                	adc    al,BYTE PTR [eax]
9f00457a:	01 00                	add    DWORD PTR [eax],eax
9f00457c:	28 00                	sub    BYTE PTR [eax],al
9f00457e:	00 00                	add    BYTE PTR [eax],al
9f004580:	aa                   	stos   BYTE PTR es:[edi],al
9f004581:	04 00                	add    al,0x0
9f004583:	9f                   	lahf   
9f004584:	c1 01 00             	rol    DWORD PTR [ecx],0x0
9f004587:	00 12                	add    BYTE PTR [edx],dl
9f004589:	00 01                	add    BYTE PTR [ecx],al
9f00458b:	00 10                	add    BYTE PTR [eax],dl
9f00458d:	00 00                	add    BYTE PTR [eax],al
9f00458f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
9f004592:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f004598:	12 00                	adc    al,BYTE PTR [eax]
9f00459a:	01 00                	add    DWORD PTR [eax],eax
9f00459c:	9d                   	popf   
9f00459d:	00 00                	add    BYTE PTR [eax],al
9f00459f:	00 b1 0c 00 9f 29    	add    BYTE PTR [ecx+0x299f000c],dh
9f0045a5:	00 00                	add    BYTE PTR [eax],al
9f0045a7:	00 12                	add    BYTE PTR [edx],dl
9f0045a9:	00 01                	add    BYTE PTR [ecx],al
9f0045ab:	00 51 00             	add    BYTE PTR [ecx+0x0],dl
9f0045ae:	00 00                	add    BYTE PTR [eax],al
9f0045b0:	00 00                	add    BYTE PTR [eax],al
9f0045b2:	13 00                	adc    eax,DWORD PTR [eax]
9f0045b4:	00 00                	add    BYTE PTR [eax],al
9f0045b6:	00 00                	add    BYTE PTR [eax],al
9f0045b8:	10 00                	adc    BYTE PTR [eax],al
9f0045ba:	01 00                	add    DWORD PTR [eax],eax
9f0045bc:	78 01                	js     9f0045bf <__x86.get_pc_thunk.cx+0xf2b>
9f0045be:	00 00                	add    BYTE PTR [eax],al
9f0045c0:	0e                   	push   cs
9f0045c1:	2d 00 9f 3f 00       	sub    eax,0x3f9f00
9f0045c6:	00 00                	add    BYTE PTR [eax],al
9f0045c8:	12 00                	adc    al,BYTE PTR [eax]
9f0045ca:	01 00                	add    DWORD PTR [eax],eax
9f0045cc:	ee                   	out    dx,al
9f0045cd:	00 00                	add    BYTE PTR [eax],al
9f0045cf:	00 d7                	add    bh,dl
9f0045d1:	18 00                	sbb    BYTE PTR [eax],al
9f0045d3:	9f                   	lahf   
9f0045d4:	20 00                	and    BYTE PTR [eax],al
9f0045d6:	00 00                	add    BYTE PTR [eax],al
9f0045d8:	12 00                	adc    al,BYTE PTR [eax]
9f0045da:	01 00                	add    DWORD PTR [eax],eax
9f0045dc:	57                   	push   edi
9f0045dd:	01 00                	add    DWORD PTR [eax],eax
9f0045df:	00 e6                	add    dh,ah
9f0045e1:	28 00                	sub    BYTE PTR [eax],al
9f0045e3:	9f                   	lahf   
9f0045e4:	20 00                	and    BYTE PTR [eax],al
9f0045e6:	00 00                	add    BYTE PTR [eax],al
9f0045e8:	12 00                	adc    al,BYTE PTR [eax]
9f0045ea:	01 00                	add    DWORD PTR [eax],eax
9f0045ec:	66                   	data16
9f0045ed:	00 00                	add    BYTE PTR [eax],al
9f0045ef:	00 c9                	add    cl,cl
9f0045f1:	07                   	pop    es
9f0045f2:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
9f0045f8:	12 00                	adc    al,BYTE PTR [eax]
9f0045fa:	01 00                	add    DWORD PTR [eax],eax
9f0045fc:	61                   	popa   
9f0045fd:	00 00                	add    BYTE PTR [eax],al
9f0045ff:	00 86 07 00 9f 43    	add    BYTE PTR [esi+0x439f0007],al
9f004605:	00 00                	add    BYTE PTR [eax],al
9f004607:	00 12                	add    BYTE PTR [edx],dl
9f004609:	00 01                	add    BYTE PTR [ecx],al
9f00460b:	00 0a                	add    BYTE PTR [edx],cl
9f00460d:	01 00                	add    DWORD PTR [eax],eax
9f00460f:	00 ac 21 00 9f 5e 00 	add    BYTE PTR [ecx+eiz*1+0x5e9f00],ch
9f004616:	00 00                	add    BYTE PTR [eax],al
9f004618:	12 00                	adc    al,BYTE PTR [eax]
9f00461a:	01 00                	add    DWORD PTR [eax],eax
9f00461c:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f00461f:	00 a5 0f 00 9f 20    	add    BYTE PTR [ebp+0x209f000f],ah
9f004625:	00 00                	add    BYTE PTR [eax],al
9f004627:	00 12                	add    BYTE PTR [edx],dl
9f004629:	00 01                	add    BYTE PTR [ecx],al
9f00462b:	00 08                	add    BYTE PTR [eax],cl
9f00462d:	00 00                	add    BYTE PTR [eax],al
9f00462f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
9f004632:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f004638:	12 00                	adc    al,BYTE PTR [eax]
9f00463a:	01 00                	add    DWORD PTR [eax],eax
9f00463c:	18 01                	sbb    BYTE PTR [ecx],al
9f00463e:	00 00                	add    BYTE PTR [eax],al
9f004640:	8c 22                	mov    WORD PTR [edx],fs
9f004642:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
9f004648:	12 00                	adc    al,BYTE PTR [eax]
9f00464a:	01 00                	add    DWORD PTR [eax],eax
9f00464c:	90                   	nop
9f00464d:	00 00                	add    BYTE PTR [eax],al
9f00464f:	00 88 0c 00 9f 29    	add    BYTE PTR [eax+0x299f000c],cl
9f004655:	00 00                	add    BYTE PTR [eax],al
9f004657:	00 12                	add    BYTE PTR [edx],dl
9f004659:	00 01                	add    BYTE PTR [ecx],al
9f00465b:	00 82 01 00 00 82    	add    BYTE PTR [edx-0x7dffffff],al
9f004661:	2d 00 9f 1d 00       	sub    eax,0x1d9f00
9f004666:	00 00                	add    BYTE PTR [eax],al
9f004668:	12 00                	adc    al,BYTE PTR [eax]
9f00466a:	01 00                	add    DWORD PTR [eax],eax
9f00466c:	95                   	xchg   ebp,eax
9f00466d:	01 00                	add    DWORD PTR [eax],eax
9f00466f:	00 f6                	add    dh,dh
9f004671:	35 00 9f 6d 00       	xor    eax,0x6d9f00
9f004676:	00 00                	add    BYTE PTR [eax],al
9f004678:	12 00                	adc    al,BYTE PTR [eax]
9f00467a:	01 00                	add    DWORD PTR [eax],eax
9f00467c:	bb 00 00 00 85       	mov    ebx,0x85000000
9f004681:	0f 00 9f 20 00 00 00 	ltr    WORD PTR [edi+0x20]
9f004688:	12 00                	adc    al,BYTE PTR [eax]
9f00468a:	01 00                	add    DWORD PTR [eax],eax
9f00468c:	1c 00                	sbb    al,0x0
9f00468e:	00 00                	add    BYTE PTR [eax],al
9f004690:	a1 03 00 9f 5c       	mov    eax,ds:0x5c9f0003
9f004695:	00 00                	add    BYTE PTR [eax],al
9f004697:	00 12                	add    BYTE PTR [edx],dl
9f004699:	00 01                	add    BYTE PTR [ecx],al
9f00469b:	00 29                	add    BYTE PTR [ecx],ch
9f00469d:	01 00                	add    DWORD PTR [eax],eax
9f00469f:	00 60 23             	add    BYTE PTR [eax+0x23],ah
9f0046a2:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
9f0046a8:	12 00                	adc    al,BYTE PTR [eax]
9f0046aa:	01 00                	add    DWORD PTR [eax],eax
9f0046ac:	2f                   	das    
9f0046ad:	00 00                	add    BYTE PTR [eax],al
9f0046af:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
9f0046b3:	9f                   	lahf   
9f0046b4:	2d 00 00 00 12       	sub    eax,0x12000000
9f0046b9:	00 01                	add    BYTE PTR [ecx],al
9f0046bb:	00 ad 00 00 00 1a    	add    BYTE PTR [ebp+0x1a000000],ch
9f0046c1:	0f 00 9f 4f 00 00 00 	ltr    WORD PTR [edi+0x4f]
9f0046c8:	12 00                	adc    al,BYTE PTR [eax]
9f0046ca:	01 00                	add    DWORD PTR [eax],eax
9f0046cc:	01 00                	add    DWORD PTR [eax],eax
9f0046ce:	00 00                	add    BYTE PTR [eax],al
9f0046d0:	00 00                	add    BYTE PTR [eax],al
9f0046d2:	00 9f 38 00 00 00    	add    BYTE PTR [edi+0x38],bl
9f0046d8:	12 00                	adc    al,BYTE PTR [eax]
9f0046da:	01 00                	add    DWORD PTR [eax],eax
9f0046dc:	48                   	dec    eax
9f0046dd:	01 00                	add    DWORD PTR [eax],eax
9f0046df:	00 94 26 00 9f 1d 00 	add    BYTE PTR [esi+eiz*1+0x1d9f00],dl
9f0046e6:	00 00                	add    BYTE PTR [eax],al
9f0046e8:	12 00                	adc    al,BYTE PTR [eax]
9f0046ea:	01 00                	add    DWORD PTR [eax],eax
9f0046ec:	34 00                	xor    al,0x0
9f0046ee:	00 00                	add    BYTE PTR [eax],al
9f0046f0:	99                   	cdq    
9f0046f1:	06                   	push   es
9f0046f2:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
9f0046f8:	12 00                	adc    al,BYTE PTR [eax]
9f0046fa:	01 00                	add    DWORD PTR [eax],eax
9f0046fc:	e2 00                	loop   9f0046fe <__x86.get_pc_thunk.cx+0x106a>
9f0046fe:	00 00                	add    BYTE PTR [eax],al
9f004700:	24 16                	and    al,0x16
9f004702:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f004708:	12 00                	adc    al,BYTE PTR [eax]
9f00470a:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f00470c <.dynstr>:
9f00470c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00470f:	72 63                	jb     9f004774 <__x86.get_pc_thunk.cx+0x10e0>
9f004711:	68 72 00 73 74       	push   0x74730072
9f004716:	72 63                	jb     9f00477b <__x86.get_pc_thunk.cx+0x10e7>
9f004718:	73 70                	jae    9f00478a <__x86.get_pc_thunk.cx+0x10f6>
9f00471a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00471b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00471e:	72 74                	jb     9f004794 <__x86.get_pc_thunk.cx+0x1100>
9f004720:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004721:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f004724:	74 6f                	je     9f004795 <__x86.get_pc_thunk.cx+0x1101>
9f004726:	61                   	popa   
9f004727:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f00472a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00472b:	69 00 67 65 74 65    	imul   eax,DWORD PTR [eax],0x65746567
9f004731:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004732:	76 00                	jbe    9f004734 <__x86.get_pc_thunk.cx+0x10a0>
9f004734:	73 65                	jae    9f00479b <__x86.get_pc_thunk.cx+0x1107>
9f004736:	74 65                	je     9f00479d <__x86.get_pc_thunk.cx+0x1109>
9f004738:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004739:	76 00                	jbe    9f00473b <__x86.get_pc_thunk.cx+0x10a7>
9f00473b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00473c:	70 65                	jo     9f0047a3 <__x86.get_pc_thunk.cx+0x110f>
9f00473e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00473f:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
9f004742:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004743:	73 65                	jae    9f0047aa <__x86.get_pc_thunk.cx+0x1116>
9f004745:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f004748:	61                   	popa   
9f004749:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f00474d:	69 74 65 00 67 65 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x64746567
9f004754:	64 
9f004755:	69 72 00 70 75 74 73 	imul   esi,DWORD PTR [edx+0x0],0x73747570
9f00475c:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
9f00475f:	73 45                	jae    9f0047a6 <__x86.get_pc_thunk.cx+0x1112>
9f004761:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004762:	74 65                	je     9f0047c9 <__x86.get_pc_thunk.cx+0x1135>
9f004764:	72 5f                	jb     9f0047c5 <__x86.get_pc_thunk.cx+0x1131>
9f004766:	56                   	push   esi
9f004767:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f00476c:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f00476f:	74 63                	je     9f0047d4 <__x86.get_pc_thunk.cx+0x1140>
9f004771:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f004774:	74 63                	je     9f0047d9 <__x86.get_pc_thunk.cx+0x1145>
9f004776:	68 61 72 00 67       	push   0x67007261
9f00477b:	65                   	gs
9f00477c:	74 73                	je     9f0047f1 <__x86.get_pc_thunk.cx+0x115d>
9f00477e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f004782:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f004785:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004786:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f00478d:	74 
9f00478e:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f004791:	69 6e 74 66 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730066
9f004798:	65                   	gs
9f004799:	65                   	gs
9f00479a:	70 00                	jo     9f00479c <__x86.get_pc_thunk.cx+0x1108>
9f00479c:	6d                   	ins    DWORD PTR es:[edi],dx
9f00479d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00479e:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f0047a5:	6e 
9f0047a6:	61                   	popa   
9f0047a7:	6c                   	ins    BYTE PTR es:[edi],dx
9f0047a8:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f0047ab:	72 6b                	jb     9f004818 <__x86.get_pc_thunk.cx+0x1184>
9f0047ad:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f0047b0:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f0047b3:	65                   	gs
9f0047b4:	78 65                	js     9f00481b <__x86.get_pc_thunk.cx+0x1187>
9f0047b6:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f0047b9:	65                   	gs
9f0047ba:	78 65                	js     9f004821 <__x86.get_pc_thunk.cx+0x118d>
9f0047bc:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f0047bf:	77 61                	ja     9f004822 <__x86.get_pc_thunk.cx+0x118e>
9f0047c1:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f0047c8:	78 
9f0047c9:	69 74 00 67 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x67],0x77637465
9f0047d0:	77 
9f0047d1:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f0047d5:	6c                   	ins    BYTE PTR es:[edi],dx
9f0047d6:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f0047dd:	69 
9f0047de:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0047df:	65                   	gs
9f0047e0:	54                   	push   esp
9f0047e1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0047e2:	41                   	inc    ecx
9f0047e3:	72 67                	jb     9f00484c <__x86.get_pc_thunk.cx+0x11b8>
9f0047e5:	76 00                	jbe    9f0047e7 <__x86.get_pc_thunk.cx+0x1153>
9f0047e7:	6d                   	ins    DWORD PTR es:[edi],dx
9f0047e8:	61                   	popa   
9f0047e9:	6c                   	ins    BYTE PTR es:[edi],dx
9f0047ea:	6c                   	ins    BYTE PTR es:[edi],dx
9f0047eb:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0047ec:	63 00                	arpl   WORD PTR [eax],ax
9f0047ee:	66                   	data16
9f0047ef:	72 65                	jb     9f004856 <__x86.get_pc_thunk.cx+0x11c2>
9f0047f1:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f0047f5:	6d                   	ins    DWORD PTR es:[edi],dx
9f0047f6:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f0047f9:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
9f0047fc:	6d                   	ins    DWORD PTR es:[edi],dx
9f0047fd:	73 65                	jae    9f004864 <__x86.get_pc_thunk.cx+0x11d0>
9f0047ff:	74 00                	je     9f004801 <__x86.get_pc_thunk.cx+0x116d>
9f004801:	70 69                	jo     9f00486c <__x86.get_pc_thunk.cx+0x11d8>
9f004803:	70 65                	jo     9f00486a <__x86.get_pc_thunk.cx+0x11d6>
9f004805:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f004808:	73 65                	jae    9f00486f <__x86.get_pc_thunk.cx+0x11db>
9f00480a:	74 52                	je     9f00485e <__x86.get_pc_thunk.cx+0x11ca>
9f00480c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00480d:	77 00                	ja     9f00480f <__x86.get_pc_thunk.cx+0x117b>
9f00480f:	73 74                	jae    9f004885 <__x86.get_pc_thunk.cx+0x11f1>
9f004811:	72 63                	jb     9f004876 <__x86.get_pc_thunk.cx+0x11e2>
9f004813:	61                   	popa   
9f004814:	74 00                	je     9f004816 <__x86.get_pc_thunk.cx+0x1182>
9f004816:	73 74                	jae    9f00488c <__x86.get_pc_thunk.cx+0x11f8>
9f004818:	72 63                	jb     9f00487d <__x86.get_pc_thunk.cx+0x11e9>
9f00481a:	6d                   	ins    DWORD PTR es:[edi],dx
9f00481b:	70 00                	jo     9f00481d <__x86.get_pc_thunk.cx+0x1189>
9f00481d:	73 74                	jae    9f004893 <__x86.get_pc_thunk.cx+0x11ff>
9f00481f:	72 63                	jb     9f004884 <__x86.get_pc_thunk.cx+0x11f0>
9f004821:	70 79                	jo     9f00489c <__x86.get_pc_thunk.cx+0x1208>
9f004823:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f004826:	72 63                	jb     9f00488b <__x86.get_pc_thunk.cx+0x11f7>
9f004828:	70 79                	jo     9f0048a3 <__x86.get_pc_thunk.cx+0x120f>
9f00482a:	63 00                	arpl   WORD PTR [eax],ax
9f00482c:	73 74                	jae    9f0048a2 <__x86.get_pc_thunk.cx+0x120e>
9f00482e:	72 69                	jb     9f004899 <__x86.get_pc_thunk.cx+0x1205>
9f004830:	73 6e                	jae    9f0048a0 <__x86.get_pc_thunk.cx+0x120c>
9f004832:	75 6d                	jne    9f0048a1 <__x86.get_pc_thunk.cx+0x120d>
9f004834:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f004837:	72 6c                	jb     9f0048a5 <__x86.get_pc_thunk.cx+0x1211>
9f004839:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f00483b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00483e:	72 6e                	jb     9f0048ae <__x86.get_pc_thunk.cx+0x121a>
9f004840:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f004843:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f004846:	72 6e                	jb     9f0048b6 <__x86.get_pc_thunk.cx+0x1222>
9f004848:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f00484b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00484e:	72 74                	jb     9f0048c4 <__x86.get_pc_thunk.cx+0x1230>
9f004850:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004851:	75 6c                	jne    9f0048bf <__x86.get_pc_thunk.cx+0x122b>
9f004853:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f004856:	72 6c                	jb     9f0048c4 <__x86.get_pc_thunk.cx+0x1230>
9f004858:	65                   	gs
9f004859:	66                   	data16
9f00485a:	74 00                	je     9f00485c <__x86.get_pc_thunk.cx+0x11c8>
9f00485c:	73 74                	jae    9f0048d2 <__x86.get_pc_thunk.cx+0x123e>
9f00485e:	72 74                	jb     9f0048d4 <__x86.get_pc_thunk.cx+0x1240>
9f004860:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004861:	6c                   	ins    BYTE PTR es:[edi],dx
9f004862:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f004865:	72 74                	jb     9f0048db <__x86.get_pc_thunk.cx+0x1247>
9f004867:	72 69                	jb     9f0048d2 <__x86.get_pc_thunk.cx+0x123e>
9f004869:	6d                   	ins    DWORD PTR es:[edi],dx
9f00486a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00486d:	72 73                	jb     9f0048e2 <__x86.get_pc_thunk.cx+0x124e>
9f00486f:	74 72                	je     9f0048e3 <__x86.get_pc_thunk.cx+0x124f>
9f004871:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f004874:	74 74                	je     9f0048ea <__x86.get_pc_thunk.cx+0x1256>
9f004876:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f00487d:	74 69                	je     9f0048e8 <__x86.get_pc_thunk.cx+0x1254>
9f00487f:	6d                   	ins    DWORD PTR es:[edi],dx
9f004880:	65                   	gs
9f004881:	5f                   	pop    edi
9f004882:	72 00                	jb     9f004884 <__x86.get_pc_thunk.cx+0x11f0>
9f004884:	6c                   	ins    BYTE PTR es:[edi],dx
9f004885:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004886:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f004889:	74 69                	je     9f0048f4 <__x86.get_pc_thunk.cx+0x1260>
9f00488b:	6d                   	ins    DWORD PTR es:[edi],dx
9f00488c:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f004891:	61                   	popa   
9f004892:	6c                   	ins    BYTE PTR es:[edi],dx
9f004893:	74 69                	je     9f0048fe <__x86.get_pc_thunk.cx+0x126a>
9f004895:	6d                   	ins    DWORD PTR es:[edi],dx
9f004896:	65                   	gs
9f004897:	5f                   	pop    edi
9f004898:	72 00                	jb     9f00489a <__x86.get_pc_thunk.cx+0x1206>
9f00489a:	6d                   	ins    DWORD PTR es:[edi],dx
9f00489b:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f0048a0:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0048a3:	74 74                	je     9f004919 <__x86.get_pc_thunk.cx+0x1285>
9f0048a5:	69                   	.byte 0x69
9f0048a6:	6d                   	ins    DWORD PTR es:[edi],dx
9f0048a7:	65                   	gs
	...

Disassembly of section .hash:

9f0048ac <.hash>:
9f0048ac:	25 00 00 00 39       	and    eax,0x39000000
9f0048b1:	00 00                	add    BYTE PTR [eax],al
9f0048b3:	00 1e                	add    BYTE PTR [esi],bl
9f0048b5:	00 00                	add    BYTE PTR [eax],al
9f0048b7:	00 29                	add    BYTE PTR [ecx],ch
9f0048b9:	00 00                	add    BYTE PTR [eax],al
9f0048bb:	00 28                	add    BYTE PTR [eax],ch
9f0048bd:	00 00                	add    BYTE PTR [eax],al
9f0048bf:	00 2a                	add    BYTE PTR [edx],ch
9f0048c1:	00 00                	add    BYTE PTR [eax],al
9f0048c3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0048c6:	00 00                	add    BYTE PTR [eax],al
9f0048c8:	34 00                	xor    al,0x0
9f0048ca:	00 00                	add    BYTE PTR [eax],al
9f0048cc:	15 00 00 00 00       	adc    eax,0x0
9f0048d1:	00 00                	add    BYTE PTR [eax],al
9f0048d3:	00 20                	add    BYTE PTR [eax],ah
	...
9f0048dd:	00 00                	add    BYTE PTR [eax],al
9f0048df:	00 18                	add    BYTE PTR [eax],bl
9f0048e1:	00 00                	add    BYTE PTR [eax],al
9f0048e3:	00 1a                	add    BYTE PTR [edx],bl
9f0048e5:	00 00                	add    BYTE PTR [eax],al
9f0048e7:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
9f0048ea:	00 00                	add    BYTE PTR [eax],al
9f0048ec:	21 00                	and    DWORD PTR [eax],eax
9f0048ee:	00 00                	add    BYTE PTR [eax],al
9f0048f0:	12 00                	adc    al,BYTE PTR [eax]
9f0048f2:	00 00                	add    BYTE PTR [eax],al
9f0048f4:	37                   	aaa    
9f0048f5:	00 00                	add    BYTE PTR [eax],al
9f0048f7:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f0048fa:	00 00                	add    BYTE PTR [eax],al
9f0048fc:	2b 00                	sub    eax,DWORD PTR [eax]
9f0048fe:	00 00                	add    BYTE PTR [eax],al
9f004900:	07                   	pop    es
9f004901:	00 00                	add    BYTE PTR [eax],al
9f004903:	00 03                	add    BYTE PTR [ebx],al
9f004905:	00 00                	add    BYTE PTR [eax],al
9f004907:	00 33                	add    BYTE PTR [ebx],dh
9f004909:	00 00                	add    BYTE PTR [eax],al
9f00490b:	00 31                	add    BYTE PTR [ecx],dh
9f00490d:	00 00                	add    BYTE PTR [eax],al
9f00490f:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
9f004912:	00 00                	add    BYTE PTR [eax],al
9f004914:	36 00 00             	add    BYTE PTR ss:[eax],al
	...
9f004923:	00 13                	add    BYTE PTR [ebx],dl
9f004925:	00 00                	add    BYTE PTR [eax],al
9f004927:	00 32                	add    BYTE PTR [edx],dh
9f004929:	00 00                	add    BYTE PTR [eax],al
9f00492b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00492e:	00 00                	add    BYTE PTR [eax],al
9f004930:	38 00                	cmp    BYTE PTR [eax],al
9f004932:	00 00                	add    BYTE PTR [eax],al
9f004934:	25 00 00 00 00       	and    eax,0x0
9f004939:	00 00                	add    BYTE PTR [eax],al
9f00493b:	00 35 00 00 00 27    	add    BYTE PTR ds:0x27000000,dh
	...
9f00495d:	00 00                	add    BYTE PTR [eax],al
9f00495f:	00 02                	add    BYTE PTR [edx],al
9f004961:	00 00                	add    BYTE PTR [eax],al
9f004963:	00 00                	add    BYTE PTR [eax],al
9f004965:	00 00                	add    BYTE PTR [eax],al
9f004967:	00 06                	add    BYTE PTR [esi],al
9f004969:	00 00                	add    BYTE PTR [eax],al
9f00496b:	00 00                	add    BYTE PTR [eax],al
9f00496d:	00 00                	add    BYTE PTR [eax],al
9f00496f:	00 08                	add    BYTE PTR [eax],cl
	...
9f004981:	00 00                	add    BYTE PTR [eax],al
9f004983:	00 0a                	add    BYTE PTR [edx],cl
9f004985:	00 00                	add    BYTE PTR [eax],al
9f004987:	00 00                	add    BYTE PTR [eax],al
9f004989:	00 00                	add    BYTE PTR [eax],al
9f00498b:	00 0f                	add    BYTE PTR [edi],cl
9f00498d:	00 00                	add    BYTE PTR [eax],al
9f00498f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
	...
9f0049a6:	00 00                	add    BYTE PTR [eax],al
9f0049a8:	0e                   	push   cs
	...
9f0049b9:	00 00                	add    BYTE PTR [eax],al
9f0049bb:	00 01                	add    BYTE PTR [ecx],al
9f0049bd:	00 00                	add    BYTE PTR [eax],al
9f0049bf:	00 10                	add    BYTE PTR [eax],dl
9f0049c1:	00 00                	add    BYTE PTR [eax],al
9f0049c3:	00 17                	add    BYTE PTR [edi],dl
9f0049c5:	00 00                	add    BYTE PTR [eax],al
9f0049c7:	00 00                	add    BYTE PTR [eax],al
9f0049c9:	00 00                	add    BYTE PTR [eax],al
9f0049cb:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
9f0049d1:	00 00                	add    BYTE PTR [eax],al
9f0049d3:	00 1b                	add    BYTE PTR [ebx],bl
9f0049d5:	00 00                	add    BYTE PTR [eax],al
9f0049d7:	00 23                	add    BYTE PTR [ebx],ah
9f0049d9:	00 00                	add    BYTE PTR [eax],al
9f0049db:	00 22                	add    BYTE PTR [edx],ah
9f0049dd:	00 00                	add    BYTE PTR [eax],al
9f0049df:	00 19                	add    BYTE PTR [ecx],bl
9f0049e1:	00 00                	add    BYTE PTR [eax],al
9f0049e3:	00 1f                	add    BYTE PTR [edi],bl
9f0049e5:	00 00                	add    BYTE PTR [eax],al
9f0049e7:	00 09                	add    BYTE PTR [ecx],cl
	...
9f0049f1:	00 00                	add    BYTE PTR [eax],al
9f0049f3:	00 0b                	add    BYTE PTR [ebx],cl
9f0049f5:	00 00                	add    BYTE PTR [eax],al
9f0049f7:	00 11                	add    BYTE PTR [ecx],dl
9f0049f9:	00 00                	add    BYTE PTR [eax],al
9f0049fb:	00 00                	add    BYTE PTR [eax],al
9f0049fd:	00 00                	add    BYTE PTR [eax],al
9f0049ff:	00 1d 00 00 00 00    	add    BYTE PTR ds:0x0,bl
9f004a05:	00 00                	add    BYTE PTR [eax],al
9f004a07:	00 00                	add    BYTE PTR [eax],al
9f004a09:	00 00                	add    BYTE PTR [eax],al
9f004a0b:	00 26                	add    BYTE PTR [esi],ah
9f004a0d:	00 00                	add    BYTE PTR [eax],al
9f004a0f:	00 30                	add    BYTE PTR [eax],dh
9f004a11:	00 00                	add    BYTE PTR [eax],al
9f004a13:	00 2e                	add    BYTE PTR [esi],ch
9f004a15:	00 00                	add    BYTE PTR [eax],al
9f004a17:	00 00                	add    BYTE PTR [eax],al
9f004a19:	00 00                	add    BYTE PTR [eax],al
9f004a1b:	00 2f                	add    BYTE PTR [edi],ch
9f004a1d:	00 00                	add    BYTE PTR [eax],al
9f004a1f:	00 05 00 00 00 16    	add    BYTE PTR ds:0x16000000,al
9f004a25:	00 00                	add    BYTE PTR [eax],al
9f004a27:	00                   	.byte 0x0
9f004a28:	2d                   	.byte 0x2d
9f004a29:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

9f004a2c <.eh_frame>:
9f004a2c:	14 00                	adc    al,0x0
9f004a2e:	00 00                	add    BYTE PTR [eax],al
9f004a30:	00 00                	add    BYTE PTR [eax],al
9f004a32:	00 00                	add    BYTE PTR [eax],al
9f004a34:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f004a37:	00 01                	add    BYTE PTR [ecx],al
9f004a39:	7c 08                	jl     9f004a43 <__x86.get_pc_thunk.cx+0x13af>
9f004a3b:	01 1b                	add    DWORD PTR [ebx],ebx
9f004a3d:	0c 04                	or     al,0x4
9f004a3f:	04 88                	add    al,0x88
9f004a41:	01 00                	add    DWORD PTR [eax],eax
9f004a43:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004a46:	00 00                	add    BYTE PTR [eax],al
9f004a48:	1c 00                	sbb    al,0x0
9f004a4a:	00 00                	add    BYTE PTR [eax],al
9f004a4c:	24 ec                	and    al,0xec
9f004a4e:	ff                   	(bad)  
9f004a4f:	ff 20                	jmp    DWORD PTR [eax]
9f004a51:	00 00                	add    BYTE PTR [eax],al
9f004a53:	00 00                	add    BYTE PTR [eax],al
9f004a55:	0e                   	push   cs
9f004a56:	08 46 0e             	or     BYTE PTR [esi+0xe],al
9f004a59:	0c 4a                	or     al,0x4a
9f004a5b:	0f 0b                	ud2    
9f004a5d:	74 04                	je     9f004a63 <__x86.get_pc_thunk.cx+0x13cf>
9f004a5f:	78 00                	js     9f004a61 <__x86.get_pc_thunk.cx+0x13cd>
9f004a61:	3f                   	aas    
9f004a62:	1a 3b                	sbb    bh,BYTE PTR [ebx]
9f004a64:	2a 32                	sub    dh,BYTE PTR [edx]
9f004a66:	24 22                	and    al,0x22
9f004a68:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f004a6c <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f004a6c:	01 1b                	add    DWORD PTR [ebx],ebx
9f004a6e:	03 3b                	add    edi,DWORD PTR [ebx]
9f004a70:	28 ec                	sub    ah,ch
9f004a72:	ff                   	(bad)  
9f004a73:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f004a76:	00 00                	add    BYTE PTR [eax],al
9f004a78:	94                   	xchg   esp,eax
9f004a79:	b5 ff                	mov    ch,0xff
9f004a7b:	ff 44 ec ff          	inc    DWORD PTR [esp+ebp*8-0x1]
9f004a7f:	ff cc                	dec    esp
9f004a81:	b5 ff                	mov    ch,0xff
9f004a83:	ff 64 ec ff          	jmp    DWORD PTR [esp+ebp*8-0x1]
9f004a87:	ff 04 b6             	inc    DWORD PTR [esi+esi*4]
9f004a8a:	ff                   	(bad)  
9f004a8b:	ff 98 ec ff ff 59    	call   FWORD PTR [eax+0x59ffffec]
9f004a91:	b6 ff                	mov    dh,0xff
9f004a93:	ff c0                	inc    eax
9f004a95:	ec                   	in     al,dx
9f004a96:	ff                   	(bad)  
9f004a97:	ff b0 b6 ff ff e8    	push   DWORD PTR [eax-0x1700004a]
9f004a9d:	ec                   	in     al,dx
9f004a9e:	ff                   	(bad)  
9f004a9f:	ff 48 b7             	dec    DWORD PTR [eax-0x49]
9f004aa2:	ff                   	(bad)  
9f004aa3:	ff 24 ed ff ff bf b7 	jmp    DWORD PTR [ebp*8-0x48400001]
9f004aaa:	ff                   	(bad)  
9f004aab:	ff 48 ed             	dec    DWORD PTR [eax-0x13]
9f004aae:	ff                   	(bad)  
9f004aaf:	ff                   	(bad)  
9f004ab0:	7a b8                	jp     9f004a6a <__x86.get_pc_thunk.cx+0x13d6>
9f004ab2:	ff                   	(bad)  
9f004ab3:	ff 6c ed ff          	jmp    FWORD PTR [ebp+ebp*8-0x1]
9f004ab7:	ff 35 b9 ff ff 90    	push   DWORD PTR ds:0x90ffffb9
9f004abd:	ed                   	in     eax,dx
9f004abe:	ff                   	(bad)  
9f004abf:	ff 94 b9 ff ff b0 ed 	call   DWORD PTR [ecx+edi*4-0x124f0001]
9f004ac6:	ff                   	(bad)  
9f004ac7:	ff                   	(bad)  
9f004ac8:	3e                   	ds
9f004ac9:	ba ff ff d4 ed       	mov    edx,0xedd4ffff
9f004ace:	ff                   	(bad)  
9f004acf:	ff 00                	inc    DWORD PTR [eax]
9f004ad1:	bc ff ff f8 ed       	mov    esp,0xedf8ffff
9f004ad6:	ff                   	(bad)  
9f004ad7:	ff 2d bc ff ff 1c    	jmp    FWORD PTR ds:0x1cffffbc
9f004add:	ee                   	out    dx,al
9f004ade:	ff                   	(bad)  
9f004adf:	ff 57 bc             	call   DWORD PTR [edi-0x44]
9f004ae2:	ff                   	(bad)  
9f004ae3:	ff 40 ee             	inc    DWORD PTR [eax-0x12]
9f004ae6:	ff                   	(bad)  
9f004ae7:	ff 8c bc ff ff 68 ee 	dec    DWORD PTR [esp+edi*4-0x11970001]
9f004aee:	ff                   	(bad)  
9f004aef:	ff c1                	inc    ecx
9f004af1:	bc ff ff 90 ee       	mov    esp,0xee90ffff
9f004af6:	ff                   	(bad)  
9f004af7:	ff f4                	push   esp
9f004af9:	bc ff ff b4 ee       	mov    esp,0xeeb4ffff
9f004afe:	ff                   	(bad)  
9f004aff:	ff 1a                	call   FWORD PTR [edx]
9f004b01:	bd ff ff d8 ee       	mov    ebp,0xeed8ffff
9f004b06:	ff                   	(bad)  
9f004b07:	ff 5d bd             	call   FWORD PTR [ebp-0x43]
9f004b0a:	ff                   	(bad)  
9f004b0b:	ff                   	(bad)  
9f004b0c:	fc                   	cld    
9f004b0d:	ee                   	out    dx,al
9f004b0e:	ff                   	(bad)  
9f004b0f:	ff a0 bd ff ff 20    	jmp    DWORD PTR [eax+0x20ffffbd]
9f004b15:	ef                   	out    dx,eax
9f004b16:	ff                   	(bad)  
9f004b17:	ff 5c be ff          	call   FWORD PTR [esi+edi*4-0x1]
9f004b1b:	ff 44 ef ff          	inc    DWORD PTR [edi+ebp*8-0x1]
9f004b1f:	ff 96 be ff ff 6c    	call   DWORD PTR [esi+0x6cffffbe]
9f004b25:	ef                   	out    dx,eax
9f004b26:	ff                   	(bad)  
9f004b27:	ff d2                	call   edx
9f004b29:	be ff ff 94 ef       	mov    esi,0xef94ffff
9f004b2e:	ff                   	(bad)  
9f004b2f:	ff 10                	call   DWORD PTR [eax]
9f004b31:	bf ff ff bc ef       	mov    edi,0xefbcffff
9f004b36:	ff                   	(bad)  
9f004b37:	ff 50 bf             	call   DWORD PTR [eax-0x41]
9f004b3a:	ff                   	(bad)  
9f004b3b:	ff e4                	jmp    esp
9f004b3d:	ef                   	out    dx,eax
9f004b3e:	ff                   	(bad)  
9f004b3f:	ff 92 bf ff ff 0c    	call   DWORD PTR [edx+0xcffffbf]
9f004b45:	f0 ff                	lock (bad) 
9f004b47:	ff 51 c0             	call   DWORD PTR [ecx-0x40]
9f004b4a:	ff                   	(bad)  
9f004b4b:	ff 30                	push   DWORD PTR [eax]
9f004b4d:	f0 ff                	lock (bad) 
9f004b4f:	ff 70 c0             	push   DWORD PTR [eax-0x40]
9f004b52:	ff                   	(bad)  
9f004b53:	ff 54 f0 ff          	call   DWORD PTR [eax+esi*8-0x1]
9f004b57:	ff c9                	dec    ecx
9f004b59:	c0 ff ff             	sar    bh,0xff
9f004b5c:	78 f0                	js     9f004b4e <__GNU_EH_FRAME_HDR+0xe2>
9f004b5e:	ff                   	(bad)  
9f004b5f:	ff 22                	jmp    DWORD PTR [edx]
9f004b61:	c1 ff ff             	sar    edi,0xff
9f004b64:	9c                   	pushf  
9f004b65:	f0 ff                	lock (bad) 
9f004b67:	ff 56 c1             	call   DWORD PTR [esi-0x3f]
9f004b6a:	ff                   	(bad)  
9f004b6b:	ff                   	(bad)  
9f004b6c:	bc f0 ff ff 8d       	mov    esp,0x8dfffff0
9f004b71:	c1 ff ff             	sar    edi,0xff
9f004b74:	dc f0                	fdivr  st(0),st
9f004b76:	ff                   	(bad)  
9f004b77:	ff                   	(bad)  
9f004b78:	ff c1                	inc    ecx
9f004b7a:	ff                   	(bad)  
9f004b7b:	ff 04 f1             	inc    DWORD PTR [ecx+esi*8]
9f004b7e:	ff                   	(bad)  
9f004b7f:	ff 1c c2             	call   FWORD PTR [edx+eax*8]
9f004b82:	ff                   	(bad)  
9f004b83:	ff 24 f1             	jmp    DWORD PTR [ecx+esi*8]
9f004b86:	ff                   	(bad)  
9f004b87:	ff 45 c2             	inc    DWORD PTR [ebp-0x3e]
9f004b8a:	ff                   	(bad)  
9f004b8b:	ff 44 f1 ff          	inc    DWORD PTR [ecx+esi*8-0x1]
9f004b8f:	ff 6e c2             	jmp    FWORD PTR [esi-0x3e]
9f004b92:	ff                   	(bad)  
9f004b93:	ff 64 f1 ff          	jmp    DWORD PTR [ecx+esi*8-0x1]
9f004b97:	ff                   	(bad)  
9f004b98:	ba c2 ff ff 84       	mov    edx,0x84ffffc2
9f004b9d:	f1                   	icebp  
9f004b9e:	ff                   	(bad)  
9f004b9f:	ff ae c4 ff ff a8    	jmp    FWORD PTR [esi-0x5700003c]
9f004ba5:	f1                   	icebp  
9f004ba6:	ff                   	(bad)  
9f004ba7:	ff                   	(bad)  
9f004ba8:	fd                   	std    
9f004ba9:	c4                   	(bad)  
9f004baa:	ff                   	(bad)  
9f004bab:	ff c8                	dec    eax
9f004bad:	f1                   	icebp  
9f004bae:	ff                   	(bad)  
9f004baf:	ff 19                	call   FWORD PTR [ecx]
9f004bb1:	c5 ff ff             	(bad)  
9f004bb4:	e8 f1 ff ff 39       	call   d9004baa <ticksToWait+0x39fff732>
9f004bb9:	c5 ff ff             	(bad)  
9f004bbc:	08 f2                	or     dl,dh
9f004bbe:	ff                   	(bad)  
9f004bbf:	ff 59 c5             	call   FWORD PTR [ecx-0x3b]
9f004bc2:	ff                   	(bad)  
9f004bc3:	ff 28                	jmp    FWORD PTR [eax]
9f004bc5:	f2 ff                	repnz (bad) 
9f004bc7:	ff 9d c6 ff ff 48    	call   FWORD PTR [ebp+0x48ffffc6]
9f004bcd:	f2 ff                	repnz (bad) 
9f004bcf:	ff                   	(bad)  
9f004bd0:	bd c6 ff ff 68       	mov    ebp,0x68ffffc6
9f004bd5:	f2 ff                	repnz (bad) 
9f004bd7:	ff 73 c8             	push   DWORD PTR [ebx-0x38]
9f004bda:	ff                   	(bad)  
9f004bdb:	ff 8c f2 ff ff 98 c8 	dec    DWORD PTR [edx+esi*8-0x37670001]
9f004be2:	ff                   	(bad)  
9f004be3:	ff ac f2 ff ff 04 c9 	jmp    FWORD PTR [edx+esi*8-0x36fb0001]
9f004bea:	ff                   	(bad)  
9f004beb:	ff d0                	call   eax
9f004bed:	f2 ff                	repnz (bad) 
9f004bef:	ff 8b c9 ff ff f0    	dec    DWORD PTR [ebx-0xf000037]
9f004bf5:	f2 ff                	repnz (bad) 
9f004bf7:	ff c4                	inc    esp
9f004bf9:	c9                   	leave  
9f004bfa:	ff                   	(bad)  
9f004bfb:	ff 10                	call   DWORD PTR [eax]
9f004bfd:	f3 ff                	repz (bad) 
9f004bff:	ff 98 cb ff ff 34    	call   FWORD PTR [eax+0x34ffffcb]
9f004c05:	f3 ff                	repz (bad) 
9f004c07:	ff                   	(bad)  
9f004c08:	b8 cb ff ff 54       	mov    eax,0x54ffffcb
9f004c0d:	f3 ff                	repz (bad) 
9f004c0f:	ff d3                	call   ebx
9f004c11:	cb                   	retf   
9f004c12:	ff                   	(bad)  
9f004c13:	ff 74 f3 ff          	push   DWORD PTR [ebx+esi*8-0x1]
9f004c17:	ff 08                	dec    DWORD PTR [eax]
9f004c19:	cc                   	int3   
9f004c1a:	ff                   	(bad)  
9f004c1b:	ff 98 f3 ff ff a4    	call   FWORD PTR [eax-0x5b00000d]
9f004c21:	cd ff                	int    0xff
9f004c23:	ff                   	(bad)  
9f004c24:	b8 f3 ff ff 6b       	mov    eax,0x6bfffff3
9f004c29:	ce                   	into   
9f004c2a:	ff                   	(bad)  
9f004c2b:	ff d8                	call   <internal disassembler error>
9f004c2d:	f3 ff                	repz (bad) 
9f004c2f:	ff 8c ce ff ff f8 f3 	dec    DWORD PTR [esi+ecx*8-0xc070001]
9f004c36:	ff                   	(bad)  
9f004c37:	ff                   	(bad)  
9f004c38:	b8 ce ff ff 1c       	mov    eax,0x1cffffce
9f004c3d:	f4                   	hlt    
9f004c3e:	ff                   	(bad)  
9f004c3f:	ff 17                	call   DWORD PTR [edi]
9f004c41:	cf                   	iret   
9f004c42:	ff                   	(bad)  
9f004c43:	ff 40 f4             	inc    DWORD PTR [eax-0xc]
9f004c46:	ff                   	(bad)  
9f004c47:	ff 55 d1             	call   DWORD PTR [ebp-0x2f]
9f004c4a:	ff                   	(bad)  
9f004c4b:	ff 6c f4 ff          	jmp    FWORD PTR [esp+esi*8-0x1]
9f004c4f:	ff 9d d5 ff ff 90    	call   FWORD PTR [ebp-0x6f00002b]
9f004c55:	f4                   	hlt    
9f004c56:	ff                   	(bad)  
9f004c57:	ff d0                	call   eax
9f004c59:	d5 ff                	aad    0xff
9f004c5b:	ff b0 f4 ff ff 54    	push   DWORD PTR [eax+0x54fffff4]
9f004c61:	d6                   	(bad)  
9f004c62:	ff                   	(bad)  
9f004c63:	ff d4                	call   esp
9f004c65:	f4                   	hlt    
9f004c66:	ff                   	(bad)  
9f004c67:	ff 92 d6 ff ff f8    	call   DWORD PTR [edx-0x700002a]
9f004c6d:	f4                   	hlt    
9f004c6e:	ff                   	(bad)  
9f004c6f:	ff d0                	call   eax
9f004c71:	d6                   	(bad)  
9f004c72:	ff                   	(bad)  
9f004c73:	ff 1c f5 ff ff 40 d7 	call   FWORD PTR [esi*8-0x28bf0001]
9f004c7a:	ff                   	(bad)  
9f004c7b:	ff                   	(bad)  
9f004c7c:	3c f5                	cmp    al,0xf5
9f004c7e:	ff                   	(bad)  
9f004c7f:	ff a0 d7 ff ff 64    	jmp    DWORD PTR [eax+0x64ffffd7]
9f004c85:	f5                   	cmc    
9f004c86:	ff                   	(bad)  
9f004c87:	ff e0                	jmp    eax
9f004c89:	d7                   	xlat   BYTE PTR ds:[ebx]
9f004c8a:	ff                   	(bad)  
9f004c8b:	ff 84 f5 ff ff 20 d8 	inc    DWORD PTR [ebp+esi*8-0x27df0001]
9f004c92:	ff                   	(bad)  
9f004c93:	ff a4 f5 ff ff 68 d8 	jmp    DWORD PTR [ebp+esi*8-0x27970001]
9f004c9a:	ff                   	(bad)  
9f004c9b:	ff c4                	inc    esp
9f004c9d:	f5                   	cmc    
9f004c9e:	ff                   	(bad)  
9f004c9f:	ff 98 d8 ff ff e4    	call   FWORD PTR [eax-0x1b000028]
9f004ca5:	f5                   	cmc    
9f004ca6:	ff                   	(bad)  
9f004ca7:	ff f4                	push   esp
9f004ca9:	d8 ff                	fdivr  st,st(7)
9f004cab:	ff 04 f6             	inc    DWORD PTR [esi+esi*8]
9f004cae:	ff                   	(bad)  
9f004caf:	ff 25 d9 ff ff 24    	jmp    DWORD PTR ds:0x24ffffd9
9f004cb5:	f6 ff                	idiv   bh
9f004cb7:	ff 58 d9             	call   FWORD PTR [eax-0x27]
9f004cba:	ff                   	(bad)  
9f004cbb:	ff 44 f6 ff          	inc    DWORD PTR [esi+esi*8-0x1]
9f004cbf:	ff                   	(bad)  
9f004cc0:	bf d9 ff ff 64       	mov    edi,0x64ffffd9
9f004cc5:	f6 ff                	idiv   bh
9f004cc7:	ff 28                	jmp    FWORD PTR [eax]
9f004cc9:	da ff                	(bad)  
9f004ccb:	ff 84 f6 ff ff 88 da 	inc    DWORD PTR [esi+esi*8-0x25770001]
9f004cd2:	ff                   	(bad)  
9f004cd3:	ff a4 f6 ff ff a8 da 	jmp    DWORD PTR [esi+esi*8-0x25570001]
9f004cda:	ff                   	(bad)  
9f004cdb:	ff c4                	inc    esp
9f004cdd:	f6 ff                	idiv   bh
9f004cdf:	ff 28                	jmp    FWORD PTR [eax]
9f004ce1:	dc ff                	fdiv   st(7),st
9f004ce3:	ff f4                	push   esp
9f004ce5:	f6 ff                	idiv   bh
9f004ce7:	ff 48 dc             	dec    DWORD PTR [eax-0x24]
9f004cea:	ff                   	(bad)  
9f004ceb:	ff 14 f7             	call   DWORD PTR [edi+esi*8]
9f004cee:	ff                   	(bad)  
9f004cef:	ff e4                	jmp    esp
9f004cf1:	dd ff                	(bad)  
9f004cf3:	ff 44 f7 ff          	inc    DWORD PTR [edi+esi*8-0x1]
9f004cf7:	ff                   	(bad)  
9f004cf8:	7a de                	jp     9f004cd8 <__GNU_EH_FRAME_HDR+0x26c>
9f004cfa:	ff                   	(bad)  
9f004cfb:	ff 68 f7             	jmp    FWORD PTR [eax-0x9]
9f004cfe:	ff                   	(bad)  
9f004cff:	ff 9c de ff ff 88 f7 	call   FWORD PTR [esi+ebx*8-0x8770001]
9f004d06:	ff                   	(bad)  
9f004d07:	ff 0a                	dec    DWORD PTR [edx]
9f004d09:	df ff                	(bad)  
9f004d0b:	ff b0 f7 ff ff 28    	push   DWORD PTR [eax+0x28fffff7]
9f004d11:	df ff                	(bad)  
9f004d13:	ff d0                	call   eax
9f004d15:	f7 ff                	idiv   edi
9f004d17:	ff 6c df ff          	jmp    FWORD PTR [edi+ebx*8-0x1]
9f004d1b:	ff                   	(bad)  
9f004d1c:	f8                   	clc    
9f004d1d:	f7 ff                	idiv   edi
9f004d1f:	ff 85 e2 ff ff 20    	inc    DWORD PTR [ebp+0x20ffffe2]
9f004d25:	f8                   	clc    
9f004d26:	ff                   	(bad)  
9f004d27:	ff a2 e2 ff ff 40    	jmp    DWORD PTR [edx+0x40ffffe2]
9f004d2d:	f8                   	clc    
9f004d2e:	ff                   	(bad)  
9f004d2f:	ff e1                	jmp    ecx
9f004d31:	e2 ff                	loop   9f004d32 <__GNU_EH_FRAME_HDR+0x2c6>
9f004d33:	ff 64 f8 ff          	jmp    DWORD PTR [eax+edi*8-0x1]
9f004d37:	ff 16                	call   DWORD PTR [esi]
9f004d39:	e3 ff                	jecxz  9f004d3a <__GNU_EH_FRAME_HDR+0x2ce>
9f004d3b:	ff 84 f8 ff ff 33 e3 	inc    DWORD PTR [eax+edi*8-0x1ccc0001]
9f004d42:	ff                   	(bad)  
9f004d43:	ff a4 f8 ff ff 8a eb 	jmp    DWORD PTR [eax+edi*8-0x14750001]
9f004d4a:	ff                   	(bad)  
9f004d4b:	ff d4                	call   esp
9f004d4d:	f8                   	clc    
9f004d4e:	ff                   	(bad)  
9f004d4f:	ff f7                	push   edi
9f004d51:	eb ff                	jmp    9f004d52 <__GNU_EH_FRAME_HDR+0x2e6>
9f004d53:	ff 84 ec ff ff 24 ec 	inc    DWORD PTR [esp+ebp*8-0x13db0001]
9f004d5a:	ff                   	(bad)  
9f004d5b:	ff 10                	call   DWORD PTR [eax]
9f004d5d:	ed                   	in     eax,dx
9f004d5e:	ff                   	(bad)  
9f004d5f:	ff 28                	jmp    FWORD PTR [eax]
9f004d61:	ec                   	in     al,dx
9f004d62:	ff                   	(bad)  
9f004d63:	ff                   	(bad)  
9f004d64:	fc                   	cld    
9f004d65:	f8                   	clc    
9f004d66:	ff                   	(bad)  
9f004d67:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f004d80 <digits.1389-0x3ac>:
9f004d80:	3d 00 53 74 72       	cmp    eax,0x72745300
9f004d85:	65                   	gs
9f004d86:	61                   	popa   
9f004d87:	6d                   	ins    DWORD PTR es:[edi],dx
9f004d88:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f004d8e:	74 20                	je     9f004db0 <__GNU_EH_FRAME_HDR+0x344>
9f004d90:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f004d97:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004d98:	74 65                	je     9f004dff <__GNU_EH_FRAME_HDR+0x393>
9f004d9a:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f004d9d:	00 00                	add    BYTE PTR [eax],al
9f004d9f:	00 2a                	add    BYTE PTR [edx],ch
9f004da1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f004da3:	6c                   	ins    BYTE PTR es:[edi],dx
9f004da4:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f004dab:	74 20                	je     9f004dcd <__GNU_EH_FRAME_HDR+0x361>
9f004dad:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f004db0:	6c                   	ins    BYTE PTR es:[edi],dx
9f004db1:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
9f004db5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f004db7:	00 2a                	add    BYTE PTR [edx],ch
9f004db9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f004dbb:	6c                   	ins    BYTE PTR es:[edi],dx
9f004dbc:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f004dc3:	74 20                	je     9f004de5 <__GNU_EH_FRAME_HDR+0x379>
9f004dc5:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f004dc8:	70 6c                	jo     9f004e36 <__GNU_EH_FRAME_HDR+0x3ca>
9f004dca:	65                   	gs
9f004dcb:	74 65                	je     9f004e32 <__GNU_EH_FRAME_HDR+0x3c6>
9f004dcd:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f004dd0:	6c                   	ins    BYTE PTR es:[edi],dx
9f004dd1:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f004dd8:	74 20                	je     9f004dfa <__GNU_EH_FRAME_HDR+0x38e>
9f004dda:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f004ddd:	6c                   	ins    BYTE PTR es:[edi],dx
9f004dde:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f004de3:	65                   	gs
9f004de4:	76 69                	jbe    9f004e4f <__GNU_EH_FRAME_HDR+0x3e3>
9f004de6:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004de7:	75 73                	jne    9f004e5c <__GNU_EH_FRAME_HDR+0x3f0>
9f004de9:	6c                   	ins    BYTE PTR es:[edi],dx
9f004dea:	79 2c                	jns    9f004e18 <__GNU_EH_FRAME_HDR+0x3ac>
9f004dec:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f004def:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f004df6:	6c 
9f004df7:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f004dfe:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f004e01:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f004e03:	72 20                	jb     9f004e25 <__GNU_EH_FRAME_HDR+0x3b9>
9f004e05:	25 73 0a 00 20       	and    eax,0x20000a73
9f004e0a:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f004e0e:	63 3a                	arpl   WORD PTR [edx],di
9f004e10:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f004e13:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f004e17:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f004e19:	72 20                	jb     9f004e3b <__GNU_EH_FRAME_HDR+0x3cf>
9f004e1b:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f004e20:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f004e27:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f004e2b:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f004e2d:	72 20                	jb     9f004e4f <__GNU_EH_FRAME_HDR+0x3e3>
9f004e2f:	25 73 0a 00 00       	and    eax,0xa73
9f004e34:	68 65 61 70 42       	push   0x42706165
9f004e39:	61                   	popa   
9f004e3a:	73 65                	jae    9f004ea1 <__GNU_EH_FRAME_HDR+0x435>
9f004e3c:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f004e3f:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f004e42:	30 38                	xor    BYTE PTR [eax],bh
9f004e44:	58                   	pop    eax
9f004e45:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f004e4b:	30 38                	xor    BYTE PTR [eax],bh
9f004e4d:	58                   	pop    eax
9f004e4e:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f004e51:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f004e53:	72 65                	jb     9f004eba <__GNU_EH_FRAME_HDR+0x44e>
9f004e55:	0a 00                	or     al,BYTE PTR [eax]
9f004e57:	6d                   	ins    DWORD PTR es:[edi],dx
9f004e58:	61                   	popa   
9f004e59:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e5a:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e5b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004e5c:	63 28                	arpl   WORD PTR [eax],bp
9f004e5e:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f004e61:	30 38                	xor    BYTE PTR [eax],bh
9f004e63:	58                   	pop    eax
9f004e64:	29 0a                	sub    DWORD PTR [edx],ecx
9f004e66:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f004e6a:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f004e6d:	61                   	popa   
9f004e6e:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e6f:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e70:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004e71:	63 3a                	arpl   WORD PTR [edx],di
9f004e73:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f004e76:	65                   	gs
9f004e77:	64                   	fs
9f004e78:	65                   	gs
9f004e79:	64                   	fs
9f004e7a:	3d 30 78 25 30       	cmp    eax,0x30257830
9f004e7f:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f004e82:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f004e86:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f004e89:	61                   	popa   
9f004e8a:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e8b:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e8c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004e8d:	63 3a                	arpl   WORD PTR [edx],di
9f004e8f:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f004e92:	61                   	popa   
9f004e93:	45                   	inc    ebp
9f004e94:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004e95:	64                   	fs
9f004e96:	3d 30 78 25 30       	cmp    eax,0x30257830
9f004e9b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f004e9e:	00 00                	add    BYTE PTR [eax],al
9f004ea0:	6c                   	ins    BYTE PTR es:[edi],dx
9f004ea1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f004ea8:	6c                   	ins    BYTE PTR es:[edi],dx
9f004ea9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004eaa:	63 3a                	arpl   WORD PTR [edx],di
9f004eac:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f004eaf:	71 20                	jno    9f004ed1 <__GNU_EH_FRAME_HDR+0x465>
9f004eb1:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f004eb4:	30 38                	xor    BYTE PTR [eax],bh
9f004eb6:	58                   	pop    eax
9f004eb7:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f004eba:	74 65                	je     9f004f21 <__GNU_EH_FRAME_HDR+0x4b5>
9f004ebc:	73 2c                	jae    9f004eea <__GNU_EH_FRAME_HDR+0x47e>
9f004ebe:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f004ec1:	74 20                	je     9f004ee3 <__GNU_EH_FRAME_HDR+0x477>
9f004ec3:	77 61                	ja     9f004f26 <__GNU_EH_FRAME_HDR+0x4ba>
9f004ec5:	73 20                	jae    9f004ee7 <__GNU_EH_FRAME_HDR+0x47b>
9f004ec7:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f004eca:	30 38                	xor    BYTE PTR [eax],bh
9f004ecc:	58                   	pop    eax
9f004ecd:	2c 20                	sub    al,0x20
9f004ecf:	68 65 61 70 45       	push   0x45706165
9f004ed4:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004ed5:	64                   	fs
9f004ed6:	3d 30 78 25 30       	cmp    eax,0x30257830
9f004edb:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f004ede:	00 00                	add    BYTE PTR [eax],al
9f004ee0:	6c                   	ins    BYTE PTR es:[edi],dx
9f004ee1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f004ee8:	6c                   	ins    BYTE PTR es:[edi],dx
9f004ee9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004eea:	63 3a                	arpl   WORD PTR [edx],di
9f004eec:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f004eef:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f004ef6:	65 
9f004ef7:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f004efb:	61                   	popa   
9f004efc:	70 43                	jo     9f004f41 <__GNU_EH_FRAME_HDR+0x4d5>
9f004efe:	75 72                	jne    9f004f72 <__GNU_EH_FRAME_HDR+0x506>
9f004f00:	72 20                	jb     9f004f22 <__GNU_EH_FRAME_HDR+0x4b6>
9f004f02:	61                   	popa   
9f004f03:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004f04:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f004f08:	61                   	popa   
9f004f09:	70 42                	jo     9f004f4d <__GNU_EH_FRAME_HDR+0x4e1>
9f004f0b:	61                   	popa   
9f004f0c:	73 65                	jae    9f004f73 <__GNU_EH_FRAME_HDR+0x507>
9f004f0e:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f004f12:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f004f15:	30 38                	xor    BYTE PTR [eax],bh
9f004f17:	58                   	pop    eax
9f004f18:	0a 00                	or     al,BYTE PTR [eax]
9f004f1a:	00 00                	add    BYTE PTR [eax],al
9f004f1c:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f1d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f004f24:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f25:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004f26:	63 3a                	arpl   WORD PTR [edx],di
9f004f28:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f004f2b:	61                   	popa   
9f004f2c:	74 69                	je     9f004f97 <__GNU_EH_FRAME_HDR+0x52b>
9f004f2e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004f2f:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f004f33:	61                   	popa   
9f004f34:	70 20                	jo     9f004f56 <__GNU_EH_FRAME_HDR+0x4ea>
9f004f36:	72 65                	jb     9f004f9d <__GNU_EH_FRAME_HDR+0x531>
9f004f38:	63 20                	arpl   WORD PTR [eax],sp
9f004f3a:	40                   	inc    eax
9f004f3b:	20 30                	and    BYTE PTR [eax],dh
9f004f3d:	78 25                	js     9f004f64 <__GNU_EH_FRAME_HDR+0x4f8>
9f004f3f:	30 38                	xor    BYTE PTR [eax],bh
9f004f41:	58                   	pop    eax
9f004f42:	0a 00                	or     al,BYTE PTR [eax]
9f004f44:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f45:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f004f4c:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f4d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004f4e:	63 3a                	arpl   WORD PTR [edx],di
9f004f50:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f004f53:	61                   	popa   
9f004f54:	70 43                	jo     9f004f99 <__GNU_EH_FRAME_HDR+0x52d>
9f004f56:	75 72                	jne    9f004fca <__GNU_EH_FRAME_HDR+0x55e>
9f004f58:	72 3d                	jb     9f004f97 <__GNU_EH_FRAME_HDR+0x52b>
9f004f5a:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f004f5d:	30 38                	xor    BYTE PTR [eax],bh
9f004f5f:	58                   	pop    eax
9f004f60:	2c 20                	sub    al,0x20
9f004f62:	73 69                	jae    9f004fcd <__GNU_EH_FRAME_HDR+0x561>
9f004f64:	7a 65                	jp     9f004fcb <__GNU_EH_FRAME_HDR+0x55f>
9f004f66:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004f67:	66                   	data16
9f004f68:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
9f004f6b:	61                   	popa   
9f004f6c:	70 72                	jo     9f004fe0 <__GNU_EH_FRAME_HDR+0x574>
9f004f6e:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
9f004f72:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
9f004f78:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f004f7b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f004f7e:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f7f:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f80:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004f81:	63 3a                	arpl   WORD PTR [edx],di
9f004f83:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f004f86:	74 75                	je     9f004ffd <__GNU_EH_FRAME_HDR+0x591>
9f004f88:	72 6e                	jb     9f004ff8 <__GNU_EH_FRAME_HDR+0x58c>
9f004f8a:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f004f91:	30 38                	xor    BYTE PTR [eax],bh
9f004f93:	58                   	pop    eax
9f004f94:	0a 00                	or     al,BYTE PTR [eax]
9f004f96:	00 00                	add    BYTE PTR [eax],al
9f004f98:	1d c8 ff ff 2f       	sbb    eax,0x2fffffc8
9f004f9d:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fa1:	c8 ff ff 23          	enter  0xffff,0x23
9f004fa5:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fa9:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fad:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fb1:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fb5:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fb9:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fbd:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fc1:	c8 ff ff 17          	enter  0xffff,0x17
9f004fc5:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fc9:	c8 ff ff 11          	enter  0xffff,0x11
9f004fcd:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fd1:	c8 ff ff 2f          	enter  0xffff,0x2f
9f004fd5:	c8 ff ff 29          	enter  0xffff,0x29
9f004fd9:	c8 ff ff ce          	enter  0xffff,0xce
9f004fdd:	ca ff ff             	retf   0xffff
9f004fe0:	fb                   	sti    
9f004fe1:	ca ff ff             	retf   0xffff
9f004fe4:	fb                   	sti    
9f004fe5:	ca ff ff             	retf   0xffff
9f004fe8:	fb                   	sti    
9f004fe9:	ca ff ff             	retf   0xffff
9f004fec:	fb                   	sti    
9f004fed:	ca ff ff             	retf   0xffff
9f004ff0:	fb                   	sti    
9f004ff1:	ca ff ff             	retf   0xffff
9f004ff4:	fb                   	sti    
9f004ff5:	ca ff ff             	retf   0xffff
9f004ff8:	fb                   	sti    
9f004ff9:	ca ff ff             	retf   0xffff
9f004ffc:	fb                   	sti    
9f004ffd:	ca ff ff             	retf   0xffff
9f005000:	fb                   	sti    
9f005001:	ca ff ff             	retf   0xffff
9f005004:	fb                   	sti    
9f005005:	ca ff ff             	retf   0xffff
9f005008:	fb                   	sti    
9f005009:	ca ff ff             	retf   0xffff
9f00500c:	fb                   	sti    
9f00500d:	ca ff ff             	retf   0xffff
9f005010:	fb                   	sti    
9f005011:	ca ff ff             	retf   0xffff
9f005014:	fb                   	sti    
9f005015:	ca ff ff             	retf   0xffff
9f005018:	fb                   	sti    
9f005019:	ca ff ff             	retf   0xffff
9f00501c:	fb                   	sti    
9f00501d:	ca ff ff             	retf   0xffff
9f005020:	fb                   	sti    
9f005021:	ca ff ff             	retf   0xffff
9f005024:	fb                   	sti    
9f005025:	ca ff ff             	retf   0xffff
9f005028:	fb                   	sti    
9f005029:	ca ff ff             	retf   0xffff
9f00502c:	fb                   	sti    
9f00502d:	ca ff ff             	retf   0xffff
9f005030:	fb                   	sti    
9f005031:	ca ff ff             	retf   0xffff
9f005034:	fb                   	sti    
9f005035:	ca ff ff             	retf   0xffff
9f005038:	fb                   	sti    
9f005039:	ca ff ff             	retf   0xffff
9f00503c:	fb                   	sti    
9f00503d:	ca ff ff             	retf   0xffff
9f005040:	fb                   	sti    
9f005041:	ca ff ff             	retf   0xffff
9f005044:	fb                   	sti    
9f005045:	ca ff ff             	retf   0xffff
9f005048:	fb                   	sti    
9f005049:	ca ff ff             	retf   0xffff
9f00504c:	fb                   	sti    
9f00504d:	ca ff ff             	retf   0xffff
9f005050:	fb                   	sti    
9f005051:	ca ff ff             	retf   0xffff
9f005054:	fb                   	sti    
9f005055:	ca ff ff             	retf   0xffff
9f005058:	fb                   	sti    
9f005059:	ca ff ff             	retf   0xffff
9f00505c:	fb                   	sti    
9f00505d:	ca ff ff             	retf   0xffff
9f005060:	fb                   	sti    
9f005061:	ca ff ff             	retf   0xffff
9f005064:	fb                   	sti    
9f005065:	ca ff ff             	retf   0xffff
9f005068:	fb                   	sti    
9f005069:	ca ff ff             	retf   0xffff
9f00506c:	fb                   	sti    
9f00506d:	ca ff ff             	retf   0xffff
9f005070:	fb                   	sti    
9f005071:	ca ff ff             	retf   0xffff
9f005074:	fb                   	sti    
9f005075:	ca ff ff             	retf   0xffff
9f005078:	fb                   	sti    
9f005079:	ca ff ff             	retf   0xffff
9f00507c:	fb                   	sti    
9f00507d:	ca ff ff             	retf   0xffff
9f005080:	fb                   	sti    
9f005081:	ca ff ff             	retf   0xffff
9f005084:	fb                   	sti    
9f005085:	ca ff ff             	retf   0xffff
9f005088:	fb                   	sti    
9f005089:	ca ff ff             	retf   0xffff
9f00508c:	fb                   	sti    
9f00508d:	ca ff ff             	retf   0xffff
9f005090:	fb                   	sti    
9f005091:	ca ff ff             	retf   0xffff
9f005094:	fb                   	sti    
9f005095:	ca ff ff             	retf   0xffff
9f005098:	fb                   	sti    
9f005099:	ca ff ff             	retf   0xffff
9f00509c:	fb                   	sti    
9f00509d:	ca ff ff             	retf   0xffff
9f0050a0:	fb                   	sti    
9f0050a1:	ca ff ff             	retf   0xffff
9f0050a4:	fb                   	sti    
9f0050a5:	ca ff ff             	retf   0xffff
9f0050a8:	ec                   	in     al,dx
9f0050a9:	ca ff ff             	retf   0xffff
9f0050ac:	fb                   	sti    
9f0050ad:	ca ff ff             	retf   0xffff
9f0050b0:	fb                   	sti    
9f0050b1:	ca ff ff             	retf   0xffff
9f0050b4:	fb                   	sti    
9f0050b5:	ca ff ff             	retf   0xffff
9f0050b8:	fb                   	sti    
9f0050b9:	ca ff ff             	retf   0xffff
9f0050bc:	fb                   	sti    
9f0050bd:	ca ff ff             	retf   0xffff
9f0050c0:	fb                   	sti    
9f0050c1:	ca ff ff             	retf   0xffff
9f0050c4:	fb                   	sti    
9f0050c5:	ca ff ff             	retf   0xffff
9f0050c8:	fb                   	sti    
9f0050c9:	ca ff ff             	retf   0xffff
9f0050cc:	fb                   	sti    
9f0050cd:	ca ff ff             	retf   0xffff
9f0050d0:	fb                   	sti    
9f0050d1:	ca ff ff             	retf   0xffff
9f0050d4:	54                   	push   esp
9f0050d5:	c9                   	leave  
9f0050d6:	ff                   	(bad)  
9f0050d7:	ff f5                	push   ebp
9f0050d9:	ca ff ff             	retf   0xffff
9f0050dc:	fb                   	sti    
9f0050dd:	ca ff ff             	retf   0xffff
9f0050e0:	fb                   	sti    
9f0050e1:	ca ff ff             	retf   0xffff
9f0050e4:	fb                   	sti    
9f0050e5:	ca ff ff             	retf   0xffff
9f0050e8:	fb                   	sti    
9f0050e9:	ca ff ff             	retf   0xffff
9f0050ec:	f5                   	cmc    
9f0050ed:	ca ff ff             	retf   0xffff
9f0050f0:	fb                   	sti    
9f0050f1:	ca ff ff             	retf   0xffff
9f0050f4:	fb                   	sti    
9f0050f5:	ca ff ff             	retf   0xffff
9f0050f8:	fb                   	sti    
9f0050f9:	ca ff ff             	retf   0xffff
9f0050fc:	fb                   	sti    
9f0050fd:	ca ff ff             	retf   0xffff
9f005100:	88 ca                	mov    dl,cl
9f005102:	ff                   	(bad)  
9f005103:	ff df                	call   <internal disassembler error>
9f005105:	ca ff ff             	retf   0xffff
9f005108:	4a                   	dec    edx
9f005109:	ca ff ff             	retf   0xffff
9f00510c:	fb                   	sti    
9f00510d:	ca ff ff             	retf   0xffff
9f005110:	fb                   	sti    
9f005111:	ca ff ff             	retf   0xffff
9f005114:	a9 c9 ff ff fb       	test   eax,0xfbffffc9
9f005119:	ca ff ff             	retf   0xffff
9f00511c:	35 cb ff ff fb       	xor    eax,0xfbffffcb
9f005121:	ca ff ff             	retf   0xffff
9f005124:	fb                   	sti    
9f005125:	ca ff ff             	retf   0xffff
9f005128:	e8 ca ff ff 30       	call   d00050f7 <ticksToWait+0x30fffc7f>

9f00512c <digits.1389>:
9f00512c:	30 31                	xor    BYTE PTR [ecx],dh
9f00512e:	32 33                	xor    dh,BYTE PTR [ebx]
9f005130:	34 35                	xor    al,0x35
9f005132:	36                   	ss
9f005133:	37                   	aaa    
9f005134:	38 39                	cmp    BYTE PTR [ecx],bh
9f005136:	41                   	inc    ecx
9f005137:	42                   	inc    edx
9f005138:	43                   	inc    ebx
9f005139:	44                   	inc    esp
9f00513a:	45                   	inc    ebp
9f00513b:	46                   	inc    esi
9f00513c:	00 00                	add    BYTE PTR [eax],al
9f00513e:	00 00                	add    BYTE PTR [eax],al
9f005140:	47                   	inc    edi
9f005141:	4d                   	dec    ebp
9f005142:	54                   	push   esp
	...

9f005160 <_ytab>:
9f005160:	1f                   	pop    ds
9f005161:	00 00                	add    BYTE PTR [eax],al
9f005163:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005166:	00 00                	add    BYTE PTR [eax],al
9f005168:	1f                   	pop    ds
9f005169:	00 00                	add    BYTE PTR [eax],al
9f00516b:	00 1e                	add    BYTE PTR [esi],bl
9f00516d:	00 00                	add    BYTE PTR [eax],al
9f00516f:	00 1f                	add    BYTE PTR [edi],bl
9f005171:	00 00                	add    BYTE PTR [eax],al
9f005173:	00 1e                	add    BYTE PTR [esi],bl
9f005175:	00 00                	add    BYTE PTR [eax],al
9f005177:	00 1f                	add    BYTE PTR [edi],bl
9f005179:	00 00                	add    BYTE PTR [eax],al
9f00517b:	00 1f                	add    BYTE PTR [edi],bl
9f00517d:	00 00                	add    BYTE PTR [eax],al
9f00517f:	00 1e                	add    BYTE PTR [esi],bl
9f005181:	00 00                	add    BYTE PTR [eax],al
9f005183:	00 1f                	add    BYTE PTR [edi],bl
9f005185:	00 00                	add    BYTE PTR [eax],al
9f005187:	00 1e                	add    BYTE PTR [esi],bl
9f005189:	00 00                	add    BYTE PTR [eax],al
9f00518b:	00 1f                	add    BYTE PTR [edi],bl
9f00518d:	00 00                	add    BYTE PTR [eax],al
9f00518f:	00 1f                	add    BYTE PTR [edi],bl
9f005191:	00 00                	add    BYTE PTR [eax],al
9f005193:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f005199:	00 00                	add    BYTE PTR [eax],al
9f00519b:	00 1e                	add    BYTE PTR [esi],bl
9f00519d:	00 00                	add    BYTE PTR [eax],al
9f00519f:	00 1f                	add    BYTE PTR [edi],bl
9f0051a1:	00 00                	add    BYTE PTR [eax],al
9f0051a3:	00 1e                	add    BYTE PTR [esi],bl
9f0051a5:	00 00                	add    BYTE PTR [eax],al
9f0051a7:	00 1f                	add    BYTE PTR [edi],bl
9f0051a9:	00 00                	add    BYTE PTR [eax],al
9f0051ab:	00 1f                	add    BYTE PTR [edi],bl
9f0051ad:	00 00                	add    BYTE PTR [eax],al
9f0051af:	00 1e                	add    BYTE PTR [esi],bl
9f0051b1:	00 00                	add    BYTE PTR [eax],al
9f0051b3:	00 1f                	add    BYTE PTR [edi],bl
9f0051b5:	00 00                	add    BYTE PTR [eax],al
9f0051b7:	00 1e                	add    BYTE PTR [esi],bl
9f0051b9:	00 00                	add    BYTE PTR [eax],al
9f0051bb:	00 1f                	add    BYTE PTR [edi],bl
9f0051bd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f0051c0 <.rel.dyn>:
9f0051c0:	04 54                	add    al,0x54
9f0051c2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f0051c8:	08 54 00 9f          	or     BYTE PTR [eax+eax*1-0x61],dl
9f0051cc:	08 00                	or     BYTE PTR [eax],al
9f0051ce:	00 00                	add    BYTE PTR [eax],al
9f0051d0:	0c 54                	or     al,0x54
9f0051d2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f0051d8:	10 54 00 9f          	adc    BYTE PTR [eax+eax*1-0x61],dl
9f0051dc:	08 00                	or     BYTE PTR [eax],al
9f0051de:	00 00                	add    BYTE PTR [eax],al
9f0051e0:	14 54                	adc    al,0x54
9f0051e2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f0051e8:	18 54 00 9f          	sbb    BYTE PTR [eax+eax*1-0x61],dl
9f0051ec:	08 00                	or     BYTE PTR [eax],al
9f0051ee:	00 00                	add    BYTE PTR [eax],al
9f0051f0:	30 54 00 9f          	xor    BYTE PTR [eax+eax*1-0x61],dl
9f0051f4:	08 00                	or     BYTE PTR [eax],al
9f0051f6:	00 00                	add    BYTE PTR [eax],al
9f0051f8:	34 54                	xor    al,0x54
9f0051fa:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005200:	38 54 00 9f          	cmp    BYTE PTR [eax+eax*1-0x61],dl
9f005204:	08 00                	or     BYTE PTR [eax],al
9f005206:	00 00                	add    BYTE PTR [eax],al
9f005208:	7e 07                	jle    9f005211 <_ytab+0xb1>
9f00520a:	00 9f 02 23 00 00    	add    BYTE PTR [edi+0x2302],bl
9f005210:	be 07 00 9f 02       	mov    esi,0x29f0007
9f005215:	23 00                	and    eax,DWORD PTR [eax]
9f005217:	00 e7                	add    bh,ah
9f005219:	07                   	pop    es
9f00521a:	00 9f 02 23 00 00    	add    BYTE PTR [edi+0x2302],bl
9f005220:	00 08                	add    BYTE PTR [eax],cl
9f005222:	00 9f 02 23 00 00    	add    BYTE PTR [edi+0x2302],bl
9f005228:	58                   	pop    eax
9f005229:	08 00                	or     BYTE PTR [eax],al
9f00522b:	9f                   	lahf   
9f00522c:	02 23                	add    ah,BYTE PTR [ebx]
9f00522e:	00 00                	add    BYTE PTR [eax],al
9f005230:	bb 08 00 9f 02       	mov    ebx,0x29f0008
9f005235:	23 00                	and    eax,DWORD PTR [eax]
9f005237:	00 f1                	add    cl,dh
9f005239:	08 00                	or     BYTE PTR [eax],al
9f00523b:	9f                   	lahf   
9f00523c:	02 23                	add    ah,BYTE PTR [ebx]
9f00523e:	00 00                	add    BYTE PTR [eax],al
9f005240:	2d 09 00 9f 02       	sub    eax,0x29f0009
9f005245:	23 00                	and    eax,DWORD PTR [eax]
9f005247:	00 6b 09             	add    BYTE PTR [ebx+0x9],ch
9f00524a:	00 9f 02 23 00 00    	add    BYTE PTR [edi+0x2302],bl
9f005250:	ab                   	stos   DWORD PTR es:[edi],eax
9f005251:	09 00                	or     DWORD PTR [eax],eax
9f005253:	9f                   	lahf   
9f005254:	02 23                	add    ah,BYTE PTR [ebx]
9f005256:	00 00                	add    BYTE PTR [eax],al
9f005258:	ed                   	in     eax,dx
9f005259:	09 00                	or     DWORD PTR [eax],eax
9f00525b:	9f                   	lahf   
9f00525c:	02 23                	add    ah,BYTE PTR [ebx]
9f00525e:	00 00                	add    BYTE PTR [eax],al
9f005260:	2b 0c 00             	sub    ecx,DWORD PTR [eax+eax*1]
9f005263:	9f                   	lahf   
9f005264:	02 23                	add    ah,BYTE PTR [ebx]
9f005266:	00 00                	add    BYTE PTR [eax],al
9f005268:	58                   	pop    eax
9f005269:	0c 00                	or     al,0x0
9f00526b:	9f                   	lahf   
9f00526c:	02 23                	add    ah,BYTE PTR [ebx]
9f00526e:	00 00                	add    BYTE PTR [eax],al
9f005270:	ce                   	into   
9f005271:	0c 00                	or     al,0x0
9f005273:	9f                   	lahf   
9f005274:	02 23                	add    ah,BYTE PTR [ebx]
9f005276:	00 00                	add    BYTE PTR [eax],al
9f005278:	c7                   	(bad)  
9f005279:	29 00                	sub    DWORD PTR [eax],eax
9f00527b:	9f                   	lahf   
9f00527c:	02 23                	add    ah,BYTE PTR [ebx]
9f00527e:	00 00                	add    BYTE PTR [eax],al
9f005280:	2f                   	das    
9f005281:	36 00 9f 02 23 00 00 	add    BYTE PTR ss:[edi+0x2302],bl
9f005288:	2c 54                	sub    al,0x54
9f00528a:	00 9f 01 13 00 00    	add    BYTE PTR [edi+0x1301],bl
9f005290:	28 54 00 9f          	sub    BYTE PTR [eax+eax*1-0x61],dl
9f005294:	07                   	pop    es
9f005295:	11 00                	adc    DWORD PTR [eax],eax
	...

Disassembly of section .data:

9f0052a0 <console_node>:
9f0052a0:	01 00                	add    DWORD PTR [eax],eax
	...

9f0052e0 <rcsid>:
9f0052e0:	24 48                	and    al,0x48
9f0052e2:	65                   	gs
9f0052e3:	61                   	popa   
9f0052e4:	64                   	fs
9f0052e5:	65                   	gs
9f0052e6:	72 3a                	jb     9f005322 <rcsid+0x42>
9f0052e8:	20 2f                	and    BYTE PTR [edi],ch
9f0052ea:	75 73                	jne    9f00535f <_DYNAMIC+0x13>
9f0052ec:	65                   	gs
9f0052ed:	72 36                	jb     9f005325 <rcsid+0x45>
9f0052ef:	2f                   	das    
9f0052f0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0052f1:	75 73                	jne    9f005366 <_DYNAMIC+0x1a>
9f0052f3:	74 65                	je     9f00535a <_DYNAMIC+0xe>
9f0052f5:	72 2f                	jb     9f005326 <rcsid+0x46>
9f0052f7:	74 63                	je     9f00535c <_DYNAMIC+0x10>
9f0052f9:	6c                   	ins    BYTE PTR es:[edi],dx
9f0052fa:	2f                   	das    
9f0052fb:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f0052fe:	70 61                	jo     9f005361 <_DYNAMIC+0x15>
9f005300:	74 2f                	je     9f005331 <rcsid+0x51>
9f005302:	52                   	push   edx
9f005303:	43                   	inc    ebx
9f005304:	53                   	push   ebx
9f005305:	2f                   	das    
9f005306:	73 74                	jae    9f00537c <_DYNAMIC+0x30>
9f005308:	72 73                	jb     9f00537d <_DYNAMIC+0x31>
9f00530a:	74 72                	je     9f00537e <_DYNAMIC+0x32>
9f00530c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f005310:	20 31                	and    BYTE PTR [ecx],dh
9f005312:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f005315:	39 33                	cmp    DWORD PTR [ebx],esi
9f005317:	2f                   	das    
9f005318:	30 33                	xor    BYTE PTR [ebx],dh
9f00531a:	2f                   	das    
9f00531b:	31 39                	xor    DWORD PTR [ecx],edi
9f00531d:	20 31                	and    BYTE PTR [ecx],dh
9f00531f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f005324:	34 30                	xor    al,0x30
9f005326:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f005329:	73 74                	jae    9f00539f <_DYNAMIC+0x53>
9f00532b:	65                   	gs
9f00532c:	72 20                	jb     9f00534e <_DYNAMIC+0x2>
9f00532e:	45                   	inc    ebp
9f00532f:	78 70                	js     9f0053a1 <_DYNAMIC+0x55>
9f005331:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f005334:	53                   	push   ebx
9f005335:	50                   	push   eax
9f005336:	52                   	push   edx
9f005337:	49                   	dec    ecx
9f005338:	54                   	push   esp
9f005339:	45                   	inc    ebp
9f00533a:	20 28                	and    BYTE PTR [eax],ch
9f00533c:	42                   	inc    edx
9f00533d:	65                   	gs
9f00533e:	72 6b                	jb     9f0053ab <_DYNAMIC+0x5f>
9f005340:	65                   	gs
9f005341:	6c                   	ins    BYTE PTR es:[edi],dx
9f005342:	65                   	gs
9f005343:	79 29                	jns    9f00536e <_DYNAMIC+0x22>
9f005345:	00 00                	add    BYTE PTR [eax],al
	...

9f005348 <_daylight>:
9f005348:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f00534c <_DYNAMIC>:
9f00534c:	19 00                	sbb    DWORD PTR [eax],eax
9f00534e:	00 00                	add    BYTE PTR [eax],al
9f005350:	2c 54                	sub    al,0x54
9f005352:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f005358:	04 00                	add    al,0x0
9f00535a:	00 00                	add    BYTE PTR [eax],al
9f00535c:	1a 00                	sbb    al,BYTE PTR [eax]
9f00535e:	00 00                	add    BYTE PTR [eax],al
9f005360:	30 54 00 9f          	xor    BYTE PTR [eax+eax*1-0x61],dl
9f005364:	1c 00                	sbb    al,0x0
9f005366:	00 00                	add    BYTE PTR [eax],al
9f005368:	04 00                	add    al,0x0
9f00536a:	00 00                	add    BYTE PTR [eax],al
9f00536c:	04 00                	add    al,0x0
9f00536e:	00 00                	add    BYTE PTR [eax],al
9f005370:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005371:	48                   	dec    eax
9f005372:	00 9f 05 00 00 00    	add    BYTE PTR [edi+0x5],bl
9f005378:	0c 47                	or     al,0x47
9f00537a:	00 9f 06 00 00 00    	add    BYTE PTR [edi+0x6],bl
9f005380:	7c 43                	jl     9f0053c5 <_DYNAMIC+0x79>
9f005382:	00 9f 0a 00 00 00    	add    BYTE PTR [edi+0xa],bl
9f005388:	9d                   	popf   
9f005389:	01 00                	add    DWORD PTR [eax],eax
9f00538b:	00 0b                	add    BYTE PTR [ebx],cl
9f00538d:	00 00                	add    BYTE PTR [eax],al
9f00538f:	00 10                	add    BYTE PTR [eax],dl
9f005391:	00 00                	add    BYTE PTR [eax],al
9f005393:	00 03                	add    BYTE PTR [ebx],al
9f005395:	00 00                	add    BYTE PTR [eax],al
9f005397:	00 1c 54             	add    BYTE PTR [esp+edx*2],bl
9f00539a:	00 9f 02 00 00 00    	add    BYTE PTR [edi+0x2],bl
9f0053a0:	08 00                	or     BYTE PTR [eax],al
9f0053a2:	00 00                	add    BYTE PTR [eax],al
9f0053a4:	14 00                	adc    al,0x0
9f0053a6:	00 00                	add    BYTE PTR [eax],al
9f0053a8:	11 00                	adc    DWORD PTR [eax],eax
9f0053aa:	00 00                	add    BYTE PTR [eax],al
9f0053ac:	17                   	pop    ss
9f0053ad:	00 00                	add    BYTE PTR [eax],al
9f0053af:	00 90 52 00 9f 11    	add    BYTE PTR [eax+0x119f0052],dl
9f0053b5:	00 00                	add    BYTE PTR [eax],al
9f0053b7:	00 c0                	add    al,al
9f0053b9:	51                   	push   ecx
9f0053ba:	00 9f 12 00 00 00    	add    BYTE PTR [edi+0x12],bl
9f0053c0:	d0 00                	rol    BYTE PTR [eax],1
9f0053c2:	00 00                	add    BYTE PTR [eax],al
9f0053c4:	13 00                	adc    eax,DWORD PTR [eax]
9f0053c6:	00 00                	add    BYTE PTR [eax],al
9f0053c8:	08 00                	or     BYTE PTR [eax],al
9f0053ca:	00 00                	add    BYTE PTR [eax],al
9f0053cc:	16                   	push   ss
9f0053cd:	00 00                	add    BYTE PTR [eax],al
9f0053cf:	00 00                	add    BYTE PTR [eax],al
9f0053d1:	00 00                	add    BYTE PTR [eax],al
9f0053d3:	00 fa                	add    dl,bh
9f0053d5:	ff                   	(bad)  
9f0053d6:	ff 6f 09             	jmp    FWORD PTR [edi+0x9]
	...

Disassembly of section .got:

9f005404 <.got>:
9f005404:	3c 54                	cmp    al,0x54
9f005406:	00 9f 58 54 00 9f    	add    BYTE PTR [edi-0x60ffaba8],bl
9f00540c:	40                   	inc    eax
9f00540d:	54                   	push   esp
9f00540e:	00 9f 44 54 00 9f    	add    BYTE PTR [edi-0x60ffabbc],bl
9f005414:	48                   	dec    eax
9f005415:	54                   	push   esp
9f005416:	00 9f 4c 54 00 9f    	add    BYTE PTR [edi-0x60ffabb4],bl

Disassembly of section .got.plt:

9f00541c <_GLOBAL_OFFSET_TABLE_>:
9f00541c:	4c                   	dec    esp
9f00541d:	53                   	push   ebx
9f00541e:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f005424:	00 00                	add    BYTE PTR [eax],al
9f005426:	00 00                	add    BYTE PTR [eax],al
9f005428:	86 36                	xchg   BYTE PTR [esi],dh
9f00542a:	00                   	.byte 0x0
9f00542b:	9f                   	lahf   

Disassembly of section .init_array:

9f00542c <.init_array>:
9f00542c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f005430 <.fini_array>:
9f005430:	bd                   	.byte 0xbd
9f005431:	0a 00                	or     al,BYTE PTR [eax]
9f005433:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f005434 <_tzname>:
9f005434:	40                   	inc    eax
9f005435:	51                   	push   ecx
9f005436:	00 9f 40 51 00 9f    	add    BYTE PTR [edi-0x60ffaec0],bl

Disassembly of section .bss:

9f00543c <heapEnd>:
9f00543c:	00 00                	add    BYTE PTR [eax],al
	...

9f005440 <heapBase>:
9f005440:	00 00                	add    BYTE PTR [eax],al
	...

9f005444 <heapCurr>:
9f005444:	00 00                	add    BYTE PTR [eax],al
	...

9f005448 <processEnvp>:
9f005448:	00 00                	add    BYTE PTR [eax],al
	...

9f00544c <libcTZ>:
9f00544c:	00 00                	add    BYTE PTR [eax],al
	...

9f005450 <lasts.1384>:
9f005450:	00 00                	add    BYTE PTR [eax],al
	...

9f005454 <libcInitialized>:
9f005454:	00 00                	add    BYTE PTR [eax],al
	...

9f005458 <printBuffer>:
9f005458:	00 00                	add    BYTE PTR [eax],al
	...

9f00545c <fops>:
	...

9f005464 <console_file>:
	...

9f005474 <_dstbias>:
9f005474:	00 00                	add    BYTE PTR [eax],al
	...

9f005478 <ticksToWait>:
9f005478:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	5f                   	pop    edi
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	f4                   	hlt    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c b8             	add    BYTE PTR [eax+edi*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 72 00             	add    BYTE PTR [edx+0x0],dh
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	64 00 00             	add    BYTE PTR fs:[eax],al
      2b:	00 02                	add    BYTE PTR [edx],al
      2d:	01 06                	add    DWORD PTR [esi],eax
      2f:	5d                   	pop    ebp
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
      4d:	00 00                	add    BYTE PTR [eax],al
      4f:	02 02                	add    al,BYTE PTR [edx]
      51:	07                   	pop    es
      52:	0e                   	push   cs
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
      5d:	61                   	popa   
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	3e 00 00             	add    BYTE PTR ds:[eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	34 00                	xor    al,0x0
      6d:	00 00                	add    BYTE PTR [eax],al
      6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
      76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
      79:	9b                   	fwait
      7a:	00 00                	add    BYTE PTR [eax],al
      7c:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
      82:	00 06                	add    BYTE PTR [esi],al
      84:	25 00 00 00 02       	and    eax,0x2000000
      89:	01 02                	add    DWORD PTR [edx],eax
      8b:	95                   	xchg   ebp,eax
      8c:	00 00                	add    BYTE PTR [eax],al
      8e:	00 02                	add    BYTE PTR [edx],al
      90:	04 07                	add    al,0x7
      92:	39 00                	cmp    DWORD PTR [eax],eax
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      99:	e1 00                	loope  9b <sysEnter_Vector-0x12ff65>
      9b:	00 00                	add    BYTE PTR [eax],al
      9d:	05 04 25 00 00       	add    eax,0x2504
      a2:	00 07                	add    BYTE PTR [edi],al
      a4:	21 00                	and    DWORD PTR [eax],eax
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	01 08                	add    DWORD PTR [eax],ecx
      aa:	9d                   	popf   
      ab:	00 00                	add    BYTE PTR [eax],al
      ad:	00 00                	add    BYTE PTR [eax],al
      af:	00 00                	add    BYTE PTR [eax],al
      b1:	9f                   	lahf   
      b2:	38 00                	cmp    BYTE PTR [eax],al
      b4:	00 00                	add    BYTE PTR [eax],al
      b6:	01 9c d5 00 00 00 08 	add    DWORD PTR [ebp+edx*8+0x8000000],ebx
      bd:	73 00                	jae    bf <sysEnter_Vector-0x12ff41>
      bf:	01 08                	add    DWORD PTR [eax],ecx
      c1:	7d 00                	jge    c3 <sysEnter_Vector-0x12ff3d>
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      cb:	01 08                	add    DWORD PTR [eax],ecx
      cd:	3a 00                	cmp    al,BYTE PTR [eax]
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	02 91 04 00 07 a7    	add    dl,BYTE PTR [ecx-0x58f8fffc]
      d7:	00 00                	add    BYTE PTR [eax],al
      d9:	00 01                	add    BYTE PTR [ecx],al
      db:	10 9d 00 00 00 38    	adc    BYTE PTR [ebp+0x38000000],bl
      e1:	00 00                	add    BYTE PTR [eax],al
      e3:	9f                   	lahf   
      e4:	38 00                	cmp    BYTE PTR [eax],al
      e6:	00 00                	add    BYTE PTR [eax],al
      e8:	01 9c 07 01 00 00 08 	add    DWORD PTR [edi+eax*1+0x8000001],ebx
      ef:	73 00                	jae    f1 <sysEnter_Vector-0x12ff0f>
      f1:	01 10                	add    DWORD PTR [eax],edx
      f3:	7d 00                	jge    f5 <sysEnter_Vector-0x12ff0b>
      f5:	00 00                	add    BYTE PTR [eax],al
      f7:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      fd:	01 10                	add    DWORD PTR [eax],edx
      ff:	3a 00                	cmp    al,BYTE PTR [eax]
     101:	00 00                	add    BYTE PTR [eax],al
     103:	02 91 04 00 09 4b    	add    dl,BYTE PTR [ecx+0x4b090004]
     109:	00 00                	add    BYTE PTR [eax],al
     10b:	00 02                	add    BYTE PTR [edx],al
     10d:	34 56                	xor    al,0x56
     10f:	00 00                	add    BYTE PTR [eax],al
     111:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
     117:	9f                   	lahf   
     118:	09 af 00 00 00 02    	or     DWORD PTR [edi+0x2000000],ebp
     11e:	35 56 00 00 00       	xor    eax,0x56
     123:	05 03 44 54 00       	add    eax,0x544403
     128:	9f                   	lahf   
     129:	09 5b 01             	or     DWORD PTR [ebx+0x1],ebx
     12c:	00 00                	add    BYTE PTR [eax],al
     12e:	02 36                	add    dh,BYTE PTR [esi]
     130:	56                   	push   esi
     131:	00 00                	add    BYTE PTR [eax],al
     133:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
     139:	9f                   	lahf   
     13a:	09 54 00 00          	or     DWORD PTR [eax+eax*1+0x0],edx
     13e:	00 02                	add    BYTE PTR [edx],al
     140:	37                   	aaa    
     141:	6f                   	outs   dx,DWORD PTR ds:[esi]
     142:	00 00                	add    BYTE PTR [eax],al
     144:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
     14a:	9f                   	lahf   
     14b:	09 28                	or     DWORD PTR [eax],ebp
     14d:	00 00                	add    BYTE PTR [eax],al
     14f:	00 03                	add    BYTE PTR [ebx],al
     151:	4f                   	dec    edi
     152:	5c                   	pop    esp
     153:	01 00                	add    DWORD PTR [eax],eax
     155:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
     15b:	9f                   	lahf   
     15c:	05 04 9d 00 00       	add    eax,0x9d04
     161:	00 00                	add    BYTE PTR [eax],al
     163:	9e                   	sahf   
     164:	01 00                	add    DWORD PTR [eax],eax
     166:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     169:	83 00 00             	add    DWORD PTR [eax],0x0
     16c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     16f:	f4                   	hlt    
     170:	00 00                	add    BYTE PTR [eax],al
     172:	00 0c 69             	add    BYTE PTR [ecx+ebp*2],cl
     175:	01 00                	add    DWORD PTR [eax],eax
     177:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     17a:	00 00                	add    BYTE PTR [eax],al
     17c:	70 00                	jo     17e <sysEnter_Vector-0x12fe82>
     17e:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     184:	d4 00                	aam    0x0
     186:	00 00                	add    BYTE PTR [eax],al
     188:	02 01                	add    al,BYTE PTR [ecx]
     18a:	06                   	push   es
     18b:	64 00 00             	add    BYTE PTR fs:[eax],al
     18e:	00 02                	add    BYTE PTR [edx],al
     190:	01 06                	add    DWORD PTR [esi],eax
     192:	5d                   	pop    ebp
     193:	00 00                	add    BYTE PTR [eax],al
     195:	00 02                	add    BYTE PTR [edx],al
     197:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     19d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1a4:	02 08                	add    cl,BYTE PTR [eax]
     1a6:	05 00 00 00 00       	add    eax,0x0
     1ab:	02 01                	add    al,BYTE PTR [ecx]
     1ad:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     1b0:	00 00                	add    BYTE PTR [eax],al
     1b2:	02 02                	add    al,BYTE PTR [edx]
     1b4:	07                   	pop    es
     1b5:	0e                   	push   cs
     1b6:	00 00                	add    BYTE PTR [eax],al
     1b8:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     1c0:	61                   	popa   
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 02                	add    BYTE PTR [edx],al
     1c5:	04 07                	add    al,0x7
     1c7:	3e 00 00             	add    BYTE PTR ds:[eax],al
     1ca:	00 02                	add    BYTE PTR [edx],al
     1cc:	08 07                	or     BYTE PTR [edi],al
     1ce:	34 00                	xor    al,0x0
     1d0:	00 00                	add    BYTE PTR [eax],al
     1d2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     1d9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     1dc:	9b                   	fwait
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	00 02                	add    BYTE PTR [edx],al
     1e1:	01 02                	add    DWORD PTR [edx],eax
     1e3:	95                   	xchg   ebp,eax
     1e4:	00 00                	add    BYTE PTR [eax],al
     1e6:	00 02                	add    BYTE PTR [edx],al
     1e8:	04 07                	add    al,0x7
     1ea:	39 00                	cmp    DWORD PTR [eax],eax
     1ec:	00 00                	add    BYTE PTR [eax],al
     1ee:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     1f1:	e1 00                	loope  1f3 <sysEnter_Vector-0x12fe0d>
     1f3:	00 00                	add    BYTE PTR [eax],al
     1f5:	05 04 25 00 00       	add    eax,0x2504
     1fa:	00 06                	add    BYTE PTR [esi],al
     1fc:	93                   	xchg   ebx,eax
     1fd:	01 00                	add    DWORD PTR [eax],eax
     1ff:	00 01                	add    BYTE PTR [ecx],al
     201:	25 3a 00 00 00       	and    eax,0x3a
     206:	70 00                	jo     208 <sysEnter_Vector-0x12fdf8>
     208:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     20e:	01 9c ef 00 00 00 07 	add    DWORD PTR [edi+ebp*8+0x7000000],ebx
     215:	86 0b                	xchg   BYTE PTR [ebx],cl
     217:	00 00                	add    BYTE PTR [eax],al
     219:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     21f:	02 91 00 07 63 01    	add    dl,BYTE PTR [ecx+0x1630700]
     225:	00 00                	add    BYTE PTR [eax],al
     227:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     22d:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     233:	01 27                	add    DWORD PTR [edi],esp
     235:	25 00 00 00 01       	and    eax,0x1000000
     23a:	51                   	push   ecx
     23b:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     23e:	01 27                	add    DWORD PTR [edi],esp
     240:	92                   	xchg   edx,eax
     241:	00 00                	add    BYTE PTR [eax],al
     243:	00 01                	add    BYTE PTR [ecx],al
     245:	56                   	push   esi
     246:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	92                   	xchg   edx,eax
     24c:	00 00                	add    BYTE PTR [eax],al
     24e:	00 01                	add    BYTE PTR [ecx],al
     250:	53                   	push   ebx
     251:	00 06                	add    BYTE PTR [esi],al
     253:	9b                   	fwait
     254:	01 00                	add    DWORD PTR [eax],eax
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	33 3a                	xor    edi,DWORD PTR [edx]
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	00 c5                	add    ch,al
     25e:	00 00                	add    BYTE PTR [eax],al
     260:	9f                   	lahf   
     261:	55                   	push   ebp
     262:	00 00                	add    BYTE PTR [eax],al
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	9c                   	pushf  
     267:	46                   	inc    esi
     268:	01 00                	add    DWORD PTR [eax],eax
     26a:	00 07                	add    BYTE PTR [edi],al
     26c:	86 0b                	xchg   BYTE PTR [ebx],cl
     26e:	00 00                	add    BYTE PTR [eax],al
     270:	01 33                	add    DWORD PTR [ebx],esi
     272:	92                   	xchg   edx,eax
     273:	00 00                	add    BYTE PTR [eax],al
     275:	00 02                	add    BYTE PTR [edx],al
     277:	91                   	xchg   ecx,eax
     278:	00 07                	add    BYTE PTR [edi],al
     27a:	63 01                	arpl   WORD PTR [ecx],ax
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	01 33                	add    DWORD PTR [ebx],esi
     280:	92                   	xchg   edx,eax
     281:	00 00                	add    BYTE PTR [eax],al
     283:	00 02                	add    BYTE PTR [edx],al
     285:	91                   	xchg   ecx,eax
     286:	04 08                	add    al,0x8
     288:	63 00                	arpl   WORD PTR [eax],ax
     28a:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     290:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     293:	70 00                	jo     295 <sysEnter_Vector-0x12fd6b>
     295:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     29b:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     29e:	73 00                	jae    2a0 <sysEnter_Vector-0x12fd60>
     2a0:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     2a6:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2a9:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
     2b9:	9f                   	lahf   
     2ba:	09 af 00 00 00 02    	or     DWORD PTR [edi+0x2000000],ebp
     2c0:	35 56 00 00 00       	xor    eax,0x56
     2c5:	05 03 44 54 00       	add    eax,0x544403
     2ca:	9f                   	lahf   
     2cb:	09 5b 01             	or     DWORD PTR [ebx+0x1],ebx
     2ce:	00 00                	add    BYTE PTR [eax],al
     2d0:	02 36                	add    dh,BYTE PTR [esi]
     2d2:	56                   	push   esi
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
     2db:	9f                   	lahf   
     2dc:	09 54 00 00          	or     DWORD PTR [eax+eax*1+0x0],edx
     2e0:	00 02                	add    BYTE PTR [edx],al
     2e2:	37                   	aaa    
     2e3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
     2ec:	9f                   	lahf   
     2ed:	09 28                	or     DWORD PTR [eax],ebp
     2ef:	00 00                	add    BYTE PTR [eax],al
     2f1:	00 03                	add    BYTE PTR [ebx],al
     2f3:	4f                   	dec    edi
     2f4:	9b                   	fwait
     2f5:	01 00                	add    DWORD PTR [eax],eax
     2f7:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
     2fd:	9f                   	lahf   
     2fe:	05 04 92 00 00       	add    eax,0x9204
     303:	00 00                	add    BYTE PTR [eax],al
     305:	41                   	inc    ecx
     306:	01 00                	add    DWORD PTR [eax],eax
     308:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     30b:	0e                   	push   cs
     30c:	01 00                	add    DWORD PTR [eax],eax
     30e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     311:	f4                   	hlt    
     312:	00 00                	add    BYTE PTR [eax],al
     314:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
     317:	01 00                	add    DWORD PTR [eax],eax
     319:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     31c:	00 00                	add    BYTE PTR [eax],al
     31e:	1c 01                	sbb    al,0x1
     320:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     326:	db 01                	fild   DWORD PTR [ecx]
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	02 01                	add    al,BYTE PTR [ecx]
     32c:	06                   	push   es
     32d:	64 00 00             	add    BYTE PTR fs:[eax],al
     330:	00 02                	add    BYTE PTR [edx],al
     332:	01 06                	add    DWORD PTR [esi],eax
     334:	5d                   	pop    ebp
     335:	00 00                	add    BYTE PTR [eax],al
     337:	00 02                	add    BYTE PTR [edx],al
     339:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     33f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     346:	02 08                	add    cl,BYTE PTR [eax]
     348:	05 00 00 00 00       	add    eax,0x0
     34d:	02 01                	add    al,BYTE PTR [ecx]
     34f:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     352:	00 00                	add    BYTE PTR [eax],al
     354:	02 02                	add    al,BYTE PTR [edx]
     356:	07                   	pop    es
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     362:	61                   	popa   
     363:	00 00                	add    BYTE PTR [eax],al
     365:	00 02                	add    BYTE PTR [edx],al
     367:	04 07                	add    al,0x7
     369:	3e 00 00             	add    BYTE PTR ds:[eax],al
     36c:	00 02                	add    BYTE PTR [edx],al
     36e:	08 07                	or     BYTE PTR [edi],al
     370:	34 00                	xor    al,0x0
     372:	00 00                	add    BYTE PTR [eax],al
     374:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     37b:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     37e:	9b                   	fwait
     37f:	00 00                	add    BYTE PTR [eax],al
     381:	00 02                	add    BYTE PTR [edx],al
     383:	01 02                	add    DWORD PTR [edx],eax
     385:	95                   	xchg   ebp,eax
     386:	00 00                	add    BYTE PTR [eax],al
     388:	00 02                	add    BYTE PTR [edx],al
     38a:	04 07                	add    al,0x7
     38c:	39 00                	cmp    DWORD PTR [eax],eax
     38e:	00 00                	add    BYTE PTR [eax],al
     390:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     393:	e1 00                	loope  395 <sysEnter_Vector-0x12fc6b>
     395:	00 00                	add    BYTE PTR [eax],al
     397:	05 04 25 00 00       	add    eax,0x2504
     39c:	00 06                	add    BYTE PTR [esi],al
     39e:	d9 01                	fld    DWORD PTR [ecx]
     3a0:	00 00                	add    BYTE PTR [eax],al
     3a2:	01 28                	add    DWORD PTR [eax],ebp
     3a4:	92                   	xchg   edx,eax
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3aa:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     3b0:	01 9c e9 00 00 00 07 	add    DWORD PTR [ecx+ebp*8+0x7000000],ebx
     3b7:	73 00                	jae    3b9 <sysEnter_Vector-0x12fc47>
     3b9:	01 28                	add    DWORD PTR [eax],ebp
     3bb:	92                   	xchg   edx,eax
     3bc:	00 00                	add    BYTE PTR [eax],al
     3be:	00 02                	add    BYTE PTR [edx],al
     3c0:	91                   	xchg   ecx,eax
     3c1:	00 08                	add    BYTE PTR [eax],cl
     3c3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     3c4:	01 00                	add    DWORD PTR [eax],eax
     3c6:	00 01                	add    BYTE PTR [ecx],al
     3c8:	28 92 00 00 00 02    	sub    BYTE PTR [edx+0x2000000],dl
     3ce:	91                   	xchg   ecx,eax
     3cf:	04 09                	add    al,0x9
     3d1:	d3 01                	rol    DWORD PTR [ecx],cl
     3d3:	00 00                	add    BYTE PTR [eax],al
     3d5:	01 2a                	add    DWORD PTR [edx],ebp
     3d7:	92                   	xchg   edx,eax
     3d8:	00 00                	add    BYTE PTR [eax],al
     3da:	00 05 03 50 54 00    	add    BYTE PTR ds:0x545003,al
     3e0:	9f                   	lahf   
     3e1:	0a 63 68             	or     ah,BYTE PTR [ebx+0x68]
     3e4:	00 01                	add    BYTE PTR [ecx],al
     3e6:	2b 3a                	sub    edi,DWORD PTR [edx]
     3e8:	00 00                	add    BYTE PTR [eax],al
     3ea:	00 01                	add    BYTE PTR [ecx],al
     3ec:	56                   	push   esi
     3ed:	00 0b                	add    BYTE PTR [ebx],cl
     3ef:	4b                   	dec    ebx
     3f0:	00 00                	add    BYTE PTR [eax],al
     3f2:	00 02                	add    BYTE PTR [edx],al
     3f4:	34 56                	xor    al,0x56
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
     3fe:	9f                   	lahf   
     3ff:	0b af 00 00 00 02    	or     ebp,DWORD PTR [edi+0x2000000]
     405:	35 56 00 00 00       	xor    eax,0x56
     40a:	05 03 44 54 00       	add    eax,0x544403
     40f:	9f                   	lahf   
     410:	0b 5b 01             	or     ebx,DWORD PTR [ebx+0x1]
     413:	00 00                	add    BYTE PTR [eax],al
     415:	02 36                	add    dh,BYTE PTR [esi]
     417:	56                   	push   esi
     418:	00 00                	add    BYTE PTR [eax],al
     41a:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
     420:	9f                   	lahf   
     421:	0b 54 00 00          	or     edx,DWORD PTR [eax+eax*1+0x0]
     425:	00 02                	add    BYTE PTR [edx],al
     427:	37                   	aaa    
     428:	6f                   	outs   dx,DWORD PTR ds:[esi]
     429:	00 00                	add    BYTE PTR [eax],al
     42b:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
     431:	9f                   	lahf   
     432:	0b 28                	or     ebp,DWORD PTR [eax]
     434:	00 00                	add    BYTE PTR [eax],al
     436:	00 03                	add    BYTE PTR [ebx],al
     438:	4f                   	dec    edi
     439:	3e 01 00             	add    DWORD PTR ds:[eax],eax
     43c:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
     442:	9f                   	lahf   
     443:	05 04 92 00 00       	add    eax,0x9204
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	12 02                	adc    al,BYTE PTR [edx]
     44c:	00 00                	add    BYTE PTR [eax],al
     44e:	04 00                	add    al,0x0
     450:	b7 01                	mov    bh,0x1
     452:	00 00                	add    BYTE PTR [eax],al
     454:	04 01                	add    al,0x1
     456:	f4                   	hlt    
     457:	00 00                	add    BYTE PTR [eax],al
     459:	00 0c e6             	add    BYTE PTR [esi+eiz*8],cl
     45c:	01 00                	add    DWORD PTR [eax],eax
     45e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     461:	00 00                	add    BYTE PTR [eax],al
     463:	b4 01                	mov    ah,0x1
     465:	00 9f 49 02 00 00    	add    BYTE PTR [edi+0x249],bl
     46b:	b3 02                	mov    bl,0x2
     46d:	00 00                	add    BYTE PTR [eax],al
     46f:	02 01                	add    al,BYTE PTR [ecx]
     471:	06                   	push   es
     472:	64 00 00             	add    BYTE PTR fs:[eax],al
     475:	00 02                	add    BYTE PTR [edx],al
     477:	01 06                	add    DWORD PTR [esi],eax
     479:	5d                   	pop    ebp
     47a:	00 00                	add    BYTE PTR [eax],al
     47c:	00 02                	add    BYTE PTR [edx],al
     47e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     484:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     48b:	02 08                	add    cl,BYTE PTR [eax]
     48d:	05 00 00 00 00       	add    eax,0x0
     492:	02 01                	add    al,BYTE PTR [ecx]
     494:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     497:	00 00                	add    BYTE PTR [eax],al
     499:	02 02                	add    al,BYTE PTR [edx]
     49b:	07                   	pop    es
     49c:	0e                   	push   cs
     49d:	00 00                	add    BYTE PTR [eax],al
     49f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     4a2:	00 00                	add    BYTE PTR [eax],al
     4a4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     4a7:	61                   	popa   
     4a8:	00 00                	add    BYTE PTR [eax],al
     4aa:	00 02                	add    BYTE PTR [edx],al
     4ac:	04 07                	add    al,0x7
     4ae:	3e 00 00             	add    BYTE PTR ds:[eax],al
     4b1:	00 02                	add    BYTE PTR [edx],al
     4b3:	08 07                	or     BYTE PTR [edi],al
     4b5:	34 00                	xor    al,0x0
     4b7:	00 00                	add    BYTE PTR [eax],al
     4b9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     4c0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     4c3:	9b                   	fwait
     4c4:	00 00                	add    BYTE PTR [eax],al
     4c6:	00 02                	add    BYTE PTR [edx],al
     4c8:	01 02                	add    DWORD PTR [edx],eax
     4ca:	95                   	xchg   ebp,eax
     4cb:	00 00                	add    BYTE PTR [eax],al
     4cd:	00 02                	add    BYTE PTR [edx],al
     4cf:	04 07                	add    al,0x7
     4d1:	39 00                	cmp    DWORD PTR [eax],eax
     4d3:	00 00                	add    BYTE PTR [eax],al
     4d5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     4d8:	e1 00                	loope  4da <sysEnter_Vector-0x12fb26>
     4da:	00 00                	add    BYTE PTR [eax],al
     4dc:	05 04 25 00 00       	add    eax,0x2504
     4e1:	00 06                	add    BYTE PTR [esi],al
     4e3:	f7 01 00 00 01 09    	test   DWORD PTR [ecx],0x9010000
     4e9:	b4 01                	mov    ah,0x1
     4eb:	00 9f 77 00 00 00    	add    BYTE PTR [edi+0x77],bl
     4f1:	01 9c de 00 00 00 07 	add    DWORD PTR [esi+ebx*8+0x7000000],ebx
     4f8:	73 00                	jae    4fa <sysEnter_Vector-0x12fb06>
     4fa:	01 09                	add    DWORD PTR [ecx],ecx
     4fc:	92                   	xchg   edx,eax
     4fd:	00 00                	add    BYTE PTR [eax],al
     4ff:	00 02                	add    BYTE PTR [edx],al
     501:	91                   	xchg   ecx,eax
     502:	00 08                	add    BYTE PTR [eax],cl
     504:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     512:	01 0b                	add    DWORD PTR [ebx],ecx
     514:	3a 00                	cmp    al,BYTE PTR [eax]
     516:	00 00                	add    BYTE PTR [eax],al
     518:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     51e:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     525:	91                   	xchg   ecx,eax
     526:	67 00 06 f2 01       	add    BYTE PTR ds:0x1f2,al
     52b:	00 00                	add    BYTE PTR [eax],al
     52d:	01 15 2b 02 00 9f    	add    DWORD PTR ds:0x9f00022b,edx
     533:	bb 00 00 00 01       	mov    ebx,0x1000000
     538:	9c                   	pushf  
     539:	26 01 00             	add    DWORD PTR es:[eax],eax
     53c:	00 07                	add    BYTE PTR [edi],al
     53e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     53f:	00 01                	add    BYTE PTR [ecx],al
     541:	15 3a 00 00 00       	adc    eax,0x3a
     546:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     54c:	01 15 92 00 00 00    	add    DWORD PTR ds:0x92,edx
     552:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     558:	01 17                	add    DWORD PTR [edi],edx
     55a:	3a 00                	cmp    al,BYTE PTR [eax]
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	02 91 6c 09 00 02    	add    dl,BYTE PTR [ecx+0x200096c]
     564:	00 00                	add    BYTE PTR [eax],al
     566:	01 17                	add    DWORD PTR [edi],edx
     568:	3a 00                	cmp    al,BYTE PTR [eax]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	02 91 68 00 06 e0    	add    dl,BYTE PTR [ecx-0x1ff9ff98]
     572:	01 00                	add    DWORD PTR [eax],eax
     574:	00 01                	add    BYTE PTR [ecx],al
     576:	25 e6 02 00 9f       	and    eax,0x9f0002e6
     57b:	bb 00 00 00 01       	mov    ebx,0x1000000
     580:	9c                   	pushf  
     581:	6e                   	outs   dx,BYTE PTR ds:[esi]
     582:	01 00                	add    DWORD PTR [eax],eax
     584:	00 07                	add    BYTE PTR [edi],al
     586:	6e                   	outs   dx,BYTE PTR ds:[esi]
     587:	00 01                	add    BYTE PTR [ecx],al
     589:	25 3a 00 00 00       	and    eax,0x3a
     58e:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     594:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     59a:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5a0:	01 27                	add    DWORD PTR [edi],esp
     5a2:	3a 00                	cmp    al,BYTE PTR [eax]
     5a4:	00 00                	add    BYTE PTR [eax],al
     5a6:	02 91 6c 09 00 02    	add    dl,BYTE PTR [ecx+0x200096c]
     5ac:	00 00                	add    BYTE PTR [eax],al
     5ae:	01 27                	add    DWORD PTR [edi],esp
     5b0:	3a 00                	cmp    al,BYTE PTR [eax]
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 91 68 00 0a 1c    	add    dl,BYTE PTR [ecx+0x1c0a0068]
     5ba:	08 00                	or     BYTE PTR [eax],al
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	a1 03 00 9f 5c       	mov    eax,ds:0x5c9f0003
     5c8:	00 00                	add    BYTE PTR [eax],al
     5ca:	00 01                	add    BYTE PTR [ecx],al
     5cc:	9c                   	pushf  
     5cd:	ba 01 00 00 07       	mov    edx,0x7000001
     5d2:	73 74                	jae    648 <sysEnter_Vector-0x12f9b8>
     5d4:	72 00                	jb     5d6 <sysEnter_Vector-0x12fa2a>
     5d6:	01 36                	add    DWORD PTR [esi],esi
     5d8:	92                   	xchg   edx,eax
     5d9:	00 00                	add    BYTE PTR [eax],al
     5db:	00 02                	add    BYTE PTR [edx],al
     5dd:	91                   	xchg   ecx,eax
     5de:	00 08                	add    BYTE PTR [eax],cl
     5e0:	72 65                	jb     647 <sysEnter_Vector-0x12f9b9>
     5e2:	73 00                	jae    5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	01 38                	add    DWORD PTR [eax],edi
     5e6:	3a 00                	cmp    al,BYTE PTR [eax]
     5e8:	00 00                	add    BYTE PTR [eax],al
     5ea:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     5f0:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
     5f6:	08 69 00             	or     BYTE PTR [ecx+0x0],ch
     5f9:	01 3c 3a             	add    DWORD PTR [edx+edi*1],edi
     5fc:	00 00                	add    BYTE PTR [eax],al
     5fe:	00 02                	add    BYTE PTR [edx],al
     600:	91                   	xchg   ecx,eax
     601:	70 00                	jo     603 <sysEnter_Vector-0x12f9fd>
     603:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
     606:	00 00                	add    BYTE PTR [eax],al
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	34 56                	xor    al,0x56
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
     614:	9f                   	lahf   
     615:	0c af                	or     al,0xaf
     617:	00 00                	add    BYTE PTR [eax],al
     619:	00 02                	add    BYTE PTR [edx],al
     61b:	35 56 00 00 00       	xor    eax,0x56
     620:	05 03 44 54 00       	add    eax,0x544403
     625:	9f                   	lahf   
     626:	0c 5b                	or     al,0x5b
     628:	01 00                	add    DWORD PTR [eax],eax
     62a:	00 02                	add    BYTE PTR [edx],al
     62c:	36                   	ss
     62d:	56                   	push   esi
     62e:	00 00                	add    BYTE PTR [eax],al
     630:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
     636:	9f                   	lahf   
     637:	0c 54                	or     al,0x54
     639:	00 00                	add    BYTE PTR [eax],al
     63b:	00 02                	add    BYTE PTR [edx],al
     63d:	37                   	aaa    
     63e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     63f:	00 00                	add    BYTE PTR [eax],al
     641:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
     647:	9f                   	lahf   
     648:	0c 28                	or     al,0x28
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 03                	add    BYTE PTR [ebx],al
     64e:	4f                   	dec    edi
     64f:	0f 02 00             	lar    eax,WORD PTR [eax]
     652:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
     658:	9f                   	lahf   
     659:	05 04 92 00 00       	add    eax,0x9204
     65e:	00 00                	add    BYTE PTR [eax],al
     660:	b2 01                	mov    dl,0x1
     662:	00 00                	add    BYTE PTR [eax],al
     664:	04 00                	add    al,0x0
     666:	74 02                	je     66a <sysEnter_Vector-0x12f996>
     668:	00 00                	add    BYTE PTR [eax],al
     66a:	04 01                	add    al,0x1
     66c:	f4                   	hlt    
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	00 0c 27             	add    BYTE PTR [edi+eiz*1],cl
     672:	02 00                	add    al,BYTE PTR [eax]
     674:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     677:	00 00                	add    BYTE PTR [eax],al
     679:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     67c:	9f                   	lahf   
     67d:	6b 02 00             	imul   eax,DWORD PTR [edx],0x0
     680:	00 c7                	add    bh,al
     682:	03 00                	add    eax,DWORD PTR [eax]
     684:	00 02                	add    BYTE PTR [edx],al
     686:	01 06                	add    DWORD PTR [esi],eax
     688:	64 00 00             	add    BYTE PTR fs:[eax],al
     68b:	00 02                	add    BYTE PTR [edx],al
     68d:	01 06                	add    DWORD PTR [esi],eax
     68f:	5d                   	pop    ebp
     690:	00 00                	add    BYTE PTR [eax],al
     692:	00 02                	add    BYTE PTR [edx],al
     694:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     69a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     6a1:	02 08                	add    cl,BYTE PTR [eax]
     6a3:	05 00 00 00 00       	add    eax,0x0
     6a8:	02 01                	add    al,BYTE PTR [ecx]
     6aa:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     6ad:	00 00                	add    BYTE PTR [eax],al
     6af:	02 02                	add    al,BYTE PTR [edx]
     6b1:	07                   	pop    es
     6b2:	0e                   	push   cs
     6b3:	00 00                	add    BYTE PTR [eax],al
     6b5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     6b8:	00 00                	add    BYTE PTR [eax],al
     6ba:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     6bd:	61                   	popa   
     6be:	00 00                	add    BYTE PTR [eax],al
     6c0:	00 02                	add    BYTE PTR [edx],al
     6c2:	04 07                	add    al,0x7
     6c4:	3e 00 00             	add    BYTE PTR ds:[eax],al
     6c7:	00 02                	add    BYTE PTR [edx],al
     6c9:	08 07                	or     BYTE PTR [edi],al
     6cb:	34 00                	xor    al,0x0
     6cd:	00 00                	add    BYTE PTR [eax],al
     6cf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     6d6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     6d9:	9b                   	fwait
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	01 02                	add    DWORD PTR [edx],eax
     6e0:	95                   	xchg   ebp,eax
     6e1:	00 00                	add    BYTE PTR [eax],al
     6e3:	00 02                	add    BYTE PTR [edx],al
     6e5:	04 07                	add    al,0x7
     6e7:	39 00                	cmp    DWORD PTR [eax],eax
     6e9:	00 00                	add    BYTE PTR [eax],al
     6eb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     6ee:	e1 00                	loope  6f0 <sysEnter_Vector-0x12f910>
     6f0:	00 00                	add    BYTE PTR [eax],al
     6f2:	05 04 25 00 00       	add    eax,0x2504
     6f7:	00 06                	add    BYTE PTR [esi],al
     6f9:	20 02                	and    BYTE PTR [edx],al
     6fb:	00 00                	add    BYTE PTR [eax],al
     6fd:	01 09                	add    DWORD PTR [ecx],ecx
     6ff:	3a 00                	cmp    al,BYTE PTR [eax]
     701:	00 00                	add    BYTE PTR [eax],al
     703:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     706:	9f                   	lahf   
     707:	aa                   	stos   BYTE PTR es:[edi],al
     708:	00 00                	add    BYTE PTR [eax],al
     70a:	00 01                	add    BYTE PTR [ecx],al
     70c:	9c                   	pushf  
     70d:	e6 00                	out    0x0,al
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	07                   	pop    es
     712:	39 02                	cmp    DWORD PTR [edx],eax
     714:	00 00                	add    BYTE PTR [eax],al
     716:	01 09                	add    DWORD PTR [ecx],ecx
     718:	92                   	xchg   edx,eax
     719:	00 00                	add    BYTE PTR [eax],al
     71b:	00 02                	add    BYTE PTR [edx],al
     71d:	91                   	xchg   ecx,eax
     71e:	00 07                	add    BYTE PTR [edi],al
     720:	05 02 00 00 01       	add    eax,0x1000002
     725:	09 92 00 00 00 02    	or     DWORD PTR [edx+0x2000000],edx
     72b:	91                   	xchg   ecx,eax
     72c:	04 08                	add    al,0x8
     72e:	12 04 00             	adc    al,BYTE PTR [eax+eax*1]
     731:	9f                   	lahf   
     732:	8e 00                	mov    es,WORD PTR [eax]
     734:	00 00                	add    BYTE PTR [eax],al
     736:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     739:	74 00                	je     73b <sysEnter_Vector-0x12f8c5>
     73b:	01 0b                	add    DWORD PTR [ebx],ecx
     73d:	3a 00                	cmp    al,BYTE PTR [eax]
     73f:	00 00                	add    BYTE PTR [eax],al
     741:	02 91 6c 00 00 0a    	add    dl,BYTE PTR [ecx+0xa00006c]
     747:	19 02                	sbb    DWORD PTR [edx],eax
     749:	00 00                	add    BYTE PTR [eax],al
     74b:	01 14 aa             	add    DWORD PTR [edx+ebp*4],edx
     74e:	04 00                	add    al,0x0
     750:	9f                   	lahf   
     751:	c1 01 00             	rol    DWORD PTR [ecx],0x0
     754:	00 01                	add    BYTE PTR [ecx],al
     756:	9c                   	pushf  
     757:	5a                   	pop    edx
     758:	01 00                	add    DWORD PTR [eax],eax
     75a:	00 07                	add    BYTE PTR [edi],al
     75c:	39 02                	cmp    DWORD PTR [edx],eax
     75e:	00 00                	add    BYTE PTR [eax],al
     760:	01 14 92             	add    DWORD PTR [edx+edx*4],edx
     763:	00 00                	add    BYTE PTR [eax],al
     765:	00 02                	add    BYTE PTR [edx],al
     767:	91                   	xchg   ecx,eax
     768:	00 07                	add    BYTE PTR [edi],al
     76a:	05 02 00 00 01       	add    eax,0x1000002
     76f:	14 92                	adc    al,0x92
     771:	00 00                	add    BYTE PTR [eax],al
     773:	00 02                	add    BYTE PTR [edx],al
     775:	91                   	xchg   ecx,eax
     776:	04 0b                	add    al,0xb
     778:	0b 02                	or     eax,DWORD PTR [edx]
     77a:	00 00                	add    BYTE PTR [eax],al
     77c:	01 16                	add    DWORD PTR [esi],edx
     77e:	56                   	push   esi
     77f:	00 00                	add    BYTE PTR [eax],al
     781:	00 02                	add    BYTE PTR [edx],al
     783:	91                   	xchg   ecx,eax
     784:	6c                   	ins    BYTE PTR es:[edi],dx
     785:	0c c3                	or     al,0xc3
     787:	04 00                	add    al,0x0
     789:	9f                   	lahf   
     78a:	eb 00                	jmp    78c <sysEnter_Vector-0x12f874>
     78c:	00 00                	add    BYTE PTR [eax],al
     78e:	41                   	inc    ecx
     78f:	01 00                	add    DWORD PTR [eax],eax
     791:	00 09                	add    BYTE PTR [ecx],cl
     793:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     796:	00 01                	add    BYTE PTR [ecx],al
     798:	18 3a                	sbb    BYTE PTR [edx],bh
     79a:	00 00                	add    BYTE PTR [eax],al
     79c:	00 02                	add    BYTE PTR [edx],al
     79e:	91                   	xchg   ecx,eax
     79f:	68 00 08 ae 05       	push   0x5ae0800
     7a4:	00 9f b8 00 00 00    	add    BYTE PTR [edi+0xb8],bl
     7aa:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     7ad:	74 00                	je     7af <sysEnter_Vector-0x12f851>
     7af:	01 24 3a             	add    DWORD PTR [edx+edi*1],esp
     7b2:	00 00                	add    BYTE PTR [eax],al
     7b4:	00 02                	add    BYTE PTR [edx],al
     7b6:	91                   	xchg   ecx,eax
     7b7:	64 00 00             	add    BYTE PTR fs:[eax],al
     7ba:	0d 4b 00 00 00       	or     eax,0x4b
     7bf:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     7c2:	00 00                	add    BYTE PTR [eax],al
     7c4:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
     7ca:	9f                   	lahf   
     7cb:	0d af 00 00 00       	or     eax,0xaf
     7d0:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
     7d6:	05 03 44 54 00       	add    eax,0x544403
     7db:	9f                   	lahf   
     7dc:	0d 5b 01 00 00       	or     eax,0x15b
     7e1:	02 36                	add    dh,BYTE PTR [esi]
     7e3:	56                   	push   esi
     7e4:	00 00                	add    BYTE PTR [eax],al
     7e6:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
     7ec:	9f                   	lahf   
     7ed:	0d 54 00 00 00       	or     eax,0x54
     7f2:	02 37                	add    dh,BYTE PTR [edi]
     7f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7f5:	00 00                	add    BYTE PTR [eax],al
     7f7:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
     7fd:	9f                   	lahf   
     7fe:	0d 28 00 00 00       	or     eax,0x28
     803:	03 4f af             	add    ecx,DWORD PTR [edi-0x51]
     806:	01 00                	add    DWORD PTR [eax],eax
     808:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
     80e:	9f                   	lahf   
     80f:	05 04 92 00 00       	add    eax,0x9204
     814:	00 00                	add    BYTE PTR [eax],al
     816:	01 03                	add    DWORD PTR [ebx],eax
     818:	00 00                	add    BYTE PTR [eax],al
     81a:	04 00                	add    al,0x0
     81c:	3c 03                	cmp    al,0x3
     81e:	00 00                	add    BYTE PTR [eax],al
     820:	04 01                	add    al,0x1
     822:	f4                   	hlt    
     823:	00 00                	add    BYTE PTR [eax],al
     825:	00 0c 9c             	add    BYTE PTR [esp+ebx*4],cl
     828:	02 00                	add    al,BYTE PTR [eax]
     82a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     82d:	00 00                	add    BYTE PTR [eax],al
     82f:	6c                   	ins    BYTE PTR es:[edi],dx
     830:	06                   	push   es
     831:	00 9f f2 00 00 00    	add    BYTE PTR [edi+0xf2],bl
     837:	d1 04 00             	rol    DWORD PTR [eax+eax*1],1
     83a:	00 02                	add    BYTE PTR [edx],al
     83c:	01 06                	add    DWORD PTR [esi],eax
     83e:	64 00 00             	add    BYTE PTR fs:[eax],al
     841:	00 02                	add    BYTE PTR [edx],al
     843:	01 06                	add    DWORD PTR [esi],eax
     845:	5d                   	pop    ebp
     846:	00 00                	add    BYTE PTR [eax],al
     848:	00 02                	add    BYTE PTR [edx],al
     84a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     850:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     857:	02 08                	add    cl,BYTE PTR [eax]
     859:	05 00 00 00 00       	add    eax,0x0
     85e:	02 01                	add    al,BYTE PTR [ecx]
     860:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     863:	00 00                	add    BYTE PTR [eax],al
     865:	02 02                	add    al,BYTE PTR [edx]
     867:	07                   	pop    es
     868:	0e                   	push   cs
     869:	00 00                	add    BYTE PTR [eax],al
     86b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     86e:	00 00                	add    BYTE PTR [eax],al
     870:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     873:	61                   	popa   
     874:	00 00                	add    BYTE PTR [eax],al
     876:	00 02                	add    BYTE PTR [edx],al
     878:	04 07                	add    al,0x7
     87a:	3e 00 00             	add    BYTE PTR ds:[eax],al
     87d:	00 02                	add    BYTE PTR [edx],al
     87f:	08 07                	or     BYTE PTR [edi],al
     881:	34 00                	xor    al,0x0
     883:	00 00                	add    BYTE PTR [eax],al
     885:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     88c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     88f:	9b                   	fwait
     890:	00 00                	add    BYTE PTR [eax],al
     892:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
     898:	00 06                	add    BYTE PTR [esi],al
     89a:	25 00 00 00 02       	and    eax,0x2000000
     89f:	01 02                	add    DWORD PTR [edx],eax
     8a1:	95                   	xchg   ebp,eax
     8a2:	00 00                	add    BYTE PTR [eax],al
     8a4:	00 07                	add    BYTE PTR [edi],al
     8a6:	12 03                	adc    al,BYTE PTR [ebx]
     8a8:	00 00                	add    BYTE PTR [eax],al
     8aa:	04 61                	add    al,0x61
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	00 05 15 51 01 00    	add    BYTE PTR ds:0x15115,al
     8b4:	00 08                	add    BYTE PTR [eax],cl
     8b6:	77 03                	ja     8bb <sysEnter_Vector-0x12f745>
     8b8:	00 00                	add    BYTE PTR [eax],al
     8ba:	00 08                	add    BYTE PTR [eax],cl
     8bc:	af                   	scas   eax,DWORD PTR es:[edi]
     8bd:	03 00                	add    eax,DWORD PTR [eax]
     8bf:	00 01                	add    BYTE PTR [ecx],al
     8c1:	08 6e 02             	or     BYTE PTR [esi+0x2],ch
     8c4:	00 00                	add    BYTE PTR [eax],al
     8c6:	02 08                	add    cl,BYTE PTR [eax]
     8c8:	04 03                	add    al,0x3
     8ca:	00 00                	add    BYTE PTR [eax],al
     8cc:	03 08                	add    ecx,DWORD PTR [eax]
     8ce:	4e                   	dec    esi
     8cf:	02 00                	add    al,BYTE PTR [eax]
     8d1:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     8d4:	c9                   	leave  
     8d5:	03 00                	add    eax,DWORD PTR [eax]
     8d7:	00 05 08 28 03 00    	add    BYTE PTR ds:0x32808,al
     8dd:	00 06                	add    BYTE PTR [esi],al
     8df:	08 61 02             	or     BYTE PTR [ecx+0x2],ah
     8e2:	00 00                	add    BYTE PTR [eax],al
     8e4:	07                   	pop    es
     8e5:	08 fa                	or     dl,bh
     8e7:	03 00                	add    eax,DWORD PTR [eax]
     8e9:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     8ec:	6a 03                	push   0x3
     8ee:	00 00                	add    BYTE PTR [eax],al
     8f0:	59                   	pop    ecx
     8f1:	08 09                	or     BYTE PTR [ecx],cl
     8f3:	04 00                	add    al,0x0
     8f5:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
     8f8:	f0 02 00             	lock add al,BYTE PTR [eax]
     8fb:	00 97 09 87 03 00    	add    BYTE PTR [edi+0x38709],dl
     901:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     904:	09 5d 03             	or     DWORD PTR [ebp+0x3],ebx
     907:	00 00                	add    BYTE PTR [eax],al
     909:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
     90c:	ec                   	in     al,dx
     90d:	03 00                	add    eax,DWORD PTR [eax]
     90f:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     912:	09 d2                	or     edx,edx
     914:	02 00                	add    al,BYTE PTR [eax]
     916:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     919:	09 21                	or     DWORD PTR [ecx],esp
     91b:	04 00                	add    al,0x0
     91d:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     920:	09 35 03 00 00 68    	or     DWORD PTR ds:0x68000003,esi
     926:	01 09                	add    DWORD PTR [ecx],ecx
     928:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     929:	02 00                	add    al,BYTE PTR [eax]
     92b:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     92e:	09 9e 03 00 00 70    	or     DWORD PTR [esi+0x70000003],ebx
     934:	01 09                	add    DWORD PTR [ecx],ecx
     936:	e0 02                	loopne 93a <sysEnter_Vector-0x12f6c6>
     938:	00 00                	add    BYTE PTR [eax],al
     93a:	71 01                	jno    93d <sysEnter_Vector-0x12f6c3>
     93c:	09 d7                	or     edi,edx
     93e:	03 00                	add    eax,DWORD PTR [eax]
     940:	00 00                	add    BYTE PTR [eax],al
     942:	03 09                	add    ecx,DWORD PTR [ecx]
     944:	42                   	inc    edx
     945:	03 00                	add    eax,DWORD PTR [eax]
     947:	00 01                	add    BYTE PTR [ecx],al
     949:	03 09                	add    ecx,DWORD PTR [ecx]
     94b:	b6 02                	mov    dh,0x2
     94d:	00 00                	add    BYTE PTR [eax],al
     94f:	02 03                	add    al,BYTE PTR [ebx]
     951:	09 7b 02             	or     DWORD PTR [ebx+0x2],edi
     954:	00 00                	add    BYTE PTR [eax],al
     956:	03 03                	add    eax,DWORD PTR [ebx]
     958:	09 8b 02 00 00 04    	or     DWORD PTR [ebx+0x4000002],ecx
     95e:	03 09                	add    ecx,DWORD PTR [ecx]
     960:	c2 02 00             	ret    0x2
     963:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
     969:	07                   	pop    es
     96a:	39 00                	cmp    DWORD PTR [eax],eax
     96c:	00 00                	add    BYTE PTR [eax],al
     96e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     971:	e1 00                	loope  973 <sysEnter_Vector-0x12f68d>
     973:	00 00                	add    BYTE PTR [eax],al
     975:	0a 04 05 04 25 00 00 	or     al,BYTE PTR [eax*1+0x2504]
     97c:	00 0b                	add    BYTE PTR [ebx],cl
     97e:	1c 04                	sbb    al,0x4
     980:	00 00                	add    BYTE PTR [eax],al
     982:	01 09                	add    DWORD PTR [ecx],ecx
     984:	5f                   	pop    edi
     985:	01 00                	add    DWORD PTR [eax],eax
     987:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
     98b:	9f                   	lahf   
     98c:	2d 00 00 00 01       	sub    eax,0x1000000
     991:	9c                   	pushf  
     992:	9d                   	popf   
     993:	01 00                	add    DWORD PTR [eax],eax
     995:	00 0c 9a             	add    BYTE PTR [edx+ebx*4],cl
     998:	09 00                	or     DWORD PTR [eax],eax
     99a:	00 01                	add    BYTE PTR [ecx],al
     99c:	09 61 01             	or     DWORD PTR [ecx+0x1],esp
     99f:	00 00                	add    BYTE PTR [eax],al
     9a1:	02 91 00 0c 48 09    	add    dl,BYTE PTR [ecx+0x9480c00]
     9a7:	00 00                	add    BYTE PTR [eax],al
     9a9:	01 09                	add    DWORD PTR [ecx],ecx
     9ab:	7d 00                	jge    9ad <sysEnter_Vector-0x12f653>
     9ad:	00 00                	add    BYTE PTR [eax],al
     9af:	02 91 04 00 0d 48    	add    dl,BYTE PTR [ecx+0x480d0004]
     9b5:	02 00                	add    al,BYTE PTR [eax]
     9b7:	00 01                	add    BYTE PTR [ecx],al
     9b9:	0e                   	push   cs
     9ba:	99                   	cdq    
     9bb:	06                   	push   es
     9bc:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
     9c2:	01 9c c1 01 00 00 0c 	add    DWORD PTR [ecx+eax*8+0xc000001],ebx
     9c9:	e5 03                	in     eax,0x3
     9cb:	00 00                	add    BYTE PTR [eax],al
     9cd:	01 0e                	add    DWORD PTR [esi],ecx
     9cf:	5f                   	pop    edi
     9d0:	01 00                	add    DWORD PTR [eax],eax
     9d2:	00 02                	add    BYTE PTR [edx],al
     9d4:	91                   	xchg   ecx,eax
     9d5:	00 00                	add    BYTE PTR [eax],al
     9d7:	0b 23                	or     esp,DWORD PTR [ebx]
     9d9:	03 00                	add    eax,DWORD PTR [eax]
     9db:	00 01                	add    BYTE PTR [ecx],al
     9dd:	13 3a                	adc    edi,DWORD PTR [edx]
     9df:	00 00                	add    BYTE PTR [eax],al
     9e1:	00 c3                	add    bl,al
     9e3:	06                   	push   es
     9e4:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
     9ea:	01 9c 13 02 00 00 0c 	add    DWORD PTR [ebx+edx*1+0xc000002],ebx
     9f1:	e5 03                	in     eax,0x3
     9f3:	00 00                	add    BYTE PTR [eax],al
     9f5:	01 13                	add    DWORD PTR [ebx],edx
     9f7:	5f                   	pop    edi
     9f8:	01 00                	add    DWORD PTR [eax],eax
     9fa:	00 02                	add    BYTE PTR [edx],al
     9fc:	91                   	xchg   ecx,eax
     9fd:	00 0c c2             	add    BYTE PTR [edx+eax*8],cl
     a00:	03 00                	add    eax,DWORD PTR [eax]
     a02:	00 01                	add    BYTE PTR [ecx],al
     a04:	13 5f 01             	adc    ebx,DWORD PTR [edi+0x1]
     a07:	00 00                	add    BYTE PTR [eax],al
     a09:	02 91 04 0c 9d 05    	add    dl,BYTE PTR [ecx+0x59d0c04]
     a0f:	00 00                	add    BYTE PTR [eax],al
     a11:	01 13                	add    DWORD PTR [ebx],edx
     a13:	3a 00                	cmp    al,BYTE PTR [eax]
     a15:	00 00                	add    BYTE PTR [eax],al
     a17:	02 91 08 0c 1c 03    	add    dl,BYTE PTR [ecx+0x31c0c08]
     a1d:	00 00                	add    BYTE PTR [eax],al
     a1f:	01 13                	add    DWORD PTR [ebx],edx
     a21:	3a 00                	cmp    al,BYTE PTR [eax]
     a23:	00 00                	add    BYTE PTR [eax],al
     a25:	02 91 0c 00 0b 5b    	add    dl,BYTE PTR [ecx+0x5b0b000c]
     a2b:	02 00                	add    al,BYTE PTR [eax]
     a2d:	00 01                	add    BYTE PTR [ecx],al
     a2f:	18 3a                	sbb    BYTE PTR [edx],bh
     a31:	00 00                	add    BYTE PTR [eax],al
     a33:	00 f8                	add    al,bh
     a35:	06                   	push   es
     a36:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
     a3c:	01 9c 65 02 00 00 0c 	add    DWORD PTR [ebp+eiz*2+0xc000002],ebx
     a43:	e5 03                	in     eax,0x3
     a45:	00 00                	add    BYTE PTR [eax],al
     a47:	01 18                	add    DWORD PTR [eax],ebx
     a49:	5f                   	pop    edi
     a4a:	01 00                	add    DWORD PTR [eax],eax
     a4c:	00 02                	add    BYTE PTR [edx],al
     a4e:	91                   	xchg   ecx,eax
     a4f:	00 0c c2             	add    BYTE PTR [edx+eax*8],cl
     a52:	03 00                	add    eax,DWORD PTR [eax]
     a54:	00 01                	add    BYTE PTR [ecx],al
     a56:	18 5f 01             	sbb    BYTE PTR [edi+0x1],bl
     a59:	00 00                	add    BYTE PTR [eax],al
     a5b:	02 91 04 0c 9d 05    	add    dl,BYTE PTR [ecx+0x59d0c04]
     a61:	00 00                	add    BYTE PTR [eax],al
     a63:	01 18                	add    DWORD PTR [eax],ebx
     a65:	3a 00                	cmp    al,BYTE PTR [eax]
     a67:	00 00                	add    BYTE PTR [eax],al
     a69:	02 91 08 0c 1c 03    	add    dl,BYTE PTR [ecx+0x31c0c08]
     a6f:	00 00                	add    BYTE PTR [eax],al
     a71:	01 18                	add    DWORD PTR [eax],ebx
     a73:	3a 00                	cmp    al,BYTE PTR [eax]
     a75:	00 00                	add    BYTE PTR [eax],al
     a77:	02 91 0c 00 0b 41    	add    dl,BYTE PTR [ecx+0x410b000c]
     a7d:	02 00                	add    al,BYTE PTR [eax]
     a7f:	00 01                	add    BYTE PTR [ecx],al
     a81:	1e                   	push   ds
     a82:	3a 00                	cmp    al,BYTE PTR [eax]
     a84:	00 00                	add    BYTE PTR [eax],al
     a86:	2d 07 00 9f 31       	sub    eax,0x319f0007
     a8b:	00 00                	add    BYTE PTR [eax],al
     a8d:	00 01                	add    BYTE PTR [ecx],al
     a8f:	9c                   	pushf  
     a90:	a9 02 00 00 0c       	test   eax,0xc000002
     a95:	9a 09 00 00 01 1e 61 	call   0x611e:0x1000009
     a9c:	01 00                	add    DWORD PTR [eax],eax
     a9e:	00 02                	add    BYTE PTR [edx],al
     aa0:	91                   	xchg   ecx,eax
     aa1:	00 0c c2             	add    BYTE PTR [edx+eax*8],cl
     aa4:	03 00                	add    eax,DWORD PTR [eax]
     aa6:	00 01                	add    BYTE PTR [ecx],al
     aa8:	1e                   	push   ds
     aa9:	61                   	popa   
     aaa:	01 00                	add    DWORD PTR [eax],eax
     aac:	00 02                	add    BYTE PTR [edx],al
     aae:	91                   	xchg   ecx,eax
     aaf:	04 0c                	add    al,0xc
     ab1:	51                   	push   ecx
     ab2:	03 00                	add    eax,DWORD PTR [eax]
     ab4:	00 01                	add    BYTE PTR [ecx],al
     ab6:	1e                   	push   ds
     ab7:	3a 00                	cmp    al,BYTE PTR [eax]
     ab9:	00 00                	add    BYTE PTR [eax],al
     abb:	02 91 08 00 0e 4b    	add    dl,BYTE PTR [ecx+0x4b0e0008]
     ac1:	00 00                	add    BYTE PTR [eax],al
     ac3:	00 02                	add    BYTE PTR [edx],al
     ac5:	34 56                	xor    al,0x56
     ac7:	00 00                	add    BYTE PTR [eax],al
     ac9:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
     acf:	9f                   	lahf   
     ad0:	0e                   	push   cs
     ad1:	af                   	scas   eax,DWORD PTR es:[edi]
     ad2:	00 00                	add    BYTE PTR [eax],al
     ad4:	00 02                	add    BYTE PTR [edx],al
     ad6:	35 56 00 00 00       	xor    eax,0x56
     adb:	05 03 44 54 00       	add    eax,0x544403
     ae0:	9f                   	lahf   
     ae1:	0e                   	push   cs
     ae2:	5b                   	pop    ebx
     ae3:	01 00                	add    DWORD PTR [eax],eax
     ae5:	00 02                	add    BYTE PTR [edx],al
     ae7:	36                   	ss
     ae8:	56                   	push   esi
     ae9:	00 00                	add    BYTE PTR [eax],al
     aeb:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
     af1:	9f                   	lahf   
     af2:	0e                   	push   cs
     af3:	54                   	push   esp
     af4:	00 00                	add    BYTE PTR [eax],al
     af6:	00 02                	add    BYTE PTR [edx],al
     af8:	37                   	aaa    
     af9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     afa:	00 00                	add    BYTE PTR [eax],al
     afc:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
     b02:	9f                   	lahf   
     b03:	0e                   	push   cs
     b04:	28 00                	sub    BYTE PTR [eax],al
     b06:	00 00                	add    BYTE PTR [eax],al
     b08:	03 4f fe             	add    ecx,DWORD PTR [edi-0x2]
     b0b:	02 00                	add    al,BYTE PTR [eax]
     b0d:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
     b13:	9f                   	lahf   
     b14:	05 04 61 01 00       	add    eax,0x16104
     b19:	00 00                	add    BYTE PTR [eax],al
     b1b:	b5 02                	mov    ch,0x2
     b1d:	00 00                	add    BYTE PTR [eax],al
     b1f:	04 00                	add    al,0x0
     b21:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     b24:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     b27:	f4                   	hlt    
     b28:	00 00                	add    BYTE PTR [eax],al
     b2a:	00 0c 4c             	add    BYTE PTR [esp+ecx*2],cl
     b2d:	04 00                	add    al,0x0
     b2f:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     b32:	00 00                	add    BYTE PTR [eax],al
     b34:	60                   	pusha  
     b35:	07                   	pop    es
     b36:	00 9f 66 01 00 00    	add    BYTE PTR [edi+0x166],bl
     b3c:	cd 05                	int    0x5
     b3e:	00 00                	add    BYTE PTR [eax],al
     b40:	02 01                	add    al,BYTE PTR [ecx]
     b42:	06                   	push   es
     b43:	64 00 00             	add    BYTE PTR fs:[eax],al
     b46:	00 02                	add    BYTE PTR [edx],al
     b48:	01 06                	add    DWORD PTR [esi],eax
     b4a:	5d                   	pop    ebp
     b4b:	00 00                	add    BYTE PTR [eax],al
     b4d:	00 02                	add    BYTE PTR [edx],al
     b4f:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     b55:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b5c:	02 08                	add    cl,BYTE PTR [eax]
     b5e:	05 00 00 00 00       	add    eax,0x0
     b63:	02 01                	add    al,BYTE PTR [ecx]
     b65:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     b68:	00 00                	add    BYTE PTR [eax],al
     b6a:	02 02                	add    al,BYTE PTR [edx]
     b6c:	07                   	pop    es
     b6d:	0e                   	push   cs
     b6e:	00 00                	add    BYTE PTR [eax],al
     b70:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     b73:	00 00                	add    BYTE PTR [eax],al
     b75:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     b78:	61                   	popa   
     b79:	00 00                	add    BYTE PTR [eax],al
     b7b:	00 02                	add    BYTE PTR [edx],al
     b7d:	04 07                	add    al,0x7
     b7f:	3e 00 00             	add    BYTE PTR ds:[eax],al
     b82:	00 02                	add    BYTE PTR [edx],al
     b84:	08 07                	or     BYTE PTR [edi],al
     b86:	34 00                	xor    al,0x0
     b88:	00 00                	add    BYTE PTR [eax],al
     b8a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b91:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     b94:	9b                   	fwait
     b95:	00 00                	add    BYTE PTR [eax],al
     b97:	00 02                	add    BYTE PTR [edx],al
     b99:	01 02                	add    DWORD PTR [edx],eax
     b9b:	95                   	xchg   ebp,eax
     b9c:	00 00                	add    BYTE PTR [eax],al
     b9e:	00 05 12 03 00 00    	add    BYTE PTR ds:0x312,al
     ba4:	04 61                	add    al,0x61
     ba6:	00 00                	add    BYTE PTR [eax],al
     ba8:	00 05 15 46 01 00    	add    BYTE PTR ds:0x14615,al
     bae:	00 06                	add    BYTE PTR [esi],al
     bb0:	77 03                	ja     bb5 <sysEnter_Vector-0x12f44b>
     bb2:	00 00                	add    BYTE PTR [eax],al
     bb4:	00 06                	add    BYTE PTR [esi],al
     bb6:	af                   	scas   eax,DWORD PTR es:[edi]
     bb7:	03 00                	add    eax,DWORD PTR [eax]
     bb9:	00 01                	add    BYTE PTR [ecx],al
     bbb:	06                   	push   es
     bbc:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bbd:	02 00                	add    al,BYTE PTR [eax]
     bbf:	00 02                	add    BYTE PTR [edx],al
     bc1:	06                   	push   es
     bc2:	04 03                	add    al,0x3
     bc4:	00 00                	add    BYTE PTR [eax],al
     bc6:	03 06                	add    eax,DWORD PTR [esi]
     bc8:	4e                   	dec    esi
     bc9:	02 00                	add    al,BYTE PTR [eax]
     bcb:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     bce:	c9                   	leave  
     bcf:	03 00                	add    eax,DWORD PTR [eax]
     bd1:	00 05 06 28 03 00    	add    BYTE PTR ds:0x32806,al
     bd7:	00 06                	add    BYTE PTR [esi],al
     bd9:	06                   	push   es
     bda:	61                   	popa   
     bdb:	02 00                	add    al,BYTE PTR [eax]
     bdd:	00 07                	add    BYTE PTR [edi],al
     bdf:	06                   	push   es
     be0:	fa                   	cli    
     be1:	03 00                	add    eax,DWORD PTR [eax]
     be3:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     be6:	6a 03                	push   0x3
     be8:	00 00                	add    BYTE PTR [eax],al
     bea:	59                   	pop    ecx
     beb:	06                   	push   es
     bec:	09 04 00             	or     DWORD PTR [eax+eax*1],eax
     bef:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
     bf2:	f0 02 00             	lock add al,BYTE PTR [eax]
     bf5:	00 97 07 87 03 00    	add    BYTE PTR [edi+0x38707],dl
     bfb:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     bfe:	07                   	pop    es
     bff:	5d                   	pop    ebp
     c00:	03 00                	add    eax,DWORD PTR [eax]
     c02:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
     c06:	ec                   	in     al,dx
     c07:	03 00                	add    eax,DWORD PTR [eax]
     c09:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     c0c:	07                   	pop    es
     c0d:	d2 02                	rol    BYTE PTR [edx],cl
     c0f:	00 00                	add    BYTE PTR [eax],al
     c11:	66 01 07             	add    WORD PTR [edi],ax
     c14:	21 04 00             	and    DWORD PTR [eax+eax*1],eax
     c17:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     c1a:	07                   	pop    es
     c1b:	35 03 00 00 68       	xor    eax,0x68000003
     c20:	01 07                	add    DWORD PTR [edi],eax
     c22:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     c23:	02 00                	add    al,BYTE PTR [eax]
     c25:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     c28:	07                   	pop    es
     c29:	9e                   	sahf   
     c2a:	03 00                	add    eax,DWORD PTR [eax]
     c2c:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     c2f:	07                   	pop    es
     c30:	e0 02                	loopne c34 <sysEnter_Vector-0x12f3cc>
     c32:	00 00                	add    BYTE PTR [eax],al
     c34:	71 01                	jno    c37 <sysEnter_Vector-0x12f3c9>
     c36:	07                   	pop    es
     c37:	d7                   	xlat   BYTE PTR ds:[ebx]
     c38:	03 00                	add    eax,DWORD PTR [eax]
     c3a:	00 00                	add    BYTE PTR [eax],al
     c3c:	03 07                	add    eax,DWORD PTR [edi]
     c3e:	42                   	inc    edx
     c3f:	03 00                	add    eax,DWORD PTR [eax]
     c41:	00 01                	add    BYTE PTR [ecx],al
     c43:	03 07                	add    eax,DWORD PTR [edi]
     c45:	b6 02                	mov    dh,0x2
     c47:	00 00                	add    BYTE PTR [eax],al
     c49:	02 03                	add    al,BYTE PTR [ebx]
     c4b:	07                   	pop    es
     c4c:	7b 02                	jnp    c50 <sysEnter_Vector-0x12f3b0>
     c4e:	00 00                	add    BYTE PTR [eax],al
     c50:	03 03                	add    eax,DWORD PTR [ebx]
     c52:	07                   	pop    es
     c53:	8b 02                	mov    eax,DWORD PTR [edx]
     c55:	00 00                	add    BYTE PTR [eax],al
     c57:	04 03                	add    al,0x3
     c59:	07                   	pop    es
     c5a:	c2 02 00             	ret    0x2
     c5d:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
     c63:	07                   	pop    es
     c64:	39 00                	cmp    DWORD PTR [eax],eax
     c66:	00 00                	add    BYTE PTR [eax],al
     c68:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     c6b:	e1 00                	loope  c6d <sysEnter_Vector-0x12f393>
     c6d:	00 00                	add    BYTE PTR [eax],al
     c6f:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
     c76:	7e 04                	jle    c7c <sysEnter_Vector-0x12f384>
     c78:	00 00                	add    BYTE PTR [eax],al
     c7a:	01 0f                	add    DWORD PTR [edi],ecx
     c7c:	60                   	pusha  
     c7d:	07                   	pop    es
     c7e:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
     c84:	01 9c 7e 01 00 00 0a 	add    DWORD PTR [esi+edi*2+0xa000001],ebx
     c8b:	c2 03 00             	ret    0x3
     c8e:	00 01                	add    BYTE PTR [ecx],al
     c90:	0f 54 01             	andps  xmm0,XMMWORD PTR [ecx]
     c93:	00 00                	add    BYTE PTR [eax],al
     c95:	02 91 00 00 09 71    	add    dl,BYTE PTR [ecx+0x71090000]
     c9b:	04 00                	add    al,0x0
     c9d:	00 01                	add    BYTE PTR [ecx],al
     c9f:	14 86                	adc    al,0x86
     ca1:	07                   	pop    es
     ca2:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
     ca8:	01 9c ae 01 00 00 0b 	add    DWORD PTR [esi+ebp*4+0xb000001],ebx
     caf:	63 00                	arpl   WORD PTR [eax],ax
     cb1:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     cb8:	91                   	xchg   ecx,eax
     cb9:	60                   	pusha  
     cba:	0c c2                	or     al,0xc2
     cbc:	03 00                	add    eax,DWORD PTR [eax]
     cbe:	00 01                	add    BYTE PTR [ecx],al
     cc0:	16                   	push   ss
     cc1:	ae                   	scas   al,BYTE PTR es:[edi]
     cc2:	01 00                	add    DWORD PTR [eax],eax
     cc4:	00 02                	add    BYTE PTR [edx],al
     cc6:	91                   	xchg   ecx,eax
     cc7:	72 00                	jb     cc9 <sysEnter_Vector-0x12f337>
     cc9:	0d 25 00 00 00       	or     eax,0x25
     cce:	be 01 00 00 0e       	mov    esi,0xe000001
     cd3:	4d                   	dec    ebp
     cd4:	01 00                	add    DWORD PTR [eax],eax
     cd6:	00 01                	add    BYTE PTR [ecx],al
     cd8:	00 0f                	add    BYTE PTR [edi],cl
     cda:	76 04                	jbe    ce0 <sysEnter_Vector-0x12f320>
     cdc:	00 00                	add    BYTE PTR [eax],al
     cde:	01 1f                	add    DWORD PTR [edi],ebx
     ce0:	25 00 00 00 c9       	and    eax,0xc9000000
     ce5:	07                   	pop    es
     ce6:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
     cec:	01 9c e4 01 00 00 10 	add    DWORD PTR [esp+eiz*8+0x10000001],ebx
     cf3:	63 00                	arpl   WORD PTR [eax],ax
     cf5:	01 21                	add    DWORD PTR [ecx],esp
     cf7:	25 00 00 00 02       	and    eax,0x2000000
     cfc:	91                   	xchg   ecx,eax
     cfd:	73 00                	jae    cff <sysEnter_Vector-0x12f301>
     cff:	11 6c 04 00          	adc    DWORD PTR [esp+eax*1+0x0],ebp
     d03:	00 01                	add    BYTE PTR [ecx],al
     d05:	2d 3a 00 00 00       	sub    eax,0x3a
     d0a:	0c 08                	or     al,0x8
     d0c:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
     d12:	01 9c 5d 02 00 00 0a 	add    DWORD PTR [ebp+ebx*2+0xa000002],ebx
     d19:	c2 03 00             	ret    0x3
     d1c:	00 01                	add    BYTE PTR [ecx],al
     d1e:	2d 54 01 00 00       	sub    eax,0x154
     d23:	02 91 00 0a 65 04    	add    dl,BYTE PTR [ecx+0x4650a00]
     d29:	00 00                	add    BYTE PTR [eax],al
     d2b:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
     d31:	02 91 04 0a 36 04    	add    dl,BYTE PTR [ecx+0x4360a04]
     d37:	00 00                	add    BYTE PTR [eax],al
     d39:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
     d3f:	02 91 08 0c 5e 04    	add    dl,BYTE PTR [ecx+0x45e0c08]
     d45:	00 00                	add    BYTE PTR [eax],al
     d47:	01 2f                	add    DWORD PTR [edi],ebp
     d49:	25 00 00 00 02       	and    eax,0x2000000
     d4e:	91                   	xchg   ecx,eax
     d4f:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     d52:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     d54:	00 01                	add    BYTE PTR [ecx],al
     d56:	30 3a                	xor    BYTE PTR [edx],bh
     d58:	00 00                	add    BYTE PTR [eax],al
     d5a:	00 02                	add    BYTE PTR [edx],al
     d5c:	91                   	xchg   ecx,eax
     d5d:	6c                   	ins    BYTE PTR es:[edi],dx
     d5e:	0c 47                	or     al,0x47
     d60:	04 00                	add    al,0x0
     d62:	00 01                	add    BYTE PTR [ecx],al
     d64:	31 ae 01 00 00 02    	xor    DWORD PTR [esi+0x2000001],ebp
     d6a:	91                   	xchg   ecx,eax
     d6b:	69 12 3d 04 00 00    	imul   edx,DWORD PTR [edx],0x43d
     d71:	01 36                	add    DWORD PTR [esi],esi
     d73:	49                   	dec    ecx
     d74:	08 00                	or     BYTE PTR [eax],al
     d76:	9f                   	lahf   
     d77:	00 13                	add    BYTE PTR [ebx],dl
     d79:	4b                   	dec    ebx
     d7a:	00 00                	add    BYTE PTR [eax],al
     d7c:	00 02                	add    BYTE PTR [edx],al
     d7e:	34 56                	xor    al,0x56
     d80:	00 00                	add    BYTE PTR [eax],al
     d82:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
     d88:	9f                   	lahf   
     d89:	13 af 00 00 00 02    	adc    ebp,DWORD PTR [edi+0x2000000]
     d8f:	35 56 00 00 00       	xor    eax,0x56
     d94:	05 03 44 54 00       	add    eax,0x544403
     d99:	9f                   	lahf   
     d9a:	13 5b 01             	adc    ebx,DWORD PTR [ebx+0x1]
     d9d:	00 00                	add    BYTE PTR [eax],al
     d9f:	02 36                	add    dh,BYTE PTR [esi]
     da1:	56                   	push   esi
     da2:	00 00                	add    BYTE PTR [eax],al
     da4:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
     daa:	9f                   	lahf   
     dab:	13 54 00 00          	adc    edx,DWORD PTR [eax+eax*1+0x0]
     daf:	00 02                	add    BYTE PTR [edx],al
     db1:	37                   	aaa    
     db2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     db3:	00 00                	add    BYTE PTR [eax],al
     db5:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
     dbb:	9f                   	lahf   
     dbc:	13 28                	adc    ebp,DWORD PTR [eax]
     dbe:	00 00                	add    BYTE PTR [eax],al
     dc0:	00 03                	add    BYTE PTR [ebx],al
     dc2:	4f                   	dec    edi
     dc3:	b2 02                	mov    dl,0x2
     dc5:	00 00                	add    BYTE PTR [eax],al
     dc7:	05 03 48 54 00       	add    eax,0x544803
     dcc:	9f                   	lahf   
     dcd:	08 04 54             	or     BYTE PTR [esp+edx*2],al
     dd0:	01 00                	add    DWORD PTR [eax],eax
     dd2:	00 00                	add    BYTE PTR [eax],al
     dd4:	79 09                	jns    ddf <sysEnter_Vector-0x12f221>
     dd6:	00 00                	add    BYTE PTR [eax],al
     dd8:	04 00                	add    al,0x0
     dda:	22 05 00 00 04 01    	and    al,BYTE PTR ds:0x1040000
     de0:	f4                   	hlt    
     de1:	00 00                	add    BYTE PTR [eax],al
     de3:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
     de6:	06                   	push   es
     de7:	00 00                	add    BYTE PTR [eax],al
     de9:	72 00                	jb     deb <sysEnter_Vector-0x12f215>
     deb:	00 00                	add    BYTE PTR [eax],al
     ded:	c8 08 00 9f          	enter  0x8,0x9f
     df1:	3a 0a                	cmp    cl,BYTE PTR [edx]
     df3:	00 00                	add    BYTE PTR [eax],al
     df5:	fa                   	cli    
     df6:	06                   	push   es
     df7:	00 00                	add    BYTE PTR [eax],al
     df9:	02 ba 05 00 00 02    	add    bh,BYTE PTR [edx+0x2000005]
     dff:	28 30                	sub    BYTE PTR [eax],dh
     e01:	00 00                	add    BYTE PTR [eax],al
     e03:	00 03                	add    BYTE PTR [ebx],al
     e05:	04 e4                	add    al,0xe4
     e07:	04 00                	add    al,0x0
     e09:	00 3a                	add    BYTE PTR [edx],bh
     e0b:	00 00                	add    BYTE PTR [eax],al
     e0d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e10:	06                   	push   es
     e11:	64 00 00             	add    BYTE PTR fs:[eax],al
     e14:	00 02                	add    BYTE PTR [edx],al
     e16:	c1 05 00 00 02 62 25 	rol    DWORD PTR ds:0x62020000,0x25
     e1d:	00 00                	add    BYTE PTR [eax],al
     e1f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e22:	06                   	push   es
     e23:	5d                   	pop    ebp
     e24:	00 00                	add    BYTE PTR [eax],al
     e26:	00 04 02             	add    BYTE PTR [edx+eax*1],al
     e29:	05 ea 00 00 00       	add    eax,0xea
     e2e:	05 04 05 69 6e       	add    eax,0x6e690504
     e33:	74 00                	je     e35 <sysEnter_Vector-0x12f1cb>
     e35:	04 08                	add    al,0x8
     e37:	05 00 00 00 00       	add    eax,0x0
     e3c:	04 01                	add    al,0x1
     e3e:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     e41:	00 00                	add    BYTE PTR [eax],al
     e43:	04 02                	add    al,0x2
     e45:	07                   	pop    es
     e46:	0e                   	push   cs
     e47:	00 00                	add    BYTE PTR [eax],al
     e49:	00 02                	add    BYTE PTR [edx],al
     e4b:	69 00 00 00 03 34    	imul   eax,DWORD PTR [eax],0x34030000
     e51:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e57:	07                   	pop    es
     e58:	3e 00 00             	add    BYTE PTR ds:[eax],al
     e5b:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     e5e:	07                   	pop    es
     e5f:	34 00                	xor    al,0x0
     e61:	00 00                	add    BYTE PTR [eax],al
     e63:	02 a4 04 00 00 03 56 	add    ah,BYTE PTR [esp+eax*1+0x56030000]
     e6a:	81 00 00 00 02 9d    	add    DWORD PTR [eax],0x9d020000
     e70:	04 00                	add    al,0x0
     e72:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
     e75:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e7b:	05 05 00 00 00       	add    eax,0x5
     e80:	04 0c                	add    al,0xc
     e82:	04 9b                	add    al,0x9b
     e84:	00 00                	add    BYTE PTR [eax],al
     e86:	00 06                	add    BYTE PTR [esi],al
     e88:	04 b9                	add    al,0xb9
     e8a:	00 00                	add    BYTE PTR [eax],al
     e8c:	00 07                	add    BYTE PTR [edi],al
     e8e:	3a 00                	cmp    al,BYTE PTR [eax]
     e90:	00 00                	add    BYTE PTR [eax],al
     e92:	04 01                	add    al,0x1
     e94:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
     e9a:	12 03                	adc    al,BYTE PTR [ebx]
     e9c:	00 00                	add    BYTE PTR [eax],al
     e9e:	04 81                	add    al,0x81
     ea0:	00 00                	add    BYTE PTR [eax],al
     ea2:	00 05 15 87 01 00    	add    BYTE PTR ds:0x18715,al
     ea8:	00 09                	add    BYTE PTR [ecx],cl
     eaa:	77 03                	ja     eaf <sysEnter_Vector-0x12f151>
     eac:	00 00                	add    BYTE PTR [eax],al
     eae:	00 09                	add    BYTE PTR [ecx],cl
     eb0:	af                   	scas   eax,DWORD PTR es:[edi]
     eb1:	03 00                	add    eax,DWORD PTR [eax]
     eb3:	00 01                	add    BYTE PTR [ecx],al
     eb5:	09 6e 02             	or     DWORD PTR [esi+0x2],ebp
     eb8:	00 00                	add    BYTE PTR [eax],al
     eba:	02 09                	add    cl,BYTE PTR [ecx]
     ebc:	04 03                	add    al,0x3
     ebe:	00 00                	add    BYTE PTR [eax],al
     ec0:	03 09                	add    ecx,DWORD PTR [ecx]
     ec2:	4e                   	dec    esi
     ec3:	02 00                	add    al,BYTE PTR [eax]
     ec5:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
     ec8:	c9                   	leave  
     ec9:	03 00                	add    eax,DWORD PTR [eax]
     ecb:	00 05 09 28 03 00    	add    BYTE PTR ds:0x32809,al
     ed1:	00 06                	add    BYTE PTR [esi],al
     ed3:	09 61 02             	or     DWORD PTR [ecx+0x2],esp
     ed6:	00 00                	add    BYTE PTR [eax],al
     ed8:	07                   	pop    es
     ed9:	09 fa                	or     edx,edi
     edb:	03 00                	add    eax,DWORD PTR [eax]
     edd:	00 4f 09             	add    BYTE PTR [edi+0x9],cl
     ee0:	6a 03                	push   0x3
     ee2:	00 00                	add    BYTE PTR [eax],al
     ee4:	59                   	pop    ecx
     ee5:	09 09                	or     DWORD PTR [ecx],ecx
     ee7:	04 00                	add    al,0x0
     ee9:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
     eec:	f0 02 00             	lock add al,BYTE PTR [eax]
     eef:	00 97 0a 87 03 00    	add    BYTE PTR [edi+0x3870a],dl
     ef5:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     ef8:	0a 5d 03             	or     bl,BYTE PTR [ebp+0x3]
     efb:	00 00                	add    BYTE PTR [eax],al
     efd:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
     f00:	ec                   	in     al,dx
     f01:	03 00                	add    eax,DWORD PTR [eax]
     f03:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     f06:	0a d2                	or     dl,dl
     f08:	02 00                	add    al,BYTE PTR [eax]
     f0a:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     f0d:	0a 21                	or     ah,BYTE PTR [ecx]
     f0f:	04 00                	add    al,0x0
     f11:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     f14:	0a 35 03 00 00 68    	or     dh,BYTE PTR ds:0x68000003
     f1a:	01 0a                	add    DWORD PTR [edx],ecx
     f1c:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     f1d:	02 00                	add    al,BYTE PTR [eax]
     f1f:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     f22:	0a 9e 03 00 00 70    	or     bl,BYTE PTR [esi+0x70000003]
     f28:	01 0a                	add    DWORD PTR [edx],ecx
     f2a:	e0 02                	loopne f2e <sysEnter_Vector-0x12f0d2>
     f2c:	00 00                	add    BYTE PTR [eax],al
     f2e:	71 01                	jno    f31 <sysEnter_Vector-0x12f0cf>
     f30:	0a d7                	or     dl,bh
     f32:	03 00                	add    eax,DWORD PTR [eax]
     f34:	00 00                	add    BYTE PTR [eax],al
     f36:	03 0a                	add    ecx,DWORD PTR [edx]
     f38:	42                   	inc    edx
     f39:	03 00                	add    eax,DWORD PTR [eax]
     f3b:	00 01                	add    BYTE PTR [ecx],al
     f3d:	03 0a                	add    ecx,DWORD PTR [edx]
     f3f:	b6 02                	mov    dh,0x2
     f41:	00 00                	add    BYTE PTR [eax],al
     f43:	02 03                	add    al,BYTE PTR [ebx]
     f45:	0a 7b 02             	or     bh,BYTE PTR [ebx+0x2]
     f48:	00 00                	add    BYTE PTR [eax],al
     f4a:	03 03                	add    eax,DWORD PTR [ebx]
     f4c:	0a 8b 02 00 00 04    	or     cl,BYTE PTR [ebx+0x4000002]
     f52:	03 0a                	add    ecx,DWORD PTR [edx]
     f54:	c2 02 00             	ret    0x2
     f57:	00 05 03 00 04 04    	add    BYTE PTR ds:0x4040003,al
     f5d:	07                   	pop    es
     f5e:	39 00                	cmp    DWORD PTR [eax],eax
     f60:	00 00                	add    BYTE PTR [eax],al
     f62:	04 04                	add    al,0x4
     f64:	07                   	pop    es
     f65:	e1 00                	loope  f67 <sysEnter_Vector-0x12f099>
     f67:	00 00                	add    BYTE PTR [eax],al
     f69:	0b 04 06             	or     eax,DWORD PTR [esi+eax*1]
     f6c:	04 3a                	add    al,0x3a
     f6e:	00 00                	add    BYTE PTR [eax],al
     f70:	00 0c 84             	add    BYTE PTR [esp+eax*4],cl
     f73:	05 00 00 01 10       	add    eax,0x10010000
     f78:	5a                   	pop    edx
     f79:	00 00                	add    BYTE PTR [eax],al
     f7b:	00 c8                	add    al,cl
     f7d:	08 00                	or     BYTE PTR [eax],al
     f7f:	9f                   	lahf   
     f80:	3a 00                	cmp    al,BYTE PTR [eax]
     f82:	00 00                	add    BYTE PTR [eax],al
     f84:	01 9c 0b 02 00 00 0d 	add    DWORD PTR [ebx+ecx*1+0xd000002],ebx
     f8b:	2b 05 00 00 01 10    	sub    eax,DWORD PTR ds:0x10010000
     f91:	5a                   	pop    edx
     f92:	00 00                	add    BYTE PTR [eax],al
     f94:	00 02                	add    BYTE PTR [edx],al
     f96:	91                   	xchg   ecx,eax
     f97:	00 0d d1 05 00 00    	add    BYTE PTR ds:0x5d1,cl
     f9d:	01 10                	add    DWORD PTR [eax],edx
     f9f:	76 00                	jbe    fa1 <sysEnter_Vector-0x12f05f>
     fa1:	00 00                	add    BYTE PTR [eax],al
     fa3:	02 91 04 0d d8 05    	add    dl,BYTE PTR [ecx+0x5d80d04]
     fa9:	00 00                	add    BYTE PTR [eax],al
     fab:	01 10                	add    DWORD PTR [eax],edx
     fad:	76 00                	jbe    faf <sysEnter_Vector-0x12f051>
     faf:	00 00                	add    BYTE PTR [eax],al
     fb1:	02 91 08 0d df 05    	add    dl,BYTE PTR [ecx+0x5df0d08]
     fb7:	00 00                	add    BYTE PTR [eax],al
     fb9:	01 10                	add    DWORD PTR [eax],edx
     fbb:	76 00                	jbe    fbd <sysEnter_Vector-0x12f043>
     fbd:	00 00                	add    BYTE PTR [eax],al
     fbf:	02 91 0c 0d e6 05    	add    dl,BYTE PTR [ecx+0x5e60d0c]
     fc5:	00 00                	add    BYTE PTR [eax],al
     fc7:	01 10                	add    DWORD PTR [eax],edx
     fc9:	76 00                	jbe    fcb <sysEnter_Vector-0x12f035>
     fcb:	00 00                	add    BYTE PTR [eax],al
     fcd:	02 91 10 0e 83 04    	add    dl,BYTE PTR [ecx+0x4830e10]
     fd3:	00 00                	add    BYTE PTR [eax],al
     fd5:	01 12                	add    DWORD PTR [edx],edx
     fd7:	5a                   	pop    edx
     fd8:	00 00                	add    BYTE PTR [eax],al
     fda:	00 02                	add    BYTE PTR [edx],al
     fdc:	91                   	xchg   ecx,eax
     fdd:	6c                   	ins    BYTE PTR es:[edi],dx
     fde:	00 0c 78             	add    BYTE PTR [eax+edi*2],cl
     fe1:	05 00 00 01 17       	add    eax,0x17010000
     fe6:	5a                   	pop    edx
     fe7:	00 00                	add    BYTE PTR [eax],al
     fe9:	00 02                	add    BYTE PTR [edx],al
     feb:	09 00                	or     DWORD PTR [eax],eax
     fed:	9f                   	lahf   
     fee:	3c 00                	cmp    al,0x0
     ff0:	00 00                	add    BYTE PTR [eax],al
     ff2:	01 9c 6b 02 00 00 0d 	add    DWORD PTR [ebx+ebp*2+0xd000002],ebx
     ff9:	2b 05 00 00 01 17    	sub    eax,DWORD PTR ds:0x17010000
     fff:	5a                   	pop    edx
    1000:	00 00                	add    BYTE PTR [eax],al
    1002:	00 02                	add    BYTE PTR [edx],al
    1004:	91                   	xchg   ecx,eax
    1005:	00 0d d1 05 00 00    	add    BYTE PTR ds:0x5d1,cl
    100b:	01 17                	add    DWORD PTR [edi],edx
    100d:	76 00                	jbe    100f <sysEnter_Vector-0x12eff1>
    100f:	00 00                	add    BYTE PTR [eax],al
    1011:	02 91 04 0d d8 05    	add    dl,BYTE PTR [ecx+0x5d80d04]
    1017:	00 00                	add    BYTE PTR [eax],al
    1019:	01 17                	add    DWORD PTR [edi],edx
    101b:	76 00                	jbe    101d <sysEnter_Vector-0x12efe3>
    101d:	00 00                	add    BYTE PTR [eax],al
    101f:	02 91 08 0d df 05    	add    dl,BYTE PTR [ecx+0x5df0d08]
    1025:	00 00                	add    BYTE PTR [eax],al
    1027:	01 17                	add    DWORD PTR [edi],edx
    1029:	76 00                	jbe    102b <sysEnter_Vector-0x12efd5>
    102b:	00 00                	add    BYTE PTR [eax],al
    102d:	02 91 0c 0e 83 04    	add    dl,BYTE PTR [ecx+0x4830e0c]
    1033:	00 00                	add    BYTE PTR [eax],al
    1035:	01 19                	add    DWORD PTR [ecx],ebx
    1037:	5a                   	pop    edx
    1038:	00 00                	add    BYTE PTR [eax],al
    103a:	00 02                	add    BYTE PTR [edx],al
    103c:	91                   	xchg   ecx,eax
    103d:	6c                   	ins    BYTE PTR es:[edi],dx
    103e:	00 0c 6c             	add    BYTE PTR [esp+ebp*2],cl
    1041:	05 00 00 01 1e       	add    eax,0x1e010000
    1046:	5a                   	pop    edx
    1047:	00 00                	add    BYTE PTR [eax],al
    1049:	00 3e                	add    BYTE PTR [esi],bh
    104b:	09 00                	or     DWORD PTR [eax],eax
    104d:	9f                   	lahf   
    104e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1051:	00 01                	add    BYTE PTR [ecx],al
    1053:	9c                   	pushf  
    1054:	bd 02 00 00 0d       	mov    ebp,0xd000002
    1059:	2b 05 00 00 01 1e    	sub    eax,DWORD PTR ds:0x1e010000
    105f:	5a                   	pop    edx
    1060:	00 00                	add    BYTE PTR [eax],al
    1062:	00 02                	add    BYTE PTR [edx],al
    1064:	91                   	xchg   ecx,eax
    1065:	00 0d d1 05 00 00    	add    BYTE PTR ds:0x5d1,cl
    106b:	01 1e                	add    DWORD PTR [esi],ebx
    106d:	76 00                	jbe    106f <sysEnter_Vector-0x12ef91>
    106f:	00 00                	add    BYTE PTR [eax],al
    1071:	02 91 04 0d d8 05    	add    dl,BYTE PTR [ecx+0x5d80d04]
    1077:	00 00                	add    BYTE PTR [eax],al
    1079:	01 1e                	add    DWORD PTR [esi],ebx
    107b:	76 00                	jbe    107d <sysEnter_Vector-0x12ef83>
    107d:	00 00                	add    BYTE PTR [eax],al
    107f:	02 91 08 0e 83 04    	add    dl,BYTE PTR [ecx+0x4830e08]
    1085:	00 00                	add    BYTE PTR [eax],al
    1087:	01 20                	add    DWORD PTR [eax],esp
    1089:	5a                   	pop    edx
    108a:	00 00                	add    BYTE PTR [eax],al
    108c:	00 02                	add    BYTE PTR [edx],al
    108e:	91                   	xchg   ecx,eax
    108f:	6c                   	ins    BYTE PTR es:[edi],dx
    1090:	00 0c 60             	add    BYTE PTR [eax+eiz*2],cl
    1093:	05 00 00 01 25       	add    eax,0x25010000
    1098:	5a                   	pop    edx
    1099:	00 00                	add    BYTE PTR [eax],al
    109b:	00 7c 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],bh
    109f:	9f                   	lahf   
    10a0:	40                   	inc    eax
    10a1:	00 00                	add    BYTE PTR [eax],al
    10a3:	00 01                	add    BYTE PTR [ecx],al
    10a5:	9c                   	pushf  
    10a6:	01 03                	add    DWORD PTR [ebx],eax
    10a8:	00 00                	add    BYTE PTR [eax],al
    10aa:	0d 2b 05 00 00       	or     eax,0x52b
    10af:	01 25 5a 00 00 00    	add    DWORD PTR ds:0x5a,esp
    10b5:	02 91 00 0d d1 05    	add    dl,BYTE PTR [ecx+0x5d10d00]
    10bb:	00 00                	add    BYTE PTR [eax],al
    10bd:	01 25 76 00 00 00    	add    DWORD PTR ds:0x76,esp
    10c3:	02 91 04 0e 83 04    	add    dl,BYTE PTR [ecx+0x4830e04]
    10c9:	00 00                	add    BYTE PTR [eax],al
    10cb:	01 27                	add    DWORD PTR [edi],esp
    10cd:	5a                   	pop    edx
    10ce:	00 00                	add    BYTE PTR [eax],al
    10d0:	00 02                	add    BYTE PTR [edx],al
    10d2:	91                   	xchg   ecx,eax
    10d3:	6c                   	ins    BYTE PTR es:[edi],dx
    10d4:	00 0c 54             	add    BYTE PTR [esp+edx*2],cl
    10d7:	05 00 00 01 2c       	add    eax,0x2c010000
    10dc:	5a                   	pop    edx
    10dd:	00 00                	add    BYTE PTR [eax],al
    10df:	00 bc 09 00 9f 42 00 	add    BYTE PTR [ecx+ecx*1+0x429f00],bh
    10e6:	00 00                	add    BYTE PTR [eax],al
    10e8:	01 9c 37 03 00 00 0d 	add    DWORD PTR [edi+esi*1+0xd000003],ebx
    10ef:	2b 05 00 00 01 2c    	sub    eax,DWORD PTR ds:0x2c010000
    10f5:	5a                   	pop    edx
    10f6:	00 00                	add    BYTE PTR [eax],al
    10f8:	00 02                	add    BYTE PTR [edx],al
    10fa:	91                   	xchg   ecx,eax
    10fb:	00 0e                	add    BYTE PTR [esi],cl
    10fd:	83 04 00 00          	add    DWORD PTR [eax+eax*1],0x0
    1101:	01 2e                	add    DWORD PTR [esi],ebp
    1103:	5a                   	pop    edx
    1104:	00 00                	add    BYTE PTR [eax],al
    1106:	00 02                	add    BYTE PTR [edx],al
    1108:	91                   	xchg   ecx,eax
    1109:	6c                   	ins    BYTE PTR es:[edi],dx
    110a:	00 0f                	add    BYTE PTR [edi],cl
    110c:	d4 04                	aam    0x4
    110e:	00 00                	add    BYTE PTR [eax],al
    1110:	01 33                	add    DWORD PTR [ebx],esi
    1112:	fe 09                	dec    BYTE PTR [ecx]
    1114:	00 9f bf 00 00 00    	add    BYTE PTR [edi+0xbf],bl
    111a:	01 9c 10 51 06 00 00 	add    DWORD PTR [eax+edx*1+0x651],ebx
    1121:	01 45 bd             	add    DWORD PTR [ebp-0x43],eax
    1124:	0a 00                	or     al,BYTE PTR [eax]
    1126:	9f                   	lahf   
    1127:	1f                   	pop    ds
    1128:	00 00                	add    BYTE PTR [eax],al
    112a:	00 01                	add    BYTE PTR [ecx],al
    112c:	9c                   	pushf  
    112d:	11 8a 04 00 00 01    	adc    DWORD PTR [edx+0x1000004],ecx
    1133:	4a                   	dec    edx
    1134:	5a                   	pop    edx
    1135:	00 00                	add    BYTE PTR [eax],al
    1137:	00 dc                	add    ah,bl
    1139:	0a 00                	or     al,BYTE PTR [eax]
    113b:	9f                   	lahf   
    113c:	59                   	pop    ecx
    113d:	00 00                	add    BYTE PTR [eax],al
    113f:	00 01                	add    BYTE PTR [ecx],al
    1141:	9c                   	pushf  
    1142:	9e                   	sahf   
    1143:	03 00                	add    eax,DWORD PTR [eax]
    1145:	00 0d f9 05 00 00    	add    BYTE PTR ds:0x5f9,cl
    114b:	01 4a b3             	add    DWORD PTR [edx-0x4d],ecx
    114e:	00 00                	add    BYTE PTR [eax],al
    1150:	00 02                	add    BYTE PTR [edx],al
    1152:	91                   	xchg   ecx,eax
    1153:	00 12                	add    BYTE PTR [edx],dl
    1155:	0e                   	push   cs
    1156:	87 06                	xchg   DWORD PTR [esi],eax
    1158:	00 00                	add    BYTE PTR [eax],al
    115a:	01 4c 41 00          	add    DWORD PTR [ecx+eax*2+0x0],ecx
    115e:	00 00                	add    BYTE PTR [eax],al
    1160:	02 91 68 0e 9d 05    	add    dl,BYTE PTR [ecx+0x59d0e68]
    1166:	00 00                	add    BYTE PTR [eax],al
    1168:	01 4f 5a             	add    DWORD PTR [edi+0x5a],ecx
    116b:	00 00                	add    BYTE PTR [eax],al
    116d:	00 02                	add    BYTE PTR [edx],al
    116f:	91                   	xchg   ecx,eax
    1170:	6c                   	ins    BYTE PTR es:[edi],dx
    1171:	00 11                	add    BYTE PTR [ecx],dl
    1173:	06                   	push   es
    1174:	08 00                	or     BYTE PTR [eax],al
    1176:	00 01                	add    BYTE PTR [ecx],al
    1178:	54                   	push   esp
    1179:	5a                   	pop    edx
    117a:	00 00                	add    BYTE PTR [eax],al
    117c:	00 35 0b 00 9f 59    	add    BYTE PTR ds:0x599f000b,dh
    1182:	00 00                	add    BYTE PTR [eax],al
    1184:	00 01                	add    BYTE PTR [ecx],al
    1186:	9c                   	pushf  
    1187:	e3 03                	jecxz  118c <sysEnter_Vector-0x12ee74>
    1189:	00 00                	add    BYTE PTR [eax],al
    118b:	0d f9 05 00 00       	or     eax,0x5f9
    1190:	01 54 b3 00          	add    DWORD PTR [ebx+esi*4+0x0],edx
    1194:	00 00                	add    BYTE PTR [eax],al
    1196:	02 91 00 12 0e 87    	add    dl,BYTE PTR [ecx-0x78f1ee00]
    119c:	06                   	push   es
    119d:	00 00                	add    BYTE PTR [eax],al
    119f:	01 56 41             	add    DWORD PTR [esi+0x41],edx
    11a2:	00 00                	add    BYTE PTR [eax],al
    11a4:	00 02                	add    BYTE PTR [edx],al
    11a6:	91                   	xchg   ecx,eax
    11a7:	68 0e 9d 05 00       	push   0x59d0e
    11ac:	00 01                	add    BYTE PTR [ecx],al
    11ae:	59                   	pop    ecx
    11af:	5a                   	pop    edx
    11b0:	00 00                	add    BYTE PTR [eax],al
    11b2:	00 02                	add    BYTE PTR [edx],al
    11b4:	91                   	xchg   ecx,eax
    11b5:	6c                   	ins    BYTE PTR es:[edi],dx
    11b6:	00 11                	add    BYTE PTR [ecx],dl
    11b8:	8c 06                	mov    WORD PTR [esi],es
    11ba:	00 00                	add    BYTE PTR [eax],al
    11bc:	01 5f 5a             	add    DWORD PTR [edi+0x5a],ebx
    11bf:	00 00                	add    BYTE PTR [eax],al
    11c1:	00 8e 0b 00 9f 34    	add    BYTE PTR [esi+0x349f000b],cl
    11c7:	00 00                	add    BYTE PTR [eax],al
    11c9:	00 01                	add    BYTE PTR [ecx],al
    11cb:	9c                   	pushf  
    11cc:	1a 04 00             	sbb    al,BYTE PTR [eax+eax*1]
    11cf:	00 0d f9 05 00 00    	add    BYTE PTR ds:0x5f9,cl
    11d5:	01 5f b3             	add    DWORD PTR [edi-0x4d],ebx
    11d8:	00 00                	add    BYTE PTR [eax],al
    11da:	00 02                	add    BYTE PTR [edx],al
    11dc:	91                   	xchg   ecx,eax
    11dd:	00 12                	add    BYTE PTR [edx],dl
    11df:	0e                   	push   cs
    11e0:	87 06                	xchg   DWORD PTR [esi],eax
    11e2:	00 00                	add    BYTE PTR [eax],al
    11e4:	01 61 41             	add    DWORD PTR [ecx+0x41],esp
    11e7:	00 00                	add    BYTE PTR [eax],al
    11e9:	00 02                	add    BYTE PTR [edx],al
    11eb:	91                   	xchg   ecx,eax
    11ec:	74 00                	je     11ee <sysEnter_Vector-0x12ee12>
    11ee:	11 c9                	adc    ecx,ecx
    11f0:	05 00 00 01 67       	add    eax,0x67010000
    11f5:	5a                   	pop    edx
    11f6:	00 00                	add    BYTE PTR [eax],al
    11f8:	00 c2                	add    dl,al
    11fa:	0b 00                	or     eax,DWORD PTR [eax]
    11fc:	9f                   	lahf   
    11fd:	37                   	aaa    
    11fe:	00 00                	add    BYTE PTR [eax],al
    1200:	00 01                	add    BYTE PTR [ecx],al
    1202:	9c                   	pushf  
    1203:	5f                   	pop    edi
    1204:	04 00                	add    al,0x0
    1206:	00 0d 20 05 00 00    	add    BYTE PTR ds:0x520,cl
    120c:	01 67 76             	add    DWORD PTR [edi+0x76],esp
    120f:	00 00                	add    BYTE PTR [eax],al
    1211:	00 02                	add    BYTE PTR [edx],al
    1213:	91                   	xchg   ecx,eax
    1214:	00 0d f9 05 00 00    	add    BYTE PTR ds:0x5f9,cl
    121a:	01 67 b3             	add    DWORD PTR [edi-0x4d],esp
    121d:	00 00                	add    BYTE PTR [eax],al
    121f:	00 02                	add    BYTE PTR [edx],al
    1221:	91                   	xchg   ecx,eax
    1222:	04 12                	add    al,0x12
    1224:	0e                   	push   cs
    1225:	87 06                	xchg   DWORD PTR [esi],eax
    1227:	00 00                	add    BYTE PTR [eax],al
    1229:	01 69 41             	add    DWORD PTR [ecx+0x41],ebp
    122c:	00 00                	add    BYTE PTR [eax],al
    122e:	00 02                	add    BYTE PTR [edx],al
    1230:	91                   	xchg   ecx,eax
    1231:	74 00                	je     1233 <sysEnter_Vector-0x12edcd>
    1233:	0c 3f                	or     al,0x3f
    1235:	05 00 00 01 71       	add    eax,0x71010000
    123a:	81 00 00 00 f9 0b    	add    DWORD PTR [eax],0xbf90000
    1240:	00 9f 72 00 00 00    	add    BYTE PTR [edi+0x72],bl
    1246:	01 9c ab 04 00 00 0d 	add    DWORD PTR [ebx+ebp*4+0xd000004],ebx
    124d:	0c 06                	or     al,0x6
    124f:	00 00                	add    BYTE PTR [eax],al
    1251:	01 71 81             	add    DWORD PTR [ecx-0x7f],esi
    1254:	00 00                	add    BYTE PTR [eax],al
    1256:	00 02                	add    BYTE PTR [edx],al
    1258:	91                   	xchg   ecx,eax
    1259:	00 13                	add    BYTE PTR [ebx],dl
    125b:	0b 0c 00             	or     ecx,DWORD PTR [eax+eax*1]
    125e:	9f                   	lahf   
    125f:	54                   	push   esp
    1260:	00 00                	add    BYTE PTR [eax],al
    1262:	00 14 73             	add    BYTE PTR [ebx+esi*2],dl
    1265:	32 00                	xor    al,BYTE PTR [eax]
    1267:	01 73 76             	add    DWORD PTR [ebx+0x76],esi
    126a:	00 00                	add    BYTE PTR [eax],al
    126c:	00 02                	add    BYTE PTR [edx],al
    126e:	91                   	xchg   ecx,eax
    126f:	6c                   	ins    BYTE PTR es:[edi],dx
    1270:	14 63                	adc    al,0x63
    1272:	74 00                	je     1274 <sysEnter_Vector-0x12ed8c>
    1274:	01 73 76             	add    DWORD PTR [ebx+0x76],esi
    1277:	00 00                	add    BYTE PTR [eax],al
    1279:	00 02                	add    BYTE PTR [edx],al
    127b:	91                   	xchg   ecx,eax
    127c:	68 00 00 0f 93       	push   0x930f0000
    1281:	06                   	push   es
    1282:	00 00                	add    BYTE PTR [eax],al
    1284:	01 77 6b             	add    DWORD PTR [edi+0x6b],esi
    1287:	0c 00                	or     al,0x0
    1289:	9f                   	lahf   
    128a:	1d 00 00 00 01       	sbb    eax,0x1000000
    128f:	9c                   	pushf  
    1290:	15 7a 06 00 00       	adc    eax,0x67a
    1295:	01 7c 88 0c          	add    DWORD PTR [eax+ecx*4+0xc],edi
    1299:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    129f:	01 9c fc 04 00 00 0d 	add    DWORD PTR [esp+edi*8+0xd000004],ebx
    12a6:	00 06                	add    BYTE PTR [esi],al
    12a8:	00 00                	add    BYTE PTR [eax],al
    12aa:	01 7c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],edi
    12ae:	00 00                	add    BYTE PTR [eax],al
    12b0:	02 91 00 0d 6f 06    	add    dl,BYTE PTR [ecx+0x66f0d00]
    12b6:	00 00                	add    BYTE PTR [eax],al
    12b8:	01 7c 95 01          	add    DWORD PTR [ebp+edx*4+0x1],edi
    12bc:	00 00                	add    BYTE PTR [eax],al
    12be:	02 91 04 0d ae 04    	add    dl,BYTE PTR [ecx+0x4ae0d04]
    12c4:	00 00                	add    BYTE PTR [eax],al
    12c6:	01 7c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],edi
    12ca:	00 00                	add    BYTE PTR [eax],al
    12cc:	02 91 08 00 16 fc    	add    dl,BYTE PTR [ecx-0x3e9fff8]
    12d2:	04 00                	add    al,0x0
    12d4:	00 01                	add    BYTE PTR [ecx],al
    12d6:	81 5a 00 00 00 b1 0c 	sbb    DWORD PTR [edx+0x0],0xcb10000
    12dd:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    12e3:	01 9c 24 05 00 00 0e 	add    DWORD PTR [esp+0xe000005],ebx
    12ea:	83 04 00 00          	add    DWORD PTR [eax+eax*1],0x0
    12ee:	01 83 76 00 00 00    	add    DWORD PTR [ebx+0x76],eax
    12f4:	02 91 74 00 11 07    	add    dl,BYTE PTR [ecx+0x7110074]
    12fa:	06                   	push   es
    12fb:	00 00                	add    BYTE PTR [eax],al
    12fd:	01 89 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],ecx
    1303:	da 0c 00             	fimul  DWORD PTR [eax+eax*1]
    1306:	9f                   	lahf   
    1307:	4c                   	dec    esp
    1308:	00 00                	add    BYTE PTR [eax],al
    130a:	00 01                	add    BYTE PTR [ecx],al
    130c:	9c                   	pushf  
    130d:	76 05                	jbe    1314 <sysEnter_Vector-0x12ecec>
    130f:	00 00                	add    BYTE PTR [eax],al
    1311:	0d 9a 09 00 00       	or     eax,0x99a
    1316:	01 89 97 01 00 00    	add    DWORD PTR [ecx+0x197],ecx
    131c:	02 91 00 0d 3d 06    	add    dl,BYTE PTR [ecx+0x63d0d00]
    1322:	00 00                	add    BYTE PTR [eax],al
    1324:	01 89 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],ecx
    132a:	02 91 04 0d 5e 06    	add    dl,BYTE PTR [ecx+0x65e0d04]
    1330:	00 00                	add    BYTE PTR [eax],al
    1332:	01 89 76 05 00 00    	add    DWORD PTR [ecx+0x576],ecx
    1338:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    133e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1341:	8b 5a 00             	mov    ebx,DWORD PTR [edx+0x0]
    1344:	00 00                	add    BYTE PTR [eax],al
    1346:	02 91 74 00 06 04    	add    dl,BYTE PTR [ecx+0x4060074]
    134c:	97                   	xchg   edi,eax
    134d:	01 00                	add    DWORD PTR [eax],eax
    134f:	00 11                	add    BYTE PTR [ecx],dl
    1351:	f3 05 00 00 01 91    	repz add eax,0x91010000
    1357:	5a                   	pop    edx
    1358:	00 00                	add    BYTE PTR [eax],al
    135a:	00 26                	add    BYTE PTR [esi],ah
    135c:	0d 00 9f f4 01       	or     eax,0x1f49f00
    1361:	00 00                	add    BYTE PTR [eax],al
    1363:	01 9c 1e 06 00 00 0d 	add    DWORD PTR [esi+ebx*1+0xd000006],ebx
    136a:	9a 09 00 00 01 91 97 	call   0x9791:0x1000009
    1371:	01 00                	add    DWORD PTR [eax],eax
    1373:	00 02                	add    BYTE PTR [edx],al
    1375:	91                   	xchg   ecx,eax
    1376:	00 14 70             	add    BYTE PTR [eax+esi*2],dl
    1379:	69 64 00 01 93 5a 00 	imul   esp,DWORD PTR [eax+eax*1+0x1],0x5a93
    1380:	00 
    1381:	00 02                	add    BYTE PTR [edx],al
    1383:	91                   	xchg   ecx,eax
    1384:	58                   	pop    eax
    1385:	0e                   	push   cs
    1386:	3d 06 00 00 01       	cmp    eax,0x1000006
    138b:	93                   	xchg   ebx,eax
    138c:	5a                   	pop    edx
    138d:	00 00                	add    BYTE PTR [eax],al
    138f:	00 02                	add    BYTE PTR [edx],al
    1391:	91                   	xchg   ecx,eax
    1392:	6c                   	ins    BYTE PTR es:[edi],dx
    1393:	0e                   	push   cs
    1394:	5e                   	pop    esi
    1395:	06                   	push   es
    1396:	00 00                	add    BYTE PTR [eax],al
    1398:	01 94 76 05 00 00 02 	add    DWORD PTR [esi+esi*2+0x2000005],edx
    139f:	91                   	xchg   ecx,eax
    13a0:	50                   	push   eax
    13a1:	0e                   	push   cs
    13a2:	01 05 00 00 01 95    	add    DWORD PTR ds:0x95010000,eax
    13a8:	97                   	xchg   edi,eax
    13a9:	01 00                	add    DWORD PTR [eax],eax
    13ab:	00 02                	add    BYTE PTR [edx],al
    13ad:	91                   	xchg   ecx,eax
    13ae:	68 0e 90 04 00       	push   0x4900e
    13b3:	00 01                	add    BYTE PTR [ecx],al
    13b5:	95                   	xchg   ebp,eax
    13b6:	97                   	xchg   edi,eax
    13b7:	01 00                	add    DWORD PTR [eax],eax
    13b9:	00 02                	add    BYTE PTR [edx],al
    13bb:	91                   	xchg   ecx,eax
    13bc:	64                   	fs
    13bd:	0e                   	push   cs
    13be:	cc                   	int3   
    13bf:	04 00                	add    al,0x0
    13c1:	00 01                	add    BYTE PTR [ecx],al
    13c3:	96                   	xchg   esi,eax
    13c4:	97                   	xchg   edi,eax
    13c5:	01 00                	add    DWORD PTR [eax],eax
    13c7:	00 02                	add    BYTE PTR [edx],al
    13c9:	91                   	xchg   ecx,eax
    13ca:	54                   	push   esp
    13cb:	0e                   	push   cs
    13cc:	b6 04                	mov    dh,0x4
    13ce:	00 00                	add    BYTE PTR [eax],al
    13d0:	01 a7 5a 00 00 00    	add    DWORD PTR [edi+0x5a],esp
    13d6:	02 91 60 13 fc 0d    	add    dl,BYTE PTR [ecx+0xdfc1360]
    13dc:	00 9f e0 00 00 00    	add    BYTE PTR [edi+0xe0],bl
    13e2:	14 63                	adc    al,0x63
    13e4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13e5:	74 00                	je     13e7 <sysEnter_Vector-0x12ec19>
    13e7:	01 a9 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],ebp
    13ed:	02 91 5c 00 00 11    	add    dl,BYTE PTR [ecx+0x1100005c]
    13f3:	ed                   	in     eax,dx
    13f4:	05 00 00 01 bf       	add    eax,0xbf010000
    13f9:	5a                   	pop    edx
    13fa:	00 00                	add    BYTE PTR [eax],al
    13fc:	00 1a                	add    BYTE PTR [edx],bl
    13fe:	0f 00 9f 4f 00 00 00 	ltr    WORD PTR [edi+0x4f]
    1405:	01 9c 70 06 00 00 0d 	add    DWORD PTR [eax+esi*2+0xd000006],ebx
    140c:	9a 09 00 00 01 bf 97 	call   0x97bf:0x1000009
    1413:	01 00                	add    DWORD PTR [eax],eax
    1415:	00 02                	add    BYTE PTR [edx],al
    1417:	91                   	xchg   ecx,eax
    1418:	00 0d 3d 06 00 00    	add    BYTE PTR ds:0x63d,cl
    141e:	01 bf 5a 00 00 00    	add    DWORD PTR [edi+0x5a],edi
    1424:	02 91 04 0d 5e 06    	add    dl,BYTE PTR [ecx+0x65e0d04]
    142a:	00 00                	add    BYTE PTR [eax],al
    142c:	01 bf 76 05 00 00    	add    DWORD PTR [edi+0x576],edi
    1432:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    1438:	64 00 01             	add    BYTE PTR fs:[ecx],al
    143b:	c1 5a 00 00          	rcr    DWORD PTR [edx+0x0],0x0
    143f:	00 02                	add    BYTE PTR [edx],al
    1441:	91                   	xchg   ecx,eax
    1442:	74 00                	je     1444 <sysEnter_Vector-0x12ebbc>
    1444:	11 18                	adc    DWORD PTR [eax],ebx
    1446:	05 00 00 01 c7       	add    eax,0xc7010000
    144b:	5a                   	pop    edx
    144c:	00 00                	add    BYTE PTR [eax],al
    144e:	00 69 0f             	add    BYTE PTR [ecx+0xf],ch
    1451:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
    1457:	01 9c 98 06 00 00 17 	add    DWORD PTR [eax+ebx*4+0x17000006],ebx
    145e:	70 69                	jo     14c9 <sysEnter_Vector-0x12eb37>
    1460:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1463:	c7                   	(bad)  
    1464:	76 00                	jbe    1466 <sysEnter_Vector-0x12eb9a>
    1466:	00 00                	add    BYTE PTR [eax],al
    1468:	02 91 00 00 15 63    	add    dl,BYTE PTR [ecx+0x63150000]
    146e:	06                   	push   es
    146f:	00 00                	add    BYTE PTR [eax],al
    1471:	01 cd                	add    ebp,ecx
    1473:	85 0f                	test   DWORD PTR [edi],ecx
    1475:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    147b:	01 9c bc 06 00 00 0d 	add    DWORD PTR [esp+edi*4+0xd000006],ebx
    1482:	68 06 00 00 01       	push   0x1000006
    1487:	cd 5a                	int    0x5a
    1489:	00 00                	add    BYTE PTR [eax],al
    148b:	00 02                	add    BYTE PTR [edx],al
    148d:	91                   	xchg   ecx,eax
    148e:	00 00                	add    BYTE PTR [eax],al
    1490:	11 98 06 00 00 01    	adc    DWORD PTR [eax+0x1000006],ebx
    1496:	d3 97 01 00 00 a5    	rcl    DWORD PTR [edi-0x5affffff],cl
    149c:	0f 00 9f 20 00 00 00 	ltr    WORD PTR [edi+0x20]
    14a3:	01 9c f2 06 00 00 17 	add    DWORD PTR [edx+esi*8+0x17000006],ebx
    14aa:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    14ad:	00 01                	add    BYTE PTR [ecx],al
    14af:	d3 97 01 00 00 02    	rcl    DWORD PTR [edi+0x2000001],cl
    14b5:	91                   	xchg   ecx,eax
    14b6:	00 0d 9d 05 00 00    	add    BYTE PTR ds:0x59d,cl
    14bc:	01 d3                	add    ebx,edx
    14be:	9a 00 00 00 02 91 04 	call   0x491:0x2000000
    14c5:	00 0c 4a             	add    BYTE PTR [edx+ecx*2],cl
    14c8:	06                   	push   es
    14c9:	00 00                	add    BYTE PTR [eax],al
    14cb:	01 d9                	add    ecx,ebx
    14cd:	9a 00 00 00 c5 0f 00 	call   0xf:0xc5000000
    14d4:	9f                   	lahf   
    14d5:	44                   	inc    esp
    14d6:	01 00                	add    DWORD PTR [eax],eax
    14d8:	00 01                	add    BYTE PTR [ecx],al
    14da:	9c                   	pushf  
    14db:	cf                   	iret   
    14dc:	07                   	pop    es
    14dd:	00 00                	add    BYTE PTR [eax],al
    14df:	0d c2 03 00 00       	or     eax,0x3c2
    14e4:	01 d9                	add    ecx,ebx
    14e6:	97                   	xchg   edi,eax
    14e7:	01 00                	add    DWORD PTR [eax],eax
    14e9:	00 02                	add    BYTE PTR [edx],al
    14eb:	91                   	xchg   ecx,eax
    14ec:	00 0d 5e 06 00 00    	add    BYTE PTR ds:0x65e,cl
    14f2:	01 d9                	add    ecx,ebx
    14f4:	76 05                	jbe    14fb <sysEnter_Vector-0x12eb05>
    14f6:	00 00                	add    BYTE PTR [eax],al
    14f8:	02 91 04 0d 98 05    	add    dl,BYTE PTR [ecx+0x5980d04]
    14fe:	00 00                	add    BYTE PTR [eax],al
    1500:	01 d9                	add    ecx,ebx
    1502:	9a 00 00 00 02 91 08 	call   0x891:0x2000000
    1509:	14 70                	adc    al,0x70
    150b:	00 01                	add    BYTE PTR [ecx],al
    150d:	db 97 01 00 00 02    	fist   DWORD PTR [edi+0x2000001]
    1513:	91                   	xchg   ecx,eax
    1514:	74 0e                	je     1524 <sysEnter_Vector-0x12eadc>
    1516:	be 04 00 00 01       	mov    esi,0x1000004
    151b:	db 97 01 00 00 02    	fist   DWORD PTR [edi+0x2000001]
    1521:	91                   	xchg   ecx,eax
    1522:	70 14                	jo     1538 <sysEnter_Vector-0x12eac8>
    1524:	63 00                	arpl   WORD PTR [eax],ax
    1526:	01 dc                	add    esp,ebx
    1528:	5a                   	pop    edx
    1529:	00 00                	add    BYTE PTR [eax],al
    152b:	00 02                	add    BYTE PTR [edx],al
    152d:	91                   	xchg   ecx,eax
    152e:	64 08 1b             	or     BYTE PTR fs:[ebx],bl
    1531:	06                   	push   es
    1532:	00 00                	add    BYTE PTR [eax],al
    1534:	04 81                	add    al,0x81
    1536:	00 00                	add    BYTE PTR [eax],al
    1538:	00 01                	add    BYTE PTR [ecx],al
    153a:	dd 7e 07             	fnstsw WORD PTR [esi+0x7]
    153d:	00 00                	add    BYTE PTR [eax],al
    153f:	09 16                	or     DWORD PTR [esi],edx
    1541:	06                   	push   es
    1542:	00 00                	add    BYTE PTR [eax],al
    1544:	00 09                	add    BYTE PTR [ecx],cl
    1546:	90                   	nop
    1547:	05 00 00 01 09       	add    eax,0x9010000
    154c:	22 06                	and    al,BYTE PTR [esi]
    154e:	00 00                	add    BYTE PTR [eax],al
    1550:	02 00                	add    al,BYTE PTR [eax]
    1552:	0e                   	push   cs
    1553:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
    1556:	00 01                	add    BYTE PTR [ecx],al
    1558:	dd 5b 07             	fstp   QWORD PTR [ebx+0x7]
    155b:	00 00                	add    BYTE PTR [eax],al
    155d:	02 91 6c 0e 3d 06    	add    dl,BYTE PTR [ecx+0x63d0e6c]
    1563:	00 00                	add    BYTE PTR [eax],al
    1565:	01 de                	add    esi,ebx
    1567:	9a 00 00 00 02 91 68 	call   0x6891:0x2000000
    156e:	18 11                	sbb    BYTE PTR [ecx],dl
    1570:	10 00                	adc    BYTE PTR [eax],al
    1572:	9f                   	lahf   
    1573:	0e                   	push   cs
    1574:	00 00                	add    BYTE PTR [eax],al
    1576:	00 b6 07 00 00 0e    	add    BYTE PTR [esi+0xe000007],dh
    157c:	b2 05                	mov    dl,0x5
    157e:	00 00                	add    BYTE PTR [eax],al
    1580:	01 e4                	add    esp,esp
    1582:	be 00 00 00 02       	mov    esi,0x2000000
    1587:	91                   	xchg   ecx,eax
    1588:	63 00                	arpl   WORD PTR [eax],ax
    158a:	13 80 10 00 9f 0e    	adc    eax,DWORD PTR [eax+0xe9f0010]
    1590:	00 00                	add    BYTE PTR [eax],al
    1592:	00 0e                	add    BYTE PTR [esi],cl
    1594:	b2 05                	mov    dl,0x5
    1596:	00 00                	add    BYTE PTR [eax],al
    1598:	01 fa                	add    edx,edi
    159a:	be 00 00 00 02       	mov    esi,0x2000000
    159f:	91                   	xchg   ecx,eax
    15a0:	62 00                	bound  eax,QWORD PTR [eax]
    15a2:	00 19                	add    BYTE PTR [ecx],bl
    15a4:	f6 04 00 00          	test   BYTE PTR [eax+eax*1],0x0
    15a8:	01 09                	add    DWORD PTR [ecx],ecx
    15aa:	01 9a 00 00 00 09    	add    DWORD PTR [edx+0x9000000],ebx
    15b0:	11 00                	adc    DWORD PTR [eax],eax
    15b2:	9f                   	lahf   
    15b3:	20 00                	and    BYTE PTR [eax],al
    15b5:	00 00                	add    BYTE PTR [eax],al
    15b7:	01 9c 17 08 00 00 1a 	add    DWORD PTR [edi+edx*1+0x1a000008],ebx
    15be:	c2 03 00             	ret    0x3
    15c1:	00 01                	add    BYTE PTR [ecx],al
    15c3:	09 01                	or     DWORD PTR [ecx],eax
    15c5:	97                   	xchg   edi,eax
    15c6:	01 00                	add    DWORD PTR [eax],eax
    15c8:	00 02                	add    BYTE PTR [edx],al
    15ca:	91                   	xchg   ecx,eax
    15cb:	00 1a                	add    BYTE PTR [edx],bl
    15cd:	5e                   	pop    esi
    15ce:	06                   	push   es
    15cf:	00 00                	add    BYTE PTR [eax],al
    15d1:	01 09                	add    DWORD PTR [ecx],ecx
    15d3:	01 76 05             	add    DWORD PTR [esi+0x5],esi
    15d6:	00 00                	add    BYTE PTR [eax],al
    15d8:	02 91 04 1a 98 05    	add    dl,BYTE PTR [ecx+0x5981a04]
    15de:	00 00                	add    BYTE PTR [eax],al
    15e0:	01 09                	add    DWORD PTR [ecx],ecx
    15e2:	01 9a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ebx
    15e8:	91                   	xchg   ecx,eax
    15e9:	08 00                	or     BYTE PTR [eax],al
    15eb:	19 45 05             	sbb    DWORD PTR [ebp+0x5],eax
    15ee:	00 00                	add    BYTE PTR [eax],al
    15f0:	01 0e                	add    DWORD PTR [esi],ecx
    15f2:	01 76 05             	add    DWORD PTR [esi+0x5],esi
    15f5:	00 00                	add    BYTE PTR [eax],al
    15f7:	29 11                	sub    DWORD PTR [ecx],edx
    15f9:	00 9f b6 01 00 00    	add    BYTE PTR [edi+0x1b6],bl
    15ff:	01 9c b5 08 00 00 1a 	add    DWORD PTR [ebp+esi*4+0x1a000008],ebx
    1606:	42                   	inc    edx
    1607:	06                   	push   es
    1608:	00 00                	add    BYTE PTR [eax],al
    160a:	01 0e                	add    DWORD PTR [esi],ecx
    160c:	01 b3 00 00 00 02    	add    DWORD PTR [ebx+0x2000000],esi
    1612:	91                   	xchg   ecx,eax
    1613:	00 1a                	add    BYTE PTR [edx],bl
    1615:	3d 06 00 00 01       	cmp    eax,0x1000006
    161a:	0e                   	push   cs
    161b:	01 b5 08 00 00 02    	add    DWORD PTR [ebp+0x2000008],esi
    1621:	91                   	xchg   ecx,eax
    1622:	04 1b                	add    al,0x1b
    1624:	5e                   	pop    esi
    1625:	06                   	push   es
    1626:	00 00                	add    BYTE PTR [eax],al
    1628:	01 10                	add    DWORD PTR [eax],edx
    162a:	01 76 05             	add    DWORD PTR [esi+0x5],esi
    162d:	00 00                	add    BYTE PTR [eax],al
    162f:	02 91 5c 1c 63 6d    	add    dl,BYTE PTR [ecx+0x6d631c5c]
    1635:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1638:	11 01                	adc    DWORD PTR [ecx],eax
    163a:	bb 08 00 00 03       	mov    ebx,0x3000008
    163f:	91                   	xchg   ecx,eax
    1640:	dc 77 1b             	fdiv   QWORD PTR [edi+0x1b]
    1643:	01 05 00 00 01 12    	add    DWORD PTR ds:0x12010000,eax
    1649:	01 97 01 00 00 02    	add    DWORD PTR [edi+0x2000001],edx
    164f:	91                   	xchg   ecx,eax
    1650:	6c                   	ins    BYTE PTR es:[edi],dx
    1651:	1b 90 04 00 00 01    	sbb    edx,DWORD PTR [eax+0x1000004]
    1657:	12 01                	adc    al,BYTE PTR [ecx]
    1659:	97                   	xchg   edi,eax
    165a:	01 00                	add    DWORD PTR [eax],eax
    165c:	00 02                	add    BYTE PTR [edx],al
    165e:	91                   	xchg   ecx,eax
    165f:	68 1b b6 04 00       	push   0x4b61b
    1664:	00 01                	add    BYTE PTR [ecx],al
    1666:	1f                   	pop    ds
    1667:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    166a:	00 00                	add    BYTE PTR [eax],al
    166c:	02 91 64 13 f2 11    	add    dl,BYTE PTR [ecx+0x11f21364]
    1672:	00 9f e5 00 00 00    	add    BYTE PTR [edi+0xe5],bl
    1678:	1c 63                	sbb    al,0x63
    167a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    167b:	74 00                	je     167d <sysEnter_Vector-0x12e983>
    167d:	01 21                	add    DWORD PTR [ecx],esp
    167f:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    1682:	00 00                	add    BYTE PTR [eax],al
    1684:	02 91 60 00 00 06    	add    dl,BYTE PTR [ecx+0x6000060]
    168a:	04 5a                	add    al,0x5a
    168c:	00 00                	add    BYTE PTR [eax],al
    168e:	00 1d 3a 00 00 00    	add    BYTE PTR ds:0x3a,bl
    1694:	cc                   	int3   
    1695:	08 00                	or     BYTE PTR [eax],al
    1697:	00 1e                	add    BYTE PTR [esi],bl
    1699:	8e 01                	mov    es,WORD PTR [ecx]
    169b:	00 00                	add    BYTE PTR [eax],al
    169d:	ff 03                	inc    DWORD PTR [ebx]
    169f:	00 19                	add    BYTE PTR [ecx],bl
    16a1:	0a 05 00 00 01 30    	or     al,BYTE PTR ds:0x30010000
    16a7:	01 76 05             	add    DWORD PTR [esi+0x5],esi
    16aa:	00 00                	add    BYTE PTR [eax],al
    16ac:	df 12                	fist   WORD PTR [edx]
    16ae:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    16b4:	01 9c 05 09 00 00 1a 	add    DWORD PTR [ebp+eax*1+0x1a000009],ebx
    16bb:	42                   	inc    edx
    16bc:	06                   	push   es
    16bd:	00 00                	add    BYTE PTR [eax],al
    16bf:	01 30                	add    DWORD PTR [eax],esi
    16c1:	01 97 01 00 00 02    	add    DWORD PTR [edi+0x2000001],edx
    16c7:	91                   	xchg   ecx,eax
    16c8:	00 1a                	add    BYTE PTR [edx],bl
    16ca:	3d 06 00 00 01       	cmp    eax,0x1000006
    16cf:	30 01                	xor    BYTE PTR [ecx],al
    16d1:	b5 08                	mov    ch,0x8
    16d3:	00 00                	add    BYTE PTR [eax],al
    16d5:	02 91 04 00 1f 4b    	add    dl,BYTE PTR [ecx+0x4b1f0004]
    16db:	00 00                	add    BYTE PTR [eax],al
    16dd:	00 06                	add    BYTE PTR [esi],al
    16df:	34 76                	xor    al,0x76
    16e1:	00 00                	add    BYTE PTR [eax],al
    16e3:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    16e9:	9f                   	lahf   
    16ea:	1f                   	pop    ds
    16eb:	af                   	scas   eax,DWORD PTR es:[edi]
    16ec:	00 00                	add    BYTE PTR [eax],al
    16ee:	00 06                	add    BYTE PTR [esi],al
    16f0:	35 76 00 00 00       	xor    eax,0x76
    16f5:	05 03 44 54 00       	add    eax,0x544403
    16fa:	9f                   	lahf   
    16fb:	1f                   	pop    ds
    16fc:	5b                   	pop    ebx
    16fd:	01 00                	add    DWORD PTR [eax],eax
    16ff:	00 06                	add    BYTE PTR [esi],al
    1701:	36                   	ss
    1702:	76 00                	jbe    1704 <sysEnter_Vector-0x12e8fc>
    1704:	00 00                	add    BYTE PTR [eax],al
    1706:	05 03 3c 54 00       	add    eax,0x543c03
    170b:	9f                   	lahf   
    170c:	1f                   	pop    ds
    170d:	54                   	push   esp
    170e:	00 00                	add    BYTE PTR [eax],al
    1710:	00 06                	add    BYTE PTR [esi],al
    1712:	37                   	aaa    
    1713:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1714:	00 00                	add    BYTE PTR [eax],al
    1716:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    171c:	9f                   	lahf   
    171d:	1f                   	pop    ds
    171e:	28 00                	sub    BYTE PTR [eax],al
    1720:	00 00                	add    BYTE PTR [eax],al
    1722:	07                   	pop    es
    1723:	4f                   	dec    edi
    1724:	76 05                	jbe    172b <sysEnter_Vector-0x12e8d5>
    1726:	00 00                	add    BYTE PTR [eax],al
    1728:	05 03 48 54 00       	add    eax,0x544803
    172d:	9f                   	lahf   
    172e:	1f                   	pop    ds
    172f:	a2 05 00 00 01       	mov    ds:0x1000005,al
    1734:	0c be                	or     al,0xbe
    1736:	00 00                	add    BYTE PTR [eax],al
    1738:	00 05 03 54 54 00    	add    BYTE PTR ds:0x545403,al
    173e:	9f                   	lahf   
    173f:	1f                   	pop    ds
    1740:	33 05 00 00 01 0d    	xor    eax,DWORD PTR ds:0xd010000
    1746:	97                   	xchg   edi,eax
    1747:	01 00                	add    DWORD PTR [eax],eax
    1749:	00 05 03 58 54 00    	add    BYTE PTR ds:0x545803,al
    174f:	9f                   	lahf   
    1750:	00 72 03             	add    BYTE PTR [edx+0x3],dh
    1753:	00 00                	add    BYTE PTR [eax],al
    1755:	04 00                	add    al,0x0
    1757:	f9                   	stc    
    1758:	06                   	push   es
    1759:	00 00                	add    BYTE PTR [eax],al
    175b:	04 01                	add    al,0x1
    175d:	f4                   	hlt    
    175e:	00 00                	add    BYTE PTR [eax],al
    1760:	00 0c 43             	add    BYTE PTR [ebx+eax*2],cl
    1763:	07                   	pop    es
    1764:	00 00                	add    BYTE PTR [eax],al
    1766:	72 00                	jb     1768 <sysEnter_Vector-0x12e898>
    1768:	00 00                	add    BYTE PTR [eax],al
    176a:	04 13                	add    al,0x13
    176c:	00 9f 6d 03 00 00    	add    BYTE PTR [edi+0x36d],bl
    1772:	62 09                	bound  ecx,QWORD PTR [ecx]
    1774:	00 00                	add    BYTE PTR [eax],al
    1776:	02 01                	add    al,BYTE PTR [ecx]
    1778:	06                   	push   es
    1779:	5d                   	pop    ebp
    177a:	00 00                	add    BYTE PTR [eax],al
    177c:	00 02                	add    BYTE PTR [edx],al
    177e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1784:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    178b:	02 08                	add    cl,BYTE PTR [eax]
    178d:	05 00 00 00 00       	add    eax,0x0
    1792:	04 e3                	add    al,0xe3
    1794:	06                   	push   es
    1795:	00 00                	add    BYTE PTR [eax],al
    1797:	02 2e                	add    ch,BYTE PTR [esi]
    1799:	4c                   	dec    esp
    179a:	00 00                	add    BYTE PTR [eax],al
    179c:	00 02                	add    BYTE PTR [edx],al
    179e:	01 08                	add    DWORD PTR [eax],ecx
    17a0:	5b                   	pop    ebx
    17a1:	00 00                	add    BYTE PTR [eax],al
    17a3:	00 02                	add    BYTE PTR [edx],al
    17a5:	02 07                	add    al,BYTE PTR [edi]
    17a7:	0e                   	push   cs
    17a8:	00 00                	add    BYTE PTR [eax],al
    17aa:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    17ad:	00 00                	add    BYTE PTR [eax],al
    17af:	00 02                	add    BYTE PTR [edx],al
    17b1:	34 65                	xor    al,0x65
    17b3:	00 00                	add    BYTE PTR [eax],al
    17b5:	00 02                	add    BYTE PTR [edx],al
    17b7:	04 07                	add    al,0x7
    17b9:	3e 00 00             	add    BYTE PTR ds:[eax],al
    17bc:	00 02                	add    BYTE PTR [edx],al
    17be:	08 07                	or     BYTE PTR [edi],al
    17c0:	34 00                	xor    al,0x0
    17c2:	00 00                	add    BYTE PTR [eax],al
    17c4:	04 9d                	add    al,0x9d
    17c6:	04 00                	add    al,0x0
    17c8:	00 03                	add    BYTE PTR [ebx],al
    17ca:	d8 65 00             	fsub   DWORD PTR [ebp+0x0]
    17cd:	00 00                	add    BYTE PTR [eax],al
    17cf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    17d6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    17d9:	9b                   	fwait
    17da:	00 00                	add    BYTE PTR [eax],al
    17dc:	00 02                	add    BYTE PTR [edx],al
    17de:	01 06                	add    DWORD PTR [esi],eax
    17e0:	64 00 00             	add    BYTE PTR fs:[eax],al
    17e3:	00 05 f7 06 00 00    	add    BYTE PTR ds:0x6f7,al
    17e9:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    17ec:	d0 00                	rol    BYTE PTR [eax],1
    17ee:	00 00                	add    BYTE PTR [eax],al
    17f0:	06                   	push   es
    17f1:	cc                   	int3   
    17f2:	06                   	push   es
    17f3:	00 00                	add    BYTE PTR [eax],al
    17f5:	04 2e                	add    al,0x2e
    17f7:	5a                   	pop    edx
    17f8:	00 00                	add    BYTE PTR [eax],al
    17fa:	00 00                	add    BYTE PTR [eax],al
    17fc:	07                   	pop    es
    17fd:	6c                   	ins    BYTE PTR es:[edi],dx
    17fe:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1800:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    1803:	5a                   	pop    edx
    1804:	00 00                	add    BYTE PTR [eax],al
    1806:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    1809:	fd                   	std    
    180a:	06                   	push   es
    180b:	00 00                	add    BYTE PTR [eax],al
    180d:	04 30                	add    al,0x30
    180f:	d0 00                	rol    BYTE PTR [eax],1
    1811:	00 00                	add    BYTE PTR [eax],al
    1813:	08 06                	or     BYTE PTR [esi],al
    1815:	56                   	push   esi
    1816:	07                   	pop    es
    1817:	00 00                	add    BYTE PTR [eax],al
    1819:	04 31                	add    al,0x31
    181b:	d7                   	xlat   BYTE PTR ds:[ebx]
    181c:	00 00                	add    BYTE PTR [eax],al
    181e:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
    1821:	02 01                	add    al,BYTE PTR [ecx]
    1823:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
    1829:	04 93                	add    al,0x93
    182b:	00 00                	add    BYTE PTR [eax],al
    182d:	00 04 5b             	add    BYTE PTR [ebx+ebx*2],al
    1830:	07                   	pop    es
    1831:	00 00                	add    BYTE PTR [eax],al
    1833:	04 32                	add    al,0x32
    1835:	93                   	xchg   ebx,eax
    1836:	00 00                	add    BYTE PTR [eax],al
    1838:	00 09                	add    BYTE PTR [ecx],cl
    183a:	12 03                	adc    al,BYTE PTR [ebx]
    183c:	00 00                	add    BYTE PTR [eax],al
    183e:	04 65                	add    al,0x65
    1840:	00 00                	add    BYTE PTR [eax],al
    1842:	00 06                	add    BYTE PTR [esi],al
    1844:	15 aa 01 00 00       	adc    eax,0x1aa
    1849:	0a 77 03             	or     dh,BYTE PTR [edi+0x3]
    184c:	00 00                	add    BYTE PTR [eax],al
    184e:	00 0a                	add    BYTE PTR [edx],cl
    1850:	af                   	scas   eax,DWORD PTR es:[edi]
    1851:	03 00                	add    eax,DWORD PTR [eax]
    1853:	00 01                	add    BYTE PTR [ecx],al
    1855:	0a 6e 02             	or     ch,BYTE PTR [esi+0x2]
    1858:	00 00                	add    BYTE PTR [eax],al
    185a:	02 0a                	add    cl,BYTE PTR [edx]
    185c:	04 03                	add    al,0x3
    185e:	00 00                	add    BYTE PTR [eax],al
    1860:	03 0a                	add    ecx,DWORD PTR [edx]
    1862:	4e                   	dec    esi
    1863:	02 00                	add    al,BYTE PTR [eax]
    1865:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
    1868:	c9                   	leave  
    1869:	03 00                	add    eax,DWORD PTR [eax]
    186b:	00 05 0a 28 03 00    	add    BYTE PTR ds:0x3280a,al
    1871:	00 06                	add    BYTE PTR [esi],al
    1873:	0a 61 02             	or     ah,BYTE PTR [ecx+0x2]
    1876:	00 00                	add    BYTE PTR [eax],al
    1878:	07                   	pop    es
    1879:	0a fa                	or     bh,dl
    187b:	03 00                	add    eax,DWORD PTR [eax]
    187d:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    1880:	6a 03                	push   0x3
    1882:	00 00                	add    BYTE PTR [eax],al
    1884:	59                   	pop    ecx
    1885:	0a 09                	or     cl,BYTE PTR [ecx]
    1887:	04 00                	add    al,0x0
    1889:	00 61 0a             	add    BYTE PTR [ecx+0xa],ah
    188c:	f0 02 00             	lock add al,BYTE PTR [eax]
    188f:	00 97 0b 87 03 00    	add    BYTE PTR [edi+0x3870b],dl
    1895:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1898:	0b 5d 03             	or     ebx,DWORD PTR [ebp+0x3]
    189b:	00 00                	add    BYTE PTR [eax],al
    189d:	64 01 0b             	add    DWORD PTR fs:[ebx],ecx
    18a0:	ec                   	in     al,dx
    18a1:	03 00                	add    eax,DWORD PTR [eax]
    18a3:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    18a6:	0b d2                	or     edx,edx
    18a8:	02 00                	add    al,BYTE PTR [eax]
    18aa:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    18ad:	0b 21                	or     esp,DWORD PTR [ecx]
    18af:	04 00                	add    al,0x0
    18b1:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    18b4:	0b 35 03 00 00 68    	or     esi,DWORD PTR ds:0x68000003
    18ba:	01 0b                	add    DWORD PTR [ebx],ecx
    18bc:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    18bd:	02 00                	add    al,BYTE PTR [eax]
    18bf:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    18c2:	0b 9e 03 00 00 70    	or     ebx,DWORD PTR [esi+0x70000003]
    18c8:	01 0b                	add    DWORD PTR [ebx],ecx
    18ca:	e0 02                	loopne 18ce <sysEnter_Vector-0x12e732>
    18cc:	00 00                	add    BYTE PTR [eax],al
    18ce:	71 01                	jno    18d1 <sysEnter_Vector-0x12e72f>
    18d0:	0b d7                	or     edx,edi
    18d2:	03 00                	add    eax,DWORD PTR [eax]
    18d4:	00 00                	add    BYTE PTR [eax],al
    18d6:	03 0b                	add    ecx,DWORD PTR [ebx]
    18d8:	42                   	inc    edx
    18d9:	03 00                	add    eax,DWORD PTR [eax]
    18db:	00 01                	add    BYTE PTR [ecx],al
    18dd:	03 0b                	add    ecx,DWORD PTR [ebx]
    18df:	b6 02                	mov    dh,0x2
    18e1:	00 00                	add    BYTE PTR [eax],al
    18e3:	02 03                	add    al,BYTE PTR [ebx]
    18e5:	0b 7b 02             	or     edi,DWORD PTR [ebx+0x2]
    18e8:	00 00                	add    BYTE PTR [eax],al
    18ea:	03 03                	add    eax,DWORD PTR [ebx]
    18ec:	0b 8b 02 00 00 04    	or     ecx,DWORD PTR [ebx+0x4000002]
    18f2:	03 0b                	add    ecx,DWORD PTR [ebx]
    18f4:	c2 02 00             	ret    0x2
    18f7:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
    18fd:	07                   	pop    es
    18fe:	39 00                	cmp    DWORD PTR [eax],eax
    1900:	00 00                	add    BYTE PTR [eax],al
    1902:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1905:	e1 00                	loope  1907 <sysEnter_Vector-0x12e6f9>
    1907:	00 00                	add    BYTE PTR [eax],al
    1909:	0c 04                	or     al,0x4
    190b:	08 04 8c             	or     BYTE PTR [esp+ecx*4],al
    190e:	00 00                	add    BYTE PTR [eax],al
    1910:	00 0d 03 07 00 00    	add    BYTE PTR ds:0x703,cl
    1916:	01 0c 04             	add    DWORD PTR [esp+eax*1],ecx
    1919:	13 00                	adc    eax,DWORD PTR [eax]
    191b:	9f                   	lahf   
    191c:	6c                   	ins    BYTE PTR es:[edi],dx
    191d:	00 00                	add    BYTE PTR [eax],al
    191f:	00 01                	add    BYTE PTR [ecx],al
    1921:	9c                   	pushf  
    1922:	0e                   	push   cs
    1923:	23 07                	and    eax,DWORD PTR [edi]
    1925:	00 00                	add    BYTE PTR [eax],al
    1927:	01 16                	add    DWORD PTR [esi],edx
    1929:	5a                   	pop    edx
    192a:	00 00                	add    BYTE PTR [eax],al
    192c:	00 70 13             	add    BYTE PTR [eax+0x13],dh
    192f:	00 9f 87 00 00 00    	add    BYTE PTR [edi+0x87],bl
    1935:	01 9c 07 02 00 00 0f 	add    DWORD PTR [edi+eax*1+0xf000002],ebx
    193c:	9d                   	popf   
    193d:	05 00 00 01 16       	add    eax,0x16010000
    1942:	73 00                	jae    1944 <sysEnter_Vector-0x12e6bc>
    1944:	00 00                	add    BYTE PTR [eax],al
    1946:	02 91 00 10 b5 06    	add    dl,BYTE PTR [ecx+0x6b51000]
    194c:	00 00                	add    BYTE PTR [eax],al
    194e:	01 1a                	add    DWORD PTR [edx],ebx
    1950:	5a                   	pop    edx
    1951:	00 00                	add    BYTE PTR [eax],al
    1953:	00 02                	add    BYTE PTR [edx],al
    1955:	91                   	xchg   ecx,eax
    1956:	74 00                	je     1958 <sysEnter_Vector-0x12e6a8>
    1958:	11 50 07             	adc    DWORD PTR [eax+0x7],edx
    195b:	00 00                	add    BYTE PTR [eax],al
    195d:	01 2e                	add    DWORD PTR [esi],ebp
    195f:	f7 13                	not    DWORD PTR [ebx]
    1961:	00 9f 39 00 00 00    	add    BYTE PTR [edi+0x39],bl
    1967:	01 9c 43 02 00 00 0f 	add    DWORD PTR [ebx+eax*2+0xf000002],ebx
    196e:	ac                   	lods   al,BYTE PTR ds:[esi]
    196f:	06                   	push   es
    1970:	00 00                	add    BYTE PTR [eax],al
    1972:	01 2e                	add    DWORD PTR [esi],ebp
    1974:	b8 01 00 00 02       	mov    eax,0x2000001
    1979:	91                   	xchg   ecx,eax
    197a:	00 12                	add    BYTE PTR [edx],dl
    197c:	6d                   	ins    DWORD PTR es:[edi],dx
    197d:	70 00                	jo     197f <sysEnter_Vector-0x12e681>
    197f:	01 30                	add    DWORD PTR [eax],esi
    1981:	43                   	inc    ebx
    1982:	02 00                	add    al,BYTE PTR [eax]
    1984:	00 02                	add    BYTE PTR [edx],al
    1986:	91                   	xchg   ecx,eax
    1987:	74 13                	je     199c <sysEnter_Vector-0x12e664>
    1989:	0e                   	push   cs
    198a:	07                   	pop    es
    198b:	00 00                	add    BYTE PTR [eax],al
    198d:	01 3a                	add    DWORD PTR [edx],edi
    198f:	22 14 00             	and    dl,BYTE PTR [eax+eax*1]
    1992:	9f                   	lahf   
    1993:	00 08                	add    BYTE PTR [eax],cl
    1995:	04 dd                	add    al,0xdd
    1997:	00 00                	add    BYTE PTR [eax],al
    1999:	00 14 d3             	add    BYTE PTR [ebx+edx*8],dl
    199c:	06                   	push   es
    199d:	00 00                	add    BYTE PTR [eax],al
    199f:	01 40 b8             	add    DWORD PTR [eax-0x48],eax
    19a2:	01 00                	add    DWORD PTR [eax],eax
    19a4:	00 30                	add    BYTE PTR [eax],dh
    19a6:	14 00                	adc    al,0x0
    19a8:	9f                   	lahf   
    19a9:	d4 01                	aam    0x1
    19ab:	00 00                	add    BYTE PTR [eax],al
    19ad:	01 9c b7 02 00 00 0f 	add    DWORD PTR [edi+esi*4+0xf000002],ebx
    19b4:	9d                   	popf   
    19b5:	05 00 00 01 40       	add    eax,0x40010000
    19ba:	73 00                	jae    19bc <sysEnter_Vector-0x12e644>
    19bc:	00 00                	add    BYTE PTR [eax],al
    19be:	02 91 00 10 83 04    	add    dl,BYTE PTR [ecx+0x4831000]
    19c4:	00 00                	add    BYTE PTR [eax],al
    19c6:	01 42 b8             	add    DWORD PTR [edx-0x48],eax
    19c9:	01 00                	add    DWORD PTR [eax],eax
    19cb:	00 02                	add    BYTE PTR [edx],al
    19cd:	91                   	xchg   ecx,eax
    19ce:	60                   	pusha  
    19cf:	10 f0                	adc    al,dh
    19d1:	06                   	push   es
    19d2:	00 00                	add    BYTE PTR [eax],al
    19d4:	01 44 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],eax
    19d8:	00 00                	add    BYTE PTR [eax],al
    19da:	02 91 6c 10 9f 06    	add    dl,BYTE PTR [ecx+0x69f106c]
    19e0:	00 00                	add    BYTE PTR [eax],al
    19e2:	01 45 5a             	add    DWORD PTR [ebp+0x5a],eax
    19e5:	00 00                	add    BYTE PTR [eax],al
    19e7:	00 02                	add    BYTE PTR [edx],al
    19e9:	91                   	xchg   ecx,eax
    19ea:	68 10 db 06 00       	push   0x6db10
    19ef:	00 01                	add    BYTE PTR [ecx],al
    19f1:	46                   	inc    esi
    19f2:	43                   	inc    ebx
    19f3:	02 00                	add    al,BYTE PTR [eax]
    19f5:	00 02                	add    BYTE PTR [edx],al
    19f7:	91                   	xchg   ecx,eax
    19f8:	64 10 17             	adc    BYTE PTR fs:[edi],dl
    19fb:	07                   	pop    es
    19fc:	00 00                	add    BYTE PTR [eax],al
    19fe:	01 47 b7             	add    DWORD PTR [edi-0x49],eax
    1a01:	02 00                	add    al,BYTE PTR [eax]
    1a03:	00 02                	add    BYTE PTR [edx],al
    1a05:	91                   	xchg   ecx,eax
    1a06:	5c                   	pop    esp
    1a07:	00 08                	add    BYTE PTR [eax],cl
    1a09:	04 41                	add    al,0x41
    1a0b:	00 00                	add    BYTE PTR [eax],al
    1a0d:	00 14 07             	add    BYTE PTR [edi+eax*1],dl
    1a10:	07                   	pop    es
    1a11:	00 00                	add    BYTE PTR [eax],al
    1a13:	01 67 b8             	add    DWORD PTR [edi-0x48],esp
    1a16:	01 00                	add    DWORD PTR [eax],eax
    1a18:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1a1b:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    1a21:	01 9c e5 02 00 00 0f 	add    DWORD PTR [ebp+eiz*8+0xf000002],ebx
    1a28:	9d                   	popf   
    1a29:	05 00 00 01 67       	add    eax,0x67010000
    1a2e:	73 00                	jae    1a30 <sysEnter_Vector-0x12e5d0>
    1a30:	00 00                	add    BYTE PTR [eax],al
    1a32:	02 91 00 00 15 eb    	add    dl,BYTE PTR [ecx-0x14eb0000]
    1a38:	06                   	push   es
    1a39:	00 00                	add    BYTE PTR [eax],al
    1a3b:	01 6c 24 16          	add    DWORD PTR [esp+0x16],ebp
    1a3f:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    1a45:	01 9c 09 03 00 00 0f 	add    DWORD PTR [ecx+ecx*1+0xf000003],ebx
    1a4c:	ac                   	lods   al,BYTE PTR ds:[esi]
    1a4d:	06                   	push   es
    1a4e:	00 00                	add    BYTE PTR [eax],al
    1a50:	01 6c b8 01          	add    DWORD PTR [eax+edi*4+0x1],ebp
    1a54:	00 00                	add    BYTE PTR [eax],al
    1a56:	02 91 00 00 0d bd    	add    dl,BYTE PTR [ecx-0x42f30000]
    1a5c:	06                   	push   es
    1a5d:	00 00                	add    BYTE PTR [eax],al
    1a5f:	01 71 3f             	add    DWORD PTR [ecx+0x3f],esi
    1a62:	16                   	push   ss
    1a63:	00 9f 32 00 00 00    	add    BYTE PTR [edi+0x32],bl
    1a69:	01 9c 16 4b 00 00 00 	add    DWORD PTR [esi+edx*1+0x4b],ebx
    1a70:	04 34                	add    al,0x34
    1a72:	5a                   	pop    edx
    1a73:	00 00                	add    BYTE PTR [eax],al
    1a75:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    1a7b:	9f                   	lahf   
    1a7c:	16                   	push   ss
    1a7d:	af                   	scas   eax,DWORD PTR es:[edi]
    1a7e:	00 00                	add    BYTE PTR [eax],al
    1a80:	00 04 35 5a 00 00 00 	add    BYTE PTR [esi*1+0x5a],al
    1a87:	05 03 44 54 00       	add    eax,0x544403
    1a8c:	9f                   	lahf   
    1a8d:	16                   	push   ss
    1a8e:	5b                   	pop    ebx
    1a8f:	01 00                	add    DWORD PTR [eax],eax
    1a91:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1a94:	5a                   	pop    edx
    1a95:	00 00                	add    BYTE PTR [eax],al
    1a97:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    1a9d:	9f                   	lahf   
    1a9e:	16                   	push   ss
    1a9f:	54                   	push   esp
    1aa0:	00 00                	add    BYTE PTR [eax],al
    1aa2:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1aa5:	7e 00                	jle    1aa7 <sysEnter_Vector-0x12e559>
    1aa7:	00 00                	add    BYTE PTR [eax],al
    1aa9:	05 03 4c 54 00       	add    eax,0x544c03
    1aae:	9f                   	lahf   
    1aaf:	16                   	push   ss
    1ab0:	28 00                	sub    BYTE PTR [eax],al
    1ab2:	00 00                	add    BYTE PTR [eax],al
    1ab4:	05 4f 6f 03 00       	add    eax,0x36f4f
    1ab9:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    1abf:	9f                   	lahf   
    1ac0:	08 04 ba             	or     BYTE PTR [edx+edi*4],al
    1ac3:	01 00                	add    DWORD PTR [eax],eax
    1ac5:	00 00                	add    BYTE PTR [eax],al
    1ac7:	ea 01 00 00 04 00 5d 	jmp    0x5d00:0x4000001
    1ace:	08 00                	or     BYTE PTR [eax],al
    1ad0:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1ad3:	f4                   	hlt    
    1ad4:	00 00                	add    BYTE PTR [eax],al
    1ad6:	00 0c 65 07 00 00 72 	add    BYTE PTR [eiz*2+0x72000007],cl
    1add:	00 00                	add    BYTE PTR [eax],al
    1adf:	00 74 16 00          	add    BYTE PTR [esi+edx*1+0x0],dh
    1ae3:	9f                   	lahf   
    1ae4:	9b                   	fwait
    1ae5:	01 00                	add    DWORD PTR [eax],eax
    1ae7:	00 b6 0a 00 00 02    	add    BYTE PTR [esi+0x200000a],dh
    1aed:	01 08                	add    DWORD PTR [eax],ecx
    1aef:	5b                   	pop    ebx
    1af0:	00 00                	add    BYTE PTR [eax],al
    1af2:	00 02                	add    BYTE PTR [edx],al
    1af4:	02 07                	add    al,BYTE PTR [edi]
    1af6:	0e                   	push   cs
    1af7:	00 00                	add    BYTE PTR [eax],al
    1af9:	00 02                	add    BYTE PTR [edx],al
    1afb:	04 07                	add    al,0x7
    1afd:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1b00:	00 02                	add    BYTE PTR [edx],al
    1b02:	04 07                	add    al,0x7
    1b04:	39 00                	cmp    DWORD PTR [eax],eax
    1b06:	00 00                	add    BYTE PTR [eax],al
    1b08:	02 01                	add    al,BYTE PTR [ecx]
    1b0a:	06                   	push   es
    1b0b:	5d                   	pop    ebp
    1b0c:	00 00                	add    BYTE PTR [eax],al
    1b0e:	00 02                	add    BYTE PTR [edx],al
    1b10:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1b16:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1b1d:	02 08                	add    cl,BYTE PTR [eax]
    1b1f:	05 00 00 00 00       	add    eax,0x0
    1b24:	02 08                	add    cl,BYTE PTR [eax]
    1b26:	07                   	pop    es
    1b27:	34 00                	xor    al,0x0
    1b29:	00 00                	add    BYTE PTR [eax],al
    1b2b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1b32:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1b35:	e1 00                	loope  1b37 <sysEnter_Vector-0x12e4c9>
    1b37:	00 00                	add    BYTE PTR [eax],al
    1b39:	04 04                	add    al,0x4
    1b3b:	05 04 7a 00 00       	add    eax,0x7a04
    1b40:	00 02                	add    BYTE PTR [edx],al
    1b42:	01 06                	add    DWORD PTR [esi],eax
    1b44:	64 00 00             	add    BYTE PTR fs:[eax],al
    1b47:	00 06                	add    BYTE PTR [esi],al
    1b49:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    1b4f:	33 00                	xor    eax,DWORD PTR [eax]
    1b51:	00 00                	add    BYTE PTR [eax],al
    1b53:	05 04 92 00 00       	add    eax,0x9204
    1b58:	00 07                	add    BYTE PTR [edi],al
    1b5a:	7a 00                	jp     1b5c <sysEnter_Vector-0x12e4a4>
    1b5c:	00 00                	add    BYTE PTR [eax],al
    1b5e:	06                   	push   es
    1b5f:	9d                   	popf   
    1b60:	04 00                	add    al,0x0
    1b62:	00 03                	add    BYTE PTR [ebx],al
    1b64:	d8 33                	fdiv   DWORD PTR [ebx]
    1b66:	00 00                	add    BYTE PTR [eax],al
    1b68:	00 02                	add    BYTE PTR [edx],al
    1b6a:	0c 04                	or     al,0x4
    1b6c:	9b                   	fwait
    1b6d:	00 00                	add    BYTE PTR [eax],al
    1b6f:	00 02                	add    BYTE PTR [edx],al
    1b71:	01 02                	add    DWORD PTR [edx],eax
    1b73:	95                   	xchg   ebp,eax
    1b74:	00 00                	add    BYTE PTR [eax],al
    1b76:	00 08                	add    BYTE PTR [eax],cl
    1b78:	77 07                	ja     1b81 <sysEnter_Vector-0x12e47f>
    1b7a:	00 00                	add    BYTE PTR [eax],al
    1b7c:	01 0a                	add    DWORD PTR [edx],ecx
    1b7e:	72 00                	jb     1b80 <sysEnter_Vector-0x12e480>
    1b80:	00 00                	add    BYTE PTR [eax],al
    1b82:	74 16                	je     1b9a <sysEnter_Vector-0x12e466>
    1b84:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
    1b8a:	01 9c 7a 01 00 00 09 	add    DWORD PTR [edx+edi*2+0x9000001],ebx
    1b91:	72 07                	jb     1b9a <sysEnter_Vector-0x12e466>
    1b93:	00 00                	add    BYTE PTR [eax],al
    1b95:	01 0a                	add    DWORD PTR [edx],ecx
    1b97:	72 00                	jb     1b99 <sysEnter_Vector-0x12e467>
    1b99:	00 00                	add    BYTE PTR [eax],al
    1b9b:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    1ba1:	63 00                	arpl   WORD PTR [eax],ax
    1ba3:	01 0a                	add    DWORD PTR [edx],ecx
    1ba5:	7a 01                	jp     1ba8 <sysEnter_Vector-0x12e458>
    1ba7:	00 00                	add    BYTE PTR [eax],al
    1ba9:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    1baf:	01 0a                	add    DWORD PTR [edx],ecx
    1bb1:	97                   	xchg   edi,eax
    1bb2:	00 00                	add    BYTE PTR [eax],al
    1bb4:	00 02                	add    BYTE PTR [edx],al
    1bb6:	91                   	xchg   ecx,eax
    1bb7:	08 0b                	or     BYTE PTR [ebx],cl
    1bb9:	64                   	fs
    1bba:	77 00                	ja     1bbc <sysEnter_Vector-0x12e444>
    1bbc:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    1bbf:	00 00                	add    BYTE PTR [eax],al
    1bc1:	00 02                	add    BYTE PTR [edx],al
    1bc3:	91                   	xchg   ecx,eax
    1bc4:	5e                   	pop    esi
    1bc5:	0b 64 64 00          	or     esp,DWORD PTR [esp+eiz*2+0x0]
    1bc9:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    1bcc:	00 00                	add    BYTE PTR [eax],al
    1bce:	00 02                	add    BYTE PTR [edx],al
    1bd0:	91                   	xchg   ecx,eax
    1bd1:	5f                   	pop    edi
    1bd2:	0c a6                	or     al,0xa6
    1bd4:	16                   	push   ss
    1bd5:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    1bdb:	31 01                	xor    DWORD PTR [ecx],eax
    1bdd:	00 00                	add    BYTE PTR [eax],al
    1bdf:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    1be2:	01 13                	add    DWORD PTR [ebx],edx
    1be4:	81 01 00 00 02 91    	add    DWORD PTR [ecx],0x91020000
    1bea:	74 0b                	je     1bf7 <sysEnter_Vector-0x12e409>
    1bec:	74 00                	je     1bee <sysEnter_Vector-0x12e412>
    1bee:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    1bf1:	01 00                	add    DWORD PTR [eax],eax
    1bf3:	00 02                	add    BYTE PTR [edx],al
    1bf5:	91                   	xchg   ecx,eax
    1bf6:	70 00                	jo     1bf8 <sysEnter_Vector-0x12e408>
    1bf8:	0c 29                	or     al,0x29
    1bfa:	17                   	pop    ss
    1bfb:	00 9f 79 00 00 00    	add    BYTE PTR [edi+0x79],bl
    1c01:	57                   	push   edi
    1c02:	01 00                	add    DWORD PTR [eax],eax
    1c04:	00 0b                	add    BYTE PTR [ebx],cl
    1c06:	66                   	data16
    1c07:	00 01                	add    BYTE PTR [ecx],al
    1c09:	23 81 01 00 00 02    	and    eax,DWORD PTR [ecx+0x2000001]
    1c0f:	91                   	xchg   ecx,eax
    1c10:	6c                   	ins    BYTE PTR es:[edi],dx
    1c11:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    1c15:	24 8c                	and    al,0x8c
    1c17:	01 00                	add    DWORD PTR [eax],eax
    1c19:	00 02                	add    BYTE PTR [edx],al
    1c1b:	91                   	xchg   ecx,eax
    1c1c:	68 00 0d a2 17       	push   0x17a20d00
    1c21:	00 9f 6b 00 00 00    	add    BYTE PTR [edi+0x6b],bl
    1c27:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    1c2a:	01 32                	add    DWORD PTR [edx],esi
    1c2c:	8c 00                	mov    WORD PTR [eax],es
    1c2e:	00 00                	add    BYTE PTR [eax],al
    1c30:	02 91 64 0b 74 00    	add    dl,BYTE PTR [ecx+0x740b64]
    1c36:	01 33                	add    DWORD PTR [ebx],esi
    1c38:	74 00                	je     1c3a <sysEnter_Vector-0x12e3c6>
    1c3a:	00 00                	add    BYTE PTR [eax],al
    1c3c:	02 91 60 00 00 05    	add    dl,BYTE PTR [ecx+0x5000060]
    1c42:	04 80                	add    al,0x80
    1c44:	01 00                	add    DWORD PTR [eax],eax
    1c46:	00 0e                	add    BYTE PTR [esi],cl
    1c48:	05 04 87 01 00       	add    eax,0x18704
    1c4d:	00 07                	add    BYTE PTR [edi],al
    1c4f:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    1c55:	81 00 00 00 0f 4b    	add    DWORD PTR [eax],0x4b0f0000
    1c5b:	00 00                	add    BYTE PTR [eax],al
    1c5d:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1c60:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1c66:	40                   	inc    eax
    1c67:	54                   	push   esp
    1c68:	00 9f 0f af 00 00    	add    BYTE PTR [edi+0xaf0f],bl
    1c6e:	00 04 35 81 00 00 00 	add    BYTE PTR [esi*1+0x81],al
    1c75:	05 03 44 54 00       	add    eax,0x544403
    1c7a:	9f                   	lahf   
    1c7b:	0f 5b 01             	cvtdq2ps xmm0,XMMWORD PTR [ecx]
    1c7e:	00 00                	add    BYTE PTR [eax],al
    1c80:	04 36                	add    al,0x36
    1c82:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1c88:	3c 54                	cmp    al,0x54
    1c8a:	00 9f 0f 54 00 00    	add    BYTE PTR [edi+0x540f],bl
    1c90:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1c93:	64 00 00             	add    BYTE PTR fs:[eax],al
    1c96:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    1c9c:	9f                   	lahf   
    1c9d:	0f 28 00             	movaps xmm0,XMMWORD PTR [eax]
    1ca0:	00 00                	add    BYTE PTR [eax],al
    1ca2:	05 4f e7 01 00       	add    eax,0x1e74f
    1ca7:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    1cad:	9f                   	lahf   
    1cae:	05 04 74 00 00       	add    eax,0x7404
    1cb3:	00 00                	add    BYTE PTR [eax],al
    1cb5:	eb 01                	jmp    1cb8 <sysEnter_Vector-0x12e348>
    1cb7:	00 00                	add    BYTE PTR [eax],al
    1cb9:	04 00                	add    al,0x0
    1cbb:	1e                   	push   ds
    1cbc:	09 00                	or     DWORD PTR [eax],eax
    1cbe:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1cc1:	f4                   	hlt    
    1cc2:	00 00                	add    BYTE PTR [eax],al
    1cc4:	00 0c 8a             	add    BYTE PTR [edx+ecx*4],cl
    1cc7:	07                   	pop    es
    1cc8:	00 00                	add    BYTE PTR [eax],al
    1cca:	72 00                	jb     1ccc <sysEnter_Vector-0x12e334>
    1ccc:	00 00                	add    BYTE PTR [eax],al
    1cce:	10 18                	adc    BYTE PTR [eax],bl
    1cd0:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
    1cd6:	9d                   	popf   
    1cd7:	0b 00                	or     eax,DWORD PTR [eax]
    1cd9:	00 02                	add    BYTE PTR [edx],al
    1cdb:	01 06                	add    DWORD PTR [esi],eax
    1cdd:	64 00 00             	add    BYTE PTR fs:[eax],al
    1ce0:	00 02                	add    BYTE PTR [edx],al
    1ce2:	01 06                	add    DWORD PTR [esi],eax
    1ce4:	5d                   	pop    ebp
    1ce5:	00 00                	add    BYTE PTR [eax],al
    1ce7:	00 02                	add    BYTE PTR [edx],al
    1ce9:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1cef:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1cf6:	02 08                	add    cl,BYTE PTR [eax]
    1cf8:	05 00 00 00 00       	add    eax,0x0
    1cfd:	04 e3                	add    al,0xe3
    1cff:	06                   	push   es
    1d00:	00 00                	add    BYTE PTR [eax],al
    1d02:	02 2e                	add    ch,BYTE PTR [esi]
    1d04:	53                   	push   ebx
    1d05:	00 00                	add    BYTE PTR [eax],al
    1d07:	00 02                	add    BYTE PTR [edx],al
    1d09:	01 08                	add    DWORD PTR [eax],ecx
    1d0b:	5b                   	pop    ebx
    1d0c:	00 00                	add    BYTE PTR [eax],al
    1d0e:	00 04 a4             	add    BYTE PTR [esp+eiz*4],al
    1d11:	07                   	pop    es
    1d12:	00 00                	add    BYTE PTR [eax],al
    1d14:	02 31                	add    dh,BYTE PTR [ecx]
    1d16:	65 00 00             	add    BYTE PTR gs:[eax],al
    1d19:	00 02                	add    BYTE PTR [edx],al
    1d1b:	02 07                	add    al,BYTE PTR [edi]
    1d1d:	0e                   	push   cs
    1d1e:	00 00                	add    BYTE PTR [eax],al
    1d20:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1d23:	00 00                	add    BYTE PTR [eax],al
    1d25:	00 02                	add    BYTE PTR [edx],al
    1d27:	34 77                	xor    al,0x77
    1d29:	00 00                	add    BYTE PTR [eax],al
    1d2b:	00 02                	add    BYTE PTR [edx],al
    1d2d:	04 07                	add    al,0x7
    1d2f:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1d32:	00 02                	add    BYTE PTR [edx],al
    1d34:	08 07                	or     BYTE PTR [edi],al
    1d36:	34 00                	xor    al,0x0
    1d38:	00 00                	add    BYTE PTR [eax],al
    1d3a:	04 9d                	add    al,0x9d
    1d3c:	04 00                	add    al,0x0
    1d3e:	00 03                	add    BYTE PTR [ebx],al
    1d40:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    1d43:	00 00                	add    BYTE PTR [eax],al
    1d45:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1d4c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1d4f:	9b                   	fwait
    1d50:	00 00                	add    BYTE PTR [eax],al
    1d52:	00 02                	add    BYTE PTR [edx],al
    1d54:	01 02                	add    DWORD PTR [edx],eax
    1d56:	95                   	xchg   ebp,eax
    1d57:	00 00                	add    BYTE PTR [eax],al
    1d59:	00 02                	add    BYTE PTR [edx],al
    1d5b:	04 07                	add    al,0x7
    1d5d:	39 00                	cmp    DWORD PTR [eax],eax
    1d5f:	00 00                	add    BYTE PTR [eax],al
    1d61:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1d64:	e1 00                	loope  1d66 <sysEnter_Vector-0x12e29a>
    1d66:	00 00                	add    BYTE PTR [eax],al
    1d68:	05 04 06 04 25       	add    eax,0x25040604
    1d6d:	00 00                	add    BYTE PTR [eax],al
    1d6f:	00 07                	add    BYTE PTR [edi],al
    1d71:	9c                   	pushf  
    1d72:	07                   	pop    es
    1d73:	00 00                	add    BYTE PTR [eax],al
    1d75:	01 08                	add    DWORD PTR [eax],ecx
    1d77:	b3 00                	mov    bl,0x0
    1d79:	00 00                	add    BYTE PTR [eax],al
    1d7b:	10 18                	adc    BYTE PTR [eax],bl
    1d7d:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    1d83:	01 9c 3e 01 00 00 08 	add    DWORD PTR [esi+edi*1+0x8000001],ebx
    1d8a:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1d8d:	01 08                	add    DWORD PTR [eax],ecx
    1d8f:	b3 00                	mov    bl,0x0
    1d91:	00 00                	add    BYTE PTR [eax],al
    1d93:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1d99:	6c                   	ins    BYTE PTR es:[edi],dx
    1d9a:	00 01                	add    BYTE PTR [ecx],al
    1d9c:	08 3a                	or     BYTE PTR [edx],bh
    1d9e:	00 00                	add    BYTE PTR [eax],al
    1da0:	00 02                	add    BYTE PTR [edx],al
    1da2:	91                   	xchg   ecx,eax
    1da3:	04 08                	add    al,0x8
    1da5:	6c                   	ins    BYTE PTR es:[edi],dx
    1da6:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1da8:	00 01                	add    BYTE PTR [ecx],al
    1daa:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    1db0:	91                   	xchg   ecx,eax
    1db1:	08 09                	or     BYTE PTR [ecx],cl
    1db3:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1db6:	0a 3e                	or     bh,BYTE PTR [esi]
    1db8:	01 00                	add    DWORD PTR [eax],eax
    1dba:	00 02                	add    BYTE PTR [edx],al
    1dbc:	91                   	xchg   ecx,eax
    1dbd:	74 09                	je     1dc8 <sysEnter_Vector-0x12e238>
    1dbf:	65 00 01             	add    BYTE PTR gs:[ecx],al
    1dc2:	0b 44 01 00          	or     eax,DWORD PTR [ecx+eax*1+0x0]
    1dc6:	00 02                	add    BYTE PTR [edx],al
    1dc8:	91                   	xchg   ecx,eax
    1dc9:	70 0a                	jo     1dd5 <sysEnter_Vector-0x12e22b>
    1dcb:	7e 07                	jle    1dd4 <sysEnter_Vector-0x12e22c>
    1dcd:	00 00                	add    BYTE PTR [eax],al
    1dcf:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    1dd2:	00 00                	add    BYTE PTR [eax],al
    1dd4:	00 02                	add    BYTE PTR [edx],al
    1dd6:	91                   	xchg   ecx,eax
    1dd7:	6a 09                	push   0x9
    1dd9:	66                   	data16
    1dda:	00 01                	add    BYTE PTR [ecx],al
    1ddc:	0d 4a 01 00 00       	or     eax,0x14a
    1de1:	02 91 6c 0a 97 07    	add    dl,BYTE PTR [ecx+0x7970a6c]
    1de7:	00 00                	add    BYTE PTR [eax],al
    1de9:	01 0e                	add    DWORD PTR [esi],ecx
    1deb:	6c                   	ins    BYTE PTR es:[edi],dx
    1dec:	00 00                	add    BYTE PTR [eax],al
    1dee:	00 02                	add    BYTE PTR [edx],al
    1df0:	91                   	xchg   ecx,eax
    1df1:	64 00 06             	add    BYTE PTR fs:[esi],al
    1df4:	04 48                	add    al,0x48
    1df6:	00 00                	add    BYTE PTR [eax],al
    1df8:	00 06                	add    BYTE PTR [esi],al
    1dfa:	04 5a                	add    al,0x5a
    1dfc:	00 00                	add    BYTE PTR [eax],al
    1dfe:	00 06                	add    BYTE PTR [esi],al
    1e00:	04 6c                	add    al,0x6c
    1e02:	00 00                	add    BYTE PTR [eax],al
    1e04:	00 0b                	add    BYTE PTR [ebx],cl
    1e06:	83 07 00             	add    DWORD PTR [edi],0x0
    1e09:	00 01                	add    BYTE PTR [ecx],al
    1e0b:	1f                   	pop    ds
    1e0c:	b3 00                	mov    bl,0x0
    1e0e:	00 00                	add    BYTE PTR [eax],al
    1e10:	d7                   	xlat   BYTE PTR ds:[ebx]
    1e11:	18 00                	sbb    BYTE PTR [eax],al
    1e13:	9f                   	lahf   
    1e14:	20 00                	and    BYTE PTR [eax],al
    1e16:	00 00                	add    BYTE PTR [eax],al
    1e18:	01 9c 93 01 00 00 08 	add    DWORD PTR [ebx+edx*4+0x8000001],ebx
    1e1f:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1e22:	01 1f                	add    DWORD PTR [edi],ebx
    1e24:	b3 00                	mov    bl,0x0
    1e26:	00 00                	add    BYTE PTR [eax],al
    1e28:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1e2e:	6c                   	ins    BYTE PTR es:[edi],dx
    1e2f:	00 01                	add    BYTE PTR [ecx],al
    1e31:	1f                   	pop    ds
    1e32:	3a 00                	cmp    al,BYTE PTR [eax]
    1e34:	00 00                	add    BYTE PTR [eax],al
    1e36:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    1e3c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1e3d:	00 01                	add    BYTE PTR [ecx],al
    1e3f:	1f                   	pop    ds
    1e40:	85 00                	test   DWORD PTR [eax],eax
    1e42:	00 00                	add    BYTE PTR [eax],al
    1e44:	02 91 08 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0008]
    1e4a:	00 00                	add    BYTE PTR [eax],al
    1e4c:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1e4f:	6c                   	ins    BYTE PTR es:[edi],dx
    1e50:	00 00                	add    BYTE PTR [eax],al
    1e52:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    1e58:	9f                   	lahf   
    1e59:	0c af                	or     al,0xaf
    1e5b:	00 00                	add    BYTE PTR [eax],al
    1e5d:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    1e64:	05 03 44 54 00       	add    eax,0x544403
    1e69:	9f                   	lahf   
    1e6a:	0c 5b                	or     al,0x5b
    1e6c:	01 00                	add    DWORD PTR [eax],eax
    1e6e:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1e71:	6c                   	ins    BYTE PTR es:[edi],dx
    1e72:	00 00                	add    BYTE PTR [eax],al
    1e74:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    1e7a:	9f                   	lahf   
    1e7b:	0c 54                	or     al,0x54
    1e7d:	00 00                	add    BYTE PTR [eax],al
    1e7f:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1e82:	90                   	nop
    1e83:	00 00                	add    BYTE PTR [eax],al
    1e85:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    1e8b:	9f                   	lahf   
    1e8c:	0c 28                	or     al,0x28
    1e8e:	00 00                	add    BYTE PTR [eax],al
    1e90:	00 05 4f e8 01 00    	add    BYTE PTR ds:0x1e84f,al
    1e96:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    1e9c:	9f                   	lahf   
    1e9d:	06                   	push   es
    1e9e:	04 b5                	add    al,0xb5
    1ea0:	00 00                	add    BYTE PTR [eax],al
    1ea2:	00 00                	add    BYTE PTR [eax],al
    1ea4:	e8 00 00 00 04       	call   4001ea9 <sysEnter_Vector+0x3ed1ea9>
    1ea9:	00 db                	add    bl,bl
    1eab:	09 00                	or     DWORD PTR [eax],eax
    1ead:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1eb0:	f4                   	hlt    
    1eb1:	00 00                	add    BYTE PTR [eax],al
    1eb3:	00 0c ad 07 00 00 72 	add    BYTE PTR [ebp*4+0x72000007],cl
    1eba:	00 00                	add    BYTE PTR [eax],al
    1ebc:	00 6b 0c             	add    BYTE PTR [ebx+0xc],ch
    1ebf:	00 00                	add    BYTE PTR [eax],al
    1ec1:	02 01                	add    al,BYTE PTR [ecx]
    1ec3:	06                   	push   es
    1ec4:	64 00 00             	add    BYTE PTR fs:[eax],al
    1ec7:	00 02                	add    BYTE PTR [edx],al
    1ec9:	01 06                	add    DWORD PTR [esi],eax
    1ecb:	5d                   	pop    ebp
    1ecc:	00 00                	add    BYTE PTR [eax],al
    1ece:	00 02                	add    BYTE PTR [edx],al
    1ed0:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1ed6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1edd:	02 08                	add    cl,BYTE PTR [eax]
    1edf:	05 00 00 00 00       	add    eax,0x0
    1ee4:	02 01                	add    al,BYTE PTR [ecx]
    1ee6:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1ee9:	00 00                	add    BYTE PTR [eax],al
    1eeb:	02 02                	add    al,BYTE PTR [edx]
    1eed:	07                   	pop    es
    1eee:	0e                   	push   cs
    1eef:	00 00                	add    BYTE PTR [eax],al
    1ef1:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1ef4:	00 00                	add    BYTE PTR [eax],al
    1ef6:	00 03                	add    BYTE PTR [ebx],al
    1ef8:	34 59                	xor    al,0x59
    1efa:	00 00                	add    BYTE PTR [eax],al
    1efc:	00 02                	add    BYTE PTR [edx],al
    1efe:	04 07                	add    al,0x7
    1f00:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1f03:	00 02                	add    BYTE PTR [edx],al
    1f05:	08 07                	or     BYTE PTR [edi],al
    1f07:	34 00                	xor    al,0x0
    1f09:	00 00                	add    BYTE PTR [eax],al
    1f0b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1f12:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1f15:	9b                   	fwait
    1f16:	00 00                	add    BYTE PTR [eax],al
    1f18:	00 02                	add    BYTE PTR [edx],al
    1f1a:	01 02                	add    DWORD PTR [edx],eax
    1f1c:	95                   	xchg   ebp,eax
    1f1d:	00 00                	add    BYTE PTR [eax],al
    1f1f:	00 02                	add    BYTE PTR [edx],al
    1f21:	04 07                	add    al,0x7
    1f23:	39 00                	cmp    DWORD PTR [eax],eax
    1f25:	00 00                	add    BYTE PTR [eax],al
    1f27:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1f2a:	e1 00                	loope  1f2c <sysEnter_Vector-0x12e0d4>
    1f2c:	00 00                	add    BYTE PTR [eax],al
    1f2e:	05 04 1d 00 00       	add    eax,0x1d04
    1f33:	00 06                	add    BYTE PTR [esi],al
    1f35:	4b                   	dec    ebx
    1f36:	00 00                	add    BYTE PTR [eax],al
    1f38:	00 01                	add    BYTE PTR [ecx],al
    1f3a:	34 4e                	xor    al,0x4e
    1f3c:	00 00                	add    BYTE PTR [eax],al
    1f3e:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    1f44:	9f                   	lahf   
    1f45:	06                   	push   es
    1f46:	af                   	scas   eax,DWORD PTR es:[edi]
    1f47:	00 00                	add    BYTE PTR [eax],al
    1f49:	00 01                	add    BYTE PTR [ecx],al
    1f4b:	35 4e 00 00 00       	xor    eax,0x4e
    1f50:	05 03 44 54 00       	add    eax,0x544403
    1f55:	9f                   	lahf   
    1f56:	06                   	push   es
    1f57:	5b                   	pop    ebx
    1f58:	01 00                	add    DWORD PTR [eax],eax
    1f5a:	00 01                	add    BYTE PTR [ecx],al
    1f5c:	36                   	ss
    1f5d:	4e                   	dec    esi
    1f5e:	00 00                	add    BYTE PTR [eax],al
    1f60:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    1f66:	9f                   	lahf   
    1f67:	06                   	push   es
    1f68:	54                   	push   esp
    1f69:	00 00                	add    BYTE PTR [eax],al
    1f6b:	00 01                	add    BYTE PTR [ecx],al
    1f6d:	37                   	aaa    
    1f6e:	67 00 00             	add    BYTE PTR [bx+si],al
    1f71:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    1f77:	9f                   	lahf   
    1f78:	06                   	push   es
    1f79:	28 00                	sub    BYTE PTR [eax],al
    1f7b:	00 00                	add    BYTE PTR [eax],al
    1f7d:	02 4f e5             	add    cl,BYTE PTR [edi-0x1b]
    1f80:	00 00                	add    BYTE PTR [eax],al
    1f82:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    1f88:	9f                   	lahf   
    1f89:	05 04 8a 00 00       	add    eax,0x8a04
    1f8e:	00 00                	add    BYTE PTR [eax],al
    1f90:	eb 01                	jmp    1f93 <sysEnter_Vector-0x12e06d>
    1f92:	00 00                	add    BYTE PTR [eax],al
    1f94:	04 00                	add    al,0x0
    1f96:	28 0a                	sub    BYTE PTR [edx],cl
    1f98:	00 00                	add    BYTE PTR [eax],al
    1f9a:	04 01                	add    al,0x1
    1f9c:	f4                   	hlt    
    1f9d:	00 00                	add    BYTE PTR [eax],al
    1f9f:	00 0c b8             	add    BYTE PTR [eax+edi*4],cl
    1fa2:	07                   	pop    es
    1fa3:	00 00                	add    BYTE PTR [eax],al
    1fa5:	72 00                	jb     1fa7 <sysEnter_Vector-0x12e059>
    1fa7:	00 00                	add    BYTE PTR [eax],al
    1fa9:	f8                   	clc    
    1faa:	18 00                	sbb    BYTE PTR [eax],al
    1fac:	9f                   	lahf   
    1fad:	29 00                	sub    DWORD PTR [eax],eax
    1faf:	00 00                	add    BYTE PTR [eax],al
    1fb1:	f9                   	stc    
    1fb2:	0c 00                	or     al,0x0
    1fb4:	00 02                	add    BYTE PTR [edx],al
    1fb6:	01 06                	add    DWORD PTR [esi],eax
    1fb8:	64 00 00             	add    BYTE PTR fs:[eax],al
    1fbb:	00 02                	add    BYTE PTR [edx],al
    1fbd:	01 06                	add    DWORD PTR [esi],eax
    1fbf:	5d                   	pop    ebp
    1fc0:	00 00                	add    BYTE PTR [eax],al
    1fc2:	00 02                	add    BYTE PTR [edx],al
    1fc4:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1fca:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1fd1:	02 08                	add    cl,BYTE PTR [eax]
    1fd3:	05 00 00 00 00       	add    eax,0x0
    1fd8:	02 01                	add    al,BYTE PTR [ecx]
    1fda:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1fdd:	00 00                	add    BYTE PTR [eax],al
    1fdf:	02 02                	add    al,BYTE PTR [edx]
    1fe1:	07                   	pop    es
    1fe2:	0e                   	push   cs
    1fe3:	00 00                	add    BYTE PTR [eax],al
    1fe5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1fe8:	00 00                	add    BYTE PTR [eax],al
    1fea:	00 02                	add    BYTE PTR [edx],al
    1fec:	34 61                	xor    al,0x61
    1fee:	00 00                	add    BYTE PTR [eax],al
    1ff0:	00 02                	add    BYTE PTR [edx],al
    1ff2:	04 07                	add    al,0x7
    1ff4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1ff7:	00 02                	add    BYTE PTR [edx],al
    1ff9:	08 07                	or     BYTE PTR [edi],al
    1ffb:	34 00                	xor    al,0x0
    1ffd:	00 00                	add    BYTE PTR [eax],al
    1fff:	04 a4                	add    al,0xa4
    2001:	04 00                	add    al,0x0
    2003:	00 02                	add    BYTE PTR [edx],al
    2005:	56                   	push   esi
    2006:	61                   	popa   
    2007:	00 00                	add    BYTE PTR [eax],al
    2009:	00 02                	add    BYTE PTR [edx],al
    200b:	04 05                	add    al,0x5
    200d:	05 00 00 00 02       	add    eax,0x2000000
    2012:	0c 04                	or     al,0x4
    2014:	9b                   	fwait
    2015:	00 00                	add    BYTE PTR [eax],al
    2017:	00 02                	add    BYTE PTR [edx],al
    2019:	01 02                	add    DWORD PTR [edx],eax
    201b:	95                   	xchg   ebp,eax
    201c:	00 00                	add    BYTE PTR [eax],al
    201e:	00 05 12 03 00 00    	add    BYTE PTR ds:0x312,al
    2024:	04 61                	add    al,0x61
    2026:	00 00                	add    BYTE PTR [eax],al
    2028:	00 05 15 51 01 00    	add    BYTE PTR ds:0x15115,al
    202e:	00 06                	add    BYTE PTR [esi],al
    2030:	77 03                	ja     2035 <sysEnter_Vector-0x12dfcb>
    2032:	00 00                	add    BYTE PTR [eax],al
    2034:	00 06                	add    BYTE PTR [esi],al
    2036:	af                   	scas   eax,DWORD PTR es:[edi]
    2037:	03 00                	add    eax,DWORD PTR [eax]
    2039:	00 01                	add    BYTE PTR [ecx],al
    203b:	06                   	push   es
    203c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    203d:	02 00                	add    al,BYTE PTR [eax]
    203f:	00 02                	add    BYTE PTR [edx],al
    2041:	06                   	push   es
    2042:	04 03                	add    al,0x3
    2044:	00 00                	add    BYTE PTR [eax],al
    2046:	03 06                	add    eax,DWORD PTR [esi]
    2048:	4e                   	dec    esi
    2049:	02 00                	add    al,BYTE PTR [eax]
    204b:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    204e:	c9                   	leave  
    204f:	03 00                	add    eax,DWORD PTR [eax]
    2051:	00 05 06 28 03 00    	add    BYTE PTR ds:0x32806,al
    2057:	00 06                	add    BYTE PTR [esi],al
    2059:	06                   	push   es
    205a:	61                   	popa   
    205b:	02 00                	add    al,BYTE PTR [eax]
    205d:	00 07                	add    BYTE PTR [edi],al
    205f:	06                   	push   es
    2060:	fa                   	cli    
    2061:	03 00                	add    eax,DWORD PTR [eax]
    2063:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    2066:	6a 03                	push   0x3
    2068:	00 00                	add    BYTE PTR [eax],al
    206a:	59                   	pop    ecx
    206b:	06                   	push   es
    206c:	09 04 00             	or     DWORD PTR [eax+eax*1],eax
    206f:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    2072:	f0 02 00             	lock add al,BYTE PTR [eax]
    2075:	00 97 07 87 03 00    	add    BYTE PTR [edi+0x38707],dl
    207b:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    207e:	07                   	pop    es
    207f:	5d                   	pop    ebp
    2080:	03 00                	add    eax,DWORD PTR [eax]
    2082:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    2086:	ec                   	in     al,dx
    2087:	03 00                	add    eax,DWORD PTR [eax]
    2089:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    208c:	07                   	pop    es
    208d:	d2 02                	rol    BYTE PTR [edx],cl
    208f:	00 00                	add    BYTE PTR [eax],al
    2091:	66 01 07             	add    WORD PTR [edi],ax
    2094:	21 04 00             	and    DWORD PTR [eax+eax*1],eax
    2097:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    209a:	07                   	pop    es
    209b:	35 03 00 00 68       	xor    eax,0x68000003
    20a0:	01 07                	add    DWORD PTR [edi],eax
    20a2:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    20a3:	02 00                	add    al,BYTE PTR [eax]
    20a5:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    20a8:	07                   	pop    es
    20a9:	9e                   	sahf   
    20aa:	03 00                	add    eax,DWORD PTR [eax]
    20ac:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    20af:	07                   	pop    es
    20b0:	e0 02                	loopne 20b4 <sysEnter_Vector-0x12df4c>
    20b2:	00 00                	add    BYTE PTR [eax],al
    20b4:	71 01                	jno    20b7 <sysEnter_Vector-0x12df49>
    20b6:	07                   	pop    es
    20b7:	d7                   	xlat   BYTE PTR ds:[ebx]
    20b8:	03 00                	add    eax,DWORD PTR [eax]
    20ba:	00 00                	add    BYTE PTR [eax],al
    20bc:	03 07                	add    eax,DWORD PTR [edi]
    20be:	42                   	inc    edx
    20bf:	03 00                	add    eax,DWORD PTR [eax]
    20c1:	00 01                	add    BYTE PTR [ecx],al
    20c3:	03 07                	add    eax,DWORD PTR [edi]
    20c5:	b6 02                	mov    dh,0x2
    20c7:	00 00                	add    BYTE PTR [eax],al
    20c9:	02 03                	add    al,BYTE PTR [ebx]
    20cb:	07                   	pop    es
    20cc:	7b 02                	jnp    20d0 <sysEnter_Vector-0x12df30>
    20ce:	00 00                	add    BYTE PTR [eax],al
    20d0:	03 03                	add    eax,DWORD PTR [ebx]
    20d2:	07                   	pop    es
    20d3:	8b 02                	mov    eax,DWORD PTR [edx]
    20d5:	00 00                	add    BYTE PTR [eax],al
    20d7:	04 03                	add    al,0x3
    20d9:	07                   	pop    es
    20da:	c2 02 00             	ret    0x2
    20dd:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
    20e3:	07                   	pop    es
    20e4:	39 00                	cmp    DWORD PTR [eax],eax
    20e6:	00 00                	add    BYTE PTR [eax],al
    20e8:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    20eb:	e1 00                	loope  20ed <sysEnter_Vector-0x12df13>
    20ed:	00 00                	add    BYTE PTR [eax],al
    20ef:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
    20f6:	c3                   	ret    
    20f7:	07                   	pop    es
    20f8:	00 00                	add    BYTE PTR [eax],al
    20fa:	01 0a                	add    DWORD PTR [edx],ecx
    20fc:	3a 00                	cmp    al,BYTE PTR [eax]
    20fe:	00 00                	add    BYTE PTR [eax],al
    2100:	f8                   	clc    
    2101:	18 00                	sbb    BYTE PTR [eax],al
    2103:	9f                   	lahf   
    2104:	29 00                	sub    DWORD PTR [eax],eax
    2106:	00 00                	add    BYTE PTR [eax],al
    2108:	01 9c 8d 01 00 00 0a 	add    DWORD PTR [ebp+ecx*4+0xa000001],ebx
    210f:	c8 07 00 00          	enter  0x7,0x0
    2113:	01 0a                	add    DWORD PTR [edx],ecx
    2115:	8d 01                	lea    eax,[ecx]
    2117:	00 00                	add    BYTE PTR [eax],al
    2119:	02 91 00 00 08 04    	add    dl,BYTE PTR [ecx+0x4080000]
    211f:	3a 00                	cmp    al,BYTE PTR [eax]
    2121:	00 00                	add    BYTE PTR [eax],al
    2123:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    2126:	00 00                	add    BYTE PTR [eax],al
    2128:	03 34 56             	add    esi,DWORD PTR [esi+edx*2]
    212b:	00 00                	add    BYTE PTR [eax],al
    212d:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    2133:	9f                   	lahf   
    2134:	0b af 00 00 00 03    	or     ebp,DWORD PTR [edi+0x3000000]
    213a:	35 56 00 00 00       	xor    eax,0x56
    213f:	05 03 44 54 00       	add    eax,0x544403
    2144:	9f                   	lahf   
    2145:	0b 5b 01             	or     ebx,DWORD PTR [ebx+0x1]
    2148:	00 00                	add    BYTE PTR [eax],al
    214a:	03 36                	add    esi,DWORD PTR [esi]
    214c:	56                   	push   esi
    214d:	00 00                	add    BYTE PTR [eax],al
    214f:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    2155:	9f                   	lahf   
    2156:	0b 54 00 00          	or     edx,DWORD PTR [eax+eax*1+0x0]
    215a:	00 03                	add    BYTE PTR [ebx],al
    215c:	37                   	aaa    
    215d:	7a 00                	jp     215f <sysEnter_Vector-0x12dea1>
    215f:	00 00                	add    BYTE PTR [eax],al
    2161:	05 03 4c 54 00       	add    eax,0x544c03
    2166:	9f                   	lahf   
    2167:	0b 28                	or     ebp,DWORD PTR [eax]
    2169:	00 00                	add    BYTE PTR [eax],al
    216b:	00 04 4f             	add    BYTE PTR [edi+ecx*2],al
    216e:	e8 01 00 00 05       	call   5002174 <sysEnter_Vector+0x4ed2174>
    2173:	03 48 54             	add    ecx,DWORD PTR [eax+0x54]
    2176:	00 9f 08 04 5f 01    	add    BYTE PTR [edi+0x15f0408],bl
    217c:	00 00                	add    BYTE PTR [eax],al
    217e:	00 bd 03 00 00 04    	add    BYTE PTR [ebp+0x4000003],bh
    2184:	00 c7                	add    bh,al
    2186:	0a 00                	or     al,BYTE PTR [eax]
    2188:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    218b:	f4                   	hlt    
    218c:	00 00                	add    BYTE PTR [eax],al
    218e:	00 0c ef             	add    BYTE PTR [edi+ebp*8],cl
    2191:	07                   	pop    es
    2192:	00 00                	add    BYTE PTR [eax],al
    2194:	72 00                	jb     2196 <sysEnter_Vector-0x12de6a>
    2196:	00 00                	add    BYTE PTR [eax],al
    2198:	24 19                	and    al,0x19
    219a:	00 9f 18 07 00 00    	add    BYTE PTR [edi+0x718],bl
    21a0:	e3 0d                	jecxz  21af <sysEnter_Vector-0x12de51>
    21a2:	00 00                	add    BYTE PTR [eax],al
    21a4:	02 ba 05 00 00 02    	add    bh,BYTE PTR [edx+0x2000005]
    21aa:	28 30                	sub    BYTE PTR [eax],dh
    21ac:	00 00                	add    BYTE PTR [eax],al
    21ae:	00 03                	add    BYTE PTR [ebx],al
    21b0:	04 e4                	add    al,0xe4
    21b2:	04 00                	add    al,0x0
    21b4:	00 3a                	add    BYTE PTR [edx],bh
    21b6:	00 00                	add    BYTE PTR [eax],al
    21b8:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    21bb:	06                   	push   es
    21bc:	64 00 00             	add    BYTE PTR fs:[eax],al
    21bf:	00 02                	add    BYTE PTR [edx],al
    21c1:	c1 05 00 00 02 62 25 	rol    DWORD PTR ds:0x62020000,0x25
    21c8:	00 00                	add    BYTE PTR [eax],al
    21ca:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    21cd:	06                   	push   es
    21ce:	5d                   	pop    ebp
    21cf:	00 00                	add    BYTE PTR [eax],al
    21d1:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    21d4:	05 ea 00 00 00       	add    eax,0xea
    21d9:	05 04 05 69 6e       	add    eax,0x6e690504
    21de:	74 00                	je     21e0 <sysEnter_Vector-0x12de20>
    21e0:	04 08                	add    al,0x8
    21e2:	05 00 00 00 00       	add    eax,0x0
    21e7:	04 01                	add    al,0x1
    21e9:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    21ec:	00 00                	add    BYTE PTR [eax],al
    21ee:	04 02                	add    al,0x2
    21f0:	07                   	pop    es
    21f1:	0e                   	push   cs
    21f2:	00 00                	add    BYTE PTR [eax],al
    21f4:	00 02                	add    BYTE PTR [edx],al
    21f6:	69 00 00 00 03 34    	imul   eax,DWORD PTR [eax],0x34030000
    21fc:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    2202:	07                   	pop    es
    2203:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2206:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    2209:	07                   	pop    es
    220a:	34 00                	xor    al,0x0
    220c:	00 00                	add    BYTE PTR [eax],al
    220e:	04 04                	add    al,0x4
    2210:	05 05 00 00 00       	add    eax,0x5
    2215:	04 0c                	add    al,0xc
    2217:	04 9b                	add    al,0x9b
    2219:	00 00                	add    BYTE PTR [eax],al
    221b:	00 06                	add    BYTE PTR [esi],al
    221d:	04 a3                	add    al,0xa3
    221f:	00 00                	add    BYTE PTR [eax],al
    2221:	00 07                	add    BYTE PTR [edi],al
    2223:	3a 00                	cmp    al,BYTE PTR [eax]
    2225:	00 00                	add    BYTE PTR [eax],al
    2227:	04 01                	add    al,0x1
    2229:	02 95 00 00 00 04    	add    dl,BYTE PTR [ebp+0x4000000]
    222f:	04 07                	add    al,0x7
    2231:	39 00                	cmp    DWORD PTR [eax],eax
    2233:	00 00                	add    BYTE PTR [eax],al
    2235:	04 04                	add    al,0x4
    2237:	07                   	pop    es
    2238:	e1 00                	loope  223a <sysEnter_Vector-0x12ddc6>
    223a:	00 00                	add    BYTE PTR [eax],al
    223c:	06                   	push   es
    223d:	04 3a                	add    al,0x3a
    223f:	00 00                	add    BYTE PTR [eax],al
    2241:	00 08                	add    BYTE PTR [eax],cl
    2243:	17                   	pop    ss
    2244:	08 00                	or     BYTE PTR [eax],al
    2246:	00 01                	add    BYTE PTR [ecx],al
    2248:	0a 5a 00             	or     bl,BYTE PTR [edx+0x0]
    224b:	00 00                	add    BYTE PTR [eax],al
    224d:	24 19                	and    al,0x19
    224f:	00 9f 5f 00 00 00    	add    BYTE PTR [edi+0x5f],bl
    2255:	01 9c f5 00 00 00 09 	add    DWORD PTR [ebp+esi*8+0x9000000],ebx
    225c:	73 00                	jae    225e <sysEnter_Vector-0x12dda2>
    225e:	01 0a                	add    DWORD PTR [edx],ecx
    2260:	f5                   	cmc    
    2261:	00 00                	add    BYTE PTR [eax],al
    2263:	00 02                	add    BYTE PTR [edx],al
    2265:	91                   	xchg   ecx,eax
    2266:	00 0a                	add    BYTE PTR [edx],cl
    2268:	69 00 01 0c 5a 00    	imul   eax,DWORD PTR [eax],0x5a0c01
    226e:	00 00                	add    BYTE PTR [eax],al
    2270:	02 91 70 00 06 04    	add    dl,BYTE PTR [ecx+0x4060070]
    2276:	9d                   	popf   
    2277:	00 00                	add    BYTE PTR [eax],al
    2279:	00 08                	add    BYTE PTR [eax],cl
    227b:	21 08                	and    DWORD PTR [eax],ecx
    227d:	00 00                	add    BYTE PTR [eax],al
    227f:	01 21                	add    DWORD PTR [ecx],esp
    2281:	bd 00 00 00 83       	mov    ebp,0x83000000
    2286:	19 00                	sbb    DWORD PTR [eax],eax
    2288:	9f                   	lahf   
    2289:	3e 02 00             	add    al,BYTE PTR ds:[eax]
    228c:	00 01                	add    BYTE PTR [ecx],al
    228e:	9c                   	pushf  
    228f:	d5 01                	aad    0x1
    2291:	00 00                	add    BYTE PTR [eax],al
    2293:	09 73 74             	or     DWORD PTR [ebx+0x74],esi
    2296:	72 00                	jb     2298 <sysEnter_Vector-0x12dd68>
    2298:	01 21                	add    DWORD PTR [ecx],esp
    229a:	bd 00 00 00 02       	mov    ebp,0x2000000
    229f:	91                   	xchg   ecx,eax
    22a0:	00 09                	add    BYTE PTR [ecx],cl
    22a2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    22a3:	75 6d                	jne    2312 <sysEnter_Vector-0x12dcee>
    22a5:	00 01                	add    BYTE PTR [ecx],al
    22a7:	21 8f 00 00 00 02    	and    DWORD PTR [edi+0x2000000],ecx
    22ad:	91                   	xchg   ecx,eax
    22ae:	04 0b                	add    al,0xb
    22b0:	28 08                	sub    BYTE PTR [eax],cl
    22b2:	00 00                	add    BYTE PTR [eax],al
    22b4:	01 21                	add    DWORD PTR [ecx],esp
    22b6:	5a                   	pop    edx
    22b7:	00 00                	add    BYTE PTR [eax],al
    22b9:	00 02                	add    BYTE PTR [edx],al
    22bb:	91                   	xchg   ecx,eax
    22bc:	08 0b                	or     BYTE PTR [ebx],cl
    22be:	9d                   	popf   
    22bf:	05 00 00 01 21       	add    eax,0x21010000
    22c4:	5a                   	pop    edx
    22c5:	00 00                	add    BYTE PTR [eax],al
    22c7:	00 02                	add    BYTE PTR [edx],al
    22c9:	91                   	xchg   ecx,eax
    22ca:	0c 0b                	or     al,0xb
    22cc:	2d 08 00 00 01       	sub    eax,0x1000008
    22d1:	21 5a 00             	and    DWORD PTR [edx+0x0],ebx
    22d4:	00 00                	add    BYTE PTR [eax],al
    22d6:	02 91 10 0b e5 00    	add    dl,BYTE PTR [ecx+0xe50b10]
    22dc:	00 00                	add    BYTE PTR [eax],al
    22de:	01 22                	add    DWORD PTR [edx],esp
    22e0:	5a                   	pop    edx
    22e1:	00 00                	add    BYTE PTR [eax],al
    22e3:	00 02                	add    BYTE PTR [edx],al
    22e5:	91                   	xchg   ecx,eax
    22e6:	14 0c                	adc    al,0xc
    22e8:	fd                   	std    
    22e9:	07                   	pop    es
    22ea:	00 00                	add    BYTE PTR [eax],al
    22ec:	01 25 e5 01 00 00    	add    DWORD PTR ds:0x1e5,esp
    22f2:	05 03 2c 51 00       	add    eax,0x512c03
    22f7:	9f                   	lahf   
    22f8:	0a 74 6d 70          	or     dh,BYTE PTR [ebp+ebp*2+0x70]
    22fc:	00 01                	add    BYTE PTR [ecx],al
    22fe:	27                   	daa    
    22ff:	ea 01 00 00 03 91 9e 	jmp    0x9e91:0x3000001
    2306:	7f 0a                	jg     2312 <sysEnter_Vector-0x12dcee>
    2308:	63 00                	arpl   WORD PTR [eax],ax
    230a:	01 28                	add    DWORD PTR [eax],ebp
    230c:	3a 00                	cmp    al,BYTE PTR [eax]
    230e:	00 00                	add    BYTE PTR [eax],al
    2310:	02 91 66 0c 00 02    	add    dl,BYTE PTR [ecx+0x2000c66]
    2316:	00 00                	add    BYTE PTR [eax],al
    2318:	01 28                	add    DWORD PTR [eax],ebp
    231a:	3a 00                	cmp    al,BYTE PTR [eax]
    231c:	00 00                	add    BYTE PTR [eax],al
    231e:	02 91 6f 0c e2 07    	add    dl,BYTE PTR [ecx+0x7e20c6f]
    2324:	00 00                	add    BYTE PTR [eax],al
    2326:	01 28                	add    DWORD PTR [eax],ebp
    2328:	3a 00                	cmp    al,BYTE PTR [eax]
    232a:	00 00                	add    BYTE PTR [eax],al
    232c:	02 91 67 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a67]
    2332:	01 29                	add    DWORD PTR [ecx],ebp
    2334:	5a                   	pop    edx
    2335:	00 00                	add    BYTE PTR [eax],al
    2337:	00 02                	add    BYTE PTR [edx],al
    2339:	91                   	xchg   ecx,eax
    233a:	68 0d 69 1a 00       	push   0x1a690d
    233f:	9f                   	lahf   
    2340:	25 00 00 00 0c       	and    eax,0xc000000
    2345:	e9 07 00 00 01       	jmp    1002351 <sysEnter_Vector+0xed2351>
    234a:	4c                   	dec    esp
    234b:	5a                   	pop    edx
    234c:	00 00                	add    BYTE PTR [eax],al
    234e:	00 02                	add    BYTE PTR [edx],al
    2350:	91                   	xchg   ecx,eax
    2351:	60                   	pusha  
    2352:	00 00                	add    BYTE PTR [eax],al
    2354:	0e                   	push   cs
    2355:	3a 00                	cmp    al,BYTE PTR [eax]
    2357:	00 00                	add    BYTE PTR [eax],al
    2359:	e5 01                	in     eax,0x1
    235b:	00 00                	add    BYTE PTR [eax],al
    235d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
    2360:	00 00                	add    BYTE PTR [eax],al
    2362:	0f 00 07             	sldt   WORD PTR [edi]
    2365:	d5 01                	aad    0x1
    2367:	00 00                	add    BYTE PTR [eax],al
    2369:	0e                   	push   cs
    236a:	3a 00                	cmp    al,BYTE PTR [eax]
    236c:	00 00                	add    BYTE PTR [eax],al
    236e:	fa                   	cli    
    236f:	01 00                	add    DWORD PTR [eax],eax
    2371:	00 0f                	add    BYTE PTR [edi],cl
    2373:	b6 00                	mov    dh,0x0
    2375:	00 00                	add    BYTE PTR [eax],al
    2377:	41                   	inc    ecx
    2378:	00 10                	add    BYTE PTR [eax],dl
    237a:	04 08                	add    al,0x8
    237c:	00 00                	add    BYTE PTR [eax],al
    237e:	01 68 5a             	add    DWORD PTR [eax+0x5a],ebp
    2381:	00 00                	add    BYTE PTR [eax],al
    2383:	00 c1                	add    cl,al
    2385:	1b 00                	sbb    eax,DWORD PTR [eax]
    2387:	9f                   	lahf   
    2388:	48                   	dec    eax
    2389:	04 00                	add    al,0x0
    238b:	00 01                	add    BYTE PTR [ecx],al
    238d:	9c                   	pushf  
    238e:	03 03                	add    eax,DWORD PTR [ebx]
    2390:	00 00                	add    BYTE PTR [eax],al
    2392:	09 62 75             	or     DWORD PTR [edx+0x75],esp
    2395:	66                   	data16
    2396:	00 01                	add    BYTE PTR [ecx],al
    2398:	68 bd 00 00 00       	push   0xbd
    239d:	02 91 00 09 66 6d    	add    dl,BYTE PTR [ecx+0x6d660900]
    23a3:	74 00                	je     23a5 <sysEnter_Vector-0x12dc5b>
    23a5:	01 68 9d             	add    DWORD PTR [eax-0x63],ebp
    23a8:	00 00                	add    BYTE PTR [eax],al
    23aa:	00 02                	add    BYTE PTR [edx],al
    23ac:	91                   	xchg   ecx,eax
    23ad:	04 0b                	add    al,0xb
    23af:	87 06                	xchg   DWORD PTR [esi],eax
    23b1:	00 00                	add    BYTE PTR [eax],al
    23b3:	01 68 41             	add    DWORD PTR [eax+0x41],ebp
    23b6:	00 00                	add    BYTE PTR [eax],al
    23b8:	00 02                	add    BYTE PTR [edx],al
    23ba:	91                   	xchg   ecx,eax
    23bb:	08 0a                	or     BYTE PTR [edx],cl
    23bd:	6c                   	ins    BYTE PTR es:[edi],dx
    23be:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    23c0:	00 01                	add    BYTE PTR [ecx],al
    23c2:	6a 5a                	push   0x5a
    23c4:	00 00                	add    BYTE PTR [eax],al
    23c6:	00 02                	add    BYTE PTR [edx],al
    23c8:	91                   	xchg   ecx,eax
    23c9:	6c                   	ins    BYTE PTR es:[edi],dx
    23ca:	0a 6e 75             	or     ch,BYTE PTR [esi+0x75]
    23cd:	6d                   	ins    DWORD PTR es:[edi],dx
    23ce:	00 01                	add    BYTE PTR [ecx],al
    23d0:	6b af 00 00 00 02 91 	imul   ebp,DWORD PTR [edi+0x2000000],0xffffff91
    23d7:	68 0a 69 00 01       	push   0x100690a
    23dc:	6c                   	ins    BYTE PTR es:[edi],dx
    23dd:	5a                   	pop    edx
    23de:	00 00                	add    BYTE PTR [eax],al
    23e0:	00 02                	add    BYTE PTR [edx],al
    23e2:	91                   	xchg   ecx,eax
    23e3:	64                   	fs
    23e4:	0c 28                	or     al,0x28
    23e6:	08 00                	or     BYTE PTR [eax],al
    23e8:	00 01                	add    BYTE PTR [ecx],al
    23ea:	6c                   	ins    BYTE PTR es:[edi],dx
    23eb:	5a                   	pop    edx
    23ec:	00 00                	add    BYTE PTR [eax],al
    23ee:	00 02                	add    BYTE PTR [edx],al
    23f0:	91                   	xchg   ecx,eax
    23f1:	60                   	pusha  
    23f2:	0a 73 74             	or     dh,BYTE PTR [ebx+0x74]
    23f5:	72 00                	jb     23f7 <sysEnter_Vector-0x12dc09>
    23f7:	01 6d bd             	add    DWORD PTR [ebp-0x43],ebp
    23fa:	00 00                	add    BYTE PTR [eax],al
    23fc:	00 02                	add    BYTE PTR [edx],al
    23fe:	91                   	xchg   ecx,eax
    23ff:	5c                   	pop    esp
    2400:	0a 73 00             	or     dh,BYTE PTR [ebx+0x0]
    2403:	01 6e 9d             	add    DWORD PTR [esi-0x63],ebp
    2406:	00 00                	add    BYTE PTR [eax],al
    2408:	00 02                	add    BYTE PTR [edx],al
    240a:	91                   	xchg   ecx,eax
    240b:	58                   	pop    eax
    240c:	0c 3a                	or     al,0x3a
    240e:	09 00                	or     DWORD PTR [eax],eax
    2410:	00 01                	add    BYTE PTR [ecx],al
    2412:	70 5a                	jo     246e <sysEnter_Vector-0x12db92>
    2414:	00 00                	add    BYTE PTR [eax],al
    2416:	00 02                	add    BYTE PTR [edx],al
    2418:	91                   	xchg   ecx,eax
    2419:	54                   	push   esp
    241a:	0c cf                	or     al,0xcf
    241c:	07                   	pop    es
    241d:	00 00                	add    BYTE PTR [eax],al
    241f:	01 72 5a             	add    DWORD PTR [edx+0x5a],esi
    2422:	00 00                	add    BYTE PTR [eax],al
    2424:	00 02                	add    BYTE PTR [edx],al
    2426:	91                   	xchg   ecx,eax
    2427:	50                   	push   eax
    2428:	0c 2d                	or     al,0x2d
    242a:	08 00                	or     BYTE PTR [eax],al
    242c:	00 01                	add    BYTE PTR [ecx],al
    242e:	73 5a                	jae    248a <sysEnter_Vector-0x12db76>
    2430:	00 00                	add    BYTE PTR [eax],al
    2432:	00 02                	add    BYTE PTR [edx],al
    2434:	91                   	xchg   ecx,eax
    2435:	4c                   	dec    esp
    2436:	0c 0d                	or     al,0xd
    2438:	08 00                	or     BYTE PTR [eax],al
    243a:	00 01                	add    BYTE PTR [ecx],al
    243c:	75 5a                	jne    2498 <sysEnter_Vector-0x12db68>
    243e:	00 00                	add    BYTE PTR [eax],al
    2440:	00 02                	add    BYTE PTR [edx],al
    2442:	91                   	xchg   ecx,eax
    2443:	48                   	dec    eax
    2444:	11 db                	adc    ebx,ebx
    2446:	07                   	pop    es
    2447:	00 00                	add    BYTE PTR [eax],al
    2449:	01 7f 05             	add    DWORD PTR [edi+0x5],edi
    244c:	1c 00                	sbb    al,0x0
    244e:	9f                   	lahf   
    244f:	12 aa 1e 00 9f 1b    	adc    ch,BYTE PTR [edx+0x1b9f001e]
    2455:	00 00                	add    BYTE PTR [eax],al
    2457:	00 eb                	add    bl,ch
    2459:	02 00                	add    al,BYTE PTR [eax]
    245b:	00 0a                	add    BYTE PTR [edx],cl
    245d:	69 70 00 01 e0 03 03 	imul   esi,DWORD PTR [eax+0x0],0x303e001
    2464:	00 00                	add    BYTE PTR [eax],al
    2466:	02 91 44 00 0d ca    	add    dl,BYTE PTR [ecx-0x35f2ffbc]
    246c:	1e                   	push   ds
    246d:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    2473:	0a 69 70             	or     ch,BYTE PTR [ecx+0x70]
    2476:	00 01                	add    BYTE PTR [ecx],al
    2478:	e3 09                	jecxz  2483 <sysEnter_Vector-0x12db7d>
    247a:	03 00                	add    eax,DWORD PTR [eax]
    247c:	00 02                	add    BYTE PTR [edx],al
    247e:	91                   	xchg   ecx,eax
    247f:	40                   	inc    eax
    2480:	00 00                	add    BYTE PTR [eax],al
    2482:	06                   	push   es
    2483:	04 8f                	add    al,0x8f
    2485:	00 00                	add    BYTE PTR [eax],al
    2487:	00 06                	add    BYTE PTR [esi],al
    2489:	04 5a                	add    al,0x5a
    248b:	00 00                	add    BYTE PTR [eax],al
    248d:	00 13                	add    BYTE PTR [ebx],dl
    248f:	05 08 00 00 01       	add    eax,0x1000008
    2494:	15 01 5a 00 00       	adc    eax,0x5a01
    2499:	00 09                	add    BYTE PTR [ecx],cl
    249b:	20 00                	and    BYTE PTR [eax],al
    249d:	9f                   	lahf   
    249e:	33 00                	xor    eax,DWORD PTR [eax]
    24a0:	00 00                	add    BYTE PTR [eax],al
    24a2:	01 9c 65 03 00 00 14 	add    DWORD PTR [ebp+eiz*2+0x14000003],ebx
    24a9:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    24ac:	00 01                	add    BYTE PTR [ecx],al
    24ae:	15 01 bd 00 00       	adc    eax,0xbd01
    24b3:	00 02                	add    BYTE PTR [edx],al
    24b5:	91                   	xchg   ecx,eax
    24b6:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    24b9:	6d                   	ins    DWORD PTR es:[edi],dx
    24ba:	74 00                	je     24bc <sysEnter_Vector-0x12db44>
    24bc:	01 15 01 9d 00 00    	add    DWORD PTR ds:0x9d01,edx
    24c2:	00 02                	add    BYTE PTR [edx],al
    24c4:	91                   	xchg   ecx,eax
    24c5:	04 15                	add    al,0x15
    24c7:	16                   	push   ss
    24c8:	87 06                	xchg   DWORD PTR [esi],eax
    24ca:	00 00                	add    BYTE PTR [eax],al
    24cc:	01 17                	add    DWORD PTR [edi],edx
    24ce:	01 41 00             	add    DWORD PTR [ecx+0x0],eax
    24d1:	00 00                	add    BYTE PTR [eax],al
    24d3:	02 91 68 17 69 00    	add    dl,BYTE PTR [ecx+0x691768]
    24d9:	01 18                	add    DWORD PTR [eax],ebx
    24db:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    24de:	00 00                	add    BYTE PTR [eax],al
    24e0:	02 91 6c 00 18 4b    	add    dl,BYTE PTR [ecx+0x4b18006c]
    24e6:	00 00                	add    BYTE PTR [eax],al
    24e8:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    24eb:	76 00                	jbe    24ed <sysEnter_Vector-0x12db13>
    24ed:	00 00                	add    BYTE PTR [eax],al
    24ef:	05 03 40 54 00       	add    eax,0x544003
    24f4:	9f                   	lahf   
    24f5:	18 af 00 00 00 04    	sbb    BYTE PTR [edi+0x4000000],ch
    24fb:	35 76 00 00 00       	xor    eax,0x76
    2500:	05 03 44 54 00       	add    eax,0x544403
    2505:	9f                   	lahf   
    2506:	18 5b 01             	sbb    BYTE PTR [ebx+0x1],bl
    2509:	00 00                	add    BYTE PTR [eax],al
    250b:	04 36                	add    al,0x36
    250d:	76 00                	jbe    250f <sysEnter_Vector-0x12daf1>
    250f:	00 00                	add    BYTE PTR [eax],al
    2511:	05 03 3c 54 00       	add    eax,0x543c03
    2516:	9f                   	lahf   
    2517:	18 54 00 00          	sbb    BYTE PTR [eax+eax*1+0x0],dl
    251b:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    251e:	8f 00                	pop    DWORD PTR [eax]
    2520:	00 00                	add    BYTE PTR [eax],al
    2522:	05 03 4c 54 00       	add    eax,0x544c03
    2527:	9f                   	lahf   
    2528:	18 28                	sbb    BYTE PTR [eax],ch
    252a:	00 00                	add    BYTE PTR [eax],al
    252c:	00 05 4f ba 03 00    	add    BYTE PTR ds:0x3ba4f,al
    2532:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    2538:	9f                   	lahf   
    2539:	06                   	push   es
    253a:	04 bd                	add    al,0xbd
    253c:	00 00                	add    BYTE PTR [eax],al
    253e:	00 00                	add    BYTE PTR [eax],al
    2540:	58                   	pop    eax
    2541:	04 00                	add    al,0x0
    2543:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2546:	1d 0c 00 00 04       	sbb    eax,0x400000c
    254b:	01 f4                	add    esp,esi
    254d:	00 00                	add    BYTE PTR [eax],al
    254f:	00 0c 99             	add    BYTE PTR [ecx+ebx*4],cl
    2552:	08 00                	or     BYTE PTR [eax],al
    2554:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2557:	00 00                	add    BYTE PTR [eax],al
    2559:	3c 20                	cmp    al,0x20
    255b:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    2561:	c5 0f                	lds    ecx,FWORD PTR [edi]
    2563:	00 00                	add    BYTE PTR [eax],al
    2565:	02 01                	add    al,BYTE PTR [ecx]
    2567:	06                   	push   es
    2568:	64 00 00             	add    BYTE PTR fs:[eax],al
    256b:	00 02                	add    BYTE PTR [edx],al
    256d:	01 06                	add    DWORD PTR [esi],eax
    256f:	5d                   	pop    ebp
    2570:	00 00                	add    BYTE PTR [eax],al
    2572:	00 02                	add    BYTE PTR [edx],al
    2574:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    257a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2581:	02 08                	add    cl,BYTE PTR [eax]
    2583:	05 00 00 00 00       	add    eax,0x0
    2588:	02 01                	add    al,BYTE PTR [ecx]
    258a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    258d:	00 00                	add    BYTE PTR [eax],al
    258f:	02 02                	add    al,BYTE PTR [edx]
    2591:	07                   	pop    es
    2592:	0e                   	push   cs
    2593:	00 00                	add    BYTE PTR [eax],al
    2595:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2598:	00 00                	add    BYTE PTR [eax],al
    259a:	00 02                	add    BYTE PTR [edx],al
    259c:	34 61                	xor    al,0x61
    259e:	00 00                	add    BYTE PTR [eax],al
    25a0:	00 02                	add    BYTE PTR [edx],al
    25a2:	04 07                	add    al,0x7
    25a4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    25a7:	00 04 3d 08 00 00 02 	add    BYTE PTR [edi*1+0x2000008],al
    25ae:	37                   	aaa    
    25af:	73 00                	jae    25b1 <sysEnter_Vector-0x12da4f>
    25b1:	00 00                	add    BYTE PTR [eax],al
    25b3:	02 08                	add    cl,BYTE PTR [eax]
    25b5:	07                   	pop    es
    25b6:	34 00                	xor    al,0x0
    25b8:	00 00                	add    BYTE PTR [eax],al
    25ba:	04 9d                	add    al,0x9d
    25bc:	04 00                	add    al,0x0
    25be:	00 03                	add    BYTE PTR [ebx],al
    25c0:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    25c3:	00 00                	add    BYTE PTR [eax],al
    25c5:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    25cc:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    25cf:	9b                   	fwait
    25d0:	00 00                	add    BYTE PTR [eax],al
    25d2:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    25d8:	00 06                	add    BYTE PTR [esi],al
    25da:	25 00 00 00 02       	and    eax,0x2000000
    25df:	01 02                	add    DWORD PTR [edx],eax
    25e1:	95                   	xchg   ebp,eax
    25e2:	00 00                	add    BYTE PTR [eax],al
    25e4:	00 02                	add    BYTE PTR [edx],al
    25e6:	04 07                	add    al,0x7
    25e8:	39 00                	cmp    DWORD PTR [eax],eax
    25ea:	00 00                	add    BYTE PTR [eax],al
    25ec:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    25ef:	e1 00                	loope  25f1 <sysEnter_Vector-0x12da0f>
    25f1:	00 00                	add    BYTE PTR [eax],al
    25f3:	07                   	pop    es
    25f4:	04 05                	add    al,0x5
    25f6:	04 25                	add    al,0x25
    25f8:	00 00                	add    BYTE PTR [eax],al
    25fa:	00 08                	add    BYTE PTR [eax],cl
    25fc:	14 09                	adc    al,0x9
    25fe:	00 00                	add    BYTE PTR [eax],al
    2600:	0c 04                	or     al,0x4
    2602:	17                   	pop    ss
    2603:	ec                   	in     al,dx
    2604:	00 00                	add    BYTE PTR [eax],al
    2606:	00 09                	add    BYTE PTR [ecx],cl
    2608:	56                   	push   esi
    2609:	08 00                	or     BYTE PTR [eax],al
    260b:	00 04 19             	add    BYTE PTR [ecx+ebx*1],al
    260e:	ec                   	in     al,dx
    260f:	00 00                	add    BYTE PTR [eax],al
    2611:	00 00                	add    BYTE PTR [eax],al
    2613:	09 56 07             	or     DWORD PTR [esi+0x7],edx
    2616:	00 00                	add    BYTE PTR [eax],al
    2618:	04 19                	add    al,0x19
    261a:	ec                   	in     al,dx
    261b:	00 00                	add    BYTE PTR [eax],al
    261d:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2620:	0c 09                	or     al,0x9
    2622:	00 00                	add    BYTE PTR [eax],al
    2624:	04 1a                	add    al,0x1a
    2626:	b3 00                	mov    bl,0x0
    2628:	00 00                	add    BYTE PTR [eax],al
    262a:	08 00                	or     BYTE PTR [eax],al
    262c:	05 04 bb 00 00       	add    eax,0xbb04
    2631:	00 04 c8             	add    BYTE PTR [eax+ecx*8],al
    2634:	08 00                	or     BYTE PTR [eax],al
    2636:	00 04 1b             	add    BYTE PTR [ebx+ebx*1],al
    2639:	bb 00 00 00 08       	mov    ebx,0x8000000
    263e:	74 08                	je     2648 <sysEnter_Vector-0x12d9b8>
    2640:	00 00                	add    BYTE PTR [eax],al
    2642:	14 05                	adc    al,0x5
    2644:	1b 2e                	sbb    ebp,DWORD PTR [esi]
    2646:	01 00                	add    DWORD PTR [eax],eax
    2648:	00 09                	add    BYTE PTR [ecx],cl
    264a:	6d                   	ins    DWORD PTR es:[edi],dx
    264b:	08 00                	or     BYTE PTR [eax],al
    264d:	00 05 1d f2 00 00    	add    BYTE PTR ds:0xf21d,al
    2653:	00 00                	add    BYTE PTR [eax],al
    2655:	09 37                	or     DWORD PTR [edi],esi
    2657:	08 00                	or     BYTE PTR [eax],al
    2659:	00 05 1e 61 00 00    	add    BYTE PTR ds:0x611e,al
    265f:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2662:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2663:	09 00                	or     DWORD PTR [eax],eax
    2665:	00 05 1f 5f 01 00    	add    BYTE PTR ds:0x15f1f,al
    266b:	00 10                	add    BYTE PTR [eax],dl
    266d:	00 08                	add    BYTE PTR [eax],cl
    266f:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2670:	08 00                	or     BYTE PTR [eax],al
    2672:	00 0c 05 37 5f 01 00 	add    BYTE PTR [eax*1+0x15f37],cl
    2679:	00 09                	add    BYTE PTR [ecx],cl
    267b:	92                   	xchg   edx,eax
    267c:	08 00                	or     BYTE PTR [eax],al
    267e:	00 05 39 b5 00 00    	add    BYTE PTR ds:0xb539,al
    2684:	00 00                	add    BYTE PTR [eax],al
    2686:	09 76 09             	or     DWORD PTR [esi+0x9],esi
    2689:	00 00                	add    BYTE PTR [eax],al
    268b:	05 3a 68 02 00       	add    eax,0x2683a
    2690:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2693:	87 09                	xchg   DWORD PTR [ecx],ecx
    2695:	00 00                	add    BYTE PTR [eax],al
    2697:	05 3b 5f 01 00       	add    eax,0x15f3b
    269c:	00 08                	add    BYTE PTR [eax],cl
    269e:	00 05 04 2e 01 00    	add    BYTE PTR ds:0x12e04,al
    26a4:	00 08                	add    BYTE PTR [eax],cl
    26a6:	82                   	(bad)  
    26a7:	08 00                	or     BYTE PTR [eax],al
    26a9:	00 0c 05 22 96 01 00 	add    BYTE PTR [eax*1+0x19622],cl
    26b0:	00 09                	add    BYTE PTR [ecx],cl
    26b2:	23 09                	and    ecx,DWORD PTR [ecx]
    26b4:	00 00                	add    BYTE PTR [eax],al
    26b6:	05 24 5f 01 00       	add    eax,0x15f24
    26bb:	00 00                	add    BYTE PTR [eax],al
    26bd:	09 66 08             	or     DWORD PTR [esi+0x8],esp
    26c0:	00 00                	add    BYTE PTR [eax],al
    26c2:	05 25 96 01 00       	add    eax,0x19625
    26c7:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    26ca:	46                   	inc    esi
    26cb:	08 00                	or     BYTE PTR [eax],al
    26cd:	00 05 26 3a 00 00    	add    BYTE PTR ds:0x3a26,al
    26d3:	00 08                	add    BYTE PTR [eax],cl
    26d5:	00 05 04 fd 00 00    	add    BYTE PTR ds:0xfd04,al
    26db:	00 08                	add    BYTE PTR [eax],cl
    26dd:	78 09                	js     26e8 <sysEnter_Vector-0x12d918>
    26df:	00 00                	add    BYTE PTR [eax],al
    26e1:	24 05                	and    al,0x5
    26e3:	29 09                	sub    DWORD PTR [ecx],ecx
    26e5:	02 00                	add    al,BYTE PTR [eax]
    26e7:	00 09                	add    BYTE PTR [ecx],cl
    26e9:	06                   	push   es
    26ea:	09 00                	or     DWORD PTR [eax],eax
    26ec:	00 05 2b 61 00 00    	add    BYTE PTR ds:0x612b,al
    26f2:	00 00                	add    BYTE PTR [eax],al
    26f4:	09 46 09             	or     DWORD PTR [esi+0x9],eax
    26f7:	00 00                	add    BYTE PTR [eax],al
    26f9:	05 2c 4f 00 00       	add    eax,0x4f2c
    26fe:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2701:	e2 08                	loop   270b <sysEnter_Vector-0x12d8f5>
    2703:	00 00                	add    BYTE PTR [eax],al
    2705:	05 2d 4f 00 00       	add    eax,0x4f2d
    270a:	00 06                	add    BYTE PTR [esi],al
    270c:	09 40 09             	or     DWORD PTR [eax+0x9],eax
    270f:	00 00                	add    BYTE PTR [eax],al
    2711:	05 2e 61 00 00       	add    eax,0x612e
    2716:	00 08                	add    BYTE PTR [eax],cl
    2718:	09 c2                	or     edx,eax
    271a:	08 00                	or     BYTE PTR [eax],al
    271c:	00 05 2f 61 00 00    	add    BYTE PTR ds:0x612f,al
    2722:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2725:	38 09                	cmp    BYTE PTR [ecx],cl
    2727:	00 00                	add    BYTE PTR [eax],al
    2729:	05 30 61 00 00       	add    eax,0x6130
    272e:	00 10                	add    BYTE PTR [eax],dl
    2730:	09 1e                	or     DWORD PTR [esi],ebx
    2732:	09 00                	or     DWORD PTR [eax],eax
    2734:	00 05 31 52 02 00    	add    BYTE PTR ds:0x25231,al
    273a:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    273d:	80 08 00             	or     BYTE PTR [eax],0x0
    2740:	00 05 32 65 01 00    	add    BYTE PTR ds:0x16532,al
    2746:	00 18                	add    BYTE PTR [eax],bl
    2748:	00 08                	add    BYTE PTR [eax],cl
    274a:	d1 08                	ror    DWORD PTR [eax],1
    274c:	00 00                	add    BYTE PTR [eax],al
    274e:	14 05                	adc    al,0x5
    2750:	3e                   	ds
    2751:	52                   	push   edx
    2752:	02 00                	add    al,BYTE PTR [eax]
    2754:	00 09                	add    BYTE PTR [ecx],cl
    2756:	9f                   	lahf   
    2757:	09 00                	or     DWORD PTR [eax],eax
    2759:	00 05 40 82 02 00    	add    BYTE PTR ds:0x28240,al
    275f:	00 00                	add    BYTE PTR [eax],al
    2761:	09 5b 08             	or     DWORD PTR [ebx+0x8],ebx
    2764:	00 00                	add    BYTE PTR [eax],al
    2766:	05 41 82 02 00       	add    eax,0x28241
    276b:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    276e:	bc 08 00 00 05       	mov    esp,0x5000008
    2773:	42                   	inc    edx
    2774:	82                   	(bad)  
    2775:	02 00                	add    al,BYTE PTR [eax]
    2777:	00 08                	add    BYTE PTR [eax],cl
    2779:	09 50 08             	or     DWORD PTR [eax+0x8],edx
    277c:	00 00                	add    BYTE PTR [eax],al
    277e:	05 43 9c 02 00       	add    eax,0x29c43
    2783:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2786:	8b 08                	mov    ecx,DWORD PTR [eax]
    2788:	00 00                	add    BYTE PTR [eax],al
    278a:	05 44 c5 02 00       	add    eax,0x2c544
    278f:	00 10                	add    BYTE PTR [eax],dl
    2791:	00 05 04 58 02 00    	add    BYTE PTR ds:0x25804,al
    2797:	00 06                	add    BYTE PTR [esi],al
    2799:	09 02                	or     DWORD PTR [edx],eax
    279b:	00 00                	add    BYTE PTR [eax],al
    279d:	04 5a                	add    al,0x5a
    279f:	09 00                	or     DWORD PTR [eax],eax
    27a1:	00 05 35 9c 01 00    	add    BYTE PTR ds:0x19c35,al
    27a7:	00 05 04 9c 01 00    	add    BYTE PTR ds:0x19c04,al
    27ad:	00 0a                	add    BYTE PTR [edx],cl
    27af:	3a 00                	cmp    al,BYTE PTR [eax]
    27b1:	00 00                	add    BYTE PTR [eax],al
    27b3:	82                   	(bad)  
    27b4:	02 00                	add    al,BYTE PTR [eax]
    27b6:	00 0b                	add    BYTE PTR [ebx],cl
    27b8:	68 02 00 00 0b       	push   0xb000002
    27bd:	5f                   	pop    edi
    27be:	01 00                	add    DWORD PTR [eax],eax
    27c0:	00 00                	add    BYTE PTR [eax],al
    27c2:	05 04 6e 02 00       	add    eax,0x26e04
    27c7:	00 0a                	add    BYTE PTR [edx],cl
    27c9:	3a 00                	cmp    al,BYTE PTR [eax]
    27cb:	00 00                	add    BYTE PTR [eax],al
    27cd:	9c                   	pushf  
    27ce:	02 00                	add    al,BYTE PTR [eax]
    27d0:	00 0b                	add    BYTE PTR [ebx],cl
    27d2:	68 02 00 00 0b       	push   0xb000002
    27d7:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    27da:	00 00                	add    BYTE PTR [eax],al
    27dc:	05 04 88 02 00       	add    eax,0x28804
    27e1:	00 0a                	add    BYTE PTR [edx],cl
    27e3:	3a 00                	cmp    al,BYTE PTR [eax]
    27e5:	00 00                	add    BYTE PTR [eax],al
    27e7:	c5 02                	lds    eax,FWORD PTR [edx]
    27e9:	00 00                	add    BYTE PTR [eax],al
    27eb:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    27ee:	00 00                	add    BYTE PTR [eax],al
    27f0:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    27f3:	00 00                	add    BYTE PTR [eax],al
    27f5:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    27f8:	00 00                	add    BYTE PTR [eax],al
    27fa:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    27fd:	00 00                	add    BYTE PTR [eax],al
    27ff:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    2802:	00 00                	add    BYTE PTR [eax],al
    2804:	00 05 04 a2 02 00    	add    BYTE PTR ds:0x2a204,al
    280a:	00 04 31             	add    BYTE PTR [ecx+esi*1],al
    280d:	09 00                	or     DWORD PTR [eax],eax
    280f:	00 05 47 d6 02 00    	add    BYTE PTR ds:0x2d647,al
    2815:	00 08                	add    BYTE PTR [eax],cl
    2817:	6a 09                	push   0x9
    2819:	00 00                	add    BYTE PTR [eax],al
    281b:	10 05 4f 07 03 00    	adc    BYTE PTR ds:0x3074f,al
    2821:	00 09                	add    BYTE PTR [ecx],cl
    2823:	98                   	cwde   
    2824:	09 00                	or     DWORD PTR [eax],eax
    2826:	00 05 51 b5 00 00    	add    BYTE PTR ds:0xb551,al
    282c:	00 00                	add    BYTE PTR [eax],al
    282e:	09 90 09 00 00 05    	or     DWORD PTR [eax+0x5000009],edx
    2834:	52                   	push   edx
    2835:	68 02 00 00 04       	push   0x4000002
    283a:	09 2c 09             	or     DWORD PTR [ecx+ecx*1],ebp
    283d:	00 00                	add    BYTE PTR [eax],al
    283f:	05 53 07 03 00       	add    eax,0x30753
    2844:	00 08                	add    BYTE PTR [eax],cl
    2846:	00 08                	add    BYTE PTR [eax],cl
    2848:	ac                   	lods   al,BYTE PTR ds:[esi]
    2849:	08 00                	or     BYTE PTR [eax],al
    284b:	00 08                	add    BYTE PTR [eax],cl
    284d:	05 49 2c 03 00       	add    eax,0x32c49
    2852:	00 09                	add    BYTE PTR [ecx],cl
    2854:	23 03                	and    eax,DWORD PTR [ebx]
    2856:	00 00                	add    BYTE PTR [eax],al
    2858:	05 4b 56 03 00       	add    eax,0x3564b
    285d:	00 00                	add    BYTE PTR [eax],al
    285f:	09 5b 02             	or     DWORD PTR [ebx+0x2],ebx
    2862:	00 00                	add    BYTE PTR [eax],al
    2864:	05 4c 7a 03 00       	add    eax,0x37a4c
    2869:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    286c:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    286f:	00 00                	add    BYTE PTR [eax],al
    2871:	4a                   	dec    edx
    2872:	03 00                	add    eax,DWORD PTR [eax]
    2874:	00 0b                	add    BYTE PTR [ebx],cl
    2876:	4a                   	dec    edx
    2877:	03 00                	add    eax,DWORD PTR [eax]
    2879:	00 0b                	add    BYTE PTR [ebx],cl
    287b:	b5 00                	mov    ch,0x0
    287d:	00 00                	add    BYTE PTR [eax],al
    287f:	0b 7a 00             	or     edi,DWORD PTR [edx+0x0]
    2882:	00 00                	add    BYTE PTR [eax],al
    2884:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2887:	00 00                	add    BYTE PTR [eax],al
    2889:	00 05 04 d6 02 00    	add    BYTE PTR ds:0x2d604,al
    288f:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    2895:	00 05 04 2c 03 00    	add    BYTE PTR ds:0x32c04,al
    289b:	00 0a                	add    BYTE PTR [edx],cl
    289d:	7a 00                	jp     289f <sysEnter_Vector-0x12d761>
    289f:	00 00                	add    BYTE PTR [eax],al
    28a1:	7a 03                	jp     28a6 <sysEnter_Vector-0x12d75a>
    28a3:	00 00                	add    BYTE PTR [eax],al
    28a5:	0b 4a 03             	or     ecx,DWORD PTR [edx+0x3]
    28a8:	00 00                	add    BYTE PTR [eax],al
    28aa:	0b 93 00 00 00 0b    	or     edx,DWORD PTR [ebx+0xb000000]
    28b0:	7a 00                	jp     28b2 <sysEnter_Vector-0x12d74e>
    28b2:	00 00                	add    BYTE PTR [eax],al
    28b4:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    28b7:	00 00                	add    BYTE PTR [eax],al
    28b9:	00 05 04 5c 03 00    	add    BYTE PTR ds:0x35c04,al
    28bf:	00 04 ec             	add    BYTE PTR [esp+ebp*8],al
    28c2:	08 00                	or     BYTE PTR [eax],al
    28c4:	00 05 4d 07 03 00    	add    BYTE PTR ds:0x3074d,al
    28ca:	00 0c 7e             	add    BYTE PTR [esi+edi*2],cl
    28cd:	09 00                	or     DWORD PTR [eax],eax
    28cf:	00 01                	add    BYTE PTR [ecx],al
    28d1:	43                   	inc    ebx
    28d2:	3c 20                	cmp    al,0x20
    28d4:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    28da:	01 9c bd 03 00 00 0d 	add    DWORD PTR [ebp+edi*4+0xd000003],ebx
    28e1:	61                   	popa   
    28e2:	08 00                	or     BYTE PTR [eax],al
    28e4:	00 01                	add    BYTE PTR [ecx],al
    28e6:	45                   	inc    ebp
    28e7:	bd 03 00 00 02       	mov    ebp,0x2000003
    28ec:	91                   	xchg   ecx,eax
    28ed:	67 0d fe 08 00 00    	addr16 or eax,0x8fe
    28f3:	01 46 3a             	add    DWORD PTR [esi+0x3a],eax
    28f6:	00 00                	add    BYTE PTR [eax],al
    28f8:	00 02                	add    BYTE PTR [edx],al
    28fa:	91                   	xchg   ecx,eax
    28fb:	6c                   	ins    BYTE PTR es:[edi],dx
    28fc:	00 0e                	add    BYTE PTR [esi],cl
    28fe:	25 00 00 00 cd       	and    eax,0xcd000000
    2903:	03 00                	add    eax,DWORD PTR [eax]
    2905:	00 0f                	add    BYTE PTR [edi],cl
    2907:	ac                   	lods   al,BYTE PTR ds:[esi]
    2908:	00 00                	add    BYTE PTR [eax],al
    290a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    290d:	10 4b 00             	adc    BYTE PTR [ebx+0x0],cl
    2910:	00 00                	add    BYTE PTR [eax],al
    2912:	06                   	push   es
    2913:	34 56                	xor    al,0x56
    2915:	00 00                	add    BYTE PTR [eax],al
    2917:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    291d:	9f                   	lahf   
    291e:	10 af 00 00 00 06    	adc    BYTE PTR [edi+0x6000000],ch
    2924:	35 56 00 00 00       	xor    eax,0x56
    2929:	05 03 44 54 00       	add    eax,0x544403
    292e:	9f                   	lahf   
    292f:	10 5b 01             	adc    BYTE PTR [ebx+0x1],bl
    2932:	00 00                	add    BYTE PTR [eax],al
    2934:	06                   	push   es
    2935:	36                   	ss
    2936:	56                   	push   esi
    2937:	00 00                	add    BYTE PTR [eax],al
    2939:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    293f:	9f                   	lahf   
    2940:	10 54 00 00          	adc    BYTE PTR [eax+eax*1+0x0],dl
    2944:	00 06                	add    BYTE PTR [esi],al
    2946:	37                   	aaa    
    2947:	85 00                	test   DWORD PTR [eax],eax
    2949:	00 00                	add    BYTE PTR [eax],al
    294b:	05 03 4c 54 00       	add    eax,0x544c03
    2950:	9f                   	lahf   
    2951:	10 28                	adc    BYTE PTR [eax],ch
    2953:	00 00                	add    BYTE PTR [eax],al
    2955:	00 07                	add    BYTE PTR [edi],al
    2957:	4f                   	dec    edi
    2958:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    295b:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    2961:	9f                   	lahf   
    2962:	05 04 b5 00 00       	add    eax,0xb504
    2967:	00 10                	add    BYTE PTR [eax],dl
    2969:	2c 09                	sub    al,0x9
    296b:	00 00                	add    BYTE PTR [eax],al
    296d:	01 0e                	add    DWORD PTR [esi],ecx
    296f:	80 03 00             	add    BYTE PTR [ebx],0x0
    2972:	00 05 03 5c 54 00    	add    BYTE PTR ds:0x545c03,al
    2978:	9f                   	lahf   
    2979:	10 4d 09             	adc    BYTE PTR [ebp+0x9],cl
    297c:	00 00                	add    BYTE PTR [eax],al
    297e:	01 0f                	add    DWORD PTR [edi],ecx
    2980:	5d                   	pop    ebp
    2981:	02 00                	add    al,BYTE PTR [eax]
    2983:	00 05 03 a0 52 00    	add    BYTE PTR ds:0x52a003,al
    2989:	9f                   	lahf   
    298a:	10 62 09             	adc    BYTE PTR [edx+0x9],ah
    298d:	00 00                	add    BYTE PTR [eax],al
    298f:	01 10                	add    DWORD PTR [eax],edx
    2991:	cb                   	retf   
    2992:	02 00                	add    al,BYTE PTR [eax]
    2994:	00 05 03 64 54 00    	add    BYTE PTR ds:0x546403,al
    299a:	9f                   	lahf   
    299b:	00 ad 01 00 00 04    	add    BYTE PTR [ebp+0x4000001],ch
    29a1:	00 e5                	add    ch,ah
    29a3:	0c 00                	or     al,0x0
    29a5:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    29a8:	f4                   	hlt    
    29a9:	00 00                	add    BYTE PTR [eax],al
    29ab:	00 0c c1             	add    BYTE PTR [ecx+eax*8],cl
    29ae:	09 00                	or     DWORD PTR [eax],eax
    29b0:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    29b3:	00 00                	add    BYTE PTR [eax],al
    29b5:	c0 20 00             	shl    BYTE PTR [eax],0x0
    29b8:	9f                   	lahf   
    29b9:	eb 00                	jmp    29bb <sysEnter_Vector-0x12d645>
    29bb:	00 00                	add    BYTE PTR [eax],al
    29bd:	c3                   	ret    
    29be:	10 00                	adc    BYTE PTR [eax],al
    29c0:	00 02                	add    BYTE PTR [edx],al
    29c2:	01 06                	add    DWORD PTR [esi],eax
    29c4:	64 00 00             	add    BYTE PTR fs:[eax],al
    29c7:	00 02                	add    BYTE PTR [edx],al
    29c9:	01 06                	add    DWORD PTR [esi],eax
    29cb:	5d                   	pop    ebp
    29cc:	00 00                	add    BYTE PTR [eax],al
    29ce:	00 02                	add    BYTE PTR [edx],al
    29d0:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    29d6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    29dd:	02 08                	add    cl,BYTE PTR [eax]
    29df:	05 00 00 00 00       	add    eax,0x0
    29e4:	02 01                	add    al,BYTE PTR [ecx]
    29e6:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    29e9:	00 00                	add    BYTE PTR [eax],al
    29eb:	02 02                	add    al,BYTE PTR [edx]
    29ed:	07                   	pop    es
    29ee:	0e                   	push   cs
    29ef:	00 00                	add    BYTE PTR [eax],al
    29f1:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    29f4:	00 00                	add    BYTE PTR [eax],al
    29f6:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    29f9:	61                   	popa   
    29fa:	00 00                	add    BYTE PTR [eax],al
    29fc:	00 02                	add    BYTE PTR [edx],al
    29fe:	04 07                	add    al,0x7
    2a00:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2a03:	00 02                	add    BYTE PTR [edx],al
    2a05:	08 07                	or     BYTE PTR [edi],al
    2a07:	34 00                	xor    al,0x0
    2a09:	00 00                	add    BYTE PTR [eax],al
    2a0b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2a12:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2a15:	9b                   	fwait
    2a16:	00 00                	add    BYTE PTR [eax],al
    2a18:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2a1e:	00 06                	add    BYTE PTR [esi],al
    2a20:	25 00 00 00 02       	and    eax,0x2000000
    2a25:	01 02                	add    DWORD PTR [edx],eax
    2a27:	95                   	xchg   ebp,eax
    2a28:	00 00                	add    BYTE PTR [eax],al
    2a2a:	00 02                	add    BYTE PTR [edx],al
    2a2c:	04 07                	add    al,0x7
    2a2e:	39 00                	cmp    DWORD PTR [eax],eax
    2a30:	00 00                	add    BYTE PTR [eax],al
    2a32:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2a35:	e1 00                	loope  2a37 <sysEnter_Vector-0x12d5c9>
    2a37:	00 00                	add    BYTE PTR [eax],al
    2a39:	05 04 25 00 00       	add    eax,0x2504
    2a3e:	00 07                	add    BYTE PTR [edi],al
    2a40:	ba 09 00 00 01       	mov    edx,0x1000009
    2a45:	1d 9d 00 00 00       	sbb    eax,0x9d
    2a4a:	c0 20 00             	shl    BYTE PTR [eax],0x0
    2a4d:	9f                   	lahf   
    2a4e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2a51:	00 01                	add    BYTE PTR [ecx],al
    2a53:	9c                   	pushf  
    2a54:	d9 00                	fld    DWORD PTR [eax]
    2a56:	00 00                	add    BYTE PTR [eax],al
    2a58:	08 72 07             	or     BYTE PTR [edx+0x7],dh
    2a5b:	00 00                	add    BYTE PTR [eax],al
    2a5d:	01 1d 9d 00 00 00    	add    DWORD PTR ds:0x9d,ebx
    2a63:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    2a69:	63 00                	arpl   WORD PTR [eax],ax
    2a6b:	01 1d 7d 00 00 00    	add    DWORD PTR ds:0x7d,ebx
    2a71:	02 91 04 00 07 b2    	add    dl,BYTE PTR [ecx-0x4df8fffc]
    2a77:	09 00                	or     DWORD PTR [eax],eax
    2a79:	00 01                	add    BYTE PTR [ecx],al
    2a7b:	23 9d 00 00 00 fe    	and    ebx,DWORD PTR [ebp-0x2000000]
    2a81:	20 00                	and    BYTE PTR [eax],al
    2a83:	9f                   	lahf   
    2a84:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2a87:	00 01                	add    BYTE PTR [ecx],al
    2a89:	9c                   	pushf  
    2a8a:	0f 01 00             	sgdtd  [eax]
    2a8d:	00 08                	add    BYTE PTR [eax],cl
    2a8f:	72 07                	jb     2a98 <sysEnter_Vector-0x12d568>
    2a91:	00 00                	add    BYTE PTR [eax],al
    2a93:	01 23                	add    DWORD PTR [ebx],esp
    2a95:	9d                   	popf   
    2a96:	00 00                	add    BYTE PTR [eax],al
    2a98:	00 02                	add    BYTE PTR [edx],al
    2a9a:	91                   	xchg   ecx,eax
    2a9b:	00 09                	add    BYTE PTR [ecx],cl
    2a9d:	73 72                	jae    2b11 <sysEnter_Vector-0x12d4ef>
    2a9f:	63 00                	arpl   WORD PTR [eax],ax
    2aa1:	01 23                	add    DWORD PTR [ebx],esp
    2aa3:	7d 00                	jge    2aa5 <sysEnter_Vector-0x12d55b>
    2aa5:	00 00                	add    BYTE PTR [eax],al
    2aa7:	02 91 04 00 0a a6    	add    dl,BYTE PTR [ecx-0x59f5fffc]
    2aad:	09 00                	or     DWORD PTR [eax],eax
    2aaf:	00 01                	add    BYTE PTR [ecx],al
    2ab1:	29 3c 21             	sub    DWORD PTR [ecx+eiz*1],edi
    2ab4:	00 9f 6f 00 00 00    	add    BYTE PTR [edi+0x6f],bl
    2aba:	01 9c 55 01 00 00 09 	add    DWORD PTR [ebp+edx*2+0x9000001],ebx
    2ac1:	70 00                	jo     2ac3 <sysEnter_Vector-0x12d53d>
    2ac3:	01 29                	add    DWORD PTR [ecx],ebp
    2ac5:	9d                   	popf   
    2ac6:	00 00                	add    BYTE PTR [eax],al
    2ac8:	00 02                	add    BYTE PTR [edx],al
    2aca:	91                   	xchg   ecx,eax
    2acb:	00 09                	add    BYTE PTR [ecx],cl
    2acd:	71 00                	jno    2acf <sysEnter_Vector-0x12d531>
    2acf:	01 29                	add    DWORD PTR [ecx],ebp
    2ad1:	9d                   	popf   
    2ad2:	00 00                	add    BYTE PTR [eax],al
    2ad4:	00 02                	add    BYTE PTR [edx],al
    2ad6:	91                   	xchg   ecx,eax
    2ad7:	04 0b                	add    al,0xb
    2ad9:	63 00                	arpl   WORD PTR [eax],ax
    2adb:	01 2a                	add    DWORD PTR [edx],ebp
    2add:	3a 00                	cmp    al,BYTE PTR [eax]
    2adf:	00 00                	add    BYTE PTR [eax],al
    2ae1:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    2ae7:	01 2a                	add    DWORD PTR [edx],ebp
    2ae9:	3a 00                	cmp    al,BYTE PTR [eax]
    2aeb:	00 00                	add    BYTE PTR [eax],al
    2aed:	02 91 70 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0070]
    2af3:	00 00                	add    BYTE PTR [eax],al
    2af5:	00 02                	add    BYTE PTR [edx],al
    2af7:	34 56                	xor    al,0x56
    2af9:	00 00                	add    BYTE PTR [eax],al
    2afb:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    2b01:	9f                   	lahf   
    2b02:	0c af                	or     al,0xaf
    2b04:	00 00                	add    BYTE PTR [eax],al
    2b06:	00 02                	add    BYTE PTR [edx],al
    2b08:	35 56 00 00 00       	xor    eax,0x56
    2b0d:	05 03 44 54 00       	add    eax,0x544403
    2b12:	9f                   	lahf   
    2b13:	0c 5b                	or     al,0x5b
    2b15:	01 00                	add    DWORD PTR [eax],eax
    2b17:	00 02                	add    BYTE PTR [edx],al
    2b19:	36                   	ss
    2b1a:	56                   	push   esi
    2b1b:	00 00                	add    BYTE PTR [eax],al
    2b1d:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    2b23:	9f                   	lahf   
    2b24:	0c 54                	or     al,0x54
    2b26:	00 00                	add    BYTE PTR [eax],al
    2b28:	00 02                	add    BYTE PTR [edx],al
    2b2a:	37                   	aaa    
    2b2b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2b2c:	00 00                	add    BYTE PTR [eax],al
    2b2e:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    2b34:	9f                   	lahf   
    2b35:	0c 28                	or     al,0x28
    2b37:	00 00                	add    BYTE PTR [eax],al
    2b39:	00 03                	add    BYTE PTR [ebx],al
    2b3b:	4f                   	dec    edi
    2b3c:	aa                   	stos   BYTE PTR es:[edi],al
    2b3d:	01 00                	add    DWORD PTR [eax],eax
    2b3f:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    2b45:	9f                   	lahf   
    2b46:	05 04 9d 00 00       	add    eax,0x9d04
    2b4b:	00 00                	add    BYTE PTR [eax],al
    2b4d:	6c                   	ins    BYTE PTR es:[edi],dx
    2b4e:	01 00                	add    DWORD PTR [eax],eax
    2b50:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b53:	a0 0d 00 00 04       	mov    al,ds:0x400000d
    2b58:	01 f4                	add    esp,esi
    2b5a:	00 00                	add    BYTE PTR [eax],al
    2b5c:	00 0c dd 09 00 00 72 	add    BYTE PTR [ebx*8+0x72000009],cl
    2b63:	00 00                	add    BYTE PTR [eax],al
    2b65:	00 ac 21 00 9f 5e 00 	add    BYTE PTR [ecx+eiz*1+0x5e9f00],ch
    2b6c:	00 00                	add    BYTE PTR [eax],al
    2b6e:	93                   	xchg   ebx,eax
    2b6f:	11 00                	adc    DWORD PTR [eax],eax
    2b71:	00 02                	add    BYTE PTR [edx],al
    2b73:	01 06                	add    DWORD PTR [esi],eax
    2b75:	64 00 00             	add    BYTE PTR fs:[eax],al
    2b78:	00 02                	add    BYTE PTR [edx],al
    2b7a:	01 06                	add    DWORD PTR [esi],eax
    2b7c:	5d                   	pop    ebp
    2b7d:	00 00                	add    BYTE PTR [eax],al
    2b7f:	00 02                	add    BYTE PTR [edx],al
    2b81:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2b87:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2b8e:	02 08                	add    cl,BYTE PTR [eax]
    2b90:	05 00 00 00 00       	add    eax,0x0
    2b95:	02 01                	add    al,BYTE PTR [ecx]
    2b97:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2b9a:	00 00                	add    BYTE PTR [eax],al
    2b9c:	02 02                	add    al,BYTE PTR [edx]
    2b9e:	07                   	pop    es
    2b9f:	0e                   	push   cs
    2ba0:	00 00                	add    BYTE PTR [eax],al
    2ba2:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2ba5:	00 00                	add    BYTE PTR [eax],al
    2ba7:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2baa:	61                   	popa   
    2bab:	00 00                	add    BYTE PTR [eax],al
    2bad:	00 02                	add    BYTE PTR [edx],al
    2baf:	04 07                	add    al,0x7
    2bb1:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2bb4:	00 02                	add    BYTE PTR [edx],al
    2bb6:	08 07                	or     BYTE PTR [edi],al
    2bb8:	34 00                	xor    al,0x0
    2bba:	00 00                	add    BYTE PTR [eax],al
    2bbc:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2bc3:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2bc6:	9b                   	fwait
    2bc7:	00 00                	add    BYTE PTR [eax],al
    2bc9:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2bcf:	00 06                	add    BYTE PTR [esi],al
    2bd1:	25 00 00 00 02       	and    eax,0x2000000
    2bd6:	01 02                	add    DWORD PTR [edx],eax
    2bd8:	95                   	xchg   ebp,eax
    2bd9:	00 00                	add    BYTE PTR [eax],al
    2bdb:	00 02                	add    BYTE PTR [edx],al
    2bdd:	04 07                	add    al,0x7
    2bdf:	39 00                	cmp    DWORD PTR [eax],eax
    2be1:	00 00                	add    BYTE PTR [eax],al
    2be3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2be6:	e1 00                	loope  2be8 <sysEnter_Vector-0x12d418>
    2be8:	00 00                	add    BYTE PTR [eax],al
    2bea:	05 04 25 00 00       	add    eax,0x2504
    2bef:	00 07                	add    BYTE PTR [edi],al
    2bf1:	d6                   	(bad)  
    2bf2:	09 00                	or     DWORD PTR [eax],eax
    2bf4:	00 01                	add    BYTE PTR [ecx],al
    2bf6:	18 3a                	sbb    BYTE PTR [edx],bh
    2bf8:	00 00                	add    BYTE PTR [eax],al
    2bfa:	00 ac 21 00 9f 5e 00 	add    BYTE PTR [ecx+eiz*1+0x5e9f00],ch
    2c01:	00 00                	add    BYTE PTR [eax],al
    2c03:	01 9c 09 01 00 00 08 	add    DWORD PTR [ecx+ecx*1+0x8000001],ebx
    2c0a:	70 31                	jo     2c3d <sysEnter_Vector-0x12d3c3>
    2c0c:	00 01                	add    BYTE PTR [ecx],al
    2c0e:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2c11:	00 00                	add    BYTE PTR [eax],al
    2c13:	02 91 00 08 70 32    	add    dl,BYTE PTR [ecx+0x32700800]
    2c19:	00 01                	add    BYTE PTR [ecx],al
    2c1b:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2c1e:	00 00                	add    BYTE PTR [eax],al
    2c20:	02 91 04 09 73 31    	add    dl,BYTE PTR [ecx+0x31730904]
    2c26:	00 01                	add    BYTE PTR [ecx],al
    2c28:	1a 09                	sbb    cl,BYTE PTR [ecx]
    2c2a:	01 00                	add    DWORD PTR [eax],eax
    2c2c:	00 01                	add    BYTE PTR [ecx],al
    2c2e:	53                   	push   ebx
    2c2f:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    2c32:	00 01                	add    BYTE PTR [ecx],al
    2c34:	1b 09                	sbb    ecx,DWORD PTR [ecx]
    2c36:	01 00                	add    DWORD PTR [eax],eax
    2c38:	00 01                	add    BYTE PTR [ecx],al
    2c3a:	56                   	push   esi
    2c3b:	09 63 31             	or     DWORD PTR [ebx+0x31],esp
    2c3e:	00 01                	add    BYTE PTR [ecx],al
    2c40:	1c 48                	sbb    al,0x48
    2c42:	00 00                	add    BYTE PTR [eax],al
    2c44:	00 02                	add    BYTE PTR [edx],al
    2c46:	91                   	xchg   ecx,eax
    2c47:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2c48:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    2c4b:	00 01                	add    BYTE PTR [ecx],al
    2c4d:	1c 48                	sbb    al,0x48
    2c4f:	00 00                	add    BYTE PTR [eax],al
    2c51:	00 02                	add    BYTE PTR [edx],al
    2c53:	91                   	xchg   ecx,eax
    2c54:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c55:	00 05 04 0f 01 00    	add    BYTE PTR ds:0x10f04,al
    2c5b:	00 06                	add    BYTE PTR [esi],al
    2c5d:	48                   	dec    eax
    2c5e:	00 00                	add    BYTE PTR [eax],al
    2c60:	00 0a                	add    BYTE PTR [edx],cl
    2c62:	4b                   	dec    ebx
    2c63:	00 00                	add    BYTE PTR [eax],al
    2c65:	00 02                	add    BYTE PTR [edx],al
    2c67:	34 56                	xor    al,0x56
    2c69:	00 00                	add    BYTE PTR [eax],al
    2c6b:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    2c71:	9f                   	lahf   
    2c72:	0a af 00 00 00 02    	or     ch,BYTE PTR [edi+0x2000000]
    2c78:	35 56 00 00 00       	xor    eax,0x56
    2c7d:	05 03 44 54 00       	add    eax,0x544403
    2c82:	9f                   	lahf   
    2c83:	0a 5b 01             	or     bl,BYTE PTR [ebx+0x1]
    2c86:	00 00                	add    BYTE PTR [eax],al
    2c88:	02 36                	add    dh,BYTE PTR [esi]
    2c8a:	56                   	push   esi
    2c8b:	00 00                	add    BYTE PTR [eax],al
    2c8d:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    2c93:	9f                   	lahf   
    2c94:	0a 54 00 00          	or     dl,BYTE PTR [eax+eax*1+0x0]
    2c98:	00 02                	add    BYTE PTR [edx],al
    2c9a:	37                   	aaa    
    2c9b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2c9c:	00 00                	add    BYTE PTR [eax],al
    2c9e:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    2ca4:	9f                   	lahf   
    2ca5:	0a 28                	or     ch,BYTE PTR [eax]
    2ca7:	00 00                	add    BYTE PTR [eax],al
    2ca9:	00 03                	add    BYTE PTR [ebx],al
    2cab:	4f                   	dec    edi
    2cac:	69 01 00 00 05 03    	imul   eax,DWORD PTR [ecx],0x3050000
    2cb2:	48                   	dec    eax
    2cb3:	54                   	push   esp
    2cb4:	00 9f 05 04 9d 00    	add    BYTE PTR [edi+0x9d0405],bl
    2cba:	00 00                	add    BYTE PTR [eax],al
    2cbc:	00 c9                	add    cl,cl
    2cbe:	01 00                	add    DWORD PTR [eax],eax
    2cc0:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2cc3:	32 0e                	xor    cl,BYTE PTR [esi]
    2cc5:	00 00                	add    BYTE PTR [eax],al
    2cc7:	04 01                	add    al,0x1
    2cc9:	f4                   	hlt    
    2cca:	00 00                	add    BYTE PTR [eax],al
    2ccc:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
    2ccf:	0a 00                	or     al,BYTE PTR [eax]
    2cd1:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2cd4:	00 00                	add    BYTE PTR [eax],al
    2cd6:	0c 22                	or     al,0x22
    2cd8:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    2cde:	52                   	push   edx
    2cdf:	12 00                	adc    al,BYTE PTR [eax]
    2ce1:	00 02                	add    BYTE PTR [edx],al
    2ce3:	01 06                	add    DWORD PTR [esi],eax
    2ce5:	64 00 00             	add    BYTE PTR fs:[eax],al
    2ce8:	00 02                	add    BYTE PTR [edx],al
    2cea:	01 06                	add    DWORD PTR [esi],eax
    2cec:	5d                   	pop    ebp
    2ced:	00 00                	add    BYTE PTR [eax],al
    2cef:	00 02                	add    BYTE PTR [edx],al
    2cf1:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2cf7:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2cfe:	02 08                	add    cl,BYTE PTR [eax]
    2d00:	05 00 00 00 00       	add    eax,0x0
    2d05:	02 01                	add    al,BYTE PTR [ecx]
    2d07:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2d0a:	00 00                	add    BYTE PTR [eax],al
    2d0c:	02 02                	add    al,BYTE PTR [edx]
    2d0e:	07                   	pop    es
    2d0f:	0e                   	push   cs
    2d10:	00 00                	add    BYTE PTR [eax],al
    2d12:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2d15:	00 00                	add    BYTE PTR [eax],al
    2d17:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2d1a:	61                   	popa   
    2d1b:	00 00                	add    BYTE PTR [eax],al
    2d1d:	00 02                	add    BYTE PTR [edx],al
    2d1f:	04 07                	add    al,0x7
    2d21:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2d24:	00 02                	add    BYTE PTR [edx],al
    2d26:	08 07                	or     BYTE PTR [edi],al
    2d28:	34 00                	xor    al,0x0
    2d2a:	00 00                	add    BYTE PTR [eax],al
    2d2c:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2d33:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2d36:	9b                   	fwait
    2d37:	00 00                	add    BYTE PTR [eax],al
    2d39:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2d3f:	00 06                	add    BYTE PTR [esi],al
    2d41:	25 00 00 00 02       	and    eax,0x2000000
    2d46:	01 02                	add    DWORD PTR [edx],eax
    2d48:	95                   	xchg   ebp,eax
    2d49:	00 00                	add    BYTE PTR [eax],al
    2d4b:	00 02                	add    BYTE PTR [edx],al
    2d4d:	04 07                	add    al,0x7
    2d4f:	39 00                	cmp    DWORD PTR [eax],eax
    2d51:	00 00                	add    BYTE PTR [eax],al
    2d53:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2d56:	e1 00                	loope  2d58 <sysEnter_Vector-0x12d2a8>
    2d58:	00 00                	add    BYTE PTR [eax],al
    2d5a:	05 04 25 00 00       	add    eax,0x2504
    2d5f:	00 07                	add    BYTE PTR [edi],al
    2d61:	f2 09 00             	repnz or DWORD PTR [eax],eax
    2d64:	00 01                	add    BYTE PTR [ecx],al
    2d66:	04 9d                	add    al,0x9d
    2d68:	00 00                	add    BYTE PTR [eax],al
    2d6a:	00 0c 22             	add    BYTE PTR [edx+eiz*1],cl
    2d6d:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    2d73:	01 9c e3 00 00 00 08 	add    DWORD PTR [ebx+eiz*8+0x8000000],ebx
    2d7a:	73 31                	jae    2dad <sysEnter_Vector-0x12d253>
    2d7c:	00 01                	add    BYTE PTR [ecx],al
    2d7e:	04 9d                	add    al,0x9d
    2d80:	00 00                	add    BYTE PTR [eax],al
    2d82:	00 02                	add    BYTE PTR [edx],al
    2d84:	91                   	xchg   ecx,eax
    2d85:	00 08                	add    BYTE PTR [eax],cl
    2d87:	73 32                	jae    2dbb <sysEnter_Vector-0x12d245>
    2d89:	00 01                	add    BYTE PTR [ecx],al
    2d8b:	04 7d                	add    al,0x7d
    2d8d:	00 00                	add    BYTE PTR [eax],al
    2d8f:	00 02                	add    BYTE PTR [edx],al
    2d91:	91                   	xchg   ecx,eax
    2d92:	04 09                	add    al,0x9
    2d94:	73 00                	jae    2d96 <sysEnter_Vector-0x12d26a>
    2d96:	01 06                	add    DWORD PTR [esi],eax
    2d98:	9d                   	popf   
    2d99:	00 00                	add    BYTE PTR [eax],al
    2d9b:	00 02                	add    BYTE PTR [edx],al
    2d9d:	91                   	xchg   ecx,eax
    2d9e:	74 00                	je     2da0 <sysEnter_Vector-0x12d260>
    2da0:	07                   	pop    es
    2da1:	07                   	pop    es
    2da2:	0a 00                	or     al,BYTE PTR [eax]
    2da4:	00 01                	add    BYTE PTR [ecx],al
    2da6:	0e                   	push   cs
    2da7:	9d                   	popf   
    2da8:	00 00                	add    BYTE PTR [eax],al
    2daa:	00 4c 22 00          	add    BYTE PTR [edx+eiz*1+0x0],cl
    2dae:	9f                   	lahf   
    2daf:	40                   	inc    eax
    2db0:	00 00                	add    BYTE PTR [eax],al
    2db2:	00 01                	add    BYTE PTR [ecx],al
    2db4:	9c                   	pushf  
    2db5:	23 01                	and    eax,DWORD PTR [ecx]
    2db7:	00 00                	add    BYTE PTR [eax],al
    2db9:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2dbc:	00 01                	add    BYTE PTR [ecx],al
    2dbe:	0e                   	push   cs
    2dbf:	9d                   	popf   
    2dc0:	00 00                	add    BYTE PTR [eax],al
    2dc2:	00 02                	add    BYTE PTR [edx],al
    2dc4:	91                   	xchg   ecx,eax
    2dc5:	00 08                	add    BYTE PTR [eax],cl
    2dc7:	73 32                	jae    2dfb <sysEnter_Vector-0x12d205>
    2dc9:	00 01                	add    BYTE PTR [ecx],al
    2dcb:	0e                   	push   cs
    2dcc:	7d 00                	jge    2dce <sysEnter_Vector-0x12d232>
    2dce:	00 00                	add    BYTE PTR [eax],al
    2dd0:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    2dd6:	01 10                	add    DWORD PTR [eax],edx
    2dd8:	9d                   	popf   
    2dd9:	00 00                	add    BYTE PTR [eax],al
    2ddb:	00 02                	add    BYTE PTR [edx],al
    2ddd:	91                   	xchg   ecx,eax
    2dde:	74 00                	je     2de0 <sysEnter_Vector-0x12d220>
    2de0:	07                   	pop    es
    2de1:	ff 09                	dec    DWORD PTR [ecx]
    2de3:	00 00                	add    BYTE PTR [eax],al
    2de5:	01 18                	add    DWORD PTR [eax],ebx
    2de7:	9d                   	popf   
    2de8:	00 00                	add    BYTE PTR [eax],al
    2dea:	00 8c 22 00 9f 47 00 	add    BYTE PTR [edx+eiz*1+0x479f00],cl
    2df1:	00 00                	add    BYTE PTR [eax],al
    2df3:	01 9c 71 01 00 00 08 	add    DWORD PTR [ecx+esi*2+0x8000001],ebx
    2dfa:	73 31                	jae    2e2d <sysEnter_Vector-0x12d1d3>
    2dfc:	00 01                	add    BYTE PTR [ecx],al
    2dfe:	18 9d 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],bl
    2e04:	91                   	xchg   ecx,eax
    2e05:	00 08                	add    BYTE PTR [eax],cl
    2e07:	73 32                	jae    2e3b <sysEnter_Vector-0x12d1c5>
    2e09:	00 01                	add    BYTE PTR [ecx],al
    2e0b:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2e0e:	00 00                	add    BYTE PTR [eax],al
    2e10:	02 91 04 0a f9 09    	add    dl,BYTE PTR [ecx+0x9f90a04]
    2e16:	00 00                	add    BYTE PTR [eax],al
    2e18:	01 18                	add    DWORD PTR [eax],ebx
    2e1a:	61                   	popa   
    2e1b:	00 00                	add    BYTE PTR [eax],al
    2e1d:	00 02                	add    BYTE PTR [edx],al
    2e1f:	91                   	xchg   ecx,eax
    2e20:	08 09                	or     BYTE PTR [ecx],cl
    2e22:	73 00                	jae    2e24 <sysEnter_Vector-0x12d1dc>
    2e24:	01 1a                	add    DWORD PTR [edx],ebx
    2e26:	9d                   	popf   
    2e27:	00 00                	add    BYTE PTR [eax],al
    2e29:	00 02                	add    BYTE PTR [edx],al
    2e2b:	91                   	xchg   ecx,eax
    2e2c:	74 00                	je     2e2e <sysEnter_Vector-0x12d1d2>
    2e2e:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    2e31:	00 00                	add    BYTE PTR [eax],al
    2e33:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2e36:	00 00                	add    BYTE PTR [eax],al
    2e38:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    2e3e:	9f                   	lahf   
    2e3f:	0b af 00 00 00 02    	or     ebp,DWORD PTR [edi+0x2000000]
    2e45:	35 56 00 00 00       	xor    eax,0x56
    2e4a:	05 03 44 54 00       	add    eax,0x544403
    2e4f:	9f                   	lahf   
    2e50:	0b 5b 01             	or     ebx,DWORD PTR [ebx+0x1]
    2e53:	00 00                	add    BYTE PTR [eax],al
    2e55:	02 36                	add    dh,BYTE PTR [esi]
    2e57:	56                   	push   esi
    2e58:	00 00                	add    BYTE PTR [eax],al
    2e5a:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    2e60:	9f                   	lahf   
    2e61:	0b 54 00 00          	or     edx,DWORD PTR [eax+eax*1+0x0]
    2e65:	00 02                	add    BYTE PTR [edx],al
    2e67:	37                   	aaa    
    2e68:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2e69:	00 00                	add    BYTE PTR [eax],al
    2e6b:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    2e71:	9f                   	lahf   
    2e72:	0b 28                	or     ebp,DWORD PTR [eax]
    2e74:	00 00                	add    BYTE PTR [eax],al
    2e76:	00 03                	add    BYTE PTR [ebx],al
    2e78:	4f                   	dec    edi
    2e79:	c6 01 00             	mov    BYTE PTR [ecx],0x0
    2e7c:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    2e82:	9f                   	lahf   
    2e83:	05 04 9d 00 00       	add    eax,0x9d04
    2e88:	00 00                	add    BYTE PTR [eax],al
    2e8a:	4c                   	dec    esp
    2e8b:	01 00                	add    DWORD PTR [eax],eax
    2e8d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2e90:	d3 0e                	ror    DWORD PTR [esi],cl
    2e92:	00 00                	add    BYTE PTR [eax],al
    2e94:	04 01                	add    al,0x1
    2e96:	f4                   	hlt    
    2e97:	00 00                	add    BYTE PTR [eax],al
    2e99:	00 0c 39             	add    BYTE PTR [ecx+edi*1],cl
    2e9c:	0a 00                	or     al,BYTE PTR [eax]
    2e9e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2ea1:	00 00                	add    BYTE PTR [eax],al
    2ea3:	d4 22                	aam    0x22
    2ea5:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
    2eab:	32 13                	xor    dl,BYTE PTR [ebx]
    2ead:	00 00                	add    BYTE PTR [eax],al
    2eaf:	02 01                	add    al,BYTE PTR [ecx]
    2eb1:	06                   	push   es
    2eb2:	64 00 00             	add    BYTE PTR fs:[eax],al
    2eb5:	00 02                	add    BYTE PTR [edx],al
    2eb7:	01 06                	add    DWORD PTR [esi],eax
    2eb9:	5d                   	pop    ebp
    2eba:	00 00                	add    BYTE PTR [eax],al
    2ebc:	00 02                	add    BYTE PTR [edx],al
    2ebe:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2ec4:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2ecb:	02 08                	add    cl,BYTE PTR [eax]
    2ecd:	05 00 00 00 00       	add    eax,0x0
    2ed2:	02 01                	add    al,BYTE PTR [ecx]
    2ed4:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2ed7:	00 00                	add    BYTE PTR [eax],al
    2ed9:	02 02                	add    al,BYTE PTR [edx]
    2edb:	07                   	pop    es
    2edc:	0e                   	push   cs
    2edd:	00 00                	add    BYTE PTR [eax],al
    2edf:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2ee2:	00 00                	add    BYTE PTR [eax],al
    2ee4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2ee7:	61                   	popa   
    2ee8:	00 00                	add    BYTE PTR [eax],al
    2eea:	00 02                	add    BYTE PTR [edx],al
    2eec:	04 07                	add    al,0x7
    2eee:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2ef1:	00 02                	add    BYTE PTR [edx],al
    2ef3:	08 07                	or     BYTE PTR [edi],al
    2ef5:	34 00                	xor    al,0x0
    2ef7:	00 00                	add    BYTE PTR [eax],al
    2ef9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f00:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2f03:	9b                   	fwait
    2f04:	00 00                	add    BYTE PTR [eax],al
    2f06:	00 02                	add    BYTE PTR [edx],al
    2f08:	01 02                	add    DWORD PTR [edx],eax
    2f0a:	95                   	xchg   ebp,eax
    2f0b:	00 00                	add    BYTE PTR [eax],al
    2f0d:	00 02                	add    BYTE PTR [edx],al
    2f0f:	04 07                	add    al,0x7
    2f11:	39 00                	cmp    DWORD PTR [eax],eax
    2f13:	00 00                	add    BYTE PTR [eax],al
    2f15:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2f18:	e1 00                	loope  2f1a <sysEnter_Vector-0x12d0e6>
    2f1a:	00 00                	add    BYTE PTR [eax],al
    2f1c:	05 04 25 00 00       	add    eax,0x2504
    2f21:	00 06                	add    BYTE PTR [esi],al
    2f23:	24 0a                	and    al,0xa
    2f25:	00 00                	add    BYTE PTR [eax],al
    2f27:	01 09                	add    DWORD PTR [ecx],ecx
    2f29:	7d 00                	jge    2f2b <sysEnter_Vector-0x12d0d5>
    2f2b:	00 00                	add    BYTE PTR [eax],al
    2f2d:	d4 22                	aam    0x22
    2f2f:	00 9f 30 00 00 00    	add    BYTE PTR [edi+0x30],bl
    2f35:	01 9c be 00 00 00 07 	add    DWORD PTR [esi+edi*4+0x7000000],ebx
    2f3c:	63 00                	arpl   WORD PTR [eax],ax
    2f3e:	01 09                	add    DWORD PTR [ecx],ecx
    2f40:	25 00 00 00 02       	and    eax,0x2000000
    2f45:	91                   	xchg   ecx,eax
    2f46:	74 00                	je     2f48 <sysEnter_Vector-0x12d0b8>
    2f48:	08 30                	or     BYTE PTR [eax],dh
    2f4a:	0a 00                	or     al,BYTE PTR [eax]
    2f4c:	00 01                	add    BYTE PTR [ecx],al
    2f4e:	0e                   	push   cs
    2f4f:	7d 00                	jge    2f51 <sysEnter_Vector-0x12d0af>
    2f51:	00 00                	add    BYTE PTR [eax],al
    2f53:	04 23                	add    al,0x23
    2f55:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
    2f5b:	01 9c f4 00 00 00 07 	add    DWORD PTR [esp+esi*8+0x7000000],ebx
    2f62:	73 74                	jae    2fd8 <sysEnter_Vector-0x12d028>
    2f64:	72 00                	jb     2f66 <sysEnter_Vector-0x12d09a>
    2f66:	01 0e                	add    DWORD PTR [esi],ecx
    2f68:	92                   	xchg   edx,eax
    2f69:	00 00                	add    BYTE PTR [eax],al
    2f6b:	00 02                	add    BYTE PTR [edx],al
    2f6d:	91                   	xchg   ecx,eax
    2f6e:	00 09                	add    BYTE PTR [ecx],cl
    2f70:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    2f73:	00 01                	add    BYTE PTR [ecx],al
    2f75:	10 3a                	adc    BYTE PTR [edx],bh
    2f77:	00 00                	add    BYTE PTR [eax],al
    2f79:	00 02                	add    BYTE PTR [edx],al
    2f7b:	91                   	xchg   ecx,eax
    2f7c:	74 00                	je     2f7e <sysEnter_Vector-0x12d082>
    2f7e:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    2f81:	00 00                	add    BYTE PTR [eax],al
    2f83:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2f86:	00 00                	add    BYTE PTR [eax],al
    2f88:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    2f8e:	9f                   	lahf   
    2f8f:	0a af 00 00 00 02    	or     ch,BYTE PTR [edi+0x2000000]
    2f95:	35 56 00 00 00       	xor    eax,0x56
    2f9a:	05 03 44 54 00       	add    eax,0x544403
    2f9f:	9f                   	lahf   
    2fa0:	0a 5b 01             	or     bl,BYTE PTR [ebx+0x1]
    2fa3:	00 00                	add    BYTE PTR [eax],al
    2fa5:	02 36                	add    dh,BYTE PTR [esi]
    2fa7:	56                   	push   esi
    2fa8:	00 00                	add    BYTE PTR [eax],al
    2faa:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    2fb0:	9f                   	lahf   
    2fb1:	0a 54 00 00          	or     dl,BYTE PTR [eax+eax*1+0x0]
    2fb5:	00 02                	add    BYTE PTR [edx],al
    2fb7:	37                   	aaa    
    2fb8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2fb9:	00 00                	add    BYTE PTR [eax],al
    2fbb:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    2fc1:	9f                   	lahf   
    2fc2:	0a 28                	or     ch,BYTE PTR [eax]
    2fc4:	00 00                	add    BYTE PTR [eax],al
    2fc6:	00 03                	add    BYTE PTR [ebx],al
    2fc8:	4f                   	dec    edi
    2fc9:	49                   	dec    ecx
    2fca:	01 00                	add    DWORD PTR [eax],eax
    2fcc:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    2fd2:	9f                   	lahf   
    2fd3:	05 04 92 00 00       	add    eax,0x9204
    2fd8:	00 00                	add    BYTE PTR [eax],al
    2fda:	ca 00 00             	retf   0x0
    2fdd:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2fe0:	7a 0f                	jp     2ff1 <sysEnter_Vector-0x12d00f>
    2fe2:	00 00                	add    BYTE PTR [eax],al
    2fe4:	04 01                	add    al,0x1
    2fe6:	f4                   	hlt    
    2fe7:	00 00                	add    BYTE PTR [eax],al
    2fe9:	00 0c 57             	add    BYTE PTR [edi+edx*2],cl
    2fec:	0a 00                	or     al,BYTE PTR [eax]
    2fee:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2ff1:	00 00                	add    BYTE PTR [eax],al
    2ff3:	60                   	pusha  
    2ff4:	23 00                	and    eax,DWORD PTR [eax]
    2ff6:	9f                   	lahf   
    2ff7:	62 00                	bound  eax,QWORD PTR [eax]
    2ff9:	00 00                	add    BYTE PTR [eax],al
    2ffb:	01 14 00             	add    DWORD PTR [eax+eax*1],edx
    2ffe:	00 02                	add    BYTE PTR [edx],al
    3000:	04 05                	add    al,0x5
    3002:	69 6e 74 00 03 9d 04 	imul   ebp,DWORD PTR [esi+0x74],0x49d0300
    3009:	00 00                	add    BYTE PTR [eax],al
    300b:	02 d8                	add    bl,al
    300d:	37                   	aaa    
    300e:	00 00                	add    BYTE PTR [eax],al
    3010:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3013:	07                   	pop    es
    3014:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3017:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    301a:	05 05 00 00 00       	add    eax,0x5
    301f:	04 08                	add    al,0x8
    3021:	05 00 00 00 00       	add    eax,0x0
    3026:	04 0c                	add    al,0xc
    3028:	04 9b                	add    al,0x9b
    302a:	00 00                	add    BYTE PTR [eax],al
    302c:	00 05 50 0a 00 00    	add    BYTE PTR ds:0xa50,al
    3032:	01 03                	add    DWORD PTR [ebx],eax
    3034:	2c 00                	sub    al,0x0
    3036:	00 00                	add    BYTE PTR [eax],al
    3038:	60                   	pusha  
    3039:	23 00                	and    eax,DWORD PTR [eax]
    303b:	9f                   	lahf   
    303c:	31 00                	xor    DWORD PTR [eax],eax
    303e:	00 00                	add    BYTE PTR [eax],al
    3040:	01 9c 89 00 00 00 06 	add    DWORD PTR [ecx+ecx*4+0x6000000],ebx
    3047:	73 74                	jae    30bd <sysEnter_Vector-0x12cf43>
    3049:	72 00                	jb     304b <sysEnter_Vector-0x12cfb5>
    304b:	01 03                	add    DWORD PTR [ebx],eax
    304d:	89 00                	mov    DWORD PTR [eax],eax
    304f:	00 00                	add    BYTE PTR [eax],al
    3051:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    3057:	74 00                	je     3059 <sysEnter_Vector-0x12cfa7>
    3059:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    305c:	00 00                	add    BYTE PTR [eax],al
    305e:	00 02                	add    BYTE PTR [edx],al
    3060:	91                   	xchg   ecx,eax
    3061:	74 00                	je     3063 <sysEnter_Vector-0x12cf9d>
    3063:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    3066:	00 00                	add    BYTE PTR [eax],al
    3068:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    306b:	06                   	push   es
    306c:	64 00 00             	add    BYTE PTR fs:[eax],al
    306f:	00 09                	add    BYTE PTR [ecx],cl
    3071:	8f 00                	pop    DWORD PTR [eax]
    3073:	00 00                	add    BYTE PTR [eax],al
    3075:	0a 6c 0a 00          	or     ch,BYTE PTR [edx+ecx*1+0x0]
    3079:	00 01                	add    BYTE PTR [ecx],al
    307b:	0a 2c 00             	or     ch,BYTE PTR [eax+eax*1]
    307e:	00 00                	add    BYTE PTR [eax],al
    3080:	91                   	xchg   ecx,eax
    3081:	23 00                	and    eax,DWORD PTR [eax]
    3083:	9f                   	lahf   
    3084:	31 00                	xor    DWORD PTR [eax],eax
    3086:	00 00                	add    BYTE PTR [eax],al
    3088:	01 9c 06 73 74 72 00 	add    DWORD PTR [esi+eax*1+0x727473],ebx
    308f:	01 0a                	add    DWORD PTR [edx],ecx
    3091:	89 00                	mov    DWORD PTR [eax],eax
    3093:	00 00                	add    BYTE PTR [eax],al
    3095:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    309b:	74 00                	je     309d <sysEnter_Vector-0x12cf63>
    309d:	01 0b                	add    DWORD PTR [ebx],ecx
    309f:	2c 00                	sub    al,0x0
    30a1:	00 00                	add    BYTE PTR [eax],al
    30a3:	02 91 74 00 00 de    	add    dl,BYTE PTR [ecx-0x21ffff8c]
    30a9:	00 00                	add    BYTE PTR [eax],al
    30ab:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    30ae:	15 10 00 00 04       	adc    eax,0x4000010
    30b3:	01 f4                	add    esp,esi
    30b5:	00 00                	add    BYTE PTR [eax],al
    30b7:	00 0c 85 0a 00 00 72 	add    BYTE PTR [eax*4+0x7200000a],cl
    30be:	00 00                	add    BYTE PTR [eax],al
    30c0:	00 c4                	add    ah,al
    30c2:	23 00                	and    eax,DWORD PTR [eax]
    30c4:	9f                   	lahf   
    30c5:	ce                   	into   
    30c6:	00 00                	add    BYTE PTR [eax],al
    30c8:	00 99 14 00 00 02    	add    BYTE PTR [ecx+0x2000014],bl
    30ce:	04 05                	add    al,0x5
    30d0:	69 6e 74 00 03 9d 04 	imul   ebp,DWORD PTR [esi+0x74],0x49d0300
    30d7:	00 00                	add    BYTE PTR [eax],al
    30d9:	02 d8                	add    bl,al
    30db:	37                   	aaa    
    30dc:	00 00                	add    BYTE PTR [eax],al
    30de:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    30e1:	07                   	pop    es
    30e2:	3e 00 00             	add    BYTE PTR ds:[eax],al
    30e5:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    30e8:	05 05 00 00 00       	add    eax,0x5
    30ed:	04 08                	add    al,0x8
    30ef:	05 00 00 00 00       	add    eax,0x0
    30f4:	04 0c                	add    al,0xc
    30f6:	04 9b                	add    al,0x9b
    30f8:	00 00                	add    BYTE PTR [eax],al
    30fa:	00 05 7d 0a 00 00    	add    BYTE PTR ds:0xa7d,al
    3100:	01 0c 25 00 00 00 c4 	add    DWORD PTR [eiz*1-0x3c000000],ecx
    3107:	23 00                	and    eax,DWORD PTR [eax]
    3109:	9f                   	lahf   
    310a:	67 00 00             	add    BYTE PTR [bx+si],al
    310d:	00 01                	add    BYTE PTR [ecx],al
    310f:	9c                   	pushf  
    3110:	93                   	xchg   ebx,eax
    3111:	00 00                	add    BYTE PTR [eax],al
    3113:	00 06                	add    BYTE PTR [esi],al
    3115:	73 31                	jae    3148 <sysEnter_Vector-0x12ceb8>
    3117:	00 01                	add    BYTE PTR [ecx],al
    3119:	0c 93                	or     al,0x93
    311b:	00 00                	add    BYTE PTR [eax],al
    311d:	00 02                	add    BYTE PTR [edx],al
    311f:	91                   	xchg   ecx,eax
    3120:	00 06                	add    BYTE PTR [esi],al
    3122:	73 32                	jae    3156 <sysEnter_Vector-0x12ceaa>
    3124:	00 01                	add    BYTE PTR [ecx],al
    3126:	0c 93                	or     al,0x93
    3128:	00 00                	add    BYTE PTR [eax],al
    312a:	00 02                	add    BYTE PTR [edx],al
    312c:	91                   	xchg   ecx,eax
    312d:	04 06                	add    al,0x6
    312f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3130:	00 01                	add    BYTE PTR [ecx],al
    3132:	0c 2c                	or     al,0x2c
    3134:	00 00                	add    BYTE PTR [eax],al
    3136:	00 02                	add    BYTE PTR [edx],al
    3138:	91                   	xchg   ecx,eax
    3139:	08 00                	or     BYTE PTR [eax],al
    313b:	07                   	pop    es
    313c:	04 a0                	add    al,0xa0
    313e:	00 00                	add    BYTE PTR [eax],al
    3140:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3143:	06                   	push   es
    3144:	64 00 00             	add    BYTE PTR fs:[eax],al
    3147:	00 08                	add    BYTE PTR [eax],cl
    3149:	99                   	cdq    
    314a:	00 00                	add    BYTE PTR [eax],al
    314c:	00 09                	add    BYTE PTR [ecx],cl
    314e:	74 0a                	je     315a <sysEnter_Vector-0x12cea6>
    3150:	00 00                	add    BYTE PTR [eax],al
    3152:	01 16                	add    DWORD PTR [esi],edx
    3154:	25 00 00 00 2b       	and    eax,0x2b000000
    3159:	24 00                	and    al,0x0
    315b:	9f                   	lahf   
    315c:	67 00 00             	add    BYTE PTR [bx+si],al
    315f:	00 01                	add    BYTE PTR [ecx],al
    3161:	9c                   	pushf  
    3162:	06                   	push   es
    3163:	73 31                	jae    3196 <sysEnter_Vector-0x12ce6a>
    3165:	00 01                	add    BYTE PTR [ecx],al
    3167:	16                   	push   ss
    3168:	93                   	xchg   ebx,eax
    3169:	00 00                	add    BYTE PTR [eax],al
    316b:	00 02                	add    BYTE PTR [edx],al
    316d:	91                   	xchg   ecx,eax
    316e:	00 06                	add    BYTE PTR [esi],al
    3170:	73 32                	jae    31a4 <sysEnter_Vector-0x12ce5c>
    3172:	00 01                	add    BYTE PTR [ecx],al
    3174:	16                   	push   ss
    3175:	93                   	xchg   ebx,eax
    3176:	00 00                	add    BYTE PTR [eax],al
    3178:	00 02                	add    BYTE PTR [edx],al
    317a:	91                   	xchg   ecx,eax
    317b:	04 06                	add    al,0x6
    317d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    317e:	00 01                	add    BYTE PTR [ecx],al
    3180:	16                   	push   ss
    3181:	2c 00                	sub    al,0x0
    3183:	00 00                	add    BYTE PTR [eax],al
    3185:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    318b:	00 00                	add    BYTE PTR [eax],al
    318d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3190:	a1 10 00 00 04       	mov    eax,ds:0x4000010
    3195:	01 f4                	add    esp,esi
    3197:	00 00                	add    BYTE PTR [eax],al
    3199:	00 0c 9b             	add    BYTE PTR [ebx+ebx*4],cl
    319c:	0a 00                	or     al,BYTE PTR [eax]
    319e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    31a1:	00 00                	add    BYTE PTR [eax],al
    31a3:	94                   	xchg   esp,eax
    31a4:	24 00                	and    al,0x0
    31a6:	9f                   	lahf   
    31a7:	80 00 00             	add    BYTE PTR [eax],0x0
    31aa:	00 5e 15             	add    BYTE PTR [esi+0x15],bl
    31ad:	00 00                	add    BYTE PTR [eax],al
    31af:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    31b6:	03 9d 04 00 00 02    	add    ebx,DWORD PTR [ebp+0x2000004]
    31bc:	d8 37                	fdiv   DWORD PTR [edi]
    31be:	00 00                	add    BYTE PTR [eax],al
    31c0:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    31c3:	07                   	pop    es
    31c4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    31c7:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    31ca:	05 05 00 00 00       	add    eax,0x5
    31cf:	04 08                	add    al,0x8
    31d1:	05 00 00 00 00       	add    eax,0x0
    31d6:	04 0c                	add    al,0xc
    31d8:	04 9b                	add    al,0x9b
    31da:	00 00                	add    BYTE PTR [eax],al
    31dc:	00 05 b1 0a 00 00    	add    BYTE PTR ds:0xab1,al
    31e2:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    31e8:	94                   	xchg   esp,eax
    31e9:	24 00                	and    al,0x0
    31eb:	9f                   	lahf   
    31ec:	60                   	pusha  
    31ed:	00 00                	add    BYTE PTR [eax],al
    31ef:	00 01                	add    BYTE PTR [ecx],al
    31f1:	9c                   	pushf  
    31f2:	9f                   	lahf   
    31f3:	00 00                	add    BYTE PTR [eax],al
    31f5:	00 06                	add    BYTE PTR [esi],al
    31f7:	73 31                	jae    322a <sysEnter_Vector-0x12cdd6>
    31f9:	00 01                	add    BYTE PTR [ecx],al
    31fb:	0d 9f 00 00 00       	or     eax,0x9f
    3200:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    3206:	00 01                	add    BYTE PTR [ecx],al
    3208:	0d ac 00 00 00       	or     eax,0xac
    320d:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    3213:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    3219:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    321f:	01 0f                	add    DWORD PTR [edi],ecx
    3221:	9f                   	lahf   
    3222:	00 00                	add    BYTE PTR [eax],al
    3224:	00 02                	add    BYTE PTR [edx],al
    3226:	91                   	xchg   ecx,eax
    3227:	74 00                	je     3229 <sysEnter_Vector-0x12cdd7>
    3229:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    3230:	01 06                	add    DWORD PTR [esi],eax
    3232:	64 00 00             	add    BYTE PTR fs:[eax],al
    3235:	00 08                	add    BYTE PTR [eax],cl
    3237:	04 b2                	add    al,0xb2
    3239:	00 00                	add    BYTE PTR [eax],al
    323b:	00 09                	add    BYTE PTR [ecx],cl
    323d:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    323e:	00 00                	add    BYTE PTR [eax],al
    3240:	00 0a                	add    BYTE PTR [edx],cl
    3242:	ba 0a 00 00 01       	mov    edx,0x100000a
    3247:	1b 9f 00 00 00 f4    	sbb    ebx,DWORD PTR [edi-0xc000000]
    324d:	24 00                	and    al,0x0
    324f:	9f                   	lahf   
    3250:	20 00                	and    BYTE PTR [eax],al
    3252:	00 00                	add    BYTE PTR [eax],al
    3254:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    325b:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    3261:	91                   	xchg   ecx,eax
    3262:	00 06                	add    BYTE PTR [esi],al
    3264:	73 32                	jae    3298 <sysEnter_Vector-0x12cd68>
    3266:	00 01                	add    BYTE PTR [ecx],al
    3268:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    326f:	04 06                	add    al,0x6
    3271:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3272:	00 01                	add    BYTE PTR [ecx],al
    3274:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    3277:	00 00                	add    BYTE PTR [eax],al
    3279:	02 91 08 00 00 92    	add    dl,BYTE PTR [ecx-0x6dfffff8]
    327f:	01 00                	add    DWORD PTR [eax],eax
    3281:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3284:	3c 11                	cmp    al,0x11
    3286:	00 00                	add    BYTE PTR [eax],al
    3288:	04 01                	add    al,0x1
    328a:	f4                   	hlt    
    328b:	00 00                	add    BYTE PTR [eax],al
    328d:	00 0c c2             	add    BYTE PTR [edx+eax*8],cl
    3290:	0a 00                	or     al,BYTE PTR [eax]
    3292:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    3295:	00 00                	add    BYTE PTR [eax],al
    3297:	14 25                	adc    al,0x25
    3299:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
    329f:	03 16                	add    edx,DWORD PTR [esi]
    32a1:	00 00                	add    BYTE PTR [eax],al
    32a3:	02 01                	add    al,BYTE PTR [ecx]
    32a5:	06                   	push   es
    32a6:	64 00 00             	add    BYTE PTR fs:[eax],al
    32a9:	00 02                	add    BYTE PTR [edx],al
    32ab:	01 06                	add    DWORD PTR [esi],eax
    32ad:	5d                   	pop    ebp
    32ae:	00 00                	add    BYTE PTR [eax],al
    32b0:	00 02                	add    BYTE PTR [edx],al
    32b2:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    32b8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    32bf:	02 08                	add    cl,BYTE PTR [eax]
    32c1:	05 00 00 00 00       	add    eax,0x0
    32c6:	02 01                	add    al,BYTE PTR [ecx]
    32c8:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    32cb:	00 00                	add    BYTE PTR [eax],al
    32cd:	02 02                	add    al,BYTE PTR [edx]
    32cf:	07                   	pop    es
    32d0:	0e                   	push   cs
    32d1:	00 00                	add    BYTE PTR [eax],al
    32d3:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    32d6:	00 00                	add    BYTE PTR [eax],al
    32d8:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    32db:	61                   	popa   
    32dc:	00 00                	add    BYTE PTR [eax],al
    32de:	00 02                	add    BYTE PTR [edx],al
    32e0:	04 07                	add    al,0x7
    32e2:	3e 00 00             	add    BYTE PTR ds:[eax],al
    32e5:	00 02                	add    BYTE PTR [edx],al
    32e7:	08 07                	or     BYTE PTR [edi],al
    32e9:	34 00                	xor    al,0x0
    32eb:	00 00                	add    BYTE PTR [eax],al
    32ed:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    32f4:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    32f7:	9b                   	fwait
    32f8:	00 00                	add    BYTE PTR [eax],al
    32fa:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    3300:	00 06                	add    BYTE PTR [esi],al
    3302:	25 00 00 00 02       	and    eax,0x2000000
    3307:	01 02                	add    DWORD PTR [edx],eax
    3309:	95                   	xchg   ebp,eax
    330a:	00 00                	add    BYTE PTR [eax],al
    330c:	00 02                	add    BYTE PTR [edx],al
    330e:	04 07                	add    al,0x7
    3310:	39 00                	cmp    DWORD PTR [eax],eax
    3312:	00 00                	add    BYTE PTR [eax],al
    3314:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3317:	e1 00                	loope  3319 <sysEnter_Vector-0x12cce7>
    3319:	00 00                	add    BYTE PTR [eax],al
    331b:	05 04 25 00 00       	add    eax,0x2504
    3320:	00 07                	add    BYTE PTR [edi],al
    3322:	e5 0a                	in     eax,0xa
    3324:	00 00                	add    BYTE PTR [eax],al
    3326:	01 3b                	add    DWORD PTR [ebx],edi
    3328:	8f 00                	pop    DWORD PTR [eax]
    332a:	00 00                	add    BYTE PTR [eax],al
    332c:	14 25                	adc    al,0x25
    332e:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
    3334:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    333b:	f4                   	hlt    
    333c:	0a 00                	or     al,BYTE PTR [eax]
    333e:	00 01                	add    BYTE PTR [ecx],al
    3340:	3b 7d 00             	cmp    edi,DWORD PTR [ebp+0x0]
    3343:	00 00                	add    BYTE PTR [eax],al
    3345:	02 91 00 08 ed 0a    	add    dl,BYTE PTR [ecx+0xaed0800]
    334b:	00 00                	add    BYTE PTR [eax],al
    334d:	01 3b                	add    DWORD PTR [ebx],edi
    334f:	3a 01                	cmp    al,BYTE PTR [ecx]
    3351:	00 00                	add    BYTE PTR [eax],al
    3353:	02 91 04 08 28 08    	add    dl,BYTE PTR [ecx+0x8280804]
    3359:	00 00                	add    BYTE PTR [eax],al
    335b:	01 3b                	add    DWORD PTR [ebx],edi
    335d:	3a 00                	cmp    al,BYTE PTR [eax]
    335f:	00 00                	add    BYTE PTR [eax],al
    3361:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    3367:	01 3d 7d 00 00 00    	add    DWORD PTR ds:0x7d,edi
    336d:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3370:	61                   	popa   
    3371:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    3374:	01 3e                	add    DWORD PTR [esi],edi
    3376:	8f 00                	pop    DWORD PTR [eax]
    3378:	00 00                	add    BYTE PTR [eax],al
    337a:	01 57 09             	add    DWORD PTR [edi+0x9],edx
    337d:	63 00                	arpl   WORD PTR [eax],ax
    337f:	01 3f                	add    DWORD PTR [edi],edi
    3381:	3a 00                	cmp    al,BYTE PTR [eax]
    3383:	00 00                	add    BYTE PTR [eax],al
    3385:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    3388:	d7                   	xlat   BYTE PTR ds:[ebx]
    3389:	0a 00                	or     al,BYTE PTR [eax]
    338b:	00 01                	add    BYTE PTR [ecx],al
    338d:	40                   	inc    eax
    338e:	8f 00                	pop    DWORD PTR [eax]
    3390:	00 00                	add    BYTE PTR [eax],al
    3392:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    3395:	67 00 01             	add    BYTE PTR [bx+di],al
    3398:	41                   	inc    ecx
    3399:	3a 00                	cmp    al,BYTE PTR [eax]
    339b:	00 00                	add    BYTE PTR [eax],al
    339d:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    33a0:	79 00                	jns    33a2 <sysEnter_Vector-0x12cc5e>
    33a2:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    33a5:	00 00                	add    BYTE PTR [eax],al
    33a7:	00 01                	add    BYTE PTR [ecx],al
    33a9:	51                   	push   ecx
    33aa:	0c de                	or     al,0xde
    33ac:	0a 00                	or     al,BYTE PTR [eax]
    33ae:	00 01                	add    BYTE PTR [ecx],al
    33b0:	41                   	inc    ecx
    33b1:	3a 00                	cmp    al,BYTE PTR [eax]
    33b3:	00 00                	add    BYTE PTR [eax],al
    33b5:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    33b8:	05 04 9d 00 00       	add    eax,0x9d04
    33bd:	00 0d 4b 00 00 00    	add    BYTE PTR ds:0x4b,cl
    33c3:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    33c6:	00 00                	add    BYTE PTR [eax],al
    33c8:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    33ce:	9f                   	lahf   
    33cf:	0d af 00 00 00       	or     eax,0xaf
    33d4:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    33da:	05 03 44 54 00       	add    eax,0x544403
    33df:	9f                   	lahf   
    33e0:	0d 5b 01 00 00       	or     eax,0x15b
    33e5:	02 36                	add    dh,BYTE PTR [esi]
    33e7:	56                   	push   esi
    33e8:	00 00                	add    BYTE PTR [eax],al
    33ea:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    33f0:	9f                   	lahf   
    33f1:	0d 54 00 00 00       	or     eax,0x54
    33f6:	02 37                	add    dh,BYTE PTR [edi]
    33f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    33f9:	00 00                	add    BYTE PTR [eax],al
    33fb:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    3401:	9f                   	lahf   
    3402:	0d 28 00 00 00       	or     eax,0x28
    3407:	03 4f 3a             	add    ecx,DWORD PTR [edi+0x3a]
    340a:	01 00                	add    DWORD PTR [eax],eax
    340c:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    3412:	9f                   	lahf   
    3413:	00 6c 00 00          	add    BYTE PTR [eax+eax*1+0x0],ch
    3417:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    341a:	f7 11                	not    DWORD PTR [ecx]
    341c:	00 00                	add    BYTE PTR [eax],al
    341e:	04 01                	add    al,0x1
    3420:	f4                   	hlt    
    3421:	00 00                	add    BYTE PTR [eax],al
    3423:	00 0c f9             	add    BYTE PTR [ecx+edi*8],cl
    3426:	0a 00                	or     al,BYTE PTR [eax]
    3428:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    342b:	00 00                	add    BYTE PTR [eax],al
    342d:	94                   	xchg   esp,eax
    342e:	26 00 9f 1d 00 00 00 	add    BYTE PTR es:[edi+0x1d],bl
    3435:	50                   	push   eax
    3436:	17                   	pop    ss
    3437:	00 00                	add    BYTE PTR [eax],al
    3439:	02 10                	add    dl,BYTE PTR [eax]
    343b:	0b 00                	or     eax,DWORD PTR [eax]
    343d:	00 01                	add    BYTE PTR [ecx],al
    343f:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    3442:	00 00                	add    BYTE PTR [eax],al
    3444:	94                   	xchg   esp,eax
    3445:	26 00 9f 1d 00 00 00 	add    BYTE PTR es:[edi+0x1d],bl
    344c:	01 9c 5b 00 00 00 03 	add    DWORD PTR [ebx+ebx*2+0x3000000],ebx
    3453:	76 61                	jbe    34b6 <sysEnter_Vector-0x12cb4a>
    3455:	6c                   	ins    BYTE PTR es:[edi],dx
    3456:	00 01                	add    BYTE PTR [ecx],al
    3458:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    345b:	00 00                	add    BYTE PTR [eax],al
    345d:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    3463:	74 00                	je     3465 <sysEnter_Vector-0x12cb9b>
    3465:	01 01                	add    DWORD PTR [ecx],eax
    3467:	68 00 00 00 02       	push   0x2000000
    346c:	91                   	xchg   ecx,eax
    346d:	04 00                	add    al,0x0
    346f:	04 04                	add    al,0x4
    3471:	61                   	popa   
    3472:	00 00                	add    BYTE PTR [eax],al
    3474:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    347a:	00 00                	add    BYTE PTR [eax],al
    347c:	06                   	push   es
    347d:	04 05                	add    al,0x5
    347f:	69 6e 74 00 00 90 01 	imul   ebp,DWORD PTR [esi+0x74],0x1900000
    3486:	00 00                	add    BYTE PTR [eax],al
    3488:	04 00                	add    al,0x0
    348a:	55                   	push   ebp
    348b:	12 00                	adc    al,BYTE PTR [eax]
    348d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3490:	f4                   	hlt    
    3491:	00 00                	add    BYTE PTR [eax],al
    3493:	00 0c 18             	add    BYTE PTR [eax+ebx*1],cl
    3496:	0b 00                	or     eax,DWORD PTR [eax]
    3498:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    349b:	00 00                	add    BYTE PTR [eax],al
    349d:	b4 26                	mov    ah,0x26
    349f:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
    34a5:	97                   	xchg   edi,eax
    34a6:	17                   	pop    ss
    34a7:	00 00                	add    BYTE PTR [eax],al
    34a9:	02 01                	add    al,BYTE PTR [ecx]
    34ab:	06                   	push   es
    34ac:	64 00 00             	add    BYTE PTR fs:[eax],al
    34af:	00 02                	add    BYTE PTR [edx],al
    34b1:	01 06                	add    DWORD PTR [esi],eax
    34b3:	5d                   	pop    ebp
    34b4:	00 00                	add    BYTE PTR [eax],al
    34b6:	00 02                	add    BYTE PTR [edx],al
    34b8:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    34be:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    34c5:	02 08                	add    cl,BYTE PTR [eax]
    34c7:	05 00 00 00 00       	add    eax,0x0
    34cc:	02 01                	add    al,BYTE PTR [ecx]
    34ce:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    34d1:	00 00                	add    BYTE PTR [eax],al
    34d3:	02 02                	add    al,BYTE PTR [edx]
    34d5:	07                   	pop    es
    34d6:	0e                   	push   cs
    34d7:	00 00                	add    BYTE PTR [eax],al
    34d9:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    34dc:	00 00                	add    BYTE PTR [eax],al
    34de:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    34e1:	61                   	popa   
    34e2:	00 00                	add    BYTE PTR [eax],al
    34e4:	00 02                	add    BYTE PTR [edx],al
    34e6:	04 07                	add    al,0x7
    34e8:	3e 00 00             	add    BYTE PTR ds:[eax],al
    34eb:	00 02                	add    BYTE PTR [edx],al
    34ed:	08 07                	or     BYTE PTR [edi],al
    34ef:	34 00                	xor    al,0x0
    34f1:	00 00                	add    BYTE PTR [eax],al
    34f3:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    34fa:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    34fd:	9b                   	fwait
    34fe:	00 00                	add    BYTE PTR [eax],al
    3500:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    3506:	00 06                	add    BYTE PTR [esi],al
    3508:	25 00 00 00 02       	and    eax,0x2000000
    350d:	01 02                	add    DWORD PTR [edx],eax
    350f:	95                   	xchg   ebp,eax
    3510:	00 00                	add    BYTE PTR [eax],al
    3512:	00 02                	add    BYTE PTR [edx],al
    3514:	04 07                	add    al,0x7
    3516:	39 00                	cmp    DWORD PTR [eax],eax
    3518:	00 00                	add    BYTE PTR [eax],al
    351a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    351d:	e1 00                	loope  351f <sysEnter_Vector-0x12cae1>
    351f:	00 00                	add    BYTE PTR [eax],al
    3521:	05 04 25 00 00       	add    eax,0x2504
    3526:	00 07                	add    BYTE PTR [edi],al
    3528:	2d 0b 00 00 01       	sub    eax,0x100000b
    352d:	57                   	push   edi
    352e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    352f:	00 00                	add    BYTE PTR [eax],al
    3531:	00 b4 26 00 9f 9c 01 	add    BYTE PTR [esi+eiz*1+0x19c9f00],dh
    3538:	00 00                	add    BYTE PTR [eax],al
    353a:	01 9c 38 01 00 00 08 	add    DWORD PTR [eax+edi*1+0x8000001],ebx
    3541:	f4                   	hlt    
    3542:	0a 00                	or     al,BYTE PTR [eax]
    3544:	00 01                	add    BYTE PTR [ecx],al
    3546:	57                   	push   edi
    3547:	7d 00                	jge    3549 <sysEnter_Vector-0x12cab7>
    3549:	00 00                	add    BYTE PTR [eax],al
    354b:	02 91 00 08 ed 0a    	add    dl,BYTE PTR [ecx+0xaed0800]
    3551:	00 00                	add    BYTE PTR [eax],al
    3553:	01 57 38             	add    DWORD PTR [edi+0x38],edx
    3556:	01 00                	add    DWORD PTR [eax],eax
    3558:	00 02                	add    BYTE PTR [edx],al
    355a:	91                   	xchg   ecx,eax
    355b:	04 08                	add    al,0x8
    355d:	28 08                	sub    BYTE PTR [eax],cl
    355f:	00 00                	add    BYTE PTR [eax],al
    3561:	01 57 3a             	add    DWORD PTR [edi+0x3a],edx
    3564:	00 00                	add    BYTE PTR [eax],al
    3566:	00 02                	add    BYTE PTR [edx],al
    3568:	91                   	xchg   ecx,eax
    3569:	08 09                	or     BYTE PTR [ecx],cl
    356b:	73 00                	jae    356d <sysEnter_Vector-0x12ca93>
    356d:	01 59 7d             	add    DWORD PTR [ecx+0x7d],ebx
    3570:	00 00                	add    BYTE PTR [eax],al
    3572:	00 01                	add    BYTE PTR [ecx],al
    3574:	56                   	push   esi
    3575:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    3578:	63 00                	arpl   WORD PTR [eax],ax
    357a:	01 5a 8f             	add    DWORD PTR [edx-0x71],ebx
    357d:	00 00                	add    BYTE PTR [eax],al
    357f:	00 01                	add    BYTE PTR [ecx],al
    3581:	57                   	push   edi
    3582:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    3585:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    3588:	00 00                	add    BYTE PTR [eax],al
    358a:	00 01                	add    BYTE PTR [ecx],al
    358c:	53                   	push   ebx
    358d:	0a d7                	or     dl,bh
    358f:	0a 00                	or     al,BYTE PTR [eax]
    3591:	00 01                	add    BYTE PTR [ecx],al
    3593:	5c                   	pop    esp
    3594:	8f 00                	pop    DWORD PTR [eax]
    3596:	00 00                	add    BYTE PTR [eax],al
    3598:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    359b:	67 00 01             	add    BYTE PTR [bx+di],al
    359e:	5d                   	pop    ebp
    359f:	3a 00                	cmp    al,BYTE PTR [eax]
    35a1:	00 00                	add    BYTE PTR [eax],al
    35a3:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    35a6:	79 00                	jns    35a8 <sysEnter_Vector-0x12ca58>
    35a8:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    35ab:	00 00                	add    BYTE PTR [eax],al
    35ad:	00 01                	add    BYTE PTR [ecx],al
    35af:	51                   	push   ecx
    35b0:	0a de                	or     bl,dh
    35b2:	0a 00                	or     al,BYTE PTR [eax]
    35b4:	00 01                	add    BYTE PTR [ecx],al
    35b6:	5d                   	pop    ebp
    35b7:	3a 00                	cmp    al,BYTE PTR [eax]
    35b9:	00 00                	add    BYTE PTR [eax],al
    35bb:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    35c1:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
    35c4:	00 00                	add    BYTE PTR [eax],al
    35c6:	00 02                	add    BYTE PTR [edx],al
    35c8:	34 56                	xor    al,0x56
    35ca:	00 00                	add    BYTE PTR [eax],al
    35cc:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    35d2:	9f                   	lahf   
    35d3:	0c af                	or     al,0xaf
    35d5:	00 00                	add    BYTE PTR [eax],al
    35d7:	00 02                	add    BYTE PTR [edx],al
    35d9:	35 56 00 00 00       	xor    eax,0x56
    35de:	05 03 44 54 00       	add    eax,0x544403
    35e3:	9f                   	lahf   
    35e4:	0c 5b                	or     al,0x5b
    35e6:	01 00                	add    DWORD PTR [eax],eax
    35e8:	00 02                	add    BYTE PTR [edx],al
    35ea:	36                   	ss
    35eb:	56                   	push   esi
    35ec:	00 00                	add    BYTE PTR [eax],al
    35ee:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    35f4:	9f                   	lahf   
    35f5:	0c 54                	or     al,0x54
    35f7:	00 00                	add    BYTE PTR [eax],al
    35f9:	00 02                	add    BYTE PTR [edx],al
    35fb:	37                   	aaa    
    35fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
    35fd:	00 00                	add    BYTE PTR [eax],al
    35ff:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    3605:	9f                   	lahf   
    3606:	0c 28                	or     al,0x28
    3608:	00 00                	add    BYTE PTR [eax],al
    360a:	00 03                	add    BYTE PTR [ebx],al
    360c:	4f                   	dec    edi
    360d:	38 01                	cmp    BYTE PTR [ecx],al
    360f:	00 00                	add    BYTE PTR [eax],al
    3611:	05 03 48 54 00       	add    eax,0x544803
    3616:	9f                   	lahf   
    3617:	00 62 01             	add    BYTE PTR [edx+0x1],ah
    361a:	00 00                	add    BYTE PTR [eax],al
    361c:	04 00                	add    al,0x0
    361e:	01 13                	add    DWORD PTR [ebx],edx
    3620:	00 00                	add    BYTE PTR [eax],al
    3622:	04 01                	add    al,0x1
    3624:	f4                   	hlt    
    3625:	00 00                	add    BYTE PTR [eax],al
    3627:	00 0c 3a             	add    BYTE PTR [edx+edi*1],cl
    362a:	0b 00                	or     eax,DWORD PTR [eax]
    362c:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    362f:	00 00                	add    BYTE PTR [eax],al
    3631:	50                   	push   eax
    3632:	28 00                	sub    BYTE PTR [eax],al
    3634:	9f                   	lahf   
    3635:	b6 00                	mov    dh,0x0
    3637:	00 00                	add    BYTE PTR [eax],al
    3639:	10 19                	adc    BYTE PTR [ecx],bl
    363b:	00 00                	add    BYTE PTR [eax],al
    363d:	02 01                	add    al,BYTE PTR [ecx]
    363f:	06                   	push   es
    3640:	64 00 00             	add    BYTE PTR fs:[eax],al
    3643:	00 02                	add    BYTE PTR [edx],al
    3645:	01 06                	add    DWORD PTR [esi],eax
    3647:	5d                   	pop    ebp
    3648:	00 00                	add    BYTE PTR [eax],al
    364a:	00 02                	add    BYTE PTR [edx],al
    364c:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    3652:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3659:	02 08                	add    cl,BYTE PTR [eax]
    365b:	05 00 00 00 00       	add    eax,0x0
    3660:	02 01                	add    al,BYTE PTR [ecx]
    3662:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    3665:	00 00                	add    BYTE PTR [eax],al
    3667:	02 02                	add    al,BYTE PTR [edx]
    3669:	07                   	pop    es
    366a:	0e                   	push   cs
    366b:	00 00                	add    BYTE PTR [eax],al
    366d:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    3670:	00 00                	add    BYTE PTR [eax],al
    3672:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3675:	61                   	popa   
    3676:	00 00                	add    BYTE PTR [eax],al
    3678:	00 02                	add    BYTE PTR [edx],al
    367a:	04 07                	add    al,0x7
    367c:	3e 00 00             	add    BYTE PTR ds:[eax],al
    367f:	00 02                	add    BYTE PTR [edx],al
    3681:	08 07                	or     BYTE PTR [edi],al
    3683:	34 00                	xor    al,0x0
    3685:	00 00                	add    BYTE PTR [eax],al
    3687:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    368e:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3691:	9b                   	fwait
    3692:	00 00                	add    BYTE PTR [eax],al
    3694:	00 02                	add    BYTE PTR [edx],al
    3696:	01 02                	add    DWORD PTR [edx],eax
    3698:	95                   	xchg   ebp,eax
    3699:	00 00                	add    BYTE PTR [eax],al
    369b:	00 02                	add    BYTE PTR [edx],al
    369d:	04 07                	add    al,0x7
    369f:	39 00                	cmp    DWORD PTR [eax],eax
    36a1:	00 00                	add    BYTE PTR [eax],al
    36a3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    36a6:	e1 00                	loope  36a8 <sysEnter_Vector-0x12c958>
    36a8:	00 00                	add    BYTE PTR [eax],al
    36aa:	05 04 25 00 00       	add    eax,0x2504
    36af:	00 06                	add    BYTE PTR [esi],al
    36b1:	58                   	pop    eax
    36b2:	0b 00                	or     eax,DWORD PTR [eax]
    36b4:	00 01                	add    BYTE PTR [ecx],al
    36b6:	03 50 28             	add    edx,DWORD PTR [eax+0x28]
    36b9:	00 9f 96 00 00 00    	add    BYTE PTR [edi+0x96],bl
    36bf:	01 9c e6 00 00 00 07 	add    DWORD PTR [esi+eiz*8+0x7000000],ebx
    36c6:	34 0b                	xor    al,0xb
    36c8:	00 00                	add    BYTE PTR [eax],al
    36ca:	01 03                	add    DWORD PTR [ebx],eax
    36cc:	92                   	xchg   edx,eax
    36cd:	00 00                	add    BYTE PTR [eax],al
    36cf:	00 02                	add    BYTE PTR [edx],al
    36d1:	91                   	xchg   ecx,eax
    36d2:	00 08                	add    BYTE PTR [eax],cl
    36d4:	64                   	fs
    36d5:	73 74                	jae    374b <sysEnter_Vector-0x12c8b5>
    36d7:	00 01                	add    BYTE PTR [ecx],al
    36d9:	05 92 00 00 00       	add    eax,0x92
    36de:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    36e4:	63 00                	arpl   WORD PTR [eax],ax
    36e6:	01 05 92 00 00 00    	add    DWORD PTR ds:0x92,eax
    36ec:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    36f2:	64 00 01             	add    BYTE PTR fs:[ecx],al
    36f5:	06                   	push   es
    36f6:	92                   	xchg   edx,eax
    36f7:	00 00                	add    BYTE PTR [eax],al
    36f9:	00 02                	add    BYTE PTR [edx],al
    36fb:	91                   	xchg   ecx,eax
    36fc:	64 00 06             	add    BYTE PTR fs:[esi],al
    36ff:	50                   	push   eax
    3700:	0b 00                	or     eax,DWORD PTR [eax]
    3702:	00 01                	add    BYTE PTR [ecx],al
    3704:	1f                   	pop    ds
    3705:	e6 28                	out    0x28,al
    3707:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    370d:	01 9c 0a 01 00 00 07 	add    DWORD PTR [edx+ecx*1+0x7000001],ebx
    3714:	34 0b                	xor    al,0xb
    3716:	00 00                	add    BYTE PTR [eax],al
    3718:	01 1f                	add    DWORD PTR [edi],ebx
    371a:	92                   	xchg   edx,eax
    371b:	00 00                	add    BYTE PTR [eax],al
    371d:	00 02                	add    BYTE PTR [edx],al
    371f:	91                   	xchg   ecx,eax
    3720:	00 00                	add    BYTE PTR [eax],al
    3722:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
    3725:	00 00                	add    BYTE PTR [eax],al
    3727:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    372a:	00 00                	add    BYTE PTR [eax],al
    372c:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    3732:	9f                   	lahf   
    3733:	09 af 00 00 00 02    	or     DWORD PTR [edi+0x2000000],ebp
    3739:	35 56 00 00 00       	xor    eax,0x56
    373e:	05 03 44 54 00       	add    eax,0x544403
    3743:	9f                   	lahf   
    3744:	09 5b 01             	or     DWORD PTR [ebx+0x1],ebx
    3747:	00 00                	add    BYTE PTR [eax],al
    3749:	02 36                	add    dh,BYTE PTR [esi]
    374b:	56                   	push   esi
    374c:	00 00                	add    BYTE PTR [eax],al
    374e:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    3754:	9f                   	lahf   
    3755:	09 54 00 00          	or     DWORD PTR [eax+eax*1+0x0],edx
    3759:	00 02                	add    BYTE PTR [edx],al
    375b:	37                   	aaa    
    375c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    375d:	00 00                	add    BYTE PTR [eax],al
    375f:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    3765:	9f                   	lahf   
    3766:	09 28                	or     DWORD PTR [eax],ebp
    3768:	00 00                	add    BYTE PTR [eax],al
    376a:	00 03                	add    BYTE PTR [ebx],al
    376c:	4f                   	dec    edi
    376d:	5f                   	pop    edi
    376e:	01 00                	add    DWORD PTR [eax],eax
    3770:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    3776:	9f                   	lahf   
    3777:	05 04 92 00 00       	add    eax,0x9204
    377c:	00 00                	add    BYTE PTR [eax],al
    377e:	93                   	xchg   ebx,eax
    377f:	01 00                	add    DWORD PTR [eax],eax
    3781:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3784:	8a 13                	mov    dl,BYTE PTR [ebx]
    3786:	00 00                	add    BYTE PTR [eax],al
    3788:	04 01                	add    al,0x1
    378a:	f4                   	hlt    
    378b:	00 00                	add    BYTE PTR [eax],al
    378d:	00 0c 69             	add    BYTE PTR [ecx+ebp*2],cl
    3790:	0b 00                	or     eax,DWORD PTR [eax]
    3792:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    3795:	00 00                	add    BYTE PTR [eax],al
    3797:	08 29                	or     BYTE PTR [ecx],ch
    3799:	00 9f 8b 00 00 00    	add    BYTE PTR [edi+0x8b],bl
    379f:	e3 19                	jecxz  37ba <sysEnter_Vector-0x12c846>
    37a1:	00 00                	add    BYTE PTR [eax],al
    37a3:	02 01                	add    al,BYTE PTR [ecx]
    37a5:	06                   	push   es
    37a6:	64 00 00             	add    BYTE PTR fs:[eax],al
    37a9:	00 02                	add    BYTE PTR [edx],al
    37ab:	01 06                	add    DWORD PTR [esi],eax
    37ad:	5d                   	pop    ebp
    37ae:	00 00                	add    BYTE PTR [eax],al
    37b0:	00 02                	add    BYTE PTR [edx],al
    37b2:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    37b8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    37bf:	02 08                	add    cl,BYTE PTR [eax]
    37c1:	05 00 00 00 00       	add    eax,0x0
    37c6:	02 01                	add    al,BYTE PTR [ecx]
    37c8:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    37cb:	00 00                	add    BYTE PTR [eax],al
    37cd:	02 02                	add    al,BYTE PTR [edx]
    37cf:	07                   	pop    es
    37d0:	0e                   	push   cs
    37d1:	00 00                	add    BYTE PTR [eax],al
    37d3:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    37d6:	00 00                	add    BYTE PTR [eax],al
    37d8:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    37db:	61                   	popa   
    37dc:	00 00                	add    BYTE PTR [eax],al
    37de:	00 02                	add    BYTE PTR [edx],al
    37e0:	04 07                	add    al,0x7
    37e2:	3e 00 00             	add    BYTE PTR ds:[eax],al
    37e5:	00 02                	add    BYTE PTR [edx],al
    37e7:	08 07                	or     BYTE PTR [edi],al
    37e9:	34 00                	xor    al,0x0
    37eb:	00 00                	add    BYTE PTR [eax],al
    37ed:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    37f4:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    37f7:	9b                   	fwait
    37f8:	00 00                	add    BYTE PTR [eax],al
    37fa:	00 02                	add    BYTE PTR [edx],al
    37fc:	01 02                	add    DWORD PTR [edx],eax
    37fe:	95                   	xchg   ebp,eax
    37ff:	00 00                	add    BYTE PTR [eax],al
    3801:	00 02                	add    BYTE PTR [edx],al
    3803:	04 07                	add    al,0x7
    3805:	39 00                	cmp    DWORD PTR [eax],eax
    3807:	00 00                	add    BYTE PTR [eax],al
    3809:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    380c:	e1 00                	loope  380e <sysEnter_Vector-0x12c7f2>
    380e:	00 00                	add    BYTE PTR [eax],al
    3810:	05 04 25 00 00       	add    eax,0x2504
    3815:	00 06                	add    BYTE PTR [esi],al
    3817:	61                   	popa   
    3818:	0b 00                	or     eax,DWORD PTR [eax]
    381a:	00 01                	add    BYTE PTR [ecx],al
    381c:	33 92 00 00 00 08    	xor    edx,DWORD PTR [edx+0x8000000]
    3822:	29 00                	sub    DWORD PTR [eax],eax
    3824:	9f                   	lahf   
    3825:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3826:	00 00                	add    BYTE PTR [eax],al
    3828:	00 01                	add    BYTE PTR [ecx],al
    382a:	9c                   	pushf  
    382b:	e4 00                	in     al,0x0
    382d:	00 00                	add    BYTE PTR [eax],al
    382f:	07                   	pop    es
    3830:	86 0b                	xchg   BYTE PTR [ebx],cl
    3832:	00 00                	add    BYTE PTR [eax],al
    3834:	01 33                	add    DWORD PTR [ebx],esi
    3836:	92                   	xchg   edx,eax
    3837:	00 00                	add    BYTE PTR [eax],al
    3839:	00 02                	add    BYTE PTR [edx],al
    383b:	91                   	xchg   ecx,eax
    383c:	00 07                	add    BYTE PTR [edi],al
    383e:	83 0b 00             	or     DWORD PTR [ebx],0x0
    3841:	00 01                	add    BYTE PTR [ecx],al
    3843:	33 92 00 00 00 02    	xor    edx,DWORD PTR [edx+0x2000000]
    3849:	91                   	xchg   ecx,eax
    384a:	04 08                	add    al,0x8
    384c:	61                   	popa   
    384d:	00 01                	add    BYTE PTR [ecx],al
    384f:	35 92 00 00 00       	xor    eax,0x92
    3854:	01 56 08             	add    DWORD PTR [esi+0x8],edx
    3857:	62 00                	bound  eax,QWORD PTR [eax]
    3859:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
    385f:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
    3862:	09 76 0b             	or     DWORD PTR [esi+0xb],esi
    3865:	00 00                	add    BYTE PTR [eax],al
    3867:	01 52 92             	add    DWORD PTR [edx-0x6e],edx
    386a:	00 00                	add    BYTE PTR [eax],al
    386c:	00 76 29             	add    BYTE PTR [esi+0x29],dh
    386f:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    3875:	01 9c 1a 01 00 00 07 	add    DWORD PTR [edx+ebx*1+0x7000001],ebx
    387c:	86 0b                	xchg   BYTE PTR [ebx],cl
    387e:	00 00                	add    BYTE PTR [eax],al
    3880:	01 52 92             	add    DWORD PTR [edx-0x6e],edx
    3883:	00 00                	add    BYTE PTR [eax],al
    3885:	00 02                	add    BYTE PTR [edx],al
    3887:	91                   	xchg   ecx,eax
    3888:	00 07                	add    BYTE PTR [edi],al
    388a:	83 0b 00             	or     DWORD PTR [ebx],0x0
    388d:	00 01                	add    BYTE PTR [ecx],al
    388f:	52                   	push   edx
    3890:	92                   	xchg   edx,eax
    3891:	00 00                	add    BYTE PTR [eax],al
    3893:	00 02                	add    BYTE PTR [edx],al
    3895:	91                   	xchg   ecx,eax
    3896:	04 00                	add    al,0x0
    3898:	0a 25 00 00 00 2a    	or     ah,BYTE PTR ds:0x2a000000
    389e:	01 00                	add    DWORD PTR [eax],eax
    38a0:	00 0b                	add    BYTE PTR [ebx],cl
    38a2:	8b 00                	mov    eax,DWORD PTR [eax]
    38a4:	00 00                	add    BYTE PTR [eax],al
    38a6:	65 00 0c 7d 0b 00 00 	add    BYTE PTR gs:[edi*2+0x100000b],cl
    38ad:	01 
    38ae:	19 1a                	sbb    DWORD PTR [edx],ebx
    38b0:	01 00                	add    DWORD PTR [eax],eax
    38b2:	00 05 03 e0 52 00    	add    BYTE PTR ds:0x52e003,al
    38b8:	9f                   	lahf   
    38b9:	0d 4b 00 00 00       	or     eax,0x4b
    38be:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    38c1:	00 00                	add    BYTE PTR [eax],al
    38c3:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    38c9:	9f                   	lahf   
    38ca:	0d af 00 00 00       	or     eax,0xaf
    38cf:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    38d5:	05 03 44 54 00       	add    eax,0x544403
    38da:	9f                   	lahf   
    38db:	0d 5b 01 00 00       	or     eax,0x15b
    38e0:	02 36                	add    dh,BYTE PTR [esi]
    38e2:	56                   	push   esi
    38e3:	00 00                	add    BYTE PTR [eax],al
    38e5:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    38eb:	9f                   	lahf   
    38ec:	0d 54 00 00 00       	or     eax,0x54
    38f1:	02 37                	add    dh,BYTE PTR [edi]
    38f3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    38f4:	00 00                	add    BYTE PTR [eax],al
    38f6:	00 05 03 4c 54 00    	add    BYTE PTR ds:0x544c03,al
    38fc:	9f                   	lahf   
    38fd:	0d 28 00 00 00       	or     eax,0x28
    3902:	03 4f 90             	add    ecx,DWORD PTR [edi-0x70]
    3905:	01 00                	add    DWORD PTR [eax],eax
    3907:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    390d:	9f                   	lahf   
    390e:	05 04 92 00 00       	add    eax,0x9204
    3913:	00 00                	add    BYTE PTR [eax],al
    3915:	4b                   	dec    ebx
    3916:	05 00 00 04 00       	add    eax,0x40000
    391b:	52                   	push   edx
    391c:	14 00                	adc    al,0x0
    391e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3921:	f4                   	hlt    
    3922:	00 00                	add    BYTE PTR [eax],al
    3924:	00 0c 8d 0b 00 00 72 	add    BYTE PTR [ecx*4+0x7200000b],cl
    392b:	00 00                	add    BYTE PTR [eax],al
    392d:	00 94 29 00 9f cf 0c 	add    BYTE PTR [ecx+ebp*1+0xccf9f00],dl
    3934:	00 00                	add    BYTE PTR [eax],al
    3936:	ae                   	scas   al,BYTE PTR es:[edi]
    3937:	1a 00                	sbb    al,BYTE PTR [eax]
    3939:	00 02                	add    BYTE PTR [edx],al
    393b:	12 03                	adc    al,BYTE PTR [ebx]
    393d:	00 00                	add    BYTE PTR [eax],al
    393f:	04 e7                	add    al,0xe7
    3941:	00 00                	add    BYTE PTR [eax],al
    3943:	00 06                	add    BYTE PTR [esi],al
    3945:	15 e7 00 00 00       	adc    eax,0xe7
    394a:	03 77 03             	add    esi,DWORD PTR [edi+0x3]
    394d:	00 00                	add    BYTE PTR [eax],al
    394f:	00 03                	add    BYTE PTR [ebx],al
    3951:	af                   	scas   eax,DWORD PTR es:[edi]
    3952:	03 00                	add    eax,DWORD PTR [eax]
    3954:	00 01                	add    BYTE PTR [ecx],al
    3956:	03 6e 02             	add    ebp,DWORD PTR [esi+0x2]
    3959:	00 00                	add    BYTE PTR [eax],al
    395b:	02 03                	add    al,BYTE PTR [ebx]
    395d:	04 03                	add    al,0x3
    395f:	00 00                	add    BYTE PTR [eax],al
    3961:	03 03                	add    eax,DWORD PTR [ebx]
    3963:	4e                   	dec    esi
    3964:	02 00                	add    al,BYTE PTR [eax]
    3966:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    3969:	c9                   	leave  
    396a:	03 00                	add    eax,DWORD PTR [eax]
    396c:	00 05 03 28 03 00    	add    BYTE PTR ds:0x32803,al
    3972:	00 06                	add    BYTE PTR [esi],al
    3974:	03 61 02             	add    esp,DWORD PTR [ecx+0x2]
    3977:	00 00                	add    BYTE PTR [eax],al
    3979:	07                   	pop    es
    397a:	03 fa                	add    edi,edx
    397c:	03 00                	add    eax,DWORD PTR [eax]
    397e:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    3981:	6a 03                	push   0x3
    3983:	00 00                	add    BYTE PTR [eax],al
    3985:	59                   	pop    ecx
    3986:	03 09                	add    ecx,DWORD PTR [ecx]
    3988:	04 00                	add    al,0x0
    398a:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    398d:	f0 02 00             	lock add al,BYTE PTR [eax]
    3990:	00 97 04 87 03 00    	add    BYTE PTR [edi+0x38704],dl
    3996:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    3999:	04 5d                	add    al,0x5d
    399b:	03 00                	add    eax,DWORD PTR [eax]
    399d:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    39a1:	ec                   	in     al,dx
    39a2:	03 00                	add    eax,DWORD PTR [eax]
    39a4:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    39a7:	04 d2                	add    al,0xd2
    39a9:	02 00                	add    al,BYTE PTR [eax]
    39ab:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    39ae:	04 21                	add    al,0x21
    39b0:	04 00                	add    al,0x0
    39b2:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    39b5:	04 35                	add    al,0x35
    39b7:	03 00                	add    eax,DWORD PTR [eax]
    39b9:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    39bc:	04 a7                	add    al,0xa7
    39be:	02 00                	add    al,BYTE PTR [eax]
    39c0:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    39c3:	04 9e                	add    al,0x9e
    39c5:	03 00                	add    eax,DWORD PTR [eax]
    39c7:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    39ca:	04 e0                	add    al,0xe0
    39cc:	02 00                	add    al,BYTE PTR [eax]
    39ce:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    39d1:	04 d7                	add    al,0xd7
    39d3:	03 00                	add    eax,DWORD PTR [eax]
    39d5:	00 00                	add    BYTE PTR [eax],al
    39d7:	03 04 42             	add    eax,DWORD PTR [edx+eax*2]
    39da:	03 00                	add    eax,DWORD PTR [eax]
    39dc:	00 01                	add    BYTE PTR [ecx],al
    39de:	03 04 b6             	add    eax,DWORD PTR [esi+esi*4]
    39e1:	02 00                	add    al,BYTE PTR [eax]
    39e3:	00 02                	add    BYTE PTR [edx],al
    39e5:	03 04 7b             	add    eax,DWORD PTR [ebx+edi*2]
    39e8:	02 00                	add    al,BYTE PTR [eax]
    39ea:	00 03                	add    BYTE PTR [ebx],al
    39ec:	03 04 8b             	add    eax,DWORD PTR [ebx+ecx*4]
    39ef:	02 00                	add    al,BYTE PTR [eax]
    39f1:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    39f4:	04 c2                	add    al,0xc2
    39f6:	02 00                	add    al,BYTE PTR [eax]
    39f8:	00 05 03 00 05 04    	add    BYTE PTR ds:0x4050003,al
    39fe:	07                   	pop    es
    39ff:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3a02:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    3a08:	00 00                	add    BYTE PTR [eax],al
    3a0a:	05 01 06 5d 00       	add    eax,0x5d0601
    3a0f:	00 00                	add    BYTE PTR [eax],al
    3a11:	05 02 05 ea 00       	add    eax,0xea0502
    3a16:	00 00                	add    BYTE PTR [eax],al
    3a18:	06                   	push   es
    3a19:	04 05                	add    al,0x5
    3a1b:	69 6e 74 00 05 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080500
    3a22:	00 00                	add    BYTE PTR [eax],al
    3a24:	00 00                	add    BYTE PTR [eax],al
    3a26:	05 01 08 5b 00       	add    eax,0x5b0801
    3a2b:	00 00                	add    BYTE PTR [eax],al
    3a2d:	05 02 07 0e 00       	add    eax,0xe0702
    3a32:	00 00                	add    BYTE PTR [eax],al
    3a34:	07                   	pop    es
    3a35:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    3a3b:	e7 00                	out    0x0,eax
    3a3d:	00 00                	add    BYTE PTR [eax],al
    3a3f:	05 08 07 34 00       	add    eax,0x340708
    3a44:	00 00                	add    BYTE PTR [eax],al
    3a46:	05 04 05 05 00       	add    eax,0x50504
    3a4b:	00 00                	add    BYTE PTR [eax],al
    3a4d:	05 0c 04 9b 00       	add    eax,0x9b040c
    3a52:	00 00                	add    BYTE PTR [eax],al
    3a54:	07                   	pop    es
    3a55:	2f                   	das    
    3a56:	0c 00                	or     al,0x0
    3a58:	00 03                	add    BYTE PTR [ebx],al
    3a5a:	2a 31                	sub    dh,BYTE PTR [ecx]
    3a5c:	01 00                	add    DWORD PTR [eax],eax
    3a5e:	00 08                	add    BYTE PTR [eax],cl
    3a60:	74 6d                	je     3acf <sysEnter_Vector-0x12c531>
    3a62:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    3a65:	2c da                	sub    al,0xda
    3a67:	01 00                	add    DWORD PTR [eax],eax
    3a69:	00 09                	add    BYTE PTR [ecx],cl
    3a6b:	72 0c                	jb     3a79 <sysEnter_Vector-0x12c587>
    3a6d:	00 00                	add    BYTE PTR [eax],al
    3a6f:	03 2e                	add    ebp,DWORD PTR [esi]
    3a71:	03 01                	add    eax,DWORD PTR [ecx]
    3a73:	00 00                	add    BYTE PTR [eax],al
    3a75:	00 09                	add    BYTE PTR [ecx],cl
    3a77:	10 0c 00             	adc    BYTE PTR [eax+eax*1],cl
    3a7a:	00 03                	add    BYTE PTR [ebx],al
    3a7c:	2f                   	das    
    3a7d:	03 01                	add    eax,DWORD PTR [ecx]
    3a7f:	00 00                	add    BYTE PTR [eax],al
    3a81:	04 09                	add    al,0x9
    3a83:	a2 0b 00 00 03       	mov    ds:0x300000b,al
    3a88:	30 03                	xor    BYTE PTR [ebx],al
    3a8a:	01 00                	add    DWORD PTR [eax],eax
    3a8c:	00 08                	add    BYTE PTR [eax],cl
    3a8e:	09 6a 0c             	or     DWORD PTR [edx+0xc],ebp
    3a91:	00 00                	add    BYTE PTR [eax],al
    3a93:	03 31                	add    esi,DWORD PTR [ecx]
    3a95:	03 01                	add    eax,DWORD PTR [ecx]
    3a97:	00 00                	add    BYTE PTR [eax],al
    3a99:	0c 09                	or     al,0x9
    3a9b:	da 0b                	fimul  DWORD PTR [ebx]
    3a9d:	00 00                	add    BYTE PTR [eax],al
    3a9f:	03 32                	add    esi,DWORD PTR [edx]
    3aa1:	03 01                	add    eax,DWORD PTR [ecx]
    3aa3:	00 00                	add    BYTE PTR [eax],al
    3aa5:	10 09                	adc    BYTE PTR [ecx],cl
    3aa7:	e1 0b                	loope  3ab4 <sysEnter_Vector-0x12c54c>
    3aa9:	00 00                	add    BYTE PTR [eax],al
    3aab:	03 33                	add    esi,DWORD PTR [ebx]
    3aad:	03 01                	add    eax,DWORD PTR [ecx]
    3aaf:	00 00                	add    BYTE PTR [eax],al
    3ab1:	14 09                	adc    al,0x9
    3ab3:	5c                   	pop    esp
    3ab4:	0c 00                	or     al,0x0
    3ab6:	00 03                	add    BYTE PTR [ebx],al
    3ab8:	34 03                	xor    al,0x3
    3aba:	01 00                	add    DWORD PTR [eax],eax
    3abc:	00 18                	add    BYTE PTR [eax],bl
    3abe:	09 17                	or     DWORD PTR [edi],edx
    3ac0:	0c 00                	or     al,0x0
    3ac2:	00 03                	add    BYTE PTR [ebx],al
    3ac4:	35 03 01 00 00       	xor    eax,0x103
    3ac9:	1c 09                	sbb    al,0x9
    3acb:	f7                   	(bad)  
    3acc:	0b 00                	or     eax,DWORD PTR [eax]
    3ace:	00 03                	add    BYTE PTR [ebx],al
    3ad0:	36 03 01             	add    eax,DWORD PTR ss:[ecx]
    3ad3:	00 00                	add    BYTE PTR [eax],al
    3ad5:	20 09                	and    BYTE PTR [ecx],cl
    3ad7:	52                   	push   edx
    3ad8:	0c 00                	or     al,0x0
    3ada:	00 03                	add    BYTE PTR [ebx],al
    3adc:	37                   	aaa    
    3add:	31 01                	xor    DWORD PTR [ecx],eax
    3adf:	00 00                	add    BYTE PTR [eax],al
    3ae1:	24 09                	and    al,0x9
    3ae3:	79 0c                	jns    3af1 <sysEnter_Vector-0x12c50f>
    3ae5:	00 00                	add    BYTE PTR [eax],al
    3ae7:	03 38                	add    edi,DWORD PTR [eax]
    3ae9:	da 01                	fiadd  DWORD PTR [ecx]
    3aeb:	00 00                	add    BYTE PTR [eax],al
    3aed:	28 00                	sub    BYTE PTR [eax],al
    3aef:	0a 04 e0             	or     al,BYTE PTR [eax+eiz*8]
    3af2:	01 00                	add    DWORD PTR [eax],eax
    3af4:	00 0b                	add    BYTE PTR [ebx],cl
    3af6:	ee                   	out    dx,al
    3af7:	00 00                	add    BYTE PTR [eax],al
    3af9:	00 05 01 02 95 00    	add    BYTE PTR ds:0x950201,al
    3aff:	00 00                	add    BYTE PTR [eax],al
    3b01:	05 04 07 39 00       	add    eax,0x390704
    3b06:	00 00                	add    BYTE PTR [eax],al
    3b08:	05 04 07 e1 00       	add    eax,0xe10704
    3b0d:	00 00                	add    BYTE PTR [eax],al
    3b0f:	0a 04 ee             	or     al,BYTE PTR [esi+ebp*8]
    3b12:	00 00                	add    BYTE PTR [eax],al
    3b14:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
    3b17:	0b 00                	or     eax,DWORD PTR [eax]
    3b19:	00 01                	add    BYTE PTR [ecx],al
    3b1b:	16                   	push   ss
    3b1c:	3f                   	aas    
    3b1d:	01 00                	add    DWORD PTR [eax],eax
    3b1f:	00 94 29 00 9f 44 00 	add    BYTE PTR [ecx+ebp*1+0x449f00],dl
    3b26:	00 00                	add    BYTE PTR [eax],al
    3b28:	01 9c 28 02 00 00 0d 	add    DWORD PTR [eax+ebp*1+0xd000002],ebx
    3b2f:	83 04 00 00          	add    DWORD PTR [eax+eax*1],0x0
    3b33:	01 18                	add    DWORD PTR [eax],ebx
    3b35:	1f                   	pop    ds
    3b36:	01 00                	add    DWORD PTR [eax],eax
    3b38:	00 02                	add    BYTE PTR [edx],al
    3b3a:	91                   	xchg   ecx,eax
    3b3b:	6c                   	ins    BYTE PTR es:[edi],dx
    3b3c:	00 0e                	add    BYTE PTR [esi],cl
    3b3e:	06                   	push   es
    3b3f:	0c 00                	or     al,0x0
    3b41:	00 01                	add    BYTE PTR [ecx],al
    3b43:	1e                   	push   ds
    3b44:	96                   	xchg   esi,eax
    3b45:	02 00                	add    al,BYTE PTR [eax]
    3b47:	00 d8                	add    al,bl
    3b49:	29 00                	sub    DWORD PTR [eax],eax
    3b4b:	9f                   	lahf   
    3b4c:	19 03                	sbb    DWORD PTR [ebx],eax
    3b4e:	00 00                	add    BYTE PTR [eax],al
    3b50:	01 9c 96 02 00 00 0f 	add    DWORD PTR [esi+edx*4+0xf000002],ebx
    3b57:	81 0c 00 00 01 1e 9c 	or     DWORD PTR [eax+eax*1],0x9c1e0100
    3b5e:	02 00                	add    al,BYTE PTR [eax]
    3b60:	00 02                	add    BYTE PTR [edx],al
    3b62:	91                   	xchg   ecx,eax
    3b63:	00 0f                	add    BYTE PTR [edi],cl
    3b65:	29 0c 00             	sub    DWORD PTR [eax+eax*1],ecx
    3b68:	00 01                	add    BYTE PTR [ecx],al
    3b6a:	1e                   	push   ds
    3b6b:	96                   	xchg   esi,eax
    3b6c:	02 00                	add    al,BYTE PTR [eax]
    3b6e:	00 02                	add    BYTE PTR [edx],al
    3b70:	91                   	xchg   ecx,eax
    3b71:	04 0d                	add    al,0xd
    3b73:	4d                   	dec    ebp
    3b74:	0c 00                	or     al,0x0
    3b76:	00 01                	add    BYTE PTR [ecx],al
    3b78:	20 3f                	and    BYTE PTR [edi],bh
    3b7a:	01 00                	add    DWORD PTR [eax],eax
    3b7c:	00 02                	add    BYTE PTR [edx],al
    3b7e:	91                   	xchg   ecx,eax
    3b7f:	68 0d 42 0c 00       	push   0xc420d
    3b84:	00 01                	add    BYTE PTR [ecx],al
    3b86:	21 ec                	and    esp,ebp
    3b88:	01 00                	add    DWORD PTR [eax],eax
    3b8a:	00 02                	add    BYTE PTR [edx],al
    3b8c:	91                   	xchg   ecx,eax
    3b8d:	64                   	fs
    3b8e:	0d 00 0c 00 00       	or     eax,0xc00
    3b93:	01 21                	add    DWORD PTR [ecx],esp
    3b95:	ec                   	in     al,dx
    3b96:	01 00                	add    DWORD PTR [eax],eax
    3b98:	00 02                	add    BYTE PTR [edx],al
    3b9a:	91                   	xchg   ecx,eax
    3b9b:	70 0d                	jo     3baa <sysEnter_Vector-0x12c456>
    3b9d:	e4 0b                	in     al,0xb
    3b9f:	00 00                	add    BYTE PTR [eax],al
    3ba1:	01 22                	add    DWORD PTR [edx],esp
    3ba3:	03 01                	add    eax,DWORD PTR [ecx]
    3ba5:	00 00                	add    BYTE PTR [eax],al
    3ba7:	02 91 6c 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a006c]
    3bad:	4a                   	dec    edx
    3bae:	01 00                	add    DWORD PTR [eax],eax
    3bb0:	00 0a                	add    BYTE PTR [edx],cl
    3bb2:	04 a2                	add    al,0xa2
    3bb4:	02 00                	add    al,BYTE PTR [eax]
    3bb6:	00 0b                	add    BYTE PTR [ebx],cl
    3bb8:	3f                   	aas    
    3bb9:	01 00                	add    DWORD PTR [eax],eax
    3bbb:	00 10                	add    BYTE PTR [eax],dl
    3bbd:	c5 0b                	lds    ecx,FWORD PTR [ebx]
    3bbf:	00 00                	add    BYTE PTR [eax],al
    3bc1:	01 3b                	add    DWORD PTR [ebx],edi
    3bc3:	96                   	xchg   esi,eax
    3bc4:	02 00                	add    al,BYTE PTR [eax]
    3bc6:	00 f1                	add    cl,dh
    3bc8:	2c 00                	sub    al,0x0
    3bca:	9f                   	lahf   
    3bcb:	1d 00 00 00 01       	sbb    eax,0x1000000
    3bd0:	9c                   	pushf  
    3bd1:	dd 02                	fld    QWORD PTR [edx]
    3bd3:	00 00                	add    BYTE PTR [eax],al
    3bd5:	0f 81 0c 00 00 01    	jno    1003be7 <sysEnter_Vector+0xed3be7>
    3bdb:	3b 9c 02 00 00 02 91 	cmp    ebx,DWORD PTR [edx+eax*1-0x6efe0000]
    3be2:	00 0f                	add    BYTE PTR [edi],cl
    3be4:	29 0c 00             	sub    DWORD PTR [eax+eax*1],ecx
    3be7:	00 01                	add    BYTE PTR [ecx],al
    3be9:	3b 96 02 00 00 02    	cmp    edx,DWORD PTR [esi+0x2000002]
    3bef:	91                   	xchg   ecx,eax
    3bf0:	04 00                	add    al,0x0
    3bf2:	10 98 0b 00 00 01    	adc    BYTE PTR [eax+0x100000b],bl
    3bf8:	40                   	inc    eax
    3bf9:	96                   	xchg   esi,eax
    3bfa:	02 00                	add    al,BYTE PTR [eax]
    3bfc:	00 0e                	add    BYTE PTR [esi],cl
    3bfe:	2d 00 9f 3f 00       	sub    eax,0x3f9f00
    3c03:	00 00                	add    BYTE PTR [eax],al
    3c05:	01 9c 1f 03 00 00 0f 	add    DWORD PTR [edi+ebx*1+0xf000003],ebx
    3c0c:	81 0c 00 00 01 40 9c 	or     DWORD PTR [eax+eax*1],0x9c400100
    3c13:	02 00                	add    al,BYTE PTR [eax]
    3c15:	00 02                	add    BYTE PTR [edx],al
    3c17:	91                   	xchg   ecx,eax
    3c18:	00 11                	add    BYTE PTR [ecx],dl
    3c1a:	74 00                	je     3c1c <sysEnter_Vector-0x12c3e4>
    3c1c:	01 41 3f             	add    DWORD PTR [ecx+0x3f],eax
    3c1f:	01 00                	add    DWORD PTR [eax],eax
    3c21:	00 02                	add    BYTE PTR [edx],al
    3c23:	91                   	xchg   ecx,eax
    3c24:	6c                   	ins    BYTE PTR es:[edi],dx
    3c25:	0d 29 0c 00 00       	or     eax,0xc29
    3c2a:	01 42 4a             	add    DWORD PTR [edx+0x4a],eax
    3c2d:	01 00                	add    DWORD PTR [eax],eax
    3c2f:	00 02                	add    BYTE PTR [edx],al
    3c31:	91                   	xchg   ecx,eax
    3c32:	40                   	inc    eax
    3c33:	00 10                	add    BYTE PTR [eax],dl
    3c35:	87 0c 00             	xchg   DWORD PTR [eax+eax*1],ecx
    3c38:	00 01                	add    BYTE PTR [ecx],al
    3c3a:	48                   	dec    eax
    3c3b:	96                   	xchg   esi,eax
    3c3c:	02 00                	add    al,BYTE PTR [eax]
    3c3e:	00 4d 2d             	add    BYTE PTR [ebp+0x2d],cl
    3c41:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    3c47:	01 9c 61 03 00 00 0f 	add    DWORD PTR [ecx+eiz*2+0xf000003],ebx
    3c4e:	81 0c 00 00 01 48 9c 	or     DWORD PTR [eax+eax*1],0x9c480100
    3c55:	02 00                	add    al,BYTE PTR [eax]
    3c57:	00 02                	add    BYTE PTR [edx],al
    3c59:	91                   	xchg   ecx,eax
    3c5a:	00 0f                	add    BYTE PTR [edi],cl
    3c5c:	29 0c 00             	sub    DWORD PTR [eax+eax*1],ecx
    3c5f:	00 01                	add    BYTE PTR [ecx],al
    3c61:	48                   	dec    eax
    3c62:	96                   	xchg   esi,eax
    3c63:	02 00                	add    al,BYTE PTR [eax]
    3c65:	00 02                	add    BYTE PTR [edx],al
    3c67:	91                   	xchg   ecx,eax
    3c68:	04 11                	add    al,0x11
    3c6a:	74 00                	je     3c6c <sysEnter_Vector-0x12c394>
    3c6c:	01 4a 3f             	add    DWORD PTR [edx+0x3f],ecx
    3c6f:	01 00                	add    DWORD PTR [eax],eax
    3c71:	00 02                	add    BYTE PTR [edx],al
    3c73:	91                   	xchg   ecx,eax
    3c74:	74 00                	je     3c76 <sysEnter_Vector-0x12c38a>
    3c76:	10 36                	adc    BYTE PTR [esi],dh
    3c78:	0c 00                	or     al,0x0
    3c7a:	00 01                	add    BYTE PTR [ecx],al
    3c7c:	50                   	push   eax
    3c7d:	96                   	xchg   esi,eax
    3c7e:	02 00                	add    al,BYTE PTR [eax]
    3c80:	00 82 2d 00 9f 1d    	add    BYTE PTR [edx+0x1d9f002d],al
    3c86:	00 00                	add    BYTE PTR [eax],al
    3c88:	00 01                	add    BYTE PTR [ecx],al
    3c8a:	9c                   	pushf  
    3c8b:	97                   	xchg   edi,eax
    3c8c:	03 00                	add    eax,DWORD PTR [eax]
    3c8e:	00 0f                	add    BYTE PTR [edi],cl
    3c90:	81 0c 00 00 01 50 9c 	or     DWORD PTR [eax+eax*1],0x9c500100
    3c97:	02 00                	add    al,BYTE PTR [eax]
    3c99:	00 02                	add    BYTE PTR [edx],al
    3c9b:	91                   	xchg   ecx,eax
    3c9c:	00 0f                	add    BYTE PTR [edi],cl
    3c9e:	29 0c 00             	sub    DWORD PTR [eax+eax*1],ecx
    3ca1:	00 01                	add    BYTE PTR [ecx],al
    3ca3:	50                   	push   eax
    3ca4:	96                   	xchg   esi,eax
    3ca5:	02 00                	add    al,BYTE PTR [eax]
    3ca7:	00 02                	add    BYTE PTR [edx],al
    3ca9:	91                   	xchg   ecx,eax
    3caa:	04 00                	add    al,0x0
    3cac:	0e                   	push   cs
    3cad:	4b                   	dec    ebx
    3cae:	0c 00                	or     al,0x0
    3cb0:	00 01                	add    BYTE PTR [ecx],al
    3cb2:	54                   	push   esp
    3cb3:	3f                   	aas    
    3cb4:	01 00                	add    DWORD PTR [eax],eax
    3cb6:	00 9f 2d 00 9f 57    	add    BYTE PTR [edi+0x579f002d],bl
    3cbc:	08 00                	or     BYTE PTR [eax],al
    3cbe:	00 01                	add    BYTE PTR [ecx],al
    3cc0:	9c                   	pushf  
    3cc1:	2f                   	das    
    3cc2:	04 00                	add    al,0x0
    3cc4:	00 0f                	add    BYTE PTR [edi],cl
    3cc6:	29 0c 00             	sub    DWORD PTR [eax+eax*1],ecx
    3cc9:	00 01                	add    BYTE PTR [ecx],al
    3ccb:	54                   	push   esp
    3ccc:	96                   	xchg   esi,eax
    3ccd:	02 00                	add    al,BYTE PTR [eax]
    3ccf:	00 02                	add    BYTE PTR [edx],al
    3cd1:	91                   	xchg   ecx,eax
    3cd2:	00 11                	add    BYTE PTR [ecx],dl
    3cd4:	64                   	fs
    3cd5:	61                   	popa   
    3cd6:	79 00                	jns    3cd8 <sysEnter_Vector-0x12c328>
    3cd8:	01 55 31             	add    DWORD PTR [ebp+0x31],edx
    3cdb:	01 00                	add    DWORD PTR [eax],eax
    3cdd:	00 02                	add    BYTE PTR [edx],al
    3cdf:	91                   	xchg   ecx,eax
    3ce0:	68 0d e4 0b 00       	push   0xbe40d
    3ce5:	00 01                	add    BYTE PTR [ecx],al
    3ce7:	55                   	push   ebp
    3ce8:	31 01                	xor    DWORD PTR [ecx],eax
    3cea:	00 00                	add    BYTE PTR [eax],al
    3cec:	02 91 54 0d e1 0b    	add    dl,BYTE PTR [ecx+0xbe10d54]
    3cf2:	00 00                	add    BYTE PTR [eax],al
    3cf4:	01 56 03             	add    DWORD PTR [esi+0x3],edx
    3cf7:	01 00                	add    DWORD PTR [eax],eax
    3cf9:	00 02                	add    BYTE PTR [edx],al
    3cfb:	91                   	xchg   ecx,eax
    3cfc:	4c                   	dec    esp
    3cfd:	0d 1a 0c 00 00       	or     eax,0xc1a
    3d02:	01 57 03             	add    DWORD PTR [edi+0x3],edx
    3d05:	01 00                	add    DWORD PTR [eax],eax
    3d07:	00 02                	add    BYTE PTR [edx],al
    3d09:	91                   	xchg   ecx,eax
    3d0a:	64                   	fs
    3d0b:	0d e9 0b 00 00       	or     eax,0xbe9
    3d10:	01 57 03             	add    DWORD PTR [edi+0x3],edx
    3d13:	01 00                	add    DWORD PTR [eax],eax
    3d15:	00 02                	add    BYTE PTR [edx],al
    3d17:	91                   	xchg   ecx,eax
    3d18:	60                   	pusha  
    3d19:	0d 0e 06 00 00       	or     eax,0x60e
    3d1e:	01 58 31             	add    DWORD PTR [eax+0x31],ebx
    3d21:	01 00                	add    DWORD PTR [eax],eax
    3d23:	00 02                	add    BYTE PTR [edx],al
    3d25:	91                   	xchg   ecx,eax
    3d26:	50                   	push   eax
    3d27:	0d 9d 0c 00 00       	or     eax,0xc9d
    3d2c:	01 59 03             	add    DWORD PTR [ecx+0x3],ebx
    3d2f:	01 00                	add    DWORD PTR [eax],eax
    3d31:	00 02                	add    BYTE PTR [edx],al
    3d33:	91                   	xchg   ecx,eax
    3d34:	5c                   	pop    esp
    3d35:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    3d39:	00 01                	add    BYTE PTR [ecx],al
    3d3b:	5a                   	pop    edx
    3d3c:	31 01                	xor    DWORD PTR [ecx],eax
    3d3e:	00 00                	add    BYTE PTR [eax],al
    3d40:	02 91 58 00 10 ef    	add    dl,BYTE PTR [ecx-0x10efffa8]
    3d46:	0b 00                	or     eax,DWORD PTR [eax]
    3d48:	00 01                	add    BYTE PTR [ecx],al
    3d4a:	bf 96 02 00 00       	mov    edi,0x296
    3d4f:	f6 35 00 9f 6d 00    	div    BYTE PTR ds:0x6d9f00
    3d55:	00 00                	add    BYTE PTR [eax],al
    3d57:	01 9c 73 04 00 00 0f 	add    DWORD PTR [ebx+esi*2+0xf000004],ebx
    3d5e:	4d                   	dec    ebp
    3d5f:	0c 00                	or     al,0x0
    3d61:	00 01                	add    BYTE PTR [ecx],al
    3d63:	bf 96 02 00 00       	mov    edi,0x296
    3d68:	02 91 00 0f 1f 0c    	add    dl,BYTE PTR [ecx+0xc1f0f00]
    3d6e:	00 00                	add    BYTE PTR [eax],al
    3d70:	01 bf e5 01 00 00    	add    DWORD PTR [edi+0x1e5],edi
    3d76:	02 91 5c 0d ad 0b    	add    dl,BYTE PTR [ecx+0xbad0d5c]
    3d7c:	00 00                	add    BYTE PTR [eax],al
    3d7e:	01 c1                	add    ecx,eax
    3d80:	3f                   	aas    
    3d81:	01 00                	add    DWORD PTR [eax],eax
    3d83:	00 02                	add    BYTE PTR [edx],al
    3d85:	91                   	xchg   ecx,eax
    3d86:	6c                   	ins    BYTE PTR es:[edi],dx
    3d87:	00 12                	add    BYTE PTR [edx],dl
    3d89:	4b                   	dec    ebx
    3d8a:	00 00                	add    BYTE PTR [eax],al
    3d8c:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3d8f:	1f                   	pop    ds
    3d90:	01 00                	add    DWORD PTR [eax],eax
    3d92:	00 05 03 40 54 00    	add    BYTE PTR ds:0x544003,al
    3d98:	9f                   	lahf   
    3d99:	12 af 00 00 00 04    	adc    ch,BYTE PTR [edi+0x4000000]
    3d9f:	35 1f 01 00 00       	xor    eax,0x11f
    3da4:	05 03 44 54 00       	add    eax,0x544403
    3da9:	9f                   	lahf   
    3daa:	12 5b 01             	adc    bl,BYTE PTR [ebx+0x1]
    3dad:	00 00                	add    BYTE PTR [eax],al
    3daf:	04 36                	add    al,0x36
    3db1:	1f                   	pop    ds
    3db2:	01 00                	add    DWORD PTR [eax],eax
    3db4:	00 05 03 3c 54 00    	add    BYTE PTR ds:0x543c03,al
    3dba:	9f                   	lahf   
    3dbb:	12 54 00 00          	adc    dl,BYTE PTR [eax+eax*1+0x0]
    3dbf:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    3dc2:	31 01                	xor    DWORD PTR [ecx],eax
    3dc4:	00 00                	add    BYTE PTR [eax],al
    3dc6:	05 03 4c 54 00       	add    eax,0x544c03
    3dcb:	9f                   	lahf   
    3dcc:	12 28                	adc    ch,BYTE PTR [eax]
    3dce:	00 00                	add    BYTE PTR [eax],al
    3dd0:	00 05 4f c8 04 00    	add    BYTE PTR ds:0x4c84f,al
    3dd6:	00 05 03 48 54 00    	add    BYTE PTR ds:0x544803,al
    3ddc:	9f                   	lahf   
    3ddd:	0a 04 fa             	or     al,BYTE PTR [edx+edi*8]
    3de0:	01 00                	add    DWORD PTR [eax],eax
    3de2:	00 12                	add    BYTE PTR [edx],dl
    3de4:	b3 0b                	mov    bl,0xb
    3de6:	00 00                	add    BYTE PTR [eax],al
    3de8:	01 0c 03             	add    DWORD PTR [ebx+eax*1],ecx
    3deb:	01 00                	add    DWORD PTR [eax],eax
    3ded:	00 05 03 48 53 00    	add    BYTE PTR ds:0x534803,al
    3df3:	9f                   	lahf   
    3df4:	12 94 0c 00 00 01 0d 	adc    dl,BYTE PTR [esp+ecx*1+0xd010000]
    3dfb:	31 01                	xor    DWORD PTR [ecx],eax
    3dfd:	00 00                	add    BYTE PTR [eax],al
    3dff:	05 03 74 54 00       	add    eax,0x547403
    3e04:	9f                   	lahf   
    3e05:	13 fa                	adc    edi,edx
    3e07:	01 00                	add    DWORD PTR [eax],eax
    3e09:	00 00                	add    BYTE PTR [eax],al
    3e0b:	05 00 00 14 f3       	add    eax,0xf3140000
    3e10:	01 00                	add    DWORD PTR [eax],eax
    3e12:	00 01                	add    BYTE PTR [ecx],al
    3e14:	00 12                	add    BYTE PTR [edx],dl
    3e16:	bd 0b 00 00 01       	mov    ebp,0x100000b
    3e1b:	0e                   	push   cs
    3e1c:	f0 04 00             	lock add al,0x0
    3e1f:	00 05 03 34 54 00    	add    BYTE PTR ds:0x543403,al
    3e25:	9f                   	lahf   
    3e26:	12 ce                	adc    cl,dh
    3e28:	0b 00                	or     eax,DWORD PTR [eax]
    3e2a:	00 01                	add    BYTE PTR [ecx],al
    3e2c:	0f 03 01             	lsl    eax,WORD PTR [ecx]
    3e2f:	00 00                	add    BYTE PTR [eax],al
    3e31:	05 03 78 54 00       	add    eax,0x547803
    3e36:	9f                   	lahf   
    3e37:	13 03                	adc    eax,DWORD PTR [ebx]
    3e39:	01 00                	add    DWORD PTR [eax],eax
    3e3b:	00 38                	add    BYTE PTR [eax],bh
    3e3d:	05 00 00 14 f3       	add    eax,0xf3140000
    3e42:	01 00                	add    DWORD PTR [eax],eax
    3e44:	00 01                	add    BYTE PTR [ecx],al
    3e46:	14 f3                	adc    al,0xf3
    3e48:	01 00                	add    DWORD PTR [eax],eax
    3e4a:	00 0b                	add    BYTE PTR [ebx],cl
    3e4c:	00 12                	add    BYTE PTR [edx],dl
    3e4e:	64                   	fs
    3e4f:	0c 00                	or     al,0x0
    3e51:	00 01                	add    BYTE PTR [ecx],al
    3e53:	11 49 05             	adc    DWORD PTR [ecx+0x5],ecx
    3e56:	00 00                	add    BYTE PTR [eax],al
    3e58:	05 03 60 51 00       	add    eax,0x516003
    3e5d:	9f                   	lahf   
    3e5e:	0b 22                	or     esp,DWORD PTR [edx]
    3e60:	05                   	.byte 0x5
    3e61:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     2c2:	11 01                	adc    DWORD PTR [ecx],eax
     2c4:	12 06                	adc    al,BYTE PTR [esi]
     2c6:	40                   	inc    eax
     2c7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cd:	00 00                	add    BYTE PTR [eax],al
     2cf:	07                   	pop    es
     2d0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     2d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2da:	02 18                	add    bl,BYTE PTR [eax]
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	08 0b                	or     BYTE PTR [ebx],cl
     2e0:	01 11                	add    DWORD PTR [ecx],edx
     2e2:	01 12                	add    DWORD PTR [edx],edx
     2e4:	06                   	push   es
     2e5:	00 00                	add    BYTE PTR [eax],al
     2e7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     2ea:	03 08                	add    ecx,DWORD PTR [eax]
     2ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f0:	49                   	dec    ecx
     2f1:	13 02                	adc    eax,DWORD PTR [edx]
     2f3:	18 00                	sbb    BYTE PTR [eax],al
     2f5:	00 0a                	add    BYTE PTR [edx],cl
     2f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2fa:	19 03                	sbb    DWORD PTR [ebx],eax
     2fc:	0e                   	push   cs
     2fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     301:	27                   	daa    
     302:	19 11                	sbb    DWORD PTR [ecx],edx
     304:	01 12                	add    DWORD PTR [edx],edx
     306:	06                   	push   es
     307:	40                   	inc    eax
     308:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30e:	00 00                	add    BYTE PTR [eax],al
     310:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     313:	03 0e                	add    ecx,DWORD PTR [esi]
     315:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     317:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     319:	49                   	dec    ecx
     31a:	13 02                	adc    eax,DWORD PTR [edx]
     31c:	18 00                	sbb    BYTE PTR [eax],al
     31e:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     321:	01 11                	add    DWORD PTR [ecx],edx
     323:	01 12                	add    DWORD PTR [edx],edx
     325:	06                   	push   es
     326:	01 13                	add    DWORD PTR [ebx],edx
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	0d 34 00 03 0e       	or     eax,0xe030034
     32f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     331:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     333:	49                   	dec    ecx
     334:	13 3f                	adc    edi,DWORD PTR [edi]
     336:	19 02                	sbb    DWORD PTR [edx],eax
     338:	18 00                	sbb    BYTE PTR [eax],al
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	01 11                	add    DWORD PTR [ecx],edx
     33e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     344:	0e                   	push   cs
     345:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     347:	11 01                	adc    DWORD PTR [ecx],eax
     349:	12 06                	adc    al,BYTE PTR [esi]
     34b:	10 17                	adc    BYTE PTR [edi],dl
     34d:	00 00                	add    BYTE PTR [eax],al
     34f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     352:	0b 0b                	or     ecx,DWORD PTR [ebx]
     354:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     35f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     362:	08 00                	or     BYTE PTR [eax],al
     364:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     367:	00 03                	add    BYTE PTR [ebx],al
     369:	0e                   	push   cs
     36a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36e:	49                   	dec    ecx
     36f:	13 00                	adc    eax,DWORD PTR [eax]
     371:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     377:	49                   	dec    ecx
     378:	13 00                	adc    eax,DWORD PTR [eax]
     37a:	00 06                	add    BYTE PTR [esi],al
     37c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     380:	00 00                	add    BYTE PTR [eax],al
     382:	07                   	pop    es
     383:	04 01                	add    al,0x1
     385:	03 0e                	add    ecx,DWORD PTR [esi]
     387:	0b 0b                	or     ecx,DWORD PTR [ebx]
     389:	49                   	dec    ecx
     38a:	13 3a                	adc    edi,DWORD PTR [edx]
     38c:	0b 3b                	or     edi,DWORD PTR [ebx]
     38e:	0b 01                	or     eax,DWORD PTR [ecx]
     390:	13 00                	adc    eax,DWORD PTR [eax]
     392:	00 08                	add    BYTE PTR [eax],cl
     394:	28 00                	sub    BYTE PTR [eax],al
     396:	03 0e                	add    ecx,DWORD PTR [esi]
     398:	1c 0b                	sbb    al,0xb
     39a:	00 00                	add    BYTE PTR [eax],al
     39c:	09 28                	or     DWORD PTR [eax],ebp
     39e:	00 03                	add    BYTE PTR [ebx],al
     3a0:	0e                   	push   cs
     3a1:	1c 05                	sbb    al,0x5
     3a3:	00 00                	add    BYTE PTR [eax],al
     3a5:	0a 0f                	or     cl,BYTE PTR [edi]
     3a7:	00 0b                	add    BYTE PTR [ebx],cl
     3a9:	0b 00                	or     eax,DWORD PTR [eax]
     3ab:	00 0b                	add    BYTE PTR [ebx],cl
     3ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3b0:	19 03                	sbb    DWORD PTR [ebx],eax
     3b2:	0e                   	push   cs
     3b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b7:	27                   	daa    
     3b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3bb:	11 01                	adc    DWORD PTR [ecx],eax
     3bd:	12 06                	adc    al,BYTE PTR [esi]
     3bf:	40                   	inc    eax
     3c0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	0c 05                	or     al,0x5
     3ca:	00 03                	add    BYTE PTR [ebx],al
     3cc:	0e                   	push   cs
     3cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d1:	49                   	dec    ecx
     3d2:	13 02                	adc    eax,DWORD PTR [edx]
     3d4:	18 00                	sbb    BYTE PTR [eax],al
     3d6:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	27                   	daa    
     3e3:	19 11                	sbb    DWORD PTR [ecx],edx
     3e5:	01 12                	add    DWORD PTR [edx],edx
     3e7:	06                   	push   es
     3e8:	40                   	inc    eax
     3e9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3ef:	00 00                	add    BYTE PTR [eax],al
     3f1:	0e                   	push   cs
     3f2:	34 00                	xor    al,0x0
     3f4:	03 0e                	add    ecx,DWORD PTR [esi]
     3f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fa:	49                   	dec    ecx
     3fb:	13 3f                	adc    edi,DWORD PTR [edi]
     3fd:	19 02                	sbb    DWORD PTR [edx],eax
     3ff:	18 00                	sbb    BYTE PTR [eax],al
     401:	00 00                	add    BYTE PTR [eax],al
     403:	01 11                	add    DWORD PTR [ecx],edx
     405:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40b:	0e                   	push   cs
     40c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	10 17                	adc    BYTE PTR [edi],dl
     414:	00 00                	add    BYTE PTR [eax],al
     416:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     419:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     41e:	0e                   	push   cs
     41f:	00 00                	add    BYTE PTR [eax],al
     421:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     424:	0b 0b                	or     ecx,DWORD PTR [ebx]
     426:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     429:	08 00                	or     BYTE PTR [eax],al
     42b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     42e:	00 03                	add    BYTE PTR [ebx],al
     430:	0e                   	push   cs
     431:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     433:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     435:	49                   	dec    ecx
     436:	13 00                	adc    eax,DWORD PTR [eax]
     438:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     43e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     440:	49                   	dec    ecx
     441:	13 3a                	adc    edi,DWORD PTR [edx]
     443:	0b 3b                	or     edi,DWORD PTR [ebx]
     445:	0b 01                	or     eax,DWORD PTR [ecx]
     447:	13 00                	adc    eax,DWORD PTR [eax]
     449:	00 06                	add    BYTE PTR [esi],al
     44b:	28 00                	sub    BYTE PTR [eax],al
     44d:	03 0e                	add    ecx,DWORD PTR [esi]
     44f:	1c 0b                	sbb    al,0xb
     451:	00 00                	add    BYTE PTR [eax],al
     453:	07                   	pop    es
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	03 0e                	add    ecx,DWORD PTR [esi]
     458:	1c 05                	sbb    al,0x5
     45a:	00 00                	add    BYTE PTR [eax],al
     45c:	08 0f                	or     BYTE PTR [edi],cl
     45e:	00 0b                	add    BYTE PTR [ebx],cl
     460:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 2e                	or     DWORD PTR [esi],ebp
     467:	01 3f                	add    DWORD PTR [edi],edi
     469:	19 03                	sbb    DWORD PTR [ebx],eax
     46b:	0e                   	push   cs
     46c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     46e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     470:	27                   	daa    
     471:	19 11                	sbb    DWORD PTR [ecx],edx
     473:	01 12                	add    DWORD PTR [edx],edx
     475:	06                   	push   es
     476:	40                   	inc    eax
     477:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     485:	0b 3b                	or     edi,DWORD PTR [ebx]
     487:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     48a:	02 18                	add    bl,BYTE PTR [eax]
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     494:	0b 3b                	or     edi,DWORD PTR [ebx]
     496:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     499:	02 18                	add    bl,BYTE PTR [eax]
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	0c 34                	or     al,0x34
     49f:	00 03                	add    BYTE PTR [ebx],al
     4a1:	0e                   	push   cs
     4a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a6:	49                   	dec    ecx
     4a7:	13 02                	adc    eax,DWORD PTR [edx]
     4a9:	18 00                	sbb    BYTE PTR [eax],al
     4ab:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     4b1:	01 13                	add    DWORD PTR [ebx],edx
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	0e                   	push   cs
     4b6:	21 00                	and    DWORD PTR [eax],eax
     4b8:	49                   	dec    ecx
     4b9:	13 2f                	adc    ebp,DWORD PTR [edi]
     4bb:	0b 00                	or     eax,DWORD PTR [eax]
     4bd:	00 0f                	add    BYTE PTR [edi],cl
     4bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4c2:	19 03                	sbb    DWORD PTR [ebx],eax
     4c4:	0e                   	push   cs
     4c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c9:	49                   	dec    ecx
     4ca:	13 11                	adc    edx,DWORD PTR [ecx]
     4cc:	01 12                	add    DWORD PTR [edx],edx
     4ce:	06                   	push   es
     4cf:	40                   	inc    eax
     4d0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     4d6:	00 00                	add    BYTE PTR [eax],al
     4d8:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4db:	03 08                	add    ecx,DWORD PTR [eax]
     4dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e1:	49                   	dec    ecx
     4e2:	13 02                	adc    eax,DWORD PTR [edx]
     4e4:	18 00                	sbb    BYTE PTR [eax],al
     4e6:	00 11                	add    BYTE PTR [ecx],dl
     4e8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4eb:	19 03                	sbb    DWORD PTR [ebx],eax
     4ed:	0e                   	push   cs
     4ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f2:	27                   	daa    
     4f3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4f6:	11 01                	adc    DWORD PTR [ecx],eax
     4f8:	12 06                	adc    al,BYTE PTR [esi]
     4fa:	40                   	inc    eax
     4fb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     501:	00 00                	add    BYTE PTR [eax],al
     503:	12 0a                	adc    cl,BYTE PTR [edx]
     505:	00 03                	add    BYTE PTR [ebx],al
     507:	0e                   	push   cs
     508:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     50a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     50c:	11 01                	adc    DWORD PTR [ecx],eax
     50e:	00 00                	add    BYTE PTR [eax],al
     510:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     513:	03 0e                	add    ecx,DWORD PTR [esi]
     515:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     517:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     519:	49                   	dec    ecx
     51a:	13 3f                	adc    edi,DWORD PTR [edi]
     51c:	19 02                	sbb    DWORD PTR [edx],eax
     51e:	18 00                	sbb    BYTE PTR [eax],al
     520:	00 00                	add    BYTE PTR [eax],al
     522:	01 11                	add    DWORD PTR [ecx],edx
     524:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     52a:	0e                   	push   cs
     52b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     52d:	11 01                	adc    DWORD PTR [ecx],eax
     52f:	12 06                	adc    al,BYTE PTR [esi]
     531:	10 17                	adc    BYTE PTR [edi],dl
     533:	00 00                	add    BYTE PTR [eax],al
     535:	02 16                	add    dl,BYTE PTR [esi]
     537:	00 03                	add    BYTE PTR [ebx],al
     539:	0e                   	push   cs
     53a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53e:	49                   	dec    ecx
     53f:	13 00                	adc    eax,DWORD PTR [eax]
     541:	00 03                	add    BYTE PTR [ebx],al
     543:	0f 00 0b             	str    WORD PTR [ebx]
     546:	0b 03                	or     eax,DWORD PTR [ebx]
     548:	0e                   	push   cs
     549:	49                   	dec    ecx
     54a:	13 00                	adc    eax,DWORD PTR [eax]
     54c:	00 04 24             	add    BYTE PTR [esp],al
     54f:	00 0b                	add    BYTE PTR [ebx],cl
     551:	0b 3e                	or     edi,DWORD PTR [esi]
     553:	0b 03                	or     eax,DWORD PTR [ebx]
     555:	0e                   	push   cs
     556:	00 00                	add    BYTE PTR [eax],al
     558:	05 24 00 0b 0b       	add    eax,0xb0b0024
     55d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     560:	08 00                	or     BYTE PTR [eax],al
     562:	00 06                	add    BYTE PTR [esi],al
     564:	0f 00 0b             	str    WORD PTR [ebx]
     567:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	07                   	pop    es
     56d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     571:	00 00                	add    BYTE PTR [eax],al
     573:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     576:	03 0e                	add    ecx,DWORD PTR [esi]
     578:	0b 0b                	or     ecx,DWORD PTR [ebx]
     57a:	49                   	dec    ecx
     57b:	13 3a                	adc    edi,DWORD PTR [edx]
     57d:	0b 3b                	or     edi,DWORD PTR [ebx]
     57f:	0b 01                	or     eax,DWORD PTR [ecx]
     581:	13 00                	adc    eax,DWORD PTR [eax]
     583:	00 09                	add    BYTE PTR [ecx],cl
     585:	28 00                	sub    BYTE PTR [eax],al
     587:	03 0e                	add    ecx,DWORD PTR [esi]
     589:	1c 0b                	sbb    al,0xb
     58b:	00 00                	add    BYTE PTR [eax],al
     58d:	0a 28                	or     ch,BYTE PTR [eax]
     58f:	00 03                	add    BYTE PTR [ebx],al
     591:	0e                   	push   cs
     592:	1c 05                	sbb    al,0x5
     594:	00 00                	add    BYTE PTR [eax],al
     596:	0b 0f                	or     ecx,DWORD PTR [edi]
     598:	00 0b                	add    BYTE PTR [ebx],cl
     59a:	0b 00                	or     eax,DWORD PTR [eax]
     59c:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     59f:	01 3f                	add    DWORD PTR [edi],edi
     5a1:	19 03                	sbb    DWORD PTR [ebx],eax
     5a3:	0e                   	push   cs
     5a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5a8:	27                   	daa    
     5a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ac:	11 01                	adc    DWORD PTR [ecx],eax
     5ae:	12 06                	adc    al,BYTE PTR [esi]
     5b0:	40                   	inc    eax
     5b1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	0d 05 00 03 0e       	or     eax,0xe030005
     5be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5c2:	49                   	dec    ecx
     5c3:	13 02                	adc    eax,DWORD PTR [edx]
     5c5:	18 00                	sbb    BYTE PTR [eax],al
     5c7:	00 0e                	add    BYTE PTR [esi],cl
     5c9:	34 00                	xor    al,0x0
     5cb:	03 0e                	add    ecx,DWORD PTR [esi]
     5cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d1:	49                   	dec    ecx
     5d2:	13 02                	adc    eax,DWORD PTR [edx]
     5d4:	18 00                	sbb    BYTE PTR [eax],al
     5d6:	00 0f                	add    BYTE PTR [edi],cl
     5d8:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     5db:	19 03                	sbb    DWORD PTR [ebx],eax
     5dd:	0e                   	push   cs
     5de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e2:	11 01                	adc    DWORD PTR [ecx],eax
     5e4:	12 06                	adc    al,BYTE PTR [esi]
     5e6:	40                   	inc    eax
     5e7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     5ed:	10 2e                	adc    BYTE PTR [esi],ch
     5ef:	00 3f                	add    BYTE PTR [edi],bh
     5f1:	19 03                	sbb    DWORD PTR [ebx],eax
     5f3:	0e                   	push   cs
     5f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5f8:	27                   	daa    
     5f9:	19 11                	sbb    DWORD PTR [ecx],edx
     5fb:	01 12                	add    DWORD PTR [edx],edx
     5fd:	06                   	push   es
     5fe:	40                   	inc    eax
     5ff:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     605:	11 2e                	adc    DWORD PTR [esi],ebp
     607:	01 3f                	add    DWORD PTR [edi],edi
     609:	19 03                	sbb    DWORD PTR [ebx],eax
     60b:	0e                   	push   cs
     60c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     60e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     610:	27                   	daa    
     611:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     614:	11 01                	adc    DWORD PTR [ecx],eax
     616:	12 06                	adc    al,BYTE PTR [esi]
     618:	40                   	inc    eax
     619:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     61f:	00 00                	add    BYTE PTR [eax],al
     621:	12 18                	adc    bl,BYTE PTR [eax]
     623:	00 00                	add    BYTE PTR [eax],al
     625:	00 13                	add    BYTE PTR [ebx],dl
     627:	0b 01                	or     eax,DWORD PTR [ecx]
     629:	11 01                	adc    DWORD PTR [ecx],eax
     62b:	12 06                	adc    al,BYTE PTR [esi]
     62d:	00 00                	add    BYTE PTR [eax],al
     62f:	14 34                	adc    al,0x34
     631:	00 03                	add    BYTE PTR [ebx],al
     633:	08 3a                	or     BYTE PTR [edx],bh
     635:	0b 3b                	or     edi,DWORD PTR [ebx]
     637:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     63a:	02 18                	add    bl,BYTE PTR [eax]
     63c:	00 00                	add    BYTE PTR [eax],al
     63e:	15 2e 01 3f 19       	adc    eax,0x193f012e
     643:	03 0e                	add    ecx,DWORD PTR [esi]
     645:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     647:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     649:	27                   	daa    
     64a:	19 11                	sbb    DWORD PTR [ecx],edx
     64c:	01 12                	add    DWORD PTR [edx],edx
     64e:	06                   	push   es
     64f:	40                   	inc    eax
     650:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     656:	00 00                	add    BYTE PTR [eax],al
     658:	16                   	push   ss
     659:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     65c:	19 03                	sbb    DWORD PTR [ebx],eax
     65e:	0e                   	push   cs
     65f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     661:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     663:	49                   	dec    ecx
     664:	13 11                	adc    edx,DWORD PTR [ecx]
     666:	01 12                	add    DWORD PTR [edx],edx
     668:	06                   	push   es
     669:	40                   	inc    eax
     66a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     670:	00 00                	add    BYTE PTR [eax],al
     672:	17                   	pop    ss
     673:	05 00 03 08 3a       	add    eax,0x3a080300
     678:	0b 3b                	or     edi,DWORD PTR [ebx]
     67a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     67d:	02 18                	add    bl,BYTE PTR [eax]
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	18 0b                	sbb    BYTE PTR [ebx],cl
     683:	01 11                	add    DWORD PTR [ecx],edx
     685:	01 12                	add    DWORD PTR [edx],edx
     687:	06                   	push   es
     688:	01 13                	add    DWORD PTR [ebx],edx
     68a:	00 00                	add    BYTE PTR [eax],al
     68c:	19 2e                	sbb    DWORD PTR [esi],ebp
     68e:	01 3f                	add    DWORD PTR [edi],edi
     690:	19 03                	sbb    DWORD PTR [ebx],eax
     692:	0e                   	push   cs
     693:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     695:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     69b:	11 01                	adc    DWORD PTR [ecx],eax
     69d:	12 06                	adc    al,BYTE PTR [esi]
     69f:	40                   	inc    eax
     6a0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     6a6:	00 00                	add    BYTE PTR [eax],al
     6a8:	1a 05 00 03 0e 3a    	sbb    al,BYTE PTR ds:0x3a0e0300
     6ae:	0b 3b                	or     edi,DWORD PTR [ebx]
     6b0:	05 49 13 02 18       	add    eax,0x18021349
     6b5:	00 00                	add    BYTE PTR [eax],al
     6b7:	1b 34 00             	sbb    esi,DWORD PTR [eax+eax*1]
     6ba:	03 0e                	add    ecx,DWORD PTR [esi]
     6bc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6be:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	1c 34                	sbb    al,0x34
     6c8:	00 03                	add    BYTE PTR [ebx],al
     6ca:	08 3a                	or     BYTE PTR [edx],bh
     6cc:	0b 3b                	or     edi,DWORD PTR [ebx]
     6ce:	05 49 13 02 18       	add    eax,0x18021349
     6d3:	00 00                	add    BYTE PTR [eax],al
     6d5:	1d 01 01 49 13       	sbb    eax,0x13490101
     6da:	01 13                	add    DWORD PTR [ebx],edx
     6dc:	00 00                	add    BYTE PTR [eax],al
     6de:	1e                   	push   ds
     6df:	21 00                	and    DWORD PTR [eax],eax
     6e1:	49                   	dec    ecx
     6e2:	13 2f                	adc    ebp,DWORD PTR [edi]
     6e4:	05 00 00 1f 34       	add    eax,0x341f0000
     6e9:	00 03                	add    BYTE PTR [ebx],al
     6eb:	0e                   	push   cs
     6ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6f0:	49                   	dec    ecx
     6f1:	13 3f                	adc    edi,DWORD PTR [edi]
     6f3:	19 02                	sbb    DWORD PTR [edx],eax
     6f5:	18 00                	sbb    BYTE PTR [eax],al
     6f7:	00 00                	add    BYTE PTR [eax],al
     6f9:	01 11                	add    DWORD PTR [ecx],edx
     6fb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     701:	0e                   	push   cs
     702:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     704:	11 01                	adc    DWORD PTR [ecx],eax
     706:	12 06                	adc    al,BYTE PTR [esi]
     708:	10 17                	adc    BYTE PTR [edi],dl
     70a:	00 00                	add    BYTE PTR [eax],al
     70c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     70f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     711:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     714:	0e                   	push   cs
     715:	00 00                	add    BYTE PTR [eax],al
     717:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     71a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     71c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     71f:	08 00                	or     BYTE PTR [eax],al
     721:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     724:	00 03                	add    BYTE PTR [ebx],al
     726:	0e                   	push   cs
     727:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     729:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     72b:	49                   	dec    ecx
     72c:	13 00                	adc    eax,DWORD PTR [eax]
     72e:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     734:	0b 0b                	or     ecx,DWORD PTR [ebx]
     736:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     738:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     73a:	01 13                	add    DWORD PTR [ebx],edx
     73c:	00 00                	add    BYTE PTR [eax],al
     73e:	06                   	push   es
     73f:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     744:	0b 3b                	or     edi,DWORD PTR [ebx]
     746:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     749:	38 0b                	cmp    BYTE PTR [ebx],cl
     74b:	00 00                	add    BYTE PTR [eax],al
     74d:	07                   	pop    es
     74e:	0d 00 03 08 3a       	or     eax,0x3a080300
     753:	0b 3b                	or     edi,DWORD PTR [ebx]
     755:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     758:	38 0b                	cmp    BYTE PTR [ebx],cl
     75a:	00 00                	add    BYTE PTR [eax],al
     75c:	08 0f                	or     BYTE PTR [edi],cl
     75e:	00 0b                	add    BYTE PTR [ebx],cl
     760:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     763:	00 00                	add    BYTE PTR [eax],al
     765:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     768:	03 0e                	add    ecx,DWORD PTR [esi]
     76a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     76c:	49                   	dec    ecx
     76d:	13 3a                	adc    edi,DWORD PTR [edx]
     76f:	0b 3b                	or     edi,DWORD PTR [ebx]
     771:	0b 01                	or     eax,DWORD PTR [ecx]
     773:	13 00                	adc    eax,DWORD PTR [eax]
     775:	00 0a                	add    BYTE PTR [edx],cl
     777:	28 00                	sub    BYTE PTR [eax],al
     779:	03 0e                	add    ecx,DWORD PTR [esi]
     77b:	1c 0b                	sbb    al,0xb
     77d:	00 00                	add    BYTE PTR [eax],al
     77f:	0b 28                	or     ebp,DWORD PTR [eax]
     781:	00 03                	add    BYTE PTR [ebx],al
     783:	0e                   	push   cs
     784:	1c 05                	sbb    al,0x5
     786:	00 00                	add    BYTE PTR [eax],al
     788:	0c 0f                	or     al,0xf
     78a:	00 0b                	add    BYTE PTR [ebx],cl
     78c:	0b 00                	or     eax,DWORD PTR [eax]
     78e:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     794:	03 0e                	add    ecx,DWORD PTR [esi]
     796:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     798:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     79a:	11 01                	adc    DWORD PTR [ecx],eax
     79c:	12 06                	adc    al,BYTE PTR [esi]
     79e:	40                   	inc    eax
     79f:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7a5:	0e                   	push   cs
     7a6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     7a9:	19 03                	sbb    DWORD PTR [ebx],eax
     7ab:	0e                   	push   cs
     7ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7b0:	27                   	daa    
     7b1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7b4:	11 01                	adc    DWORD PTR [ecx],eax
     7b6:	12 06                	adc    al,BYTE PTR [esi]
     7b8:	40                   	inc    eax
     7b9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7bf:	00 00                	add    BYTE PTR [eax],al
     7c1:	0f 05                	syscall 
     7c3:	00 03                	add    BYTE PTR [ebx],al
     7c5:	0e                   	push   cs
     7c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ca:	49                   	dec    ecx
     7cb:	13 02                	adc    eax,DWORD PTR [edx]
     7cd:	18 00                	sbb    BYTE PTR [eax],al
     7cf:	00 10                	add    BYTE PTR [eax],dl
     7d1:	34 00                	xor    al,0x0
     7d3:	03 0e                	add    ecx,DWORD PTR [esi]
     7d5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7d7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7d9:	49                   	dec    ecx
     7da:	13 02                	adc    eax,DWORD PTR [edx]
     7dc:	18 00                	sbb    BYTE PTR [eax],al
     7de:	00 11                	add    BYTE PTR [ecx],dl
     7e0:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     7e3:	19 03                	sbb    DWORD PTR [ebx],eax
     7e5:	0e                   	push   cs
     7e6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7e8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ea:	27                   	daa    
     7eb:	19 11                	sbb    DWORD PTR [ecx],edx
     7ed:	01 12                	add    DWORD PTR [edx],edx
     7ef:	06                   	push   es
     7f0:	40                   	inc    eax
     7f1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7f7:	00 00                	add    BYTE PTR [eax],al
     7f9:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     7fc:	03 08                	add    ecx,DWORD PTR [eax]
     7fe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     800:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     802:	49                   	dec    ecx
     803:	13 02                	adc    eax,DWORD PTR [edx]
     805:	18 00                	sbb    BYTE PTR [eax],al
     807:	00 13                	add    BYTE PTR [ebx],dl
     809:	0a 00                	or     al,BYTE PTR [eax]
     80b:	03 0e                	add    ecx,DWORD PTR [esi]
     80d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     80f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     811:	11 01                	adc    DWORD PTR [ecx],eax
     813:	00 00                	add    BYTE PTR [eax],al
     815:	14 2e                	adc    al,0x2e
     817:	01 3f                	add    DWORD PTR [edi],edi
     819:	19 03                	sbb    DWORD PTR [ebx],eax
     81b:	0e                   	push   cs
     81c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     81e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     820:	27                   	daa    
     821:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     824:	11 01                	adc    DWORD PTR [ecx],eax
     826:	12 06                	adc    al,BYTE PTR [esi]
     828:	40                   	inc    eax
     829:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     82f:	00 00                	add    BYTE PTR [eax],al
     831:	15 2e 01 3f 19       	adc    eax,0x193f012e
     836:	03 0e                	add    ecx,DWORD PTR [esi]
     838:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     83a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     83c:	27                   	daa    
     83d:	19 11                	sbb    DWORD PTR [ecx],edx
     83f:	01 12                	add    DWORD PTR [edx],edx
     841:	06                   	push   es
     842:	40                   	inc    eax
     843:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     849:	00 00                	add    BYTE PTR [eax],al
     84b:	16                   	push   ss
     84c:	34 00                	xor    al,0x0
     84e:	03 0e                	add    ecx,DWORD PTR [esi]
     850:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     852:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     854:	49                   	dec    ecx
     855:	13 3f                	adc    edi,DWORD PTR [edi]
     857:	19 02                	sbb    DWORD PTR [edx],eax
     859:	18 00                	sbb    BYTE PTR [eax],al
     85b:	00 00                	add    BYTE PTR [eax],al
     85d:	01 11                	add    DWORD PTR [ecx],edx
     85f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     865:	0e                   	push   cs
     866:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     868:	11 01                	adc    DWORD PTR [ecx],eax
     86a:	12 06                	adc    al,BYTE PTR [esi]
     86c:	10 17                	adc    BYTE PTR [edi],dl
     86e:	00 00                	add    BYTE PTR [eax],al
     870:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     873:	0b 0b                	or     ecx,DWORD PTR [ebx]
     875:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     878:	0e                   	push   cs
     879:	00 00                	add    BYTE PTR [eax],al
     87b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     87e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     880:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     883:	08 00                	or     BYTE PTR [eax],al
     885:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     888:	00 0b                	add    BYTE PTR [ebx],cl
     88a:	0b 00                	or     eax,DWORD PTR [eax]
     88c:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     892:	49                   	dec    ecx
     893:	13 00                	adc    eax,DWORD PTR [eax]
     895:	00 06                	add    BYTE PTR [esi],al
     897:	16                   	push   ss
     898:	00 03                	add    BYTE PTR [ebx],al
     89a:	0e                   	push   cs
     89b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     89d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     89f:	49                   	dec    ecx
     8a0:	13 00                	adc    eax,DWORD PTR [eax]
     8a2:	00 07                	add    BYTE PTR [edi],al
     8a4:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     8a8:	00 00                	add    BYTE PTR [eax],al
     8aa:	08 2e                	or     BYTE PTR [esi],ch
     8ac:	01 3f                	add    DWORD PTR [edi],edi
     8ae:	19 03                	sbb    DWORD PTR [ebx],eax
     8b0:	0e                   	push   cs
     8b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8b5:	27                   	daa    
     8b6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     8b9:	11 01                	adc    DWORD PTR [ecx],eax
     8bb:	12 06                	adc    al,BYTE PTR [esi]
     8bd:	40                   	inc    eax
     8be:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     8c4:	00 00                	add    BYTE PTR [eax],al
     8c6:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     8cc:	0b 3b                	or     edi,DWORD PTR [ebx]
     8ce:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8d1:	02 18                	add    bl,BYTE PTR [eax]
     8d3:	00 00                	add    BYTE PTR [eax],al
     8d5:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     8db:	0b 3b                	or     edi,DWORD PTR [ebx]
     8dd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8e0:	02 18                	add    bl,BYTE PTR [eax]
     8e2:	00 00                	add    BYTE PTR [eax],al
     8e4:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     8e7:	03 08                	add    ecx,DWORD PTR [eax]
     8e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8ed:	49                   	dec    ecx
     8ee:	13 02                	adc    eax,DWORD PTR [edx]
     8f0:	18 00                	sbb    BYTE PTR [eax],al
     8f2:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     8f5:	01 11                	add    DWORD PTR [ecx],edx
     8f7:	01 12                	add    DWORD PTR [edx],edx
     8f9:	06                   	push   es
     8fa:	01 13                	add    DWORD PTR [ebx],edx
     8fc:	00 00                	add    BYTE PTR [eax],al
     8fe:	0d 0b 01 11 01       	or     eax,0x111010b
     903:	12 06                	adc    al,BYTE PTR [esi]
     905:	00 00                	add    BYTE PTR [eax],al
     907:	0e                   	push   cs
     908:	26 00 00             	add    BYTE PTR es:[eax],al
     90b:	00 0f                	add    BYTE PTR [edi],cl
     90d:	34 00                	xor    al,0x0
     90f:	03 0e                	add    ecx,DWORD PTR [esi]
     911:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     913:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     915:	49                   	dec    ecx
     916:	13 3f                	adc    edi,DWORD PTR [edi]
     918:	19 02                	sbb    DWORD PTR [edx],eax
     91a:	18 00                	sbb    BYTE PTR [eax],al
     91c:	00 00                	add    BYTE PTR [eax],al
     91e:	01 11                	add    DWORD PTR [ecx],edx
     920:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     926:	0e                   	push   cs
     927:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     929:	11 01                	adc    DWORD PTR [ecx],eax
     92b:	12 06                	adc    al,BYTE PTR [esi]
     92d:	10 17                	adc    BYTE PTR [edi],dl
     92f:	00 00                	add    BYTE PTR [eax],al
     931:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     934:	0b 0b                	or     ecx,DWORD PTR [ebx]
     936:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     939:	0e                   	push   cs
     93a:	00 00                	add    BYTE PTR [eax],al
     93c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     93f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     941:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     944:	08 00                	or     BYTE PTR [eax],al
     946:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     949:	00 03                	add    BYTE PTR [ebx],al
     94b:	0e                   	push   cs
     94c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     94e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     950:	49                   	dec    ecx
     951:	13 00                	adc    eax,DWORD PTR [eax]
     953:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     959:	00 00                	add    BYTE PTR [eax],al
     95b:	06                   	push   es
     95c:	0f 00 0b             	str    WORD PTR [ebx]
     95f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     962:	00 00                	add    BYTE PTR [eax],al
     964:	07                   	pop    es
     965:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     968:	19 03                	sbb    DWORD PTR [ebx],eax
     96a:	0e                   	push   cs
     96b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     96d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     96f:	27                   	daa    
     970:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     973:	11 01                	adc    DWORD PTR [ecx],eax
     975:	12 06                	adc    al,BYTE PTR [esi]
     977:	40                   	inc    eax
     978:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     97e:	00 00                	add    BYTE PTR [eax],al
     980:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     986:	0b 3b                	or     edi,DWORD PTR [ebx]
     988:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     98b:	02 18                	add    bl,BYTE PTR [eax]
     98d:	00 00                	add    BYTE PTR [eax],al
     98f:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     992:	03 08                	add    ecx,DWORD PTR [eax]
     994:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     996:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     998:	49                   	dec    ecx
     999:	13 02                	adc    eax,DWORD PTR [edx]
     99b:	18 00                	sbb    BYTE PTR [eax],al
     99d:	00 0a                	add    BYTE PTR [edx],cl
     99f:	34 00                	xor    al,0x0
     9a1:	03 0e                	add    ecx,DWORD PTR [esi]
     9a3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9a5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9a7:	49                   	dec    ecx
     9a8:	13 02                	adc    eax,DWORD PTR [edx]
     9aa:	18 00                	sbb    BYTE PTR [eax],al
     9ac:	00 0b                	add    BYTE PTR [ebx],cl
     9ae:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9b1:	19 03                	sbb    DWORD PTR [ebx],eax
     9b3:	0e                   	push   cs
     9b4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9b6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9b8:	27                   	daa    
     9b9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9bc:	11 01                	adc    DWORD PTR [ecx],eax
     9be:	12 06                	adc    al,BYTE PTR [esi]
     9c0:	40                   	inc    eax
     9c1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     9c7:	00 00                	add    BYTE PTR [eax],al
     9c9:	0c 34                	or     al,0x34
     9cb:	00 03                	add    BYTE PTR [ebx],al
     9cd:	0e                   	push   cs
     9ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9d0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9d2:	49                   	dec    ecx
     9d3:	13 3f                	adc    edi,DWORD PTR [edi]
     9d5:	19 02                	sbb    DWORD PTR [edx],eax
     9d7:	18 00                	sbb    BYTE PTR [eax],al
     9d9:	00 00                	add    BYTE PTR [eax],al
     9db:	01 11                	add    DWORD PTR [ecx],edx
     9dd:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9e3:	0e                   	push   cs
     9e4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9e6:	10 17                	adc    BYTE PTR [edi],dl
     9e8:	00 00                	add    BYTE PTR [eax],al
     9ea:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     9ed:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9ef:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9f2:	0e                   	push   cs
     9f3:	00 00                	add    BYTE PTR [eax],al
     9f5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     9f8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9fa:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9fd:	08 00                	or     BYTE PTR [eax],al
     9ff:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a02:	00 03                	add    BYTE PTR [ebx],al
     a04:	0e                   	push   cs
     a05:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a07:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a09:	49                   	dec    ecx
     a0a:	13 00                	adc    eax,DWORD PTR [eax]
     a0c:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a12:	49                   	dec    ecx
     a13:	13 00                	adc    eax,DWORD PTR [eax]
     a15:	00 06                	add    BYTE PTR [esi],al
     a17:	34 00                	xor    al,0x0
     a19:	03 0e                	add    ecx,DWORD PTR [esi]
     a1b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a1d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a1f:	49                   	dec    ecx
     a20:	13 3f                	adc    edi,DWORD PTR [edi]
     a22:	19 02                	sbb    DWORD PTR [edx],eax
     a24:	18 00                	sbb    BYTE PTR [eax],al
     a26:	00 00                	add    BYTE PTR [eax],al
     a28:	01 11                	add    DWORD PTR [ecx],edx
     a2a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a30:	0e                   	push   cs
     a31:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a33:	11 01                	adc    DWORD PTR [ecx],eax
     a35:	12 06                	adc    al,BYTE PTR [esi]
     a37:	10 17                	adc    BYTE PTR [edi],dl
     a39:	00 00                	add    BYTE PTR [eax],al
     a3b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a3e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a40:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a43:	0e                   	push   cs
     a44:	00 00                	add    BYTE PTR [eax],al
     a46:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a49:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a4b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a4e:	08 00                	or     BYTE PTR [eax],al
     a50:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a53:	00 03                	add    BYTE PTR [ebx],al
     a55:	0e                   	push   cs
     a56:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a58:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a5a:	49                   	dec    ecx
     a5b:	13 00                	adc    eax,DWORD PTR [eax]
     a5d:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     a63:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a65:	49                   	dec    ecx
     a66:	13 3a                	adc    edi,DWORD PTR [edx]
     a68:	0b 3b                	or     edi,DWORD PTR [ebx]
     a6a:	0b 01                	or     eax,DWORD PTR [ecx]
     a6c:	13 00                	adc    eax,DWORD PTR [eax]
     a6e:	00 06                	add    BYTE PTR [esi],al
     a70:	28 00                	sub    BYTE PTR [eax],al
     a72:	03 0e                	add    ecx,DWORD PTR [esi]
     a74:	1c 0b                	sbb    al,0xb
     a76:	00 00                	add    BYTE PTR [eax],al
     a78:	07                   	pop    es
     a79:	28 00                	sub    BYTE PTR [eax],al
     a7b:	03 0e                	add    ecx,DWORD PTR [esi]
     a7d:	1c 05                	sbb    al,0x5
     a7f:	00 00                	add    BYTE PTR [eax],al
     a81:	08 0f                	or     BYTE PTR [edi],cl
     a83:	00 0b                	add    BYTE PTR [ebx],cl
     a85:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a88:	00 00                	add    BYTE PTR [eax],al
     a8a:	09 2e                	or     DWORD PTR [esi],ebp
     a8c:	01 3f                	add    DWORD PTR [edi],edi
     a8e:	19 03                	sbb    DWORD PTR [ebx],eax
     a90:	0e                   	push   cs
     a91:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a93:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a95:	27                   	daa    
     a96:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a99:	11 01                	adc    DWORD PTR [ecx],eax
     a9b:	12 06                	adc    al,BYTE PTR [esi]
     a9d:	40                   	inc    eax
     a9e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     aa4:	00 00                	add    BYTE PTR [eax],al
     aa6:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     aac:	0b 3b                	or     edi,DWORD PTR [ebx]
     aae:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ab1:	02 18                	add    bl,BYTE PTR [eax]
     ab3:	00 00                	add    BYTE PTR [eax],al
     ab5:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     ab8:	03 0e                	add    ecx,DWORD PTR [esi]
     aba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     abc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     abe:	49                   	dec    ecx
     abf:	13 3f                	adc    edi,DWORD PTR [edi]
     ac1:	19 02                	sbb    DWORD PTR [edx],eax
     ac3:	18 00                	sbb    BYTE PTR [eax],al
     ac5:	00 00                	add    BYTE PTR [eax],al
     ac7:	01 11                	add    DWORD PTR [ecx],edx
     ac9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     acf:	0e                   	push   cs
     ad0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ad2:	11 01                	adc    DWORD PTR [ecx],eax
     ad4:	12 06                	adc    al,BYTE PTR [esi]
     ad6:	10 17                	adc    BYTE PTR [edi],dl
     ad8:	00 00                	add    BYTE PTR [eax],al
     ada:	02 16                	add    dl,BYTE PTR [esi]
     adc:	00 03                	add    BYTE PTR [ebx],al
     ade:	0e                   	push   cs
     adf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ae1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ae3:	49                   	dec    ecx
     ae4:	13 00                	adc    eax,DWORD PTR [eax]
     ae6:	00 03                	add    BYTE PTR [ebx],al
     ae8:	0f 00 0b             	str    WORD PTR [ebx]
     aeb:	0b 03                	or     eax,DWORD PTR [ebx]
     aed:	0e                   	push   cs
     aee:	49                   	dec    ecx
     aef:	13 00                	adc    eax,DWORD PTR [eax]
     af1:	00 04 24             	add    BYTE PTR [esp],al
     af4:	00 0b                	add    BYTE PTR [ebx],cl
     af6:	0b 3e                	or     edi,DWORD PTR [esi]
     af8:	0b 03                	or     eax,DWORD PTR [ebx]
     afa:	0e                   	push   cs
     afb:	00 00                	add    BYTE PTR [eax],al
     afd:	05 24 00 0b 0b       	add    eax,0xb0b0024
     b02:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b05:	08 00                	or     BYTE PTR [eax],al
     b07:	00 06                	add    BYTE PTR [esi],al
     b09:	0f 00 0b             	str    WORD PTR [ebx]
     b0c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b0f:	00 00                	add    BYTE PTR [eax],al
     b11:	07                   	pop    es
     b12:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b16:	00 00                	add    BYTE PTR [eax],al
     b18:	08 2e                	or     BYTE PTR [esi],ch
     b1a:	01 03                	add    DWORD PTR [ebx],eax
     b1c:	0e                   	push   cs
     b1d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b1f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b21:	27                   	daa    
     b22:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b25:	11 01                	adc    DWORD PTR [ecx],eax
     b27:	12 06                	adc    al,BYTE PTR [esi]
     b29:	40                   	inc    eax
     b2a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b30:	00 00                	add    BYTE PTR [eax],al
     b32:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     b38:	0b 3b                	or     edi,DWORD PTR [ebx]
     b3a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b3d:	02 18                	add    bl,BYTE PTR [eax]
     b3f:	00 00                	add    BYTE PTR [eax],al
     b41:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     b44:	03 08                	add    ecx,DWORD PTR [eax]
     b46:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b48:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b4a:	49                   	dec    ecx
     b4b:	13 02                	adc    eax,DWORD PTR [edx]
     b4d:	18 00                	sbb    BYTE PTR [eax],al
     b4f:	00 0b                	add    BYTE PTR [ebx],cl
     b51:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     b56:	0b 3b                	or     edi,DWORD PTR [ebx]
     b58:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b5b:	02 18                	add    bl,BYTE PTR [eax]
     b5d:	00 00                	add    BYTE PTR [eax],al
     b5f:	0c 34                	or     al,0x34
     b61:	00 03                	add    BYTE PTR [ebx],al
     b63:	0e                   	push   cs
     b64:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b66:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b68:	49                   	dec    ecx
     b69:	13 02                	adc    eax,DWORD PTR [edx]
     b6b:	18 00                	sbb    BYTE PTR [eax],al
     b6d:	00 0d 0b 01 11 01    	add    BYTE PTR ds:0x111010b,cl
     b73:	12 06                	adc    al,BYTE PTR [esi]
     b75:	00 00                	add    BYTE PTR [eax],al
     b77:	0e                   	push   cs
     b78:	01 01                	add    DWORD PTR [ecx],eax
     b7a:	49                   	dec    ecx
     b7b:	13 01                	adc    eax,DWORD PTR [ecx]
     b7d:	13 00                	adc    eax,DWORD PTR [eax]
     b7f:	00 0f                	add    BYTE PTR [edi],cl
     b81:	21 00                	and    DWORD PTR [eax],eax
     b83:	49                   	dec    ecx
     b84:	13 2f                	adc    ebp,DWORD PTR [edi]
     b86:	0b 00                	or     eax,DWORD PTR [eax]
     b88:	00 10                	add    BYTE PTR [eax],dl
     b8a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b8d:	19 03                	sbb    DWORD PTR [ebx],eax
     b8f:	0e                   	push   cs
     b90:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b92:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b94:	27                   	daa    
     b95:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b98:	11 01                	adc    DWORD PTR [ecx],eax
     b9a:	12 06                	adc    al,BYTE PTR [esi]
     b9c:	40                   	inc    eax
     b9d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ba3:	00 00                	add    BYTE PTR [eax],al
     ba5:	11 0a                	adc    DWORD PTR [edx],ecx
     ba7:	00 03                	add    BYTE PTR [ebx],al
     ba9:	0e                   	push   cs
     baa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bae:	11 01                	adc    DWORD PTR [ecx],eax
     bb0:	00 00                	add    BYTE PTR [eax],al
     bb2:	12 0b                	adc    cl,BYTE PTR [ebx]
     bb4:	01 11                	add    DWORD PTR [ecx],edx
     bb6:	01 12                	add    DWORD PTR [edx],edx
     bb8:	06                   	push   es
     bb9:	01 13                	add    DWORD PTR [ebx],edx
     bbb:	00 00                	add    BYTE PTR [eax],al
     bbd:	13 2e                	adc    ebp,DWORD PTR [esi]
     bbf:	01 3f                	add    DWORD PTR [edi],edi
     bc1:	19 03                	sbb    DWORD PTR [ebx],eax
     bc3:	0e                   	push   cs
     bc4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bc6:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     bcc:	11 01                	adc    DWORD PTR [ecx],eax
     bce:	12 06                	adc    al,BYTE PTR [esi]
     bd0:	40                   	inc    eax
     bd1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bd7:	00 00                	add    BYTE PTR [eax],al
     bd9:	14 05                	adc    al,0x5
     bdb:	00 03                	add    BYTE PTR [ebx],al
     bdd:	08 3a                	or     BYTE PTR [edx],bh
     bdf:	0b 3b                	or     edi,DWORD PTR [ebx]
     be1:	05 49 13 02 18       	add    eax,0x18021349
     be6:	00 00                	add    BYTE PTR [eax],al
     be8:	15 18 00 00 00       	adc    eax,0x18
     bed:	16                   	push   ss
     bee:	34 00                	xor    al,0x0
     bf0:	03 0e                	add    ecx,DWORD PTR [esi]
     bf2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bf4:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     bfa:	00 00                	add    BYTE PTR [eax],al
     bfc:	17                   	pop    ss
     bfd:	34 00                	xor    al,0x0
     bff:	03 08                	add    ecx,DWORD PTR [eax]
     c01:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c03:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     c09:	00 00                	add    BYTE PTR [eax],al
     c0b:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     c0e:	03 0e                	add    ecx,DWORD PTR [esi]
     c10:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c12:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c14:	49                   	dec    ecx
     c15:	13 3f                	adc    edi,DWORD PTR [edi]
     c17:	19 02                	sbb    DWORD PTR [edx],eax
     c19:	18 00                	sbb    BYTE PTR [eax],al
     c1b:	00 00                	add    BYTE PTR [eax],al
     c1d:	01 11                	add    DWORD PTR [ecx],edx
     c1f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c25:	0e                   	push   cs
     c26:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c28:	11 01                	adc    DWORD PTR [ecx],eax
     c2a:	12 06                	adc    al,BYTE PTR [esi]
     c2c:	10 17                	adc    BYTE PTR [edi],dl
     c2e:	00 00                	add    BYTE PTR [eax],al
     c30:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c33:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c35:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c38:	0e                   	push   cs
     c39:	00 00                	add    BYTE PTR [eax],al
     c3b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c3e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c40:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c43:	08 00                	or     BYTE PTR [eax],al
     c45:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c48:	00 03                	add    BYTE PTR [ebx],al
     c4a:	0e                   	push   cs
     c4b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c4d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c4f:	49                   	dec    ecx
     c50:	13 00                	adc    eax,DWORD PTR [eax]
     c52:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c58:	49                   	dec    ecx
     c59:	13 00                	adc    eax,DWORD PTR [eax]
     c5b:	00 06                	add    BYTE PTR [esi],al
     c5d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     c61:	00 00                	add    BYTE PTR [eax],al
     c63:	07                   	pop    es
     c64:	0f 00 0b             	str    WORD PTR [ebx]
     c67:	0b 00                	or     eax,DWORD PTR [eax]
     c69:	00 08                	add    BYTE PTR [eax],cl
     c6b:	13 01                	adc    eax,DWORD PTR [ecx]
     c6d:	03 0e                	add    ecx,DWORD PTR [esi]
     c6f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c71:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c73:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c75:	01 13                	add    DWORD PTR [ebx],edx
     c77:	00 00                	add    BYTE PTR [eax],al
     c79:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     c7f:	0b 3b                	or     edi,DWORD PTR [ebx]
     c81:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c84:	38 0b                	cmp    BYTE PTR [ebx],cl
     c86:	00 00                	add    BYTE PTR [eax],al
     c88:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     c8e:	13 01                	adc    eax,DWORD PTR [ecx]
     c90:	13 00                	adc    eax,DWORD PTR [eax]
     c92:	00 0b                	add    BYTE PTR [ebx],cl
     c94:	05 00 49 13 00       	add    eax,0x134900
     c99:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     c9c:	01 3f                	add    DWORD PTR [edi],edi
     c9e:	19 03                	sbb    DWORD PTR [ebx],eax
     ca0:	0e                   	push   cs
     ca1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ca3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ca5:	11 01                	adc    DWORD PTR [ecx],eax
     ca7:	12 06                	adc    al,BYTE PTR [esi]
     ca9:	40                   	inc    eax
     caa:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     cb0:	00 00                	add    BYTE PTR [eax],al
     cb2:	0d 34 00 03 0e       	or     eax,0xe030034
     cb7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cb9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cbb:	49                   	dec    ecx
     cbc:	13 02                	adc    eax,DWORD PTR [edx]
     cbe:	18 00                	sbb    BYTE PTR [eax],al
     cc0:	00 0e                	add    BYTE PTR [esi],cl
     cc2:	01 01                	add    DWORD PTR [ecx],eax
     cc4:	49                   	dec    ecx
     cc5:	13 01                	adc    eax,DWORD PTR [ecx]
     cc7:	13 00                	adc    eax,DWORD PTR [eax]
     cc9:	00 0f                	add    BYTE PTR [edi],cl
     ccb:	21 00                	and    DWORD PTR [eax],eax
     ccd:	49                   	dec    ecx
     cce:	13 2f                	adc    ebp,DWORD PTR [edi]
     cd0:	0b 00                	or     eax,DWORD PTR [eax]
     cd2:	00 10                	add    BYTE PTR [eax],dl
     cd4:	34 00                	xor    al,0x0
     cd6:	03 0e                	add    ecx,DWORD PTR [esi]
     cd8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cda:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cdc:	49                   	dec    ecx
     cdd:	13 3f                	adc    edi,DWORD PTR [edi]
     cdf:	19 02                	sbb    DWORD PTR [edx],eax
     ce1:	18 00                	sbb    BYTE PTR [eax],al
     ce3:	00 00                	add    BYTE PTR [eax],al
     ce5:	01 11                	add    DWORD PTR [ecx],edx
     ce7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ced:	0e                   	push   cs
     cee:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     cf0:	11 01                	adc    DWORD PTR [ecx],eax
     cf2:	12 06                	adc    al,BYTE PTR [esi]
     cf4:	10 17                	adc    BYTE PTR [edi],dl
     cf6:	00 00                	add    BYTE PTR [eax],al
     cf8:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     cfb:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cfd:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d00:	0e                   	push   cs
     d01:	00 00                	add    BYTE PTR [eax],al
     d03:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d06:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d08:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d0b:	08 00                	or     BYTE PTR [eax],al
     d0d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     d10:	00 03                	add    BYTE PTR [ebx],al
     d12:	0e                   	push   cs
     d13:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d15:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d17:	49                   	dec    ecx
     d18:	13 00                	adc    eax,DWORD PTR [eax]
     d1a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     d20:	49                   	dec    ecx
     d21:	13 00                	adc    eax,DWORD PTR [eax]
     d23:	00 06                	add    BYTE PTR [esi],al
     d25:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     d29:	00 00                	add    BYTE PTR [eax],al
     d2b:	07                   	pop    es
     d2c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d2f:	19 03                	sbb    DWORD PTR [ebx],eax
     d31:	0e                   	push   cs
     d32:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d34:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d36:	27                   	daa    
     d37:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d3a:	11 01                	adc    DWORD PTR [ecx],eax
     d3c:	12 06                	adc    al,BYTE PTR [esi]
     d3e:	40                   	inc    eax
     d3f:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d45:	00 00                	add    BYTE PTR [eax],al
     d47:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     d4d:	0b 3b                	or     edi,DWORD PTR [ebx]
     d4f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d52:	02 18                	add    bl,BYTE PTR [eax]
     d54:	00 00                	add    BYTE PTR [eax],al
     d56:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     d5c:	0b 3b                	or     edi,DWORD PTR [ebx]
     d5e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d61:	02 18                	add    bl,BYTE PTR [eax]
     d63:	00 00                	add    BYTE PTR [eax],al
     d65:	0a 2e                	or     ch,BYTE PTR [esi]
     d67:	01 3f                	add    DWORD PTR [edi],edi
     d69:	19 03                	sbb    DWORD PTR [ebx],eax
     d6b:	0e                   	push   cs
     d6c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d6e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d70:	27                   	daa    
     d71:	19 11                	sbb    DWORD PTR [ecx],edx
     d73:	01 12                	add    DWORD PTR [edx],edx
     d75:	06                   	push   es
     d76:	40                   	inc    eax
     d77:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d7d:	00 00                	add    BYTE PTR [eax],al
     d7f:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d82:	03 08                	add    ecx,DWORD PTR [eax]
     d84:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d86:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d88:	49                   	dec    ecx
     d89:	13 02                	adc    eax,DWORD PTR [edx]
     d8b:	18 00                	sbb    BYTE PTR [eax],al
     d8d:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     d90:	00 03                	add    BYTE PTR [ebx],al
     d92:	0e                   	push   cs
     d93:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d95:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d97:	49                   	dec    ecx
     d98:	13 3f                	adc    edi,DWORD PTR [edi]
     d9a:	19 02                	sbb    DWORD PTR [edx],eax
     d9c:	18 00                	sbb    BYTE PTR [eax],al
     d9e:	00 00                	add    BYTE PTR [eax],al
     da0:	01 11                	add    DWORD PTR [ecx],edx
     da2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     da8:	0e                   	push   cs
     da9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     dab:	11 01                	adc    DWORD PTR [ecx],eax
     dad:	12 06                	adc    al,BYTE PTR [esi]
     daf:	10 17                	adc    BYTE PTR [edi],dl
     db1:	00 00                	add    BYTE PTR [eax],al
     db3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     db6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     db8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dbb:	0e                   	push   cs
     dbc:	00 00                	add    BYTE PTR [eax],al
     dbe:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     dc1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     dc3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dc6:	08 00                	or     BYTE PTR [eax],al
     dc8:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     dcb:	00 03                	add    BYTE PTR [ebx],al
     dcd:	0e                   	push   cs
     dce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dd0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dd2:	49                   	dec    ecx
     dd3:	13 00                	adc    eax,DWORD PTR [eax]
     dd5:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     ddb:	49                   	dec    ecx
     ddc:	13 00                	adc    eax,DWORD PTR [eax]
     dde:	00 06                	add    BYTE PTR [esi],al
     de0:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     de4:	00 00                	add    BYTE PTR [eax],al
     de6:	07                   	pop    es
     de7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     dea:	19 03                	sbb    DWORD PTR [ebx],eax
     dec:	0e                   	push   cs
     ded:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     def:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     df1:	27                   	daa    
     df2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     df5:	11 01                	adc    DWORD PTR [ecx],eax
     df7:	12 06                	adc    al,BYTE PTR [esi]
     df9:	40                   	inc    eax
     dfa:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e00:	00 00                	add    BYTE PTR [eax],al
     e02:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     e08:	0b 3b                	or     edi,DWORD PTR [ebx]
     e0a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e0d:	02 18                	add    bl,BYTE PTR [eax]
     e0f:	00 00                	add    BYTE PTR [eax],al
     e11:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     e14:	03 08                	add    ecx,DWORD PTR [eax]
     e16:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e18:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e1a:	49                   	dec    ecx
     e1b:	13 02                	adc    eax,DWORD PTR [edx]
     e1d:	18 00                	sbb    BYTE PTR [eax],al
     e1f:	00 0a                	add    BYTE PTR [edx],cl
     e21:	34 00                	xor    al,0x0
     e23:	03 0e                	add    ecx,DWORD PTR [esi]
     e25:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e27:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e29:	49                   	dec    ecx
     e2a:	13 3f                	adc    edi,DWORD PTR [edi]
     e2c:	19 02                	sbb    DWORD PTR [edx],eax
     e2e:	18 00                	sbb    BYTE PTR [eax],al
     e30:	00 00                	add    BYTE PTR [eax],al
     e32:	01 11                	add    DWORD PTR [ecx],edx
     e34:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e3a:	0e                   	push   cs
     e3b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e3d:	11 01                	adc    DWORD PTR [ecx],eax
     e3f:	12 06                	adc    al,BYTE PTR [esi]
     e41:	10 17                	adc    BYTE PTR [edi],dl
     e43:	00 00                	add    BYTE PTR [eax],al
     e45:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e48:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e4a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e4d:	0e                   	push   cs
     e4e:	00 00                	add    BYTE PTR [eax],al
     e50:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     e53:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e55:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e58:	08 00                	or     BYTE PTR [eax],al
     e5a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     e5d:	00 03                	add    BYTE PTR [ebx],al
     e5f:	0e                   	push   cs
     e60:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e62:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e64:	49                   	dec    ecx
     e65:	13 00                	adc    eax,DWORD PTR [eax]
     e67:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     e6d:	49                   	dec    ecx
     e6e:	13 00                	adc    eax,DWORD PTR [eax]
     e70:	00 06                	add    BYTE PTR [esi],al
     e72:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     e76:	00 00                	add    BYTE PTR [eax],al
     e78:	07                   	pop    es
     e79:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     e7c:	19 03                	sbb    DWORD PTR [ebx],eax
     e7e:	0e                   	push   cs
     e7f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e81:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e83:	27                   	daa    
     e84:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e87:	11 01                	adc    DWORD PTR [ecx],eax
     e89:	12 06                	adc    al,BYTE PTR [esi]
     e8b:	40                   	inc    eax
     e8c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e92:	00 00                	add    BYTE PTR [eax],al
     e94:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     e9a:	0b 3b                	or     edi,DWORD PTR [ebx]
     e9c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e9f:	02 18                	add    bl,BYTE PTR [eax]
     ea1:	00 00                	add    BYTE PTR [eax],al
     ea3:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     ea6:	03 08                	add    ecx,DWORD PTR [eax]
     ea8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eaa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eac:	49                   	dec    ecx
     ead:	13 02                	adc    eax,DWORD PTR [edx]
     eaf:	18 00                	sbb    BYTE PTR [eax],al
     eb1:	00 0a                	add    BYTE PTR [edx],cl
     eb3:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     eb8:	0b 3b                	or     edi,DWORD PTR [ebx]
     eba:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ebd:	02 18                	add    bl,BYTE PTR [eax]
     ebf:	00 00                	add    BYTE PTR [eax],al
     ec1:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     ec4:	03 0e                	add    ecx,DWORD PTR [esi]
     ec6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eca:	49                   	dec    ecx
     ecb:	13 3f                	adc    edi,DWORD PTR [edi]
     ecd:	19 02                	sbb    DWORD PTR [edx],eax
     ecf:	18 00                	sbb    BYTE PTR [eax],al
     ed1:	00 00                	add    BYTE PTR [eax],al
     ed3:	01 11                	add    DWORD PTR [ecx],edx
     ed5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     edb:	0e                   	push   cs
     edc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ede:	11 01                	adc    DWORD PTR [ecx],eax
     ee0:	12 06                	adc    al,BYTE PTR [esi]
     ee2:	10 17                	adc    BYTE PTR [edi],dl
     ee4:	00 00                	add    BYTE PTR [eax],al
     ee6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ee9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     eeb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     eee:	0e                   	push   cs
     eef:	00 00                	add    BYTE PTR [eax],al
     ef1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ef4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ef6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ef9:	08 00                	or     BYTE PTR [eax],al
     efb:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     efe:	00 03                	add    BYTE PTR [ebx],al
     f00:	0e                   	push   cs
     f01:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f03:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f05:	49                   	dec    ecx
     f06:	13 00                	adc    eax,DWORD PTR [eax]
     f08:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f0e:	49                   	dec    ecx
     f0f:	13 00                	adc    eax,DWORD PTR [eax]
     f11:	00 06                	add    BYTE PTR [esi],al
     f13:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f16:	19 03                	sbb    DWORD PTR [ebx],eax
     f18:	0e                   	push   cs
     f19:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f1b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f1d:	27                   	daa    
     f1e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f21:	11 01                	adc    DWORD PTR [ecx],eax
     f23:	12 06                	adc    al,BYTE PTR [esi]
     f25:	40                   	inc    eax
     f26:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f2c:	00 00                	add    BYTE PTR [eax],al
     f2e:	07                   	pop    es
     f2f:	05 00 03 08 3a       	add    eax,0x3a080300
     f34:	0b 3b                	or     edi,DWORD PTR [ebx]
     f36:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f39:	02 18                	add    bl,BYTE PTR [eax]
     f3b:	00 00                	add    BYTE PTR [eax],al
     f3d:	08 2e                	or     BYTE PTR [esi],ch
     f3f:	01 3f                	add    DWORD PTR [edi],edi
     f41:	19 03                	sbb    DWORD PTR [ebx],eax
     f43:	0e                   	push   cs
     f44:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f46:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f48:	27                   	daa    
     f49:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f4c:	11 01                	adc    DWORD PTR [ecx],eax
     f4e:	12 06                	adc    al,BYTE PTR [esi]
     f50:	40                   	inc    eax
     f51:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f57:	00 00                	add    BYTE PTR [eax],al
     f59:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     f5c:	03 08                	add    ecx,DWORD PTR [eax]
     f5e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f60:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f62:	49                   	dec    ecx
     f63:	13 02                	adc    eax,DWORD PTR [edx]
     f65:	18 00                	sbb    BYTE PTR [eax],al
     f67:	00 0a                	add    BYTE PTR [edx],cl
     f69:	34 00                	xor    al,0x0
     f6b:	03 0e                	add    ecx,DWORD PTR [esi]
     f6d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f6f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f71:	49                   	dec    ecx
     f72:	13 3f                	adc    edi,DWORD PTR [edi]
     f74:	19 02                	sbb    DWORD PTR [edx],eax
     f76:	18 00                	sbb    BYTE PTR [eax],al
     f78:	00 00                	add    BYTE PTR [eax],al
     f7a:	01 11                	add    DWORD PTR [ecx],edx
     f7c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     f82:	0e                   	push   cs
     f83:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f85:	11 01                	adc    DWORD PTR [ecx],eax
     f87:	12 06                	adc    al,BYTE PTR [esi]
     f89:	10 17                	adc    BYTE PTR [edi],dl
     f8b:	00 00                	add    BYTE PTR [eax],al
     f8d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f90:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f92:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f95:	08 00                	or     BYTE PTR [eax],al
     f97:	00 03                	add    BYTE PTR [ebx],al
     f99:	16                   	push   ss
     f9a:	00 03                	add    BYTE PTR [ebx],al
     f9c:	0e                   	push   cs
     f9d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f9f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fa1:	49                   	dec    ecx
     fa2:	13 00                	adc    eax,DWORD PTR [eax]
     fa4:	00 04 24             	add    BYTE PTR [esp],al
     fa7:	00 0b                	add    BYTE PTR [ebx],cl
     fa9:	0b 3e                	or     edi,DWORD PTR [esi]
     fab:	0b 03                	or     eax,DWORD PTR [ebx]
     fad:	0e                   	push   cs
     fae:	00 00                	add    BYTE PTR [eax],al
     fb0:	05 2e 01 3f 19       	add    eax,0x193f012e
     fb5:	03 0e                	add    ecx,DWORD PTR [esi]
     fb7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fbb:	27                   	daa    
     fbc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fbf:	11 01                	adc    DWORD PTR [ecx],eax
     fc1:	12 06                	adc    al,BYTE PTR [esi]
     fc3:	40                   	inc    eax
     fc4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     fca:	00 00                	add    BYTE PTR [eax],al
     fcc:	06                   	push   es
     fcd:	05 00 03 08 3a       	add    eax,0x3a080300
     fd2:	0b 3b                	or     edi,DWORD PTR [ebx]
     fd4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fd7:	02 18                	add    bl,BYTE PTR [eax]
     fd9:	00 00                	add    BYTE PTR [eax],al
     fdb:	07                   	pop    es
     fdc:	34 00                	xor    al,0x0
     fde:	03 08                	add    ecx,DWORD PTR [eax]
     fe0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fe2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fe4:	49                   	dec    ecx
     fe5:	13 02                	adc    eax,DWORD PTR [edx]
     fe7:	18 00                	sbb    BYTE PTR [eax],al
     fe9:	00 08                	add    BYTE PTR [eax],cl
     feb:	0f 00 0b             	str    WORD PTR [ebx]
     fee:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ff1:	00 00                	add    BYTE PTR [eax],al
     ff3:	09 26                	or     DWORD PTR [esi],esp
     ff5:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     ff8:	00 00                	add    BYTE PTR [eax],al
     ffa:	0a 2e                	or     ch,BYTE PTR [esi]
     ffc:	01 3f                	add    DWORD PTR [edi],edi
     ffe:	19 03                	sbb    DWORD PTR [ebx],eax
    1000:	0e                   	push   cs
    1001:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1003:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1005:	27                   	daa    
    1006:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1009:	11 01                	adc    DWORD PTR [ecx],eax
    100b:	12 06                	adc    al,BYTE PTR [esi]
    100d:	40                   	inc    eax
    100e:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1014:	00 01                	add    BYTE PTR [ecx],al
    1016:	11 01                	adc    DWORD PTR [ecx],eax
    1018:	25 0e 13 0b 03       	and    eax,0x30b130e
    101d:	0e                   	push   cs
    101e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1020:	11 01                	adc    DWORD PTR [ecx],eax
    1022:	12 06                	adc    al,BYTE PTR [esi]
    1024:	10 17                	adc    BYTE PTR [edi],dl
    1026:	00 00                	add    BYTE PTR [eax],al
    1028:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    102b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    102d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1030:	08 00                	or     BYTE PTR [eax],al
    1032:	00 03                	add    BYTE PTR [ebx],al
    1034:	16                   	push   ss
    1035:	00 03                	add    BYTE PTR [ebx],al
    1037:	0e                   	push   cs
    1038:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    103a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    103c:	49                   	dec    ecx
    103d:	13 00                	adc    eax,DWORD PTR [eax]
    103f:	00 04 24             	add    BYTE PTR [esp],al
    1042:	00 0b                	add    BYTE PTR [ebx],cl
    1044:	0b 3e                	or     edi,DWORD PTR [esi]
    1046:	0b 03                	or     eax,DWORD PTR [ebx]
    1048:	0e                   	push   cs
    1049:	00 00                	add    BYTE PTR [eax],al
    104b:	05 2e 01 3f 19       	add    eax,0x193f012e
    1050:	03 0e                	add    ecx,DWORD PTR [esi]
    1052:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1054:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1056:	27                   	daa    
    1057:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    105a:	11 01                	adc    DWORD PTR [ecx],eax
    105c:	12 06                	adc    al,BYTE PTR [esi]
    105e:	40                   	inc    eax
    105f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1065:	00 00                	add    BYTE PTR [eax],al
    1067:	06                   	push   es
    1068:	05 00 03 08 3a       	add    eax,0x3a080300
    106d:	0b 3b                	or     edi,DWORD PTR [ebx]
    106f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1072:	02 18                	add    bl,BYTE PTR [eax]
    1074:	00 00                	add    BYTE PTR [eax],al
    1076:	07                   	pop    es
    1077:	0f 00 0b             	str    WORD PTR [ebx]
    107a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    107d:	00 00                	add    BYTE PTR [eax],al
    107f:	08 26                	or     BYTE PTR [esi],ah
    1081:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1084:	00 00                	add    BYTE PTR [eax],al
    1086:	09 2e                	or     DWORD PTR [esi],ebp
    1088:	01 3f                	add    DWORD PTR [edi],edi
    108a:	19 03                	sbb    DWORD PTR [ebx],eax
    108c:	0e                   	push   cs
    108d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    108f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1091:	27                   	daa    
    1092:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1095:	11 01                	adc    DWORD PTR [ecx],eax
    1097:	12 06                	adc    al,BYTE PTR [esi]
    1099:	40                   	inc    eax
    109a:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    10a0:	00 01                	add    BYTE PTR [ecx],al
    10a2:	11 01                	adc    DWORD PTR [ecx],eax
    10a4:	25 0e 13 0b 03       	and    eax,0x30b130e
    10a9:	0e                   	push   cs
    10aa:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10ac:	11 01                	adc    DWORD PTR [ecx],eax
    10ae:	12 06                	adc    al,BYTE PTR [esi]
    10b0:	10 17                	adc    BYTE PTR [edi],dl
    10b2:	00 00                	add    BYTE PTR [eax],al
    10b4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10b7:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10b9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10bc:	08 00                	or     BYTE PTR [eax],al
    10be:	00 03                	add    BYTE PTR [ebx],al
    10c0:	16                   	push   ss
    10c1:	00 03                	add    BYTE PTR [ebx],al
    10c3:	0e                   	push   cs
    10c4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10c6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10c8:	49                   	dec    ecx
    10c9:	13 00                	adc    eax,DWORD PTR [eax]
    10cb:	00 04 24             	add    BYTE PTR [esp],al
    10ce:	00 0b                	add    BYTE PTR [ebx],cl
    10d0:	0b 3e                	or     edi,DWORD PTR [esi]
    10d2:	0b 03                	or     eax,DWORD PTR [ebx]
    10d4:	0e                   	push   cs
    10d5:	00 00                	add    BYTE PTR [eax],al
    10d7:	05 2e 01 3f 19       	add    eax,0x193f012e
    10dc:	03 0e                	add    ecx,DWORD PTR [esi]
    10de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10e2:	27                   	daa    
    10e3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10e6:	11 01                	adc    DWORD PTR [ecx],eax
    10e8:	12 06                	adc    al,BYTE PTR [esi]
    10ea:	40                   	inc    eax
    10eb:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10f1:	00 00                	add    BYTE PTR [eax],al
    10f3:	06                   	push   es
    10f4:	05 00 03 08 3a       	add    eax,0x3a080300
    10f9:	0b 3b                	or     edi,DWORD PTR [ebx]
    10fb:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10fe:	02 18                	add    bl,BYTE PTR [eax]
    1100:	00 00                	add    BYTE PTR [eax],al
    1102:	07                   	pop    es
    1103:	34 00                	xor    al,0x0
    1105:	03 08                	add    ecx,DWORD PTR [eax]
    1107:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1109:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    110b:	49                   	dec    ecx
    110c:	13 02                	adc    eax,DWORD PTR [edx]
    110e:	18 00                	sbb    BYTE PTR [eax],al
    1110:	00 08                	add    BYTE PTR [eax],cl
    1112:	0f 00 0b             	str    WORD PTR [ebx]
    1115:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1118:	00 00                	add    BYTE PTR [eax],al
    111a:	09 26                	or     DWORD PTR [esi],esp
    111c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    111f:	00 00                	add    BYTE PTR [eax],al
    1121:	0a 2e                	or     ch,BYTE PTR [esi]
    1123:	01 3f                	add    DWORD PTR [edi],edi
    1125:	19 03                	sbb    DWORD PTR [ebx],eax
    1127:	0e                   	push   cs
    1128:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    112a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    112c:	27                   	daa    
    112d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1130:	11 01                	adc    DWORD PTR [ecx],eax
    1132:	12 06                	adc    al,BYTE PTR [esi]
    1134:	40                   	inc    eax
    1135:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    113b:	00 01                	add    BYTE PTR [ecx],al
    113d:	11 01                	adc    DWORD PTR [ecx],eax
    113f:	25 0e 13 0b 03       	and    eax,0x30b130e
    1144:	0e                   	push   cs
    1145:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1147:	11 01                	adc    DWORD PTR [ecx],eax
    1149:	12 06                	adc    al,BYTE PTR [esi]
    114b:	10 17                	adc    BYTE PTR [edi],dl
    114d:	00 00                	add    BYTE PTR [eax],al
    114f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1152:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1154:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1157:	0e                   	push   cs
    1158:	00 00                	add    BYTE PTR [eax],al
    115a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    115d:	0b 0b                	or     ecx,DWORD PTR [ebx]
    115f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1162:	08 00                	or     BYTE PTR [eax],al
    1164:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1167:	00 03                	add    BYTE PTR [ebx],al
    1169:	0e                   	push   cs
    116a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    116c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    116e:	49                   	dec    ecx
    116f:	13 00                	adc    eax,DWORD PTR [eax]
    1171:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1177:	49                   	dec    ecx
    1178:	13 00                	adc    eax,DWORD PTR [eax]
    117a:	00 06                	add    BYTE PTR [esi],al
    117c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1180:	00 00                	add    BYTE PTR [eax],al
    1182:	07                   	pop    es
    1183:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1186:	19 03                	sbb    DWORD PTR [ebx],eax
    1188:	0e                   	push   cs
    1189:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    118b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    118d:	27                   	daa    
    118e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1191:	11 01                	adc    DWORD PTR [ecx],eax
    1193:	12 06                	adc    al,BYTE PTR [esi]
    1195:	40                   	inc    eax
    1196:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    119c:	00 00                	add    BYTE PTR [eax],al
    119e:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    11a4:	0b 3b                	or     edi,DWORD PTR [ebx]
    11a6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11a9:	02 18                	add    bl,BYTE PTR [eax]
    11ab:	00 00                	add    BYTE PTR [eax],al
    11ad:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    11b0:	03 08                	add    ecx,DWORD PTR [eax]
    11b2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11b4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11b6:	49                   	dec    ecx
    11b7:	13 02                	adc    eax,DWORD PTR [edx]
    11b9:	18 00                	sbb    BYTE PTR [eax],al
    11bb:	00 0a                	add    BYTE PTR [edx],cl
    11bd:	34 00                	xor    al,0x0
    11bf:	03 0e                	add    ecx,DWORD PTR [esi]
    11c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11c3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11c5:	49                   	dec    ecx
    11c6:	13 00                	adc    eax,DWORD PTR [eax]
    11c8:	00 0b                	add    BYTE PTR [ebx],cl
    11ca:	34 00                	xor    al,0x0
    11cc:	03 08                	add    ecx,DWORD PTR [eax]
    11ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11d0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11d2:	49                   	dec    ecx
    11d3:	13 00                	adc    eax,DWORD PTR [eax]
    11d5:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    11d8:	00 03                	add    BYTE PTR [ebx],al
    11da:	0e                   	push   cs
    11db:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11dd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11df:	49                   	dec    ecx
    11e0:	13 02                	adc    eax,DWORD PTR [edx]
    11e2:	18 00                	sbb    BYTE PTR [eax],al
    11e4:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    11ea:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11ec:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11ee:	49                   	dec    ecx
    11ef:	13 3f                	adc    edi,DWORD PTR [edi]
    11f1:	19 02                	sbb    DWORD PTR [edx],eax
    11f3:	18 00                	sbb    BYTE PTR [eax],al
    11f5:	00 00                	add    BYTE PTR [eax],al
    11f7:	01 11                	add    DWORD PTR [ecx],edx
    11f9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    11ff:	0e                   	push   cs
    1200:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1202:	11 01                	adc    DWORD PTR [ecx],eax
    1204:	12 06                	adc    al,BYTE PTR [esi]
    1206:	10 17                	adc    BYTE PTR [edi],dl
    1208:	00 00                	add    BYTE PTR [eax],al
    120a:	02 2e                	add    ch,BYTE PTR [esi]
    120c:	01 3f                	add    DWORD PTR [edi],edi
    120e:	19 03                	sbb    DWORD PTR [ebx],eax
    1210:	0e                   	push   cs
    1211:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1213:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1215:	27                   	daa    
    1216:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1219:	11 01                	adc    DWORD PTR [ecx],eax
    121b:	12 06                	adc    al,BYTE PTR [esi]
    121d:	40                   	inc    eax
    121e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1224:	00 00                	add    BYTE PTR [eax],al
    1226:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    122c:	0b 3b                	or     edi,DWORD PTR [ebx]
    122e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1231:	02 18                	add    bl,BYTE PTR [eax]
    1233:	00 00                	add    BYTE PTR [eax],al
    1235:	04 0f                	add    al,0xf
    1237:	00 0b                	add    BYTE PTR [ebx],cl
    1239:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    123c:	00 00                	add    BYTE PTR [eax],al
    123e:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1243:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1246:	0e                   	push   cs
    1247:	00 00                	add    BYTE PTR [eax],al
    1249:	06                   	push   es
    124a:	24 00                	and    al,0x0
    124c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    124e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1251:	08 00                	or     BYTE PTR [eax],al
    1253:	00 00                	add    BYTE PTR [eax],al
    1255:	01 11                	add    DWORD PTR [ecx],edx
    1257:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    125d:	0e                   	push   cs
    125e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1260:	11 01                	adc    DWORD PTR [ecx],eax
    1262:	12 06                	adc    al,BYTE PTR [esi]
    1264:	10 17                	adc    BYTE PTR [edi],dl
    1266:	00 00                	add    BYTE PTR [eax],al
    1268:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    126b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    126d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1270:	0e                   	push   cs
    1271:	00 00                	add    BYTE PTR [eax],al
    1273:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1276:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1278:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    127b:	08 00                	or     BYTE PTR [eax],al
    127d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1280:	00 03                	add    BYTE PTR [ebx],al
    1282:	0e                   	push   cs
    1283:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1285:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1287:	49                   	dec    ecx
    1288:	13 00                	adc    eax,DWORD PTR [eax]
    128a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1290:	49                   	dec    ecx
    1291:	13 00                	adc    eax,DWORD PTR [eax]
    1293:	00 06                	add    BYTE PTR [esi],al
    1295:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1299:	00 00                	add    BYTE PTR [eax],al
    129b:	07                   	pop    es
    129c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    129f:	19 03                	sbb    DWORD PTR [ebx],eax
    12a1:	0e                   	push   cs
    12a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12a6:	27                   	daa    
    12a7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12aa:	11 01                	adc    DWORD PTR [ecx],eax
    12ac:	12 06                	adc    al,BYTE PTR [esi]
    12ae:	40                   	inc    eax
    12af:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    12b5:	00 00                	add    BYTE PTR [eax],al
    12b7:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    12bd:	0b 3b                	or     edi,DWORD PTR [ebx]
    12bf:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12c2:	02 18                	add    bl,BYTE PTR [eax]
    12c4:	00 00                	add    BYTE PTR [eax],al
    12c6:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    12c9:	03 08                	add    ecx,DWORD PTR [eax]
    12cb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12cd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12cf:	49                   	dec    ecx
    12d0:	13 02                	adc    eax,DWORD PTR [edx]
    12d2:	18 00                	sbb    BYTE PTR [eax],al
    12d4:	00 0a                	add    BYTE PTR [edx],cl
    12d6:	34 00                	xor    al,0x0
    12d8:	03 0e                	add    ecx,DWORD PTR [esi]
    12da:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12dc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12de:	49                   	dec    ecx
    12df:	13 00                	adc    eax,DWORD PTR [eax]
    12e1:	00 0b                	add    BYTE PTR [ebx],cl
    12e3:	34 00                	xor    al,0x0
    12e5:	03 08                	add    ecx,DWORD PTR [eax]
    12e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12eb:	49                   	dec    ecx
    12ec:	13 00                	adc    eax,DWORD PTR [eax]
    12ee:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    12f1:	00 03                	add    BYTE PTR [ebx],al
    12f3:	0e                   	push   cs
    12f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12f8:	49                   	dec    ecx
    12f9:	13 3f                	adc    edi,DWORD PTR [edi]
    12fb:	19 02                	sbb    DWORD PTR [edx],eax
    12fd:	18 00                	sbb    BYTE PTR [eax],al
    12ff:	00 00                	add    BYTE PTR [eax],al
    1301:	01 11                	add    DWORD PTR [ecx],edx
    1303:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1309:	0e                   	push   cs
    130a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    130c:	11 01                	adc    DWORD PTR [ecx],eax
    130e:	12 06                	adc    al,BYTE PTR [esi]
    1310:	10 17                	adc    BYTE PTR [edi],dl
    1312:	00 00                	add    BYTE PTR [eax],al
    1314:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1317:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1319:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    131c:	0e                   	push   cs
    131d:	00 00                	add    BYTE PTR [eax],al
    131f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1322:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1324:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1327:	08 00                	or     BYTE PTR [eax],al
    1329:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    132c:	00 03                	add    BYTE PTR [ebx],al
    132e:	0e                   	push   cs
    132f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1331:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1333:	49                   	dec    ecx
    1334:	13 00                	adc    eax,DWORD PTR [eax]
    1336:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    133c:	49                   	dec    ecx
    133d:	13 00                	adc    eax,DWORD PTR [eax]
    133f:	00 06                	add    BYTE PTR [esi],al
    1341:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1344:	19 03                	sbb    DWORD PTR [ebx],eax
    1346:	0e                   	push   cs
    1347:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1349:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    134b:	27                   	daa    
    134c:	19 11                	sbb    DWORD PTR [ecx],edx
    134e:	01 12                	add    DWORD PTR [edx],edx
    1350:	06                   	push   es
    1351:	40                   	inc    eax
    1352:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1358:	00 00                	add    BYTE PTR [eax],al
    135a:	07                   	pop    es
    135b:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1360:	0b 3b                	or     edi,DWORD PTR [ebx]
    1362:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1365:	02 18                	add    bl,BYTE PTR [eax]
    1367:	00 00                	add    BYTE PTR [eax],al
    1369:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    136c:	03 08                	add    ecx,DWORD PTR [eax]
    136e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1370:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1372:	49                   	dec    ecx
    1373:	13 02                	adc    eax,DWORD PTR [edx]
    1375:	18 00                	sbb    BYTE PTR [eax],al
    1377:	00 09                	add    BYTE PTR [ecx],cl
    1379:	34 00                	xor    al,0x0
    137b:	03 0e                	add    ecx,DWORD PTR [esi]
    137d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    137f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1381:	49                   	dec    ecx
    1382:	13 3f                	adc    edi,DWORD PTR [edi]
    1384:	19 02                	sbb    DWORD PTR [edx],eax
    1386:	18 00                	sbb    BYTE PTR [eax],al
    1388:	00 00                	add    BYTE PTR [eax],al
    138a:	01 11                	add    DWORD PTR [ecx],edx
    138c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1392:	0e                   	push   cs
    1393:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1395:	11 01                	adc    DWORD PTR [ecx],eax
    1397:	12 06                	adc    al,BYTE PTR [esi]
    1399:	10 17                	adc    BYTE PTR [edi],dl
    139b:	00 00                	add    BYTE PTR [eax],al
    139d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    13a0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13a2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13a5:	0e                   	push   cs
    13a6:	00 00                	add    BYTE PTR [eax],al
    13a8:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    13ab:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13ad:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13b0:	08 00                	or     BYTE PTR [eax],al
    13b2:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    13b5:	00 03                	add    BYTE PTR [ebx],al
    13b7:	0e                   	push   cs
    13b8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13ba:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13bc:	49                   	dec    ecx
    13bd:	13 00                	adc    eax,DWORD PTR [eax]
    13bf:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    13c5:	49                   	dec    ecx
    13c6:	13 00                	adc    eax,DWORD PTR [eax]
    13c8:	00 06                	add    BYTE PTR [esi],al
    13ca:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13cd:	19 03                	sbb    DWORD PTR [ebx],eax
    13cf:	0e                   	push   cs
    13d0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13d2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13d4:	27                   	daa    
    13d5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13d8:	11 01                	adc    DWORD PTR [ecx],eax
    13da:	12 06                	adc    al,BYTE PTR [esi]
    13dc:	40                   	inc    eax
    13dd:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13e3:	00 00                	add    BYTE PTR [eax],al
    13e5:	07                   	pop    es
    13e6:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    13eb:	0b 3b                	or     edi,DWORD PTR [ebx]
    13ed:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13f0:	02 18                	add    bl,BYTE PTR [eax]
    13f2:	00 00                	add    BYTE PTR [eax],al
    13f4:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    13f7:	03 08                	add    ecx,DWORD PTR [eax]
    13f9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13fb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13fd:	49                   	dec    ecx
    13fe:	13 02                	adc    eax,DWORD PTR [edx]
    1400:	18 00                	sbb    BYTE PTR [eax],al
    1402:	00 09                	add    BYTE PTR [ecx],cl
    1404:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1407:	19 03                	sbb    DWORD PTR [ebx],eax
    1409:	0e                   	push   cs
    140a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    140c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    140e:	27                   	daa    
    140f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1412:	11 01                	adc    DWORD PTR [ecx],eax
    1414:	12 06                	adc    al,BYTE PTR [esi]
    1416:	40                   	inc    eax
    1417:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    141d:	00 00                	add    BYTE PTR [eax],al
    141f:	0a 01                	or     al,BYTE PTR [ecx]
    1421:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    1424:	01 13                	add    DWORD PTR [ebx],edx
    1426:	00 00                	add    BYTE PTR [eax],al
    1428:	0b 21                	or     esp,DWORD PTR [ecx]
    142a:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    142d:	2f                   	das    
    142e:	0b 00                	or     eax,DWORD PTR [eax]
    1430:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1433:	00 03                	add    BYTE PTR [ebx],al
    1435:	0e                   	push   cs
    1436:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1438:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    143a:	49                   	dec    ecx
    143b:	13 02                	adc    eax,DWORD PTR [edx]
    143d:	18 00                	sbb    BYTE PTR [eax],al
    143f:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1445:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1447:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1449:	49                   	dec    ecx
    144a:	13 3f                	adc    edi,DWORD PTR [edi]
    144c:	19 02                	sbb    DWORD PTR [edx],eax
    144e:	18 00                	sbb    BYTE PTR [eax],al
    1450:	00 00                	add    BYTE PTR [eax],al
    1452:	01 11                	add    DWORD PTR [ecx],edx
    1454:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    145a:	0e                   	push   cs
    145b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    145d:	11 01                	adc    DWORD PTR [ecx],eax
    145f:	12 06                	adc    al,BYTE PTR [esi]
    1461:	10 17                	adc    BYTE PTR [edi],dl
    1463:	00 00                	add    BYTE PTR [eax],al
    1465:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1468:	03 0e                	add    ecx,DWORD PTR [esi]
    146a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    146c:	49                   	dec    ecx
    146d:	13 3a                	adc    edi,DWORD PTR [edx]
    146f:	0b 3b                	or     edi,DWORD PTR [ebx]
    1471:	0b 01                	or     eax,DWORD PTR [ecx]
    1473:	13 00                	adc    eax,DWORD PTR [eax]
    1475:	00 03                	add    BYTE PTR [ebx],al
    1477:	28 00                	sub    BYTE PTR [eax],al
    1479:	03 0e                	add    ecx,DWORD PTR [esi]
    147b:	1c 0b                	sbb    al,0xb
    147d:	00 00                	add    BYTE PTR [eax],al
    147f:	04 28                	add    al,0x28
    1481:	00 03                	add    BYTE PTR [ebx],al
    1483:	0e                   	push   cs
    1484:	1c 05                	sbb    al,0x5
    1486:	00 00                	add    BYTE PTR [eax],al
    1488:	05 24 00 0b 0b       	add    eax,0xb0b0024
    148d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1490:	0e                   	push   cs
    1491:	00 00                	add    BYTE PTR [eax],al
    1493:	06                   	push   es
    1494:	24 00                	and    al,0x0
    1496:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1498:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    149b:	08 00                	or     BYTE PTR [eax],al
    149d:	00 07                	add    BYTE PTR [edi],al
    149f:	16                   	push   ss
    14a0:	00 03                	add    BYTE PTR [ebx],al
    14a2:	0e                   	push   cs
    14a3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14a5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14a7:	49                   	dec    ecx
    14a8:	13 00                	adc    eax,DWORD PTR [eax]
    14aa:	00 08                	add    BYTE PTR [eax],cl
    14ac:	13 01                	adc    eax,DWORD PTR [ecx]
    14ae:	03 08                	add    ecx,DWORD PTR [eax]
    14b0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14b2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14b4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14b6:	01 13                	add    DWORD PTR [ebx],edx
    14b8:	00 00                	add    BYTE PTR [eax],al
    14ba:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    14c0:	0b 3b                	or     edi,DWORD PTR [ebx]
    14c2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14c5:	38 0b                	cmp    BYTE PTR [ebx],cl
    14c7:	00 00                	add    BYTE PTR [eax],al
    14c9:	0a 0f                	or     cl,BYTE PTR [edi]
    14cb:	00 0b                	add    BYTE PTR [ebx],cl
    14cd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14d0:	00 00                	add    BYTE PTR [eax],al
    14d2:	0b 26                	or     esp,DWORD PTR [esi]
    14d4:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    14d7:	00 00                	add    BYTE PTR [eax],al
    14d9:	0c 2e                	or     al,0x2e
    14db:	01 3f                	add    DWORD PTR [edi],edi
    14dd:	19 03                	sbb    DWORD PTR [ebx],eax
    14df:	0e                   	push   cs
    14e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14e4:	49                   	dec    ecx
    14e5:	13 11                	adc    edx,DWORD PTR [ecx]
    14e7:	01 12                	add    DWORD PTR [edx],edx
    14e9:	06                   	push   es
    14ea:	40                   	inc    eax
    14eb:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    14f1:	00 00                	add    BYTE PTR [eax],al
    14f3:	0d 34 00 03 0e       	or     eax,0xe030034
    14f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14fc:	49                   	dec    ecx
    14fd:	13 02                	adc    eax,DWORD PTR [edx]
    14ff:	18 00                	sbb    BYTE PTR [eax],al
    1501:	00 0e                	add    BYTE PTR [esi],cl
    1503:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1506:	19 03                	sbb    DWORD PTR [ebx],eax
    1508:	0e                   	push   cs
    1509:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    150b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    150d:	27                   	daa    
    150e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1511:	11 01                	adc    DWORD PTR [ecx],eax
    1513:	12 06                	adc    al,BYTE PTR [esi]
    1515:	40                   	inc    eax
    1516:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    151c:	00 00                	add    BYTE PTR [eax],al
    151e:	0f 05                	syscall 
    1520:	00 03                	add    BYTE PTR [ebx],al
    1522:	0e                   	push   cs
    1523:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1525:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1527:	49                   	dec    ecx
    1528:	13 02                	adc    eax,DWORD PTR [edx]
    152a:	18 00                	sbb    BYTE PTR [eax],al
    152c:	00 10                	add    BYTE PTR [eax],dl
    152e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1531:	19 03                	sbb    DWORD PTR [ebx],eax
    1533:	0e                   	push   cs
    1534:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1536:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1538:	27                   	daa    
    1539:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    153c:	11 01                	adc    DWORD PTR [ecx],eax
    153e:	12 06                	adc    al,BYTE PTR [esi]
    1540:	40                   	inc    eax
    1541:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1547:	00 00                	add    BYTE PTR [eax],al
    1549:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    154c:	03 08                	add    ecx,DWORD PTR [eax]
    154e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1550:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1552:	49                   	dec    ecx
    1553:	13 02                	adc    eax,DWORD PTR [edx]
    1555:	18 00                	sbb    BYTE PTR [eax],al
    1557:	00 12                	add    BYTE PTR [edx],dl
    1559:	34 00                	xor    al,0x0
    155b:	03 0e                	add    ecx,DWORD PTR [esi]
    155d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    155f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1561:	49                   	dec    ecx
    1562:	13 3f                	adc    edi,DWORD PTR [edi]
    1564:	19 02                	sbb    DWORD PTR [edx],eax
    1566:	18 00                	sbb    BYTE PTR [eax],al
    1568:	00 13                	add    BYTE PTR [ebx],dl
    156a:	01 01                	add    DWORD PTR [ecx],eax
    156c:	49                   	dec    ecx
    156d:	13 01                	adc    eax,DWORD PTR [ecx]
    156f:	13 00                	adc    eax,DWORD PTR [eax]
    1571:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    1574:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1577:	2f                   	das    
    1578:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	63 01                	arpl   WORD PTR [ecx],ax
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 00                	add    al,0x0
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	05 03 00 00 04       	add    eax,0x4000003
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	00 00                	add    BYTE PTR [eax],al
  4f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
  52:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	4a                   	dec    edx
  67:	04 00                	add    al,0x0
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 9f 49 02 00 00    	add    BYTE PTR [edi+0x249],bl
	...
  80:	1c 00                	sbb    al,0x0
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	60                   	pusha  
  87:	06                   	push   es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	9f                   	lahf   
  94:	6b 02 00             	imul   eax,DWORD PTR [edx],0x0
	...
  9f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	16                   	push   ss
  a7:	08 00                	or     BYTE PTR [eax],al
  a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	6c                   	ins    BYTE PTR es:[edi],dx
  b1:	06                   	push   es
  b2:	00 9f f2 00 00 00    	add    BYTE PTR [edi+0xf2],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	1b 0b                	sbb    ecx,DWORD PTR [ebx]
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	60                   	pusha  
  d1:	07                   	pop    es
  d2:	00 9f 66 01 00 00    	add    BYTE PTR [edi+0x166],bl
	...
  e0:	1c 00                	sbb    al,0x0
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	d4 0d                	aam    0xd
  e8:	00 00                	add    BYTE PTR [eax],al
  ea:	04 00                	add    al,0x0
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	c8 08 00 9f          	enter  0x8,0x9f
  f4:	3a 0a                	cmp    cl,BYTE PTR [edx]
	...
  fe:	00 00                	add    BYTE PTR [eax],al
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	51                   	push   ecx
 107:	17                   	pop    ss
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	04 13                	add    al,0x13
 112:	00 9f 6d 03 00 00    	add    BYTE PTR [edi+0x36d],bl
	...
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	c7                   	(bad)  
 127:	1a 00                	sbb    al,BYTE PTR [eax]
 129:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	74 16                	je     148 <sysEnter_Vector-0x12feb8>
 132:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	b5 1c                	mov    ch,0x1c
 148:	00 00                	add    BYTE PTR [eax],al
 14a:	04 00                	add    al,0x0
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	10 18                	adc    BYTE PTR [eax],bl
 152:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
	...
 160:	14 00                	adc    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
 167:	1e                   	push   ds
 168:	00 00                	add    BYTE PTR [eax],al
 16a:	04 00                	add    al,0x0
	...
 178:	1c 00                	sbb    al,0x0
 17a:	00 00                	add    BYTE PTR [eax],al
 17c:	02 00                	add    al,BYTE PTR [eax]
 17e:	90                   	nop
 17f:	1f                   	pop    ds
 180:	00 00                	add    BYTE PTR [eax],al
 182:	04 00                	add    al,0x0
 184:	00 00                	add    BYTE PTR [eax],al
 186:	00 00                	add    BYTE PTR [eax],al
 188:	f8                   	clc    
 189:	18 00                	sbb    BYTE PTR [eax],al
 18b:	9f                   	lahf   
 18c:	29 00                	sub    DWORD PTR [eax],eax
	...
 196:	00 00                	add    BYTE PTR [eax],al
 198:	1c 00                	sbb    al,0x0
 19a:	00 00                	add    BYTE PTR [eax],al
 19c:	02 00                	add    al,BYTE PTR [eax]
 19e:	7f 21                	jg     1c1 <sysEnter_Vector-0x12fe3f>
 1a0:	00 00                	add    BYTE PTR [eax],al
 1a2:	04 00                	add    al,0x0
 1a4:	00 00                	add    BYTE PTR [eax],al
 1a6:	00 00                	add    BYTE PTR [eax],al
 1a8:	24 19                	and    al,0x19
 1aa:	00 9f 18 07 00 00    	add    BYTE PTR [edi+0x718],bl
	...
 1b8:	1c 00                	sbb    al,0x0
 1ba:	00 00                	add    BYTE PTR [eax],al
 1bc:	02 00                	add    al,BYTE PTR [eax]
 1be:	40                   	inc    eax
 1bf:	25 00 00 04 00       	and    eax,0x40000
 1c4:	00 00                	add    BYTE PTR [eax],al
 1c6:	00 00                	add    BYTE PTR [eax],al
 1c8:	3c 20                	cmp    al,0x20
 1ca:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
	...
 1d8:	1c 00                	sbb    al,0x0
 1da:	00 00                	add    BYTE PTR [eax],al
 1dc:	02 00                	add    al,BYTE PTR [eax]
 1de:	9c                   	pushf  
 1df:	29 00                	sub    DWORD PTR [eax],eax
 1e1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1e4:	00 00                	add    BYTE PTR [eax],al
 1e6:	00 00                	add    BYTE PTR [eax],al
 1e8:	c0 20 00             	shl    BYTE PTR [eax],0x0
 1eb:	9f                   	lahf   
 1ec:	eb 00                	jmp    1ee <sysEnter_Vector-0x12fe12>
	...
 1f6:	00 00                	add    BYTE PTR [eax],al
 1f8:	1c 00                	sbb    al,0x0
 1fa:	00 00                	add    BYTE PTR [eax],al
 1fc:	02 00                	add    al,BYTE PTR [eax]
 1fe:	4d                   	dec    ebp
 1ff:	2b 00                	sub    eax,DWORD PTR [eax]
 201:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 204:	00 00                	add    BYTE PTR [eax],al
 206:	00 00                	add    BYTE PTR [eax],al
 208:	ac                   	lods   al,BYTE PTR ds:[esi]
 209:	21 00                	and    DWORD PTR [eax],eax
 20b:	9f                   	lahf   
 20c:	5e                   	pop    esi
	...
 215:	00 00                	add    BYTE PTR [eax],al
 217:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 21a:	00 00                	add    BYTE PTR [eax],al
 21c:	02 00                	add    al,BYTE PTR [eax]
 21e:	bd 2c 00 00 04       	mov    ebp,0x400002c
 223:	00 00                	add    BYTE PTR [eax],al
 225:	00 00                	add    BYTE PTR [eax],al
 227:	00 0c 22             	add    BYTE PTR [edx+eiz*1],cl
 22a:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
	...
 238:	1c 00                	sbb    al,0x0
 23a:	00 00                	add    BYTE PTR [eax],al
 23c:	02 00                	add    al,BYTE PTR [eax]
 23e:	8a 2e                	mov    ch,BYTE PTR [esi]
 240:	00 00                	add    BYTE PTR [eax],al
 242:	04 00                	add    al,0x0
 244:	00 00                	add    BYTE PTR [eax],al
 246:	00 00                	add    BYTE PTR [eax],al
 248:	d4 22                	aam    0x22
 24a:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
	...
 258:	1c 00                	sbb    al,0x0
 25a:	00 00                	add    BYTE PTR [eax],al
 25c:	02 00                	add    al,BYTE PTR [eax]
 25e:	da 2f                	fisubr DWORD PTR [edi]
 260:	00 00                	add    BYTE PTR [eax],al
 262:	04 00                	add    al,0x0
 264:	00 00                	add    BYTE PTR [eax],al
 266:	00 00                	add    BYTE PTR [eax],al
 268:	60                   	pusha  
 269:	23 00                	and    eax,DWORD PTR [eax]
 26b:	9f                   	lahf   
 26c:	62 00                	bound  eax,QWORD PTR [eax]
	...
 276:	00 00                	add    BYTE PTR [eax],al
 278:	1c 00                	sbb    al,0x0
 27a:	00 00                	add    BYTE PTR [eax],al
 27c:	02 00                	add    al,BYTE PTR [eax]
 27e:	a8 30                	test   al,0x30
 280:	00 00                	add    BYTE PTR [eax],al
 282:	04 00                	add    al,0x0
 284:	00 00                	add    BYTE PTR [eax],al
 286:	00 00                	add    BYTE PTR [eax],al
 288:	c4 23                	les    esp,FWORD PTR [ebx]
 28a:	00 9f ce 00 00 00    	add    BYTE PTR [edi+0xce],bl
	...
 298:	1c 00                	sbb    al,0x0
 29a:	00 00                	add    BYTE PTR [eax],al
 29c:	02 00                	add    al,BYTE PTR [eax]
 29e:	8a 31                	mov    dh,BYTE PTR [ecx]
 2a0:	00 00                	add    BYTE PTR [eax],al
 2a2:	04 00                	add    al,0x0
 2a4:	00 00                	add    BYTE PTR [eax],al
 2a6:	00 00                	add    BYTE PTR [eax],al
 2a8:	94                   	xchg   esp,eax
 2a9:	24 00                	and    al,0x0
 2ab:	9f                   	lahf   
 2ac:	80 00 00             	add    BYTE PTR [eax],0x0
	...
 2b7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2ba:	00 00                	add    BYTE PTR [eax],al
 2bc:	02 00                	add    al,BYTE PTR [eax]
 2be:	7e 32                	jle    2f2 <sysEnter_Vector-0x12fd0e>
 2c0:	00 00                	add    BYTE PTR [eax],al
 2c2:	04 00                	add    al,0x0
 2c4:	00 00                	add    BYTE PTR [eax],al
 2c6:	00 00                	add    BYTE PTR [eax],al
 2c8:	14 25                	adc    al,0x25
 2ca:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
	...
 2d8:	1c 00                	sbb    al,0x0
 2da:	00 00                	add    BYTE PTR [eax],al
 2dc:	02 00                	add    al,BYTE PTR [eax]
 2de:	14 34                	adc    al,0x34
 2e0:	00 00                	add    BYTE PTR [eax],al
 2e2:	04 00                	add    al,0x0
 2e4:	00 00                	add    BYTE PTR [eax],al
 2e6:	00 00                	add    BYTE PTR [eax],al
 2e8:	94                   	xchg   esp,eax
 2e9:	26 00 9f 1d 00 00 00 	add    BYTE PTR es:[edi+0x1d],bl
	...
 2f8:	1c 00                	sbb    al,0x0
 2fa:	00 00                	add    BYTE PTR [eax],al
 2fc:	02 00                	add    al,BYTE PTR [eax]
 2fe:	84 34 00             	test   BYTE PTR [eax+eax*1],dh
 301:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 304:	00 00                	add    BYTE PTR [eax],al
 306:	00 00                	add    BYTE PTR [eax],al
 308:	b4 26                	mov    ah,0x26
 30a:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
	...
 318:	1c 00                	sbb    al,0x0
 31a:	00 00                	add    BYTE PTR [eax],al
 31c:	02 00                	add    al,BYTE PTR [eax]
 31e:	18 36                	sbb    BYTE PTR [esi],dh
 320:	00 00                	add    BYTE PTR [eax],al
 322:	04 00                	add    al,0x0
 324:	00 00                	add    BYTE PTR [eax],al
 326:	00 00                	add    BYTE PTR [eax],al
 328:	50                   	push   eax
 329:	28 00                	sub    BYTE PTR [eax],al
 32b:	9f                   	lahf   
 32c:	b6 00                	mov    dh,0x0
	...
 336:	00 00                	add    BYTE PTR [eax],al
 338:	1c 00                	sbb    al,0x0
 33a:	00 00                	add    BYTE PTR [eax],al
 33c:	02 00                	add    al,BYTE PTR [eax]
 33e:	7e 37                	jle    377 <sysEnter_Vector-0x12fc89>
 340:	00 00                	add    BYTE PTR [eax],al
 342:	04 00                	add    al,0x0
 344:	00 00                	add    BYTE PTR [eax],al
 346:	00 00                	add    BYTE PTR [eax],al
 348:	08 29                	or     BYTE PTR [ecx],ch
 34a:	00 9f 8b 00 00 00    	add    BYTE PTR [edi+0x8b],bl
	...
 358:	1c 00                	sbb    al,0x0
 35a:	00 00                	add    BYTE PTR [eax],al
 35c:	02 00                	add    al,BYTE PTR [eax]
 35e:	15 39 00 00 04       	adc    eax,0x4000039
 363:	00 00                	add    BYTE PTR [eax],al
 365:	00 00                	add    BYTE PTR [eax],al
 367:	00 94 29 00 9f cf 0c 	add    BYTE PTR [ecx+ebp*1+0xccf9f00],dl
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	d0 00                	rol    BYTE PTR [eax],1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	b0 00                	mov    al,0x0
       8:	00 00                	add    BYTE PTR [eax],al
       a:	01 01                	add    DWORD PTR [ecx],eax
       c:	fb                   	sti    
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 2f                	add    BYTE PTR [edi],ch
      44:	68 6f 6d 65 2f       	push   0x2f656d6f
      49:	79 6f                	jns    ba <sysEnter_Vector-0x12ff46>
      4b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      52:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      55:	73 73                	jae    ca <sysEnter_Vector-0x12ff36>
      57:	2f                   	das    
      58:	6c                   	ins    BYTE PTR es:[edi],dx
      59:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      60:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      66:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      6c:	78 2d                	js     9b <sysEnter_Vector-0x12ff65>
      6e:	67 6e                	outs   dx,BYTE PTR ds:[si]
      70:	75 2f                	jne    a1 <sysEnter_Vector-0x12ff5f>
      72:	35 2e 33 2e 30       	xor    eax,0x302e332e
      77:	2f                   	das    
      78:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      7f:	00 00                	add    BYTE PTR [eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
      8f:	6c                   	ins    BYTE PTR es:[edi],dx
      90:	6c                   	ins    BYTE PTR es:[edi],dx
      91:	6f                   	outs   dx,DWORD PTR ds:[esi]
      92:	63 2e                	arpl   WORD PTR [esi],bp
      94:	68 00 02 00 00       	push   0x200
      99:	6c                   	ins    BYTE PTR es:[edi],dx
      9a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      a1:	4f                   	dec    edi
      a2:	53                   	push   ebx
      a3:	2e                   	cs
      a4:	68 00 02 00 00       	push   0x200
      a9:	73 74                	jae    11f <sysEnter_Vector-0x12fee1>
      ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      b2:	63 
      b3:	2e                   	cs
      b4:	68 00 03 00 00       	push   0x300
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	05 02 00 00 00       	add    eax,0x2
      c0:	9f                   	lahf   
      c1:	1a c9                	sbb    cl,cl
      c3:	2f                   	das    
      c4:	f3 72 cb             	repz jb 92 <sysEnter_Vector-0x12ff6e>
      c7:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      cc:	72 cb                	jb     99 <sysEnter_Vector-0x12ff67>
      ce:	3d 02 02 00 01       	cmp    eax,0x1000202
      d3:	01 03                	add    DWORD PTR [ebx],eax
      d5:	01 00                	add    DWORD PTR [eax],eax
      d7:	00 02                	add    BYTE PTR [edx],al
      d9:	00 b1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],dh
      df:	01 fb                	add    ebx,edi
      e1:	0e                   	push   cs
      e2:	0d 00 01 01 01       	or     eax,0x1010100
      e7:	01 00                	add    DWORD PTR [eax],eax
      e9:	00 00                	add    BYTE PTR [eax],al
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 01                	add    BYTE PTR [ecx],al
      ef:	2e                   	cs
      f0:	2e                   	cs
      f1:	2f                   	das    
      f2:	2e                   	cs
      f3:	2e                   	cs
      f4:	2f                   	das    
      f5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      f9:	6a 2f                	push   0x2f
      fb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      fe:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     105:	63 2f                	arpl   WORD PTR [edi],bp
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	72 69                	jb     174 <sysEnter_Vector-0x12fe8c>
     10b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10c:	67 73 00             	addr16 jae 10f <sysEnter_Vector-0x12fef1>
     10f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     116:	00 2f                	add    BYTE PTR [edi],ch
     118:	68 6f 6d 65 2f       	push   0x2f656d6f
     11d:	79 6f                	jns    18e <sysEnter_Vector-0x12fe72>
     11f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     126:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     129:	73 73                	jae    19e <sysEnter_Vector-0x12fe62>
     12b:	2f                   	das    
     12c:	6c                   	ins    BYTE PTR es:[edi],dx
     12d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     134:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     140:	78 2d                	js     16f <sysEnter_Vector-0x12fe91>
     142:	67 6e                	outs   dx,BYTE PTR ds:[si]
     144:	75 2f                	jne    175 <sysEnter_Vector-0x12fe8b>
     146:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14b:	2f                   	das    
     14c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     153:	00 00                	add    BYTE PTR [eax],al
     155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
     157:	72 63                	jb     1bc <sysEnter_Vector-0x12fe44>
     159:	73 70                	jae    1cb <sysEnter_Vector-0x12fe35>
     15b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     15f:	01 00                	add    DWORD PTR [eax],eax
     161:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     164:	6c                   	ins    BYTE PTR es:[edi],dx
     165:	6c                   	ins    BYTE PTR es:[edi],dx
     166:	6f                   	outs   dx,DWORD PTR ds:[esi]
     167:	63 2e                	arpl   WORD PTR [esi],bp
     169:	68 00 02 00 00       	push   0x200
     16e:	6c                   	ins    BYTE PTR es:[edi],dx
     16f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     176:	4f                   	dec    edi
     177:	53                   	push   ebx
     178:	2e                   	cs
     179:	68 00 02 00 00       	push   0x200
     17e:	73 74                	jae    1f4 <sysEnter_Vector-0x12fe0c>
     180:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     187:	63 
     188:	2e                   	cs
     189:	68 00 03 00 00       	push   0x300
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	05 02 70 00 00       	add    eax,0x7002
     195:	9f                   	lahf   
     196:	03 25 01 e7 9f 59    	add    esp,DWORD PTR ds:0x599fe701
     19c:	75 00                	jne    19e <sysEnter_Vector-0x12fe62>
     19e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1a1:	aa                   	stos   BYTE PTR es:[edi],al
     1a2:	00 02                	add    BYTE PTR [edx],al
     1a4:	04 01                	add    al,0x1
     1a6:	06                   	push   es
     1a7:	3c 00                	cmp    al,0x0
     1a9:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1ac:	06                   	push   es
     1ad:	73 00                	jae    1af <sysEnter_Vector-0x12fe51>
     1af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1b2:	06                   	push   es
     1b3:	82                   	(bad)  
     1b4:	06                   	push   es
     1b5:	6d                   	ins    DWORD PTR es:[edi],dx
     1b6:	91                   	xchg   ecx,eax
     1b7:	4d                   	dec    ebp
     1b8:	e7 9f                	out    0x9f,eax
     1ba:	59                   	pop    ecx
     1bb:	75 00                	jne    1bd <sysEnter_Vector-0x12fe43>
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	aa                   	stos   BYTE PTR es:[edi],al
     1c1:	00 02                	add    BYTE PTR [edx],al
     1c3:	04 01                	add    al,0x1
     1c5:	06                   	push   es
     1c6:	3c 00                	cmp    al,0x0
     1c8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1cb:	06                   	push   es
     1cc:	73 00                	jae    1ce <sysEnter_Vector-0x12fe32>
     1ce:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1d1:	06                   	push   es
     1d2:	82                   	(bad)  
     1d3:	06                   	push   es
     1d4:	6d                   	ins    DWORD PTR es:[edi],dx
     1d5:	91                   	xchg   ecx,eax
     1d6:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1d9:	01 01                	add    DWORD PTR [ecx],eax
     1db:	d4 00                	aam    0x0
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	02 00                	add    al,BYTE PTR [eax]
     1e1:	b0 00                	mov    al,0x0
     1e3:	00 00                	add    BYTE PTR [eax],al
     1e5:	01 01                	add    DWORD PTR [ecx],eax
     1e7:	fb                   	sti    
     1e8:	0e                   	push   cs
     1e9:	0d 00 01 01 01       	or     eax,0x1010100
     1ee:	01 00                	add    DWORD PTR [eax],eax
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	01 00                	add    DWORD PTR [eax],eax
     1f4:	00 01                	add    BYTE PTR [ecx],al
     1f6:	2e                   	cs
     1f7:	2e                   	cs
     1f8:	2f                   	das    
     1f9:	2e                   	cs
     1fa:	2e                   	cs
     1fb:	2f                   	das    
     1fc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     200:	6a 2f                	push   0x2f
     202:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     205:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     20c:	63 2f                	arpl   WORD PTR [edi],bp
     20e:	73 74                	jae    284 <sysEnter_Vector-0x12fd7c>
     210:	72 69                	jb     27b <sysEnter_Vector-0x12fd85>
     212:	6e                   	outs   dx,BYTE PTR ds:[esi]
     213:	67 73 00             	addr16 jae 216 <sysEnter_Vector-0x12fdea>
     216:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     21d:	00 2f                	add    BYTE PTR [edi],ch
     21f:	68 6f 6d 65 2f       	push   0x2f656d6f
     224:	79 6f                	jns    295 <sysEnter_Vector-0x12fd6b>
     226:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     22d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     230:	73 73                	jae    2a5 <sysEnter_Vector-0x12fd5b>
     232:	2f                   	das    
     233:	6c                   	ins    BYTE PTR es:[edi],dx
     234:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     23b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     241:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     247:	78 2d                	js     276 <sysEnter_Vector-0x12fd8a>
     249:	67 6e                	outs   dx,BYTE PTR ds:[si]
     24b:	75 2f                	jne    27c <sysEnter_Vector-0x12fd84>
     24d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     252:	2f                   	das    
     253:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	73 74                	jae    2d2 <sysEnter_Vector-0x12fd2e>
     25e:	72 74                	jb     2d4 <sysEnter_Vector-0x12fd2c>
     260:	6f                   	outs   dx,DWORD PTR ds:[esi]
     261:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	00 00                	add    BYTE PTR [eax],al
     268:	6d                   	ins    DWORD PTR es:[edi],dx
     269:	61                   	popa   
     26a:	6c                   	ins    BYTE PTR es:[edi],dx
     26b:	6c                   	ins    BYTE PTR es:[edi],dx
     26c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     26d:	63 2e                	arpl   WORD PTR [esi],bp
     26f:	68 00 02 00 00       	push   0x200
     274:	6c                   	ins    BYTE PTR es:[edi],dx
     275:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     27c:	4f                   	dec    edi
     27d:	53                   	push   ebx
     27e:	2e                   	cs
     27f:	68 00 02 00 00       	push   0x200
     284:	73 74                	jae    2fa <sysEnter_Vector-0x12fd06>
     286:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     28d:	63 
     28e:	2e                   	cs
     28f:	68 00 03 00 00       	push   0x300
     294:	00 00                	add    BYTE PTR [eax],al
     296:	05 02 1c 01 00       	add    eax,0x11c02
     29b:	9f                   	lahf   
     29c:	03 28                	add    ebp,DWORD PTR [eax]
     29e:	01 f6                	add    esi,esi
     2a0:	67 92                	addr16 xchg edx,eax
     2a2:	08 2f                	or     BYTE PTR [edi],ch
     2a4:	75 08                	jne    2ae <sysEnter_Vector-0x12fd52>
     2a6:	2f                   	das    
     2a7:	4b                   	dec    ebx
     2a8:	08 c9                	or     cl,cl
     2aa:	c9                   	leave  
     2ab:	08 21                	or     BYTE PTR [ecx],ah
     2ad:	3d 02 07 00 01       	cmp    eax,0x1000702
     2b2:	01 10                	add    DWORD PTR [eax],edx
     2b4:	01 00                	add    DWORD PTR [eax],eax
     2b6:	00 02                	add    BYTE PTR [edx],al
     2b8:	00 93 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dl
     2be:	01 fb                	add    ebx,edi
     2c0:	0e                   	push   cs
     2c1:	0d 00 01 01 01       	or     eax,0x1010100
     2c6:	01 00                	add    DWORD PTR [eax],eax
     2c8:	00 00                	add    BYTE PTR [eax],al
     2ca:	01 00                	add    DWORD PTR [eax],eax
     2cc:	00 01                	add    BYTE PTR [ecx],al
     2ce:	73 72                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d0:	63 00                	arpl   WORD PTR [eax],ax
     2d2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2d9:	00 2f                	add    BYTE PTR [edi],ch
     2db:	68 6f 6d 65 2f       	push   0x2f656d6f
     2e0:	79 6f                	jns    351 <sysEnter_Vector-0x12fcaf>
     2e2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2e9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     2ec:	73 73                	jae    361 <sysEnter_Vector-0x12fc9f>
     2ee:	2f                   	das    
     2ef:	6c                   	ins    BYTE PTR es:[edi],dx
     2f0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2f7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2fd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     303:	78 2d                	js     332 <sysEnter_Vector-0x12fcce>
     305:	67 6e                	outs   dx,BYTE PTR ds:[si]
     307:	75 2f                	jne    338 <sysEnter_Vector-0x12fcc8>
     309:	35 2e 33 2e 30       	xor    eax,0x302e332e
     30e:	2f                   	das    
     30f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     316:	00 00                	add    BYTE PTR [eax],al
     318:	61                   	popa   
     319:	73 63                	jae    37e <sysEnter_Vector-0x12fc82>
     31b:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     322:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     325:	6c                   	ins    BYTE PTR es:[edi],dx
     326:	6c                   	ins    BYTE PTR es:[edi],dx
     327:	6f                   	outs   dx,DWORD PTR ds:[esi]
     328:	63 2e                	arpl   WORD PTR [esi],bp
     32a:	68 00 02 00 00       	push   0x200
     32f:	6c                   	ins    BYTE PTR es:[edi],dx
     330:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     337:	4f                   	dec    edi
     338:	53                   	push   ebx
     339:	2e                   	cs
     33a:	68 00 02 00 00       	push   0x200
     33f:	73 74                	jae    3b5 <sysEnter_Vector-0x12fc4b>
     341:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     348:	63 
     349:	2e                   	cs
     34a:	68 00 03 00 00       	push   0x300
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	05 02 b4 01 00       	add    eax,0x1b402
     356:	9f                   	lahf   
     357:	03 09                	add    ecx,DWORD PTR [ecx]
     359:	01 08                	add    DWORD PTR [eax],ecx
     35b:	16                   	push   ss
     35c:	00 02                	add    BYTE PTR [edx],al
     35e:	04 03                	add    al,0x3
     360:	08 d7                	or     bh,dl
     362:	00 02                	add    BYTE PTR [edx],al
     364:	04 03                	add    al,0x3
     366:	d7                   	xlat   BYTE PTR ds:[ebx]
     367:	00 02                	add    BYTE PTR [edx],al
     369:	04 03                	add    al,0x3
     36b:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     36e:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     371:	d3 00                	rol    DWORD PTR [eax],cl
     373:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     376:	06                   	push   es
     377:	82                   	(bad)  
     378:	06                   	push   es
     379:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     37c:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     381:	04 01                	add    al,0x1
     383:	76 00                	jbe    385 <sysEnter_Vector-0x12fc7b>
     385:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     388:	02 3b                	add    bh,BYTE PTR [ebx]
     38a:	13 08                	adc    ecx,DWORD PTR [eax]
     38c:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     390:	ad                   	lods   eax,DWORD PTR ds:[esi]
     391:	d7                   	xlat   BYTE PTR ds:[ebx]
     392:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     398:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39b:	76 00                	jbe    39d <sysEnter_Vector-0x12fc63>
     39d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3a0:	02 3b                	add    bh,BYTE PTR [ebx]
     3a2:	13 08                	adc    ecx,DWORD PTR [eax]
     3a4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3a8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3aa:	6a f3                	push   0xfffffff3
     3ac:	78 00                	js     3ae <sysEnter_Vector-0x12fc52>
     3ae:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3b1:	91                   	xchg   ecx,eax
     3b2:	00 02                	add    BYTE PTR [edx],al
     3b4:	04 03                	add    al,0x3
     3b6:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3b9:	00 02                	add    BYTE PTR [edx],al
     3bb:	04 01                	add    al,0x1
     3bd:	06                   	push   es
     3be:	4a                   	dec    edx
     3bf:	06                   	push   es
     3c0:	e8 3d 02 02 00       	call   20602 <sysEnter_Vector-0x10f9fe>
     3c5:	01 01                	add    DWORD PTR [ecx],eax
     3c7:	06                   	push   es
     3c8:	01 00                	add    DWORD PTR [eax],eax
     3ca:	00 02                	add    BYTE PTR [edx],al
     3cc:	00 99 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],bl
     3d2:	01 fb                	add    ebx,edi
     3d4:	0e                   	push   cs
     3d5:	0d 00 01 01 01       	or     eax,0x1010100
     3da:	01 00                	add    DWORD PTR [eax],eax
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	01 00                	add    DWORD PTR [eax],eax
     3e0:	00 01                	add    BYTE PTR [ecx],al
     3e2:	73 72                	jae    456 <sysEnter_Vector-0x12fbaa>
     3e4:	63 00                	arpl   WORD PTR [eax],ax
     3e6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3ed:	00 2f                	add    BYTE PTR [edi],ch
     3ef:	68 6f 6d 65 2f       	push   0x2f656d6f
     3f4:	79 6f                	jns    465 <sysEnter_Vector-0x12fb9b>
     3f6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     3fd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     400:	73 73                	jae    475 <sysEnter_Vector-0x12fb8b>
     402:	2f                   	das    
     403:	6c                   	ins    BYTE PTR es:[edi],dx
     404:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     40b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     411:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     417:	78 2d                	js     446 <sysEnter_Vector-0x12fbba>
     419:	67 6e                	outs   dx,BYTE PTR ds:[si]
     41b:	75 2f                	jne    44c <sysEnter_Vector-0x12fbb4>
     41d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     422:	2f                   	das    
     423:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     42a:	00 00                	add    BYTE PTR [eax],al
     42c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     42e:	76 69                	jbe    499 <sysEnter_Vector-0x12fb67>
     430:	72 6f                	jb     4a1 <sysEnter_Vector-0x12fb5f>
     432:	6e                   	outs   dx,BYTE PTR ds:[esi]
     433:	6d                   	ins    DWORD PTR es:[edi],dx
     434:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     436:	74 2e                	je     466 <sysEnter_Vector-0x12fb9a>
     438:	63 00                	arpl   WORD PTR [eax],ax
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     43f:	6c                   	ins    BYTE PTR es:[edi],dx
     440:	6c                   	ins    BYTE PTR es:[edi],dx
     441:	6f                   	outs   dx,DWORD PTR ds:[esi]
     442:	63 2e                	arpl   WORD PTR [esi],bp
     444:	68 00 02 00 00       	push   0x200
     449:	6c                   	ins    BYTE PTR es:[edi],dx
     44a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     451:	4f                   	dec    edi
     452:	53                   	push   ebx
     453:	2e                   	cs
     454:	68 00 02 00 00       	push   0x200
     459:	73 74                	jae    4cf <sysEnter_Vector-0x12fb31>
     45b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     462:	63 
     463:	2e                   	cs
     464:	68 00 03 00 00       	push   0x300
     469:	00 00                	add    BYTE PTR [eax],al
     46b:	05 02 00 04 00       	add    eax,0x40002
     470:	9f                   	lahf   
     471:	03 09                	add    ecx,DWORD PTR [ecx]
     473:	01 08                	add    DWORD PTR [eax],ecx
     475:	21 91 02 36 14 02    	and    DWORD PTR [ecx+0x2143602],edx
     47b:	39 13                	cmp    DWORD PTR [ebx],edx
     47d:	00 02                	add    BYTE PTR [edx],al
     47f:	04 02                	add    al,0x2
     481:	7e 00                	jle    483 <sysEnter_Vector-0x12fb7d>
     483:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     486:	06                   	push   es
     487:	4a                   	dec    edx
     488:	06                   	push   es
     489:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     48a:	59                   	pop    ecx
     48b:	5b                   	pop    ebx
     48c:	08 21                	or     BYTE PTR [ecx],ah
     48e:	76 bb                	jbe    44b <sysEnter_Vector-0x12fbb5>
     490:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     496:	14 08                	adc    al,0x8
     498:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     49f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4a2:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     4a5:	00 02                	add    BYTE PTR [edx],al
     4a7:	04 01                	add    al,0x1
     4a9:	06                   	push   es
     4aa:	4a                   	dec    edx
     4ab:	06                   	push   es
     4ac:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     4af:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     4b4:	08 f3                	or     bl,dh
     4b6:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     4bc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4bf:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     4c2:	00 02                	add    BYTE PTR [edx],al
     4c4:	04 01                	add    al,0x1
     4c6:	06                   	push   es
     4c7:	4a                   	dec    edx
     4c8:	06                   	push   es
     4c9:	03 0b                	add    ecx,DWORD PTR [ebx]
     4cb:	9e                   	sahf   
     4cc:	02 05 00 01 01 f8    	add    al,BYTE PTR ds:0xf8010100
     4d2:	00 00                	add    BYTE PTR [eax],al
     4d4:	00 02                	add    BYTE PTR [edx],al
     4d6:	00 cd                	add    ch,cl
     4d8:	00 00                	add    BYTE PTR [eax],al
     4da:	00 01                	add    BYTE PTR [ecx],al
     4dc:	01 fb                	add    ebx,edi
     4de:	0e                   	push   cs
     4df:	0d 00 01 01 01       	or     eax,0x1010100
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 00                	add    BYTE PTR [eax],al
     4e8:	01 00                	add    DWORD PTR [eax],eax
     4ea:	00 01                	add    BYTE PTR [ecx],al
     4ec:	73 72                	jae    560 <sysEnter_Vector-0x12faa0>
     4ee:	63 00                	arpl   WORD PTR [eax],ax
     4f0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4f7:	00 2f                	add    BYTE PTR [edi],ch
     4f9:	68 6f 6d 65 2f       	push   0x2f656d6f
     4fe:	79 6f                	jns    56f <sysEnter_Vector-0x12fa91>
     500:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     507:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     50a:	73 73                	jae    57f <sysEnter_Vector-0x12fa81>
     50c:	2f                   	das    
     50d:	6c                   	ins    BYTE PTR es:[edi],dx
     50e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     515:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     51b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     521:	78 2d                	js     550 <sysEnter_Vector-0x12fab0>
     523:	67 6e                	outs   dx,BYTE PTR ds:[si]
     525:	75 2f                	jne    556 <sysEnter_Vector-0x12faaa>
     527:	35 2e 33 2e 30       	xor    eax,0x302e332e
     52c:	2f                   	das    
     52d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     534:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     537:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     53b:	65                   	gs
     53c:	2f                   	das    
     53d:	2e                   	cs
     53e:	2e                   	cs
     53f:	2f                   	das    
     540:	2e                   	cs
     541:	2e                   	cs
     542:	2f                   	das    
     543:	2e                   	cs
     544:	2e                   	cs
     545:	2f                   	das    
     546:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     54a:	6a 2f                	push   0x2f
     54c:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     54f:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     556:	6e                   	outs   dx,BYTE PTR ds:[esi]
     557:	65                   	gs
     558:	6c                   	ins    BYTE PTR es:[edi],dx
     559:	2f                   	das    
     55a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     561:	00 00                	add    BYTE PTR [eax],al
     563:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     56a:	01 00                	add    DWORD PTR [eax],eax
     56c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     56f:	6c                   	ins    BYTE PTR es:[edi],dx
     570:	6c                   	ins    BYTE PTR es:[edi],dx
     571:	6f                   	outs   dx,DWORD PTR ds:[esi]
     572:	63 2e                	arpl   WORD PTR [esi],bp
     574:	68 00 02 00 00       	push   0x200
     579:	6c                   	ins    BYTE PTR es:[edi],dx
     57a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     581:	4f                   	dec    edi
     582:	53                   	push   ebx
     583:	2e                   	cs
     584:	68 00 02 00 00       	push   0x200
     589:	73 74                	jae    5ff <sysEnter_Vector-0x12fa01>
     58b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     592:	63 
     593:	2e                   	cs
     594:	68 00 03 00 00       	push   0x300
     599:	73 79                	jae    614 <sysEnter_Vector-0x12f9ec>
     59b:	73 63                	jae    600 <sysEnter_Vector-0x12fa00>
     59d:	61                   	popa   
     59e:	6c                   	ins    BYTE PTR es:[edi],dx
     59f:	6c                   	ins    BYTE PTR es:[edi],dx
     5a0:	73 2e                	jae    5d0 <sysEnter_Vector-0x12fa30>
     5a2:	68 00 04 00 00       	push   0x400
     5a7:	00 00                	add    BYTE PTR [eax],al
     5a9:	05 02 6c 06 00       	add    eax,0x66c02
     5ae:	9f                   	lahf   
     5af:	03 09                	add    ecx,DWORD PTR [ecx]
     5b1:	01 08                	add    DWORD PTR [eax],ecx
     5b3:	13 08                	adc    ecx,DWORD PTR [eax]
     5b5:	67 5b                	addr16 pop ebx
     5b7:	08 13                	or     BYTE PTR [ebx],dl
     5b9:	08 2f                	or     BYTE PTR [edi],ch
     5bb:	69 e5 08 d7 77 e5    	imul   esp,ebp,0xe577d708
     5c1:	08 d7                	or     bh,dl
     5c3:	78 08                	js     5cd <sysEnter_Vector-0x12fa33>
     5c5:	13 08                	adc    ecx,DWORD PTR [eax]
     5c7:	9f                   	lahf   
     5c8:	02 05 00 01 01 29    	add    al,BYTE PTR ds:0x29010100
     5ce:	01 00                	add    DWORD PTR [eax],eax
     5d0:	00 02                	add    BYTE PTR [edx],al
     5d2:	00 d4                	add    ah,dl
     5d4:	00 00                	add    BYTE PTR [eax],al
     5d6:	00 01                	add    BYTE PTR [ecx],al
     5d8:	01 fb                	add    ebx,edi
     5da:	0e                   	push   cs
     5db:	0d 00 01 01 01       	or     eax,0x1010100
     5e0:	01 00                	add    DWORD PTR [eax],eax
     5e2:	00 00                	add    BYTE PTR [eax],al
     5e4:	01 00                	add    DWORD PTR [eax],eax
     5e6:	00 01                	add    BYTE PTR [ecx],al
     5e8:	73 72                	jae    65c <sysEnter_Vector-0x12f9a4>
     5ea:	63 2f                	arpl   WORD PTR [edi],bp
     5ec:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     5f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5f4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     5f8:	65 00 2f             	add    BYTE PTR gs:[edi],ch
     5fb:	68 6f 6d 65 2f       	push   0x2f656d6f
     600:	79 6f                	jns    671 <sysEnter_Vector-0x12f98f>
     602:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     609:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     60c:	73 73                	jae    681 <sysEnter_Vector-0x12f97f>
     60e:	2f                   	das    
     60f:	6c                   	ins    BYTE PTR es:[edi],dx
     610:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     617:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     61d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     623:	78 2d                	js     652 <sysEnter_Vector-0x12f9ae>
     625:	67 6e                	outs   dx,BYTE PTR ds:[si]
     627:	75 2f                	jne    658 <sysEnter_Vector-0x12f9a8>
     629:	35 2e 33 2e 30       	xor    eax,0x302e332e
     62e:	2f                   	das    
     62f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     636:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     639:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     63d:	65                   	gs
     63e:	2f                   	das    
     63f:	2e                   	cs
     640:	2e                   	cs
     641:	2f                   	das    
     642:	2e                   	cs
     643:	2e                   	cs
     644:	2f                   	das    
     645:	2e                   	cs
     646:	2e                   	cs
     647:	2f                   	das    
     648:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     64c:	6a 2f                	push   0x2f
     64e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     651:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     658:	6e                   	outs   dx,BYTE PTR ds:[esi]
     659:	65                   	gs
     65a:	6c                   	ins    BYTE PTR es:[edi],dx
     65b:	2f                   	das    
     65c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     663:	00 00                	add    BYTE PTR [eax],al
     665:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     66c:	00 01                	add    BYTE PTR [ecx],al
     66e:	00 00                	add    BYTE PTR [eax],al
     670:	6d                   	ins    DWORD PTR es:[edi],dx
     671:	61                   	popa   
     672:	6c                   	ins    BYTE PTR es:[edi],dx
     673:	6c                   	ins    BYTE PTR es:[edi],dx
     674:	6f                   	outs   dx,DWORD PTR ds:[esi]
     675:	63 2e                	arpl   WORD PTR [esi],bp
     677:	68 00 02 00 00       	push   0x200
     67c:	6c                   	ins    BYTE PTR es:[edi],dx
     67d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     684:	4f                   	dec    edi
     685:	53                   	push   ebx
     686:	2e                   	cs
     687:	68 00 02 00 00       	push   0x200
     68c:	73 74                	jae    702 <sysEnter_Vector-0x12f8fe>
     68e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     695:	63 
     696:	2e                   	cs
     697:	68 00 03 00 00       	push   0x300
     69c:	73 79                	jae    717 <sysEnter_Vector-0x12f8e9>
     69e:	73 63                	jae    703 <sysEnter_Vector-0x12f8fd>
     6a0:	61                   	popa   
     6a1:	6c                   	ins    BYTE PTR es:[edi],dx
     6a2:	6c                   	ins    BYTE PTR es:[edi],dx
     6a3:	73 2e                	jae    6d3 <sysEnter_Vector-0x12f92d>
     6a5:	68 00 04 00 00       	push   0x400
     6aa:	00 00                	add    BYTE PTR [eax],al
     6ac:	05 02 60 07 00       	add    eax,0x76002
     6b1:	9f                   	lahf   
     6b2:	03 0f                	add    ecx,DWORD PTR [edi]
     6b4:	01 d7                	add    edi,edx
     6b6:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6bc:	75 4b                	jne    709 <sysEnter_Vector-0x12f8f7>
     6be:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     6c4:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     6c9:	6a 08                	push   0x8
     6cb:	14 75                	adc    al,0x75
     6cd:	84 68 00             	test   BYTE PTR [eax+0x0],ch
     6d0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     6d3:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     6d6:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     6dc:	06                   	push   es
     6dd:	66 06                	pushw  es
     6df:	68 ad 68 68 76       	push   0x766868ad
     6e4:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     6e7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     6ea:	06                   	push   es
     6eb:	ac                   	lods   al,BYTE PTR ds:[esi]
     6ec:	06                   	push   es
     6ed:	68 5b 00 02 04       	push   0x402005b
     6f2:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     6f8:	01 01                	add    DWORD PTR [ecx],eax
     6fa:	64 02 00             	add    al,BYTE PTR fs:[eax]
     6fd:	00 02                	add    BYTE PTR [edx],al
     6ff:	00 eb                	add    bl,ch
     701:	00 00                	add    BYTE PTR [eax],al
     703:	00 01                	add    BYTE PTR [ecx],al
     705:	01 fb                	add    ebx,edi
     707:	0e                   	push   cs
     708:	0d 00 01 01 01       	or     eax,0x1010100
     70d:	01 00                	add    DWORD PTR [eax],eax
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	01 00                	add    DWORD PTR [eax],eax
     713:	00 01                	add    BYTE PTR [ecx],al
     715:	73 72                	jae    789 <sysEnter_Vector-0x12f877>
     717:	63 00                	arpl   WORD PTR [eax],ax
     719:	2f                   	das    
     71a:	68 6f 6d 65 2f       	push   0x2f656d6f
     71f:	79 6f                	jns    790 <sysEnter_Vector-0x12f870>
     721:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     728:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     72b:	73 73                	jae    7a0 <sysEnter_Vector-0x12f860>
     72d:	2f                   	das    
     72e:	6c                   	ins    BYTE PTR es:[edi],dx
     72f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     736:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     73c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     742:	78 2d                	js     771 <sysEnter_Vector-0x12f88f>
     744:	67 6e                	outs   dx,BYTE PTR ds:[si]
     746:	75 2f                	jne    777 <sysEnter_Vector-0x12f889>
     748:	35 2e 33 2e 30       	xor    eax,0x302e332e
     74d:	2f                   	das    
     74e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     755:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     758:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     75c:	65                   	gs
     75d:	2f                   	das    
     75e:	2e                   	cs
     75f:	2e                   	cs
     760:	2f                   	das    
     761:	2e                   	cs
     762:	2e                   	cs
     763:	2f                   	das    
     764:	2e                   	cs
     765:	2e                   	cs
     766:	2f                   	das    
     767:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     76b:	6a 2f                	push   0x2f
     76d:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     770:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     777:	6e                   	outs   dx,BYTE PTR ds:[esi]
     778:	65                   	gs
     779:	6c                   	ins    BYTE PTR es:[edi],dx
     77a:	2f                   	das    
     77b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     782:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     785:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     789:	65 00 00             	add    BYTE PTR gs:[eax],al
     78c:	6c                   	ins    BYTE PTR es:[edi],dx
     78d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     794:	4f                   	dec    edi
     795:	53                   	push   ebx
     796:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     799:	01 00                	add    DWORD PTR [eax],eax
     79b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     79e:	64                   	fs
     79f:	61                   	popa   
     7a0:	72 67                	jb     809 <sysEnter_Vector-0x12f7f7>
     7a2:	2e                   	cs
     7a3:	68 00 02 00 00       	push   0x200
     7a8:	73 74                	jae    81e <sysEnter_Vector-0x12f7e2>
     7aa:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7b1:	63 
     7b2:	2e                   	cs
     7b3:	68 00 02 00 00       	push   0x200
     7b8:	73 74                	jae    82e <sysEnter_Vector-0x12f7d2>
     7ba:	64                   	fs
     7bb:	64                   	fs
     7bc:	65                   	gs
     7bd:	66                   	data16
     7be:	2e                   	cs
     7bf:	68 00 02 00 00       	push   0x200
     7c4:	73 79                	jae    83f <sysEnter_Vector-0x12f7c1>
     7c6:	73 63                	jae    82b <sysEnter_Vector-0x12f7d5>
     7c8:	61                   	popa   
     7c9:	6c                   	ins    BYTE PTR es:[edi],dx
     7ca:	6c                   	ins    BYTE PTR es:[edi],dx
     7cb:	73 2e                	jae    7fb <sysEnter_Vector-0x12f805>
     7cd:	68 00 03 00 00       	push   0x300
     7d2:	6d                   	ins    DWORD PTR es:[edi],dx
     7d3:	61                   	popa   
     7d4:	6c                   	ins    BYTE PTR es:[edi],dx
     7d5:	6c                   	ins    BYTE PTR es:[edi],dx
     7d6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7d7:	63 2e                	arpl   WORD PTR [esi],bp
     7d9:	68 00 04 00 00       	push   0x400
     7de:	6c                   	ins    BYTE PTR es:[edi],dx
     7df:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7e6:	4f                   	dec    edi
     7e7:	53                   	push   ebx
     7e8:	2e                   	cs
     7e9:	68 00 04 00 00       	push   0x400
     7ee:	00 00                	add    BYTE PTR [eax],al
     7f0:	05 02 c8 08 00       	add    eax,0x8c802
     7f5:	9f                   	lahf   
     7f6:	03 10                	add    edx,DWORD PTR [eax]
     7f8:	01 08                	add    DWORD PTR [eax],ecx
     7fa:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     7fd:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     803:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     809:	75 08                	jne    813 <sysEnter_Vector-0x12f7ed>
     80b:	9f                   	lahf   
     80c:	3d 77 08 21 75       	cmp    eax,0x75210877
     811:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     817:	75 08                	jne    821 <sysEnter_Vector-0x12f7df>
     819:	d7                   	xlat   BYTE PTR ds:[ebx]
     81a:	3d 77 08 21 08       	cmp    eax,0x8210877
     81f:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     823:	c9                   	leave  
     824:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     827:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     82d:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     830:	13 75 77             	adc    esi,DWORD PTR [ebp+0x77]
     833:	08 22                	or     BYTE PTR [edx],ah
     835:	68 08 c9 08 83       	push   0x8308c908
     83a:	59                   	pop    ecx
     83b:	5b                   	pop    ebx
     83c:	08 22                	or     BYTE PTR [edx],ah
     83e:	68 08 c9 08 84       	push   0x8408c908
     843:	59                   	pop    ecx
     844:	5b                   	pop    ebx
     845:	f4                   	hlt    
     846:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     84a:	31 f4                	xor    esp,esi
     84c:	68 08 91 5a 31       	push   0x315a9108
     851:	08 21                	or     BYTE PTR [ecx],ah
     853:	02 54 13 59          	add    dl,BYTE PTR [ebx+edx*1+0x59]
     857:	77 c9                	ja     822 <sysEnter_Vector-0x12f7de>
     859:	c9                   	leave  
     85a:	3f                   	aas    
     85b:	c9                   	leave  
     85c:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     862:	3d 31 f3 75 08       	cmp    eax,0x875f331
     867:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     86c:	08 21                	or     BYTE PTR [ecx],ah
     86e:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     875:	67 02 22             	add    ah,BYTE PTR [bp+si]
     878:	14 08                	adc    al,0x8
     87a:	ae                   	scas   al,BYTE PTR es:[edi]
     87b:	4c                   	dec    esp
     87c:	ca 08 4b             	retf   0x4b08
     87f:	91                   	xchg   ecx,eax
     880:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     886:	67 02 2f             	add    ch,BYTE PTR [bx]
     889:	14 00                	adc    al,0x0
     88b:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     88e:	02 31                	add    dh,BYTE PTR [ecx]
     890:	13 00                	adc    eax,DWORD PTR [eax]
     892:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     895:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     89b:	bb 00 02 04 02       	mov    ebx,0x2040200
     8a0:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     8a3:	00 02                	add    BYTE PTR [edx],al
     8a5:	04 01                	add    al,0x1
     8a7:	06                   	push   es
     8a8:	4a                   	dec    edx
     8a9:	06                   	push   es
     8aa:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     8ad:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     8b3:	f3 75 08             	repz jne 8be <sysEnter_Vector-0x12f742>
     8b6:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     8bb:	c9                   	leave  
     8bc:	c9                   	leave  
     8bd:	32 c9                	xor    cl,cl
     8bf:	f3 40                	repz inc eax
     8c1:	c9                   	leave  
     8c2:	08 13                	or     BYTE PTR [ebx],dl
     8c4:	32 f5                	xor    dh,ch
     8c6:	75 76                	jne    93e <sysEnter_Vector-0x12f6c2>
     8c8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     8c9:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     8ce:	67 75 91             	addr16 jne 862 <sysEnter_Vector-0x12f79e>
     8d1:	5a                   	pop    edx
     8d2:	75 67                	jne    93b <sysEnter_Vector-0x12f6c5>
     8d4:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     8d7:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     8dd:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     8e2:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     8e6:	3c 44                	cmp    al,0x44
     8e8:	00 02                	add    BYTE PTR [edx],al
     8ea:	04 02                	add    al,0x2
     8ec:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     8ef:	00 02                	add    BYTE PTR [edx],al
     8f1:	04 01                	add    al,0x1
     8f3:	06                   	push   es
     8f4:	4a                   	dec    edx
     8f5:	00 02                	add    BYTE PTR [edx],al
     8f7:	04 03                	add    al,0x3
     8f9:	82                   	(bad)  
     8fa:	06                   	push   es
     8fb:	03 23                	add    esp,DWORD PTR [ebx]
     8fd:	d6                   	(bad)  
     8fe:	00 02                	add    BYTE PTR [edx],al
     900:	04 01                	add    al,0x1
     902:	06                   	push   es
     903:	66 06                	pushw  es
     905:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     908:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     90d:	31 08                	xor    DWORD PTR [eax],ecx
     90f:	4d                   	dec    ebp
     910:	08 21                	or     BYTE PTR [ecx],ah
     912:	92                   	xchg   edx,eax
     913:	08 91 00 02 04 01    	or     BYTE PTR [ecx+0x1040200],dl
     919:	08 23                	or     BYTE PTR [ebx],ah
     91b:	00 02                	add    BYTE PTR [edx],al
     91d:	04 01                	add    al,0x1
     91f:	08 75 00             	or     BYTE PTR [ebp+0x0],dh
     922:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     925:	ca ca 02             	retf   0x2ca
     928:	27                   	daa    
     929:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     92f:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     932:	02 2f                	add    ch,BYTE PTR [edi]
     934:	14 00                	adc    al,0x0
     936:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     939:	02 31                	add    dh,BYTE PTR [ecx]
     93b:	13 00                	adc    eax,DWORD PTR [eax]
     93d:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     940:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     946:	bb 00 02 04 02       	mov    ebx,0x2040200
     94b:	03 76 74             	add    esi,DWORD PTR [esi+0x74]
     94e:	00 02                	add    BYTE PTR [edx],al
     950:	04 01                	add    al,0x1
     952:	06                   	push   es
     953:	4a                   	dec    edx
     954:	06                   	push   es
     955:	03 0c d6             	add    ecx,DWORD PTR [esi+edx*8]
     958:	3d 5b f3 08 13       	cmp    eax,0x1308f35b
     95d:	02 02                	add    al,BYTE PTR [edx]
     95f:	00 01                	add    BYTE PTR [ecx],al
     961:	01 50 01             	add    DWORD PTR [eax+0x1],edx
     964:	00 00                	add    BYTE PTR [eax],al
     966:	02 00                	add    al,BYTE PTR [eax]
     968:	db 00                	fild   DWORD PTR [eax]
     96a:	00 00                	add    BYTE PTR [eax],al
     96c:	01 01                	add    DWORD PTR [ecx],eax
     96e:	fb                   	sti    
     96f:	0e                   	push   cs
     970:	0d 00 01 01 01       	or     eax,0x1010100
     975:	01 00                	add    DWORD PTR [eax],eax
     977:	00 00                	add    BYTE PTR [eax],al
     979:	01 00                	add    DWORD PTR [eax],eax
     97b:	00 01                	add    BYTE PTR [ecx],al
     97d:	73 72                	jae    9f1 <sysEnter_Vector-0x12f60f>
     97f:	63 00                	arpl   WORD PTR [eax],ax
     981:	2f                   	das    
     982:	68 6f 6d 65 2f       	push   0x2f656d6f
     987:	79 6f                	jns    9f8 <sysEnter_Vector-0x12f608>
     989:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     990:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     993:	73 73                	jae    a08 <sysEnter_Vector-0x12f5f8>
     995:	2f                   	das    
     996:	6c                   	ins    BYTE PTR es:[edi],dx
     997:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     99e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     9a4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     9aa:	78 2d                	js     9d9 <sysEnter_Vector-0x12f627>
     9ac:	67 6e                	outs   dx,BYTE PTR ds:[si]
     9ae:	75 2f                	jne    9df <sysEnter_Vector-0x12f621>
     9b0:	35 2e 33 2e 30       	xor    eax,0x302e332e
     9b5:	2f                   	das    
     9b6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     9bd:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     9c0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9c4:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     9c8:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9cc:	65                   	gs
     9cd:	2f                   	das    
     9ce:	2e                   	cs
     9cf:	2e                   	cs
     9d0:	2f                   	das    
     9d1:	2e                   	cs
     9d2:	2e                   	cs
     9d3:	2f                   	das    
     9d4:	2e                   	cs
     9d5:	2e                   	cs
     9d6:	2f                   	das    
     9d7:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     9db:	6a 2f                	push   0x2f
     9dd:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     9e0:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     9e7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9e8:	65                   	gs
     9e9:	6c                   	ins    BYTE PTR es:[edi],dx
     9ea:	2f                   	das    
     9eb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     9f2:	00 00                	add    BYTE PTR [eax],al
     9f4:	6d                   	ins    DWORD PTR es:[edi],dx
     9f5:	61                   	popa   
     9f6:	6c                   	ins    BYTE PTR es:[edi],dx
     9f7:	6c                   	ins    BYTE PTR es:[edi],dx
     9f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9f9:	63 2e                	arpl   WORD PTR [esi],bp
     9fb:	63 00                	arpl   WORD PTR [eax],ax
     9fd:	01 00                	add    DWORD PTR [eax],eax
     9ff:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     a02:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     a09:	63 
     a0a:	2e                   	cs
     a0b:	68 00 02 00 00       	push   0x200
     a10:	73 74                	jae    a86 <sysEnter_Vector-0x12f57a>
     a12:	64                   	fs
     a13:	64                   	fs
     a14:	65                   	gs
     a15:	66                   	data16
     a16:	2e                   	cs
     a17:	68 00 02 00 00       	push   0x200
     a1c:	6d                   	ins    DWORD PTR es:[edi],dx
     a1d:	61                   	popa   
     a1e:	6c                   	ins    BYTE PTR es:[edi],dx
     a1f:	6c                   	ins    BYTE PTR es:[edi],dx
     a20:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a21:	63 2e                	arpl   WORD PTR [esi],bp
     a23:	68 00 03 00 00       	push   0x300
     a28:	6c                   	ins    BYTE PTR es:[edi],dx
     a29:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     a30:	4f                   	dec    edi
     a31:	53                   	push   ebx
     a32:	2e                   	cs
     a33:	68 00 03 00 00       	push   0x300
     a38:	73 79                	jae    ab3 <sysEnter_Vector-0x12f54d>
     a3a:	73 63                	jae    a9f <sysEnter_Vector-0x12f561>
     a3c:	61                   	popa   
     a3d:	6c                   	ins    BYTE PTR es:[edi],dx
     a3e:	6c                   	ins    BYTE PTR es:[edi],dx
     a3f:	73 2e                	jae    a6f <sysEnter_Vector-0x12f591>
     a41:	68 00 04 00 00       	push   0x400
     a46:	00 00                	add    BYTE PTR [eax],al
     a48:	05 02 04 13 00       	add    eax,0x130402
     a4d:	9f                   	lahf   
     a4e:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
     a51:	08 21                	or     BYTE PTR [ecx],ah
     a53:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
     a56:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     a5b:	f5                   	cmc    
     a5c:	92                   	xchg   edx,eax
     a5d:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     a63:	04 01                	add    al,0x1
     a65:	06                   	push   es
     a66:	66 06                	pushw  es
     a68:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     a6d:	59                   	pop    ecx
     a6e:	31 f5                	xor    ebp,esi
     a70:	68 93 00 02 04       	push   0x4020093
     a75:	02 be 30 03 76 90    	add    bh,BYTE PTR [esi-0x6f89fcd0]
     a7b:	03 0b                	add    ecx,DWORD PTR [ebx]
     a7d:	20 31                	and    BYTE PTR [ecx],dh
     a7f:	08 27                	or     BYTE PTR [edi],ah
     a81:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     a87:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     a8c:	f3 02 26             	repz add ah,BYTE PTR [esi]
     a8f:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     a96:	e5 ad                	in     eax,0xad
     a98:	91                   	xchg   ecx,eax
     a99:	91                   	xchg   ecx,eax
     a9a:	75 08                	jne    aa4 <sysEnter_Vector-0x12f55c>
     a9c:	d7                   	xlat   BYTE PTR ds:[ebx]
     a9d:	d7                   	xlat   BYTE PTR ds:[ebx]
     a9e:	08 13                	or     BYTE PTR [ebx],dl
     aa0:	91                   	xchg   ecx,eax
     aa1:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     aa4:	91                   	xchg   ecx,eax
     aa5:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     aaa:	c9                   	leave  
     aab:	ad                   	lods   eax,DWORD PTR ds:[esi]
     aac:	3f                   	aas    
     aad:	08 13                	or     BYTE PTR [ebx],dl
     aaf:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     ab5:	01 e3                	add    ebx,esp
     ab7:	00 00                	add    BYTE PTR [eax],al
     ab9:	00 02                	add    BYTE PTR [edx],al
     abb:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     ac1:	01 fb                	add    ebx,edi
     ac3:	0e                   	push   cs
     ac4:	0d 00 01 01 01       	or     eax,0x1010100
     ac9:	01 00                	add    DWORD PTR [eax],eax
     acb:	00 00                	add    BYTE PTR [eax],al
     acd:	01 00                	add    DWORD PTR [eax],eax
     acf:	00 01                	add    BYTE PTR [ecx],al
     ad1:	73 72                	jae    b45 <sysEnter_Vector-0x12f4bb>
     ad3:	63 00                	arpl   WORD PTR [eax],ax
     ad5:	2f                   	das    
     ad6:	68 6f 6d 65 2f       	push   0x2f656d6f
     adb:	79 6f                	jns    b4c <sysEnter_Vector-0x12f4b4>
     add:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ae4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ae7:	73 73                	jae    b5c <sysEnter_Vector-0x12f4a4>
     ae9:	2f                   	das    
     aea:	6c                   	ins    BYTE PTR es:[edi],dx
     aeb:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     af2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     af8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     afe:	78 2d                	js     b2d <sysEnter_Vector-0x12f4d3>
     b00:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b02:	75 2f                	jne    b33 <sysEnter_Vector-0x12f4cd>
     b04:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b09:	2f                   	das    
     b0a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b11:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b14:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b18:	65 00 00             	add    BYTE PTR gs:[eax],al
     b1b:	6d                   	ins    DWORD PTR es:[edi],dx
     b1c:	65                   	gs
     b1d:	6d                   	ins    DWORD PTR es:[edi],dx
     b1e:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     b21:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     b24:	01 00                	add    DWORD PTR [eax],eax
     b26:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b29:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b30:	63 
     b31:	2e                   	cs
     b32:	68 00 02 00 00       	push   0x200
     b37:	73 74                	jae    bad <sysEnter_Vector-0x12f453>
     b39:	64                   	fs
     b3a:	64                   	fs
     b3b:	65                   	gs
     b3c:	66                   	data16
     b3d:	2e                   	cs
     b3e:	68 00 02 00 00       	push   0x200
     b43:	6d                   	ins    DWORD PTR es:[edi],dx
     b44:	61                   	popa   
     b45:	6c                   	ins    BYTE PTR es:[edi],dx
     b46:	6c                   	ins    BYTE PTR es:[edi],dx
     b47:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b48:	63 2e                	arpl   WORD PTR [esi],bp
     b4a:	68 00 03 00 00       	push   0x300
     b4f:	6c                   	ins    BYTE PTR es:[edi],dx
     b50:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b57:	4f                   	dec    edi
     b58:	53                   	push   ebx
     b59:	2e                   	cs
     b5a:	68 00 03 00 00       	push   0x300
     b5f:	00 00                	add    BYTE PTR [eax],al
     b61:	05 02 74 16 00       	add    eax,0x167402
     b66:	9f                   	lahf   
     b67:	03 0a                	add    ecx,DWORD PTR [edx]
     b69:	01 f5                	add    ebp,esi
     b6b:	d7                   	xlat   BYTE PTR ds:[ebx]
     b6c:	d7                   	xlat   BYTE PTR ds:[ebx]
     b6d:	68 91 67 68 83       	push   0x83686791
     b72:	91                   	xchg   ecx,eax
     b73:	91                   	xchg   ecx,eax
     b74:	2f                   	das    
     b75:	08 1f                	or     BYTE PTR [edi],bl
     b77:	e8 08 57 ca 84       	call   84ca6284 <sysEnter_Vector+0x84b76284>
     b7c:	68 83 67 68 83       	push   0x83686783
     b81:	91                   	xchg   ecx,eax
     b82:	91                   	xchg   ecx,eax
     b83:	2f                   	das    
     b84:	08 1f                	or     BYTE PTR [edi],bl
     b86:	e8 08 57 ca 5c       	call   5cca6293 <sysEnter_Vector+0x5cb76293>
     b8b:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     b91:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     b97:	3e 02 02             	add    al,BYTE PTR ds:[edx]
     b9a:	00 01                	add    BYTE PTR [ecx],al
     b9c:	01 ca                	add    edx,ecx
     b9e:	00 00                	add    BYTE PTR [eax],al
     ba0:	00 02                	add    BYTE PTR [edx],al
     ba2:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     ba8:	01 fb                	add    ebx,edi
     baa:	0e                   	push   cs
     bab:	0d 00 01 01 01       	or     eax,0x1010100
     bb0:	01 00                	add    DWORD PTR [eax],eax
     bb2:	00 00                	add    BYTE PTR [eax],al
     bb4:	01 00                	add    DWORD PTR [eax],eax
     bb6:	00 01                	add    BYTE PTR [ecx],al
     bb8:	73 72                	jae    c2c <sysEnter_Vector-0x12f3d4>
     bba:	63 00                	arpl   WORD PTR [eax],ax
     bbc:	2f                   	das    
     bbd:	68 6f 6d 65 2f       	push   0x2f656d6f
     bc2:	79 6f                	jns    c33 <sysEnter_Vector-0x12f3cd>
     bc4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     bcb:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     bce:	73 73                	jae    c43 <sysEnter_Vector-0x12f3bd>
     bd0:	2f                   	das    
     bd1:	6c                   	ins    BYTE PTR es:[edi],dx
     bd2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     bd9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     bdf:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     be5:	78 2d                	js     c14 <sysEnter_Vector-0x12f3ec>
     be7:	67 6e                	outs   dx,BYTE PTR ds:[si]
     be9:	75 2f                	jne    c1a <sysEnter_Vector-0x12f3e6>
     beb:	35 2e 33 2e 30       	xor    eax,0x302e332e
     bf0:	2f                   	das    
     bf1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     bf8:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     bfb:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     bff:	65 00 00             	add    BYTE PTR gs:[eax],al
     c02:	6d                   	ins    DWORD PTR es:[edi],dx
     c03:	65                   	gs
     c04:	6d                   	ins    DWORD PTR es:[edi],dx
     c05:	73 65                	jae    c6c <sysEnter_Vector-0x12f394>
     c07:	74 2e                	je     c37 <sysEnter_Vector-0x12f3c9>
     c09:	63 00                	arpl   WORD PTR [eax],ax
     c0b:	01 00                	add    DWORD PTR [eax],eax
     c0d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c10:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c17:	63 
     c18:	2e                   	cs
     c19:	68 00 02 00 00       	push   0x200
     c1e:	73 74                	jae    c94 <sysEnter_Vector-0x12f36c>
     c20:	64                   	fs
     c21:	64                   	fs
     c22:	65                   	gs
     c23:	66                   	data16
     c24:	2e                   	cs
     c25:	68 00 02 00 00       	push   0x200
     c2a:	6d                   	ins    DWORD PTR es:[edi],dx
     c2b:	61                   	popa   
     c2c:	6c                   	ins    BYTE PTR es:[edi],dx
     c2d:	6c                   	ins    BYTE PTR es:[edi],dx
     c2e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c2f:	63 2e                	arpl   WORD PTR [esi],bp
     c31:	68 00 03 00 00       	push   0x300
     c36:	6c                   	ins    BYTE PTR es:[edi],dx
     c37:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c3e:	4f                   	dec    edi
     c3f:	53                   	push   ebx
     c40:	2e                   	cs
     c41:	68 00 03 00 00       	push   0x300
     c46:	00 00                	add    BYTE PTR [eax],al
     c48:	05 02 10 18 00       	add    eax,0x181002
     c4d:	9f                   	lahf   
     c4e:	1a f3                	sbb    dh,bl
     c50:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
     c56:	ca 9f 2f             	retf   0x2f9f
     c59:	d5 bd                	aad    0xbd
     c5b:	9f                   	lahf   
     c5c:	2f                   	das    
     c5d:	f1                   	icebp  
     c5e:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     c63:	c9                   	leave  
     c64:	08 13                	or     BYTE PTR [ebx],dl
     c66:	02 02                	add    al,BYTE PTR [edx]
     c68:	00 01                	add    BYTE PTR [ecx],al
     c6a:	01 8a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ecx
     c70:	00 84 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],al
     c77:	fb                   	sti    
     c78:	0e                   	push   cs
     c79:	0d 00 01 01 01       	or     eax,0x1010100
     c7e:	01 00                	add    DWORD PTR [eax],eax
     c80:	00 00                	add    BYTE PTR [eax],al
     c82:	01 00                	add    DWORD PTR [eax],eax
     c84:	00 01                	add    BYTE PTR [ecx],al
     c86:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c8d:	00 2f                	add    BYTE PTR [edi],ch
     c8f:	68 6f 6d 65 2f       	push   0x2f656d6f
     c94:	79 6f                	jns    d05 <sysEnter_Vector-0x12f2fb>
     c96:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     c9d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ca0:	73 73                	jae    d15 <sysEnter_Vector-0x12f2eb>
     ca2:	2f                   	das    
     ca3:	6c                   	ins    BYTE PTR es:[edi],dx
     ca4:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     cab:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     cb1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     cb7:	78 2d                	js     ce6 <sysEnter_Vector-0x12f31a>
     cb9:	67 6e                	outs   dx,BYTE PTR ds:[si]
     cbb:	75 2f                	jne    cec <sysEnter_Vector-0x12f314>
     cbd:	35 2e 33 2e 30       	xor    eax,0x302e332e
     cc2:	2f                   	das    
     cc3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     cca:	00 00                	add    BYTE PTR [eax],al
     ccc:	6d                   	ins    DWORD PTR es:[edi],dx
     ccd:	61                   	popa   
     cce:	6c                   	ins    BYTE PTR es:[edi],dx
     ccf:	6c                   	ins    BYTE PTR es:[edi],dx
     cd0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cd1:	63 2e                	arpl   WORD PTR [esi],bp
     cd3:	68 00 01 00 00       	push   0x100
     cd8:	6c                   	ins    BYTE PTR es:[edi],dx
     cd9:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     ce0:	4f                   	dec    edi
     ce1:	53                   	push   ebx
     ce2:	2e                   	cs
     ce3:	68 00 01 00 00       	push   0x100
     ce8:	73 74                	jae    d5e <sysEnter_Vector-0x12f2a2>
     cea:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     cf1:	63 
     cf2:	2e                   	cs
     cf3:	68 00 02 00 00       	push   0x200
     cf8:	00 e6                	add    dh,ah
     cfa:	00 00                	add    BYTE PTR [eax],al
     cfc:	00 02                	add    BYTE PTR [edx],al
     cfe:	00 cd                	add    ch,cl
     d00:	00 00                	add    BYTE PTR [eax],al
     d02:	00 01                	add    BYTE PTR [ecx],al
     d04:	01 fb                	add    ebx,edi
     d06:	0e                   	push   cs
     d07:	0d 00 01 01 01       	or     eax,0x1010100
     d0c:	01 00                	add    DWORD PTR [eax],eax
     d0e:	00 00                	add    BYTE PTR [eax],al
     d10:	01 00                	add    DWORD PTR [eax],eax
     d12:	00 01                	add    BYTE PTR [ecx],al
     d14:	73 72                	jae    d88 <sysEnter_Vector-0x12f278>
     d16:	63 00                	arpl   WORD PTR [eax],ax
     d18:	2f                   	das    
     d19:	68 6f 6d 65 2f       	push   0x2f656d6f
     d1e:	79 6f                	jns    d8f <sysEnter_Vector-0x12f271>
     d20:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d27:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d2a:	73 73                	jae    d9f <sysEnter_Vector-0x12f261>
     d2c:	2f                   	das    
     d2d:	6c                   	ins    BYTE PTR es:[edi],dx
     d2e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d35:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d3b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d41:	78 2d                	js     d70 <sysEnter_Vector-0x12f290>
     d43:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d45:	75 2f                	jne    d76 <sysEnter_Vector-0x12f28a>
     d47:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d4c:	2f                   	das    
     d4d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d54:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d57:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d5b:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     d5f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d63:	65                   	gs
     d64:	2f                   	das    
     d65:	2e                   	cs
     d66:	2e                   	cs
     d67:	2f                   	das    
     d68:	2e                   	cs
     d69:	2e                   	cs
     d6a:	2f                   	das    
     d6b:	2e                   	cs
     d6c:	2e                   	cs
     d6d:	2f                   	das    
     d6e:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     d72:	6a 2f                	push   0x2f
     d74:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     d77:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     d7e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d7f:	65                   	gs
     d80:	6c                   	ins    BYTE PTR es:[edi],dx
     d81:	2f                   	das    
     d82:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d89:	00 00                	add    BYTE PTR [eax],al
     d8b:	70 69                	jo     df6 <sysEnter_Vector-0x12f20a>
     d8d:	70 65                	jo     df4 <sysEnter_Vector-0x12f20c>
     d8f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d92:	01 00                	add    DWORD PTR [eax],eax
     d94:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d97:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d9e:	63 
     d9f:	2e                   	cs
     da0:	68 00 02 00 00       	push   0x200
     da5:	6d                   	ins    DWORD PTR es:[edi],dx
     da6:	61                   	popa   
     da7:	6c                   	ins    BYTE PTR es:[edi],dx
     da8:	6c                   	ins    BYTE PTR es:[edi],dx
     da9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     daa:	63 2e                	arpl   WORD PTR [esi],bp
     dac:	68 00 03 00 00       	push   0x300
     db1:	6c                   	ins    BYTE PTR es:[edi],dx
     db2:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     db9:	4f                   	dec    edi
     dba:	53                   	push   ebx
     dbb:	2e                   	cs
     dbc:	68 00 03 00 00       	push   0x300
     dc1:	73 79                	jae    e3c <sysEnter_Vector-0x12f1c4>
     dc3:	73 63                	jae    e28 <sysEnter_Vector-0x12f1d8>
     dc5:	61                   	popa   
     dc6:	6c                   	ins    BYTE PTR es:[edi],dx
     dc7:	6c                   	ins    BYTE PTR es:[edi],dx
     dc8:	73 2e                	jae    df8 <sysEnter_Vector-0x12f208>
     dca:	68 00 04 00 00       	push   0x400
     dcf:	00 00                	add    BYTE PTR [eax],al
     dd1:	05 02 f8 18 00       	add    eax,0x18f802
     dd6:	9f                   	lahf   
     dd7:	03 0a                	add    ecx,DWORD PTR [edx]
     dd9:	01 08                	add    DWORD PTR [eax],ecx
     ddb:	13 08                	adc    ecx,DWORD PTR [eax]
     ddd:	2f                   	das    
     dde:	02 05 00 01 01 de    	add    al,BYTE PTR ds:0xde010100
     de4:	01 00                	add    DWORD PTR [eax],eax
     de6:	00 02                	add    BYTE PTR [edx],al
     de8:	00 a1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],ah
     dee:	01 fb                	add    ebx,edi
     df0:	0e                   	push   cs
     df1:	0d 00 01 01 01       	or     eax,0x1010100
     df6:	01 00                	add    DWORD PTR [eax],eax
     df8:	00 00                	add    BYTE PTR [eax],al
     dfa:	01 00                	add    DWORD PTR [eax],eax
     dfc:	00 01                	add    BYTE PTR [ecx],al
     dfe:	73 72                	jae    e72 <sysEnter_Vector-0x12f18e>
     e00:	63 00                	arpl   WORD PTR [eax],ax
     e02:	2f                   	das    
     e03:	68 6f 6d 65 2f       	push   0x2f656d6f
     e08:	79 6f                	jns    e79 <sysEnter_Vector-0x12f187>
     e0a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e11:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e14:	73 73                	jae    e89 <sysEnter_Vector-0x12f177>
     e16:	2f                   	das    
     e17:	6c                   	ins    BYTE PTR es:[edi],dx
     e18:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e1f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e25:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     e2b:	78 2d                	js     e5a <sysEnter_Vector-0x12f1a6>
     e2d:	67 6e                	outs   dx,BYTE PTR ds:[si]
     e2f:	75 2f                	jne    e60 <sysEnter_Vector-0x12f1a0>
     e31:	35 2e 33 2e 30       	xor    eax,0x302e332e
     e36:	2f                   	das    
     e37:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e3e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     e41:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     e45:	65 00 00             	add    BYTE PTR gs:[eax],al
     e48:	73 70                	jae    eba <sysEnter_Vector-0x12f146>
     e4a:	72 69                	jb     eb5 <sysEnter_Vector-0x12f14b>
     e4c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e4d:	74 66                	je     eb5 <sysEnter_Vector-0x12f14b>
     e4f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     e52:	01 00                	add    DWORD PTR [eax],eax
     e54:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e57:	64                   	fs
     e58:	61                   	popa   
     e59:	72 67                	jb     ec2 <sysEnter_Vector-0x12f13e>
     e5b:	2e                   	cs
     e5c:	68 00 02 00 00       	push   0x200
     e61:	73 74                	jae    ed7 <sysEnter_Vector-0x12f129>
     e63:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     e6a:	63 
     e6b:	2e                   	cs
     e6c:	68 00 02 00 00       	push   0x200
     e71:	6d                   	ins    DWORD PTR es:[edi],dx
     e72:	61                   	popa   
     e73:	6c                   	ins    BYTE PTR es:[edi],dx
     e74:	6c                   	ins    BYTE PTR es:[edi],dx
     e75:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e76:	63 2e                	arpl   WORD PTR [esi],bp
     e78:	68 00 03 00 00       	push   0x300
     e7d:	6c                   	ins    BYTE PTR es:[edi],dx
     e7e:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     e85:	4f                   	dec    edi
     e86:	53                   	push   ebx
     e87:	2e                   	cs
     e88:	68 00 03 00 00       	push   0x300
     e8d:	00 00                	add    BYTE PTR [eax],al
     e8f:	05 02 24 19 00       	add    eax,0x192402
     e94:	9f                   	lahf   
     e95:	03 0a                	add    ecx,DWORD PTR [edx]
     e97:	01 08                	add    DWORD PTR [eax],ecx
     e99:	13 76 2f             	adc    esi,DWORD PTR [esi+0x2f]
     e9c:	02 29                	add    ch,BYTE PTR [ecx]
     e9e:	11 08                	adc    DWORD PTR [eax],ecx
     ea0:	30 3d 03 12 66 03    	xor    BYTE PTR ds:0x3661203,bh
     ea6:	0a 08                	or     cl,BYTE PTR [eax]
     ea8:	2e                   	cs
     ea9:	91                   	xchg   ecx,eax
     eaa:	9f                   	lahf   
     eab:	4b                   	dec    ebx
     eac:	00 02                	add    BYTE PTR [edx],al
     eae:	04 01                	add    al,0x1
     eb0:	06                   	push   es
     eb1:	66 06                	pushw  es
     eb3:	67 9f                	addr16 lahf 
     eb5:	00 02                	add    BYTE PTR [edx],al
     eb7:	04 01                	add    al,0x1
     eb9:	06                   	push   es
     eba:	9e                   	sahf   
     ebb:	00 02                	add    BYTE PTR [edx],al
     ebd:	04 02                	add    al,0x2
     ebf:	74 00                	je     ec1 <sysEnter_Vector-0x12f13f>
     ec1:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
     ec4:	58                   	pop    eax
     ec5:	00 02                	add    BYTE PTR [edx],al
     ec7:	04 04                	add    al,0x4
     ec9:	06                   	push   es
     eca:	3d 00 02 04 04       	cmp    eax,0x4040200
     ecf:	4b                   	dec    ebx
     ed0:	9f                   	lahf   
     ed1:	67 4b                	addr16 dec ebx
     ed3:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
     ed8:	9f                   	lahf   
     ed9:	4b                   	dec    ebx
     eda:	4d                   	dec    ebp
     edb:	9f                   	lahf   
     edc:	67 67 67 4c          	addr32 addr32 addr16 dec esp
     ee0:	75 67                	jne    f49 <sysEnter_Vector-0x12f0b7>
     ee2:	f5                   	cmc    
     ee3:	02 3d 11 68 83 67    	add    bh,BYTE PTR ds:0x67836811
     ee9:	67 9f                	addr16 lahf 
     eeb:	2f                   	das    
     eec:	b9 ca 67 e5 9f       	mov    ecx,0x9fe567ca
     ef1:	67 d7                	xlat   BYTE PTR ds:[bx]
     ef3:	67 bb 08 23 9f 2f    	addr16 mov ebx,0x2f9f2308
     ef9:	e3 ca                	jecxz  ec5 <sysEnter_Vector-0x12f13b>
     efb:	2f                   	das    
     efc:	b9 d8 2f 08 57       	mov    ecx,0x57082fd8
     f01:	ca 2f b9             	retf   0xb92f
     f04:	ca 00 02             	retf   0x200
     f07:	04 01                	add    al,0x1
     f09:	3d 76 03 0e 08       	cmp    eax,0x80e0376
     f0e:	20 ad 9f 08 13 5c    	and    BYTE PTR [ebp+0x5c13089f],ch
     f14:	76 91                	jbe    ea7 <sysEnter_Vector-0x12f159>
     f16:	08 d8                	or     al,bl
     f18:	4b                   	dec    ebx
     f19:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
     f1c:	4b                   	dec    ebx
     f1d:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
     f20:	4b                   	dec    ebx
     f21:	32 75 08             	xor    dh,BYTE PTR [ebp+0x8]
     f24:	13 08                	adc    ecx,DWORD PTR [eax]
     f26:	13 9f 92 d7 67 3d    	adc    ebx,DWORD PTR [edi+0x3d67d792]
     f2c:	4f                   	dec    edi
     f2d:	75 9f                	jne    ece <sysEnter_Vector-0x12f132>
     f2f:	91                   	xchg   ecx,eax
     f30:	08 13                	or     BYTE PTR [ebx],dl
     f32:	08 13                	or     BYTE PTR [ebx],dl
     f34:	9f                   	lahf   
     f35:	92                   	xchg   edx,eax
     f36:	d8 67 78             	fsub   DWORD PTR [edi+0x78]
     f39:	75 00                	jne    f3b <sysEnter_Vector-0x12f0c5>
     f3b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     f3e:	06                   	push   es
     f3f:	9e                   	sahf   
     f40:	00 02                	add    BYTE PTR [edx],al
     f42:	04 02                	add    al,0x2
     f44:	9e                   	sahf   
     f45:	06                   	push   es
     f46:	9f                   	lahf   
     f47:	bb 94 76 02 23       	mov    ebx,0x23027694
     f4c:	14 9f                	adc    al,0x9f
     f4e:	2f                   	das    
     f4f:	b9 a0 08 59 2f       	mov    ecx,0x2f5908a0
     f54:	b9 a0 5b d7 67       	mov    ecx,0x67d75ba0
     f59:	08 30                	or     BYTE PTR [eax],dh
     f5b:	76 9f                	jbe    efc <sysEnter_Vector-0x12f104>
     f5d:	2f                   	das    
     f5e:	b9 d8 00 02 04       	mov    ecx,0x40200d8
     f63:	03 91 00 02 04 03    	add    edx,DWORD PTR [ecx+0x3040200]
     f69:	08 65 00             	or     BYTE PTR [ebp+0x0],ah
     f6c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     f6f:	06                   	push   es
     f70:	4a                   	dec    edx
     f71:	06                   	push   es
     f72:	84 2f                	test   BYTE PTR [edi],ch
     f74:	b9 d8 5b 67 75       	mov    ecx,0x75675bd8
     f79:	4d                   	dec    ebp
     f7a:	ab                   	stos   DWORD PTR es:[edi],eax
     f7b:	08 bd 5b 67 d7 cd    	or     BYTE PTR [ebp-0x322898a5],bh
     f81:	55                   	push   ebp
     f82:	d7                   	xlat   BYTE PTR ds:[ebx]
     f83:	ca 5b bb             	retf   0xbb5b
     f86:	5c                   	pop    esp
     f87:	75 31                	jne    fba <sysEnter_Vector-0x12f046>
     f89:	4c                   	dec    esp
     f8a:	75 32                	jne    fbe <sysEnter_Vector-0x12f042>
     f8c:	4c                   	dec    esp
     f8d:	31 bb 9f 08 15 57    	xor    DWORD PTR [ebx+0x5715089f],edi
     f93:	91                   	xchg   ecx,eax
     f94:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
     f97:	03 0a                	add    ecx,DWORD PTR [edx]
     f99:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
     f9c:	67 08 2f             	or     BYTE PTR [bx],ch
     f9f:	9f                   	lahf   
     fa0:	91                   	xchg   ecx,eax
     fa1:	9f                   	lahf   
     fa2:	f4                   	hlt    
     fa3:	d7                   	xlat   BYTE PTR ds:[ebx]
     fa4:	00 02                	add    BYTE PTR [edx],al
     fa6:	04 02                	add    al,0x2
     fa8:	03 e8                	add    ebp,eax
     faa:	7e 08                	jle    fb4 <sysEnter_Vector-0x12f04c>
     fac:	f2 00 02             	repnz add BYTE PTR [edx],al
     faf:	04 01                	add    al,0x1
     fb1:	06                   	push   es
     fb2:	90                   	nop
     fb3:	06                   	push   es
     fb4:	03 9a 01 d6 67 9f    	add    ebx,DWORD PTR [edx-0x609829ff]
     fba:	5b                   	pop    ebx
     fbb:	f6 67 08             	mul    BYTE PTR [edi+0x8]
     fbe:	76 3d                	jbe    ffd <sysEnter_Vector-0x12f003>
     fc0:	02 02                	add    al,BYTE PTR [edx]
     fc2:	00 01                	add    BYTE PTR [ecx],al
     fc4:	01 fa                	add    edx,edi
     fc6:	00 00                	add    BYTE PTR [eax],al
     fc8:	00 02                	add    BYTE PTR [edx],al
     fca:	00 d8                	add    al,bl
     fcc:	00 00                	add    BYTE PTR [eax],al
     fce:	00 01                	add    BYTE PTR [ecx],al
     fd0:	01 fb                	add    ebx,edi
     fd2:	0e                   	push   cs
     fd3:	0d 00 01 01 01       	or     eax,0x1010100
     fd8:	01 00                	add    DWORD PTR [eax],eax
     fda:	00 00                	add    BYTE PTR [eax],al
     fdc:	01 00                	add    DWORD PTR [eax],eax
     fde:	00 01                	add    BYTE PTR [ecx],al
     fe0:	73 72                	jae    1054 <sysEnter_Vector-0x12efac>
     fe2:	63 00                	arpl   WORD PTR [eax],ax
     fe4:	2f                   	das    
     fe5:	68 6f 6d 65 2f       	push   0x2f656d6f
     fea:	79 6f                	jns    105b <sysEnter_Vector-0x12efa5>
     fec:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ff3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ff6:	73 73                	jae    106b <sysEnter_Vector-0x12ef95>
     ff8:	2f                   	das    
     ff9:	6c                   	ins    BYTE PTR es:[edi],dx
     ffa:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1001:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1007:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    100d:	78 2d                	js     103c <sysEnter_Vector-0x12efc4>
    100f:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1011:	75 2f                	jne    1042 <sysEnter_Vector-0x12efbe>
    1013:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1018:	2f                   	das    
    1019:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1020:	00 2e                	add    BYTE PTR [esi],ch
    1022:	2e                   	cs
    1023:	2f                   	das    
    1024:	2e                   	cs
    1025:	2e                   	cs
    1026:	2f                   	das    
    1027:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    102b:	6a 2f                	push   0x2f
    102d:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1030:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1037:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1038:	65                   	gs
    1039:	6c                   	ins    BYTE PTR es:[edi],dx
    103a:	2f                   	das    
    103b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1042:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1045:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1049:	65 00 00             	add    BYTE PTR gs:[eax],al
    104c:	73 74                	jae    10c2 <sysEnter_Vector-0x12ef3e>
    104e:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    1055:	00 
    1056:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1059:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1060:	63 
    1061:	2e                   	cs
    1062:	68 00 02 00 00       	push   0x200
    1067:	73 74                	jae    10dd <sysEnter_Vector-0x12ef23>
    1069:	64                   	fs
    106a:	64                   	fs
    106b:	65                   	gs
    106c:	66                   	data16
    106d:	2e                   	cs
    106e:	68 00 02 00 00       	push   0x200
    1073:	64                   	fs
    1074:	6c                   	ins    BYTE PTR es:[edi],dx
    1075:	6c                   	ins    BYTE PTR es:[edi],dx
    1076:	69 73 74 2e 68 00 03 	imul   esi,DWORD PTR [ebx+0x74],0x300682e
    107d:	00 00                	add    BYTE PTR [eax],al
    107f:	73 74                	jae    10f5 <sysEnter_Vector-0x12ef0b>
    1081:	64 69 6f 2e 68 00 04 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x40068
    1088:	00 
    1089:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    108c:	6c                   	ins    BYTE PTR es:[edi],dx
    108d:	6c                   	ins    BYTE PTR es:[edi],dx
    108e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    108f:	63 2e                	arpl   WORD PTR [esi],bp
    1091:	68 00 04 00 00       	push   0x400
    1096:	6c                   	ins    BYTE PTR es:[edi],dx
    1097:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    109e:	4f                   	dec    edi
    109f:	53                   	push   ebx
    10a0:	2e                   	cs
    10a1:	68 00 04 00 00       	push   0x400
    10a6:	00 00                	add    BYTE PTR [eax],al
    10a8:	05 02 3c 20 00       	add    eax,0x203c02
    10ad:	9f                   	lahf   
    10ae:	03 c3                	add    eax,ebx
    10b0:	00 01                	add    BYTE PTR [ecx],al
    10b2:	08 22                	or     BYTE PTR [edx],ah
    10b4:	76 08                	jbe    10be <sysEnter_Vector-0x12ef42>
    10b6:	31 d7                	xor    edi,edx
    10b8:	d7                   	xlat   BYTE PTR ds:[ebx]
    10b9:	d7                   	xlat   BYTE PTR ds:[ebx]
    10ba:	d7                   	xlat   BYTE PTR ds:[ebx]
    10bb:	ad                   	lods   eax,DWORD PTR ds:[esi]
    10bc:	e6 21                	out    0x21,al
    10be:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
    10c4:	00 00                	add    BYTE PTR [eax],al
    10c6:	00 02                	add    BYTE PTR [edx],al
    10c8:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
    10cf:	fb                   	sti    
    10d0:	0e                   	push   cs
    10d1:	0d 00 01 01 01       	or     eax,0x1010100
    10d6:	01 00                	add    DWORD PTR [eax],eax
    10d8:	00 00                	add    BYTE PTR [eax],al
    10da:	01 00                	add    DWORD PTR [eax],eax
    10dc:	00 01                	add    BYTE PTR [ecx],al
    10de:	73 72                	jae    1152 <sysEnter_Vector-0x12eeae>
    10e0:	63 2f                	arpl   WORD PTR [edi],bp
    10e2:	73 74                	jae    1158 <sysEnter_Vector-0x12eea8>
    10e4:	72 69                	jb     114f <sysEnter_Vector-0x12eeb1>
    10e6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10e7:	67 73 00             	addr16 jae 10ea <sysEnter_Vector-0x12ef16>
    10ea:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10f1:	00 2f                	add    BYTE PTR [edi],ch
    10f3:	68 6f 6d 65 2f       	push   0x2f656d6f
    10f8:	79 6f                	jns    1169 <sysEnter_Vector-0x12ee97>
    10fa:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1101:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1104:	73 73                	jae    1179 <sysEnter_Vector-0x12ee87>
    1106:	2f                   	das    
    1107:	6c                   	ins    BYTE PTR es:[edi],dx
    1108:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    110f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1115:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    111b:	78 2d                	js     114a <sysEnter_Vector-0x12eeb6>
    111d:	67 6e                	outs   dx,BYTE PTR ds:[si]
    111f:	75 2f                	jne    1150 <sysEnter_Vector-0x12eeb0>
    1121:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1126:	2f                   	das    
    1127:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    112e:	00 00                	add    BYTE PTR [eax],al
    1130:	73 74                	jae    11a6 <sysEnter_Vector-0x12ee5a>
    1132:	72 63                	jb     1197 <sysEnter_Vector-0x12ee69>
    1134:	61                   	popa   
    1135:	74 2e                	je     1165 <sysEnter_Vector-0x12ee9b>
    1137:	63 00                	arpl   WORD PTR [eax],ax
    1139:	01 00                	add    DWORD PTR [eax],eax
    113b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    113e:	6c                   	ins    BYTE PTR es:[edi],dx
    113f:	6c                   	ins    BYTE PTR es:[edi],dx
    1140:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1141:	63 2e                	arpl   WORD PTR [esi],bp
    1143:	68 00 02 00 00       	push   0x200
    1148:	6c                   	ins    BYTE PTR es:[edi],dx
    1149:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1150:	4f                   	dec    edi
    1151:	53                   	push   ebx
    1152:	2e                   	cs
    1153:	68 00 02 00 00       	push   0x200
    1158:	73 74                	jae    11ce <sysEnter_Vector-0x12ee32>
    115a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1161:	63 
    1162:	2e                   	cs
    1163:	68 00 03 00 00       	push   0x300
    1168:	00 00                	add    BYTE PTR [eax],al
    116a:	05 02 c0 20 00       	add    eax,0x20c002
    116f:	9f                   	lahf   
    1170:	03 1d 01 08 21 02    	add    ebx,DWORD PTR ds:0x2210801
    1176:	24 13                	and    al,0x13
    1178:	3d 5b 08 21 02       	cmp    eax,0x221085b
    117d:	24 13                	and    al,0x13
    117f:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
    1184:	49                   	dec    ecx
    1185:	e8 76 2f 08 4b       	call   4b084100 <sysEnter_Vector+0x4af54100>
    118a:	4b                   	dec    ebx
    118b:	47                   	inc    edi
    118c:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
    1193:	bb 00 00 00 02       	mov    ebx,0x2000000
    1198:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
    119f:	fb                   	sti    
    11a0:	0e                   	push   cs
    11a1:	0d 00 01 01 01       	or     eax,0x1010100
    11a6:	01 00                	add    DWORD PTR [eax],eax
    11a8:	00 00                	add    BYTE PTR [eax],al
    11aa:	01 00                	add    DWORD PTR [eax],eax
    11ac:	00 01                	add    BYTE PTR [ecx],al
    11ae:	73 72                	jae    1222 <sysEnter_Vector-0x12edde>
    11b0:	63 2f                	arpl   WORD PTR [edi],bp
    11b2:	73 74                	jae    1228 <sysEnter_Vector-0x12edd8>
    11b4:	72 69                	jb     121f <sysEnter_Vector-0x12ede1>
    11b6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11b7:	67 73 00             	addr16 jae 11ba <sysEnter_Vector-0x12ee46>
    11ba:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11c1:	00 2f                	add    BYTE PTR [edi],ch
    11c3:	68 6f 6d 65 2f       	push   0x2f656d6f
    11c8:	79 6f                	jns    1239 <sysEnter_Vector-0x12edc7>
    11ca:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11d1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11d4:	73 73                	jae    1249 <sysEnter_Vector-0x12edb7>
    11d6:	2f                   	das    
    11d7:	6c                   	ins    BYTE PTR es:[edi],dx
    11d8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11df:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11e5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    11eb:	78 2d                	js     121a <sysEnter_Vector-0x12ede6>
    11ed:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11ef:	75 2f                	jne    1220 <sysEnter_Vector-0x12ede0>
    11f1:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11f6:	2f                   	das    
    11f7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11fe:	00 00                	add    BYTE PTR [eax],al
    1200:	73 74                	jae    1276 <sysEnter_Vector-0x12ed8a>
    1202:	72 63                	jb     1267 <sysEnter_Vector-0x12ed99>
    1204:	6d                   	ins    DWORD PTR es:[edi],dx
    1205:	70 2e                	jo     1235 <sysEnter_Vector-0x12edcb>
    1207:	63 00                	arpl   WORD PTR [eax],ax
    1209:	01 00                	add    DWORD PTR [eax],eax
    120b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    120e:	6c                   	ins    BYTE PTR es:[edi],dx
    120f:	6c                   	ins    BYTE PTR es:[edi],dx
    1210:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1211:	63 2e                	arpl   WORD PTR [esi],bp
    1213:	68 00 02 00 00       	push   0x200
    1218:	6c                   	ins    BYTE PTR es:[edi],dx
    1219:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1220:	4f                   	dec    edi
    1221:	53                   	push   ebx
    1222:	2e                   	cs
    1223:	68 00 02 00 00       	push   0x200
    1228:	73 74                	jae    129e <sysEnter_Vector-0x12ed62>
    122a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1231:	63 
    1232:	2e                   	cs
    1233:	68 00 03 00 00       	push   0x300
    1238:	00 00                	add    BYTE PTR [eax],al
    123a:	05 02 ac 21 00       	add    eax,0x21ac02
    123f:	9f                   	lahf   
    1240:	03 18                	add    ebx,DWORD PTR [eax]
    1242:	01 08                	add    DWORD PTR [eax],ecx
    1244:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    124a:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
    1250:	01 01                	add    DWORD PTR [ecx],eax
    1252:	dc 00                	fadd   QWORD PTR [eax]
    1254:	00 00                	add    BYTE PTR [eax],al
    1256:	02 00                	add    al,BYTE PTR [eax]
    1258:	9c                   	pushf  
    1259:	00 00                	add    BYTE PTR [eax],al
    125b:	00 01                	add    BYTE PTR [ecx],al
    125d:	01 fb                	add    ebx,edi
    125f:	0e                   	push   cs
    1260:	0d 00 01 01 01       	or     eax,0x1010100
    1265:	01 00                	add    DWORD PTR [eax],eax
    1267:	00 00                	add    BYTE PTR [eax],al
    1269:	01 00                	add    DWORD PTR [eax],eax
    126b:	00 01                	add    BYTE PTR [ecx],al
    126d:	73 72                	jae    12e1 <sysEnter_Vector-0x12ed1f>
    126f:	63 2f                	arpl   WORD PTR [edi],bp
    1271:	73 74                	jae    12e7 <sysEnter_Vector-0x12ed19>
    1273:	72 69                	jb     12de <sysEnter_Vector-0x12ed22>
    1275:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1276:	67 73 00             	addr16 jae 1279 <sysEnter_Vector-0x12ed87>
    1279:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1280:	00 2f                	add    BYTE PTR [edi],ch
    1282:	68 6f 6d 65 2f       	push   0x2f656d6f
    1287:	79 6f                	jns    12f8 <sysEnter_Vector-0x12ed08>
    1289:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1290:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1293:	73 73                	jae    1308 <sysEnter_Vector-0x12ecf8>
    1295:	2f                   	das    
    1296:	6c                   	ins    BYTE PTR es:[edi],dx
    1297:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    129e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    12a4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    12aa:	78 2d                	js     12d9 <sysEnter_Vector-0x12ed27>
    12ac:	67 6e                	outs   dx,BYTE PTR ds:[si]
    12ae:	75 2f                	jne    12df <sysEnter_Vector-0x12ed21>
    12b0:	35 2e 33 2e 30       	xor    eax,0x302e332e
    12b5:	2f                   	das    
    12b6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    12bd:	00 00                	add    BYTE PTR [eax],al
    12bf:	73 74                	jae    1335 <sysEnter_Vector-0x12eccb>
    12c1:	72 63                	jb     1326 <sysEnter_Vector-0x12ecda>
    12c3:	70 79                	jo     133e <sysEnter_Vector-0x12ecc2>
    12c5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    12c8:	01 00                	add    DWORD PTR [eax],eax
    12ca:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    12cd:	6c                   	ins    BYTE PTR es:[edi],dx
    12ce:	6c                   	ins    BYTE PTR es:[edi],dx
    12cf:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12d0:	63 2e                	arpl   WORD PTR [esi],bp
    12d2:	68 00 02 00 00       	push   0x200
    12d7:	6c                   	ins    BYTE PTR es:[edi],dx
    12d8:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    12df:	4f                   	dec    edi
    12e0:	53                   	push   ebx
    12e1:	2e                   	cs
    12e2:	68 00 02 00 00       	push   0x200
    12e7:	73 74                	jae    135d <sysEnter_Vector-0x12eca3>
    12e9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    12f0:	63 
    12f1:	2e                   	cs
    12f2:	68 00 03 00 00       	push   0x300
    12f7:	00 00                	add    BYTE PTR [eax],al
    12f9:	05 02 0c 22 00       	add    eax,0x220c02
    12fe:	9f                   	lahf   
    12ff:	16                   	push   ss
    1300:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    1304:	04 01                	add    al,0x1
    1306:	06                   	push   es
    1307:	20 06                	and    BYTE PTR [esi],al
    1309:	08 ca                	or     dl,cl
    130b:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1311:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1314:	06                   	push   es
    1315:	20 06                	and    BYTE PTR [esi],al
    1317:	08 ca                	or     dl,cl
    1319:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    131f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1322:	06                   	push   es
    1323:	20 00                	and    BYTE PTR [eax],al
    1325:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1328:	08 c8                	or     al,cl
    132a:	06                   	push   es
    132b:	ca 3d 02             	retf   0x23d
    132e:	02 00                	add    al,BYTE PTR [eax]
    1330:	01 01                	add    DWORD PTR [ecx],eax
    1332:	cb                   	retf   
    1333:	00 00                	add    BYTE PTR [eax],al
    1335:	00 02                	add    BYTE PTR [edx],al
    1337:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    133d:	01 fb                	add    ebx,edi
    133f:	0e                   	push   cs
    1340:	0d 00 01 01 01       	or     eax,0x1010100
    1345:	01 00                	add    DWORD PTR [eax],eax
    1347:	00 00                	add    BYTE PTR [eax],al
    1349:	01 00                	add    DWORD PTR [eax],eax
    134b:	00 01                	add    BYTE PTR [ecx],al
    134d:	73 72                	jae    13c1 <sysEnter_Vector-0x12ec3f>
    134f:	63 2f                	arpl   WORD PTR [edi],bp
    1351:	73 74                	jae    13c7 <sysEnter_Vector-0x12ec39>
    1353:	72 69                	jb     13be <sysEnter_Vector-0x12ec42>
    1355:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1356:	67 73 00             	addr16 jae 1359 <sysEnter_Vector-0x12eca7>
    1359:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1360:	00 2f                	add    BYTE PTR [edi],ch
    1362:	68 6f 6d 65 2f       	push   0x2f656d6f
    1367:	79 6f                	jns    13d8 <sysEnter_Vector-0x12ec28>
    1369:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1370:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1373:	73 73                	jae    13e8 <sysEnter_Vector-0x12ec18>
    1375:	2f                   	das    
    1376:	6c                   	ins    BYTE PTR es:[edi],dx
    1377:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    137e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1384:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    138a:	78 2d                	js     13b9 <sysEnter_Vector-0x12ec47>
    138c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    138e:	75 2f                	jne    13bf <sysEnter_Vector-0x12ec41>
    1390:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1395:	2f                   	das    
    1396:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    139d:	00 00                	add    BYTE PTR [eax],al
    139f:	73 74                	jae    1415 <sysEnter_Vector-0x12ebeb>
    13a1:	72 69                	jb     140c <sysEnter_Vector-0x12ebf4>
    13a3:	73 6e                	jae    1413 <sysEnter_Vector-0x12ebed>
    13a5:	75 6d                	jne    1414 <sysEnter_Vector-0x12ebec>
    13a7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    13aa:	01 00                	add    DWORD PTR [eax],eax
    13ac:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    13af:	6c                   	ins    BYTE PTR es:[edi],dx
    13b0:	6c                   	ins    BYTE PTR es:[edi],dx
    13b1:	6f                   	outs   dx,DWORD PTR ds:[esi]
    13b2:	63 2e                	arpl   WORD PTR [esi],bp
    13b4:	68 00 02 00 00       	push   0x200
    13b9:	6c                   	ins    BYTE PTR es:[edi],dx
    13ba:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    13c1:	4f                   	dec    edi
    13c2:	53                   	push   ebx
    13c3:	2e                   	cs
    13c4:	68 00 02 00 00       	push   0x200
    13c9:	73 74                	jae    143f <sysEnter_Vector-0x12ebc1>
    13cb:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    13d2:	63 
    13d3:	2e                   	cs
    13d4:	68 00 03 00 00       	push   0x300
    13d9:	00 00                	add    BYTE PTR [eax],al
    13db:	05 02 d4 22 00       	add    eax,0x22d402
    13e0:	9f                   	lahf   
    13e1:	1a 08                	sbb    cl,BYTE PTR [eax]
    13e3:	59                   	pop    ecx
    13e4:	00 02                	add    BYTE PTR [edx],al
    13e6:	04 01                	add    al,0x1
    13e8:	06                   	push   es
    13e9:	66                   	data16
    13ea:	00 02                	add    BYTE PTR [edx],al
    13ec:	04 02                	add    al,0x2
    13ee:	66 06                	pushw  es
    13f0:	75 59                	jne    144b <sysEnter_Vector-0x12ebb5>
    13f2:	31 f3                	xor    ebx,esi
    13f4:	76 2f                	jbe    1425 <sysEnter_Vector-0x12ebdb>
    13f6:	08 e5                	or     ch,ah
    13f8:	72 08                	jb     1402 <sysEnter_Vector-0x12ebfe>
    13fa:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    13fd:	02 00                	add    al,BYTE PTR [eax]
    13ff:	01 01                	add    DWORD PTR [ecx],eax
    1401:	94                   	xchg   esp,eax
    1402:	00 00                	add    BYTE PTR [eax],al
    1404:	00 02                	add    BYTE PTR [edx],al
    1406:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
    140a:	00 01                	add    BYTE PTR [ecx],al
    140c:	01 fb                	add    ebx,edi
    140e:	0e                   	push   cs
    140f:	0d 00 01 01 01       	or     eax,0x1010100
    1414:	01 00                	add    DWORD PTR [eax],eax
    1416:	00 00                	add    BYTE PTR [eax],al
    1418:	01 00                	add    DWORD PTR [eax],eax
    141a:	00 01                	add    BYTE PTR [ecx],al
    141c:	73 72                	jae    1490 <sysEnter_Vector-0x12eb70>
    141e:	63 2f                	arpl   WORD PTR [edi],bp
    1420:	73 74                	jae    1496 <sysEnter_Vector-0x12eb6a>
    1422:	72 69                	jb     148d <sysEnter_Vector-0x12eb73>
    1424:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1425:	67 73 00             	addr16 jae 1428 <sysEnter_Vector-0x12ebd8>
    1428:	2f                   	das    
    1429:	68 6f 6d 65 2f       	push   0x2f656d6f
    142e:	79 6f                	jns    149f <sysEnter_Vector-0x12eb61>
    1430:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1437:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    143a:	73 73                	jae    14af <sysEnter_Vector-0x12eb51>
    143c:	2f                   	das    
    143d:	6c                   	ins    BYTE PTR es:[edi],dx
    143e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1445:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    144b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1451:	78 2d                	js     1480 <sysEnter_Vector-0x12eb80>
    1453:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1455:	75 2f                	jne    1486 <sysEnter_Vector-0x12eb7a>
    1457:	35 2e 33 2e 30       	xor    eax,0x302e332e
    145c:	2f                   	das    
    145d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1464:	00 00                	add    BYTE PTR [eax],al
    1466:	73 74                	jae    14dc <sysEnter_Vector-0x12eb24>
    1468:	72 6c                	jb     14d6 <sysEnter_Vector-0x12eb2a>
    146a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    146c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    146f:	01 00                	add    DWORD PTR [eax],eax
    1471:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1474:	64                   	fs
    1475:	64                   	fs
    1476:	65                   	gs
    1477:	66                   	data16
    1478:	2e                   	cs
    1479:	68 00 02 00 00       	push   0x200
    147e:	00 00                	add    BYTE PTR [eax],al
    1480:	05 02 60 23 00       	add    eax,0x236002
    1485:	9f                   	lahf   
    1486:	14 f3                	adc    al,0xf3
    1488:	75 2f                	jne    14b9 <sysEnter_Vector-0x12eb47>
    148a:	49                   	dec    ecx
    148b:	e6 3d                	out    0x3d,al
    148d:	30 f3                	xor    bl,dh
    148f:	75 2f                	jne    14c0 <sysEnter_Vector-0x12eb40>
    1491:	49                   	dec    ecx
    1492:	e6 3d                	out    0x3d,al
    1494:	02 02                	add    al,BYTE PTR [edx]
    1496:	00 01                	add    BYTE PTR [ecx],al
    1498:	01 c1                	add    ecx,eax
    149a:	00 00                	add    BYTE PTR [eax],al
    149c:	00 02                	add    BYTE PTR [edx],al
    149e:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    14a1:	00 00                	add    BYTE PTR [eax],al
    14a3:	01 01                	add    DWORD PTR [ecx],eax
    14a5:	fb                   	sti    
    14a6:	0e                   	push   cs
    14a7:	0d 00 01 01 01       	or     eax,0x1010100
    14ac:	01 00                	add    DWORD PTR [eax],eax
    14ae:	00 00                	add    BYTE PTR [eax],al
    14b0:	01 00                	add    DWORD PTR [eax],eax
    14b2:	00 01                	add    BYTE PTR [ecx],al
    14b4:	73 72                	jae    1528 <sysEnter_Vector-0x12ead8>
    14b6:	63 2f                	arpl   WORD PTR [edi],bp
    14b8:	73 74                	jae    152e <sysEnter_Vector-0x12ead2>
    14ba:	72 69                	jb     1525 <sysEnter_Vector-0x12eadb>
    14bc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    14bd:	67 73 00             	addr16 jae 14c0 <sysEnter_Vector-0x12eb40>
    14c0:	2f                   	das    
    14c1:	68 6f 6d 65 2f       	push   0x2f656d6f
    14c6:	79 6f                	jns    1537 <sysEnter_Vector-0x12eac9>
    14c8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    14cf:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    14d2:	73 73                	jae    1547 <sysEnter_Vector-0x12eab9>
    14d4:	2f                   	das    
    14d5:	6c                   	ins    BYTE PTR es:[edi],dx
    14d6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    14dd:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    14e3:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    14e9:	78 2d                	js     1518 <sysEnter_Vector-0x12eae8>
    14eb:	67 6e                	outs   dx,BYTE PTR ds:[si]
    14ed:	75 2f                	jne    151e <sysEnter_Vector-0x12eae2>
    14ef:	35 2e 33 2e 30       	xor    eax,0x302e332e
    14f4:	2f                   	das    
    14f5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14fc:	00 00                	add    BYTE PTR [eax],al
    14fe:	73 74                	jae    1574 <sysEnter_Vector-0x12ea8c>
    1500:	72 6e                	jb     1570 <sysEnter_Vector-0x12ea90>
    1502:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1505:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1508:	01 00                	add    DWORD PTR [eax],eax
    150a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    150d:	64                   	fs
    150e:	64                   	fs
    150f:	65                   	gs
    1510:	66                   	data16
    1511:	2e                   	cs
    1512:	68 00 02 00 00       	push   0x200
    1517:	00 00                	add    BYTE PTR [eax],al
    1519:	05 02 c4 23 00       	add    eax,0x23c402
    151e:	9f                   	lahf   
    151f:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    1522:	c9                   	leave  
    1523:	2f                   	das    
    1524:	f3 00 02             	repz add BYTE PTR [edx],al
    1527:	04 01                	add    al,0x1
    1529:	06                   	push   es
    152a:	f2 00 02             	repnz add BYTE PTR [edx],al
    152d:	04 02                	add    al,0x2
    152f:	74 06                	je     1537 <sysEnter_Vector-0x12eac9>
    1531:	75 9f                	jne    14d2 <sysEnter_Vector-0x12eb2e>
    1533:	70 00                	jo     1535 <sysEnter_Vector-0x12eacb>
    1535:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1538:	06                   	push   es
    1539:	ba 06 6b 59 31       	mov    edx,0x31596b06
    153e:	c9                   	leave  
    153f:	2f                   	das    
    1540:	f3 00 02             	repz add BYTE PTR [edx],al
    1543:	04 01                	add    al,0x1
    1545:	06                   	push   es
    1546:	f2 00 02             	repnz add BYTE PTR [edx],al
    1549:	04 02                	add    al,0x2
    154b:	74 06                	je     1553 <sysEnter_Vector-0x12eaad>
    154d:	75 9f                	jne    14ee <sysEnter_Vector-0x12eb12>
    154f:	70 00                	jo     1551 <sysEnter_Vector-0x12eaaf>
    1551:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1554:	06                   	push   es
    1555:	ba 06 6b 59 02       	mov    edx,0x2596b06
    155a:	02 00                	add    al,BYTE PTR [eax]
    155c:	01 01                	add    DWORD PTR [ecx],eax
    155e:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1563:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1566:	00 00                	add    BYTE PTR [eax],al
    1568:	01 01                	add    DWORD PTR [ecx],eax
    156a:	fb                   	sti    
    156b:	0e                   	push   cs
    156c:	0d 00 01 01 01       	or     eax,0x1010100
    1571:	01 00                	add    DWORD PTR [eax],eax
    1573:	00 00                	add    BYTE PTR [eax],al
    1575:	01 00                	add    DWORD PTR [eax],eax
    1577:	00 01                	add    BYTE PTR [ecx],al
    1579:	73 72                	jae    15ed <sysEnter_Vector-0x12ea13>
    157b:	63 2f                	arpl   WORD PTR [edi],bp
    157d:	73 74                	jae    15f3 <sysEnter_Vector-0x12ea0d>
    157f:	72 69                	jb     15ea <sysEnter_Vector-0x12ea16>
    1581:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1582:	67 73 00             	addr16 jae 1585 <sysEnter_Vector-0x12ea7b>
    1585:	2f                   	das    
    1586:	68 6f 6d 65 2f       	push   0x2f656d6f
    158b:	79 6f                	jns    15fc <sysEnter_Vector-0x12ea04>
    158d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1594:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1597:	73 73                	jae    160c <sysEnter_Vector-0x12e9f4>
    1599:	2f                   	das    
    159a:	6c                   	ins    BYTE PTR es:[edi],dx
    159b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    15a2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    15a8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    15ae:	78 2d                	js     15dd <sysEnter_Vector-0x12ea23>
    15b0:	67 6e                	outs   dx,BYTE PTR ds:[si]
    15b2:	75 2f                	jne    15e3 <sysEnter_Vector-0x12ea1d>
    15b4:	35 2e 33 2e 30       	xor    eax,0x302e332e
    15b9:	2f                   	das    
    15ba:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15c1:	00 00                	add    BYTE PTR [eax],al
    15c3:	73 74                	jae    1639 <sysEnter_Vector-0x12e9c7>
    15c5:	72 6e                	jb     1635 <sysEnter_Vector-0x12e9cb>
    15c7:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    15ca:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    15cd:	01 00                	add    DWORD PTR [eax],eax
    15cf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15d2:	64                   	fs
    15d3:	64                   	fs
    15d4:	65                   	gs
    15d5:	66                   	data16
    15d6:	2e                   	cs
    15d7:	68 00 02 00 00       	push   0x200
    15dc:	00 00                	add    BYTE PTR [eax],al
    15de:	05 02 94 24 00       	add    eax,0x249402
    15e3:	9f                   	lahf   
    15e4:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    15ea:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    15ed:	00 02                	add    BYTE PTR [edx],al
    15ef:	04 01                	add    al,0x1
    15f1:	06                   	push   es
    15f2:	66 06                	pushw  es
    15f4:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    15f9:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    15fe:	02 02                	add    al,BYTE PTR [edx]
    1600:	00 01                	add    BYTE PTR [ecx],al
    1602:	01 49 01             	add    DWORD PTR [ecx+0x1],ecx
    1605:	00 00                	add    BYTE PTR [eax],al
    1607:	02 00                	add    al,BYTE PTR [eax]
    1609:	9c                   	pushf  
    160a:	00 00                	add    BYTE PTR [eax],al
    160c:	00 01                	add    BYTE PTR [ecx],al
    160e:	01 fb                	add    ebx,edi
    1610:	0e                   	push   cs
    1611:	0d 00 01 01 01       	or     eax,0x1010100
    1616:	01 00                	add    DWORD PTR [eax],eax
    1618:	00 00                	add    BYTE PTR [eax],al
    161a:	01 00                	add    DWORD PTR [eax],eax
    161c:	00 01                	add    BYTE PTR [ecx],al
    161e:	73 72                	jae    1692 <sysEnter_Vector-0x12e96e>
    1620:	63 2f                	arpl   WORD PTR [edi],bp
    1622:	73 74                	jae    1698 <sysEnter_Vector-0x12e968>
    1624:	72 69                	jb     168f <sysEnter_Vector-0x12e971>
    1626:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1627:	67 73 00             	addr16 jae 162a <sysEnter_Vector-0x12e9d6>
    162a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1631:	00 2f                	add    BYTE PTR [edi],ch
    1633:	68 6f 6d 65 2f       	push   0x2f656d6f
    1638:	79 6f                	jns    16a9 <sysEnter_Vector-0x12e957>
    163a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1641:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1644:	73 73                	jae    16b9 <sysEnter_Vector-0x12e947>
    1646:	2f                   	das    
    1647:	6c                   	ins    BYTE PTR es:[edi],dx
    1648:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    164f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1655:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    165b:	78 2d                	js     168a <sysEnter_Vector-0x12e976>
    165d:	67 6e                	outs   dx,BYTE PTR ds:[si]
    165f:	75 2f                	jne    1690 <sysEnter_Vector-0x12e970>
    1661:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1666:	2f                   	das    
    1667:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    166e:	00 00                	add    BYTE PTR [eax],al
    1670:	73 74                	jae    16e6 <sysEnter_Vector-0x12e91a>
    1672:	72 6f                	jb     16e3 <sysEnter_Vector-0x12e91d>
    1674:	75 6c                	jne    16e2 <sysEnter_Vector-0x12e91e>
    1676:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1679:	01 00                	add    DWORD PTR [eax],eax
    167b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    167e:	6c                   	ins    BYTE PTR es:[edi],dx
    167f:	6c                   	ins    BYTE PTR es:[edi],dx
    1680:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1681:	63 2e                	arpl   WORD PTR [esi],bp
    1683:	68 00 02 00 00       	push   0x200
    1688:	6c                   	ins    BYTE PTR es:[edi],dx
    1689:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1690:	4f                   	dec    edi
    1691:	53                   	push   ebx
    1692:	2e                   	cs
    1693:	68 00 02 00 00       	push   0x200
    1698:	73 74                	jae    170e <sysEnter_Vector-0x12e8f2>
    169a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    16a1:	63 
    16a2:	2e                   	cs
    16a3:	68 00 03 00 00       	push   0x300
    16a8:	00 00                	add    BYTE PTR [eax],al
    16aa:	05 02 14 25 00       	add    eax,0x251402
    16af:	9f                   	lahf   
    16b0:	03 3b                	add    edi,DWORD PTR [ebx]
    16b2:	01 08                	add    DWORD PTR [eax],ecx
    16b4:	2f                   	das    
    16b5:	40                   	inc    eax
    16b6:	00 02                	add    BYTE PTR [edx],al
    16b8:	04 01                	add    al,0x1
    16ba:	7a 00                	jp     16bc <sysEnter_Vector-0x12e944>
    16bc:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16bf:	ad                   	lods   eax,DWORD PTR ds:[esi]
    16c0:	59                   	pop    ecx
    16c1:	59                   	pop    ecx
    16c2:	75 c9                	jne    168d <sysEnter_Vector-0x12e973>
    16c4:	59                   	pop    ecx
    16c5:	ad                   	lods   eax,DWORD PTR ds:[esi]
    16c6:	00 02                	add    BYTE PTR [edx],al
    16c8:	04 02                	add    al,0x2
    16ca:	06                   	push   es
    16cb:	66                   	data16
    16cc:	00 02                	add    BYTE PTR [edx],al
    16ce:	04 03                	add    al,0x3
    16d0:	66 06                	pushw  es
    16d2:	59                   	pop    ecx
    16d3:	00 02                	add    BYTE PTR [edx],al
    16d5:	04 01                	add    al,0x1
    16d7:	06                   	push   es
    16d8:	74 06                	je     16e0 <sysEnter_Vector-0x12e920>
    16da:	75 91                	jne    166d <sysEnter_Vector-0x12e993>
    16dc:	3d 76 67 00 02       	cmp    eax,0x2006776
    16e1:	04 01                	add    al,0x1
    16e3:	06                   	push   es
    16e4:	58                   	pop    eax
    16e5:	00 02                	add    BYTE PTR [edx],al
    16e7:	04 02                	add    al,0x2
    16e9:	74 00                	je     16eb <sysEnter_Vector-0x12e915>
    16eb:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    16ee:	58                   	pop    eax
    16ef:	06                   	push   es
    16f0:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    16f5:	9f                   	lahf   
    16f6:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    16fa:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16fd:	06                   	push   es
    16fe:	58                   	pop    eax
    16ff:	00 02                	add    BYTE PTR [edx],al
    1701:	04 03                	add    al,0x3
    1703:	58                   	pop    eax
    1704:	00 02                	add    BYTE PTR [edx],al
    1706:	04 04                	add    al,0x4
    1708:	74 00                	je     170a <sysEnter_Vector-0x12e8f6>
    170a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    170d:	58                   	pop    eax
    170e:	06                   	push   es
    170f:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1712:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1715:	06                   	push   es
    1716:	66                   	data16
    1717:	00 02                	add    BYTE PTR [edx],al
    1719:	04 02                	add    al,0x2
    171b:	58                   	pop    eax
    171c:	00 02                	add    BYTE PTR [edx],al
    171e:	04 03                	add    al,0x3
    1720:	58                   	pop    eax
    1721:	06                   	push   es
    1722:	67 76 59             	addr16 jbe 177e <sysEnter_Vector-0x12e882>
    1725:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1729:	03 10                	add    edx,DWORD PTR [eax]
    172b:	ac                   	lods   al,BYTE PTR ds:[esi]
    172c:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    172f:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1732:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    1735:	67 2f                	addr16 das 
    1737:	67 00 02             	add    BYTE PTR [bp+si],al
    173a:	04 01                	add    al,0x1
    173c:	06                   	push   es
    173d:	66                   	data16
    173e:	00 02                	add    BYTE PTR [edx],al
    1740:	04 02                	add    al,0x2
    1742:	58                   	pop    eax
    1743:	00 02                	add    BYTE PTR [edx],al
    1745:	04 04                	add    al,0x4
    1747:	3c 06                	cmp    al,0x6
    1749:	59                   	pop    ecx
    174a:	2f                   	das    
    174b:	02 08                	add    cl,BYTE PTR [eax]
    174d:	00 01                	add    BYTE PTR [ecx],al
    174f:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1752:	00 00                	add    BYTE PTR [eax],al
    1754:	02 00                	add    al,BYTE PTR [eax]
    1756:	2d 00 00 00 01       	sub    eax,0x1000000
    175b:	01 fb                	add    ebx,edi
    175d:	0e                   	push   cs
    175e:	0d 00 01 01 01       	or     eax,0x1010100
    1763:	01 00                	add    DWORD PTR [eax],eax
    1765:	00 00                	add    BYTE PTR [eax],al
    1767:	01 00                	add    DWORD PTR [eax],eax
    1769:	00 01                	add    BYTE PTR [ecx],al
    176b:	73 72                	jae    17df <sysEnter_Vector-0x12e821>
    176d:	63 2f                	arpl   WORD PTR [edi],bp
    176f:	73 74                	jae    17e5 <sysEnter_Vector-0x12e81b>
    1771:	72 69                	jb     17dc <sysEnter_Vector-0x12e824>
    1773:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1774:	67 73 00             	addr16 jae 1777 <sysEnter_Vector-0x12e889>
    1777:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    177a:	72 70                	jb     17ec <sysEnter_Vector-0x12e814>
    177c:	61                   	popa   
    177d:	72 74                	jb     17f3 <sysEnter_Vector-0x12e80d>
    177f:	73 2e                	jae    17af <sysEnter_Vector-0x12e851>
    1781:	63 00                	arpl   WORD PTR [eax],ax
    1783:	01 00                	add    DWORD PTR [eax],eax
    1785:	00 00                	add    BYTE PTR [eax],al
    1787:	00 05 02 94 26 00    	add    BYTE PTR ds:0x269402,al
    178d:	9f                   	lahf   
    178e:	13 c9                	adc    ecx,ecx
    1790:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1791:	3d 02 02 00 01       	cmp    eax,0x1000202
    1796:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    1799:	00 00                	add    BYTE PTR [eax],al
    179b:	02 00                	add    al,BYTE PTR [eax]
    179d:	9c                   	pushf  
    179e:	00 00                	add    BYTE PTR [eax],al
    17a0:	00 01                	add    BYTE PTR [ecx],al
    17a2:	01 fb                	add    ebx,edi
    17a4:	0e                   	push   cs
    17a5:	0d 00 01 01 01       	or     eax,0x1010100
    17aa:	01 00                	add    DWORD PTR [eax],eax
    17ac:	00 00                	add    BYTE PTR [eax],al
    17ae:	01 00                	add    DWORD PTR [eax],eax
    17b0:	00 01                	add    BYTE PTR [ecx],al
    17b2:	73 72                	jae    1826 <sysEnter_Vector-0x12e7da>
    17b4:	63 2f                	arpl   WORD PTR [edi],bp
    17b6:	73 74                	jae    182c <sysEnter_Vector-0x12e7d4>
    17b8:	72 69                	jb     1823 <sysEnter_Vector-0x12e7dd>
    17ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17bb:	67 73 00             	addr16 jae 17be <sysEnter_Vector-0x12e842>
    17be:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17c5:	00 2f                	add    BYTE PTR [edi],ch
    17c7:	68 6f 6d 65 2f       	push   0x2f656d6f
    17cc:	79 6f                	jns    183d <sysEnter_Vector-0x12e7c3>
    17ce:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17d5:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17d8:	73 73                	jae    184d <sysEnter_Vector-0x12e7b3>
    17da:	2f                   	das    
    17db:	6c                   	ins    BYTE PTR es:[edi],dx
    17dc:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    17e3:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    17e9:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    17ef:	78 2d                	js     181e <sysEnter_Vector-0x12e7e2>
    17f1:	67 6e                	outs   dx,BYTE PTR ds:[si]
    17f3:	75 2f                	jne    1824 <sysEnter_Vector-0x12e7dc>
    17f5:	35 2e 33 2e 30       	xor    eax,0x302e332e
    17fa:	2f                   	das    
    17fb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1802:	00 00                	add    BYTE PTR [eax],al
    1804:	73 74                	jae    187a <sysEnter_Vector-0x12e786>
    1806:	72 74                	jb     187c <sysEnter_Vector-0x12e784>
    1808:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1809:	6c                   	ins    BYTE PTR es:[edi],dx
    180a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    180d:	01 00                	add    DWORD PTR [eax],eax
    180f:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1812:	6c                   	ins    BYTE PTR es:[edi],dx
    1813:	6c                   	ins    BYTE PTR es:[edi],dx
    1814:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1815:	63 2e                	arpl   WORD PTR [esi],bp
    1817:	68 00 02 00 00       	push   0x200
    181c:	6c                   	ins    BYTE PTR es:[edi],dx
    181d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1824:	4f                   	dec    edi
    1825:	53                   	push   ebx
    1826:	2e                   	cs
    1827:	68 00 02 00 00       	push   0x200
    182c:	73 74                	jae    18a2 <sysEnter_Vector-0x12e75e>
    182e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1835:	63 
    1836:	2e                   	cs
    1837:	68 00 03 00 00       	push   0x300
    183c:	00 00                	add    BYTE PTR [eax],al
    183e:	05 02 b4 26 00       	add    eax,0x26b402
    1843:	9f                   	lahf   
    1844:	03 d7                	add    edx,edi
    1846:	00 01                	add    BYTE PTR [ecx],al
    1848:	08 2f                	or     BYTE PTR [edi],ch
    184a:	40                   	inc    eax
    184b:	00 02                	add    BYTE PTR [edx],al
    184d:	04 01                	add    al,0x1
    184f:	7c 00                	jl     1851 <sysEnter_Vector-0x12e7af>
    1851:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1854:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1855:	59                   	pop    ecx
    1856:	59                   	pop    ecx
    1857:	75 c9                	jne    1822 <sysEnter_Vector-0x12e7de>
    1859:	59                   	pop    ecx
    185a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    185b:	00 02                	add    BYTE PTR [edx],al
    185d:	04 02                	add    al,0x2
    185f:	06                   	push   es
    1860:	66                   	data16
    1861:	00 02                	add    BYTE PTR [edx],al
    1863:	04 03                	add    al,0x3
    1865:	66 06                	pushw  es
    1867:	59                   	pop    ecx
    1868:	00 02                	add    BYTE PTR [edx],al
    186a:	04 01                	add    al,0x1
    186c:	06                   	push   es
    186d:	74 06                	je     1875 <sysEnter_Vector-0x12e78b>
    186f:	75 91                	jne    1802 <sysEnter_Vector-0x12e7fe>
    1871:	3d 76 67 00 02       	cmp    eax,0x2006776
    1876:	04 01                	add    al,0x1
    1878:	06                   	push   es
    1879:	58                   	pop    eax
    187a:	00 02                	add    BYTE PTR [edx],al
    187c:	04 02                	add    al,0x2
    187e:	74 00                	je     1880 <sysEnter_Vector-0x12e780>
    1880:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1883:	58                   	pop    eax
    1884:	06                   	push   es
    1885:	03 13                	add    edx,DWORD PTR [ebx]
    1887:	3c 00                	cmp    al,0x0
    1889:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    188c:	06                   	push   es
    188d:	66                   	data16
    188e:	00 02                	add    BYTE PTR [edx],al
    1890:	04 02                	add    al,0x2
    1892:	74 00                	je     1894 <sysEnter_Vector-0x12e76c>
    1894:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1897:	06                   	push   es
    1898:	59                   	pop    ecx
    1899:	00 02                	add    BYTE PTR [edx],al
    189b:	04 04                	add    al,0x4
    189d:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    18a3:	f3 9f                	repz lahf 
    18a5:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    18a9:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18ac:	06                   	push   es
    18ad:	58                   	pop    eax
    18ae:	00 02                	add    BYTE PTR [edx],al
    18b0:	04 03                	add    al,0x3
    18b2:	58                   	pop    eax
    18b3:	00 02                	add    BYTE PTR [edx],al
    18b5:	04 04                	add    al,0x4
    18b7:	74 00                	je     18b9 <sysEnter_Vector-0x12e747>
    18b9:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    18bc:	58                   	pop    eax
    18bd:	06                   	push   es
    18be:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    18c1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18c4:	06                   	push   es
    18c5:	66                   	data16
    18c6:	00 02                	add    BYTE PTR [edx],al
    18c8:	04 02                	add    al,0x2
    18ca:	58                   	pop    eax
    18cb:	00 02                	add    BYTE PTR [edx],al
    18cd:	04 03                	add    al,0x3
    18cf:	58                   	pop    eax
    18d0:	06                   	push   es
    18d1:	59                   	pop    ecx
    18d2:	76 59                	jbe    192d <sysEnter_Vector-0x12e6d3>
    18d4:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    18d8:	03 10                	add    edx,DWORD PTR [eax]
    18da:	ac                   	lods   al,BYTE PTR ds:[esi]
    18db:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    18de:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    18e1:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    18e4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18e7:	06                   	push   es
    18e8:	66                   	data16
    18e9:	00 02                	add    BYTE PTR [edx],al
    18eb:	04 02                	add    al,0x2
    18ed:	74 00                	je     18ef <sysEnter_Vector-0x12e711>
    18ef:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    18f2:	58                   	pop    eax
    18f3:	06                   	push   es
    18f4:	4b                   	dec    ebx
    18f5:	67 2f                	addr16 das 
    18f7:	67 00 02             	add    BYTE PTR [bp+si],al
    18fa:	04 01                	add    al,0x1
    18fc:	06                   	push   es
    18fd:	66                   	data16
    18fe:	00 02                	add    BYTE PTR [edx],al
    1900:	04 02                	add    al,0x2
    1902:	58                   	pop    eax
    1903:	00 02                	add    BYTE PTR [edx],al
    1905:	04 04                	add    al,0x4
    1907:	3c 06                	cmp    al,0x6
    1909:	59                   	pop    ecx
    190a:	2f                   	das    
    190b:	02 08                	add    cl,BYTE PTR [eax]
    190d:	00 01                	add    BYTE PTR [ecx],al
    190f:	01 cf                	add    edi,ecx
    1911:	00 00                	add    BYTE PTR [eax],al
    1913:	00 02                	add    BYTE PTR [edx],al
    1915:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    191b:	01 fb                	add    ebx,edi
    191d:	0e                   	push   cs
    191e:	0d 00 01 01 01       	or     eax,0x1010100
    1923:	01 00                	add    DWORD PTR [eax],eax
    1925:	00 00                	add    BYTE PTR [eax],al
    1927:	01 00                	add    DWORD PTR [eax],eax
    1929:	00 01                	add    BYTE PTR [ecx],al
    192b:	73 72                	jae    199f <sysEnter_Vector-0x12e661>
    192d:	63 2f                	arpl   WORD PTR [edi],bp
    192f:	73 74                	jae    19a5 <sysEnter_Vector-0x12e65b>
    1931:	72 69                	jb     199c <sysEnter_Vector-0x12e664>
    1933:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1934:	67 73 00             	addr16 jae 1937 <sysEnter_Vector-0x12e6c9>
    1937:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    193e:	00 2f                	add    BYTE PTR [edi],ch
    1940:	68 6f 6d 65 2f       	push   0x2f656d6f
    1945:	79 6f                	jns    19b6 <sysEnter_Vector-0x12e64a>
    1947:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    194e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1951:	73 73                	jae    19c6 <sysEnter_Vector-0x12e63a>
    1953:	2f                   	das    
    1954:	6c                   	ins    BYTE PTR es:[edi],dx
    1955:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    195c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1962:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1968:	78 2d                	js     1997 <sysEnter_Vector-0x12e669>
    196a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    196c:	75 2f                	jne    199d <sysEnter_Vector-0x12e663>
    196e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1973:	2f                   	das    
    1974:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    197b:	00 00                	add    BYTE PTR [eax],al
    197d:	73 74                	jae    19f3 <sysEnter_Vector-0x12e60d>
    197f:	72 74                	jb     19f5 <sysEnter_Vector-0x12e60b>
    1981:	72 69                	jb     19ec <sysEnter_Vector-0x12e614>
    1983:	6d                   	ins    DWORD PTR es:[edi],dx
    1984:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1987:	01 00                	add    DWORD PTR [eax],eax
    1989:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    198c:	6c                   	ins    BYTE PTR es:[edi],dx
    198d:	6c                   	ins    BYTE PTR es:[edi],dx
    198e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    198f:	63 2e                	arpl   WORD PTR [esi],bp
    1991:	68 00 02 00 00       	push   0x200
    1996:	6c                   	ins    BYTE PTR es:[edi],dx
    1997:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    199e:	4f                   	dec    edi
    199f:	53                   	push   ebx
    19a0:	2e                   	cs
    19a1:	68 00 02 00 00       	push   0x200
    19a6:	73 74                	jae    1a1c <sysEnter_Vector-0x12e5e4>
    19a8:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    19af:	63 
    19b0:	2e                   	cs
    19b1:	68 00 03 00 00       	push   0x300
    19b6:	00 00                	add    BYTE PTR [eax],al
    19b8:	05 02 50 28 00       	add    eax,0x285002
    19bd:	9f                   	lahf   
    19be:	15 08 13 bf 30       	adc    eax,0x30bf1308
    19c3:	48                   	dec    eax
    19c4:	b3 08                	mov    bl,0x8
    19c6:	9f                   	lahf   
    19c7:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    19cd:	06                   	push   es
    19ce:	82                   	(bad)  
    19cf:	06                   	push   es
    19d0:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    19d1:	84 00                	test   BYTE PTR [eax],al
    19d3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    19d6:	06                   	push   es
    19d7:	20 06                	and    BYTE PTR [esi],al
    19d9:	08 ca                	or     dl,cl
    19db:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    19e1:	01 01                	add    DWORD PTR [ecx],eax
    19e3:	c7 00 00 00 02 00    	mov    DWORD PTR [eax],0x20000
    19e9:	94                   	xchg   esp,eax
    19ea:	00 00                	add    BYTE PTR [eax],al
    19ec:	00 01                	add    BYTE PTR [ecx],al
    19ee:	01 fb                	add    ebx,edi
    19f0:	0e                   	push   cs
    19f1:	0d 00 01 01 01       	or     eax,0x1010100
    19f6:	01 00                	add    DWORD PTR [eax],eax
    19f8:	00 00                	add    BYTE PTR [eax],al
    19fa:	01 00                	add    DWORD PTR [eax],eax
    19fc:	00 01                	add    BYTE PTR [ecx],al
    19fe:	73 72                	jae    1a72 <sysEnter_Vector-0x12e58e>
    1a00:	63 00                	arpl   WORD PTR [eax],ax
    1a02:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a09:	00 2f                	add    BYTE PTR [edi],ch
    1a0b:	68 6f 6d 65 2f       	push   0x2f656d6f
    1a10:	79 6f                	jns    1a81 <sysEnter_Vector-0x12e57f>
    1a12:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1a19:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1a1c:	73 73                	jae    1a91 <sysEnter_Vector-0x12e56f>
    1a1e:	2f                   	das    
    1a1f:	6c                   	ins    BYTE PTR es:[edi],dx
    1a20:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1a27:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1a2d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1a33:	78 2d                	js     1a62 <sysEnter_Vector-0x12e59e>
    1a35:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1a37:	75 2f                	jne    1a68 <sysEnter_Vector-0x12e598>
    1a39:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1a3e:	2f                   	das    
    1a3f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a46:	00 00                	add    BYTE PTR [eax],al
    1a48:	73 74                	jae    1abe <sysEnter_Vector-0x12e542>
    1a4a:	72 73                	jb     1abf <sysEnter_Vector-0x12e541>
    1a4c:	74 72                	je     1ac0 <sysEnter_Vector-0x12e540>
    1a4e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1a51:	01 00                	add    DWORD PTR [eax],eax
    1a53:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1a56:	6c                   	ins    BYTE PTR es:[edi],dx
    1a57:	6c                   	ins    BYTE PTR es:[edi],dx
    1a58:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1a59:	63 2e                	arpl   WORD PTR [esi],bp
    1a5b:	68 00 02 00 00       	push   0x200
    1a60:	6c                   	ins    BYTE PTR es:[edi],dx
    1a61:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1a68:	4f                   	dec    edi
    1a69:	53                   	push   ebx
    1a6a:	2e                   	cs
    1a6b:	68 00 02 00 00       	push   0x200
    1a70:	73 74                	jae    1ae6 <sysEnter_Vector-0x12e51a>
    1a72:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1a79:	63 
    1a7a:	2e                   	cs
    1a7b:	68 00 03 00 00       	push   0x300
    1a80:	00 00                	add    BYTE PTR [eax],al
    1a82:	05 02 08 29 00       	add    eax,0x290802
    1a87:	9f                   	lahf   
    1a88:	03 33                	add    esi,DWORD PTR [ebx]
    1a8a:	01 ec                	add    esp,ebp
    1a8c:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1a91:	75 5a                	jne    1aed <sysEnter_Vector-0x12e513>
    1a93:	08 3f                	or     BYTE PTR [edi],bh
    1a95:	2c 23                	sub    al,0x23
    1a97:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1a9a:	1e                   	push   ds
    1a9b:	00 02                	add    BYTE PTR [edx],al
    1a9d:	04 01                	add    al,0x1
    1a9f:	06                   	push   es
    1aa0:	4a                   	dec    edx
    1aa1:	06                   	push   es
    1aa2:	03 0f                	add    ecx,DWORD PTR [edi]
    1aa4:	9e                   	sahf   
    1aa5:	59                   	pop    ecx
    1aa6:	4d                   	dec    ebp
    1aa7:	c9                   	leave  
    1aa8:	d7                   	xlat   BYTE PTR ds:[ebx]
    1aa9:	02 02                	add    al,BYTE PTR [edx]
    1aab:	00 01                	add    BYTE PTR [ecx],al
    1aad:	01 3b                	add    DWORD PTR [ebx],edi
    1aaf:	03 00                	add    eax,DWORD PTR [eax]
    1ab1:	00 02                	add    BYTE PTR [edx],al
    1ab3:	00 cc                	add    ah,cl
    1ab5:	00 00                	add    BYTE PTR [eax],al
    1ab7:	00 01                	add    BYTE PTR [ecx],al
    1ab9:	01 fb                	add    ebx,edi
    1abb:	0e                   	push   cs
    1abc:	0d 00 01 01 01       	or     eax,0x1010100
    1ac1:	01 00                	add    DWORD PTR [eax],eax
    1ac3:	00 00                	add    BYTE PTR [eax],al
    1ac5:	01 00                	add    DWORD PTR [eax],eax
    1ac7:	00 01                	add    BYTE PTR [ecx],al
    1ac9:	73 72                	jae    1b3d <sysEnter_Vector-0x12e4c3>
    1acb:	63 00                	arpl   WORD PTR [eax],ax
    1acd:	2f                   	das    
    1ace:	68 6f 6d 65 2f       	push   0x2f656d6f
    1ad3:	79 6f                	jns    1b44 <sysEnter_Vector-0x12e4bc>
    1ad5:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1adc:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1adf:	73 73                	jae    1b54 <sysEnter_Vector-0x12e4ac>
    1ae1:	2f                   	das    
    1ae2:	6c                   	ins    BYTE PTR es:[edi],dx
    1ae3:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1aea:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1af0:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1af6:	78 2d                	js     1b25 <sysEnter_Vector-0x12e4db>
    1af8:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1afa:	75 2f                	jne    1b2b <sysEnter_Vector-0x12e4d5>
    1afc:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1b01:	2f                   	das    
    1b02:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1b09:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1b0c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1b10:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    1b13:	2e                   	cs
    1b14:	2f                   	das    
    1b15:	2e                   	cs
    1b16:	2e                   	cs
    1b17:	2f                   	das    
    1b18:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1b1c:	6a 2f                	push   0x2f
    1b1e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1b21:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1b28:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b29:	65                   	gs
    1b2a:	6c                   	ins    BYTE PTR es:[edi],dx
    1b2b:	2f                   	das    
    1b2c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1b33:	00 00                	add    BYTE PTR [eax],al
    1b35:	74 69                	je     1ba0 <sysEnter_Vector-0x12e460>
    1b37:	6d                   	ins    DWORD PTR es:[edi],dx
    1b38:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    1b3c:	01 00                	add    DWORD PTR [eax],eax
    1b3e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1b41:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1b48:	63 
    1b49:	2e                   	cs
    1b4a:	68 00 02 00 00       	push   0x200
    1b4f:	74 69                	je     1bba <sysEnter_Vector-0x12e446>
    1b51:	6d                   	ins    DWORD PTR es:[edi],dx
    1b52:	65                   	gs
    1b53:	2e                   	cs
    1b54:	68 00 03 00 00       	push   0x300
    1b59:	6d                   	ins    DWORD PTR es:[edi],dx
    1b5a:	61                   	popa   
    1b5b:	6c                   	ins    BYTE PTR es:[edi],dx
    1b5c:	6c                   	ins    BYTE PTR es:[edi],dx
    1b5d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1b5e:	63 2e                	arpl   WORD PTR [esi],bp
    1b60:	68 00 03 00 00       	push   0x300
    1b65:	6c                   	ins    BYTE PTR es:[edi],dx
    1b66:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1b6d:	4f                   	dec    edi
    1b6e:	53                   	push   ebx
    1b6f:	2e                   	cs
    1b70:	68 00 03 00 00       	push   0x300
    1b75:	73 79                	jae    1bf0 <sysEnter_Vector-0x12e410>
    1b77:	73 63                	jae    1bdc <sysEnter_Vector-0x12e424>
    1b79:	61                   	popa   
    1b7a:	6c                   	ins    BYTE PTR es:[edi],dx
    1b7b:	6c                   	ins    BYTE PTR es:[edi],dx
    1b7c:	73 2e                	jae    1bac <sysEnter_Vector-0x12e454>
    1b7e:	68 00 04 00 00       	push   0x400
    1b83:	00 00                	add    BYTE PTR [eax],al
    1b85:	05 02 94 29 00       	add    eax,0x299402
    1b8a:	9f                   	lahf   
    1b8b:	03 16                	add    edx,DWORD PTR [esi]
    1b8d:	01 08                	add    DWORD PTR [eax],ecx
    1b8f:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1b92:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1b98:	76 02                	jbe    1b9c <sysEnter_Vector-0x12e464>
    1b9a:	24 13                	and    al,0x13
    1b9c:	08 22                	or     BYTE PTR [edx],ah
    1b9e:	02 2e                	add    ch,BYTE PTR [esi]
    1ba0:	13 02                	adc    eax,DWORD PTR [edx]
    1ba2:	2f                   	das    
    1ba3:	13 08                	adc    ecx,DWORD PTR [eax]
    1ba5:	67 02 2d             	add    ch,BYTE PTR [di]
    1ba8:	13 2f                	adc    ebp,DWORD PTR [edi]
    1baa:	00 02                	add    BYTE PTR [edx],al
    1bac:	04 01                	add    al,0x1
    1bae:	06                   	push   es
    1baf:	9e                   	sahf   
    1bb0:	00 02                	add    BYTE PTR [edx],al
    1bb2:	04 04                	add    al,0x4
    1bb4:	02 23                	add    ah,BYTE PTR [ebx]
    1bb6:	12 00                	adc    al,BYTE PTR [eax]
    1bb8:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1bbf:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1bc2:	74 00                	je     1bc4 <sysEnter_Vector-0x12e43c>
    1bc4:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1bc7:	58                   	pop    eax
    1bc8:	00 02                	add    BYTE PTR [edx],al
    1bca:	04 08                	add    al,0x8
    1bcc:	06                   	push   es
    1bcd:	3d 48 00 02 04       	cmp    eax,0x4020048
    1bd2:	01 06                	add    DWORD PTR [esi],eax
    1bd4:	9e                   	sahf   
    1bd5:	00 02                	add    BYTE PTR [edx],al
    1bd7:	04 04                	add    al,0x4
    1bd9:	02 23                	add    ah,BYTE PTR [ebx]
    1bdb:	12 00                	adc    al,BYTE PTR [eax]
    1bdd:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1be4:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1be7:	74 00                	je     1be9 <sysEnter_Vector-0x12e417>
    1be9:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1bec:	58                   	pop    eax
    1bed:	06                   	push   es
    1bee:	94                   	xchg   esp,eax
    1bef:	e5 91                	in     eax,0x91
    1bf1:	9f                   	lahf   
    1bf2:	59                   	pop    ecx
    1bf3:	00 02                	add    BYTE PTR [edx],al
    1bf5:	04 01                	add    al,0x1
    1bf7:	06                   	push   es
    1bf8:	9e                   	sahf   
    1bf9:	00 02                	add    BYTE PTR [edx],al
    1bfb:	04 04                	add    al,0x4
    1bfd:	02 23                	add    ah,BYTE PTR [ebx]
    1bff:	12 00                	adc    al,BYTE PTR [eax]
    1c01:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1c08:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c0b:	74 00                	je     1c0d <sysEnter_Vector-0x12e3f3>
    1c0d:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1c10:	58                   	pop    eax
    1c11:	00 02                	add    BYTE PTR [edx],al
    1c13:	04 08                	add    al,0x8
    1c15:	06                   	push   es
    1c16:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    1c1c:	01 06                	add    DWORD PTR [esi],eax
    1c1e:	9e                   	sahf   
    1c1f:	00 02                	add    BYTE PTR [edx],al
    1c21:	04 04                	add    al,0x4
    1c23:	02 23                	add    ah,BYTE PTR [ebx]
    1c25:	12 00                	adc    al,BYTE PTR [eax]
    1c27:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1c2e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c31:	74 00                	je     1c33 <sysEnter_Vector-0x12e3cd>
    1c33:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1c36:	58                   	pop    eax
    1c37:	06                   	push   es
    1c38:	08 f6                	or     dh,dh
    1c3a:	d7                   	xlat   BYTE PTR ds:[ebx]
    1c3b:	9f                   	lahf   
    1c3c:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    1c41:	08 16                	or     BYTE PTR [esi],dl
    1c43:	08 3d 08 4b 5b f5    	or     BYTE PTR ds:0xf55b4b08,bh
    1c49:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    1c4f:	30 08                	xor    BYTE PTR [eax],cl
    1c51:	44                   	inc    esp
    1c52:	02 2e                	add    ch,BYTE PTR [esi]
    1c54:	13 02                	adc    eax,DWORD PTR [edx]
    1c56:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1c58:	91                   	xchg   ecx,eax
    1c59:	c9                   	leave  
    1c5a:	e6 02                	out    0x2,al
    1c5c:	2f                   	das    
    1c5d:	13 02                	adc    eax,DWORD PTR [edx]
    1c5f:	3c 13                	cmp    al,0x13
    1c61:	9f                   	lahf   
    1c62:	e5 e6                	in     eax,0xe6
    1c64:	08 c9                	or     cl,cl
    1c66:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1c69:	9f                   	lahf   
    1c6a:	e5 4c                	in     eax,0x4c
    1c6c:	02 29                	add    ch,BYTE PTR [ecx]
    1c6e:	13 02                	adc    eax,DWORD PTR [edx]
    1c70:	2b 13                	sub    edx,DWORD PTR [ebx]
    1c72:	9f                   	lahf   
    1c73:	e5 e6                	in     eax,0xe6
    1c75:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1c7a:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1c7f:	06                   	push   es
    1c80:	c8 00 02 04          	enter  0x200,0x4
    1c84:	04 02                	add    al,0x2
    1c86:	2c 12                	sub    al,0x12
    1c88:	00 02                	add    BYTE PTR [edx],al
    1c8a:	04 05                	add    al,0x5
    1c8c:	02 2f                	add    ch,BYTE PTR [edi]
    1c8e:	12 00                	adc    al,BYTE PTR [eax]
    1c90:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c93:	74 00                	je     1c95 <sysEnter_Vector-0x12e36b>
    1c95:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1c98:	58                   	pop    eax
    1c99:	06                   	push   es
    1c9a:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1ca0:	04 01                	add    al,0x1
    1ca2:	06                   	push   es
    1ca3:	c8 00 02 04          	enter  0x200,0x4
    1ca7:	04 02                	add    al,0x2
    1ca9:	2c 12                	sub    al,0x12
    1cab:	00 02                	add    BYTE PTR [edx],al
    1cad:	04 05                	add    al,0x5
    1caf:	02 2f                	add    ch,BYTE PTR [edi]
    1cb1:	12 00                	adc    al,BYTE PTR [eax]
    1cb3:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1cb6:	74 00                	je     1cb8 <sysEnter_Vector-0x12e348>
    1cb8:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1cbb:	58                   	pop    eax
    1cbc:	00 02                	add    BYTE PTR [edx],al
    1cbe:	04 08                	add    al,0x8
    1cc0:	06                   	push   es
    1cc1:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1cc7:	00 02                	add    BYTE PTR [edx],al
    1cc9:	04 01                	add    al,0x1
    1ccb:	06                   	push   es
    1ccc:	c8 00 02 04          	enter  0x200,0x4
    1cd0:	04 02                	add    al,0x2
    1cd2:	2c 12                	sub    al,0x12
    1cd4:	00 02                	add    BYTE PTR [edx],al
    1cd6:	04 05                	add    al,0x5
    1cd8:	02 2f                	add    ch,BYTE PTR [edi]
    1cda:	12 00                	adc    al,BYTE PTR [eax]
    1cdc:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1cdf:	74 00                	je     1ce1 <sysEnter_Vector-0x12e31f>
    1ce1:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1ce4:	58                   	pop    eax
    1ce5:	06                   	push   es
    1ce6:	08 f9                	or     cl,bh
    1ce8:	bb 75 00 02 04       	mov    ebx,0x4020075
    1ced:	01 06                	add    DWORD PTR [esi],eax
    1cef:	08 2e                	or     BYTE PTR [esi],ch
    1cf1:	06                   	push   es
    1cf2:	9f                   	lahf   
    1cf3:	75 75                	jne    1d6a <sysEnter_Vector-0x12e296>
    1cf5:	7b d8                	jnp    1ccf <sysEnter_Vector-0x12e331>
    1cf7:	00 02                	add    BYTE PTR [edx],al
    1cf9:	04 01                	add    al,0x1
    1cfb:	06                   	push   es
    1cfc:	c8 06 75 e5          	enter  0x7506,0xe5
    1d00:	00 02                	add    BYTE PTR [edx],al
    1d02:	04 01                	add    al,0x1
    1d04:	06                   	push   es
    1d05:	02 22                	add    ah,BYTE PTR [edx]
    1d07:	12 06                	adc    al,BYTE PTR [esi]
    1d09:	4b                   	dec    ebx
    1d0a:	00 02                	add    BYTE PTR [edx],al
    1d0c:	04 01                	add    al,0x1
    1d0e:	06                   	push   es
    1d0f:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1d15:	02 22                	add    ah,BYTE PTR [edx]
    1d17:	12 00                	adc    al,BYTE PTR [eax]
    1d19:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1d1c:	74 00                	je     1d1e <sysEnter_Vector-0x12e2e2>
    1d1e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d21:	58                   	pop    eax
    1d22:	00 02                	add    BYTE PTR [edx],al
    1d24:	04 06                	add    al,0x6
    1d26:	06                   	push   es
    1d27:	59                   	pop    ecx
    1d28:	00 02                	add    BYTE PTR [edx],al
    1d2a:	04 01                	add    al,0x1
    1d2c:	06                   	push   es
    1d2d:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1d30:	00 02                	add    BYTE PTR [edx],al
    1d32:	04 03                	add    al,0x3
    1d34:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1d37:	00 02                	add    BYTE PTR [edx],al
    1d39:	04 04                	add    al,0x4
    1d3b:	74 00                	je     1d3d <sysEnter_Vector-0x12e2c3>
    1d3d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d40:	58                   	pop    eax
    1d41:	00 02                	add    BYTE PTR [edx],al
    1d43:	04 06                	add    al,0x6
    1d45:	06                   	push   es
    1d46:	59                   	pop    ecx
    1d47:	00 02                	add    BYTE PTR [edx],al
    1d49:	04 01                	add    al,0x1
    1d4b:	06                   	push   es
    1d4c:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1d4f:	00 02                	add    BYTE PTR [edx],al
    1d51:	04 03                	add    al,0x3
    1d53:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1d56:	00 02                	add    BYTE PTR [edx],al
    1d58:	04 04                	add    al,0x4
    1d5a:	74 00                	je     1d5c <sysEnter_Vector-0x12e2a4>
    1d5c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d5f:	58                   	pop    eax
    1d60:	00 02                	add    BYTE PTR [edx],al
    1d62:	04 06                	add    al,0x6
    1d64:	06                   	push   es
    1d65:	5a                   	pop    edx
    1d66:	00 02                	add    BYTE PTR [edx],al
    1d68:	04 06                	add    al,0x6
    1d6a:	c9                   	leave  
    1d6b:	2f                   	das    
    1d6c:	00 02                	add    BYTE PTR [edx],al
    1d6e:	04 01                	add    al,0x1
    1d70:	06                   	push   es
    1d71:	9e                   	sahf   
    1d72:	00 02                	add    BYTE PTR [edx],al
    1d74:	04 04                	add    al,0x4
    1d76:	02 23                	add    ah,BYTE PTR [ebx]
    1d78:	12 00                	adc    al,BYTE PTR [eax]
    1d7a:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1d81:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d84:	74 00                	je     1d86 <sysEnter_Vector-0x12e27a>
    1d86:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1d89:	58                   	pop    eax
    1d8a:	00 02                	add    BYTE PTR [edx],al
    1d8c:	04 08                	add    al,0x8
    1d8e:	06                   	push   es
    1d8f:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1d92:	e8 bb 00 02 04       	call   4021e52 <sysEnter_Vector+0x3ef1e52>
    1d97:	01 06                	add    DWORD PTR [esi],eax
    1d99:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1d9e:	02 31                	add    dh,BYTE PTR [ecx]
    1da0:	14 02                	adc    al,0x2
    1da2:	2c 14                	sub    al,0x14
    1da4:	00 02                	add    BYTE PTR [edx],al
    1da6:	04 01                	add    al,0x1
    1da8:	06                   	push   es
    1da9:	02 29                	add    ch,BYTE PTR [ecx]
    1dab:	12 06                	adc    al,BYTE PTR [esi]
    1dad:	4b                   	dec    ebx
    1dae:	bd 00 02 04 01       	mov    ebp,0x1040200
    1db3:	06                   	push   es
    1db4:	ba 00 02 04 03       	mov    edx,0x3040200
    1db9:	06                   	push   es
    1dba:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1dbd:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    1dc0:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    1dc7:	77 00                	ja     1dc9 <sysEnter_Vector-0x12e237>
    1dc9:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1dcc:	06                   	push   es
    1dcd:	82                   	(bad)  
    1dce:	06                   	push   es
    1dcf:	4b                   	dec    ebx
    1dd0:	68 00 02 04 01       	push   0x1040200
    1dd5:	06                   	push   es
    1dd6:	66 06                	pushw  es
    1dd8:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    1dde:	08 f3                	or     bl,dh
    1de0:	67 08 14             	or     BYTE PTR [si],dl
    1de3:	00 02                	add    BYTE PTR [edx],al
    1de5:	04 01                	add    al,0x1
    1de7:	e5 02                	in     eax,0x2
    1de9:	07                   	pop    es
    1dea:	00 01                	add    BYTE PTR [ecx],al
    1dec:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
  10:	6f                   	outs   dx,DWORD PTR ds:[esi]
  11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
  13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
  18:	67 6e                	outs   dx,BYTE PTR ds:[si]
  1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
  21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
  23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
  25:	68 72 00 70 72       	push   0x72700072
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  2e:	73 45                	jae    75 <sysEnter_Vector-0x12ff8b>
  30:	6e                   	outs   dx,BYTE PTR ds:[esi]
  31:	76 70                	jbe    a3 <sysEnter_Vector-0x12ff5d>
  33:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  37:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  3c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  40:	73 69                	jae    ab <sysEnter_Vector-0x12ff55>
  42:	67 6e                	outs   dx,BYTE PTR ds:[si]
  44:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  49:	74 00                	je     4b <sysEnter_Vector-0x12ffb5>
  4b:	68 65 61 70 42       	push   0x42706165
  50:	61                   	popa   
  51:	73 65                	jae    b8 <sysEnter_Vector-0x12ff48>
  53:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
  57:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
  5b:	75 6e                	jne    cb <sysEnter_Vector-0x12ff35>
  5d:	73 69                	jae    c8 <sysEnter_Vector-0x12ff38>
  5f:	67 6e                	outs   dx,BYTE PTR ds:[si]
  61:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  66:	61                   	popa   
  67:	72 00                	jb     69 <sysEnter_Vector-0x12ff97>
  69:	75 69                	jne    d4 <sysEnter_Vector-0x12ff2c>
  6b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  6c:	74 33                	je     a1 <sysEnter_Vector-0x12ff5f>
  6e:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  71:	00 2f                	add    BYTE PTR [edi],ch
  73:	68 6f 6d 65 2f       	push   0x2f656d6f
  78:	79 6f                	jns    e9 <sysEnter_Vector-0x12ff17>
  7a:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  81:	6f                   	outs   dx,DWORD PTR ds:[esi]
  82:	73 2f                	jae    b3 <sysEnter_Vector-0x12ff4d>
  84:	61                   	popa   
  85:	70 72                	jo     f9 <sysEnter_Vector-0x12ff07>
  87:	6f                   	outs   dx,DWORD PTR ds:[esi]
  88:	6a 2f                	push   0x2f
  8a:	6c                   	ins    BYTE PTR es:[edi],dx
  8b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  92:	4f                   	dec    edi
  93:	53                   	push   ebx
  94:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  97:	6f                   	outs   dx,DWORD PTR ds:[esi]
  98:	6f                   	outs   dx,DWORD PTR ds:[esi]
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  9e:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
  a2:	75 62                	jne    106 <sysEnter_Vector-0x12fefa>
  a4:	6c                   	ins    BYTE PTR es:[edi],dx
  a5:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
  a9:	72 63                	jb     10e <sysEnter_Vector-0x12fef2>
  ab:	68 72 49 00 68       	push   0x68004972
  b0:	65                   	gs
  b1:	61                   	popa   
  b2:	70 43                	jo     f7 <sysEnter_Vector-0x12ff09>
  b4:	75 72                	jne    128 <sysEnter_Vector-0x12fed8>
  b6:	72 00                	jb     b8 <sysEnter_Vector-0x12ff48>
  b8:	2e                   	cs
  b9:	2e                   	cs
  ba:	2f                   	das    
  bb:	2e                   	cs
  bc:	2e                   	cs
  bd:	2f                   	das    
  be:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
  c2:	6a 2f                	push   0x2f
  c4:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
  c7:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
  ce:	63 2f                	arpl   WORD PTR [edi],bp
  d0:	73 74                	jae    146 <sysEnter_Vector-0x12feba>
  d2:	72 69                	jb     13d <sysEnter_Vector-0x12fec3>
  d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
  d5:	67 73 2f             	addr16 jae 107 <sysEnter_Vector-0x12fef9>
  d8:	73 74                	jae    14e <sysEnter_Vector-0x12feb2>
  da:	72 63                	jb     13f <sysEnter_Vector-0x12fec1>
  dc:	68 72 2e 63 00       	push   0x632e72
  e1:	73 69                	jae    14c <sysEnter_Vector-0x12feb4>
  e3:	7a 65                	jp     14a <sysEnter_Vector-0x12feb6>
  e5:	74 79                	je     160 <sysEnter_Vector-0x12fea0>
  e7:	70 65                	jo     14e <sysEnter_Vector-0x12feb2>
  e9:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ed:	72 74                	jb     163 <sysEnter_Vector-0x12fe9d>
  ef:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
  f2:	74 00                	je     f4 <sysEnter_Vector-0x12ff0c>
  f4:	47                   	inc    edi
  f5:	4e                   	dec    esi
  f6:	55                   	push   ebp
  f7:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  fa:	31 20                	xor    DWORD PTR [eax],esp
  fc:	35 2e 33 2e 30       	xor    eax,0x302e332e
 101:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
 107:	3d 69 6e 74 65       	cmp    eax,0x65746e69
 10c:	6c                   	ins    BYTE PTR es:[edi],dx
 10d:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
 113:	65                   	gs
 114:	3d 67 65 6e 65       	cmp    eax,0x656e6567
 119:	72 69                	jb     184 <sysEnter_Vector-0x12fe7c>
 11b:	63 20                	arpl   WORD PTR [eax],sp
 11d:	2d 6d 61 72 63       	sub    eax,0x6372616d
 122:	68 3d 70 65 6e       	push   0x6e65703d
 127:	74 69                	je     192 <sysEnter_Vector-0x12fe6e>
 129:	75 6d                	jne    198 <sysEnter_Vector-0x12fe68>
 12b:	70 72                	jo     19f <sysEnter_Vector-0x12fe61>
 12d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 12e:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
 134:	66                   	data16
 135:	72 65                	jb     19c <sysEnter_Vector-0x12fe64>
 137:	65                   	gs
 138:	73 74                	jae    1ae <sysEnter_Vector-0x12fe52>
 13a:	61                   	popa   
 13b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 13c:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
 143:	76 
 144:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 14b:	74 79                	je     1c6 <sysEnter_Vector-0x12fe3a>
 14d:	3d 68 69 64 64       	cmp    eax,0x64646968
 152:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 154:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 15a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 15d:	61                   	popa   
 15e:	70 45                	jo     1a5 <sysEnter_Vector-0x12fe5b>
 160:	6e                   	outs   dx,BYTE PTR ds:[esi]
 161:	64 00 63 68          	add    BYTE PTR fs:[ebx+0x68],ah
 165:	61                   	popa   
 166:	72 73                	jb     1db <sysEnter_Vector-0x12fe25>
 168:	00 2e                	add    BYTE PTR [esi],ch
 16a:	2e                   	cs
 16b:	2f                   	das    
 16c:	2e                   	cs
 16d:	2e                   	cs
 16e:	2f                   	das    
 16f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 173:	6a 2f                	push   0x2f
 175:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 178:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 17f:	63 2f                	arpl   WORD PTR [edi],bp
 181:	73 74                	jae    1f7 <sysEnter_Vector-0x12fe09>
 183:	72 69                	jb     1ee <sysEnter_Vector-0x12fe12>
 185:	6e                   	outs   dx,BYTE PTR ds:[esi]
 186:	67 73 2f             	addr16 jae 1b8 <sysEnter_Vector-0x12fe48>
 189:	73 74                	jae    1ff <sysEnter_Vector-0x12fe01>
 18b:	72 63                	jb     1f0 <sysEnter_Vector-0x12fe10>
 18d:	73 70                	jae    1ff <sysEnter_Vector-0x12fe01>
 18f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 190:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 193:	73 74                	jae    209 <sysEnter_Vector-0x12fdf7>
 195:	72 63                	jb     1fa <sysEnter_Vector-0x12fe06>
 197:	73 70                	jae    209 <sysEnter_Vector-0x12fdf7>
 199:	6e                   	outs   dx,BYTE PTR ds:[esi]
 19a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 19d:	72 63                	jb     202 <sysEnter_Vector-0x12fdfe>
 19f:	73 70                	jae    211 <sysEnter_Vector-0x12fdef>
 1a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a2:	49                   	dec    ecx
 1a3:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1a7:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
 1ae:	2e                   	cs
 1af:	2f                   	das    
 1b0:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1b4:	6a 2f                	push   0x2f
 1b6:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1b9:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c0:	63 2f                	arpl   WORD PTR [edi],bp
 1c2:	73 74                	jae    238 <sysEnter_Vector-0x12fdc8>
 1c4:	72 69                	jb     22f <sysEnter_Vector-0x12fdd1>
 1c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1c7:	67 73 2f             	addr16 jae 1f9 <sysEnter_Vector-0x12fe07>
 1ca:	73 74                	jae    240 <sysEnter_Vector-0x12fdc0>
 1cc:	72 74                	jb     242 <sysEnter_Vector-0x12fdbe>
 1ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1cf:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d2:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1d6:	74 73                	je     24b <sysEnter_Vector-0x12fdb5>
 1d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1db:	72 74                	jb     251 <sysEnter_Vector-0x12fdaf>
 1dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1de:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 1e1:	74 6f                	je     252 <sysEnter_Vector-0x12fdae>
 1e3:	61                   	popa   
 1e4:	49                   	dec    ecx
 1e5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 1e8:	63 2f                	arpl   WORD PTR [edi],bp
 1ea:	61                   	popa   
 1eb:	73 63                	jae    250 <sysEnter_Vector-0x12fdb0>
 1ed:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f5:	61                   	popa   
 1f6:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 1f9:	76 65                	jbe    260 <sysEnter_Vector-0x12fda0>
 1fb:	72 73                	jb     270 <sysEnter_Vector-0x12fd90>
 1fd:	65                   	gs
 1fe:	49                   	dec    ecx
 1ff:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 202:	67 6e                	outs   dx,BYTE PTR ds:[si]
 204:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 207:	6c                   	ins    BYTE PTR es:[edi],dx
 208:	75 65                	jne    26f <sysEnter_Vector-0x12fd91>
 20a:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 20e:	74 50                	je     260 <sysEnter_Vector-0x12fda0>
 210:	6f                   	outs   dx,DWORD PTR ds:[esi]
 211:	70 75                	jo     288 <sysEnter_Vector-0x12fd78>
 213:	6c                   	ins    BYTE PTR es:[edi],dx
 214:	61                   	popa   
 215:	74 65                	je     27c <sysEnter_Vector-0x12fd84>
 217:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 21b:	74 65                	je     282 <sysEnter_Vector-0x12fd7e>
 21d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 21e:	76 00                	jbe    220 <sysEnter_Vector-0x12fde0>
 220:	67                   	addr16
 221:	65                   	gs
 222:	74 65                	je     289 <sysEnter_Vector-0x12fd77>
 224:	6e                   	outs   dx,BYTE PTR ds:[esi]
 225:	76 00                	jbe    227 <sysEnter_Vector-0x12fdd9>
 227:	73 72                	jae    29b <sysEnter_Vector-0x12fd65>
 229:	63 2f                	arpl   WORD PTR [edi],bp
 22b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 22d:	76 69                	jbe    298 <sysEnter_Vector-0x12fd68>
 22f:	72 6f                	jb     2a0 <sysEnter_Vector-0x12fd60>
 231:	6e                   	outs   dx,BYTE PTR ds:[esi]
 232:	6d                   	ins    DWORD PTR es:[edi],dx
 233:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 235:	74 2e                	je     265 <sysEnter_Vector-0x12fd9b>
 237:	63 00                	arpl   WORD PTR [eax],ax
 239:	76 61                	jbe    29c <sysEnter_Vector-0x12fd64>
 23b:	72 6e                	jb     2ab <sysEnter_Vector-0x12fd55>
 23d:	61                   	popa   
 23e:	6d                   	ins    DWORD PTR es:[edi],dx
 23f:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
 243:	74 64                	je     2a9 <sysEnter_Vector-0x12fd57>
 245:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
 24c:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 250:	53                   	push   ebx
 251:	43                   	inc    ebx
 252:	41                   	inc    ecx
 253:	4c                   	dec    esp
 254:	4c                   	dec    esp
 255:	5f                   	pop    edi
 256:	52                   	push   edx
 257:	45                   	inc    ebp
 258:	41                   	inc    ecx
 259:	44                   	inc    esp
 25a:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 25d:	69 74 65 00 53 59 53 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x43535953
 264:	43 
 265:	41                   	inc    ecx
 266:	4c                   	dec    esp
 267:	4c                   	dec    esp
 268:	5f                   	pop    edi
 269:	50                   	push   eax
 26a:	49                   	dec    ecx
 26b:	50                   	push   eax
 26c:	45                   	inc    ebp
 26d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 270:	53                   	push   ebx
 271:	43                   	inc    ebx
 272:	41                   	inc    ecx
 273:	4c                   	dec    esp
 274:	4c                   	dec    esp
 275:	5f                   	pop    edi
 276:	4f                   	dec    edi
 277:	50                   	push   eax
 278:	45                   	inc    ebp
 279:	4e                   	dec    esi
 27a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 27d:	53                   	push   ebx
 27e:	43                   	inc    ebx
 27f:	41                   	inc    ecx
 280:	4c                   	dec    esp
 281:	4c                   	dec    esp
 282:	5f                   	pop    edi
 283:	4d                   	dec    ebp
 284:	41                   	inc    ecx
 285:	53                   	push   ebx
 286:	4b                   	dec    ebx
 287:	53                   	push   ebx
 288:	49                   	dec    ecx
 289:	47                   	inc    edi
 28a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 28d:	53                   	push   ebx
 28e:	43                   	inc    ebx
 28f:	41                   	inc    ecx
 290:	4c                   	dec    esp
 291:	4c                   	dec    esp
 292:	5f                   	pop    edi
 293:	47                   	inc    edi
 294:	45                   	inc    ebp
 295:	54                   	push   esp
 296:	44                   	inc    esp
 297:	45                   	inc    ebp
 298:	4e                   	dec    esi
 299:	54                   	push   esp
 29a:	53                   	push   ebx
 29b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 29e:	63 2f                	arpl   WORD PTR [edi],bp
 2a0:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 2a7:	53                   	push   ebx
 2a8:	59                   	pop    ecx
 2a9:	53                   	push   ebx
 2aa:	43                   	inc    ebx
 2ab:	41                   	inc    ecx
 2ac:	4c                   	dec    esp
 2ad:	4c                   	dec    esp
 2ae:	5f                   	pop    edi
 2af:	52                   	push   edx
 2b0:	45                   	inc    ebp
 2b1:	42                   	inc    edx
 2b2:	4f                   	dec    edi
 2b3:	4f                   	dec    edi
 2b4:	54                   	push   esp
 2b5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2b8:	53                   	push   ebx
 2b9:	43                   	inc    ebx
 2ba:	41                   	inc    ecx
 2bb:	4c                   	dec    esp
 2bc:	4c                   	dec    esp
 2bd:	5f                   	pop    edi
 2be:	48                   	dec    eax
 2bf:	4c                   	dec    esp
 2c0:	54                   	push   esp
 2c1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2c4:	53                   	push   ebx
 2c5:	43                   	inc    ebx
 2c6:	41                   	inc    ecx
 2c7:	4c                   	dec    esp
 2c8:	4c                   	dec    esp
 2c9:	5f                   	pop    edi
 2ca:	45                   	inc    ebp
 2cb:	58                   	pop    eax
 2cc:	45                   	inc    ebp
 2cd:	43                   	inc    ebx
 2ce:	4e                   	dec    esi
 2cf:	45                   	inc    ebp
 2d0:	57                   	push   edi
 2d1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2d4:	53                   	push   ebx
 2d5:	43                   	inc    ebx
 2d6:	41                   	inc    ecx
 2d7:	4c                   	dec    esp
 2d8:	4c                   	dec    esp
 2d9:	5f                   	pop    edi
 2da:	53                   	push   ebx
 2db:	4c                   	dec    esp
 2dc:	45                   	inc    ebp
 2dd:	45                   	inc    ebp
 2de:	50                   	push   eax
 2df:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e2:	53                   	push   ebx
 2e3:	43                   	inc    ebx
 2e4:	41                   	inc    ecx
 2e5:	4c                   	dec    esp
 2e6:	4c                   	dec    esp
 2e7:	5f                   	pop    edi
 2e8:	47                   	inc    edi
 2e9:	45                   	inc    ebp
 2ea:	54                   	push   esp
 2eb:	54                   	push   esp
 2ec:	49                   	dec    ecx
 2ed:	4d                   	dec    ebp
 2ee:	45                   	inc    ebp
 2ef:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2f2:	53                   	push   ebx
 2f3:	43                   	inc    ebx
 2f4:	41                   	inc    ecx
 2f5:	4c                   	dec    esp
 2f6:	4c                   	dec    esp
 2f7:	5f                   	pop    edi
 2f8:	53                   	push   ebx
 2f9:	45                   	inc    ebp
 2fa:	54                   	push   esp
 2fb:	50                   	push   eax
 2fc:	52                   	push   edx
 2fd:	49                   	dec    ecx
 2fe:	4f                   	dec    edi
 2ff:	52                   	push   edx
 300:	49                   	dec    ecx
 301:	54                   	push   esp
 302:	59                   	pop    ecx
 303:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 306:	53                   	push   ebx
 307:	43                   	inc    ebx
 308:	41                   	inc    ecx
 309:	4c                   	dec    esp
 30a:	4c                   	dec    esp
 30b:	5f                   	pop    edi
 30c:	43                   	inc    ebx
 30d:	4c                   	dec    esp
 30e:	4f                   	dec    edi
 30f:	53                   	push   ebx
 310:	45                   	inc    ebp
 311:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 314:	79 73                	jns    389 <sysEnter_Vector-0x12fc77>
 316:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 319:	6c                   	ins    BYTE PTR es:[edi],dx
 31a:	73 00                	jae    31c <sysEnter_Vector-0x12fce4>
 31c:	6c                   	ins    BYTE PTR es:[edi],dx
 31d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 31f:	67 74 68             	addr16 je 38a <sysEnter_Vector-0x12fc76>
 322:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 325:	61                   	popa   
 326:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 32a:	53                   	push   ebx
 32b:	43                   	inc    ebx
 32c:	41                   	inc    ecx
 32d:	4c                   	dec    esp
 32e:	4c                   	dec    esp
 32f:	5f                   	pop    edi
 330:	46                   	inc    esi
 331:	4f                   	dec    edi
 332:	52                   	push   edx
 333:	4b                   	dec    ebx
 334:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 337:	53                   	push   ebx
 338:	43                   	inc    ebx
 339:	41                   	inc    ecx
 33a:	4c                   	dec    esp
 33b:	4c                   	dec    esp
 33c:	5f                   	pop    edi
 33d:	53                   	push   ebx
 33e:	54                   	push   esp
 33f:	4f                   	dec    edi
 340:	50                   	push   eax
 341:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 344:	53                   	push   ebx
 345:	43                   	inc    ebx
 346:	41                   	inc    ecx
 347:	4c                   	dec    esp
 348:	4c                   	dec    esp
 349:	5f                   	pop    edi
 34a:	50                   	push   eax
 34b:	52                   	push   edx
 34c:	49                   	dec    ecx
 34d:	4e                   	dec    esi
 34e:	54                   	push   esp
 34f:	44                   	inc    esp
 350:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 353:	66                   	data16
 354:	66                   	data16
 355:	65                   	gs
 356:	72 43                	jb     39b <sysEnter_Vector-0x12fc65>
 358:	6f                   	outs   dx,DWORD PTR ds:[esi]
 359:	75 6e                	jne    3c9 <sysEnter_Vector-0x12fc37>
 35b:	74 00                	je     35d <sysEnter_Vector-0x12fca3>
 35d:	53                   	push   ebx
 35e:	59                   	pop    ecx
 35f:	53                   	push   ebx
 360:	43                   	inc    ebx
 361:	41                   	inc    ecx
 362:	4c                   	dec    esp
 363:	4c                   	dec    esp
 364:	5f                   	pop    edi
 365:	46                   	inc    esi
 366:	52                   	push   edx
 367:	45                   	inc    ebp
 368:	45                   	inc    ebp
 369:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 36c:	53                   	push   ebx
 36d:	43                   	inc    ebx
 36e:	41                   	inc    ecx
 36f:	4c                   	dec    esp
 370:	4c                   	dec    esp
 371:	5f                   	pop    edi
 372:	45                   	inc    ebp
 373:	58                   	pop    eax
 374:	45                   	inc    ebp
 375:	43                   	inc    ebx
 376:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 379:	53                   	push   ebx
 37a:	43                   	inc    ebx
 37b:	41                   	inc    ecx
 37c:	4c                   	dec    esp
 37d:	4c                   	dec    esp
 37e:	5f                   	pop    edi
 37f:	49                   	dec    ecx
 380:	4e                   	dec    esi
 381:	56                   	push   esi
 382:	41                   	inc    ecx
 383:	4c                   	dec    esp
 384:	49                   	dec    ecx
 385:	44                   	inc    esp
 386:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 389:	53                   	push   ebx
 38a:	43                   	inc    ebx
 38b:	41                   	inc    ecx
 38c:	4c                   	dec    esp
 38d:	4c                   	dec    esp
 38e:	5f                   	pop    edi
 38f:	52                   	push   edx
 390:	45                   	inc    ebp
 391:	47                   	inc    edi
 392:	45                   	inc    ebp
 393:	58                   	pop    eax
 394:	49                   	dec    ecx
 395:	54                   	push   esp
 396:	48                   	dec    eax
 397:	41                   	inc    ecx
 398:	4e                   	dec    esi
 399:	44                   	inc    esp
 39a:	4c                   	dec    esp
 39b:	45                   	inc    ebp
 39c:	52                   	push   edx
 39d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3a0:	53                   	push   ebx
 3a1:	43                   	inc    ebx
 3a2:	41                   	inc    ecx
 3a3:	4c                   	dec    esp
 3a4:	4c                   	dec    esp
 3a5:	5f                   	pop    edi
 3a6:	47                   	inc    edi
 3a7:	45                   	inc    ebp
 3a8:	54                   	push   esp
 3a9:	54                   	push   esp
 3aa:	49                   	dec    ecx
 3ab:	43                   	inc    ebx
 3ac:	4b                   	dec    ebx
 3ad:	53                   	push   ebx
 3ae:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3b1:	53                   	push   ebx
 3b2:	43                   	inc    ebx
 3b3:	41                   	inc    ecx
 3b4:	4c                   	dec    esp
 3b5:	4c                   	dec    esp
 3b6:	5f                   	pop    edi
 3b7:	45                   	inc    ebp
 3b8:	4e                   	dec    esi
 3b9:	44                   	inc    esp
 3ba:	50                   	push   eax
 3bb:	52                   	push   edx
 3bc:	4f                   	dec    edi
 3bd:	43                   	inc    ebx
 3be:	45                   	inc    ebp
 3bf:	53                   	push   ebx
 3c0:	53                   	push   ebx
 3c1:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 3c4:	66                   	data16
 3c5:	66                   	data16
 3c6:	65                   	gs
 3c7:	72 00                	jb     3c9 <sysEnter_Vector-0x12fc37>
 3c9:	53                   	push   ebx
 3ca:	59                   	pop    ecx
 3cb:	53                   	push   ebx
 3cc:	43                   	inc    ebx
 3cd:	41                   	inc    ecx
 3ce:	4c                   	dec    esp
 3cf:	4c                   	dec    esp
 3d0:	5f                   	pop    edi
 3d1:	57                   	push   edi
 3d2:	52                   	push   edx
 3d3:	49                   	dec    ecx
 3d4:	54                   	push   esp
 3d5:	45                   	inc    ebp
 3d6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3d9:	53                   	push   ebx
 3da:	43                   	inc    ebx
 3db:	41                   	inc    ecx
 3dc:	4c                   	dec    esp
 3dd:	4c                   	dec    esp
 3de:	5f                   	pop    edi
 3df:	50                   	push   eax
 3e0:	52                   	push   edx
 3e1:	49                   	dec    ecx
 3e2:	4e                   	dec    esi
 3e3:	54                   	push   esp
 3e4:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 3e7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3e8:	64                   	fs
 3e9:	6c                   	ins    BYTE PTR es:[edi],dx
 3ea:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 3ee:	53                   	push   ebx
 3ef:	43                   	inc    ebx
 3f0:	41                   	inc    ecx
 3f1:	4c                   	dec    esp
 3f2:	4c                   	dec    esp
 3f3:	5f                   	pop    edi
 3f4:	41                   	inc    ecx
 3f5:	4c                   	dec    esp
 3f6:	4c                   	dec    esp
 3f7:	4f                   	dec    edi
 3f8:	43                   	inc    ebx
 3f9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3fc:	53                   	push   ebx
 3fd:	43                   	inc    ebx
 3fe:	41                   	inc    ecx
 3ff:	4c                   	dec    esp
 400:	4c                   	dec    esp
 401:	5f                   	pop    edi
 402:	47                   	inc    edi
 403:	45                   	inc    ebp
 404:	54                   	push   esp
 405:	43                   	inc    ebx
 406:	57                   	push   edi
 407:	44                   	inc    esp
 408:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 40b:	53                   	push   ebx
 40c:	43                   	inc    ebx
 40d:	41                   	inc    ecx
 40e:	4c                   	dec    esp
 40f:	4c                   	dec    esp
 410:	5f                   	pop    edi
 411:	57                   	push   edi
 412:	41                   	inc    ecx
 413:	49                   	dec    ecx
 414:	54                   	push   esp
 415:	46                   	inc    esi
 416:	4f                   	dec    edi
 417:	52                   	push   edx
 418:	50                   	push   eax
 419:	49                   	dec    ecx
 41a:	44                   	inc    esp
 41b:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
 41e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 420:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 423:	53                   	push   ebx
 424:	43                   	inc    ebx
 425:	41                   	inc    ecx
 426:	4c                   	dec    esp
 427:	4c                   	dec    esp
 428:	5f                   	pop    edi
 429:	53                   	push   ebx
 42a:	45                   	inc    ebp
 42b:	54                   	push   esp
 42c:	53                   	push   ebx
 42d:	49                   	dec    ecx
 42e:	47                   	inc    edi
 42f:	41                   	inc    ecx
 430:	43                   	inc    ebx
 431:	54                   	push   esp
 432:	49                   	dec    ecx
 433:	4f                   	dec    edi
 434:	4e                   	dec    esi
 435:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 438:	72 65                	jb     49f <sysEnter_Vector-0x12fb61>
 43a:	61                   	popa   
 43b:	6d                   	ins    DWORD PTR es:[edi],dx
 43c:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 43f:	74 73                	je     4b4 <sysEnter_Vector-0x12fb4c>
 441:	45                   	inc    ebp
 442:	72 72                	jb     4b6 <sysEnter_Vector-0x12fb4a>
 444:	6f                   	outs   dx,DWORD PTR ds:[esi]
 445:	72 00                	jb     447 <sysEnter_Vector-0x12fbb9>
 447:	6c                   	ins    BYTE PTR es:[edi],dx
 448:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 44b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 44e:	63 2f                	arpl   WORD PTR [edi],bp
 450:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 457:	6e                   	outs   dx,BYTE PTR ds:[esi]
 458:	70 75                	jo     4cf <sysEnter_Vector-0x12fb31>
 45a:	74 2e                	je     48a <sysEnter_Vector-0x12fb76>
 45c:	63 00                	arpl   WORD PTR [eax],ax
 45e:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 465:	6d                   	ins    DWORD PTR es:[edi],dx
 466:	61                   	popa   
 467:	78 6c                	js     4d5 <sysEnter_Vector-0x12fb2b>
 469:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 46b:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 46e:	74 73                	je     4e3 <sysEnter_Vector-0x12fb1d>
 470:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 473:	74 63                	je     4d8 <sysEnter_Vector-0x12fb28>
 475:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 478:	74 63                	je     4dd <sysEnter_Vector-0x12fb23>
 47a:	68 61 72 00 70       	push   0x70007261
 47f:	75 74                	jne    4f5 <sysEnter_Vector-0x12fb0b>
 481:	73 00                	jae    483 <sysEnter_Vector-0x12fb7d>
 483:	72 65                	jb     4ea <sysEnter_Vector-0x12fb16>
 485:	74 56                	je     4dd <sysEnter_Vector-0x12fb23>
 487:	61                   	popa   
 488:	6c                   	ins    BYTE PTR es:[edi],dx
 489:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 48c:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
 493:	74 53                	je     4e8 <sysEnter_Vector-0x12fb18>
 495:	70 61                	jo     4f8 <sysEnter_Vector-0x12fb08>
 497:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 49a:	74 72                	je     50e <sysEnter_Vector-0x12faf2>
 49c:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 49f:	7a 65                	jp     506 <sysEnter_Vector-0x12fafa>
 4a1:	5f                   	pop    edi
 4a2:	74 00                	je     4a4 <sysEnter_Vector-0x12fb5c>
 4a4:	75 69                	jne    50f <sysEnter_Vector-0x12faf1>
 4a6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4a7:	74 70                	je     519 <sysEnter_Vector-0x12fae7>
 4a9:	74 72                	je     51d <sysEnter_Vector-0x12fae3>
 4ab:	5f                   	pop    edi
 4ac:	74 00                	je     4ae <sysEnter_Vector-0x12fb52>
 4ae:	73 69                	jae    519 <sysEnter_Vector-0x12fae7>
 4b0:	67 44                	addr16 inc esp
 4b2:	61                   	popa   
 4b3:	74 61                	je     516 <sysEnter_Vector-0x12faea>
 4b5:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 4b8:	67 76 50             	addr16 jbe 50b <sysEnter_Vector-0x12faf5>
 4bb:	74 72                	je     52f <sysEnter_Vector-0x12fad1>
 4bd:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 4c0:	61                   	popa   
 4c1:	72 74                	jb     537 <sysEnter_Vector-0x12fac9>
 4c3:	5f                   	pop    edi
 4c4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4c5:	66 5f                	pop    di
 4c7:	77 6f                	ja     538 <sysEnter_Vector-0x12fac8>
 4c9:	72 64                	jb     52f <sysEnter_Vector-0x12fad1>
 4cb:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 4ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4cf:	67 72 61             	addr16 jb 533 <sysEnter_Vector-0x12facd>
 4d2:	6d                   	ins    DWORD PTR es:[edi],dx
 4d3:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 4d7:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 4da:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4db:	69 74 00 73 74 61 74 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x65746174
 4e2:	65 
 4e3:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 4e6:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 4e9:	6c                   	ins    BYTE PTR es:[edi],dx
 4ea:	74 69                	je     555 <sysEnter_Vector-0x12faab>
 4ec:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4ed:	5f                   	pop    edi
 4ee:	76 61                	jbe    551 <sysEnter_Vector-0x12faaf>
 4f0:	5f                   	pop    edi
 4f1:	6c                   	ins    BYTE PTR es:[edi],dx
 4f2:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
 4f9:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
 500:	00 
 501:	73 70                	jae    573 <sysEnter_Vector-0x12fa8d>
 503:	61                   	popa   
 504:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 507:	74 72                	je     57b <sysEnter_Vector-0x12fa85>
 509:	00 63 6d             	add    BYTE PTR [ebx+0x6d],ah
 50c:	64                   	fs
 50d:	6c                   	ins    BYTE PTR es:[edi],dx
 50e:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 515:	67 76 00             	addr16 jbe 518 <sysEnter_Vector-0x12fae8>
 518:	77 61                	ja     57b <sysEnter_Vector-0x12fa85>
 51a:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 521:	65 
 522:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 525:	4c                   	dec    esp
 526:	65                   	gs
 527:	76 65                	jbe    58e <sysEnter_Vector-0x12fa72>
 529:	6c                   	ins    BYTE PTR es:[edi],dx
 52a:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 52d:	6c                   	ins    BYTE PTR es:[edi],dx
 52e:	6c                   	ins    BYTE PTR es:[edi],dx
 52f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 530:	75 6d                	jne    59f <sysEnter_Vector-0x12fa61>
 532:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 535:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
 53c:	65                   	gs
 53d:	72 00                	jb     53f <sysEnter_Vector-0x12fac1>
 53f:	73 6c                	jae    5ad <sysEnter_Vector-0x12fa53>
 541:	65                   	gs
 542:	65                   	gs
 543:	70 00                	jo     545 <sysEnter_Vector-0x12fabb>
 545:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 548:	6c                   	ins    BYTE PTR es:[edi],dx
 549:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 550:	67 76 49             	addr16 jbe 59c <sysEnter_Vector-0x12fa64>
 553:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
 557:	73 79                	jae    5d2 <sysEnter_Vector-0x12fa2e>
 559:	73 63                	jae    5be <sysEnter_Vector-0x12fa42>
 55b:	61                   	popa   
 55c:	6c                   	ins    BYTE PTR es:[edi],dx
 55d:	6c                   	ins    BYTE PTR es:[edi],dx
 55e:	30 00                	xor    BYTE PTR [eax],al
 560:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 562:	5f                   	pop    edi
 563:	73 79                	jae    5de <sysEnter_Vector-0x12fa22>
 565:	73 63                	jae    5ca <sysEnter_Vector-0x12fa36>
 567:	61                   	popa   
 568:	6c                   	ins    BYTE PTR es:[edi],dx
 569:	6c                   	ins    BYTE PTR es:[edi],dx
 56a:	31 00                	xor    DWORD PTR [eax],eax
 56c:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 56e:	5f                   	pop    edi
 56f:	73 79                	jae    5ea <sysEnter_Vector-0x12fa16>
 571:	73 63                	jae    5d6 <sysEnter_Vector-0x12fa2a>
 573:	61                   	popa   
 574:	6c                   	ins    BYTE PTR es:[edi],dx
 575:	6c                   	ins    BYTE PTR es:[edi],dx
 576:	32 00                	xor    al,BYTE PTR [eax]
 578:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 57a:	5f                   	pop    edi
 57b:	73 79                	jae    5f6 <sysEnter_Vector-0x12fa0a>
 57d:	73 63                	jae    5e2 <sysEnter_Vector-0x12fa1e>
 57f:	61                   	popa   
 580:	6c                   	ins    BYTE PTR es:[edi],dx
 581:	6c                   	ins    BYTE PTR es:[edi],dx
 582:	33 00                	xor    eax,DWORD PTR [eax]
 584:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 586:	5f                   	pop    edi
 587:	73 79                	jae    602 <sysEnter_Vector-0x12f9fe>
 589:	73 63                	jae    5ee <sysEnter_Vector-0x12fa12>
 58b:	61                   	popa   
 58c:	6c                   	ins    BYTE PTR es:[edi],dx
 58d:	6c                   	ins    BYTE PTR es:[edi],dx
 58e:	34 00                	xor    al,0x0
 590:	49                   	dec    ecx
 591:	4e                   	dec    esi
 592:	5f                   	pop    edi
 593:	57                   	push   edi
 594:	4f                   	dec    edi
 595:	52                   	push   edx
 596:	44                   	inc    esp
 597:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 59a:	67 76 5f             	addr16 jbe 5fc <sysEnter_Vector-0x12fa04>
 59d:	73 69                	jae    608 <sysEnter_Vector-0x12f9f8>
 59f:	7a 65                	jp     606 <sysEnter_Vector-0x12f9fa>
 5a1:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 5a5:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
 5a8:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
 5af:	65 
 5b0:	64 00 69 73          	add    BYTE PTR fs:[ecx+0x73],ch
 5b4:	73 70                	jae    626 <sysEnter_Vector-0x12f9da>
 5b6:	61                   	popa   
 5b7:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 5ba:	5f                   	pop    edi
 5bb:	5f                   	pop    edi
 5bc:	67 6e                	outs   dx,BYTE PTR ds:[si]
 5be:	75 63                	jne    623 <sysEnter_Vector-0x12f9dd>
 5c0:	5f                   	pop    edi
 5c1:	76 61                	jbe    624 <sysEnter_Vector-0x12f9dc>
 5c3:	5f                   	pop    edi
 5c4:	6c                   	ins    BYTE PTR es:[edi],dx
 5c5:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 5cc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5cd:	74 64                	je     633 <sysEnter_Vector-0x12f9cd>
 5cf:	49                   	dec    ecx
 5d0:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 5d3:	72 61                	jb     636 <sysEnter_Vector-0x12f9ca>
 5d5:	6d                   	ins    DWORD PTR es:[edi],dx
 5d6:	31 00                	xor    DWORD PTR [eax],eax
 5d8:	70 61                	jo     63b <sysEnter_Vector-0x12f9c5>
 5da:	72 61                	jb     63d <sysEnter_Vector-0x12f9c3>
 5dc:	6d                   	ins    DWORD PTR es:[edi],dx
 5dd:	32 00                	xor    al,BYTE PTR [eax]
 5df:	70 61                	jo     642 <sysEnter_Vector-0x12f9be>
 5e1:	72 61                	jb     644 <sysEnter_Vector-0x12f9bc>
 5e3:	6d                   	ins    DWORD PTR es:[edi],dx
 5e4:	33 00                	xor    eax,DWORD PTR [eax]
 5e6:	70 61                	jo     649 <sysEnter_Vector-0x12f9b7>
 5e8:	72 61                	jb     64b <sysEnter_Vector-0x12f9b5>
 5ea:	6d                   	ins    DWORD PTR es:[edi],dx
 5eb:	34 00                	xor    al,0x0
 5ed:	65                   	gs
 5ee:	78 65                	js     655 <sysEnter_Vector-0x12f9ab>
 5f0:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
 5f3:	65                   	gs
 5f4:	78 65                	js     65b <sysEnter_Vector-0x12f9a5>
 5f6:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
 5f9:	66 6f                	outs   dx,WORD PTR ds:[esi]
 5fb:	72 6d                	jb     66a <sysEnter_Vector-0x12f996>
 5fd:	61                   	popa   
 5fe:	74 00                	je     600 <sysEnter_Vector-0x12fa00>
 600:	73 69                	jae    66b <sysEnter_Vector-0x12f995>
 602:	67 6e                	outs   dx,BYTE PTR ds:[si]
 604:	61                   	popa   
 605:	6c                   	ins    BYTE PTR es:[edi],dx
 606:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 609:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 60c:	5f                   	pop    edi
 60d:	5f                   	pop    edi
 60e:	73 65                	jae    675 <sysEnter_Vector-0x12f98b>
 610:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 613:	64                   	fs
 614:	73 00                	jae    616 <sysEnter_Vector-0x12f9ea>
 616:	44                   	inc    esp
 617:	55                   	push   ebp
 618:	4c                   	dec    esp
 619:	4c                   	dec    esp
 61a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 61d:	61                   	popa   
 61e:	74 65                	je     685 <sysEnter_Vector-0x12f97b>
 620:	73 00                	jae    622 <sysEnter_Vector-0x12f9de>
 622:	49                   	dec    ecx
 623:	4e                   	dec    esi
 624:	5f                   	pop    edi
 625:	53                   	push   ebx
 626:	54                   	push   esp
 627:	52                   	push   edx
 628:	49                   	dec    ecx
 629:	4e                   	dec    esi
 62a:	47                   	inc    edi
 62b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 62e:	63 2f                	arpl   WORD PTR [edi],bp
 630:	6c                   	ins    BYTE PTR es:[edi],dx
 631:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 638:	4f                   	dec    edi
 639:	53                   	push   ebx
 63a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 63d:	61                   	popa   
 63e:	72 67                	jb     6a7 <sysEnter_Vector-0x12f959>
 640:	63 00                	arpl   WORD PTR [eax],ax
 642:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 645:	6c                   	ins    BYTE PTR es:[edi],dx
 646:	69 6e 65 00 73 70 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c707300
 64d:	69 74 49 00 6c 69 62 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x6362696c
 654:	63 
 655:	5f                   	pop    edi
 656:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
 65a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 65b:	75 70                	jne    6cd <sysEnter_Vector-0x12f933>
 65d:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 660:	67 76 00             	addr16 jbe 663 <sysEnter_Vector-0x12f99d>
 663:	65                   	gs
 664:	78 69                	js     6cf <sysEnter_Vector-0x12f931>
 666:	74 00                	je     668 <sysEnter_Vector-0x12f998>
 668:	73 74                	jae    6de <sysEnter_Vector-0x12f922>
 66a:	61                   	popa   
 66b:	74 75                	je     6e2 <sysEnter_Vector-0x12f91e>
 66d:	73 00                	jae    66f <sysEnter_Vector-0x12f991>
 66f:	73 69                	jae    6da <sysEnter_Vector-0x12f926>
 671:	67 48                	addr16 dec eax
 673:	61                   	popa   
 674:	6e                   	outs   dx,BYTE PTR ds:[esi]
 675:	64                   	fs
 676:	6c                   	ins    BYTE PTR es:[edi],dx
 677:	65                   	gs
 678:	72 00                	jb     67a <sysEnter_Vector-0x12f986>
 67a:	6d                   	ins    DWORD PTR es:[edi],dx
 67b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 67c:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 683:	6e 
 684:	61                   	popa   
 685:	6c                   	ins    BYTE PTR es:[edi],dx
 686:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 689:	67 73 00             	addr16 jae 68c <sysEnter_Vector-0x12f974>
 68c:	70 72                	jo     700 <sysEnter_Vector-0x12f900>
 68e:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 695:	6f                   	outs   dx,DWORD PTR ds:[esi]
 696:	70 00                	jo     698 <sysEnter_Vector-0x12f968>
 698:	67                   	addr16
 699:	65                   	gs
 69a:	74 63                	je     6ff <sysEnter_Vector-0x12f901>
 69c:	77 64                	ja     702 <sysEnter_Vector-0x12f8fe>
 69e:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 6a1:	6c                   	ins    BYTE PTR es:[edi],dx
 6a2:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6a3:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 6a6:	65                   	gs
 6a7:	64                   	fs
 6a8:	50                   	push   eax
 6a9:	74 72                	je     71d <sysEnter_Vector-0x12f8e3>
 6ab:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 6ae:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6af:	69 6e 74 65 72 00 6e 	imul   ebp,DWORD PTR [esi+0x74],0x6e007265
 6b6:	65                   	gs
 6b7:	77 53                	ja     70c <sysEnter_Vector-0x12f8f4>
 6b9:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 6c0:	6c                   	ins    BYTE PTR es:[edi],dx
 6c1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6c2:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 6c5:	6c                   	ins    BYTE PTR es:[edi],dx
 6c6:	65                   	gs
 6c7:	61                   	popa   
 6c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6c9:	75 70                	jne    73b <sysEnter_Vector-0x12f8c5>
 6cb:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 6ce:	72 6b                	jb     73b <sysEnter_Vector-0x12f8c5>
 6d0:	65                   	gs
 6d1:	72 00                	jb     6d3 <sysEnter_Vector-0x12f92d>
 6d3:	6d                   	ins    DWORD PTR es:[edi],dx
 6d4:	61                   	popa   
 6d5:	6c                   	ins    BYTE PTR es:[edi],dx
 6d6:	6c                   	ins    BYTE PTR es:[edi],dx
 6d7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6d8:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 6db:	68 65 61 70 50       	push   0x50706165
 6e0:	74 72                	je     754 <sysEnter_Vector-0x12f8ac>
 6e2:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 6e5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6e6:	74 38                	je     720 <sysEnter_Vector-0x12f8e0>
 6e8:	5f                   	pop    edi
 6e9:	74 00                	je     6eb <sysEnter_Vector-0x12f915>
 6eb:	66                   	data16
 6ec:	72 65                	jb     753 <sysEnter_Vector-0x12f8ad>
 6ee:	65 00 6e 65          	add    BYTE PTR gs:[esi+0x65],ch
 6f2:	65 64 65 64 00 73 68 	gs fs gs add BYTE PTR fs:gs:[ebx+0x68],dh
 6f9:	65                   	gs
 6fa:	61                   	popa   
 6fb:	70 00                	jo     6fd <sysEnter_Vector-0x12f903>
 6fd:	69 6e 55 73 65 00 69 	imul   ebp,DWORD PTR [esi+0x55],0x69006573
 704:	6e                   	outs   dx,BYTE PTR ds:[esi]
 705:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
 70c:	63 
 70d:	00 67 6f             	add    BYTE PTR [edi+0x6f],ah
 710:	74 6f                	je     781 <sysEnter_Vector-0x12f87f>
 712:	48                   	dec    eax
 713:	65                   	gs
 714:	72 65                	jb     77b <sysEnter_Vector-0x12f885>
 716:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 719:	61                   	popa   
 71a:	70 50                	jo     76c <sysEnter_Vector-0x12f894>
 71c:	74 72                	je     790 <sysEnter_Vector-0x12f870>
 71e:	4e                   	dec    esi
 71f:	65                   	gs
 720:	78 74                	js     796 <sysEnter_Vector-0x12f86a>
 722:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 725:	77 48                	ja     76f <sysEnter_Vector-0x12f891>
 727:	65                   	gs
 728:	61                   	popa   
 729:	70 52                	jo     77d <sysEnter_Vector-0x12f883>
 72b:	65                   	gs
 72c:	71 75                	jno    7a3 <sysEnter_Vector-0x12f85d>
 72e:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 735:	75 6c                	jne    7a3 <sysEnter_Vector-0x12f85d>
 737:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 73e:	75 65                	jne    7a5 <sysEnter_Vector-0x12f85b>
 740:	73 74                	jae    7b6 <sysEnter_Vector-0x12f84a>
 742:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 745:	63 2f                	arpl   WORD PTR [edi],bp
 747:	6d                   	ins    DWORD PTR es:[edi],dx
 748:	61                   	popa   
 749:	6c                   	ins    BYTE PTR es:[edi],dx
 74a:	6c                   	ins    BYTE PTR es:[edi],dx
 74b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 74c:	63 2e                	arpl   WORD PTR [esi],bp
 74e:	63 00                	arpl   WORD PTR [eax],ax
 750:	66                   	data16
 751:	72 65                	jb     7b8 <sysEnter_Vector-0x12f848>
 753:	65                   	gs
 754:	49                   	dec    ecx
 755:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 758:	65                   	gs
 759:	76 00                	jbe    75b <sysEnter_Vector-0x12f8a5>
 75b:	68 65 61 70 72       	push   0x72706165
 760:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 764:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 767:	63 2f                	arpl   WORD PTR [edi],bp
 769:	6d                   	ins    DWORD PTR es:[edi],dx
 76a:	65                   	gs
 76b:	6d                   	ins    DWORD PTR es:[edi],dx
 76c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 76f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 772:	64                   	fs
 773:	65                   	gs
 774:	73 74                	jae    7ea <sysEnter_Vector-0x12f816>
 776:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 779:	6d                   	ins    DWORD PTR es:[edi],dx
 77a:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 77d:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 780:	61                   	popa   
 781:	6c                   	ins    BYTE PTR es:[edi],dx
 782:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 785:	6d                   	ins    DWORD PTR es:[edi],dx
 786:	73 65                	jae    7ed <sysEnter_Vector-0x12f813>
 788:	74 00                	je     78a <sysEnter_Vector-0x12f876>
 78a:	73 72                	jae    7fe <sysEnter_Vector-0x12f802>
 78c:	63 2f                	arpl   WORD PTR [edi],bp
 78e:	6d                   	ins    DWORD PTR es:[edi],dx
 78f:	65                   	gs
 790:	6d                   	ins    DWORD PTR es:[edi],dx
 791:	73 65                	jae    7f8 <sysEnter_Vector-0x12f808>
 793:	74 2e                	je     7c3 <sysEnter_Vector-0x12f83d>
 795:	63 00                	arpl   WORD PTR [eax],ax
 797:	66 56                	push   si
 799:	61                   	popa   
 79a:	6c                   	ins    BYTE PTR es:[edi],dx
 79b:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 79e:	6d                   	ins    DWORD PTR es:[edi],dx
 79f:	73 65                	jae    806 <sysEnter_Vector-0x12f7fa>
 7a1:	74 49                	je     7ec <sysEnter_Vector-0x12f814>
 7a3:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 7a6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7a7:	74 31                	je     7da <sysEnter_Vector-0x12f826>
 7a9:	36                   	ss
 7aa:	5f                   	pop    edi
 7ab:	74 00                	je     7ad <sysEnter_Vector-0x12f853>
 7ad:	73 72                	jae    821 <sysEnter_Vector-0x12f7df>
 7af:	63 2f                	arpl   WORD PTR [edi],bp
 7b1:	6d                   	ins    DWORD PTR es:[edi],dx
 7b2:	6d                   	ins    DWORD PTR es:[edi],dx
 7b3:	61                   	popa   
 7b4:	70 2e                	jo     7e4 <sysEnter_Vector-0x12f81c>
 7b6:	63 00                	arpl   WORD PTR [eax],ax
 7b8:	73 72                	jae    82c <sysEnter_Vector-0x12f7d4>
 7ba:	63 2f                	arpl   WORD PTR [edi],bp
 7bc:	70 69                	jo     827 <sysEnter_Vector-0x12f7d9>
 7be:	70 65                	jo     825 <sysEnter_Vector-0x12f7db>
 7c0:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 7c3:	70 69                	jo     82e <sysEnter_Vector-0x12f7d2>
 7c5:	70 65                	jo     82c <sysEnter_Vector-0x12f7d4>
 7c7:	00 70 69             	add    BYTE PTR [eax+0x69],dh
 7ca:	70 65                	jo     831 <sysEnter_Vector-0x12f7cf>
 7cc:	66                   	data16
 7cd:	64 00 66 69          	add    BYTE PTR fs:[esi+0x69],ah
 7d1:	65                   	gs
 7d2:	6c                   	ins    BYTE PTR es:[edi],dx
 7d3:	64                   	fs
 7d4:	5f                   	pop    edi
 7d5:	77 69                	ja     840 <sysEnter_Vector-0x12f7c0>
 7d7:	64                   	fs
 7d8:	74 68                	je     842 <sysEnter_Vector-0x12f7be>
 7da:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 7dd:	70 65                	jo     844 <sysEnter_Vector-0x12f7bc>
 7df:	61                   	popa   
 7e0:	74 00                	je     7e2 <sysEnter_Vector-0x12f81e>
 7e2:	6c                   	ins    BYTE PTR es:[edi],dx
 7e3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7e4:	63 61 73             	arpl   WORD PTR [ecx+0x73],sp
 7e7:	65 00 5f 5f          	add    BYTE PTR gs:[edi+0x5f],bl
 7eb:	72 65                	jb     852 <sysEnter_Vector-0x12f7ae>
 7ed:	73 00                	jae    7ef <sysEnter_Vector-0x12f811>
 7ef:	73 72                	jae    863 <sysEnter_Vector-0x12f79d>
 7f1:	63 2f                	arpl   WORD PTR [edi],bp
 7f3:	73 70                	jae    865 <sysEnter_Vector-0x12f79b>
 7f5:	72 69                	jb     860 <sysEnter_Vector-0x12f7a0>
 7f7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7f8:	74 66                	je     860 <sysEnter_Vector-0x12f7a0>
 7fa:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 7fd:	64 69 67 69 74 73 00 	imul   esp,DWORD PTR fs:[edi+0x69],0x76007374
 804:	76 
 805:	73 70                	jae    877 <sysEnter_Vector-0x12f789>
 807:	72 69                	jb     872 <sysEnter_Vector-0x12f78e>
 809:	6e                   	outs   dx,BYTE PTR ds:[esi]
 80a:	74 66                	je     872 <sysEnter_Vector-0x12f78e>
 80c:	00 71 75             	add    BYTE PTR [ecx+0x75],dh
 80f:	61                   	popa   
 810:	6c                   	ins    BYTE PTR es:[edi],dx
 811:	69 66 69 65 72 00 73 	imul   esp,DWORD PTR [esi+0x69],0x73007265
 818:	6b 69 70 5f          	imul   ebp,DWORD PTR [ecx+0x70],0x5f
 81c:	61                   	popa   
 81d:	74 6f                	je     88e <sysEnter_Vector-0x12f772>
 81f:	69 00 6e 75 6d 62    	imul   eax,DWORD PTR [eax],0x626d756e
 825:	65                   	gs
 826:	72 00                	jb     828 <sysEnter_Vector-0x12f7d8>
 828:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 82b:	65 00 70 72          	add    BYTE PTR gs:[eax+0x72],dh
 82f:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
 833:	69 6f 6e 00 73 5f 64 	imul   ebp,DWORD PTR [edi+0x6e],0x645f7300
 83a:	65                   	gs
 83b:	76 00                	jbe    83d <sysEnter_Vector-0x12f7c3>
 83d:	75 69                	jne    8a8 <sysEnter_Vector-0x12f758>
 83f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 840:	74 36                	je     878 <sysEnter_Vector-0x12f788>
 842:	34 5f                	xor    al,0x5f
 844:	74 00                	je     846 <sysEnter_Vector-0x12f7ba>
 846:	6d                   	ins    DWORD PTR es:[edi],dx
 847:	6e                   	outs   dx,BYTE PTR ds:[esi]
 848:	74 5f                	je     8a9 <sysEnter_Vector-0x12f757>
 84a:	66                   	data16
 84b:	6c                   	ins    BYTE PTR es:[edi],dx
 84c:	61                   	popa   
 84d:	67 73 00             	addr16 jae 850 <sysEnter_Vector-0x12f7b0>
 850:	6d                   	ins    DWORD PTR es:[edi],dx
 851:	6b 6e 6f 64          	imul   ebp,DWORD PTR [esi+0x6f],0x64
 855:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 858:	78 74                	js     8ce <sysEnter_Vector-0x12f732>
 85a:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 85d:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 864:	66 
 865:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 868:	74 5f                	je     8c9 <sysEnter_Vector-0x12f737>
 86a:	73 62                	jae    8ce <sysEnter_Vector-0x12f732>
 86c:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 86f:	6c                   	ins    BYTE PTR es:[edi],dx
 870:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 877:	65                   	gs
 878:	72 5f                	jb     8d9 <sysEnter_Vector-0x12f727>
 87a:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 87e:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 881:	5f                   	pop    edi
 882:	76 66                	jbe    8ea <sysEnter_Vector-0x12f716>
 884:	73 6d                	jae    8f3 <sysEnter_Vector-0x12f70d>
 886:	6f                   	outs   dx,DWORD PTR ds:[esi]
 887:	75 6e                	jne    8f7 <sysEnter_Vector-0x12f709>
 889:	74 00                	je     88b <sysEnter_Vector-0x12f775>
 88b:	72 65                	jb     8f2 <sysEnter_Vector-0x12f70e>
 88d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 88e:	61                   	popa   
 88f:	6d                   	ins    DWORD PTR es:[edi],dx
 890:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 895:	61                   	popa   
 896:	6d                   	ins    DWORD PTR es:[edi],dx
 897:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 89b:	63 2f                	arpl   WORD PTR [edi],bp
 89d:	73 74                	jae    913 <sysEnter_Vector-0x12f6ed>
 89f:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 8a6:	65 
 8a7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8a8:	74 72                	je     91c <sysEnter_Vector-0x12f6e4>
 8aa:	79 00                	jns    8ac <sysEnter_Vector-0x12f754>
 8ac:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 8b3:	65                   	gs
 8b4:	72 61                	jb     917 <sysEnter_Vector-0x12f6e9>
 8b6:	74 69                	je     921 <sysEnter_Vector-0x12f6df>
 8b8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8b9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8ba:	73 00                	jae    8bc <sysEnter_Vector-0x12f744>
 8bc:	72 6d                	jb     92b <sysEnter_Vector-0x12f6d5>
 8be:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 8c5:	69 
 8c6:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 8cb:	69 73 74 5f 74 00 69 	imul   esi,DWORD PTR [ebx+0x74],0x6900745f
 8d2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8d3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8d4:	64                   	fs
 8d5:	65                   	gs
 8d6:	5f                   	pop    edi
 8d7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8d8:	70 65                	jo     93f <sysEnter_Vector-0x12f6c1>
 8da:	72 61                	jb     93d <sysEnter_Vector-0x12f6c3>
 8dc:	74 69                	je     947 <sysEnter_Vector-0x12f6b9>
 8de:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8df:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8e0:	73 00                	jae    8e2 <sysEnter_Vector-0x12f71e>
 8e2:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 8e9:	67 73 00             	addr16 jae 8ec <sysEnter_Vector-0x12f714>
 8ec:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 8f3:	65                   	gs
 8f4:	72 61                	jb     957 <sysEnter_Vector-0x12f6a9>
 8f6:	74 69                	je     961 <sysEnter_Vector-0x12f69f>
 8f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8f9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8fa:	73 5f                	jae    95b <sysEnter_Vector-0x12f6a5>
 8fc:	74 00                	je     8fe <sysEnter_Vector-0x12f702>
 8fe:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 901:	66 50                	push   ax
 903:	74 72                	je     977 <sysEnter_Vector-0x12f689>
 905:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 908:	64                   	fs
 909:	65                   	gs
 90a:	76 00                	jbe    90c <sysEnter_Vector-0x12f6f4>
 90c:	70 61                	jo     96f <sysEnter_Vector-0x12f691>
 90e:	79 6c                	jns    97c <sysEnter_Vector-0x12f684>
 910:	6f                   	outs   dx,DWORD PTR ds:[esi]
 911:	61                   	popa   
 912:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 916:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 91d:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 920:	6f                   	outs   dx,DWORD PTR ds:[esi]
 921:	70 00                	jo     923 <sysEnter_Vector-0x12f6dd>
 923:	6d                   	ins    DWORD PTR es:[edi],dx
 924:	6e                   	outs   dx,BYTE PTR ds:[esi]
 925:	74 5f                	je     986 <sysEnter_Vector-0x12f67a>
 927:	72 6f                	jb     998 <sysEnter_Vector-0x12f668>
 929:	6f                   	outs   dx,DWORD PTR ds:[esi]
 92a:	74 00                	je     92c <sysEnter_Vector-0x12f6d4>
 92c:	66 6f                	outs   dx,WORD PTR ds:[esi]
 92e:	70 73                	jo     9a3 <sysEnter_Vector-0x12f65d>
 930:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 933:	6c                   	ins    BYTE PTR es:[edi],dx
 934:	65                   	gs
 935:	5f                   	pop    edi
 936:	74 00                	je     938 <sysEnter_Vector-0x12f6c8>
 938:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 93f:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 942:	75 69                	jne    9ad <sysEnter_Vector-0x12f653>
 944:	64 00 69 5f          	add    BYTE PTR fs:[ecx+0x5f],ch
 948:	6d                   	ins    DWORD PTR es:[edi],dx
 949:	6f                   	outs   dx,DWORD PTR ds:[esi]
 94a:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 94f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 950:	73 6f                	jae    9c1 <sysEnter_Vector-0x12f63f>
 952:	6c                   	ins    BYTE PTR es:[edi],dx
 953:	65                   	gs
 954:	5f                   	pop    edi
 955:	6e                   	outs   dx,BYTE PTR ds:[esi]
 956:	6f                   	outs   dx,DWORD PTR ds:[esi]
 957:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 95c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 95d:	64                   	fs
 95e:	65                   	gs
 95f:	5f                   	pop    edi
 960:	74 00                	je     962 <sysEnter_Vector-0x12f69e>
 962:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 965:	73 6f                	jae    9d6 <sysEnter_Vector-0x12f62a>
 967:	6c                   	ins    BYTE PTR es:[edi],dx
 968:	65                   	gs
 969:	5f                   	pop    edi
 96a:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 971:	72 6f                	jb     9e2 <sysEnter_Vector-0x12f61e>
 973:	6f                   	outs   dx,DWORD PTR ds:[esi]
 974:	74 00                	je     976 <sysEnter_Vector-0x12f68a>
 976:	64                   	fs
 977:	5f                   	pop    edi
 978:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 97f:	65                   	gs
 980:	73 65                	jae    9e7 <sysEnter_Vector-0x12f619>
 982:	74 52                	je     9d6 <sysEnter_Vector-0x12f62a>
 984:	6f                   	outs   dx,DWORD PTR ds:[esi]
 985:	77 00                	ja     987 <sysEnter_Vector-0x12f679>
 987:	64                   	fs
 988:	5f                   	pop    edi
 989:	70 61                	jo     9ec <sysEnter_Vector-0x12f614>
 98b:	72 65                	jb     9f2 <sysEnter_Vector-0x12f60e>
 98d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 98e:	74 00                	je     990 <sysEnter_Vector-0x12f670>
 990:	66 5f                	pop    di
 992:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 999:	5f                   	pop    edi
 99a:	70 61                	jo     9fd <sysEnter_Vector-0x12f603>
 99c:	74 68                	je     a06 <sysEnter_Vector-0x12f5fa>
 99e:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 9a1:	65                   	gs
 9a2:	61                   	popa   
 9a3:	74 65                	je     a0a <sysEnter_Vector-0x12f5f6>
 9a5:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 9a8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9a9:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 9ac:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9ae:	61                   	popa   
 9af:	74 65                	je     a16 <sysEnter_Vector-0x12f5ea>
 9b1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9b4:	72 63                	jb     a19 <sysEnter_Vector-0x12f5e7>
 9b6:	61                   	popa   
 9b7:	74 49                	je     a02 <sysEnter_Vector-0x12f5fe>
 9b9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9bc:	72 63                	jb     a21 <sysEnter_Vector-0x12f5df>
 9be:	61                   	popa   
 9bf:	74 00                	je     9c1 <sysEnter_Vector-0x12f63f>
 9c1:	73 72                	jae    a35 <sysEnter_Vector-0x12f5cb>
 9c3:	63 2f                	arpl   WORD PTR [edi],bp
 9c5:	73 74                	jae    a3b <sysEnter_Vector-0x12f5c5>
 9c7:	72 69                	jb     a32 <sysEnter_Vector-0x12f5ce>
 9c9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9ca:	67 73 2f             	addr16 jae 9fc <sysEnter_Vector-0x12f604>
 9cd:	73 74                	jae    a43 <sysEnter_Vector-0x12f5bd>
 9cf:	72 63                	jb     a34 <sysEnter_Vector-0x12f5cc>
 9d1:	61                   	popa   
 9d2:	74 2e                	je     a02 <sysEnter_Vector-0x12f5fe>
 9d4:	63 00                	arpl   WORD PTR [eax],ax
 9d6:	73 74                	jae    a4c <sysEnter_Vector-0x12f5b4>
 9d8:	72 63                	jb     a3d <sysEnter_Vector-0x12f5c3>
 9da:	6d                   	ins    DWORD PTR es:[edi],dx
 9db:	70 00                	jo     9dd <sysEnter_Vector-0x12f623>
 9dd:	73 72                	jae    a51 <sysEnter_Vector-0x12f5af>
 9df:	63 2f                	arpl   WORD PTR [edi],bp
 9e1:	73 74                	jae    a57 <sysEnter_Vector-0x12f5a9>
 9e3:	72 69                	jb     a4e <sysEnter_Vector-0x12f5b2>
 9e5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9e6:	67 73 2f             	addr16 jae a18 <sysEnter_Vector-0x12f5e8>
 9e9:	73 74                	jae    a5f <sysEnter_Vector-0x12f5a1>
 9eb:	72 63                	jb     a50 <sysEnter_Vector-0x12f5b0>
 9ed:	6d                   	ins    DWORD PTR es:[edi],dx
 9ee:	70 2e                	jo     a1e <sysEnter_Vector-0x12f5e2>
 9f0:	63 00                	arpl   WORD PTR [eax],ax
 9f2:	73 74                	jae    a68 <sysEnter_Vector-0x12f598>
 9f4:	72 63                	jb     a59 <sysEnter_Vector-0x12f5a7>
 9f6:	70 79                	jo     a71 <sysEnter_Vector-0x12f58f>
 9f8:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 9fb:	75 6e                	jne    a6b <sysEnter_Vector-0x12f595>
 9fd:	74 00                	je     9ff <sysEnter_Vector-0x12f601>
 9ff:	73 74                	jae    a75 <sysEnter_Vector-0x12f58b>
 a01:	72 63                	jb     a66 <sysEnter_Vector-0x12f59a>
 a03:	70 79                	jo     a7e <sysEnter_Vector-0x12f582>
 a05:	63 00                	arpl   WORD PTR [eax],ax
 a07:	73 74                	jae    a7d <sysEnter_Vector-0x12f583>
 a09:	72 63                	jb     a6e <sysEnter_Vector-0x12f592>
 a0b:	70 79                	jo     a86 <sysEnter_Vector-0x12f57a>
 a0d:	49                   	dec    ecx
 a0e:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a11:	63 2f                	arpl   WORD PTR [edi],bp
 a13:	73 74                	jae    a89 <sysEnter_Vector-0x12f577>
 a15:	72 69                	jb     a80 <sysEnter_Vector-0x12f580>
 a17:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a18:	67 73 2f             	addr16 jae a4a <sysEnter_Vector-0x12f5b6>
 a1b:	73 74                	jae    a91 <sysEnter_Vector-0x12f56f>
 a1d:	72 63                	jb     a82 <sysEnter_Vector-0x12f57e>
 a1f:	70 79                	jo     a9a <sysEnter_Vector-0x12f566>
 a21:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a24:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 a27:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 a2a:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 a31:	74 
 a32:	72 69                	jb     a9d <sysEnter_Vector-0x12f563>
 a34:	73 6e                	jae    aa4 <sysEnter_Vector-0x12f55c>
 a36:	75 6d                	jne    aa5 <sysEnter_Vector-0x12f55b>
 a38:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a3b:	63 2f                	arpl   WORD PTR [edi],bp
 a3d:	73 74                	jae    ab3 <sysEnter_Vector-0x12f54d>
 a3f:	72 69                	jb     aaa <sysEnter_Vector-0x12f556>
 a41:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a42:	67 73 2f             	addr16 jae a74 <sysEnter_Vector-0x12f58c>
 a45:	73 74                	jae    abb <sysEnter_Vector-0x12f545>
 a47:	72 69                	jb     ab2 <sysEnter_Vector-0x12f54e>
 a49:	73 6e                	jae    ab9 <sysEnter_Vector-0x12f547>
 a4b:	75 6d                	jne    aba <sysEnter_Vector-0x12f546>
 a4d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a50:	73 74                	jae    ac6 <sysEnter_Vector-0x12f53a>
 a52:	72 6c                	jb     ac0 <sysEnter_Vector-0x12f540>
 a54:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a56:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a59:	63 2f                	arpl   WORD PTR [edi],bp
 a5b:	73 74                	jae    ad1 <sysEnter_Vector-0x12f52f>
 a5d:	72 69                	jb     ac8 <sysEnter_Vector-0x12f538>
 a5f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a60:	67 73 2f             	addr16 jae a92 <sysEnter_Vector-0x12f56e>
 a63:	73 74                	jae    ad9 <sysEnter_Vector-0x12f527>
 a65:	72 6c                	jb     ad3 <sysEnter_Vector-0x12f52d>
 a67:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a69:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a6c:	73 74                	jae    ae2 <sysEnter_Vector-0x12f51e>
 a6e:	72 6c                	jb     adc <sysEnter_Vector-0x12f524>
 a70:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a72:	49                   	dec    ecx
 a73:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a76:	72 6e                	jb     ae6 <sysEnter_Vector-0x12f51a>
 a78:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a7b:	49                   	dec    ecx
 a7c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a7f:	72 6e                	jb     aef <sysEnter_Vector-0x12f511>
 a81:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a84:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a87:	63 2f                	arpl   WORD PTR [edi],bp
 a89:	73 74                	jae    aff <sysEnter_Vector-0x12f501>
 a8b:	72 69                	jb     af6 <sysEnter_Vector-0x12f50a>
 a8d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a8e:	67 73 2f             	addr16 jae ac0 <sysEnter_Vector-0x12f540>
 a91:	73 74                	jae    b07 <sysEnter_Vector-0x12f4f9>
 a93:	72 6e                	jb     b03 <sysEnter_Vector-0x12f4fd>
 a95:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a98:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a9b:	73 72                	jae    b0f <sysEnter_Vector-0x12f4f1>
 a9d:	63 2f                	arpl   WORD PTR [edi],bp
 a9f:	73 74                	jae    b15 <sysEnter_Vector-0x12f4eb>
 aa1:	72 69                	jb     b0c <sysEnter_Vector-0x12f4f4>
 aa3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 aa4:	67 73 2f             	addr16 jae ad6 <sysEnter_Vector-0x12f52a>
 aa7:	73 74                	jae    b1d <sysEnter_Vector-0x12f4e3>
 aa9:	72 6e                	jb     b19 <sysEnter_Vector-0x12f4e7>
 aab:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 aae:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ab1:	73 74                	jae    b27 <sysEnter_Vector-0x12f4d9>
 ab3:	72 6e                	jb     b23 <sysEnter_Vector-0x12f4dd>
 ab5:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 ab8:	49                   	dec    ecx
 ab9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 abc:	72 6e                	jb     b2c <sysEnter_Vector-0x12f4d4>
 abe:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 ac1:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 ac4:	63 2f                	arpl   WORD PTR [edi],bp
 ac6:	73 74                	jae    b3c <sysEnter_Vector-0x12f4c4>
 ac8:	72 69                	jb     b33 <sysEnter_Vector-0x12f4cd>
 aca:	6e                   	outs   dx,BYTE PTR ds:[esi]
 acb:	67 73 2f             	addr16 jae afd <sysEnter_Vector-0x12f503>
 ace:	73 74                	jae    b44 <sysEnter_Vector-0x12f4bc>
 ad0:	72 6f                	jb     b41 <sysEnter_Vector-0x12f4bf>
 ad2:	75 6c                	jne    b40 <sysEnter_Vector-0x12f4c0>
 ad4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ad7:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 ada:	6f                   	outs   dx,DWORD PTR ds:[esi]
 adb:	66                   	data16
 adc:	66                   	data16
 add:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 ae0:	74 6c                	je     b4e <sysEnter_Vector-0x12f4b2>
 ae2:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 ae9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 aea:	75 6c                	jne    b58 <sysEnter_Vector-0x12f4a8>
 aec:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 aef:	64                   	fs
 af0:	70 74                	jo     b66 <sysEnter_Vector-0x12f49a>
 af2:	72 00                	jb     af4 <sysEnter_Vector-0x12f50c>
 af4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 af5:	70 74                	jo     b6b <sysEnter_Vector-0x12f495>
 af7:	72 00                	jb     af9 <sysEnter_Vector-0x12f507>
 af9:	73 72                	jae    b6d <sysEnter_Vector-0x12f493>
 afb:	63 2f                	arpl   WORD PTR [edi],bp
 afd:	73 74                	jae    b73 <sysEnter_Vector-0x12f48d>
 aff:	72 69                	jb     b6a <sysEnter_Vector-0x12f496>
 b01:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b02:	67 73 2f             	addr16 jae b34 <sysEnter_Vector-0x12f4cc>
 b05:	73 74                	jae    b7b <sysEnter_Vector-0x12f485>
 b07:	72 70                	jb     b79 <sysEnter_Vector-0x12f487>
 b09:	61                   	popa   
 b0a:	72 74                	jb     b80 <sysEnter_Vector-0x12f480>
 b0c:	73 2e                	jae    b3c <sysEnter_Vector-0x12f4c4>
 b0e:	63 00                	arpl   WORD PTR [eax],ax
 b10:	73 74                	jae    b86 <sysEnter_Vector-0x12f47a>
 b12:	72 6c                	jb     b80 <sysEnter_Vector-0x12f480>
 b14:	65                   	gs
 b15:	66                   	data16
 b16:	74 00                	je     b18 <sysEnter_Vector-0x12f4e8>
 b18:	73 72                	jae    b8c <sysEnter_Vector-0x12f474>
 b1a:	63 2f                	arpl   WORD PTR [edi],bp
 b1c:	73 74                	jae    b92 <sysEnter_Vector-0x12f46e>
 b1e:	72 69                	jb     b89 <sysEnter_Vector-0x12f477>
 b20:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b21:	67 73 2f             	addr16 jae b53 <sysEnter_Vector-0x12f4ad>
 b24:	73 74                	jae    b9a <sysEnter_Vector-0x12f466>
 b26:	72 74                	jb     b9c <sysEnter_Vector-0x12f464>
 b28:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b29:	6c                   	ins    BYTE PTR es:[edi],dx
 b2a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b2d:	73 74                	jae    ba3 <sysEnter_Vector-0x12f45d>
 b2f:	72 74                	jb     ba5 <sysEnter_Vector-0x12f45b>
 b31:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b32:	6c                   	ins    BYTE PTR es:[edi],dx
 b33:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 b36:	70 75                	jo     bad <sysEnter_Vector-0x12f453>
 b38:	74 00                	je     b3a <sysEnter_Vector-0x12f4c6>
 b3a:	73 72                	jae    bae <sysEnter_Vector-0x12f452>
 b3c:	63 2f                	arpl   WORD PTR [edi],bp
 b3e:	73 74                	jae    bb4 <sysEnter_Vector-0x12f44c>
 b40:	72 69                	jb     bab <sysEnter_Vector-0x12f455>
 b42:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b43:	67 73 2f             	addr16 jae b75 <sysEnter_Vector-0x12f48b>
 b46:	73 74                	jae    bbc <sysEnter_Vector-0x12f444>
 b48:	72 74                	jb     bbe <sysEnter_Vector-0x12f442>
 b4a:	72 69                	jb     bb5 <sysEnter_Vector-0x12f44b>
 b4c:	6d                   	ins    DWORD PTR es:[edi],dx
 b4d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b50:	73 74                	jae    bc6 <sysEnter_Vector-0x12f43a>
 b52:	72 74                	jb     bc8 <sysEnter_Vector-0x12f438>
 b54:	72 69                	jb     bbf <sysEnter_Vector-0x12f441>
 b56:	6d                   	ins    DWORD PTR es:[edi],dx
 b57:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b5a:	72 74                	jb     bd0 <sysEnter_Vector-0x12f430>
 b5c:	72 69                	jb     bc7 <sysEnter_Vector-0x12f439>
 b5e:	6d                   	ins    DWORD PTR es:[edi],dx
 b5f:	49                   	dec    ecx
 b60:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b63:	72 73                	jb     bd8 <sysEnter_Vector-0x12f428>
 b65:	74 72                	je     bd9 <sysEnter_Vector-0x12f427>
 b67:	49                   	dec    ecx
 b68:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b6b:	63 2f                	arpl   WORD PTR [edi],bp
 b6d:	73 74                	jae    be3 <sysEnter_Vector-0x12f41d>
 b6f:	72 73                	jb     be4 <sysEnter_Vector-0x12f41c>
 b71:	74 72                	je     be5 <sysEnter_Vector-0x12f41b>
 b73:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b76:	73 74                	jae    bec <sysEnter_Vector-0x12f414>
 b78:	72 73                	jb     bed <sysEnter_Vector-0x12f413>
 b7a:	74 72                	je     bee <sysEnter_Vector-0x12f412>
 b7c:	00 72 63             	add    BYTE PTR [edx+0x63],dh
 b7f:	73 69                	jae    bea <sysEnter_Vector-0x12f416>
 b81:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 b85:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 b88:	72 69                	jb     bf3 <sysEnter_Vector-0x12f40d>
 b8a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b8b:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
 b8f:	63 2f                	arpl   WORD PTR [edi],bp
 b91:	74 69                	je     bfc <sysEnter_Vector-0x12f404>
 b93:	6d                   	ins    DWORD PTR es:[edi],dx
 b94:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 b98:	6c                   	ins    BYTE PTR es:[edi],dx
 b99:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b9a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b9d:	74 69                	je     c08 <sysEnter_Vector-0x12f3f8>
 b9f:	6d                   	ins    DWORD PTR es:[edi],dx
 ba0:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 ba5:	68 6f 75 72 00       	push   0x72756f
 baa:	67                   	addr16
 bab:	65                   	gs
 bac:	74 74                	je     c22 <sysEnter_Vector-0x12f3de>
 bae:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 bb5:	61                   	popa   
 bb6:	79 6c                	jns    c24 <sysEnter_Vector-0x12f3dc>
 bb8:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 bbf:	7a 6e                	jp     c2f <sysEnter_Vector-0x12f3d1>
 bc1:	61                   	popa   
 bc2:	6d                   	ins    DWORD PTR es:[edi],dx
 bc3:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 bc7:	74 69                	je     c32 <sysEnter_Vector-0x12f3ce>
 bc9:	6d                   	ins    DWORD PTR es:[edi],dx
 bca:	65                   	gs
 bcb:	5f                   	pop    edi
 bcc:	72 00                	jb     bce <sysEnter_Vector-0x12f432>
 bce:	74 69                	je     c39 <sysEnter_Vector-0x12f3c7>
 bd0:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 bd3:	54                   	push   esp
 bd4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bd5:	57                   	push   edi
 bd6:	61                   	popa   
 bd7:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 bde:	6f 
 bdf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 be0:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 be4:	79 65                	jns    c4b <sysEnter_Vector-0x12f3b5>
 be6:	61                   	popa   
 be7:	72 00                	jb     be9 <sysEnter_Vector-0x12f417>
 be9:	6d                   	ins    DWORD PTR es:[edi],dx
 bea:	6f                   	outs   dx,DWORD PTR ds:[esi]
 beb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 bec:	74 68                	je     c56 <sysEnter_Vector-0x12f3aa>
 bee:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 bf1:	74 74                	je     c67 <sysEnter_Vector-0x12f399>
 bf3:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 bfa:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 c01:	61                   	popa   
 c02:	79 6e                	jns    c72 <sysEnter_Vector-0x12f38e>
 c04:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c05:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 c08:	74 69                	je     c73 <sysEnter_Vector-0x12f38d>
 c0a:	6d                   	ins    DWORD PTR es:[edi],dx
 c0b:	65                   	gs
 c0c:	5f                   	pop    edi
 c0d:	72 49                	jb     c58 <sysEnter_Vector-0x12f3a8>
 c0f:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c13:	6d                   	ins    DWORD PTR es:[edi],dx
 c14:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 c1b:	64                   	fs
 c1c:	61                   	popa   
 c1d:	79 00                	jns    c1f <sysEnter_Vector-0x12f3e1>
 c1f:	6c                   	ins    BYTE PTR es:[edi],dx
 c20:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c21:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c24:	54                   	push   esp
 c25:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 c2c:	75 66                	jne    c94 <sysEnter_Vector-0x12f36c>
 c2e:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 c32:	65                   	gs
 c33:	5f                   	pop    edi
 c34:	74 00                	je     c36 <sysEnter_Vector-0x12f3ca>
 c36:	6c                   	ins    BYTE PTR es:[edi],dx
 c37:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c38:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c3b:	74 69                	je     ca6 <sysEnter_Vector-0x12f35a>
 c3d:	6d                   	ins    DWORD PTR es:[edi],dx
 c3e:	65                   	gs
 c3f:	5f                   	pop    edi
 c40:	72 00                	jb     c42 <sysEnter_Vector-0x12f3be>
 c42:	64                   	fs
 c43:	61                   	popa   
 c44:	79 63                	jns    ca9 <sysEnter_Vector-0x12f357>
 c46:	6c                   	ins    BYTE PTR es:[edi],dx
 c47:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c48:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 c4b:	6d                   	ins    DWORD PTR es:[edi],dx
 c4c:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 c51:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c55:	67 6d                	ins    DWORD PTR es:[di],dx
 c57:	74 6f                	je     cc8 <sysEnter_Vector-0x12f338>
 c59:	66                   	data16
 c5a:	66                   	data16
 c5b:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c5f:	77 64                	ja     cc5 <sysEnter_Vector-0x12f33b>
 c61:	61                   	popa   
 c62:	79 00                	jns    c64 <sysEnter_Vector-0x12f39c>
 c64:	5f                   	pop    edi
 c65:	79 74                	jns    cdb <sysEnter_Vector-0x12f325>
 c67:	61                   	popa   
 c68:	62 00                	bound  eax,QWORD PTR [eax]
 c6a:	74 6d                	je     cd9 <sysEnter_Vector-0x12f327>
 c6c:	5f                   	pop    edi
 c6d:	6d                   	ins    DWORD PTR es:[edi],dx
 c6e:	64                   	fs
 c6f:	61                   	popa   
 c70:	79 00                	jns    c72 <sysEnter_Vector-0x12f38e>
 c72:	74 6d                	je     ce1 <sysEnter_Vector-0x12f31f>
 c74:	5f                   	pop    edi
 c75:	73 65                	jae    cdc <sysEnter_Vector-0x12f324>
 c77:	63 00                	arpl   WORD PTR [eax],ax
 c79:	74 6d                	je     ce8 <sysEnter_Vector-0x12f318>
 c7b:	5f                   	pop    edi
 c7c:	7a 6f                	jp     ced <sysEnter_Vector-0x12f313>
 c7e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c7f:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 c84:	65                   	gs
 c85:	72 00                	jb     c87 <sysEnter_Vector-0x12f379>
 c87:	6c                   	ins    BYTE PTR es:[edi],dx
 c88:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c89:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c8c:	74 69                	je     cf7 <sysEnter_Vector-0x12f309>
 c8e:	6d                   	ins    DWORD PTR es:[edi],dx
 c8f:	65                   	gs
 c90:	5f                   	pop    edi
 c91:	72 49                	jb     cdc <sysEnter_Vector-0x12f324>
 c93:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 c96:	73 74                	jae    d0c <sysEnter_Vector-0x12f2f4>
 c98:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 c9b:	73 00                	jae    c9d <sysEnter_Vector-0x12f363>
 c9d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c9e:	76 65                	jbe    d05 <sysEnter_Vector-0x12f2fb>
 ca0:	72 66                	jb     d08 <sysEnter_Vector-0x12f2f8>
 ca2:	6c                   	ins    BYTE PTR es:[edi],dx
 ca3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ca4:	77 00                	ja     ca6 <sysEnter_Vector-0x12f35a>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...
