
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"
#include "common.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	f3 0f 1e fb          	endbr32 
9f000004:	55                   	push   ebp
9f000005:	89 e5                	mov    ebp,esp
9f000007:	e8 02 52 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00000c:	05 f0 7e 00 00       	add    eax,0x7ef0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
    while (*s != (char)c)
9f000011:	eb 17                	jmp    9f00002a <strchr+0x2a>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
        if (!*s++)
9f000013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000016:	8d 50 01             	lea    edx,[eax+0x1]
9f000019:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00001c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001f:	84 c0                	test   al,al
9f000021:	75 07                	jne    9f00002a <strchr+0x2a>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
            return 0;
9f000023:	b8 00 00 00 00       	mov    eax,0x0
9f000028:	eb 10                	jmp    9f00003a <strchr+0x3a>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
    while (*s != (char)c)
9f00002a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00002d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000030:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000033:	38 d0                	cmp    al,dl
9f000035:	75 dc                	jne    9f000013 <strchr+0x13>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
    return (char *)s;
9f000037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:15
}
9f00003a:	5d                   	pop    ebp
9f00003b:	c3                   	ret    

9f00003c <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18

char *strchrI(const char *s, int c)
{
9f00003c:	f3 0f 1e fb          	endbr32 
9f000040:	55                   	push   ebp
9f000041:	89 e5                	mov    ebp,esp
9f000043:	e8 c6 51 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000048:	05 b4 7e 00 00       	add    eax,0x7eb4
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
    while (*s != (char)c)
9f00004d:	eb 17                	jmp    9f000066 <strchrI+0x2a>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
        if (!*s++)
9f00004f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000052:	8d 50 01             	lea    edx,[eax+0x1]
9f000055:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000058:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00005b:	84 c0                	test   al,al
9f00005d:	75 07                	jne    9f000066 <strchrI+0x2a>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
            return 0;
9f00005f:	b8 00 00 00 00       	mov    eax,0x0
9f000064:	eb 10                	jmp    9f000076 <strchrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
    while (*s != (char)c)
9f000066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000069:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00006c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00006f:	38 d0                	cmp    al,dl
9f000071:	75 dc                	jne    9f00004f <strchrI+0x13>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
    return (char *)s;
9f000073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:23
}
9f000076:	5d                   	pop    ebp
9f000077:	c3                   	ret    

9f000078 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:39

#include "strings.h"
#include "common.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000078:	f3 0f 1e fb          	endbr32 
9f00007c:	55                   	push   ebp
9f00007d:	89 e5                	mov    ebp,esp
9f00007f:	56                   	push   esi
9f000080:	53                   	push   ebx
9f000081:	e8 88 51 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000086:	05 76 7e 00 00       	add    eax,0x7e76
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00008b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f00008e:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000091:	89 c1                	mov    ecx,eax
9f000093:	eb 27                	jmp    9f0000bc <strcspn+0x44>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	for (p = chars; *p != 0; p++) {
9f000095:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f000098:	eb 13                	jmp    9f0000ad <strcspn+0x35>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
	    if (c == *p) {
9f00009a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f00009d:	89 ca                	mov    edx,ecx
9f00009f:	38 c2                	cmp    dl,al
9f0000a1:	75 07                	jne    9f0000aa <strcspn+0x32>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:45
		return s-string;
9f0000a3:	89 d8                	mov    eax,ebx
9f0000a5:	2b 45 08             	sub    eax,DWORD PTR [ebp+0x8]
9f0000a8:	eb 1d                	jmp    9f0000c7 <strcspn+0x4f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43 (discriminator 2)
	for (p = chars; *p != 0; p++) {
9f0000aa:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43 (discriminator 1)
9f0000ad:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000b0:	84 c0                	test   al,al
9f0000b2:	75 e6                	jne    9f00009a <strcspn+0x22>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000b4:	83 c3 01             	add    ebx,0x1
9f0000b7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000ba:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000bc:	89 c8                	mov    eax,ecx
9f0000be:	84 c0                	test   al,al
9f0000c0:	75 d3                	jne    9f000095 <strcspn+0x1d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
	    }
	}
    }
    return s-string;
9f0000c2:	89 d8                	mov    eax,ebx
9f0000c4:	2b 45 08             	sub    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:50
}
9f0000c7:	5b                   	pop    ebx
9f0000c8:	5e                   	pop    esi
9f0000c9:	5d                   	pop    ebp
9f0000ca:	c3                   	ret    

9f0000cb <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:53

int strcspnI(char* string, char* chars)
{
9f0000cb:	f3 0f 1e fb          	endbr32 
9f0000cf:	55                   	push   ebp
9f0000d0:	89 e5                	mov    ebp,esp
9f0000d2:	56                   	push   esi
9f0000d3:	53                   	push   ebx
9f0000d4:	e8 35 51 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0000d9:	05 23 7e 00 00       	add    eax,0x7e23
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000e1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000e4:	89 c1                	mov    ecx,eax
9f0000e6:	eb 27                	jmp    9f00010f <strcspnI+0x44>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	for (p = chars; *p != 0; p++) {
9f0000e8:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000eb:	eb 13                	jmp    9f000100 <strcspnI+0x35>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
	    if (c == *p) {
9f0000ed:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000f0:	89 ca                	mov    edx,ecx
9f0000f2:	38 c2                	cmp    dl,al
9f0000f4:	75 07                	jne    9f0000fd <strcspnI+0x32>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:59
		return s-string;
9f0000f6:	89 d8                	mov    eax,ebx
9f0000f8:	2b 45 08             	sub    eax,DWORD PTR [ebp+0x8]
9f0000fb:	eb 1d                	jmp    9f00011a <strcspnI+0x4f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57 (discriminator 2)
	for (p = chars; *p != 0; p++) {
9f0000fd:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57 (discriminator 1)
9f000100:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000103:	84 c0                	test   al,al
9f000105:	75 e6                	jne    9f0000ed <strcspnI+0x22>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
    for (s = string, c = *s; c != 0; s++, c = *s) {
9f000107:	83 c3 01             	add    ebx,0x1
9f00010a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00010d:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f00010f:	89 c8                	mov    eax,ecx
9f000111:	84 c0                	test   al,al
9f000113:	75 d3                	jne    9f0000e8 <strcspnI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
	    }
	}
    }
    return s-string;
9f000115:	89 d8                	mov    eax,ebx
9f000117:	2b 45 08             	sub    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:64
}
9f00011a:	5b                   	pop    ebx
9f00011b:	5e                   	pop    esi
9f00011c:	5d                   	pop    ebp
9f00011d:	c3                   	ret    

9f00011e <strtokI>:
strtokI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:43

int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

char * strtokI(char* s, /*const*/ char* delim)
{
9f00011e:	f3 0f 1e fb          	endbr32 
9f000122:	55                   	push   ebp
9f000123:	89 e5                	mov    ebp,esp
9f000125:	56                   	push   esi
9f000126:	53                   	push   ebx
9f000127:	e8 e6 50 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f00012c:	81 c3 d0 7d 00 00    	add    ebx,0x7dd0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:47
    static char *lasts;
    register int ch;

    if (s == 0)
9f000132:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000136:	75 09                	jne    9f000141 <strtokI+0x23>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
	s = lasts;
9f000138:	8b 83 28 00 00 00    	mov    eax,DWORD PTR [ebx+0x28]
9f00013e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    do {
	if ((ch = *s++) == '\0')
9f000141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000144:	8d 50 01             	lea    edx,[eax+0x1]
9f000147:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00014a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00014d:	0f be f0             	movsx  esi,al
9f000150:	85 f6                	test   esi,esi
9f000152:	75 07                	jne    9f00015b <strtokI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
	    return 0;
9f000154:	b8 00 00 00 00       	mov    eax,0x0
9f000159:	eb 57                	jmp    9f0001b2 <strtokI+0x94>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    } while (strchrI(delim, ch));
9f00015b:	83 ec 08             	sub    esp,0x8
9f00015e:	56                   	push   esi
9f00015f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000162:	e8 d5 fe ff ff       	call   9f00003c <strchrI>
9f000167:	83 c4 10             	add    esp,0x10
9f00016a:	85 c0                	test   eax,eax
9f00016c:	75 d3                	jne    9f000141 <strtokI+0x23>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    --s;
9f00016e:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
    lasts = s + strcspnI(s, delim);
9f000172:	83 ec 08             	sub    esp,0x8
9f000175:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000178:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00017b:	e8 4b ff ff ff       	call   9f0000cb <strcspnI>
9f000180:	83 c4 10             	add    esp,0x10
9f000183:	89 c2                	mov    edx,eax
9f000185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000188:	01 d0                	add    eax,edx
9f00018a:	89 83 28 00 00 00    	mov    DWORD PTR [ebx+0x28],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    if (*lasts != 0)
9f000190:	8b 83 28 00 00 00    	mov    eax,DWORD PTR [ebx+0x28]
9f000196:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000199:	84 c0                	test   al,al
9f00019b:	74 12                	je     9f0001af <strtokI+0x91>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
	*lasts++ = 0;
9f00019d:	8b 83 28 00 00 00    	mov    eax,DWORD PTR [ebx+0x28]
9f0001a3:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a6:	89 93 28 00 00 00    	mov    DWORD PTR [ebx+0x28],edx
9f0001ac:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:57
    return s;
9f0001af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:58
}
9f0001b2:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001b5:	5b                   	pop    ebx
9f0001b6:	5e                   	pop    esi
9f0001b7:	5d                   	pop    ebp
9f0001b8:	c3                   	ret    

9f0001b9 <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:61

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f0001b9:	f3 0f 1e fb          	endbr32 
9f0001bd:	55                   	push   ebp
9f0001be:	89 e5                	mov    ebp,esp
9f0001c0:	56                   	push   esi
9f0001c1:	53                   	push   ebx
9f0001c2:	e8 4b 50 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0001c7:	81 c3 35 7d 00 00    	add    ebx,0x7d35
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:65
    static char *lasts;
    register int ch;

    if (s == 0)
9f0001cd:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0001d1:	75 09                	jne    9f0001dc <strtok+0x23>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:66
	s = lasts;
9f0001d3:	8b 83 2c 00 00 00    	mov    eax,DWORD PTR [ebx+0x2c]
9f0001d9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:68
    do {
	if ((ch = *s++) == '\0')
9f0001dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001df:	8d 50 01             	lea    edx,[eax+0x1]
9f0001e2:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0001e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001e8:	0f be f0             	movsx  esi,al
9f0001eb:	85 f6                	test   esi,esi
9f0001ed:	75 07                	jne    9f0001f6 <strtok+0x3d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:69
	    return 0;
9f0001ef:	b8 00 00 00 00       	mov    eax,0x0
9f0001f4:	eb 57                	jmp    9f00024d <strtok+0x94>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:70
    } while (strchrI(delim, ch));
9f0001f6:	83 ec 08             	sub    esp,0x8
9f0001f9:	56                   	push   esi
9f0001fa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0001fd:	e8 3a fe ff ff       	call   9f00003c <strchrI>
9f000202:	83 c4 10             	add    esp,0x10
9f000205:	85 c0                	test   eax,eax
9f000207:	75 d3                	jne    9f0001dc <strtok+0x23>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:71
    --s;
9f000209:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:72
    lasts = s + strcspnI(s, delim);
9f00020d:	83 ec 08             	sub    esp,0x8
9f000210:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000213:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000216:	e8 b0 fe ff ff       	call   9f0000cb <strcspnI>
9f00021b:	83 c4 10             	add    esp,0x10
9f00021e:	89 c2                	mov    edx,eax
9f000220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000223:	01 d0                	add    eax,edx
9f000225:	89 83 2c 00 00 00    	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:73
    if (*lasts != 0)
9f00022b:	8b 83 2c 00 00 00    	mov    eax,DWORD PTR [ebx+0x2c]
9f000231:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000234:	84 c0                	test   al,al
9f000236:	74 12                	je     9f00024a <strtok+0x91>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:74
	*lasts++ = 0;
9f000238:	8b 83 2c 00 00 00    	mov    eax,DWORD PTR [ebx+0x2c]
9f00023e:	8d 50 01             	lea    edx,[eax+0x1]
9f000241:	89 93 2c 00 00 00    	mov    DWORD PTR [ebx+0x2c],edx
9f000247:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:75
    return s;
9f00024a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:76
9f00024d:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000250:	5b                   	pop    ebx
9f000251:	5e                   	pop    esi
9f000252:	5d                   	pop    ebp
9f000253:	c3                   	ret    

9f000254 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:11

#include "common.h"
#include "strings.h"

void reverseI(char s[])
 {
9f000254:	f3 0f 1e fb          	endbr32 
9f000258:	55                   	push   ebp
9f000259:	89 e5                	mov    ebp,esp
9f00025b:	53                   	push   ebx
9f00025c:	83 ec 14             	sub    esp,0x14
9f00025f:	e8 aa 4f 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000264:	05 98 7c 00 00       	add    eax,0x7c98
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f000269:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000270:	83 ec 0c             	sub    esp,0xc
9f000273:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000276:	89 c3                	mov    ebx,eax
9f000278:	e8 fd 39 00 00       	call   9f003c7a <strlenI>
9f00027d:	83 c4 10             	add    esp,0x10
9f000280:	83 e8 01             	sub    eax,0x1
9f000283:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000286:	eb 39                	jmp    9f0002c1 <reverseI+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         c = s[i];
9f000288:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00028b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00028e:	01 d0                	add    eax,edx
9f000290:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000293:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[i] = s[j];
9f000296:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00029c:	01 d0                	add    eax,edx
9f00029e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0002a1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0002a4:	01 ca                	add    edx,ecx
9f0002a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0002a9:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:18 (discriminator 3)
         s[j] = c;
9f0002ab:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0002ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002b1:	01 c2                	add    edx,eax
9f0002b3:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f0002b7:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0002b9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f0002bd:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 1)
9f0002c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002c4:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0002c7:	7c bf                	jl     9f000288 <reverseI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:20
     }
 }
9f0002c9:	90                   	nop
9f0002ca:	90                   	nop
9f0002cb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002ce:	c9                   	leave  
9f0002cf:	c3                   	ret    

9f0002d0 <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:23

VISIBLE void itoa(int n, char s[])
 {
9f0002d0:	f3 0f 1e fb          	endbr32 
9f0002d4:	55                   	push   ebp
9f0002d5:	89 e5                	mov    ebp,esp
9f0002d7:	83 ec 18             	sub    esp,0x18
9f0002da:	e8 2f 4f 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0002df:	05 1d 7c 00 00       	add    eax,0x7c1d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002e7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002ea:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002ee:	79 03                	jns    9f0002f3 <itoa+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
         n = -n;          /* make n positive */
9f0002f0:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:28
     i = 0;
9f0002f3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0002fa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0002fd:	ba 67 66 66 66       	mov    edx,0x66666667
9f000302:	89 c8                	mov    eax,ecx
9f000304:	f7 ea                	imul   edx
9f000306:	c1 fa 02             	sar    edx,0x2
9f000309:	89 c8                	mov    eax,ecx
9f00030b:	c1 f8 1f             	sar    eax,0x1f
9f00030e:	29 c2                	sub    edx,eax
9f000310:	89 d0                	mov    eax,edx
9f000312:	c1 e0 02             	shl    eax,0x2
9f000315:	01 d0                	add    eax,edx
9f000317:	01 c0                	add    eax,eax
9f000319:	29 c1                	sub    ecx,eax
9f00031b:	89 ca                	mov    edx,ecx
9f00031d:	89 d0                	mov    eax,edx
9f00031f:	8d 48 30             	lea    ecx,[eax+0x30]
9f000322:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000325:	8d 50 01             	lea    edx,[eax+0x1]
9f000328:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00032b:	89 c2                	mov    edx,eax
9f00032d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000330:	01 d0                	add    eax,edx
9f000332:	89 ca                	mov    edx,ecx
9f000334:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000336:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000339:	ba 67 66 66 66       	mov    edx,0x66666667
9f00033e:	89 c8                	mov    eax,ecx
9f000340:	f7 ea                	imul   edx
9f000342:	c1 fa 02             	sar    edx,0x2
9f000345:	89 c8                	mov    eax,ecx
9f000347:	c1 f8 1f             	sar    eax,0x1f
9f00034a:	29 c2                	sub    edx,eax
9f00034c:	89 d0                	mov    eax,edx
9f00034e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000351:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000355:	7f a3                	jg     9f0002fa <itoa+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
     if (sign < 0)
9f000357:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00035b:	79 13                	jns    9f000370 <itoa+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
         s[i++] = '-';
9f00035d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000360:	8d 50 01             	lea    edx,[eax+0x1]
9f000363:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000366:	89 c2                	mov    edx,eax
9f000368:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00036b:	01 d0                	add    eax,edx
9f00036d:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     s[i] = '\0';
9f000370:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000373:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000376:	01 d0                	add    eax,edx
9f000378:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
     reverseI(s);
9f00037b:	83 ec 0c             	sub    esp,0xc
9f00037e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000381:	e8 ce fe ff ff       	call   9f000254 <reverseI>
9f000386:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:36
 }
9f000389:	90                   	nop
9f00038a:	c9                   	leave  
9f00038b:	c3                   	ret    

9f00038c <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:39

 char *itoaI(int n, char s[])
 {
9f00038c:	f3 0f 1e fb          	endbr32 
9f000390:	55                   	push   ebp
9f000391:	89 e5                	mov    ebp,esp
9f000393:	83 ec 18             	sub    esp,0x18
9f000396:	e8 73 4e 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00039b:	05 61 7b 00 00       	add    eax,0x7b61
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0003a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0003a6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0003aa:	79 03                	jns    9f0003af <itoaI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
         n = -n;          /* make n positive */
9f0003ac:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:44
     i = 0;
9f0003af:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0003b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003b9:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003be:	89 c8                	mov    eax,ecx
9f0003c0:	f7 ea                	imul   edx
9f0003c2:	c1 fa 02             	sar    edx,0x2
9f0003c5:	89 c8                	mov    eax,ecx
9f0003c7:	c1 f8 1f             	sar    eax,0x1f
9f0003ca:	29 c2                	sub    edx,eax
9f0003cc:	89 d0                	mov    eax,edx
9f0003ce:	c1 e0 02             	shl    eax,0x2
9f0003d1:	01 d0                	add    eax,edx
9f0003d3:	01 c0                	add    eax,eax
9f0003d5:	29 c1                	sub    ecx,eax
9f0003d7:	89 ca                	mov    edx,ecx
9f0003d9:	89 d0                	mov    eax,edx
9f0003db:	8d 48 30             	lea    ecx,[eax+0x30]
9f0003de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0003e1:	8d 50 01             	lea    edx,[eax+0x1]
9f0003e4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0003e7:	89 c2                	mov    edx,eax
9f0003e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0003ec:	01 d0                	add    eax,edx
9f0003ee:	89 ca                	mov    edx,ecx
9f0003f0:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f0003f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003f5:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003fa:	89 c8                	mov    eax,ecx
9f0003fc:	f7 ea                	imul   edx
9f0003fe:	c1 fa 02             	sar    edx,0x2
9f000401:	89 c8                	mov    eax,ecx
9f000403:	c1 f8 1f             	sar    eax,0x1f
9f000406:	29 c2                	sub    edx,eax
9f000408:	89 d0                	mov    eax,edx
9f00040a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f00040d:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000411:	7f a3                	jg     9f0003b6 <itoaI+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
     if (sign < 0)
9f000413:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000417:	79 13                	jns    9f00042c <itoaI+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
         s[i++] = '-';
9f000419:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00041c:	8d 50 01             	lea    edx,[eax+0x1]
9f00041f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000422:	89 c2                	mov    edx,eax
9f000424:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000427:	01 d0                	add    eax,edx
9f000429:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     s[i] = '\0';
9f00042c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00042f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000432:	01 d0                	add    eax,edx
9f000434:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
     reverseI(s);
9f000437:	83 ec 0c             	sub    esp,0xc
9f00043a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00043d:	e8 12 fe ff ff       	call   9f000254 <reverseI>
9f000442:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:52
     return s;
9f000445:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:53
 }
9f000448:	c9                   	leave  
9f000449:	c3                   	ret    

9f00044a <atoiI>:
atoiI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:57

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoiI(char *str)
{
9f00044a:	f3 0f 1e fb          	endbr32 
9f00044e:	55                   	push   ebp
9f00044f:	89 e5                	mov    ebp,esp
9f000451:	83 ec 10             	sub    esp,0x10
9f000454:	e8 b5 4d 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000459:	05 a3 7a 00 00       	add    eax,0x7aa3
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:58
    int res = 0; // Initialize result
9f00045e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f000465:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f00046c:	eb 28                	jmp    9f000496 <atoiI+0x4c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:63 (discriminator 3)
        res = res*10 + str[i] - '0';
9f00046e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f000471:	89 d0                	mov    eax,edx
9f000473:	c1 e0 02             	shl    eax,0x2
9f000476:	01 d0                	add    eax,edx
9f000478:	01 c0                	add    eax,eax
9f00047a:	89 c1                	mov    ecx,eax
9f00047c:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00047f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000482:	01 d0                	add    eax,edx
9f000484:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000487:	0f be c0             	movsx  eax,al
9f00048a:	01 c8                	add    eax,ecx
9f00048c:	83 e8 30             	sub    eax,0x30
9f00048f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62 (discriminator 3)
    for (int i = 0; str[i] != '\0'; ++i)
9f000492:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62 (discriminator 1)
9f000496:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f000499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00049c:	01 d0                	add    eax,edx
9f00049e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0004a1:	84 c0                	test   al,al
9f0004a3:	75 c9                	jne    9f00046e <atoiI+0x24>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:66
  
    // return result.
    return res;
9f0004a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:67
}
9f0004a8:	c9                   	leave  
9f0004a9:	c3                   	ret    

9f0004aa <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:70

VISIBLE int atoi(char *str)
{
9f0004aa:	f3 0f 1e fb          	endbr32 
9f0004ae:	55                   	push   ebp
9f0004af:	89 e5                	mov    ebp,esp
9f0004b1:	e8 58 4d 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0004b6:	05 46 7a 00 00       	add    eax,0x7a46
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:71
    return atoiI(str);
9f0004bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004be:	e8 87 ff ff ff       	call   9f00044a <atoiI>
9f0004c3:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:72
}
9f0004c6:	c9                   	leave  
9f0004c7:	c3                   	ret    

9f0004c8 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:16
#include "ascii.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f0004c8:	f3 0f 1e fb          	endbr32 
9f0004cc:	55                   	push   ebp
9f0004cd:	89 e5                	mov    ebp,esp
9f0004cf:	53                   	push   ebx
9f0004d0:	83 ec 14             	sub    esp,0x14
9f0004d3:	e8 3a 4d 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0004d8:	81 c3 24 7a 00 00    	add    ebx,0x7a24
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f0004de:	83 ec 08             	sub    esp,0x8
9f0004e1:	8d 83 c4 f6 ff ff    	lea    eax,[ebx-0x93c]
9f0004e7:	50                   	push   eax
9f0004e8:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004eb:	50                   	push   eax
9f0004ec:	e8 69 36 00 00       	call   9f003b5a <strcpyI>
9f0004f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    itoaI(x,xstr);
9f0004f4:	83 ec 08             	sub    esp,0x8
9f0004f7:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004fa:	50                   	push   eax
9f0004fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004fe:	e8 89 fe ff ff       	call   9f00038c <itoaI>
9f000503:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    strcatI(cmd,xstr);
9f000506:	83 ec 08             	sub    esp,0x8
9f000509:	8d 45 eb             	lea    eax,[ebp-0x15]
9f00050c:	50                   	push   eax
9f00050d:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000510:	50                   	push   eax
9f000511:	e8 a2 34 00 00       	call   9f0039b8 <strcatI>
9f000516:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,";");
9f000519:	83 ec 08             	sub    esp,0x8
9f00051c:	8d 83 c7 f6 ff ff    	lea    eax,[ebx-0x939]
9f000522:	50                   	push   eax
9f000523:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000526:	50                   	push   eax
9f000527:	e8 8c 34 00 00       	call   9f0039b8 <strcatI>
9f00052c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    itoaI(y,ystr);
9f00052f:	83 ec 08             	sub    esp,0x8
9f000532:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000535:	50                   	push   eax
9f000536:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000539:	e8 4e fe ff ff       	call   9f00038c <itoaI>
9f00053e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:25
    strcatI(cmd,ystr);
9f000541:	83 ec 08             	sub    esp,0x8
9f000544:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000547:	50                   	push   eax
9f000548:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00054b:	50                   	push   eax
9f00054c:	e8 67 34 00 00       	call   9f0039b8 <strcatI>
9f000551:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    strcatI(cmd,"H");
9f000554:	83 ec 08             	sub    esp,0x8
9f000557:	8d 83 c9 f6 ff ff    	lea    eax,[ebx-0x937]
9f00055d:	50                   	push   eax
9f00055e:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000561:	50                   	push   eax
9f000562:	e8 51 34 00 00       	call   9f0039b8 <strcatI>
9f000567:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:28
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f00056a:	83 ec 08             	sub    esp,0x8
9f00056d:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000570:	50                   	push   eax
9f000571:	8d 83 cb f6 ff ff    	lea    eax,[ebx-0x935]
9f000577:	50                   	push   eax
9f000578:	e8 0b 11 00 00       	call   9f001688 <printfI>
9f00057d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:29
}
9f000580:	90                   	nop
9f000581:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000584:	c9                   	leave  
9f000585:	c3                   	ret    

9f000586 <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:32

VISIBLE void saveCursorPosition()
{
9f000586:	f3 0f 1e fb          	endbr32 
9f00058a:	55                   	push   ebp
9f00058b:	89 e5                	mov    ebp,esp
9f00058d:	53                   	push   ebx
9f00058e:	83 ec 14             	sub    esp,0x14
9f000591:	e8 7c 4c 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f000596:	81 c3 66 79 00 00    	add    ebx,0x7966
/home/yogi/src/os/aproj/libChrisOS/src/console.c:35
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f00059c:	83 ec 08             	sub    esp,0x8
9f00059f:	8d 83 c4 f6 ff ff    	lea    eax,[ebx-0x93c]
9f0005a5:	50                   	push   eax
9f0005a6:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005a9:	50                   	push   eax
9f0005aa:	e8 ab 35 00 00       	call   9f003b5a <strcpyI>
9f0005af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    strcatI(cmd,"s");
9f0005b2:	83 ec 08             	sub    esp,0x8
9f0005b5:	8d 83 ce f6 ff ff    	lea    eax,[ebx-0x932]
9f0005bb:	50                   	push   eax
9f0005bc:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005bf:	50                   	push   eax
9f0005c0:	e8 f3 33 00 00       	call   9f0039b8 <strcatI>
9f0005c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:38
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0005c8:	83 ec 08             	sub    esp,0x8
9f0005cb:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005ce:	50                   	push   eax
9f0005cf:	8d 83 cb f6 ff ff    	lea    eax,[ebx-0x935]
9f0005d5:	50                   	push   eax
9f0005d6:	e8 ad 10 00 00       	call   9f001688 <printfI>
9f0005db:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:39
}
9f0005de:	90                   	nop
9f0005df:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0005e2:	c9                   	leave  
9f0005e3:	c3                   	ret    

9f0005e4 <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:42

VISIBLE void restoreCursorPosition()
{
9f0005e4:	f3 0f 1e fb          	endbr32 
9f0005e8:	55                   	push   ebp
9f0005e9:	89 e5                	mov    ebp,esp
9f0005eb:	53                   	push   ebx
9f0005ec:	83 ec 14             	sub    esp,0x14
9f0005ef:	e8 1e 4c 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0005f4:	81 c3 08 79 00 00    	add    ebx,0x7908
/home/yogi/src/os/aproj/libChrisOS/src/console.c:45
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0005fa:	83 ec 08             	sub    esp,0x8
9f0005fd:	8d 83 c4 f6 ff ff    	lea    eax,[ebx-0x93c]
9f000603:	50                   	push   eax
9f000604:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000607:	50                   	push   eax
9f000608:	e8 4d 35 00 00       	call   9f003b5a <strcpyI>
9f00060d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
    strcatI(cmd,"u");
9f000610:	83 ec 08             	sub    esp,0x8
9f000613:	8d 83 d0 f6 ff ff    	lea    eax,[ebx-0x930]
9f000619:	50                   	push   eax
9f00061a:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00061d:	50                   	push   eax
9f00061e:	e8 95 33 00 00       	call   9f0039b8 <strcatI>
9f000623:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:48
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000626:	83 ec 08             	sub    esp,0x8
9f000629:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00062c:	50                   	push   eax
9f00062d:	8d 83 cb f6 ff ff    	lea    eax,[ebx-0x935]
9f000633:	50                   	push   eax
9f000634:	e8 4f 10 00 00       	call   9f001688 <printfI>
9f000639:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:49
}
9f00063c:	90                   	nop
9f00063d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000640:	c9                   	leave  
9f000641:	c3                   	ret    

9f000642 <getenvI>:
getenvI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "common.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
9f000642:	f3 0f 1e fb          	endbr32 
9f000646:	55                   	push   ebp
9f000647:	89 e5                	mov    ebp,esp
9f000649:	53                   	push   ebx
9f00064a:	83 ec 14             	sub    esp,0x14
9f00064d:	e8 c0 4b 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f000652:	81 c3 aa 78 00 00    	add    ebx,0x78aa
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f000658:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f00065f:	eb 79                	jmp    9f0006da <getenvI+0x98>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f000661:	83 ec 0c             	sub    esp,0xc
9f000664:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000667:	e8 0e 36 00 00       	call   9f003c7a <strlenI>
9f00066c:	83 c4 10             	add    esp,0x10
9f00066f:	8d 93 24 00 00 00    	lea    edx,[ebx+0x24]
9f000675:	8b 12                	mov    edx,DWORD PTR [edx]
9f000677:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00067a:	c1 e1 02             	shl    ecx,0x2
9f00067d:	01 ca                	add    edx,ecx
9f00067f:	8b 12                	mov    edx,DWORD PTR [edx]
9f000681:	83 ec 04             	sub    esp,0x4
9f000684:	50                   	push   eax
9f000685:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000688:	52                   	push   edx
9f000689:	e8 09 37 00 00       	call   9f003d97 <strncmpI>
9f00068e:	83 c4 10             	add    esp,0x10
9f000691:	85 c0                	test   eax,eax
9f000693:	75 41                	jne    9f0006d6 <getenvI+0x94>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f000695:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f00069b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00069d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0006a0:	c1 e2 02             	shl    edx,0x2
9f0006a3:	01 d0                	add    eax,edx
9f0006a5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006a7:	83 ec 08             	sub    esp,0x8
9f0006aa:	8d 93 d2 f6 ff ff    	lea    edx,[ebx-0x92e]
9f0006b0:	52                   	push   edx
9f0006b1:	50                   	push   eax
9f0006b2:	e8 c1 3d 00 00       	call   9f004478 <strstrI>
9f0006b7:	83 c4 10             	add    esp,0x10
9f0006ba:	83 c0 01             	add    eax,0x1
9f0006bd:	83 ec 04             	sub    esp,0x4
9f0006c0:	6a 32                	push   0x32
9f0006c2:	50                   	push   eax
9f0006c3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0006c6:	e8 37 37 00 00       	call   9f003e02 <strncpyI>
9f0006cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f0006ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0006d1:	83 c0 01             	add    eax,0x1
9f0006d4:	eb 0f                	jmp    9f0006e5 <getenvI+0xa3>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
    for (int cnt=0;cnt<100;cnt++)
9f0006d6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f0006da:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f0006de:	7e 81                	jle    9f000661 <getenvI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        }
    return 0;
9f0006e0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f0006e5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0006e8:	c9                   	leave  
9f0006e9:	c3                   	ret    

9f0006ea <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE int getenv(char *varname, char *value)
{
9f0006ea:	f3 0f 1e fb          	endbr32 
9f0006ee:	55                   	push   ebp
9f0006ef:	89 e5                	mov    ebp,esp
9f0006f1:	83 ec 08             	sub    esp,0x8
9f0006f4:	e8 15 4b 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0006f9:	05 03 78 00 00       	add    eax,0x7803
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    return getenvI(varname, value);
9f0006fe:	83 ec 08             	sub    esp,0x8
9f000701:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000704:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000707:	e8 36 ff ff ff       	call   9f000642 <getenvI>
9f00070c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:23
}
9f00070f:	c9                   	leave  
9f000710:	c3                   	ret    

9f000711 <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:26

VISIBLE void  setenv(char *varname, char *value)
{
9f000711:	f3 0f 1e fb          	endbr32 
9f000715:	55                   	push   ebp
9f000716:	89 e5                	mov    ebp,esp
9f000718:	53                   	push   ebx
9f000719:	83 ec 14             	sub    esp,0x14
9f00071c:	e8 f1 4a 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f000721:	81 c3 db 77 00 00    	add    ebx,0x77db
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
    uint32_t lastPopulated = 0;
9f000727:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29
    
    for (int cnt=0;cnt<100;cnt++)
9f00072e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000735:	e9 d3 00 00 00       	jmp    9f00080d <setenv+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
        if (processEnvp[cnt]!=0)
9f00073a:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f000740:	8b 00                	mov    eax,DWORD PTR [eax]
9f000742:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000745:	c1 e2 02             	shl    edx,0x2
9f000748:	01 d0                	add    eax,edx
9f00074a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00074c:	85 c0                	test   eax,eax
9f00074e:	0f 84 b5 00 00 00    	je     9f000809 <setenv+0xf8>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000754:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f00075a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00075c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00075f:	c1 e2 02             	shl    edx,0x2
9f000762:	01 d0                	add    eax,edx
9f000764:	8b 00                	mov    eax,DWORD PTR [eax]
9f000766:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f000769:	83 ec 0c             	sub    esp,0xc
9f00076c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00076f:	e8 06 35 00 00       	call   9f003c7a <strlenI>
9f000774:	83 c4 10             	add    esp,0x10
9f000777:	8d 93 24 00 00 00    	lea    edx,[ebx+0x24]
9f00077d:	8b 12                	mov    edx,DWORD PTR [edx]
9f00077f:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f000782:	c1 e1 02             	shl    ecx,0x2
9f000785:	01 ca                	add    edx,ecx
9f000787:	8b 12                	mov    edx,DWORD PTR [edx]
9f000789:	83 ec 04             	sub    esp,0x4
9f00078c:	50                   	push   eax
9f00078d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000790:	52                   	push   edx
9f000791:	e8 01 36 00 00       	call   9f003d97 <strncmpI>
9f000796:	83 c4 10             	add    esp,0x10
9f000799:	85 c0                	test   eax,eax
9f00079b:	75 6c                	jne    9f000809 <setenv+0xf8>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:35
            {
                strcpyI(processEnvp[cnt],varname);
9f00079d:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f0007a3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007a5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0007a8:	c1 e2 02             	shl    edx,0x2
9f0007ab:	01 d0                	add    eax,edx
9f0007ad:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007af:	83 ec 08             	sub    esp,0x8
9f0007b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0007b5:	50                   	push   eax
9f0007b6:	e8 9f 33 00 00       	call   9f003b5a <strcpyI>
9f0007bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
9f0007be:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f0007c4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007c6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0007c9:	c1 e2 02             	shl    edx,0x2
9f0007cc:	01 d0                	add    eax,edx
9f0007ce:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007d0:	83 ec 08             	sub    esp,0x8
9f0007d3:	8d 93 d2 f6 ff ff    	lea    edx,[ebx-0x92e]
9f0007d9:	52                   	push   edx
9f0007da:	50                   	push   eax
9f0007db:	e8 d8 31 00 00       	call   9f0039b8 <strcatI>
9f0007e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
                strcatI(processEnvp[cnt],value);
9f0007e3:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f0007e9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007eb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0007ee:	c1 e2 02             	shl    edx,0x2
9f0007f1:	01 d0                	add    eax,edx
9f0007f3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007f5:	83 ec 08             	sub    esp,0x8
9f0007f8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0007fb:	50                   	push   eax
9f0007fc:	e8 b7 31 00 00       	call   9f0039b8 <strcatI>
9f000801:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:38
                return;
9f000804:	e9 c8 00 00 00       	jmp    9f0008d1 <setenv+0x1c0>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 2)
    for (int cnt=0;cnt<100;cnt++)
9f000809:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 1)
9f00080d:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f000811:	0f 8e 23 ff ff ff    	jle    9f00073a <setenv+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f000817:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f00081e:	e9 a4 00 00 00       	jmp    9f0008c7 <setenv+0x1b6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
        if (processEnvp[cnt]==0)
9f000823:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f000829:	8b 00                	mov    eax,DWORD PTR [eax]
9f00082b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00082e:	c1 e2 02             	shl    edx,0x2
9f000831:	01 d0                	add    eax,edx
9f000833:	8b 00                	mov    eax,DWORD PTR [eax]
9f000835:	85 c0                	test   eax,eax
9f000837:	0f 85 86 00 00 00    	jne    9f0008c3 <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:44
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f00083d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000840:	8d 88 00 02 00 00    	lea    ecx,[eax+0x200]
9f000846:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f00084c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00084e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000851:	c1 e2 02             	shl    edx,0x2
9f000854:	01 d0                	add    eax,edx
9f000856:	89 ca                	mov    edx,ecx
9f000858:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:45
            strcpyI(processEnvp[cnt],varname);
9f00085a:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f000860:	8b 00                	mov    eax,DWORD PTR [eax]
9f000862:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000865:	c1 e2 02             	shl    edx,0x2
9f000868:	01 d0                	add    eax,edx
9f00086a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00086c:	83 ec 08             	sub    esp,0x8
9f00086f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000872:	50                   	push   eax
9f000873:	e8 e2 32 00 00       	call   9f003b5a <strcpyI>
9f000878:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:46
            strcatI(processEnvp[cnt],"=");
9f00087b:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f000881:	8b 00                	mov    eax,DWORD PTR [eax]
9f000883:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000886:	c1 e2 02             	shl    edx,0x2
9f000889:	01 d0                	add    eax,edx
9f00088b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00088d:	83 ec 08             	sub    esp,0x8
9f000890:	8d 93 d2 f6 ff ff    	lea    edx,[ebx-0x92e]
9f000896:	52                   	push   edx
9f000897:	50                   	push   eax
9f000898:	e8 1b 31 00 00       	call   9f0039b8 <strcatI>
9f00089d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
9f0008a0:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f0008a6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0008ab:	c1 e2 02             	shl    edx,0x2
9f0008ae:	01 d0                	add    eax,edx
9f0008b0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008b2:	83 ec 08             	sub    esp,0x8
9f0008b5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008b8:	50                   	push   eax
9f0008b9:	e8 fa 30 00 00       	call   9f0039b8 <strcatI>
9f0008be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:48
            return;
9f0008c1:	eb 0e                	jmp    9f0008d1 <setenv+0x1c0>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 2)
    for (int cnt=0;cnt<100;cnt++)
9f0008c3:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 1)
9f0008c7:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f0008cb:	0f 8e 52 ff ff ff    	jle    9f000823 <setenv+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:52
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f0008d1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0008d4:	c9                   	leave  
9f0008d5:	c3                   	ret    

9f0008d6 <getcwdI>:
getcwdI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:55

char* getcwdI(char* buf, size_t size)
{
9f0008d6:	f3 0f 1e fb          	endbr32 
9f0008da:	55                   	push   ebp
9f0008db:	89 e5                	mov    ebp,esp
9f0008dd:	53                   	push   ebx
9f0008de:	83 ec 04             	sub    esp,0x4
9f0008e1:	e8 28 49 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0008e6:	05 16 76 00 00       	add    eax,0x7616
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:56
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f0008eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0008ee:	83 ec 04             	sub    esp,0x4
9f0008f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008f4:	52                   	push   edx
9f0008f5:	6a 4f                	push   0x4f
9f0008f7:	89 c3                	mov    ebx,eax
9f0008f9:	e8 15 0b 00 00       	call   9f001413 <do_syscall2>
9f0008fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:58
    
}
9f000901:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000904:	c9                   	leave  
9f000905:	c3                   	ret    

9f000906 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61

VISIBLE char* getcwd(char* buf, size_t size)
{
9f000906:	f3 0f 1e fb          	endbr32 
9f00090a:	55                   	push   ebp
9f00090b:	89 e5                	mov    ebp,esp
9f00090d:	83 ec 08             	sub    esp,0x8
9f000910:	e8 f9 48 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000915:	05 e7 75 00 00       	add    eax,0x75e7
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:62
    return getcwdI(buf,size);
9f00091a:	83 ec 08             	sub    esp,0x8
9f00091d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000920:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000923:	e8 ae ff ff ff       	call   9f0008d6 <getcwdI>
9f000928:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:63
}
9f00092b:	c9                   	leave  
9f00092c:	c3                   	ret    

9f00092d <getdirI>:
getdirI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:19
    char *resolvePath_inPath;
    char *resolvePath_resPath;
    char *resolvePath_cwd;

int getdirI(char* path, direntry_t *entries, int bufferCount)
{
9f00092d:	f3 0f 1e fb          	endbr32 
9f000931:	55                   	push   ebp
9f000932:	89 e5                	mov    ebp,esp
9f000934:	53                   	push   ebx
9f000935:	83 ec 04             	sub    esp,0x4
9f000938:	e8 d1 48 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00093d:	05 bf 75 00 00       	add    eax,0x75bf
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)entries, bufferCount);
9f000942:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000945:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000948:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00094b:	53                   	push   ebx
9f00094c:	51                   	push   ecx
9f00094d:	52                   	push   edx
9f00094e:	68 04 03 00 00       	push   0x304
9f000953:	89 c3                	mov    ebx,eax
9f000955:	e8 79 0a 00 00       	call   9f0013d3 <do_syscall3>
9f00095a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    
}
9f00095d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000960:	c9                   	leave  
9f000961:	c3                   	ret    

9f000962 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:24
VISIBLE int getdir(char* path, direntry_t *entries, int bufferCount)
{
9f000962:	f3 0f 1e fb          	endbr32 
9f000966:	55                   	push   ebp
9f000967:	89 e5                	mov    ebp,esp
9f000969:	83 ec 08             	sub    esp,0x8
9f00096c:	e8 9d 48 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000971:	05 8b 75 00 00       	add    eax,0x758b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25
    return getdirI(path, entries, bufferCount);
9f000976:	83 ec 04             	sub    esp,0x4
9f000979:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00097c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00097f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000982:	e8 a6 ff ff ff       	call   9f00092d <getdirI>
9f000987:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
}
9f00098a:	c9                   	leave  
9f00098b:	c3                   	ret    

9f00098c <openI>:
openI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:29

void* openI(char* path, const char* mode)
{
9f00098c:	f3 0f 1e fb          	endbr32 
9f000990:	55                   	push   ebp
9f000991:	89 e5                	mov    ebp,esp
9f000993:	53                   	push   ebx
9f000994:	83 ec 04             	sub    esp,0x4
9f000997:	e8 72 48 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00099c:	05 60 75 00 00       	add    eax,0x7560
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31
    //NOTE: Using syscall3 and passing -1 as 3rd parameter, otherwise param3 will be 0 and syscall will think freopen is calling!
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
9f0009a1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0009a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0009a7:	6a ff                	push   0xffffffff
9f0009a9:	51                   	push   ecx
9f0009aa:	52                   	push   edx
9f0009ab:	6a 02                	push   0x2
9f0009ad:	89 c3                	mov    ebx,eax
9f0009af:	e8 1f 0a 00 00       	call   9f0013d3 <do_syscall3>
9f0009b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
}
9f0009b7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0009ba:	c9                   	leave  
9f0009bb:	c3                   	ret    

9f0009bc <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:35

VISIBLE void* open(char* path, const char* mode)
{
9f0009bc:	f3 0f 1e fb          	endbr32 
9f0009c0:	55                   	push   ebp
9f0009c1:	89 e5                	mov    ebp,esp
9f0009c3:	83 ec 08             	sub    esp,0x8
9f0009c6:	e8 43 48 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0009cb:	05 31 75 00 00       	add    eax,0x7531
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36
    return openI(path, mode);
9f0009d0:	83 ec 08             	sub    esp,0x8
9f0009d3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0009d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0009d9:	e8 ae ff ff ff       	call   9f00098c <openI>
9f0009de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
}
9f0009e1:	c9                   	leave  
9f0009e2:	c3                   	ret    

9f0009e3 <file_cleanup>:
file_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:40

void file_cleanup()
{
9f0009e3:	f3 0f 1e fb          	endbr32 
9f0009e7:	55                   	push   ebp
9f0009e8:	89 e5                	mov    ebp,esp
9f0009ea:	53                   	push   ebx
9f0009eb:	83 ec 04             	sub    esp,0x4
9f0009ee:	e8 1f 48 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0009f3:	81 c3 09 75 00 00    	add    ebx,0x7509
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41
    while (filesToClose)
9f0009f9:	eb 1f                	jmp    9f000a1a <file_cleanup+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:42
        closeI(filesToClose++);
9f0009fb:	8d 83 34 00 00 00    	lea    eax,[ebx+0x34]
9f000a01:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a03:	8d 48 04             	lea    ecx,[eax+0x4]
9f000a06:	8d 93 34 00 00 00    	lea    edx,[ebx+0x34]
9f000a0c:	89 0a                	mov    DWORD PTR [edx],ecx
9f000a0e:	83 ec 0c             	sub    esp,0xc
9f000a11:	50                   	push   eax
9f000a12:	e8 be 00 00 00       	call   9f000ad5 <closeI>
9f000a17:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41
    while (filesToClose)
9f000a1a:	8d 83 34 00 00 00    	lea    eax,[ebx+0x34]
9f000a20:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a22:	85 c0                	test   eax,eax
9f000a24:	75 d5                	jne    9f0009fb <file_cleanup+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43
    freeI(filesToClose);
9f000a26:	8d 83 34 00 00 00    	lea    eax,[ebx+0x34]
9f000a2c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a2e:	83 ec 0c             	sub    esp,0xc
9f000a31:	50                   	push   eax
9f000a32:	e8 96 18 00 00       	call   9f0022cd <freeI>
9f000a37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:44
}
9f000a3a:	90                   	nop
9f000a3b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a3e:	c9                   	leave  
9f000a3f:	c3                   	ret    

9f000a40 <freopen>:
freopen():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:47

VISIBLE void* freopen(char* path, const char* mode, void *stream)
{
9f000a40:	f3 0f 1e fb          	endbr32 
9f000a44:	55                   	push   ebp
9f000a45:	89 e5                	mov    ebp,esp
9f000a47:	56                   	push   esi
9f000a48:	53                   	push   ebx
9f000a49:	83 ec 10             	sub    esp,0x10
9f000a4c:	e8 c1 47 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f000a51:	81 c3 ab 74 00 00    	add    ebx,0x74ab
/home/yogi/src/os/aproj/libChrisOS/src/file.c:48
    void *retVal=0;
9f000a57:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:49
    retVal = (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode, (uint32_t)stream);
9f000a5e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000a61:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000a64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000a67:	51                   	push   ecx
9f000a68:	52                   	push   edx
9f000a69:	50                   	push   eax
9f000a6a:	6a 02                	push   0x2
9f000a6c:	e8 62 09 00 00       	call   9f0013d3 <do_syscall3>
9f000a71:	83 c4 10             	add    esp,0x10
9f000a74:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:50
    if (retVal==NULL)
9f000a77:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000a7b:	75 07                	jne    9f000a84 <freopen+0x44>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:51
        return (void*)-1;
9f000a7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f000a82:	eb 4a                	jmp    9f000ace <freopen+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:52
    if (filesToClose==NULL)
9f000a84:	8d 83 34 00 00 00    	lea    eax,[ebx+0x34]
9f000a8a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a8c:	85 c0                	test   eax,eax
9f000a8e:	75 15                	jne    9f000aa5 <freopen+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:54
    {
        filesToClose=mallocI(sizeof(uintptr_t)*25);
9f000a90:	83 ec 0c             	sub    esp,0xc
9f000a93:	6a 64                	push   0x64
9f000a95:	e8 c1 19 00 00       	call   9f00245b <mallocI>
9f000a9a:	83 c4 10             	add    esp,0x10
9f000a9d:	8d 93 34 00 00 00    	lea    edx,[ebx+0x34]
9f000aa3:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:56
    }
    filesToClose[filesToCloseCount++]=(uintptr_t)retVal;
9f000aa5:	8d 83 34 00 00 00    	lea    eax,[ebx+0x34]
9f000aab:	8b 30                	mov    esi,DWORD PTR [eax]
9f000aad:	8d 83 30 00 00 00    	lea    eax,[ebx+0x30]
9f000ab3:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ab5:	8d 48 01             	lea    ecx,[eax+0x1]
9f000ab8:	8d 93 30 00 00 00    	lea    edx,[ebx+0x30]
9f000abe:	89 0a                	mov    DWORD PTR [edx],ecx
9f000ac0:	c1 e0 02             	shl    eax,0x2
9f000ac3:	8d 14 06             	lea    edx,[esi+eax*1]
9f000ac6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000ac9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:57
    return retVal;
9f000acb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:58
}
9f000ace:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000ad1:	5b                   	pop    ebx
9f000ad2:	5e                   	pop    esi
9f000ad3:	5d                   	pop    ebp
9f000ad4:	c3                   	ret    

9f000ad5 <closeI>:
closeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:61

void closeI(void* handle)
{
9f000ad5:	f3 0f 1e fb          	endbr32 
9f000ad9:	55                   	push   ebp
9f000ada:	89 e5                	mov    ebp,esp
9f000adc:	53                   	push   ebx
9f000add:	83 ec 04             	sub    esp,0x4
9f000ae0:	e8 29 47 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000ae5:	05 17 74 00 00       	add    eax,0x7417
/home/yogi/src/os/aproj/libChrisOS/src/file.c:62
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f000aea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000aed:	83 ec 08             	sub    esp,0x8
9f000af0:	52                   	push   edx
9f000af1:	6a 03                	push   0x3
9f000af3:	89 c3                	mov    ebx,eax
9f000af5:	e8 5b 09 00 00       	call   9f001455 <do_syscall1>
9f000afa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:63
}
9f000afd:	90                   	nop
9f000afe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b01:	c9                   	leave  
9f000b02:	c3                   	ret    

9f000b03 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:66

VISIBLE void close(void* handle)
{
9f000b03:	f3 0f 1e fb          	endbr32 
9f000b07:	55                   	push   ebp
9f000b08:	89 e5                	mov    ebp,esp
9f000b0a:	83 ec 08             	sub    esp,0x8
9f000b0d:	e8 fc 46 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000b12:	05 ea 73 00 00       	add    eax,0x73ea
/home/yogi/src/os/aproj/libChrisOS/src/file.c:67
    return closeI(handle);
9f000b17:	83 ec 0c             	sub    esp,0xc
9f000b1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b1d:	e8 b3 ff ff ff       	call   9f000ad5 <closeI>
9f000b22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:68
}
9f000b25:	c9                   	leave  
9f000b26:	c3                   	ret    

9f000b27 <readI>:
readI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:71

int readI(void* handle, void *buffer, int size, int length)
{
9f000b27:	f3 0f 1e fb          	endbr32 
9f000b2b:	55                   	push   ebp
9f000b2c:	89 e5                	mov    ebp,esp
9f000b2e:	56                   	push   esi
9f000b2f:	53                   	push   ebx
9f000b30:	e8 d9 46 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000b35:	05 c7 73 00 00       	add    eax,0x73c7
/home/yogi/src/os/aproj/libChrisOS/src/file.c:72
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000b3a:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000b3d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000b40:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000b43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000b46:	83 ec 0c             	sub    esp,0xc
9f000b49:	56                   	push   esi
9f000b4a:	53                   	push   ebx
9f000b4b:	51                   	push   ecx
9f000b4c:	52                   	push   edx
9f000b4d:	6a 04                	push   0x4
9f000b4f:	89 c3                	mov    ebx,eax
9f000b51:	e8 3f 08 00 00       	call   9f001395 <do_syscall4>
9f000b56:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:73
}
9f000b59:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000b5c:	5b                   	pop    ebx
9f000b5d:	5e                   	pop    esi
9f000b5e:	5d                   	pop    ebp
9f000b5f:	c3                   	ret    

9f000b60 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:76

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f000b60:	f3 0f 1e fb          	endbr32 
9f000b64:	55                   	push   ebp
9f000b65:	89 e5                	mov    ebp,esp
9f000b67:	83 ec 08             	sub    esp,0x8
9f000b6a:	e8 9f 46 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000b6f:	05 8d 73 00 00       	add    eax,0x738d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:77
    return readI(handle, buffer, size, length);
9f000b74:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000b77:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b7a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b80:	e8 a2 ff ff ff       	call   9f000b27 <readI>
9f000b85:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:78
}
9f000b88:	c9                   	leave  
9f000b89:	c3                   	ret    

9f000b8a <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:80
int writeI(void* handle, void *buffer, int size, int length)
{
9f000b8a:	f3 0f 1e fb          	endbr32 
9f000b8e:	55                   	push   ebp
9f000b8f:	89 e5                	mov    ebp,esp
9f000b91:	56                   	push   esi
9f000b92:	53                   	push   ebx
9f000b93:	e8 76 46 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000b98:	05 64 73 00 00       	add    eax,0x7364
/home/yogi/src/os/aproj/libChrisOS/src/file.c:81
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000b9d:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000ba0:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000ba3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000ba6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000ba9:	83 ec 0c             	sub    esp,0xc
9f000bac:	56                   	push   esi
9f000bad:	53                   	push   ebx
9f000bae:	51                   	push   ecx
9f000baf:	52                   	push   edx
9f000bb0:	6a 05                	push   0x5
9f000bb2:	89 c3                	mov    ebx,eax
9f000bb4:	e8 dc 07 00 00       	call   9f001395 <do_syscall4>
9f000bb9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:82
}
9f000bbc:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000bbf:	5b                   	pop    ebx
9f000bc0:	5e                   	pop    esi
9f000bc1:	5d                   	pop    ebp
9f000bc2:	c3                   	ret    

9f000bc3 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:85

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f000bc3:	f3 0f 1e fb          	endbr32 
9f000bc7:	55                   	push   ebp
9f000bc8:	89 e5                	mov    ebp,esp
9f000bca:	83 ec 08             	sub    esp,0x8
9f000bcd:	e8 3c 46 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000bd2:	05 2a 73 00 00       	add    eax,0x732a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:86
    return writeI(handle, buffer, size, length);
9f000bd7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000bda:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000bdd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000be0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000be3:	e8 a2 ff ff ff       	call   9f000b8a <writeI>
9f000be8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:87
}
9f000beb:	c9                   	leave  
9f000bec:	c3                   	ret    

9f000bed <seekI>:
seekI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:90

int seekI(void* handle, long position, int whence)
{
9f000bed:	f3 0f 1e fb          	endbr32 
9f000bf1:	55                   	push   ebp
9f000bf2:	89 e5                	mov    ebp,esp
9f000bf4:	53                   	push   ebx
9f000bf5:	83 ec 04             	sub    esp,0x4
9f000bf8:	e8 11 46 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000bfd:	05 ff 72 00 00       	add    eax,0x72ff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:91
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f000c02:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000c05:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000c08:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000c0b:	53                   	push   ebx
9f000c0c:	51                   	push   ecx
9f000c0d:	52                   	push   edx
9f000c0e:	6a 0b                	push   0xb
9f000c10:	89 c3                	mov    ebx,eax
9f000c12:	e8 bc 07 00 00       	call   9f0013d3 <do_syscall3>
9f000c17:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:92
}
9f000c1a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000c1d:	c9                   	leave  
9f000c1e:	c3                   	ret    

9f000c1f <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:95

VISIBLE int seek(void* handle, long position, int whence)
{
9f000c1f:	f3 0f 1e fb          	endbr32 
9f000c23:	55                   	push   ebp
9f000c24:	89 e5                	mov    ebp,esp
9f000c26:	83 ec 08             	sub    esp,0x8
9f000c29:	e8 e0 45 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000c2e:	05 ce 72 00 00       	add    eax,0x72ce
/home/yogi/src/os/aproj/libChrisOS/src/file.c:96
    return seekI(handle, position, whence);
9f000c33:	83 ec 04             	sub    esp,0x4
9f000c36:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000c39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000c3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000c3f:	e8 a9 ff ff ff       	call   9f000bed <seekI>
9f000c44:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:97
}
9f000c47:	c9                   	leave  
9f000c48:	c3                   	ret    

9f000c49 <statI>:
statI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:99
int statI(char *path, fstat_t *stat)
{
9f000c49:	f3 0f 1e fb          	endbr32 
9f000c4d:	55                   	push   ebp
9f000c4e:	89 e5                	mov    ebp,esp
9f000c50:	53                   	push   ebx
9f000c51:	83 ec 04             	sub    esp,0x4
9f000c54:	e8 b5 45 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000c59:	05 a3 72 00 00       	add    eax,0x72a3
/home/yogi/src/os/aproj/libChrisOS/src/file.c:100
    return do_syscall2(SYSCALL_STAT, (uint32_t)path, (uint32_t)stat);
9f000c5e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000c61:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000c64:	83 ec 04             	sub    esp,0x4
9f000c67:	51                   	push   ecx
9f000c68:	52                   	push   edx
9f000c69:	6a 0a                	push   0xa
9f000c6b:	89 c3                	mov    ebx,eax
9f000c6d:	e8 a1 07 00 00       	call   9f001413 <do_syscall2>
9f000c72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:101
}
9f000c75:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000c78:	c9                   	leave  
9f000c79:	c3                   	ret    

9f000c7a <stat>:
stat():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:104

VISIBLE int stat(char *path, fstat_t *stat)
{
9f000c7a:	f3 0f 1e fb          	endbr32 
9f000c7e:	55                   	push   ebp
9f000c7f:	89 e5                	mov    ebp,esp
9f000c81:	83 ec 08             	sub    esp,0x8
9f000c84:	e8 85 45 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000c89:	05 73 72 00 00       	add    eax,0x7273
/home/yogi/src/os/aproj/libChrisOS/src/file.c:105
    return statI(path, stat);
9f000c8e:	83 ec 08             	sub    esp,0x8
9f000c91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000c94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000c97:	e8 ad ff ff ff       	call   9f000c49 <statI>
9f000c9c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:106
}
9f000c9f:	c9                   	leave  
9f000ca0:	c3                   	ret    

9f000ca1 <resolvePath>:
resolvePath():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:109

VISIBLE int resolvePath(const char *inPath, char *outPath, bool usePathVariable)
{
9f000ca1:	f3 0f 1e fb          	endbr32 
9f000ca5:	55                   	push   ebp
9f000ca6:	89 e5                	mov    ebp,esp
9f000ca8:	53                   	push   ebx
9f000ca9:	83 ec 34             	sub    esp,0x34
9f000cac:	e8 61 45 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f000cb1:	81 c3 4b 72 00 00    	add    ebx,0x724b
9f000cb7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f000cba:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/src/os/aproj/libChrisOS/src/file.c:110
    char delim[2]=":";
9f000cbd:	66 c7 45 e6 3a 00    	mov    WORD PTR [ebp-0x1a],0x3a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:112
    char *token;
    int retVal=-1;
9f000cc3:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:115
    fstat_t fstat;
    
    if (!resolvePath_envPath)
9f000cca:	8d 83 38 00 00 00    	lea    eax,[ebx+0x38]
9f000cd0:	8b 00                	mov    eax,DWORD PTR [eax]
9f000cd2:	85 c0                	test   eax,eax
9f000cd4:	75 18                	jne    9f000cee <resolvePath+0x4d>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:116
        resolvePath_envPath=mallocI(1024);
9f000cd6:	83 ec 0c             	sub    esp,0xc
9f000cd9:	68 00 04 00 00       	push   0x400
9f000cde:	e8 78 17 00 00       	call   9f00245b <mallocI>
9f000ce3:	83 c4 10             	add    esp,0x10
9f000ce6:	8d 93 38 00 00 00    	lea    edx,[ebx+0x38]
9f000cec:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:117
    if (!resolvePath_cwd)
9f000cee:	8d 83 40 00 00 00    	lea    eax,[ebx+0x40]
9f000cf4:	8b 00                	mov    eax,DWORD PTR [eax]
9f000cf6:	85 c0                	test   eax,eax
9f000cf8:	75 18                	jne    9f000d12 <resolvePath+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:118
        resolvePath_cwd=mallocI(1024);
9f000cfa:	83 ec 0c             	sub    esp,0xc
9f000cfd:	68 00 04 00 00       	push   0x400
9f000d02:	e8 54 17 00 00       	call   9f00245b <mallocI>
9f000d07:	83 c4 10             	add    esp,0x10
9f000d0a:	8d 93 40 00 00 00    	lea    edx,[ebx+0x40]
9f000d10:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:119
    if (!resolvePath_inPath)
9f000d12:	8d 83 44 00 00 00    	lea    eax,[ebx+0x44]
9f000d18:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d1a:	85 c0                	test   eax,eax
9f000d1c:	75 18                	jne    9f000d36 <resolvePath+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:120
            resolvePath_inPath=mallocI(1024);
9f000d1e:	83 ec 0c             	sub    esp,0xc
9f000d21:	68 00 04 00 00       	push   0x400
9f000d26:	e8 30 17 00 00       	call   9f00245b <mallocI>
9f000d2b:	83 c4 10             	add    esp,0x10
9f000d2e:	8d 93 44 00 00 00    	lea    edx,[ebx+0x44]
9f000d34:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:121
    if (!resolvePath_resPath)
9f000d36:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000d3c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d3e:	85 c0                	test   eax,eax
9f000d40:	75 18                	jne    9f000d5a <resolvePath+0xb9>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:122
        resolvePath_resPath=mallocI(1024);
9f000d42:	83 ec 0c             	sub    esp,0xc
9f000d45:	68 00 04 00 00       	push   0x400
9f000d4a:	e8 0c 17 00 00       	call   9f00245b <mallocI>
9f000d4f:	83 c4 10             	add    esp,0x10
9f000d52:	8d 93 3c 00 00 00    	lea    edx,[ebx+0x3c]
9f000d58:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127

    //using the PATH variable, attempt to resolve the path to an executable when a path isn't given in the commandline
    
    //If there is a / character in the path, then don't attempt to resolve
    if (usePathVariable)
9f000d5a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
9f000d5e:	74 1d                	je     9f000d7d <resolvePath+0xdc>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:128
        getenvI("PATH",resolvePath_envPath);
9f000d60:	8d 83 38 00 00 00    	lea    eax,[ebx+0x38]
9f000d66:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d68:	83 ec 08             	sub    esp,0x8
9f000d6b:	50                   	push   eax
9f000d6c:	8d 83 d4 f6 ff ff    	lea    eax,[ebx-0x92c]
9f000d72:	50                   	push   eax
9f000d73:	e8 ca f8 ff ff       	call   9f000642 <getenvI>
9f000d78:	83 c4 10             	add    esp,0x10
9f000d7b:	eb 0b                	jmp    9f000d88 <resolvePath+0xe7>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:130
    else
        resolvePath_envPath[0]='\0';
9f000d7d:	8d 83 38 00 00 00    	lea    eax,[ebx+0x38]
9f000d83:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d85:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:132

    getcwdI(resolvePath_cwd,1024);
9f000d88:	8d 83 40 00 00 00    	lea    eax,[ebx+0x40]
9f000d8e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d90:	83 ec 08             	sub    esp,0x8
9f000d93:	68 00 04 00 00       	push   0x400
9f000d98:	50                   	push   eax
9f000d99:	e8 38 fb ff ff       	call   9f0008d6 <getcwdI>
9f000d9e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:134
    
    if (strstrI(inPath, "/"))
9f000da1:	83 ec 08             	sub    esp,0x8
9f000da4:	8d 83 d9 f6 ff ff    	lea    eax,[ebx-0x927]
9f000daa:	50                   	push   eax
9f000dab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000dae:	e8 c5 36 00 00       	call   9f004478 <strstrI>
9f000db3:	83 c4 10             	add    esp,0x10
9f000db6:	85 c0                	test   eax,eax
9f000db8:	74 53                	je     9f000e0d <resolvePath+0x16c>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:136
    {
        if (*inPath!='/')
9f000dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000dbd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000dc0:	3c 2f                	cmp    al,0x2f
9f000dc2:	74 2c                	je     9f000df0 <resolvePath+0x14f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:138
        {
            strcpyI(outPath,resolvePath_cwd);
9f000dc4:	8d 83 40 00 00 00    	lea    eax,[ebx+0x40]
9f000dca:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dcc:	83 ec 08             	sub    esp,0x8
9f000dcf:	50                   	push   eax
9f000dd0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000dd3:	e8 82 2d 00 00       	call   9f003b5a <strcpyI>
9f000dd8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:139
            strcatI(outPath,"/");
9f000ddb:	83 ec 08             	sub    esp,0x8
9f000dde:	8d 83 d9 f6 ff ff    	lea    eax,[ebx-0x927]
9f000de4:	50                   	push   eax
9f000de5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000de8:	e8 cb 2b 00 00       	call   9f0039b8 <strcatI>
9f000ded:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:141
        }
        strcatI(outPath,inPath);
9f000df0:	83 ec 08             	sub    esp,0x8
9f000df3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000df6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000df9:	e8 ba 2b 00 00       	call   9f0039b8 <strcatI>
9f000dfe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:142
        retVal=0;
9f000e01:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000e08:	e9 b1 01 00 00       	jmp    9f000fbe <resolvePath+0x31d>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:146
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
9f000e0d:	8d 83 44 00 00 00    	lea    eax,[ebx+0x44]
9f000e13:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e15:	83 ec 08             	sub    esp,0x8
9f000e18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000e1b:	50                   	push   eax
9f000e1c:	e8 39 2d 00 00       	call   9f003b5a <strcpyI>
9f000e21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:147
        if (resolvePath_envPath[0])
9f000e24:	8d 83 38 00 00 00    	lea    eax,[ebx+0x38]
9f000e2a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e2c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000e2f:	84 c0                	test   al,al
9f000e31:	74 20                	je     9f000e53 <resolvePath+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:148
            token=strtokI(resolvePath_envPath,delim);
9f000e33:	8d 83 38 00 00 00    	lea    eax,[ebx+0x38]
9f000e39:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e3b:	83 ec 08             	sub    esp,0x8
9f000e3e:	8d 55 e6             	lea    edx,[ebp-0x1a]
9f000e41:	52                   	push   edx
9f000e42:	50                   	push   eax
9f000e43:	e8 d6 f2 ff ff       	call   9f00011e <strtokI>
9f000e48:	83 c4 10             	add    esp,0x10
9f000e4b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f000e4e:	e9 c9 00 00 00       	jmp    9f000f1c <resolvePath+0x27b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:150
        else
            token=NULL;
9f000e53:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
        while (token!=NULL)
9f000e5a:	e9 bd 00 00 00       	jmp    9f000f1c <resolvePath+0x27b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:153
        {
            strcpyI(resolvePath_resPath,token);
9f000e5f:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000e65:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e67:	83 ec 08             	sub    esp,0x8
9f000e6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f000e6d:	50                   	push   eax
9f000e6e:	e8 e7 2c 00 00       	call   9f003b5a <strcpyI>
9f000e73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:154
            if (strcmpI(resolvePath_resPath,"/")!=0)
9f000e76:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000e7c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e7e:	83 ec 08             	sub    esp,0x8
9f000e81:	8d 93 d9 f6 ff ff    	lea    edx,[ebx-0x927]
9f000e87:	52                   	push   edx
9f000e88:	50                   	push   eax
9f000e89:	e8 05 2c 00 00       	call   9f003a93 <strcmpI>
9f000e8e:	83 c4 10             	add    esp,0x10
9f000e91:	85 c0                	test   eax,eax
9f000e93:	74 1b                	je     9f000eb0 <resolvePath+0x20f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:155
                strcatI(resolvePath_resPath,"/");
9f000e95:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000e9b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e9d:	83 ec 08             	sub    esp,0x8
9f000ea0:	8d 93 d9 f6 ff ff    	lea    edx,[ebx-0x927]
9f000ea6:	52                   	push   edx
9f000ea7:	50                   	push   eax
9f000ea8:	e8 0b 2b 00 00       	call   9f0039b8 <strcatI>
9f000ead:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:156
            strcatI(resolvePath_resPath,inPath);
9f000eb0:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000eb6:	8b 00                	mov    eax,DWORD PTR [eax]
9f000eb8:	83 ec 08             	sub    esp,0x8
9f000ebb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ebe:	50                   	push   eax
9f000ebf:	e8 f4 2a 00 00       	call   9f0039b8 <strcatI>
9f000ec4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:157
            int res=statI(resolvePath_resPath,&fstat);
9f000ec7:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000ecd:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ecf:	83 ec 08             	sub    esp,0x8
9f000ed2:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000ed5:	52                   	push   edx
9f000ed6:	50                   	push   eax
9f000ed7:	e8 6d fd ff ff       	call   9f000c49 <statI>
9f000edc:	83 c4 10             	add    esp,0x10
9f000edf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:158
            if (res==0)
9f000ee2:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f000ee6:	75 20                	jne    9f000f08 <resolvePath+0x267>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:160
            {
                strcpyI(outPath,resolvePath_resPath);
9f000ee8:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000eee:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ef0:	83 ec 08             	sub    esp,0x8
9f000ef3:	50                   	push   eax
9f000ef4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ef7:	e8 5e 2c 00 00       	call   9f003b5a <strcpyI>
9f000efc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:161
                retVal=0;
9f000eff:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:162
                break;
9f000f06:	eb 1e                	jmp    9f000f26 <resolvePath+0x285>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:164
            }
            token=strtokI(NULL,delim);
9f000f08:	83 ec 08             	sub    esp,0x8
9f000f0b:	8d 45 e6             	lea    eax,[ebp-0x1a]
9f000f0e:	50                   	push   eax
9f000f0f:	6a 00                	push   0x0
9f000f11:	e8 08 f2 ff ff       	call   9f00011e <strtokI>
9f000f16:	83 c4 10             	add    esp,0x10
9f000f19:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
        while (token!=NULL)
9f000f1c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000f20:	0f 85 39 ff ff ff    	jne    9f000e5f <resolvePath+0x1be>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:167
        }

        if (retVal==-1)
9f000f26:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
9f000f2a:	0f 85 8e 00 00 00    	jne    9f000fbe <resolvePath+0x31d>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:169
        {
            strcpyI(resolvePath_resPath,resolvePath_cwd);
9f000f30:	8d 83 40 00 00 00    	lea    eax,[ebx+0x40]
9f000f36:	8b 10                	mov    edx,DWORD PTR [eax]
9f000f38:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000f3e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f40:	83 ec 08             	sub    esp,0x8
9f000f43:	52                   	push   edx
9f000f44:	50                   	push   eax
9f000f45:	e8 10 2c 00 00       	call   9f003b5a <strcpyI>
9f000f4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:170
            strcatI(resolvePath_resPath,"/");
9f000f4d:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000f53:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f55:	83 ec 08             	sub    esp,0x8
9f000f58:	8d 93 d9 f6 ff ff    	lea    edx,[ebx-0x927]
9f000f5e:	52                   	push   edx
9f000f5f:	50                   	push   eax
9f000f60:	e8 53 2a 00 00       	call   9f0039b8 <strcatI>
9f000f65:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:171
            strcatI(resolvePath_resPath,inPath);
9f000f68:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000f6e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f70:	83 ec 08             	sub    esp,0x8
9f000f73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f76:	50                   	push   eax
9f000f77:	e8 3c 2a 00 00       	call   9f0039b8 <strcatI>
9f000f7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:172
            int res=statI(resolvePath_resPath,&fstat);
9f000f7f:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000f85:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f87:	83 ec 08             	sub    esp,0x8
9f000f8a:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000f8d:	52                   	push   edx
9f000f8e:	50                   	push   eax
9f000f8f:	e8 b5 fc ff ff       	call   9f000c49 <statI>
9f000f94:	83 c4 10             	add    esp,0x10
9f000f97:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:173
            if (res==0)
9f000f9a:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f000f9e:	75 1e                	jne    9f000fbe <resolvePath+0x31d>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:175
            {
                strcpyI(outPath,resolvePath_resPath);
9f000fa0:	8d 83 3c 00 00 00    	lea    eax,[ebx+0x3c]
9f000fa6:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fa8:	83 ec 08             	sub    esp,0x8
9f000fab:	50                   	push   eax
9f000fac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000faf:	e8 a6 2b 00 00       	call   9f003b5a <strcpyI>
9f000fb4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:176
                retVal=0;
9f000fb7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:181
            }
        }
    }
    
    return retVal;
9f000fbe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:182
}
9f000fc1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000fc4:	c9                   	leave  
9f000fc5:	c3                   	ret    

9f000fc6 <tellI>:
tellI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:185

long tellI(void *stream)
{
9f000fc6:	f3 0f 1e fb          	endbr32 
9f000fca:	55                   	push   ebp
9f000fcb:	89 e5                	mov    ebp,esp
9f000fcd:	53                   	push   ebx
9f000fce:	83 ec 04             	sub    esp,0x4
9f000fd1:	e8 38 42 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f000fd6:	05 26 6f 00 00       	add    eax,0x6f26
/home/yogi/src/os/aproj/libChrisOS/src/file.c:186
    return do_syscall1(SYSCALL_TELL,(uint32_t)stream);
9f000fdb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000fde:	83 ec 08             	sub    esp,0x8
9f000fe1:	52                   	push   edx
9f000fe2:	6a 0c                	push   0xc
9f000fe4:	89 c3                	mov    ebx,eax
9f000fe6:	e8 6a 04 00 00       	call   9f001455 <do_syscall1>
9f000feb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:187
}
9f000fee:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000ff1:	c9                   	leave  
9f000ff2:	c3                   	ret    

9f000ff3 <tell>:
tell():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:190

VISIBLE long tell(void *stream)
{
9f000ff3:	f3 0f 1e fb          	endbr32 
9f000ff7:	55                   	push   ebp
9f000ff8:	89 e5                	mov    ebp,esp
9f000ffa:	83 ec 08             	sub    esp,0x8
9f000ffd:	e8 0c 42 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001002:	05 fa 6e 00 00       	add    eax,0x6efa
/home/yogi/src/os/aproj/libChrisOS/src/file.c:191
    return tellI(stream);
9f001007:	83 ec 0c             	sub    esp,0xc
9f00100a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00100d:	e8 b4 ff ff ff       	call   9f000fc6 <tellI>
9f001012:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:192
}
9f001015:	c9                   	leave  
9f001016:	c3                   	ret    

9f001017 <getlineI>:
getlineI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:195

size_t getlineI(char **lineptr, size_t *n, void *stream)
{
9f001017:	f3 0f 1e fb          	endbr32 
9f00101b:	55                   	push   ebp
9f00101c:	89 e5                	mov    ebp,esp
9f00101e:	53                   	push   ebx
9f00101f:	83 ec 24             	sub    esp,0x24
9f001022:	e8 eb 41 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f001027:	81 c3 d5 6e 00 00    	add    ebx,0x6ed5
/home/yogi/src/os/aproj/libChrisOS/src/file.c:197
    char *buffer;
    int bytesReturned=0;
9f00102d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:198
    size_t bytesParsed=0;
9f001034:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:199
    char *crPtr=NULL;
9f00103b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:200
    char *lineToOutput=*lineptr;
9f001042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001045:	8b 00                	mov    eax,DWORD PTR [eax]
9f001047:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:201
    size_t lLinePtrLen=*n;
9f00104a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00104d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00104f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:202
    int startFilePos=tellI(stream);
9f001052:	83 ec 0c             	sub    esp,0xc
9f001055:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001058:	e8 69 ff ff ff       	call   9f000fc6 <tellI>
9f00105d:	83 c4 10             	add    esp,0x10
9f001060:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:203
    int retVal=-1;
9f001063:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:205
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
9f00106a:	83 ec 0c             	sub    esp,0xc
9f00106d:	68 00 04 00 00       	push   0x400
9f001072:	e8 e4 13 00 00       	call   9f00245b <mallocI>
9f001077:	83 c4 10             	add    esp,0x10
9f00107a:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:207
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f00107d:	e9 0a 01 00 00       	jmp    9f00118c <getlineI+0x175>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:209
    {
        if (crPtr==strstrI(buffer,"\n"))
9f001082:	83 ec 08             	sub    esp,0x8
9f001085:	8d 83 db f6 ff ff    	lea    eax,[ebx-0x925]
9f00108b:	50                   	push   eax
9f00108c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00108f:	e8 e4 33 00 00       	call   9f004478 <strstrI>
9f001094:	83 c4 10             	add    esp,0x10
9f001097:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
9f00109a:	0f 85 b7 00 00 00    	jne    9f001157 <getlineI+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:211
        { 
            if (crPtr-buffer+bytesParsed<*n)
9f0010a0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0010a3:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0010a6:	89 c2                	mov    edx,eax
9f0010a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0010ab:	01 c2                	add    edx,eax
9f0010ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0010b0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0010b2:	39 c2                	cmp    edx,eax
9f0010b4:	73 1b                	jae    9f0010d1 <getlineI+0xba>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:212
                strncatI(lineToOutput,buffer,crPtr-buffer);
9f0010b6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0010b9:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0010bc:	89 c2                	mov    edx,eax
9f0010be:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0010c1:	83 ec 04             	sub    esp,0x4
9f0010c4:	52                   	push   edx
9f0010c5:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0010c8:	50                   	push   eax
9f0010c9:	e8 2a 29 00 00       	call   9f0039f8 <strncatI>
9f0010ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:213
            if (bytesParsed+(crPtr-buffer)>*n)
9f0010d1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0010d4:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0010d7:	89 c2                	mov    edx,eax
9f0010d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0010dc:	01 c2                	add    edx,eax
9f0010de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0010e1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0010e3:	39 c2                	cmp    edx,eax
9f0010e5:	76 1d                	jbe    9f001104 <getlineI+0xed>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:214
                reallocI(lineToOutput,bytesParsed+(crPtr-buffer));
9f0010e7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0010ea:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0010ed:	89 c2                	mov    edx,eax
9f0010ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0010f2:	01 c2                	add    edx,eax
9f0010f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0010f7:	83 ec 08             	sub    esp,0x8
9f0010fa:	52                   	push   edx
9f0010fb:	50                   	push   eax
9f0010fc:	e8 42 16 00 00       	call   9f002743 <reallocI>
9f001101:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:215
            strncatI(lineToOutput,buffer,crPtr-buffer);
9f001104:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001107:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00110a:	89 c2                	mov    edx,eax
9f00110c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00110f:	83 ec 04             	sub    esp,0x4
9f001112:	52                   	push   edx
9f001113:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001116:	50                   	push   eax
9f001117:	e8 dc 28 00 00       	call   9f0039f8 <strncatI>
9f00111c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:216
            bytesParsed+=(crPtr-buffer);
9f00111f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001122:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f001125:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:217
            seekI(stream, startFilePos+bytesParsed,SEEK_SET);
9f001128:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f00112b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00112e:	01 d0                	add    eax,edx
9f001130:	83 ec 04             	sub    esp,0x4
9f001133:	6a 00                	push   0x0
9f001135:	50                   	push   eax
9f001136:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001139:	e8 af fa ff ff       	call   9f000bed <seekI>
9f00113e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:218
            *n=lLinePtrLen;
9f001141:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001144:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001147:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:219
            lineptr=&lineToOutput;
9f001149:	8d 45 d8             	lea    eax,[ebp-0x28]
9f00114c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:220
            retVal=bytesParsed;
9f00114f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001152:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:221
            goto getlineReturn;
9f001155:	eb 58                	jmp    9f0011af <getlineI+0x198>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:225
        }
        else
        {
            lLinePtrLen+=bytesReturned;
9f001157:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00115a:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:226
            bytesParsed+=bytesReturned;
9f00115d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001160:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:227
            reallocI(lineToOutput,lLinePtrLen);
9f001163:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001166:	83 ec 08             	sub    esp,0x8
9f001169:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00116c:	50                   	push   eax
9f00116d:	e8 d1 15 00 00       	call   9f002743 <reallocI>
9f001172:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:228
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
9f001175:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001178:	83 ec 04             	sub    esp,0x4
9f00117b:	68 00 04 00 00       	push   0x400
9f001180:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001183:	50                   	push   eax
9f001184:	e8 6f 28 00 00       	call   9f0039f8 <strncatI>
9f001189:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:207
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f00118c:	6a 01                	push   0x1
9f00118e:	68 00 04 00 00       	push   0x400
9f001193:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001196:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001199:	e8 89 f9 ff ff       	call   9f000b27 <readI>
9f00119e:	83 c4 10             	add    esp,0x10
9f0011a1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0011a4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f0011a8:	0f 8f d4 fe ff ff    	jg     9f001082 <getlineI+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:232
        }
    }

getlineReturn:    
9f0011ae:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/file.c:233
    freeI(buffer);
9f0011af:	83 ec 0c             	sub    esp,0xc
9f0011b2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0011b5:	e8 13 11 00 00       	call   9f0022cd <freeI>
9f0011ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:234
    return retVal;
9f0011bd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:235
}
9f0011c0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0011c3:	c9                   	leave  
9f0011c4:	c3                   	ret    

9f0011c5 <getline>:
getline():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:238

VISIBLE size_t getline(char **lineptr, size_t *n, void *stream)
{
9f0011c5:	f3 0f 1e fb          	endbr32 
9f0011c9:	55                   	push   ebp
9f0011ca:	89 e5                	mov    ebp,esp
9f0011cc:	83 ec 08             	sub    esp,0x8
9f0011cf:	e8 3a 40 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0011d4:	05 28 6d 00 00       	add    eax,0x6d28
/home/yogi/src/os/aproj/libChrisOS/src/file.c:239
    return getlineI(lineptr, n, stream);
9f0011d9:	83 ec 04             	sub    esp,0x4
9f0011dc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0011df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0011e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0011e5:	e8 2d fe ff ff       	call   9f001017 <getlineI>
9f0011ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:240
}
9f0011ed:	c9                   	leave  
9f0011ee:	c3                   	ret    

9f0011ef <unlink>:
unlink():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:243

VISIBLE int unlink(char *filename)
{
9f0011ef:	f3 0f 1e fb          	endbr32 
9f0011f3:	55                   	push   ebp
9f0011f4:	89 e5                	mov    ebp,esp
9f0011f6:	53                   	push   ebx
9f0011f7:	83 ec 04             	sub    esp,0x4
9f0011fa:	e8 0f 40 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0011ff:	05 fd 6c 00 00       	add    eax,0x6cfd
/home/yogi/src/os/aproj/libChrisOS/src/file.c:244
    return do_syscall1(SYSCALL_UNLINK,(uintptr_t)filename);
9f001204:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001207:	83 ec 08             	sub    esp,0x8
9f00120a:	52                   	push   edx
9f00120b:	6a 0d                	push   0xd
9f00120d:	89 c3                	mov    ebx,eax
9f00120f:	e8 41 02 00 00       	call   9f001455 <do_syscall1>
9f001214:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:245
9f001217:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00121a:	c9                   	leave  
9f00121b:	c3                   	ret    

9f00121c <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f00121c:	f3 0f 1e fb          	endbr32 
9f001220:	55                   	push   ebp
9f001221:	89 e5                	mov    ebp,esp
9f001223:	53                   	push   ebx
9f001224:	e8 e5 3f 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001229:	05 d3 6c 00 00       	add    eax,0x6cd3
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f00122e:	b8 05 00 00 00       	mov    eax,0x5
9f001233:	bb 01 00 00 00       	mov    ebx,0x1
9f001238:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00123b:	89 d1                	mov    ecx,edx
9f00123d:	e8 fc ff ff ff       	call   9f00123e <puts+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f001242:	90                   	nop
9f001243:	5b                   	pop    ebx
9f001244:	5d                   	pop    ebp
9f001245:	c3                   	ret    

9f001246 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f001246:	f3 0f 1e fb          	endbr32 
9f00124a:	55                   	push   ebp
9f00124b:	89 e5                	mov    ebp,esp
9f00124d:	53                   	push   ebx
9f00124e:	83 ec 14             	sub    esp,0x14
9f001251:	e8 b8 3f 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001256:	05 a6 6c 00 00       	add    eax,0x6ca6
9f00125b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00125e:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f001261:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f001267:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f00126b:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f00126e:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f001272:	b8 05 00 00 00       	mov    eax,0x5
9f001277:	bb 01 00 00 00       	mov    ebx,0x1
9f00127c:	8d 55 fa             	lea    edx,[ebp-0x6]
9f00127f:	89 d1                	mov    ecx,edx
9f001281:	e8 fc ff ff ff       	call   9f001282 <putc+0x3c>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f001286:	90                   	nop
9f001287:	83 c4 14             	add    esp,0x14
9f00128a:	5b                   	pop    ebx
9f00128b:	5d                   	pop    ebp
9f00128c:	c3                   	ret    

9f00128d <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f00128d:	f3 0f 1e fb          	endbr32 
9f001291:	55                   	push   ebp
9f001292:	89 e5                	mov    ebp,esp
9f001294:	53                   	push   ebx
9f001295:	83 ec 10             	sub    esp,0x10
9f001298:	e8 71 3f 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00129d:	05 5f 6c 00 00       	add    eax,0x6c5f
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f0012a2:	b8 04 00 00 00       	mov    eax,0x4
9f0012a7:	ba 00 00 00 00       	mov    edx,0x0
9f0012ac:	89 d3                	mov    ebx,edx
9f0012ae:	e8 fc ff ff ff       	call   9f0012af <getchar+0x22>
9f0012b3:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f0012b6:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f0012ba:	74 06                	je     9f0012c2 <getchar+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f0012bc:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f0012c0:	eb 0c                	jmp    9f0012ce <getchar+0x41>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f0012c2:	b8 02 03 00 00       	mov    eax,0x302
9f0012c7:	e8 fc ff ff ff       	call   9f0012c8 <getchar+0x3b>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
        READCHAR(c);
9f0012cc:	eb d4                	jmp    9f0012a2 <getchar+0x15>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    }
    return 0; //Should not get here
}
9f0012ce:	83 c4 10             	add    esp,0x10
9f0012d1:	5b                   	pop    ebx
9f0012d2:	5d                   	pop    ebp
9f0012d3:	c3                   	ret    

9f0012d4 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f0012d4:	f3 0f 1e fb          	endbr32 
9f0012d8:	55                   	push   ebp
9f0012d9:	89 e5                	mov    ebp,esp
9f0012db:	53                   	push   ebx
9f0012dc:	83 ec 14             	sub    esp,0x14
9f0012df:	e8 2a 3f 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0012e4:	05 18 6c 00 00       	add    eax,0x6c18
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f0012e9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    char lbuf[2];
    
    lbuf[0]=lbuf[1]=0;
9f0012f0:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
9f0012f4:	0f b6 55 f2          	movzx  edx,BYTE PTR [ebp-0xe]
9f0012f8:	88 55 f1             	mov    BYTE PTR [ebp-0xf],dl
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
    if (stream!=1)
9f0012fb:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f0012ff:	74 19                	je     9f00131a <gets+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
    {
        printI("Stream %u not implemented\n",stream);
9f001301:	83 ec 08             	sub    esp,0x8
9f001304:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001307:	8d 90 dd f6 ff ff    	lea    edx,[eax-0x923]
9f00130d:	52                   	push   edx
9f00130e:	89 c3                	mov    ebx,eax
9f001310:	e8 cb 03 00 00       	call   9f0016e0 <printI>
9f001315:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55 (discriminator 1)
        getsError: goto getsError;
9f001318:	eb fe                	jmp    9f001318 <gets+0x44>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f00131a:	b8 04 00 00 00       	mov    eax,0x4
9f00131f:	ba 00 00 00 00       	mov    edx,0x0
9f001324:	89 d3                	mov    ebx,edx
9f001326:	e8 fc ff ff ff       	call   9f001327 <gets+0x53>
9f00132b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
        if (inchar=='\b' && len>0)
9f00132e:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f001332:	75 17                	jne    9f00134b <gets+0x77>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61 (discriminator 1)
9f001334:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001338:	7e 11                	jle    9f00134b <gets+0x77>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
        {
            buffer[len]=0;
9f00133a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00133d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001340:	01 d0                	add    eax,edx
9f001342:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:64
            len--;
9f001345:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f001349:	eb 43                	jmp    9f00138e <gets+0xba>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:66
        }
        else if (inchar!=0)
9f00134b:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f00134f:	74 33                	je     9f001384 <gets+0xb0>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        {
            lbuf[0]=inchar;
9f001351:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f001355:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f001358:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00135b:	8d 50 01             	lea    edx,[eax+0x1]
9f00135e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001361:	89 c2                	mov    edx,eax
9f001363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001366:	01 c2                	add    edx,eax
9f001368:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f00136c:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f00136e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001371:	83 c0 01             	add    eax,0x1
9f001374:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
9f001377:	7e 06                	jle    9f00137f <gets+0xab>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72 (discriminator 1)
9f001379:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f00137d:	75 9b                	jne    9f00131a <gets+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:74
            
                return len;
9f00137f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001382:	eb 0c                	jmp    9f001390 <gets+0xbc>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:77
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001384:	b8 02 03 00 00       	mov    eax,0x302
9f001389:	e8 fc ff ff ff       	call   9f00138a <gets+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60 (discriminator 1)
        READCHAR(inchar)
9f00138e:	eb 8a                	jmp    9f00131a <gets+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:83
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
}
9f001390:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001393:	c9                   	leave  
9f001394:	c3                   	ret    

9f001395 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f001395:	f3 0f 1e fb          	endbr32 
9f001399:	55                   	push   ebp
9f00139a:	89 e5                	mov    ebp,esp
9f00139c:	56                   	push   esi
9f00139d:	53                   	push   ebx
9f00139e:	83 ec 10             	sub    esp,0x10
9f0013a1:	e8 68 3e 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0013a6:	05 56 6b 00 00       	add    eax,0x6b56
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f0013ab:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f0013b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0013b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0013b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0013bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0013be:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f0013c1:	e8 fc ff ff ff       	call   9f0013c2 <do_syscall4+0x2d>
9f0013c6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f0013c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f0013cc:	83 c4 10             	add    esp,0x10
9f0013cf:	5b                   	pop    ebx
9f0013d0:	5e                   	pop    esi
9f0013d1:	5d                   	pop    ebp
9f0013d2:	c3                   	ret    

9f0013d3 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f0013d3:	f3 0f 1e fb          	endbr32 
9f0013d7:	55                   	push   ebp
9f0013d8:	89 e5                	mov    ebp,esp
9f0013da:	56                   	push   esi
9f0013db:	53                   	push   ebx
9f0013dc:	83 ec 10             	sub    esp,0x10
9f0013df:	e8 2a 3e 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0013e4:	05 18 6b 00 00       	add    eax,0x6b18
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f0013e9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f0013f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0013f3:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0013f6:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0013f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0013fc:	be 00 00 00 00       	mov    esi,0x0
9f001401:	e8 fc ff ff ff       	call   9f001402 <do_syscall3+0x2f>
9f001406:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f001409:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f00140c:	83 c4 10             	add    esp,0x10
9f00140f:	5b                   	pop    ebx
9f001410:	5e                   	pop    esi
9f001411:	5d                   	pop    ebp
9f001412:	c3                   	ret    

9f001413 <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f001413:	f3 0f 1e fb          	endbr32 
9f001417:	55                   	push   ebp
9f001418:	89 e5                	mov    ebp,esp
9f00141a:	56                   	push   esi
9f00141b:	53                   	push   ebx
9f00141c:	83 ec 10             	sub    esp,0x10
9f00141f:	e8 ea 3d 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001424:	05 d8 6a 00 00       	add    eax,0x6ad8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f001429:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f001430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001433:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001436:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001439:	ba 00 00 00 00       	mov    edx,0x0
9f00143e:	be 00 00 00 00       	mov    esi,0x0
9f001443:	e8 fc ff ff ff       	call   9f001444 <do_syscall2+0x31>
9f001448:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f00144b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f00144e:	83 c4 10             	add    esp,0x10
9f001451:	5b                   	pop    ebx
9f001452:	5e                   	pop    esi
9f001453:	5d                   	pop    ebp
9f001454:	c3                   	ret    

9f001455 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f001455:	f3 0f 1e fb          	endbr32 
9f001459:	55                   	push   ebp
9f00145a:	89 e5                	mov    ebp,esp
9f00145c:	56                   	push   esi
9f00145d:	53                   	push   ebx
9f00145e:	83 ec 10             	sub    esp,0x10
9f001461:	e8 a8 3d 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001466:	05 96 6a 00 00       	add    eax,0x6a96
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f00146b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f001472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001475:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001478:	b9 00 00 00 00       	mov    ecx,0x0
9f00147d:	ba 00 00 00 00       	mov    edx,0x0
9f001482:	be 00 00 00 00       	mov    esi,0x0
9f001487:	e8 fc ff ff ff       	call   9f001488 <do_syscall1+0x33>
9f00148c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f00148f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f001492:	83 c4 10             	add    esp,0x10
9f001495:	5b                   	pop    ebx
9f001496:	5e                   	pop    esi
9f001497:	5d                   	pop    ebp
9f001498:	c3                   	ret    

9f001499 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f001499:	f3 0f 1e fb          	endbr32 
9f00149d:	55                   	push   ebp
9f00149e:	89 e5                	mov    ebp,esp
9f0014a0:	56                   	push   esi
9f0014a1:	53                   	push   ebx
9f0014a2:	83 ec 10             	sub    esp,0x10
9f0014a5:	e8 64 3d 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0014aa:	05 52 6a 00 00       	add    eax,0x6a52
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f0014af:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f0014b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0014b9:	bb 00 00 00 00       	mov    ebx,0x0
9f0014be:	b9 00 00 00 00       	mov    ecx,0x0
9f0014c3:	ba 00 00 00 00       	mov    edx,0x0
9f0014c8:	be 00 00 00 00       	mov    esi,0x0
9f0014cd:	e8 fc ff ff ff       	call   9f0014ce <do_syscall0+0x35>
9f0014d2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f0014d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f0014d8:	83 c4 10             	add    esp,0x10
9f0014db:	5b                   	pop    ebx
9f0014dc:	5e                   	pop    esi
9f0014dd:	5d                   	pop    ebp
9f0014de:	c3                   	ret    

9f0014df <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f0014df:	f3 0f 1e fb          	endbr32 
9f0014e3:	55                   	push   ebp
9f0014e4:	89 e5                	mov    ebp,esp
9f0014e6:	53                   	push   ebx
9f0014e7:	83 ec 04             	sub    esp,0x4
9f0014ea:	e8 23 3d 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0014ef:	81 c3 0d 6a 00 00    	add    ebx,0x6a0d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f0014f5:	83 ec 08             	sub    esp,0x8
9f0014f8:	8d 83 f8 f6 ff ff    	lea    eax,[ebx-0x908]
9f0014fe:	50                   	push   eax
9f0014ff:	68 00 00 00 02       	push   0x2000000
9f001504:	e8 4a 02 00 00       	call   9f001753 <printdI>
9f001509:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f00150c:	0f b6 83 48 00 00 00 	movzx  eax,BYTE PTR [ebx+0x48]
9f001513:	83 f0 01             	xor    eax,0x1
9f001516:	84 c0                	test   al,al
9f001518:	74 7a                	je     9f001594 <libc_init+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f00151a:	e8 bf 0c 00 00       	call   9f0021de <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        filesToCloseCount=0;
9f00151f:	8d 83 30 00 00 00    	lea    eax,[ebx+0x30]
9f001525:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
//        printfI("libc_init: filesToCloseCount=%u\n",filesToCloseCount);
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f00152b:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f00152e:	89 c2                	mov    edx,eax
9f001530:	8d 83 24 00 00 00    	lea    eax,[ebx+0x24]
9f001536:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        do_syscall0(SYSCALL_INVALID);
9f001538:	83 ec 0c             	sub    esp,0xc
9f00153b:	6a 00                	push   0x0
9f00153d:	e8 57 ff ff ff       	call   9f001499 <do_syscall0>
9f001542:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f001545:	8d 83 b0 96 ff ff    	lea    eax,[ebx-0x6950]
9f00154b:	83 ec 08             	sub    esp,0x8
9f00154e:	50                   	push   eax
9f00154f:	68 63 01 00 00       	push   0x163
9f001554:	e8 fc fe ff ff       	call   9f001455 <do_syscall1>
9f001559:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        libcInitialized = true;
9f00155c:	c6 83 48 00 00 00 01 	mov    BYTE PTR [ebx+0x48],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        printBuffer = mallocI(0x1000);
9f001563:	83 ec 0c             	sub    esp,0xc
9f001566:	68 00 10 00 00       	push   0x1000
9f00156b:	e8 eb 0e 00 00       	call   9f00245b <mallocI>
9f001570:	83 c4 10             	add    esp,0x10
9f001573:	8d 93 4c 00 00 00    	lea    edx,[ebx+0x4c]
9f001579:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f00157b:	83 ec 08             	sub    esp,0x8
9f00157e:	8d 83 10 f7 ff ff    	lea    eax,[ebx-0x8f0]
9f001584:	50                   	push   eax
9f001585:	68 00 00 00 02       	push   0x2000000
9f00158a:	e8 c4 01 00 00       	call   9f001753 <printdI>
9f00158f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f001592:	eb 12                	jmp    9f0015a6 <libc_init+0xc7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69
        printI("libc_init called previously, exiting\n");
9f001594:	83 ec 0c             	sub    esp,0xc
9f001597:	8d 83 28 f7 ff ff    	lea    eax,[ebx-0x8d8]
9f00159d:	50                   	push   eax
9f00159e:	e8 3d 01 00 00       	call   9f0016e0 <printI>
9f0015a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
}
9f0015a6:	90                   	nop
9f0015a7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0015aa:	c9                   	leave  
9f0015ab:	c3                   	ret    

9f0015ac <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73

void __attribute__((destructor)) libc_cleanup(void)
{
9f0015ac:	f3 0f 1e fb          	endbr32 
9f0015b0:	55                   	push   ebp
9f0015b1:	89 e5                	mov    ebp,esp
9f0015b3:	53                   	push   ebx
9f0015b4:	83 ec 04             	sub    esp,0x4
9f0015b7:	e8 56 3c 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0015bc:	81 c3 40 69 00 00    	add    ebx,0x6940
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74
    malloc_cleanup();
9f0015c2:	e8 ce 12 00 00       	call   9f002895 <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75
    file_cleanup();
9f0015c7:	e8 17 f4 ff ff       	call   9f0009e3 <file_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
}
9f0015cc:	90                   	nop
9f0015cd:	83 c4 04             	add    esp,0x4
9f0015d0:	5b                   	pop    ebx
9f0015d1:	5d                   	pop    ebp
9f0015d2:	c3                   	ret    

9f0015d3 <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79

VISIBLE int print(const char *format, ...)
{
9f0015d3:	f3 0f 1e fb          	endbr32 
9f0015d7:	55                   	push   ebp
9f0015d8:	89 e5                	mov    ebp,esp
9f0015da:	53                   	push   ebx
9f0015db:	83 ec 14             	sub    esp,0x14
9f0015de:	e8 2f 3c 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0015e3:	81 c3 19 69 00 00    	add    ebx,0x6919
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    va_list args;
    va_start( args, format );
9f0015e9:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0015ec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    
    int size = vsprintf(printBuffer, format, args);
9f0015ef:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0015f2:	8d 83 4c 00 00 00    	lea    eax,[ebx+0x4c]
9f0015f8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015fa:	83 ec 04             	sub    esp,0x4
9f0015fd:	52                   	push   edx
9f0015fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001601:	50                   	push   eax
9f001602:	e8 31 1e 00 00       	call   9f003438 <vsprintf>
9f001607:	83 c4 10             	add    esp,0x10
9f00160a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f00160d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001610:	8d 93 4c 00 00 00    	lea    edx,[ebx+0x4c]
9f001616:	8b 12                	mov    edx,DWORD PTR [edx]
9f001618:	50                   	push   eax
9f001619:	52                   	push   edx
9f00161a:	6a 01                	push   0x1
9f00161c:	6a 05                	push   0x5
9f00161e:	e8 b0 fd ff ff       	call   9f0013d3 <do_syscall3>
9f001623:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    return 0;
9f001626:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
}
9f00162b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00162e:	c9                   	leave  
9f00162f:	c3                   	ret    

9f001630 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89

VISIBLE int printf(const char *format, ...)
{
9f001630:	f3 0f 1e fb          	endbr32 
9f001634:	55                   	push   ebp
9f001635:	89 e5                	mov    ebp,esp
9f001637:	53                   	push   ebx
9f001638:	83 ec 14             	sub    esp,0x14
9f00163b:	e8 d2 3b 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f001640:	81 c3 bc 68 00 00    	add    ebx,0x68bc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    va_list args;
    va_start( args, format );
9f001646:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001649:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    
    int size = vsprintf(printBuffer, format, args);
9f00164c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00164f:	8d 83 4c 00 00 00    	lea    eax,[ebx+0x4c]
9f001655:	8b 00                	mov    eax,DWORD PTR [eax]
9f001657:	83 ec 04             	sub    esp,0x4
9f00165a:	52                   	push   edx
9f00165b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00165e:	50                   	push   eax
9f00165f:	e8 d4 1d 00 00       	call   9f003438 <vsprintf>
9f001664:	83 c4 10             	add    esp,0x10
9f001667:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    return do_syscall3(SYSCALL_WRITE, STDOUT_FILE, (uint32_t)printBuffer, size);
9f00166a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00166d:	8d 93 4c 00 00 00    	lea    edx,[ebx+0x4c]
9f001673:	8b 12                	mov    edx,DWORD PTR [edx]
9f001675:	50                   	push   eax
9f001676:	52                   	push   edx
9f001677:	6a 01                	push   0x1
9f001679:	6a 05                	push   0x5
9f00167b:	e8 53 fd ff ff       	call   9f0013d3 <do_syscall3>
9f001680:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
}
9f001683:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001686:	c9                   	leave  
9f001687:	c3                   	ret    

9f001688 <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98

int printfI(const char *format, ...)
{
9f001688:	f3 0f 1e fb          	endbr32 
9f00168c:	55                   	push   ebp
9f00168d:	89 e5                	mov    ebp,esp
9f00168f:	53                   	push   ebx
9f001690:	83 ec 14             	sub    esp,0x14
9f001693:	e8 7a 3b 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f001698:	81 c3 64 68 00 00    	add    ebx,0x6864
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    va_list args;
    va_start( args, format );
9f00169e:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0016a1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    
    int size = vsprintf(printBuffer, format, args);
9f0016a4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0016a7:	8d 83 4c 00 00 00    	lea    eax,[ebx+0x4c]
9f0016ad:	8b 00                	mov    eax,DWORD PTR [eax]
9f0016af:	83 ec 04             	sub    esp,0x4
9f0016b2:	52                   	push   edx
9f0016b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0016b6:	50                   	push   eax
9f0016b7:	e8 7c 1d 00 00       	call   9f003438 <vsprintf>
9f0016bc:	83 c4 10             	add    esp,0x10
9f0016bf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f0016c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0016c5:	8d 93 4c 00 00 00    	lea    edx,[ebx+0x4c]
9f0016cb:	8b 12                	mov    edx,DWORD PTR [edx]
9f0016cd:	50                   	push   eax
9f0016ce:	52                   	push   edx
9f0016cf:	6a 01                	push   0x1
9f0016d1:	6a 05                	push   0x5
9f0016d3:	e8 fb fc ff ff       	call   9f0013d3 <do_syscall3>
9f0016d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104
}
9f0016db:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0016de:	c9                   	leave  
9f0016df:	c3                   	ret    

9f0016e0 <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107

int printI(const char *format, ...)
{
9f0016e0:	f3 0f 1e fb          	endbr32 
9f0016e4:	55                   	push   ebp
9f0016e5:	89 e5                	mov    ebp,esp
9f0016e7:	83 ec 10             	sub    esp,0x10
9f0016ea:	e8 1f 3b 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0016ef:	05 0d 68 00 00       	add    eax,0x680d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    va_list args;
    va_start( args, format );
9f0016f4:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0016f7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f0016fa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0016fd:	89 c2                	mov    edx,eax
9f0016ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001702:	52                   	push   edx
9f001703:	50                   	push   eax
9f001704:	68 00 03 00 00       	push   0x300
9f001709:	e8 05 fd ff ff       	call   9f001413 <do_syscall2>
9f00170e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    return 0;
9f001711:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
}
9f001716:	c9                   	leave  
9f001717:	c3                   	ret    

9f001718 <printd>:
printd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115

VISIBLE int printd(uint32_t DebugLevel, const char *format, ...)
{
9f001718:	f3 0f 1e fb          	endbr32 
9f00171c:	55                   	push   ebp
9f00171d:	89 e5                	mov    ebp,esp
9f00171f:	83 ec 10             	sub    esp,0x10
9f001722:	e8 e7 3a 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001727:	05 d5 67 00 00       	add    eax,0x67d5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    va_list args;
    va_start( args, format );
9f00172c:	8d 45 10             	lea    eax,[ebp+0x10]
9f00172f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f001732:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001735:	89 c2                	mov    edx,eax
9f001737:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00173a:	52                   	push   edx
9f00173b:	50                   	push   eax
9f00173c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00173f:	68 01 03 00 00       	push   0x301
9f001744:	e8 8a fc ff ff       	call   9f0013d3 <do_syscall3>
9f001749:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    return 0;
9f00174c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
    va_end(args);
}
9f001751:	c9                   	leave  
9f001752:	c3                   	ret    

9f001753 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f001753:	f3 0f 1e fb          	endbr32 
9f001757:	55                   	push   ebp
9f001758:	89 e5                	mov    ebp,esp
9f00175a:	83 ec 10             	sub    esp,0x10
9f00175d:	e8 ac 3a 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001762:	05 9a 67 00 00       	add    eax,0x679a
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    va_list args;
    va_start( args, format );
9f001767:	8d 45 10             	lea    eax,[ebp+0x10]
9f00176a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f00176d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001770:	89 c2                	mov    edx,eax
9f001772:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001775:	52                   	push   edx
9f001776:	50                   	push   eax
9f001777:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00177a:	68 01 03 00 00       	push   0x301
9f00177f:	e8 4f fc ff ff       	call   9f0013d3 <do_syscall3>
9f001784:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
    return 0;
9f001787:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
    va_end(args);
}
9f00178c:	c9                   	leave  
9f00178d:	c3                   	ret    

9f00178e <sleepMS>:
sleepMS():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135

VISIBLE unsigned int sleepMS (unsigned int __ms)
{
9f00178e:	f3 0f 1e fb          	endbr32 
9f001792:	55                   	push   ebp
9f001793:	89 e5                	mov    ebp,esp
9f001795:	56                   	push   esi
9f001796:	53                   	push   ebx
9f001797:	83 ec 10             	sub    esp,0x10
9f00179a:	e8 6f 3a 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00179f:	05 5d 67 00 00       	add    eax,0x675d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
    int ms=__ms*MS_PER_TICK;
9f0017a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017a7:	69 c0 e8 03 00 00    	imul   eax,eax,0x3e8
9f0017ad:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0017b2:	f7 e2                	mul    edx
9f0017b4:	89 d0                	mov    eax,edx
9f0017b6:	c1 e8 05             	shr    eax,0x5
9f0017b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
    return SLEEP_TICKS(ms);
9f0017bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0017bf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0017c2:	b8 70 01 00 00       	mov    eax,0x170
9f0017c7:	bb 00 00 00 00       	mov    ebx,0x0
9f0017cc:	b9 00 00 00 00       	mov    ecx,0x0
9f0017d1:	ba 00 00 00 00       	mov    edx,0x0
9f0017d6:	be 00 00 00 00       	mov    esi,0x0
9f0017db:	e8 fc ff ff ff       	call   9f0017dc <sleepMS+0x4e>
9f0017e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0017e3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0017e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0017e9:	01 d0                	add    eax,edx
9f0017eb:	83 e8 01             	sub    eax,0x1
9f0017ee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0017f1:	b8 66 01 00 00       	mov    eax,0x166
9f0017f6:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
9f0017f9:	b9 00 00 00 00       	mov    ecx,0x0
9f0017fe:	ba 00 00 00 00       	mov    edx,0x0
9f001803:	be 00 00 00 00       	mov    esi,0x0
9f001808:	e8 fc ff ff ff       	call   9f001809 <sleepMS+0x7b>
9f00180d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001810:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138
}
9f001813:	83 c4 10             	add    esp,0x10
9f001816:	5b                   	pop    ebx
9f001817:	5e                   	pop    esi
9f001818:	5d                   	pop    ebp
9f001819:	c3                   	ret    

9f00181a <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f00181a:	f3 0f 1e fb          	endbr32 
9f00181e:	55                   	push   ebp
9f00181f:	89 e5                	mov    ebp,esp
9f001821:	56                   	push   esi
9f001822:	53                   	push   ebx
9f001823:	83 ec 10             	sub    esp,0x10
9f001826:	e8 e3 39 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00182b:	05 d1 66 00 00       	add    eax,0x66d1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    return SLEEP_SECONDS(__seconds);
9f001830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001833:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001836:	b8 70 01 00 00       	mov    eax,0x170
9f00183b:	bb 00 00 00 00       	mov    ebx,0x0
9f001840:	b9 00 00 00 00       	mov    ecx,0x0
9f001845:	ba 00 00 00 00       	mov    edx,0x0
9f00184a:	be 00 00 00 00       	mov    esi,0x0
9f00184f:	e8 fc ff ff ff       	call   9f001850 <sleep+0x36>
9f001854:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00185a:	6b d0 64             	imul   edx,eax,0x64
9f00185d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001860:	01 d0                	add    eax,edx
9f001862:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f001865:	b8 66 01 00 00       	mov    eax,0x166
9f00186a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f00186d:	b9 00 00 00 00       	mov    ecx,0x0
9f001872:	ba 00 00 00 00       	mov    edx,0x0
9f001877:	be 00 00 00 00       	mov    esi,0x0
9f00187c:	e8 fc ff ff ff       	call   9f00187d <sleep+0x63>
9f001881:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001884:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
}
9f001887:	83 c4 10             	add    esp,0x10
9f00188a:	5b                   	pop    ebx
9f00188b:	5e                   	pop    esi
9f00188c:	5d                   	pop    ebp
9f00188d:	c3                   	ret    

9f00188e <sleepTicks>:
sleepTicks():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

VISIBLE unsigned int sleepTicks(unsigned int __ticks)
{
9f00188e:	f3 0f 1e fb          	endbr32 
9f001892:	55                   	push   ebp
9f001893:	89 e5                	mov    ebp,esp
9f001895:	56                   	push   esi
9f001896:	53                   	push   ebx
9f001897:	83 ec 10             	sub    esp,0x10
9f00189a:	e8 6f 39 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00189f:	05 5d 66 00 00       	add    eax,0x665d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    return SLEEP_TICKS(__ticks);
9f0018a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0018a7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0018aa:	b8 70 01 00 00       	mov    eax,0x170
9f0018af:	bb 00 00 00 00       	mov    ebx,0x0
9f0018b4:	b9 00 00 00 00       	mov    ecx,0x0
9f0018b9:	ba 00 00 00 00       	mov    edx,0x0
9f0018be:	be 00 00 00 00       	mov    esi,0x0
9f0018c3:	e8 fc ff ff ff       	call   9f0018c4 <sleepTicks+0x36>
9f0018c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0018cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0018ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0018d1:	01 d0                	add    eax,edx
9f0018d3:	83 e8 01             	sub    eax,0x1
9f0018d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0018d9:	b8 66 01 00 00       	mov    eax,0x166
9f0018de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0018e1:	b9 00 00 00 00       	mov    ecx,0x0
9f0018e6:	ba 00 00 00 00       	mov    edx,0x0
9f0018eb:	be 00 00 00 00       	mov    esi,0x0
9f0018f0:	e8 fc ff ff ff       	call   9f0018f1 <sleepTicks+0x63>
9f0018f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0018f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    
}
9f0018fb:	83 c4 10             	add    esp,0x10
9f0018fe:	5b                   	pop    ebx
9f0018ff:	5e                   	pop    esi
9f001900:	5d                   	pop    ebp
9f001901:	c3                   	ret    

9f001902 <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152

void stop()
{
9f001902:	f3 0f 1e fb          	endbr32 
9f001906:	55                   	push   ebp
9f001907:	89 e5                	mov    ebp,esp
9f001909:	e8 00 39 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00190e:	05 ee 65 00 00       	add    eax,0x65ee
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153
    do_syscall0(SYSCALL_STOP);
9f001913:	68 68 01 00 00       	push   0x168
9f001918:	e8 7c fb ff ff       	call   9f001499 <do_syscall0>
9f00191d:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154
}
9f001920:	90                   	nop
9f001921:	c9                   	leave  
9f001922:	c3                   	ret    

9f001923 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f001923:	f3 0f 1e fb          	endbr32 
9f001927:	55                   	push   ebp
9f001928:	89 e5                	mov    ebp,esp
9f00192a:	e8 df 38 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00192f:	05 cd 65 00 00       	add    eax,0x65cd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:158
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f001934:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001937:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00193a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00193d:	51                   	push   ecx
9f00193e:	52                   	push   edx
9f00193f:	50                   	push   eax
9f001940:	68 67 01 00 00       	push   0x167
9f001945:	e8 89 fa ff ff       	call   9f0013d3 <do_syscall3>
9f00194a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
}
9f00194d:	90                   	nop
9f00194e:	c9                   	leave  
9f00194f:	c3                   	ret    

9f001950 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162

VISIBLE int fork()
{
9f001950:	f3 0f 1e fb          	endbr32 
9f001954:	55                   	push   ebp
9f001955:	89 e5                	mov    ebp,esp
9f001957:	83 ec 10             	sub    esp,0x10
9f00195a:	e8 af 38 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00195f:	05 9d 65 00 00       	add    eax,0x659d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163
    uint32_t retVal = 0;
9f001964:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:165
    //return do_syscall0(SYSCALL_FORK);
    return do_syscall0(SYSCALL_FORK);
9f00196b:	6a 0e                	push   0xe
9f00196d:	e8 27 fb ff ff       	call   9f001499 <do_syscall0>
9f001972:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    //asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
    return retVal;
}
9f001975:	c9                   	leave  
9f001976:	c3                   	ret    

9f001977 <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171

VISIBLE int exec(char* path, int argc, char** argv)
{
9f001977:	f3 0f 1e fb          	endbr32 
9f00197b:	55                   	push   ebp
9f00197c:	89 e5                	mov    ebp,esp
9f00197e:	83 ec 10             	sub    esp,0x10
9f001981:	e8 88 38 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001986:	05 76 65 00 00       	add    eax,0x6576
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172
    int pid=0;
9f00198b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f001992:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001995:	8d 80 4e f7 ff ff    	lea    eax,[eax-0x8b2]
9f00199b:	50                   	push   eax
9f00199c:	68 00 00 00 02       	push   0x2000000
9f0019a1:	e8 ad fd ff ff       	call   9f001753 <printdI>
9f0019a6:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:174
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f0019a9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0019ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0019af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019b2:	51                   	push   ecx
9f0019b3:	52                   	push   edx
9f0019b4:	50                   	push   eax
9f0019b5:	6a 59                	push   0x59
9f0019b7:	e8 17 fa ff ff       	call   9f0013d3 <do_syscall3>
9f0019bc:	83 c4 10             	add    esp,0x10
9f0019bf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
    return pid;
9f0019c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
}
9f0019c5:	c9                   	leave  
9f0019c6:	c3                   	ret    

9f0019c7 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179

VISIBLE int execb(char* path)
{
9f0019c7:	f3 0f 1e fb          	endbr32 
9f0019cb:	55                   	push   ebp
9f0019cc:	89 e5                	mov    ebp,esp
9f0019ce:	53                   	push   ebx
9f0019cf:	83 ec 24             	sub    esp,0x24
9f0019d2:	e8 3b 38 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0019d7:	81 c3 25 65 00 00    	add    ebx,0x6525
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
    int pid=0, argc=0;
9f0019dd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f0019e4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:182
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f0019eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0019f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019f4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184
    char* program;
    program=mallocI(512);
9f0019f7:	83 ec 0c             	sub    esp,0xc
9f0019fa:	68 00 02 00 00       	push   0x200
9f0019ff:	e8 57 0a 00 00       	call   9f00245b <mallocI>
9f001a04:	83 c4 10             	add    esp,0x10
9f001a07:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f001a0a:	83 ec 08             	sub    esp,0x8
9f001a0d:	8d 83 61 f7 ff ff    	lea    eax,[ebx-0x89f]
9f001a13:	50                   	push   eax
9f001a14:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001a17:	e8 5c 2a 00 00       	call   9f004478 <strstrI>
9f001a1c:	83 c4 10             	add    esp,0x10
9f001a1f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:188
        if (argc==0)
9f001a22:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001a26:	75 40                	jne    9f001a68 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
        {
            if (spacePtr==0)
9f001a28:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001a2c:	75 22                	jne    9f001a50 <execb+0x89>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:191
                strncpyI(program, path, strlenI(path));
9f001a2e:	83 ec 0c             	sub    esp,0xc
9f001a31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001a34:	e8 41 22 00 00       	call   9f003c7a <strlenI>
9f001a39:	83 c4 10             	add    esp,0x10
9f001a3c:	83 ec 04             	sub    esp,0x4
9f001a3f:	50                   	push   eax
9f001a40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001a43:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001a46:	e8 b7 23 00 00       	call   9f003e02 <strncpyI>
9f001a4b:	83 c4 10             	add    esp,0x10
9f001a4e:	eb 18                	jmp    9f001a68 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:193
            else
                strncpyI(program, path, spacePtr-path);
9f001a50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001a53:	2b 45 08             	sub    eax,DWORD PTR [ebp+0x8]
9f001a56:	83 ec 04             	sub    esp,0x4
9f001a59:	50                   	push   eax
9f001a5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001a5d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001a60:	e8 9d 23 00 00       	call   9f003e02 <strncpyI>
9f001a65:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
        }
        argc++;
9f001a68:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:197
            
    } while (spacePtr++);
9f001a6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001a6f:	8d 50 01             	lea    edx,[eax+0x1]
9f001a72:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001a75:	85 c0                	test   eax,eax
9f001a77:	75 91                	jne    9f001a0a <execb+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:199
    
    argv=mallocI((argc*50)+(argc*4));
9f001a79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001a7c:	6b c0 36             	imul   eax,eax,0x36
9f001a7f:	83 ec 0c             	sub    esp,0xc
9f001a82:	50                   	push   eax
9f001a83:	e8 d3 09 00 00       	call   9f00245b <mallocI>
9f001a88:	83 c4 10             	add    esp,0x10
9f001a8b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200
    int argvPtr=4*argc;
9f001a8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001a91:	c1 e0 02             	shl    eax,0x2
9f001a94:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201
    spacePtr=path;
9f001a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a9a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
    for (int cnt=0;cnt<argc; cnt++)
9f001a9d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f001aa4:	e9 c2 00 00 00       	jmp    9f001b6b <execb+0x1a4>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204
    {
        argv[cnt]=(char*)argv+argvPtr;
9f001aa9:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f001aac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001aaf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001ab6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001ab9:	01 d0                	add    eax,edx
9f001abb:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f001abe:	01 ca                	add    edx,ecx
9f001ac0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205
        spacePtr=strstrI(spacePtr," ");
9f001ac2:	83 ec 08             	sub    esp,0x8
9f001ac5:	8d 83 61 f7 ff ff    	lea    eax,[ebx-0x89f]
9f001acb:	50                   	push   eax
9f001acc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001acf:	e8 a4 29 00 00       	call   9f004478 <strstrI>
9f001ad4:	83 c4 10             	add    esp,0x10
9f001ad7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:206
        if (spacePtr)
9f001ada:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001ade:	74 2b                	je     9f001b0b <execb+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001ae0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001ae3:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
9f001ae6:	89 c1                	mov    ecx,eax
9f001ae8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001aeb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001af2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001af5:	01 d0                	add    eax,edx
9f001af7:	8b 00                	mov    eax,DWORD PTR [eax]
9f001af9:	83 ec 04             	sub    esp,0x4
9f001afc:	51                   	push   ecx
9f001afd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001b00:	50                   	push   eax
9f001b01:	e8 fc 22 00 00       	call   9f003e02 <strncpyI>
9f001b06:	83 c4 10             	add    esp,0x10
9f001b09:	eb 2f                	jmp    9f001b3a <execb+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:209
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001b0b:	83 ec 0c             	sub    esp,0xc
9f001b0e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001b11:	e8 64 21 00 00       	call   9f003c7a <strlenI>
9f001b16:	83 c4 10             	add    esp,0x10
9f001b19:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001b1c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
9f001b23:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f001b26:	01 ca                	add    edx,ecx
9f001b28:	8b 12                	mov    edx,DWORD PTR [edx]
9f001b2a:	83 ec 04             	sub    esp,0x4
9f001b2d:	50                   	push   eax
9f001b2e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001b31:	52                   	push   edx
9f001b32:	e8 cb 22 00 00       	call   9f003e02 <strncpyI>
9f001b37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:210 (discriminator 2)
        strtrimI(argv[cnt]);
9f001b3a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001b3d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001b44:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001b47:	01 d0                	add    eax,edx
9f001b49:	8b 00                	mov    eax,DWORD PTR [eax]
9f001b4b:	83 ec 0c             	sub    esp,0xc
9f001b4e:	50                   	push   eax
9f001b4f:	e8 86 26 00 00       	call   9f0041da <strtrimI>
9f001b54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:211 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f001b57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b5a:	8d 50 01             	lea    edx,[eax+0x1]
9f001b5d:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001b60:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:212 (discriminator 2)
        argvPtr+=50;
9f001b63:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202 (discriminator 2)
    for (int cnt=0;cnt<argc; cnt++)
9f001b67:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202 (discriminator 1)
9f001b6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001b6e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001b71:	0f 8c 32 ff ff ff    	jl     9f001aa9 <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:214
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f001b77:	83 ec 04             	sub    esp,0x4
9f001b7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b7d:	8d 83 63 f7 ff ff    	lea    eax,[ebx-0x89d]
9f001b83:	50                   	push   eax
9f001b84:	68 00 00 00 02       	push   0x2000000
9f001b89:	e8 c5 fb ff ff       	call   9f001753 <printdI>
9f001b8e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f001b91:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f001b94:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001b97:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001b9a:	51                   	push   ecx
9f001b9b:	52                   	push   edx
9f001b9c:	50                   	push   eax
9f001b9d:	68 05 03 00 00       	push   0x305
9f001ba2:	e8 2c f8 ff ff       	call   9f0013d3 <do_syscall3>
9f001ba7:	83 c4 10             	add    esp,0x10
9f001baa:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:219
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001bad:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
    freeI(argv);
    freeI(program);
}
9f001bb0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001bb3:	c9                   	leave  
9f001bb4:	c3                   	ret    

9f001bb5 <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:225

VISIBLE int execa(char* path, int argc, char** argv)
{
9f001bb5:	f3 0f 1e fb          	endbr32 
9f001bb9:	55                   	push   ebp
9f001bba:	89 e5                	mov    ebp,esp
9f001bbc:	83 ec 10             	sub    esp,0x10
9f001bbf:	e8 4a 36 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001bc4:	05 38 63 00 00       	add    eax,0x6338
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226
    int pid=0;
9f001bc9:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:227
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f001bd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001bd3:	8d 80 77 f7 ff ff    	lea    eax,[eax-0x889]
9f001bd9:	50                   	push   eax
9f001bda:	68 00 00 00 02       	push   0x2000000
9f001bdf:	e8 6f fb ff ff       	call   9f001753 <printdI>
9f001be4:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:228
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f001be7:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001bea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001bf0:	51                   	push   ecx
9f001bf1:	52                   	push   edx
9f001bf2:	50                   	push   eax
9f001bf3:	68 05 03 00 00       	push   0x305
9f001bf8:	e8 d6 f7 ff ff       	call   9f0013d3 <do_syscall3>
9f001bfd:	83 c4 10             	add    esp,0x10
9f001c00:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:229
    return pid;
9f001c03:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:230
}
9f001c06:	c9                   	leave  
9f001c07:	c3                   	ret    

9f001c08 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233

VISIBLE int waitpid(uint32_t pid)
{
9f001c08:	f3 0f 1e fb          	endbr32 
9f001c0c:	55                   	push   ebp
9f001c0d:	89 e5                	mov    ebp,esp
9f001c0f:	e8 fa 35 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001c14:	05 e8 62 00 00       	add    eax,0x62e8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f001c19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001c1c:	6a 61                	push   0x61
9f001c1e:	e8 32 f8 ff ff       	call   9f001455 <do_syscall1>
9f001c23:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:235
}
9f001c26:	c9                   	leave  
9f001c27:	c3                   	ret    

9f001c28 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:239


VISIBLE void exit (int status)
{
9f001c28:	f3 0f 1e fb          	endbr32 
9f001c2c:	55                   	push   ebp
9f001c2d:	89 e5                	mov    ebp,esp
9f001c2f:	e8 da 35 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001c34:	05 c8 62 00 00       	add    eax,0x62c8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:240
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f001c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001c3c:	50                   	push   eax
9f001c3d:	6a 00                	push   0x0
9f001c3f:	6a 01                	push   0x1
9f001c41:	e8 cd f7 ff ff       	call   9f001413 <do_syscall2>
9f001c46:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:241
}
9f001c49:	90                   	nop
9f001c4a:	c9                   	leave  
9f001c4b:	c3                   	ret    

9f001c4c <setcwd>:
setcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:244

VISIBLE char* setcwd(char* buf, size_t size)
{
9f001c4c:	f3 0f 1e fb          	endbr32 
9f001c50:	55                   	push   ebp
9f001c51:	89 e5                	mov    ebp,esp
9f001c53:	e8 b6 35 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001c58:	05 a4 62 00 00       	add    eax,0x62a4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
    return (char*)do_syscall2(SYSCALL_SETCWD,(uint32_t)buf,size);
9f001c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001c60:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001c63:	50                   	push   eax
9f001c64:	6a 50                	push   0x50
9f001c66:	e8 a8 f7 ff ff       	call   9f001413 <do_syscall2>
9f001c6b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
}
9f001c6e:	c9                   	leave  
9f001c6f:	c3                   	ret    

9f001c70 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:249

size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f001c70:	f3 0f 1e fb          	endbr32 
9f001c74:	55                   	push   ebp
9f001c75:	89 e5                	mov    ebp,esp
9f001c77:	83 ec 20             	sub    esp,0x20
9f001c7a:	e8 8f 35 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001c7f:	05 7d 62 00 00       	add    eax,0x627d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f001c84:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
    size_t argc = 0;
9f001c8b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001c95:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f001c98:	e9 e2 00 00 00       	jmp    9f001d7f <splitI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:256
        c = (unsigned char) *p;
9f001c9d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001ca0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001ca3:	0f b6 c0             	movzx  eax,al
9f001ca6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:257
        switch (state) {
9f001ca9:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
9f001cad:	74 5b                	je     9f001d0a <splitI+0x9a>
9f001caf:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
9f001cb3:	0f 87 c2 00 00 00    	ja     9f001d7b <splitI+0x10b>
9f001cb9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001cbd:	74 0b                	je     9f001cca <splitI+0x5a>
9f001cbf:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
9f001cc3:	74 74                	je     9f001d39 <splitI+0xc9>
9f001cc5:	e9 b1 00 00 00       	jmp    9f001d7b <splitI+0x10b>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259
        case DULL:
            if (ISSPACE(c)) {
9f001cca:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001cce:	0f 94 c0             	sete   al
9f001cd1:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f001cd4:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f001cd8:	84 c0                	test   al,al
9f001cda:	0f 85 94 00 00 00    	jne    9f001d74 <splitI+0x104>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
                continue;
            }

            if (c == '"') {
9f001ce0:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001ce4:	75 15                	jne    9f001cfb <splitI+0x8b>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:264
                state = IN_STRING;
9f001ce6:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:265
                start_of_word = p + 1; 
9f001ced:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001cf0:	83 c0 01             	add    eax,0x1
9f001cf3:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:266
                continue;
9f001cf6:	e9 80 00 00 00       	jmp    9f001d7b <splitI+0x10b>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
            }
            state = IN_WORD;
9f001cfb:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:269
            start_of_word = p;
9f001d02:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001d05:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:270
            continue;
9f001d08:	eb 71                	jmp    9f001d7b <splitI+0x10b>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:273

        case IN_STRING:
            if (c == '"') {
9f001d0a:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001d0e:	75 67                	jne    9f001d77 <splitI+0x107>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274
                *p = 0;
9f001d10:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001d13:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
                argv[argc++] = start_of_word;
9f001d16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001d19:	8d 50 01             	lea    edx,[eax+0x1]
9f001d1c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001d1f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001d26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d29:	01 c2                	add    edx,eax
9f001d2b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001d2e:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:276
                state = DULL;
9f001d30:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:278
            }
            continue;
9f001d37:	eb 3e                	jmp    9f001d77 <splitI+0x107>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:281

        case IN_WORD:
            if (ISSPACE(c)) {
9f001d39:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001d3d:	0f 94 c0             	sete   al
9f001d40:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f001d43:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f001d47:	84 c0                	test   al,al
9f001d49:	74 2f                	je     9f001d7a <splitI+0x10a>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:282
                *p = 0;
9f001d4b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001d4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
                argv[argc++] = start_of_word;
9f001d51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001d54:	8d 50 01             	lea    edx,[eax+0x1]
9f001d57:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001d5a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001d61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d64:	01 c2                	add    edx,eax
9f001d66:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001d69:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284
                state = DULL;
9f001d6b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286
            }
            continue;
9f001d72:	eb 06                	jmp    9f001d7a <splitI+0x10a>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260
                continue;
9f001d74:	90                   	nop
9f001d75:	eb 04                	jmp    9f001d7b <splitI+0x10b>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:278
            continue;
9f001d77:	90                   	nop
9f001d78:	eb 01                	jmp    9f001d7b <splitI+0x10b>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286
            continue;
9f001d7a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255 (discriminator 2)
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001d7b:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255 (discriminator 1)
9f001d7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001d82:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001d85:	73 0e                	jae    9f001d95 <splitI+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255 (discriminator 3)
9f001d87:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001d8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d8d:	84 c0                	test   al,al
9f001d8f:	0f 85 08 ff ff ff    	jne    9f001c9d <splitI+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290
        }
    }

    if (state != DULL && argc < argv_size)
9f001d95:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001d99:	74 22                	je     9f001dbd <splitI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290 (discriminator 1)
9f001d9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001d9e:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001da1:	73 1a                	jae    9f001dbd <splitI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
        argv[argc++] = start_of_word;
9f001da3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001da6:	8d 50 01             	lea    edx,[eax+0x1]
9f001da9:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001dac:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001db3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001db6:	01 c2                	add    edx,eax
9f001db8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001dbb:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:293

    return argc;
9f001dbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:294
}
9f001dc0:	c9                   	leave  
9f001dc1:	c3                   	ret    

9f001dc2 <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:297

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001dc2:	f3 0f 1e fb          	endbr32 
9f001dc6:	55                   	push   ebp
9f001dc7:	89 e5                	mov    ebp,esp
9f001dc9:	e8 40 34 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f001dce:	05 2e 61 00 00       	add    eax,0x612e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298
    return splitI(buffer, argv, argv_size);
9f001dd3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001dd6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001dd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ddc:	e8 8f fe ff ff       	call   9f001c70 <splitI>
9f001de1:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299
}
9f001de4:	c9                   	leave  
9f001de5:	c3                   	ret    

9f001de6 <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001de6:	f3 0f 1e fb          	endbr32 
9f001dea:	55                   	push   ebp
9f001deb:	89 e5                	mov    ebp,esp
9f001ded:	56                   	push   esi
9f001dee:	53                   	push   ebx
9f001def:	81 ec 30 04 00 00    	sub    esp,0x430
9f001df5:	e8 18 34 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f001dfa:	81 c3 02 61 00 00    	add    ebx,0x6102
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:305
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f001e00:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001e06:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001e09:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001e0f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001e12:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001e18:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:306
    char dblquote[2] = {'"',0};
9f001e1b:	66 c7 85 d6 fb ff ff 	mov    WORD PTR [ebp-0x42a],0x22
9f001e22:	22 00 
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:307
    *argc = 0;
9f001e24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:309
    
    strncpyI(cmd,cmdline,1024);
9f001e2d:	83 ec 04             	sub    esp,0x4
9f001e30:	68 00 04 00 00       	push   0x400
9f001e35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001e38:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001e3e:	50                   	push   eax
9f001e3f:	e8 be 1f 00 00       	call   9f003e02 <strncpyI>
9f001e44:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310
    strtrimI(cmd);
9f001e47:	83 ec 0c             	sub    esp,0xc
9f001e4a:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001e50:	50                   	push   eax
9f001e51:	e8 84 23 00 00       	call   9f0041da <strtrimI>
9f001e56:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:313
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f001e59:	83 ec 04             	sub    esp,0x4
9f001e5c:	68 a0 0f 00 00       	push   0xfa0
9f001e61:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001e67:	50                   	push   eax
9f001e68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001e6b:	e8 66 25 00 00       	call   9f0043d6 <strnstrI>
9f001e70:	83 c4 10             	add    esp,0x10
9f001e73:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314
        spacePtr=strstrI(spacePtr," ");
9f001e76:	83 ec 08             	sub    esp,0x8
9f001e79:	8d 83 61 f7 ff ff    	lea    eax,[ebx-0x89f]
9f001e7f:	50                   	push   eax
9f001e80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001e83:	e8 f0 25 00 00       	call   9f004478 <strstrI>
9f001e88:	83 c4 10             	add    esp,0x10
9f001e8b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f001e8e:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001e92:	74 48                	je     9f001edc <cmdlineToArgvI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315 (discriminator 1)
9f001e94:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001e97:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001e9a:	77 40                	ja     9f001edc <cmdlineToArgvI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:317
        {
            char *temp = spacePtr;
9f001e9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001e9f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f001ea2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001ea5:	8d 50 01             	lea    edx,[eax+0x1]
9f001ea8:	83 ec 04             	sub    esp,0x4
9f001eab:	68 a0 0f 00 00       	push   0xfa0
9f001eb0:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001eb6:	50                   	push   eax
9f001eb7:	52                   	push   edx
9f001eb8:	e8 19 25 00 00       	call   9f0043d6 <strnstrI>
9f001ebd:	83 c4 10             	add    esp,0x10
9f001ec0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
            if (spacePtr>=quotePtr+4000)
9f001ec3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001ec6:	05 a0 0f 00 00       	add    eax,0xfa0
9f001ecb:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
9f001ece:	72 08                	jb     9f001ed8 <cmdlineToArgvI+0xf2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:320
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001ed0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f001ed3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001ed6:	eb 04                	jmp    9f001edc <cmdlineToArgvI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:322
            else
                spacePtr += 1;                              //Skip the closing quote
9f001ed8:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:324
        }
        *argc+=1;
9f001edc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001edf:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ee1:	8d 50 01             	lea    edx,[eax+0x1]
9f001ee4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ee7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:325
        if (spacePtr!=0 && *spacePtr)
9f001ee9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001eed:	74 0e                	je     9f001efd <cmdlineToArgvI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:325 (discriminator 1)
9f001eef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001ef2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001ef5:	84 c0                	test   al,al
9f001ef7:	74 04                	je     9f001efd <cmdlineToArgvI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326
            spacePtr++;
9f001ef9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:328
    
    } while (spacePtr!=0 && *spacePtr);
9f001efd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001f01:	74 0e                	je     9f001f11 <cmdlineToArgvI+0x12b>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:328 (discriminator 1)
9f001f03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001f06:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001f09:	84 c0                	test   al,al
9f001f0b:	0f 85 48 ff ff ff    	jne    9f001e59 <cmdlineToArgvI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001f11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f14:	8b 10                	mov    edx,DWORD PTR [eax]
9f001f16:	89 d0                	mov    eax,edx
9f001f18:	c1 e0 08             	shl    eax,0x8
9f001f1b:	29 d0                	sub    eax,edx
9f001f1d:	89 c2                	mov    edx,eax
9f001f1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f22:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f24:	c1 e0 02             	shl    eax,0x2
9f001f27:	01 d0                	add    eax,edx
9f001f29:	83 ec 0c             	sub    esp,0xc
9f001f2c:	50                   	push   eax
9f001f2d:	e8 29 05 00 00       	call   9f00245b <mallocI>
9f001f32:	83 c4 10             	add    esp,0x10
9f001f35:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
    int argvPtr=4* *argc;
9f001f38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f3b:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f3d:	c1 e0 02             	shl    eax,0x2
9f001f40:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332
    spacePtr=cmd;
9f001f43:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001f49:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333
    for (int cnt=0;cnt<*argc; cnt++)
9f001f4c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f001f53:	e9 64 01 00 00       	jmp    9f0020bc <cmdlineToArgvI+0x2d6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335
    {
        argv[cnt]=(char*)argv+argvPtr;
9f001f58:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f001f5b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001f5e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001f65:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001f68:	01 d0                	add    eax,edx
9f001f6a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f001f6d:	01 ca                	add    edx,ecx
9f001f6f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:336
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f001f71:	83 ec 04             	sub    esp,0x4
9f001f74:	68 a0 0f 00 00       	push   0xfa0
9f001f79:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001f7f:	50                   	push   eax
9f001f80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001f83:	e8 4e 24 00 00       	call   9f0043d6 <strnstrI>
9f001f88:	83 c4 10             	add    esp,0x10
9f001f8b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:337
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f001f8e:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001f92:	74 7c                	je     9f002010 <cmdlineToArgvI+0x22a>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:337 (discriminator 1)
9f001f94:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f97:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001f9a:	77 74                	ja     9f002010 <cmdlineToArgvI+0x22a>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:339
        {
            char *temp = spacePtr;
9f001f9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001f9f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:340
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f001fa2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001fa5:	8d 50 01             	lea    edx,[eax+0x1]
9f001fa8:	83 ec 04             	sub    esp,0x4
9f001fab:	68 a0 0f 00 00       	push   0xfa0
9f001fb0:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001fb6:	50                   	push   eax
9f001fb7:	52                   	push   edx
9f001fb8:	e8 19 24 00 00       	call   9f0043d6 <strnstrI>
9f001fbd:	83 c4 10             	add    esp,0x10
9f001fc0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:341
            if (spacePtr>=quotePtr+4000)
9f001fc3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001fc6:	05 a0 0f 00 00       	add    eax,0xfa0
9f001fcb:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
9f001fce:	72 0b                	jb     9f001fdb <cmdlineToArgvI+0x1f5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:342
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f001fd0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001fd3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
        {
9f001fd6:	e9 ca 00 00 00       	jmp    9f0020a5 <cmdlineToArgvI+0x2bf>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:345
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f001fdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001fde:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f001fe1:	83 e8 02             	sub    eax,0x2
9f001fe4:	89 c6                	mov    esi,eax
9f001fe6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001fe9:	8d 50 01             	lea    edx,[eax+0x1]
9f001fec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001fef:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001ff6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001ff9:	01 c8                	add    eax,ecx
9f001ffb:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ffd:	83 ec 04             	sub    esp,0x4
9f002000:	56                   	push   esi
9f002001:	52                   	push   edx
9f002002:	50                   	push   eax
9f002003:	e8 fa 1d 00 00       	call   9f003e02 <strncpyI>
9f002008:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
        {
9f00200b:	e9 95 00 00 00       	jmp    9f0020a5 <cmdlineToArgvI+0x2bf>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:350
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f002010:	83 ec 08             	sub    esp,0x8
9f002013:	8d 83 61 f7 ff ff    	lea    eax,[ebx-0x89f]
9f002019:	50                   	push   eax
9f00201a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00201d:	e8 56 24 00 00       	call   9f004478 <strstrI>
9f002022:	83 c4 10             	add    esp,0x10
9f002025:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:351
            if (spacePtr)
9f002028:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f00202c:	74 2b                	je     9f002059 <cmdlineToArgvI+0x273>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:352
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f00202e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002031:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f002034:	89 c1                	mov    ecx,eax
9f002036:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002039:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f002040:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002043:	01 d0                	add    eax,edx
9f002045:	8b 00                	mov    eax,DWORD PTR [eax]
9f002047:	83 ec 04             	sub    esp,0x4
9f00204a:	51                   	push   ecx
9f00204b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00204e:	50                   	push   eax
9f00204f:	e8 ae 1d 00 00       	call   9f003e02 <strncpyI>
9f002054:	83 c4 10             	add    esp,0x10
9f002057:	eb 2f                	jmp    9f002088 <cmdlineToArgvI+0x2a2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:354
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f002059:	83 ec 0c             	sub    esp,0xc
9f00205c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00205f:	e8 16 1c 00 00       	call   9f003c7a <strlenI>
9f002064:	83 c4 10             	add    esp,0x10
9f002067:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f00206a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
9f002071:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f002074:	01 ca                	add    edx,ecx
9f002076:	8b 12                	mov    edx,DWORD PTR [edx]
9f002078:	83 ec 04             	sub    esp,0x4
9f00207b:	50                   	push   eax
9f00207c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00207f:	52                   	push   edx
9f002080:	e8 7d 1d 00 00       	call   9f003e02 <strncpyI>
9f002085:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:355
            strtrimI(argv[cnt]);
9f002088:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00208b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f002092:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002095:	01 d0                	add    eax,edx
9f002097:	8b 00                	mov    eax,DWORD PTR [eax]
9f002099:	83 ec 0c             	sub    esp,0xc
9f00209c:	50                   	push   eax
9f00209d:	e8 38 21 00 00       	call   9f0041da <strtrimI>
9f0020a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:357 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f0020a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0020a8:	8d 50 01             	lea    edx,[eax+0x1]
9f0020ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0020ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:358 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f0020b1:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333 (discriminator 2)
    for (int cnt=0;cnt<*argc; cnt++)
9f0020b8:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333 (discriminator 1)
9f0020bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0020bf:	8b 00                	mov    eax,DWORD PTR [eax]
9f0020c1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
9f0020c4:	0f 8c 8e fe ff ff    	jl     9f001f58 <cmdlineToArgvI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:360
    }
    return argv;
9f0020ca:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:361
}
9f0020cd:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0020d0:	5b                   	pop    ebx
9f0020d1:	5e                   	pop    esi
9f0020d2:	5d                   	pop    ebp
9f0020d3:	c3                   	ret    

9f0020d4 <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:364

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f0020d4:	f3 0f 1e fb          	endbr32 
9f0020d8:	55                   	push   ebp
9f0020d9:	89 e5                	mov    ebp,esp
9f0020db:	83 ec 08             	sub    esp,0x8
9f0020de:	e8 2b 31 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0020e3:	05 19 5e 00 00       	add    eax,0x5e19
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:365
    return cmdlineToArgvI(cmdline, argc);
9f0020e8:	83 ec 08             	sub    esp,0x8
9f0020eb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0020ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0020f1:	e8 f0 fc ff ff       	call   9f001de6 <cmdlineToArgvI>
9f0020f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:366
}
9f0020f9:	c9                   	leave  
9f0020fa:	c3                   	ret    

9f0020fb <setSTD>:
setSTD():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:369

VISIBLE int setSTD(int std, uint32_t filed)
{
9f0020fb:	f3 0f 1e fb          	endbr32 
9f0020ff:	55                   	push   ebp
9f002100:	89 e5                	mov    ebp,esp
9f002102:	e8 07 31 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002107:	05 f5 5d 00 00       	add    eax,0x5df5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:370
    return do_syscall2(SYSCALL_SETSTD, std, filed);
9f00210c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00210f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002112:	50                   	push   eax
9f002113:	68 06 03 00 00       	push   0x306
9f002118:	e8 f6 f2 ff ff       	call   9f001413 <do_syscall2>
9f00211d:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:371
}
9f002120:	c9                   	leave  
9f002121:	c3                   	ret    

9f002122 <takeADump>:
takeADump():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:374

VISIBLE void takeADump()
{
9f002122:	f3 0f 1e fb          	endbr32 
9f002126:	55                   	push   ebp
9f002127:	89 e5                	mov    ebp,esp
9f002129:	e8 e0 30 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00212e:	05 ce 5d 00 00       	add    eax,0x5dce
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:375
    do_syscall0(SYSCALL_TAKEADUMP);
9f002133:	68 00 09 00 00       	push   0x900
9f002138:	e8 5c f3 ff ff       	call   9f001499 <do_syscall0>
9f00213d:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:376
}
9f002140:	90                   	nop
9f002141:	c9                   	leave  
9f002142:	c3                   	ret    

9f002143 <setpriority>:
setpriority():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:379

VISIBLE int setpriority(int which, int who, int prio)
{
9f002143:	f3 0f 1e fb          	endbr32 
9f002147:	55                   	push   ebp
9f002148:	89 e5                	mov    ebp,esp
9f00214a:	e8 bf 30 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00214f:	05 ad 5d 00 00       	add    eax,0x5dad
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:380
    return do_syscall1(SYSCALL_SETPRIORITY,prio);
9f002154:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002157:	50                   	push   eax
9f002158:	68 97 00 00 00       	push   0x97
9f00215d:	e8 f3 f2 ff ff       	call   9f001455 <do_syscall1>
9f002162:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:381
9f002165:	c9                   	leave  
9f002166:	c3                   	ret    

9f002167 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f002167:	f3 0f 1e fb          	endbr32 
9f00216b:	55                   	push   ebp
9f00216c:	89 e5                	mov    ebp,esp
9f00216e:	53                   	push   ebx
9f00216f:	83 ec 04             	sub    esp,0x4
9f002172:	e8 97 30 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002177:	05 85 5d 00 00       	add    eax,0x5d85
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f00217c:	8d 90 50 00 00 00    	lea    edx,[eax+0x50]
9f002182:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002185:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f002187:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00218a:	8d 90 50 00 00 00    	lea    edx,[eax+0x50]
9f002190:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f002193:	8d 90 50 00 00 00    	lea    edx,[eax+0x50]
9f002199:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00219c:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f00219f:	8d 90 50 00 00 00    	lea    edx,[eax+0x50]
9f0021a5:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f0021a8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f0021ab:	8d 90 50 00 00 00    	lea    edx,[eax+0x50]
9f0021b1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f0021b4:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f0021b7:	8d 90 50 00 00 00    	lea    edx,[eax+0x50]
9f0021bd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f0021c0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f0021c3:	8d 90 50 00 00 00    	lea    edx,[eax+0x50]
9f0021c9:	83 ec 08             	sub    esp,0x8
9f0021cc:	52                   	push   edx
9f0021cd:	6a 11                	push   0x11
9f0021cf:	89 c3                	mov    ebx,eax
9f0021d1:	e8 7f f2 ff ff       	call   9f001455 <do_syscall1>
9f0021d6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f0021d9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0021dc:	c9                   	leave  
9f0021dd:	c3                   	ret    

9f0021de <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:22
VISIBLE uint32_t heapBase=0;
VISIBLE uint32_t heapCurr=0;
VISIBLE uint32_t heapEnd=0;

void initmalloc()
{
9f0021de:	f3 0f 1e fb          	endbr32 
9f0021e2:	55                   	push   ebp
9f0021e3:	89 e5                	mov    ebp,esp
9f0021e5:	53                   	push   ebx
9f0021e6:	83 ec 04             	sub    esp,0x4
9f0021e9:	e8 24 30 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0021ee:	81 c3 0e 5d 00 00    	add    ebx,0x5d0e
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f0021f4:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0021fa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0021fc:	50                   	push   eax
9f0021fd:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f002203:	50                   	push   eax
9f002204:	8d 83 8c f7 ff ff    	lea    eax,[ebx-0x874]
9f00220a:	50                   	push   eax
9f00220b:	68 00 00 00 01       	push   0x1000000
9f002210:	e8 3e f5 ff ff       	call   9f001753 <printdI>
9f002215:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24
    heapBase=0;
9f002218:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f00221e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:25
    heapCurr=0;
9f002224:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00222a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    heapEnd=0;
9f002230:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f002236:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28

}
9f00223c:	90                   	nop
9f00223d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002240:	c9                   	leave  
9f002241:	c3                   	ret    

9f002242 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f002242:	f3 0f 1e fb          	endbr32 
9f002246:	55                   	push   ebp
9f002247:	89 e5                	mov    ebp,esp
9f002249:	83 ec 10             	sub    esp,0x10
9f00224c:	e8 bd 2f 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002251:	05 ab 5c 00 00       	add    eax,0x5cab
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f002256:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002259:	83 c2 30             	add    edx,0x30
9f00225c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:36
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f00225f:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f002265:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f002267:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00226a:	01 d1                	add    ecx,edx
9f00226c:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
9f002272:	8b 12                	mov    edx,DWORD PTR [edx]
9f002274:	39 d1                	cmp    ecx,edx
9f002276:	76 4e                	jbe    9f0022c6 <newHeapRequiredToFulfillRequest+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:39
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f002278:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f00227e:	8b 12                	mov    edx,DWORD PTR [edx]
9f002280:	8b 80 f0 ff ff ff    	mov    eax,DWORD PTR [eax-0x10]
9f002286:	8b 00                	mov    eax,DWORD PTR [eax]
9f002288:	29 c2                	sub    edx,eax
9f00228a:	89 d0                	mov    eax,edx
9f00228c:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        if (newSize== 0 || newSize%PAGE_SIZE)
9f00228f:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f002293:	74 0c                	je     9f0022a1 <newHeapRequiredToFulfillRequest+0x5f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40 (discriminator 1)
9f002295:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002298:	25 ff 0f 00 00       	and    eax,0xfff
9f00229d:	85 c0                	test   eax,eax
9f00229f:	74 10                	je     9f0022b1 <newHeapRequiredToFulfillRequest+0x6f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:42
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f0022a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0022a4:	25 00 f0 ff ff       	and    eax,0xfffff000
9f0022a9:	05 00 10 00 00       	add    eax,0x1000
9f0022ae:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < MALLOC_MINIMUM_REQUEST_SIZE)
9f0022b1:	81 7d fc ff 0f 00 00 	cmp    DWORD PTR [ebp-0x4],0xfff
9f0022b8:	77 07                	ja     9f0022c1 <newHeapRequiredToFulfillRequest+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:46
            return MALLOC_MINIMUM_REQUEST_SIZE;
9f0022ba:	b8 00 10 00 00       	mov    eax,0x1000
9f0022bf:	eb 0a                	jmp    9f0022cb <newHeapRequiredToFulfillRequest+0x89>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:48
        else
            return newSize;
9f0022c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0022c4:	eb 05                	jmp    9f0022cb <newHeapRequiredToFulfillRequest+0x89>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
    }
    else
        return 0;
9f0022c6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
}
9f0022cb:	c9                   	leave  
9f0022cc:	c3                   	ret    

9f0022cd <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55

void freeI(void* fpointer)
{
9f0022cd:	f3 0f 1e fb          	endbr32 
9f0022d1:	55                   	push   ebp
9f0022d2:	89 e5                	mov    ebp,esp
9f0022d4:	53                   	push   ebx
9f0022d5:	83 ec 14             	sub    esp,0x14
9f0022d8:	e8 31 2f 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0022dd:	05 1f 5c 00 00       	add    eax,0x5c1f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
9f0022e2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0022e5:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
9f0022eb:	8b 12                	mov    edx,DWORD PTR [edx]
9f0022ed:	39 d1                	cmp    ecx,edx
9f0022ef:	72 4a                	jb     9f00233b <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58 (discriminator 1)
9f0022f1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0022f4:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f0022fa:	8b 12                	mov    edx,DWORD PTR [edx]
9f0022fc:	39 d1                	cmp    ecx,edx
9f0022fe:	77 3b                	ja     9f00233b <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
        return;
    
    if (fpointer==NULL)
9f002300:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f002304:	74 38                	je     9f00233e <freeI+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:63
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f002306:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002309:	83 ea 18             	sub    edx,0x18
9f00230c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:66
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=MALLOC_MARKER_VALUE)
9f00230f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002312:	8b 12                	mov    edx,DWORD PTR [edx]
9f002314:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f00231a:	74 16                	je     9f002332 <freeI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:68
    {
        printI("malloc: marker not found error!!!\n");
9f00231c:	83 ec 0c             	sub    esp,0xc
9f00231f:	8d 90 b0 f7 ff ff    	lea    edx,[eax-0x850]
9f002325:	52                   	push   edx
9f002326:	89 c3                	mov    ebx,eax
9f002328:	e8 b3 f3 ff ff       	call   9f0016e0 <printI>
9f00232d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:69
        return; //Return silently ... for now
9f002330:	eb 0d                	jmp    9f00233f <freeI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71
    }
    mp->inUse=false;
9f002332:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002335:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f002339:	eb 04                	jmp    9f00233f <freeI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
        return;
9f00233b:	90                   	nop
9f00233c:	eb 01                	jmp    9f00233f <freeI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f00233e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
#ifdef MALLOC_CLEAR_ON_FREE
    uint32_t bytesToClear=0, bytesCleared=0;
    memset(fpointer,mp->len,MALLOC_DEFAULT_CLEAR_VALUE1);
#endif
}
9f00233f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002342:	c9                   	leave  
9f002343:	c3                   	ret    

9f002344 <mallocFindAvailableMemory>:
mallocFindAvailableMemory():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79

heaprec_t *mallocFindAvailableMemory(size_t size)
{
9f002344:	f3 0f 1e fb          	endbr32 
9f002348:	55                   	push   ebp
9f002349:	89 e5                	mov    ebp,esp
9f00234b:	83 ec 10             	sub    esp,0x10
9f00234e:	e8 bb 2e 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002353:	05 a9 5b 00 00       	add    eax,0x5ba9
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
    heaprec_t* heapPtr=(heaprec_t*)heapBase;
9f002358:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
9f00235e:	8b 12                	mov    edx,DWORD PTR [edx]
9f002360:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
    do
    {
        if (!heapPtr->inUse && heapPtr->len>=size && heapPtr->marker==MALLOC_MARKER_VALUE)
9f002363:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002366:	0f b6 52 08          	movzx  edx,BYTE PTR [edx+0x8]
9f00236a:	83 f2 01             	xor    edx,0x1
9f00236d:	84 d2                	test   dl,dl
9f00236f:	74 1d                	je     9f00238e <mallocFindAvailableMemory+0x4a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83 (discriminator 1)
9f002371:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002374:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
9f002377:	39 55 08             	cmp    DWORD PTR [ebp+0x8],edx
9f00237a:	77 12                	ja     9f00238e <mallocFindAvailableMemory+0x4a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83 (discriminator 2)
9f00237c:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00237f:	8b 12                	mov    edx,DWORD PTR [edx]
9f002381:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002387:	75 05                	jne    9f00238e <mallocFindAvailableMemory+0x4a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
            return heapPtr;
9f002389:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00238c:	eb 3c                	jmp    9f0023ca <mallocFindAvailableMemory+0x86>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
        if (heapPtr->next)
9f00238e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002391:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f002394:	85 d2                	test   edx,edx
9f002396:	74 09                	je     9f0023a1 <mallocFindAvailableMemory+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            heapPtr=heapPtr->next;
9f002398:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00239b:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f00239e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        
    }
    while(heapPtr<(heaprec_t*)heapCurr && heapPtr->next && heapPtr->marker==MALLOC_MARKER_VALUE);
9f0023a1:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f0023a7:	8b 12                	mov    edx,DWORD PTR [edx]
9f0023a9:	39 55 fc             	cmp    DWORD PTR [ebp-0x4],edx
9f0023ac:	73 17                	jae    9f0023c5 <mallocFindAvailableMemory+0x81>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89 (discriminator 1)
9f0023ae:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0023b1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f0023b4:	85 d2                	test   edx,edx
9f0023b6:	74 0d                	je     9f0023c5 <mallocFindAvailableMemory+0x81>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89 (discriminator 2)
9f0023b8:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0023bb:	8b 12                	mov    edx,DWORD PTR [edx]
9f0023bd:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f0023c3:	74 9e                	je     9f002363 <mallocFindAvailableMemory+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    //while (heapPtr->marker==ALLOC_MARKER_VALUE);
    return NULL;
9f0023c5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
}
9f0023ca:	c9                   	leave  
9f0023cb:	c3                   	ret    

9f0023cc <mallocSanityCheck>:
mallocSanityCheck():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95

void mallocSanityCheck(heaprec_t *heaprec)
{
9f0023cc:	f3 0f 1e fb          	endbr32 
9f0023d0:	55                   	push   ebp
9f0023d1:	89 e5                	mov    ebp,esp
9f0023d3:	53                   	push   ebx
9f0023d4:	83 ec 14             	sub    esp,0x14
9f0023d7:	e8 32 2e 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0023dc:	05 20 5b 00 00       	add    eax,0x5b20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
#ifdef MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
9f0023e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0023e4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f0023e7:	eb 54                	jmp    9f00243d <mallocSanityCheck+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    {
        if (heapBase<(uintptr_t)heapPtr-8)
9f0023e9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0023ec:	8d 4a f8             	lea    ecx,[edx-0x8]
9f0023ef:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
9f0023f5:	8b 12                	mov    edx,DWORD PTR [edx]
9f0023f7:	39 d1                	cmp    ecx,edx
9f0023f9:	76 16                	jbe    9f002411 <mallocSanityCheck+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102
        {
                printfI("\n**************************malloc base error!!!**************************\n");
9f0023fb:	83 ec 0c             	sub    esp,0xc
9f0023fe:	8d 90 d4 f7 ff ff    	lea    edx,[eax-0x82c]
9f002404:	52                   	push   edx
9f002405:	89 c3                	mov    ebx,eax
9f002407:	e8 7c f2 ff ff       	call   9f001688 <printfI>
9f00240c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104 (discriminator 1)
    SanityLoop2:
                goto SanityLoop2;
9f00240f:	eb fe                	jmp    9f00240f <mallocSanityCheck+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
        }
        if (heapPtr->marker!=MALLOC_MARKER_VALUE)
9f002411:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002414:	8b 12                	mov    edx,DWORD PTR [edx]
9f002416:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f00241c:	74 16                	je     9f002434 <mallocSanityCheck+0x68>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:108
        {
            printfI("\n**************************malloc pointer error!!!**************************\n");
9f00241e:	83 ec 0c             	sub    esp,0xc
9f002421:	8d 90 20 f8 ff ff    	lea    edx,[eax-0x7e0]
9f002427:	52                   	push   edx
9f002428:	89 c3                	mov    ebx,eax
9f00242a:	e8 59 f2 ff ff       	call   9f001688 <printfI>
9f00242f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110 (discriminator 1)
SanityLoop:
            goto SanityLoop;
9f002432:	eb fe                	jmp    9f002432 <mallocSanityCheck+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112
        }
        heapPtr=heapPtr->prev;
9f002434:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002437:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f00243a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f00243d:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
9f002443:	8b 12                	mov    edx,DWORD PTR [edx]
9f002445:	39 55 f4             	cmp    DWORD PTR [ebp-0xc],edx
9f002448:	72 0b                	jb     9f002455 <mallocSanityCheck+0x89>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98 (discriminator 1)
9f00244a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00244d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f002450:	39 55 f4             	cmp    DWORD PTR [ebp-0xc],edx
9f002453:	75 94                	jne    9f0023e9 <mallocSanityCheck+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    }
#endif
}
9f002455:	90                   	nop
9f002456:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002459:	c9                   	leave  
9f00245a:	c3                   	ret    

9f00245b <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:118

void*  mallocI(size_t size)
{
9f00245b:	f3 0f 1e fb          	endbr32 
9f00245f:	55                   	push   ebp
9f002460:	89 e5                	mov    ebp,esp
9f002462:	53                   	push   ebx
9f002463:	83 ec 24             	sub    esp,0x24
9f002466:	e8 a7 2d 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f00246b:	81 c3 91 5a 00 00    	add    ebx,0x5a91
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:123
    void* retVal;

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr=NULL;
9f002471:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:124
    size_t requestSize=size;
9f002478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00247b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:127
    static heaprec_t *lastHRCreated=NULL;

    if (size<MALLOC_MIN_SIZE_TO_ALLOCATE)
9f00247e:	83 7d 08 17          	cmp    DWORD PTR [ebp+0x8],0x17
9f002482:	77 07                	ja     9f00248b <mallocI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:128
        requestSize=MALLOC_MIN_SIZE_TO_ALLOCATE;
9f002484:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:129
    printdI(DEBUG_MALLOC,"libc_malloc: Request for 0x%08x bytes\n",requestSize);
9f00248b:	83 ec 04             	sub    esp,0x4
9f00248e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002491:	8d 83 70 f8 ff ff    	lea    eax,[ebx-0x790]
9f002497:	50                   	push   eax
9f002498:	68 00 00 00 01       	push   0x1000000
9f00249d:	e8 b1 f2 ff ff       	call   9f001753 <printdI>
9f0024a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:130
    if (heapBase>0)
9f0024a5:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0024ab:	8b 00                	mov    eax,DWORD PTR [eax]
9f0024ad:	85 c0                	test   eax,eax
9f0024af:	74 71                	je     9f002522 <mallocI+0xc7>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:132
    {
        heapPtr=mallocFindAvailableMemory(requestSize);
9f0024b1:	83 ec 0c             	sub    esp,0xc
9f0024b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0024b7:	e8 88 fe ff ff       	call   9f002344 <mallocFindAvailableMemory>
9f0024bc:	83 c4 10             	add    esp,0x10
9f0024bf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:133
        if (heapPtr!=NULL)
9f0024c2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0024c6:	74 5a                	je     9f002522 <mallocI+0xc7>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:135
        {
            heapPtr->inUse=true;
9f0024c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024cb:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:136
            heapPtr->uses++;
9f0024cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024d2:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f0024d6:	8d 50 01             	lea    edx,[eax+0x1]
9f0024d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024dc:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:137
            printdI(DEBUG_MALLOC,"libc_malloc: Reusing heaprec=0x%08x, address=0x%08x (uses=%u)",heapPtr,HEAP_PTR_MEM_ADDR(heapPtr),heapPtr->uses);
9f0024e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024e3:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f0024e7:	0f b7 d0             	movzx  edx,ax
9f0024ea:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0024f0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0024f2:	83 c0 18             	add    eax,0x18
9f0024f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0024f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0024fb:	83 ec 0c             	sub    esp,0xc
9f0024fe:	52                   	push   edx
9f0024ff:	50                   	push   eax
9f002500:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002503:	8d 83 98 f8 ff ff    	lea    eax,[ebx-0x768]
9f002509:	50                   	push   eax
9f00250a:	68 00 00 00 01       	push   0x1000000
9f00250f:	e8 3f f2 ff ff       	call   9f001753 <printdI>
9f002514:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:138
            return ((void*)heapPtr)+sizeof(heaprec_t);
9f002517:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00251a:	83 c0 18             	add    eax,0x18
9f00251d:	e9 f8 01 00 00       	jmp    9f00271a <mallocI+0x2bf>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:142
        }
    }
    
    needed = newHeapRequiredToFulfillRequest(requestSize);
9f002522:	83 ec 0c             	sub    esp,0xc
9f002525:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002528:	e8 15 fd ff ff       	call   9f002242 <newHeapRequiredToFulfillRequest>
9f00252d:	83 c4 10             	add    esp,0x10
9f002530:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:143
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f002533:	83 ec 04             	sub    esp,0x4
9f002536:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f002539:	8d 83 d6 f8 ff ff    	lea    eax,[ebx-0x72a]
9f00253f:	50                   	push   eax
9f002540:	68 00 00 00 01       	push   0x1000000
9f002545:	e8 09 f2 ff ff       	call   9f001753 <printdI>
9f00254a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:144
    if (needed!=0)      //New heap required
9f00254d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f002551:	0f 84 e5 00 00 00    	je     9f00263c <mallocI+0x1e1>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:146
    {
        if (heapCurr>0)
9f002557:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00255d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00255f:	85 c0                	test   eax,eax
9f002561:	74 17                	je     9f00257a <mallocI+0x11f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:147
            mallocSanityCheck(((heaprec_t*)heapCurr)->prev);        
9f002563:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f002569:	8b 00                	mov    eax,DWORD PTR [eax]
9f00256b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00256e:	83 ec 0c             	sub    esp,0xc
9f002571:	50                   	push   eax
9f002572:	e8 55 fe ff ff       	call   9f0023cc <mallocSanityCheck>
9f002577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:148
        allocatedPtr = do_syscall1(SYSCALL_ALLOCHEAP, needed);
9f00257a:	83 ec 08             	sub    esp,0x8
9f00257d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f002580:	68 65 01 00 00       	push   0x165
9f002585:	e8 cb ee ff ff       	call   9f001455 <do_syscall1>
9f00258a:	83 c4 10             	add    esp,0x10
9f00258d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:150
        //This is needed to keep in sync with what the kernel thinks
        memsetI((char*)allocatedPtr,0,needed);
9f002590:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002593:	83 ec 04             	sub    esp,0x4
9f002596:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f002599:	6a 00                	push   0x0
9f00259b:	50                   	push   eax
9f00259c:	e8 ed 04 00 00       	call   9f002a8e <memsetI>
9f0025a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:151
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f0025a4:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f0025aa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0025ac:	83 ec 04             	sub    esp,0x4
9f0025af:	50                   	push   eax
9f0025b0:	8d 83 f2 f8 ff ff    	lea    eax,[ebx-0x70e]
9f0025b6:	50                   	push   eax
9f0025b7:	68 00 00 00 01       	push   0x1000000
9f0025bc:	e8 92 f1 ff ff       	call   9f001753 <printdI>
9f0025c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:152
        heapEnd=allocatedPtr+needed;
9f0025c4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0025c7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0025ca:	01 c2                	add    edx,eax
9f0025cc:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f0025d2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:153
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f0025d4:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f0025da:	8b 00                	mov    eax,DWORD PTR [eax]
9f0025dc:	83 ec 0c             	sub    esp,0xc
9f0025df:	50                   	push   eax
9f0025e0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f0025e3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0025e6:	8d 83 10 f9 ff ff    	lea    eax,[ebx-0x6f0]
9f0025ec:	50                   	push   eax
9f0025ed:	68 00 00 00 01       	push   0x1000000
9f0025f2:	e8 5c f1 ff ff       	call   9f001753 <printdI>
9f0025f7:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:154
        if (heapBase==0)    //Hasn't been initialized yet!
9f0025fa:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f002600:	8b 00                	mov    eax,DWORD PTR [eax]
9f002602:	85 c0                	test   eax,eax
9f002604:	75 36                	jne    9f00263c <mallocI+0x1e1>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:156
        {
            heapCurr=allocatedPtr;
9f002606:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00260c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00260f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:157
            heapBase=allocatedPtr;
9f002611:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f002617:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00261a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:158
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f00261c:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f002622:	8b 00                	mov    eax,DWORD PTR [eax]
9f002624:	83 ec 04             	sub    esp,0x4
9f002627:	50                   	push   eax
9f002628:	8d 83 50 f9 ff ff    	lea    eax,[ebx-0x6b0]
9f00262e:	50                   	push   eax
9f00262f:	68 00 00 00 01       	push   0x1000000
9f002634:	e8 1a f1 ff ff       	call   9f001753 <printdI>
9f002639:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:161
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f00263c:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f002642:	8b 00                	mov    eax,DWORD PTR [eax]
9f002644:	83 ec 04             	sub    esp,0x4
9f002647:	50                   	push   eax
9f002648:	8d 83 8c f9 ff ff    	lea    eax,[ebx-0x674]
9f00264e:	50                   	push   eax
9f00264f:	68 00 00 00 01       	push   0x1000000
9f002654:	e8 fa f0 ff ff       	call   9f001753 <printdI>
9f002659:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:162
    heapPtr = (heaprec_t*)heapCurr;
9f00265c:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f002662:	8b 00                	mov    eax,DWORD PTR [eax]
9f002664:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:163
    heapPtr->marker=MALLOC_MARKER_VALUE;
9f002667:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00266a:	c7 00 1f 2f 3f 4f    	mov    DWORD PTR [eax],0x4f3f2f1f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:164
    heapPtr->len=requestSize;
9f002670:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002673:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002676:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:165
    heapPtr->inUse=true;
9f002679:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00267c:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:166
    heapPtr->uses++;
9f002680:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002683:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f002687:	8d 50 01             	lea    edx,[eax+0x1]
9f00268a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00268d:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:167
    if (lastHRCreated!=NULL)
9f002691:	8b 83 74 00 00 00    	mov    eax,DWORD PTR [ebx+0x74]
9f002697:	85 c0                	test   eax,eax
9f002699:	74 18                	je     9f0026b3 <mallocI+0x258>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:169
    {
        heapPtr->prev=lastHRCreated;
9f00269b:	8b 93 74 00 00 00    	mov    edx,DWORD PTR [ebx+0x74]
9f0026a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0026a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:170
        heapPtr->prev->next=heapPtr;
9f0026a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0026aa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0026ad:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0026b0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:173
    }

    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08x\n",heapCurr);
9f0026b3:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0026b9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0026bb:	83 ec 04             	sub    esp,0x4
9f0026be:	50                   	push   eax
9f0026bf:	8d 83 b4 f9 ff ff    	lea    eax,[ebx-0x64c]
9f0026c5:	50                   	push   eax
9f0026c6:	68 00 00 00 01       	push   0x1000000
9f0026cb:	e8 83 f0 ff ff       	call   9f001753 <printdI>
9f0026d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:174
    retVal=((void*)(heapPtr)+sizeof(heaprec_t));
9f0026d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0026d6:	83 c0 18             	add    eax,0x18
9f0026d9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:175
    heapCurr+=requestSize+(sizeof(heaprec_t));
9f0026dc:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0026e2:	8b 10                	mov    edx,DWORD PTR [eax]
9f0026e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0026e7:	01 d0                	add    eax,edx
9f0026e9:	8d 50 18             	lea    edx,[eax+0x18]
9f0026ec:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0026f2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:176
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f0026f4:	83 ec 04             	sub    esp,0x4
9f0026f7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f0026fa:	8d 83 d2 f9 ff ff    	lea    eax,[ebx-0x62e]
9f002700:	50                   	push   eax
9f002701:	68 00 00 00 01       	push   0x1000000
9f002706:	e8 48 f0 ff ff       	call   9f001753 <printdI>
9f00270b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:177
    lastHRCreated=heapPtr;
9f00270e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002711:	89 83 74 00 00 00    	mov    DWORD PTR [ebx+0x74],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:178
    return retVal;
9f002717:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:179
}
9f00271a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00271d:	c9                   	leave  
9f00271e:	c3                   	ret    

9f00271f <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:182

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f00271f:	f3 0f 1e fb          	endbr32 
9f002723:	55                   	push   ebp
9f002724:	89 e5                	mov    ebp,esp
9f002726:	83 ec 08             	sub    esp,0x8
9f002729:	e8 e0 2a 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00272e:	05 ce 57 00 00       	add    eax,0x57ce
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:183
    return mallocI(size);
9f002733:	83 ec 0c             	sub    esp,0xc
9f002736:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002739:	e8 1d fd ff ff       	call   9f00245b <mallocI>
9f00273e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:184
}
9f002741:	c9                   	leave  
9f002742:	c3                   	ret    

9f002743 <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:187

void* reallocI(void *foldptr, uint32_t newlen)
{
9f002743:	f3 0f 1e fb          	endbr32 
9f002747:	55                   	push   ebp
9f002748:	89 e5                	mov    ebp,esp
9f00274a:	53                   	push   ebx
9f00274b:	83 ec 14             	sub    esp,0x14
9f00274e:	e8 bf 2a 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f002753:	81 c3 a9 57 00 00    	add    ebx,0x57a9
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:189
    
    printdI(DEBUG_MALLOC,"libc_realloc: called for old pointer 0x%08x, new size=0x%08x",foldptr,newlen);
9f002759:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00275c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00275f:	8d 83 ec f9 ff ff    	lea    eax,[ebx-0x614]
9f002765:	50                   	push   eax
9f002766:	68 00 00 00 01       	push   0x1000000
9f00276b:	e8 e3 ef ff ff       	call   9f001753 <printdI>
9f002770:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:192

    //Get old heap pointer
    uint32_t realSize=newlen;
9f002773:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002776:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:194
    heaprec_t* mp;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f002779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00277c:	83 e8 18             	sub    eax,0x18
9f00277f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:196

    if (newlen==0)
9f002782:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002786:	75 17                	jne    9f00279f <reallocI+0x5c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:197
        printdI(DEBUG_MALLOC,"libc_relloc: Request for 0 bytes, cannot fulfill\n");
9f002788:	83 ec 08             	sub    esp,0x8
9f00278b:	8d 83 2c fa ff ff    	lea    eax,[ebx-0x5d4]
9f002791:	50                   	push   eax
9f002792:	68 00 00 00 01       	push   0x1000000
9f002797:	e8 b7 ef ff ff       	call   9f001753 <printdI>
9f00279c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198
    if (newlen==0 || newlen<=mp->len)
9f00279f:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0027a3:	74 0b                	je     9f0027b0 <reallocI+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198 (discriminator 1)
9f0027a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0027a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0027ab:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
9f0027ae:	77 08                	ja     9f0027b8 <reallocI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:199
        return foldptr;
9f0027b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027b3:	e9 8c 00 00 00       	jmp    9f002844 <reallocI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:201

    if (newlen<MALLOC_MIN_SIZE_TO_ALLOCATE)
9f0027b8:	83 7d 0c 17          	cmp    DWORD PTR [ebp+0xc],0x17
9f0027bc:	77 07                	ja     9f0027c5 <reallocI+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:202
        realSize=MALLOC_MIN_SIZE_TO_ALLOCATE;
9f0027be:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:205
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(realSize);
9f0027c5:	83 ec 0c             	sub    esp,0xc
9f0027c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0027cb:	e8 8b fc ff ff       	call   9f00245b <mallocI>
9f0027d0:	83 c4 10             	add    esp,0x10
9f0027d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:206
    printdI(DEBUG_MALLOC,"\tlibc_realloc: received new malloc pointer 0x%08x, old size=0x%08x, new size=0x%08x\n",fnewptr, mp->len, realSize);
9f0027d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0027d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0027dc:	83 ec 0c             	sub    esp,0xc
9f0027df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0027e2:	50                   	push   eax
9f0027e3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0027e6:	8d 83 60 fa ff ff    	lea    eax,[ebx-0x5a0]
9f0027ec:	50                   	push   eax
9f0027ed:	68 00 00 00 01       	push   0x1000000
9f0027f2:	e8 5c ef ff ff       	call   9f001753 <printdI>
9f0027f7:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:211
   
    //Copy from old pointer to new memory using the old pointer's length
//    if (newlen>mp->len)
//        memsetI(fnewptr+mp->len,0,newlen-mp->len);
    memcpyI(fnewptr, foldptr, mp->len>realSize?realSize:mp->len);
9f0027fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0027fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002800:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
9f002803:	0f 46 45 f4          	cmovbe eax,DWORD PTR [ebp-0xc]
9f002807:	83 ec 04             	sub    esp,0x4
9f00280a:	50                   	push   eax
9f00280b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00280e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002811:	e8 b5 00 00 00       	call   9f0028cb <memcpyI>
9f002816:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:212
    printdI(DEBUG_MALLOC,"\tlibc_realloc: updated new pointer 0x%08x with old pointer data and cleared out remaing if applicable\n",fnewptr);
9f002819:	83 ec 04             	sub    esp,0x4
9f00281c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00281f:	8d 83 b8 fa ff ff    	lea    eax,[ebx-0x548]
9f002825:	50                   	push   eax
9f002826:	68 00 00 00 01       	push   0x1000000
9f00282b:	e8 23 ef ff ff       	call   9f001753 <printdI>
9f002830:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:215
    
   //free old pointer
    freeI(foldptr);
9f002833:	83 ec 0c             	sub    esp,0xc
9f002836:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002839:	e8 8f fa ff ff       	call   9f0022cd <freeI>
9f00283e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:216
    return fnewptr;
9f002841:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:217
}
9f002844:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002847:	c9                   	leave  
9f002848:	c3                   	ret    

9f002849 <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:220

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f002849:	f3 0f 1e fb          	endbr32 
9f00284d:	55                   	push   ebp
9f00284e:	89 e5                	mov    ebp,esp
9f002850:	83 ec 08             	sub    esp,0x8
9f002853:	e8 b6 29 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002858:	05 a4 56 00 00       	add    eax,0x56a4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:221
    return reallocI(foldptr, newlen);
9f00285d:	83 ec 08             	sub    esp,0x8
9f002860:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002863:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002866:	e8 d8 fe ff ff       	call   9f002743 <reallocI>
9f00286b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:222
}
9f00286e:	c9                   	leave  
9f00286f:	c3                   	ret    

9f002870 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:225

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f002870:	f3 0f 1e fb          	endbr32 
9f002874:	55                   	push   ebp
9f002875:	89 e5                	mov    ebp,esp
9f002877:	83 ec 08             	sub    esp,0x8
9f00287a:	e8 8f 29 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00287f:	05 7d 56 00 00       	add    eax,0x567d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:226
    freeI(fpointer);
9f002884:	83 ec 0c             	sub    esp,0xc
9f002887:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00288a:	e8 3e fa ff ff       	call   9f0022cd <freeI>
9f00288f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:227
}
9f002892:	90                   	nop
9f002893:	c9                   	leave  
9f002894:	c3                   	ret    

9f002895 <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:230

void malloc_cleanup()
{
9f002895:	f3 0f 1e fb          	endbr32 
9f002899:	55                   	push   ebp
9f00289a:	89 e5                	mov    ebp,esp
9f00289c:	53                   	push   ebx
9f00289d:	83 ec 04             	sub    esp,0x4
9f0028a0:	e8 69 29 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0028a5:	05 57 56 00 00       	add    eax,0x5657
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:231
    do_syscall1(SYSCALL_FREE, heapBase);
9f0028aa:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
9f0028b0:	8b 12                	mov    edx,DWORD PTR [edx]
9f0028b2:	83 ec 08             	sub    esp,0x8
9f0028b5:	52                   	push   edx
9f0028b6:	68 64 01 00 00       	push   0x164
9f0028bb:	89 c3                	mov    ebx,eax
9f0028bd:	e8 93 eb ff ff       	call   9f001455 <do_syscall1>
9f0028c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:232
9f0028c5:	90                   	nop
9f0028c6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0028c9:	c9                   	leave  
9f0028ca:	c3                   	ret    

9f0028cb <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f0028cb:	f3 0f 1e fb          	endbr32 
9f0028cf:	55                   	push   ebp
9f0028d0:	89 e5                	mov    ebp,esp
9f0028d2:	83 ec 20             	sub    esp,0x20
9f0028d5:	e8 34 29 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0028da:	05 22 56 00 00       	add    eax,0x5622
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f0028df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0028e2:	83 e0 03             	and    eax,0x3
9f0028e5:	85 c0                	test   eax,eax
9f0028e7:	0f 94 c0             	sete   al
9f0028ea:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f0028ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0028f0:	83 e0 01             	and    eax,0x1
9f0028f3:	85 c0                	test   eax,eax
9f0028f5:	0f 94 c0             	sete   al
9f0028f8:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f0028fb:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f0028ff:	74 7d                	je     9f00297e <memcpyI+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f002901:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002904:	c1 e8 02             	shr    eax,0x2
9f002907:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f00290a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00290d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f002910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002913:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f002916:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002919:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f00291c:	73 4b                	jae    9f002969 <memcpyI+0x9e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f00291e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002921:	c1 e0 02             	shl    eax,0x2
9f002924:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f002927:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00292a:	c1 e0 02             	shl    eax,0x2
9f00292d:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f002930:	eb 12                	jmp    9f002944 <memcpyI+0x79>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f002932:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f002936:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f00293a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00293d:	8b 10                	mov    edx,DWORD PTR [eax]
9f00293f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002942:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f002944:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002947:	8d 50 ff             	lea    edx,[eax-0x1]
9f00294a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00294d:	85 c0                	test   eax,eax
9f00294f:	75 e1                	jne    9f002932 <memcpyI+0x67>
9f002951:	eb 23                	jmp    9f002976 <memcpyI+0xab>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f002953:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002956:	8d 42 04             	lea    eax,[edx+0x4]
9f002959:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f00295c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00295f:	8d 48 04             	lea    ecx,[eax+0x4]
9f002962:	89 4d f8             	mov    DWORD PTR [ebp-0x8],ecx
9f002965:	8b 12                	mov    edx,DWORD PTR [edx]
9f002967:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                while ( (n)-- > 0)
9f002969:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00296c:	8d 50 ff             	lea    edx,[eax-0x1]
9f00296f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002972:	85 c0                	test   eax,eax
9f002974:	75 dd                	jne    9f002953 <memcpyI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
        return dest;
9f002976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002979:	e9 ea 00 00 00       	jmp    9f002a68 <memcpyI+0x19d>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f00297e:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f002982:	74 79                	je     9f0029fd <memcpyI+0x132>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f002984:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002987:	d1 e8                	shr    eax,1
9f002989:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f00298c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00298f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f002992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002995:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f002998:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00299b:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00299e:	73 4b                	jae    9f0029eb <memcpyI+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f0029a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029a3:	c1 e0 02             	shl    eax,0x2
9f0029a6:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f0029a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029ac:	c1 e0 02             	shl    eax,0x2
9f0029af:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f0029b2:	eb 12                	jmp    9f0029c6 <memcpyI+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f0029b4:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f0029b8:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f0029bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0029bf:	8b 10                	mov    edx,DWORD PTR [eax]
9f0029c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0029c4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f0029c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029c9:	8d 50 ff             	lea    edx,[eax-0x1]
9f0029cc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0029cf:	85 c0                	test   eax,eax
9f0029d1:	75 e1                	jne    9f0029b4 <memcpyI+0xe9>
9f0029d3:	eb 23                	jmp    9f0029f8 <memcpyI+0x12d>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f0029d5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0029d8:	8d 42 04             	lea    eax,[edx+0x4]
9f0029db:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0029de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0029e1:	8d 48 04             	lea    ecx,[eax+0x4]
9f0029e4:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f0029e7:	8b 12                	mov    edx,DWORD PTR [edx]
9f0029e9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                while ( (n)-- > 0)
9f0029eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029ee:	8d 50 ff             	lea    edx,[eax-0x1]
9f0029f1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0029f4:	85 c0                	test   eax,eax
9f0029f6:	75 dd                	jne    9f0029d5 <memcpyI+0x10a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
        return dest;
9f0029f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0029fb:	eb 6b                	jmp    9f002a68 <memcpyI+0x19d>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f0029fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f002a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a06:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f002a09:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002a0c:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f002a0f:	73 47                	jae    9f002a58 <memcpyI+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f002a11:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a14:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f002a17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a1a:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f002a1d:	eb 13                	jmp    9f002a32 <memcpyI+0x167>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f002a1f:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f002a23:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f002a27:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002a2a:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002a2d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002a30:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f002a32:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a35:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a38:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002a3b:	85 c0                	test   eax,eax
9f002a3d:	75 e0                	jne    9f002a1f <memcpyI+0x154>
9f002a3f:	eb 24                	jmp    9f002a65 <memcpyI+0x19a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f002a41:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002a44:	8d 42 01             	lea    eax,[edx+0x1]
9f002a47:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f002a4a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002a4d:	8d 48 01             	lea    ecx,[eax+0x1]
9f002a50:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
9f002a53:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002a56:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                while (n-- > 0)
9f002a58:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a5b:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a5e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002a61:	85 c0                	test   eax,eax
9f002a63:	75 dc                	jne    9f002a41 <memcpyI+0x176>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
        return dest;
9f002a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f002a68:	c9                   	leave  
9f002a69:	c3                   	ret    

9f002a6a <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f002a6a:	f3 0f 1e fb          	endbr32 
9f002a6e:	55                   	push   ebp
9f002a6f:	89 e5                	mov    ebp,esp
9f002a71:	e8 98 27 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002a76:	05 86 54 00 00       	add    eax,0x5486
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f002a7b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002a7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002a81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002a84:	e8 42 fe ff ff       	call   9f0028cb <memcpyI>
9f002a89:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f002a8c:	c9                   	leave  
9f002a8d:	c3                   	ret    

9f002a8e <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "common.h"

void *memsetI(void *d1, int val, size_t len)
{
9f002a8e:	f3 0f 1e fb          	endbr32 
9f002a92:	55                   	push   ebp
9f002a93:	89 e5                	mov    ebp,esp
9f002a95:	83 ec 20             	sub    esp,0x20
9f002a98:	e8 71 27 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002a9d:	05 5f 54 00 00       	add    eax,0x545f
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f002aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002aa5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f002aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002aab:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f002aae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ab1:	c1 e0 10             	shl    eax,0x10
9f002ab4:	89 c2                	mov    edx,eax
9f002ab6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ab9:	c1 e0 08             	shl    eax,0x8
9f002abc:	09 c2                	or     edx,eax
9f002abe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ac1:	09 d0                	or     eax,edx
9f002ac3:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f002ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002aca:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f002acd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ad0:	c1 e0 18             	shl    eax,0x18
9f002ad3:	89 c2                	mov    edx,eax
9f002ad5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ad8:	c1 e0 10             	shl    eax,0x10
9f002adb:	09 c2                	or     edx,eax
9f002add:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ae0:	c1 e0 08             	shl    eax,0x8
9f002ae3:	09 d0                	or     eax,edx
9f002ae5:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f002ae8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f002aeb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002aee:	83 e0 03             	and    eax,0x3
9f002af1:	85 c0                	test   eax,eax
9f002af3:	75 1c                	jne    9f002b11 <memsetI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f002af5:	eb 0e                	jmp    9f002b05 <memsetI+0x77>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f002af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002afa:	8d 50 04             	lea    edx,[eax+0x4]
9f002afd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002b00:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002b03:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f002b05:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f002b09:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002b0d:	75 e8                	jne    9f002af7 <memsetI+0x69>
9f002b0f:	eb 43                	jmp    9f002b54 <memsetI+0xc6>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
    }
    else if (((len%2)==0))
9f002b11:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002b14:	83 e0 01             	and    eax,0x1
9f002b17:	85 c0                	test   eax,eax
9f002b19:	75 2c                	jne    9f002b47 <memsetI+0xb9>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f002b1b:	eb 10                	jmp    9f002b2d <memsetI+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f002b1d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002b20:	8d 50 02             	lea    edx,[eax+0x2]
9f002b23:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f002b26:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f002b2a:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f002b2d:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f002b31:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002b35:	75 e6                	jne    9f002b1d <memsetI+0x8f>
9f002b37:	eb 1b                	jmp    9f002b54 <memsetI+0xc6>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
    }
    else
    while (len--) {
        *d++ = val;
9f002b39:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002b3c:	8d 50 01             	lea    edx,[eax+0x1]
9f002b3f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002b42:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002b45:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    while (len--) {
9f002b47:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002b4a:	8d 50 ff             	lea    edx,[eax-0x1]
9f002b4d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002b50:	85 c0                	test   eax,eax
9f002b52:	75 e5                	jne    9f002b39 <memsetI+0xab>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
    }
    return d1;
9f002b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f002b57:	c9                   	leave  
9f002b58:	c3                   	ret    

9f002b59 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f002b59:	f3 0f 1e fb          	endbr32 
9f002b5d:	55                   	push   ebp
9f002b5e:	89 e5                	mov    ebp,esp
9f002b60:	e8 a9 26 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002b65:	05 97 53 00 00       	add    eax,0x5397
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f002b6a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002b6d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002b70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002b73:	e8 16 ff ff ff       	call   9f002a8e <memsetI>
9f002b78:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f002b7b:	c9                   	leave  
9f002b7c:	c3                   	ret    

9f002b7d <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:11

#include "common.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f002b7d:	f3 0f 1e fb          	endbr32 
9f002b81:	55                   	push   ebp
9f002b82:	89 e5                	mov    ebp,esp
9f002b84:	53                   	push   ebx
9f002b85:	83 ec 04             	sub    esp,0x4
9f002b88:	e8 81 26 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002b8d:	05 6f 53 00 00       	add    eax,0x536f
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f002b92:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002b95:	83 ec 08             	sub    esp,0x8
9f002b98:	52                   	push   edx
9f002b99:	6a 0f                	push   0xf
9f002b9b:	89 c3                	mov    ebx,eax
9f002b9d:	e8 b3 e8 ff ff       	call   9f001455 <do_syscall1>
9f002ba2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:13
}
9f002ba5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002ba8:	c9                   	leave  
9f002ba9:	c3                   	ret    

9f002baa <dup3>:
dup3():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:16

VISIBLE int dup3(int oldfd, int newfd, int flags)
{
9f002baa:	f3 0f 1e fb          	endbr32 
9f002bae:	55                   	push   ebp
9f002baf:	89 e5                	mov    ebp,esp
9f002bb1:	53                   	push   ebx
9f002bb2:	83 ec 04             	sub    esp,0x4
9f002bb5:	e8 54 26 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002bba:	05 42 53 00 00       	add    eax,0x5342
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:17
    return do_syscall3(SYSCALL_DUP3,oldfd,newfd,flags);
9f002bbf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f002bc2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f002bc5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002bc8:	53                   	push   ebx
9f002bc9:	51                   	push   ecx
9f002bca:	52                   	push   edx
9f002bcb:	6a 10                	push   0x10
9f002bcd:	89 c3                	mov    ebx,eax
9f002bcf:	e8 ff e7 ff ff       	call   9f0013d3 <do_syscall3>
9f002bd4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:18
9f002bd7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002bda:	c9                   	leave  
9f002bdb:	c3                   	ret    

9f002bdc <buildProcInfoTI>:
buildProcInfoTI():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:17
#include "ascii.h"
#include "file.h"
#include "malloc.h"

procInfo_t *buildProcInfoTI(procInfo_t *procinfo, char *statinfo, int ticksPerUpdateInterval)
{
9f002bdc:	f3 0f 1e fb          	endbr32 
9f002be0:	55                   	push   ebp
9f002be1:	89 e5                	mov    ebp,esp
9f002be3:	56                   	push   esi
9f002be4:	53                   	push   ebx
9f002be5:	81 ec 50 01 00 00    	sub    esp,0x150
9f002beb:	e8 22 26 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f002bf0:	81 c3 0c 53 00 00    	add    ebx,0x530c
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:18
    char delim[4]={'\n','\t',' ','\0'};
9f002bf6:	c7 45 e8 0a 09 20 00 	mov    DWORD PTR [ebp-0x18],0x20090a
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:20
    char *token;
    int tokenNumber=1;
9f002bfd:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:25
    int pid;
    char name[100], name2[100], name3[100];
    static struct tm tinfo;

    memsetI(name,0,100);
9f002c04:	83 ec 04             	sub    esp,0x4
9f002c07:	6a 64                	push   0x64
9f002c09:	6a 00                	push   0x0
9f002c0b:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002c0e:	50                   	push   eax
9f002c0f:	e8 7a fe ff ff       	call   9f002a8e <memsetI>
9f002c14:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:26
    memsetI(name2,0,100);
9f002c17:	83 ec 04             	sub    esp,0x4
9f002c1a:	6a 64                	push   0x64
9f002c1c:	6a 00                	push   0x0
9f002c1e:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002c24:	50                   	push   eax
9f002c25:	e8 64 fe ff ff       	call   9f002a8e <memsetI>
9f002c2a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:27
    memsetI(name3,0,100);
9f002c2d:	83 ec 04             	sub    esp,0x4
9f002c30:	6a 64                	push   0x64
9f002c32:	6a 00                	push   0x0
9f002c34:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002c3a:	50                   	push   eax
9f002c3b:	e8 4e fe ff ff       	call   9f002a8e <memsetI>
9f002c40:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:29
    
    token=strtokI(statinfo,delim);
9f002c43:	83 ec 08             	sub    esp,0x8
9f002c46:	8d 45 e8             	lea    eax,[ebp-0x18]
9f002c49:	50                   	push   eax
9f002c4a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002c4d:	e8 cc d4 ff ff       	call   9f00011e <strtokI>
9f002c52:	83 c4 10             	add    esp,0x10
9f002c55:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:30
    while (token)
9f002c58:	e9 d0 02 00 00       	jmp    9f002f2d <.L3+0x18>
9f002c5d:	83 7d f0 17          	cmp    DWORD PTR [ebp-0x10],0x17
9f002c61:	0f 87 ae 02 00 00    	ja     9f002f15 <.L3>
9f002c67:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002c6a:	c1 e0 02             	shl    eax,0x2
9f002c6d:	8b 84 18 40 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x4c0]
9f002c74:	01 d8                	add    eax,ebx
9f002c76:	3e ff e0             	notrack jmp eax

9f002c79 <.L15>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:35
    {
        switch (tokenNumber)
        {
            case 1: //pid
                pid=atoiI(token);
9f002c79:	83 ec 0c             	sub    esp,0xc
9f002c7c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002c7f:	e8 c6 d7 ff ff       	call   9f00044a <atoiI>
9f002c84:	83 c4 10             	add    esp,0x10
9f002c87:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:36
                procinfo->pid=pid;
9f002c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002c8d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002c90:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:38
//procinfo->lastUpdateIteration=iteration;
                break;
9f002c92:	e9 7e 02 00 00       	jmp    9f002f15 <.L3>

9f002c97 <.L13>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:40
            case 3: //state
                procinfo->status=token[0];
9f002c97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002c9a:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ca0:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:41
                break;
9f002ca3:	e9 6d 02 00 00       	jmp    9f002f15 <.L3>

9f002ca8 <.L12>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:43
            case 4: //ppid
                procinfo->ppid=atoiI(token);
9f002ca8:	83 ec 0c             	sub    esp,0xc
9f002cab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002cae:	e8 97 d7 ff ff       	call   9f00044a <atoiI>
9f002cb3:	83 c4 10             	add    esp,0x10
9f002cb6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002cb9:	89 42 30             	mov    DWORD PTR [edx+0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:44
                break;
9f002cbc:	e9 54 02 00 00       	jmp    9f002f15 <.L3>

9f002cc1 <.L11>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:46
            case 7: //tty_nr
                procinfo->tty=atoiI(token);
9f002cc1:	83 ec 0c             	sub    esp,0xc
9f002cc4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002cc7:	e8 7e d7 ff ff       	call   9f00044a <atoiI>
9f002ccc:	83 c4 10             	add    esp,0x10
9f002ccf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002cd2:	89 42 34             	mov    DWORD PTR [edx+0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:47
                break;
9f002cd5:	e9 3b 02 00 00       	jmp    9f002f15 <.L3>

9f002cda <.L10>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:49
            case 10://minflt
                procinfo->minorFaults=atoiI(token);
9f002cda:	83 ec 0c             	sub    esp,0xc
9f002cdd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002ce0:	e8 65 d7 ff ff       	call   9f00044a <atoiI>
9f002ce5:	83 c4 10             	add    esp,0x10
9f002ce8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002ceb:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:50
                break;
9f002cee:	e9 22 02 00 00       	jmp    9f002f15 <.L3>

9f002cf3 <.L9>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:52
            case 11://majflt
                procinfo->majorFaults=atoiI(token);
9f002cf3:	83 ec 0c             	sub    esp,0xc
9f002cf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002cf9:	e8 4c d7 ff ff       	call   9f00044a <atoiI>
9f002cfe:	83 c4 10             	add    esp,0x10
9f002d01:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002d04:	89 42 3c             	mov    DWORD PTR [edx+0x3c],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:53
                break;
9f002d07:	e9 09 02 00 00       	jmp    9f002f15 <.L3>

9f002d0c <.L7>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:55
            case 17://priority
                if (strstrI(token,"-"))
9f002d0c:	83 ec 08             	sub    esp,0x8
9f002d0f:	8d 83 24 fb ff ff    	lea    eax,[ebx-0x4dc]
9f002d15:	50                   	push   eax
9f002d16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d19:	e8 5a 17 00 00       	call   9f004478 <strstrI>
9f002d1e:	83 c4 10             	add    esp,0x10
9f002d21:	85 c0                	test   eax,eax
9f002d23:	74 21                	je     9f002d46 <.L7+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:56
                    procinfo->priority= -atoiI(token+1);
9f002d25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002d28:	83 c0 01             	add    eax,0x1
9f002d2b:	83 ec 0c             	sub    esp,0xc
9f002d2e:	50                   	push   eax
9f002d2f:	e8 16 d7 ff ff       	call   9f00044a <atoiI>
9f002d34:	83 c4 10             	add    esp,0x10
9f002d37:	f7 d8                	neg    eax
9f002d39:	89 c2                	mov    edx,eax
9f002d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d3e:	89 50 54             	mov    DWORD PTR [eax+0x54],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:59
                else
                    procinfo->priority=atoiI(token);
                break;
9f002d41:	e9 cf 01 00 00       	jmp    9f002f15 <.L3>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:58
                    procinfo->priority=atoiI(token);
9f002d46:	83 ec 0c             	sub    esp,0xc
9f002d49:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d4c:	e8 f9 d6 ff ff       	call   9f00044a <atoiI>
9f002d51:	83 c4 10             	add    esp,0x10
9f002d54:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002d57:	89 42 54             	mov    DWORD PTR [edx+0x54],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:59
                break;
9f002d5a:	e9 b6 01 00 00       	jmp    9f002f15 <.L3>

9f002d5f <.L14>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:61
            case 2: //comm
                strreplaceI(token,"(","",name);
9f002d5f:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002d62:	50                   	push   eax
9f002d63:	8d 83 26 fb ff ff    	lea    eax,[ebx-0x4da]
9f002d69:	50                   	push   eax
9f002d6a:	8d 83 27 fb ff ff    	lea    eax,[ebx-0x4d9]
9f002d70:	50                   	push   eax
9f002d71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002d74:	e8 1f 15 00 00       	call   9f004298 <strreplaceI>
9f002d79:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:62
                strreplaceI(name,")","",name2);
9f002d7c:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002d82:	50                   	push   eax
9f002d83:	8d 83 26 fb ff ff    	lea    eax,[ebx-0x4da]
9f002d89:	50                   	push   eax
9f002d8a:	8d 83 29 fb ff ff    	lea    eax,[ebx-0x4d7]
9f002d90:	50                   	push   eax
9f002d91:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002d94:	50                   	push   eax
9f002d95:	e8 fe 14 00 00       	call   9f004298 <strreplaceI>
9f002d9a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:63
                sprintfI(name3,"%-10s",name2);
9f002d9d:	83 ec 04             	sub    esp,0x4
9f002da0:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002da6:	50                   	push   eax
9f002da7:	8d 83 2b fb ff ff    	lea    eax,[ebx-0x4d5]
9f002dad:	50                   	push   eax
9f002dae:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002db4:	50                   	push   eax
9f002db5:	e8 c8 0a 00 00       	call   9f003882 <sprintfI>
9f002dba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:64
                strncpyI((char*)procinfo->name,name3,9);
9f002dbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002dc0:	8d 50 04             	lea    edx,[eax+0x4]
9f002dc3:	83 ec 04             	sub    esp,0x4
9f002dc6:	6a 09                	push   0x9
9f002dc8:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002dce:	50                   	push   eax
9f002dcf:	52                   	push   edx
9f002dd0:	e8 2d 10 00 00       	call   9f003e02 <strncpyI>
9f002dd5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:65
                break;
9f002dd8:	e9 38 01 00 00       	jmp    9f002f15 <.L3>

9f002ddd <.L8>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:67
            case 13://ticks
                procinfo->ticks=atoiI(token);
9f002ddd:	83 ec 0c             	sub    esp,0xc
9f002de0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002de3:	e8 62 d6 ff ff       	call   9f00044a <atoiI>
9f002de8:	83 c4 10             	add    esp,0x10
9f002deb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002dee:	89 42 40             	mov    DWORD PTR [edx+0x40],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:68
                procinfo->totalTicks+=(procinfo->ticks - procinfo->lastTicks);
9f002df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002df4:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
9f002df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002dfa:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
9f002dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e00:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
9f002e03:	29 c1                	sub    ecx,eax
9f002e05:	89 c8                	mov    eax,ecx
9f002e07:	01 c2                	add    edx,eax
9f002e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e0c:	89 50 48             	mov    DWORD PTR [eax+0x48],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:69
                time_t runtime_secs=procinfo->totalTicks/TICKS_PER_SECOND;
9f002e0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e12:	8b 48 48             	mov    ecx,DWORD PTR [eax+0x48]
9f002e15:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002e1a:	89 c8                	mov    eax,ecx
9f002e1c:	f7 ea                	imul   edx
9f002e1e:	c1 fa 05             	sar    edx,0x5
9f002e21:	89 c8                	mov    eax,ecx
9f002e23:	c1 f8 1f             	sar    eax,0x1f
9f002e26:	29 c2                	sub    edx,eax
9f002e28:	89 d0                	mov    eax,edx
9f002e2a:	89 85 b8 fe ff ff    	mov    DWORD PTR [ebp-0x148],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:71
                
                memsetI(&tinfo,0,sizeof(struct tm));
9f002e30:	83 ec 04             	sub    esp,0x4
9f002e33:	6a 2c                	push   0x2c
9f002e35:	6a 00                	push   0x0
9f002e37:	8d 83 84 00 00 00    	lea    eax,[ebx+0x84]
9f002e3d:	50                   	push   eax
9f002e3e:	e8 4b fc ff ff       	call   9f002a8e <memsetI>
9f002e43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:72
                gmtime_rI((time_t*)&runtime_secs,&tinfo);
9f002e46:	83 ec 08             	sub    esp,0x8
9f002e49:	8d 83 84 00 00 00    	lea    eax,[ebx+0x84]
9f002e4f:	50                   	push   eax
9f002e50:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
9f002e56:	50                   	push   eax
9f002e57:	e8 f7 16 00 00       	call   9f004553 <gmtime_rI>
9f002e5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:73
                memsetI(procinfo->time,0,40);
9f002e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e62:	83 c0 64             	add    eax,0x64
9f002e65:	83 ec 04             	sub    esp,0x4
9f002e68:	6a 28                	push   0x28
9f002e6a:	6a 00                	push   0x0
9f002e6c:	50                   	push   eax
9f002e6d:	e8 1c fc ff ff       	call   9f002a8e <memsetI>
9f002e72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:74
                sprintfI(procinfo->time,"%02i:%02i:%02i",tinfo.tm_hour,tinfo.tm_min,tinfo.tm_sec);
9f002e75:	8b 8b 84 00 00 00    	mov    ecx,DWORD PTR [ebx+0x84]
9f002e7b:	8b 93 88 00 00 00    	mov    edx,DWORD PTR [ebx+0x88]
9f002e81:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
9f002e87:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
9f002e8a:	83 c6 64             	add    esi,0x64
9f002e8d:	83 ec 0c             	sub    esp,0xc
9f002e90:	51                   	push   ecx
9f002e91:	52                   	push   edx
9f002e92:	50                   	push   eax
9f002e93:	8d 83 31 fb ff ff    	lea    eax,[ebx-0x4cf]
9f002e99:	50                   	push   eax
9f002e9a:	56                   	push   esi
9f002e9b:	e8 e2 09 00 00       	call   9f003882 <sprintfI>
9f002ea0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:75
                procinfo->cpu=(((double)procinfo->ticks-(double)procinfo->lastTicks)/(double)ticksPerUpdateInterval)*100;
9f002ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ea6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
9f002ea9:	89 85 b4 fe ff ff    	mov    DWORD PTR [ebp-0x14c],eax
9f002eaf:	db 85 b4 fe ff ff    	fild   DWORD PTR [ebp-0x14c]
9f002eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002eb8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
9f002ebb:	89 85 b4 fe ff ff    	mov    DWORD PTR [ebp-0x14c],eax
9f002ec1:	db 85 b4 fe ff ff    	fild   DWORD PTR [ebp-0x14c]
9f002ec7:	de e9                	fsubp  st(1),st
9f002ec9:	db 45 10             	fild   DWORD PTR [ebp+0x10]
9f002ecc:	de f9                	fdivp  st(1),st
9f002ece:	dd 83 bc fb ff ff    	fld    QWORD PTR [ebx-0x444]
9f002ed4:	de c9                	fmulp  st(1),st
9f002ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ed9:	dd 58 4c             	fstp   QWORD PTR [eax+0x4c]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:76
                procinfo->lastTicks=procinfo->ticks;
9f002edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002edf:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
9f002ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ee5:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:79
                
//procinfo->cpu=(((double)procinfo->ticks-(double)procinfo->lastTicks)/(double)intervalTicks)*100;
                break;
9f002ee8:	eb 2b                	jmp    9f002f15 <.L3>

9f002eea <.L6>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:81
            case 22://vsize
                procinfo->virtualSize=atoiI(token);
9f002eea:	83 ec 0c             	sub    esp,0xc
9f002eed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002ef0:	e8 55 d5 ff ff       	call   9f00044a <atoiI>
9f002ef5:	83 c4 10             	add    esp,0x10
9f002ef8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002efb:	89 42 58             	mov    DWORD PTR [edx+0x58],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:82
                break;
9f002efe:	eb 15                	jmp    9f002f15 <.L3>

9f002f00 <.L4>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:84
            case 23://rss
                procinfo->memorySize=atoiI(token);
9f002f00:	83 ec 0c             	sub    esp,0xc
9f002f03:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002f06:	e8 3f d5 ff ff       	call   9f00044a <atoiI>
9f002f0b:	83 c4 10             	add    esp,0x10
9f002f0e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002f11:	89 42 5c             	mov    DWORD PTR [edx+0x5c],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:85
                break;
9f002f14:	90                   	nop

9f002f15 <.L3>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:87
        }
        tokenNumber++;
9f002f15:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:88
        token=strtokI(NULL,delim);
9f002f19:	83 ec 08             	sub    esp,0x8
9f002f1c:	8d 45 e8             	lea    eax,[ebp-0x18]
9f002f1f:	50                   	push   eax
9f002f20:	6a 00                	push   0x0
9f002f22:	e8 f7 d1 ff ff       	call   9f00011e <strtokI>
9f002f27:	83 c4 10             	add    esp,0x10
9f002f2a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:30
    while (token)
9f002f2d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f002f31:	0f 85 26 fd ff ff    	jne    9f002c5d <buildProcInfoTI+0x81>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:90
    }
    return procinfo;
9f002f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:92
    
}
9f002f3a:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002f3d:	5b                   	pop    ebx
9f002f3e:	5e                   	pop    esi
9f002f3f:	5d                   	pop    ebp
9f002f40:	c3                   	ret    

9f002f41 <buildProcInfoT>:
buildProcInfoT():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:95

VISIBLE procInfo_t *buildProcInfoT(procInfo_t *procinfo, char *statinfo)
{
9f002f41:	f3 0f 1e fb          	endbr32 
9f002f45:	55                   	push   ebp
9f002f46:	89 e5                	mov    ebp,esp
9f002f48:	83 ec 08             	sub    esp,0x8
9f002f4b:	e8 be 22 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f002f50:	05 ac 4f 00 00       	add    eax,0x4fac
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:96
    return buildProcInfoTI(procinfo, statinfo, 0);
9f002f55:	83 ec 04             	sub    esp,0x4
9f002f58:	6a 00                	push   0x0
9f002f5a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002f5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002f60:	e8 77 fc ff ff       	call   9f002bdc <buildProcInfoTI>
9f002f65:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:97
}
9f002f68:	c9                   	leave  
9f002f69:	c3                   	ret    

9f002f6a <buildAllProcInfoTs>:
buildAllProcInfoTs():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:100

VISIBLE void buildAllProcInfoTs(procInfo_t **topinfo, int intervalTicks, int iteration)
{
9f002f6a:	f3 0f 1e fb          	endbr32 
9f002f6e:	55                   	push   ebp
9f002f6f:	89 e5                	mov    ebp,esp
9f002f71:	56                   	push   esi
9f002f72:	53                   	push   ebx
9f002f73:	81 ec a0 01 00 00    	sub    esp,0x1a0
9f002f79:	e8 94 22 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f002f7e:	81 c3 7e 4f 00 00    	add    ebx,0x4f7e
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:103
    static direntry_t *dirEntries;
    
    if (!dirEntries)
9f002f84:	8b 83 b0 00 00 00    	mov    eax,DWORD PTR [ebx+0xb0]
9f002f8a:	85 c0                	test   eax,eax
9f002f8c:	75 16                	jne    9f002fa4 <buildAllProcInfoTs+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:104
        dirEntries=mallocI(PROCINFO_MAX_PROCESSES*sizeof(direntry_t));
9f002f8e:	83 ec 0c             	sub    esp,0xc
9f002f91:	68 00 17 01 00       	push   0x11700
9f002f96:	e8 c0 f4 ff ff       	call   9f00245b <mallocI>
9f002f9b:	83 c4 10             	add    esp,0x10
9f002f9e:	89 83 b0 00 00 00    	mov    DWORD PTR [ebx+0xb0],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:107

    char path[128];
    int procCount=getdirI("/proc/",dirEntries,1024*100);
9f002fa4:	8b 83 b0 00 00 00    	mov    eax,DWORD PTR [ebx+0xb0]
9f002faa:	83 ec 04             	sub    esp,0x4
9f002fad:	68 00 90 01 00       	push   0x19000
9f002fb2:	50                   	push   eax
9f002fb3:	8d 83 a0 fb ff ff    	lea    eax,[ebx-0x460]
9f002fb9:	50                   	push   eax
9f002fba:	e8 6e d9 ff ff       	call   9f00092d <getdirI>
9f002fbf:	83 c4 10             	add    esp,0x10
9f002fc2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:111
    char statBuffer[256];
    procInfo_t *currProc;

    for (int cnt=0;cnt<procCount;cnt++)
9f002fc5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f002fcc:	e9 af 01 00 00       	jmp    9f003180 <buildAllProcInfoTs+0x216>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:113
    {
        if (dirEntries[cnt].is_dir)
9f002fd1:	8b 93 b0 00 00 00    	mov    edx,DWORD PTR [ebx+0xb0]
9f002fd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fda:	69 c0 17 01 00 00    	imul   eax,eax,0x117
9f002fe0:	01 d0                	add    eax,edx
9f002fe2:	0f b6 80 04 01 00 00 	movzx  eax,BYTE PTR [eax+0x104]
9f002fe9:	84 c0                	test   al,al
9f002feb:	0f 84 8b 01 00 00    	je     9f00317c <buildAllProcInfoTs+0x212>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:115
        {
            strcpyI(path,"/proc/");
9f002ff1:	83 ec 08             	sub    esp,0x8
9f002ff4:	8d 83 a0 fb ff ff    	lea    eax,[ebx-0x460]
9f002ffa:	50                   	push   eax
9f002ffb:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f003001:	50                   	push   eax
9f003002:	e8 53 0b 00 00       	call   9f003b5a <strcpyI>
9f003007:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:116
            strcatI(path,dirEntries[cnt].filename);
9f00300a:	8b 93 b0 00 00 00    	mov    edx,DWORD PTR [ebx+0xb0]
9f003010:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003013:	69 c0 17 01 00 00    	imul   eax,eax,0x117
9f003019:	01 d0                	add    eax,edx
9f00301b:	83 ec 08             	sub    esp,0x8
9f00301e:	50                   	push   eax
9f00301f:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f003025:	50                   	push   eax
9f003026:	e8 8d 09 00 00       	call   9f0039b8 <strcatI>
9f00302b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:117
            strcatI(path,"/stat");
9f00302e:	83 ec 08             	sub    esp,0x8
9f003031:	8d 83 a7 fb ff ff    	lea    eax,[ebx-0x459]
9f003037:	50                   	push   eax
9f003038:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f00303e:	50                   	push   eax
9f00303f:	e8 74 09 00 00       	call   9f0039b8 <strcatI>
9f003044:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:118
            if (strstrI(path,"self")!=NULL)
9f003047:	83 ec 08             	sub    esp,0x8
9f00304a:	8d 83 ad fb ff ff    	lea    eax,[ebx-0x453]
9f003050:	50                   	push   eax
9f003051:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f003057:	50                   	push   eax
9f003058:	e8 1b 14 00 00       	call   9f004478 <strstrI>
9f00305d:	83 c4 10             	add    esp,0x10
9f003060:	85 c0                	test   eax,eax
9f003062:	0f 85 13 01 00 00    	jne    9f00317b <buildAllProcInfoTs+0x211>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:120
                continue;
            int *handle=openI(path,"r");
9f003068:	83 ec 08             	sub    esp,0x8
9f00306b:	8d 83 b2 fb ff ff    	lea    eax,[ebx-0x44e]
9f003071:	50                   	push   eax
9f003072:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f003078:	50                   	push   eax
9f003079:	e8 0e d9 ff ff       	call   9f00098c <openI>
9f00307e:	83 c4 10             	add    esp,0x10
9f003081:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:121
            if (handle)
9f003084:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f003088:	0f 84 ee 00 00 00    	je     9f00317c <buildAllProcInfoTs+0x212>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:123
            {
                readI(handle,statBuffer,1024,1);
9f00308e:	6a 01                	push   0x1
9f003090:	68 00 04 00 00       	push   0x400
9f003095:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f00309b:	50                   	push   eax
9f00309c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00309f:	e8 83 da ff ff       	call   9f000b27 <readI>
9f0030a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:124
                closeI(handle);
9f0030a7:	83 ec 0c             	sub    esp,0xc
9f0030aa:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0030ad:	e8 23 da ff ff       	call   9f000ad5 <closeI>
9f0030b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:126
                //buildTopInfo(statBuffer,topinfo);
                char *space=strstrI(statBuffer," ");
9f0030b5:	83 ec 08             	sub    esp,0x8
9f0030b8:	8d 83 b4 fb ff ff    	lea    eax,[ebx-0x44c]
9f0030be:	50                   	push   eax
9f0030bf:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f0030c5:	50                   	push   eax
9f0030c6:	e8 ad 13 00 00       	call   9f004478 <strstrI>
9f0030cb:	83 c4 10             	add    esp,0x10
9f0030ce:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:128
                char pid[8];
                strncpyI(pid,statBuffer,space-statBuffer);
9f0030d1:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f0030d7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0030da:	29 c2                	sub    edx,eax
9f0030dc:	89 d0                	mov    eax,edx
9f0030de:	83 ec 04             	sub    esp,0x4
9f0030e1:	50                   	push   eax
9f0030e2:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f0030e8:	50                   	push   eax
9f0030e9:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f0030ef:	50                   	push   eax
9f0030f0:	e8 0d 0d 00 00       	call   9f003e02 <strncpyI>
9f0030f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:129
                int ipid=atoiI(pid);
9f0030f8:	83 ec 0c             	sub    esp,0xc
9f0030fb:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f003101:	50                   	push   eax
9f003102:	e8 43 d3 ff ff       	call   9f00044a <atoiI>
9f003107:	83 c4 10             	add    esp,0x10
9f00310a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:130
                if (topinfo[ipid]==NULL)
9f00310d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003110:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f003117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00311a:	01 d0                	add    eax,edx
9f00311c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00311e:	85 c0                	test   eax,eax
9f003120:	75 22                	jne    9f003144 <buildAllProcInfoTs+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:131
                    topinfo[ipid]=mallocI(sizeof(procInfo_t));
9f003122:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003125:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00312c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00312f:	8d 34 02             	lea    esi,[edx+eax*1]
9f003132:	83 ec 0c             	sub    esp,0xc
9f003135:	68 8c 00 00 00       	push   0x8c
9f00313a:	e8 1c f3 ff ff       	call   9f00245b <mallocI>
9f00313f:	83 c4 10             	add    esp,0x10
9f003142:	89 06                	mov    DWORD PTR [esi],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:132
                currProc=topinfo[ipid];
9f003144:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003147:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00314e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003151:	01 d0                	add    eax,edx
9f003153:	8b 00                	mov    eax,DWORD PTR [eax]
9f003155:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:133
                buildProcInfoTI(currProc, statBuffer, intervalTicks);
9f003158:	83 ec 04             	sub    esp,0x4
9f00315b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00315e:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f003164:	50                   	push   eax
9f003165:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f003168:	e8 6f fa ff ff       	call   9f002bdc <buildProcInfoTI>
9f00316d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:134
                currProc->lastUpdateIteration=iteration;
9f003170:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003173:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f003176:	89 50 60             	mov    DWORD PTR [eax+0x60],edx
9f003179:	eb 01                	jmp    9f00317c <buildAllProcInfoTs+0x212>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:119
                continue;
9f00317b:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:111 (discriminator 2)
    for (int cnt=0;cnt<procCount;cnt++)
9f00317c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:111 (discriminator 1)
9f003180:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003183:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003186:	0f 8c 45 fe ff ff    	jl     9f002fd1 <buildAllProcInfoTs+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:140
            }
        }
    }
    //free(dirEntries); variable is static so it will exist until the program ends
    //at which time it will be free'd automagically
9f00318c:	90                   	nop
9f00318d:	90                   	nop
9f00318e:	8d 65 f8             	lea    esp,[ebp-0x8]
9f003191:	5b                   	pop    ebx
9f003192:	5e                   	pop    esi
9f003193:	5d                   	pop    ebp
9f003194:	c3                   	ret    

9f003195 <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
#include <stdarg.h>
#include "common.h"
#include "strings.h"

static int skip_atoi(const char **s)
{
9f003195:	f3 0f 1e fb          	endbr32 
9f003199:	55                   	push   ebp
9f00319a:	89 e5                	mov    ebp,esp
9f00319c:	53                   	push   ebx
9f00319d:	83 ec 10             	sub    esp,0x10
9f0031a0:	e8 69 20 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0031a5:	05 57 4d 00 00       	add    eax,0x4d57
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:13
	int i = 0;
9f0031aa:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15

	while (ISDIGIT(**s))
9f0031b1:	eb 29                	jmp    9f0031dc <skip_atoi+0x47>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
9f0031b3:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0031b6:	89 d0                	mov    eax,edx
9f0031b8:	c1 e0 02             	shl    eax,0x2
9f0031bb:	01 d0                	add    eax,edx
9f0031bd:	01 c0                	add    eax,eax
9f0031bf:	89 c3                	mov    ebx,eax
9f0031c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031c4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0031c6:	8d 48 01             	lea    ecx,[eax+0x1]
9f0031c9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0031cc:	89 0a                	mov    DWORD PTR [edx],ecx
9f0031ce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0031d1:	0f be c0             	movsx  eax,al
9f0031d4:	01 d8                	add    eax,ebx
9f0031d6:	83 e8 30             	sub    eax,0x30
9f0031d9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15
	while (ISDIGIT(**s))
9f0031dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031df:	8b 00                	mov    eax,DWORD PTR [eax]
9f0031e1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0031e4:	0f be c0             	movsx  eax,al
9f0031e7:	83 e8 30             	sub    eax,0x30
9f0031ea:	83 f8 09             	cmp    eax,0x9
9f0031ed:	76 c4                	jbe    9f0031b3 <skip_atoi+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
	return i;
9f0031ef:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:18
}
9f0031f2:	83 c4 10             	add    esp,0x10
9f0031f5:	5b                   	pop    ebx
9f0031f6:	5d                   	pop    ebp
9f0031f7:	c3                   	ret    

9f0031f8 <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:36
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f0031f8:	f3 0f 1e fb          	endbr32 
9f0031fc:	55                   	push   ebp
9f0031fd:	89 e5                	mov    ebp,esp
9f0031ff:	53                   	push   ebx
9f003200:	83 ec 60             	sub    esp,0x60
9f003203:	e8 0e 20 00 00       	call   9f005216 <__x86.get_pc_thunk.cx>
9f003208:	81 c1 f4 4c 00 00    	add    ecx,0x4cf4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f00320e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003211:	83 e0 20             	and    eax,0x20
9f003214:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
	if (type & LEFT)
9f003217:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00321a:	83 e0 10             	and    eax,0x10
9f00321d:	85 c0                	test   eax,eax
9f00321f:	74 04                	je     9f003225 <number+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
		type &= ~ZEROPAD;
9f003221:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
	if (base < 2 || base > 16)
9f003225:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f003229:	7e 06                	jle    9f003231 <number+0x39>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49 (discriminator 1)
9f00322b:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f00322f:	7e 0a                	jle    9f00323b <number+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
		return NULL;
9f003231:	b8 00 00 00 00       	mov    eax,0x0
9f003236:	e9 f7 01 00 00       	jmp    9f003432 <number+0x23a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51
	c = (type & ZEROPAD) ? '0' : ' ';
9f00323b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00323e:	83 e0 01             	and    eax,0x1
9f003241:	85 c0                	test   eax,eax
9f003243:	74 07                	je     9f00324c <number+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 1)
9f003245:	b8 30 00 00 00       	mov    eax,0x30
9f00324a:	eb 05                	jmp    9f003251 <number+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 2)
9f00324c:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
9f003251:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	sign = 0;
9f003254:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53 (discriminator 4)
	if (type & SIGN) {
9f003258:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00325b:	83 e0 02             	and    eax,0x2
9f00325e:	85 c0                	test   eax,eax
9f003260:	74 39                	je     9f00329b <number+0xa3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
		if (num < 0) {
9f003262:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003266:	79 0d                	jns    9f003275 <number+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			sign = '-';
9f003268:	c6 45 fb 2d          	mov    BYTE PTR [ebp-0x5],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			num = -num;
9f00326c:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
			size--;
9f00326f:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f003273:	eb 26                	jmp    9f00329b <number+0xa3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
		} else if (type & PLUS) {
9f003275:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003278:	83 e0 04             	and    eax,0x4
9f00327b:	85 c0                	test   eax,eax
9f00327d:	74 0a                	je     9f003289 <number+0x91>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			sign = '+';
9f00327f:	c6 45 fb 2b          	mov    BYTE PTR [ebp-0x5],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
			size--;
9f003283:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f003287:	eb 12                	jmp    9f00329b <number+0xa3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
		} else if (type & SPACE) {
9f003289:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00328c:	83 e0 08             	and    eax,0x8
9f00328f:	85 c0                	test   eax,eax
9f003291:	74 08                	je     9f00329b <number+0xa3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			sign = ' ';
9f003293:	c6 45 fb 20          	mov    BYTE PTR [ebp-0x5],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:63
			size--;
9f003297:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		}
	}
	if (type & SPECIAL) {
9f00329b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00329e:	83 e0 40             	and    eax,0x40
9f0032a1:	85 c0                	test   eax,eax
9f0032a3:	74 16                	je     9f0032bb <number+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
		if (base == 16)
9f0032a5:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0032a9:	75 06                	jne    9f0032b1 <number+0xb9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
			size -= 2;
9f0032ab:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f0032af:	eb 0a                	jmp    9f0032bb <number+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
		else if (base == 8)
9f0032b1:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f0032b5:	75 04                	jne    9f0032bb <number+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:70
			size--;
9f0032b7:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	}
	i = 0;
9f0032bb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
	if (num == 0)
9f0032c2:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0032c6:	75 4d                	jne    9f003315 <number+0x11d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:74
		tmp[i++] = '0';
9f0032c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0032cb:	8d 50 01             	lea    edx,[eax+0x1]
9f0032ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0032d1:	c6 44 05 aa 30       	mov    BYTE PTR [ebp+eax*1-0x56],0x30
9f0032d6:	eb 43                	jmp    9f00331b <number+0x123>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f0032d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032db:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0032de:	ba 00 00 00 00       	mov    edx,0x0
9f0032e3:	f7 f3                	div    ebx
9f0032e5:	89 d0                	mov    eax,edx
9f0032e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0032ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032ed:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0032f0:	ba 00 00 00 00       	mov    edx,0x0
9f0032f5:	f7 f3                	div    ebx
9f0032f7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f0032fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0032fd:	0f b6 94 01 58 fd ff 	movzx  edx,BYTE PTR [ecx+eax*1-0x2a8]
9f003304:	ff 
9f003305:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003308:	8d 58 01             	lea    ebx,[eax+0x1]
9f00330b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
9f00330e:	0a 55 f3             	or     dl,BYTE PTR [ebp-0xd]
9f003311:	88 54 05 aa          	mov    BYTE PTR [ebp+eax*1-0x56],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
		while (num != 0)
9f003315:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003319:	75 bd                	jne    9f0032d8 <number+0xe0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
	if (i > precision)
9f00331b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00331e:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f003321:	7e 06                	jle    9f003329 <number+0x131>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
		precision = i;
9f003323:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003326:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	size -= precision;
9f003329:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f00332c:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
	if (!(type & (ZEROPAD + LEFT)))
9f00332f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003332:	83 e0 11             	and    eax,0x11
9f003335:	85 c0                	test   eax,eax
9f003337:	75 1b                	jne    9f003354 <number+0x15c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
		while (size-- > 0)
9f003339:	eb 0c                	jmp    9f003347 <number+0x14f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
9f00333b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00333e:	8d 50 01             	lea    edx,[eax+0x1]
9f003341:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003344:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
		while (size-- > 0)
9f003347:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00334a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00334d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f003350:	85 c0                	test   eax,eax
9f003352:	7f e7                	jg     9f00333b <number+0x143>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
	if (sign)
9f003354:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f003358:	74 0f                	je     9f003369 <number+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
		*str++ = sign;
9f00335a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00335d:	8d 50 01             	lea    edx,[eax+0x1]
9f003360:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003363:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
9f003367:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
	if (type & SPECIAL) {
9f003369:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00336c:	83 e0 40             	and    eax,0x40
9f00336f:	85 c0                	test   eax,eax
9f003371:	74 38                	je     9f0033ab <number+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
		if (base == 8)
9f003373:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f003377:	75 0e                	jne    9f003387 <number+0x18f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
			*str++ = '0';
9f003379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00337c:	8d 50 01             	lea    edx,[eax+0x1]
9f00337f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003382:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f003385:	eb 24                	jmp    9f0033ab <number+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
		else if (base == 16) {
9f003387:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f00338b:	75 1e                	jne    9f0033ab <number+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = '0';
9f00338d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003390:	8d 50 01             	lea    edx,[eax+0x1]
9f003393:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003396:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:91
			*str++ = ('X' | locase);
9f003399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00339c:	8d 50 01             	lea    edx,[eax+0x1]
9f00339f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0033a2:	0f b6 55 f3          	movzx  edx,BYTE PTR [ebp-0xd]
9f0033a6:	83 ca 58             	or     edx,0x58
9f0033a9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		}
	}
	if (!(type & LEFT))
9f0033ab:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0033ae:	83 e0 10             	and    eax,0x10
9f0033b1:	85 c0                	test   eax,eax
9f0033b3:	75 2c                	jne    9f0033e1 <number+0x1e9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
		while (size-- > 0)
9f0033b5:	eb 0f                	jmp    9f0033c6 <number+0x1ce>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
9f0033b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0033ba:	8d 50 01             	lea    edx,[eax+0x1]
9f0033bd:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0033c0:	0f b6 55 f2          	movzx  edx,BYTE PTR [ebp-0xe]
9f0033c4:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
		while (size-- > 0)
9f0033c6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f0033c9:	8d 50 ff             	lea    edx,[eax-0x1]
9f0033cc:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f0033cf:	85 c0                	test   eax,eax
9f0033d1:	7f e4                	jg     9f0033b7 <number+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
	while (i < precision--)
9f0033d3:	eb 0c                	jmp    9f0033e1 <number+0x1e9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
9f0033d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0033d8:	8d 50 01             	lea    edx,[eax+0x1]
9f0033db:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0033de:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
	while (i < precision--)
9f0033e1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0033e4:	8d 50 ff             	lea    edx,[eax-0x1]
9f0033e7:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f0033ea:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
9f0033ed:	7c e6                	jl     9f0033d5 <number+0x1dd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
	while (i-- > 0)
9f0033ef:	eb 16                	jmp    9f003407 <number+0x20f>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
9f0033f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0033f4:	8d 50 01             	lea    edx,[eax+0x1]
9f0033f7:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0033fa:	8d 4d aa             	lea    ecx,[ebp-0x56]
9f0033fd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f003400:	01 ca                	add    edx,ecx
9f003402:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003405:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
	while (i-- > 0)
9f003407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00340a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00340d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003410:	85 c0                	test   eax,eax
9f003412:	7f dd                	jg     9f0033f1 <number+0x1f9>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
	while (size-- > 0)
9f003414:	eb 0c                	jmp    9f003422 <number+0x22a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
9f003416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003419:	8d 50 01             	lea    edx,[eax+0x1]
9f00341c:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00341f:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
	while (size-- > 0)
9f003422:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003425:	8d 50 ff             	lea    edx,[eax-0x1]
9f003428:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f00342b:	85 c0                	test   eax,eax
9f00342d:	7f e7                	jg     9f003416 <number+0x21e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103
	return str;
9f00342f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:104 (discriminator 1)
}
9f003432:	83 c4 60             	add    esp,0x60
9f003435:	5b                   	pop    ebx
9f003436:	5d                   	pop    ebp
9f003437:	c3                   	ret    

9f003438 <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:106
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f003438:	f3 0f 1e fb          	endbr32 
9f00343c:	55                   	push   ebp
9f00343d:	89 e5                	mov    ebp,esp
9f00343f:	53                   	push   ebx
9f003440:	83 ec 34             	sub    esp,0x34
9f003443:	e8 ca 1d 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f003448:	81 c3 b4 4a 00 00    	add    ebx,0x4ab4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f00344e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003451:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f003454:	e9 0a 04 00 00       	jmp    9f003863 <.L95+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
		if (*fmt != '%') {
9f003459:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00345c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00345f:	3c 25                	cmp    al,0x25
9f003461:	74 16                	je     9f003479 <vsprintf+0x41>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			*str++ = *fmt;
9f003463:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003466:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003469:	8d 48 01             	lea    ecx,[eax+0x1]
9f00346c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
9f00346f:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003472:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:123
			continue;
9f003474:	e9 e1 03 00 00       	jmp    9f00385a <.L95+0x8a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:127
		}

		/* process flags */
		flags = 0;
9f003479:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
	      repeat:
		++fmt;		/* this also skips first '%' */
9f003480:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003483:	83 c0 01             	add    eax,0x1
9f003486:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:130
		switch (*fmt) {
9f003489:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00348c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00348f:	0f be c0             	movsx  eax,al
9f003492:	83 e8 20             	sub    eax,0x20
9f003495:	83 f8 10             	cmp    eax,0x10
9f003498:	77 2d                	ja     9f0034c7 <.L43>
9f00349a:	c1 e0 02             	shl    eax,0x2
9f00349d:	8b 84 18 c4 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x43c]
9f0034a4:	01 d8                	add    eax,ebx
9f0034a6:	3e ff e0             	notrack jmp eax

9f0034a9 <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
		case '-':
			flags |= LEFT;
9f0034a9:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:133
			goto repeat;
9f0034ad:	eb d1                	jmp    9f003480 <vsprintf+0x48>

9f0034af <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
		case '+':
			flags |= PLUS;
9f0034af:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:136
			goto repeat;
9f0034b3:	eb cb                	jmp    9f003480 <vsprintf+0x48>

9f0034b5 <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
		case ' ':
			flags |= SPACE;
9f0034b5:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:139
			goto repeat;
9f0034b9:	eb c5                	jmp    9f003480 <vsprintf+0x48>

9f0034bb <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
		case '#':
			flags |= SPECIAL;
9f0034bb:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:142
			goto repeat;
9f0034bf:	eb bf                	jmp    9f003480 <vsprintf+0x48>

9f0034c1 <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
		case '0':
			flags |= ZEROPAD;
9f0034c1:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:145
			goto repeat;
9f0034c5:	eb b9                	jmp    9f003480 <vsprintf+0x48>

9f0034c7 <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		}

		/* get field width */
		field_width = -1;
9f0034c7:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
		if (ISDIGIT(*fmt))
9f0034ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0034d1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0034d4:	0f be c0             	movsx  eax,al
9f0034d7:	83 e8 30             	sub    eax,0x30
9f0034da:	83 f8 09             	cmp    eax,0x9
9f0034dd:	77 11                	ja     9f0034f0 <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
			field_width = skip_atoi(&fmt);
9f0034df:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0034e2:	50                   	push   eax
9f0034e3:	e8 ad fc ff ff       	call   9f003195 <skip_atoi>
9f0034e8:	83 c4 04             	add    esp,0x4
9f0034eb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f0034ee:	eb 2e                	jmp    9f00351e <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
		else if (*fmt == '*') {
9f0034f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0034f3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0034f6:	3c 2a                	cmp    al,0x2a
9f0034f8:	75 24                	jne    9f00351e <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:153
			++fmt;
9f0034fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0034fd:	83 c0 01             	add    eax,0x1
9f003500:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			/* it's the next argument */
			field_width = va_arg(args, int);
9f003503:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003506:	8d 50 04             	lea    edx,[eax+0x4]
9f003509:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00350c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00350e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
			if (field_width < 0) {
9f003511:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f003515:	79 07                	jns    9f00351e <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				field_width = -field_width;
9f003517:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:158
				flags |= LEFT;
9f00351a:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
			}
		}

		/* get the precision */
		precision = -1;
9f00351e:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
		if (*fmt == '.') {
9f003525:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003528:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00352b:	3c 2e                	cmp    al,0x2e
9f00352d:	75 59                	jne    9f003588 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			++fmt;
9f00352f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003532:	83 c0 01             	add    eax,0x1
9f003535:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
			if (ISDIGIT(*fmt))
9f003538:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00353b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00353e:	0f be c0             	movsx  eax,al
9f003541:	83 e8 30             	sub    eax,0x30
9f003544:	83 f8 09             	cmp    eax,0x9
9f003547:	77 11                	ja     9f00355a <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
				precision = skip_atoi(&fmt);
9f003549:	8d 45 0c             	lea    eax,[ebp+0xc]
9f00354c:	50                   	push   eax
9f00354d:	e8 43 fc ff ff       	call   9f003195 <skip_atoi>
9f003552:	83 c4 04             	add    esp,0x4
9f003555:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f003558:	eb 21                	jmp    9f00357b <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
			else if (*fmt == '*') {
9f00355a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00355d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003560:	3c 2a                	cmp    al,0x2a
9f003562:	75 17                	jne    9f00357b <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:169
				++fmt;
9f003564:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003567:	83 c0 01             	add    eax,0x1
9f00356a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:171
				/* it's the next argument */
				precision = va_arg(args, int);
9f00356d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003570:	8d 50 04             	lea    edx,[eax+0x4]
9f003573:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003576:	8b 00                	mov    eax,DWORD PTR [eax]
9f003578:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
			}
			if (precision < 0)
9f00357b:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f00357f:	79 07                	jns    9f003588 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:174
				precision = 0;
9f003581:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f003588:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f00358f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003592:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003595:	3c 68                	cmp    al,0x68
9f003597:	74 14                	je     9f0035ad <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179 (discriminator 1)
9f003599:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00359c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00359f:	3c 6c                	cmp    al,0x6c
9f0035a1:	74 0a                	je     9f0035ad <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179 (discriminator 2)
9f0035a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0035a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035a9:	3c 4c                	cmp    al,0x4c
9f0035ab:	75 15                	jne    9f0035c2 <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			qualifier = *fmt;
9f0035ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0035b0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035b3:	0f be c0             	movsx  eax,al
9f0035b6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:181
			++fmt;
9f0035b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0035bc:	83 c0 01             	add    eax,0x1
9f0035bf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:185
		}

		/* default base */
		base = 10;
9f0035c2:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:187

		switch (*fmt) {
9f0035c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0035cc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0035cf:	0f be c0             	movsx  eax,al
9f0035d2:	83 e8 25             	sub    eax,0x25
9f0035d5:	83 f8 53             	cmp    eax,0x53
9f0035d8:	0f 87 b8 01 00 00    	ja     9f003796 <.L57>
9f0035de:	c1 e0 02             	shl    eax,0x2
9f0035e1:	8b 84 18 08 fc ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x3f8]
9f0035e8:	01 d8                	add    eax,ebx
9f0035ea:	3e ff e0             	notrack jmp eax

9f0035ed <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		case 'c':
			if (!(flags & LEFT))
9f0035ed:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0035f0:	83 e0 10             	and    eax,0x10
9f0035f3:	85 c0                	test   eax,eax
9f0035f5:	75 18                	jne    9f00360f <.L66+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
				while (--field_width > 0)
9f0035f7:	eb 0c                	jmp    9f003605 <.L66+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
9f0035f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0035fc:	8d 50 01             	lea    edx,[eax+0x1]
9f0035ff:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003602:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
				while (--field_width > 0)
9f003605:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f003609:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f00360d:	7f ea                	jg     9f0035f9 <.L66+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
			*str++ = (unsigned char)va_arg(args, int);
9f00360f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003612:	8d 50 04             	lea    edx,[eax+0x4]
9f003615:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003618:	8b 08                	mov    ecx,DWORD PTR [eax]
9f00361a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00361d:	8d 50 01             	lea    edx,[eax+0x1]
9f003620:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003623:	89 ca                	mov    edx,ecx
9f003625:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
			while (--field_width > 0)
9f003627:	eb 0c                	jmp    9f003635 <.L66+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
9f003629:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00362c:	8d 50 01             	lea    edx,[eax+0x1]
9f00362f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003632:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
			while (--field_width > 0)
9f003635:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f003639:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f00363d:	7f ea                	jg     9f003629 <.L66+0x3c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:195
			continue;
9f00363f:	e9 16 02 00 00       	jmp    9f00385a <.L95+0x8a>

9f003644 <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198

		case 's':
			s = va_arg(args, char *);
9f003644:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003647:	8d 50 04             	lea    edx,[eax+0x4]
9f00364a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00364d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00364f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f003652:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f003656:	74 13                	je     9f00366b <.L61+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:200
                            len = strlenI(s);
9f003658:	83 ec 0c             	sub    esp,0xc
9f00365b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f00365e:	e8 17 06 00 00       	call   9f003c7a <strlenI>
9f003663:	83 c4 10             	add    esp,0x10
9f003666:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f003669:	eb 07                	jmp    9f003672 <.L61+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:202
                        else
                            len = 0;
9f00366b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204

			if (!(flags & LEFT))
9f003672:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003675:	83 e0 10             	and    eax,0x10
9f003678:	85 c0                	test   eax,eax
9f00367a:	75 1c                	jne    9f003698 <.L61+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
				while (len < field_width--)
9f00367c:	eb 0c                	jmp    9f00368a <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
9f00367e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003681:	8d 50 01             	lea    edx,[eax+0x1]
9f003684:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003687:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
				while (len < field_width--)
9f00368a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00368d:	8d 50 ff             	lea    edx,[eax-0x1]
9f003690:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f003693:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
9f003696:	7c e6                	jl     9f00367e <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207
			for (i = 0; i < len; ++i)
9f003698:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f00369f:	eb 1b                	jmp    9f0036bc <.L61+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208 (discriminator 3)
				*str++ = *s++;
9f0036a1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f0036a4:	8d 42 01             	lea    eax,[edx+0x1]
9f0036a7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f0036aa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0036ad:	8d 48 01             	lea    ecx,[eax+0x1]
9f0036b0:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
9f0036b3:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0036b6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
			for (i = 0; i < len; ++i)
9f0036b8:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 1)
9f0036bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0036bf:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0036c2:	7c dd                	jl     9f0036a1 <.L61+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
			while (len < field_width--)
9f0036c4:	eb 0c                	jmp    9f0036d2 <.L61+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
9f0036c6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0036c9:	8d 50 01             	lea    edx,[eax+0x1]
9f0036cc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0036cf:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
			while (len < field_width--)
9f0036d2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0036d5:	8d 50 ff             	lea    edx,[eax-0x1]
9f0036d8:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f0036db:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
9f0036de:	7c e6                	jl     9f0036c6 <.L61+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:211
			continue;
9f0036e0:	e9 75 01 00 00       	jmp    9f00385a <.L95+0x8a>

9f0036e5 <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214

		case 'p':
			if (field_width == -1) {
9f0036e5:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f0036e9:	75 0b                	jne    9f0036f6 <.L62+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				field_width = 2 * sizeof(void *);
9f0036eb:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:216
				flags |= ZEROPAD;
9f0036f2:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:219
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f0036f6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0036f9:	8d 50 04             	lea    edx,[eax+0x4]
9f0036fc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0036ff:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
			str = number(str,
9f003701:	83 ec 08             	sub    esp,0x8
9f003704:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f003707:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f00370a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f00370d:	6a 10                	push   0x10
9f00370f:	50                   	push   eax
9f003710:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f003713:	e8 e0 fa ff ff       	call   9f0031f8 <number>
9f003718:	83 c4 20             	add    esp,0x20
9f00371b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:221
				     field_width, precision, flags);
			continue;
9f00371e:	e9 37 01 00 00       	jmp    9f00385a <.L95+0x8a>

9f003723 <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224

		case 'n':
			if (qualifier == 'l') {
9f003723:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f003727:	75 20                	jne    9f003749 <.L64+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				long *ip = va_arg(args, long *);
9f003729:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00372c:	8d 50 04             	lea    edx,[eax+0x4]
9f00372f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003732:	8b 00                	mov    eax,DWORD PTR [eax]
9f003734:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:226
				*ip = (str - buf);
9f003737:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00373a:	2b 45 08             	sub    eax,DWORD PTR [ebp+0x8]
9f00373d:	89 c2                	mov    edx,eax
9f00373f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f003742:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:231
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f003744:	e9 11 01 00 00       	jmp    9f00385a <.L95+0x8a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
				int *ip = va_arg(args, int *);
9f003749:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00374c:	8d 50 04             	lea    edx,[eax+0x4]
9f00374f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003752:	8b 00                	mov    eax,DWORD PTR [eax]
9f003754:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:229
				*ip = (str - buf);
9f003757:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00375a:	2b 45 08             	sub    eax,DWORD PTR [ebp+0x8]
9f00375d:	89 c2                	mov    edx,eax
9f00375f:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f003762:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:231
			continue;
9f003764:	e9 f1 00 00 00       	jmp    9f00385a <.L95+0x8a>

9f003769 <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234

		case '%':
			*str++ = '%';
9f003769:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00376c:	8d 50 01             	lea    edx,[eax+0x1]
9f00376f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003772:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:235
			continue;
9f003775:	e9 e0 00 00 00       	jmp    9f00385a <.L95+0x8a>

9f00377a <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f00377a:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:240
			break;
9f003781:	eb 4e                	jmp    9f0037d1 <.L95+0x1>

9f003783 <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:243

		case 'x':
			flags |= SMALL;
9f003783:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f003787 <.L67>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
		case 'X':
			base = 16;
9f003787:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:246
			break;
9f00378e:	eb 41                	jmp    9f0037d1 <.L95+0x1>

9f003790 <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:250

		case 'd':
		case 'i':
			flags |= SIGN;
9f003790:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:252
		case 'u':
			break;
9f003794:	eb 3a                	jmp    9f0037d0 <.L95>

9f003796 <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255

		default:
			*str++ = '%';
9f003796:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003799:	8d 50 01             	lea    edx,[eax+0x1]
9f00379c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00379f:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
			if (*fmt)
9f0037a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0037a5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0037a8:	84 c0                	test   al,al
9f0037aa:	74 16                	je     9f0037c2 <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:257
				*str++ = *fmt;
9f0037ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0037af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0037b2:	8d 48 01             	lea    ecx,[eax+0x1]
9f0037b5:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
9f0037b8:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0037bb:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:260
			else
				--fmt;
			continue;
9f0037bd:	e9 98 00 00 00       	jmp    9f00385a <.L95+0x8a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
				--fmt;
9f0037c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0037c5:	83 e8 01             	sub    eax,0x1
9f0037c8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:260
			continue;
9f0037cb:	e9 8a 00 00 00       	jmp    9f00385a <.L95+0x8a>

9f0037d0 <.L95>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:252
			break;
9f0037d0:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
		}
		if (qualifier == 'l')
9f0037d1:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f0037d5:	75 10                	jne    9f0037e7 <.L95+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
			num = va_arg(args, unsigned long);
9f0037d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0037da:	8d 50 04             	lea    edx,[eax+0x4]
9f0037dd:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0037e0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0037e2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0037e5:	eb 52                	jmp    9f003839 <.L95+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
		else if (qualifier == 'h') {
9f0037e7:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f0037eb:	75 24                	jne    9f003811 <.L95+0x41>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			num = (unsigned short)va_arg(args, int);
9f0037ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0037f0:	8d 50 04             	lea    edx,[eax+0x4]
9f0037f3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0037f6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0037f8:	0f b7 c0             	movzx  eax,ax
9f0037fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
			if (flags & SIGN)
9f0037fe:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003801:	83 e0 02             	and    eax,0x2
9f003804:	85 c0                	test   eax,eax
9f003806:	74 31                	je     9f003839 <.L95+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
				num = (short)num;
9f003808:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00380b:	98                   	cwde   
9f00380c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00380f:	eb 28                	jmp    9f003839 <.L95+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
		} else if (flags & SIGN)
9f003811:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003814:	83 e0 02             	and    eax,0x2
9f003817:	85 c0                	test   eax,eax
9f003819:	74 10                	je     9f00382b <.L95+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:269
			num = va_arg(args, int);
9f00381b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00381e:	8d 50 04             	lea    edx,[eax+0x4]
9f003821:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003824:	8b 00                	mov    eax,DWORD PTR [eax]
9f003826:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f003829:	eb 0e                	jmp    9f003839 <.L95+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		else
			num = va_arg(args, unsigned int);
9f00382b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00382e:	8d 50 04             	lea    edx,[eax+0x4]
9f003831:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003834:	8b 00                	mov    eax,DWORD PTR [eax]
9f003836:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:272
		str = number(str, num, base, field_width, precision, flags);
9f003839:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00383c:	83 ec 08             	sub    esp,0x8
9f00383f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f003842:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f003845:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f003848:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00384b:	50                   	push   eax
9f00384c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f00384f:	e8 a4 f9 ff ff       	call   9f0031f8 <number>
9f003854:	83 c4 20             	add    esp,0x20
9f003857:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120 (discriminator 2)
	for (str = buf; *fmt; ++fmt) {
9f00385a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00385d:	83 c0 01             	add    eax,0x1
9f003860:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120 (discriminator 1)
9f003863:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003866:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003869:	84 c0                	test   al,al
9f00386b:	0f 85 e8 fb ff ff    	jne    9f003459 <vsprintf+0x21>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
	}
	*str = '\0';
9f003871:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003874:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
	return str - buf;
9f003877:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00387a:	2b 45 08             	sub    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:276
}
9f00387d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003880:	c9                   	leave  
9f003881:	c3                   	ret    

9f003882 <sprintfI>:
sprintfI():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:279

int sprintfI(char *buf, const char *fmt, ...)
{
9f003882:	f3 0f 1e fb          	endbr32 
9f003886:	55                   	push   ebp
9f003887:	89 e5                	mov    ebp,esp
9f003889:	83 ec 18             	sub    esp,0x18
9f00388c:	e8 7d 19 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003891:	05 6b 46 00 00       	add    eax,0x466b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	va_list args;
	int i;

	va_start(args, fmt);
9f003896:	8d 45 10             	lea    eax,[ebp+0x10]
9f003899:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:284
	i = vsprintf(buf, fmt, args);
9f00389c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00389f:	83 ec 04             	sub    esp,0x4
9f0038a2:	50                   	push   eax
9f0038a3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0038a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0038a9:	e8 8a fb ff ff       	call   9f003438 <vsprintf>
9f0038ae:	83 c4 10             	add    esp,0x10
9f0038b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
	va_end(args);
	return i;
9f0038b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:287
}
9f0038b7:	c9                   	leave  
9f0038b8:	c3                   	ret    

9f0038b9 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:290

VISIBLE int sprintf(char *buf, const char *fmt, ...)
{
9f0038b9:	f3 0f 1e fb          	endbr32 
9f0038bd:	55                   	push   ebp
9f0038be:	89 e5                	mov    ebp,esp
9f0038c0:	83 ec 18             	sub    esp,0x18
9f0038c3:	e8 46 19 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0038c8:	05 34 46 00 00       	add    eax,0x4634
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:294
	va_list args;
	int i;

	va_start(args, fmt);
9f0038cd:	8d 45 10             	lea    eax,[ebp+0x10]
9f0038d0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:295
	i = vsprintf(buf, fmt, args);
9f0038d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0038d6:	83 ec 04             	sub    esp,0x4
9f0038d9:	50                   	push   eax
9f0038da:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0038dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0038e0:	e8 53 fb ff ff       	call   9f003438 <vsprintf>
9f0038e5:	83 c4 10             	add    esp,0x10
9f0038e8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:297
	va_end(args);
	return i;
9f0038eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:298
9f0038ee:	c9                   	leave  
9f0038ef:	c3                   	ret    

9f0038f0 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:18
extern int gets(char* buffer, int maxlen, int stream);


//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f0038f0:	f3 0f 1e fb          	endbr32 
9f0038f4:	55                   	push   ebp
9f0038f5:	89 e5                	mov    ebp,esp
9f0038f7:	53                   	push   ebx
9f0038f8:	83 ec 14             	sub    esp,0x14
9f0038fb:	e8 12 19 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f003900:	81 c3 fc 45 00 00    	add    ebx,0x45fc
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:20
    char buff[5];
    int buffPtr=0;
9f003906:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:22

    memsetI(buff,0,10);
9f00390d:	83 ec 04             	sub    esp,0x4
9f003910:	6a 0a                	push   0xa
9f003912:	6a 00                	push   0x0
9f003914:	8d 45 ef             	lea    eax,[ebp-0x11]
9f003917:	50                   	push   eax
9f003918:	e8 71 f1 ff ff       	call   9f002a8e <memsetI>
9f00391d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f003920:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003923:	8d 50 01             	lea    edx,[eax+0x1]
9f003926:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003929:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
    buff[buffPtr++] = '[';
9f00392e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003931:	8d 50 01             	lea    edx,[eax+0x1]
9f003934:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003937:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:27
    buff[buffPtr++] = '0';
9f00393c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00393f:	8d 50 01             	lea    edx,[eax+0x1]
9f003942:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003945:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:28
    buff[buffPtr++] = 'K';
9f00394a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00394d:	8d 50 01             	lea    edx,[eax+0x1]
9f003950:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003953:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29
    buff[buffPtr] = '\0';
9f003958:	8d 55 ef             	lea    edx,[ebp-0x11]
9f00395b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00395e:	01 d0                	add    eax,edx
9f003960:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:30
    printI(buff);
9f003963:	83 ec 0c             	sub    esp,0xc
9f003966:	8d 45 ef             	lea    eax,[ebp-0x11]
9f003969:	50                   	push   eax
9f00396a:	e8 71 dd ff ff       	call   9f0016e0 <printI>
9f00396f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
    
    return;
9f003972:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:33
}
9f003973:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003976:	c9                   	leave  
9f003977:	c3                   	ret    

9f003978 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f003978:	f3 0f 1e fb          	endbr32 
9f00397c:	55                   	push   ebp
9f00397d:	89 e5                	mov    ebp,esp
9f00397f:	53                   	push   ebx
9f003980:	83 ec 04             	sub    esp,0x4
9f003983:	e8 8a 18 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f003988:	81 c3 74 45 00 00    	add    ebx,0x4574
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     strcpyI (dest + strlenI (dest), src);
9f00398e:	83 ec 0c             	sub    esp,0xc
9f003991:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003994:	e8 e1 02 00 00       	call   9f003c7a <strlenI>
9f003999:	83 c4 10             	add    esp,0x10
9f00399c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00399f:	01 d0                	add    eax,edx
9f0039a1:	83 ec 08             	sub    esp,0x8
9f0039a4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0039a7:	50                   	push   eax
9f0039a8:	e8 ad 01 00 00       	call   9f003b5a <strcpyI>
9f0039ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
     return dest;
9f0039b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:34
   }
9f0039b3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0039b6:	c9                   	leave  
9f0039b7:	c3                   	ret    

9f0039b8 <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37

   char* strcatI (char *dest, const char *src)
   {
9f0039b8:	f3 0f 1e fb          	endbr32 
9f0039bc:	55                   	push   ebp
9f0039bd:	89 e5                	mov    ebp,esp
9f0039bf:	53                   	push   ebx
9f0039c0:	83 ec 04             	sub    esp,0x4
9f0039c3:	e8 4a 18 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0039c8:	81 c3 34 45 00 00    	add    ebx,0x4534
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     strcpyI (dest + strlenI (dest), src);
9f0039ce:	83 ec 0c             	sub    esp,0xc
9f0039d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0039d4:	e8 a1 02 00 00       	call   9f003c7a <strlenI>
9f0039d9:	83 c4 10             	add    esp,0x10
9f0039dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0039df:	01 d0                	add    eax,edx
9f0039e1:	83 ec 08             	sub    esp,0x8
9f0039e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0039e7:	50                   	push   eax
9f0039e8:	e8 6d 01 00 00       	call   9f003b5a <strcpyI>
9f0039ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
     return dest;
9f0039f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:40
   }
9f0039f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0039f6:	c9                   	leave  
9f0039f7:	c3                   	ret    

9f0039f8 <strncatI>:
strncatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:43
   
char *strncatI(char *dest, const char *src, size_t n)
{
9f0039f8:	f3 0f 1e fb          	endbr32 
9f0039fc:	55                   	push   ebp
9f0039fd:	89 e5                	mov    ebp,esp
9f0039ff:	53                   	push   ebx
9f003a00:	83 ec 14             	sub    esp,0x14
9f003a03:	e8 0a 18 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f003a08:	81 c3 f4 44 00 00    	add    ebx,0x44f4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
    size_t bytesToCopy=0;
9f003a0e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:45
    size_t srcStringLen=strlenI(src);;
9f003a15:	83 ec 0c             	sub    esp,0xc
9f003a18:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003a1b:	e8 5a 02 00 00       	call   9f003c7a <strlenI>
9f003a20:	83 c4 10             	add    esp,0x10
9f003a23:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
    
    if (n<=srcStringLen)
9f003a26:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003a29:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003a2c:	77 08                	ja     9f003a36 <strncatI+0x3e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:48
        bytesToCopy=n;
9f003a2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003a31:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f003a34:	eb 06                	jmp    9f003a3c <strncatI+0x44>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
    else
        bytesToCopy=srcStringLen;
9f003a36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003a39:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
    
     strncpyI (dest + strlenI (dest),src,bytesToCopy);
9f003a3c:	83 ec 0c             	sub    esp,0xc
9f003a3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003a42:	e8 33 02 00 00       	call   9f003c7a <strlenI>
9f003a47:	83 c4 10             	add    esp,0x10
9f003a4a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003a4d:	01 d0                	add    eax,edx
9f003a4f:	83 ec 04             	sub    esp,0x4
9f003a52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f003a55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003a58:	50                   	push   eax
9f003a59:	e8 a4 03 00 00       	call   9f003e02 <strncpyI>
9f003a5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
     return dest;
9f003a61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
}
9f003a64:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003a67:	c9                   	leave  
9f003a68:	c3                   	ret    

9f003a69 <strncat>:
strncat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:57

VISIBLE char *strncat(char *dest, const char *src, size_t n)
{
9f003a69:	f3 0f 1e fb          	endbr32 
9f003a6d:	55                   	push   ebp
9f003a6e:	89 e5                	mov    ebp,esp
9f003a70:	83 ec 08             	sub    esp,0x8
9f003a73:	e8 96 17 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003a78:	05 84 44 00 00       	add    eax,0x4484
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
    return strncatI(dest, src, n);
9f003a7d:	83 ec 04             	sub    esp,0x4
9f003a80:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003a83:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003a86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003a89:	e8 6a ff ff ff       	call   9f0039f8 <strncatI>
9f003a8e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
9f003a91:	c9                   	leave  
9f003a92:	c3                   	ret    

9f003a93 <strcmpI>:
strcmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
   equal to or greater than S2.  */

#include "libChrisOS.h"

int strcmpI (const char *p1, const char *p2)
{
9f003a93:	f3 0f 1e fb          	endbr32 
9f003a97:	55                   	push   ebp
9f003a98:	89 e5                	mov    ebp,esp
9f003a9a:	56                   	push   esi
9f003a9b:	53                   	push   ebx
9f003a9c:	83 ec 10             	sub    esp,0x10
9f003a9f:	e8 6a 17 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003aa4:	05 58 44 00 00       	add    eax,0x4458
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:28
  register const unsigned char *s1 = (const unsigned char *) p1;
9f003aa9:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:29
  register const unsigned char *s2 = (const unsigned char *) p2;
9f003aac:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f003aaf:	89 d8                	mov    eax,ebx
9f003ab1:	8d 58 01             	lea    ebx,[eax+0x1]
9f003ab4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ab7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
      c2 = (unsigned char) *s2++;
9f003aba:	89 f0                	mov    eax,esi
9f003abc:	8d 70 01             	lea    esi,[eax+0x1]
9f003abf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ac2:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:36
      if (c1 == '\0')
9f003ac5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f003ac9:	75 0e                	jne    9f003ad9 <strcmpI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
	return c1 - c2;
9f003acb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f003acf:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f003ad3:	29 c2                	sub    edx,eax
9f003ad5:	89 d0                	mov    eax,edx
9f003ad7:	eb 15                	jmp    9f003aee <strcmpI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39
    }
  while (c1 == c2);
9f003ad9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f003add:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f003ae0:	74 cd                	je     9f003aaf <strcmpI+0x1c>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:41

  return c1 - c2;
9f003ae2:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f003ae6:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f003aea:	29 c2                	sub    edx,eax
9f003aec:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:42
}
9f003aee:	83 c4 10             	add    esp,0x10
9f003af1:	5b                   	pop    ebx
9f003af2:	5e                   	pop    esi
9f003af3:	5d                   	pop    ebp
9f003af4:	c3                   	ret    

9f003af5 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:45

VISIBLE int strcmp(const char *p1, const char *p2)
{
9f003af5:	f3 0f 1e fb          	endbr32 
9f003af9:	55                   	push   ebp
9f003afa:	89 e5                	mov    ebp,esp
9f003afc:	e8 0d 17 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003b01:	05 fb 43 00 00       	add    eax,0x43fb
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:46
    return strcmpI(p1, p2);
9f003b06:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003b09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003b0c:	e8 82 ff ff ff       	call   9f003a93 <strcmpI>
9f003b11:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:47
9f003b14:	c9                   	leave  
9f003b15:	c3                   	ret    

9f003b16 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f003b16:	f3 0f 1e fb          	endbr32 
9f003b1a:	55                   	push   ebp
9f003b1b:	89 e5                	mov    ebp,esp
9f003b1d:	83 ec 10             	sub    esp,0x10
9f003b20:	e8 e9 16 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003b25:	05 d7 43 00 00       	add    eax,0x43d7
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f003b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b2d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f003b30:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f003b31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003b34:	8d 42 01             	lea    eax,[edx+0x1]
9f003b37:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f003b3a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003b3d:	8d 48 01             	lea    ecx,[eax+0x1]
9f003b40:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f003b43:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003b46:	88 10                	mov    BYTE PTR [eax],dl
9f003b48:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b4b:	84 c0                	test   al,al
9f003b4d:	75 e2                	jne    9f003b31 <strcpy+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f003b4f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003b52:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f003b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f003b58:	c9                   	leave  
9f003b59:	c3                   	ret    

9f003b5a <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f003b5a:	f3 0f 1e fb          	endbr32 
9f003b5e:	55                   	push   ebp
9f003b5f:	89 e5                	mov    ebp,esp
9f003b61:	83 ec 10             	sub    esp,0x10
9f003b64:	e8 a5 16 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003b69:	05 93 43 00 00       	add    eax,0x4393
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f003b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b71:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f003b74:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f003b75:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003b78:	8d 42 01             	lea    eax,[edx+0x1]
9f003b7b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f003b7e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003b81:	8d 48 01             	lea    ecx,[eax+0x1]
9f003b84:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f003b87:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003b8a:	88 10                	mov    BYTE PTR [eax],dl
9f003b8c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b8f:	84 c0                	test   al,al
9f003b91:	75 e2                	jne    9f003b75 <strcpyI+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f003b93:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003b96:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f003b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f003b9c:	c9                   	leave  
9f003b9d:	c3                   	ret    

9f003b9e <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f003b9e:	f3 0f 1e fb          	endbr32 
9f003ba2:	55                   	push   ebp
9f003ba3:	89 e5                	mov    ebp,esp
9f003ba5:	83 ec 10             	sub    esp,0x10
9f003ba8:	e8 61 16 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003bad:	05 4f 43 00 00       	add    eax,0x434f
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f003bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003bb5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f003bb8:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f003bb9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003bbc:	8d 42 01             	lea    eax,[edx+0x1]
9f003bbf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f003bc2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003bc5:	8d 48 01             	lea    ecx,[eax+0x1]
9f003bc8:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f003bcb:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003bce:	88 10                	mov    BYTE PTR [eax],dl
9f003bd0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003bd3:	84 c0                	test   al,al
9f003bd5:	74 0d                	je     9f003be4 <strcpyc+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f003bd7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003bda:	8d 50 ff             	lea    edx,[eax-0x1]
9f003bdd:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003be0:	85 c0                	test   eax,eax
9f003be2:	75 d5                	jne    9f003bb9 <strcpyc+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f003be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f003be7:	c9                   	leave  
9f003be8:	c3                   	ret    

9f003be9 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f003be9:	f3 0f 1e fb          	endbr32 
9f003bed:	55                   	push   ebp
9f003bee:	89 e5                	mov    ebp,esp
9f003bf0:	83 ec 04             	sub    esp,0x4
9f003bf3:	e8 16 16 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003bf8:	05 04 43 00 00       	add    eax,0x4304
9f003bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c00:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f003c03:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f003c07:	7e 0d                	jle    9f003c16 <check_digit+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f003c09:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f003c0d:	7f 07                	jg     9f003c16 <check_digit+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f003c0f:	b8 01 00 00 00       	mov    eax,0x1
9f003c14:	eb 05                	jmp    9f003c1b <check_digit+0x32>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f003c16:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f003c1b:	c9                   	leave  
9f003c1c:	c3                   	ret    

9f003c1d <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f003c1d:	f3 0f 1e fb          	endbr32 
9f003c21:	55                   	push   ebp
9f003c22:	89 e5                	mov    ebp,esp
9f003c24:	83 ec 10             	sub    esp,0x10
9f003c27:	e8 e2 15 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003c2c:	05 d0 42 00 00       	add    eax,0x42d0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f003c31:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f003c38:	eb 27                	jmp    9f003c61 <strisnum+0x44>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f003c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c3d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003c40:	89 c2                	mov    edx,eax
9f003c42:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003c45:	01 d0                	add    eax,edx
9f003c47:	0f be c0             	movsx  eax,al
9f003c4a:	50                   	push   eax
9f003c4b:	e8 99 ff ff ff       	call   9f003be9 <check_digit>
9f003c50:	83 c4 04             	add    esp,0x4
9f003c53:	83 f0 01             	xor    eax,0x1
9f003c56:	84 c0                	test   al,al
9f003c58:	74 07                	je     9f003c61 <strisnum+0x44>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f003c5a:	b8 00 00 00 00       	mov    eax,0x0
9f003c5f:	eb 17                	jmp    9f003c78 <strisnum+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    while (*str+cnt)
9f003c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003c67:	0f be d0             	movsx  edx,al
9f003c6a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003c6d:	01 d0                	add    eax,edx
9f003c6f:	85 c0                	test   eax,eax
9f003c71:	75 c7                	jne    9f003c3a <strisnum+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
    return true;
9f003c73:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f003c78:	c9                   	leave  
9f003c79:	c3                   	ret    

9f003c7a <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
9f003c7a:	f3 0f 1e fb          	endbr32 
9f003c7e:	55                   	push   ebp
9f003c7f:	89 e5                	mov    ebp,esp
9f003c81:	83 ec 10             	sub    esp,0x10
9f003c84:	e8 85 15 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003c89:	05 73 42 00 00       	add    eax,0x4273
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
          size_t ret = 0;
9f003c8e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f003c95:	eb 04                	jmp    9f003c9b <strlenI+0x21>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
9f003c97:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f003c9b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003c9e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003ca1:	01 d0                	add    eax,edx
9f003ca3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ca6:	84 c0                	test   al,al
9f003ca8:	75 ed                	jne    9f003c97 <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
        return ret;
9f003caa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:9
}
9f003cad:	c9                   	leave  
9f003cae:	c3                   	ret    

9f003caf <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12

__attribute__((visibility("default"))) size_t strlen(const char* str) 
{
9f003caf:	f3 0f 1e fb          	endbr32 
9f003cb3:	55                   	push   ebp
9f003cb4:	89 e5                	mov    ebp,esp
9f003cb6:	e8 53 15 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003cbb:	05 41 42 00 00       	add    eax,0x4241
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
    return strlenI(str);
9f003cc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003cc3:	e8 b2 ff ff ff       	call   9f003c7a <strlenI>
9f003cc8:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
}
9f003ccb:	c9                   	leave  
9f003ccc:	c3                   	ret    

9f003ccd <strnlenI>:
strnlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:17

size_t strnlenI(const char* str, size_t maxlen)
{
9f003ccd:	f3 0f 1e fb          	endbr32 
9f003cd1:	55                   	push   ebp
9f003cd2:	89 e5                	mov    ebp,esp
9f003cd4:	83 ec 10             	sub    esp,0x10
9f003cd7:	e8 32 15 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003cdc:	05 20 42 00 00       	add    eax,0x4220
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:18
  size_t ret = 0;
9f003ce1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f003ce8:	eb 04                	jmp    9f003cee <strnlenI+0x21>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:20
          ret++;
9f003cea:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f003cee:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003cf1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003cf4:	01 d0                	add    eax,edx
9f003cf6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003cf9:	84 c0                	test   al,al
9f003cfb:	74 08                	je     9f003d05 <strnlenI+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19 (discriminator 1)
9f003cfd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003d00:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f003d03:	72 e5                	jb     9f003cea <strnlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:21
  return ret;
9f003d05:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:22
}
9f003d08:	c9                   	leave  
9f003d09:	c3                   	ret    

9f003d0a <strnlen>:
strnlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:25

VISIBLE size_t strnlen(const char* str, int maxlen)
{
9f003d0a:	f3 0f 1e fb          	endbr32 
9f003d0e:	55                   	push   ebp
9f003d0f:	89 e5                	mov    ebp,esp
9f003d11:	e8 f8 14 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003d16:	05 e6 41 00 00       	add    eax,0x41e6
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:26
    return strnlenI(str, maxlen);
9f003d1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003d1e:	50                   	push   eax
9f003d1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003d22:	e8 a6 ff ff ff       	call   9f003ccd <strnlenI>
9f003d27:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:27
9f003d2a:	c9                   	leave  
9f003d2b:	c3                   	ret    

9f003d2c <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f003d2c:	f3 0f 1e fb          	endbr32 
9f003d30:	55                   	push   ebp
9f003d31:	89 e5                	mov    ebp,esp
9f003d33:	e8 d6 14 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003d38:	05 c4 41 00 00       	add    eax,0x41c4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f003d3d:	eb 4b                	jmp    9f003d8a <strncmp+0x5e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f003d3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003d42:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003d45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003d48:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003d4b:	38 c2                	cmp    dl,al
9f003d4d:	74 1e                	je     9f003d6d <strncmp+0x41>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f003d4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003d52:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003d55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003d58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003d5b:	38 c2                	cmp    dl,al
9f003d5d:	73 07                	jae    9f003d66 <strncmp+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f003d5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003d64:	eb 2f                	jmp    9f003d95 <strncmp+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f003d66:	b8 01 00 00 00       	mov    eax,0x1
9f003d6b:	eb 28                	jmp    9f003d95 <strncmp+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f003d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003d70:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003d73:	84 c0                	test   al,al
9f003d75:	75 07                	jne    9f003d7e <strncmp+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f003d77:	b8 00 00 00 00       	mov    eax,0x0
9f003d7c:	eb 17                	jmp    9f003d95 <strncmp+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f003d7e:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f003d82:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f003d86:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f003d8a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003d8e:	75 af                	jne    9f003d3f <strncmp+0x13>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
    return 0;
9f003d90:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f003d95:	5d                   	pop    ebp
9f003d96:	c3                   	ret    

9f003d97 <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f003d97:	f3 0f 1e fb          	endbr32 
9f003d9b:	55                   	push   ebp
9f003d9c:	89 e5                	mov    ebp,esp
9f003d9e:	e8 6b 14 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003da3:	05 59 41 00 00       	add    eax,0x4159
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f003da8:	eb 4b                	jmp    9f003df5 <strncmpI+0x5e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f003daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003dad:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003db0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003db3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003db6:	38 c2                	cmp    dl,al
9f003db8:	74 1e                	je     9f003dd8 <strncmpI+0x41>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f003dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003dbd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003dc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003dc3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003dc6:	38 c2                	cmp    dl,al
9f003dc8:	73 07                	jae    9f003dd1 <strncmpI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f003dca:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003dcf:	eb 2f                	jmp    9f003e00 <strncmpI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f003dd1:	b8 01 00 00 00       	mov    eax,0x1
9f003dd6:	eb 28                	jmp    9f003e00 <strncmpI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f003dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003dde:	84 c0                	test   al,al
9f003de0:	75 07                	jne    9f003de9 <strncmpI+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f003de2:	b8 00 00 00 00       	mov    eax,0x0
9f003de7:	eb 17                	jmp    9f003e00 <strncmpI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f003de9:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f003ded:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f003df1:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f003df5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003df9:	75 af                	jne    9f003daa <strncmpI+0x13>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
    return 0;
9f003dfb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f003e00:	5d                   	pop    ebp
9f003e01:	c3                   	ret    

9f003e02 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f003e02:	f3 0f 1e fb          	endbr32 
9f003e06:	55                   	push   ebp
9f003e07:	89 e5                	mov    ebp,esp
9f003e09:	83 ec 10             	sub    esp,0x10
9f003e0c:	e8 fd 13 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003e11:	05 eb 40 00 00       	add    eax,0x40eb
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f003e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003e19:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f003e1c:	eb 1b                	jmp    9f003e39 <strncpyI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f003e1e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003e21:	8d 42 01             	lea    eax,[edx+0x1]
9f003e24:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f003e27:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003e2a:	8d 48 01             	lea    ecx,[eax+0x1]
9f003e2d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f003e30:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003e33:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f003e35:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f003e39:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003e3d:	74 1c                	je     9f003e5b <strncpyI+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f003e3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e42:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003e45:	84 c0                	test   al,al
9f003e47:	75 d5                	jne    9f003e1e <strncpyI+0x1c>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    }
    while (n > 0) {
9f003e49:	eb 10                	jmp    9f003e5b <strncpyI+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f003e4b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003e4e:	8d 50 01             	lea    edx,[eax+0x1]
9f003e51:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003e54:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f003e57:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    while (n > 0) {
9f003e5b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003e5f:	75 ea                	jne    9f003e4b <strncpyI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
    }
    if (n==0)
9f003e61:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003e65:	75 06                	jne    9f003e6d <strncpyI+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
        *s='\0';
9f003e67:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003e6a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:26
    return s1;
9f003e6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:27
}
9f003e70:	c9                   	leave  
9f003e71:	c3                   	ret    

9f003e72 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f003e72:	f3 0f 1e fb          	endbr32 
9f003e76:	55                   	push   ebp
9f003e77:	89 e5                	mov    ebp,esp
9f003e79:	e8 90 13 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003e7e:	05 7e 40 00 00       	add    eax,0x407e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:31
    return strncpyI(s1, s2, n);
9f003e83:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003e86:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003e89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003e8c:	e8 71 ff ff ff       	call   9f003e02 <strncpyI>
9f003e91:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:32
}
9f003e94:	c9                   	leave  
9f003e95:	c3                   	ret    

9f003e96 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f003e96:	f3 0f 1e fb          	endbr32 
9f003e9a:	55                   	push   ebp
9f003e9b:	89 e5                	mov    ebp,esp
9f003e9d:	57                   	push   edi
9f003e9e:	56                   	push   esi
9f003e9f:	53                   	push   ebx
9f003ea0:	83 ec 08             	sub    esp,0x8
9f003ea3:	e8 66 13 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f003ea8:	05 54 40 00 00       	add    eax,0x4054
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f003ead:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f003eb0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f003eb7:	89 f0                	mov    eax,esi
9f003eb9:	8d 70 01             	lea    esi,[eax+0x1]
9f003ebc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ebf:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f003ec2:	83 fb 20             	cmp    ebx,0x20
9f003ec5:	74 f0                	je     9f003eb7 <strtoul+0x21>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f003ec7:	83 fb 2d             	cmp    ebx,0x2d
9f003eca:	75 14                	jne    9f003ee0 <strtoul+0x4a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f003ecc:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f003ed3:	89 f0                	mov    eax,esi
9f003ed5:	8d 70 01             	lea    esi,[eax+0x1]
9f003ed8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003edb:	0f be d8             	movsx  ebx,al
9f003ede:	eb 10                	jmp    9f003ef0 <strtoul+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f003ee0:	83 fb 2b             	cmp    ebx,0x2b
9f003ee3:	75 0b                	jne    9f003ef0 <strtoul+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f003ee5:	89 f0                	mov    eax,esi
9f003ee7:	8d 70 01             	lea    esi,[eax+0x1]
9f003eea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003eed:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f003ef0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003ef4:	74 06                	je     9f003efc <strtoul+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f003ef6:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003efa:	75 26                	jne    9f003f22 <strtoul+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f003efc:	83 fb 30             	cmp    ebx,0x30
9f003eff:	75 21                	jne    9f003f22 <strtoul+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f003f01:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003f04:	3c 78                	cmp    al,0x78
9f003f06:	74 07                	je     9f003f0f <strtoul+0x79>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f003f08:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003f0b:	3c 58                	cmp    al,0x58
9f003f0d:	75 13                	jne    9f003f22 <strtoul+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f003f0f:	8d 46 01             	lea    eax,[esi+0x1]
9f003f12:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003f15:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f003f18:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f003f1b:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f003f22:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003f26:	75 14                	jne    9f003f3c <strtoul+0xa6>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f003f28:	83 fb 30             	cmp    ebx,0x30
9f003f2b:	75 07                	jne    9f003f34 <strtoul+0x9e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f003f2d:	b8 08 00 00 00       	mov    eax,0x8
9f003f32:	eb 05                	jmp    9f003f39 <strtoul+0xa3>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f003f34:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f003f39:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f003f3c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003f3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003f44:	ba 00 00 00 00       	mov    edx,0x0
9f003f49:	f7 f1                	div    ecx
9f003f4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f003f4e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003f51:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003f56:	ba 00 00 00 00       	mov    edx,0x0
9f003f5b:	f7 f1                	div    ecx
9f003f5d:	89 d0                	mov    eax,edx
9f003f5f:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f003f61:	bf 00 00 00 00       	mov    edi,0x0
9f003f66:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f003f6b:	8d 43 d0             	lea    eax,[ebx-0x30]
9f003f6e:	83 f8 09             	cmp    eax,0x9
9f003f71:	77 05                	ja     9f003f78 <strtoul+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f003f73:	83 eb 30             	sub    ebx,0x30
9f003f76:	eb 25                	jmp    9f003f9d <strtoul+0x107>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f003f78:	89 d8                	mov    eax,ebx
9f003f7a:	83 c8 20             	or     eax,0x20
9f003f7d:	83 e8 61             	sub    eax,0x61
9f003f80:	83 f8 19             	cmp    eax,0x19
9f003f83:	77 57                	ja     9f003fdc <strtoul+0x146>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f003f85:	83 fb 40             	cmp    ebx,0x40
9f003f88:	7e 0c                	jle    9f003f96 <strtoul+0x100>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f003f8a:	83 fb 5a             	cmp    ebx,0x5a
9f003f8d:	7f 07                	jg     9f003f96 <strtoul+0x100>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f003f8f:	b8 37 00 00 00       	mov    eax,0x37
9f003f94:	eb 05                	jmp    9f003f9b <strtoul+0x105>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f003f96:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f003f9b:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f003f9d:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f003fa0:	7d 3d                	jge    9f003fdf <strtoul+0x149>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f003fa2:	89 c8                	mov    eax,ecx
9f003fa4:	85 c0                	test   eax,eax
9f003fa6:	78 11                	js     9f003fb9 <strtoul+0x123>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f003fa8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003fab:	39 c7                	cmp    edi,eax
9f003fad:	77 0a                	ja     9f003fb9 <strtoul+0x123>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f003faf:	39 c7                	cmp    edi,eax
9f003fb1:	75 0d                	jne    9f003fc0 <strtoul+0x12a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f003fb3:	89 d0                	mov    eax,edx
9f003fb5:	39 c3                	cmp    ebx,eax
9f003fb7:	7e 07                	jle    9f003fc0 <strtoul+0x12a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f003fb9:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f003fbe:	eb 0f                	jmp    9f003fcf <strtoul+0x139>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f003fc0:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f003fc5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003fc8:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f003fcb:	89 d8                	mov    eax,ebx
9f003fcd:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f003fcf:	89 f0                	mov    eax,esi
9f003fd1:	8d 70 01             	lea    esi,[eax+0x1]
9f003fd4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003fd7:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f003fda:	eb 8f                	jmp    9f003f6b <strtoul+0xd5>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
			break;
9f003fdc:	90                   	nop
9f003fdd:	eb 01                	jmp    9f003fe0 <strtoul+0x14a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
			break;
9f003fdf:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
		}
	}
	if (any < 0) {
9f003fe0:	89 c8                	mov    eax,ecx
9f003fe2:	85 c0                	test   eax,eax
9f003fe4:	79 07                	jns    9f003fed <strtoul+0x157>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f003fe6:	bf ff ff ff ff       	mov    edi,0xffffffff
9f003feb:	eb 08                	jmp    9f003ff5 <strtoul+0x15f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f003fed:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003ff1:	74 02                	je     9f003ff5 <strtoul+0x15f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f003ff3:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f003ff5:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003ff9:	74 13                	je     9f00400e <strtoul+0x178>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f003ffb:	89 c8                	mov    eax,ecx
9f003ffd:	85 c0                	test   eax,eax
9f003fff:	74 05                	je     9f004006 <strtoul+0x170>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f004001:	8d 46 ff             	lea    eax,[esi-0x1]
9f004004:	eb 03                	jmp    9f004009 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f004006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f004009:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00400c:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f00400e:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f004010:	83 c4 08             	add    esp,0x8
9f004013:	5b                   	pop    ebx
9f004014:	5e                   	pop    esi
9f004015:	5f                   	pop    edi
9f004016:	5d                   	pop    ebp
9f004017:	c3                   	ret    

9f004018 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f004018:	f3 0f 1e fb          	endbr32 
9f00401c:	55                   	push   ebp
9f00401d:	89 e5                	mov    ebp,esp
9f00401f:	e8 ea 11 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f004024:	05 d8 3e 00 00       	add    eax,0x3ed8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f004029:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00402c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00402f:	01 d0                	add    eax,edx
9f004031:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f004034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f004037:	5d                   	pop    ebp
9f004038:	c3                   	ret    

9f004039 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f004039:	f3 0f 1e fb          	endbr32 
9f00403d:	55                   	push   ebp
9f00403e:	89 e5                	mov    ebp,esp
9f004040:	57                   	push   edi
9f004041:	56                   	push   esi
9f004042:	53                   	push   ebx
9f004043:	83 ec 0c             	sub    esp,0xc
9f004046:	e8 c3 11 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00404b:	05 b1 3e 00 00       	add    eax,0x3eb1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f004050:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f004053:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f00405a:	89 f0                	mov    eax,esi
9f00405c:	8d 70 01             	lea    esi,[eax+0x1]
9f00405f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004062:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f004065:	83 fb 20             	cmp    ebx,0x20
9f004068:	74 f0                	je     9f00405a <strtol+0x21>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f00406a:	83 fb 2d             	cmp    ebx,0x2d
9f00406d:	75 14                	jne    9f004083 <strtol+0x4a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f00406f:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f004076:	89 f0                	mov    eax,esi
9f004078:	8d 70 01             	lea    esi,[eax+0x1]
9f00407b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00407e:	0f be d8             	movsx  ebx,al
9f004081:	eb 10                	jmp    9f004093 <strtol+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f004083:	83 fb 2b             	cmp    ebx,0x2b
9f004086:	75 0b                	jne    9f004093 <strtol+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f004088:	89 f0                	mov    eax,esi
9f00408a:	8d 70 01             	lea    esi,[eax+0x1]
9f00408d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004090:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f004093:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f004097:	74 06                	je     9f00409f <strtol+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f004099:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f00409d:	75 26                	jne    9f0040c5 <strtol+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f00409f:	83 fb 30             	cmp    ebx,0x30
9f0040a2:	75 21                	jne    9f0040c5 <strtol+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f0040a4:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0040a7:	3c 78                	cmp    al,0x78
9f0040a9:	74 07                	je     9f0040b2 <strtol+0x79>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f0040ab:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0040ae:	3c 58                	cmp    al,0x58
9f0040b0:	75 13                	jne    9f0040c5 <strtol+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f0040b2:	8d 46 01             	lea    eax,[esi+0x1]
9f0040b5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0040b8:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f0040bb:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f0040be:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f0040c5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0040c9:	75 14                	jne    9f0040df <strtol+0xa6>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f0040cb:	83 fb 30             	cmp    ebx,0x30
9f0040ce:	75 07                	jne    9f0040d7 <strtol+0x9e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f0040d0:	b8 08 00 00 00       	mov    eax,0x8
9f0040d5:	eb 05                	jmp    9f0040dc <strtol+0xa3>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f0040d7:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f0040dc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f0040df:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0040e3:	74 07                	je     9f0040ec <strtol+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f0040e5:	b8 00 00 00 80       	mov    eax,0x80000000
9f0040ea:	eb 05                	jmp    9f0040f1 <strtol+0xb8>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f0040ec:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f0040f1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0040f4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0040f7:	ba 00 00 00 00       	mov    edx,0x0
9f0040fc:	f7 f1                	div    ecx
9f0040fe:	89 d1                	mov    ecx,edx
9f004100:	89 c8                	mov    eax,ecx
9f004102:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f004105:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f004108:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00410b:	ba 00 00 00 00       	mov    edx,0x0
9f004110:	f7 f7                	div    edi
9f004112:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f004115:	bf 00 00 00 00       	mov    edi,0x0
9f00411a:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f00411f:	8d 43 d0             	lea    eax,[ebx-0x30]
9f004122:	83 f8 09             	cmp    eax,0x9
9f004125:	77 05                	ja     9f00412c <strtol+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f004127:	83 eb 30             	sub    ebx,0x30
9f00412a:	eb 25                	jmp    9f004151 <strtol+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f00412c:	89 d8                	mov    eax,ebx
9f00412e:	83 c8 20             	or     eax,0x20
9f004131:	83 e8 61             	sub    eax,0x61
9f004134:	83 f8 19             	cmp    eax,0x19
9f004137:	77 56                	ja     9f00418f <strtol+0x156>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f004139:	83 fb 40             	cmp    ebx,0x40
9f00413c:	7e 0c                	jle    9f00414a <strtol+0x111>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f00413e:	83 fb 5a             	cmp    ebx,0x5a
9f004141:	7f 07                	jg     9f00414a <strtol+0x111>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f004143:	b8 37 00 00 00       	mov    eax,0x37
9f004148:	eb 05                	jmp    9f00414f <strtol+0x116>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f00414a:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f00414f:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f004151:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f004154:	7d 3c                	jge    9f004192 <strtol+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f004156:	89 c8                	mov    eax,ecx
9f004158:	85 c0                	test   eax,eax
9f00415a:	78 10                	js     9f00416c <strtol+0x133>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f00415c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00415f:	39 c7                	cmp    edi,eax
9f004161:	77 09                	ja     9f00416c <strtol+0x133>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f004163:	39 c7                	cmp    edi,eax
9f004165:	75 0c                	jne    9f004173 <strtol+0x13a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f004167:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f00416a:	7e 07                	jle    9f004173 <strtol+0x13a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f00416c:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f004171:	eb 0f                	jmp    9f004182 <strtol+0x149>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f004173:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f004178:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00417b:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f00417e:	89 d8                	mov    eax,ebx
9f004180:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	for (acc = 0, any = 0;; c = *s++) {
9f004182:	89 f0                	mov    eax,esi
9f004184:	8d 70 01             	lea    esi,[eax+0x1]
9f004187:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00418a:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f00418d:	eb 90                	jmp    9f00411f <strtol+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
			break;
9f00418f:	90                   	nop
9f004190:	eb 01                	jmp    9f004193 <strtol+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
			break;
9f004192:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
		}
	}
	if (any < 0) {
9f004193:	89 c8                	mov    eax,ecx
9f004195:	85 c0                	test   eax,eax
9f004197:	79 16                	jns    9f0041af <strtol+0x176>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f004199:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00419d:	74 07                	je     9f0041a6 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f00419f:	b8 00 00 00 80       	mov    eax,0x80000000
9f0041a4:	eb 05                	jmp    9f0041ab <strtol+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f0041a6:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f0041ab:	89 c7                	mov    edi,eax
9f0041ad:	eb 08                	jmp    9f0041b7 <strtol+0x17e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f0041af:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0041b3:	74 02                	je     9f0041b7 <strtol+0x17e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f0041b5:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f0041b7:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0041bb:	74 13                	je     9f0041d0 <strtol+0x197>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f0041bd:	89 c8                	mov    eax,ecx
9f0041bf:	85 c0                	test   eax,eax
9f0041c1:	74 05                	je     9f0041c8 <strtol+0x18f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f0041c3:	8d 46 ff             	lea    eax,[esi-0x1]
9f0041c6:	eb 03                	jmp    9f0041cb <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f0041c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f0041cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0041ce:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f0041d0:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f0041d2:	83 c4 0c             	add    esp,0xc
9f0041d5:	5b                   	pop    ebx
9f0041d6:	5e                   	pop    esi
9f0041d7:	5f                   	pop    edi
9f0041d8:	5d                   	pop    ebp
9f0041d9:	c3                   	ret    

9f0041da <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f0041da:	f3 0f 1e fb          	endbr32 
9f0041de:	55                   	push   ebp
9f0041df:	89 e5                	mov    ebp,esp
9f0041e1:	53                   	push   ebx
9f0041e2:	83 ec 14             	sub    esp,0x14
9f0041e5:	e8 24 10 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0041ea:	05 12 3d 00 00       	add    eax,0x3d12
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f0041ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0041f2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0041f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0041f8:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f0041fb:	eb 04                	jmp    9f004201 <strtrimI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f0041fd:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   while (*src==' ')
9f004201:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f004204:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004207:	80 fa 20             	cmp    dl,0x20
9f00420a:	74 f1                	je     9f0041fd <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f00420c:	83 ec 0c             	sub    esp,0xc
9f00420f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f004212:	89 c3                	mov    ebx,eax
9f004214:	e8 61 fa ff ff       	call   9f003c7a <strlenI>
9f004219:	83 c4 10             	add    esp,0x10
9f00421c:	8d 50 ff             	lea    edx,[eax-0x1]
9f00421f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004222:	01 d0                	add    eax,edx
9f004224:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f004227:	eb 0c                	jmp    9f004235 <strtrimI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f004229:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00422c:	8d 50 ff             	lea    edx,[eax-0x1]
9f00422f:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f004232:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f004235:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f004238:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00423b:	76 0a                	jbe    9f004247 <strtrimI+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f00423d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f004240:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004243:	3c 20                	cmp    al,0x20
9f004245:	74 e2                	je     9f004229 <strtrimI+0x4f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
   }

   // Move if needed.
   //
   if (src != dst)
9f004247:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00424a:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00424d:	74 1f                	je     9f00426e <strtrimI+0x94>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f00424f:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f004250:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f004253:	8d 42 01             	lea    eax,[edx+0x1]
9f004256:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f004259:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00425c:	8d 48 01             	lea    ecx,[eax+0x1]
9f00425f:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f004262:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f004265:	88 10                	mov    BYTE PTR [eax],dl
9f004267:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00426a:	84 c0                	test   al,al
9f00426c:	75 e2                	jne    9f004250 <strtrimI+0x76>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f00426e:	90                   	nop
9f00426f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f004272:	c9                   	leave  
9f004273:	c3                   	ret    

9f004274 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f004274:	f3 0f 1e fb          	endbr32 
9f004278:	55                   	push   ebp
9f004279:	89 e5                	mov    ebp,esp
9f00427b:	83 ec 08             	sub    esp,0x8
9f00427e:	e8 8b 0f 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f004283:	05 79 3c 00 00       	add    eax,0x3c79
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f004288:	83 ec 0c             	sub    esp,0xc
9f00428b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00428e:	e8 47 ff ff ff       	call   9f0041da <strtrimI>
9f004293:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f004296:	c9                   	leave  
9f004297:	c3                   	ret    

9f004298 <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14



///NOTE: outString has to be big enough to hold the modified string
char *strreplaceI(const char *in, const char *pattern, const char *by, char *outString)
{
9f004298:	f3 0f 1e fb          	endbr32 
9f00429c:	55                   	push   ebp
9f00429d:	89 e5                	mov    ebp,esp
9f00429f:	56                   	push   esi
9f0042a0:	53                   	push   ebx
9f0042a1:	83 ec 10             	sub    esp,0x10
9f0042a4:	e8 69 0f 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0042a9:	81 c3 53 3c 00 00    	add    ebx,0x3c53
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:15
    size_t outsize = strlenI(in) + 1;
9f0042af:	83 ec 0c             	sub    esp,0xc
9f0042b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0042b5:	e8 c0 f9 ff ff       	call   9f003c7a <strlenI>
9f0042ba:	83 c4 10             	add    esp,0x10
9f0042bd:	83 c0 01             	add    eax,0x1
9f0042c0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:18
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
9f0042c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f0042ca:	e9 9e 00 00 00       	jmp    9f00436d <strreplaceI+0xd5>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        // copy everything up to the pattern
        memcpyI(outString + resoffset, in, needle - in);
9f0042cf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0042d2:	2b 45 08             	sub    eax,DWORD PTR [ebp+0x8]
9f0042d5:	89 c1                	mov    ecx,eax
9f0042d7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0042da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0042dd:	01 d0                	add    eax,edx
9f0042df:	83 ec 04             	sub    esp,0x4
9f0042e2:	51                   	push   ecx
9f0042e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0042e6:	50                   	push   eax
9f0042e7:	e8 df e5 ff ff       	call   9f0028cb <memcpyI>
9f0042ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:23
        resoffset += needle - in;
9f0042ef:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0042f2:	2b 45 08             	sub    eax,DWORD PTR [ebp+0x8]
9f0042f5:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:26

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f0042f8:	83 ec 0c             	sub    esp,0xc
9f0042fb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0042fe:	e8 77 f9 ff ff       	call   9f003c7a <strlenI>
9f004303:	83 c4 10             	add    esp,0x10
9f004306:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f004309:	01 d0                	add    eax,edx
9f00430b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f00430e:	83 ec 0c             	sub    esp,0xc
9f004311:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004314:	e8 61 f9 ff ff       	call   9f003c7a <strlenI>
9f004319:	83 c4 10             	add    esp,0x10
9f00431c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00431f:	89 d6                	mov    esi,edx
9f004321:	29 c6                	sub    esi,eax
9f004323:	83 ec 0c             	sub    esp,0xc
9f004326:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004329:	e8 4c f9 ff ff       	call   9f003c7a <strlenI>
9f00432e:	83 c4 10             	add    esp,0x10
9f004331:	01 f0                	add    eax,esi
9f004333:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(outString + resoffset, by, strlenI(by));
9f004336:	83 ec 0c             	sub    esp,0xc
9f004339:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00433c:	e8 39 f9 ff ff       	call   9f003c7a <strlenI>
9f004341:	83 c4 10             	add    esp,0x10
9f004344:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f004347:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00434a:	01 ca                	add    edx,ecx
9f00434c:	83 ec 04             	sub    esp,0x4
9f00434f:	50                   	push   eax
9f004350:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004353:	52                   	push   edx
9f004354:	e8 72 e5 ff ff       	call   9f0028cb <memcpyI>
9f004359:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f00435c:	83 ec 0c             	sub    esp,0xc
9f00435f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004362:	e8 13 f9 ff ff       	call   9f003c7a <strlenI>
9f004367:	83 c4 10             	add    esp,0x10
9f00436a:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    while ((needle = strstrI(in, pattern))) {
9f00436d:	83 ec 08             	sub    esp,0x8
9f004370:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004373:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004376:	e8 fd 00 00 00       	call   9f004478 <strstrI>
9f00437b:	83 c4 10             	add    esp,0x10
9f00437e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f004381:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f004385:	0f 85 44 ff ff ff    	jne    9f0042cf <strreplaceI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
    }

    // copy the remaining input
    strcpyI(outString + resoffset, in);
9f00438b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f00438e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004391:	01 d0                	add    eax,edx
9f004393:	83 ec 08             	sub    esp,0x8
9f004396:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004399:	50                   	push   eax
9f00439a:	e8 bb f7 ff ff       	call   9f003b5a <strcpyI>
9f00439f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return outString;
9f0043a2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f0043a5:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0043a8:	5b                   	pop    ebx
9f0043a9:	5e                   	pop    esi
9f0043aa:	5d                   	pop    ebp
9f0043ab:	c3                   	ret    

9f0043ac <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by, char *outString)
{
9f0043ac:	f3 0f 1e fb          	endbr32 
9f0043b0:	55                   	push   ebp
9f0043b1:	89 e5                	mov    ebp,esp
9f0043b3:	83 ec 08             	sub    esp,0x8
9f0043b6:	e8 53 0e 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0043bb:	05 41 3b 00 00       	add    eax,0x3b41
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by, outString);
9f0043c0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f0043c3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0043c6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0043c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0043cc:	e8 c7 fe ff ff       	call   9f004298 <strreplaceI>
9f0043d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f0043d4:	c9                   	leave  
9f0043d5:	c3                   	ret    

9f0043d6 <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:53

#include "strings.h"
#include "common.h"

char* strnstrI(char* string, char* substring, int length)
{
9f0043d6:	f3 0f 1e fb          	endbr32 
9f0043da:	55                   	push   ebp
9f0043db:	89 e5                	mov    ebp,esp
9f0043dd:	56                   	push   esi
9f0043de:	53                   	push   ebx
9f0043df:	83 ec 10             	sub    esp,0x10
9f0043e2:	e8 27 0e 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0043e7:	05 15 3b 00 00       	add    eax,0x3b15
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f0043ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0043ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    
    b = substring;
9f0043f2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
    if (*b == 0) {
9f0043f5:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0043f8:	84 c0                	test   al,al
9f0043fa:	75 66                	jne    9f004462 <strnstrI+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64
	return string;
9f0043fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0043ff:	eb 70                	jmp    9f004471 <strnstrI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f004401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004404:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004407:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00440a:	38 c2                	cmp    dl,al
9f00440c:	74 12                	je     9f004420 <strnstrI+0x4a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
            if (len--<=0)
9f00440e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004411:	8d 50 ff             	lea    edx,[eax-0x1]
9f004414:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f004417:	85 c0                	test   eax,eax
9f004419:	7f 42                	jg     9f00445d <strnstrI+0x87>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
                return string;
9f00441b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00441e:	eb 51                	jmp    9f004471 <strnstrI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:72
	    continue;
	}
	a = string;
9f004420:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
9f004423:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f004426:	84 c0                	test   al,al
9f004428:	75 05                	jne    9f00442f <strnstrI+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:75
		return string;
9f00442a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00442d:	eb 42                	jmp    9f004471 <strnstrI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
            if (len--<=0)
9f00442f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004432:	8d 50 ff             	lea    edx,[eax-0x1]
9f004435:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f004438:	85 c0                	test   eax,eax
9f00443a:	7f 05                	jg     9f004441 <strnstrI+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
                return string;
9f00443c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00443f:	eb 30                	jmp    9f004471 <strnstrI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
	    if (*a++ != *b++) {
9f004441:	89 f0                	mov    eax,esi
9f004443:	8d 70 01             	lea    esi,[eax+0x1]
9f004446:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004449:	89 d8                	mov    eax,ebx
9f00444b:	8d 58 01             	lea    ebx,[eax+0x1]
9f00444e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004451:	38 c2                	cmp    dl,al
9f004453:	75 02                	jne    9f004457 <strnstrI+0x81>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	    if (*b == 0) {
9f004455:	eb cc                	jmp    9f004423 <strnstrI+0x4d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
		break;
9f004457:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83
	    }
	}
	b = substring;
9f004458:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00445b:	eb 01                	jmp    9f00445e <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	    continue;
9f00445d:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    for ( ; *string != 0; string += 1) {
9f00445e:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66 (discriminator 1)
9f004462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004465:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004468:	84 c0                	test   al,al
9f00446a:	75 95                	jne    9f004401 <strnstrI+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
    }
    return (char *) 0;
9f00446c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:86
}
9f004471:	83 c4 10             	add    esp,0x10
9f004474:	5b                   	pop    ebx
9f004475:	5e                   	pop    esi
9f004476:	5d                   	pop    ebp
9f004477:	c3                   	ret    

9f004478 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:89

char* strstrI(const char* string, const char* substring)
{
9f004478:	f3 0f 1e fb          	endbr32 
9f00447c:	55                   	push   ebp
9f00447d:	89 e5                	mov    ebp,esp
9f00447f:	56                   	push   esi
9f004480:	53                   	push   ebx
9f004481:	e8 88 0d 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f004486:	05 76 3a 00 00       	add    eax,0x3a76
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f00448b:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
    if (*b == 0) {
9f00448e:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f004491:	84 c0                	test   al,al
9f004493:	75 42                	jne    9f0044d7 <strstrI+0x5f>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:99
	return string;
9f004495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004498:	eb 4c                	jmp    9f0044e6 <strstrI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f00449a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00449d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0044a0:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0044a3:	38 c2                	cmp    dl,al
9f0044a5:	75 2b                	jne    9f0044d2 <strstrI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:105
	    continue;
	}
	a = string;
9f0044a7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
	while (1) {
	    if (*b == 0) {
9f0044aa:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0044ad:	84 c0                	test   al,al
9f0044af:	75 05                	jne    9f0044b6 <strstrI+0x3e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:108
		return string;
9f0044b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0044b4:	eb 30                	jmp    9f0044e6 <strstrI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	    }
	    if (*a++ != *b++) {
9f0044b6:	89 f0                	mov    eax,esi
9f0044b8:	8d 70 01             	lea    esi,[eax+0x1]
9f0044bb:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0044be:	89 d8                	mov    eax,ebx
9f0044c0:	8d 58 01             	lea    ebx,[eax+0x1]
9f0044c3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0044c6:	38 c2                	cmp    dl,al
9f0044c8:	75 02                	jne    9f0044cc <strstrI+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
	    if (*b == 0) {
9f0044ca:	eb de                	jmp    9f0044aa <strstrI+0x32>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:111
		break;
9f0044cc:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:114
	    }
	}
	b = substring;
9f0044cd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0044d0:	eb 01                	jmp    9f0044d3 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:103
	    continue;
9f0044d2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101
    for ( ; *string != 0; string += 1) {
9f0044d3:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101 (discriminator 1)
9f0044d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0044da:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0044dd:	84 c0                	test   al,al
9f0044df:	75 b9                	jne    9f00449a <strstrI+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
    }
    return (char *) 0;
9f0044e1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:117
}
9f0044e6:	5b                   	pop    ebx
9f0044e7:	5e                   	pop    esi
9f0044e8:	5d                   	pop    ebp
9f0044e9:	c3                   	ret    

9f0044ea <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120

VISIBLE char* strstr(const char* string, const char* substring)
{
9f0044ea:	f3 0f 1e fb          	endbr32 
9f0044ee:	55                   	push   ebp
9f0044ef:	89 e5                	mov    ebp,esp
9f0044f1:	e8 18 0d 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0044f6:	05 06 3a 00 00       	add    eax,0x3a06
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
    return strstrI(string, substring);
9f0044fb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0044fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004501:	e8 72 ff ff ff       	call   9f004478 <strstrI>
9f004506:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:122
}
9f004509:	c9                   	leave  
9f00450a:	c3                   	ret    

9f00450b <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f00450b:	f3 0f 1e fb          	endbr32 
9f00450f:	55                   	push   ebp
9f004510:	89 e5                	mov    ebp,esp
9f004512:	56                   	push   esi
9f004513:	53                   	push   ebx
9f004514:	83 ec 10             	sub    esp,0x10
9f004517:	e8 f2 0c 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00451c:	05 e0 39 00 00       	add    eax,0x39e0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
    uint32_t retVal=0;
9f004521:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:29
    GET_TICKS(retVal);
9f004528:	b8 70 01 00 00       	mov    eax,0x170
9f00452d:	bb 00 00 00 00       	mov    ebx,0x0
9f004532:	b9 00 00 00 00       	mov    ecx,0x0
9f004537:	ba 00 00 00 00       	mov    edx,0x0
9f00453c:	be 00 00 00 00       	mov    esi,0x0
9f004541:	e8 fc ff ff ff       	call   9f004542 <getticks+0x37>
9f004546:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:30
    return (time_t)retVal;
9f004549:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31
}
9f00454c:	83 c4 10             	add    esp,0x10
9f00454f:	5b                   	pop    ebx
9f004550:	5e                   	pop    esi
9f004551:	5d                   	pop    ebp
9f004552:	c3                   	ret    

9f004553 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f004553:	f3 0f 1e fb          	endbr32 
9f004557:	55                   	push   ebp
9f004558:	89 e5                	mov    ebp,esp
9f00455a:	53                   	push   ebx
9f00455b:	83 ec 10             	sub    esp,0x10
9f00455e:	e8 af 0c 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f004563:	81 c3 99 39 00 00    	add    ebx,0x3999
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36
  time_t time = *timer;
9f004569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00456c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00456e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f004571:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  dayclock = (unsigned long) time % SECS_DAY;
9f004578:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f00457b:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f004580:	89 c8                	mov    eax,ecx
9f004582:	f7 e2                	mul    edx
9f004584:	89 d0                	mov    eax,edx
9f004586:	c1 e8 10             	shr    eax,0x10
9f004589:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f00458c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00458f:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f004595:	29 c1                	sub    ecx,eax
9f004597:	89 c8                	mov    eax,ecx
9f004599:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  dayno = (unsigned long) time / SECS_DAY;
9f00459c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00459f:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f0045a4:	f7 e2                	mul    edx
9f0045a6:	89 d0                	mov    eax,edx
9f0045a8:	c1 e8 10             	shr    eax,0x10
9f0045ab:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
9f0045ae:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f0045b1:	ba 89 88 88 88       	mov    edx,0x88888889
9f0045b6:	89 c8                	mov    eax,ecx
9f0045b8:	f7 e2                	mul    edx
9f0045ba:	89 d0                	mov    eax,edx
9f0045bc:	c1 e8 05             	shr    eax,0x5
9f0045bf:	6b c0 3c             	imul   eax,eax,0x3c
9f0045c2:	29 c1                	sub    ecx,eax
9f0045c4:	89 c8                	mov    eax,ecx
9f0045c6:	89 c2                	mov    edx,eax
9f0045c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0045cb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f0045cd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f0045d0:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f0045d5:	89 c8                	mov    eax,ecx
9f0045d7:	f7 e2                	mul    edx
9f0045d9:	89 d0                	mov    eax,edx
9f0045db:	c1 e8 0b             	shr    eax,0xb
9f0045de:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f0045e4:	29 c1                	sub    ecx,eax
9f0045e6:	89 c8                	mov    eax,ecx
9f0045e8:	ba 89 88 88 88       	mov    edx,0x88888889
9f0045ed:	f7 e2                	mul    edx
9f0045ef:	89 d0                	mov    eax,edx
9f0045f1:	c1 e8 05             	shr    eax,0x5
9f0045f4:	89 c2                	mov    edx,eax
9f0045f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0045f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
  tmbuf->tm_hour = dayclock / 3600;
9f0045fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0045ff:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f004604:	f7 e2                	mul    edx
9f004606:	89 d0                	mov    eax,edx
9f004608:	c1 e8 0b             	shr    eax,0xb
9f00460b:	89 c2                	mov    edx,eax
9f00460d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004610:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f004613:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f004616:	8d 48 04             	lea    ecx,[eax+0x4]
9f004619:	ba 25 49 92 24       	mov    edx,0x24924925
9f00461e:	89 c8                	mov    eax,ecx
9f004620:	f7 e2                	mul    edx
9f004622:	89 c8                	mov    eax,ecx
9f004624:	29 d0                	sub    eax,edx
9f004626:	d1 e8                	shr    eax,1
9f004628:	01 d0                	add    eax,edx
9f00462a:	c1 e8 02             	shr    eax,0x2
9f00462d:	89 c2                	mov    edx,eax
9f00462f:	c1 e2 03             	shl    edx,0x3
9f004632:	29 c2                	sub    edx,eax
9f004634:	89 c8                	mov    eax,ecx
9f004636:	29 d0                	sub    eax,edx
9f004638:	89 c2                	mov    edx,eax
9f00463a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00463d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f004640:	eb 66                	jmp    9f0046a8 <gmtime_rI+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
9f004642:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004645:	83 e0 03             	and    eax,0x3
9f004648:	85 c0                	test   eax,eax
9f00464a:	75 50                	jne    9f00469c <gmtime_rI+0x149>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 1)
9f00464c:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00464f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004654:	89 c8                	mov    eax,ecx
9f004656:	f7 ea                	imul   edx
9f004658:	c1 fa 05             	sar    edx,0x5
9f00465b:	89 c8                	mov    eax,ecx
9f00465d:	c1 f8 1f             	sar    eax,0x1f
9f004660:	29 c2                	sub    edx,eax
9f004662:	89 d0                	mov    eax,edx
9f004664:	6b c0 64             	imul   eax,eax,0x64
9f004667:	29 c1                	sub    ecx,eax
9f004669:	89 c8                	mov    eax,ecx
9f00466b:	85 c0                	test   eax,eax
9f00466d:	75 26                	jne    9f004695 <gmtime_rI+0x142>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 4)
9f00466f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004672:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004677:	89 c8                	mov    eax,ecx
9f004679:	f7 ea                	imul   edx
9f00467b:	c1 fa 07             	sar    edx,0x7
9f00467e:	89 c8                	mov    eax,ecx
9f004680:	c1 f8 1f             	sar    eax,0x1f
9f004683:	29 c2                	sub    edx,eax
9f004685:	89 d0                	mov    eax,edx
9f004687:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00468d:	29 c1                	sub    ecx,eax
9f00468f:	89 c8                	mov    eax,ecx
9f004691:	85 c0                	test   eax,eax
9f004693:	75 07                	jne    9f00469c <gmtime_rI+0x149>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 5)
9f004695:	b8 6e 01 00 00       	mov    eax,0x16e
9f00469a:	eb 05                	jmp    9f0046a1 <gmtime_rI+0x14e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 6)
9f00469c:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 8)
9f0046a1:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 8)
    year++;
9f0046a4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f0046a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0046ab:	83 e0 03             	and    eax,0x3
9f0046ae:	85 c0                	test   eax,eax
9f0046b0:	75 50                	jne    9f004702 <gmtime_rI+0x1af>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 1)
9f0046b2:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0046b5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0046ba:	89 c8                	mov    eax,ecx
9f0046bc:	f7 ea                	imul   edx
9f0046be:	c1 fa 05             	sar    edx,0x5
9f0046c1:	89 c8                	mov    eax,ecx
9f0046c3:	c1 f8 1f             	sar    eax,0x1f
9f0046c6:	29 c2                	sub    edx,eax
9f0046c8:	89 d0                	mov    eax,edx
9f0046ca:	6b c0 64             	imul   eax,eax,0x64
9f0046cd:	29 c1                	sub    ecx,eax
9f0046cf:	89 c8                	mov    eax,ecx
9f0046d1:	85 c0                	test   eax,eax
9f0046d3:	75 26                	jne    9f0046fb <gmtime_rI+0x1a8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 4)
9f0046d5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0046d8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0046dd:	89 c8                	mov    eax,ecx
9f0046df:	f7 ea                	imul   edx
9f0046e1:	c1 fa 07             	sar    edx,0x7
9f0046e4:	89 c8                	mov    eax,ecx
9f0046e6:	c1 f8 1f             	sar    eax,0x1f
9f0046e9:	29 c2                	sub    edx,eax
9f0046eb:	89 d0                	mov    eax,edx
9f0046ed:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0046f3:	29 c1                	sub    ecx,eax
9f0046f5:	89 c8                	mov    eax,ecx
9f0046f7:	85 c0                	test   eax,eax
9f0046f9:	75 07                	jne    9f004702 <gmtime_rI+0x1af>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 5)
9f0046fb:	b8 6e 01 00 00       	mov    eax,0x16e
9f004700:	eb 05                	jmp    9f004707 <gmtime_rI+0x1b4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 6)
9f004702:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 8)
9f004707:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f00470a:	0f 86 32 ff ff ff    	jbe    9f004642 <gmtime_rI+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
  }
  tmbuf->tm_year = year - YEAR0;
9f004710:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004713:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f004719:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00471c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
  tmbuf->tm_yday = dayno;
9f00471f:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f004722:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004725:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53
  tmbuf->tm_mon = 0;
9f004728:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00472b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f004732:	e9 89 00 00 00       	jmp    9f0047c0 <gmtime_rI+0x26d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f004737:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00473a:	83 e0 03             	and    eax,0x3
9f00473d:	85 c0                	test   eax,eax
9f00473f:	75 50                	jne    9f004791 <gmtime_rI+0x23e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 1)
9f004741:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004744:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004749:	89 c8                	mov    eax,ecx
9f00474b:	f7 ea                	imul   edx
9f00474d:	c1 fa 05             	sar    edx,0x5
9f004750:	89 c8                	mov    eax,ecx
9f004752:	c1 f8 1f             	sar    eax,0x1f
9f004755:	29 c2                	sub    edx,eax
9f004757:	89 d0                	mov    eax,edx
9f004759:	6b c0 64             	imul   eax,eax,0x64
9f00475c:	29 c1                	sub    ecx,eax
9f00475e:	89 c8                	mov    eax,ecx
9f004760:	85 c0                	test   eax,eax
9f004762:	75 26                	jne    9f00478a <gmtime_rI+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 4)
9f004764:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004767:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00476c:	89 c8                	mov    eax,ecx
9f00476e:	f7 ea                	imul   edx
9f004770:	c1 fa 07             	sar    edx,0x7
9f004773:	89 c8                	mov    eax,ecx
9f004775:	c1 f8 1f             	sar    eax,0x1f
9f004778:	29 c2                	sub    edx,eax
9f00477a:	89 d0                	mov    eax,edx
9f00477c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004782:	29 c1                	sub    ecx,eax
9f004784:	89 c8                	mov    eax,ecx
9f004786:	85 c0                	test   eax,eax
9f004788:	75 07                	jne    9f004791 <gmtime_rI+0x23e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 5)
9f00478a:	ba 01 00 00 00       	mov    edx,0x1
9f00478f:	eb 05                	jmp    9f004796 <gmtime_rI+0x243>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 6)
9f004791:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 8)
9f004796:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004799:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f00479c:	89 d0                	mov    eax,edx
9f00479e:	01 c0                	add    eax,eax
9f0047a0:	01 d0                	add    eax,edx
9f0047a2:	c1 e0 02             	shl    eax,0x2
9f0047a5:	01 c8                	add    eax,ecx
9f0047a7:	8b 84 83 a4 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x25c]
9f0047ae:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56 (discriminator 8)
    tmbuf->tm_mon++;
9f0047b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0047b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0047b7:	8d 50 01             	lea    edx,[eax+0x1]
9f0047ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0047bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f0047c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0047c3:	83 e0 03             	and    eax,0x3
9f0047c6:	85 c0                	test   eax,eax
9f0047c8:	75 50                	jne    9f00481a <gmtime_rI+0x2c7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 1)
9f0047ca:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0047cd:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0047d2:	89 c8                	mov    eax,ecx
9f0047d4:	f7 ea                	imul   edx
9f0047d6:	c1 fa 05             	sar    edx,0x5
9f0047d9:	89 c8                	mov    eax,ecx
9f0047db:	c1 f8 1f             	sar    eax,0x1f
9f0047de:	29 c2                	sub    edx,eax
9f0047e0:	89 d0                	mov    eax,edx
9f0047e2:	6b c0 64             	imul   eax,eax,0x64
9f0047e5:	29 c1                	sub    ecx,eax
9f0047e7:	89 c8                	mov    eax,ecx
9f0047e9:	85 c0                	test   eax,eax
9f0047eb:	75 26                	jne    9f004813 <gmtime_rI+0x2c0>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 4)
9f0047ed:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0047f0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0047f5:	89 c8                	mov    eax,ecx
9f0047f7:	f7 ea                	imul   edx
9f0047f9:	c1 fa 07             	sar    edx,0x7
9f0047fc:	89 c8                	mov    eax,ecx
9f0047fe:	c1 f8 1f             	sar    eax,0x1f
9f004801:	29 c2                	sub    edx,eax
9f004803:	89 d0                	mov    eax,edx
9f004805:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00480b:	29 c1                	sub    ecx,eax
9f00480d:	89 c8                	mov    eax,ecx
9f00480f:	85 c0                	test   eax,eax
9f004811:	75 07                	jne    9f00481a <gmtime_rI+0x2c7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 5)
9f004813:	ba 01 00 00 00       	mov    edx,0x1
9f004818:	eb 05                	jmp    9f00481f <gmtime_rI+0x2cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 6)
9f00481a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 8)
9f00481f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004822:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f004825:	89 d0                	mov    eax,edx
9f004827:	01 c0                	add    eax,eax
9f004829:	01 d0                	add    eax,edx
9f00482b:	c1 e0 02             	shl    eax,0x2
9f00482e:	01 c8                	add    eax,ecx
9f004830:	8b 84 83 a4 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x25c]
9f004837:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
9f00483a:	0f 83 f7 fe ff ff    	jae    9f004737 <gmtime_rI+0x1e4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
  }
  tmbuf->tm_mday = dayno + 1;
9f004840:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f004843:	83 c0 01             	add    eax,0x1
9f004846:	89 c2                	mov    edx,eax
9f004848:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00484b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:59
  tmbuf->tm_isdst = 0;
9f00484e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004851:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60
  return tmbuf;
9f004858:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
}
9f00485b:	83 c4 10             	add    esp,0x10
9f00485e:	5b                   	pop    ebx
9f00485f:	5d                   	pop    ebp
9f004860:	c3                   	ret    

9f004861 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f004861:	f3 0f 1e fb          	endbr32 
9f004865:	55                   	push   ebp
9f004866:	89 e5                	mov    ebp,esp
9f004868:	e8 a1 09 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f00486d:	05 8f 36 00 00       	add    eax,0x368f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65
    return gmtime_rI(timer, tmbuf);
9f004872:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004875:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004878:	e8 d6 fc ff ff       	call   9f004553 <gmtime_rI>
9f00487d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:66
}
9f004880:	c9                   	leave  
9f004881:	c3                   	ret    

9f004882 <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68

VISIBLE struct tm *localtime(const time_t *timer) {
9f004882:	f3 0f 1e fb          	endbr32 
9f004886:	55                   	push   ebp
9f004887:	89 e5                	mov    ebp,esp
9f004889:	83 ec 10             	sub    esp,0x10
9f00488c:	e8 7d 09 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f004891:	05 6b 36 00 00       	add    eax,0x366b
/home/yogi/src/os/aproj/libChrisOS/src/time.c:71
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f004896:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004899:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f00489b:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
9f0048a1:	8b 12                	mov    edx,DWORD PTR [edx]
9f0048a3:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f0048a9:	01 ca                	add    edx,ecx
9f0048ab:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:72
  return gmtime_rI(&t, &tmbuf);
9f0048ae:	8d 80 e4 00 00 00    	lea    eax,[eax+0xe4]
9f0048b4:	50                   	push   eax
9f0048b5:	8d 45 fc             	lea    eax,[ebp-0x4]
9f0048b8:	50                   	push   eax
9f0048b9:	e8 95 fc ff ff       	call   9f004553 <gmtime_rI>
9f0048be:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73
}
9f0048c1:	c9                   	leave  
9f0048c2:	c3                   	ret    

9f0048c3 <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f0048c3:	f3 0f 1e fb          	endbr32 
9f0048c7:	55                   	push   ebp
9f0048c8:	89 e5                	mov    ebp,esp
9f0048ca:	83 ec 10             	sub    esp,0x10
9f0048cd:	e8 3c 09 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f0048d2:	05 2a 36 00 00       	add    eax,0x362a
/home/yogi/src/os/aproj/libChrisOS/src/time.c:79
  time_t t;

  t = *timer - libcTZ;
9f0048d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0048da:	8b 12                	mov    edx,DWORD PTR [edx]
9f0048dc:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
9f0048e2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0048e4:	29 c2                	sub    edx,eax
9f0048e6:	89 d0                	mov    eax,edx
9f0048e8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80
  return gmtime_rI(&t, tmbuf);
9f0048eb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0048ee:	8d 45 fc             	lea    eax,[ebp-0x4]
9f0048f1:	50                   	push   eax
9f0048f2:	e8 5c fc ff ff       	call   9f004553 <gmtime_rI>
9f0048f7:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
}
9f0048fa:	c9                   	leave  
9f0048fb:	c3                   	ret    

9f0048fc <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:83

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f0048fc:	f3 0f 1e fb          	endbr32 
9f004900:	55                   	push   ebp
9f004901:	89 e5                	mov    ebp,esp
9f004903:	e8 06 09 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f004908:	05 f4 35 00 00       	add    eax,0x35f4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84
    return localtime_rI(timer, tmbuf);
9f00490d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004910:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004913:	e8 ab ff ff ff       	call   9f0048c3 <localtime_rI>
9f004918:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:85
}
9f00491b:	c9                   	leave  
9f00491c:	c3                   	ret    

9f00491d <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:87

VISIBLE time_t mktime(struct tm *tmbuf) {
9f00491d:	f3 0f 1e fb          	endbr32 
9f004921:	55                   	push   ebp
9f004922:	89 e5                	mov    ebp,esp
9f004924:	57                   	push   edi
9f004925:	56                   	push   esi
9f004926:	53                   	push   ebx
9f004927:	83 ec 20             	sub    esp,0x20
9f00492a:	e8 e7 08 00 00       	call   9f005216 <__x86.get_pc_thunk.cx>
9f00492f:	81 c1 cd 35 00 00    	add    ecx,0x35cd
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f004935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004938:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f00493b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00493e:	8b 18                	mov    ebx,DWORD PTR [eax]
9f004940:	ba 89 88 88 88       	mov    edx,0x88888889
9f004945:	89 d8                	mov    eax,ebx
9f004947:	f7 ea                	imul   edx
9f004949:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00494c:	c1 f8 05             	sar    eax,0x5
9f00494f:	89 c2                	mov    edx,eax
9f004951:	89 d8                	mov    eax,ebx
9f004953:	c1 f8 1f             	sar    eax,0x1f
9f004956:	29 c2                	sub    edx,eax
9f004958:	89 d0                	mov    eax,edx
9f00495a:	8d 14 06             	lea    edx,[esi+eax*1]
9f00495d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004960:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
  tmbuf->tm_sec %= 60;
9f004963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004966:	8b 18                	mov    ebx,DWORD PTR [eax]
9f004968:	ba 89 88 88 88       	mov    edx,0x88888889
9f00496d:	89 d8                	mov    eax,ebx
9f00496f:	f7 ea                	imul   edx
9f004971:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004974:	c1 f8 05             	sar    eax,0x5
9f004977:	89 c2                	mov    edx,eax
9f004979:	89 d8                	mov    eax,ebx
9f00497b:	c1 f8 1f             	sar    eax,0x1f
9f00497e:	29 c2                	sub    edx,eax
9f004980:	89 d0                	mov    eax,edx
9f004982:	6b c0 3c             	imul   eax,eax,0x3c
9f004985:	29 c3                	sub    ebx,eax
9f004987:	89 d8                	mov    eax,ebx
9f004989:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00498c:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:97
  if (tmbuf->tm_sec < 0) {
9f00498e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004991:	8b 00                	mov    eax,DWORD PTR [eax]
9f004993:	85 c0                	test   eax,eax
9f004995:	79 1c                	jns    9f0049b3 <mktime+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
    tmbuf->tm_sec += 60;
9f004997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00499a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00499c:	8d 50 3c             	lea    edx,[eax+0x3c]
9f00499f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049a2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
    tmbuf->tm_min--;
9f0049a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0049aa:	8d 50 ff             	lea    edx,[eax-0x1]
9f0049ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f0049b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049b6:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f0049b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049bc:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f0049bf:	ba 89 88 88 88       	mov    edx,0x88888889
9f0049c4:	89 d8                	mov    eax,ebx
9f0049c6:	f7 ea                	imul   edx
9f0049c8:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0049cb:	c1 f8 05             	sar    eax,0x5
9f0049ce:	89 c2                	mov    edx,eax
9f0049d0:	89 d8                	mov    eax,ebx
9f0049d2:	c1 f8 1f             	sar    eax,0x1f
9f0049d5:	29 c2                	sub    edx,eax
9f0049d7:	89 d0                	mov    eax,edx
9f0049d9:	8d 14 06             	lea    edx,[esi+eax*1]
9f0049dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f0049e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049e5:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f0049e8:	ba 89 88 88 88       	mov    edx,0x88888889
9f0049ed:	89 d8                	mov    eax,ebx
9f0049ef:	f7 ea                	imul   edx
9f0049f1:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0049f4:	c1 f8 05             	sar    eax,0x5
9f0049f7:	89 c2                	mov    edx,eax
9f0049f9:	89 d8                	mov    eax,ebx
9f0049fb:	c1 f8 1f             	sar    eax,0x1f
9f0049fe:	29 c2                	sub    edx,eax
9f004a00:	89 d0                	mov    eax,edx
9f004a02:	6b c0 3c             	imul   eax,eax,0x3c
9f004a05:	29 c3                	sub    ebx,eax
9f004a07:	89 d8                	mov    eax,ebx
9f004a09:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004a0c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:103
  if (tmbuf->tm_min < 0) {
9f004a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004a15:	85 c0                	test   eax,eax
9f004a17:	79 1e                	jns    9f004a37 <mktime+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
    tmbuf->tm_min += 60;
9f004a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004a1f:	8d 50 3c             	lea    edx,[eax+0x3c]
9f004a22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
    tmbuf->tm_hour--;
9f004a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a2b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004a2e:	8d 50 ff             	lea    edx,[eax-0x1]
9f004a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a34:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
  }
  day = tmbuf->tm_hour / 24;
9f004a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a3a:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f004a3d:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004a42:	89 d8                	mov    eax,ebx
9f004a44:	f7 ea                	imul   edx
9f004a46:	c1 fa 02             	sar    edx,0x2
9f004a49:	89 d8                	mov    eax,ebx
9f004a4b:	c1 f8 1f             	sar    eax,0x1f
9f004a4e:	29 c2                	sub    edx,eax
9f004a50:	89 d0                	mov    eax,edx
9f004a52:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f004a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a58:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f004a5b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004a60:	89 d8                	mov    eax,ebx
9f004a62:	f7 ea                	imul   edx
9f004a64:	c1 fa 02             	sar    edx,0x2
9f004a67:	89 d8                	mov    eax,ebx
9f004a69:	c1 f8 1f             	sar    eax,0x1f
9f004a6c:	29 c2                	sub    edx,eax
9f004a6e:	89 d0                	mov    eax,edx
9f004a70:	01 c0                	add    eax,eax
9f004a72:	01 d0                	add    eax,edx
9f004a74:	c1 e0 03             	shl    eax,0x3
9f004a77:	29 c3                	sub    ebx,eax
9f004a79:	89 da                	mov    edx,ebx
9f004a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:109
  if (tmbuf->tm_hour < 0) {
9f004a81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004a87:	85 c0                	test   eax,eax
9f004a89:	79 13                	jns    9f004a9e <mktime+0x181>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
    tmbuf->tm_hour += 24;
9f004a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a8e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004a91:	8d 50 18             	lea    edx,[eax+0x18]
9f004a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a97:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
    day--;
9f004a9a:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f004a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004aa1:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f004aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004aa7:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004aaa:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004aaf:	89 d8                	mov    eax,ebx
9f004ab1:	f7 ea                	imul   edx
9f004ab3:	d1 fa                	sar    edx,1
9f004ab5:	89 d8                	mov    eax,ebx
9f004ab7:	c1 f8 1f             	sar    eax,0x1f
9f004aba:	29 c2                	sub    edx,eax
9f004abc:	89 d0                	mov    eax,edx
9f004abe:	8d 14 06             	lea    edx,[esi+eax*1]
9f004ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ac4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
  tmbuf->tm_mon %= 12;
9f004ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004aca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004acd:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004ad2:	89 d8                	mov    eax,ebx
9f004ad4:	f7 ea                	imul   edx
9f004ad6:	d1 fa                	sar    edx,1
9f004ad8:	89 d8                	mov    eax,ebx
9f004ada:	c1 f8 1f             	sar    eax,0x1f
9f004add:	29 c2                	sub    edx,eax
9f004adf:	89 d0                	mov    eax,edx
9f004ae1:	01 c0                	add    eax,eax
9f004ae3:	01 d0                	add    eax,edx
9f004ae5:	c1 e0 02             	shl    eax,0x2
9f004ae8:	29 c3                	sub    ebx,eax
9f004aea:	89 da                	mov    edx,ebx
9f004aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004aef:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:115
  if (tmbuf->tm_mon < 0) {
9f004af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004af5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004af8:	85 c0                	test   eax,eax
9f004afa:	79 1e                	jns    9f004b1a <mktime+0x1fd>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
    tmbuf->tm_mon += 12;
9f004afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004aff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004b02:	8d 50 0c             	lea    edx,[eax+0xc]
9f004b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b08:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
    tmbuf->tm_year--;
9f004b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b0e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004b11:	8d 50 ff             	lea    edx,[eax-0x1]
9f004b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b17:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
  }
  day += (tmbuf->tm_mday - 1);
9f004b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b1d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f004b20:	83 e8 01             	sub    eax,0x1
9f004b23:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
  while (day < 0) {
9f004b26:	e9 c6 00 00 00       	jmp    9f004bf1 <mktime+0x2d4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:121
    if(--tmbuf->tm_mon < 0) {
9f004b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b2e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004b31:	8d 50 ff             	lea    edx,[eax-0x1]
9f004b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b37:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f004b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b3d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004b40:	85 c0                	test   eax,eax
9f004b42:	79 19                	jns    9f004b5d <mktime+0x240>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
      tmbuf->tm_year--;
9f004b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b47:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004b4a:	8d 50 ff             	lea    edx,[eax-0x1]
9f004b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b50:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:123
      tmbuf->tm_mon = 11;
9f004b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b56:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f004b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004b63:	05 6c 07 00 00       	add    eax,0x76c
9f004b68:	83 e0 03             	and    eax,0x3
9f004b6b:	85 c0                	test   eax,eax
9f004b6d:	75 62                	jne    9f004bd1 <mktime+0x2b4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f004b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b72:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004b75:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004b7b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004b80:	89 d8                	mov    eax,ebx
9f004b82:	f7 ea                	imul   edx
9f004b84:	c1 fa 05             	sar    edx,0x5
9f004b87:	89 d8                	mov    eax,ebx
9f004b89:	c1 f8 1f             	sar    eax,0x1f
9f004b8c:	29 c2                	sub    edx,eax
9f004b8e:	89 d0                	mov    eax,edx
9f004b90:	6b c0 64             	imul   eax,eax,0x64
9f004b93:	29 c3                	sub    ebx,eax
9f004b95:	89 d8                	mov    eax,ebx
9f004b97:	85 c0                	test   eax,eax
9f004b99:	75 2f                	jne    9f004bca <mktime+0x2ad>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f004b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b9e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004ba1:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004ba7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004bac:	89 d8                	mov    eax,ebx
9f004bae:	f7 ea                	imul   edx
9f004bb0:	c1 fa 07             	sar    edx,0x7
9f004bb3:	89 d8                	mov    eax,ebx
9f004bb5:	c1 f8 1f             	sar    eax,0x1f
9f004bb8:	29 c2                	sub    edx,eax
9f004bba:	89 d0                	mov    eax,edx
9f004bbc:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004bc2:	29 c3                	sub    ebx,eax
9f004bc4:	89 d8                	mov    eax,ebx
9f004bc6:	85 c0                	test   eax,eax
9f004bc8:	75 07                	jne    9f004bd1 <mktime+0x2b4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f004bca:	ba 01 00 00 00       	mov    edx,0x1
9f004bcf:	eb 05                	jmp    9f004bd6 <mktime+0x2b9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f004bd1:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f004bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004bd9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004bdc:	89 d0                	mov    eax,edx
9f004bde:	01 c0                	add    eax,eax
9f004be0:	01 d0                	add    eax,edx
9f004be2:	c1 e0 02             	shl    eax,0x2
9f004be5:	01 d8                	add    eax,ebx
9f004be7:	8b 84 81 a4 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x25c]
9f004bee:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
  while (day < 0) {
9f004bf1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f004bf5:	0f 88 30 ff ff ff    	js     9f004b2b <mktime+0x20e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f004bfb:	e9 c7 00 00 00       	jmp    9f004cc7 <mktime+0x3aa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f004c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004c03:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004c06:	05 6c 07 00 00       	add    eax,0x76c
9f004c0b:	83 e0 03             	and    eax,0x3
9f004c0e:	85 c0                	test   eax,eax
9f004c10:	75 62                	jne    9f004c74 <mktime+0x357>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 1)
9f004c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004c15:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004c18:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004c1e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004c23:	89 d8                	mov    eax,ebx
9f004c25:	f7 ea                	imul   edx
9f004c27:	c1 fa 05             	sar    edx,0x5
9f004c2a:	89 d8                	mov    eax,ebx
9f004c2c:	c1 f8 1f             	sar    eax,0x1f
9f004c2f:	29 c2                	sub    edx,eax
9f004c31:	89 d0                	mov    eax,edx
9f004c33:	6b c0 64             	imul   eax,eax,0x64
9f004c36:	29 c3                	sub    ebx,eax
9f004c38:	89 d8                	mov    eax,ebx
9f004c3a:	85 c0                	test   eax,eax
9f004c3c:	75 2f                	jne    9f004c6d <mktime+0x350>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 4)
9f004c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004c41:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004c44:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004c4a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004c4f:	89 d8                	mov    eax,ebx
9f004c51:	f7 ea                	imul   edx
9f004c53:	c1 fa 07             	sar    edx,0x7
9f004c56:	89 d8                	mov    eax,ebx
9f004c58:	c1 f8 1f             	sar    eax,0x1f
9f004c5b:	29 c2                	sub    edx,eax
9f004c5d:	89 d0                	mov    eax,edx
9f004c5f:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004c65:	29 c3                	sub    ebx,eax
9f004c67:	89 d8                	mov    eax,ebx
9f004c69:	85 c0                	test   eax,eax
9f004c6b:	75 07                	jne    9f004c74 <mktime+0x357>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 5)
9f004c6d:	ba 01 00 00 00       	mov    edx,0x1
9f004c72:	eb 05                	jmp    9f004c79 <mktime+0x35c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 6)
9f004c74:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 8)
9f004c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004c7c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004c7f:	89 d0                	mov    eax,edx
9f004c81:	01 c0                	add    eax,eax
9f004c83:	01 d0                	add    eax,edx
9f004c85:	c1 e0 02             	shl    eax,0x2
9f004c88:	01 d8                	add    eax,ebx
9f004c8a:	8b 84 81 a4 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x25c]
9f004c91:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:129 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f004c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004c97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004c9a:	8d 50 01             	lea    edx,[eax+0x1]
9f004c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ca0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f004ca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ca6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004ca9:	83 f8 0c             	cmp    eax,0xc
9f004cac:	75 19                	jne    9f004cc7 <mktime+0x3aa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:130
      tmbuf->tm_mon = 0;
9f004cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004cb1:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
      tmbuf->tm_year++;
9f004cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004cbb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004cbe:	8d 50 01             	lea    edx,[eax+0x1]
9f004cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004cc4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f004cc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004cca:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004ccd:	05 6c 07 00 00       	add    eax,0x76c
9f004cd2:	83 e0 03             	and    eax,0x3
9f004cd5:	85 c0                	test   eax,eax
9f004cd7:	75 62                	jne    9f004d3b <mktime+0x41e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 1)
9f004cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004cdc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004cdf:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004ce5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004cea:	89 d8                	mov    eax,ebx
9f004cec:	f7 ea                	imul   edx
9f004cee:	c1 fa 05             	sar    edx,0x5
9f004cf1:	89 d8                	mov    eax,ebx
9f004cf3:	c1 f8 1f             	sar    eax,0x1f
9f004cf6:	29 c2                	sub    edx,eax
9f004cf8:	89 d0                	mov    eax,edx
9f004cfa:	6b c0 64             	imul   eax,eax,0x64
9f004cfd:	29 c3                	sub    ebx,eax
9f004cff:	89 d8                	mov    eax,ebx
9f004d01:	85 c0                	test   eax,eax
9f004d03:	75 2f                	jne    9f004d34 <mktime+0x417>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 4)
9f004d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d08:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004d0b:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004d11:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004d16:	89 d8                	mov    eax,ebx
9f004d18:	f7 ea                	imul   edx
9f004d1a:	c1 fa 07             	sar    edx,0x7
9f004d1d:	89 d8                	mov    eax,ebx
9f004d1f:	c1 f8 1f             	sar    eax,0x1f
9f004d22:	29 c2                	sub    edx,eax
9f004d24:	89 d0                	mov    eax,edx
9f004d26:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004d2c:	29 c3                	sub    ebx,eax
9f004d2e:	89 d8                	mov    eax,ebx
9f004d30:	85 c0                	test   eax,eax
9f004d32:	75 07                	jne    9f004d3b <mktime+0x41e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 5)
9f004d34:	ba 01 00 00 00       	mov    edx,0x1
9f004d39:	eb 05                	jmp    9f004d40 <mktime+0x423>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 6)
9f004d3b:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 8)
9f004d40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d43:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004d46:	89 d0                	mov    eax,edx
9f004d48:	01 c0                	add    eax,eax
9f004d4a:	01 d0                	add    eax,edx
9f004d4c:	c1 e0 02             	shl    eax,0x2
9f004d4f:	01 d8                	add    eax,ebx
9f004d51:	8b 84 81 a4 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x25c]
9f004d58:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
9f004d5b:	0f 8d 9f fe ff ff    	jge    9f004c00 <mktime+0x2e3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
    }
  }
  tmbuf->tm_mday = day + 1;
9f004d61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004d64:	8d 50 01             	lea    edx,[eax+0x1]
9f004d67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d6a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  year = EPOCH_YR;
9f004d6d:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f004d74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004d77:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004d7a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f004d7d:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f004d83:	39 d0                	cmp    eax,edx
9f004d85:	7d 0a                	jge    9f004d91 <mktime+0x474>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136 (discriminator 1)
9f004d87:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f004d8c:	e9 bf 03 00 00       	jmp    9f005150 <mktime+0x833>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137
  seconds = 0;
9f004d91:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138
  day = 0;                      // Means days since day 0 now
9f004d98:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139
  overflow = 0;
9f004d9f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f004da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004da9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004dac:	05 6c 07 00 00       	add    eax,0x76c
9f004db1:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f004db4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004db7:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004dba:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f004dbf:	7e 07                	jle    9f004dc8 <mktime+0x4ab>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f004dc1:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149
  day = (tm_year - year) * 365;
9f004dc8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004dcb:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004dce:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f004dd4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f004dd7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004dda:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004ddd:	8d 50 03             	lea    edx,[eax+0x3]
9f004de0:	85 c0                	test   eax,eax
9f004de2:	0f 48 c2             	cmovs  eax,edx
9f004de5:	c1 f8 02             	sar    eax,0x2
9f004de8:	89 c2                	mov    edx,eax
9f004dea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f004def:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f004df2:	39 c2                	cmp    edx,eax
9f004df4:	7c 04                	jl     9f004dfa <mktime+0x4dd>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f004df6:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f004dfa:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004dfd:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004e00:	8d 50 03             	lea    edx,[eax+0x3]
9f004e03:	85 c0                	test   eax,eax
9f004e05:	0f 48 c2             	cmovs  eax,edx
9f004e08:	c1 f8 02             	sar    eax,0x2
9f004e0b:	89 c3                	mov    ebx,eax
9f004e0d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004e10:	83 e0 03             	and    eax,0x3
9f004e13:	85 c0                	test   eax,eax
9f004e15:	74 29                	je     9f004e40 <mktime+0x523>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 1)
9f004e17:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004e1a:	99                   	cdq    
9f004e1b:	c1 ea 1e             	shr    edx,0x1e
9f004e1e:	01 d0                	add    eax,edx
9f004e20:	83 e0 03             	and    eax,0x3
9f004e23:	29 d0                	sub    eax,edx
9f004e25:	89 c6                	mov    esi,eax
9f004e27:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f004e2a:	99                   	cdq    
9f004e2b:	c1 ea 1e             	shr    edx,0x1e
9f004e2e:	01 d0                	add    eax,edx
9f004e30:	83 e0 03             	and    eax,0x3
9f004e33:	29 d0                	sub    eax,edx
9f004e35:	39 c6                	cmp    esi,eax
9f004e37:	7d 07                	jge    9f004e40 <mktime+0x523>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 3)
9f004e39:	b8 01 00 00 00       	mov    eax,0x1
9f004e3e:	eb 05                	jmp    9f004e45 <mktime+0x528>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 4)
9f004e40:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 6)
9f004e45:	01 d8                	add    eax,ebx
9f004e47:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f004e4a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004e4d:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004e50:	89 c3                	mov    ebx,eax
9f004e52:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004e57:	89 d8                	mov    eax,ebx
9f004e59:	f7 ea                	imul   edx
9f004e5b:	c1 fa 05             	sar    edx,0x5
9f004e5e:	89 d8                	mov    eax,ebx
9f004e60:	c1 f8 1f             	sar    eax,0x1f
9f004e63:	89 d7                	mov    edi,edx
9f004e65:	29 c7                	sub    edi,eax
9f004e67:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004e6a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004e6f:	89 d8                	mov    eax,ebx
9f004e71:	f7 ea                	imul   edx
9f004e73:	c1 fa 05             	sar    edx,0x5
9f004e76:	89 d8                	mov    eax,ebx
9f004e78:	c1 f8 1f             	sar    eax,0x1f
9f004e7b:	29 c2                	sub    edx,eax
9f004e7d:	89 d0                	mov    eax,edx
9f004e7f:	6b c0 64             	imul   eax,eax,0x64
9f004e82:	29 c3                	sub    ebx,eax
9f004e84:	89 d8                	mov    eax,ebx
9f004e86:	85 c0                	test   eax,eax
9f004e88:	74 49                	je     9f004ed3 <mktime+0x5b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 1)
9f004e8a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004e8d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004e92:	89 d8                	mov    eax,ebx
9f004e94:	f7 ea                	imul   edx
9f004e96:	c1 fa 05             	sar    edx,0x5
9f004e99:	89 d8                	mov    eax,ebx
9f004e9b:	c1 f8 1f             	sar    eax,0x1f
9f004e9e:	89 d6                	mov    esi,edx
9f004ea0:	29 c6                	sub    esi,eax
9f004ea2:	6b c6 64             	imul   eax,esi,0x64
9f004ea5:	89 de                	mov    esi,ebx
9f004ea7:	29 c6                	sub    esi,eax
9f004ea9:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f004eac:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004eb1:	89 d8                	mov    eax,ebx
9f004eb3:	f7 ea                	imul   edx
9f004eb5:	c1 fa 05             	sar    edx,0x5
9f004eb8:	89 d8                	mov    eax,ebx
9f004eba:	c1 f8 1f             	sar    eax,0x1f
9f004ebd:	29 c2                	sub    edx,eax
9f004ebf:	89 d0                	mov    eax,edx
9f004ec1:	6b c0 64             	imul   eax,eax,0x64
9f004ec4:	29 c3                	sub    ebx,eax
9f004ec6:	89 d8                	mov    eax,ebx
9f004ec8:	39 c6                	cmp    esi,eax
9f004eca:	7d 07                	jge    9f004ed3 <mktime+0x5b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 3)
9f004ecc:	b8 01 00 00 00       	mov    eax,0x1
9f004ed1:	eb 05                	jmp    9f004ed8 <mktime+0x5bb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 4)
9f004ed3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)
9f004ed8:	01 f8                	add    eax,edi
9f004eda:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f004edd:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004ee0:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004ee3:	89 c3                	mov    ebx,eax
9f004ee5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004eea:	89 d8                	mov    eax,ebx
9f004eec:	f7 ea                	imul   edx
9f004eee:	c1 fa 07             	sar    edx,0x7
9f004ef1:	89 d8                	mov    eax,ebx
9f004ef3:	c1 f8 1f             	sar    eax,0x1f
9f004ef6:	89 d7                	mov    edi,edx
9f004ef8:	29 c7                	sub    edi,eax
9f004efa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004efd:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004f02:	89 d8                	mov    eax,ebx
9f004f04:	f7 ea                	imul   edx
9f004f06:	c1 fa 07             	sar    edx,0x7
9f004f09:	89 d8                	mov    eax,ebx
9f004f0b:	c1 f8 1f             	sar    eax,0x1f
9f004f0e:	29 c2                	sub    edx,eax
9f004f10:	89 d0                	mov    eax,edx
9f004f12:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004f18:	29 c3                	sub    ebx,eax
9f004f1a:	89 d8                	mov    eax,ebx
9f004f1c:	85 c0                	test   eax,eax
9f004f1e:	74 4f                	je     9f004f6f <mktime+0x652>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 1)
9f004f20:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004f23:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004f28:	89 d8                	mov    eax,ebx
9f004f2a:	f7 ea                	imul   edx
9f004f2c:	c1 fa 07             	sar    edx,0x7
9f004f2f:	89 d8                	mov    eax,ebx
9f004f31:	c1 f8 1f             	sar    eax,0x1f
9f004f34:	89 d6                	mov    esi,edx
9f004f36:	29 c6                	sub    esi,eax
9f004f38:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f004f3e:	89 de                	mov    esi,ebx
9f004f40:	29 c6                	sub    esi,eax
9f004f42:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f004f45:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004f4a:	89 d8                	mov    eax,ebx
9f004f4c:	f7 ea                	imul   edx
9f004f4e:	c1 fa 07             	sar    edx,0x7
9f004f51:	89 d8                	mov    eax,ebx
9f004f53:	c1 f8 1f             	sar    eax,0x1f
9f004f56:	29 c2                	sub    edx,eax
9f004f58:	89 d0                	mov    eax,edx
9f004f5a:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004f60:	29 c3                	sub    ebx,eax
9f004f62:	89 d8                	mov    eax,ebx
9f004f64:	39 c6                	cmp    esi,eax
9f004f66:	7d 07                	jge    9f004f6f <mktime+0x652>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 3)
9f004f68:	b8 01 00 00 00       	mov    eax,0x1
9f004f6d:	eb 05                	jmp    9f004f74 <mktime+0x657>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 4)
9f004f6f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
9f004f74:	01 f8                	add    eax,edi
9f004f76:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 6)

  yday = month = 0;
9f004f79:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f004f80:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004f83:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f004f86:	eb 7b                	jmp    9f005003 <mktime+0x6e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f004f88:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004f8b:	83 e0 03             	and    eax,0x3
9f004f8e:	85 c0                	test   eax,eax
9f004f90:	75 50                	jne    9f004fe2 <mktime+0x6c5>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 1)
9f004f92:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004f95:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004f9a:	89 d8                	mov    eax,ebx
9f004f9c:	f7 ea                	imul   edx
9f004f9e:	c1 fa 05             	sar    edx,0x5
9f004fa1:	89 d8                	mov    eax,ebx
9f004fa3:	c1 f8 1f             	sar    eax,0x1f
9f004fa6:	29 c2                	sub    edx,eax
9f004fa8:	89 d0                	mov    eax,edx
9f004faa:	6b c0 64             	imul   eax,eax,0x64
9f004fad:	29 c3                	sub    ebx,eax
9f004faf:	89 d8                	mov    eax,ebx
9f004fb1:	85 c0                	test   eax,eax
9f004fb3:	75 26                	jne    9f004fdb <mktime+0x6be>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 4)
9f004fb5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004fb8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004fbd:	89 d8                	mov    eax,ebx
9f004fbf:	f7 ea                	imul   edx
9f004fc1:	c1 fa 07             	sar    edx,0x7
9f004fc4:	89 d8                	mov    eax,ebx
9f004fc6:	c1 f8 1f             	sar    eax,0x1f
9f004fc9:	29 c2                	sub    edx,eax
9f004fcb:	89 d0                	mov    eax,edx
9f004fcd:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004fd3:	29 c3                	sub    ebx,eax
9f004fd5:	89 d8                	mov    eax,ebx
9f004fd7:	85 c0                	test   eax,eax
9f004fd9:	75 07                	jne    9f004fe2 <mktime+0x6c5>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 5)
9f004fdb:	ba 01 00 00 00       	mov    edx,0x1
9f004fe0:	eb 05                	jmp    9f004fe7 <mktime+0x6ca>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 6)
9f004fe2:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 8)
9f004fe7:	89 d0                	mov    eax,edx
9f004fe9:	01 c0                	add    eax,eax
9f004feb:	01 d0                	add    eax,edx
9f004fed:	c1 e0 02             	shl    eax,0x2
9f004ff0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f004ff3:	01 d0                	add    eax,edx
9f004ff5:	8b 84 81 a4 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x25c]
9f004ffc:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 8)
    month++;
9f004fff:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156
  while (month < tmbuf->tm_mon) {
9f005003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005006:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f005009:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
9f00500c:	0f 8c 76 ff ff ff    	jl     9f004f88 <mktime+0x66b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160
  }
  yday += (tmbuf->tm_mday - 1);
9f005012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005015:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f005018:	83 e8 01             	sub    eax,0x1
9f00501b:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161
  if (day + yday < 0) overflow|=4;
9f00501e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f005021:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f005024:	01 d0                	add    eax,edx
9f005026:	85 c0                	test   eax,eax
9f005028:	79 04                	jns    9f00502e <mktime+0x711>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161 (discriminator 1)
9f00502a:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  day += yday;
9f00502e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f005031:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  tmbuf->tm_yday = yday;
9f005034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005037:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00503a:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:165
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f00503d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f005040:	8d 58 04             	lea    ebx,[eax+0x4]
9f005043:	ba 93 24 49 92       	mov    edx,0x92492493
9f005048:	89 d8                	mov    eax,ebx
9f00504a:	f7 ea                	imul   edx
9f00504c:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00504f:	c1 f8 02             	sar    eax,0x2
9f005052:	89 c2                	mov    edx,eax
9f005054:	89 d8                	mov    eax,ebx
9f005056:	c1 f8 1f             	sar    eax,0x1f
9f005059:	29 c2                	sub    edx,eax
9f00505b:	89 d0                	mov    eax,edx
9f00505d:	89 c2                	mov    edx,eax
9f00505f:	c1 e2 03             	shl    edx,0x3
9f005062:	29 c2                	sub    edx,eax
9f005064:	89 d8                	mov    eax,ebx
9f005066:	29 d0                	sub    eax,edx
9f005068:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00506b:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f00506e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005071:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f005074:	6b d0 3c             	imul   edx,eax,0x3c
9f005077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00507a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00507d:	01 d0                	add    eax,edx
9f00507f:	6b d0 3c             	imul   edx,eax,0x3c
9f005082:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005085:	8b 00                	mov    eax,DWORD PTR [eax]
9f005087:	01 d0                	add    eax,edx
9f005089:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:169

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f00508c:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f005091:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f005094:	89 c3                	mov    ebx,eax
9f005096:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f00509b:	89 d8                	mov    eax,ebx
9f00509d:	f7 ea                	imul   edx
9f00509f:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0050a2:	c1 f8 10             	sar    eax,0x10
9f0050a5:	89 c2                	mov    edx,eax
9f0050a7:	89 d8                	mov    eax,ebx
9f0050a9:	c1 f8 1f             	sar    eax,0x1f
9f0050ac:	29 c2                	sub    edx,eax
9f0050ae:	89 d0                	mov    eax,edx
9f0050b0:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
9f0050b3:	7e 04                	jle    9f0050b9 <mktime+0x79c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:169 (discriminator 1)
9f0050b5:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170
  seconds += day * SECS_DAY;
9f0050b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0050bc:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f0050c2:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f0050c5:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f0050cb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0050cd:	85 c0                	test   eax,eax
9f0050cf:	7e 16                	jle    9f0050e7 <mktime+0x7ca>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173 (discriminator 1)
9f0050d1:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f0050d7:	8b 00                	mov    eax,DWORD PTR [eax]
9f0050d9:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f0050de:	29 c2                	sub    edx,eax
9f0050e0:	89 d0                	mov    eax,edx
9f0050e2:	39 45 d8             	cmp    DWORD PTR [ebp-0x28],eax
9f0050e5:	7f 1b                	jg     9f005102 <mktime+0x7e5>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f0050e7:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f0050ed:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173 (discriminator 3)
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f0050ef:	85 c0                	test   eax,eax
9f0050f1:	79 13                	jns    9f005106 <mktime+0x7e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f0050f3:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f0050f9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0050fb:	f7 d8                	neg    eax
9f0050fd:	39 45 d8             	cmp    DWORD PTR [ebp-0x28],eax
9f005100:	7d 04                	jge    9f005106 <mktime+0x7e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:175
          overflow|=16;
9f005102:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
  }
  seconds += libcTZ;
9f005106:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f00510c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00510e:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179

  if (tmbuf->tm_isdst) {
9f005111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f005114:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f005117:	85 c0                	test   eax,eax
9f005119:	74 0b                	je     9f005126 <mktime+0x809>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:180
    dst = _dstbias;
9f00511b:	8b 81 b4 00 00 00    	mov    eax,DWORD PTR [ecx+0xb4]
9f005121:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f005124:	eb 07                	jmp    9f00512d <mktime+0x810>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  } else {
    dst = 0;
9f005126:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f00512d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f005130:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f005133:	7e 04                	jle    9f005139 <mktime+0x81c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f005135:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:186
  seconds -= dst;
9f005139:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f00513c:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if (overflow) return (time_t) overflow-2;
9f00513f:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f005143:	74 08                	je     9f00514d <mktime+0x830>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188 (discriminator 1)
9f005145:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f005148:	83 e8 02             	sub    eax,0x2
9f00514b:	eb 03                	jmp    9f005150 <mktime+0x833>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:191

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f00514d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192
}
9f005150:	83 c4 20             	add    esp,0x20
9f005153:	5b                   	pop    ebx
9f005154:	5e                   	pop    esi
9f005155:	5f                   	pop    edi
9f005156:	5d                   	pop    ebp
9f005157:	c3                   	ret    

9f005158 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f005158:	f3 0f 1e fb          	endbr32 
9f00515c:	55                   	push   ebp
9f00515d:	89 e5                	mov    ebp,esp
9f00515f:	56                   	push   esi
9f005160:	53                   	push   ebx
9f005161:	83 ec 14             	sub    esp,0x14
9f005164:	e8 a5 00 00 00       	call   9f00520e <__x86.get_pc_thunk.ax>
9f005169:	05 93 2d 00 00       	add    eax,0x2d93
9f00516e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005171:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    time_t ticks=0;
9f005174:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:198
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f00517b:	b8 71 01 00 00       	mov    eax,0x171
9f005180:	bb 00 00 00 00       	mov    ebx,0x0
9f005185:	b9 00 00 00 00       	mov    ecx,0x0
9f00518a:	ba 00 00 00 00       	mov    edx,0x0
9f00518f:	be 00 00 00 00       	mov    esi,0x0
9f005194:	e8 fc ff ff ff       	call   9f005195 <gettime+0x3d>
9f005199:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    if (localTime)
9f00519c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f0051a0:	74 11                	je     9f0051b3 <gettime+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200
        return localtime_rI(&ticks,time);
9f0051a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0051a5:	8d 45 f4             	lea    eax,[ebp-0xc]
9f0051a8:	50                   	push   eax
9f0051a9:	e8 15 f7 ff ff       	call   9f0048c3 <localtime_rI>
9f0051ae:	83 c4 08             	add    esp,0x8
9f0051b1:	eb 0f                	jmp    9f0051c2 <gettime+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:202
    else
        return gmtime_rI((time_t*)&ticks,time);
9f0051b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0051b6:	8d 45 f4             	lea    eax,[ebp-0xc]
9f0051b9:	50                   	push   eax
9f0051ba:	e8 94 f3 ff ff       	call   9f004553 <gmtime_rI>
9f0051bf:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203 (discriminator 1)
}
9f0051c2:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0051c5:	5b                   	pop    ebx
9f0051c6:	5e                   	pop    esi
9f0051c7:	5d                   	pop    ebp
9f0051c8:	c3                   	ret    

9f0051c9 <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206

VISIBLE time_t time (time_t *result)
{
9f0051c9:	f3 0f 1e fb          	endbr32 
9f0051cd:	55                   	push   ebp
9f0051ce:	89 e5                	mov    ebp,esp
9f0051d0:	53                   	push   ebx
9f0051d1:	83 ec 14             	sub    esp,0x14
9f0051d4:	e8 39 00 00 00       	call   9f005212 <__x86.get_pc_thunk.bx>
9f0051d9:	81 c3 23 2d 00 00    	add    ebx,0x2d23
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f0051df:	83 ec 0c             	sub    esp,0xc
9f0051e2:	68 71 01 00 00       	push   0x171
9f0051e7:	e8 ad c2 ff ff       	call   9f001499 <do_syscall0>
9f0051ec:	83 c4 10             	add    esp,0x10
9f0051ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:208
    memcpyI(result, &ticks, 4);
9f0051f2:	83 ec 04             	sub    esp,0x4
9f0051f5:	6a 04                	push   0x4
9f0051f7:	8d 45 f4             	lea    eax,[ebp-0xc]
9f0051fa:	50                   	push   eax
9f0051fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0051fe:	e8 c8 d6 ff ff       	call   9f0028cb <memcpyI>
9f005203:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:209
    return ticks;
9f005206:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:210
9f005209:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00520c:	c9                   	leave  
9f00520d:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f00520e <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f00520e:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f005211:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f005212 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f005212:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f005215:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f005216 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f005216:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f005219:	c3                   	ret    

Disassembly of section .eh_frame:

9f00521c <.eh_frame>:
9f00521c:	14 00                	adc    al,0x0
9f00521e:	00 00                	add    BYTE PTR [eax],al
9f005220:	00 00                	add    BYTE PTR [eax],al
9f005222:	00 00                	add    BYTE PTR [eax],al
9f005224:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f005227:	00 01                	add    BYTE PTR [ecx],al
9f005229:	7c 08                	jl     9f005233 <__x86.get_pc_thunk.cx+0x1d>
9f00522b:	01 1b                	add    DWORD PTR [ebx],ebx
9f00522d:	0c 04                	or     al,0x4
9f00522f:	04 88                	add    al,0x88
9f005231:	01 00                	add    DWORD PTR [eax],eax
9f005233:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005236:	00 00                	add    BYTE PTR [eax],al
9f005238:	1c 00                	sbb    al,0x0
9f00523a:	00 00                	add    BYTE PTR [eax],al
9f00523c:	c4 ad ff ff 3c 00    	les    ebp,FWORD PTR [ebp+0x3cffff]
9f005242:	00 00                	add    BYTE PTR [eax],al
9f005244:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005247:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00524d:	74 c5                	je     9f005214 <__x86.get_pc_thunk.bx+0x2>
9f00524f:	0c 04                	or     al,0x4
9f005251:	04 00                	add    al,0x0
9f005253:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005256:	00 00                	add    BYTE PTR [eax],al
9f005258:	3c 00                	cmp    al,0x0
9f00525a:	00 00                	add    BYTE PTR [eax],al
9f00525c:	e0 ad                	loopne 9f00520b <time+0x42>
9f00525e:	ff                   	(bad)  
9f00525f:	ff                   	(bad)  
9f005260:	3c 00                	cmp    al,0x0
9f005262:	00 00                	add    BYTE PTR [eax],al
9f005264:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005267:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00526d:	74 c5                	je     9f005234 <__x86.get_pc_thunk.cx+0x1e>
9f00526f:	0c 04                	or     al,0x4
9f005271:	04 00                	add    al,0x0
9f005273:	00 10                	add    BYTE PTR [eax],dl
9f005275:	00 00                	add    BYTE PTR [eax],al
9f005277:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f00527b:	00 92 ff ff ff 04    	add    BYTE PTR [edx+0x4ffffff],dl
9f005281:	00 00                	add    BYTE PTR [eax],al
9f005283:	00 00                	add    BYTE PTR [eax],al
9f005285:	00 00                	add    BYTE PTR [eax],al
9f005287:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00528a:	00 00                	add    BYTE PTR [eax],al
9f00528c:	70 00                	jo     9f00528e <__x86.get_pc_thunk.cx+0x78>
9f00528e:	00 00                	add    BYTE PTR [eax],al
9f005290:	e8 ad ff ff 53       	call   f3005242 <tmbuf+0x53ffd262>
9f005295:	00 00                	add    BYTE PTR [eax],al
9f005297:	00 00                	add    BYTE PTR [eax],al
9f005299:	45                   	inc    ebp
9f00529a:	0e                   	push   cs
9f00529b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052a1:	42                   	inc    edx
9f0052a2:	86 03                	xchg   BYTE PTR [ebx],al
9f0052a4:	83 04 02 47          	add    DWORD PTR [edx+eax*1],0x47
9f0052a8:	c3                   	ret    
9f0052a9:	41                   	inc    ecx
9f0052aa:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0052ae:	04 04                	add    al,0x4
9f0052b0:	24 00                	and    al,0x0
9f0052b2:	00 00                	add    BYTE PTR [eax],al
9f0052b4:	98                   	cwde   
9f0052b5:	00 00                	add    BYTE PTR [eax],al
9f0052b7:	00 13                	add    BYTE PTR [ebx],dl
9f0052b9:	ae                   	scas   al,BYTE PTR es:[edi]
9f0052ba:	ff                   	(bad)  
9f0052bb:	ff 53 00             	call   DWORD PTR [ebx+0x0]
9f0052be:	00 00                	add    BYTE PTR [eax],al
9f0052c0:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0052c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052c9:	42                   	inc    edx
9f0052ca:	86 03                	xchg   BYTE PTR [ebx],al
9f0052cc:	83 04 02 47          	add    DWORD PTR [edx+eax*1],0x47
9f0052d0:	c3                   	ret    
9f0052d1:	41                   	inc    ecx
9f0052d2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0052d6:	04 04                	add    al,0x4
9f0052d8:	24 00                	and    al,0x0
9f0052da:	00 00                	add    BYTE PTR [eax],al
9f0052dc:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f0052df:	00 3e                	add    BYTE PTR [esi],bh
9f0052e1:	ae                   	scas   al,BYTE PTR es:[edi]
9f0052e2:	ff                   	(bad)  
9f0052e3:	ff 9b 00 00 00 00    	call   FWORD PTR [ebx+0x0]
9f0052e9:	45                   	inc    ebp
9f0052ea:	0e                   	push   cs
9f0052eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052f1:	42                   	inc    edx
9f0052f2:	86 03                	xchg   BYTE PTR [ebx],al
9f0052f4:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0052f8:	c3                   	ret    
9f0052f9:	41                   	inc    ecx
9f0052fa:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0052fe:	04 04                	add    al,0x4
9f005300:	24 00                	and    al,0x0
9f005302:	00 00                	add    BYTE PTR [eax],al
9f005304:	e8 00 00 00 b1       	call   50005309 <sysEnter_Vector+0x4fed5309>
9f005309:	ae                   	scas   al,BYTE PTR es:[edi]
9f00530a:	ff                   	(bad)  
9f00530b:	ff 9b 00 00 00 00    	call   FWORD PTR [ebx+0x0]
9f005311:	45                   	inc    ebp
9f005312:	0e                   	push   cs
9f005313:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005319:	42                   	inc    edx
9f00531a:	86 03                	xchg   BYTE PTR [ebx],al
9f00531c:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f005320:	c3                   	ret    
9f005321:	41                   	inc    ecx
9f005322:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005326:	04 04                	add    al,0x4
9f005328:	10 00                	adc    BYTE PTR [eax],al
9f00532a:	00 00                	add    BYTE PTR [eax],al
9f00532c:	10 01                	adc    BYTE PTR [ecx],al
9f00532e:	00 00                	add    BYTE PTR [eax],al
9f005330:	e2 fe                	loop   9f005330 <__x86.get_pc_thunk.cx+0x11a>
9f005332:	ff                   	(bad)  
9f005333:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f005336:	00 00                	add    BYTE PTR [eax],al
9f005338:	00 00                	add    BYTE PTR [eax],al
9f00533a:	00 00                	add    BYTE PTR [eax],al
9f00533c:	20 00                	and    BYTE PTR [eax],al
9f00533e:	00 00                	add    BYTE PTR [eax],al
9f005340:	24 01                	and    al,0x1
9f005342:	00 00                	add    BYTE PTR [eax],al
9f005344:	10 af ff ff 7c 00    	adc    BYTE PTR [edi+0x7cffff],ch
9f00534a:	00 00                	add    BYTE PTR [eax],al
9f00534c:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f00534f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005355:	44                   	inc    esp
9f005356:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005359:	70 c5                	jo     9f005320 <__x86.get_pc_thunk.cx+0x10a>
9f00535b:	c3                   	ret    
9f00535c:	0c 04                	or     al,0x4
9f00535e:	04 00                	add    al,0x0
9f005360:	1c 00                	sbb    al,0x0
9f005362:	00 00                	add    BYTE PTR [eax],al
9f005364:	48                   	dec    eax
9f005365:	01 00                	add    DWORD PTR [eax],eax
9f005367:	00 68 af             	add    BYTE PTR [eax-0x51],ch
9f00536a:	ff                   	(bad)  
9f00536b:	ff                   	(bad)  
9f00536c:	bc 00 00 00 00       	mov    esp,0x0
9f005371:	45                   	inc    ebp
9f005372:	0e                   	push   cs
9f005373:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005379:	02 b4 c5 0c 04 04 00 	add    dh,BYTE PTR [ebp+eax*8+0x4040c]
9f005380:	1c 00                	sbb    al,0x0
9f005382:	00 00                	add    BYTE PTR [eax],al
9f005384:	68 01 00 00 04       	push   0x4000001
9f005389:	b0 ff                	mov    al,0xff
9f00538b:	ff                   	(bad)  
9f00538c:	be 00 00 00 00       	mov    esi,0x0
9f005391:	45                   	inc    ebp
9f005392:	0e                   	push   cs
9f005393:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005399:	02 b6 c5 0c 04 04    	add    dh,BYTE PTR [esi+0x4040cc5]
9f00539f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0053a2:	00 00                	add    BYTE PTR [eax],al
9f0053a4:	88 01                	mov    BYTE PTR [ecx],al
9f0053a6:	00 00                	add    BYTE PTR [eax],al
9f0053a8:	a2 b0 ff ff 60       	mov    ds:0x60ffffb0,al
9f0053ad:	00 00                	add    BYTE PTR [eax],al
9f0053af:	00 00                	add    BYTE PTR [eax],al
9f0053b1:	45                   	inc    ebp
9f0053b2:	0e                   	push   cs
9f0053b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053b9:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f0053bc:	0c 04                	or     al,0x4
9f0053be:	04 00                	add    al,0x0
9f0053c0:	1c 00                	sbb    al,0x0
9f0053c2:	00 00                	add    BYTE PTR [eax],al
9f0053c4:	a8 01                	test   al,0x1
9f0053c6:	00 00                	add    BYTE PTR [eax],al
9f0053c8:	e2 b0                	loop   9f00537a <__x86.get_pc_thunk.cx+0x164>
9f0053ca:	ff                   	(bad)  
9f0053cb:	ff 1e                	call   FWORD PTR [esi]
9f0053cd:	00 00                	add    BYTE PTR [eax],al
9f0053cf:	00 00                	add    BYTE PTR [eax],al
9f0053d1:	45                   	inc    ebp
9f0053d2:	0e                   	push   cs
9f0053d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053d9:	56                   	push   esi
9f0053da:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0053dd:	04 00                	add    al,0x0
9f0053df:	00 20                	add    BYTE PTR [eax],ah
9f0053e1:	00 00                	add    BYTE PTR [eax],al
9f0053e3:	00 c8                	add    al,cl
9f0053e5:	01 00                	add    DWORD PTR [eax],eax
9f0053e7:	00 e0                	add    al,ah
9f0053e9:	b0 ff                	mov    al,0xff
9f0053eb:	ff                   	(bad)  
9f0053ec:	be 00 00 00 00       	mov    esi,0x0
9f0053f1:	45                   	inc    ebp
9f0053f2:	0e                   	push   cs
9f0053f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053f9:	44                   	inc    esp
9f0053fa:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0053fd:	b2 c5                	mov    dl,0xc5
9f0053ff:	c3                   	ret    
9f005400:	0c 04                	or     al,0x4
9f005402:	04 00                	add    al,0x0
9f005404:	20 00                	and    BYTE PTR [eax],al
9f005406:	00 00                	add    BYTE PTR [eax],al
9f005408:	ec                   	in     al,dx
9f005409:	01 00                	add    DWORD PTR [eax],eax
9f00540b:	00 7a b1             	add    BYTE PTR [edx-0x4f],bh
9f00540e:	ff                   	(bad)  
9f00540f:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f005412:	00 00                	add    BYTE PTR [eax],al
9f005414:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005417:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00541d:	44                   	inc    esp
9f00541e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005421:	52                   	push   edx
9f005422:	c5 c3 0c             	(bad)
9f005425:	04 04                	add    al,0x4
9f005427:	00 20                	add    BYTE PTR [eax],ah
9f005429:	00 00                	add    BYTE PTR [eax],al
9f00542b:	00 10                	add    BYTE PTR [eax],dl
9f00542d:	02 00                	add    al,BYTE PTR [eax]
9f00542f:	00 b4 b1 ff ff 5e 00 	add    BYTE PTR [ecx+esi*4+0x5effff],dh
9f005436:	00 00                	add    BYTE PTR [eax],al
9f005438:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f00543b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005441:	44                   	inc    esp
9f005442:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005445:	52                   	push   edx
9f005446:	c5 c3 0c             	(bad)
9f005449:	04 04                	add    al,0x4
9f00544b:	00 20                	add    BYTE PTR [eax],ah
9f00544d:	00 00                	add    BYTE PTR [eax],al
9f00544f:	00 34 02             	add    BYTE PTR [edx+eax*1],dh
9f005452:	00 00                	add    BYTE PTR [eax],al
9f005454:	ee                   	out    dx,al
9f005455:	b1 ff                	mov    cl,0xff
9f005457:	ff a8 00 00 00 00    	jmp    FWORD PTR [eax+0x0]
9f00545d:	45                   	inc    ebp
9f00545e:	0e                   	push   cs
9f00545f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005465:	44                   	inc    esp
9f005466:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005469:	9c                   	pushf  
9f00546a:	c5 c3 0c             	(bad)
9f00546d:	04 04                	add    al,0x4
9f00546f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005472:	00 00                	add    BYTE PTR [eax],al
9f005474:	58                   	pop    eax
9f005475:	02 00                	add    al,BYTE PTR [eax]
9f005477:	00 72 b2             	add    BYTE PTR [edx-0x4e],dh
9f00547a:	ff                   	(bad)  
9f00547b:	ff 27                	jmp    DWORD PTR [edi]
9f00547d:	00 00                	add    BYTE PTR [eax],al
9f00547f:	00 00                	add    BYTE PTR [eax],al
9f005481:	45                   	inc    ebp
9f005482:	0e                   	push   cs
9f005483:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005489:	5f                   	pop    edi
9f00548a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00548d:	04 00                	add    al,0x0
9f00548f:	00 20                	add    BYTE PTR [eax],ah
9f005491:	00 00                	add    BYTE PTR [eax],al
9f005493:	00 78 02             	add    BYTE PTR [eax+0x2],bh
9f005496:	00 00                	add    BYTE PTR [eax],al
9f005498:	79 b2                	jns    9f00544c <__x86.get_pc_thunk.cx+0x236>
9f00549a:	ff                   	(bad)  
9f00549b:	ff c5                	inc    ebp
9f00549d:	01 00                	add    DWORD PTR [eax],eax
9f00549f:	00 00                	add    BYTE PTR [eax],al
9f0054a1:	45                   	inc    ebp
9f0054a2:	0e                   	push   cs
9f0054a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054a9:	44                   	inc    esp
9f0054aa:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0054ad:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f0054b2:	04 04                	add    al,0x4
9f0054b4:	20 00                	and    BYTE PTR [eax],al
9f0054b6:	00 00                	add    BYTE PTR [eax],al
9f0054b8:	9c                   	pushf  
9f0054b9:	02 00                	add    al,BYTE PTR [eax]
9f0054bb:	00 1a                	add    BYTE PTR [edx],bl
9f0054bd:	b4 ff                	mov    ah,0xff
9f0054bf:	ff 30                	push   DWORD PTR [eax]
9f0054c1:	00 00                	add    BYTE PTR [eax],al
9f0054c3:	00 00                	add    BYTE PTR [eax],al
9f0054c5:	45                   	inc    ebp
9f0054c6:	0e                   	push   cs
9f0054c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054cd:	44                   	inc    esp
9f0054ce:	83 03 64             	add    DWORD PTR [ebx],0x64
9f0054d1:	c5 c3 0c             	(bad)
9f0054d4:	04 04                	add    al,0x4
9f0054d6:	00 00                	add    BYTE PTR [eax],al
9f0054d8:	1c 00                	sbb    al,0x0
9f0054da:	00 00                	add    BYTE PTR [eax],al
9f0054dc:	c0 02 00             	rol    BYTE PTR [edx],0x0
9f0054df:	00 26                	add    BYTE PTR [esi],ah
9f0054e1:	b4 ff                	mov    ah,0xff
9f0054e3:	ff 27                	jmp    DWORD PTR [edi]
9f0054e5:	00 00                	add    BYTE PTR [eax],al
9f0054e7:	00 00                	add    BYTE PTR [eax],al
9f0054e9:	45                   	inc    ebp
9f0054ea:	0e                   	push   cs
9f0054eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054f1:	5f                   	pop    edi
9f0054f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0054f5:	04 00                	add    al,0x0
9f0054f7:	00 20                	add    BYTE PTR [eax],ah
9f0054f9:	00 00                	add    BYTE PTR [eax],al
9f0054fb:	00 e0                	add    al,ah
9f0054fd:	02 00                	add    al,BYTE PTR [eax]
9f0054ff:	00 2d b4 ff ff 35    	add    BYTE PTR ds:0x35ffffb4,ch
9f005505:	00 00                	add    BYTE PTR [eax],al
9f005507:	00 00                	add    BYTE PTR [eax],al
9f005509:	45                   	inc    ebp
9f00550a:	0e                   	push   cs
9f00550b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005511:	44                   	inc    esp
9f005512:	83 03 69             	add    DWORD PTR [ebx],0x69
9f005515:	c5 c3 0c             	(bad)
9f005518:	04 04                	add    al,0x4
9f00551a:	00 00                	add    BYTE PTR [eax],al
9f00551c:	1c 00                	sbb    al,0x0
9f00551e:	00 00                	add    BYTE PTR [eax],al
9f005520:	04 03                	add    al,0x3
9f005522:	00 00                	add    BYTE PTR [eax],al
9f005524:	3e b4 ff             	ds mov ah,0xff
9f005527:	ff 2a                	jmp    FWORD PTR [edx]
9f005529:	00 00                	add    BYTE PTR [eax],al
9f00552b:	00 00                	add    BYTE PTR [eax],al
9f00552d:	45                   	inc    ebp
9f00552e:	0e                   	push   cs
9f00552f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005535:	62                   	(bad)  
9f005536:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005539:	04 00                	add    al,0x0
9f00553b:	00 20                	add    BYTE PTR [eax],ah
9f00553d:	00 00                	add    BYTE PTR [eax],al
9f00553f:	00 24 03             	add    BYTE PTR [ebx+eax*1],ah
9f005542:	00 00                	add    BYTE PTR [eax],al
9f005544:	48                   	dec    eax
9f005545:	b4 ff                	mov    ah,0xff
9f005547:	ff 30                	push   DWORD PTR [eax]
9f005549:	00 00                	add    BYTE PTR [eax],al
9f00554b:	00 00                	add    BYTE PTR [eax],al
9f00554d:	45                   	inc    ebp
9f00554e:	0e                   	push   cs
9f00554f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005555:	44                   	inc    esp
9f005556:	83 03 64             	add    DWORD PTR [ebx],0x64
9f005559:	c5 c3 0c             	(bad)
9f00555c:	04 04                	add    al,0x4
9f00555e:	00 00                	add    BYTE PTR [eax],al
9f005560:	1c 00                	sbb    al,0x0
9f005562:	00 00                	add    BYTE PTR [eax],al
9f005564:	48                   	dec    eax
9f005565:	03 00                	add    eax,DWORD PTR [eax]
9f005567:	00 54 b4 ff          	add    BYTE PTR [esp+esi*4-0x1],dl
9f00556b:	ff 27                	jmp    DWORD PTR [edi]
9f00556d:	00 00                	add    BYTE PTR [eax],al
9f00556f:	00 00                	add    BYTE PTR [eax],al
9f005571:	45                   	inc    ebp
9f005572:	0e                   	push   cs
9f005573:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005579:	5f                   	pop    edi
9f00557a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00557d:	04 00                	add    al,0x0
9f00557f:	00 20                	add    BYTE PTR [eax],ah
9f005581:	00 00                	add    BYTE PTR [eax],al
9f005583:	00 68 03             	add    BYTE PTR [eax+0x3],ch
9f005586:	00 00                	add    BYTE PTR [eax],al
9f005588:	5b                   	pop    ebx
9f005589:	b4 ff                	mov    ah,0xff
9f00558b:	ff 5d 00             	call   FWORD PTR [ebp+0x0]
9f00558e:	00 00                	add    BYTE PTR [eax],al
9f005590:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005593:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005599:	44                   	inc    esp
9f00559a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00559d:	51                   	push   ecx
9f00559e:	c5 c3 0c             	(bad)
9f0055a1:	04 04                	add    al,0x4
9f0055a3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0055a6:	00 00                	add    BYTE PTR [eax],al
9f0055a8:	8c 03                	mov    WORD PTR [ebx],es
9f0055aa:	00 00                	add    BYTE PTR [eax],al
9f0055ac:	94                   	xchg   esp,eax
9f0055ad:	b4 ff                	mov    ah,0xff
9f0055af:	ff 95 00 00 00 00    	call   DWORD PTR [ebp+0x0]
9f0055b5:	45                   	inc    ebp
9f0055b6:	0e                   	push   cs
9f0055b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055bd:	45                   	inc    ebp
9f0055be:	86 03                	xchg   BYTE PTR [ebx],al
9f0055c0:	83 04 02 86          	add    DWORD PTR [edx+eax*1],0xffffff86
9f0055c4:	c3                   	ret    
9f0055c5:	41                   	inc    ecx
9f0055c6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0055ca:	04 04                	add    al,0x4
9f0055cc:	20 00                	and    BYTE PTR [eax],al
9f0055ce:	00 00                	add    BYTE PTR [eax],al
9f0055d0:	b4 03                	mov    ah,0x3
9f0055d2:	00 00                	add    BYTE PTR [eax],al
9f0055d4:	01 b5 ff ff 2e 00    	add    DWORD PTR [ebp+0x2effff],esi
9f0055da:	00 00                	add    BYTE PTR [eax],al
9f0055dc:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0055df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055e5:	44                   	inc    esp
9f0055e6:	83 03 62             	add    DWORD PTR [ebx],0x62
9f0055e9:	c5 c3 0c             	(bad)
9f0055ec:	04 04                	add    al,0x4
9f0055ee:	00 00                	add    BYTE PTR [eax],al
9f0055f0:	1c 00                	sbb    al,0x0
9f0055f2:	00 00                	add    BYTE PTR [eax],al
9f0055f4:	d8 03                	fadd   DWORD PTR [ebx]
9f0055f6:	00 00                	add    BYTE PTR [eax],al
9f0055f8:	0b b5 ff ff 24 00    	or     esi,DWORD PTR [ebp+0x24ffff]
9f0055fe:	00 00                	add    BYTE PTR [eax],al
9f005600:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005603:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005609:	5c                   	pop    esp
9f00560a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00560d:	04 00                	add    al,0x0
9f00560f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005612:	00 00                	add    BYTE PTR [eax],al
9f005614:	f8                   	clc    
9f005615:	03 00                	add    eax,DWORD PTR [eax]
9f005617:	00 0f                	add    BYTE PTR [edi],cl
9f005619:	b5 ff                	mov    ch,0xff
9f00561b:	ff                   	(bad)  
9f00561c:	39 00                	cmp    DWORD PTR [eax],eax
9f00561e:	00 00                	add    BYTE PTR [eax],al
9f005620:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005623:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005629:	42                   	inc    edx
9f00562a:	86 03                	xchg   BYTE PTR [ebx],al
9f00562c:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f005633:	c5 
9f005634:	0c 04                	or     al,0x4
9f005636:	04 00                	add    al,0x0
9f005638:	1c 00                	sbb    al,0x0
9f00563a:	00 00                	add    BYTE PTR [eax],al
9f00563c:	20 04 00             	and    BYTE PTR [eax+eax*1],al
9f00563f:	00 20                	add    BYTE PTR [eax],ah
9f005641:	b5 ff                	mov    ch,0xff
9f005643:	ff 2a                	jmp    FWORD PTR [edx]
9f005645:	00 00                	add    BYTE PTR [eax],al
9f005647:	00 00                	add    BYTE PTR [eax],al
9f005649:	45                   	inc    ebp
9f00564a:	0e                   	push   cs
9f00564b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005651:	62                   	(bad)  
9f005652:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005655:	04 00                	add    al,0x0
9f005657:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00565a:	00 00                	add    BYTE PTR [eax],al
9f00565c:	40                   	inc    eax
9f00565d:	04 00                	add    al,0x0
9f00565f:	00 2a                	add    BYTE PTR [edx],ch
9f005661:	b5 ff                	mov    ch,0xff
9f005663:	ff                   	(bad)  
9f005664:	39 00                	cmp    DWORD PTR [eax],eax
9f005666:	00 00                	add    BYTE PTR [eax],al
9f005668:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f00566b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005671:	42                   	inc    edx
9f005672:	86 03                	xchg   BYTE PTR [ebx],al
9f005674:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f00567b:	c5 
9f00567c:	0c 04                	or     al,0x4
9f00567e:	04 00                	add    al,0x0
9f005680:	1c 00                	sbb    al,0x0
9f005682:	00 00                	add    BYTE PTR [eax],al
9f005684:	68 04 00 00 3b       	push   0x3b000004
9f005689:	b5 ff                	mov    ch,0xff
9f00568b:	ff 2a                	jmp    FWORD PTR [edx]
9f00568d:	00 00                	add    BYTE PTR [eax],al
9f00568f:	00 00                	add    BYTE PTR [eax],al
9f005691:	45                   	inc    ebp
9f005692:	0e                   	push   cs
9f005693:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005699:	62                   	(bad)  
9f00569a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00569d:	04 00                	add    al,0x0
9f00569f:	00 20                	add    BYTE PTR [eax],ah
9f0056a1:	00 00                	add    BYTE PTR [eax],al
9f0056a3:	00 88 04 00 00 45    	add    BYTE PTR [eax+0x45000004],cl
9f0056a9:	b5 ff                	mov    ch,0xff
9f0056ab:	ff 32                	push   DWORD PTR [edx]
9f0056ad:	00 00                	add    BYTE PTR [eax],al
9f0056af:	00 00                	add    BYTE PTR [eax],al
9f0056b1:	45                   	inc    ebp
9f0056b2:	0e                   	push   cs
9f0056b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056b9:	44                   	inc    esp
9f0056ba:	83 03 66             	add    DWORD PTR [ebx],0x66
9f0056bd:	c5 c3 0c             	(bad)
9f0056c0:	04 04                	add    al,0x4
9f0056c2:	00 00                	add    BYTE PTR [eax],al
9f0056c4:	1c 00                	sbb    al,0x0
9f0056c6:	00 00                	add    BYTE PTR [eax],al
9f0056c8:	ac                   	lods   al,BYTE PTR ds:[esi]
9f0056c9:	04 00                	add    al,0x0
9f0056cb:	00 53 b5             	add    BYTE PTR [ebx-0x4b],dl
9f0056ce:	ff                   	(bad)  
9f0056cf:	ff 2a                	jmp    FWORD PTR [edx]
9f0056d1:	00 00                	add    BYTE PTR [eax],al
9f0056d3:	00 00                	add    BYTE PTR [eax],al
9f0056d5:	45                   	inc    ebp
9f0056d6:	0e                   	push   cs
9f0056d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056dd:	62                   	(bad)  
9f0056de:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0056e1:	04 00                	add    al,0x0
9f0056e3:	00 20                	add    BYTE PTR [eax],ah
9f0056e5:	00 00                	add    BYTE PTR [eax],al
9f0056e7:	00 cc                	add    ah,cl
9f0056e9:	04 00                	add    al,0x0
9f0056eb:	00 5d b5             	add    BYTE PTR [ebp-0x4b],bl
9f0056ee:	ff                   	(bad)  
9f0056ef:	ff 31                	push   DWORD PTR [ecx]
9f0056f1:	00 00                	add    BYTE PTR [eax],al
9f0056f3:	00 00                	add    BYTE PTR [eax],al
9f0056f5:	45                   	inc    ebp
9f0056f6:	0e                   	push   cs
9f0056f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056fd:	44                   	inc    esp
9f0056fe:	83 03 65             	add    DWORD PTR [ebx],0x65
9f005701:	c5 c3 0c             	(bad)
9f005704:	04 04                	add    al,0x4
9f005706:	00 00                	add    BYTE PTR [eax],al
9f005708:	1c 00                	sbb    al,0x0
9f00570a:	00 00                	add    BYTE PTR [eax],al
9f00570c:	f0 04 00             	lock add al,0x0
9f00570f:	00 6a b5             	add    BYTE PTR [edx-0x4b],ch
9f005712:	ff                   	(bad)  
9f005713:	ff 27                	jmp    DWORD PTR [edi]
9f005715:	00 00                	add    BYTE PTR [eax],al
9f005717:	00 00                	add    BYTE PTR [eax],al
9f005719:	45                   	inc    ebp
9f00571a:	0e                   	push   cs
9f00571b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005721:	5f                   	pop    edi
9f005722:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005725:	04 00                	add    al,0x0
9f005727:	00 20                	add    BYTE PTR [eax],ah
9f005729:	00 00                	add    BYTE PTR [eax],al
9f00572b:	00 10                	add    BYTE PTR [eax],dl
9f00572d:	05 00 00 71 b5       	add    eax,0xb5710000
9f005732:	ff                   	(bad)  
9f005733:	ff 25 03 00 00 00    	jmp    DWORD PTR ds:0x3
9f005739:	45                   	inc    ebp
9f00573a:	0e                   	push   cs
9f00573b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005741:	44                   	inc    esp
9f005742:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005745:	19 03                	sbb    DWORD PTR [ebx],eax
9f005747:	c5 c3 0c             	(bad)
9f00574a:	04 04                	add    al,0x4
9f00574c:	20 00                	and    BYTE PTR [eax],al
9f00574e:	00 00                	add    BYTE PTR [eax],al
9f005750:	34 05                	xor    al,0x5
9f005752:	00 00                	add    BYTE PTR [eax],al
9f005754:	72 b8                	jb     9f00570e <__x86.get_pc_thunk.cx+0x4f8>
9f005756:	ff                   	(bad)  
9f005757:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
9f00575d:	45                   	inc    ebp
9f00575e:	0e                   	push   cs
9f00575f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005765:	44                   	inc    esp
9f005766:	83 03 61             	add    DWORD PTR [ebx],0x61
9f005769:	c5 c3 0c             	(bad)
9f00576c:	04 04                	add    al,0x4
9f00576e:	00 00                	add    BYTE PTR [eax],al
9f005770:	1c 00                	sbb    al,0x0
9f005772:	00 00                	add    BYTE PTR [eax],al
9f005774:	58                   	pop    eax
9f005775:	05 00 00 7b b8       	add    eax,0xb87b0000
9f00577a:	ff                   	(bad)  
9f00577b:	ff 24 00             	jmp    DWORD PTR [eax+eax*1]
9f00577e:	00 00                	add    BYTE PTR [eax],al
9f005780:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005783:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005789:	5c                   	pop    esp
9f00578a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00578d:	04 00                	add    al,0x0
9f00578f:	00 20                	add    BYTE PTR [eax],ah
9f005791:	00 00                	add    BYTE PTR [eax],al
9f005793:	00 78 05             	add    BYTE PTR [eax+0x5],bh
9f005796:	00 00                	add    BYTE PTR [eax],al
9f005798:	7f b8                	jg     9f005752 <__x86.get_pc_thunk.cx+0x53c>
9f00579a:	ff                   	(bad)  
9f00579b:	ff ae 01 00 00 00    	jmp    FWORD PTR [esi+0x1]
9f0057a1:	45                   	inc    ebp
9f0057a2:	0e                   	push   cs
9f0057a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057a9:	44                   	inc    esp
9f0057aa:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0057ad:	a2 01 c5 c3 0c       	mov    ds:0xcc3c501,al
9f0057b2:	04 04                	add    al,0x4
9f0057b4:	1c 00                	sbb    al,0x0
9f0057b6:	00 00                	add    BYTE PTR [eax],al
9f0057b8:	9c                   	pushf  
9f0057b9:	05 00 00 09 ba       	add    eax,0xba090000
9f0057be:	ff                   	(bad)  
9f0057bf:	ff 2a                	jmp    FWORD PTR [edx]
9f0057c1:	00 00                	add    BYTE PTR [eax],al
9f0057c3:	00 00                	add    BYTE PTR [eax],al
9f0057c5:	45                   	inc    ebp
9f0057c6:	0e                   	push   cs
9f0057c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057cd:	62                   	(bad)  
9f0057ce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0057d1:	04 00                	add    al,0x0
9f0057d3:	00 20                	add    BYTE PTR [eax],ah
9f0057d5:	00 00                	add    BYTE PTR [eax],al
9f0057d7:	00 bc 05 00 00 13 ba 	add    BYTE PTR [ebp+eax*1-0x45ed0000],bh
9f0057de:	ff                   	(bad)  
9f0057df:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
9f0057e5:	45                   	inc    ebp
9f0057e6:	0e                   	push   cs
9f0057e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057ed:	44                   	inc    esp
9f0057ee:	83 03 61             	add    DWORD PTR [ebx],0x61
9f0057f1:	c5 c3 0c             	(bad)
9f0057f4:	04 04                	add    al,0x4
9f0057f6:	00 00                	add    BYTE PTR [eax],al
9f0057f8:	20 00                	and    BYTE PTR [eax],al
9f0057fa:	00 00                	add    BYTE PTR [eax],al
9f0057fc:	e0 05                	loopne 9f005803 <__x86.get_pc_thunk.cx+0x5ed>
9f0057fe:	00 00                	add    BYTE PTR [eax],al
9f005800:	1c ba                	sbb    al,0xba
9f005802:	ff                   	(bad)  
9f005803:	ff 2a                	jmp    FWORD PTR [edx]
9f005805:	00 00                	add    BYTE PTR [eax],al
9f005807:	00 00                	add    BYTE PTR [eax],al
9f005809:	45                   	inc    ebp
9f00580a:	0e                   	push   cs
9f00580b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005811:	41                   	inc    ecx
9f005812:	83 03 60             	add    DWORD PTR [ebx],0x60
9f005815:	c3                   	ret    
9f005816:	41                   	inc    ecx
9f005817:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00581a:	04 00                	add    al,0x0
9f00581c:	20 00                	and    BYTE PTR [eax],al
9f00581e:	00 00                	add    BYTE PTR [eax],al
9f005820:	04 06                	add    al,0x6
9f005822:	00 00                	add    BYTE PTR [eax],al
9f005824:	22 ba ff ff 47 00    	and    bh,BYTE PTR [edx+0x47ffff]
9f00582a:	00 00                	add    BYTE PTR [eax],al
9f00582c:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f00582f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005835:	44                   	inc    esp
9f005836:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f005839:	c3                   	ret    
9f00583a:	41                   	inc    ecx
9f00583b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00583e:	04 00                	add    al,0x0
9f005840:	20 00                	and    BYTE PTR [eax],al
9f005842:	00 00                	add    BYTE PTR [eax],al
9f005844:	28 06                	sub    BYTE PTR [esi],al
9f005846:	00 00                	add    BYTE PTR [eax],al
9f005848:	45                   	inc    ebp
9f005849:	ba ff ff 47 00       	mov    edx,0x47ffff
9f00584e:	00 00                	add    BYTE PTR [eax],al
9f005850:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005853:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005859:	44                   	inc    esp
9f00585a:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f00585d:	c3                   	ret    
9f00585e:	41                   	inc    ecx
9f00585f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005862:	04 00                	add    al,0x0
9f005864:	20 00                	and    BYTE PTR [eax],al
9f005866:	00 00                	add    BYTE PTR [eax],al
9f005868:	4c                   	dec    esp
9f005869:	06                   	push   es
9f00586a:	00 00                	add    BYTE PTR [eax],al
9f00586c:	68 ba ff ff c1       	push   0xc1ffffba
9f005871:	00 00                	add    BYTE PTR [eax],al
9f005873:	00 00                	add    BYTE PTR [eax],al
9f005875:	45                   	inc    ebp
9f005876:	0e                   	push   cs
9f005877:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00587d:	44                   	inc    esp
9f00587e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005881:	b5 c5                	mov    ch,0xc5
9f005883:	c3                   	ret    
9f005884:	0c 04                	or     al,0x4
9f005886:	04 00                	add    al,0x0
9f005888:	24 00                	and    al,0x0
9f00588a:	00 00                	add    BYTE PTR [eax],al
9f00588c:	70 06                	jo     9f005894 <__x86.get_pc_thunk.cx+0x67e>
9f00588e:	00 00                	add    BYTE PTR [eax],al
9f005890:	05 bb ff ff 3e       	add    eax,0x3effffbb
9f005895:	00 00                	add    BYTE PTR [eax],al
9f005897:	00 00                	add    BYTE PTR [eax],al
9f005899:	45                   	inc    ebp
9f00589a:	0e                   	push   cs
9f00589b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058a1:	45                   	inc    ebp
9f0058a2:	86 03                	xchg   BYTE PTR [ebx],al
9f0058a4:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f0058a8:	41                   	inc    ecx
9f0058a9:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0058ad:	04 04                	add    al,0x4
9f0058af:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0058b2:	00 00                	add    BYTE PTR [eax],al
9f0058b4:	98                   	cwde   
9f0058b5:	06                   	push   es
9f0058b6:	00 00                	add    BYTE PTR [eax],al
9f0058b8:	1b bb ff ff 40 00    	sbb    edi,DWORD PTR [ebx+0x40ffff]
9f0058be:	00 00                	add    BYTE PTR [eax],al
9f0058c0:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0058c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058c9:	45                   	inc    ebp
9f0058ca:	86 03                	xchg   BYTE PTR [ebx],al
9f0058cc:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f0058d0:	41                   	inc    ecx
9f0058d1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0058d5:	04 04                	add    al,0x4
9f0058d7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0058da:	00 00                	add    BYTE PTR [eax],al
9f0058dc:	c0 06 00             	rol    BYTE PTR [esi],0x0
9f0058df:	00 33                	add    BYTE PTR [ebx],dh
9f0058e1:	bb ff ff 42 00       	mov    ebx,0x42ffff
9f0058e6:	00 00                	add    BYTE PTR [eax],al
9f0058e8:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0058eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058f1:	45                   	inc    ebp
9f0058f2:	86 03                	xchg   BYTE PTR [ebx],al
9f0058f4:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f0058f8:	41                   	inc    ecx
9f0058f9:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0058fd:	04 04                	add    al,0x4
9f0058ff:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005902:	00 00                	add    BYTE PTR [eax],al
9f005904:	e8 06 00 00 4d       	call   ec00590f <tmbuf+0x4cffd92f>
9f005909:	bb ff ff 44 00       	mov    ebx,0x44ffff
9f00590e:	00 00                	add    BYTE PTR [eax],al
9f005910:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005913:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005919:	45                   	inc    ebp
9f00591a:	86 03                	xchg   BYTE PTR [ebx],al
9f00591c:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f005923:	c5 
9f005924:	0c 04                	or     al,0x4
9f005926:	04 00                	add    al,0x0
9f005928:	24 00                	and    al,0x0
9f00592a:	00 00                	add    BYTE PTR [eax],al
9f00592c:	10 07                	adc    BYTE PTR [edi],al
9f00592e:	00 00                	add    BYTE PTR [eax],al
9f005930:	69 bb ff ff 46 00 00 	imul   edi,DWORD PTR [ebx+0x46ffff],0x45000000
9f005937:	00 00 45 
9f00593a:	0e                   	push   cs
9f00593b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005941:	45                   	inc    ebp
9f005942:	86 03                	xchg   BYTE PTR [ebx],al
9f005944:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f005948:	41                   	inc    ecx
9f005949:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00594d:	04 04                	add    al,0x4
9f00594f:	00 20                	add    BYTE PTR [eax],ah
9f005951:	00 00                	add    BYTE PTR [eax],al
9f005953:	00 38                	add    BYTE PTR [eax],bh
9f005955:	07                   	pop    es
9f005956:	00 00                	add    BYTE PTR [eax],al
9f005958:	87 bb ff ff cd 00    	xchg   DWORD PTR [ebx+0xcdffff],edi
9f00595e:	00 00                	add    BYTE PTR [eax],al
9f005960:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005963:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005969:	44                   	inc    esp
9f00596a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00596d:	c1 c5 c3             	rol    ebp,0xc3
9f005970:	0c 04                	or     al,0x4
9f005972:	04 00                	add    al,0x0
9f005974:	20 00                	and    BYTE PTR [eax],al
9f005976:	00 00                	add    BYTE PTR [eax],al
9f005978:	5c                   	pop    esp
9f005979:	07                   	pop    es
9f00597a:	00 00                	add    BYTE PTR [eax],al
9f00597c:	30 bc ff ff 27 00 00 	xor    BYTE PTR [edi+edi*8+0x27ff],bh
9f005983:	00 00                	add    BYTE PTR [eax],al
9f005985:	45                   	inc    ebp
9f005986:	0e                   	push   cs
9f005987:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00598d:	44                   	inc    esp
9f00598e:	83 03 5a             	add    DWORD PTR [ebx],0x5a
9f005991:	c3                   	ret    
9f005992:	41                   	inc    ecx
9f005993:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005996:	04 00                	add    al,0x0
9f005998:	20 00                	and    BYTE PTR [eax],al
9f00599a:	00 00                	add    BYTE PTR [eax],al
9f00599c:	80 07 00             	add    BYTE PTR [edi],0x0
9f00599f:	00 33                	add    BYTE PTR [ebx],dh
9f0059a1:	bc ff ff 5d 00       	mov    esp,0x5dffff
9f0059a6:	00 00                	add    BYTE PTR [eax],al
9f0059a8:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0059ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059b1:	44                   	inc    esp
9f0059b2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0059b5:	51                   	push   ecx
9f0059b6:	c5 c3 0c             	(bad)
9f0059b9:	04 04                	add    al,0x4
9f0059bb:	00 20                	add    BYTE PTR [eax],ah
9f0059bd:	00 00                	add    BYTE PTR [eax],al
9f0059bf:	00 a4 07 00 00 6c bc 	add    BYTE PTR [edi+eax*1-0x43940000],ah
9f0059c6:	ff                   	(bad)  
9f0059c7:	ff 58 00             	call   FWORD PTR [eax+0x0]
9f0059ca:	00 00                	add    BYTE PTR [eax],al
9f0059cc:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0059cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059d5:	44                   	inc    esp
9f0059d6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0059d9:	4c                   	dec    esp
9f0059da:	c5 c3 0c             	(bad)
9f0059dd:	04 04                	add    al,0x4
9f0059df:	00 20                	add    BYTE PTR [eax],ah
9f0059e1:	00 00                	add    BYTE PTR [eax],al
9f0059e3:	00 c8                	add    al,cl
9f0059e5:	07                   	pop    es
9f0059e6:	00 00                	add    BYTE PTR [eax],al
9f0059e8:	a0 bc ff ff 58       	mov    al,ds:0x58ffffbc
9f0059ed:	00 00                	add    BYTE PTR [eax],al
9f0059ef:	00 00                	add    BYTE PTR [eax],al
9f0059f1:	45                   	inc    ebp
9f0059f2:	0e                   	push   cs
9f0059f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059f9:	44                   	inc    esp
9f0059fa:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0059fd:	4c                   	dec    esp
9f0059fe:	c5 c3 0c             	(bad)
9f005a01:	04 04                	add    al,0x4
9f005a03:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a06:	00 00                	add    BYTE PTR [eax],al
9f005a08:	ec                   	in     al,dx
9f005a09:	07                   	pop    es
9f005a0a:	00 00                	add    BYTE PTR [eax],al
9f005a0c:	d4 bc                	aam    0xbc
9f005a0e:	ff                   	(bad)  
9f005a0f:	ff                   	(bad)  
9f005a10:	38 00                	cmp    BYTE PTR [eax],al
9f005a12:	00 00                	add    BYTE PTR [eax],al
9f005a14:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005a17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a1d:	70 c5                	jo     9f0059e4 <__x86.get_pc_thunk.cx+0x7ce>
9f005a1f:	0c 04                	or     al,0x4
9f005a21:	04 00                	add    al,0x0
9f005a23:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a26:	00 00                	add    BYTE PTR [eax],al
9f005a28:	0c 08                	or     al,0x8
9f005a2a:	00 00                	add    BYTE PTR [eax],al
9f005a2c:	ec                   	in     al,dx
9f005a2d:	bc ff ff 3b 00       	mov    esp,0x3bffff
9f005a32:	00 00                	add    BYTE PTR [eax],al
9f005a34:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005a37:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a3d:	73 c5                	jae    9f005a04 <__x86.get_pc_thunk.cx+0x7ee>
9f005a3f:	0c 04                	or     al,0x4
9f005a41:	04 00                	add    al,0x0
9f005a43:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a46:	00 00                	add    BYTE PTR [eax],al
9f005a48:	2c 08                	sub    al,0x8
9f005a4a:	00 00                	add    BYTE PTR [eax],al
9f005a4c:	07                   	pop    es
9f005a4d:	bd ff ff 3b 00       	mov    ebp,0x3bffff
9f005a52:	00 00                	add    BYTE PTR [eax],al
9f005a54:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005a57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a5d:	73 c5                	jae    9f005a24 <__x86.get_pc_thunk.cx+0x80e>
9f005a5f:	0c 04                	or     al,0x4
9f005a61:	04 00                	add    al,0x0
9f005a63:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005a66:	00 00                	add    BYTE PTR [eax],al
9f005a68:	4c                   	dec    esp
9f005a69:	08 00                	or     BYTE PTR [eax],al
9f005a6b:	00 22                	add    BYTE PTR [edx],ah
9f005a6d:	bd ff ff 8c 00       	mov    ebp,0x8cffff
9f005a72:	00 00                	add    BYTE PTR [eax],al
9f005a74:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005a77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a7d:	45                   	inc    ebp
9f005a7e:	86 03                	xchg   BYTE PTR [ebx],al
9f005a80:	83 04 02 7d          	add    DWORD PTR [edx+eax*1],0x7d
9f005a84:	c3                   	ret    
9f005a85:	41                   	inc    ecx
9f005a86:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005a8a:	04 04                	add    al,0x4
9f005a8c:	24 00                	and    al,0x0
9f005a8e:	00 00                	add    BYTE PTR [eax],al
9f005a90:	74 08                	je     9f005a9a <__x86.get_pc_thunk.cx+0x884>
9f005a92:	00 00                	add    BYTE PTR [eax],al
9f005a94:	86 bd ff ff 74 00    	xchg   BYTE PTR [ebp+0x74ffff],bh
9f005a9a:	00 00                	add    BYTE PTR [eax],al
9f005a9c:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005a9f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005aa5:	45                   	inc    ebp
9f005aa6:	86 03                	xchg   BYTE PTR [ebx],al
9f005aa8:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f005aac:	c3                   	ret    
9f005aad:	41                   	inc    ecx
9f005aae:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005ab2:	04 04                	add    al,0x4
9f005ab4:	24 00                	and    al,0x0
9f005ab6:	00 00                	add    BYTE PTR [eax],al
9f005ab8:	9c                   	pushf  
9f005ab9:	08 00                	or     BYTE PTR [eax],al
9f005abb:	00 d2                	add    dl,dl
9f005abd:	bd ff ff 74 00       	mov    ebp,0x74ffff
9f005ac2:	00 00                	add    BYTE PTR [eax],al
9f005ac4:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005ac7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005acd:	45                   	inc    ebp
9f005ace:	86 03                	xchg   BYTE PTR [ebx],al
9f005ad0:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f005ad4:	c3                   	ret    
9f005ad5:	41                   	inc    ecx
9f005ad6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005ada:	04 04                	add    al,0x4
9f005adc:	1c 00                	sbb    al,0x0
9f005ade:	00 00                	add    BYTE PTR [eax],al
9f005ae0:	c4 08                	les    ecx,FWORD PTR [eax]
9f005ae2:	00 00                	add    BYTE PTR [eax],al
9f005ae4:	1e                   	push   ds
9f005ae5:	be ff ff 21 00       	mov    esi,0x21ffff
9f005aea:	00 00                	add    BYTE PTR [eax],al
9f005aec:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005aef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005af5:	59                   	pop    ecx
9f005af6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005af9:	04 00                	add    al,0x0
9f005afb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005afe:	00 00                	add    BYTE PTR [eax],al
9f005b00:	e4 08                	in     al,0x8
9f005b02:	00 00                	add    BYTE PTR [eax],al
9f005b04:	1f                   	pop    ds
9f005b05:	be ff ff 2d 00       	mov    esi,0x2dffff
9f005b0a:	00 00                	add    BYTE PTR [eax],al
9f005b0c:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005b0f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b15:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f005b19:	04 00                	add    al,0x0
9f005b1b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005b1e:	00 00                	add    BYTE PTR [eax],al
9f005b20:	04 09                	add    al,0x9
9f005b22:	00 00                	add    BYTE PTR [eax],al
9f005b24:	2c be                	sub    al,0xbe
9f005b26:	ff                   	(bad)  
9f005b27:	ff 27                	jmp    DWORD PTR [edi]
9f005b29:	00 00                	add    BYTE PTR [eax],al
9f005b2b:	00 00                	add    BYTE PTR [eax],al
9f005b2d:	45                   	inc    ebp
9f005b2e:	0e                   	push   cs
9f005b2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b35:	5f                   	pop    edi
9f005b36:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005b39:	04 00                	add    al,0x0
9f005b3b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005b3e:	00 00                	add    BYTE PTR [eax],al
9f005b40:	24 09                	and    al,0x9
9f005b42:	00 00                	add    BYTE PTR [eax],al
9f005b44:	33 be ff ff 50 00    	xor    edi,DWORD PTR [esi+0x50ffff]
9f005b4a:	00 00                	add    BYTE PTR [eax],al
9f005b4c:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005b4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b55:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f005b58:	0c 04                	or     al,0x4
9f005b5a:	04 00                	add    al,0x0
9f005b5c:	20 00                	and    BYTE PTR [eax],al
9f005b5e:	00 00                	add    BYTE PTR [eax],al
9f005b60:	44                   	inc    esp
9f005b61:	09 00                	or     DWORD PTR [eax],eax
9f005b63:	00 63 be             	add    BYTE PTR [ebx-0x42],ah
9f005b66:	ff                   	(bad)  
9f005b67:	ff                   	(bad)  
9f005b68:	ee                   	out    dx,al
9f005b69:	01 00                	add    DWORD PTR [eax],eax
9f005b6b:	00 00                	add    BYTE PTR [eax],al
9f005b6d:	45                   	inc    ebp
9f005b6e:	0e                   	push   cs
9f005b6f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b75:	44                   	inc    esp
9f005b76:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005b79:	e2 01                	loop   9f005b7c <__x86.get_pc_thunk.cx+0x966>
9f005b7b:	c5 c3 0c             	(bad)
9f005b7e:	04 04                	add    al,0x4
9f005b80:	1c 00                	sbb    al,0x0
9f005b82:	00 00                	add    BYTE PTR [eax],al
9f005b84:	68 09 00 00 2d       	push   0x2d000009
9f005b89:	c0 ff ff             	sar    bh,0xff
9f005b8c:	53                   	push   ebx
9f005b8d:	00 00                	add    BYTE PTR [eax],al
9f005b8f:	00 00                	add    BYTE PTR [eax],al
9f005b91:	45                   	inc    ebp
9f005b92:	0e                   	push   cs
9f005b93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b99:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f005b9c:	0c 04                	or     al,0x4
9f005b9e:	04 00                	add    al,0x0
9f005ba0:	1c 00                	sbb    al,0x0
9f005ba2:	00 00                	add    BYTE PTR [eax],al
9f005ba4:	88 09                	mov    BYTE PTR [ecx],cl
9f005ba6:	00 00                	add    BYTE PTR [eax],al
9f005ba8:	60                   	pusha  
9f005ba9:	c0 ff ff             	sar    bh,0xff
9f005bac:	20 00                	and    BYTE PTR [eax],al
9f005bae:	00 00                	add    BYTE PTR [eax],al
9f005bb0:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005bb3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005bb9:	58                   	pop    eax
9f005bba:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005bbd:	04 00                	add    al,0x0
9f005bbf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005bc2:	00 00                	add    BYTE PTR [eax],al
9f005bc4:	a8 09                	test   al,0x9
9f005bc6:	00 00                	add    BYTE PTR [eax],al
9f005bc8:	60                   	pusha  
9f005bc9:	c0 ff ff             	sar    bh,0xff
9f005bcc:	24 00                	and    al,0x0
9f005bce:	00 00                	add    BYTE PTR [eax],al
9f005bd0:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005bd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005bd9:	5c                   	pop    esp
9f005bda:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005bdd:	04 00                	add    al,0x0
9f005bdf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005be2:	00 00                	add    BYTE PTR [eax],al
9f005be4:	c8 09 00 00          	enter  0x9,0x0
9f005be8:	64 c0 ff ff          	fs sar bh,0xff
9f005bec:	24 00                	and    al,0x0
9f005bee:	00 00                	add    BYTE PTR [eax],al
9f005bf0:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005bf3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005bf9:	5c                   	pop    esp
9f005bfa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005bfd:	04 00                	add    al,0x0
9f005bff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005c02:	00 00                	add    BYTE PTR [eax],al
9f005c04:	e8 09 00 00 68       	call   7005c12 <sysEnter_Vector+0x6ed5c12>
9f005c09:	c0 ff ff             	sar    bh,0xff
9f005c0c:	52                   	push   edx
9f005c0d:	01 00                	add    DWORD PTR [eax],eax
9f005c0f:	00 00                	add    BYTE PTR [eax],al
9f005c11:	45                   	inc    ebp
9f005c12:	0e                   	push   cs
9f005c13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c19:	03 4a 01             	add    ecx,DWORD PTR [edx+0x1]
9f005c1c:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005c1f:	04 1c                	add    al,0x1c
9f005c21:	00 00                	add    BYTE PTR [eax],al
9f005c23:	00 08                	add    BYTE PTR [eax],cl
9f005c25:	0a 00                	or     al,BYTE PTR [eax]
9f005c27:	00 9a c1 ff ff 24    	add    BYTE PTR [edx+0x24ffffc1],bl
9f005c2d:	00 00                	add    BYTE PTR [eax],al
9f005c2f:	00 00                	add    BYTE PTR [eax],al
9f005c31:	45                   	inc    ebp
9f005c32:	0e                   	push   cs
9f005c33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c39:	5c                   	pop    esp
9f005c3a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005c3d:	04 00                	add    al,0x0
9f005c3f:	00 28                	add    BYTE PTR [eax],ch
9f005c41:	00 00                	add    BYTE PTR [eax],al
9f005c43:	00 28                	add    BYTE PTR [eax],ch
9f005c45:	0a 00                	or     al,BYTE PTR [eax]
9f005c47:	00 9e c1 ff ff ee    	add    BYTE PTR [esi-0x1100003f],bl
9f005c4d:	02 00                	add    al,BYTE PTR [eax]
9f005c4f:	00 00                	add    BYTE PTR [eax],al
9f005c51:	45                   	inc    ebp
9f005c52:	0e                   	push   cs
9f005c53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c59:	48                   	dec    eax
9f005c5a:	86 03                	xchg   BYTE PTR [ebx],al
9f005c5c:	83 04 03 dc          	add    DWORD PTR [ebx+eax*1],0xffffffdc
9f005c60:	02 c3                	add    al,bl
9f005c62:	41                   	inc    ecx
9f005c63:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005c67:	04 04                	add    al,0x4
9f005c69:	00 00                	add    BYTE PTR [eax],al
9f005c6b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005c6e:	00 00                	add    BYTE PTR [eax],al
9f005c70:	54                   	push   esp
9f005c71:	0a 00                	or     al,BYTE PTR [eax]
9f005c73:	00 60 c4             	add    BYTE PTR [eax-0x3c],ah
9f005c76:	ff                   	(bad)  
9f005c77:	ff 27                	jmp    DWORD PTR [edi]
9f005c79:	00 00                	add    BYTE PTR [eax],al
9f005c7b:	00 00                	add    BYTE PTR [eax],al
9f005c7d:	45                   	inc    ebp
9f005c7e:	0e                   	push   cs
9f005c7f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c85:	5f                   	pop    edi
9f005c86:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005c89:	04 00                	add    al,0x0
9f005c8b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005c8e:	00 00                	add    BYTE PTR [eax],al
9f005c90:	74 0a                	je     9f005c9c <__x86.get_pc_thunk.cx+0xa86>
9f005c92:	00 00                	add    BYTE PTR [eax],al
9f005c94:	67 c4                	addr16 (bad) 
9f005c96:	ff                   	(bad)  
9f005c97:	ff 27                	jmp    DWORD PTR [edi]
9f005c99:	00 00                	add    BYTE PTR [eax],al
9f005c9b:	00 00                	add    BYTE PTR [eax],al
9f005c9d:	45                   	inc    ebp
9f005c9e:	0e                   	push   cs
9f005c9f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ca5:	5f                   	pop    edi
9f005ca6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ca9:	04 00                	add    al,0x0
9f005cab:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005cae:	00 00                	add    BYTE PTR [eax],al
9f005cb0:	94                   	xchg   esp,eax
9f005cb1:	0a 00                	or     al,BYTE PTR [eax]
9f005cb3:	00 6e c4             	add    BYTE PTR [esi-0x3c],ch
9f005cb6:	ff                   	(bad)  
9f005cb7:	ff 21                	jmp    DWORD PTR [ecx]
9f005cb9:	00 00                	add    BYTE PTR [eax],al
9f005cbb:	00 00                	add    BYTE PTR [eax],al
9f005cbd:	45                   	inc    ebp
9f005cbe:	0e                   	push   cs
9f005cbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005cc5:	59                   	pop    ecx
9f005cc6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005cc9:	04 00                	add    al,0x0
9f005ccb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005cce:	00 00                	add    BYTE PTR [eax],al
9f005cd0:	b4 0a                	mov    ah,0xa
9f005cd2:	00 00                	add    BYTE PTR [eax],al
9f005cd4:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005cd5:	c4                   	(bad)  
9f005cd6:	ff                   	(bad)  
9f005cd7:	ff 24 00             	jmp    DWORD PTR [eax+eax*1]
9f005cda:	00 00                	add    BYTE PTR [eax],al
9f005cdc:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005cdf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ce5:	5c                   	pop    esp
9f005ce6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ce9:	04 00                	add    al,0x0
9f005ceb:	00 20                	add    BYTE PTR [eax],ah
9f005ced:	00 00                	add    BYTE PTR [eax],al
9f005cef:	00 d4                	add    ah,dl
9f005cf1:	0a 00                	or     al,BYTE PTR [eax]
9f005cf3:	00 73 c4             	add    BYTE PTR [ebx-0x3c],dh
9f005cf6:	ff                   	(bad)  
9f005cf7:	ff 77 00             	push   DWORD PTR [edi+0x0]
9f005cfa:	00 00                	add    BYTE PTR [eax],al
9f005cfc:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005cff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d05:	44                   	inc    esp
9f005d06:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005d09:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f005d0c:	0c 04                	or     al,0x4
9f005d0e:	04 00                	add    al,0x0
9f005d10:	20 00                	and    BYTE PTR [eax],al
9f005d12:	00 00                	add    BYTE PTR [eax],al
9f005d14:	f8                   	clc    
9f005d15:	0a 00                	or     al,BYTE PTR [eax]
9f005d17:	00 c6                	add    dh,al
9f005d19:	c4                   	(bad)  
9f005d1a:	ff                   	(bad)  
9f005d1b:	ff 64 00 00          	jmp    DWORD PTR [eax+eax*1+0x0]
9f005d1f:	00 00                	add    BYTE PTR [eax],al
9f005d21:	45                   	inc    ebp
9f005d22:	0e                   	push   cs
9f005d23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d29:	44                   	inc    esp
9f005d2a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005d2d:	58                   	pop    eax
9f005d2e:	c5 c3 0c             	(bad)
9f005d31:	04 04                	add    al,0x4
9f005d33:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005d36:	00 00                	add    BYTE PTR [eax],al
9f005d38:	1c 0b                	sbb    al,0xb
9f005d3a:	00 00                	add    BYTE PTR [eax],al
9f005d3c:	06                   	push   es
9f005d3d:	c5 ff ff             	(bad)  
9f005d40:	8b 00                	mov    eax,DWORD PTR [eax]
9f005d42:	00 00                	add    BYTE PTR [eax],al
9f005d44:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005d47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d4d:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f005d53:	00 20                	add    BYTE PTR [eax],ah
9f005d55:	00 00                	add    BYTE PTR [eax],al
9f005d57:	00 3c 0b             	add    BYTE PTR [ebx+ecx*1],bh
9f005d5a:	00 00                	add    BYTE PTR [eax],al
9f005d5c:	71 c5                	jno    9f005d23 <__x86.get_pc_thunk.cx+0xb0d>
9f005d5e:	ff                   	(bad)  
9f005d5f:	ff 77 00             	push   DWORD PTR [edi+0x0]
9f005d62:	00 00                	add    BYTE PTR [eax],al
9f005d64:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005d67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d6d:	44                   	inc    esp
9f005d6e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005d71:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f005d74:	0c 04                	or     al,0x4
9f005d76:	04 00                	add    al,0x0
9f005d78:	1c 00                	sbb    al,0x0
9f005d7a:	00 00                	add    BYTE PTR [eax],al
9f005d7c:	60                   	pusha  
9f005d7d:	0b 00                	or     eax,DWORD PTR [eax]
9f005d7f:	00 c4                	add    ah,al
9f005d81:	c5 ff ff             	(bad)  
9f005d84:	88 00                	mov    BYTE PTR [eax],al
9f005d86:	00 00                	add    BYTE PTR [eax],al
9f005d88:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005d8b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d91:	02 80 c5 0c 04 04    	add    al,BYTE PTR [eax+0x4040cc5]
9f005d97:	00 20                	add    BYTE PTR [eax],ah
9f005d99:	00 00                	add    BYTE PTR [eax],al
9f005d9b:	00 80 0b 00 00 2c    	add    BYTE PTR [eax+0x2c00000b],al
9f005da1:	c6                   	(bad)  
9f005da2:	ff                   	(bad)  
9f005da3:	ff 8f 00 00 00 00    	dec    DWORD PTR [edi+0x0]
9f005da9:	45                   	inc    ebp
9f005daa:	0e                   	push   cs
9f005dab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005db1:	44                   	inc    esp
9f005db2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005db5:	83 c5 c3             	add    ebp,0xffffffc3
9f005db8:	0c 04                	or     al,0x4
9f005dba:	04 00                	add    al,0x0
9f005dbc:	20 00                	and    BYTE PTR [eax],al
9f005dbe:	00 00                	add    BYTE PTR [eax],al
9f005dc0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f005dc1:	0b 00                	or     eax,DWORD PTR [eax]
9f005dc3:	00 97 c6 ff ff c4    	add    BYTE PTR [edi-0x3b00003a],dl
9f005dc9:	02 00                	add    al,BYTE PTR [eax]
9f005dcb:	00 00                	add    BYTE PTR [eax],al
9f005dcd:	45                   	inc    ebp
9f005dce:	0e                   	push   cs
9f005dcf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005dd5:	44                   	inc    esp
9f005dd6:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005dd9:	b8 02 c5 c3 0c       	mov    eax,0xcc3c502
9f005dde:	04 04                	add    al,0x4
9f005de0:	1c 00                	sbb    al,0x0
9f005de2:	00 00                	add    BYTE PTR [eax],al
9f005de4:	c8 0b 00 00          	enter  0xb,0x0
9f005de8:	37                   	aaa    
9f005de9:	c9                   	leave  
9f005dea:	ff                   	(bad)  
9f005deb:	ff 24 00             	jmp    DWORD PTR [eax+eax*1]
9f005dee:	00 00                	add    BYTE PTR [eax],al
9f005df0:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005df3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005df9:	5c                   	pop    esp
9f005dfa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005dfd:	04 00                	add    al,0x0
9f005dff:	00 20                	add    BYTE PTR [eax],ah
9f005e01:	00 00                	add    BYTE PTR [eax],al
9f005e03:	00 e8                	add    al,ch
9f005e05:	0b 00                	or     eax,DWORD PTR [eax]
9f005e07:	00 3b                	add    BYTE PTR [ebx],bh
9f005e09:	c9                   	leave  
9f005e0a:	ff                   	(bad)  
9f005e0b:	ff 06                	inc    DWORD PTR [esi]
9f005e0d:	01 00                	add    DWORD PTR [eax],eax
9f005e0f:	00 00                	add    BYTE PTR [eax],al
9f005e11:	45                   	inc    ebp
9f005e12:	0e                   	push   cs
9f005e13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e19:	44                   	inc    esp
9f005e1a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005e1d:	fa                   	cli    
9f005e1e:	c5 c3 0c             	(bad)
9f005e21:	04 04                	add    al,0x4
9f005e23:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005e26:	00 00                	add    BYTE PTR [eax],al
9f005e28:	0c 0c                	or     al,0xc
9f005e2a:	00 00                	add    BYTE PTR [eax],al
9f005e2c:	1d ca ff ff 27       	sbb    eax,0x27ffffca
9f005e31:	00 00                	add    BYTE PTR [eax],al
9f005e33:	00 00                	add    BYTE PTR [eax],al
9f005e35:	45                   	inc    ebp
9f005e36:	0e                   	push   cs
9f005e37:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e3d:	5f                   	pop    edi
9f005e3e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005e41:	04 00                	add    al,0x0
9f005e43:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005e46:	00 00                	add    BYTE PTR [eax],al
9f005e48:	2c 0c                	sub    al,0xc
9f005e4a:	00 00                	add    BYTE PTR [eax],al
9f005e4c:	24 ca                	and    al,0xca
9f005e4e:	ff                   	(bad)  
9f005e4f:	ff 25 00 00 00 00    	jmp    DWORD PTR ds:0x0
9f005e55:	45                   	inc    ebp
9f005e56:	0e                   	push   cs
9f005e57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e5d:	5d                   	pop    ebp
9f005e5e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005e61:	04 00                	add    al,0x0
9f005e63:	00 20                	add    BYTE PTR [eax],ah
9f005e65:	00 00                	add    BYTE PTR [eax],al
9f005e67:	00 4c 0c 00          	add    BYTE PTR [esp+ecx*1+0x0],cl
9f005e6b:	00 29                	add    BYTE PTR [ecx],ch
9f005e6d:	ca ff ff             	retf   0xffff
9f005e70:	36 00 00             	add    BYTE PTR ss:[eax],al
9f005e73:	00 00                	add    BYTE PTR [eax],al
9f005e75:	45                   	inc    ebp
9f005e76:	0e                   	push   cs
9f005e77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e7d:	44                   	inc    esp
9f005e7e:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f005e81:	c5 c3 0c             	(bad)
9f005e84:	04 04                	add    al,0x4
9f005e86:	00 00                	add    BYTE PTR [eax],al
9f005e88:	1c 00                	sbb    al,0x0
9f005e8a:	00 00                	add    BYTE PTR [eax],al
9f005e8c:	70 0c                	jo     9f005e9a <__x86.get_pc_thunk.cx+0xc84>
9f005e8e:	00 00                	add    BYTE PTR [eax],al
9f005e90:	3b ca                	cmp    ecx,edx
9f005e92:	ff                   	(bad)  
9f005e93:	ff 9f 01 00 00 00    	call   FWORD PTR [edi+0x1]
9f005e99:	45                   	inc    ebp
9f005e9a:	0e                   	push   cs
9f005e9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ea1:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f005ea7:	04 1c                	add    al,0x1c
9f005ea9:	00 00                	add    BYTE PTR [eax],al
9f005eab:	00 90 0c 00 00 ba    	add    BYTE PTR [eax-0x45fffff4],dl
9f005eb1:	cb                   	retf   
9f005eb2:	ff                   	(bad)  
9f005eb3:	ff 24 00             	jmp    DWORD PTR [eax+eax*1]
9f005eb6:	00 00                	add    BYTE PTR [eax],al
9f005eb8:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005ebb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ec1:	5c                   	pop    esp
9f005ec2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ec5:	04 00                	add    al,0x0
9f005ec7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005eca:	00 00                	add    BYTE PTR [eax],al
9f005ecc:	b0 0c                	mov    al,0xc
9f005ece:	00 00                	add    BYTE PTR [eax],al
9f005ed0:	be cb ff ff cb       	mov    esi,0xcbffffcb
9f005ed5:	00 00                	add    BYTE PTR [eax],al
9f005ed7:	00 00                	add    BYTE PTR [eax],al
9f005ed9:	45                   	inc    ebp
9f005eda:	0e                   	push   cs
9f005edb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ee1:	02 c3                	add    al,bl
9f005ee3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ee6:	04 00                	add    al,0x0
9f005ee8:	1c 00                	sbb    al,0x0
9f005eea:	00 00                	add    BYTE PTR [eax],al
9f005eec:	d0 0c 00             	ror    BYTE PTR [eax+eax*1],1
9f005eef:	00 69 cc             	add    BYTE PTR [ecx-0x34],ch
9f005ef2:	ff                   	(bad)  
9f005ef3:	ff 24 00             	jmp    DWORD PTR [eax+eax*1]
9f005ef6:	00 00                	add    BYTE PTR [eax],al
9f005ef8:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005efb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f01:	5c                   	pop    esp
9f005f02:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005f05:	04 00                	add    al,0x0
9f005f07:	00 20                	add    BYTE PTR [eax],ah
9f005f09:	00 00                	add    BYTE PTR [eax],al
9f005f0b:	00 f0                	add    al,dh
9f005f0d:	0c 00                	or     al,0x0
9f005f0f:	00 6d cc             	add    BYTE PTR [ebp-0x34],ch
9f005f12:	ff                   	(bad)  
9f005f13:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
9f005f19:	45                   	inc    ebp
9f005f1a:	0e                   	push   cs
9f005f1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f21:	44                   	inc    esp
9f005f22:	83 03 61             	add    DWORD PTR [ebx],0x61
9f005f25:	c5 c3 0c             	(bad)
9f005f28:	04 04                	add    al,0x4
9f005f2a:	00 00                	add    BYTE PTR [eax],al
9f005f2c:	20 00                	and    BYTE PTR [eax],al
9f005f2e:	00 00                	add    BYTE PTR [eax],al
9f005f30:	14 0d                	adc    al,0xd
9f005f32:	00 00                	add    BYTE PTR [eax],al
9f005f34:	76 cc                	jbe    9f005f02 <__x86.get_pc_thunk.cx+0xcec>
9f005f36:	ff                   	(bad)  
9f005f37:	ff 32                	push   DWORD PTR [edx]
9f005f39:	00 00                	add    BYTE PTR [eax],al
9f005f3b:	00 00                	add    BYTE PTR [eax],al
9f005f3d:	45                   	inc    ebp
9f005f3e:	0e                   	push   cs
9f005f3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f45:	44                   	inc    esp
9f005f46:	83 03 66             	add    DWORD PTR [ebx],0x66
9f005f49:	c5 c3 0c             	(bad)
9f005f4c:	04 04                	add    al,0x4
9f005f4e:	00 00                	add    BYTE PTR [eax],al
9f005f50:	28 00                	sub    BYTE PTR [eax],al
9f005f52:	00 00                	add    BYTE PTR [eax],al
9f005f54:	38 0d 00 00 84 cc    	cmp    BYTE PTR ds:0xcc840000,cl
9f005f5a:	ff                   	(bad)  
9f005f5b:	ff 65 03             	jmp    DWORD PTR [ebp+0x3]
9f005f5e:	00 00                	add    BYTE PTR [eax],al
9f005f60:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005f63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f69:	48                   	dec    eax
9f005f6a:	86 03                	xchg   BYTE PTR [ebx],al
9f005f6c:	83 04 03 53          	add    DWORD PTR [ebx+eax*1],0x53
9f005f70:	03 c3                	add    eax,ebx
9f005f72:	41                   	inc    ecx
9f005f73:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005f77:	04 04                	add    al,0x4
9f005f79:	00 00                	add    BYTE PTR [eax],al
9f005f7b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005f7e:	00 00                	add    BYTE PTR [eax],al
9f005f80:	64 0d 00 00 bd cf    	fs or  eax,0xcfbd0000
9f005f86:	ff                   	(bad)  
9f005f87:	ff 29                	jmp    FWORD PTR [ecx]
9f005f89:	00 00                	add    BYTE PTR [eax],al
9f005f8b:	00 00                	add    BYTE PTR [eax],al
9f005f8d:	45                   	inc    ebp
9f005f8e:	0e                   	push   cs
9f005f8f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f95:	61                   	popa   
9f005f96:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005f99:	04 00                	add    al,0x0
9f005f9b:	00 28                	add    BYTE PTR [eax],ch
9f005f9d:	00 00                	add    BYTE PTR [eax],al
9f005f9f:	00 84 0d 00 00 c6 cf 	add    BYTE PTR [ebp+ecx*1-0x303a0000],al
9f005fa6:	ff                   	(bad)  
9f005fa7:	ff 2b                	jmp    FWORD PTR [ebx]
9f005fa9:	02 00                	add    al,BYTE PTR [eax]
9f005fab:	00 00                	add    BYTE PTR [eax],al
9f005fad:	45                   	inc    ebp
9f005fae:	0e                   	push   cs
9f005faf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005fb5:	48                   	dec    eax
9f005fb6:	86 03                	xchg   BYTE PTR [ebx],al
9f005fb8:	83 04 03 19          	add    DWORD PTR [ebx+eax*1],0x19
9f005fbc:	02 c3                	add    al,bl
9f005fbe:	41                   	inc    ecx
9f005fbf:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005fc3:	04 04                	add    al,0x4
9f005fc5:	00 00                	add    BYTE PTR [eax],al
9f005fc7:	00 20                	add    BYTE PTR [eax],ah
9f005fc9:	00 00                	add    BYTE PTR [eax],al
9f005fcb:	00 b0 0d 00 00 c5    	add    BYTE PTR [eax-0x3afffff3],dh
9f005fd1:	d1 ff                	sar    edi,1
9f005fd3:	ff 63 00             	jmp    DWORD PTR [ebx+0x0]
9f005fd6:	00 00                	add    BYTE PTR [eax],al
9f005fd8:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005fdb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005fe1:	44                   	inc    esp
9f005fe2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005fe5:	56                   	push   esi
9f005fe6:	c3                   	ret    
9f005fe7:	41                   	inc    ecx
9f005fe8:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005feb:	04 24                	add    al,0x24
9f005fed:	00 00                	add    BYTE PTR [eax],al
9f005fef:	00 d4                	add    ah,dl
9f005ff1:	0d 00 00 04 d2       	or     eax,0xd2040000
9f005ff6:	ff                   	(bad)  
9f005ff7:	ff 40 02             	inc    DWORD PTR [eax+0x2]
9f005ffa:	00 00                	add    BYTE PTR [eax],al
9f005ffc:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f005fff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006005:	44                   	inc    esp
9f006006:	83 03 03             	add    DWORD PTR [ebx],0x3
9f006009:	33 02                	xor    eax,DWORD PTR [edx]
9f00600b:	c3                   	ret    
9f00600c:	41                   	inc    ecx
9f00600d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006010:	04 00                	add    al,0x0
9f006012:	00 00                	add    BYTE PTR [eax],al
9f006014:	20 00                	and    BYTE PTR [eax],al
9f006016:	00 00                	add    BYTE PTR [eax],al
9f006018:	fc                   	cld    
9f006019:	0d 00 00 1c d4       	or     eax,0xd41c0000
9f00601e:	ff                   	(bad)  
9f00601f:	ff 4a 04             	dec    DWORD PTR [edx+0x4]
9f006022:	00 00                	add    BYTE PTR [eax],al
9f006024:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f006027:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00602d:	44                   	inc    esp
9f00602e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f006031:	3e 04 c5             	ds add al,0xc5
9f006034:	c3                   	ret    
9f006035:	0c 04                	or     al,0x4
9f006037:	04 1c                	add    al,0x1c
9f006039:	00 00                	add    BYTE PTR [eax],al
9f00603b:	00 20                	add    BYTE PTR [eax],ah
9f00603d:	0e                   	push   cs
9f00603e:	00 00                	add    BYTE PTR [eax],al
9f006040:	42                   	inc    edx
9f006041:	d8 ff                	fdivr  st,st(7)
9f006043:	ff 37                	push   DWORD PTR [edi]
9f006045:	00 00                	add    BYTE PTR [eax],al
9f006047:	00 00                	add    BYTE PTR [eax],al
9f006049:	45                   	inc    ebp
9f00604a:	0e                   	push   cs
9f00604b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006051:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006052:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006055:	04 00                	add    al,0x0
9f006057:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00605a:	00 00                	add    BYTE PTR [eax],al
9f00605c:	40                   	inc    eax
9f00605d:	0e                   	push   cs
9f00605e:	00 00                	add    BYTE PTR [eax],al
9f006060:	59                   	pop    ecx
9f006061:	d8 ff                	fdivr  st,st(7)
9f006063:	ff 37                	push   DWORD PTR [edi]
9f006065:	00 00                	add    BYTE PTR [eax],al
9f006067:	00 00                	add    BYTE PTR [eax],al
9f006069:	45                   	inc    ebp
9f00606a:	0e                   	push   cs
9f00606b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006071:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006072:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006075:	04 00                	add    al,0x0
9f006077:	00 10                	add    BYTE PTR [eax],dl
9f006079:	00 00                	add    BYTE PTR [eax],al
9f00607b:	00 60 0e             	add    BYTE PTR [eax+0xe],ah
9f00607e:	00 00                	add    BYTE PTR [eax],al
9f006080:	96                   	xchg   esi,eax
9f006081:	f1                   	icebp  
9f006082:	ff                   	(bad)  
9f006083:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f006086:	00 00                	add    BYTE PTR [eax],al
9f006088:	00 00                	add    BYTE PTR [eax],al
9f00608a:	00 00                	add    BYTE PTR [eax],al
9f00608c:	20 00                	and    BYTE PTR [eax],al
9f00608e:	00 00                	add    BYTE PTR [eax],al
9f006090:	74 0e                	je     9f0060a0 <__x86.get_pc_thunk.cx+0xe8a>
9f006092:	00 00                	add    BYTE PTR [eax],al
9f006094:	5c                   	pop    esp
9f006095:	d8 ff                	fdivr  st,st(7)
9f006097:	ff 88 00 00 00 00    	dec    DWORD PTR [eax+0x0]
9f00609d:	45                   	inc    ebp
9f00609e:	0e                   	push   cs
9f00609f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0060a5:	44                   	inc    esp
9f0060a6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0060a9:	7c c5                	jl     9f006070 <__x86.get_pc_thunk.cx+0xe5a>
9f0060ab:	c3                   	ret    
9f0060ac:	0c 04                	or     al,0x4
9f0060ae:	04 00                	add    al,0x0
9f0060b0:	20 00                	and    BYTE PTR [eax],al
9f0060b2:	00 00                	add    BYTE PTR [eax],al
9f0060b4:	98                   	cwde   
9f0060b5:	0e                   	push   cs
9f0060b6:	00 00                	add    BYTE PTR [eax],al
9f0060b8:	c0 d8 ff             	rcr    al,0xff
9f0060bb:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f0060be:	00 00                	add    BYTE PTR [eax],al
9f0060c0:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0060c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0060c9:	44                   	inc    esp
9f0060ca:	83 03 74             	add    DWORD PTR [ebx],0x74
9f0060cd:	c5 c3 0c             	(bad)
9f0060d0:	04 04                	add    al,0x4
9f0060d2:	00 00                	add    BYTE PTR [eax],al
9f0060d4:	20 00                	and    BYTE PTR [eax],al
9f0060d6:	00 00                	add    BYTE PTR [eax],al
9f0060d8:	bc 0e 00 00 dc       	mov    esp,0xdc00000e
9f0060dd:	d8 ff                	fdivr  st,st(7)
9f0060df:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f0060e2:	00 00                	add    BYTE PTR [eax],al
9f0060e4:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0060e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0060ed:	44                   	inc    esp
9f0060ee:	83 03 74             	add    DWORD PTR [ebx],0x74
9f0060f1:	c5 c3 0c             	(bad)
9f0060f4:	04 04                	add    al,0x4
9f0060f6:	00 00                	add    BYTE PTR [eax],al
9f0060f8:	20 00                	and    BYTE PTR [eax],al
9f0060fa:	00 00                	add    BYTE PTR [eax],al
9f0060fc:	e0 0e                	loopne 9f00610c <__x86.get_pc_thunk.cx+0xef6>
9f0060fe:	00 00                	add    BYTE PTR [eax],al
9f006100:	f8                   	clc    
9f006101:	d8 ff                	fdivr  st,st(7)
9f006103:	ff 71 00             	push   DWORD PTR [ecx+0x0]
9f006106:	00 00                	add    BYTE PTR [eax],al
9f006108:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f00610b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006111:	44                   	inc    esp
9f006112:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006115:	65 c5 c3 0c          	(bad)
9f006119:	04 04                	add    al,0x4
9f00611b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00611e:	00 00                	add    BYTE PTR [eax],al
9f006120:	04 0f                	add    al,0xf
9f006122:	00 00                	add    BYTE PTR [eax],al
9f006124:	45                   	inc    ebp
9f006125:	d9 ff                	fcos   
9f006127:	ff 2a                	jmp    FWORD PTR [edx]
9f006129:	00 00                	add    BYTE PTR [eax],al
9f00612b:	00 00                	add    BYTE PTR [eax],al
9f00612d:	45                   	inc    ebp
9f00612e:	0e                   	push   cs
9f00612f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006135:	62                   	(bad)  
9f006136:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006139:	04 00                	add    al,0x0
9f00613b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00613e:	00 00                	add    BYTE PTR [eax],al
9f006140:	24 0f                	and    al,0xf
9f006142:	00 00                	add    BYTE PTR [eax],al
9f006144:	4f                   	dec    edi
9f006145:	d9 ff                	fcos   
9f006147:	ff 62 00             	jmp    DWORD PTR [edx+0x0]
9f00614a:	00 00                	add    BYTE PTR [eax],al
9f00614c:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f00614f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006155:	45                   	inc    ebp
9f006156:	86 03                	xchg   BYTE PTR [ebx],al
9f006158:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f00615c:	c3                   	ret    
9f00615d:	41                   	inc    ecx
9f00615e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006162:	04 04                	add    al,0x4
9f006164:	1c 00                	sbb    al,0x0
9f006166:	00 00                	add    BYTE PTR [eax],al
9f006168:	4c                   	dec    esp
9f006169:	0f 00 00             	sldt   WORD PTR [eax]
9f00616c:	89 d9                	mov    ecx,ebx
9f00616e:	ff                   	(bad)  
9f00616f:	ff 21                	jmp    DWORD PTR [ecx]
9f006171:	00 00                	add    BYTE PTR [eax],al
9f006173:	00 00                	add    BYTE PTR [eax],al
9f006175:	45                   	inc    ebp
9f006176:	0e                   	push   cs
9f006177:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00617d:	59                   	pop    ecx
9f00617e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006181:	04 00                	add    al,0x0
9f006183:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006186:	00 00                	add    BYTE PTR [eax],al
9f006188:	6c                   	ins    BYTE PTR es:[edi],dx
9f006189:	0f 00 00             	sldt   WORD PTR [eax]
9f00618c:	8a d9                	mov    bl,cl
9f00618e:	ff                   	(bad)  
9f00618f:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f006193:	00 00                	add    BYTE PTR [eax],al
9f006195:	45                   	inc    ebp
9f006196:	0e                   	push   cs
9f006197:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00619d:	7c c5                	jl     9f006164 <__x86.get_pc_thunk.cx+0xf4e>
9f00619f:	0c 04                	or     al,0x4
9f0061a1:	04 00                	add    al,0x0
9f0061a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0061a6:	00 00                	add    BYTE PTR [eax],al
9f0061a8:	8c 0f                	mov    WORD PTR [edi],cs
9f0061aa:	00 00                	add    BYTE PTR [eax],al
9f0061ac:	ae                   	scas   al,BYTE PTR es:[edi]
9f0061ad:	d9 ff                	fcos   
9f0061af:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f0061b3:	00 00                	add    BYTE PTR [eax],al
9f0061b5:	45                   	inc    ebp
9f0061b6:	0e                   	push   cs
9f0061b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0061bd:	7c c5                	jl     9f006184 <__x86.get_pc_thunk.cx+0xf6e>
9f0061bf:	0c 04                	or     al,0x4
9f0061c1:	04 00                	add    al,0x0
9f0061c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0061c6:	00 00                	add    BYTE PTR [eax],al
9f0061c8:	ac                   	lods   al,BYTE PTR ds:[esi]
9f0061c9:	0f 00 00             	sldt   WORD PTR [eax]
9f0061cc:	d2 d9                	rcr    cl,cl
9f0061ce:	ff                   	(bad)  
9f0061cf:	ff 4b 00             	dec    DWORD PTR [ebx+0x0]
9f0061d2:	00 00                	add    BYTE PTR [eax],al
9f0061d4:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0061d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0061dd:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f0061e0:	0c 04                	or     al,0x4
9f0061e2:	04 00                	add    al,0x0
9f0061e4:	1c 00                	sbb    al,0x0
9f0061e6:	00 00                	add    BYTE PTR [eax],al
9f0061e8:	cc                   	int3   
9f0061e9:	0f 00 00             	sldt   WORD PTR [eax]
9f0061ec:	fd                   	std    
9f0061ed:	d9 ff                	fcos   
9f0061ef:	ff 34 00             	push   DWORD PTR [eax+eax*1]
9f0061f2:	00 00                	add    BYTE PTR [eax],al
9f0061f4:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0061f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0061fd:	6c                   	ins    BYTE PTR es:[edi],dx
9f0061fe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006201:	04 00                	add    al,0x0
9f006203:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006206:	00 00                	add    BYTE PTR [eax],al
9f006208:	ec                   	in     al,dx
9f006209:	0f 00 00             	sldt   WORD PTR [eax]
9f00620c:	11 da                	adc    edx,ebx
9f00620e:	ff                   	(bad)  
9f00620f:	ff 5d 00             	call   FWORD PTR [ebp+0x0]
9f006212:	00 00                	add    BYTE PTR [eax],al
9f006214:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f006217:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00621d:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f006220:	0c 04                	or     al,0x4
9f006222:	04 00                	add    al,0x0
9f006224:	1c 00                	sbb    al,0x0
9f006226:	00 00                	add    BYTE PTR [eax],al
9f006228:	0c 10                	or     al,0x10
9f00622a:	00 00                	add    BYTE PTR [eax],al
9f00622c:	4e                   	dec    esi
9f00622d:	da ff                	(bad)  
9f00622f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f006235:	45                   	inc    ebp
9f006236:	0e                   	push   cs
9f006237:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00623d:	6d                   	ins    DWORD PTR es:[edi],dx
9f00623e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006241:	04 00                	add    al,0x0
9f006243:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006246:	00 00                	add    BYTE PTR [eax],al
9f006248:	2c 10                	sub    al,0x10
9f00624a:	00 00                	add    BYTE PTR [eax],al
9f00624c:	63 da                	arpl   dx,bx
9f00624e:	ff                   	(bad)  
9f00624f:	ff 1e                	call   FWORD PTR [esi]
9f006251:	00 00                	add    BYTE PTR [eax],al
9f006253:	00 00                	add    BYTE PTR [eax],al
9f006255:	45                   	inc    ebp
9f006256:	0e                   	push   cs
9f006257:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00625d:	56                   	push   esi
9f00625e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006261:	04 00                	add    al,0x0
9f006263:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006266:	00 00                	add    BYTE PTR [eax],al
9f006268:	4c                   	dec    esp
9f006269:	10 00                	adc    BYTE PTR [eax],al
9f00626b:	00 61 da             	add    BYTE PTR [ecx-0x26],ah
9f00626e:	ff                   	(bad)  
9f00626f:	ff                   	(bad)  
9f006270:	3d 00 00 00 00       	cmp    eax,0x0
9f006275:	45                   	inc    ebp
9f006276:	0e                   	push   cs
9f006277:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00627d:	75 c5                	jne    9f006244 <__x86.get_pc_thunk.cx+0x102e>
9f00627f:	0c 04                	or     al,0x4
9f006281:	04 00                	add    al,0x0
9f006283:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006286:	00 00                	add    BYTE PTR [eax],al
9f006288:	6c                   	ins    BYTE PTR es:[edi],dx
9f006289:	10 00                	adc    BYTE PTR [eax],al
9f00628b:	00 7e da             	add    BYTE PTR [esi-0x26],bh
9f00628e:	ff                   	(bad)  
9f00628f:	ff 22                	jmp    DWORD PTR [edx]
9f006291:	00 00                	add    BYTE PTR [eax],al
9f006293:	00 00                	add    BYTE PTR [eax],al
9f006295:	45                   	inc    ebp
9f006296:	0e                   	push   cs
9f006297:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00629d:	5a                   	pop    edx
9f00629e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0062a1:	04 00                	add    al,0x0
9f0062a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0062a6:	00 00                	add    BYTE PTR [eax],al
9f0062a8:	8c 10                	mov    WORD PTR [eax],ss
9f0062aa:	00 00                	add    BYTE PTR [eax],al
9f0062ac:	80 da ff             	sbb    dl,0xff
9f0062af:	ff 6b 00             	jmp    FWORD PTR [ebx+0x0]
9f0062b2:	00 00                	add    BYTE PTR [eax],al
9f0062b4:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0062b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062bd:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f0062c0:	0c 04                	or     al,0x4
9f0062c2:	04 00                	add    al,0x0
9f0062c4:	1c 00                	sbb    al,0x0
9f0062c6:	00 00                	add    BYTE PTR [eax],al
9f0062c8:	ac                   	lods   al,BYTE PTR ds:[esi]
9f0062c9:	10 00                	adc    BYTE PTR [eax],al
9f0062cb:	00 cb                	add    bl,cl
9f0062cd:	da ff                	(bad)  
9f0062cf:	ff 6b 00             	jmp    FWORD PTR [ebx+0x0]
9f0062d2:	00 00                	add    BYTE PTR [eax],al
9f0062d4:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0062d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062dd:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f0062e0:	0c 04                	or     al,0x4
9f0062e2:	04 00                	add    al,0x0
9f0062e4:	1c 00                	sbb    al,0x0
9f0062e6:	00 00                	add    BYTE PTR [eax],al
9f0062e8:	cc                   	int3   
9f0062e9:	10 00                	adc    BYTE PTR [eax],al
9f0062eb:	00 16                	add    BYTE PTR [esi],dl
9f0062ed:	db ff                	(bad)  
9f0062ef:	ff 70 00             	push   DWORD PTR [eax+0x0]
9f0062f2:	00 00                	add    BYTE PTR [eax],al
9f0062f4:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0062f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062fd:	02 68 c5             	add    ch,BYTE PTR [eax-0x3b]
9f006300:	0c 04                	or     al,0x4
9f006302:	04 00                	add    al,0x0
9f006304:	1c 00                	sbb    al,0x0
9f006306:	00 00                	add    BYTE PTR [eax],al
9f006308:	ec                   	in     al,dx
9f006309:	10 00                	adc    BYTE PTR [eax],al
9f00630b:	00 66 db             	add    BYTE PTR [esi-0x25],ah
9f00630e:	ff                   	(bad)  
9f00630f:	ff 24 00             	jmp    DWORD PTR [eax+eax*1]
9f006312:	00 00                	add    BYTE PTR [eax],al
9f006314:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f006317:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00631d:	5c                   	pop    esp
9f00631e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006321:	04 00                	add    al,0x0
9f006323:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f006326:	00 00                	add    BYTE PTR [eax],al
9f006328:	0c 11                	or     al,0x11
9f00632a:	00 00                	add    BYTE PTR [eax],al
9f00632c:	6a db                	push   0xffffffdb
9f00632e:	ff                   	(bad)  
9f00632f:	ff 82 01 00 00 00    	inc    DWORD PTR [edx+0x1]
9f006335:	45                   	inc    ebp
9f006336:	0e                   	push   cs
9f006337:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00633d:	46                   	inc    esi
9f00633e:	87 03                	xchg   DWORD PTR [ebx],eax
9f006340:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f006343:	05 03 71 01 c3       	add    eax,0xc3017103
9f006348:	41                   	inc    ecx
9f006349:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f00634d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006350:	04 00                	add    al,0x0
9f006352:	00 00                	add    BYTE PTR [eax],al
9f006354:	1c 00                	sbb    al,0x0
9f006356:	00 00                	add    BYTE PTR [eax],al
9f006358:	3c 11                	cmp    al,0x11
9f00635a:	00 00                	add    BYTE PTR [eax],al
9f00635c:	bc dc ff ff 21       	mov    esp,0x21ffffdc
9f006361:	00 00                	add    BYTE PTR [eax],al
9f006363:	00 00                	add    BYTE PTR [eax],al
9f006365:	45                   	inc    ebp
9f006366:	0e                   	push   cs
9f006367:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00636d:	59                   	pop    ecx
9f00636e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006371:	04 00                	add    al,0x0
9f006373:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f006376:	00 00                	add    BYTE PTR [eax],al
9f006378:	5c                   	pop    esp
9f006379:	11 00                	adc    DWORD PTR [eax],eax
9f00637b:	00 bd dc ff ff a1    	add    BYTE PTR [ebp-0x5e000024],bh
9f006381:	01 00                	add    DWORD PTR [eax],eax
9f006383:	00 00                	add    BYTE PTR [eax],al
9f006385:	45                   	inc    ebp
9f006386:	0e                   	push   cs
9f006387:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00638d:	46                   	inc    esi
9f00638e:	87 03                	xchg   DWORD PTR [ebx],eax
9f006390:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f006393:	05 03 90 01 c3       	add    eax,0xc3019003
9f006398:	41                   	inc    ecx
9f006399:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f00639d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0063a0:	04 00                	add    al,0x0
9f0063a2:	00 00                	add    BYTE PTR [eax],al
9f0063a4:	20 00                	and    BYTE PTR [eax],al
9f0063a6:	00 00                	add    BYTE PTR [eax],al
9f0063a8:	8c 11                	mov    WORD PTR [ecx],ss
9f0063aa:	00 00                	add    BYTE PTR [eax],al
9f0063ac:	2e de ff             	cs fdivp st(7),st
9f0063af:	ff 9a 00 00 00 00    	call   FWORD PTR [edx+0x0]
9f0063b5:	45                   	inc    ebp
9f0063b6:	0e                   	push   cs
9f0063b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0063bd:	44                   	inc    esp
9f0063be:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0063c1:	8e c5                	mov    es,ebp
9f0063c3:	c3                   	ret    
9f0063c4:	0c 04                	or     al,0x4
9f0063c6:	04 00                	add    al,0x0
9f0063c8:	1c 00                	sbb    al,0x0
9f0063ca:	00 00                	add    BYTE PTR [eax],al
9f0063cc:	b0 11                	mov    al,0x11
9f0063ce:	00 00                	add    BYTE PTR [eax],al
9f0063d0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f0063d1:	de ff                	fdivp  st(7),st
9f0063d3:	ff 24 00             	jmp    DWORD PTR [eax+eax*1]
9f0063d6:	00 00                	add    BYTE PTR [eax],al
9f0063d8:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0063db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0063e1:	5c                   	pop    esp
9f0063e2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0063e5:	04 00                	add    al,0x0
9f0063e7:	00 28                	add    BYTE PTR [eax],ch
9f0063e9:	00 00                	add    BYTE PTR [eax],al
9f0063eb:	00 d0                	add    al,dl
9f0063ed:	11 00                	adc    DWORD PTR [eax],eax
9f0063ef:	00 a8 de ff ff 14    	add    BYTE PTR [eax+0x14ffffde],ch
9f0063f5:	01 00                	add    DWORD PTR [eax],eax
9f0063f7:	00 00                	add    BYTE PTR [eax],al
9f0063f9:	45                   	inc    ebp
9f0063fa:	0e                   	push   cs
9f0063fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006401:	45                   	inc    ebp
9f006402:	86 03                	xchg   BYTE PTR [ebx],al
9f006404:	83 04 03 05          	add    DWORD PTR [ebx+eax*1],0x5
9f006408:	01 c3                	add    ebx,eax
9f00640a:	41                   	inc    ecx
9f00640b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00640f:	04 04                	add    al,0x4
9f006411:	00 00                	add    BYTE PTR [eax],al
9f006413:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006416:	00 00                	add    BYTE PTR [eax],al
9f006418:	fc                   	cld    
9f006419:	11 00                	adc    DWORD PTR [eax],eax
9f00641b:	00 90 df ff ff 2a    	add    BYTE PTR [eax+0x2affffdf],dl
9f006421:	00 00                	add    BYTE PTR [eax],al
9f006423:	00 00                	add    BYTE PTR [eax],al
9f006425:	45                   	inc    ebp
9f006426:	0e                   	push   cs
9f006427:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00642d:	62                   	(bad)  
9f00642e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006431:	04 00                	add    al,0x0
9f006433:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006436:	00 00                	add    BYTE PTR [eax],al
9f006438:	1c 12                	sbb    al,0x12
9f00643a:	00 00                	add    BYTE PTR [eax],al
9f00643c:	9a df ff ff a2 00 00 	call   0x0:0xa2ffffdf
9f006443:	00 00                	add    BYTE PTR [eax],al
9f006445:	45                   	inc    ebp
9f006446:	0e                   	push   cs
9f006447:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00644d:	45                   	inc    ebp
9f00644e:	86 03                	xchg   BYTE PTR [ebx],al
9f006450:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f006454:	c3                   	ret    
9f006455:	41                   	inc    ecx
9f006456:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00645a:	04 04                	add    al,0x4
9f00645c:	24 00                	and    al,0x0
9f00645e:	00 00                	add    BYTE PTR [eax],al
9f006460:	44                   	inc    esp
9f006461:	12 00                	adc    al,BYTE PTR [eax]
9f006463:	00 14 e0             	add    BYTE PTR [eax+eiz*8],dl
9f006466:	ff                   	(bad)  
9f006467:	ff 72 00             	push   DWORD PTR [edx+0x0]
9f00646a:	00 00                	add    BYTE PTR [eax],al
9f00646c:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f00646f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006475:	42                   	inc    edx
9f006476:	86 03                	xchg   BYTE PTR [ebx],al
9f006478:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f00647c:	c3                   	ret    
9f00647d:	41                   	inc    ecx
9f00647e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006482:	04 04                	add    al,0x4
9f006484:	1c 00                	sbb    al,0x0
9f006486:	00 00                	add    BYTE PTR [eax],al
9f006488:	6c                   	ins    BYTE PTR es:[edi],dx
9f006489:	12 00                	adc    al,BYTE PTR [eax]
9f00648b:	00 5e e0             	add    BYTE PTR [esi-0x20],bl
9f00648e:	ff                   	(bad)  
9f00648f:	ff 21                	jmp    DWORD PTR [ecx]
9f006491:	00 00                	add    BYTE PTR [eax],al
9f006493:	00 00                	add    BYTE PTR [eax],al
9f006495:	45                   	inc    ebp
9f006496:	0e                   	push   cs
9f006497:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00649d:	59                   	pop    ecx
9f00649e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0064a1:	04 00                	add    al,0x0
9f0064a3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0064a6:	00 00                	add    BYTE PTR [eax],al
9f0064a8:	8c 12                	mov    WORD PTR [edx],ss
9f0064aa:	00 00                	add    BYTE PTR [eax],al
9f0064ac:	5f                   	pop    edi
9f0064ad:	e0 ff                	loopne 9f0064ae <__x86.get_pc_thunk.cx+0x1298>
9f0064af:	ff 48 00             	dec    DWORD PTR [eax+0x0]
9f0064b2:	00 00                	add    BYTE PTR [eax],al
9f0064b4:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0064b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0064bd:	45                   	inc    ebp
9f0064be:	86 03                	xchg   BYTE PTR [ebx],al
9f0064c0:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f0064c4:	41                   	inc    ecx
9f0064c5:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0064c9:	04 04                	add    al,0x4
9f0064cb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0064ce:	00 00                	add    BYTE PTR [eax],al
9f0064d0:	b4 12                	mov    ah,0x12
9f0064d2:	00 00                	add    BYTE PTR [eax],al
9f0064d4:	7f e0                	jg     9f0064b6 <__x86.get_pc_thunk.cx+0x12a0>
9f0064d6:	ff                   	(bad)  
9f0064d7:	ff 0e                	dec    DWORD PTR [esi]
9f0064d9:	03 00                	add    eax,DWORD PTR [eax]
9f0064db:	00 00                	add    BYTE PTR [eax],al
9f0064dd:	45                   	inc    ebp
9f0064de:	0e                   	push   cs
9f0064df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0064e5:	44                   	inc    esp
9f0064e6:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0064e9:	01 03                	add    DWORD PTR [ebx],eax
9f0064eb:	c3                   	ret    
9f0064ec:	41                   	inc    ecx
9f0064ed:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0064f0:	04 00                	add    al,0x0
9f0064f2:	00 00                	add    BYTE PTR [eax],al
9f0064f4:	1c 00                	sbb    al,0x0
9f0064f6:	00 00                	add    BYTE PTR [eax],al
9f0064f8:	dc 12                	fcom   QWORD PTR [edx]
9f0064fa:	00 00                	add    BYTE PTR [eax],al
9f0064fc:	65 e3 ff             	gs jecxz 9f0064fe <__x86.get_pc_thunk.cx+0x12e8>
9f0064ff:	ff 21                	jmp    DWORD PTR [ecx]
9f006501:	00 00                	add    BYTE PTR [eax],al
9f006503:	00 00                	add    BYTE PTR [eax],al
9f006505:	45                   	inc    ebp
9f006506:	0e                   	push   cs
9f006507:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00650d:	59                   	pop    ecx
9f00650e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006511:	04 00                	add    al,0x0
9f006513:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006516:	00 00                	add    BYTE PTR [eax],al
9f006518:	fc                   	cld    
9f006519:	12 00                	adc    al,BYTE PTR [eax]
9f00651b:	00 66 e3             	add    BYTE PTR [esi-0x1d],ah
9f00651e:	ff                   	(bad)  
9f00651f:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
9f006522:	00 00                	add    BYTE PTR [eax],al
9f006524:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f006527:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00652d:	79 c5                	jns    9f0064f4 <__x86.get_pc_thunk.cx+0x12de>
9f00652f:	0c 04                	or     al,0x4
9f006531:	04 00                	add    al,0x0
9f006533:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006536:	00 00                	add    BYTE PTR [eax],al
9f006538:	1c 13                	sbb    al,0x13
9f00653a:	00 00                	add    BYTE PTR [eax],al
9f00653c:	87 e3                	xchg   ebx,esp
9f00653e:	ff                   	(bad)  
9f00653f:	ff                   	(bad)  
9f006540:	39 00                	cmp    DWORD PTR [eax],eax
9f006542:	00 00                	add    BYTE PTR [eax],al
9f006544:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f006547:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00654d:	71 c5                	jno    9f006514 <__x86.get_pc_thunk.cx+0x12fe>
9f00654f:	0c 04                	or     al,0x4
9f006551:	04 00                	add    al,0x0
9f006553:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006556:	00 00                	add    BYTE PTR [eax],al
9f006558:	3c 13                	cmp    al,0x13
9f00655a:	00 00                	add    BYTE PTR [eax],al
9f00655c:	a0 e3 ff ff 21       	mov    al,ds:0x21ffffe3
9f006561:	00 00                	add    BYTE PTR [eax],al
9f006563:	00 00                	add    BYTE PTR [eax],al
9f006565:	45                   	inc    ebp
9f006566:	0e                   	push   cs
9f006567:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00656d:	59                   	pop    ecx
9f00656e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006571:	04 00                	add    al,0x0
9f006573:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f006576:	00 00                	add    BYTE PTR [eax],al
9f006578:	5c                   	pop    esp
9f006579:	13 00                	adc    eax,DWORD PTR [eax]
9f00657b:	00 a1 e3 ff ff 3b    	add    BYTE PTR [ecx+0x3bffffe3],ah
9f006581:	08 00                	or     BYTE PTR [eax],al
9f006583:	00 00                	add    BYTE PTR [eax],al
9f006585:	45                   	inc    ebp
9f006586:	0e                   	push   cs
9f006587:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00658d:	46                   	inc    esi
9f00658e:	87 03                	xchg   DWORD PTR [ebx],eax
9f006590:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f006593:	05 03 2a 08 c3       	add    eax,0xc3082a03
9f006598:	41                   	inc    ecx
9f006599:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f00659d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0065a0:	04 00                	add    al,0x0
9f0065a2:	00 00                	add    BYTE PTR [eax],al
9f0065a4:	24 00                	and    al,0x0
9f0065a6:	00 00                	add    BYTE PTR [eax],al
9f0065a8:	8c 13                	mov    WORD PTR [ebx],ss
9f0065aa:	00 00                	add    BYTE PTR [eax],al
9f0065ac:	ac                   	lods   al,BYTE PTR ds:[esi]
9f0065ad:	eb ff                	jmp    9f0065ae <__x86.get_pc_thunk.cx+0x1398>
9f0065af:	ff 71 00             	push   DWORD PTR [ecx+0x0]
9f0065b2:	00 00                	add    BYTE PTR [eax],al
9f0065b4:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0065b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0065bd:	45                   	inc    ebp
9f0065be:	86 03                	xchg   BYTE PTR [ebx],al
9f0065c0:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f0065c4:	c3                   	ret    
9f0065c5:	41                   	inc    ecx
9f0065c6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0065ca:	04 04                	add    al,0x4
9f0065cc:	20 00                	and    BYTE PTR [eax],al
9f0065ce:	00 00                	add    BYTE PTR [eax],al
9f0065d0:	b4 13                	mov    ah,0x13
9f0065d2:	00 00                	add    BYTE PTR [eax],al
9f0065d4:	f5                   	cmc    
9f0065d5:	eb ff                	jmp    9f0065d6 <__x86.get_pc_thunk.cx+0x13c0>
9f0065d7:	ff 45 00             	inc    DWORD PTR [ebp+0x0]
9f0065da:	00 00                	add    BYTE PTR [eax],al
9f0065dc:	00 45 0e             	add    BYTE PTR [ebp+0xe],al
9f0065df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0065e5:	44                   	inc    esp
9f0065e6:	83 03 79             	add    DWORD PTR [ebx],0x79
9f0065e9:	c5 c3 0c             	(bad)
9f0065ec:	04 04                	add    al,0x4
	...

Disassembly of section .dynsym:

9f0065f0 <.dynsym>:
	...
9f006600:	d4 00                	aam    0x0
9f006602:	00 00                	add    BYTE PTR [eax],al
9f006604:	d4 12                	aam    0x12
9f006606:	00 9f c1 00 00 00    	add    BYTE PTR [edi+0xc1],bl
9f00660c:	12 00                	adc    al,BYTE PTR [eax]
9f00660e:	01 00                	add    DWORD PTR [eax],eax
9f006610:	bc 01 00 00 41       	mov    esp,0x41000001
9f006615:	2f                   	das    
9f006616:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f00661c:	12 00                	adc    al,BYTE PTR [eax]
9f00661e:	01 00                	add    DWORD PTR [eax],eax
9f006620:	b7 01                	mov    bh,0x1
9f006622:	00 00                	add    BYTE PTR [eax],al
9f006624:	aa                   	stos   BYTE PTR es:[edi],al
9f006625:	2b 00                	sub    eax,DWORD PTR [eax]
9f006627:	9f                   	lahf   
9f006628:	32 00                	xor    al,BYTE PTR [eax]
9f00662a:	00 00                	add    BYTE PTR [eax],al
9f00662c:	12 00                	adc    al,BYTE PTR [eax]
9f00662e:	01 00                	add    DWORD PTR [eax],eax
9f006630:	0c 02                	or     al,0x2
9f006632:	00 00                	add    BYTE PTR [eax],al
9f006634:	9e                   	sahf   
9f006635:	3b 00                	cmp    eax,DWORD PTR [eax]
9f006637:	9f                   	lahf   
9f006638:	4b                   	dec    ebx
9f006639:	00 00                	add    BYTE PTR [eax],al
9f00663b:	00 12                	add    BYTE PTR [edx],dl
9f00663d:	00 01                	add    BYTE PTR [ecx],al
9f00663f:	00 90 02 00 00 fc    	add    BYTE PTR [eax-0x3fffffe],dl
9f006645:	48                   	dec    eax
9f006646:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
9f00664c:	12 00                	adc    al,BYTE PTR [eax]
9f00664e:	01 00                	add    DWORD PTR [eax],eax
9f006650:	f0 00 00             	lock add BYTE PTR [eax],al
9f006653:	00 8e 17 00 9f 8c    	add    BYTE PTR [esi-0x7360ffe9],cl
9f006659:	00 00                	add    BYTE PTR [eax],al
9f00665b:	00 12                	add    BYTE PTR [edx],dl
9f00665d:	00 01                	add    BYTE PTR [ecx],al
9f00665f:	00 68 00             	add    BYTE PTR [eax+0x0],ch
9f006662:	00 00                	add    BYTE PTR [eax],al
9f006664:	62 09                	bound  ecx,QWORD PTR [ecx]
9f006666:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
9f00666c:	12 00                	adc    al,BYTE PTR [eax]
9f00666e:	01 00                	add    DWORD PTR [eax],eax
9f006670:	16                   	push   ss
9f006671:	01 00                	add    DWORD PTR [eax],eax
9f006673:	00 50 19             	add    BYTE PTR [eax+0x19],dl
9f006676:	00 9f 27 00 00 00    	add    BYTE PTR [edi+0x27],bl
9f00667c:	12 00                	adc    al,BYTE PTR [eax]
9f00667e:	01 00                	add    DWORD PTR [eax],eax
9f006680:	5b                   	pop    ebx
9f006681:	01 00                	add    DWORD PTR [eax],eax
9f006683:	00 22                	add    BYTE PTR [edx],ah
9f006685:	21 00                	and    DWORD PTR [eax],eax
9f006687:	9f                   	lahf   
9f006688:	21 00                	and    DWORD PTR [eax],eax
9f00668a:	00 00                	add    BYTE PTR [eax],al
9f00668c:	12 00                	adc    al,BYTE PTR [eax]
9f00668e:	01 00                	add    DWORD PTR [eax],eax
9f006690:	2c 02                	sub    al,0x2
9f006692:	00 00                	add    BYTE PTR [eax],al
9f006694:	2c 3d                	sub    al,0x3d
9f006696:	00 9f 6b 00 00 00    	add    BYTE PTR [edi+0x6b],bl
9f00669c:	12 00                	adc    al,BYTE PTR [eax]
9f00669e:	01 00                	add    DWORD PTR [eax],eax
9f0066a0:	39 01                	cmp    DWORD PTR [ecx],eax
9f0066a2:	00 00                	add    BYTE PTR [eax],al
9f0066a4:	4c                   	dec    esp
9f0066a5:	1c 00                	sbb    al,0x0
9f0066a7:	9f                   	lahf   
9f0066a8:	24 00                	and    al,0x0
9f0066aa:	00 00                	add    BYTE PTR [eax],al
9f0066ac:	12 00                	adc    al,BYTE PTR [eax]
9f0066ae:	01 00                	add    DWORD PTR [eax],eax
9f0066b0:	90                   	nop
9f0066b1:	01 00                	add    DWORD PTR [eax],eax
9f0066b3:	00 1f                	add    BYTE PTR [edi],bl
9f0066b5:	27                   	daa    
9f0066b6:	00 9f 24 00 00 00    	add    BYTE PTR [edi+0x24],bl
9f0066bc:	12 00                	adc    al,BYTE PTR [eax]
9f0066be:	01 00                	add    DWORD PTR [eax],eax
9f0066c0:	53                   	push   ebx
9f0066c1:	02 00                	add    al,BYTE PTR [eax]
9f0066c3:	00 74 42 00          	add    BYTE PTR [edx+eax*2+0x0],dh
9f0066c7:	9f                   	lahf   
9f0066c8:	24 00                	and    al,0x0
9f0066ca:	00 00                	add    BYTE PTR [eax],al
9f0066cc:	12 00                	adc    al,BYTE PTR [eax]
9f0066ce:	01 00                	add    DWORD PTR [eax],eax
9f0066d0:	c7 00 00 00 46 12    	mov    DWORD PTR [eax],0x12460000
9f0066d6:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
9f0066dc:	12 00                	adc    al,BYTE PTR [eax]
9f0066de:	01 00                	add    DWORD PTR [eax],eax
9f0066e0:	b2 01                	mov    dl,0x1
9f0066e2:	00 00                	add    BYTE PTR [eax],al
9f0066e4:	7d 2b                	jge    9f006711 <__x86.get_pc_thunk.cx+0x14fb>
9f0066e6:	00 9f 2d 00 00 00    	add    BYTE PTR [edi+0x2d],bl
9f0066ec:	12 00                	adc    al,BYTE PTR [eax]
9f0066ee:	01 00                	add    DWORD PTR [eax],eax
9f0066f0:	82 00 00             	add    BYTE PTR [eax],0x0
9f0066f3:	00 c3                	add    bl,al
9f0066f5:	0b 00                	or     eax,DWORD PTR [eax]
9f0066f7:	9f                   	lahf   
9f0066f8:	2a 00                	sub    al,BYTE PTR [eax]
9f0066fa:	00 00                	add    BYTE PTR [eax],al
9f0066fc:	12 00                	adc    al,BYTE PTR [eax]
9f0066fe:	01 00                	add    DWORD PTR [eax],eax
9f006700:	9e                   	sahf   
9f006701:	02 00                	add    al,BYTE PTR [eax]
9f006703:	00 c9                	add    cl,cl
9f006705:	51                   	push   ecx
9f006706:	00 9f 45 00 00 00    	add    BYTE PTR [edi+0x45],bl
9f00670c:	12 00                	adc    al,BYTE PTR [eax]
9f00670e:	01 00                	add    DWORD PTR [eax],eax
9f006710:	a3 02 00 00 58       	mov    ds:0x58000002,eax
9f006715:	51                   	push   ecx
9f006716:	00 9f 71 00 00 00    	add    BYTE PTR [edi+0x71],bl
9f00671c:	12 00                	adc    al,BYTE PTR [eax]
9f00671e:	01 00                	add    DWORD PTR [eax],eax
9f006720:	46                   	inc    esi
9f006721:	01 00                	add    DWORD PTR [eax],eax
9f006723:	00 d4                	add    ah,dl
9f006725:	20 00                	and    BYTE PTR [eax],al
9f006727:	9f                   	lahf   
9f006728:	27                   	daa    
9f006729:	00 00                	add    BYTE PTR [eax],al
9f00672b:	00 12                	add    BYTE PTR [edx],dl
9f00672d:	00 01                	add    BYTE PTR [ecx],al
9f00672f:	00 e3                	add    bl,ah
9f006731:	00 00                	add    BYTE PTR [eax],al
9f006733:	00 d3                	add    bl,dl
9f006735:	15 00 9f 5d 00       	adc    eax,0x5d9f00
9f00673a:	00 00                	add    BYTE PTR [eax],al
9f00673c:	12 00                	adc    al,BYTE PTR [eax]
9f00673e:	01 00                	add    DWORD PTR [eax],eax
9f006740:	f6 01 00             	test   BYTE PTR [ecx],0x0
9f006743:	00 69 3a             	add    BYTE PTR [ecx+0x3a],ch
9f006746:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
9f00674c:	12 00                	adc    al,BYTE PTR [eax]
9f00674e:	01 00                	add    DWORD PTR [eax],eax
9f006750:	3c 02                	cmp    al,0x2
9f006752:	00 00                	add    BYTE PTR [eax],al
9f006754:	96                   	xchg   esi,eax
9f006755:	3e 00 9f 82 01 00 00 	add    BYTE PTR ds:[edi+0x182],bl
9f00675c:	12 00                	adc    al,BYTE PTR [eax]
9f00675e:	01 00                	add    DWORD PTR [eax],eax
9f006760:	86 02                	xchg   BYTE PTR [edx],al
9f006762:	00 00                	add    BYTE PTR [eax],al
9f006764:	82 48 00 9f          	or     BYTE PTR [eax+0x0],0x9f
9f006768:	41                   	inc    ecx
9f006769:	00 00                	add    BYTE PTR [eax],al
9f00676b:	00 12                	add    BYTE PTR [edx],dl
9f00676d:	00 01                	add    BYTE PTR [ecx],al
9f00676f:	00 3d 00 00 00 e4    	add    BYTE PTR ds:0xe4000000,bh
9f006775:	05 00 9f 5e 00       	add    eax,0x5e9f00
9f00677a:	00 00                	add    BYTE PTR [eax],al
9f00677c:	12 00                	adc    al,BYTE PTR [eax]
9f00677e:	01 00                	add    DWORD PTR [eax],eax
9f006780:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f006781:	01 00                	add    DWORD PTR [eax],eax
9f006783:	00 6a 2a             	add    BYTE PTR [edx+0x2a],ch
9f006786:	00 9f 24 00 00 00    	add    BYTE PTR [edi+0x24],bl
9f00678c:	12 00                	adc    al,BYTE PTR [eax]
9f00678e:	01 00                	add    DWORD PTR [eax],eax
9f006790:	72 00                	jb     9f006792 <__x86.get_pc_thunk.cx+0x157c>
9f006792:	00 00                	add    BYTE PTR [eax],al
9f006794:	bc 09 00 9f 27       	mov    esp,0x279f0009
9f006799:	00 00                	add    BYTE PTR [eax],al
9f00679b:	00 12                	add    BYTE PTR [edx],dl
9f00679d:	00 01                	add    BYTE PTR [ecx],al
9f00679f:	00 fe                	add    dh,bh
9f0067a1:	01 00                	add    DWORD PTR [eax],eax
9f0067a3:	00 f5                	add    ch,dh
9f0067a5:	3a 00                	cmp    al,BYTE PTR [eax]
9f0067a7:	9f                   	lahf   
9f0067a8:	21 00                	and    DWORD PTR [eax],eax
9f0067aa:	00 00                	add    BYTE PTR [eax],al
9f0067ac:	12 00                	adc    al,BYTE PTR [eax]
9f0067ae:	01 00                	add    DWORD PTR [eax],eax
9f0067b0:	9f                   	lahf   
9f0067b1:	01 00                	add    DWORD PTR [eax],eax
9f0067b3:	00 70 28             	add    BYTE PTR [eax+0x28],dh
9f0067b6:	00 9f 25 00 00 00    	add    BYTE PTR [edi+0x25],bl
9f0067bc:	12 00                	adc    al,BYTE PTR [eax]
9f0067be:	01 00                	add    DWORD PTR [eax],eax
9f0067c0:	cb                   	retf   
9f0067c1:	01 00                	add    DWORD PTR [eax],eax
9f0067c3:	00 6a 2f             	add    BYTE PTR [edx+0x2f],ch
9f0067c6:	00 9f 2b 02 00 00    	add    BYTE PTR [edi+0x22b],bl
9f0067cc:	12 00                	adc    al,BYTE PTR [eax]
9f0067ce:	01 00                	add    DWORD PTR [eax],eax
9f0067d0:	54                   	push   esp
9f0067d1:	01 00                	add    DWORD PTR [eax],eax
9f0067d3:	00 fb                	add    bl,bh
9f0067d5:	20 00                	and    BYTE PTR [eax],al
9f0067d7:	9f                   	lahf   
9f0067d8:	27                   	daa    
9f0067d9:	00 00                	add    BYTE PTR [eax],al
9f0067db:	00 12                	add    BYTE PTR [edx],dl
9f0067dd:	00 01                	add    BYTE PTR [ecx],al
9f0067df:	00 26                	add    BYTE PTR [esi],ah
9f0067e1:	01 00                	add    DWORD PTR [eax],eax
9f0067e3:	00 b5 1b 00 9f 53    	add    BYTE PTR [ebp+0x539f001b],dh
9f0067e9:	00 00                	add    BYTE PTR [eax],al
9f0067eb:	00 12                	add    BYTE PTR [edx],dl
9f0067ed:	00 01                	add    BYTE PTR [ecx],al
9f0067ef:	00 20                	add    BYTE PTR [eax],ah
9f0067f1:	01 00                	add    DWORD PTR [eax],eax
9f0067f3:	00 c7                	add    bh,al
9f0067f5:	19 00                	sbb    DWORD PTR [eax],eax
9f0067f7:	9f                   	lahf   
9f0067f8:	ee                   	out    dx,al
9f0067f9:	01 00                	add    DWORD PTR [eax],eax
9f0067fb:	00 12                	add    BYTE PTR [edx],dl
9f0067fd:	00 01                	add    BYTE PTR [ecx],al
9f0067ff:	00 e9                	add    cl,ch
9f006801:	00 00                	add    BYTE PTR [eax],al
9f006803:	00 18                	add    BYTE PTR [eax],bl
9f006805:	17                   	pop    ss
9f006806:	00 9f 3b 00 00 00    	add    BYTE PTR [edi+0x3b],bl
9f00680c:	12 00                	adc    al,BYTE PTR [eax]
9f00680e:	01 00                	add    DWORD PTR [eax],eax
9f006810:	df 01                	fild   WORD PTR [ecx]
9f006812:	00 00                	add    BYTE PTR [eax],al
9f006814:	30 16                	xor    BYTE PTR [esi],dl
9f006816:	00 9f 58 00 00 00    	add    BYTE PTR [edi+0x58],bl
9f00681c:	12 00                	adc    al,BYTE PTR [eax]
9f00681e:	01 00                	add    DWORD PTR [eax],eax
9f006820:	fe 00                	inc    BYTE PTR [eax]
9f006822:	00 00                	add    BYTE PTR [eax],al
9f006824:	8e 18                	mov    ds,WORD PTR [eax]
9f006826:	00 9f 74 00 00 00    	add    BYTE PTR [edi+0x74],bl
9f00682c:	12 00                	adc    al,BYTE PTR [eax]
9f00682e:	01 00                	add    DWORD PTR [eax],eax
9f006830:	b2 00                	mov    dl,0x0
9f006832:	00 00                	add    BYTE PTR [eax],al
9f006834:	1c 12                	sbb    al,0x12
9f006836:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
9f00683c:	12 00                	adc    al,BYTE PTR [eax]
9f00683e:	01 00                	add    DWORD PTR [eax],eax
9f006840:	92                   	xchg   edx,eax
9f006841:	00 00                	add    BYTE PTR [eax],al
9f006843:	00 a1 0c 00 9f 25    	add    BYTE PTR [ecx+0x259f000c],ah
9f006849:	03 00                	add    eax,DWORD PTR [eax]
9f00684b:	00 12                	add    BYTE PTR [edx],dl
9f00684d:	00 01                	add    BYTE PTR [ecx],al
9f00684f:	00 24 02             	add    BYTE PTR [edx+eax*1],ah
9f006852:	00 00                	add    BYTE PTR [eax],al
9f006854:	0a 3d 00 9f 22 00    	or     bh,BYTE PTR ds:0x229f00
9f00685a:	00 00                	add    BYTE PTR [eax],al
9f00685c:	12 00                	adc    al,BYTE PTR [eax]
9f00685e:	01 00                	add    DWORD PTR [eax],eax
9f006860:	1b 01                	sbb    eax,DWORD PTR [ecx]
9f006862:	00 00                	add    BYTE PTR [eax],al
9f006864:	77 19                	ja     9f00687f <__x86.get_pc_thunk.cx+0x1669>
9f006866:	00 9f 50 00 00 00    	add    BYTE PTR [edi+0x50],bl
9f00686c:	12 00                	adc    al,BYTE PTR [eax]
9f00686e:	01 00                	add    DWORD PTR [eax],eax
9f006870:	f8                   	clc    
9f006871:	00 00                	add    BYTE PTR [eax],al
9f006873:	00 1a                	add    BYTE PTR [edx],bl
9f006875:	18 00                	sbb    BYTE PTR [eax],al
9f006877:	9f                   	lahf   
9f006878:	74 00                	je     9f00687a <__x86.get_pc_thunk.cx+0x1664>
9f00687a:	00 00                	add    BYTE PTR [eax],al
9f00687c:	12 00                	adc    al,BYTE PTR [eax]
9f00687e:	01 00                	add    DWORD PTR [eax],eax
9f006880:	5a                   	pop    edx
9f006881:	00 00                	add    BYTE PTR [eax],al
9f006883:	00 11                	add    BYTE PTR [ecx],dl
9f006885:	07                   	pop    es
9f006886:	00 9f c5 01 00 00    	add    BYTE PTR [edi+0x1c5],bl
9f00688c:	12 00                	adc    al,BYTE PTR [eax]
9f00688e:	01 00                	add    DWORD PTR [eax],eax
9f006890:	21 00                	and    DWORD PTR [eax],eax
9f006892:	00 00                	add    BYTE PTR [eax],al
9f006894:	c8 04 00 9f          	enter  0x4,0x9f
9f006898:	be 00 00 00 12       	mov    esi,0x12000000
9f00689d:	00 01                	add    BYTE PTR [ecx],al
9f00689f:	00 ef                	add    bh,ch
9f0068a1:	01 00                	add    DWORD PTR [eax],eax
9f0068a3:	00 78 39             	add    BYTE PTR [eax+0x39],bh
9f0068a6:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
9f0068ac:	12 00                	adc    al,BYTE PTR [eax]
9f0068ae:	01 00                	add    DWORD PTR [eax],eax
9f0068b0:	61                   	popa   
9f0068b1:	00 00                	add    BYTE PTR [eax],al
9f0068b3:	00 06                	add    BYTE PTR [esi],al
9f0068b5:	09 00                	or     DWORD PTR [eax],eax
9f0068b7:	9f                   	lahf   
9f0068b8:	27                   	daa    
9f0068b9:	00 00                	add    BYTE PTR [eax],al
9f0068bb:	00 12                	add    BYTE PTR [edx],dl
9f0068bd:	00 01                	add    BYTE PTR [ecx],al
9f0068bf:	00 44 02 00          	add    BYTE PTR [edx+eax*1+0x0],al
9f0068c3:	00 18                	add    BYTE PTR [eax],bl
9f0068c5:	40                   	inc    eax
9f0068c6:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
9f0068cc:	12 00                	adc    al,BYTE PTR [eax]
9f0068ce:	01 00                	add    DWORD PTR [eax],eax
9f0068d0:	7d 02                	jge    9f0068d4 <__x86.get_pc_thunk.cx+0x16be>
9f0068d2:	00 00                	add    BYTE PTR [eax],al
9f0068d4:	61                   	popa   
9f0068d5:	48                   	dec    eax
9f0068d6:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
9f0068dc:	12 00                	adc    al,BYTE PTR [eax]
9f0068de:	01 00                	add    DWORD PTR [eax],eax
9f0068e0:	d9 00                	fld    DWORD PTR [eax]
9f0068e2:	00 00                	add    BYTE PTR [eax],al
9f0068e4:	df 14 00             	fist   WORD PTR [eax+eax*1]
9f0068e7:	9f                   	lahf   
9f0068e8:	cd 00                	int    0x0
9f0068ea:	00 00                	add    BYTE PTR [eax],al
9f0068ec:	12 00                	adc    al,BYTE PTR [eax]
9f0068ee:	01 00                	add    DWORD PTR [eax],eax
9f0068f0:	7d 00                	jge    9f0068f2 <__x86.get_pc_thunk.cx+0x16dc>
9f0068f2:	00 00                	add    BYTE PTR [eax],al
9f0068f4:	60                   	pusha  
9f0068f5:	0b 00                	or     eax,DWORD PTR [eax]
9f0068f7:	9f                   	lahf   
9f0068f8:	2a 00                	sub    al,BYTE PTR [eax]
9f0068fa:	00 00                	add    BYTE PTR [eax],al
9f0068fc:	12 00                	adc    al,BYTE PTR [eax]
9f0068fe:	01 00                	add    DWORD PTR [eax],eax
9f006900:	08 00                	or     BYTE PTR [eax],al
9f006902:	00 00                	add    BYTE PTR [eax],al
9f006904:	78 00                	js     9f006906 <__x86.get_pc_thunk.cx+0x16f0>
9f006906:	00 9f 53 00 00 00    	add    BYTE PTR [edi+0x53],bl
9f00690c:	12 00                	adc    al,BYTE PTR [eax]
9f00690e:	01 00                	add    DWORD PTR [eax],eax
9f006910:	e6 01                	out    0x1,al
9f006912:	00 00                	add    BYTE PTR [eax],al
9f006914:	f0 38 00             	lock cmp BYTE PTR [eax],al
9f006917:	9f                   	lahf   
9f006918:	88 00                	mov    BYTE PTR [eax],al
9f00691a:	00 00                	add    BYTE PTR [eax],al
9f00691c:	12 00                	adc    al,BYTE PTR [eax]
9f00691e:	01 00                	add    DWORD PTR [eax],eax
9f006920:	9c                   	pushf  
9f006921:	02 00                	add    al,BYTE PTR [eax]
9f006923:	00 1d 49 00 9f 3b    	add    BYTE PTR ds:0x3b9f0049,bl
9f006929:	08 00                	or     BYTE PTR [eax],al
9f00692b:	00 12                	add    BYTE PTR [edx],dl
9f00692d:	00 01                	add    BYTE PTR [ecx],al
9f00692f:	00 76 01             	add    BYTE PTR [esi+0x1],dh
9f006932:	00 00                	add    BYTE PTR [eax],al
9f006934:	64 7f 00             	fs jg  9f006937 <__x86.get_pc_thunk.cx+0x1721>
9f006937:	9f                   	lahf   
9f006938:	04 00                	add    al,0x0
9f00693a:	00 00                	add    BYTE PTR [eax],al
9f00693c:	11 00                	adc    DWORD PTR [eax],eax
9f00693e:	15 00 10 00 00       	adc    eax,0x1000
9f006943:	00 b9 01 00 9f 9b    	add    BYTE PTR [ecx-0x6460ffff],bh
9f006949:	00 00                	add    BYTE PTR [eax],al
9f00694b:	00 12                	add    BYTE PTR [edx],dl
9f00694d:	00 01                	add    BYTE PTR [ecx],al
9f00694f:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
9f006952:	00 00                	add    BYTE PTR [eax],al
9f006954:	43                   	inc    ebx
9f006955:	21 00                	and    DWORD PTR [eax],eax
9f006957:	9f                   	lahf   
9f006958:	24 00                	and    al,0x0
9f00695a:	00 00                	add    BYTE PTR [eax],al
9f00695c:	12 00                	adc    al,BYTE PTR [eax]
9f00695e:	01 00                	add    DWORD PTR [eax],eax
9f006960:	4c                   	dec    esp
9f006961:	02 00                	add    al,BYTE PTR [eax]
9f006963:	00 39                	add    BYTE PTR [ecx],bh
9f006965:	40                   	inc    eax
9f006966:	00 9f a1 01 00 00    	add    BYTE PTR [edi+0x1a1],bl
9f00696c:	12 00                	adc    al,BYTE PTR [eax]
9f00696e:	01 00                	add    DWORD PTR [eax],eax
9f006970:	b7 00                	mov    bh,0x0
9f006972:	00 00                	add    BYTE PTR [eax],al
9f006974:	00 00                	add    BYTE PTR [eax],al
9f006976:	13 00                	adc    eax,DWORD PTR [eax]
9f006978:	00 00                	add    BYTE PTR [eax],al
9f00697a:	00 00                	add    BYTE PTR [eax],al
9f00697c:	10 00                	adc    BYTE PTR [eax],al
9f00697e:	01 00                	add    DWORD PTR [eax],eax
9f006980:	97                   	xchg   edi,eax
9f006981:	01 00                	add    DWORD PTR [eax],eax
9f006983:	00 49 28             	add    BYTE PTR [ecx+0x28],cl
9f006986:	00 9f 27 00 00 00    	add    BYTE PTR [edi+0x27],bl
9f00698c:	12 00                	adc    al,BYTE PTR [eax]
9f00698e:	01 00                	add    DWORD PTR [eax],eax
9f006990:	1d 02 00 00 af       	sbb    eax,0xaf000002
9f006995:	3c 00                	cmp    al,0x0
9f006997:	9f                   	lahf   
9f006998:	1e                   	push   ds
9f006999:	00 00                	add    BYTE PTR [eax],al
9f00699b:	00 12                	add    BYTE PTR [edx],dl
9f00699d:	00 01                	add    BYTE PTR [ecx],al
9f00699f:	00 34 01             	add    BYTE PTR [ecx+eax*1],dh
9f0069a2:	00 00                	add    BYTE PTR [eax],al
9f0069a4:	28 1c 00             	sub    BYTE PTR [eax+eax*1],bl
9f0069a7:	9f                   	lahf   
9f0069a8:	24 00                	and    al,0x0
9f0069aa:	00 00                	add    BYTE PTR [eax],al
9f0069ac:	12 00                	adc    al,BYTE PTR [eax]
9f0069ae:	01 00                	add    DWORD PTR [eax],eax
9f0069b0:	7f 01                	jg     9f0069b3 <__x86.get_pc_thunk.cx+0x179d>
9f0069b2:	00 00                	add    BYTE PTR [eax],al
9f0069b4:	68 7f 00 9f 04       	push   0x49f007f
9f0069b9:	00 00                	add    BYTE PTR [eax],al
9f0069bb:	00 11                	add    BYTE PTR [ecx],dl
9f0069bd:	00 15 00 5b 02 00    	add    BYTE PTR ds:0x25b00,dl
9f0069c3:	00 ac 43 00 9f 2a 00 	add    BYTE PTR [ebx+eax*2+0x2a9f00],ch
9f0069ca:	00 00                	add    BYTE PTR [eax],al
9f0069cc:	12 00                	adc    al,BYTE PTR [eax]
9f0069ce:	01 00                	add    DWORD PTR [eax],eax
9f0069d0:	77 00                	ja     9f0069d2 <__x86.get_pc_thunk.cx+0x17bc>
9f0069d2:	00 00                	add    BYTE PTR [eax],al
9f0069d4:	03 0b                	add    ecx,DWORD PTR [ebx]
9f0069d6:	00 9f 24 00 00 00    	add    BYTE PTR [edi+0x24],bl
9f0069dc:	12 00                	adc    al,BYTE PTR [eax]
9f0069de:	01 00                	add    DWORD PTR [eax],eax
9f0069e0:	34 02                	xor    al,0x2
9f0069e2:	00 00                	add    BYTE PTR [eax],al
9f0069e4:	72 3e                	jb     9f006a24 <__x86.get_pc_thunk.cx+0x180e>
9f0069e6:	00 9f 24 00 00 00    	add    BYTE PTR [edi+0x24],bl
9f0069ec:	12 00                	adc    al,BYTE PTR [eax]
9f0069ee:	01 00                	add    DWORD PTR [eax],eax
9f0069f0:	a3 00 00 00 c5       	mov    ds:0xc5000000,eax
9f0069f5:	11 00                	adc    DWORD PTR [eax],eax
9f0069f7:	9f                   	lahf   
9f0069f8:	2a 00                	sub    al,BYTE PTR [eax]
9f0069fa:	00 00                	add    BYTE PTR [eax],al
9f0069fc:	12 00                	adc    al,BYTE PTR [eax]
9f0069fe:	01 00                	add    DWORD PTR [eax],eax
9f006a00:	74 02                	je     9f006a04 <__x86.get_pc_thunk.cx+0x17ee>
9f006a02:	00 00                	add    BYTE PTR [eax],al
9f006a04:	0b 45 00             	or     eax,DWORD PTR [ebp+0x0]
9f006a07:	9f                   	lahf   
9f006a08:	48                   	dec    eax
9f006a09:	00 00                	add    BYTE PTR [eax],al
9f006a0b:	00 12                	add    BYTE PTR [edx],dl
9f006a0d:	00 01                	add    BYTE PTR [ecx],al
9f006a0f:	00 2a                	add    BYTE PTR [edx],ch
9f006a11:	00 00                	add    BYTE PTR [eax],al
9f006a13:	00 86 05 00 9f 5e    	add    BYTE PTR [esi+0x5e9f0005],al
9f006a19:	00 00                	add    BYTE PTR [eax],al
9f006a1b:	00 12                	add    BYTE PTR [edx],dl
9f006a1d:	00 01                	add    BYTE PTR [ecx],al
9f006a1f:	00 40 01             	add    BYTE PTR [eax+0x1],al
9f006a22:	00 00                	add    BYTE PTR [eax],al
9f006a24:	c2 1d 00             	ret    0x1d
9f006a27:	9f                   	lahf   
9f006a28:	24 00                	and    al,0x0
9f006a2a:	00 00                	add    BYTE PTR [eax],al
9f006a2c:	12 00                	adc    al,BYTE PTR [eax]
9f006a2e:	01 00                	add    DWORD PTR [eax],eax
9f006a30:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a31:	00 00                	add    BYTE PTR [eax],al
9f006a33:	00 40 0a             	add    BYTE PTR [eax+0xa],al
9f006a36:	00 9f 95 00 00 00    	add    BYTE PTR [edi+0x95],bl
9f006a3c:	12 00                	adc    al,BYTE PTR [eax]
9f006a3e:	01 00                	add    DWORD PTR [eax],eax
9f006a40:	9e                   	sahf   
9f006a41:	00 00                	add    BYTE PTR [eax],al
9f006a43:	00 f3                	add    bl,dh
9f006a45:	0f 00 9f 24 00 00 00 	ltr    WORD PTR [edi+0x24]
9f006a4c:	12 00                	adc    al,BYTE PTR [eax]
9f006a4e:	01 00                	add    DWORD PTR [eax],eax
9f006a50:	17                   	pop    ss
9f006a51:	00 00                	add    BYTE PTR [eax],al
9f006a53:	00 d0                	add    al,dl
9f006a55:	02 00                	add    al,BYTE PTR [eax]
9f006a57:	9f                   	lahf   
9f006a58:	bc 00 00 00 12       	mov    esp,0x12000000
9f006a5d:	00 01                	add    BYTE PTR [ecx],al
9f006a5f:	00 09                	add    BYTE PTR [ecx],cl
9f006a61:	01 00                	add    DWORD PTR [eax],eax
9f006a63:	00 23                	add    BYTE PTR [ebx],ah
9f006a65:	19 00                	sbb    DWORD PTR [eax],eax
9f006a67:	9f                   	lahf   
9f006a68:	2d 00 00 00 12       	sub    eax,0x12000000
9f006a6d:	00 01                	add    BYTE PTR [ecx],al
9f006a6f:	00 53 00             	add    BYTE PTR [ebx+0x0],dl
9f006a72:	00 00                	add    BYTE PTR [eax],al
9f006a74:	ea 06 00 9f 27 00 00 	jmp    0x0:0x279f0006
9f006a7b:	00 12                	add    BYTE PTR [edx],dl
9f006a7d:	00 01                	add    BYTE PTR [ecx],al
9f006a7f:	00 ab 00 00 00 ef    	add    BYTE PTR [ebx-0x11000000],ch
9f006a85:	11 00                	adc    DWORD PTR [eax],eax
9f006a87:	9f                   	lahf   
9f006a88:	2d 00 00 00 12       	sub    eax,0x12000000
9f006a8d:	00 01                	add    BYTE PTR [ecx],al
9f006a8f:	00 14 02             	add    BYTE PTR [edx+eax*1],dl
9f006a92:	00 00                	add    BYTE PTR [eax],al
9f006a94:	1d 3c 00 9f 5d       	sbb    eax,0x5d9f003c
9f006a99:	00 00                	add    BYTE PTR [eax],al
9f006a9b:	00 12                	add    BYTE PTR [edx],dl
9f006a9d:	00 01                	add    BYTE PTR [ecx],al
9f006a9f:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
9f006aa2:	00 00                	add    BYTE PTR [eax],al
9f006aa4:	67 21 00             	and    DWORD PTR [bx+si],eax
9f006aa7:	9f                   	lahf   
9f006aa8:	77 00                	ja     9f006aaa <__x86.get_pc_thunk.cx+0x1894>
9f006aaa:	00 00                	add    BYTE PTR [eax],al
9f006aac:	12 00                	adc    al,BYTE PTR [eax]
9f006aae:	01 00                	add    DWORD PTR [eax],eax
9f006ab0:	66 02 00             	data16 add al,BYTE PTR [eax]
9f006ab3:	00 ea                	add    dl,ch
9f006ab5:	44                   	inc    esp
9f006ab6:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
9f006abc:	12 00                	adc    al,BYTE PTR [eax]
9f006abe:	01 00                	add    DWORD PTR [eax],eax
9f006ac0:	6d                   	ins    DWORD PTR es:[edi],dx
9f006ac1:	02 00                	add    al,BYTE PTR [eax]
9f006ac3:	00 b4 7f 00 9f 04 00 	add    BYTE PTR [edi+edi*2+0x49f00],dh
9f006aca:	00 00                	add    BYTE PTR [eax],al
9f006acc:	11 00                	adc    DWORD PTR [eax],eax
9f006ace:	15 00 ab 01 00       	adc    eax,0x1ab00
9f006ad3:	00 59 2b             	add    BYTE PTR [ecx+0x2b],bl
9f006ad6:	00 9f 24 00 00 00    	add    BYTE PTR [edi+0x24],bl
9f006adc:	12 00                	adc    al,BYTE PTR [eax]
9f006ade:	01 00                	add    DWORD PTR [eax],eax
9f006ae0:	01 00                	add    DWORD PTR [eax],eax
9f006ae2:	00 00                	add    BYTE PTR [eax],al
9f006ae4:	00 00                	add    BYTE PTR [eax],al
9f006ae6:	00 9f 3c 00 00 00    	add    BYTE PTR [edi+0x3c],bl
9f006aec:	12 00                	adc    al,BYTE PTR [eax]
9f006aee:	01 00                	add    DWORD PTR [eax],eax
9f006af0:	cc                   	int3   
9f006af1:	00 00                	add    BYTE PTR [eax],al
9f006af3:	00 8d 12 00 9f 47    	add    BYTE PTR [ebp+0x479f0012],cl
9f006af9:	00 00                	add    BYTE PTR [eax],al
9f006afb:	00 12                	add    BYTE PTR [edx],dl
9f006afd:	00 01                	add    BYTE PTR [ecx],al
9f006aff:	00 05 02 00 00 16    	add    BYTE PTR ds:0x16000002,al
9f006b05:	3b 00                	cmp    eax,DWORD PTR [eax]
9f006b07:	9f                   	lahf   
9f006b08:	44                   	inc    esp
9f006b09:	00 00                	add    BYTE PTR [eax],al
9f006b0b:	00 12                	add    BYTE PTR [edx],dl
9f006b0d:	00 01                	add    BYTE PTR [ecx],al
9f006b0f:	00 8d 00 00 00 7a    	add    BYTE PTR [ebp+0x7a000000],cl
9f006b15:	0c 00                	or     al,0x0
9f006b17:	9f                   	lahf   
9f006b18:	27                   	daa    
9f006b19:	00 00                	add    BYTE PTR [eax],al
9f006b1b:	00 12                	add    BYTE PTR [edx],dl
9f006b1d:	00 01                	add    BYTE PTR [ecx],al
9f006b1f:	00 88 01 00 00 6c    	add    BYTE PTR [eax+0x6c000001],cl
9f006b25:	7f 00                	jg     9f006b27 <__x86.get_pc_thunk.cx+0x1911>
9f006b27:	9f                   	lahf   
9f006b28:	04 00                	add    al,0x0
9f006b2a:	00 00                	add    BYTE PTR [eax],al
9f006b2c:	11 00                	adc    DWORD PTR [eax],eax
9f006b2e:	15 00 1c 00 00       	adc    eax,0x1c00
9f006b33:	00 aa 04 00 9f 1e    	add    BYTE PTR [edx+0x1e9f0004],ch
9f006b39:	00 00                	add    BYTE PTR [eax],al
9f006b3b:	00 12                	add    BYTE PTR [edx],dl
9f006b3d:	00 01                	add    BYTE PTR [ecx],al
9f006b3f:	00 88 00 00 00 1f    	add    BYTE PTR [eax+0x1f000000],cl
9f006b45:	0c 00                	or     al,0x0
9f006b47:	9f                   	lahf   
9f006b48:	2a 00                	sub    al,BYTE PTR [eax]
9f006b4a:	00 00                	add    BYTE PTR [eax],al
9f006b4c:	12 00                	adc    al,BYTE PTR [eax]
9f006b4e:	01 00                	add    DWORD PTR [eax],eax
9f006b50:	de 01                	fiadd  WORD PTR [ecx]
9f006b52:	00 00                	add    BYTE PTR [eax],al
9f006b54:	b9 38 00 9f 37       	mov    ecx,0x379f0038
9f006b59:	00 00                	add    BYTE PTR [eax],al
9f006b5b:	00 12                	add    BYTE PTR [edx],dl
9f006b5d:	00 01                	add    BYTE PTR [ecx],al
9f006b5f:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
9f006b62:	00 00                	add    BYTE PTR [eax],al
9f006b64:	08 1c 00             	or     BYTE PTR [eax+eax*1],bl
9f006b67:	9f                   	lahf   
9f006b68:	20 00                	and    BYTE PTR [eax],al
9f006b6a:	00 00                	add    BYTE PTR [eax],al
9f006b6c:	12 00                	adc    al,BYTE PTR [eax]
9f006b6e:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f006b70 <.dynstr>:
9f006b70:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b73:	72 63                	jb     9f006bd8 <__x86.get_pc_thunk.cx+0x19c2>
9f006b75:	68 72 00 73 74       	push   0x74730072
9f006b7a:	72 63                	jb     9f006bdf <__x86.get_pc_thunk.cx+0x19c9>
9f006b7c:	73 70                	jae    9f006bee <__x86.get_pc_thunk.cx+0x19d8>
9f006b7e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006b7f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006b82:	72 74                	jb     9f006bf8 <__x86.get_pc_thunk.cx+0x19e2>
9f006b84:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b85:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f006b88:	74 6f                	je     9f006bf9 <__x86.get_pc_thunk.cx+0x19e3>
9f006b8a:	61                   	popa   
9f006b8b:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f006b8e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b8f:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f006b95:	54                   	push   esp
9f006b96:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b97:	58                   	pop    eax
9f006b98:	59                   	pop    ecx
9f006b99:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f006b9c:	76 65                	jbe    9f006c03 <__x86.get_pc_thunk.cx+0x19ed>
9f006b9e:	43                   	inc    ebx
9f006b9f:	75 72                	jne    9f006c13 <__x86.get_pc_thunk.cx+0x19fd>
9f006ba1:	73 6f                	jae    9f006c12 <__x86.get_pc_thunk.cx+0x19fc>
9f006ba3:	72 50                	jb     9f006bf5 <__x86.get_pc_thunk.cx+0x19df>
9f006ba5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006ba6:	73 69                	jae    9f006c11 <__x86.get_pc_thunk.cx+0x19fb>
9f006ba8:	74 69                	je     9f006c13 <__x86.get_pc_thunk.cx+0x19fd>
9f006baa:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bab:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006bac:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f006baf:	73 74                	jae    9f006c25 <__x86.get_pc_thunk.cx+0x1a0f>
9f006bb1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bb2:	72 65                	jb     9f006c19 <__x86.get_pc_thunk.cx+0x1a03>
9f006bb4:	43                   	inc    ebx
9f006bb5:	75 72                	jne    9f006c29 <__x86.get_pc_thunk.cx+0x1a13>
9f006bb7:	73 6f                	jae    9f006c28 <__x86.get_pc_thunk.cx+0x1a12>
9f006bb9:	72 50                	jb     9f006c0b <__x86.get_pc_thunk.cx+0x19f5>
9f006bbb:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bbc:	73 69                	jae    9f006c27 <__x86.get_pc_thunk.cx+0x1a11>
9f006bbe:	74 69                	je     9f006c29 <__x86.get_pc_thunk.cx+0x1a13>
9f006bc0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bc1:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006bc2:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006bc5:	74 65                	je     9f006c2c <__x86.get_pc_thunk.cx+0x1a16>
9f006bc7:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006bc8:	76 00                	jbe    9f006bca <__x86.get_pc_thunk.cx+0x19b4>
9f006bca:	73 65                	jae    9f006c31 <__x86.get_pc_thunk.cx+0x1a1b>
9f006bcc:	74 65                	je     9f006c33 <__x86.get_pc_thunk.cx+0x1a1d>
9f006bce:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006bcf:	76 00                	jbe    9f006bd1 <__x86.get_pc_thunk.cx+0x19bb>
9f006bd1:	67 65 74 63          	addr16 gs je 9f006c38 <__x86.get_pc_thunk.cx+0x1a22>
9f006bd5:	77 64                	ja     9f006c3b <__x86.get_pc_thunk.cx+0x1a25>
9f006bd7:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006bda:	74 64                	je     9f006c40 <__x86.get_pc_thunk.cx+0x1a2a>
9f006bdc:	69 72 00 66 72 65 6f 	imul   esi,DWORD PTR [edx+0x0],0x6f657266
9f006be3:	70 65                	jo     9f006c4a <__x86.get_pc_thunk.cx+0x1a34>
9f006be5:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006be6:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
9f006be9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bea:	73 65                	jae    9f006c51 <__x86.get_pc_thunk.cx+0x1a3b>
9f006bec:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f006bef:	61                   	popa   
9f006bf0:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f006bf4:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f006bfb:	6b 
9f006bfc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006bff:	61                   	popa   
9f006c00:	74 00                	je     9f006c02 <__x86.get_pc_thunk.cx+0x19ec>
9f006c02:	72 65                	jb     9f006c69 <__x86.get_pc_thunk.cx+0x1a53>
9f006c04:	73 6f                	jae    9f006c75 <__x86.get_pc_thunk.cx+0x1a5f>
9f006c06:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c07:	76 65                	jbe    9f006c6e <__x86.get_pc_thunk.cx+0x1a58>
9f006c09:	50                   	push   eax
9f006c0a:	61                   	popa   
9f006c0b:	74 68                	je     9f006c75 <__x86.get_pc_thunk.cx+0x1a5f>
9f006c0d:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
9f006c11:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c12:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006c15:	74 6c                	je     9f006c83 <__x86.get_pc_thunk.cx+0x1a6d>
9f006c17:	69 6e 65 00 75 6e 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c6e7500
9f006c1e:	69 6e 6b 00 70 75 74 	imul   ebp,DWORD PTR [esi+0x6b],0x74757000
9f006c25:	73 00                	jae    9f006c27 <__x86.get_pc_thunk.cx+0x1a11>
9f006c27:	73 79                	jae    9f006ca2 <__x86.get_pc_thunk.cx+0x1a8c>
9f006c29:	73 45                	jae    9f006c70 <__x86.get_pc_thunk.cx+0x1a5a>
9f006c2b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006c2c:	74 65                	je     9f006c93 <__x86.get_pc_thunk.cx+0x1a7d>
9f006c2e:	72 5f                	jb     9f006c8f <__x86.get_pc_thunk.cx+0x1a79>
9f006c30:	56                   	push   esi
9f006c31:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f006c36:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f006c39:	74 63                	je     9f006c9e <__x86.get_pc_thunk.cx+0x1a88>
9f006c3b:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006c3e:	74 63                	je     9f006ca3 <__x86.get_pc_thunk.cx+0x1a8d>
9f006c40:	68 61 72 00 67       	push   0x67007261
9f006c45:	65 74 73             	gs je  9f006cbb <__x86.get_pc_thunk.cx+0x1aa5>
9f006c48:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006c4c:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f006c4f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006c50:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f006c57:	74 
9f006c58:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f006c5b:	69 6e 74 64 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730064
9f006c62:	65 65 70 4d          	gs gs jo 9f006cb3 <__x86.get_pc_thunk.cx+0x1a9d>
9f006c66:	53                   	push   ebx
9f006c67:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
9f006c6a:	65 65 70 00          	gs gs jo 9f006c6e <__x86.get_pc_thunk.cx+0x1a58>
9f006c6e:	73 6c                	jae    9f006cdc <__x86.get_pc_thunk.cx+0x1ac6>
9f006c70:	65 65 70 54          	gs gs jo 9f006cc8 <__x86.get_pc_thunk.cx+0x1ab2>
9f006c74:	69 63 6b 73 00 6d 6f 	imul   esp,DWORD PTR [ebx+0x6b],0x6f6d0073
9f006c7b:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f006c82:	6e 
9f006c83:	61                   	popa   
9f006c84:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c85:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f006c88:	72 6b                	jb     9f006cf5 <__x86.get_pc_thunk.cx+0x1adf>
9f006c8a:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f006c8d:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f006c90:	65 78 65             	gs js  9f006cf8 <__x86.get_pc_thunk.cx+0x1ae2>
9f006c93:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f006c96:	65 78 65             	gs js  9f006cfe <__x86.get_pc_thunk.cx+0x1ae8>
9f006c99:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f006c9c:	77 61                	ja     9f006cff <__x86.get_pc_thunk.cx+0x1ae9>
9f006c9e:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f006ca5:	78 
9f006ca6:	69 74 00 73 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x77637465
9f006cad:	77 
9f006cae:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f006cb2:	6c                   	ins    BYTE PTR es:[edi],dx
9f006cb3:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f006cba:	69 
9f006cbb:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006cbc:	65 54                	gs push esp
9f006cbe:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006cbf:	41                   	inc    ecx
9f006cc0:	72 67                	jb     9f006d29 <__x86.get_pc_thunk.cx+0x1b13>
9f006cc2:	76 00                	jbe    9f006cc4 <__x86.get_pc_thunk.cx+0x1aae>
9f006cc4:	73 65                	jae    9f006d2b <__x86.get_pc_thunk.cx+0x1b15>
9f006cc6:	74 53                	je     9f006d1b <__x86.get_pc_thunk.cx+0x1b05>
9f006cc8:	54                   	push   esp
9f006cc9:	44                   	inc    esp
9f006cca:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
9f006cce:	65 41                	gs inc ecx
9f006cd0:	44                   	inc    esp
9f006cd1:	75 6d                	jne    9f006d40 <__x86.get_pc_thunk.cx+0x1b2a>
9f006cd3:	70 00                	jo     9f006cd5 <__x86.get_pc_thunk.cx+0x1abf>
9f006cd5:	73 65                	jae    9f006d3c <__x86.get_pc_thunk.cx+0x1b26>
9f006cd7:	74 70                	je     9f006d49 <__x86.get_pc_thunk.cx+0x1b33>
9f006cd9:	72 69                	jb     9f006d44 <__x86.get_pc_thunk.cx+0x1b2e>
9f006cdb:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006cdc:	72 69                	jb     9f006d47 <__x86.get_pc_thunk.cx+0x1b31>
9f006cde:	74 79                	je     9f006d59 <__x86.get_pc_thunk.cx+0x1b43>
9f006ce0:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
9f006ce3:	61                   	popa   
9f006ce4:	70 00                	jo     9f006ce6 <__x86.get_pc_thunk.cx+0x1ad0>
9f006ce6:	68 65 61 70 42       	push   0x42706165
9f006ceb:	61                   	popa   
9f006cec:	73 65                	jae    9f006d53 <__x86.get_pc_thunk.cx+0x1b3d>
9f006cee:	00 68 65             	add    BYTE PTR [eax+0x65],ch
9f006cf1:	61                   	popa   
9f006cf2:	70 43                	jo     9f006d37 <__x86.get_pc_thunk.cx+0x1b21>
9f006cf4:	75 72                	jne    9f006d68 <__x86.get_pc_thunk.cx+0x1b52>
9f006cf6:	72 00                	jb     9f006cf8 <__x86.get_pc_thunk.cx+0x1ae2>
9f006cf8:	68 65 61 70 45       	push   0x45706165
9f006cfd:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006cfe:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
9f006d02:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d03:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d04:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006d05:	63 00                	arpl   WORD PTR [eax],ax
9f006d07:	72 65                	jb     9f006d6e <__x86.get_pc_thunk.cx+0x1b58>
9f006d09:	61                   	popa   
9f006d0a:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d0b:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d0c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006d0d:	63 00                	arpl   WORD PTR [eax],ax
9f006d0f:	66 72 65             	data16 jb 9f006d77 <__x86.get_pc_thunk.cx+0x1b61>
9f006d12:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f006d16:	6d                   	ins    DWORD PTR es:[edi],dx
9f006d17:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f006d1a:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
9f006d1d:	6d                   	ins    DWORD PTR es:[edi],dx
9f006d1e:	73 65                	jae    9f006d85 <__x86.get_pc_thunk.cx+0x1b6f>
9f006d20:	74 00                	je     9f006d22 <__x86.get_pc_thunk.cx+0x1b0c>
9f006d22:	70 69                	jo     9f006d8d <__x86.get_pc_thunk.cx+0x1b77>
9f006d24:	70 65                	jo     9f006d8b <__x86.get_pc_thunk.cx+0x1b75>
9f006d26:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
9f006d2a:	33 00                	xor    eax,DWORD PTR [eax]
9f006d2c:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
9f006d2f:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d30:	64 50                	fs push eax
9f006d32:	72 6f                	jb     9f006da3 <__x86.get_pc_thunk.cx+0x1b8d>
9f006d34:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
9f006d37:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006d39:	54                   	push   esp
9f006d3a:	00 62 75             	add    BYTE PTR [edx+0x75],ah
9f006d3d:	69 6c 64 41 6c 6c 50 	imul   ebp,DWORD PTR [esp+eiz*2+0x41],0x72506c6c
9f006d44:	72 
9f006d45:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006d46:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
9f006d49:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006d4b:	54                   	push   esp
9f006d4c:	73 00                	jae    9f006d4e <__x86.get_pc_thunk.cx+0x1b38>
9f006d4e:	73 70                	jae    9f006dc0 <__x86.get_pc_thunk.cx+0x1baa>
9f006d50:	72 69                	jb     9f006dbb <__x86.get_pc_thunk.cx+0x1ba5>
9f006d52:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006d53:	74 66                	je     9f006dbb <__x86.get_pc_thunk.cx+0x1ba5>
9f006d55:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f006d58:	73 65                	jae    9f006dbf <__x86.get_pc_thunk.cx+0x1ba9>
9f006d5a:	74 52                	je     9f006dae <__x86.get_pc_thunk.cx+0x1b98>
9f006d5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006d5d:	77 00                	ja     9f006d5f <__x86.get_pc_thunk.cx+0x1b49>
9f006d5f:	73 74                	jae    9f006dd5 <__x86.get_pc_thunk.cx+0x1bbf>
9f006d61:	72 63                	jb     9f006dc6 <__x86.get_pc_thunk.cx+0x1bb0>
9f006d63:	61                   	popa   
9f006d64:	74 00                	je     9f006d66 <__x86.get_pc_thunk.cx+0x1b50>
9f006d66:	73 74                	jae    9f006ddc <__x86.get_pc_thunk.cx+0x1bc6>
9f006d68:	72 6e                	jb     9f006dd8 <__x86.get_pc_thunk.cx+0x1bc2>
9f006d6a:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
9f006d6d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006d70:	72 63                	jb     9f006dd5 <__x86.get_pc_thunk.cx+0x1bbf>
9f006d72:	6d                   	ins    DWORD PTR es:[edi],dx
9f006d73:	70 00                	jo     9f006d75 <__x86.get_pc_thunk.cx+0x1b5f>
9f006d75:	73 74                	jae    9f006deb <__x86.get_pc_thunk.cx+0x1bd5>
9f006d77:	72 63                	jb     9f006ddc <__x86.get_pc_thunk.cx+0x1bc6>
9f006d79:	70 79                	jo     9f006df4 <__x86.get_pc_thunk.cx+0x1bde>
9f006d7b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006d7e:	72 63                	jb     9f006de3 <__x86.get_pc_thunk.cx+0x1bcd>
9f006d80:	70 79                	jo     9f006dfb <__x86.get_pc_thunk.cx+0x1be5>
9f006d82:	63 00                	arpl   WORD PTR [eax],ax
9f006d84:	73 74                	jae    9f006dfa <__x86.get_pc_thunk.cx+0x1be4>
9f006d86:	72 69                	jb     9f006df1 <__x86.get_pc_thunk.cx+0x1bdb>
9f006d88:	73 6e                	jae    9f006df8 <__x86.get_pc_thunk.cx+0x1be2>
9f006d8a:	75 6d                	jne    9f006df9 <__x86.get_pc_thunk.cx+0x1be3>
9f006d8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006d8f:	72 6c                	jb     9f006dfd <__x86.get_pc_thunk.cx+0x1be7>
9f006d91:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f006d93:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006d96:	72 6e                	jb     9f006e06 <__x86.get_pc_thunk.cx+0x1bf0>
9f006d98:	6c                   	ins    BYTE PTR es:[edi],dx
9f006d99:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f006d9b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006d9e:	72 6e                	jb     9f006e0e <__x86.get_pc_thunk.cx+0x1bf8>
9f006da0:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f006da3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006da6:	72 6e                	jb     9f006e16 <__x86.get_pc_thunk.cx+0x1c00>
9f006da8:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f006dab:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006dae:	72 74                	jb     9f006e24 <__x86.get_pc_thunk.cx+0x1c0e>
9f006db0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006db1:	75 6c                	jne    9f006e1f <__x86.get_pc_thunk.cx+0x1c09>
9f006db3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006db6:	72 6c                	jb     9f006e24 <__x86.get_pc_thunk.cx+0x1c0e>
9f006db8:	65 66 74 00          	gs data16 je 9f006dbc <__x86.get_pc_thunk.cx+0x1ba6>
9f006dbc:	73 74                	jae    9f006e32 <__x86.get_pc_thunk.cx+0x1c1c>
9f006dbe:	72 74                	jb     9f006e34 <__x86.get_pc_thunk.cx+0x1c1e>
9f006dc0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006dc1:	6c                   	ins    BYTE PTR es:[edi],dx
9f006dc2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006dc5:	72 74                	jb     9f006e3b <__x86.get_pc_thunk.cx+0x1c25>
9f006dc7:	72 69                	jb     9f006e32 <__x86.get_pc_thunk.cx+0x1c1c>
9f006dc9:	6d                   	ins    DWORD PTR es:[edi],dx
9f006dca:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006dcd:	72 72                	jb     9f006e41 <__x86.get_pc_thunk.cx+0x1c2b>
9f006dcf:	65 70 6c             	gs jo  9f006e3e <__x86.get_pc_thunk.cx+0x1c28>
9f006dd2:	61                   	popa   
9f006dd3:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f006dd6:	73 74                	jae    9f006e4c <__x86.get_pc_thunk.cx+0x1c36>
9f006dd8:	72 73                	jb     9f006e4d <__x86.get_pc_thunk.cx+0x1c37>
9f006dda:	74 72                	je     9f006e4e <__x86.get_pc_thunk.cx+0x1c38>
9f006ddc:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006de0:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
9f006de4:	67 65 74 74          	addr16 gs je 9f006e5c <__x86.get_pc_thunk.cx+0x1c46>
9f006de8:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f006def:	74 69                	je     9f006e5a <__x86.get_pc_thunk.cx+0x1c44>
9f006df1:	6d                   	ins    DWORD PTR es:[edi],dx
9f006df2:	65 5f                	gs pop edi
9f006df4:	72 00                	jb     9f006df6 <__x86.get_pc_thunk.cx+0x1be0>
9f006df6:	6c                   	ins    BYTE PTR es:[edi],dx
9f006df7:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006df8:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f006dfb:	74 69                	je     9f006e66 <__x86.get_pc_thunk.cx+0x1c50>
9f006dfd:	6d                   	ins    DWORD PTR es:[edi],dx
9f006dfe:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f006e03:	61                   	popa   
9f006e04:	6c                   	ins    BYTE PTR es:[edi],dx
9f006e05:	74 69                	je     9f006e70 <__x86.get_pc_thunk.cx+0x1c5a>
9f006e07:	6d                   	ins    DWORD PTR es:[edi],dx
9f006e08:	65 5f                	gs pop edi
9f006e0a:	72 00                	jb     9f006e0c <__x86.get_pc_thunk.cx+0x1bf6>
9f006e0c:	6d                   	ins    DWORD PTR es:[edi],dx
9f006e0d:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f006e12:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006e15:	74 74                	je     9f006e8b <__x86.get_pc_thunk.cx+0x1c75>
9f006e17:	69                   	.byte 0x69
9f006e18:	6d                   	ins    DWORD PTR es:[edi],dx
9f006e19:	65                   	gs
	...

Disassembly of section .gnu.hash:

9f006e1c <.gnu.hash>:
9f006e1c:	43                   	inc    ebx
9f006e1d:	00 00                	add    BYTE PTR [eax],al
9f006e1f:	00 01                	add    BYTE PTR [ecx],al
9f006e21:	00 00                	add    BYTE PTR [eax],al
9f006e23:	00 10                	add    BYTE PTR [eax],dl
9f006e25:	00 00                	add    BYTE PTR [eax],al
9f006e27:	00 09                	add    BYTE PTR [ecx],cl
9f006e29:	00 00                	add    BYTE PTR [eax],al
9f006e2b:	00 00                	add    BYTE PTR [eax],al
9f006e2d:	28 14 58             	sub    BYTE PTR [eax+ebx*2],dl
9f006e30:	3d 2c 09 9f 32       	cmp    eax,0x329f092c
9f006e35:	b8 01 dc 00 20       	mov    eax,0x2000dc01
9f006e3a:	04 41                	add    al,0x41
9f006e3c:	80 08 10             	or     BYTE PTR [eax],0x10
9f006e3f:	11 00                	adc    DWORD PTR [eax],eax
9f006e41:	42                   	inc    edx
9f006e42:	87 24 81             	xchg   DWORD PTR [ecx+eax*4],esp
9f006e45:	cc                   	int3   
9f006e46:	50                   	push   eax
9f006e47:	00 00                	add    BYTE PTR [eax],al
9f006e49:	b0 00                	mov    al,0x0
9f006e4b:	00 d2                	add    dl,dl
9f006e4d:	28 06                	sub    BYTE PTR [esi],al
9f006e4f:	20 81 31 40 a8 5a    	and    BYTE PTR [ecx+0x5aa84031],al
9f006e55:	3a 81 06 08 88 ed    	cmp    al,BYTE PTR [ecx-0x1277f7fa]
9f006e5b:	09 0a                	or     DWORD PTR [edx],ecx
9f006e5d:	10 01                	adc    BYTE PTR [ecx],al
9f006e5f:	25 00 04 68 c9       	and    eax,0xc9680400
9f006e64:	12 30                	adc    dh,BYTE PTR [eax]
9f006e66:	04 c8                	add    al,0xc8
9f006e68:	8d 02                	lea    eax,[edx]
9f006e6a:	53                   	push   ebx
9f006e6b:	00 01                	add    BYTE PTR [ecx],al
9f006e6d:	00 00                	add    BYTE PTR [eax],al
9f006e6f:	00 03                	add    BYTE PTR [ebx],al
9f006e71:	00 00                	add    BYTE PTR [eax],al
9f006e73:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f006e76:	00 00                	add    BYTE PTR [eax],al
9f006e78:	06                   	push   es
9f006e79:	00 00                	add    BYTE PTR [eax],al
9f006e7b:	00 07                	add    BYTE PTR [edi],al
9f006e7d:	00 00                	add    BYTE PTR [eax],al
9f006e7f:	00 00                	add    BYTE PTR [eax],al
9f006e81:	00 00                	add    BYTE PTR [eax],al
9f006e83:	00 09                	add    BYTE PTR [ecx],cl
9f006e85:	00 00                	add    BYTE PTR [eax],al
9f006e87:	00 00                	add    BYTE PTR [eax],al
9f006e89:	00 00                	add    BYTE PTR [eax],al
9f006e8b:	00 0a                	add    BYTE PTR [edx],cl
9f006e8d:	00 00                	add    BYTE PTR [eax],al
9f006e8f:	00 00                	add    BYTE PTR [eax],al
9f006e91:	00 00                	add    BYTE PTR [eax],al
9f006e93:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
9f006e96:	00 00                	add    BYTE PTR [eax],al
9f006e98:	00 00                	add    BYTE PTR [eax],al
9f006e9a:	00 00                	add    BYTE PTR [eax],al
9f006e9c:	0e                   	push   cs
9f006e9d:	00 00                	add    BYTE PTR [eax],al
9f006e9f:	00 0f                	add    BYTE PTR [edi],cl
9f006ea1:	00 00                	add    BYTE PTR [eax],al
9f006ea3:	00 11                	add    BYTE PTR [ecx],dl
9f006ea5:	00 00                	add    BYTE PTR [eax],al
9f006ea7:	00 12                	add    BYTE PTR [edx],dl
9f006ea9:	00 00                	add    BYTE PTR [eax],al
9f006eab:	00 13                	add    BYTE PTR [ebx],dl
9f006ead:	00 00                	add    BYTE PTR [eax],al
9f006eaf:	00 00                	add    BYTE PTR [eax],al
9f006eb1:	00 00                	add    BYTE PTR [eax],al
9f006eb3:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
9f006eb6:	00 00                	add    BYTE PTR [eax],al
9f006eb8:	16                   	push   ss
9f006eb9:	00 00                	add    BYTE PTR [eax],al
9f006ebb:	00 18                	add    BYTE PTR [eax],bl
9f006ebd:	00 00                	add    BYTE PTR [eax],al
9f006ebf:	00 19                	add    BYTE PTR [ecx],bl
9f006ec1:	00 00                	add    BYTE PTR [eax],al
9f006ec3:	00 1b                	add    BYTE PTR [ebx],bl
9f006ec5:	00 00                	add    BYTE PTR [eax],al
9f006ec7:	00 1d 00 00 00 20    	add    BYTE PTR ds:0x20000000,bl
9f006ecd:	00 00                	add    BYTE PTR [eax],al
9f006ecf:	00 21                	add    BYTE PTR [ecx],ah
9f006ed1:	00 00                	add    BYTE PTR [eax],al
9f006ed3:	00 00                	add    BYTE PTR [eax],al
9f006ed5:	00 00                	add    BYTE PTR [eax],al
9f006ed7:	00 22                	add    BYTE PTR [edx],ah
9f006ed9:	00 00                	add    BYTE PTR [eax],al
9f006edb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006ede:	00 00                	add    BYTE PTR [eax],al
9f006ee0:	25 00 00 00 27       	and    eax,0x27000000
9f006ee5:	00 00                	add    BYTE PTR [eax],al
9f006ee7:	00 28                	add    BYTE PTR [eax],ch
9f006ee9:	00 00                	add    BYTE PTR [eax],al
9f006eeb:	00 2b                	add    BYTE PTR [ebx],ch
9f006eed:	00 00                	add    BYTE PTR [eax],al
9f006eef:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f006ef2:	00 00                	add    BYTE PTR [eax],al
9f006ef4:	00 00                	add    BYTE PTR [eax],al
9f006ef6:	00 00                	add    BYTE PTR [eax],al
9f006ef8:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f006efb:	00 32                	add    BYTE PTR [edx],dh
9f006efd:	00 00                	add    BYTE PTR [eax],al
9f006eff:	00 33                	add    BYTE PTR [ebx],dh
9f006f01:	00 00                	add    BYTE PTR [eax],al
9f006f03:	00 36                	add    BYTE PTR [esi],dh
9f006f05:	00 00                	add    BYTE PTR [eax],al
9f006f07:	00 00                	add    BYTE PTR [eax],al
9f006f09:	00 00                	add    BYTE PTR [eax],al
9f006f0b:	00 38                	add    BYTE PTR [eax],bh
	...
9f006f15:	00 00                	add    BYTE PTR [eax],al
9f006f17:	00 39                	add    BYTE PTR [ecx],bh
9f006f19:	00 00                	add    BYTE PTR [eax],al
9f006f1b:	00 00                	add    BYTE PTR [eax],al
9f006f1d:	00 00                	add    BYTE PTR [eax],al
9f006f1f:	00 3b                	add    BYTE PTR [ebx],bh
9f006f21:	00 00                	add    BYTE PTR [eax],al
9f006f23:	00 00                	add    BYTE PTR [eax],al
9f006f25:	00 00                	add    BYTE PTR [eax],al
9f006f27:	00 3c 00             	add    BYTE PTR [eax+eax*1],bh
9f006f2a:	00 00                	add    BYTE PTR [eax],al
9f006f2c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f006f2f:	00 3f                	add    BYTE PTR [edi],bh
9f006f31:	00 00                	add    BYTE PTR [eax],al
9f006f33:	00 41 00             	add    BYTE PTR [ecx+0x0],al
9f006f36:	00 00                	add    BYTE PTR [eax],al
9f006f38:	43                   	inc    ebx
	...
9f006f41:	00 00                	add    BYTE PTR [eax],al
9f006f43:	00 45 00             	add    BYTE PTR [ebp+0x0],al
9f006f46:	00 00                	add    BYTE PTR [eax],al
9f006f48:	46                   	inc    esi
9f006f49:	00 00                	add    BYTE PTR [eax],al
9f006f4b:	00 48 00             	add    BYTE PTR [eax+0x0],cl
9f006f4e:	00 00                	add    BYTE PTR [eax],al
9f006f50:	4a                   	dec    edx
9f006f51:	00 00                	add    BYTE PTR [eax],al
9f006f53:	00 4b 00             	add    BYTE PTR [ebx+0x0],cl
9f006f56:	00 00                	add    BYTE PTR [eax],al
9f006f58:	4e                   	dec    esi
9f006f59:	00 00                	add    BYTE PTR [eax],al
9f006f5b:	00 4f 00             	add    BYTE PTR [edi+0x0],cl
9f006f5e:	00 00                	add    BYTE PTR [eax],al
9f006f60:	50                   	push   eax
9f006f61:	00 00                	add    BYTE PTR [eax],al
9f006f63:	00 00                	add    BYTE PTR [eax],al
9f006f65:	00 00                	add    BYTE PTR [eax],al
9f006f67:	00 51 00             	add    BYTE PTR [ecx+0x0],dl
9f006f6a:	00 00                	add    BYTE PTR [eax],al
9f006f6c:	53                   	push   ebx
9f006f6d:	00 00                	add    BYTE PTR [eax],al
9f006f6f:	00 55 00             	add    BYTE PTR [ebp+0x0],dl
9f006f72:	00 00                	add    BYTE PTR [eax],al
9f006f74:	57                   	push   edi
9f006f75:	00 00                	add    BYTE PTR [eax],al
9f006f77:	00 98 47 97 7c e9    	add    BYTE PTR [eax-0x168368b9],bl
9f006f7d:	0f 84 d5 c1 e5 95    	je     34e63158 <sysEnter_Vector+0x34d33158>
9f006f83:	7c 6c                	jl     9f006ff1 <__x86.get_pc_thunk.cx+0x1ddb>
9f006f85:	70 06                	jo     9f006f8d <__x86.get_pc_thunk.cx+0x1d77>
9f006f87:	af                   	scas   eax,DWORD PTR es:[edi]
9f006f88:	31 20                	xor    DWORD PTR [eax],esp
9f006f8a:	fe 0f                	dec    BYTE PTR [edi]
9f006f8c:	df ff                	(bad)  
9f006f8e:	72 9b                	jb     9f006f2b <__x86.get_pc_thunk.cx+0x1d15>
9f006f90:	c4 5b 87             	les    ebx,FWORD PTR [ebx-0x79]
9f006f93:	ff 77 e5             	push   DWORD PTR [edi-0x1b]
9f006f96:	96                   	xchg   esi,eax
9f006f97:	7c 41                	jl     9f006fda <__x86.get_pc_thunk.cx+0x1dc4>
9f006f99:	57                   	push   edi
9f006f9a:	61                   	popa   
9f006f9b:	5c                   	pop    esp
9f006f9c:	cc                   	int3   
9f006f9d:	3f                   	aas    
9f006f9e:	0c af                	or     al,0xaf
9f006fa0:	cf                   	iret   
9f006fa1:	40                   	inc    eax
9f006fa2:	85 1b                	test   DWORD PTR [ebx],ebx
9f006fa4:	3c ad                	cmp    al,0xad
9f006fa6:	39 0d 5b c9 0f af    	cmp    DWORD PTR ds:0xaf0fc95b,ecx
9f006fac:	01 7b 9c             	add    DWORD PTR [ebx-0x64],edi
9f006faf:	7c 72                	jl     9f007023 <__x86.get_pc_thunk.cx+0x1e0d>
9f006fb1:	47                   	inc    edi
9f006fb2:	9c                   	pushf  
9f006fb3:	7c 51                	jl     9f007006 <__x86.get_pc_thunk.cx+0x1df0>
9f006fb5:	b5 a8                	mov    ch,0xa8
9f006fb7:	10 95 78 9e 7c 15    	adc    BYTE PTR [ebp+0x157c9e78],dl
9f006fbd:	9a 7b f0 f5 21 04 39 	call   0x3904:0x21f5f07b
9f006fc4:	12 09                	adc    cl,BYTE PTR [ecx]
9f006fc6:	2a 10                	sub    dl,BYTE PTR [eax]
9f006fc8:	45                   	inc    ebp
9f006fc9:	3e 0c af             	ds or  al,0xaf
9f006fcc:	22 be 0f af bf 27    	and    bh,BYTE PTR [esi+0x27bfaf0f]
9f006fd2:	15 36 9d 56 73       	adc    eax,0x73569d36
9f006fd7:	44                   	inc    esp
9f006fd8:	90                   	nop
9f006fd9:	75 82                	jne    9f006f5d <__x86.get_pc_thunk.cx+0x1d47>
9f006fdb:	0d 77 d7 9b 7c       	or     eax,0x7c9bd777
9f006fe0:	5e                   	pop    esi
9f006fe1:	96                   	xchg   esi,eax
9f006fe2:	93                   	xchg   ebx,eax
9f006fe3:	1c 87                	sbb    al,0x87
9f006fe5:	f0 96                	lock xchg esi,eax
9f006fe7:	7c 74                	jl     9f00705d <__x86.get_pc_thunk.cx+0x1e47>
9f006fe9:	b7 f4                	mov    bh,0xf4
9f006feb:	c4 1c f8             	les    ebx,FWORD PTR [eax+edi*8]
9f006fee:	84 1b                	test   BYTE PTR [ebx],bl
9f006ff0:	4b                   	dec    ebx
9f006ff1:	33 66 0f             	xor    esp,DWORD PTR [esi+0xf]
9f006ff4:	4d                   	dec    ebp
9f006ff5:	33 66 0f             	xor    esp,DWORD PTR [esi+0xf]
9f006ff8:	b7 2b                	mov    bh,0x2b
9f006ffa:	6b 15 b8 2b 6b 15 5d 	imul   edx,DWORD PTR ds:0x156b2bb8,0x5d
9f007001:	ca 0c cb             	retf   0xcb0c
9f007004:	11 7b 9c             	adc    DWORD PTR [ebx-0x64],edi
9f007007:	7c b2                	jl     9f006fbb <__x86.get_pc_thunk.cx+0x1da5>
9f007009:	62 73 3f             	bound  esi,QWORD PTR [ebx+0x3f]
9f00700c:	0b 65 0c             	or     esp,DWORD PTR [ebp+0xc]
9f00700f:	af                   	scas   eax,DWORD PTR es:[edi]
9f007010:	ab                   	stos   DWORD PTR es:[edi],eax
9f007011:	7d 96                	jge    9f006fa9 <__x86.get_pc_thunk.cx+0x1d93>
9f007013:	7c 1e                	jl     9f007033 <__x86.get_pc_thunk.cx+0x1e1d>
9f007015:	f6 5c 10 3a          	neg    BYTE PTR [eax+edx*1+0x3a]
9f007019:	48                   	dec    eax
9f00701a:	85 1b                	test   DWORD PTR [ebx],ebx
9f00701c:	51                   	push   ecx
9f00701d:	9e                   	sahf   
9f00701e:	cf                   	iret   
9f00701f:	8e d7                	mov    ss,edi
9f007021:	94                   	xchg   esp,eax
9f007022:	93                   	xchg   ebx,eax
9f007023:	1c 42                	sbb    al,0x42
9f007025:	59                   	pop    ecx
9f007026:	87 ff                	xchg   edi,edi
9f007028:	a9 2e 0b af 38       	test   eax,0x38af0b2e
9f00702d:	c4                   	(bad)  
9f00702e:	fb                   	sti    
9f00702f:	66 12 0d 49 63 40 4d 	data16 adc cl,BYTE PTR ds:0x4d406349
9f007036:	9d                   	popf   
9f007037:	7c 13                	jl     9f00704c <__x86.get_pc_thunk.cx+0x1e36>
9f007039:	7c 06                	jl     9f007041 <__x86.get_pc_thunk.cx+0x1e2b>
9f00703b:	af                   	scas   eax,DWORD PTR es:[edi]
9f00703c:	21 01                	and    DWORD PTR [ecx],eax
9f00703e:	64 23 4c f8 f2       	and    ecx,DWORD PTR fs:[eax+edi*8-0xe]
9f007043:	0d de b7 80 bf       	or     eax,0xbf80b7de
9f007048:	ed                   	in     eax,dx
9f007049:	de 93 1c 32 76 e0    	ficom  WORD PTR [ebx-0x1f89cde4]
9f00704f:	d5 ed                	aad    0xed
9f007051:	de 93 1c 15 56 bd    	ficom  WORD PTR [ebx-0x42a9eae4]
9f007057:	7a c6                	jp     9f00701f <__x86.get_pc_thunk.cx+0x1e09>
9f007059:	0e                   	push   cs
9f00705a:	e0 3d                	loopne 9f007099 <__x86.get_pc_thunk.cx+0x1e83>
9f00705c:	9d                   	popf   
9f00705d:	bb 93 1c 3f 7e       	mov    ebx,0x7e3f1c93
9f007062:	96                   	xchg   esi,eax
9f007063:	7c 3e                	jl     9f0070a3 <__x86.get_pc_thunk.cx+0x1e8d>
9f007065:	99                   	cdq    
9f007066:	81 bf 5b c2 50 3f 5b 	cmp    DWORD PTR [edi+0x3f50c25b],0xf3b9a5b
9f00706d:	9a 3b 0f 
9f007070:	38 40 0c             	cmp    BYTE PTR [eax+0xc],al
9f007073:	af                   	scas   eax,DWORD PTR es:[edi]
9f007074:	2d 37 77 f0 42       	sub    eax,0x42f07737
9f007079:	b3 ee                	mov    bl,0xee
9f00707b:	ff 27                	jmp    DWORD PTR [edi]
9f00707d:	51                   	push   ecx
9f00707e:	19 69 f0             	sbb    DWORD PTR [ecx-0x10],ebp
9f007081:	45                   	inc    ebp
9f007082:	5f                   	pop    edi
9f007083:	10 d5                	adc    ch,dl
9f007085:	5c                   	pop    esp
9f007086:	c2 c0 77             	ret    0x77c0
9f007089:	67 9e                	addr16 sahf 
9f00708b:	7c 72                	jl     9f0070ff <__x86.get_pc_thunk.cx+0x1ee9>
9f00708d:	9f                   	lahf   
9f00708e:	98                   	cwde   
9f00708f:	7c 2b                	jl     9f0070bc <__x86.get_pc_thunk.cx+0x1ea6>
9f007091:	46                   	inc    esi
9f007092:	63 ac ae 60 87 ff f7 	arpl   WORD PTR [esi+ebp*4-0x80078a0],bp
9f007099:	23 ce                	and    ecx,esi
9f00709b:	20 2b                	and    BYTE PTR [ebx],ch
9f00709d:	8a 42 90             	mov    al,BYTE PTR [edx-0x70]
9f0070a0:	70 b1                	jo     9f007053 <__x86.get_pc_thunk.cx+0x1e3d>
9f0070a2:	9a 7c 56 db 93 1c 0d 	call   0xd1c:0x93db567c
9f0070a9:	a3 6f 0b 31 b8       	mov    ds:0xb8310b6f,eax
9f0070ae:	82 0d bb 95 93 1c e3 	or     BYTE PTR ds:0x1c9395bb,0xe3
9f0070b5:	41                   	inc    ecx
9f0070b6:	72 f0                	jb     9f0070a8 <__x86.get_pc_thunk.cx+0x1e92>
9f0070b8:	ca 96 93             	retf   0x9396
9f0070bb:	1c 81                	sbb    al,0x81
9f0070bd:	19 9e 7c ba 3a 1b    	sbb    DWORD PTR [esi+0x1b3aba7c],ebx
9f0070c3:	3c 73                	cmp    al,0x73
9f0070c5:	3c 94                	cmp    al,0x94
9f0070c7:	7c 2c                	jl     9f0070f5 <__x86.get_pc_thunk.cx+0x1edf>
9f0070c9:	da 9d 7c 0b 0f b5    	ficomp DWORD PTR [ebp-0x4af0f484]
9f0070cf:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0070d0:	57                   	push   edi
9f0070d1:	d3 03                	rol    DWORD PTR [ebx],cl
9f0070d3:	b6                   	.byte 0xb6

Disassembly of section .note.gnu.property:

9f0070d4 <.note.gnu.property>:
9f0070d4:	04 00                	add    al,0x0
9f0070d6:	00 00                	add    BYTE PTR [eax],al
9f0070d8:	0c 00                	or     al,0x0
9f0070da:	00 00                	add    BYTE PTR [eax],al
9f0070dc:	05 00 00 00 47       	add    eax,0x47000000
9f0070e1:	4e                   	dec    esi
9f0070e2:	55                   	push   ebp
9f0070e3:	00 02                	add    BYTE PTR [edx],al
9f0070e5:	00 00                	add    BYTE PTR [eax],al
9f0070e7:	c0 04 00 00          	rol    BYTE PTR [eax+eax*1],0x0
9f0070eb:	00 03                	add    BYTE PTR [ebx],al
9f0070ed:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .note.gnu.build-id:

9f0070f0 <.note.gnu.build-id>:
9f0070f0:	04 00                	add    al,0x0
9f0070f2:	00 00                	add    BYTE PTR [eax],al
9f0070f4:	14 00                	adc    al,0x0
9f0070f6:	00 00                	add    BYTE PTR [eax],al
9f0070f8:	03 00                	add    eax,DWORD PTR [eax]
9f0070fa:	00 00                	add    BYTE PTR [eax],al
9f0070fc:	47                   	inc    edi
9f0070fd:	4e                   	dec    esi
9f0070fe:	55                   	push   ebp
9f0070ff:	00 bd 9b 99 35 cf    	add    BYTE PTR [ebp-0x30ca6665],bh
9f007105:	07                   	pop    es
9f007106:	c3                   	ret    
9f007107:	00 2c 4c             	add    BYTE PTR [esp+ecx*2],ch
9f00710a:	94                   	xchg   esp,eax
9f00710b:	d6                   	(bad)  
9f00710c:	8f                   	(bad)  
9f00710d:	4d                   	dec    ebp
9f00710e:	fb                   	sti    
9f00710f:	96                   	xchg   esi,eax
9f007110:	b9                   	.byte 0xb9
9f007111:	e6 57                	out    0x57,al
9f007113:	d2                   	.byte 0xd2

Disassembly of section .eh_frame_hdr:

9f007114 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f007114:	01 1b                	add    DWORD PTR [ebx],ebx
9f007116:	03 3b                	add    edi,DWORD PTR [ebx]
9f007118:	04 e1                	add    al,0xe1
9f00711a:	ff                   	(bad)  
9f00711b:	ff 91 00 00 00 ec    	call   DWORD PTR [ecx-0x14000000]
9f007121:	8e ff                	mov    ?,edi
9f007123:	ff 20                	jmp    DWORD PTR [eax]
9f007125:	e1 ff                	loope  9f007126 <__GNU_EH_FRAME_HDR+0x12>
9f007127:	ff 28                	jmp    FWORD PTR [eax]
9f007129:	8f                   	(bad)  
9f00712a:	ff                   	(bad)  
9f00712b:	ff 40 e1             	inc    DWORD PTR [eax-0x1f]
9f00712e:	ff                   	(bad)  
9f00712f:	ff 64 8f ff          	jmp    DWORD PTR [edi+ecx*4-0x1]
9f007133:	ff 74 e1 ff          	push   DWORD PTR [ecx+eiz*8-0x1]
9f007137:	ff b7 8f ff ff 9c    	push   DWORD PTR [edi-0x63000071]
9f00713d:	e1 ff                	loope  9f00713e <__GNU_EH_FRAME_HDR+0x2a>
9f00713f:	ff 0a                	dec    DWORD PTR [edx]
9f007141:	90                   	nop
9f007142:	ff                   	(bad)  
9f007143:	ff c4                	inc    esp
9f007145:	e1 ff                	loope  9f007146 <__GNU_EH_FRAME_HDR+0x32>
9f007147:	ff a5 90 ff ff ec    	jmp    DWORD PTR [ebp-0x13000070]
9f00714d:	e1 ff                	loope  9f00714e <__GNU_EH_FRAME_HDR+0x3a>
9f00714f:	ff 40 91             	inc    DWORD PTR [eax-0x6f]
9f007152:	ff                   	(bad)  
9f007153:	ff 28                	jmp    FWORD PTR [eax]
9f007155:	e2 ff                	loop   9f007156 <__GNU_EH_FRAME_HDR+0x42>
9f007157:	ff                   	(bad)  
9f007158:	bc 91 ff ff 4c       	mov    esp,0x4cffff91
9f00715d:	e2 ff                	loop   9f00715e <__GNU_EH_FRAME_HDR+0x4a>
9f00715f:	ff                   	(bad)  
9f007160:	78 92                	js     9f0070f4 <__x86.get_pc_thunk.cx+0x1ede>
9f007162:	ff                   	(bad)  
9f007163:	ff 6c e2 ff          	jmp    FWORD PTR [edx+eiz*8-0x1]
9f007167:	ff 36                	push   DWORD PTR [esi]
9f007169:	93                   	xchg   ebx,eax
9f00716a:	ff                   	(bad)  
9f00716b:	ff 8c e2 ff ff 96 93 	dec    DWORD PTR [edx+eiz*8-0x6c690001]
9f007172:	ff                   	(bad)  
9f007173:	ff ac e2 ff ff b4 93 	jmp    FWORD PTR [edx+eiz*8-0x6c4b0001]
9f00717a:	ff                   	(bad)  
9f00717b:	ff cc                	dec    esp
9f00717d:	e2 ff                	loop   9f00717e <__GNU_EH_FRAME_HDR+0x6a>
9f00717f:	ff 72 94             	push   DWORD PTR [edx-0x6c]
9f007182:	ff                   	(bad)  
9f007183:	ff f0                	push   eax
9f007185:	e2 ff                	loop   9f007186 <__GNU_EH_FRAME_HDR+0x72>
9f007187:	ff d0                	call   eax
9f007189:	94                   	xchg   esp,eax
9f00718a:	ff                   	(bad)  
9f00718b:	ff 14 e3             	call   DWORD PTR [ebx+eiz*8]
9f00718e:	ff                   	(bad)  
9f00718f:	ff 2e                	jmp    FWORD PTR [esi]
9f007191:	95                   	xchg   ebp,eax
9f007192:	ff                   	(bad)  
9f007193:	ff                   	(bad)  
9f007194:	38 e3                	cmp    bl,ah
9f007196:	ff                   	(bad)  
9f007197:	ff d6                	call   esi
9f007199:	95                   	xchg   ebp,eax
9f00719a:	ff                   	(bad)  
9f00719b:	ff 5c e3 ff          	call   FWORD PTR [ebx+eiz*8-0x1]
9f00719f:	ff                   	(bad)  
9f0071a0:	fd                   	std    
9f0071a1:	95                   	xchg   ebp,eax
9f0071a2:	ff                   	(bad)  
9f0071a3:	ff                   	(bad)  
9f0071a4:	7c e3                	jl     9f007189 <__GNU_EH_FRAME_HDR+0x75>
9f0071a6:	ff                   	(bad)  
9f0071a7:	ff c2                	inc    edx
9f0071a9:	97                   	xchg   edi,eax
9f0071aa:	ff                   	(bad)  
9f0071ab:	ff a0 e3 ff ff f2    	jmp    DWORD PTR [eax-0xd00001d]
9f0071b1:	97                   	xchg   edi,eax
9f0071b2:	ff                   	(bad)  
9f0071b3:	ff c4                	inc    esp
9f0071b5:	e3 ff                	jecxz  9f0071b6 <__GNU_EH_FRAME_HDR+0xa2>
9f0071b7:	ff 19                	call   FWORD PTR [ecx]
9f0071b9:	98                   	cwde   
9f0071ba:	ff                   	(bad)  
9f0071bb:	ff e4                	jmp    esp
9f0071bd:	e3 ff                	jecxz  9f0071be <__GNU_EH_FRAME_HDR+0xaa>
9f0071bf:	ff 4e 98             	dec    DWORD PTR [esi-0x68]
9f0071c2:	ff                   	(bad)  
9f0071c3:	ff 08                	dec    DWORD PTR [eax]
9f0071c5:	e4 ff                	in     al,0xff
9f0071c7:	ff                   	(bad)  
9f0071c8:	78 98                	js     9f007162 <__GNU_EH_FRAME_HDR+0x4e>
9f0071ca:	ff                   	(bad)  
9f0071cb:	ff 28                	jmp    FWORD PTR [eax]
9f0071cd:	e4 ff                	in     al,0xff
9f0071cf:	ff a8 98 ff ff 4c    	jmp    FWORD PTR [eax+0x4cffff98]
9f0071d5:	e4 ff                	in     al,0xff
9f0071d7:	ff cf                	dec    edi
9f0071d9:	98                   	cwde   
9f0071da:	ff                   	(bad)  
9f0071db:	ff 6c e4 ff          	jmp    FWORD PTR [esp+eiz*8-0x1]
9f0071df:	ff 2c 99             	jmp    FWORD PTR [ecx+ebx*4]
9f0071e2:	ff                   	(bad)  
9f0071e3:	ff 90 e4 ff ff c1    	call   DWORD PTR [eax-0x3e00001c]
9f0071e9:	99                   	cdq    
9f0071ea:	ff                   	(bad)  
9f0071eb:	ff                   	(bad)  
9f0071ec:	b8 e4 ff ff ef       	mov    eax,0xefffffe4
9f0071f1:	99                   	cdq    
9f0071f2:	ff                   	(bad)  
9f0071f3:	ff                   	(bad)  
9f0071f4:	dc e4                	fsubr  st(4),st
9f0071f6:	ff                   	(bad)  
9f0071f7:	ff 13                	call   DWORD PTR [ebx]
9f0071f9:	9a ff ff fc e4 ff ff 	call   0xffff:0xe4fcffff
9f007200:	4c                   	dec    esp
9f007201:	9a ff ff 24 e5 ff ff 	call   0xffff:0xe524ffff
9f007208:	76 9a                	jbe    9f0071a4 <__GNU_EH_FRAME_HDR+0x90>
9f00720a:	ff                   	(bad)  
9f00720b:	ff 44 e5 ff          	inc    DWORD PTR [ebp+eiz*8-0x1]
9f00720f:	ff af 9a ff ff 6c    	jmp    FWORD PTR [edi+0x6cffff9a]
9f007215:	e5 ff                	in     eax,0xff
9f007217:	ff                   	(bad)  
9f007218:	d9 9a ff ff 8c e5    	fstp   DWORD PTR [edx-0x1a730001]
9f00721e:	ff                   	(bad)  
9f00721f:	ff 0b                	dec    DWORD PTR [ebx]
9f007221:	9b                   	fwait
9f007222:	ff                   	(bad)  
9f007223:	ff b0 e5 ff ff 35    	push   DWORD PTR [eax+0x35ffffe5]
9f007229:	9b                   	fwait
9f00722a:	ff                   	(bad)  
9f00722b:	ff d0                	call   eax
9f00722d:	e5 ff                	in     eax,0xff
9f00722f:	ff 66 9b             	jmp    DWORD PTR [esi-0x65]
9f007232:	ff                   	(bad)  
9f007233:	ff f4                	push   esp
9f007235:	e5 ff                	in     eax,0xff
9f007237:	ff 8d 9b ff ff 14    	dec    DWORD PTR [ebp+0x14ffff9b]
9f00723d:	e6 ff                	out    0xff,al
9f00723f:	ff b2 9e ff ff 38    	push   DWORD PTR [edx+0x38ffff9e]
9f007245:	e6 ff                	out    0xff,al
9f007247:	ff                   	(bad)  
9f007248:	df 9e ff ff 5c e6    	fistp  WORD PTR [esi-0x19a30001]
9f00724e:	ff                   	(bad)  
9f00724f:	ff 03                	inc    DWORD PTR [ebx]
9f007251:	9f                   	lahf   
9f007252:	ff                   	(bad)  
9f007253:	ff                   	(bad)  
9f007254:	7c e6                	jl     9f00723c <__GNU_EH_FRAME_HDR+0x128>
9f007256:	ff                   	(bad)  
9f007257:	ff b1 a0 ff ff a0    	push   DWORD PTR [ecx-0x5f000060]
9f00725d:	e6 ff                	out    0xff,al
9f00725f:	ff                   	(bad)  
9f007260:	db a0 ff ff c0 e6    	(bad)  [eax-0x193f0001]
9f007266:	ff                   	(bad)  
9f007267:	ff 08                	dec    DWORD PTR [eax]
9f007269:	a1 ff ff e4 e6       	mov    eax,ds:0xe6e4ffff
9f00726e:	ff                   	(bad)  
9f00726f:	ff 32                	push   DWORD PTR [edx]
9f007271:	a1 ff ff 08 e7       	mov    eax,ds:0xe708ffff
9f007276:	ff                   	(bad)  
9f007277:	ff                   	(bad)  
9f007278:	79 a1                	jns    9f00721b <__GNU_EH_FRAME_HDR+0x107>
9f00727a:	ff                   	(bad)  
9f00727b:	ff 2c e7             	jmp    FWORD PTR [edi+eiz*8]
9f00727e:	ff                   	(bad)  
9f00727f:	ff c0                	inc    eax
9f007281:	a1 ff ff 50 e7       	mov    eax,ds:0xe750ffff
9f007286:	ff                   	(bad)  
9f007287:	ff 81 a2 ff ff 74    	inc    DWORD PTR [ecx+0x74ffffa2]
9f00728d:	e7 ff                	out    0xff,eax
9f00728f:	ff                   	(bad)  
9f007290:	bf a2 ff ff 9c       	mov    edi,0x9cffffa2
9f007295:	e7 ff                	out    0xff,eax
9f007297:	ff                   	(bad)  
9f007298:	ff a2 ff ff c4 e7    	jmp    DWORD PTR [edx-0x183b0001]
9f00729e:	ff                   	(bad)  
9f00729f:	ff 41 a3             	inc    DWORD PTR [ecx-0x5d]
9f0072a2:	ff                   	(bad)  
9f0072a3:	ff                   	(bad)  
9f0072a4:	ec                   	in     al,dx
9f0072a5:	e7 ff                	out    0xff,eax
9f0072a7:	ff 85 a3 ff ff 14    	inc    DWORD PTR [ebp+0x14ffffa3]
9f0072ad:	e8 ff ff cb a3       	call   42cc72b1 <sysEnter_Vector+0x42b972b1>
9f0072b2:	ff                   	(bad)  
9f0072b3:	ff                   	(bad)  
9f0072b4:	3c e8                	cmp    al,0xe8
9f0072b6:	ff                   	(bad)  
9f0072b7:	ff 98 a4 ff ff 60    	call   FWORD PTR [eax+0x60ffffa4]
9f0072bd:	e8 ff ff bf a4       	call   43c072c1 <sysEnter_Vector+0x43ad72c1>
9f0072c2:	ff                   	(bad)  
9f0072c3:	ff 84 e8 ff ff 1c a5 	inc    DWORD PTR [eax+ebp*8-0x5ae30001]
9f0072ca:	ff                   	(bad)  
9f0072cb:	ff a8 e8 ff ff 74    	jmp    FWORD PTR [eax+0x74ffffe8]
9f0072d1:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0072d2:	ff                   	(bad)  
9f0072d3:	ff cc                	dec    esp
9f0072d5:	e8 ff ff cc a5       	call   44cd72d9 <sysEnter_Vector+0x44ba72d9>
9f0072da:	ff                   	(bad)  
9f0072db:	ff f0                	push   eax
9f0072dd:	e8 ff ff 04 a6       	call   450572e1 <sysEnter_Vector+0x44f272e1>
9f0072e2:	ff                   	(bad)  
9f0072e3:	ff 10                	call   DWORD PTR [eax]
9f0072e5:	e9 ff ff 3f a6       	jmp    454072e9 <sysEnter_Vector+0x452d72e9>
9f0072ea:	ff                   	(bad)  
9f0072eb:	ff 30                	push   DWORD PTR [eax]
9f0072ed:	e9 ff ff 7a a6       	jmp    457b72f1 <sysEnter_Vector+0x456872f1>
9f0072f2:	ff                   	(bad)  
9f0072f3:	ff 50 e9             	call   DWORD PTR [eax-0x17]
9f0072f6:	ff                   	(bad)  
9f0072f7:	ff 06                	inc    DWORD PTR [esi]
9f0072f9:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f0072fa:	ff                   	(bad)  
9f0072fb:	ff                   	(bad)  
9f0072fc:	78 e9                	js     9f0072e7 <__GNU_EH_FRAME_HDR+0x1d3>
9f0072fe:	ff                   	(bad)  
9f0072ff:	ff                   	(bad)  
9f007300:	7a a7                	jp     9f0072a9 <__GNU_EH_FRAME_HDR+0x195>
9f007302:	ff                   	(bad)  
9f007303:	ff a0 e9 ff ff ee    	jmp    DWORD PTR [eax-0x11000017]
9f007309:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f00730a:	ff                   	(bad)  
9f00730b:	ff c8                	dec    eax
9f00730d:	e9 ff ff 0f a8       	jmp    47107311 <sysEnter_Vector+0x46fd7311>
9f007312:	ff                   	(bad)  
9f007313:	ff                   	(bad)  
9f007314:	e8 e9 ff ff 3c       	call   dc007302 <tmbuf+0x3cfff322>
9f007319:	a8 ff                	test   al,0xff
9f00731b:	ff 08                	dec    DWORD PTR [eax]
9f00731d:	ea ff ff 63 a8 ff ff 	jmp    0xffff:0xa863ffff
9f007324:	28 ea                	sub    dl,ch
9f007326:	ff                   	(bad)  
9f007327:	ff b3 a8 ff ff 48    	push   DWORD PTR [ebx+0x48ffffa8]
9f00732d:	ea ff ff a1 aa ff ff 	jmp    0xffff:0xaaa1ffff
9f007334:	6c                   	ins    BYTE PTR es:[edi],dx
9f007335:	ea ff ff f4 aa ff ff 	jmp    0xffff:0xaaf4ffff
9f00733c:	8c ea                	mov    edx,gs
9f00733e:	ff                   	(bad)  
9f00733f:	ff 14 ab             	call   DWORD PTR [ebx+ebp*4]
9f007342:	ff                   	(bad)  
9f007343:	ff ac ea ff ff 38 ab 	jmp    FWORD PTR [edx+ebp*8-0x54c70001]
9f00734a:	ff                   	(bad)  
9f00734b:	ff cc                	dec    esp
9f00734d:	ea ff ff 5c ab ff ff 	jmp    0xffff:0xab5cffff
9f007354:	ec                   	in     al,dx
9f007355:	ea ff ff ae ac ff ff 	jmp    0xffff:0xacaeffff
9f00735c:	0c eb                	or     al,0xeb
9f00735e:	ff                   	(bad)  
9f00735f:	ff d2                	call   edx
9f007361:	ac                   	lods   al,BYTE PTR ds:[esi]
9f007362:	ff                   	(bad)  
9f007363:	ff 2c eb             	jmp    FWORD PTR [ebx+ebp*8]
9f007366:	ff                   	(bad)  
9f007367:	ff c0                	inc    eax
9f007369:	af                   	scas   eax,DWORD PTR es:[edi]
9f00736a:	ff                   	(bad)  
9f00736b:	ff 58 eb             	call   FWORD PTR [eax-0x15]
9f00736e:	ff                   	(bad)  
9f00736f:	ff e7                	jmp    edi
9f007371:	af                   	scas   eax,DWORD PTR es:[edi]
9f007372:	ff                   	(bad)  
9f007373:	ff                   	(bad)  
9f007374:	78 eb                	js     9f007361 <__GNU_EH_FRAME_HDR+0x24d>
9f007376:	ff                   	(bad)  
9f007377:	ff 0e                	dec    DWORD PTR [esi]
9f007379:	b0 ff                	mov    al,0xff
9f00737b:	ff 98 eb ff ff 2f    	call   FWORD PTR [eax+0x2fffffeb]
9f007381:	b0 ff                	mov    al,0xff
9f007383:	ff                   	(bad)  
9f007384:	b8 eb ff ff 53       	mov    eax,0x53ffffeb
9f007389:	b0 ff                	mov    al,0xff
9f00738b:	ff                   	(bad)  
9f00738c:	d8 eb                	fsubr  st,st(3)
9f00738e:	ff                   	(bad)  
9f00738f:	ff ca                	dec    edx
9f007391:	b0 ff                	mov    al,0xff
9f007393:	ff                   	(bad)  
9f007394:	fc                   	cld    
9f007395:	eb ff                	jmp    9f007396 <__GNU_EH_FRAME_HDR+0x282>
9f007397:	ff 2e                	jmp    FWORD PTR [esi]
9f007399:	b1 ff                	mov    cl,0xff
9f00739b:	ff 20                	jmp    DWORD PTR [eax]
9f00739d:	ec                   	in     al,dx
9f00739e:	ff                   	(bad)  
9f00739f:	ff                   	(bad)  
9f0073a0:	b9 b1 ff ff 40       	mov    ecx,0x40ffffb1
9f0073a5:	ec                   	in     al,dx
9f0073a6:	ff                   	(bad)  
9f0073a7:	ff 30                	push   DWORD PTR [eax]
9f0073a9:	b2 ff                	mov    dl,0xff
9f0073ab:	ff 64 ec ff          	jmp    DWORD PTR [esp+ebp*8-0x1]
9f0073af:	ff                   	(bad)  
9f0073b0:	b8 b2 ff ff 84       	mov    eax,0x84ffffb2
9f0073b5:	ec                   	in     al,dx
9f0073b6:	ff                   	(bad)  
9f0073b7:	ff 47 b3             	inc    DWORD PTR [edi-0x4d]
9f0073ba:	ff                   	(bad)  
9f0073bb:	ff a8 ec ff ff 0b    	jmp    FWORD PTR [eax+0xbffffec]
9f0073c1:	b6 ff                	mov    dh,0xff
9f0073c3:	ff cc                	dec    esp
9f0073c5:	ec                   	in     al,dx
9f0073c6:	ff                   	(bad)  
9f0073c7:	ff 2f                	jmp    FWORD PTR [edi]
9f0073c9:	b6 ff                	mov    dh,0xff
9f0073cb:	ff                   	(bad)  
9f0073cc:	ec                   	in     al,dx
9f0073cd:	ec                   	in     al,dx
9f0073ce:	ff                   	(bad)  
9f0073cf:	ff 35 b7 ff ff 10    	push   DWORD PTR ds:0x10ffffb7
9f0073d5:	ed                   	in     eax,dx
9f0073d6:	ff                   	(bad)  
9f0073d7:	ff 5c b7 ff          	call   FWORD PTR [edi+esi*4-0x1]
9f0073db:	ff 30                	push   DWORD PTR [eax]
9f0073dd:	ed                   	in     eax,dx
9f0073de:	ff                   	(bad)  
9f0073df:	ff 81 b7 ff ff 50    	inc    DWORD PTR [ecx+0x50ffffb7]
9f0073e5:	ed                   	in     eax,dx
9f0073e6:	ff                   	(bad)  
9f0073e7:	ff b7 b7 ff ff 74    	push   DWORD PTR [edi+0x74ffffb7]
9f0073ed:	ed                   	in     eax,dx
9f0073ee:	ff                   	(bad)  
9f0073ef:	ff 56 b9             	call   DWORD PTR [esi-0x47]
9f0073f2:	ff                   	(bad)  
9f0073f3:	ff 94 ed ff ff 7a b9 	call   DWORD PTR [ebp+ebp*8-0x46850001]
9f0073fa:	ff                   	(bad)  
9f0073fb:	ff b4 ed ff ff 45 ba 	push   DWORD PTR [ebp+ebp*8-0x45ba0001]
9f007402:	ff                   	(bad)  
9f007403:	ff d4                	call   esp
9f007405:	ed                   	in     eax,dx
9f007406:	ff                   	(bad)  
9f007407:	ff 69 ba             	jmp    FWORD PTR [ecx-0x46]
9f00740a:	ff                   	(bad)  
9f00740b:	ff f4                	push   esp
9f00740d:	ed                   	in     eax,dx
9f00740e:	ff                   	(bad)  
9f00740f:	ff 96 ba ff ff 18    	call   DWORD PTR [esi+0x18ffffba]
9f007415:	ee                   	out    dx,al
9f007416:	ff                   	(bad)  
9f007417:	ff c8                	dec    eax
9f007419:	ba ff ff 3c ee       	mov    edx,0xee3cffff
9f00741e:	ff                   	(bad)  
9f00741f:	ff 2d be ff ff 68    	jmp    FWORD PTR ds:0x68ffffbe
9f007425:	ee                   	out    dx,al
9f007426:	ff                   	(bad)  
9f007427:	ff 56 be             	call   DWORD PTR [esi-0x42]
9f00742a:	ff                   	(bad)  
9f00742b:	ff 88 ee ff ff 81    	dec    DWORD PTR [eax-0x7e000012]
9f007431:	c0 ff ff             	sar    bh,0xff
9f007434:	b4 ee                	mov    ah,0xee
9f007436:	ff                   	(bad)  
9f007437:	ff e4                	jmp    esp
9f007439:	c0 ff ff             	sar    bh,0xff
9f00743c:	d8 ee                	fsubr  st,st(6)
9f00743e:	ff                   	(bad)  
9f00743f:	ff 24 c3             	jmp    DWORD PTR [ebx+eax*8]
9f007442:	ff                   	(bad)  
9f007443:	ff 00                	inc    DWORD PTR [eax]
9f007445:	ef                   	out    dx,eax
9f007446:	ff                   	(bad)  
9f007447:	ff 6e c7             	jmp    FWORD PTR [esi-0x39]
9f00744a:	ff                   	(bad)  
9f00744b:	ff 24 ef             	jmp    DWORD PTR [edi+ebp*8]
9f00744e:	ff                   	(bad)  
9f00744f:	ff a5 c7 ff ff 44    	jmp    DWORD PTR [ebp+0x44ffffc7]
9f007455:	ef                   	out    dx,eax
9f007456:	ff                   	(bad)  
9f007457:	ff                   	(bad)  
9f007458:	dc c7                	fadd   st(7),st
9f00745a:	ff                   	(bad)  
9f00745b:	ff                   	(bad)  
9f00745c:	78 ef                	js     9f00744d <__GNU_EH_FRAME_HDR+0x339>
9f00745e:	ff                   	(bad)  
9f00745f:	ff 64 c8 ff          	jmp    DWORD PTR [eax+ecx*8-0x1]
9f007463:	ff 9c ef ff ff a4 c8 	call   FWORD PTR [edi+ebp*8-0x375b0001]
9f00746a:	ff                   	(bad)  
9f00746b:	ff c0                	inc    eax
9f00746d:	ef                   	out    dx,eax
9f00746e:	ff                   	(bad)  
9f00746f:	ff e4                	jmp    esp
9f007471:	c8 ff ff e4          	enter  0xffff,0xe4
9f007475:	ef                   	out    dx,eax
9f007476:	ff                   	(bad)  
9f007477:	ff 55 c9             	call   DWORD PTR [ebp-0x37]
9f00747a:	ff                   	(bad)  
9f00747b:	ff 08                	dec    DWORD PTR [eax]
9f00747d:	f0 ff                	lock (bad) 
9f00747f:	ff                   	(bad)  
9f007480:	7f c9                	jg     9f00744b <__GNU_EH_FRAME_HDR+0x337>
9f007482:	ff                   	(bad)  
9f007483:	ff 28                	jmp    FWORD PTR [eax]
9f007485:	f0 ff                	lock (bad) 
9f007487:	ff e1                	jmp    ecx
9f007489:	c9                   	leave  
9f00748a:	ff                   	(bad)  
9f00748b:	ff 50 f0             	call   DWORD PTR [eax-0x10]
9f00748e:	ff                   	(bad)  
9f00748f:	ff 02                	inc    DWORD PTR [edx]
9f007491:	ca ff ff             	retf   0xffff
9f007494:	70 f0                	jo     9f007486 <__GNU_EH_FRAME_HDR+0x372>
9f007496:	ff                   	(bad)  
9f007497:	ff 46 ca             	inc    DWORD PTR [esi-0x36]
9f00749a:	ff                   	(bad)  
9f00749b:	ff 90 f0 ff ff 8a    	call   DWORD PTR [eax-0x75000010]
9f0074a1:	ca ff ff             	retf   0xffff
9f0074a4:	b0 f0                	mov    al,0xf0
9f0074a6:	ff                   	(bad)  
9f0074a7:	ff d5                	call   ebp
9f0074a9:	ca ff ff             	retf   0xffff
9f0074ac:	d0 f0                	shl    al,1
9f0074ae:	ff                   	(bad)  
9f0074af:	ff 09                	dec    DWORD PTR [ecx]
9f0074b1:	cb                   	retf   
9f0074b2:	ff                   	(bad)  
9f0074b3:	ff f0                	push   eax
9f0074b5:	f0 ff                	lock (bad) 
9f0074b7:	ff 66 cb             	jmp    DWORD PTR [esi-0x35]
9f0074ba:	ff                   	(bad)  
9f0074bb:	ff 10                	call   DWORD PTR [eax]
9f0074bd:	f1                   	icebp  
9f0074be:	ff                   	(bad)  
9f0074bf:	ff 9b cb ff ff 30    	call   FWORD PTR [ebx+0x30ffffcb]
9f0074c5:	f1                   	icebp  
9f0074c6:	ff                   	(bad)  
9f0074c7:	ff                   	(bad)  
9f0074c8:	b9 cb ff ff 50       	mov    ecx,0x50ffffcb
9f0074cd:	f1                   	icebp  
9f0074ce:	ff                   	(bad)  
9f0074cf:	ff f6                	push   esi
9f0074d1:	cb                   	retf   
9f0074d2:	ff                   	(bad)  
9f0074d3:	ff 70 f1             	push   DWORD PTR [eax-0xf]
9f0074d6:	ff                   	(bad)  
9f0074d7:	ff 18                	call   FWORD PTR [eax]
9f0074d9:	cc                   	int3   
9f0074da:	ff                   	(bad)  
9f0074db:	ff 90 f1 ff ff 83    	call   DWORD PTR [eax-0x7c00000f]
9f0074e1:	cc                   	int3   
9f0074e2:	ff                   	(bad)  
9f0074e3:	ff b0 f1 ff ff ee    	push   DWORD PTR [eax-0x1100000f]
9f0074e9:	cc                   	int3   
9f0074ea:	ff                   	(bad)  
9f0074eb:	ff d0                	call   eax
9f0074ed:	f1                   	icebp  
9f0074ee:	ff                   	(bad)  
9f0074ef:	ff 5e cd             	call   FWORD PTR [esi-0x33]
9f0074f2:	ff                   	(bad)  
9f0074f3:	ff f0                	push   eax
9f0074f5:	f1                   	icebp  
9f0074f6:	ff                   	(bad)  
9f0074f7:	ff 82 cd ff ff 10    	inc    DWORD PTR [edx+0x10ffffcd]
9f0074fd:	f2 ff                	repnz (bad) 
9f0074ff:	ff 04 cf             	inc    DWORD PTR [edi+ecx*8]
9f007502:	ff                   	(bad)  
9f007503:	ff 40 f2             	inc    DWORD PTR [eax-0xe]
9f007506:	ff                   	(bad)  
9f007507:	ff 25 cf ff ff 60    	jmp    DWORD PTR ds:0x60ffffcf
9f00750d:	f2 ff                	repnz (bad) 
9f00750f:	ff c6                	inc    esi
9f007511:	d0 ff                	sar    bh,1
9f007513:	ff 90 f2 ff ff 60    	call   DWORD PTR [eax+0x60fffff2]
9f007519:	d1 ff                	sar    edi,1
9f00751b:	ff b4 f2 ff ff 84 d1 	push   DWORD PTR [edx+esi*8-0x2e7b0001]
9f007522:	ff                   	(bad)  
9f007523:	ff d4                	call   esp
9f007525:	f2 ff                	repnz (bad) 
9f007527:	ff 98 d2 ff ff 00    	call   FWORD PTR [eax+0xffffd2]
9f00752d:	f3 ff                	repz (bad) 
9f00752f:	ff c2                	inc    edx
9f007531:	d2 ff                	sar    bh,cl
9f007533:	ff 20                	jmp    DWORD PTR [eax]
9f007535:	f3 ff                	repz (bad) 
9f007537:	ff 64 d3 ff          	jmp    DWORD PTR [ebx+edx*8-0x1]
9f00753b:	ff 48 f3             	dec    DWORD PTR [eax-0xd]
9f00753e:	ff                   	(bad)  
9f00753f:	ff d6                	call   esi
9f007541:	d3 ff                	sar    edi,cl
9f007543:	ff 70 f3             	push   DWORD PTR [eax-0xd]
9f007546:	ff                   	(bad)  
9f007547:	ff f7                	push   edi
9f007549:	d3 ff                	sar    edi,cl
9f00754b:	ff 90 f3 ff ff 3f    	call   DWORD PTR [eax+0x3ffffff3]
9f007551:	d4 ff                	aam    0xff
9f007553:	ff                   	(bad)  
9f007554:	b8 f3 ff ff 4d       	mov    eax,0x4dfffff3
9f007559:	d7                   	xlat   BYTE PTR ds:[ebx]
9f00755a:	ff                   	(bad)  
9f00755b:	ff e0                	jmp    eax
9f00755d:	f3 ff                	repz (bad) 
9f00755f:	ff 6e d7             	jmp    FWORD PTR [esi-0x29]
9f007562:	ff                   	(bad)  
9f007563:	ff 00                	inc    DWORD PTR [eax]
9f007565:	f4                   	hlt    
9f007566:	ff                   	(bad)  
9f007567:	ff af d7 ff ff 20    	jmp    FWORD PTR [edi+0x20ffffd7]
9f00756d:	f4                   	hlt    
9f00756e:	ff                   	(bad)  
9f00756f:	ff                   	(bad)  
9f007570:	e8 d7 ff ff 40       	call   e000754c <tmbuf+0x40fff56c>
9f007575:	f4                   	hlt    
9f007576:	ff                   	(bad)  
9f007577:	ff 09                	dec    DWORD PTR [ecx]
9f007579:	d8 ff                	fdivr  st,st(7)
9f00757b:	ff 60 f4             	jmp    DWORD PTR [eax-0xc]
9f00757e:	ff                   	(bad)  
9f00757f:	ff 44 e0 ff          	inc    DWORD PTR [eax+eiz*8-0x1]
9f007583:	ff 90 f4 ff ff b5    	call   DWORD PTR [eax-0x4a00000c]
9f007589:	e0 ff                	loopne 9f00758a <__GNU_EH_FRAME_HDR+0x476>
9f00758b:	ff                   	(bad)  
9f00758c:	b8 f4 ff ff fa       	mov    eax,0xfafffff4
9f007591:	e0 ff                	loopne 9f007592 <__GNU_EH_FRAME_HDR+0x47e>
9f007593:	ff 60 e1             	jmp    DWORD PTR [eax-0x1f]
9f007596:	ff                   	(bad)  
9f007597:	ff                   	(bad)  
9f007598:	fe                   	(bad)  
9f007599:	e0 ff                	loopne 9f00759a <__GNU_EH_FRAME_HDR+0x486>
9f00759b:	ff 14 e2             	call   DWORD PTR [edx+eiz*8]
9f00759e:	ff                   	(bad)  
9f00759f:	ff 02                	inc    DWORD PTR [edx]
9f0075a1:	e1 ff                	loope  9f0075a2 <__GNU_EH_FRAME_HDR+0x48e>
9f0075a3:	ff 64 ef ff          	jmp    DWORD PTR [edi+ebp*8-0x1]
9f0075a7:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f0075c0 <ansiEscSeq>:
/home/yogi/src/os/aproj/libChrisOS/src/console.c:13
const char ansiEscSeq[3] =  {0x1b,0x5b,0};
9f0075c0:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f0075c3:	3b 00                	cmp    eax,DWORD PTR [eax]
9f0075c5:	48                   	dec    eax
9f0075c6:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f0075cc:	75 00                	jne    9f0075ce <ansiEscSeq+0xe>
9f0075ce:	3d 00 50 41 54       	cmp    eax,0x54415000
9f0075d3:	48                   	dec    eax
9f0075d4:	00 2f                	add    BYTE PTR [edi],ch
9f0075d6:	00 0a                	add    BYTE PTR [edx],cl
9f0075d8:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
9f0075db:	72 65                	jb     9f007642 <ansiEscSeq+0x82>
9f0075dd:	61                   	popa   
9f0075de:	6d                   	ins    DWORD PTR es:[edi],dx
9f0075df:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f0075e5:	74 20                	je     9f007607 <ansiEscSeq+0x47>
9f0075e7:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f0075ee:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0075ef:	74 65                	je     9f007656 <ansiEscSeq+0x96>
9f0075f1:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f0075f4:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0075f6:	2a 6c 69 62          	sub    ch,BYTE PTR [ecx+ebp*2+0x62]
9f0075fa:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f0075fd:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0075fe:	69 74 20 63 61 6c 6c 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x656c6c61
9f007605:	65 
9f007606:	64 0a 2a             	or     ch,BYTE PTR fs:[edx]
9f007609:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00760b:	00 2a                	add    BYTE PTR [edx],ch
9f00760d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00760f:	6c                   	ins    BYTE PTR es:[edi],dx
9f007610:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f007617:	74 20                	je     9f007639 <ansiEscSeq+0x79>
9f007619:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f00761c:	70 6c                	jo     9f00768a <ansiEscSeq+0xca>
9f00761e:	65 74 65             	gs je  9f007686 <ansiEscSeq+0xc6>
9f007621:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f007624:	6c                   	ins    BYTE PTR es:[edi],dx
9f007625:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f00762c:	74 20                	je     9f00764e <ansiEscSeq+0x8e>
9f00762e:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f007631:	6c                   	ins    BYTE PTR es:[edi],dx
9f007632:	65 64 20 70 72       	gs and BYTE PTR fs:[eax+0x72],dh
9f007637:	65 76 69             	gs jbe 9f0076a3 <ansiEscSeq+0xe3>
9f00763a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00763b:	75 73                	jne    9f0076b0 <ansiEscSeq+0xf0>
9f00763d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00763e:	79 2c                	jns    9f00766c <ansiEscSeq+0xac>
9f007640:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f007643:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f00764a:	6c 
9f00764b:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f007652:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f007655:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f007657:	72 20                	jb     9f007679 <ansiEscSeq+0xb9>
9f007659:	25 73 0a 00 20       	and    eax,0x20000a73
9f00765e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f007662:	63 3a                	arpl   WORD PTR [edx],di
9f007664:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f007667:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f00766b:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f00766d:	72 20                	jb     9f00768f <ansiEscSeq+0xcf>
9f00766f:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f007674:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f00767b:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f00767f:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f007681:	72 20                	jb     9f0076a3 <ansiEscSeq+0xe3>
9f007683:	25 73 0a 00 00       	and    eax,0xa73
9f007688:	68 65 61 70 42       	push   0x42706165
9f00768d:	61                   	popa   
9f00768e:	73 65                	jae    9f0076f5 <ansiEscSeq+0x135>
9f007690:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f007693:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f007696:	30 38                	xor    BYTE PTR [eax],bh
9f007698:	58                   	pop    eax
9f007699:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f00769f:	30 38                	xor    BYTE PTR [eax],bh
9f0076a1:	58                   	pop    eax
9f0076a2:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f0076a5:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0076a7:	72 65                	jb     9f00770e <ansiEscSeq+0x14e>
9f0076a9:	0a 00                	or     al,BYTE PTR [eax]
9f0076ab:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f0076ae:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076af:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076b0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0076b1:	63 3a                	arpl   WORD PTR [edx],di
9f0076b3:	20 6d 61             	and    BYTE PTR [ebp+0x61],ch
9f0076b6:	72 6b                	jb     9f007723 <ansiEscSeq+0x163>
9f0076b8:	65 72 20             	gs jb  9f0076db <ansiEscSeq+0x11b>
9f0076bb:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0076bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0076bd:	74 20                	je     9f0076df <ansiEscSeq+0x11f>
9f0076bf:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0076c1:	75 6e                	jne    9f007731 <ansiEscSeq+0x171>
9f0076c3:	64 20 65 72          	and    BYTE PTR fs:[ebp+0x72],ah
9f0076c7:	72 6f                	jb     9f007738 <ansiEscSeq+0x178>
9f0076c9:	72 21                	jb     9f0076ec <ansiEscSeq+0x12c>
9f0076cb:	21 21                	and    DWORD PTR [ecx],esp
9f0076cd:	0a 00                	or     al,BYTE PTR [eax]
9f0076cf:	00 0a                	add    BYTE PTR [edx],cl
9f0076d1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076d3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076d5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076d7:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076d9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076db:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076dd:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076df:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076e1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076e3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076e5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076e7:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076e9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0076eb:	6d                   	ins    DWORD PTR es:[edi],dx
9f0076ec:	61                   	popa   
9f0076ed:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076ee:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076ef:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0076f0:	63 20                	arpl   WORD PTR [eax],sp
9f0076f2:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
9f0076f5:	65 20 65 72          	and    BYTE PTR gs:[ebp+0x72],ah
9f0076f9:	72 6f                	jb     9f00776a <ansiEscSeq+0x1aa>
9f0076fb:	72 21                	jb     9f00771e <ansiEscSeq+0x15e>
9f0076fd:	21 21                	and    DWORD PTR [ecx],esp
9f0076ff:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007701:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007703:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007705:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007707:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007709:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00770b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00770d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00770f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007711:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007713:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007715:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007717:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007719:	0a 00                	or     al,BYTE PTR [eax]
9f00771b:	00 0a                	add    BYTE PTR [edx],cl
9f00771d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00771f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007721:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007723:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007725:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007727:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007729:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00772b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00772d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00772f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007731:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007733:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007735:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007737:	6d                   	ins    DWORD PTR es:[edi],dx
9f007738:	61                   	popa   
9f007739:	6c                   	ins    BYTE PTR es:[edi],dx
9f00773a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00773b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00773c:	63 20                	arpl   WORD PTR [eax],sp
9f00773e:	70 6f                	jo     9f0077af <ansiEscSeq+0x1ef>
9f007740:	69 6e 74 65 72 20 65 	imul   ebp,DWORD PTR [esi+0x74],0x65207265
9f007747:	72 72                	jb     9f0077bb <ansiEscSeq+0x1fb>
9f007749:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00774a:	72 21                	jb     9f00776d <ansiEscSeq+0x1ad>
9f00774c:	21 21                	and    DWORD PTR [ecx],esp
9f00774e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007750:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007752:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007754:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007756:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007758:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00775a:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00775c:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00775e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007760:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007762:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007764:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007766:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007768:	0a 00                	or     al,BYTE PTR [eax]
9f00776a:	00 00                	add    BYTE PTR [eax],al
9f00776c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00776d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f007774:	6c                   	ins    BYTE PTR es:[edi],dx
9f007775:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007776:	63 3a                	arpl   WORD PTR [edx],di
9f007778:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f00777b:	71 75                	jno    9f0077f2 <ansiEscSeq+0x232>
9f00777d:	65 73 74             	gs jae 9f0077f4 <ansiEscSeq+0x234>
9f007780:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f007783:	72 20                	jb     9f0077a5 <ansiEscSeq+0x1e5>
9f007785:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f007788:	30 38                	xor    BYTE PTR [eax],bh
9f00778a:	78 20                	js     9f0077ac <ansiEscSeq+0x1ec>
9f00778c:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f00778f:	65 73 0a             	gs jae 9f00779c <ansiEscSeq+0x1dc>
9f007792:	00 00                	add    BYTE PTR [eax],al
9f007794:	6c                   	ins    BYTE PTR es:[edi],dx
9f007795:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f00779c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00779d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00779e:	63 3a                	arpl   WORD PTR [edx],di
9f0077a0:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f0077a3:	75 73                	jne    9f007818 <ansiEscSeq+0x258>
9f0077a5:	69 6e 67 20 68 65 61 	imul   ebp,DWORD PTR [esi+0x67],0x61656820
9f0077ac:	70 72                	jo     9f007820 <ansiEscSeq+0x260>
9f0077ae:	65 63 3d 30 78 25 30 	arpl   WORD PTR gs:0x30257830,di
9f0077b5:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f0077b8:	20 61 64             	and    BYTE PTR [ecx+0x64],ah
9f0077bb:	64 72 65             	fs jb  9f007823 <ansiEscSeq+0x263>
9f0077be:	73 73                	jae    9f007833 <ansiEscSeq+0x273>
9f0077c0:	3d 30 78 25 30       	cmp    eax,0x30257830
9f0077c5:	38 78 20             	cmp    BYTE PTR [eax+0x20],bh
9f0077c8:	28 75 73             	sub    BYTE PTR [ebp+0x73],dh
9f0077cb:	65 73 3d             	gs jae 9f00780b <ansiEscSeq+0x24b>
9f0077ce:	25 75 29 00 6c       	and    eax,0x6c002975
9f0077d3:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0077da:	6c                   	ins    BYTE PTR es:[edi],dx
9f0077db:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0077dc:	63 3a                	arpl   WORD PTR [edx],di
9f0077de:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f0077e1:	65 64 65 64 3d 30 78 	gs fs gs fs cmp eax,0x30257830
9f0077e8:	25 30 
9f0077ea:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f0077ed:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0077f1:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f0077f4:	61                   	popa   
9f0077f5:	6c                   	ins    BYTE PTR es:[edi],dx
9f0077f6:	6c                   	ins    BYTE PTR es:[edi],dx
9f0077f7:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0077f8:	63 3a                	arpl   WORD PTR [edx],di
9f0077fa:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f0077fd:	61                   	popa   
9f0077fe:	45                   	inc    ebp
9f0077ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007800:	64 3d 30 78 25 30    	fs cmp eax,0x30257830
9f007806:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f007809:	00 00                	add    BYTE PTR [eax],al
9f00780b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f00780f:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f007812:	61                   	popa   
9f007813:	6c                   	ins    BYTE PTR es:[edi],dx
9f007814:	6c                   	ins    BYTE PTR es:[edi],dx
9f007815:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007816:	63 3a                	arpl   WORD PTR [edx],di
9f007818:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f00781b:	71 20                	jno    9f00783d <ansiEscSeq+0x27d>
9f00781d:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f007820:	30 38                	xor    BYTE PTR [eax],bh
9f007822:	58                   	pop    eax
9f007823:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f007826:	74 65                	je     9f00788d <ansiEscSeq+0x2cd>
9f007828:	73 2c                	jae    9f007856 <ansiEscSeq+0x296>
9f00782a:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f00782d:	74 20                	je     9f00784f <ansiEscSeq+0x28f>
9f00782f:	77 61                	ja     9f007892 <ansiEscSeq+0x2d2>
9f007831:	73 20                	jae    9f007853 <ansiEscSeq+0x293>
9f007833:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f007836:	30 38                	xor    BYTE PTR [eax],bh
9f007838:	58                   	pop    eax
9f007839:	2c 20                	sub    al,0x20
9f00783b:	68 65 61 70 45       	push   0x45706165
9f007840:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007841:	64 3d 30 78 25 30    	fs cmp eax,0x30257830
9f007847:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f00784a:	00 00                	add    BYTE PTR [eax],al
9f00784c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00784d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f007854:	6c                   	ins    BYTE PTR es:[edi],dx
9f007855:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007856:	63 3a                	arpl   WORD PTR [edx],di
9f007858:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f00785b:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f007862:	65 
9f007863:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f007867:	61                   	popa   
9f007868:	70 43                	jo     9f0078ad <ansiEscSeq+0x2ed>
9f00786a:	75 72                	jne    9f0078de <ansiEscSeq+0x31e>
9f00786c:	72 20                	jb     9f00788e <ansiEscSeq+0x2ce>
9f00786e:	61                   	popa   
9f00786f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007870:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f007874:	61                   	popa   
9f007875:	70 42                	jo     9f0078b9 <ansiEscSeq+0x2f9>
9f007877:	61                   	popa   
9f007878:	73 65                	jae    9f0078df <ansiEscSeq+0x31f>
9f00787a:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f00787e:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f007881:	30 38                	xor    BYTE PTR [eax],bh
9f007883:	58                   	pop    eax
9f007884:	0a 00                	or     al,BYTE PTR [eax]
9f007886:	00 00                	add    BYTE PTR [eax],al
9f007888:	6c                   	ins    BYTE PTR es:[edi],dx
9f007889:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f007890:	6c                   	ins    BYTE PTR es:[edi],dx
9f007891:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007892:	63 3a                	arpl   WORD PTR [edx],di
9f007894:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f007897:	61                   	popa   
9f007898:	74 69                	je     9f007903 <ansiEscSeq+0x343>
9f00789a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00789b:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f00789f:	61                   	popa   
9f0078a0:	70 20                	jo     9f0078c2 <ansiEscSeq+0x302>
9f0078a2:	72 65                	jb     9f007909 <ansiEscSeq+0x349>
9f0078a4:	63 20                	arpl   WORD PTR [eax],sp
9f0078a6:	40                   	inc    eax
9f0078a7:	20 30                	and    BYTE PTR [eax],dh
9f0078a9:	78 25                	js     9f0078d0 <ansiEscSeq+0x310>
9f0078ab:	30 38                	xor    BYTE PTR [eax],bh
9f0078ad:	58                   	pop    eax
9f0078ae:	0a 00                	or     al,BYTE PTR [eax]
9f0078b0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0078b1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0078b8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0078b9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0078ba:	63 3a                	arpl   WORD PTR [edx],di
9f0078bc:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f0078bf:	61                   	popa   
9f0078c0:	70 43                	jo     9f007905 <ansiEscSeq+0x345>
9f0078c2:	75 72                	jne    9f007936 <ansiEscSeq+0x376>
9f0078c4:	72 3d                	jb     9f007903 <ansiEscSeq+0x343>
9f0078c6:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f0078c9:	30 38                	xor    BYTE PTR [eax],bh
9f0078cb:	78 0a                	js     9f0078d7 <ansiEscSeq+0x317>
9f0078cd:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f0078d0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0078d1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0078d2:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0078d3:	63 3a                	arpl   WORD PTR [edx],di
9f0078d5:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f0078d8:	74 75                	je     9f00794f <ansiEscSeq+0x38f>
9f0078da:	72 6e                	jb     9f00794a <ansiEscSeq+0x38a>
9f0078dc:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f0078e3:	30 38                	xor    BYTE PTR [eax],bh
9f0078e5:	58                   	pop    eax
9f0078e6:	0a 00                	or     al,BYTE PTR [eax]
9f0078e8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0078e9:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f0078f0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0078f1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0078f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0078f3:	63 3a                	arpl   WORD PTR [edx],di
9f0078f5:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f0078f8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0078f9:	6c                   	ins    BYTE PTR es:[edi],dx
9f0078fa:	65 64 20 66 6f       	gs and BYTE PTR fs:[esi+0x6f],ah
9f0078ff:	72 20                	jb     9f007921 <ansiEscSeq+0x361>
9f007901:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007902:	6c                   	ins    BYTE PTR es:[edi],dx
9f007903:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f007907:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f00790e:	78 25                	js     9f007935 <ansiEscSeq+0x375>
9f007910:	30 38                	xor    BYTE PTR [eax],bh
9f007912:	78 2c                	js     9f007940 <ansiEscSeq+0x380>
9f007914:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f007917:	77 20                	ja     9f007939 <ansiEscSeq+0x379>
9f007919:	73 69                	jae    9f007984 <ansiEscSeq+0x3c4>
9f00791b:	7a 65                	jp     9f007982 <ansiEscSeq+0x3c2>
9f00791d:	3d 30 78 25 30       	cmp    eax,0x30257830
9f007922:	38 78 00             	cmp    BYTE PTR [eax+0x0],bh
9f007925:	00 00                	add    BYTE PTR [eax],al
9f007927:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f00792b:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f00792e:	65 6c                	gs ins BYTE PTR es:[edi],dx
9f007930:	6c                   	ins    BYTE PTR es:[edi],dx
9f007931:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007932:	63 3a                	arpl   WORD PTR [edx],di
9f007934:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f007937:	71 75                	jno    9f0079ae <ansiEscSeq+0x3ee>
9f007939:	65 73 74             	gs jae 9f0079b0 <ansiEscSeq+0x3f0>
9f00793c:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f00793f:	72 20                	jb     9f007961 <ansiEscSeq+0x3a1>
9f007941:	30 20                	xor    BYTE PTR [eax],ah
9f007943:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f007946:	65 73 2c             	gs jae 9f007975 <ansiEscSeq+0x3b5>
9f007949:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f00794c:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00794d:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00794e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00794f:	74 20                	je     9f007971 <ansiEscSeq+0x3b1>
9f007951:	66 75 6c             	data16 jne 9f0079c0 <ansiEscSeq+0x400>
9f007954:	66 69 6c 6c 0a 00 00 	imul   bp,WORD PTR [esp+ebp*2+0xa],0x0
9f00795b:	00 09                	add    BYTE PTR [ecx],cl
9f00795d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00795e:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f007965:	6c                   	ins    BYTE PTR es:[edi],dx
9f007966:	6c                   	ins    BYTE PTR es:[edi],dx
9f007967:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007968:	63 3a                	arpl   WORD PTR [edx],di
9f00796a:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f00796d:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
9f007970:	76 65                	jbe    9f0079d7 <ansiEscSeq+0x417>
9f007972:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f007976:	77 20                	ja     9f007998 <ansiEscSeq+0x3d8>
9f007978:	6d                   	ins    DWORD PTR es:[edi],dx
9f007979:	61                   	popa   
9f00797a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00797b:	6c                   	ins    BYTE PTR es:[edi],dx
9f00797c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00797d:	63 20                	arpl   WORD PTR [eax],sp
9f00797f:	70 6f                	jo     9f0079f0 <ansiEscSeq+0x430>
9f007981:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f007988:	78 25                	js     9f0079af <ansiEscSeq+0x3ef>
9f00798a:	30 38                	xor    BYTE PTR [eax],bh
9f00798c:	78 2c                	js     9f0079ba <ansiEscSeq+0x3fa>
9f00798e:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f007991:	64 20 73 69          	and    BYTE PTR fs:[ebx+0x69],dh
9f007995:	7a 65                	jp     9f0079fc <ansiEscSeq+0x43c>
9f007997:	3d 30 78 25 30       	cmp    eax,0x30257830
9f00799c:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f00799f:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f0079a2:	77 20                	ja     9f0079c4 <ansiEscSeq+0x404>
9f0079a4:	73 69                	jae    9f007a0f <ansiEscSeq+0x44f>
9f0079a6:	7a 65                	jp     9f007a0d <ansiEscSeq+0x44d>
9f0079a8:	3d 30 78 25 30       	cmp    eax,0x30257830
9f0079ad:	38 78 0a             	cmp    BYTE PTR [eax+0xa],bh
9f0079b0:	00 00                	add    BYTE PTR [eax],al
9f0079b2:	00 00                	add    BYTE PTR [eax],al
9f0079b4:	09 6c 69 62          	or     DWORD PTR [ecx+ebp*2+0x62],ebp
9f0079b8:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f0079bb:	65 61                	gs popa 
9f0079bd:	6c                   	ins    BYTE PTR es:[edi],dx
9f0079be:	6c                   	ins    BYTE PTR es:[edi],dx
9f0079bf:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0079c0:	63 3a                	arpl   WORD PTR [edx],di
9f0079c2:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
9f0079c5:	64 61                	fs popa 
9f0079c7:	74 65                	je     9f007a2e <ansiEscSeq+0x46e>
9f0079c9:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f0079cd:	77 20                	ja     9f0079ef <ansiEscSeq+0x42f>
9f0079cf:	70 6f                	jo     9f007a40 <ansiEscSeq+0x480>
9f0079d1:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f0079d8:	78 25                	js     9f0079ff <ansiEscSeq+0x43f>
9f0079da:	30 38                	xor    BYTE PTR [eax],bh
9f0079dc:	78 20                	js     9f0079fe <ansiEscSeq+0x43e>
9f0079de:	77 69                	ja     9f007a49 <ansiEscSeq+0x489>
9f0079e0:	74 68                	je     9f007a4a <ansiEscSeq+0x48a>
9f0079e2:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f0079e5:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f0079e9:	69 6e 74 65 72 20 64 	imul   ebp,DWORD PTR [esi+0x74],0x64207265
9f0079f0:	61                   	popa   
9f0079f1:	74 61                	je     9f007a54 <ansiEscSeq+0x494>
9f0079f3:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
9f0079f6:	64 20 63 6c          	and    BYTE PTR fs:[ebx+0x6c],ah
9f0079fa:	65 61                	gs popa 
9f0079fc:	72 65                	jb     9f007a63 <ansiEscSeq+0x4a3>
9f0079fe:	64 20 6f 75          	and    BYTE PTR fs:[edi+0x75],ch
9f007a02:	74 20                	je     9f007a24 <ansiEscSeq+0x464>
9f007a04:	72 65                	jb     9f007a6b <ansiEscSeq+0x4ab>
9f007a06:	6d                   	ins    DWORD PTR es:[edi],dx
9f007a07:	61                   	popa   
9f007a08:	69 6e 67 20 69 66 20 	imul   ebp,DWORD PTR [esi+0x67],0x20666920
9f007a0f:	61                   	popa   
9f007a10:	70 70                	jo     9f007a82 <ansiEscSeq+0x4c2>
9f007a12:	6c                   	ins    BYTE PTR es:[edi],dx
9f007a13:	69 63 61 62 6c 65 0a 	imul   esp,DWORD PTR [ebx+0x61],0xa656c62
9f007a1a:	00 00                	add    BYTE PTR [eax],al
9f007a1c:	00 00                	add    BYTE PTR [eax],al
9f007a1e:	00 00                	add    BYTE PTR [eax],al
9f007a20:	2d 00 00 28 00       	sub    eax,0x280000
9f007a25:	29 00                	sub    DWORD PTR [eax],eax
9f007a27:	25 2d 31 30 73       	and    eax,0x7330312d
9f007a2c:	00 25 30 32 69 3a    	add    BYTE PTR ds:0x3a693230,ah
9f007a32:	25 30 32 69 3a       	and    eax,0x3a693230
9f007a37:	25 30 32 69 00       	and    eax,0x693230
9f007a3c:	19 b0 ff ff 7d ad    	sbb    DWORD PTR [eax-0x52820001],esi
9f007a42:	ff                   	(bad)  
9f007a43:	ff 63 ae             	jmp    DWORD PTR [ebx-0x52]
9f007a46:	ff                   	(bad)  
9f007a47:	ff 9b ad ff ff ac    	call   FWORD PTR [ebx-0x53000053]
9f007a4d:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f007a4e:	ff                   	(bad)  
9f007a4f:	ff 19                	call   FWORD PTR [ecx]
9f007a51:	b0 ff                	mov    al,0xff
9f007a53:	ff 19                	call   FWORD PTR [ecx]
9f007a55:	b0 ff                	mov    al,0xff
9f007a57:	ff c5                	inc    ebp
9f007a59:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f007a5a:	ff                   	(bad)  
9f007a5b:	ff 19                	call   FWORD PTR [ecx]
9f007a5d:	b0 ff                	mov    al,0xff
9f007a5f:	ff 19                	call   FWORD PTR [ecx]
9f007a61:	b0 ff                	mov    al,0xff
9f007a63:	ff                   	(bad)  
9f007a64:	de ad ff ff f7 ad    	fisubr WORD PTR [ebp-0x52080001]
9f007a6a:	ff                   	(bad)  
9f007a6b:	ff 19                	call   FWORD PTR [ecx]
9f007a6d:	b0 ff                	mov    al,0xff
9f007a6f:	ff e1                	jmp    ecx
9f007a71:	ae                   	scas   al,BYTE PTR es:[edi]
9f007a72:	ff                   	(bad)  
9f007a73:	ff 19                	call   FWORD PTR [ecx]
9f007a75:	b0 ff                	mov    al,0xff
9f007a77:	ff 19                	call   FWORD PTR [ecx]
9f007a79:	b0 ff                	mov    al,0xff
9f007a7b:	ff 19                	call   FWORD PTR [ecx]
9f007a7d:	b0 ff                	mov    al,0xff
9f007a7f:	ff 10                	call   DWORD PTR [eax]
9f007a81:	ae                   	scas   al,BYTE PTR es:[edi]
9f007a82:	ff                   	(bad)  
9f007a83:	ff 19                	call   FWORD PTR [ecx]
9f007a85:	b0 ff                	mov    al,0xff
9f007a87:	ff 19                	call   FWORD PTR [ecx]
9f007a89:	b0 ff                	mov    al,0xff
9f007a8b:	ff 19                	call   FWORD PTR [ecx]
9f007a8d:	b0 ff                	mov    al,0xff
9f007a8f:	ff 19                	call   FWORD PTR [ecx]
9f007a91:	b0 ff                	mov    al,0xff
9f007a93:	ff                   	(bad)  
9f007a94:	ee                   	out    dx,al
9f007a95:	af                   	scas   eax,DWORD PTR es:[edi]
9f007a96:	ff                   	(bad)  
9f007a97:	ff 04 b0             	inc    DWORD PTR [eax+esi*4]
9f007a9a:	ff                   	(bad)  
9f007a9b:	ff 2f                	jmp    FWORD PTR [edi]
9f007a9d:	70 72                	jo     9f007b11 <ansiEscSeq+0x551>
9f007a9f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007aa0:	63 2f                	arpl   WORD PTR [edi],bp
9f007aa2:	00 2f                	add    BYTE PTR [edi],ch
9f007aa4:	73 74                	jae    9f007b1a <ansiEscSeq+0x55a>
9f007aa6:	61                   	popa   
9f007aa7:	74 00                	je     9f007aa9 <ansiEscSeq+0x4e9>
9f007aa9:	73 65                	jae    9f007b10 <ansiEscSeq+0x550>
9f007aab:	6c                   	ins    BYTE PTR es:[edi],dx
9f007aac:	66 00 72 00          	data16 add BYTE PTR [edx+0x0],dh
9f007ab0:	20 00                	and    BYTE PTR [eax],al
	...
9f007abe:	59                   	pop    ecx
9f007abf:	40                   	inc    eax
9f007ac0:	b9 b5 ff ff cb       	mov    ecx,0xcbffffb5
9f007ac5:	b5 ff                	mov    ch,0xff
9f007ac7:	ff cb                	dec    ebx
9f007ac9:	b5 ff                	mov    ch,0xff
9f007acb:	ff                   	(bad)  
9f007acc:	bf b5 ff ff cb       	mov    edi,0xcbffffb5
9f007ad1:	b5 ff                	mov    ch,0xff
9f007ad3:	ff cb                	dec    ebx
9f007ad5:	b5 ff                	mov    ch,0xff
9f007ad7:	ff cb                	dec    ebx
9f007ad9:	b5 ff                	mov    ch,0xff
9f007adb:	ff cb                	dec    ebx
9f007add:	b5 ff                	mov    ch,0xff
9f007adf:	ff cb                	dec    ebx
9f007ae1:	b5 ff                	mov    ch,0xff
9f007ae3:	ff cb                	dec    ebx
9f007ae5:	b5 ff                	mov    ch,0xff
9f007ae7:	ff cb                	dec    ebx
9f007ae9:	b5 ff                	mov    ch,0xff
9f007aeb:	ff b3 b5 ff ff cb    	push   DWORD PTR [ebx-0x3400004b]
9f007af1:	b5 ff                	mov    ch,0xff
9f007af3:	ff ad b5 ff ff cb    	jmp    FWORD PTR [ebp-0x3400004b]
9f007af9:	b5 ff                	mov    ch,0xff
9f007afb:	ff cb                	dec    ebx
9f007afd:	b5 ff                	mov    ch,0xff
9f007aff:	ff c5                	inc    ebp
9f007b01:	b5 ff                	mov    ch,0xff
9f007b03:	ff 6d b8             	jmp    FWORD PTR [ebp-0x48]
9f007b06:	ff                   	(bad)  
9f007b07:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b0d:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b12:	ff                   	(bad)  
9f007b13:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b19:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b1e:	ff                   	(bad)  
9f007b1f:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b25:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b2a:	ff                   	(bad)  
9f007b2b:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b31:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b36:	ff                   	(bad)  
9f007b37:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b3d:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b42:	ff                   	(bad)  
9f007b43:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b49:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b4e:	ff                   	(bad)  
9f007b4f:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b55:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b5a:	ff                   	(bad)  
9f007b5b:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b61:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b66:	ff                   	(bad)  
9f007b67:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b6d:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b72:	ff                   	(bad)  
9f007b73:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b79:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b7e:	ff                   	(bad)  
9f007b7f:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b85:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b8a:	ff                   	(bad)  
9f007b8b:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b91:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007b96:	ff                   	(bad)  
9f007b97:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007b9d:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007ba2:	ff                   	(bad)  
9f007ba3:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007ba9:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007bae:	ff                   	(bad)  
9f007baf:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007bb5:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007bba:	ff                   	(bad)  
9f007bbb:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007bc1:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007bc6:	ff                   	(bad)  
9f007bc7:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007bcd:	b8 ff ff 8b b8       	mov    eax,0xb88bffff
9f007bd2:	ff                   	(bad)  
9f007bd3:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007bd9:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007bde:	ff                   	(bad)  
9f007bdf:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007be5:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007bea:	ff                   	(bad)  
9f007beb:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007bf1:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007bf6:	ff                   	(bad)  
9f007bf7:	ff 9a b8 ff ff f1    	call   FWORD PTR [edx-0xe000048]
9f007bfd:	b6 ff                	mov    dh,0xff
9f007bff:	ff 94 b8 ff ff 9a b8 	call   DWORD PTR [eax+edi*4-0x47650001]
9f007c06:	ff                   	(bad)  
9f007c07:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007c0d:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007c12:	ff                   	(bad)  
9f007c13:	ff 94 b8 ff ff 9a b8 	call   DWORD PTR [eax+edi*4-0x47650001]
9f007c1a:	ff                   	(bad)  
9f007c1b:	ff 9a b8 ff ff 9a    	call   FWORD PTR [edx-0x65000048]
9f007c21:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007c26:	ff                   	(bad)  
9f007c27:	ff 27                	jmp    DWORD PTR [edi]
9f007c29:	b8 ff ff 7e b8       	mov    eax,0xb87effff
9f007c2e:	ff                   	(bad)  
9f007c2f:	ff                   	(bad)  
9f007c30:	e9 b7 ff ff 9a       	jmp    3a007bec <sysEnter_Vector+0x39ed7bec>
9f007c35:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007c3a:	ff                   	(bad)  
9f007c3b:	ff 48 b7             	dec    DWORD PTR [eax-0x49]
9f007c3e:	ff                   	(bad)  
9f007c3f:	ff 9a b8 ff ff d4    	call   FWORD PTR [edx-0x2b000048]
9f007c45:	b8 ff ff 9a b8       	mov    eax,0xb89affff
9f007c4a:	ff                   	(bad)  
9f007c4b:	ff 9a b8 ff ff 87    	call   FWORD PTR [edx-0x78000048]
9f007c51:	b8 ff ff         	mov    eax,0x3130ffff

9f007c54 <digits.1285>:
9f007c54:	30 31                	xor    BYTE PTR [ecx],dh
9f007c56:	32 33                	xor    dh,BYTE PTR [ebx]
9f007c58:	34 35                	xor    al,0x35
9f007c5a:	36 37                	ss aaa 
9f007c5c:	38 39                	cmp    BYTE PTR [ecx],bh
9f007c5e:	41                   	inc    ecx
9f007c5f:	42                   	inc    edx
9f007c60:	43                   	inc    ebx
9f007c61:	44                   	inc    esp
9f007c62:	45                   	inc    ebp
9f007c63:	46                   	inc    esi
	...
9f007c80:	47                   	inc    edi
9f007c81:	4d                   	dec    ebp
9f007c82:	54                   	push   esp
	...

9f007ca0 <_ytab>:
/home/yogi/src/os/aproj/libChrisOS/src/time.c:21
const int _ytab[2][12] = {
9f007ca0:	1f                   	pop    ds
9f007ca1:	00 00                	add    BYTE PTR [eax],al
9f007ca3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007ca6:	00 00                	add    BYTE PTR [eax],al
9f007ca8:	1f                   	pop    ds
9f007ca9:	00 00                	add    BYTE PTR [eax],al
9f007cab:	00 1e                	add    BYTE PTR [esi],bl
9f007cad:	00 00                	add    BYTE PTR [eax],al
9f007caf:	00 1f                	add    BYTE PTR [edi],bl
9f007cb1:	00 00                	add    BYTE PTR [eax],al
9f007cb3:	00 1e                	add    BYTE PTR [esi],bl
9f007cb5:	00 00                	add    BYTE PTR [eax],al
9f007cb7:	00 1f                	add    BYTE PTR [edi],bl
9f007cb9:	00 00                	add    BYTE PTR [eax],al
9f007cbb:	00 1f                	add    BYTE PTR [edi],bl
9f007cbd:	00 00                	add    BYTE PTR [eax],al
9f007cbf:	00 1e                	add    BYTE PTR [esi],bl
9f007cc1:	00 00                	add    BYTE PTR [eax],al
9f007cc3:	00 1f                	add    BYTE PTR [edi],bl
9f007cc5:	00 00                	add    BYTE PTR [eax],al
9f007cc7:	00 1e                	add    BYTE PTR [esi],bl
9f007cc9:	00 00                	add    BYTE PTR [eax],al
9f007ccb:	00 1f                	add    BYTE PTR [edi],bl
9f007ccd:	00 00                	add    BYTE PTR [eax],al
9f007ccf:	00 1f                	add    BYTE PTR [edi],bl
9f007cd1:	00 00                	add    BYTE PTR [eax],al
9f007cd3:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f007cd9:	00 00                	add    BYTE PTR [eax],al
9f007cdb:	00 1e                	add    BYTE PTR [esi],bl
9f007cdd:	00 00                	add    BYTE PTR [eax],al
9f007cdf:	00 1f                	add    BYTE PTR [edi],bl
9f007ce1:	00 00                	add    BYTE PTR [eax],al
9f007ce3:	00 1e                	add    BYTE PTR [esi],bl
9f007ce5:	00 00                	add    BYTE PTR [eax],al
9f007ce7:	00 1f                	add    BYTE PTR [edi],bl
9f007ce9:	00 00                	add    BYTE PTR [eax],al
9f007ceb:	00 1f                	add    BYTE PTR [edi],bl
9f007ced:	00 00                	add    BYTE PTR [eax],al
9f007cef:	00 1e                	add    BYTE PTR [esi],bl
9f007cf1:	00 00                	add    BYTE PTR [eax],al
9f007cf3:	00 1f                	add    BYTE PTR [edi],bl
9f007cf5:	00 00                	add    BYTE PTR [eax],al
9f007cf7:	00 1e                	add    BYTE PTR [esi],bl
9f007cf9:	00 00                	add    BYTE PTR [eax],al
9f007cfb:	00 1f                	add    BYTE PTR [edi],bl
9f007cfd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f007d00 <.rel.dyn>:
9f007d00:	0c 7f                	or     al,0x7f
9f007d02:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007d08:	10 7f 00             	adc    BYTE PTR [edi+0x0],bh
9f007d0b:	9f                   	lahf   
9f007d0c:	08 00                	or     BYTE PTR [eax],al
9f007d0e:	00 00                	add    BYTE PTR [eax],al
9f007d10:	14 7f                	adc    al,0x7f
9f007d12:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007d18:	3e 12 00             	adc    al,BYTE PTR ds:[eax]
9f007d1b:	9f                   	lahf   
9f007d1c:	02 38                	add    bh,BYTE PTR [eax]
9f007d1e:	00 00                	add    BYTE PTR [eax],al
9f007d20:	82 12 00             	adc    BYTE PTR [edx],0x0
9f007d23:	9f                   	lahf   
9f007d24:	02 38                	add    bh,BYTE PTR [eax]
9f007d26:	00 00                	add    BYTE PTR [eax],al
9f007d28:	af                   	scas   eax,DWORD PTR es:[edi]
9f007d29:	12 00                	adc    al,BYTE PTR [eax]
9f007d2b:	9f                   	lahf   
9f007d2c:	02 38                	add    bh,BYTE PTR [eax]
9f007d2e:	00 00                	add    BYTE PTR [eax],al
9f007d30:	c8 12 00 9f          	enter  0x12,0x9f
9f007d34:	02 38                	add    bh,BYTE PTR [eax]
9f007d36:	00 00                	add    BYTE PTR [eax],al
9f007d38:	27                   	daa    
9f007d39:	13 00                	adc    eax,DWORD PTR [eax]
9f007d3b:	9f                   	lahf   
9f007d3c:	02 38                	add    bh,BYTE PTR [eax]
9f007d3e:	00 00                	add    BYTE PTR [eax],al
9f007d40:	8a 13                	mov    dl,BYTE PTR [ebx]
9f007d42:	00 9f 02 38 00 00    	add    BYTE PTR [edi+0x3802],bl
9f007d48:	c2 13 00             	ret    0x13
9f007d4b:	9f                   	lahf   
9f007d4c:	02 38                	add    bh,BYTE PTR [eax]
9f007d4e:	00 00                	add    BYTE PTR [eax],al
9f007d50:	02 14 00             	add    dl,BYTE PTR [eax+eax*1]
9f007d53:	9f                   	lahf   
9f007d54:	02 38                	add    bh,BYTE PTR [eax]
9f007d56:	00 00                	add    BYTE PTR [eax],al
9f007d58:	44                   	inc    esp
9f007d59:	14 00                	adc    al,0x0
9f007d5b:	9f                   	lahf   
9f007d5c:	02 38                	add    bh,BYTE PTR [eax]
9f007d5e:	00 00                	add    BYTE PTR [eax],al
9f007d60:	88 14 00             	mov    BYTE PTR [eax+eax*1],dl
9f007d63:	9f                   	lahf   
9f007d64:	02 38                	add    bh,BYTE PTR [eax]
9f007d66:	00 00                	add    BYTE PTR [eax],al
9f007d68:	ce                   	into   
9f007d69:	14 00                	adc    al,0x0
9f007d6b:	9f                   	lahf   
9f007d6c:	02 38                	add    bh,BYTE PTR [eax]
9f007d6e:	00 00                	add    BYTE PTR [eax],al
9f007d70:	dc 17                	fcom   QWORD PTR [edi]
9f007d72:	00 9f 02 38 00 00    	add    BYTE PTR [edi+0x3802],bl
9f007d78:	09 18                	or     DWORD PTR [eax],ebx
9f007d7a:	00 9f 02 38 00 00    	add    BYTE PTR [edi+0x3802],bl
9f007d80:	50                   	push   eax
9f007d81:	18 00                	sbb    BYTE PTR [eax],al
9f007d83:	9f                   	lahf   
9f007d84:	02 38                	add    bh,BYTE PTR [eax]
9f007d86:	00 00                	add    BYTE PTR [eax],al
9f007d88:	7d 18                	jge    9f007da2 <_ytab+0x102>
9f007d8a:	00 9f 02 38 00 00    	add    BYTE PTR [edi+0x3802],bl
9f007d90:	c4 18                	les    ebx,FWORD PTR [eax]
9f007d92:	00 9f 02 38 00 00    	add    BYTE PTR [edi+0x3802],bl
9f007d98:	f1                   	icebp  
9f007d99:	18 00                	sbb    BYTE PTR [eax],al
9f007d9b:	9f                   	lahf   
9f007d9c:	02 38                	add    bh,BYTE PTR [eax]
9f007d9e:	00 00                	add    BYTE PTR [eax],al
9f007da0:	42                   	inc    edx
9f007da1:	45                   	inc    ebp
9f007da2:	00 9f 02 38 00 00    	add    BYTE PTR [edi+0x3802],bl
9f007da8:	95                   	xchg   ebp,eax
9f007da9:	51                   	push   ecx
9f007daa:	00 9f 02 38 00 00    	add    BYTE PTR [edi+0x3802],bl
9f007db0:	ec                   	in     al,dx
9f007db1:	7e 00                	jle    9f007db3 <_ytab+0x113>
9f007db3:	9f                   	lahf   
9f007db4:	06                   	push   es
9f007db5:	53                   	push   ebx
9f007db6:	00 00                	add    BYTE PTR [eax],al
9f007db8:	f0 7e 00             	lock jle 9f007dbb <_ytab+0x11b>
9f007dbb:	9f                   	lahf   
9f007dbc:	06                   	push   es
9f007dbd:	34 00                	xor    al,0x0
9f007dbf:	00 f4                	add    ah,dh
9f007dc1:	7e 00                	jle    9f007dc3 <_ytab+0x123>
9f007dc3:	9f                   	lahf   
9f007dc4:	06                   	push   es
9f007dc5:	3c 00                	cmp    al,0x0
9f007dc7:	00 f8                	add    al,bh
9f007dc9:	7e 00                	jle    9f007dcb <_ytab+0x12b>
9f007dcb:	9f                   	lahf   
9f007dcc:	06                   	push   es
9f007dcd:	4d                   	dec    ebp
9f007dce:	00 00                	add    BYTE PTR [eax],al
9f007dd0:	08 7f 00             	or     BYTE PTR [edi+0x0],bh
9f007dd3:	9f                   	lahf   
9f007dd4:	01 2f                	add    DWORD PTR [edi],ebp
	...

Disassembly of section .data:

9f007de0 <rcsid>:
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:25
static char rcsid[] = "$Header: /user6/ouster/tcl/compat/RCS/strstr.c,v 1.2 93/03/19 15:25:40 ouster Exp $ SPRITE (Berkeley)";
9f007de0:	24 48                	and    al,0x48
9f007de2:	65 61                	gs popa 
9f007de4:	64 65 72 3a          	fs gs jb 9f007e22 <rcsid+0x42>
9f007de8:	20 2f                	and    BYTE PTR [edi],ch
9f007dea:	75 73                	jne    9f007e5f <_DYNAMIC+0x13>
9f007dec:	65 72 36             	gs jb  9f007e25 <rcsid+0x45>
9f007def:	2f                   	das    
9f007df0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007df1:	75 73                	jne    9f007e66 <_DYNAMIC+0x1a>
9f007df3:	74 65                	je     9f007e5a <_DYNAMIC+0xe>
9f007df5:	72 2f                	jb     9f007e26 <rcsid+0x46>
9f007df7:	74 63                	je     9f007e5c <_DYNAMIC+0x10>
9f007df9:	6c                   	ins    BYTE PTR es:[edi],dx
9f007dfa:	2f                   	das    
9f007dfb:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f007dfe:	70 61                	jo     9f007e61 <_DYNAMIC+0x15>
9f007e00:	74 2f                	je     9f007e31 <rcsid+0x51>
9f007e02:	52                   	push   edx
9f007e03:	43                   	inc    ebx
9f007e04:	53                   	push   ebx
9f007e05:	2f                   	das    
9f007e06:	73 74                	jae    9f007e7c <_DYNAMIC+0x30>
9f007e08:	72 73                	jb     9f007e7d <_DYNAMIC+0x31>
9f007e0a:	74 72                	je     9f007e7e <_DYNAMIC+0x32>
9f007e0c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f007e10:	20 31                	and    BYTE PTR [ecx],dh
9f007e12:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f007e15:	39 33                	cmp    DWORD PTR [ebx],esi
9f007e17:	2f                   	das    
9f007e18:	30 33                	xor    BYTE PTR [ebx],dh
9f007e1a:	2f                   	das    
9f007e1b:	31 39                	xor    DWORD PTR [ecx],edi
9f007e1d:	20 31                	and    BYTE PTR [ecx],dh
9f007e1f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f007e24:	34 30                	xor    al,0x30
9f007e26:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f007e29:	73 74                	jae    9f007e9f <_DYNAMIC+0x53>
9f007e2b:	65 72 20             	gs jb  9f007e4e <_DYNAMIC+0x2>
9f007e2e:	45                   	inc    ebp
9f007e2f:	78 70                	js     9f007ea1 <_DYNAMIC+0x55>
9f007e31:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f007e34:	53                   	push   ebx
9f007e35:	50                   	push   eax
9f007e36:	52                   	push   edx
9f007e37:	49                   	dec    ecx
9f007e38:	54                   	push   esp
9f007e39:	45                   	inc    ebp
9f007e3a:	20 28                	and    BYTE PTR [eax],ch
9f007e3c:	42                   	inc    edx
9f007e3d:	65 72 6b             	gs jb  9f007eab <_DYNAMIC+0x5f>
9f007e40:	65 6c                	gs ins BYTE PTR es:[edi],dx
9f007e42:	65 79 29             	gs jns 9f007e6e <_DYNAMIC+0x22>
9f007e45:	00 00                	add    BYTE PTR [eax],al
	...

9f007e48 <_daylight>:
/home/yogi/src/os/aproj/libChrisOS/src/time.c:13
int _daylight=1;                  // Non-zero if daylight savings time is used
9f007e48:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f007e4c <_DYNAMIC>:
9f007e4c:	19 00                	sbb    DWORD PTR [eax],eax
9f007e4e:	00 00                	add    BYTE PTR [eax],al
9f007e50:	08 7f 00             	or     BYTE PTR [edi+0x0],bh
9f007e53:	9f                   	lahf   
9f007e54:	1b 00                	sbb    eax,DWORD PTR [eax]
9f007e56:	00 00                	add    BYTE PTR [eax],al
9f007e58:	04 00                	add    al,0x0
9f007e5a:	00 00                	add    BYTE PTR [eax],al
9f007e5c:	1a 00                	sbb    al,BYTE PTR [eax]
9f007e5e:	00 00                	add    BYTE PTR [eax],al
9f007e60:	0c 7f                	or     al,0x7f
9f007e62:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
9f007e68:	04 00                	add    al,0x0
9f007e6a:	00 00                	add    BYTE PTR [eax],al
9f007e6c:	f5                   	cmc    
9f007e6d:	fe                   	(bad)  
9f007e6e:	ff 6f 1c             	jmp    FWORD PTR [edi+0x1c]
9f007e71:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007e72:	00 9f 05 00 00 00    	add    BYTE PTR [edi+0x5],bl
9f007e78:	70 6b                	jo     9f007ee5 <_DYNAMIC+0x99>
9f007e7a:	00 9f 06 00 00 00    	add    BYTE PTR [edi+0x6],bl
9f007e80:	f0 65 00 9f 0a 00 00 	lock add BYTE PTR gs:[edi+0xa],bl
9f007e87:	00 
9f007e88:	ab                   	stos   DWORD PTR es:[edi],eax
9f007e89:	02 00                	add    al,BYTE PTR [eax]
9f007e8b:	00 0b                	add    BYTE PTR [ebx],cl
9f007e8d:	00 00                	add    BYTE PTR [eax],al
9f007e8f:	00 10                	add    BYTE PTR [eax],dl
9f007e91:	00 00                	add    BYTE PTR [eax],al
9f007e93:	00 11                	add    BYTE PTR [ecx],dl
9f007e95:	00 00                	add    BYTE PTR [eax],al
9f007e97:	00 00                	add    BYTE PTR [eax],al
9f007e99:	7d 00                	jge    9f007e9b <_DYNAMIC+0x4f>
9f007e9b:	9f                   	lahf   
9f007e9c:	12 00                	adc    al,BYTE PTR [eax]
9f007e9e:	00 00                	add    BYTE PTR [eax],al
9f007ea0:	d8 00                	fadd   DWORD PTR [eax]
9f007ea2:	00 00                	add    BYTE PTR [eax],al
9f007ea4:	13 00                	adc    eax,DWORD PTR [eax]
9f007ea6:	00 00                	add    BYTE PTR [eax],al
9f007ea8:	08 00                	or     BYTE PTR [eax],al
9f007eaa:	00 00                	add    BYTE PTR [eax],al
9f007eac:	16                   	push   ss
9f007ead:	00 00                	add    BYTE PTR [eax],al
9f007eaf:	00 00                	add    BYTE PTR [eax],al
9f007eb1:	00 00                	add    BYTE PTR [eax],al
9f007eb3:	00 1e                	add    BYTE PTR [esi],bl
9f007eb5:	00 00                	add    BYTE PTR [eax],al
9f007eb7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f007eba:	00 00                	add    BYTE PTR [eax],al
9f007ebc:	fa                   	cli    
9f007ebd:	ff                   	(bad)  
9f007ebe:	ff 6f 03             	jmp    FWORD PTR [edi+0x3]
	...

Disassembly of section .got:

9f007eec <.got>:
	...

Disassembly of section .got.plt:

9f007efc <_GLOBAL_OFFSET_TABLE_>:
9f007efc:	4c                   	dec    esp
9f007efd:	7e 00                	jle    9f007eff <_GLOBAL_OFFSET_TABLE_+0x3>
9f007eff:	9f                   	lahf   
	...

Disassembly of section .init_array:

9f007f08 <.init_array>:
9f007f08:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f007f0c <.fini_array>:
9f007f0c:	ac                   	lods   al,BYTE PTR ds:[esi]
9f007f0d:	15                   	.byte 0x15
9f007f0e:	00                   	.byte 0x0
9f007f0f:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f007f10 <_tzname>:
/home/yogi/src/os/aproj/libChrisOS/src/time.c:15
char *_tzname[2] = {"GMT", "GMT"};  // Standard/daylight savings time zone names
9f007f10:	80 7c 00 9f 80       	cmp    BYTE PTR [eax+eax*1-0x61],0x80
9f007f15:	7c 00                	jl     9f007f17 <_tzname+0x7>
9f007f17:	9f                   	lahf   

Disassembly of section .bss:

9f007f20 <processEnvp>:
/home/yogi/src/os/aproj/libChrisOS/include/common.h:51
    int printfI(const char *format, ...);
    int printI(const char *format, ...);         //NOTE: Works with linker option  -fvisibility=hidden
    int printdI(uint32_t DebugLevel, const char *format, ...);
    int printd(uint32_t DebugLevel, const char *format, ...);

    char** processEnvp;
9f007f20:	00 00                	add    BYTE PTR [eax],al
	...

9f007f24 <lasts.1280>:
9f007f24:	00 00                	add    BYTE PTR [eax],al
	...

9f007f28 <lasts.1288>:
9f007f28:	00 00                	add    BYTE PTR [eax],al
	...

9f007f2c <filesToCloseCount>:
/home/yogi/src/os/aproj/libChrisOS/include/file.h:54
    
    typedef struct direntry direntry_t;
    typedef struct sfstat fstat_t;
    
    uintptr_t *filesToClose;
    uint32_t filesToCloseCount;
9f007f2c:	00 00                	add    BYTE PTR [eax],al
	...

9f007f30 <filesToClose>:
/home/yogi/src/os/aproj/libChrisOS/include/file.h:53
    uintptr_t *filesToClose;
9f007f30:	00 00                	add    BYTE PTR [eax],al
	...

9f007f34 <resolvePath_envPath>:
/home/yogi/src/os/aproj/libChrisOS/src/file.c:13
    char *resolvePath_envPath;
9f007f34:	00 00                	add    BYTE PTR [eax],al
	...

9f007f38 <resolvePath_resPath>:
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15
    char *resolvePath_resPath;
9f007f38:	00 00                	add    BYTE PTR [eax],al
	...

9f007f3c <resolvePath_cwd>:
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    char *resolvePath_cwd;
9f007f3c:	00 00                	add    BYTE PTR [eax],al
	...

9f007f40 <resolvePath_inPath>:
/home/yogi/src/os/aproj/libChrisOS/src/file.c:14
    char *resolvePath_inPath;
9f007f40:	00 00                	add    BYTE PTR [eax],al
	...

9f007f44 <libcInitialized>:
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:13
bool libcInitialized = false;
9f007f44:	00 00                	add    BYTE PTR [eax],al
	...

9f007f48 <printBuffer>:
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:14
char *printBuffer;
9f007f48:	00 00                	add    BYTE PTR [eax],al
	...

9f007f4c <params>:
	...

9f007f64 <heapBase>:
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
VISIBLE uint32_t heapBase=0;
9f007f64:	00 00                	add    BYTE PTR [eax],al
	...

9f007f68 <heapCurr>:
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
VISIBLE uint32_t heapCurr=0;
9f007f68:	00 00                	add    BYTE PTR [eax],al
	...

9f007f6c <heapEnd>:
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:19
VISIBLE uint32_t heapEnd=0;
9f007f6c:	00 00                	add    BYTE PTR [eax],al
	...

9f007f70 <lastHRCreated.1260>:
	...

9f007f80 <tinfo.1465>:
	...

9f007fac <dirEntries.1491>:
9f007fac:	00 00                	add    BYTE PTR [eax],al
	...

9f007fb0 <_dstbias>:
/home/yogi/src/os/aproj/libChrisOS/src/time.c:14
long _dstbias=0;                  // Offset for Daylight Saving Time
9f007fb0:	00 00                	add    BYTE PTR [eax],al
	...

9f007fb4 <libcTZ>:
	...

9f007fc0 <ticksToWait>:
	...

9f007fe0 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0c 01                	or     al,0x1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	04 00                	add    al,0x0
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	28 00                	sub    BYTE PTR [eax],al
       e:	00 00                	add    BYTE PTR [eax],al
      10:	0c 35                	or     al,0x35
      12:	01 00                	add    DWORD PTR [eax],eax
      14:	00 fe                	add    dh,bh
      16:	00 00                	add    BYTE PTR [eax],al
      18:	00 00                	add    BYTE PTR [eax],al
      1a:	00 00                	add    BYTE PTR [eax],al
      1c:	9f                   	lahf   
      1d:	78 00                	js     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
      2c:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
      2f:	e3 00                	jecxz  31 <sysEnter_Vector-0x12ffcf>
      31:	00 00                	add    BYTE PTR [eax],al
      33:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
      3a:	03 08                	add    ecx,DWORD PTR [eax]
      3c:	05 00 00 00 00       	add    eax,0x0
      41:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
      44:	5e                   	pop    esi
      45:	01 00                	add    DWORD PTR [eax],eax
      47:	00 03                	add    BYTE PTR [ebx],al
      49:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
      4c:	00 00                	add    BYTE PTR [eax],al
      4e:	00 03                	add    BYTE PTR [ebx],al
      50:	01 06                	add    DWORD PTR [esi],eax
      52:	f9                   	stc    
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 4f             	add    BYTE PTR [edi+ecx*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 03                	add    BYTE PTR [ebx],al
      5c:	01 08                	add    DWORD PTR [eax],ecx
      5e:	f0 00 00             	lock add BYTE PTR [eax],al
      61:	00 03                	add    BYTE PTR [ebx],al
      63:	02 07                	add    al,BYTE PTR [edi]
      65:	0e                   	push   cs
      66:	00 00                	add    BYTE PTR [eax],al
      68:	00 03                	add    BYTE PTR [ebx],al
      6a:	04 07                	add    al,0x7
      6c:	de 00                	fiadd  WORD PTR [eax]
      6e:	00 00                	add    BYTE PTR [eax],al
      70:	03 01                	add    eax,DWORD PTR [ecx]
      72:	06                   	push   es
      73:	f2 00 00             	repnz add BYTE PTR [eax],al
      76:	00 03                	add    BYTE PTR [ebx],al
      78:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
      7e:	03 08                	add    ecx,DWORD PTR [eax]
      80:	07                   	pop    es
      81:	d9 00                	fld    DWORD PTR [eax]
      83:	00 00                	add    BYTE PTR [eax],al
      85:	05 04 4f 00 00       	add    eax,0x4f04
      8a:	00 06                	add    BYTE PTR [esi],al
      8c:	29 01                	sub    DWORD PTR [ecx],eax
      8e:	00 00                	add    BYTE PTR [eax],al
      90:	02 33                	add    dh,BYTE PTR [ebx]
      92:	0c 9d                	or     al,0x9d
      94:	00 00                	add    BYTE PTR [eax],al
      96:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
      9c:	9f                   	lahf   
      9d:	05 04 85 00 00       	add    eax,0x8504
      a2:	00 07                	add    BYTE PTR [edi],al
      a4:	21 01                	and    DWORD PTR [ecx],eax
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	01 11                	add    DWORD PTR [ecx],edx
      aa:	07                   	pop    es
      ab:	85 00                	test   DWORD PTR [eax],eax
      ad:	00 00                	add    BYTE PTR [eax],al
      af:	3c 00                	cmp    al,0x0
      b1:	00 9f 3c 00 00 00    	add    BYTE PTR [edi+0x3c],bl
      b7:	01 9c d8 00 00 00 08 	add    DWORD PTR [eax+ebx*8+0x8000000],ebx
      be:	73 00                	jae    c0 <sysEnter_Vector-0x12ff40>
      c0:	01 11                	add    DWORD PTR [ecx],edx
      c2:	1b d8                	sbb    ebx,eax
      c4:	00 00                	add    BYTE PTR [eax],al
      c6:	00 02                	add    BYTE PTR [edx],al
      c8:	91                   	xchg   ecx,eax
      c9:	00 08                	add    BYTE PTR [eax],cl
      cb:	63 00                	arpl   WORD PTR [eax],ax
      cd:	01 11                	add    DWORD PTR [ecx],edx
      cf:	22 25 00 00 00 02    	and    ah,BYTE PTR ds:0x2000000
      d5:	91                   	xchg   ecx,eax
      d6:	04 00                	add    al,0x0
      d8:	05 04 56 00 00       	add    eax,0x5604
      dd:	00 09                	add    BYTE PTR [ecx],cl
      df:	21 00                	and    DWORD PTR [eax],eax
      e1:	00 00                	add    BYTE PTR [eax],al
      e3:	01 09                	add    DWORD PTR [ecx],ecx
      e5:	0f 85 00 00 00 00    	jne    eb <sysEnter_Vector-0x12ff15>
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	9f                   	lahf   
      ee:	3c 00                	cmp    al,0x0
      f0:	00 00                	add    BYTE PTR [eax],al
      f2:	01 9c 08 73 00 01 09 	add    DWORD PTR [eax+ecx*1+0x9010073],ebx
      f9:	22 d8                	and    bl,al
      fb:	00 00                	add    BYTE PTR [eax],al
      fd:	00 02                	add    BYTE PTR [edx],al
      ff:	91                   	xchg   ecx,eax
     100:	00 08                	add    BYTE PTR [eax],cl
     102:	63 00                	arpl   WORD PTR [eax],ax
     104:	01 09                	add    DWORD PTR [ecx],ecx
     106:	29 25 00 00 00 02    	sub    DWORD PTR ds:0x2000000,esp
     10c:	91                   	xchg   ecx,eax
     10d:	04 00                	add    al,0x0
     10f:	00 51 01             	add    BYTE PTR [ecx+0x1],dl
     112:	00 00                	add    BYTE PTR [eax],al
     114:	04 00                	add    al,0x0
     116:	98                   	cwde   
     117:	00 00                	add    BYTE PTR [eax],al
     119:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     11c:	28 00                	sub    BYTE PTR [eax],al
     11e:	00 00                	add    BYTE PTR [eax],al
     120:	0c 7a                	or     al,0x7a
     122:	01 00                	add    DWORD PTR [eax],eax
     124:	00 fe                	add    dh,bh
     126:	00 00                	add    BYTE PTR [eax],al
     128:	00 78 00             	add    BYTE PTR [eax+0x0],bh
     12b:	00 9f a6 00 00 00    	add    BYTE PTR [edi+0xa6],bl
     131:	ad                   	lods   eax,DWORD PTR ds:[esi]
     132:	00 00                	add    BYTE PTR [eax],al
     134:	00 02                	add    BYTE PTR [edx],al
     136:	04 05                	add    al,0x5
     138:	69 6e 74 00 03 04 07 	imul   ebp,DWORD PTR [esi+0x74],0x7040300
     13f:	e3 00                	jecxz  141 <sysEnter_Vector-0x12febf>
     141:	00 00                	add    BYTE PTR [eax],al
     143:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
     14a:	03 08                	add    ecx,DWORD PTR [eax]
     14c:	05 00 00 00 00       	add    eax,0x0
     151:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
     154:	5e                   	pop    esi
     155:	01 00                	add    DWORD PTR [eax],eax
     157:	00 03                	add    BYTE PTR [ebx],al
     159:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
     15c:	00 00                	add    BYTE PTR [eax],al
     15e:	00 03                	add    BYTE PTR [ebx],al
     160:	01 06                	add    DWORD PTR [esi],eax
     162:	f9                   	stc    
     163:	00 00                	add    BYTE PTR [eax],al
     165:	00 03                	add    BYTE PTR [ebx],al
     167:	01 08                	add    DWORD PTR [eax],ecx
     169:	f0 00 00             	lock add BYTE PTR [eax],al
     16c:	00 03                	add    BYTE PTR [ebx],al
     16e:	02 07                	add    al,BYTE PTR [edi]
     170:	0e                   	push   cs
     171:	00 00                	add    BYTE PTR [eax],al
     173:	00 03                	add    BYTE PTR [ebx],al
     175:	04 07                	add    al,0x7
     177:	de 00                	fiadd  WORD PTR [eax]
     179:	00 00                	add    BYTE PTR [eax],al
     17b:	03 01                	add    eax,DWORD PTR [ecx]
     17d:	06                   	push   es
     17e:	f2 00 00             	repnz add BYTE PTR [eax],al
     181:	00 03                	add    BYTE PTR [ebx],al
     183:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
     189:	03 08                	add    ecx,DWORD PTR [eax]
     18b:	07                   	pop    es
     18c:	d9 00                	fld    DWORD PTR [eax]
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	04 04                	add    al,0x4
     192:	4f                   	dec    edi
     193:	00 00                	add    BYTE PTR [eax],al
     195:	00 05 29 01 00 00    	add    BYTE PTR ds:0x129,al
     19b:	02 33                	add    dh,BYTE PTR [ebx]
     19d:	0c 98                	or     al,0x98
     19f:	00 00                	add    BYTE PTR [eax],al
     1a1:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
     1a7:	9f                   	lahf   
     1a8:	04 04                	add    al,0x4
     1aa:	80 00 00             	add    BYTE PTR [eax],0x0
     1ad:	00 06                	add    BYTE PTR [esi],al
     1af:	ac                   	lods   al,BYTE PTR ds:[esi]
     1b0:	01 00                	add    DWORD PTR [eax],eax
     1b2:	00 01                	add    BYTE PTR [ecx],al
     1b4:	34 05                	xor    al,0x5
     1b6:	25 00 00 00 cb       	and    eax,0xcb000000
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	9f                   	lahf   
     1be:	53                   	push   ebx
     1bf:	00 00                	add    BYTE PTR [eax],al
     1c1:	00 01                	add    BYTE PTR [ecx],al
     1c3:	9c                   	pushf  
     1c4:	fb                   	sti    
     1c5:	00 00                	add    BYTE PTR [eax],al
     1c7:	00 07                	add    BYTE PTR [edi],al
     1c9:	1d 11 00 00 01       	sbb    eax,0x1000011
     1ce:	34 14                	xor    al,0x14
     1d0:	80 00 00             	add    BYTE PTR [eax],0x0
     1d3:	00 02                	add    BYTE PTR [edx],al
     1d5:	91                   	xchg   ecx,eax
     1d6:	00 07                	add    BYTE PTR [edi],al
     1d8:	74 01                	je     1db <sysEnter_Vector-0x12fe25>
     1da:	00 00                	add    BYTE PTR [eax],al
     1dc:	01 34 22             	add    DWORD PTR [edx+eiz*1],esi
     1df:	80 00 00             	add    BYTE PTR [eax],0x0
     1e2:	00 02                	add    BYTE PTR [edx],al
     1e4:	91                   	xchg   ecx,eax
     1e5:	04 08                	add    al,0x8
     1e7:	63 00                	arpl   WORD PTR [eax],ax
     1e9:	01 36                	add    DWORD PTR [esi],esi
     1eb:	13 4f 00             	adc    ecx,DWORD PTR [edi+0x0]
     1ee:	00 00                	add    BYTE PTR [eax],al
     1f0:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     1f3:	70 00                	jo     1f5 <sysEnter_Vector-0x12fe0b>
     1f5:	01 36                	add    DWORD PTR [esi],esi
     1f7:	17                   	pop    ss
     1f8:	80 00 00             	add    BYTE PTR [eax],0x0
     1fb:	00 01                	add    BYTE PTR [ecx],al
     1fd:	56                   	push   esi
     1fe:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     201:	01 36                	add    DWORD PTR [esi],esi
     203:	1b 80 00 00 00 01    	sbb    eax,DWORD PTR [eax+0x1000000]
     209:	53                   	push   ebx
     20a:	00 09                	add    BYTE PTR [ecx],cl
     20c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     20d:	01 00                	add    DWORD PTR [eax],eax
     20f:	00 01                	add    BYTE PTR [ecx],al
     211:	26 0d 25 00 00 00    	es or  eax,0x25
     217:	78 00                	js     219 <sysEnter_Vector-0x12fde7>
     219:	00 9f 53 00 00 00    	add    BYTE PTR [edi+0x53],bl
     21f:	01 9c 07 1d 11 00 00 	add    DWORD PTR [edi+eax*1+0x111d],ebx
     226:	01 26                	add    DWORD PTR [esi],esp
     228:	1b 80 00 00 00 02    	sbb    eax,DWORD PTR [eax+0x2000000]
     22e:	91                   	xchg   ecx,eax
     22f:	00 07                	add    BYTE PTR [edi],al
     231:	74 01                	je     234 <sysEnter_Vector-0x12fdcc>
     233:	00 00                	add    BYTE PTR [eax],al
     235:	01 26                	add    DWORD PTR [esi],esp
     237:	29 80 00 00 00 02    	sub    DWORD PTR [eax+0x2000000],eax
     23d:	91                   	xchg   ecx,eax
     23e:	04 08                	add    al,0x8
     240:	63 00                	arpl   WORD PTR [eax],ax
     242:	01 28                	add    DWORD PTR [eax],ebp
     244:	13 4f 00             	adc    ecx,DWORD PTR [edi+0x0]
     247:	00 00                	add    BYTE PTR [eax],al
     249:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     24c:	70 00                	jo     24e <sysEnter_Vector-0x12fdb2>
     24e:	01 28                	add    DWORD PTR [eax],ebp
     250:	17                   	pop    ss
     251:	80 00 00             	add    BYTE PTR [eax],0x0
     254:	00 01                	add    BYTE PTR [ecx],al
     256:	56                   	push   esi
     257:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     25a:	01 28                	add    DWORD PTR [eax],ebp
     25c:	1b 80 00 00 00 01    	sbb    eax,DWORD PTR [eax+0x1000000]
     262:	53                   	push   ebx
     263:	00 00                	add    BYTE PTR [eax],al
     265:	43                   	inc    ebx
     266:	01 00                	add    DWORD PTR [eax],eax
     268:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     26b:	3a 01                	cmp    al,BYTE PTR [ecx]
     26d:	00 00                	add    BYTE PTR [eax],al
     26f:	04 01                	add    al,0x1
     271:	28 00                	sub    BYTE PTR [eax],al
     273:	00 00                	add    BYTE PTR [eax],al
     275:	0c c3                	or     al,0xc3
     277:	01 00                	add    DWORD PTR [eax],eax
     279:	00 fe                	add    dh,bh
     27b:	00 00                	add    BYTE PTR [eax],al
     27d:	00 1e                	add    BYTE PTR [esi],bl
     27f:	01 00                	add    DWORD PTR [eax],eax
     281:	9f                   	lahf   
     282:	36 01 00             	add    DWORD PTR ss:[eax],eax
     285:	00 af 01 00 00 02    	add    BYTE PTR [edi+0x2000001],ch
     28b:	04 05                	add    al,0x5
     28d:	69 6e 74 00 03 04 07 	imul   ebp,DWORD PTR [esi+0x74],0x7040300
     294:	e3 00                	jecxz  296 <sysEnter_Vector-0x12fd6a>
     296:	00 00                	add    BYTE PTR [eax],al
     298:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
     29f:	03 08                	add    ecx,DWORD PTR [eax]
     2a1:	05 00 00 00 00       	add    eax,0x0
     2a6:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
     2a9:	5e                   	pop    esi
     2aa:	01 00                	add    DWORD PTR [eax],eax
     2ac:	00 03                	add    BYTE PTR [ebx],al
     2ae:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 03                	add    BYTE PTR [ebx],al
     2b5:	01 06                	add    DWORD PTR [esi],eax
     2b7:	f9                   	stc    
     2b8:	00 00                	add    BYTE PTR [eax],al
     2ba:	00 03                	add    BYTE PTR [ebx],al
     2bc:	01 08                	add    DWORD PTR [eax],ecx
     2be:	f0 00 00             	lock add BYTE PTR [eax],al
     2c1:	00 03                	add    BYTE PTR [ebx],al
     2c3:	02 07                	add    al,BYTE PTR [edi]
     2c5:	0e                   	push   cs
     2c6:	00 00                	add    BYTE PTR [eax],al
     2c8:	00 03                	add    BYTE PTR [ebx],al
     2ca:	04 07                	add    al,0x7
     2cc:	de 00                	fiadd  WORD PTR [eax]
     2ce:	00 00                	add    BYTE PTR [eax],al
     2d0:	03 01                	add    eax,DWORD PTR [ecx]
     2d2:	06                   	push   es
     2d3:	f2 00 00             	repnz add BYTE PTR [eax],al
     2d6:	00 03                	add    BYTE PTR [ebx],al
     2d8:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
     2de:	03 08                	add    ecx,DWORD PTR [eax]
     2e0:	07                   	pop    es
     2e1:	d9 00                	fld    DWORD PTR [eax]
     2e3:	00 00                	add    BYTE PTR [eax],al
     2e5:	04 04                	add    al,0x4
     2e7:	4f                   	dec    edi
     2e8:	00 00                	add    BYTE PTR [eax],al
     2ea:	00 05 29 01 00 00    	add    BYTE PTR ds:0x129,al
     2f0:	02 33                	add    dh,BYTE PTR [ebx]
     2f2:	0c 98                	or     al,0x98
     2f4:	00 00                	add    BYTE PTR [eax],al
     2f6:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
     2fc:	9f                   	lahf   
     2fd:	04 04                	add    al,0x4
     2ff:	80 00 00             	add    BYTE PTR [eax],0x0
     302:	00 06                	add    BYTE PTR [esi],al
     304:	f2 01 00             	repnz add DWORD PTR [eax],eax
     307:	00 01                	add    BYTE PTR [ecx],al
     309:	3c 10                	cmp    al,0x10
     30b:	80 00 00             	add    BYTE PTR [eax],0x0
     30e:	00 b9 01 00 9f 9b    	add    BYTE PTR [ecx-0x6460ffff],bh
     314:	00 00                	add    BYTE PTR [eax],al
     316:	00 01                	add    BYTE PTR [ecx],al
     318:	9c                   	pushf  
     319:	f4                   	hlt    
     31a:	00 00                	add    BYTE PTR [eax],al
     31c:	00 07                	add    BYTE PTR [edi],al
     31e:	73 00                	jae    320 <sysEnter_Vector-0x12fce0>
     320:	01 3c 1d 80 00 00 00 	add    DWORD PTR [ebx*1+0x80],edi
     327:	02 91 00 08 bd 01    	add    dl,BYTE PTR [ecx+0x1bd0800]
     32d:	00 00                	add    BYTE PTR [eax],al
     32f:	01 3c 30             	add    DWORD PTR [eax+esi*1],edi
     332:	80 00 00             	add    BYTE PTR [eax],0x0
     335:	00 02                	add    BYTE PTR [edx],al
     337:	91                   	xchg   ecx,eax
     338:	04 09                	add    al,0x9
     33a:	ec                   	in     al,dx
     33b:	01 00                	add    DWORD PTR [eax],eax
     33d:	00 01                	add    BYTE PTR [ecx],al
     33f:	3e 12 80 00 00 00 05 	adc    al,BYTE PTR ds:[eax+0x5000000]
     346:	03 28                	add    ebp,DWORD PTR [eax]
     348:	7f 00                	jg     34a <sysEnter_Vector-0x12fcb6>
     34a:	9f                   	lahf   
     34b:	0a 63 68             	or     ah,BYTE PTR [ebx+0x68]
     34e:	00 01                	add    BYTE PTR [ecx],al
     350:	3f                   	aas    
     351:	12 25 00 00 00 01    	adc    ah,BYTE PTR ds:0x1000000
     357:	56                   	push   esi
     358:	00 0b                	add    BYTE PTR [ebx],cl
     35a:	b5 01                	mov    ch,0x1
     35c:	00 00                	add    BYTE PTR [eax],al
     35e:	01 2a                	add    DWORD PTR [edx],ebp
     360:	08 80 00 00 00 1e    	or     BYTE PTR [eax+0x1e000000],al
     366:	01 00                	add    DWORD PTR [eax],eax
     368:	9f                   	lahf   
     369:	9b                   	fwait
     36a:	00 00                	add    BYTE PTR [eax],al
     36c:	00 01                	add    BYTE PTR [ecx],al
     36e:	9c                   	pushf  
     36f:	07                   	pop    es
     370:	73 00                	jae    372 <sysEnter_Vector-0x12fc8e>
     372:	01 2a                	add    DWORD PTR [edx],ebp
     374:	16                   	push   ss
     375:	80 00 00             	add    BYTE PTR [eax],0x0
     378:	00 02                	add    BYTE PTR [edx],al
     37a:	91                   	xchg   ecx,eax
     37b:	00 08                	add    BYTE PTR [eax],cl
     37d:	bd 01 00 00 01       	mov    ebp,0x1000001
     382:	2a 29                	sub    ch,BYTE PTR [ecx]
     384:	80 00 00             	add    BYTE PTR [eax],0x0
     387:	00 02                	add    BYTE PTR [edx],al
     389:	91                   	xchg   ecx,eax
     38a:	04 09                	add    al,0x9
     38c:	ec                   	in     al,dx
     38d:	01 00                	add    DWORD PTR [eax],eax
     38f:	00 01                	add    BYTE PTR [ecx],al
     391:	2c 12                	sub    al,0x12
     393:	80 00 00             	add    BYTE PTR [eax],0x0
     396:	00 05 03 24 7f 00    	add    BYTE PTR ds:0x7f2403,al
     39c:	9f                   	lahf   
     39d:	0a 63 68             	or     ah,BYTE PTR [ebx+0x68]
     3a0:	00 01                	add    BYTE PTR [ecx],al
     3a2:	2d 12 25 00 00       	sub    eax,0x2512
     3a7:	00 01                	add    BYTE PTR [ecx],al
     3a9:	56                   	push   esi
     3aa:	00 00                	add    BYTE PTR [eax],al
     3ac:	fa                   	cli    
     3ad:	01 00                	add    DWORD PTR [eax],eax
     3af:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     3b2:	fe 01                	inc    BYTE PTR [ecx]
     3b4:	00 00                	add    BYTE PTR [eax],al
     3b6:	04 01                	add    al,0x1
     3b8:	28 00                	sub    BYTE PTR [eax],al
     3ba:	00 00                	add    BYTE PTR [eax],al
     3bc:	0c 18                	or     al,0x18
     3be:	02 00                	add    al,BYTE PTR [eax]
     3c0:	00 fe                	add    dh,bh
     3c2:	00 00                	add    BYTE PTR [eax],al
     3c4:	00 54 02 00          	add    BYTE PTR [edx+eax*1+0x0],dl
     3c8:	9f                   	lahf   
     3c9:	74 02                	je     3cd <sysEnter_Vector-0x12fc33>
     3cb:	00 00                	add    BYTE PTR [eax],al
     3cd:	8c 02                	mov    WORD PTR [edx],es
     3cf:	00 00                	add    BYTE PTR [eax],al
     3d1:	02 01                	add    al,BYTE PTR [ecx]
     3d3:	08 f0                	or     al,dh
     3d5:	00 00                	add    BYTE PTR [eax],al
     3d7:	00 02                	add    BYTE PTR [edx],al
     3d9:	02 07                	add    al,BYTE PTR [edi]
     3db:	0e                   	push   cs
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	00 02                	add    BYTE PTR [edx],al
     3e0:	04 07                	add    al,0x7
     3e2:	e3 00                	jecxz  3e4 <sysEnter_Vector-0x12fc1c>
     3e4:	00 00                	add    BYTE PTR [eax],al
     3e6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3e9:	de 00                	fiadd  WORD PTR [eax]
     3eb:	00 00                	add    BYTE PTR [eax],al
     3ed:	02 01                	add    al,BYTE PTR [ecx]
     3ef:	06                   	push   es
     3f0:	f2 00 00             	repnz add BYTE PTR [eax],al
     3f3:	00 02                	add    BYTE PTR [edx],al
     3f5:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
     3fb:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     402:	02 08                	add    cl,BYTE PTR [eax]
     404:	05 00 00 00 00       	add    eax,0x0
     409:	02 08                	add    cl,BYTE PTR [eax]
     40b:	07                   	pop    es
     40c:	d9 00                	fld    DWORD PTR [eax]
     40e:	00 00                	add    BYTE PTR [eax],al
     410:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     417:	04 04                	add    al,0x4
     419:	71 00                	jno    41b <sysEnter_Vector-0x12fbe5>
     41b:	00 00                	add    BYTE PTR [eax],al
     41d:	02 01                	add    al,BYTE PTR [ecx]
     41f:	06                   	push   es
     420:	f9                   	stc    
     421:	00 00                	add    BYTE PTR [eax],al
     423:	00 02                	add    BYTE PTR [edx],al
     425:	0c 04                	or     al,0x4
     427:	5e                   	pop    esi
     428:	01 00                	add    DWORD PTR [eax],eax
     42a:	00 02                	add    BYTE PTR [edx],al
     42c:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
     42f:	00 00                	add    BYTE PTR [eax],al
     431:	00 05 29 01 00 00    	add    BYTE PTR ds:0x129,al
     437:	02 33                	add    dh,BYTE PTR [ebx]
     439:	0c 98                	or     al,0x98
     43b:	00 00                	add    BYTE PTR [eax],al
     43d:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
     443:	9f                   	lahf   
     444:	04 04                	add    al,0x4
     446:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     449:	00 06                	add    BYTE PTR [esi],al
     44b:	17                   	pop    ss
     44c:	0e                   	push   cs
     44d:	00 00                	add    BYTE PTR [eax],al
     44f:	01 45 0d             	add    DWORD PTR [ebp+0xd],eax
     452:	4f                   	dec    edi
     453:	00 00                	add    BYTE PTR [eax],al
     455:	00 aa 04 00 9f 1e    	add    BYTE PTR [edx+0x1e9f0004],ch
     45b:	00 00                	add    BYTE PTR [eax],al
     45d:	00 01                	add    BYTE PTR [ecx],al
     45f:	9c                   	pushf  
     460:	c8 00 00 00          	enter  0x0,0x0
     464:	07                   	pop    es
     465:	73 74                	jae    4db <sysEnter_Vector-0x12fb25>
     467:	72 00                	jb     469 <sysEnter_Vector-0x12fb97>
     469:	01 45 18             	add    DWORD PTR [ebp+0x18],eax
     46c:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     46f:	00 02                	add    BYTE PTR [edx],al
     471:	91                   	xchg   ecx,eax
     472:	00 00                	add    BYTE PTR [eax],al
     474:	08 04 02             	or     BYTE PTR [edx+eax*1],al
     477:	00 00                	add    BYTE PTR [eax],al
     479:	01 38                	add    DWORD PTR [eax],edi
     47b:	05 4f 00 00 00       	add    eax,0x4f
     480:	4a                   	dec    edx
     481:	04 00                	add    al,0x0
     483:	9f                   	lahf   
     484:	60                   	pusha  
     485:	00 00                	add    BYTE PTR [eax],al
     487:	00 01                	add    BYTE PTR [ecx],al
     489:	9c                   	pushf  
     48a:	18 01                	sbb    BYTE PTR [ecx],al
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	07                   	pop    es
     48f:	73 74                	jae    505 <sysEnter_Vector-0x12fafb>
     491:	72 00                	jb     493 <sysEnter_Vector-0x12fb6d>
     493:	01 38                	add    DWORD PTR [eax],edi
     495:	11 6b 00             	adc    DWORD PTR [ebx+0x0],ebp
     498:	00 00                	add    BYTE PTR [eax],al
     49a:	02 91 00 09 72 65    	add    dl,BYTE PTR [ecx+0x65720900]
     4a0:	73 00                	jae    4a2 <sysEnter_Vector-0x12fb5e>
     4a2:	01 3a                	add    DWORD PTR [edx],edi
     4a4:	09 4f 00             	or     DWORD PTR [edi+0x0],ecx
     4a7:	00 00                	add    BYTE PTR [eax],al
     4a9:	02 91 74 0a 65 04    	add    dl,BYTE PTR [ecx+0x4650a74]
     4af:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
     4b5:	09 69 00             	or     DWORD PTR [ecx+0x0],ebp
     4b8:	01 3e                	add    DWORD PTR [esi],edi
     4ba:	0e                   	push   cs
     4bb:	4f                   	dec    edi
     4bc:	00 00                	add    BYTE PTR [eax],al
     4be:	00 02                	add    BYTE PTR [edx],al
     4c0:	91                   	xchg   ecx,eax
     4c1:	70 00                	jo     4c3 <sysEnter_Vector-0x12fb3d>
     4c3:	00 06                	add    BYTE PTR [esi],al
     4c5:	fe 01                	inc    BYTE PTR [ecx]
     4c7:	00 00                	add    BYTE PTR [eax],al
     4c9:	01 26                	add    DWORD PTR [esi],esp
     4cb:	08 6b 00             	or     BYTE PTR [ebx+0x0],ch
     4ce:	00 00                	add    BYTE PTR [eax],al
     4d0:	8c 03                	mov    WORD PTR [ebx],es
     4d2:	00 9f be 00 00 00    	add    BYTE PTR [edi+0xbe],bl
     4d8:	01 9c 69 01 00 00 07 	add    DWORD PTR [ecx+ebp*2+0x7000001],ebx
     4df:	6e                   	outs   dx,BYTE PTR ds:[esi]
     4e0:	00 01                	add    BYTE PTR [ecx],al
     4e2:	26 12 4f 00          	adc    cl,BYTE PTR es:[edi+0x0]
     4e6:	00 00                	add    BYTE PTR [eax],al
     4e8:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     4ee:	01 26                	add    DWORD PTR [esi],esp
     4f0:	1a 6b 00             	sbb    ch,BYTE PTR [ebx+0x0]
     4f3:	00 00                	add    BYTE PTR [eax],al
     4f5:	02 91 04 09 69 00    	add    dl,BYTE PTR [ecx+0x690904]
     4fb:	01 28                	add    DWORD PTR [eax],ebp
     4fd:	0a 4f 00             	or     cl,BYTE PTR [edi+0x0]
     500:	00 00                	add    BYTE PTR [eax],al
     502:	02 91 6c 0b 0a 02    	add    dl,BYTE PTR [ecx+0x20a0b6c]
     508:	00 00                	add    BYTE PTR [eax],al
     50a:	01 28                	add    DWORD PTR [eax],ebp
     50c:	0d 4f 00 00 00       	or     eax,0x4f
     511:	02 91 68 00 0c f9    	add    dl,BYTE PTR [ecx-0x6f3ff98]
     517:	01 00                	add    DWORD PTR [eax],eax
     519:	00 01                	add    BYTE PTR [ecx],al
     51b:	16                   	push   ss
     51c:	0e                   	push   cs
     51d:	d0 02                	rol    BYTE PTR [edx],1
     51f:	00 9f bc 00 00 00    	add    BYTE PTR [edi+0xbc],bl
     525:	01 9c b6 01 00 00 07 	add    DWORD PTR [esi+esi*4+0x7000001],ebx
     52c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     52d:	00 01                	add    BYTE PTR [ecx],al
     52f:	16                   	push   ss
     530:	17                   	pop    ss
     531:	4f                   	dec    edi
     532:	00 00                	add    BYTE PTR [eax],al
     534:	00 02                	add    BYTE PTR [edx],al
     536:	91                   	xchg   ecx,eax
     537:	00 07                	add    BYTE PTR [edi],al
     539:	73 00                	jae    53b <sysEnter_Vector-0x12fac5>
     53b:	01 16                	add    DWORD PTR [esi],edx
     53d:	1f                   	pop    ds
     53e:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     541:	00 02                	add    BYTE PTR [edx],al
     543:	91                   	xchg   ecx,eax
     544:	04 09                	add    al,0x9
     546:	69 00 01 18 0a 4f    	imul   eax,DWORD PTR [eax],0x4f0a1801
     54c:	00 00                	add    BYTE PTR [eax],al
     54e:	00 02                	add    BYTE PTR [edx],al
     550:	91                   	xchg   ecx,eax
     551:	6c                   	ins    BYTE PTR es:[edi],dx
     552:	0b 0a                	or     ecx,DWORD PTR [edx]
     554:	02 00                	add    al,BYTE PTR [eax]
     556:	00 01                	add    BYTE PTR [ecx],al
     558:	18 0d 4f 00 00 00    	sbb    BYTE PTR ds:0x4f,cl
     55e:	02 91 68 00 0d 0f    	add    dl,BYTE PTR [ecx+0xf0d0068]
     564:	02 00                	add    al,BYTE PTR [eax]
     566:	00 01                	add    BYTE PTR [ecx],al
     568:	0a 06                	or     al,BYTE PTR [esi]
     56a:	54                   	push   esp
     56b:	02 00                	add    al,BYTE PTR [eax]
     56d:	9f                   	lahf   
     56e:	7c 00                	jl     570 <sysEnter_Vector-0x12fa90>
     570:	00 00                	add    BYTE PTR [eax],al
     572:	01 9c 07 73 00 01 0a 	add    DWORD PTR [edi+eax*1+0xa010073],ebx
     579:	14 6b                	adc    al,0x6b
     57b:	00 00                	add    BYTE PTR [eax],al
     57d:	00 02                	add    BYTE PTR [edx],al
     57f:	91                   	xchg   ecx,eax
     580:	00 09                	add    BYTE PTR [ecx],cl
     582:	69 00 01 0c 0a 4f    	imul   eax,DWORD PTR [eax],0x4f0a0c01
     588:	00 00                	add    BYTE PTR [eax],al
     58a:	00 02                	add    BYTE PTR [edx],al
     58c:	91                   	xchg   ecx,eax
     58d:	6c                   	ins    BYTE PTR es:[edi],dx
     58e:	09 6a 00             	or     DWORD PTR [edx+0x0],ebp
     591:	01 0c 0d 4f 00 00 00 	add    DWORD PTR [ecx*1+0x4f],ecx
     598:	02 91 68 09 63 00    	add    dl,BYTE PTR [ecx+0x630968]
     59e:	01 0d 0b 71 00 00    	add    DWORD PTR ds:0x710b,ecx
     5a4:	00 02                	add    BYTE PTR [edx],al
     5a6:	91                   	xchg   ecx,eax
     5a7:	67 00 00             	add    BYTE PTR [bx+si],al
     5aa:	cf                   	iret   
     5ab:	01 00                	add    DWORD PTR [eax],eax
     5ad:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     5b0:	f2 02 00             	repnz add al,BYTE PTR [eax]
     5b3:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     5b6:	28 00                	sub    BYTE PTR [eax],al
     5b8:	00 00                	add    BYTE PTR [eax],al
     5ba:	0c 54                	or     al,0x54
     5bc:	02 00                	add    al,BYTE PTR [eax]
     5be:	00 fe                	add    dh,bh
     5c0:	00 00                	add    BYTE PTR [eax],al
     5c2:	00 c8                	add    al,cl
     5c4:	04 00                	add    al,0x0
     5c6:	9f                   	lahf   
     5c7:	7a 01                	jp     5ca <sysEnter_Vector-0x12fa36>
     5c9:	00 00                	add    BYTE PTR [eax],al
     5cb:	4e                   	dec    esi
     5cc:	04 00                	add    al,0x0
     5ce:	00 02                	add    BYTE PTR [edx],al
     5d0:	01 06                	add    DWORD PTR [esi],eax
     5d2:	f2 00 00             	repnz add BYTE PTR [eax],al
     5d5:	00 02                	add    BYTE PTR [edx],al
     5d7:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
     5dd:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     5e4:	02 08                	add    cl,BYTE PTR [eax]
     5e6:	05 00 00 00 00       	add    eax,0x0
     5eb:	02 01                	add    al,BYTE PTR [ecx]
     5ed:	08 f0                	or     al,dh
     5ef:	00 00                	add    BYTE PTR [eax],al
     5f1:	00 02                	add    BYTE PTR [edx],al
     5f3:	02 07                	add    al,BYTE PTR [edi]
     5f5:	0e                   	push   cs
     5f6:	00 00                	add    BYTE PTR [eax],al
     5f8:	00 04 78             	add    BYTE PTR [eax+edi*2],al
     5fb:	02 00                	add    al,BYTE PTR [eax]
     5fd:	00 02                	add    BYTE PTR [edx],al
     5ff:	34 19                	xor    al,0x19
     601:	5b                   	pop    ebx
     602:	00 00                	add    BYTE PTR [eax],al
     604:	00 02                	add    BYTE PTR [edx],al
     606:	04 07                	add    al,0x7
     608:	e3 00                	jecxz  60a <sysEnter_Vector-0x12f9f6>
     60a:	00 00                	add    BYTE PTR [eax],al
     60c:	02 08                	add    cl,BYTE PTR [eax]
     60e:	07                   	pop    es
     60f:	d9 00                	fld    DWORD PTR [eax]
     611:	00 00                	add    BYTE PTR [eax],al
     613:	04 8f                	add    al,0x8f
     615:	02 00                	add    al,BYTE PTR [eax]
     617:	00 02                	add    BYTE PTR [edx],al
     619:	56                   	push   esi
     61a:	1a 5b 00             	sbb    bl,BYTE PTR [ebx+0x0]
     61d:	00 00                	add    BYTE PTR [eax],al
     61f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     626:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     629:	5e                   	pop    esi
     62a:	01 00                	add    DWORD PTR [eax],eax
     62c:	00 02                	add    BYTE PTR [edx],al
     62e:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
     631:	00 00                	add    BYTE PTR [eax],al
     633:	00 02                	add    BYTE PTR [edx],al
     635:	01 06                	add    DWORD PTR [esi],eax
     637:	f9                   	stc    
     638:	00 00                	add    BYTE PTR [eax],al
     63a:	00 05 8a 00 00 00    	add    BYTE PTR ds:0x8a,al
     640:	06                   	push   es
     641:	47                   	inc    edi
     642:	02 00                	add    al,BYTE PTR [eax]
     644:	00 03                	add    BYTE PTR [ebx],al
     646:	35 10 a8 00 00       	xor    eax,0xa810
     64b:	00 05 03 30 7f 00    	add    BYTE PTR ds:0x7f3003,al
     651:	9f                   	lahf   
     652:	07                   	pop    es
     653:	04 69                	add    al,0x69
     655:	00 00                	add    BYTE PTR [eax],al
     657:	00 06                	add    BYTE PTR [esi],al
     659:	99                   	cdq    
     65a:	02 00                	add    al,BYTE PTR [eax]
     65c:	00 03                	add    BYTE PTR [ebx],al
     65e:	36 0e                	ss push cs
     660:	4f                   	dec    edi
     661:	00 00                	add    BYTE PTR [eax],al
     663:	00 05 03 2c 7f 00    	add    BYTE PTR ds:0x7f2c03,al
     669:	9f                   	lahf   
     66a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     66d:	de 00                	fiadd  WORD PTR [eax]
     66f:	00 00                	add    BYTE PTR [eax],al
     671:	07                   	pop    es
     672:	04 8a                	add    al,0x8a
     674:	00 00                	add    BYTE PTR [eax],al
     676:	00 06                	add    BYTE PTR [esi],al
     678:	29 01                	sub    DWORD PTR [ecx],eax
     67a:	00 00                	add    BYTE PTR [eax],al
     67c:	04 33                	add    al,0x33
     67e:	0c df                	or     al,0xdf
     680:	00 00                	add    BYTE PTR [eax],al
     682:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
     688:	9f                   	lahf   
     689:	07                   	pop    es
     68a:	04 c7                	add    al,0xc7
     68c:	00 00                	add    BYTE PTR [eax],al
     68e:	00 08                	add    BYTE PTR [eax],cl
     690:	91                   	xchg   ecx,eax
     691:	00 00                	add    BYTE PTR [eax],al
     693:	00 f5                	add    ch,dh
     695:	00 00                	add    BYTE PTR [eax],al
     697:	00 09                	add    BYTE PTR [ecx],cl
     699:	5b                   	pop    ebx
     69a:	00 00                	add    BYTE PTR [eax],al
     69c:	00 02                	add    BYTE PTR [edx],al
     69e:	00 05 e5 00 00 00    	add    BYTE PTR ds:0xe5,al
     6a4:	06                   	push   es
     6a5:	24 02                	and    al,0x2
     6a7:	00 00                	add    BYTE PTR [eax],al
     6a9:	01 0d 0c f5 00 00    	add    DWORD PTR ds:0xf50c,ecx
     6af:	00 05 03 c0 75 00    	add    BYTE PTR ds:0x75c003,al
     6b5:	9f                   	lahf   
     6b6:	0a 62 02             	or     ah,BYTE PTR [edx+0x2]
     6b9:	00 00                	add    BYTE PTR [eax],al
     6bb:	01 29                	add    DWORD PTR [ecx],ebp
     6bd:	0e                   	push   cs
     6be:	e4 05                	in     al,0x5
     6c0:	00 9f 5e 00 00 00    	add    BYTE PTR [edi+0x5e],bl
     6c6:	01 9c 32 01 00 00 0b 	add    DWORD PTR [edx+esi*1+0xb000001],ebx
     6cd:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     6d0:	00 01                	add    BYTE PTR [ecx],al
     6d2:	2b 0a                	sub    ecx,DWORD PTR [edx]
     6d4:	32 01                	xor    al,BYTE PTR [ecx]
     6d6:	00 00                	add    BYTE PTR [eax],al
     6d8:	02 91 66 00 08 8a    	add    dl,BYTE PTR [ecx-0x75f7ff9a]
     6de:	00 00                	add    BYTE PTR [eax],al
     6e0:	00 42 01             	add    BYTE PTR [edx+0x1],al
     6e3:	00 00                	add    BYTE PTR [eax],al
     6e5:	09 5b 00             	or     DWORD PTR [ebx+0x0],ebx
     6e8:	00 00                	add    BYTE PTR [eax],al
     6ea:	09 00                	or     DWORD PTR [eax],eax
     6ec:	0a 2f                	or     ch,BYTE PTR [edi]
     6ee:	02 00                	add    al,BYTE PTR [eax]
     6f0:	00 01                	add    BYTE PTR [ecx],al
     6f2:	1f                   	pop    ds
     6f3:	0e                   	push   cs
     6f4:	86 05 00 9f 5e 00    	xchg   BYTE PTR ds:0x5e9f00,al
     6fa:	00 00                	add    BYTE PTR [eax],al
     6fc:	01 9c 68 01 00 00 0b 	add    DWORD PTR [eax+ebp*2+0xb000001],ebx
     703:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     706:	00 01                	add    BYTE PTR [ecx],al
     708:	21 0a                	and    DWORD PTR [edx],ecx
     70a:	32 01                	xor    al,BYTE PTR [ecx]
     70c:	00 00                	add    BYTE PTR [eax],al
     70e:	02 91 66 00 0c 81    	add    dl,BYTE PTR [ecx-0x7ef3ff9a]
     714:	02 00                	add    al,BYTE PTR [eax]
     716:	00 01                	add    BYTE PTR [ecx],al
     718:	0f 0e                	femms  
     71a:	c8 04 00 9f          	enter  0x4,0x9f
     71e:	be 00 00 00 01       	mov    esi,0x1000000
     723:	9c                   	pushf  
     724:	c6 01 00             	mov    BYTE PTR [ecx],0x0
     727:	00 0d 78 00 01 0f    	add    BYTE PTR ds:0xf010078,cl
     72d:	1b 33                	sbb    esi,DWORD PTR [ebx]
     72f:	00 00                	add    BYTE PTR [eax],al
     731:	00 02                	add    BYTE PTR [edx],al
     733:	91                   	xchg   ecx,eax
     734:	00 0d 79 00 01 0f    	add    BYTE PTR ds:0xf010079,cl
     73a:	22 33                	and    dh,BYTE PTR [ebx]
     73c:	00 00                	add    BYTE PTR [eax],al
     73e:	00 02                	add    BYTE PTR [edx],al
     740:	91                   	xchg   ecx,eax
     741:	04 0b                	add    al,0xb
     743:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     746:	00 01                	add    BYTE PTR [ecx],al
     748:	11 0a                	adc    DWORD PTR [edx],ecx
     74a:	32 01                	xor    al,BYTE PTR [ecx]
     74c:	00 00                	add    BYTE PTR [eax],al
     74e:	02 91 66 0e 42 02    	add    dl,BYTE PTR [ecx+0x2420e66]
     754:	00 00                	add    BYTE PTR [eax],al
     756:	01 12                	add    DWORD PTR [edx],edx
     758:	0a c6                	or     al,dh
     75a:	01 00                	add    DWORD PTR [eax],eax
     75c:	00 02                	add    BYTE PTR [edx],al
     75e:	91                   	xchg   ecx,eax
     75f:	63 0e                	arpl   WORD PTR [esi],cx
     761:	8a 02                	mov    al,BYTE PTR [edx]
     763:	00 00                	add    BYTE PTR [eax],al
     765:	01 12                	add    DWORD PTR [edx],edx
     767:	13 c6                	adc    eax,esi
     769:	01 00                	add    DWORD PTR [eax],eax
     76b:	00 02                	add    BYTE PTR [edx],al
     76d:	91                   	xchg   ecx,eax
     76e:	60                   	pusha  
     76f:	00 0f                	add    BYTE PTR [edi],cl
     771:	8a 00                	mov    al,BYTE PTR [eax]
     773:	00 00                	add    BYTE PTR [eax],al
     775:	09 5b 00             	or     DWORD PTR [ebx+0x0],ebx
     778:	00 00                	add    BYTE PTR [eax],al
     77a:	02 00                	add    al,BYTE PTR [eax]
     77c:	00 22                	add    BYTE PTR [edx],ah
     77e:	03 00                	add    eax,DWORD PTR [eax]
     780:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     783:	d0 03                	rol    BYTE PTR [ebx],1
     785:	00 00                	add    BYTE PTR [eax],al
     787:	04 01                	add    al,0x1
     789:	28 00                	sub    BYTE PTR [eax],al
     78b:	00 00                	add    BYTE PTR [eax],al
     78d:	0c 08                	or     al,0x8
     78f:	03 00                	add    eax,DWORD PTR [eax]
     791:	00 fe                	add    dh,bh
     793:	00 00                	add    BYTE PTR [eax],al
     795:	00 42 06             	add    BYTE PTR [edx+0x6],al
     798:	00 9f eb 02 00 00    	add    BYTE PTR [edi+0x2eb],bl
     79e:	11 05 00 00 02 01    	adc    DWORD PTR ds:0x1020000,eax
     7a4:	08 f0                	or     al,dh
     7a6:	00 00                	add    BYTE PTR [eax],al
     7a8:	00 02                	add    BYTE PTR [edx],al
     7aa:	02 07                	add    al,BYTE PTR [edi]
     7ac:	0e                   	push   cs
     7ad:	00 00                	add    BYTE PTR [eax],al
     7af:	00 02                	add    BYTE PTR [edx],al
     7b1:	04 07                	add    al,0x7
     7b3:	e3 00                	jecxz  7b5 <sysEnter_Vector-0x12f84b>
     7b5:	00 00                	add    BYTE PTR [eax],al
     7b7:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     7ba:	de 00                	fiadd  WORD PTR [eax]
     7bc:	00 00                	add    BYTE PTR [eax],al
     7be:	02 01                	add    al,BYTE PTR [ecx]
     7c0:	06                   	push   es
     7c1:	f2 00 00             	repnz add BYTE PTR [eax],al
     7c4:	00 02                	add    BYTE PTR [edx],al
     7c6:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
     7cc:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     7d3:	02 08                	add    cl,BYTE PTR [eax]
     7d5:	05 00 00 00 00       	add    eax,0x0
     7da:	02 08                	add    cl,BYTE PTR [eax]
     7dc:	07                   	pop    es
     7dd:	d9 00                	fld    DWORD PTR [eax]
     7df:	00 00                	add    BYTE PTR [eax],al
     7e1:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     7e8:	04 04                	add    al,0x4
     7ea:	71 00                	jno    7ec <sysEnter_Vector-0x12f814>
     7ec:	00 00                	add    BYTE PTR [eax],al
     7ee:	02 01                	add    al,BYTE PTR [ecx]
     7f0:	06                   	push   es
     7f1:	f9                   	stc    
     7f2:	00 00                	add    BYTE PTR [eax],al
     7f4:	00 05 78 02 00 00    	add    BYTE PTR ds:0x278,al
     7fa:	02 34 19             	add    dh,BYTE PTR [ecx+ebx*1]
     7fd:	33 00                	xor    eax,DWORD PTR [eax]
     7ff:	00 00                	add    BYTE PTR [eax],al
     801:	05 d2 02 00 00       	add    eax,0x2d2
     806:	03 d1                	add    edx,ecx
     808:	17                   	pop    ss
     809:	33 00                	xor    eax,DWORD PTR [eax]
     80b:	00 00                	add    BYTE PTR [eax],al
     80d:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     810:	5e                   	pop    esi
     811:	01 00                	add    DWORD PTR [eax],eax
     813:	00 02                	add    BYTE PTR [edx],al
     815:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
     818:	00 00                	add    BYTE PTR [eax],al
     81a:	00 06                	add    BYTE PTR [esi],al
     81c:	ac                   	lods   al,BYTE PTR ds:[esi]
     81d:	03 00                	add    eax,DWORD PTR [eax]
     81f:	00 07                	add    BYTE PTR [edi],al
     821:	04 33                	add    al,0x33
     823:	00 00                	add    BYTE PTR [eax],al
     825:	00 04 15 12 9a 01 00 	add    BYTE PTR [edx*1+0x19a12],al
     82c:	00 07                	add    BYTE PTR [edi],al
     82e:	3e 04 00             	ds add al,0x0
     831:	00 00                	add    BYTE PTR [eax],al
     833:	07                   	pop    es
     834:	83 04 00 00          	add    DWORD PTR [eax+eax*1],0x0
     838:	01 07                	add    DWORD PTR [edi],eax
     83a:	c5 02                	lds    eax,FWORD PTR [edx]
     83c:	00 00                	add    BYTE PTR [eax],al
     83e:	02 07                	add    al,BYTE PTR [edi]
     840:	8f 03                	pop    DWORD PTR [ebx]
     842:	00 00                	add    BYTE PTR [eax],al
     844:	03 07                	add    eax,DWORD PTR [edi]
     846:	ab                   	stos   DWORD PTR es:[edi],eax
     847:	02 00                	add    al,BYTE PTR [eax]
     849:	00 04 07             	add    BYTE PTR [edi+eax*1],al
     84c:	ac                   	lods   al,BYTE PTR ds:[esi]
     84d:	04 00                	add    al,0x0
     84f:	00 05 07 65 04 00    	add    BYTE PTR ds:0x46507,al
     855:	00 0a                	add    BYTE PTR [edx],cl
     857:	07                   	pop    es
     858:	d0 03                	rol    BYTE PTR [ebx],1
     85a:	00 00                	add    BYTE PTR [eax],al
     85c:	0b 07                	or     eax,DWORD PTR [edi]
     85e:	17                   	pop    ss
     85f:	04 00                	add    al,0x0
     861:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
     864:	9d                   	popf   
     865:	03 00                	add    eax,DWORD PTR [eax]
     867:	00 0d 07 b6 03 00    	add    BYTE PTR ds:0x3b607,cl
     86d:	00 0e                	add    BYTE PTR [esi],cl
     86f:	07                   	pop    es
     870:	b8 02 00 00 0f       	mov    eax,0xf000002
     875:	07                   	pop    es
     876:	f8                   	clc    
     877:	03 00                	add    eax,DWORD PTR [eax]
     879:	00 10                	add    BYTE PTR [eax],dl
     87b:	07                   	pop    es
     87c:	f1                   	icebp  
     87d:	04 00                	add    al,0x0
     87f:	00 11                	add    BYTE PTR [ecx],dl
     881:	07                   	pop    es
     882:	cf                   	iret   
     883:	04 00                	add    al,0x0
     885:	00 4f 07             	add    BYTE PTR [edi+0x7],cl
     888:	9d                   	popf   
     889:	04 00                	add    al,0x0
     88b:	00 50 07             	add    BYTE PTR [eax+0x7],dl
     88e:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
     891:	00 59 07             	add    BYTE PTR [ecx+0x7],bl
     894:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
     897:	00 61 07             	add    BYTE PTR [ecx+0x7],ah
     89a:	5c                   	pop    esp
     89b:	03 00                	add    eax,DWORD PTR [eax]
     89d:	00 97 08 4e 04 00    	add    BYTE PTR [edi+0x44e08],dl
     8a3:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     8a6:	08 24 04             	or     BYTE PTR [esp+eax*1],ah
     8a9:	00 00                	add    BYTE PTR [eax],al
     8ab:	64 01 08             	add    DWORD PTR fs:[eax],ecx
     8ae:	0e                   	push   cs
     8af:	05 00 00 65 01       	add    eax,0x1650000
     8b4:	08 38                	or     BYTE PTR [eax],bh
     8b6:	03 00                	add    eax,DWORD PTR [eax]
     8b8:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     8bb:	08 20                	or     BYTE PTR [eax],ah
     8bd:	05 00 00 67 01       	add    eax,0x1670000
     8c2:	08 c3                	or     bl,al
     8c4:	03 00                	add    eax,DWORD PTR [eax]
     8c6:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     8c9:	08 f9                	or     cl,bh
     8cb:	02 00                	add    al,BYTE PTR [eax]
     8cd:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     8d0:	08 72 04             	or     BYTE PTR [edx+0x4],dh
     8d3:	00 00                	add    BYTE PTR [eax],al
     8d5:	70 01                	jo     8d8 <sysEnter_Vector-0x12f728>
     8d7:	08 4c 03 00          	or     BYTE PTR [ebx+eax*1+0x0],cl
     8db:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
     8de:	08 ba 04 00 00 00    	or     BYTE PTR [edx+0x4],bh
     8e4:	03 08                	add    ecx,DWORD PTR [eax]
     8e6:	dd 03                	fld    QWORD PTR [ebx]
     8e8:	00 00                	add    BYTE PTR [eax],al
     8ea:	01 03                	add    DWORD PTR [ebx],eax
     8ec:	08 ec                	or     ah,ch
     8ee:	03 00                	add    eax,DWORD PTR [eax]
     8f0:	00 02                	add    BYTE PTR [edx],al
     8f2:	03 08                	add    ecx,DWORD PTR [eax]
     8f4:	7f 03                	jg     8f9 <sysEnter_Vector-0x12f707>
     8f6:	00 00                	add    BYTE PTR [eax],al
     8f8:	03 03                	add    eax,DWORD PTR [ebx]
     8fa:	08 d9                	or     cl,bl
     8fc:	02 00                	add    al,BYTE PTR [eax]
     8fe:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     901:	08 28                	or     BYTE PTR [eax],ch
     903:	03 00                	add    eax,DWORD PTR [eax]
     905:	00 05 03 08 70 03    	add    BYTE PTR ds:0x3700803,al
     90b:	00 00                	add    BYTE PTR [eax],al
     90d:	06                   	push   es
     90e:	03 08                	add    ecx,DWORD PTR [eax]
     910:	05 04 00 00 00       	add    eax,0x4
     915:	09 00                	or     DWORD PTR [eax],eax
     917:	09 29                	or     DWORD PTR [ecx],ebp
     919:	01 00                	add    DWORD PTR [eax],eax
     91b:	00 05 33 0c ac 01    	add    BYTE PTR ds:0x1ac0c33,al
     921:	00 00                	add    BYTE PTR [eax],al
     923:	05 03 20 7f 00       	add    eax,0x7f2003
     928:	9f                   	lahf   
     929:	04 04                	add    al,0x4
     92b:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     92e:	00 0a                	add    BYTE PTR [edx],cl
     930:	c8 04 00 00          	enter  0x4,0x0
     934:	01 3c 0f             	add    DWORD PTR [edi+ecx*1],edi
     937:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     93a:	00 06                	add    BYTE PTR [esi],al
     93c:	09 00                	or     DWORD PTR [eax],eax
     93e:	9f                   	lahf   
     93f:	27                   	daa    
     940:	00 00                	add    BYTE PTR [eax],al
     942:	00 01                	add    BYTE PTR [ecx],al
     944:	9c                   	pushf  
     945:	eb 01                	jmp    948 <sysEnter_Vector-0x12f6b8>
     947:	00 00                	add    BYTE PTR [eax],al
     949:	0b 62 75             	or     esp,DWORD PTR [edx+0x75]
     94c:	66 00 01             	data16 add BYTE PTR [ecx],al
     94f:	3c 1c                	cmp    al,0x1c
     951:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     954:	00 02                	add    BYTE PTR [edx],al
     956:	91                   	xchg   ecx,eax
     957:	00 0c 1b             	add    BYTE PTR [ebx+ebx*1],cl
     95a:	07                   	pop    es
     95b:	00 00                	add    BYTE PTR [eax],al
     95d:	01 3c 28             	add    DWORD PTR [eax+ebp*1],edi
     960:	84 00                	test   BYTE PTR [eax],al
     962:	00 00                	add    BYTE PTR [eax],al
     964:	02 91 04 00 0a f1    	add    dl,BYTE PTR [ecx-0xef5fffc]
     96a:	02 00                	add    al,BYTE PTR [eax]
     96c:	00 01                	add    BYTE PTR [ecx],al
     96e:	36 07                	ss pop es
     970:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     973:	00 d6                	add    dh,dl
     975:	08 00                	or     BYTE PTR [eax],al
     977:	9f                   	lahf   
     978:	30 00                	xor    BYTE PTR [eax],al
     97a:	00 00                	add    BYTE PTR [eax],al
     97c:	01 9c 24 02 00 00 0b 	add    DWORD PTR [esp+0xb000002],ebx
     983:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     986:	00 01                	add    BYTE PTR [ecx],al
     988:	36 15 6b 00 00 00    	ss adc eax,0x6b
     98e:	02 91 00 0c 1b 07    	add    dl,BYTE PTR [ecx+0x71b0c00]
     994:	00 00                	add    BYTE PTR [eax],al
     996:	01 36                	add    DWORD PTR [esi],esi
     998:	21 84 00 00 00 02 91 	and    DWORD PTR [eax+eax*1-0x6efe0000],eax
     99f:	04 00                	add    al,0x0
     9a1:	0d 96 04 00 00       	or     eax,0x496
     9a6:	01 19                	add    DWORD PTR [ecx],ebx
     9a8:	0f 11 07             	movups XMMWORD PTR [edi],xmm0
     9ab:	00 9f c5 01 00 00    	add    BYTE PTR [edi+0x1c5],bl
     9b1:	01 9c 9e 02 00 00 0c 	add    DWORD PTR [esi+ebx*4+0xc000002],ebx
     9b8:	06                   	push   es
     9b9:	05 00 00 01 19       	add    eax,0x19010000
     9be:	1c 6b                	sbb    al,0x6b
     9c0:	00 00                	add    BYTE PTR [eax],al
     9c2:	00 02                	add    BYTE PTR [edx],al
     9c4:	91                   	xchg   ecx,eax
     9c5:	00 0c 46             	add    BYTE PTR [esi+eax*2],cl
     9c8:	03 00                	add    eax,DWORD PTR [eax]
     9ca:	00 01                	add    BYTE PTR [ecx],al
     9cc:	19 2b                	sbb    DWORD PTR [ebx],ebp
     9ce:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     9d1:	00 02                	add    BYTE PTR [edx],al
     9d3:	91                   	xchg   ecx,eax
     9d4:	04 0e                	add    al,0xe
     9d6:	1a 03                	sbb    al,BYTE PTR [ebx]
     9d8:	00 00                	add    BYTE PTR [eax],al
     9da:	01 1b                	add    DWORD PTR [ebx],ebx
     9dc:	0e                   	push   cs
     9dd:	78 00                	js     9df <sysEnter_Vector-0x12f621>
     9df:	00 00                	add    BYTE PTR [eax],al
     9e1:	02 91 6c 0f 2e 07    	add    dl,BYTE PTR [ecx+0x72e0f6c]
     9e7:	00 9f e9 00 00 00    	add    BYTE PTR [edi+0xe9],bl
     9ed:	84 02                	test   BYTE PTR [edx],al
     9ef:	00 00                	add    BYTE PTR [eax],al
     9f1:	10 63 6e             	adc    BYTE PTR [ebx+0x6e],ah
     9f4:	74 00                	je     9f6 <sysEnter_Vector-0x12f60a>
     9f6:	01 1d 0e 4f 00 00    	add    DWORD PTR ds:0x4f0e,ebx
     9fc:	00 02                	add    BYTE PTR [edx],al
     9fe:	91                   	xchg   ecx,eax
     9ff:	68 00 11 17 08       	push   0x8171100
     a04:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
     a0a:	10 63 6e             	adc    BYTE PTR [ebx+0x6e],ah
     a0d:	74 00                	je     a0f <sysEnter_Vector-0x12f5f1>
     a0f:	01 29                	add    DWORD PTR [ecx],ebp
     a11:	0e                   	push   cs
     a12:	4f                   	dec    edi
     a13:	00 00                	add    BYTE PTR [eax],al
     a15:	00 02                	add    BYTE PTR [edx],al
     a17:	91                   	xchg   ecx,eax
     a18:	64 00 00             	add    BYTE PTR fs:[eax],al
     a1b:	0a ea                	or     ch,dl
     a1d:	02 00                	add    al,BYTE PTR [eax]
     a1f:	00 01                	add    BYTE PTR [ecx],al
     a21:	14 0d                	adc    al,0xd
     a23:	4f                   	dec    edi
     a24:	00 00                	add    BYTE PTR [eax],al
     a26:	00 ea                	add    dl,ch
     a28:	06                   	push   es
     a29:	00 9f 27 00 00 00    	add    BYTE PTR [edi+0x27],bl
     a2f:	01 9c d7 02 00 00 0c 	add    DWORD PTR [edi+edx*8+0xc000002],ebx
     a36:	06                   	push   es
     a37:	05 00 00 01 14       	add    eax,0x14010000
     a3c:	1a 6b 00             	sbb    ch,BYTE PTR [ebx+0x0]
     a3f:	00 00                	add    BYTE PTR [eax],al
     a41:	02 91 00 0c 46 03    	add    dl,BYTE PTR [ecx+0x3460c00]
     a47:	00 00                	add    BYTE PTR [eax],al
     a49:	01 14 29             	add    DWORD PTR [ecx+ebp*1],edx
     a4c:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     a4f:	00 02                	add    BYTE PTR [edx],al
     a51:	91                   	xchg   ecx,eax
     a52:	04 00                	add    al,0x0
     a54:	12 fe                	adc    bh,dh
     a56:	04 00                	add    al,0x0
     a58:	00 01                	add    BYTE PTR [ecx],al
     a5a:	09 05 4f 00 00 00    	or     DWORD PTR ds:0x4f,eax
     a60:	42                   	inc    edx
     a61:	06                   	push   es
     a62:	00 9f a8 00 00 00    	add    BYTE PTR [edi+0xa8],bl
     a68:	01 9c 0c 06 05 00 00 	add    DWORD PTR [esp+ecx*1+0x506],ebx
     a6f:	01 09                	add    DWORD PTR [ecx],ecx
     a71:	13 6b 00             	adc    ebp,DWORD PTR [ebx+0x0]
     a74:	00 00                	add    BYTE PTR [eax],al
     a76:	02 91 00 0c 46 03    	add    dl,BYTE PTR [ecx+0x3460c00]
     a7c:	00 00                	add    BYTE PTR [eax],al
     a7e:	01 09                	add    DWORD PTR [ecx],ecx
     a80:	22 6b 00             	and    ch,BYTE PTR [ebx+0x0]
     a83:	00 00                	add    BYTE PTR [eax],al
     a85:	02 91 04 11 58 06    	add    dl,BYTE PTR [ecx+0x6581104]
     a8b:	00 9f 88 00 00 00    	add    BYTE PTR [edi+0x88],bl
     a91:	10 63 6e             	adc    BYTE PTR [ebx+0x6e],ah
     a94:	74 00                	je     a96 <sysEnter_Vector-0x12f56a>
     a96:	01 0b                	add    DWORD PTR [ebx],ecx
     a98:	0e                   	push   cs
     a99:	4f                   	dec    edi
     a9a:	00 00                	add    BYTE PTR [eax],al
     a9c:	00 02                	add    BYTE PTR [edx],al
     a9e:	91                   	xchg   ecx,eax
     a9f:	6c                   	ins    BYTE PTR es:[edi],dx
     aa0:	00 00                	add    BYTE PTR [eax],al
     aa2:	00 b1 09 00 00 04    	add    BYTE PTR [ecx+0x4000009],dh
     aa8:	00 fa                	add    dl,bh
     aaa:	04 00                	add    al,0x0
     aac:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     aaf:	28 00                	sub    BYTE PTR [eax],al
     ab1:	00 00                	add    BYTE PTR [eax],al
     ab3:	0c 05                	or     al,0x5
     ab5:	07                   	pop    es
     ab6:	00 00                	add    BYTE PTR [eax],al
     ab8:	fe 00                	inc    BYTE PTR [eax]
     aba:	00 00                	add    BYTE PTR [eax],al
     abc:	2d 09 00 9f ef       	sub    eax,0xef9f0009
     ac1:	08 00                	or     BYTE PTR [eax],al
     ac3:	00 c9                	add    cl,cl
     ac5:	06                   	push   es
     ac6:	00 00                	add    BYTE PTR [eax],al
     ac8:	02 01                	add    al,BYTE PTR [ecx]
     aca:	08 f0                	or     al,dh
     acc:	00 00                	add    BYTE PTR [eax],al
     ace:	00 02                	add    BYTE PTR [edx],al
     ad0:	02 07                	add    al,BYTE PTR [edi]
     ad2:	0e                   	push   cs
     ad3:	00 00                	add    BYTE PTR [eax],al
     ad5:	00 02                	add    BYTE PTR [edx],al
     ad7:	04 07                	add    al,0x7
     ad9:	e3 00                	jecxz  adb <sysEnter_Vector-0x12f525>
     adb:	00 00                	add    BYTE PTR [eax],al
     add:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     ae0:	de 00                	fiadd  WORD PTR [eax]
     ae2:	00 00                	add    BYTE PTR [eax],al
     ae4:	02 01                	add    al,BYTE PTR [ecx]
     ae6:	06                   	push   es
     ae7:	f2 00 00             	repnz add BYTE PTR [eax],al
     aea:	00 02                	add    BYTE PTR [edx],al
     aec:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
     af2:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     af9:	02 08                	add    cl,BYTE PTR [eax]
     afb:	05 00 00 00 00       	add    eax,0x0
     b00:	02 08                	add    cl,BYTE PTR [eax]
     b02:	07                   	pop    es
     b03:	d9 00                	fld    DWORD PTR [eax]
     b05:	00 00                	add    BYTE PTR [eax],al
     b07:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b0e:	04 04                	add    al,0x4
     b10:	05 04 73 00 00       	add    eax,0x7304
     b15:	00 02                	add    BYTE PTR [edx],al
     b17:	01 06                	add    DWORD PTR [esi],eax
     b19:	f9                   	stc    
     b1a:	00 00                	add    BYTE PTR [eax],al
     b1c:	00 06                	add    BYTE PTR [esi],al
     b1e:	73 00                	jae    b20 <sysEnter_Vector-0x12f4e0>
     b20:	00 00                	add    BYTE PTR [eax],al
     b22:	07                   	pop    es
     b23:	10 07                	adc    BYTE PTR [edi],al
     b25:	00 00                	add    BYTE PTR [eax],al
     b27:	02 2e                	add    ch,BYTE PTR [esi]
     b29:	18 25 00 00 00 07    	sbb    BYTE PTR ds:0x7000000,ah
     b2f:	ca 05 00             	retf   0x5
     b32:	00 02                	add    BYTE PTR [edx],al
     b34:	31 19                	xor    DWORD PTR [ecx],ebx
     b36:	2c 00                	sub    al,0x0
     b38:	00 00                	add    BYTE PTR [eax],al
     b3a:	07                   	pop    es
     b3b:	78 02                	js     b3f <sysEnter_Vector-0x12f4c1>
     b3d:	00 00                	add    BYTE PTR [eax],al
     b3f:	02 34 19             	add    dh,BYTE PTR [ecx+ebx*1]
     b42:	33 00                	xor    eax,DWORD PTR [eax]
     b44:	00 00                	add    BYTE PTR [eax],al
     b46:	07                   	pop    es
     b47:	8f 02                	pop    DWORD PTR [edx]
     b49:	00 00                	add    BYTE PTR [eax],al
     b4b:	02 56 1a             	add    dl,BYTE PTR [esi+0x1a]
     b4e:	33 00                	xor    eax,DWORD PTR [eax]
     b50:	00 00                	add    BYTE PTR [eax],al
     b52:	07                   	pop    es
     b53:	d2 02                	rol    BYTE PTR [edx],cl
     b55:	00 00                	add    BYTE PTR [eax],al
     b57:	03 d1                	add    edx,ecx
     b59:	17                   	pop    ss
     b5a:	33 00                	xor    eax,DWORD PTR [eax]
     b5c:	00 00                	add    BYTE PTR [eax],al
     b5e:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     b61:	5e                   	pop    esi
     b62:	01 00                	add    DWORD PTR [eax],eax
     b64:	00 02                	add    BYTE PTR [edx],al
     b66:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
     b69:	00 00                	add    BYTE PTR [eax],al
     b6b:	00 08                	add    BYTE PTR [eax],cl
     b6d:	ac                   	lods   al,BYTE PTR ds:[esi]
     b6e:	03 00                	add    eax,DWORD PTR [eax]
     b70:	00 07                	add    BYTE PTR [edi],al
     b72:	04 33                	add    al,0x33
     b74:	00 00                	add    BYTE PTR [eax],al
     b76:	00 06                	add    BYTE PTR [esi],al
     b78:	15 12 c5 01 00       	adc    eax,0x1c512
     b7d:	00 09                	add    BYTE PTR [ecx],cl
     b7f:	3e 04 00             	ds add al,0x0
     b82:	00 00                	add    BYTE PTR [eax],al
     b84:	09 83 04 00 00 01    	or     DWORD PTR [ebx+0x1000004],eax
     b8a:	09 c5                	or     ebp,eax
     b8c:	02 00                	add    al,BYTE PTR [eax]
     b8e:	00 02                	add    BYTE PTR [edx],al
     b90:	09 8f 03 00 00 03    	or     DWORD PTR [edi+0x3000003],ecx
     b96:	09 ab 02 00 00 04    	or     DWORD PTR [ebx+0x4000002],ebp
     b9c:	09 ac 04 00 00 05 09 	or     DWORD PTR [esp+eax*1+0x9050000],ebp
     ba3:	65 04 00             	gs add al,0x0
     ba6:	00 0a                	add    BYTE PTR [edx],cl
     ba8:	09 d0                	or     eax,edx
     baa:	03 00                	add    eax,DWORD PTR [eax]
     bac:	00 0b                	add    BYTE PTR [ebx],cl
     bae:	09 17                	or     DWORD PTR [edi],edx
     bb0:	04 00                	add    al,0x0
     bb2:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
     bb5:	9d                   	popf   
     bb6:	03 00                	add    eax,DWORD PTR [eax]
     bb8:	00 0d 09 b6 03 00    	add    BYTE PTR ds:0x3b609,cl
     bbe:	00 0e                	add    BYTE PTR [esi],cl
     bc0:	09 b8 02 00 00 0f    	or     DWORD PTR [eax+0xf000002],edi
     bc6:	09 f8                	or     eax,edi
     bc8:	03 00                	add    eax,DWORD PTR [eax]
     bca:	00 10                	add    BYTE PTR [eax],dl
     bcc:	09 f1                	or     ecx,esi
     bce:	04 00                	add    al,0x0
     bd0:	00 11                	add    BYTE PTR [ecx],dl
     bd2:	09 cf                	or     edi,ecx
     bd4:	04 00                	add    al,0x0
     bd6:	00 4f 09             	add    BYTE PTR [edi+0x9],cl
     bd9:	9d                   	popf   
     bda:	04 00                	add    al,0x0
     bdc:	00 50 09             	add    BYTE PTR [eax+0x9],dl
     bdf:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
     be2:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
     be5:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
     be8:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
     beb:	5c                   	pop    esp
     bec:	03 00                	add    eax,DWORD PTR [eax]
     bee:	00 97 0a 4e 04 00    	add    BYTE PTR [edi+0x44e0a],dl
     bf4:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     bf7:	0a 24 04             	or     ah,BYTE PTR [esp+eax*1]
     bfa:	00 00                	add    BYTE PTR [eax],al
     bfc:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
     bff:	0e                   	push   cs
     c00:	05 00 00 65 01       	add    eax,0x1650000
     c05:	0a 38                	or     bh,BYTE PTR [eax]
     c07:	03 00                	add    eax,DWORD PTR [eax]
     c09:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     c0c:	0a 20                	or     ah,BYTE PTR [eax]
     c0e:	05 00 00 67 01       	add    eax,0x1670000
     c13:	0a c3                	or     al,bl
     c15:	03 00                	add    eax,DWORD PTR [eax]
     c17:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     c1a:	0a f9                	or     bh,cl
     c1c:	02 00                	add    al,BYTE PTR [eax]
     c1e:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     c21:	0a 72 04             	or     dh,BYTE PTR [edx+0x4]
     c24:	00 00                	add    BYTE PTR [eax],al
     c26:	70 01                	jo     c29 <sysEnter_Vector-0x12f3d7>
     c28:	0a 4c 03 00          	or     cl,BYTE PTR [ebx+eax*1+0x0]
     c2c:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
     c2f:	0a ba 04 00 00 00    	or     bh,BYTE PTR [edx+0x4]
     c35:	03 0a                	add    ecx,DWORD PTR [edx]
     c37:	dd 03                	fld    QWORD PTR [ebx]
     c39:	00 00                	add    BYTE PTR [eax],al
     c3b:	01 03                	add    DWORD PTR [ebx],eax
     c3d:	0a ec                	or     ch,ah
     c3f:	03 00                	add    eax,DWORD PTR [eax]
     c41:	00 02                	add    BYTE PTR [edx],al
     c43:	03 0a                	add    ecx,DWORD PTR [edx]
     c45:	7f 03                	jg     c4a <sysEnter_Vector-0x12f3b6>
     c47:	00 00                	add    BYTE PTR [eax],al
     c49:	03 03                	add    eax,DWORD PTR [ebx]
     c4b:	0a d9                	or     bl,cl
     c4d:	02 00                	add    al,BYTE PTR [eax]
     c4f:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     c52:	0a 28                	or     ch,BYTE PTR [eax]
     c54:	03 00                	add    eax,DWORD PTR [eax]
     c56:	00 05 03 0a 70 03    	add    BYTE PTR ds:0x3700a03,al
     c5c:	00 00                	add    BYTE PTR [eax],al
     c5e:	06                   	push   es
     c5f:	03 0a                	add    ecx,DWORD PTR [edx]
     c61:	05 04 00 00 00       	add    eax,0x4
     c66:	09 00                	or     DWORD PTR [eax],eax
     c68:	0b 29                	or     ebp,DWORD PTR [ecx]
     c6a:	01 00                	add    DWORD PTR [eax],eax
     c6c:	00 05 33 0c d7 01    	add    BYTE PTR ds:0x1d70c33,al
     c72:	00 00                	add    BYTE PTR [eax],al
     c74:	05 03 20 7f 00       	add    eax,0x7f2003
     c79:	9f                   	lahf   
     c7a:	05 04 6d 00 00       	add    eax,0x6d04
     c7f:	00 0c b9             	add    BYTE PTR [ecx+edi*4],cl
     c82:	06                   	push   es
     c83:	00 00                	add    BYTE PTR [eax],al
     c85:	17                   	pop    ss
     c86:	01 04 1f             	add    DWORD PTR [edi+ebx*1],eax
     c89:	0c 69                	or     al,0x69
     c8b:	02 00                	add    al,BYTE PTR [eax]
     c8d:	00 0d 72 06 00 00    	add    BYTE PTR ds:0x672,cl
     c93:	04 21                	add    al,0x21
     c95:	1f                   	pop    ds
     c96:	69 02 00 00 00 0e    	imul   eax,DWORD PTR [edx],0xe000000
     c9c:	8b 06                	mov    eax,DWORD PTR [esi]
     c9e:	00 00                	add    BYTE PTR [eax],al
     ca0:	04 22                	add    al,0x22
     ca2:	1f                   	pop    ds
     ca3:	7f 00                	jg     ca5 <sysEnter_Vector-0x12f35b>
     ca5:	00 00                	add    BYTE PTR [eax],al
     ca7:	04 01                	add    al,0x1
     ca9:	0e                   	push   cs
     caa:	42                   	inc    edx
     cab:	06                   	push   es
     cac:	00 00                	add    BYTE PTR [eax],al
     cae:	04 23                	add    al,0x23
     cb0:	1f                   	pop    ds
     cb1:	97                   	xchg   edi,eax
     cb2:	00 00                	add    BYTE PTR [eax],al
     cb4:	00 05 01 0e 1b 07    	add    BYTE PTR ds:0x71b0e01,al
     cba:	00 00                	add    BYTE PTR [eax],al
     cbc:	04 24                	add    al,0x24
     cbe:	1f                   	pop    ds
     cbf:	97                   	xchg   edi,eax
     cc0:	00 00                	add    BYTE PTR [eax],al
     cc2:	00 09                	add    BYTE PTR [ecx],cl
     cc4:	01 0e                	add    DWORD PTR [esi],ecx
     cc6:	4a                   	dec    edx
     cc7:	06                   	push   es
     cc8:	00 00                	add    BYTE PTR [eax],al
     cca:	04 25                	add    al,0x25
     ccc:	1f                   	pop    ds
     ccd:	8b 00                	mov    eax,DWORD PTR [eax]
     ccf:	00 00                	add    BYTE PTR [eax],al
     cd1:	0d 01 0e 62 05       	or     eax,0x5620e01
     cd6:	00 00                	add    BYTE PTR [eax],al
     cd8:	04 26                	add    al,0x26
     cda:	1f                   	pop    ds
     cdb:	8b 00                	mov    eax,DWORD PTR [eax]
     cdd:	00 00                	add    BYTE PTR [eax],al
     cdf:	0f 01 0e             	sidtd  [esi]
     ce2:	d3 05 00 00 04 27    	rol    DWORD PTR ds:0x27040000,cl
     ce8:	1f                   	pop    ds
     ce9:	8b 00                	mov    eax,DWORD PTR [eax]
     ceb:	00 00                	add    BYTE PTR [eax],al
     ced:	11 01                	adc    DWORD PTR [ecx],eax
     cef:	0e                   	push   cs
     cf0:	b5 05                	mov    ch,0x5
     cf2:	00 00                	add    BYTE PTR [eax],al
     cf4:	04 28                	add    al,0x28
     cf6:	1f                   	pop    ds
     cf7:	8b 00                	mov    eax,DWORD PTR [eax]
     cf9:	00 00                	add    BYTE PTR [eax],al
     cfb:	13 01                	adc    eax,DWORD PTR [ecx]
     cfd:	0e                   	push   cs
     cfe:	ec                   	in     al,dx
     cff:	06                   	push   es
     d00:	00 00                	add    BYTE PTR [eax],al
     d02:	04 29                	add    al,0x29
     d04:	1f                   	pop    ds
     d05:	8b 00                	mov    eax,DWORD PTR [eax]
     d07:	00 00                	add    BYTE PTR [eax],al
     d09:	15 01 00 0f 73       	adc    eax,0x730f0001
     d0e:	00 00                	add    BYTE PTR [eax],al
     d10:	00 7a 02             	add    BYTE PTR [edx+0x2],bh
     d13:	00 00                	add    BYTE PTR [eax],al
     d15:	10 33                	adc    BYTE PTR [ebx],dh
     d17:	00 00                	add    BYTE PTR [eax],al
     d19:	00 03                	add    BYTE PTR [ebx],al
     d1b:	01 00                	add    DWORD PTR [eax],eax
     d1d:	11 56 06             	adc    DWORD PTR [esi+0x6],edx
     d20:	00 00                	add    BYTE PTR [eax],al
     d22:	08 04 2c             	or     BYTE PTR [esp+ebp*1],al
     d25:	0c a2                	or     al,0xa2
     d27:	02 00                	add    al,BYTE PTR [eax]
     d29:	00 0d 18 07 00 00    	add    BYTE PTR ds:0x718,cl
     d2f:	04 2e                	add    al,0x2e
     d31:	16                   	push   ss
     d32:	97                   	xchg   edi,eax
     d33:	00 00                	add    BYTE PTR [eax],al
     d35:	00 00                	add    BYTE PTR [eax],al
     d37:	0d f7 05 00 00       	or     eax,0x5f7
     d3c:	04 2f                	add    al,0x2f
     d3e:	13 97 00 00 00 04    	adc    edx,DWORD PTR [edi+0x4000000]
     d44:	00 07                	add    BYTE PTR [edi],al
     d46:	92                   	xchg   edx,eax
     d47:	06                   	push   es
     d48:	00 00                	add    BYTE PTR [eax],al
     d4a:	04 32                	add    al,0x32
     d4c:	1d dd 01 00 00       	sbb    eax,0x1dd
     d51:	07                   	pop    es
     d52:	9d                   	popf   
     d53:	06                   	push   es
     d54:	00 00                	add    BYTE PTR [eax],al
     d56:	04 33                	add    al,0x33
     d58:	1b 7a 02             	sbb    edi,DWORD PTR [edx+0x2]
     d5b:	00 00                	add    BYTE PTR [eax],al
     d5d:	0b 47 02             	or     eax,DWORD PTR [edi+0x2]
     d60:	00 00                	add    BYTE PTR [eax],al
     d62:	04 35                	add    al,0x35
     d64:	10 cc                	adc    ah,cl
     d66:	02 00                	add    al,BYTE PTR [eax]
     d68:	00 05 03 30 7f 00    	add    BYTE PTR ds:0x7f3003,al
     d6e:	9f                   	lahf   
     d6f:	05 04 a3 00 00       	add    eax,0xa304
     d74:	00 0b                	add    BYTE PTR [ebx],cl
     d76:	99                   	cdq    
     d77:	02 00                	add    al,BYTE PTR [eax]
     d79:	00 04 36             	add    BYTE PTR [esi+esi*1],al
     d7c:	0e                   	push   cs
     d7d:	97                   	xchg   edi,eax
     d7e:	00 00                	add    BYTE PTR [eax],al
     d80:	00 05 03 2c 7f 00    	add    BYTE PTR ds:0x7f2c03,al
     d86:	9f                   	lahf   
     d87:	05 04 7a 00 00       	add    eax,0x7a04
     d8c:	00 02                	add    BYTE PTR [edx],al
     d8e:	01 02                	add    DWORD PTR [edx],eax
     d90:	ab                   	stos   DWORD PTR es:[edi],eax
     d91:	06                   	push   es
     d92:	00 00                	add    BYTE PTR [eax],al
     d94:	0b 42 05             	or     eax,DWORD PTR [edx+0x5]
     d97:	00 00                	add    BYTE PTR [eax],al
     d99:	01 0d 0b 6d 00 00    	add    DWORD PTR ds:0x6d0b,ecx
     d9f:	00 05 03 34 7f 00    	add    BYTE PTR ds:0x7f3403,al
     da5:	9f                   	lahf   
     da6:	0b 37                	or     esi,DWORD PTR [edi]
     da8:	07                   	pop    es
     da9:	00 00                	add    BYTE PTR [eax],al
     dab:	01 0e                	add    DWORD PTR [esi],ecx
     dad:	0b 6d 00             	or     ebp,DWORD PTR [ebp+0x0]
     db0:	00 00                	add    BYTE PTR [eax],al
     db2:	05 03 40 7f 00       	add    eax,0x7f4003
     db7:	9f                   	lahf   
     db8:	0b 9c 05 00 00 01 0f 	or     ebx,DWORD PTR [ebp+eax*1+0xf010000]
     dbf:	0b 6d 00             	or     ebp,DWORD PTR [ebp+0x0]
     dc2:	00 00                	add    BYTE PTR [eax],al
     dc4:	05 03 38 7f 00       	add    eax,0x7f3803
     dc9:	9f                   	lahf   
     dca:	0b 20                	or     esp,DWORD PTR [eax]
     dcc:	07                   	pop    es
     dcd:	00 00                	add    BYTE PTR [eax],al
     dcf:	01 10                	add    DWORD PTR [eax],edx
     dd1:	0b 6d 00             	or     ebp,DWORD PTR [ebp+0x0]
     dd4:	00 00                	add    BYTE PTR [eax],al
     dd6:	05 03 3c 7f 00       	add    eax,0x7f3c03
     ddb:	9f                   	lahf   
     ddc:	12 63 06             	adc    ah,BYTE PTR [ebx+0x6]
     ddf:	00 00                	add    BYTE PTR [eax],al
     de1:	01 f2                	add    edx,esi
     de3:	0d 4f 00 00 00       	or     eax,0x4f
     de8:	ef                   	out    dx,eax
     de9:	11 00                	adc    DWORD PTR [eax],eax
     deb:	9f                   	lahf   
     dec:	2d 00 00 00 01       	sub    eax,0x1000000
     df1:	9c                   	pushf  
     df2:	63 03                	arpl   WORD PTR [ebx],ax
     df4:	00 00                	add    BYTE PTR [eax],al
     df6:	13 72 06             	adc    esi,DWORD PTR [edx+0x6]
     df9:	00 00                	add    BYTE PTR [eax],al
     dfb:	01 f2                	add    edx,esi
     dfd:	1a 6d 00             	sbb    ch,BYTE PTR [ebp+0x0]
     e00:	00 00                	add    BYTE PTR [eax],al
     e02:	02 91 00 00 12 0b    	add    dl,BYTE PTR [ecx+0xb120000]
     e08:	06                   	push   es
     e09:	00 00                	add    BYTE PTR [eax],al
     e0b:	01 ed                	add    ebp,ebp
     e0d:	10 af 00 00 00 c5    	adc    BYTE PTR [edi-0x3b000000],ch
     e13:	11 00                	adc    DWORD PTR [eax],eax
     e15:	9f                   	lahf   
     e16:	2a 00                	sub    al,BYTE PTR [eax]
     e18:	00 00                	add    BYTE PTR [eax],al
     e1a:	01 9c a9 03 00 00 13 	add    DWORD PTR [ecx+ebp*4+0x13000003],ebx
     e21:	83 06 00             	add    DWORD PTR [esi],0x0
     e24:	00 01                	add    BYTE PTR [ecx],al
     e26:	ed                   	in     eax,dx
     e27:	1f                   	pop    ds
     e28:	d7                   	xlat   BYTE PTR ds:[ebx]
     e29:	01 00                	add    DWORD PTR [eax],eax
     e2b:	00 02                	add    BYTE PTR [edx],al
     e2d:	91                   	xchg   ecx,eax
     e2e:	00 14 6e             	add    BYTE PTR [esi+ebp*2],dl
     e31:	00 01                	add    BYTE PTR [ecx],al
     e33:	ed                   	in     eax,dx
     e34:	30 a9 03 00 00 02    	xor    BYTE PTR [ecx+0x2000003],ch
     e3a:	91                   	xchg   ecx,eax
     e3b:	04 13                	add    al,0x13
     e3d:	56                   	push   esi
     e3e:	05 00 00 01 ed       	add    eax,0xed010000
     e43:	39 6b 00             	cmp    DWORD PTR [ebx+0x0],ebp
     e46:	00 00                	add    BYTE PTR [eax],al
     e48:	02 91 08 00 05 04    	add    dl,BYTE PTR [ecx+0x4050008]
     e4e:	af                   	scas   eax,DWORD PTR es:[edi]
     e4f:	00 00                	add    BYTE PTR [eax],al
     e51:	00 12                	add    BYTE PTR [edx],dl
     e53:	c1 05 00 00 01 c2 08 	rol    DWORD PTR ds:0xc2010000,0x8
     e5a:	af                   	scas   eax,DWORD PTR es:[edi]
     e5b:	00 00                	add    BYTE PTR [eax],al
     e5d:	00 17                	add    BYTE PTR [edi],dl
     e5f:	10 00                	adc    BYTE PTR [eax],al
     e61:	9f                   	lahf   
     e62:	ae                   	scas   al,BYTE PTR es:[edi]
     e63:	01 00                	add    DWORD PTR [eax],eax
     e65:	00 01                	add    BYTE PTR [ecx],al
     e67:	9c                   	pushf  
     e68:	79 04                	jns    e6e <sysEnter_Vector-0x12f192>
     e6a:	00 00                	add    BYTE PTR [eax],al
     e6c:	13 83 06 00 00 01    	adc    eax,DWORD PTR [ebx+0x1000006]
     e72:	c2 18 d7             	ret    0xd718
     e75:	01 00                	add    DWORD PTR [eax],eax
     e77:	00 02                	add    BYTE PTR [edx],al
     e79:	91                   	xchg   ecx,eax
     e7a:	00 14 6e             	add    BYTE PTR [esi+ebp*2],dl
     e7d:	00 01                	add    BYTE PTR [ecx],al
     e7f:	c2 29 a9             	ret    0xa929
     e82:	03 00                	add    eax,DWORD PTR [eax]
     e84:	00 02                	add    BYTE PTR [edx],al
     e86:	91                   	xchg   ecx,eax
     e87:	04 13                	add    al,0x13
     e89:	56                   	push   esi
     e8a:	05 00 00 01 c2       	add    eax,0xc2010000
     e8f:	32 6b 00             	xor    ch,BYTE PTR [ebx+0x0]
     e92:	00 00                	add    BYTE PTR [eax],al
     e94:	02 91 08 15 d9 06    	add    dl,BYTE PTR [ecx+0x6d91508]
     e9a:	00 00                	add    BYTE PTR [eax],al
     e9c:	01 c4                	add    esp,eax
     e9e:	0b 6d 00             	or     ebp,DWORD PTR [ebp+0x0]
     ea1:	00 00                	add    BYTE PTR [eax],al
     ea3:	02 91 54 15 63 07    	add    dl,BYTE PTR [ecx+0x7631554]
     ea9:	00 00                	add    BYTE PTR [eax],al
     eab:	01 c5                	add    ebp,eax
     ead:	09 4f 00             	or     DWORD PTR [edi+0x0],ecx
     eb0:	00 00                	add    BYTE PTR [eax],al
     eb2:	02 91 60 15 e0 06    	add    dl,BYTE PTR [ecx+0x6e01560]
     eb8:	00 00                	add    BYTE PTR [eax],al
     eba:	01 c6                	add    esi,eax
     ebc:	0c af                	or     al,0xaf
     ebe:	00 00                	add    BYTE PTR [eax],al
     ec0:	00 02                	add    BYTE PTR [edx],al
     ec2:	91                   	xchg   ecx,eax
     ec3:	6c                   	ins    BYTE PTR es:[edi],dx
     ec4:	15 86 05 00 00       	adc    eax,0x586
     ec9:	01 c7                	add    edi,eax
     ecb:	0b 6d 00             	or     ebp,DWORD PTR [ebp+0x0]
     ece:	00 00                	add    BYTE PTR [eax],al
     ed0:	02 91 5c 15 35 06    	add    dl,BYTE PTR [ecx+0x635155c]
     ed6:	00 00                	add    BYTE PTR [eax],al
     ed8:	01 c8                	add    eax,ecx
     eda:	0b 6d 00             	or     ebp,DWORD PTR [ebp+0x0]
     edd:	00 00                	add    BYTE PTR [eax],al
     edf:	02 91 50 15 4a 07    	add    dl,BYTE PTR [ecx+0x74a1550]
     ee5:	00 00                	add    BYTE PTR [eax],al
     ee7:	01 c9                	add    ecx,ecx
     ee9:	0c af                	or     al,0xaf
     eeb:	00 00                	add    BYTE PTR [eax],al
     eed:	00 02                	add    BYTE PTR [edx],al
     eef:	91                   	xchg   ecx,eax
     ef0:	68 15 73 05 00       	push   0x57315
     ef5:	00 01                	add    BYTE PTR [ecx],al
     ef7:	ca 09 4f             	retf   0x4f09
     efa:	00 00                	add    BYTE PTR [eax],al
     efc:	00 02                	add    BYTE PTR [edx],al
     efe:	91                   	xchg   ecx,eax
     eff:	58                   	pop    eax
     f00:	15 35 05 00 00       	adc    eax,0x535
     f05:	01 cb                	add    ebx,ecx
     f07:	09 4f 00             	or     DWORD PTR [edi+0x0],ecx
     f0a:	00 00                	add    BYTE PTR [eax],al
     f0c:	02 91 64 16 1f 06    	add    dl,BYTE PTR [ecx+0x61f1664]
     f12:	00 00                	add    BYTE PTR [eax],al
     f14:	01 e8                	add    eax,ebp
     f16:	01 af 11 00 9f 00    	add    DWORD PTR [edi+0x9f0011],ebp
     f1c:	12 b0 05 00 00 01    	adc    dh,BYTE PTR [eax+0x1000005]
     f22:	bd 0e 64 00 00       	mov    ebp,0x640e
     f27:	00 f3                	add    bl,dh
     f29:	0f 00 9f 24 00 00 00 	ltr    WORD PTR [edi+0x24]
     f30:	01 9c a3 04 00 00 13 	add    DWORD PTR [ebx+eiz*4+0x13000004],ebx
     f37:	56                   	push   esi
     f38:	05 00 00 01 bd       	add    eax,0xbd010000
     f3d:	19 6b 00             	sbb    DWORD PTR [ebx+0x0],ebp
     f40:	00 00                	add    BYTE PTR [eax],al
     f42:	02 91 00 00 12 6d    	add    dl,BYTE PTR [ecx+0x6d120000]
     f48:	05 00 00 01 b8       	add    eax,0xb8010000
     f4d:	06                   	push   es
     f4e:	64 00 00             	add    BYTE PTR fs:[eax],al
     f51:	00 c6                	add    dh,al
     f53:	0f 00 9f 2d 00 00 00 	ltr    WORD PTR [edi+0x2d]
     f5a:	01 9c cd 04 00 00 13 	add    DWORD PTR [ebp+ecx*8+0x13000004],ebx
     f61:	56                   	push   esi
     f62:	05 00 00 01 b8       	add    eax,0xb8010000
     f67:	12 6b 00             	adc    ch,BYTE PTR [ebx+0x0]
     f6a:	00 00                	add    BYTE PTR [eax],al
     f6c:	02 91 00 00 12 eb    	add    dl,BYTE PTR [ecx-0x14ee0000]
     f72:	05 00 00 01 6c       	add    eax,0x6c010000
     f77:	0d 4f 00 00 00       	or     eax,0x4f
     f7c:	a1 0c 00 9f 25       	mov    eax,ds:0x259f000c
     f81:	03 00                	add    eax,DWORD PTR [eax]
     f83:	00 01                	add    BYTE PTR [ecx],al
     f85:	9c                   	pushf  
     f86:	87 05 00 00 13 43    	xchg   DWORD PTR ds:0x43130000,eax
     f8c:	07                   	pop    es
     f8d:	00 00                	add    BYTE PTR [eax],al
     f8f:	01 6c 25 e4          	add    DWORD PTR [ebp+eiz*1-0x1c],ebp
     f93:	02 00                	add    al,BYTE PTR [eax]
     f95:	00 02                	add    BYTE PTR [edx],al
     f97:	91                   	xchg   ecx,eax
     f98:	00 13                	add    BYTE PTR [ebx],dl
     f9a:	7b 06                	jnp    fa2 <sysEnter_Vector-0x12f05e>
     f9c:	00 00                	add    BYTE PTR [eax],al
     f9e:	01 6c 33 6d          	add    DWORD PTR [ebx+esi*1+0x6d],ebp
     fa2:	00 00                	add    BYTE PTR [eax],al
     fa4:	00 02                	add    BYTE PTR [edx],al
     fa6:	91                   	xchg   ecx,eax
     fa7:	04 13                	add    al,0x13
     fa9:	8c 05 00 00 01 6c    	mov    WORD PTR ds:0x6c010000,es
     faf:	41                   	inc    ecx
     fb0:	ea 02 00 00 02 91 4c 	jmp    0x4c91:0x2000002
     fb7:	15 bd 01 00 00       	adc    eax,0x1bd
     fbc:	01 6e 0a             	add    DWORD PTR [esi+0xa],ebp
     fbf:	87 05 00 00 02 91    	xchg   DWORD PTR ds:0x91020000,eax
     fc5:	5e                   	pop    esi
     fc6:	15 a5 06 00 00       	adc    eax,0x6a5
     fcb:	01 6f 0b             	add    DWORD PTR [edi+0xb],ebp
     fce:	6d                   	ins    DWORD PTR es:[edi],dx
     fcf:	00 00                	add    BYTE PTR [eax],al
     fd1:	00 02                	add    BYTE PTR [edx],al
     fd3:	91                   	xchg   ecx,eax
     fd4:	6c                   	ins    BYTE PTR es:[edi],dx
     fd5:	15 35 05 00 00       	adc    eax,0x535
     fda:	01 70 09             	add    DWORD PTR [eax+0x9],esi
     fdd:	4f                   	dec    edi
     fde:	00 00                	add    BYTE PTR [eax],al
     fe0:	00 02                	add    BYTE PTR [edx],al
     fe2:	91                   	xchg   ecx,eax
     fe3:	68 15 57 06 00       	push   0x65715
     fe8:	00 01                	add    BYTE PTR [ecx],al
     fea:	71 0d                	jno    ff9 <sysEnter_Vector-0x12f007>
     fec:	ae                   	scas   al,BYTE PTR es:[edi]
     fed:	02 00                	add    al,BYTE PTR [eax]
     fef:	00 02                	add    BYTE PTR [edx],al
     ff1:	91                   	xchg   ecx,eax
     ff2:	54                   	push   esp
     ff3:	17                   	pop    ss
     ff4:	5f                   	pop    edi
     ff5:	0e                   	push   cs
     ff6:	00 9f bd 00 00 00    	add    BYTE PTR [edi+0xbd],bl
     ffc:	6d                   	ins    DWORD PTR es:[edi],dx
     ffd:	05 00 00 18 72       	add    eax,0x72180000
    1002:	65 73 00             	gs jae 1005 <sysEnter_Vector-0x12effb>
    1005:	01 9d 11 4f 00 00    	add    DWORD PTR [ebp+0x4f11],ebx
    100b:	00 02                	add    BYTE PTR [edx],al
    100d:	91                   	xchg   ecx,eax
    100e:	64 00 19             	add    BYTE PTR fs:[ecx],bl
    1011:	30 0f                	xor    BYTE PTR [edi],cl
    1013:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
    1019:	18 72 65             	sbb    BYTE PTR [edx+0x65],dh
    101c:	73 00                	jae    101e <sysEnter_Vector-0x12efe2>
    101e:	01 ac 11 4f 00 00 00 	add    DWORD PTR [ecx+edx*1+0x4f],ebp
    1025:	02 91 60 00 00 0f    	add    dl,BYTE PTR [ecx+0xf000060]
    102b:	73 00                	jae    102d <sysEnter_Vector-0x12efd3>
    102d:	00 00                	add    BYTE PTR [eax],al
    102f:	97                   	xchg   edi,eax
    1030:	05 00 00 1a 33       	add    eax,0x331a0000
    1035:	00 00                	add    BYTE PTR [eax],al
    1037:	00 01                	add    BYTE PTR [ecx],al
    1039:	00 12                	add    BYTE PTR [edx],dl
    103b:	58                   	pop    eax
    103c:	06                   	push   es
    103d:	00 00                	add    BYTE PTR [eax],al
    103f:	01 67 0d             	add    DWORD PTR [edi+0xd],esp
    1042:	4f                   	dec    edi
    1043:	00 00                	add    BYTE PTR [eax],al
    1045:	00 7a 0c             	add    BYTE PTR [edx+0xc],bh
    1048:	00 9f 27 00 00 00    	add    BYTE PTR [edi+0x27],bl
    104e:	01 9c d0 05 00 00 13 	add    DWORD PTR [eax+edx*8+0x13000005],ebx
    1055:	5d                   	pop    ebp
    1056:	05 00 00 01 67       	add    eax,0x67010000
    105b:	18 6d 00             	sbb    BYTE PTR [ebp+0x0],ch
    105e:	00 00                	add    BYTE PTR [eax],al
    1060:	02 91 00 13 58 06    	add    dl,BYTE PTR [ecx+0x6581300]
    1066:	00 00                	add    BYTE PTR [eax],al
    1068:	01 67 27             	add    DWORD PTR [edi+0x27],esp
    106b:	d0 05 00 00 02 91    	rol    BYTE PTR ds:0x91020000,1
    1071:	04 00                	add    al,0x0
    1073:	05 04 ae 02 00       	add    eax,0x2ae04
    1078:	00 12                	add    BYTE PTR [edx],dl
    107a:	80 05 00 00 01 62 05 	add    BYTE PTR ds:0x62010000,0x5
    1081:	4f                   	dec    edi
    1082:	00 00                	add    BYTE PTR [eax],al
    1084:	00 49 0c             	add    BYTE PTR [ecx+0xc],cl
    1087:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
    108d:	01 9c 0f 06 00 00 13 	add    DWORD PTR [edi+ecx*1+0x13000006],ebx
    1094:	5d                   	pop    ebp
    1095:	05 00 00 01 62       	add    eax,0x62010000
    109a:	11 6d 00             	adc    DWORD PTR [ebp+0x0],ebp
    109d:	00 00                	add    BYTE PTR [eax],al
    109f:	02 91 00 13 58 06    	add    dl,BYTE PTR [ecx+0x6581300]
    10a5:	00 00                	add    BYTE PTR [eax],al
    10a7:	01 62 20             	add    DWORD PTR [edx+0x20],esp
    10aa:	d0 05 00 00 02 91    	rol    BYTE PTR ds:0x91020000,1
    10b0:	04 00                	add    al,0x0
    10b2:	12 13                	adc    dl,BYTE PTR [ebx]
    10b4:	06                   	push   es
    10b5:	00 00                	add    BYTE PTR [eax],al
    10b7:	01 5e 0d             	add    DWORD PTR [esi+0xd],ebx
    10ba:	4f                   	dec    edi
    10bb:	00 00                	add    BYTE PTR [eax],al
    10bd:	00 1f                	add    BYTE PTR [edi],bl
    10bf:	0c 00                	or     al,0x0
    10c1:	9f                   	lahf   
    10c2:	2a 00                	sub    al,BYTE PTR [eax]
    10c4:	00 00                	add    BYTE PTR [eax],al
    10c6:	01 9c 57 06 00 00 13 	add    DWORD PTR [edi+edx*2+0x13000006],ebx
    10cd:	30 07                	xor    BYTE PTR [edi],al
    10cf:	00 00                	add    BYTE PTR [eax],al
    10d1:	01 5e 18             	add    DWORD PTR [esi+0x18],ebx
    10d4:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    10d7:	00 02                	add    BYTE PTR [edx],al
    10d9:	91                   	xchg   ecx,eax
    10da:	00 13                	add    BYTE PTR [ebx],dl
    10dc:	02 06                	add    al,BYTE PTR [esi]
    10de:	00 00                	add    BYTE PTR [eax],al
    10e0:	01 5e 25             	add    DWORD PTR [esi+0x25],ebx
    10e3:	64 00 00             	add    BYTE PTR fs:[eax],al
    10e6:	00 02                	add    BYTE PTR [edx],al
    10e8:	91                   	xchg   ecx,eax
    10e9:	04 13                	add    al,0x13
    10eb:	18 06                	sbb    BYTE PTR [esi],al
    10ed:	00 00                	add    BYTE PTR [eax],al
    10ef:	01 5e 33             	add    DWORD PTR [esi+0x33],ebx
    10f2:	4f                   	dec    edi
    10f3:	00 00                	add    BYTE PTR [eax],al
    10f5:	00 02                	add    BYTE PTR [edx],al
    10f7:	91                   	xchg   ecx,eax
    10f8:	08 00                	or     BYTE PTR [eax],al
    10fa:	12 ff                	adc    bh,bh
    10fc:	06                   	push   es
    10fd:	00 00                	add    BYTE PTR [eax],al
    10ff:	01 59 05             	add    DWORD PTR [ecx+0x5],ebx
    1102:	4f                   	dec    edi
    1103:	00 00                	add    BYTE PTR [eax],al
    1105:	00 ed                	add    ch,ch
    1107:	0b 00                	or     eax,DWORD PTR [eax]
    1109:	9f                   	lahf   
    110a:	32 00                	xor    al,BYTE PTR [eax]
    110c:	00 00                	add    BYTE PTR [eax],al
    110e:	01 9c 9f 06 00 00 13 	add    DWORD PTR [edi+ebx*4+0x13000006],ebx
    1115:	30 07                	xor    BYTE PTR [edi],al
    1117:	00 00                	add    BYTE PTR [eax],al
    1119:	01 59 11             	add    DWORD PTR [ecx+0x11],ebx
    111c:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    111f:	00 02                	add    BYTE PTR [edx],al
    1121:	91                   	xchg   ecx,eax
    1122:	00 13                	add    BYTE PTR [ebx],dl
    1124:	02 06                	add    al,BYTE PTR [esi]
    1126:	00 00                	add    BYTE PTR [eax],al
    1128:	01 59 1e             	add    DWORD PTR [ecx+0x1e],ebx
    112b:	64 00 00             	add    BYTE PTR fs:[eax],al
    112e:	00 02                	add    BYTE PTR [edx],al
    1130:	91                   	xchg   ecx,eax
    1131:	04 13                	add    al,0x13
    1133:	18 06                	sbb    BYTE PTR [esi],al
    1135:	00 00                	add    BYTE PTR [eax],al
    1137:	01 59 2c             	add    DWORD PTR [ecx+0x2c],ebx
    113a:	4f                   	dec    edi
    113b:	00 00                	add    BYTE PTR [eax],al
    113d:	00 02                	add    BYTE PTR [edx],al
    113f:	91                   	xchg   ecx,eax
    1140:	08 00                	or     BYTE PTR [eax],al
    1142:	12 5d 06             	adc    bl,BYTE PTR [ebp+0x6]
    1145:	00 00                	add    BYTE PTR [eax],al
    1147:	01 54 0d 4f          	add    DWORD PTR [ebp+ecx*1+0x4f],edx
    114b:	00 00                	add    BYTE PTR [eax],al
    114d:	00 c3                	add    bl,al
    114f:	0b 00                	or     eax,DWORD PTR [eax]
    1151:	9f                   	lahf   
    1152:	2a 00                	sub    al,BYTE PTR [eax]
    1154:	00 00                	add    BYTE PTR [eax],al
    1156:	01 9c f6 06 00 00 13 	add    DWORD PTR [esi+esi*8+0x13000006],ebx
    115d:	30 07                	xor    BYTE PTR [edi],al
    115f:	00 00                	add    BYTE PTR [eax],al
    1161:	01 54 19 6b          	add    DWORD PTR [ecx+ebx*1+0x6b],edx
    1165:	00 00                	add    BYTE PTR [eax],al
    1167:	00 02                	add    BYTE PTR [edx],al
    1169:	91                   	xchg   ecx,eax
    116a:	00 13                	add    BYTE PTR [ebx],dl
    116c:	d9 06                	fld    DWORD PTR [esi]
    116e:	00 00                	add    BYTE PTR [eax],al
    1170:	01 54 27 6b          	add    DWORD PTR [edi+eiz*1+0x6b],edx
    1174:	00 00                	add    BYTE PTR [eax],al
    1176:	00 02                	add    BYTE PTR [edx],al
    1178:	91                   	xchg   ecx,eax
    1179:	04 13                	add    al,0x13
    117b:	1b 07                	sbb    eax,DWORD PTR [edi]
    117d:	00 00                	add    BYTE PTR [eax],al
    117f:	01 54 33 4f          	add    DWORD PTR [ebx+esi*1+0x4f],edx
    1183:	00 00                	add    BYTE PTR [eax],al
    1185:	00 02                	add    BYTE PTR [edx],al
    1187:	91                   	xchg   ecx,eax
    1188:	08 13                	or     BYTE PTR [ebx],dl
    118a:	c8 06 00 00          	enter  0x6,0x0
    118e:	01 54 3d 4f          	add    DWORD PTR [ebp+edi*1+0x4f],edx
    1192:	00 00                	add    BYTE PTR [eax],al
    1194:	00 02                	add    BYTE PTR [edx],al
    1196:	91                   	xchg   ecx,eax
    1197:	0c 00                	or     al,0x0
    1199:	12 e4                	adc    ah,ah
    119b:	05 00 00 01 4f       	add    eax,0x4f010000
    11a0:	05 4f 00 00 00       	add    eax,0x4f
    11a5:	8a 0b                	mov    cl,BYTE PTR [ebx]
    11a7:	00 9f 39 00 00 00    	add    BYTE PTR [edi+0x39],bl
    11ad:	01 9c 4d 07 00 00 13 	add    DWORD PTR [ebp+ecx*2+0x13000007],ebx
    11b4:	30 07                	xor    BYTE PTR [edi],al
    11b6:	00 00                	add    BYTE PTR [eax],al
    11b8:	01 4f 12             	add    DWORD PTR [edi+0x12],ecx
    11bb:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    11be:	00 02                	add    BYTE PTR [edx],al
    11c0:	91                   	xchg   ecx,eax
    11c1:	00 13                	add    BYTE PTR [ebx],dl
    11c3:	d9 06                	fld    DWORD PTR [esi]
    11c5:	00 00                	add    BYTE PTR [eax],al
    11c7:	01 4f 20             	add    DWORD PTR [edi+0x20],ecx
    11ca:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    11cd:	00 02                	add    BYTE PTR [edx],al
    11cf:	91                   	xchg   ecx,eax
    11d0:	04 13                	add    al,0x13
    11d2:	1b 07                	sbb    eax,DWORD PTR [edi]
    11d4:	00 00                	add    BYTE PTR [eax],al
    11d6:	01 4f 2c             	add    DWORD PTR [edi+0x2c],ecx
    11d9:	4f                   	dec    edi
    11da:	00 00                	add    BYTE PTR [eax],al
    11dc:	00 02                	add    BYTE PTR [edx],al
    11de:	91                   	xchg   ecx,eax
    11df:	08 13                	or     BYTE PTR [ebx],dl
    11e1:	c8 06 00 00          	enter  0x6,0x0
    11e5:	01 4f 36             	add    DWORD PTR [edi+0x36],ecx
    11e8:	4f                   	dec    edi
    11e9:	00 00                	add    BYTE PTR [eax],al
    11eb:	00 02                	add    BYTE PTR [edx],al
    11ed:	91                   	xchg   ecx,eax
    11ee:	0c 00                	or     al,0x0
    11f0:	12 cf                	adc    cl,bh
    11f2:	06                   	push   es
    11f3:	00 00                	add    BYTE PTR [eax],al
    11f5:	01 4b 0d             	add    DWORD PTR [ebx+0xd],ecx
    11f8:	4f                   	dec    edi
    11f9:	00 00                	add    BYTE PTR [eax],al
    11fb:	00 60 0b             	add    BYTE PTR [eax+0xb],ah
    11fe:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
    1204:	01 9c a4 07 00 00 13 	add    DWORD PTR [esp+eiz*4+0x13000007],ebx
    120b:	30 07                	xor    BYTE PTR [edi],al
    120d:	00 00                	add    BYTE PTR [eax],al
    120f:	01 4b 18             	add    DWORD PTR [ebx+0x18],ecx
    1212:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    1215:	00 02                	add    BYTE PTR [edx],al
    1217:	91                   	xchg   ecx,eax
    1218:	00 13                	add    BYTE PTR [ebx],dl
    121a:	d9 06                	fld    DWORD PTR [esi]
    121c:	00 00                	add    BYTE PTR [eax],al
    121e:	01 4b 26             	add    DWORD PTR [ebx+0x26],ecx
    1221:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    1224:	00 02                	add    BYTE PTR [edx],al
    1226:	91                   	xchg   ecx,eax
    1227:	04 13                	add    al,0x13
    1229:	1b 07                	sbb    eax,DWORD PTR [edi]
    122b:	00 00                	add    BYTE PTR [eax],al
    122d:	01 4b 32             	add    DWORD PTR [ebx+0x32],ecx
    1230:	4f                   	dec    edi
    1231:	00 00                	add    BYTE PTR [eax],al
    1233:	00 02                	add    BYTE PTR [edx],al
    1235:	91                   	xchg   ecx,eax
    1236:	08 13                	or     BYTE PTR [ebx],dl
    1238:	c8 06 00 00          	enter  0x6,0x0
    123c:	01 4b 3c             	add    DWORD PTR [ebx+0x3c],ecx
    123f:	4f                   	dec    edi
    1240:	00 00                	add    BYTE PTR [eax],al
    1242:	00 02                	add    BYTE PTR [edx],al
    1244:	91                   	xchg   ecx,eax
    1245:	0c 00                	or     al,0x0
    1247:	12 c2                	adc    al,dl
    1249:	06                   	push   es
    124a:	00 00                	add    BYTE PTR [eax],al
    124c:	01 46 05             	add    DWORD PTR [esi+0x5],eax
    124f:	4f                   	dec    edi
    1250:	00 00                	add    BYTE PTR [eax],al
    1252:	00 27                	add    BYTE PTR [edi],ah
    1254:	0b 00                	or     eax,DWORD PTR [eax]
    1256:	9f                   	lahf   
    1257:	39 00                	cmp    DWORD PTR [eax],eax
    1259:	00 00                	add    BYTE PTR [eax],al
    125b:	01 9c fb 07 00 00 13 	add    DWORD PTR [ebx+edi*8+0x13000007],ebx
    1262:	30 07                	xor    BYTE PTR [edi],al
    1264:	00 00                	add    BYTE PTR [eax],al
    1266:	01 46 11             	add    DWORD PTR [esi+0x11],eax
    1269:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    126c:	00 02                	add    BYTE PTR [edx],al
    126e:	91                   	xchg   ecx,eax
    126f:	00 13                	add    BYTE PTR [ebx],dl
    1271:	d9 06                	fld    DWORD PTR [esi]
    1273:	00 00                	add    BYTE PTR [eax],al
    1275:	01 46 1f             	add    DWORD PTR [esi+0x1f],eax
    1278:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    127b:	00 02                	add    BYTE PTR [edx],al
    127d:	91                   	xchg   ecx,eax
    127e:	04 13                	add    al,0x13
    1280:	1b 07                	sbb    eax,DWORD PTR [edi]
    1282:	00 00                	add    BYTE PTR [eax],al
    1284:	01 46 2b             	add    DWORD PTR [esi+0x2b],eax
    1287:	4f                   	dec    edi
    1288:	00 00                	add    BYTE PTR [eax],al
    128a:	00 02                	add    BYTE PTR [edx],al
    128c:	91                   	xchg   ecx,eax
    128d:	08 13                	or     BYTE PTR [ebx],dl
    128f:	c8 06 00 00          	enter  0x6,0x0
    1293:	01 46 35             	add    DWORD PTR [esi+0x35],eax
    1296:	4f                   	dec    edi
    1297:	00 00                	add    BYTE PTR [eax],al
    1299:	00 02                	add    BYTE PTR [edx],al
    129b:	91                   	xchg   ecx,eax
    129c:	0c 00                	or     al,0x0
    129e:	1b 3c 05 00 00 01 41 	sbb    edi,DWORD PTR [eax*1+0x41010000]
    12a5:	0e                   	push   cs
    12a6:	03 0b                	add    ecx,DWORD PTR [ebx]
    12a8:	00 9f 24 00 00 00    	add    BYTE PTR [edi+0x24],bl
    12ae:	01 9c 21 08 00 00 13 	add    DWORD PTR [ecx+eiz*1+0x13000008],ebx
    12b5:	30 07                	xor    BYTE PTR [edi],al
    12b7:	00 00                	add    BYTE PTR [eax],al
    12b9:	01 41 1a             	add    DWORD PTR [ecx+0x1a],eax
    12bc:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    12bf:	00 02                	add    BYTE PTR [edx],al
    12c1:	91                   	xchg   ecx,eax
    12c2:	00 00                	add    BYTE PTR [eax],al
    12c4:	1b f8                	sbb    edi,eax
    12c6:	06                   	push   es
    12c7:	00 00                	add    BYTE PTR [eax],al
    12c9:	01 3c 06             	add    DWORD PTR [esi+eax*1],edi
    12cc:	d5 0a                	aad    0xa
    12ce:	00 9f 2e 00 00 00    	add    BYTE PTR [edi+0x2e],bl
    12d4:	01 9c 47 08 00 00 13 	add    DWORD PTR [edi+eax*2+0x13000008],ebx
    12db:	30 07                	xor    BYTE PTR [edi],al
    12dd:	00 00                	add    BYTE PTR [eax],al
    12df:	01 3c 13             	add    DWORD PTR [ebx+edx*1],edi
    12e2:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    12e5:	00 02                	add    BYTE PTR [edx],al
    12e7:	91                   	xchg   ecx,eax
    12e8:	00 00                	add    BYTE PTR [eax],al
    12ea:	12 2d 06 00 00 01    	adc    ch,BYTE PTR ds:0x1000006
    12f0:	2e 0f 6b 00          	packssdw mm0,QWORD PTR cs:[eax]
    12f4:	00 00                	add    BYTE PTR [eax],al
    12f6:	40                   	inc    eax
    12f7:	0a 00                	or     al,BYTE PTR [eax]
    12f9:	9f                   	lahf   
    12fa:	95                   	xchg   ebp,eax
    12fb:	00 00                	add    BYTE PTR [eax],al
    12fd:	00 01                	add    BYTE PTR [ecx],al
    12ff:	9c                   	pushf  
    1300:	9e                   	sahf   
    1301:	08 00                	or     BYTE PTR [eax],al
    1303:	00 13                	add    BYTE PTR [ebx],dl
    1305:	5d                   	pop    ebp
    1306:	05 00 00 01 2e       	add    eax,0x2e010000
    130b:	1d 6d 00 00 00       	sbb    eax,0x6d
    1310:	02 91 00 13 d4 06    	add    dl,BYTE PTR [ecx+0x6d41300]
    1316:	00 00                	add    BYTE PTR [eax],al
    1318:	01 2e                	add    DWORD PTR [esi],ebp
    131a:	2f                   	das    
    131b:	e4 02                	in     al,0x2
    131d:	00 00                	add    BYTE PTR [eax],al
    131f:	02 91 04 13 56 05    	add    dl,BYTE PTR [ecx+0x5561304]
    1325:	00 00                	add    BYTE PTR [eax],al
    1327:	01 2e                	add    DWORD PTR [esi],ebp
    1329:	3b 6b 00             	cmp    ebp,DWORD PTR [ebx+0x0]
    132c:	00 00                	add    BYTE PTR [eax],al
    132e:	02 91 08 15 35 05    	add    dl,BYTE PTR [ecx+0x5351508]
    1334:	00 00                	add    BYTE PTR [eax],al
    1336:	01 30                	add    DWORD PTR [eax],esi
    1338:	0b 6b 00             	or     ebp,DWORD PTR [ebx+0x0]
    133b:	00 00                	add    BYTE PTR [eax],al
    133d:	02 91 6c 00 1c 56    	add    dl,BYTE PTR [ecx+0x561c006c]
    1343:	07                   	pop    es
    1344:	00 00                	add    BYTE PTR [eax],al
    1346:	01 27                	add    DWORD PTR [edi],esp
    1348:	06                   	push   es
    1349:	e3 09                	jecxz  1354 <sysEnter_Vector-0x12ecac>
    134b:	00 9f 5d 00 00 00    	add    BYTE PTR [edi+0x5d],bl
    1351:	01 9c 12 30 06 00 00 	add    DWORD PTR [edx+edx*1+0x630],ebx
    1358:	01 22                	add    DWORD PTR [edx],esp
    135a:	0f 6b 00             	packssdw mm0,QWORD PTR [eax]
    135d:	00 00                	add    BYTE PTR [eax],al
    135f:	bc 09 00 9f 27       	mov    esp,0x279f0009
    1364:	00 00                	add    BYTE PTR [eax],al
    1366:	00 01                	add    BYTE PTR [ecx],al
    1368:	9c                   	pushf  
    1369:	e9 08 00 00 13       	jmp    13001376 <sysEnter_Vector+0x12ed1376>
    136e:	5d                   	pop    ebp
    136f:	05 00 00 01 22       	add    eax,0x22010000
    1374:	1a 6d 00             	sbb    ch,BYTE PTR [ebp+0x0]
    1377:	00 00                	add    BYTE PTR [eax],al
    1379:	02 91 00 13 d4 06    	add    dl,BYTE PTR [ecx+0x6d41300]
    137f:	00 00                	add    BYTE PTR [eax],al
    1381:	01 22                	add    DWORD PTR [edx],esp
    1383:	2c e4                	sub    al,0xe4
    1385:	02 00                	add    al,BYTE PTR [eax]
    1387:	00 02                	add    BYTE PTR [edx],al
    1389:	91                   	xchg   ecx,eax
    138a:	04 00                	add    al,0x0
    138c:	12 de                	adc    bl,dh
    138e:	05 00 00 01 1c       	add    eax,0x1c010000
    1393:	07                   	pop    es
    1394:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    1397:	00 8c 09 00 9f 30 00 	add    BYTE PTR [ecx+ecx*1+0x309f00],cl
    139e:	00 00                	add    BYTE PTR [eax],al
    13a0:	01 9c 22 09 00 00 13 	add    DWORD PTR [edx+eiz*1+0x13000009],ebx
    13a7:	5d                   	pop    ebp
    13a8:	05 00 00 01 1c       	add    eax,0x1c010000
    13ad:	13 6d 00             	adc    ebp,DWORD PTR [ebp+0x0]
    13b0:	00 00                	add    BYTE PTR [eax],al
    13b2:	02 91 00 13 d4 06    	add    dl,BYTE PTR [ecx+0x6d41300]
    13b8:	00 00                	add    BYTE PTR [eax],al
    13ba:	01 1c 25 e4 02 00 00 	add    DWORD PTR [eiz*1+0x2e4],ebx
    13c1:	02 91 04 00 12 71    	add    dl,BYTE PTR [ecx+0x71120004]
    13c7:	07                   	pop    es
    13c8:	00 00                	add    BYTE PTR [eax],al
    13ca:	01 17                	add    DWORD PTR [edi],edx
    13cc:	0d 4f 00 00 00       	or     eax,0x4f
    13d1:	62 09                	bound  ecx,QWORD PTR [ecx]
    13d3:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
    13d9:	01 9c 6a 09 00 00 13 	add    DWORD PTR [edx+ebp*2+0x13000009],ebx
    13e0:	5d                   	pop    ebp
    13e1:	05 00 00 01 17       	add    eax,0x17010000
    13e6:	1a 6d 00             	sbb    ch,BYTE PTR [ebp+0x0]
    13e9:	00 00                	add    BYTE PTR [eax],al
    13eb:	02 91 00 13 6a 06    	add    dl,BYTE PTR [ecx+0x66a1300]
    13f1:	00 00                	add    BYTE PTR [eax],al
    13f3:	01 17                	add    DWORD PTR [edi],edx
    13f5:	2c 6a                	sub    al,0x6a
    13f7:	09 00                	or     DWORD PTR [eax],eax
    13f9:	00 02                	add    BYTE PTR [edx],al
    13fb:	91                   	xchg   ecx,eax
    13fc:	04 13                	add    al,0x13
    13fe:	78 07                	js     1407 <sysEnter_Vector-0x12ebf9>
    1400:	00 00                	add    BYTE PTR [eax],al
    1402:	01 17                	add    DWORD PTR [edi],edx
    1404:	39 4f 00             	cmp    DWORD PTR [edi+0x0],ecx
    1407:	00 00                	add    BYTE PTR [eax],al
    1409:	02 91 08 00 05 04    	add    dl,BYTE PTR [ecx+0x4050008]
    140f:	a2 02 00 00 1d       	mov    ds:0x1d000002,al
    1414:	b1 06                	mov    cl,0x6
    1416:	00 00                	add    BYTE PTR [eax],al
    1418:	01 12                	add    DWORD PTR [edx],edx
    141a:	05 4f 00 00 00       	add    eax,0x4f
    141f:	2d 09 00 9f 35       	sub    eax,0x359f0009
    1424:	00 00                	add    BYTE PTR [eax],al
    1426:	00 01                	add    BYTE PTR [ecx],al
    1428:	9c                   	pushf  
    1429:	13 5d 05             	adc    ebx,DWORD PTR [ebp+0x5]
    142c:	00 00                	add    BYTE PTR [eax],al
    142e:	01 12                	add    DWORD PTR [edx],edx
    1430:	13 6d 00             	adc    ebp,DWORD PTR [ebp+0x0]
    1433:	00 00                	add    BYTE PTR [eax],al
    1435:	02 91 00 13 6a 06    	add    dl,BYTE PTR [ecx+0x66a1300]
    143b:	00 00                	add    BYTE PTR [eax],al
    143d:	01 12                	add    DWORD PTR [edx],edx
    143f:	25 6a 09 00 00       	and    eax,0x96a
    1444:	02 91 04 13 78 07    	add    dl,BYTE PTR [ecx+0x7781304]
    144a:	00 00                	add    BYTE PTR [eax],al
    144c:	01 12                	add    DWORD PTR [edx],edx
    144e:	32 4f 00             	xor    cl,BYTE PTR [edi+0x0]
    1451:	00 00                	add    BYTE PTR [eax],al
    1453:	02 91 08 00 00 a5    	add    dl,BYTE PTR [ecx-0x5afffff8]
    1459:	02 00                	add    al,BYTE PTR [eax]
    145b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    145e:	b8 06 00 00 04       	mov    eax,0x4000006
    1463:	01 28                	add    DWORD PTR [eax],ebp
    1465:	00 00                	add    BYTE PTR [eax],al
    1467:	00 0c a9             	add    BYTE PTR [ecx+ebp*4],cl
    146a:	07                   	pop    es
    146b:	00 00                	add    BYTE PTR [eax],al
    146d:	fe 00                	inc    BYTE PTR [eax]
    146f:	00 00                	add    BYTE PTR [eax],al
    1471:	1c 12                	sbb    al,0x12
    1473:	00 9f 79 01 00 00    	add    BYTE PTR [edi+0x179],bl
    1479:	dc 09                	fmul   QWORD PTR [ecx]
    147b:	00 00                	add    BYTE PTR [eax],al
    147d:	02 01                	add    al,BYTE PTR [ecx]
    147f:	08 f0                	or     al,dh
    1481:	00 00                	add    BYTE PTR [eax],al
    1483:	00 02                	add    BYTE PTR [edx],al
    1485:	02 07                	add    al,BYTE PTR [edi]
    1487:	0e                   	push   cs
    1488:	00 00                	add    BYTE PTR [eax],al
    148a:	00 02                	add    BYTE PTR [edx],al
    148c:	04 07                	add    al,0x7
    148e:	e3 00                	jecxz  1490 <sysEnter_Vector-0x12eb70>
    1490:	00 00                	add    BYTE PTR [eax],al
    1492:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1495:	de 00                	fiadd  WORD PTR [eax]
    1497:	00 00                	add    BYTE PTR [eax],al
    1499:	02 01                	add    al,BYTE PTR [ecx]
    149b:	06                   	push   es
    149c:	f2 00 00             	repnz add BYTE PTR [eax],al
    149f:	00 02                	add    BYTE PTR [edx],al
    14a1:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    14a7:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    14ae:	02 08                	add    cl,BYTE PTR [eax]
    14b0:	05 00 00 00 00       	add    eax,0x0
    14b5:	02 08                	add    cl,BYTE PTR [eax]
    14b7:	07                   	pop    es
    14b8:	d9 00                	fld    DWORD PTR [eax]
    14ba:	00 00                	add    BYTE PTR [eax],al
    14bc:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    14c3:	04 04                	add    al,0x4
    14c5:	71 00                	jno    14c7 <sysEnter_Vector-0x12eb39>
    14c7:	00 00                	add    BYTE PTR [eax],al
    14c9:	02 01                	add    al,BYTE PTR [ecx]
    14cb:	06                   	push   es
    14cc:	f9                   	stc    
    14cd:	00 00                	add    BYTE PTR [eax],al
    14cf:	00 02                	add    BYTE PTR [edx],al
    14d1:	0c 04                	or     al,0x4
    14d3:	5e                   	pop    esi
    14d4:	01 00                	add    DWORD PTR [eax],eax
    14d6:	00 02                	add    BYTE PTR [edx],al
    14d8:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    14db:	00 00                	add    BYTE PTR [eax],al
    14dd:	00 05 ac 03 00 00    	add    BYTE PTR ds:0x3ac,al
    14e3:	07                   	pop    es
    14e4:	04 33                	add    al,0x33
    14e6:	00 00                	add    BYTE PTR [eax],al
    14e8:	00 02                	add    BYTE PTR [edx],al
    14ea:	15 12 82 01 00       	adc    eax,0x18212
    14ef:	00 06                	add    BYTE PTR [esi],al
    14f1:	3e 04 00             	ds add al,0x0
    14f4:	00 00                	add    BYTE PTR [eax],al
    14f6:	06                   	push   es
    14f7:	83 04 00 00          	add    DWORD PTR [eax+eax*1],0x0
    14fb:	01 06                	add    DWORD PTR [esi],eax
    14fd:	c5 02                	lds    eax,FWORD PTR [edx]
    14ff:	00 00                	add    BYTE PTR [eax],al
    1501:	02 06                	add    al,BYTE PTR [esi]
    1503:	8f 03                	pop    DWORD PTR [ebx]
    1505:	00 00                	add    BYTE PTR [eax],al
    1507:	03 06                	add    eax,DWORD PTR [esi]
    1509:	ab                   	stos   DWORD PTR es:[edi],eax
    150a:	02 00                	add    al,BYTE PTR [eax]
    150c:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    150f:	ac                   	lods   al,BYTE PTR ds:[esi]
    1510:	04 00                	add    al,0x0
    1512:	00 05 06 65 04 00    	add    BYTE PTR ds:0x46506,al
    1518:	00 0a                	add    BYTE PTR [edx],cl
    151a:	06                   	push   es
    151b:	d0 03                	rol    BYTE PTR [ebx],1
    151d:	00 00                	add    BYTE PTR [eax],al
    151f:	0b 06                	or     eax,DWORD PTR [esi]
    1521:	17                   	pop    ss
    1522:	04 00                	add    al,0x0
    1524:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    1527:	9d                   	popf   
    1528:	03 00                	add    eax,DWORD PTR [eax]
    152a:	00 0d 06 b6 03 00    	add    BYTE PTR ds:0x3b606,cl
    1530:	00 0e                	add    BYTE PTR [esi],cl
    1532:	06                   	push   es
    1533:	b8 02 00 00 0f       	mov    eax,0xf000002
    1538:	06                   	push   es
    1539:	f8                   	clc    
    153a:	03 00                	add    eax,DWORD PTR [eax]
    153c:	00 10                	add    BYTE PTR [eax],dl
    153e:	06                   	push   es
    153f:	f1                   	icebp  
    1540:	04 00                	add    al,0x0
    1542:	00 11                	add    BYTE PTR [ecx],dl
    1544:	06                   	push   es
    1545:	cf                   	iret   
    1546:	04 00                	add    al,0x0
    1548:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    154b:	9d                   	popf   
    154c:	04 00                	add    al,0x0
    154e:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    1551:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    1554:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    1557:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
    155a:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    155d:	5c                   	pop    esp
    155e:	03 00                	add    eax,DWORD PTR [eax]
    1560:	00 97 07 4e 04 00    	add    BYTE PTR [edi+0x44e07],dl
    1566:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1569:	07                   	pop    es
    156a:	24 04                	and    al,0x4
    156c:	00 00                	add    BYTE PTR [eax],al
    156e:	64 01 07             	add    DWORD PTR fs:[edi],eax
    1571:	0e                   	push   cs
    1572:	05 00 00 65 01       	add    eax,0x1650000
    1577:	07                   	pop    es
    1578:	38 03                	cmp    BYTE PTR [ebx],al
    157a:	00 00                	add    BYTE PTR [eax],al
    157c:	66 01 07             	add    WORD PTR [edi],ax
    157f:	20 05 00 00 67 01    	and    BYTE PTR ds:0x1670000,al
    1585:	07                   	pop    es
    1586:	c3                   	ret    
    1587:	03 00                	add    eax,DWORD PTR [eax]
    1589:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    158c:	07                   	pop    es
    158d:	f9                   	stc    
    158e:	02 00                	add    al,BYTE PTR [eax]
    1590:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    1593:	07                   	pop    es
    1594:	72 04                	jb     159a <sysEnter_Vector-0x12ea66>
    1596:	00 00                	add    BYTE PTR [eax],al
    1598:	70 01                	jo     159b <sysEnter_Vector-0x12ea65>
    159a:	07                   	pop    es
    159b:	4c                   	dec    esp
    159c:	03 00                	add    eax,DWORD PTR [eax]
    159e:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    15a1:	07                   	pop    es
    15a2:	ba 04 00 00 00       	mov    edx,0x4
    15a7:	03 07                	add    eax,DWORD PTR [edi]
    15a9:	dd 03                	fld    QWORD PTR [ebx]
    15ab:	00 00                	add    BYTE PTR [eax],al
    15ad:	01 03                	add    DWORD PTR [ebx],eax
    15af:	07                   	pop    es
    15b0:	ec                   	in     al,dx
    15b1:	03 00                	add    eax,DWORD PTR [eax]
    15b3:	00 02                	add    BYTE PTR [edx],al
    15b5:	03 07                	add    eax,DWORD PTR [edi]
    15b7:	7f 03                	jg     15bc <sysEnter_Vector-0x12ea44>
    15b9:	00 00                	add    BYTE PTR [eax],al
    15bb:	03 03                	add    eax,DWORD PTR [ebx]
    15bd:	07                   	pop    es
    15be:	d9 02                	fld    DWORD PTR [edx]
    15c0:	00 00                	add    BYTE PTR [eax],al
    15c2:	04 03                	add    al,0x3
    15c4:	07                   	pop    es
    15c5:	28 03                	sub    BYTE PTR [ebx],al
    15c7:	00 00                	add    BYTE PTR [eax],al
    15c9:	05 03 07 70 03       	add    eax,0x3700703
    15ce:	00 00                	add    BYTE PTR [eax],al
    15d0:	06                   	push   es
    15d1:	03 07                	add    eax,DWORD PTR [edi]
    15d3:	05 04 00 00 00       	add    eax,0x4
    15d8:	09 00                	or     DWORD PTR [eax],eax
    15da:	08 29                	or     BYTE PTR [ecx],ch
    15dc:	01 00                	add    DWORD PTR [eax],eax
    15de:	00 03                	add    BYTE PTR [ebx],al
    15e0:	33 0c 94             	xor    ecx,DWORD PTR [esp+edx*4]
    15e3:	01 00                	add    DWORD PTR [eax],eax
    15e5:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    15eb:	9f                   	lahf   
    15ec:	04 04                	add    al,0x4
    15ee:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    15f1:	00 09                	add    BYTE PTR [ecx],cl
    15f3:	8c 07                	mov    WORD PTR [edi],es
    15f5:	00 00                	add    BYTE PTR [eax],al
    15f7:	01 2d 0d 4f 00 00    	add    DWORD PTR ds:0x4f0d,ebp
    15fd:	00 d4                	add    ah,dl
    15ff:	12 00                	adc    al,BYTE PTR [eax]
    1601:	9f                   	lahf   
    1602:	c1 00 00             	rol    DWORD PTR [eax],0x0
    1605:	00 01                	add    BYTE PTR [ecx],al
    1607:	9c                   	pushf  
    1608:	1b 02                	sbb    eax,DWORD PTR [edx]
    160a:	00 00                	add    BYTE PTR [eax],al
    160c:	0a d9                	or     bl,cl
    160e:	06                   	push   es
    160f:	00 00                	add    BYTE PTR [eax],al
    1611:	01 2d 18 6b 00 00    	add    DWORD PTR ds:0x6b18,ebp
    1617:	00 02                	add    BYTE PTR [edx],al
    1619:	91                   	xchg   ecx,eax
    161a:	00 0a                	add    BYTE PTR [edx],cl
    161c:	9b                   	fwait
    161d:	07                   	pop    es
    161e:	00 00                	add    BYTE PTR [eax],al
    1620:	01 2d 24 4f 00 00    	add    DWORD PTR ds:0x4f24,ebp
    1626:	00 02                	add    BYTE PTR [edx],al
    1628:	91                   	xchg   ecx,eax
    1629:	04 0a                	add    al,0xa
    162b:	56                   	push   esi
    162c:	05 00 00 01 2d       	add    eax,0x2d010000
    1631:	30 4f 00             	xor    BYTE PTR [edi+0x0],cl
    1634:	00 00                	add    BYTE PTR [eax],al
    1636:	02 91 08 0b a2 07    	add    dl,BYTE PTR [ecx+0x7a20b08]
    163c:	00 00                	add    BYTE PTR [eax],al
    163e:	01 2f                	add    DWORD PTR [edi],ebp
    1640:	0a 71 00             	or     dh,BYTE PTR [ecx+0x0]
    1643:	00 00                	add    BYTE PTR [eax],al
    1645:	02 91 6b 0c 6c 65    	add    dl,BYTE PTR [ecx+0x656c0c6b]
    164b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    164c:	00 01                	add    BYTE PTR [ecx],al
    164e:	30 09                	xor    BYTE PTR [ecx],cl
    1650:	4f                   	dec    edi
    1651:	00 00                	add    BYTE PTR [eax],al
    1653:	00 02                	add    BYTE PTR [edx],al
    1655:	91                   	xchg   ecx,eax
    1656:	6c                   	ins    BYTE PTR es:[edi],dx
    1657:	0b c5                	or     eax,ebp
    1659:	07                   	pop    es
    165a:	00 00                	add    BYTE PTR [eax],al
    165c:	01 31                	add    DWORD PTR [ecx],esi
    165e:	0a 1b                	or     bl,BYTE PTR [ebx]
    1660:	02 00                	add    al,BYTE PTR [eax]
    1662:	00 02                	add    BYTE PTR [edx],al
    1664:	91                   	xchg   ecx,eax
    1665:	69 0d bb 07 00 00 01 	imul   ecx,DWORD PTR ds:0x7bb,0x18093701
    166c:	37 09 18 
    166f:	13 00                	adc    eax,DWORD PTR [eax]
    1671:	9f                   	lahf   
    1672:	00 0e                	add    BYTE PTR [esi],cl
    1674:	71 00                	jno    1676 <sysEnter_Vector-0x12e98a>
    1676:	00 00                	add    BYTE PTR [eax],al
    1678:	2b 02                	sub    eax,DWORD PTR [edx]
    167a:	00 00                	add    BYTE PTR [eax],al
    167c:	0f 33                	rdpmc  
    167e:	00 00                	add    BYTE PTR [eax],al
    1680:	00 01                	add    BYTE PTR [ecx],al
    1682:	00 10                	add    BYTE PTR [eax],dl
    1684:	84 07                	test   BYTE PTR [edi],al
    1686:	00 00                	add    BYTE PTR [eax],al
    1688:	01 1f                	add    DWORD PTR [edi],ebx
    168a:	0e                   	push   cs
    168b:	71 00                	jno    168d <sysEnter_Vector-0x12e973>
    168d:	00 00                	add    BYTE PTR [eax],al
    168f:	8d 12                	lea    edx,[edx]
    1691:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
    1697:	01 9c 53 02 00 00 0c 	add    DWORD PTR [ebx+edx*2+0xc000002],ebx
    169e:	63 00                	arpl   WORD PTR [eax],ax
    16a0:	01 21                	add    DWORD PTR [ecx],esp
    16a2:	0a 71 00             	or     dh,BYTE PTR [ecx+0x0]
    16a5:	00 00                	add    BYTE PTR [eax],al
    16a7:	02 91 73 00 11 91    	add    dl,BYTE PTR [ecx-0x6eeeff8d]
    16ad:	07                   	pop    es
    16ae:	00 00                	add    BYTE PTR [eax],al
    16b0:	01 14 0e             	add    DWORD PTR [esi+ecx*1],edx
    16b3:	46                   	inc    esi
    16b4:	12 00                	adc    al,BYTE PTR [eax]
    16b6:	9f                   	lahf   
    16b7:	47                   	inc    edi
    16b8:	00 00                	add    BYTE PTR [eax],al
    16ba:	00 01                	add    BYTE PTR [ecx],al
    16bc:	9c                   	pushf  
    16bd:	86 02                	xchg   BYTE PTR [edx],al
    16bf:	00 00                	add    BYTE PTR [eax],al
    16c1:	12 63 00             	adc    ah,BYTE PTR [ebx+0x0]
    16c4:	01 14 18             	add    DWORD PTR [eax+ebx*1],edx
    16c7:	71 00                	jno    16c9 <sysEnter_Vector-0x12e937>
    16c9:	00 00                	add    BYTE PTR [eax],al
    16cb:	02 91 60 0b d9 06    	add    dl,BYTE PTR [ecx+0x6d90b60]
    16d1:	00 00                	add    BYTE PTR [eax],al
    16d3:	01 16                	add    DWORD PTR [esi],edx
    16d5:	0a 1b                	or     bl,BYTE PTR [ebx]
    16d7:	02 00                	add    al,BYTE PTR [eax]
    16d9:	00 02                	add    BYTE PTR [edx],al
    16db:	91                   	xchg   ecx,eax
    16dc:	72 00                	jb     16de <sysEnter_Vector-0x12e922>
    16de:	13 96 07 00 00 01    	adc    edx,DWORD PTR [esi+0x1000007]
    16e4:	0f 0e                	femms  
    16e6:	1c 12                	sbb    al,0x12
    16e8:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
    16ee:	01 9c 0a d9 06 00 00 	add    DWORD PTR [edx+ecx*1+0x6d9],ebx
    16f5:	01 0f                	add    DWORD PTR [edi],ecx
    16f7:	19 6b 00             	sbb    DWORD PTR [ebx+0x0],ebp
    16fa:	00 00                	add    BYTE PTR [eax],al
    16fc:	02 91 00 00 00 53    	add    dl,BYTE PTR [ecx+0x53000000]
    1702:	0c 00                	or     al,0x0
    1704:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1707:	fa                   	cli    
    1708:	07                   	pop    es
    1709:	00 00                	add    BYTE PTR [eax],al
    170b:	04 01                	add    al,0x1
    170d:	28 00                	sub    BYTE PTR [eax],al
    170f:	00 00                	add    BYTE PTR [eax],al
    1711:	0c 79                	or     al,0x79
    1713:	09 00                	or     DWORD PTR [eax],eax
    1715:	00 fe                	add    dh,bh
    1717:	00 00                	add    BYTE PTR [eax],al
    1719:	00 95 13 00 9f d2    	add    BYTE PTR [ebp-0x2d60ffed],dl
    171f:	0d 00 00 fc 0a       	or     eax,0xafc0000
    1724:	00 00                	add    BYTE PTR [eax],al
    1726:	02 01                	add    al,BYTE PTR [ecx]
    1728:	08 f0                	or     al,dh
    172a:	00 00                	add    BYTE PTR [eax],al
    172c:	00 02                	add    BYTE PTR [edx],al
    172e:	02 07                	add    al,BYTE PTR [edi]
    1730:	0e                   	push   cs
    1731:	00 00                	add    BYTE PTR [eax],al
    1733:	00 02                	add    BYTE PTR [edx],al
    1735:	04 07                	add    al,0x7
    1737:	e3 00                	jecxz  1739 <sysEnter_Vector-0x12e8c7>
    1739:	00 00                	add    BYTE PTR [eax],al
    173b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    173e:	de 00                	fiadd  WORD PTR [eax]
    1740:	00 00                	add    BYTE PTR [eax],al
    1742:	02 01                	add    al,BYTE PTR [ecx]
    1744:	06                   	push   es
    1745:	f2 00 00             	repnz add BYTE PTR [eax],al
    1748:	00 02                	add    BYTE PTR [edx],al
    174a:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    1750:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1757:	02 08                	add    cl,BYTE PTR [eax]
    1759:	05 00 00 00 00       	add    eax,0x0
    175e:	02 08                	add    cl,BYTE PTR [eax]
    1760:	07                   	pop    es
    1761:	d9 00                	fld    DWORD PTR [eax]
    1763:	00 00                	add    BYTE PTR [eax],al
    1765:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    176c:	04 04                	add    al,0x4
    176e:	05 04 73 00 00       	add    eax,0x7304
    1773:	00 02                	add    BYTE PTR [edx],al
    1775:	01 06                	add    DWORD PTR [esi],eax
    1777:	f9                   	stc    
    1778:	00 00                	add    BYTE PTR [eax],al
    177a:	00 06                	add    BYTE PTR [esi],al
    177c:	73 00                	jae    177e <sysEnter_Vector-0x12e882>
    177e:	00 00                	add    BYTE PTR [eax],al
    1780:	07                   	pop    es
    1781:	07                   	pop    es
    1782:	09 00                	or     DWORD PTR [eax],eax
    1784:	00 02                	add    BYTE PTR [edx],al
    1786:	28 1b                	sub    BYTE PTR [ebx],bl
    1788:	8b 00                	mov    eax,DWORD PTR [eax]
    178a:	00 00                	add    BYTE PTR [eax],al
    178c:	08 04 36             	or     BYTE PTR [esi+esi*1],al
    178f:	08 00                	or     BYTE PTR [eax],al
    1791:	00 73 00             	add    BYTE PTR [ebx+0x0],dh
    1794:	00 00                	add    BYTE PTR [eax],al
    1796:	07                   	pop    es
    1797:	0e                   	push   cs
    1798:	09 00                	or     DWORD PTR [eax],eax
    179a:	00 02                	add    BYTE PTR [edx],al
    179c:	63 18                	arpl   WORD PTR [eax],bx
    179e:	7f 00                	jg     17a0 <sysEnter_Vector-0x12e860>
    17a0:	00 00                	add    BYTE PTR [eax],al
    17a2:	07                   	pop    es
    17a3:	78 02                	js     17a7 <sysEnter_Vector-0x12e859>
    17a5:	00 00                	add    BYTE PTR [eax],al
    17a7:	03 34 19             	add    esi,DWORD PTR [ecx+ebx*1]
    17aa:	33 00                	xor    eax,DWORD PTR [eax]
    17ac:	00 00                	add    BYTE PTR [eax],al
    17ae:	07                   	pop    es
    17af:	8f 02                	pop    DWORD PTR [edx]
    17b1:	00 00                	add    BYTE PTR [eax],al
    17b3:	03 56 1a             	add    edx,DWORD PTR [esi+0x1a]
    17b6:	33 00                	xor    eax,DWORD PTR [eax]
    17b8:	00 00                	add    BYTE PTR [eax],al
    17ba:	07                   	pop    es
    17bb:	d2 02                	rol    BYTE PTR [edx],cl
    17bd:	00 00                	add    BYTE PTR [eax],al
    17bf:	04 d1                	add    al,0xd1
    17c1:	17                   	pop    ss
    17c2:	33 00                	xor    eax,DWORD PTR [eax]
    17c4:	00 00                	add    BYTE PTR [eax],al
    17c6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    17c9:	5e                   	pop    esi
    17ca:	01 00                	add    DWORD PTR [eax],eax
    17cc:	00 02                	add    BYTE PTR [edx],al
    17ce:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    17d1:	00 00                	add    BYTE PTR [eax],al
    17d3:	00 09                	add    BYTE PTR [ecx],cl
    17d5:	ac                   	lods   al,BYTE PTR ds:[esi]
    17d6:	03 00                	add    eax,DWORD PTR [eax]
    17d8:	00 07                	add    BYTE PTR [edi],al
    17da:	04 33                	add    al,0x33
    17dc:	00 00                	add    BYTE PTR [eax],al
    17de:	00 07                	add    BYTE PTR [edi],al
    17e0:	15 12 cf 01 00       	adc    eax,0x1cf12
    17e5:	00 0a                	add    BYTE PTR [edx],cl
    17e7:	3e 04 00             	ds add al,0x0
    17ea:	00 00                	add    BYTE PTR [eax],al
    17ec:	0a 83 04 00 00 01    	or     al,BYTE PTR [ebx+0x1000004]
    17f2:	0a c5                	or     al,ch
    17f4:	02 00                	add    al,BYTE PTR [eax]
    17f6:	00 02                	add    BYTE PTR [edx],al
    17f8:	0a 8f 03 00 00 03    	or     cl,BYTE PTR [edi+0x3000003]
    17fe:	0a ab 02 00 00 04    	or     ch,BYTE PTR [ebx+0x4000002]
    1804:	0a ac 04 00 00 05 0a 	or     ch,BYTE PTR [esp+eax*1+0xa050000]
    180b:	65 04 00             	gs add al,0x0
    180e:	00 0a                	add    BYTE PTR [edx],cl
    1810:	0a d0                	or     dl,al
    1812:	03 00                	add    eax,DWORD PTR [eax]
    1814:	00 0b                	add    BYTE PTR [ebx],cl
    1816:	0a 17                	or     dl,BYTE PTR [edi]
    1818:	04 00                	add    al,0x0
    181a:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
    181d:	9d                   	popf   
    181e:	03 00                	add    eax,DWORD PTR [eax]
    1820:	00 0d 0a b6 03 00    	add    BYTE PTR ds:0x3b60a,cl
    1826:	00 0e                	add    BYTE PTR [esi],cl
    1828:	0a b8 02 00 00 0f    	or     bh,BYTE PTR [eax+0xf000002]
    182e:	0a f8                	or     bh,al
    1830:	03 00                	add    eax,DWORD PTR [eax]
    1832:	00 10                	add    BYTE PTR [eax],dl
    1834:	0a f1                	or     dh,cl
    1836:	04 00                	add    al,0x0
    1838:	00 11                	add    BYTE PTR [ecx],dl
    183a:	0a cf                	or     cl,bh
    183c:	04 00                	add    al,0x0
    183e:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    1841:	9d                   	popf   
    1842:	04 00                	add    al,0x0
    1844:	00 50 0a             	add    BYTE PTR [eax+0xa],dl
    1847:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    184a:	00 59 0a             	add    BYTE PTR [ecx+0xa],bl
    184d:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
    1850:	00 61 0a             	add    BYTE PTR [ecx+0xa],ah
    1853:	5c                   	pop    esp
    1854:	03 00                	add    eax,DWORD PTR [eax]
    1856:	00 97 0b 4e 04 00    	add    BYTE PTR [edi+0x44e0b],dl
    185c:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    185f:	0b 24 04             	or     esp,DWORD PTR [esp+eax*1]
    1862:	00 00                	add    BYTE PTR [eax],al
    1864:	64 01 0b             	add    DWORD PTR fs:[ebx],ecx
    1867:	0e                   	push   cs
    1868:	05 00 00 65 01       	add    eax,0x1650000
    186d:	0b 38                	or     edi,DWORD PTR [eax]
    186f:	03 00                	add    eax,DWORD PTR [eax]
    1871:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    1874:	0b 20                	or     esp,DWORD PTR [eax]
    1876:	05 00 00 67 01       	add    eax,0x1670000
    187b:	0b c3                	or     eax,ebx
    187d:	03 00                	add    eax,DWORD PTR [eax]
    187f:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    1882:	0b f9                	or     edi,ecx
    1884:	02 00                	add    al,BYTE PTR [eax]
    1886:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    1889:	0b 72 04             	or     esi,DWORD PTR [edx+0x4]
    188c:	00 00                	add    BYTE PTR [eax],al
    188e:	70 01                	jo     1891 <sysEnter_Vector-0x12e76f>
    1890:	0b 4c 03 00          	or     ecx,DWORD PTR [ebx+eax*1+0x0]
    1894:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    1897:	0b ba 04 00 00 00    	or     edi,DWORD PTR [edx+0x4]
    189d:	03 0b                	add    ecx,DWORD PTR [ebx]
    189f:	dd 03                	fld    QWORD PTR [ebx]
    18a1:	00 00                	add    BYTE PTR [eax],al
    18a3:	01 03                	add    DWORD PTR [ebx],eax
    18a5:	0b ec                	or     ebp,esp
    18a7:	03 00                	add    eax,DWORD PTR [eax]
    18a9:	00 02                	add    BYTE PTR [edx],al
    18ab:	03 0b                	add    ecx,DWORD PTR [ebx]
    18ad:	7f 03                	jg     18b2 <sysEnter_Vector-0x12e74e>
    18af:	00 00                	add    BYTE PTR [eax],al
    18b1:	03 03                	add    eax,DWORD PTR [ebx]
    18b3:	0b d9                	or     ebx,ecx
    18b5:	02 00                	add    al,BYTE PTR [eax]
    18b7:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    18ba:	0b 28                	or     ebp,DWORD PTR [eax]
    18bc:	03 00                	add    eax,DWORD PTR [eax]
    18be:	00 05 03 0b 70 03    	add    BYTE PTR ds:0x3700b03,al
    18c4:	00 00                	add    BYTE PTR [eax],al
    18c6:	06                   	push   es
    18c7:	03 0b                	add    ecx,DWORD PTR [ebx]
    18c9:	05 04 00 00 00       	add    eax,0x4
    18ce:	09 00                	or     DWORD PTR [eax],eax
    18d0:	0c 29                	or     al,0x29
    18d2:	01 00                	add    DWORD PTR [eax],eax
    18d4:	00 05 33 0c e1 01    	add    BYTE PTR ds:0x1e10c33,al
    18da:	00 00                	add    BYTE PTR [eax],al
    18dc:	05 03 20 7f 00       	add    eax,0x7f2003
    18e1:	9f                   	lahf   
    18e2:	05 04 6d 00 00       	add    eax,0x6d04
    18e7:	00 0c 47             	add    BYTE PTR [edi+eax*2],cl
    18ea:	02 00                	add    al,BYTE PTR [eax]
    18ec:	00 06                	add    BYTE PTR [esi],al
    18ee:	35 10 f9 01 00       	xor    eax,0x1f910
    18f3:	00 05 03 30 7f 00    	add    BYTE PTR ds:0x7f3003,al
    18f9:	9f                   	lahf   
    18fa:	05 04 ad 00 00       	add    eax,0xad04
    18ff:	00 0c 99             	add    BYTE PTR [ecx+ebx*4],cl
    1902:	02 00                	add    al,BYTE PTR [eax]
    1904:	00 06                	add    BYTE PTR [esi],al
    1906:	36 0e                	ss push cs
    1908:	a1 00 00 00 05       	mov    eax,ds:0x5000000
    190d:	03 2c 7f             	add    ebp,DWORD PTR [edi+edi*2]
    1910:	00 9f 05 04 7a 00    	add    BYTE PTR [edi+0x7a0405],bl
    1916:	00 00                	add    BYTE PTR [eax],al
    1918:	02 01                	add    al,BYTE PTR [ecx]
    191a:	02 ab 06 00 00 02    	add    ch,BYTE PTR [ebx+0x2000006]
    1920:	08 04 63             	or     BYTE PTR [ebx+eiz*2],al
    1923:	01 00                	add    DWORD PTR [eax],eax
    1925:	00 0c 12             	add    BYTE PTR [edx+edx*1],cl
    1928:	0a 00                	or     al,BYTE PTR [eax]
    192a:	00 01                	add    BYTE PTR [ecx],al
    192c:	0d 06 17 02 00       	or     eax,0x21706
    1931:	00 05 03 44 7f 00    	add    BYTE PTR ds:0x7f4403,al
    1937:	9f                   	lahf   
    1938:	0c 8a                	or     al,0x8a
    193a:	08 00                	or     BYTE PTR [eax],al
    193c:	00 01                	add    BYTE PTR [ecx],al
    193e:	0e                   	push   cs
    193f:	07                   	pop    es
    1940:	6d                   	ins    DWORD PTR es:[edi],dx
    1941:	00 00                	add    BYTE PTR [eax],al
    1943:	00 05 03 48 7f 00    	add    BYTE PTR ds:0x7f4803,al
    1949:	9f                   	lahf   
    194a:	0d b1 09 00 00       	or     eax,0x9b1
    194f:	01 7a 01             	add    DWORD PTR [edx+0x1],edi
    1952:	0d 4f 00 00 00       	or     eax,0x4f
    1957:	43                   	inc    ebx
    1958:	21 00                	and    DWORD PTR [eax],eax
    195a:	9f                   	lahf   
    195b:	24 00                	and    al,0x0
    195d:	00 00                	add    BYTE PTR [eax],al
    195f:	01 9c 95 02 00 00 0e 	add    DWORD PTR [ebp+edx*4+0xe000002],ebx
    1966:	ee                   	out    dx,al
    1967:	08 00                	or     BYTE PTR [eax],al
    1969:	00 01                	add    BYTE PTR [ecx],al
    196b:	7a 01                	jp     196e <sysEnter_Vector-0x12e692>
    196d:	1d 4f 00 00 00       	sbb    eax,0x4f
    1972:	02 91 00 0f 77 68    	add    dl,BYTE PTR [ecx+0x68770f00]
    1978:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1979:	00 01                	add    BYTE PTR [ecx],al
    197b:	7a 01                	jp     197e <sysEnter_Vector-0x12e682>
    197d:	28 4f 00             	sub    BYTE PTR [edi+0x0],cl
    1980:	00 00                	add    BYTE PTR [eax],al
    1982:	02 91 04 0e 16 09    	add    dl,BYTE PTR [ecx+0x9160e04]
    1988:	00 00                	add    BYTE PTR [eax],al
    198a:	01 7a 01             	add    DWORD PTR [edx+0x1],edi
    198d:	31 4f 00             	xor    DWORD PTR [edi+0x0],ecx
    1990:	00 00                	add    BYTE PTR [eax],al
    1992:	02 91 08 00 10 f5    	add    dl,BYTE PTR [ecx-0xaeffff8]
    1998:	09 00                	or     DWORD PTR [eax],eax
    199a:	00 01                	add    BYTE PTR [ecx],al
    199c:	75 01                	jne    199f <sysEnter_Vector-0x12e661>
    199e:	0e                   	push   cs
    199f:	22 21                	and    ah,BYTE PTR [ecx]
    19a1:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
    19a7:	01 9c 0d e1 09 00 00 	add    DWORD PTR [ebp+ecx*1+0x9e1],ebx
    19ae:	01 70 01             	add    DWORD PTR [eax+0x1],esi
    19b1:	0d 4f 00 00 00       	or     eax,0x4f
    19b6:	fb                   	sti    
    19b7:	20 00                	and    BYTE PTR [eax],al
    19b9:	9f                   	lahf   
    19ba:	27                   	daa    
    19bb:	00 00                	add    BYTE PTR [eax],al
    19bd:	00 01                	add    BYTE PTR [ecx],al
    19bf:	9c                   	pushf  
    19c0:	e4 02                	in     al,0x2
    19c2:	00 00                	add    BYTE PTR [eax],al
    19c4:	0f 73                	(bad)  
    19c6:	74 64                	je     1a2c <sysEnter_Vector-0x12e5d4>
    19c8:	00 01                	add    BYTE PTR [ecx],al
    19ca:	70 01                	jo     19cd <sysEnter_Vector-0x12e633>
    19cc:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
    19cf:	00 00                	add    BYTE PTR [eax],al
    19d1:	02 91 00 0e ff 09    	add    dl,BYTE PTR [ecx+0x9ff0e00]
    19d7:	00 00                	add    BYTE PTR [eax],al
    19d9:	01 70 01             	add    DWORD PTR [eax+0x1],esi
    19dc:	26 a1 00 00 00 02    	mov    eax,es:0x2000000
    19e2:	91                   	xchg   ecx,eax
    19e3:	04 00                	add    al,0x0
    19e5:	0d 61 08 00 00       	or     eax,0x861
    19ea:	01 6b 01             	add    DWORD PTR [ebx+0x1],ebp
    19ed:	10 e1                	adc    cl,ah
    19ef:	01 00                	add    DWORD PTR [eax],eax
    19f1:	00 d4                	add    ah,dl
    19f3:	20 00                	and    BYTE PTR [eax],al
    19f5:	9f                   	lahf   
    19f6:	27                   	daa    
    19f7:	00 00                	add    BYTE PTR [eax],al
    19f9:	00 01                	add    BYTE PTR [ecx],al
    19fb:	9c                   	pushf  
    19fc:	20 03                	and    BYTE PTR [ebx],al
    19fe:	00 00                	add    BYTE PTR [eax],al
    1a00:	0e                   	push   cs
    1a01:	8a 09                	mov    cl,BYTE PTR [ecx]
    1a03:	00 00                	add    BYTE PTR [eax],al
    1a05:	01 6b 01             	add    DWORD PTR [ebx+0x1],ebp
    1a08:	24 6d                	and    al,0x6d
    1a0a:	00 00                	add    BYTE PTR [eax],al
    1a0c:	00 02                	add    BYTE PTR [edx],al
    1a0e:	91                   	xchg   ecx,eax
    1a0f:	00 0e                	add    BYTE PTR [esi],cl
    1a11:	e8 09 00 00 01       	call   1001a1f <sysEnter_Vector+0xed1a1f>
    1a16:	6b 01 32             	imul   eax,DWORD PTR [ecx],0x32
    1a19:	20 03                	and    BYTE PTR [ebx],al
    1a1b:	00 00                	add    BYTE PTR [eax],al
    1a1d:	02 91 04 00 05 04    	add    dl,BYTE PTR [ecx+0x4050004]
    1a23:	4f                   	dec    edi
    1a24:	00 00                	add    BYTE PTR [eax],al
    1a26:	00 0d a4 08 00 00    	add    BYTE PTR ds:0x8a4,cl
    1a2c:	01 2d 01 08 e1 01    	add    DWORD PTR ds:0x1e10801,ebp
    1a32:	00 00                	add    BYTE PTR [eax],al
    1a34:	e6 1d                	out    0x1d,al
    1a36:	00 9f ee 02 00 00    	add    BYTE PTR [edi+0x2ee],bl
    1a3c:	01 9c 22 04 00 00 0e 	add    DWORD PTR [edx+eiz*1+0xe000004],ebx
    1a43:	8a 09                	mov    cl,BYTE PTR [ecx]
    1a45:	00 00                	add    BYTE PTR [eax],al
    1a47:	01 2d 01 23 11 02    	add    DWORD PTR ds:0x2112301,ebp
    1a4d:	00 00                	add    BYTE PTR [eax],al
    1a4f:	02 91 00 0e e8 09    	add    dl,BYTE PTR [ecx+0x9e80e00]
    1a55:	00 00                	add    BYTE PTR [eax],al
    1a57:	01 2d 01 31 20 03    	add    DWORD PTR ds:0x3203101,ebp
    1a5d:	00 00                	add    BYTE PTR [eax],al
    1a5f:	02 91 04 11 22 0a    	add    dl,BYTE PTR [ecx+0xa221104]
    1a65:	00 00                	add    BYTE PTR [eax],al
    1a67:	01 2f                	add    DWORD PTR [edi],ebp
    1a69:	01 0c e1             	add    DWORD PTR [ecx+eiz*8],ecx
    1a6c:	01 00                	add    DWORD PTR [eax],eax
    1a6e:	00 02                	add    BYTE PTR [edx],al
    1a70:	91                   	xchg   ecx,eax
    1a71:	54                   	push   esp
    1a72:	12 63 6d             	adc    ah,BYTE PTR [ebx+0x6d]
    1a75:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1a78:	30 01                	xor    BYTE PTR [ecx],al
    1a7a:	0a 22                	or     ah,BYTE PTR [edx]
    1a7c:	04 00                	add    al,0x0
    1a7e:	00 03                	add    BYTE PTR [ebx],al
    1a80:	91                   	xchg   ecx,eax
    1a81:	d0 77 11             	shl    BYTE PTR [edi+0x11],1
    1a84:	53                   	push   ebx
    1a85:	08 00                	or     BYTE PTR [eax],al
    1a87:	00 01                	add    BYTE PTR [ecx],al
    1a89:	31 01                	xor    DWORD PTR [ecx],eax
    1a8b:	0b 6d 00             	or     ebp,DWORD PTR [ebp+0x0]
    1a8e:	00 00                	add    BYTE PTR [eax],al
    1a90:	02 91 6c 11 d0 07    	add    dl,BYTE PTR [ecx+0x7d0116c]
    1a96:	00 00                	add    BYTE PTR [eax],al
    1a98:	01 31                	add    DWORD PTR [ecx],esi
    1a9a:	01 1a                	add    DWORD PTR [edx],ebx
    1a9c:	6d                   	ins    DWORD PTR es:[edi],dx
    1a9d:	00 00                	add    BYTE PTR [eax],al
    1a9f:	00 02                	add    BYTE PTR [edx],al
    1aa1:	91                   	xchg   ecx,eax
    1aa2:	68 11 f0 07 00       	push   0x7f011
    1aa7:	00 01                	add    BYTE PTR [ecx],al
    1aa9:	31 01                	xor    DWORD PTR [ecx],eax
    1aab:	2d 6d 00 00 00       	sub    eax,0x6d
    1ab0:	02 91 5c 11 2d 08    	add    dl,BYTE PTR [ecx+0x82d115c]
    1ab6:	00 00                	add    BYTE PTR [eax],al
    1ab8:	01 32                	add    DWORD PTR [edx],esi
    1aba:	01 0a                	add    DWORD PTR [edx],ecx
    1abc:	33 04 00             	xor    eax,DWORD PTR [eax+eax*1]
    1abf:	00 03                	add    BYTE PTR [ebx],al
    1ac1:	91                   	xchg   ecx,eax
    1ac2:	ce                   	into   
    1ac3:	77 11                	ja     1ad6 <sysEnter_Vector-0x12e52a>
    1ac5:	f9                   	stc    
    1ac6:	07                   	pop    es
    1ac7:	00 00                	add    BYTE PTR [eax],al
    1ac9:	01 4b 01             	add    DWORD PTR [ebx+0x1],ecx
    1acc:	09 4f 00             	or     DWORD PTR [edi+0x0],ecx
    1acf:	00 00                	add    BYTE PTR [eax],al
    1ad1:	02 91 64 13 9c 1e    	add    dl,BYTE PTR [ecx+0x1e9c1364]
    1ad7:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    1add:	f1                   	icebp  
    1ade:	03 00                	add    eax,DWORD PTR [eax]
    1ae0:	00 11                	add    BYTE PTR [ecx],dl
    1ae2:	5c                   	pop    esp
    1ae3:	08 00                	or     BYTE PTR [eax],al
    1ae5:	00 01                	add    BYTE PTR [ecx],al
    1ae7:	3d 01 13 6d 00       	cmp    eax,0x6d1301
    1aec:	00 00                	add    BYTE PTR [eax],al
    1aee:	02 91 58 00 14 4c    	add    dl,BYTE PTR [ecx+0x4c140058]
    1af4:	1f                   	pop    ds
    1af5:	00 9f 7e 01 00 00    	add    BYTE PTR [edi+0x17e],bl
    1afb:	12 63 6e             	adc    ah,BYTE PTR [ebx+0x6e]
    1afe:	74 00                	je     1b00 <sysEnter_Vector-0x12e500>
    1b00:	01 4d 01             	add    DWORD PTR [ebp+0x1],ecx
    1b03:	0e                   	push   cs
    1b04:	4f                   	dec    edi
    1b05:	00 00                	add    BYTE PTR [eax],al
    1b07:	00 02                	add    BYTE PTR [edx],al
    1b09:	91                   	xchg   ecx,eax
    1b0a:	60                   	pusha  
    1b0b:	15 00 00 00 00       	adc    eax,0x0
    1b10:	11 5c 08 00          	adc    DWORD PTR [eax+ecx*1+0x0],ebx
    1b14:	00 01                	add    BYTE PTR [ecx],al
    1b16:	53                   	push   ebx
    1b17:	01 13                	add    DWORD PTR [ebx],edx
    1b19:	6d                   	ins    DWORD PTR es:[edi],dx
    1b1a:	00 00                	add    BYTE PTR [eax],al
    1b1c:	00 02                	add    BYTE PTR [edx],al
    1b1e:	91                   	xchg   ecx,eax
    1b1f:	50                   	push   eax
    1b20:	00 00                	add    BYTE PTR [eax],al
    1b22:	00 16                	add    BYTE PTR [esi],dl
    1b24:	73 00                	jae    1b26 <sysEnter_Vector-0x12e4da>
    1b26:	00 00                	add    BYTE PTR [eax],al
    1b28:	33 04 00             	xor    eax,DWORD PTR [eax+eax*1]
    1b2b:	00 17                	add    BYTE PTR [edi],dl
    1b2d:	33 00                	xor    eax,DWORD PTR [eax]
    1b2f:	00 00                	add    BYTE PTR [eax],al
    1b31:	ff 03                	inc    DWORD PTR [ebx]
    1b33:	00 16                	add    BYTE PTR [esi],dl
    1b35:	73 00                	jae    1b37 <sysEnter_Vector-0x12e4c9>
    1b37:	00 00                	add    BYTE PTR [eax],al
    1b39:	43                   	inc    ebx
    1b3a:	04 00                	add    al,0x0
    1b3c:	00 18                	add    BYTE PTR [eax],bl
    1b3e:	33 00                	xor    eax,DWORD PTR [eax]
    1b40:	00 00                	add    BYTE PTR [eax],al
    1b42:	01 00                	add    DWORD PTR [eax],eax
    1b44:	0d 48 08 00 00       	or     eax,0x848
    1b49:	01 28                	add    DWORD PTR [eax],ebp
    1b4b:	01 10                	add    DWORD PTR [eax],edx
    1b4d:	b9 00 00 00 c2       	mov    ecx,0xc2000000
    1b52:	1d 00 9f 24 00       	sbb    eax,0x249f00
    1b57:	00 00                	add    BYTE PTR [eax],al
    1b59:	01 9c 8f 04 00 00 0e 	add    DWORD PTR [edi+ecx*4+0xe000004],ebx
    1b60:	d9 06                	fld    DWORD PTR [esi]
    1b62:	00 00                	add    BYTE PTR [eax],al
    1b64:	01 28                	add    DWORD PTR [eax],ebp
    1b66:	01 1c 6d 00 00 00 02 	add    DWORD PTR [ebp*2+0x2000000],ebx
    1b6d:	91                   	xchg   ecx,eax
    1b6e:	00 0e                	add    BYTE PTR [esi],cl
    1b70:	22 0a                	and    cl,BYTE PTR [edx]
    1b72:	00 00                	add    BYTE PTR [eax],al
    1b74:	01 28                	add    DWORD PTR [eax],ebp
    1b76:	01 2a                	add    DWORD PTR [edx],ebp
    1b78:	e1 01                	loope  1b7b <sysEnter_Vector-0x12e485>
    1b7a:	00 00                	add    BYTE PTR [eax],al
    1b7c:	02 91 04 0e e4 08    	add    dl,BYTE PTR [ecx+0x8e40e04]
    1b82:	00 00                	add    BYTE PTR [eax],al
    1b84:	01 28                	add    DWORD PTR [eax],ebp
    1b86:	01 39                	add    DWORD PTR [ecx],edi
    1b88:	b9 00 00 00 02       	mov    ecx,0x2000000
    1b8d:	91                   	xchg   ecx,eax
    1b8e:	08 00                	or     BYTE PTR [eax],al
    1b90:	19 aa 09 00 00 01    	sbb    DWORD PTR [edx+0x1000009],ebp
    1b96:	f8                   	clc    
    1b97:	08 b9 00 00 00 70    	or     BYTE PTR [ecx+0x70000000],bh
    1b9d:	1c 00                	sbb    al,0x0
    1b9f:	9f                   	lahf   
    1ba0:	52                   	push   edx
    1ba1:	01 00                	add    DWORD PTR [eax],eax
    1ba3:	00 01                	add    BYTE PTR [ecx],al
    1ba5:	9c                   	pushf  
    1ba6:	7b 05                	jnp    1bad <sysEnter_Vector-0x12e453>
    1ba8:	00 00                	add    BYTE PTR [eax],al
    1baa:	1a d9                	sbb    bl,cl
    1bac:	06                   	push   es
    1bad:	00 00                	add    BYTE PTR [eax],al
    1baf:	01 f8                	add    eax,edi
    1bb1:	15 6d 00 00 00       	adc    eax,0x6d
    1bb6:	02 91 00 1a 22 0a    	add    dl,BYTE PTR [ecx+0xa221a00]
    1bbc:	00 00                	add    BYTE PTR [eax],al
    1bbe:	01 f8                	add    eax,edi
    1bc0:	23 e1                	and    esp,ecx
    1bc2:	01 00                	add    DWORD PTR [eax],eax
    1bc4:	00 02                	add    BYTE PTR [edx],al
    1bc6:	91                   	xchg   ecx,eax
    1bc7:	04 1a                	add    al,0x1a
    1bc9:	e4 08                	in     al,0x8
    1bcb:	00 00                	add    BYTE PTR [eax],al
    1bcd:	01 f8                	add    eax,edi
    1bcf:	32 b9 00 00 00 02    	xor    bh,BYTE PTR [ecx+0x2000000]
    1bd5:	91                   	xchg   ecx,eax
    1bd6:	08 1b                	or     BYTE PTR [ebx],bl
    1bd8:	70 00                	jo     1bda <sysEnter_Vector-0x12e426>
    1bda:	01 fa                	add    edx,edi
    1bdc:	0b 6d 00             	or     ebp,DWORD PTR [ebp+0x0]
    1bdf:	00 00                	add    BYTE PTR [eax],al
    1be1:	02 91 74 1c 01 08    	add    dl,BYTE PTR [ecx+0x8011c74]
    1be7:	00 00                	add    BYTE PTR [eax],al
    1be9:	01 fa                	add    edx,edi
    1beb:	0f 6d                	(bad)  
    1bed:	00 00                	add    BYTE PTR [eax],al
    1bef:	00 02                	add    BYTE PTR [edx],al
    1bf1:	91                   	xchg   ecx,eax
    1bf2:	70 1b                	jo     1c0f <sysEnter_Vector-0x12e3f1>
    1bf4:	63 00                	arpl   WORD PTR [eax],ax
    1bf6:	01 fb                	add    ebx,edi
    1bf8:	09 4f 00             	or     DWORD PTR [edi+0x0],ecx
    1bfb:	00 00                	add    BYTE PTR [eax],al
    1bfd:	02 91 64 09 72 09    	add    dl,BYTE PTR [ecx+0x9720964]
    1c03:	00 00                	add    BYTE PTR [eax],al
    1c05:	07                   	pop    es
    1c06:	04 33                	add    al,0x33
    1c08:	00 00                	add    BYTE PTR [eax],al
    1c0a:	00 01                	add    BYTE PTR [ecx],al
    1c0c:	fc                   	cld    
    1c0d:	0a 24 05 00 00 0a 6d 	or     ah,BYTE PTR [eax*1+0x6d0a0000]
    1c14:	09 00                	or     DWORD PTR [eax],eax
    1c16:	00 00                	add    BYTE PTR [eax],al
    1c18:	0a dc                	or     bl,ah
    1c1a:	08 00                	or     BYTE PTR [eax],al
    1c1c:	00 01                	add    BYTE PTR [ecx],al
    1c1e:	0a d7                	or     dl,bh
    1c20:	09 00                	or     DWORD PTR [eax],eax
    1c22:	00 02                	add    BYTE PTR [edx],al
    1c24:	00 1c 27             	add    BYTE PTR [edi+eiz*1],bl
    1c27:	08 00                	or     BYTE PTR [eax],al
    1c29:	00 01                	add    BYTE PTR [ecx],al
    1c2b:	fc                   	cld    
    1c2c:	2e ff 04 00          	inc    DWORD PTR cs:[eax+eax*1]
    1c30:	00 02                	add    BYTE PTR [edx],al
    1c32:	91                   	xchg   ecx,eax
    1c33:	6c                   	ins    BYTE PTR es:[edi],dx
    1c34:	1c e8                	sbb    al,0xe8
    1c36:	09 00                	or     DWORD PTR [eax],eax
    1c38:	00 01                	add    BYTE PTR [ecx],al
    1c3a:	fd                   	std    
    1c3b:	0c b9                	or     al,0xb9
    1c3d:	00 00                	add    BYTE PTR [eax],al
    1c3f:	00 02                	add    BYTE PTR [edx],al
    1c41:	91                   	xchg   ecx,eax
    1c42:	68 13 ca 1c 00       	push   0x1cca13
    1c47:	9f                   	lahf   
    1c48:	0e                   	push   cs
    1c49:	00 00                	add    BYTE PTR [eax],al
    1c4b:	00 60 05             	add    BYTE PTR [eax+0x5],ah
    1c4e:	00 00                	add    BYTE PTR [eax],al
    1c50:	11 ff                	adc    edi,edi
    1c52:	08 00                	or     BYTE PTR [eax],al
    1c54:	00 01                	add    BYTE PTR [ecx],al
    1c56:	03 01                	add    eax,DWORD PTR [ecx]
    1c58:	11 17                	adc    DWORD PTR [edi],edx
    1c5a:	02 00                	add    al,BYTE PTR [eax]
    1c5c:	00 02                	add    BYTE PTR [edx],al
    1c5e:	91                   	xchg   ecx,eax
    1c5f:	62 00                	bound  eax,QWORD PTR [eax]
    1c61:	14 39                	adc    al,0x39
    1c63:	1d 00 9f 0e 00       	sbb    eax,0xe9f00
    1c68:	00 00                	add    BYTE PTR [eax],al
    1c6a:	11 ff                	adc    edi,edi
    1c6c:	08 00                	or     BYTE PTR [eax],al
    1c6e:	00 01                	add    BYTE PTR [ecx],al
    1c70:	19 01                	sbb    DWORD PTR [ecx],eax
    1c72:	11 17                	adc    DWORD PTR [edi],edx
    1c74:	02 00                	add    al,BYTE PTR [eax]
    1c76:	00 02                	add    BYTE PTR [edx],al
    1c78:	91                   	xchg   ecx,eax
    1c79:	63 00                	arpl   WORD PTR [eax],ax
    1c7b:	00 1d 37 09 00 00    	add    BYTE PTR ds:0x937,bl
    1c81:	01 f3                	add    ebx,esi
    1c83:	0f 6d                	(bad)  
    1c85:	00 00                	add    BYTE PTR [eax],al
    1c87:	00 4c 1c 00          	add    BYTE PTR [esp+ebx*1+0x0],cl
    1c8b:	9f                   	lahf   
    1c8c:	24 00                	and    al,0x0
    1c8e:	00 00                	add    BYTE PTR [eax],al
    1c90:	01 9c b4 05 00 00 1e 	add    DWORD PTR [esp+esi*4+0x1e000005],ebx
    1c97:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    1c9a:	00 01                	add    BYTE PTR [ecx],al
    1c9c:	f3 1c 6d             	repz sbb al,0x6d
    1c9f:	00 00                	add    BYTE PTR [eax],al
    1ca1:	00 02                	add    BYTE PTR [edx],al
    1ca3:	91                   	xchg   ecx,eax
    1ca4:	00 1a                	add    BYTE PTR [edx],bl
    1ca6:	1b 07                	sbb    eax,DWORD PTR [edi]
    1ca8:	00 00                	add    BYTE PTR [eax],al
    1caa:	01 f3                	add    ebx,esi
    1cac:	28 b9 00 00 00 02    	sub    BYTE PTR [ecx+0x2000000],bh
    1cb2:	91                   	xchg   ecx,eax
    1cb3:	04 00                	add    al,0x0
    1cb5:	1f                   	pop    ds
    1cb6:	52                   	push   edx
    1cb7:	09 00                	or     DWORD PTR [eax],eax
    1cb9:	00 01                	add    BYTE PTR [ecx],al
    1cbb:	ee                   	out    dx,al
    1cbc:	0e                   	push   cs
    1cbd:	28 1c 00             	sub    BYTE PTR [eax+eax*1],bl
    1cc0:	9f                   	lahf   
    1cc1:	24 00                	and    al,0x0
    1cc3:	00 00                	add    BYTE PTR [eax],al
    1cc5:	01 9c da 05 00 00 1a 	add    DWORD PTR [edx+ebx*8+0x1a000005],ebx
    1ccc:	0f 08                	invd   
    1cce:	00 00                	add    BYTE PTR [eax],al
    1cd0:	01 ee                	add    esi,ebp
    1cd2:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
    1cd5:	00 00                	add    BYTE PTR [eax],al
    1cd7:	02 91 00 00 1d 6f    	add    dl,BYTE PTR [ecx+0x6f1d0000]
    1cdd:	08 00                	or     BYTE PTR [eax],al
    1cdf:	00 01                	add    BYTE PTR [ecx],al
    1ce1:	e8 0d 4f 00 00       	call   6bf3 <sysEnter_Vector-0x12940d>
    1ce6:	00 08                	add    BYTE PTR [eax],cl
    1ce8:	1c 00                	sbb    al,0x0
    1cea:	9f                   	lahf   
    1ceb:	20 00                	and    BYTE PTR [eax],al
    1ced:	00 00                	add    BYTE PTR [eax],al
    1cef:	01 9c 04 06 00 00 1e 	add    DWORD PTR [esp+eax*1+0x1e000006],ebx
    1cf6:	70 69                	jo     1d61 <sysEnter_Vector-0x12e29f>
    1cf8:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1cfb:	e8 1e a1 00 00       	call   be1e <sysEnter_Vector-0x1241e2>
    1d00:	00 02                	add    BYTE PTR [edx],al
    1d02:	91                   	xchg   ecx,eax
    1d03:	00 00                	add    BYTE PTR [eax],al
    1d05:	1d 46 09 00 00       	sbb    eax,0x946
    1d0a:	01 e0                	add    eax,esp
    1d0c:	0d 4f 00 00 00       	or     eax,0x4f
    1d11:	b5 1b                	mov    ch,0x1b
    1d13:	00 9f 53 00 00 00    	add    BYTE PTR [edi+0x53],bl
    1d19:	01 9c 5b 06 00 00 1a 	add    DWORD PTR [ebx+ebx*2+0x1a000006],ebx
    1d20:	5d                   	pop    ebp
    1d21:	05 00 00 01 e0       	add    eax,0xe0010000
    1d26:	19 6d 00             	sbb    DWORD PTR [ebp+0x0],ebp
    1d29:	00 00                	add    BYTE PTR [eax],al
    1d2b:	02 91 00 1a e8 09    	add    dl,BYTE PTR [ecx+0x9e81a00]
    1d31:	00 00                	add    BYTE PTR [eax],al
    1d33:	01 e0                	add    eax,esp
    1d35:	23 4f 00             	and    ecx,DWORD PTR [edi+0x0]
    1d38:	00 00                	add    BYTE PTR [eax],al
    1d3a:	02 91 04 1a 22 0a    	add    dl,BYTE PTR [ecx+0xa221a04]
    1d40:	00 00                	add    BYTE PTR [eax],al
    1d42:	01 e0                	add    eax,esp
    1d44:	30 e1                	xor    cl,ah
    1d46:	01 00                	add    DWORD PTR [eax],eax
    1d48:	00 02                	add    BYTE PTR [edx],al
    1d4a:	91                   	xchg   ecx,eax
    1d4b:	08 1b                	or     BYTE PTR [ebx],bl
    1d4d:	70 69                	jo     1db8 <sysEnter_Vector-0x12e248>
    1d4f:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1d52:	e2 09                	loop   1d5d <sysEnter_Vector-0x12e2a3>
    1d54:	4f                   	dec    edi
    1d55:	00 00                	add    BYTE PTR [eax],al
    1d57:	00 02                	add    BYTE PTR [edx],al
    1d59:	91                   	xchg   ecx,eax
    1d5a:	74 00                	je     1d5c <sysEnter_Vector-0x12e2a4>
    1d5c:	1d 4c 09 00 00       	sbb    eax,0x94c
    1d61:	01 b2 0d 4f 00 00    	add    DWORD PTR [edx+0x4f0d],esi
    1d67:	00 c7                	add    bh,al
    1d69:	19 00                	sbb    DWORD PTR [eax],eax
    1d6b:	9f                   	lahf   
    1d6c:	ee                   	out    dx,al
    1d6d:	01 00                	add    DWORD PTR [eax],eax
    1d6f:	00 01                	add    BYTE PTR [ecx],al
    1d71:	9c                   	pushf  
    1d72:	07                   	pop    es
    1d73:	07                   	pop    es
    1d74:	00 00                	add    BYTE PTR [eax],al
    1d76:	1a 5d 05             	sbb    bl,BYTE PTR [ebp+0x5]
    1d79:	00 00                	add    BYTE PTR [eax],al
    1d7b:	01 b2 19 6d 00 00    	add    DWORD PTR [edx+0x6d19],esi
    1d81:	00 02                	add    BYTE PTR [edx],al
    1d83:	91                   	xchg   ecx,eax
    1d84:	00 1b                	add    BYTE PTR [ebx],bl
    1d86:	70 69                	jo     1df1 <sysEnter_Vector-0x12e20f>
    1d88:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1d8b:	b4 09                	mov    ah,0x9
    1d8d:	4f                   	dec    edi
    1d8e:	00 00                	add    BYTE PTR [eax],al
    1d90:	00 02                	add    BYTE PTR [edx],al
    1d92:	91                   	xchg   ecx,eax
    1d93:	58                   	pop    eax
    1d94:	1c e8                	sbb    al,0xe8
    1d96:	09 00                	or     DWORD PTR [eax],eax
    1d98:	00 01                	add    BYTE PTR [ecx],al
    1d9a:	b4 10                	mov    ah,0x10
    1d9c:	4f                   	dec    edi
    1d9d:	00 00                	add    BYTE PTR [eax],al
    1d9f:	00 02                	add    BYTE PTR [edx],al
    1da1:	91                   	xchg   ecx,eax
    1da2:	6c                   	ins    BYTE PTR es:[edi],dx
    1da3:	1c 22                	sbb    al,0x22
    1da5:	0a 00                	or     al,BYTE PTR [eax]
    1da7:	00 01                	add    BYTE PTR [ecx],al
    1da9:	b5 0c                	mov    ch,0xc
    1dab:	e1 01                	loope  1dae <sysEnter_Vector-0x12e252>
    1dad:	00 00                	add    BYTE PTR [eax],al
    1daf:	02 91 50 1c 53 08    	add    dl,BYTE PTR [ecx+0x8531c50]
    1db5:	00 00                	add    BYTE PTR [eax],al
    1db7:	01 b6 0b 6d 00 00    	add    DWORD PTR [esi+0x6d0b],esi
    1dbd:	00 02                	add    BYTE PTR [edx],al
    1dbf:	91                   	xchg   ecx,eax
    1dc0:	68 1c d0 07 00       	push   0x7d01c
    1dc5:	00 01                	add    BYTE PTR [ecx],al
    1dc7:	b6 1b                	mov    dh,0x1b
    1dc9:	6d                   	ins    DWORD PTR es:[edi],dx
    1dca:	00 00                	add    BYTE PTR [eax],al
    1dcc:	00 02                	add    BYTE PTR [edx],al
    1dce:	91                   	xchg   ecx,eax
    1dcf:	64 1c 3e             	fs sbb al,0x3e
    1dd2:	09 00                	or     DWORD PTR [eax],eax
    1dd4:	00 01                	add    BYTE PTR [ecx],al
    1dd6:	b7 0b                	mov    bh,0xb
    1dd8:	6d                   	ins    DWORD PTR es:[edi],dx
    1dd9:	00 00                	add    BYTE PTR [eax],al
    1ddb:	00 02                	add    BYTE PTR [edx],al
    1ddd:	91                   	xchg   ecx,eax
    1dde:	54                   	push   esp
    1ddf:	1c f9                	sbb    al,0xf9
    1de1:	07                   	pop    es
    1de2:	00 00                	add    BYTE PTR [eax],al
    1de4:	01 c8                	add    eax,ecx
    1de6:	09 4f 00             	or     DWORD PTR [edi+0x0],ecx
    1de9:	00 00                	add    BYTE PTR [eax],al
    1deb:	02 91 60 14 9d 1a    	add    dl,BYTE PTR [ecx+0x1a9d1460]
    1df1:	00 9f da 00 00 00    	add    BYTE PTR [edi+0xda],bl
    1df7:	1b 63 6e             	sbb    esp,DWORD PTR [ebx+0x6e]
    1dfa:	74 00                	je     1dfc <sysEnter_Vector-0x12e204>
    1dfc:	01 ca                	add    edx,ecx
    1dfe:	0e                   	push   cs
    1dff:	4f                   	dec    edi
    1e00:	00 00                	add    BYTE PTR [eax],al
    1e02:	00 02                	add    BYTE PTR [edx],al
    1e04:	91                   	xchg   ecx,eax
    1e05:	5c                   	pop    esp
    1e06:	00 00                	add    BYTE PTR [eax],al
    1e08:	1d 5e 09 00 00       	sbb    eax,0x95e
    1e0d:	01 aa 0d 4f 00 00    	add    DWORD PTR [edx+0x4f0d],ebp
    1e13:	00 77 19             	add    BYTE PTR [edi+0x19],dh
    1e16:	00 9f 50 00 00 00    	add    BYTE PTR [edi+0x50],bl
    1e1c:	01 9c 5e 07 00 00 1a 	add    DWORD PTR [esi+ebx*2+0x1a000007],ebx
    1e23:	5d                   	pop    ebp
    1e24:	05 00 00 01 aa       	add    eax,0xaa010000
    1e29:	18 6d 00             	sbb    BYTE PTR [ebp+0x0],ch
    1e2c:	00 00                	add    BYTE PTR [eax],al
    1e2e:	02 91 00 1a e8 09    	add    dl,BYTE PTR [ecx+0x9e81a00]
    1e34:	00 00                	add    BYTE PTR [eax],al
    1e36:	01 aa 22 4f 00 00    	add    DWORD PTR [edx+0x4f22],ebp
    1e3c:	00 02                	add    BYTE PTR [edx],al
    1e3e:	91                   	xchg   ecx,eax
    1e3f:	04 1a                	add    al,0x1a
    1e41:	22 0a                	and    cl,BYTE PTR [edx]
    1e43:	00 00                	add    BYTE PTR [eax],al
    1e45:	01 aa 2f e1 01 00    	add    DWORD PTR [edx+0x1e12f],ebp
    1e4b:	00 02                	add    BYTE PTR [edx],al
    1e4d:	91                   	xchg   ecx,eax
    1e4e:	08 1b                	or     BYTE PTR [ebx],bl
    1e50:	70 69                	jo     1ebb <sysEnter_Vector-0x12e145>
    1e52:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1e55:	ac                   	lods   al,BYTE PTR ds:[esi]
    1e56:	09 4f 00             	or     DWORD PTR [edi+0x0],ecx
    1e59:	00 00                	add    BYTE PTR [eax],al
    1e5b:	02 91 74 00 20 4e    	add    dl,BYTE PTR [ecx+0x4e200074]
    1e61:	08 00                	or     BYTE PTR [eax],al
    1e63:	00 01                	add    BYTE PTR [ecx],al
    1e65:	a1 0d 4f 00 00       	mov    eax,ds:0x4f0d
    1e6a:	00 50 19             	add    BYTE PTR [eax+0x19],dl
    1e6d:	00 9f 27 00 00 00    	add    BYTE PTR [edi+0x27],bl
    1e73:	01 9c 88 07 00 00 1c 	add    DWORD PTR [eax+ecx*4+0x1c000007],ebx
    1e7a:	35 05 00 00 01       	xor    eax,0x1000005
    1e7f:	a3 0e a1 00 00       	mov    ds:0xa10e,eax
    1e84:	00 02                	add    BYTE PTR [edx],al
    1e86:	91                   	xchg   ecx,eax
    1e87:	74 00                	je     1e89 <sysEnter_Vector-0x12e177>
    1e89:	1f                   	pop    ds
    1e8a:	05 0a 00 00 01       	add    eax,0x100000a
    1e8f:	9c                   	pushf  
    1e90:	0e                   	push   cs
    1e91:	23 19                	and    ebx,DWORD PTR [ecx]
    1e93:	00 9f 2d 00 00 00    	add    BYTE PTR [edi+0x2d],bl
    1e99:	01 9c cc 07 00 00 1a 	add    DWORD PTR [esp+ecx*8+0x1a000007],ebx
    1ea0:	57                   	push   edi
    1ea1:	09 00                	or     DWORD PTR [eax],eax
    1ea3:	00 01                	add    BYTE PTR [ecx],al
    1ea5:	9c                   	pushf  
    1ea6:	1f                   	pop    ds
    1ea7:	4f                   	dec    edi
    1ea8:	00 00                	add    BYTE PTR [eax],al
    1eaa:	00 02                	add    BYTE PTR [edx],al
    1eac:	91                   	xchg   ecx,eax
    1ead:	00 1a                	add    BYTE PTR [edx],bl
    1eaf:	f4                   	hlt    
    1eb0:	08 00                	or     BYTE PTR [eax],al
    1eb2:	00 01                	add    BYTE PTR [ecx],al
    1eb4:	9c                   	pushf  
    1eb5:	2d 6b 00 00 00       	sub    eax,0x6b
    1eba:	02 91 04 1a dd 07    	add    dl,BYTE PTR [ecx+0x7dd1a04]
    1ec0:	00 00                	add    BYTE PTR [eax],al
    1ec2:	01 9c 3d 4f 00 00 00 	add    DWORD PTR [ebp+edi*1+0x4f],ebx
    1ec9:	02 91 08 00 21 27    	add    dl,BYTE PTR [ecx+0x27210008]
    1ecf:	0a 00                	or     al,BYTE PTR [eax]
    1ed1:	00 01                	add    BYTE PTR [ecx],al
    1ed3:	97                   	xchg   edi,eax
    1ed4:	06                   	push   es
    1ed5:	02 19                	add    bl,BYTE PTR [ecx]
    1ed7:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
    1edd:	01 9c 19 e5 07 00 00 	add    DWORD PTR [ecx+ebx*1+0x7e5],ebx
    1ee4:	01 91 16 33 00 00    	add    DWORD PTR [ecx+0x3316],edx
    1eea:	00 8e 18 00 9f 74    	add    BYTE PTR [esi+0x749f0018],cl
    1ef0:	00 00                	add    BYTE PTR [eax],al
    1ef2:	00 01                	add    BYTE PTR [ecx],al
    1ef4:	9c                   	pushf  
    1ef5:	2e 08 00             	or     BYTE PTR cs:[eax],al
    1ef8:	00 1a                	add    BYTE PTR [edx],bl
    1efa:	ed                   	in     eax,dx
    1efb:	09 00                	or     DWORD PTR [eax],eax
    1efd:	00 01                	add    BYTE PTR [ecx],al
    1eff:	91                   	xchg   ecx,eax
    1f00:	2e 33 00             	xor    eax,DWORD PTR cs:[eax]
    1f03:	00 00                	add    BYTE PTR [eax],al
    1f05:	02 91 00 14 a4 18    	add    dl,BYTE PTR [ecx+0x18a41400]
    1f0b:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1f11:	1b 73 32             	sbb    esi,DWORD PTR [ebx+0x32]
    1f14:	00 01                	add    BYTE PTR [ecx],al
    1f16:	93                   	xchg   ebx,eax
    1f17:	0c a1                	or     al,0xa1
    1f19:	00 00                	add    BYTE PTR [eax],al
    1f1b:	00 02                	add    BYTE PTR [edx],al
    1f1d:	91                   	xchg   ecx,eax
    1f1e:	6c                   	ins    BYTE PTR es:[edi],dx
    1f1f:	1b 63 74             	sbb    esp,DWORD PTR [ebx+0x74]
    1f22:	00 01                	add    BYTE PTR [ecx],al
    1f24:	93                   	xchg   ebx,eax
    1f25:	0c a1                	or     al,0xa1
    1f27:	00 00                	add    BYTE PTR [eax],al
    1f29:	00 02                	add    BYTE PTR [edx],al
    1f2b:	91                   	xchg   ecx,eax
    1f2c:	68 00 00 19 9e       	push   0x9e190000
    1f31:	08 00                	or     BYTE PTR [eax],al
    1f33:	00 01                	add    BYTE PTR [ecx],al
    1f35:	8c 16                	mov    WORD PTR [esi],ss
    1f37:	33 00                	xor    eax,DWORD PTR [eax]
    1f39:	00 00                	add    BYTE PTR [eax],al
    1f3b:	1a 18                	sbb    bl,BYTE PTR [eax]
    1f3d:	00 9f 74 00 00 00    	add    BYTE PTR [edi+0x74],bl
    1f43:	01 9c 7e 08 00 00 1a 	add    DWORD PTR [esi+edi*2+0x1a000008],ebx
    1f4a:	63 09                	arpl   WORD PTR [ecx],cx
    1f4c:	00 00                	add    BYTE PTR [eax],al
    1f4e:	01 8c 2a 33 00 00 00 	add    DWORD PTR [edx+ebp*1+0x33],ecx
    1f55:	02 91 00 14 30 18    	add    dl,BYTE PTR [ecx+0x18301400]
    1f5b:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1f61:	1b 73 32             	sbb    esi,DWORD PTR [ebx+0x32]
    1f64:	00 01                	add    BYTE PTR [ecx],al
    1f66:	8e 0c a1             	mov    cs,WORD PTR [ecx+eiz*4]
    1f69:	00 00                	add    BYTE PTR [eax],al
    1f6b:	00 02                	add    BYTE PTR [edx],al
    1f6d:	91                   	xchg   ecx,eax
    1f6e:	6c                   	ins    BYTE PTR es:[edi],dx
    1f6f:	1b 63 74             	sbb    esp,DWORD PTR [ebx+0x74]
    1f72:	00 01                	add    BYTE PTR [ecx],al
    1f74:	8e 0c a1             	mov    cs,WORD PTR [ecx+eiz*4]
    1f77:	00 00                	add    BYTE PTR [eax],al
    1f79:	00 02                	add    BYTE PTR [edx],al
    1f7b:	91                   	xchg   ecx,eax
    1f7c:	68 00 00 19 96       	push   0x96190000
    1f81:	08 00                	or     BYTE PTR [eax],al
    1f83:	00 01                	add    BYTE PTR [ecx],al
    1f85:	86 16                	xchg   BYTE PTR [esi],dl
    1f87:	33 00                	xor    eax,DWORD PTR [eax]
    1f89:	00 00                	add    BYTE PTR [eax],al
    1f8b:	8e 17                	mov    ss,WORD PTR [edi]
    1f8d:	00 9f 8c 00 00 00    	add    BYTE PTR [edi+0x8c],bl
    1f93:	01 9c dc 08 00 00 1a 	add    DWORD PTR [esp+ebx*8+0x1a000008],ebx
    1f9a:	b3 08                	mov    bl,0x8
    1f9c:	00 00                	add    BYTE PTR [eax],al
    1f9e:	01 86 2c 33 00 00    	add    DWORD PTR [esi+0x332c],eax
    1fa4:	00 02                	add    BYTE PTR [edx],al
    1fa6:	91                   	xchg   ecx,eax
    1fa7:	00 1b                	add    BYTE PTR [ebx],bl
    1fa9:	6d                   	ins    DWORD PTR es:[edi],dx
    1faa:	73 00                	jae    1fac <sysEnter_Vector-0x12e054>
    1fac:	01 88 09 4f 00 00    	add    DWORD PTR [eax+0x4f09],ecx
    1fb2:	00 02                	add    BYTE PTR [edx],al
    1fb4:	91                   	xchg   ecx,eax
    1fb5:	6c                   	ins    BYTE PTR es:[edi],dx
    1fb6:	14 bc                	adc    al,0xbc
    1fb8:	17                   	pop    ss
    1fb9:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1fbf:	1b 73 32             	sbb    esi,DWORD PTR [ebx+0x32]
    1fc2:	00 01                	add    BYTE PTR [ecx],al
    1fc4:	89 0c a1             	mov    DWORD PTR [ecx+eiz*4],ecx
    1fc7:	00 00                	add    BYTE PTR [eax],al
    1fc9:	00 02                	add    BYTE PTR [edx],al
    1fcb:	91                   	xchg   ecx,eax
    1fcc:	68 1b 63 74 00       	push   0x74631b
    1fd1:	01 89 0c a1 00 00    	add    DWORD PTR [ecx+0xa10c],ecx
    1fd7:	00 02                	add    BYTE PTR [edx],al
    1fd9:	91                   	xchg   ecx,eax
    1fda:	64 00 00             	add    BYTE PTR fs:[eax],al
    1fdd:	1d cf 09 00 00       	sbb    eax,0x9cf
    1fe2:	01 7c 05 4f          	add    DWORD PTR [ebp+eax*1+0x4f],edi
    1fe6:	00 00                	add    BYTE PTR [eax],al
    1fe8:	00 53 17             	add    BYTE PTR [ebx+0x17],dl
    1feb:	00 9f 3b 00 00 00    	add    BYTE PTR [edi+0x3b],bl
    1ff1:	01 9c 25 09 00 00 1a 	add    DWORD PTR [ebp+eiz*1+0x1a000009],ebx
    1ff8:	77 08                	ja     2002 <sysEnter_Vector-0x12dffe>
    1ffa:	00 00                	add    BYTE PTR [eax],al
    1ffc:	01 7c 16 a1          	add    DWORD PTR [esi+edx*1-0x5f],edi
    2000:	00 00                	add    BYTE PTR [eax],al
    2002:	00 02                	add    BYTE PTR [edx],al
    2004:	91                   	xchg   ecx,eax
    2005:	00 1a                	add    BYTE PTR [edx],bl
    2007:	16                   	push   ss
    2008:	08 00                	or     BYTE PTR [eax],al
    200a:	00 01                	add    BYTE PTR [ecx],al
    200c:	7c 2e                	jl     203c <sysEnter_Vector-0x12dfc4>
    200e:	11 02                	adc    DWORD PTR [edx],eax
    2010:	00 00                	add    BYTE PTR [eax],al
    2012:	02 91 04 22 1c ca    	add    dl,BYTE PTR [ecx-0x35e3ddfc]
    2018:	09 00                	or     DWORD PTR [eax],eax
    201a:	00 01                	add    BYTE PTR [ecx],al
    201c:	7e 0d                	jle    202b <sysEnter_Vector-0x12dfd5>
    201e:	95                   	xchg   ebp,eax
    201f:	00 00                	add    BYTE PTR [eax],al
    2021:	00 02                	add    BYTE PTR [edx],al
    2023:	91                   	xchg   ecx,eax
    2024:	74 00                	je     2026 <sysEnter_Vector-0x12dfda>
    2026:	1d 2c 0a 00 00       	sbb    eax,0xa2c
    202b:	01 72 0d             	add    DWORD PTR [edx+0xd],esi
    202e:	4f                   	dec    edi
    202f:	00 00                	add    BYTE PTR [eax],al
    2031:	00 18                	add    BYTE PTR [eax],bl
    2033:	17                   	pop    ss
    2034:	00 9f 3b 00 00 00    	add    BYTE PTR [edi+0x3b],bl
    203a:	01 9c 6e 09 00 00 1a 	add    DWORD PTR [esi+ebp*2+0x1a000009],ebx
    2041:	77 08                	ja     204b <sysEnter_Vector-0x12dfb5>
    2043:	00 00                	add    BYTE PTR [eax],al
    2045:	01 72 1d             	add    DWORD PTR [edx+0x1d],esi
    2048:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    204d:	91                   	xchg   ecx,eax
    204e:	00 1a                	add    BYTE PTR [edx],bl
    2050:	16                   	push   ss
    2051:	08 00                	or     BYTE PTR [eax],al
    2053:	00 01                	add    BYTE PTR [ecx],al
    2055:	72 35                	jb     208c <sysEnter_Vector-0x12df74>
    2057:	11 02                	adc    DWORD PTR [edx],eax
    2059:	00 00                	add    BYTE PTR [eax],al
    205b:	02 91 04 22 1c ca    	add    dl,BYTE PTR [ecx-0x35e3ddfc]
    2061:	09 00                	or     DWORD PTR [eax],eax
    2063:	00 01                	add    BYTE PTR [ecx],al
    2065:	74 0d                	je     2074 <sysEnter_Vector-0x12df8c>
    2067:	95                   	xchg   ebp,eax
    2068:	00 00                	add    BYTE PTR [eax],al
    206a:	00 02                	add    BYTE PTR [edx],al
    206c:	91                   	xchg   ecx,eax
    206d:	74 00                	je     206f <sysEnter_Vector-0x12df91>
    206f:	1d 33 0a 00 00       	sbb    eax,0xa33
    2074:	01 6a 05             	add    DWORD PTR [edx+0x5],ebp
    2077:	4f                   	dec    edi
    2078:	00 00                	add    BYTE PTR [eax],al
    207a:	00 e0                	add    al,ah
    207c:	16                   	push   ss
    207d:	00 9f 38 00 00 00    	add    BYTE PTR [edi+0x38],bl
    2083:	01 9c a8 09 00 00 1a 	add    DWORD PTR [eax+ebp*4+0x1a000009],ebx
    208a:	16                   	push   ss
    208b:	08 00                	or     BYTE PTR [eax],al
    208d:	00 01                	add    BYTE PTR [ecx],al
    208f:	6a 18                	push   0x18
    2091:	11 02                	adc    DWORD PTR [edx],eax
    2093:	00 00                	add    BYTE PTR [eax],al
    2095:	02 91 00 22 1c ca    	add    dl,BYTE PTR [ecx-0x35e3de00]
    209b:	09 00                	or     DWORD PTR [eax],eax
    209d:	00 01                	add    BYTE PTR [ecx],al
    209f:	6c                   	ins    BYTE PTR es:[edi],dx
    20a0:	0d 95 00 00 00       	or     eax,0x95
    20a5:	02 91 74 00 1d 1d    	add    dl,BYTE PTR [ecx+0x1d1d0074]
    20ab:	0e                   	push   cs
    20ac:	00 00                	add    BYTE PTR [eax],al
    20ae:	01 61 05             	add    DWORD PTR [ecx+0x5],esp
    20b1:	4f                   	dec    edi
    20b2:	00 00                	add    BYTE PTR [eax],al
    20b4:	00 88 16 00 9f 58    	add    BYTE PTR [eax+0x589f0016],cl
    20ba:	00 00                	add    BYTE PTR [eax],al
    20bc:	00 01                	add    BYTE PTR [ecx],al
    20be:	9c                   	pushf  
    20bf:	f1                   	icebp  
    20c0:	09 00                	or     DWORD PTR [eax],eax
    20c2:	00 1a                	add    BYTE PTR [edx],bl
    20c4:	16                   	push   ss
    20c5:	08 00                	or     BYTE PTR [eax],al
    20c7:	00 01                	add    BYTE PTR [ecx],al
    20c9:	61                   	popa   
    20ca:	19 11                	sbb    DWORD PTR [ecx],edx
    20cc:	02 00                	add    al,BYTE PTR [eax]
    20ce:	00 02                	add    BYTE PTR [edx],al
    20d0:	91                   	xchg   ecx,eax
    20d1:	00 22                	add    BYTE PTR [edx],ah
    20d3:	1c ca                	sbb    al,0xca
    20d5:	09 00                	or     DWORD PTR [eax],eax
    20d7:	00 01                	add    BYTE PTR [ecx],al
    20d9:	63 0d 95 00 00 00    	arpl   WORD PTR ds:0x95,cx
    20df:	02 91 68 1c 1b 07    	add    dl,BYTE PTR [ecx+0x71b1c68]
    20e5:	00 00                	add    BYTE PTR [eax],al
    20e7:	01 66 09             	add    DWORD PTR [esi+0x9],esp
    20ea:	4f                   	dec    edi
    20eb:	00 00                	add    BYTE PTR [eax],al
    20ed:	00 02                	add    BYTE PTR [edx],al
    20ef:	91                   	xchg   ecx,eax
    20f0:	6c                   	ins    BYTE PTR es:[edi],dx
    20f1:	00 1d 81 0e 00 00    	add    BYTE PTR ds:0xe81,bl
    20f7:	01 58 0d             	add    DWORD PTR [eax+0xd],ebx
    20fa:	4f                   	dec    edi
    20fb:	00 00                	add    BYTE PTR [eax],al
    20fd:	00 30                	add    BYTE PTR [eax],dh
    20ff:	16                   	push   ss
    2100:	00 9f 58 00 00 00    	add    BYTE PTR [edi+0x58],bl
    2106:	01 9c 3a 0a 00 00 1a 	add    DWORD PTR [edx+edi*1+0x1a00000a],ebx
    210d:	16                   	push   ss
    210e:	08 00                	or     BYTE PTR [eax],al
    2110:	00 01                	add    BYTE PTR [ecx],al
    2112:	58                   	pop    eax
    2113:	20 11                	and    BYTE PTR [ecx],dl
    2115:	02 00                	add    al,BYTE PTR [eax]
    2117:	00 02                	add    BYTE PTR [edx],al
    2119:	91                   	xchg   ecx,eax
    211a:	00 22                	add    BYTE PTR [edx],ah
    211c:	1c ca                	sbb    al,0xca
    211e:	09 00                	or     DWORD PTR [eax],eax
    2120:	00 01                	add    BYTE PTR [ecx],al
    2122:	5a                   	pop    edx
    2123:	0d 95 00 00 00       	or     eax,0x95
    2128:	02 91 68 1c 1b 07    	add    dl,BYTE PTR [ecx+0x71b1c68]
    212e:	00 00                	add    BYTE PTR [eax],al
    2130:	01 5d 09             	add    DWORD PTR [ebp+0x9],ebx
    2133:	4f                   	dec    edi
    2134:	00 00                	add    BYTE PTR [eax],al
    2136:	00 02                	add    BYTE PTR [edx],al
    2138:	91                   	xchg   ecx,eax
    2139:	6c                   	ins    BYTE PTR es:[edi],dx
    213a:	00 1d ca 07 00 00    	add    BYTE PTR ds:0x7ca,bl
    2140:	01 4e 0d             	add    DWORD PTR [esi+0xd],ecx
    2143:	4f                   	dec    edi
    2144:	00 00                	add    BYTE PTR [eax],al
    2146:	00 d3                	add    bl,dl
    2148:	15 00 9f 5d 00       	adc    eax,0x5d9f00
    214d:	00 00                	add    BYTE PTR [eax],al
    214f:	01 9c 83 0a 00 00 1a 	add    DWORD PTR [ebx+eax*4+0x1a00000a],ebx
    2156:	16                   	push   ss
    2157:	08 00                	or     BYTE PTR [eax],al
    2159:	00 01                	add    BYTE PTR [ecx],al
    215b:	4e                   	dec    esi
    215c:	1f                   	pop    ds
    215d:	11 02                	adc    DWORD PTR [edx],eax
    215f:	00 00                	add    BYTE PTR [eax],al
    2161:	02 91 00 22 1c ca    	add    dl,BYTE PTR [ecx-0x35e3de00]
    2167:	09 00                	or     DWORD PTR [eax],eax
    2169:	00 01                	add    BYTE PTR [ecx],al
    216b:	50                   	push   eax
    216c:	0d 95 00 00 00       	or     eax,0x95
    2171:	02 91 68 1c 1b 07    	add    dl,BYTE PTR [ecx+0x71b1c68]
    2177:	00 00                	add    BYTE PTR [eax],al
    2179:	01 53 09             	add    DWORD PTR [ebx+0x9],edx
    217c:	4f                   	dec    edi
    217d:	00 00                	add    BYTE PTR [eax],al
    217f:	00 02                	add    BYTE PTR [edx],al
    2181:	91                   	xchg   ecx,eax
    2182:	6c                   	ins    BYTE PTR es:[edi],dx
    2183:	00 23                	add    BYTE PTR [ebx],ah
    2185:	bd 09 00 00 01       	mov    ebp,0x1000009
    218a:	48                   	dec    eax
    218b:	22 ac 15 00 9f 27 00 	and    ch,BYTE PTR [ebp+edx*1+0x279f00]
    2192:	00 00                	add    BYTE PTR [eax],al
    2194:	01 9c 21 1d 08 00 00 	add    DWORD PTR [ecx+eiz*1+0x81d],ebx
    219b:	01 34 2b             	add    DWORD PTR [ebx+ebp*1],esi
    219e:	df 14 00             	fist   WORD PTR [eax+eax*1]
    21a1:	9f                   	lahf   
    21a2:	cd 00                	int    0x0
    21a4:	00 00                	add    BYTE PTR [eax],al
    21a6:	01 9c 19 92 09 00 00 	add    DWORD PTR [ecx+ebx*1+0x992],ebx
    21ad:	01 2d 05 4f 00 00    	add    DWORD PTR ds:0x4f05,ebp
    21b3:	00 99 14 00 9f 46    	add    BYTE PTR [ecx+0x469f0014],bl
    21b9:	00 00                	add    BYTE PTR [eax],al
    21bb:	00 01                	add    BYTE PTR [ecx],al
    21bd:	9c                   	pushf  
    21be:	e0 0a                	loopne 21ca <sysEnter_Vector-0x12de36>
    21c0:	00 00                	add    BYTE PTR [eax],al
    21c2:	1a 82 08 00 00 01    	sbb    al,BYTE PTR [edx+0x1000008]
    21c8:	2d 15 4f 00 00       	sub    eax,0x4f15
    21cd:	00 02                	add    BYTE PTR [edx],al
    21cf:	91                   	xchg   ecx,eax
    21d0:	00 1c 35 05 00 00 01 	add    BYTE PTR [esi*1+0x1000005],bl
    21d7:	2f                   	das    
    21d8:	09 4f 00             	or     DWORD PTR [edi+0x0],ecx
    21db:	00 00                	add    BYTE PTR [eax],al
    21dd:	02 91 6c 00 19 9e    	add    dl,BYTE PTR [ecx-0x61e6ff94]
    21e3:	09 00                	or     DWORD PTR [eax],eax
    21e5:	00 01                	add    BYTE PTR [ecx],al
    21e7:	26 05 4f 00 00 00    	es add eax,0x4f
    21ed:	55                   	push   ebp
    21ee:	14 00                	adc    al,0x0
    21f0:	9f                   	lahf   
    21f1:	44                   	inc    esp
    21f2:	00 00                	add    BYTE PTR [eax],al
    21f4:	00 01                	add    BYTE PTR [ecx],al
    21f6:	9c                   	pushf  
    21f7:	28 0b                	sub    BYTE PTR [ebx],cl
    21f9:	00 00                	add    BYTE PTR [eax],al
    21fb:	1a 82 08 00 00 01    	sbb    al,BYTE PTR [edx+0x1000008]
    2201:	26 15 4f 00 00 00    	es adc eax,0x4f
    2207:	02 91 00 1a 1b 09    	add    dl,BYTE PTR [ecx+0x91b1a00]
    220d:	00 00                	add    BYTE PTR [eax],al
    220f:	01 26                	add    DWORD PTR [esi],esp
    2211:	27                   	daa    
    2212:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    2217:	91                   	xchg   ecx,eax
    2218:	04 1c                	add    al,0x1c
    221a:	35 05 00 00 01       	xor    eax,0x1000005
    221f:	28 09                	sub    BYTE PTR [ecx],cl
    2221:	4f                   	dec    edi
    2222:	00 00                	add    BYTE PTR [eax],al
    2224:	00 02                	add    BYTE PTR [edx],al
    2226:	91                   	xchg   ecx,eax
    2227:	6c                   	ins    BYTE PTR es:[edi],dx
    2228:	00 19                	add    BYTE PTR [ecx],bl
    222a:	b8 08 00 00 01       	mov    eax,0x1000008
    222f:	1f                   	pop    ds
    2230:	05 4f 00 00 00       	add    eax,0x4f
    2235:	13 14 00             	adc    edx,DWORD PTR [eax+eax*1]
    2238:	9f                   	lahf   
    2239:	42                   	inc    edx
    223a:	00 00                	add    BYTE PTR [eax],al
    223c:	00 01                	add    BYTE PTR [ecx],al
    223e:	9c                   	pushf  
    223f:	7f 0b                	jg     224c <sysEnter_Vector-0x12ddb4>
    2241:	00 00                	add    BYTE PTR [eax],al
    2243:	1a 82 08 00 00 01    	sbb    al,BYTE PTR [edx+0x1000008]
    2249:	1f                   	pop    ds
    224a:	15 4f 00 00 00       	adc    eax,0x4f
    224f:	02 91 00 1a 1b 09    	add    dl,BYTE PTR [ecx+0x91b1a00]
    2255:	00 00                	add    BYTE PTR [eax],al
    2257:	01 1f                	add    DWORD PTR [edi],ebx
    2259:	27                   	daa    
    225a:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    225f:	91                   	xchg   ecx,eax
    2260:	04 1a                	add    al,0x1a
    2262:	22 09                	and    cl,BYTE PTR [ecx]
    2264:	00 00                	add    BYTE PTR [eax],al
    2266:	01 1f                	add    DWORD PTR [edi],ebx
    2268:	38 a1 00 00 00 02    	cmp    BYTE PTR [ecx+0x2000000],ah
    226e:	91                   	xchg   ecx,eax
    226f:	08 1c 35 05 00 00 01 	or     BYTE PTR [esi*1+0x1000005],bl
    2276:	21 09                	and    DWORD PTR [ecx],ecx
    2278:	4f                   	dec    edi
    2279:	00 00                	add    BYTE PTR [eax],al
    227b:	00 02                	add    BYTE PTR [edx],al
    227d:	91                   	xchg   ecx,eax
    227e:	6c                   	ins    BYTE PTR es:[edi],dx
    227f:	00 19                	add    BYTE PTR [ecx],bl
    2281:	c4 08                	les    ecx,FWORD PTR [eax]
    2283:	00 00                	add    BYTE PTR [eax],al
    2285:	01 18                	add    DWORD PTR [eax],ebx
    2287:	05 4f 00 00 00       	add    eax,0x4f
    228c:	d3 13                	rcl    DWORD PTR [ebx],cl
    228e:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    2294:	01 9c e5 0b 00 00 1a 	add    DWORD PTR [ebp+eiz*8+0x1a00000b],ebx
    229b:	82 08 00             	or     BYTE PTR [eax],0x0
    229e:	00 01                	add    BYTE PTR [ecx],al
    22a0:	18 15 4f 00 00 00    	sbb    BYTE PTR ds:0x4f,dl
    22a6:	02 91 00 1a 1b 09    	add    dl,BYTE PTR [ecx+0x91b1a00]
    22ac:	00 00                	add    BYTE PTR [eax],al
    22ae:	01 18                	add    DWORD PTR [eax],ebx
    22b0:	27                   	daa    
    22b1:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    22b6:	91                   	xchg   ecx,eax
    22b7:	04 1a                	add    al,0x1a
    22b9:	22 09                	and    cl,BYTE PTR [ecx]
    22bb:	00 00                	add    BYTE PTR [eax],al
    22bd:	01 18                	add    DWORD PTR [eax],ebx
    22bf:	38 a1 00 00 00 02    	cmp    BYTE PTR [ecx+0x2000000],ah
    22c5:	91                   	xchg   ecx,eax
    22c6:	08 1a                	or     BYTE PTR [edx],bl
    22c8:	29 09                	sub    DWORD PTR [ecx],ecx
    22ca:	00 00                	add    BYTE PTR [eax],al
    22cc:	01 18                	add    DWORD PTR [eax],ebx
    22ce:	49                   	dec    ecx
    22cf:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    22d4:	91                   	xchg   ecx,eax
    22d5:	0c 1c                	or     al,0x1c
    22d7:	35 05 00 00 01       	xor    eax,0x1000005
    22dc:	1a 09                	sbb    cl,BYTE PTR [ecx]
    22de:	4f                   	dec    edi
    22df:	00 00                	add    BYTE PTR [eax],al
    22e1:	00 02                	add    BYTE PTR [edx],al
    22e3:	91                   	xchg   ecx,eax
    22e4:	6c                   	ins    BYTE PTR es:[edi],dx
    22e5:	00 24 d0             	add    BYTE PTR [eax+edx*8],ah
    22e8:	08 00                	or     BYTE PTR [eax],al
    22ea:	00 01                	add    BYTE PTR [ecx],al
    22ec:	11 05 4f 00 00 00    	adc    DWORD PTR ds:0x4f,eax
    22f2:	95                   	xchg   ebp,eax
    22f3:	13 00                	adc    eax,DWORD PTR [eax]
    22f5:	9f                   	lahf   
    22f6:	3e 00 00             	add    BYTE PTR ds:[eax],al
    22f9:	00 01                	add    BYTE PTR [ecx],al
    22fb:	9c                   	pushf  
    22fc:	1a 82 08 00 00 01    	sbb    al,BYTE PTR [edx+0x1000008]
    2302:	11 15 4f 00 00 00    	adc    DWORD PTR ds:0x4f,edx
    2308:	02 91 00 1a 1b 09    	add    dl,BYTE PTR [ecx+0x91b1a00]
    230e:	00 00                	add    BYTE PTR [eax],al
    2310:	01 11                	add    DWORD PTR [ecx],edx
    2312:	27                   	daa    
    2313:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    2318:	91                   	xchg   ecx,eax
    2319:	04 1a                	add    al,0x1a
    231b:	22 09                	and    cl,BYTE PTR [ecx]
    231d:	00 00                	add    BYTE PTR [eax],al
    231f:	01 11                	add    DWORD PTR [ecx],edx
    2321:	38 a1 00 00 00 02    	cmp    BYTE PTR [ecx+0x2000000],ah
    2327:	91                   	xchg   ecx,eax
    2328:	08 1a                	or     BYTE PTR [edx],bl
    232a:	29 09                	sub    DWORD PTR [ecx],ecx
    232c:	00 00                	add    BYTE PTR [eax],al
    232e:	01 11                	add    DWORD PTR [ecx],edx
    2330:	49                   	dec    ecx
    2331:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    2336:	91                   	xchg   ecx,eax
    2337:	0c 1a                	or     al,0x1a
    2339:	30 09                	xor    BYTE PTR [ecx],cl
    233b:	00 00                	add    BYTE PTR [eax],al
    233d:	01 11                	add    DWORD PTR [ecx],edx
    233f:	5a                   	pop    edx
    2340:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    2345:	91                   	xchg   ecx,eax
    2346:	10 1c 35 05 00 00 01 	adc    BYTE PTR [esi*1+0x1000005],bl
    234d:	13 09                	adc    ecx,DWORD PTR [ecx]
    234f:	4f                   	dec    edi
    2350:	00 00                	add    BYTE PTR [eax],al
    2352:	00 02                	add    BYTE PTR [edx],al
    2354:	91                   	xchg   ecx,eax
    2355:	6c                   	ins    BYTE PTR es:[edi],dx
    2356:	00 00                	add    BYTE PTR [eax],al
    2358:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    2359:	02 00                	add    al,BYTE PTR [eax]
    235b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    235e:	4a                   	dec    edx
    235f:	0a 00                	or     al,BYTE PTR [eax]
    2361:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2364:	28 00                	sub    BYTE PTR [eax],al
    2366:	00 00                	add    BYTE PTR [eax],al
    2368:	0c 5f                	or     al,0x5f
    236a:	0a 00                	or     al,BYTE PTR [eax]
    236c:	00 fe                	add    dh,bh
    236e:	00 00                	add    BYTE PTR [eax],al
    2370:	00 67 21             	add    BYTE PTR [edi+0x21],ah
    2373:	00 9f 77 00 00 00    	add    BYTE PTR [edi+0x77],bl
    2379:	d6                   	(bad)  
    237a:	0f 00 00             	sldt   WORD PTR [eax]
    237d:	02 01                	add    al,BYTE PTR [ecx]
    237f:	08 f0                	or     al,dh
    2381:	00 00                	add    BYTE PTR [eax],al
    2383:	00 02                	add    BYTE PTR [edx],al
    2385:	02 07                	add    al,BYTE PTR [edi]
    2387:	0e                   	push   cs
    2388:	00 00                	add    BYTE PTR [eax],al
    238a:	00 02                	add    BYTE PTR [edx],al
    238c:	04 07                	add    al,0x7
    238e:	e3 00                	jecxz  2390 <sysEnter_Vector-0x12dc70>
    2390:	00 00                	add    BYTE PTR [eax],al
    2392:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2395:	de 00                	fiadd  WORD PTR [eax]
    2397:	00 00                	add    BYTE PTR [eax],al
    2399:	02 01                	add    al,BYTE PTR [ecx]
    239b:	06                   	push   es
    239c:	f2 00 00             	repnz add BYTE PTR [eax],al
    239f:	00 02                	add    BYTE PTR [edx],al
    23a1:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    23a7:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    23ae:	02 08                	add    cl,BYTE PTR [eax]
    23b0:	05 00 00 00 00       	add    eax,0x0
    23b5:	02 08                	add    cl,BYTE PTR [eax]
    23b7:	07                   	pop    es
    23b8:	d9 00                	fld    DWORD PTR [eax]
    23ba:	00 00                	add    BYTE PTR [eax],al
    23bc:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    23c3:	04 04                	add    al,0x4
    23c5:	05 04 73 00 00       	add    eax,0x7304
    23ca:	00 02                	add    BYTE PTR [edx],al
    23cc:	01 06                	add    DWORD PTR [esi],eax
    23ce:	f9                   	stc    
    23cf:	00 00                	add    BYTE PTR [eax],al
    23d1:	00 06                	add    BYTE PTR [esi],al
    23d3:	78 02                	js     23d7 <sysEnter_Vector-0x12dc29>
    23d5:	00 00                	add    BYTE PTR [eax],al
    23d7:	02 34 19             	add    dh,BYTE PTR [ecx+ebx*1]
    23da:	33 00                	xor    eax,DWORD PTR [eax]
    23dc:	00 00                	add    BYTE PTR [eax],al
    23de:	06                   	push   es
    23df:	d2 02                	rol    BYTE PTR [edx],cl
    23e1:	00 00                	add    BYTE PTR [eax],al
    23e3:	03 d1                	add    edx,ecx
    23e5:	17                   	pop    ss
    23e6:	33 00                	xor    eax,DWORD PTR [eax]
    23e8:	00 00                	add    BYTE PTR [eax],al
    23ea:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    23ed:	5e                   	pop    esi
    23ee:	01 00                	add    DWORD PTR [eax],eax
    23f0:	00 02                	add    BYTE PTR [edx],al
    23f2:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    23f5:	00 00                	add    BYTE PTR [eax],al
    23f7:	00 07                	add    BYTE PTR [edi],al
    23f9:	ac                   	lods   al,BYTE PTR ds:[esi]
    23fa:	03 00                	add    eax,DWORD PTR [eax]
    23fc:	00 07                	add    BYTE PTR [edi],al
    23fe:	04 33                	add    al,0x33
    2400:	00 00                	add    BYTE PTR [eax],al
    2402:	00 04 15 12 9c 01 00 	add    BYTE PTR [edx*1+0x19c12],al
    2409:	00 08                	add    BYTE PTR [eax],cl
    240b:	3e 04 00             	ds add al,0x0
    240e:	00 00                	add    BYTE PTR [eax],al
    2410:	08 83 04 00 00 01    	or     BYTE PTR [ebx+0x1000004],al
    2416:	08 c5                	or     ch,al
    2418:	02 00                	add    al,BYTE PTR [eax]
    241a:	00 02                	add    BYTE PTR [edx],al
    241c:	08 8f 03 00 00 03    	or     BYTE PTR [edi+0x3000003],cl
    2422:	08 ab 02 00 00 04    	or     BYTE PTR [ebx+0x4000002],ch
    2428:	08 ac 04 00 00 05 08 	or     BYTE PTR [esp+eax*1+0x8050000],ch
    242f:	65 04 00             	gs add al,0x0
    2432:	00 0a                	add    BYTE PTR [edx],cl
    2434:	08 d0                	or     al,dl
    2436:	03 00                	add    eax,DWORD PTR [eax]
    2438:	00 0b                	add    BYTE PTR [ebx],cl
    243a:	08 17                	or     BYTE PTR [edi],dl
    243c:	04 00                	add    al,0x0
    243e:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
    2441:	9d                   	popf   
    2442:	03 00                	add    eax,DWORD PTR [eax]
    2444:	00 0d 08 b6 03 00    	add    BYTE PTR ds:0x3b608,cl
    244a:	00 0e                	add    BYTE PTR [esi],cl
    244c:	08 b8 02 00 00 0f    	or     BYTE PTR [eax+0xf000002],bh
    2452:	08 f8                	or     al,bh
    2454:	03 00                	add    eax,DWORD PTR [eax]
    2456:	00 10                	add    BYTE PTR [eax],dl
    2458:	08 f1                	or     cl,dh
    245a:	04 00                	add    al,0x0
    245c:	00 11                	add    BYTE PTR [ecx],dl
    245e:	08 cf                	or     bh,cl
    2460:	04 00                	add    al,0x0
    2462:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
    2465:	9d                   	popf   
    2466:	04 00                	add    al,0x0
    2468:	00 50 08             	add    BYTE PTR [eax+0x8],dl
    246b:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    246e:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
    2471:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
    2474:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
    2477:	5c                   	pop    esp
    2478:	03 00                	add    eax,DWORD PTR [eax]
    247a:	00 97 09 4e 04 00    	add    BYTE PTR [edi+0x44e09],dl
    2480:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2483:	09 24 04             	or     DWORD PTR [esp+eax*1],esp
    2486:	00 00                	add    BYTE PTR [eax],al
    2488:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
    248b:	0e                   	push   cs
    248c:	05 00 00 65 01       	add    eax,0x1650000
    2491:	09 38                	or     DWORD PTR [eax],edi
    2493:	03 00                	add    eax,DWORD PTR [eax]
    2495:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    2498:	09 20                	or     DWORD PTR [eax],esp
    249a:	05 00 00 67 01       	add    eax,0x1670000
    249f:	09 c3                	or     ebx,eax
    24a1:	03 00                	add    eax,DWORD PTR [eax]
    24a3:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    24a6:	09 f9                	or     ecx,edi
    24a8:	02 00                	add    al,BYTE PTR [eax]
    24aa:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    24ad:	09 72 04             	or     DWORD PTR [edx+0x4],esi
    24b0:	00 00                	add    BYTE PTR [eax],al
    24b2:	70 01                	jo     24b5 <sysEnter_Vector-0x12db4b>
    24b4:	09 4c 03 00          	or     DWORD PTR [ebx+eax*1+0x0],ecx
    24b8:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    24bb:	09 ba 04 00 00 00    	or     DWORD PTR [edx+0x4],edi
    24c1:	03 09                	add    ecx,DWORD PTR [ecx]
    24c3:	dd 03                	fld    QWORD PTR [ebx]
    24c5:	00 00                	add    BYTE PTR [eax],al
    24c7:	01 03                	add    DWORD PTR [ebx],eax
    24c9:	09 ec                	or     esp,ebp
    24cb:	03 00                	add    eax,DWORD PTR [eax]
    24cd:	00 02                	add    BYTE PTR [edx],al
    24cf:	03 09                	add    ecx,DWORD PTR [ecx]
    24d1:	7f 03                	jg     24d6 <sysEnter_Vector-0x12db2a>
    24d3:	00 00                	add    BYTE PTR [eax],al
    24d5:	03 03                	add    eax,DWORD PTR [ebx]
    24d7:	09 d9                	or     ecx,ebx
    24d9:	02 00                	add    al,BYTE PTR [eax]
    24db:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    24de:	09 28                	or     DWORD PTR [eax],ebp
    24e0:	03 00                	add    eax,DWORD PTR [eax]
    24e2:	00 05 03 09 70 03    	add    BYTE PTR ds:0x3700903,al
    24e8:	00 00                	add    BYTE PTR [eax],al
    24ea:	06                   	push   es
    24eb:	03 09                	add    ecx,DWORD PTR [ecx]
    24ed:	05 04 00 00 00       	add    eax,0x4
    24f2:	09 00                	or     DWORD PTR [eax],eax
    24f4:	0a 3f                	or     bh,BYTE PTR [edi]
    24f6:	0a 00                	or     al,BYTE PTR [eax]
    24f8:	00 18                	add    BYTE PTR [eax],bl
    24fa:	04 3d                	add    al,0x3d
    24fc:	14 f7                	adc    al,0xf7
    24fe:	01 00                	add    DWORD PTR [eax],eax
    2500:	00 0b                	add    BYTE PTR [ebx],cl
    2502:	3a 0a                	cmp    cl,BYTE PTR [edx]
    2504:	00 00                	add    BYTE PTR [eax],al
    2506:	04 3f                	add    al,0x3f
    2508:	0f 6b 00             	packssdw mm0,QWORD PTR [eax]
    250b:	00 00                	add    BYTE PTR [eax],al
    250d:	00 0c 6c             	add    BYTE PTR [esp+ebp*2],cl
    2510:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2512:	00 04 40             	add    BYTE PTR [eax+eax*2],al
    2515:	0d 4f 00 00 00       	or     eax,0x4f
    251a:	04 0b                	add    al,0xb
    251c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    251d:	0a 00                	or     al,BYTE PTR [eax]
    251f:	00 04 41             	add    BYTE PTR [ecx+eax*2],al
    2522:	0d 4f 00 00 00       	or     eax,0x4f
    2527:	08 0b                	or     BYTE PTR [ebx],cl
    2529:	59                   	pop    ecx
    252a:	0a 00                	or     al,BYTE PTR [eax]
    252c:	00 04 42             	add    BYTE PTR [edx+eax*2],al
    252f:	0d 4f 00 00 00       	or     eax,0x4f
    2534:	0c 0c                	or     al,0xc
    2536:	66 64 00 04 43       	data16 add BYTE PTR fs:[ebx+eax*2],al
    253b:	0d 4f 00 00 00       	or     eax,0x4f
    2540:	10 0b                	adc    BYTE PTR [ebx],cl
    2542:	bf 10 00 00 04       	mov    edi,0x4000010
    2547:	44                   	inc    esp
    2548:	0d 4f 00 00 00       	or     eax,0x4f
    254d:	14 00                	adc    al,0x0
    254f:	06                   	push   es
    2550:	78 0a                	js     255c <sysEnter_Vector-0x12daa4>
    2552:	00 00                	add    BYTE PTR [eax],al
    2554:	04 45                	add    al,0x45
    2556:	07                   	pop    es
    2557:	9c                   	pushf  
    2558:	01 00                	add    DWORD PTR [eax],eax
    255a:	00 0d 29 01 00 00    	add    BYTE PTR ds:0x129,cl
    2560:	06                   	push   es
    2561:	33 0c 15 02 00 00 05 	xor    ecx,DWORD PTR [edx*1+0x5000002]
    2568:	03 20                	add    esp,DWORD PTR [eax]
    256a:	7f 00                	jg     256c <sysEnter_Vector-0x12da94>
    256c:	9f                   	lahf   
    256d:	05 04 6d 00 00       	add    eax,0x6d04
    2572:	00 06                	add    BYTE PTR [esi],al
    2574:	4c                   	dec    esp
    2575:	0a 00                	or     al,BYTE PTR [eax]
    2577:	00 05 15 16 64 00    	add    BYTE PTR ds:0x641615,al
    257d:	00 00                	add    BYTE PTR [eax],al
    257f:	0d 52 0a 00 00       	or     eax,0xa52
    2584:	01 0b                	add    DWORD PTR [ebx],ecx
    2586:	10 f7                	adc    bh,dh
    2588:	01 00                	add    DWORD PTR [eax],eax
    258a:	00 05 03 4c 7f 00    	add    BYTE PTR ds:0x7f4c03,al
    2590:	9f                   	lahf   
    2591:	0e                   	push   cs
    2592:	73 0a                	jae    259e <sysEnter_Vector-0x12da62>
    2594:	00 00                	add    BYTE PTR [eax],al
    2596:	01 0d 0f 6b 00 00    	add    DWORD PTR ds:0x6b0f,ecx
    259c:	00 67 21             	add    BYTE PTR [edi+0x21],ah
    259f:	00 9f 77 00 00 00    	add    BYTE PTR [edi+0x77],bl
    25a5:	01 9c 0f 3a 0a 00 00 	add    DWORD PTR [edi+ecx*1+0xa3a],ebx
    25ac:	01 0d 1b 6b 00 00    	add    DWORD PTR ds:0x6b1b,ecx
    25b2:	00 02                	add    BYTE PTR [edx],al
    25b4:	91                   	xchg   ecx,eax
    25b5:	00 10                	add    BYTE PTR [eax],dl
    25b7:	6c                   	ins    BYTE PTR es:[edi],dx
    25b8:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    25ba:	00 01                	add    BYTE PTR [ecx],al
    25bc:	0d 27 86 00 00       	or     eax,0x8627
    25c1:	00 02                	add    BYTE PTR [edx],al
    25c3:	91                   	xchg   ecx,eax
    25c4:	04 0f                	add    al,0xf
    25c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    25c7:	0a 00                	or     al,BYTE PTR [eax]
    25c9:	00 01                	add    BYTE PTR [ecx],al
    25cb:	0d 2f 4f 00 00       	or     eax,0x4f2f
    25d0:	00 02                	add    BYTE PTR [edx],al
    25d2:	91                   	xchg   ecx,eax
    25d3:	08 0f                	or     BYTE PTR [edi],cl
    25d5:	59                   	pop    ecx
    25d6:	0a 00                	or     al,BYTE PTR [eax]
    25d8:	00 01                	add    BYTE PTR [ecx],al
    25da:	0d 38 4f 00 00       	or     eax,0x4f38
    25df:	00 02                	add    BYTE PTR [edx],al
    25e1:	91                   	xchg   ecx,eax
    25e2:	0c 10                	or     al,0x10
    25e4:	66 64 00 01          	data16 add BYTE PTR fs:[ecx],al
    25e8:	0d 42 4f 00 00       	or     eax,0x4f42
    25ed:	00 02                	add    BYTE PTR [edx],al
    25ef:	91                   	xchg   ecx,eax
    25f0:	10 0f                	adc    BYTE PTR [edi],cl
    25f2:	bf 10 00 00 01       	mov    edi,0x1000010
    25f7:	0d 4b 1b 02 00       	or     eax,0x21b4b
    25fc:	00 02                	add    BYTE PTR [edx],al
    25fe:	91                   	xchg   ecx,eax
    25ff:	14 00                	adc    al,0x0
    2601:	00 3e                	add    BYTE PTR [esi],bh
    2603:	05 00 00 04 00       	add    eax,0x40000
    2608:	3e 0b 00             	or     eax,DWORD PTR ds:[eax]
    260b:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    260e:	28 00                	sub    BYTE PTR [eax],al
    2610:	00 00                	add    BYTE PTR [eax],al
    2612:	0c 86                	or     al,0x86
    2614:	0b 00                	or     eax,DWORD PTR [eax]
    2616:	00 fe                	add    dh,bh
    2618:	00 00                	add    BYTE PTR [eax],al
    261a:	00 de                	add    dh,bl
    261c:	21 00                	and    DWORD PTR [eax],eax
    261e:	9f                   	lahf   
    261f:	ed                   	in     eax,dx
    2620:	06                   	push   es
    2621:	00 00                	add    BYTE PTR [eax],al
    2623:	ca 10 00             	retf   0x10
    2626:	00 02                	add    BYTE PTR [edx],al
    2628:	01 06                	add    DWORD PTR [esi],eax
    262a:	f2 00 00             	repnz add BYTE PTR [eax],al
    262d:	00 02                	add    BYTE PTR [edx],al
    262f:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    2635:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    263c:	02 08                	add    cl,BYTE PTR [eax]
    263e:	05 00 00 00 00       	add    eax,0x0
    2643:	04 10                	add    al,0x10
    2645:	07                   	pop    es
    2646:	00 00                	add    BYTE PTR [eax],al
    2648:	02 2e                	add    ch,BYTE PTR [esi]
    264a:	18 4d 00             	sbb    BYTE PTR [ebp+0x0],cl
    264d:	00 00                	add    BYTE PTR [eax],al
    264f:	02 01                	add    al,BYTE PTR [ecx]
    2651:	08 f0                	or     al,dh
    2653:	00 00                	add    BYTE PTR [eax],al
    2655:	00 04 ca             	add    BYTE PTR [edx+ecx*8],al
    2658:	05 00 00 02 31       	add    eax,0x31020000
    265d:	19 60 00             	sbb    DWORD PTR [eax+0x0],esp
    2660:	00 00                	add    BYTE PTR [eax],al
    2662:	02 02                	add    al,BYTE PTR [edx]
    2664:	07                   	pop    es
    2665:	0e                   	push   cs
    2666:	00 00                	add    BYTE PTR [eax],al
    2668:	00 04 78             	add    BYTE PTR [eax+edi*2],al
    266b:	02 00                	add    al,BYTE PTR [eax]
    266d:	00 02                	add    BYTE PTR [edx],al
    266f:	34 19                	xor    al,0x19
    2671:	73 00                	jae    2673 <sysEnter_Vector-0x12d98d>
    2673:	00 00                	add    BYTE PTR [eax],al
    2675:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2678:	e3 00                	jecxz  267a <sysEnter_Vector-0x12d986>
    267a:	00 00                	add    BYTE PTR [eax],al
    267c:	02 08                	add    cl,BYTE PTR [eax]
    267e:	07                   	pop    es
    267f:	d9 00                	fld    DWORD PTR [eax]
    2681:	00 00                	add    BYTE PTR [eax],al
    2683:	04 8f                	add    al,0x8f
    2685:	02 00                	add    al,BYTE PTR [eax]
    2687:	00 02                	add    BYTE PTR [edx],al
    2689:	56                   	push   esi
    268a:	1a 73 00             	sbb    dh,BYTE PTR [ebx+0x0]
    268d:	00 00                	add    BYTE PTR [eax],al
    268f:	04 d2                	add    al,0xd2
    2691:	02 00                	add    al,BYTE PTR [eax]
    2693:	00 03                	add    BYTE PTR [ebx],al
    2695:	d1 17                	rcl    DWORD PTR [edi],1
    2697:	73 00                	jae    2699 <sysEnter_Vector-0x12d967>
    2699:	00 00                	add    BYTE PTR [eax],al
    269b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    26a2:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    26a5:	5e                   	pop    esi
    26a6:	01 00                	add    DWORD PTR [eax],eax
    26a8:	00 02                	add    BYTE PTR [edx],al
    26aa:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    26ad:	00 00                	add    BYTE PTR [eax],al
    26af:	00 02                	add    BYTE PTR [edx],al
    26b1:	01 06                	add    DWORD PTR [esi],eax
    26b3:	f9                   	stc    
    26b4:	00 00                	add    BYTE PTR [eax],al
    26b6:	00 05 0b 0b 00 00    	add    BYTE PTR ds:0xb0b,al
    26bc:	18 04 33             	sbb    BYTE PTR [ebx+esi*1],al
    26bf:	14 1e                	adc    al,0x1e
    26c1:	01 00                	add    DWORD PTR [eax],eax
    26c3:	00 06                	add    BYTE PTR [esi],al
    26c5:	cb                   	retf   
    26c6:	0a 00                	or     al,BYTE PTR [eax]
    26c8:	00 04 35 12 67 00 00 	add    BYTE PTR [esi*1+0x6712],al
    26cf:	00 00                	add    BYTE PTR [eax],al
    26d1:	07                   	pop    es
    26d2:	6c                   	ins    BYTE PTR es:[edi],dx
    26d3:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    26d5:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    26d8:	12 67 00             	adc    ah,BYTE PTR [edi+0x0]
    26db:	00 00                	add    BYTE PTR [eax],al
    26dd:	04 06                	add    al,0x6
    26df:	05 0b 00 00 04       	add    eax,0x400000b
    26e4:	37                   	aaa    
    26e5:	0e                   	push   cs
    26e6:	1e                   	push   ds
    26e7:	01 00                	add    DWORD PTR [eax],eax
    26e9:	00 08                	add    BYTE PTR [eax],cl
    26eb:	06                   	push   es
    26ec:	71 0b                	jno    26f9 <sysEnter_Vector-0x12d907>
    26ee:	00 00                	add    BYTE PTR [eax],al
    26f0:	04 38                	add    al,0x38
    26f2:	12 54 00 00          	adc    dl,BYTE PTR [eax+eax*1+0x0]
    26f6:	00 0a                	add    BYTE PTR [edx],cl
    26f8:	06                   	push   es
    26f9:	fe 0a                	dec    BYTE PTR [edx]
    26fb:	00 00                	add    BYTE PTR [eax],al
    26fd:	04 39                	add    al,0x39
    26ff:	11 41 00             	adc    DWORD PTR [ecx+0x0],eax
    2702:	00 00                	add    BYTE PTR [eax],al
    2704:	0c 06                	or     al,0x6
    2706:	8f 0a 00 00          	(bad)
    270a:	04 3a                	add    al,0x3a
    270c:	17                   	pop    ss
    270d:	25 01 00 00 10       	and    eax,0x10000001
    2712:	06                   	push   es
    2713:	a2 0a 00 00 04       	mov    ds:0x400000a,al
    2718:	3a 1e                	cmp    bl,BYTE PTR [esi]
    271a:	25 01 00 00 14       	and    eax,0x14000001
    271f:	00 02                	add    BYTE PTR [edx],al
    2721:	01 02                	add    DWORD PTR [edx],eax
    2723:	ab                   	stos   DWORD PTR es:[edi],eax
    2724:	06                   	push   es
    2725:	00 00                	add    BYTE PTR [eax],al
    2727:	08 04 b5 00 00 00 04 	or     BYTE PTR [esi*4+0x4000000],al
    272e:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    272f:	0a 00                	or     al,BYTE PTR [eax]
    2731:	00 04 3b             	add    BYTE PTR [ebx+edi*1],al
    2734:	07                   	pop    es
    2735:	b5 00                	mov    ch,0x0
    2737:	00 00                	add    BYTE PTR [eax],al
    2739:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    273c:	de 00                	fiadd  WORD PTR [eax]
    273e:	00 00                	add    BYTE PTR [eax],al
    2740:	09 04 08             	or     DWORD PTR [eax+ecx*1],eax
    2743:	04 ae                	add    al,0xae
    2745:	00 00                	add    BYTE PTR [eax],al
    2747:	00 0a                	add    BYTE PTR [edx],cl
    2749:	ac                   	lods   al,BYTE PTR ds:[esi]
    274a:	03 00                	add    eax,DWORD PTR [eax]
    274c:	00 07                	add    BYTE PTR [edi],al
    274e:	04 73                	add    al,0x73
    2750:	00 00                	add    BYTE PTR [eax],al
    2752:	00 06                	add    BYTE PTR [esi],al
    2754:	15 12 42 02 00       	adc    eax,0x24212
    2759:	00 0b                	add    BYTE PTR [ebx],cl
    275b:	3e 04 00             	ds add al,0x0
    275e:	00 00                	add    BYTE PTR [eax],al
    2760:	0b 83 04 00 00 01    	or     eax,DWORD PTR [ebx+0x1000004]
    2766:	0b c5                	or     eax,ebp
    2768:	02 00                	add    al,BYTE PTR [eax]
    276a:	00 02                	add    BYTE PTR [edx],al
    276c:	0b 8f 03 00 00 03    	or     ecx,DWORD PTR [edi+0x3000003]
    2772:	0b ab 02 00 00 04    	or     ebp,DWORD PTR [ebx+0x4000002]
    2778:	0b ac 04 00 00 05 0b 	or     ebp,DWORD PTR [esp+eax*1+0xb050000]
    277f:	65 04 00             	gs add al,0x0
    2782:	00 0a                	add    BYTE PTR [edx],cl
    2784:	0b d0                	or     edx,eax
    2786:	03 00                	add    eax,DWORD PTR [eax]
    2788:	00 0b                	add    BYTE PTR [ebx],cl
    278a:	0b 17                	or     edx,DWORD PTR [edi]
    278c:	04 00                	add    al,0x0
    278e:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
    2791:	9d                   	popf   
    2792:	03 00                	add    eax,DWORD PTR [eax]
    2794:	00 0d 0b b6 03 00    	add    BYTE PTR ds:0x3b60b,cl
    279a:	00 0e                	add    BYTE PTR [esi],cl
    279c:	0b b8 02 00 00 0f    	or     edi,DWORD PTR [eax+0xf000002]
    27a2:	0b f8                	or     edi,eax
    27a4:	03 00                	add    eax,DWORD PTR [eax]
    27a6:	00 10                	add    BYTE PTR [eax],dl
    27a8:	0b f1                	or     esi,ecx
    27aa:	04 00                	add    al,0x0
    27ac:	00 11                	add    BYTE PTR [ecx],dl
    27ae:	0b cf                	or     ecx,edi
    27b0:	04 00                	add    al,0x0
    27b2:	00 4f 0b             	add    BYTE PTR [edi+0xb],cl
    27b5:	9d                   	popf   
    27b6:	04 00                	add    al,0x0
    27b8:	00 50 0b             	add    BYTE PTR [eax+0xb],dl
    27bb:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    27be:	00 59 0b             	add    BYTE PTR [ecx+0xb],bl
    27c1:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
    27c4:	00 61 0b             	add    BYTE PTR [ecx+0xb],ah
    27c7:	5c                   	pop    esp
    27c8:	03 00                	add    eax,DWORD PTR [eax]
    27ca:	00 97 0c 4e 04 00    	add    BYTE PTR [edi+0x44e0c],dl
    27d0:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    27d3:	0c 24                	or     al,0x24
    27d5:	04 00                	add    al,0x0
    27d7:	00 64 01 0c          	add    BYTE PTR [ecx+eax*1+0xc],ah
    27db:	0e                   	push   cs
    27dc:	05 00 00 65 01       	add    eax,0x1650000
    27e1:	0c 38                	or     al,0x38
    27e3:	03 00                	add    eax,DWORD PTR [eax]
    27e5:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    27e8:	0c 20                	or     al,0x20
    27ea:	05 00 00 67 01       	add    eax,0x1670000
    27ef:	0c c3                	or     al,0xc3
    27f1:	03 00                	add    eax,DWORD PTR [eax]
    27f3:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    27f6:	0c f9                	or     al,0xf9
    27f8:	02 00                	add    al,BYTE PTR [eax]
    27fa:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    27fd:	0c 72                	or     al,0x72
    27ff:	04 00                	add    al,0x0
    2801:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2804:	0c 4c                	or     al,0x4c
    2806:	03 00                	add    eax,DWORD PTR [eax]
    2808:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    280b:	0c ba                	or     al,0xba
    280d:	04 00                	add    al,0x0
    280f:	00 00                	add    BYTE PTR [eax],al
    2811:	03 0c dd 03 00 00 01 	add    ecx,DWORD PTR [ebx*8+0x1000003]
    2818:	03 0c ec             	add    ecx,DWORD PTR [esp+ebp*8]
    281b:	03 00                	add    eax,DWORD PTR [eax]
    281d:	00 02                	add    BYTE PTR [edx],al
    281f:	03 0c 7f             	add    ecx,DWORD PTR [edi+edi*2]
    2822:	03 00                	add    eax,DWORD PTR [eax]
    2824:	00 03                	add    BYTE PTR [ebx],al
    2826:	03 0c d9             	add    ecx,DWORD PTR [ecx+ebx*8]
    2829:	02 00                	add    al,BYTE PTR [eax]
    282b:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    282e:	0c 28                	or     al,0x28
    2830:	03 00                	add    eax,DWORD PTR [eax]
    2832:	00 05 03 0c 70 03    	add    BYTE PTR ds:0x3700c03,al
    2838:	00 00                	add    BYTE PTR [eax],al
    283a:	06                   	push   es
    283b:	03 0c 05 04 00 00 00 	add    ecx,DWORD PTR [eax*1+0x4]
    2842:	09 00                	or     DWORD PTR [eax],eax
    2844:	0d 29 01 00 00       	or     eax,0x129
    2849:	05 33 0c 54 02       	add    eax,0x2540c33
    284e:	00 00                	add    BYTE PTR [eax],al
    2850:	05 03 20 7f 00       	add    eax,0x7f2003
    2855:	9f                   	lahf   
    2856:	08 04 40             	or     BYTE PTR [eax+eax*2],al
    2859:	01 00                	add    DWORD PTR [eax],eax
    285b:	00 0d bc 0a 00 00    	add    BYTE PTR ds:0xabc,cl
    2861:	01 11                	add    DWORD PTR [ecx],edx
    2863:	12 67 00             	adc    ah,BYTE PTR [edi+0x0]
    2866:	00 00                	add    BYTE PTR [eax],al
    2868:	05 03 64 7f 00       	add    eax,0x7f6403
    286d:	9f                   	lahf   
    286e:	0d 11 0b 00 00       	or     eax,0xb11
    2873:	01 12                	add    DWORD PTR [edx],edx
    2875:	12 67 00             	adc    ah,BYTE PTR [edi+0x0]
    2878:	00 00                	add    BYTE PTR [eax],al
    287a:	05 03 68 7f 00       	add    eax,0x7f6803
    287f:	9f                   	lahf   
    2880:	0d d7 0b 00 00       	or     eax,0xbd7
    2885:	01 13                	add    DWORD PTR [ebx],edx
    2887:	12 67 00             	adc    ah,BYTE PTR [edi+0x0]
    288a:	00 00                	add    BYTE PTR [eax],al
    288c:	05 03 6c 7f 00       	add    eax,0x7f6c03
    2891:	9f                   	lahf   
    2892:	0e                   	push   cs
    2893:	22 0b                	and    cl,BYTE PTR [ebx]
    2895:	00 00                	add    BYTE PTR [eax],al
    2897:	01 e5                	add    ebp,esp
    2899:	06                   	push   es
    289a:	95                   	xchg   ebp,eax
    289b:	28 00                	sub    BYTE PTR [eax],al
    289d:	9f                   	lahf   
    289e:	36 00 00             	add    BYTE PTR ss:[eax],al
    28a1:	00 01                	add    BYTE PTR [ecx],al
    28a3:	9c                   	pushf  
    28a4:	0f 9b 0b             	setnp  BYTE PTR [ebx]
    28a7:	00 00                	add    BYTE PTR [eax],al
    28a9:	01 e0                	add    eax,esp
    28ab:	2d 70 28 00 9f       	sub    eax,0x9f002870
    28b0:	25 00 00 00 01       	and    eax,0x1000000
    28b5:	9c                   	pushf  
    28b6:	c8 02 00 00          	enter  0x2,0x0
    28ba:	10 a0 0b 00 00 01    	adc    BYTE PTR [eax+0x100000b],ah
    28c0:	e0 38                	loopne 28fa <sysEnter_Vector-0x12d706>
    28c2:	3e 01 00             	add    DWORD PTR ds:[eax],eax
    28c5:	00 02                	add    BYTE PTR [edx],al
    28c7:	91                   	xchg   ecx,eax
    28c8:	00 00                	add    BYTE PTR [eax],al
    28ca:	11 cf                	adc    edi,ecx
    28cc:	0b 00                	or     eax,DWORD PTR [eax]
    28ce:	00 01                	add    BYTE PTR [ecx],al
    28d0:	db 0f                	fisttp DWORD PTR [edi]
    28d2:	3e 01 00             	add    DWORD PTR ds:[eax],eax
    28d5:	00 49 28             	add    BYTE PTR [ecx+0x28],cl
    28d8:	00 9f 27 00 00 00    	add    BYTE PTR [edi+0x27],bl
    28de:	01 9c 01 03 00 00 10 	add    DWORD PTR [ecx+eax*1+0x10000003],ebx
    28e5:	1a 0b                	sbb    cl,BYTE PTR [ebx]
    28e7:	00 00                	add    BYTE PTR [eax],al
    28e9:	01 db                	add    ebx,ebx
    28eb:	1d 3e 01 00 00       	sbb    eax,0x13e
    28f0:	02 91 00 10 3e 0b    	add    dl,BYTE PTR [ecx+0xb3e1000]
    28f6:	00 00                	add    BYTE PTR [eax],al
    28f8:	01 db                	add    ebx,ebx
    28fa:	2f                   	das    
    28fb:	67 00 00             	add    BYTE PTR [bx+si],al
    28fe:	00 02                	add    BYTE PTR [edx],al
    2900:	91                   	xchg   ecx,eax
    2901:	04 00                	add    al,0x0
    2903:	11 68 0b             	adc    DWORD PTR [eax+0xb],ebp
    2906:	00 00                	add    BYTE PTR [eax],al
    2908:	01 ba 07 3e 01 00    	add    DWORD PTR [edx+0x13e07],edi
    290e:	00 43 27             	add    BYTE PTR [ebx+0x27],al
    2911:	00 9f 06 01 00 00    	add    BYTE PTR [edi+0x106],bl
    2917:	01 9c 66 03 00 00 10 	add    DWORD PTR [esi+eiz*2+0x10000003],ebx
    291e:	1a 0b                	sbb    cl,BYTE PTR [ebx]
    2920:	00 00                	add    BYTE PTR [eax],al
    2922:	01 ba 16 3e 01 00    	add    DWORD PTR [edx+0x13e16],edi
    2928:	00 02                	add    BYTE PTR [edx],al
    292a:	91                   	xchg   ecx,eax
    292b:	00 10                	add    BYTE PTR [eax],dl
    292d:	3e 0b 00             	or     eax,DWORD PTR ds:[eax]
    2930:	00 01                	add    BYTE PTR [ecx],al
    2932:	ba 28 67 00 00       	mov    edx,0x6728
    2937:	00 02                	add    BYTE PTR [edx],al
    2939:	91                   	xchg   ecx,eax
    293a:	04 12                	add    al,0x12
    293c:	58                   	pop    eax
    293d:	0b 00                	or     eax,DWORD PTR [eax]
    293f:	00 01                	add    BYTE PTR [ecx],al
    2941:	c0 0e 67             	ror    BYTE PTR [esi],0x67
    2944:	00 00                	add    BYTE PTR [eax],al
    2946:	00 02                	add    BYTE PTR [edx],al
    2948:	91                   	xchg   ecx,eax
    2949:	6c                   	ins    BYTE PTR es:[edi],dx
    294a:	13 6d 70             	adc    ebp,DWORD PTR [ebp+0x70]
    294d:	00 01                	add    BYTE PTR [ecx],al
    294f:	c1 10 66             	rcl    DWORD PTR [eax],0x66
    2952:	03 00                	add    eax,DWORD PTR [eax]
    2954:	00 02                	add    BYTE PTR [edx],al
    2956:	91                   	xchg   ecx,eax
    2957:	68 12 7e 0b 00       	push   0xb7e12
    295c:	00 01                	add    BYTE PTR [ecx],al
    295e:	cd 10                	int    0x10
    2960:	6c                   	ins    BYTE PTR es:[edi],dx
    2961:	03 00                	add    eax,DWORD PTR [eax]
    2963:	00 02                	add    BYTE PTR [edx],al
    2965:	91                   	xchg   ecx,eax
    2966:	64 00 08             	add    BYTE PTR fs:[eax],cl
    2969:	04 2b                	add    al,0x2b
    296b:	01 00                	add    DWORD PTR [eax],eax
    296d:	00 08                	add    BYTE PTR [eax],cl
    296f:	04 81                	add    al,0x81
    2971:	00 00                	add    BYTE PTR [eax],al
    2973:	00 11                	add    BYTE PTR [ecx],dl
    2975:	b5 0a                	mov    ch,0xa
    2977:	00 00                	add    BYTE PTR [eax],al
    2979:	01 b5 2f 3e 01 00    	add    DWORD PTR [ebp+0x13e2f],esi
    297f:	00 1f                	add    BYTE PTR [edi],bl
    2981:	27                   	daa    
    2982:	00 9f 24 00 00 00    	add    BYTE PTR [edi+0x24],bl
    2988:	01 9c 9c 03 00 00 10 	add    DWORD PTR [esp+ebx*4+0x10000003],ebx
    298f:	1b 07                	sbb    eax,DWORD PTR [edi]
    2991:	00 00                	add    BYTE PTR [eax],al
    2993:	01 b5 3d 8d 00 00    	add    DWORD PTR [ebp+0x8d3d],esi
    2999:	00 02                	add    BYTE PTR [edx],al
    299b:	91                   	xchg   ecx,eax
    299c:	00 00                	add    BYTE PTR [eax],al
    299e:	11 87 0a 00 00 01    	adc    DWORD PTR [edi+0x100000a],eax
    29a4:	75 08                	jne    29ae <sysEnter_Vector-0x12d652>
    29a6:	3e 01 00             	add    DWORD PTR ds:[eax],eax
    29a9:	00 5b 24             	add    BYTE PTR [ebx+0x24],bl
    29ac:	00 9f c4 02 00 00    	add    BYTE PTR [edi+0x2c4],bl
    29b2:	01 9c 3c 04 00 00 10 	add    DWORD PTR [esp+edi*1+0x10000004],ebx
    29b9:	1b 07                	sbb    eax,DWORD PTR [edi]
    29bb:	00 00                	add    BYTE PTR [eax],al
    29bd:	01 75 17             	add    DWORD PTR [ebp+0x17],esi
    29c0:	8d 00                	lea    eax,[eax]
    29c2:	00 00                	add    BYTE PTR [eax],al
    29c4:	02 91 00 12 35 05    	add    dl,BYTE PTR [ecx+0x5351200]
    29ca:	00 00                	add    BYTE PTR [eax],al
    29cc:	01 77 0b             	add    DWORD PTR [edi+0xb],esi
    29cf:	3e 01 00             	add    DWORD PTR ds:[eax],eax
    29d2:	00 02                	add    BYTE PTR [edx],al
    29d4:	91                   	xchg   ecx,eax
    29d5:	58                   	pop    eax
    29d6:	12 61 0b             	adc    ah,BYTE PTR [ecx+0xb]
    29d9:	00 00                	add    BYTE PTR [eax],al
    29db:	01 79 0e             	add    DWORD PTR [ecx+0xe],edi
    29de:	67 00 00             	add    BYTE PTR [bx+si],al
    29e1:	00 02                	add    BYTE PTR [edx],al
    29e3:	91                   	xchg   ecx,eax
    29e4:	60                   	pusha  
    29e5:	12 31                	adc    dh,BYTE PTR [ecx]
    29e7:	0b 00                	or     eax,DWORD PTR [eax]
    29e9:	00 01                	add    BYTE PTR [ecx],al
    29eb:	7a 0e                	jp     29fb <sysEnter_Vector-0x12d605>
    29ed:	67 00 00             	add    BYTE PTR [bx+si],al
    29f0:	00 02                	add    BYTE PTR [edx],al
    29f2:	91                   	xchg   ecx,eax
    29f3:	5c                   	pop    esp
    29f4:	12 93 0b 00 00 01    	adc    dl,BYTE PTR [ebx+0x100000b]
    29fa:	7b 10                	jnp    2a0c <sysEnter_Vector-0x12d5f4>
    29fc:	66 03 00             	add    ax,WORD PTR [eax]
    29ff:	00 02                	add    BYTE PTR [edx],al
    2a01:	91                   	xchg   ecx,eax
    2a02:	68 12 d2 0a 00       	push   0xad212
    2a07:	00 01                	add    BYTE PTR [ecx],al
    2a09:	7c 0c                	jl     2a17 <sysEnter_Vector-0x12d5e9>
    2a0b:	8d 00                	lea    eax,[eax]
    2a0d:	00 00                	add    BYTE PTR [eax],al
    2a0f:	02 91 6c 12 94 0a    	add    dl,BYTE PTR [ecx+0xa94126c]
    2a15:	00 00                	add    BYTE PTR [eax],al
    2a17:	01 7d 17             	add    DWORD PTR [ebp+0x17],edi
    2a1a:	66 03 00             	add    ax,WORD PTR [eax]
    2a1d:	00 05 03 70 7f 00    	add    BYTE PTR ds:0x7f7003,al
    2a23:	9f                   	lahf   
    2a24:	14 ea                	adc    al,0xea
    2a26:	24 00                	and    al,0x0
    2a28:	9f                   	lahf   
    2a29:	11 00                	adc    DWORD PTR [eax],eax
    2a2b:	00 00                	add    BYTE PTR [eax],al
    2a2d:	13 70 74             	adc    esi,DWORD PTR [eax+0x74]
    2a30:	72 00                	jb     2a32 <sysEnter_Vector-0x12d5ce>
    2a32:	01 89 6a 3e 01 00    	add    DWORD PTR [ecx+0x13e6a],ecx
    2a38:	00 02                	add    BYTE PTR [edx],al
    2a3a:	91                   	xchg   ecx,eax
    2a3b:	64 00 00             	add    BYTE PTR fs:[eax],al
    2a3e:	0f df 0b             	pandn  mm1,QWORD PTR [ebx]
    2a41:	00 00                	add    BYTE PTR [eax],al
    2a43:	01 5e 06             	add    DWORD PTR [esi+0x6],ebx
    2a46:	cc                   	int3   
    2a47:	23 00                	and    eax,DWORD PTR [eax]
    2a49:	9f                   	lahf   
    2a4a:	8f 00                	pop    DWORD PTR [eax]
    2a4c:	00 00                	add    BYTE PTR [eax],al
    2a4e:	01 9c 89 04 00 00 10 	add    DWORD PTR [ecx+ecx*4+0x10000004],ebx
    2a55:	76 0b                	jbe    2a62 <sysEnter_Vector-0x12d59e>
    2a57:	00 00                	add    BYTE PTR [eax],al
    2a59:	01 5e 23             	add    DWORD PTR [esi+0x23],ebx
    2a5c:	66 03 00             	add    ax,WORD PTR [eax]
    2a5f:	00 02                	add    BYTE PTR [edx],al
    2a61:	91                   	xchg   ecx,eax
    2a62:	00 12                	add    BYTE PTR [edx],dl
    2a64:	93                   	xchg   ebx,eax
    2a65:	0b 00                	or     eax,DWORD PTR [eax]
    2a67:	00 01                	add    BYTE PTR [ecx],al
    2a69:	61                   	popa   
    2a6a:	10 66 03             	adc    BYTE PTR [esi+0x3],ah
    2a6d:	00 00                	add    BYTE PTR [eax],al
    2a6f:	02 91 6c 15 a9 0b    	add    dl,BYTE PTR [ecx+0xba9156c]
    2a75:	00 00                	add    BYTE PTR [eax],al
    2a77:	01 67 05             	add    DWORD PTR [edi+0x5],esp
    2a7a:	0f 24                	(bad)  
    2a7c:	00 9f 15 45 0b 00    	add    BYTE PTR [edi+0xb4515],bl
    2a82:	00 01                	add    BYTE PTR [ecx],al
    2a84:	6d                   	ins    DWORD PTR es:[edi],dx
    2a85:	01 32                	add    DWORD PTR [edx],esi
    2a87:	24 00                	and    al,0x0
    2a89:	9f                   	lahf   
    2a8a:	00 16                	add    BYTE PTR [esi],dl
    2a8c:	b5 0b                	mov    ch,0xb
    2a8e:	00 00                	add    BYTE PTR [eax],al
    2a90:	01 4e 0c             	add    DWORD PTR [esi+0xc],ecx
    2a93:	66 03 00             	add    ax,WORD PTR [eax]
    2a96:	00 44 23 00          	add    BYTE PTR [ebx+eiz*1+0x0],al
    2a9a:	9f                   	lahf   
    2a9b:	88 00                	mov    BYTE PTR [eax],al
    2a9d:	00 00                	add    BYTE PTR [eax],al
    2a9f:	01 9c c2 04 00 00 10 	add    DWORD PTR [edx+eax*8+0x10000004],ebx
    2aa6:	1b 07                	sbb    eax,DWORD PTR [edi]
    2aa8:	00 00                	add    BYTE PTR [eax],al
    2aaa:	01 4e 2d             	add    DWORD PTR [esi+0x2d],ecx
    2aad:	8d 00                	lea    eax,[eax]
    2aaf:	00 00                	add    BYTE PTR [eax],al
    2ab1:	02 91 00 12 93 0b    	add    dl,BYTE PTR [ecx+0xb931200]
    2ab7:	00 00                	add    BYTE PTR [eax],al
    2ab9:	01 50 10             	add    DWORD PTR [eax+0x10],edx
    2abc:	66 03 00             	add    ax,WORD PTR [eax]
    2abf:	00 02                	add    BYTE PTR [edx],al
    2ac1:	91                   	xchg   ecx,eax
    2ac2:	74 00                	je     2ac4 <sysEnter_Vector-0x12d53c>
    2ac4:	0f c5                	pextrw ecx,(bad),0xc5
    2ac6:	0a 00                	or     al,BYTE PTR [eax]
    2ac8:	00 01                	add    BYTE PTR [ecx],al
    2aca:	36 06                	ss push es
    2acc:	cd 22                	int    0x22
    2ace:	00 9f 77 00 00 00    	add    BYTE PTR [edi+0x77],bl
    2ad4:	01 9c f6 04 00 00 10 	add    DWORD PTR [esi+esi*8+0x10000004],ebx
    2adb:	a0 0b 00 00 01       	mov    al,ds:0x100000b
    2ae0:	36 12 3e             	adc    bh,BYTE PTR ss:[esi]
    2ae3:	01 00                	add    DWORD PTR [eax],eax
    2ae5:	00 02                	add    BYTE PTR [edx],al
    2ae7:	91                   	xchg   ecx,eax
    2ae8:	00 13                	add    BYTE PTR [ebx],dl
    2aea:	6d                   	ins    DWORD PTR es:[edi],dx
    2aeb:	70 00                	jo     2aed <sysEnter_Vector-0x12d513>
    2aed:	01 38                	add    DWORD PTR [eax],edi
    2aef:	10 66 03             	adc    BYTE PTR [esi+0x3],ah
    2af2:	00 00                	add    BYTE PTR [eax],al
    2af4:	02 91 6c 00 16 de    	add    dl,BYTE PTR [ecx-0x21e9ff94]
    2afa:	0a 00                	or     al,BYTE PTR [eax]
    2afc:	00 01                	add    BYTE PTR [ecx],al
    2afe:	1e                   	push   ds
    2aff:	0a 67 00             	or     ah,BYTE PTR [edi+0x0]
    2b02:	00 00                	add    BYTE PTR [eax],al
    2b04:	42                   	inc    edx
    2b05:	22 00                	and    al,BYTE PTR [eax]
    2b07:	9f                   	lahf   
    2b08:	8b 00                	mov    eax,DWORD PTR [eax]
    2b0a:	00 00                	add    BYTE PTR [eax],al
    2b0c:	01 9c 2f 05 00 00 10 	add    DWORD PTR [edi+ebp*1+0x10000005],ebx
    2b13:	1b 07                	sbb    eax,DWORD PTR [edi]
    2b15:	00 00                	add    BYTE PTR [eax],al
    2b17:	01 1e                	add    DWORD PTR [esi],ebx
    2b19:	31 8d 00 00 00 02    	xor    DWORD PTR [ebp+0x2000000],ecx
    2b1f:	91                   	xchg   ecx,eax
    2b20:	00 12                	add    BYTE PTR [edx],dl
    2b22:	50                   	push   eax
    2b23:	0b 00                	or     eax,DWORD PTR [eax]
    2b25:	00 01                	add    BYTE PTR [ecx],al
    2b27:	22 0e                	and    cl,BYTE PTR [esi]
    2b29:	67 00 00             	add    BYTE PTR [bx+si],al
    2b2c:	00 02                	add    BYTE PTR [edx],al
    2b2e:	91                   	xchg   ecx,eax
    2b2f:	74 00                	je     2b31 <sysEnter_Vector-0x12d4cf>
    2b31:	0e                   	push   cs
    2b32:	b1 0a                	mov    cl,0xa
    2b34:	00 00                	add    BYTE PTR [eax],al
    2b36:	01 15 06 de 21 00    	add    DWORD PTR ds:0x21de06,edx
    2b3c:	9f                   	lahf   
    2b3d:	64 00 00             	add    BYTE PTR fs:[eax],al
    2b40:	00 01                	add    BYTE PTR [ecx],al
    2b42:	9c                   	pushf  
    2b43:	00 fb                	add    bl,bh
    2b45:	01 00                	add    DWORD PTR [eax],eax
    2b47:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b4a:	af                   	scas   eax,DWORD PTR es:[edi]
    2b4b:	0c 00                	or     al,0x0
    2b4d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2b50:	28 00                	sub    BYTE PTR [eax],al
    2b52:	00 00                	add    BYTE PTR [eax],al
    2b54:	0c 05                	or     al,0x5
    2b56:	0c 00                	or     al,0x0
    2b58:	00 fe                	add    dh,bh
    2b5a:	00 00                	add    BYTE PTR [eax],al
    2b5c:	00 cb                	add    bl,cl
    2b5e:	28 00                	sub    BYTE PTR [eax],al
    2b60:	9f                   	lahf   
    2b61:	c3                   	ret    
    2b62:	01 00                	add    DWORD PTR [eax],eax
    2b64:	00 f2                	add    dl,dh
    2b66:	13 00                	adc    eax,DWORD PTR [eax]
    2b68:	00 02                	add    BYTE PTR [edx],al
    2b6a:	01 08                	add    DWORD PTR [eax],ecx
    2b6c:	f0 00 00             	lock add BYTE PTR [eax],al
    2b6f:	00 02                	add    BYTE PTR [edx],al
    2b71:	02 07                	add    al,BYTE PTR [edi]
    2b73:	0e                   	push   cs
    2b74:	00 00                	add    BYTE PTR [eax],al
    2b76:	00 02                	add    BYTE PTR [edx],al
    2b78:	04 07                	add    al,0x7
    2b7a:	e3 00                	jecxz  2b7c <sysEnter_Vector-0x12d484>
    2b7c:	00 00                	add    BYTE PTR [eax],al
    2b7e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2b81:	de 00                	fiadd  WORD PTR [eax]
    2b83:	00 00                	add    BYTE PTR [eax],al
    2b85:	02 01                	add    al,BYTE PTR [ecx]
    2b87:	06                   	push   es
    2b88:	f2 00 00             	repnz add BYTE PTR [eax],al
    2b8b:	00 02                	add    BYTE PTR [edx],al
    2b8d:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    2b93:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2b9a:	02 08                	add    cl,BYTE PTR [eax]
    2b9c:	05 00 00 00 00       	add    eax,0x0
    2ba1:	02 08                	add    cl,BYTE PTR [eax]
    2ba3:	07                   	pop    es
    2ba4:	d9 00                	fld    DWORD PTR [eax]
    2ba6:	00 00                	add    BYTE PTR [eax],al
    2ba8:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2baf:	04 04                	add    al,0x4
    2bb1:	05 04 73 00 00       	add    eax,0x7304
    2bb6:	00 02                	add    BYTE PTR [edx],al
    2bb8:	01 06                	add    DWORD PTR [esi],eax
    2bba:	f9                   	stc    
    2bbb:	00 00                	add    BYTE PTR [eax],al
    2bbd:	00 06                	add    BYTE PTR [esi],al
    2bbf:	73 00                	jae    2bc1 <sysEnter_Vector-0x12d43f>
    2bc1:	00 00                	add    BYTE PTR [eax],al
    2bc3:	07                   	pop    es
    2bc4:	d2 02                	rol    BYTE PTR [edx],cl
    2bc6:	00 00                	add    BYTE PTR [eax],al
    2bc8:	02 d1                	add    dl,cl
    2bca:	17                   	pop    ss
    2bcb:	33 00                	xor    eax,DWORD PTR [eax]
    2bcd:	00 00                	add    BYTE PTR [eax],al
    2bcf:	07                   	pop    es
    2bd0:	78 02                	js     2bd4 <sysEnter_Vector-0x12d42c>
    2bd2:	00 00                	add    BYTE PTR [eax],al
    2bd4:	03 34 19             	add    esi,DWORD PTR [ecx+ebx*1]
    2bd7:	33 00                	xor    eax,DWORD PTR [eax]
    2bd9:	00 00                	add    BYTE PTR [eax],al
    2bdb:	06                   	push   es
    2bdc:	8b 00                	mov    eax,DWORD PTR [eax]
    2bde:	00 00                	add    BYTE PTR [eax],al
    2be0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2be3:	5e                   	pop    esi
    2be4:	01 00                	add    DWORD PTR [eax],eax
    2be6:	00 02                	add    BYTE PTR [edx],al
    2be8:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    2beb:	00 00                	add    BYTE PTR [eax],al
    2bed:	00 08                	add    BYTE PTR [eax],cl
    2bef:	29 01                	sub    DWORD PTR [ecx],eax
    2bf1:	00 00                	add    BYTE PTR [eax],al
    2bf3:	04 33                	add    al,0x33
    2bf5:	0c bc                	or     al,0xbc
    2bf7:	00 00                	add    BYTE PTR [eax],al
    2bf9:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    2bff:	9f                   	lahf   
    2c00:	05 04 6d 00 00       	add    eax,0x6d04
    2c05:	00 09                	add    BYTE PTR [ecx],cl
    2c07:	fe 0b                	dec    BYTE PTR [ebx]
    2c09:	00 00                	add    BYTE PTR [eax],al
    2c0b:	01 42 10             	add    DWORD PTR [edx+0x10],eax
    2c0e:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    2c11:	00 6a 2a             	add    BYTE PTR [edx+0x2a],ch
    2c14:	00 9f 24 00 00 00    	add    BYTE PTR [edi+0x24],bl
    2c1a:	01 9c 08 01 00 00 0a 	add    DWORD PTR [eax+ecx*1+0xa000001],ebx
    2c21:	f9                   	stc    
    2c22:	0b 00                	or     eax,DWORD PTR [eax]
    2c24:	00 01                	add    BYTE PTR [ecx],al
    2c26:	42                   	inc    edx
    2c27:	1d 6b 00 00 00       	sbb    eax,0x6b
    2c2c:	02 91 00 0b 73 72    	add    dl,BYTE PTR [ecx+0x72730b00]
    2c32:	63 00                	arpl   WORD PTR [eax],ax
    2c34:	01 42 2f             	add    DWORD PTR [edx+0x2f],eax
    2c37:	08 01                	or     BYTE PTR [ecx],al
    2c39:	00 00                	add    BYTE PTR [eax],al
    2c3b:	02 91 04 0b 6e 00    	add    dl,BYTE PTR [ecx+0x6e0b04]
    2c41:	01 42 3b             	add    DWORD PTR [edx+0x3b],eax
    2c44:	7f 00                	jg     2c46 <sysEnter_Vector-0x12d3ba>
    2c46:	00 00                	add    BYTE PTR [eax],al
    2c48:	02 91 08 00 05 04    	add    dl,BYTE PTR [ecx+0x4050008]
    2c4e:	0e                   	push   cs
    2c4f:	01 00                	add    DWORD PTR [eax],eax
    2c51:	00 0c 0d f1 0b 00 00 	add    BYTE PTR [ecx*1+0xbf1],cl
    2c58:	01 0b                	add    DWORD PTR [ebx],ecx
    2c5a:	07                   	pop    es
    2c5b:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    2c5e:	00 cb                	add    bl,cl
    2c60:	28 00                	sub    BYTE PTR [eax],al
    2c62:	9f                   	lahf   
    2c63:	9f                   	lahf   
    2c64:	01 00                	add    DWORD PTR [eax],eax
    2c66:	00 01                	add    BYTE PTR [ecx],al
    2c68:	9c                   	pushf  
    2c69:	e5 01                	in     eax,0x1
    2c6b:	00 00                	add    BYTE PTR [eax],al
    2c6d:	0a f9                	or     bh,cl
    2c6f:	0b 00                	or     eax,DWORD PTR [eax]
    2c71:	00 01                	add    BYTE PTR [ecx],al
    2c73:	0b 15 6b 00 00 00    	or     edx,DWORD PTR ds:0x6b
    2c79:	02 91 00 0b 73 72    	add    dl,BYTE PTR [ecx+0x72730b00]
    2c7f:	63 00                	arpl   WORD PTR [eax],ax
    2c81:	01 0b                	add    DWORD PTR [ebx],ecx
    2c83:	27                   	daa    
    2c84:	08 01                	or     BYTE PTR [ecx],al
    2c86:	00 00                	add    BYTE PTR [eax],al
    2c88:	02 91 04 0b 6e 00    	add    dl,BYTE PTR [ecx+0x6e0b04]
    2c8e:	01 0b                	add    DWORD PTR [ebx],ecx
    2c90:	33 7f 00             	xor    edi,DWORD PTR [edi+0x0]
    2c93:	00 00                	add    BYTE PTR [eax],al
    2c95:	02 91 08 0e 64 77    	add    dl,BYTE PTR [ecx+0x77640e08]
    2c9b:	00 01                	add    BYTE PTR [ecx],al
    2c9d:	0d 0a e5 01 00       	or     eax,0x1e50a
    2ca2:	00 02                	add    BYTE PTR [edx],al
    2ca4:	91                   	xchg   ecx,eax
    2ca5:	5e                   	pop    esi
    2ca6:	0e                   	push   cs
    2ca7:	64 64 00 01          	fs add BYTE PTR fs:[ecx],al
    2cab:	0d 0d e5 01 00       	or     eax,0x1e50d
    2cb0:	00 02                	add    BYTE PTR [edx],al
    2cb2:	91                   	xchg   ecx,eax
    2cb3:	5f                   	pop    edi
    2cb4:	0f 01                	(bad)  
    2cb6:	29 00                	sub    DWORD PTR [eax],eax
    2cb8:	9f                   	lahf   
    2cb9:	7d 00                	jge    2cbb <sysEnter_Vector-0x12d345>
    2cbb:	00 00                	add    BYTE PTR [eax],al
    2cbd:	98                   	cwde   
    2cbe:	01 00                	add    DWORD PTR [eax],eax
    2cc0:	00 0e                	add    BYTE PTR [esi],cl
    2cc2:	66 00 01             	data16 add BYTE PTR [ecx],al
    2cc5:	14 19                	adc    al,0x19
    2cc7:	ec                   	in     al,dx
    2cc8:	01 00                	add    DWORD PTR [eax],eax
    2cca:	00 02                	add    BYTE PTR [edx],al
    2ccc:	91                   	xchg   ecx,eax
    2ccd:	74 0e                	je     2cdd <sysEnter_Vector-0x12d323>
    2ccf:	74 00                	je     2cd1 <sysEnter_Vector-0x12d32f>
    2cd1:	01 15 13 f2 01 00    	add    DWORD PTR ds:0x1f213,edx
    2cd7:	00 02                	add    BYTE PTR [edx],al
    2cd9:	91                   	xchg   ecx,eax
    2cda:	70 00                	jo     2cdc <sysEnter_Vector-0x12d324>
    2cdc:	0f 84 29 00 9f 79    	je     799f2d0b <sysEnter_Vector+0x798c2d0b>
    2ce2:	00 00                	add    BYTE PTR [eax],al
    2ce4:	00 c0                	add    al,al
    2ce6:	01 00                	add    DWORD PTR [eax],eax
    2ce8:	00 0e                	add    BYTE PTR [esi],cl
    2cea:	66 00 01             	data16 add BYTE PTR [ecx],al
    2ced:	24 19                	and    al,0x19
    2cef:	ec                   	in     al,dx
    2cf0:	01 00                	add    DWORD PTR [eax],eax
    2cf2:	00 02                	add    BYTE PTR [edx],al
    2cf4:	91                   	xchg   ecx,eax
    2cf5:	6c                   	ins    BYTE PTR es:[edi],dx
    2cf6:	0e                   	push   cs
    2cf7:	74 00                	je     2cf9 <sysEnter_Vector-0x12d307>
    2cf9:	01 25 13 f2 01 00    	add    DWORD PTR ds:0x1f213,esp
    2cff:	00 02                	add    BYTE PTR [edx],al
    2d01:	91                   	xchg   ecx,eax
    2d02:	68 00 10 fd 29       	push   0x29fd1000
    2d07:	00 9f 6b 00 00 00    	add    BYTE PTR [edi+0x6b],bl
    2d0d:	0e                   	push   cs
    2d0e:	66 00 01             	data16 add BYTE PTR [ecx],al
    2d11:	33 15 f8 01 00 00    	xor    edx,DWORD PTR ds:0x1f8
    2d17:	02 91 64 0e 74 00    	add    dl,BYTE PTR [ecx+0x740e64]
    2d1d:	01 34 0f             	add    DWORD PTR [edi+ecx*1],esi
    2d20:	6d                   	ins    DWORD PTR es:[edi],dx
    2d21:	00 00                	add    BYTE PTR [eax],al
    2d23:	00 02                	add    BYTE PTR [edx],al
    2d25:	91                   	xchg   ecx,eax
    2d26:	60                   	pusha  
    2d27:	00 00                	add    BYTE PTR [eax],al
    2d29:	02 01                	add    al,BYTE PTR [ecx]
    2d2b:	02 ab 06 00 00 05    	add    ch,BYTE PTR [ebx+0x5000006]
    2d31:	04 97                	add    al,0x97
    2d33:	00 00                	add    BYTE PTR [eax],al
    2d35:	00 05 04 8b 00 00    	add    BYTE PTR ds:0x8b04,al
    2d3b:	00 05 04 7a 00 00    	add    BYTE PTR ds:0x7a04,al
    2d41:	00 00                	add    BYTE PTR [eax],al
    2d43:	b2 01                	mov    dl,0x1
    2d45:	00 00                	add    BYTE PTR [eax],al
    2d47:	04 00                	add    al,0x0
    2d49:	9a 0d 00 00 04 01 28 	call   0x2801:0x400000d
    2d50:	00 00                	add    BYTE PTR [eax],al
    2d52:	00 0c 12             	add    BYTE PTR [edx+edx*1],cl
    2d55:	0c 00                	or     al,0x0
    2d57:	00 fe                	add    dh,bh
    2d59:	00 00                	add    BYTE PTR [eax],al
    2d5b:	00 8e 2a 00 9f ef    	add    BYTE PTR [esi-0x1060ffd6],cl
    2d61:	00 00                	add    BYTE PTR [eax],al
    2d63:	00 47 15             	add    BYTE PTR [edi+0x15],al
    2d66:	00 00                	add    BYTE PTR [eax],al
    2d68:	02 01                	add    al,BYTE PTR [ecx]
    2d6a:	08 f0                	or     al,dh
    2d6c:	00 00                	add    BYTE PTR [eax],al
    2d6e:	00 02                	add    BYTE PTR [edx],al
    2d70:	02 07                	add    al,BYTE PTR [edi]
    2d72:	0e                   	push   cs
    2d73:	00 00                	add    BYTE PTR [eax],al
    2d75:	00 02                	add    BYTE PTR [edx],al
    2d77:	04 07                	add    al,0x7
    2d79:	e3 00                	jecxz  2d7b <sysEnter_Vector-0x12d285>
    2d7b:	00 00                	add    BYTE PTR [eax],al
    2d7d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2d80:	de 00                	fiadd  WORD PTR [eax]
    2d82:	00 00                	add    BYTE PTR [eax],al
    2d84:	02 01                	add    al,BYTE PTR [ecx]
    2d86:	06                   	push   es
    2d87:	f2 00 00             	repnz add BYTE PTR [eax],al
    2d8a:	00 02                	add    BYTE PTR [edx],al
    2d8c:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    2d92:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2d99:	02 08                	add    cl,BYTE PTR [eax]
    2d9b:	05 00 00 00 00       	add    eax,0x0
    2da0:	02 08                	add    cl,BYTE PTR [eax]
    2da2:	07                   	pop    es
    2da3:	d9 00                	fld    DWORD PTR [eax]
    2da5:	00 00                	add    BYTE PTR [eax],al
    2da7:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2dae:	04 04                	add    al,0x4
    2db0:	05 04 73 00 00       	add    eax,0x7304
    2db5:	00 02                	add    BYTE PTR [edx],al
    2db7:	01 06                	add    DWORD PTR [esi],eax
    2db9:	f9                   	stc    
    2dba:	00 00                	add    BYTE PTR [eax],al
    2dbc:	00 06                	add    BYTE PTR [esi],al
    2dbe:	10 07                	adc    BYTE PTR [edi],al
    2dc0:	00 00                	add    BYTE PTR [eax],al
    2dc2:	02 2e                	add    ch,BYTE PTR [esi]
    2dc4:	18 25 00 00 00 06    	sbb    BYTE PTR ds:0x6000000,ah
    2dca:	ca 05 00             	retf   0x5
    2dcd:	00 02                	add    BYTE PTR [edx],al
    2dcf:	31 19                	xor    DWORD PTR [ecx],ebx
    2dd1:	2c 00                	sub    al,0x0
    2dd3:	00 00                	add    BYTE PTR [eax],al
    2dd5:	06                   	push   es
    2dd6:	78 02                	js     2dda <sysEnter_Vector-0x12d226>
    2dd8:	00 00                	add    BYTE PTR [eax],al
    2dda:	02 34 19             	add    dh,BYTE PTR [ecx+ebx*1]
    2ddd:	33 00                	xor    eax,DWORD PTR [eax]
    2ddf:	00 00                	add    BYTE PTR [eax],al
    2de1:	06                   	push   es
    2de2:	d2 02                	rol    BYTE PTR [edx],cl
    2de4:	00 00                	add    BYTE PTR [eax],al
    2de6:	03 d1                	add    edx,ecx
    2de8:	17                   	pop    ss
    2de9:	33 00                	xor    eax,DWORD PTR [eax]
    2deb:	00 00                	add    BYTE PTR [eax],al
    2ded:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2df0:	5e                   	pop    esi
    2df1:	01 00                	add    DWORD PTR [eax],eax
    2df3:	00 02                	add    BYTE PTR [edx],al
    2df5:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    2df8:	00 00                	add    BYTE PTR [eax],al
    2dfa:	00 07                	add    BYTE PTR [edi],al
    2dfc:	29 01                	sub    DWORD PTR [ecx],eax
    2dfe:	00 00                	add    BYTE PTR [eax],al
    2e00:	04 33                	add    al,0x33
    2e02:	0c ca                	or     al,0xca
    2e04:	00 00                	add    BYTE PTR [eax],al
    2e06:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    2e0c:	9f                   	lahf   
    2e0d:	05 04 6d 00 00       	add    eax,0x6d04
    2e12:	00 08                	add    BYTE PTR [eax],cl
    2e14:	1f                   	pop    ds
    2e15:	0c 00                	or     al,0x0
    2e17:	00 01                	add    BYTE PTR [ecx],al
    2e19:	1f                   	pop    ds
    2e1a:	0f 6b 00             	packssdw mm0,QWORD PTR [eax]
    2e1d:	00 00                	add    BYTE PTR [eax],al
    2e1f:	59                   	pop    ecx
    2e20:	2b 00                	sub    eax,DWORD PTR [eax]
    2e22:	9f                   	lahf   
    2e23:	24 00                	and    al,0x0
    2e25:	00 00                	add    BYTE PTR [eax],al
    2e27:	01 9c 17 01 00 00 09 	add    DWORD PTR [edi+edx*1+0x9000001],ebx
    2e2e:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2e31:	01 1f                	add    DWORD PTR [edi],ebx
    2e33:	1c 6b                	sbb    al,0x6b
    2e35:	00 00                	add    BYTE PTR [eax],al
    2e37:	00 02                	add    BYTE PTR [edx],al
    2e39:	91                   	xchg   ecx,eax
    2e3a:	00 09                	add    BYTE PTR [ecx],cl
    2e3c:	76 61                	jbe    2e9f <sysEnter_Vector-0x12d161>
    2e3e:	6c                   	ins    BYTE PTR es:[edi],dx
    2e3f:	00 01                	add    BYTE PTR [ecx],al
    2e41:	1f                   	pop    ds
    2e42:	24 4f                	and    al,0x4f
    2e44:	00 00                	add    BYTE PTR [eax],al
    2e46:	00 02                	add    BYTE PTR [edx],al
    2e48:	91                   	xchg   ecx,eax
    2e49:	04 09                	add    al,0x9
    2e4b:	6c                   	ins    BYTE PTR es:[edi],dx
    2e4c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2e4e:	00 01                	add    BYTE PTR [ecx],al
    2e50:	1f                   	pop    ds
    2e51:	30 9e 00 00 00 02    	xor    BYTE PTR [esi+0x2000000],bl
    2e57:	91                   	xchg   ecx,eax
    2e58:	08 00                	or     BYTE PTR [eax],al
    2e5a:	0a 26                	or     ah,BYTE PTR [esi]
    2e5c:	0c 00                	or     al,0x0
    2e5e:	00 01                	add    BYTE PTR [ecx],al
    2e60:	08 07                	or     BYTE PTR [edi],al
    2e62:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    2e65:	00 8e 2a 00 9f cb    	add    BYTE PTR [esi-0x3460ffd6],cl
    2e6b:	00 00                	add    BYTE PTR [eax],al
    2e6d:	00 01                	add    BYTE PTR [ecx],al
    2e6f:	9c                   	pushf  
    2e70:	a3 01 00 00 09       	mov    ds:0x9000001,eax
    2e75:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2e78:	01 08                	add    DWORD PTR [eax],ecx
    2e7a:	15 6b 00 00 00       	adc    eax,0x6b
    2e7f:	02 91 00 09 76 61    	add    dl,BYTE PTR [ecx+0x61760900]
    2e85:	6c                   	ins    BYTE PTR es:[edi],dx
    2e86:	00 01                	add    BYTE PTR [ecx],al
    2e88:	08 1d 4f 00 00 00    	or     BYTE PTR ds:0x4f,bl
    2e8e:	02 91 04 09 6c 65    	add    dl,BYTE PTR [ecx+0x656c0904]
    2e94:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2e95:	00 01                	add    BYTE PTR [ecx],al
    2e97:	08 29                	or     BYTE PTR [ecx],ch
    2e99:	9e                   	sahf   
    2e9a:	00 00                	add    BYTE PTR [eax],al
    2e9c:	00 02                	add    BYTE PTR [edx],al
    2e9e:	91                   	xchg   ecx,eax
    2e9f:	08 0b                	or     BYTE PTR [ebx],cl
    2ea1:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2ea4:	0a 0e                	or     cl,BYTE PTR [esi]
    2ea6:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    2eab:	91                   	xchg   ecx,eax
    2eac:	74 0b                	je     2eb9 <sysEnter_Vector-0x12d147>
    2eae:	65 00 01             	add    BYTE PTR gs:[ecx],al
    2eb1:	0b 0e                	or     ecx,DWORD PTR [esi]
    2eb3:	a9 01 00 00 02       	test   eax,0x2000001
    2eb8:	91                   	xchg   ecx,eax
    2eb9:	70 0c                	jo     2ec7 <sysEnter_Vector-0x12d139>
    2ebb:	2e 0c 00             	cs or  al,0x0
    2ebe:	00 01                	add    BYTE PTR [ecx],al
    2ec0:	0c 0e                	or     al,0xe
    2ec2:	86 00                	xchg   BYTE PTR [eax],al
    2ec4:	00 00                	add    BYTE PTR [eax],al
    2ec6:	02 91 6a 0b 66 00    	add    dl,BYTE PTR [ecx+0x660b6a]
    2ecc:	01 0d 0e af 01 00    	add    DWORD PTR ds:0x1af0e,ecx
    2ed2:	00 02                	add    BYTE PTR [edx],al
    2ed4:	91                   	xchg   ecx,eax
    2ed5:	6c                   	ins    BYTE PTR es:[edi],dx
    2ed6:	0c 33                	or     al,0x33
    2ed8:	0c 00                	or     al,0x0
    2eda:	00 01                	add    BYTE PTR [ecx],al
    2edc:	0e                   	push   cs
    2edd:	0e                   	push   cs
    2ede:	92                   	xchg   edx,eax
    2edf:	00 00                	add    BYTE PTR [eax],al
    2ee1:	00 02                	add    BYTE PTR [edx],al
    2ee3:	91                   	xchg   ecx,eax
    2ee4:	64 00 05 04 7a 00 00 	add    BYTE PTR fs:0x7a04,al
    2eeb:	00 05 04 86 00 00    	add    BYTE PTR ds:0x8604,al
    2ef1:	00 05 04 92 00 00    	add    BYTE PTR ds:0x9204,al
    2ef7:	00 00                	add    BYTE PTR [eax],al
    2ef9:	1b 02                	sbb    eax,DWORD PTR [edx]
    2efb:	00 00                	add    BYTE PTR [eax],al
    2efd:	04 00                	add    al,0x0
    2eff:	65 0e                	gs push cs
    2f01:	00 00                	add    BYTE PTR [eax],al
    2f03:	04 01                	add    al,0x1
    2f05:	28 00                	sub    BYTE PTR [eax],al
    2f07:	00 00                	add    BYTE PTR [eax],al
    2f09:	0c 4e                	or     al,0x4e
    2f0b:	0c 00                	or     al,0x0
    2f0d:	00 fe                	add    dh,bh
    2f0f:	00 00                	add    BYTE PTR [eax],al
    2f11:	00 7d 2b             	add    BYTE PTR [ebp+0x2b],bh
    2f14:	00 9f 5f 00 00 00    	add    BYTE PTR [edi+0x5f],bl
    2f1a:	45                   	inc    ebp
    2f1b:	16                   	push   ss
    2f1c:	00 00                	add    BYTE PTR [eax],al
    2f1e:	02 01                	add    al,BYTE PTR [ecx]
    2f20:	08 f0                	or     al,dh
    2f22:	00 00                	add    BYTE PTR [eax],al
    2f24:	00 02                	add    BYTE PTR [edx],al
    2f26:	02 07                	add    al,BYTE PTR [edi]
    2f28:	0e                   	push   cs
    2f29:	00 00                	add    BYTE PTR [eax],al
    2f2b:	00 02                	add    BYTE PTR [edx],al
    2f2d:	04 07                	add    al,0x7
    2f2f:	e3 00                	jecxz  2f31 <sysEnter_Vector-0x12d0cf>
    2f31:	00 00                	add    BYTE PTR [eax],al
    2f33:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2f36:	de 00                	fiadd  WORD PTR [eax]
    2f38:	00 00                	add    BYTE PTR [eax],al
    2f3a:	02 01                	add    al,BYTE PTR [ecx]
    2f3c:	06                   	push   es
    2f3d:	f2 00 00             	repnz add BYTE PTR [eax],al
    2f40:	00 02                	add    BYTE PTR [edx],al
    2f42:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    2f48:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2f4f:	02 08                	add    cl,BYTE PTR [eax]
    2f51:	05 00 00 00 00       	add    eax,0x0
    2f56:	02 08                	add    cl,BYTE PTR [eax]
    2f58:	07                   	pop    es
    2f59:	d9 00                	fld    DWORD PTR [eax]
    2f5b:	00 00                	add    BYTE PTR [eax],al
    2f5d:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f64:	04 04                	add    al,0x4
    2f66:	71 00                	jno    2f68 <sysEnter_Vector-0x12d098>
    2f68:	00 00                	add    BYTE PTR [eax],al
    2f6a:	02 01                	add    al,BYTE PTR [ecx]
    2f6c:	06                   	push   es
    2f6d:	f9                   	stc    
    2f6e:	00 00                	add    BYTE PTR [eax],al
    2f70:	00 05 8f 02 00 00    	add    BYTE PTR ds:0x28f,al
    2f76:	02 56 1a             	add    dl,BYTE PTR [esi+0x1a]
    2f79:	33 00                	xor    eax,DWORD PTR [eax]
    2f7b:	00 00                	add    BYTE PTR [eax],al
    2f7d:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2f80:	5e                   	pop    esi
    2f81:	01 00                	add    DWORD PTR [eax],eax
    2f83:	00 02                	add    BYTE PTR [edx],al
    2f85:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    2f88:	00 00                	add    BYTE PTR [eax],al
    2f8a:	00 06                	add    BYTE PTR [esi],al
    2f8c:	ac                   	lods   al,BYTE PTR ds:[esi]
    2f8d:	03 00                	add    eax,DWORD PTR [eax]
    2f8f:	00 07                	add    BYTE PTR [edi],al
    2f91:	04 33                	add    al,0x33
    2f93:	00 00                	add    BYTE PTR [eax],al
    2f95:	00 03                	add    BYTE PTR [ebx],al
    2f97:	15 12 8e 01 00       	adc    eax,0x18e12
    2f9c:	00 07                	add    BYTE PTR [edi],al
    2f9e:	3e 04 00             	ds add al,0x0
    2fa1:	00 00                	add    BYTE PTR [eax],al
    2fa3:	07                   	pop    es
    2fa4:	83 04 00 00          	add    DWORD PTR [eax+eax*1],0x0
    2fa8:	01 07                	add    DWORD PTR [edi],eax
    2faa:	c5 02                	lds    eax,FWORD PTR [edx]
    2fac:	00 00                	add    BYTE PTR [eax],al
    2fae:	02 07                	add    al,BYTE PTR [edi]
    2fb0:	8f 03                	pop    DWORD PTR [ebx]
    2fb2:	00 00                	add    BYTE PTR [eax],al
    2fb4:	03 07                	add    eax,DWORD PTR [edi]
    2fb6:	ab                   	stos   DWORD PTR es:[edi],eax
    2fb7:	02 00                	add    al,BYTE PTR [eax]
    2fb9:	00 04 07             	add    BYTE PTR [edi+eax*1],al
    2fbc:	ac                   	lods   al,BYTE PTR ds:[esi]
    2fbd:	04 00                	add    al,0x0
    2fbf:	00 05 07 65 04 00    	add    BYTE PTR ds:0x46507,al
    2fc5:	00 0a                	add    BYTE PTR [edx],cl
    2fc7:	07                   	pop    es
    2fc8:	d0 03                	rol    BYTE PTR [ebx],1
    2fca:	00 00                	add    BYTE PTR [eax],al
    2fcc:	0b 07                	or     eax,DWORD PTR [edi]
    2fce:	17                   	pop    ss
    2fcf:	04 00                	add    al,0x0
    2fd1:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
    2fd4:	9d                   	popf   
    2fd5:	03 00                	add    eax,DWORD PTR [eax]
    2fd7:	00 0d 07 b6 03 00    	add    BYTE PTR ds:0x3b607,cl
    2fdd:	00 0e                	add    BYTE PTR [esi],cl
    2fdf:	07                   	pop    es
    2fe0:	b8 02 00 00 0f       	mov    eax,0xf000002
    2fe5:	07                   	pop    es
    2fe6:	f8                   	clc    
    2fe7:	03 00                	add    eax,DWORD PTR [eax]
    2fe9:	00 10                	add    BYTE PTR [eax],dl
    2feb:	07                   	pop    es
    2fec:	f1                   	icebp  
    2fed:	04 00                	add    al,0x0
    2fef:	00 11                	add    BYTE PTR [ecx],dl
    2ff1:	07                   	pop    es
    2ff2:	cf                   	iret   
    2ff3:	04 00                	add    al,0x0
    2ff5:	00 4f 07             	add    BYTE PTR [edi+0x7],cl
    2ff8:	9d                   	popf   
    2ff9:	04 00                	add    al,0x0
    2ffb:	00 50 07             	add    BYTE PTR [eax+0x7],dl
    2ffe:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    3001:	00 59 07             	add    BYTE PTR [ecx+0x7],bl
    3004:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
    3007:	00 61 07             	add    BYTE PTR [ecx+0x7],ah
    300a:	5c                   	pop    esp
    300b:	03 00                	add    eax,DWORD PTR [eax]
    300d:	00 97 08 4e 04 00    	add    BYTE PTR [edi+0x44e08],dl
    3013:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    3016:	08 24 04             	or     BYTE PTR [esp+eax*1],ah
    3019:	00 00                	add    BYTE PTR [eax],al
    301b:	64 01 08             	add    DWORD PTR fs:[eax],ecx
    301e:	0e                   	push   cs
    301f:	05 00 00 65 01       	add    eax,0x1650000
    3024:	08 38                	or     BYTE PTR [eax],bh
    3026:	03 00                	add    eax,DWORD PTR [eax]
    3028:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    302b:	08 20                	or     BYTE PTR [eax],ah
    302d:	05 00 00 67 01       	add    eax,0x1670000
    3032:	08 c3                	or     bl,al
    3034:	03 00                	add    eax,DWORD PTR [eax]
    3036:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    3039:	08 f9                	or     cl,bh
    303b:	02 00                	add    al,BYTE PTR [eax]
    303d:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    3040:	08 72 04             	or     BYTE PTR [edx+0x4],dh
    3043:	00 00                	add    BYTE PTR [eax],al
    3045:	70 01                	jo     3048 <sysEnter_Vector-0x12cfb8>
    3047:	08 4c 03 00          	or     BYTE PTR [ebx+eax*1+0x0],cl
    304b:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    304e:	08 ba 04 00 00 00    	or     BYTE PTR [edx+0x4],bh
    3054:	03 08                	add    ecx,DWORD PTR [eax]
    3056:	dd 03                	fld    QWORD PTR [ebx]
    3058:	00 00                	add    BYTE PTR [eax],al
    305a:	01 03                	add    DWORD PTR [ebx],eax
    305c:	08 ec                	or     ah,ch
    305e:	03 00                	add    eax,DWORD PTR [eax]
    3060:	00 02                	add    BYTE PTR [edx],al
    3062:	03 08                	add    ecx,DWORD PTR [eax]
    3064:	7f 03                	jg     3069 <sysEnter_Vector-0x12cf97>
    3066:	00 00                	add    BYTE PTR [eax],al
    3068:	03 03                	add    eax,DWORD PTR [ebx]
    306a:	08 d9                	or     cl,bl
    306c:	02 00                	add    al,BYTE PTR [eax]
    306e:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    3071:	08 28                	or     BYTE PTR [eax],ch
    3073:	03 00                	add    eax,DWORD PTR [eax]
    3075:	00 05 03 08 70 03    	add    BYTE PTR ds:0x3700803,al
    307b:	00 00                	add    BYTE PTR [eax],al
    307d:	06                   	push   es
    307e:	03 08                	add    ecx,DWORD PTR [eax]
    3080:	05 04 00 00 00       	add    eax,0x4
    3085:	09 00                	or     DWORD PTR [eax],eax
    3087:	09 29                	or     DWORD PTR [ecx],ebp
    3089:	01 00                	add    DWORD PTR [eax],eax
    308b:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    308e:	0c a0                	or     al,0xa0
    3090:	01 00                	add    DWORD PTR [eax],eax
    3092:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    3098:	9f                   	lahf   
    3099:	04 04                	add    al,0x4
    309b:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    309e:	00 0a                	add    BYTE PTR [edx],cl
    30a0:	3e 0c 00             	ds or  al,0x0
    30a3:	00 01                	add    BYTE PTR [ecx],al
    30a5:	0f 0d 4f 00          	prefetchw BYTE PTR [edi+0x0]
    30a9:	00 00                	add    BYTE PTR [eax],al
    30ab:	aa                   	stos   BYTE PTR es:[edi],al
    30ac:	2b 00                	sub    eax,DWORD PTR [eax]
    30ae:	9f                   	lahf   
    30af:	32 00                	xor    al,BYTE PTR [eax]
    30b1:	00 00                	add    BYTE PTR [eax],al
    30b3:	01 9c ee 01 00 00 0b 	add    DWORD PTR [esi+ebp*8+0xb000001],ebx
    30ba:	38 0c 00             	cmp    BYTE PTR [eax+eax*1],cl
    30bd:	00 01                	add    BYTE PTR [ecx],al
    30bf:	0f 16 4f 00          	movhps xmm1,QWORD PTR [edi+0x0]
    30c3:	00 00                	add    BYTE PTR [eax],al
    30c5:	02 91 00 0b 43 0c    	add    dl,BYTE PTR [ecx+0xc430b00]
    30cb:	00 00                	add    BYTE PTR [eax],al
    30cd:	01 0f                	add    DWORD PTR [edi],ecx
    30cf:	21 4f 00             	and    DWORD PTR [edi+0x0],ecx
    30d2:	00 00                	add    BYTE PTR [eax],al
    30d4:	02 91 04 0b 59 0a    	add    dl,BYTE PTR [ecx+0xa590b04]
    30da:	00 00                	add    BYTE PTR [eax],al
    30dc:	01 0f                	add    DWORD PTR [edi],ecx
    30de:	2c 4f                	sub    al,0x4f
    30e0:	00 00                	add    BYTE PTR [eax],al
    30e2:	00 02                	add    BYTE PTR [edx],al
    30e4:	91                   	xchg   ecx,eax
    30e5:	08 00                	or     BYTE PTR [eax],al
    30e7:	0a 49 0c             	or     cl,BYTE PTR [ecx+0xc]
    30ea:	00 00                	add    BYTE PTR [eax],al
    30ec:	01 0a                	add    DWORD PTR [edx],ecx
    30ee:	0d 4f 00 00 00       	or     eax,0x4f
    30f3:	7d 2b                	jge    3120 <sysEnter_Vector-0x12cee0>
    30f5:	00 9f 2d 00 00 00    	add    BYTE PTR [edi+0x2d],bl
    30fb:	01 9c 18 02 00 00 0b 	add    DWORD PTR [eax+ebx*1+0xb000002],ebx
    3102:	5d                   	pop    ebp
    3103:	0c 00                	or     al,0x0
    3105:	00 01                	add    BYTE PTR [ecx],al
    3107:	0a 16                	or     dl,BYTE PTR [esi]
    3109:	18 02                	sbb    BYTE PTR [edx],al
    310b:	00 00                	add    BYTE PTR [eax],al
    310d:	02 91 00 00 04 04    	add    dl,BYTE PTR [ecx+0x4040000]
    3113:	4f                   	dec    edi
    3114:	00 00                	add    BYTE PTR [eax],al
    3116:	00 00                	add    BYTE PTR [eax],al
    3118:	d4 05                	aam    0x5
    311a:	00 00                	add    BYTE PTR [eax],al
    311c:	04 00                	add    al,0x0
    311e:	10 0f                	adc    BYTE PTR [edi],cl
    3120:	00 00                	add    BYTE PTR [eax],al
    3122:	04 01                	add    al,0x1
    3124:	28 00                	sub    BYTE PTR [eax],al
    3126:	00 00                	add    BYTE PTR [eax],al
    3128:	0c 64                	or     al,0x64
    312a:	0c 00                	or     al,0x0
    312c:	00 fe                	add    dh,bh
    312e:	00 00                	add    BYTE PTR [eax],al
    3130:	00 dc                	add    ah,bl
    3132:	2b 00                	sub    eax,DWORD PTR [eax]
    3134:	9f                   	lahf   
    3135:	b9 05 00 00 1b       	mov    ecx,0x1b000005
    313a:	17                   	pop    ss
    313b:	00 00                	add    BYTE PTR [eax],al
    313d:	02 c8                	add    cl,al
    313f:	0d 00 00 02 19       	or     eax,0x19020000
    3144:	1e                   	push   ds
    3145:	31 00                	xor    DWORD PTR [eax],eax
    3147:	00 00                	add    BYTE PTR [eax],al
    3149:	03 be 0d 00 00 8c    	add    edi,DWORD PTR [esi-0x73fffff3]
    314f:	02 1b                	add    bl,BYTE PTR [ebx]
    3151:	0c 0f                	or     al,0xf
    3153:	01 00                	add    DWORD PTR [eax],eax
    3155:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    3158:	69 64 00 02 1d 0d 0f 	imul   esp,DWORD PTR [eax+eax*1+0x2],0x10f0d1d
    315f:	01 
    3160:	00 00                	add    BYTE PTR [eax],al
    3162:	00 05 76 06 00 00    	add    BYTE PTR ds:0x676,al
    3168:	02 1e                	add    bl,BYTE PTR [esi]
    316a:	0e                   	push   cs
    316b:	16                   	push   ss
    316c:	01 00                	add    DWORD PTR [eax],eax
    316e:	00 04 05 0f 08 00 00 	add    BYTE PTR [eax*1+0x80f],al
    3175:	02 1f                	add    bl,BYTE PTR [edi]
    3177:	0e                   	push   cs
    3178:	2d 01 00 00 2c       	sub    eax,0x2c000001
    317d:	05 0d 0e 00 00       	add    eax,0xe0d
    3182:	02 20                	add    ah,BYTE PTR [eax]
    3184:	0d 0f 01 00 00       	or     eax,0x10f
    3189:	30 04 74             	xor    BYTE PTR [esp+esi*2],al
    318c:	74 79                	je     3207 <sysEnter_Vector-0x12cdf9>
    318e:	00 02                	add    BYTE PTR [edx],al
    3190:	21 0d 0f 01 00 00    	and    DWORD PTR ds:0x10f,ecx
    3196:	34 05                	xor    al,0x5
    3198:	01 0e                	add    DWORD PTR [esi],ecx
    319a:	00 00                	add    BYTE PTR [eax],al
    319c:	02 22                	add    ah,BYTE PTR [edx]
    319e:	0d 0f 01 00 00       	or     eax,0x10f
    31a3:	38 05 63 0d 00 00    	cmp    BYTE PTR ds:0xd63,al
    31a9:	02 23                	add    ah,BYTE PTR [ebx]
    31ab:	0d 0f 01 00 00       	or     eax,0x10f
    31b0:	3c 05                	cmp    al,0x5
    31b2:	ef                   	out    dx,eax
    31b3:	09 00                	or     DWORD PTR [eax],eax
    31b5:	00 02                	add    BYTE PTR [edx],al
    31b7:	24 0d                	and    al,0xd
    31b9:	0f 01 00             	sgdtd  [eax]
    31bc:	00 40 05             	add    BYTE PTR [eax+0x5],al
    31bf:	6f                   	outs   dx,DWORD PTR ds:[esi]
    31c0:	0d 00 00 02 24       	or     eax,0x24020000
    31c5:	14 0f                	adc    al,0xf
    31c7:	01 00                	add    DWORD PTR [eax],eax
    31c9:	00 44 05 32          	add    BYTE PTR [ebp+eax*1+0x32],al
    31cd:	0d 00 00 02 24       	or     eax,0x24020000
    31d2:	1f                   	pop    ds
    31d3:	0f 01 00             	sgdtd  [eax]
    31d6:	00 48 04             	add    BYTE PTR [eax+0x4],cl
    31d9:	63 70 75             	arpl   WORD PTR [eax+0x75],si
    31dc:	00 02                	add    BYTE PTR [edx],al
    31de:	25 10 39 01 00       	and    eax,0x13910
    31e3:	00 4c 05 b4          	add    BYTE PTR [ebp+eax*1-0x4c],cl
    31e7:	09 00                	or     DWORD PTR [eax],eax
    31e9:	00 02                	add    BYTE PTR [edx],al
    31eb:	26 0d 0f 01 00 00    	es or  eax,0x10f
    31f1:	54                   	push   esp
    31f2:	05 12 0d 00 00       	add    eax,0xd12
    31f7:	02 27                	add    ah,BYTE PTR [edi]
    31f9:	0d 0f 01 00 00       	or     eax,0x10f
    31fe:	58                   	pop    eax
    31ff:	05 1e 0d 00 00       	add    eax,0xd1e
    3204:	02 28                	add    ch,BYTE PTR [eax]
    3206:	0d 0f 01 00 00       	or     eax,0x10f
    320b:	5c                   	pop    esp
    320c:	05 8e 0c 00 00       	add    eax,0xc8e
    3211:	02 29                	add    ch,BYTE PTR [ecx]
    3213:	0d 0f 01 00 00       	or     eax,0x10f
    3218:	60                   	pusha  
    3219:	05 f3 06 00 00       	add    eax,0x6f3
    321e:	02 2a                	add    ch,BYTE PTR [edx]
    3220:	0e                   	push   cs
    3221:	16                   	push   ss
    3222:	01 00                	add    DWORD PTR [eax],eax
    3224:	00 64 00 06          	add    BYTE PTR [eax+eax*1+0x6],ah
    3228:	04 05                	add    al,0x5
    322a:	69 6e 74 00 07 2d 01 	imul   ebp,DWORD PTR [esi+0x74],0x12d0700
    3231:	00 00                	add    BYTE PTR [eax],al
    3233:	26 01 00             	add    DWORD PTR es:[eax],eax
    3236:	00 08                	add    BYTE PTR [eax],cl
    3238:	26 01 00             	add    DWORD PTR es:[eax],eax
    323b:	00 27                	add    BYTE PTR [edi],ah
    323d:	00 09                	add    BYTE PTR [ecx],cl
    323f:	04 07                	add    al,0x7
    3241:	e3 00                	jecxz  3243 <sysEnter_Vector-0x12cdbd>
    3243:	00 00                	add    BYTE PTR [eax],al
    3245:	09 01                	or     DWORD PTR [ecx],eax
    3247:	06                   	push   es
    3248:	f9                   	stc    
    3249:	00 00                	add    BYTE PTR [eax],al
    324b:	00 0a                	add    BYTE PTR [edx],cl
    324d:	2d 01 00 00 09       	sub    eax,0x9000001
    3252:	08 04 63             	or     BYTE PTR [ebx+eiz*2],al
    3255:	01 00                	add    DWORD PTR [eax],eax
    3257:	00 09                	add    BYTE PTR [ecx],cl
    3259:	01 08                	add    DWORD PTR [eax],ecx
    325b:	f0 00 00             	lock add BYTE PTR [eax],al
    325e:	00 09                	add    BYTE PTR [ecx],cl
    3260:	02 07                	add    al,BYTE PTR [edi]
    3262:	0e                   	push   cs
    3263:	00 00                	add    BYTE PTR [eax],al
    3265:	00 09                	add    BYTE PTR [ecx],cl
    3267:	04 07                	add    al,0x7
    3269:	de 00                	fiadd  WORD PTR [eax]
    326b:	00 00                	add    BYTE PTR [eax],al
    326d:	09 01                	or     DWORD PTR [ecx],eax
    326f:	06                   	push   es
    3270:	f2 00 00             	repnz add BYTE PTR [eax],al
    3273:	00 09                	add    BYTE PTR [ecx],cl
    3275:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    327b:	09 08                	or     DWORD PTR [eax],ecx
    327d:	05 00 00 00 00       	add    eax,0x0
    3282:	09 08                	or     DWORD PTR [eax],ecx
    3284:	07                   	pop    es
    3285:	d9 00                	fld    DWORD PTR [eax]
    3287:	00 00                	add    BYTE PTR [eax],al
    3289:	09 04 05 05 00 00 00 	or     DWORD PTR [eax*1+0x5],eax
    3290:	0b 04 2d 01 00 00 02 	or     eax,DWORD PTR [ebp*1+0x2000001]
    3297:	10 07                	adc    BYTE PTR [edi],al
    3299:	00 00                	add    BYTE PTR [eax],al
    329b:	03 2e                	add    ebp,DWORD PTR [esi]
    329d:	18 40 01             	sbb    BYTE PTR [eax+0x1],al
    32a0:	00 00                	add    BYTE PTR [eax],al
    32a2:	02 ca                	add    cl,dl
    32a4:	05 00 00 03 31       	add    eax,0x31030000
    32a9:	19 47 01             	sbb    DWORD PTR [edi+0x1],eax
    32ac:	00 00                	add    BYTE PTR [eax],al
    32ae:	02 78 02             	add    bh,BYTE PTR [eax+0x2]
    32b1:	00 00                	add    BYTE PTR [eax],al
    32b3:	03 34 19             	add    esi,DWORD PTR [ecx+ebx*1]
    32b6:	26 01 00             	add    DWORD PTR es:[eax],eax
    32b9:	00 02                	add    BYTE PTR [edx],al
    32bb:	8f 02                	pop    DWORD PTR [edx]
    32bd:	00 00                	add    BYTE PTR [eax],al
    32bf:	03 56 1a             	add    edx,DWORD PTR [esi+0x1a]
    32c2:	26 01 00             	add    DWORD PTR es:[eax],eax
    32c5:	00 09                	add    BYTE PTR [ecx],cl
    32c7:	0c 04                	or     al,0x4
    32c9:	5e                   	pop    esi
    32ca:	01 00                	add    DWORD PTR [eax],eax
    32cc:	00 09                	add    BYTE PTR [ecx],cl
    32ce:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    32d1:	00 00                	add    BYTE PTR [eax],al
    32d3:	00 0c 29             	add    BYTE PTR [ecx+ebp*1],cl
    32d6:	01 00                	add    DWORD PTR [eax],eax
    32d8:	00 06                	add    BYTE PTR [esi],al
    32da:	33 0c ce             	xor    ecx,DWORD PTR [esi+ecx*8]
    32dd:	01 00                	add    DWORD PTR [eax],eax
    32df:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    32e5:	9f                   	lahf   
    32e6:	0b 04 78             	or     eax,DWORD PTR [eax+edi*2]
    32e9:	01 00                	add    DWORD PTR [eax],eax
    32eb:	00 02                	add    BYTE PTR [edx],al
    32ed:	79 0d                	jns    32fc <sysEnter_Vector-0x12cd04>
    32ef:	00 00                	add    BYTE PTR [eax],al
    32f1:	04 2a                	add    al,0x2a
    32f3:	16                   	push   ss
    32f4:	71 01                	jno    32f7 <sysEnter_Vector-0x12cd09>
    32f6:	00 00                	add    BYTE PTR [eax],al
    32f8:	0d 74 6d 00 2c       	or     eax,0x2c006d74
    32fd:	04 2c                	add    al,0x2c
    32ff:	0c 7c                	or     al,0x7c
    3301:	02 00                	add    al,BYTE PTR [eax]
    3303:	00 05 fa 0d 00 00    	add    BYTE PTR ds:0xdfa,al
    3309:	04 2e                	add    al,0x2e
    330b:	0b 0f                	or     ecx,DWORD PTR [edi]
    330d:	01 00                	add    DWORD PTR [eax],eax
    330f:	00 00                	add    BYTE PTR [eax],al
    3311:	05 47 0d 00 00       	add    eax,0xd47
    3316:	04 2f                	add    al,0x2f
    3318:	0b 0f                	or     ecx,DWORD PTR [edi]
    331a:	01 00                	add    DWORD PTR [eax],eax
    331c:	00 04 05 73 0c 00 00 	add    BYTE PTR [eax*1+0xc73],al
    3323:	04 30                	add    al,0x30
    3325:	0b 0f                	or     ecx,DWORD PTR [edi]
    3327:	01 00                	add    DWORD PTR [eax],eax
    3329:	00 08                	add    BYTE PTR [eax],cl
    332b:	05 db 0d 00 00       	add    eax,0xddb
    3330:	04 31                	add    al,0x31
    3332:	0b 0f                	or     ecx,DWORD PTR [edi]
    3334:	01 00                	add    DWORD PTR [eax],eax
    3336:	00 0c 05 bc 0c 00 00 	add    BYTE PTR [eax*1+0xcbc],cl
    333d:	04 32                	add    al,0x32
    333f:	0b 0f                	or     ecx,DWORD PTR [edi]
    3341:	01 00                	add    DWORD PTR [eax],eax
    3343:	00 10                	add    BYTE PTR [eax],dl
    3345:	05 d6 0c 00 00       	add    eax,0xcd6
    334a:	04 33                	add    al,0x33
    334c:	0b 0f                	or     ecx,DWORD PTR [edi]
    334e:	01 00                	add    DWORD PTR [eax],eax
    3350:	00 14 05 d3 0d 00 00 	add    BYTE PTR [eax*1+0xdd3],dl
    3357:	04 34                	add    al,0x34
    3359:	0b 0f                	or     ecx,DWORD PTR [edi]
    335b:	01 00                	add    DWORD PTR [eax],eax
    335d:	00 18                	add    BYTE PTR [eax],bl
    335f:	05 4e 0d 00 00       	add    eax,0xd4e
    3364:	04 35                	add    al,0x35
    3366:	0b 0f                	or     ecx,DWORD PTR [edi]
    3368:	01 00                	add    DWORD PTR [eax],eax
    336a:	00 1c 05 09 0d 00 00 	add    BYTE PTR [eax*1+0xd09],bl
    3371:	04 36                	add    al,0x36
    3373:	0b 0f                	or     ecx,DWORD PTR [edi]
    3375:	01 00                	add    DWORD PTR [eax],eax
    3377:	00 20                	add    BYTE PTR [eax],ah
    3379:	05 9a 0d 00 00       	add    eax,0xd9a
    337e:	04 37                	add    al,0x37
    3380:	10 71 01             	adc    BYTE PTR [ecx+0x1],dh
    3383:	00 00                	add    BYTE PTR [eax],al
    3385:	24 05                	and    al,0x5
    3387:	7b 0c                	jnp    3395 <sysEnter_Vector-0x12cc6b>
    3389:	00 00                	add    BYTE PTR [eax],al
    338b:	04 38                	add    al,0x38
    338d:	13 7c 02 00          	adc    edi,DWORD PTR [edx+eax*1+0x0]
    3391:	00 28                	add    BYTE PTR [eax],ch
    3393:	00 0b                	add    BYTE PTR [ebx],cl
    3395:	04 34                	add    al,0x34
    3397:	01 00                	add    DWORD PTR [eax],eax
    3399:	00 0e                	add    BYTE PTR [esi],cl
    339b:	b9 06 00 00 17       	mov    ecx,0x17000006
    33a0:	01 05 1f 0c 0e 03    	add    DWORD PTR ds:0x30e0c1f,eax
    33a6:	00 00                	add    BYTE PTR [eax],al
    33a8:	05 72 06 00 00       	add    eax,0x672
    33ad:	05 21 1f 0e 03       	add    eax,0x30e1f21
    33b2:	00 00                	add    BYTE PTR [eax],al
    33b4:	00 0f                	add    BYTE PTR [edi],cl
    33b6:	8b 06                	mov    eax,DWORD PTR [esi]
    33b8:	00 00                	add    BYTE PTR [eax],al
    33ba:	05 22 1f 7e 01       	add    eax,0x17e1f22
    33bf:	00 00                	add    BYTE PTR [eax],al
    33c1:	04 01                	add    al,0x1
    33c3:	0f 42 06             	cmovb  eax,DWORD PTR [esi]
    33c6:	00 00                	add    BYTE PTR [eax],al
    33c8:	05 23 1f 96 01       	add    eax,0x1961f23
    33cd:	00 00                	add    BYTE PTR [eax],al
    33cf:	05 01 0f 1b 07       	add    eax,0x71b0f01
    33d4:	00 00                	add    BYTE PTR [eax],al
    33d6:	05 24 1f 96 01       	add    eax,0x1961f24
    33db:	00 00                	add    BYTE PTR [eax],al
    33dd:	09 01                	or     DWORD PTR [ecx],eax
    33df:	0f 4a 06             	cmovp  eax,DWORD PTR [esi]
    33e2:	00 00                	add    BYTE PTR [eax],al
    33e4:	05 25 1f 8a 01       	add    eax,0x18a1f25
    33e9:	00 00                	add    BYTE PTR [eax],al
    33eb:	0d 01 0f 62 05       	or     eax,0x5620f01
    33f0:	00 00                	add    BYTE PTR [eax],al
    33f2:	05 26 1f 8a 01       	add    eax,0x18a1f26
    33f7:	00 00                	add    BYTE PTR [eax],al
    33f9:	0f 01 0f             	sidtd  [edi]
    33fc:	d3 05 00 00 05 27    	rol    DWORD PTR ds:0x27050000,cl
    3402:	1f                   	pop    ds
    3403:	8a 01                	mov    al,BYTE PTR [ecx]
    3405:	00 00                	add    BYTE PTR [eax],al
    3407:	11 01                	adc    DWORD PTR [ecx],eax
    3409:	0f b5 05 00 00 05 28 	lgs    eax,FWORD PTR ds:0x28050000
    3410:	1f                   	pop    ds
    3411:	8a 01                	mov    al,BYTE PTR [ecx]
    3413:	00 00                	add    BYTE PTR [eax],al
    3415:	13 01                	adc    eax,DWORD PTR [ecx]
    3417:	0f ec 06             	paddsb mm0,QWORD PTR [esi]
    341a:	00 00                	add    BYTE PTR [eax],al
    341c:	05 29 1f 8a 01       	add    eax,0x18a1f29
    3421:	00 00                	add    BYTE PTR [eax],al
    3423:	15 01 00 07 2d       	adc    eax,0x2d070001
    3428:	01 00                	add    DWORD PTR [eax],eax
    342a:	00 1f                	add    BYTE PTR [edi],bl
    342c:	03 00                	add    eax,DWORD PTR [eax]
    342e:	00 10                	add    BYTE PTR [eax],dl
    3430:	26 01 00             	add    DWORD PTR es:[eax],eax
    3433:	00 03                	add    BYTE PTR [ebx],al
    3435:	01 00                	add    DWORD PTR [eax],eax
    3437:	02 92 06 00 00 05    	add    dl,BYTE PTR [edx+0x5000006]
    343d:	32 1d 82 02 00 00    	xor    bl,BYTE PTR ds:0x282
    3443:	0c 47                	or     al,0x47
    3445:	02 00                	add    al,BYTE PTR [eax]
    3447:	00 05 35 10 3d 03    	add    BYTE PTR ds:0x33d1035,al
    344d:	00 00                	add    BYTE PTR [eax],al
    344f:	05 03 30 7f 00       	add    eax,0x7f3003
    3454:	9f                   	lahf   
    3455:	0b 04 a2             	or     eax,DWORD PTR [edx+eiz*4]
    3458:	01 00                	add    DWORD PTR [eax],eax
    345a:	00 0c 99             	add    BYTE PTR [ecx+ebx*4],cl
    345d:	02 00                	add    al,BYTE PTR [eax]
    345f:	00 05 36 0e 96 01    	add    BYTE PTR ds:0x1960e36,al
    3465:	00 00                	add    BYTE PTR [eax],al
    3467:	05 03 2c 7f 00       	add    eax,0x7f2c03
    346c:	9f                   	lahf   
    346d:	09 01                	or     DWORD PTR [ecx],eax
    346f:	02 ab 06 00 00 11    	add    ch,BYTE PTR [ebx+0x11000006]
    3475:	c3                   	ret    
    3476:	0c 00                	or     al,0x0
    3478:	00 01                	add    BYTE PTR [ecx],al
    347a:	63 0e                	arpl   WORD PTR [esi],cx
    347c:	6a 2f                	push   0x2f
    347e:	00 9f 2b 02 00 00    	add    BYTE PTR [edi+0x22b],bl
    3484:	01 9c 5a 04 00 00 12 	add    DWORD PTR [edx+ebx*2+0x12000004],ebx
    348b:	f1                   	icebp  
    348c:	0c 00                	or     al,0x0
    348e:	00 01                	add    BYTE PTR [ecx],al
    3490:	63 2e                	arpl   WORD PTR [esi],bp
    3492:	5a                   	pop    edx
    3493:	04 00                	add    al,0x0
    3495:	00 02                	add    BYTE PTR [edx],al
    3497:	91                   	xchg   ecx,eax
    3498:	00 12                	add    BYTE PTR [edx],dl
    349a:	b0 0d                	mov    al,0xd
    349c:	00 00                	add    BYTE PTR [eax],al
    349e:	01 63 3b             	add    DWORD PTR [ebx+0x3b],esp
    34a1:	0f 01 00             	sgdtd  [eax]
    34a4:	00 02                	add    BYTE PTR [edx],al
    34a6:	91                   	xchg   ecx,eax
    34a7:	04 12                	add    al,0x12
    34a9:	de 0c 00             	fimul  WORD PTR [eax+eax*1]
    34ac:	00 01                	add    BYTE PTR [ecx],al
    34ae:	63 4e 0f             	arpl   WORD PTR [esi+0xf],cx
    34b1:	01 00                	add    DWORD PTR [eax],eax
    34b3:	00 02                	add    BYTE PTR [edx],al
    34b5:	91                   	xchg   ecx,eax
    34b6:	08 13                	or     BYTE PTR [ebx],dl
    34b8:	a2 0c 00 00 01       	mov    ds:0x100000c,al
    34bd:	65 18 66 04          	sbb    BYTE PTR gs:[esi+0x4],ah
    34c1:	00 00                	add    BYTE PTR [eax],al
    34c3:	05 03 ac 7f 00       	add    eax,0x7fac03
    34c8:	9f                   	lahf   
    34c9:	13 5d 05             	adc    ebx,DWORD PTR [ebp+0x5]
    34cc:	00 00                	add    BYTE PTR [eax],al
    34ce:	01 6a 0a             	add    DWORD PTR [edx+0xa],ebp
    34d1:	6c                   	ins    BYTE PTR es:[edi],dx
    34d2:	04 00                	add    al,0x0
    34d4:	00 03                	add    BYTE PTR [ebx],al
    34d6:	91                   	xchg   ecx,eax
    34d7:	d8 7e 13             	fdivr  DWORD PTR [esi+0x13]
    34da:	3d 0d 00 00 01       	cmp    eax,0x100000d
    34df:	6b 09 0f             	imul   ecx,DWORD PTR [ecx],0xf
    34e2:	01 00                	add    DWORD PTR [eax],eax
    34e4:	00 02                	add    BYTE PTR [edx],al
    34e6:	91                   	xchg   ecx,eax
    34e7:	68 13 83 0c 00       	push   0xc8313
    34ec:	00 01                	add    BYTE PTR [ecx],al
    34ee:	6c                   	ins    BYTE PTR es:[edi],dx
    34ef:	0a 7c 04 00          	or     bh,BYTE PTR [esp+eax*1+0x0]
    34f3:	00 03                	add    BYTE PTR [ebx],al
    34f5:	91                   	xchg   ecx,eax
    34f6:	d8 7c 13 8c          	fdivr  DWORD PTR [ebx+edx*1-0x74]
    34fa:	0d 00 00 01 6d       	or     eax,0x6d010000
    34ff:	11 60 04             	adc    DWORD PTR [eax+0x4],esp
    3502:	00 00                	add    BYTE PTR [eax],al
    3504:	02 91 58 14 c5 2f    	add    dl,BYTE PTR [ecx+0x2fc51458]
    350a:	00 9f c7 01 00 00    	add    BYTE PTR [edi+0x1c7],bl
    3510:	15 63 6e 74 00       	adc    eax,0x746e63
    3515:	01 6f 0e             	add    DWORD PTR [edi+0xe],ebp
    3518:	0f 01 00             	sgdtd  [eax]
    351b:	00 02                	add    BYTE PTR [edx],al
    351d:	91                   	xchg   ecx,eax
    351e:	6c                   	ins    BYTE PTR es:[edi],dx
    351f:	14 f1                	adc    al,0xf1
    3521:	2f                   	das    
    3522:	00 9f 8b 01 00 00    	add    BYTE PTR [edi+0x18b],bl
    3528:	13 30                	adc    esi,DWORD PTR [eax]
    352a:	07                   	pop    es
    352b:	00 00                	add    BYTE PTR [eax],al
    352d:	01 78 12             	add    DWORD PTR [eax+0x12],edi
    3530:	8c 04 00             	mov    WORD PTR [eax+eax*1],es
    3533:	00 02                	add    BYTE PTR [edx],al
    3535:	91                   	xchg   ecx,eax
    3536:	64 14 8e             	fs adc al,0x8e
    3539:	30 00                	xor    BYTE PTR [eax],al
    353b:	9f                   	lahf   
    353c:	ed                   	in     eax,dx
    353d:	00 00                	add    BYTE PTR [eax],al
    353f:	00 13                	add    BYTE PTR [ebx],dl
    3541:	01 09                	add    DWORD PTR [ecx],ecx
    3543:	00 00                	add    BYTE PTR [eax],al
    3545:	01 7e 17             	add    DWORD PTR [esi+0x17],edi
    3548:	78 01                	js     354b <sysEnter_Vector-0x12cab5>
    354a:	00 00                	add    BYTE PTR [eax],al
    354c:	02 91 60 15 70 69    	add    dl,BYTE PTR [ecx+0x69701560]
    3552:	64 00 01             	add    BYTE PTR fs:[ecx],al
    3555:	7f 16                	jg     356d <sysEnter_Vector-0x12ca93>
    3557:	92                   	xchg   edx,eax
    3558:	04 00                	add    al,0x0
    355a:	00 03                	add    BYTE PTR [ebx],al
    355c:	91                   	xchg   ecx,eax
    355d:	d0 7c 13 95          	sar    BYTE PTR [ebx+edx*1-0x6b],1
    3561:	0d 00 00 01 81       	or     eax,0x81010000
    3566:	15 0f 01 00 00       	adc    eax,0x10f
    356b:	02 91 5c 00 00 00    	add    dl,BYTE PTR [ecx+0x5c]
    3571:	00 0b                	add    BYTE PTR [ebx],cl
    3573:	04 60                	add    al,0x60
    3575:	04 00                	add    al,0x0
    3577:	00 0b                	add    BYTE PTR [ebx],cl
    3579:	04 25                	add    al,0x25
    357b:	00 00                	add    BYTE PTR [eax],al
    357d:	00 0b                	add    BYTE PTR [ebx],cl
    357f:	04 1f                	add    al,0x1f
    3581:	03 00                	add    eax,DWORD PTR [eax]
    3583:	00 07                	add    BYTE PTR [edi],al
    3585:	2d 01 00 00 7c       	sub    eax,0x7c000001
    358a:	04 00                	add    al,0x0
    358c:	00 08                	add    BYTE PTR [eax],cl
    358e:	26 01 00             	add    DWORD PTR es:[eax],eax
    3591:	00 7f 00             	add    BYTE PTR [edi+0x0],bh
    3594:	07                   	pop    es
    3595:	2d 01 00 00 8c       	sub    eax,0x8c000001
    359a:	04 00                	add    al,0x0
    359c:	00 08                	add    BYTE PTR [eax],cl
    359e:	26 01 00             	add    DWORD PTR es:[eax],eax
    35a1:	00 ff                	add    bh,bh
    35a3:	00 0b                	add    BYTE PTR [ebx],cl
    35a5:	04 0f                	add    al,0xf
    35a7:	01 00                	add    DWORD PTR [eax],eax
    35a9:	00 07                	add    BYTE PTR [edi],al
    35ab:	2d 01 00 00 a2       	sub    eax,0xa2000001
    35b0:	04 00                	add    al,0x0
    35b2:	00 08                	add    BYTE PTR [eax],cl
    35b4:	26 01 00             	add    DWORD PTR es:[eax],eax
    35b7:	00 07                	add    BYTE PTR [edi],al
    35b9:	00 16                	add    BYTE PTR [esi],dl
    35bb:	ad                   	lods   eax,DWORD PTR ds:[esi]
    35bc:	0c 00                	or     al,0x0
    35be:	00 01                	add    BYTE PTR [ecx],al
    35c0:	5e                   	pop    esi
    35c1:	15 60 04 00 00       	adc    eax,0x460
    35c6:	41                   	inc    ecx
    35c7:	2f                   	das    
    35c8:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    35ce:	01 9c db 04 00 00 12 	add    DWORD PTR [ebx+ebx*8+0x12000004],ebx
    35d5:	29 0d 00 00 01 5e    	sub    DWORD PTR ds:0x5e010000,ecx
    35db:	30 60 04             	xor    BYTE PTR [eax+0x4],ah
    35de:	00 00                	add    BYTE PTR [eax],al
    35e0:	02 91 00 12 e8 0c    	add    dl,BYTE PTR [ecx+0xce81200]
    35e6:	00 00                	add    BYTE PTR [eax],al
    35e8:	01 5e 40             	add    DWORD PTR [esi+0x40],ebx
    35eb:	78 01                	js     35ee <sysEnter_Vector-0x12ca12>
    35ed:	00 00                	add    BYTE PTR [eax],al
    35ef:	02 91 04 00 16 f9    	add    dl,BYTE PTR [ecx-0x6e9fffc]
    35f5:	0c 00                	or     al,0x0
    35f7:	00 01                	add    BYTE PTR [ecx],al
    35f9:	10 0d 60 04 00 00    	adc    BYTE PTR ds:0x460,cl
    35ff:	dc 2b                	fsubr  QWORD PTR [ebx]
    3601:	00 9f 65 03 00 00    	add    BYTE PTR [edi+0x365],bl
    3607:	01 9c bb 05 00 00 12 	add    DWORD PTR [ebx+edi*4+0x12000005],ebx
    360e:	29 0d 00 00 01 10    	sub    DWORD PTR ds:0x10010000,ecx
    3614:	29 60 04             	sub    DWORD PTR [eax+0x4],esp
    3617:	00 00                	add    BYTE PTR [eax],al
    3619:	02 91 00 12 e8 0c    	add    dl,BYTE PTR [ecx+0xce81200]
    361f:	00 00                	add    BYTE PTR [eax],al
    3621:	01 10                	add    DWORD PTR [eax],edx
    3623:	39 78 01             	cmp    DWORD PTR [eax+0x1],edi
    3626:	00 00                	add    BYTE PTR [eax],al
    3628:	02 91 04 12 e3 0d    	add    dl,BYTE PTR [ecx+0xde31204]
    362e:	00 00                	add    BYTE PTR [eax],al
    3630:	01 10                	add    DWORD PTR [eax],edx
    3632:	47                   	inc    edi
    3633:	0f 01 00             	sgdtd  [eax]
    3636:	00 02                	add    BYTE PTR [edx],al
    3638:	91                   	xchg   ecx,eax
    3639:	08 13                	or     BYTE PTR [ebx],dl
    363b:	bd 01 00 00 01       	mov    ebp,0x1000001
    3640:	12 0a                	adc    cl,BYTE PTR [edx]
    3642:	bb 05 00 00 02       	mov    ebx,0x2000005
    3647:	91                   	xchg   ecx,eax
    3648:	60                   	pusha  
    3649:	13 a5 06 00 00 01    	adc    esp,DWORD PTR [ebp+0x1000006]
    364f:	13 0b                	adc    ecx,DWORD PTR [ebx]
    3651:	78 01                	js     3654 <sysEnter_Vector-0x12c9ac>
    3653:	00 00                	add    BYTE PTR [eax],al
    3655:	02 91 6c 13 a4 0d    	add    dl,BYTE PTR [ecx+0xda4136c]
    365b:	00 00                	add    BYTE PTR [eax],al
    365d:	01 14 09             	add    DWORD PTR [ecx+ecx*1],edx
    3660:	0f 01 00             	sgdtd  [eax]
    3663:	00 02                	add    BYTE PTR [edx],al
    3665:	91                   	xchg   ecx,eax
    3666:	68 15 70 69 64       	push   0x64697015
    366b:	00 01                	add    BYTE PTR [ecx],al
    366d:	15 09 0f 01 00       	adc    eax,0x10f09
    3672:	00 02                	add    BYTE PTR [edx],al
    3674:	91                   	xchg   ecx,eax
    3675:	64 13 76 06          	adc    esi,DWORD PTR fs:[esi+0x6]
    3679:	00 00                	add    BYTE PTR [eax],al
    367b:	01 16                	add    DWORD PTR [esi],edx
    367d:	0a cb                	or     cl,bl
    367f:	05 00 00 03 91       	add    eax,0x91030000
    3684:	fc                   	cld    
    3685:	7e 13                	jle    369a <sysEnter_Vector-0x12c966>
    3687:	80 0d 00 00 01 16 15 	or     BYTE PTR ds:0x16010000,0x15
    368e:	cb                   	retf   
    368f:	05 00 00 03 91       	add    eax,0x91030000
    3694:	98                   	cwde   
    3695:	7e 13                	jle    36aa <sysEnter_Vector-0x12c956>
    3697:	86 0d 00 00 01 16    	xchg   BYTE PTR ds:0x16010000,cl
    369d:	21 cb                	and    ebx,ecx
    369f:	05 00 00 03 91       	add    eax,0x91030000
    36a4:	b4 7d                	mov    ah,0x7d
    36a6:	13 eb                	adc    ebp,ebx
    36a8:	0c 00                	or     al,0x0
    36aa:	00 01                	add    BYTE PTR [ecx],al
    36ac:	17                   	pop    ss
    36ad:	16                   	push   ss
    36ae:	e0 01                	loopne 36b1 <sysEnter_Vector-0x12c94f>
    36b0:	00 00                	add    BYTE PTR [eax],al
    36b2:	05 03 80 7f 00       	add    eax,0x7f8003
    36b7:	9f                   	lahf   
    36b8:	14 79                	adc    al,0x79
    36ba:	2c 00                	sub    al,0x0
    36bc:	9f                   	lahf   
    36bd:	9c                   	pushf  
    36be:	02 00                	add    al,BYTE PTR [eax]
    36c0:	00 13                	add    BYTE PTR [ebx],dl
    36c2:	56                   	push   esi
    36c3:	0d 00 00 01 45       	or     eax,0x45010000
    36c8:	18 d4                	sbb    ah,dl
    36ca:	01 00                	add    DWORD PTR [eax],eax
    36cc:	00 03                	add    BYTE PTR [ebx],al
    36ce:	91                   	xchg   ecx,eax
    36cf:	b0 7d                	mov    al,0x7d
    36d1:	00 00                	add    BYTE PTR [eax],al
    36d3:	07                   	pop    es
    36d4:	2d 01 00 00 cb       	sub    eax,0xcb000001
    36d9:	05 00 00 08 26       	add    eax,0x26080000
    36de:	01 00                	add    DWORD PTR [eax],eax
    36e0:	00 03                	add    BYTE PTR [ebx],al
    36e2:	00 17                	add    BYTE PTR [edi],dl
    36e4:	2d 01 00 00 08       	sub    eax,0x8000001
    36e9:	26 01 00             	add    DWORD PTR es:[eax],eax
    36ec:	00 63 00             	add    BYTE PTR [ebx+0x0],ah
    36ef:	00 ec                	add    ah,ch
    36f1:	03 00                	add    eax,DWORD PTR [eax]
    36f3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    36f6:	6a 10                	push   0x10
    36f8:	00 00                	add    BYTE PTR [eax],al
    36fa:	04 01                	add    al,0x1
    36fc:	28 00                	sub    BYTE PTR [eax],al
    36fe:	00 00                	add    BYTE PTR [eax],al
    3700:	0c 2c                	or     al,0x2c
    3702:	0e                   	push   cs
    3703:	00 00                	add    BYTE PTR [eax],al
    3705:	fe 00                	inc    BYTE PTR [eax]
    3707:	00 00                	add    BYTE PTR [eax],al
    3709:	95                   	xchg   ebp,eax
    370a:	31 00                	xor    DWORD PTR [eax],eax
    370c:	9f                   	lahf   
    370d:	5b                   	pop    ebx
    370e:	07                   	pop    es
    370f:	00 00                	add    BYTE PTR [eax],al
    3711:	4c                   	dec    esp
    3712:	19 00                	sbb    DWORD PTR [eax],eax
    3714:	00 02                	add    BYTE PTR [edx],al
    3716:	07                   	pop    es
    3717:	09 00                	or     DWORD PTR [eax],eax
    3719:	00 02                	add    BYTE PTR [edx],al
    371b:	28 1b                	sub    BYTE PTR [ebx],bl
    371d:	31 00                	xor    DWORD PTR [eax],eax
    371f:	00 00                	add    BYTE PTR [eax],al
    3721:	03 04 36             	add    eax,DWORD PTR [esi+esi*1]
    3724:	08 00                	or     BYTE PTR [eax],al
    3726:	00 3b                	add    BYTE PTR [ebx],bh
    3728:	00 00                	add    BYTE PTR [eax],al
    372a:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    372d:	06                   	push   es
    372e:	f9                   	stc    
    372f:	00 00                	add    BYTE PTR [eax],al
    3731:	00 05 3b 00 00 00    	add    BYTE PTR ds:0x3b,al
    3737:	02 0e                	add    cl,BYTE PTR [esi]
    3739:	09 00                	or     DWORD PTR [eax],eax
    373b:	00 02                	add    BYTE PTR [edx],al
    373d:	63 18                	arpl   WORD PTR [eax],bx
    373f:	25 00 00 00 04       	and    eax,0x4000000
    3744:	01 08                	add    DWORD PTR [eax],ecx
    3746:	f0 00 00             	lock add BYTE PTR [eax],al
    3749:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    374c:	07                   	pop    es
    374d:	0e                   	push   cs
    374e:	00 00                	add    BYTE PTR [eax],al
    3750:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3753:	07                   	pop    es
    3754:	e3 00                	jecxz  3756 <sysEnter_Vector-0x12c8aa>
    3756:	00 00                	add    BYTE PTR [eax],al
    3758:	04 04                	add    al,0x4
    375a:	07                   	pop    es
    375b:	de 00                	fiadd  WORD PTR [eax]
    375d:	00 00                	add    BYTE PTR [eax],al
    375f:	04 01                	add    al,0x1
    3761:	06                   	push   es
    3762:	f2 00 00             	repnz add BYTE PTR [eax],al
    3765:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    3768:	05 6a 01 00 00       	add    eax,0x16a
    376d:	06                   	push   es
    376e:	04 05                	add    al,0x5
    3770:	69 6e 74 00 04 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080400
    3777:	00 00                	add    BYTE PTR [eax],al
    3779:	00 00                	add    BYTE PTR [eax],al
    377b:	04 08                	add    al,0x8
    377d:	07                   	pop    es
    377e:	d9 00                	fld    DWORD PTR [eax]
    3780:	00 00                	add    BYTE PTR [eax],al
    3782:	04 04                	add    al,0x4
    3784:	05 05 00 00 00       	add    eax,0x5
    3789:	07                   	pop    es
    378a:	04 3b                	add    al,0x3b
    378c:	00 00                	add    BYTE PTR [eax],al
    378e:	00 04 0c             	add    BYTE PTR [esp+ecx*1],al
    3791:	04 5e                	add    al,0x5e
    3793:	01 00                	add    DWORD PTR [eax],eax
    3795:	00 04 10             	add    BYTE PTR [eax+edx*1],al
    3798:	04 cf                	add    al,0xcf
    379a:	00 00                	add    BYTE PTR [eax],al
    379c:	00 08                	add    BYTE PTR [eax],cl
    379e:	29 01                	sub    DWORD PTR [ecx],eax
    37a0:	00 00                	add    BYTE PTR [eax],al
    37a2:	03 33                	add    esi,DWORD PTR [ebx]
    37a4:	0c bf                	or     al,0xbf
    37a6:	00 00                	add    BYTE PTR [eax],al
    37a8:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    37ae:	9f                   	lahf   
    37af:	07                   	pop    es
    37b0:	04 99                	add    al,0x99
    37b2:	00 00                	add    BYTE PTR [eax],al
    37b4:	00 09                	add    BYTE PTR [ecx],cl
    37b6:	80 0e 00             	or     BYTE PTR [esi],0x0
    37b9:	00 01                	add    BYTE PTR [ecx],al
    37bb:	21 01                	and    DWORD PTR [ecx],eax
    37bd:	0d 7d 00 00 00       	or     eax,0x7d
    37c2:	b9 38 00 9f 37       	mov    ecx,0x379f0038
    37c7:	00 00                	add    BYTE PTR [eax],al
    37c9:	00 01                	add    BYTE PTR [ecx],al
    37cb:	9c                   	pushf  
    37cc:	20 01                	and    BYTE PTR [ecx],al
    37ce:	00 00                	add    BYTE PTR [eax],al
    37d0:	0a 62 75             	or     ah,BYTE PTR [edx+0x75]
    37d3:	66 00 01             	data16 add BYTE PTR [ecx],al
    37d6:	21 01                	and    DWORD PTR [ecx],eax
    37d8:	1b 99 00 00 00 02    	sbb    ebx,DWORD PTR [ecx+0x2000000]
    37de:	91                   	xchg   ecx,eax
    37df:	00 0a                	add    BYTE PTR [edx],cl
    37e1:	66 6d                	ins    WORD PTR es:[edi],dx
    37e3:	74 00                	je     37e5 <sysEnter_Vector-0x12c81b>
    37e5:	01 21                	add    DWORD PTR [ecx],esp
    37e7:	01 2c 20             	add    DWORD PTR [eax+eiz*1],ebp
    37ea:	01 00                	add    DWORD PTR [eax],eax
    37ec:	00 02                	add    BYTE PTR [edx],al
    37ee:	91                   	xchg   ecx,eax
    37ef:	04 0b                	add    al,0xb
    37f1:	0c ca                	or     al,0xca
    37f3:	09 00                	or     DWORD PTR [eax],eax
    37f5:	00 01                	add    BYTE PTR [ecx],al
    37f7:	23 01                	and    eax,DWORD PTR [ecx]
    37f9:	0a 47 00             	or     al,BYTE PTR [edi+0x0]
    37fc:	00 00                	add    BYTE PTR [eax],al
    37fe:	02 91 68 0d 69 00    	add    dl,BYTE PTR [ecx+0x690d68]
    3804:	01 24 01             	add    DWORD PTR [ecx+eax*1],esp
    3807:	06                   	push   es
    3808:	7d 00                	jge    380a <sysEnter_Vector-0x12c7f6>
    380a:	00 00                	add    BYTE PTR [eax],al
    380c:	02 91 6c 00 07 04    	add    dl,BYTE PTR [ecx+0x407006c]
    3812:	42                   	inc    edx
    3813:	00 00                	add    BYTE PTR [eax],al
    3815:	00 09                	add    BYTE PTR [ecx],cl
    3817:	1c 0e                	sbb    al,0xe
    3819:	00 00                	add    BYTE PTR [eax],al
    381b:	01 16                	add    DWORD PTR [esi],edx
    381d:	01 05 7d 00 00 00    	add    DWORD PTR ds:0x7d,eax
    3823:	82 38 00             	cmp    BYTE PTR [eax],0x0
    3826:	9f                   	lahf   
    3827:	37                   	aaa    
    3828:	00 00                	add    BYTE PTR [eax],al
    382a:	00 01                	add    BYTE PTR [ecx],al
    382c:	9c                   	pushf  
    382d:	81 01 00 00 0a 62    	add    DWORD PTR [ecx],0x620a0000
    3833:	75 66                	jne    389b <sysEnter_Vector-0x12c765>
    3835:	00 01                	add    BYTE PTR [ecx],al
    3837:	16                   	push   ss
    3838:	01 14 99             	add    DWORD PTR [ecx+ebx*4],edx
    383b:	00 00                	add    BYTE PTR [eax],al
    383d:	00 02                	add    BYTE PTR [edx],al
    383f:	91                   	xchg   ecx,eax
    3840:	00 0a                	add    BYTE PTR [edx],cl
    3842:	66 6d                	ins    WORD PTR es:[edi],dx
    3844:	74 00                	je     3846 <sysEnter_Vector-0x12c7ba>
    3846:	01 16                	add    DWORD PTR [esi],edx
    3848:	01 25 20 01 00 00    	add    DWORD PTR ds:0x120,esp
    384e:	02 91 04 0b 0c ca    	add    dl,BYTE PTR [ecx-0x35f3f4fc]
    3854:	09 00                	or     DWORD PTR [eax],eax
    3856:	00 01                	add    BYTE PTR [ecx],al
    3858:	18 01                	sbb    BYTE PTR [ecx],al
    385a:	0a 47 00             	or     al,BYTE PTR [edi+0x0]
    385d:	00 00                	add    BYTE PTR [eax],al
    385f:	02 91 68 0d 69 00    	add    dl,BYTE PTR [ecx+0x690d68]
    3865:	01 19                	add    DWORD PTR [ecx],ebx
    3867:	01 06                	add    DWORD PTR [esi],eax
    3869:	7d 00                	jge    386b <sysEnter_Vector-0x12c795>
    386b:	00 00                	add    BYTE PTR [eax],al
    386d:	02 91 6c 00 0e 7f    	add    dl,BYTE PTR [ecx+0x7f0e006c]
    3873:	0e                   	push   cs
    3874:	00 00                	add    BYTE PTR [eax],al
    3876:	01 69 05             	add    DWORD PTR [ecx+0x5],ebp
    3879:	7d 00                	jge    387b <sysEnter_Vector-0x12c785>
    387b:	00 00                	add    BYTE PTR [eax],al
    387d:	38 34 00             	cmp    BYTE PTR [eax+eax*1],dh
    3880:	9f                   	lahf   
    3881:	4a                   	dec    edx
    3882:	04 00                	add    al,0x0
    3884:	00 01                	add    BYTE PTR [ecx],al
    3886:	9c                   	pushf  
    3887:	9b                   	fwait
    3888:	02 00                	add    al,BYTE PTR [eax]
    388a:	00 0f                	add    BYTE PTR [edi],cl
    388c:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    388f:	00 01                	add    BYTE PTR [ecx],al
    3891:	69 14 99 00 00 00 02 	imul   edx,DWORD PTR [ecx+ebx*4],0x2000000
    3898:	91                   	xchg   ecx,eax
    3899:	00 0f                	add    BYTE PTR [edi],cl
    389b:	66 6d                	ins    WORD PTR es:[edi],dx
    389d:	74 00                	je     389f <sysEnter_Vector-0x12c761>
    389f:	01 69 25             	add    DWORD PTR [ecx+0x25],ebp
    38a2:	20 01                	and    BYTE PTR [ecx],al
    38a4:	00 00                	add    BYTE PTR [eax],al
    38a6:	02 91 04 10 ca 09    	add    dl,BYTE PTR [ecx+0x9ca1004]
    38ac:	00 00                	add    BYTE PTR [eax],al
    38ae:	01 69 32             	add    DWORD PTR [ecx+0x32],ebp
    38b1:	47                   	inc    edi
    38b2:	00 00                	add    BYTE PTR [eax],al
    38b4:	00 02                	add    BYTE PTR [edx],al
    38b6:	91                   	xchg   ecx,eax
    38b7:	08 11                	or     BYTE PTR [ecx],dl
    38b9:	6c                   	ins    BYTE PTR es:[edi],dx
    38ba:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    38bc:	00 01                	add    BYTE PTR [ecx],al
    38be:	6b 06 7d             	imul   eax,DWORD PTR [esi],0x7d
    38c1:	00 00                	add    BYTE PTR [eax],al
    38c3:	00 02                	add    BYTE PTR [edx],al
    38c5:	91                   	xchg   ecx,eax
    38c6:	6c                   	ins    BYTE PTR es:[edi],dx
    38c7:	11 6e 75             	adc    DWORD PTR [esi+0x75],ebp
    38ca:	6d                   	ins    DWORD PTR es:[edi],dx
    38cb:	00 01                	add    BYTE PTR [ecx],al
    38cd:	6c                   	ins    BYTE PTR es:[edi],dx
    38ce:	10 68 00             	adc    BYTE PTR [eax+0x0],ch
    38d1:	00 00                	add    BYTE PTR [eax],al
    38d3:	02 91 68 11 69 00    	add    dl,BYTE PTR [ecx+0x691168]
    38d9:	01 6d 06             	add    DWORD PTR [ebp+0x6],ebp
    38dc:	7d 00                	jge    38de <sysEnter_Vector-0x12c722>
    38de:	00 00                	add    BYTE PTR [eax],al
    38e0:	02 91 64 12 3a 0e    	add    dl,BYTE PTR [ecx+0xe3a1264]
    38e6:	00 00                	add    BYTE PTR [eax],al
    38e8:	01 6d 09             	add    DWORD PTR [ebp+0x9],ebp
    38eb:	7d 00                	jge    38ed <sysEnter_Vector-0x12c713>
    38ed:	00 00                	add    BYTE PTR [eax],al
    38ef:	02 91 60 11 73 74    	add    dl,BYTE PTR [ecx+0x74731160]
    38f5:	72 00                	jb     38f7 <sysEnter_Vector-0x12c709>
    38f7:	01 6e 08             	add    DWORD PTR [esi+0x8],ebp
    38fa:	99                   	cdq    
    38fb:	00 00                	add    BYTE PTR [eax],al
    38fd:	00 02                	add    BYTE PTR [edx],al
    38ff:	91                   	xchg   ecx,eax
    3900:	5c                   	pop    esp
    3901:	11 73 00             	adc    DWORD PTR [ebx+0x0],esi
    3904:	01 6f 0e             	add    DWORD PTR [edi+0xe],ebp
    3907:	20 01                	and    BYTE PTR [ecx],al
    3909:	00 00                	add    BYTE PTR [eax],al
    390b:	02 91 58 12 59 0a    	add    dl,BYTE PTR [ecx+0xa591258]
    3911:	00 00                	add    BYTE PTR [eax],al
    3913:	01 71 06             	add    DWORD PTR [ecx+0x6],esi
    3916:	7d 00                	jge    3918 <sysEnter_Vector-0x12c6e8>
    3918:	00 00                	add    BYTE PTR [eax],al
    391a:	02 91 54 12 6d 0e    	add    dl,BYTE PTR [ecx+0xe6d1254]
    3920:	00 00                	add    BYTE PTR [eax],al
    3922:	01 73 06             	add    DWORD PTR [ebx+0x6],esi
    3925:	7d 00                	jge    3927 <sysEnter_Vector-0x12c6d9>
    3927:	00 00                	add    BYTE PTR [eax],al
    3929:	02 91 50 12 57 0e    	add    dl,BYTE PTR [ecx+0xe571250]
    392f:	00 00                	add    BYTE PTR [eax],al
    3931:	01 74 06 7d          	add    DWORD PTR [esi+eax*1+0x7d],esi
    3935:	00 00                	add    BYTE PTR [eax],al
    3937:	00 02                	add    BYTE PTR [edx],al
    3939:	91                   	xchg   ecx,eax
    393a:	4c                   	dec    esp
    393b:	12 3f                	adc    bh,BYTE PTR [edi]
    393d:	0e                   	push   cs
    393e:	00 00                	add    BYTE PTR [eax],al
    3940:	01 76 06             	add    DWORD PTR [esi+0x6],esi
    3943:	7d 00                	jge    3945 <sysEnter_Vector-0x12c6bb>
    3945:	00 00                	add    BYTE PTR [eax],al
    3947:	02 91 48 13 49 0e    	add    dl,BYTE PTR [ecx+0xe491348]
    394d:	00 00                	add    BYTE PTR [eax],al
    394f:	01 80 08 80 34 00    	add    DWORD PTR [eax+0x348008],eax
    3955:	9f                   	lahf   
    3956:	14 29                	adc    al,0x29
    3958:	37                   	aaa    
    3959:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    395f:	82 02 00             	add    BYTE PTR [edx],0x0
    3962:	00 11                	add    BYTE PTR [ecx],dl
    3964:	69 70 00 01 e1 0b 9b 	imul   esi,DWORD PTR [eax+0x0],0x9b0be101
    396b:	02 00                	add    al,BYTE PTR [eax]
    396d:	00 02                	add    BYTE PTR [edx],al
    396f:	91                   	xchg   ecx,eax
    3970:	40                   	inc    eax
    3971:	00 15 49 37 00 9f    	add    BYTE PTR ds:0x9f003749,dl
    3977:	1b 00                	sbb    eax,DWORD PTR [eax]
    3979:	00 00                	add    BYTE PTR [eax],al
    397b:	11 69 70             	adc    DWORD PTR [ecx+0x70],ebp
    397e:	00 01                	add    BYTE PTR [ecx],al
    3980:	e4 0a                	in     al,0xa
    3982:	a1 02 00 00 02       	mov    eax,ds:0x2000002
    3987:	91                   	xchg   ecx,eax
    3988:	44                   	inc    esp
    3989:	00 00                	add    BYTE PTR [eax],al
    398b:	07                   	pop    es
    398c:	04 92                	add    al,0x92
    398e:	00 00                	add    BYTE PTR [eax],al
    3990:	00 07                	add    BYTE PTR [edi],al
    3992:	04 7d                	add    al,0x7d
    3994:	00 00                	add    BYTE PTR [eax],al
    3996:	00 16                	add    BYTE PTR [esi],dl
    3998:	50                   	push   eax
    3999:	0e                   	push   cs
    399a:	00 00                	add    BYTE PTR [eax],al
    399c:	01 22                	add    DWORD PTR [edx],esp
    399e:	0e                   	push   cs
    399f:	99                   	cdq    
    39a0:	00 00                	add    BYTE PTR [eax],al
    39a2:	00 f8                	add    al,bh
    39a4:	31 00                	xor    DWORD PTR [eax],eax
    39a6:	9f                   	lahf   
    39a7:	40                   	inc    eax
    39a8:	02 00                	add    al,BYTE PTR [eax]
    39aa:	00 01                	add    BYTE PTR [ecx],al
    39ac:	9c                   	pushf  
    39ad:	8f 03                	pop    DWORD PTR [ebx]
    39af:	00 00                	add    BYTE PTR [eax],al
    39b1:	0f 73                	(bad)  
    39b3:	74 72                	je     3a27 <sysEnter_Vector-0x12c5d9>
    39b5:	00 01                	add    BYTE PTR [ecx],al
    39b7:	22 1b                	and    bl,BYTE PTR [ebx]
    39b9:	99                   	cdq    
    39ba:	00 00                	add    BYTE PTR [eax],al
    39bc:	00 02                	add    BYTE PTR [edx],al
    39be:	91                   	xchg   ecx,eax
    39bf:	00 0f                	add    BYTE PTR [edi],cl
    39c1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    39c2:	75 6d                	jne    3a31 <sysEnter_Vector-0x12c5cf>
    39c4:	00 01                	add    BYTE PTR [ecx],al
    39c6:	22 25 92 00 00 00    	and    ah,BYTE PTR ds:0x92
    39cc:	02 91 04 10 3a 0e    	add    dl,BYTE PTR [ecx+0xe3a1004]
    39d2:	00 00                	add    BYTE PTR [eax],al
    39d4:	01 22                	add    DWORD PTR [edx],esp
    39d6:	2e 7d 00             	cs jge 39d9 <sysEnter_Vector-0x12c627>
    39d9:	00 00                	add    BYTE PTR [eax],al
    39db:	02 91 08 10 1b 07    	add    dl,BYTE PTR [ecx+0x71b1008]
    39e1:	00 00                	add    BYTE PTR [eax],al
    39e3:	01 22                	add    DWORD PTR [edx],esp
    39e5:	38 7d 00             	cmp    BYTE PTR [ebp+0x0],bh
    39e8:	00 00                	add    BYTE PTR [eax],al
    39ea:	02 91 0c 10 57 0e    	add    dl,BYTE PTR [ecx+0xe57100c]
    39f0:	00 00                	add    BYTE PTR [eax],al
    39f2:	01 22                	add    DWORD PTR [edx],esp
    39f4:	42                   	inc    edx
    39f5:	7d 00                	jge    39f7 <sysEnter_Vector-0x12c609>
    39f7:	00 00                	add    BYTE PTR [eax],al
    39f9:	02 91 10 10 68 0e    	add    dl,BYTE PTR [ecx+0xe681010]
    39ff:	00 00                	add    BYTE PTR [eax],al
    3a01:	01 23                	add    DWORD PTR [ebx],esp
    3a03:	0b 7d 00             	or     edi,DWORD PTR [ebp+0x0]
    3a06:	00 00                	add    BYTE PTR [eax],al
    3a08:	02 91 14 12 61 0e    	add    dl,BYTE PTR [ecx+0xe611214]
    3a0e:	00 00                	add    BYTE PTR [eax],al
    3a10:	01 26                	add    DWORD PTR [esi],esp
    3a12:	14 9f                	adc    al,0x9f
    3a14:	03 00                	add    eax,DWORD PTR [eax]
    3a16:	00 05 03 54 7c 00    	add    BYTE PTR ds:0x7c5403,al
    3a1c:	9f                   	lahf   
    3a1d:	11 74 6d 70          	adc    DWORD PTR [ebp+ebp*2+0x70],esi
    3a21:	00 01                	add    BYTE PTR [ecx],al
    3a23:	28 07                	sub    BYTE PTR [edi],al
    3a25:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    3a26:	03 00                	add    eax,DWORD PTR [eax]
    3a28:	00 03                	add    BYTE PTR [ebx],al
    3a2a:	91                   	xchg   ecx,eax
    3a2b:	a2 7f 11 63 00       	mov    ds:0x63117f,al
    3a30:	01 29                	add    DWORD PTR [ecx],ebp
    3a32:	07                   	pop    es
    3a33:	3b 00                	cmp    eax,DWORD PTR [eax]
    3a35:	00 00                	add    BYTE PTR [eax],al
    3a37:	02 91 6a 12 0a 02    	add    dl,BYTE PTR [ecx+0x20a126a]
    3a3d:	00 00                	add    BYTE PTR [eax],al
    3a3f:	01 29                	add    DWORD PTR [ecx],ebp
    3a41:	0a 3b                	or     bh,BYTE PTR [ebx]
    3a43:	00 00                	add    BYTE PTR [eax],al
    3a45:	00 02                	add    BYTE PTR [edx],al
    3a47:	91                   	xchg   ecx,eax
    3a48:	73 12                	jae    3a5c <sysEnter_Vector-0x12c5a4>
    3a4a:	25 0e 00 00 01       	and    eax,0x100000e
    3a4f:	29 10                	sub    DWORD PTR [eax],edx
    3a51:	3b 00                	cmp    eax,DWORD PTR [eax]
    3a53:	00 00                	add    BYTE PTR [eax],al
    3a55:	02 91 6b 11 69 00    	add    dl,BYTE PTR [ecx+0x69116b]
    3a5b:	01 2a                	add    DWORD PTR [edx],ebp
    3a5d:	06                   	push   es
    3a5e:	7d 00                	jge    3a60 <sysEnter_Vector-0x12c5a0>
    3a60:	00 00                	add    BYTE PTR [eax],al
    3a62:	02 91 6c 15 d8 32    	add    dl,BYTE PTR [ecx+0x32d8156c]
    3a68:	00 9f 25 00 00 00    	add    BYTE PTR [edi+0x25],bl
    3a6e:	12 79 0e             	adc    bh,BYTE PTR [ecx+0xe]
    3a71:	00 00                	add    BYTE PTR [eax],al
    3a73:	01 4d 17             	add    DWORD PTR [ebp+0x17],ecx
    3a76:	7d 00                	jge    3a78 <sysEnter_Vector-0x12c588>
    3a78:	00 00                	add    BYTE PTR [eax],al
    3a7a:	02 91 64 00 00 17    	add    dl,BYTE PTR [ecx+0x17000064]
    3a80:	42                   	inc    edx
    3a81:	00 00                	add    BYTE PTR [eax],al
    3a83:	00 9f 03 00 00 18    	add    BYTE PTR [edi+0x18000003],bl
    3a89:	61                   	popa   
    3a8a:	00 00                	add    BYTE PTR [eax],al
    3a8c:	00 0f                	add    BYTE PTR [edi],cl
    3a8e:	00 05 8f 03 00 00    	add    BYTE PTR ds:0x38f,al
    3a94:	17                   	pop    ss
    3a95:	3b 00                	cmp    eax,DWORD PTR [eax]
    3a97:	00 00                	add    BYTE PTR [eax],al
    3a99:	b4 03                	mov    ah,0x3
    3a9b:	00 00                	add    BYTE PTR [eax],al
    3a9d:	18 61 00             	sbb    BYTE PTR [ecx+0x0],ah
    3aa0:	00 00                	add    BYTE PTR [eax],al
    3aa2:	41                   	inc    ecx
    3aa3:	00 16                	add    BYTE PTR [esi],dl
    3aa5:	12 0e                	adc    cl,BYTE PTR [esi]
    3aa7:	00 00                	add    BYTE PTR [eax],al
    3aa9:	01 0b                	add    DWORD PTR [ebx],ecx
    3aab:	0c 7d                	or     al,0x7d
    3aad:	00 00                	add    BYTE PTR [eax],al
    3aaf:	00 95 31 00 9f 63    	add    BYTE PTR [ebp+0x639f0031],dl
    3ab5:	00 00                	add    BYTE PTR [eax],al
    3ab7:	00 01                	add    BYTE PTR [ecx],al
    3ab9:	9c                   	pushf  
    3aba:	e9 03 00 00 0f       	jmp    f003ac2 <sysEnter_Vector+0xeed3ac2>
    3abf:	73 00                	jae    3ac1 <sysEnter_Vector-0x12c53f>
    3ac1:	01 0b                	add    DWORD PTR [ebx],ecx
    3ac3:	23 e9                	and    ebp,ecx
    3ac5:	03 00                	add    eax,DWORD PTR [eax]
    3ac7:	00 02                	add    BYTE PTR [edx],al
    3ac9:	91                   	xchg   ecx,eax
    3aca:	00 11                	add    BYTE PTR [ecx],dl
    3acc:	69 00 01 0d 06 7d    	imul   eax,DWORD PTR [eax],0x7d060d01
    3ad2:	00 00                	add    BYTE PTR [eax],al
    3ad4:	00 02                	add    BYTE PTR [edx],al
    3ad6:	91                   	xchg   ecx,eax
    3ad7:	70 00                	jo     3ad9 <sysEnter_Vector-0x12c527>
    3ad9:	07                   	pop    es
    3ada:	04 20                	add    al,0x20
    3adc:	01 00                	add    DWORD PTR [eax],eax
    3ade:	00 00                	add    BYTE PTR [eax],al
    3ae0:	dc 00                	fadd   QWORD PTR [eax]
    3ae2:	00 00                	add    BYTE PTR [eax],al
    3ae4:	04 00                	add    al,0x0
    3ae6:	da 11                	ficom  DWORD PTR [ecx]
    3ae8:	00 00                	add    BYTE PTR [eax],al
    3aea:	04 01                	add    al,0x1
    3aec:	28 00                	sub    BYTE PTR [eax],al
    3aee:	00 00                	add    BYTE PTR [eax],al
    3af0:	0c 90                	or     al,0x90
    3af2:	0e                   	push   cs
    3af3:	00 00                	add    BYTE PTR [eax],al
    3af5:	fe 00                	inc    BYTE PTR [eax]
    3af7:	00 00                	add    BYTE PTR [eax],al
    3af9:	f0 38 00             	lock cmp BYTE PTR [eax],al
    3afc:	9f                   	lahf   
    3afd:	88 00                	mov    BYTE PTR [eax],al
    3aff:	00 00                	add    BYTE PTR [eax],al
    3b01:	57                   	push   edi
    3b02:	1d 00 00 02 01       	sbb    eax,0x1020000
    3b07:	08 f0                	or     al,dh
    3b09:	00 00                	add    BYTE PTR [eax],al
    3b0b:	00 02                	add    BYTE PTR [edx],al
    3b0d:	02 07                	add    al,BYTE PTR [edi]
    3b0f:	0e                   	push   cs
    3b10:	00 00                	add    BYTE PTR [eax],al
    3b12:	00 02                	add    BYTE PTR [edx],al
    3b14:	04 07                	add    al,0x7
    3b16:	e3 00                	jecxz  3b18 <sysEnter_Vector-0x12c4e8>
    3b18:	00 00                	add    BYTE PTR [eax],al
    3b1a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3b1d:	de 00                	fiadd  WORD PTR [eax]
    3b1f:	00 00                	add    BYTE PTR [eax],al
    3b21:	02 01                	add    al,BYTE PTR [ecx]
    3b23:	06                   	push   es
    3b24:	f2 00 00             	repnz add BYTE PTR [eax],al
    3b27:	00 02                	add    BYTE PTR [edx],al
    3b29:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    3b2f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3b36:	02 08                	add    cl,BYTE PTR [eax]
    3b38:	05 00 00 00 00       	add    eax,0x0
    3b3d:	02 08                	add    cl,BYTE PTR [eax]
    3b3f:	07                   	pop    es
    3b40:	d9 00                	fld    DWORD PTR [eax]
    3b42:	00 00                	add    BYTE PTR [eax],al
    3b44:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3b4b:	04 04                	add    al,0x4
    3b4d:	71 00                	jno    3b4f <sysEnter_Vector-0x12c4b1>
    3b4f:	00 00                	add    BYTE PTR [eax],al
    3b51:	02 01                	add    al,BYTE PTR [ecx]
    3b53:	06                   	push   es
    3b54:	f9                   	stc    
    3b55:	00 00                	add    BYTE PTR [eax],al
    3b57:	00 02                	add    BYTE PTR [edx],al
    3b59:	0c 04                	or     al,0x4
    3b5b:	5e                   	pop    esi
    3b5c:	01 00                	add    DWORD PTR [eax],eax
    3b5e:	00 02                	add    BYTE PTR [edx],al
    3b60:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    3b63:	00 00                	add    BYTE PTR [eax],al
    3b65:	00 05 29 01 00 00    	add    BYTE PTR ds:0x129,al
    3b6b:	02 33                	add    dh,BYTE PTR [ebx]
    3b6d:	0c 98                	or     al,0x98
    3b6f:	00 00                	add    BYTE PTR [eax],al
    3b71:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    3b77:	9f                   	lahf   
    3b78:	04 04                	add    al,0x4
    3b7a:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    3b7d:	00 06                	add    BYTE PTR [esi],al
    3b7f:	9c                   	pushf  
    3b80:	0e                   	push   cs
    3b81:	00 00                	add    BYTE PTR [eax],al
    3b83:	01 11                	add    DWORD PTR [ecx],edx
    3b85:	0e                   	push   cs
    3b86:	f0 38 00             	lock cmp BYTE PTR [eax],al
    3b89:	9f                   	lahf   
    3b8a:	88 00                	mov    BYTE PTR [eax],al
    3b8c:	00 00                	add    BYTE PTR [eax],al
    3b8e:	01 9c d3 00 00 00 07 	add    DWORD PTR [ebx+edx*8+0x7000000],ebx
    3b95:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    3b96:	0e                   	push   cs
    3b97:	00 00                	add    BYTE PTR [eax],al
    3b99:	01 13                	add    DWORD PTR [ebx],edx
    3b9b:	0a d3                	or     dl,bl
    3b9d:	00 00                	add    BYTE PTR [eax],al
    3b9f:	00 02                	add    BYTE PTR [edx],al
    3ba1:	91                   	xchg   ecx,eax
    3ba2:	67 07                	addr16 pop es
    3ba4:	88 0e                	mov    BYTE PTR [esi],cl
    3ba6:	00 00                	add    BYTE PTR [eax],al
    3ba8:	01 14 09             	add    DWORD PTR [ecx+ecx*1],edx
    3bab:	4f                   	dec    edi
    3bac:	00 00                	add    BYTE PTR [eax],al
    3bae:	00 02                	add    BYTE PTR [edx],al
    3bb0:	91                   	xchg   ecx,eax
    3bb1:	6c                   	ins    BYTE PTR es:[edi],dx
    3bb2:	00 08                	add    BYTE PTR [eax],cl
    3bb4:	71 00                	jno    3bb6 <sysEnter_Vector-0x12c44a>
    3bb6:	00 00                	add    BYTE PTR [eax],al
    3bb8:	09 33                	or     DWORD PTR [ebx],esi
    3bba:	00 00                	add    BYTE PTR [eax],al
    3bbc:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3bbf:	00 ca                	add    dl,cl
    3bc1:	01 00                	add    DWORD PTR [eax],eax
    3bc3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3bc6:	5b                   	pop    ebx
    3bc7:	12 00                	adc    al,BYTE PTR [eax]
    3bc9:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3bcc:	28 00                	sub    BYTE PTR [eax],al
    3bce:	00 00                	add    BYTE PTR [eax],al
    3bd0:	0c d3                	or     al,0xd3
    3bd2:	0e                   	push   cs
    3bd3:	00 00                	add    BYTE PTR [eax],al
    3bd5:	fe 00                	inc    BYTE PTR [eax]
    3bd7:	00 00                	add    BYTE PTR [eax],al
    3bd9:	78 39                	js     3c14 <sysEnter_Vector-0x12c3ec>
    3bdb:	00 9f 1b 01 00 00    	add    BYTE PTR [edi+0x11b],bl
    3be1:	d2 1d 00 00 02 04    	rcr    BYTE PTR ds:0x4020000,cl
    3be7:	05 69 6e 74 00       	add    eax,0x746e69
    3bec:	03 d2                	add    edx,edx
    3bee:	02 00                	add    al,BYTE PTR [eax]
    3bf0:	00 02                	add    BYTE PTR [edx],al
    3bf2:	d1 17                	rcl    DWORD PTR [edi],1
    3bf4:	38 00                	cmp    BYTE PTR [eax],al
    3bf6:	00 00                	add    BYTE PTR [eax],al
    3bf8:	04 04                	add    al,0x4
    3bfa:	07                   	pop    es
    3bfb:	e3 00                	jecxz  3bfd <sysEnter_Vector-0x12c403>
    3bfd:	00 00                	add    BYTE PTR [eax],al
    3bff:	04 04                	add    al,0x4
    3c01:	05 05 00 00 00       	add    eax,0x5
    3c06:	04 08                	add    al,0x8
    3c08:	05 00 00 00 00       	add    eax,0x0
    3c0d:	04 0c                	add    al,0xc
    3c0f:	04 5e                	add    al,0x5e
    3c11:	01 00                	add    DWORD PTR [eax],eax
    3c13:	00 04 10             	add    BYTE PTR [eax+edx*1],al
    3c16:	04 cf                	add    al,0xcf
    3c18:	00 00                	add    BYTE PTR [eax],al
    3c1a:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3c1d:	06                   	push   es
    3c1e:	f9                   	stc    
    3c1f:	00 00                	add    BYTE PTR [eax],al
    3c21:	00 05 5b 00 00 00    	add    BYTE PTR ds:0x5b,al
    3c27:	04 01                	add    al,0x1
    3c29:	08 f0                	or     al,dh
    3c2b:	00 00                	add    BYTE PTR [eax],al
    3c2d:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    3c30:	07                   	pop    es
    3c31:	0e                   	push   cs
    3c32:	00 00                	add    BYTE PTR [eax],al
    3c34:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3c37:	07                   	pop    es
    3c38:	de 00                	fiadd  WORD PTR [eax]
    3c3a:	00 00                	add    BYTE PTR [eax],al
    3c3c:	04 01                	add    al,0x1
    3c3e:	06                   	push   es
    3c3f:	f2 00 00             	repnz add BYTE PTR [eax],al
    3c42:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    3c45:	05 6a 01 00 00       	add    eax,0x16a
    3c4a:	04 08                	add    al,0x8
    3c4c:	07                   	pop    es
    3c4d:	d9 00                	fld    DWORD PTR [eax]
    3c4f:	00 00                	add    BYTE PTR [eax],al
    3c51:	06                   	push   es
    3c52:	04 5b                	add    al,0x5b
    3c54:	00 00                	add    BYTE PTR [eax],al
    3c56:	00 07                	add    BYTE PTR [edi],al
    3c58:	29 01                	sub    DWORD PTR [ecx],eax
    3c5a:	00 00                	add    BYTE PTR [eax],al
    3c5c:	03 33                	add    esi,DWORD PTR [ebx]
    3c5e:	0c a9                	or     al,0xa9
    3c60:	00 00                	add    BYTE PTR [eax],al
    3c62:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    3c68:	9f                   	lahf   
    3c69:	06                   	push   es
    3c6a:	04 91                	add    al,0x91
    3c6c:	00 00                	add    BYTE PTR [eax],al
    3c6e:	00 08                	add    BYTE PTR [eax],cl
    3c70:	e8 0e 00 00 01       	call   1003c83 <sysEnter_Vector+0xed3c83>
    3c75:	38 0f                	cmp    BYTE PTR [edi],cl
    3c77:	91                   	xchg   ecx,eax
    3c78:	00 00                	add    BYTE PTR [eax],al
    3c7a:	00 69 3a             	add    BYTE PTR [ecx+0x3a],ch
    3c7d:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
    3c83:	01 9c f5 00 00 00 09 	add    DWORD PTR [ebp+esi*8+0x9000000],ebx
    3c8a:	f9                   	stc    
    3c8b:	0b 00                	or     eax,DWORD PTR [eax]
    3c8d:	00 01                	add    BYTE PTR [ecx],al
    3c8f:	38 1d 91 00 00 00    	cmp    BYTE PTR ds:0x91,bl
    3c95:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    3c9b:	63 00                	arpl   WORD PTR [eax],ax
    3c9d:	01 38                	add    DWORD PTR [eax],edi
    3c9f:	2f                   	das    
    3ca0:	f5                   	cmc    
    3ca1:	00 00                	add    BYTE PTR [eax],al
    3ca3:	00 02                	add    BYTE PTR [edx],al
    3ca5:	91                   	xchg   ecx,eax
    3ca6:	04 0a                	add    al,0xa
    3ca8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3ca9:	00 01                	add    BYTE PTR [ecx],al
    3cab:	38 3b                	cmp    BYTE PTR [ebx],bh
    3cad:	2c 00                	sub    al,0x0
    3caf:	00 00                	add    BYTE PTR [eax],al
    3cb1:	02 91 08 00 06 04    	add    dl,BYTE PTR [ecx+0x4060008]
    3cb7:	62 00                	bound  eax,QWORD PTR [eax]
    3cb9:	00 00                	add    BYTE PTR [eax],al
    3cbb:	08 b6 0e 00 00 01    	or     BYTE PTR [esi+0x100000e],dh
    3cc1:	2a 07                	sub    al,BYTE PTR [edi]
    3cc3:	91                   	xchg   ecx,eax
    3cc4:	00 00                	add    BYTE PTR [eax],al
    3cc6:	00 f8                	add    al,bh
    3cc8:	39 00                	cmp    DWORD PTR [eax],eax
    3cca:	9f                   	lahf   
    3ccb:	71 00                	jno    3ccd <sysEnter_Vector-0x12c333>
    3ccd:	00 00                	add    BYTE PTR [eax],al
    3ccf:	01 9c 5f 01 00 00 09 	add    DWORD PTR [edi+ebx*2+0x9000001],ebx
    3cd6:	f9                   	stc    
    3cd7:	0b 00                	or     eax,DWORD PTR [eax]
    3cd9:	00 01                	add    BYTE PTR [ecx],al
    3cdb:	2a 16                	sub    dl,BYTE PTR [esi]
    3cdd:	91                   	xchg   ecx,eax
    3cde:	00 00                	add    BYTE PTR [eax],al
    3ce0:	00 02                	add    BYTE PTR [edx],al
    3ce2:	91                   	xchg   ecx,eax
    3ce3:	00 0a                	add    BYTE PTR [edx],cl
    3ce5:	73 72                	jae    3d59 <sysEnter_Vector-0x12c2a7>
    3ce7:	63 00                	arpl   WORD PTR [eax],ax
    3ce9:	01 2a                	add    DWORD PTR [edx],ebp
    3ceb:	28 f5                	sub    ch,dh
    3ced:	00 00                	add    BYTE PTR [eax],al
    3cef:	00 02                	add    BYTE PTR [edx],al
    3cf1:	91                   	xchg   ecx,eax
    3cf2:	04 0a                	add    al,0xa
    3cf4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3cf5:	00 01                	add    BYTE PTR [ecx],al
    3cf7:	2a 34 2c             	sub    dh,BYTE PTR [esp+ebp*1]
    3cfa:	00 00                	add    BYTE PTR [eax],al
    3cfc:	00 02                	add    BYTE PTR [edx],al
    3cfe:	91                   	xchg   ecx,eax
    3cff:	08 0b                	or     BYTE PTR [ebx],cl
    3d01:	aa                   	stos   BYTE PTR es:[edi],al
    3d02:	0e                   	push   cs
    3d03:	00 00                	add    BYTE PTR [eax],al
    3d05:	01 2c 0c             	add    DWORD PTR [esp+ecx*1],ebp
    3d08:	2c 00                	sub    al,0x0
    3d0a:	00 00                	add    BYTE PTR [eax],al
    3d0c:	02 91 6c 0b bf 0e    	add    dl,BYTE PTR [ecx+0xebf0b6c]
    3d12:	00 00                	add    BYTE PTR [eax],al
    3d14:	01 2d 0c 2c 00 00    	add    DWORD PTR ds:0x2c0c,ebp
    3d1a:	00 02                	add    BYTE PTR [edx],al
    3d1c:	91                   	xchg   ecx,eax
    3d1d:	68 00 08 f0 0e       	push   0xef00800
    3d22:	00 00                	add    BYTE PTR [eax],al
    3d24:	01 24 0a             	add    DWORD PTR [edx+ecx*1],esp
    3d27:	91                   	xchg   ecx,eax
    3d28:	00 00                	add    BYTE PTR [eax],al
    3d2a:	00 b8 39 00 9f 40    	add    BYTE PTR [eax+0x409f0039],bh
    3d30:	00 00                	add    BYTE PTR [eax],al
    3d32:	00 01                	add    BYTE PTR [ecx],al
    3d34:	9c                   	pushf  
    3d35:	98                   	cwde   
    3d36:	01 00                	add    DWORD PTR [eax],eax
    3d38:	00 09                	add    BYTE PTR [ecx],cl
    3d3a:	f9                   	stc    
    3d3b:	0b 00                	or     eax,DWORD PTR [eax]
    3d3d:	00 01                	add    BYTE PTR [ecx],al
    3d3f:	24 19                	and    al,0x19
    3d41:	91                   	xchg   ecx,eax
    3d42:	00 00                	add    BYTE PTR [eax],al
    3d44:	00 02                	add    BYTE PTR [edx],al
    3d46:	91                   	xchg   ecx,eax
    3d47:	00 0a                	add    BYTE PTR [edx],cl
    3d49:	73 72                	jae    3dbd <sysEnter_Vector-0x12c243>
    3d4b:	63 00                	arpl   WORD PTR [eax],ax
    3d4d:	01 24 2b             	add    DWORD PTR [ebx+ebp*1],esp
    3d50:	f5                   	cmc    
    3d51:	00 00                	add    BYTE PTR [eax],al
    3d53:	00 02                	add    BYTE PTR [edx],al
    3d55:	91                   	xchg   ecx,eax
    3d56:	04 00                	add    al,0x0
    3d58:	0c cc                	or     al,0xcc
    3d5a:	0e                   	push   cs
    3d5b:	00 00                	add    BYTE PTR [eax],al
    3d5d:	01 1e                	add    DWORD PTR [esi],ebx
    3d5f:	04 91                	add    al,0x91
    3d61:	00 00                	add    BYTE PTR [eax],al
    3d63:	00 78 39             	add    BYTE PTR [eax+0x39],bh
    3d66:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    3d6c:	01 9c 09 f9 0b 00 00 	add    DWORD PTR [ecx+ecx*1+0xbf9],ebx
    3d73:	01 1e                	add    DWORD PTR [esi],ebx
    3d75:	12 91 00 00 00 02    	adc    dl,BYTE PTR [ecx+0x2000000]
    3d7b:	91                   	xchg   ecx,eax
    3d7c:	00 0a                	add    BYTE PTR [edx],cl
    3d7e:	73 72                	jae    3df2 <sysEnter_Vector-0x12c20e>
    3d80:	63 00                	arpl   WORD PTR [eax],ax
    3d82:	01 1e                	add    DWORD PTR [esi],ebx
    3d84:	24 f5                	and    al,0xf5
    3d86:	00 00                	add    BYTE PTR [eax],al
    3d88:	00 02                	add    BYTE PTR [edx],al
    3d8a:	91                   	xchg   ecx,eax
    3d8b:	04 00                	add    al,0x0
    3d8d:	00 a5 01 00 00 04    	add    BYTE PTR [ebp+0x4000001],ah
    3d93:	00 24 13             	add    BYTE PTR [ebx+edx*1],ah
    3d96:	00 00                	add    BYTE PTR [eax],al
    3d98:	04 01                	add    al,0x1
    3d9a:	28 00                	sub    BYTE PTR [eax],al
    3d9c:	00 00                	add    BYTE PTR [eax],al
    3d9e:	0c 07                	or     al,0x7
    3da0:	0f 00 00             	sldt   WORD PTR [eax]
    3da3:	fe 00                	inc    BYTE PTR [eax]
    3da5:	00 00                	add    BYTE PTR [eax],al
    3da7:	93                   	xchg   ebx,eax
    3da8:	3a 00                	cmp    al,BYTE PTR [eax]
    3daa:	9f                   	lahf   
    3dab:	83 00 00             	add    DWORD PTR [eax],0x0
    3dae:	00 a3 1e 00 00 02    	add    BYTE PTR [ebx+0x200001e],ah
    3db4:	01 08                	add    DWORD PTR [eax],ecx
    3db6:	f0 00 00             	lock add BYTE PTR [eax],al
    3db9:	00 03                	add    BYTE PTR [ebx],al
    3dbb:	25 00 00 00 02       	and    eax,0x2000000
    3dc0:	02 07                	add    al,BYTE PTR [edi]
    3dc2:	0e                   	push   cs
    3dc3:	00 00                	add    BYTE PTR [eax],al
    3dc5:	00 02                	add    BYTE PTR [edx],al
    3dc7:	04 07                	add    al,0x7
    3dc9:	e3 00                	jecxz  3dcb <sysEnter_Vector-0x12c235>
    3dcb:	00 00                	add    BYTE PTR [eax],al
    3dcd:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3dd0:	de 00                	fiadd  WORD PTR [eax]
    3dd2:	00 00                	add    BYTE PTR [eax],al
    3dd4:	02 01                	add    al,BYTE PTR [ecx]
    3dd6:	06                   	push   es
    3dd7:	f2 00 00             	repnz add BYTE PTR [eax],al
    3dda:	00 02                	add    BYTE PTR [edx],al
    3ddc:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    3de2:	04 04                	add    al,0x4
    3de4:	05 69 6e 74 00       	add    eax,0x746e69
    3de9:	02 08                	add    cl,BYTE PTR [eax]
    3deb:	05 00 00 00 00       	add    eax,0x0
    3df0:	02 08                	add    cl,BYTE PTR [eax]
    3df2:	07                   	pop    es
    3df3:	d9 00                	fld    DWORD PTR [eax]
    3df5:	00 00                	add    BYTE PTR [eax],al
    3df7:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3dfe:	05 04 76 00 00       	add    eax,0x7604
    3e03:	00 02                	add    BYTE PTR [edx],al
    3e05:	01 06                	add    DWORD PTR [esi],eax
    3e07:	f9                   	stc    
    3e08:	00 00                	add    BYTE PTR [eax],al
    3e0a:	00 03                	add    BYTE PTR [ebx],al
    3e0c:	76 00                	jbe    3e0e <sysEnter_Vector-0x12c1f2>
    3e0e:	00 00                	add    BYTE PTR [eax],al
    3e10:	06                   	push   es
    3e11:	78 02                	js     3e15 <sysEnter_Vector-0x12c1eb>
    3e13:	00 00                	add    BYTE PTR [eax],al
    3e15:	02 34 19             	add    dh,BYTE PTR [ecx+ebx*1]
    3e18:	38 00                	cmp    BYTE PTR [eax],al
    3e1a:	00 00                	add    BYTE PTR [eax],al
    3e1c:	06                   	push   es
    3e1d:	8f 02                	pop    DWORD PTR [edx]
    3e1f:	00 00                	add    BYTE PTR [eax],al
    3e21:	02 56 1a             	add    dl,BYTE PTR [esi+0x1a]
    3e24:	38 00                	cmp    BYTE PTR [eax],al
    3e26:	00 00                	add    BYTE PTR [eax],al
    3e28:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3e2b:	5e                   	pop    esi
    3e2c:	01 00                	add    DWORD PTR [eax],eax
    3e2e:	00 02                	add    BYTE PTR [edx],al
    3e30:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    3e33:	00 00                	add    BYTE PTR [eax],al
    3e35:	00 07                	add    BYTE PTR [edi],al
    3e37:	29 01                	sub    DWORD PTR [ecx],eax
    3e39:	00 00                	add    BYTE PTR [eax],al
    3e3b:	03 33                	add    esi,DWORD PTR [ebx]
    3e3d:	0c ba                	or     al,0xba
    3e3f:	00 00                	add    BYTE PTR [eax],al
    3e41:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    3e47:	9f                   	lahf   
    3e48:	05 04 70 00 00       	add    eax,0x7004
    3e4d:	00 07                	add    BYTE PTR [edi],al
    3e4f:	47                   	inc    edi
    3e50:	02 00                	add    al,BYTE PTR [eax]
    3e52:	00 04 35 10 d2 00 00 	add    BYTE PTR [esi*1+0xd210],al
    3e59:	00 05 03 30 7f 00    	add    BYTE PTR ds:0x7f3003,al
    3e5f:	9f                   	lahf   
    3e60:	05 04 8e 00 00       	add    eax,0x8e04
    3e65:	00 07                	add    BYTE PTR [edi],al
    3e67:	99                   	cdq    
    3e68:	02 00                	add    al,BYTE PTR [eax]
    3e6a:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    3e6d:	0e                   	push   cs
    3e6e:	82 00 00             	add    BYTE PTR [eax],0x0
    3e71:	00 05 03 2c 7f 00    	add    BYTE PTR ds:0x7f2c03,al
    3e77:	9f                   	lahf   
    3e78:	05 04 7d 00 00       	add    eax,0x7d04
    3e7d:	00 02                	add    BYTE PTR [edx],al
    3e7f:	01 02                	add    DWORD PTR [edx],eax
    3e81:	ab                   	stos   DWORD PTR es:[edi],eax
    3e82:	06                   	push   es
    3e83:	00 00                	add    BYTE PTR [eax],al
    3e85:	02 08                	add    cl,BYTE PTR [eax]
    3e87:	04 63                	add    al,0x63
    3e89:	01 00                	add    DWORD PTR [eax],eax
    3e8b:	00 08                	add    BYTE PTR [eax],cl
    3e8d:	00 0f                	add    BYTE PTR [edi],cl
    3e8f:	00 00                	add    BYTE PTR [eax],al
    3e91:	01 2c 0d 54 00 00 00 	add    DWORD PTR [ecx*1+0x54],ebp
    3e98:	f5                   	cmc    
    3e99:	3a 00                	cmp    al,BYTE PTR [eax]
    3e9b:	9f                   	lahf   
    3e9c:	21 00                	and    DWORD PTR [eax],eax
    3e9e:	00 00                	add    BYTE PTR [eax],al
    3ea0:	01 9c 35 01 00 00 09 	add    DWORD PTR [ebp+esi*1+0x9000001],ebx
    3ea7:	70 31                	jo     3eda <sysEnter_Vector-0x12c126>
    3ea9:	00 01                	add    BYTE PTR [ecx],al
    3eab:	2c 20                	sub    al,0x20
    3ead:	ea 00 00 00 02 91 00 	jmp    0x91:0x2000000
    3eb4:	09 70 32             	or     DWORD PTR [eax+0x32],esi
    3eb7:	00 01                	add    BYTE PTR [ecx],al
    3eb9:	2c 30                	sub    al,0x30
    3ebb:	ea 00 00 00 02 91 04 	jmp    0x491:0x2000000
    3ec2:	00 0a                	add    BYTE PTR [edx],cl
    3ec4:	f8                   	clc    
    3ec5:	0e                   	push   cs
    3ec6:	00 00                	add    BYTE PTR [eax],al
    3ec8:	01 1a                	add    DWORD PTR [edx],ebx
    3eca:	05 54 00 00 00       	add    eax,0x54
    3ecf:	93                   	xchg   ebx,eax
    3ed0:	3a 00                	cmp    al,BYTE PTR [eax]
    3ed2:	9f                   	lahf   
    3ed3:	62 00                	bound  eax,QWORD PTR [eax]
    3ed5:	00 00                	add    BYTE PTR [eax],al
    3ed7:	01 9c a2 01 00 00 09 	add    DWORD PTR [edx+eiz*4+0x9000001],ebx
    3ede:	70 31                	jo     3f11 <sysEnter_Vector-0x12c0ef>
    3ee0:	00 01                	add    BYTE PTR [ecx],al
    3ee2:	1a 1a                	sbb    bl,BYTE PTR [edx]
    3ee4:	ea 00 00 00 02 91 00 	jmp    0x91:0x2000000
    3eeb:	09 70 32             	or     DWORD PTR [eax+0x32],esi
    3eee:	00 01                	add    BYTE PTR [ecx],al
    3ef0:	1a 2a                	sbb    ch,BYTE PTR [edx]
    3ef2:	ea 00 00 00 02 91 04 	jmp    0x491:0x2000000
    3ef9:	0b 73 31             	or     esi,DWORD PTR [ebx+0x31]
    3efc:	00 01                	add    BYTE PTR [ecx],al
    3efe:	1c 21                	sbb    al,0x21
    3f00:	a2 01 00 00 01       	mov    ds:0x1000001,al
    3f05:	53                   	push   ebx
    3f06:	0b 73 32             	or     esi,DWORD PTR [ebx+0x32]
    3f09:	00 01                	add    BYTE PTR [ecx],al
    3f0b:	1d 21 a2 01 00       	sbb    eax,0x1a221
    3f10:	00 01                	add    BYTE PTR [ecx],al
    3f12:	56                   	push   esi
    3f13:	0b 63 31             	or     esp,DWORD PTR [ebx+0x31]
    3f16:	00 01                	add    BYTE PTR [ecx],al
    3f18:	1e                   	push   ds
    3f19:	11 25 00 00 00 02    	adc    DWORD PTR ds:0x2000000,esp
    3f1f:	91                   	xchg   ecx,eax
    3f20:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3f21:	0b 63 32             	or     esp,DWORD PTR [ebx+0x32]
    3f24:	00 01                	add    BYTE PTR [ecx],al
    3f26:	1e                   	push   ds
    3f27:	15 25 00 00 00       	adc    eax,0x25
    3f2c:	02 91 6e 00 05 04    	add    dl,BYTE PTR [ecx+0x405006e]
    3f32:	2c 00                	sub    al,0x0
    3f34:	00 00                	add    BYTE PTR [eax],al
    3f36:	00 3b                	add    BYTE PTR [ebx],bh
    3f38:	01 00                	add    DWORD PTR [eax],eax
    3f3a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3f3d:	de 13                	ficom  WORD PTR [ebx]
    3f3f:	00 00                	add    BYTE PTR [eax],al
    3f41:	04 01                	add    al,0x1
    3f43:	28 00                	sub    BYTE PTR [eax],al
    3f45:	00 00                	add    BYTE PTR [eax],al
    3f47:	0c 39                	or     al,0x39
    3f49:	0f 00 00             	sldt   WORD PTR [eax]
    3f4c:	fe 00                	inc    BYTE PTR [eax]
    3f4e:	00 00                	add    BYTE PTR [eax],al
    3f50:	16                   	push   ss
    3f51:	3b 00                	cmp    eax,DWORD PTR [eax]
    3f53:	9f                   	lahf   
    3f54:	d3 00                	rol    DWORD PTR [eax],cl
    3f56:	00 00                	add    BYTE PTR [eax],al
    3f58:	63 1f                	arpl   WORD PTR [edi],bx
    3f5a:	00 00                	add    BYTE PTR [eax],al
    3f5c:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    3f63:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    3f66:	e3 00                	jecxz  3f68 <sysEnter_Vector-0x12c098>
    3f68:	00 00                	add    BYTE PTR [eax],al
    3f6a:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    3f71:	03 08                	add    ecx,DWORD PTR [eax]
    3f73:	05 00 00 00 00       	add    eax,0x0
    3f78:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    3f7b:	5e                   	pop    esi
    3f7c:	01 00                	add    DWORD PTR [eax],eax
    3f7e:	00 03                	add    BYTE PTR [ebx],al
    3f80:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    3f83:	00 00                	add    BYTE PTR [eax],al
    3f85:	00 03                	add    BYTE PTR [ebx],al
    3f87:	01 06                	add    DWORD PTR [esi],eax
    3f89:	f9                   	stc    
    3f8a:	00 00                	add    BYTE PTR [eax],al
    3f8c:	00 04 4f             	add    BYTE PTR [edi+ecx*2],al
    3f8f:	00 00                	add    BYTE PTR [eax],al
    3f91:	00 05 29 0f 00 00    	add    BYTE PTR ds:0xf29,al
    3f97:	01 18                	add    DWORD PTR [eax],ebx
    3f99:	01 ae 00 00 00 9e    	add    DWORD PTR [esi-0x62000000],ebp
    3f9f:	3b 00                	cmp    eax,DWORD PTR [eax]
    3fa1:	9f                   	lahf   
    3fa2:	4b                   	dec    ebx
    3fa3:	00 00                	add    BYTE PTR [eax],al
    3fa5:	00 01                	add    BYTE PTR [ecx],al
    3fa7:	9c                   	pushf  
    3fa8:	ae                   	scas   al,BYTE PTR es:[edi]
    3fa9:	00 00                	add    BYTE PTR [eax],al
    3fab:	00 06                	add    BYTE PTR [esi],al
    3fad:	73 31                	jae    3fe0 <sysEnter_Vector-0x12c020>
    3faf:	00 01                	add    BYTE PTR [ecx],al
    3fb1:	18 0f                	sbb    BYTE PTR [edi],cl
    3fb3:	ae                   	scas   al,BYTE PTR es:[edi]
    3fb4:	00 00                	add    BYTE PTR [eax],al
    3fb6:	00 02                	add    BYTE PTR [edx],al
    3fb8:	91                   	xchg   ecx,eax
    3fb9:	00 06                	add    BYTE PTR [esi],al
    3fbb:	73 32                	jae    3fef <sysEnter_Vector-0x12c011>
    3fbd:	00 01                	add    BYTE PTR [ecx],al
    3fbf:	18 1f                	sbb    BYTE PTR [edi],bl
    3fc1:	b4 00                	mov    ah,0x0
    3fc3:	00 00                	add    BYTE PTR [eax],al
    3fc5:	02 91 04 07 23 0f    	add    dl,BYTE PTR [ecx+0xf230704]
    3fcb:	00 00                	add    BYTE PTR [eax],al
    3fcd:	01 18                	add    DWORD PTR [eax],ebx
    3fcf:	2c 2c                	sub    al,0x2c
    3fd1:	00 00                	add    BYTE PTR [eax],al
    3fd3:	00 02                	add    BYTE PTR [edx],al
    3fd5:	91                   	xchg   ecx,eax
    3fd6:	08 08                	or     BYTE PTR [eax],cl
    3fd8:	73 00                	jae    3fda <sysEnter_Vector-0x12c026>
    3fda:	01 1a                	add    DWORD PTR [edx],ebx
    3fdc:	0b ae 00 00 00 02    	or     ebp,DWORD PTR [esi+0x2000000]
    3fe2:	91                   	xchg   ecx,eax
    3fe3:	74 00                	je     3fe5 <sysEnter_Vector-0x12c01b>
    3fe5:	09 04 4f             	or     DWORD PTR [edi+ecx*2],eax
    3fe8:	00 00                	add    BYTE PTR [eax],al
    3fea:	00 09                	add    BYTE PTR [ecx],cl
    3fec:	04 56                	add    al,0x56
    3fee:	00 00                	add    BYTE PTR [eax],al
    3ff0:	00 05 31 0f 00 00    	add    BYTE PTR ds:0xf31,al
    3ff6:	01 0e                	add    DWORD PTR [esi],ecx
    3ff8:	01 ae 00 00 00 5a    	add    DWORD PTR [esi+0x5a000000],ebp
    3ffe:	3b 00                	cmp    eax,DWORD PTR [eax]
    4000:	9f                   	lahf   
    4001:	44                   	inc    esp
    4002:	00 00                	add    BYTE PTR [eax],al
    4004:	00 01                	add    BYTE PTR [ecx],al
    4006:	9c                   	pushf  
    4007:	fe 00                	inc    BYTE PTR [eax]
    4009:	00 00                	add    BYTE PTR [eax],al
    400b:	06                   	push   es
    400c:	73 31                	jae    403f <sysEnter_Vector-0x12bfc1>
    400e:	00 01                	add    BYTE PTR [ecx],al
    4010:	0e                   	push   cs
    4011:	0f ae 00             	fxsave [eax]
    4014:	00 00                	add    BYTE PTR [eax],al
    4016:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    401c:	00 01                	add    BYTE PTR [ecx],al
    401e:	0e                   	push   cs
    401f:	1f                   	pop    ds
    4020:	b4 00                	mov    ah,0x0
    4022:	00 00                	add    BYTE PTR [eax],al
    4024:	02 91 04 08 73 00    	add    dl,BYTE PTR [ecx+0x730804]
    402a:	01 10                	add    DWORD PTR [eax],edx
    402c:	0b ae 00 00 00 02    	or     ebp,DWORD PTR [esi+0x2000000]
    4032:	91                   	xchg   ecx,eax
    4033:	74 00                	je     4035 <sysEnter_Vector-0x12bfcb>
    4035:	0a 1c 0f             	or     bl,BYTE PTR [edi+ecx*1]
    4038:	00 00                	add    BYTE PTR [eax],al
    403a:	01 04 01             	add    DWORD PTR [ecx+eax*1],eax
    403d:	ae                   	scas   al,BYTE PTR es:[edi]
    403e:	00 00                	add    BYTE PTR [eax],al
    4040:	00 16                	add    BYTE PTR [esi],dl
    4042:	3b 00                	cmp    eax,DWORD PTR [eax]
    4044:	9f                   	lahf   
    4045:	44                   	inc    esp
    4046:	00 00                	add    BYTE PTR [eax],al
    4048:	00 01                	add    BYTE PTR [ecx],al
    404a:	9c                   	pushf  
    404b:	06                   	push   es
    404c:	73 31                	jae    407f <sysEnter_Vector-0x12bf81>
    404e:	00 01                	add    BYTE PTR [ecx],al
    4050:	04 0e                	add    al,0xe
    4052:	ae                   	scas   al,BYTE PTR es:[edi]
    4053:	00 00                	add    BYTE PTR [eax],al
    4055:	00 02                	add    BYTE PTR [edx],al
    4057:	91                   	xchg   ecx,eax
    4058:	00 06                	add    BYTE PTR [esi],al
    405a:	73 32                	jae    408e <sysEnter_Vector-0x12bf72>
    405c:	00 01                	add    BYTE PTR [ecx],al
    405e:	04 1e                	add    al,0x1e
    4060:	b4 00                	mov    ah,0x0
    4062:	00 00                	add    BYTE PTR [eax],al
    4064:	02 91 04 08 73 00    	add    dl,BYTE PTR [ecx+0x730804]
    406a:	01 06                	add    DWORD PTR [esi],eax
    406c:	0b ae 00 00 00 02    	or     ebp,DWORD PTR [esi+0x2000000]
    4072:	91                   	xchg   ecx,eax
    4073:	74 00                	je     4075 <sysEnter_Vector-0x12bf8b>
    4075:	00 48 01             	add    BYTE PTR [eax+0x1],cl
    4078:	00 00                	add    BYTE PTR [eax],al
    407a:	04 00                	add    al,0x0
    407c:	85 14 00             	test   DWORD PTR [eax+eax*1],edx
    407f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4082:	28 00                	sub    BYTE PTR [eax],al
    4084:	00 00                	add    BYTE PTR [eax],al
    4086:	0c 57                	or     al,0x57
    4088:	0f 00 00             	sldt   WORD PTR [eax]
    408b:	fe 00                	inc    BYTE PTR [eax]
    408d:	00 00                	add    BYTE PTR [eax],al
    408f:	e9 3b 00 9f 91       	jmp    919f40cf <sysEnter_Vector+0x918c40cf>
    4094:	00 00                	add    BYTE PTR [eax],al
    4096:	00 5c 20 00          	add    BYTE PTR [eax+eiz*1+0x0],bl
    409a:	00 02                	add    BYTE PTR [edx],al
    409c:	01 08                	add    DWORD PTR [eax],ecx
    409e:	f0 00 00             	lock add BYTE PTR [eax],al
    40a1:	00 02                	add    BYTE PTR [edx],al
    40a3:	02 07                	add    al,BYTE PTR [edi]
    40a5:	0e                   	push   cs
    40a6:	00 00                	add    BYTE PTR [eax],al
    40a8:	00 02                	add    BYTE PTR [edx],al
    40aa:	04 07                	add    al,0x7
    40ac:	e3 00                	jecxz  40ae <sysEnter_Vector-0x12bf52>
    40ae:	00 00                	add    BYTE PTR [eax],al
    40b0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    40b3:	de 00                	fiadd  WORD PTR [eax]
    40b5:	00 00                	add    BYTE PTR [eax],al
    40b7:	02 01                	add    al,BYTE PTR [ecx]
    40b9:	06                   	push   es
    40ba:	f2 00 00             	repnz add BYTE PTR [eax],al
    40bd:	00 02                	add    BYTE PTR [edx],al
    40bf:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    40c5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    40cc:	02 08                	add    cl,BYTE PTR [eax]
    40ce:	05 00 00 00 00       	add    eax,0x0
    40d3:	02 08                	add    cl,BYTE PTR [eax]
    40d5:	07                   	pop    es
    40d6:	d9 00                	fld    DWORD PTR [eax]
    40d8:	00 00                	add    BYTE PTR [eax],al
    40da:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    40e1:	04 04                	add    al,0x4
    40e3:	71 00                	jno    40e5 <sysEnter_Vector-0x12bf1b>
    40e5:	00 00                	add    BYTE PTR [eax],al
    40e7:	02 01                	add    al,BYTE PTR [ecx]
    40e9:	06                   	push   es
    40ea:	f9                   	stc    
    40eb:	00 00                	add    BYTE PTR [eax],al
    40ed:	00 05 78 02 00 00    	add    BYTE PTR ds:0x278,al
    40f3:	02 34 19             	add    dh,BYTE PTR [ecx+ebx*1]
    40f6:	33 00                	xor    eax,DWORD PTR [eax]
    40f8:	00 00                	add    BYTE PTR [eax],al
    40fa:	05 8f 02 00 00       	add    eax,0x28f
    40ff:	02 56 1a             	add    dl,BYTE PTR [esi+0x1a]
    4102:	33 00                	xor    eax,DWORD PTR [eax]
    4104:	00 00                	add    BYTE PTR [eax],al
    4106:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    4109:	5e                   	pop    esi
    410a:	01 00                	add    DWORD PTR [eax],eax
    410c:	00 02                	add    BYTE PTR [edx],al
    410e:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    4111:	00 00                	add    BYTE PTR [eax],al
    4113:	00 06                	add    BYTE PTR [esi],al
    4115:	29 01                	sub    DWORD PTR [ecx],eax
    4117:	00 00                	add    BYTE PTR [eax],al
    4119:	03 33                	add    esi,DWORD PTR [ebx]
    411b:	0c b0                	or     al,0xb0
    411d:	00 00                	add    BYTE PTR [eax],al
    411f:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    4125:	9f                   	lahf   
    4126:	04 04                	add    al,0x4
    4128:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    412b:	00 06                	add    BYTE PTR [esi],al
    412d:	47                   	inc    edi
    412e:	02 00                	add    al,BYTE PTR [eax]
    4130:	00 04 35 10 c8 00 00 	add    BYTE PTR [esi*1+0xc810],al
    4137:	00 05 03 30 7f 00    	add    BYTE PTR ds:0x7f3003,al
    413d:	9f                   	lahf   
    413e:	04 04                	add    al,0x4
    4140:	84 00                	test   BYTE PTR [eax],al
    4142:	00 00                	add    BYTE PTR [eax],al
    4144:	06                   	push   es
    4145:	99                   	cdq    
    4146:	02 00                	add    al,BYTE PTR [eax]
    4148:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    414b:	0e                   	push   cs
    414c:	78 00                	js     414e <sysEnter_Vector-0x12beb2>
    414e:	00 00                	add    BYTE PTR [eax],al
    4150:	05 03 2c 7f 00       	add    eax,0x7f2c03
    4155:	9f                   	lahf   
    4156:	02 01                	add    al,BYTE PTR [ecx]
    4158:	02 ab 06 00 00 02    	add    ch,BYTE PTR [ebx+0x2000006]
    415e:	08 04 63             	or     BYTE PTR [ebx+eiz*2],al
    4161:	01 00                	add    DWORD PTR [eax],eax
    4163:	00 07                	add    BYTE PTR [edi],al
    4165:	4e                   	dec    esi
    4166:	0f 00 00             	sldt   WORD PTR [eax]
    4169:	01 0e                	add    DWORD PTR [esi],ecx
    416b:	0e                   	push   cs
    416c:	e0 00                	loopne 416e <sysEnter_Vector-0x12be92>
    416e:	00 00                	add    BYTE PTR [eax],al
    4170:	1d 3c 00 9f 5d       	sbb    eax,0x5d9f003c
    4175:	00 00                	add    BYTE PTR [eax],al
    4177:	00 01                	add    BYTE PTR [ecx],al
    4179:	9c                   	pushf  
    417a:	27                   	daa    
    417b:	01 00                	add    DWORD PTR [eax],eax
    417d:	00 08                	add    BYTE PTR [eax],cl
    417f:	73 74                	jae    41f5 <sysEnter_Vector-0x12be0b>
    4181:	72 00                	jb     4183 <sysEnter_Vector-0x12be7d>
    4183:	01 0e                	add    DWORD PTR [esi],ecx
    4185:	1d 6b 00 00 00       	sbb    eax,0x6b
    418a:	02 91 00 09 63 6e    	add    dl,BYTE PTR [ecx+0x6e630900]
    4190:	74 00                	je     4192 <sysEnter_Vector-0x12be6e>
    4192:	01 10                	add    DWORD PTR [eax],edx
    4194:	09 4f 00             	or     DWORD PTR [edi+0x0],ecx
    4197:	00 00                	add    BYTE PTR [eax],al
    4199:	02 91 74 00 0a 6e    	add    dl,BYTE PTR [ecx+0x6e0a0074]
    419f:	0f 00 00             	sldt   WORD PTR [eax]
    41a2:	01 09                	add    DWORD PTR [ecx],ecx
    41a4:	06                   	push   es
    41a5:	e0 00                	loopne 41a7 <sysEnter_Vector-0x12be59>
    41a7:	00 00                	add    BYTE PTR [eax],al
    41a9:	e9 3b 00 9f 34       	jmp    349f41e9 <sysEnter_Vector+0x348c41e9>
    41ae:	00 00                	add    BYTE PTR [eax],al
    41b0:	00 01                	add    BYTE PTR [ecx],al
    41b2:	9c                   	pushf  
    41b3:	08 63 00             	or     BYTE PTR [ebx+0x0],ah
    41b6:	01 09                	add    DWORD PTR [ecx],ecx
    41b8:	18 71 00             	sbb    BYTE PTR [ecx+0x0],dh
    41bb:	00 00                	add    BYTE PTR [eax],al
    41bd:	02 91 74 00 00 e2    	add    dl,BYTE PTR [ecx-0x1dffff8c]
    41c3:	01 00                	add    DWORD PTR [eax],eax
    41c5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    41c8:	36 15 00 00 04 01    	ss adc eax,0x1040000
    41ce:	28 00                	sub    BYTE PTR [eax],al
    41d0:	00 00                	add    BYTE PTR [eax],al
    41d2:	0c 9a                	or     al,0x9a
    41d4:	0f 00 00             	sldt   WORD PTR [eax]
    41d7:	fe 00                	inc    BYTE PTR [eax]
    41d9:	00 00                	add    BYTE PTR [eax],al
    41db:	7a 3c                	jp     4219 <sysEnter_Vector-0x12bde7>
    41dd:	00 9f b2 00 00 00    	add    BYTE PTR [edi+0xb2],bl
    41e3:	37                   	aaa    
    41e4:	21 00                	and    DWORD PTR [eax],eax
    41e6:	00 02                	add    BYTE PTR [edx],al
    41e8:	01 08                	add    DWORD PTR [eax],ecx
    41ea:	f0 00 00             	lock add BYTE PTR [eax],al
    41ed:	00 02                	add    BYTE PTR [edx],al
    41ef:	02 07                	add    al,BYTE PTR [edi]
    41f1:	0e                   	push   cs
    41f2:	00 00                	add    BYTE PTR [eax],al
    41f4:	00 02                	add    BYTE PTR [edx],al
    41f6:	04 07                	add    al,0x7
    41f8:	e3 00                	jecxz  41fa <sysEnter_Vector-0x12be06>
    41fa:	00 00                	add    BYTE PTR [eax],al
    41fc:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    41ff:	de 00                	fiadd  WORD PTR [eax]
    4201:	00 00                	add    BYTE PTR [eax],al
    4203:	02 01                	add    al,BYTE PTR [ecx]
    4205:	06                   	push   es
    4206:	f2 00 00             	repnz add BYTE PTR [eax],al
    4209:	00 02                	add    BYTE PTR [edx],al
    420b:	02 05 6a 01 00 00    	add    al,BYTE PTR ds:0x16a
    4211:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4218:	02 08                	add    cl,BYTE PTR [eax]
    421a:	05 00 00 00 00       	add    eax,0x0
    421f:	02 08                	add    cl,BYTE PTR [eax]
    4221:	07                   	pop    es
    4222:	d9 00                	fld    DWORD PTR [eax]
    4224:	00 00                	add    BYTE PTR [eax],al
    4226:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    422d:	04 04                	add    al,0x4
    422f:	71 00                	jno    4231 <sysEnter_Vector-0x12bdcf>
    4231:	00 00                	add    BYTE PTR [eax],al
    4233:	02 01                	add    al,BYTE PTR [ecx]
    4235:	06                   	push   es
    4236:	f9                   	stc    
    4237:	00 00                	add    BYTE PTR [eax],al
    4239:	00 05 71 00 00 00    	add    BYTE PTR ds:0x71,al
    423f:	06                   	push   es
    4240:	78 02                	js     4244 <sysEnter_Vector-0x12bdbc>
    4242:	00 00                	add    BYTE PTR [eax],al
    4244:	02 34 19             	add    dh,BYTE PTR [ecx+ebx*1]
    4247:	33 00                	xor    eax,DWORD PTR [eax]
    4249:	00 00                	add    BYTE PTR [eax],al
    424b:	06                   	push   es
    424c:	8f 02                	pop    DWORD PTR [edx]
    424e:	00 00                	add    BYTE PTR [eax],al
    4250:	02 56 1a             	add    dl,BYTE PTR [esi+0x1a]
    4253:	33 00                	xor    eax,DWORD PTR [eax]
    4255:	00 00                	add    BYTE PTR [eax],al
    4257:	06                   	push   es
    4258:	d2 02                	rol    BYTE PTR [edx],cl
    425a:	00 00                	add    BYTE PTR [eax],al
    425c:	03 d1                	add    edx,ecx
    425e:	17                   	pop    ss
    425f:	33 00                	xor    eax,DWORD PTR [eax]
    4261:	00 00                	add    BYTE PTR [eax],al
    4263:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    4266:	5e                   	pop    esi
    4267:	01 00                	add    DWORD PTR [eax],eax
    4269:	00 02                	add    BYTE PTR [edx],al
    426b:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    426e:	00 00                	add    BYTE PTR [eax],al
    4270:	00 07                	add    BYTE PTR [edi],al
    4272:	29 01                	sub    DWORD PTR [ecx],eax
    4274:	00 00                	add    BYTE PTR [eax],al
    4276:	04 33                	add    al,0x33
    4278:	0c c1                	or     al,0xc1
    427a:	00 00                	add    BYTE PTR [eax],al
    427c:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    4282:	9f                   	lahf   
    4283:	04 04                	add    al,0x4
    4285:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    4288:	00 07                	add    BYTE PTR [edi],al
    428a:	47                   	inc    edi
    428b:	02 00                	add    al,BYTE PTR [eax]
    428d:	00 05 35 10 d9 00    	add    BYTE PTR ds:0xd91035,al
    4293:	00 00                	add    BYTE PTR [eax],al
    4295:	05 03 30 7f 00       	add    eax,0x7f3003
    429a:	9f                   	lahf   
    429b:	04 04                	add    al,0x4
    429d:	89 00                	mov    DWORD PTR [eax],eax
    429f:	00 00                	add    BYTE PTR [eax],al
    42a1:	07                   	pop    es
    42a2:	99                   	cdq    
    42a3:	02 00                	add    al,BYTE PTR [eax]
    42a5:	00 05 36 0e 7d 00    	add    BYTE PTR ds:0x7d0e36,al
    42ab:	00 00                	add    BYTE PTR [eax],al
    42ad:	05 03 2c 7f 00       	add    eax,0x7f2c03
    42b2:	9f                   	lahf   
    42b3:	04 04                	add    al,0x4
    42b5:	78 00                	js     42b7 <sysEnter_Vector-0x12bd49>
    42b7:	00 00                	add    BYTE PTR [eax],al
    42b9:	02 01                	add    al,BYTE PTR [ecx]
    42bb:	02 ab 06 00 00 02    	add    ch,BYTE PTR [ebx+0x2000006]
    42c1:	08 04 63             	or     BYTE PTR [ebx+eiz*2],al
    42c4:	01 00                	add    DWORD PTR [eax],eax
    42c6:	00 08                	add    BYTE PTR [eax],cl
    42c8:	92                   	xchg   edx,eax
    42c9:	0f 00 00             	sldt   WORD PTR [eax]
    42cc:	01 18                	add    DWORD PTR [eax],ebx
    42ce:	10 95 00 00 00 0a    	adc    BYTE PTR [ebp+0xa000000],dl
    42d4:	3d 00 9f 22 00       	cmp    eax,0x229f00
    42d9:	00 00                	add    BYTE PTR [eax],al
    42db:	01 9c 3e 01 00 00 09 	add    DWORD PTR [esi+edi*1+0x9000001],ebx
    42e2:	73 74                	jae    4358 <sysEnter_Vector-0x12bca8>
    42e4:	72 00                	jb     42e6 <sysEnter_Vector-0x12bd1a>
    42e6:	01 18                	add    DWORD PTR [eax],ebx
    42e8:	24 f1                	and    al,0xf1
    42ea:	00 00                	add    BYTE PTR [eax],al
    42ec:	00 02                	add    BYTE PTR [edx],al
    42ee:	91                   	xchg   ecx,eax
    42ef:	00 0a                	add    BYTE PTR [edx],cl
    42f1:	9b                   	fwait
    42f2:	07                   	pop    es
    42f3:	00 00                	add    BYTE PTR [eax],al
    42f5:	01 18                	add    DWORD PTR [eax],ebx
    42f7:	2d 4f 00 00 00       	sub    eax,0x4f
    42fc:	02 91 04 00 0b 89    	add    dl,BYTE PTR [ecx-0x76f4fffc]
    4302:	0f 00 00             	sldt   WORD PTR [eax]
    4305:	01 10                	add    DWORD PTR [eax],edx
    4307:	08 95 00 00 00 cd    	or     BYTE PTR [ebp-0x33000000],dl
    430d:	3c 00                	cmp    al,0x0
    430f:	9f                   	lahf   
    4310:	3d 00 00 00 01       	cmp    eax,0x1000000
    4315:	9c                   	pushf  
    4316:	86 01                	xchg   BYTE PTR [ecx],al
    4318:	00 00                	add    BYTE PTR [eax],al
    431a:	09 73 74             	or     DWORD PTR [ebx+0x74],esi
    431d:	72 00                	jb     431f <sysEnter_Vector-0x12bce1>
    431f:	01 10                	add    DWORD PTR [eax],edx
    4321:	1d f1 00 00 00       	sbb    eax,0xf1
    4326:	02 91 00 0a 9b 07    	add    dl,BYTE PTR [ecx+0x79b0a00]
    432c:	00 00                	add    BYTE PTR [eax],al
    432e:	01 10                	add    DWORD PTR [eax],edx
    4330:	29 95 00 00 00 02    	sub    DWORD PTR [ebp+0x2000000],edx
    4336:	91                   	xchg   ecx,eax
    4337:	04 0c                	add    al,0xc
    4339:	72 65                	jb     43a0 <sysEnter_Vector-0x12bc60>
    433b:	74 00                	je     433d <sysEnter_Vector-0x12bcc3>
    433d:	01 12                	add    DWORD PTR [edx],edx
    433f:	0a 95 00 00 00 02    	or     dl,BYTE PTR [ebp+0x2000000]
    4345:	91                   	xchg   ecx,eax
    4346:	74 00                	je     4348 <sysEnter_Vector-0x12bcb8>
    4348:	08 82 0f 00 00 01    	or     BYTE PTR [edx+0x100000f],al
    434e:	0b 2f                	or     ebp,DWORD PTR [edi]
    4350:	95                   	xchg   ebp,eax
    4351:	00 00                	add    BYTE PTR [eax],al
    4353:	00 af 3c 00 9f 1e    	add    BYTE PTR [edi+0x1e9f003c],ch
    4359:	00 00                	add    BYTE PTR [eax],al
    435b:	00 01                	add    BYTE PTR [ecx],al
    435d:	9c                   	pushf  
    435e:	b0 01                	mov    al,0x1
    4360:	00 00                	add    BYTE PTR [eax],al
    4362:	09 73 74             	or     DWORD PTR [ebx+0x74],esi
    4365:	72 00                	jb     4367 <sysEnter_Vector-0x12bc99>
    4367:	01 0b                	add    DWORD PTR [ebx],ecx
    4369:	42                   	inc    edx
    436a:	f1                   	icebp  
    436b:	00 00                	add    BYTE PTR [eax],al
    436d:	00 02                	add    BYTE PTR [edx],al
    436f:	91                   	xchg   ecx,eax
    4370:	00 00                	add    BYTE PTR [eax],al
    4372:	0d 7a 0f 00 00       	or     eax,0xf7a
    4377:	01 04 08             	add    DWORD PTR [eax+ecx*1],eax
    437a:	95                   	xchg   ebp,eax
    437b:	00 00                	add    BYTE PTR [eax],al
    437d:	00 7a 3c             	add    BYTE PTR [edx+0x3c],bh
    4380:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    4386:	01 9c 09 73 74 72 00 	add    DWORD PTR [ecx+ecx*1+0x727473],ebx
    438d:	01 04 1c             	add    DWORD PTR [esp+ebx*1],eax
    4390:	f1                   	icebp  
    4391:	00 00                	add    BYTE PTR [eax],al
    4393:	00 02                	add    BYTE PTR [edx],al
    4395:	91                   	xchg   ecx,eax
    4396:	00 0c 72             	add    BYTE PTR [edx+esi*2],cl
    4399:	65 74 00             	gs je  439c <sysEnter_Vector-0x12bc64>
    439c:	01 05 12 95 00 00    	add    DWORD PTR ds:0x9512,eax
    43a2:	00 02                	add    BYTE PTR [edx],al
    43a4:	91                   	xchg   ecx,eax
    43a5:	74 00                	je     43a7 <sysEnter_Vector-0x12bc59>
    43a7:	00 ee                	add    dh,ch
    43a9:	00 00                	add    BYTE PTR [eax],al
    43ab:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    43ae:	1d 16 00 00 04       	sbb    eax,0x4000016
    43b3:	01 28                	add    DWORD PTR [eax],ebp
    43b5:	00 00                	add    BYTE PTR [eax],al
    43b7:	00 0c c0             	add    BYTE PTR [eax+eax*8],cl
    43ba:	0f 00 00             	sldt   WORD PTR [eax]
    43bd:	fe 00                	inc    BYTE PTR [eax]
    43bf:	00 00                	add    BYTE PTR [eax],al
    43c1:	2c 3d                	sub    al,0x3d
    43c3:	00 9f d6 00 00 00    	add    BYTE PTR [edi+0xd6],bl
    43c9:	1b 22                	sbb    esp,DWORD PTR [edx]
    43cb:	00 00                	add    BYTE PTR [eax],al
    43cd:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    43d4:	03 d2                	add    edx,edx
    43d6:	02 00                	add    al,BYTE PTR [eax]
    43d8:	00 02                	add    BYTE PTR [edx],al
    43da:	d1 17                	rcl    DWORD PTR [edi],1
    43dc:	38 00                	cmp    BYTE PTR [eax],al
    43de:	00 00                	add    BYTE PTR [eax],al
    43e0:	04 04                	add    al,0x4
    43e2:	07                   	pop    es
    43e3:	e3 00                	jecxz  43e5 <sysEnter_Vector-0x12bc1b>
    43e5:	00 00                	add    BYTE PTR [eax],al
    43e7:	04 04                	add    al,0x4
    43e9:	05 05 00 00 00       	add    eax,0x5
    43ee:	04 08                	add    al,0x8
    43f0:	05 00 00 00 00       	add    eax,0x0
    43f5:	04 0c                	add    al,0xc
    43f7:	04 5e                	add    al,0x5e
    43f9:	01 00                	add    DWORD PTR [eax],eax
    43fb:	00 04 10             	add    BYTE PTR [eax+edx*1],al
    43fe:	04 cf                	add    al,0xcf
    4400:	00 00                	add    BYTE PTR [eax],al
    4402:	00 05 af 0f 00 00    	add    BYTE PTR ds:0xfaf,al
    4408:	01 16                	add    DWORD PTR [esi],edx
    440a:	05 25 00 00 00       	add    eax,0x25
    440f:	97                   	xchg   edi,eax
    4410:	3d 00 9f 6b 00       	cmp    eax,0x6b9f00
    4415:	00 00                	add    BYTE PTR [eax],al
    4417:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    441e:	73 31                	jae    4451 <sysEnter_Vector-0x12bbaf>
    4420:	00 01                	add    BYTE PTR [ecx],al
    4422:	16                   	push   ss
    4423:	1a 9f 00 00 00 02    	sbb    bl,BYTE PTR [edi+0x2000000]
    4429:	91                   	xchg   ecx,eax
    442a:	00 06                	add    BYTE PTR [esi],al
    442c:	73 32                	jae    4460 <sysEnter_Vector-0x12bba0>
    442e:	00 01                	add    BYTE PTR [ecx],al
    4430:	16                   	push   ss
    4431:	2a 9f 00 00 00 02    	sub    bl,BYTE PTR [edi+0x2000000]
    4437:	91                   	xchg   ecx,eax
    4438:	04 06                	add    al,0x6
    443a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    443b:	00 01                	add    BYTE PTR [ecx],al
    443d:	16                   	push   ss
    443e:	35 2c 00 00 00       	xor    eax,0x2c
    4443:	02 91 08 00 07 04    	add    dl,BYTE PTR [ecx+0x4070008]
    4449:	ac                   	lods   al,BYTE PTR ds:[esi]
    444a:	00 00                	add    BYTE PTR [eax],al
    444c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    444f:	06                   	push   es
    4450:	f9                   	stc    
    4451:	00 00                	add    BYTE PTR [eax],al
    4453:	00 08                	add    BYTE PTR [eax],cl
    4455:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    4456:	00 00                	add    BYTE PTR [eax],al
    4458:	00 09                	add    BYTE PTR [ecx],cl
    445a:	b8 0f 00 00 01       	mov    eax,0x100000f
    445f:	0c 2c                	or     al,0x2c
    4461:	25 00 00 00 2c       	and    eax,0x2c000000
    4466:	3d 00 9f 6b 00       	cmp    eax,0x6b9f00
    446b:	00 00                	add    BYTE PTR [eax],al
    446d:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    4474:	0c 40                	or     al,0x40
    4476:	9f                   	lahf   
    4477:	00 00                	add    BYTE PTR [eax],al
    4479:	00 02                	add    BYTE PTR [edx],al
    447b:	91                   	xchg   ecx,eax
    447c:	00 06                	add    BYTE PTR [esi],al
    447e:	73 32                	jae    44b2 <sysEnter_Vector-0x12bb4e>
    4480:	00 01                	add    BYTE PTR [ecx],al
    4482:	0c 50                	or     al,0x50
    4484:	9f                   	lahf   
    4485:	00 00                	add    BYTE PTR [eax],al
    4487:	00 02                	add    BYTE PTR [edx],al
    4489:	91                   	xchg   ecx,eax
    448a:	04 06                	add    al,0x6
    448c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    448d:	00 01                	add    BYTE PTR [ecx],al
    448f:	0c 5b                	or     al,0x5b
    4491:	2c 00                	sub    al,0x0
    4493:	00 00                	add    BYTE PTR [eax],al
    4495:	02 91 08 00 00 01    	add    dl,BYTE PTR [ecx+0x1000008]
    449b:	01 00                	add    DWORD PTR [eax],eax
    449d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    44a0:	b1 16                	mov    cl,0x16
    44a2:	00 00                	add    BYTE PTR [eax],al
    44a4:	04 01                	add    al,0x1
    44a6:	28 00                	sub    BYTE PTR [eax],al
    44a8:	00 00                	add    BYTE PTR [eax],al
    44aa:	0c d6                	or     al,0xd6
    44ac:	0f 00 00             	sldt   WORD PTR [eax]
    44af:	fe 00                	inc    BYTE PTR [eax]
    44b1:	00 00                	add    BYTE PTR [eax],al
    44b3:	02 3e                	add    bh,BYTE PTR [esi]
    44b5:	00 9f 94 00 00 00    	add    BYTE PTR [edi+0x94],bl
    44bb:	17                   	pop    ss
    44bc:	23 00                	and    eax,DWORD PTR [eax]
    44be:	00 02                	add    BYTE PTR [edx],al
    44c0:	04 05                	add    al,0x5
    44c2:	69 6e 74 00 03 d2 02 	imul   ebp,DWORD PTR [esi+0x74],0x2d20300
    44c9:	00 00                	add    BYTE PTR [eax],al
    44cb:	02 d1                	add    dl,cl
    44cd:	17                   	pop    ss
    44ce:	38 00                	cmp    BYTE PTR [eax],al
    44d0:	00 00                	add    BYTE PTR [eax],al
    44d2:	04 04                	add    al,0x4
    44d4:	07                   	pop    es
    44d5:	e3 00                	jecxz  44d7 <sysEnter_Vector-0x12bb29>
    44d7:	00 00                	add    BYTE PTR [eax],al
    44d9:	04 04                	add    al,0x4
    44db:	05 05 00 00 00       	add    eax,0x5
    44e0:	04 08                	add    al,0x8
    44e2:	05 00 00 00 00       	add    eax,0x0
    44e7:	04 0c                	add    al,0xc
    44e9:	04 5e                	add    al,0x5e
    44eb:	01 00                	add    DWORD PTR [eax],eax
    44ed:	00 04 10             	add    BYTE PTR [eax+edx*1],al
    44f0:	04 cf                	add    al,0xcf
    44f2:	00 00                	add    BYTE PTR [eax],al
    44f4:	00 05 f5 0f 00 00    	add    BYTE PTR ds:0xff5,al
    44fa:	01 1d 2f 9f 00 00    	add    DWORD PTR ds:0x9f2f,ebx
    4500:	00 72 3e             	add    BYTE PTR [edx+0x3e],dh
    4503:	00 9f 24 00 00 00    	add    BYTE PTR [edi+0x24],bl
    4509:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    4510:	73 31                	jae    4543 <sysEnter_Vector-0x12babd>
    4512:	00 01                	add    BYTE PTR [ecx],al
    4514:	1d 3d 9f 00 00       	sbb    eax,0x9f3d
    4519:	00 02                	add    BYTE PTR [edx],al
    451b:	91                   	xchg   ecx,eax
    451c:	00 06                	add    BYTE PTR [esi],al
    451e:	73 32                	jae    4552 <sysEnter_Vector-0x12baae>
    4520:	00 01                	add    BYTE PTR [ecx],al
    4522:	1d 4d b1 00 00       	sbb    eax,0xb14d
    4527:	00 02                	add    BYTE PTR [edx],al
    4529:	91                   	xchg   ecx,eax
    452a:	04 06                	add    al,0x6
    452c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    452d:	00 01                	add    BYTE PTR [ecx],al
    452f:	1d 58 2c 00 00       	sbb    eax,0x2c58
    4534:	00 02                	add    BYTE PTR [edx],al
    4536:	91                   	xchg   ecx,eax
    4537:	08 00                	or     BYTE PTR [eax],al
    4539:	07                   	pop    es
    453a:	04 a5                	add    al,0xa5
    453c:	00 00                	add    BYTE PTR [eax],al
    453e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4541:	06                   	push   es
    4542:	f9                   	stc    
    4543:	00 00                	add    BYTE PTR [eax],al
    4545:	00 08                	add    BYTE PTR [eax],cl
    4547:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    4548:	00 00                	add    BYTE PTR [eax],al
    454a:	00 07                	add    BYTE PTR [edi],al
    454c:	04 ac                	add    al,0xac
    454e:	00 00                	add    BYTE PTR [eax],al
    4550:	00 09                	add    BYTE PTR [ecx],cl
    4552:	ec                   	in     al,dx
    4553:	0f 00 00             	sldt   WORD PTR [eax]
    4556:	01 0d 07 9f 00 00    	add    DWORD PTR ds:0x9f07,ecx
    455c:	00 02                	add    BYTE PTR [edx],al
    455e:	3e 00 9f 70 00 00 00 	add    BYTE PTR ds:[edi+0x70],bl
    4565:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    456c:	0d 16 9f 00 00       	or     eax,0x9f16
    4571:	00 02                	add    BYTE PTR [edx],al
    4573:	91                   	xchg   ecx,eax
    4574:	00 06                	add    BYTE PTR [esi],al
    4576:	73 32                	jae    45aa <sysEnter_Vector-0x12ba56>
    4578:	00 01                	add    BYTE PTR [ecx],al
    457a:	0d 26 b1 00 00       	or     eax,0xb126
    457f:	00 02                	add    BYTE PTR [edx],al
    4581:	91                   	xchg   ecx,eax
    4582:	04 06                	add    al,0x6
    4584:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4585:	00 01                	add    BYTE PTR [ecx],al
    4587:	0d 31 2c 00 00       	or     eax,0x2c31
    458c:	00 02                	add    BYTE PTR [edx],al
    458e:	91                   	xchg   ecx,eax
    458f:	08 0a                	or     BYTE PTR [edx],cl
    4591:	73 00                	jae    4593 <sysEnter_Vector-0x12ba6d>
    4593:	01 0f                	add    DWORD PTR [edi],ecx
    4595:	0b 9f 00 00 00 02    	or     ebx,DWORD PTR [edi+0x2000000]
    459b:	91                   	xchg   ecx,eax
    459c:	74 00                	je     459e <sysEnter_Vector-0x12ba62>
    459e:	00 13                	add    BYTE PTR [ebx],dl
    45a0:	01 00                	add    DWORD PTR [eax],eax
    45a2:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    45a5:	56                   	push   esi
    45a6:	17                   	pop    ss
    45a7:	00 00                	add    BYTE PTR [eax],al
    45a9:	04 01                	add    al,0x1
    45ab:	28 00                	sub    BYTE PTR [eax],al
    45ad:	00 00                	add    BYTE PTR [eax],al
    45af:	0c 10                	or     al,0x10
    45b1:	10 00                	adc    BYTE PTR [eax],al
    45b3:	00 fe                	add    dh,bh
    45b5:	00 00                	add    BYTE PTR [eax],al
    45b7:	00 96 3e 00 9f 82    	add    BYTE PTR [esi-0x7d60ffc2],dl
    45bd:	01 00                	add    DWORD PTR [eax],eax
    45bf:	00 d9                	add    cl,bl
    45c1:	23 00                	and    eax,DWORD PTR [eax]
    45c3:	00 02                	add    BYTE PTR [edx],al
    45c5:	04 05                	add    al,0x5
    45c7:	69 6e 74 00 03 04 07 	imul   ebp,DWORD PTR [esi+0x74],0x7040300
    45ce:	e3 00                	jecxz  45d0 <sysEnter_Vector-0x12ba30>
    45d0:	00 00                	add    BYTE PTR [eax],al
    45d2:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    45d9:	03 08                	add    ecx,DWORD PTR [eax]
    45db:	05 00 00 00 00       	add    eax,0x0
    45e0:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    45e3:	5e                   	pop    esi
    45e4:	01 00                	add    DWORD PTR [eax],eax
    45e6:	00 03                	add    BYTE PTR [ebx],al
    45e8:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    45eb:	00 00                	add    BYTE PTR [eax],al
    45ed:	00 03                	add    BYTE PTR [ebx],al
    45ef:	01 06                	add    DWORD PTR [esi],eax
    45f1:	f9                   	stc    
    45f2:	00 00                	add    BYTE PTR [eax],al
    45f4:	00 04 4f             	add    BYTE PTR [edi+ecx*2],al
    45f7:	00 00                	add    BYTE PTR [eax],al
    45f9:	00 05 25 10 00 00    	add    BYTE PTR ds:0x1025,al
    45ff:	01 3b                	add    DWORD PTR [ebx],edi
    4601:	28 fd                	sub    ch,bh
    4603:	00 00                	add    BYTE PTR [eax],al
    4605:	00 96 3e 00 9f 82    	add    BYTE PTR [esi-0x7d60ffc2],dl
    460b:	01 00                	add    DWORD PTR [eax],eax
    460d:	00 01                	add    BYTE PTR [ecx],al
    460f:	9c                   	pushf  
    4610:	fd                   	std    
    4611:	00 00                	add    BYTE PTR [eax],al
    4613:	00 06                	add    BYTE PTR [esi],al
    4615:	fd                   	std    
    4616:	0f 00 00             	sldt   WORD PTR [eax]
    4619:	01 3b                	add    DWORD PTR [ebx],edi
    461b:	3c 04                	cmp    al,0x4
    461d:	01 00                	add    DWORD PTR [eax],eax
    461f:	00 02                	add    BYTE PTR [edx],al
    4621:	91                   	xchg   ecx,eax
    4622:	00 06                	add    BYTE PTR [esi],al
    4624:	2d 10 00 00 01       	sub    eax,0x1000010
    4629:	3b 49 0a             	cmp    ecx,DWORD PTR [ecx+0xa]
    462c:	01 00                	add    DWORD PTR [eax],eax
    462e:	00 02                	add    BYTE PTR [edx],al
    4630:	91                   	xchg   ecx,eax
    4631:	04 06                	add    al,0x6
    4633:	3a 0e                	cmp    cl,BYTE PTR [esi]
    4635:	00 00                	add    BYTE PTR [eax],al
    4637:	01 3b                	add    DWORD PTR [ebx],edi
    4639:	5e                   	pop    esi
    463a:	25 00 00 00 02       	and    eax,0x2000000
    463f:	91                   	xchg   ecx,eax
    4640:	08 07                	or     BYTE PTR [edi],al
    4642:	73 00                	jae    4644 <sysEnter_Vector-0x12b9bc>
    4644:	01 3d 17 04 01 00    	add    DWORD PTR ds:0x10417,edi
    464a:	00 01                	add    BYTE PTR [ecx],al
    464c:	56                   	push   esi
    464d:	07                   	pop    es
    464e:	61                   	popa   
    464f:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    4652:	01 3e                	add    DWORD PTR [esi],edi
    4654:	19 fd                	sbb    ebp,edi
    4656:	00 00                	add    BYTE PTR [eax],al
    4658:	00 01                	add    BYTE PTR [ecx],al
    465a:	57                   	push   edi
    465b:	07                   	pop    es
    465c:	63 00                	arpl   WORD PTR [eax],ax
    465e:	01 3f                	add    DWORD PTR [edi],edi
    4660:	0f 25                	(bad)  
    4662:	00 00                	add    BYTE PTR [eax],al
    4664:	00 01                	add    BYTE PTR [ecx],al
    4666:	53                   	push   ebx
    4667:	08 02                	or     BYTE PTR [edx],al
    4669:	10 00                	adc    BYTE PTR [eax],al
    466b:	00 01                	add    BYTE PTR [ecx],al
    466d:	40                   	inc    eax
    466e:	19 fd                	sbb    ebp,edi
    4670:	00 00                	add    BYTE PTR [eax],al
    4672:	00 09                	add    BYTE PTR [ecx],cl
    4674:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4675:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    4679:	41                   	inc    ecx
    467a:	0f 25                	(bad)  
    467c:	00 00                	add    BYTE PTR [eax],al
    467e:	00 07                	add    BYTE PTR [edi],al
    4680:	61                   	popa   
    4681:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4682:	79 00                	jns    4684 <sysEnter_Vector-0x12b97c>
    4684:	01 41 18             	add    DWORD PTR [ecx+0x18],eax
    4687:	25 00 00 00 01       	and    eax,0x1000000
    468c:	51                   	push   ecx
    468d:	0a 09                	or     cl,BYTE PTR [ecx]
    468f:	10 00                	adc    BYTE PTR [eax],al
    4691:	00 01                	add    BYTE PTR [ecx],al
    4693:	41                   	inc    ecx
    4694:	1d 25 00 00 00       	sbb    eax,0x25
    4699:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    469c:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    469f:	de 00                	fiadd  WORD PTR [eax]
    46a1:	00 00                	add    BYTE PTR [eax],al
    46a3:	0b 04 56             	or     eax,DWORD PTR [esi+edx*2]
    46a6:	00 00                	add    BYTE PTR [eax],al
    46a8:	00 0b                	add    BYTE PTR [ebx],cl
    46aa:	04 10                	add    al,0x10
    46ac:	01 00                	add    DWORD PTR [eax],eax
    46ae:	00 0b                	add    BYTE PTR [ebx],cl
    46b0:	04 4f                	add    al,0x4f
    46b2:	00 00                	add    BYTE PTR [eax],al
    46b4:	00 00                	add    BYTE PTR [eax],al
    46b6:	6f                   	outs   dx,DWORD PTR ds:[esi]
    46b7:	00 00                	add    BYTE PTR [eax],al
    46b9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    46bc:	ff 17                	call   DWORD PTR [edi]
    46be:	00 00                	add    BYTE PTR [eax],al
    46c0:	04 01                	add    al,0x1
    46c2:	28 00                	sub    BYTE PTR [eax],al
    46c4:	00 00                	add    BYTE PTR [eax],al
    46c6:	0c 34                	or     al,0x34
    46c8:	10 00                	adc    BYTE PTR [eax],al
    46ca:	00 fe                	add    dh,bh
    46cc:	00 00                	add    BYTE PTR [eax],al
    46ce:	00 18                	add    BYTE PTR [eax],bl
    46d0:	40                   	inc    eax
    46d1:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
    46d7:	3e 25 00 00 02 4b    	ds and eax,0x4b020000
    46dd:	10 00                	adc    BYTE PTR [eax],al
    46df:	00 01                	add    BYTE PTR [ecx],al
    46e1:	01 2e                	add    DWORD PTR [esi],ebp
    46e3:	5e                   	pop    esi
    46e4:	00 00                	add    BYTE PTR [eax],al
    46e6:	00 18                	add    BYTE PTR [eax],bl
    46e8:	40                   	inc    eax
    46e9:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
    46ef:	01 9c 5e 00 00 00 03 	add    DWORD PTR [esi+ebx*2+0x3000000],ebx
    46f6:	76 61                	jbe    4759 <sysEnter_Vector-0x12b8a7>
    46f8:	6c                   	ins    BYTE PTR es:[edi],dx
    46f9:	00 01                	add    BYTE PTR [ecx],al
    46fb:	01 3c 5e             	add    DWORD PTR [esi+ebx*2],edi
    46fe:	00 00                	add    BYTE PTR [eax],al
    4700:	00 02                	add    BYTE PTR [edx],al
    4702:	91                   	xchg   ecx,eax
    4703:	00 03                	add    BYTE PTR [ebx],al
    4705:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    4708:	00 01                	add    BYTE PTR [ecx],al
    470a:	01 45 6b             	add    DWORD PTR [ebp+0x6b],eax
    470d:	00 00                	add    BYTE PTR [eax],al
    470f:	00 02                	add    BYTE PTR [edx],al
    4711:	91                   	xchg   ecx,eax
    4712:	04 00                	add    al,0x0
    4714:	04 04                	add    al,0x4
    4716:	64 00 00             	add    BYTE PTR fs:[eax],al
    4719:	00 05 01 06 f9 00    	add    BYTE PTR ds:0xf90601,al
    471f:	00 00                	add    BYTE PTR [eax],al
    4721:	06                   	push   es
    4722:	04 05                	add    al,0x5
    4724:	69 6e 74 00 00 11 01 	imul   ebp,DWORD PTR [esi+0x74],0x1110000
    472b:	00 00                	add    BYTE PTR [eax],al
    472d:	04 00                	add    al,0x0
    472f:	61                   	popa   
    4730:	18 00                	sbb    BYTE PTR [eax],al
    4732:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4735:	28 00                	sub    BYTE PTR [eax],al
    4737:	00 00                	add    BYTE PTR [eax],al
    4739:	0c 5a                	or     al,0x5a
    473b:	10 00                	adc    BYTE PTR [eax],al
    473d:	00 fe                	add    dh,bh
    473f:	00 00                	add    BYTE PTR [eax],al
    4741:	00 39                	add    BYTE PTR [ecx],bh
    4743:	40                   	inc    eax
    4744:	00 9f a1 01 00 00    	add    BYTE PTR [edi+0x1a1],bl
    474a:	91                   	xchg   ecx,eax
    474b:	25 00 00 02 04       	and    eax,0x4020000
    4750:	05 69 6e 74 00       	add    eax,0x746e69
    4755:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    4758:	e3 00                	jecxz  475a <sysEnter_Vector-0x12b8a6>
    475a:	00 00                	add    BYTE PTR [eax],al
    475c:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4763:	03 08                	add    ecx,DWORD PTR [eax]
    4765:	05 00 00 00 00       	add    eax,0x0
    476a:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    476d:	5e                   	pop    esi
    476e:	01 00                	add    DWORD PTR [eax],eax
    4770:	00 03                	add    BYTE PTR [ebx],al
    4772:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    4775:	00 00                	add    BYTE PTR [eax],al
    4777:	00 03                	add    BYTE PTR [ebx],al
    4779:	01 06                	add    DWORD PTR [esi],eax
    477b:	f9                   	stc    
    477c:	00 00                	add    BYTE PTR [eax],al
    477e:	00 04 4f             	add    BYTE PTR [edi+ecx*2],al
    4781:	00 00                	add    BYTE PTR [eax],al
    4783:	00 05 53 10 00 00    	add    BYTE PTR ds:0x1053,al
    4789:	01 57 01             	add    DWORD PTR [edi+0x1],edx
    478c:	33 00                	xor    eax,DWORD PTR [eax]
    478e:	00 00                	add    BYTE PTR [eax],al
    4790:	39 40 00             	cmp    DWORD PTR [eax+0x0],eax
    4793:	9f                   	lahf   
    4794:	a1 01 00 00 01       	mov    eax,ds:0x1000001
    4799:	9c                   	pushf  
    479a:	fb                   	sti    
    479b:	00 00                	add    BYTE PTR [eax],al
    479d:	00 06                	add    BYTE PTR [esi],al
    479f:	fd                   	std    
    47a0:	0f 00 00             	sldt   WORD PTR [eax]
    47a3:	01 57 14             	add    DWORD PTR [edi+0x14],edx
    47a6:	fb                   	sti    
    47a7:	00 00                	add    BYTE PTR [eax],al
    47a9:	00 02                	add    BYTE PTR [edx],al
    47ab:	91                   	xchg   ecx,eax
    47ac:	00 06                	add    BYTE PTR [esi],al
    47ae:	2d 10 00 00 01       	sub    eax,0x1000010
    47b3:	57                   	push   edi
    47b4:	21 01                	and    DWORD PTR [ecx],eax
    47b6:	01 00                	add    DWORD PTR [eax],eax
    47b8:	00 02                	add    BYTE PTR [edx],al
    47ba:	91                   	xchg   ecx,eax
    47bb:	04 06                	add    al,0x6
    47bd:	3a 0e                	cmp    cl,BYTE PTR [esi]
    47bf:	00 00                	add    BYTE PTR [eax],al
    47c1:	01 57 36             	add    DWORD PTR [edi+0x36],edx
    47c4:	25 00 00 00 02       	and    eax,0x2000000
    47c9:	91                   	xchg   ecx,eax
    47ca:	08 07                	or     BYTE PTR [edi],al
    47cc:	73 00                	jae    47ce <sysEnter_Vector-0x12b832>
    47ce:	01 59 17             	add    DWORD PTR [ecx+0x17],ebx
    47d1:	fb                   	sti    
    47d2:	00 00                	add    BYTE PTR [eax],al
    47d4:	00 01                	add    BYTE PTR [ecx],al
    47d6:	56                   	push   esi
    47d7:	07                   	pop    es
    47d8:	61                   	popa   
    47d9:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    47dc:	01 5a 19             	add    DWORD PTR [edx+0x19],ebx
    47df:	0d 01 00 00 01       	or     eax,0x1000001
    47e4:	57                   	push   edi
    47e5:	07                   	pop    es
    47e6:	63 00                	arpl   WORD PTR [eax],ax
    47e8:	01 5b 0f             	add    DWORD PTR [ebx+0xf],ebx
    47eb:	25 00 00 00 01       	and    eax,0x1000000
    47f0:	53                   	push   ebx
    47f1:	08 02                	or     BYTE PTR [edx],al
    47f3:	10 00                	adc    BYTE PTR [eax],al
    47f5:	00 01                	add    BYTE PTR [ecx],al
    47f7:	5c                   	pop    esp
    47f8:	19 0d 01 00 00 09    	sbb    DWORD PTR ds:0x9000001,ecx
    47fe:	6e                   	outs   dx,BYTE PTR ds:[esi]
    47ff:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    4803:	5d                   	pop    ebp
    4804:	0f 25                	(bad)  
    4806:	00 00                	add    BYTE PTR [eax],al
    4808:	00 07                	add    BYTE PTR [edi],al
    480a:	61                   	popa   
    480b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    480c:	79 00                	jns    480e <sysEnter_Vector-0x12b7f2>
    480e:	01 5d 18             	add    DWORD PTR [ebp+0x18],ebx
    4811:	25 00 00 00 01       	and    eax,0x1000000
    4816:	51                   	push   ecx
    4817:	08 09                	or     BYTE PTR [ecx],cl
    4819:	10 00                	adc    BYTE PTR [eax],al
    481b:	00 01                	add    BYTE PTR [ecx],al
    481d:	5d                   	pop    ebp
    481e:	1d 25 00 00 00       	sbb    eax,0x25
    4823:	00 0a                	add    BYTE PTR [edx],cl
    4825:	04 56                	add    al,0x56
    4827:	00 00                	add    BYTE PTR [eax],al
    4829:	00 0a                	add    BYTE PTR [edx],cl
    482b:	04 07                	add    al,0x7
    482d:	01 00                	add    DWORD PTR [eax],eax
    482f:	00 0a                	add    BYTE PTR [edx],cl
    4831:	04 4f                	add    al,0x4f
    4833:	00 00                	add    BYTE PTR [eax],al
    4835:	00 03                	add    BYTE PTR [ebx],al
    4837:	04 07                	add    al,0x7
    4839:	de 00                	fiadd  WORD PTR [eax]
    483b:	00 00                	add    BYTE PTR [eax],al
    483d:	00 ce                	add    dh,cl
    483f:	00 00                	add    BYTE PTR [eax],al
    4841:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4844:	f9                   	stc    
    4845:	18 00                	sbb    BYTE PTR [eax],al
    4847:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    484a:	28 00                	sub    BYTE PTR [eax],al
    484c:	00 00                	add    BYTE PTR [eax],al
    484e:	0c 75                	or     al,0x75
    4850:	10 00                	adc    BYTE PTR [eax],al
    4852:	00 fe                	add    dh,bh
    4854:	00 00                	add    BYTE PTR [eax],al
    4856:	00 da                	add    dl,bl
    4858:	41                   	inc    ecx
    4859:	00 9f be 00 00 00    	add    BYTE PTR [edi+0xbe],bl
    485f:	37                   	aaa    
    4860:	27                   	daa    
    4861:	00 00                	add    BYTE PTR [eax],al
    4863:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    486a:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    486d:	e3 00                	jecxz  486f <sysEnter_Vector-0x12b791>
    486f:	00 00                	add    BYTE PTR [eax],al
    4871:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4878:	03 08                	add    ecx,DWORD PTR [eax]
    487a:	05 00 00 00 00       	add    eax,0x0
    487f:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4882:	5e                   	pop    esi
    4883:	01 00                	add    DWORD PTR [eax],eax
    4885:	00 03                	add    BYTE PTR [ebx],al
    4887:	10 04 cf             	adc    BYTE PTR [edi+ecx*8],al
    488a:	00 00                	add    BYTE PTR [eax],al
    488c:	00 03                	add    BYTE PTR [ebx],al
    488e:	01 06                	add    DWORD PTR [esi],eax
    4890:	f9                   	stc    
    4891:	00 00                	add    BYTE PTR [eax],al
    4893:	00 04 8b             	add    BYTE PTR [ebx+ecx*4],al
    4896:	10 00                	adc    BYTE PTR [eax],al
    4898:	00 01                	add    BYTE PTR [ecx],al
    489a:	1f                   	pop    ds
    489b:	2d 74 42 00 9f       	sub    eax,0x9f004274
    48a0:	24 00                	and    al,0x0
    48a2:	00 00                	add    BYTE PTR [eax],al
    48a4:	01 9c 7c 00 00 00 05 	add    DWORD PTR [esp+edi*2+0x5000000],ebx
    48ab:	6f                   	outs   dx,DWORD PTR ds:[esi]
    48ac:	10 00                	adc    BYTE PTR [eax],al
    48ae:	00 01                	add    BYTE PTR [ecx],al
    48b0:	1f                   	pop    ds
    48b1:	3b 7c 00 00          	cmp    edi,DWORD PTR [eax+eax*1+0x0]
    48b5:	00 02                	add    BYTE PTR [edx],al
    48b7:	91                   	xchg   ecx,eax
    48b8:	00 00                	add    BYTE PTR [eax],al
    48ba:	06                   	push   es
    48bb:	04 4f                	add    al,0x4f
    48bd:	00 00                	add    BYTE PTR [eax],al
    48bf:	00 07                	add    BYTE PTR [edi],al
    48c1:	93                   	xchg   ebx,eax
    48c2:	10 00                	adc    BYTE PTR [eax],al
    48c4:	00 01                	add    BYTE PTR [ecx],al
    48c6:	03 06                	add    eax,DWORD PTR [esi]
    48c8:	da 41 00             	fiadd  DWORD PTR [ecx+0x0]
    48cb:	9f                   	lahf   
    48cc:	9a 00 00 00 01 9c 05 	call   0x59c:0x1000000
    48d3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    48d4:	10 00                	adc    BYTE PTR [eax],al
    48d6:	00 01                	add    BYTE PTR [ecx],al
    48d8:	03 15 7c 00 00 00    	add    edx,DWORD PTR ds:0x7c
    48de:	02 91 00 08 64 73    	add    dl,BYTE PTR [ecx+0x73640800]
    48e4:	74 00                	je     48e6 <sysEnter_Vector-0x12b71a>
    48e6:	01 05 0a 7c 00 00    	add    DWORD PTR ds:0x7c0a,eax
    48ec:	00 02                	add    BYTE PTR [edx],al
    48ee:	91                   	xchg   ecx,eax
    48ef:	6c                   	ins    BYTE PTR es:[edi],dx
    48f0:	08 73 72             	or     BYTE PTR [ebx+0x72],dh
    48f3:	63 00                	arpl   WORD PTR [eax],ax
    48f5:	01 05 18 7c 00 00    	add    DWORD PTR ds:0x7c18,eax
    48fb:	00 02                	add    BYTE PTR [edx],al
    48fd:	91                   	xchg   ecx,eax
    48fe:	68 08 65 6e 64       	push   0x646e6508
    4903:	00 01                	add    BYTE PTR [ecx],al
    4905:	06                   	push   es
    4906:	0a 7c 00 00          	or     bh,BYTE PTR [eax+eax*1+0x0]
    490a:	00 02                	add    BYTE PTR [edx],al
    490c:	91                   	xchg   ecx,eax
    490d:	64 00 00             	add    BYTE PTR fs:[eax],al
    4910:	d5 01                	aad    0x1
    4912:	00 00                	add    BYTE PTR [eax],al
    4914:	04 00                	add    al,0x0
    4916:	84 19                	test   BYTE PTR [ecx],bl
    4918:	00 00                	add    BYTE PTR [eax],al
    491a:	04 01                	add    al,0x1
    491c:	28 00                	sub    BYTE PTR [eax],al
    491e:	00 00                	add    BYTE PTR [eax],al
    4920:	0c a4                	or     al,0xa4
    4922:	10 00                	adc    BYTE PTR [eax],al
    4924:	00 fe                	add    dh,bh
    4926:	00 00                	add    BYTE PTR [eax],al
    4928:	00 98 42 00 9f 3e    	add    BYTE PTR [eax+0x3e9f0042],bl
    492e:	01 00                	add    DWORD PTR [eax],eax
    4930:	00 ed                	add    ch,ch
    4932:	27                   	daa    
    4933:	00 00                	add    BYTE PTR [eax],al
    4935:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    493c:	03 d2                	add    edx,edx
    493e:	02 00                	add    al,BYTE PTR [eax]
    4940:	00 02                	add    BYTE PTR [edx],al
    4942:	d1 17                	rcl    DWORD PTR [edi],1
    4944:	38 00                	cmp    BYTE PTR [eax],al
    4946:	00 00                	add    BYTE PTR [eax],al
    4948:	04 04                	add    al,0x4
    494a:	07                   	pop    es
    494b:	e3 00                	jecxz  494d <sysEnter_Vector-0x12b6b3>
    494d:	00 00                	add    BYTE PTR [eax],al
    494f:	04 04                	add    al,0x4
    4951:	05 05 00 00 00       	add    eax,0x5
    4956:	04 08                	add    al,0x8
    4958:	05 00 00 00 00       	add    eax,0x0
    495d:	04 0c                	add    al,0xc
    495f:	04 5e                	add    al,0x5e
    4961:	01 00                	add    DWORD PTR [eax],eax
    4963:	00 04 10             	add    BYTE PTR [eax+edx*1],al
    4966:	04 cf                	add    al,0xcf
    4968:	00 00                	add    BYTE PTR [eax],al
    496a:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    496d:	06                   	push   es
    496e:	f9                   	stc    
    496f:	00 00                	add    BYTE PTR [eax],al
    4971:	00 05 5b 00 00 00    	add    BYTE PTR ds:0x5b,al
    4977:	04 01                	add    al,0x1
    4979:	08 f0                	or     al,dh
    497b:	00 00                	add    BYTE PTR [eax],al
    497d:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4980:	07                   	pop    es
    4981:	0e                   	push   cs
    4982:	00 00                	add    BYTE PTR [eax],al
    4984:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4987:	07                   	pop    es
    4988:	de 00                	fiadd  WORD PTR [eax]
    498a:	00 00                	add    BYTE PTR [eax],al
    498c:	04 01                	add    al,0x1
    498e:	06                   	push   es
    498f:	f2 00 00             	repnz add BYTE PTR [eax],al
    4992:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4995:	05 6a 01 00 00       	add    eax,0x16a
    499a:	04 08                	add    al,0x8
    499c:	07                   	pop    es
    499d:	d9 00                	fld    DWORD PTR [eax]
    499f:	00 00                	add    BYTE PTR [eax],al
    49a1:	06                   	push   es
    49a2:	04 5b                	add    al,0x5b
    49a4:	00 00                	add    BYTE PTR [eax],al
    49a6:	00 03                	add    BYTE PTR [ebx],al
    49a8:	78 02                	js     49ac <sysEnter_Vector-0x12b654>
    49aa:	00 00                	add    BYTE PTR [eax],al
    49ac:	03 34 19             	add    esi,DWORD PTR [ecx+ebx*1]
    49af:	38 00                	cmp    BYTE PTR [eax],al
    49b1:	00 00                	add    BYTE PTR [eax],al
    49b3:	03 8f 02 00 00 03    	add    ecx,DWORD PTR [edi+0x3000002]
    49b9:	56                   	push   esi
    49ba:	1a 38                	sbb    bh,BYTE PTR [eax]
    49bc:	00 00                	add    BYTE PTR [eax],al
    49be:	00 07                	add    BYTE PTR [edi],al
    49c0:	29 01                	sub    DWORD PTR [ecx],eax
    49c2:	00 00                	add    BYTE PTR [eax],al
    49c4:	04 33                	add    al,0x33
    49c6:	0c c1                	or     al,0xc1
    49c8:	00 00                	add    BYTE PTR [eax],al
    49ca:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    49d0:	9f                   	lahf   
    49d1:	06                   	push   es
    49d2:	04 91                	add    al,0x91
    49d4:	00 00                	add    BYTE PTR [eax],al
    49d6:	00 07                	add    BYTE PTR [edi],al
    49d8:	47                   	inc    edi
    49d9:	02 00                	add    al,BYTE PTR [eax]
    49db:	00 05 35 10 d9 00    	add    BYTE PTR ds:0xd91035,al
    49e1:	00 00                	add    BYTE PTR [eax],al
    49e3:	05 03 30 7f 00       	add    eax,0x7f3003
    49e8:	9f                   	lahf   
    49e9:	06                   	push   es
    49ea:	04 a3                	add    al,0xa3
    49ec:	00 00                	add    BYTE PTR [eax],al
    49ee:	00 07                	add    BYTE PTR [edi],al
    49f0:	99                   	cdq    
    49f1:	02 00                	add    al,BYTE PTR [eax]
    49f3:	00 05 36 0e 97 00    	add    BYTE PTR ds:0x970e36,al
    49f9:	00 00                	add    BYTE PTR [eax],al
    49fb:	05 03 2c 7f 00       	add    eax,0x7f2c03
    4a00:	9f                   	lahf   
    4a01:	06                   	push   es
    4a02:	04 62                	add    al,0x62
    4a04:	00 00                	add    BYTE PTR [eax],al
    4a06:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4a09:	02 ab 06 00 00 04    	add    ch,BYTE PTR [ebx+0x4000006]
    4a0f:	08 04 63             	or     BYTE PTR [ebx+eiz*2],al
    4a12:	01 00                	add    DWORD PTR [eax],eax
    4a14:	00 08                	add    BYTE PTR [eax],cl
    4a16:	c6                   	(bad)  
    4a17:	10 00                	adc    BYTE PTR [eax],al
    4a19:	00 01                	add    BYTE PTR [ecx],al
    4a1b:	2a 0f                	sub    cl,BYTE PTR [edi]
    4a1d:	91                   	xchg   ecx,eax
    4a1e:	00 00                	add    BYTE PTR [eax],al
    4a20:	00 ac 43 00 9f 2a 00 	add    BYTE PTR [ebx+eax*2+0x2a9f00],ch
    4a27:	00 00                	add    BYTE PTR [eax],al
    4a29:	01 9c 5a 01 00 00 09 	add    DWORD PTR [edx+ebx*2+0x9000001],ebx
    4a30:	69 6e 00 01 2a 26 f1 	imul   ebp,DWORD PTR [esi+0x0],0xf1262a01
    4a37:	00 00                	add    BYTE PTR [eax],al
    4a39:	00 02                	add    BYTE PTR [edx],al
    4a3b:	91                   	xchg   ecx,eax
    4a3c:	00 0a                	add    BYTE PTR [edx],cl
    4a3e:	d1 10                	rcl    DWORD PTR [eax],1
    4a40:	00 00                	add    BYTE PTR [eax],al
    4a42:	01 2a                	add    DWORD PTR [edx],ebp
    4a44:	36 f1                	ss icebp 
    4a46:	00 00                	add    BYTE PTR [eax],al
    4a48:	00 02                	add    BYTE PTR [edx],al
    4a4a:	91                   	xchg   ecx,eax
    4a4b:	04 09                	add    al,0x9
    4a4d:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    4a50:	01 2a                	add    DWORD PTR [edx],ebp
    4a52:	4b                   	dec    ebx
    4a53:	f1                   	icebp  
    4a54:	00 00                	add    BYTE PTR [eax],al
    4a56:	00 02                	add    BYTE PTR [edx],al
    4a58:	91                   	xchg   ecx,eax
    4a59:	08 0a                	or     BYTE PTR [edx],cl
    4a5b:	e5 10                	in     eax,0x10
    4a5d:	00 00                	add    BYTE PTR [eax],al
    4a5f:	01 2a                	add    DWORD PTR [edx],ebp
    4a61:	55                   	push   ebp
    4a62:	91                   	xchg   ecx,eax
    4a63:	00 00                	add    BYTE PTR [eax],al
    4a65:	00 02                	add    BYTE PTR [edx],al
    4a67:	91                   	xchg   ecx,eax
    4a68:	0c 00                	or     al,0x0
    4a6a:	0b d9                	or     ebx,ecx
    4a6c:	10 00                	adc    BYTE PTR [eax],al
    4a6e:	00 01                	add    BYTE PTR [ecx],al
    4a70:	0d 07 91 00 00       	or     eax,0x9107
    4a75:	00 98 42 00 9f 14    	add    BYTE PTR [eax+0x149f0042],bl
    4a7b:	01 00                	add    DWORD PTR [eax],eax
    4a7d:	00 01                	add    BYTE PTR [ecx],al
    4a7f:	9c                   	pushf  
    4a80:	09 69 6e             	or     DWORD PTR [ecx+0x6e],ebp
    4a83:	00 01                	add    BYTE PTR [ecx],al
    4a85:	0d 1f f1 00 00       	or     eax,0xf11f
    4a8a:	00 02                	add    BYTE PTR [edx],al
    4a8c:	91                   	xchg   ecx,eax
    4a8d:	00 0a                	add    BYTE PTR [edx],cl
    4a8f:	d1 10                	rcl    DWORD PTR [eax],1
    4a91:	00 00                	add    BYTE PTR [eax],al
    4a93:	01 0d 2f f1 00 00    	add    DWORD PTR ds:0xf12f,ecx
    4a99:	00 02                	add    BYTE PTR [edx],al
    4a9b:	91                   	xchg   ecx,eax
    4a9c:	04 09                	add    al,0x9
    4a9e:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    4aa1:	01 0d 44 f1 00 00    	add    DWORD PTR ds:0xf144,ecx
    4aa7:	00 02                	add    BYTE PTR [edx],al
    4aa9:	91                   	xchg   ecx,eax
    4aaa:	08 0a                	or     BYTE PTR [edx],cl
    4aac:	e5 10                	in     eax,0x10
    4aae:	00 00                	add    BYTE PTR [eax],al
    4ab0:	01 0d 4e 91 00 00    	add    DWORD PTR ds:0x914e,ecx
    4ab6:	00 02                	add    BYTE PTR [edx],al
    4ab8:	91                   	xchg   ecx,eax
    4ab9:	0c 0c                	or     al,0xc
    4abb:	9c                   	pushf  
    4abc:	10 00                	adc    BYTE PTR [eax],al
    4abe:	00 01                	add    BYTE PTR [ecx],al
    4ac0:	0f 0c                	(bad)  
    4ac2:	2c 00                	sub    al,0x0
    4ac4:	00 00                	add    BYTE PTR [eax],al
    4ac6:	02 91 6c 0c bc 10    	add    dl,BYTE PTR [ecx+0x10bc0c6c]
    4acc:	00 00                	add    BYTE PTR [eax],al
    4ace:	01 12                	add    DWORD PTR [edx],edx
    4ad0:	0c 2c                	or     al,0x2c
    4ad2:	00 00                	add    BYTE PTR [eax],al
    4ad4:	00 02                	add    BYTE PTR [edx],al
    4ad6:	91                   	xchg   ecx,eax
    4ad7:	68 0c b5 10 00       	push   0x10b50c
    4adc:	00 01                	add    BYTE PTR [ecx],al
    4ade:	13 0b                	adc    ecx,DWORD PTR [ebx]
    4ae0:	91                   	xchg   ecx,eax
    4ae1:	00 00                	add    BYTE PTR [eax],al
    4ae3:	00 02                	add    BYTE PTR [edx],al
    4ae5:	91                   	xchg   ecx,eax
    4ae6:	64 00 00             	add    BYTE PTR fs:[eax],al
    4ae9:	bd 01 00 00 04       	mov    ebp,0x4000001
    4aee:	00 4d 1a             	add    BYTE PTR [ebp+0x1a],cl
    4af1:	00 00                	add    BYTE PTR [eax],al
    4af3:	04 01                	add    al,0x1
    4af5:	28 00                	sub    BYTE PTR [eax],al
    4af7:	00 00                	add    BYTE PTR [eax],al
    4af9:	0c f7                	or     al,0xf7
    4afb:	10 00                	adc    BYTE PTR [eax],al
    4afd:	00 fe                	add    dh,bh
    4aff:	00 00                	add    BYTE PTR [eax],al
    4b01:	00 d6                	add    dh,dl
    4b03:	43                   	inc    ebx
    4b04:	00 9f 35 01 00 00    	add    BYTE PTR [edi+0x135],bl
    4b0a:	eb 28                	jmp    4b34 <sysEnter_Vector-0x12b4cc>
    4b0c:	00 00                	add    BYTE PTR [eax],al
    4b0e:	02 3c 00             	add    bh,BYTE PTR [eax+eax*1]
    4b11:	00 00                	add    BYTE PTR [eax],al
    4b13:	35 00 00 00 03       	xor    eax,0x3000000
    4b18:	35 00 00 00 65       	xor    eax,0x65000000
    4b1d:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4b20:	07                   	pop    es
    4b21:	e3 00                	jecxz  4b23 <sysEnter_Vector-0x12b4dd>
    4b23:	00 00                	add    BYTE PTR [eax],al
    4b25:	04 01                	add    al,0x1
    4b27:	06                   	push   es
    4b28:	f9                   	stc    
    4b29:	00 00                	add    BYTE PTR [eax],al
    4b2b:	00 05 3c 00 00 00    	add    BYTE PTR ds:0x3c,al
    4b31:	06                   	push   es
    4b32:	14 11                	adc    al,0x11
    4b34:	00 00                	add    BYTE PTR [eax],al
    4b36:	01 19                	add    DWORD PTR [ecx],ebx
    4b38:	0d 25 00 00 00       	or     eax,0x25
    4b3d:	05 03 e0 7d 00       	add    eax,0x7de003
    4b42:	9f                   	lahf   
    4b43:	07                   	pop    es
    4b44:	04 05                	add    al,0x5
    4b46:	69 6e 74 00 04 04 05 	imul   ebp,DWORD PTR [esi+0x74],0x5040400
    4b4d:	05 00 00 00 04       	add    eax,0x4000000
    4b52:	08 05 00 00 00 00    	or     BYTE PTR ds:0x0,al
    4b58:	04 0c                	add    al,0xc
    4b5a:	04 5e                	add    al,0x5e
    4b5c:	01 00                	add    DWORD PTR [eax],eax
    4b5e:	00 04 10             	add    BYTE PTR [eax+edx*1],al
    4b61:	04 cf                	add    al,0xcf
    4b63:	00 00                	add    BYTE PTR [eax],al
    4b65:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4b68:	08 f0                	or     al,dh
    4b6a:	00 00                	add    BYTE PTR [eax],al
    4b6c:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4b6f:	07                   	pop    es
    4b70:	0e                   	push   cs
    4b71:	00 00                	add    BYTE PTR [eax],al
    4b73:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4b76:	07                   	pop    es
    4b77:	de 00                	fiadd  WORD PTR [eax]
    4b79:	00 00                	add    BYTE PTR [eax],al
    4b7b:	04 01                	add    al,0x1
    4b7d:	06                   	push   es
    4b7e:	f2 00 00             	repnz add BYTE PTR [eax],al
    4b81:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4b84:	05 6a 01 00 00       	add    eax,0x16a
    4b89:	04 08                	add    al,0x8
    4b8b:	07                   	pop    es
    4b8c:	d9 00                	fld    DWORD PTR [eax]
    4b8e:	00 00                	add    BYTE PTR [eax],al
    4b90:	08 04 3c             	or     BYTE PTR [esp+edi*1],al
    4b93:	00 00                	add    BYTE PTR [eax],al
    4b95:	00 09                	add    BYTE PTR [ecx],cl
    4b97:	29 01                	sub    DWORD PTR [ecx],eax
    4b99:	00 00                	add    BYTE PTR [eax],al
    4b9b:	02 33                	add    dh,BYTE PTR [ebx]
    4b9d:	0c bf                	or     al,0xbf
    4b9f:	00 00                	add    BYTE PTR [eax],al
    4ba1:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    4ba7:	9f                   	lahf   
    4ba8:	08 04 a7             	or     BYTE PTR [edi+eiz*4],al
    4bab:	00 00                	add    BYTE PTR [eax],al
    4bad:	00 0a                	add    BYTE PTR [edx],cl
    4baf:	04 11                	add    al,0x11
    4bb1:	00 00                	add    BYTE PTR [eax],al
    4bb3:	01 77 0f             	add    DWORD PTR [edi+0xf],esi
    4bb6:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4bb7:	00 00                	add    BYTE PTR [eax],al
    4bb9:	00 ea                	add    dl,ch
    4bbb:	44                   	inc    esp
    4bbc:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
    4bc2:	01 9c fe 00 00 00 0b 	add    DWORD PTR [esi+edi*8+0xb000000],ebx
    4bc9:	1d 11 00 00 01       	sbb    eax,0x1000011
    4bce:	77 22                	ja     4bf2 <sysEnter_Vector-0x12b40e>
    4bd0:	fe 00                	inc    BYTE PTR [eax]
    4bd2:	00 00                	add    BYTE PTR [eax],al
    4bd4:	02 91 00 0b 1a 11    	add    dl,BYTE PTR [ecx+0x111a0b00]
    4bda:	00 00                	add    BYTE PTR [eax],al
    4bdc:	01 77 36             	add    DWORD PTR [edi+0x36],esi
    4bdf:	fe 00                	inc    BYTE PTR [eax]
    4be1:	00 00                	add    BYTE PTR [eax],al
    4be3:	02 91 04 00 08 04    	add    dl,BYTE PTR [ecx+0x4080004]
    4be9:	43                   	inc    ebx
    4bea:	00 00                	add    BYTE PTR [eax],al
    4bec:	00 0c ef             	add    BYTE PTR [edi+ebp*8],cl
    4bef:	10 00                	adc    BYTE PTR [eax],al
    4bf1:	00 01                	add    BYTE PTR [ecx],al
    4bf3:	58                   	pop    eax
    4bf4:	07                   	pop    es
    4bf5:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4bf6:	00 00                	add    BYTE PTR [eax],al
    4bf8:	00 78 44             	add    BYTE PTR [eax+0x44],bh
    4bfb:	00 9f 72 00 00 00    	add    BYTE PTR [edi+0x72],bl
    4c01:	01 9c 55 01 00 00 0b 	add    DWORD PTR [ebp+edx*2+0xb000001],ebx
    4c08:	1d 11 00 00 01       	sbb    eax,0x1000011
    4c0d:	58                   	pop    eax
    4c0e:	1b fe                	sbb    edi,esi
    4c10:	00 00                	add    BYTE PTR [eax],al
    4c12:	00 02                	add    BYTE PTR [edx],al
    4c14:	91                   	xchg   ecx,eax
    4c15:	00 0b                	add    BYTE PTR [ebx],cl
    4c17:	1a 11                	sbb    dl,BYTE PTR [ecx]
    4c19:	00 00                	add    BYTE PTR [eax],al
    4c1b:	01 58 2f             	add    DWORD PTR [eax+0x2f],ebx
    4c1e:	fe 00                	inc    BYTE PTR [eax]
    4c20:	00 00                	add    BYTE PTR [eax],al
    4c22:	02 91 04 0d 61 00    	add    dl,BYTE PTR [ecx+0x610d04]
    4c28:	01 5a 14             	add    DWORD PTR [edx+0x14],ebx
    4c2b:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4c2c:	00 00                	add    BYTE PTR [eax],al
    4c2e:	00 01                	add    BYTE PTR [ecx],al
    4c30:	56                   	push   esi
    4c31:	0d 62 00 01 5a       	or     eax,0x5a010062
    4c36:	18 a7 00 00 00 01    	sbb    BYTE PTR [edi+0x1000000],ah
    4c3c:	53                   	push   ebx
    4c3d:	00 0e                	add    BYTE PTR [esi],cl
    4c3f:	0b 11                	or     edx,DWORD PTR [ecx]
    4c41:	00 00                	add    BYTE PTR [eax],al
    4c43:	01 34 07             	add    DWORD PTR [edi+eax*1],esi
    4c46:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4c47:	00 00                	add    BYTE PTR [eax],al
    4c49:	00 d6                	add    dh,dl
    4c4b:	43                   	inc    ebx
    4c4c:	00 9f a2 00 00 00    	add    BYTE PTR [edi+0xa2],bl
    4c52:	01 9c 0b 1d 11 00 00 	add    DWORD PTR [ebx+ecx*1+0x111d],ebx
    4c59:	01 34 16             	add    DWORD PTR [esi+edx*1],esi
    4c5c:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4c5d:	00 00                	add    BYTE PTR [eax],al
    4c5f:	00 02                	add    BYTE PTR [edx],al
    4c61:	91                   	xchg   ecx,eax
    4c62:	00 0b                	add    BYTE PTR [ebx],cl
    4c64:	1a 11                	sbb    dl,BYTE PTR [ecx]
    4c66:	00 00                	add    BYTE PTR [eax],al
    4c68:	01 34 24             	add    DWORD PTR [esp],esi
    4c6b:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4c6c:	00 00                	add    BYTE PTR [eax],al
    4c6e:	00 02                	add    BYTE PTR [edx],al
    4c70:	91                   	xchg   ecx,eax
    4c71:	04 0b                	add    al,0xb
    4c73:	c8 06 00 00          	enter  0x6,0x0
    4c77:	01 34 33             	add    DWORD PTR [ebx+esi*1],esi
    4c7a:	5a                   	pop    edx
    4c7b:	00 00                	add    BYTE PTR [eax],al
    4c7d:	00 02                	add    BYTE PTR [edx],al
    4c7f:	91                   	xchg   ecx,eax
    4c80:	08 0d 61 00 01 36    	or     BYTE PTR ds:0x36010061,cl
    4c86:	14 a7                	adc    al,0xa7
    4c88:	00 00                	add    BYTE PTR [eax],al
    4c8a:	00 01                	add    BYTE PTR [ecx],al
    4c8c:	56                   	push   esi
    4c8d:	0d 62 00 01 36       	or     eax,0x36010062
    4c92:	18 a7 00 00 00 01    	sbb    BYTE PTR [edi+0x1000000],ah
    4c98:	53                   	push   ebx
    4c99:	0d 6c 65 6e 00       	or     eax,0x6e656c
    4c9e:	01 3c 09             	add    DWORD PTR [ecx+ecx*1],edi
    4ca1:	5a                   	pop    edx
    4ca2:	00 00                	add    BYTE PTR [eax],al
    4ca4:	00 02                	add    BYTE PTR [edx],al
    4ca6:	91                   	xchg   ecx,eax
    4ca7:	6c                   	ins    BYTE PTR es:[edi],dx
    4ca8:	00 00                	add    BYTE PTR [eax],al
    4caa:	cf                   	iret   
    4cab:	05 00 00 04 00       	add    eax,0x40000
    4cb0:	37                   	aaa    
    4cb1:	1b 00                	sbb    eax,DWORD PTR [eax]
    4cb3:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4cb6:	28 00                	sub    BYTE PTR [eax],al
    4cb8:	00 00                	add    BYTE PTR [eax],al
    4cba:	0c 24                	or     al,0x24
    4cbc:	11 00                	adc    DWORD PTR [eax],eax
    4cbe:	00 fe                	add    dh,bh
    4cc0:	00 00                	add    BYTE PTR [eax],al
    4cc2:	00 0b                	add    BYTE PTR [ebx],cl
    4cc4:	45                   	inc    ebp
    4cc5:	00 9f 03 0d 00 00    	add    BYTE PTR [edi+0xd03],bl
    4ccb:	07                   	pop    es
    4ccc:	2a 00                	sub    al,BYTE PTR [eax]
    4cce:	00 02                	add    BYTE PTR [edx],al
    4cd0:	ac                   	lods   al,BYTE PTR ds:[esi]
    4cd1:	03 00                	add    eax,DWORD PTR [eax]
    4cd3:	00 07                	add    BYTE PTR [edi],al
    4cd5:	04 21                	add    al,0x21
    4cd7:	01 00                	add    DWORD PTR [eax],eax
    4cd9:	00 05 15 12 21 01    	add    BYTE PTR ds:0x1211215,al
    4cdf:	00 00                	add    BYTE PTR [eax],al
    4ce1:	03 3e                	add    edi,DWORD PTR [esi]
    4ce3:	04 00                	add    al,0x0
    4ce5:	00 00                	add    BYTE PTR [eax],al
    4ce7:	03 83 04 00 00 01    	add    eax,DWORD PTR [ebx+0x1000004]
    4ced:	03 c5                	add    eax,ebp
    4cef:	02 00                	add    al,BYTE PTR [eax]
    4cf1:	00 02                	add    BYTE PTR [edx],al
    4cf3:	03 8f 03 00 00 03    	add    ecx,DWORD PTR [edi+0x3000003]
    4cf9:	03 ab 02 00 00 04    	add    ebp,DWORD PTR [ebx+0x4000002]
    4cff:	03 ac 04 00 00 05 03 	add    ebp,DWORD PTR [esp+eax*1+0x3050000]
    4d06:	65 04 00             	gs add al,0x0
    4d09:	00 0a                	add    BYTE PTR [edx],cl
    4d0b:	03 d0                	add    edx,eax
    4d0d:	03 00                	add    eax,DWORD PTR [eax]
    4d0f:	00 0b                	add    BYTE PTR [ebx],cl
    4d11:	03 17                	add    edx,DWORD PTR [edi]
    4d13:	04 00                	add    al,0x0
    4d15:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
    4d18:	9d                   	popf   
    4d19:	03 00                	add    eax,DWORD PTR [eax]
    4d1b:	00 0d 03 b6 03 00    	add    BYTE PTR ds:0x3b603,cl
    4d21:	00 0e                	add    BYTE PTR [esi],cl
    4d23:	03 b8 02 00 00 0f    	add    edi,DWORD PTR [eax+0xf000002]
    4d29:	03 f8                	add    edi,eax
    4d2b:	03 00                	add    eax,DWORD PTR [eax]
    4d2d:	00 10                	add    BYTE PTR [eax],dl
    4d2f:	03 f1                	add    esi,ecx
    4d31:	04 00                	add    al,0x0
    4d33:	00 11                	add    BYTE PTR [ecx],dl
    4d35:	03 cf                	add    ecx,edi
    4d37:	04 00                	add    al,0x0
    4d39:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    4d3c:	9d                   	popf   
    4d3d:	04 00                	add    al,0x0
    4d3f:	00 50 03             	add    BYTE PTR [eax+0x3],dl
    4d42:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    4d45:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    4d48:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
    4d4b:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    4d4e:	5c                   	pop    esp
    4d4f:	03 00                	add    eax,DWORD PTR [eax]
    4d51:	00 97 04 4e 04 00    	add    BYTE PTR [edi+0x44e04],dl
    4d57:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    4d5a:	04 24                	add    al,0x24
    4d5c:	04 00                	add    al,0x0
    4d5e:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    4d62:	0e                   	push   cs
    4d63:	05 00 00 65 01       	add    eax,0x1650000
    4d68:	04 38                	add    al,0x38
    4d6a:	03 00                	add    eax,DWORD PTR [eax]
    4d6c:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    4d6f:	04 20                	add    al,0x20
    4d71:	05 00 00 67 01       	add    eax,0x1670000
    4d76:	04 c3                	add    al,0xc3
    4d78:	03 00                	add    eax,DWORD PTR [eax]
    4d7a:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    4d7d:	04 f9                	add    al,0xf9
    4d7f:	02 00                	add    al,BYTE PTR [eax]
    4d81:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    4d84:	04 72                	add    al,0x72
    4d86:	04 00                	add    al,0x0
    4d88:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    4d8b:	04 4c                	add    al,0x4c
    4d8d:	03 00                	add    eax,DWORD PTR [eax]
    4d8f:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    4d92:	04 ba                	add    al,0xba
    4d94:	04 00                	add    al,0x0
    4d96:	00 00                	add    BYTE PTR [eax],al
    4d98:	03 04 dd 03 00 00 01 	add    eax,DWORD PTR [ebx*8+0x1000003]
    4d9f:	03 04 ec             	add    eax,DWORD PTR [esp+ebp*8]
    4da2:	03 00                	add    eax,DWORD PTR [eax]
    4da4:	00 02                	add    BYTE PTR [edx],al
    4da6:	03 04 7f             	add    eax,DWORD PTR [edi+edi*2]
    4da9:	03 00                	add    eax,DWORD PTR [eax]
    4dab:	00 03                	add    BYTE PTR [ebx],al
    4dad:	03 04 d9             	add    eax,DWORD PTR [ecx+ebx*8]
    4db0:	02 00                	add    al,BYTE PTR [eax]
    4db2:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4db5:	04 28                	add    al,0x28
    4db7:	03 00                	add    eax,DWORD PTR [eax]
    4db9:	00 05 03 04 70 03    	add    BYTE PTR ds:0x3700403,al
    4dbf:	00 00                	add    BYTE PTR [eax],al
    4dc1:	06                   	push   es
    4dc2:	03 04 05 04 00 00 00 	add    eax,DWORD PTR [eax*1+0x4]
    4dc9:	09 00                	or     DWORD PTR [eax],eax
    4dcb:	05 04 07 e3 00       	add    eax,0xe30704
    4dd0:	00 00                	add    BYTE PTR [eax],al
    4dd2:	06                   	push   es
    4dd3:	04 05                	add    al,0x5
    4dd5:	69 6e 74 00 07 28 01 	imul   ebp,DWORD PTR [esi+0x74],0x1280700
    4ddc:	00 00                	add    BYTE PTR [eax],al
    4dde:	05 01 08 f0 00       	add    eax,0xf00801
    4de3:	00 00                	add    BYTE PTR [eax],al
    4de5:	05 02 07 0e 00       	add    eax,0xe0702
    4dea:	00 00                	add    BYTE PTR [eax],al
    4dec:	05 04 07 de 00       	add    eax,0xde0704
    4df1:	00 00                	add    BYTE PTR [eax],al
    4df3:	05 01 06 f2 00       	add    eax,0xf20601
    4df8:	00 00                	add    BYTE PTR [eax],al
    4dfa:	05 02 05 6a 01       	add    eax,0x16a0502
    4dff:	00 00                	add    BYTE PTR [eax],al
    4e01:	05 08 05 00 00       	add    eax,0x508
    4e06:	00 00                	add    BYTE PTR [eax],al
    4e08:	05 08 07 d9 00       	add    eax,0xd90708
    4e0d:	00 00                	add    BYTE PTR [eax],al
    4e0f:	05 04 05 05 00       	add    eax,0x50504
    4e14:	00 00                	add    BYTE PTR [eax],al
    4e16:	08 04 72             	or     BYTE PTR [edx+esi*2],al
    4e19:	01 00                	add    DWORD PTR [eax],eax
    4e1b:	00 05 01 06 f9 00    	add    BYTE PTR ds:0xf90601,al
    4e21:	00 00                	add    BYTE PTR [eax],al
    4e23:	07                   	pop    es
    4e24:	72 01                	jb     4e27 <sysEnter_Vector-0x12b1d9>
    4e26:	00 00                	add    BYTE PTR [eax],al
    4e28:	09 78 02             	or     DWORD PTR [eax+0x2],edi
    4e2b:	00 00                	add    BYTE PTR [eax],al
    4e2d:	02 34 19             	add    dh,BYTE PTR [ecx+ebx*1]
    4e30:	21 01                	and    DWORD PTR [ecx],eax
    4e32:	00 00                	add    BYTE PTR [eax],al
    4e34:	05 0c 04 5e 01       	add    eax,0x15e040c
    4e39:	00 00                	add    BYTE PTR [eax],al
    4e3b:	05 10 04 cf 00       	add    eax,0xcf0410
    4e40:	00 00                	add    BYTE PTR [eax],al
    4e42:	0a 29                	or     ch,BYTE PTR [ecx]
    4e44:	01 00                	add    DWORD PTR [eax],eax
    4e46:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    4e49:	0c aa                	or     al,0xaa
    4e4b:	01 00                	add    DWORD PTR [eax],eax
    4e4d:	00 05 03 20 7f 00    	add    BYTE PTR ds:0x7f2003,al
    4e53:	9f                   	lahf   
    4e54:	08 04 6c             	or     BYTE PTR [esp+ebp*2],al
    4e57:	01 00                	add    DWORD PTR [eax],eax
    4e59:	00 09                	add    BYTE PTR [ecx],cl
    4e5b:	79 0d                	jns    4e6a <sysEnter_Vector-0x12b196>
    4e5d:	00 00                	add    BYTE PTR [eax],al
    4e5f:	03 2a                	add    ebp,DWORD PTR [edx]
    4e61:	16                   	push   ss
    4e62:	65 01 00             	add    DWORD PTR gs:[eax],eax
    4e65:	00 07                	add    BYTE PTR [edi],al
    4e67:	b0 01                	mov    al,0x1
    4e69:	00 00                	add    BYTE PTR [eax],al
    4e6b:	0b 74 6d 00          	or     esi,DWORD PTR [ebp+ebp*2+0x0]
    4e6f:	2c 03                	sub    al,0x3
    4e71:	2c 0c                	sub    al,0xc
    4e73:	5d                   	pop    ebp
    4e74:	02 00                	add    al,BYTE PTR [eax]
    4e76:	00 0c fa             	add    BYTE PTR [edx+edi*8],cl
    4e79:	0d 00 00 03 2e       	or     eax,0x2e030000
    4e7e:	0b 28                	or     ebp,DWORD PTR [eax]
    4e80:	01 00                	add    DWORD PTR [eax],eax
    4e82:	00 00                	add    BYTE PTR [eax],al
    4e84:	0c 47                	or     al,0x47
    4e86:	0d 00 00 03 2f       	or     eax,0x2f030000
    4e8b:	0b 28                	or     ebp,DWORD PTR [eax]
    4e8d:	01 00                	add    DWORD PTR [eax],eax
    4e8f:	00 04 0c             	add    BYTE PTR [esp+ecx*1],al
    4e92:	73 0c                	jae    4ea0 <sysEnter_Vector-0x12b160>
    4e94:	00 00                	add    BYTE PTR [eax],al
    4e96:	03 30                	add    esi,DWORD PTR [eax]
    4e98:	0b 28                	or     ebp,DWORD PTR [eax]
    4e9a:	01 00                	add    DWORD PTR [eax],eax
    4e9c:	00 08                	add    BYTE PTR [eax],cl
    4e9e:	0c db                	or     al,0xdb
    4ea0:	0d 00 00 03 31       	or     eax,0x31030000
    4ea5:	0b 28                	or     ebp,DWORD PTR [eax]
    4ea7:	01 00                	add    DWORD PTR [eax],eax
    4ea9:	00 0c 0c             	add    BYTE PTR [esp+ecx*1],cl
    4eac:	bc 0c 00 00 03       	mov    esp,0x300000c
    4eb1:	32 0b                	xor    cl,BYTE PTR [ebx]
    4eb3:	28 01                	sub    BYTE PTR [ecx],al
    4eb5:	00 00                	add    BYTE PTR [eax],al
    4eb7:	10 0c d6             	adc    BYTE PTR [esi+edx*8],cl
    4eba:	0c 00                	or     al,0x0
    4ebc:	00 03                	add    BYTE PTR [ebx],al
    4ebe:	33 0b                	xor    ecx,DWORD PTR [ebx]
    4ec0:	28 01                	sub    BYTE PTR [ecx],al
    4ec2:	00 00                	add    BYTE PTR [eax],al
    4ec4:	14 0c                	adc    al,0xc
    4ec6:	d3 0d 00 00 03 34    	ror    DWORD PTR ds:0x34030000,cl
    4ecc:	0b 28                	or     ebp,DWORD PTR [eax]
    4ece:	01 00                	add    DWORD PTR [eax],eax
    4ed0:	00 18                	add    BYTE PTR [eax],bl
    4ed2:	0c 4e                	or     al,0x4e
    4ed4:	0d 00 00 03 35       	or     eax,0x35030000
    4ed9:	0b 28                	or     ebp,DWORD PTR [eax]
    4edb:	01 00                	add    DWORD PTR [eax],eax
    4edd:	00 1c 0c             	add    BYTE PTR [esp+ecx*1],bl
    4ee0:	09 0d 00 00 03 36    	or     DWORD PTR ds:0x36030000,ecx
    4ee6:	0b 28                	or     ebp,DWORD PTR [eax]
    4ee8:	01 00                	add    DWORD PTR [eax],eax
    4eea:	00 20                	add    BYTE PTR [eax],ah
    4eec:	0c 9a                	or     al,0x9a
    4eee:	0d 00 00 03 37       	or     eax,0x37030000
    4ef3:	10 65 01             	adc    BYTE PTR [ebp+0x1],ah
    4ef6:	00 00                	add    BYTE PTR [eax],al
    4ef8:	24 0c                	and    al,0xc
    4efa:	7b 0c                	jnp    4f08 <sysEnter_Vector-0x12b0f8>
    4efc:	00 00                	add    BYTE PTR [eax],al
    4efe:	03 38                	add    edi,DWORD PTR [eax]
    4f00:	13 5d 02             	adc    ebx,DWORD PTR [ebp+0x2]
    4f03:	00 00                	add    BYTE PTR [eax],al
    4f05:	28 00                	sub    BYTE PTR [eax],al
    4f07:	08 04 79             	or     BYTE PTR [ecx+edi*2],al
    4f0a:	01 00                	add    DWORD PTR [eax],eax
    4f0c:	00 0a                	add    BYTE PTR [edx],cl
    4f0e:	42                   	inc    edx
    4f0f:	11 00                	adc    DWORD PTR [eax],eax
    4f11:	00 01                	add    BYTE PTR [ecx],al
    4f13:	0d 05 28 01 00       	or     eax,0x12805
    4f18:	00 05 03 48 7e 00    	add    BYTE PTR ds:0x7e4803,al
    4f1e:	9f                   	lahf   
    4f1f:	0a d3                	or     dl,bl
    4f21:	11 00                	adc    DWORD PTR [eax],eax
    4f23:	00 01                	add    BYTE PTR [ecx],al
    4f25:	0e                   	push   cs
    4f26:	06                   	push   es
    4f27:	65 01 00             	add    DWORD PTR gs:[eax],eax
    4f2a:	00 05 03 b0 7f 00    	add    BYTE PTR ds:0x7fb003,al
    4f30:	9f                   	lahf   
    4f31:	0d 6c 01 00 00       	or     eax,0x16c
    4f36:	97                   	xchg   edi,eax
    4f37:	02 00                	add    al,BYTE PTR [eax]
    4f39:	00 0e                	add    BYTE PTR [esi],cl
    4f3b:	21 01                	and    DWORD PTR [ecx],eax
    4f3d:	00 00                	add    BYTE PTR [eax],al
    4f3f:	01 00                	add    DWORD PTR [eax],eax
    4f41:	0a 53 11             	or     dl,BYTE PTR [ebx+0x11]
    4f44:	00 00                	add    BYTE PTR [eax],al
    4f46:	01 0f                	add    DWORD PTR [edi],ecx
    4f48:	07                   	pop    es
    4f49:	87 02                	xchg   DWORD PTR [edx],eax
    4f4b:	00 00                	add    BYTE PTR [eax],al
    4f4d:	05 03 10 7f 00       	add    eax,0x7f1003
    4f52:	9f                   	lahf   
    4f53:	0a 64 11 00          	or     ah,BYTE PTR [ecx+edx*1+0x0]
    4f57:	00 01                	add    BYTE PTR [ecx],al
    4f59:	10 05 28 01 00 00    	adc    BYTE PTR ds:0x128,al
    4f5f:	05 03 c0 7f 00       	add    eax,0x7fc003
    4f64:	9f                   	lahf   
    4f65:	0a 98 11 00 00 01    	or     bl,BYTE PTR [eax+0x1000011]
    4f6b:	11 0b                	adc    DWORD PTR [ebx],ecx
    4f6d:	c1 01 00             	rol    DWORD PTR [ecx],0x0
    4f70:	00 05 03 e0 7f 00    	add    BYTE PTR ds:0x7fe003,al
    4f76:	9f                   	lahf   
    4f77:	0a 4c 11 00          	or     cl,BYTE PTR [ecx+edx*1+0x0]
    4f7b:	00 01                	add    BYTE PTR [ecx],al
    4f7d:	13 2d 65 01 00 00    	adc    ebp,DWORD PTR ds:0x165
    4f83:	05 03 b4 7f 00       	add    eax,0x7fb403
    4f88:	9f                   	lahf   
    4f89:	0d 2f 01 00 00       	or     eax,0x12f
    4f8e:	f5                   	cmc    
    4f8f:	02 00                	add    al,BYTE PTR [eax]
    4f91:	00 0e                	add    BYTE PTR [esi],cl
    4f93:	21 01                	and    DWORD PTR [ecx],eax
    4f95:	00 00                	add    BYTE PTR [eax],al
    4f97:	01 0e                	add    DWORD PTR [esi],ecx
    4f99:	21 01                	and    DWORD PTR [ecx],eax
    4f9b:	00 00                	add    BYTE PTR [eax],al
    4f9d:	0b 00                	or     eax,DWORD PTR [eax]
    4f9f:	07                   	pop    es
    4fa0:	df 02                	fild   WORD PTR [edx]
    4fa2:	00 00                	add    BYTE PTR [eax],al
    4fa4:	0a ba 11 00 00 01    	or     bh,BYTE PTR [edx+0x1000011]
    4faa:	15 0b f5 02 00       	adc    eax,0x2f50b
    4faf:	00 05 03 a0 7c 00    	add    BYTE PTR ds:0x7ca003,al
    4fb5:	9f                   	lahf   
    4fb6:	0f f3 06             	psllq  mm0,QWORD PTR [esi]
    4fb9:	00 00                	add    BYTE PTR [eax],al
    4fbb:	01 cd                	add    ebp,ecx
    4fbd:	10 b0 01 00 00 c9    	adc    BYTE PTR [eax-0x36ffffff],dh
    4fc3:	51                   	push   ecx
    4fc4:	00 9f 45 00 00 00    	add    BYTE PTR [edi+0x45],bl
    4fca:	01 9c 45 03 00 00 10 	add    DWORD PTR [ebp+eax*2+0x10000003],ebx
    4fd1:	dc 11                	fcom   QWORD PTR [ecx]
    4fd3:	00 00                	add    BYTE PTR [eax],al
    4fd5:	01 cd                	add    ebp,ecx
    4fd7:	1e                   	push   ds
    4fd8:	45                   	inc    ebp
    4fd9:	03 00                	add    eax,DWORD PTR [eax]
    4fdb:	00 02                	add    BYTE PTR [edx],al
    4fdd:	91                   	xchg   ecx,eax
    4fde:	00 11                	add    BYTE PTR [ecx],dl
    4fe0:	ef                   	out    dx,eax
    4fe1:	09 00                	or     DWORD PTR [eax],eax
    4fe3:	00 01                	add    BYTE PTR [ecx],al
    4fe5:	cf                   	iret   
    4fe6:	0e                   	push   cs
    4fe7:	7e 01                	jle    4fea <sysEnter_Vector-0x12b016>
    4fe9:	00 00                	add    BYTE PTR [eax],al
    4feb:	02 91 6c 00 08 04    	add    dl,BYTE PTR [ecx+0x408006c]
    4ff1:	b0 01                	mov    al,0x1
    4ff3:	00 00                	add    BYTE PTR [eax],al
    4ff5:	0f 76 11             	pcmpeqd mm2,QWORD PTR [ecx]
    4ff8:	00 00                	add    BYTE PTR [eax],al
    4ffa:	01 c2                	add    edx,eax
    4ffc:	14 93                	adc    al,0x93
    4ffe:	03 00                	add    eax,DWORD PTR [eax]
    5000:	00 58 51             	add    BYTE PTR [eax+0x51],bl
    5003:	00 9f 71 00 00 00    	add    BYTE PTR [edi+0x71],bl
    5009:	01 9c 93 03 00 00 10 	add    DWORD PTR [ebx+edx*4+0x10000003],ebx
    5010:	f3 06                	repz push es
    5012:	00 00                	add    BYTE PTR [eax],al
    5014:	01 c2                	add    edx,eax
    5016:	27                   	daa    
    5017:	93                   	xchg   ebx,eax
    5018:	03 00                	add    eax,DWORD PTR [eax]
    501a:	00 02                	add    BYTE PTR [edx],al
    501c:	91                   	xchg   ecx,eax
    501d:	00 10                	add    BYTE PTR [eax],dl
    501f:	8e 11                	mov    ss,WORD PTR [ecx]
    5021:	00 00                	add    BYTE PTR [eax],al
    5023:	01 c2                	add    edx,eax
    5025:	32 99 03 00 00 02    	xor    bl,BYTE PTR [ecx+0x2000003]
    502b:	91                   	xchg   ecx,eax
    502c:	5c                   	pop    esp
    502d:	11 ef                	adc    edi,ebp
    502f:	09 00                	or     DWORD PTR [eax],eax
    5031:	00 01                	add    BYTE PTR [ecx],al
    5033:	c4 0c b0             	les    ecx,FWORD PTR [eax+esi*4]
    5036:	01 00                	add    DWORD PTR [eax],eax
    5038:	00 02                	add    BYTE PTR [edx],al
    503a:	91                   	xchg   ecx,eax
    503b:	6c                   	ins    BYTE PTR es:[edi],dx
    503c:	00 08                	add    BYTE PTR [eax],cl
    503e:	04 c1                	add    al,0xc1
    5040:	01 00                	add    DWORD PTR [eax],eax
    5042:	00 05 01 02 ab 06    	add    BYTE PTR ds:0x6ab0201,al
    5048:	00 00                	add    BYTE PTR [eax],al
    504a:	12 b3 11 00 00 01    	adc    dh,BYTE PTR [ebx+0x1000011]
    5050:	57                   	push   edi
    5051:	10 b0 01 00 00 1d    	adc    BYTE PTR [eax+0x1d000001],dh
    5057:	49                   	dec    ecx
    5058:	00 9f 3b 08 00 00    	add    BYTE PTR [edi+0x83b],bl
    505e:	01 9c 42 04 00 00 10 	add    DWORD PTR [edx+eax*2+0x10000004],ebx
    5065:	98                   	cwde   
    5066:	11 00                	adc    DWORD PTR [eax],eax
    5068:	00 01                	add    BYTE PTR [ecx],al
    506a:	57                   	push   edi
    506b:	22 93 03 00 00 02    	and    dl,BYTE PTR [ebx+0x2000003]
    5071:	91                   	xchg   ecx,eax
    5072:	00 13                	add    BYTE PTR [ebx],dl
    5074:	64 61                	fs popa 
    5076:	79 00                	jns    5078 <sysEnter_Vector-0x12af88>
    5078:	01 58 08             	add    DWORD PTR [eax+0x8],ebx
    507b:	65 01 00             	add    DWORD PTR gs:[eax],eax
    507e:	00 02                	add    BYTE PTR [edx],al
    5080:	91                   	xchg   ecx,eax
    5081:	68 11 d9 0c 00       	push   0xcd911
    5086:	00 01                	add    BYTE PTR [ecx],al
    5088:	58                   	pop    eax
    5089:	0d 65 01 00 00       	or     eax,0x165
    508e:	02 91 54 11 d6 0c    	add    dl,BYTE PTR [ecx+0xcd61154]
    5094:	00 00                	add    BYTE PTR [eax],al
    5096:	01 59 07             	add    DWORD PTR [ecx+0x7],ebx
    5099:	28 01                	sub    BYTE PTR [ecx],al
    509b:	00 00                	add    BYTE PTR [eax],al
    509d:	02 91 4c 11 51 0d    	add    dl,BYTE PTR [ecx+0xd51114c]
    50a3:	00 00                	add    BYTE PTR [eax],al
    50a5:	01 5a 07             	add    DWORD PTR [edx+0x7],ebx
    50a8:	28 01                	sub    BYTE PTR [ecx],al
    50aa:	00 00                	add    BYTE PTR [eax],al
    50ac:	02 91 64 11 70 11    	add    dl,BYTE PTR [ecx+0x11701164]
    50b2:	00 00                	add    BYTE PTR [eax],al
    50b4:	01 5a 0d             	add    DWORD PTR [edx+0xd],ebx
    50b7:	28 01                	sub    BYTE PTR [ecx],al
    50b9:	00 00                	add    BYTE PTR [eax],al
    50bb:	02 91 60 11 65 09    	add    dl,BYTE PTR [ecx+0x9651160]
    50c1:	00 00                	add    BYTE PTR [eax],al
    50c3:	01 5b 08             	add    DWORD PTR [ebx+0x8],ebx
    50c6:	65 01 00             	add    DWORD PTR gs:[eax],eax
    50c9:	00 02                	add    BYTE PTR [edx],al
    50cb:	91                   	xchg   ecx,eax
    50cc:	50                   	push   eax
    50cd:	11 e3                	adc    ebx,esp
    50cf:	11 00                	adc    DWORD PTR [eax],eax
    50d1:	00 01                	add    BYTE PTR [ecx],al
    50d3:	5c                   	pop    esp
    50d4:	07                   	pop    es
    50d5:	28 01                	sub    BYTE PTR [ecx],al
    50d7:	00 00                	add    BYTE PTR [eax],al
    50d9:	02 91 5c 13 64 73    	add    dl,BYTE PTR [ecx+0x7364135c]
    50df:	74 00                	je     50e1 <sysEnter_Vector-0x12af1f>
    50e1:	01 5d 08             	add    DWORD PTR [ebp+0x8],ebx
    50e4:	65 01 00             	add    DWORD PTR gs:[eax],eax
    50e7:	00 02                	add    BYTE PTR [edx],al
    50e9:	91                   	xchg   ecx,eax
    50ea:	58                   	pop    eax
    50eb:	00 0f                	add    BYTE PTR [edi],cl
    50ed:	9e                   	sahf   
    50ee:	11 00                	adc    DWORD PTR [eax],eax
    50f0:	00 01                	add    BYTE PTR [ecx],al
    50f2:	53                   	push   ebx
    50f3:	14 93                	adc    al,0x93
    50f5:	03 00                	add    eax,DWORD PTR [eax]
    50f7:	00 fc                	add    ah,bh
    50f9:	48                   	dec    eax
    50fa:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
    5100:	01 9c 7b 04 00 00 10 	add    DWORD PTR [ebx+edi*2+0x10000004],ebx
    5107:	c0 11 00             	rcl    BYTE PTR [ecx],0x0
    510a:	00 01                	add    BYTE PTR [ecx],al
    510c:	53                   	push   ebx
    510d:	2e 7b 04             	cs jnp 5114 <sysEnter_Vector-0x12aeec>
    5110:	00 00                	add    BYTE PTR [eax],al
    5112:	02 91 00 10 98 11    	add    dl,BYTE PTR [ecx+0x11981000]
    5118:	00 00                	add    BYTE PTR [eax],al
    511a:	01 53 40             	add    DWORD PTR [ebx+0x40],edx
    511d:	93                   	xchg   ebx,eax
    511e:	03 00                	add    eax,DWORD PTR [eax]
    5120:	00 02                	add    BYTE PTR [edx],al
    5122:	91                   	xchg   ecx,eax
    5123:	04 00                	add    al,0x0
    5125:	08 04 bc             	or     BYTE PTR [esp+edi*4],al
    5128:	01 00                	add    DWORD PTR [eax],eax
    512a:	00 0f                	add    BYTE PTR [edi],cl
    512c:	c6                   	(bad)  
    512d:	11 00                	adc    DWORD PTR [eax],eax
    512f:	00 01                	add    BYTE PTR [ecx],al
    5131:	4b                   	dec    ebx
    5132:	0c 93                	or     al,0x93
    5134:	03 00                	add    eax,DWORD PTR [eax]
    5136:	00 c3                	add    bl,al
    5138:	48                   	dec    eax
    5139:	00 9f 39 00 00 00    	add    BYTE PTR [edi+0x39],bl
    513f:	01 9c c7 04 00 00 10 	add    DWORD PTR [edi+eax*8+0x10000004],ebx
    5146:	c0 11 00             	rcl    BYTE PTR [ecx],0x0
    5149:	00 01                	add    BYTE PTR [ecx],al
    514b:	4b                   	dec    ebx
    514c:	27                   	daa    
    514d:	7b 04                	jnp    5153 <sysEnter_Vector-0x12aead>
    514f:	00 00                	add    BYTE PTR [eax],al
    5151:	02 91 00 10 98 11    	add    dl,BYTE PTR [ecx+0x11981000]
    5157:	00 00                	add    BYTE PTR [eax],al
    5159:	01 4b 39             	add    DWORD PTR [ebx+0x39],ecx
    515c:	93                   	xchg   ebx,eax
    515d:	03 00                	add    eax,DWORD PTR [eax]
    515f:	00 02                	add    BYTE PTR [edx],al
    5161:	91                   	xchg   ecx,eax
    5162:	04 13                	add    al,0x13
    5164:	74 00                	je     5166 <sysEnter_Vector-0x12ae9a>
    5166:	01 4d 0a             	add    DWORD PTR [ebp+0xa],ecx
    5169:	b0 01                	mov    al,0x1
    516b:	00 00                	add    BYTE PTR [eax],al
    516d:	02 91 74 00 0f 2f    	add    dl,BYTE PTR [ecx+0x2f0f0074]
    5173:	11 00                	adc    DWORD PTR [eax],eax
    5175:	00 01                	add    BYTE PTR [ecx],al
    5177:	44                   	inc    esp
    5178:	14 93                	adc    al,0x93
    517a:	03 00                	add    eax,DWORD PTR [eax]
    517c:	00 82 48 00 9f 41    	add    BYTE PTR [edx+0x419f0048],al
    5182:	00 00                	add    BYTE PTR [eax],al
    5184:	00 01                	add    BYTE PTR [ecx],al
    5186:	9c                   	pushf  
    5187:	fe 04 00             	inc    BYTE PTR [eax+eax*1]
    518a:	00 10                	add    BYTE PTR [eax],dl
    518c:	c0 11 00             	rcl    BYTE PTR [ecx],0x0
    518f:	00 01                	add    BYTE PTR [ecx],al
    5191:	44                   	inc    esp
    5192:	2c 7b                	sub    al,0x7b
    5194:	04 00                	add    al,0x0
    5196:	00 02                	add    BYTE PTR [edx],al
    5198:	91                   	xchg   ecx,eax
    5199:	00 13                	add    BYTE PTR [ebx],dl
    519b:	74 00                	je     519d <sysEnter_Vector-0x12ae63>
    519d:	01 45 0a             	add    DWORD PTR [ebp+0xa],eax
    51a0:	b0 01                	mov    al,0x1
    51a2:	00 00                	add    BYTE PTR [eax],al
    51a4:	02 91 74 00 0f 5b    	add    dl,BYTE PTR [ecx+0x5b0f0074]
    51aa:	11 00                	adc    DWORD PTR [eax],eax
    51ac:	00 01                	add    BYTE PTR [ecx],al
    51ae:	3f                   	aas    
    51af:	14 93                	adc    al,0x93
    51b1:	03 00                	add    eax,DWORD PTR [eax]
    51b3:	00 61 48             	add    BYTE PTR [ecx+0x48],ah
    51b6:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
    51bc:	01 9c 37 05 00 00 10 	add    DWORD PTR [edi+esi*1+0x10000005],ebx
    51c3:	c0 11 00             	rcl    BYTE PTR [ecx],0x0
    51c6:	00 01                	add    BYTE PTR [ecx],al
    51c8:	3f                   	aas    
    51c9:	2b 7b 04             	sub    edi,DWORD PTR [ebx+0x4]
    51cc:	00 00                	add    BYTE PTR [eax],al
    51ce:	02 91 00 10 98 11    	add    dl,BYTE PTR [ecx+0x11981000]
    51d4:	00 00                	add    BYTE PTR [eax],al
    51d6:	01 3f                	add    DWORD PTR [edi],edi
    51d8:	3d 93 03 00 00       	cmp    eax,0x393
    51dd:	02 91 04 00 12 84    	add    dl,BYTE PTR [ecx-0x7bedfffc]
    51e3:	11 00                	adc    DWORD PTR [eax],eax
    51e5:	00 01                	add    BYTE PTR [ecx],al
    51e7:	22 0c 93             	and    cl,BYTE PTR [ebx+edx*4]
    51ea:	03 00                	add    eax,DWORD PTR [eax]
    51ec:	00 53 45             	add    BYTE PTR [ebx+0x45],dl
    51ef:	00 9f 0e 03 00 00    	add    BYTE PTR [edi+0x30e],bl
    51f5:	01 9c ac 05 00 00 10 	add    DWORD PTR [esp+ebp*4+0x10000005],ebx
    51fc:	c0 11 00             	rcl    BYTE PTR [ecx],0x0
    51ff:	00 01                	add    BYTE PTR [ecx],al
    5201:	22 24 7b             	and    ah,BYTE PTR [ebx+edi*2]
    5204:	04 00                	add    al,0x0
    5206:	00 02                	add    BYTE PTR [edx],al
    5208:	91                   	xchg   ecx,eax
    5209:	00 10                	add    BYTE PTR [eax],dl
    520b:	98                   	cwde   
    520c:	11 00                	adc    DWORD PTR [eax],eax
    520e:	00 01                	add    BYTE PTR [ecx],al
    5210:	22 36                	and    dh,BYTE PTR [esi]
    5212:	93                   	xchg   ebx,eax
    5213:	03 00                	add    eax,DWORD PTR [eax]
    5215:	00 02                	add    BYTE PTR [edx],al
    5217:	91                   	xchg   ecx,eax
    5218:	04 11                	add    al,0x11
    521a:	f3 06                	repz push es
    521c:	00 00                	add    BYTE PTR [eax],al
    521e:	01 24 0a             	add    DWORD PTR [edx+ecx*1],esp
    5221:	b0 01                	mov    al,0x1
    5223:	00 00                	add    BYTE PTR [eax],al
    5225:	02 91 68 11 aa 11    	add    dl,BYTE PTR [ecx+0x11aa1168]
    522b:	00 00                	add    BYTE PTR [eax],al
    522d:	01 25 11 42 01 00    	add    DWORD PTR ds:0x14211,esp
    5233:	00 02                	add    BYTE PTR [edx],al
    5235:	91                   	xchg   ecx,eax
    5236:	64 11 7e 11          	adc    DWORD PTR fs:[esi+0x11],edi
    523a:	00 00                	add    BYTE PTR [eax],al
    523c:	01 25 1b 42 01 00    	add    DWORD PTR ds:0x1421b,esp
    5242:	00 02                	add    BYTE PTR [edx],al
    5244:	91                   	xchg   ecx,eax
    5245:	70 11                	jo     5258 <sysEnter_Vector-0x12ada8>
    5247:	d9 0c 00             	(bad)  [eax+eax*1]
    524a:	00 01                	add    BYTE PTR [ecx],al
    524c:	26 07                	es pop es
    524e:	28 01                	sub    BYTE PTR [ecx],al
    5250:	00 00                	add    BYTE PTR [eax],al
    5252:	02 91 6c 00 14 39    	add    dl,BYTE PTR [ecx+0x3914006c]
    5258:	11 00                	adc    DWORD PTR [eax],eax
    525a:	00 01                	add    BYTE PTR [ecx],al
    525c:	1a 10                	sbb    dl,BYTE PTR [eax]
    525e:	b0 01                	mov    al,0x1
    5260:	00 00                	add    BYTE PTR [eax],al
    5262:	0b 45 00             	or     eax,DWORD PTR [ebp+0x0]
    5265:	9f                   	lahf   
    5266:	48                   	dec    eax
    5267:	00 00                	add    BYTE PTR [eax],al
    5269:	00 01                	add    BYTE PTR [ecx],al
    526b:	9c                   	pushf  
    526c:	11 35 05 00 00 01    	adc    DWORD PTR ds:0x1000005,esi
    5272:	1c 0e                	sbb    al,0xe
    5274:	7e 01                	jle    5277 <sysEnter_Vector-0x12ad89>
    5276:	00 00                	add    BYTE PTR [eax],al
    5278:	02                   	.byte 0x2
    5279:	91                   	xchg   ecx,eax
    527a:	6c                   	ins    BYTE PTR es:[edi],dx
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	08 00                	or     BYTE PTR [eax],al
      1d:	00 03                	add    BYTE PTR [ebx],al
      1f:	24 00                	and    al,0x0
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	0e                   	push   cs
      27:	00 00                	add    BYTE PTR [eax],al
      29:	04 26                	add    al,0x26
      2b:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
      2e:	00 00                	add    BYTE PTR [eax],al
      30:	05 0f 00 0b 0b       	add    eax,0xb0b000f
      35:	49                   	dec    ecx
      36:	13 00                	adc    eax,DWORD PTR [eax]
      38:	00 06                	add    BYTE PTR [esi],al
      3a:	34 00                	xor    al,0x0
      3c:	03 0e                	add    ecx,DWORD PTR [esi]
      3e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      40:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      42:	39 0b                	cmp    DWORD PTR [ebx],ecx
      44:	49                   	dec    ecx
      45:	13 3f                	adc    edi,DWORD PTR [edi]
      47:	19 02                	sbb    DWORD PTR [edx],eax
      49:	18 00                	sbb    BYTE PTR [eax],al
      4b:	00 07                	add    BYTE PTR [edi],al
      4d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      50:	19 03                	sbb    DWORD PTR [ebx],eax
      52:	0e                   	push   cs
      53:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      55:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      57:	39 0b                	cmp    DWORD PTR [ebx],ecx
      59:	27                   	daa    
      5a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      5d:	11 01                	adc    DWORD PTR [ecx],eax
      5f:	12 06                	adc    al,BYTE PTR [esi]
      61:	40                   	inc    eax
      62:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      68:	00 00                	add    BYTE PTR [eax],al
      6a:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      70:	0b 3b                	or     edi,DWORD PTR [ebx]
      72:	0b 39                	or     edi,DWORD PTR [ecx]
      74:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      77:	02 18                	add    bl,BYTE PTR [eax]
      79:	00 00                	add    BYTE PTR [eax],al
      7b:	09 2e                	or     DWORD PTR [esi],ebp
      7d:	01 3f                	add    DWORD PTR [edi],edi
      7f:	19 03                	sbb    DWORD PTR [ebx],eax
      81:	0e                   	push   cs
      82:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      84:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      86:	39 0b                	cmp    DWORD PTR [ebx],ecx
      88:	27                   	daa    
      89:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      8c:	11 01                	adc    DWORD PTR [ecx],eax
      8e:	12 06                	adc    al,BYTE PTR [esi]
      90:	40                   	inc    eax
      91:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
      97:	00 01                	add    BYTE PTR [ecx],al
      99:	11 01                	adc    DWORD PTR [ecx],eax
      9b:	25 0e 13 0b 03       	and    eax,0x30b130e
      a0:	0e                   	push   cs
      a1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      a3:	11 01                	adc    DWORD PTR [ecx],eax
      a5:	12 06                	adc    al,BYTE PTR [esi]
      a7:	10 17                	adc    BYTE PTR [edi],dl
      a9:	00 00                	add    BYTE PTR [eax],al
      ab:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      ae:	0b 0b                	or     ecx,DWORD PTR [ebx]
      b0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      b3:	08 00                	or     BYTE PTR [eax],al
      b5:	00 03                	add    BYTE PTR [ebx],al
      b7:	24 00                	and    al,0x0
      b9:	0b 0b                	or     ecx,DWORD PTR [ebx]
      bb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      be:	0e                   	push   cs
      bf:	00 00                	add    BYTE PTR [eax],al
      c1:	04 0f                	add    al,0xf
      c3:	00 0b                	add    BYTE PTR [ebx],cl
      c5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      c8:	00 00                	add    BYTE PTR [eax],al
      ca:	05 34 00 03 0e       	add    eax,0xe030034
      cf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      d1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      d3:	39 0b                	cmp    DWORD PTR [ebx],ecx
      d5:	49                   	dec    ecx
      d6:	13 3f                	adc    edi,DWORD PTR [edi]
      d8:	19 02                	sbb    DWORD PTR [edx],eax
      da:	18 00                	sbb    BYTE PTR [eax],al
      dc:	00 06                	add    BYTE PTR [esi],al
      de:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      e1:	19 03                	sbb    DWORD PTR [ebx],eax
      e3:	0e                   	push   cs
      e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      e8:	39 0b                	cmp    DWORD PTR [ebx],ecx
      ea:	27                   	daa    
      eb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      ee:	11 01                	adc    DWORD PTR [ecx],eax
      f0:	12 06                	adc    al,BYTE PTR [esi]
      f2:	40                   	inc    eax
      f3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      f9:	00 00                	add    BYTE PTR [eax],al
      fb:	07                   	pop    es
      fc:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     101:	0b 3b                	or     edi,DWORD PTR [ebx]
     103:	0b 39                	or     edi,DWORD PTR [ecx]
     105:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     108:	02 18                	add    bl,BYTE PTR [eax]
     10a:	00 00                	add    BYTE PTR [eax],al
     10c:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     10f:	03 08                	add    ecx,DWORD PTR [eax]
     111:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     113:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     115:	39 0b                	cmp    DWORD PTR [ebx],ecx
     117:	49                   	dec    ecx
     118:	13 02                	adc    eax,DWORD PTR [edx]
     11a:	18 00                	sbb    BYTE PTR [eax],al
     11c:	00 09                	add    BYTE PTR [ecx],cl
     11e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     121:	19 03                	sbb    DWORD PTR [ebx],eax
     123:	0e                   	push   cs
     124:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     126:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     128:	39 0b                	cmp    DWORD PTR [ebx],ecx
     12a:	27                   	daa    
     12b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     12e:	11 01                	adc    DWORD PTR [ecx],eax
     130:	12 06                	adc    al,BYTE PTR [esi]
     132:	40                   	inc    eax
     133:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     139:	00 01                	add    BYTE PTR [ecx],al
     13b:	11 01                	adc    DWORD PTR [ecx],eax
     13d:	25 0e 13 0b 03       	and    eax,0x30b130e
     142:	0e                   	push   cs
     143:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     145:	11 01                	adc    DWORD PTR [ecx],eax
     147:	12 06                	adc    al,BYTE PTR [esi]
     149:	10 17                	adc    BYTE PTR [edi],dl
     14b:	00 00                	add    BYTE PTR [eax],al
     14d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     150:	0b 0b                	or     ecx,DWORD PTR [ebx]
     152:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     155:	08 00                	or     BYTE PTR [eax],al
     157:	00 03                	add    BYTE PTR [ebx],al
     159:	24 00                	and    al,0x0
     15b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     15d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     160:	0e                   	push   cs
     161:	00 00                	add    BYTE PTR [eax],al
     163:	04 0f                	add    al,0xf
     165:	00 0b                	add    BYTE PTR [ebx],cl
     167:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     16a:	00 00                	add    BYTE PTR [eax],al
     16c:	05 34 00 03 0e       	add    eax,0xe030034
     171:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     173:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     175:	39 0b                	cmp    DWORD PTR [ebx],ecx
     177:	49                   	dec    ecx
     178:	13 3f                	adc    edi,DWORD PTR [edi]
     17a:	19 02                	sbb    DWORD PTR [edx],eax
     17c:	18 00                	sbb    BYTE PTR [eax],al
     17e:	00 06                	add    BYTE PTR [esi],al
     180:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     183:	19 03                	sbb    DWORD PTR [ebx],eax
     185:	0e                   	push   cs
     186:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     188:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     18a:	39 0b                	cmp    DWORD PTR [ebx],ecx
     18c:	27                   	daa    
     18d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     190:	11 01                	adc    DWORD PTR [ecx],eax
     192:	12 06                	adc    al,BYTE PTR [esi]
     194:	40                   	inc    eax
     195:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     19b:	00 00                	add    BYTE PTR [eax],al
     19d:	07                   	pop    es
     19e:	05 00 03 08 3a       	add    eax,0x3a080300
     1a3:	0b 3b                	or     edi,DWORD PTR [ebx]
     1a5:	0b 39                	or     edi,DWORD PTR [ecx]
     1a7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     1aa:	02 18                	add    bl,BYTE PTR [eax]
     1ac:	00 00                	add    BYTE PTR [eax],al
     1ae:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     1b4:	0b 3b                	or     edi,DWORD PTR [ebx]
     1b6:	0b 39                	or     edi,DWORD PTR [ecx]
     1b8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     1bb:	02 18                	add    bl,BYTE PTR [eax]
     1bd:	00 00                	add    BYTE PTR [eax],al
     1bf:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     1c2:	03 0e                	add    ecx,DWORD PTR [esi]
     1c4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1c6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1c8:	39 0b                	cmp    DWORD PTR [ebx],ecx
     1ca:	49                   	dec    ecx
     1cb:	13 02                	adc    eax,DWORD PTR [edx]
     1cd:	18 00                	sbb    BYTE PTR [eax],al
     1cf:	00 0a                	add    BYTE PTR [edx],cl
     1d1:	34 00                	xor    al,0x0
     1d3:	03 08                	add    ecx,DWORD PTR [eax]
     1d5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1d7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1d9:	39 0b                	cmp    DWORD PTR [ebx],ecx
     1db:	49                   	dec    ecx
     1dc:	13 02                	adc    eax,DWORD PTR [edx]
     1de:	18 00                	sbb    BYTE PTR [eax],al
     1e0:	00 0b                	add    BYTE PTR [ebx],cl
     1e2:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1e5:	19 03                	sbb    DWORD PTR [ebx],eax
     1e7:	0e                   	push   cs
     1e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ec:	39 0b                	cmp    DWORD PTR [ebx],ecx
     1ee:	27                   	daa    
     1ef:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     1f2:	11 01                	adc    DWORD PTR [ecx],eax
     1f4:	12 06                	adc    al,BYTE PTR [esi]
     1f6:	40                   	inc    eax
     1f7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     1fd:	00 01                	add    BYTE PTR [ecx],al
     1ff:	11 01                	adc    DWORD PTR [ecx],eax
     201:	25 0e 13 0b 03       	and    eax,0x30b130e
     206:	0e                   	push   cs
     207:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     209:	11 01                	adc    DWORD PTR [ecx],eax
     20b:	12 06                	adc    al,BYTE PTR [esi]
     20d:	10 17                	adc    BYTE PTR [edi],dl
     20f:	00 00                	add    BYTE PTR [eax],al
     211:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     214:	0b 0b                	or     ecx,DWORD PTR [ebx]
     216:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     219:	0e                   	push   cs
     21a:	00 00                	add    BYTE PTR [eax],al
     21c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     21f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     221:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     224:	08 00                	or     BYTE PTR [eax],al
     226:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     229:	00 0b                	add    BYTE PTR [ebx],cl
     22b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     22e:	00 00                	add    BYTE PTR [eax],al
     230:	05 34 00 03 0e       	add    eax,0xe030034
     235:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     237:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     239:	39 0b                	cmp    DWORD PTR [ebx],ecx
     23b:	49                   	dec    ecx
     23c:	13 3f                	adc    edi,DWORD PTR [edi]
     23e:	19 02                	sbb    DWORD PTR [edx],eax
     240:	18 00                	sbb    BYTE PTR [eax],al
     242:	00 06                	add    BYTE PTR [esi],al
     244:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     247:	19 03                	sbb    DWORD PTR [ebx],eax
     249:	0e                   	push   cs
     24a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     24c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     24e:	39 0b                	cmp    DWORD PTR [ebx],ecx
     250:	27                   	daa    
     251:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     254:	11 01                	adc    DWORD PTR [ecx],eax
     256:	12 06                	adc    al,BYTE PTR [esi]
     258:	40                   	inc    eax
     259:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     25f:	00 00                	add    BYTE PTR [eax],al
     261:	07                   	pop    es
     262:	05 00 03 08 3a       	add    eax,0x3a080300
     267:	0b 3b                	or     edi,DWORD PTR [ebx]
     269:	0b 39                	or     edi,DWORD PTR [ecx]
     26b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     26e:	02 18                	add    bl,BYTE PTR [eax]
     270:	00 00                	add    BYTE PTR [eax],al
     272:	08 2e                	or     BYTE PTR [esi],ch
     274:	01 3f                	add    DWORD PTR [edi],edi
     276:	19 03                	sbb    DWORD PTR [ebx],eax
     278:	0e                   	push   cs
     279:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     27b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     27d:	39 0b                	cmp    DWORD PTR [ebx],ecx
     27f:	27                   	daa    
     280:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     283:	11 01                	adc    DWORD PTR [ecx],eax
     285:	12 06                	adc    al,BYTE PTR [esi]
     287:	40                   	inc    eax
     288:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     28e:	00 00                	add    BYTE PTR [eax],al
     290:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     293:	03 08                	add    ecx,DWORD PTR [eax]
     295:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     297:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     299:	39 0b                	cmp    DWORD PTR [ebx],ecx
     29b:	49                   	dec    ecx
     29c:	13 02                	adc    eax,DWORD PTR [edx]
     29e:	18 00                	sbb    BYTE PTR [eax],al
     2a0:	00 0a                	add    BYTE PTR [edx],cl
     2a2:	0b 01                	or     eax,DWORD PTR [ecx]
     2a4:	11 01                	adc    DWORD PTR [ecx],eax
     2a6:	12 06                	adc    al,BYTE PTR [esi]
     2a8:	00 00                	add    BYTE PTR [eax],al
     2aa:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     2ad:	03 0e                	add    ecx,DWORD PTR [esi]
     2af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2b3:	39 0b                	cmp    DWORD PTR [ebx],ecx
     2b5:	49                   	dec    ecx
     2b6:	13 02                	adc    eax,DWORD PTR [edx]
     2b8:	18 00                	sbb    BYTE PTR [eax],al
     2ba:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     2bd:	01 3f                	add    DWORD PTR [edi],edi
     2bf:	19 03                	sbb    DWORD PTR [ebx],eax
     2c1:	0e                   	push   cs
     2c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2c6:	39 0b                	cmp    DWORD PTR [ebx],ecx
     2c8:	27                   	daa    
     2c9:	19 11                	sbb    DWORD PTR [ecx],edx
     2cb:	01 12                	add    DWORD PTR [edx],edx
     2cd:	06                   	push   es
     2ce:	40                   	inc    eax
     2cf:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2d5:	00 00                	add    BYTE PTR [eax],al
     2d7:	0d 2e 01 3f 19       	or     eax,0x193f012e
     2dc:	03 0e                	add    ecx,DWORD PTR [esi]
     2de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2e2:	39 0b                	cmp    DWORD PTR [ebx],ecx
     2e4:	27                   	daa    
     2e5:	19 11                	sbb    DWORD PTR [ecx],edx
     2e7:	01 12                	add    DWORD PTR [edx],edx
     2e9:	06                   	push   es
     2ea:	40                   	inc    eax
     2eb:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     2f1:	00 01                	add    BYTE PTR [ecx],al
     2f3:	11 01                	adc    DWORD PTR [ecx],eax
     2f5:	25 0e 13 0b 03       	and    eax,0x30b130e
     2fa:	0e                   	push   cs
     2fb:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     2fd:	11 01                	adc    DWORD PTR [ecx],eax
     2ff:	12 06                	adc    al,BYTE PTR [esi]
     301:	10 17                	adc    BYTE PTR [edi],dl
     303:	00 00                	add    BYTE PTR [eax],al
     305:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     308:	0b 0b                	or     ecx,DWORD PTR [ebx]
     30a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     30d:	0e                   	push   cs
     30e:	00 00                	add    BYTE PTR [eax],al
     310:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     313:	0b 0b                	or     ecx,DWORD PTR [ebx]
     315:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     318:	08 00                	or     BYTE PTR [eax],al
     31a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     31d:	00 03                	add    BYTE PTR [ebx],al
     31f:	0e                   	push   cs
     320:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     322:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     324:	39 0b                	cmp    DWORD PTR [ebx],ecx
     326:	49                   	dec    ecx
     327:	13 00                	adc    eax,DWORD PTR [eax]
     329:	00 05 26 00 49 13    	add    BYTE PTR ds:0x13490026,al
     32f:	00 00                	add    BYTE PTR [eax],al
     331:	06                   	push   es
     332:	34 00                	xor    al,0x0
     334:	03 0e                	add    ecx,DWORD PTR [esi]
     336:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     338:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     33a:	39 0b                	cmp    DWORD PTR [ebx],ecx
     33c:	49                   	dec    ecx
     33d:	13 3f                	adc    edi,DWORD PTR [edi]
     33f:	19 02                	sbb    DWORD PTR [edx],eax
     341:	18 00                	sbb    BYTE PTR [eax],al
     343:	00 07                	add    BYTE PTR [edi],al
     345:	0f 00 0b             	str    WORD PTR [ebx]
     348:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     34b:	00 00                	add    BYTE PTR [eax],al
     34d:	08 01                	or     BYTE PTR [ecx],al
     34f:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     352:	01 13                	add    DWORD PTR [ebx],edx
     354:	00 00                	add    BYTE PTR [eax],al
     356:	09 21                	or     DWORD PTR [ecx],esp
     358:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     35b:	2f                   	das    
     35c:	0b 00                	or     eax,DWORD PTR [eax]
     35e:	00 0a                	add    BYTE PTR [edx],cl
     360:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     363:	19 03                	sbb    DWORD PTR [ebx],eax
     365:	0e                   	push   cs
     366:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     368:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36a:	39 0b                	cmp    DWORD PTR [ebx],ecx
     36c:	11 01                	adc    DWORD PTR [ecx],eax
     36e:	12 06                	adc    al,BYTE PTR [esi]
     370:	40                   	inc    eax
     371:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     377:	00 00                	add    BYTE PTR [eax],al
     379:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     37c:	03 08                	add    ecx,DWORD PTR [eax]
     37e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     380:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     382:	39 0b                	cmp    DWORD PTR [ebx],ecx
     384:	49                   	dec    ecx
     385:	13 02                	adc    eax,DWORD PTR [edx]
     387:	18 00                	sbb    BYTE PTR [eax],al
     389:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     38c:	01 3f                	add    DWORD PTR [edi],edi
     38e:	19 03                	sbb    DWORD PTR [ebx],eax
     390:	0e                   	push   cs
     391:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     393:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     395:	39 0b                	cmp    DWORD PTR [ebx],ecx
     397:	27                   	daa    
     398:	19 11                	sbb    DWORD PTR [ecx],edx
     39a:	01 12                	add    DWORD PTR [edx],edx
     39c:	06                   	push   es
     39d:	40                   	inc    eax
     39e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3a4:	00 00                	add    BYTE PTR [eax],al
     3a6:	0d 05 00 03 08       	or     eax,0x8030005
     3ab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3ad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3af:	39 0b                	cmp    DWORD PTR [ebx],ecx
     3b1:	49                   	dec    ecx
     3b2:	13 02                	adc    eax,DWORD PTR [edx]
     3b4:	18 00                	sbb    BYTE PTR [eax],al
     3b6:	00 0e                	add    BYTE PTR [esi],cl
     3b8:	34 00                	xor    al,0x0
     3ba:	03 0e                	add    ecx,DWORD PTR [esi]
     3bc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3be:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3c0:	39 0b                	cmp    DWORD PTR [ebx],ecx
     3c2:	49                   	dec    ecx
     3c3:	13 02                	adc    eax,DWORD PTR [edx]
     3c5:	18 00                	sbb    BYTE PTR [eax],al
     3c7:	00 0f                	add    BYTE PTR [edi],cl
     3c9:	01 01                	add    DWORD PTR [ecx],eax
     3cb:	49                   	dec    ecx
     3cc:	13 00                	adc    eax,DWORD PTR [eax]
     3ce:	00 00                	add    BYTE PTR [eax],al
     3d0:	01 11                	add    DWORD PTR [ecx],edx
     3d2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     3d8:	0e                   	push   cs
     3d9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     3db:	11 01                	adc    DWORD PTR [ecx],eax
     3dd:	12 06                	adc    al,BYTE PTR [esi]
     3df:	10 17                	adc    BYTE PTR [edi],dl
     3e1:	00 00                	add    BYTE PTR [eax],al
     3e3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     3e6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     3e8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     3eb:	0e                   	push   cs
     3ec:	00 00                	add    BYTE PTR [eax],al
     3ee:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     3f1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     3f3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     3f6:	08 00                	or     BYTE PTR [eax],al
     3f8:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     3fb:	00 0b                	add    BYTE PTR [ebx],cl
     3fd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     400:	00 00                	add    BYTE PTR [eax],al
     402:	05 16 00 03 0e       	add    eax,0xe030016
     407:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     409:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     40b:	39 0b                	cmp    DWORD PTR [ebx],ecx
     40d:	49                   	dec    ecx
     40e:	13 00                	adc    eax,DWORD PTR [eax]
     410:	00 06                	add    BYTE PTR [esi],al
     412:	04 01                	add    al,0x1
     414:	03 0e                	add    ecx,DWORD PTR [esi]
     416:	3e 0b 0b             	or     ecx,DWORD PTR ds:[ebx]
     419:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     41c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     41e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     420:	39 0b                	cmp    DWORD PTR [ebx],ecx
     422:	01 13                	add    DWORD PTR [ebx],edx
     424:	00 00                	add    BYTE PTR [eax],al
     426:	07                   	pop    es
     427:	28 00                	sub    BYTE PTR [eax],al
     429:	03 0e                	add    ecx,DWORD PTR [esi]
     42b:	1c 0b                	sbb    al,0xb
     42d:	00 00                	add    BYTE PTR [eax],al
     42f:	08 28                	or     BYTE PTR [eax],ch
     431:	00 03                	add    BYTE PTR [ebx],al
     433:	0e                   	push   cs
     434:	1c 05                	sbb    al,0x5
     436:	00 00                	add    BYTE PTR [eax],al
     438:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     43b:	03 0e                	add    ecx,DWORD PTR [esi]
     43d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     43f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     441:	39 0b                	cmp    DWORD PTR [ebx],ecx
     443:	49                   	dec    ecx
     444:	13 3f                	adc    edi,DWORD PTR [edi]
     446:	19 02                	sbb    DWORD PTR [edx],eax
     448:	18 00                	sbb    BYTE PTR [eax],al
     44a:	00 0a                	add    BYTE PTR [edx],cl
     44c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     44f:	19 03                	sbb    DWORD PTR [ebx],eax
     451:	0e                   	push   cs
     452:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     454:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     456:	39 0b                	cmp    DWORD PTR [ebx],ecx
     458:	27                   	daa    
     459:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     45c:	11 01                	adc    DWORD PTR [ecx],eax
     45e:	12 06                	adc    al,BYTE PTR [esi]
     460:	40                   	inc    eax
     461:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     467:	00 00                	add    BYTE PTR [eax],al
     469:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     46f:	0b 3b                	or     edi,DWORD PTR [ebx]
     471:	0b 39                	or     edi,DWORD PTR [ecx]
     473:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     476:	02 18                	add    bl,BYTE PTR [eax]
     478:	00 00                	add    BYTE PTR [eax],al
     47a:	0c 05                	or     al,0x5
     47c:	00 03                	add    BYTE PTR [ebx],al
     47e:	0e                   	push   cs
     47f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     481:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     483:	39 0b                	cmp    DWORD PTR [ebx],ecx
     485:	49                   	dec    ecx
     486:	13 02                	adc    eax,DWORD PTR [edx]
     488:	18 00                	sbb    BYTE PTR [eax],al
     48a:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     490:	03 0e                	add    ecx,DWORD PTR [esi]
     492:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     494:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     496:	39 0b                	cmp    DWORD PTR [ebx],ecx
     498:	27                   	daa    
     499:	19 11                	sbb    DWORD PTR [ecx],edx
     49b:	01 12                	add    DWORD PTR [edx],edx
     49d:	06                   	push   es
     49e:	40                   	inc    eax
     49f:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     4a5:	00 00                	add    BYTE PTR [eax],al
     4a7:	0e                   	push   cs
     4a8:	34 00                	xor    al,0x0
     4aa:	03 0e                	add    ecx,DWORD PTR [esi]
     4ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4b0:	39 0b                	cmp    DWORD PTR [ebx],ecx
     4b2:	49                   	dec    ecx
     4b3:	13 02                	adc    eax,DWORD PTR [edx]
     4b5:	18 00                	sbb    BYTE PTR [eax],al
     4b7:	00 0f                	add    BYTE PTR [edi],cl
     4b9:	0b 01                	or     eax,DWORD PTR [ecx]
     4bb:	11 01                	adc    DWORD PTR [ecx],eax
     4bd:	12 06                	adc    al,BYTE PTR [esi]
     4bf:	01 13                	add    DWORD PTR [ebx],edx
     4c1:	00 00                	add    BYTE PTR [eax],al
     4c3:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4c6:	03 08                	add    ecx,DWORD PTR [eax]
     4c8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4ca:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4cc:	39 0b                	cmp    DWORD PTR [ebx],ecx
     4ce:	49                   	dec    ecx
     4cf:	13 02                	adc    eax,DWORD PTR [edx]
     4d1:	18 00                	sbb    BYTE PTR [eax],al
     4d3:	00 11                	add    BYTE PTR [ecx],dl
     4d5:	0b 01                	or     eax,DWORD PTR [ecx]
     4d7:	11 01                	adc    DWORD PTR [ecx],eax
     4d9:	12 06                	adc    al,BYTE PTR [esi]
     4db:	00 00                	add    BYTE PTR [eax],al
     4dd:	12 2e                	adc    ch,BYTE PTR [esi]
     4df:	01 3f                	add    DWORD PTR [edi],edi
     4e1:	19 03                	sbb    DWORD PTR [ebx],eax
     4e3:	0e                   	push   cs
     4e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e8:	39 0b                	cmp    DWORD PTR [ebx],ecx
     4ea:	27                   	daa    
     4eb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4ee:	11 01                	adc    DWORD PTR [ecx],eax
     4f0:	12 06                	adc    al,BYTE PTR [esi]
     4f2:	40                   	inc    eax
     4f3:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     4f9:	00 01                	add    BYTE PTR [ecx],al
     4fb:	11 01                	adc    DWORD PTR [ecx],eax
     4fd:	25 0e 13 0b 03       	and    eax,0x30b130e
     502:	0e                   	push   cs
     503:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     505:	11 01                	adc    DWORD PTR [ecx],eax
     507:	12 06                	adc    al,BYTE PTR [esi]
     509:	10 17                	adc    BYTE PTR [edi],dl
     50b:	00 00                	add    BYTE PTR [eax],al
     50d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     510:	0b 0b                	or     ecx,DWORD PTR [ebx]
     512:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     515:	0e                   	push   cs
     516:	00 00                	add    BYTE PTR [eax],al
     518:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     51b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     51d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     520:	08 00                	or     BYTE PTR [eax],al
     522:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     525:	00 0b                	add    BYTE PTR [ebx],cl
     527:	0b 00                	or     eax,DWORD PTR [eax]
     529:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     52f:	49                   	dec    ecx
     530:	13 00                	adc    eax,DWORD PTR [eax]
     532:	00 06                	add    BYTE PTR [esi],al
     534:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     538:	00 00                	add    BYTE PTR [eax],al
     53a:	07                   	pop    es
     53b:	16                   	push   ss
     53c:	00 03                	add    BYTE PTR [ebx],al
     53e:	0e                   	push   cs
     53f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     541:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     543:	39 0b                	cmp    DWORD PTR [ebx],ecx
     545:	49                   	dec    ecx
     546:	13 00                	adc    eax,DWORD PTR [eax]
     548:	00 08                	add    BYTE PTR [eax],cl
     54a:	04 01                	add    al,0x1
     54c:	03 0e                	add    ecx,DWORD PTR [esi]
     54e:	3e 0b 0b             	or     ecx,DWORD PTR ds:[ebx]
     551:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     554:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     556:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     558:	39 0b                	cmp    DWORD PTR [ebx],ecx
     55a:	01 13                	add    DWORD PTR [ebx],edx
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	09 28                	or     DWORD PTR [eax],ebp
     560:	00 03                	add    BYTE PTR [ebx],al
     562:	0e                   	push   cs
     563:	1c 0b                	sbb    al,0xb
     565:	00 00                	add    BYTE PTR [eax],al
     567:	0a 28                	or     ch,BYTE PTR [eax]
     569:	00 03                	add    BYTE PTR [ebx],al
     56b:	0e                   	push   cs
     56c:	1c 05                	sbb    al,0x5
     56e:	00 00                	add    BYTE PTR [eax],al
     570:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     573:	03 0e                	add    ecx,DWORD PTR [esi]
     575:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     577:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     579:	39 0b                	cmp    DWORD PTR [ebx],ecx
     57b:	49                   	dec    ecx
     57c:	13 3f                	adc    edi,DWORD PTR [edi]
     57e:	19 02                	sbb    DWORD PTR [edx],eax
     580:	18 00                	sbb    BYTE PTR [eax],al
     582:	00 0c 13             	add    BYTE PTR [ebx+edx*1],cl
     585:	01 03                	add    DWORD PTR [ebx],eax
     587:	0e                   	push   cs
     588:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     58e:	39 0b                	cmp    DWORD PTR [ebx],ecx
     590:	01 13                	add    DWORD PTR [ebx],edx
     592:	00 00                	add    BYTE PTR [eax],al
     594:	0d 0d 00 03 0e       	or     eax,0xe03000d
     599:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     59b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     59d:	39 0b                	cmp    DWORD PTR [ebx],ecx
     59f:	49                   	dec    ecx
     5a0:	13 38                	adc    edi,DWORD PTR [eax]
     5a2:	0b 00                	or     eax,DWORD PTR [eax]
     5a4:	00 0e                	add    BYTE PTR [esi],cl
     5a6:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     5ab:	0b 3b                	or     edi,DWORD PTR [ebx]
     5ad:	0b 39                	or     edi,DWORD PTR [ecx]
     5af:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     5b2:	38 05 00 00 0f 01    	cmp    BYTE PTR ds:0x10f0000,al
     5b8:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     5bb:	01 13                	add    DWORD PTR [ebx],edx
     5bd:	00 00                	add    BYTE PTR [eax],al
     5bf:	10 21                	adc    BYTE PTR [ecx],ah
     5c1:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     5c4:	2f                   	das    
     5c5:	05 00 00 11 13       	add    eax,0x13110000
     5ca:	01 03                	add    DWORD PTR [ebx],eax
     5cc:	0e                   	push   cs
     5cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5cf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5d1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d3:	39 0b                	cmp    DWORD PTR [ebx],ecx
     5d5:	01 13                	add    DWORD PTR [ebx],edx
     5d7:	00 00                	add    BYTE PTR [eax],al
     5d9:	12 2e                	adc    ch,BYTE PTR [esi]
     5db:	01 3f                	add    DWORD PTR [edi],edi
     5dd:	19 03                	sbb    DWORD PTR [ebx],eax
     5df:	0e                   	push   cs
     5e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e4:	39 0b                	cmp    DWORD PTR [ebx],ecx
     5e6:	27                   	daa    
     5e7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ea:	11 01                	adc    DWORD PTR [ecx],eax
     5ec:	12 06                	adc    al,BYTE PTR [esi]
     5ee:	40                   	inc    eax
     5ef:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     5f5:	00 00                	add    BYTE PTR [eax],al
     5f7:	13 05 00 03 0e 3a    	adc    eax,DWORD PTR ds:0x3a0e0300
     5fd:	0b 3b                	or     edi,DWORD PTR [ebx]
     5ff:	0b 39                	or     edi,DWORD PTR [ecx]
     601:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     604:	02 18                	add    bl,BYTE PTR [eax]
     606:	00 00                	add    BYTE PTR [eax],al
     608:	14 05                	adc    al,0x5
     60a:	00 03                	add    BYTE PTR [ebx],al
     60c:	08 3a                	or     BYTE PTR [edx],bh
     60e:	0b 3b                	or     edi,DWORD PTR [ebx]
     610:	0b 39                	or     edi,DWORD PTR [ecx]
     612:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     615:	02 18                	add    bl,BYTE PTR [eax]
     617:	00 00                	add    BYTE PTR [eax],al
     619:	15 34 00 03 0e       	adc    eax,0xe030034
     61e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     620:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     622:	39 0b                	cmp    DWORD PTR [ebx],ecx
     624:	49                   	dec    ecx
     625:	13 02                	adc    eax,DWORD PTR [edx]
     627:	18 00                	sbb    BYTE PTR [eax],al
     629:	00 16                	add    BYTE PTR [esi],dl
     62b:	0a 00                	or     al,BYTE PTR [eax]
     62d:	03 0e                	add    ecx,DWORD PTR [esi]
     62f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     631:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     633:	39 0b                	cmp    DWORD PTR [ebx],ecx
     635:	11 01                	adc    DWORD PTR [ecx],eax
     637:	00 00                	add    BYTE PTR [eax],al
     639:	17                   	pop    ss
     63a:	0b 01                	or     eax,DWORD PTR [ecx]
     63c:	11 01                	adc    DWORD PTR [ecx],eax
     63e:	12 06                	adc    al,BYTE PTR [esi]
     640:	01 13                	add    DWORD PTR [ebx],edx
     642:	00 00                	add    BYTE PTR [eax],al
     644:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     647:	03 08                	add    ecx,DWORD PTR [eax]
     649:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     64b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     64d:	39 0b                	cmp    DWORD PTR [ebx],ecx
     64f:	49                   	dec    ecx
     650:	13 02                	adc    eax,DWORD PTR [edx]
     652:	18 00                	sbb    BYTE PTR [eax],al
     654:	00 19                	add    BYTE PTR [ecx],bl
     656:	0b 01                	or     eax,DWORD PTR [ecx]
     658:	11 01                	adc    DWORD PTR [ecx],eax
     65a:	12 06                	adc    al,BYTE PTR [esi]
     65c:	00 00                	add    BYTE PTR [eax],al
     65e:	1a 21                	sbb    ah,BYTE PTR [ecx]
     660:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     663:	2f                   	das    
     664:	0b 00                	or     eax,DWORD PTR [eax]
     666:	00 1b                	add    BYTE PTR [ebx],bl
     668:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     66b:	19 03                	sbb    DWORD PTR [ebx],eax
     66d:	0e                   	push   cs
     66e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     670:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     672:	39 0b                	cmp    DWORD PTR [ebx],ecx
     674:	27                   	daa    
     675:	19 11                	sbb    DWORD PTR [ecx],edx
     677:	01 12                	add    DWORD PTR [edx],edx
     679:	06                   	push   es
     67a:	40                   	inc    eax
     67b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     681:	00 00                	add    BYTE PTR [eax],al
     683:	1c 2e                	sbb    al,0x2e
     685:	00 3f                	add    BYTE PTR [edi],bh
     687:	19 03                	sbb    DWORD PTR [ebx],eax
     689:	0e                   	push   cs
     68a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     68c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     68e:	39 0b                	cmp    DWORD PTR [ebx],ecx
     690:	11 01                	adc    DWORD PTR [ecx],eax
     692:	12 06                	adc    al,BYTE PTR [esi]
     694:	40                   	inc    eax
     695:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     69b:	1d 2e 01 3f 19       	sbb    eax,0x193f012e
     6a0:	03 0e                	add    ecx,DWORD PTR [esi]
     6a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6a6:	39 0b                	cmp    DWORD PTR [ebx],ecx
     6a8:	27                   	daa    
     6a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     6ac:	11 01                	adc    DWORD PTR [ecx],eax
     6ae:	12 06                	adc    al,BYTE PTR [esi]
     6b0:	40                   	inc    eax
     6b1:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     6b7:	00 01                	add    BYTE PTR [ecx],al
     6b9:	11 01                	adc    DWORD PTR [ecx],eax
     6bb:	25 0e 13 0b 03       	and    eax,0x30b130e
     6c0:	0e                   	push   cs
     6c1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     6c3:	11 01                	adc    DWORD PTR [ecx],eax
     6c5:	12 06                	adc    al,BYTE PTR [esi]
     6c7:	10 17                	adc    BYTE PTR [edi],dl
     6c9:	00 00                	add    BYTE PTR [eax],al
     6cb:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     6ce:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6d0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6d3:	0e                   	push   cs
     6d4:	00 00                	add    BYTE PTR [eax],al
     6d6:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     6d9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6db:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6de:	08 00                	or     BYTE PTR [eax],al
     6e0:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     6e3:	00 0b                	add    BYTE PTR [ebx],cl
     6e5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6e8:	00 00                	add    BYTE PTR [eax],al
     6ea:	05 04 01 03 0e       	add    eax,0xe030104
     6ef:	3e 0b 0b             	or     ecx,DWORD PTR ds:[ebx]
     6f2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6f5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6f7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6f9:	39 0b                	cmp    DWORD PTR [ebx],ecx
     6fb:	01 13                	add    DWORD PTR [ebx],edx
     6fd:	00 00                	add    BYTE PTR [eax],al
     6ff:	06                   	push   es
     700:	28 00                	sub    BYTE PTR [eax],al
     702:	03 0e                	add    ecx,DWORD PTR [esi]
     704:	1c 0b                	sbb    al,0xb
     706:	00 00                	add    BYTE PTR [eax],al
     708:	07                   	pop    es
     709:	28 00                	sub    BYTE PTR [eax],al
     70b:	03 0e                	add    ecx,DWORD PTR [esi]
     70d:	1c 05                	sbb    al,0x5
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     714:	03 0e                	add    ecx,DWORD PTR [esi]
     716:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     718:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     71a:	39 0b                	cmp    DWORD PTR [ebx],ecx
     71c:	49                   	dec    ecx
     71d:	13 3f                	adc    edi,DWORD PTR [edi]
     71f:	19 02                	sbb    DWORD PTR [edx],eax
     721:	18 00                	sbb    BYTE PTR [eax],al
     723:	00 09                	add    BYTE PTR [ecx],cl
     725:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     728:	19 03                	sbb    DWORD PTR [ebx],eax
     72a:	0e                   	push   cs
     72b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     72d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     72f:	39 0b                	cmp    DWORD PTR [ebx],ecx
     731:	27                   	daa    
     732:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     735:	11 01                	adc    DWORD PTR [ecx],eax
     737:	12 06                	adc    al,BYTE PTR [esi]
     739:	40                   	inc    eax
     73a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     740:	00 00                	add    BYTE PTR [eax],al
     742:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     748:	0b 3b                	or     edi,DWORD PTR [ebx]
     74a:	0b 39                	or     edi,DWORD PTR [ecx]
     74c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     74f:	02 18                	add    bl,BYTE PTR [eax]
     751:	00 00                	add    BYTE PTR [eax],al
     753:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     756:	03 0e                	add    ecx,DWORD PTR [esi]
     758:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     75a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     75c:	39 0b                	cmp    DWORD PTR [ebx],ecx
     75e:	49                   	dec    ecx
     75f:	13 02                	adc    eax,DWORD PTR [edx]
     761:	18 00                	sbb    BYTE PTR [eax],al
     763:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     766:	00 03                	add    BYTE PTR [ebx],al
     768:	08 3a                	or     BYTE PTR [edx],bh
     76a:	0b 3b                	or     edi,DWORD PTR [ebx]
     76c:	0b 39                	or     edi,DWORD PTR [ecx]
     76e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     771:	02 18                	add    bl,BYTE PTR [eax]
     773:	00 00                	add    BYTE PTR [eax],al
     775:	0d 0a 00 03 0e       	or     eax,0xe03000a
     77a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     77c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     77e:	39 0b                	cmp    DWORD PTR [ebx],ecx
     780:	11 01                	adc    DWORD PTR [ecx],eax
     782:	00 00                	add    BYTE PTR [eax],al
     784:	0e                   	push   cs
     785:	01 01                	add    DWORD PTR [ecx],eax
     787:	49                   	dec    ecx
     788:	13 01                	adc    eax,DWORD PTR [ecx]
     78a:	13 00                	adc    eax,DWORD PTR [eax]
     78c:	00 0f                	add    BYTE PTR [edi],cl
     78e:	21 00                	and    DWORD PTR [eax],eax
     790:	49                   	dec    ecx
     791:	13 2f                	adc    ebp,DWORD PTR [edi]
     793:	0b 00                	or     eax,DWORD PTR [eax]
     795:	00 10                	add    BYTE PTR [eax],dl
     797:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     79a:	19 03                	sbb    DWORD PTR [ebx],eax
     79c:	0e                   	push   cs
     79d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     79f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7a1:	39 0b                	cmp    DWORD PTR [ebx],ecx
     7a3:	49                   	dec    ecx
     7a4:	13 11                	adc    edx,DWORD PTR [ecx]
     7a6:	01 12                	add    DWORD PTR [edx],edx
     7a8:	06                   	push   es
     7a9:	40                   	inc    eax
     7aa:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7b0:	00 00                	add    BYTE PTR [eax],al
     7b2:	11 2e                	adc    DWORD PTR [esi],ebp
     7b4:	01 3f                	add    DWORD PTR [edi],edi
     7b6:	19 03                	sbb    DWORD PTR [ebx],eax
     7b8:	0e                   	push   cs
     7b9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7bb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7bd:	39 0b                	cmp    DWORD PTR [ebx],ecx
     7bf:	27                   	daa    
     7c0:	19 11                	sbb    DWORD PTR [ecx],edx
     7c2:	01 12                	add    DWORD PTR [edx],edx
     7c4:	06                   	push   es
     7c5:	40                   	inc    eax
     7c6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7cc:	00 00                	add    BYTE PTR [eax],al
     7ce:	12 05 00 03 08 3a    	adc    al,BYTE PTR ds:0x3a080300
     7d4:	0b 3b                	or     edi,DWORD PTR [ebx]
     7d6:	0b 39                	or     edi,DWORD PTR [ecx]
     7d8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     7db:	02 18                	add    bl,BYTE PTR [eax]
     7dd:	00 00                	add    BYTE PTR [eax],al
     7df:	13 2e                	adc    ebp,DWORD PTR [esi]
     7e1:	01 3f                	add    DWORD PTR [edi],edi
     7e3:	19 03                	sbb    DWORD PTR [ebx],eax
     7e5:	0e                   	push   cs
     7e6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7e8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ea:	39 0b                	cmp    DWORD PTR [ebx],ecx
     7ec:	27                   	daa    
     7ed:	19 11                	sbb    DWORD PTR [ecx],edx
     7ef:	01 12                	add    DWORD PTR [edx],edx
     7f1:	06                   	push   es
     7f2:	40                   	inc    eax
     7f3:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     7f9:	00 01                	add    BYTE PTR [ecx],al
     7fb:	11 01                	adc    DWORD PTR [ecx],eax
     7fd:	25 0e 13 0b 03       	and    eax,0x30b130e
     802:	0e                   	push   cs
     803:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     805:	11 01                	adc    DWORD PTR [ecx],eax
     807:	12 06                	adc    al,BYTE PTR [esi]
     809:	10 17                	adc    BYTE PTR [edi],dl
     80b:	00 00                	add    BYTE PTR [eax],al
     80d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     810:	0b 0b                	or     ecx,DWORD PTR [ebx]
     812:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     815:	0e                   	push   cs
     816:	00 00                	add    BYTE PTR [eax],al
     818:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     81b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     81d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     820:	08 00                	or     BYTE PTR [eax],al
     822:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     825:	00 0b                	add    BYTE PTR [ebx],cl
     827:	0b 00                	or     eax,DWORD PTR [eax]
     829:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     82f:	49                   	dec    ecx
     830:	13 00                	adc    eax,DWORD PTR [eax]
     832:	00 06                	add    BYTE PTR [esi],al
     834:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     838:	00 00                	add    BYTE PTR [eax],al
     83a:	07                   	pop    es
     83b:	16                   	push   ss
     83c:	00 03                	add    BYTE PTR [ebx],al
     83e:	0e                   	push   cs
     83f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     841:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     843:	39 0b                	cmp    DWORD PTR [ebx],ecx
     845:	49                   	dec    ecx
     846:	13 00                	adc    eax,DWORD PTR [eax]
     848:	00 08                	add    BYTE PTR [eax],cl
     84a:	0f 00 0b             	str    WORD PTR [ebx]
     84d:	0b 03                	or     eax,DWORD PTR [ebx]
     84f:	0e                   	push   cs
     850:	49                   	dec    ecx
     851:	13 00                	adc    eax,DWORD PTR [eax]
     853:	00 09                	add    BYTE PTR [ecx],cl
     855:	04 01                	add    al,0x1
     857:	03 0e                	add    ecx,DWORD PTR [esi]
     859:	3e 0b 0b             	or     ecx,DWORD PTR ds:[ebx]
     85c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     85f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     861:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     863:	39 0b                	cmp    DWORD PTR [ebx],ecx
     865:	01 13                	add    DWORD PTR [ebx],edx
     867:	00 00                	add    BYTE PTR [eax],al
     869:	0a 28                	or     ch,BYTE PTR [eax]
     86b:	00 03                	add    BYTE PTR [ebx],al
     86d:	0e                   	push   cs
     86e:	1c 0b                	sbb    al,0xb
     870:	00 00                	add    BYTE PTR [eax],al
     872:	0b 28                	or     ebp,DWORD PTR [eax]
     874:	00 03                	add    BYTE PTR [ebx],al
     876:	0e                   	push   cs
     877:	1c 05                	sbb    al,0x5
     879:	00 00                	add    BYTE PTR [eax],al
     87b:	0c 34                	or     al,0x34
     87d:	00 03                	add    BYTE PTR [ebx],al
     87f:	0e                   	push   cs
     880:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     882:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     884:	39 0b                	cmp    DWORD PTR [ebx],ecx
     886:	49                   	dec    ecx
     887:	13 3f                	adc    edi,DWORD PTR [edi]
     889:	19 02                	sbb    DWORD PTR [edx],eax
     88b:	18 00                	sbb    BYTE PTR [eax],al
     88d:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     893:	03 0e                	add    ecx,DWORD PTR [esi]
     895:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     897:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR ds:0x19270b39
     89d:	49                   	dec    ecx
     89e:	13 11                	adc    edx,DWORD PTR [ecx]
     8a0:	01 12                	add    DWORD PTR [edx],edx
     8a2:	06                   	push   es
     8a3:	40                   	inc    eax
     8a4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     8aa:	00 00                	add    BYTE PTR [eax],al
     8ac:	0e                   	push   cs
     8ad:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     8b2:	0b 3b                	or     edi,DWORD PTR [ebx]
     8b4:	05 39 0b 49 13       	add    eax,0x13490b39
     8b9:	02 18                	add    bl,BYTE PTR [eax]
     8bb:	00 00                	add    BYTE PTR [eax],al
     8bd:	0f 05                	syscall 
     8bf:	00 03                	add    BYTE PTR [ebx],al
     8c1:	08 3a                	or     BYTE PTR [edx],bh
     8c3:	0b 3b                	or     edi,DWORD PTR [ebx]
     8c5:	05 39 0b 49 13       	add    eax,0x13490b39
     8ca:	02 18                	add    bl,BYTE PTR [eax]
     8cc:	00 00                	add    BYTE PTR [eax],al
     8ce:	10 2e                	adc    BYTE PTR [esi],ch
     8d0:	00 3f                	add    BYTE PTR [edi],bh
     8d2:	19 03                	sbb    DWORD PTR [ebx],eax
     8d4:	0e                   	push   cs
     8d5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8d7:	3b 05 39 0b 11 01    	cmp    eax,DWORD PTR ds:0x1110b39
     8dd:	12 06                	adc    al,BYTE PTR [esi]
     8df:	40                   	inc    eax
     8e0:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     8e6:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
     8e9:	03 0e                	add    ecx,DWORD PTR [esi]
     8eb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8ed:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR ds:0x13490b39
     8f3:	02 18                	add    bl,BYTE PTR [eax]
     8f5:	00 00                	add    BYTE PTR [eax],al
     8f7:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     8fa:	03 08                	add    ecx,DWORD PTR [eax]
     8fc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8fe:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR ds:0x13490b39
     904:	02 18                	add    bl,BYTE PTR [eax]
     906:	00 00                	add    BYTE PTR [eax],al
     908:	13 0b                	adc    ecx,DWORD PTR [ebx]
     90a:	01 11                	add    DWORD PTR [ecx],edx
     90c:	01 12                	add    DWORD PTR [edx],edx
     90e:	06                   	push   es
     90f:	01 13                	add    DWORD PTR [ebx],edx
     911:	00 00                	add    BYTE PTR [eax],al
     913:	14 0b                	adc    al,0xb
     915:	01 11                	add    DWORD PTR [ecx],edx
     917:	01 12                	add    DWORD PTR [edx],edx
     919:	06                   	push   es
     91a:	00 00                	add    BYTE PTR [eax],al
     91c:	15 0b 01 55 17       	adc    eax,0x1755010b
     921:	00 00                	add    BYTE PTR [eax],al
     923:	16                   	push   ss
     924:	01 01                	add    DWORD PTR [ecx],eax
     926:	49                   	dec    ecx
     927:	13 01                	adc    eax,DWORD PTR [ecx]
     929:	13 00                	adc    eax,DWORD PTR [eax]
     92b:	00 17                	add    BYTE PTR [edi],dl
     92d:	21 00                	and    DWORD PTR [eax],eax
     92f:	49                   	dec    ecx
     930:	13 2f                	adc    ebp,DWORD PTR [edi]
     932:	05 00 00 18 21       	add    eax,0x21180000
     937:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     93a:	2f                   	das    
     93b:	0b 00                	or     eax,DWORD PTR [eax]
     93d:	00 19                	add    BYTE PTR [ecx],bl
     93f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     942:	19 03                	sbb    DWORD PTR [ebx],eax
     944:	0e                   	push   cs
     945:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     947:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     949:	39 0b                	cmp    DWORD PTR [ebx],ecx
     94b:	27                   	daa    
     94c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     94f:	11 01                	adc    DWORD PTR [ecx],eax
     951:	12 06                	adc    al,BYTE PTR [esi]
     953:	40                   	inc    eax
     954:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     95a:	00 00                	add    BYTE PTR [eax],al
     95c:	1a 05 00 03 0e 3a    	sbb    al,BYTE PTR ds:0x3a0e0300
     962:	0b 3b                	or     edi,DWORD PTR [ebx]
     964:	0b 39                	or     edi,DWORD PTR [ecx]
     966:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     969:	02 18                	add    bl,BYTE PTR [eax]
     96b:	00 00                	add    BYTE PTR [eax],al
     96d:	1b 34 00             	sbb    esi,DWORD PTR [eax+eax*1]
     970:	03 08                	add    ecx,DWORD PTR [eax]
     972:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     974:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     976:	39 0b                	cmp    DWORD PTR [ebx],ecx
     978:	49                   	dec    ecx
     979:	13 02                	adc    eax,DWORD PTR [edx]
     97b:	18 00                	sbb    BYTE PTR [eax],al
     97d:	00 1c 34             	add    BYTE PTR [esp+esi*1],bl
     980:	00 03                	add    BYTE PTR [ebx],al
     982:	0e                   	push   cs
     983:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     985:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     987:	39 0b                	cmp    DWORD PTR [ebx],ecx
     989:	49                   	dec    ecx
     98a:	13 02                	adc    eax,DWORD PTR [edx]
     98c:	18 00                	sbb    BYTE PTR [eax],al
     98e:	00 1d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,bl
     994:	03 0e                	add    ecx,DWORD PTR [esi]
     996:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     998:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     99a:	39 0b                	cmp    DWORD PTR [ebx],ecx
     99c:	27                   	daa    
     99d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9a0:	11 01                	adc    DWORD PTR [ecx],eax
     9a2:	12 06                	adc    al,BYTE PTR [esi]
     9a4:	40                   	inc    eax
     9a5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     9ab:	00 00                	add    BYTE PTR [eax],al
     9ad:	1e                   	push   ds
     9ae:	05 00 03 08 3a       	add    eax,0x3a080300
     9b3:	0b 3b                	or     edi,DWORD PTR [ebx]
     9b5:	0b 39                	or     edi,DWORD PTR [ecx]
     9b7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9ba:	02 18                	add    bl,BYTE PTR [eax]
     9bc:	00 00                	add    BYTE PTR [eax],al
     9be:	1f                   	pop    ds
     9bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9c2:	19 03                	sbb    DWORD PTR [ebx],eax
     9c4:	0e                   	push   cs
     9c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9c9:	39 0b                	cmp    DWORD PTR [ebx],ecx
     9cb:	27                   	daa    
     9cc:	19 11                	sbb    DWORD PTR [ecx],edx
     9ce:	01 12                	add    DWORD PTR [edx],edx
     9d0:	06                   	push   es
     9d1:	40                   	inc    eax
     9d2:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     9d8:	00 00                	add    BYTE PTR [eax],al
     9da:	20 2e                	and    BYTE PTR [esi],ch
     9dc:	01 3f                	add    DWORD PTR [edi],edi
     9de:	19 03                	sbb    DWORD PTR [ebx],eax
     9e0:	0e                   	push   cs
     9e1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9e5:	39 0b                	cmp    DWORD PTR [ebx],ecx
     9e7:	49                   	dec    ecx
     9e8:	13 11                	adc    edx,DWORD PTR [ecx]
     9ea:	01 12                	add    DWORD PTR [edx],edx
     9ec:	06                   	push   es
     9ed:	40                   	inc    eax
     9ee:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     9f4:	00 00                	add    BYTE PTR [eax],al
     9f6:	21 2e                	and    DWORD PTR [esi],ebp
     9f8:	00 3f                	add    BYTE PTR [edi],bh
     9fa:	19 03                	sbb    DWORD PTR [ebx],eax
     9fc:	0e                   	push   cs
     9fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a01:	39 0b                	cmp    DWORD PTR [ebx],ecx
     a03:	11 01                	adc    DWORD PTR [ecx],eax
     a05:	12 06                	adc    al,BYTE PTR [esi]
     a07:	40                   	inc    eax
     a08:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     a0e:	22 18                	and    bl,BYTE PTR [eax]
     a10:	00 00                	add    BYTE PTR [eax],al
     a12:	00 23                	add    BYTE PTR [ebx],ah
     a14:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     a17:	19 03                	sbb    DWORD PTR [ebx],eax
     a19:	0e                   	push   cs
     a1a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a1c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a1e:	39 0b                	cmp    DWORD PTR [ebx],ecx
     a20:	27                   	daa    
     a21:	19 11                	sbb    DWORD PTR [ecx],edx
     a23:	01 12                	add    DWORD PTR [edx],edx
     a25:	06                   	push   es
     a26:	40                   	inc    eax
     a27:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     a2d:	24 2e                	and    al,0x2e
     a2f:	01 3f                	add    DWORD PTR [edi],edi
     a31:	19 03                	sbb    DWORD PTR [ebx],eax
     a33:	0e                   	push   cs
     a34:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a36:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a38:	39 0b                	cmp    DWORD PTR [ebx],ecx
     a3a:	27                   	daa    
     a3b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a3e:	11 01                	adc    DWORD PTR [ecx],eax
     a40:	12 06                	adc    al,BYTE PTR [esi]
     a42:	40                   	inc    eax
     a43:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     a49:	00 01                	add    BYTE PTR [ecx],al
     a4b:	11 01                	adc    DWORD PTR [ecx],eax
     a4d:	25 0e 13 0b 03       	and    eax,0x30b130e
     a52:	0e                   	push   cs
     a53:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a55:	11 01                	adc    DWORD PTR [ecx],eax
     a57:	12 06                	adc    al,BYTE PTR [esi]
     a59:	10 17                	adc    BYTE PTR [edi],dl
     a5b:	00 00                	add    BYTE PTR [eax],al
     a5d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a60:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a62:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a65:	0e                   	push   cs
     a66:	00 00                	add    BYTE PTR [eax],al
     a68:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a6b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a6d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a70:	08 00                	or     BYTE PTR [eax],al
     a72:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     a75:	00 0b                	add    BYTE PTR [ebx],cl
     a77:	0b 00                	or     eax,DWORD PTR [eax]
     a79:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a7f:	49                   	dec    ecx
     a80:	13 00                	adc    eax,DWORD PTR [eax]
     a82:	00 06                	add    BYTE PTR [esi],al
     a84:	16                   	push   ss
     a85:	00 03                	add    BYTE PTR [ebx],al
     a87:	0e                   	push   cs
     a88:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a8a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a8c:	39 0b                	cmp    DWORD PTR [ebx],ecx
     a8e:	49                   	dec    ecx
     a8f:	13 00                	adc    eax,DWORD PTR [eax]
     a91:	00 07                	add    BYTE PTR [edi],al
     a93:	04 01                	add    al,0x1
     a95:	03 0e                	add    ecx,DWORD PTR [esi]
     a97:	3e 0b 0b             	or     ecx,DWORD PTR ds:[ebx]
     a9a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a9d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a9f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aa1:	39 0b                	cmp    DWORD PTR [ebx],ecx
     aa3:	01 13                	add    DWORD PTR [ebx],edx
     aa5:	00 00                	add    BYTE PTR [eax],al
     aa7:	08 28                	or     BYTE PTR [eax],ch
     aa9:	00 03                	add    BYTE PTR [ebx],al
     aab:	0e                   	push   cs
     aac:	1c 0b                	sbb    al,0xb
     aae:	00 00                	add    BYTE PTR [eax],al
     ab0:	09 28                	or     DWORD PTR [eax],ebp
     ab2:	00 03                	add    BYTE PTR [ebx],al
     ab4:	0e                   	push   cs
     ab5:	1c 05                	sbb    al,0x5
     ab7:	00 00                	add    BYTE PTR [eax],al
     ab9:	0a 13                	or     dl,BYTE PTR [ebx]
     abb:	01 03                	add    DWORD PTR [ebx],eax
     abd:	0e                   	push   cs
     abe:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ac0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ac2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ac4:	39 0b                	cmp    DWORD PTR [ebx],ecx
     ac6:	01 13                	add    DWORD PTR [ebx],edx
     ac8:	00 00                	add    BYTE PTR [eax],al
     aca:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     ad0:	0b 3b                	or     edi,DWORD PTR [ebx]
     ad2:	0b 39                	or     edi,DWORD PTR [ecx]
     ad4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ad7:	38 0b                	cmp    BYTE PTR [ebx],cl
     ad9:	00 00                	add    BYTE PTR [eax],al
     adb:	0c 0d                	or     al,0xd
     add:	00 03                	add    BYTE PTR [ebx],al
     adf:	08 3a                	or     BYTE PTR [edx],bh
     ae1:	0b 3b                	or     edi,DWORD PTR [ebx]
     ae3:	0b 39                	or     edi,DWORD PTR [ecx]
     ae5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ae8:	38 0b                	cmp    BYTE PTR [ebx],cl
     aea:	00 00                	add    BYTE PTR [eax],al
     aec:	0d 34 00 03 0e       	or     eax,0xe030034
     af1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     af3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     af5:	39 0b                	cmp    DWORD PTR [ebx],ecx
     af7:	49                   	dec    ecx
     af8:	13 3f                	adc    edi,DWORD PTR [edi]
     afa:	19 02                	sbb    DWORD PTR [edx],eax
     afc:	18 00                	sbb    BYTE PTR [eax],al
     afe:	00 0e                	add    BYTE PTR [esi],cl
     b00:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b03:	19 03                	sbb    DWORD PTR [ebx],eax
     b05:	0e                   	push   cs
     b06:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b08:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b0a:	39 0b                	cmp    DWORD PTR [ebx],ecx
     b0c:	27                   	daa    
     b0d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b10:	11 01                	adc    DWORD PTR [ecx],eax
     b12:	12 06                	adc    al,BYTE PTR [esi]
     b14:	40                   	inc    eax
     b15:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     b1b:	0f 05                	syscall 
     b1d:	00 03                	add    BYTE PTR [ebx],al
     b1f:	0e                   	push   cs
     b20:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b22:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b24:	39 0b                	cmp    DWORD PTR [ebx],ecx
     b26:	49                   	dec    ecx
     b27:	13 02                	adc    eax,DWORD PTR [edx]
     b29:	18 00                	sbb    BYTE PTR [eax],al
     b2b:	00 10                	add    BYTE PTR [eax],dl
     b2d:	05 00 03 08 3a       	add    eax,0x3a080300
     b32:	0b 3b                	or     edi,DWORD PTR [ebx]
     b34:	0b 39                	or     edi,DWORD PTR [ecx]
     b36:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b39:	02 18                	add    bl,BYTE PTR [eax]
     b3b:	00 00                	add    BYTE PTR [eax],al
     b3d:	00 01                	add    BYTE PTR [ecx],al
     b3f:	11 01                	adc    DWORD PTR [ecx],eax
     b41:	25 0e 13 0b 03       	and    eax,0x30b130e
     b46:	0e                   	push   cs
     b47:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b49:	11 01                	adc    DWORD PTR [ecx],eax
     b4b:	12 06                	adc    al,BYTE PTR [esi]
     b4d:	10 17                	adc    BYTE PTR [edi],dl
     b4f:	00 00                	add    BYTE PTR [eax],al
     b51:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b54:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b56:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b59:	0e                   	push   cs
     b5a:	00 00                	add    BYTE PTR [eax],al
     b5c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b5f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b61:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b64:	08 00                	or     BYTE PTR [eax],al
     b66:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     b69:	00 03                	add    BYTE PTR [ebx],al
     b6b:	0e                   	push   cs
     b6c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b6e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b70:	39 0b                	cmp    DWORD PTR [ebx],ecx
     b72:	49                   	dec    ecx
     b73:	13 00                	adc    eax,DWORD PTR [eax]
     b75:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     b7b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b7d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b7f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b81:	39 0b                	cmp    DWORD PTR [ebx],ecx
     b83:	01 13                	add    DWORD PTR [ebx],edx
     b85:	00 00                	add    BYTE PTR [eax],al
     b87:	06                   	push   es
     b88:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     b8d:	0b 3b                	or     edi,DWORD PTR [ebx]
     b8f:	0b 39                	or     edi,DWORD PTR [ecx]
     b91:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b94:	38 0b                	cmp    BYTE PTR [ebx],cl
     b96:	00 00                	add    BYTE PTR [eax],al
     b98:	07                   	pop    es
     b99:	0d 00 03 08 3a       	or     eax,0x3a080300
     b9e:	0b 3b                	or     edi,DWORD PTR [ebx]
     ba0:	0b 39                	or     edi,DWORD PTR [ecx]
     ba2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ba5:	38 0b                	cmp    BYTE PTR [ebx],cl
     ba7:	00 00                	add    BYTE PTR [eax],al
     ba9:	08 0f                	or     BYTE PTR [edi],cl
     bab:	00 0b                	add    BYTE PTR [ebx],cl
     bad:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bb0:	00 00                	add    BYTE PTR [eax],al
     bb2:	09 0f                	or     DWORD PTR [edi],ecx
     bb4:	00 0b                	add    BYTE PTR [ebx],cl
     bb6:	0b 00                	or     eax,DWORD PTR [eax]
     bb8:	00 0a                	add    BYTE PTR [edx],cl
     bba:	04 01                	add    al,0x1
     bbc:	03 0e                	add    ecx,DWORD PTR [esi]
     bbe:	3e 0b 0b             	or     ecx,DWORD PTR ds:[ebx]
     bc1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bc4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bc6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bc8:	39 0b                	cmp    DWORD PTR [ebx],ecx
     bca:	01 13                	add    DWORD PTR [ebx],edx
     bcc:	00 00                	add    BYTE PTR [eax],al
     bce:	0b 28                	or     ebp,DWORD PTR [eax]
     bd0:	00 03                	add    BYTE PTR [ebx],al
     bd2:	0e                   	push   cs
     bd3:	1c 0b                	sbb    al,0xb
     bd5:	00 00                	add    BYTE PTR [eax],al
     bd7:	0c 28                	or     al,0x28
     bd9:	00 03                	add    BYTE PTR [ebx],al
     bdb:	0e                   	push   cs
     bdc:	1c 05                	sbb    al,0x5
     bde:	00 00                	add    BYTE PTR [eax],al
     be0:	0d 34 00 03 0e       	or     eax,0xe030034
     be5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     be7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     be9:	39 0b                	cmp    DWORD PTR [ebx],ecx
     beb:	49                   	dec    ecx
     bec:	13 3f                	adc    edi,DWORD PTR [edi]
     bee:	19 02                	sbb    DWORD PTR [edx],eax
     bf0:	18 00                	sbb    BYTE PTR [eax],al
     bf2:	00 0e                	add    BYTE PTR [esi],cl
     bf4:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     bf7:	19 03                	sbb    DWORD PTR [ebx],eax
     bf9:	0e                   	push   cs
     bfa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bfc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bfe:	39 0b                	cmp    DWORD PTR [ebx],ecx
     c00:	11 01                	adc    DWORD PTR [ecx],eax
     c02:	12 06                	adc    al,BYTE PTR [esi]
     c04:	40                   	inc    eax
     c05:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     c0b:	0f 2e 01             	ucomiss xmm0,DWORD PTR [ecx]
     c0e:	3f                   	aas    
     c0f:	19 03                	sbb    DWORD PTR [ebx],eax
     c11:	0e                   	push   cs
     c12:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c14:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c16:	39 0b                	cmp    DWORD PTR [ebx],ecx
     c18:	27                   	daa    
     c19:	19 11                	sbb    DWORD PTR [ecx],edx
     c1b:	01 12                	add    DWORD PTR [edx],edx
     c1d:	06                   	push   es
     c1e:	40                   	inc    eax
     c1f:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c25:	00 00                	add    BYTE PTR [eax],al
     c27:	10 05 00 03 0e 3a    	adc    BYTE PTR ds:0x3a0e0300,al
     c2d:	0b 3b                	or     edi,DWORD PTR [ebx]
     c2f:	0b 39                	or     edi,DWORD PTR [ecx]
     c31:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c34:	02 18                	add    bl,BYTE PTR [eax]
     c36:	00 00                	add    BYTE PTR [eax],al
     c38:	11 2e                	adc    DWORD PTR [esi],ebp
     c3a:	01 3f                	add    DWORD PTR [edi],edi
     c3c:	19 03                	sbb    DWORD PTR [ebx],eax
     c3e:	0e                   	push   cs
     c3f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c41:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c43:	39 0b                	cmp    DWORD PTR [ebx],ecx
     c45:	27                   	daa    
     c46:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c49:	11 01                	adc    DWORD PTR [ecx],eax
     c4b:	12 06                	adc    al,BYTE PTR [esi]
     c4d:	40                   	inc    eax
     c4e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c54:	00 00                	add    BYTE PTR [eax],al
     c56:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     c59:	03 0e                	add    ecx,DWORD PTR [esi]
     c5b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c5d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c5f:	39 0b                	cmp    DWORD PTR [ebx],ecx
     c61:	49                   	dec    ecx
     c62:	13 02                	adc    eax,DWORD PTR [edx]
     c64:	18 00                	sbb    BYTE PTR [eax],al
     c66:	00 13                	add    BYTE PTR [ebx],dl
     c68:	34 00                	xor    al,0x0
     c6a:	03 08                	add    ecx,DWORD PTR [eax]
     c6c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c6e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c70:	39 0b                	cmp    DWORD PTR [ebx],ecx
     c72:	49                   	dec    ecx
     c73:	13 02                	adc    eax,DWORD PTR [edx]
     c75:	18 00                	sbb    BYTE PTR [eax],al
     c77:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
     c7a:	01 11                	add    DWORD PTR [ecx],edx
     c7c:	01 12                	add    DWORD PTR [edx],edx
     c7e:	06                   	push   es
     c7f:	00 00                	add    BYTE PTR [eax],al
     c81:	15 0a 00 03 0e       	adc    eax,0xe03000a
     c86:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c88:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c8a:	39 0b                	cmp    DWORD PTR [ebx],ecx
     c8c:	11 01                	adc    DWORD PTR [ecx],eax
     c8e:	00 00                	add    BYTE PTR [eax],al
     c90:	16                   	push   ss
     c91:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c94:	19 03                	sbb    DWORD PTR [ebx],eax
     c96:	0e                   	push   cs
     c97:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c99:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c9b:	39 0b                	cmp    DWORD PTR [ebx],ecx
     c9d:	27                   	daa    
     c9e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ca1:	11 01                	adc    DWORD PTR [ecx],eax
     ca3:	12 06                	adc    al,BYTE PTR [esi]
     ca5:	40                   	inc    eax
     ca6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     cac:	00 00                	add    BYTE PTR [eax],al
     cae:	00 01                	add    BYTE PTR [ecx],al
     cb0:	11 01                	adc    DWORD PTR [ecx],eax
     cb2:	25 0e 13 0b 03       	and    eax,0x30b130e
     cb7:	0e                   	push   cs
     cb8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     cba:	11 01                	adc    DWORD PTR [ecx],eax
     cbc:	12 06                	adc    al,BYTE PTR [esi]
     cbe:	10 17                	adc    BYTE PTR [edi],dl
     cc0:	00 00                	add    BYTE PTR [eax],al
     cc2:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     cc5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cc7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cca:	0e                   	push   cs
     ccb:	00 00                	add    BYTE PTR [eax],al
     ccd:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     cd0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cd2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cd5:	08 00                	or     BYTE PTR [eax],al
     cd7:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     cda:	00 0b                	add    BYTE PTR [ebx],cl
     cdc:	0b 00                	or     eax,DWORD PTR [eax]
     cde:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     ce4:	49                   	dec    ecx
     ce5:	13 00                	adc    eax,DWORD PTR [eax]
     ce7:	00 06                	add    BYTE PTR [esi],al
     ce9:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     ced:	00 00                	add    BYTE PTR [eax],al
     cef:	07                   	pop    es
     cf0:	16                   	push   ss
     cf1:	00 03                	add    BYTE PTR [ebx],al
     cf3:	0e                   	push   cs
     cf4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cf6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cf8:	39 0b                	cmp    DWORD PTR [ebx],ecx
     cfa:	49                   	dec    ecx
     cfb:	13 00                	adc    eax,DWORD PTR [eax]
     cfd:	00 08                	add    BYTE PTR [eax],cl
     cff:	34 00                	xor    al,0x0
     d01:	03 0e                	add    ecx,DWORD PTR [esi]
     d03:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d05:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d07:	39 0b                	cmp    DWORD PTR [ebx],ecx
     d09:	49                   	dec    ecx
     d0a:	13 3f                	adc    edi,DWORD PTR [edi]
     d0c:	19 02                	sbb    DWORD PTR [edx],eax
     d0e:	18 00                	sbb    BYTE PTR [eax],al
     d10:	00 09                	add    BYTE PTR [ecx],cl
     d12:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d15:	19 03                	sbb    DWORD PTR [ebx],eax
     d17:	0e                   	push   cs
     d18:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d1a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d1c:	39 0b                	cmp    DWORD PTR [ebx],ecx
     d1e:	27                   	daa    
     d1f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d22:	11 01                	adc    DWORD PTR [ecx],eax
     d24:	12 06                	adc    al,BYTE PTR [esi]
     d26:	40                   	inc    eax
     d27:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d2d:	00 00                	add    BYTE PTR [eax],al
     d2f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     d35:	0b 3b                	or     edi,DWORD PTR [ebx]
     d37:	0b 39                	or     edi,DWORD PTR [ecx]
     d39:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d3c:	02 18                	add    bl,BYTE PTR [eax]
     d3e:	00 00                	add    BYTE PTR [eax],al
     d40:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     d46:	0b 3b                	or     edi,DWORD PTR [ebx]
     d48:	0b 39                	or     edi,DWORD PTR [ecx]
     d4a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d4d:	02 18                	add    bl,BYTE PTR [eax]
     d4f:	00 00                	add    BYTE PTR [eax],al
     d51:	0c 26                	or     al,0x26
     d53:	00 00                	add    BYTE PTR [eax],al
     d55:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     d5b:	03 0e                	add    ecx,DWORD PTR [esi]
     d5d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d5f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d61:	39 0b                	cmp    DWORD PTR [ebx],ecx
     d63:	27                   	daa    
     d64:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d67:	11 01                	adc    DWORD PTR [ecx],eax
     d69:	12 06                	adc    al,BYTE PTR [esi]
     d6b:	40                   	inc    eax
     d6c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d72:	00 00                	add    BYTE PTR [eax],al
     d74:	0e                   	push   cs
     d75:	34 00                	xor    al,0x0
     d77:	03 08                	add    ecx,DWORD PTR [eax]
     d79:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d7b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d7d:	39 0b                	cmp    DWORD PTR [ebx],ecx
     d7f:	49                   	dec    ecx
     d80:	13 02                	adc    eax,DWORD PTR [edx]
     d82:	18 00                	sbb    BYTE PTR [eax],al
     d84:	00 0f                	add    BYTE PTR [edi],cl
     d86:	0b 01                	or     eax,DWORD PTR [ecx]
     d88:	11 01                	adc    DWORD PTR [ecx],eax
     d8a:	12 06                	adc    al,BYTE PTR [esi]
     d8c:	01 13                	add    DWORD PTR [ebx],edx
     d8e:	00 00                	add    BYTE PTR [eax],al
     d90:	10 0b                	adc    BYTE PTR [ebx],cl
     d92:	01 11                	add    DWORD PTR [ecx],edx
     d94:	01 12                	add    DWORD PTR [edx],edx
     d96:	06                   	push   es
     d97:	00 00                	add    BYTE PTR [eax],al
     d99:	00 01                	add    BYTE PTR [ecx],al
     d9b:	11 01                	adc    DWORD PTR [ecx],eax
     d9d:	25 0e 13 0b 03       	and    eax,0x30b130e
     da2:	0e                   	push   cs
     da3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     da5:	11 01                	adc    DWORD PTR [ecx],eax
     da7:	12 06                	adc    al,BYTE PTR [esi]
     da9:	10 17                	adc    BYTE PTR [edi],dl
     dab:	00 00                	add    BYTE PTR [eax],al
     dad:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     db0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     db2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     db5:	0e                   	push   cs
     db6:	00 00                	add    BYTE PTR [eax],al
     db8:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     dbb:	0b 0b                	or     ecx,DWORD PTR [ebx]
     dbd:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dc0:	08 00                	or     BYTE PTR [eax],al
     dc2:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     dc5:	00 0b                	add    BYTE PTR [ebx],cl
     dc7:	0b 00                	or     eax,DWORD PTR [eax]
     dc9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     dcf:	49                   	dec    ecx
     dd0:	13 00                	adc    eax,DWORD PTR [eax]
     dd2:	00 06                	add    BYTE PTR [esi],al
     dd4:	16                   	push   ss
     dd5:	00 03                	add    BYTE PTR [ebx],al
     dd7:	0e                   	push   cs
     dd8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dda:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ddc:	39 0b                	cmp    DWORD PTR [ebx],ecx
     dde:	49                   	dec    ecx
     ddf:	13 00                	adc    eax,DWORD PTR [eax]
     de1:	00 07                	add    BYTE PTR [edi],al
     de3:	34 00                	xor    al,0x0
     de5:	03 0e                	add    ecx,DWORD PTR [esi]
     de7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     de9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     deb:	39 0b                	cmp    DWORD PTR [ebx],ecx
     ded:	49                   	dec    ecx
     dee:	13 3f                	adc    edi,DWORD PTR [edi]
     df0:	19 02                	sbb    DWORD PTR [edx],eax
     df2:	18 00                	sbb    BYTE PTR [eax],al
     df4:	00 08                	add    BYTE PTR [eax],cl
     df6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     df9:	19 03                	sbb    DWORD PTR [ebx],eax
     dfb:	0e                   	push   cs
     dfc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dfe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e00:	39 0b                	cmp    DWORD PTR [ebx],ecx
     e02:	27                   	daa    
     e03:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e06:	11 01                	adc    DWORD PTR [ecx],eax
     e08:	12 06                	adc    al,BYTE PTR [esi]
     e0a:	40                   	inc    eax
     e0b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e11:	00 00                	add    BYTE PTR [eax],al
     e13:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     e19:	0b 3b                	or     edi,DWORD PTR [ebx]
     e1b:	0b 39                	or     edi,DWORD PTR [ecx]
     e1d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e20:	02 18                	add    bl,BYTE PTR [eax]
     e22:	00 00                	add    BYTE PTR [eax],al
     e24:	0a 2e                	or     ch,BYTE PTR [esi]
     e26:	01 3f                	add    DWORD PTR [edi],edi
     e28:	19 03                	sbb    DWORD PTR [ebx],eax
     e2a:	0e                   	push   cs
     e2b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e2d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e2f:	39 0b                	cmp    DWORD PTR [ebx],ecx
     e31:	27                   	daa    
     e32:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e35:	11 01                	adc    DWORD PTR [ecx],eax
     e37:	12 06                	adc    al,BYTE PTR [esi]
     e39:	40                   	inc    eax
     e3a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e40:	00 00                	add    BYTE PTR [eax],al
     e42:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     e45:	03 08                	add    ecx,DWORD PTR [eax]
     e47:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e49:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e4b:	39 0b                	cmp    DWORD PTR [ebx],ecx
     e4d:	49                   	dec    ecx
     e4e:	13 02                	adc    eax,DWORD PTR [edx]
     e50:	18 00                	sbb    BYTE PTR [eax],al
     e52:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     e55:	00 03                	add    BYTE PTR [ebx],al
     e57:	0e                   	push   cs
     e58:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e5a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e5c:	39 0b                	cmp    DWORD PTR [ebx],ecx
     e5e:	49                   	dec    ecx
     e5f:	13 02                	adc    eax,DWORD PTR [edx]
     e61:	18 00                	sbb    BYTE PTR [eax],al
     e63:	00 00                	add    BYTE PTR [eax],al
     e65:	01 11                	add    DWORD PTR [ecx],edx
     e67:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e6d:	0e                   	push   cs
     e6e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e70:	11 01                	adc    DWORD PTR [ecx],eax
     e72:	12 06                	adc    al,BYTE PTR [esi]
     e74:	10 17                	adc    BYTE PTR [edi],dl
     e76:	00 00                	add    BYTE PTR [eax],al
     e78:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e7b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e7d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e80:	0e                   	push   cs
     e81:	00 00                	add    BYTE PTR [eax],al
     e83:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     e86:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e88:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e8b:	08 00                	or     BYTE PTR [eax],al
     e8d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     e90:	00 0b                	add    BYTE PTR [ebx],cl
     e92:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e95:	00 00                	add    BYTE PTR [eax],al
     e97:	05 16 00 03 0e       	add    eax,0xe030016
     e9c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e9e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ea0:	39 0b                	cmp    DWORD PTR [ebx],ecx
     ea2:	49                   	dec    ecx
     ea3:	13 00                	adc    eax,DWORD PTR [eax]
     ea5:	00 06                	add    BYTE PTR [esi],al
     ea7:	04 01                	add    al,0x1
     ea9:	03 0e                	add    ecx,DWORD PTR [esi]
     eab:	3e 0b 0b             	or     ecx,DWORD PTR ds:[ebx]
     eae:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     eb1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eb3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eb5:	39 0b                	cmp    DWORD PTR [ebx],ecx
     eb7:	01 13                	add    DWORD PTR [ebx],edx
     eb9:	00 00                	add    BYTE PTR [eax],al
     ebb:	07                   	pop    es
     ebc:	28 00                	sub    BYTE PTR [eax],al
     ebe:	03 0e                	add    ecx,DWORD PTR [esi]
     ec0:	1c 0b                	sbb    al,0xb
     ec2:	00 00                	add    BYTE PTR [eax],al
     ec4:	08 28                	or     BYTE PTR [eax],ch
     ec6:	00 03                	add    BYTE PTR [ebx],al
     ec8:	0e                   	push   cs
     ec9:	1c 05                	sbb    al,0x5
     ecb:	00 00                	add    BYTE PTR [eax],al
     ecd:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     ed0:	03 0e                	add    ecx,DWORD PTR [esi]
     ed2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ed4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ed6:	39 0b                	cmp    DWORD PTR [ebx],ecx
     ed8:	49                   	dec    ecx
     ed9:	13 3f                	adc    edi,DWORD PTR [edi]
     edb:	19 02                	sbb    DWORD PTR [edx],eax
     edd:	18 00                	sbb    BYTE PTR [eax],al
     edf:	00 0a                	add    BYTE PTR [edx],cl
     ee1:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ee4:	19 03                	sbb    DWORD PTR [ebx],eax
     ee6:	0e                   	push   cs
     ee7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ee9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eeb:	39 0b                	cmp    DWORD PTR [ebx],ecx
     eed:	27                   	daa    
     eee:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ef1:	11 01                	adc    DWORD PTR [ecx],eax
     ef3:	12 06                	adc    al,BYTE PTR [esi]
     ef5:	40                   	inc    eax
     ef6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     efc:	00 00                	add    BYTE PTR [eax],al
     efe:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
     f04:	0b 3b                	or     edi,DWORD PTR [ebx]
     f06:	0b 39                	or     edi,DWORD PTR [ecx]
     f08:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f0b:	02 18                	add    bl,BYTE PTR [eax]
     f0d:	00 00                	add    BYTE PTR [eax],al
     f0f:	00 01                	add    BYTE PTR [ecx],al
     f11:	11 01                	adc    DWORD PTR [ecx],eax
     f13:	25 0e 13 0b 03       	and    eax,0x30b130e
     f18:	0e                   	push   cs
     f19:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f1b:	11 01                	adc    DWORD PTR [ecx],eax
     f1d:	12 06                	adc    al,BYTE PTR [esi]
     f1f:	10 17                	adc    BYTE PTR [edi],dl
     f21:	00 00                	add    BYTE PTR [eax],al
     f23:	02 16                	add    dl,BYTE PTR [esi]
     f25:	00 03                	add    BYTE PTR [ebx],al
     f27:	0e                   	push   cs
     f28:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f2a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f2c:	39 0b                	cmp    DWORD PTR [ebx],ecx
     f2e:	49                   	dec    ecx
     f2f:	13 00                	adc    eax,DWORD PTR [eax]
     f31:	00 03                	add    BYTE PTR [ebx],al
     f33:	13 01                	adc    eax,DWORD PTR [ecx]
     f35:	03 0e                	add    ecx,DWORD PTR [esi]
     f37:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f39:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f3b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f3d:	39 0b                	cmp    DWORD PTR [ebx],ecx
     f3f:	01 13                	add    DWORD PTR [ebx],edx
     f41:	00 00                	add    BYTE PTR [eax],al
     f43:	04 0d                	add    al,0xd
     f45:	00 03                	add    BYTE PTR [ebx],al
     f47:	08 3a                	or     BYTE PTR [edx],bh
     f49:	0b 3b                	or     edi,DWORD PTR [ebx]
     f4b:	0b 39                	or     edi,DWORD PTR [ecx]
     f4d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f50:	38 0b                	cmp    BYTE PTR [ebx],cl
     f52:	00 00                	add    BYTE PTR [eax],al
     f54:	05 0d 00 03 0e       	add    eax,0xe03000d
     f59:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f5b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f5d:	39 0b                	cmp    DWORD PTR [ebx],ecx
     f5f:	49                   	dec    ecx
     f60:	13 38                	adc    edi,DWORD PTR [eax]
     f62:	0b 00                	or     eax,DWORD PTR [eax]
     f64:	00 06                	add    BYTE PTR [esi],al
     f66:	24 00                	and    al,0x0
     f68:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f6a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f6d:	08 00                	or     BYTE PTR [eax],al
     f6f:	00 07                	add    BYTE PTR [edi],al
     f71:	01 01                	add    DWORD PTR [ecx],eax
     f73:	49                   	dec    ecx
     f74:	13 01                	adc    eax,DWORD PTR [ecx]
     f76:	13 00                	adc    eax,DWORD PTR [eax]
     f78:	00 08                	add    BYTE PTR [eax],cl
     f7a:	21 00                	and    DWORD PTR [eax],eax
     f7c:	49                   	dec    ecx
     f7d:	13 2f                	adc    ebp,DWORD PTR [edi]
     f7f:	0b 00                	or     eax,DWORD PTR [eax]
     f81:	00 09                	add    BYTE PTR [ecx],cl
     f83:	24 00                	and    al,0x0
     f85:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f87:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f8a:	0e                   	push   cs
     f8b:	00 00                	add    BYTE PTR [eax],al
     f8d:	0a 26                	or     ah,BYTE PTR [esi]
     f8f:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     f92:	00 00                	add    BYTE PTR [eax],al
     f94:	0b 0f                	or     ecx,DWORD PTR [edi]
     f96:	00 0b                	add    BYTE PTR [ebx],cl
     f98:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f9b:	00 00                	add    BYTE PTR [eax],al
     f9d:	0c 34                	or     al,0x34
     f9f:	00 03                	add    BYTE PTR [ebx],al
     fa1:	0e                   	push   cs
     fa2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fa4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fa6:	39 0b                	cmp    DWORD PTR [ebx],ecx
     fa8:	49                   	dec    ecx
     fa9:	13 3f                	adc    edi,DWORD PTR [edi]
     fab:	19 02                	sbb    DWORD PTR [edx],eax
     fad:	18 00                	sbb    BYTE PTR [eax],al
     faf:	00 0d 13 01 03 08    	add    BYTE PTR ds:0x8030113,cl
     fb5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fb7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fbb:	39 0b                	cmp    DWORD PTR [ebx],ecx
     fbd:	01 13                	add    DWORD PTR [ebx],edx
     fbf:	00 00                	add    BYTE PTR [eax],al
     fc1:	0e                   	push   cs
     fc2:	13 01                	adc    eax,DWORD PTR [ecx]
     fc4:	03 0e                	add    ecx,DWORD PTR [esi]
     fc6:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     fcc:	39 0b                	cmp    DWORD PTR [ebx],ecx
     fce:	01 13                	add    DWORD PTR [ebx],edx
     fd0:	00 00                	add    BYTE PTR [eax],al
     fd2:	0f 0d 00             	prefetch BYTE PTR [eax]
     fd5:	03 0e                	add    ecx,DWORD PTR [esi]
     fd7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fd9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fdb:	39 0b                	cmp    DWORD PTR [ebx],ecx
     fdd:	49                   	dec    ecx
     fde:	13 38                	adc    edi,DWORD PTR [eax]
     fe0:	05 00 00 10 21       	add    eax,0x21100000
     fe5:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     fe8:	2f                   	das    
     fe9:	05 00 00 11 2e       	add    eax,0x2e110000
     fee:	01 3f                	add    DWORD PTR [edi],edi
     ff0:	19 03                	sbb    DWORD PTR [ebx],eax
     ff2:	0e                   	push   cs
     ff3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff7:	39 0b                	cmp    DWORD PTR [ebx],ecx
     ff9:	27                   	daa    
     ffa:	19 11                	sbb    DWORD PTR [ecx],edx
     ffc:	01 12                	add    DWORD PTR [edx],edx
     ffe:	06                   	push   es
     fff:	40                   	inc    eax
    1000:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1006:	00 00                	add    BYTE PTR [eax],al
    1008:	12 05 00 03 0e 3a    	adc    al,BYTE PTR ds:0x3a0e0300
    100e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1010:	0b 39                	or     edi,DWORD PTR [ecx]
    1012:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1015:	02 18                	add    bl,BYTE PTR [eax]
    1017:	00 00                	add    BYTE PTR [eax],al
    1019:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
    101c:	03 0e                	add    ecx,DWORD PTR [esi]
    101e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1020:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1022:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1024:	49                   	dec    ecx
    1025:	13 02                	adc    eax,DWORD PTR [edx]
    1027:	18 00                	sbb    BYTE PTR [eax],al
    1029:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
    102c:	01 11                	add    DWORD PTR [ecx],edx
    102e:	01 12                	add    DWORD PTR [edx],edx
    1030:	06                   	push   es
    1031:	00 00                	add    BYTE PTR [eax],al
    1033:	15 34 00 03 08       	adc    eax,0x8030034
    1038:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    103a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    103c:	39 0b                	cmp    DWORD PTR [ebx],ecx
    103e:	49                   	dec    ecx
    103f:	13 02                	adc    eax,DWORD PTR [edx]
    1041:	18 00                	sbb    BYTE PTR [eax],al
    1043:	00 16                	add    BYTE PTR [esi],dl
    1045:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1048:	19 03                	sbb    DWORD PTR [ebx],eax
    104a:	0e                   	push   cs
    104b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    104d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    104f:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1051:	27                   	daa    
    1052:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1055:	11 01                	adc    DWORD PTR [ecx],eax
    1057:	12 06                	adc    al,BYTE PTR [esi]
    1059:	40                   	inc    eax
    105a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1060:	00 00                	add    BYTE PTR [eax],al
    1062:	17                   	pop    ss
    1063:	01 01                	add    DWORD PTR [ecx],eax
    1065:	49                   	dec    ecx
    1066:	13 00                	adc    eax,DWORD PTR [eax]
    1068:	00 00                	add    BYTE PTR [eax],al
    106a:	01 11                	add    DWORD PTR [ecx],edx
    106c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1072:	0e                   	push   cs
    1073:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1075:	11 01                	adc    DWORD PTR [ecx],eax
    1077:	12 06                	adc    al,BYTE PTR [esi]
    1079:	10 17                	adc    BYTE PTR [edi],dl
    107b:	00 00                	add    BYTE PTR [eax],al
    107d:	02 16                	add    dl,BYTE PTR [esi]
    107f:	00 03                	add    BYTE PTR [ebx],al
    1081:	0e                   	push   cs
    1082:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1084:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1086:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1088:	49                   	dec    ecx
    1089:	13 00                	adc    eax,DWORD PTR [eax]
    108b:	00 03                	add    BYTE PTR [ebx],al
    108d:	0f 00 0b             	str    WORD PTR [ebx]
    1090:	0b 03                	or     eax,DWORD PTR [ebx]
    1092:	0e                   	push   cs
    1093:	49                   	dec    ecx
    1094:	13 00                	adc    eax,DWORD PTR [eax]
    1096:	00 04 24             	add    BYTE PTR [esp],al
    1099:	00 0b                	add    BYTE PTR [ebx],cl
    109b:	0b 3e                	or     edi,DWORD PTR [esi]
    109d:	0b 03                	or     eax,DWORD PTR [ebx]
    109f:	0e                   	push   cs
    10a0:	00 00                	add    BYTE PTR [eax],al
    10a2:	05 26 00 49 13       	add    eax,0x13490026
    10a7:	00 00                	add    BYTE PTR [eax],al
    10a9:	06                   	push   es
    10aa:	24 00                	and    al,0x0
    10ac:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10ae:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10b1:	08 00                	or     BYTE PTR [eax],al
    10b3:	00 07                	add    BYTE PTR [edi],al
    10b5:	0f 00 0b             	str    WORD PTR [ebx]
    10b8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10bb:	00 00                	add    BYTE PTR [eax],al
    10bd:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    10c0:	03 0e                	add    ecx,DWORD PTR [esi]
    10c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10c6:	39 0b                	cmp    DWORD PTR [ebx],ecx
    10c8:	49                   	dec    ecx
    10c9:	13 3f                	adc    edi,DWORD PTR [edi]
    10cb:	19 02                	sbb    DWORD PTR [edx],eax
    10cd:	18 00                	sbb    BYTE PTR [eax],al
    10cf:	00 09                	add    BYTE PTR [ecx],cl
    10d1:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    10d4:	19 03                	sbb    DWORD PTR [ebx],eax
    10d6:	0e                   	push   cs
    10d7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10d9:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR ds:0x19270b39
    10df:	49                   	dec    ecx
    10e0:	13 11                	adc    edx,DWORD PTR [ecx]
    10e2:	01 12                	add    DWORD PTR [edx],edx
    10e4:	06                   	push   es
    10e5:	40                   	inc    eax
    10e6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    10ec:	00 00                	add    BYTE PTR [eax],al
    10ee:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
    10f4:	0b 3b                	or     edi,DWORD PTR [ebx]
    10f6:	05 39 0b 49 13       	add    eax,0x13490b39
    10fb:	02 18                	add    bl,BYTE PTR [eax]
    10fd:	00 00                	add    BYTE PTR [eax],al
    10ff:	0b 18                	or     ebx,DWORD PTR [eax]
    1101:	00 00                	add    BYTE PTR [eax],al
    1103:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1106:	00 03                	add    BYTE PTR [ebx],al
    1108:	0e                   	push   cs
    1109:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    110b:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR ds:0x13490b39
    1111:	02 18                	add    bl,BYTE PTR [eax]
    1113:	00 00                	add    BYTE PTR [eax],al
    1115:	0d 34 00 03 08       	or     eax,0x8030034
    111a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    111c:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR ds:0x13490b39
    1122:	02 18                	add    bl,BYTE PTR [eax]
    1124:	00 00                	add    BYTE PTR [eax],al
    1126:	0e                   	push   cs
    1127:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    112a:	19 03                	sbb    DWORD PTR [ebx],eax
    112c:	0e                   	push   cs
    112d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    112f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1131:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1133:	27                   	daa    
    1134:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1137:	11 01                	adc    DWORD PTR [ecx],eax
    1139:	12 06                	adc    al,BYTE PTR [esi]
    113b:	40                   	inc    eax
    113c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1142:	00 00                	add    BYTE PTR [eax],al
    1144:	0f 05                	syscall 
    1146:	00 03                	add    BYTE PTR [ebx],al
    1148:	08 3a                	or     BYTE PTR [edx],bh
    114a:	0b 3b                	or     edi,DWORD PTR [ebx]
    114c:	0b 39                	or     edi,DWORD PTR [ecx]
    114e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1151:	02 18                	add    bl,BYTE PTR [eax]
    1153:	00 00                	add    BYTE PTR [eax],al
    1155:	10 05 00 03 0e 3a    	adc    BYTE PTR ds:0x3a0e0300,al
    115b:	0b 3b                	or     edi,DWORD PTR [ebx]
    115d:	0b 39                	or     edi,DWORD PTR [ecx]
    115f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1162:	02 18                	add    bl,BYTE PTR [eax]
    1164:	00 00                	add    BYTE PTR [eax],al
    1166:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1169:	03 08                	add    ecx,DWORD PTR [eax]
    116b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    116d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    116f:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1171:	49                   	dec    ecx
    1172:	13 02                	adc    eax,DWORD PTR [edx]
    1174:	18 00                	sbb    BYTE PTR [eax],al
    1176:	00 12                	add    BYTE PTR [edx],dl
    1178:	34 00                	xor    al,0x0
    117a:	03 0e                	add    ecx,DWORD PTR [esi]
    117c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    117e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1180:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1182:	49                   	dec    ecx
    1183:	13 02                	adc    eax,DWORD PTR [edx]
    1185:	18 00                	sbb    BYTE PTR [eax],al
    1187:	00 13                	add    BYTE PTR [ebx],dl
    1189:	0a 00                	or     al,BYTE PTR [eax]
    118b:	03 0e                	add    ecx,DWORD PTR [esi]
    118d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    118f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1191:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1193:	11 01                	adc    DWORD PTR [ecx],eax
    1195:	00 00                	add    BYTE PTR [eax],al
    1197:	14 0b                	adc    al,0xb
    1199:	01 11                	add    DWORD PTR [ecx],edx
    119b:	01 12                	add    DWORD PTR [edx],edx
    119d:	06                   	push   es
    119e:	01 13                	add    DWORD PTR [ebx],edx
    11a0:	00 00                	add    BYTE PTR [eax],al
    11a2:	15 0b 01 11 01       	adc    eax,0x111010b
    11a7:	12 06                	adc    al,BYTE PTR [esi]
    11a9:	00 00                	add    BYTE PTR [eax],al
    11ab:	16                   	push   ss
    11ac:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
    11af:	0e                   	push   cs
    11b0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11b2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11b4:	39 0b                	cmp    DWORD PTR [ebx],ecx
    11b6:	27                   	daa    
    11b7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11ba:	11 01                	adc    DWORD PTR [ecx],eax
    11bc:	12 06                	adc    al,BYTE PTR [esi]
    11be:	40                   	inc    eax
    11bf:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    11c5:	00 00                	add    BYTE PTR [eax],al
    11c7:	17                   	pop    ss
    11c8:	01 01                	add    DWORD PTR [ecx],eax
    11ca:	49                   	dec    ecx
    11cb:	13 01                	adc    eax,DWORD PTR [ecx]
    11cd:	13 00                	adc    eax,DWORD PTR [eax]
    11cf:	00 18                	add    BYTE PTR [eax],bl
    11d1:	21 00                	and    DWORD PTR [eax],eax
    11d3:	49                   	dec    ecx
    11d4:	13 2f                	adc    ebp,DWORD PTR [edi]
    11d6:	0b 00                	or     eax,DWORD PTR [eax]
    11d8:	00 00                	add    BYTE PTR [eax],al
    11da:	01 11                	add    DWORD PTR [ecx],edx
    11dc:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    11e2:	0e                   	push   cs
    11e3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    11e5:	11 01                	adc    DWORD PTR [ecx],eax
    11e7:	12 06                	adc    al,BYTE PTR [esi]
    11e9:	10 17                	adc    BYTE PTR [edi],dl
    11eb:	00 00                	add    BYTE PTR [eax],al
    11ed:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    11f0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11f2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11f5:	0e                   	push   cs
    11f6:	00 00                	add    BYTE PTR [eax],al
    11f8:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    11fb:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11fd:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1200:	08 00                	or     BYTE PTR [eax],al
    1202:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1205:	00 0b                	add    BYTE PTR [ebx],cl
    1207:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    120a:	00 00                	add    BYTE PTR [eax],al
    120c:	05 34 00 03 0e       	add    eax,0xe030034
    1211:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1213:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1215:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1217:	49                   	dec    ecx
    1218:	13 3f                	adc    edi,DWORD PTR [edi]
    121a:	19 02                	sbb    DWORD PTR [edx],eax
    121c:	18 00                	sbb    BYTE PTR [eax],al
    121e:	00 06                	add    BYTE PTR [esi],al
    1220:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1223:	19 03                	sbb    DWORD PTR [ebx],eax
    1225:	0e                   	push   cs
    1226:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1228:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    122a:	39 0b                	cmp    DWORD PTR [ebx],ecx
    122c:	11 01                	adc    DWORD PTR [ecx],eax
    122e:	12 06                	adc    al,BYTE PTR [esi]
    1230:	40                   	inc    eax
    1231:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1237:	00 00                	add    BYTE PTR [eax],al
    1239:	07                   	pop    es
    123a:	34 00                	xor    al,0x0
    123c:	03 0e                	add    ecx,DWORD PTR [esi]
    123e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1240:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1242:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1244:	49                   	dec    ecx
    1245:	13 02                	adc    eax,DWORD PTR [edx]
    1247:	18 00                	sbb    BYTE PTR [eax],al
    1249:	00 08                	add    BYTE PTR [eax],cl
    124b:	01 01                	add    DWORD PTR [ecx],eax
    124d:	49                   	dec    ecx
    124e:	13 00                	adc    eax,DWORD PTR [eax]
    1250:	00 09                	add    BYTE PTR [ecx],cl
    1252:	21 00                	and    DWORD PTR [eax],eax
    1254:	49                   	dec    ecx
    1255:	13 2f                	adc    ebp,DWORD PTR [edi]
    1257:	0b 00                	or     eax,DWORD PTR [eax]
    1259:	00 00                	add    BYTE PTR [eax],al
    125b:	01 11                	add    DWORD PTR [ecx],edx
    125d:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1263:	0e                   	push   cs
    1264:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1266:	11 01                	adc    DWORD PTR [ecx],eax
    1268:	12 06                	adc    al,BYTE PTR [esi]
    126a:	10 17                	adc    BYTE PTR [edi],dl
    126c:	00 00                	add    BYTE PTR [eax],al
    126e:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1271:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1273:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1276:	08 00                	or     BYTE PTR [eax],al
    1278:	00 03                	add    BYTE PTR [ebx],al
    127a:	16                   	push   ss
    127b:	00 03                	add    BYTE PTR [ebx],al
    127d:	0e                   	push   cs
    127e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1280:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1282:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1284:	49                   	dec    ecx
    1285:	13 00                	adc    eax,DWORD PTR [eax]
    1287:	00 04 24             	add    BYTE PTR [esp],al
    128a:	00 0b                	add    BYTE PTR [ebx],cl
    128c:	0b 3e                	or     edi,DWORD PTR [esi]
    128e:	0b 03                	or     eax,DWORD PTR [ebx]
    1290:	0e                   	push   cs
    1291:	00 00                	add    BYTE PTR [eax],al
    1293:	05 26 00 49 13       	add    eax,0x13490026
    1298:	00 00                	add    BYTE PTR [eax],al
    129a:	06                   	push   es
    129b:	0f 00 0b             	str    WORD PTR [ebx]
    129e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12a1:	00 00                	add    BYTE PTR [eax],al
    12a3:	07                   	pop    es
    12a4:	34 00                	xor    al,0x0
    12a6:	03 0e                	add    ecx,DWORD PTR [esi]
    12a8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12aa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12ac:	39 0b                	cmp    DWORD PTR [ebx],ecx
    12ae:	49                   	dec    ecx
    12af:	13 3f                	adc    edi,DWORD PTR [edi]
    12b1:	19 02                	sbb    DWORD PTR [edx],eax
    12b3:	18 00                	sbb    BYTE PTR [eax],al
    12b5:	00 08                	add    BYTE PTR [eax],cl
    12b7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    12ba:	19 03                	sbb    DWORD PTR [ebx],eax
    12bc:	0e                   	push   cs
    12bd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12bf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12c1:	39 0b                	cmp    DWORD PTR [ebx],ecx
    12c3:	27                   	daa    
    12c4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12c7:	11 01                	adc    DWORD PTR [ecx],eax
    12c9:	12 06                	adc    al,BYTE PTR [esi]
    12cb:	40                   	inc    eax
    12cc:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12d2:	00 00                	add    BYTE PTR [eax],al
    12d4:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    12da:	0b 3b                	or     edi,DWORD PTR [ebx]
    12dc:	0b 39                	or     edi,DWORD PTR [ecx]
    12de:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12e1:	02 18                	add    bl,BYTE PTR [eax]
    12e3:	00 00                	add    BYTE PTR [eax],al
    12e5:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
    12eb:	0b 3b                	or     edi,DWORD PTR [ebx]
    12ed:	0b 39                	or     edi,DWORD PTR [ecx]
    12ef:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12f2:	02 18                	add    bl,BYTE PTR [eax]
    12f4:	00 00                	add    BYTE PTR [eax],al
    12f6:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    12f9:	03 0e                	add    ecx,DWORD PTR [esi]
    12fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12ff:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1301:	49                   	dec    ecx
    1302:	13 02                	adc    eax,DWORD PTR [edx]
    1304:	18 00                	sbb    BYTE PTR [eax],al
    1306:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
    1309:	01 3f                	add    DWORD PTR [edi],edi
    130b:	19 03                	sbb    DWORD PTR [ebx],eax
    130d:	0e                   	push   cs
    130e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1310:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1312:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1314:	27                   	daa    
    1315:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1318:	11 01                	adc    DWORD PTR [ecx],eax
    131a:	12 06                	adc    al,BYTE PTR [esi]
    131c:	40                   	inc    eax
    131d:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    1323:	00 01                	add    BYTE PTR [ecx],al
    1325:	11 01                	adc    DWORD PTR [ecx],eax
    1327:	25 0e 13 0b 03       	and    eax,0x30b130e
    132c:	0e                   	push   cs
    132d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    132f:	11 01                	adc    DWORD PTR [ecx],eax
    1331:	12 06                	adc    al,BYTE PTR [esi]
    1333:	10 17                	adc    BYTE PTR [edi],dl
    1335:	00 00                	add    BYTE PTR [eax],al
    1337:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    133a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    133c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    133f:	0e                   	push   cs
    1340:	00 00                	add    BYTE PTR [eax],al
    1342:	03 26                	add    esp,DWORD PTR [esi]
    1344:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1347:	00 00                	add    BYTE PTR [eax],al
    1349:	04 24                	add    al,0x24
    134b:	00 0b                	add    BYTE PTR [ebx],cl
    134d:	0b 3e                	or     edi,DWORD PTR [esi]
    134f:	0b 03                	or     eax,DWORD PTR [ebx]
    1351:	08 00                	or     BYTE PTR [eax],al
    1353:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1359:	49                   	dec    ecx
    135a:	13 00                	adc    eax,DWORD PTR [eax]
    135c:	00 06                	add    BYTE PTR [esi],al
    135e:	16                   	push   ss
    135f:	00 03                	add    BYTE PTR [ebx],al
    1361:	0e                   	push   cs
    1362:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1364:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1366:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1368:	49                   	dec    ecx
    1369:	13 00                	adc    eax,DWORD PTR [eax]
    136b:	00 07                	add    BYTE PTR [edi],al
    136d:	34 00                	xor    al,0x0
    136f:	03 0e                	add    ecx,DWORD PTR [esi]
    1371:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1373:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1375:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1377:	49                   	dec    ecx
    1378:	13 3f                	adc    edi,DWORD PTR [edi]
    137a:	19 02                	sbb    DWORD PTR [edx],eax
    137c:	18 00                	sbb    BYTE PTR [eax],al
    137e:	00 08                	add    BYTE PTR [eax],cl
    1380:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1383:	19 03                	sbb    DWORD PTR [ebx],eax
    1385:	0e                   	push   cs
    1386:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1388:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    138a:	39 0b                	cmp    DWORD PTR [ebx],ecx
    138c:	27                   	daa    
    138d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1390:	11 01                	adc    DWORD PTR [ecx],eax
    1392:	12 06                	adc    al,BYTE PTR [esi]
    1394:	40                   	inc    eax
    1395:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    139b:	00 00                	add    BYTE PTR [eax],al
    139d:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
    13a3:	0b 3b                	or     edi,DWORD PTR [ebx]
    13a5:	0b 39                	or     edi,DWORD PTR [ecx]
    13a7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13aa:	02 18                	add    bl,BYTE PTR [eax]
    13ac:	00 00                	add    BYTE PTR [eax],al
    13ae:	0a 2e                	or     ch,BYTE PTR [esi]
    13b0:	01 3f                	add    DWORD PTR [edi],edi
    13b2:	19 03                	sbb    DWORD PTR [ebx],eax
    13b4:	0e                   	push   cs
    13b5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13b7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13b9:	39 0b                	cmp    DWORD PTR [ebx],ecx
    13bb:	27                   	daa    
    13bc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13bf:	11 01                	adc    DWORD PTR [ecx],eax
    13c1:	12 06                	adc    al,BYTE PTR [esi]
    13c3:	40                   	inc    eax
    13c4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13ca:	00 00                	add    BYTE PTR [eax],al
    13cc:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    13cf:	03 08                	add    ecx,DWORD PTR [eax]
    13d1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13d3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13d5:	39 0b                	cmp    DWORD PTR [ebx],ecx
    13d7:	49                   	dec    ecx
    13d8:	13 02                	adc    eax,DWORD PTR [edx]
    13da:	18 00                	sbb    BYTE PTR [eax],al
    13dc:	00 00                	add    BYTE PTR [eax],al
    13de:	01 11                	add    DWORD PTR [ecx],edx
    13e0:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    13e6:	0e                   	push   cs
    13e7:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    13e9:	11 01                	adc    DWORD PTR [ecx],eax
    13eb:	12 06                	adc    al,BYTE PTR [esi]
    13ed:	10 17                	adc    BYTE PTR [edi],dl
    13ef:	00 00                	add    BYTE PTR [eax],al
    13f1:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    13f4:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13f6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13f9:	08 00                	or     BYTE PTR [eax],al
    13fb:	00 03                	add    BYTE PTR [ebx],al
    13fd:	24 00                	and    al,0x0
    13ff:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1401:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1404:	0e                   	push   cs
    1405:	00 00                	add    BYTE PTR [eax],al
    1407:	04 26                	add    al,0x26
    1409:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    140c:	00 00                	add    BYTE PTR [eax],al
    140e:	05 2e 01 3f 19       	add    eax,0x193f012e
    1413:	03 0e                	add    ecx,DWORD PTR [esi]
    1415:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1417:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1419:	39 0b                	cmp    DWORD PTR [ebx],ecx
    141b:	27                   	daa    
    141c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    141f:	11 01                	adc    DWORD PTR [ecx],eax
    1421:	12 06                	adc    al,BYTE PTR [esi]
    1423:	40                   	inc    eax
    1424:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    142a:	00 00                	add    BYTE PTR [eax],al
    142c:	06                   	push   es
    142d:	05 00 03 08 3a       	add    eax,0x3a080300
    1432:	0b 3b                	or     edi,DWORD PTR [ebx]
    1434:	0b 39                	or     edi,DWORD PTR [ecx]
    1436:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1439:	02 18                	add    bl,BYTE PTR [eax]
    143b:	00 00                	add    BYTE PTR [eax],al
    143d:	07                   	pop    es
    143e:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1443:	0b 3b                	or     edi,DWORD PTR [ebx]
    1445:	0b 39                	or     edi,DWORD PTR [ecx]
    1447:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    144a:	02 18                	add    bl,BYTE PTR [eax]
    144c:	00 00                	add    BYTE PTR [eax],al
    144e:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    1451:	03 08                	add    ecx,DWORD PTR [eax]
    1453:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1455:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1457:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1459:	49                   	dec    ecx
    145a:	13 02                	adc    eax,DWORD PTR [edx]
    145c:	18 00                	sbb    BYTE PTR [eax],al
    145e:	00 09                	add    BYTE PTR [ecx],cl
    1460:	0f 00 0b             	str    WORD PTR [ebx]
    1463:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1466:	00 00                	add    BYTE PTR [eax],al
    1468:	0a 2e                	or     ch,BYTE PTR [esi]
    146a:	01 3f                	add    DWORD PTR [edi],edi
    146c:	19 03                	sbb    DWORD PTR [ebx],eax
    146e:	0e                   	push   cs
    146f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1471:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1473:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1475:	27                   	daa    
    1476:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1479:	11 01                	adc    DWORD PTR [ecx],eax
    147b:	12 06                	adc    al,BYTE PTR [esi]
    147d:	40                   	inc    eax
    147e:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1484:	00 01                	add    BYTE PTR [ecx],al
    1486:	11 01                	adc    DWORD PTR [ecx],eax
    1488:	25 0e 13 0b 03       	and    eax,0x30b130e
    148d:	0e                   	push   cs
    148e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1490:	11 01                	adc    DWORD PTR [ecx],eax
    1492:	12 06                	adc    al,BYTE PTR [esi]
    1494:	10 17                	adc    BYTE PTR [edi],dl
    1496:	00 00                	add    BYTE PTR [eax],al
    1498:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    149b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    149d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14a0:	0e                   	push   cs
    14a1:	00 00                	add    BYTE PTR [eax],al
    14a3:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    14a6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14a8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14ab:	08 00                	or     BYTE PTR [eax],al
    14ad:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    14b0:	00 0b                	add    BYTE PTR [ebx],cl
    14b2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14b5:	00 00                	add    BYTE PTR [eax],al
    14b7:	05 16 00 03 0e       	add    eax,0xe030016
    14bc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14be:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14c0:	39 0b                	cmp    DWORD PTR [ebx],ecx
    14c2:	49                   	dec    ecx
    14c3:	13 00                	adc    eax,DWORD PTR [eax]
    14c5:	00 06                	add    BYTE PTR [esi],al
    14c7:	34 00                	xor    al,0x0
    14c9:	03 0e                	add    ecx,DWORD PTR [esi]
    14cb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14cd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14cf:	39 0b                	cmp    DWORD PTR [ebx],ecx
    14d1:	49                   	dec    ecx
    14d2:	13 3f                	adc    edi,DWORD PTR [edi]
    14d4:	19 02                	sbb    DWORD PTR [edx],eax
    14d6:	18 00                	sbb    BYTE PTR [eax],al
    14d8:	00 07                	add    BYTE PTR [edi],al
    14da:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    14dd:	19 03                	sbb    DWORD PTR [ebx],eax
    14df:	0e                   	push   cs
    14e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14e4:	39 0b                	cmp    DWORD PTR [ebx],ecx
    14e6:	27                   	daa    
    14e7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    14ea:	11 01                	adc    DWORD PTR [ecx],eax
    14ec:	12 06                	adc    al,BYTE PTR [esi]
    14ee:	40                   	inc    eax
    14ef:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    14f5:	00 00                	add    BYTE PTR [eax],al
    14f7:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    14fd:	0b 3b                	or     edi,DWORD PTR [ebx]
    14ff:	0b 39                	or     edi,DWORD PTR [ecx]
    1501:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1504:	02 18                	add    bl,BYTE PTR [eax]
    1506:	00 00                	add    BYTE PTR [eax],al
    1508:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    150b:	03 08                	add    ecx,DWORD PTR [eax]
    150d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    150f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1511:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1513:	49                   	dec    ecx
    1514:	13 02                	adc    eax,DWORD PTR [edx]
    1516:	18 00                	sbb    BYTE PTR [eax],al
    1518:	00 0a                	add    BYTE PTR [edx],cl
    151a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    151d:	19 03                	sbb    DWORD PTR [ebx],eax
    151f:	0e                   	push   cs
    1520:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1522:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1524:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1526:	27                   	daa    
    1527:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    152a:	11 01                	adc    DWORD PTR [ecx],eax
    152c:	12 06                	adc    al,BYTE PTR [esi]
    152e:	40                   	inc    eax
    152f:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1535:	00 01                	add    BYTE PTR [ecx],al
    1537:	11 01                	adc    DWORD PTR [ecx],eax
    1539:	25 0e 13 0b 03       	and    eax,0x30b130e
    153e:	0e                   	push   cs
    153f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1541:	11 01                	adc    DWORD PTR [ecx],eax
    1543:	12 06                	adc    al,BYTE PTR [esi]
    1545:	10 17                	adc    BYTE PTR [edi],dl
    1547:	00 00                	add    BYTE PTR [eax],al
    1549:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    154c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    154e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1551:	0e                   	push   cs
    1552:	00 00                	add    BYTE PTR [eax],al
    1554:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1557:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1559:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    155c:	08 00                	or     BYTE PTR [eax],al
    155e:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1561:	00 0b                	add    BYTE PTR [ebx],cl
    1563:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1566:	00 00                	add    BYTE PTR [eax],al
    1568:	05 26 00 49 13       	add    eax,0x13490026
    156d:	00 00                	add    BYTE PTR [eax],al
    156f:	06                   	push   es
    1570:	16                   	push   ss
    1571:	00 03                	add    BYTE PTR [ebx],al
    1573:	0e                   	push   cs
    1574:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1576:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1578:	39 0b                	cmp    DWORD PTR [ebx],ecx
    157a:	49                   	dec    ecx
    157b:	13 00                	adc    eax,DWORD PTR [eax]
    157d:	00 07                	add    BYTE PTR [edi],al
    157f:	34 00                	xor    al,0x0
    1581:	03 0e                	add    ecx,DWORD PTR [esi]
    1583:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1585:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1587:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1589:	49                   	dec    ecx
    158a:	13 3f                	adc    edi,DWORD PTR [edi]
    158c:	19 02                	sbb    DWORD PTR [edx],eax
    158e:	18 00                	sbb    BYTE PTR [eax],al
    1590:	00 08                	add    BYTE PTR [eax],cl
    1592:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1595:	19 03                	sbb    DWORD PTR [ebx],eax
    1597:	0e                   	push   cs
    1598:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    159a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    159c:	39 0b                	cmp    DWORD PTR [ebx],ecx
    159e:	27                   	daa    
    159f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    15a2:	11 01                	adc    DWORD PTR [ecx],eax
    15a4:	12 06                	adc    al,BYTE PTR [esi]
    15a6:	40                   	inc    eax
    15a7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    15ad:	00 00                	add    BYTE PTR [eax],al
    15af:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
    15b5:	0b 3b                	or     edi,DWORD PTR [ebx]
    15b7:	0b 39                	or     edi,DWORD PTR [ecx]
    15b9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15bc:	02 18                	add    bl,BYTE PTR [eax]
    15be:	00 00                	add    BYTE PTR [eax],al
    15c0:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
    15c6:	0b 3b                	or     edi,DWORD PTR [ebx]
    15c8:	0b 39                	or     edi,DWORD PTR [ecx]
    15ca:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15cd:	02 18                	add    bl,BYTE PTR [eax]
    15cf:	00 00                	add    BYTE PTR [eax],al
    15d1:	0b 2e                	or     ebp,DWORD PTR [esi]
    15d3:	01 3f                	add    DWORD PTR [edi],edi
    15d5:	19 03                	sbb    DWORD PTR [ebx],eax
    15d7:	0e                   	push   cs
    15d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15dc:	39 0b                	cmp    DWORD PTR [ebx],ecx
    15de:	27                   	daa    
    15df:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    15e2:	11 01                	adc    DWORD PTR [ecx],eax
    15e4:	12 06                	adc    al,BYTE PTR [esi]
    15e6:	40                   	inc    eax
    15e7:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    15ed:	00 00                	add    BYTE PTR [eax],al
    15ef:	0c 34                	or     al,0x34
    15f1:	00 03                	add    BYTE PTR [ebx],al
    15f3:	08 3a                	or     BYTE PTR [edx],bh
    15f5:	0b 3b                	or     edi,DWORD PTR [ebx]
    15f7:	0b 39                	or     edi,DWORD PTR [ecx]
    15f9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15fc:	02 18                	add    bl,BYTE PTR [eax]
    15fe:	00 00                	add    BYTE PTR [eax],al
    1600:	0d 2e 01 3f 19       	or     eax,0x193f012e
    1605:	03 0e                	add    ecx,DWORD PTR [esi]
    1607:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1609:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    160b:	39 0b                	cmp    DWORD PTR [ebx],ecx
    160d:	27                   	daa    
    160e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1611:	11 01                	adc    DWORD PTR [ecx],eax
    1613:	12 06                	adc    al,BYTE PTR [esi]
    1615:	40                   	inc    eax
    1616:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    161c:	00 01                	add    BYTE PTR [ecx],al
    161e:	11 01                	adc    DWORD PTR [ecx],eax
    1620:	25 0e 13 0b 03       	and    eax,0x30b130e
    1625:	0e                   	push   cs
    1626:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1628:	11 01                	adc    DWORD PTR [ecx],eax
    162a:	12 06                	adc    al,BYTE PTR [esi]
    162c:	10 17                	adc    BYTE PTR [edi],dl
    162e:	00 00                	add    BYTE PTR [eax],al
    1630:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1633:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1635:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1638:	08 00                	or     BYTE PTR [eax],al
    163a:	00 03                	add    BYTE PTR [ebx],al
    163c:	16                   	push   ss
    163d:	00 03                	add    BYTE PTR [ebx],al
    163f:	0e                   	push   cs
    1640:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1642:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1644:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1646:	49                   	dec    ecx
    1647:	13 00                	adc    eax,DWORD PTR [eax]
    1649:	00 04 24             	add    BYTE PTR [esp],al
    164c:	00 0b                	add    BYTE PTR [ebx],cl
    164e:	0b 3e                	or     edi,DWORD PTR [esi]
    1650:	0b 03                	or     eax,DWORD PTR [ebx]
    1652:	0e                   	push   cs
    1653:	00 00                	add    BYTE PTR [eax],al
    1655:	05 2e 01 3f 19       	add    eax,0x193f012e
    165a:	03 0e                	add    ecx,DWORD PTR [esi]
    165c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    165e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1660:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1662:	27                   	daa    
    1663:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1666:	11 01                	adc    DWORD PTR [ecx],eax
    1668:	12 06                	adc    al,BYTE PTR [esi]
    166a:	40                   	inc    eax
    166b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1671:	00 00                	add    BYTE PTR [eax],al
    1673:	06                   	push   es
    1674:	05 00 03 08 3a       	add    eax,0x3a080300
    1679:	0b 3b                	or     edi,DWORD PTR [ebx]
    167b:	0b 39                	or     edi,DWORD PTR [ecx]
    167d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1680:	02 18                	add    bl,BYTE PTR [eax]
    1682:	00 00                	add    BYTE PTR [eax],al
    1684:	07                   	pop    es
    1685:	0f 00 0b             	str    WORD PTR [ebx]
    1688:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    168b:	00 00                	add    BYTE PTR [eax],al
    168d:	08 26                	or     BYTE PTR [esi],ah
    168f:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1692:	00 00                	add    BYTE PTR [eax],al
    1694:	09 2e                	or     DWORD PTR [esi],ebp
    1696:	01 3f                	add    DWORD PTR [edi],edi
    1698:	19 03                	sbb    DWORD PTR [ebx],eax
    169a:	0e                   	push   cs
    169b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    169d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    169f:	39 0b                	cmp    DWORD PTR [ebx],ecx
    16a1:	27                   	daa    
    16a2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    16a5:	11 01                	adc    DWORD PTR [ecx],eax
    16a7:	12 06                	adc    al,BYTE PTR [esi]
    16a9:	40                   	inc    eax
    16aa:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    16b0:	00 01                	add    BYTE PTR [ecx],al
    16b2:	11 01                	adc    DWORD PTR [ecx],eax
    16b4:	25 0e 13 0b 03       	and    eax,0x30b130e
    16b9:	0e                   	push   cs
    16ba:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    16bc:	11 01                	adc    DWORD PTR [ecx],eax
    16be:	12 06                	adc    al,BYTE PTR [esi]
    16c0:	10 17                	adc    BYTE PTR [edi],dl
    16c2:	00 00                	add    BYTE PTR [eax],al
    16c4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    16c7:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16c9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16cc:	08 00                	or     BYTE PTR [eax],al
    16ce:	00 03                	add    BYTE PTR [ebx],al
    16d0:	16                   	push   ss
    16d1:	00 03                	add    BYTE PTR [ebx],al
    16d3:	0e                   	push   cs
    16d4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16d6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16d8:	39 0b                	cmp    DWORD PTR [ebx],ecx
    16da:	49                   	dec    ecx
    16db:	13 00                	adc    eax,DWORD PTR [eax]
    16dd:	00 04 24             	add    BYTE PTR [esp],al
    16e0:	00 0b                	add    BYTE PTR [ebx],cl
    16e2:	0b 3e                	or     edi,DWORD PTR [esi]
    16e4:	0b 03                	or     eax,DWORD PTR [ebx]
    16e6:	0e                   	push   cs
    16e7:	00 00                	add    BYTE PTR [eax],al
    16e9:	05 2e 01 3f 19       	add    eax,0x193f012e
    16ee:	03 0e                	add    ecx,DWORD PTR [esi]
    16f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16f4:	39 0b                	cmp    DWORD PTR [ebx],ecx
    16f6:	27                   	daa    
    16f7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    16fa:	11 01                	adc    DWORD PTR [ecx],eax
    16fc:	12 06                	adc    al,BYTE PTR [esi]
    16fe:	40                   	inc    eax
    16ff:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1705:	00 00                	add    BYTE PTR [eax],al
    1707:	06                   	push   es
    1708:	05 00 03 08 3a       	add    eax,0x3a080300
    170d:	0b 3b                	or     edi,DWORD PTR [ebx]
    170f:	0b 39                	or     edi,DWORD PTR [ecx]
    1711:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1714:	02 18                	add    bl,BYTE PTR [eax]
    1716:	00 00                	add    BYTE PTR [eax],al
    1718:	07                   	pop    es
    1719:	0f 00 0b             	str    WORD PTR [ebx]
    171c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    171f:	00 00                	add    BYTE PTR [eax],al
    1721:	08 26                	or     BYTE PTR [esi],ah
    1723:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1726:	00 00                	add    BYTE PTR [eax],al
    1728:	09 2e                	or     DWORD PTR [esi],ebp
    172a:	01 3f                	add    DWORD PTR [edi],edi
    172c:	19 03                	sbb    DWORD PTR [ebx],eax
    172e:	0e                   	push   cs
    172f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1731:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1733:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1735:	27                   	daa    
    1736:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1739:	11 01                	adc    DWORD PTR [ecx],eax
    173b:	12 06                	adc    al,BYTE PTR [esi]
    173d:	40                   	inc    eax
    173e:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1744:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    1747:	03 08                	add    ecx,DWORD PTR [eax]
    1749:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    174b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    174d:	39 0b                	cmp    DWORD PTR [ebx],ecx
    174f:	49                   	dec    ecx
    1750:	13 02                	adc    eax,DWORD PTR [edx]
    1752:	18 00                	sbb    BYTE PTR [eax],al
    1754:	00 00                	add    BYTE PTR [eax],al
    1756:	01 11                	add    DWORD PTR [ecx],edx
    1758:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    175e:	0e                   	push   cs
    175f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1761:	11 01                	adc    DWORD PTR [ecx],eax
    1763:	12 06                	adc    al,BYTE PTR [esi]
    1765:	10 17                	adc    BYTE PTR [edi],dl
    1767:	00 00                	add    BYTE PTR [eax],al
    1769:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    176c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    176e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1771:	08 00                	or     BYTE PTR [eax],al
    1773:	00 03                	add    BYTE PTR [ebx],al
    1775:	24 00                	and    al,0x0
    1777:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1779:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    177c:	0e                   	push   cs
    177d:	00 00                	add    BYTE PTR [eax],al
    177f:	04 26                	add    al,0x26
    1781:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1784:	00 00                	add    BYTE PTR [eax],al
    1786:	05 2e 01 3f 19       	add    eax,0x193f012e
    178b:	03 0e                	add    ecx,DWORD PTR [esi]
    178d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    178f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1791:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1793:	27                   	daa    
    1794:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1797:	11 01                	adc    DWORD PTR [ecx],eax
    1799:	12 06                	adc    al,BYTE PTR [esi]
    179b:	40                   	inc    eax
    179c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    17a2:	00 00                	add    BYTE PTR [eax],al
    17a4:	06                   	push   es
    17a5:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    17aa:	0b 3b                	or     edi,DWORD PTR [ebx]
    17ac:	0b 39                	or     edi,DWORD PTR [ecx]
    17ae:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    17b1:	02 18                	add    bl,BYTE PTR [eax]
    17b3:	00 00                	add    BYTE PTR [eax],al
    17b5:	07                   	pop    es
    17b6:	34 00                	xor    al,0x0
    17b8:	03 08                	add    ecx,DWORD PTR [eax]
    17ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17be:	39 0b                	cmp    DWORD PTR [ebx],ecx
    17c0:	49                   	dec    ecx
    17c1:	13 02                	adc    eax,DWORD PTR [edx]
    17c3:	18 00                	sbb    BYTE PTR [eax],al
    17c5:	00 08                	add    BYTE PTR [eax],cl
    17c7:	34 00                	xor    al,0x0
    17c9:	03 0e                	add    ecx,DWORD PTR [esi]
    17cb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17cd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17cf:	39 0b                	cmp    DWORD PTR [ebx],ecx
    17d1:	49                   	dec    ecx
    17d2:	13 00                	adc    eax,DWORD PTR [eax]
    17d4:	00 09                	add    BYTE PTR [ecx],cl
    17d6:	34 00                	xor    al,0x0
    17d8:	03 08                	add    ecx,DWORD PTR [eax]
    17da:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17dc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17de:	39 0b                	cmp    DWORD PTR [ebx],ecx
    17e0:	49                   	dec    ecx
    17e1:	13 00                	adc    eax,DWORD PTR [eax]
    17e3:	00 0a                	add    BYTE PTR [edx],cl
    17e5:	34 00                	xor    al,0x0
    17e7:	03 0e                	add    ecx,DWORD PTR [esi]
    17e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17ed:	39 0b                	cmp    DWORD PTR [ebx],ecx
    17ef:	49                   	dec    ecx
    17f0:	13 02                	adc    eax,DWORD PTR [edx]
    17f2:	18 00                	sbb    BYTE PTR [eax],al
    17f4:	00 0b                	add    BYTE PTR [ebx],cl
    17f6:	0f 00 0b             	str    WORD PTR [ebx]
    17f9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    17fc:	00 00                	add    BYTE PTR [eax],al
    17fe:	00 01                	add    BYTE PTR [ecx],al
    1800:	11 01                	adc    DWORD PTR [ecx],eax
    1802:	25 0e 13 0b 03       	and    eax,0x30b130e
    1807:	0e                   	push   cs
    1808:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    180a:	11 01                	adc    DWORD PTR [ecx],eax
    180c:	12 06                	adc    al,BYTE PTR [esi]
    180e:	10 17                	adc    BYTE PTR [edi],dl
    1810:	00 00                	add    BYTE PTR [eax],al
    1812:	02 2e                	add    ch,BYTE PTR [esi]
    1814:	01 3f                	add    DWORD PTR [edi],edi
    1816:	19 03                	sbb    DWORD PTR [ebx],eax
    1818:	0e                   	push   cs
    1819:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    181b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    181d:	39 0b                	cmp    DWORD PTR [ebx],ecx
    181f:	27                   	daa    
    1820:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1823:	11 01                	adc    DWORD PTR [ecx],eax
    1825:	12 06                	adc    al,BYTE PTR [esi]
    1827:	40                   	inc    eax
    1828:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    182e:	00 00                	add    BYTE PTR [eax],al
    1830:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    1836:	0b 3b                	or     edi,DWORD PTR [ebx]
    1838:	0b 39                	or     edi,DWORD PTR [ecx]
    183a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    183d:	02 18                	add    bl,BYTE PTR [eax]
    183f:	00 00                	add    BYTE PTR [eax],al
    1841:	04 0f                	add    al,0xf
    1843:	00 0b                	add    BYTE PTR [ebx],cl
    1845:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1848:	00 00                	add    BYTE PTR [eax],al
    184a:	05 24 00 0b 0b       	add    eax,0xb0b0024
    184f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1852:	0e                   	push   cs
    1853:	00 00                	add    BYTE PTR [eax],al
    1855:	06                   	push   es
    1856:	24 00                	and    al,0x0
    1858:	0b 0b                	or     ecx,DWORD PTR [ebx]
    185a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    185d:	08 00                	or     BYTE PTR [eax],al
    185f:	00 00                	add    BYTE PTR [eax],al
    1861:	01 11                	add    DWORD PTR [ecx],edx
    1863:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1869:	0e                   	push   cs
    186a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    186c:	11 01                	adc    DWORD PTR [ecx],eax
    186e:	12 06                	adc    al,BYTE PTR [esi]
    1870:	10 17                	adc    BYTE PTR [edi],dl
    1872:	00 00                	add    BYTE PTR [eax],al
    1874:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1877:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1879:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    187c:	08 00                	or     BYTE PTR [eax],al
    187e:	00 03                	add    BYTE PTR [ebx],al
    1880:	24 00                	and    al,0x0
    1882:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1884:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1887:	0e                   	push   cs
    1888:	00 00                	add    BYTE PTR [eax],al
    188a:	04 26                	add    al,0x26
    188c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    188f:	00 00                	add    BYTE PTR [eax],al
    1891:	05 2e 01 3f 19       	add    eax,0x193f012e
    1896:	03 0e                	add    ecx,DWORD PTR [esi]
    1898:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    189a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    189c:	39 0b                	cmp    DWORD PTR [ebx],ecx
    189e:	27                   	daa    
    189f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    18a2:	11 01                	adc    DWORD PTR [ecx],eax
    18a4:	12 06                	adc    al,BYTE PTR [esi]
    18a6:	40                   	inc    eax
    18a7:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    18ad:	00 00                	add    BYTE PTR [eax],al
    18af:	06                   	push   es
    18b0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    18b5:	0b 3b                	or     edi,DWORD PTR [ebx]
    18b7:	0b 39                	or     edi,DWORD PTR [ecx]
    18b9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    18bc:	02 18                	add    bl,BYTE PTR [eax]
    18be:	00 00                	add    BYTE PTR [eax],al
    18c0:	07                   	pop    es
    18c1:	34 00                	xor    al,0x0
    18c3:	03 08                	add    ecx,DWORD PTR [eax]
    18c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18c9:	39 0b                	cmp    DWORD PTR [ebx],ecx
    18cb:	49                   	dec    ecx
    18cc:	13 02                	adc    eax,DWORD PTR [edx]
    18ce:	18 00                	sbb    BYTE PTR [eax],al
    18d0:	00 08                	add    BYTE PTR [eax],cl
    18d2:	34 00                	xor    al,0x0
    18d4:	03 0e                	add    ecx,DWORD PTR [esi]
    18d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18da:	39 0b                	cmp    DWORD PTR [ebx],ecx
    18dc:	49                   	dec    ecx
    18dd:	13 00                	adc    eax,DWORD PTR [eax]
    18df:	00 09                	add    BYTE PTR [ecx],cl
    18e1:	34 00                	xor    al,0x0
    18e3:	03 08                	add    ecx,DWORD PTR [eax]
    18e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18e9:	39 0b                	cmp    DWORD PTR [ebx],ecx
    18eb:	49                   	dec    ecx
    18ec:	13 00                	adc    eax,DWORD PTR [eax]
    18ee:	00 0a                	add    BYTE PTR [edx],cl
    18f0:	0f 00 0b             	str    WORD PTR [ebx]
    18f3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    18f6:	00 00                	add    BYTE PTR [eax],al
    18f8:	00 01                	add    BYTE PTR [ecx],al
    18fa:	11 01                	adc    DWORD PTR [ecx],eax
    18fc:	25 0e 13 0b 03       	and    eax,0x30b130e
    1901:	0e                   	push   cs
    1902:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1904:	11 01                	adc    DWORD PTR [ecx],eax
    1906:	12 06                	adc    al,BYTE PTR [esi]
    1908:	10 17                	adc    BYTE PTR [edi],dl
    190a:	00 00                	add    BYTE PTR [eax],al
    190c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    190f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1911:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1914:	08 00                	or     BYTE PTR [eax],al
    1916:	00 03                	add    BYTE PTR [ebx],al
    1918:	24 00                	and    al,0x0
    191a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    191c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    191f:	0e                   	push   cs
    1920:	00 00                	add    BYTE PTR [eax],al
    1922:	04 2e                	add    al,0x2e
    1924:	01 3f                	add    DWORD PTR [edi],edi
    1926:	19 03                	sbb    DWORD PTR [ebx],eax
    1928:	0e                   	push   cs
    1929:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    192b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    192d:	39 0b                	cmp    DWORD PTR [ebx],ecx
    192f:	27                   	daa    
    1930:	19 11                	sbb    DWORD PTR [ecx],edx
    1932:	01 12                	add    DWORD PTR [edx],edx
    1934:	06                   	push   es
    1935:	40                   	inc    eax
    1936:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    193c:	00 00                	add    BYTE PTR [eax],al
    193e:	05 05 00 03 0e       	add    eax,0xe030005
    1943:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1945:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1947:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1949:	49                   	dec    ecx
    194a:	13 02                	adc    eax,DWORD PTR [edx]
    194c:	18 00                	sbb    BYTE PTR [eax],al
    194e:	00 06                	add    BYTE PTR [esi],al
    1950:	0f 00 0b             	str    WORD PTR [ebx]
    1953:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1956:	00 00                	add    BYTE PTR [eax],al
    1958:	07                   	pop    es
    1959:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    195c:	19 03                	sbb    DWORD PTR [ebx],eax
    195e:	0e                   	push   cs
    195f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1961:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1963:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1965:	27                   	daa    
    1966:	19 11                	sbb    DWORD PTR [ecx],edx
    1968:	01 12                	add    DWORD PTR [edx],edx
    196a:	06                   	push   es
    196b:	40                   	inc    eax
    196c:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    1972:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    1975:	03 08                	add    ecx,DWORD PTR [eax]
    1977:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1979:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    197b:	39 0b                	cmp    DWORD PTR [ebx],ecx
    197d:	49                   	dec    ecx
    197e:	13 02                	adc    eax,DWORD PTR [edx]
    1980:	18 00                	sbb    BYTE PTR [eax],al
    1982:	00 00                	add    BYTE PTR [eax],al
    1984:	01 11                	add    DWORD PTR [ecx],edx
    1986:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    198c:	0e                   	push   cs
    198d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    198f:	11 01                	adc    DWORD PTR [ecx],eax
    1991:	12 06                	adc    al,BYTE PTR [esi]
    1993:	10 17                	adc    BYTE PTR [edi],dl
    1995:	00 00                	add    BYTE PTR [eax],al
    1997:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    199a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    199c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    199f:	08 00                	or     BYTE PTR [eax],al
    19a1:	00 03                	add    BYTE PTR [ebx],al
    19a3:	16                   	push   ss
    19a4:	00 03                	add    BYTE PTR [ebx],al
    19a6:	0e                   	push   cs
    19a7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    19a9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    19ab:	39 0b                	cmp    DWORD PTR [ebx],ecx
    19ad:	49                   	dec    ecx
    19ae:	13 00                	adc    eax,DWORD PTR [eax]
    19b0:	00 04 24             	add    BYTE PTR [esp],al
    19b3:	00 0b                	add    BYTE PTR [ebx],cl
    19b5:	0b 3e                	or     edi,DWORD PTR [esi]
    19b7:	0b 03                	or     eax,DWORD PTR [ebx]
    19b9:	0e                   	push   cs
    19ba:	00 00                	add    BYTE PTR [eax],al
    19bc:	05 26 00 49 13       	add    eax,0x13490026
    19c1:	00 00                	add    BYTE PTR [eax],al
    19c3:	06                   	push   es
    19c4:	0f 00 0b             	str    WORD PTR [ebx]
    19c7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    19ca:	00 00                	add    BYTE PTR [eax],al
    19cc:	07                   	pop    es
    19cd:	34 00                	xor    al,0x0
    19cf:	03 0e                	add    ecx,DWORD PTR [esi]
    19d1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    19d3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    19d5:	39 0b                	cmp    DWORD PTR [ebx],ecx
    19d7:	49                   	dec    ecx
    19d8:	13 3f                	adc    edi,DWORD PTR [edi]
    19da:	19 02                	sbb    DWORD PTR [edx],eax
    19dc:	18 00                	sbb    BYTE PTR [eax],al
    19de:	00 08                	add    BYTE PTR [eax],cl
    19e0:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    19e3:	19 03                	sbb    DWORD PTR [ebx],eax
    19e5:	0e                   	push   cs
    19e6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    19e8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    19ea:	39 0b                	cmp    DWORD PTR [ebx],ecx
    19ec:	27                   	daa    
    19ed:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    19f0:	11 01                	adc    DWORD PTR [ecx],eax
    19f2:	12 06                	adc    al,BYTE PTR [esi]
    19f4:	40                   	inc    eax
    19f5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    19fb:	00 00                	add    BYTE PTR [eax],al
    19fd:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
    1a03:	0b 3b                	or     edi,DWORD PTR [ebx]
    1a05:	0b 39                	or     edi,DWORD PTR [ecx]
    1a07:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1a0a:	02 18                	add    bl,BYTE PTR [eax]
    1a0c:	00 00                	add    BYTE PTR [eax],al
    1a0e:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
    1a14:	0b 3b                	or     edi,DWORD PTR [ebx]
    1a16:	0b 39                	or     edi,DWORD PTR [ecx]
    1a18:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1a1b:	02 18                	add    bl,BYTE PTR [eax]
    1a1d:	00 00                	add    BYTE PTR [eax],al
    1a1f:	0b 2e                	or     ebp,DWORD PTR [esi]
    1a21:	01 3f                	add    DWORD PTR [edi],edi
    1a23:	19 03                	sbb    DWORD PTR [ebx],eax
    1a25:	0e                   	push   cs
    1a26:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a28:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a2a:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1a2c:	27                   	daa    
    1a2d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1a30:	11 01                	adc    DWORD PTR [ecx],eax
    1a32:	12 06                	adc    al,BYTE PTR [esi]
    1a34:	40                   	inc    eax
    1a35:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    1a3b:	0c 34                	or     al,0x34
    1a3d:	00 03                	add    BYTE PTR [ebx],al
    1a3f:	0e                   	push   cs
    1a40:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a42:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a44:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1a46:	49                   	dec    ecx
    1a47:	13 02                	adc    eax,DWORD PTR [edx]
    1a49:	18 00                	sbb    BYTE PTR [eax],al
    1a4b:	00 00                	add    BYTE PTR [eax],al
    1a4d:	01 11                	add    DWORD PTR [ecx],edx
    1a4f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1a55:	0e                   	push   cs
    1a56:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1a58:	11 01                	adc    DWORD PTR [ecx],eax
    1a5a:	12 06                	adc    al,BYTE PTR [esi]
    1a5c:	10 17                	adc    BYTE PTR [edi],dl
    1a5e:	00 00                	add    BYTE PTR [eax],al
    1a60:	02 01                	add    al,BYTE PTR [ecx]
    1a62:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    1a65:	01 13                	add    DWORD PTR [ebx],edx
    1a67:	00 00                	add    BYTE PTR [eax],al
    1a69:	03 21                	add    esp,DWORD PTR [ecx]
    1a6b:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1a6e:	2f                   	das    
    1a6f:	0b 00                	or     eax,DWORD PTR [eax]
    1a71:	00 04 24             	add    BYTE PTR [esp],al
    1a74:	00 0b                	add    BYTE PTR [ebx],cl
    1a76:	0b 3e                	or     edi,DWORD PTR [esi]
    1a78:	0b 03                	or     eax,DWORD PTR [ebx]
    1a7a:	0e                   	push   cs
    1a7b:	00 00                	add    BYTE PTR [eax],al
    1a7d:	05 26 00 49 13       	add    eax,0x13490026
    1a82:	00 00                	add    BYTE PTR [eax],al
    1a84:	06                   	push   es
    1a85:	34 00                	xor    al,0x0
    1a87:	03 0e                	add    ecx,DWORD PTR [esi]
    1a89:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1a8b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1a8d:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1a8f:	49                   	dec    ecx
    1a90:	13 02                	adc    eax,DWORD PTR [edx]
    1a92:	18 00                	sbb    BYTE PTR [eax],al
    1a94:	00 07                	add    BYTE PTR [edi],al
    1a96:	24 00                	and    al,0x0
    1a98:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1a9a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1a9d:	08 00                	or     BYTE PTR [eax],al
    1a9f:	00 08                	add    BYTE PTR [eax],cl
    1aa1:	0f 00 0b             	str    WORD PTR [ebx]
    1aa4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1aa7:	00 00                	add    BYTE PTR [eax],al
    1aa9:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1aac:	03 0e                	add    ecx,DWORD PTR [esi]
    1aae:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1ab0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1ab2:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1ab4:	49                   	dec    ecx
    1ab5:	13 3f                	adc    edi,DWORD PTR [edi]
    1ab7:	19 02                	sbb    DWORD PTR [edx],eax
    1ab9:	18 00                	sbb    BYTE PTR [eax],al
    1abb:	00 0a                	add    BYTE PTR [edx],cl
    1abd:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1ac0:	19 03                	sbb    DWORD PTR [ebx],eax
    1ac2:	0e                   	push   cs
    1ac3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1ac5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1ac7:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1ac9:	27                   	daa    
    1aca:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1acd:	11 01                	adc    DWORD PTR [ecx],eax
    1acf:	12 06                	adc    al,BYTE PTR [esi]
    1ad1:	40                   	inc    eax
    1ad2:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1ad8:	00 00                	add    BYTE PTR [eax],al
    1ada:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
    1ae0:	0b 3b                	or     edi,DWORD PTR [ebx]
    1ae2:	0b 39                	or     edi,DWORD PTR [ecx]
    1ae4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1ae7:	02 18                	add    bl,BYTE PTR [eax]
    1ae9:	00 00                	add    BYTE PTR [eax],al
    1aeb:	0c 2e                	or     al,0x2e
    1aed:	01 3f                	add    DWORD PTR [edi],edi
    1aef:	19 03                	sbb    DWORD PTR [ebx],eax
    1af1:	0e                   	push   cs
    1af2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1af4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1af6:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1af8:	27                   	daa    
    1af9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1afc:	11 01                	adc    DWORD PTR [ecx],eax
    1afe:	12 06                	adc    al,BYTE PTR [esi]
    1b00:	40                   	inc    eax
    1b01:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1b07:	00 00                	add    BYTE PTR [eax],al
    1b09:	0d 34 00 03 08       	or     eax,0x8030034
    1b0e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1b10:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1b12:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1b14:	49                   	dec    ecx
    1b15:	13 02                	adc    eax,DWORD PTR [edx]
    1b17:	18 00                	sbb    BYTE PTR [eax],al
    1b19:	00 0e                	add    BYTE PTR [esi],cl
    1b1b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1b1e:	19 03                	sbb    DWORD PTR [ebx],eax
    1b20:	0e                   	push   cs
    1b21:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1b23:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1b25:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1b27:	27                   	daa    
    1b28:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1b2b:	11 01                	adc    DWORD PTR [ecx],eax
    1b2d:	12 06                	adc    al,BYTE PTR [esi]
    1b2f:	40                   	inc    eax
    1b30:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1b36:	00 01                	add    BYTE PTR [ecx],al
    1b38:	11 01                	adc    DWORD PTR [ecx],eax
    1b3a:	25 0e 13 0b 03       	and    eax,0x30b130e
    1b3f:	0e                   	push   cs
    1b40:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1b42:	11 01                	adc    DWORD PTR [ecx],eax
    1b44:	12 06                	adc    al,BYTE PTR [esi]
    1b46:	10 17                	adc    BYTE PTR [edi],dl
    1b48:	00 00                	add    BYTE PTR [eax],al
    1b4a:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b4d:	03 0e                	add    ecx,DWORD PTR [esi]
    1b4f:	3e 0b 0b             	or     ecx,DWORD PTR ds:[ebx]
    1b52:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1b55:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1b57:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1b59:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1b5b:	01 13                	add    DWORD PTR [ebx],edx
    1b5d:	00 00                	add    BYTE PTR [eax],al
    1b5f:	03 28                	add    ebp,DWORD PTR [eax]
    1b61:	00 03                	add    BYTE PTR [ebx],al
    1b63:	0e                   	push   cs
    1b64:	1c 0b                	sbb    al,0xb
    1b66:	00 00                	add    BYTE PTR [eax],al
    1b68:	04 28                	add    al,0x28
    1b6a:	00 03                	add    BYTE PTR [ebx],al
    1b6c:	0e                   	push   cs
    1b6d:	1c 05                	sbb    al,0x5
    1b6f:	00 00                	add    BYTE PTR [eax],al
    1b71:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1b76:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1b79:	0e                   	push   cs
    1b7a:	00 00                	add    BYTE PTR [eax],al
    1b7c:	06                   	push   es
    1b7d:	24 00                	and    al,0x0
    1b7f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1b81:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1b84:	08 00                	or     BYTE PTR [eax],al
    1b86:	00 07                	add    BYTE PTR [edi],al
    1b88:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1b8c:	00 00                	add    BYTE PTR [eax],al
    1b8e:	08 0f                	or     BYTE PTR [edi],cl
    1b90:	00 0b                	add    BYTE PTR [ebx],cl
    1b92:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1b95:	00 00                	add    BYTE PTR [eax],al
    1b97:	09 16                	or     DWORD PTR [esi],edx
    1b99:	00 03                	add    BYTE PTR [ebx],al
    1b9b:	0e                   	push   cs
    1b9c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1b9e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1ba0:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1ba2:	49                   	dec    ecx
    1ba3:	13 00                	adc    eax,DWORD PTR [eax]
    1ba5:	00 0a                	add    BYTE PTR [edx],cl
    1ba7:	34 00                	xor    al,0x0
    1ba9:	03 0e                	add    ecx,DWORD PTR [esi]
    1bab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1bad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1baf:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1bb1:	49                   	dec    ecx
    1bb2:	13 3f                	adc    edi,DWORD PTR [edi]
    1bb4:	19 02                	sbb    DWORD PTR [edx],eax
    1bb6:	18 00                	sbb    BYTE PTR [eax],al
    1bb8:	00 0b                	add    BYTE PTR [ebx],cl
    1bba:	13 01                	adc    eax,DWORD PTR [ecx]
    1bbc:	03 08                	add    ecx,DWORD PTR [eax]
    1bbe:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1bc0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1bc2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1bc4:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1bc6:	01 13                	add    DWORD PTR [ebx],edx
    1bc8:	00 00                	add    BYTE PTR [eax],al
    1bca:	0c 0d                	or     al,0xd
    1bcc:	00 03                	add    BYTE PTR [ebx],al
    1bce:	0e                   	push   cs
    1bcf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1bd1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1bd3:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1bd5:	49                   	dec    ecx
    1bd6:	13 38                	adc    edi,DWORD PTR [eax]
    1bd8:	0b 00                	or     eax,DWORD PTR [eax]
    1bda:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
    1be0:	01 13                	add    DWORD PTR [ebx],edx
    1be2:	00 00                	add    BYTE PTR [eax],al
    1be4:	0e                   	push   cs
    1be5:	21 00                	and    DWORD PTR [eax],eax
    1be7:	49                   	dec    ecx
    1be8:	13 2f                	adc    ebp,DWORD PTR [edi]
    1bea:	0b 00                	or     eax,DWORD PTR [eax]
    1bec:	00 0f                	add    BYTE PTR [edi],cl
    1bee:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1bf1:	19 03                	sbb    DWORD PTR [ebx],eax
    1bf3:	0e                   	push   cs
    1bf4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1bf6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1bf8:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1bfa:	27                   	daa    
    1bfb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1bfe:	11 01                	adc    DWORD PTR [ecx],eax
    1c00:	12 06                	adc    al,BYTE PTR [esi]
    1c02:	40                   	inc    eax
    1c03:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1c09:	00 00                	add    BYTE PTR [eax],al
    1c0b:	10 05 00 03 0e 3a    	adc    BYTE PTR ds:0x3a0e0300,al
    1c11:	0b 3b                	or     edi,DWORD PTR [ebx]
    1c13:	0b 39                	or     edi,DWORD PTR [ecx]
    1c15:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1c18:	02 18                	add    bl,BYTE PTR [eax]
    1c1a:	00 00                	add    BYTE PTR [eax],al
    1c1c:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1c1f:	03 0e                	add    ecx,DWORD PTR [esi]
    1c21:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1c23:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1c25:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1c27:	49                   	dec    ecx
    1c28:	13 02                	adc    eax,DWORD PTR [edx]
    1c2a:	18 00                	sbb    BYTE PTR [eax],al
    1c2c:	00 12                	add    BYTE PTR [edx],dl
    1c2e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1c31:	19 03                	sbb    DWORD PTR [ebx],eax
    1c33:	0e                   	push   cs
    1c34:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1c36:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1c38:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1c3a:	27                   	daa    
    1c3b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1c3e:	11 01                	adc    DWORD PTR [ecx],eax
    1c40:	12 06                	adc    al,BYTE PTR [esi]
    1c42:	40                   	inc    eax
    1c43:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1c49:	00 00                	add    BYTE PTR [eax],al
    1c4b:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
    1c4e:	03 08                	add    ecx,DWORD PTR [eax]
    1c50:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1c52:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1c54:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1c56:	49                   	dec    ecx
    1c57:	13 02                	adc    eax,DWORD PTR [edx]
    1c59:	18 00                	sbb    BYTE PTR [eax],al
    1c5b:	00 14 2e             	add    BYTE PTR [esi+ebp*1],dl
    1c5e:	01 3f                	add    DWORD PTR [edi],edi
    1c60:	19 03                	sbb    DWORD PTR [ebx],eax
    1c62:	0e                   	push   cs
    1c63:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1c65:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1c67:	39 0b                	cmp    DWORD PTR [ebx],ecx
    1c69:	49                   	dec    ecx
    1c6a:	13 11                	adc    edx,DWORD PTR [ecx]
    1c6c:	01 12                	add    DWORD PTR [edx],edx
    1c6e:	06                   	push   es
    1c6f:	40                   	inc    eax
    1c70:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 78 00 00 00    	add    BYTE PTR [edi+0x78],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	10 01                	adc    BYTE PTR [ecx],al
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 00                	add    al,0x0
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	78 00                	js     32 <sysEnter_Vector-0x12ffce>
  32:	00 9f a6 00 00 00    	add    BYTE PTR [edi+0xa6],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	65 02 00             	add    al,BYTE PTR gs:[eax]
  49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1e                   	push   ds
  51:	01 00                	add    DWORD PTR [eax],eax
  53:	9f                   	lahf   
  54:	36 01 00             	add    DWORD PTR ss:[eax],eax
	...
  5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	ac                   	lods   al,BYTE PTR ds:[esi]
  67:	03 00                	add    eax,DWORD PTR [eax]
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	54                   	push   esp
  71:	02 00                	add    al,BYTE PTR [eax]
  73:	9f                   	lahf   
  74:	74 02                	je     78 <sysEnter_Vector-0x12ff88>
	...
  7e:	00 00                	add    BYTE PTR [eax],al
  80:	1c 00                	sbb    al,0x0
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	aa                   	stos   BYTE PTR es:[edi],al
  87:	05 00 00 04 00       	add    eax,0x40000
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	c8 04 00 9f          	enter  0x4,0x9f
  94:	7a 01                	jp     97 <sysEnter_Vector-0x12ff69>
	...
  9e:	00 00                	add    BYTE PTR [eax],al
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	7d 07                	jge    af <sysEnter_Vector-0x12ff51>
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	42                   	inc    edx
  b1:	06                   	push   es
  b2:	00 9f eb 02 00 00    	add    BYTE PTR [edi+0x2eb],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	a3 0a 00 00 04       	mov    ds:0x400000a,eax
  cb:	00 00                	add    BYTE PTR [eax],al
  cd:	00 00                	add    BYTE PTR [eax],al
  cf:	00 2d 09 00 9f ef    	add    BYTE PTR ds:0xef9f0009,ch
  d5:	08 00                	or     BYTE PTR [eax],al
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	58                   	pop    eax
  e7:	14 00                	adc    al,0x0
  e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	1c 12                	sbb    al,0x12
  f2:	00 9f 79 01 00 00    	add    BYTE PTR [edi+0x179],bl
	...
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	01 17                	add    DWORD PTR [edi],edx
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	95                   	xchg   ebp,eax
 111:	13 00                	adc    eax,DWORD PTR [eax]
 113:	9f                   	lahf   
 114:	d2 0d 00 00 00 00    	ror    BYTE PTR ds:0x0,cl
 11a:	00 00                	add    BYTE PTR [eax],al
 11c:	00 00                	add    BYTE PTR [eax],al
 11e:	00 00                	add    BYTE PTR [eax],al
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	58                   	pop    eax
 127:	23 00                	and    eax,DWORD PTR [eax]
 129:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	67 21 00             	and    DWORD PTR [bx+si],eax
 133:	9f                   	lahf   
 134:	77 00                	ja     136 <sysEnter_Vector-0x12feca>
	...
 13e:	00 00                	add    BYTE PTR [eax],al
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	02 26                	add    ah,BYTE PTR [esi]
 148:	00 00                	add    BYTE PTR [eax],al
 14a:	04 00                	add    al,0x0
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	de 21                	fisub  WORD PTR [ecx]
 152:	00 9f ed 06 00 00    	add    BYTE PTR [edi+0x6ed],bl
	...
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	44                   	inc    esp
 167:	2b 00                	sub    eax,DWORD PTR [eax]
 169:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	cb                   	retf   
 171:	28 00                	sub    BYTE PTR [eax],al
 173:	9f                   	lahf   
 174:	c3                   	ret    
 175:	01 00                	add    DWORD PTR [eax],eax
	...
 17f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	43                   	inc    ebx
 187:	2d 00 00 04 00       	sub    eax,0x40000
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	8e 2a                	mov    gs,WORD PTR [edx]
 192:	00 9f ef 00 00 00    	add    BYTE PTR [edi+0xef],bl
	...
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	f9                   	stc    
 1a7:	2e 00 00             	add    BYTE PTR cs:[eax],al
 1aa:	04 00                	add    al,0x0
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	7d 2b                	jge    1dd <sysEnter_Vector-0x12fe23>
 1b2:	00 9f 5f 00 00 00    	add    BYTE PTR [edi+0x5f],bl
	...
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	18 31                	sbb    BYTE PTR [ecx],dh
 1c8:	00 00                	add    BYTE PTR [eax],al
 1ca:	04 00                	add    al,0x0
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	dc 2b                	fsubr  QWORD PTR [ebx]
 1d2:	00 9f b9 05 00 00    	add    BYTE PTR [edi+0x5b9],bl
	...
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	f0 36 00 00          	lock add BYTE PTR ss:[eax],al
 1ea:	04 00                	add    al,0x0
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	95                   	xchg   ebp,eax
 1f1:	31 00                	xor    DWORD PTR [eax],eax
 1f3:	9f                   	lahf   
 1f4:	5b                   	pop    ebx
 1f5:	07                   	pop    es
	...
 1fe:	00 00                	add    BYTE PTR [eax],al
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	e0 3a                	loopne 242 <sysEnter_Vector-0x12fdbe>
 208:	00 00                	add    BYTE PTR [eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	f0 38 00             	lock cmp BYTE PTR [eax],al
 213:	9f                   	lahf   
 214:	88 00                	mov    BYTE PTR [eax],al
	...
 21e:	00 00                	add    BYTE PTR [eax],al
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	c0 3b 00             	sar    BYTE PTR [ebx],0x0
 229:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	78 39                	js     26b <sysEnter_Vector-0x12fd95>
 232:	00 9f 1b 01 00 00    	add    BYTE PTR [edi+0x11b],bl
	...
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	8e 3d 00 00 04 00    	mov    ?,WORD PTR ds:0x40000
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	93                   	xchg   ebx,eax
 251:	3a 00                	cmp    al,BYTE PTR [eax]
 253:	9f                   	lahf   
 254:	83 00 00             	add    DWORD PTR [eax],0x0
	...
 25f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	37                   	aaa    
 267:	3f                   	aas    
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	16                   	push   ss
 271:	3b 00                	cmp    eax,DWORD PTR [eax]
 273:	9f                   	lahf   
 274:	d3 00                	rol    DWORD PTR [eax],cl
	...
 27e:	00 00                	add    BYTE PTR [eax],al
 280:	1c 00                	sbb    al,0x0
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	76 40                	jbe    2c8 <sysEnter_Vector-0x12fd38>
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	e9 3b 00 9f 91       	jmp    919f02d0 <sysEnter_Vector+0x918c02d0>
	...
 29d:	00 00                	add    BYTE PTR [eax],al
 29f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	c2 41 00             	ret    0x41
 2a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	7a 3c                	jp     2ee <sysEnter_Vector-0x12fd12>
 2b2:	00 9f b2 00 00 00    	add    BYTE PTR [edi+0xb2],bl
	...
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	a8 43                	test   al,0x43
 2c8:	00 00                	add    BYTE PTR [eax],al
 2ca:	04 00                	add    al,0x0
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	2c 3d                	sub    al,0x3d
 2d2:	00 9f d6 00 00 00    	add    BYTE PTR [edi+0xd6],bl
	...
 2e0:	1c 00                	sbb    al,0x0
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	9a 44 00 00 04 00 00 	call   0x0:0x4000044
 2ed:	00 00                	add    BYTE PTR [eax],al
 2ef:	00 02                	add    BYTE PTR [edx],al
 2f1:	3e 00 9f 94 00 00 00 	add    BYTE PTR ds:[edi+0x94],bl
	...
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	9f                   	lahf   
 307:	45                   	inc    ebp
 308:	00 00                	add    BYTE PTR [eax],al
 30a:	04 00                	add    al,0x0
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	96                   	xchg   esi,eax
 311:	3e 00 9f 82 01 00 00 	add    BYTE PTR ds:[edi+0x182],bl
	...
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	b6 46                	mov    dh,0x46
 328:	00 00                	add    BYTE PTR [eax],al
 32a:	04 00                	add    al,0x0
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	18 40 00             	sbb    BYTE PTR [eax+0x0],al
 333:	9f                   	lahf   
 334:	21 00                	and    DWORD PTR [eax],eax
	...
 33e:	00 00                	add    BYTE PTR [eax],al
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	29 47 00             	sub    DWORD PTR [edi+0x0],eax
 349:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	39 40 00             	cmp    DWORD PTR [eax+0x0],eax
 353:	9f                   	lahf   
 354:	a1 01 00 00 00       	mov    eax,ds:0x1
 359:	00 00                	add    BYTE PTR [eax],al
 35b:	00 00                	add    BYTE PTR [eax],al
 35d:	00 00                	add    BYTE PTR [eax],al
 35f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	3e 48                	ds dec eax
 368:	00 00                	add    BYTE PTR [eax],al
 36a:	04 00                	add    al,0x0
 36c:	00 00                	add    BYTE PTR [eax],al
 36e:	00 00                	add    BYTE PTR [eax],al
 370:	da 41 00             	fiadd  DWORD PTR [ecx+0x0]
 373:	9f                   	lahf   
 374:	be 00 00 00 00       	mov    esi,0x0
 379:	00 00                	add    BYTE PTR [eax],al
 37b:	00 00                	add    BYTE PTR [eax],al
 37d:	00 00                	add    BYTE PTR [eax],al
 37f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	10 49 00             	adc    BYTE PTR [ecx+0x0],cl
 389:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	98                   	cwde   
 391:	42                   	inc    edx
 392:	00 9f 3e 01 00 00    	add    BYTE PTR [edi+0x13e],bl
	...
 3a0:	1c 00                	sbb    al,0x0
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	e9 4a 00 00 04       	jmp    40003f5 <sysEnter_Vector+0x3ed03f5>
 3ab:	00 00                	add    BYTE PTR [eax],al
 3ad:	00 00                	add    BYTE PTR [eax],al
 3af:	00 d6                	add    dh,dl
 3b1:	43                   	inc    ebx
 3b2:	00 9f 35 01 00 00    	add    BYTE PTR [edi+0x135],bl
	...
 3c0:	1c 00                	sbb    al,0x0
 3c2:	00 00                	add    BYTE PTR [eax],al
 3c4:	02 00                	add    al,BYTE PTR [eax]
 3c6:	aa                   	stos   BYTE PTR es:[edi],al
 3c7:	4c                   	dec    esp
 3c8:	00 00                	add    BYTE PTR [eax],al
 3ca:	04 00                	add    al,0x0
 3cc:	00 00                	add    BYTE PTR [eax],al
 3ce:	00 00                	add    BYTE PTR [eax],al
 3d0:	0b 45 00             	or     eax,DWORD PTR [ebp+0x0]
 3d3:	9f                   	lahf   
 3d4:	03 0d 00 00 00 00    	add    ecx,DWORD PTR ds:0x0
 3da:	00 00                	add    BYTE PTR [eax],al
 3dc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	a9 00 00 00 03       	test   eax,0x3000000
       5:	00 53 00             	add    BYTE PTR [ebx+0x0],dl
       8:	00 00                	add    BYTE PTR [eax],al
       a:	01 01                	add    DWORD PTR [ecx],eax
       c:	fb                   	sti    
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e 2e 2f             	cs cs das 
      1e:	2e 2e 2f             	cs cs das 
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 00                	add    BYTE PTR [eax],al
      44:	73 74                	jae    ba <sysEnter_Vector-0x12ff46>
      46:	72 63                	jb     ab <sysEnter_Vector-0x12ff55>
      48:	68 72 2e 63 00       	push   0x632e72
      4d:	01 00                	add    DWORD PTR [eax],eax
      4f:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
      52:	6d                   	ins    DWORD PTR es:[edi],dx
      53:	6d                   	ins    DWORD PTR es:[edi],dx
      54:	6f                   	outs   dx,DWORD PTR ds:[esi]
      55:	6e                   	outs   dx,BYTE PTR ds:[esi]
      56:	2e 68 00 02 00 00    	cs push 0x200
      5c:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
      62:	00 00                	add    BYTE PTR [eax],al
      64:	00 9f 03 09 01 05    	add    BYTE PTR [edi+0x5010903],bl
      6a:	0b 08                	or     ecx,DWORD PTR [eax]
      6c:	13 05 10 2f 05 0e    	adc    eax,DWORD PTR ds:0xe052f10
      72:	90                   	nop
      73:	05 0c 3c 05 14       	add    eax,0x14053c0c
      78:	4b                   	dec    ebx
      79:	05 0c 72 05 0f       	add    eax,0xf05720c
      7e:	66 05 0b 3c          	add    ax,0x3c0b
      82:	05 0c 4d 05 01       	add    eax,0x1054d0c
      87:	3d 31 05 0b 08       	cmp    eax,0x80b0531
      8c:	13 05 10 2f 05 0e    	adc    eax,DWORD PTR ds:0xe052f10
      92:	90                   	nop
      93:	05 0c 3c 05 14       	add    eax,0x14053c0c
      98:	4b                   	dec    ebx
      99:	05 0c 72 05 0f       	add    eax,0xf05720c
      9e:	66 05 0b 3c          	add    ax,0x3c0b
      a2:	05 0c 4d 05 01       	add    eax,0x1054d0c
      a7:	3d 02 02 00 01       	cmp    eax,0x1000202
      ac:	01 fe                	add    esi,edi
      ae:	00 00                	add    BYTE PTR [eax],al
      b0:	00 03                	add    BYTE PTR [ebx],al
      b2:	00 54 00 00          	add    BYTE PTR [eax+eax*1+0x0],dl
      b6:	00 01                	add    BYTE PTR [ecx],al
      b8:	01 fb                	add    ebx,edi
      ba:	0e                   	push   cs
      bb:	0d 00 01 01 01       	or     eax,0x1010100
      c0:	01 00                	add    DWORD PTR [eax],eax
      c2:	00 00                	add    BYTE PTR [eax],al
      c4:	01 00                	add    DWORD PTR [eax],eax
      c6:	00 01                	add    BYTE PTR [ecx],al
      c8:	2e 2e 2f             	cs cs das 
      cb:	2e 2e 2f             	cs cs das 
      ce:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      d2:	6a 2f                	push   0x2f
      d4:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      d7:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      de:	63 2f                	arpl   WORD PTR [edi],bp
      e0:	73 74                	jae    156 <sysEnter_Vector-0x12feaa>
      e2:	72 69                	jb     14d <sysEnter_Vector-0x12feb3>
      e4:	6e                   	outs   dx,BYTE PTR ds:[esi]
      e5:	67 73 00             	addr16 jae e8 <sysEnter_Vector-0x12ff18>
      e8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      ef:	00 00                	add    BYTE PTR [eax],al
      f1:	73 74                	jae    167 <sysEnter_Vector-0x12fe99>
      f3:	72 63                	jb     158 <sysEnter_Vector-0x12fea8>
      f5:	73 70                	jae    167 <sysEnter_Vector-0x12fe99>
      f7:	6e                   	outs   dx,BYTE PTR ds:[esi]
      f8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
      fb:	01 00                	add    DWORD PTR [eax],eax
      fd:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     100:	6d                   	ins    DWORD PTR es:[edi],dx
     101:	6d                   	ins    DWORD PTR es:[edi],dx
     102:	6f                   	outs   dx,DWORD PTR ds:[esi]
     103:	6e                   	outs   dx,BYTE PTR ds:[esi]
     104:	2e 68 00 02 00 00    	cs push 0x200
     10a:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
     110:	78 00                	js     112 <sysEnter_Vector-0x12feee>
     112:	00 9f 03 26 01 05    	add    BYTE PTR [edi+0x5012603],bl
     118:	0c 08                	or     al,0x8
     11a:	31 05 18 3c 05 05    	xor    DWORD PTR ds:0x5053c18,eax
     120:	58                   	pop    eax
     121:	05 09 2f 05 02       	add    eax,0x2052f09
     126:	3c 05                	cmp    al,0x5
     128:	0f 2f 05 09 3c 05 0b 	comiss xmm0,DWORD PTR ds:0xb053c09
     12f:	67 05 1c 00 02 04    	addr16 add eax,0x402001c
     135:	02 72 05             	add    dh,BYTE PTR [edx+0x5]
     138:	12 00                	adc    al,BYTE PTR [eax]
     13a:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     13d:	3c 05                	cmp    al,0x5
     13f:	02 00                	add    al,BYTE PTR [eax]
     141:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     144:	3c 05                	cmp    al,0x5
     146:	27                   	daa    
     147:	00 02                	add    BYTE PTR [edx],al
     149:	04 02                	add    al,0x2
     14b:	49                   	dec    ecx
     14c:	05 2d 00 02 04       	add    eax,0x402002d
     151:	02 3c 05 05 00 02 04 	add    bh,BYTE PTR [eax*1+0x4020005]
     158:	01 58 05             	add    DWORD PTR [eax+0x5],ebx
     15b:	0d 6d 05 01 59       	or     eax,0x5901056d
     160:	4d                   	dec    ebp
     161:	05 0c 08 31 05       	add    eax,0x531080c
     166:	18 3c 05 05 58 05 09 	sbb    BYTE PTR [eax*1+0x9055805],bh
     16d:	2f                   	das    
     16e:	05 02 3c 05 0f       	add    eax,0xf053c02
     173:	2f                   	das    
     174:	05 09 3c 05 0b       	add    eax,0xb053c09
     179:	67 05 1c 00 02 04    	addr16 add eax,0x402001c
     17f:	02 72 05             	add    dh,BYTE PTR [edx+0x5]
     182:	12 00                	adc    al,BYTE PTR [eax]
     184:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     187:	3c 05                	cmp    al,0x5
     189:	02 00                	add    al,BYTE PTR [eax]
     18b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     18e:	3c 05                	cmp    al,0x5
     190:	27                   	daa    
     191:	00 02                	add    BYTE PTR [edx],al
     193:	04 02                	add    al,0x2
     195:	49                   	dec    ecx
     196:	05 2d 00 02 04       	add    eax,0x402002d
     19b:	02 3c 05 05 00 02 04 	add    bh,BYTE PTR [eax*1+0x4020005]
     1a2:	01 58 05             	add    DWORD PTR [eax+0x5],ebx
     1a5:	0d 6d 05 01 59       	or     eax,0x5901056d
     1aa:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1ad:	01 01                	add    DWORD PTR [ecx],eax
     1af:	d9 00                	fld    DWORD PTR [eax]
     1b1:	00 00                	add    BYTE PTR [eax],al
     1b3:	03 00                	add    eax,DWORD PTR [eax]
     1b5:	53                   	push   ebx
     1b6:	00 00                	add    BYTE PTR [eax],al
     1b8:	00 01                	add    BYTE PTR [ecx],al
     1ba:	01 fb                	add    ebx,edi
     1bc:	0e                   	push   cs
     1bd:	0d 00 01 01 01       	or     eax,0x1010100
     1c2:	01 00                	add    DWORD PTR [eax],eax
     1c4:	00 00                	add    BYTE PTR [eax],al
     1c6:	01 00                	add    DWORD PTR [eax],eax
     1c8:	00 01                	add    BYTE PTR [ecx],al
     1ca:	2e 2e 2f             	cs cs das 
     1cd:	2e 2e 2f             	cs cs das 
     1d0:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     1d4:	6a 2f                	push   0x2f
     1d6:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     1d9:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     1e0:	63 2f                	arpl   WORD PTR [edi],bp
     1e2:	73 74                	jae    258 <sysEnter_Vector-0x12fda8>
     1e4:	72 69                	jb     24f <sysEnter_Vector-0x12fdb1>
     1e6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     1e7:	67 73 00             	addr16 jae 1ea <sysEnter_Vector-0x12fe16>
     1ea:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     1f1:	00 00                	add    BYTE PTR [eax],al
     1f3:	73 74                	jae    269 <sysEnter_Vector-0x12fd97>
     1f5:	72 74                	jb     26b <sysEnter_Vector-0x12fd95>
     1f7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1f8:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     1fb:	00 01                	add    BYTE PTR [ecx],al
     1fd:	00 00                	add    BYTE PTR [eax],al
     1ff:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     202:	6d                   	ins    DWORD PTR es:[edi],dx
     203:	6f                   	outs   dx,DWORD PTR ds:[esi]
     204:	6e                   	outs   dx,BYTE PTR ds:[esi]
     205:	2e 68 00 02 00 00    	cs push 0x200
     20b:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
     211:	1e                   	push   ds
     212:	01 00                	add    DWORD PTR [eax],eax
     214:	9f                   	lahf   
     215:	03 2a                	add    ebp,DWORD PTR [edx]
     217:	01 05 08 08 40 05    	add    DWORD PTR ds:0x5400808,eax
     21d:	04 67                	add    al,0x67
     21f:	05 0e 92 05 0c       	add    eax,0xc05920e
     224:	90                   	nop
     225:	05 0a 3c 05 05       	add    eax,0x5053c0a
     22a:	3c 05                	cmp    al,0x5
     22c:	0d 4b 05 0e 75       	or     eax,0x750e054b
     231:	05 05 e4 4b 05       	add    eax,0x54be405
     236:	11 4b 05             	adc    DWORD PTR [ebx+0x5],ecx
     239:	0f 08                	invd   
     23b:	2e 05 0b 58 05 09    	cs add eax,0x905580b
     241:	67 05 08 90 4b 05    	addr16 add eax,0x54b9008
     247:	0b e4                	or     esp,esp
     249:	05 0c 3d 05 01       	add    eax,0x1053d0c
     24e:	3d 77 05 08 08       	cmp    eax,0x8080577
     253:	40                   	inc    eax
     254:	05 04 67 05 0e       	add    eax,0xe056704
     259:	92                   	xchg   edx,eax
     25a:	05 0c 90 05 0a       	add    eax,0xa05900c
     25f:	3c 05                	cmp    al,0x5
     261:	05 3c 05 0d 4b       	add    eax,0x4b0d053c
     266:	05 0e 75 05 05       	add    eax,0x505750e
     26b:	e4 4b                	in     al,0x4b
     26d:	05 11 4b 05 0f       	add    eax,0xf054b11
     272:	08 2e                	or     BYTE PTR [esi],ch
     274:	05 0b 58 05 09       	add    eax,0x905580b
     279:	67 05 08 90 4b 05    	addr16 add eax,0x54b9008
     27f:	0b e4                	or     esp,esp
     281:	05 0c 3d 05 01       	add    eax,0x1053d0c
     286:	3d 02 07 00 01       	cmp    eax,0x1000702
     28b:	01 be 01 00 00 03    	add    DWORD PTR [esi+0x3000001],edi
     291:	00 36                	add    BYTE PTR [esi],dh
     293:	00 00                	add    BYTE PTR [eax],al
     295:	00 01                	add    BYTE PTR [ecx],al
     297:	01 fb                	add    ebx,edi
     299:	0e                   	push   cs
     29a:	0d 00 01 01 01       	or     eax,0x1010100
     29f:	01 00                	add    DWORD PTR [eax],eax
     2a1:	00 00                	add    BYTE PTR [eax],al
     2a3:	01 00                	add    DWORD PTR [eax],eax
     2a5:	00 01                	add    BYTE PTR [ecx],al
     2a7:	73 72                	jae    31b <sysEnter_Vector-0x12fce5>
     2a9:	63 00                	arpl   WORD PTR [eax],ax
     2ab:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2b2:	00 00                	add    BYTE PTR [eax],al
     2b4:	61                   	popa   
     2b5:	73 63                	jae    31a <sysEnter_Vector-0x12fce6>
     2b7:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     2be:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     2c1:	6d                   	ins    DWORD PTR es:[edi],dx
     2c2:	6d                   	ins    DWORD PTR es:[edi],dx
     2c3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2c4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2c5:	2e 68 00 02 00 00    	cs push 0x200
     2cb:	00 05 02 00 05 02    	add    BYTE PTR ds:0x2050002,al
     2d1:	54                   	push   esp
     2d2:	02 00                	add    al,BYTE PTR [eax]
     2d4:	9f                   	lahf   
     2d5:	03 0a                	add    ecx,DWORD PTR [edx]
     2d7:	01 05 0d 08 4e 05    	add    DWORD PTR ds:0x54e080d,eax
     2dd:	16                   	push   ss
     2de:	74 05                	je     2e5 <sysEnter_Vector-0x12fd1b>
     2e0:	20 f2                	and    dl,dh
     2e2:	05 14 3c 05 06       	add    eax,0x6053c14
     2e7:	3c 05                	cmp    al,0x5
     2e9:	0f 00 02             	sldt   WORD PTR [edx]
     2ec:	04 03                	add    al,0x3
     2ee:	2f                   	das    
     2ef:	05 0c 00 02 04       	add    eax,0x402000c
     2f4:	03 82 05 12 00 02    	add    eax,DWORD PTR [edx+0x2001205]
     2fa:	04 03                	add    al,0x3
     2fc:	67 05 0b 00 02 04    	addr16 add eax,0x402000b
     302:	03 82 05 12 00 02    	add    eax,DWORD PTR [edx+0x2001205]
     308:	04 03                	add    al,0x3
     30a:	82 05 0f 00 02 04 03 	add    BYTE PTR ds:0x402000f,0x3
     311:	3c 05                	cmp    al,0x5
     313:	0b 00                	or     eax,DWORD PTR [eax]
     315:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     318:	2f                   	das    
     319:	05 0f 00 02 04       	add    eax,0x402000f
     31e:	03 82 05 2a 00 02    	add    eax,DWORD PTR [edx+0x2002a05]
     324:	04 03                	add    al,0x3
     326:	63 05 2f 00 02 04    	arpl   WORD PTR ds:0x402002f,ax
     32c:	03 4a 05             	add    ecx,DWORD PTR [edx+0x5]
     32f:	06                   	push   es
     330:	00 02                	add    BYTE PTR [edx],al
     332:	04 01                	add    al,0x1
     334:	4a                   	dec    edx
     335:	05 02 87 77 05       	add    eax,0x5778702
     33a:	10 08                	adc    BYTE PTR [eax],cl
     33c:	3f                   	aas    
     33d:	05 09 66 05 0c       	add    eax,0xc056609
     342:	67 05 08 3d 05 15    	addr16 add eax,0x15053d08
     348:	00 02                	add    BYTE PTR [edx],al
     34a:	04 01                	add    al,0x1
     34c:	76 05                	jbe    353 <sysEnter_Vector-0x12fcad>
     34e:	1a 00                	sbb    al,BYTE PTR [eax]
     350:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     353:	02 23                	add    ah,BYTE PTR [ebx]
     355:	12 05 0d 00 02 04    	adc    al,BYTE PTR ds:0x402000d
     35b:	01 58 05             	add    DWORD PTR [eax+0x5],ebx
     35e:	0b 00                	or     eax,DWORD PTR [eax]
     360:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     363:	ac                   	lods   al,BYTE PTR ds:[esi]
     364:	05 1a 00 02 04       	add    eax,0x402001a
     369:	01 58 05             	add    DWORD PTR [eax+0x5],ebx
     36c:	11 00                	adc    DWORD PTR [eax],eax
     36e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     371:	2e 05 12 00 02 04    	cs add eax,0x4020012
     377:	01 2f                	add    DWORD PTR [edi],ebp
     379:	05 06 00 02 04       	add    eax,0x4020006
     37e:	01 08                	add    DWORD PTR [eax],ecx
     380:	9e                   	sahf   
     381:	05 09 67 05 0d       	add    eax,0xd056709
     386:	67 05 0b ac 05 11    	addr16 add eax,0x1105ac0b
     38c:	58                   	pop    eax
     38d:	05 07 3d 05 0b       	add    eax,0xb053d07
     392:	82 05 06 3d 05 02 d7 	add    BYTE PTR ds:0x2053d06,0xd7
     399:	3f                   	aas    
     39a:	05 10 08 3f 05       	add    eax,0x53f0810
     39f:	09 66 05             	or     DWORD PTR [esi+0x5],esp
     3a2:	0c 67                	or     al,0x67
     3a4:	05 08 3d 05 15       	add    eax,0x15053d08
     3a9:	00 02                	add    BYTE PTR [edx],al
     3ab:	04 01                	add    al,0x1
     3ad:	76 05                	jbe    3b4 <sysEnter_Vector-0x12fc4c>
     3af:	1a 00                	sbb    al,BYTE PTR [eax]
     3b1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3b4:	02 23                	add    ah,BYTE PTR [ebx]
     3b6:	12 05 0d 00 02 04    	adc    al,BYTE PTR ds:0x402000d
     3bc:	01 58 05             	add    DWORD PTR [eax+0x5],ebx
     3bf:	0b 00                	or     eax,DWORD PTR [eax]
     3c1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3c4:	ac                   	lods   al,BYTE PTR ds:[esi]
     3c5:	05 1a 00 02 04       	add    eax,0x402001a
     3ca:	01 58 05             	add    DWORD PTR [eax+0x5],ebx
     3cd:	11 00                	adc    DWORD PTR [eax],eax
     3cf:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3d2:	2e 05 12 00 02 04    	cs add eax,0x4020012
     3d8:	01 2f                	add    DWORD PTR [edi],ebp
     3da:	05 06 00 02 04       	add    eax,0x4020006
     3df:	01 08                	add    DWORD PTR [eax],ecx
     3e1:	9e                   	sahf   
     3e2:	05 09 67 05 0d       	add    eax,0xd056709
     3e7:	67 05 0b ac 05 11    	addr16 add eax,0x1105ac0b
     3ed:	58                   	pop    eax
     3ee:	05 07 3d 05 0b       	add    eax,0xb053d07
     3f3:	82 05 06 3d 05 0d d7 	add    BYTE PTR ds:0xd053d06,0xd7
     3fa:	05 02 3d 05 01       	add    eax,0x1053d02
     3ff:	32 05 09 08 3d 05    	xor    al,BYTE PTR ds:0x53d0809
     405:	0e                   	push   cs
     406:	78 05                	js     40d <sysEnter_Vector-0x12fbf3>
     408:	05 74 05 12 00       	add    eax,0x120574
     40d:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     410:	2f                   	das    
     411:	05 1b 00 02 04       	add    eax,0x402001b
     416:	03 d6                	add    edx,esi
     418:	05 16 00 02 04       	add    eax,0x4020016
     41d:	03 d6                	add    edx,esi
     41f:	05 0d 00 02 04       	add    eax,0x402000d
     424:	03 2e                	add    ebp,DWORD PTR [esi]
     426:	05 25 00 02 04       	add    eax,0x4020025
     42b:	03 65 05             	add    esp,DWORD PTR [ebp+0x5]
     42e:	18 00                	sbb    BYTE PTR [eax],al
     430:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     433:	4a                   	dec    edx
     434:	05 05 00 02 04       	add    eax,0x4020005
     439:	01 ac 05 0c 4e 05 01 	add    DWORD PTR [ebp+eax*1+0x1054e0c],ebp
     440:	3d 31 05 0c 08       	cmp    eax,0x80c0531
     445:	13 05 01 ad 02 02    	adc    eax,DWORD PTR ds:0x202ad01
     44b:	00 01                	add    BYTE PTR [ecx],al
     44d:	01 bf 00 00 00 03    	add    DWORD PTR [edi+0x3000000],edi
     453:	00 78 00             	add    BYTE PTR [eax+0x0],bh
     456:	00 00                	add    BYTE PTR [eax],al
     458:	01 01                	add    DWORD PTR [ecx],eax
     45a:	fb                   	sti    
     45b:	0e                   	push   cs
     45c:	0d 00 01 01 01       	or     eax,0x1010100
     461:	01 00                	add    DWORD PTR [eax],eax
     463:	00 00                	add    BYTE PTR [eax],al
     465:	01 00                	add    DWORD PTR [eax],eax
     467:	00 01                	add    BYTE PTR [ecx],al
     469:	73 72                	jae    4dd <sysEnter_Vector-0x12fb23>
     46b:	63 00                	arpl   WORD PTR [eax],ax
     46d:	2f                   	das    
     46e:	75 73                	jne    4e3 <sysEnter_Vector-0x12fb1d>
     470:	72 2f                	jb     4a1 <sysEnter_Vector-0x12fb5f>
     472:	6c                   	ins    BYTE PTR es:[edi],dx
     473:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     47a:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
     480:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
     487:	75 2f                	jne    4b8 <sysEnter_Vector-0x12fb48>
     489:	39 2f                	cmp    DWORD PTR [edi],ebp
     48b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     492:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     495:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     499:	65 00 00             	add    BYTE PTR gs:[eax],al
     49c:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     49f:	73 6f                	jae    510 <sysEnter_Vector-0x12faf0>
     4a1:	6c                   	ins    BYTE PTR es:[edi],dx
     4a2:	65 2e 63 00          	gs arpl WORD PTR cs:[eax],ax
     4a6:	01 00                	add    DWORD PTR [eax],eax
     4a8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     4ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     4b2:	63 
     4b3:	2e 68 00 02 00 00    	cs push 0x200
     4b9:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     4c0:	03 00                	add    eax,DWORD PTR [eax]
     4c2:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     4c5:	6d                   	ins    DWORD PTR es:[edi],dx
     4c6:	6d                   	ins    DWORD PTR es:[edi],dx
     4c7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     4c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     4c9:	2e 68 00 03 00 00    	cs push 0x300
     4cf:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
     4d5:	c8 04 00 9f          	enter  0x4,0x9f
     4d9:	03 0f                	add    ecx,DWORD PTR [edi]
     4db:	01 05 05 08 5c 08    	add    DWORD PTR ds:0x85c0805,eax
     4e1:	59                   	pop    ecx
     4e2:	08 21                	or     BYTE PTR [ecx],ah
     4e4:	08 2f                	or     BYTE PTR [edi],ch
     4e6:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     4e9:	21 08                	and    DWORD PTR [eax],ecx
     4eb:	2f                   	das    
     4ec:	08 5a 05             	or     BYTE PTR [edx+0x5],bl
     4ef:	01 08                	add    DWORD PTR [eax],ecx
     4f1:	59                   	pop    ecx
     4f2:	69 05 05 08 5b 08 59 	imul   eax,DWORD PTR ds:0x85b0805,0x55a0859
     4f9:	08 5a 05 
     4fc:	01 08                	add    DWORD PTR [eax],ecx
     4fe:	59                   	pop    ecx
     4ff:	69 05 05 08 5b 08 59 	imul   eax,DWORD PTR ds:0x85b0805,0x55a0859
     506:	08 5a 05 
     509:	01 08                	add    DWORD PTR [eax],ecx
     50b:	59                   	pop    ecx
     50c:	02 06                	add    al,BYTE PTR [esi]
     50e:	00 01                	add    BYTE PTR [ecx],al
     510:	01 b4 01 00 00 03 00 	add    DWORD PTR [ecx+eax*1+0x30000],esi
     517:	b9 00 00 00 01       	mov    ecx,0x1000000
     51c:	01 fb                	add    ebx,edi
     51e:	0e                   	push   cs
     51f:	0d 00 01 01 01       	or     eax,0x1010100
     524:	01 00                	add    DWORD PTR [eax],eax
     526:	00 00                	add    BYTE PTR [eax],al
     528:	01 00                	add    DWORD PTR [eax],eax
     52a:	00 01                	add    BYTE PTR [ecx],al
     52c:	73 72                	jae    5a0 <sysEnter_Vector-0x12fa60>
     52e:	63 00                	arpl   WORD PTR [eax],ax
     530:	2f                   	das    
     531:	75 73                	jne    5a6 <sysEnter_Vector-0x12fa5a>
     533:	72 2f                	jb     564 <sysEnter_Vector-0x12fa9c>
     535:	6c                   	ins    BYTE PTR es:[edi],dx
     536:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     53d:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
     543:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
     54a:	75 2f                	jne    57b <sysEnter_Vector-0x12fa85>
     54c:	39 2f                	cmp    DWORD PTR [edi],ebp
     54e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     555:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     558:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     55c:	65 2f                	gs das 
     55e:	2e 2e 2f             	cs cs das 
     561:	2e 2e 2f             	cs cs das 
     564:	2e 2e 2f             	cs cs das 
     567:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     56b:	6a 2f                	push   0x2f
     56d:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     570:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     577:	6e                   	outs   dx,BYTE PTR ds:[esi]
     578:	65 6c                	gs ins BYTE PTR es:[edi],dx
     57a:	2f                   	das    
     57b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     582:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     585:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     589:	65 00 00             	add    BYTE PTR gs:[eax],al
     58c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     58e:	76 69                	jbe    5f9 <sysEnter_Vector-0x12fa07>
     590:	72 6f                	jb     601 <sysEnter_Vector-0x12f9ff>
     592:	6e                   	outs   dx,BYTE PTR ds:[esi]
     593:	6d                   	ins    DWORD PTR es:[edi],dx
     594:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     596:	74 2e                	je     5c6 <sysEnter_Vector-0x12fa3a>
     598:	63 00                	arpl   WORD PTR [eax],ax
     59a:	01 00                	add    DWORD PTR [eax],eax
     59c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     59f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     5a6:	63 
     5a7:	2e 68 00 02 00 00    	cs push 0x200
     5ad:	73 74                	jae    623 <sysEnter_Vector-0x12f9dd>
     5af:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
     5b6:	02 
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	73 79                	jae    634 <sysEnter_Vector-0x12f9cc>
     5bb:	73 63                	jae    620 <sysEnter_Vector-0x12f9e0>
     5bd:	61                   	popa   
     5be:	6c                   	ins    BYTE PTR es:[edi],dx
     5bf:	6c                   	ins    BYTE PTR es:[edi],dx
     5c0:	73 2e                	jae    5f0 <sysEnter_Vector-0x12fa10>
     5c2:	68 00 03 00 00       	push   0x300
     5c7:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     5ca:	6d                   	ins    DWORD PTR es:[edi],dx
     5cb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5cc:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5cd:	2e 68 00 04 00 00    	cs push 0x400
     5d3:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
     5d9:	42                   	inc    edx
     5da:	06                   	push   es
     5db:	00 9f 03 09 01 05    	add    BYTE PTR [edi+0x5010903],bl
     5e1:	0e                   	push   cs
     5e2:	08 59 05             	or     BYTE PTR [ecx+0x5],bl
     5e5:	05 74 05 0d 2f       	add    eax,0x2f0d0574
     5ea:	05 21 d6 05 0d       	add    eax,0xd05d621
     5ef:	f2 05 0c 08 20 05    	repnz add eax,0x520080c
     5f5:	30 4c 05 1d          	xor    BYTE PTR [ebp+eax*1+0x1d],cl
     5f9:	f2 05 3a 08 4a 05    	repnz add eax,0x54a083a
     5ff:	0d 3c 05 17 08       	or     eax,0x817053c
     604:	13 05 1f 00 02 04    	adc    eax,DWORD PTR ds:0x402001f
     60a:	02 7e 05             	add    bh,BYTE PTR [esi+0x5]
     60d:	05 00 02 04 01       	add    eax,0x1040200
     612:	4a                   	dec    edx
     613:	05 0c 6c 05 01       	add    eax,0x1056c0c
     618:	59                   	pop    ecx
     619:	5b                   	pop    ebx
     61a:	05 0c 08 3d 05       	add    eax,0x53d080c
     61f:	01 08                	add    DWORD PTR [eax],ecx
     621:	13 31                	adc    esi,DWORD PTR [ecx]
     623:	05 0e 08 59 76       	add    eax,0x7659080e
     628:	05 05 74 05 18       	add    eax,0x18057405
     62d:	59                   	pop    ecx
     62e:	05 0c 08 20 05       	add    eax,0x520080c
     633:	32 84 05 1b 08 20 05 	xor    al,BYTE PTR [ebp+eax*1+0x520081b]
     63a:	11 3d 05 25 d6 05    	adc    DWORD PTR ds:0x5d62505,edi
     640:	11 f2                	adc    edx,esi
     642:	05 10 08 20 05       	add    eax,0x5200810
     647:	24 4c                	and    al,0x4c
     649:	05 11 f2 05 24       	add    eax,0x2405f211
     64e:	08 13                	or     BYTE PTR [ebx],dl
     650:	05 11 f2 05 24       	add    eax,0x2405f211
     655:	08 4b 05             	or     BYTE PTR [ebx+0x5],cl
     658:	11 f2                	adc    edx,esi
     65a:	08 13                	or     BYTE PTR [ebx],dl
     65c:	05 1f 00 02 04       	add    eax,0x402001f
     661:	02 03                	add    al,BYTE PTR [ebx]
     663:	77 58                	ja     6bd <sysEnter_Vector-0x12f943>
     665:	05 05 00 02 04       	add    eax,0x4020005
     66a:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
     66d:	0e                   	push   cs
     66e:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     671:	05 05 74 05 18       	add    eax,0x18057405
     676:	59                   	pop    ecx
     677:	05 0c 08 20 05       	add    eax,0x520080c
     67c:	32 84 05 18 90 05 32 	xor    al,BYTE PTR [ebp+eax*1+0x32059018]
     683:	f2 05 1d 2e 05 20    	repnz add eax,0x20052e1d
     689:	2f                   	das    
     68a:	05 0d f2 05 20       	add    eax,0x2005f20d
     68f:	08 13                	or     BYTE PTR [ebx],dl
     691:	05 0d f2 05 20       	add    eax,0x2005f20d
     696:	08 4b 05             	or     BYTE PTR [ebx+0x5],cl
     699:	0d f2 08 13 05       	or     eax,0x51308f2
     69e:	1f                   	pop    ds
     69f:	00 02                	add    BYTE PTR [edx],al
     6a1:	04 02                	add    al,0x2
     6a3:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     6a6:	05 05 00 02 04       	add    eax,0x4020005
     6ab:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
     6ae:	01 03                	add    DWORD PTR [ebx],eax
     6b0:	0b 9e 5b 05 13 08    	or     ebx,DWORD PTR [esi+0x813055b]
     6b6:	4b                   	dec    ebx
     6b7:	05 01 08 5a 5b       	add    eax,0x5b5a0801
     6bc:	05 0c 08 3d 05       	add    eax,0x53d080c
     6c1:	01 08                	add    DWORD PTR [eax],ecx
     6c3:	13 02                	adc    eax,DWORD PTR [edx]
     6c5:	02 00                	add    al,BYTE PTR [eax]
     6c7:	01 01                	add    DWORD PTR [ecx],eax
     6c9:	0f 03 00             	lsl    eax,WORD PTR [eax]
     6cc:	00 03                	add    BYTE PTR [ebx],al
     6ce:	00 bc 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bh
     6d5:	fb                   	sti    
     6d6:	0e                   	push   cs
     6d7:	0d 00 01 01 01       	or     eax,0x1010100
     6dc:	01 00                	add    DWORD PTR [eax],eax
     6de:	00 00                	add    BYTE PTR [eax],al
     6e0:	01 00                	add    DWORD PTR [eax],eax
     6e2:	00 01                	add    BYTE PTR [ecx],al
     6e4:	73 72                	jae    758 <sysEnter_Vector-0x12f8a8>
     6e6:	63 00                	arpl   WORD PTR [eax],ax
     6e8:	2f                   	das    
     6e9:	75 73                	jne    75e <sysEnter_Vector-0x12f8a2>
     6eb:	72 2f                	jb     71c <sysEnter_Vector-0x12f8e4>
     6ed:	6c                   	ins    BYTE PTR es:[edi],dx
     6ee:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     6f5:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
     6fb:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
     702:	75 2f                	jne    733 <sysEnter_Vector-0x12f8cd>
     704:	39 2f                	cmp    DWORD PTR [edi],ebp
     706:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     70d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     710:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     714:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     718:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     71c:	65 2f                	gs das 
     71e:	2e 2e 2f             	cs cs das 
     721:	2e 2e 2f             	cs cs das 
     724:	2e 2e 2f             	cs cs das 
     727:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     72b:	6a 2f                	push   0x2f
     72d:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     730:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     737:	6e                   	outs   dx,BYTE PTR ds:[esi]
     738:	65 6c                	gs ins BYTE PTR es:[edi],dx
     73a:	2f                   	das    
     73b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     742:	00 00                	add    BYTE PTR [eax],al
     744:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     74b:	01 00                	add    DWORD PTR [eax],eax
     74d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     750:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     757:	63 
     758:	2e 68 00 02 00 00    	cs push 0x200
     75e:	73 74                	jae    7d4 <sysEnter_Vector-0x12f82c>
     760:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
     767:	02 
     768:	00 00                	add    BYTE PTR [eax],al
     76a:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     771:	03 00                	add    eax,DWORD PTR [eax]
     773:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     776:	6d                   	ins    DWORD PTR es:[edi],dx
     777:	6d                   	ins    DWORD PTR es:[edi],dx
     778:	6f                   	outs   dx,DWORD PTR ds:[esi]
     779:	6e                   	outs   dx,BYTE PTR ds:[esi]
     77a:	2e 68 00 03 00 00    	cs push 0x300
     780:	73 79                	jae    7fb <sysEnter_Vector-0x12f805>
     782:	73 63                	jae    7e7 <sysEnter_Vector-0x12f819>
     784:	61                   	popa   
     785:	6c                   	ins    BYTE PTR es:[edi],dx
     786:	6c                   	ins    BYTE PTR es:[edi],dx
     787:	73 2e                	jae    7b7 <sysEnter_Vector-0x12f849>
     789:	68 00 04 00 00       	push   0x400
     78e:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
     794:	2d 09 00 9f 03       	sub    eax,0x39f0009
     799:	12 01                	adc    al,BYTE PTR [ecx]
     79b:	05 0c 08 4b 05       	add    eax,0x54b080c
     7a0:	01 08                	add    DWORD PTR [eax],ecx
     7a2:	a0 5a 05 0c 08       	mov    al,ds:0x80c055a
     7a7:	3d 05 01 08 3d       	cmp    eax,0x3d080105
     7ac:	31 05 13 08 4c 05    	xor    DWORD PTR ds:0x54c0813,eax
     7b2:	01 08                	add    DWORD PTR [eax],ecx
     7b4:	59                   	pop    ecx
     7b5:	5b                   	pop    ebx
     7b6:	05 0c 08 3d 05       	add    eax,0x53d080c
     7bb:	01 08                	add    DWORD PTR [eax],ecx
     7bd:	13 31                	adc    esi,DWORD PTR [ecx]
     7bf:	05 0b 08 59 05       	add    eax,0x559080b
     7c4:	09 2f                	or     DWORD PTR [edi],ebp
     7c6:	05 0c 08 d5 05       	add    eax,0x5d5080c
     7cb:	0b 82 05 05 4c 05    	or     eax,DWORD PTR [edx+0x54c0505]
     7d1:	01 08                	add    DWORD PTR [eax],ecx
     7d3:	3d 69 05 0b 08       	cmp    eax,0x80b0569
     7d8:	67 05 15 75 05 0c    	addr16 add eax,0xc057515
     7de:	08 58 05             	or     BYTE PTR [eax+0x5],bl
     7e1:	08 3d 05 10 67 05    	or     BYTE PTR ds:0x5671005,bh
     7e7:	15 75 05 08 82       	adc    eax,0x82080575
     7ec:	05 16 4c 05 15       	add    eax,0x15054c16
     7f1:	c8 05 11 84          	enter  0x1105,0x84
     7f5:	05 23 82 05 11       	add    eax,0x11058223
     7fa:	08 2e                	or     BYTE PTR [esi],ch
     7fc:	05 27 66 05 26       	add    eax,0x26056627
     801:	3c 05                	cmp    al,0x5
     803:	0c 2f                	or     al,0x2f
     805:	05 01 3d 77 05       	add    eax,0x5773d01
     80a:	05 08 4b 05 01       	add    eax,0x1054b08
     80f:	08 2f                	or     BYTE PTR [edi],ch
     811:	69 05 0c 08 3d 05 01 	imul   eax,DWORD PTR ds:0x53d080c,0x531d701
     818:	d7 31 05 
     81b:	0c 08                	or     al,0x8
     81d:	2f                   	das    
     81e:	05 01 08 d7 77       	add    eax,0x77d70801
     823:	05 0c 08 3d 05       	add    eax,0x53d080c
     828:	01 08                	add    DWORD PTR [eax],ecx
     82a:	3d 30 05 0c 08       	cmp    eax,0x80c0530
     82f:	2f                   	das    
     830:	05 01 08 d7 77       	add    eax,0x77d70801
     835:	05 0c 08 3d 05       	add    eax,0x53d080c
     83a:	01 08                	add    DWORD PTR [eax],ecx
     83c:	3d 31 05 0c 08       	cmp    eax,0x80c0531
     841:	4b                   	dec    ebx
     842:	05 01 08 75 5b       	add    eax,0x5b750801
     847:	05 0c 08 3d 05       	add    eax,0x53d080c
     84c:	01 08                	add    DWORD PTR [eax],ecx
     84e:	3d 30 05 0c 08       	cmp    eax,0x80c0530
     853:	4b                   	dec    ebx
     854:	05 01 08 67 5b       	add    eax,0x5b670801
     859:	05 0c 08 3d 05       	add    eax,0x53d080c
     85e:	01 08                	add    DWORD PTR [eax],ecx
     860:	13 31                	adc    esi,DWORD PTR [ecx]
     862:	05 0a 08 ad 05       	add    eax,0x5ad080a
     867:	09 68 77             	or     DWORD PTR [eax+0x77],ebp
     86a:	05 08 82 05 1d       	add    eax,0x1d058208
     86f:	4b                   	dec    ebx
     870:	05 1c f2 05 09       	add    eax,0x905f21c
     875:	83 05 08 82 05 19 4b 	add    DWORD PTR ds:0x19058208,0x4b
     87c:	05 18 f2 05 09       	add    eax,0x905f218
     881:	83 05 08 82 05 20 4b 	add    DWORD PTR ds:0x20058208,0x4b
     888:	05 1f f2 05 09       	add    eax,0x905f21f
     88d:	83 05 08 82 05 1d 4b 	add    DWORD PTR ds:0x1d058208,0x4b
     894:	05 1c f2 05 08       	add    eax,0x805f21c
     899:	87 05 09 67 05 1c    	xchg   DWORD PTR ds:0x1c056709,eax
     89f:	08 bc 05 1f 82 05 05 	or     BYTE PTR [ebp+eax*1+0x505821f],bh
     8a6:	3e 05 09 08 84 05    	ds add eax,0x5840809
     8ac:	08 08                	or     BYTE PTR [eax],cl
     8ae:	4a                   	dec    edx
     8af:	05 0d 4c 05 0c       	add    eax,0xc054c0d
     8b4:	66 05 0d 4c          	add    ax,0x4c0d
     8b8:	08 67 05             	or     BYTE PTR [edi+0x5],ah
     8bb:	09 08                	or     DWORD PTR [eax],ecx
     8bd:	4c                   	dec    esp
     8be:	05 0f 08 13 05       	add    eax,0x513080f
     8c3:	09 be 05 20 08 67    	or     DWORD PTR [esi+0x67082005],edi
     8c9:	05 0c ac 05 13       	add    eax,0x1305ac0c
     8ce:	4b                   	dec    ebx
     8cf:	05 12 08 e6 05       	add    eax,0x5e60812
     8d4:	0f 75 05 0d 5a 05 11 	pcmpeqw mm0,QWORD PTR ds:0x11055a0d
     8db:	08 67 05             	or     BYTE PTR [edi+0x5],ah
     8de:	10 08                	adc    BYTE PTR [eax],cl
     8e0:	9e                   	sahf   
     8e1:	05 11 4b 05 0d       	add    eax,0xd054b11
     8e6:	08 9f 05 15 08 67    	or     BYTE PTR [edi+0x67081505],bl
     8ec:	05 10 08 9f 05       	add    eax,0x59f0810
     8f1:	11 68 05             	adc    DWORD PTR [eax+0x5],ebp
     8f4:	17                   	pop    ss
     8f5:	08 67 05             	or     BYTE PTR [edi+0x5],ah
     8f8:	11 75 05             	adc    DWORD PTR [ebp+0x5],esi
     8fb:	13 30                	adc    esi,DWORD PTR [eax]
     8fd:	05 0f 03 73 08       	add    eax,0x873030f
     902:	3c 05                	cmp    al,0x5
     904:	0c 03                	or     al,0x3
     906:	10 9e 05 0d a0 08    	adc    BYTE PTR [esi+0x8a00d05],bl
     90c:	bb 08 9f 05 15       	mov    ebx,0x15059f08
     911:	08 67 05             	or     BYTE PTR [edi+0x5],ah
     914:	10 08                	adc    BYTE PTR [eax],cl
     916:	9f                   	lahf   
     917:	05 11 68 05 17       	add    eax,0x17056811
     91c:	08 67 05             	or     BYTE PTR [edi+0x5],ah
     91f:	0c 79                	or     al,0x79
     921:	05 01 3d 5b 05       	add    eax,0x55b3d01
     926:	0c 08                	or     al,0x8
     928:	4b                   	dec    ebx
     929:	05 01 08 2f 5b       	add    eax,0x5b2f0801
     92e:	05 0c 08 3d 05       	add    eax,0x53d080c
     933:	01 d7                	add    edi,edx
     935:	31 05 09 08 5a 05    	xor    DWORD PTR ds:0x55a0809,eax
     93b:	0c 75                	or     al,0x75
     93d:	05 0b 75 05 18       	add    eax,0x1805750b
     942:	75 05                	jne    949 <sysEnter_Vector-0x12f6b7>
     944:	0b 58 05             	or     ebx,DWORD PTR [eax+0x5]
     947:	0c 3d                	or     al,0x3d
     949:	05 16 83 05 09       	add    eax,0x9058316
     94e:	08 13                	or     BYTE PTR [ebx],dl
     950:	05 0c 76 05 0b       	add    eax,0xb05760c
     955:	08 30                	or     BYTE PTR [eax],dh
     957:	05 14 5a 05 0c       	add    eax,0xc055a14
     95c:	08 4a 05             	or     BYTE PTR [edx+0x5],cl
     95f:	16                   	push   ss
     960:	92                   	xchg   edx,eax
     961:	05 1d 82 05 2a       	add    eax,0x2a05821d
     966:	58                   	pop    eax
     967:	05 10 58 05 33       	add    eax,0x33055810
     96c:	4b                   	dec    ebx
     96d:	05 11 66 05 23       	add    eax,0x23056611
     972:	08 4b 05             	or     BYTE PTR [ebx+0x5],cl
     975:	1c 82                	sbb    al,0x82
     977:	05 2c 58 05 10       	add    eax,0x1005582c
     97c:	58                   	pop    eax
     97d:	05 39 4b 05 11       	add    eax,0x11054b39
     982:	82 05 2f 08 4b 05 0d 	add    BYTE PTR ds:0x54b082f,0xd
     989:	66 05 20 08          	add    ax,0x820
     98d:	4b                   	dec    ebx
     98e:	05 18 66 05 27       	add    eax,0x27056618
     993:	3d 05 0d 82 05       	cmp    eax,0x5820d05
     998:	0f 08                	invd   
     99a:	13 05 14 83 05 13    	adc    eax,DWORD PTR ds:0x13058314
     9a0:	67 05 0d 67 05 18    	addr16 add eax,0x1805670d
     9a6:	32 67 05             	xor    ah,BYTE PTR [edi+0x5]
     9a9:	0d 67 08 21 05       	or     eax,0x5210867
     9ae:	1b 03                	sbb    eax,DWORD PTR [ebx]
     9b0:	6b 08 66             	imul   ecx,DWORD PTR [eax],0x66
     9b3:	05 0b 08 74 05       	add    eax,0x574080b
     9b8:	01 03                	add    DWORD PTR [ebx],eax
     9ba:	19 9e 05 05 21 05    	sbb    DWORD PTR [esi+0x5210505],ebx
     9c0:	0c d7                	or     al,0xd7
     9c2:	05 01 3d 5b 05       	add    eax,0x55b3d01
     9c7:	0c 08                	or     al,0x8
     9c9:	3d 05 01 08 3d       	cmp    eax,0x3d080105
     9ce:	31 05 0c 08 4b 05    	xor    DWORD PTR ds:0x54b080c,eax
     9d4:	01 08                	add    DWORD PTR [eax],ecx
     9d6:	2f                   	das    
     9d7:	02 05 00 01 01 1c    	add    al,BYTE PTR ds:0x1c010100
     9dd:	01 00                	add    DWORD PTR [eax],eax
     9df:	00 03                	add    BYTE PTR [ebx],al
     9e1:	00 77 00             	add    BYTE PTR [edi+0x0],dh
     9e4:	00 00                	add    BYTE PTR [eax],al
     9e6:	01 01                	add    DWORD PTR [ecx],eax
     9e8:	fb                   	sti    
     9e9:	0e                   	push   cs
     9ea:	0d 00 01 01 01       	or     eax,0x1010100
     9ef:	01 00                	add    DWORD PTR [eax],eax
     9f1:	00 00                	add    BYTE PTR [eax],al
     9f3:	01 00                	add    DWORD PTR [eax],eax
     9f5:	00 01                	add    BYTE PTR [ecx],al
     9f7:	73 72                	jae    a6b <sysEnter_Vector-0x12f595>
     9f9:	63 2f                	arpl   WORD PTR [edi],bp
     9fb:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     a02:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a03:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a07:	65 2f                	gs das 
     a09:	2e 2e 2f             	cs cs das 
     a0c:	2e 2e 2f             	cs cs das 
     a0f:	2e 2e 2f             	cs cs das 
     a12:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     a16:	6a 2f                	push   0x2f
     a18:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     a1b:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     a22:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a23:	65 6c                	gs ins BYTE PTR es:[edi],dx
     a25:	2f                   	das    
     a26:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a2d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a30:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a34:	65 00 00             	add    BYTE PTR gs:[eax],al
     a37:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     a3e:	00 01                	add    BYTE PTR [ecx],al
     a40:	00 00                	add    BYTE PTR [eax],al
     a42:	73 79                	jae    abd <sysEnter_Vector-0x12f543>
     a44:	73 63                	jae    aa9 <sysEnter_Vector-0x12f557>
     a46:	61                   	popa   
     a47:	6c                   	ins    BYTE PTR es:[edi],dx
     a48:	6c                   	ins    BYTE PTR es:[edi],dx
     a49:	73 2e                	jae    a79 <sysEnter_Vector-0x12f587>
     a4b:	68 00 02 00 00       	push   0x200
     a50:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     a53:	6d                   	ins    DWORD PTR es:[edi],dx
     a54:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a55:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a56:	2e 68 00 03 00 00    	cs push 0x300
     a5c:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
     a62:	1c 12                	sbb    al,0x12
     a64:	00 9f 03 0f 01 05    	add    BYTE PTR [edi+0x5010f03],bl
     a6a:	05 08 21 05 01       	add    eax,0x1052108
     a6f:	08 3d 4d 05 0a 08    	or     BYTE PTR ds:0x80a054d,bh
     a75:	9f                   	lahf   
     a76:	05 0e 68 75 05       	add    eax,0x575680e
     a7b:	05 4b 05 01 08       	add    eax,0x801054b
     a80:	3d 79 05 09 08       	cmp    eax,0x8090579
     a85:	4e                   	dec    esi
     a86:	05 0c 08 3d 05       	add    eax,0x53d080c
     a8b:	14 67                	adc    al,0x67
     a8d:	05 09 67 9b 05       	add    eax,0x59b6709
     a92:	01 34 6a             	add    DWORD PTR [edx+ebp*2],esi
     a95:	05 09 08 4c 05       	add    eax,0x54c0809
     a9a:	14 77                	adc    al,0x77
     a9c:	05 11 4a 05 0c       	add    eax,0xc054a11
     aa1:	4a                   	dec    edx
     aa2:	05 08 3d 05 09       	add    eax,0x9053d08
     aa7:	68 05 14 00 02       	push   0x2001405
     aac:	04 01                	add    al,0x1
     aae:	08 67 05             	or     BYTE PTR [edi+0x5],ah
     ab1:	09 33                	or     DWORD PTR [ebx],esi
     ab3:	05 0c 08 3d 05       	add    eax,0x53d080c
     ab8:	1a 00                	sbb    al,BYTE PTR [eax]
     aba:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     abd:	66 05 13 68          	add    ax,0x6813
     ac1:	05 18 82 05 10       	add    eax,0x10058218
     ac6:	3d 05 11 68 05       	cmp    eax,0x5681105
     acb:	14 68                	adc    al,0x68
     acd:	05 17 76 05 13       	add    eax,0x13057617
     ad2:	ac                   	lods   al,BYTE PTR ds:[esi]
     ad3:	05 1a 58 05 15       	add    eax,0x1505581a
     ad8:	68 05 10 66 05       	push   0x5661005
     add:	21 00                	and    DWORD PTR [eax],eax
     adf:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     ae2:	58                   	pop    eax
     ae3:	05 18 68 05 0d       	add    eax,0xd056818
     ae8:	5b                   	pop    ebx
     ae9:	05 09 00 02 04       	add    eax,0x4020009
     aee:	01 03                	add    DWORD PTR [ebx],eax
     af0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     af1:	9e                   	sahf   
     af2:	05 01 03 17 2e       	add    eax,0x2e170301
     af7:	02 05 00 01 01 d6    	add    al,BYTE PTR ds:0xd6010100
     afd:	04 00                	add    al,0x0
     aff:	00 03                	add    BYTE PTR [ebx],al
     b01:	00 ce                	add    dh,cl
     b03:	00 00                	add    BYTE PTR [eax],al
     b05:	00 01                	add    BYTE PTR [ecx],al
     b07:	01 fb                	add    ebx,edi
     b09:	0e                   	push   cs
     b0a:	0d 00 01 01 01       	or     eax,0x1010100
     b0f:	01 00                	add    DWORD PTR [eax],eax
     b11:	00 00                	add    BYTE PTR [eax],al
     b13:	01 00                	add    DWORD PTR [eax],eax
     b15:	00 01                	add    BYTE PTR [ecx],al
     b17:	73 72                	jae    b8b <sysEnter_Vector-0x12f475>
     b19:	63 00                	arpl   WORD PTR [eax],ax
     b1b:	2f                   	das    
     b1c:	75 73                	jne    b91 <sysEnter_Vector-0x12f46f>
     b1e:	72 2f                	jb     b4f <sysEnter_Vector-0x12f4b1>
     b20:	6c                   	ins    BYTE PTR es:[edi],dx
     b21:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b28:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
     b2e:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
     b35:	75 2f                	jne    b66 <sysEnter_Vector-0x12f49a>
     b37:	39 2f                	cmp    DWORD PTR [edi],ebp
     b39:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b40:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b43:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b47:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     b4b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b4f:	65 2f                	gs das 
     b51:	2e 2e 2f             	cs cs das 
     b54:	2e 2e 2f             	cs cs das 
     b57:	2e 2e 2f             	cs cs das 
     b5a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     b5e:	6a 2f                	push   0x2f
     b60:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     b63:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     b6a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b6b:	65 6c                	gs ins BYTE PTR es:[edi],dx
     b6d:	2f                   	das    
     b6e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b75:	00 00                	add    BYTE PTR [eax],al
     b77:	6c                   	ins    BYTE PTR es:[edi],dx
     b78:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b7f:	4f                   	dec    edi
     b80:	53                   	push   ebx
     b81:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     b84:	01 00                	add    DWORD PTR [eax],eax
     b86:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b89:	64 61                	fs popa 
     b8b:	72 67                	jb     bf4 <sysEnter_Vector-0x12f40c>
     b8d:	2e 68 00 02 00 00    	cs push 0x200
     b93:	73 74                	jae    c09 <sysEnter_Vector-0x12f3f7>
     b95:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b9c:	63 
     b9d:	2e 68 00 02 00 00    	cs push 0x200
     ba3:	73 74                	jae    c19 <sysEnter_Vector-0x12f3e7>
     ba5:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
     bac:	02 
     bad:	00 00                	add    BYTE PTR [eax],al
     baf:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     bb2:	6d                   	ins    DWORD PTR es:[edi],dx
     bb3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bb4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bb5:	2e 68 00 03 00 00    	cs push 0x300
     bbb:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     bc2:	03 00                	add    eax,DWORD PTR [eax]
     bc4:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
     bc7:	73 63                	jae    c2c <sysEnter_Vector-0x12f3d4>
     bc9:	61                   	popa   
     bca:	6c                   	ins    BYTE PTR es:[edi],dx
     bcb:	6c                   	ins    BYTE PTR es:[edi],dx
     bcc:	73 2e                	jae    bfc <sysEnter_Vector-0x12f404>
     bce:	68 00 04 00 00       	push   0x400
     bd3:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
     bd9:	95                   	xchg   ebp,eax
     bda:	13 00                	adc    eax,DWORD PTR [eax]
     bdc:	9f                   	lahf   
     bdd:	03 11                	add    edx,DWORD PTR [ecx]
     bdf:	01 05 09 08 59 05    	add    DWORD PTR ds:0x5590809,eax
     be5:	05 75 05 0c 08       	add    eax,0x80c0575
     bea:	67 05 01 3d 77 05    	addr16 add eax,0x5773d01
     bf0:	09 08                	or     DWORD PTR [eax],ecx
     bf2:	59                   	pop    ecx
     bf3:	05 05 75 05 0c       	add    eax,0xc057505
     bf8:	08 83 05 01 3d 77    	or     BYTE PTR [ebx+0x773d0105],al
     bfe:	05 09 08 59 05       	add    eax,0x5590809
     c03:	05 75 05 0c 08       	add    eax,0x80c0575
     c08:	9f                   	lahf   
     c09:	05 01 3d 77 05       	add    eax,0x5773d01
     c0e:	09 08                	or     DWORD PTR [eax],ecx
     c10:	59                   	pop    ecx
     c11:	05 05 75 05 0c       	add    eax,0xc057505
     c16:	08 bb 05 01 3d 77    	or     BYTE PTR [ebx+0x773d0105],bh
     c1c:	05 09 08 59 05       	add    eax,0x5590809
     c21:	05 75 05 0c 08       	add    eax,0x80c0575
     c26:	d7                   	xlat   BYTE PTR ds:[ebx]
     c27:	05 01 3d 77 05       	add    eax,0x5773d01
     c2c:	05 08 59 05 09       	add    eax,0x9055908
     c31:	08 67 05             	or     BYTE PTR [edi+0x5],ah
     c34:	08 9e 05 09 4c 05    	or     BYTE PTR [esi+0x54c0905],bl
     c3a:	1a 59 05             	sbb    bl,BYTE PTR [ecx+0x5]
     c3d:	09 bd c9 c9 05 19    	or     DWORD PTR [ebp+0x1905c9c9],edi
     c43:	08 67 05             	or     BYTE PTR [edi+0x5],ah
     c46:	17                   	pop    ss
     c47:	75 05                	jne    c4e <sysEnter_Vector-0x12f3b2>
     c49:	15 f2 05 09 83       	adc    eax,0x830905f2
     c4e:	05 01 08 6a 05       	add    eax,0x56a0801
     c53:	09 2d 05 01 08 21    	or     DWORD PTR ds:0x21080105,ebp
     c59:	69 05 05 08 59 59 05 	imul   eax,DWORD PTR ds:0x59590805,0x77590105
     c60:	01 59 77 
     c63:	05 05 08 5a 05       	add    eax,0x55a0805
     c68:	10 68 05             	adc    BYTE PTR [eax+0x5],ch
     c6b:	05 08 c9 05 0c       	add    eax,0xc05c908
     c70:	08 83 05 01 59 5b    	or     BYTE PTR [ebx+0x5b590105],al
     c76:	05 05 08 5a 05       	add    eax,0x55a0805
     c7b:	10 68 05             	adc    BYTE PTR [eax+0x5],ch
     c7e:	0c 08                	or     al,0x8
     c80:	c9                   	leave  
     c81:	05 01 08 83 5b       	add    eax,0x5b830801
     c86:	05 05 08 5a 05       	add    eax,0x55a0805
     c8b:	10 68 05             	adc    BYTE PTR [eax+0x5],ch
     c8e:	0c 08                	or     al,0x8
     c90:	c9                   	leave  
     c91:	05 01 08 83 5b       	add    eax,0x5b830801
     c96:	05 05 08 3e 67       	add    eax,0x673e0805
     c9b:	05 0c 08 67 05       	add    eax,0x567080c
     ca0:	01 59 31             	add    DWORD PTR [ecx+0x31],ebx
     ca3:	05 05 08 3e 68       	add    eax,0x683e0805
     ca8:	05 0c 08 91 05       	add    eax,0x591080c
     cad:	01 5a 31             	add    DWORD PTR [edx+0x31],ebx
     cb0:	05 05 08 3e 68       	add    eax,0x683e0805
     cb5:	05 0c 08 91 05       	add    eax,0x591080c
     cba:	01 5a 31             	add    DWORD PTR [edx+0x31],ebx
     cbd:	05 10 08 59 05       	add    eax,0x5590810
     cc2:	11 90 05 09 ba 05    	adc    DWORD PTR [eax+0x5ba0905],edx
     cc8:	0c 3d                	or     al,0x3d
     cca:	05 01 02 57 13       	add    eax,0x13570201
     ccf:	77 05                	ja     cd6 <sysEnter_Vector-0x12f32a>
     cd1:	0c 08                	or     al,0x8
     cd3:	59                   	pop    ecx
     cd4:	05 01 02 57 13       	add    eax,0x13570201
     cd9:	77 05                	ja     ce0 <sysEnter_Vector-0x12f320>
     cdb:	0c 08                	or     al,0x8
     cdd:	59                   	pop    ecx
     cde:	05 01 02 57 14       	add    eax,0x14570201
     ce3:	77 05                	ja     cea <sysEnter_Vector-0x12f316>
     ce5:	05 08 13 05 01       	add    eax,0x1051308
     cea:	c9                   	leave  
     ceb:	3f                   	aas    
     cec:	05 05 08 13 05       	add    eax,0x5130805
     cf1:	01 08                	add    DWORD PTR [eax],ecx
     cf3:	83 3f 05             	cmp    DWORD PTR [edi],0x5
     cf6:	0e                   	push   cs
     cf7:	08 3d 05 0c 76 05    	or     BYTE PTR ds:0x5760c05,bh
     cfd:	01 a1 31 05 09 08    	add    DWORD PTR [ecx+0x8090531],esp
     d03:	3d 05 05 75 05       	cmp    eax,0x5750505
     d08:	0b 08                	or     ecx,DWORD PTR [eax]
     d0a:	67 05 0c 08 83 05    	addr16 add eax,0x583080c
     d10:	01 3d 31 05 09 08    	add    DWORD PTR ds:0x8090531,edi
     d16:	59                   	pop    ecx
     d17:	05 10 74 05 0b       	add    eax,0xb057410
     d1c:	76 05                	jbe    d23 <sysEnter_Vector-0x12f2dd>
     d1e:	1b 66 05             	sbb    esp,DWORD PTR [esi+0x5]
     d21:	0d 68 05 12 08       	or     eax,0x8120568
     d26:	31 05 0c 08 75 05    	xor    DWORD PTR ds:0x575080c,eax
     d2c:	10 68 05             	adc    BYTE PTR [eax+0x5],ch
     d2f:	11 67 05             	adc    DWORD PTR [edi+0x5],esp
     d32:	31 02                	xor    DWORD PTR [edx],eax
     d34:	22 14 05 11 66 05 0d 	and    dl,BYTE PTR [eax*1+0xd056611]
     d3b:	08 22                	or     BYTE PTR [edx],ah
     d3d:	05 16 4c 05 05       	add    eax,0x5054c16
     d42:	90                   	nop
     d43:	05 1b 4c 05 0a       	add    eax,0xa054c1b
     d48:	66 05 09 e5          	add    ax,0xe509
     d4c:	05 0d 91 05 0e       	add    eax,0xe05910d
     d51:	67 05 05 74 05 1e    	addr16 add eax,0x1e057405
     d57:	5a                   	pop    edx
     d58:	05 0d 3c 05 1e       	add    eax,0x1e053c0d
     d5d:	e4 05                	in     al,0x5
     d5f:	12 58 2f             	adc    bl,BYTE PTR [eax+0x2f]
     d62:	05 0c 08 75 05       	add    eax,0x575080c
     d67:	35 67 05 0d 66       	xor    eax,0x660d0567
     d6c:	05 1a 2e 05 0d       	add    eax,0xd052e1a
     d71:	e4 08                	in     al,0x8
     d73:	3e 05 1a d6 05 0d    	ds add eax,0xd05d61a
     d79:	e4 05                	in     al,0x5
     d7b:	16                   	push   ss
     d7c:	00 02                	add    BYTE PTR [edx],al
     d7e:	04 02                	add    al,0x2
     d80:	08 21                	or     BYTE PTR [ecx],ah
     d82:	05 09 00 02 04       	add    eax,0x4020009
     d87:	02 e4                	add    ah,ah
     d89:	05 1e 00 02 04       	add    eax,0x402001e
     d8e:	02 d7                	add    dl,bh
     d90:	05 15 00 02 04       	add    eax,0x4020015
     d95:	02 90 05 10 00 02    	add    dl,BYTE PTR [eax+0x2001005]
     d9b:	04 02                	add    al,0x2
     d9d:	3d 05 21 00 02       	cmp    eax,0x2002105
     da2:	04 02                	add    al,0x2
     da4:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     da7:	05 05 00 02 04       	add    eax,0x4020005
     dac:	01 4a 03             	add    DWORD PTR [edx+0x3],ecx
     daf:	0c ba                	or     al,0xba
     db1:	05 0b 08 91 05       	add    eax,0x591080b
     db6:	0c 08                	or     al,0x8
     db8:	b0 05                	mov    al,0x5
     dba:	01 3f                	add    DWORD PTR [edi],edi
     dbc:	5b                   	pop    ebx
     dbd:	05 09 08 3d 05       	add    eax,0x53d0809
     dc2:	05 75 05 0b 08       	add    eax,0x80b0575
     dc7:	67 05 0c 08 ad 05    	addr16 add eax,0x5ad080c
     dcd:	01 3d 31 05 0c 08    	add    DWORD PTR ds:0x80c0531,edi
     dd3:	13 05 01 c9 32 05    	adc    eax,DWORD PTR ds:0x532c901
     dd9:	05 08 13 05 01       	add    eax,0x1051308
     dde:	f3 3f                	repz aas 
     de0:	05 13 08 13 05       	add    eax,0x5130813
     de5:	01 08                	add    DWORD PTR [eax],ecx
     de7:	13 31                	adc    esi,DWORD PTR [ecx]
     de9:	05 2e 08 3f 05       	add    eax,0x53f082e
     dee:	0c 75                	or     al,0x75
     df0:	76 05                	jbe    df7 <sysEnter_Vector-0x12f209>
     df2:	05 66 05 1d 59       	add    eax,0x591d0566
     df7:	05 0b 66 05 09       	add    eax,0x905660b
     dfc:	67 05 11 08 f4 05    	addr16 add eax,0x5f40811
     e02:	10 d6                	adc    dh,dl
     e04:	86 05 17 67 05 1f    	xchg   BYTE PTR ds:0x1f056717,al
     e0a:	75 05                	jne    e11 <sysEnter_Vector-0x12f1ef>
     e0c:	11 91 05 13 5a 05    	adc    DWORD PTR [ecx+0x55a1305],edx
     e12:	1b 75 05             	sbb    esi,DWORD PTR [ebp+0x5]
     e15:	0d 67 05 10 31       	or     eax,0x31100567
     e1a:	05 14 67 05 1a       	add    eax,0x1a056714
     e1f:	67 05 15 90 05 1e    	addr16 add eax,0x1e059015
     e25:	ba 05 17 59 05       	mov    edx,0x5591705
     e2a:	0d 76 05 11 31       	or     eax,0x31110576
     e2f:	05 10 d6 05 14       	add    eax,0x1405d610
     e34:	4b                   	dec    ebx
     e35:	05 1a 67 05 15       	add    eax,0x1505671a
     e3a:	90                   	nop
     e3b:	05 1e ba 05 17       	add    eax,0x1705ba1e
     e40:	59                   	pop    ecx
     e41:	05 0d 76 05 11       	add    eax,0x1105760d
     e46:	03 66 2e             	add    esp,DWORD PTR [esi+0x2e]
     e49:	05 0d 03 12 3c       	add    eax,0x3c12030d
     e4e:	44                   	inc    esp
     e4f:	05 37 00 02 04       	add    eax,0x4020037
     e54:	02 03                	add    al,BYTE PTR [ebx]
     e56:	61                   	popa   
     e57:	20 05 05 00 02 04    	and    BYTE PTR ds:0x4020005,al
     e5d:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
     e60:	2a 00                	sub    al,BYTE PTR [eax]
     e62:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     e65:	82 05 27 00 02 04 03 	add    BYTE PTR ds:0x4020027,0x3
     e6c:	66 05 08 03          	add    ax,0x308
     e70:	23 82 05 17 00 02    	and    eax,DWORD PTR [edx+0x2001705]
     e76:	04 01                	add    al,0x1
     e78:	66 05 12 83          	add    ax,0x8312
     e7c:	05 0d 90 05 16       	add    eax,0x1605900d
     e81:	ba 05 0c 5a 05       	mov    edx,0x55a0c05
     e86:	01 3d 31 05 0c 08    	add    DWORD PTR ds:0x80c0531,edi
     e8c:	13 05 01 08 13 31    	adc    eax,DWORD PTR ds:0x31130801
     e92:	05 0b 08 93 05       	add    eax,0x593080b
     e97:	1a 90 05 2d 90 05    	sbb    dl,BYTE PTR [eax+0x5902d05]
     e9d:	0a 91 05 0b 91 05    	or     dl,BYTE PTR [ecx+0x5910b05]
     ea3:	05 92 08 91 05       	add    eax,0x5910892
     ea8:	14 08                	adc    al,0x8
     eaa:	23 05 12 08 bb 05    	and    eax,DWORD PTR ds:0x5bb0812
     eb0:	0c 08                	or     al,0x8
     eb2:	75 05                	jne    eb9 <sysEnter_Vector-0x12f147>
     eb4:	19 00                	sbb    DWORD PTR [eax],eax
     eb6:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     eb9:	66 05 13 84          	add    ax,0x8413
     ebd:	05 18 67 05 23       	add    eax,0x23056718
     ec2:	08 f3                	or     bl,dh
     ec4:	05 10 82 05 1a       	add    eax,0x1a058210
     ec9:	59                   	pop    ecx
     eca:	84 05 0e 4c 05 0c    	test   BYTE PTR ds:0xc054c0e,al
     ed0:	c9                   	leave  
     ed1:	05 1c 00 02 04       	add    eax,0x402001c
     ed6:	01 66 05             	add    DWORD PTR [esi+0x5],esp
     ed9:	19 00                	sbb    DWORD PTR [eax],eax
     edb:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     ede:	66 05 15 4b          	add    ax,0x4b15
     ee2:	05 05 4c 05 1d       	add    eax,0x1d054c05
     ee7:	00 02                	add    BYTE PTR [edx],al
     ee9:	04 01                	add    al,0x1
     eeb:	66 05 1a 00          	add    ax,0x1a
     eef:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     ef2:	66 05 13 84          	add    ax,0x8413
     ef6:	05 18 58 05 27       	add    eax,0x27055818
     efb:	90                   	nop
     efc:	05 2c 58 05 0a       	add    eax,0xa05582c
     f01:	3c 05                	cmp    al,0x5
     f03:	14 08                	adc    al,0x8
     f05:	13 05 09 58 05 0d    	adc    eax,DWORD PTR ds:0xd055809
     f0b:	67 05 0e 91 05 05    	addr16 add eax,0x505910e
     f11:	74 05                	je     f18 <sysEnter_Vector-0x12f0e8>
     f13:	1e                   	push   ds
     f14:	5a                   	pop    edx
     f15:	05 0d 3c 05 1e       	add    eax,0x1e053c0d
     f1a:	e4 05                	in     al,0x5
     f1c:	12 58 05             	adc    bl,BYTE PTR [eax+0x5]
     f1f:	14 2f                	adc    al,0x2f
     f21:	05 0c 08 bb 05       	add    eax,0x5bb080c
     f26:	16                   	push   ss
     f27:	00 02                	add    BYTE PTR [edx],al
     f29:	04 01                	add    al,0x1
     f2b:	66 05 13 84          	add    ax,0x8413
     f2f:	05 18 67 05 23       	add    eax,0x23056718
     f34:	08 f3                	or     bl,dh
     f36:	05 10 82 05 1a       	add    eax,0x1a058210
     f3b:	59                   	pop    ecx
     f3c:	05 09 62 05 37       	add    eax,0x37056209
     f41:	5f                   	pop    edi
     f42:	05 44 66 05 11       	add    eax,0x11056644
     f47:	3c 05                	cmp    al,0x5
     f49:	2c 2e                	sub    al,0x2e
     f4b:	05 1e 66 05 11       	add    eax,0x1105661e
     f50:	e4 05                	in     al,0x5
     f52:	09 03                	or     DWORD PTR [ebx],eax
     f54:	79 f2                	jns    f48 <sysEnter_Vector-0x12f0b8>
     f56:	05 16 03 0c 58       	add    eax,0x580c0316
     f5b:	05 10 08 75 05       	add    eax,0x5750810
     f60:	39 67 05             	cmp    DWORD PTR [edi+0x5],esp
     f63:	11 66 05             	adc    DWORD PTR [esi+0x5],esp
     f66:	1e                   	push   ds
     f67:	2e 05 11 e4 08 3e    	cs add eax,0x3e08e411
     f6d:	05 1e d6 05 11       	add    eax,0x1105d61e
     f72:	e4 05                	in     al,0x5
     f74:	1a 08                	sbb    cl,BYTE PTR [eax]
     f76:	21 05 0d e4 05 1e    	and    DWORD PTR ds:0x1e05e40d,eax
     f7c:	00 02                	add    BYTE PTR [edx],al
     f7e:	04 02                	add    al,0x2
     f80:	d8 05 15 00 02 04    	fadd   DWORD PTR ds:0x4020015
     f86:	02 90 05 10 00 02    	add    dl,BYTE PTR [eax+0x2001005]
     f8c:	04 02                	add    al,0x2
     f8e:	3d 05 22 00 02       	cmp    eax,0x2002205
     f93:	04 02                	add    al,0x2
     f95:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     f98:	05 18 00 02 04       	add    eax,0x4020018
     f9d:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
     fa0:	05 00 02 04 01       	add    eax,0x1040200
     fa5:	58                   	pop    eax
     fa6:	05 0c 03 1b 90       	add    eax,0x901b030c
     fab:	05 01 3d 77 05       	add    eax,0x5773d01
     fb0:	0c 08                	or     al,0x8
     fb2:	3d 05 01 08 13       	cmp    eax,0x13080105
     fb7:	31 05 0c 08 13 05    	xor    DWORD PTR ds:0x513080c,eax
     fbd:	01 08                	add    DWORD PTR [eax],ecx
     fbf:	3d 31 05 05 08       	cmp    eax,0x8050531
     fc4:	13 05 01 c9 3f 05    	adc    eax,DWORD PTR ds:0x53fc901
     fca:	0c 08                	or     al,0x8
     fcc:	13 05 01 08 13 02    	adc    eax,DWORD PTR ds:0x2130801
     fd2:	02 00                	add    al,BYTE PTR [eax]
     fd4:	01 01                	add    DWORD PTR [ecx],eax
     fd6:	f0 00 00             	lock add BYTE PTR [eax],al
     fd9:	00 03                	add    BYTE PTR [ebx],al
     fdb:	00 c1                	add    cl,al
     fdd:	00 00                	add    BYTE PTR [eax],al
     fdf:	00 01                	add    BYTE PTR [ecx],al
     fe1:	01 fb                	add    ebx,edi
     fe3:	0e                   	push   cs
     fe4:	0d 00 01 01 01       	or     eax,0x1010100
     fe9:	01 00                	add    DWORD PTR [eax],eax
     feb:	00 00                	add    BYTE PTR [eax],al
     fed:	01 00                	add    DWORD PTR [eax],eax
     fef:	00 01                	add    BYTE PTR [ecx],al
     ff1:	73 72                	jae    1065 <sysEnter_Vector-0x12ef9b>
     ff3:	63 00                	arpl   WORD PTR [eax],ax
     ff5:	2f                   	das    
     ff6:	75 73                	jne    106b <sysEnter_Vector-0x12ef95>
     ff8:	72 2f                	jb     1029 <sysEnter_Vector-0x12efd7>
     ffa:	6c                   	ins    BYTE PTR es:[edi],dx
     ffb:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1002:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    1008:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    100f:	75 2f                	jne    1040 <sysEnter_Vector-0x12efc0>
    1011:	39 2f                	cmp    DWORD PTR [edi],ebp
    1013:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    101a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    101d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1021:	65 2f                	gs das 
    1023:	2e 2e 2f             	cs cs das 
    1026:	2e 2e 2f             	cs cs das 
    1029:	2e 2e 2f             	cs cs das 
    102c:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1030:	6a 2f                	push   0x2f
    1032:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1035:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    103c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    103d:	65 6c                	gs ins BYTE PTR es:[edi],dx
    103f:	2f                   	das    
    1040:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1047:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    104a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    104e:	65 00 00             	add    BYTE PTR gs:[eax],al
    1051:	6c                   	ins    BYTE PTR es:[edi],dx
    1052:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
    1059:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    105c:	01 00                	add    DWORD PTR [eax],eax
    105e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1061:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1068:	63 
    1069:	2e 68 00 02 00 00    	cs push 0x200
    106f:	73 74                	jae    10e5 <sysEnter_Vector-0x12ef1b>
    1071:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
    1078:	02 
    1079:	00 00                	add    BYTE PTR [eax],al
    107b:	73 79                	jae    10f6 <sysEnter_Vector-0x12ef0a>
    107d:	73 63                	jae    10e2 <sysEnter_Vector-0x12ef1e>
    107f:	61                   	popa   
    1080:	6c                   	ins    BYTE PTR es:[edi],dx
    1081:	6c                   	ins    BYTE PTR es:[edi],dx
    1082:	73 2e                	jae    10b2 <sysEnter_Vector-0x12ef4e>
    1084:	68 00 03 00 00       	push   0x300
    1089:	74 79                	je     1104 <sysEnter_Vector-0x12eefc>
    108b:	70 65                	jo     10f2 <sysEnter_Vector-0x12ef0e>
    108d:	73 2e                	jae    10bd <sysEnter_Vector-0x12ef43>
    108f:	68 00 04 00 00       	push   0x400
    1094:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1097:	6d                   	ins    DWORD PTR es:[edi],dx
    1098:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1099:	6e                   	outs   dx,BYTE PTR ds:[esi]
    109a:	2e 68 00 04 00 00    	cs push 0x400
    10a0:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    10a6:	67 21 00             	and    DWORD PTR [bx+si],eax
    10a9:	9f                   	lahf   
    10aa:	03 0d 01 05 11 08    	add    ecx,DWORD PTR ds:0x8110501
    10b0:	4c                   	dec    esp
    10b1:	05 10 ad 05 11       	add    eax,0x1105ad10
    10b6:	bb 05 12 bb 05       	mov    ebx,0x5bb1205
    10bb:	0f bb 05 13 bb bc 05 	btc    DWORD PTR ds:0x5bcbb13,eax
    10c2:	01 08                	add    DWORD PTR [eax],ecx
    10c4:	59                   	pop    ecx
    10c5:	02 05 00 01 01 24    	add    al,BYTE PTR ds:0x24010100
    10cb:	03 00                	add    eax,DWORD PTR [eax]
    10cd:	00 03                	add    BYTE PTR [ebx],al
    10cf:	00 c0                	add    al,al
    10d1:	00 00                	add    BYTE PTR [eax],al
    10d3:	00 01                	add    BYTE PTR [ecx],al
    10d5:	01 fb                	add    ebx,edi
    10d7:	0e                   	push   cs
    10d8:	0d 00 01 01 01       	or     eax,0x1010100
    10dd:	01 00                	add    DWORD PTR [eax],eax
    10df:	00 00                	add    BYTE PTR [eax],al
    10e1:	01 00                	add    DWORD PTR [eax],eax
    10e3:	00 01                	add    BYTE PTR [ecx],al
    10e5:	73 72                	jae    1159 <sysEnter_Vector-0x12eea7>
    10e7:	63 00                	arpl   WORD PTR [eax],ax
    10e9:	2f                   	das    
    10ea:	75 73                	jne    115f <sysEnter_Vector-0x12eea1>
    10ec:	72 2f                	jb     111d <sysEnter_Vector-0x12eee3>
    10ee:	6c                   	ins    BYTE PTR es:[edi],dx
    10ef:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    10f6:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    10fc:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    1103:	75 2f                	jne    1134 <sysEnter_Vector-0x12eecc>
    1105:	39 2f                	cmp    DWORD PTR [edi],ebp
    1107:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    110e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1111:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1115:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
    1119:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    111d:	65 2f                	gs das 
    111f:	2e 2e 2f             	cs cs das 
    1122:	2e 2e 2f             	cs cs das 
    1125:	2e 2e 2f             	cs cs das 
    1128:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    112c:	6a 2f                	push   0x2f
    112e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1131:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1138:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1139:	65 6c                	gs ins BYTE PTR es:[edi],dx
    113b:	2f                   	das    
    113c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1143:	00 00                	add    BYTE PTR [eax],al
    1145:	6d                   	ins    DWORD PTR es:[edi],dx
    1146:	61                   	popa   
    1147:	6c                   	ins    BYTE PTR es:[edi],dx
    1148:	6c                   	ins    BYTE PTR es:[edi],dx
    1149:	6f                   	outs   dx,DWORD PTR ds:[esi]
    114a:	63 2e                	arpl   WORD PTR [esi],bp
    114c:	63 00                	arpl   WORD PTR [eax],ax
    114e:	01 00                	add    DWORD PTR [eax],eax
    1150:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1153:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    115a:	63 
    115b:	2e 68 00 02 00 00    	cs push 0x200
    1161:	73 74                	jae    11d7 <sysEnter_Vector-0x12ee29>
    1163:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
    116a:	02 
    116b:	00 00                	add    BYTE PTR [eax],al
    116d:	6d                   	ins    DWORD PTR es:[edi],dx
    116e:	61                   	popa   
    116f:	6c                   	ins    BYTE PTR es:[edi],dx
    1170:	6c                   	ins    BYTE PTR es:[edi],dx
    1171:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1172:	63 2e                	arpl   WORD PTR [esi],bp
    1174:	68 00 03 00 00       	push   0x300
    1179:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    117c:	6d                   	ins    DWORD PTR es:[edi],dx
    117d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    117e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    117f:	2e 68 00 03 00 00    	cs push 0x300
    1185:	73 79                	jae    1200 <sysEnter_Vector-0x12ee00>
    1187:	73 63                	jae    11ec <sysEnter_Vector-0x12ee14>
    1189:	61                   	popa   
    118a:	6c                   	ins    BYTE PTR es:[edi],dx
    118b:	6c                   	ins    BYTE PTR es:[edi],dx
    118c:	73 2e                	jae    11bc <sysEnter_Vector-0x12ee44>
    118e:	68 00 04 00 00       	push   0x400
    1193:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    1199:	de 21                	fisub  WORD PTR [ecx]
    119b:	00 9f 03 15 01 05    	add    BYTE PTR [edi+0x5011503],bl
    11a1:	05 08 59 05 0d       	add    eax,0xd055908
    11a6:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    11a9:	bb 05 0c bb 05       	mov    ebx,0x5bb0c05
    11ae:	01 bc 69 05 0e 08 3f 	add    DWORD PTR [ecx+ebp*2+0x3f080e05],edi
    11b5:	05 11 92 05 1a       	add    eax,0x1a059211
    11ba:	c8 05 08 82          	enter  0x805,0x82
    11be:	05 11 4d 05 0c       	add    eax,0xc054d11
    11c3:	08 67 05             	or     BYTE PTR [edi+0x5],ah
    11c6:	23 00                	and    eax,DWORD PTR [eax]
    11c8:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11cb:	66 05 19 00          	add    ax,0x19
    11cf:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11d2:	82 05 13 4c 05 0c f5 	add    BYTE PTR ds:0xc054c13,0xf5
    11d9:	05 14 91 76 05       	add    eax,0x5769114
    11de:	10 5b 05             	adc    BYTE PTR [ebx+0x5],bl
    11e1:	01 59 31             	add    DWORD PTR [ecx+0x31],ebx
    11e4:	05 09 08 4d 05       	add    eax,0x54d0809
    11e9:	1c 3c                	sbb    al,0x3c
    11eb:	05 08 82 05 2a       	add    eax,0x2a058208
    11f0:	00 02                	add    BYTE PTR [edx],al
    11f2:	04 01                	add    al,0x1
    11f4:	4a                   	dec    edx
    11f5:	05 3d 00 02 04       	add    eax,0x402003d
    11fa:	01 3c 05 27 00 02 04 	add    DWORD PTR [eax*1+0x4020027],edi
    1201:	01 82 05 08 4d 05    	add    DWORD PTR [edx+0x54d0805],eax
    1207:	05 68 05 0b 93       	add    eax,0x930b0568
    120c:	05 08 58 05 09       	add    eax,0x9055808
    1211:	84 08                	test   BYTE PTR [eax],cl
    1213:	3d 05 0e 30 05       	cmp    eax,0x5300e05
    1218:	09 03                	or     DWORD PTR [ebx],eax
    121a:	74 90                	je     11ac <sysEnter_Vector-0x12ee54>
    121c:	3f                   	aas    
    121d:	05 01 03 0e 20       	add    eax,0x200e0301
    1222:	5b                   	pop    ebx
    1223:	05 18 08 3d 05       	add    eax,0x53d0818
    1228:	10 82 05 15 3f 05    	adc    BYTE PTR [edx+0x53f1505],al
    122e:	0d 74 05 0c 3c       	or     eax,0x3c0c0574
    1233:	05 27 00 02 04       	add    eax,0x4020027
    1238:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
    123b:	1d 00 02 04 01       	sbb    eax,0x1040200
    1240:	66 05 3d 00          	add    ax,0x3d
    1244:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1247:	58                   	pop    eax
    1248:	05 33 00 02 04       	add    eax,0x4020033
    124d:	02 58 05             	add    bl,BYTE PTR [eax+0x5]
    1250:	14 83                	adc    al,0x83
    1252:	59                   	pop    ecx
    1253:	05 0c 66 05 14       	add    eax,0x1405660c
    1258:	4b                   	dec    ebx
    1259:	05 13 93 05 05       	add    eax,0x5059313
    125e:	82 05 32 00 02 04 01 	add    BYTE PTR ds:0x4020032,0x1
    1265:	58                   	pop    eax
    1266:	05 28 00 02 04       	add    eax,0x4020028
    126b:	01 66 05             	add    DWORD PTR [esi+0x5],esp
    126e:	43                   	inc    ebx
    126f:	00 02                	add    BYTE PTR [edx],al
    1271:	04 02                	add    al,0x2
    1273:	4a                   	dec    edx
    1274:	05 39 00 02 04       	add    eax,0x4020039
    1279:	02 58 05             	add    bl,BYTE PTR [eax+0x5]
    127c:	0c 84                	or     al,0x84
    127e:	05 01 59 31 05       	add    eax,0x5315901
    1283:	10 08                	adc    BYTE PTR [eax],cl
    1285:	4c                   	dec    esp
    1286:	05 0b 67 05 16       	add    eax,0x1605670b
    128b:	30 05 28 3c 05 15    	xor    BYTE PTR ds:0x15053c28,al
    1291:	3c 05                	cmp    al,0x5
    1293:	0c 82                	or     al,0x82
    1295:	05 11 4c 00 02       	add    eax,0x2004c11
    129a:	04 01                	add    al,0x1
    129c:	08 3e                	or     BYTE PTR [esi],bh
    129e:	05 14 30 05 0c       	add    eax,0xc053014
    12a3:	58                   	pop    eax
    12a4:	05 0d 84 00 02       	add    eax,0x200840d
    12a9:	04 01                	add    al,0x1
    12ab:	08 3e                	or     BYTE PTR [esi],bh
    12ad:	05 10 30 05 15       	add    eax,0x15053010
    12b2:	03 72 90             	add    esi,DWORD PTR [edx-0x70]
    12b5:	05 0b 82 05 34       	add    eax,0x3405820b
    12ba:	00 02                	add    BYTE PTR [edx],al
    12bc:	04 01                	add    al,0x1
    12be:	58                   	pop    eax
    12bf:	05 2a 00 02 04       	add    eax,0x402002a
    12c4:	01 66 05             	add    DWORD PTR [esi+0x5],esp
    12c7:	01 03                	add    DWORD PTR [ebx],eax
    12c9:	11 58 69             	adc    DWORD PTR [eax+0x69],ebx
    12cc:	05 10 08 5d 05       	add    eax,0x55d0810
    12d1:	0c 75                	or     al,0x75
    12d3:	05 08 69 05 14       	add    eax,0x14056908
    12d8:	67 05 05 75 05 11    	addr16 add eax,0x11057505
    12de:	08 91 05 08 82 05    	or     BYTE PTR [ecx+0x5820805],dl
    12e4:	11 4c 05 0c          	adc    DWORD PTR [ebp+eax*1+0xc],ecx
    12e8:	08 13                	or     BYTE PTR [ebx],dl
    12ea:	05 1b 68 05 14       	add    eax,0x1405681b
    12ef:	75 05                	jne    12f6 <sysEnter_Vector-0x12ed0a>
    12f1:	1a 74 05 8c          	sbb    dh,BYTE PTR [ebp+eax*1-0x74]
    12f5:	01 9f 05 0d 74 05    	add    DWORD PTR [edi+0x5740d05],ebx
    12fb:	6a 3c                	push   0x3c
    12fd:	05 0d 08 12 05       	add    eax,0x512080d
    1302:	24 08                	and    al,0x8
    1304:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1305:	05 0e b0 05 05       	add    eax,0x505b00e
    130a:	08 13                	or     BYTE PTR [ebx],dl
    130c:	05 08 08 91 05       	add    eax,0x5910808
    1311:	15 a0 05 0c 82       	adc    eax,0x820c05a0
    1316:	05 20 4b 05 35       	add    eax,0x35054b20
    131b:	82 05 0d 3c 05 18 bb 	add    BYTE PTR ds:0x18053c0d,0xbb
    1322:	05 16 08 2e 05       	add    eax,0x52e0816
    1327:	09 3e                	or     DWORD PTR [esi],edi
    1329:	08 3d 05 1d 08 e5    	or     BYTE PTR ds:0xe5081d05,bh
    132f:	05 10 82 05 09       	add    eax,0x9058210
    1334:	83 05 15 02 26 13 05 	add    DWORD PTR ds:0x13260215,0x5
    133b:	0c 82                	or     al,0x82
    133d:	05 15 4c ad 05       	add    eax,0x5ad4c15
    1342:	0d ad 05 05 08       	or     eax,0x80505ad
    1347:	e7 05                	out    0x5,eax
    1349:	0f 08                	invd   
    134b:	e5 05                	in     eax,0x5
    134d:	0d 82 05 14 3d       	or     eax,0x3d140582
    1352:	05 11 91 05 13       	add    eax,0x13059111
    1357:	91                   	xchg   ecx,eax
    1358:	05 0c 75 05 12       	add    eax,0x1205750c
    135d:	74 05                	je     1364 <sysEnter_Vector-0x12ec9c>
    135f:	16                   	push   ss
    1360:	9f                   	lahf   
    1361:	05 08 66 05 16       	add    eax,0x16056608
    1366:	4c                   	dec    esp
    1367:	05 10 bb 05 1c       	add    eax,0x1c05bb10
    136c:	66 05 05 69          	add    ax,0x6905
    1370:	05 0b 08 e5 05       	add    eax,0x5e5080b
    1375:	0d 91 05 05 08       	or     eax,0x8050591
    137a:	75 05                	jne    1381 <sysEnter_Vector-0x12ec7f>
    137c:	12 08                	adc    cl,BYTE PTR [eax]
    137e:	91                   	xchg   ecx,eax
    137f:	05 0c 91 05 01       	add    eax,0x105910c
    1384:	3d 5b 05 0c 08       	cmp    eax,0x80c055b
    1389:	3d 05 01 d7 31       	cmp    eax,0x31d70105
    138e:	05 05 08 5a 05       	add    eax,0x55a0805
    1393:	0e                   	push   cs
    1394:	08 93 05 05 68 05    	or     BYTE PTR [ebx+0x5680505],dl
    139a:	08 92 05 09 67 05    	or     BYTE PTR [edx+0x5670905],dl
    13a0:	08 08                	or     BYTE PTR [eax],cl
    13a2:	67 05 20 00 02 04    	addr16 add eax,0x4020020
    13a8:	01 66 05             	add    DWORD PTR [esi+0x5],esp
    13ab:	13 00                	adc    eax,DWORD PTR [eax]
    13ad:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    13b0:	66 05 10 59          	add    ax,0x5910
    13b4:	05 08 84 05 11       	add    eax,0x11058408
    13b9:	67 05 1a 77 05 05    	addr16 add eax,0x505771a
    13bf:	08 13                	or     BYTE PTR [ebx],dl
    13c1:	05 21 02 24 17       	add    eax,0x17240221
    13c6:	05 05 66 08 83       	add    eax,0x83086605
    13cb:	08 93 05 0c d7 05    	or     BYTE PTR [ebx+0x5d70c05],dl
    13d1:	01 3d 5b 05 0c 08    	add    DWORD PTR ds:0x80c055b,edi
    13d7:	3d 05 01 08 13       	cmp    eax,0x13080105
    13dc:	31 05 05 08 3d 05    	xor    DWORD PTR ds:0x53d0805,eax
    13e2:	01 d7                	add    edi,edx
    13e4:	3f                   	aas    
    13e5:	05 05 08 4b 05       	add    eax,0x54b0805
    13ea:	01 08                	add    DWORD PTR [eax],ecx
    13ec:	9f                   	lahf   
    13ed:	02 06                	add    al,BYTE PTR [esi]
    13ef:	00 01                	add    BYTE PTR [ecx],al
    13f1:	01 51 01             	add    DWORD PTR [ecx+0x1],edx
    13f4:	00 00                	add    BYTE PTR [eax],al
    13f6:	03 00                	add    eax,DWORD PTR [eax]
    13f8:	79 00                	jns    13fa <sysEnter_Vector-0x12ec06>
    13fa:	00 00                	add    BYTE PTR [eax],al
    13fc:	01 01                	add    DWORD PTR [ecx],eax
    13fe:	fb                   	sti    
    13ff:	0e                   	push   cs
    1400:	0d 00 01 01 01       	or     eax,0x1010100
    1405:	01 00                	add    DWORD PTR [eax],eax
    1407:	00 00                	add    BYTE PTR [eax],al
    1409:	01 00                	add    DWORD PTR [eax],eax
    140b:	00 01                	add    BYTE PTR [ecx],al
    140d:	73 72                	jae    1481 <sysEnter_Vector-0x12eb7f>
    140f:	63 00                	arpl   WORD PTR [eax],ax
    1411:	2f                   	das    
    1412:	75 73                	jne    1487 <sysEnter_Vector-0x12eb79>
    1414:	72 2f                	jb     1445 <sysEnter_Vector-0x12ebbb>
    1416:	6c                   	ins    BYTE PTR es:[edi],dx
    1417:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    141e:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    1424:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    142b:	75 2f                	jne    145c <sysEnter_Vector-0x12eba4>
    142d:	39 2f                	cmp    DWORD PTR [edi],ebp
    142f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1436:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1439:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    143d:	65 00 00             	add    BYTE PTR gs:[eax],al
    1440:	6d                   	ins    DWORD PTR es:[edi],dx
    1441:	65 6d                	gs ins DWORD PTR es:[edi],dx
    1443:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1446:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1449:	01 00                	add    DWORD PTR [eax],eax
    144b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    144e:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
    1455:	02 
    1456:	00 00                	add    BYTE PTR [eax],al
    1458:	73 74                	jae    14ce <sysEnter_Vector-0x12eb32>
    145a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1461:	63 
    1462:	2e 68 00 02 00 00    	cs push 0x200
    1468:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    146b:	6d                   	ins    DWORD PTR es:[edi],dx
    146c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    146d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    146e:	2e 68 00 03 00 00    	cs push 0x300
    1474:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    147a:	cb                   	retf   
    147b:	28 00                	sub    BYTE PTR [eax],al
    147d:	9f                   	lahf   
    147e:	03 0b                	add    ecx,DWORD PTR [ebx]
    1480:	01 05 09 08 3f 05    	add    DWORD PTR ds:0x53f0809,eax
    1486:	07                   	pop    es
    1487:	66 05 09 83          	add    ax,0x8309
    148b:	05 07 66 05 08       	add    eax,0x8056607
    1490:	83 05 0b 68 05 19 91 	add    DWORD PTR ds:0x1905680b,0xffffff91
    1497:	05 13 67 05 0c       	add    eax,0xc056713
    149c:	68 05 13 83 91       	push   0x91831305
    14a1:	05 17 91 05 1e       	add    eax,0x1e059117
    14a6:	2f                   	das    
    14a7:	05 20 82 05 1e       	add    eax,0x1e058220
    14ac:	58                   	pop    eax
    14ad:	05 1c 57 05 17       	add    eax,0x1705571c
    14b2:	90                   	nop
    14b3:	05 22 6a 05 1b       	add    eax,0x1b056a22
    14b8:	90                   	nop
    14b9:	05 20 90 05 1e       	add    eax,0x1e059020
    14be:	2e 05 1c 2d 05 17    	cs add eax,0x17052d1c
    14c4:	90                   	nop
    14c5:	05 10 4c 05 0d       	add    eax,0xd054c10
    14ca:	84 05 0b 68 05 19    	test   BYTE PTR ds:0x1905680b,al
    14d0:	83 05 13 67 05 0c 68 	add    DWORD PTR ds:0xc056713,0x68
    14d7:	05 13 83 91 05       	add    eax,0x5918313
    14dc:	17                   	pop    ss
    14dd:	91                   	xchg   ecx,eax
    14de:	05 1e 2f 05 20       	add    eax,0x20052f1e
    14e3:	82 05 1e 58 05 1c 57 	add    BYTE PTR ds:0x1c05581e,0x57
    14ea:	05 17 90 05 22       	add    eax,0x22059017
    14ef:	6a 05                	push   0x5
    14f1:	1b 90 05 20 90 05    	sbb    edx,DWORD PTR [eax+0x5902005]
    14f7:	1e                   	push   ds
    14f8:	2e 05 1c 2d 05 17    	cs add eax,0x17052d1c
    14fe:	90                   	nop
    14ff:	05 10 4c 05 15       	add    eax,0x15054c10
    1504:	5c                   	pop    esp
    1505:	05 0f 67 05 0c       	add    eax,0xc05670f
    150a:	68 05 13 83 67       	push   0x67831305
    150f:	05 17 67 05 1e       	add    eax,0x1e056717
    1514:	2f                   	das    
    1515:	05 20 82 05 1e       	add    eax,0x1e058220
    151a:	66 05 19 57          	add    ax,0x5719
    151e:	05 17 90 05 22       	add    eax,0x22059017
    1523:	6a 05                	push   0x5
    1525:	1b 90 05 20 90 05    	sbb    edx,DWORD PTR [eax+0x5902005]
    152b:	1e                   	push   ds
    152c:	3c 05                	cmp    al,0x5
    152e:	19 2d 05 17 90 05    	sbb    DWORD PTR ds:0x5901705,ebp
    1534:	10 4c 05 01          	adc    BYTE PTR [ebp+eax*1+0x1],cl
    1538:	3e 31 05 0c 08 13 05 	xor    DWORD PTR ds:0x513080c,eax
    153f:	01 08                	add    DWORD PTR [eax],ecx
    1541:	13 02                	adc    eax,DWORD PTR [edx]
    1543:	02 00                	add    al,BYTE PTR [eax]
    1545:	01 01                	add    DWORD PTR [ecx],eax
    1547:	fa                   	cli    
    1548:	00 00                	add    BYTE PTR [eax],al
    154a:	00 03                	add    BYTE PTR [ebx],al
    154c:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    154f:	00 00                	add    BYTE PTR [eax],al
    1551:	01 01                	add    DWORD PTR [ecx],eax
    1553:	fb                   	sti    
    1554:	0e                   	push   cs
    1555:	0d 00 01 01 01       	or     eax,0x1010100
    155a:	01 00                	add    DWORD PTR [eax],eax
    155c:	00 00                	add    BYTE PTR [eax],al
    155e:	01 00                	add    DWORD PTR [eax],eax
    1560:	00 01                	add    BYTE PTR [ecx],al
    1562:	73 72                	jae    15d6 <sysEnter_Vector-0x12ea2a>
    1564:	63 00                	arpl   WORD PTR [eax],ax
    1566:	2f                   	das    
    1567:	75 73                	jne    15dc <sysEnter_Vector-0x12ea24>
    1569:	72 2f                	jb     159a <sysEnter_Vector-0x12ea66>
    156b:	6c                   	ins    BYTE PTR es:[edi],dx
    156c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1573:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    1579:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    1580:	75 2f                	jne    15b1 <sysEnter_Vector-0x12ea4f>
    1582:	39 2f                	cmp    DWORD PTR [edi],ebp
    1584:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    158b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    158e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1592:	65 00 00             	add    BYTE PTR gs:[eax],al
    1595:	6d                   	ins    DWORD PTR es:[edi],dx
    1596:	65 6d                	gs ins DWORD PTR es:[edi],dx
    1598:	73 65                	jae    15ff <sysEnter_Vector-0x12ea01>
    159a:	74 2e                	je     15ca <sysEnter_Vector-0x12ea36>
    159c:	63 00                	arpl   WORD PTR [eax],ax
    159e:	01 00                	add    DWORD PTR [eax],eax
    15a0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15a3:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15aa:	63 
    15ab:	2e 68 00 02 00 00    	cs push 0x200
    15b1:	73 74                	jae    1627 <sysEnter_Vector-0x12e9d9>
    15b3:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
    15ba:	02 
    15bb:	00 00                	add    BYTE PTR [eax],al
    15bd:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    15c0:	6d                   	ins    DWORD PTR es:[edi],dx
    15c1:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15c2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    15c3:	2e 68 00 03 00 00    	cs push 0x300
    15c9:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    15cf:	8e 2a                	mov    gs,WORD PTR [edx]
    15d1:	00 9f 1a 05 0e 08    	add    BYTE PTR [edi+0x80e051a],bl
    15d7:	3d 67 05 18 67       	cmp    eax,0x67180567
    15dc:	05 1f 66 05 26       	add    eax,0x2605661f
    15e1:	2e 05 1f 66 05 2c    	cs add eax,0x2c05661f
    15e7:	2e 05 0e 58 4b 05    	cs add eax,0x54b580e
    15ed:	18 67 05             	sbb    BYTE PTR [edi+0x5],ah
    15f0:	26 82 05 1f 66 05 34 	add    BYTE PTR es:0x3405661f,0x2e
    15f7:	2e 
    15f8:	05 2d 66 05 3a       	add    eax,0x3a05662d
    15fd:	2e 05 0e 3c 05 0d    	cs add eax,0xd053c0e
    1603:	3e 05 08 66 05 0b    	ds add eax,0xb056608
    1609:	4b                   	dec    ebx
    160a:	2f                   	das    
    160b:	05 0e 90 05 0f       	add    eax,0xf05900e
    1610:	57                   	push   edi
    1611:	05 0b 4a 05 13       	add    eax,0x13054a0b
    1616:	85 05 0d 66 05 0b    	test   DWORD PTR ds:0xb05660d,eax
    161c:	4b                   	dec    ebx
    161d:	2f                   	das    
    161e:	05 0e 90 05 0f       	add    eax,0xf05900e
    1623:	73 05                	jae    162a <sysEnter_Vector-0x12e9d6>
    1625:	0b 4a 87             	or     ecx,DWORD PTR [edx-0x79]
    1628:	05 0e 90 05 0f       	add    eax,0xf05900e
    162d:	57                   	push   edi
    162e:	05 0b 90 05 0c       	add    eax,0xc05900b
    1633:	4d                   	dec    ebp
    1634:	05 01 3d 31 05       	add    eax,0x5313d01
    1639:	0c 08                	or     al,0x8
    163b:	13 05 01 08 13 02    	adc    eax,DWORD PTR ds:0x2130801
    1641:	02 00                	add    al,BYTE PTR [eax]
    1643:	01 01                	add    DWORD PTR [ecx],eax
    1645:	d2 00                	rol    BYTE PTR [eax],cl
    1647:	00 00                	add    BYTE PTR [eax],al
    1649:	03 00                	add    eax,DWORD PTR [eax]
    164b:	aa                   	stos   BYTE PTR es:[edi],al
    164c:	00 00                	add    BYTE PTR [eax],al
    164e:	00 01                	add    BYTE PTR [ecx],al
    1650:	01 fb                	add    ebx,edi
    1652:	0e                   	push   cs
    1653:	0d 00 01 01 01       	or     eax,0x1010100
    1658:	01 00                	add    DWORD PTR [eax],eax
    165a:	00 00                	add    BYTE PTR [eax],al
    165c:	01 00                	add    DWORD PTR [eax],eax
    165e:	00 01                	add    BYTE PTR [ecx],al
    1660:	73 72                	jae    16d4 <sysEnter_Vector-0x12e92c>
    1662:	63 00                	arpl   WORD PTR [eax],ax
    1664:	2f                   	das    
    1665:	75 73                	jne    16da <sysEnter_Vector-0x12e926>
    1667:	72 2f                	jb     1698 <sysEnter_Vector-0x12e968>
    1669:	6c                   	ins    BYTE PTR es:[edi],dx
    166a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1671:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    1677:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    167e:	75 2f                	jne    16af <sysEnter_Vector-0x12e951>
    1680:	39 2f                	cmp    DWORD PTR [edi],ebp
    1682:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1689:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    168c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1690:	65 2f                	gs das 
    1692:	2e 2e 2f             	cs cs das 
    1695:	2e 2e 2f             	cs cs das 
    1698:	2e 2e 2f             	cs cs das 
    169b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    169f:	6a 2f                	push   0x2f
    16a1:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    16a4:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    16ab:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16ac:	65 6c                	gs ins BYTE PTR es:[edi],dx
    16ae:	2f                   	das    
    16af:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    16b6:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    16b9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    16bd:	65 00 00             	add    BYTE PTR gs:[eax],al
    16c0:	70 69                	jo     172b <sysEnter_Vector-0x12e8d5>
    16c2:	70 65                	jo     1729 <sysEnter_Vector-0x12e8d7>
    16c4:	5f                   	pop    edi
    16c5:	6c                   	ins    BYTE PTR es:[edi],dx
    16c6:	69 62 2e 63 00 01 00 	imul   esp,DWORD PTR [edx+0x2e],0x10063
    16cd:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    16d0:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    16d7:	63 
    16d8:	2e 68 00 02 00 00    	cs push 0x200
    16de:	73 79                	jae    1759 <sysEnter_Vector-0x12e8a7>
    16e0:	73 63                	jae    1745 <sysEnter_Vector-0x12e8bb>
    16e2:	61                   	popa   
    16e3:	6c                   	ins    BYTE PTR es:[edi],dx
    16e4:	6c                   	ins    BYTE PTR es:[edi],dx
    16e5:	73 2e                	jae    1715 <sysEnter_Vector-0x12e8eb>
    16e7:	68 00 03 00 00       	push   0x300
    16ec:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    16ef:	6d                   	ins    DWORD PTR es:[edi],dx
    16f0:	6f                   	outs   dx,DWORD PTR ds:[esi]
    16f1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16f2:	2e 68 00 04 00 00    	cs push 0x400
    16f8:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    16fe:	7d 2b                	jge    172b <sysEnter_Vector-0x12e8d5>
    1700:	00 9f 03 0a 01 05    	add    BYTE PTR [edi+0x5010a03],bl
    1706:	0c 08                	or     al,0x8
    1708:	4b                   	dec    ebx
    1709:	05 01 08 2f 5b       	add    eax,0x5b2f0801
    170e:	05 0c 08 4b 05       	add    eax,0x54b080c
    1713:	01 08                	add    DWORD PTR [eax],ecx
    1715:	75 02                	jne    1719 <sysEnter_Vector-0x12e8e7>
    1717:	05 00 01 01 2d       	add    eax,0x2d010100
    171c:	02 00                	add    al,BYTE PTR [eax]
    171e:	00 03                	add    BYTE PTR [ebx],al
    1720:	00 91 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],dl
    1726:	01 fb                	add    ebx,edi
    1728:	0e                   	push   cs
    1729:	0d 00 01 01 01       	or     eax,0x1010100
    172e:	01 00                	add    DWORD PTR [eax],eax
    1730:	00 00                	add    BYTE PTR [eax],al
    1732:	01 00                	add    DWORD PTR [eax],eax
    1734:	00 01                	add    BYTE PTR [ecx],al
    1736:	73 72                	jae    17aa <sysEnter_Vector-0x12e856>
    1738:	63 00                	arpl   WORD PTR [eax],ax
    173a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1741:	00 2f                	add    BYTE PTR [edi],ch
    1743:	75 73                	jne    17b8 <sysEnter_Vector-0x12e848>
    1745:	72 2f                	jb     1776 <sysEnter_Vector-0x12e88a>
    1747:	6c                   	ins    BYTE PTR es:[edi],dx
    1748:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    174f:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    1755:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    175c:	75 2f                	jne    178d <sysEnter_Vector-0x12e873>
    175e:	39 2f                	cmp    DWORD PTR [edi],ebp
    1760:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1767:	00 00                	add    BYTE PTR [eax],al
    1769:	70 72                	jo     17dd <sysEnter_Vector-0x12e823>
    176b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    176c:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
    176f:	66 6f                	outs   dx,WORD PTR ds:[esi]
    1771:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1774:	01 00                	add    DWORD PTR [eax],eax
    1776:	00 70 72             	add    BYTE PTR [eax+0x72],dh
    1779:	6f                   	outs   dx,DWORD PTR ds:[esi]
    177a:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
    177d:	66 6f                	outs   dx,WORD PTR ds:[esi]
    177f:	2e 68 00 02 00 00    	cs push 0x200
    1785:	73 74                	jae    17fb <sysEnter_Vector-0x12e805>
    1787:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    178e:	63 
    178f:	2e 68 00 03 00 00    	cs push 0x300
    1795:	74 69                	je     1800 <sysEnter_Vector-0x12e800>
    1797:	6d                   	ins    DWORD PTR es:[edi],dx
    1798:	65 2e 68 00 02 00 00 	gs cs push 0x200
    179f:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    17a6:	02 00                	add    al,BYTE PTR [eax]
    17a8:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    17ab:	6d                   	ins    DWORD PTR es:[edi],dx
    17ac:	6d                   	ins    DWORD PTR es:[edi],dx
    17ad:	6f                   	outs   dx,DWORD PTR ds:[esi]
    17ae:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17af:	2e 68 00 02 00 00    	cs push 0x200
    17b5:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    17bb:	dc 2b                	fsubr  QWORD PTR [ebx]
    17bd:	00 9f 03 10 01 05    	add    BYTE PTR [edi+0x5011003],bl
    17c3:	0a 08                	or     cl,BYTE PTR [eax]
    17c5:	91                   	xchg   ecx,eax
    17c6:	05 09 76 05 05       	add    eax,0x5057609
    17cb:	79 08                	jns    17d5 <sysEnter_Vector-0x12e82b>
    17cd:	2f                   	das    
    17ce:	08 59 05             	or     BYTE PTR [ecx+0x5],bl
    17d1:	0b 08                	or     ecx,DWORD PTR [eax]
    17d3:	5a                   	pop    edx
    17d4:	08 4b 05             	or     BYTE PTR [ebx+0x5],cl
    17d7:	15 08 f7 05 1e       	adc    eax,0x1e05f708
    17dc:	08 13                	or     BYTE PTR [ebx],dl
    17de:	05 11 84 05 27       	add    eax,0x27058411
    17e3:	5a                   	pop    edx
    17e4:	05 21 66 05 11       	add    eax,0x11056621
    17e9:	67 05 20 5a 05 1f    	addr16 add eax,0x1f055a20
    17ef:	d6                   	(bad)  
    17f0:	05 11 67 05 1f       	add    eax,0x1f056711
    17f5:	5a                   	pop    edx
    17f6:	05 1e d6 05 11       	add    eax,0x1105d61e
    17fb:	67 05 27 5a 05 26    	addr16 add eax,0x26055a27
    1801:	d6                   	(bad)  
    1802:	05 11 67 05 27       	add    eax,0x27056711
    1807:	5a                   	pop    edx
    1808:	05 26 d6 05 11       	add    eax,0x1105d626
    180d:	67 05 15 5a 05 14    	addr16 add eax,0x14055a15
    1813:	08 4a 05             	or     BYTE PTR [edx+0x5],cl
    1816:	2a 4b 05             	sub    cl,BYTE PTR [ebx+0x5]
    1819:	29 08                	sub    DWORD PTR [eax],ecx
    181b:	20 05 27 4a 05 11    	and    BYTE PTR ds:0x11054a27,al
    1821:	69 05 28 57 05 27 d6 	imul   eax,DWORD PTR ds:0x27055728,0x671105d6
    1828:	05 11 67 
    182b:	5a                   	pop    edx
    182c:	08 bb 08 f3 05 21    	or     BYTE PTR [ebx+0x2105f308],bh
    1832:	08 e5                	or     ch,ah
    1834:	05 11 66 08 4b       	add    eax,0x4b086611
    1839:	05 21 5a 05 20       	add    eax,0x20055a21
    183e:	d6                   	(bad)  
    183f:	05 25 67 05 30       	add    eax,0x30056725
    1844:	66 05 42 66          	add    ax,0x6642
    1848:	05 38 66 05 25       	add    eax,0x25056638
    184d:	4a                   	dec    edx
    184e:	05 2d 83 05 39       	add    eax,0x3905832d
    1853:	66 05 18 08          	add    ax,0x818
    1857:	4a                   	dec    edx
    1858:	05 11 68 08 59       	add    eax,0x59086811
    185d:	05 21 08 83 05       	add    eax,0x5830821
    1862:	11 66 f3             	adc    DWORD PTR [esi-0xd],esp
    1865:	05 22 08 20 05       	add    eax,0x5200822
    186a:	11 66 05             	adc    DWORD PTR [esi+0x5],esp
    186d:	31 08                	xor    DWORD PTR [eax],ecx
    186f:	59                   	pop    ecx
    1870:	05 21 66 05 49       	add    eax,0x49056621
    1875:	ba 05 39 66 05       	mov    edx,0x5663905
    187a:	38 ba 05 56 2e 05    	cmp    BYTE PTR [edx+0x52e5605],bh
    1880:	55                   	push   ebp
    1881:	3c 05                	cmp    al,0x5
    1883:	75 2e                	jne    18b3 <sysEnter_Vector-0x12e74d>
    1885:	05 1e 82 05 2d       	add    eax,0x2d05821e
    188a:	67 05 24 66 05 11    	addr16 add eax,0x11056624
    1890:	69 05 27 30 05 26 d6 	imul   eax,DWORD PTR ds:0x26053027,0x671105d6
    1897:	05 11 67 
    189a:	05 26 30 05 25       	add    eax,0x25053026
    189f:	d6                   	(bad)  
    18a0:	05 11 67 05 14       	add    eax,0x14056711
    18a5:	22 05 0f 4b 05 0b    	and    al,BYTE PTR ds:0xb054b0f
    18ab:	03 46 08             	add    eax,DWORD PTR [esi+0x8]
    18ae:	3c 05                	cmp    al,0x5
    18b0:	0c 03                	or     al,0x3
    18b2:	3c 9e                	cmp    al,0x9e
    18b4:	05 01 3e 77 05       	add    eax,0x5773e01
    18b9:	0c 08                	or     al,0x8
    18bb:	3d 05 01 08 2f       	cmp    eax,0x2f080105
    18c0:	31 05 09 08 93 05    	xor    DWORD PTR ds:0x5930809,eax
    18c6:	08 66 05             	or     BYTE PTR [esi+0x5],ah
    18c9:	14 4b                	adc    al,0x4b
    18cb:	05 13 f2 69 05       	add    eax,0x569f213
    18d0:	0e                   	push   cs
    18d1:	08 f6                	or     dh,dh
    18d3:	05 05 74 05 17       	add    eax,0x17057405
    18d8:	5a                   	pop    edx
    18d9:	05 1c 08 12 05       	add    eax,0x512081c
    18de:	0c 74                	or     al,0x74
    18e0:	05 0d 84 05 24       	add    eax,0x2405840d
    18e5:	08 83 05 0d 08 12    	or     BYTE PTR [ebx+0x12080d05],al
    18eb:	08 2f                	or     BYTE PTR [edi],ch
    18ed:	05 11 08 83 05       	add    eax,0x5830811
    18f2:	10 08                	adc    BYTE PTR [eax],cl
    18f4:	82 05 19 84 05 10 08 	add    BYTE PTR ds:0x10058419,0x8
    18fb:	ad                   	lods   eax,DWORD PTR ds:[esi]
    18fc:	05 11 a0 08 83       	add    eax,0x8308a011
    1901:	05 1d d8 05 2e       	add    eax,0x2e05d81d
    1906:	08 ae 05 11 c8 05    	or     BYTE PTR [esi+0x5c81105],ch
    190c:	1a 08                	sbb    cl,BYTE PTR [eax]
    190e:	91                   	xchg   ecx,eax
    190f:	05 1c 08 4b 05       	add    eax,0x54b081c
    1914:	14 08                	adc    al,0x8
    1916:	12 05 1c 4b 05 23    	adc    al,BYTE PTR ds:0x23054b1c
    191c:	f2 05 22 f2 05 21    	repnz add eax,0x2105f222
    1922:	2f                   	das    
    1923:	05 19 e4 05 11       	add    eax,0x1105e419
    1928:	59                   	pop    ecx
    1929:	05 2e 08 75 05       	add    eax,0x575082e
    192e:	11 03                	adc    DWORD PTR [ebx],eax
    1930:	71 ac                	jno    18de <sysEnter_Vector-0x12e722>
    1932:	05 25 00 02 04       	add    eax,0x4020025
    1937:	02 03                	add    al,BYTE PTR [ebx]
    1939:	78 20                	js     195b <sysEnter_Vector-0x12e6a5>
    193b:	05 05 00 02 04       	add    eax,0x4020005
    1940:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
    1943:	01 03                	add    DWORD PTR [ebx],eax
    1945:	1d ba 02 09 00       	sbb    eax,0x902ba
    194a:	01 01                	add    DWORD PTR [ecx],eax
    194c:	07                   	pop    es
    194d:	04 00                	add    al,0x0
    194f:	00 03                	add    BYTE PTR [ebx],al
    1951:	00 6a 00             	add    BYTE PTR [edx+0x0],ch
    1954:	00 00                	add    BYTE PTR [eax],al
    1956:	01 01                	add    DWORD PTR [ecx],eax
    1958:	fb                   	sti    
    1959:	0e                   	push   cs
    195a:	0d 00 01 01 01       	or     eax,0x1010100
    195f:	01 00                	add    DWORD PTR [eax],eax
    1961:	00 00                	add    BYTE PTR [eax],al
    1963:	01 00                	add    DWORD PTR [eax],eax
    1965:	00 01                	add    BYTE PTR [ecx],al
    1967:	73 72                	jae    19db <sysEnter_Vector-0x12e625>
    1969:	63 00                	arpl   WORD PTR [eax],ax
    196b:	2f                   	das    
    196c:	75 73                	jne    19e1 <sysEnter_Vector-0x12e61f>
    196e:	72 2f                	jb     199f <sysEnter_Vector-0x12e661>
    1970:	6c                   	ins    BYTE PTR es:[edi],dx
    1971:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1978:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    197e:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    1985:	75 2f                	jne    19b6 <sysEnter_Vector-0x12e64a>
    1987:	39 2f                	cmp    DWORD PTR [edi],ebp
    1989:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1990:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1993:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1997:	65 00 00             	add    BYTE PTR gs:[eax],al
    199a:	73 70                	jae    1a0c <sysEnter_Vector-0x12e5f4>
    199c:	72 69                	jb     1a07 <sysEnter_Vector-0x12e5f9>
    199e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    199f:	74 66                	je     1a07 <sysEnter_Vector-0x12e5f9>
    19a1:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    19a4:	01 00                	add    DWORD PTR [eax],eax
    19a6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    19a9:	64 61                	fs popa 
    19ab:	72 67                	jb     1a14 <sysEnter_Vector-0x12e5ec>
    19ad:	2e 68 00 02 00 00    	cs push 0x200
    19b3:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    19b6:	6d                   	ins    DWORD PTR es:[edi],dx
    19b7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    19b8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    19b9:	2e 68 00 03 00 00    	cs push 0x300
    19bf:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    19c5:	95                   	xchg   ebp,eax
    19c6:	31 00                	xor    DWORD PTR [eax],eax
    19c8:	9f                   	lahf   
    19c9:	03 0b                	add    ecx,DWORD PTR [ebx]
    19cb:	01 05 06 08 4b 05    	add    DWORD PTR ds:0x54b0806,eax
    19d1:	08 76 05             	or     BYTE PTR [esi+0x5],dh
    19d4:	09 2f                	or     DWORD PTR [edi],ebp
    19d6:	05 13 d6 05 16       	add    eax,0x1605d613
    19db:	58                   	pop    eax
    19dc:	05 10 82 05 0e       	add    eax,0xe058210
    19e1:	66 05 05 2e          	add    ax,0x2e05
    19e5:	05 09 65 05 08       	add    eax,0x8056509
    19ea:	d6                   	(bad)  
    19eb:	05 09 5a 05 01       	add    eax,0x1055a09
    19f0:	3d 03 12 66 05       	cmp    eax,0x5661203
    19f5:	11 03                	adc    DWORD PTR [ebx],eax
    19f7:	0a 08                	or     cl,BYTE PTR [eax]
    19f9:	58                   	pop    eax
    19fa:	05 09 3c 05 0b       	add    eax,0xb053c09
    19ff:	67 05 05 66 05 08    	addr16 add eax,0x8056605
    1a05:	4b                   	dec    ebx
    1a06:	05 05 4b 05 0f       	add    eax,0xf054b05
    1a0b:	00 02                	add    BYTE PTR [edx],al
    1a0d:	04 01                	add    al,0x1
    1a0f:	66 05 0a 67          	add    ax,0x670a
    1a13:	05 0c 9f 05 04       	add    eax,0x4059f0c
    1a18:	66 00 02             	data16 add BYTE PTR [edx],al
    1a1b:	04 01                	add    al,0x1
    1a1d:	06                   	push   es
    1a1e:	4a                   	dec    edx
    1a1f:	00 02                	add    BYTE PTR [edx],al
    1a21:	04 02                	add    al,0x2
    1a23:	74 00                	je     1a25 <sysEnter_Vector-0x12e5db>
    1a25:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1a28:	58                   	pop    eax
    1a29:	05 07 00 02 04       	add    eax,0x4020007
    1a2e:	04 06                	add    al,0x6
    1a30:	3d 05 0b 00 02       	cmp    eax,0x2000b05
    1a35:	04 04                	add    al,0x4
    1a37:	4b                   	dec    ebx
    1a38:	05 05 00 02 04       	add    eax,0x4020005
    1a3d:	04 66                	add    al,0x66
    1a3f:	05 06 4b 05 09       	add    eax,0x9054b06
    1a44:	67 05 08 4b 3d 05    	addr16 add eax,0x53d4b08
    1a4a:	13 67 05             	adc    esp,DWORD PTR [edi+0x5]
    1a4d:	0d 66 05 09 4b       	or     eax,0x4b090566
    1a52:	05 08 4b 05 13       	add    eax,0x13054b08
    1a57:	67 05 0d 66 05 09    	addr16 add eax,0x905660d
    1a5d:	4b                   	dec    ebx
    1a5e:	05 08 4b 05 0b       	add    eax,0xb054b08
    1a63:	4d                   	dec    ebp
    1a64:	05 05 66 05 06       	add    eax,0x6056605
    1a69:	4b                   	dec    ebx
    1a6a:	05 09 67 05 0b       	add    eax,0xb056709
    1a6f:	67 05 08 67 05 04    	addr16 add eax,0x4056708
    1a75:	4c                   	dec    esp
    1a76:	05 05 75 05 08       	add    eax,0x8057505
    1a7b:	67 05 0c 90 05 17    	addr16 add eax,0x1705900c
    1a81:	77 05                	ja     1a88 <sysEnter_Vector-0x12e578>
    1a83:	16                   	push   ss
    1a84:	02 25 12 05 09 82    	add    ah,BYTE PTR ds:0x82090512
    1a8a:	05 0d 90 05 09       	add    eax,0x905900d
    1a8f:	73 05                	jae    1a96 <sysEnter_Vector-0x12e56a>
    1a91:	05 68 05 0d 83       	add    eax,0x830d0568
    1a96:	05 07 67 05 0d       	add    eax,0xd056707
    1a9b:	67 05 05 66 05 09    	addr16 add eax,0x9056605
    1aa1:	4b                   	dec    ebx
    1aa2:	05 08 2f 05 0b       	add    eax,0xb052f08
    1aa7:	90                   	nop
    1aa8:	05 0e 3b 05 09       	add    eax,0x9053b0e
    1aad:	90                   	nop
    1aae:	05 05 4c 05 07       	add    eax,0x7054c05
    1ab3:	67 05 0a 90 05 0b    	addr16 add eax,0xb05900a
    1ab9:	67 05 05 66 05 06    	addr16 add eax,0x6056605
    1abf:	4b                   	dec    ebx
    1ac0:	05 08 67 05 0b       	add    eax,0xb056708
    1ac5:	90                   	nop
    1ac6:	59                   	pop    ecx
    1ac7:	05 08 67 05 0b       	add    eax,0xb056708
    1acc:	90                   	nop
    1acd:	05 08 3d 05 0b       	add    eax,0xb053d08
    1ad2:	90                   	nop
    1ad3:	05 0d 93 05 05       	add    eax,0x505930d
    1ad8:	66 05 09 4b          	add    ax,0x4b09
    1adc:	05 08 2f 05 0b       	add    eax,0xb052f08
    1ae1:	90                   	nop
    1ae2:	05 0e 65 05 09       	add    eax,0x905650e
    1ae7:	90                   	nop
    1ae8:	05 08 4c 05 07       	add    eax,0x7054c08
    1aed:	2f                   	das    
    1aee:	05 0a 90 05 16       	add    eax,0x1605900a
    1af3:	3b 05 08 90 5a 05    	cmp    eax,DWORD PTR ds:0x55a9008
    1af9:	07                   	pop    es
    1afa:	2f                   	das    
    1afb:	05 0f 90 05 0a       	add    eax,0xa05900f
    1b00:	ac                   	lods   al,BYTE PTR ds:[esi]
    1b01:	2d 05 08 90 4c       	sub    eax,0x4c900805
    1b06:	05 07 2f 05 0a       	add    eax,0xa052f07
    1b0b:	90                   	nop
    1b0c:	05 0d 3b 05 08       	add    eax,0x8053b0d
    1b11:	90                   	nop
    1b12:	05 09 4c 05 01       	add    eax,0x1054c09
    1b17:	00 02                	add    BYTE PTR [edx],al
    1b19:	04 01                	add    al,0x1
    1b1b:	3d 68 05 0b 03       	cmp    eax,0x30b0568
    1b20:	0e                   	push   cs
    1b21:	08 58 05             	or     BYTE PTR [eax+0x5],bl
    1b24:	02 66 05             	add    ah,BYTE PTR [esi+0x5]
    1b27:	07                   	pop    es
    1b28:	59                   	pop    ecx
    1b29:	05 06 66 05 0d       	add    eax,0xd056606
    1b2e:	4b                   	dec    ebx
    1b2f:	05 08 3c 05 0d       	add    eax,0xd053c08
    1b34:	90                   	nop
    1b35:	05 0b 3c 05 04       	add    eax,0x4053c0b
    1b3a:	2f                   	das    
    1b3b:	05 09 5c 05 03       	add    eax,0x3055c09
    1b40:	76 05                	jbe    1b47 <sysEnter_Vector-0x12e4b9>
    1b42:	0b 91 05 0a 08 e6    	or     edx,DWORD PTR [ecx-0x19f7f5fb]
    1b48:	05 04 4b 05 0a       	add    eax,0xa054b04
    1b4d:	30 05 04 4b 05 0a    	xor    BYTE PTR ds:0xa054b04,al
    1b53:	30 05 04 4b 05 0a    	xor    BYTE PTR ds:0xa054b04,al
    1b59:	30 05 04 4b 05 0a    	xor    BYTE PTR ds:0xa054b04,al
    1b5f:	30 05 04 4b 05 0f    	xor    BYTE PTR ds:0xf054b04,al
    1b65:	32 05 07 75 05 06    	xor    al,BYTE PTR ds:0x6057507
    1b6b:	ba 05 12 59 05       	mov    edx,0x5591205
    1b70:	0c 08                	or     al,0x8
    1b72:	13 05 0b 66 05 04    	adc    eax,DWORD PTR ds:0x405660b
    1b78:	4b                   	dec    ebx
    1b79:	05 10 92 05 07       	add    eax,0x7059210
    1b7e:	d7                   	xlat   BYTE PTR ds:[ebx]
    1b7f:	05 11 67 05 0b       	add    eax,0xb056711
    1b84:	3d 05 0d 4f 05       	cmp    eax,0x54f0d05
    1b89:	07                   	pop    es
    1b8a:	75 05                	jne    1b91 <sysEnter_Vector-0x12e46f>
    1b8c:	06                   	push   es
    1b8d:	66 05 04 4b          	add    ax,0x4b04
    1b91:	05 08 91 05 07       	add    eax,0x7059108
    1b96:	ba 05 11 59 05       	mov    edx,0x5591105
    1b9b:	0d 08 13 05 0c       	or     eax,0xc051308
    1ba0:	66 05 05 4b          	add    ax,0x4b05
    1ba4:	05 0f 92 05 07       	add    eax,0x705920f
    1ba9:	d8 05 0f 67 05 0d    	fadd   DWORD PTR ds:0xd05670f
    1baf:	78 05                	js     1bb6 <sysEnter_Vector-0x12e44a>
    1bb1:	07                   	pop    es
    1bb2:	75 05                	jne    1bb9 <sysEnter_Vector-0x12e447>
    1bb4:	06                   	push   es
    1bb5:	66 05 16 00          	add    ax,0x16
    1bb9:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1bbc:	4a                   	dec    edx
    1bbd:	05 13 00 02 04       	add    eax,0x4020013
    1bc2:	01 66 05             	add    DWORD PTR [esi+0x5],esp
    1bc5:	25 00 02 04 02       	and    eax,0x2040200
    1bca:	4a                   	dec    edx
    1bcb:	05 22 00 02 04       	add    eax,0x4020022
    1bd0:	02 66 05             	add    ah,BYTE PTR [esi+0x5]
    1bd3:	10 4b 05             	adc    BYTE PTR [ebx+0x5],cl
    1bd6:	0e                   	push   cs
    1bd7:	66 05 04 67          	add    ax,0x6704
    1bdb:	05 08 94 05 0b       	add    eax,0xb059408
    1be0:	76 05                	jbe    1be7 <sysEnter_Vector-0x12e419>
    1be2:	10 02                	adc    BYTE PTR [edx],al
    1be4:	24 14                	and    al,0x14
    1be6:	05 07 66 05 0b       	add    eax,0xb056607
    1beb:	4b                   	dec    ebx
    1bec:	05 0a 2f 05 0d       	add    eax,0xd052f0a
    1bf1:	90                   	nop
    1bf2:	05 0b 3b 05 1c       	add    eax,0x1c053b0b
    1bf7:	a0 05 08 ac 05       	mov    al,ds:0x5ac0805
    1bfc:	0d 90 05 0b 2e       	or     eax,0x2e0b0590
    1c01:	05 0a 2f 05 09       	add    eax,0x9052f0a
    1c06:	2f                   	das    
    1c07:	05 0c 90 05 0a       	add    eax,0xa05900c
    1c0c:	3b 05 04 a0 05 06    	cmp    eax,DWORD PTR ds:0x605a004
    1c12:	5b                   	pop    ebx
    1c13:	05 07 d7 05 23       	add    eax,0x2305d707
    1c18:	67 05 21 d6 5a 05    	addr16 add eax,0x55ad621
    1c1e:	10 76 05             	adc    BYTE PTR [esi+0x5],dh
    1c21:	07                   	pop    es
    1c22:	66 05 0b 4b          	add    ax,0x4b0b
    1c26:	05 0a 2f 05 0d       	add    eax,0xd052f0a
    1c2b:	90                   	nop
    1c2c:	05 1d 3b 05 0b       	add    eax,0xb053b1d
    1c31:	90                   	nop
    1c32:	5a                   	pop    edx
    1c33:	05 04 74 05 10       	add    eax,0x10057404
    1c38:	00 02                	add    BYTE PTR [edx],al
    1c3a:	04 03                	add    al,0x3
    1c3c:	2f                   	das    
    1c3d:	05 09 00 02 04       	add    eax,0x4020009
    1c42:	03 90 05 0e 00 02    	add    edx,DWORD PTR [eax+0x2000e05]
    1c48:	04 03                	add    al,0x3
    1c4a:	90                   	nop
    1c4b:	05 0c 00 02 04       	add    eax,0x402000c
    1c50:	03 3c 05 19 00 02 04 	add    edi,DWORD PTR [eax*1+0x4020019]
    1c57:	03 2d 05 04 00 02    	add    ebp,DWORD PTR ds:0x2000405
    1c5d:	04 01                	add    al,0x1
    1c5f:	4a                   	dec    edx
    1c60:	05 0a 84 05 09       	add    eax,0x905840a
    1c65:	2f                   	das    
    1c66:	05 0c 90 05 1c       	add    eax,0x1c05900c
    1c6b:	3b 05 0a 90 05 04    	cmp    eax,DWORD PTR ds:0x405900a
    1c71:	5a                   	pop    edx
    1c72:	05 07 5b 05 11       	add    eax,0x11055b07
    1c77:	67 05 0b 75 05 19    	addr16 add eax,0x1905750b
    1c7d:	4d                   	dec    ebp
    1c7e:	05 0a ab 05 04       	add    eax,0x405ab0a
    1c83:	08 bd 05 07 5b 05    	or     BYTE PTR [ebp+0x55b0705],bh
    1c89:	0b 67 05             	or     esp,DWORD PTR [edi+0x5]
    1c8c:	10 d7                	adc    bh,dl
    1c8e:	05 09 82 05 04       	add    eax,0x4058209
    1c93:	5d                   	pop    ebp
    1c94:	05 0a 55 05 10       	add    eax,0x1005550a
    1c99:	d7                   	xlat   BYTE PTR ds:[ebx]
    1c9a:	05 09 82 05 04       	add    eax,0x4058209
    1c9f:	5a                   	pop    edx
    1ca0:	05 08 5b 05 0b       	add    eax,0xb055b08
    1ca5:	90                   	nop
    1ca6:	05 04 3d 05 09       	add    eax,0x9053d04
    1cab:	5c                   	pop    esp
    1cac:	05 04 75 05 0a       	add    eax,0xa057504
    1cb1:	31 05 09 4c 05 04    	xor    DWORD PTR ds:0x4054c09,eax
    1cb7:	75 05                	jne    1cbe <sysEnter_Vector-0x12e342>
    1cb9:	0a 32                	or     dh,BYTE PTR [edx]
    1cbb:	05 04 4c 05 08       	add    eax,0x8054c04
    1cc0:	31 05 0b 90 05 08    	xor    DWORD PTR ds:0x805900b,eax
    1cc6:	3d 05 07 66 05       	cmp    eax,0x5660705
    1ccb:	0e                   	push   cs
    1ccc:	4b                   	dec    ebx
    1ccd:	05 09 3c 05 0e       	add    eax,0xe053c09
    1cd2:	90                   	nop
    1cd3:	05 0c 3c 05 04       	add    eax,0x4053c0c
    1cd8:	31 05 05 57 05 04    	xor    DWORD PTR ds:0x4055705,eax
    1cde:	91                   	xchg   ecx,eax
    1cdf:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
    1ce2:	05 06 03 0a 20       	add    eax,0x200a0306
    1ce7:	05 08 67 05 0b       	add    eax,0xb056708
    1cec:	f3 05 1a 67 05 08    	repz add eax,0x805671a
    1cf2:	ac                   	lods   al,BYTE PTR ds:[esi]
    1cf3:	05 0e 67 05 07       	add    eax,0x705670e
    1cf8:	66 05 0b 4b          	add    ax,0x4b0b
    1cfc:	05 09 3c 05 14       	add    eax,0x14053c09
    1d01:	67 05 0d 66 05 0a    	addr16 add eax,0xa05660d
    1d07:	4b                   	dec    ebx
    1d08:	05 08 ac 5a 05       	add    eax,0x55aac08
    1d0d:	09 d7                	or     edi,edx
    1d0f:	05 18 00 02 04       	add    eax,0x4020018
    1d14:	02 03                	add    al,BYTE PTR [ebx]
    1d16:	e8 7e 08 f2 05       	call   5f22599 <sysEnter_Vector+0x5df2599>
    1d1b:	12 00                	adc    al,BYTE PTR [eax]
    1d1d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1d20:	90                   	nop
    1d21:	05 02 00 02 04       	add    eax,0x4020002
    1d26:	01 66 05             	add    DWORD PTR [esi+0x5],esp
    1d29:	07                   	pop    es
    1d2a:	03 9a 01 82 05 0d    	add    ebx,DWORD PTR [edx+0xd058201]
    1d30:	67 05 01 67 5b 05    	addr16 add eax,0x55b6701
    1d36:	02 08                	add    cl,BYTE PTR [eax]
    1d38:	40                   	inc    eax
    1d39:	05 06 67 05 09       	add    eax,0x9056706
    1d3e:	08 76 05             	or     BYTE PTR [esi+0x5],dh
    1d41:	01 3d 31 05 02 08    	add    DWORD PTR ds:0x8020531,edi
    1d47:	40                   	inc    eax
    1d48:	05 06 67 05 09       	add    eax,0x9056706
    1d4d:	08 76 05             	or     BYTE PTR [esi+0x5],dh
    1d50:	01 3d 02 02 00 01    	add    DWORD PTR ds:0x1000202,edi
    1d56:	01 77 00             	add    DWORD PTR [edi+0x0],esi
    1d59:	00 00                	add    BYTE PTR [eax],al
    1d5b:	03 00                	add    eax,DWORD PTR [eax]
    1d5d:	36 00 00             	add    BYTE PTR ss:[eax],al
    1d60:	00 01                	add    BYTE PTR [ecx],al
    1d62:	01 fb                	add    ebx,edi
    1d64:	0e                   	push   cs
    1d65:	0d 00 01 01 01       	or     eax,0x1010100
    1d6a:	01 00                	add    DWORD PTR [eax],eax
    1d6c:	00 00                	add    BYTE PTR [eax],al
    1d6e:	01 00                	add    DWORD PTR [eax],eax
    1d70:	00 01                	add    BYTE PTR [ecx],al
    1d72:	73 72                	jae    1de6 <sysEnter_Vector-0x12e21a>
    1d74:	63 00                	arpl   WORD PTR [eax],ax
    1d76:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1d7d:	00 00                	add    BYTE PTR [eax],al
    1d7f:	73 74                	jae    1df5 <sysEnter_Vector-0x12e20b>
    1d81:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    1d88:	00 
    1d89:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    1d8c:	6d                   	ins    DWORD PTR es:[edi],dx
    1d8d:	6d                   	ins    DWORD PTR es:[edi],dx
    1d8e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1d8f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1d90:	2e 68 00 02 00 00    	cs push 0x200
    1d96:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    1d9c:	f0 38 00             	lock cmp BYTE PTR [eax],al
    1d9f:	9f                   	lahf   
    1da0:	03 11                	add    edx,DWORD PTR [ecx]
    1da2:	01 05 09 08 5a 05    	add    DWORD PTR ds:0x55a0809,eax
    1da8:	05 76 05 11 08       	add    eax,0x8110576
    1dad:	31 05 15 90 05 11    	xor    DWORD PTR ds:0x11059015,eax
    1db3:	59                   	pop    ecx
    1db4:	05 15 90 05 11       	add    eax,0x11059015
    1db9:	59                   	pop    ecx
    1dba:	05 15 90 05 11       	add    eax,0x11059015
    1dbf:	59                   	pop    ecx
    1dc0:	05 15 90 05 13       	add    eax,0x13059015
    1dc5:	59                   	pop    ecx
    1dc6:	05 05 ad e6 05       	add    eax,0x5e6ad05
    1dcb:	01 21                	add    DWORD PTR [ecx],esp
    1dcd:	02 05 00 01 01 cd    	add    al,BYTE PTR ds:0xcd010100
    1dd3:	00 00                	add    BYTE PTR [eax],al
    1dd5:	00 03                	add    BYTE PTR [ebx],al
    1dd7:	00 71 00             	add    BYTE PTR [ecx+0x0],dh
    1dda:	00 00                	add    BYTE PTR [eax],al
    1ddc:	01 01                	add    DWORD PTR [ecx],eax
    1dde:	fb                   	sti    
    1ddf:	0e                   	push   cs
    1de0:	0d 00 01 01 01       	or     eax,0x1010100
    1de5:	01 00                	add    DWORD PTR [eax],eax
    1de7:	00 00                	add    BYTE PTR [eax],al
    1de9:	01 00                	add    DWORD PTR [eax],eax
    1deb:	00 01                	add    BYTE PTR [ecx],al
    1ded:	73 72                	jae    1e61 <sysEnter_Vector-0x12e19f>
    1def:	63 2f                	arpl   WORD PTR [edi],bp
    1df1:	73 74                	jae    1e67 <sysEnter_Vector-0x12e199>
    1df3:	72 69                	jb     1e5e <sysEnter_Vector-0x12e1a2>
    1df5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1df6:	67 73 00             	addr16 jae 1df9 <sysEnter_Vector-0x12e207>
    1df9:	2f                   	das    
    1dfa:	75 73                	jne    1e6f <sysEnter_Vector-0x12e191>
    1dfc:	72 2f                	jb     1e2d <sysEnter_Vector-0x12e1d3>
    1dfe:	6c                   	ins    BYTE PTR es:[edi],dx
    1dff:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1e06:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    1e0c:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    1e13:	75 2f                	jne    1e44 <sysEnter_Vector-0x12e1bc>
    1e15:	39 2f                	cmp    DWORD PTR [edi],ebp
    1e17:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1e1e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1e21:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1e25:	65 00 00             	add    BYTE PTR gs:[eax],al
    1e28:	73 74                	jae    1e9e <sysEnter_Vector-0x12e162>
    1e2a:	72 63                	jb     1e8f <sysEnter_Vector-0x12e171>
    1e2c:	61                   	popa   
    1e2d:	74 2e                	je     1e5d <sysEnter_Vector-0x12e1a3>
    1e2f:	63 00                	arpl   WORD PTR [eax],ax
    1e31:	01 00                	add    DWORD PTR [eax],eax
    1e33:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1e36:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
    1e3d:	02 
    1e3e:	00 00                	add    BYTE PTR [eax],al
    1e40:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1e43:	6d                   	ins    DWORD PTR es:[edi],dx
    1e44:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1e45:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1e46:	2e 68 00 03 00 00    	cs push 0x300
    1e4c:	00 05 04 00 05 02    	add    BYTE PTR ds:0x2050004,al
    1e52:	78 39                	js     1e8d <sysEnter_Vector-0x12e173>
    1e54:	00 9f 03 1e 01 05    	add    BYTE PTR [edi+0x5011e03],bl
    1e5a:	16                   	push   ss
    1e5b:	08 59 05             	or     BYTE PTR [ecx+0x5],bl
    1e5e:	06                   	push   es
    1e5f:	d6                   	(bad)  
    1e60:	05 0d 08 3d 05       	add    eax,0x53d080d
    1e65:	04 3d                	add    al,0x3d
    1e67:	5b                   	pop    ebx
    1e68:	05 16 08 59 05       	add    eax,0x5590816
    1e6d:	06                   	push   es
    1e6e:	d6                   	(bad)  
    1e6f:	05 0d 08 3d 05       	add    eax,0x53d080d
    1e74:	04 3d                	add    al,0x3d
    1e76:	05 01 5b 05 0c       	add    eax,0xc055b01
    1e7b:	08 59 05             	or     BYTE PTR [ecx+0x5],bl
    1e7e:	19 75 05             	sbb    DWORD PTR [ebp+0x5],esi
    1e81:	08 08                	or     BYTE PTR [eax],cl
    1e83:	14 05                	adc    al,0x5
    1e85:	14 83                	adc    al,0x83
    1e87:	84 05 17 68 05 06    	test   BYTE PTR ds:0x6056817,al
    1e8d:	d6                   	(bad)  
    1e8e:	05 0d 08 67 05       	add    eax,0x567080d
    1e93:	01 3d 5b 05 0c 08    	add    DWORD PTR ds:0x80c055b,edi
    1e99:	3d 05 01 08 3d       	cmp    eax,0x3d080105
    1e9e:	02 02                	add    al,BYTE PTR [edx]
    1ea0:	00 01                	add    BYTE PTR [ecx],al
    1ea2:	01 bc 00 00 00 03 00 	add    DWORD PTR [eax+eax*1+0x30000],edi
    1ea9:	7f 00                	jg     1eab <sysEnter_Vector-0x12e155>
    1eab:	00 00                	add    BYTE PTR [eax],al
    1ead:	01 01                	add    DWORD PTR [ecx],eax
    1eaf:	fb                   	sti    
    1eb0:	0e                   	push   cs
    1eb1:	0d 00 01 01 01       	or     eax,0x1010100
    1eb6:	01 00                	add    DWORD PTR [eax],eax
    1eb8:	00 00                	add    BYTE PTR [eax],al
    1eba:	01 00                	add    DWORD PTR [eax],eax
    1ebc:	00 01                	add    BYTE PTR [ecx],al
    1ebe:	73 72                	jae    1f32 <sysEnter_Vector-0x12e0ce>
    1ec0:	63 2f                	arpl   WORD PTR [edi],bp
    1ec2:	73 74                	jae    1f38 <sysEnter_Vector-0x12e0c8>
    1ec4:	72 69                	jb     1f2f <sysEnter_Vector-0x12e0d1>
    1ec6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1ec7:	67 73 00             	addr16 jae 1eca <sysEnter_Vector-0x12e136>
    1eca:	2f                   	das    
    1ecb:	75 73                	jne    1f40 <sysEnter_Vector-0x12e0c0>
    1ecd:	72 2f                	jb     1efe <sysEnter_Vector-0x12e102>
    1ecf:	6c                   	ins    BYTE PTR es:[edi],dx
    1ed0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1ed7:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    1edd:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    1ee4:	75 2f                	jne    1f15 <sysEnter_Vector-0x12e0eb>
    1ee6:	39 2f                	cmp    DWORD PTR [edi],ebp
    1ee8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1eef:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1ef2:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1ef6:	65 00 00             	add    BYTE PTR gs:[eax],al
    1ef9:	73 74                	jae    1f6f <sysEnter_Vector-0x12e091>
    1efb:	72 63                	jb     1f60 <sysEnter_Vector-0x12e0a0>
    1efd:	6d                   	ins    DWORD PTR es:[edi],dx
    1efe:	70 2e                	jo     1f2e <sysEnter_Vector-0x12e0d2>
    1f00:	63 00                	arpl   WORD PTR [eax],ax
    1f02:	01 00                	add    DWORD PTR [eax],eax
    1f04:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1f07:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1f0e:	63 
    1f0f:	2e 68 00 02 00 00    	cs push 0x200
    1f15:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1f18:	6d                   	ins    DWORD PTR es:[edi],dx
    1f19:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f1a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1f1b:	2e 68 00 03 00 00    	cs push 0x300
    1f21:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1f28:	03 00                	add    eax,DWORD PTR [eax]
    1f2a:	00 00                	add    BYTE PTR [eax],al
    1f2c:	05 01 00 05 02       	add    eax,0x2050001
    1f31:	93                   	xchg   ebx,eax
    1f32:	3a 00                	cmp    al,BYTE PTR [eax]
    1f34:	9f                   	lahf   
    1f35:	03 1a                	add    ebx,DWORD PTR [edx]
    1f37:	01 05 21 08 59 3d    	add    DWORD PTR ds:0x3d590821,eax
    1f3d:	05 1f 41 05 0a       	add    eax,0xa05411f
    1f42:	58                   	pop    eax
    1f43:	05 1f 67 05 0a       	add    eax,0xa05671f
    1f48:	58                   	pop    eax
    1f49:	67 05 0c 67 05 03    	addr16 add eax,0x305670c
    1f4f:	d8 05 0d 92 05 01    	fadd   DWORD PTR ds:0x105920d
    1f55:	bb 77 05 0c 08       	mov    ebx,0x80c0577
    1f5a:	13 05 01 d7 02 02    	adc    eax,DWORD PTR ds:0x202d701
    1f60:	00 01                	add    BYTE PTR [ecx],al
    1f62:	01 f5                	add    ebp,esi
    1f64:	00 00                	add    BYTE PTR [eax],al
    1f66:	00 03                	add    BYTE PTR [ebx],al
    1f68:	00 2b                	add    BYTE PTR [ebx],ch
    1f6a:	00 00                	add    BYTE PTR [eax],al
    1f6c:	00 01                	add    BYTE PTR [ecx],al
    1f6e:	01 fb                	add    ebx,edi
    1f70:	0e                   	push   cs
    1f71:	0d 00 01 01 01       	or     eax,0x1010100
    1f76:	01 00                	add    DWORD PTR [eax],eax
    1f78:	00 00                	add    BYTE PTR [eax],al
    1f7a:	01 00                	add    DWORD PTR [eax],eax
    1f7c:	00 01                	add    BYTE PTR [ecx],al
    1f7e:	73 72                	jae    1ff2 <sysEnter_Vector-0x12e00e>
    1f80:	63 2f                	arpl   WORD PTR [edi],bp
    1f82:	73 74                	jae    1ff8 <sysEnter_Vector-0x12e008>
    1f84:	72 69                	jb     1fef <sysEnter_Vector-0x12e011>
    1f86:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1f87:	67 73 00             	addr16 jae 1f8a <sysEnter_Vector-0x12e076>
    1f8a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1f8d:	72 63                	jb     1ff2 <sysEnter_Vector-0x12e00e>
    1f8f:	70 79                	jo     200a <sysEnter_Vector-0x12dff6>
    1f91:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1f94:	01 00                	add    DWORD PTR [eax],eax
    1f96:	00 00                	add    BYTE PTR [eax],al
    1f98:	05 01 00 05 02       	add    eax,0x2050001
    1f9d:	16                   	push   ss
    1f9e:	3b 00                	cmp    eax,DWORD PTR [eax]
    1fa0:	9f                   	lahf   
    1fa1:	16                   	push   ss
    1fa2:	05 0b 08 3d 67       	add    eax,0x673d080b
    1fa7:	05 17 00 02 04       	add    eax,0x4020017
    1fac:	01 20                	add    DWORD PTR [eax],esp
    1fae:	05 0f 00 02 04       	add    eax,0x402000f
    1fb3:	01 90 05 14 00 02    	add    DWORD PTR [eax+0x2001405],edx
    1fb9:	04 01                	add    al,0x1
    1fbb:	90                   	nop
    1fbc:	05 12 00 02 04       	add    eax,0x4020012
    1fc1:	01 3c 05 0d 00 02 04 	add    DWORD PTR [eax*1+0x402000d],edi
    1fc8:	01 2e                	add    DWORD PTR [esi],ebp
    1fca:	05 0b 00 02 04       	add    eax,0x402000b
    1fcf:	01 3c 05 07 4c 05 0c 	add    DWORD PTR [eax*1+0xc054c07],edi
    1fd6:	67 05 01 3d 32 05    	addr16 add eax,0x5323d01
    1fdc:	0b 08                	or     ecx,DWORD PTR [eax]
    1fde:	3d 67 05 17 00       	cmp    eax,0x170567
    1fe3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1fe6:	20 05 0f 00 02 04    	and    BYTE PTR ds:0x402000f,al
    1fec:	01 90 05 14 00 02    	add    DWORD PTR [eax+0x2001405],edx
    1ff2:	04 01                	add    al,0x1
    1ff4:	90                   	nop
    1ff5:	05 12 00 02 04       	add    eax,0x4020012
    1ffa:	01 3c 05 0d 00 02 04 	add    DWORD PTR [eax*1+0x402000d],edi
    2001:	01 2e                	add    DWORD PTR [esi],ebp
    2003:	05 0b 00 02 04       	add    eax,0x402000b
    2008:	01 3c 05 07 4c 05 0c 	add    DWORD PTR [eax*1+0xc054c07],edi
    200f:	67 05 01 3d 32 05    	addr16 add eax,0x5323d01
    2015:	0b 08                	or     ecx,DWORD PTR [eax]
    2017:	3d 67 05 17 00       	cmp    eax,0x170567
    201c:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    201f:	20 05 0f 00 02 04    	and    BYTE PTR ds:0x402000f,al
    2025:	02 90 05 14 00 02    	add    dl,BYTE PTR [eax+0x2001405]
    202b:	04 02                	add    al,0x2
    202d:	90                   	nop
    202e:	05 12 00 02 04       	add    eax,0x4020012
    2033:	02 3c 05 0d 00 02 04 	add    bh,BYTE PTR [eax*1+0x402000d]
    203a:	02 2e                	add    ch,BYTE PTR [esi]
    203c:	05 0b 00 02 04       	add    eax,0x402000b
    2041:	02 3c 05 28 00 02 04 	add    bh,BYTE PTR [eax*1+0x4020028]
    2048:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
    204b:	20 00                	and    BYTE PTR [eax],al
    204d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    2050:	90                   	nop
    2051:	05 0c 4c 05 01       	add    eax,0x1054c0c
    2056:	3d 02 02 00 01       	cmp    eax,0x1000202
    205b:	01 d7                	add    edi,edx
    205d:	00 00                	add    BYTE PTR [eax],al
    205f:	00 03                	add    BYTE PTR [ebx],al
    2061:	00 81 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],al
    2067:	01 fb                	add    ebx,edi
    2069:	0e                   	push   cs
    206a:	0d 00 01 01 01       	or     eax,0x1010100
    206f:	01 00                	add    DWORD PTR [eax],eax
    2071:	00 00                	add    BYTE PTR [eax],al
    2073:	01 00                	add    DWORD PTR [eax],eax
    2075:	00 01                	add    BYTE PTR [ecx],al
    2077:	73 72                	jae    20eb <sysEnter_Vector-0x12df15>
    2079:	63 2f                	arpl   WORD PTR [edi],bp
    207b:	73 74                	jae    20f1 <sysEnter_Vector-0x12df0f>
    207d:	72 69                	jb     20e8 <sysEnter_Vector-0x12df18>
    207f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2080:	67 73 00             	addr16 jae 2083 <sysEnter_Vector-0x12df7d>
    2083:	2f                   	das    
    2084:	75 73                	jne    20f9 <sysEnter_Vector-0x12df07>
    2086:	72 2f                	jb     20b7 <sysEnter_Vector-0x12df49>
    2088:	6c                   	ins    BYTE PTR es:[edi],dx
    2089:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    2090:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    2096:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    209d:	75 2f                	jne    20ce <sysEnter_Vector-0x12df32>
    209f:	39 2f                	cmp    DWORD PTR [edi],ebp
    20a1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    20a8:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    20ab:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    20af:	65 00 00             	add    BYTE PTR gs:[eax],al
    20b2:	73 74                	jae    2128 <sysEnter_Vector-0x12ded8>
    20b4:	72 69                	jb     211f <sysEnter_Vector-0x12dee1>
    20b6:	73 6e                	jae    2126 <sysEnter_Vector-0x12deda>
    20b8:	75 6d                	jne    2127 <sysEnter_Vector-0x12ded9>
    20ba:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    20bd:	01 00                	add    DWORD PTR [eax],eax
    20bf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    20c2:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    20c9:	63 
    20ca:	2e 68 00 02 00 00    	cs push 0x200
    20d0:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    20d3:	6d                   	ins    DWORD PTR es:[edi],dx
    20d4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    20d5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    20d6:	2e 68 00 03 00 00    	cs push 0x300
    20dc:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    20e3:	03 00                	add    eax,DWORD PTR [eax]
    20e5:	00 00                	add    BYTE PTR [eax],al
    20e7:	05 1b 00 05 02       	add    eax,0x205001b
    20ec:	e9 3b 00 9f 1a       	jmp    1a9f212c <sysEnter_Vector+0x1a8c212c>
    20f1:	05 08 08 91 05       	add    eax,0x5910808
    20f6:	12 00                	adc    al,BYTE PTR [eax]
    20f8:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    20fb:	66 05 26 00          	add    ax,0x26
    20ff:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    2102:	66 05 0c 75          	add    ax,0x750c
    2106:	05 01 59 31 05       	add    eax,0x5315901
    210b:	09 08                	or     DWORD PTR [eax],ecx
    210d:	3d 05 0b 76 05       	cmp    eax,0x5760b05
    2112:	1a 2f                	sbb    ch,BYTE PTR [edi]
    2114:	05 1e 82 05 0e       	add    eax,0xe05821e
    2119:	58                   	pop    eax
    211a:	05 0d ba 05 0c       	add    eax,0xc05ba0d
    211f:	3c 05                	cmp    al,0x5
    2121:	14 4b                	adc    al,0x4b
    2123:	05 0c 72 05 10       	add    eax,0x1005720c
    2128:	90                   	nop
    2129:	05 0b 58 05 0c       	add    eax,0xc05580b
    212e:	4d                   	dec    ebp
    212f:	05 01 5a 02 02       	add    eax,0x2025a01
    2134:	00 01                	add    BYTE PTR [ecx],al
    2136:	01 e0                	add    eax,esp
    2138:	00 00                	add    BYTE PTR [eax],al
    213a:	00 03                	add    BYTE PTR [ebx],al
    213c:	00 8b 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],cl
    2142:	01 fb                	add    ebx,edi
    2144:	0e                   	push   cs
    2145:	0d 00 01 01 01       	or     eax,0x1010100
    214a:	01 00                	add    DWORD PTR [eax],eax
    214c:	00 00                	add    BYTE PTR [eax],al
    214e:	01 00                	add    DWORD PTR [eax],eax
    2150:	00 01                	add    BYTE PTR [ecx],al
    2152:	73 72                	jae    21c6 <sysEnter_Vector-0x12de3a>
    2154:	63 2f                	arpl   WORD PTR [edi],bp
    2156:	73 74                	jae    21cc <sysEnter_Vector-0x12de34>
    2158:	72 69                	jb     21c3 <sysEnter_Vector-0x12de3d>
    215a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    215b:	67 73 00             	addr16 jae 215e <sysEnter_Vector-0x12dea2>
    215e:	2f                   	das    
    215f:	75 73                	jne    21d4 <sysEnter_Vector-0x12de2c>
    2161:	72 2f                	jb     2192 <sysEnter_Vector-0x12de6e>
    2163:	6c                   	ins    BYTE PTR es:[edi],dx
    2164:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    216b:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    2171:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    2178:	75 2f                	jne    21a9 <sysEnter_Vector-0x12de57>
    217a:	39 2f                	cmp    DWORD PTR [edi],ebp
    217c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2183:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    2186:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    218a:	65 00 00             	add    BYTE PTR gs:[eax],al
    218d:	73 74                	jae    2203 <sysEnter_Vector-0x12ddfd>
    218f:	72 6c                	jb     21fd <sysEnter_Vector-0x12de03>
    2191:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2193:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    2196:	01 00                	add    DWORD PTR [eax],eax
    2198:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    219b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    21a2:	63 
    21a3:	2e 68 00 02 00 00    	cs push 0x200
    21a9:	73 74                	jae    221f <sysEnter_Vector-0x12dde1>
    21ab:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
    21b2:	02 
    21b3:	00 00                	add    BYTE PTR [eax],al
    21b5:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    21b8:	6d                   	ins    DWORD PTR es:[edi],dx
    21b9:	6f                   	outs   dx,DWORD PTR ds:[esi]
    21ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
    21bb:	2e 68 00 03 00 00    	cs push 0x300
    21c1:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    21c8:	03 00                	add    eax,DWORD PTR [eax]
    21ca:	00 00                	add    BYTE PTR [eax],al
    21cc:	05 21 00 05 02       	add    eax,0x2050021
    21d1:	7a 3c                	jp     220f <sysEnter_Vector-0x12ddf1>
    21d3:	00 9f 15 05 12 08    	add    BYTE PTR [edi+0x8120515],bl
    21d9:	3d 05 0f 75 05       	cmp    eax,0x5750f05
    21de:	14 2f                	adc    al,0x2f
    21e0:	49                   	dec    ecx
    21e1:	05 0f ac 05 10       	add    eax,0x1005ac0f
    21e6:	4c                   	dec    esp
    21e7:	05 01 3d 31 05       	add    eax,0x5313d01
    21ec:	0c 08                	or     al,0x8
    21ee:	13 05 01 ad 31 05    	adc    eax,DWORD PTR ds:0x531ad01
    21f4:	0a 08                	or     cl,BYTE PTR [eax]
    21f6:	3d 05 09 75 05       	cmp    eax,0x5750905
    21fb:	0e                   	push   cs
    21fc:	2f                   	das    
    21fd:	49                   	dec    ecx
    21fe:	05 09 ac 05 19       	add    eax,0x1905ac09
    2203:	00 02                	add    BYTE PTR [edx],al
    2205:	04 01                	add    al,0x1
    2207:	4a                   	dec    edx
    2208:	05 0a 84 05 01       	add    eax,0x105840a
    220d:	3d 31 05 0c 08       	cmp    eax,0x80c0531
    2212:	13 05 01 e5 02 02    	adc    eax,DWORD PTR ds:0x202e501
    2218:	00 01                	add    BYTE PTR [ecx],al
    221a:	01 f8                	add    eax,edi
    221c:	00 00                	add    BYTE PTR [eax],al
    221e:	00 03                	add    BYTE PTR [ebx],al
    2220:	00 5e 00             	add    BYTE PTR [esi+0x0],bl
    2223:	00 00                	add    BYTE PTR [eax],al
    2225:	01 01                	add    DWORD PTR [ecx],eax
    2227:	fb                   	sti    
    2228:	0e                   	push   cs
    2229:	0d 00 01 01 01       	or     eax,0x1010100
    222e:	01 00                	add    DWORD PTR [eax],eax
    2230:	00 00                	add    BYTE PTR [eax],al
    2232:	01 00                	add    DWORD PTR [eax],eax
    2234:	00 01                	add    BYTE PTR [ecx],al
    2236:	73 72                	jae    22aa <sysEnter_Vector-0x12dd56>
    2238:	63 2f                	arpl   WORD PTR [edi],bp
    223a:	73 74                	jae    22b0 <sysEnter_Vector-0x12dd50>
    223c:	72 69                	jb     22a7 <sysEnter_Vector-0x12dd59>
    223e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    223f:	67 73 00             	addr16 jae 2242 <sysEnter_Vector-0x12ddbe>
    2242:	2f                   	das    
    2243:	75 73                	jne    22b8 <sysEnter_Vector-0x12dd48>
    2245:	72 2f                	jb     2276 <sysEnter_Vector-0x12dd8a>
    2247:	6c                   	ins    BYTE PTR es:[edi],dx
    2248:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    224f:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    2255:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    225c:	75 2f                	jne    228d <sysEnter_Vector-0x12dd73>
    225e:	39 2f                	cmp    DWORD PTR [edi],ebp
    2260:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2267:	00 00                	add    BYTE PTR [eax],al
    2269:	73 74                	jae    22df <sysEnter_Vector-0x12dd21>
    226b:	72 6e                	jb     22db <sysEnter_Vector-0x12dd25>
    226d:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    2270:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    2273:	01 00                	add    DWORD PTR [eax],eax
    2275:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    2278:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
    227f:	02 
    2280:	00 00                	add    BYTE PTR [eax],al
    2282:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    2288:	2c 3d                	sub    al,0x3d
    228a:	00 9f 03 0c 01 05    	add    BYTE PTR [edi+0x5010c03],bl
    2290:	05 08 13 05 06       	add    eax,0x6051308
    2295:	2f                   	das    
    2296:	05 0d 66 05 05       	add    eax,0x505660d
    229b:	66 05 0f 4b          	add    ax,0x4b0f
    229f:	05 26 66 05 41       	add    eax,0x41056626
    22a4:	66 00 02             	data16 add BYTE PTR [edx],al
    22a7:	04 01                	add    al,0x1
    22a9:	06                   	push   es
    22aa:	4a                   	dec    edx
    22ab:	00 02                	add    BYTE PTR [edx],al
    22ad:	04 02                	add    al,0x2
    22af:	74 05                	je     22b6 <sysEnter_Vector-0x12dd4a>
    22b1:	0b 06                	or     eax,DWORD PTR [esi]
    22b3:	75 05                	jne    22ba <sysEnter_Vector-0x12dd46>
    22b5:	0a 66 05             	or     ah,BYTE PTR [esi+0x5]
    22b8:	0d 4b 05 16 70       	or     eax,0x7016054b
    22bd:	05 1c 4a 05 20       	add    eax,0x20054a1c
    22c2:	4a                   	dec    edx
    22c3:	05 05 00 02 04       	add    eax,0x4020005
    22c8:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
    22cb:	0c 6b                	or     al,0x6b
    22cd:	05 01 59 31 05       	add    eax,0x5315901
    22d2:	05 08 13 05 06       	add    eax,0x6051308
    22d7:	2f                   	das    
    22d8:	05 0d 66 05 05       	add    eax,0x505660d
    22dd:	66 05 0f 4b          	add    ax,0x4b0f
    22e1:	05 26 66 05 41       	add    eax,0x41056626
    22e6:	66 00 02             	data16 add BYTE PTR [edx],al
    22e9:	04 01                	add    al,0x1
    22eb:	06                   	push   es
    22ec:	4a                   	dec    edx
    22ed:	00 02                	add    BYTE PTR [edx],al
    22ef:	04 02                	add    al,0x2
    22f1:	74 05                	je     22f8 <sysEnter_Vector-0x12dd08>
    22f3:	0b 06                	or     eax,DWORD PTR [esi]
    22f5:	75 05                	jne    22fc <sysEnter_Vector-0x12dd04>
    22f7:	0a 66 05             	or     ah,BYTE PTR [esi+0x5]
    22fa:	0d 4b 05 16 70       	or     eax,0x7016054b
    22ff:	05 1c 4a 05 20       	add    eax,0x20054a1c
    2304:	4a                   	dec    edx
    2305:	05 05 00 02 04       	add    eax,0x4020005
    230a:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
    230d:	0c 6b                	or     al,0x6b
    230f:	05 01 59 02 02       	add    eax,0x2025901
    2314:	00 01                	add    BYTE PTR [ecx],al
    2316:	01 be 00 00 00 03    	add    DWORD PTR [esi+0x3000000],edi
    231c:	00 5e 00             	add    BYTE PTR [esi+0x0],bl
    231f:	00 00                	add    BYTE PTR [eax],al
    2321:	01 01                	add    DWORD PTR [ecx],eax
    2323:	fb                   	sti    
    2324:	0e                   	push   cs
    2325:	0d 00 01 01 01       	or     eax,0x1010100
    232a:	01 00                	add    DWORD PTR [eax],eax
    232c:	00 00                	add    BYTE PTR [eax],al
    232e:	01 00                	add    DWORD PTR [eax],eax
    2330:	00 01                	add    BYTE PTR [ecx],al
    2332:	73 72                	jae    23a6 <sysEnter_Vector-0x12dc5a>
    2334:	63 2f                	arpl   WORD PTR [edi],bp
    2336:	73 74                	jae    23ac <sysEnter_Vector-0x12dc54>
    2338:	72 69                	jb     23a3 <sysEnter_Vector-0x12dc5d>
    233a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    233b:	67 73 00             	addr16 jae 233e <sysEnter_Vector-0x12dcc2>
    233e:	2f                   	das    
    233f:	75 73                	jne    23b4 <sysEnter_Vector-0x12dc4c>
    2341:	72 2f                	jb     2372 <sysEnter_Vector-0x12dc8e>
    2343:	6c                   	ins    BYTE PTR es:[edi],dx
    2344:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    234b:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    2351:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    2358:	75 2f                	jne    2389 <sysEnter_Vector-0x12dc77>
    235a:	39 2f                	cmp    DWORD PTR [edi],ebp
    235c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2363:	00 00                	add    BYTE PTR [eax],al
    2365:	73 74                	jae    23db <sysEnter_Vector-0x12dc25>
    2367:	72 6e                	jb     23d7 <sysEnter_Vector-0x12dc29>
    2369:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    236c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    236f:	01 00                	add    DWORD PTR [eax],eax
    2371:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    2374:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
    237b:	02 
    237c:	00 00                	add    BYTE PTR [eax],al
    237e:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    2384:	02 3e                	add    bh,BYTE PTR [esi]
    2386:	00 9f 03 0d 01 05    	add    BYTE PTR [edi+0x5010d03],bl
    238c:	0b 08                	or     ecx,DWORD PTR [eax]
    238e:	3d 67 05 0c 2f       	cmp    eax,0x2f0c0567
    2393:	05 04 90 05 09       	add    eax,0x9059004
    2398:	90                   	nop
    2399:	05 07 3c 05 02       	add    eax,0x2053c07
    239e:	2f                   	das    
    239f:	05 0b 48 05 15       	add    eax,0x1505480b
    23a4:	00 02                	add    BYTE PTR [edx],al
    23a6:	04 01                	add    al,0x1
    23a8:	66 05 12 00          	add    ax,0x12
    23ac:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    23af:	66 05 0b 4e          	add    ax,0x4e0b
    23b3:	05 04 2f 05 07       	add    eax,0x7052f04
    23b8:	90                   	nop
    23b9:	05 02 3d 05 0b       	add    eax,0xb053d02
    23be:	48                   	dec    eax
    23bf:	05 08 6a 05 0b       	add    eax,0xb056a08
    23c4:	67 05 0c 67 05 01    	addr16 add eax,0x105670c
    23ca:	3d 31 05 0c 08       	cmp    eax,0x80c0531
    23cf:	13 05 01 08 13 02    	adc    eax,DWORD PTR ds:0x2130801
    23d5:	02 00                	add    al,BYTE PTR [eax]
    23d7:	01 01                	add    DWORD PTR [ecx],eax
    23d9:	61                   	popa   
    23da:	01 00                	add    DWORD PTR [eax],eax
    23dc:	00 03                	add    BYTE PTR [ebx],al
    23de:	00 2b                	add    BYTE PTR [ebx],ch
    23e0:	00 00                	add    BYTE PTR [eax],al
    23e2:	00 01                	add    BYTE PTR [ecx],al
    23e4:	01 fb                	add    ebx,edi
    23e6:	0e                   	push   cs
    23e7:	0d 00 01 01 01       	or     eax,0x1010100
    23ec:	01 00                	add    DWORD PTR [eax],eax
    23ee:	00 00                	add    BYTE PTR [eax],al
    23f0:	01 00                	add    DWORD PTR [eax],eax
    23f2:	00 01                	add    BYTE PTR [ecx],al
    23f4:	73 72                	jae    2468 <sysEnter_Vector-0x12db98>
    23f6:	63 2f                	arpl   WORD PTR [edi],bp
    23f8:	73 74                	jae    246e <sysEnter_Vector-0x12db92>
    23fa:	72 69                	jb     2465 <sysEnter_Vector-0x12db9b>
    23fc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    23fd:	67 73 00             	addr16 jae 2400 <sysEnter_Vector-0x12dc00>
    2400:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    2403:	72 6f                	jb     2474 <sysEnter_Vector-0x12db8c>
    2405:	75 6c                	jne    2473 <sysEnter_Vector-0x12db8d>
    2407:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    240a:	01 00                	add    DWORD PTR [eax],eax
    240c:	00 00                	add    BYTE PTR [eax],al
    240e:	05 01 00 05 02       	add    eax,0x2050001
    2413:	96                   	xchg   esi,eax
    2414:	3e 00 9f 03 3b 01 05 	add    BYTE PTR ds:[edi+0x5013b03],bl
    241b:	17                   	pop    ss
    241c:	08 67 05             	or     BYTE PTR [edi+0x5],ah
    241f:	0f 40 05 09 00 02 04 	cmovo  eax,DWORD PTR ds:0x4020009
    2426:	01 7a 05             	add    DWORD PTR [edx+0x5],edi
    2429:	07                   	pop    es
    242a:	00 02                	add    BYTE PTR [edx],al
    242c:	04 01                	add    al,0x1
    242e:	58                   	pop    eax
    242f:	05 05 00 02 04       	add    eax,0x4020005
    2434:	01 3c 05 02 00 02 04 	add    DWORD PTR [eax*1+0x4020002],edi
    243b:	01 3d 05 05 59 05    	add    DWORD PTR ds:0x5590505,edi
    2441:	07                   	pop    es
    2442:	59                   	pop    ecx
    2443:	05 09 75 05 07       	add    eax,0x7057509
    2448:	58                   	pop    eax
    2449:	05 05 3c 05 0c       	add    eax,0xc053c05
    244e:	59                   	pop    ecx
    244f:	05 09 59 05 07       	add    eax,0x7055909
    2454:	58                   	pop    eax
    2455:	05 05 3c 3d 05       	add    eax,0x53d3c05
    245a:	11 00                	adc    DWORD PTR [eax],eax
    245c:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    245f:	66 05 20 00          	add    ax,0x20
    2463:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    2466:	66 05 13 59          	add    ax,0x5913
    246a:	05 0f 3c 05 20       	add    eax,0x20053c0f
    246f:	00 02                	add    BYTE PTR [edx],al
    2471:	04 01                	add    al,0x1
    2473:	4a                   	dec    edx
    2474:	05 1d 00 02 04       	add    eax,0x402001d
    2479:	01 3c 05 08 4b 05 05 	add    DWORD PTR [eax*1+0x5054b08],edi
    2480:	66 3d 05 08          	cmp    ax,0x805
    2484:	3d 05 05 76 05       	cmp    eax,0x5760505
    2489:	17                   	pop    ss
    248a:	67 00 02             	add    BYTE PTR [bp+si],al
    248d:	04 01                	add    al,0x1
    248f:	06                   	push   es
    2490:	58                   	pop    eax
    2491:	00 02                	add    BYTE PTR [edx],al
    2493:	04 02                	add    al,0x2
    2495:	74 05                	je     249c <sysEnter_Vector-0x12db64>
    2497:	08 00                	or     BYTE PTR [eax],al
    2499:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    249c:	06                   	push   es
    249d:	58                   	pop    eax
    249e:	05 26 3d 05 09       	add    eax,0x9053d26
    24a3:	3c 05                	cmp    al,0x5
    24a5:	26 e5 05             	es in  eax,0x5
    24a8:	24 3c                	and    al,0x3c
    24aa:	05 09 d6 05 0b       	add    eax,0xb05d609
    24af:	2f                   	das    
    24b0:	05 14 58 05 07       	add    eax,0x7055814
    24b5:	59                   	pop    ecx
    24b6:	05 06 3c 59 05       	add    eax,0x5593c06
    24bb:	0c 59                	or     al,0x59
    24bd:	05 0b 82 05 1f       	add    eax,0x1f05820b
    24c2:	59                   	pop    ecx
    24c3:	05 09 00 02 04       	add    eax,0x4020009
    24c8:	01 58 05             	add    DWORD PTR [eax+0x5],ebx
    24cb:	1f                   	pop    ds
    24cc:	00 02                	add    BYTE PTR [edx],al
    24ce:	04 03                	add    al,0x3
    24d0:	58                   	pop    eax
    24d1:	00 02                	add    BYTE PTR [edx],al
    24d3:	04 04                	add    al,0x4
    24d5:	06                   	push   es
    24d6:	74 05                	je     24dd <sysEnter_Vector-0x12db23>
    24d8:	06                   	push   es
    24d9:	00 02                	add    BYTE PTR [edx],al
    24db:	04 06                	add    al,0x6
    24dd:	06                   	push   es
    24de:	58                   	pop    eax
    24df:	31 5a 05             	xor    DWORD PTR [edx+0x5],ebx
    24e2:	0f 00 02             	sldt   WORD PTR [edx]
    24e5:	04 01                	add    al,0x1
    24e7:	66 05 1f 00          	add    ax,0x1f
    24eb:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    24ee:	74 05                	je     24f5 <sysEnter_Vector-0x12db0b>
    24f0:	31 00                	xor    DWORD PTR [eax],eax
    24f2:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    24f5:	4a                   	dec    edx
    24f6:	05 08 67 76 59       	add    eax,0x59766708
    24fb:	67 05 20 03 72 4a    	addr16 add eax,0x4a720320
    2501:	05 1e 58 05 1c       	add    eax,0x1c05581e
    2506:	3c 05                	cmp    al,0x5
    2508:	06                   	push   es
    2509:	3d 05 04 33 3e       	cmp    eax,0x3e330405
    250e:	05 05 03 09 20       	add    eax,0x20090305
    2513:	05 07 67 05 0c       	add    eax,0xc056707
    2518:	75 05                	jne    251f <sysEnter_Vector-0x12dae1>
    251a:	07                   	pop    es
    251b:	67 05 05 2f 05 0b    	addr16 add eax,0xb052f05
    2521:	67 00 02             	add    BYTE PTR [bp+si],al
    2524:	04 01                	add    al,0x1
    2526:	06                   	push   es
    2527:	66 00 02             	data16 add BYTE PTR [edx],al
    252a:	04 02                	add    al,0x2
    252c:	58                   	pop    eax
    252d:	00 02                	add    BYTE PTR [edx],al
    252f:	04 04                	add    al,0x4
    2531:	3c 05                	cmp    al,0x5
    2533:	09 06                	or     DWORD PTR [esi],eax
    2535:	59                   	pop    ecx
    2536:	05 01 2f 02 08       	add    eax,0x8022f01
    253b:	00 01                	add    BYTE PTR [ecx],al
    253d:	01 4f 00             	add    DWORD PTR [edi+0x0],ecx
    2540:	00 00                	add    BYTE PTR [eax],al
    2542:	03 00                	add    eax,DWORD PTR [eax]
    2544:	2d 00 00 00 01       	sub    eax,0x1000000
    2549:	01 fb                	add    ebx,edi
    254b:	0e                   	push   cs
    254c:	0d 00 01 01 01       	or     eax,0x1010100
    2551:	01 00                	add    DWORD PTR [eax],eax
    2553:	00 00                	add    BYTE PTR [eax],al
    2555:	01 00                	add    DWORD PTR [eax],eax
    2557:	00 01                	add    BYTE PTR [ecx],al
    2559:	73 72                	jae    25cd <sysEnter_Vector-0x12da33>
    255b:	63 2f                	arpl   WORD PTR [edi],bp
    255d:	73 74                	jae    25d3 <sysEnter_Vector-0x12da2d>
    255f:	72 69                	jb     25ca <sysEnter_Vector-0x12da36>
    2561:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2562:	67 73 00             	addr16 jae 2565 <sysEnter_Vector-0x12da9b>
    2565:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    2568:	72 70                	jb     25da <sysEnter_Vector-0x12da26>
    256a:	61                   	popa   
    256b:	72 74                	jb     25e1 <sysEnter_Vector-0x12da1f>
    256d:	73 2e                	jae    259d <sysEnter_Vector-0x12da63>
    256f:	63 00                	arpl   WORD PTR [eax],ax
    2571:	01 00                	add    DWORD PTR [eax],eax
    2573:	00 00                	add    BYTE PTR [eax],al
    2575:	05 01 00 05 02       	add    eax,0x2050001
    257a:	18 40 00             	sbb    BYTE PTR [eax+0x0],al
    257d:	9f                   	lahf   
    257e:	13 05 08 08 13 05    	adc    eax,DWORD PTR ds:0x5130808
    2584:	0d 82 05 0c 3d       	or     eax,0x3d0c0582
    2589:	05 01 3d 02 02       	add    eax,0x2023d01
    258e:	00 01                	add    BYTE PTR [ecx],al
    2590:	01 a2 01 00 00 03    	add    DWORD PTR [edx+0x3000001],esp
    2596:	00 2b                	add    BYTE PTR [ebx],ch
    2598:	00 00                	add    BYTE PTR [eax],al
    259a:	00 01                	add    BYTE PTR [ecx],al
    259c:	01 fb                	add    ebx,edi
    259e:	0e                   	push   cs
    259f:	0d 00 01 01 01       	or     eax,0x1010100
    25a4:	01 00                	add    DWORD PTR [eax],eax
    25a6:	00 00                	add    BYTE PTR [eax],al
    25a8:	01 00                	add    DWORD PTR [eax],eax
    25aa:	00 01                	add    BYTE PTR [ecx],al
    25ac:	73 72                	jae    2620 <sysEnter_Vector-0x12d9e0>
    25ae:	63 2f                	arpl   WORD PTR [edi],bp
    25b0:	73 74                	jae    2626 <sysEnter_Vector-0x12d9da>
    25b2:	72 69                	jb     261d <sysEnter_Vector-0x12d9e3>
    25b4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    25b5:	67 73 00             	addr16 jae 25b8 <sysEnter_Vector-0x12da48>
    25b8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    25bb:	72 74                	jb     2631 <sysEnter_Vector-0x12d9cf>
    25bd:	6f                   	outs   dx,DWORD PTR ds:[esi]
    25be:	6c                   	ins    BYTE PTR es:[edi],dx
    25bf:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    25c2:	01 00                	add    DWORD PTR [eax],eax
    25c4:	00 00                	add    BYTE PTR [eax],al
    25c6:	05 01 00 05 02       	add    eax,0x2050001
    25cb:	39 40 00             	cmp    DWORD PTR [eax+0x0],eax
    25ce:	9f                   	lahf   
    25cf:	03 d7                	add    edx,edi
    25d1:	00 01                	add    BYTE PTR [ecx],al
    25d3:	05 17 08 67 05       	add    eax,0x5670817
    25d8:	0f 40 05 09 00 02 04 	cmovo  eax,DWORD PTR ds:0x4020009
    25df:	01 7c 05 07          	add    DWORD PTR [ebp+eax*1+0x7],edi
    25e3:	00 02                	add    BYTE PTR [edx],al
    25e5:	04 01                	add    al,0x1
    25e7:	58                   	pop    eax
    25e8:	05 05 00 02 04       	add    eax,0x4020005
    25ed:	01 3c 05 02 00 02 04 	add    DWORD PTR [eax*1+0x4020002],edi
    25f4:	01 3d 05 05 59 05    	add    DWORD PTR ds:0x5590505,edi
    25fa:	07                   	pop    es
    25fb:	59                   	pop    ecx
    25fc:	05 09 75 05 07       	add    eax,0x7057509
    2601:	58                   	pop    eax
    2602:	05 05 3c 05 0c       	add    eax,0xc053c05
    2607:	59                   	pop    ecx
    2608:	05 09 59 05 07       	add    eax,0x7055909
    260d:	58                   	pop    eax
    260e:	05 05 3c 3d 05       	add    eax,0x53d3c05
    2613:	11 00                	adc    DWORD PTR [eax],eax
    2615:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    2618:	66 05 20 00          	add    ax,0x20
    261c:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    261f:	66 05 13 59          	add    ax,0x5913
    2623:	05 0f 3c 05 20       	add    eax,0x20053c0f
    2628:	00 02                	add    BYTE PTR [edx],al
    262a:	04 01                	add    al,0x1
    262c:	4a                   	dec    edx
    262d:	05 1d 00 02 04       	add    eax,0x402001d
    2632:	01 3c 05 08 4b 05 05 	add    DWORD PTR [eax*1+0x5054b08],edi
    2639:	66 3d 05 08          	cmp    ax,0x805
    263d:	3d 05 05 76 05       	cmp    eax,0x5760505
    2642:	17                   	pop    ss
    2643:	67 00 02             	add    BYTE PTR [bp+si],al
    2646:	04 01                	add    al,0x1
    2648:	06                   	push   es
    2649:	58                   	pop    eax
    264a:	00 02                	add    BYTE PTR [edx],al
    264c:	04 02                	add    al,0x2
    264e:	74 05                	je     2655 <sysEnter_Vector-0x12d9ab>
    2650:	08 00                	or     BYTE PTR [eax],al
    2652:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    2655:	06                   	push   es
    2656:	58                   	pop    eax
    2657:	05 2a 03 13 3c       	add    eax,0x3c13032a
    265c:	00 02                	add    BYTE PTR [edx],al
    265e:	04 01                	add    al,0x1
    2660:	06                   	push   es
    2661:	66 00 02             	data16 add BYTE PTR [edx],al
    2664:	04 02                	add    al,0x2
    2666:	74 05                	je     266d <sysEnter_Vector-0x12d993>
    2668:	14 00                	adc    al,0x0
    266a:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    266d:	06                   	push   es
    266e:	59                   	pop    ecx
    266f:	05 12 00 02 04       	add    eax,0x4020012
    2674:	04 3c                	add    al,0x3c
    2676:	05 09 00 02 04       	add    eax,0x4020009
    267b:	04 d6                	add    al,0xd6
    267d:	05 0c 00 02 04       	add    eax,0x402000c
    2682:	04 3d                	add    al,0x3d
    2684:	05 09 00 02 04       	add    eax,0x4020009
    2689:	04 3c                	add    al,0x3c
    268b:	05 0b 00 02 04       	add    eax,0x402000b
    2690:	04 c9                	add    al,0xc9
    2692:	05 14 00 02 04       	add    eax,0x4020014
    2697:	04 58                	add    al,0x58
    2699:	05 07 59 05 06       	add    eax,0x6055907
    269e:	3c 59                	cmp    al,0x59
    26a0:	05 0c 59 05 0b       	add    eax,0xb05590c
    26a5:	82 05 1f 59 05 09 00 	add    BYTE PTR ds:0x905591f,0x0
    26ac:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    26af:	58                   	pop    eax
    26b0:	05 1f 00 02 04       	add    eax,0x402001f
    26b5:	03 58 00             	add    ebx,DWORD PTR [eax+0x0]
    26b8:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    26bb:	06                   	push   es
    26bc:	74 05                	je     26c3 <sysEnter_Vector-0x12d93d>
    26be:	06                   	push   es
    26bf:	00 02                	add    BYTE PTR [edx],al
    26c1:	04 06                	add    al,0x6
    26c3:	06                   	push   es
    26c4:	58                   	pop    eax
    26c5:	31 5a 05             	xor    DWORD PTR [edx+0x5],ebx
    26c8:	0f 00 02             	sldt   WORD PTR [edx]
    26cb:	04 01                	add    al,0x1
    26cd:	66 05 1f 00          	add    ax,0x1f
    26d1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    26d4:	74 05                	je     26db <sysEnter_Vector-0x12d925>
    26d6:	31 00                	xor    DWORD PTR [eax],eax
    26d8:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    26db:	4a                   	dec    edx
    26dc:	05 08 59 76 59       	add    eax,0x59765908
    26e1:	67 05 20 03 72 4a    	addr16 add eax,0x4a720320
    26e7:	05 1e 58 05 1c       	add    eax,0x1c05581e
    26ec:	3c 05                	cmp    al,0x5
    26ee:	06                   	push   es
    26ef:	3d 05 04 33 3e       	cmp    eax,0x3e330405
    26f4:	05 05 03 09 20       	add    eax,0x20090305
    26f9:	05 18 67 00 02       	add    eax,0x2006718
    26fe:	04 01                	add    al,0x1
    2700:	06                   	push   es
    2701:	66 00 02             	data16 add BYTE PTR [edx],al
    2704:	04 02                	add    al,0x2
    2706:	74 05                	je     270d <sysEnter_Vector-0x12d8f3>
    2708:	07                   	pop    es
    2709:	00 02                	add    BYTE PTR [edx],al
    270b:	04 04                	add    al,0x4
    270d:	06                   	push   es
    270e:	58                   	pop    eax
    270f:	05 0c 4b 05 07       	add    eax,0x7054b0c
    2714:	67 05 05 2f 05 0b    	addr16 add eax,0xb052f05
    271a:	67 00 02             	add    BYTE PTR [bp+si],al
    271d:	04 01                	add    al,0x1
    271f:	06                   	push   es
    2720:	66 00 02             	data16 add BYTE PTR [edx],al
    2723:	04 02                	add    al,0x2
    2725:	58                   	pop    eax
    2726:	00 02                	add    BYTE PTR [edx],al
    2728:	04 04                	add    al,0x4
    272a:	3c 05                	cmp    al,0x5
    272c:	09 06                	or     DWORD PTR [esi],eax
    272e:	59                   	pop    ecx
    272f:	05 01 2f 02 08       	add    eax,0x8022f01
    2734:	00 01                	add    BYTE PTR [ecx],al
    2736:	01 b2 00 00 00 03    	add    DWORD PTR [edx+0x3000000],esi
    273c:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
    273f:	00 00                	add    BYTE PTR [eax],al
    2741:	01 01                	add    DWORD PTR [ecx],eax
    2743:	fb                   	sti    
    2744:	0e                   	push   cs
    2745:	0d 00 01 01 01       	or     eax,0x1010100
    274a:	01 00                	add    DWORD PTR [eax],eax
    274c:	00 00                	add    BYTE PTR [eax],al
    274e:	01 00                	add    DWORD PTR [eax],eax
    2750:	00 01                	add    BYTE PTR [ecx],al
    2752:	73 72                	jae    27c6 <sysEnter_Vector-0x12d83a>
    2754:	63 2f                	arpl   WORD PTR [edi],bp
    2756:	73 74                	jae    27cc <sysEnter_Vector-0x12d834>
    2758:	72 69                	jb     27c3 <sysEnter_Vector-0x12d83d>
    275a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    275b:	67 73 00             	addr16 jae 275e <sysEnter_Vector-0x12d8a2>
    275e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    2761:	72 74                	jb     27d7 <sysEnter_Vector-0x12d829>
    2763:	72 69                	jb     27ce <sysEnter_Vector-0x12d832>
    2765:	6d                   	ins    DWORD PTR es:[edi],dx
    2766:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    2769:	01 00                	add    DWORD PTR [eax],eax
    276b:	00 00                	add    BYTE PTR [eax],al
    276d:	05 01 00 05 02       	add    eax,0x2050001
    2772:	da 41 00             	fiadd  DWORD PTR [ecx+0x0]
    2775:	9f                   	lahf   
    2776:	15 05 0a 08 4b       	adc    eax,0x4b080a05
    277b:	05 18 66 05 0a       	add    eax,0xa056618
    2780:	6b 05 07 30 05 0b 48 	imul   eax,DWORD PTR ds:0xb053007,0x48
    2787:	05 0a 66 05 10       	add    eax,0x1005660a
    278c:	5f                   	pop    edi
    278d:	05 1d f2 05 08       	add    eax,0x805f21d
    2792:	3c 05                	cmp    al,0x5
    2794:	0a 83 05 0b 30 05    	or     al,BYTE PTR [ebx+0x5300b05]
    279a:	0e                   	push   cs
    279b:	90                   	nop
    279c:	05 0a 3a 05 18       	add    eax,0x18053a0a
    27a1:	00 02                	add    BYTE PTR [edx],al
    27a3:	04 01                	add    al,0x1
    27a5:	82 05 15 00 02 04 01 	add    BYTE PTR ds:0x4020015,0x1
    27ac:	66 05 07 51          	add    ax,0x5107
    27b0:	05 0d 84 05 1c       	add    eax,0x1c05840d
    27b5:	00 02                	add    BYTE PTR [edx],al
    27b7:	04 01                	add    al,0x1
    27b9:	20 05 13 00 02 04    	and    BYTE PTR ds:0x4020013,al
    27bf:	01 90 05 18 00 02    	add    DWORD PTR [eax+0x2001805],edx
    27c5:	04 01                	add    al,0x1
    27c7:	90                   	nop
    27c8:	05 16 00 02 04       	add    eax,0x4020016
    27cd:	01 3c 05 0f 00 02 04 	add    DWORD PTR [eax*1+0x402000f],edi
    27d4:	01 2e                	add    DWORD PTR [esi],ebp
    27d6:	05 0d 00 02 04       	add    eax,0x402000d
    27db:	01 3c 05 01 4c 69 05 	add    DWORD PTR [eax*1+0x5694c01],edi
    27e2:	0c 08                	or     al,0x8
    27e4:	3d 05 01 d7 02       	cmp    eax,0x2d70105
    27e9:	02 00                	add    al,BYTE PTR [eax]
    27eb:	01 01                	add    DWORD PTR [ecx],eax
    27ed:	fa                   	cli    
    27ee:	00 00                	add    BYTE PTR [eax],al
    27f0:	00 03                	add    BYTE PTR [ebx],al
    27f2:	00 87 00 00 00 01    	add    BYTE PTR [edi+0x1000000],al
    27f8:	01 fb                	add    ebx,edi
    27fa:	0e                   	push   cs
    27fb:	0d 00 01 01 01       	or     eax,0x1010100
    2800:	01 00                	add    DWORD PTR [eax],eax
    2802:	00 00                	add    BYTE PTR [eax],al
    2804:	01 00                	add    DWORD PTR [eax],eax
    2806:	00 01                	add    BYTE PTR [ecx],al
    2808:	73 72                	jae    287c <sysEnter_Vector-0x12d784>
    280a:	63 00                	arpl   WORD PTR [eax],ax
    280c:	2f                   	das    
    280d:	75 73                	jne    2882 <sysEnter_Vector-0x12d77e>
    280f:	72 2f                	jb     2840 <sysEnter_Vector-0x12d7c0>
    2811:	6c                   	ins    BYTE PTR es:[edi],dx
    2812:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    2819:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    281f:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    2826:	75 2f                	jne    2857 <sysEnter_Vector-0x12d7a9>
    2828:	39 2f                	cmp    DWORD PTR [edi],ebp
    282a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2831:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    2834:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    2838:	65 00 00             	add    BYTE PTR gs:[eax],al
    283b:	73 74                	jae    28b1 <sysEnter_Vector-0x12d74f>
    283d:	72 72                	jb     28b1 <sysEnter_Vector-0x12d74f>
    283f:	65 70 6c             	gs jo  28ae <sysEnter_Vector-0x12d752>
    2842:	61                   	popa   
    2843:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    2846:	63 00                	arpl   WORD PTR [eax],ax
    2848:	01 00                	add    DWORD PTR [eax],eax
    284a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    284d:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x200
    2854:	02 
    2855:	00 00                	add    BYTE PTR [eax],al
    2857:	73 74                	jae    28cd <sysEnter_Vector-0x12d733>
    2859:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    2860:	63 
    2861:	2e 68 00 02 00 00    	cs push 0x200
    2867:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    286a:	6d                   	ins    DWORD PTR es:[edi],dx
    286b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    286c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    286d:	2e 68 00 03 00 00    	cs push 0x300
    2873:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    287a:	03 00                	add    eax,DWORD PTR [eax]
    287c:	00 00                	add    BYTE PTR [eax],al
    287e:	05 01 00 05 02       	add    eax,0x2050001
    2883:	98                   	cwde   
    2884:	42                   	inc    edx
    2885:	00 9f 03 0d 01 05    	add    BYTE PTR [edi+0x5010d03],bl
    288b:	16                   	push   ss
    288c:	08 67 05             	or     BYTE PTR [edi+0x5],ah
    288f:	0c d6                	or     al,0xd6
    2891:	69 05 0b 76 05 33 5a 	imul   eax,DWORD PTR ds:0x3305760b,0x6609055a
    2898:	05 09 66 
    289b:	05 1b 2e 05 09       	add    eax,0x9052e1b
    28a0:	82 05 1d f3 05 13 66 	add    BYTE PTR ds:0x1305f31d,0x66
    28a7:	05 17 3f 05 0c       	add    eax,0xc053f17
    28ac:	d6                   	(bad)  
    28ad:	05 1d 85 05 1b       	add    eax,0x1b05851d
    28b2:	d6                   	(bad)  
    28b3:	05 30 74 05 11       	add    eax,0x11057430
    28b8:	d6                   	(bad)  
    28b9:	05 09 5b 05 1b       	add    eax,0x1b055b09
    28be:	d6                   	(bad)  
    28bf:	05 09 82 05 16       	add    eax,0x16058209
    28c4:	f3 05 13 d6 05 16    	repz add eax,0x1605d613
    28ca:	03 73 3c             	add    esi,DWORD PTR [ebx+0x3c]
    28cd:	05 0b 08 3c 05       	add    eax,0x53c080b
    28d2:	05 03 11 9e 05       	add    eax,0x59e1103
    28d7:	0c 08                	or     al,0x8
    28d9:	68 05 01 3d 77       	push   0x773d0105
    28de:	05 0c 08 3d 05       	add    eax,0x53d080c
    28e3:	01 08                	add    DWORD PTR [eax],ecx
    28e5:	3d 02 02 00 01       	cmp    eax,0x1000202
    28ea:	01 18                	add    DWORD PTR [eax],ebx
    28ec:	01 00                	add    DWORD PTR [eax],eax
    28ee:	00 03                	add    BYTE PTR [ebx],al
    28f0:	00 37                	add    BYTE PTR [edi],dh
    28f2:	00 00                	add    BYTE PTR [eax],al
    28f4:	00 01                	add    BYTE PTR [ecx],al
    28f6:	01 fb                	add    ebx,edi
    28f8:	0e                   	push   cs
    28f9:	0d 00 01 01 01       	or     eax,0x1010100
    28fe:	01 00                	add    DWORD PTR [eax],eax
    2900:	00 00                	add    BYTE PTR [eax],al
    2902:	01 00                	add    DWORD PTR [eax],eax
    2904:	00 01                	add    BYTE PTR [ecx],al
    2906:	73 72                	jae    297a <sysEnter_Vector-0x12d686>
    2908:	63 00                	arpl   WORD PTR [eax],ax
    290a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2911:	00 00                	add    BYTE PTR [eax],al
    2913:	73 74                	jae    2989 <sysEnter_Vector-0x12d677>
    2915:	72 73                	jb     298a <sysEnter_Vector-0x12d676>
    2917:	74 72                	je     298b <sysEnter_Vector-0x12d675>
    2919:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    291c:	01 00                	add    DWORD PTR [eax],eax
    291e:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    2921:	6d                   	ins    DWORD PTR es:[edi],dx
    2922:	6d                   	ins    DWORD PTR es:[edi],dx
    2923:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2924:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2925:	2e 68 00 02 00 00    	cs push 0x200
    292b:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    2931:	d6                   	(bad)  
    2932:	43                   	inc    ebx
    2933:	00 9f 03 34 01 05    	add    BYTE PTR [edi+0x5013403],bl
    2939:	09 08                	or     DWORD PTR [eax],ecx
    293b:	5f                   	pop    edi
    293c:	05 07 68 05 09       	add    eax,0x9056807
    2941:	3d 05 08 3c 05       	cmp    eax,0x53c0805
    2946:	09 4b 05             	or     DWORD PTR [ebx+0x5],ecx
    2949:	06                   	push   es
    294a:	5b                   	pop    ebx
    294b:	05 11 66 05 05       	add    eax,0x5056611
    2950:	3c 05                	cmp    al,0x5
    2952:	14 4b                	adc    al,0x4b
    2954:	05 10 90 05 18       	add    eax,0x18059010
    2959:	4b                   	dec    ebx
    295a:	05 04 5b 05 0a       	add    eax,0xa055b04
    295f:	3e 05 09 3c 05 0a    	ds add eax,0xa053c09
    2965:	4b                   	dec    ebx
    2966:	05 14 5a 05 10       	add    eax,0x10055a14
    296b:	90                   	nop
    296c:	05 18 4b 05 0c       	add    eax,0xc054b18
    2971:	59                   	pop    ecx
    2972:	05 0a 58 05 14       	add    eax,0x1405580a
    2977:	3c 05                	cmp    al,0x5
    2979:	12 58 05             	adc    bl,BYTE PTR [eax+0x5]
    297c:	09 3c 45 05 03 34 05 	or     DWORD PTR [eax*2+0x5340305],edi
    2983:	04 23                	add    al,0x23
    2985:	05 06 03 73 58       	add    eax,0x58730306
    298a:	05 22 1c 05 0d       	add    eax,0xd051c22
    298f:	00 02                	add    BYTE PTR [edx],al
    2991:	04 01                	add    al,0x1
    2993:	4a                   	dec    edx
    2994:	05 05 00 02 04       	add    eax,0x4020005
    2999:	01 66 05             	add    DWORD PTR [esi+0x5],esp
    299c:	0c 03                	or     al,0x3
    299e:	13 4a 05             	adc    ecx,DWORD PTR [edx+0x5]
    29a1:	01 59 77             	add    DWORD PTR [ecx+0x77],ebx
    29a4:	05 07 08 36 05       	add    eax,0x5360807
    29a9:	09 3d 05 08 3c 05    	or     DWORD PTR ds:0x53c0805,edi
    29af:	09 4b 05             	or     DWORD PTR [ebx+0x5],ecx
    29b2:	06                   	push   es
    29b3:	5b                   	pop    ebx
    29b4:	05 0e 66 05 05       	add    eax,0x505660e
    29b9:	3c 05                	cmp    al,0x5
    29bb:	04 4d                	add    al,0x4d
    29bd:	05 0a 3e 05 09       	add    eax,0x9053e0a
    29c2:	3c 05                	cmp    al,0x5
    29c4:	0a 4b 05             	or     cl,BYTE PTR [ebx+0x5]
    29c7:	0c 5a                	or     al,0x5a
    29c9:	05 0a 58 05 14       	add    eax,0x1405580a
    29ce:	3c 05                	cmp    al,0x5
    29d0:	12 58 05             	adc    bl,BYTE PTR [eax+0x5]
    29d3:	09 3c 47             	or     DWORD PTR [edi+eax*2],edi
    29d6:	05 03 32 05 04       	add    eax,0x4053203
    29db:	23 05 06 03 75 58    	and    eax,DWORD PTR ds:0x58750306
    29e1:	05 22 1e 05 0d       	add    eax,0xd051e22
    29e6:	00 02                	add    BYTE PTR [edx],al
    29e8:	04 01                	add    al,0x1
    29ea:	4a                   	dec    edx
    29eb:	05 05 00 02 04       	add    eax,0x4020005
    29f0:	01 66 05             	add    DWORD PTR [esi+0x5],esp
    29f3:	0c 03                	or     al,0x3
    29f5:	0f 4a 05 01 59 4d 05 	cmovp  eax,DWORD PTR ds:0x54d5901
    29fc:	0c 08                	or     al,0x8
    29fe:	13 05 01 d7 02 02    	adc    eax,DWORD PTR ds:0x202d701
    2a04:	00 01                	add    BYTE PTR [ecx],al
    2a06:	01 e0                	add    eax,esp
    2a08:	05 00 00 03 00       	add    eax,0x30000
    2a0d:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2a0e:	00 00                	add    BYTE PTR [eax],al
    2a10:	00 01                	add    BYTE PTR [ecx],al
    2a12:	01 fb                	add    ebx,edi
    2a14:	0e                   	push   cs
    2a15:	0d 00 01 01 01       	or     eax,0x1010100
    2a1a:	01 00                	add    DWORD PTR [eax],eax
    2a1c:	00 00                	add    BYTE PTR [eax],al
    2a1e:	01 00                	add    DWORD PTR [eax],eax
    2a20:	00 01                	add    BYTE PTR [ecx],al
    2a22:	73 72                	jae    2a96 <sysEnter_Vector-0x12d56a>
    2a24:	63 00                	arpl   WORD PTR [eax],ax
    2a26:	2f                   	das    
    2a27:	75 73                	jne    2a9c <sysEnter_Vector-0x12d564>
    2a29:	72 2f                	jb     2a5a <sysEnter_Vector-0x12d5a6>
    2a2b:	6c                   	ins    BYTE PTR es:[edi],dx
    2a2c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    2a33:	69 36 38 36 2d 6c    	imul   esi,DWORD PTR [esi],0x6c2d3638
    2a39:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [esi+0x75],0x6e672d78
    2a40:	75 2f                	jne    2a71 <sysEnter_Vector-0x12d58f>
    2a42:	39 2f                	cmp    DWORD PTR [edi],ebp
    2a44:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2a4b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    2a4e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    2a52:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    2a55:	2e 2f                	cs das 
    2a57:	2e 2e 2f             	cs cs das 
    2a5a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    2a5e:	6a 2f                	push   0x2f
    2a60:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    2a63:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    2a6a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2a6b:	65 6c                	gs ins BYTE PTR es:[edi],dx
    2a6d:	2f                   	das    
    2a6e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2a75:	00 00                	add    BYTE PTR [eax],al
    2a77:	74 69                	je     2ae2 <sysEnter_Vector-0x12d51e>
    2a79:	6d                   	ins    DWORD PTR es:[edi],dx
    2a7a:	65 2e 63 00          	gs arpl WORD PTR cs:[eax],ax
    2a7e:	01 00                	add    DWORD PTR [eax],eax
    2a80:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    2a83:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    2a8a:	63 
    2a8b:	2e 68 00 02 00 00    	cs push 0x200
    2a91:	74 69                	je     2afc <sysEnter_Vector-0x12d504>
    2a93:	6d                   	ins    DWORD PTR es:[edi],dx
    2a94:	65 2e 68 00 03 00 00 	gs cs push 0x300
    2a9b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    2a9e:	6d                   	ins    DWORD PTR es:[edi],dx
    2a9f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2aa0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2aa1:	2e 68 00 03 00 00    	cs push 0x300
    2aa7:	73 79                	jae    2b22 <sysEnter_Vector-0x12d4de>
    2aa9:	73 63                	jae    2b0e <sysEnter_Vector-0x12d4f2>
    2aab:	61                   	popa   
    2aac:	6c                   	ins    BYTE PTR es:[edi],dx
    2aad:	6c                   	ins    BYTE PTR es:[edi],dx
    2aae:	73 2e                	jae    2ade <sysEnter_Vector-0x12d522>
    2ab0:	68 00 04 00 00       	push   0x400
    2ab5:	00 05 01 00 05 02    	add    BYTE PTR ds:0x2050001,al
    2abb:	0b 45 00             	or     eax,DWORD PTR [ebp+0x0]
    2abe:	9f                   	lahf   
    2abf:	03 1a                	add    ebx,DWORD PTR [edx]
    2ac1:	01 05 0e 08 59 05    	add    DWORD PTR ds:0x559080e,eax
    2ac7:	05 75 05 0c 08       	add    eax,0x80c0575
    2acc:	f3 05 01 3d 78 05    	repz add eax,0x5783d01
    2ad2:	0a 08                	or     cl,BYTE PTR [eax]
    2ad4:	59                   	pop    ecx
    2ad5:	05 07 84 05 0e       	add    eax,0xe058407
    2ada:	76 05                	jbe    2ae1 <sysEnter_Vector-0x12d51f>
    2adc:	0c 3c                	or     al,0x3c
    2ade:	05 0b 08 f3 05       	add    eax,0x5f3080b
    2ae3:	09 3c 05 1c e6 05 11 	or     DWORD PTR [eax*1+0x1105e61c],edi
    2aea:	08 90 05 1d 59 05    	or     BYTE PTR [eax+0x5591d05],dl
    2af0:	25 08 9e 05 11       	and    eax,0x11059e08
    2af5:	d6                   	(bad)  
    2af6:	05 1d 67 05 12       	add    eax,0x1205671d
    2afb:	08 12                	or     BYTE PTR [edx],dl
    2afd:	05 1b 67 05 20       	add    eax,0x2005671b
    2b02:	66 05 12 08          	add    ax,0x812
    2b06:	f2 05 09 67 05 0e    	repnz add eax,0xe056709
    2b0c:	2f                   	das    
    2b0d:	00 02                	add    BYTE PTR [edx],al
    2b0f:	04 01                	add    al,0x1
    2b11:	06                   	push   es
    2b12:	9e                   	sahf   
    2b13:	00 02                	add    BYTE PTR [edx],al
    2b15:	04 04                	add    al,0x4
    2b17:	02 23                	add    ah,BYTE PTR [ebx]
    2b19:	12 00                	adc    al,BYTE PTR [eax]
    2b1b:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2b22:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2b25:	74 05                	je     2b2c <sysEnter_Vector-0x12d4d4>
    2b27:	0b 00                	or     eax,DWORD PTR [eax]
    2b29:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2b2c:	06                   	push   es
    2b2d:	58                   	pop    eax
    2b2e:	05 09 00 02 04       	add    eax,0x4020009
    2b33:	08 3d 05 23 48 05    	or     BYTE PTR ds:0x5482305,bh
    2b39:	13 66 05             	adc    esp,DWORD PTR [esi+0x5]
    2b3c:	23 00                	and    eax,DWORD PTR [eax]
    2b3e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    2b41:	4a                   	dec    edx
    2b42:	00 02                	add    BYTE PTR [edx],al
    2b44:	04 04                	add    al,0x4
    2b46:	06                   	push   es
    2b47:	02 23                	add    ah,BYTE PTR [ebx]
    2b49:	12 05 13 00 02 04    	adc    al,BYTE PTR ds:0x4020013
    2b4f:	05 06 02 26 12       	add    eax,0x12260206
    2b54:	00 02                	add    BYTE PTR [edx],al
    2b56:	04 06                	add    al,0x6
    2b58:	06                   	push   es
    2b59:	74 05                	je     2b60 <sysEnter_Vector-0x12d4a0>
    2b5b:	09 00                	or     DWORD PTR [eax],eax
    2b5d:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2b60:	06                   	push   es
    2b61:	58                   	pop    eax
    2b62:	05 19 94 05 12       	add    eax,0x12059419
    2b67:	90                   	nop
    2b68:	67 05 11 91 05 09    	addr16 add eax,0x9059111
    2b6e:	9f                   	lahf   
    2b6f:	05 14 59 00 02       	add    eax,0x2005914
    2b74:	04 01                	add    al,0x1
    2b76:	06                   	push   es
    2b77:	9e                   	sahf   
    2b78:	00 02                	add    BYTE PTR [edx],al
    2b7a:	04 04                	add    al,0x4
    2b7c:	02 23                	add    ah,BYTE PTR [ebx]
    2b7e:	12 00                	adc    al,BYTE PTR [eax]
    2b80:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2b87:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2b8a:	74 05                	je     2b91 <sysEnter_Vector-0x12d46f>
    2b8c:	29 00                	sub    DWORD PTR [eax],eax
    2b8e:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2b91:	06                   	push   es
    2b92:	58                   	pop    eax
    2b93:	05 23 00 02 04       	add    eax,0x4020023
    2b98:	08 66 05             	or     BYTE PTR [esi+0x5],ah
    2b9b:	0b 00                	or     eax,DWORD PTR [eax]
    2b9d:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2ba0:	08 20                	or     BYTE PTR [eax],ah
    2ba2:	05 0a 00 02 04       	add    eax,0x402000a
    2ba7:	08 3d 05 12 00 02    	or     BYTE PTR ds:0x2001205,bh
    2bad:	04 08                	add    al,0x8
    2baf:	66 05 29 8e          	add    ax,0x8e29
    2bb3:	00 02                	add    BYTE PTR [edx],al
    2bb5:	04 01                	add    al,0x1
    2bb7:	06                   	push   es
    2bb8:	9e                   	sahf   
    2bb9:	00 02                	add    BYTE PTR [edx],al
    2bbb:	04 04                	add    al,0x4
    2bbd:	02 23                	add    ah,BYTE PTR [ebx]
    2bbf:	12 00                	adc    al,BYTE PTR [eax]
    2bc1:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2bc8:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2bcb:	74 05                	je     2bd2 <sysEnter_Vector-0x12d42e>
    2bcd:	3e 00 02             	add    BYTE PTR ds:[edx],al
    2bd0:	04 08                	add    al,0x8
    2bd2:	06                   	push   es
    2bd3:	58                   	pop    eax
    2bd4:	05 38 00 02 04       	add    eax,0x4020038
    2bd9:	08 66 05             	or     BYTE PTR [esi+0x5],ah
    2bdc:	09 00                	or     DWORD PTR [eax],eax
    2bde:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2be1:	08 20                	or     BYTE PTR [eax],ah
    2be3:	05 1a 94 05 12       	add    eax,0x1205941a
    2be8:	82 05 13 67 05 0a 9f 	add    BYTE PTR ds:0xa056713,0x9f
    2bef:	05 01 3d 69 05       	add    eax,0x5693d01
    2bf4:	0c 08                	or     al,0x8
    2bf6:	13 05 01 d7 05 33    	adc    eax,DWORD PTR ds:0x3305d701
    2bfc:	30 05 07 08 3f 05    	xor    BYTE PTR ds:0x53f0807,al
    2c02:	1a 58 05             	sbb    bl,BYTE PTR [eax+0x5]
    2c05:	0e                   	push   cs
    2c06:	d6                   	(bad)  
    2c07:	05 05 2e 05 0a       	add    eax,0xa052e05
    2c0c:	3d 05 01 08 2f       	cmp    eax,0x2f080105
    2c11:	31 05 07 08 3f 05    	xor    DWORD PTR ds:0x53f0807,eax
    2c17:	0e                   	push   cs
    2c18:	58                   	pop    eax
    2c19:	05 05 ba 05 0a       	add    eax,0xa05ba05
    2c1e:	3d 05 01 e5 05       	cmp    eax,0x5e50105
    2c23:	47                   	inc    edi
    2c24:	30 05 0c 08 13 05    	xor    BYTE PTR ds:0x513080c,al
    2c2a:	01 d7                	add    edi,edx
    2c2c:	05 29 30 05 11       	add    eax,0x11053029
    2c31:	08 7c 05 19          	or     BYTE PTR [ebp+eax*1+0x19],bh
    2c35:	66 05 22 58          	add    ax,0x5822
    2c39:	05 11 08 90 91       	add    eax,0x91900811
    2c3e:	05 0c 02 2b 13       	add    eax,0x132b020c
    2c43:	05 06 58 05 13       	add    eax,0x13055806
    2c48:	4b                   	dec    ebx
    2c49:	05 0a c9 05 12       	add    eax,0x1205c90a
    2c4e:	66 92                	xchg   dx,ax
    2c50:	05 1a 66 05 23       	add    eax,0x2305661a
    2c55:	66 05 12 08          	add    ax,0x812
    2c59:	90                   	nop
    2c5a:	05 18 91 05 21       	add    eax,0x21059118
    2c5f:	66 05 11 08          	add    ax,0x811
    2c63:	f2 05 0c 67 05 06    	repnz add eax,0x605670c
    2c69:	66 05 13 4b          	add    ax,0x4b13
    2c6d:	05 0a e5 05 13       	add    eax,0x1305e50a
    2c72:	66 05 0e 92          	add    ax,0x920e
    2c76:	05 07 66 05 18       	add    eax,0x18056607
    2c7b:	08 75 05             	or     BYTE PTR [ebp+0x5],dh
    2c7e:	22 66 05             	and    ah,BYTE PTR [esi+0x5]
    2c81:	11 08                	adc    DWORD PTR [eax],ecx
    2c83:	e4 05                	in     al,0x5
    2c85:	0c 67                	or     al,0x67
    2c87:	05 06 66 05 14       	add    eax,0x14056606
    2c8c:	4b                   	dec    ebx
    2c8d:	05 08 e5 05 12       	add    eax,0x1205e508
    2c92:	4c                   	dec    esp
    2c93:	05 1a 66 05 23       	add    eax,0x2305661a
    2c98:	66 05 12 08          	add    ax,0x812
    2c9c:	3c 05                	cmp    al,0x5
    2c9e:	11 91 05 0c 02 2b    	adc    DWORD PTR [ecx+0x2b020c05],edx
    2ca4:	13 05 06 66 05 13    	adc    eax,DWORD PTR ds:0x13056606
    2caa:	4b                   	dec    ebx
    2cab:	05 0a e5 05 13       	add    eax,0x1305e50a
    2cb0:	66 05 10 92          	add    ax,0x9210
    2cb4:	05 1a 66 05 07       	add    eax,0x705661a
    2cb9:	3c 05                	cmp    al,0x5
    2cbb:	09 3d 05 0f 59 05    	or     DWORD PTR ds:0x5590f05,edi
    2cc1:	08 66 05             	or     BYTE PTR [esi+0x5],ah
    2cc4:	07                   	pop    es
    2cc5:	3c 05                	cmp    al,0x5
    2cc7:	0f 66 05 07 66 05 0c 	pcmpgtd mm0,QWORD PTR ds:0xc056607
    2cce:	4b                   	dec    ebx
    2ccf:	05 15 66 91 05       	add    eax,0x5916615
    2cd4:	12 a0 00 02 04 01    	adc    ah,BYTE PTR [eax+0x1040200]
    2cda:	06                   	push   es
    2cdb:	08 20                	or     BYTE PTR [eax],ah
    2cdd:	00 02                	add    BYTE PTR [edx],al
    2cdf:	04 04                	add    al,0x4
    2ce1:	02 2c 12             	add    ch,BYTE PTR [edx+edx*1]
    2ce4:	00 02                	add    BYTE PTR [edx],al
    2ce6:	04 05                	add    al,0x5
    2ce8:	02 2f                	add    ch,BYTE PTR [edi]
    2cea:	12 00                	adc    al,BYTE PTR [eax]
    2cec:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2cef:	74 05                	je     2cf6 <sysEnter_Vector-0x12d30a>
    2cf1:	39 00                	cmp    DWORD PTR [eax],eax
    2cf3:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2cf6:	06                   	push   es
    2cf7:	58                   	pop    eax
    2cf8:	05 33 00 02 04       	add    eax,0x4020033
    2cfd:	08 66 05             	or     BYTE PTR [esi+0x5],ah
    2d00:	09 00                	or     DWORD PTR [eax],eax
    2d02:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2d05:	08 20                	or     BYTE PTR [eax],ah
    2d07:	37                   	aaa    
    2d08:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2d09:	05 12 59 00 02       	add    eax,0x2005912
    2d0e:	04 01                	add    al,0x1
    2d10:	06                   	push   es
    2d11:	08 20                	or     BYTE PTR [eax],ah
    2d13:	00 02                	add    BYTE PTR [edx],al
    2d15:	04 04                	add    al,0x4
    2d17:	02 2c 12             	add    ch,BYTE PTR [edx+edx*1]
    2d1a:	00 02                	add    BYTE PTR [edx],al
    2d1c:	04 05                	add    al,0x5
    2d1e:	02 2f                	add    ch,BYTE PTR [edi]
    2d20:	12 00                	adc    al,BYTE PTR [eax]
    2d22:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2d25:	74 05                	je     2d2c <sysEnter_Vector-0x12d2d4>
    2d27:	39 00                	cmp    DWORD PTR [eax],eax
    2d29:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2d2c:	06                   	push   es
    2d2d:	58                   	pop    eax
    2d2e:	05 33 00 02 04       	add    eax,0x4020033
    2d33:	08 66 05             	or     BYTE PTR [esi+0x5],ah
    2d36:	09 00                	or     DWORD PTR [eax],eax
    2d38:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2d3b:	08 20                	or     BYTE PTR [eax],ah
    2d3d:	05 11 00 02 04       	add    eax,0x4020011
    2d42:	08 3d 05 09 00 02    	or     BYTE PTR ds:0x2000905,bh
    2d48:	04 08                	add    al,0x8
    2d4a:	66 05 08 00          	add    ax,0x8
    2d4e:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2d51:	3c 05                	cmp    al,0x5
    2d53:	11 00                	adc    DWORD PTR [eax],eax
    2d55:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2d58:	66 05 08 00          	add    ax,0x8
    2d5c:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2d5f:	66 05 15 59          	add    ax,0x5915
    2d63:	05 0c 9f 05 15       	add    eax,0x15059f0c
    2d68:	66 05 17 8c          	add    ax,0x8c17
    2d6c:	00 02                	add    BYTE PTR [edx],al
    2d6e:	04 01                	add    al,0x1
    2d70:	06                   	push   es
    2d71:	08 20                	or     BYTE PTR [eax],ah
    2d73:	00 02                	add    BYTE PTR [edx],al
    2d75:	04 04                	add    al,0x4
    2d77:	02 2c 12             	add    ch,BYTE PTR [edx+edx*1]
    2d7a:	00 02                	add    BYTE PTR [edx],al
    2d7c:	04 05                	add    al,0x5
    2d7e:	02 2f                	add    ch,BYTE PTR [edi]
    2d80:	12 00                	adc    al,BYTE PTR [eax]
    2d82:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2d85:	74 05                	je     2d8c <sysEnter_Vector-0x12d274>
    2d87:	3e 00 02             	add    BYTE PTR ds:[edx],al
    2d8a:	04 08                	add    al,0x8
    2d8c:	06                   	push   es
    2d8d:	58                   	pop    eax
    2d8e:	05 38 00 02 04       	add    eax,0x4020038
    2d93:	08 66 05             	or     BYTE PTR [esi+0x5],ah
    2d96:	09 00                	or     DWORD PTR [eax],eax
    2d98:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2d9b:	08 20                	or     BYTE PTR [eax],ah
    2d9d:	05 18 97 05 12       	add    eax,0x12059718
    2da2:	66 05 08 67          	add    ax,0x6708
    2da6:	05 0c 75 05 1d       	add    eax,0x1d05750c
    2dab:	66 05 06 90          	add    ax,0x9006
    2daf:	05 2d 00 02 04       	add    eax,0x402002d
    2db4:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
    2db7:	0b 9f 05 07 75 05    	or     ebx,DWORD PTR [edi+0x5750705]
    2dbd:	0c 75                	or     al,0x75
    2dbf:	05 12 7b 05 0b       	add    eax,0xb057b12
    2dc4:	66 05 20 84          	add    ax,0x8420
    2dc8:	05 06 66 05 30       	add    eax,0x30056606
    2dcd:	00 02                	add    BYTE PTR [edx],al
    2dcf:	04 01                	add    al,0x1
    2dd1:	74 05                	je     2dd8 <sysEnter_Vector-0x12d228>
    2dd3:	12 75 05             	adc    dh,BYTE PTR [ebp+0x5]
    2dd6:	07                   	pop    es
    2dd7:	66 05 21 91          	add    ax,0x9121
    2ddb:	05 29 66 05 10       	add    eax,0x10056629
    2de0:	c8 05 06 82          	enter  0x605,0x82
    2de4:	05 3a 00 02 04       	add    eax,0x402003a
    2de9:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
    2dec:	13 4b 05             	adc    ecx,DWORD PTR [ebx+0x5]
    2def:	1b 66 05             	sbb    esp,DWORD PTR [esi+0x5]
    2df2:	22 c8                	and    cl,al
    2df4:	05 30 66 05 3b       	add    eax,0x3b056630
    2df9:	00 02                	add    BYTE PTR [edx],al
    2dfb:	04 01                	add    al,0x1
    2dfd:	4a                   	dec    edx
    2dfe:	05 46 00 02 04       	add    eax,0x4020046
    2e03:	01 f2                	add    edx,esi
    2e05:	05 30 00 02 04       	add    eax,0x4020030
    2e0a:	01 d6                	add    esi,edx
    2e0c:	00 02                	add    BYTE PTR [edx],al
    2e0e:	04 03                	add    al,0x3
    2e10:	06                   	push   es
    2e11:	4a                   	dec    edx
    2e12:	00 02                	add    BYTE PTR [edx],al
    2e14:	04 04                	add    al,0x4
    2e16:	74 05                	je     2e1d <sysEnter_Vector-0x12d1e3>
    2e18:	1f                   	pop    ds
    2e19:	00 02                	add    BYTE PTR [edx],al
    2e1b:	04 06                	add    al,0x6
    2e1d:	06                   	push   es
    2e1e:	58                   	pop    eax
    2e1f:	05 07 00 02 04       	add    eax,0x4020007
    2e24:	06                   	push   es
    2e25:	2e 05 13 00 02 04    	cs add eax,0x4020013
    2e2b:	06                   	push   es
    2e2c:	3d 05 1b 00 02       	cmp    eax,0x2001b05
    2e31:	04 06                	add    al,0x6
    2e33:	82 05 2d 00 02 04 06 	add    BYTE PTR ds:0x402002d,0x6
    2e3a:	08 4a 05             	or     BYTE PTR [edx+0x5],cl
    2e3d:	34 00                	xor    al,0x0
    2e3f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2e42:	08 d6                	or     dh,dl
    2e44:	05 3f 00 02 04       	add    eax,0x402003f
    2e49:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
    2e4c:	4c                   	dec    esp
    2e4d:	00 02                	add    BYTE PTR [edx],al
    2e4f:	04 01                	add    al,0x1
    2e51:	08 d6                	or     dh,dl
    2e53:	05 34 00 02 04       	add    eax,0x4020034
    2e58:	01 08                	add    DWORD PTR [eax],ecx
    2e5a:	d6                   	(bad)  
    2e5b:	00 02                	add    BYTE PTR [edx],al
    2e5d:	04 03                	add    al,0x3
    2e5f:	06                   	push   es
    2e60:	4a                   	dec    edx
    2e61:	00 02                	add    BYTE PTR [edx],al
    2e63:	04 04                	add    al,0x4
    2e65:	74 05                	je     2e6c <sysEnter_Vector-0x12d194>
    2e67:	21 00                	and    DWORD PTR [eax],eax
    2e69:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2e6c:	06                   	push   es
    2e6d:	58                   	pop    eax
    2e6e:	05 07 00 02 04       	add    eax,0x4020007
    2e73:	06                   	push   es
    2e74:	2e 05 13 00 02 04    	cs add eax,0x4020013
    2e7a:	06                   	push   es
    2e7b:	3d 05 1b 00 02       	cmp    eax,0x2001b05
    2e80:	04 06                	add    al,0x6
    2e82:	82 05 2d 00 02 04 06 	add    BYTE PTR ds:0x402002d,0x6
    2e89:	08 4a 05             	or     BYTE PTR [edx+0x5],cl
    2e8c:	34 00                	xor    al,0x0
    2e8e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2e91:	02 22                	add    ah,BYTE PTR [edx]
    2e93:	12 05 3f 00 02 04    	adc    al,BYTE PTR ds:0x402003f
    2e99:	01 4a 05             	add    DWORD PTR [edx+0x5],ecx
    2e9c:	4c                   	dec    esp
    2e9d:	00 02                	add    BYTE PTR [edx],al
    2e9f:	04 01                	add    al,0x1
    2ea1:	02 22                	add    ah,BYTE PTR [edx]
    2ea3:	12 05 34 00 02 04    	adc    al,BYTE PTR ds:0x4020034
    2ea9:	01 02                	add    DWORD PTR [edx],eax
    2eab:	22 12                	and    dl,BYTE PTR [edx]
    2ead:	00 02                	add    BYTE PTR [edx],al
    2eaf:	04 03                	add    al,0x3
    2eb1:	06                   	push   es
    2eb2:	4a                   	dec    edx
    2eb3:	00 02                	add    BYTE PTR [edx],al
    2eb5:	04 04                	add    al,0x4
    2eb7:	74 05                	je     2ebe <sysEnter_Vector-0x12d142>
    2eb9:	21 00                	and    DWORD PTR [eax],eax
    2ebb:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2ebe:	06                   	push   es
    2ebf:	58                   	pop    eax
    2ec0:	05 07 00 02 04       	add    eax,0x4020007
    2ec5:	06                   	push   es
    2ec6:	2e 05 10 00 02 04    	cs add eax,0x4020010
    2ecc:	06                   	push   es
    2ecd:	3e 05 08 00 02 04    	ds add eax,0x4020008
    2ed3:	06                   	push   es
    2ed4:	74 05                	je     2edb <sysEnter_Vector-0x12d125>
    2ed6:	09 00                	or     DWORD PTR [eax],eax
    2ed8:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2edb:	67 05 13 2f 00 02    	addr16 add eax,0x2002f13
    2ee1:	04 01                	add    al,0x1
    2ee3:	06                   	push   es
    2ee4:	9e                   	sahf   
    2ee5:	00 02                	add    BYTE PTR [edx],al
    2ee7:	04 04                	add    al,0x4
    2ee9:	02 23                	add    ah,BYTE PTR [ebx]
    2eeb:	12 00                	adc    al,BYTE PTR [eax]
    2eed:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2ef4:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2ef7:	74 05                	je     2efe <sysEnter_Vector-0x12d102>
    2ef9:	25 00 02 04 08       	and    eax,0x8040200
    2efe:	06                   	push   es
    2eff:	58                   	pop    eax
    2f00:	05 0a 00 02 04       	add    eax,0x402000a
    2f05:	08 08                	or     BYTE PTR [eax],cl
    2f07:	4a                   	dec    edx
    2f08:	00 02                	add    BYTE PTR [edx],al
    2f0a:	04 08                	add    al,0x8
    2f0c:	3d 05 17 48 05       	cmp    eax,0x5481705
    2f11:	09 66 05             	or     DWORD PTR [esi+0x5],esp
    2f14:	11 94 05 1b 66 05 08 	adc    DWORD PTR [ebp+eax*1+0x805661b],edx
    2f1b:	3c 05                	cmp    al,0x5
    2f1d:	0b 3d 05 06 82 05    	or     edi,DWORD PTR ds:0x5820605
    2f23:	1f                   	pop    ds
    2f24:	00 02                	add    BYTE PTR [edx],al
    2f26:	04 01                	add    al,0x1
    2f28:	4a                   	dec    edx
    2f29:	05 07 4b 05 12       	add    eax,0x12054b07
    2f2e:	68 05 19 91 05       	push   0x5911905
    2f33:	1e                   	push   ds
    2f34:	66 05 12 02          	add    ax,0x212
    2f38:	25 12 05 14 68       	and    eax,0x68140512
    2f3d:	05 1e 66 05 2c       	add    eax,0x2c05661e
    2f42:	3c 05                	cmp    al,0x5
    2f44:	25 66 05 36 2e       	and    eax,0x2e360566
    2f49:	05 43 3c 05 0b       	add    eax,0xb053c43
    2f4e:	58                   	pop    eax
    2f4f:	05 11 5a 05 1c       	add    eax,0x1c055a11
    2f54:	9e                   	sahf   
    2f55:	05 06 08 90 05       	add    eax,0x5900806
    2f5a:	36 00 02             	add    BYTE PTR ss:[edx],al
    2f5d:	04 01                	add    al,0x1
    2f5f:	58                   	pop    eax
    2f60:	05 12 4b 05 0b       	add    eax,0xb054b12
    2f65:	90                   	nop
    2f66:	05 10 3f 05 06       	add    eax,0x6053f10
    2f6b:	82 05 22 00 02 04 01 	add    BYTE PTR ds:0x4020022,0x1
    2f72:	4a                   	dec    edx
    2f73:	05 15 00 02 04       	add    eax,0x4020015
    2f78:	01 08                	add    DWORD PTR [eax],ecx
    2f7a:	12 05 10 00 02 04    	adc    al,BYTE PTR ds:0x4020010
    2f80:	03 59 05             	add    ebx,DWORD PTR [ecx+0x5]
    2f83:	37                   	aaa    
    2f84:	00 02                	add    BYTE PTR [edx],al
    2f86:	04 03                	add    al,0x3
    2f88:	81 05 23 4b 05 15 9e 	add    DWORD PTR ds:0x15054b23,0x5913059e
    2f8f:	05 13 59 
    2f92:	05 0b 4c 05 0c       	add    eax,0xc054c0b
    2f97:	ae                   	scas   al,BYTE PTR es:[edi]
    2f98:	05 06 66 05 09       	add    eax,0x9056606
    2f9d:	4b                   	dec    ebx
    2f9e:	ae                   	scas   al,BYTE PTR es:[edi]
    2f9f:	05 06 77 05 1e       	add    eax,0x1e057706
    2fa4:	00 02                	add    BYTE PTR [edx],al
    2fa6:	04 01                	add    al,0x1
    2fa8:	82 05 0b 4b 05 06 68 	add    BYTE PTR ds:0x6054b0b,0x68
    2faf:	05 29 00 02 04       	add    eax,0x4020029
    2fb4:	01 66 05             	add    DWORD PTR [esi+0x5],esp
    2fb7:	0a 85 05 01 3d 85    	or     al,BYTE PTR [ebp-0x7ac2fefb]
    2fbd:	05 0c 08 ad 05       	add    eax,0x5ad080c
    2fc2:	05 76 05 08 08       	add    eax,0x8080576
    2fc7:	f3 05 10 67 08 14    	repz add eax,0x14086710
    2fcd:	05 01 00 02 04       	add    eax,0x4020001
    2fd2:	01 e5                	add    ebp,esp
    2fd4:	77 05                	ja     2fdb <sysEnter_Vector-0x12d025>
    2fd6:	16                   	push   ss
    2fd7:	08 59 05             	or     BYTE PTR [ecx+0x5],bl
    2fda:	0e                   	push   cs
    2fdb:	f2 05 05 3d 05 0c    	repnz add eax,0xc053d05
    2fe1:	08 3d 05 01 3d 02    	or     BYTE PTR ds:0x23d0105,bh
    2fe7:	05                   	.byte 0x5
    2fe8:	00 01                	add    BYTE PTR [ecx],al
    2fea:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	6c                   	ins    BYTE PTR es:[edi],dx
       1:	6f                   	outs   dx,DWORD PTR ds:[esi]
       2:	6e                   	outs   dx,BYTE PTR ds:[esi]
       3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
       7:	6e                   	outs   dx,BYTE PTR ds:[esi]
       8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
       c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
       e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
      10:	6f                   	outs   dx,DWORD PTR ds:[esi]
      11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
      13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
      16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
      18:	67 6e                	outs   dx,BYTE PTR ds:[si]
      1a:	65 64 20 69 6e       	gs and BYTE PTR fs:[ecx+0x6e],ch
      1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
      21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
      23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
      25:	68 72 00 47 4e       	push   0x4e470072
      2a:	55                   	push   ebp
      2b:	20 43 31             	and    BYTE PTR [ebx+0x31],al
      2e:	37                   	aaa    
      2f:	20 39                	and    BYTE PTR [ecx],bh
      31:	2e 33 2e             	xor    ebp,DWORD PTR cs:[esi]
      34:	30 20                	xor    BYTE PTR [eax],ah
      36:	2d 6d 61 73 6d       	sub    eax,0x6d73616d
      3b:	3d 69 6e 74 65       	cmp    eax,0x65746e69
      40:	6c                   	ins    BYTE PTR es:[edi],dx
      41:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
      47:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
      4d:	72 69                	jb     b8 <sysEnter_Vector-0x12ff48>
      4f:	63 20                	arpl   WORD PTR [eax],sp
      51:	2d 6d 61 72 63       	sub    eax,0x6372616d
      56:	68 3d 69 36 38       	push   0x3836693d
      5b:	36 20 2d 67 20 2d 66 	and    BYTE PTR ss:0x662d2067,ch
      62:	66 72 65             	data16 jb ca <sysEnter_Vector-0x12ff36>
      65:	65 73 74             	gs jae dc <sysEnter_Vector-0x12ff24>
      68:	61                   	popa   
      69:	6e                   	outs   dx,BYTE PTR ds:[esi]
      6a:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
      71:	76 
      72:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
      79:	74 79                	je     f4 <sysEnter_Vector-0x12ff0c>
      7b:	3d 68 69 64 64       	cmp    eax,0x64646968
      80:	65 6e                	outs   dx,BYTE PTR gs:[esi]
      82:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
      88:	20 2d 66 61 73 79    	and    BYTE PTR ds:0x79736166,ch
      8e:	6e                   	outs   dx,BYTE PTR ds:[esi]
      8f:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      92:	6f                   	outs   dx,DWORD PTR ds:[esi]
      93:	6e                   	outs   dx,BYTE PTR ds:[esi]
      94:	6f                   	outs   dx,DWORD PTR ds:[esi]
      95:	75 73                	jne    10a <sysEnter_Vector-0x12fef6>
      97:	2d 75 6e 77 69       	sub    eax,0x69776e75
      9c:	6e                   	outs   dx,BYTE PTR ds:[esi]
      9d:	64 2d 74 61 62 6c    	fs sub eax,0x6c626174
      a3:	65 73 20             	gs jae c6 <sysEnter_Vector-0x12ff3a>
      a6:	2d 66 73 74 61       	sub    eax,0x61747366
      ab:	63 6b 2d             	arpl   WORD PTR [ebx+0x2d],bp
      ae:	63 6c 61 73          	arpl   WORD PTR [ecx+eiz*2+0x73],bp
      b2:	68 2d 70 72 6f       	push   0x6f72702d
      b7:	74 65                	je     11e <sysEnter_Vector-0x12fee2>
      b9:	63 74 69 6f          	arpl   WORD PTR [ecx+ebp*2+0x6f],si
      bd:	6e                   	outs   dx,BYTE PTR ds:[esi]
      be:	20 2d 66 63 66 2d    	and    BYTE PTR ds:0x2d666366,ch
      c4:	70 72                	jo     138 <sysEnter_Vector-0x12fec8>
      c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
      c7:	74 65                	je     12e <sysEnter_Vector-0x12fed2>
      c9:	63 74 69 6f          	arpl   WORD PTR [ecx+ebp*2+0x6f],si
      cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
      ce:	00 5f 46             	add    BYTE PTR [edi+0x46],bl
      d1:	6c                   	ins    BYTE PTR es:[edi],dx
      d2:	6f                   	outs   dx,DWORD PTR ds:[esi]
      d3:	61                   	popa   
      d4:	74 31                	je     107 <sysEnter_Vector-0x12fef9>
      d6:	32 38                	xor    bh,BYTE PTR [eax]
      d8:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
      dc:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
      e0:	6e                   	outs   dx,BYTE PTR ds:[esi]
      e1:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
      e5:	73 69                	jae    150 <sysEnter_Vector-0x12feb0>
      e7:	67 6e                	outs   dx,BYTE PTR ds:[si]
      e9:	65 64 20 69 6e       	gs and BYTE PTR fs:[ecx+0x6e],ch
      ee:	74 00                	je     f0 <sysEnter_Vector-0x12ff10>
      f0:	75 6e                	jne    160 <sysEnter_Vector-0x12fea0>
      f2:	73 69                	jae    15d <sysEnter_Vector-0x12fea3>
      f4:	67 6e                	outs   dx,BYTE PTR ds:[si]
      f6:	65 64 20 63 68       	gs and BYTE PTR fs:[ebx+0x68],ah
      fb:	61                   	popa   
      fc:	72 00                	jb     fe <sysEnter_Vector-0x12ff02>
      fe:	2f                   	das    
      ff:	68 6f 6d 65 2f       	push   0x2f656d6f
     104:	79 6f                	jns    175 <sysEnter_Vector-0x12fe8b>
     106:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
     10d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     10e:	73 2f                	jae    13f <sysEnter_Vector-0x12fec1>
     110:	61                   	popa   
     111:	70 72                	jo     185 <sysEnter_Vector-0x12fe7b>
     113:	6f                   	outs   dx,DWORD PTR ds:[esi]
     114:	6a 2f                	push   0x2f
     116:	6c                   	ins    BYTE PTR es:[edi],dx
     117:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     11e:	4f                   	dec    edi
     11f:	53                   	push   ebx
     120:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     123:	72 63                	jb     188 <sysEnter_Vector-0x12fe78>
     125:	68 72 49 00 70       	push   0x70004972
     12a:	72 6f                	jb     19b <sysEnter_Vector-0x12fe65>
     12c:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
     12f:	73 45                	jae    176 <sysEnter_Vector-0x12fe8a>
     131:	6e                   	outs   dx,BYTE PTR ds:[esi]
     132:	76 70                	jbe    1a4 <sysEnter_Vector-0x12fe5c>
     134:	00 2e                	add    BYTE PTR [esi],ch
     136:	2e 2f                	cs das 
     138:	2e 2e 2f             	cs cs das 
     13b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     13f:	6a 2f                	push   0x2f
     141:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     144:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     14b:	63 2f                	arpl   WORD PTR [edi],bp
     14d:	73 74                	jae    1c3 <sysEnter_Vector-0x12fe3d>
     14f:	72 69                	jb     1ba <sysEnter_Vector-0x12fe46>
     151:	6e                   	outs   dx,BYTE PTR ds:[esi]
     152:	67 73 2f             	addr16 jae 184 <sysEnter_Vector-0x12fe7c>
     155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
     157:	72 63                	jb     1bc <sysEnter_Vector-0x12fe44>
     159:	68 72 2e 63 00       	push   0x632e72
     15e:	6c                   	ins    BYTE PTR es:[edi],dx
     15f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     160:	6e                   	outs   dx,BYTE PTR ds:[esi]
     161:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
     165:	75 62                	jne    1c9 <sysEnter_Vector-0x12fe37>
     167:	6c                   	ins    BYTE PTR es:[edi],dx
     168:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
     16c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     16d:	72 74                	jb     1e3 <sysEnter_Vector-0x12fe1d>
     16f:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
     172:	74 00                	je     174 <sysEnter_Vector-0x12fe8c>
     174:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
     177:	72 73                	jb     1ec <sysEnter_Vector-0x12fe14>
     179:	00 2e                	add    BYTE PTR [esi],ch
     17b:	2e 2f                	cs das 
     17d:	2e 2e 2f             	cs cs das 
     180:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     184:	6a 2f                	push   0x2f
     186:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     189:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     190:	63 2f                	arpl   WORD PTR [edi],bp
     192:	73 74                	jae    208 <sysEnter_Vector-0x12fdf8>
     194:	72 69                	jb     1ff <sysEnter_Vector-0x12fe01>
     196:	6e                   	outs   dx,BYTE PTR ds:[esi]
     197:	67 73 2f             	addr16 jae 1c9 <sysEnter_Vector-0x12fe37>
     19a:	73 74                	jae    210 <sysEnter_Vector-0x12fdf0>
     19c:	72 63                	jb     201 <sysEnter_Vector-0x12fdff>
     19e:	73 70                	jae    210 <sysEnter_Vector-0x12fdf0>
     1a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     1a1:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     1a4:	73 74                	jae    21a <sysEnter_Vector-0x12fde6>
     1a6:	72 63                	jb     20b <sysEnter_Vector-0x12fdf5>
     1a8:	73 70                	jae    21a <sysEnter_Vector-0x12fde6>
     1aa:	6e                   	outs   dx,BYTE PTR ds:[esi]
     1ab:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     1ae:	72 63                	jb     213 <sysEnter_Vector-0x12fded>
     1b0:	73 70                	jae    222 <sysEnter_Vector-0x12fdde>
     1b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     1b3:	49                   	dec    ecx
     1b4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     1b7:	72 74                	jb     22d <sysEnter_Vector-0x12fdd3>
     1b9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1ba:	6b 49 00 64          	imul   ecx,DWORD PTR [ecx+0x0],0x64
     1be:	65 6c                	gs ins BYTE PTR es:[edi],dx
     1c0:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
     1c7:	2e 2f                	cs das 
     1c9:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     1cd:	6a 2f                	push   0x2f
     1cf:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     1d2:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     1d9:	63 2f                	arpl   WORD PTR [edi],bp
     1db:	73 74                	jae    251 <sysEnter_Vector-0x12fdaf>
     1dd:	72 69                	jb     248 <sysEnter_Vector-0x12fdb8>
     1df:	6e                   	outs   dx,BYTE PTR ds:[esi]
     1e0:	67 73 2f             	addr16 jae 212 <sysEnter_Vector-0x12fdee>
     1e3:	73 74                	jae    259 <sysEnter_Vector-0x12fda7>
     1e5:	72 74                	jb     25b <sysEnter_Vector-0x12fda5>
     1e7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1e8:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     1eb:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
     1ef:	74 73                	je     264 <sysEnter_Vector-0x12fd9c>
     1f1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     1f4:	72 74                	jb     26a <sysEnter_Vector-0x12fd96>
     1f6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1f7:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
     1fa:	74 6f                	je     26b <sysEnter_Vector-0x12fd95>
     1fc:	61                   	popa   
     1fd:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
     200:	6f                   	outs   dx,DWORD PTR ds:[esi]
     201:	61                   	popa   
     202:	49                   	dec    ecx
     203:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
     206:	6f                   	outs   dx,DWORD PTR ds:[esi]
     207:	69 49 00 73 69 67 6e 	imul   ecx,DWORD PTR [ecx+0x0],0x6e676973
     20e:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     211:	76 65                	jbe    278 <sysEnter_Vector-0x12fd88>
     213:	72 73                	jb     288 <sysEnter_Vector-0x12fd78>
     215:	65 49                	gs dec ecx
     217:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     21a:	63 2f                	arpl   WORD PTR [edi],bp
     21c:	61                   	popa   
     21d:	73 63                	jae    282 <sysEnter_Vector-0x12fd7e>
     21f:	69 69 2e 63 00 61 6e 	imul   ebp,DWORD PTR [ecx+0x2e],0x6e610063
     226:	73 69                	jae    291 <sysEnter_Vector-0x12fd6f>
     228:	45                   	inc    ebp
     229:	73 63                	jae    28e <sysEnter_Vector-0x12fd72>
     22b:	53                   	push   ebx
     22c:	65 71 00             	gs jno 22f <sysEnter_Vector-0x12fdd1>
     22f:	73 61                	jae    292 <sysEnter_Vector-0x12fd6e>
     231:	76 65                	jbe    298 <sysEnter_Vector-0x12fd68>
     233:	43                   	inc    ebx
     234:	75 72                	jne    2a8 <sysEnter_Vector-0x12fd58>
     236:	73 6f                	jae    2a7 <sysEnter_Vector-0x12fd59>
     238:	72 50                	jb     28a <sysEnter_Vector-0x12fd76>
     23a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     23b:	73 69                	jae    2a6 <sysEnter_Vector-0x12fd5a>
     23d:	74 69                	je     2a8 <sysEnter_Vector-0x12fd58>
     23f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     240:	6e                   	outs   dx,BYTE PTR ds:[esi]
     241:	00 78 73             	add    BYTE PTR [eax+0x73],bh
     244:	74 72                	je     2b8 <sysEnter_Vector-0x12fd48>
     246:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     249:	6c                   	ins    BYTE PTR es:[edi],dx
     24a:	65 73 54             	gs jae 2a1 <sysEnter_Vector-0x12fd5f>
     24d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     24e:	43                   	inc    ebx
     24f:	6c                   	ins    BYTE PTR es:[edi],dx
     250:	6f                   	outs   dx,DWORD PTR ds:[esi]
     251:	73 65                	jae    2b8 <sysEnter_Vector-0x12fd48>
     253:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     256:	63 2f                	arpl   WORD PTR [edi],bp
     258:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     25b:	73 6f                	jae    2cc <sysEnter_Vector-0x12fd34>
     25d:	6c                   	ins    BYTE PTR es:[edi],dx
     25e:	65 2e 63 00          	gs arpl WORD PTR cs:[eax],ax
     262:	72 65                	jb     2c9 <sysEnter_Vector-0x12fd37>
     264:	73 74                	jae    2da <sysEnter_Vector-0x12fd26>
     266:	6f                   	outs   dx,DWORD PTR ds:[esi]
     267:	72 65                	jb     2ce <sysEnter_Vector-0x12fd32>
     269:	43                   	inc    ebx
     26a:	75 72                	jne    2de <sysEnter_Vector-0x12fd22>
     26c:	73 6f                	jae    2dd <sysEnter_Vector-0x12fd23>
     26e:	72 50                	jb     2c0 <sysEnter_Vector-0x12fd40>
     270:	6f                   	outs   dx,DWORD PTR ds:[esi]
     271:	73 69                	jae    2dc <sysEnter_Vector-0x12fd24>
     273:	74 69                	je     2de <sysEnter_Vector-0x12fd22>
     275:	6f                   	outs   dx,DWORD PTR ds:[esi]
     276:	6e                   	outs   dx,BYTE PTR ds:[esi]
     277:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
     27a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     27b:	74 33                	je     2b0 <sysEnter_Vector-0x12fd50>
     27d:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
     280:	00 6d 6f             	add    BYTE PTR [ebp+0x6f],ch
     283:	76 65                	jbe    2ea <sysEnter_Vector-0x12fd16>
     285:	54                   	push   esp
     286:	6f                   	outs   dx,DWORD PTR ds:[esi]
     287:	58                   	pop    eax
     288:	59                   	pop    ecx
     289:	00 79 73             	add    BYTE PTR [ecx+0x73],bh
     28c:	74 72                	je     300 <sysEnter_Vector-0x12fd00>
     28e:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
     291:	6e                   	outs   dx,BYTE PTR ds:[esi]
     292:	74 70                	je     304 <sysEnter_Vector-0x12fcfc>
     294:	74 72                	je     308 <sysEnter_Vector-0x12fcf8>
     296:	5f                   	pop    edi
     297:	74 00                	je     299 <sysEnter_Vector-0x12fd67>
     299:	66 69 6c 65 73 54 6f 	imul   bp,WORD PTR [ebp+eiz*2+0x73],0x6f54
     2a0:	43                   	inc    ebx
     2a1:	6c                   	ins    BYTE PTR es:[edi],dx
     2a2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2a3:	73 65                	jae    30a <sysEnter_Vector-0x12fcf6>
     2a5:	43                   	inc    ebx
     2a6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2a7:	75 6e                	jne    317 <sysEnter_Vector-0x12fce9>
     2a9:	74 00                	je     2ab <sysEnter_Vector-0x12fd55>
     2ab:	53                   	push   ebx
     2ac:	59                   	pop    ecx
     2ad:	53                   	push   ebx
     2ae:	43                   	inc    ebx
     2af:	41                   	inc    ecx
     2b0:	4c                   	dec    esp
     2b1:	4c                   	dec    esp
     2b2:	5f                   	pop    edi
     2b3:	52                   	push   edx
     2b4:	45                   	inc    ebp
     2b5:	41                   	inc    ecx
     2b6:	44                   	inc    esp
     2b7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     2ba:	53                   	push   ebx
     2bb:	43                   	inc    ebx
     2bc:	41                   	inc    ecx
     2bd:	4c                   	dec    esp
     2be:	4c                   	dec    esp
     2bf:	5f                   	pop    edi
     2c0:	50                   	push   eax
     2c1:	49                   	dec    ecx
     2c2:	50                   	push   eax
     2c3:	45                   	inc    ebp
     2c4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     2c7:	53                   	push   ebx
     2c8:	43                   	inc    ebx
     2c9:	41                   	inc    ecx
     2ca:	4c                   	dec    esp
     2cb:	4c                   	dec    esp
     2cc:	5f                   	pop    edi
     2cd:	4f                   	dec    edi
     2ce:	50                   	push   eax
     2cf:	45                   	inc    ebp
     2d0:	4e                   	dec    esi
     2d1:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     2d4:	7a 65                	jp     33b <sysEnter_Vector-0x12fcc5>
     2d6:	5f                   	pop    edi
     2d7:	74 00                	je     2d9 <sysEnter_Vector-0x12fd27>
     2d9:	53                   	push   ebx
     2da:	59                   	pop    ecx
     2db:	53                   	push   ebx
     2dc:	43                   	inc    ebx
     2dd:	41                   	inc    ecx
     2de:	4c                   	dec    esp
     2df:	4c                   	dec    esp
     2e0:	5f                   	pop    edi
     2e1:	47                   	inc    edi
     2e2:	45                   	inc    ebp
     2e3:	54                   	push   esp
     2e4:	44                   	inc    esp
     2e5:	45                   	inc    ebp
     2e6:	4e                   	dec    esi
     2e7:	54                   	push   esp
     2e8:	53                   	push   ebx
     2e9:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     2ec:	74 65                	je     353 <sysEnter_Vector-0x12fcad>
     2ee:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2ef:	76 00                	jbe    2f1 <sysEnter_Vector-0x12fd0f>
     2f1:	67 65 74 63          	addr16 gs je 358 <sysEnter_Vector-0x12fca8>
     2f5:	77 64                	ja     35b <sysEnter_Vector-0x12fca5>
     2f7:	49                   	dec    ecx
     2f8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     2fb:	53                   	push   ebx
     2fc:	43                   	inc    ebx
     2fd:	41                   	inc    ecx
     2fe:	4c                   	dec    esp
     2ff:	4c                   	dec    esp
     300:	5f                   	pop    edi
     301:	52                   	push   edx
     302:	45                   	inc    ebp
     303:	42                   	inc    edx
     304:	4f                   	dec    edi
     305:	4f                   	dec    edi
     306:	54                   	push   esp
     307:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     30a:	63 2f                	arpl   WORD PTR [edi],bp
     30c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     30e:	76 69                	jbe    379 <sysEnter_Vector-0x12fc87>
     310:	72 6f                	jb     381 <sysEnter_Vector-0x12fc7f>
     312:	6e                   	outs   dx,BYTE PTR ds:[esi]
     313:	6d                   	ins    DWORD PTR es:[edi],dx
     314:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     316:	74 2e                	je     346 <sysEnter_Vector-0x12fcba>
     318:	63 00                	arpl   WORD PTR [eax],ax
     31a:	6c                   	ins    BYTE PTR es:[edi],dx
     31b:	61                   	popa   
     31c:	73 74                	jae    392 <sysEnter_Vector-0x12fc6e>
     31e:	50                   	push   eax
     31f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     320:	70 75                	jo     397 <sysEnter_Vector-0x12fc69>
     322:	6c                   	ins    BYTE PTR es:[edi],dx
     323:	61                   	popa   
     324:	74 65                	je     38b <sysEnter_Vector-0x12fc75>
     326:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
     32a:	53                   	push   ebx
     32b:	43                   	inc    ebx
     32c:	41                   	inc    ecx
     32d:	4c                   	dec    esp
     32e:	4c                   	dec    esp
     32f:	5f                   	pop    edi
     330:	45                   	inc    ebp
     331:	58                   	pop    eax
     332:	45                   	inc    ebp
     333:	43                   	inc    ebx
     334:	4e                   	dec    esi
     335:	45                   	inc    ebp
     336:	57                   	push   edi
     337:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     33a:	53                   	push   ebx
     33b:	43                   	inc    ebx
     33c:	41                   	inc    ecx
     33d:	4c                   	dec    esp
     33e:	4c                   	dec    esp
     33f:	5f                   	pop    edi
     340:	53                   	push   ebx
     341:	4c                   	dec    esp
     342:	45                   	inc    ebp
     343:	45                   	inc    ebp
     344:	50                   	push   eax
     345:	00 76 61             	add    BYTE PTR [esi+0x61],dh
     348:	6c                   	ins    BYTE PTR es:[edi],dx
     349:	75 65                	jne    3b0 <sysEnter_Vector-0x12fc50>
     34b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     34e:	53                   	push   ebx
     34f:	43                   	inc    ebx
     350:	41                   	inc    ecx
     351:	4c                   	dec    esp
     352:	4c                   	dec    esp
     353:	5f                   	pop    edi
     354:	47                   	inc    edi
     355:	45                   	inc    ebp
     356:	54                   	push   esp
     357:	54                   	push   esp
     358:	49                   	dec    ecx
     359:	4d                   	dec    ebp
     35a:	45                   	inc    ebp
     35b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     35e:	53                   	push   ebx
     35f:	43                   	inc    ebx
     360:	41                   	inc    ecx
     361:	4c                   	dec    esp
     362:	4c                   	dec    esp
     363:	5f                   	pop    edi
     364:	53                   	push   ebx
     365:	45                   	inc    ebp
     366:	54                   	push   esp
     367:	50                   	push   eax
     368:	52                   	push   edx
     369:	49                   	dec    ecx
     36a:	4f                   	dec    edi
     36b:	52                   	push   edx
     36c:	49                   	dec    ecx
     36d:	54                   	push   esp
     36e:	59                   	pop    ecx
     36f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     372:	53                   	push   ebx
     373:	43                   	inc    ebx
     374:	41                   	inc    ecx
     375:	4c                   	dec    esp
     376:	4c                   	dec    esp
     377:	5f                   	pop    edi
     378:	53                   	push   ebx
     379:	45                   	inc    ebp
     37a:	54                   	push   esp
     37b:	53                   	push   ebx
     37c:	54                   	push   esp
     37d:	44                   	inc    esp
     37e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     381:	53                   	push   ebx
     382:	43                   	inc    ebx
     383:	41                   	inc    ecx
     384:	4c                   	dec    esp
     385:	4c                   	dec    esp
     386:	5f                   	pop    edi
     387:	4d                   	dec    ebp
     388:	41                   	inc    ecx
     389:	53                   	push   ebx
     38a:	4b                   	dec    ebx
     38b:	53                   	push   ebx
     38c:	49                   	dec    ecx
     38d:	47                   	inc    edi
     38e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     391:	53                   	push   ebx
     392:	43                   	inc    ebx
     393:	41                   	inc    ecx
     394:	4c                   	dec    esp
     395:	4c                   	dec    esp
     396:	5f                   	pop    edi
     397:	43                   	inc    ebx
     398:	4c                   	dec    esp
     399:	4f                   	dec    edi
     39a:	53                   	push   ebx
     39b:	45                   	inc    ebp
     39c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     39f:	53                   	push   ebx
     3a0:	43                   	inc    ebx
     3a1:	41                   	inc    ecx
     3a2:	4c                   	dec    esp
     3a3:	4c                   	dec    esp
     3a4:	5f                   	pop    edi
     3a5:	55                   	push   ebp
     3a6:	4e                   	dec    esi
     3a7:	4c                   	dec    esp
     3a8:	49                   	dec    ecx
     3a9:	4e                   	dec    esi
     3aa:	4b                   	dec    ebx
     3ab:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
     3ae:	79 73                	jns    423 <sysEnter_Vector-0x12fbdd>
     3b0:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     3b3:	6c                   	ins    BYTE PTR es:[edi],dx
     3b4:	73 00                	jae    3b6 <sysEnter_Vector-0x12fc4a>
     3b6:	53                   	push   ebx
     3b7:	59                   	pop    ecx
     3b8:	53                   	push   ebx
     3b9:	43                   	inc    ebx
     3ba:	41                   	inc    ecx
     3bb:	4c                   	dec    esp
     3bc:	4c                   	dec    esp
     3bd:	5f                   	pop    edi
     3be:	46                   	inc    esi
     3bf:	4f                   	dec    edi
     3c0:	52                   	push   edx
     3c1:	4b                   	dec    ebx
     3c2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3c5:	53                   	push   ebx
     3c6:	43                   	inc    ebx
     3c7:	41                   	inc    ecx
     3c8:	4c                   	dec    esp
     3c9:	4c                   	dec    esp
     3ca:	5f                   	pop    edi
     3cb:	53                   	push   ebx
     3cc:	54                   	push   esp
     3cd:	4f                   	dec    edi
     3ce:	50                   	push   eax
     3cf:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3d2:	53                   	push   ebx
     3d3:	43                   	inc    ebx
     3d4:	41                   	inc    ecx
     3d5:	4c                   	dec    esp
     3d6:	4c                   	dec    esp
     3d7:	5f                   	pop    edi
     3d8:	53                   	push   ebx
     3d9:	45                   	inc    ebp
     3da:	45                   	inc    ebp
     3db:	4b                   	dec    ebx
     3dc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3df:	53                   	push   ebx
     3e0:	43                   	inc    ebx
     3e1:	41                   	inc    ecx
     3e2:	4c                   	dec    esp
     3e3:	4c                   	dec    esp
     3e4:	5f                   	pop    edi
     3e5:	50                   	push   eax
     3e6:	52                   	push   edx
     3e7:	49                   	dec    ecx
     3e8:	4e                   	dec    esi
     3e9:	54                   	push   esp
     3ea:	44                   	inc    esp
     3eb:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3ee:	53                   	push   ebx
     3ef:	43                   	inc    ebx
     3f0:	41                   	inc    ecx
     3f1:	4c                   	dec    esp
     3f2:	4c                   	dec    esp
     3f3:	5f                   	pop    edi
     3f4:	48                   	dec    eax
     3f5:	4c                   	dec    esp
     3f6:	54                   	push   esp
     3f7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3fa:	53                   	push   ebx
     3fb:	43                   	inc    ebx
     3fc:	41                   	inc    ecx
     3fd:	4c                   	dec    esp
     3fe:	4c                   	dec    esp
     3ff:	5f                   	pop    edi
     400:	44                   	inc    esp
     401:	55                   	push   ebp
     402:	50                   	push   eax
     403:	33 00                	xor    eax,DWORD PTR [eax]
     405:	53                   	push   ebx
     406:	59                   	pop    ecx
     407:	53                   	push   ebx
     408:	43                   	inc    ebx
     409:	41                   	inc    ecx
     40a:	4c                   	dec    esp
     40b:	4c                   	dec    esp
     40c:	5f                   	pop    edi
     40d:	54                   	push   esp
     40e:	41                   	inc    ecx
     40f:	4b                   	dec    ebx
     410:	45                   	inc    ebp
     411:	41                   	inc    ecx
     412:	44                   	inc    esp
     413:	55                   	push   ebp
     414:	4d                   	dec    ebp
     415:	50                   	push   eax
     416:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     419:	53                   	push   ebx
     41a:	43                   	inc    ebx
     41b:	41                   	inc    ecx
     41c:	4c                   	dec    esp
     41d:	4c                   	dec    esp
     41e:	5f                   	pop    edi
     41f:	54                   	push   esp
     420:	45                   	inc    ebp
     421:	4c                   	dec    esp
     422:	4c                   	dec    esp
     423:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     426:	53                   	push   ebx
     427:	43                   	inc    ebx
     428:	41                   	inc    ecx
     429:	4c                   	dec    esp
     42a:	4c                   	dec    esp
     42b:	5f                   	pop    edi
     42c:	46                   	inc    esi
     42d:	52                   	push   edx
     42e:	45                   	inc    ebp
     42f:	45                   	inc    ebp
     430:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     433:	53                   	push   ebx
     434:	43                   	inc    ebx
     435:	41                   	inc    ecx
     436:	4c                   	dec    esp
     437:	4c                   	dec    esp
     438:	5f                   	pop    edi
     439:	45                   	inc    ebp
     43a:	58                   	pop    eax
     43b:	45                   	inc    ebp
     43c:	43                   	inc    ebx
     43d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     440:	53                   	push   ebx
     441:	43                   	inc    ebx
     442:	41                   	inc    ecx
     443:	4c                   	dec    esp
     444:	4c                   	dec    esp
     445:	5f                   	pop    edi
     446:	49                   	dec    ecx
     447:	4e                   	dec    esi
     448:	56                   	push   esi
     449:	41                   	inc    ecx
     44a:	4c                   	dec    esp
     44b:	49                   	dec    ecx
     44c:	44                   	inc    esp
     44d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     450:	53                   	push   ebx
     451:	43                   	inc    ebx
     452:	41                   	inc    ecx
     453:	4c                   	dec    esp
     454:	4c                   	dec    esp
     455:	5f                   	pop    edi
     456:	52                   	push   edx
     457:	45                   	inc    ebp
     458:	47                   	inc    edi
     459:	45                   	inc    ebp
     45a:	58                   	pop    eax
     45b:	49                   	dec    ecx
     45c:	54                   	push   esp
     45d:	48                   	dec    eax
     45e:	41                   	inc    ecx
     45f:	4e                   	dec    esi
     460:	44                   	inc    esp
     461:	4c                   	dec    esp
     462:	45                   	inc    ebp
     463:	52                   	push   edx
     464:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     467:	53                   	push   ebx
     468:	43                   	inc    ebx
     469:	41                   	inc    ecx
     46a:	4c                   	dec    esp
     46b:	4c                   	dec    esp
     46c:	5f                   	pop    edi
     46d:	53                   	push   ebx
     46e:	54                   	push   esp
     46f:	41                   	inc    ecx
     470:	54                   	push   esp
     471:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     474:	53                   	push   ebx
     475:	43                   	inc    ebx
     476:	41                   	inc    ecx
     477:	4c                   	dec    esp
     478:	4c                   	dec    esp
     479:	5f                   	pop    edi
     47a:	47                   	inc    edi
     47b:	45                   	inc    ebp
     47c:	54                   	push   esp
     47d:	54                   	push   esp
     47e:	49                   	dec    ecx
     47f:	43                   	inc    ebx
     480:	4b                   	dec    ebx
     481:	53                   	push   ebx
     482:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     485:	53                   	push   ebx
     486:	43                   	inc    ebx
     487:	41                   	inc    ecx
     488:	4c                   	dec    esp
     489:	4c                   	dec    esp
     48a:	5f                   	pop    edi
     48b:	45                   	inc    ebp
     48c:	4e                   	dec    esi
     48d:	44                   	inc    esp
     48e:	50                   	push   eax
     48f:	52                   	push   edx
     490:	4f                   	dec    edi
     491:	43                   	inc    ebx
     492:	45                   	inc    ebp
     493:	53                   	push   ebx
     494:	53                   	push   ebx
     495:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     498:	74 65                	je     4ff <sysEnter_Vector-0x12fb01>
     49a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     49b:	76 00                	jbe    49d <sysEnter_Vector-0x12fb63>
     49d:	53                   	push   ebx
     49e:	59                   	pop    ecx
     49f:	53                   	push   ebx
     4a0:	43                   	inc    ebx
     4a1:	41                   	inc    ecx
     4a2:	4c                   	dec    esp
     4a3:	4c                   	dec    esp
     4a4:	5f                   	pop    edi
     4a5:	53                   	push   ebx
     4a6:	45                   	inc    ebp
     4a7:	54                   	push   esp
     4a8:	43                   	inc    ebx
     4a9:	57                   	push   edi
     4aa:	44                   	inc    esp
     4ab:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4ae:	53                   	push   ebx
     4af:	43                   	inc    ebx
     4b0:	41                   	inc    ecx
     4b1:	4c                   	dec    esp
     4b2:	4c                   	dec    esp
     4b3:	5f                   	pop    edi
     4b4:	57                   	push   edi
     4b5:	52                   	push   edx
     4b6:	49                   	dec    ecx
     4b7:	54                   	push   esp
     4b8:	45                   	inc    ebp
     4b9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4bc:	53                   	push   ebx
     4bd:	43                   	inc    ebx
     4be:	41                   	inc    ecx
     4bf:	4c                   	dec    esp
     4c0:	4c                   	dec    esp
     4c1:	5f                   	pop    edi
     4c2:	50                   	push   eax
     4c3:	52                   	push   edx
     4c4:	49                   	dec    ecx
     4c5:	4e                   	dec    esi
     4c6:	54                   	push   esp
     4c7:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     4ca:	74 63                	je     52f <sysEnter_Vector-0x12fad1>
     4cc:	77 64                	ja     532 <sysEnter_Vector-0x12face>
     4ce:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4d1:	53                   	push   ebx
     4d2:	43                   	inc    ebx
     4d3:	41                   	inc    ecx
     4d4:	4c                   	dec    esp
     4d5:	4c                   	dec    esp
     4d6:	5f                   	pop    edi
     4d7:	47                   	inc    edi
     4d8:	45                   	inc    ebp
     4d9:	54                   	push   esp
     4da:	43                   	inc    ebx
     4db:	57                   	push   edi
     4dc:	44                   	inc    esp
     4dd:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4e0:	53                   	push   ebx
     4e1:	43                   	inc    ebx
     4e2:	41                   	inc    ecx
     4e3:	4c                   	dec    esp
     4e4:	4c                   	dec    esp
     4e5:	5f                   	pop    edi
     4e6:	57                   	push   edi
     4e7:	41                   	inc    ecx
     4e8:	49                   	dec    ecx
     4e9:	54                   	push   esp
     4ea:	46                   	inc    esi
     4eb:	4f                   	dec    edi
     4ec:	52                   	push   edx
     4ed:	50                   	push   eax
     4ee:	49                   	dec    ecx
     4ef:	44                   	inc    esp
     4f0:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4f3:	53                   	push   ebx
     4f4:	43                   	inc    ebx
     4f5:	41                   	inc    ecx
     4f6:	4c                   	dec    esp
     4f7:	4c                   	dec    esp
     4f8:	5f                   	pop    edi
     4f9:	4d                   	dec    ebp
     4fa:	4d                   	dec    ebp
     4fb:	41                   	inc    ecx
     4fc:	50                   	push   eax
     4fd:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     500:	74 65                	je     567 <sysEnter_Vector-0x12fa99>
     502:	6e                   	outs   dx,BYTE PTR ds:[esi]
     503:	76 49                	jbe    54e <sysEnter_Vector-0x12fab2>
     505:	00 76 61             	add    BYTE PTR [esi+0x61],dh
     508:	72 6e                	jb     578 <sysEnter_Vector-0x12fa88>
     50a:	61                   	popa   
     50b:	6d                   	ins    DWORD PTR es:[edi],dx
     50c:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
     510:	53                   	push   ebx
     511:	43                   	inc    ebx
     512:	41                   	inc    ecx
     513:	4c                   	dec    esp
     514:	4c                   	dec    esp
     515:	5f                   	pop    edi
     516:	41                   	inc    ecx
     517:	4c                   	dec    esp
     518:	4c                   	dec    esp
     519:	4f                   	dec    edi
     51a:	43                   	inc    ebx
     51b:	48                   	dec    eax
     51c:	45                   	inc    ebp
     51d:	41                   	inc    ecx
     51e:	50                   	push   eax
     51f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     522:	53                   	push   ebx
     523:	43                   	inc    ebx
     524:	41                   	inc    ecx
     525:	4c                   	dec    esp
     526:	4c                   	dec    esp
     527:	5f                   	pop    edi
     528:	53                   	push   ebx
     529:	45                   	inc    ebp
     52a:	54                   	push   esp
     52b:	53                   	push   ebx
     52c:	49                   	dec    ecx
     52d:	47                   	inc    edi
     52e:	41                   	inc    ecx
     52f:	43                   	inc    ebx
     530:	54                   	push   esp
     531:	49                   	dec    ecx
     532:	4f                   	dec    edi
     533:	4e                   	dec    esi
     534:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     537:	74 56                	je     58f <sysEnter_Vector-0x12fa71>
     539:	61                   	popa   
     53a:	6c                   	ins    BYTE PTR es:[edi],dx
     53b:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
     53e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     53f:	73 65                	jae    5a6 <sysEnter_Vector-0x12fa5a>
     541:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     544:	73 6f                	jae    5b5 <sysEnter_Vector-0x12fa4b>
     546:	6c                   	ins    BYTE PTR es:[edi],dx
     547:	76 65                	jbe    5ae <sysEnter_Vector-0x12fa52>
     549:	50                   	push   eax
     54a:	61                   	popa   
     54b:	74 68                	je     5b5 <sysEnter_Vector-0x12fa4b>
     54d:	5f                   	pop    edi
     54e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     550:	76 50                	jbe    5a2 <sysEnter_Vector-0x12fa5e>
     552:	61                   	popa   
     553:	74 68                	je     5bd <sysEnter_Vector-0x12fa43>
     555:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     558:	72 65                	jb     5bf <sysEnter_Vector-0x12fa41>
     55a:	61                   	popa   
     55b:	6d                   	ins    DWORD PTR es:[edi],dx
     55c:	00 70 61             	add    BYTE PTR [eax+0x61],dh
     55f:	74 68                	je     5c9 <sysEnter_Vector-0x12fa37>
     561:	00 77 72             	add    BYTE PTR [edi+0x72],dh
     564:	69 74 65 5f 74 69 6d 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x656d6974
     56b:	65 
     56c:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
     570:	6c                   	ins    BYTE PTR es:[edi],dx
     571:	49                   	dec    ecx
     572:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     575:	61                   	popa   
     576:	72 74                	jb     5ec <sysEnter_Vector-0x12fa14>
     578:	46                   	inc    esi
     579:	69 6c 65 50 6f 73 00 	imul   ebp,DWORD PTR [ebp+eiz*2+0x50],0x7300736f
     580:	73 
     581:	74 61                	je     5e4 <sysEnter_Vector-0x12fa1c>
     583:	74 49                	je     5ce <sysEnter_Vector-0x12fa32>
     585:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
     588:	50                   	push   eax
     589:	74 72                	je     5fd <sysEnter_Vector-0x12fa03>
     58b:	00 75 73             	add    BYTE PTR [ebp+0x73],dh
     58e:	65 50                	gs push eax
     590:	61                   	popa   
     591:	74 68                	je     5fb <sysEnter_Vector-0x12fa05>
     593:	56                   	push   esi
     594:	61                   	popa   
     595:	72 69                	jb     600 <sysEnter_Vector-0x12fa00>
     597:	61                   	popa   
     598:	62 6c 65 00          	bound  ebp,QWORD PTR [ebp+eiz*2+0x0]
     59c:	72 65                	jb     603 <sysEnter_Vector-0x12f9fd>
     59e:	73 6f                	jae    60f <sysEnter_Vector-0x12f9f1>
     5a0:	6c                   	ins    BYTE PTR es:[edi],dx
     5a1:	76 65                	jbe    608 <sysEnter_Vector-0x12f9f8>
     5a3:	50                   	push   eax
     5a4:	61                   	popa   
     5a5:	74 68                	je     60f <sysEnter_Vector-0x12f9f1>
     5a7:	5f                   	pop    edi
     5a8:	72 65                	jb     60f <sysEnter_Vector-0x12f9f1>
     5aa:	73 50                	jae    5fc <sysEnter_Vector-0x12fa04>
     5ac:	61                   	popa   
     5ad:	74 68                	je     617 <sysEnter_Vector-0x12f9e9>
     5af:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
     5b3:	6c                   	ins    BYTE PTR es:[edi],dx
     5b4:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
     5b7:	65 61                	gs popa 
     5b9:	74 65                	je     620 <sysEnter_Vector-0x12f9e0>
     5bb:	5f                   	pop    edi
     5bc:	64 61                	fs popa 
     5be:	74 65                	je     625 <sysEnter_Vector-0x12f9db>
     5c0:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     5c3:	74 6c                	je     631 <sysEnter_Vector-0x12f9cf>
     5c5:	69 6e 65 49 00 75 69 	imul   ebp,DWORD PTR [esi+0x65],0x69750049
     5cc:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5cd:	74 31                	je     600 <sysEnter_Vector-0x12fa00>
     5cf:	36 5f                	ss pop edi
     5d1:	74 00                	je     5d3 <sysEnter_Vector-0x12fa2d>
     5d3:	77 72                	ja     647 <sysEnter_Vector-0x12f9b9>
     5d5:	69 74 65 5f 64 61 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x65746164
     5dc:	65 
     5dd:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
     5e0:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     5e2:	49                   	dec    ecx
     5e3:	00 77 72             	add    BYTE PTR [edi+0x72],dh
     5e6:	69 74 65 49 00 72 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x73657200
     5ed:	73 
     5ee:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5ef:	6c                   	ins    BYTE PTR es:[edi],dx
     5f0:	76 65                	jbe    657 <sysEnter_Vector-0x12f9a9>
     5f2:	50                   	push   eax
     5f3:	61                   	popa   
     5f4:	74 68                	je     65e <sysEnter_Vector-0x12f9a2>
     5f6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     5f9:	5f                   	pop    edi
     5fa:	6c                   	ins    BYTE PTR es:[edi],dx
     5fb:	61                   	popa   
     5fc:	73 74                	jae    672 <sysEnter_Vector-0x12f98e>
     5fe:	6d                   	ins    DWORD PTR es:[edi],dx
     5ff:	6f                   	outs   dx,DWORD PTR ds:[esi]
     600:	64 00 70 6f          	add    BYTE PTR fs:[eax+0x6f],dh
     604:	73 69                	jae    66f <sysEnter_Vector-0x12f991>
     606:	74 69                	je     671 <sysEnter_Vector-0x12f98f>
     608:	6f                   	outs   dx,DWORD PTR ds:[esi]
     609:	6e                   	outs   dx,BYTE PTR ds:[esi]
     60a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     60d:	74 6c                	je     67b <sysEnter_Vector-0x12f985>
     60f:	69 6e 65 00 73 65 65 	imul   ebp,DWORD PTR [esi+0x65],0x65657300
     616:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
     619:	68 65 6e 63 65       	push   0x65636e65
     61e:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     621:	74 6c                	je     68f <sysEnter_Vector-0x12f971>
     623:	69 6e 65 52 65 74 75 	imul   ebp,DWORD PTR [esi+0x65],0x75746552
     62a:	72 6e                	jb     69a <sysEnter_Vector-0x12f966>
     62c:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     62f:	65 6f                	outs   dx,DWORD PTR gs:[esi]
     631:	70 65                	jo     698 <sysEnter_Vector-0x12f968>
     633:	6e                   	outs   dx,BYTE PTR ds:[esi]
     634:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
     638:	65 54                	gs push esp
     63a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     63b:	4f                   	dec    edi
     63c:	75 74                	jne    6b2 <sysEnter_Vector-0x12f94e>
     63e:	70 75                	jo     6b5 <sysEnter_Vector-0x12f94b>
     640:	74 00                	je     642 <sysEnter_Vector-0x12f9be>
     642:	63 6c 75 73          	arpl   WORD PTR [ebp+esi*2+0x73],bp
     646:	74 65                	je     6ad <sysEnter_Vector-0x12f953>
     648:	72 00                	jb     64a <sysEnter_Vector-0x12f9b6>
     64a:	61                   	popa   
     64b:	63 63 65             	arpl   WORD PTR [ebx+0x65],sp
     64e:	73 73                	jae    6c3 <sysEnter_Vector-0x12f93d>
     650:	5f                   	pop    edi
     651:	64 61                	fs popa 
     653:	74 65                	je     6ba <sysEnter_Vector-0x12f946>
     655:	00 73 66             	add    BYTE PTR [ebx+0x66],dh
     658:	73 74                	jae    6ce <sysEnter_Vector-0x12f932>
     65a:	61                   	popa   
     65b:	74 00                	je     65d <sysEnter_Vector-0x12f9a3>
     65d:	77 72                	ja     6d1 <sysEnter_Vector-0x12f92f>
     65f:	69 74 65 00 75 6e 6c 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x696c6e75
     666:	69 
     667:	6e                   	outs   dx,BYTE PTR ds:[esi]
     668:	6b 00 65             	imul   eax,DWORD PTR [eax],0x65
     66b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     66c:	74 72                	je     6e0 <sysEnter_Vector-0x12f920>
     66e:	69 65 73 00 66 69 6c 	imul   esp,DWORD PTR [ebp+0x73],0x6c696600
     675:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     677:	61                   	popa   
     678:	6d                   	ins    DWORD PTR es:[edi],dx
     679:	65 00 6f 75          	add    BYTE PTR gs:[edi+0x75],ch
     67d:	74 50                	je     6cf <sysEnter_Vector-0x12f931>
     67f:	61                   	popa   
     680:	74 68                	je     6ea <sysEnter_Vector-0x12f916>
     682:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
     686:	65 70 74             	gs jo  6fd <sysEnter_Vector-0x12f903>
     689:	72 00                	jb     68b <sysEnter_Vector-0x12f975>
     68b:	69 73 5f 64 69 72 00 	imul   esi,DWORD PTR [ebx+0x5f],0x726964
     692:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
     699:	79 
     69a:	5f                   	pop    edi
     69b:	74 00                	je     69d <sysEnter_Vector-0x12f963>
     69d:	66 73 74             	data16 jae 714 <sysEnter_Vector-0x12f8ec>
     6a0:	61                   	popa   
     6a1:	74 5f                	je     702 <sysEnter_Vector-0x12f8fe>
     6a3:	74 00                	je     6a5 <sysEnter_Vector-0x12f95b>
     6a5:	74 6f                	je     716 <sysEnter_Vector-0x12f8ea>
     6a7:	6b 65 6e 00          	imul   esp,DWORD PTR [ebp+0x6e],0x0
     6ab:	5f                   	pop    edi
     6ac:	42                   	inc    edx
     6ad:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6ae:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6af:	6c                   	ins    BYTE PTR es:[edi],dx
     6b0:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     6b3:	74 64                	je     719 <sysEnter_Vector-0x12f8e7>
     6b5:	69 72 49 00 64 69 72 	imul   esi,DWORD PTR [edx+0x49],0x72696400
     6bc:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     6be:	74 72                	je     732 <sysEnter_Vector-0x12f8ce>
     6c0:	79 00                	jns    6c2 <sysEnter_Vector-0x12f93e>
     6c2:	72 65                	jb     729 <sysEnter_Vector-0x12f8d7>
     6c4:	61                   	popa   
     6c5:	64 49                	fs dec ecx
     6c7:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
     6cb:	67 74 68             	addr16 je 736 <sysEnter_Vector-0x12f8ca>
     6ce:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     6d1:	61                   	popa   
     6d2:	64 00 6d 6f          	add    BYTE PTR fs:[ebp+0x6f],ch
     6d6:	64 65 00 62 75       	fs add BYTE PTR gs:[edx+0x75],ah
     6db:	66 66 65 72 00       	data16 data16 gs jb 6e0 <sysEnter_Vector-0x12f920>
     6e0:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
     6e3:	65 73 50             	gs jae 736 <sysEnter_Vector-0x12f8ca>
     6e6:	61                   	popa   
     6e7:	72 73                	jb     75c <sysEnter_Vector-0x12f8a4>
     6e9:	65 64 00 63 72       	gs add BYTE PTR fs:[ebx+0x72],ah
     6ee:	65 61                	gs popa 
     6f0:	74 65                	je     757 <sysEnter_Vector-0x12f8a9>
     6f2:	5f                   	pop    edi
     6f3:	74 69                	je     75e <sysEnter_Vector-0x12f8a2>
     6f5:	6d                   	ins    DWORD PTR es:[edi],dx
     6f6:	65 00 63 6c          	add    BYTE PTR gs:[ebx+0x6c],ah
     6fa:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6fb:	73 65                	jae    762 <sysEnter_Vector-0x12f89e>
     6fd:	49                   	dec    ecx
     6fe:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     701:	65 6b 49 00 73       	imul   ecx,DWORD PTR gs:[ecx+0x0],0x73
     706:	72 63                	jb     76b <sysEnter_Vector-0x12f895>
     708:	2f                   	das    
     709:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     710:	75 69                	jne    77b <sysEnter_Vector-0x12f885>
     712:	6e                   	outs   dx,BYTE PTR ds:[esi]
     713:	74 38                	je     74d <sysEnter_Vector-0x12f8b3>
     715:	5f                   	pop    edi
     716:	74 00                	je     718 <sysEnter_Vector-0x12f8e8>
     718:	73 74                	jae    78e <sysEnter_Vector-0x12f872>
     71a:	5f                   	pop    edi
     71b:	73 69                	jae    786 <sysEnter_Vector-0x12f87a>
     71d:	7a 65                	jp     784 <sysEnter_Vector-0x12f87c>
     71f:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     722:	73 6f                	jae    793 <sysEnter_Vector-0x12f86d>
     724:	6c                   	ins    BYTE PTR es:[edi],dx
     725:	76 65                	jbe    78c <sysEnter_Vector-0x12f874>
     727:	50                   	push   eax
     728:	61                   	popa   
     729:	74 68                	je     793 <sysEnter_Vector-0x12f86d>
     72b:	5f                   	pop    edi
     72c:	63 77 64             	arpl   WORD PTR [edi+0x64],si
     72f:	00 68 61             	add    BYTE PTR [eax+0x61],ch
     732:	6e                   	outs   dx,BYTE PTR ds:[esi]
     733:	64 6c                	fs ins BYTE PTR es:[edi],dx
     735:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
     739:	73 6f                	jae    7aa <sysEnter_Vector-0x12f856>
     73b:	6c                   	ins    BYTE PTR es:[edi],dx
     73c:	76 65                	jbe    7a3 <sysEnter_Vector-0x12f85d>
     73e:	50                   	push   eax
     73f:	61                   	popa   
     740:	74 68                	je     7aa <sysEnter_Vector-0x12f856>
     742:	5f                   	pop    edi
     743:	69 6e 50 61 74 68 00 	imul   ebp,DWORD PTR [esi+0x50],0x687461
     74a:	6c                   	ins    BYTE PTR es:[edi],dx
     74b:	4c                   	dec    esp
     74c:	69 6e 65 50 74 72 4c 	imul   ebp,DWORD PTR [esi+0x65],0x4c727450
     753:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     755:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     758:	6c                   	ins    BYTE PTR es:[edi],dx
     759:	65 5f                	gs pop edi
     75b:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
     75f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     760:	75 70                	jne    7d2 <sysEnter_Vector-0x12f82e>
     762:	00 62 79             	add    BYTE PTR [edx+0x79],ah
     765:	74 65                	je     7cc <sysEnter_Vector-0x12f834>
     767:	73 52                	jae    7bb <sysEnter_Vector-0x12f845>
     769:	65 74 75             	gs je  7e1 <sysEnter_Vector-0x12f81f>
     76c:	72 6e                	jb     7dc <sysEnter_Vector-0x12f824>
     76e:	65 64 00 67 65       	gs add BYTE PTR fs:[edi+0x65],ah
     773:	74 64                	je     7d9 <sysEnter_Vector-0x12f827>
     775:	69 72 00 62 75 66 66 	imul   esi,DWORD PTR [edx+0x0],0x66667562
     77c:	65 72 43             	gs jb  7c2 <sysEnter_Vector-0x12f83e>
     77f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     780:	75 6e                	jne    7f0 <sysEnter_Vector-0x12f810>
     782:	74 00                	je     784 <sysEnter_Vector-0x12f87c>
     784:	67 65 74 63          	addr16 gs je 7eb <sysEnter_Vector-0x12f815>
     788:	68 61 72 00 67       	push   0x67007261
     78d:	65 74 73             	gs je  803 <sysEnter_Vector-0x12f7fd>
     790:	00 70 75             	add    BYTE PTR [eax+0x75],dh
     793:	74 63                	je     7f8 <sysEnter_Vector-0x12f808>
     795:	00 70 75             	add    BYTE PTR [eax+0x75],dh
     798:	74 73                	je     80d <sysEnter_Vector-0x12f7f3>
     79a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     79d:	78 6c                	js     80b <sysEnter_Vector-0x12f7f5>
     79f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     7a1:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     7a4:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
     7a7:	72 00                	jb     7a9 <sysEnter_Vector-0x12f857>
     7a9:	73 72                	jae    81d <sysEnter_Vector-0x12f7e3>
     7ab:	63 2f                	arpl   WORD PTR [edi],bp
     7ad:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
     7b4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7b5:	70 75                	jo     82c <sysEnter_Vector-0x12f7d4>
     7b7:	74 2e                	je     7e7 <sysEnter_Vector-0x12f819>
     7b9:	63 00                	arpl   WORD PTR [eax],ax
     7bb:	67 65 74 73          	addr16 gs je 832 <sysEnter_Vector-0x12f7ce>
     7bf:	45                   	inc    ebp
     7c0:	72 72                	jb     834 <sysEnter_Vector-0x12f7cc>
     7c2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7c3:	72 00                	jb     7c5 <sysEnter_Vector-0x12f83b>
     7c5:	6c                   	ins    BYTE PTR es:[edi],dx
     7c6:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     7c9:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     7cc:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
     7d3:	74 53                	je     828 <sysEnter_Vector-0x12f7d8>
     7d5:	70 61                	jo     838 <sysEnter_Vector-0x12f7c8>
     7d7:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
     7da:	74 72                	je     84e <sysEnter_Vector-0x12f7b2>
     7dc:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     7df:	67 44                	addr16 inc esp
     7e1:	61                   	popa   
     7e2:	74 61                	je     845 <sysEnter_Vector-0x12f7bb>
     7e4:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
     7e7:	65 65 70 54          	gs gs jo 83f <sysEnter_Vector-0x12f7c1>
     7eb:	69 63 6b 73 00 71 75 	imul   esp,DWORD PTR [ebx+0x6b],0x75710073
     7f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7f3:	74 65                	je     85a <sysEnter_Vector-0x12f7a6>
     7f5:	50                   	push   eax
     7f6:	74 72                	je     86a <sysEnter_Vector-0x12f796>
     7f8:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     7fb:	67 76 50             	addr16 jbe 84e <sysEnter_Vector-0x12f7b2>
     7fe:	74 72                	je     872 <sysEnter_Vector-0x12f78e>
     800:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     803:	61                   	popa   
     804:	72 74                	jb     87a <sysEnter_Vector-0x12f786>
     806:	5f                   	pop    edi
     807:	6f                   	outs   dx,DWORD PTR ds:[esi]
     808:	66 5f                	pop    di
     80a:	77 6f                	ja     87b <sysEnter_Vector-0x12f785>
     80c:	72 64                	jb     872 <sysEnter_Vector-0x12f78e>
     80e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     811:	61                   	popa   
     812:	74 75                	je     889 <sysEnter_Vector-0x12f777>
     814:	73 00                	jae    816 <sysEnter_Vector-0x12f7ea>
     816:	66 6f                	outs   dx,WORD PTR ds:[esi]
     818:	72 6d                	jb     887 <sysEnter_Vector-0x12f779>
     81a:	61                   	popa   
     81b:	74 00                	je     81d <sysEnter_Vector-0x12f7e3>
     81d:	6c                   	ins    BYTE PTR es:[edi],dx
     81e:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
     825:	74 00                	je     827 <sysEnter_Vector-0x12f7d9>
     827:	73 74                	jae    89d <sysEnter_Vector-0x12f763>
     829:	61                   	popa   
     82a:	74 65                	je     891 <sysEnter_Vector-0x12f76f>
     82c:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
     830:	71 75                	jno    8a7 <sysEnter_Vector-0x12f759>
     832:	6f                   	outs   dx,DWORD PTR ds:[esi]
     833:	74 65                	je     89a <sysEnter_Vector-0x12f766>
     835:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
     838:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
     83b:	6c                   	ins    BYTE PTR es:[edi],dx
     83c:	74 69                	je     8a7 <sysEnter_Vector-0x12f759>
     83e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     83f:	5f                   	pop    edi
     840:	76 61                	jbe    8a3 <sysEnter_Vector-0x12f75d>
     842:	5f                   	pop    edi
     843:	6c                   	ins    BYTE PTR es:[edi],dx
     844:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
     84b:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
     852:	00 
     853:	73 70                	jae    8c5 <sysEnter_Vector-0x12f73b>
     855:	61                   	popa   
     856:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
     859:	74 72                	je     8cd <sysEnter_Vector-0x12f733>
     85b:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
     85f:	70 00                	jo     861 <sysEnter_Vector-0x12f79f>
     861:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     864:	6c                   	ins    BYTE PTR es:[edi],dx
     865:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
     86c:	67 76 00             	addr16 jbe 86f <sysEnter_Vector-0x12f791>
     86f:	77 61                	ja     8d2 <sysEnter_Vector-0x12f72e>
     871:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
     878:	65 
     879:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
     87c:	4c                   	dec    esp
     87d:	65 76 65             	gs jbe 8e5 <sysEnter_Vector-0x12f71b>
     880:	6c                   	ins    BYTE PTR es:[edi],dx
     881:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
     884:	6c                   	ins    BYTE PTR es:[edi],dx
     885:	6c                   	ins    BYTE PTR es:[edi],dx
     886:	6e                   	outs   dx,BYTE PTR ds:[esi]
     887:	75 6d                	jne    8f6 <sysEnter_Vector-0x12f70a>
     889:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     88c:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
     893:	65 72 00             	gs jb  896 <sysEnter_Vector-0x12f76a>
     896:	73 6c                	jae    904 <sysEnter_Vector-0x12f6fc>
     898:	65 65 70 4d          	gs gs jo 8e9 <sysEnter_Vector-0x12f717>
     89c:	53                   	push   ebx
     89d:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
     8a0:	65 65 70 00          	gs gs jo 8a4 <sysEnter_Vector-0x12f75c>
     8a4:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     8a7:	6c                   	ins    BYTE PTR es:[edi],dx
     8a8:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
     8af:	67 76 49             	addr16 jbe 8fb <sysEnter_Vector-0x12f705>
     8b2:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
     8b5:	6d                   	ins    DWORD PTR es:[edi],dx
     8b6:	73 00                	jae    8b8 <sysEnter_Vector-0x12f748>
     8b8:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8ba:	5f                   	pop    edi
     8bb:	73 79                	jae    936 <sysEnter_Vector-0x12f6ca>
     8bd:	73 63                	jae    922 <sysEnter_Vector-0x12f6de>
     8bf:	61                   	popa   
     8c0:	6c                   	ins    BYTE PTR es:[edi],dx
     8c1:	6c                   	ins    BYTE PTR es:[edi],dx
     8c2:	32 00                	xor    al,BYTE PTR [eax]
     8c4:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8c6:	5f                   	pop    edi
     8c7:	73 79                	jae    942 <sysEnter_Vector-0x12f6be>
     8c9:	73 63                	jae    92e <sysEnter_Vector-0x12f6d2>
     8cb:	61                   	popa   
     8cc:	6c                   	ins    BYTE PTR es:[edi],dx
     8cd:	6c                   	ins    BYTE PTR es:[edi],dx
     8ce:	33 00                	xor    eax,DWORD PTR [eax]
     8d0:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     8d2:	5f                   	pop    edi
     8d3:	73 79                	jae    94e <sysEnter_Vector-0x12f6b2>
     8d5:	73 63                	jae    93a <sysEnter_Vector-0x12f6c6>
     8d7:	61                   	popa   
     8d8:	6c                   	ins    BYTE PTR es:[edi],dx
     8d9:	6c                   	ins    BYTE PTR es:[edi],dx
     8da:	34 00                	xor    al,0x0
     8dc:	49                   	dec    ecx
     8dd:	4e                   	dec    esi
     8de:	5f                   	pop    edi
     8df:	57                   	push   edi
     8e0:	4f                   	dec    edi
     8e1:	52                   	push   edx
     8e2:	44                   	inc    esp
     8e3:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     8e6:	67 76 5f             	addr16 jbe 948 <sysEnter_Vector-0x12f6b8>
     8e9:	73 69                	jae    954 <sysEnter_Vector-0x12f6ac>
     8eb:	7a 65                	jp     952 <sysEnter_Vector-0x12f6ae>
     8ed:	00 77 68             	add    BYTE PTR [edi+0x68],dh
     8f0:	69 63 68 00 73 69 67 	imul   esp,DWORD PTR [ebx+0x68],0x67697300
     8f7:	48                   	dec    eax
     8f8:	61                   	popa   
     8f9:	6e                   	outs   dx,BYTE PTR ds:[esi]
     8fa:	64 6c                	fs ins BYTE PTR es:[edi],dx
     8fc:	65 72 00             	gs jb  8ff <sysEnter_Vector-0x12f701>
     8ff:	69 73 73 70 61 63 65 	imul   esi,DWORD PTR [ebx+0x73],0x65636170
     906:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
     909:	67 6e                	outs   dx,BYTE PTR ds:[si]
     90b:	75 63                	jne    970 <sysEnter_Vector-0x12f690>
     90d:	5f                   	pop    edi
     90e:	76 61                	jbe    971 <sysEnter_Vector-0x12f68f>
     910:	5f                   	pop    edi
     911:	6c                   	ins    BYTE PTR es:[edi],dx
     912:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
     919:	6f                   	outs   dx,DWORD PTR ds:[esi]
     91a:	00 70 61             	add    BYTE PTR [eax+0x61],dh
     91d:	72 61                	jb     980 <sysEnter_Vector-0x12f680>
     91f:	6d                   	ins    DWORD PTR es:[edi],dx
     920:	31 00                	xor    DWORD PTR [eax],eax
     922:	70 61                	jo     985 <sysEnter_Vector-0x12f67b>
     924:	72 61                	jb     987 <sysEnter_Vector-0x12f679>
     926:	6d                   	ins    DWORD PTR es:[edi],dx
     927:	32 00                	xor    al,BYTE PTR [eax]
     929:	70 61                	jo     98c <sysEnter_Vector-0x12f674>
     92b:	72 61                	jb     98e <sysEnter_Vector-0x12f672>
     92d:	6d                   	ins    DWORD PTR es:[edi],dx
     92e:	33 00                	xor    eax,DWORD PTR [eax]
     930:	70 61                	jo     993 <sysEnter_Vector-0x12f66d>
     932:	72 61                	jb     995 <sysEnter_Vector-0x12f66b>
     934:	6d                   	ins    DWORD PTR es:[edi],dx
     935:	34 00                	xor    al,0x0
     937:	73 65                	jae    99e <sysEnter_Vector-0x12f662>
     939:	74 63                	je     99e <sysEnter_Vector-0x12f662>
     93b:	77 64                	ja     9a1 <sysEnter_Vector-0x12f65f>
     93d:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     940:	6f                   	outs   dx,DWORD PTR ds:[esi]
     941:	67 72 61             	addr16 jb 9a5 <sysEnter_Vector-0x12f65b>
     944:	6d                   	ins    DWORD PTR es:[edi],dx
     945:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     948:	65 63 61 00          	arpl   WORD PTR gs:[ecx+0x0],sp
     94c:	65 78 65             	gs js  9b4 <sysEnter_Vector-0x12f64c>
     94f:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
     952:	65 78 69             	gs js  9be <sysEnter_Vector-0x12f642>
     955:	74 00                	je     957 <sysEnter_Vector-0x12f6a9>
     957:	73 69                	jae    9c2 <sysEnter_Vector-0x12f63e>
     959:	67 6e                	outs   dx,BYTE PTR ds:[si]
     95b:	61                   	popa   
     95c:	6c                   	ins    BYTE PTR es:[edi],dx
     95d:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     960:	65 63 00             	arpl   WORD PTR gs:[eax],ax
     963:	5f                   	pop    edi
     964:	5f                   	pop    edi
     965:	73 65                	jae    9cc <sysEnter_Vector-0x12f634>
     967:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     96a:	64 73 00             	fs jae 96d <sysEnter_Vector-0x12f693>
     96d:	44                   	inc    esp
     96e:	55                   	push   ebp
     96f:	4c                   	dec    esp
     970:	4c                   	dec    esp
     971:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     974:	61                   	popa   
     975:	74 65                	je     9dc <sysEnter_Vector-0x12f624>
     977:	73 00                	jae    979 <sysEnter_Vector-0x12f687>
     979:	73 72                	jae    9ed <sysEnter_Vector-0x12f613>
     97b:	63 2f                	arpl   WORD PTR [edi],bp
     97d:	6c                   	ins    BYTE PTR es:[edi],dx
     97e:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     985:	4f                   	dec    edi
     986:	53                   	push   ebx
     987:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     98a:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     98d:	6c                   	ins    BYTE PTR es:[edi],dx
     98e:	69 6e 65 00 64 6f 5f 	imul   ebp,DWORD PTR [esi+0x65],0x5f6f6400
     995:	73 79                	jae    a10 <sysEnter_Vector-0x12f5f0>
     997:	73 63                	jae    9fc <sysEnter_Vector-0x12f604>
     999:	61                   	popa   
     99a:	6c                   	ins    BYTE PTR es:[edi],dx
     99b:	6c                   	ins    BYTE PTR es:[edi],dx
     99c:	30 00                	xor    BYTE PTR [eax],al
     99e:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     9a0:	5f                   	pop    edi
     9a1:	73 79                	jae    a1c <sysEnter_Vector-0x12f5e4>
     9a3:	73 63                	jae    a08 <sysEnter_Vector-0x12f5f8>
     9a5:	61                   	popa   
     9a6:	6c                   	ins    BYTE PTR es:[edi],dx
     9a7:	6c                   	ins    BYTE PTR es:[edi],dx
     9a8:	31 00                	xor    DWORD PTR [eax],eax
     9aa:	73 70                	jae    a1c <sysEnter_Vector-0x12f5e4>
     9ac:	6c                   	ins    BYTE PTR es:[edi],dx
     9ad:	69 74 49 00 73 65 74 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x70746573
     9b4:	70 
     9b5:	72 69                	jb     a20 <sysEnter_Vector-0x12f5e0>
     9b7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9b8:	72 69                	jb     a23 <sysEnter_Vector-0x12f5dd>
     9ba:	74 79                	je     a35 <sysEnter_Vector-0x12f5cb>
     9bc:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     9c0:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
     9c3:	6c                   	ins    BYTE PTR es:[edi],dx
     9c4:	65 61                	gs popa 
     9c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9c7:	75 70                	jne    a39 <sysEnter_Vector-0x12f5c7>
     9c9:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     9cc:	67 73 00             	addr16 jae 9cf <sysEnter_Vector-0x12f631>
     9cf:	70 72                	jo     a43 <sysEnter_Vector-0x12f5bd>
     9d1:	69 6e 74 64 49 00 49 	imul   ebp,DWORD PTR [esi+0x74],0x49004964
     9d8:	4e                   	dec    esi
     9d9:	5f                   	pop    edi
     9da:	53                   	push   ebx
     9db:	54                   	push   esp
     9dc:	52                   	push   edx
     9dd:	49                   	dec    ecx
     9de:	4e                   	dec    esi
     9df:	47                   	inc    edi
     9e0:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     9e3:	74 53                	je     a38 <sysEnter_Vector-0x12f5c8>
     9e5:	54                   	push   esp
     9e6:	44                   	inc    esp
     9e7:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     9ea:	67 63 00             	arpl   WORD PTR [bx+si],ax
     9ed:	5f                   	pop    edi
     9ee:	5f                   	pop    edi
     9ef:	74 69                	je     a5a <sysEnter_Vector-0x12f5a6>
     9f1:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
     9f4:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
     9f8:	65 41                	gs inc ecx
     9fa:	44                   	inc    esp
     9fb:	75 6d                	jne    a6a <sysEnter_Vector-0x12f596>
     9fd:	70 00                	jo     9ff <sysEnter_Vector-0x12f601>
     9ff:	66 69 6c 65 64 00 6d 	imul   bp,WORD PTR [ebp+eiz*2+0x64],0x6d00
     a06:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a07:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
     a0e:	6e 
     a0f:	61                   	popa   
     a10:	6c                   	ins    BYTE PTR es:[edi],dx
     a11:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     a15:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     a18:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
     a1f:	65 
     a20:	64 00 61 72          	add    BYTE PTR fs:[ecx+0x72],ah
     a24:	67 76 00             	addr16 jbe a27 <sysEnter_Vector-0x12f5d9>
     a27:	73 74                	jae    a9d <sysEnter_Vector-0x12f563>
     a29:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a2a:	70 00                	jo     a2c <sysEnter_Vector-0x12f5d4>
     a2c:	70 72                	jo     aa0 <sysEnter_Vector-0x12f560>
     a2e:	69 6e 74 64 00 70 72 	imul   ebp,DWORD PTR [esi+0x74],0x72700064
     a35:	69 6e 74 49 00 61 64 	imul   ebp,DWORD PTR [esi+0x74],0x64610049
     a3c:	64 72 00             	fs jb  a3f <sysEnter_Vector-0x12f5c1>
     a3f:	73 4d                	jae    a8e <sysEnter_Vector-0x12f572>
     a41:	4d                   	dec    ebp
     a42:	61                   	popa   
     a43:	70 53                	jo     a98 <sysEnter_Vector-0x12f568>
     a45:	79 73                	jns    aba <sysEnter_Vector-0x12f546>
     a47:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     a4a:	6c                   	ins    BYTE PTR es:[edi],dx
     a4b:	00 6f 66             	add    BYTE PTR [edi+0x66],ch
     a4e:	66 5f                	pop    di
     a50:	74 00                	je     a52 <sysEnter_Vector-0x12f5ae>
     a52:	70 61                	jo     ab5 <sysEnter_Vector-0x12f54b>
     a54:	72 61                	jb     ab7 <sysEnter_Vector-0x12f549>
     a56:	6d                   	ins    DWORD PTR es:[edi],dx
     a57:	73 00                	jae    a59 <sysEnter_Vector-0x12f5a7>
     a59:	66 6c                	data16 ins BYTE PTR es:[edi],dx
     a5b:	61                   	popa   
     a5c:	67 73 00             	addr16 jae a5f <sysEnter_Vector-0x12f5a1>
     a5f:	73 72                	jae    ad3 <sysEnter_Vector-0x12f52d>
     a61:	63 2f                	arpl   WORD PTR [edi],bp
     a63:	6c                   	ins    BYTE PTR es:[edi],dx
     a64:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     a6b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a6e:	70 72                	jo     ae2 <sysEnter_Vector-0x12f51e>
     a70:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a71:	74 00                	je     a73 <sysEnter_Vector-0x12f58d>
     a73:	6d                   	ins    DWORD PTR es:[edi],dx
     a74:	6d                   	ins    DWORD PTR es:[edi],dx
     a75:	61                   	popa   
     a76:	70 00                	jo     a78 <sysEnter_Vector-0x12f588>
     a78:	73 79                	jae    af3 <sysEnter_Vector-0x12f50d>
     a7a:	73 63                	jae    adf <sysEnter_Vector-0x12f521>
     a7c:	61                   	popa   
     a7d:	6c                   	ins    BYTE PTR es:[edi],dx
     a7e:	6c                   	ins    BYTE PTR es:[edi],dx
     a7f:	5f                   	pop    edi
     a80:	6d                   	ins    DWORD PTR es:[edi],dx
     a81:	6d                   	ins    DWORD PTR es:[edi],dx
     a82:	61                   	popa   
     a83:	70 5f                	jo     ae4 <sysEnter_Vector-0x12f51c>
     a85:	74 00                	je     a87 <sysEnter_Vector-0x12f579>
     a87:	6d                   	ins    DWORD PTR es:[edi],dx
     a88:	61                   	popa   
     a89:	6c                   	ins    BYTE PTR es:[edi],dx
     a8a:	6c                   	ins    BYTE PTR es:[edi],dx
     a8b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a8c:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
     a8f:	70 72                	jo     b03 <sysEnter_Vector-0x12f4fd>
     a91:	65 76 00             	gs jbe a94 <sysEnter_Vector-0x12f56c>
     a94:	6c                   	ins    BYTE PTR es:[edi],dx
     a95:	61                   	popa   
     a96:	73 74                	jae    b0c <sysEnter_Vector-0x12f4f4>
     a98:	48                   	dec    eax
     a99:	52                   	push   edx
     a9a:	43                   	inc    ebx
     a9b:	72 65                	jb     b02 <sysEnter_Vector-0x12f4fe>
     a9d:	61                   	popa   
     a9e:	74 65                	je     b05 <sysEnter_Vector-0x12f4fb>
     aa0:	64 00 6e 65          	add    BYTE PTR fs:[esi+0x65],ch
     aa4:	78 74                	js     b1a <sysEnter_Vector-0x12f4e6>
     aa6:	00 68 65             	add    BYTE PTR [eax+0x65],ch
     aa9:	61                   	popa   
     aaa:	70 72                	jo     b1e <sysEnter_Vector-0x12f4e2>
     aac:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
     ab0:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ab3:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
     aba:	63 
     abb:	00 68 65             	add    BYTE PTR [eax+0x65],ch
     abe:	61                   	popa   
     abf:	70 42                	jo     b03 <sysEnter_Vector-0x12f4fd>
     ac1:	61                   	popa   
     ac2:	73 65                	jae    b29 <sysEnter_Vector-0x12f4d7>
     ac4:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     ac7:	65 65 49             	gs gs dec ecx
     aca:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     acd:	72 6b                	jb     b3a <sysEnter_Vector-0x12f4c6>
     acf:	65 72 00             	gs jb  ad2 <sysEnter_Vector-0x12f52e>
     ad2:	72 65                	jb     b39 <sysEnter_Vector-0x12f4c7>
     ad4:	71 75                	jno    b4b <sysEnter_Vector-0x12f4b5>
     ad6:	65 73 74             	gs jae b4d <sysEnter_Vector-0x12f4b3>
     ad9:	53                   	push   ebx
     ada:	69 7a 65 00 6e 65 77 	imul   edi,DWORD PTR [edx+0x65],0x77656e00
     ae1:	48                   	dec    eax
     ae2:	65 61                	gs popa 
     ae4:	70 52                	jo     b38 <sysEnter_Vector-0x12f4c8>
     ae6:	65 71 75             	gs jno b5e <sysEnter_Vector-0x12f4a2>
     ae9:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
     af0:	75 6c                	jne    b5e <sysEnter_Vector-0x12f4a2>
     af2:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
     af9:	75 65                	jne    b60 <sysEnter_Vector-0x12f4a0>
     afb:	73 74                	jae    b71 <sysEnter_Vector-0x12f48f>
     afd:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     b00:	6c                   	ins    BYTE PTR es:[edi],dx
     b01:	6c                   	ins    BYTE PTR es:[edi],dx
     b02:	65 72 00             	gs jb  b05 <sysEnter_Vector-0x12f4fb>
     b05:	69 6e 55 73 65 00 73 	imul   ebp,DWORD PTR [esi+0x55],0x73006573
     b0c:	68 65 61 70 00       	push   0x706165
     b11:	68 65 61 70 43       	push   0x43706165
     b16:	75 72                	jne    b8a <sysEnter_Vector-0x12f476>
     b18:	72 00                	jb     b1a <sysEnter_Vector-0x12f4e6>
     b1a:	66 6f                	outs   dx,WORD PTR ds:[esi]
     b1c:	6c                   	ins    BYTE PTR es:[edi],dx
     b1d:	64 70 74             	fs jo  b94 <sysEnter_Vector-0x12f46c>
     b20:	72 00                	jb     b22 <sysEnter_Vector-0x12f4de>
     b22:	6d                   	ins    DWORD PTR es:[edi],dx
     b23:	61                   	popa   
     b24:	6c                   	ins    BYTE PTR es:[edi],dx
     b25:	6c                   	ins    BYTE PTR es:[edi],dx
     b26:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b27:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
     b2a:	6c                   	ins    BYTE PTR es:[edi],dx
     b2b:	65 61                	gs popa 
     b2d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b2e:	75 70                	jne    ba0 <sysEnter_Vector-0x12f460>
     b30:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
     b33:	6c                   	ins    BYTE PTR es:[edi],dx
     b34:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b35:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     b38:	65 64 50             	gs fs push eax
     b3b:	74 72                	je     baf <sysEnter_Vector-0x12f451>
     b3d:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
     b40:	77 6c                	ja     bae <sysEnter_Vector-0x12f452>
     b42:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     b44:	00 53 61             	add    BYTE PTR [ebx+0x61],dl
     b47:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b48:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x706f6f
     b4f:	00 
     b50:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b51:	65 77 53             	gs ja  ba7 <sysEnter_Vector-0x12f459>
     b54:	69 7a 65 00 72 65 61 	imul   edi,DWORD PTR [edx+0x65],0x61657200
     b5b:	6c                   	ins    BYTE PTR es:[edi],dx
     b5c:	53                   	push   ebx
     b5d:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
     b64:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:[edx+0x65],dh
     b6a:	61                   	popa   
     b6b:	6c                   	ins    BYTE PTR es:[edi],dx
     b6c:	6c                   	ins    BYTE PTR es:[edi],dx
     b6d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b6e:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
     b71:	75 73                	jne    be6 <sysEnter_Vector-0x12f41a>
     b73:	65 73 00             	gs jae b76 <sysEnter_Vector-0x12f48a>
     b76:	68 65 61 70 72       	push   0x72706165
     b7b:	65 63 00             	arpl   WORD PTR gs:[eax],ax
     b7e:	66 6e                	data16 outs dx,BYTE PTR ds:[esi]
     b80:	65 77 70             	gs ja  bf3 <sysEnter_Vector-0x12f40d>
     b83:	74 72                	je     bf7 <sysEnter_Vector-0x12f409>
     b85:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     b88:	63 2f                	arpl   WORD PTR [edi],bp
     b8a:	6d                   	ins    DWORD PTR es:[edi],dx
     b8b:	61                   	popa   
     b8c:	6c                   	ins    BYTE PTR es:[edi],dx
     b8d:	6c                   	ins    BYTE PTR es:[edi],dx
     b8e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b8f:	63 2e                	arpl   WORD PTR [esi],bp
     b91:	63 00                	arpl   WORD PTR [eax],ax
     b93:	68 65 61 70 50       	push   0x50706165
     b98:	74 72                	je     c0c <sysEnter_Vector-0x12f3f4>
     b9a:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     b9d:	65 65 00 66 70       	gs add BYTE PTR gs:[esi+0x70],ah
     ba2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ba3:	69 6e 74 65 72 00 53 	imul   ebp,DWORD PTR [esi+0x74],0x53007265
     baa:	61                   	popa   
     bab:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bac:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x32706f6f
     bb3:	32 
     bb4:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     bb7:	6c                   	ins    BYTE PTR es:[edi],dx
     bb8:	6c                   	ins    BYTE PTR es:[edi],dx
     bb9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bba:	63 46 69             	arpl   WORD PTR [esi+0x69],ax
     bbd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bbe:	64 41                	fs inc ecx
     bc0:	76 61                	jbe    c23 <sysEnter_Vector-0x12f3dd>
     bc2:	69 6c 61 62 6c 65 4d 	imul   ebp,DWORD PTR [ecx+eiz*2+0x62],0x654d656c
     bc9:	65 
     bca:	6d                   	ins    DWORD PTR es:[edi],dx
     bcb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bcc:	72 79                	jb     c47 <sysEnter_Vector-0x12f3b9>
     bce:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     bd1:	61                   	popa   
     bd2:	6c                   	ins    BYTE PTR es:[edi],dx
     bd3:	6c                   	ins    BYTE PTR es:[edi],dx
     bd4:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bd5:	63 00                	arpl   WORD PTR [eax],ax
     bd7:	68 65 61 70 45       	push   0x45706165
     bdc:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bdd:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
     be1:	6c                   	ins    BYTE PTR es:[edi],dx
     be2:	6c                   	ins    BYTE PTR es:[edi],dx
     be3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     be4:	63 53 61             	arpl   WORD PTR [ebx+0x61],dx
     be7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     be8:	69 74 79 43 68 65 63 	imul   esi,DWORD PTR [ecx+edi*2+0x43],0x6b636568
     bef:	6b 
     bf0:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
     bf3:	6d                   	ins    DWORD PTR es:[edi],dx
     bf4:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     bf7:	49                   	dec    ecx
     bf8:	00 64 65 73          	add    BYTE PTR [ebp+eiz*2+0x73],ah
     bfc:	74 00                	je     bfe <sysEnter_Vector-0x12f402>
     bfe:	6d                   	ins    DWORD PTR es:[edi],dx
     bff:	65 6d                	gs ins DWORD PTR es:[edi],dx
     c01:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     c04:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     c07:	63 2f                	arpl   WORD PTR [edi],bp
     c09:	6d                   	ins    DWORD PTR es:[edi],dx
     c0a:	65 6d                	gs ins DWORD PTR es:[edi],dx
     c0c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     c0f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     c12:	73 72                	jae    c86 <sysEnter_Vector-0x12f37a>
     c14:	63 2f                	arpl   WORD PTR [edi],bp
     c16:	6d                   	ins    DWORD PTR es:[edi],dx
     c17:	65 6d                	gs ins DWORD PTR es:[edi],dx
     c19:	73 65                	jae    c80 <sysEnter_Vector-0x12f380>
     c1b:	74 2e                	je     c4b <sysEnter_Vector-0x12f3b5>
     c1d:	63 00                	arpl   WORD PTR [eax],ax
     c1f:	6d                   	ins    DWORD PTR es:[edi],dx
     c20:	65 6d                	gs ins DWORD PTR es:[edi],dx
     c22:	73 65                	jae    c89 <sysEnter_Vector-0x12f377>
     c24:	74 00                	je     c26 <sysEnter_Vector-0x12f3da>
     c26:	6d                   	ins    DWORD PTR es:[edi],dx
     c27:	65 6d                	gs ins DWORD PTR es:[edi],dx
     c29:	73 65                	jae    c90 <sysEnter_Vector-0x12f370>
     c2b:	74 49                	je     c76 <sysEnter_Vector-0x12f38a>
     c2d:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
     c30:	61                   	popa   
     c31:	6c                   	ins    BYTE PTR es:[edi],dx
     c32:	00 66 56             	add    BYTE PTR [esi+0x56],ah
     c35:	61                   	popa   
     c36:	6c                   	ins    BYTE PTR es:[edi],dx
     c37:	00 6f 6c             	add    BYTE PTR [edi+0x6c],ch
     c3a:	64 66 64 00 64 75 70 	fs data16 add BYTE PTR fs:[ebp+esi*2+0x70],ah
     c41:	33 00                	xor    eax,DWORD PTR [eax]
     c43:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c44:	65 77 66             	gs ja  cad <sysEnter_Vector-0x12f353>
     c47:	64 00 70 69          	add    BYTE PTR fs:[eax+0x69],dh
     c4b:	70 65                	jo     cb2 <sysEnter_Vector-0x12f34e>
     c4d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     c50:	63 2f                	arpl   WORD PTR [edi],bp
     c52:	70 69                	jo     cbd <sysEnter_Vector-0x12f343>
     c54:	70 65                	jo     cbb <sysEnter_Vector-0x12f345>
     c56:	5f                   	pop    edi
     c57:	6c                   	ins    BYTE PTR es:[edi],dx
     c58:	69 62 2e 63 00 70 69 	imul   esp,DWORD PTR [edx+0x2e],0x69700063
     c5f:	70 65                	jo     cc6 <sysEnter_Vector-0x12f33a>
     c61:	66 64 00 73 72       	data16 add BYTE PTR fs:[ebx+0x72],dh
     c66:	63 2f                	arpl   WORD PTR [edi],bp
     c68:	70 72                	jo     cdc <sysEnter_Vector-0x12f324>
     c6a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c6b:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     c6e:	66 6f                	outs   dx,WORD PTR ds:[esi]
     c70:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     c73:	74 6d                	je     ce2 <sysEnter_Vector-0x12f31e>
     c75:	5f                   	pop    edi
     c76:	68 6f 75 72 00       	push   0x72756f
     c7b:	74 6d                	je     cea <sysEnter_Vector-0x12f316>
     c7d:	5f                   	pop    edi
     c7e:	7a 6f                	jp     cef <sysEnter_Vector-0x12f311>
     c80:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c81:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
     c85:	61                   	popa   
     c86:	74 42                	je     cca <sysEnter_Vector-0x12f336>
     c88:	75 66                	jne    cf0 <sysEnter_Vector-0x12f310>
     c8a:	66 65 72 00          	data16 gs jb c8e <sysEnter_Vector-0x12f372>
     c8e:	6c                   	ins    BYTE PTR es:[edi],dx
     c8f:	61                   	popa   
     c90:	73 74                	jae    d06 <sysEnter_Vector-0x12f2fa>
     c92:	55                   	push   ebp
     c93:	70 64                	jo     cf9 <sysEnter_Vector-0x12f307>
     c95:	61                   	popa   
     c96:	74 65                	je     cfd <sysEnter_Vector-0x12f303>
     c98:	49                   	dec    ecx
     c99:	74 65                	je     d00 <sysEnter_Vector-0x12f300>
     c9b:	72 61                	jb     cfe <sysEnter_Vector-0x12f302>
     c9d:	74 69                	je     d08 <sysEnter_Vector-0x12f2f8>
     c9f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ca0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ca1:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
     ca5:	45                   	inc    ebp
     ca6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ca7:	74 72                	je     d1b <sysEnter_Vector-0x12f2e5>
     ca9:	69 65 73 00 62 75 69 	imul   esp,DWORD PTR [ebp+0x73],0x69756200
     cb0:	6c                   	ins    BYTE PTR es:[edi],dx
     cb1:	64 50                	fs push eax
     cb3:	72 6f                	jb     d24 <sysEnter_Vector-0x12f2dc>
     cb5:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     cb8:	66 6f                	outs   dx,WORD PTR ds:[esi]
     cba:	54                   	push   esp
     cbb:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     cbf:	6d                   	ins    DWORD PTR es:[edi],dx
     cc0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cc1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cc2:	00 62 75             	add    BYTE PTR [edx+0x75],ah
     cc5:	69 6c 64 41 6c 6c 50 	imul   ebp,DWORD PTR [esp+eiz*2+0x41],0x72506c6c
     ccc:	72 
     ccd:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cce:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     cd1:	66 6f                	outs   dx,WORD PTR ds:[esi]
     cd3:	54                   	push   esp
     cd4:	73 00                	jae    cd6 <sysEnter_Vector-0x12f32a>
     cd6:	74 6d                	je     d45 <sysEnter_Vector-0x12f2bb>
     cd8:	5f                   	pop    edi
     cd9:	79 65                	jns    d40 <sysEnter_Vector-0x12f2c0>
     cdb:	61                   	popa   
     cdc:	72 00                	jb     cde <sysEnter_Vector-0x12f322>
     cde:	69 74 65 72 61 74 69 	imul   esi,DWORD PTR [ebp+eiz*2+0x72],0x6f697461
     ce5:	6f 
     ce6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ce7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     cea:	61                   	popa   
     ceb:	74 69                	je     d56 <sysEnter_Vector-0x12f2aa>
     ced:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cee:	66 6f                	outs   dx,WORD PTR ds:[esi]
     cf0:	00 74 6f 70          	add    BYTE PTR [edi+ebp*2+0x70],dh
     cf4:	69 6e 66 6f 00 62 75 	imul   ebp,DWORD PTR [esi+0x66],0x7562006f
     cfb:	69 6c 64 50 72 6f 63 	imul   ebp,DWORD PTR [esp+eiz*2+0x50],0x49636f72
     d02:	49 
     d03:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d04:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d06:	54                   	push   esp
     d07:	49                   	dec    ecx
     d08:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     d0c:	69 73 64 73 74 00 76 	imul   esi,DWORD PTR [ebx+0x64],0x76007473
     d13:	69 72 74 75 61 6c 53 	imul   esi,DWORD PTR [edx+0x74],0x536c6175
     d1a:	69 7a 65 00 6d 65 6d 	imul   edi,DWORD PTR [edx+0x65],0x6d656d00
     d21:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d22:	72 79                	jb     d9d <sysEnter_Vector-0x12f263>
     d24:	53                   	push   ebx
     d25:	69 7a 65 00 70 72 6f 	imul   edi,DWORD PTR [edx+0x65],0x6f727000
     d2c:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     d2f:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d31:	00 74 6f 74          	add    BYTE PTR [edi+ebp*2+0x74],dh
     d35:	61                   	popa   
     d36:	6c                   	ins    BYTE PTR es:[edi],dx
     d37:	54                   	push   esp
     d38:	69 63 6b 73 00 70 72 	imul   esp,DWORD PTR [ebx+0x6b],0x72700073
     d3f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d40:	63 43 6f             	arpl   WORD PTR [ebx+0x6f],ax
     d43:	75 6e                	jne    db3 <sysEnter_Vector-0x12f24d>
     d45:	74 00                	je     d47 <sysEnter_Vector-0x12f2b9>
     d47:	74 6d                	je     db6 <sysEnter_Vector-0x12f24a>
     d49:	5f                   	pop    edi
     d4a:	6d                   	ins    DWORD PTR es:[edi],dx
     d4b:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
     d52:	64 61                	fs popa 
     d54:	79 00                	jns    d56 <sysEnter_Vector-0x12f2aa>
     d56:	72 75                	jb     dcd <sysEnter_Vector-0x12f233>
     d58:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d59:	74 69                	je     dc4 <sysEnter_Vector-0x12f23c>
     d5b:	6d                   	ins    DWORD PTR es:[edi],dx
     d5c:	65 5f                	gs pop edi
     d5e:	73 65                	jae    dc5 <sysEnter_Vector-0x12f23b>
     d60:	63 73 00             	arpl   WORD PTR [ebx+0x0],si
     d63:	6d                   	ins    DWORD PTR es:[edi],dx
     d64:	61                   	popa   
     d65:	6a 6f                	push   0x6f
     d67:	72 46                	jb     daf <sysEnter_Vector-0x12f251>
     d69:	61                   	popa   
     d6a:	75 6c                	jne    dd8 <sysEnter_Vector-0x12f228>
     d6c:	74 73                	je     de1 <sysEnter_Vector-0x12f21f>
     d6e:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
     d72:	74 54                	je     dc8 <sysEnter_Vector-0x12f238>
     d74:	69 63 6b 73 00 74 69 	imul   esp,DWORD PTR [ebx+0x6b],0x69740073
     d7b:	6d                   	ins    DWORD PTR es:[edi],dx
     d7c:	65 5f                	gs pop edi
     d7e:	74 00                	je     d80 <sysEnter_Vector-0x12f280>
     d80:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d81:	61                   	popa   
     d82:	6d                   	ins    DWORD PTR es:[edi],dx
     d83:	65 32 00             	xor    al,BYTE PTR gs:[eax]
     d86:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d87:	61                   	popa   
     d88:	6d                   	ins    DWORD PTR es:[edi],dx
     d89:	65 33 00             	xor    eax,DWORD PTR gs:[eax]
     d8c:	63 75 72             	arpl   WORD PTR [ebp+0x72],si
     d8f:	72 50                	jb     de1 <sysEnter_Vector-0x12f21f>
     d91:	72 6f                	jb     e02 <sysEnter_Vector-0x12f1fe>
     d93:	63 00                	arpl   WORD PTR [eax],ax
     d95:	69 70 69 64 00 74 6d 	imul   esi,DWORD PTR [eax+0x69],0x6d740064
     d9c:	5f                   	pop    edi
     d9d:	67 6d                	ins    DWORD PTR es:[di],dx
     d9f:	74 6f                	je     e10 <sysEnter_Vector-0x12f1f0>
     da1:	66 66 00 74 6f 6b    	data16 data16 add BYTE PTR [edi+ebp*2+0x6b],dh
     da7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     da9:	4e                   	dec    esi
     daa:	75 6d                	jne    e19 <sysEnter_Vector-0x12f1e7>
     dac:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
     daf:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     db2:	74 65                	je     e19 <sysEnter_Vector-0x12f1e7>
     db4:	72 76                	jb     e2c <sysEnter_Vector-0x12f1d4>
     db6:	61                   	popa   
     db7:	6c                   	ins    BYTE PTR es:[edi],dx
     db8:	54                   	push   esp
     db9:	69 63 6b 73 00 73 50 	imul   esp,DWORD PTR [ebx+0x6b],0x50730073
     dc0:	72 6f                	jb     e31 <sysEnter_Vector-0x12f1cf>
     dc2:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     dc5:	66 6f                	outs   dx,WORD PTR ds:[esi]
     dc7:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     dca:	6f                   	outs   dx,DWORD PTR ds:[esi]
     dcb:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     dce:	66 6f                	outs   dx,WORD PTR ds:[esi]
     dd0:	5f                   	pop    edi
     dd1:	74 00                	je     dd3 <sysEnter_Vector-0x12f22d>
     dd3:	74 6d                	je     e42 <sysEnter_Vector-0x12f1be>
     dd5:	5f                   	pop    edi
     dd6:	77 64                	ja     e3c <sysEnter_Vector-0x12f1c4>
     dd8:	61                   	popa   
     dd9:	79 00                	jns    ddb <sysEnter_Vector-0x12f225>
     ddb:	74 6d                	je     e4a <sysEnter_Vector-0x12f1b6>
     ddd:	5f                   	pop    edi
     dde:	6d                   	ins    DWORD PTR es:[edi],dx
     ddf:	64 61                	fs popa 
     de1:	79 00                	jns    de3 <sysEnter_Vector-0x12f21d>
     de3:	74 69                	je     e4e <sysEnter_Vector-0x12f1b2>
     de5:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
     de8:	50                   	push   eax
     de9:	65 72 55             	gs jb  e41 <sysEnter_Vector-0x12f1bf>
     dec:	70 64                	jo     e52 <sysEnter_Vector-0x12f1ae>
     dee:	61                   	popa   
     def:	74 65                	je     e56 <sysEnter_Vector-0x12f1aa>
     df1:	49                   	dec    ecx
     df2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     df3:	74 65                	je     e5a <sysEnter_Vector-0x12f1a6>
     df5:	72 76                	jb     e6d <sysEnter_Vector-0x12f193>
     df7:	61                   	popa   
     df8:	6c                   	ins    BYTE PTR es:[edi],dx
     df9:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     dfd:	73 65                	jae    e64 <sysEnter_Vector-0x12f19c>
     dff:	63 00                	arpl   WORD PTR [eax],ax
     e01:	6d                   	ins    DWORD PTR es:[edi],dx
     e02:	69 6e 6f 72 46 61 75 	imul   ebp,DWORD PTR [esi+0x6f],0x75614672
     e09:	6c                   	ins    BYTE PTR es:[edi],dx
     e0a:	74 73                	je     e7f <sysEnter_Vector-0x12f181>
     e0c:	00 70 70             	add    BYTE PTR [eax+0x70],dh
     e0f:	69 64 00 73 6b 69 70 	imul   esp,DWORD PTR [eax+eax*1+0x73],0x5f70696b
     e16:	5f 
     e17:	61                   	popa   
     e18:	74 6f                	je     e89 <sysEnter_Vector-0x12f177>
     e1a:	69 00 73 70 72 69    	imul   eax,DWORD PTR [eax],0x69727073
     e20:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e21:	74 66                	je     e89 <sysEnter_Vector-0x12f177>
     e23:	49                   	dec    ecx
     e24:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
     e28:	61                   	popa   
     e29:	73 65                	jae    e90 <sysEnter_Vector-0x12f170>
     e2b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     e2e:	63 2f                	arpl   WORD PTR [edi],bp
     e30:	73 70                	jae    ea2 <sysEnter_Vector-0x12f15e>
     e32:	72 69                	jb     e9d <sysEnter_Vector-0x12f163>
     e34:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e35:	74 66                	je     e9d <sysEnter_Vector-0x12f163>
     e37:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     e3a:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
     e3d:	65 00 71 75          	add    BYTE PTR gs:[ecx+0x75],dh
     e41:	61                   	popa   
     e42:	6c                   	ins    BYTE PTR es:[edi],dx
     e43:	69 66 69 65 72 00 72 	imul   esp,DWORD PTR [esi+0x69],0x72007265
     e4a:	65 70 65             	gs jo  eb2 <sysEnter_Vector-0x12f14e>
     e4d:	61                   	popa   
     e4e:	74 00                	je     e50 <sysEnter_Vector-0x12f1b0>
     e50:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e51:	75 6d                	jne    ec0 <sysEnter_Vector-0x12f140>
     e53:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
     e56:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     e59:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
     e5d:	69 6f 6e 00 64 69 67 	imul   ebp,DWORD PTR [edi+0x6e],0x67696400
     e64:	69 74 73 00 74 79 70 	imul   esi,DWORD PTR [ebx+esi*2+0x0],0x65707974
     e6b:	65 
     e6c:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     e6f:	65 6c                	gs ins BYTE PTR es:[edi],dx
     e71:	64 5f                	fs pop edi
     e73:	77 69                	ja     ede <sysEnter_Vector-0x12f122>
     e75:	64 74 68             	fs je  ee0 <sysEnter_Vector-0x12f120>
     e78:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
     e7b:	72 65                	jb     ee2 <sysEnter_Vector-0x12f11e>
     e7d:	73 00                	jae    e7f <sysEnter_Vector-0x12f181>
     e7f:	76 73                	jbe    ef4 <sysEnter_Vector-0x12f10c>
     e81:	70 72                	jo     ef5 <sysEnter_Vector-0x12f10b>
     e83:	69 6e 74 66 00 62 75 	imul   ebp,DWORD PTR [esi+0x74],0x75620066
     e8a:	66 66 50             	data16 push ax
     e8d:	74 72                	je     f01 <sysEnter_Vector-0x12f0ff>
     e8f:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     e92:	63 2f                	arpl   WORD PTR [edi],bp
     e94:	73 74                	jae    f0a <sysEnter_Vector-0x12f0f6>
     e96:	64 69 6f 2e 63 00 72 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65720063
     e9d:	65 
     e9e:	73 65                	jae    f05 <sysEnter_Vector-0x12f0fb>
     ea0:	74 52                	je     ef4 <sysEnter_Vector-0x12f10c>
     ea2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ea3:	77 00                	ja     ea5 <sysEnter_Vector-0x12f15b>
     ea5:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     ea8:	66 00 62 79          	data16 add BYTE PTR [edx+0x79],ah
     eac:	74 65                	je     f13 <sysEnter_Vector-0x12f0ed>
     eae:	73 54                	jae    f04 <sysEnter_Vector-0x12f0fc>
     eb0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     eb1:	43                   	inc    ebx
     eb2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     eb3:	70 79                	jo     f2e <sysEnter_Vector-0x12f0d2>
     eb5:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     eb8:	72 6e                	jb     f28 <sysEnter_Vector-0x12f0d8>
     eba:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     ebd:	49                   	dec    ecx
     ebe:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     ec1:	63 53 74             	arpl   WORD PTR [ebx+0x74],dx
     ec4:	72 69                	jb     f2f <sysEnter_Vector-0x12f0d1>
     ec6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ec7:	67 4c                	addr16 dec esp
     ec9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     ecb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ece:	72 63                	jb     f33 <sysEnter_Vector-0x12f0cd>
     ed0:	61                   	popa   
     ed1:	74 00                	je     ed3 <sysEnter_Vector-0x12f12d>
     ed3:	73 72                	jae    f47 <sysEnter_Vector-0x12f0b9>
     ed5:	63 2f                	arpl   WORD PTR [edi],bp
     ed7:	73 74                	jae    f4d <sysEnter_Vector-0x12f0b3>
     ed9:	72 69                	jb     f44 <sysEnter_Vector-0x12f0bc>
     edb:	6e                   	outs   dx,BYTE PTR ds:[esi]
     edc:	67 73 2f             	addr16 jae f0e <sysEnter_Vector-0x12f0f2>
     edf:	73 74                	jae    f55 <sysEnter_Vector-0x12f0ab>
     ee1:	72 63                	jb     f46 <sysEnter_Vector-0x12f0ba>
     ee3:	61                   	popa   
     ee4:	74 2e                	je     f14 <sysEnter_Vector-0x12f0ec>
     ee6:	63 00                	arpl   WORD PTR [eax],ax
     ee8:	73 74                	jae    f5e <sysEnter_Vector-0x12f0a2>
     eea:	72 6e                	jb     f5a <sysEnter_Vector-0x12f0a6>
     eec:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     eef:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ef2:	72 63                	jb     f57 <sysEnter_Vector-0x12f0a9>
     ef4:	61                   	popa   
     ef5:	74 49                	je     f40 <sysEnter_Vector-0x12f0c0>
     ef7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     efa:	72 63                	jb     f5f <sysEnter_Vector-0x12f0a1>
     efc:	6d                   	ins    DWORD PTR es:[edi],dx
     efd:	70 49                	jo     f48 <sysEnter_Vector-0x12f0b8>
     eff:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f02:	72 63                	jb     f67 <sysEnter_Vector-0x12f099>
     f04:	6d                   	ins    DWORD PTR es:[edi],dx
     f05:	70 00                	jo     f07 <sysEnter_Vector-0x12f0f9>
     f07:	73 72                	jae    f7b <sysEnter_Vector-0x12f085>
     f09:	63 2f                	arpl   WORD PTR [edi],bp
     f0b:	73 74                	jae    f81 <sysEnter_Vector-0x12f07f>
     f0d:	72 69                	jb     f78 <sysEnter_Vector-0x12f088>
     f0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f10:	67 73 2f             	addr16 jae f42 <sysEnter_Vector-0x12f0be>
     f13:	73 74                	jae    f89 <sysEnter_Vector-0x12f077>
     f15:	72 63                	jb     f7a <sysEnter_Vector-0x12f086>
     f17:	6d                   	ins    DWORD PTR es:[edi],dx
     f18:	70 2e                	jo     f48 <sysEnter_Vector-0x12f0b8>
     f1a:	63 00                	arpl   WORD PTR [eax],ax
     f1c:	73 74                	jae    f92 <sysEnter_Vector-0x12f06e>
     f1e:	72 63                	jb     f83 <sysEnter_Vector-0x12f07d>
     f20:	70 79                	jo     f9b <sysEnter_Vector-0x12f065>
     f22:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     f25:	75 6e                	jne    f95 <sysEnter_Vector-0x12f06b>
     f27:	74 00                	je     f29 <sysEnter_Vector-0x12f0d7>
     f29:	73 74                	jae    f9f <sysEnter_Vector-0x12f061>
     f2b:	72 63                	jb     f90 <sysEnter_Vector-0x12f070>
     f2d:	70 79                	jo     fa8 <sysEnter_Vector-0x12f058>
     f2f:	63 00                	arpl   WORD PTR [eax],ax
     f31:	73 74                	jae    fa7 <sysEnter_Vector-0x12f059>
     f33:	72 63                	jb     f98 <sysEnter_Vector-0x12f068>
     f35:	70 79                	jo     fb0 <sysEnter_Vector-0x12f050>
     f37:	49                   	dec    ecx
     f38:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     f3b:	63 2f                	arpl   WORD PTR [edi],bp
     f3d:	73 74                	jae    fb3 <sysEnter_Vector-0x12f04d>
     f3f:	72 69                	jb     faa <sysEnter_Vector-0x12f056>
     f41:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f42:	67 73 2f             	addr16 jae f74 <sysEnter_Vector-0x12f08c>
     f45:	73 74                	jae    fbb <sysEnter_Vector-0x12f045>
     f47:	72 63                	jb     fac <sysEnter_Vector-0x12f054>
     f49:	70 79                	jo     fc4 <sysEnter_Vector-0x12f03c>
     f4b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f4e:	73 74                	jae    fc4 <sysEnter_Vector-0x12f03c>
     f50:	72 69                	jb     fbb <sysEnter_Vector-0x12f045>
     f52:	73 6e                	jae    fc2 <sysEnter_Vector-0x12f03e>
     f54:	75 6d                	jne    fc3 <sysEnter_Vector-0x12f03d>
     f56:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     f59:	63 2f                	arpl   WORD PTR [edi],bp
     f5b:	73 74                	jae    fd1 <sysEnter_Vector-0x12f02f>
     f5d:	72 69                	jb     fc8 <sysEnter_Vector-0x12f038>
     f5f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f60:	67 73 2f             	addr16 jae f92 <sysEnter_Vector-0x12f06e>
     f63:	73 74                	jae    fd9 <sysEnter_Vector-0x12f027>
     f65:	72 69                	jb     fd0 <sysEnter_Vector-0x12f030>
     f67:	73 6e                	jae    fd7 <sysEnter_Vector-0x12f029>
     f69:	75 6d                	jne    fd8 <sysEnter_Vector-0x12f028>
     f6b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f6e:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
     f71:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
     f74:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
     f7b:	74 
     f7c:	72 6c                	jb     fea <sysEnter_Vector-0x12f016>
     f7e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f80:	49                   	dec    ecx
     f81:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f84:	72 6c                	jb     ff2 <sysEnter_Vector-0x12f00e>
     f86:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f88:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f8b:	72 6e                	jb     ffb <sysEnter_Vector-0x12f005>
     f8d:	6c                   	ins    BYTE PTR es:[edi],dx
     f8e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f90:	49                   	dec    ecx
     f91:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f94:	72 6e                	jb     1004 <sysEnter_Vector-0x12effc>
     f96:	6c                   	ins    BYTE PTR es:[edi],dx
     f97:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f99:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     f9c:	63 2f                	arpl   WORD PTR [edi],bp
     f9e:	73 74                	jae    1014 <sysEnter_Vector-0x12efec>
     fa0:	72 69                	jb     100b <sysEnter_Vector-0x12eff5>
     fa2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fa3:	67 73 2f             	addr16 jae fd5 <sysEnter_Vector-0x12f02b>
     fa6:	73 74                	jae    101c <sysEnter_Vector-0x12efe4>
     fa8:	72 6c                	jb     1016 <sysEnter_Vector-0x12efea>
     faa:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     fac:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     faf:	73 74                	jae    1025 <sysEnter_Vector-0x12efdb>
     fb1:	72 6e                	jb     1021 <sysEnter_Vector-0x12efdf>
     fb3:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
     fb6:	49                   	dec    ecx
     fb7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     fba:	72 6e                	jb     102a <sysEnter_Vector-0x12efd6>
     fbc:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
     fbf:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     fc2:	63 2f                	arpl   WORD PTR [edi],bp
     fc4:	73 74                	jae    103a <sysEnter_Vector-0x12efc6>
     fc6:	72 69                	jb     1031 <sysEnter_Vector-0x12efcf>
     fc8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fc9:	67 73 2f             	addr16 jae ffb <sysEnter_Vector-0x12f005>
     fcc:	73 74                	jae    1042 <sysEnter_Vector-0x12efbe>
     fce:	72 6e                	jb     103e <sysEnter_Vector-0x12efc2>
     fd0:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
     fd3:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     fd6:	73 72                	jae    104a <sysEnter_Vector-0x12efb6>
     fd8:	63 2f                	arpl   WORD PTR [edi],bp
     fda:	73 74                	jae    1050 <sysEnter_Vector-0x12efb0>
     fdc:	72 69                	jb     1047 <sysEnter_Vector-0x12efb9>
     fde:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fdf:	67 73 2f             	addr16 jae 1011 <sysEnter_Vector-0x12efef>
     fe2:	73 74                	jae    1058 <sysEnter_Vector-0x12efa8>
     fe4:	72 6e                	jb     1054 <sysEnter_Vector-0x12efac>
     fe6:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     fe9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     fec:	73 74                	jae    1062 <sysEnter_Vector-0x12ef9e>
     fee:	72 6e                	jb     105e <sysEnter_Vector-0x12efa2>
     ff0:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     ff3:	49                   	dec    ecx
     ff4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ff7:	72 6e                	jb     1067 <sysEnter_Vector-0x12ef99>
     ff9:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     ffc:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
     fff:	74 72                	je     1073 <sysEnter_Vector-0x12ef8d>
    1001:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
    1004:	74 6f                	je     1075 <sysEnter_Vector-0x12ef8b>
    1006:	66 66 00 63 75       	data16 data16 add BYTE PTR [ebx+0x75],ah
    100b:	74 6c                	je     1079 <sysEnter_Vector-0x12ef87>
    100d:	69 6d 00 73 72 63 2f 	imul   ebp,DWORD PTR [ebp+0x0],0x2f637273
    1014:	73 74                	jae    108a <sysEnter_Vector-0x12ef76>
    1016:	72 69                	jb     1081 <sysEnter_Vector-0x12ef7f>
    1018:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1019:	67 73 2f             	addr16 jae 104b <sysEnter_Vector-0x12efb5>
    101c:	73 74                	jae    1092 <sysEnter_Vector-0x12ef6e>
    101e:	72 6f                	jb     108f <sysEnter_Vector-0x12ef71>
    1020:	75 6c                	jne    108e <sysEnter_Vector-0x12ef72>
    1022:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1025:	73 74                	jae    109b <sysEnter_Vector-0x12ef65>
    1027:	72 74                	jb     109d <sysEnter_Vector-0x12ef63>
    1029:	6f                   	outs   dx,DWORD PTR ds:[esi]
    102a:	75 6c                	jne    1098 <sysEnter_Vector-0x12ef68>
    102c:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
    102f:	64 70 74             	fs jo  10a6 <sysEnter_Vector-0x12ef5a>
    1032:	72 00                	jb     1034 <sysEnter_Vector-0x12efcc>
    1034:	73 72                	jae    10a8 <sysEnter_Vector-0x12ef58>
    1036:	63 2f                	arpl   WORD PTR [edi],bp
    1038:	73 74                	jae    10ae <sysEnter_Vector-0x12ef52>
    103a:	72 69                	jb     10a5 <sysEnter_Vector-0x12ef5b>
    103c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    103d:	67 73 2f             	addr16 jae 106f <sysEnter_Vector-0x12ef91>
    1040:	73 74                	jae    10b6 <sysEnter_Vector-0x12ef4a>
    1042:	72 70                	jb     10b4 <sysEnter_Vector-0x12ef4c>
    1044:	61                   	popa   
    1045:	72 74                	jb     10bb <sysEnter_Vector-0x12ef45>
    1047:	73 2e                	jae    1077 <sysEnter_Vector-0x12ef89>
    1049:	63 00                	arpl   WORD PTR [eax],ax
    104b:	73 74                	jae    10c1 <sysEnter_Vector-0x12ef3f>
    104d:	72 6c                	jb     10bb <sysEnter_Vector-0x12ef45>
    104f:	65 66 74 00          	gs data16 je 1053 <sysEnter_Vector-0x12efad>
    1053:	73 74                	jae    10c9 <sysEnter_Vector-0x12ef37>
    1055:	72 74                	jb     10cb <sysEnter_Vector-0x12ef35>
    1057:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1058:	6c                   	ins    BYTE PTR es:[edi],dx
    1059:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    105c:	63 2f                	arpl   WORD PTR [edi],bp
    105e:	73 74                	jae    10d4 <sysEnter_Vector-0x12ef2c>
    1060:	72 69                	jb     10cb <sysEnter_Vector-0x12ef35>
    1062:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1063:	67 73 2f             	addr16 jae 1095 <sysEnter_Vector-0x12ef6b>
    1066:	73 74                	jae    10dc <sysEnter_Vector-0x12ef24>
    1068:	72 74                	jb     10de <sysEnter_Vector-0x12ef22>
    106a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    106b:	6c                   	ins    BYTE PTR es:[edi],dx
    106c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    106f:	69 6e 70 75 74 00 73 	imul   ebp,DWORD PTR [esi+0x70],0x73007475
    1076:	72 63                	jb     10db <sysEnter_Vector-0x12ef25>
    1078:	2f                   	das    
    1079:	73 74                	jae    10ef <sysEnter_Vector-0x12ef11>
    107b:	72 69                	jb     10e6 <sysEnter_Vector-0x12ef1a>
    107d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    107e:	67 73 2f             	addr16 jae 10b0 <sysEnter_Vector-0x12ef50>
    1081:	73 74                	jae    10f7 <sysEnter_Vector-0x12ef09>
    1083:	72 74                	jb     10f9 <sysEnter_Vector-0x12ef07>
    1085:	72 69                	jb     10f0 <sysEnter_Vector-0x12ef10>
    1087:	6d                   	ins    DWORD PTR es:[edi],dx
    1088:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    108b:	73 74                	jae    1101 <sysEnter_Vector-0x12eeff>
    108d:	72 74                	jb     1103 <sysEnter_Vector-0x12eefd>
    108f:	72 69                	jb     10fa <sysEnter_Vector-0x12ef06>
    1091:	6d                   	ins    DWORD PTR es:[edi],dx
    1092:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1095:	72 74                	jb     110b <sysEnter_Vector-0x12eef5>
    1097:	72 69                	jb     1102 <sysEnter_Vector-0x12eefe>
    1099:	6d                   	ins    DWORD PTR es:[edi],dx
    109a:	49                   	dec    ecx
    109b:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
    109e:	74 73                	je     1113 <sysEnter_Vector-0x12eeed>
    10a0:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
    10a7:	2f                   	das    
    10a8:	73 74                	jae    111e <sysEnter_Vector-0x12eee2>
    10aa:	72 72                	jb     111e <sysEnter_Vector-0x12eee2>
    10ac:	65 70 6c             	gs jo  111b <sysEnter_Vector-0x12eee5>
    10af:	61                   	popa   
    10b0:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    10b3:	63 00                	arpl   WORD PTR [eax],ax
    10b5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10b6:	65 65 64 6c          	gs gs fs ins BYTE PTR es:[edi],dx
    10ba:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
    10be:	73 6f                	jae    112f <sysEnter_Vector-0x12eed1>
    10c0:	66 66 73 65          	data16 data16 jae 1129 <sysEnter_Vector-0x12eed7>
    10c4:	74 00                	je     10c6 <sysEnter_Vector-0x12ef3a>
    10c6:	73 74                	jae    113c <sysEnter_Vector-0x12eec4>
    10c8:	72 72                	jb     113c <sysEnter_Vector-0x12eec4>
    10ca:	65 70 6c             	gs jo  1139 <sysEnter_Vector-0x12eec7>
    10cd:	61                   	popa   
    10ce:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
    10d1:	70 61                	jo     1134 <sysEnter_Vector-0x12eecc>
    10d3:	74 74                	je     1149 <sysEnter_Vector-0x12eeb7>
    10d5:	65 72 6e             	gs jb  1146 <sysEnter_Vector-0x12eeba>
    10d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10db:	72 72                	jb     114f <sysEnter_Vector-0x12eeb1>
    10dd:	65 70 6c             	gs jo  114c <sysEnter_Vector-0x12eeb4>
    10e0:	61                   	popa   
    10e1:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
    10e4:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
    10e7:	74 53                	je     113c <sysEnter_Vector-0x12eec4>
    10e9:	74 72                	je     115d <sysEnter_Vector-0x12eea3>
    10eb:	69 6e 67 00 73 74 72 	imul   ebp,DWORD PTR [esi+0x67],0x72747300
    10f2:	73 74                	jae    1168 <sysEnter_Vector-0x12ee98>
    10f4:	72 49                	jb     113f <sysEnter_Vector-0x12eec1>
    10f6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    10f9:	63 2f                	arpl   WORD PTR [edi],bp
    10fb:	73 74                	jae    1171 <sysEnter_Vector-0x12ee8f>
    10fd:	72 73                	jb     1172 <sysEnter_Vector-0x12ee8e>
    10ff:	74 72                	je     1173 <sysEnter_Vector-0x12ee8d>
    1101:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1104:	73 74                	jae    117a <sysEnter_Vector-0x12ee86>
    1106:	72 73                	jb     117b <sysEnter_Vector-0x12ee85>
    1108:	74 72                	je     117c <sysEnter_Vector-0x12ee84>
    110a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    110d:	72 6e                	jb     117d <sysEnter_Vector-0x12ee83>
    110f:	73 74                	jae    1185 <sysEnter_Vector-0x12ee7b>
    1111:	72 49                	jb     115c <sysEnter_Vector-0x12eea4>
    1113:	00 72 63             	add    BYTE PTR [edx+0x63],dh
    1116:	73 69                	jae    1181 <sysEnter_Vector-0x12ee7f>
    1118:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
    111c:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
    111f:	72 69                	jb     118a <sysEnter_Vector-0x12ee76>
    1121:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1122:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
    1126:	63 2f                	arpl   WORD PTR [edi],bp
    1128:	74 69                	je     1193 <sysEnter_Vector-0x12ee6d>
    112a:	6d                   	ins    DWORD PTR es:[edi],dx
    112b:	65 2e 63 00          	gs arpl WORD PTR cs:[eax],ax
    112f:	6c                   	ins    BYTE PTR es:[edi],dx
    1130:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1131:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
    1134:	74 69                	je     119f <sysEnter_Vector-0x12ee61>
    1136:	6d                   	ins    DWORD PTR es:[edi],dx
    1137:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
    113b:	74 74                	je     11b1 <sysEnter_Vector-0x12ee4f>
    113d:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
    1144:	61                   	popa   
    1145:	79 6c                	jns    11b3 <sysEnter_Vector-0x12ee4d>
    1147:	69 67 68 74 00 6c 69 	imul   esp,DWORD PTR [edi+0x68],0x696c0074
    114e:	62 63 54             	bound  esp,QWORD PTR [ebx+0x54]
    1151:	5a                   	pop    edx
    1152:	00 5f 74             	add    BYTE PTR [edi+0x74],bl
    1155:	7a 6e                	jp     11c5 <sysEnter_Vector-0x12ee3b>
    1157:	61                   	popa   
    1158:	6d                   	ins    DWORD PTR es:[edi],dx
    1159:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
    115d:	74 69                	je     11c8 <sysEnter_Vector-0x12ee38>
    115f:	6d                   	ins    DWORD PTR es:[edi],dx
    1160:	65 5f                	gs pop edi
    1162:	72 00                	jb     1164 <sysEnter_Vector-0x12ee9c>
    1164:	74 69                	je     11cf <sysEnter_Vector-0x12ee31>
    1166:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
    1169:	54                   	push   esp
    116a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    116b:	57                   	push   edi
    116c:	61                   	popa   
    116d:	69 74 00 6d 6f 6e 74 	imul   esi,DWORD PTR [eax+eax*1+0x6d],0x68746e6f
    1174:	68 
    1175:	00 67 65             	add    BYTE PTR [edi+0x65],ah
    1178:	74 74                	je     11ee <sysEnter_Vector-0x12ee12>
    117a:	69 6d 65 00 64 61 79 	imul   ebp,DWORD PTR [ebp+0x65],0x79616400
    1181:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1182:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1183:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
    1186:	74 69                	je     11f1 <sysEnter_Vector-0x12ee0f>
    1188:	6d                   	ins    DWORD PTR es:[edi],dx
    1189:	65 5f                	gs pop edi
    118b:	72 49                	jb     11d6 <sysEnter_Vector-0x12ee2a>
    118d:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
    1191:	61                   	popa   
    1192:	6c                   	ins    BYTE PTR es:[edi],dx
    1193:	54                   	push   esp
    1194:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
    119b:	75 66                	jne    1203 <sysEnter_Vector-0x12edfd>
    119d:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
    11a1:	61                   	popa   
    11a2:	6c                   	ins    BYTE PTR es:[edi],dx
    11a3:	74 69                	je     120e <sysEnter_Vector-0x12edf2>
    11a5:	6d                   	ins    DWORD PTR es:[edi],dx
    11a6:	65 5f                	gs pop edi
    11a8:	72 00                	jb     11aa <sysEnter_Vector-0x12ee56>
    11aa:	64 61                	fs popa 
    11ac:	79 63                	jns    1211 <sysEnter_Vector-0x12edef>
    11ae:	6c                   	ins    BYTE PTR es:[edi],dx
    11af:	6f                   	outs   dx,DWORD PTR ds:[esi]
    11b0:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
    11b3:	6d                   	ins    DWORD PTR es:[edi],dx
    11b4:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
    11b9:	00 5f 79             	add    BYTE PTR [edi+0x79],bl
    11bc:	74 61                	je     121f <sysEnter_Vector-0x12ede1>
    11be:	62 00                	bound  eax,QWORD PTR [eax]
    11c0:	74 69                	je     122b <sysEnter_Vector-0x12edd5>
    11c2:	6d                   	ins    DWORD PTR es:[edi],dx
    11c3:	65 72 00             	gs jb  11c6 <sysEnter_Vector-0x12ee3a>
    11c6:	6c                   	ins    BYTE PTR es:[edi],dx
    11c7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    11c8:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
    11cb:	74 69                	je     1236 <sysEnter_Vector-0x12edca>
    11cd:	6d                   	ins    DWORD PTR es:[edi],dx
    11ce:	65 5f                	gs pop edi
    11d0:	72 49                	jb     121b <sysEnter_Vector-0x12ede5>
    11d2:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
    11d5:	73 74                	jae    124b <sysEnter_Vector-0x12edb5>
    11d7:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
    11da:	73 00                	jae    11dc <sysEnter_Vector-0x12ee24>
    11dc:	72 65                	jb     1243 <sysEnter_Vector-0x12edbd>
    11de:	73 75                	jae    1255 <sysEnter_Vector-0x12edab>
    11e0:	6c                   	ins    BYTE PTR es:[edi],dx
    11e1:	74 00                	je     11e3 <sysEnter_Vector-0x12ee1d>
    11e3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    11e4:	76 65                	jbe    124b <sysEnter_Vector-0x12edb5>
    11e6:	72 66                	jb     124e <sysEnter_Vector-0x12edb2>
    11e8:	6c                   	ins    BYTE PTR es:[edi],dx
    11e9:	6f                   	outs   dx,DWORD PTR ds:[esi]
    11ea:	77 00                	ja     11ec <sysEnter_Vector-0x12ee14>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 55 62             	sub    BYTE PTR [ebp+0x62],dl
   8:	75 6e                	jne    78 <sysEnter_Vector-0x12ff88>
   a:	74 75                	je     81 <sysEnter_Vector-0x12ff7f>
   c:	20 39                	and    BYTE PTR [ecx],bh
   e:	2e 33 2e             	xor    ebp,DWORD PTR cs:[esi]
  11:	30 2d 31 30 75 62    	xor    BYTE PTR ds:0x62753031,ch
  17:	75 6e                	jne    87 <sysEnter_Vector-0x12ff79>
  19:	74 75                	je     90 <sysEnter_Vector-0x12ff70>
  1b:	32 29                	xor    ch,BYTE PTR [ecx]
  1d:	20 39                	and    BYTE PTR [ecx],bh
  1f:	2e 33 2e             	xor    ebp,DWORD PTR cs:[esi]
  22:	30 00                	xor    BYTE PTR [eax],al

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	07                   	pop    es
   1:	0c 00                	or     al,0x0
   3:	00 41 0c             	add    BYTE PTR [ecx+0xc],al
   6:	00 00                	add    BYTE PTR [eax],al
   8:	46                   	inc    esi
   9:	0c 00                	or     al,0x0
   b:	00 76 0c             	add    BYTE PTR [esi+0xc],dh
	...
