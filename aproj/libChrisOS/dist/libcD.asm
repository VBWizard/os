
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

30000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
30000000:	55                   	push   ebp
30000001:	89 e5                	mov    ebp,esp
30000003:	e8 7f 2b 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000008:	05 30 46 00 00       	add    eax,0x4630
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
3000000d:	eb 17                	jmp    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
3000000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000012:	8d 50 01             	lea    edx,[eax+0x1]
30000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000001b:	84 c0                	test   al,al
3000001d:	75 07                	jne    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
3000001f:	b8 00 00 00 00       	mov    eax,0x0
30000024:	eb 10                	jmp    30000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
30000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000002f:	38 d0                	cmp    al,dl
30000031:	75 dc                	jne    3000000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
30000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
30000036:	5d                   	pop    ebp
30000037:	c3                   	ret    

30000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
30000038:	55                   	push   ebp
30000039:	89 e5                	mov    ebp,esp
3000003b:	e8 47 2b 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000040:	05 f8 45 00 00       	add    eax,0x45f8
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
30000045:	eb 17                	jmp    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
30000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000004a:	8d 50 01             	lea    edx,[eax+0x1]
3000004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000053:	84 c0                	test   al,al
30000055:	75 07                	jne    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
30000057:	b8 00 00 00 00       	mov    eax,0x0
3000005c:	eb 10                	jmp    3000006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
3000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000067:	38 d0                	cmp    al,dl
30000069:	75 dc                	jne    30000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
3000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
3000006e:	5d                   	pop    ebp
3000006f:	c3                   	ret    

30000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
30000070:	55                   	push   ebp
30000071:	89 e5                	mov    ebp,esp
30000073:	56                   	push   esi
30000074:	53                   	push   ebx
30000075:	e8 0d 2b 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
3000007a:	05 be 45 00 00       	add    eax,0x45be
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
3000007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000085:	89 c1                	mov    ecx,eax
30000087:	eb 29                	jmp    300000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
30000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
3000008c:	eb 15                	jmp    300000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
3000008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30000091:	38 c8                	cmp    al,cl
30000093:	75 0b                	jne    300000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
30000095:	89 da                	mov    edx,ebx
30000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000009a:	29 c2                	sub    edx,eax
3000009c:	89 d0                	mov    eax,edx
3000009e:	eb 21                	jmp    300000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
300000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000a6:	84 c0                	test   al,al
300000a8:	75 e4                	jne    3000008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000aa:	83 c3 01             	add    ebx,0x1
300000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
300000b2:	89 c8                	mov    eax,ecx
300000b4:	84 c0                	test   al,al
300000b6:	75 d1                	jne    30000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
300000b8:	89 da                	mov    edx,ebx
300000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000bd:	29 c2                	sub    edx,eax
300000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
300000c1:	5b                   	pop    ebx
300000c2:	5e                   	pop    esi
300000c3:	5d                   	pop    ebp
300000c4:	c3                   	ret    

300000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
300000c5:	55                   	push   ebp
300000c6:	89 e5                	mov    ebp,esp
300000c8:	56                   	push   esi
300000c9:	53                   	push   ebx
300000ca:	e8 b8 2a 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300000cf:	05 69 45 00 00       	add    eax,0x4569
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
300000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000da:	89 c1                	mov    ecx,eax
300000dc:	eb 29                	jmp    30000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
300000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
300000e1:	eb 15                	jmp    300000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
300000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000e6:	38 c8                	cmp    al,cl
300000e8:	75 0b                	jne    300000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
300000ea:	89 da                	mov    edx,ebx
300000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000ef:	29 c2                	sub    edx,eax
300000f1:	89 d0                	mov    eax,edx
300000f3:	eb 21                	jmp    30000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
300000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000fb:	84 c0                	test   al,al
300000fd:	75 e4                	jne    300000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000ff:	83 c3 01             	add    ebx,0x1
30000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
30000107:	89 c8                	mov    eax,ecx
30000109:	84 c0                	test   al,al
3000010b:	75 d1                	jne    300000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
3000010d:	89 da                	mov    edx,ebx
3000010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000112:	29 c2                	sub    edx,eax
30000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
30000116:	5b                   	pop    ebx
30000117:	5e                   	pop    esi
30000118:	5d                   	pop    ebp
30000119:	c3                   	ret    
3000011a:	66 90                	xchg   ax,ax

3000011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
3000011c:	55                   	push   ebp
3000011d:	89 e5                	mov    ebp,esp
3000011f:	56                   	push   esi
30000120:	53                   	push   ebx
30000121:	e8 8a 2a 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
30000126:	81 c3 12 45 00 00    	add    ebx,0x4512
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
3000012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000130:	75 09                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
30000132:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
30000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
3000013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000013e:	8d 50 01             	lea    edx,[eax+0x1]
30000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000147:	0f be f0             	movsx  esi,al
3000014a:	85 f6                	test   esi,esi
3000014c:	75 07                	jne    30000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
3000014e:	b8 00 00 00 00       	mov    eax,0x0
30000153:	eb 57                	jmp    300001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
30000155:	83 ec 08             	sub    esp,0x8
30000158:	56                   	push   esi
30000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000015c:	e8 d7 fe ff ff       	call   30000038 <strchrI>
30000161:	83 c4 10             	add    esp,0x10
30000164:	85 c0                	test   eax,eax
30000166:	75 d3                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
30000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
3000016c:	83 ec 08             	sub    esp,0x8
3000016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000175:	e8 4b ff ff ff       	call   300000c5 <strcspnI>
3000017a:	83 c4 10             	add    esp,0x10
3000017d:	89 c2                	mov    edx,eax
3000017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000182:	01 d0                	add    eax,edx
30000184:	89 83 34 00 00 00    	mov    DWORD PTR [ebx+0x34],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
3000018a:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
30000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000193:	84 c0                	test   al,al
30000195:	74 12                	je     300001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
30000197:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
3000019d:	8d 50 01             	lea    edx,[eax+0x1]
300001a0:	89 93 34 00 00 00    	mov    DWORD PTR [ebx+0x34],edx
300001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
300001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
300001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
300001af:	5b                   	pop    ebx
300001b0:	5e                   	pop    esi
300001b1:	5d                   	pop    ebp
300001b2:	c3                   	ret    
300001b3:	90                   	nop

300001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
300001b4:	55                   	push   ebp
300001b5:	89 e5                	mov    ebp,esp
300001b7:	53                   	push   ebx
300001b8:	83 ec 14             	sub    esp,0x14
300001bb:	e8 c7 29 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300001c0:	05 78 44 00 00       	add    eax,0x4478
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
300001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
300001cc:	83 ec 0c             	sub    esp,0xc
300001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300001d2:	89 c3                	mov    ebx,eax
300001d4:	e8 f0 16 00 00       	call   300018c9 <strlenI>
300001d9:	83 c4 10             	add    esp,0x10
300001dc:	83 e8 01             	sub    eax,0x1
300001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300001e2:	eb 39                	jmp    3000021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
300001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001ea:	01 d0                	add    eax,edx
300001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
300001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001f8:	01 c2                	add    edx,eax
300001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
300001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000200:	01 c8                	add    eax,ecx
30000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
30000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000020d:	01 c2                	add    edx,eax
3000020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
30000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
30000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
30000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
3000021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30000223:	7c bf                	jl     300001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
30000225:	90                   	nop
30000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000229:	c9                   	leave  
3000022a:	c3                   	ret    

3000022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
3000022b:	55                   	push   ebp
3000022c:	89 e5                	mov    ebp,esp
3000022e:	53                   	push   ebx
3000022f:	83 ec 14             	sub    esp,0x14
30000232:	e8 50 29 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000237:	05 01 44 00 00       	add    eax,0x4401
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
3000023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000246:	79 03                	jns    3000024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
30000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
3000024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
30000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000255:	8d 50 01             	lea    edx,[eax+0x1]
30000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000025b:	89 c2                	mov    edx,eax
3000025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
30000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000266:	ba 67 66 66 66       	mov    edx,0x66666667
3000026b:	89 c8                	mov    eax,ecx
3000026d:	f7 ea                	imul   edx
3000026f:	c1 fa 02             	sar    edx,0x2
30000272:	89 c8                	mov    eax,ecx
30000274:	c1 f8 1f             	sar    eax,0x1f
30000277:	29 c2                	sub    edx,eax
30000279:	89 d0                	mov    eax,edx
3000027b:	c1 e0 02             	shl    eax,0x2
3000027e:	01 d0                	add    eax,edx
30000280:	01 c0                	add    eax,eax
30000282:	29 c1                	sub    ecx,eax
30000284:	89 ca                	mov    edx,ecx
30000286:	89 d0                	mov    eax,edx
30000288:	83 c0 30             	add    eax,0x30
3000028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
3000028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000290:	ba 67 66 66 66       	mov    edx,0x66666667
30000295:	89 c8                	mov    eax,ecx
30000297:	f7 ea                	imul   edx
30000299:	c1 fa 02             	sar    edx,0x2
3000029c:	89 c8                	mov    eax,ecx
3000029e:	c1 f8 1f             	sar    eax,0x1f
300002a1:	29 c2                	sub    edx,eax
300002a3:	89 d0                	mov    eax,edx
300002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
300002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
300002ac:	7f a4                	jg     30000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
300002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300002b2:	79 13                	jns    300002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
300002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300002b7:	8d 50 01             	lea    edx,[eax+0x1]
300002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300002bd:	89 c2                	mov    edx,eax
300002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002c2:	01 d0                	add    eax,edx
300002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
300002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002cd:	01 d0                	add    eax,edx
300002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
300002d2:	83 ec 0c             	sub    esp,0xc
300002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300002d8:	e8 d7 fe ff ff       	call   300001b4 <reverseI>
300002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
300002e0:	90                   	nop
300002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300002e4:	c9                   	leave  
300002e5:	c3                   	ret    

300002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
300002e6:	55                   	push   ebp
300002e7:	89 e5                	mov    ebp,esp
300002e9:	53                   	push   ebx
300002ea:	83 ec 14             	sub    esp,0x14
300002ed:	e8 95 28 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300002f2:	05 46 43 00 00       	add    eax,0x4346
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
300002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000301:	79 03                	jns    30000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
30000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
30000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
3000030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000310:	8d 50 01             	lea    edx,[eax+0x1]
30000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000316:	89 c2                	mov    edx,eax
30000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
3000031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000321:	ba 67 66 66 66       	mov    edx,0x66666667
30000326:	89 c8                	mov    eax,ecx
30000328:	f7 ea                	imul   edx
3000032a:	c1 fa 02             	sar    edx,0x2
3000032d:	89 c8                	mov    eax,ecx
3000032f:	c1 f8 1f             	sar    eax,0x1f
30000332:	29 c2                	sub    edx,eax
30000334:	89 d0                	mov    eax,edx
30000336:	c1 e0 02             	shl    eax,0x2
30000339:	01 d0                	add    eax,edx
3000033b:	01 c0                	add    eax,eax
3000033d:	29 c1                	sub    ecx,eax
3000033f:	89 ca                	mov    edx,ecx
30000341:	89 d0                	mov    eax,edx
30000343:	83 c0 30             	add    eax,0x30
30000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
30000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
3000034b:	ba 67 66 66 66       	mov    edx,0x66666667
30000350:	89 c8                	mov    eax,ecx
30000352:	f7 ea                	imul   edx
30000354:	c1 fa 02             	sar    edx,0x2
30000357:	89 c8                	mov    eax,ecx
30000359:	c1 f8 1f             	sar    eax,0x1f
3000035c:	29 c2                	sub    edx,eax
3000035e:	89 d0                	mov    eax,edx
30000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000367:	7f a4                	jg     3000030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
30000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000036d:	79 13                	jns    30000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
3000036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000372:	8d 50 01             	lea    edx,[eax+0x1]
30000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000378:	89 c2                	mov    edx,eax
3000037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000037d:	01 d0                	add    eax,edx
3000037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
30000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000388:	01 d0                	add    eax,edx
3000038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
3000038d:	83 ec 0c             	sub    esp,0xc
30000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000393:	e8 1c fe ff ff       	call   300001b4 <reverseI>
30000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
3000039b:	90                   	nop
3000039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000039f:	c9                   	leave  
300003a0:	c3                   	ret    

300003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
300003a1:	55                   	push   ebp
300003a2:	89 e5                	mov    ebp,esp
300003a4:	83 ec 10             	sub    esp,0x10
300003a7:	e8 db 27 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300003ac:	05 8c 42 00 00       	add    eax,0x428c
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
300003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
300003bf:	eb 28                	jmp    300003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
300003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300003c4:	89 d0                	mov    eax,edx
300003c6:	c1 e0 02             	shl    eax,0x2
300003c9:	01 d0                	add    eax,edx
300003cb:	01 c0                	add    eax,eax
300003cd:	89 c1                	mov    ecx,eax
300003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003d5:	01 d0                	add    eax,edx
300003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003da:	0f be c0             	movsx  eax,al
300003dd:	01 c8                	add    eax,ecx
300003df:	83 e8 30             	sub    eax,0x30
300003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
300003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003ef:	01 d0                	add    eax,edx
300003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003f4:	84 c0                	test   al,al
300003f6:	75 c9                	jne    300003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
300003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
300003fb:	c9                   	leave  
300003fc:	c3                   	ret    
300003fd:	66 90                	xchg   ax,ax
300003ff:	90                   	nop

30000400 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
30000400:	55                   	push   ebp
30000401:	89 e5                	mov    ebp,esp
30000403:	53                   	push   ebx
30000404:	83 ec 14             	sub    esp,0x14
30000407:	e8 a4 27 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
3000040c:	81 c3 2c 42 00 00    	add    ebx,0x422c
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
30000412:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
30000419:	eb 7b                	jmp    30000496 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
3000041b:	83 ec 0c             	sub    esp,0xc
3000041e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000421:	e8 a3 14 00 00       	call   300018c9 <strlenI>
30000426:	83 c4 10             	add    esp,0x10
30000429:	89 c1                	mov    ecx,eax
3000042b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000431:	8b 00                	mov    eax,DWORD PTR [eax]
30000433:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000436:	c1 e2 02             	shl    edx,0x2
30000439:	01 d0                	add    eax,edx
3000043b:	8b 00                	mov    eax,DWORD PTR [eax]
3000043d:	83 ec 04             	sub    esp,0x4
30000440:	51                   	push   ecx
30000441:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000444:	50                   	push   eax
30000445:	e8 19 15 00 00       	call   30001963 <strncmpI>
3000044a:	83 c4 10             	add    esp,0x10
3000044d:	85 c0                	test   eax,eax
3000044f:	75 41                	jne    30000492 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
30000451:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000457:	8b 00                	mov    eax,DWORD PTR [eax]
30000459:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000045c:	c1 e2 02             	shl    edx,0x2
3000045f:	01 d0                	add    eax,edx
30000461:	8b 00                	mov    eax,DWORD PTR [eax]
30000463:	83 ec 08             	sub    esp,0x8
30000466:	8d 93 08 fb ff ff    	lea    edx,[ebx-0x4f8]
3000046c:	52                   	push   edx
3000046d:	50                   	push   eax
3000046e:	e8 cd 19 00 00       	call   30001e40 <strstrI>
30000473:	83 c4 10             	add    esp,0x10
30000476:	83 c0 01             	add    eax,0x1
30000479:	83 ec 04             	sub    esp,0x4
3000047c:	6a 32                	push   0x32
3000047e:	50                   	push   eax
3000047f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000482:	e8 45 15 00 00       	call   300019cc <strncpyI>
30000487:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
3000048a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000048d:	83 c0 01             	add    eax,0x1
30000490:	eb 13                	jmp    300004a5 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
30000492:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
30000496:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
3000049a:	0f 8e 7b ff ff ff    	jle    3000041b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
300004a0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
300004a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300004a8:	c9                   	leave  
300004a9:	c3                   	ret    

300004aa <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
300004aa:	55                   	push   ebp
300004ab:	89 e5                	mov    ebp,esp
300004ad:	53                   	push   ebx
300004ae:	83 ec 14             	sub    esp,0x14
300004b1:	e8 fa 26 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
300004b6:	81 c3 82 41 00 00    	add    ebx,0x4182
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
300004bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
300004c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
300004ca:	e9 d5 00 00 00       	jmp    300005a4 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
300004cf:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004d5:	8b 00                	mov    eax,DWORD PTR [eax]
300004d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004da:	c1 e2 02             	shl    edx,0x2
300004dd:	01 d0                	add    eax,edx
300004df:	8b 00                	mov    eax,DWORD PTR [eax]
300004e1:	85 c0                	test   eax,eax
300004e3:	0f 84 b7 00 00 00    	je     300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
300004e9:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004ef:	8b 00                	mov    eax,DWORD PTR [eax]
300004f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004f4:	c1 e2 02             	shl    edx,0x2
300004f7:	01 d0                	add    eax,edx
300004f9:	8b 00                	mov    eax,DWORD PTR [eax]
300004fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
300004fe:	83 ec 0c             	sub    esp,0xc
30000501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000504:	e8 c0 13 00 00       	call   300018c9 <strlenI>
30000509:	83 c4 10             	add    esp,0x10
3000050c:	89 c1                	mov    ecx,eax
3000050e:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000514:	8b 00                	mov    eax,DWORD PTR [eax]
30000516:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000519:	c1 e2 02             	shl    edx,0x2
3000051c:	01 d0                	add    eax,edx
3000051e:	8b 00                	mov    eax,DWORD PTR [eax]
30000520:	83 ec 04             	sub    esp,0x4
30000523:	51                   	push   ecx
30000524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000527:	50                   	push   eax
30000528:	e8 36 14 00 00       	call   30001963 <strncmpI>
3000052d:	83 c4 10             	add    esp,0x10
30000530:	85 c0                	test   eax,eax
30000532:	75 6c                	jne    300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
30000534:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000053a:	8b 00                	mov    eax,DWORD PTR [eax]
3000053c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000053f:	c1 e2 02             	shl    edx,0x2
30000542:	01 d0                	add    eax,edx
30000544:	8b 00                	mov    eax,DWORD PTR [eax]
30000546:	83 ec 08             	sub    esp,0x8
30000549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000054c:	50                   	push   eax
3000054d:	e8 32 12 00 00       	call   30001784 <strcpyI>
30000552:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
30000555:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000055b:	8b 00                	mov    eax,DWORD PTR [eax]
3000055d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000560:	c1 e2 02             	shl    edx,0x2
30000563:	01 d0                	add    eax,edx
30000565:	8b 00                	mov    eax,DWORD PTR [eax]
30000567:	83 ec 08             	sub    esp,0x8
3000056a:	8d 93 08 fb ff ff    	lea    edx,[ebx-0x4f8]
30000570:	52                   	push   edx
30000571:	50                   	push   eax
30000572:	e8 bf 10 00 00       	call   30001636 <strcatI>
30000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
3000057a:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000580:	8b 00                	mov    eax,DWORD PTR [eax]
30000582:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000585:	c1 e2 02             	shl    edx,0x2
30000588:	01 d0                	add    eax,edx
3000058a:	8b 00                	mov    eax,DWORD PTR [eax]
3000058c:	83 ec 08             	sub    esp,0x8
3000058f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000592:	50                   	push   eax
30000593:	e8 9e 10 00 00       	call   30001636 <strcatI>
30000598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
3000059b:	e9 c6 00 00 00       	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
300005a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
300005a4:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
300005a8:	0f 8e 21 ff ff ff    	jle    300004cf <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
300005ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
300005b5:	e9 a2 00 00 00       	jmp    3000065c <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
300005ba:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005c0:	8b 00                	mov    eax,DWORD PTR [eax]
300005c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005c5:	c1 e2 02             	shl    edx,0x2
300005c8:	01 d0                	add    eax,edx
300005ca:	8b 00                	mov    eax,DWORD PTR [eax]
300005cc:	85 c0                	test   eax,eax
300005ce:	0f 85 84 00 00 00    	jne    30000658 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
300005d4:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005da:	8b 00                	mov    eax,DWORD PTR [eax]
300005dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005df:	c1 e2 02             	shl    edx,0x2
300005e2:	01 d0                	add    eax,edx
300005e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300005e7:	81 c2 00 02 00 00    	add    edx,0x200
300005ed:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
300005ef:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005f5:	8b 00                	mov    eax,DWORD PTR [eax]
300005f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005fa:	c1 e2 02             	shl    edx,0x2
300005fd:	01 d0                	add    eax,edx
300005ff:	8b 00                	mov    eax,DWORD PTR [eax]
30000601:	83 ec 08             	sub    esp,0x8
30000604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000607:	50                   	push   eax
30000608:	e8 77 11 00 00       	call   30001784 <strcpyI>
3000060d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
30000610:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000616:	8b 00                	mov    eax,DWORD PTR [eax]
30000618:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000061b:	c1 e2 02             	shl    edx,0x2
3000061e:	01 d0                	add    eax,edx
30000620:	8b 00                	mov    eax,DWORD PTR [eax]
30000622:	83 ec 08             	sub    esp,0x8
30000625:	8d 93 08 fb ff ff    	lea    edx,[ebx-0x4f8]
3000062b:	52                   	push   edx
3000062c:	50                   	push   eax
3000062d:	e8 04 10 00 00       	call   30001636 <strcatI>
30000632:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
30000635:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000063b:	8b 00                	mov    eax,DWORD PTR [eax]
3000063d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000640:	c1 e2 02             	shl    edx,0x2
30000643:	01 d0                	add    eax,edx
30000645:	8b 00                	mov    eax,DWORD PTR [eax]
30000647:	83 ec 08             	sub    esp,0x8
3000064a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000064d:	50                   	push   eax
3000064e:	e8 e3 0f 00 00       	call   30001636 <strcatI>
30000653:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
30000656:	eb 0e                	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
30000658:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
3000065c:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
30000660:	0f 8e 54 ff ff ff    	jle    300005ba <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
30000666:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000669:	c9                   	leave  
3000066a:	c3                   	ret    
3000066b:	90                   	nop

3000066c <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:10
 */

#include "libChrisOS.h"

VISIBLE void* open(char* path, const char* mode)
{
3000066c:	55                   	push   ebp
3000066d:	89 e5                	mov    ebp,esp
3000066f:	53                   	push   ebx
30000670:	83 ec 04             	sub    esp,0x4
30000673:	e8 0f 25 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000678:	05 c0 3f 00 00       	add    eax,0x3fc0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
3000067d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000680:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000683:	83 ec 04             	sub    esp,0x4
30000686:	51                   	push   ecx
30000687:	52                   	push   edx
30000688:	6a 02                	push   0x2
3000068a:	89 c3                	mov    ebx,eax
3000068c:	e8 99 02 00 00       	call   3000092a <do_syscall2>
30000691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
}
30000694:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000697:	c9                   	leave  
30000698:	c3                   	ret    

30000699 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15

VISIBLE void close(void* handle)
{
30000699:	55                   	push   ebp
3000069a:	89 e5                	mov    ebp,esp
3000069c:	53                   	push   ebx
3000069d:	83 ec 04             	sub    esp,0x4
300006a0:	e8 e2 24 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300006a5:	05 93 3f 00 00       	add    eax,0x3f93
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
300006aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006ad:	83 ec 08             	sub    esp,0x8
300006b0:	52                   	push   edx
300006b1:	6a 03                	push   0x3
300006b3:	89 c3                	mov    ebx,eax
300006b5:	e8 ae 02 00 00       	call   30000968 <do_syscall1>
300006ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
300006bd:	90                   	nop
300006be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300006c1:	c9                   	leave  
300006c2:	c3                   	ret    

300006c3 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
300006c3:	55                   	push   ebp
300006c4:	89 e5                	mov    ebp,esp
300006c6:	56                   	push   esi
300006c7:	53                   	push   ebx
300006c8:	e8 ba 24 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300006cd:	05 6b 3f 00 00       	add    eax,0x3f6b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
300006d2:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
300006d5:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
300006d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
300006db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006de:	83 ec 0c             	sub    esp,0xc
300006e1:	56                   	push   esi
300006e2:	53                   	push   ebx
300006e3:	51                   	push   ecx
300006e4:	52                   	push   edx
300006e5:	6a 04                	push   0x4
300006e7:	89 c3                	mov    ebx,eax
300006e9:	e8 c6 01 00 00       	call   300008b4 <do_syscall4>
300006ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
}
300006f1:	8d 65 f8             	lea    esp,[ebp-0x8]
300006f4:	5b                   	pop    ebx
300006f5:	5e                   	pop    esi
300006f6:	5d                   	pop    ebp
300006f7:	c3                   	ret    

300006f8 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
300006f8:	55                   	push   ebp
300006f9:	89 e5                	mov    ebp,esp
300006fb:	56                   	push   esi
300006fc:	53                   	push   ebx
300006fd:	e8 85 24 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000702:	05 36 3f 00 00       	add    eax,0x3f36
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
30000707:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
3000070a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
3000070d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000710:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000713:	83 ec 0c             	sub    esp,0xc
30000716:	56                   	push   esi
30000717:	53                   	push   ebx
30000718:	51                   	push   ecx
30000719:	52                   	push   edx
3000071a:	6a 05                	push   0x5
3000071c:	89 c3                	mov    ebx,eax
3000071e:	e8 91 01 00 00       	call   300008b4 <do_syscall4>
30000723:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
}
30000726:	8d 65 f8             	lea    esp,[ebp-0x8]
30000729:	5b                   	pop    ebx
3000072a:	5e                   	pop    esi
3000072b:	5d                   	pop    ebp
3000072c:	c3                   	ret    

3000072d <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31


VISIBLE int getdir(char* path, char *buffer, int bufferCount)
{
3000072d:	55                   	push   ebp
3000072e:	89 e5                	mov    ebp,esp
30000730:	53                   	push   ebx
30000731:	83 ec 04             	sub    esp,0x4
30000734:	e8 4e 24 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000739:	05 ff 3e 00 00       	add    eax,0x3eff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, bufferCount);
3000073e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
30000741:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000744:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000747:	53                   	push   ebx
30000748:	51                   	push   ecx
30000749:	52                   	push   edx
3000074a:	68 04 03 00 00       	push   0x304
3000074f:	89 c3                	mov    ebx,eax
30000751:	e8 98 01 00 00       	call   300008ee <do_syscall3>
30000756:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33
}
30000759:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000075c:	c9                   	leave  
3000075d:	c3                   	ret    
3000075e:	66 90                	xchg   ax,ax

30000760 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
30000760:	55                   	push   ebp
30000761:	89 e5                	mov    ebp,esp
30000763:	53                   	push   ebx
30000764:	e8 1e 24 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000769:	05 cf 3e 00 00       	add    eax,0x3ecf
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
3000076e:	b8 05 00 00 00       	mov    eax,0x5
30000773:	bb 01 00 00 00       	mov    ebx,0x1
30000778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000077b:	89 d1                	mov    ecx,edx
3000077d:	e8 fc ff ff ff       	call   3000077e <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
30000782:	90                   	nop
30000783:	5b                   	pop    ebx
30000784:	5d                   	pop    ebp
30000785:	c3                   	ret    

30000786 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
30000786:	55                   	push   ebp
30000787:	89 e5                	mov    ebp,esp
30000789:	53                   	push   ebx
3000078a:	83 ec 14             	sub    esp,0x14
3000078d:	e8 f5 23 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000792:	05 a6 3e 00 00       	add    eax,0x3ea6
30000797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000079a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
3000079d:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
300007a3:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
300007a7:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
300007aa:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
300007ae:	b8 05 00 00 00       	mov    eax,0x5
300007b3:	bb 01 00 00 00       	mov    ebx,0x1
300007b8:	8d 55 fa             	lea    edx,[ebp-0x6]
300007bb:	89 d1                	mov    ecx,edx
300007bd:	e8 fc ff ff ff       	call   300007be <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
300007c2:	90                   	nop
300007c3:	83 c4 14             	add    esp,0x14
300007c6:	5b                   	pop    ebx
300007c7:	5d                   	pop    ebp
300007c8:	c3                   	ret    

300007c9 <getc>:
getc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:30

VISIBLE char getc()
{
300007c9:	55                   	push   ebp
300007ca:	89 e5                	mov    ebp,esp
300007cc:	53                   	push   ebx
300007cd:	83 ec 10             	sub    esp,0x10
300007d0:	e8 b2 23 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300007d5:	05 63 3e 00 00       	add    eax,0x3e63
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32
    char c;
    READCHAR(c)
300007da:	b8 04 00 00 00       	mov    eax,0x4
300007df:	ba 00 00 00 00       	mov    edx,0x0
300007e4:	89 d3                	mov    ebx,edx
300007e6:	e8 fc ff ff ff       	call   300007e7 <getc+0x1e>
300007eb:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:33
    return c;
300007ee:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:34
}
300007f2:	83 c4 10             	add    esp,0x10
300007f5:	5b                   	pop    ebx
300007f6:	5d                   	pop    ebp
300007f7:	c3                   	ret    

300007f8 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
300007f8:	55                   	push   ebp
300007f9:	89 e5                	mov    ebp,esp
300007fb:	53                   	push   ebx
300007fc:	83 ec 14             	sub    esp,0x14
300007ff:	e8 83 23 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000804:	05 34 3e 00 00       	add    eax,0x3e34
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    char inchar;
    int len=0;
30000809:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:41
    char lbuf[2]={0,0};
30000810:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
30000814:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:43
    
    if (stream!=1)
30000818:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
3000081c:	74 19                	je     30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:45
    {
        printI("Stream %u not implemented\n",stream);
3000081e:	83 ec 08             	sub    esp,0x8
30000821:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30000824:	8d 90 0a fb ff ff    	lea    edx,[eax-0x4f6]
3000082a:	52                   	push   edx
3000082b:	89 c3                	mov    ebx,eax
3000082d:	e8 e4 02 00 00       	call   30000b16 <printI>
30000832:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46 (discriminator 1)
        getsError: goto getsError;
30000835:	eb fe                	jmp    30000835 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    }
    
    while (1==1)
    {
        READCHAR(inchar)
30000837:	b8 04 00 00 00       	mov    eax,0x4
3000083c:	ba 00 00 00 00       	mov    edx,0x0
30000841:	89 d3                	mov    ebx,edx
30000843:	e8 fc ff ff ff       	call   30000844 <gets+0x4c>
30000848:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
        if (inchar=='\b' && len>0)
3000084b:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
3000084f:	75 17                	jne    30000868 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52 (discriminator 1)
30000851:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000855:	7e 11                	jle    30000868 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
        {
            buffer[len]=0;
30000857:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000085a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000085d:	01 d0                	add    eax,edx
3000085f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55
            len--;
30000862:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
30000866:	eb 43                	jmp    300008ab <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:57
        }
        else if (inchar!=0)
30000868:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
3000086c:	74 33                	je     300008a1 <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
        {
            lbuf[0]=inchar;
3000086e:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000872:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
30000875:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000878:	8d 50 01             	lea    edx,[eax+0x1]
3000087b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000087e:	89 c2                	mov    edx,eax
30000880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000883:	01 c2                	add    edx,eax
30000885:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000889:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
3000088b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000088e:	83 c0 01             	add    eax,0x1
30000891:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
30000894:	7d 06                	jge    3000089c <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63 (discriminator 1)
30000896:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
3000089a:	75 9b                	jne    30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
            
                return len;
3000089c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000089f:	eb 0c                	jmp    300008ad <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
300008a1:	b8 02 03 00 00       	mov    eax,0x302
300008a6:	e8 fc ff ff ff       	call   300008a7 <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70 (discriminator 2)

    }
300008ab:	eb 8a                	jmp    30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
}
300008ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300008b0:	c9                   	leave  
300008b1:	c3                   	ret    
300008b2:	66 90                	xchg   ax,ax

300008b4 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:17
extern void sysEnter_Vector();
bool libcInitialized = false;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
300008b4:	55                   	push   ebp
300008b5:	89 e5                	mov    ebp,esp
300008b7:	56                   	push   esi
300008b8:	53                   	push   ebx
300008b9:	83 ec 10             	sub    esp,0x10
300008bc:	e8 c6 22 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300008c1:	05 77 3d 00 00       	add    eax,0x3d77
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
    int retVal=0;
300008c6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
300008cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300008d0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
300008d3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300008d6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300008d9:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
300008dc:	e8 fc ff ff ff       	call   300008dd <do_syscall4+0x29>
300008e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    return retVal;
300008e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
}
300008e7:	83 c4 10             	add    esp,0x10
300008ea:	5b                   	pop    ebx
300008eb:	5e                   	pop    esi
300008ec:	5d                   	pop    ebp
300008ed:	c3                   	ret    

300008ee <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:24

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
300008ee:	55                   	push   ebp
300008ef:	89 e5                	mov    ebp,esp
300008f1:	56                   	push   esi
300008f2:	53                   	push   ebx
300008f3:	83 ec 10             	sub    esp,0x10
300008f6:	e8 8c 22 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300008fb:	05 3d 3d 00 00       	add    eax,0x3d3d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25
    int retVal=0;
30000900:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    SYSCALL3(callnum, param1, param2, param3, retVal);
30000907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000090a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
3000090d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000910:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
30000913:	be 00 00 00 00       	mov    esi,0x0
30000918:	e8 fc ff ff ff       	call   30000919 <do_syscall3+0x2b>
3000091d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    return retVal;
30000920:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
}
30000923:	83 c4 10             	add    esp,0x10
30000926:	5b                   	pop    ebx
30000927:	5e                   	pop    esi
30000928:	5d                   	pop    ebp
30000929:	c3                   	ret    

3000092a <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:31

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
3000092a:	55                   	push   ebp
3000092b:	89 e5                	mov    ebp,esp
3000092d:	56                   	push   esi
3000092e:	53                   	push   ebx
3000092f:	83 ec 10             	sub    esp,0x10
30000932:	e8 50 22 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000937:	05 01 3d 00 00       	add    eax,0x3d01
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32
    int retVal=0;
3000093c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    SYSCALL2(callnum, param1, param2, retVal);
30000943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000946:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000949:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
3000094c:	ba 00 00 00 00       	mov    edx,0x0
30000951:	be 00 00 00 00       	mov    esi,0x0
30000956:	e8 fc ff ff ff       	call   30000957 <do_syscall2+0x2d>
3000095b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    return retVal;
3000095e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
}
30000961:	83 c4 10             	add    esp,0x10
30000964:	5b                   	pop    ebx
30000965:	5e                   	pop    esi
30000966:	5d                   	pop    ebp
30000967:	c3                   	ret    

30000968 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:38

int do_syscall1(int callnum, uint32_t param1)
{
30000968:	55                   	push   ebp
30000969:	89 e5                	mov    ebp,esp
3000096b:	56                   	push   esi
3000096c:	53                   	push   ebx
3000096d:	83 ec 10             	sub    esp,0x10
30000970:	e8 12 22 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000975:	05 c3 3c 00 00       	add    eax,0x3cc3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39
    int retVal=0;
3000097a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    SYSCALL1(callnum, param1, retVal);
30000981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000984:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000987:	b9 00 00 00 00       	mov    ecx,0x0
3000098c:	ba 00 00 00 00       	mov    edx,0x0
30000991:	be 00 00 00 00       	mov    esi,0x0
30000996:	e8 fc ff ff ff       	call   30000997 <do_syscall1+0x2f>
3000099b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    return retVal;
3000099e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
}
300009a1:	83 c4 10             	add    esp,0x10
300009a4:	5b                   	pop    ebx
300009a5:	5e                   	pop    esi
300009a6:	5d                   	pop    ebp
300009a7:	c3                   	ret    

300009a8 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:45

int do_syscall0(int callnum)
{
300009a8:	55                   	push   ebp
300009a9:	89 e5                	mov    ebp,esp
300009ab:	56                   	push   esi
300009ac:	53                   	push   ebx
300009ad:	83 ec 10             	sub    esp,0x10
300009b0:	e8 d2 21 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300009b5:	05 83 3c 00 00       	add    eax,0x3c83
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46
    int retVal=0;
300009ba:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    SYSCALL0(callnum, retVal);
300009c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300009c4:	bb 00 00 00 00       	mov    ebx,0x0
300009c9:	b9 00 00 00 00       	mov    ecx,0x0
300009ce:	ba 00 00 00 00       	mov    edx,0x0
300009d3:	be 00 00 00 00       	mov    esi,0x0
300009d8:	e8 fc ff ff ff       	call   300009d9 <do_syscall0+0x31>
300009dd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    return retVal;
300009e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
}
300009e3:	83 c4 10             	add    esp,0x10
300009e6:	5b                   	pop    ebx
300009e7:	5e                   	pop    esi
300009e8:	5d                   	pop    ebp
300009e9:	c3                   	ret    

300009ea <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:52

VISIBLE void __attribute__((constructor)) libc_init()
{
300009ea:	55                   	push   ebp
300009eb:	89 e5                	mov    ebp,esp
300009ed:	53                   	push   ebx
300009ee:	83 ec 04             	sub    esp,0x4
300009f1:	e8 ba 21 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
300009f6:	81 c3 42 3c 00 00    	add    ebx,0x3c42
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53
    printdI(DEBUG_LIBC,"***libc_init called\n***");
300009fc:	83 ec 08             	sub    esp,0x8
300009ff:	8d 83 28 fb ff ff    	lea    eax,[ebx-0x4d8]
30000a05:	50                   	push   eax
30000a06:	68 00 00 00 02       	push   0x2000000
30000a0b:	e8 3a 01 00 00       	call   30000b4a <printdI>
30000a10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    if (!libcInitialized)
30000a13:	0f b6 83 38 00 00 00 	movzx  eax,BYTE PTR [ebx+0x38]
30000a1a:	83 f0 01             	xor    eax,0x1
30000a1d:	84 c0                	test   al,al
30000a1f:	74 56                	je     30000a77 <libc_init+0x8d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:56
    {
        initmalloc();
30000a21:	e8 1a 05 00 00       	call   30000f40 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
30000a26:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
30000a29:	89 c2                	mov    edx,eax
30000a2b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000a31:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        do_syscall0(SYSCALL_INVALID);
30000a33:	83 ec 0c             	sub    esp,0xc
30000a36:	6a 00                	push   0x0
30000a38:	e8 6b ff ff ff       	call   300009a8 <do_syscall0>
30000a3d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
30000a40:	8d 83 57 c4 ff ff    	lea    eax,[ebx-0x3ba9]
30000a46:	83 ec 08             	sub    esp,0x8
30000a49:	50                   	push   eax
30000a4a:	68 63 01 00 00       	push   0x163
30000a4f:	e8 14 ff ff ff       	call   30000968 <do_syscall1>
30000a54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        libcInitialized = true;
30000a57:	c6 83 38 00 00 00 01 	mov    BYTE PTR [ebx+0x38],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        printdI(DEBUG_LIBC,"***libc_init completed\n");
30000a5e:	83 ec 08             	sub    esp,0x8
30000a61:	8d 83 40 fb ff ff    	lea    eax,[ebx-0x4c0]
30000a67:	50                   	push   eax
30000a68:	68 00 00 00 02       	push   0x2000000
30000a6d:	e8 d8 00 00 00       	call   30000b4a <printdI>
30000a72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
    }
    else
        printI("libc_init called previously, exiting\n");
}
30000a75:	eb 12                	jmp    30000a89 <libc_init+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
        libcInitialized = true;
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
30000a77:	83 ec 0c             	sub    esp,0xc
30000a7a:	8d 83 58 fb ff ff    	lea    eax,[ebx-0x4a8]
30000a80:	50                   	push   eax
30000a81:	e8 90 00 00 00       	call   30000b16 <printI>
30000a86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
}
30000a89:	90                   	nop
30000a8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000a8d:	c9                   	leave  
30000a8e:	c3                   	ret    

30000a8f <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69

void __attribute__((destructor)) libc_cleanup(void)
{
30000a8f:	55                   	push   ebp
30000a90:	89 e5                	mov    ebp,esp
30000a92:	53                   	push   ebx
30000a93:	83 ec 04             	sub    esp,0x4
30000a96:	e8 ec 20 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000a9b:	05 9d 3b 00 00       	add    eax,0x3b9d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    malloc_cleanup();
30000aa0:	89 c3                	mov    ebx,eax
30000aa2:	e8 d4 07 00 00       	call   3000127b <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71
}
30000aa7:	90                   	nop
30000aa8:	83 c4 04             	add    esp,0x4
30000aab:	5b                   	pop    ebx
30000aac:	5d                   	pop    ebp
30000aad:	c3                   	ret    

30000aae <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74

VISIBLE int print(const char *format, ...)
{
30000aae:	55                   	push   ebp
30000aaf:	89 e5                	mov    ebp,esp
30000ab1:	83 ec 10             	sub    esp,0x10
30000ab4:	e8 ce 20 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000ab9:	05 7f 3b 00 00       	add    eax,0x3b7f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
    va_list args;
    va_start( args, format );
30000abe:	8d 45 0c             	lea    eax,[ebp+0xc]
30000ac1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000ac4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000ac7:	89 c2                	mov    edx,eax
30000ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000acc:	52                   	push   edx
30000acd:	50                   	push   eax
30000ace:	68 00 03 00 00       	push   0x300
30000ad3:	e8 52 fe ff ff       	call   3000092a <do_syscall2>
30000ad8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:78
    return 0;
30000adb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79
}
30000ae0:	c9                   	leave  
30000ae1:	c3                   	ret    

30000ae2 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:82

VISIBLE int printf(const char *format, ...)
{
30000ae2:	55                   	push   ebp
30000ae3:	89 e5                	mov    ebp,esp
30000ae5:	83 ec 10             	sub    esp,0x10
30000ae8:	e8 9a 20 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000aed:	05 4b 3b 00 00       	add    eax,0x3b4b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    va_list args;
    va_start( args, format );
30000af2:	8d 45 0c             	lea    eax,[ebp+0xc]
30000af5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000af8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000afb:	89 c2                	mov    edx,eax
30000afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b00:	52                   	push   edx
30000b01:	50                   	push   eax
30000b02:	68 00 03 00 00       	push   0x300
30000b07:	e8 1e fe ff ff       	call   3000092a <do_syscall2>
30000b0c:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
    return 0;
30000b0f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:87
}
30000b14:	c9                   	leave  
30000b15:	c3                   	ret    

30000b16 <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:90

int printI(const char *format, ...)
{
30000b16:	55                   	push   ebp
30000b17:	89 e5                	mov    ebp,esp
30000b19:	83 ec 10             	sub    esp,0x10
30000b1c:	e8 66 20 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000b21:	05 17 3b 00 00       	add    eax,0x3b17
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
    va_list args;
    va_start( args, format );
30000b26:	8d 45 0c             	lea    eax,[ebp+0xc]
30000b29:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000b2c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000b2f:	89 c2                	mov    edx,eax
30000b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b34:	52                   	push   edx
30000b35:	50                   	push   eax
30000b36:	68 00 03 00 00       	push   0x300
30000b3b:	e8 ea fd ff ff       	call   3000092a <do_syscall2>
30000b40:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    return 0;
30000b43:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
}
30000b48:	c9                   	leave  
30000b49:	c3                   	ret    

30000b4a <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98

int printdI(uint32_t DebugLevel, const char *format, ...)
{
30000b4a:	55                   	push   ebp
30000b4b:	89 e5                	mov    ebp,esp
30000b4d:	83 ec 10             	sub    esp,0x10
30000b50:	e8 32 20 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000b55:	05 e3 3a 00 00       	add    eax,0x3ae3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    va_list args;
    va_start( args, format );
30000b5a:	8d 45 10             	lea    eax,[ebp+0x10]
30000b5d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
30000b60:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000b63:	89 c2                	mov    edx,eax
30000b65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000b68:	52                   	push   edx
30000b69:	50                   	push   eax
30000b6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000b6d:	68 01 03 00 00       	push   0x301
30000b72:	e8 77 fd ff ff       	call   300008ee <do_syscall3>
30000b77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
    return 0;
30000b7a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:105
    va_end(args);
}
30000b7f:	c9                   	leave  
30000b80:	c3                   	ret    

30000b81 <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108

VISIBLE unsigned int sleep (unsigned int __seconds)
{
30000b81:	55                   	push   ebp
30000b82:	89 e5                	mov    ebp,esp
30000b84:	56                   	push   esi
30000b85:	53                   	push   ebx
30000b86:	83 ec 10             	sub    esp,0x10
30000b89:	e8 f9 1f 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000b8e:	05 aa 3a 00 00       	add    eax,0x3aaa
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    SLEEP_SECONDS(__seconds)
30000b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b96:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
30000b99:	b8 70 01 00 00       	mov    eax,0x170
30000b9e:	bb 00 00 00 00       	mov    ebx,0x0
30000ba3:	b9 00 00 00 00       	mov    ecx,0x0
30000ba8:	ba 00 00 00 00       	mov    edx,0x0
30000bad:	be 00 00 00 00       	mov    esi,0x0
30000bb2:	e8 fc ff ff ff       	call   30000bb3 <sleep+0x32>
30000bb7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000bbd:	69 d0 e8 03 00 00    	imul   edx,eax,0x3e8
30000bc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000bc6:	01 d0                	add    eax,edx
30000bc8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000bcb:	b8 66 01 00 00       	mov    eax,0x166
30000bd0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000bd3:	b9 00 00 00 00       	mov    ecx,0x0
30000bd8:	ba 00 00 00 00       	mov    edx,0x0
30000bdd:	be 00 00 00 00       	mov    esi,0x0
30000be2:	e8 fc ff ff ff       	call   30000be3 <sleep+0x62>
30000be7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
    return 0;
30000bea:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
}
30000bef:	83 c4 10             	add    esp,0x10
30000bf2:	5b                   	pop    ebx
30000bf3:	5e                   	pop    esi
30000bf4:	5d                   	pop    ebp
30000bf5:	c3                   	ret    

30000bf6 <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:114

void stop()
{
30000bf6:	55                   	push   ebp
30000bf7:	89 e5                	mov    ebp,esp
30000bf9:	e8 89 1f 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000bfe:	05 3a 3a 00 00       	add    eax,0x3a3a
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115
    do_syscall0(SYSCALL_STOP);
30000c03:	68 68 01 00 00       	push   0x168
30000c08:	e8 9b fd ff ff       	call   300009a8 <do_syscall0>
30000c0d:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:116
}
30000c10:	90                   	nop
30000c11:	c9                   	leave  
30000c12:	c3                   	ret    

30000c13 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
30000c13:	55                   	push   ebp
30000c14:	89 e5                	mov    ebp,esp
30000c16:	e8 6c 1f 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000c1b:	05 1d 3a 00 00       	add    eax,0x3a1d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
30000c20:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000c23:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000c26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c29:	51                   	push   ecx
30000c2a:	52                   	push   edx
30000c2b:	50                   	push   eax
30000c2c:	68 67 01 00 00       	push   0x167
30000c31:	e8 b8 fc ff ff       	call   300008ee <do_syscall3>
30000c36:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:121
}
30000c39:	90                   	nop
30000c3a:	c9                   	leave  
30000c3b:	c3                   	ret    

30000c3c <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:124

VISIBLE int fork()
{
30000c3c:	55                   	push   ebp
30000c3d:	89 e5                	mov    ebp,esp
30000c3f:	83 ec 10             	sub    esp,0x10
30000c42:	e8 40 1f 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000c47:	05 f1 39 00 00       	add    eax,0x39f1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125
    uint32_t retVal = 0;
30000c4c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
30000c53:	b8 06 00 00 00       	mov    eax,0x6
30000c58:	e8 fc ff ff ff       	call   30000c59 <fork+0x1d>
30000c5d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:128
    return retVal;
30000c60:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
}
30000c63:	c9                   	leave  
30000c64:	c3                   	ret    

30000c65 <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132

VISIBLE int exec(char* path, int argc, char** argv)
{
30000c65:	55                   	push   ebp
30000c66:	89 e5                	mov    ebp,esp
30000c68:	83 ec 10             	sub    esp,0x10
30000c6b:	e8 17 1f 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000c70:	05 c8 39 00 00       	add    eax,0x39c8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:133
    int pid=0;
30000c75:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
30000c7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c7f:	8d 80 7e fb ff ff    	lea    eax,[eax-0x482]
30000c85:	50                   	push   eax
30000c86:	68 00 00 00 02       	push   0x2000000
30000c8b:	e8 ba fe ff ff       	call   30000b4a <printdI>
30000c90:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
30000c93:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000c96:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c9c:	51                   	push   ecx
30000c9d:	52                   	push   edx
30000c9e:	50                   	push   eax
30000c9f:	6a 59                	push   0x59
30000ca1:	e8 48 fc ff ff       	call   300008ee <do_syscall3>
30000ca6:	83 c4 10             	add    esp,0x10
30000ca9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
    return pid;
30000cac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
}
30000caf:	c9                   	leave  
30000cb0:	c3                   	ret    

30000cb1 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:140

VISIBLE int execb(char* path)
{
30000cb1:	55                   	push   ebp
30000cb2:	89 e5                	mov    ebp,esp
30000cb4:	53                   	push   ebx
30000cb5:	83 ec 24             	sub    esp,0x24
30000cb8:	e8 f3 1e 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
30000cbd:	81 c3 7b 39 00 00    	add    ebx,0x397b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    int pid=0, argc=0;
30000cc3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
30000cca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
30000cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000cd4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000cda:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:145
    char* program;
    program=mallocI(512);
30000cdd:	83 ec 0c             	sub    esp,0xc
30000ce0:	68 00 02 00 00       	push   0x200
30000ce5:	e8 82 03 00 00       	call   3000106c <mallocI>
30000cea:	83 c4 10             	add    esp,0x10
30000ced:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148
    do
    {
        spacePtr=strstrI(spacePtr," ");
30000cf0:	83 ec 08             	sub    esp,0x8
30000cf3:	8d 83 91 fb ff ff    	lea    eax,[ebx-0x46f]
30000cf9:	50                   	push   eax
30000cfa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000cfd:	e8 3e 11 00 00       	call   30001e40 <strstrI>
30000d02:	83 c4 10             	add    esp,0x10
30000d05:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
        if (argc==0)
30000d08:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000d0c:	75 44                	jne    30000d52 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151
        {
            if (spacePtr==0)
30000d0e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000d12:	75 22                	jne    30000d36 <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152
                strncpyI(program, path, strlenI(path));
30000d14:	83 ec 0c             	sub    esp,0xc
30000d17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000d1a:	e8 aa 0b 00 00       	call   300018c9 <strlenI>
30000d1f:	83 c4 10             	add    esp,0x10
30000d22:	83 ec 04             	sub    esp,0x4
30000d25:	50                   	push   eax
30000d26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000d29:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000d2c:	e8 9b 0c 00 00       	call   300019cc <strncpyI>
30000d31:	83 c4 10             	add    esp,0x10
30000d34:	eb 1c                	jmp    30000d52 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154
            else
                strncpyI(program, path, spacePtr-path);
30000d36:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000d3c:	29 c2                	sub    edx,eax
30000d3e:	89 d0                	mov    eax,edx
30000d40:	83 ec 04             	sub    esp,0x4
30000d43:	50                   	push   eax
30000d44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000d47:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000d4a:	e8 7d 0c 00 00       	call   300019cc <strncpyI>
30000d4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:156
        }
        argc++;
30000d52:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:158
            
    } while (spacePtr++);
30000d56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000d59:	8d 50 01             	lea    edx,[eax+0x1]
30000d5c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000d5f:	85 c0                	test   eax,eax
30000d61:	75 8d                	jne    30000cf0 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:160
    
    argv=mallocI((argc*50)+(argc*4));
30000d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000d66:	6b c0 36             	imul   eax,eax,0x36
30000d69:	83 ec 0c             	sub    esp,0xc
30000d6c:	50                   	push   eax
30000d6d:	e8 fa 02 00 00       	call   3000106c <mallocI>
30000d72:	83 c4 10             	add    esp,0x10
30000d75:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:161
    int argvPtr=4*argc;
30000d78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000d7b:	c1 e0 02             	shl    eax,0x2
30000d7e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162
    spacePtr=path;
30000d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000d84:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163
    for (int cnt=0;cnt<argc; cnt++)
30000d87:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
30000d8e:	e9 c8 00 00 00       	jmp    30000e5b <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:165
    {
        argv[cnt]=(char*)argv+argvPtr;
30000d93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d96:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000d9d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000da0:	01 d0                	add    eax,edx
30000da2:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
30000da5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30000da8:	01 ca                	add    edx,ecx
30000daa:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
        spacePtr=strstrI(spacePtr," ");
30000dac:	83 ec 08             	sub    esp,0x8
30000daf:	8d 83 91 fb ff ff    	lea    eax,[ebx-0x46f]
30000db5:	50                   	push   eax
30000db6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000db9:	e8 82 10 00 00       	call   30001e40 <strstrI>
30000dbe:	83 c4 10             	add    esp,0x10
30000dc1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
        if (spacePtr)
30000dc4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000dc8:	74 2f                	je     30000df9 <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
30000dca:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000dcd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000dd0:	29 c2                	sub    edx,eax
30000dd2:	89 d0                	mov    eax,edx
30000dd4:	89 c1                	mov    ecx,eax
30000dd6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000dd9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000de0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000de3:	01 d0                	add    eax,edx
30000de5:	8b 00                	mov    eax,DWORD PTR [eax]
30000de7:	83 ec 04             	sub    esp,0x4
30000dea:	51                   	push   ecx
30000deb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000dee:	50                   	push   eax
30000def:	e8 d8 0b 00 00       	call   300019cc <strncpyI>
30000df4:	83 c4 10             	add    esp,0x10
30000df7:	eb 31                	jmp    30000e2a <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:170
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
30000df9:	83 ec 0c             	sub    esp,0xc
30000dfc:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000dff:	e8 c5 0a 00 00       	call   300018c9 <strlenI>
30000e04:	83 c4 10             	add    esp,0x10
30000e07:	89 c2                	mov    edx,eax
30000e09:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000e0c:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
30000e13:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000e16:	01 c8                	add    eax,ecx
30000e18:	8b 00                	mov    eax,DWORD PTR [eax]
30000e1a:	83 ec 04             	sub    esp,0x4
30000e1d:	52                   	push   edx
30000e1e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000e21:	50                   	push   eax
30000e22:	e8 a5 0b 00 00       	call   300019cc <strncpyI>
30000e27:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171 (discriminator 2)
        strtrimI(argv[cnt]);
30000e2a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000e2d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000e34:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000e37:	01 d0                	add    eax,edx
30000e39:	8b 00                	mov    eax,DWORD PTR [eax]
30000e3b:	83 ec 0c             	sub    esp,0xc
30000e3e:	50                   	push   eax
30000e3f:	e8 44 0f 00 00       	call   30001d88 <strtrimI>
30000e44:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172 (discriminator 2)
        lastSpacePtr=spacePtr++;
30000e47:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000e4a:	8d 50 01             	lea    edx,[eax+0x1]
30000e4d:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000e50:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173 (discriminator 2)
        argvPtr+=50;
30000e53:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
30000e57:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163 (discriminator 1)
30000e5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000e5e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30000e61:	0f 8c 2c ff ff ff    	jl     30000d93 <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
30000e67:	83 ec 04             	sub    esp,0x4
30000e6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000e6d:	8d 83 93 fb ff ff    	lea    eax,[ebx-0x46d]
30000e73:	50                   	push   eax
30000e74:	68 00 00 00 02       	push   0x2000000
30000e79:	e8 cc fc ff ff       	call   30000b4a <printdI>
30000e7e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
30000e81:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
30000e84:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000e87:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
30000e8a:	51                   	push   ecx
30000e8b:	52                   	push   edx
30000e8c:	50                   	push   eax
30000e8d:	68 05 03 00 00       	push   0x305
30000e92:	e8 57 fa ff ff       	call   300008ee <do_syscall3>
30000e97:	83 c4 10             	add    esp,0x10
30000e9a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
30000e9d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:183
    freeI(argv);
    freeI(program);
}
30000ea0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000ea3:	c9                   	leave  
30000ea4:	c3                   	ret    

30000ea5 <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186

VISIBLE int execa(char* path, int argc, char** argv)
{
30000ea5:	55                   	push   ebp
30000ea6:	89 e5                	mov    ebp,esp
30000ea8:	83 ec 10             	sub    esp,0x10
30000eab:	e8 d7 1c 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000eb0:	05 88 37 00 00       	add    eax,0x3788
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187
    int pid=0;
30000eb5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:188
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
30000ebc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000ebf:	8d 80 a7 fb ff ff    	lea    eax,[eax-0x459]
30000ec5:	50                   	push   eax
30000ec6:	68 00 00 00 02       	push   0x2000000
30000ecb:	e8 7a fc ff ff       	call   30000b4a <printdI>
30000ed0:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
30000ed3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000ed6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000edc:	51                   	push   ecx
30000edd:	52                   	push   edx
30000ede:	50                   	push   eax
30000edf:	68 05 03 00 00       	push   0x305
30000ee4:	e8 05 fa ff ff       	call   300008ee <do_syscall3>
30000ee9:	83 c4 10             	add    esp,0x10
30000eec:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
    return pid;
30000eef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:191
}
30000ef2:	c9                   	leave  
30000ef3:	c3                   	ret    

30000ef4 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:194

VISIBLE int waitpid(uint32_t pid)
{
30000ef4:	55                   	push   ebp
30000ef5:	89 e5                	mov    ebp,esp
30000ef7:	e8 8b 1c 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000efc:	05 3c 37 00 00       	add    eax,0x373c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
    return do_syscall1(SYSCALL_WAITFORPID,pid);
30000f01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000f04:	6a 61                	push   0x61
30000f06:	e8 5d fa ff ff       	call   30000968 <do_syscall1>
30000f0b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:196
}
30000f0e:	c9                   	leave  
30000f0f:	c3                   	ret    

30000f10 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:199

VISIBLE void exit(int exitCode)
{
30000f10:	55                   	push   ebp
30000f11:	89 e5                	mov    ebp,esp
30000f13:	e8 6f 1c 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000f18:	05 20 37 00 00       	add    eax,0x3720
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201
    
}
30000f1d:	90                   	nop
30000f1e:	5d                   	pop    ebp
30000f1f:	c3                   	ret    

30000f20 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204

VISIBLE char* getcwd(char* buf, size_t size)
{
30000f20:	55                   	push   ebp
30000f21:	89 e5                	mov    ebp,esp
30000f23:	e8 5f 1c 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000f28:	05 10 37 00 00       	add    eax,0x3710
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
30000f2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000f30:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000f33:	50                   	push   eax
30000f34:	6a 4f                	push   0x4f
30000f36:	e8 ef f9 ff ff       	call   3000092a <do_syscall2>
30000f3b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:206
}
30000f3e:	c9                   	leave  
30000f3f:	c3                   	ret    

30000f40 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:13
#include "libChrisOS.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
30000f40:	55                   	push   ebp
30000f41:	89 e5                	mov    ebp,esp
30000f43:	53                   	push   ebx
30000f44:	83 ec 04             	sub    esp,0x4
30000f47:	e8 64 1c 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
30000f4c:	81 c3 ec 36 00 00    	add    ebx,0x36ec
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
30000f52:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000f58:	8b 00                	mov    eax,DWORD PTR [eax]
30000f5a:	50                   	push   eax
30000f5b:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000f61:	50                   	push   eax
30000f62:	8d 83 bc fb ff ff    	lea    eax,[ebx-0x444]
30000f68:	50                   	push   eax
30000f69:	68 00 00 00 01       	push   0x1000000
30000f6e:	e8 d7 fb ff ff       	call   30000b4a <printdI>
30000f73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    heapBase=0;
30000f76:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000f7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapCurr=0;
30000f82:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000f88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapEnd=0;
30000f8e:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30000f94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    libcTZ=-5;
30000f9a:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
30000fa0:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:20

}
30000fa6:	90                   	nop
30000fa7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000faa:	c9                   	leave  
30000fab:	c3                   	ret    

30000fac <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
30000fac:	55                   	push   ebp
30000fad:	89 e5                	mov    ebp,esp
30000faf:	83 ec 10             	sub    esp,0x10
30000fb2:	e8 d0 1b 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30000fb7:	05 81 36 00 00       	add    eax,0x3681
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
30000fbc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000fbf:	83 c2 20             	add    edx,0x20
30000fc2:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
30000fc5:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000fcb:	8b 0a                	mov    ecx,DWORD PTR [edx]
30000fcd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30000fd0:	01 d1                	add    ecx,edx
30000fd2:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
30000fd8:	8b 12                	mov    edx,DWORD PTR [edx]
30000fda:	39 d1                	cmp    ecx,edx
30000fdc:	76 4e                	jbe    3000102c <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
30000fde:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000fe4:	8b 12                	mov    edx,DWORD PTR [edx]
30000fe6:	8b 80 ec ff ff ff    	mov    eax,DWORD PTR [eax-0x14]
30000fec:	8b 00                	mov    eax,DWORD PTR [eax]
30000fee:	29 c2                	sub    edx,eax
30000ff0:	89 d0                	mov    eax,edx
30000ff2:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
        if (newSize== 0 || newSize%PAGE_SIZE)
30000ff5:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
30000ff9:	74 0c                	je     30001007 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32 (discriminator 1)
30000ffb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000ffe:	25 ff 0f 00 00       	and    eax,0xfff
30001003:	85 c0                	test   eax,eax
30001005:	74 10                	je     30001017 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
30001007:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000100a:	25 00 f0 ff ff       	and    eax,0xfffff000
3000100f:	05 00 10 00 00       	add    eax,0x1000
30001014:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:37
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
30001017:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
3000101e:	77 07                	ja     30001027 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
            return ALLOC_REQUEST_SIZE;
30001020:	b8 00 20 03 00       	mov    eax,0x32000
30001025:	eb 0a                	jmp    30001031 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        else
            return newSize;
30001027:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000102a:	eb 05                	jmp    30001031 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:43
    }
    else
        return 0;
3000102c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:44
}
30001031:	c9                   	leave  
30001032:	c3                   	ret    

30001033 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:47

void freeI(void* fpointer)
{
30001033:	55                   	push   ebp
30001034:	89 e5                	mov    ebp,esp
30001036:	83 ec 10             	sub    esp,0x10
30001039:	e8 49 1b 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
3000103e:	05 fa 35 00 00       	add    eax,0x35fa
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:50
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
30001043:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30001047:	74 20                	je     30001069 <freeI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
30001049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000104c:	83 e8 10             	sub    eax,0x10
3000104f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
30001052:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001055:	8b 00                	mov    eax,DWORD PTR [eax]
30001057:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
3000105c:	74 02                	je     30001060 <freeI+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59 (discriminator 2)
    {
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
3000105e:	eb fe                	jmp    3000105e <freeI+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
    }
    mp->inUse=false;
30001060:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001063:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
30001067:	eb 01                	jmp    3000106a <freeI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
30001069:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
    }
    mp->inUse=false;
}
3000106a:	c9                   	leave  
3000106b:	c3                   	ret    

3000106c <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65

void*  mallocI(size_t size)
{
3000106c:	55                   	push   ebp
3000106d:	89 e5                	mov    ebp,esp
3000106f:	53                   	push   ebx
30001070:	83 ec 24             	sub    esp,0x24
30001073:	e8 38 1b 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
30001078:	81 c3 c0 35 00 00    	add    ebx,0x35c0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
3000107e:	83 ec 04             	sub    esp,0x4
30001081:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001084:	8d 83 df fb ff ff    	lea    eax,[ebx-0x421]
3000108a:	50                   	push   eax
3000108b:	68 00 00 00 01       	push   0x1000000
30001090:	e8 b5 fa ff ff       	call   30000b4a <printdI>
30001095:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    needed = newHeapRequiredToFulfillRequest(size);
30001098:	83 ec 0c             	sub    esp,0xc
3000109b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000109e:	e8 09 ff ff ff       	call   30000fac <newHeapRequiredToFulfillRequest>
300010a3:	83 c4 10             	add    esp,0x10
300010a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:74
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
300010a9:	83 ec 04             	sub    esp,0x4
300010ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
300010af:	8d 83 ef fb ff ff    	lea    eax,[ebx-0x411]
300010b5:	50                   	push   eax
300010b6:	68 00 00 00 01       	push   0x1000000
300010bb:	e8 8a fa ff ff       	call   30000b4a <printdI>
300010c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    if (needed!=0)      //New heap required
300010c3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
300010c7:	0f 84 ae 00 00 00    	je     3000117b <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
300010cd:	83 ec 08             	sub    esp,0x8
300010d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
300010d3:	68 65 01 00 00       	push   0x165
300010d8:	e8 8b f8 ff ff       	call   30000968 <do_syscall1>
300010dd:	83 c4 10             	add    esp,0x10
300010e0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
300010e3:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
300010e9:	8b 00                	mov    eax,DWORD PTR [eax]
300010eb:	83 ec 04             	sub    esp,0x4
300010ee:	50                   	push   eax
300010ef:	8d 83 0b fc ff ff    	lea    eax,[ebx-0x3f5]
300010f5:	50                   	push   eax
300010f6:	68 00 00 00 01       	push   0x1000000
300010fb:	e8 4a fa ff ff       	call   30000b4a <printdI>
30001100:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
        heapEnd=allocatedPtr+needed;
30001103:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001106:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001109:	01 c2                	add    edx,eax
3000110b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001111:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
30001113:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001119:	8b 00                	mov    eax,DWORD PTR [eax]
3000111b:	83 ec 0c             	sub    esp,0xc
3000111e:	50                   	push   eax
3000111f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001122:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30001125:	8d 83 28 fc ff ff    	lea    eax,[ebx-0x3d8]
3000112b:	50                   	push   eax
3000112c:	68 00 00 00 01       	push   0x1000000
30001131:	e8 14 fa ff ff       	call   30000b4a <printdI>
30001136:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        if (heapBase==0)    //Hasn't been initialized yet!
30001139:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
3000113f:	8b 00                	mov    eax,DWORD PTR [eax]
30001141:	85 c0                	test   eax,eax
30001143:	75 36                	jne    3000117b <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
        {
            heapCurr=allocatedPtr;
30001145:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000114b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000114e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
            heapBase=allocatedPtr;
30001150:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30001156:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001159:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
3000115b:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001161:	8b 00                	mov    eax,DWORD PTR [eax]
30001163:	83 ec 04             	sub    esp,0x4
30001166:	50                   	push   eax
30001167:	8d 83 68 fc ff ff    	lea    eax,[ebx-0x398]
3000116d:	50                   	push   eax
3000116e:	68 00 00 00 01       	push   0x1000000
30001173:	e8 d2 f9 ff ff       	call   30000b4a <printdI>
30001178:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
3000117b:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001181:	8b 00                	mov    eax,DWORD PTR [eax]
30001183:	83 ec 04             	sub    esp,0x4
30001186:	50                   	push   eax
30001187:	8d 83 a4 fc ff ff    	lea    eax,[ebx-0x35c]
3000118d:	50                   	push   eax
3000118e:	68 00 00 00 01       	push   0x1000000
30001193:	e8 b2 f9 ff ff       	call   30000b4a <printdI>
30001198:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90
    heapPtr = (heaprec_t*)heapCurr;
3000119b:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300011a1:	8b 00                	mov    eax,DWORD PTR [eax]
300011a3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    heapPtr->marker=ALLOC_MARKER_VALUE;
300011a6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300011a9:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    heapPtr->len=size;
300011af:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300011b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300011b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    heapPtr->inUse=true;
300011b8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300011bb:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
300011bf:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300011c5:	8b 00                	mov    eax,DWORD PTR [eax]
300011c7:	6a 10                	push   0x10
300011c9:	50                   	push   eax
300011ca:	8d 83 cc fc ff ff    	lea    eax,[ebx-0x334]
300011d0:	50                   	push   eax
300011d1:	68 00 00 00 01       	push   0x1000000
300011d6:	e8 6f f9 ff ff       	call   30000b4a <printdI>
300011db:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
300011de:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300011e4:	8b 00                	mov    eax,DWORD PTR [eax]
300011e6:	83 c0 10             	add    eax,0x10
300011e9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
300011ec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300011ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300011f2:	8d 50 10             	lea    edx,[eax+0x10]
300011f5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300011f8:	01 d0                	add    eax,edx
300011fa:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
300011fd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30001200:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30001203:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    heapCurr+=size+(sizeof(heaprec_t));
30001206:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000120c:	8b 10                	mov    edx,DWORD PTR [eax]
3000120e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001211:	01 d0                	add    eax,edx
30001213:	8d 50 10             	lea    edx,[eax+0x10]
30001216:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000121c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
3000121e:	83 ec 04             	sub    esp,0x4
30001221:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
30001224:	8d 83 04 fd ff ff    	lea    eax,[ebx-0x2fc]
3000122a:	50                   	push   eax
3000122b:	68 00 00 00 01       	push   0x1000000
30001230:	e8 15 f9 ff ff       	call   30000b4a <printdI>
30001235:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    return retVal;
30001238:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101
}
3000123b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000123e:	c9                   	leave  
3000123f:	c3                   	ret    

30001240 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
30001240:	55                   	push   ebp
30001241:	89 e5                	mov    ebp,esp
30001243:	83 ec 08             	sub    esp,0x8
30001246:	e8 3c 19 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
3000124b:	05 ed 33 00 00       	add    eax,0x33ed
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:105
    return mallocI(size);
30001250:	83 ec 0c             	sub    esp,0xc
30001253:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001256:	e8 11 fe ff ff       	call   3000106c <mallocI>
3000125b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
}
3000125e:	c9                   	leave  
3000125f:	c3                   	ret    

30001260 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109

__attribute__((visibility("default"))) void free(void* fpointer)
{
30001260:	55                   	push   ebp
30001261:	89 e5                	mov    ebp,esp
30001263:	e8 1f 19 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001268:	05 d0 33 00 00       	add    eax,0x33d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110
    freeI(fpointer);
3000126d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001270:	e8 be fd ff ff       	call   30001033 <freeI>
30001275:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:111
}
30001278:	90                   	nop
30001279:	c9                   	leave  
3000127a:	c3                   	ret    

3000127b <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:114

void malloc_cleanup()
{
3000127b:	55                   	push   ebp
3000127c:	89 e5                	mov    ebp,esp
3000127e:	53                   	push   ebx
3000127f:	83 ec 04             	sub    esp,0x4
30001282:	e8 00 19 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001287:	05 b1 33 00 00       	add    eax,0x33b1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    do_syscall1(SYSCALL_FREE, heapBase);
3000128c:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
30001292:	8b 12                	mov    edx,DWORD PTR [edx]
30001294:	83 ec 08             	sub    esp,0x8
30001297:	52                   	push   edx
30001298:	68 64 01 00 00       	push   0x164
3000129d:	89 c3                	mov    ebx,eax
3000129f:	e8 c4 f6 ff ff       	call   30000968 <do_syscall1>
300012a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:116
300012a7:	90                   	nop
300012a8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300012ab:	c9                   	leave  
300012ac:	c3                   	ret    
300012ad:	66 90                	xchg   ax,ax
300012af:	90                   	nop

300012b0 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:11
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
300012b0:	55                   	push   ebp
300012b1:	89 e5                	mov    ebp,esp
300012b3:	83 ec 20             	sub    esp,0x20
300012b6:	e8 cc 18 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300012bb:	05 7d 33 00 00       	add    eax,0x337d
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:14
    bool dw,dd;
    
    dd=n%4==0;
300012c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012c3:	83 e0 03             	and    eax,0x3
300012c6:	85 c0                	test   eax,eax
300012c8:	0f 94 c0             	sete   al
300012cb:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    dw=n%2==0;
300012ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012d1:	83 e0 01             	and    eax,0x1
300012d4:	85 c0                	test   eax,eax
300012d6:	0f 94 c0             	sete   al
300012d9:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    if (dd)
300012dc:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
300012e0:	74 7d                	je     3000135f <memcpy+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:18
    {
        n /=4;
300012e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012e5:	c1 e8 02             	shr    eax,0x2
300012e8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
        const uint32_t *f = src;
300012eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300012ee:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        uint32_t *t = dest;
300012f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300012f4:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:22

        if (f < t) {
300012f7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300012fa:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
300012fd:	73 4b                	jae    3000134a <memcpy+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23
                f += n;
300012ff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001302:	c1 e0 02             	shl    eax,0x2
30001305:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                t += n;
30001308:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000130b:	c1 e0 02             	shl    eax,0x2
3000130e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                while ( (n)-- > 0)
30001311:	eb 12                	jmp    30001325 <memcpy+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                        *--t = *--f;
30001313:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
30001317:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
3000131b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000131e:	8b 10                	mov    edx,DWORD PTR [eax]
30001320:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001323:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
30001325:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001328:	8d 50 ff             	lea    edx,[eax-0x1]
3000132b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000132e:	85 c0                	test   eax,eax
30001330:	75 e1                	jne    30001313 <memcpy+0x63>
30001332:	eb 23                	jmp    30001357 <memcpy+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
30001334:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001337:	8d 50 04             	lea    edx,[eax+0x4]
3000133a:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
3000133d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001340:	8d 4a 04             	lea    ecx,[edx+0x4]
30001343:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
30001346:	8b 12                	mov    edx,DWORD PTR [edx]
30001348:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:28
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
3000134a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000134d:	8d 50 ff             	lea    edx,[eax-0x1]
30001350:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001353:	85 c0                	test   eax,eax
30001355:	75 dd                	jne    30001334 <memcpy+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *t++ = *f++;
        return dest;
30001357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000135a:	e9 ea 00 00 00       	jmp    30001449 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:32
    }
    else if (dw)
3000135f:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
30001363:	74 79                	je     300013de <memcpy+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:34
    {
        n /=2;
30001365:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001368:	d1 e8                	shr    eax,1
3000136a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
        const uint32_t *f = src;
3000136d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001370:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        uint32_t *t = dest;
30001373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001376:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:38

        if (f < t) {
30001379:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000137c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
3000137f:	73 4b                	jae    300013cc <memcpy+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39
                f += n;
30001381:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001384:	c1 e0 02             	shl    eax,0x2
30001387:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                t += n;
3000138a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000138d:	c1 e0 02             	shl    eax,0x2
30001390:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                while ( (n)-- > 0)
30001393:	eb 12                	jmp    300013a7 <memcpy+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                        *--t = *--f;
30001395:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
30001399:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
3000139d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300013a0:	8b 10                	mov    edx,DWORD PTR [eax]
300013a2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300013a5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
300013a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300013aa:	8d 50 ff             	lea    edx,[eax-0x1]
300013ad:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300013b0:	85 c0                	test   eax,eax
300013b2:	75 e1                	jne    30001395 <memcpy+0xe5>
300013b4:	eb 23                	jmp    300013d9 <memcpy+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
300013b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300013b9:	8d 50 04             	lea    edx,[eax+0x4]
300013bc:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
300013bf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300013c2:	8d 4a 04             	lea    ecx,[edx+0x4]
300013c5:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
300013c8:	8b 12                	mov    edx,DWORD PTR [edx]
300013ca:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:44
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
300013cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300013cf:	8d 50 ff             	lea    edx,[eax-0x1]
300013d2:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300013d5:	85 c0                	test   eax,eax
300013d7:	75 dd                	jne    300013b6 <memcpy+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *t++ = *f++;
        return dest;
300013d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013dc:	eb 6b                	jmp    30001449 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:50
    }
    else
    {
        const char *f = src;
300013de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
        char *t = dest;
300013e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013e7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:53

        if (f < t) {
300013ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300013ed:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
300013f0:	73 47                	jae    30001439 <memcpy+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54
                f += n;
300013f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300013f5:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                t += n;
300013f8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300013fb:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                while (n-- > 0)
300013fe:	eb 13                	jmp    30001413 <memcpy+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                        *--t = *--f;
30001400:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
30001404:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
30001408:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000140b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
3000140e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001411:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
30001413:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001416:	8d 50 ff             	lea    edx,[eax-0x1]
30001419:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000141c:	85 c0                	test   eax,eax
3000141e:	75 e0                	jne    30001400 <memcpy+0x150>
30001420:	eb 24                	jmp    30001446 <memcpy+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
30001422:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001425:	8d 50 01             	lea    edx,[eax+0x1]
30001428:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
3000142b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000142e:	8d 4a 01             	lea    ecx,[edx+0x1]
30001431:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
30001434:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001437:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:59
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
30001439:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000143c:	8d 50 ff             	lea    edx,[eax-0x1]
3000143f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001442:	85 c0                	test   eax,eax
30001444:	75 dc                	jne    30001422 <memcpy+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *t++ = *f++;
        return dest;
30001446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:63
    }
}
30001449:	c9                   	leave  
3000144a:	c3                   	ret    
3000144b:	90                   	nop

3000144c <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
3000144c:	55                   	push   ebp
3000144d:	89 e5                	mov    ebp,esp
3000144f:	83 ec 20             	sub    esp,0x20
30001452:	e8 30 17 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001457:	05 e1 31 00 00       	add    eax,0x31e1
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
3000145c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000145f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
30001462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001465:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
30001468:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000146b:	c1 e0 10             	shl    eax,0x10
3000146e:	89 c2                	mov    edx,eax
30001470:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001473:	c1 e0 08             	shl    eax,0x8
30001476:	09 c2                	or     edx,eax
30001478:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000147b:	09 d0                	or     eax,edx
3000147d:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
30001481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001484:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
30001487:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000148a:	c1 e0 18             	shl    eax,0x18
3000148d:	89 c2                	mov    edx,eax
3000148f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001492:	c1 e0 10             	shl    eax,0x10
30001495:	09 c2                	or     edx,eax
30001497:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000149a:	c1 e0 08             	shl    eax,0x8
3000149d:	09 d0                	or     eax,edx
3000149f:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
300014a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
300014a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300014a8:	83 e0 03             	and    eax,0x3
300014ab:	85 c0                	test   eax,eax
300014ad:	75 1c                	jne    300014cb <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
300014af:	eb 0e                	jmp    300014bf <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
300014b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300014b4:	8d 50 04             	lea    edx,[eax+0x4]
300014b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300014ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300014bd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
300014bf:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
300014c3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300014c7:	75 e8                	jne    300014b1 <memsetI+0x65>
300014c9:	eb 43                	jmp    3000150e <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
300014cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300014ce:	83 e0 01             	and    eax,0x1
300014d1:	85 c0                	test   eax,eax
300014d3:	75 2c                	jne    30001501 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
300014d5:	eb 10                	jmp    300014e7 <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
300014d7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
300014da:	8d 50 02             	lea    edx,[eax+0x2]
300014dd:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
300014e0:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
300014e4:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
300014e7:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
300014eb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300014ef:	75 e6                	jne    300014d7 <memsetI+0x8b>
300014f1:	eb 1b                	jmp    3000150e <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
300014f3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300014f6:	8d 50 01             	lea    edx,[eax+0x1]
300014f9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300014fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300014ff:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
30001501:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001504:	8d 50 ff             	lea    edx,[eax-0x1]
30001507:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000150a:	85 c0                	test   eax,eax
3000150c:	75 e5                	jne    300014f3 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
3000150e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
30001511:	c9                   	leave  
30001512:	c3                   	ret    

30001513 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
30001513:	55                   	push   ebp
30001514:	89 e5                	mov    ebp,esp
30001516:	e8 6c 16 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
3000151b:	05 1d 31 00 00       	add    eax,0x311d
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
30001520:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30001523:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001526:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001529:	e8 1e ff ff ff       	call   3000144c <memsetI>
3000152e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
30001531:	c9                   	leave  
30001532:	c3                   	ret    
30001533:	90                   	nop

30001534 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:10
 */
#include "libChrisOS.h"
#include "types.h"

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset) //memory map pages either to a file or anonymously
{
30001534:	55                   	push   ebp
30001535:	89 e5                	mov    ebp,esp
30001537:	e8 4b 16 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
3000153c:	05 fc 30 00 00       	add    eax,0x30fc
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:11
    return NULL;
30001541:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:12
}
30001546:	5d                   	pop    ebp
30001547:	c3                   	ret    

30001548 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
30001548:	55                   	push   ebp
30001549:	89 e5                	mov    ebp,esp
3000154b:	53                   	push   ebx
3000154c:	83 ec 04             	sub    esp,0x4
3000154f:	e8 33 16 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001554:	05 e4 30 00 00       	add    eax,0x30e4
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
30001559:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000155c:	83 ec 08             	sub    esp,0x8
3000155f:	52                   	push   edx
30001560:	6a 07                	push   0x7
30001562:	89 c3                	mov    ebx,eax
30001564:	e8 ff f3 ff ff       	call   30000968 <do_syscall1>
30001569:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:13
3000156c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000156f:	c9                   	leave  
30001570:	c3                   	ret    
30001571:	66 90                	xchg   ax,ax
30001573:	90                   	nop

30001574 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:68
    return;
}
*/
//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
30001574:	55                   	push   ebp
30001575:	89 e5                	mov    ebp,esp
30001577:	53                   	push   ebx
30001578:	83 ec 14             	sub    esp,0x14
3000157b:	e8 30 16 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
30001580:	81 c3 b8 30 00 00    	add    ebx,0x30b8
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:70
    char buff[5];
    int buffPtr=0;
30001586:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:72

    memsetI(buff,0,10);
3000158d:	83 ec 04             	sub    esp,0x4
30001590:	6a 0a                	push   0xa
30001592:	6a 00                	push   0x0
30001594:	8d 45 ef             	lea    eax,[ebp-0x11]
30001597:	50                   	push   eax
30001598:	e8 af fe ff ff       	call   3000144c <memsetI>
3000159d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
300015a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300015a3:	8d 50 01             	lea    edx,[eax+0x1]
300015a6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300015a9:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '[';
300015ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300015b1:	8d 50 01             	lea    edx,[eax+0x1]
300015b4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300015b7:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = '0';
300015bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300015bf:	8d 50 01             	lea    edx,[eax+0x1]
300015c2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300015c5:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr++] = 'K';
300015ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300015cd:	8d 50 01             	lea    edx,[eax+0x1]
300015d0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300015d3:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    buff[buffPtr] = '\0';
300015d8:	8d 55 ef             	lea    edx,[ebp-0x11]
300015db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300015de:	01 d0                	add    eax,edx
300015e0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:80
    printI(buff);
300015e3:	83 ec 0c             	sub    esp,0xc
300015e6:	8d 45 ef             	lea    eax,[ebp-0x11]
300015e9:	50                   	push   eax
300015ea:	e8 27 f5 ff ff       	call   30000b16 <printI>
300015ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
    
    return;
300015f2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:83
}
300015f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300015f6:	c9                   	leave  
300015f7:	c3                   	ret    

300015f8 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
300015f8:	55                   	push   ebp
300015f9:	89 e5                	mov    ebp,esp
300015fb:	53                   	push   ebx
300015fc:	83 ec 04             	sub    esp,0x4
300015ff:	e8 ac 15 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
30001604:	81 c3 34 30 00 00    	add    ebx,0x3034
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
3000160a:	83 ec 0c             	sub    esp,0xc
3000160d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001610:	e8 b4 02 00 00       	call   300018c9 <strlenI>
30001615:	83 c4 10             	add    esp,0x10
30001618:	89 c2                	mov    edx,eax
3000161a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000161d:	01 d0                	add    eax,edx
3000161f:	83 ec 08             	sub    esp,0x8
30001622:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001625:	50                   	push   eax
30001626:	e8 59 01 00 00       	call   30001784 <strcpyI>
3000162b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
3000162e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
30001631:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001634:	c9                   	leave  
30001635:	c3                   	ret    

30001636 <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
30001636:	55                   	push   ebp
30001637:	89 e5                	mov    ebp,esp
30001639:	53                   	push   ebx
3000163a:	83 ec 04             	sub    esp,0x4
3000163d:	e8 6e 15 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
30001642:	81 c3 f6 2f 00 00    	add    ebx,0x2ff6
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
30001648:	83 ec 0c             	sub    esp,0xc
3000164b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000164e:	e8 76 02 00 00       	call   300018c9 <strlenI>
30001653:	83 c4 10             	add    esp,0x10
30001656:	89 c2                	mov    edx,eax
30001658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000165b:	01 d0                	add    eax,edx
3000165d:	83 ec 08             	sub    esp,0x8
30001660:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001663:	50                   	push   eax
30001664:	e8 1b 01 00 00       	call   30001784 <strcpyI>
30001669:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
3000166c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
3000166f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001672:	c9                   	leave  
30001673:	c3                   	ret    

30001674 <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
30001674:	55                   	push   ebp
30001675:	89 e5                	mov    ebp,esp
30001677:	83 ec 10             	sub    esp,0x10
3000167a:	e8 08 15 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
3000167f:	05 b9 2f 00 00       	add    eax,0x2fb9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
30001684:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
3000168b:	eb 04                	jmp    30001691 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
3000168d:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
30001691:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001697:	01 d0                	add    eax,edx
30001699:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000169c:	84 c0                	test   al,al
3000169e:	75 ed                	jne    3000168d <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
300016a0:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
300016a7:	eb 1d                	jmp    300016c6 <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
300016a9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300016ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300016af:	01 c2                	add    edx,eax
300016b1:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
300016b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300016b7:	01 c8                	add    eax,ecx
300016b9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300016bc:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
300016be:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
300016c2:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
300016c6:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300016c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300016cc:	01 d0                	add    eax,edx
300016ce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300016d1:	84 c0                	test   al,al
300016d3:	75 d4                	jne    300016a9 <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
300016d5:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300016d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300016db:	01 d0                	add    eax,edx
300016dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
300016e0:	90                   	nop
300016e1:	c9                   	leave  
300016e2:	c3                   	ret    
300016e3:	90                   	nop

300016e4 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
300016e4:	55                   	push   ebp
300016e5:	89 e5                	mov    ebp,esp
300016e7:	56                   	push   esi
300016e8:	53                   	push   ebx
300016e9:	83 ec 10             	sub    esp,0x10
300016ec:	e8 96 14 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300016f1:	05 47 2f 00 00       	add    eax,0x2f47
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
300016f6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
300016f9:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
300016fc:	89 d8                	mov    eax,ebx
300016fe:	8d 58 01             	lea    ebx,[eax+0x1]
30001701:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001704:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
30001707:	89 f0                	mov    eax,esi
30001709:	8d 70 01             	lea    esi,[eax+0x1]
3000170c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000170f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
30001712:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
30001716:	75 0e                	jne    30001726 <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
30001718:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
3000171c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
30001720:	29 c2                	sub    edx,eax
30001722:	89 d0                	mov    eax,edx
30001724:	eb 15                	jmp    3000173b <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
30001726:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
3000172a:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
3000172d:	74 cd                	je     300016fc <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
3000172f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
30001733:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
30001737:	29 c2                	sub    edx,eax
30001739:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
3000173b:	83 c4 10             	add    esp,0x10
3000173e:	5b                   	pop    ebx
3000173f:	5e                   	pop    esi
30001740:	5d                   	pop    ebp
30001741:	c3                   	ret    
30001742:	66 90                	xchg   ax,ax

30001744 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
30001744:	55                   	push   ebp
30001745:	89 e5                	mov    ebp,esp
30001747:	83 ec 10             	sub    esp,0x10
3000174a:	e8 38 14 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
3000174f:	05 e9 2e 00 00       	add    eax,0x2ee9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
30001754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001757:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
3000175a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
3000175b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000175e:	8d 50 01             	lea    edx,[eax+0x1]
30001761:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001764:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001767:	8d 4a 01             	lea    ecx,[edx+0x1]
3000176a:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
3000176d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001770:	88 10                	mov    BYTE PTR [eax],dl
30001772:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001775:	84 c0                	test   al,al
30001777:	75 e2                	jne    3000175b <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
30001779:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000177c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
3000177f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
30001782:	c9                   	leave  
30001783:	c3                   	ret    

30001784 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
30001784:	55                   	push   ebp
30001785:	89 e5                	mov    ebp,esp
30001787:	83 ec 10             	sub    esp,0x10
3000178a:	e8 f8 13 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
3000178f:	05 a9 2e 00 00       	add    eax,0x2ea9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
30001794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001797:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
3000179a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
3000179b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000179e:	8d 50 01             	lea    edx,[eax+0x1]
300017a1:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300017a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300017a7:	8d 4a 01             	lea    ecx,[edx+0x1]
300017aa:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300017ad:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300017b0:	88 10                	mov    BYTE PTR [eax],dl
300017b2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300017b5:	84 c0                	test   al,al
300017b7:	75 e2                	jne    3000179b <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
300017b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300017bc:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
300017bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
300017c2:	c9                   	leave  
300017c3:	c3                   	ret    

300017c4 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
300017c4:	55                   	push   ebp
300017c5:	89 e5                	mov    ebp,esp
300017c7:	83 ec 10             	sub    esp,0x10
300017ca:	e8 b8 13 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300017cf:	05 69 2e 00 00       	add    eax,0x2e69
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
300017d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300017d7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
300017da:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
300017db:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300017de:	8d 50 01             	lea    edx,[eax+0x1]
300017e1:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300017e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300017e7:	8d 4a 01             	lea    ecx,[edx+0x1]
300017ea:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300017ed:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300017f0:	88 10                	mov    BYTE PTR [eax],dl
300017f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300017f5:	84 c0                	test   al,al
300017f7:	74 0d                	je     30001806 <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
300017f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300017fc:	8d 50 ff             	lea    edx,[eax-0x1]
300017ff:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001802:	85 c0                	test   eax,eax
30001804:	75 d5                	jne    300017db <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
30001806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
30001809:	c9                   	leave  
3000180a:	c3                   	ret    
3000180b:	90                   	nop

3000180c <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
3000180c:	55                   	push   ebp
3000180d:	89 e5                	mov    ebp,esp
3000180f:	83 ec 04             	sub    esp,0x4
30001812:	e8 70 13 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001817:	05 21 2e 00 00       	add    eax,0x2e21
3000181c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000181f:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
30001822:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
30001826:	7e 0d                	jle    30001835 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
30001828:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
3000182c:	7f 07                	jg     30001835 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
3000182e:	b8 01 00 00 00       	mov    eax,0x1
30001833:	eb 05                	jmp    3000183a <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
30001835:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
3000183a:	c9                   	leave  
3000183b:	c3                   	ret    

3000183c <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
3000183c:	55                   	push   ebp
3000183d:	89 e5                	mov    ebp,esp
3000183f:	83 ec 10             	sub    esp,0x10
30001842:	e8 40 13 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001847:	05 f1 2d 00 00       	add    eax,0x2df1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
3000184c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
30001853:	eb 27                	jmp    3000187c <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
30001855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001858:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000185b:	89 c2                	mov    edx,eax
3000185d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001860:	01 d0                	add    eax,edx
30001862:	0f be c0             	movsx  eax,al
30001865:	50                   	push   eax
30001866:	e8 a1 ff ff ff       	call   3000180c <check_digit>
3000186b:	83 c4 04             	add    esp,0x4
3000186e:	83 f0 01             	xor    eax,0x1
30001871:	84 c0                	test   al,al
30001873:	74 07                	je     3000187c <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
30001875:	b8 00 00 00 00       	mov    eax,0x0
3000187a:	eb 17                	jmp    30001893 <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
3000187c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000187f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001882:	0f be d0             	movsx  edx,al
30001885:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001888:	01 d0                	add    eax,edx
3000188a:	85 c0                	test   eax,eax
3000188c:	75 c7                	jne    30001855 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
3000188e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
30001893:	c9                   	leave  
30001894:	c3                   	ret    
30001895:	66 90                	xchg   ax,ax
30001897:	90                   	nop

30001898 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
30001898:	55                   	push   ebp
30001899:	89 e5                	mov    ebp,esp
3000189b:	83 ec 10             	sub    esp,0x10
3000189e:	e8 e4 12 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300018a3:	05 95 2d 00 00       	add    eax,0x2d95
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
300018a8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
300018af:	eb 04                	jmp    300018b5 <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
300018b1:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
300018b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300018b8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300018bb:	01 d0                	add    eax,edx
300018bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018c0:	84 c0                	test   al,al
300018c2:	75 ed                	jne    300018b1 <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
300018c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
300018c7:	c9                   	leave  
300018c8:	c3                   	ret    

300018c9 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
300018c9:	55                   	push   ebp
300018ca:	89 e5                	mov    ebp,esp
300018cc:	83 ec 10             	sub    esp,0x10
300018cf:	e8 b3 12 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300018d4:	05 64 2d 00 00       	add    eax,0x2d64
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
300018d9:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
300018e0:	eb 04                	jmp    300018e6 <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
300018e2:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
300018e6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300018e9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300018ec:	01 d0                	add    eax,edx
300018ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018f1:	84 c0                	test   al,al
300018f3:	75 ed                	jne    300018e2 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
300018f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
300018f8:	c9                   	leave  
300018f9:	c3                   	ret    
300018fa:	66 90                	xchg   ax,ax

300018fc <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
300018fc:	55                   	push   ebp
300018fd:	89 e5                	mov    ebp,esp
300018ff:	e8 83 12 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001904:	05 34 2d 00 00       	add    eax,0x2d34
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
30001909:	eb 4b                	jmp    30001956 <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
3000190b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000190e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001911:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001914:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001917:	38 c2                	cmp    dl,al
30001919:	74 1e                	je     30001939 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
3000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000191e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001921:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001924:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001927:	38 c2                	cmp    dl,al
30001929:	73 07                	jae    30001932 <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
3000192b:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001930:	eb 2f                	jmp    30001961 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
30001932:	b8 01 00 00 00       	mov    eax,0x1
30001937:	eb 28                	jmp    30001961 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
30001939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000193c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000193f:	84 c0                	test   al,al
30001941:	75 07                	jne    3000194a <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
30001943:	b8 00 00 00 00       	mov    eax,0x0
30001948:	eb 17                	jmp    30001961 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
3000194a:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
3000194e:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
30001952:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
30001956:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000195a:	75 af                	jne    3000190b <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
3000195c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
30001961:	5d                   	pop    ebp
30001962:	c3                   	ret    

30001963 <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
30001963:	55                   	push   ebp
30001964:	89 e5                	mov    ebp,esp
30001966:	e8 1c 12 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
3000196b:	05 cd 2c 00 00       	add    eax,0x2ccd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
30001970:	eb 4b                	jmp    300019bd <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
30001972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001975:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001978:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000197b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000197e:	38 c2                	cmp    dl,al
30001980:	74 1e                	je     300019a0 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
30001982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001985:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001988:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000198b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000198e:	38 c2                	cmp    dl,al
30001990:	73 07                	jae    30001999 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
30001992:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001997:	eb 2f                	jmp    300019c8 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
30001999:	b8 01 00 00 00       	mov    eax,0x1
3000199e:	eb 28                	jmp    300019c8 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
300019a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300019a3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019a6:	84 c0                	test   al,al
300019a8:	75 07                	jne    300019b1 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
300019aa:	b8 00 00 00 00       	mov    eax,0x0
300019af:	eb 17                	jmp    300019c8 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
300019b1:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
300019b5:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
300019b9:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
300019bd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300019c1:	75 af                	jne    30001972 <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
300019c3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
300019c8:	5d                   	pop    ebp
300019c9:	c3                   	ret    
300019ca:	66 90                	xchg   ax,ax

300019cc <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
300019cc:	55                   	push   ebp
300019cd:	89 e5                	mov    ebp,esp
300019cf:	83 ec 10             	sub    esp,0x10
300019d2:	e8 b0 11 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300019d7:	05 61 2c 00 00       	add    eax,0x2c61
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
300019dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300019df:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
300019e2:	eb 1b                	jmp    300019ff <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
300019e4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300019e7:	8d 50 01             	lea    edx,[eax+0x1]
300019ea:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300019ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300019f0:	8d 4a 01             	lea    ecx,[edx+0x1]
300019f3:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300019f6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300019f9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
300019fb:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
300019ff:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001a03:	74 1c                	je     30001a21 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
30001a05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001a08:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a0b:	84 c0                	test   al,al
30001a0d:	75 d5                	jne    300019e4 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001a0f:	eb 10                	jmp    30001a21 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
30001a11:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001a14:	8d 50 01             	lea    edx,[eax+0x1]
30001a17:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001a1a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
30001a1d:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001a21:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001a25:	75 ea                	jne    30001a11 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
30001a27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
30001a2a:	c9                   	leave  
30001a2b:	c3                   	ret    

30001a2c <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
30001a2c:	55                   	push   ebp
30001a2d:	89 e5                	mov    ebp,esp
30001a2f:	e8 53 11 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001a34:	05 04 2c 00 00       	add    eax,0x2c04
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
30001a39:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30001a3c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001a3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001a42:	e8 85 ff ff ff       	call   300019cc <strncpyI>
30001a47:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
30001a4a:	c9                   	leave  
30001a4b:	c3                   	ret    

30001a4c <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
30001a4c:	55                   	push   ebp
30001a4d:	89 e5                	mov    ebp,esp
30001a4f:	57                   	push   edi
30001a50:	56                   	push   esi
30001a51:	53                   	push   ebx
30001a52:	83 ec 08             	sub    esp,0x8
30001a55:	e8 2d 11 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001a5a:	05 de 2b 00 00       	add    eax,0x2bde
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
30001a5f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001a62:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
30001a69:	89 f0                	mov    eax,esi
30001a6b:	8d 70 01             	lea    esi,[eax+0x1]
30001a6e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a71:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
30001a74:	83 fb 20             	cmp    ebx,0x20
30001a77:	74 f0                	je     30001a69 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
30001a79:	83 fb 2d             	cmp    ebx,0x2d
30001a7c:	75 14                	jne    30001a92 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
30001a7e:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
30001a85:	89 f0                	mov    eax,esi
30001a87:	8d 70 01             	lea    esi,[eax+0x1]
30001a8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a8d:	0f be d8             	movsx  ebx,al
30001a90:	eb 10                	jmp    30001aa2 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
30001a92:	83 fb 2b             	cmp    ebx,0x2b
30001a95:	75 0b                	jne    30001aa2 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
30001a97:	89 f0                	mov    eax,esi
30001a99:	8d 70 01             	lea    esi,[eax+0x1]
30001a9c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a9f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
30001aa2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001aa6:	74 06                	je     30001aae <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
30001aa8:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001aac:	75 26                	jne    30001ad4 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
30001aae:	83 fb 30             	cmp    ebx,0x30
30001ab1:	75 21                	jne    30001ad4 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001ab3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001ab6:	3c 78                	cmp    al,0x78
30001ab8:	74 07                	je     30001ac1 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
30001aba:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001abd:	3c 58                	cmp    al,0x58
30001abf:	75 13                	jne    30001ad4 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
30001ac1:	8d 46 01             	lea    eax,[esi+0x1]
30001ac4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ac7:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
30001aca:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
30001acd:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
30001ad4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001ad8:	75 14                	jne    30001aee <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
30001ada:	83 fb 30             	cmp    ebx,0x30
30001add:	75 07                	jne    30001ae6 <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
30001adf:	b8 08 00 00 00       	mov    eax,0x8
30001ae4:	eb 05                	jmp    30001aeb <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
30001ae6:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
30001aeb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
30001aee:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001af1:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001af6:	ba 00 00 00 00       	mov    edx,0x0
30001afb:	f7 f1                	div    ecx
30001afd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
30001b00:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001b03:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001b08:	ba 00 00 00 00       	mov    edx,0x0
30001b0d:	f7 f1                	div    ecx
30001b0f:	89 d0                	mov    eax,edx
30001b11:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
30001b13:	bf 00 00 00 00       	mov    edi,0x0
30001b18:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
30001b1d:	8d 43 d0             	lea    eax,[ebx-0x30]
30001b20:	83 f8 09             	cmp    eax,0x9
30001b23:	77 05                	ja     30001b2a <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
30001b25:	83 eb 30             	sub    ebx,0x30
30001b28:	eb 25                	jmp    30001b4f <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
30001b2a:	89 d8                	mov    eax,ebx
30001b2c:	83 c8 20             	or     eax,0x20
30001b2f:	83 e8 61             	sub    eax,0x61
30001b32:	83 f8 19             	cmp    eax,0x19
30001b35:	77 56                	ja     30001b8d <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001b37:	83 fb 40             	cmp    ebx,0x40
30001b3a:	7e 0c                	jle    30001b48 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
30001b3c:	83 fb 5a             	cmp    ebx,0x5a
30001b3f:	7f 07                	jg     30001b48 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
30001b41:	b8 37 00 00 00       	mov    eax,0x37
30001b46:	eb 05                	jmp    30001b4d <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
30001b48:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
30001b4d:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
30001b4f:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001b52:	7d 3c                	jge    30001b90 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001b54:	89 c8                	mov    eax,ecx
30001b56:	85 c0                	test   eax,eax
30001b58:	78 10                	js     30001b6a <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
30001b5a:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001b5d:	77 0b                	ja     30001b6a <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
30001b5f:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001b62:	75 0d                	jne    30001b71 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
30001b64:	89 d0                	mov    eax,edx
30001b66:	39 c3                	cmp    ebx,eax
30001b68:	7e 07                	jle    30001b71 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
30001b6a:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001b6f:	eb 0f                	jmp    30001b80 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
30001b71:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
30001b76:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001b79:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
30001b7c:	89 d8                	mov    eax,ebx
30001b7e:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001b80:	89 f0                	mov    eax,esi
30001b82:	8d 70 01             	lea    esi,[eax+0x1]
30001b85:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b88:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001b8b:	eb 90                	jmp    30001b1d <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001b8d:	90                   	nop
30001b8e:	eb 01                	jmp    30001b91 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
30001b90:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001b91:	89 c8                	mov    eax,ecx
30001b93:	85 c0                	test   eax,eax
30001b95:	79 07                	jns    30001b9e <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
30001b97:	bf ff ff ff ff       	mov    edi,0xffffffff
30001b9c:	eb 08                	jmp    30001ba6 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
30001b9e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001ba2:	74 02                	je     30001ba6 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
30001ba4:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
30001ba6:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001baa:	74 13                	je     30001bbf <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
30001bac:	89 c8                	mov    eax,ecx
30001bae:	85 c0                	test   eax,eax
30001bb0:	74 05                	je     30001bb7 <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
30001bb2:	8d 46 ff             	lea    eax,[esi-0x1]
30001bb5:	eb 03                	jmp    30001bba <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
30001bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
30001bba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001bbd:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
30001bbf:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
30001bc1:	83 c4 08             	add    esp,0x8
30001bc4:	5b                   	pop    ebx
30001bc5:	5e                   	pop    esi
30001bc6:	5f                   	pop    edi
30001bc7:	5d                   	pop    ebp
30001bc8:	c3                   	ret    
30001bc9:	66 90                	xchg   ax,ax
30001bcb:	90                   	nop

30001bcc <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
30001bcc:	55                   	push   ebp
30001bcd:	89 e5                	mov    ebp,esp
30001bcf:	e8 b3 0f 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001bd4:	05 64 2a 00 00       	add    eax,0x2a64
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
30001bd9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001bdf:	01 d0                	add    eax,edx
30001be1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
30001be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
30001be7:	5d                   	pop    ebp
30001be8:	c3                   	ret    
30001be9:	66 90                	xchg   ax,ax
30001beb:	90                   	nop

30001bec <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
30001bec:	55                   	push   ebp
30001bed:	89 e5                	mov    ebp,esp
30001bef:	57                   	push   edi
30001bf0:	56                   	push   esi
30001bf1:	53                   	push   ebx
30001bf2:	83 ec 0c             	sub    esp,0xc
30001bf5:	e8 8d 0f 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001bfa:	05 3e 2a 00 00       	add    eax,0x2a3e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
30001bff:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001c02:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
30001c09:	89 f0                	mov    eax,esi
30001c0b:	8d 70 01             	lea    esi,[eax+0x1]
30001c0e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c11:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
30001c14:	83 fb 20             	cmp    ebx,0x20
30001c17:	74 f0                	je     30001c09 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
30001c19:	83 fb 2d             	cmp    ebx,0x2d
30001c1c:	75 14                	jne    30001c32 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
30001c1e:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
30001c25:	89 f0                	mov    eax,esi
30001c27:	8d 70 01             	lea    esi,[eax+0x1]
30001c2a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c2d:	0f be d8             	movsx  ebx,al
30001c30:	eb 10                	jmp    30001c42 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
30001c32:	83 fb 2b             	cmp    ebx,0x2b
30001c35:	75 0b                	jne    30001c42 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
30001c37:	89 f0                	mov    eax,esi
30001c39:	8d 70 01             	lea    esi,[eax+0x1]
30001c3c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c3f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
30001c42:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001c46:	74 06                	je     30001c4e <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
30001c48:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001c4c:	75 26                	jne    30001c74 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
30001c4e:	83 fb 30             	cmp    ebx,0x30
30001c51:	75 21                	jne    30001c74 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001c53:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001c56:	3c 78                	cmp    al,0x78
30001c58:	74 07                	je     30001c61 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
30001c5a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001c5d:	3c 58                	cmp    al,0x58
30001c5f:	75 13                	jne    30001c74 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
30001c61:	8d 46 01             	lea    eax,[esi+0x1]
30001c64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c67:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
30001c6a:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
30001c6d:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
30001c74:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001c78:	75 14                	jne    30001c8e <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
30001c7a:	83 fb 30             	cmp    ebx,0x30
30001c7d:	75 07                	jne    30001c86 <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
30001c7f:	b8 08 00 00 00       	mov    eax,0x8
30001c84:	eb 05                	jmp    30001c8b <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
30001c86:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
30001c8b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
30001c8e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001c92:	74 07                	je     30001c9b <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
30001c94:	b8 00 00 00 80       	mov    eax,0x80000000
30001c99:	eb 05                	jmp    30001ca0 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
30001c9b:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
30001ca0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001ca3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001ca6:	ba 00 00 00 00       	mov    edx,0x0
30001cab:	f7 f1                	div    ecx
30001cad:	89 d1                	mov    ecx,edx
30001caf:	89 c8                	mov    eax,ecx
30001cb1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
30001cb4:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
30001cb7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001cba:	ba 00 00 00 00       	mov    edx,0x0
30001cbf:	f7 f7                	div    edi
30001cc1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
30001cc4:	bf 00 00 00 00       	mov    edi,0x0
30001cc9:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
30001cce:	8d 43 d0             	lea    eax,[ebx-0x30]
30001cd1:	83 f8 09             	cmp    eax,0x9
30001cd4:	77 05                	ja     30001cdb <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
30001cd6:	83 eb 30             	sub    ebx,0x30
30001cd9:	eb 25                	jmp    30001d00 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
30001cdb:	89 d8                	mov    eax,ebx
30001cdd:	83 c8 20             	or     eax,0x20
30001ce0:	83 e8 61             	sub    eax,0x61
30001ce3:	83 f8 19             	cmp    eax,0x19
30001ce6:	77 55                	ja     30001d3d <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001ce8:	83 fb 40             	cmp    ebx,0x40
30001ceb:	7e 0c                	jle    30001cf9 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
30001ced:	83 fb 5a             	cmp    ebx,0x5a
30001cf0:	7f 07                	jg     30001cf9 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
30001cf2:	b8 37 00 00 00       	mov    eax,0x37
30001cf7:	eb 05                	jmp    30001cfe <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
30001cf9:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
30001cfe:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
30001d00:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001d03:	7d 3b                	jge    30001d40 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001d05:	89 c8                	mov    eax,ecx
30001d07:	85 c0                	test   eax,eax
30001d09:	78 0f                	js     30001d1a <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
30001d0b:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001d0e:	77 0a                	ja     30001d1a <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
30001d10:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001d13:	75 0c                	jne    30001d21 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
30001d15:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
30001d18:	7e 07                	jle    30001d21 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
30001d1a:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001d1f:	eb 0f                	jmp    30001d30 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
30001d21:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
30001d26:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001d29:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
30001d2c:	89 d8                	mov    eax,ebx
30001d2e:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001d30:	89 f0                	mov    eax,esi
30001d32:	8d 70 01             	lea    esi,[eax+0x1]
30001d35:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d38:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001d3b:	eb 91                	jmp    30001cce <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001d3d:	90                   	nop
30001d3e:	eb 01                	jmp    30001d41 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
30001d40:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001d41:	89 c8                	mov    eax,ecx
30001d43:	85 c0                	test   eax,eax
30001d45:	79 16                	jns    30001d5d <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
30001d47:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001d4b:	74 07                	je     30001d54 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
30001d4d:	b8 00 00 00 80       	mov    eax,0x80000000
30001d52:	eb 05                	jmp    30001d59 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
30001d54:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
30001d59:	89 c7                	mov    edi,eax
30001d5b:	eb 08                	jmp    30001d65 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
30001d5d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001d61:	74 02                	je     30001d65 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
30001d63:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
30001d65:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001d69:	74 13                	je     30001d7e <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
30001d6b:	89 c8                	mov    eax,ecx
30001d6d:	85 c0                	test   eax,eax
30001d6f:	74 05                	je     30001d76 <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
30001d71:	8d 46 ff             	lea    eax,[esi-0x1]
30001d74:	eb 03                	jmp    30001d79 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
30001d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
30001d79:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001d7c:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
30001d7e:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
30001d80:	83 c4 0c             	add    esp,0xc
30001d83:	5b                   	pop    ebx
30001d84:	5e                   	pop    esi
30001d85:	5f                   	pop    edi
30001d86:	5d                   	pop    ebp
30001d87:	c3                   	ret    

30001d88 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
30001d88:	55                   	push   ebp
30001d89:	89 e5                	mov    ebp,esp
30001d8b:	53                   	push   ebx
30001d8c:	83 ec 14             	sub    esp,0x14
30001d8f:	e8 f3 0d 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001d94:	05 a4 28 00 00       	add    eax,0x28a4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
30001d99:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001d9c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001d9f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001da2:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001da5:	eb 04                	jmp    30001dab <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
30001da7:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001dab:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001dae:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001db1:	80 fa 20             	cmp    dl,0x20
30001db4:	74 f1                	je     30001da7 <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
30001db6:	83 ec 0c             	sub    esp,0xc
30001db9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001dbc:	89 c3                	mov    ebx,eax
30001dbe:	e8 06 fb ff ff       	call   300018c9 <strlenI>
30001dc3:	83 c4 10             	add    esp,0x10
30001dc6:	8d 50 ff             	lea    edx,[eax-0x1]
30001dc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001dcc:	01 d0                	add    eax,edx
30001dce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
30001dd1:	eb 0c                	jmp    30001ddf <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
30001dd3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001dd6:	8d 50 ff             	lea    edx,[eax-0x1]
30001dd9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
30001ddc:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
30001ddf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001de2:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30001de5:	76 0a                	jbe    30001df1 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
30001de7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001dea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ded:	3c 20                	cmp    al,0x20
30001def:	74 e2                	je     30001dd3 <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
30001df1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001df4:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30001df7:	74 1f                	je     30001e18 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
30001df9:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
30001dfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001dfd:	8d 50 01             	lea    edx,[eax+0x1]
30001e00:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001e03:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001e06:	8d 4a 01             	lea    ecx,[edx+0x1]
30001e09:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
30001e0c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001e0f:	88 10                	mov    BYTE PTR [eax],dl
30001e11:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001e14:	84 c0                	test   al,al
30001e16:	75 e2                	jne    30001dfa <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
30001e18:	90                   	nop
30001e19:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001e1c:	c9                   	leave  
30001e1d:	c3                   	ret    

30001e1e <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
30001e1e:	55                   	push   ebp
30001e1f:	89 e5                	mov    ebp,esp
30001e21:	83 ec 08             	sub    esp,0x8
30001e24:	e8 5e 0d 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001e29:	05 0f 28 00 00       	add    eax,0x280f
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
30001e2e:	83 ec 0c             	sub    esp,0xc
30001e31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001e34:	e8 4f ff ff ff       	call   30001d88 <strtrimI>
30001e39:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
30001e3c:	c9                   	leave  
30001e3d:	c3                   	ret    
30001e3e:	66 90                	xchg   ax,ax

30001e40 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strstrI(char* string, char* substring)
{
30001e40:	55                   	push   ebp
30001e41:	89 e5                	mov    ebp,esp
30001e43:	56                   	push   esi
30001e44:	53                   	push   ebx
30001e45:	e8 3d 0d 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001e4a:	05 ee 27 00 00       	add    eax,0x27ee
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
30001e4f:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    if (*b == 0) {
30001e52:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001e55:	84 c0                	test   al,al
30001e57:	75 42                	jne    30001e9b <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
	return string;
30001e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e5c:	eb 4c                	jmp    30001eaa <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
30001e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e61:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001e64:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001e67:	38 c2                	cmp    dl,al
30001e69:	75 2b                	jne    30001e96 <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
	    continue;
	}
	a = string;
30001e6b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	while (1) {
	    if (*b == 0) {
30001e6e:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001e71:	84 c0                	test   al,al
30001e73:	75 05                	jne    30001e7a <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
		return string;
30001e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e78:	eb 30                	jmp    30001eaa <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	    }
	    if (*a++ != *b++) {
30001e7a:	89 f0                	mov    eax,esi
30001e7c:	8d 70 01             	lea    esi,[eax+0x1]
30001e7f:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001e82:	89 d8                	mov    eax,ebx
30001e84:	8d 58 01             	lea    ebx,[eax+0x1]
30001e87:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001e8a:	38 c2                	cmp    dl,al
30001e8c:	75 02                	jne    30001e90 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
		break;
	    }
	}
30001e8e:	eb de                	jmp    30001e6e <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
30001e90:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
	}
	b = substring;
30001e91:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30001e94:	eb 01                	jmp    30001e97 <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
30001e96:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
30001e97:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64 (discriminator 1)
30001e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e9e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ea1:	84 c0                	test   al,al
30001ea3:	75 b9                	jne    30001e5e <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
30001ea5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
}
30001eaa:	5b                   	pop    ebx
30001eab:	5e                   	pop    esi
30001eac:	5d                   	pop    ebp
30001ead:	c3                   	ret    

30001eae <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83

VISIBLE char* strstr(char* string, char* substring)
{
30001eae:	55                   	push   ebp
30001eaf:	89 e5                	mov    ebp,esp
30001eb1:	e8 d1 0c 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001eb6:	05 82 27 00 00       	add    eax,0x2782
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
    return strstrI(string, substring);
30001ebb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001ebe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001ec1:	e8 7a ff ff ff       	call   30001e40 <strstrI>
30001ec6:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
30001ec9:	c9                   	leave  
30001eca:	c3                   	ret    
30001ecb:	90                   	nop

30001ecc <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:23
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
30001ecc:	55                   	push   ebp
30001ecd:	89 e5                	mov    ebp,esp
30001ecf:	56                   	push   esi
30001ed0:	53                   	push   ebx
30001ed1:	83 ec 10             	sub    esp,0x10
30001ed4:	e8 ae 0c 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30001ed9:	05 5f 27 00 00       	add    eax,0x275f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
    uint32_t retVal=0;
30001ede:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    GET_TICKS(retVal);
30001ee5:	b8 70 01 00 00       	mov    eax,0x170
30001eea:	bb 00 00 00 00       	mov    ebx,0x0
30001eef:	b9 00 00 00 00       	mov    ecx,0x0
30001ef4:	ba 00 00 00 00       	mov    edx,0x0
30001ef9:	be 00 00 00 00       	mov    esi,0x0
30001efe:	e8 fc ff ff ff       	call   30001eff <getticks+0x33>
30001f03:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    return (time_t)retVal;
30001f06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
}
30001f09:	83 c4 10             	add    esp,0x10
30001f0c:	5b                   	pop    ebx
30001f0d:	5e                   	pop    esi
30001f0e:	5d                   	pop    ebp
30001f0f:	c3                   	ret    

30001f10 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
30001f10:	55                   	push   ebp
30001f11:	89 e5                	mov    ebp,esp
30001f13:	53                   	push   ebx
30001f14:	83 ec 10             	sub    esp,0x10
30001f17:	e8 94 0c 00 00       	call   30002bb0 <__x86.get_pc_thunk.bx>
30001f1c:	81 c3 1c 27 00 00    	add    ebx,0x271c
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32
  time_t time = *timer;
30001f22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001f25:	8b 00                	mov    eax,DWORD PTR [eax]
30001f27:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:34
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
30001f2a:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36

  dayclock = (unsigned long) time % SECS_DAY;
30001f31:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
30001f34:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001f39:	89 c8                	mov    eax,ecx
30001f3b:	f7 e2                	mul    edx
30001f3d:	89 d0                	mov    eax,edx
30001f3f:	c1 e8 10             	shr    eax,0x10
30001f42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001f45:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001f48:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30001f4e:	29 c1                	sub    ecx,eax
30001f50:	89 c8                	mov    eax,ecx
30001f52:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37
  dayno = (unsigned long) time / SECS_DAY;
30001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001f58:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001f5d:	f7 e2                	mul    edx
30001f5f:	89 d0                	mov    eax,edx
30001f61:	c1 e8 10             	shr    eax,0x10
30001f64:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:39

  tmbuf->tm_sec = dayclock % 60;
30001f67:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
30001f6a:	ba 89 88 88 88       	mov    edx,0x88888889
30001f6f:	89 c8                	mov    eax,ecx
30001f71:	f7 e2                	mul    edx
30001f73:	89 d0                	mov    eax,edx
30001f75:	c1 e8 05             	shr    eax,0x5
30001f78:	89 c2                	mov    edx,eax
30001f7a:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30001f81:	89 c2                	mov    edx,eax
30001f83:	89 d0                	mov    eax,edx
30001f85:	c1 e0 04             	shl    eax,0x4
30001f88:	29 d0                	sub    eax,edx
30001f8a:	29 c1                	sub    ecx,eax
30001f8c:	89 c8                	mov    eax,ecx
30001f8e:	89 c2                	mov    edx,eax
30001f90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001f93:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40
  tmbuf->tm_min = (dayclock % 3600) / 60;
30001f95:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
30001f98:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001f9d:	89 c8                	mov    eax,ecx
30001f9f:	f7 e2                	mul    edx
30001fa1:	89 d0                	mov    eax,edx
30001fa3:	c1 e8 0b             	shr    eax,0xb
30001fa6:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
30001fac:	29 c1                	sub    ecx,eax
30001fae:	89 c8                	mov    eax,ecx
30001fb0:	ba 89 88 88 88       	mov    edx,0x88888889
30001fb5:	f7 e2                	mul    edx
30001fb7:	89 d0                	mov    eax,edx
30001fb9:	c1 e8 05             	shr    eax,0x5
30001fbc:	89 c2                	mov    edx,eax
30001fbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001fc1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_hour = dayclock / 3600;
30001fc4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001fc7:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001fcc:	f7 e2                	mul    edx
30001fce:	89 d0                	mov    eax,edx
30001fd0:	c1 e8 0b             	shr    eax,0xb
30001fd3:	89 c2                	mov    edx,eax
30001fd5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001fd8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
30001fdb:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001fde:	8d 48 04             	lea    ecx,[eax+0x4]
30001fe1:	ba 25 49 92 24       	mov    edx,0x24924925
30001fe6:	89 c8                	mov    eax,ecx
30001fe8:	f7 e2                	mul    edx
30001fea:	89 c8                	mov    eax,ecx
30001fec:	29 d0                	sub    eax,edx
30001fee:	d1 e8                	shr    eax,1
30001ff0:	01 d0                	add    eax,edx
30001ff2:	c1 e8 02             	shr    eax,0x2
30001ff5:	89 c2                	mov    edx,eax
30001ff7:	c1 e2 03             	shl    edx,0x3
30001ffa:	29 c2                	sub    edx,eax
30001ffc:	89 c8                	mov    eax,ecx
30001ffe:	29 d0                	sub    eax,edx
30002000:	89 c2                	mov    edx,eax
30002002:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002005:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30002008:	eb 66                	jmp    30002070 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
    dayno -= YEARSIZE(year);
3000200a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000200d:	83 e0 03             	and    eax,0x3
30002010:	85 c0                	test   eax,eax
30002012:	75 50                	jne    30002064 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
30002014:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002017:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000201c:	89 c8                	mov    eax,ecx
3000201e:	f7 ea                	imul   edx
30002020:	c1 fa 05             	sar    edx,0x5
30002023:	89 c8                	mov    eax,ecx
30002025:	c1 f8 1f             	sar    eax,0x1f
30002028:	29 c2                	sub    edx,eax
3000202a:	89 d0                	mov    eax,edx
3000202c:	6b c0 64             	imul   eax,eax,0x64
3000202f:	29 c1                	sub    ecx,eax
30002031:	89 c8                	mov    eax,ecx
30002033:	85 c0                	test   eax,eax
30002035:	75 26                	jne    3000205d <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
30002037:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
3000203a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000203f:	89 c8                	mov    eax,ecx
30002041:	f7 ea                	imul   edx
30002043:	c1 fa 07             	sar    edx,0x7
30002046:	89 c8                	mov    eax,ecx
30002048:	c1 f8 1f             	sar    eax,0x1f
3000204b:	29 c2                	sub    edx,eax
3000204d:	89 d0                	mov    eax,edx
3000204f:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002055:	29 c1                	sub    ecx,eax
30002057:	89 c8                	mov    eax,ecx
30002059:	85 c0                	test   eax,eax
3000205b:	75 07                	jne    30002064 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
3000205d:	b8 6e 01 00 00       	mov    eax,0x16e
30002062:	eb 05                	jmp    30002069 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
30002064:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
30002069:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
    year++;
3000206c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30002070:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30002073:	83 e0 03             	and    eax,0x3
30002076:	85 c0                	test   eax,eax
30002078:	75 50                	jne    300020ca <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 1)
3000207a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
3000207d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002082:	89 c8                	mov    eax,ecx
30002084:	f7 ea                	imul   edx
30002086:	c1 fa 05             	sar    edx,0x5
30002089:	89 c8                	mov    eax,ecx
3000208b:	c1 f8 1f             	sar    eax,0x1f
3000208e:	29 c2                	sub    edx,eax
30002090:	89 d0                	mov    eax,edx
30002092:	6b c0 64             	imul   eax,eax,0x64
30002095:	29 c1                	sub    ecx,eax
30002097:	89 c8                	mov    eax,ecx
30002099:	85 c0                	test   eax,eax
3000209b:	75 26                	jne    300020c3 <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 4)
3000209d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300020a0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300020a5:	89 c8                	mov    eax,ecx
300020a7:	f7 ea                	imul   edx
300020a9:	c1 fa 07             	sar    edx,0x7
300020ac:	89 c8                	mov    eax,ecx
300020ae:	c1 f8 1f             	sar    eax,0x1f
300020b1:	29 c2                	sub    edx,eax
300020b3:	89 d0                	mov    eax,edx
300020b5:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300020bb:	29 c1                	sub    ecx,eax
300020bd:	89 c8                	mov    eax,ecx
300020bf:	85 c0                	test   eax,eax
300020c1:	75 07                	jne    300020ca <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 5)
300020c3:	b8 6e 01 00 00       	mov    eax,0x16e
300020c8:	eb 05                	jmp    300020cf <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 6)
300020ca:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 8)
300020cf:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
300020d2:	0f 86 32 ff ff ff    	jbe    3000200a <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
300020d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300020db:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
300020e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020e4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
  tmbuf->tm_yday = dayno;
300020e7:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300020ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020ed:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_mon = 0;
300020f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020f3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
300020fa:	e9 89 00 00 00       	jmp    30002188 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
300020ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30002102:	83 e0 03             	and    eax,0x3
30002105:	85 c0                	test   eax,eax
30002107:	75 50                	jne    30002159 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
30002109:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
3000210c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002111:	89 c8                	mov    eax,ecx
30002113:	f7 ea                	imul   edx
30002115:	c1 fa 05             	sar    edx,0x5
30002118:	89 c8                	mov    eax,ecx
3000211a:	c1 f8 1f             	sar    eax,0x1f
3000211d:	29 c2                	sub    edx,eax
3000211f:	89 d0                	mov    eax,edx
30002121:	6b c0 64             	imul   eax,eax,0x64
30002124:	29 c1                	sub    ecx,eax
30002126:	89 c8                	mov    eax,ecx
30002128:	85 c0                	test   eax,eax
3000212a:	75 26                	jne    30002152 <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
3000212c:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
3000212f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002134:	89 c8                	mov    eax,ecx
30002136:	f7 ea                	imul   edx
30002138:	c1 fa 07             	sar    edx,0x7
3000213b:	89 c8                	mov    eax,ecx
3000213d:	c1 f8 1f             	sar    eax,0x1f
30002140:	29 c2                	sub    edx,eax
30002142:	89 d0                	mov    eax,edx
30002144:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000214a:	29 c1                	sub    ecx,eax
3000214c:	89 c8                	mov    eax,ecx
3000214e:	85 c0                	test   eax,eax
30002150:	75 07                	jne    30002159 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
30002152:	ba 01 00 00 00       	mov    edx,0x1
30002157:	eb 05                	jmp    3000215e <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
30002159:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
3000215e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002161:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
30002164:	89 d0                	mov    eax,edx
30002166:	01 c0                	add    eax,eax
30002168:	01 d0                	add    eax,edx
3000216a:	c1 e0 02             	shl    eax,0x2
3000216d:	01 c8                	add    eax,ecx
3000216f:	8b 84 83 48 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2b8]
30002176:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
    tmbuf->tm_mon++;
30002179:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000217c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000217f:	8d 50 01             	lea    edx,[eax+0x1]
30002182:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002185:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
30002188:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000218b:	83 e0 03             	and    eax,0x3
3000218e:	85 c0                	test   eax,eax
30002190:	75 50                	jne    300021e2 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 1)
30002192:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002195:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000219a:	89 c8                	mov    eax,ecx
3000219c:	f7 ea                	imul   edx
3000219e:	c1 fa 05             	sar    edx,0x5
300021a1:	89 c8                	mov    eax,ecx
300021a3:	c1 f8 1f             	sar    eax,0x1f
300021a6:	29 c2                	sub    edx,eax
300021a8:	89 d0                	mov    eax,edx
300021aa:	6b c0 64             	imul   eax,eax,0x64
300021ad:	29 c1                	sub    ecx,eax
300021af:	89 c8                	mov    eax,ecx
300021b1:	85 c0                	test   eax,eax
300021b3:	75 26                	jne    300021db <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 4)
300021b5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300021b8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300021bd:	89 c8                	mov    eax,ecx
300021bf:	f7 ea                	imul   edx
300021c1:	c1 fa 07             	sar    edx,0x7
300021c4:	89 c8                	mov    eax,ecx
300021c6:	c1 f8 1f             	sar    eax,0x1f
300021c9:	29 c2                	sub    edx,eax
300021cb:	89 d0                	mov    eax,edx
300021cd:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300021d3:	29 c1                	sub    ecx,eax
300021d5:	89 c8                	mov    eax,ecx
300021d7:	85 c0                	test   eax,eax
300021d9:	75 07                	jne    300021e2 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 5)
300021db:	ba 01 00 00 00       	mov    edx,0x1
300021e0:	eb 05                	jmp    300021e7 <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 6)
300021e2:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 8)
300021e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300021ea:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
300021ed:	89 d0                	mov    eax,edx
300021ef:	01 c0                	add    eax,eax
300021f1:	01 d0                	add    eax,edx
300021f3:	c1 e0 02             	shl    eax,0x2
300021f6:	01 c8                	add    eax,ecx
300021f8:	8b 84 83 48 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2b8]
300021ff:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
30002202:	0f 86 f7 fe ff ff    	jbe    300020ff <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
30002208:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
3000220b:	83 c0 01             	add    eax,0x1
3000220e:	89 c2                	mov    edx,eax
30002210:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002213:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
  tmbuf->tm_isdst = 0;
30002216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002219:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  return tmbuf;
30002220:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
}
30002223:	83 c4 10             	add    esp,0x10
30002226:	5b                   	pop    ebx
30002227:	5d                   	pop    ebp
30002228:	c3                   	ret    

30002229 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
30002229:	55                   	push   ebp
3000222a:	89 e5                	mov    ebp,esp
3000222c:	e8 56 09 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30002231:	05 07 24 00 00       	add    eax,0x2407
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
    return gmtime_rI(timer, tmbuf);
30002236:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30002239:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000223c:	e8 cf fc ff ff       	call   30001f10 <gmtime_rI>
30002241:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
}
30002244:	c9                   	leave  
30002245:	c3                   	ret    

30002246 <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *localtime(const time_t *timer) {
30002246:	55                   	push   ebp
30002247:	89 e5                	mov    ebp,esp
30002249:	53                   	push   ebx
3000224a:	83 ec 34             	sub    esp,0x34
3000224d:	e8 35 09 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30002252:	05 e6 23 00 00       	add    eax,0x23e6
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
  struct tm tmbuf;
  
  t = *timer - libcTZ;
30002257:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000225a:	8b 12                	mov    edx,DWORD PTR [edx]
3000225c:	89 d1                	mov    ecx,edx
3000225e:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
30002264:	8b 12                	mov    edx,DWORD PTR [edx]
30002266:	29 d1                	sub    ecx,edx
30002268:	89 ca                	mov    edx,ecx
3000226a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_r(&t, &tmbuf);
3000226d:	83 ec 08             	sub    esp,0x8
30002270:	8d 55 c8             	lea    edx,[ebp-0x38]
30002273:	52                   	push   edx
30002274:	8d 55 f4             	lea    edx,[ebp-0xc]
30002277:	52                   	push   edx
30002278:	89 c3                	mov    ebx,eax
3000227a:	e8 21 09 00 00       	call   30002ba0 <__x86.get_pc_thunk.ax+0x19>
3000227f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
30002282:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30002285:	c9                   	leave  
30002286:	c3                   	ret    

30002287 <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
30002287:	55                   	push   ebp
30002288:	89 e5                	mov    ebp,esp
3000228a:	83 ec 10             	sub    esp,0x10
3000228d:	e8 f5 08 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30002292:	05 a6 23 00 00       	add    eax,0x23a6
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
30002297:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000229a:	8b 12                	mov    edx,DWORD PTR [edx]
3000229c:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
300022a2:	8b 00                	mov    eax,DWORD PTR [eax]
300022a4:	29 c2                	sub    edx,eax
300022a6:	89 d0                	mov    eax,edx
300022a8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
300022ab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300022ae:	8d 45 fc             	lea    eax,[ebp-0x4]
300022b1:	50                   	push   eax
300022b2:	e8 59 fc ff ff       	call   30001f10 <gmtime_rI>
300022b7:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
300022ba:	c9                   	leave  
300022bb:	c3                   	ret    

300022bc <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
300022bc:	55                   	push   ebp
300022bd:	89 e5                	mov    ebp,esp
300022bf:	e8 c3 08 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
300022c4:	05 74 23 00 00       	add    eax,0x2374
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
300022c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300022cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300022cf:	e8 b3 ff ff ff       	call   30002287 <localtime_rI>
300022d4:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
300022d7:	c9                   	leave  
300022d8:	c3                   	ret    

300022d9 <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
300022d9:	55                   	push   ebp
300022da:	89 e5                	mov    ebp,esp
300022dc:	57                   	push   edi
300022dd:	56                   	push   esi
300022de:	53                   	push   ebx
300022df:	83 ec 20             	sub    esp,0x20
300022e2:	e8 cd 08 00 00       	call   30002bb4 <__x86.get_pc_thunk.cx>
300022e7:	81 c1 51 23 00 00    	add    ecx,0x2351
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
300022ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022f0:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
300022f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022f6:	8b 18                	mov    ebx,DWORD PTR [eax]
300022f8:	ba 89 88 88 88       	mov    edx,0x88888889
300022fd:	89 d8                	mov    eax,ebx
300022ff:	f7 ea                	imul   edx
30002301:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002304:	c1 f8 05             	sar    eax,0x5
30002307:	89 c2                	mov    edx,eax
30002309:	89 d8                	mov    eax,ebx
3000230b:	c1 f8 1f             	sar    eax,0x1f
3000230e:	29 c2                	sub    edx,eax
30002310:	89 d0                	mov    eax,edx
30002312:	8d 14 06             	lea    edx,[esi+eax*1]
30002315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002318:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
3000231b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000231e:	8b 18                	mov    ebx,DWORD PTR [eax]
30002320:	ba 89 88 88 88       	mov    edx,0x88888889
30002325:	89 d8                	mov    eax,ebx
30002327:	f7 ea                	imul   edx
30002329:	8d 04 1a             	lea    eax,[edx+ebx*1]
3000232c:	c1 f8 05             	sar    eax,0x5
3000232f:	89 c2                	mov    edx,eax
30002331:	89 d8                	mov    eax,ebx
30002333:	c1 f8 1f             	sar    eax,0x1f
30002336:	29 c2                	sub    edx,eax
30002338:	89 d0                	mov    eax,edx
3000233a:	89 c2                	mov    edx,eax
3000233c:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30002343:	89 c2                	mov    edx,eax
30002345:	89 d0                	mov    eax,edx
30002347:	c1 e0 04             	shl    eax,0x4
3000234a:	29 d0                	sub    eax,edx
3000234c:	29 c3                	sub    ebx,eax
3000234e:	89 d8                	mov    eax,ebx
30002350:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002353:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
30002355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002358:	8b 00                	mov    eax,DWORD PTR [eax]
3000235a:	85 c0                	test   eax,eax
3000235c:	79 1c                	jns    3000237a <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
3000235e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002361:	8b 00                	mov    eax,DWORD PTR [eax]
30002363:	8d 50 3c             	lea    edx,[eax+0x3c]
30002366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002369:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
3000236b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000236e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002371:	8d 50 ff             	lea    edx,[eax-0x1]
30002374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002377:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
3000237a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000237d:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
30002380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002383:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
30002386:	ba 89 88 88 88       	mov    edx,0x88888889
3000238b:	89 d8                	mov    eax,ebx
3000238d:	f7 ea                	imul   edx
3000238f:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002392:	c1 f8 05             	sar    eax,0x5
30002395:	89 c2                	mov    edx,eax
30002397:	89 d8                	mov    eax,ebx
30002399:	c1 f8 1f             	sar    eax,0x1f
3000239c:	29 c2                	sub    edx,eax
3000239e:	89 d0                	mov    eax,edx
300023a0:	8d 14 06             	lea    edx,[esi+eax*1]
300023a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
300023a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023ac:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
300023af:	ba 89 88 88 88       	mov    edx,0x88888889
300023b4:	89 d8                	mov    eax,ebx
300023b6:	f7 ea                	imul   edx
300023b8:	8d 04 1a             	lea    eax,[edx+ebx*1]
300023bb:	c1 f8 05             	sar    eax,0x5
300023be:	89 c2                	mov    edx,eax
300023c0:	89 d8                	mov    eax,ebx
300023c2:	c1 f8 1f             	sar    eax,0x1f
300023c5:	29 c2                	sub    edx,eax
300023c7:	89 d0                	mov    eax,edx
300023c9:	89 c2                	mov    edx,eax
300023cb:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
300023d2:	89 c2                	mov    edx,eax
300023d4:	89 d0                	mov    eax,edx
300023d6:	c1 e0 04             	shl    eax,0x4
300023d9:	29 d0                	sub    eax,edx
300023db:	29 c3                	sub    ebx,eax
300023dd:	89 d8                	mov    eax,ebx
300023df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300023e2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
300023e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300023eb:	85 c0                	test   eax,eax
300023ed:	79 1e                	jns    3000240d <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
300023ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300023f5:	8d 50 3c             	lea    edx,[eax+0x3c]
300023f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
300023fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002401:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002404:	8d 50 ff             	lea    edx,[eax-0x1]
30002407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000240a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
3000240d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002410:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
30002413:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002418:	89 d8                	mov    eax,ebx
3000241a:	f7 ea                	imul   edx
3000241c:	c1 fa 02             	sar    edx,0x2
3000241f:	89 d8                	mov    eax,ebx
30002421:	c1 f8 1f             	sar    eax,0x1f
30002424:	29 c2                	sub    edx,eax
30002426:	89 d0                	mov    eax,edx
30002428:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
3000242b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000242e:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
30002431:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002436:	89 d8                	mov    eax,ebx
30002438:	f7 ea                	imul   edx
3000243a:	c1 fa 02             	sar    edx,0x2
3000243d:	89 d8                	mov    eax,ebx
3000243f:	c1 f8 1f             	sar    eax,0x1f
30002442:	29 c2                	sub    edx,eax
30002444:	89 d0                	mov    eax,edx
30002446:	01 c0                	add    eax,eax
30002448:	01 d0                	add    eax,edx
3000244a:	c1 e0 03             	shl    eax,0x3
3000244d:	29 c3                	sub    ebx,eax
3000244f:	89 da                	mov    edx,ebx
30002451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002454:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
30002457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000245a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
3000245d:	85 c0                	test   eax,eax
3000245f:	79 13                	jns    30002474 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
30002461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002464:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002467:	8d 50 18             	lea    edx,[eax+0x18]
3000246a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000246d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
30002470:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
30002474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002477:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
3000247a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000247d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002480:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002485:	89 d8                	mov    eax,ebx
30002487:	f7 ea                	imul   edx
30002489:	d1 fa                	sar    edx,1
3000248b:	89 d8                	mov    eax,ebx
3000248d:	c1 f8 1f             	sar    eax,0x1f
30002490:	29 c2                	sub    edx,eax
30002492:	89 d0                	mov    eax,edx
30002494:	8d 14 06             	lea    edx,[esi+eax*1]
30002497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000249a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
3000249d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024a0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300024a3:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
300024a8:	89 d8                	mov    eax,ebx
300024aa:	f7 ea                	imul   edx
300024ac:	d1 fa                	sar    edx,1
300024ae:	89 d8                	mov    eax,ebx
300024b0:	c1 f8 1f             	sar    eax,0x1f
300024b3:	29 c2                	sub    edx,eax
300024b5:	89 d0                	mov    eax,edx
300024b7:	01 c0                	add    eax,eax
300024b9:	01 d0                	add    eax,edx
300024bb:	c1 e0 02             	shl    eax,0x2
300024be:	29 c3                	sub    ebx,eax
300024c0:	89 da                	mov    edx,ebx
300024c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024c5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
300024c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300024ce:	85 c0                	test   eax,eax
300024d0:	79 1e                	jns    300024f0 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
300024d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300024d8:	8d 50 0c             	lea    edx,[eax+0xc]
300024db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
300024e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300024e7:	8d 50 ff             	lea    edx,[eax-0x1]
300024ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024ed:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
300024f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
300024f6:	83 e8 01             	sub    eax,0x1
300024f9:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
300024fc:	e9 c1 00 00 00       	jmp    300025c2 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
30002501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002504:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002507:	8d 50 ff             	lea    edx,[eax-0x1]
3000250a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000250d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
30002510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002513:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002516:	85 c0                	test   eax,eax
30002518:	79 19                	jns    30002533 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
3000251a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000251d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002520:	8d 50 ff             	lea    edx,[eax-0x1]
30002523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002526:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
30002529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000252c:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
30002533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002536:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002539:	83 e0 03             	and    eax,0x3
3000253c:	85 c0                	test   eax,eax
3000253e:	75 62                	jne    300025a2 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
30002540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002543:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002546:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000254c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002551:	89 d8                	mov    eax,ebx
30002553:	f7 ea                	imul   edx
30002555:	c1 fa 05             	sar    edx,0x5
30002558:	89 d8                	mov    eax,ebx
3000255a:	c1 f8 1f             	sar    eax,0x1f
3000255d:	29 c2                	sub    edx,eax
3000255f:	89 d0                	mov    eax,edx
30002561:	6b c0 64             	imul   eax,eax,0x64
30002564:	29 c3                	sub    ebx,eax
30002566:	89 d8                	mov    eax,ebx
30002568:	85 c0                	test   eax,eax
3000256a:	75 2f                	jne    3000259b <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
3000256c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000256f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002572:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002578:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000257d:	89 d8                	mov    eax,ebx
3000257f:	f7 ea                	imul   edx
30002581:	c1 fa 07             	sar    edx,0x7
30002584:	89 d8                	mov    eax,ebx
30002586:	c1 f8 1f             	sar    eax,0x1f
30002589:	29 c2                	sub    edx,eax
3000258b:	89 d0                	mov    eax,edx
3000258d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002593:	29 c3                	sub    ebx,eax
30002595:	89 d8                	mov    eax,ebx
30002597:	85 c0                	test   eax,eax
30002599:	75 07                	jne    300025a2 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
3000259b:	ba 01 00 00 00       	mov    edx,0x1
300025a0:	eb 05                	jmp    300025a7 <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
300025a2:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
300025a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025aa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300025ad:	89 d0                	mov    eax,edx
300025af:	01 c0                	add    eax,eax
300025b1:	01 d0                	add    eax,edx
300025b3:	c1 e0 02             	shl    eax,0x2
300025b6:	01 d8                	add    eax,ebx
300025b8:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
300025bf:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
300025c2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300025c6:	0f 88 35 ff ff ff    	js     30002501 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
300025cc:	e9 c2 00 00 00       	jmp    30002693 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
300025d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300025d7:	83 e0 03             	and    eax,0x3
300025da:	85 c0                	test   eax,eax
300025dc:	75 62                	jne    30002640 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
300025de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025e1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300025e4:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300025ea:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300025ef:	89 d8                	mov    eax,ebx
300025f1:	f7 ea                	imul   edx
300025f3:	c1 fa 05             	sar    edx,0x5
300025f6:	89 d8                	mov    eax,ebx
300025f8:	c1 f8 1f             	sar    eax,0x1f
300025fb:	29 c2                	sub    edx,eax
300025fd:	89 d0                	mov    eax,edx
300025ff:	6b c0 64             	imul   eax,eax,0x64
30002602:	29 c3                	sub    ebx,eax
30002604:	89 d8                	mov    eax,ebx
30002606:	85 c0                	test   eax,eax
30002608:	75 2f                	jne    30002639 <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
3000260a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000260d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002610:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002616:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000261b:	89 d8                	mov    eax,ebx
3000261d:	f7 ea                	imul   edx
3000261f:	c1 fa 07             	sar    edx,0x7
30002622:	89 d8                	mov    eax,ebx
30002624:	c1 f8 1f             	sar    eax,0x1f
30002627:	29 c2                	sub    edx,eax
30002629:	89 d0                	mov    eax,edx
3000262b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002631:	29 c3                	sub    ebx,eax
30002633:	89 d8                	mov    eax,ebx
30002635:	85 c0                	test   eax,eax
30002637:	75 07                	jne    30002640 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
30002639:	ba 01 00 00 00       	mov    edx,0x1
3000263e:	eb 05                	jmp    30002645 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
30002640:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
30002645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002648:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
3000264b:	89 d0                	mov    eax,edx
3000264d:	01 c0                	add    eax,eax
3000264f:	01 d0                	add    eax,edx
30002651:	c1 e0 02             	shl    eax,0x2
30002654:	01 d8                	add    eax,ebx
30002656:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
3000265d:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
30002660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002663:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002666:	8d 50 01             	lea    edx,[eax+0x1]
30002669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000266c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
3000266f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002672:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002675:	83 f8 0c             	cmp    eax,0xc
30002678:	75 19                	jne    30002693 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
3000267a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000267d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
30002684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002687:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000268a:	8d 50 01             	lea    edx,[eax+0x1]
3000268d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002690:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
30002693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002696:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002699:	83 e0 03             	and    eax,0x3
3000269c:	85 c0                	test   eax,eax
3000269e:	75 62                	jne    30002702 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
300026a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026a3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300026a6:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300026ac:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300026b1:	89 d8                	mov    eax,ebx
300026b3:	f7 ea                	imul   edx
300026b5:	c1 fa 05             	sar    edx,0x5
300026b8:	89 d8                	mov    eax,ebx
300026ba:	c1 f8 1f             	sar    eax,0x1f
300026bd:	29 c2                	sub    edx,eax
300026bf:	89 d0                	mov    eax,edx
300026c1:	6b c0 64             	imul   eax,eax,0x64
300026c4:	29 c3                	sub    ebx,eax
300026c6:	89 d8                	mov    eax,ebx
300026c8:	85 c0                	test   eax,eax
300026ca:	75 2f                	jne    300026fb <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
300026cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026cf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300026d2:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300026d8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300026dd:	89 d8                	mov    eax,ebx
300026df:	f7 ea                	imul   edx
300026e1:	c1 fa 07             	sar    edx,0x7
300026e4:	89 d8                	mov    eax,ebx
300026e6:	c1 f8 1f             	sar    eax,0x1f
300026e9:	29 c2                	sub    edx,eax
300026eb:	89 d0                	mov    eax,edx
300026ed:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300026f3:	29 c3                	sub    ebx,eax
300026f5:	89 d8                	mov    eax,ebx
300026f7:	85 c0                	test   eax,eax
300026f9:	75 07                	jne    30002702 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
300026fb:	ba 01 00 00 00       	mov    edx,0x1
30002700:	eb 05                	jmp    30002707 <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
30002702:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
30002707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000270a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
3000270d:	89 d0                	mov    eax,edx
3000270f:	01 c0                	add    eax,eax
30002711:	01 d0                	add    eax,edx
30002713:	c1 e0 02             	shl    eax,0x2
30002716:	01 d8                	add    eax,ebx
30002718:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
3000271f:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30002722:	0f 8e a9 fe ff ff    	jle    300025d1 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
30002728:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
3000272b:	8d 50 01             	lea    edx,[eax+0x1]
3000272e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002731:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
30002734:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
3000273b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000273e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002741:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
30002744:	81 ea 6c 07 00 00    	sub    edx,0x76c
3000274a:	39 d0                	cmp    eax,edx
3000274c:	7d 0a                	jge    30002758 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
3000274e:	b8 19 fc ff ff       	mov    eax,0xfffffc19
30002753:	e9 ba 03 00 00       	jmp    30002b12 <mktime+0x839>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
30002758:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
3000275f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
30002766:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
3000276d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002770:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002773:	05 6c 07 00 00       	add    eax,0x76c
30002778:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
3000277b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000277e:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002781:	3d 7c c6 59 00       	cmp    eax,0x59c67c
30002786:	7e 07                	jle    3000278f <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
30002788:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
3000278f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002792:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002795:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
3000279b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
3000279e:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
300027a3:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
300027a6:	89 c2                	mov    edx,eax
300027a8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300027ab:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300027ae:	8d 58 03             	lea    ebx,[eax+0x3]
300027b1:	85 c0                	test   eax,eax
300027b3:	0f 48 c3             	cmovs  eax,ebx
300027b6:	c1 f8 02             	sar    eax,0x2
300027b9:	83 c0 01             	add    eax,0x1
300027bc:	39 c2                	cmp    edx,eax
300027be:	7d 04                	jge    300027c4 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
300027c0:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
300027c4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300027c7:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300027ca:	8d 50 03             	lea    edx,[eax+0x3]
300027cd:	85 c0                	test   eax,eax
300027cf:	0f 48 c2             	cmovs  eax,edx
300027d2:	c1 f8 02             	sar    eax,0x2
300027d5:	89 c3                	mov    ebx,eax
300027d7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300027da:	83 e0 03             	and    eax,0x3
300027dd:	85 c0                	test   eax,eax
300027df:	74 29                	je     3000280a <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
300027e1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300027e4:	99                   	cdq    
300027e5:	c1 ea 1e             	shr    edx,0x1e
300027e8:	01 d0                	add    eax,edx
300027ea:	83 e0 03             	and    eax,0x3
300027ed:	29 d0                	sub    eax,edx
300027ef:	89 c6                	mov    esi,eax
300027f1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
300027f4:	99                   	cdq    
300027f5:	c1 ea 1e             	shr    edx,0x1e
300027f8:	01 d0                	add    eax,edx
300027fa:	83 e0 03             	and    eax,0x3
300027fd:	29 d0                	sub    eax,edx
300027ff:	39 c6                	cmp    esi,eax
30002801:	7d 07                	jge    3000280a <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
30002803:	b8 01 00 00 00       	mov    eax,0x1
30002808:	eb 05                	jmp    3000280f <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
3000280a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
3000280f:	01 d8                	add    eax,ebx
30002811:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
30002814:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002817:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
3000281a:	89 c3                	mov    ebx,eax
3000281c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002821:	89 d8                	mov    eax,ebx
30002823:	f7 ea                	imul   edx
30002825:	c1 fa 05             	sar    edx,0x5
30002828:	89 d8                	mov    eax,ebx
3000282a:	c1 f8 1f             	sar    eax,0x1f
3000282d:	89 d7                	mov    edi,edx
3000282f:	29 c7                	sub    edi,eax
30002831:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002834:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002839:	89 d8                	mov    eax,ebx
3000283b:	f7 ea                	imul   edx
3000283d:	c1 fa 05             	sar    edx,0x5
30002840:	89 d8                	mov    eax,ebx
30002842:	c1 f8 1f             	sar    eax,0x1f
30002845:	29 c2                	sub    edx,eax
30002847:	89 d0                	mov    eax,edx
30002849:	6b c0 64             	imul   eax,eax,0x64
3000284c:	29 c3                	sub    ebx,eax
3000284e:	89 d8                	mov    eax,ebx
30002850:	85 c0                	test   eax,eax
30002852:	74 49                	je     3000289d <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
30002854:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002857:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000285c:	89 d8                	mov    eax,ebx
3000285e:	f7 ea                	imul   edx
30002860:	c1 fa 05             	sar    edx,0x5
30002863:	89 d8                	mov    eax,ebx
30002865:	c1 f8 1f             	sar    eax,0x1f
30002868:	89 d6                	mov    esi,edx
3000286a:	29 c6                	sub    esi,eax
3000286c:	6b c6 64             	imul   eax,esi,0x64
3000286f:	89 de                	mov    esi,ebx
30002871:	29 c6                	sub    esi,eax
30002873:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
30002876:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000287b:	89 d8                	mov    eax,ebx
3000287d:	f7 ea                	imul   edx
3000287f:	c1 fa 05             	sar    edx,0x5
30002882:	89 d8                	mov    eax,ebx
30002884:	c1 f8 1f             	sar    eax,0x1f
30002887:	29 c2                	sub    edx,eax
30002889:	89 d0                	mov    eax,edx
3000288b:	6b c0 64             	imul   eax,eax,0x64
3000288e:	29 c3                	sub    ebx,eax
30002890:	89 d8                	mov    eax,ebx
30002892:	39 c6                	cmp    esi,eax
30002894:	7d 07                	jge    3000289d <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
30002896:	b8 01 00 00 00       	mov    eax,0x1
3000289b:	eb 05                	jmp    300028a2 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
3000289d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
300028a2:	01 f8                	add    eax,edi
300028a4:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
300028a7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300028aa:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300028ad:	89 c3                	mov    ebx,eax
300028af:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300028b4:	89 d8                	mov    eax,ebx
300028b6:	f7 ea                	imul   edx
300028b8:	c1 fa 07             	sar    edx,0x7
300028bb:	89 d8                	mov    eax,ebx
300028bd:	c1 f8 1f             	sar    eax,0x1f
300028c0:	89 d7                	mov    edi,edx
300028c2:	29 c7                	sub    edi,eax
300028c4:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300028c7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300028cc:	89 d8                	mov    eax,ebx
300028ce:	f7 ea                	imul   edx
300028d0:	c1 fa 07             	sar    edx,0x7
300028d3:	89 d8                	mov    eax,ebx
300028d5:	c1 f8 1f             	sar    eax,0x1f
300028d8:	29 c2                	sub    edx,eax
300028da:	89 d0                	mov    eax,edx
300028dc:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300028e2:	29 c3                	sub    ebx,eax
300028e4:	89 d8                	mov    eax,ebx
300028e6:	85 c0                	test   eax,eax
300028e8:	74 4f                	je     30002939 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
300028ea:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300028ed:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300028f2:	89 d8                	mov    eax,ebx
300028f4:	f7 ea                	imul   edx
300028f6:	c1 fa 07             	sar    edx,0x7
300028f9:	89 d8                	mov    eax,ebx
300028fb:	c1 f8 1f             	sar    eax,0x1f
300028fe:	89 d6                	mov    esi,edx
30002900:	29 c6                	sub    esi,eax
30002902:	69 c6 90 01 00 00    	imul   eax,esi,0x190
30002908:	89 de                	mov    esi,ebx
3000290a:	29 c6                	sub    esi,eax
3000290c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
3000290f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002914:	89 d8                	mov    eax,ebx
30002916:	f7 ea                	imul   edx
30002918:	c1 fa 07             	sar    edx,0x7
3000291b:	89 d8                	mov    eax,ebx
3000291d:	c1 f8 1f             	sar    eax,0x1f
30002920:	29 c2                	sub    edx,eax
30002922:	89 d0                	mov    eax,edx
30002924:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000292a:	29 c3                	sub    ebx,eax
3000292c:	89 d8                	mov    eax,ebx
3000292e:	39 c6                	cmp    esi,eax
30002930:	7d 07                	jge    30002939 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
30002932:	b8 01 00 00 00       	mov    eax,0x1
30002937:	eb 05                	jmp    3000293e <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
30002939:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
3000293e:	01 f8                	add    eax,edi
30002940:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
30002943:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
3000294a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
3000294d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
30002950:	eb 7b                	jmp    300029cd <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
30002952:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002955:	83 e0 03             	and    eax,0x3
30002958:	85 c0                	test   eax,eax
3000295a:	75 50                	jne    300029ac <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
3000295c:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
3000295f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002964:	89 d8                	mov    eax,ebx
30002966:	f7 ea                	imul   edx
30002968:	c1 fa 05             	sar    edx,0x5
3000296b:	89 d8                	mov    eax,ebx
3000296d:	c1 f8 1f             	sar    eax,0x1f
30002970:	29 c2                	sub    edx,eax
30002972:	89 d0                	mov    eax,edx
30002974:	6b c0 64             	imul   eax,eax,0x64
30002977:	29 c3                	sub    ebx,eax
30002979:	89 d8                	mov    eax,ebx
3000297b:	85 c0                	test   eax,eax
3000297d:	75 26                	jne    300029a5 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
3000297f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002982:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002987:	89 d8                	mov    eax,ebx
30002989:	f7 ea                	imul   edx
3000298b:	c1 fa 07             	sar    edx,0x7
3000298e:	89 d8                	mov    eax,ebx
30002990:	c1 f8 1f             	sar    eax,0x1f
30002993:	29 c2                	sub    edx,eax
30002995:	89 d0                	mov    eax,edx
30002997:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000299d:	29 c3                	sub    ebx,eax
3000299f:	89 d8                	mov    eax,ebx
300029a1:	85 c0                	test   eax,eax
300029a3:	75 07                	jne    300029ac <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
300029a5:	ba 01 00 00 00       	mov    edx,0x1
300029aa:	eb 05                	jmp    300029b1 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
300029ac:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
300029b1:	89 d0                	mov    eax,edx
300029b3:	01 c0                	add    eax,eax
300029b5:	01 d0                	add    eax,edx
300029b7:	c1 e0 02             	shl    eax,0x2
300029ba:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
300029bd:	01 d0                	add    eax,edx
300029bf:	8b 84 81 48 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2b8]
300029c6:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
300029c9:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
300029cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029d0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300029d3:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
300029d6:	0f 8f 76 ff ff ff    	jg     30002952 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
300029dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
300029e2:	83 e8 01             	sub    eax,0x1
300029e5:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
300029e8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300029eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300029ee:	01 d0                	add    eax,edx
300029f0:	85 c0                	test   eax,eax
300029f2:	79 04                	jns    300029f8 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
300029f4:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
300029f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300029fb:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
300029fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002a01:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30002a04:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
30002a07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002a0a:	8d 58 04             	lea    ebx,[eax+0x4]
30002a0d:	ba 93 24 49 92       	mov    edx,0x92492493
30002a12:	89 d8                	mov    eax,ebx
30002a14:	f7 ea                	imul   edx
30002a16:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002a19:	c1 f8 02             	sar    eax,0x2
30002a1c:	89 c2                	mov    edx,eax
30002a1e:	89 d8                	mov    eax,ebx
30002a20:	c1 f8 1f             	sar    eax,0x1f
30002a23:	29 c2                	sub    edx,eax
30002a25:	89 d0                	mov    eax,edx
30002a27:	89 c2                	mov    edx,eax
30002a29:	c1 e2 03             	shl    edx,0x3
30002a2c:	29 c2                	sub    edx,eax
30002a2e:	89 d8                	mov    eax,ebx
30002a30:	29 d0                	sub    eax,edx
30002a32:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002a35:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
30002a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002a3b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002a3e:	c1 e0 02             	shl    eax,0x2
30002a41:	89 c2                	mov    edx,eax
30002a43:	c1 e2 04             	shl    edx,0x4
30002a46:	29 c2                	sub    edx,eax
30002a48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002a4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002a4e:	01 d0                	add    eax,edx
30002a50:	c1 e0 02             	shl    eax,0x2
30002a53:	89 c2                	mov    edx,eax
30002a55:	c1 e2 04             	shl    edx,0x4
30002a58:	29 c2                	sub    edx,eax
30002a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002a5d:	8b 00                	mov    eax,DWORD PTR [eax]
30002a5f:	01 d0                	add    eax,edx
30002a61:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
30002a64:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
30002a69:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
30002a6c:	89 c3                	mov    ebx,eax
30002a6e:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30002a73:	89 d8                	mov    eax,ebx
30002a75:	f7 ea                	imul   edx
30002a77:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002a7a:	c1 f8 10             	sar    eax,0x10
30002a7d:	89 c2                	mov    edx,eax
30002a7f:	89 d8                	mov    eax,ebx
30002a81:	c1 f8 1f             	sar    eax,0x1f
30002a84:	29 c2                	sub    edx,eax
30002a86:	89 d0                	mov    eax,edx
30002a88:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30002a8b:	7d 04                	jge    30002a91 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
30002a8d:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
30002a91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002a94:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30002a9a:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
30002a9d:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002aa3:	8b 00                	mov    eax,DWORD PTR [eax]
30002aa5:	85 c0                	test   eax,eax
30002aa7:	74 1a                	je     30002ac3 <mktime+0x7ea>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
30002aa9:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002aaf:	8b 00                	mov    eax,DWORD PTR [eax]
30002ab1:	ba ff ff ff 7f       	mov    edx,0x7fffffff
30002ab6:	29 c2                	sub    edx,eax
30002ab8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30002abb:	39 c2                	cmp    edx,eax
30002abd:	73 04                	jae    30002ac3 <mktime+0x7ea>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
      ((libcTZ < 0) && (seconds < -libcTZ))) {
          overflow|=16;
30002abf:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
30002ac3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30002ac6:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002acc:	8b 00                	mov    eax,DWORD PTR [eax]
30002ace:	01 d0                	add    eax,edx
30002ad0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
30002ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002ad6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
30002ad9:	85 c0                	test   eax,eax
30002adb:	74 0b                	je     30002ae8 <mktime+0x80f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
30002add:	8b 81 54 00 00 00    	mov    eax,DWORD PTR [ecx+0x54]
30002ae3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
30002ae6:	eb 07                	jmp    30002aef <mktime+0x816>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
30002ae8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
30002aef:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
30002af2:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
30002af5:	7e 04                	jle    30002afb <mktime+0x822>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
30002af7:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
30002afb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
30002afe:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
30002b01:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
30002b05:	74 08                	je     30002b0f <mktime+0x836>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
30002b07:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30002b0a:	83 e8 02             	sub    eax,0x2
30002b0d:	eb 03                	jmp    30002b12 <mktime+0x839>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
30002b0f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
30002b12:	83 c4 20             	add    esp,0x20
30002b15:	5b                   	pop    ebx
30002b16:	5e                   	pop    esi
30002b17:	5f                   	pop    edi
30002b18:	5d                   	pop    ebp
30002b19:	c3                   	ret    

30002b1a <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
30002b1a:	55                   	push   ebp
30002b1b:	89 e5                	mov    ebp,esp
30002b1d:	56                   	push   esi
30002b1e:	53                   	push   ebx
30002b1f:	83 ec 14             	sub    esp,0x14
30002b22:	e8 60 00 00 00       	call   30002b87 <__x86.get_pc_thunk.ax>
30002b27:	05 11 1b 00 00       	add    eax,0x1b11
30002b2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002b2f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
30002b32:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
30002b39:	b8 71 01 00 00       	mov    eax,0x171
30002b3e:	bb 00 00 00 00       	mov    ebx,0x0
30002b43:	b9 00 00 00 00       	mov    ecx,0x0
30002b48:	ba 00 00 00 00       	mov    edx,0x0
30002b4d:	be 00 00 00 00       	mov    esi,0x0
30002b52:	e8 fc ff ff ff       	call   30002b53 <gettime+0x39>
30002b57:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
30002b5a:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
30002b5e:	74 11                	je     30002b71 <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
30002b60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002b63:	8d 45 f4             	lea    eax,[ebp-0xc]
30002b66:	50                   	push   eax
30002b67:	e8 1b f7 ff ff       	call   30002287 <localtime_rI>
30002b6c:	83 c4 08             	add    esp,0x8
30002b6f:	eb 0f                	jmp    30002b80 <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
30002b71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002b74:	8d 45 f4             	lea    eax,[ebp-0xc]
30002b77:	50                   	push   eax
30002b78:	e8 93 f3 ff ff       	call   30001f10 <gmtime_rI>
30002b7d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
30002b80:	8d 65 f8             	lea    esp,[ebp-0x8]
30002b83:	5b                   	pop    ebx
30002b84:	5e                   	pop    esi
30002b85:	5d                   	pop    ebp
30002b86:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

30002b87 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
30002b87:	8b 04 24             	mov    eax,DWORD PTR [esp]
30002b8a:	c3                   	ret    

Disassembly of section .plt:

30002b90 <.plt>:
30002b90:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
30002b96:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
30002b9c:	00 00                	add    BYTE PTR [eax],al
30002b9e:	00 00                	add    BYTE PTR [eax],al
30002ba0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
30002ba6:	68 00 00 00 00       	push   0x0
30002bab:	e9 e0 ff ff ff       	jmp    30002b90 <__x86.get_pc_thunk.ax+0x9>

Disassembly of section .text.__x86.get_pc_thunk.bx:

30002bb0 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
30002bb0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
30002bb3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

30002bb4 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
30002bb4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
30002bb7:	c3                   	ret    

Disassembly of section .eh_frame:

30002bb8 <.eh_frame>:
30002bb8:	14 00                	adc    al,0x0
30002bba:	00 00                	add    BYTE PTR [eax],al
30002bbc:	00 00                	add    BYTE PTR [eax],al
30002bbe:	00 00                	add    BYTE PTR [eax],al
30002bc0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30002bc3:	00 01                	add    BYTE PTR [ecx],al
30002bc5:	7c 08                	jl     30002bcf <__x86.get_pc_thunk.cx+0x1b>
30002bc7:	01 1b                	add    DWORD PTR [ebx],ebx
30002bc9:	0c 04                	or     al,0x4
30002bcb:	04 88                	add    al,0x88
30002bcd:	01 00                	add    DWORD PTR [eax],eax
30002bcf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002bd2:	00 00                	add    BYTE PTR [eax],al
30002bd4:	1c 00                	sbb    al,0x0
30002bd6:	00 00                	add    BYTE PTR [eax],al
30002bd8:	28 d4                	sub    ah,dl
30002bda:	ff                   	(bad)  
30002bdb:	ff                   	(bad)  
30002bdc:	38 00                	cmp    BYTE PTR [eax],al
30002bde:	00 00                	add    BYTE PTR [eax],al
30002be0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002be3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002be9:	74 c5                	je     30002bb0 <__x86.get_pc_thunk.bx>
30002beb:	0c 04                	or     al,0x4
30002bed:	04 00                	add    al,0x0
30002bef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002bf2:	00 00                	add    BYTE PTR [eax],al
30002bf4:	3c 00                	cmp    al,0x0
30002bf6:	00 00                	add    BYTE PTR [eax],al
30002bf8:	40                   	inc    eax
30002bf9:	d4 ff                	aam    0xff
30002bfb:	ff                   	(bad)  
30002bfc:	38 00                	cmp    BYTE PTR [eax],al
30002bfe:	00 00                	add    BYTE PTR [eax],al
30002c00:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002c03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c09:	74 c5                	je     30002bd0 <__x86.get_pc_thunk.cx+0x1c>
30002c0b:	0c 04                	or     al,0x4
30002c0d:	04 00                	add    al,0x0
30002c0f:	00 10                	add    BYTE PTR [eax],dl
30002c11:	00 00                	add    BYTE PTR [eax],al
30002c13:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
30002c17:	00 6f ff             	add    BYTE PTR [edi-0x1],ch
30002c1a:	ff                   	(bad)  
30002c1b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002c1e:	00 00                	add    BYTE PTR [eax],al
30002c20:	00 00                	add    BYTE PTR [eax],al
30002c22:	00 00                	add    BYTE PTR [eax],al
30002c24:	24 00                	and    al,0x0
30002c26:	00 00                	add    BYTE PTR [eax],al
30002c28:	70 00                	jo     30002c2a <__x86.get_pc_thunk.cx+0x76>
30002c2a:	00 00                	add    BYTE PTR [eax],al
30002c2c:	44                   	inc    esp
30002c2d:	d4 ff                	aam    0xff
30002c2f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002c32:	00 00                	add    BYTE PTR [eax],al
30002c34:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002c37:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c3d:	42                   	inc    edx
30002c3e:	86 03                	xchg   BYTE PTR [ebx],al
30002c40:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002c44:	c3                   	ret    
30002c45:	41                   	inc    ecx
30002c46:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002c4a:	04 04                	add    al,0x4
30002c4c:	24 00                	and    al,0x0
30002c4e:	00 00                	add    BYTE PTR [eax],al
30002c50:	98                   	cwde   
30002c51:	00 00                	add    BYTE PTR [eax],al
30002c53:	00 71 d4             	add    BYTE PTR [ecx-0x2c],dh
30002c56:	ff                   	(bad)  
30002c57:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002c5a:	00 00                	add    BYTE PTR [eax],al
30002c5c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002c5f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c65:	42                   	inc    edx
30002c66:	86 03                	xchg   BYTE PTR [ebx],al
30002c68:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002c6c:	c3                   	ret    
30002c6d:	41                   	inc    ecx
30002c6e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002c72:	04 04                	add    al,0x4
30002c74:	24 00                	and    al,0x0
30002c76:	00 00                	add    BYTE PTR [eax],al
30002c78:	c0 00 00             	rol    BYTE PTR [eax],0x0
30002c7b:	00 a0 d4 ff ff 97    	add    BYTE PTR [eax-0x6800002c],ah
30002c81:	00 00                	add    BYTE PTR [eax],al
30002c83:	00 00                	add    BYTE PTR [eax],al
30002c85:	41                   	inc    ecx
30002c86:	0e                   	push   cs
30002c87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c8d:	42                   	inc    edx
30002c8e:	86 03                	xchg   BYTE PTR [ebx],al
30002c90:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
30002c94:	c3                   	ret    
30002c95:	41                   	inc    ecx
30002c96:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002c9a:	04 04                	add    al,0x4
30002c9c:	10 00                	adc    BYTE PTR [eax],al
30002c9e:	00 00                	add    BYTE PTR [eax],al
30002ca0:	e8 00 00 00 0c       	call   3c002ca5 <ticksToWait+0xbffe615>
30002ca5:	ff                   	(bad)  
30002ca6:	ff                   	(bad)  
30002ca7:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002caa:	00 00                	add    BYTE PTR [eax],al
30002cac:	00 00                	add    BYTE PTR [eax],al
30002cae:	00 00                	add    BYTE PTR [eax],al
30002cb0:	20 00                	and    BYTE PTR [eax],al
30002cb2:	00 00                	add    BYTE PTR [eax],al
30002cb4:	fc                   	cld    
30002cb5:	00 00                	add    BYTE PTR [eax],al
30002cb7:	00 fc                	add    ah,bh
30002cb9:	d4 ff                	aam    0xff
30002cbb:	ff 77 00             	push   DWORD PTR [edi+0x0]
30002cbe:	00 00                	add    BYTE PTR [eax],al
30002cc0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002cc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cc9:	44                   	inc    esp
30002cca:	83 03 02             	add    DWORD PTR [ebx],0x2
30002ccd:	6f                   	outs   dx,DWORD PTR ds:[esi]
30002cce:	c5 c3 0c             	(bad)  
30002cd1:	04 04                	add    al,0x4
30002cd3:	00 20                	add    BYTE PTR [eax],ah
30002cd5:	00 00                	add    BYTE PTR [eax],al
30002cd7:	00 20                	add    BYTE PTR [eax],ah
30002cd9:	01 00                	add    DWORD PTR [eax],eax
30002cdb:	00 4f d5             	add    BYTE PTR [edi-0x2b],cl
30002cde:	ff                   	(bad)  
30002cdf:	ff                   	(bad)  
30002ce0:	bb 00 00 00 00       	mov    ebx,0x0
30002ce5:	41                   	inc    ecx
30002ce6:	0e                   	push   cs
30002ce7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ced:	44                   	inc    esp
30002cee:	83 03 02             	add    DWORD PTR [ebx],0x2
30002cf1:	b3 c5                	mov    bl,0xc5
30002cf3:	c3                   	ret    
30002cf4:	0c 04                	or     al,0x4
30002cf6:	04 00                	add    al,0x0
30002cf8:	20 00                	and    BYTE PTR [eax],al
30002cfa:	00 00                	add    BYTE PTR [eax],al
30002cfc:	44                   	inc    esp
30002cfd:	01 00                	add    DWORD PTR [eax],eax
30002cff:	00 e6                	add    dh,ah
30002d01:	d5 ff                	aad    0xff
30002d03:	ff                   	(bad)  
30002d04:	bb 00 00 00 00       	mov    ebx,0x0
30002d09:	41                   	inc    ecx
30002d0a:	0e                   	push   cs
30002d0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d11:	44                   	inc    esp
30002d12:	83 03 02             	add    DWORD PTR [ebx],0x2
30002d15:	b3 c5                	mov    bl,0xc5
30002d17:	c3                   	ret    
30002d18:	0c 04                	or     al,0x4
30002d1a:	04 00                	add    al,0x0
30002d1c:	1c 00                	sbb    al,0x0
30002d1e:	00 00                	add    BYTE PTR [eax],al
30002d20:	68 01 00 00 7d       	push   0x7d000001
30002d25:	d6                   	(bad)  
30002d26:	ff                   	(bad)  
30002d27:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
30002d2b:	00 00                	add    BYTE PTR [eax],al
30002d2d:	41                   	inc    ecx
30002d2e:	0e                   	push   cs
30002d2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d35:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
30002d38:	0c 04                	or     al,0x4
30002d3a:	04 00                	add    al,0x0
30002d3c:	20 00                	and    BYTE PTR [eax],al
30002d3e:	00 00                	add    BYTE PTR [eax],al
30002d40:	88 01                	mov    BYTE PTR [ecx],al
30002d42:	00 00                	add    BYTE PTR [eax],al
30002d44:	bc d6 ff ff aa       	mov    esp,0xaaffffd6
30002d49:	00 00                	add    BYTE PTR [eax],al
30002d4b:	00 00                	add    BYTE PTR [eax],al
30002d4d:	41                   	inc    ecx
30002d4e:	0e                   	push   cs
30002d4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d55:	44                   	inc    esp
30002d56:	83 03 02             	add    DWORD PTR [ebx],0x2
30002d59:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
30002d5e:	04 00                	add    al,0x0
30002d60:	20 00                	and    BYTE PTR [eax],al
30002d62:	00 00                	add    BYTE PTR [eax],al
30002d64:	ac                   	lods   al,BYTE PTR ds:[esi]
30002d65:	01 00                	add    DWORD PTR [eax],eax
30002d67:	00 42 d7             	add    BYTE PTR [edx-0x29],al
30002d6a:	ff                   	(bad)  
30002d6b:	ff c1                	inc    ecx
30002d6d:	01 00                	add    DWORD PTR [eax],eax
30002d6f:	00 00                	add    BYTE PTR [eax],al
30002d71:	41                   	inc    ecx
30002d72:	0e                   	push   cs
30002d73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d79:	44                   	inc    esp
30002d7a:	83 03 03             	add    DWORD PTR [ebx],0x3
30002d7d:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
30002d82:	04 04                	add    al,0x4
30002d84:	20 00                	and    BYTE PTR [eax],al
30002d86:	00 00                	add    BYTE PTR [eax],al
30002d88:	d0 01                	rol    BYTE PTR [ecx],1
30002d8a:	00 00                	add    BYTE PTR [eax],al
30002d8c:	e0 d8                	loopne 30002d66 <__x86.get_pc_thunk.cx+0x1b2>
30002d8e:	ff                   	(bad)  
30002d8f:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
30002d95:	41                   	inc    ecx
30002d96:	0e                   	push   cs
30002d97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d9d:	44                   	inc    esp
30002d9e:	83 03 65             	add    DWORD PTR [ebx],0x65
30002da1:	c5 c3 0c             	(bad)  
30002da4:	04 04                	add    al,0x4
30002da6:	00 00                	add    BYTE PTR [eax],al
30002da8:	20 00                	and    BYTE PTR [eax],al
30002daa:	00 00                	add    BYTE PTR [eax],al
30002dac:	f4                   	hlt    
30002dad:	01 00                	add    DWORD PTR [eax],eax
30002daf:	00 e9                	add    cl,ch
30002db1:	d8 ff                	fdivr  st,st(7)
30002db3:	ff 2a                	jmp    FWORD PTR [edx]
30002db5:	00 00                	add    BYTE PTR [eax],al
30002db7:	00 00                	add    BYTE PTR [eax],al
30002db9:	41                   	inc    ecx
30002dba:	0e                   	push   cs
30002dbb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002dc1:	44                   	inc    esp
30002dc2:	83 03 62             	add    DWORD PTR [ebx],0x62
30002dc5:	c5 c3 0c             	(bad)  
30002dc8:	04 04                	add    al,0x4
30002dca:	00 00                	add    BYTE PTR [eax],al
30002dcc:	24 00                	and    al,0x0
30002dce:	00 00                	add    BYTE PTR [eax],al
30002dd0:	18 02                	sbb    BYTE PTR [edx],al
30002dd2:	00 00                	add    BYTE PTR [eax],al
30002dd4:	ef                   	out    dx,eax
30002dd5:	d8 ff                	fdivr  st,st(7)
30002dd7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30002ddd:	41                   	inc    ecx
30002dde:	0e                   	push   cs
30002ddf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002de5:	42                   	inc    edx
30002de6:	86 03                	xchg   BYTE PTR [ebx],al
30002de8:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
30002def:	c5 
30002df0:	0c 04                	or     al,0x4
30002df2:	04 00                	add    al,0x0
30002df4:	24 00                	and    al,0x0
30002df6:	00 00                	add    BYTE PTR [eax],al
30002df8:	40                   	inc    eax
30002df9:	02 00                	add    al,BYTE PTR [eax]
30002dfb:	00 fc                	add    ah,bh
30002dfd:	d8 ff                	fdivr  st,st(7)
30002dff:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30002e05:	41                   	inc    ecx
30002e06:	0e                   	push   cs
30002e07:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e0d:	42                   	inc    edx
30002e0e:	86 03                	xchg   BYTE PTR [ebx],al
30002e10:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
30002e17:	c5 
30002e18:	0c 04                	or     al,0x4
30002e1a:	04 00                	add    al,0x0
30002e1c:	20 00                	and    BYTE PTR [eax],al
30002e1e:	00 00                	add    BYTE PTR [eax],al
30002e20:	68 02 00 00 09       	push   0x9000002
30002e25:	d9 ff                	fcos   
30002e27:	ff 31                	push   DWORD PTR [ecx]
30002e29:	00 00                	add    BYTE PTR [eax],al
30002e2b:	00 00                	add    BYTE PTR [eax],al
30002e2d:	41                   	inc    ecx
30002e2e:	0e                   	push   cs
30002e2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e35:	44                   	inc    esp
30002e36:	83 03 69             	add    DWORD PTR [ebx],0x69
30002e39:	c5 c3 0c             	(bad)  
30002e3c:	04 04                	add    al,0x4
30002e3e:	00 00                	add    BYTE PTR [eax],al
30002e40:	20 00                	and    BYTE PTR [eax],al
30002e42:	00 00                	add    BYTE PTR [eax],al
30002e44:	8c 02                	mov    WORD PTR [edx],es
30002e46:	00 00                	add    BYTE PTR [eax],al
30002e48:	18 d9                	sbb    cl,bl
30002e4a:	ff                   	(bad)  
30002e4b:	ff 26                	jmp    DWORD PTR [esi]
30002e4d:	00 00                	add    BYTE PTR [eax],al
30002e4f:	00 00                	add    BYTE PTR [eax],al
30002e51:	41                   	inc    ecx
30002e52:	0e                   	push   cs
30002e53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e59:	41                   	inc    ecx
30002e5a:	83 03 60             	add    DWORD PTR [ebx],0x60
30002e5d:	c3                   	ret    
30002e5e:	41                   	inc    ecx
30002e5f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002e62:	04 00                	add    al,0x0
30002e64:	20 00                	and    BYTE PTR [eax],al
30002e66:	00 00                	add    BYTE PTR [eax],al
30002e68:	b0 02                	mov    al,0x2
30002e6a:	00 00                	add    BYTE PTR [eax],al
30002e6c:	1a d9                	sbb    bl,cl
30002e6e:	ff                   	(bad)  
30002e6f:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
30002e72:	00 00                	add    BYTE PTR [eax],al
30002e74:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e7d:	44                   	inc    esp
30002e7e:	83 03 7a             	add    DWORD PTR [ebx],0x7a
30002e81:	c3                   	ret    
30002e82:	41                   	inc    ecx
30002e83:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002e86:	04 00                	add    al,0x0
30002e88:	20 00                	and    BYTE PTR [eax],al
30002e8a:	00 00                	add    BYTE PTR [eax],al
30002e8c:	d4 02                	aam    0x2
30002e8e:	00 00                	add    BYTE PTR [eax],al
30002e90:	39 d9                	cmp    ecx,ebx
30002e92:	ff                   	(bad)  
30002e93:	ff 2f                	jmp    FWORD PTR [edi]
30002e95:	00 00                	add    BYTE PTR [eax],al
30002e97:	00 00                	add    BYTE PTR [eax],al
30002e99:	41                   	inc    ecx
30002e9a:	0e                   	push   cs
30002e9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ea1:	44                   	inc    esp
30002ea2:	83 03 66             	add    DWORD PTR [ebx],0x66
30002ea5:	c3                   	ret    
30002ea6:	41                   	inc    ecx
30002ea7:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002eaa:	04 00                	add    al,0x0
30002eac:	20 00                	and    BYTE PTR [eax],al
30002eae:	00 00                	add    BYTE PTR [eax],al
30002eb0:	f8                   	clc    
30002eb1:	02 00                	add    al,BYTE PTR [eax]
30002eb3:	00 44 d9 ff          	add    BYTE PTR [ecx+ebx*8-0x1],al
30002eb7:	ff                   	(bad)  
30002eb8:	ba 00 00 00 00       	mov    edx,0x0
30002ebd:	41                   	inc    ecx
30002ebe:	0e                   	push   cs
30002ebf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ec5:	44                   	inc    esp
30002ec6:	83 03 02             	add    DWORD PTR [ebx],0x2
30002ec9:	b2 c5                	mov    dl,0xc5
30002ecb:	c3                   	ret    
30002ecc:	0c 04                	or     al,0x4
30002ece:	04 00                	add    al,0x0
30002ed0:	24 00                	and    al,0x0
30002ed2:	00 00                	add    BYTE PTR [eax],al
30002ed4:	1c 03                	sbb    al,0x3
30002ed6:	00 00                	add    BYTE PTR [eax],al
30002ed8:	dc d9                	(bad)  
30002eda:	ff                   	(bad)  
30002edb:	ff                   	(bad)  
30002edc:	3a 00                	cmp    al,BYTE PTR [eax]
30002ede:	00 00                	add    BYTE PTR [eax],al
30002ee0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002ee3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ee9:	45                   	inc    ebp
30002eea:	86 03                	xchg   BYTE PTR [ebx],al
30002eec:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
30002ef0:	41                   	inc    ecx
30002ef1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002ef5:	04 04                	add    al,0x4
30002ef7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002efa:	00 00                	add    BYTE PTR [eax],al
30002efc:	44                   	inc    esp
30002efd:	03 00                	add    eax,DWORD PTR [eax]
30002eff:	00 ee                	add    dh,ch
30002f01:	d9 ff                	fcos   
30002f03:	ff                   	(bad)  
30002f04:	3c 00                	cmp    al,0x0
30002f06:	00 00                	add    BYTE PTR [eax],al
30002f08:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f11:	45                   	inc    ebp
30002f12:	86 03                	xchg   BYTE PTR [ebx],al
30002f14:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
30002f18:	41                   	inc    ecx
30002f19:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002f1d:	04 04                	add    al,0x4
30002f1f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002f22:	00 00                	add    BYTE PTR [eax],al
30002f24:	6c                   	ins    BYTE PTR es:[edi],dx
30002f25:	03 00                	add    eax,DWORD PTR [eax]
30002f27:	00 02                	add    BYTE PTR [edx],al
30002f29:	da ff                	(bad)  
30002f2b:	ff                   	(bad)  
30002f2c:	3e 00 00             	add    BYTE PTR ds:[eax],al
30002f2f:	00 00                	add    BYTE PTR [eax],al
30002f31:	41                   	inc    ecx
30002f32:	0e                   	push   cs
30002f33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f39:	45                   	inc    ebp
30002f3a:	86 03                	xchg   BYTE PTR [ebx],al
30002f3c:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
30002f40:	41                   	inc    ecx
30002f41:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002f45:	04 04                	add    al,0x4
30002f47:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002f4a:	00 00                	add    BYTE PTR [eax],al
30002f4c:	94                   	xchg   esp,eax
30002f4d:	03 00                	add    eax,DWORD PTR [eax]
30002f4f:	00 18                	add    BYTE PTR [eax],bl
30002f51:	da ff                	(bad)  
30002f53:	ff 40 00             	inc    DWORD PTR [eax+0x0]
30002f56:	00 00                	add    BYTE PTR [eax],al
30002f58:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f61:	45                   	inc    ebp
30002f62:	86 03                	xchg   BYTE PTR [ebx],al
30002f64:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
30002f6b:	c5 
30002f6c:	0c 04                	or     al,0x4
30002f6e:	04 00                	add    al,0x0
30002f70:	24 00                	and    al,0x0
30002f72:	00 00                	add    BYTE PTR [eax],al
30002f74:	bc 03 00 00 30       	mov    esp,0x30000003
30002f79:	da ff                	(bad)  
30002f7b:	ff 42 00             	inc    DWORD PTR [edx+0x0]
30002f7e:	00 00                	add    BYTE PTR [eax],al
30002f80:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f89:	45                   	inc    ebp
30002f8a:	86 03                	xchg   BYTE PTR [ebx],al
30002f8c:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
30002f90:	41                   	inc    ecx
30002f91:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002f95:	04 04                	add    al,0x4
30002f97:	00 20                	add    BYTE PTR [eax],ah
30002f99:	00 00                	add    BYTE PTR [eax],al
30002f9b:	00 e4                	add    ah,ah
30002f9d:	03 00                	add    eax,DWORD PTR [eax]
30002f9f:	00 4a da             	add    BYTE PTR [edx-0x26],cl
30002fa2:	ff                   	(bad)  
30002fa3:	ff a5 00 00 00 00    	jmp    DWORD PTR [ebp+0x0]
30002fa9:	41                   	inc    ecx
30002faa:	0e                   	push   cs
30002fab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fb1:	44                   	inc    esp
30002fb2:	83 03 02             	add    DWORD PTR [ebx],0x2
30002fb5:	9d                   	popf   
30002fb6:	c5 c3 0c             	(bad)  
30002fb9:	04 04                	add    al,0x4
30002fbb:	00 20                	add    BYTE PTR [eax],ah
30002fbd:	00 00                	add    BYTE PTR [eax],al
30002fbf:	00 08                	add    BYTE PTR [eax],cl
30002fc1:	04 00                	add    al,0x0
30002fc3:	00 cb                	add    bl,cl
30002fc5:	da ff                	(bad)  
30002fc7:	ff 1f                	call   FWORD PTR [edi]
30002fc9:	00 00                	add    BYTE PTR [eax],al
30002fcb:	00 00                	add    BYTE PTR [eax],al
30002fcd:	41                   	inc    ecx
30002fce:	0e                   	push   cs
30002fcf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fd5:	44                   	inc    esp
30002fd6:	83 03 56             	add    DWORD PTR [ebx],0x56
30002fd9:	c3                   	ret    
30002fda:	41                   	inc    ecx
30002fdb:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002fde:	04 00                	add    al,0x0
30002fe0:	1c 00                	sbb    al,0x0
30002fe2:	00 00                	add    BYTE PTR [eax],al
30002fe4:	2c 04                	sub    al,0x4
30002fe6:	00 00                	add    BYTE PTR [eax],al
30002fe8:	c6                   	(bad)  
30002fe9:	da ff                	(bad)  
30002feb:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002fee:	00 00                	add    BYTE PTR [eax],al
30002ff0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002ff3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ff9:	70 c5                	jo     30002fc0 <__x86.get_pc_thunk.cx+0x40c>
30002ffb:	0c 04                	or     al,0x4
30002ffd:	04 00                	add    al,0x0
30002fff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003002:	00 00                	add    BYTE PTR [eax],al
30003004:	4c                   	dec    esp
30003005:	04 00                	add    al,0x0
30003007:	00 da                	add    dl,bl
30003009:	da ff                	(bad)  
3000300b:	ff 34 00             	push   DWORD PTR [eax+eax*1]
3000300e:	00 00                	add    BYTE PTR [eax],al
30003010:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003013:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003019:	70 c5                	jo     30002fe0 <__x86.get_pc_thunk.cx+0x42c>
3000301b:	0c 04                	or     al,0x4
3000301d:	04 00                	add    al,0x0
3000301f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003022:	00 00                	add    BYTE PTR [eax],al
30003024:	6c                   	ins    BYTE PTR es:[edi],dx
30003025:	04 00                	add    al,0x0
30003027:	00 ee                	add    dh,ch
30003029:	da ff                	(bad)  
3000302b:	ff 34 00             	push   DWORD PTR [eax+eax*1]
3000302e:	00 00                	add    BYTE PTR [eax],al
30003030:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003033:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003039:	70 c5                	jo     30003000 <__x86.get_pc_thunk.cx+0x44c>
3000303b:	0c 04                	or     al,0x4
3000303d:	04 00                	add    al,0x0
3000303f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003042:	00 00                	add    BYTE PTR [eax],al
30003044:	8c 04 00             	mov    WORD PTR [eax+eax*1],es
30003047:	00 02                	add    BYTE PTR [edx],al
30003049:	db ff                	(bad)  
3000304b:	ff 37                	push   DWORD PTR [edi]
3000304d:	00 00                	add    BYTE PTR [eax],al
3000304f:	00 00                	add    BYTE PTR [eax],al
30003051:	41                   	inc    ecx
30003052:	0e                   	push   cs
30003053:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003059:	73 c5                	jae    30003020 <__x86.get_pc_thunk.cx+0x46c>
3000305b:	0c 04                	or     al,0x4
3000305d:	04 00                	add    al,0x0
3000305f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003062:	00 00                	add    BYTE PTR [eax],al
30003064:	ac                   	lods   al,BYTE PTR ds:[esi]
30003065:	04 00                	add    al,0x0
30003067:	00 19                	add    BYTE PTR [ecx],bl
30003069:	db ff                	(bad)  
3000306b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
3000306e:	00 00                	add    BYTE PTR [eax],al
30003070:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003073:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003079:	45                   	inc    ebp
3000307a:	86 03                	xchg   BYTE PTR [ebx],al
3000307c:	83 04 02 6a          	add    DWORD PTR [edx+eax*1],0x6a
30003080:	c3                   	ret    
30003081:	41                   	inc    ecx
30003082:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003086:	04 04                	add    al,0x4
30003088:	1c 00                	sbb    al,0x0
3000308a:	00 00                	add    BYTE PTR [eax],al
3000308c:	d4 04                	aam    0x4
3000308e:	00 00                	add    BYTE PTR [eax],al
30003090:	66                   	data16
30003091:	db ff                	(bad)  
30003093:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003099:	41                   	inc    ecx
3000309a:	0e                   	push   cs
3000309b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030a1:	59                   	pop    ecx
300030a2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300030a5:	04 00                	add    al,0x0
300030a7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300030aa:	00 00                	add    BYTE PTR [eax],al
300030ac:	f4                   	hlt    
300030ad:	04 00                	add    al,0x0
300030af:	00 63 db             	add    BYTE PTR [ebx-0x25],ah
300030b2:	ff                   	(bad)  
300030b3:	ff 29                	jmp    FWORD PTR [ecx]
300030b5:	00 00                	add    BYTE PTR [eax],al
300030b7:	00 00                	add    BYTE PTR [eax],al
300030b9:	41                   	inc    ecx
300030ba:	0e                   	push   cs
300030bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030c1:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
300030c5:	04 00                	add    al,0x0
300030c7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300030ca:	00 00                	add    BYTE PTR [eax],al
300030cc:	14 05                	adc    al,0x5
300030ce:	00 00                	add    BYTE PTR [eax],al
300030d0:	6c                   	ins    BYTE PTR es:[edi],dx
300030d1:	db ff                	(bad)  
300030d3:	ff 29                	jmp    FWORD PTR [ecx]
300030d5:	00 00                	add    BYTE PTR [eax],al
300030d7:	00 00                	add    BYTE PTR [eax],al
300030d9:	41                   	inc    ecx
300030da:	0e                   	push   cs
300030db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030e1:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
300030e5:	04 00                	add    al,0x0
300030e7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300030ea:	00 00                	add    BYTE PTR [eax],al
300030ec:	34 05                	xor    al,0x5
300030ee:	00 00                	add    BYTE PTR [eax],al
300030f0:	75 db                	jne    300030cd <__x86.get_pc_thunk.cx+0x519>
300030f2:	ff                   	(bad)  
300030f3:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
300030f7:	00 00                	add    BYTE PTR [eax],al
300030f9:	41                   	inc    ecx
300030fa:	0e                   	push   cs
300030fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003101:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
30003104:	0c 04                	or     al,0x4
30003106:	04 00                	add    al,0x0
30003108:	20 00                	and    BYTE PTR [eax],al
3000310a:	00 00                	add    BYTE PTR [eax],al
3000310c:	54                   	push   esp
3000310d:	05 00 00 a1 db       	add    eax,0xdba10000
30003112:	ff                   	(bad)  
30003113:	ff f4                	push   esp
30003115:	01 00                	add    DWORD PTR [eax],eax
30003117:	00 00                	add    BYTE PTR [eax],al
30003119:	41                   	inc    ecx
3000311a:	0e                   	push   cs
3000311b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003121:	44                   	inc    esp
30003122:	83 03 03             	add    DWORD PTR [ebx],0x3
30003125:	ec                   	in     al,dx
30003126:	01 c5                	add    ebp,eax
30003128:	c3                   	ret    
30003129:	0c 04                	or     al,0x4
3000312b:	04 1c                	add    al,0x1c
3000312d:	00 00                	add    BYTE PTR [eax],al
3000312f:	00 78 05             	add    BYTE PTR [eax+0x5],bh
30003132:	00 00                	add    BYTE PTR [eax],al
30003134:	71 dd                	jno    30003113 <__x86.get_pc_thunk.cx+0x55f>
30003136:	ff                   	(bad)  
30003137:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
3000313a:	00 00                	add    BYTE PTR [eax],al
3000313c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000313f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003145:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
30003148:	0c 04                	or     al,0x4
3000314a:	04 00                	add    al,0x0
3000314c:	1c 00                	sbb    al,0x0
3000314e:	00 00                	add    BYTE PTR [eax],al
30003150:	98                   	cwde   
30003151:	05 00 00 a0 dd       	add    eax,0xdda00000
30003156:	ff                   	(bad)  
30003157:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
3000315a:	00 00                	add    BYTE PTR [eax],al
3000315c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000315f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003165:	58                   	pop    eax
30003166:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003169:	04 00                	add    al,0x0
3000316b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000316e:	00 00                	add    BYTE PTR [eax],al
30003170:	b8 05 00 00 9c       	mov    eax,0x9c000005
30003175:	dd ff                	(bad)  
30003177:	ff 10                	call   DWORD PTR [eax]
30003179:	00 00                	add    BYTE PTR [eax],al
3000317b:	00 00                	add    BYTE PTR [eax],al
3000317d:	41                   	inc    ecx
3000317e:	0e                   	push   cs
3000317f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003185:	4c                   	dec    esp
30003186:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003189:	04 00                	add    al,0x0
3000318b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000318e:	00 00                	add    BYTE PTR [eax],al
30003190:	d8 05 00 00 8c dd    	fadd   DWORD PTR ds:0xdd8c0000
30003196:	ff                   	(bad)  
30003197:	ff 20                	jmp    DWORD PTR [eax]
30003199:	00 00                	add    BYTE PTR [eax],al
3000319b:	00 00                	add    BYTE PTR [eax],al
3000319d:	41                   	inc    ecx
3000319e:	0e                   	push   cs
3000319f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031a5:	5c                   	pop    esp
300031a6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300031a9:	04 00                	add    al,0x0
300031ab:	00 20                	add    BYTE PTR [eax],ah
300031ad:	00 00                	add    BYTE PTR [eax],al
300031af:	00 f8                	add    al,bh
300031b1:	05 00 00 8c dd       	add    eax,0xdd8c0000
300031b6:	ff                   	(bad)  
300031b7:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
300031bb:	00 00                	add    BYTE PTR [eax],al
300031bd:	41                   	inc    ecx
300031be:	0e                   	push   cs
300031bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031c5:	44                   	inc    esp
300031c6:	83 03 02             	add    DWORD PTR [ebx],0x2
300031c9:	64                   	fs
300031ca:	c5 c3 0c             	(bad)  
300031cd:	04 04                	add    al,0x4
300031cf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300031d2:	00 00                	add    BYTE PTR [eax],al
300031d4:	1c 06                	sbb    al,0x6
300031d6:	00 00                	add    BYTE PTR [eax],al
300031d8:	d4 dd                	aam    0xdd
300031da:	ff                   	(bad)  
300031db:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
300031e1:	41                   	inc    ecx
300031e2:	0e                   	push   cs
300031e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031e9:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
300031ef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300031f2:	00 00                	add    BYTE PTR [eax],al
300031f4:	3c 06                	cmp    al,0x6
300031f6:	00 00                	add    BYTE PTR [eax],al
300031f8:	3b de                	cmp    ebx,esi
300031fa:	ff                   	(bad)  
300031fb:	ff                   	(bad)  
300031fc:	39 00                	cmp    DWORD PTR [eax],eax
300031fe:	00 00                	add    BYTE PTR [eax],al
30003200:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003203:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003209:	75 c5                	jne    300031d0 <__x86.get_pc_thunk.cx+0x61c>
3000320b:	0c 04                	or     al,0x4
3000320d:	04 00                	add    al,0x0
3000320f:	00 20                	add    BYTE PTR [eax],ah
30003211:	00 00                	add    BYTE PTR [eax],al
30003213:	00 5c 06 00          	add    BYTE PTR [esi+eax*1+0x0],bl
30003217:	00 54 de ff          	add    BYTE PTR [esi+ebx*8-0x1],dl
3000321b:	ff d4                	call   esp
3000321d:	01 00                	add    DWORD PTR [eax],eax
3000321f:	00 00                	add    BYTE PTR [eax],al
30003221:	41                   	inc    ecx
30003222:	0e                   	push   cs
30003223:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003229:	44                   	inc    esp
3000322a:	83 03 03             	add    DWORD PTR [ebx],0x3
3000322d:	cc                   	int3   
3000322e:	01 c5                	add    ebp,eax
30003230:	c3                   	ret    
30003231:	0c 04                	or     al,0x4
30003233:	04 1c                	add    al,0x1c
30003235:	00 00                	add    BYTE PTR [eax],al
30003237:	00 80 06 00 00 04    	add    BYTE PTR [eax+0x4000006],al
3000323d:	e0 ff                	loopne 3000323e <__x86.get_pc_thunk.cx+0x68a>
3000323f:	ff 20                	jmp    DWORD PTR [eax]
30003241:	00 00                	add    BYTE PTR [eax],al
30003243:	00 00                	add    BYTE PTR [eax],al
30003245:	41                   	inc    ecx
30003246:	0e                   	push   cs
30003247:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000324d:	5c                   	pop    esp
3000324e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003251:	04 00                	add    al,0x0
30003253:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003256:	00 00                	add    BYTE PTR [eax],al
30003258:	a0 06 00 00 04       	mov    al,ds:0x4000006
3000325d:	e0 ff                	loopne 3000325e <__x86.get_pc_thunk.cx+0x6aa>
3000325f:	ff 1b                	call   FWORD PTR [ebx]
30003261:	00 00                	add    BYTE PTR [eax],al
30003263:	00 00                	add    BYTE PTR [eax],al
30003265:	41                   	inc    ecx
30003266:	0e                   	push   cs
30003267:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000326d:	57                   	push   edi
3000326e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003271:	04 00                	add    al,0x0
30003273:	00 20                	add    BYTE PTR [eax],ah
30003275:	00 00                	add    BYTE PTR [eax],al
30003277:	00 c0                	add    al,al
30003279:	06                   	push   es
3000327a:	00 00                	add    BYTE PTR [eax],al
3000327c:	ff df                	call   <internal disassembler error>
3000327e:	ff                   	(bad)  
3000327f:	ff 32                	push   DWORD PTR [edx]
30003281:	00 00                	add    BYTE PTR [eax],al
30003283:	00 00                	add    BYTE PTR [eax],al
30003285:	41                   	inc    ecx
30003286:	0e                   	push   cs
30003287:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000328d:	44                   	inc    esp
3000328e:	83 03 6a             	add    DWORD PTR [ebx],0x6a
30003291:	c5 c3 0c             	(bad)  
30003294:	04 04                	add    al,0x4
30003296:	00 00                	add    BYTE PTR [eax],al
30003298:	1c 00                	sbb    al,0x0
3000329a:	00 00                	add    BYTE PTR [eax],al
3000329c:	e4 06                	in     al,0x6
3000329e:	00 00                	add    BYTE PTR [eax],al
300032a0:	10 e0                	adc    al,ah
300032a2:	ff                   	(bad)  
300032a3:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
300032a9:	41                   	inc    ecx
300032aa:	0e                   	push   cs
300032ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032b1:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
300032b7:	04 1c                	add    al,0x1c
300032b9:	00 00                	add    BYTE PTR [eax],al
300032bb:	00 04 07             	add    BYTE PTR [edi+eax*1],al
300032be:	00 00                	add    BYTE PTR [eax],al
300032c0:	8c e1                	mov    ecx,fs
300032c2:	ff                   	(bad)  
300032c3:	ff c7                	inc    edi
300032c5:	00 00                	add    BYTE PTR [eax],al
300032c7:	00 00                	add    BYTE PTR [eax],al
300032c9:	41                   	inc    ecx
300032ca:	0e                   	push   cs
300032cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032d1:	02 c3                	add    al,bl
300032d3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300032d6:	04 00                	add    al,0x0
300032d8:	1c 00                	sbb    al,0x0
300032da:	00 00                	add    BYTE PTR [eax],al
300032dc:	24 07                	and    al,0x7
300032de:	00 00                	add    BYTE PTR [eax],al
300032e0:	33 e2                	xor    esp,edx
300032e2:	ff                   	(bad)  
300032e3:	ff 20                	jmp    DWORD PTR [eax]
300032e5:	00 00                	add    BYTE PTR [eax],al
300032e7:	00 00                	add    BYTE PTR [eax],al
300032e9:	41                   	inc    ecx
300032ea:	0e                   	push   cs
300032eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032f1:	5c                   	pop    esp
300032f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300032f5:	04 00                	add    al,0x0
300032f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300032fa:	00 00                	add    BYTE PTR [eax],al
300032fc:	44                   	inc    esp
300032fd:	07                   	pop    es
300032fe:	00 00                	add    BYTE PTR [eax],al
30003300:	34 e2                	xor    al,0xe2
30003302:	ff                   	(bad)  
30003303:	ff 14 00             	call   DWORD PTR [eax+eax*1]
30003306:	00 00                	add    BYTE PTR [eax],al
30003308:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000330b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003311:	50                   	push   eax
30003312:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003315:	04 00                	add    al,0x0
30003317:	00 20                	add    BYTE PTR [eax],ah
30003319:	00 00                	add    BYTE PTR [eax],al
3000331b:	00 64 07 00          	add    BYTE PTR [edi+eax*1+0x0],ah
3000331f:	00 28                	add    BYTE PTR [eax],ch
30003321:	e2 ff                	loop   30003322 <__x86.get_pc_thunk.cx+0x76e>
30003323:	ff 29                	jmp    FWORD PTR [ecx]
30003325:	00 00                	add    BYTE PTR [eax],al
30003327:	00 00                	add    BYTE PTR [eax],al
30003329:	41                   	inc    ecx
3000332a:	0e                   	push   cs
3000332b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003331:	44                   	inc    esp
30003332:	83 03 61             	add    DWORD PTR [ebx],0x61
30003335:	c5 c3 0c             	(bad)  
30003338:	04 04                	add    al,0x4
3000333a:	00 00                	add    BYTE PTR [eax],al
3000333c:	20 00                	and    BYTE PTR [eax],al
3000333e:	00 00                	add    BYTE PTR [eax],al
30003340:	88 07                	mov    BYTE PTR [edi],al
30003342:	00 00                	add    BYTE PTR [eax],al
30003344:	30 e2                	xor    dl,ah
30003346:	ff                   	(bad)  
30003347:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
3000334e:	0e                   	push   cs
3000334f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003355:	44                   	inc    esp
30003356:	83 03 02             	add    DWORD PTR [ebx],0x2
30003359:	7c c5                	jl     30003320 <__x86.get_pc_thunk.cx+0x76c>
3000335b:	c3                   	ret    
3000335c:	0c 04                	or     al,0x4
3000335e:	04 00                	add    al,0x0
30003360:	20 00                	and    BYTE PTR [eax],al
30003362:	00 00                	add    BYTE PTR [eax],al
30003364:	ac                   	lods   al,BYTE PTR ds:[esi]
30003365:	07                   	pop    es
30003366:	00 00                	add    BYTE PTR [eax],al
30003368:	90                   	nop
30003369:	e2 ff                	loop   3000336a <__x86.get_pc_thunk.cx+0x7b6>
3000336b:	ff                   	(bad)  
3000336c:	3e 00 00             	add    BYTE PTR ds:[eax],al
3000336f:	00 00                	add    BYTE PTR [eax],al
30003371:	41                   	inc    ecx
30003372:	0e                   	push   cs
30003373:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003379:	44                   	inc    esp
3000337a:	83 03 76             	add    DWORD PTR [ebx],0x76
3000337d:	c5 c3 0c             	(bad)  
30003380:	04 04                	add    al,0x4
30003382:	00 00                	add    BYTE PTR [eax],al
30003384:	20 00                	and    BYTE PTR [eax],al
30003386:	00 00                	add    BYTE PTR [eax],al
30003388:	d0 07                	rol    BYTE PTR [edi],1
3000338a:	00 00                	add    BYTE PTR [eax],al
3000338c:	aa                   	stos   BYTE PTR es:[edi],al
3000338d:	e2 ff                	loop   3000338e <__x86.get_pc_thunk.cx+0x7da>
3000338f:	ff                   	(bad)  
30003390:	3e 00 00             	add    BYTE PTR ds:[eax],al
30003393:	00 00                	add    BYTE PTR [eax],al
30003395:	41                   	inc    ecx
30003396:	0e                   	push   cs
30003397:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000339d:	44                   	inc    esp
3000339e:	83 03 76             	add    DWORD PTR [ebx],0x76
300033a1:	c5 c3 0c             	(bad)  
300033a4:	04 04                	add    al,0x4
300033a6:	00 00                	add    BYTE PTR [eax],al
300033a8:	1c 00                	sbb    al,0x0
300033aa:	00 00                	add    BYTE PTR [eax],al
300033ac:	f4                   	hlt    
300033ad:	07                   	pop    es
300033ae:	00 00                	add    BYTE PTR [eax],al
300033b0:	c4 e2 ff ff          	(bad)  
300033b4:	6f                   	outs   dx,DWORD PTR ds:[esi]
300033b5:	00 00                	add    BYTE PTR [eax],al
300033b7:	00 00                	add    BYTE PTR [eax],al
300033b9:	41                   	inc    ecx
300033ba:	0e                   	push   cs
300033bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033c1:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
300033c4:	0c 04                	or     al,0x4
300033c6:	04 00                	add    al,0x0
300033c8:	24 00                	and    al,0x0
300033ca:	00 00                	add    BYTE PTR [eax],al
300033cc:	14 08                	adc    al,0x8
300033ce:	00 00                	add    BYTE PTR [eax],al
300033d0:	14 e3                	adc    al,0xe3
300033d2:	ff                   	(bad)  
300033d3:	ff 5e 00             	call   FWORD PTR [esi+0x0]
300033d6:	00 00                	add    BYTE PTR [eax],al
300033d8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300033db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033e1:	45                   	inc    ebp
300033e2:	86 03                	xchg   BYTE PTR [ebx],al
300033e4:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
300033e8:	c3                   	ret    
300033e9:	41                   	inc    ecx
300033ea:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300033ee:	04 04                	add    al,0x4
300033f0:	1c 00                	sbb    al,0x0
300033f2:	00 00                	add    BYTE PTR [eax],al
300033f4:	3c 08                	cmp    al,0x8
300033f6:	00 00                	add    BYTE PTR [eax],al
300033f8:	4c                   	dec    esp
300033f9:	e3 ff                	jecxz  300033fa <__x86.get_pc_thunk.cx+0x846>
300033fb:	ff 40 00             	inc    DWORD PTR [eax+0x0]
300033fe:	00 00                	add    BYTE PTR [eax],al
30003400:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003403:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003409:	7c c5                	jl     300033d0 <__x86.get_pc_thunk.cx+0x81c>
3000340b:	0c 04                	or     al,0x4
3000340d:	04 00                	add    al,0x0
3000340f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003412:	00 00                	add    BYTE PTR [eax],al
30003414:	5c                   	pop    esp
30003415:	08 00                	or     BYTE PTR [eax],al
30003417:	00 6c e3 ff          	add    BYTE PTR [ebx+eiz*8-0x1],ch
3000341b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
3000341e:	00 00                	add    BYTE PTR [eax],al
30003420:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003423:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003429:	7c c5                	jl     300033f0 <__x86.get_pc_thunk.cx+0x83c>
3000342b:	0c 04                	or     al,0x4
3000342d:	04 00                	add    al,0x0
3000342f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003432:	00 00                	add    BYTE PTR [eax],al
30003434:	7c 08                	jl     3000343e <__x86.get_pc_thunk.cx+0x88a>
30003436:	00 00                	add    BYTE PTR [eax],al
30003438:	8c e3                	mov    ebx,fs
3000343a:	ff                   	(bad)  
3000343b:	ff 47 00             	inc    DWORD PTR [edi+0x0]
3000343e:	00 00                	add    BYTE PTR [eax],al
30003440:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003443:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003449:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
3000344c:	0c 04                	or     al,0x4
3000344e:	04 00                	add    al,0x0
30003450:	1c 00                	sbb    al,0x0
30003452:	00 00                	add    BYTE PTR [eax],al
30003454:	9c                   	pushf  
30003455:	08 00                	or     BYTE PTR [eax],al
30003457:	00 b4 e3 ff ff 30 00 	add    BYTE PTR [ebx+eiz*8+0x30ffff],dh
3000345e:	00 00                	add    BYTE PTR [eax],al
30003460:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003463:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003469:	6c                   	ins    BYTE PTR es:[edi],dx
3000346a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000346d:	04 00                	add    al,0x0
3000346f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003472:	00 00                	add    BYTE PTR [eax],al
30003474:	bc 08 00 00 c4       	mov    esp,0xc4000008
30003479:	e3 ff                	jecxz  3000347a <__x86.get_pc_thunk.cx+0x8c6>
3000347b:	ff 59 00             	call   FWORD PTR [ecx+0x0]
3000347e:	00 00                	add    BYTE PTR [eax],al
30003480:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003483:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003489:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
3000348c:	0c 04                	or     al,0x4
3000348e:	04 00                	add    al,0x0
30003490:	1c 00                	sbb    al,0x0
30003492:	00 00                	add    BYTE PTR [eax],al
30003494:	dc 08                	fmul   QWORD PTR [eax]
30003496:	00 00                	add    BYTE PTR [eax],al
30003498:	00 e4                	add    ah,ah
3000349a:	ff                   	(bad)  
3000349b:	ff 31                	push   DWORD PTR [ecx]
3000349d:	00 00                	add    BYTE PTR [eax],al
3000349f:	00 00                	add    BYTE PTR [eax],al
300034a1:	41                   	inc    ecx
300034a2:	0e                   	push   cs
300034a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034a9:	6d                   	ins    DWORD PTR es:[edi],dx
300034aa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034ad:	04 00                	add    al,0x0
300034af:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300034b2:	00 00                	add    BYTE PTR [eax],al
300034b4:	fc                   	cld    
300034b5:	08 00                	or     BYTE PTR [eax],al
300034b7:	00 11                	add    BYTE PTR [ecx],dl
300034b9:	e4 ff                	in     al,0xff
300034bb:	ff 31                	push   DWORD PTR [ecx]
300034bd:	00 00                	add    BYTE PTR [eax],al
300034bf:	00 00                	add    BYTE PTR [eax],al
300034c1:	41                   	inc    ecx
300034c2:	0e                   	push   cs
300034c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034c9:	6d                   	ins    DWORD PTR es:[edi],dx
300034ca:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034cd:	04 00                	add    al,0x0
300034cf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300034d2:	00 00                	add    BYTE PTR [eax],al
300034d4:	1c 09                	sbb    al,0x9
300034d6:	00 00                	add    BYTE PTR [eax],al
300034d8:	24 e4                	and    al,0xe4
300034da:	ff                   	(bad)  
300034db:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
300034de:	00 00                	add    BYTE PTR [eax],al
300034e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300034e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034e9:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
300034ec:	0c 04                	or     al,0x4
300034ee:	04 00                	add    al,0x0
300034f0:	1c 00                	sbb    al,0x0
300034f2:	00 00                	add    BYTE PTR [eax],al
300034f4:	3c 09                	cmp    al,0x9
300034f6:	00 00                	add    BYTE PTR [eax],al
300034f8:	6b e4 ff             	imul   esp,esp,0xffffffff
300034fb:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
300034fe:	00 00                	add    BYTE PTR [eax],al
30003500:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003503:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003509:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
3000350c:	0c 04                	or     al,0x4
3000350e:	04 00                	add    al,0x0
30003510:	1c 00                	sbb    al,0x0
30003512:	00 00                	add    BYTE PTR [eax],al
30003514:	5c                   	pop    esp
30003515:	09 00                	or     DWORD PTR [eax],eax
30003517:	00 b4 e4 ff ff 60 00 	add    BYTE PTR [esp+eiz*8+0x60ffff],dh
3000351e:	00 00                	add    BYTE PTR [eax],al
30003520:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003523:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003529:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
3000352d:	04 04                	add    al,0x4
3000352f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003532:	00 00                	add    BYTE PTR [eax],al
30003534:	7c 09                	jl     3000353f <__x86.get_pc_thunk.cx+0x98b>
30003536:	00 00                	add    BYTE PTR [eax],al
30003538:	f4                   	hlt    
30003539:	e4 ff                	in     al,0xff
3000353b:	ff 20                	jmp    DWORD PTR [eax]
3000353d:	00 00                	add    BYTE PTR [eax],al
3000353f:	00 00                	add    BYTE PTR [eax],al
30003541:	41                   	inc    ecx
30003542:	0e                   	push   cs
30003543:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003549:	5c                   	pop    esp
3000354a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000354d:	04 00                	add    al,0x0
3000354f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003552:	00 00                	add    BYTE PTR [eax],al
30003554:	9c                   	pushf  
30003555:	09 00                	or     DWORD PTR [eax],eax
30003557:	00 f4                	add    ah,dh
30003559:	e4 ff                	in     al,0xff
3000355b:	ff                   	(bad)  
3000355c:	7d 01                	jge    3000355f <__x86.get_pc_thunk.cx+0x9ab>
3000355e:	00 00                	add    BYTE PTR [eax],al
30003560:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003563:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003569:	46                   	inc    esi
3000356a:	87 03                	xchg   DWORD PTR [ebx],eax
3000356c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
3000356f:	05 03 70 01 c3       	add    eax,0xc3017003
30003574:	41                   	inc    ecx
30003575:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003579:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000357c:	04 00                	add    al,0x0
3000357e:	00 00                	add    BYTE PTR [eax],al
30003580:	1c 00                	sbb    al,0x0
30003582:	00 00                	add    BYTE PTR [eax],al
30003584:	cc                   	int3   
30003585:	09 00                	or     DWORD PTR [eax],eax
30003587:	00 44 e6 ff          	add    BYTE PTR [esi+eiz*8-0x1],al
3000358b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003591:	41                   	inc    ecx
30003592:	0e                   	push   cs
30003593:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003599:	59                   	pop    ecx
3000359a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000359d:	04 00                	add    al,0x0
3000359f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
300035a2:	00 00                	add    BYTE PTR [eax],al
300035a4:	ec                   	in     al,dx
300035a5:	09 00                	or     DWORD PTR [eax],eax
300035a7:	00 44 e6 ff          	add    BYTE PTR [esi+eiz*8-0x1],al
300035ab:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
300035b2:	0e                   	push   cs
300035b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035b9:	46                   	inc    esi
300035ba:	87 03                	xchg   DWORD PTR [ebx],eax
300035bc:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
300035bf:	05 03 8f 01 c3       	add    eax,0xc3018f03
300035c4:	41                   	inc    ecx
300035c5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
300035c9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300035cc:	04 00                	add    al,0x0
300035ce:	00 00                	add    BYTE PTR [eax],al
300035d0:	20 00                	and    BYTE PTR [eax],al
300035d2:	00 00                	add    BYTE PTR [eax],al
300035d4:	1c 0a                	sbb    al,0xa
300035d6:	00 00                	add    BYTE PTR [eax],al
300035d8:	b0 e7                	mov    al,0xe7
300035da:	ff                   	(bad)  
300035db:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
300035e1:	41                   	inc    ecx
300035e2:	0e                   	push   cs
300035e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035e9:	44                   	inc    esp
300035ea:	83 03 02             	add    DWORD PTR [ebx],0x2
300035ed:	8e c5                	mov    es,ebp
300035ef:	c3                   	ret    
300035f0:	0c 04                	or     al,0x4
300035f2:	04 00                	add    al,0x0
300035f4:	1c 00                	sbb    al,0x0
300035f6:	00 00                	add    BYTE PTR [eax],al
300035f8:	40                   	inc    eax
300035f9:	0a 00                	or     al,BYTE PTR [eax]
300035fb:	00 22                	add    BYTE PTR [edx],ah
300035fd:	e8 ff ff 20 00       	call   30213601 <ticksToWait+0x20ef71>
30003602:	00 00                	add    BYTE PTR [eax],al
30003604:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003607:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000360d:	5c                   	pop    esp
3000360e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003611:	04 00                	add    al,0x0
30003613:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003616:	00 00                	add    BYTE PTR [eax],al
30003618:	60                   	pusha  
30003619:	0a 00                	or     al,BYTE PTR [eax]
3000361b:	00 24 e8             	add    BYTE PTR [eax+ebp*8],ah
3000361e:	ff                   	(bad)  
3000361f:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
30003622:	00 00                	add    BYTE PTR [eax],al
30003624:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003627:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000362d:	42                   	inc    edx
3000362e:	86 03                	xchg   BYTE PTR [ebx],al
30003630:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
30003634:	c3                   	ret    
30003635:	41                   	inc    ecx
30003636:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
3000363a:	04 04                	add    al,0x4
3000363c:	1c 00                	sbb    al,0x0
3000363e:	00 00                	add    BYTE PTR [eax],al
30003640:	88 0a                	mov    BYTE PTR [edx],cl
30003642:	00 00                	add    BYTE PTR [eax],al
30003644:	6a e8                	push   0xffffffe8
30003646:	ff                   	(bad)  
30003647:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
3000364d:	41                   	inc    ecx
3000364e:	0e                   	push   cs
3000364f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003655:	59                   	pop    ecx
30003656:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003659:	04 00                	add    al,0x0
3000365b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
3000365e:	00 00                	add    BYTE PTR [eax],al
30003660:	a8 0a                	test   al,0xa
30003662:	00 00                	add    BYTE PTR [eax],al
30003664:	68 e8 ff ff 44       	push   0x44ffffe8
30003669:	00 00                	add    BYTE PTR [eax],al
3000366b:	00 00                	add    BYTE PTR [eax],al
3000366d:	41                   	inc    ecx
3000366e:	0e                   	push   cs
3000366f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003675:	45                   	inc    ebp
30003676:	86 03                	xchg   BYTE PTR [ebx],al
30003678:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
3000367c:	41                   	inc    ecx
3000367d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003681:	04 04                	add    al,0x4
30003683:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003686:	00 00                	add    BYTE PTR [eax],al
30003688:	d0 0a                	ror    BYTE PTR [edx],1
3000368a:	00 00                	add    BYTE PTR [eax],al
3000368c:	84 e8                	test   al,ch
3000368e:	ff                   	(bad)  
3000368f:	ff 19                	call   FWORD PTR [ecx]
30003691:	03 00                	add    eax,DWORD PTR [eax]
30003693:	00 00                	add    BYTE PTR [eax],al
30003695:	41                   	inc    ecx
30003696:	0e                   	push   cs
30003697:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000369d:	44                   	inc    esp
3000369e:	83 03 03             	add    DWORD PTR [ebx],0x3
300036a1:	10 03                	adc    BYTE PTR [ebx],al
300036a3:	c3                   	ret    
300036a4:	41                   	inc    ecx
300036a5:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300036a8:	04 00                	add    al,0x0
300036aa:	00 00                	add    BYTE PTR [eax],al
300036ac:	1c 00                	sbb    al,0x0
300036ae:	00 00                	add    BYTE PTR [eax],al
300036b0:	f8                   	clc    
300036b1:	0a 00                	or     al,BYTE PTR [eax]
300036b3:	00 75 eb             	add    BYTE PTR [ebp-0x15],dh
300036b6:	ff                   	(bad)  
300036b7:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
300036bd:	41                   	inc    ecx
300036be:	0e                   	push   cs
300036bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300036c5:	59                   	pop    ecx
300036c6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300036c9:	04 00                	add    al,0x0
300036cb:	00 20                	add    BYTE PTR [eax],ah
300036cd:	00 00                	add    BYTE PTR [eax],al
300036cf:	00 18                	add    BYTE PTR [eax],bl
300036d1:	0b 00                	or     eax,DWORD PTR [eax]
300036d3:	00 72 eb             	add    BYTE PTR [edx-0x15],dh
300036d6:	ff                   	(bad)  
300036d7:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
300036da:	00 00                	add    BYTE PTR [eax],al
300036dc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300036df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300036e5:	44                   	inc    esp
300036e6:	83 03 79             	add    DWORD PTR [ebx],0x79
300036e9:	c5 c3 0c             	(bad)  
300036ec:	04 04                	add    al,0x4
300036ee:	00 00                	add    BYTE PTR [eax],al
300036f0:	1c 00                	sbb    al,0x0
300036f2:	00 00                	add    BYTE PTR [eax],al
300036f4:	3c 0b                	cmp    al,0xb
300036f6:	00 00                	add    BYTE PTR [eax],al
300036f8:	8f                   	(bad)  
300036f9:	eb ff                	jmp    300036fa <__x86.get_pc_thunk.cx+0xb46>
300036fb:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30003701:	41                   	inc    ecx
30003702:	0e                   	push   cs
30003703:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003709:	71 c5                	jno    300036d0 <__x86.get_pc_thunk.cx+0xb1c>
3000370b:	0c 04                	or     al,0x4
3000370d:	04 00                	add    al,0x0
3000370f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003712:	00 00                	add    BYTE PTR [eax],al
30003714:	5c                   	pop    esp
30003715:	0b 00                	or     eax,DWORD PTR [eax]
30003717:	00 a4 eb ff ff 1d 00 	add    BYTE PTR [ebx+ebp*8+0x1dffff],ah
3000371e:	00 00                	add    BYTE PTR [eax],al
30003720:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003723:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003729:	59                   	pop    ecx
3000372a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000372d:	04 00                	add    al,0x0
3000372f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003732:	00 00                	add    BYTE PTR [eax],al
30003734:	7c 0b                	jl     30003741 <__x86.get_pc_thunk.cx+0xb8d>
30003736:	00 00                	add    BYTE PTR [eax],al
30003738:	a1 eb ff ff 41       	mov    eax,ds:0x41ffffeb
3000373d:	08 00                	or     BYTE PTR [eax],al
3000373f:	00 00                	add    BYTE PTR [eax],al
30003741:	41                   	inc    ecx
30003742:	0e                   	push   cs
30003743:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003749:	46                   	inc    esi
3000374a:	87 03                	xchg   DWORD PTR [ebx],eax
3000374c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
3000374f:	05 03 34 08 c3       	add    eax,0xc3083403
30003754:	41                   	inc    ecx
30003755:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003759:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000375c:	04 00                	add    al,0x0
3000375e:	00 00                	add    BYTE PTR [eax],al
30003760:	24 00                	and    al,0x0
30003762:	00 00                	add    BYTE PTR [eax],al
30003764:	ac                   	lods   al,BYTE PTR ds:[esi]
30003765:	0b 00                	or     eax,DWORD PTR [eax]
30003767:	00 b2 f3 ff ff 6d    	add    BYTE PTR [edx+0x6dfffff3],dh
3000376d:	00 00                	add    BYTE PTR [eax],al
3000376f:	00 00                	add    BYTE PTR [eax],al
30003771:	41                   	inc    ecx
30003772:	0e                   	push   cs
30003773:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003779:	45                   	inc    ebp
3000377a:	86 03                	xchg   BYTE PTR [ebx],al
3000377c:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
30003780:	c3                   	ret    
30003781:	41                   	inc    ecx
30003782:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003786:	04 04                	add    al,0x4
30003788:	10 00                	adc    BYTE PTR [eax],al
3000378a:	00 00                	add    BYTE PTR [eax],al
3000378c:	d4 0b                	aam    0xb
3000378e:	00 00                	add    BYTE PTR [eax],al
30003790:	24 f4                	and    al,0xf4
30003792:	ff                   	(bad)  
30003793:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30003796:	00 00                	add    BYTE PTR [eax],al
30003798:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

3000379c <.dynsym>:
	...
300037ac:	ff 00                	inc    DWORD PTR [eax]
300037ae:	00 00                	add    BYTE PTR [eax],al
300037b0:	44                   	inc    esp
300037b1:	17                   	pop    ss
300037b2:	00 30                	add    BYTE PTR [eax],dh
300037b4:	40                   	inc    eax
300037b5:	00 00                	add    BYTE PTR [eax],al
300037b7:	00 12                	add    BYTE PTR [edx],dl
300037b9:	00 01                	add    BYTE PTR [ecx],al
300037bb:	00 b0 00 00 00 f4    	add    BYTE PTR [eax-0xc000000],dh
300037c1:	0e                   	push   cs
300037c2:	00 30                	add    BYTE PTR [eax],dh
300037c4:	1c 00                	sbb    al,0x0
300037c6:	00 00                	add    BYTE PTR [eax],al
300037c8:	12 00                	adc    al,BYTE PTR [eax]
300037ca:	01 00                	add    DWORD PTR [eax],eax
300037cc:	7a 00                	jp     300037ce <__x86.get_pc_thunk.cx+0xc1a>
300037ce:	00 00                	add    BYTE PTR [eax],al
300037d0:	ae                   	scas   al,BYTE PTR es:[edi]
300037d1:	0a 00                	or     al,BYTE PTR [eax]
300037d3:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
300037d6:	00 00                	add    BYTE PTR [eax],al
300037d8:	12 00                	adc    al,BYTE PTR [eax]
300037da:	01 00                	add    DWORD PTR [eax],eax
300037dc:	80 00 00             	add    BYTE PTR [eax],0x0
300037df:	00 e2                	add    dl,ah
300037e1:	0a 00                	or     al,BYTE PTR [eax]
300037e3:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
300037e6:	00 00                	add    BYTE PTR [eax],al
300037e8:	12 00                	adc    al,BYTE PTR [eax]
300037ea:	01 00                	add    DWORD PTR [eax],eax
300037ec:	0e                   	push   cs
300037ed:	01 00                	add    DWORD PTR [eax],eax
300037ef:	00 3c 18             	add    BYTE PTR [eax+ebx*1],bh
300037f2:	00 30                	add    BYTE PTR [eax],dh
300037f4:	59                   	pop    ecx
300037f5:	00 00                	add    BYTE PTR [eax],al
300037f7:	00 12                	add    BYTE PTR [edx],dl
300037f9:	00 01                	add    BYTE PTR [ecx],al
300037fb:	00 e8                	add    al,ch
300037fd:	00 00                	add    BYTE PTR [eax],al
300037ff:	00 74 15 00          	add    BYTE PTR [ebp+edx*1+0x0],dh
30003803:	30 84 00 00 00 12 00 	xor    BYTE PTR [eax+eax*1+0x120000],al
3000380a:	01 00                	add    DWORD PTR [eax],eax
3000380c:	21 00                	and    DWORD PTR [eax],eax
3000380e:	00 00                	add    BYTE PTR [eax],al
30003810:	00 04 00             	add    BYTE PTR [eax+eax*1],al
30003813:	30 aa 00 00 00 12    	xor    BYTE PTR [edx+0x12000000],ch
30003819:	00 01                	add    BYTE PTR [ecx],al
3000381b:	00 6b 00             	add    BYTE PTR [ebx+0x0],ch
3000381e:	00 00                	add    BYTE PTR [eax],al
30003820:	f8                   	clc    
30003821:	07                   	pop    es
30003822:	00 30                	add    BYTE PTR [eax],dh
30003824:	ba 00 00 00 12       	mov    edx,0x12000000
30003829:	00 01                	add    BYTE PTR [ecx],al
3000382b:	00 66 00             	add    BYTE PTR [esi+0x0],ah
3000382e:	00 00                	add    BYTE PTR [eax],al
30003830:	c9                   	leave  
30003831:	07                   	pop    es
30003832:	00 30                	add    BYTE PTR [eax],dh
30003834:	2f                   	das    
30003835:	00 00                	add    BYTE PTR [eax],al
30003837:	00 12                	add    BYTE PTR [edx],dl
30003839:	00 01                	add    BYTE PTR [ecx],al
3000383b:	00 d0                	add    al,dl
3000383d:	00 00                	add    BYTE PTR [eax],al
3000383f:	00 b0 12 00 30 9b    	add    BYTE PTR [eax-0x64cfffee],dh
30003845:	01 00                	add    DWORD PTR [eax],eax
30003847:	00 12                	add    BYTE PTR [edx],dl
30003849:	00 01                	add    BYTE PTR [ecx],al
3000384b:	00 4c 00 00          	add    BYTE PTR [eax+eax*1+0x0],cl
3000384f:	00 60 07             	add    BYTE PTR [eax+0x7],ah
30003852:	00 30                	add    BYTE PTR [eax],dh
30003854:	26 00 00             	add    BYTE PTR es:[eax],al
30003857:	00 12                	add    BYTE PTR [edx],dl
30003859:	00 01                	add    BYTE PTR [ecx],al
3000385b:	00 c4                	add    ah,al
3000385d:	00 00                	add    BYTE PTR [eax],al
3000385f:	00 40 12             	add    BYTE PTR [eax+0x12],al
30003862:	00 30                	add    BYTE PTR [eax],dh
30003864:	20 00                	and    BYTE PTR [eax],al
30003866:	00 00                	add    BYTE PTR [eax],al
30003868:	12 00                	adc    al,BYTE PTR [eax]
3000386a:	01 00                	add    DWORD PTR [eax],eax
3000386c:	87 00                	xchg   DWORD PTR [eax],eax
3000386e:	00 00                	add    BYTE PTR [eax],al
30003870:	81 0b 00 30 75 00    	or     DWORD PTR [ebx],0x753000
30003876:	00 00                	add    BYTE PTR [eax],al
30003878:	12 00                	adc    al,BYTE PTR [eax]
3000387a:	01 00                	add    DWORD PTR [eax],eax
3000387c:	2e 01 00             	add    DWORD PTR cs:[eax],eax
3000387f:	00 4c 1a 00          	add    BYTE PTR [edx+ebx*1+0x0],cl
30003883:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
30003886:	00 00                	add    BYTE PTR [eax],al
30003888:	12 00                	adc    al,BYTE PTR [eax]
3000388a:	01 00                	add    DWORD PTR [eax],eax
3000388c:	17                   	pop    ss
3000388d:	00 00                	add    BYTE PTR [eax],al
3000388f:	00 2b                	add    BYTE PTR [ebx],ch
30003891:	02 00                	add    al,BYTE PTR [eax]
30003893:	30 bb 00 00 00 12    	xor    BYTE PTR [ebx+0x12000000],bh
30003899:	00 01                	add    BYTE PTR [ecx],al
3000389b:	00 de                	add    dh,bl
3000389d:	00 00                	add    BYTE PTR [eax],al
3000389f:	00 34 15 00 30 14 00 	add    BYTE PTR [edx*1+0x143000],dh
300038a6:	00 00                	add    BYTE PTR [eax],al
300038a8:	12 00                	adc    al,BYTE PTR [eax]
300038aa:	01 00                	add    DWORD PTR [eax],eax
300038ac:	5d                   	pop    ebp
300038ad:	01 00                	add    DWORD PTR [eax],eax
300038af:	00 29                	add    BYTE PTR [ecx],ch
300038b1:	22 00                	and    al,BYTE PTR [eax]
300038b3:	30 1d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,bl
300038b9:	00 01                	add    BYTE PTR [ecx],al
300038bb:	00 3e                	add    BYTE PTR [esi],bh
300038bd:	01 00                	add    DWORD PTR [eax],eax
300038bf:	00 ec                	add    ah,ch
300038c1:	1b 00                	sbb    eax,DWORD PTR [eax]
300038c3:	30 9c 01 00 00 12 00 	xor    BYTE PTR [ecx+eax*1+0x120000],bl
300038ca:	01 00                	add    DWORD PTR [eax],eax
300038cc:	70 00                	jo     300038ce <__x86.get_pc_thunk.cx+0xd1a>
300038ce:	00 00                	add    BYTE PTR [eax],al
300038d0:	ea 09 00 30 a5 00 00 	jmp    0x0:0xa5300009
300038d7:	00 12                	add    BYTE PTR [edx],dl
300038d9:	00 01                	add    BYTE PTR [ecx],al
300038db:	00 e3                	add    bl,ah
300038dd:	00 00                	add    BYTE PTR [eax],al
300038df:	00 48 15             	add    BYTE PTR [eax+0x15],cl
300038e2:	00 30                	add    BYTE PTR [eax],dh
300038e4:	29 00                	sub    DWORD PTR [eax],eax
300038e6:	00 00                	add    BYTE PTR [eax],al
300038e8:	12 00                	adc    al,BYTE PTR [eax]
300038ea:	01 00                	add    DWORD PTR [eax],eax
300038ec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
300038ed:	00 00                	add    BYTE PTR [eax],al
300038ef:	00 b1 0c 00 30 f4    	add    BYTE PTR [ecx-0xbcffff4],dh
300038f5:	01 00                	add    DWORD PTR [eax],eax
300038f7:	00 12                	add    BYTE PTR [edx],dl
300038f9:	00 01                	add    BYTE PTR [ecx],al
300038fb:	00 3f                	add    BYTE PTR [edi],bh
300038fd:	00 00                	add    BYTE PTR [eax],al
300038ff:	00 f8                	add    al,bh
30003901:	06                   	push   es
30003902:	00 30                	add    BYTE PTR [eax],dh
30003904:	35 00 00 00 12       	xor    eax,0x12000000
30003909:	00 01                	add    BYTE PTR [ecx],al
3000390b:	00 f1                	add    cl,dh
3000390d:	00 00                	add    BYTE PTR [eax],al
3000390f:	00 f8                	add    al,bh
30003911:	15 00 30 3e 00       	adc    eax,0x3e3000
30003916:	00 00                	add    BYTE PTR [eax],al
30003918:	12 00                	adc    al,BYTE PTR [eax]
3000391a:	01 00                	add    DWORD PTR [eax],eax
3000391c:	54                   	push   esp
3000391d:	01 00                	add    DWORD PTR [eax],eax
3000391f:	00 cc                	add    ah,cl
30003921:	1e                   	push   ds
30003922:	00 30                	add    BYTE PTR [eax],dh
30003924:	44                   	inc    esp
30003925:	00 00                	add    BYTE PTR [eax],al
30003927:	00 12                	add    BYTE PTR [edx],dl
30003929:	00 01                	add    BYTE PTR [ecx],al
3000392b:	00 9f 00 00 00 65    	add    BYTE PTR [edi+0x65000000],bl
30003931:	0c 00                	or     al,0x0
30003933:	30 4c 00 00          	xor    BYTE PTR [eax+eax*1+0x0],cl
30003937:	00 12                	add    BYTE PTR [edx],dl
30003939:	00 01                	add    BYTE PTR [ecx],al
3000393b:	00 45 00             	add    BYTE PTR [ebp+0x0],al
3000393e:	00 00                	add    BYTE PTR [eax],al
30003940:	2d 07 00 30 31       	sub    eax,0x31300007
30003945:	00 00                	add    BYTE PTR [eax],al
30003947:	00 12                	add    BYTE PTR [edx],dl
30003949:	00 01                	add    BYTE PTR [ecx],al
3000394b:	00 7c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],bh
3000394f:	00 d9                	add    cl,bl
30003951:	22 00                	and    al,BYTE PTR [eax]
30003953:	30 41 08             	xor    BYTE PTR [ecx+0x8],al
30003956:	00 00                	add    BYTE PTR [eax],al
30003958:	12 00                	adc    al,BYTE PTR [eax]
3000395a:	01 00                	add    DWORD PTR [eax],eax
3000395c:	4d                   	dec    ebp
3000395d:	01 00                	add    DWORD PTR [eax],eax
3000395f:	00 ae 1e 00 30 1d    	add    BYTE PTR [esi+0x1d30001e],ch
30003965:	00 00                	add    BYTE PTR [eax],al
30003967:	00 12                	add    BYTE PTR [edx],dl
30003969:	00 01                	add    BYTE PTR [ecx],al
3000396b:	00 3a                	add    BYTE PTR [edx],bh
3000396d:	00 00                	add    BYTE PTR [eax],al
3000396f:	00 c3                	add    bl,al
30003971:	06                   	push   es
30003972:	00 30                	add    BYTE PTR [eax],dh
30003974:	35 00 00 00 12       	xor    eax,0x12000000
30003979:	00 01                	add    BYTE PTR [ecx],al
3000397b:	00 1e                	add    BYTE PTR [esi],bl
3000397d:	01 00                	add    DWORD PTR [eax],eax
3000397f:	00 fc                	add    ah,bh
30003981:	18 00                	sbb    BYTE PTR [eax],al
30003983:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
30003986:	00 00                	add    BYTE PTR [eax],al
30003988:	12 00                	adc    al,BYTE PTR [eax]
3000398a:	01 00                	add    DWORD PTR [eax],eax
3000398c:	26 01 00             	add    DWORD PTR es:[eax],eax
3000398f:	00 2c 1a             	add    BYTE PTR [edx+ebx*1],ch
30003992:	00 30                	add    BYTE PTR [eax],dh
30003994:	20 00                	and    BYTE PTR [eax],al
30003996:	00 00                	add    BYTE PTR [eax],al
30003998:	12 00                	adc    al,BYTE PTR [eax]
3000399a:	01 00                	add    DWORD PTR [eax],eax
3000399c:	28 00                	sub    BYTE PTR [eax],al
3000399e:	00 00                	add    BYTE PTR [eax],al
300039a0:	aa                   	stos   BYTE PTR es:[edi],al
300039a1:	04 00                	add    al,0x0
300039a3:	30 c1                	xor    cl,al
300039a5:	01 00                	add    DWORD PTR [eax],eax
300039a7:	00 12                	add    BYTE PTR [edx],dl
300039a9:	00 01                	add    BYTE PTR [ecx],al
300039ab:	00 10                	add    BYTE PTR [eax],dl
300039ad:	00 00                	add    BYTE PTR [eax],al
300039af:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
300039b2:	00 30                	add    BYTE PTR [eax],dh
300039b4:	97                   	xchg   edi,eax
300039b5:	00 00                	add    BYTE PTR [eax],al
300039b7:	00 12                	add    BYTE PTR [edx],dl
300039b9:	00 01                	add    BYTE PTR [ecx],al
300039bb:	00 9a 00 00 00 3c    	add    BYTE PTR [edx+0x3c000000],bl
300039c1:	0c 00                	or     al,0x0
300039c3:	30 29                	xor    BYTE PTR [ecx],ch
300039c5:	00 00                	add    BYTE PTR [eax],al
300039c7:	00 12                	add    BYTE PTR [edx],dl
300039c9:	00 01                	add    BYTE PTR [ecx],al
300039cb:	00 51 00             	add    BYTE PTR [ecx+0x0],dl
300039ce:	00 00                	add    BYTE PTR [eax],al
300039d0:	00 00                	add    BYTE PTR [eax],al
300039d2:	13 00                	adc    eax,DWORD PTR [eax]
300039d4:	00 00                	add    BYTE PTR [eax],al
300039d6:	00 00                	add    BYTE PTR [eax],al
300039d8:	10 00                	adc    BYTE PTR [eax],al
300039da:	01 00                	add    DWORD PTR [eax],eax
300039dc:	66 01 00             	add    WORD PTR [eax],ax
300039df:	00 46 22             	add    BYTE PTR [esi+0x22],al
300039e2:	00 30                	add    BYTE PTR [eax],dh
300039e4:	41                   	inc    ecx
300039e5:	00 00                	add    BYTE PTR [eax],al
300039e7:	00 12                	add    BYTE PTR [edx],dl
300039e9:	00 01                	add    BYTE PTR [ecx],al
300039eb:	00 d7                	add    bh,dl
300039ed:	00 00                	add    BYTE PTR [eax],al
300039ef:	00 13                	add    BYTE PTR [ebx],dl
300039f1:	15 00 30 20 00       	adc    eax,0x203000
300039f6:	00 00                	add    BYTE PTR [eax],al
300039f8:	12 00                	adc    al,BYTE PTR [eax]
300039fa:	01 00                	add    DWORD PTR [eax],eax
300039fc:	45                   	inc    ebp
300039fd:	01 00                	add    DWORD PTR [eax],eax
300039ff:	00 1e                	add    BYTE PTR [esi],bl
30003a01:	1e                   	push   ds
30003a02:	00 30                	add    BYTE PTR [eax],dh
30003a04:	20 00                	and    BYTE PTR [eax],al
30003a06:	00 00                	add    BYTE PTR [eax],al
30003a08:	12 00                	adc    al,BYTE PTR [eax]
30003a0a:	01 00                	add    DWORD PTR [eax],eax
30003a0c:	61                   	popa   
30003a0d:	00 00                	add    BYTE PTR [eax],al
30003a0f:	00 86 07 00 30 43    	add    BYTE PTR [esi+0x43300007],al
30003a15:	00 00                	add    BYTE PTR [eax],al
30003a17:	00 12                	add    BYTE PTR [edx],dl
30003a19:	00 01                	add    BYTE PTR [ecx],al
30003a1b:	00 f8                	add    al,bh
30003a1d:	00 00                	add    BYTE PTR [eax],al
30003a1f:	00 e4                	add    ah,ah
30003a21:	16                   	push   ss
30003a22:	00 30                	add    BYTE PTR [eax],dh
30003a24:	5e                   	pop    esi
30003a25:	00 00                	add    BYTE PTR [eax],al
30003a27:	00 12                	add    BYTE PTR [edx],dl
30003a29:	00 01                	add    BYTE PTR [ecx],al
30003a2b:	00 bd 00 00 00 20    	add    BYTE PTR [ebp+0x20000000],bh
30003a31:	0f 00                	(bad)  
30003a33:	30 20                	xor    BYTE PTR [eax],ah
30003a35:	00 00                	add    BYTE PTR [eax],al
30003a37:	00 12                	add    BYTE PTR [edx],dl
30003a39:	00 01                	add    BYTE PTR [ecx],al
30003a3b:	00 08                	add    BYTE PTR [eax],cl
30003a3d:	00 00                	add    BYTE PTR [eax],al
30003a3f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
30003a42:	00 30                	add    BYTE PTR [eax],dh
30003a44:	55                   	push   ebp
30003a45:	00 00                	add    BYTE PTR [eax],al
30003a47:	00 12                	add    BYTE PTR [edx],dl
30003a49:	00 01                	add    BYTE PTR [ecx],al
30003a4b:	00 06                	add    BYTE PTR [esi],al
30003a4d:	01 00                	add    DWORD PTR [eax],eax
30003a4f:	00 c4                	add    ah,al
30003a51:	17                   	pop    ss
30003a52:	00 30                	add    BYTE PTR [eax],dh
30003a54:	47                   	inc    edi
30003a55:	00 00                	add    BYTE PTR [eax],al
30003a57:	00 12                	add    BYTE PTR [edx],dl
30003a59:	00 01                	add    BYTE PTR [ecx],al
30003a5b:	00 8d 00 00 00 13    	add    BYTE PTR [ebp+0x13000000],cl
30003a61:	0c 00                	or     al,0x0
30003a63:	30 29                	xor    BYTE PTR [ecx],ch
30003a65:	00 00                	add    BYTE PTR [eax],al
30003a67:	00 12                	add    BYTE PTR [edx],dl
30003a69:	00 01                	add    BYTE PTR [ecx],al
30003a6b:	00 70 01             	add    BYTE PTR [eax+0x1],dh
30003a6e:	00 00                	add    BYTE PTR [eax],al
30003a70:	bc 22 00 30 1d       	mov    esp,0x1d300022
30003a75:	00 00                	add    BYTE PTR [eax],al
30003a77:	00 12                	add    BYTE PTR [edx],dl
30003a79:	00 01                	add    BYTE PTR [ecx],al
30003a7b:	00 83 01 00 00 1a    	add    BYTE PTR [ebx+0x1a000001],al
30003a81:	2b 00                	sub    eax,DWORD PTR [eax]
30003a83:	30 6d 00             	xor    BYTE PTR [ebp+0x0],ch
30003a86:	00 00                	add    BYTE PTR [eax],al
30003a88:	12 00                	adc    al,BYTE PTR [eax]
30003a8a:	01 00                	add    DWORD PTR [eax],eax
30003a8c:	b8 00 00 00 10       	mov    eax,0x10000000
30003a91:	0f 00                	(bad)  
30003a93:	30 10                	xor    BYTE PTR [eax],dl
30003a95:	00 00                	add    BYTE PTR [eax],al
30003a97:	00 12                	add    BYTE PTR [edx],dl
30003a99:	00 01                	add    BYTE PTR [ecx],al
30003a9b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003a9e:	00 00                	add    BYTE PTR [eax],al
30003aa0:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
30003aa5:	00 00                	add    BYTE PTR [eax],al
30003aa7:	00 12                	add    BYTE PTR [edx],dl
30003aa9:	00 01                	add    BYTE PTR [ecx],al
30003aab:	00 17                	add    BYTE PTR [edi],dl
30003aad:	01 00                	add    DWORD PTR [eax],eax
30003aaf:	00 98 18 00 30 31    	add    BYTE PTR [eax+0x31300018],bl
30003ab5:	00 00                	add    BYTE PTR [eax],al
30003ab7:	00 12                	add    BYTE PTR [edx],dl
30003ab9:	00 01                	add    BYTE PTR [ecx],al
30003abb:	00 2f                	add    BYTE PTR [edi],ch
30003abd:	00 00                	add    BYTE PTR [eax],al
30003abf:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
30003ac3:	30 2d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,ch
30003ac9:	00 01                	add    BYTE PTR [ecx],al
30003acb:	00 aa 00 00 00 a5    	add    BYTE PTR [edx-0x5b000000],ch
30003ad1:	0e                   	push   cs
30003ad2:	00 30                	add    BYTE PTR [eax],dh
30003ad4:	4f                   	dec    edi
30003ad5:	00 00                	add    BYTE PTR [eax],al
30003ad7:	00 12                	add    BYTE PTR [edx],dl
30003ad9:	00 01                	add    BYTE PTR [ecx],al
30003adb:	00 01                	add    BYTE PTR [ecx],al
30003add:	00 00                	add    BYTE PTR [eax],al
30003adf:	00 00                	add    BYTE PTR [eax],al
30003ae1:	00 00                	add    BYTE PTR [eax],al
30003ae3:	30 38                	xor    BYTE PTR [eax],bh
30003ae5:	00 00                	add    BYTE PTR [eax],al
30003ae7:	00 12                	add    BYTE PTR [edx],dl
30003ae9:	00 01                	add    BYTE PTR [ecx],al
30003aeb:	00 36                	add    BYTE PTR [esi],dh
30003aed:	01 00                	add    DWORD PTR [eax],eax
30003aef:	00 cc                	add    ah,cl
30003af1:	1b 00                	sbb    eax,DWORD PTR [eax]
30003af3:	30 1d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,bl
30003af9:	00 01                	add    BYTE PTR [ecx],al
30003afb:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
30003afe:	00 00                	add    BYTE PTR [eax],al
30003b00:	99                   	cdq    
30003b01:	06                   	push   es
30003b02:	00 30                	add    BYTE PTR [eax],dh
30003b04:	2a 00                	sub    al,BYTE PTR [eax]
30003b06:	00 00                	add    BYTE PTR [eax],al
30003b08:	12 00                	adc    al,BYTE PTR [eax]
30003b0a:	01 00                	add    DWORD PTR [eax],eax
30003b0c:	cb                   	retf   
30003b0d:	00 00                	add    BYTE PTR [eax],al
30003b0f:	00 60 12             	add    BYTE PTR [eax+0x12],ah
30003b12:	00 30                	add    BYTE PTR [eax],dh
30003b14:	1b 00                	sbb    eax,DWORD PTR [eax]
30003b16:	00 00                	add    BYTE PTR [eax],al
30003b18:	12 00                	adc    al,BYTE PTR [eax]
30003b1a:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

30003b1c <.dynstr>:
30003b1c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b1f:	72 63                	jb     30003b84 <__x86.get_pc_thunk.cx+0xfd0>
30003b21:	68 72 00 73 74       	push   0x74730072
30003b26:	72 63                	jb     30003b8b <__x86.get_pc_thunk.cx+0xfd7>
30003b28:	73 70                	jae    30003b9a <__x86.get_pc_thunk.cx+0xfe6>
30003b2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003b2b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b2e:	72 74                	jb     30003ba4 <__x86.get_pc_thunk.cx+0xff0>
30003b30:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003b31:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
30003b34:	74 6f                	je     30003ba5 <__x86.get_pc_thunk.cx+0xff1>
30003b36:	61                   	popa   
30003b37:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
30003b3a:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003b3b:	69 00 67 65 74 65    	imul   eax,DWORD PTR [eax],0x65746567
30003b41:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003b42:	76 00                	jbe    30003b44 <__x86.get_pc_thunk.cx+0xf90>
30003b44:	73 65                	jae    30003bab <__x86.get_pc_thunk.cx+0xff7>
30003b46:	74 65                	je     30003bad <__x86.get_pc_thunk.cx+0xff9>
30003b48:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003b49:	76 00                	jbe    30003b4b <__x86.get_pc_thunk.cx+0xf97>
30003b4b:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003b4c:	70 65                	jo     30003bb3 <__x86.get_pc_thunk.cx+0xfff>
30003b4e:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003b4f:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
30003b52:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003b53:	73 65                	jae    30003bba <__x86.get_pc_thunk.cx+0x1006>
30003b55:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003b58:	61                   	popa   
30003b59:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
30003b5d:	69 74 65 00 67 65 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x64746567
30003b64:	64 
30003b65:	69 72 00 70 75 74 73 	imul   esi,DWORD PTR [edx+0x0],0x73747570
30003b6c:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
30003b6f:	73 45                	jae    30003bb6 <__x86.get_pc_thunk.cx+0x1002>
30003b71:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003b72:	74 65                	je     30003bd9 <__x86.get_pc_thunk.cx+0x1025>
30003b74:	72 5f                	jb     30003bd5 <__x86.get_pc_thunk.cx+0x1021>
30003b76:	56                   	push   esi
30003b77:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
30003b7c:	00 70 75             	add    BYTE PTR [eax+0x75],dh
30003b7f:	74 63                	je     30003be4 <__x86.get_pc_thunk.cx+0x1030>
30003b81:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003b84:	74 63                	je     30003be9 <__x86.get_pc_thunk.cx+0x1035>
30003b86:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003b89:	74 73                	je     30003bfe <__x86.get_pc_thunk.cx+0x104a>
30003b8b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003b8f:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
30003b92:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003b93:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
30003b9a:	74 
30003b9b:	00 70 72             	add    BYTE PTR [eax+0x72],dh
30003b9e:	69 6e 74 66 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730066
30003ba5:	65                   	gs
30003ba6:	65                   	gs
30003ba7:	70 00                	jo     30003ba9 <__x86.get_pc_thunk.cx+0xff5>
30003ba9:	6d                   	ins    DWORD PTR es:[edi],dx
30003baa:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003bab:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
30003bb2:	6e 
30003bb3:	61                   	popa   
30003bb4:	6c                   	ins    BYTE PTR es:[edi],dx
30003bb5:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
30003bb8:	72 6b                	jb     30003c25 <__x86.get_pc_thunk.cx+0x1071>
30003bba:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
30003bbd:	65 63 00             	arpl   WORD PTR gs:[eax],ax
30003bc0:	65                   	gs
30003bc1:	78 65                	js     30003c28 <__x86.get_pc_thunk.cx+0x1074>
30003bc3:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
30003bc6:	65                   	gs
30003bc7:	78 65                	js     30003c2e <__x86.get_pc_thunk.cx+0x107a>
30003bc9:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
30003bcc:	77 61                	ja     30003c2f <__x86.get_pc_thunk.cx+0x107b>
30003bce:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
30003bd5:	78 
30003bd6:	69 74 00 67 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x67],0x77637465
30003bdd:	77 
30003bde:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
30003be2:	6c                   	ins    BYTE PTR es:[edi],dx
30003be3:	6c                   	ins    BYTE PTR es:[edi],dx
30003be4:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003be5:	63 00                	arpl   WORD PTR [eax],ax
30003be7:	66                   	data16
30003be8:	72 65                	jb     30003c4f <__x86.get_pc_thunk.cx+0x109b>
30003bea:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
30003bee:	6d                   	ins    DWORD PTR es:[edi],dx
30003bef:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003bf2:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
30003bf5:	6d                   	ins    DWORD PTR es:[edi],dx
30003bf6:	73 65                	jae    30003c5d <__x86.get_pc_thunk.cx+0x10a9>
30003bf8:	74 00                	je     30003bfa <__x86.get_pc_thunk.cx+0x1046>
30003bfa:	6d                   	ins    DWORD PTR es:[edi],dx
30003bfb:	6d                   	ins    DWORD PTR es:[edi],dx
30003bfc:	61                   	popa   
30003bfd:	70 00                	jo     30003bff <__x86.get_pc_thunk.cx+0x104b>
30003bff:	70 69                	jo     30003c6a <__x86.get_pc_thunk.cx+0x10b6>
30003c01:	70 65                	jo     30003c68 <__x86.get_pc_thunk.cx+0x10b4>
30003c03:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003c06:	73 65                	jae    30003c6d <__x86.get_pc_thunk.cx+0x10b9>
30003c08:	74 52                	je     30003c5c <__x86.get_pc_thunk.cx+0x10a8>
30003c0a:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003c0b:	77 00                	ja     30003c0d <__x86.get_pc_thunk.cx+0x1059>
30003c0d:	73 74                	jae    30003c83 <__x86.get_pc_thunk.cx+0x10cf>
30003c0f:	72 63                	jb     30003c74 <__x86.get_pc_thunk.cx+0x10c0>
30003c11:	61                   	popa   
30003c12:	74 00                	je     30003c14 <__x86.get_pc_thunk.cx+0x1060>
30003c14:	73 74                	jae    30003c8a <__x86.get_pc_thunk.cx+0x10d6>
30003c16:	72 63                	jb     30003c7b <__x86.get_pc_thunk.cx+0x10c7>
30003c18:	6d                   	ins    DWORD PTR es:[edi],dx
30003c19:	70 00                	jo     30003c1b <__x86.get_pc_thunk.cx+0x1067>
30003c1b:	73 74                	jae    30003c91 <__x86.get_pc_thunk.cx+0x10dd>
30003c1d:	72 63                	jb     30003c82 <__x86.get_pc_thunk.cx+0x10ce>
30003c1f:	70 79                	jo     30003c9a <__x86.get_pc_thunk.cx+0x10e6>
30003c21:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003c24:	72 63                	jb     30003c89 <__x86.get_pc_thunk.cx+0x10d5>
30003c26:	70 79                	jo     30003ca1 <__x86.get_pc_thunk.cx+0x10ed>
30003c28:	63 00                	arpl   WORD PTR [eax],ax
30003c2a:	73 74                	jae    30003ca0 <__x86.get_pc_thunk.cx+0x10ec>
30003c2c:	72 69                	jb     30003c97 <__x86.get_pc_thunk.cx+0x10e3>
30003c2e:	73 6e                	jae    30003c9e <__x86.get_pc_thunk.cx+0x10ea>
30003c30:	75 6d                	jne    30003c9f <__x86.get_pc_thunk.cx+0x10eb>
30003c32:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003c35:	72 6c                	jb     30003ca3 <__x86.get_pc_thunk.cx+0x10ef>
30003c37:	65 6e                	outs   dx,BYTE PTR gs:[esi]
30003c39:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003c3c:	72 6e                	jb     30003cac <__x86.get_pc_thunk.cx+0x10f8>
30003c3e:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
30003c41:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003c44:	72 6e                	jb     30003cb4 <__x86.get_pc_thunk.cx+0x1100>
30003c46:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003c49:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003c4c:	72 74                	jb     30003cc2 <__x86.get_pc_thunk.cx+0x110e>
30003c4e:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003c4f:	75 6c                	jne    30003cbd <__x86.get_pc_thunk.cx+0x1109>
30003c51:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003c54:	72 6c                	jb     30003cc2 <__x86.get_pc_thunk.cx+0x110e>
30003c56:	65                   	gs
30003c57:	66                   	data16
30003c58:	74 00                	je     30003c5a <__x86.get_pc_thunk.cx+0x10a6>
30003c5a:	73 74                	jae    30003cd0 <__x86.get_pc_thunk.cx+0x111c>
30003c5c:	72 74                	jb     30003cd2 <__x86.get_pc_thunk.cx+0x111e>
30003c5e:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003c5f:	6c                   	ins    BYTE PTR es:[edi],dx
30003c60:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003c63:	72 74                	jb     30003cd9 <__x86.get_pc_thunk.cx+0x1125>
30003c65:	72 69                	jb     30003cd0 <__x86.get_pc_thunk.cx+0x111c>
30003c67:	6d                   	ins    DWORD PTR es:[edi],dx
30003c68:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003c6b:	72 73                	jb     30003ce0 <__x86.get_pc_thunk.cx+0x112c>
30003c6d:	74 72                	je     30003ce1 <__x86.get_pc_thunk.cx+0x112d>
30003c6f:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003c72:	74 74                	je     30003ce8 <__x86.get_pc_thunk.cx+0x1134>
30003c74:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
30003c7b:	74 69                	je     30003ce6 <__x86.get_pc_thunk.cx+0x1132>
30003c7d:	6d                   	ins    DWORD PTR es:[edi],dx
30003c7e:	65                   	gs
30003c7f:	5f                   	pop    edi
30003c80:	72 00                	jb     30003c82 <__x86.get_pc_thunk.cx+0x10ce>
30003c82:	6c                   	ins    BYTE PTR es:[edi],dx
30003c83:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003c84:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30003c87:	74 69                	je     30003cf2 <__x86.get_pc_thunk.cx+0x113e>
30003c89:	6d                   	ins    DWORD PTR es:[edi],dx
30003c8a:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
30003c8f:	61                   	popa   
30003c90:	6c                   	ins    BYTE PTR es:[edi],dx
30003c91:	74 69                	je     30003cfc <__x86.get_pc_thunk.cx+0x1148>
30003c93:	6d                   	ins    DWORD PTR es:[edi],dx
30003c94:	65                   	gs
30003c95:	5f                   	pop    edi
30003c96:	72 00                	jb     30003c98 <__x86.get_pc_thunk.cx+0x10e4>
30003c98:	6d                   	ins    DWORD PTR es:[edi],dx
30003c99:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
30003c9e:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003ca1:	74 74                	je     30003d17 <__x86.get_pc_thunk.cx+0x1163>
30003ca3:	69                   	.byte 0x69
30003ca4:	6d                   	ins    DWORD PTR es:[edi],dx
30003ca5:	65                   	gs
	...

Disassembly of section .hash:

30003ca8 <.hash>:
30003ca8:	25 00 00 00 38       	and    eax,0x38000000
30003cad:	00 00                	add    BYTE PTR [eax],al
30003caf:	00 1e                	add    BYTE PTR [esi],bl
30003cb1:	00 00                	add    BYTE PTR [eax],al
30003cb3:	00 28                	add    BYTE PTR [eax],ch
30003cb5:	00 00                	add    BYTE PTR [eax],al
30003cb7:	00 27                	add    BYTE PTR [edi],ah
30003cb9:	00 00                	add    BYTE PTR [eax],al
30003cbb:	00 29                	add    BYTE PTR [ecx],ch
30003cbd:	00 00                	add    BYTE PTR [eax],al
30003cbf:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003cc2:	00 00                	add    BYTE PTR [eax],al
30003cc4:	33 00                	xor    eax,DWORD PTR [eax]
30003cc6:	00 00                	add    BYTE PTR [eax],al
30003cc8:	15 00 00 00 00       	adc    eax,0x0
30003ccd:	00 00                	add    BYTE PTR [eax],al
30003ccf:	00 20                	add    BYTE PTR [eax],ah
	...
30003cd9:	00 00                	add    BYTE PTR [eax],al
30003cdb:	00 18                	add    BYTE PTR [eax],bl
30003cdd:	00 00                	add    BYTE PTR [eax],al
30003cdf:	00 1a                	add    BYTE PTR [edx],bl
30003ce1:	00 00                	add    BYTE PTR [eax],al
30003ce3:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
30003ce6:	00 00                	add    BYTE PTR [eax],al
30003ce8:	21 00                	and    DWORD PTR [eax],eax
30003cea:	00 00                	add    BYTE PTR [eax],al
30003cec:	12 00                	adc    al,BYTE PTR [eax]
30003cee:	00 00                	add    BYTE PTR [eax],al
30003cf0:	36 00 00             	add    BYTE PTR ss:[eax],al
30003cf3:	00 2b                	add    BYTE PTR [ebx],ch
30003cf5:	00 00                	add    BYTE PTR [eax],al
30003cf7:	00 2a                	add    BYTE PTR [edx],ch
30003cf9:	00 00                	add    BYTE PTR [eax],al
30003cfb:	00 07                	add    BYTE PTR [edi],al
30003cfd:	00 00                	add    BYTE PTR [eax],al
30003cff:	00 03                	add    BYTE PTR [ebx],al
30003d01:	00 00                	add    BYTE PTR [eax],al
30003d03:	00 32                	add    BYTE PTR [edx],dh
30003d05:	00 00                	add    BYTE PTR [eax],al
30003d07:	00 30                	add    BYTE PTR [eax],dh
30003d09:	00 00                	add    BYTE PTR [eax],al
30003d0b:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
30003d0e:	00 00                	add    BYTE PTR [eax],al
30003d10:	35 00 00 00 00       	xor    eax,0x0
30003d15:	00 00                	add    BYTE PTR [eax],al
30003d17:	00 00                	add    BYTE PTR [eax],al
30003d19:	00 00                	add    BYTE PTR [eax],al
30003d1b:	00 10                	add    BYTE PTR [eax],dl
30003d1d:	00 00                	add    BYTE PTR [eax],al
30003d1f:	00 13                	add    BYTE PTR [ebx],dl
30003d21:	00 00                	add    BYTE PTR [eax],al
30003d23:	00 31                	add    BYTE PTR [ecx],dh
30003d25:	00 00                	add    BYTE PTR [eax],al
30003d27:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003d2a:	00 00                	add    BYTE PTR [eax],al
30003d2c:	37                   	aaa    
30003d2d:	00 00                	add    BYTE PTR [eax],al
30003d2f:	00 25 00 00 00 00    	add    BYTE PTR ds:0x0,ah
30003d35:	00 00                	add    BYTE PTR [eax],al
30003d37:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
30003d3a:	00 00                	add    BYTE PTR [eax],al
30003d3c:	1f                   	pop    ds
	...
30003d59:	00 00                	add    BYTE PTR [eax],al
30003d5b:	00 02                	add    BYTE PTR [edx],al
30003d5d:	00 00                	add    BYTE PTR [eax],al
30003d5f:	00 00                	add    BYTE PTR [eax],al
30003d61:	00 00                	add    BYTE PTR [eax],al
30003d63:	00 06                	add    BYTE PTR [esi],al
	...
30003d79:	00 00                	add    BYTE PTR [eax],al
30003d7b:	00 08                	add    BYTE PTR [eax],cl
	...
30003d85:	00 00                	add    BYTE PTR [eax],al
30003d87:	00 0e                	add    BYTE PTR [esi],cl
30003d89:	00 00                	add    BYTE PTR [eax],al
30003d8b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
	...
30003db6:	00 00                	add    BYTE PTR [eax],al
30003db8:	01 00                	add    DWORD PTR [eax],eax
30003dba:	00 00                	add    BYTE PTR [eax],al
30003dbc:	0f 00 00             	sldt   WORD PTR [eax]
30003dbf:	00 17                	add    BYTE PTR [edi],dl
30003dc1:	00 00                	add    BYTE PTR [eax],al
30003dc3:	00 00                	add    BYTE PTR [eax],al
30003dc5:	00 00                	add    BYTE PTR [eax],al
30003dc7:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
30003dcd:	00 00                	add    BYTE PTR [eax],al
30003dcf:	00 1b                	add    BYTE PTR [ebx],bl
30003dd1:	00 00                	add    BYTE PTR [eax],al
30003dd3:	00 23                	add    BYTE PTR [ebx],ah
30003dd5:	00 00                	add    BYTE PTR [eax],al
30003dd7:	00 22                	add    BYTE PTR [edx],ah
30003dd9:	00 00                	add    BYTE PTR [eax],al
30003ddb:	00 19                	add    BYTE PTR [ecx],bl
30003ddd:	00 00                	add    BYTE PTR [eax],al
30003ddf:	00 0a                	add    BYTE PTR [edx],cl
30003de1:	00 00                	add    BYTE PTR [eax],al
30003de3:	00 09                	add    BYTE PTR [ecx],cl
30003de5:	00 00                	add    BYTE PTR [eax],al
30003de7:	00 00                	add    BYTE PTR [eax],al
30003de9:	00 00                	add    BYTE PTR [eax],al
30003deb:	00 0b                	add    BYTE PTR [ebx],cl
30003ded:	00 00                	add    BYTE PTR [eax],al
30003def:	00 11                	add    BYTE PTR [ecx],dl
30003df1:	00 00                	add    BYTE PTR [eax],al
30003df3:	00 00                	add    BYTE PTR [eax],al
30003df5:	00 00                	add    BYTE PTR [eax],al
30003df7:	00 1d 00 00 00 00    	add    BYTE PTR ds:0x0,bl
30003dfd:	00 00                	add    BYTE PTR [eax],al
30003dff:	00 00                	add    BYTE PTR [eax],al
30003e01:	00 00                	add    BYTE PTR [eax],al
30003e03:	00 26                	add    BYTE PTR [esi],ah
30003e05:	00 00                	add    BYTE PTR [eax],al
30003e07:	00 2f                	add    BYTE PTR [edi],ch
30003e09:	00 00                	add    BYTE PTR [eax],al
30003e0b:	00 2d 00 00 00 00    	add    BYTE PTR ds:0x0,ch
30003e11:	00 00                	add    BYTE PTR [eax],al
30003e13:	00 2e                	add    BYTE PTR [esi],ch
30003e15:	00 00                	add    BYTE PTR [eax],al
30003e17:	00 05 00 00 00 16    	add    BYTE PTR ds:0x16000000,al
30003e1d:	00 00                	add    BYTE PTR [eax],al
30003e1f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
	...

Disassembly of section .eh_frame:

30003e24 <.eh_frame>:
30003e24:	14 00                	adc    al,0x0
30003e26:	00 00                	add    BYTE PTR [eax],al
30003e28:	00 00                	add    BYTE PTR [eax],al
30003e2a:	00 00                	add    BYTE PTR [eax],al
30003e2c:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30003e2f:	00 01                	add    BYTE PTR [ecx],al
30003e31:	7c 08                	jl     30003e3b <__x86.get_pc_thunk.cx+0x1287>
30003e33:	01 1b                	add    DWORD PTR [ebx],ebx
30003e35:	0c 04                	or     al,0x4
30003e37:	04 88                	add    al,0x88
30003e39:	01 00                	add    DWORD PTR [eax],eax
30003e3b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003e3e:	00 00                	add    BYTE PTR [eax],al
30003e40:	1c 00                	sbb    al,0x0
30003e42:	00 00                	add    BYTE PTR [eax],al
30003e44:	4c                   	dec    esp
30003e45:	ed                   	in     eax,dx
30003e46:	ff                   	(bad)  
30003e47:	ff 20                	jmp    DWORD PTR [eax]
30003e49:	00 00                	add    BYTE PTR [eax],al
30003e4b:	00 00                	add    BYTE PTR [eax],al
30003e4d:	0e                   	push   cs
30003e4e:	08 46 0e             	or     BYTE PTR [esi+0xe],al
30003e51:	0c 4a                	or     al,0x4a
30003e53:	0f 0b                	ud2    
30003e55:	74 04                	je     30003e5b <__x86.get_pc_thunk.cx+0x12a7>
30003e57:	78 00                	js     30003e59 <__x86.get_pc_thunk.cx+0x12a5>
30003e59:	3f                   	aas    
30003e5a:	1a 3b                	sbb    bh,BYTE PTR [ebx]
30003e5c:	2a 32                	sub    dh,BYTE PTR [edx]
30003e5e:	24 22                	and    al,0x22
30003e60:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

30003e64 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
30003e64:	01 1b                	add    DWORD PTR [ebx],ebx
30003e66:	03 3b                	add    edi,DWORD PTR [ebx]
30003e68:	50                   	push   eax
30003e69:	ed                   	in     eax,dx
30003e6a:	ff                   	(bad)  
30003e6b:	ff 57 00             	call   DWORD PTR [edi+0x0]
30003e6e:	00 00                	add    BYTE PTR [eax],al
30003e70:	9c                   	pushf  
30003e71:	c1 ff ff             	sar    edi,0xff
30003e74:	6c                   	ins    BYTE PTR es:[edi],dx
30003e75:	ed                   	in     eax,dx
30003e76:	ff                   	(bad)  
30003e77:	ff d4                	call   esp
30003e79:	c1 ff ff             	sar    edi,0xff
30003e7c:	8c ed                	mov    ebp,gs
30003e7e:	ff                   	(bad)  
30003e7f:	ff 0c c2             	dec    DWORD PTR [edx+eax*8]
30003e82:	ff                   	(bad)  
30003e83:	ff c0                	inc    eax
30003e85:	ed                   	in     eax,dx
30003e86:	ff                   	(bad)  
30003e87:	ff 61 c2             	jmp    DWORD PTR [ecx-0x3e]
30003e8a:	ff                   	(bad)  
30003e8b:	ff e8                	jmp    <internal disassembler error>
30003e8d:	ed                   	in     eax,dx
30003e8e:	ff                   	(bad)  
30003e8f:	ff                   	(bad)  
30003e90:	b8 c2 ff ff 10       	mov    eax,0x10ffffc2
30003e95:	ee                   	out    dx,al
30003e96:	ff                   	(bad)  
30003e97:	ff 50 c3             	call   DWORD PTR [eax-0x3d]
30003e9a:	ff                   	(bad)  
30003e9b:	ff 4c ee ff          	dec    DWORD PTR [esi+ebp*8-0x1]
30003e9f:	ff c7                	inc    edi
30003ea1:	c3                   	ret    
30003ea2:	ff                   	(bad)  
30003ea3:	ff 70 ee             	push   DWORD PTR [eax-0x12]
30003ea6:	ff                   	(bad)  
30003ea7:	ff 82 c4 ff ff 94    	inc    DWORD PTR [edx-0x6b00003c]
30003ead:	ee                   	out    dx,al
30003eae:	ff                   	(bad)  
30003eaf:	ff                   	(bad)  
30003eb0:	3d c5 ff ff b8       	cmp    eax,0xb8ffffc5
30003eb5:	ee                   	out    dx,al
30003eb6:	ff                   	(bad)  
30003eb7:	ff 9c c5 ff ff d8 ee 	call   FWORD PTR [ebp+eax*8-0x11270001]
30003ebe:	ff                   	(bad)  
30003ebf:	ff 46 c6             	inc    DWORD PTR [esi-0x3a]
30003ec2:	ff                   	(bad)  
30003ec3:	ff                   	(bad)  
30003ec4:	fc                   	cld    
30003ec5:	ee                   	out    dx,al
30003ec6:	ff                   	(bad)  
30003ec7:	ff 08                	dec    DWORD PTR [eax]
30003ec9:	c8 ff ff 20          	enter  0xffff,0x20
30003ecd:	ef                   	out    dx,eax
30003ece:	ff                   	(bad)  
30003ecf:	ff 35 c8 ff ff 44    	push   DWORD PTR ds:0x44ffffc8
30003ed5:	ef                   	out    dx,eax
30003ed6:	ff                   	(bad)  
30003ed7:	ff 5f c8             	call   FWORD PTR [edi-0x38]
30003eda:	ff                   	(bad)  
30003edb:	ff 68 ef             	jmp    FWORD PTR [eax-0x11]
30003ede:	ff                   	(bad)  
30003edf:	ff 94 c8 ff ff 90 ef 	call   DWORD PTR [eax+ecx*8-0x106f0001]
30003ee6:	ff                   	(bad)  
30003ee7:	ff c9                	dec    ecx
30003ee9:	c8 ff ff b8          	enter  0xffff,0xb8
30003eed:	ef                   	out    dx,eax
30003eee:	ff                   	(bad)  
30003eef:	ff                   	(bad)  
30003ef0:	fc                   	cld    
30003ef1:	c8 ff ff dc          	enter  0xffff,0xdc
30003ef5:	ef                   	out    dx,eax
30003ef6:	ff                   	(bad)  
30003ef7:	ff 22                	jmp    DWORD PTR [edx]
30003ef9:	c9                   	leave  
30003efa:	ff                   	(bad)  
30003efb:	ff 00                	inc    DWORD PTR [eax]
30003efd:	f0 ff                	lock (bad) 
30003eff:	ff 65 c9             	jmp    DWORD PTR [ebp-0x37]
30003f02:	ff                   	(bad)  
30003f03:	ff 24 f0             	jmp    DWORD PTR [eax+esi*8]
30003f06:	ff                   	(bad)  
30003f07:	ff 94 c9 ff ff 48 f0 	call   DWORD PTR [ecx+ecx*8-0xfb70001]
30003f0e:	ff                   	(bad)  
30003f0f:	ff 50 ca             	call   DWORD PTR [eax-0x36]
30003f12:	ff                   	(bad)  
30003f13:	ff 6c f0 ff          	jmp    FWORD PTR [eax+esi*8-0x1]
30003f17:	ff 8a ca ff ff 94    	dec    DWORD PTR [edx-0x6b000036]
30003f1d:	f0 ff                	lock (bad) 
30003f1f:	ff c6                	inc    esi
30003f21:	ca ff ff             	retf   0xffff
30003f24:	bc f0 ff ff 04       	mov    esp,0x4fffff0
30003f29:	cb                   	retf   
30003f2a:	ff                   	(bad)  
30003f2b:	ff e4                	jmp    esp
30003f2d:	f0 ff                	lock (bad) 
30003f2f:	ff 44 cb ff          	inc    DWORD PTR [ebx+ecx*8-0x1]
30003f33:	ff 0c f1             	dec    DWORD PTR [ecx+esi*8]
30003f36:	ff                   	(bad)  
30003f37:	ff 86 cb ff ff 34    	inc    DWORD PTR [esi+0x34ffffcb]
30003f3d:	f1                   	icebp  
30003f3e:	ff                   	(bad)  
30003f3f:	ff 2b                	jmp    FWORD PTR [ebx]
30003f41:	cc                   	int3   
30003f42:	ff                   	(bad)  
30003f43:	ff 58 f1             	call   FWORD PTR [eax-0xf]
30003f46:	ff                   	(bad)  
30003f47:	ff 4a cc             	dec    DWORD PTR [edx-0x34]
30003f4a:	ff                   	(bad)  
30003f4b:	ff                   	(bad)  
30003f4c:	7c f1                	jl     30003f3f <__GNU_EH_FRAME_HDR+0xdb>
30003f4e:	ff                   	(bad)  
30003f4f:	ff                   	(bad)  
30003f50:	7e cc                	jle    30003f1e <__GNU_EH_FRAME_HDR+0xba>
30003f52:	ff                   	(bad)  
30003f53:	ff 9c f1 ff ff b2 cc 	call   FWORD PTR [ecx+esi*8-0x334d0001]
30003f5a:	ff                   	(bad)  
30003f5b:	ff                   	(bad)  
30003f5c:	bc f1 ff ff e6       	mov    esp,0xe6fffff1
30003f61:	cc                   	int3   
30003f62:	ff                   	(bad)  
30003f63:	ff dc                	call   <internal disassembler error>
30003f65:	f1                   	icebp  
30003f66:	ff                   	(bad)  
30003f67:	ff 1d cd ff ff fc    	call   FWORD PTR ds:0xfcffffcd
30003f6d:	f1                   	icebp  
30003f6e:	ff                   	(bad)  
30003f6f:	ff 92 cd ff ff 24    	call   DWORD PTR [edx+0x24ffffcd]
30003f75:	f2 ff                	repnz (bad) 
30003f77:	ff af cd ff ff 44    	jmp    FWORD PTR [edi+0x44ffffcd]
30003f7d:	f2 ff                	repnz (bad) 
30003f7f:	ff d8                	call   <internal disassembler error>
30003f81:	cd ff                	int    0xff
30003f83:	ff 64 f2 ff          	jmp    DWORD PTR [edx+esi*8-0x1]
30003f87:	ff 01                	inc    DWORD PTR [ecx]
30003f89:	ce                   	into   
30003f8a:	ff                   	(bad)  
30003f8b:	ff 84 f2 ff ff 4d ce 	inc    DWORD PTR [edx+esi*8-0x31b20001]
30003f92:	ff                   	(bad)  
30003f93:	ff a4 f2 ff ff 41 d0 	jmp    DWORD PTR [edx+esi*8-0x2fbe0001]
30003f9a:	ff                   	(bad)  
30003f9b:	ff c8                	dec    eax
30003f9d:	f2 ff                	repnz (bad) 
30003f9f:	ff 90 d0 ff ff e8    	call   DWORD PTR [eax-0x17000030]
30003fa5:	f2 ff                	repnz (bad) 
30003fa7:	ff ac d0 ff ff 08 f3 	jmp    FWORD PTR [eax+edx*8-0xcf70001]
30003fae:	ff                   	(bad)  
30003faf:	ff                   	(bad)  
30003fb0:	bc d0 ff ff 28       	mov    esp,0x28ffffd0
30003fb5:	f3 ff                	repz (bad) 
30003fb7:	ff dc                	call   <internal disassembler error>
30003fb9:	d0 ff                	sar    bh,1
30003fbb:	ff 48 f3             	dec    DWORD PTR [eax-0xd]
30003fbe:	ff                   	(bad)  
30003fbf:	ff 48 d1             	dec    DWORD PTR [eax-0x2f]
30003fc2:	ff                   	(bad)  
30003fc3:	ff 6c f3 ff          	jmp    FWORD PTR [ebx+esi*8-0x1]
30003fc7:	ff cf                	dec    edi
30003fc9:	d1 ff                	sar    edi,1
30003fcb:	ff 8c f3 ff ff 08 d2 	dec    DWORD PTR [ebx+esi*8-0x2df70001]
30003fd2:	ff                   	(bad)  
30003fd3:	ff ac f3 ff ff dc d3 	jmp    FWORD PTR [ebx+esi*8-0x2c230001]
30003fda:	ff                   	(bad)  
30003fdb:	ff d0                	call   eax
30003fdd:	f3 ff                	repz (bad) 
30003fdf:	ff                   	(bad)  
30003fe0:	fc                   	cld    
30003fe1:	d3 ff                	sar    edi,cl
30003fe3:	ff f0                	push   eax
30003fe5:	f3 ff                	repz (bad) 
30003fe7:	ff 17                	call   DWORD PTR [edi]
30003fe9:	d4 ff                	aam    0xff
30003feb:	ff 10                	call   DWORD PTR [eax]
30003fed:	f4                   	hlt    
30003fee:	ff                   	(bad)  
30003fef:	ff 4c d4 ff          	dec    DWORD PTR [esp+edx*8-0x1]
30003ff3:	ff 34 f4             	push   DWORD PTR [esp+esi*8]
30003ff6:	ff                   	(bad)  
30003ff7:	ff e8                	jmp    <internal disassembler error>
30003ff9:	d5 ff                	aad    0xff
30003ffb:	ff 54 f4 ff          	call   DWORD PTR [esp+esi*8-0x1]
30003fff:	ff af d6 ff ff 74    	jmp    FWORD PTR [edi+0x74ffffd6]
30004005:	f4                   	hlt    
30004006:	ff                   	(bad)  
30004007:	ff d0                	call   eax
30004009:	d6                   	(bad)  
3000400a:	ff                   	(bad)  
3000400b:	ff 94 f4 ff ff e4 d6 	call   DWORD PTR [esp+esi*8-0x291b0001]
30004012:	ff                   	(bad)  
30004013:	ff b4 f4 ff ff 10 d7 	push   DWORD PTR [esp+esi*8-0x28ef0001]
3000401a:	ff                   	(bad)  
3000401b:	ff d8                	call   <internal disassembler error>
3000401d:	f4                   	hlt    
3000401e:	ff                   	(bad)  
3000401f:	ff 94 d7 ff ff fc f4 	call   DWORD PTR [edi+edx*8-0xb030001]
30004026:	ff                   	(bad)  
30004027:	ff d2                	call   edx
30004029:	d7                   	xlat   BYTE PTR ds:[ebx]
3000402a:	ff                   	(bad)  
3000402b:	ff 20                	jmp    DWORD PTR [eax]
3000402d:	f5                   	cmc    
3000402e:	ff                   	(bad)  
3000402f:	ff 10                	call   DWORD PTR [eax]
30004031:	d8 ff                	fdivr  st,st(7)
30004033:	ff 44 f5 ff          	inc    DWORD PTR [ebp+esi*8-0x1]
30004037:	ff 80 d8 ff ff 64    	inc    DWORD PTR [eax+0x64ffffd8]
3000403d:	f5                   	cmc    
3000403e:	ff                   	(bad)  
3000403f:	ff e0                	jmp    eax
30004041:	d8 ff                	fdivr  st,st(7)
30004043:	ff 8c f5 ff ff 20 d9 	dec    DWORD PTR [ebp+esi*8-0x26df0001]
3000404a:	ff                   	(bad)  
3000404b:	ff ac f5 ff ff 60 d9 	jmp    FWORD PTR [ebp+esi*8-0x269f0001]
30004052:	ff                   	(bad)  
30004053:	ff cc                	dec    esp
30004055:	f5                   	cmc    
30004056:	ff                   	(bad)  
30004057:	ff a8 d9 ff ff ec    	jmp    FWORD PTR [eax-0x13000027]
3000405d:	f5                   	cmc    
3000405e:	ff                   	(bad)  
3000405f:	ff d8                	call   <internal disassembler error>
30004061:	d9 ff                	fcos   
30004063:	ff 0c f6             	dec    DWORD PTR [esi+esi*8]
30004066:	ff                   	(bad)  
30004067:	ff 34 da             	push   DWORD PTR [edx+ebx*8]
3000406a:	ff                   	(bad)  
3000406b:	ff 2c f6             	jmp    FWORD PTR [esi+esi*8]
3000406e:	ff                   	(bad)  
3000406f:	ff 65 da             	jmp    DWORD PTR [ebp-0x26]
30004072:	ff                   	(bad)  
30004073:	ff 4c f6 ff          	dec    DWORD PTR [esi+esi*8-0x1]
30004077:	ff 98 da ff ff 6c    	call   FWORD PTR [eax+0x6cffffda]
3000407d:	f6 ff                	idiv   bh
3000407f:	ff                   	(bad)  
30004080:	ff da                	call   <internal disassembler error>
30004082:	ff                   	(bad)  
30004083:	ff 8c f6 ff ff 68 db 	dec    DWORD PTR [esi+esi*8-0x24970001]
3000408a:	ff                   	(bad)  
3000408b:	ff ac f6 ff ff c8 db 	jmp    FWORD PTR [esi+esi*8-0x24370001]
30004092:	ff                   	(bad)  
30004093:	ff cc                	dec    esp
30004095:	f6 ff                	idiv   bh
30004097:	ff e8                	jmp    <internal disassembler error>
30004099:	db ff                	(bad)  
3000409b:	ff ec                	jmp    <internal disassembler error>
3000409d:	f6 ff                	idiv   bh
3000409f:	ff 68 dd             	jmp    FWORD PTR [eax-0x23]
300040a2:	ff                   	(bad)  
300040a3:	ff 1c f7             	call   FWORD PTR [edi+esi*8]
300040a6:	ff                   	(bad)  
300040a7:	ff 88 dd ff ff 3c    	dec    DWORD PTR [eax+0x3cffffdd]
300040ad:	f7 ff                	idiv   edi
300040af:	ff 24 df             	jmp    DWORD PTR [edi+ebx*8]
300040b2:	ff                   	(bad)  
300040b3:	ff 6c f7 ff          	jmp    FWORD PTR [edi+esi*8-0x1]
300040b7:	ff                   	(bad)  
300040b8:	ba df ff ff 90       	mov    edx,0x90ffffdf
300040bd:	f7 ff                	idiv   edi
300040bf:	ff dc                	call   <internal disassembler error>
300040c1:	df ff                	(bad)  
300040c3:	ff b0 f7 ff ff 4a    	push   DWORD PTR [eax+0x4afffff7]
300040c9:	e0 ff                	loopne 300040ca <__GNU_EH_FRAME_HDR+0x266>
300040cb:	ff d8                	call   <internal disassembler error>
300040cd:	f7 ff                	idiv   edi
300040cf:	ff 68 e0             	jmp    FWORD PTR [eax-0x20]
300040d2:	ff                   	(bad)  
300040d3:	ff                   	(bad)  
300040d4:	f8                   	clc    
300040d5:	f7 ff                	idiv   edi
300040d7:	ff ac e0 ff ff 20 f8 	jmp    FWORD PTR [eax+eiz*8-0x7df0001]
300040de:	ff                   	(bad)  
300040df:	ff c5                	inc    ebp
300040e1:	e3 ff                	jecxz  300040e2 <__GNU_EH_FRAME_HDR+0x27e>
300040e3:	ff 48 f8             	dec    DWORD PTR [eax-0x8]
300040e6:	ff                   	(bad)  
300040e7:	ff e2                	jmp    edx
300040e9:	e3 ff                	jecxz  300040ea <__GNU_EH_FRAME_HDR+0x286>
300040eb:	ff 68 f8             	jmp    FWORD PTR [eax-0x8]
300040ee:	ff                   	(bad)  
300040ef:	ff 23                	jmp    DWORD PTR [ebx]
300040f1:	e4 ff                	in     al,0xff
300040f3:	ff 8c f8 ff ff 58 e4 	dec    DWORD PTR [eax+edi*8-0x1ba70001]
300040fa:	ff                   	(bad)  
300040fb:	ff ac f8 ff ff 75 e4 	jmp    FWORD PTR [eax+edi*8-0x1b8a0001]
30004102:	ff                   	(bad)  
30004103:	ff cc                	dec    esp
30004105:	f8                   	clc    
30004106:	ff                   	(bad)  
30004107:	ff b6 ec ff ff fc    	push   DWORD PTR [esi-0x3000014]
3000410d:	f8                   	clc    
3000410e:	ff                   	(bad)  
3000410f:	ff 23                	jmp    DWORD PTR [ebx]
30004111:	ed                   	in     eax,dx
30004112:	ff                   	(bad)  
30004113:	ff ac ed ff ff 4c ed 	jmp    FWORD PTR [ebp+ebp*8-0x12b30001]
3000411a:	ff                   	(bad)  
3000411b:	ff                   	(bad)  
3000411c:	38 ee                	cmp    dh,ch
3000411e:	ff                   	(bad)  
3000411f:	ff 50 ed             	call   DWORD PTR [eax-0x13]
30004122:	ff                   	(bad)  
30004123:	ff 24 f9             	jmp    DWORD PTR [ecx+edi*8]
30004126:	ff                   	(bad)  
30004127:	ff                   	.byte 0xff

Disassembly of section .rodata:

30004140 <_ytab-0x240>:
30004140:	3d 00 53 74 72       	cmp    eax,0x72745300
30004145:	65                   	gs
30004146:	61                   	popa   
30004147:	6d                   	ins    DWORD PTR es:[edi],dx
30004148:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
3000414e:	74 20                	je     30004170 <__GNU_EH_FRAME_HDR+0x30c>
30004150:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
30004157:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004158:	74 65                	je     300041bf <__GNU_EH_FRAME_HDR+0x35b>
3000415a:	64 0a 00             	or     al,BYTE PTR fs:[eax]
3000415d:	00 00                	add    BYTE PTR [eax],al
3000415f:	00 2a                	add    BYTE PTR [edx],ch
30004161:	2a 2a                	sub    ch,BYTE PTR [edx]
30004163:	6c                   	ins    BYTE PTR es:[edi],dx
30004164:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
3000416b:	74 20                	je     3000418d <__GNU_EH_FRAME_HDR+0x329>
3000416d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30004170:	6c                   	ins    BYTE PTR es:[edi],dx
30004171:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
30004175:	2a 2a                	sub    ch,BYTE PTR [edx]
30004177:	00 2a                	add    BYTE PTR [edx],ch
30004179:	2a 2a                	sub    ch,BYTE PTR [edx]
3000417b:	6c                   	ins    BYTE PTR es:[edi],dx
3000417c:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30004183:	74 20                	je     300041a5 <__GNU_EH_FRAME_HDR+0x341>
30004185:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
30004188:	70 6c                	jo     300041f6 <__GNU_EH_FRAME_HDR+0x392>
3000418a:	65                   	gs
3000418b:	74 65                	je     300041f2 <__GNU_EH_FRAME_HDR+0x38e>
3000418d:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30004190:	6c                   	ins    BYTE PTR es:[edi],dx
30004191:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30004198:	74 20                	je     300041ba <__GNU_EH_FRAME_HDR+0x356>
3000419a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
3000419d:	6c                   	ins    BYTE PTR es:[edi],dx
3000419e:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
300041a3:	65                   	gs
300041a4:	76 69                	jbe    3000420f <__GNU_EH_FRAME_HDR+0x3ab>
300041a6:	6f                   	outs   dx,DWORD PTR ds:[esi]
300041a7:	75 73                	jne    3000421c <__GNU_EH_FRAME_HDR+0x3b8>
300041a9:	6c                   	ins    BYTE PTR es:[edi],dx
300041aa:	79 2c                	jns    300041d8 <__GNU_EH_FRAME_HDR+0x374>
300041ac:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
300041af:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
300041b6:	6c 
300041b7:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
300041be:	65 63 20             	arpl   WORD PTR gs:[eax],sp
300041c1:	66 6f                	outs   dx,WORD PTR ds:[esi]
300041c3:	72 20                	jb     300041e5 <__GNU_EH_FRAME_HDR+0x381>
300041c5:	25 73 0a 00 20       	and    eax,0x20000a73
300041ca:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
300041ce:	63 3a                	arpl   WORD PTR [edx],di
300041d0:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
300041d3:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
300041d7:	66 6f                	outs   dx,WORD PTR ds:[esi]
300041d9:	72 20                	jb     300041fb <__GNU_EH_FRAME_HDR+0x397>
300041db:	25 73 0a 00 6c       	and    eax,0x6c000a73
300041e0:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
300041e7:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
300041eb:	66 6f                	outs   dx,WORD PTR ds:[esi]
300041ed:	72 20                	jb     3000420f <__GNU_EH_FRAME_HDR+0x3ab>
300041ef:	25 73 0a 00 00       	and    eax,0xa73
300041f4:	68 65 61 70 42       	push   0x42706165
300041f9:	61                   	popa   
300041fa:	73 65                	jae    30004261 <__GNU_EH_FRAME_HDR+0x3fd>
300041fc:	20 40 20             	and    BYTE PTR [eax+0x20],al
300041ff:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
30004202:	30 38                	xor    BYTE PTR [eax],bh
30004204:	58                   	pop    eax
30004205:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
3000420b:	30 38                	xor    BYTE PTR [eax],bh
3000420d:	58                   	pop    eax
3000420e:	20 62 65             	and    BYTE PTR [edx+0x65],ah
30004211:	66 6f                	outs   dx,WORD PTR ds:[esi]
30004213:	72 65                	jb     3000427a <__GNU_EH_FRAME_HDR+0x416>
30004215:	0a 00                	or     al,BYTE PTR [eax]
30004217:	6d                   	ins    DWORD PTR es:[edi],dx
30004218:	61                   	popa   
30004219:	6c                   	ins    BYTE PTR es:[edi],dx
3000421a:	6c                   	ins    BYTE PTR es:[edi],dx
3000421b:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000421c:	63 28                	arpl   WORD PTR [eax],bp
3000421e:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004221:	30 38                	xor    BYTE PTR [eax],bh
30004223:	58                   	pop    eax
30004224:	29 0a                	sub    DWORD PTR [edx],ecx
30004226:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
3000422a:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
3000422d:	61                   	popa   
3000422e:	6c                   	ins    BYTE PTR es:[edi],dx
3000422f:	6c                   	ins    BYTE PTR es:[edi],dx
30004230:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004231:	63 3a                	arpl   WORD PTR [edx],di
30004233:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
30004236:	65                   	gs
30004237:	64                   	fs
30004238:	65                   	gs
30004239:	64                   	fs
3000423a:	3d 30 78 25 30       	cmp    eax,0x30257830
3000423f:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30004242:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30004246:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
30004249:	61                   	popa   
3000424a:	6c                   	ins    BYTE PTR es:[edi],dx
3000424b:	6c                   	ins    BYTE PTR es:[edi],dx
3000424c:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000424d:	63 3a                	arpl   WORD PTR [edx],di
3000424f:	20 68 65             	and    BYTE PTR [eax+0x65],ch
30004252:	61                   	popa   
30004253:	45                   	inc    ebp
30004254:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004255:	64                   	fs
30004256:	3d 30 78 25 30       	cmp    eax,0x30257830
3000425b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
3000425e:	00 00                	add    BYTE PTR [eax],al
30004260:	6c                   	ins    BYTE PTR es:[edi],dx
30004261:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004268:	6c                   	ins    BYTE PTR es:[edi],dx
30004269:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000426a:	63 3a                	arpl   WORD PTR [edx],di
3000426c:	20 52 65             	and    BYTE PTR [edx+0x65],dl
3000426f:	71 20                	jno    30004291 <__GNU_EH_FRAME_HDR+0x42d>
30004271:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004274:	30 38                	xor    BYTE PTR [eax],bh
30004276:	58                   	pop    eax
30004277:	20 62 79             	and    BYTE PTR [edx+0x79],ah
3000427a:	74 65                	je     300042e1 <__GNU_EH_FRAME_HDR+0x47d>
3000427c:	73 2c                	jae    300042aa <__GNU_EH_FRAME_HDR+0x446>
3000427e:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30004281:	74 20                	je     300042a3 <__GNU_EH_FRAME_HDR+0x43f>
30004283:	77 61                	ja     300042e6 <__GNU_EH_FRAME_HDR+0x482>
30004285:	73 20                	jae    300042a7 <__GNU_EH_FRAME_HDR+0x443>
30004287:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
3000428a:	30 38                	xor    BYTE PTR [eax],bh
3000428c:	58                   	pop    eax
3000428d:	2c 20                	sub    al,0x20
3000428f:	68 65 61 70 45       	push   0x45706165
30004294:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004295:	64                   	fs
30004296:	3d 30 78 25 30       	cmp    eax,0x30257830
3000429b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
3000429e:	00 00                	add    BYTE PTR [eax],al
300042a0:	6c                   	ins    BYTE PTR es:[edi],dx
300042a1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
300042a8:	6c                   	ins    BYTE PTR es:[edi],dx
300042a9:	6f                   	outs   dx,DWORD PTR ds:[esi]
300042aa:	63 3a                	arpl   WORD PTR [edx],di
300042ac:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
300042af:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
300042b6:	65 
300042b7:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
300042bb:	61                   	popa   
300042bc:	70 43                	jo     30004301 <__GNU_EH_FRAME_HDR+0x49d>
300042be:	75 72                	jne    30004332 <__GNU_EH_FRAME_HDR+0x4ce>
300042c0:	72 20                	jb     300042e2 <__GNU_EH_FRAME_HDR+0x47e>
300042c2:	61                   	popa   
300042c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
300042c4:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
300042c8:	61                   	popa   
300042c9:	70 42                	jo     3000430d <__GNU_EH_FRAME_HDR+0x4a9>
300042cb:	61                   	popa   
300042cc:	73 65                	jae    30004333 <__GNU_EH_FRAME_HDR+0x4cf>
300042ce:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
300042d2:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
300042d5:	30 38                	xor    BYTE PTR [eax],bh
300042d7:	58                   	pop    eax
300042d8:	0a 00                	or     al,BYTE PTR [eax]
300042da:	00 00                	add    BYTE PTR [eax],al
300042dc:	6c                   	ins    BYTE PTR es:[edi],dx
300042dd:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
300042e4:	6c                   	ins    BYTE PTR es:[edi],dx
300042e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
300042e6:	63 3a                	arpl   WORD PTR [edx],di
300042e8:	63 72 65             	arpl   WORD PTR [edx+0x65],si
300042eb:	61                   	popa   
300042ec:	74 69                	je     30004357 <__GNU_EH_FRAME_HDR+0x4f3>
300042ee:	6e                   	outs   dx,BYTE PTR ds:[esi]
300042ef:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
300042f3:	61                   	popa   
300042f4:	70 20                	jo     30004316 <__GNU_EH_FRAME_HDR+0x4b2>
300042f6:	72 65                	jb     3000435d <__GNU_EH_FRAME_HDR+0x4f9>
300042f8:	63 20                	arpl   WORD PTR [eax],sp
300042fa:	40                   	inc    eax
300042fb:	20 30                	and    BYTE PTR [eax],dh
300042fd:	78 25                	js     30004324 <__GNU_EH_FRAME_HDR+0x4c0>
300042ff:	30 38                	xor    BYTE PTR [eax],bh
30004301:	58                   	pop    eax
30004302:	0a 00                	or     al,BYTE PTR [eax]
30004304:	6c                   	ins    BYTE PTR es:[edi],dx
30004305:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
3000430c:	6c                   	ins    BYTE PTR es:[edi],dx
3000430d:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000430e:	63 3a                	arpl   WORD PTR [edx],di
30004310:	20 68 65             	and    BYTE PTR [eax+0x65],ch
30004313:	61                   	popa   
30004314:	70 43                	jo     30004359 <__GNU_EH_FRAME_HDR+0x4f5>
30004316:	75 72                	jne    3000438a <_ytab+0xa>
30004318:	72 3d                	jb     30004357 <__GNU_EH_FRAME_HDR+0x4f3>
3000431a:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
3000431d:	30 38                	xor    BYTE PTR [eax],bh
3000431f:	58                   	pop    eax
30004320:	2c 20                	sub    al,0x20
30004322:	73 69                	jae    3000438d <_ytab+0xd>
30004324:	7a 65                	jp     3000438b <_ytab+0xb>
30004326:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004327:	66                   	data16
30004328:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
3000432b:	61                   	popa   
3000432c:	70 72                	jo     300043a0 <_ytab+0x20>
3000432e:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
30004332:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
30004338:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
3000433b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
3000433e:	6c                   	ins    BYTE PTR es:[edi],dx
3000433f:	6c                   	ins    BYTE PTR es:[edi],dx
30004340:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004341:	63 3a                	arpl   WORD PTR [edx],di
30004343:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30004346:	74 75                	je     300043bd <_ytab+0x3d>
30004348:	72 6e                	jb     300043b8 <_ytab+0x38>
3000434a:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
30004351:	30 38                	xor    BYTE PTR [eax],bh
30004353:	58                   	pop    eax
30004354:	0a 00                	or     al,BYTE PTR [eax]
	...
3000435e:	00 00                	add    BYTE PTR [eax],al
30004360:	47                   	inc    edi
30004361:	4d                   	dec    ebp
30004362:	54                   	push   esp
	...

30004380 <_ytab>:
30004380:	1f                   	pop    ds
30004381:	00 00                	add    BYTE PTR [eax],al
30004383:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30004386:	00 00                	add    BYTE PTR [eax],al
30004388:	1f                   	pop    ds
30004389:	00 00                	add    BYTE PTR [eax],al
3000438b:	00 1e                	add    BYTE PTR [esi],bl
3000438d:	00 00                	add    BYTE PTR [eax],al
3000438f:	00 1f                	add    BYTE PTR [edi],bl
30004391:	00 00                	add    BYTE PTR [eax],al
30004393:	00 1e                	add    BYTE PTR [esi],bl
30004395:	00 00                	add    BYTE PTR [eax],al
30004397:	00 1f                	add    BYTE PTR [edi],bl
30004399:	00 00                	add    BYTE PTR [eax],al
3000439b:	00 1f                	add    BYTE PTR [edi],bl
3000439d:	00 00                	add    BYTE PTR [eax],al
3000439f:	00 1e                	add    BYTE PTR [esi],bl
300043a1:	00 00                	add    BYTE PTR [eax],al
300043a3:	00 1f                	add    BYTE PTR [edi],bl
300043a5:	00 00                	add    BYTE PTR [eax],al
300043a7:	00 1e                	add    BYTE PTR [esi],bl
300043a9:	00 00                	add    BYTE PTR [eax],al
300043ab:	00 1f                	add    BYTE PTR [edi],bl
300043ad:	00 00                	add    BYTE PTR [eax],al
300043af:	00 1f                	add    BYTE PTR [edi],bl
300043b1:	00 00                	add    BYTE PTR [eax],al
300043b3:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
300043b9:	00 00                	add    BYTE PTR [eax],al
300043bb:	00 1e                	add    BYTE PTR [esi],bl
300043bd:	00 00                	add    BYTE PTR [eax],al
300043bf:	00 1f                	add    BYTE PTR [edi],bl
300043c1:	00 00                	add    BYTE PTR [eax],al
300043c3:	00 1e                	add    BYTE PTR [esi],bl
300043c5:	00 00                	add    BYTE PTR [eax],al
300043c7:	00 1f                	add    BYTE PTR [edi],bl
300043c9:	00 00                	add    BYTE PTR [eax],al
300043cb:	00 1f                	add    BYTE PTR [edi],bl
300043cd:	00 00                	add    BYTE PTR [eax],al
300043cf:	00 1e                	add    BYTE PTR [esi],bl
300043d1:	00 00                	add    BYTE PTR [eax],al
300043d3:	00 1f                	add    BYTE PTR [edi],bl
300043d5:	00 00                	add    BYTE PTR [eax],al
300043d7:	00 1e                	add    BYTE PTR [esi],bl
300043d9:	00 00                	add    BYTE PTR [eax],al
300043db:	00 1f                	add    BYTE PTR [edi],bl
300043dd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

300043e0 <.rel.dyn>:
300043e0:	24 46                	and    al,0x46
300043e2:	00 30                	add    BYTE PTR [eax],dh
300043e4:	08 00                	or     BYTE PTR [eax],al
300043e6:	00 00                	add    BYTE PTR [eax],al
300043e8:	28 46 00             	sub    BYTE PTR [esi+0x0],al
300043eb:	30 08                	xor    BYTE PTR [eax],cl
300043ed:	00 00                	add    BYTE PTR [eax],al
300043ef:	00 2c 46             	add    BYTE PTR [esi+eax*2],ch
300043f2:	00 30                	add    BYTE PTR [eax],dh
300043f4:	08 00                	or     BYTE PTR [eax],al
300043f6:	00 00                	add    BYTE PTR [eax],al
300043f8:	30 46 00             	xor    BYTE PTR [esi+0x0],al
300043fb:	30 08                	xor    BYTE PTR [eax],cl
300043fd:	00 00                	add    BYTE PTR [eax],al
300043ff:	00 34 46             	add    BYTE PTR [esi+eax*2],dh
30004402:	00 30                	add    BYTE PTR [eax],dh
30004404:	08 00                	or     BYTE PTR [eax],al
30004406:	00 00                	add    BYTE PTR [eax],al
30004408:	4c                   	dec    esp
30004409:	46                   	inc    esi
3000440a:	00 30                	add    BYTE PTR [eax],dh
3000440c:	08 00                	or     BYTE PTR [eax],al
3000440e:	00 00                	add    BYTE PTR [eax],al
30004410:	50                   	push   eax
30004411:	46                   	inc    esi
30004412:	00 30                	add    BYTE PTR [eax],dh
30004414:	08 00                	or     BYTE PTR [eax],al
30004416:	00 00                	add    BYTE PTR [eax],al
30004418:	54                   	push   esp
30004419:	46                   	inc    esi
3000441a:	00 30                	add    BYTE PTR [eax],dh
3000441c:	08 00                	or     BYTE PTR [eax],al
3000441e:	00 00                	add    BYTE PTR [eax],al
30004420:	7e 07                	jle    30004429 <_ytab+0xa9>
30004422:	00 30                	add    BYTE PTR [eax],dh
30004424:	02 23                	add    ah,BYTE PTR [ebx]
30004426:	00 00                	add    BYTE PTR [eax],al
30004428:	be 07 00 30 02       	mov    esi,0x2300007
3000442d:	23 00                	and    eax,DWORD PTR [eax]
3000442f:	00 e7                	add    bh,ah
30004431:	07                   	pop    es
30004432:	00 30                	add    BYTE PTR [eax],dh
30004434:	02 23                	add    ah,BYTE PTR [ebx]
30004436:	00 00                	add    BYTE PTR [eax],al
30004438:	44                   	inc    esp
30004439:	08 00                	or     BYTE PTR [eax],al
3000443b:	30 02                	xor    BYTE PTR [edx],al
3000443d:	23 00                	and    eax,DWORD PTR [eax]
3000443f:	00 a7 08 00 30 02    	add    BYTE PTR [edi+0x2300008],ah
30004445:	23 00                	and    eax,DWORD PTR [eax]
30004447:	00 dd                	add    ch,bl
30004449:	08 00                	or     BYTE PTR [eax],al
3000444b:	30 02                	xor    BYTE PTR [edx],al
3000444d:	23 00                	and    eax,DWORD PTR [eax]
3000444f:	00 19                	add    BYTE PTR [ecx],bl
30004451:	09 00                	or     DWORD PTR [eax],eax
30004453:	30 02                	xor    BYTE PTR [edx],al
30004455:	23 00                	and    eax,DWORD PTR [eax]
30004457:	00 57 09             	add    BYTE PTR [edi+0x9],dl
3000445a:	00 30                	add    BYTE PTR [eax],dh
3000445c:	02 23                	add    ah,BYTE PTR [ebx]
3000445e:	00 00                	add    BYTE PTR [eax],al
30004460:	97                   	xchg   edi,eax
30004461:	09 00                	or     DWORD PTR [eax],eax
30004463:	30 02                	xor    BYTE PTR [edx],al
30004465:	23 00                	and    eax,DWORD PTR [eax]
30004467:	00 d9                	add    cl,bl
30004469:	09 00                	or     DWORD PTR [eax],eax
3000446b:	30 02                	xor    BYTE PTR [edx],al
3000446d:	23 00                	and    eax,DWORD PTR [eax]
3000446f:	00 b3 0b 00 30 02    	add    BYTE PTR [ebx+0x230000b],dh
30004475:	23 00                	and    eax,DWORD PTR [eax]
30004477:	00 e3                	add    bl,ah
30004479:	0b 00                	or     eax,DWORD PTR [eax]
3000447b:	30 02                	xor    BYTE PTR [edx],al
3000447d:	23 00                	and    eax,DWORD PTR [eax]
3000447f:	00 59 0c             	add    BYTE PTR [ecx+0xc],bl
30004482:	00 30                	add    BYTE PTR [eax],dh
30004484:	02 23                	add    ah,BYTE PTR [ebx]
30004486:	00 00                	add    BYTE PTR [eax],al
30004488:	ff 1e                	call   FWORD PTR [esi]
3000448a:	00 30                	add    BYTE PTR [eax],dh
3000448c:	02 23                	add    ah,BYTE PTR [ebx]
3000448e:	00 00                	add    BYTE PTR [eax],al
30004490:	53                   	push   ebx
30004491:	2b 00                	sub    eax,DWORD PTR [eax]
30004493:	30 02                	xor    BYTE PTR [edx],al
30004495:	23 00                	and    eax,DWORD PTR [eax]
30004497:	00 48 46             	add    BYTE PTR [eax+0x46],cl
3000449a:	00 30                	add    BYTE PTR [eax],dh
3000449c:	01 13                	add    DWORD PTR [ebx],edx
3000449e:	00 00                	add    BYTE PTR [eax],al
300044a0:	44                   	inc    esp
300044a1:	46                   	inc    esi
300044a2:	00 30                	add    BYTE PTR [eax],dh
300044a4:	07                   	pop    es
300044a5:	11 00                	adc    DWORD PTR [eax],eax
	...

Disassembly of section .data:

300044c0 <console_node>:
300044c0:	01 00                	add    DWORD PTR [eax],eax
	...

30004500 <rcsid>:
30004500:	24 48                	and    al,0x48
30004502:	65                   	gs
30004503:	61                   	popa   
30004504:	64                   	fs
30004505:	65                   	gs
30004506:	72 3a                	jb     30004542 <rcsid+0x42>
30004508:	20 2f                	and    BYTE PTR [edi],ch
3000450a:	75 73                	jne    3000457f <_DYNAMIC+0x13>
3000450c:	65                   	gs
3000450d:	72 36                	jb     30004545 <rcsid+0x45>
3000450f:	2f                   	das    
30004510:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004511:	75 73                	jne    30004586 <_DYNAMIC+0x1a>
30004513:	74 65                	je     3000457a <_DYNAMIC+0xe>
30004515:	72 2f                	jb     30004546 <rcsid+0x46>
30004517:	74 63                	je     3000457c <_DYNAMIC+0x10>
30004519:	6c                   	ins    BYTE PTR es:[edi],dx
3000451a:	2f                   	das    
3000451b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
3000451e:	70 61                	jo     30004581 <_DYNAMIC+0x15>
30004520:	74 2f                	je     30004551 <rcsid+0x51>
30004522:	52                   	push   edx
30004523:	43                   	inc    ebx
30004524:	53                   	push   ebx
30004525:	2f                   	das    
30004526:	73 74                	jae    3000459c <_DYNAMIC+0x30>
30004528:	72 73                	jb     3000459d <_DYNAMIC+0x31>
3000452a:	74 72                	je     3000459e <_DYNAMIC+0x32>
3000452c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
30004530:	20 31                	and    BYTE PTR [ecx],dh
30004532:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
30004535:	39 33                	cmp    DWORD PTR [ebx],esi
30004537:	2f                   	das    
30004538:	30 33                	xor    BYTE PTR [ebx],dh
3000453a:	2f                   	das    
3000453b:	31 39                	xor    DWORD PTR [ecx],edi
3000453d:	20 31                	and    BYTE PTR [ecx],dh
3000453f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
30004544:	34 30                	xor    al,0x30
30004546:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
30004549:	73 74                	jae    300045bf <_DYNAMIC+0x53>
3000454b:	65                   	gs
3000454c:	72 20                	jb     3000456e <_DYNAMIC+0x2>
3000454e:	45                   	inc    ebp
3000454f:	78 70                	js     300045c1 <_DYNAMIC+0x55>
30004551:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
30004554:	53                   	push   ebx
30004555:	50                   	push   eax
30004556:	52                   	push   edx
30004557:	49                   	dec    ecx
30004558:	54                   	push   esp
30004559:	45                   	inc    ebp
3000455a:	20 28                	and    BYTE PTR [eax],ch
3000455c:	42                   	inc    edx
3000455d:	65                   	gs
3000455e:	72 6b                	jb     300045cb <_DYNAMIC+0x5f>
30004560:	65                   	gs
30004561:	6c                   	ins    BYTE PTR es:[edi],dx
30004562:	65                   	gs
30004563:	79 29                	jns    3000458e <_DYNAMIC+0x22>
30004565:	00 00                	add    BYTE PTR [eax],al
	...

30004568 <_daylight>:
30004568:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

3000456c <_DYNAMIC>:
3000456c:	19 00                	sbb    DWORD PTR [eax],eax
3000456e:	00 00                	add    BYTE PTR [eax],al
30004570:	48                   	dec    eax
30004571:	46                   	inc    esi
30004572:	00 30                	add    BYTE PTR [eax],dh
30004574:	1b 00                	sbb    eax,DWORD PTR [eax]
30004576:	00 00                	add    BYTE PTR [eax],al
30004578:	04 00                	add    al,0x0
3000457a:	00 00                	add    BYTE PTR [eax],al
3000457c:	1a 00                	sbb    al,BYTE PTR [eax]
3000457e:	00 00                	add    BYTE PTR [eax],al
30004580:	4c                   	dec    esp
30004581:	46                   	inc    esi
30004582:	00 30                	add    BYTE PTR [eax],dh
30004584:	1c 00                	sbb    al,0x0
30004586:	00 00                	add    BYTE PTR [eax],al
30004588:	04 00                	add    al,0x0
3000458a:	00 00                	add    BYTE PTR [eax],al
3000458c:	04 00                	add    al,0x0
3000458e:	00 00                	add    BYTE PTR [eax],al
30004590:	a8 3c                	test   al,0x3c
30004592:	00 30                	add    BYTE PTR [eax],dh
30004594:	05 00 00 00 1c       	add    eax,0x1c000000
30004599:	3b 00                	cmp    eax,DWORD PTR [eax]
3000459b:	30 06                	xor    BYTE PTR [esi],al
3000459d:	00 00                	add    BYTE PTR [eax],al
3000459f:	00 9c 37 00 30 0a 00 	add    BYTE PTR [edi+esi*1+0xa3000],bl
300045a6:	00 00                	add    BYTE PTR [eax],al
300045a8:	8b 01                	mov    eax,DWORD PTR [ecx]
300045aa:	00 00                	add    BYTE PTR [eax],al
300045ac:	0b 00                	or     eax,DWORD PTR [eax]
300045ae:	00 00                	add    BYTE PTR [eax],al
300045b0:	10 00                	adc    BYTE PTR [eax],al
300045b2:	00 00                	add    BYTE PTR [eax],al
300045b4:	03 00                	add    eax,DWORD PTR [eax]
300045b6:	00 00                	add    BYTE PTR [eax],al
300045b8:	38 46 00             	cmp    BYTE PTR [esi+0x0],al
300045bb:	30 02                	xor    BYTE PTR [edx],al
300045bd:	00 00                	add    BYTE PTR [eax],al
300045bf:	00 08                	add    BYTE PTR [eax],cl
300045c1:	00 00                	add    BYTE PTR [eax],al
300045c3:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
300045c6:	00 00                	add    BYTE PTR [eax],al
300045c8:	11 00                	adc    DWORD PTR [eax],eax
300045ca:	00 00                	add    BYTE PTR [eax],al
300045cc:	17                   	pop    ss
300045cd:	00 00                	add    BYTE PTR [eax],al
300045cf:	00 a0 44 00 30 11    	add    BYTE PTR [eax+0x11300044],ah
300045d5:	00 00                	add    BYTE PTR [eax],al
300045d7:	00 e0                	add    al,ah
300045d9:	43                   	inc    ebx
300045da:	00 30                	add    BYTE PTR [eax],dh
300045dc:	12 00                	adc    al,BYTE PTR [eax]
300045de:	00 00                	add    BYTE PTR [eax],al
300045e0:	c0 00 00             	rol    BYTE PTR [eax],0x0
300045e3:	00 13                	add    BYTE PTR [ebx],dl
300045e5:	00 00                	add    BYTE PTR [eax],al
300045e7:	00 08                	add    BYTE PTR [eax],cl
300045e9:	00 00                	add    BYTE PTR [eax],al
300045eb:	00 16                	add    BYTE PTR [esi],dl
300045ed:	00 00                	add    BYTE PTR [eax],al
300045ef:	00 00                	add    BYTE PTR [eax],al
300045f1:	00 00                	add    BYTE PTR [eax],al
300045f3:	00 fa                	add    dl,bh
300045f5:	ff                   	(bad)  
300045f6:	ff 6f 08             	jmp    FWORD PTR [edi+0x8]
	...

Disassembly of section .got:

30004624 <.got>:
30004624:	58                   	pop    eax
30004625:	46                   	inc    esi
30004626:	00 30                	add    BYTE PTR [eax],dh
30004628:	5c                   	pop    esp
30004629:	46                   	inc    esi
3000462a:	00 30                	add    BYTE PTR [eax],dh
3000462c:	60                   	pusha  
3000462d:	46                   	inc    esi
3000462e:	00 30                	add    BYTE PTR [eax],dh
30004630:	64                   	fs
30004631:	46                   	inc    esi
30004632:	00 30                	add    BYTE PTR [eax],dh
30004634:	68                   	.byte 0x68
30004635:	46                   	inc    esi
30004636:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .got.plt:

30004638 <_GLOBAL_OFFSET_TABLE_>:
30004638:	6c                   	ins    BYTE PTR es:[edi],dx
30004639:	45                   	inc    ebp
3000463a:	00 30                	add    BYTE PTR [eax],dh
	...
30004644:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
30004645:	2b 00                	sub    eax,DWORD PTR [eax]
30004647:	30                   	.byte 0x30

Disassembly of section .init_array:

30004648 <.init_array>:
30004648:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

3000464c <.fini_array>:
3000464c:	8f 0a                	(bad)  
3000464e:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .data.rel.local:

30004650 <_tzname>:
30004650:	60                   	pusha  
30004651:	43                   	inc    ebx
30004652:	00 30                	add    BYTE PTR [eax],dh
30004654:	60                   	pusha  
30004655:	43                   	inc    ebx
30004656:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .bss:

30004658 <heapEnd>:
30004658:	00 00                	add    BYTE PTR [eax],al
	...

3000465c <heapBase>:
3000465c:	00 00                	add    BYTE PTR [eax],al
	...

30004660 <heapCurr>:
30004660:	00 00                	add    BYTE PTR [eax],al
	...

30004664 <processEnvp>:
30004664:	00 00                	add    BYTE PTR [eax],al
	...

30004668 <libcTZ>:
30004668:	00 00                	add    BYTE PTR [eax],al
	...

3000466c <lasts.1368>:
3000466c:	00 00                	add    BYTE PTR [eax],al
	...

30004670 <libcInitialized>:
30004670:	00 00                	add    BYTE PTR [eax],al
	...

30004674 <fops>:
	...

3000467c <console_file>:
	...

3000468c <_dstbias>:
3000468c:	00 00                	add    BYTE PTR [eax],al
	...

30004690 <ticksToWait>:
30004690:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	5f                   	pop    edi
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	f4                   	hlt    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c b8             	add    BYTE PTR [eax+edi*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 72 00             	add    BYTE PTR [edx+0x0],dh
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 30                	add    BYTE PTR [eax],dh
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	64 00 00             	add    BYTE PTR fs:[eax],al
      2b:	00 02                	add    BYTE PTR [edx],al
      2d:	01 06                	add    DWORD PTR [esi],eax
      2f:	5d                   	pop    ebp
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
      4d:	00 00                	add    BYTE PTR [eax],al
      4f:	02 02                	add    al,BYTE PTR [edx]
      51:	07                   	pop    es
      52:	0e                   	push   cs
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
      5d:	61                   	popa   
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	3e 00 00             	add    BYTE PTR ds:[eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	34 00                	xor    al,0x0
      6d:	00 00                	add    BYTE PTR [eax],al
      6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
      76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
      79:	9b                   	fwait
      7a:	00 00                	add    BYTE PTR [eax],al
      7c:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
      82:	00 06                	add    BYTE PTR [esi],al
      84:	25 00 00 00 02       	and    eax,0x2000000
      89:	01 02                	add    DWORD PTR [edx],eax
      8b:	95                   	xchg   ebp,eax
      8c:	00 00                	add    BYTE PTR [eax],al
      8e:	00 02                	add    BYTE PTR [edx],al
      90:	04 07                	add    al,0x7
      92:	39 00                	cmp    DWORD PTR [eax],eax
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      99:	e1 00                	loope  9b <sysEnter_Vector-0x12ff65>
      9b:	00 00                	add    BYTE PTR [eax],al
      9d:	05 04 25 00 00       	add    eax,0x2504
      a2:	00 07                	add    BYTE PTR [edi],al
      a4:	21 00                	and    DWORD PTR [eax],eax
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	01 08                	add    DWORD PTR [eax],ecx
      aa:	9d                   	popf   
      ab:	00 00                	add    BYTE PTR [eax],al
      ad:	00 00                	add    BYTE PTR [eax],al
      af:	00 00                	add    BYTE PTR [eax],al
      b1:	30 38                	xor    BYTE PTR [eax],bh
      b3:	00 00                	add    BYTE PTR [eax],al
      b5:	00 01                	add    BYTE PTR [ecx],al
      b7:	9c                   	pushf  
      b8:	d5 00                	aad    0x0
      ba:	00 00                	add    BYTE PTR [eax],al
      bc:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
      bf:	01 08                	add    DWORD PTR [eax],ecx
      c1:	7d 00                	jge    c3 <sysEnter_Vector-0x12ff3d>
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      cb:	01 08                	add    DWORD PTR [eax],ecx
      cd:	3a 00                	cmp    al,BYTE PTR [eax]
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	02 91 04 00 07 a7    	add    dl,BYTE PTR [ecx-0x58f8fffc]
      d7:	00 00                	add    BYTE PTR [eax],al
      d9:	00 01                	add    BYTE PTR [ecx],al
      db:	10 9d 00 00 00 38    	adc    BYTE PTR [ebp+0x38000000],bl
      e1:	00 00                	add    BYTE PTR [eax],al
      e3:	30 38                	xor    BYTE PTR [eax],bh
      e5:	00 00                	add    BYTE PTR [eax],al
      e7:	00 01                	add    BYTE PTR [ecx],al
      e9:	9c                   	pushf  
      ea:	07                   	pop    es
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 08                	add    BYTE PTR [eax],cl
      ef:	73 00                	jae    f1 <sysEnter_Vector-0x12ff0f>
      f1:	01 10                	add    DWORD PTR [eax],edx
      f3:	7d 00                	jge    f5 <sysEnter_Vector-0x12ff0b>
      f5:	00 00                	add    BYTE PTR [eax],al
      f7:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      fd:	01 10                	add    DWORD PTR [eax],edx
      ff:	3a 00                	cmp    al,BYTE PTR [eax]
     101:	00 00                	add    BYTE PTR [eax],al
     103:	02 91 04 00 09 4b    	add    dl,BYTE PTR [ecx+0x4b090004]
     109:	00 00                	add    BYTE PTR [eax],al
     10b:	00 02                	add    BYTE PTR [edx],al
     10d:	34 56                	xor    al,0x56
     10f:	00 00                	add    BYTE PTR [eax],al
     111:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
     117:	30 09                	xor    BYTE PTR [ecx],cl
     119:	af                   	scas   eax,DWORD PTR es:[edi]
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 02                	add    BYTE PTR [edx],al
     11e:	35 56 00 00 00       	xor    eax,0x56
     123:	05 03 60 46 00       	add    eax,0x466003
     128:	30 09                	xor    BYTE PTR [ecx],cl
     12a:	5b                   	pop    ebx
     12b:	01 00                	add    DWORD PTR [eax],eax
     12d:	00 02                	add    BYTE PTR [edx],al
     12f:	36                   	ss
     130:	56                   	push   esi
     131:	00 00                	add    BYTE PTR [eax],al
     133:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
     139:	30 09                	xor    BYTE PTR [ecx],cl
     13b:	54                   	push   esp
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 02                	add    BYTE PTR [edx],al
     140:	37                   	aaa    
     141:	56                   	push   esi
     142:	00 00                	add    BYTE PTR [eax],al
     144:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
     14a:	30 09                	xor    BYTE PTR [ecx],cl
     14c:	28 00                	sub    BYTE PTR [eax],al
     14e:	00 00                	add    BYTE PTR [eax],al
     150:	03 49 5c             	add    ecx,DWORD PTR [ecx+0x5c]
     153:	01 00                	add    DWORD PTR [eax],eax
     155:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
     15b:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     161:	00 00                	add    BYTE PTR [eax],al
     163:	9e                   	sahf   
     164:	01 00                	add    DWORD PTR [eax],eax
     166:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     169:	83 00 00             	add    DWORD PTR [eax],0x0
     16c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     16f:	f4                   	hlt    
     170:	00 00                	add    BYTE PTR [eax],al
     172:	00 0c 69             	add    BYTE PTR [ecx+ebp*2],cl
     175:	01 00                	add    DWORD PTR [eax],eax
     177:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     17a:	00 00                	add    BYTE PTR [eax],al
     17c:	70 00                	jo     17e <sysEnter_Vector-0x12fe82>
     17e:	00 30                	add    BYTE PTR [eax],dh
     180:	aa                   	stos   BYTE PTR es:[edi],al
     181:	00 00                	add    BYTE PTR [eax],al
     183:	00 d4                	add    ah,dl
     185:	00 00                	add    BYTE PTR [eax],al
     187:	00 02                	add    BYTE PTR [edx],al
     189:	01 06                	add    DWORD PTR [esi],eax
     18b:	64 00 00             	add    BYTE PTR fs:[eax],al
     18e:	00 02                	add    BYTE PTR [edx],al
     190:	01 06                	add    DWORD PTR [esi],eax
     192:	5d                   	pop    ebp
     193:	00 00                	add    BYTE PTR [eax],al
     195:	00 02                	add    BYTE PTR [edx],al
     197:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     19d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1a4:	02 08                	add    cl,BYTE PTR [eax]
     1a6:	05 00 00 00 00       	add    eax,0x0
     1ab:	02 01                	add    al,BYTE PTR [ecx]
     1ad:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     1b0:	00 00                	add    BYTE PTR [eax],al
     1b2:	02 02                	add    al,BYTE PTR [edx]
     1b4:	07                   	pop    es
     1b5:	0e                   	push   cs
     1b6:	00 00                	add    BYTE PTR [eax],al
     1b8:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     1c0:	61                   	popa   
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 02                	add    BYTE PTR [edx],al
     1c5:	04 07                	add    al,0x7
     1c7:	3e 00 00             	add    BYTE PTR ds:[eax],al
     1ca:	00 02                	add    BYTE PTR [edx],al
     1cc:	08 07                	or     BYTE PTR [edi],al
     1ce:	34 00                	xor    al,0x0
     1d0:	00 00                	add    BYTE PTR [eax],al
     1d2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     1d9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     1dc:	9b                   	fwait
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	00 02                	add    BYTE PTR [edx],al
     1e1:	01 02                	add    DWORD PTR [edx],eax
     1e3:	95                   	xchg   ebp,eax
     1e4:	00 00                	add    BYTE PTR [eax],al
     1e6:	00 02                	add    BYTE PTR [edx],al
     1e8:	04 07                	add    al,0x7
     1ea:	39 00                	cmp    DWORD PTR [eax],eax
     1ec:	00 00                	add    BYTE PTR [eax],al
     1ee:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     1f1:	e1 00                	loope  1f3 <sysEnter_Vector-0x12fe0d>
     1f3:	00 00                	add    BYTE PTR [eax],al
     1f5:	05 04 25 00 00       	add    eax,0x2504
     1fa:	00 06                	add    BYTE PTR [esi],al
     1fc:	93                   	xchg   ebx,eax
     1fd:	01 00                	add    DWORD PTR [eax],eax
     1ff:	00 01                	add    BYTE PTR [ecx],al
     201:	25 3a 00 00 00       	and    eax,0x3a
     206:	70 00                	jo     208 <sysEnter_Vector-0x12fdf8>
     208:	00 30                	add    BYTE PTR [eax],dh
     20a:	55                   	push   ebp
     20b:	00 00                	add    BYTE PTR [eax],al
     20d:	00 01                	add    BYTE PTR [ecx],al
     20f:	9c                   	pushf  
     210:	ef                   	out    dx,eax
     211:	00 00                	add    BYTE PTR [eax],al
     213:	00 07                	add    BYTE PTR [edi],al
     215:	cd 0a                	int    0xa
     217:	00 00                	add    BYTE PTR [eax],al
     219:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     21f:	02 91 00 07 63 01    	add    dl,BYTE PTR [ecx+0x1630700]
     225:	00 00                	add    BYTE PTR [eax],al
     227:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     22d:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     233:	01 27                	add    DWORD PTR [edi],esp
     235:	25 00 00 00 01       	and    eax,0x1000000
     23a:	51                   	push   ecx
     23b:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     23e:	01 27                	add    DWORD PTR [edi],esp
     240:	92                   	xchg   edx,eax
     241:	00 00                	add    BYTE PTR [eax],al
     243:	00 01                	add    BYTE PTR [ecx],al
     245:	56                   	push   esi
     246:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	92                   	xchg   edx,eax
     24c:	00 00                	add    BYTE PTR [eax],al
     24e:	00 01                	add    BYTE PTR [ecx],al
     250:	53                   	push   ebx
     251:	00 06                	add    BYTE PTR [esi],al
     253:	9b                   	fwait
     254:	01 00                	add    DWORD PTR [eax],eax
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	33 3a                	xor    edi,DWORD PTR [edx]
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	00 c5                	add    ch,al
     25e:	00 00                	add    BYTE PTR [eax],al
     260:	30 55 00             	xor    BYTE PTR [ebp+0x0],dl
     263:	00 00                	add    BYTE PTR [eax],al
     265:	01 9c 46 01 00 00 07 	add    DWORD PTR [esi+eax*2+0x7000001],ebx
     26c:	cd 0a                	int    0xa
     26e:	00 00                	add    BYTE PTR [eax],al
     270:	01 33                	add    DWORD PTR [ebx],esi
     272:	92                   	xchg   edx,eax
     273:	00 00                	add    BYTE PTR [eax],al
     275:	00 02                	add    BYTE PTR [edx],al
     277:	91                   	xchg   ecx,eax
     278:	00 07                	add    BYTE PTR [edi],al
     27a:	63 01                	arpl   WORD PTR [ecx],ax
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	01 33                	add    DWORD PTR [ebx],esi
     280:	92                   	xchg   edx,eax
     281:	00 00                	add    BYTE PTR [eax],al
     283:	00 02                	add    BYTE PTR [edx],al
     285:	91                   	xchg   ecx,eax
     286:	04 08                	add    al,0x8
     288:	63 00                	arpl   WORD PTR [eax],ax
     28a:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     290:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     293:	70 00                	jo     295 <sysEnter_Vector-0x12fd6b>
     295:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     29b:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     29e:	73 00                	jae    2a0 <sysEnter_Vector-0x12fd60>
     2a0:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     2a6:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2a9:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
     2b9:	30 09                	xor    BYTE PTR [ecx],cl
     2bb:	af                   	scas   eax,DWORD PTR es:[edi]
     2bc:	00 00                	add    BYTE PTR [eax],al
     2be:	00 02                	add    BYTE PTR [edx],al
     2c0:	35 56 00 00 00       	xor    eax,0x56
     2c5:	05 03 60 46 00       	add    eax,0x466003
     2ca:	30 09                	xor    BYTE PTR [ecx],cl
     2cc:	5b                   	pop    ebx
     2cd:	01 00                	add    DWORD PTR [eax],eax
     2cf:	00 02                	add    BYTE PTR [edx],al
     2d1:	36                   	ss
     2d2:	56                   	push   esi
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
     2db:	30 09                	xor    BYTE PTR [ecx],cl
     2dd:	54                   	push   esp
     2de:	00 00                	add    BYTE PTR [eax],al
     2e0:	00 02                	add    BYTE PTR [edx],al
     2e2:	37                   	aaa    
     2e3:	56                   	push   esi
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
     2ec:	30 09                	xor    BYTE PTR [ecx],cl
     2ee:	28 00                	sub    BYTE PTR [eax],al
     2f0:	00 00                	add    BYTE PTR [eax],al
     2f2:	03 49 9b             	add    ecx,DWORD PTR [ecx-0x65]
     2f5:	01 00                	add    DWORD PTR [eax],eax
     2f7:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
     2fd:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     303:	00 00                	add    BYTE PTR [eax],al
     305:	41                   	inc    ecx
     306:	01 00                	add    DWORD PTR [eax],eax
     308:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     30b:	0e                   	push   cs
     30c:	01 00                	add    DWORD PTR [eax],eax
     30e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     311:	f4                   	hlt    
     312:	00 00                	add    BYTE PTR [eax],al
     314:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
     317:	01 00                	add    DWORD PTR [eax],eax
     319:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     31c:	00 00                	add    BYTE PTR [eax],al
     31e:	1c 01                	sbb    al,0x1
     320:	00 30                	add    BYTE PTR [eax],dh
     322:	97                   	xchg   edi,eax
     323:	00 00                	add    BYTE PTR [eax],al
     325:	00 db                	add    bl,bl
     327:	01 00                	add    DWORD PTR [eax],eax
     329:	00 02                	add    BYTE PTR [edx],al
     32b:	01 06                	add    DWORD PTR [esi],eax
     32d:	64 00 00             	add    BYTE PTR fs:[eax],al
     330:	00 02                	add    BYTE PTR [edx],al
     332:	01 06                	add    DWORD PTR [esi],eax
     334:	5d                   	pop    ebp
     335:	00 00                	add    BYTE PTR [eax],al
     337:	00 02                	add    BYTE PTR [edx],al
     339:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     33f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     346:	02 08                	add    cl,BYTE PTR [eax]
     348:	05 00 00 00 00       	add    eax,0x0
     34d:	02 01                	add    al,BYTE PTR [ecx]
     34f:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     352:	00 00                	add    BYTE PTR [eax],al
     354:	02 02                	add    al,BYTE PTR [edx]
     356:	07                   	pop    es
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     362:	61                   	popa   
     363:	00 00                	add    BYTE PTR [eax],al
     365:	00 02                	add    BYTE PTR [edx],al
     367:	04 07                	add    al,0x7
     369:	3e 00 00             	add    BYTE PTR ds:[eax],al
     36c:	00 02                	add    BYTE PTR [edx],al
     36e:	08 07                	or     BYTE PTR [edi],al
     370:	34 00                	xor    al,0x0
     372:	00 00                	add    BYTE PTR [eax],al
     374:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     37b:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     37e:	9b                   	fwait
     37f:	00 00                	add    BYTE PTR [eax],al
     381:	00 02                	add    BYTE PTR [edx],al
     383:	01 02                	add    DWORD PTR [edx],eax
     385:	95                   	xchg   ebp,eax
     386:	00 00                	add    BYTE PTR [eax],al
     388:	00 02                	add    BYTE PTR [edx],al
     38a:	04 07                	add    al,0x7
     38c:	39 00                	cmp    DWORD PTR [eax],eax
     38e:	00 00                	add    BYTE PTR [eax],al
     390:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     393:	e1 00                	loope  395 <sysEnter_Vector-0x12fc6b>
     395:	00 00                	add    BYTE PTR [eax],al
     397:	05 04 25 00 00       	add    eax,0x2504
     39c:	00 06                	add    BYTE PTR [esi],al
     39e:	d9 01                	fld    DWORD PTR [ecx]
     3a0:	00 00                	add    BYTE PTR [eax],al
     3a2:	01 28                	add    DWORD PTR [eax],ebp
     3a4:	92                   	xchg   edx,eax
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3aa:	00 30                	add    BYTE PTR [eax],dh
     3ac:	97                   	xchg   edi,eax
     3ad:	00 00                	add    BYTE PTR [eax],al
     3af:	00 01                	add    BYTE PTR [ecx],al
     3b1:	9c                   	pushf  
     3b2:	e9 00 00 00 07       	jmp    70003b7 <sysEnter_Vector+0x6ed03b7>
     3b7:	73 00                	jae    3b9 <sysEnter_Vector-0x12fc47>
     3b9:	01 28                	add    DWORD PTR [eax],ebp
     3bb:	92                   	xchg   edx,eax
     3bc:	00 00                	add    BYTE PTR [eax],al
     3be:	00 02                	add    BYTE PTR [edx],al
     3c0:	91                   	xchg   ecx,eax
     3c1:	00 08                	add    BYTE PTR [eax],cl
     3c3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     3c4:	01 00                	add    DWORD PTR [eax],eax
     3c6:	00 01                	add    BYTE PTR [ecx],al
     3c8:	28 92 00 00 00 02    	sub    BYTE PTR [edx+0x2000000],dl
     3ce:	91                   	xchg   ecx,eax
     3cf:	04 09                	add    al,0x9
     3d1:	d3 01                	rol    DWORD PTR [ecx],cl
     3d3:	00 00                	add    BYTE PTR [eax],al
     3d5:	01 2a                	add    DWORD PTR [edx],ebp
     3d7:	92                   	xchg   edx,eax
     3d8:	00 00                	add    BYTE PTR [eax],al
     3da:	00 05 03 6c 46 00    	add    BYTE PTR ds:0x466c03,al
     3e0:	30 0a                	xor    BYTE PTR [edx],cl
     3e2:	63 68 00             	arpl   WORD PTR [eax+0x0],bp
     3e5:	01 2b                	add    DWORD PTR [ebx],ebp
     3e7:	3a 00                	cmp    al,BYTE PTR [eax]
     3e9:	00 00                	add    BYTE PTR [eax],al
     3eb:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     3ee:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
     3fe:	30 0b                	xor    BYTE PTR [ebx],cl
     400:	af                   	scas   eax,DWORD PTR es:[edi]
     401:	00 00                	add    BYTE PTR [eax],al
     403:	00 02                	add    BYTE PTR [edx],al
     405:	35 56 00 00 00       	xor    eax,0x56
     40a:	05 03 60 46 00       	add    eax,0x466003
     40f:	30 0b                	xor    BYTE PTR [ebx],cl
     411:	5b                   	pop    ebx
     412:	01 00                	add    DWORD PTR [eax],eax
     414:	00 02                	add    BYTE PTR [edx],al
     416:	36                   	ss
     417:	56                   	push   esi
     418:	00 00                	add    BYTE PTR [eax],al
     41a:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
     420:	30 0b                	xor    BYTE PTR [ebx],cl
     422:	54                   	push   esp
     423:	00 00                	add    BYTE PTR [eax],al
     425:	00 02                	add    BYTE PTR [edx],al
     427:	37                   	aaa    
     428:	56                   	push   esi
     429:	00 00                	add    BYTE PTR [eax],al
     42b:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
     431:	30 0b                	xor    BYTE PTR [ebx],cl
     433:	28 00                	sub    BYTE PTR [eax],al
     435:	00 00                	add    BYTE PTR [eax],al
     437:	03 49 3e             	add    ecx,DWORD PTR [ecx+0x3e]
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
     442:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	12 02                	adc    al,BYTE PTR [edx]
     44c:	00 00                	add    BYTE PTR [eax],al
     44e:	04 00                	add    al,0x0
     450:	b7 01                	mov    bh,0x1
     452:	00 00                	add    BYTE PTR [eax],al
     454:	04 01                	add    al,0x1
     456:	f4                   	hlt    
     457:	00 00                	add    BYTE PTR [eax],al
     459:	00 0c e6             	add    BYTE PTR [esi+eiz*8],cl
     45c:	01 00                	add    DWORD PTR [eax],eax
     45e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     461:	00 00                	add    BYTE PTR [eax],al
     463:	b4 01                	mov    ah,0x1
     465:	00 30                	add    BYTE PTR [eax],dh
     467:	49                   	dec    ecx
     468:	02 00                	add    al,BYTE PTR [eax]
     46a:	00 b3 02 00 00 02    	add    BYTE PTR [ebx+0x2000002],dh
     470:	01 06                	add    DWORD PTR [esi],eax
     472:	64 00 00             	add    BYTE PTR fs:[eax],al
     475:	00 02                	add    BYTE PTR [edx],al
     477:	01 06                	add    DWORD PTR [esi],eax
     479:	5d                   	pop    ebp
     47a:	00 00                	add    BYTE PTR [eax],al
     47c:	00 02                	add    BYTE PTR [edx],al
     47e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     484:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     48b:	02 08                	add    cl,BYTE PTR [eax]
     48d:	05 00 00 00 00       	add    eax,0x0
     492:	02 01                	add    al,BYTE PTR [ecx]
     494:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     497:	00 00                	add    BYTE PTR [eax],al
     499:	02 02                	add    al,BYTE PTR [edx]
     49b:	07                   	pop    es
     49c:	0e                   	push   cs
     49d:	00 00                	add    BYTE PTR [eax],al
     49f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     4a2:	00 00                	add    BYTE PTR [eax],al
     4a4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     4a7:	61                   	popa   
     4a8:	00 00                	add    BYTE PTR [eax],al
     4aa:	00 02                	add    BYTE PTR [edx],al
     4ac:	04 07                	add    al,0x7
     4ae:	3e 00 00             	add    BYTE PTR ds:[eax],al
     4b1:	00 02                	add    BYTE PTR [edx],al
     4b3:	08 07                	or     BYTE PTR [edi],al
     4b5:	34 00                	xor    al,0x0
     4b7:	00 00                	add    BYTE PTR [eax],al
     4b9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     4c0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     4c3:	9b                   	fwait
     4c4:	00 00                	add    BYTE PTR [eax],al
     4c6:	00 02                	add    BYTE PTR [edx],al
     4c8:	01 02                	add    DWORD PTR [edx],eax
     4ca:	95                   	xchg   ebp,eax
     4cb:	00 00                	add    BYTE PTR [eax],al
     4cd:	00 02                	add    BYTE PTR [edx],al
     4cf:	04 07                	add    al,0x7
     4d1:	39 00                	cmp    DWORD PTR [eax],eax
     4d3:	00 00                	add    BYTE PTR [eax],al
     4d5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     4d8:	e1 00                	loope  4da <sysEnter_Vector-0x12fb26>
     4da:	00 00                	add    BYTE PTR [eax],al
     4dc:	05 04 25 00 00       	add    eax,0x2504
     4e1:	00 06                	add    BYTE PTR [esi],al
     4e3:	fc                   	cld    
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 01                	add    BYTE PTR [ecx],al
     4e8:	09 b4 01 00 30 77 00 	or     DWORD PTR [ecx+eax*1+0x773000],esi
     4ef:	00 00                	add    BYTE PTR [eax],al
     4f1:	01 9c de 00 00 00 07 	add    DWORD PTR [esi+ebx*8+0x7000000],ebx
     4f8:	73 00                	jae    4fa <sysEnter_Vector-0x12fb06>
     4fa:	01 09                	add    DWORD PTR [ecx],ecx
     4fc:	92                   	xchg   edx,eax
     4fd:	00 00                	add    BYTE PTR [eax],al
     4ff:	00 02                	add    BYTE PTR [edx],al
     501:	91                   	xchg   ecx,eax
     502:	00 08                	add    BYTE PTR [eax],cl
     504:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     512:	01 0b                	add    DWORD PTR [ebx],ecx
     514:	3a 00                	cmp    al,BYTE PTR [eax]
     516:	00 00                	add    BYTE PTR [eax],al
     518:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     51e:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     525:	91                   	xchg   ecx,eax
     526:	67 00 06 f2 01       	add    BYTE PTR ds:0x1f2,al
     52b:	00 00                	add    BYTE PTR [eax],al
     52d:	01 15 2b 02 00 30    	add    DWORD PTR ds:0x3000022b,edx
     533:	bb 00 00 00 01       	mov    ebx,0x1000000
     538:	9c                   	pushf  
     539:	26 01 00             	add    DWORD PTR es:[eax],eax
     53c:	00 07                	add    BYTE PTR [edi],al
     53e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     53f:	00 01                	add    BYTE PTR [ecx],al
     541:	15 3a 00 00 00       	adc    eax,0x3a
     546:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     54c:	01 15 92 00 00 00    	add    DWORD PTR ds:0x92,edx
     552:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     558:	01 17                	add    DWORD PTR [edi],edx
     55a:	3a 00                	cmp    al,BYTE PTR [eax]
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	02 91 6c 09 05 02    	add    dl,BYTE PTR [ecx+0x205096c]
     564:	00 00                	add    BYTE PTR [eax],al
     566:	01 17                	add    DWORD PTR [edi],edx
     568:	3a 00                	cmp    al,BYTE PTR [eax]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	02 91 68 00 06 e0    	add    dl,BYTE PTR [ecx-0x1ff9ff98]
     572:	01 00                	add    DWORD PTR [eax],eax
     574:	00 01                	add    BYTE PTR [ecx],al
     576:	25 e6 02 00 30       	and    eax,0x300002e6
     57b:	bb 00 00 00 01       	mov    ebx,0x1000000
     580:	9c                   	pushf  
     581:	6e                   	outs   dx,BYTE PTR ds:[esi]
     582:	01 00                	add    DWORD PTR [eax],eax
     584:	00 07                	add    BYTE PTR [edi],al
     586:	6e                   	outs   dx,BYTE PTR ds:[esi]
     587:	00 01                	add    BYTE PTR [ecx],al
     589:	25 3a 00 00 00       	and    eax,0x3a
     58e:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     594:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     59a:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5a0:	01 27                	add    DWORD PTR [edi],esp
     5a2:	3a 00                	cmp    al,BYTE PTR [eax]
     5a4:	00 00                	add    BYTE PTR [eax],al
     5a6:	02 91 6c 09 05 02    	add    dl,BYTE PTR [ecx+0x205096c]
     5ac:	00 00                	add    BYTE PTR [eax],al
     5ae:	01 27                	add    DWORD PTR [edi],esp
     5b0:	3a 00                	cmp    al,BYTE PTR [eax]
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 91 68 00 0a f7    	add    dl,BYTE PTR [ecx-0x8f5ff98]
     5ba:	01 00                	add    DWORD PTR [eax],eax
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
     5c8:	00 00                	add    BYTE PTR [eax],al
     5ca:	00 01                	add    BYTE PTR [ecx],al
     5cc:	9c                   	pushf  
     5cd:	ba 01 00 00 07       	mov    edx,0x7000001
     5d2:	73 74                	jae    648 <sysEnter_Vector-0x12f9b8>
     5d4:	72 00                	jb     5d6 <sysEnter_Vector-0x12fa2a>
     5d6:	01 36                	add    DWORD PTR [esi],esi
     5d8:	92                   	xchg   edx,eax
     5d9:	00 00                	add    BYTE PTR [eax],al
     5db:	00 02                	add    BYTE PTR [edx],al
     5dd:	91                   	xchg   ecx,eax
     5de:	00 08                	add    BYTE PTR [eax],cl
     5e0:	72 65                	jb     647 <sysEnter_Vector-0x12f9b9>
     5e2:	73 00                	jae    5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	01 38                	add    DWORD PTR [eax],edi
     5e6:	3a 00                	cmp    al,BYTE PTR [eax]
     5e8:	00 00                	add    BYTE PTR [eax],al
     5ea:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     5f0:	00 30                	add    BYTE PTR [eax],dh
     5f2:	40                   	inc    eax
     5f3:	00 00                	add    BYTE PTR [eax],al
     5f5:	00 08                	add    BYTE PTR [eax],cl
     5f7:	69 00 01 3c 3a 00    	imul   eax,DWORD PTR [eax],0x3a3c01
     5fd:	00 00                	add    BYTE PTR [eax],al
     5ff:	02 91 70 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000070]
     605:	4b                   	dec    ebx
     606:	00 00                	add    BYTE PTR [eax],al
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	34 56                	xor    al,0x56
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
     614:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
     617:	00 00                	add    BYTE PTR [eax],al
     619:	00 02                	add    BYTE PTR [edx],al
     61b:	35 56 00 00 00       	xor    eax,0x56
     620:	05 03 60 46 00       	add    eax,0x466003
     625:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
     628:	01 00                	add    DWORD PTR [eax],eax
     62a:	00 02                	add    BYTE PTR [edx],al
     62c:	36                   	ss
     62d:	56                   	push   esi
     62e:	00 00                	add    BYTE PTR [eax],al
     630:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
     636:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
     639:	00 00                	add    BYTE PTR [eax],al
     63b:	00 02                	add    BYTE PTR [edx],al
     63d:	37                   	aaa    
     63e:	56                   	push   esi
     63f:	00 00                	add    BYTE PTR [eax],al
     641:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
     647:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 03                	add    BYTE PTR [ebx],al
     64e:	49                   	dec    ecx
     64f:	0f 02 00             	lar    eax,WORD PTR [eax]
     652:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
     658:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     65e:	00 00                	add    BYTE PTR [eax],al
     660:	b2 01                	mov    dl,0x1
     662:	00 00                	add    BYTE PTR [eax],al
     664:	04 00                	add    al,0x0
     666:	74 02                	je     66a <sysEnter_Vector-0x12f996>
     668:	00 00                	add    BYTE PTR [eax],al
     66a:	04 01                	add    al,0x1
     66c:	f4                   	hlt    
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
     672:	02 00                	add    al,BYTE PTR [eax]
     674:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     677:	00 00                	add    BYTE PTR [eax],al
     679:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     67c:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	c7 03 00 00 02 01    	mov    DWORD PTR [ebx],0x1020000
     687:	06                   	push   es
     688:	64 00 00             	add    BYTE PTR fs:[eax],al
     68b:	00 02                	add    BYTE PTR [edx],al
     68d:	01 06                	add    DWORD PTR [esi],eax
     68f:	5d                   	pop    ebp
     690:	00 00                	add    BYTE PTR [eax],al
     692:	00 02                	add    BYTE PTR [edx],al
     694:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     69a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     6a1:	02 08                	add    cl,BYTE PTR [eax]
     6a3:	05 00 00 00 00       	add    eax,0x0
     6a8:	02 01                	add    al,BYTE PTR [ecx]
     6aa:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     6ad:	00 00                	add    BYTE PTR [eax],al
     6af:	02 02                	add    al,BYTE PTR [edx]
     6b1:	07                   	pop    es
     6b2:	0e                   	push   cs
     6b3:	00 00                	add    BYTE PTR [eax],al
     6b5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     6b8:	00 00                	add    BYTE PTR [eax],al
     6ba:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     6bd:	61                   	popa   
     6be:	00 00                	add    BYTE PTR [eax],al
     6c0:	00 02                	add    BYTE PTR [edx],al
     6c2:	04 07                	add    al,0x7
     6c4:	3e 00 00             	add    BYTE PTR ds:[eax],al
     6c7:	00 02                	add    BYTE PTR [edx],al
     6c9:	08 07                	or     BYTE PTR [edi],al
     6cb:	34 00                	xor    al,0x0
     6cd:	00 00                	add    BYTE PTR [eax],al
     6cf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     6d6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     6d9:	9b                   	fwait
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	01 02                	add    DWORD PTR [edx],eax
     6e0:	95                   	xchg   ebp,eax
     6e1:	00 00                	add    BYTE PTR [eax],al
     6e3:	00 02                	add    BYTE PTR [edx],al
     6e5:	04 07                	add    al,0x7
     6e7:	39 00                	cmp    DWORD PTR [eax],eax
     6e9:	00 00                	add    BYTE PTR [eax],al
     6eb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     6ee:	e1 00                	loope  6f0 <sysEnter_Vector-0x12f910>
     6f0:	00 00                	add    BYTE PTR [eax],al
     6f2:	05 04 25 00 00       	add    eax,0x2504
     6f7:	00 06                	add    BYTE PTR [esi],al
     6f9:	25 02 00 00 01       	and    eax,0x1000002
     6fe:	09 3a                	or     DWORD PTR [edx],edi
     700:	00 00                	add    BYTE PTR [eax],al
     702:	00 00                	add    BYTE PTR [eax],al
     704:	04 00                	add    al,0x0
     706:	30 aa 00 00 00 01    	xor    BYTE PTR [edx+0x1000000],ch
     70c:	9c                   	pushf  
     70d:	e6 00                	out    0x0,al
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	07                   	pop    es
     712:	3e 02 00             	add    al,BYTE PTR ds:[eax]
     715:	00 01                	add    BYTE PTR [ecx],al
     717:	09 92 00 00 00 02    	or     DWORD PTR [edx+0x2000000],edx
     71d:	91                   	xchg   ecx,eax
     71e:	00 07                	add    BYTE PTR [edi],al
     720:	0a 02                	or     al,BYTE PTR [edx]
     722:	00 00                	add    BYTE PTR [eax],al
     724:	01 09                	add    DWORD PTR [ecx],ecx
     726:	92                   	xchg   edx,eax
     727:	00 00                	add    BYTE PTR [eax],al
     729:	00 02                	add    BYTE PTR [edx],al
     72b:	91                   	xchg   ecx,eax
     72c:	04 08                	add    al,0x8
     72e:	12 04 00             	adc    al,BYTE PTR [eax+eax*1]
     731:	30 8e 00 00 00 09    	xor    BYTE PTR [esi+0x9000000],cl
     737:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     73a:	00 01                	add    BYTE PTR [ecx],al
     73c:	0b 3a                	or     edi,DWORD PTR [edx]
     73e:	00 00                	add    BYTE PTR [eax],al
     740:	00 02                	add    BYTE PTR [edx],al
     742:	91                   	xchg   ecx,eax
     743:	6c                   	ins    BYTE PTR es:[edi],dx
     744:	00 00                	add    BYTE PTR [eax],al
     746:	0a 1e                	or     bl,BYTE PTR [esi]
     748:	02 00                	add    al,BYTE PTR [eax]
     74a:	00 01                	add    BYTE PTR [ecx],al
     74c:	14 aa                	adc    al,0xaa
     74e:	04 00                	add    al,0x0
     750:	30 c1                	xor    cl,al
     752:	01 00                	add    DWORD PTR [eax],eax
     754:	00 01                	add    BYTE PTR [ecx],al
     756:	9c                   	pushf  
     757:	5a                   	pop    edx
     758:	01 00                	add    DWORD PTR [eax],eax
     75a:	00 07                	add    BYTE PTR [edi],al
     75c:	3e 02 00             	add    al,BYTE PTR ds:[eax]
     75f:	00 01                	add    BYTE PTR [ecx],al
     761:	14 92                	adc    al,0x92
     763:	00 00                	add    BYTE PTR [eax],al
     765:	00 02                	add    BYTE PTR [edx],al
     767:	91                   	xchg   ecx,eax
     768:	00 07                	add    BYTE PTR [edi],al
     76a:	0a 02                	or     al,BYTE PTR [edx]
     76c:	00 00                	add    BYTE PTR [eax],al
     76e:	01 14 92             	add    DWORD PTR [edx+edx*4],edx
     771:	00 00                	add    BYTE PTR [eax],al
     773:	00 02                	add    BYTE PTR [edx],al
     775:	91                   	xchg   ecx,eax
     776:	04 0b                	add    al,0xb
     778:	10 02                	adc    BYTE PTR [edx],al
     77a:	00 00                	add    BYTE PTR [eax],al
     77c:	01 16                	add    DWORD PTR [esi],edx
     77e:	56                   	push   esi
     77f:	00 00                	add    BYTE PTR [eax],al
     781:	00 02                	add    BYTE PTR [edx],al
     783:	91                   	xchg   ecx,eax
     784:	6c                   	ins    BYTE PTR es:[edi],dx
     785:	0c c3                	or     al,0xc3
     787:	04 00                	add    al,0x0
     789:	30 eb                	xor    bl,ch
     78b:	00 00                	add    BYTE PTR [eax],al
     78d:	00 41 01             	add    BYTE PTR [ecx+0x1],al
     790:	00 00                	add    BYTE PTR [eax],al
     792:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     795:	74 00                	je     797 <sysEnter_Vector-0x12f869>
     797:	01 18                	add    DWORD PTR [eax],ebx
     799:	3a 00                	cmp    al,BYTE PTR [eax]
     79b:	00 00                	add    BYTE PTR [eax],al
     79d:	02 91 68 00 08 ae    	add    dl,BYTE PTR [ecx-0x51f7ff98]
     7a3:	05 00 30 b8 00       	add    eax,0xb83000
     7a8:	00 00                	add    BYTE PTR [eax],al
     7aa:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     7ad:	74 00                	je     7af <sysEnter_Vector-0x12f851>
     7af:	01 24 3a             	add    DWORD PTR [edx+edi*1],esp
     7b2:	00 00                	add    BYTE PTR [eax],al
     7b4:	00 02                	add    BYTE PTR [edx],al
     7b6:	91                   	xchg   ecx,eax
     7b7:	64 00 00             	add    BYTE PTR fs:[eax],al
     7ba:	0d 4b 00 00 00       	or     eax,0x4b
     7bf:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     7c2:	00 00                	add    BYTE PTR [eax],al
     7c4:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
     7ca:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
     7d0:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
     7d6:	05 03 60 46 00       	add    eax,0x466003
     7db:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
     7e1:	02 36                	add    dh,BYTE PTR [esi]
     7e3:	56                   	push   esi
     7e4:	00 00                	add    BYTE PTR [eax],al
     7e6:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
     7ec:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
     7f2:	02 37                	add    dh,BYTE PTR [edi]
     7f4:	56                   	push   esi
     7f5:	00 00                	add    BYTE PTR [eax],al
     7f7:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
     7fd:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
     803:	03 49 af             	add    ecx,DWORD PTR [ecx-0x51]
     806:	01 00                	add    DWORD PTR [eax],eax
     808:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
     80e:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     814:	00 00                	add    BYTE PTR [eax],al
     816:	01 03                	add    DWORD PTR [ebx],eax
     818:	00 00                	add    BYTE PTR [eax],al
     81a:	04 00                	add    al,0x0
     81c:	3c 03                	cmp    al,0x3
     81e:	00 00                	add    BYTE PTR [eax],al
     820:	04 01                	add    al,0x1
     822:	f4                   	hlt    
     823:	00 00                	add    BYTE PTR [eax],al
     825:	00 0c a1             	add    BYTE PTR [ecx+eiz*4],cl
     828:	02 00                	add    al,BYTE PTR [eax]
     82a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     82d:	00 00                	add    BYTE PTR [eax],al
     82f:	6c                   	ins    BYTE PTR es:[edi],dx
     830:	06                   	push   es
     831:	00 30                	add    BYTE PTR [eax],dh
     833:	f2 00 00             	repnz add BYTE PTR [eax],al
     836:	00 d1                	add    cl,dl
     838:	04 00                	add    al,0x0
     83a:	00 02                	add    BYTE PTR [edx],al
     83c:	01 06                	add    DWORD PTR [esi],eax
     83e:	64 00 00             	add    BYTE PTR fs:[eax],al
     841:	00 02                	add    BYTE PTR [edx],al
     843:	01 06                	add    DWORD PTR [esi],eax
     845:	5d                   	pop    ebp
     846:	00 00                	add    BYTE PTR [eax],al
     848:	00 02                	add    BYTE PTR [edx],al
     84a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     850:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     857:	02 08                	add    cl,BYTE PTR [eax]
     859:	05 00 00 00 00       	add    eax,0x0
     85e:	02 01                	add    al,BYTE PTR [ecx]
     860:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     863:	00 00                	add    BYTE PTR [eax],al
     865:	02 02                	add    al,BYTE PTR [edx]
     867:	07                   	pop    es
     868:	0e                   	push   cs
     869:	00 00                	add    BYTE PTR [eax],al
     86b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     86e:	00 00                	add    BYTE PTR [eax],al
     870:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     873:	61                   	popa   
     874:	00 00                	add    BYTE PTR [eax],al
     876:	00 02                	add    BYTE PTR [edx],al
     878:	04 07                	add    al,0x7
     87a:	3e 00 00             	add    BYTE PTR ds:[eax],al
     87d:	00 02                	add    BYTE PTR [edx],al
     87f:	08 07                	or     BYTE PTR [edi],al
     881:	34 00                	xor    al,0x0
     883:	00 00                	add    BYTE PTR [eax],al
     885:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     88c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     88f:	9b                   	fwait
     890:	00 00                	add    BYTE PTR [eax],al
     892:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
     898:	00 06                	add    BYTE PTR [esi],al
     89a:	25 00 00 00 02       	and    eax,0x2000000
     89f:	01 02                	add    DWORD PTR [edx],eax
     8a1:	95                   	xchg   ebp,eax
     8a2:	00 00                	add    BYTE PTR [eax],al
     8a4:	00 07                	add    BYTE PTR [edi],al
     8a6:	17                   	pop    ss
     8a7:	03 00                	add    eax,DWORD PTR [eax]
     8a9:	00 04 61             	add    BYTE PTR [ecx+eiz*2],al
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	00 05 15 51 01 00    	add    BYTE PTR ds:0x15115,al
     8b4:	00 08                	add    BYTE PTR [eax],cl
     8b6:	7c 03                	jl     8bb <sysEnter_Vector-0x12f745>
     8b8:	00 00                	add    BYTE PTR [eax],al
     8ba:	00 08                	add    BYTE PTR [eax],cl
     8bc:	b4 03                	mov    ah,0x3
     8be:	00 00                	add    BYTE PTR [eax],al
     8c0:	01 08                	add    DWORD PTR [eax],ecx
     8c2:	73 02                	jae    8c6 <sysEnter_Vector-0x12f73a>
     8c4:	00 00                	add    BYTE PTR [eax],al
     8c6:	02 08                	add    cl,BYTE PTR [eax]
     8c8:	09 03                	or     DWORD PTR [ebx],eax
     8ca:	00 00                	add    BYTE PTR [eax],al
     8cc:	03 08                	add    ecx,DWORD PTR [eax]
     8ce:	53                   	push   ebx
     8cf:	02 00                	add    al,BYTE PTR [eax]
     8d1:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     8d4:	ce                   	into   
     8d5:	03 00                	add    eax,DWORD PTR [eax]
     8d7:	00 05 08 2d 03 00    	add    BYTE PTR ds:0x32d08,al
     8dd:	00 06                	add    BYTE PTR [esi],al
     8df:	08 66 02             	or     BYTE PTR [esi+0x2],ah
     8e2:	00 00                	add    BYTE PTR [eax],al
     8e4:	07                   	pop    es
     8e5:	08 04 04             	or     BYTE PTR [esp+eax*1],al
     8e8:	00 00                	add    BYTE PTR [eax],al
     8ea:	4f                   	dec    edi
     8eb:	08 6f 03             	or     BYTE PTR [edi+0x3],ch
     8ee:	00 00                	add    BYTE PTR [eax],al
     8f0:	59                   	pop    ecx
     8f1:	08 13                	or     BYTE PTR [ebx],dl
     8f3:	04 00                	add    al,0x0
     8f5:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
     8f8:	f5                   	cmc    
     8f9:	02 00                	add    al,BYTE PTR [eax]
     8fb:	00 97 09 8c 03 00    	add    BYTE PTR [edi+0x38c09],dl
     901:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     904:	09 62 03             	or     DWORD PTR [edx+0x3],esp
     907:	00 00                	add    BYTE PTR [eax],al
     909:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
     90c:	f6 03 00             	test   BYTE PTR [ebx],0x0
     90f:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     912:	09 d7                	or     edi,edx
     914:	02 00                	add    al,BYTE PTR [eax]
     916:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     919:	09 2b                	or     DWORD PTR [ebx],ebp
     91b:	04 00                	add    al,0x0
     91d:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     920:	09 3a                	or     DWORD PTR [edx],edi
     922:	03 00                	add    eax,DWORD PTR [eax]
     924:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     927:	09 ac 02 00 00 69 01 	or     DWORD PTR [edx+eax*1+0x1690000],ebp
     92e:	09 a3 03 00 00 70    	or     DWORD PTR [ebx+0x70000003],esp
     934:	01 09                	add    DWORD PTR [ecx],ecx
     936:	e5 02                	in     eax,0x2
     938:	00 00                	add    BYTE PTR [eax],al
     93a:	71 01                	jno    93d <sysEnter_Vector-0x12f6c3>
     93c:	09 dc                	or     esp,ebx
     93e:	03 00                	add    eax,DWORD PTR [eax]
     940:	00 00                	add    BYTE PTR [eax],al
     942:	03 09                	add    ecx,DWORD PTR [ecx]
     944:	47                   	inc    edi
     945:	03 00                	add    eax,DWORD PTR [eax]
     947:	00 01                	add    BYTE PTR [ecx],al
     949:	03 09                	add    ecx,DWORD PTR [ecx]
     94b:	bb 02 00 00 02       	mov    ebx,0x2000002
     950:	03 09                	add    ecx,DWORD PTR [ecx]
     952:	80 02 00             	add    BYTE PTR [edx],0x0
     955:	00 03                	add    BYTE PTR [ebx],al
     957:	03 09                	add    ecx,DWORD PTR [ecx]
     959:	90                   	nop
     95a:	02 00                	add    al,BYTE PTR [eax]
     95c:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     95f:	09 c7                	or     edi,eax
     961:	02 00                	add    al,BYTE PTR [eax]
     963:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
     969:	07                   	pop    es
     96a:	39 00                	cmp    DWORD PTR [eax],eax
     96c:	00 00                	add    BYTE PTR [eax],al
     96e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     971:	e1 00                	loope  973 <sysEnter_Vector-0x12f68d>
     973:	00 00                	add    BYTE PTR [eax],al
     975:	0a 04 05 04 25 00 00 	or     al,BYTE PTR [eax*1+0x2504]
     97c:	00 0b                	add    BYTE PTR [ebx],cl
     97e:	26                   	es
     97f:	04 00                	add    al,0x0
     981:	00 01                	add    BYTE PTR [ecx],al
     983:	09 5f 01             	or     DWORD PTR [edi+0x1],ebx
     986:	00 00                	add    BYTE PTR [eax],al
     988:	6c                   	ins    BYTE PTR es:[edi],dx
     989:	06                   	push   es
     98a:	00 30                	add    BYTE PTR [eax],dh
     98c:	2d 00 00 00 01       	sub    eax,0x1000000
     991:	9c                   	pushf  
     992:	9d                   	popf   
     993:	01 00                	add    DWORD PTR [eax],eax
     995:	00 0c dc             	add    BYTE PTR [esp+ebx*8],cl
     998:	08 00                	or     BYTE PTR [eax],al
     99a:	00 01                	add    BYTE PTR [ecx],al
     99c:	09 61 01             	or     DWORD PTR [ecx+0x1],esp
     99f:	00 00                	add    BYTE PTR [eax],al
     9a1:	02 91 00 0c 8a 08    	add    dl,BYTE PTR [ecx+0x88a0c00]
     9a7:	00 00                	add    BYTE PTR [eax],al
     9a9:	01 09                	add    DWORD PTR [ecx],ecx
     9ab:	7d 00                	jge    9ad <sysEnter_Vector-0x12f653>
     9ad:	00 00                	add    BYTE PTR [eax],al
     9af:	02 91 04 00 0d 4d    	add    dl,BYTE PTR [ecx+0x4d0d0004]
     9b5:	02 00                	add    al,BYTE PTR [eax]
     9b7:	00 01                	add    BYTE PTR [ecx],al
     9b9:	0e                   	push   cs
     9ba:	99                   	cdq    
     9bb:	06                   	push   es
     9bc:	00 30                	add    BYTE PTR [eax],dh
     9be:	2a 00                	sub    al,BYTE PTR [eax]
     9c0:	00 00                	add    BYTE PTR [eax],al
     9c2:	01 9c c1 01 00 00 0c 	add    DWORD PTR [ecx+eax*8+0xc000001],ebx
     9c9:	ea 03 00 00 01 0e 5f 	jmp    0x5f0e:0x1000003
     9d0:	01 00                	add    DWORD PTR [eax],eax
     9d2:	00 02                	add    BYTE PTR [edx],al
     9d4:	91                   	xchg   ecx,eax
     9d5:	00 00                	add    BYTE PTR [eax],al
     9d7:	0b 28                	or     ebp,DWORD PTR [eax]
     9d9:	03 00                	add    eax,DWORD PTR [eax]
     9db:	00 01                	add    BYTE PTR [ecx],al
     9dd:	13 3a                	adc    edi,DWORD PTR [edx]
     9df:	00 00                	add    BYTE PTR [eax],al
     9e1:	00 c3                	add    bl,al
     9e3:	06                   	push   es
     9e4:	00 30                	add    BYTE PTR [eax],dh
     9e6:	35 00 00 00 01       	xor    eax,0x1000000
     9eb:	9c                   	pushf  
     9ec:	13 02                	adc    eax,DWORD PTR [edx]
     9ee:	00 00                	add    BYTE PTR [eax],al
     9f0:	0c ea                	or     al,0xea
     9f2:	03 00                	add    eax,DWORD PTR [eax]
     9f4:	00 01                	add    BYTE PTR [ecx],al
     9f6:	13 5f 01             	adc    ebx,DWORD PTR [edi+0x1]
     9f9:	00 00                	add    BYTE PTR [eax],al
     9fb:	02 91 00 0c c7 03    	add    dl,BYTE PTR [ecx+0x3c70c00]
     a01:	00 00                	add    BYTE PTR [eax],al
     a03:	01 13                	add    DWORD PTR [ebx],edx
     a05:	5f                   	pop    edi
     a06:	01 00                	add    DWORD PTR [eax],eax
     a08:	00 02                	add    BYTE PTR [edx],al
     a0a:	91                   	xchg   ecx,eax
     a0b:	04 0c                	add    al,0xc
     a0d:	f1                   	icebp  
     a0e:	03 00                	add    eax,DWORD PTR [eax]
     a10:	00 01                	add    BYTE PTR [ecx],al
     a12:	13 3a                	adc    edi,DWORD PTR [edx]
     a14:	00 00                	add    BYTE PTR [eax],al
     a16:	00 02                	add    BYTE PTR [edx],al
     a18:	91                   	xchg   ecx,eax
     a19:	08 0c 21             	or     BYTE PTR [ecx+eiz*1],cl
     a1c:	03 00                	add    eax,DWORD PTR [eax]
     a1e:	00 01                	add    BYTE PTR [ecx],al
     a20:	13 3a                	adc    edi,DWORD PTR [edx]
     a22:	00 00                	add    BYTE PTR [eax],al
     a24:	00 02                	add    BYTE PTR [edx],al
     a26:	91                   	xchg   ecx,eax
     a27:	0c 00                	or     al,0x0
     a29:	0b 60 02             	or     esp,DWORD PTR [eax+0x2]
     a2c:	00 00                	add    BYTE PTR [eax],al
     a2e:	01 18                	add    DWORD PTR [eax],ebx
     a30:	3a 00                	cmp    al,BYTE PTR [eax]
     a32:	00 00                	add    BYTE PTR [eax],al
     a34:	f8                   	clc    
     a35:	06                   	push   es
     a36:	00 30                	add    BYTE PTR [eax],dh
     a38:	35 00 00 00 01       	xor    eax,0x1000000
     a3d:	9c                   	pushf  
     a3e:	65 02 00             	add    al,BYTE PTR gs:[eax]
     a41:	00 0c ea             	add    BYTE PTR [edx+ebp*8],cl
     a44:	03 00                	add    eax,DWORD PTR [eax]
     a46:	00 01                	add    BYTE PTR [ecx],al
     a48:	18 5f 01             	sbb    BYTE PTR [edi+0x1],bl
     a4b:	00 00                	add    BYTE PTR [eax],al
     a4d:	02 91 00 0c c7 03    	add    dl,BYTE PTR [ecx+0x3c70c00]
     a53:	00 00                	add    BYTE PTR [eax],al
     a55:	01 18                	add    DWORD PTR [eax],ebx
     a57:	5f                   	pop    edi
     a58:	01 00                	add    DWORD PTR [eax],eax
     a5a:	00 02                	add    BYTE PTR [edx],al
     a5c:	91                   	xchg   ecx,eax
     a5d:	04 0c                	add    al,0xc
     a5f:	f1                   	icebp  
     a60:	03 00                	add    eax,DWORD PTR [eax]
     a62:	00 01                	add    BYTE PTR [ecx],al
     a64:	18 3a                	sbb    BYTE PTR [edx],bh
     a66:	00 00                	add    BYTE PTR [eax],al
     a68:	00 02                	add    BYTE PTR [edx],al
     a6a:	91                   	xchg   ecx,eax
     a6b:	08 0c 21             	or     BYTE PTR [ecx+eiz*1],cl
     a6e:	03 00                	add    eax,DWORD PTR [eax]
     a70:	00 01                	add    BYTE PTR [ecx],al
     a72:	18 3a                	sbb    BYTE PTR [edx],bh
     a74:	00 00                	add    BYTE PTR [eax],al
     a76:	00 02                	add    BYTE PTR [edx],al
     a78:	91                   	xchg   ecx,eax
     a79:	0c 00                	or     al,0x0
     a7b:	0b 46 02             	or     eax,DWORD PTR [esi+0x2]
     a7e:	00 00                	add    BYTE PTR [eax],al
     a80:	01 1e                	add    DWORD PTR [esi],ebx
     a82:	3a 00                	cmp    al,BYTE PTR [eax]
     a84:	00 00                	add    BYTE PTR [eax],al
     a86:	2d 07 00 30 31       	sub    eax,0x31300007
     a8b:	00 00                	add    BYTE PTR [eax],al
     a8d:	00 01                	add    BYTE PTR [ecx],al
     a8f:	9c                   	pushf  
     a90:	a9 02 00 00 0c       	test   eax,0xc000002
     a95:	dc 08                	fmul   QWORD PTR [eax]
     a97:	00 00                	add    BYTE PTR [eax],al
     a99:	01 1e                	add    DWORD PTR [esi],ebx
     a9b:	61                   	popa   
     a9c:	01 00                	add    DWORD PTR [eax],eax
     a9e:	00 02                	add    BYTE PTR [edx],al
     aa0:	91                   	xchg   ecx,eax
     aa1:	00 0c c7             	add    BYTE PTR [edi+eax*8],cl
     aa4:	03 00                	add    eax,DWORD PTR [eax]
     aa6:	00 01                	add    BYTE PTR [ecx],al
     aa8:	1e                   	push   ds
     aa9:	61                   	popa   
     aaa:	01 00                	add    DWORD PTR [eax],eax
     aac:	00 02                	add    BYTE PTR [edx],al
     aae:	91                   	xchg   ecx,eax
     aaf:	04 0c                	add    al,0xc
     ab1:	56                   	push   esi
     ab2:	03 00                	add    eax,DWORD PTR [eax]
     ab4:	00 01                	add    BYTE PTR [ecx],al
     ab6:	1e                   	push   ds
     ab7:	3a 00                	cmp    al,BYTE PTR [eax]
     ab9:	00 00                	add    BYTE PTR [eax],al
     abb:	02 91 08 00 0e 4b    	add    dl,BYTE PTR [ecx+0x4b0e0008]
     ac1:	00 00                	add    BYTE PTR [eax],al
     ac3:	00 02                	add    BYTE PTR [edx],al
     ac5:	34 56                	xor    al,0x56
     ac7:	00 00                	add    BYTE PTR [eax],al
     ac9:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
     acf:	30 0e                	xor    BYTE PTR [esi],cl
     ad1:	af                   	scas   eax,DWORD PTR es:[edi]
     ad2:	00 00                	add    BYTE PTR [eax],al
     ad4:	00 02                	add    BYTE PTR [edx],al
     ad6:	35 56 00 00 00       	xor    eax,0x56
     adb:	05 03 60 46 00       	add    eax,0x466003
     ae0:	30 0e                	xor    BYTE PTR [esi],cl
     ae2:	5b                   	pop    ebx
     ae3:	01 00                	add    DWORD PTR [eax],eax
     ae5:	00 02                	add    BYTE PTR [edx],al
     ae7:	36                   	ss
     ae8:	56                   	push   esi
     ae9:	00 00                	add    BYTE PTR [eax],al
     aeb:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
     af1:	30 0e                	xor    BYTE PTR [esi],cl
     af3:	54                   	push   esp
     af4:	00 00                	add    BYTE PTR [eax],al
     af6:	00 02                	add    BYTE PTR [edx],al
     af8:	37                   	aaa    
     af9:	56                   	push   esi
     afa:	00 00                	add    BYTE PTR [eax],al
     afc:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
     b02:	30 0e                	xor    BYTE PTR [esi],cl
     b04:	28 00                	sub    BYTE PTR [eax],al
     b06:	00 00                	add    BYTE PTR [eax],al
     b08:	03 49 fe             	add    ecx,DWORD PTR [ecx-0x2]
     b0b:	02 00                	add    al,BYTE PTR [eax]
     b0d:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
     b13:	30 05 04 61 01 00    	xor    BYTE PTR ds:0x16104,al
     b19:	00 00                	add    BYTE PTR [eax],al
     b1b:	b5 02                	mov    ch,0x2
     b1d:	00 00                	add    BYTE PTR [eax],al
     b1f:	04 00                	add    al,0x0
     b21:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     b24:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     b27:	f4                   	hlt    
     b28:	00 00                	add    BYTE PTR [eax],al
     b2a:	00 0c 56             	add    BYTE PTR [esi+edx*2],cl
     b2d:	04 00                	add    al,0x0
     b2f:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     b32:	00 00                	add    BYTE PTR [eax],al
     b34:	60                   	pusha  
     b35:	07                   	pop    es
     b36:	00 30                	add    BYTE PTR [eax],dh
     b38:	52                   	push   edx
     b39:	01 00                	add    DWORD PTR [eax],eax
     b3b:	00 cd                	add    ch,cl
     b3d:	05 00 00 02 01       	add    eax,0x1020000
     b42:	06                   	push   es
     b43:	64 00 00             	add    BYTE PTR fs:[eax],al
     b46:	00 02                	add    BYTE PTR [edx],al
     b48:	01 06                	add    DWORD PTR [esi],eax
     b4a:	5d                   	pop    ebp
     b4b:	00 00                	add    BYTE PTR [eax],al
     b4d:	00 02                	add    BYTE PTR [edx],al
     b4f:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     b55:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b5c:	02 08                	add    cl,BYTE PTR [eax]
     b5e:	05 00 00 00 00       	add    eax,0x0
     b63:	02 01                	add    al,BYTE PTR [ecx]
     b65:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     b68:	00 00                	add    BYTE PTR [eax],al
     b6a:	02 02                	add    al,BYTE PTR [edx]
     b6c:	07                   	pop    es
     b6d:	0e                   	push   cs
     b6e:	00 00                	add    BYTE PTR [eax],al
     b70:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     b73:	00 00                	add    BYTE PTR [eax],al
     b75:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     b78:	61                   	popa   
     b79:	00 00                	add    BYTE PTR [eax],al
     b7b:	00 02                	add    BYTE PTR [edx],al
     b7d:	04 07                	add    al,0x7
     b7f:	3e 00 00             	add    BYTE PTR ds:[eax],al
     b82:	00 02                	add    BYTE PTR [edx],al
     b84:	08 07                	or     BYTE PTR [edi],al
     b86:	34 00                	xor    al,0x0
     b88:	00 00                	add    BYTE PTR [eax],al
     b8a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b91:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     b94:	9b                   	fwait
     b95:	00 00                	add    BYTE PTR [eax],al
     b97:	00 02                	add    BYTE PTR [edx],al
     b99:	01 02                	add    DWORD PTR [edx],eax
     b9b:	95                   	xchg   ebp,eax
     b9c:	00 00                	add    BYTE PTR [eax],al
     b9e:	00 05 17 03 00 00    	add    BYTE PTR ds:0x317,al
     ba4:	04 61                	add    al,0x61
     ba6:	00 00                	add    BYTE PTR [eax],al
     ba8:	00 05 15 46 01 00    	add    BYTE PTR ds:0x14615,al
     bae:	00 06                	add    BYTE PTR [esi],al
     bb0:	7c 03                	jl     bb5 <sysEnter_Vector-0x12f44b>
     bb2:	00 00                	add    BYTE PTR [eax],al
     bb4:	00 06                	add    BYTE PTR [esi],al
     bb6:	b4 03                	mov    ah,0x3
     bb8:	00 00                	add    BYTE PTR [eax],al
     bba:	01 06                	add    DWORD PTR [esi],eax
     bbc:	73 02                	jae    bc0 <sysEnter_Vector-0x12f440>
     bbe:	00 00                	add    BYTE PTR [eax],al
     bc0:	02 06                	add    al,BYTE PTR [esi]
     bc2:	09 03                	or     DWORD PTR [ebx],eax
     bc4:	00 00                	add    BYTE PTR [eax],al
     bc6:	03 06                	add    eax,DWORD PTR [esi]
     bc8:	53                   	push   ebx
     bc9:	02 00                	add    al,BYTE PTR [eax]
     bcb:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     bce:	ce                   	into   
     bcf:	03 00                	add    eax,DWORD PTR [eax]
     bd1:	00 05 06 2d 03 00    	add    BYTE PTR ds:0x32d06,al
     bd7:	00 06                	add    BYTE PTR [esi],al
     bd9:	06                   	push   es
     bda:	66                   	data16
     bdb:	02 00                	add    al,BYTE PTR [eax]
     bdd:	00 07                	add    BYTE PTR [edi],al
     bdf:	06                   	push   es
     be0:	04 04                	add    al,0x4
     be2:	00 00                	add    BYTE PTR [eax],al
     be4:	4f                   	dec    edi
     be5:	06                   	push   es
     be6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     be7:	03 00                	add    eax,DWORD PTR [eax]
     be9:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
     bec:	13 04 00             	adc    eax,DWORD PTR [eax+eax*1]
     bef:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
     bf2:	f5                   	cmc    
     bf3:	02 00                	add    al,BYTE PTR [eax]
     bf5:	00 97 07 8c 03 00    	add    BYTE PTR [edi+0x38c07],dl
     bfb:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     bfe:	07                   	pop    es
     bff:	62 03                	bound  eax,QWORD PTR [ebx]
     c01:	00 00                	add    BYTE PTR [eax],al
     c03:	64 01 07             	add    DWORD PTR fs:[edi],eax
     c06:	f6 03 00             	test   BYTE PTR [ebx],0x0
     c09:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     c0c:	07                   	pop    es
     c0d:	d7                   	xlat   BYTE PTR ds:[ebx]
     c0e:	02 00                	add    al,BYTE PTR [eax]
     c10:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     c13:	07                   	pop    es
     c14:	2b 04 00             	sub    eax,DWORD PTR [eax+eax*1]
     c17:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     c1a:	07                   	pop    es
     c1b:	3a 03                	cmp    al,BYTE PTR [ebx]
     c1d:	00 00                	add    BYTE PTR [eax],al
     c1f:	68 01 07 ac 02       	push   0x2ac0701
     c24:	00 00                	add    BYTE PTR [eax],al
     c26:	69 01 07 a3 03 00    	imul   eax,DWORD PTR [ecx],0x3a307
     c2c:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     c2f:	07                   	pop    es
     c30:	e5 02                	in     eax,0x2
     c32:	00 00                	add    BYTE PTR [eax],al
     c34:	71 01                	jno    c37 <sysEnter_Vector-0x12f3c9>
     c36:	07                   	pop    es
     c37:	dc 03                	fadd   QWORD PTR [ebx]
     c39:	00 00                	add    BYTE PTR [eax],al
     c3b:	00 03                	add    BYTE PTR [ebx],al
     c3d:	07                   	pop    es
     c3e:	47                   	inc    edi
     c3f:	03 00                	add    eax,DWORD PTR [eax]
     c41:	00 01                	add    BYTE PTR [ecx],al
     c43:	03 07                	add    eax,DWORD PTR [edi]
     c45:	bb 02 00 00 02       	mov    ebx,0x2000002
     c4a:	03 07                	add    eax,DWORD PTR [edi]
     c4c:	80 02 00             	add    BYTE PTR [edx],0x0
     c4f:	00 03                	add    BYTE PTR [ebx],al
     c51:	03 07                	add    eax,DWORD PTR [edi]
     c53:	90                   	nop
     c54:	02 00                	add    al,BYTE PTR [eax]
     c56:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     c59:	07                   	pop    es
     c5a:	c7 02 00 00 05 03    	mov    DWORD PTR [edx],0x3050000
     c60:	00 02                	add    BYTE PTR [edx],al
     c62:	04 07                	add    al,0x7
     c64:	39 00                	cmp    DWORD PTR [eax],eax
     c66:	00 00                	add    BYTE PTR [eax],al
     c68:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     c6b:	e1 00                	loope  c6d <sysEnter_Vector-0x12f393>
     c6d:	00 00                	add    BYTE PTR [eax],al
     c6f:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
     c76:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
     c79:	00 01                	add    BYTE PTR [ecx],al
     c7b:	0f 60 07             	punpcklbw mm0,DWORD PTR [edi]
     c7e:	00 30                	add    BYTE PTR [eax],dh
     c80:	26 00 00             	add    BYTE PTR es:[eax],al
     c83:	00 01                	add    BYTE PTR [ecx],al
     c85:	9c                   	pushf  
     c86:	7e 01                	jle    c89 <sysEnter_Vector-0x12f377>
     c88:	00 00                	add    BYTE PTR [eax],al
     c8a:	0a c7                	or     al,bh
     c8c:	03 00                	add    eax,DWORD PTR [eax]
     c8e:	00 01                	add    BYTE PTR [ecx],al
     c90:	0f 54 01             	andps  xmm0,XMMWORD PTR [ecx]
     c93:	00 00                	add    BYTE PTR [eax],al
     c95:	02 91 00 00 09 80    	add    dl,BYTE PTR [ecx-0x7ff70000]
     c9b:	04 00                	add    al,0x0
     c9d:	00 01                	add    BYTE PTR [ecx],al
     c9f:	14 86                	adc    al,0x86
     ca1:	07                   	pop    es
     ca2:	00 30                	add    BYTE PTR [eax],dh
     ca4:	43                   	inc    ebx
     ca5:	00 00                	add    BYTE PTR [eax],al
     ca7:	00 01                	add    BYTE PTR [ecx],al
     ca9:	9c                   	pushf  
     caa:	ae                   	scas   al,BYTE PTR es:[edi]
     cab:	01 00                	add    DWORD PTR [eax],eax
     cad:	00 0b                	add    BYTE PTR [ebx],cl
     caf:	63 00                	arpl   WORD PTR [eax],ax
     cb1:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     cb8:	91                   	xchg   ecx,eax
     cb9:	60                   	pusha  
     cba:	0c c7                	or     al,0xc7
     cbc:	03 00                	add    eax,DWORD PTR [eax]
     cbe:	00 01                	add    BYTE PTR [ecx],al
     cc0:	16                   	push   ss
     cc1:	ae                   	scas   al,BYTE PTR es:[edi]
     cc2:	01 00                	add    DWORD PTR [eax],eax
     cc4:	00 02                	add    BYTE PTR [edx],al
     cc6:	91                   	xchg   ecx,eax
     cc7:	72 00                	jb     cc9 <sysEnter_Vector-0x12f337>
     cc9:	0d 25 00 00 00       	or     eax,0x25
     cce:	be 01 00 00 0e       	mov    esi,0xe000001
     cd3:	4d                   	dec    ebp
     cd4:	01 00                	add    DWORD PTR [eax],eax
     cd6:	00 01                	add    BYTE PTR [ecx],al
     cd8:	00 0f                	add    BYTE PTR [edi],cl
     cda:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cdb:	04 00                	add    al,0x0
     cdd:	00 01                	add    BYTE PTR [ecx],al
     cdf:	1d 25 00 00 00       	sbb    eax,0x25
     ce4:	c9                   	leave  
     ce5:	07                   	pop    es
     ce6:	00 30                	add    BYTE PTR [eax],dh
     ce8:	2f                   	das    
     ce9:	00 00                	add    BYTE PTR [eax],al
     ceb:	00 01                	add    BYTE PTR [ecx],al
     ced:	9c                   	pushf  
     cee:	e4 01                	in     al,0x1
     cf0:	00 00                	add    BYTE PTR [eax],al
     cf2:	10 63 00             	adc    BYTE PTR [ebx+0x0],ah
     cf5:	01 1f                	add    DWORD PTR [edi],ebx
     cf7:	25 00 00 00 02       	and    eax,0x2000000
     cfc:	91                   	xchg   ecx,eax
     cfd:	73 00                	jae    cff <sysEnter_Vector-0x12f301>
     cff:	11 7b 04             	adc    DWORD PTR [ebx+0x4],edi
     d02:	00 00                	add    BYTE PTR [eax],al
     d04:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d0a:	f8                   	clc    
     d0b:	07                   	pop    es
     d0c:	00 30                	add    BYTE PTR [eax],dh
     d0e:	ba 00 00 00 01       	mov    edx,0x1000000
     d13:	9c                   	pushf  
     d14:	5d                   	pop    ebp
     d15:	02 00                	add    al,BYTE PTR [eax]
     d17:	00 0a                	add    BYTE PTR [edx],cl
     d19:	c7 03 00 00 01 25    	mov    DWORD PTR [ebx],0x25010000
     d1f:	54                   	push   esp
     d20:	01 00                	add    DWORD PTR [eax],eax
     d22:	00 02                	add    BYTE PTR [edx],al
     d24:	91                   	xchg   ecx,eax
     d25:	00 0a                	add    BYTE PTR [edx],cl
     d27:	74 04                	je     d2d <sysEnter_Vector-0x12f2d3>
     d29:	00 00                	add    BYTE PTR [eax],al
     d2b:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d31:	02 91 04 0a 40 04    	add    dl,BYTE PTR [ecx+0x4400a04]
     d37:	00 00                	add    BYTE PTR [eax],al
     d39:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d3f:	02 91 08 0c 68 04    	add    dl,BYTE PTR [ecx+0x4680c08]
     d45:	00 00                	add    BYTE PTR [eax],al
     d47:	01 27                	add    DWORD PTR [edi],esp
     d49:	25 00 00 00 02       	and    eax,0x2000000
     d4e:	91                   	xchg   ecx,eax
     d4f:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     d52:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     d54:	00 01                	add    BYTE PTR [ecx],al
     d56:	28 3a                	sub    BYTE PTR [edx],bh
     d58:	00 00                	add    BYTE PTR [eax],al
     d5a:	00 02                	add    BYTE PTR [edx],al
     d5c:	91                   	xchg   ecx,eax
     d5d:	6c                   	ins    BYTE PTR es:[edi],dx
     d5e:	0c 51                	or     al,0x51
     d60:	04 00                	add    al,0x0
     d62:	00 01                	add    BYTE PTR [ecx],al
     d64:	29 ae 01 00 00 02    	sub    DWORD PTR [esi+0x2000001],ebp
     d6a:	91                   	xchg   ecx,eax
     d6b:	69 12 47 04 00 00    	imul   edx,DWORD PTR [edx],0x447
     d71:	01 2e                	add    DWORD PTR [esi],ebp
     d73:	35 08 00 30 00       	xor    eax,0x300008
     d78:	13 4b 00             	adc    ecx,DWORD PTR [ebx+0x0]
     d7b:	00 00                	add    BYTE PTR [eax],al
     d7d:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     d80:	00 00                	add    BYTE PTR [eax],al
     d82:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
     d88:	30 13                	xor    BYTE PTR [ebx],dl
     d8a:	af                   	scas   eax,DWORD PTR es:[edi]
     d8b:	00 00                	add    BYTE PTR [eax],al
     d8d:	00 02                	add    BYTE PTR [edx],al
     d8f:	35 56 00 00 00       	xor    eax,0x56
     d94:	05 03 60 46 00       	add    eax,0x466003
     d99:	30 13                	xor    BYTE PTR [ebx],dl
     d9b:	5b                   	pop    ebx
     d9c:	01 00                	add    DWORD PTR [eax],eax
     d9e:	00 02                	add    BYTE PTR [edx],al
     da0:	36                   	ss
     da1:	56                   	push   esi
     da2:	00 00                	add    BYTE PTR [eax],al
     da4:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
     daa:	30 13                	xor    BYTE PTR [ebx],dl
     dac:	54                   	push   esp
     dad:	00 00                	add    BYTE PTR [eax],al
     daf:	00 02                	add    BYTE PTR [edx],al
     db1:	37                   	aaa    
     db2:	56                   	push   esi
     db3:	00 00                	add    BYTE PTR [eax],al
     db5:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
     dbb:	30 13                	xor    BYTE PTR [ebx],dl
     dbd:	28 00                	sub    BYTE PTR [eax],al
     dbf:	00 00                	add    BYTE PTR [eax],al
     dc1:	03 49 b2             	add    ecx,DWORD PTR [ecx-0x4e]
     dc4:	02 00                	add    al,BYTE PTR [eax]
     dc6:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
     dcc:	30 08                	xor    BYTE PTR [eax],cl
     dce:	04 54                	add    al,0x54
     dd0:	01 00                	add    DWORD PTR [eax],eax
     dd2:	00 00                	add    BYTE PTR [eax],al
     dd4:	39 07                	cmp    DWORD PTR [edi],eax
     dd6:	00 00                	add    BYTE PTR [eax],al
     dd8:	04 00                	add    al,0x0
     dda:	22 05 00 00 04 01    	and    al,BYTE PTR ds:0x1040000
     de0:	f4                   	hlt    
     de1:	00 00                	add    BYTE PTR [eax],al
     de3:	00 0c d0             	add    BYTE PTR [eax+edx*8],cl
     de6:	05 00 00 72 00       	add    eax,0x720000
     deb:	00 00                	add    BYTE PTR [eax],al
     ded:	b4 08                	mov    ah,0x8
     def:	00 30                	add    BYTE PTR [eax],dh
     df1:	8c 06                	mov    WORD PTR [esi],es
     df3:	00 00                	add    BYTE PTR [eax],al
     df5:	f7 06 00 00 02 6b    	test   DWORD PTR [esi],0x6b020000
     dfb:	05 00 00 02 28       	add    eax,0x28020000
     e00:	30 00                	xor    BYTE PTR [eax],al
     e02:	00 00                	add    BYTE PTR [eax],al
     e04:	03 04 de             	add    eax,DWORD PTR [esi+ebx*8]
     e07:	04 00                	add    al,0x0
     e09:	00 3a                	add    BYTE PTR [edx],bh
     e0b:	00 00                	add    BYTE PTR [eax],al
     e0d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e10:	06                   	push   es
     e11:	64 00 00             	add    BYTE PTR fs:[eax],al
     e14:	00 02                	add    BYTE PTR [edx],al
     e16:	72 05                	jb     e1d <sysEnter_Vector-0x12f1e3>
     e18:	00 00                	add    BYTE PTR [eax],al
     e1a:	02 62 25             	add    ah,BYTE PTR [edx+0x25]
     e1d:	00 00                	add    BYTE PTR [eax],al
     e1f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e22:	06                   	push   es
     e23:	5d                   	pop    ebp
     e24:	00 00                	add    BYTE PTR [eax],al
     e26:	00 04 02             	add    BYTE PTR [edx+eax*1],al
     e29:	05 ea 00 00 00       	add    eax,0xea
     e2e:	05 04 05 69 6e       	add    eax,0x6e690504
     e33:	74 00                	je     e35 <sysEnter_Vector-0x12f1cb>
     e35:	04 08                	add    al,0x8
     e37:	05 00 00 00 00       	add    eax,0x0
     e3c:	04 01                	add    al,0x1
     e3e:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     e41:	00 00                	add    BYTE PTR [eax],al
     e43:	04 02                	add    al,0x2
     e45:	07                   	pop    es
     e46:	0e                   	push   cs
     e47:	00 00                	add    BYTE PTR [eax],al
     e49:	00 02                	add    BYTE PTR [edx],al
     e4b:	69 00 00 00 03 34    	imul   eax,DWORD PTR [eax],0x34030000
     e51:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e57:	07                   	pop    es
     e58:	3e 00 00             	add    BYTE PTR ds:[eax],al
     e5b:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     e5e:	07                   	pop    es
     e5f:	34 00                	xor    al,0x0
     e61:	00 00                	add    BYTE PTR [eax],al
     e63:	02 ab 04 00 00 03    	add    ch,BYTE PTR [ebx+0x3000004]
     e69:	56                   	push   esi
     e6a:	81 00 00 00 02 a4    	add    DWORD PTR [eax],0xa4020000
     e70:	04 00                	add    al,0x0
     e72:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
     e75:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e7b:	05 05 00 00 00       	add    eax,0x5
     e80:	04 0c                	add    al,0xc
     e82:	04 9b                	add    al,0x9b
     e84:	00 00                	add    BYTE PTR [eax],al
     e86:	00 06                	add    BYTE PTR [esi],al
     e88:	04 b9                	add    al,0xb9
     e8a:	00 00                	add    BYTE PTR [eax],al
     e8c:	00 07                	add    BYTE PTR [edi],al
     e8e:	3a 00                	cmp    al,BYTE PTR [eax]
     e90:	00 00                	add    BYTE PTR [eax],al
     e92:	04 01                	add    al,0x1
     e94:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
     e9a:	17                   	pop    ss
     e9b:	03 00                	add    eax,DWORD PTR [eax]
     e9d:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
     ea0:	00 00                	add    BYTE PTR [eax],al
     ea2:	00 07                	add    BYTE PTR [edi],al
     ea4:	15 87 01 00 00       	adc    eax,0x187
     ea9:	09 7c 03 00          	or     DWORD PTR [ebx+eax*1+0x0],edi
     ead:	00 00                	add    BYTE PTR [eax],al
     eaf:	09 b4 03 00 00 01 09 	or     DWORD PTR [ebx+eax*1+0x9010000],esi
     eb6:	73 02                	jae    eba <sysEnter_Vector-0x12f146>
     eb8:	00 00                	add    BYTE PTR [eax],al
     eba:	02 09                	add    cl,BYTE PTR [ecx]
     ebc:	09 03                	or     DWORD PTR [ebx],eax
     ebe:	00 00                	add    BYTE PTR [eax],al
     ec0:	03 09                	add    ecx,DWORD PTR [ecx]
     ec2:	53                   	push   ebx
     ec3:	02 00                	add    al,BYTE PTR [eax]
     ec5:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
     ec8:	ce                   	into   
     ec9:	03 00                	add    eax,DWORD PTR [eax]
     ecb:	00 05 09 2d 03 00    	add    BYTE PTR ds:0x32d09,al
     ed1:	00 06                	add    BYTE PTR [esi],al
     ed3:	09 66 02             	or     DWORD PTR [esi+0x2],esp
     ed6:	00 00                	add    BYTE PTR [eax],al
     ed8:	07                   	pop    es
     ed9:	09 04 04             	or     DWORD PTR [esp+eax*1],eax
     edc:	00 00                	add    BYTE PTR [eax],al
     ede:	4f                   	dec    edi
     edf:	09 6f 03             	or     DWORD PTR [edi+0x3],ebp
     ee2:	00 00                	add    BYTE PTR [eax],al
     ee4:	59                   	pop    ecx
     ee5:	09 13                	or     DWORD PTR [ebx],edx
     ee7:	04 00                	add    al,0x0
     ee9:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
     eec:	f5                   	cmc    
     eed:	02 00                	add    al,BYTE PTR [eax]
     eef:	00 97 0a 8c 03 00    	add    BYTE PTR [edi+0x38c0a],dl
     ef5:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     ef8:	0a 62 03             	or     ah,BYTE PTR [edx+0x3]
     efb:	00 00                	add    BYTE PTR [eax],al
     efd:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
     f00:	f6 03 00             	test   BYTE PTR [ebx],0x0
     f03:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     f06:	0a d7                	or     dl,bh
     f08:	02 00                	add    al,BYTE PTR [eax]
     f0a:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     f0d:	0a 2b                	or     ch,BYTE PTR [ebx]
     f0f:	04 00                	add    al,0x0
     f11:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     f14:	0a 3a                	or     bh,BYTE PTR [edx]
     f16:	03 00                	add    eax,DWORD PTR [eax]
     f18:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     f1b:	0a ac 02 00 00 69 01 	or     ch,BYTE PTR [edx+eax*1+0x1690000]
     f22:	0a a3 03 00 00 70    	or     ah,BYTE PTR [ebx+0x70000003]
     f28:	01 0a                	add    DWORD PTR [edx],ecx
     f2a:	e5 02                	in     eax,0x2
     f2c:	00 00                	add    BYTE PTR [eax],al
     f2e:	71 01                	jno    f31 <sysEnter_Vector-0x12f0cf>
     f30:	0a dc                	or     bl,ah
     f32:	03 00                	add    eax,DWORD PTR [eax]
     f34:	00 00                	add    BYTE PTR [eax],al
     f36:	03 0a                	add    ecx,DWORD PTR [edx]
     f38:	47                   	inc    edi
     f39:	03 00                	add    eax,DWORD PTR [eax]
     f3b:	00 01                	add    BYTE PTR [ecx],al
     f3d:	03 0a                	add    ecx,DWORD PTR [edx]
     f3f:	bb 02 00 00 02       	mov    ebx,0x2000002
     f44:	03 0a                	add    ecx,DWORD PTR [edx]
     f46:	80 02 00             	add    BYTE PTR [edx],0x0
     f49:	00 03                	add    BYTE PTR [ebx],al
     f4b:	03 0a                	add    ecx,DWORD PTR [edx]
     f4d:	90                   	nop
     f4e:	02 00                	add    al,BYTE PTR [eax]
     f50:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     f53:	0a c7                	or     al,bh
     f55:	02 00                	add    al,BYTE PTR [eax]
     f57:	00 05 03 00 04 04    	add    BYTE PTR ds:0x4040003,al
     f5d:	07                   	pop    es
     f5e:	39 00                	cmp    DWORD PTR [eax],eax
     f60:	00 00                	add    BYTE PTR [eax],al
     f62:	04 04                	add    al,0x4
     f64:	07                   	pop    es
     f65:	e1 00                	loope  f67 <sysEnter_Vector-0x12f099>
     f67:	00 00                	add    BYTE PTR [eax],al
     f69:	0b 04 06             	or     eax,DWORD PTR [esi+eax*1]
     f6c:	04 3a                	add    al,0x3a
     f6e:	00 00                	add    BYTE PTR [eax],al
     f70:	00 0c 4f             	add    BYTE PTR [edi+ecx*2],cl
     f73:	05 00 00 01 10       	add    eax,0x10010000
     f78:	5a                   	pop    edx
     f79:	00 00                	add    BYTE PTR [eax],al
     f7b:	00 b4 08 00 30 3a 00 	add    BYTE PTR [eax+ecx*1+0x3a3000],dh
     f82:	00 00                	add    BYTE PTR [eax],al
     f84:	01 9c 0b 02 00 00 0d 	add    DWORD PTR [ebx+ecx*1+0xd000002],ebx
     f8b:	11 05 00 00 01 10    	adc    DWORD PTR ds:0x10010000,eax
     f91:	5a                   	pop    edx
     f92:	00 00                	add    BYTE PTR [eax],al
     f94:	00 02                	add    BYTE PTR [edx],al
     f96:	91                   	xchg   ecx,eax
     f97:	00 0d 8b 05 00 00    	add    BYTE PTR ds:0x58b,cl
     f9d:	01 10                	add    DWORD PTR [eax],edx
     f9f:	76 00                	jbe    fa1 <sysEnter_Vector-0x12f05f>
     fa1:	00 00                	add    BYTE PTR [eax],al
     fa3:	02 91 04 0d 92 05    	add    dl,BYTE PTR [ecx+0x5920d04]
     fa9:	00 00                	add    BYTE PTR [eax],al
     fab:	01 10                	add    DWORD PTR [eax],edx
     fad:	76 00                	jbe    faf <sysEnter_Vector-0x12f051>
     faf:	00 00                	add    BYTE PTR [eax],al
     fb1:	02 91 08 0d 99 05    	add    dl,BYTE PTR [ecx+0x5990d08]
     fb7:	00 00                	add    BYTE PTR [eax],al
     fb9:	01 10                	add    DWORD PTR [eax],edx
     fbb:	76 00                	jbe    fbd <sysEnter_Vector-0x12f043>
     fbd:	00 00                	add    BYTE PTR [eax],al
     fbf:	02 91 0c 0d a0 05    	add    dl,BYTE PTR [ecx+0x5a00d0c]
     fc5:	00 00                	add    BYTE PTR [eax],al
     fc7:	01 10                	add    DWORD PTR [eax],edx
     fc9:	76 00                	jbe    fcb <sysEnter_Vector-0x12f035>
     fcb:	00 00                	add    BYTE PTR [eax],al
     fcd:	02 91 10 0e 8a 04    	add    dl,BYTE PTR [ecx+0x48a0e10]
     fd3:	00 00                	add    BYTE PTR [eax],al
     fd5:	01 12                	add    DWORD PTR [edx],edx
     fd7:	5a                   	pop    edx
     fd8:	00 00                	add    BYTE PTR [eax],al
     fda:	00 02                	add    BYTE PTR [edx],al
     fdc:	91                   	xchg   ecx,eax
     fdd:	6c                   	ins    BYTE PTR es:[edi],dx
     fde:	00 0c 43             	add    BYTE PTR [ebx+eax*2],cl
     fe1:	05 00 00 01 17       	add    eax,0x17010000
     fe6:	5a                   	pop    edx
     fe7:	00 00                	add    BYTE PTR [eax],al
     fe9:	00 ee                	add    dh,ch
     feb:	08 00                	or     BYTE PTR [eax],al
     fed:	30 3c 00             	xor    BYTE PTR [eax+eax*1],bh
     ff0:	00 00                	add    BYTE PTR [eax],al
     ff2:	01 9c 6b 02 00 00 0d 	add    DWORD PTR [ebx+ebp*2+0xd000002],ebx
     ff9:	11 05 00 00 01 17    	adc    DWORD PTR ds:0x17010000,eax
     fff:	5a                   	pop    edx
    1000:	00 00                	add    BYTE PTR [eax],al
    1002:	00 02                	add    BYTE PTR [edx],al
    1004:	91                   	xchg   ecx,eax
    1005:	00 0d 8b 05 00 00    	add    BYTE PTR ds:0x58b,cl
    100b:	01 17                	add    DWORD PTR [edi],edx
    100d:	76 00                	jbe    100f <sysEnter_Vector-0x12eff1>
    100f:	00 00                	add    BYTE PTR [eax],al
    1011:	02 91 04 0d 92 05    	add    dl,BYTE PTR [ecx+0x5920d04]
    1017:	00 00                	add    BYTE PTR [eax],al
    1019:	01 17                	add    DWORD PTR [edi],edx
    101b:	76 00                	jbe    101d <sysEnter_Vector-0x12efe3>
    101d:	00 00                	add    BYTE PTR [eax],al
    101f:	02 91 08 0d 99 05    	add    dl,BYTE PTR [ecx+0x5990d08]
    1025:	00 00                	add    BYTE PTR [eax],al
    1027:	01 17                	add    DWORD PTR [edi],edx
    1029:	76 00                	jbe    102b <sysEnter_Vector-0x12efd5>
    102b:	00 00                	add    BYTE PTR [eax],al
    102d:	02 91 0c 0e 8a 04    	add    dl,BYTE PTR [ecx+0x48a0e0c]
    1033:	00 00                	add    BYTE PTR [eax],al
    1035:	01 19                	add    DWORD PTR [ecx],ebx
    1037:	5a                   	pop    edx
    1038:	00 00                	add    BYTE PTR [eax],al
    103a:	00 02                	add    BYTE PTR [edx],al
    103c:	91                   	xchg   ecx,eax
    103d:	6c                   	ins    BYTE PTR es:[edi],dx
    103e:	00 0c 37             	add    BYTE PTR [edi+esi*1],cl
    1041:	05 00 00 01 1e       	add    eax,0x1e010000
    1046:	5a                   	pop    edx
    1047:	00 00                	add    BYTE PTR [eax],al
    1049:	00 2a                	add    BYTE PTR [edx],ch
    104b:	09 00                	or     DWORD PTR [eax],eax
    104d:	30 3e                	xor    BYTE PTR [esi],bh
    104f:	00 00                	add    BYTE PTR [eax],al
    1051:	00 01                	add    BYTE PTR [ecx],al
    1053:	9c                   	pushf  
    1054:	bd 02 00 00 0d       	mov    ebp,0xd000002
    1059:	11 05 00 00 01 1e    	adc    DWORD PTR ds:0x1e010000,eax
    105f:	5a                   	pop    edx
    1060:	00 00                	add    BYTE PTR [eax],al
    1062:	00 02                	add    BYTE PTR [edx],al
    1064:	91                   	xchg   ecx,eax
    1065:	00 0d 8b 05 00 00    	add    BYTE PTR ds:0x58b,cl
    106b:	01 1e                	add    DWORD PTR [esi],ebx
    106d:	76 00                	jbe    106f <sysEnter_Vector-0x12ef91>
    106f:	00 00                	add    BYTE PTR [eax],al
    1071:	02 91 04 0d 92 05    	add    dl,BYTE PTR [ecx+0x5920d04]
    1077:	00 00                	add    BYTE PTR [eax],al
    1079:	01 1e                	add    DWORD PTR [esi],ebx
    107b:	76 00                	jbe    107d <sysEnter_Vector-0x12ef83>
    107d:	00 00                	add    BYTE PTR [eax],al
    107f:	02 91 08 0e 8a 04    	add    dl,BYTE PTR [ecx+0x48a0e08]
    1085:	00 00                	add    BYTE PTR [eax],al
    1087:	01 20                	add    DWORD PTR [eax],esp
    1089:	5a                   	pop    edx
    108a:	00 00                	add    BYTE PTR [eax],al
    108c:	00 02                	add    BYTE PTR [edx],al
    108e:	91                   	xchg   ecx,eax
    108f:	6c                   	ins    BYTE PTR es:[edi],dx
    1090:	00 0c 2b             	add    BYTE PTR [ebx+ebp*1],cl
    1093:	05 00 00 01 25       	add    eax,0x25010000
    1098:	5a                   	pop    edx
    1099:	00 00                	add    BYTE PTR [eax],al
    109b:	00 68 09             	add    BYTE PTR [eax+0x9],ch
    109e:	00 30                	add    BYTE PTR [eax],dh
    10a0:	40                   	inc    eax
    10a1:	00 00                	add    BYTE PTR [eax],al
    10a3:	00 01                	add    BYTE PTR [ecx],al
    10a5:	9c                   	pushf  
    10a6:	01 03                	add    DWORD PTR [ebx],eax
    10a8:	00 00                	add    BYTE PTR [eax],al
    10aa:	0d 11 05 00 00       	or     eax,0x511
    10af:	01 25 5a 00 00 00    	add    DWORD PTR ds:0x5a,esp
    10b5:	02 91 00 0d 8b 05    	add    dl,BYTE PTR [ecx+0x58b0d00]
    10bb:	00 00                	add    BYTE PTR [eax],al
    10bd:	01 25 76 00 00 00    	add    DWORD PTR ds:0x76,esp
    10c3:	02 91 04 0e 8a 04    	add    dl,BYTE PTR [ecx+0x48a0e04]
    10c9:	00 00                	add    BYTE PTR [eax],al
    10cb:	01 27                	add    DWORD PTR [edi],esp
    10cd:	5a                   	pop    edx
    10ce:	00 00                	add    BYTE PTR [eax],al
    10d0:	00 02                	add    BYTE PTR [edx],al
    10d2:	91                   	xchg   ecx,eax
    10d3:	6c                   	ins    BYTE PTR es:[edi],dx
    10d4:	00 0c 1f             	add    BYTE PTR [edi+ebx*1],cl
    10d7:	05 00 00 01 2c       	add    eax,0x2c010000
    10dc:	5a                   	pop    edx
    10dd:	00 00                	add    BYTE PTR [eax],al
    10df:	00 a8 09 00 30 42    	add    BYTE PTR [eax+0x42300009],ch
    10e5:	00 00                	add    BYTE PTR [eax],al
    10e7:	00 01                	add    BYTE PTR [ecx],al
    10e9:	9c                   	pushf  
    10ea:	37                   	aaa    
    10eb:	03 00                	add    eax,DWORD PTR [eax]
    10ed:	00 0d 11 05 00 00    	add    BYTE PTR ds:0x511,cl
    10f3:	01 2c 5a             	add    DWORD PTR [edx+ebx*2],ebp
    10f6:	00 00                	add    BYTE PTR [eax],al
    10f8:	00 02                	add    BYTE PTR [edx],al
    10fa:	91                   	xchg   ecx,eax
    10fb:	00 0e                	add    BYTE PTR [esi],cl
    10fd:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    1100:	00 01                	add    BYTE PTR [ecx],al
    1102:	2e                   	cs
    1103:	5a                   	pop    edx
    1104:	00 00                	add    BYTE PTR [eax],al
    1106:	00 02                	add    BYTE PTR [edx],al
    1108:	91                   	xchg   ecx,eax
    1109:	6c                   	ins    BYTE PTR es:[edi],dx
    110a:	00 0f                	add    BYTE PTR [edi],cl
    110c:	d4 04                	aam    0x4
    110e:	00 00                	add    BYTE PTR [eax],al
    1110:	01 33                	add    DWORD PTR [ebx],esi
    1112:	ea 09 00 30 a5 00 00 	jmp    0x0:0xa5300009
    1119:	00 01                	add    BYTE PTR [ecx],al
    111b:	9c                   	pushf  
    111c:	10 e6                	adc    dh,ah
    111e:	05 00 00 01 44       	add    eax,0x44010000
    1123:	8f 0a                	(bad)  
    1125:	00 30                	add    BYTE PTR [eax],dh
    1127:	1f                   	pop    ds
    1128:	00 00                	add    BYTE PTR [eax],al
    112a:	00 01                	add    BYTE PTR [ecx],al
    112c:	9c                   	pushf  
    112d:	11 91 04 00 00 01    	adc    DWORD PTR [ecx+0x1000004],edx
    1133:	49                   	dec    ecx
    1134:	5a                   	pop    edx
    1135:	00 00                	add    BYTE PTR [eax],al
    1137:	00 ae 0a 00 30 34    	add    BYTE PTR [esi+0x3430000a],ch
    113d:	00 00                	add    BYTE PTR [eax],al
    113f:	00 01                	add    BYTE PTR [ecx],al
    1141:	9c                   	pushf  
    1142:	90                   	nop
    1143:	03 00                	add    eax,DWORD PTR [eax]
    1145:	00 0d b3 05 00 00    	add    BYTE PTR ds:0x5b3,cl
    114b:	01 49 b3             	add    DWORD PTR [ecx-0x4d],ecx
    114e:	00 00                	add    BYTE PTR [eax],al
    1150:	00 02                	add    BYTE PTR [edx],al
    1152:	91                   	xchg   ecx,eax
    1153:	00 12                	add    BYTE PTR [edx],dl
    1155:	0e                   	push   cs
    1156:	15 06 00 00 01       	adc    eax,0x1000006
    115b:	4b                   	dec    ebx
    115c:	41                   	inc    ecx
    115d:	00 00                	add    BYTE PTR [eax],al
    115f:	00 02                	add    BYTE PTR [edx],al
    1161:	91                   	xchg   ecx,eax
    1162:	74 00                	je     1164 <sysEnter_Vector-0x12ee9c>
    1164:	11 bd 04 00 00 01    	adc    DWORD PTR [ebp+0x1000004],edi
    116a:	51                   	push   ecx
    116b:	5a                   	pop    edx
    116c:	00 00                	add    BYTE PTR [eax],al
    116e:	00 e2                	add    dl,ah
    1170:	0a 00                	or     al,BYTE PTR [eax]
    1172:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
    1175:	00 00                	add    BYTE PTR [eax],al
    1177:	01 9c c7 03 00 00 0d 	add    DWORD PTR [edi+eax*8+0xd000003],ebx
    117e:	b3 05                	mov    bl,0x5
    1180:	00 00                	add    BYTE PTR [eax],al
    1182:	01 51 b3             	add    DWORD PTR [ecx-0x4d],edx
    1185:	00 00                	add    BYTE PTR [eax],al
    1187:	00 02                	add    BYTE PTR [edx],al
    1189:	91                   	xchg   ecx,eax
    118a:	00 12                	add    BYTE PTR [edx],dl
    118c:	0e                   	push   cs
    118d:	15 06 00 00 01       	adc    eax,0x1000006
    1192:	53                   	push   ebx
    1193:	41                   	inc    ecx
    1194:	00 00                	add    BYTE PTR [eax],al
    1196:	00 02                	add    BYTE PTR [edx],al
    1198:	91                   	xchg   ecx,eax
    1199:	74 00                	je     119b <sysEnter_Vector-0x12ee65>
    119b:	11 1a                	adc    DWORD PTR [edx],ebx
    119d:	06                   	push   es
    119e:	00 00                	add    BYTE PTR [eax],al
    11a0:	01 59 5a             	add    DWORD PTR [ecx+0x5a],ebx
    11a3:	00 00                	add    BYTE PTR [eax],al
    11a5:	00 16                	add    BYTE PTR [esi],dl
    11a7:	0b 00                	or     eax,DWORD PTR [eax]
    11a9:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
    11ac:	00 00                	add    BYTE PTR [eax],al
    11ae:	01 9c fe 03 00 00 0d 	add    DWORD PTR [esi+edi*8+0xd000003],ebx
    11b5:	b3 05                	mov    bl,0x5
    11b7:	00 00                	add    BYTE PTR [eax],al
    11b9:	01 59 b3             	add    DWORD PTR [ecx-0x4d],ebx
    11bc:	00 00                	add    BYTE PTR [eax],al
    11be:	00 02                	add    BYTE PTR [edx],al
    11c0:	91                   	xchg   ecx,eax
    11c1:	00 12                	add    BYTE PTR [edx],dl
    11c3:	0e                   	push   cs
    11c4:	15 06 00 00 01       	adc    eax,0x1000006
    11c9:	5b                   	pop    ebx
    11ca:	41                   	inc    ecx
    11cb:	00 00                	add    BYTE PTR [eax],al
    11cd:	00 02                	add    BYTE PTR [edx],al
    11cf:	91                   	xchg   ecx,eax
    11d0:	74 00                	je     11d2 <sysEnter_Vector-0x12ee2e>
    11d2:	11 7a 05             	adc    DWORD PTR [edx+0x5],edi
    11d5:	00 00                	add    BYTE PTR [eax],al
    11d7:	01 61 5a             	add    DWORD PTR [ecx+0x5a],esp
    11da:	00 00                	add    BYTE PTR [eax],al
    11dc:	00 4a 0b             	add    BYTE PTR [edx+0xb],cl
    11df:	00 30                	add    BYTE PTR [eax],dh
    11e1:	37                   	aaa    
    11e2:	00 00                	add    BYTE PTR [eax],al
    11e4:	00 01                	add    BYTE PTR [ecx],al
    11e6:	9c                   	pushf  
    11e7:	43                   	inc    ebx
    11e8:	04 00                	add    al,0x0
    11ea:	00 0d 06 05 00 00    	add    BYTE PTR ds:0x506,cl
    11f0:	01 61 76             	add    DWORD PTR [ecx+0x76],esp
    11f3:	00 00                	add    BYTE PTR [eax],al
    11f5:	00 02                	add    BYTE PTR [edx],al
    11f7:	91                   	xchg   ecx,eax
    11f8:	00 0d b3 05 00 00    	add    BYTE PTR ds:0x5b3,cl
    11fe:	01 61 b3             	add    DWORD PTR [ecx-0x4d],esp
    1201:	00 00                	add    BYTE PTR [eax],al
    1203:	00 02                	add    BYTE PTR [edx],al
    1205:	91                   	xchg   ecx,eax
    1206:	04 12                	add    al,0x12
    1208:	0e                   	push   cs
    1209:	15 06 00 00 01       	adc    eax,0x1000006
    120e:	63 41 00             	arpl   WORD PTR [ecx+0x0],ax
    1211:	00 00                	add    BYTE PTR [eax],al
    1213:	02 91 74 00 0c 19    	add    dl,BYTE PTR [ecx+0x190c0074]
    1219:	05 00 00 01 6b       	add    eax,0x6b010000
    121e:	81 00 00 00 81 0b    	add    DWORD PTR [eax],0xb810000
    1224:	00 30                	add    BYTE PTR [eax],dh
    1226:	75 00                	jne    1228 <sysEnter_Vector-0x12edd8>
    1228:	00 00                	add    BYTE PTR [eax],al
    122a:	01 9c 8f 04 00 00 0d 	add    DWORD PTR [edi+ecx*4+0xd000004],ebx
    1231:	c6 05 00 00 01 6b 81 	mov    BYTE PTR ds:0x6b010000,0x81
    1238:	00 00                	add    BYTE PTR [eax],al
    123a:	00 02                	add    BYTE PTR [edx],al
    123c:	91                   	xchg   ecx,eax
    123d:	00 13                	add    BYTE PTR [ebx],dl
    123f:	93                   	xchg   ebx,eax
    1240:	0b 00                	or     eax,DWORD PTR [eax]
    1242:	30 57 00             	xor    BYTE PTR [edi+0x0],dl
    1245:	00 00                	add    BYTE PTR [eax],al
    1247:	14 73                	adc    al,0x73
    1249:	32 00                	xor    al,BYTE PTR [eax]
    124b:	01 6d 76             	add    DWORD PTR [ebp+0x76],ebp
    124e:	00 00                	add    BYTE PTR [eax],al
    1250:	00 02                	add    BYTE PTR [edx],al
    1252:	91                   	xchg   ecx,eax
    1253:	6c                   	ins    BYTE PTR es:[edi],dx
    1254:	14 63                	adc    al,0x63
    1256:	74 00                	je     1258 <sysEnter_Vector-0x12eda8>
    1258:	01 6d 76             	add    DWORD PTR [ebp+0x76],ebp
    125b:	00 00                	add    BYTE PTR [eax],al
    125d:	00 02                	add    BYTE PTR [edx],al
    125f:	91                   	xchg   ecx,eax
    1260:	68 00 00 0f 21       	push   0x210f0000
    1265:	06                   	push   es
    1266:	00 00                	add    BYTE PTR [eax],al
    1268:	01 71 f6             	add    DWORD PTR [ecx-0xa],esi
    126b:	0b 00                	or     eax,DWORD PTR [eax]
    126d:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    1273:	9c                   	pushf  
    1274:	15 08 06 00 00       	adc    eax,0x608
    1279:	01 76 13             	add    DWORD PTR [esi+0x13],esi
    127c:	0c 00                	or     al,0x0
    127e:	30 29                	xor    BYTE PTR [ecx],ch
    1280:	00 00                	add    BYTE PTR [eax],al
    1282:	00 01                	add    BYTE PTR [ecx],al
    1284:	9c                   	pushf  
    1285:	e0 04                	loopne 128b <sysEnter_Vector-0x12ed75>
    1287:	00 00                	add    BYTE PTR [eax],al
    1289:	0d ba 05 00 00       	or     eax,0x5ba
    128e:	01 76 5a             	add    DWORD PTR [esi+0x5a],esi
    1291:	00 00                	add    BYTE PTR [eax],al
    1293:	00 02                	add    BYTE PTR [edx],al
    1295:	91                   	xchg   ecx,eax
    1296:	00 0d fd 05 00 00    	add    BYTE PTR ds:0x5fd,cl
    129c:	01 76 95             	add    DWORD PTR [esi-0x6b],esi
    129f:	01 00                	add    DWORD PTR [eax],eax
    12a1:	00 02                	add    BYTE PTR [edx],al
    12a3:	91                   	xchg   ecx,eax
    12a4:	04 0d                	add    al,0xd
    12a6:	b5 04                	mov    ch,0x4
    12a8:	00 00                	add    BYTE PTR [eax],al
    12aa:	01 76 5a             	add    DWORD PTR [esi+0x5a],esi
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	00 02                	add    BYTE PTR [edx],al
    12b1:	91                   	xchg   ecx,eax
    12b2:	08 00                	or     BYTE PTR [eax],al
    12b4:	16                   	push   ss
    12b5:	f0 04 00             	lock add al,0x0
    12b8:	00 01                	add    BYTE PTR [ecx],al
    12ba:	7b 5a                	jnp    1316 <sysEnter_Vector-0x12ecea>
    12bc:	00 00                	add    BYTE PTR [eax],al
    12be:	00 3c 0c             	add    BYTE PTR [esp+ecx*1],bh
    12c1:	00 30                	add    BYTE PTR [eax],dh
    12c3:	29 00                	sub    DWORD PTR [eax],eax
    12c5:	00 00                	add    BYTE PTR [eax],al
    12c7:	01 9c 08 05 00 00 0e 	add    DWORD PTR [eax+ecx*1+0xe000005],ebx
    12ce:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    12d1:	00 01                	add    BYTE PTR [ecx],al
    12d3:	7d 76                	jge    134b <sysEnter_Vector-0x12ecb5>
    12d5:	00 00                	add    BYTE PTR [eax],al
    12d7:	00 02                	add    BYTE PTR [edx],al
    12d9:	91                   	xchg   ecx,eax
    12da:	74 00                	je     12dc <sysEnter_Vector-0x12ed24>
    12dc:	11 c1                	adc    ecx,eax
    12de:	05 00 00 01 83       	add    eax,0x83010000
    12e3:	5a                   	pop    edx
    12e4:	00 00                	add    BYTE PTR [eax],al
    12e6:	00 65 0c             	add    BYTE PTR [ebp+0xc],ah
    12e9:	00 30                	add    BYTE PTR [eax],dh
    12eb:	4c                   	dec    esp
    12ec:	00 00                	add    BYTE PTR [eax],al
    12ee:	00 01                	add    BYTE PTR [ecx],al
    12f0:	9c                   	pushf  
    12f1:	5a                   	pop    edx
    12f2:	05 00 00 0d dc       	add    eax,0xdc0d0000
    12f7:	08 00                	or     BYTE PTR [eax],al
    12f9:	00 01                	add    BYTE PTR [ecx],al
    12fb:	83 97 01 00 00 02 91 	adc    DWORD PTR [edi+0x2000001],0xffffff91
    1302:	00 0d e1 05 00 00    	add    BYTE PTR ds:0x5e1,cl
    1308:	01 83 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],eax
    130e:	02 91 04 0d f3 05    	add    dl,BYTE PTR [ecx+0x5f30d04]
    1314:	00 00                	add    BYTE PTR [eax],al
    1316:	01 83 5a 05 00 00    	add    DWORD PTR [ebx+0x55a],eax
    131c:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    1322:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1325:	85 5a 00             	test   DWORD PTR [edx+0x0],ebx
    1328:	00 00                	add    BYTE PTR [eax],al
    132a:	02 91 74 00 06 04    	add    dl,BYTE PTR [ecx+0x4060074]
    1330:	97                   	xchg   edi,eax
    1331:	01 00                	add    DWORD PTR [eax],eax
    1333:	00 11                	add    BYTE PTR [ecx],dl
    1335:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1336:	05 00 00 01 8b       	add    eax,0x8b010000
    133b:	5a                   	pop    edx
    133c:	00 00                	add    BYTE PTR [eax],al
    133e:	00 b1 0c 00 30 f4    	add    BYTE PTR [ecx-0xbcffff4],dh
    1344:	01 00                	add    DWORD PTR [eax],eax
    1346:	00 01                	add    BYTE PTR [ecx],al
    1348:	9c                   	pushf  
    1349:	02 06                	add    al,BYTE PTR [esi]
    134b:	00 00                	add    BYTE PTR [eax],al
    134d:	0d dc 08 00 00       	or     eax,0x8dc
    1352:	01 8b 97 01 00 00    	add    DWORD PTR [ebx+0x197],ecx
    1358:	02 91 00 14 70 69    	add    dl,BYTE PTR [ecx+0x69701400]
    135e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1361:	8d 5a 00             	lea    ebx,[edx+0x0]
    1364:	00 00                	add    BYTE PTR [eax],al
    1366:	02 91 58 0e e1 05    	add    dl,BYTE PTR [ecx+0x5e10e58]
    136c:	00 00                	add    BYTE PTR [eax],al
    136e:	01 8d 5a 00 00 00    	add    DWORD PTR [ebp+0x5a],ecx
    1374:	02 91 6c 0e f3 05    	add    dl,BYTE PTR [ecx+0x5f30e6c]
    137a:	00 00                	add    BYTE PTR [eax],al
    137c:	01 8e 5a 05 00 00    	add    DWORD PTR [esi+0x55a],ecx
    1382:	02 91 50 0e f5 04    	add    dl,BYTE PTR [ecx+0x4f50e50]
    1388:	00 00                	add    BYTE PTR [eax],al
    138a:	01 8f 97 01 00 00    	add    DWORD PTR [edi+0x197],ecx
    1390:	02 91 68 0e 97 04    	add    dl,BYTE PTR [ecx+0x4970e68]
    1396:	00 00                	add    BYTE PTR [eax],al
    1398:	01 8f 97 01 00 00    	add    DWORD PTR [edi+0x197],ecx
    139e:	02 91 64 0e cc 04    	add    dl,BYTE PTR [ecx+0x4cc0e64]
    13a4:	00 00                	add    BYTE PTR [eax],al
    13a6:	01 90 97 01 00 00    	add    DWORD PTR [eax+0x197],edx
    13ac:	02 91 54 0e c4 04    	add    dl,BYTE PTR [ecx+0x4c40e54]
    13b2:	00 00                	add    BYTE PTR [eax],al
    13b4:	01 a1 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],esp
    13ba:	02 91 60 13 87 0d    	add    dl,BYTE PTR [ecx+0xd871360]
    13c0:	00 30                	add    BYTE PTR [eax],dh
    13c2:	e0 00                	loopne 13c4 <sysEnter_Vector-0x12ec3c>
    13c4:	00 00                	add    BYTE PTR [eax],al
    13c6:	14 63                	adc    al,0x63
    13c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13c9:	74 00                	je     13cb <sysEnter_Vector-0x12ec35>
    13cb:	01 a3 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],esp
    13d1:	02 91 5c 00 00 11    	add    dl,BYTE PTR [ecx+0x1100005c]
    13d7:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    13d8:	05 00 00 01 b9       	add    eax,0xb9010000
    13dd:	5a                   	pop    edx
    13de:	00 00                	add    BYTE PTR [eax],al
    13e0:	00 a5 0e 00 30 4f    	add    BYTE PTR [ebp+0x4f30000e],ah
    13e6:	00 00                	add    BYTE PTR [eax],al
    13e8:	00 01                	add    BYTE PTR [ecx],al
    13ea:	9c                   	pushf  
    13eb:	54                   	push   esp
    13ec:	06                   	push   es
    13ed:	00 00                	add    BYTE PTR [eax],al
    13ef:	0d dc 08 00 00       	or     eax,0x8dc
    13f4:	01 b9 97 01 00 00    	add    DWORD PTR [ecx+0x197],edi
    13fa:	02 91 00 0d e1 05    	add    dl,BYTE PTR [ecx+0x5e10d00]
    1400:	00 00                	add    BYTE PTR [eax],al
    1402:	01 b9 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],edi
    1408:	02 91 04 0d f3 05    	add    dl,BYTE PTR [ecx+0x5f30d04]
    140e:	00 00                	add    BYTE PTR [eax],al
    1410:	01 b9 5a 05 00 00    	add    DWORD PTR [ecx+0x55a],edi
    1416:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    141c:	64 00 01             	add    BYTE PTR fs:[ecx],al
    141f:	bb 5a 00 00 00       	mov    ebx,0x5a
    1424:	02 91 74 00 11 fe    	add    dl,BYTE PTR [ecx-0x1eeff8c]
    142a:	04 00                	add    al,0x0
    142c:	00 01                	add    BYTE PTR [ecx],al
    142e:	c1 5a 00 00          	rcr    DWORD PTR [edx+0x0],0x0
    1432:	00 f4                	add    ah,dh
    1434:	0e                   	push   cs
    1435:	00 30                	add    BYTE PTR [eax],dh
    1437:	1c 00                	sbb    al,0x0
    1439:	00 00                	add    BYTE PTR [eax],al
    143b:	01 9c 7c 06 00 00 17 	add    DWORD PTR [esp+edi*2+0x17000006],ebx
    1442:	70 69                	jo     14ad <sysEnter_Vector-0x12eb53>
    1444:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1447:	c1                   	(bad)  
    1448:	76 00                	jbe    144a <sysEnter_Vector-0x12ebb6>
    144a:	00 00                	add    BYTE PTR [eax],al
    144c:	02 91 00 00 18 f8    	add    dl,BYTE PTR [ecx-0x7e80000]
    1452:	05 00 00 01 c6       	add    eax,0xc6010000
    1457:	10 0f                	adc    BYTE PTR [edi],cl
    1459:	00 30                	add    BYTE PTR [eax],dh
    145b:	10 00                	adc    BYTE PTR [eax],al
    145d:	00 00                	add    BYTE PTR [eax],al
    145f:	01 9c a0 06 00 00 0d 	add    DWORD PTR [eax+eiz*4+0xd000006],ebx
    1466:	82                   	(bad)  
    1467:	05 00 00 01 c6       	add    eax,0xc6010000
    146c:	5a                   	pop    edx
    146d:	00 00                	add    BYTE PTR [eax],al
    146f:	00 02                	add    BYTE PTR [edx],al
    1471:	91                   	xchg   ecx,eax
    1472:	00 00                	add    BYTE PTR [eax],al
    1474:	11 26                	adc    DWORD PTR [esi],esp
    1476:	06                   	push   es
    1477:	00 00                	add    BYTE PTR [eax],al
    1479:	01 cb                	add    ebx,ecx
    147b:	97                   	xchg   edi,eax
    147c:	01 00                	add    DWORD PTR [eax],eax
    147e:	00 20                	add    BYTE PTR [eax],ah
    1480:	0f 00                	(bad)  
    1482:	30 20                	xor    BYTE PTR [eax],ah
    1484:	00 00                	add    BYTE PTR [eax],al
    1486:	00 01                	add    BYTE PTR [ecx],al
    1488:	9c                   	pushf  
    1489:	d6                   	(bad)  
    148a:	06                   	push   es
    148b:	00 00                	add    BYTE PTR [eax],al
    148d:	17                   	pop    ss
    148e:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    1491:	00 01                	add    BYTE PTR [ecx],al
    1493:	cb                   	retf   
    1494:	97                   	xchg   edi,eax
    1495:	01 00                	add    DWORD PTR [eax],eax
    1497:	00 02                	add    BYTE PTR [edx],al
    1499:	91                   	xchg   ecx,eax
    149a:	00 0d f1 03 00 00    	add    BYTE PTR ds:0x3f1,cl
    14a0:	01 cb                	add    ebx,ecx
    14a2:	9a 00 00 00 02 91 04 	call   0x491:0x2000000
    14a9:	00 19                	add    BYTE PTR [ecx],bl
    14ab:	4b                   	dec    ebx
    14ac:	00 00                	add    BYTE PTR [eax],al
    14ae:	00 05 34 76 00 00    	add    BYTE PTR ds:0x7634,al
    14b4:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    14ba:	30 19                	xor    BYTE PTR [ecx],bl
    14bc:	af                   	scas   eax,DWORD PTR es:[edi]
    14bd:	00 00                	add    BYTE PTR [eax],al
    14bf:	00 05 35 76 00 00    	add    BYTE PTR ds:0x7635,al
    14c5:	00 05 03 60 46 00    	add    BYTE PTR ds:0x466003,al
    14cb:	30 19                	xor    BYTE PTR [ecx],bl
    14cd:	5b                   	pop    ebx
    14ce:	01 00                	add    DWORD PTR [eax],eax
    14d0:	00 05 36 76 00 00    	add    BYTE PTR ds:0x7636,al
    14d6:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    14dc:	30 19                	xor    BYTE PTR [ecx],bl
    14de:	54                   	push   esp
    14df:	00 00                	add    BYTE PTR [eax],al
    14e1:	00 05 37 76 00 00    	add    BYTE PTR ds:0x7637,al
    14e7:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    14ed:	30 19                	xor    BYTE PTR [ecx],bl
    14ef:	28 00                	sub    BYTE PTR [eax],al
    14f1:	00 00                	add    BYTE PTR [eax],al
    14f3:	06                   	push   es
    14f4:	49                   	dec    ecx
    14f5:	5a                   	pop    edx
    14f6:	05 00 00 05 03       	add    eax,0x3050000
    14fb:	64                   	fs
    14fc:	46                   	inc    esi
    14fd:	00 30                	add    BYTE PTR [eax],dh
    14ff:	19 5b 05             	sbb    DWORD PTR [ebx+0x5],ebx
    1502:	00 00                	add    BYTE PTR [eax],al
    1504:	01 0d be 00 00 00    	add    DWORD PTR ds:0xbe,ecx
    150a:	05 03 70 46 00       	add    eax,0x467003
    150f:	30 00                	xor    BYTE PTR [eax],al
    1511:	72 03                	jb     1516 <sysEnter_Vector-0x12eaea>
    1513:	00 00                	add    BYTE PTR [eax],al
    1515:	04 00                	add    al,0x0
    1517:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1518:	06                   	push   es
    1519:	00 00                	add    BYTE PTR [eax],al
    151b:	04 01                	add    al,0x1
    151d:	f4                   	hlt    
    151e:	00 00                	add    BYTE PTR [eax],al
    1520:	00 0c d1             	add    BYTE PTR [ecx+edx*8],cl
    1523:	06                   	push   es
    1524:	00 00                	add    BYTE PTR [eax],al
    1526:	72 00                	jb     1528 <sysEnter_Vector-0x12ead8>
    1528:	00 00                	add    BYTE PTR [eax],al
    152a:	40                   	inc    eax
    152b:	0f 00                	(bad)  
    152d:	30 6d 03             	xor    BYTE PTR [ebp+0x3],ch
    1530:	00 00                	add    BYTE PTR [eax],al
    1532:	bd 08 00 00 02       	mov    ebp,0x2000008
    1537:	01 06                	add    DWORD PTR [esi],eax
    1539:	5d                   	pop    ebp
    153a:	00 00                	add    BYTE PTR [eax],al
    153c:	00 02                	add    BYTE PTR [edx],al
    153e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1544:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    154b:	02 08                	add    cl,BYTE PTR [eax]
    154d:	05 00 00 00 00       	add    eax,0x0
    1552:	04 71                	add    al,0x71
    1554:	06                   	push   es
    1555:	00 00                	add    BYTE PTR [eax],al
    1557:	02 2e                	add    ch,BYTE PTR [esi]
    1559:	4c                   	dec    esp
    155a:	00 00                	add    BYTE PTR [eax],al
    155c:	00 02                	add    BYTE PTR [edx],al
    155e:	01 08                	add    DWORD PTR [eax],ecx
    1560:	5b                   	pop    ebx
    1561:	00 00                	add    BYTE PTR [eax],al
    1563:	00 02                	add    BYTE PTR [edx],al
    1565:	02 07                	add    al,BYTE PTR [edi]
    1567:	0e                   	push   cs
    1568:	00 00                	add    BYTE PTR [eax],al
    156a:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    156d:	00 00                	add    BYTE PTR [eax],al
    156f:	00 02                	add    BYTE PTR [edx],al
    1571:	34 65                	xor    al,0x65
    1573:	00 00                	add    BYTE PTR [eax],al
    1575:	00 02                	add    BYTE PTR [edx],al
    1577:	04 07                	add    al,0x7
    1579:	3e 00 00             	add    BYTE PTR ds:[eax],al
    157c:	00 02                	add    BYTE PTR [edx],al
    157e:	08 07                	or     BYTE PTR [edi],al
    1580:	34 00                	xor    al,0x0
    1582:	00 00                	add    BYTE PTR [eax],al
    1584:	04 a4                	add    al,0xa4
    1586:	04 00                	add    al,0x0
    1588:	00 03                	add    BYTE PTR [ebx],al
    158a:	d8 65 00             	fsub   DWORD PTR [ebp+0x0]
    158d:	00 00                	add    BYTE PTR [eax],al
    158f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1596:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1599:	9b                   	fwait
    159a:	00 00                	add    BYTE PTR [eax],al
    159c:	00 02                	add    BYTE PTR [edx],al
    159e:	01 06                	add    DWORD PTR [esi],eax
    15a0:	64 00 00             	add    BYTE PTR fs:[eax],al
    15a3:	00 05 85 06 00 00    	add    BYTE PTR ds:0x685,al
    15a9:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    15ac:	d0 00                	rol    BYTE PTR [eax],1
    15ae:	00 00                	add    BYTE PTR [eax],al
    15b0:	06                   	push   es
    15b1:	5a                   	pop    edx
    15b2:	06                   	push   es
    15b3:	00 00                	add    BYTE PTR [eax],al
    15b5:	04 2e                	add    al,0x2e
    15b7:	5a                   	pop    edx
    15b8:	00 00                	add    BYTE PTR [eax],al
    15ba:	00 00                	add    BYTE PTR [eax],al
    15bc:	07                   	pop    es
    15bd:	6c                   	ins    BYTE PTR es:[edi],dx
    15be:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    15c0:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    15c3:	5a                   	pop    edx
    15c4:	00 00                	add    BYTE PTR [eax],al
    15c6:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    15c9:	8b 06                	mov    eax,DWORD PTR [esi]
    15cb:	00 00                	add    BYTE PTR [eax],al
    15cd:	04 30                	add    al,0x30
    15cf:	d0 00                	rol    BYTE PTR [eax],1
    15d1:	00 00                	add    BYTE PTR [eax],al
    15d3:	08 06                	or     BYTE PTR [esi],al
    15d5:	e4 06                	in     al,0x6
    15d7:	00 00                	add    BYTE PTR [eax],al
    15d9:	04 31                	add    al,0x31
    15db:	d7                   	xlat   BYTE PTR ds:[ebx]
    15dc:	00 00                	add    BYTE PTR [eax],al
    15de:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
    15e1:	02 01                	add    al,BYTE PTR [ecx]
    15e3:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
    15e9:	04 93                	add    al,0x93
    15eb:	00 00                	add    BYTE PTR [eax],al
    15ed:	00 04 e9             	add    BYTE PTR [ecx+ebp*8],al
    15f0:	06                   	push   es
    15f1:	00 00                	add    BYTE PTR [eax],al
    15f3:	04 32                	add    al,0x32
    15f5:	93                   	xchg   ebx,eax
    15f6:	00 00                	add    BYTE PTR [eax],al
    15f8:	00 09                	add    BYTE PTR [ecx],cl
    15fa:	17                   	pop    ss
    15fb:	03 00                	add    eax,DWORD PTR [eax]
    15fd:	00 04 65 00 00 00 06 	add    BYTE PTR [eiz*2+0x6000000],al
    1604:	15 aa 01 00 00       	adc    eax,0x1aa
    1609:	0a 7c 03 00          	or     bh,BYTE PTR [ebx+eax*1+0x0]
    160d:	00 00                	add    BYTE PTR [eax],al
    160f:	0a b4 03 00 00 01 0a 	or     dh,BYTE PTR [ebx+eax*1+0xa010000]
    1616:	73 02                	jae    161a <sysEnter_Vector-0x12e9e6>
    1618:	00 00                	add    BYTE PTR [eax],al
    161a:	02 0a                	add    cl,BYTE PTR [edx]
    161c:	09 03                	or     DWORD PTR [ebx],eax
    161e:	00 00                	add    BYTE PTR [eax],al
    1620:	03 0a                	add    ecx,DWORD PTR [edx]
    1622:	53                   	push   ebx
    1623:	02 00                	add    al,BYTE PTR [eax]
    1625:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
    1628:	ce                   	into   
    1629:	03 00                	add    eax,DWORD PTR [eax]
    162b:	00 05 0a 2d 03 00    	add    BYTE PTR ds:0x32d0a,al
    1631:	00 06                	add    BYTE PTR [esi],al
    1633:	0a 66 02             	or     ah,BYTE PTR [esi+0x2]
    1636:	00 00                	add    BYTE PTR [eax],al
    1638:	07                   	pop    es
    1639:	0a 04 04             	or     al,BYTE PTR [esp+eax*1]
    163c:	00 00                	add    BYTE PTR [eax],al
    163e:	4f                   	dec    edi
    163f:	0a 6f 03             	or     ch,BYTE PTR [edi+0x3]
    1642:	00 00                	add    BYTE PTR [eax],al
    1644:	59                   	pop    ecx
    1645:	0a 13                	or     dl,BYTE PTR [ebx]
    1647:	04 00                	add    al,0x0
    1649:	00 61 0a             	add    BYTE PTR [ecx+0xa],ah
    164c:	f5                   	cmc    
    164d:	02 00                	add    al,BYTE PTR [eax]
    164f:	00 97 0b 8c 03 00    	add    BYTE PTR [edi+0x38c0b],dl
    1655:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1658:	0b 62 03             	or     esp,DWORD PTR [edx+0x3]
    165b:	00 00                	add    BYTE PTR [eax],al
    165d:	64 01 0b             	add    DWORD PTR fs:[ebx],ecx
    1660:	f6 03 00             	test   BYTE PTR [ebx],0x0
    1663:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1666:	0b d7                	or     edx,edi
    1668:	02 00                	add    al,BYTE PTR [eax]
    166a:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    166d:	0b 2b                	or     ebp,DWORD PTR [ebx]
    166f:	04 00                	add    al,0x0
    1671:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1674:	0b 3a                	or     edi,DWORD PTR [edx]
    1676:	03 00                	add    eax,DWORD PTR [eax]
    1678:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    167b:	0b ac 02 00 00 69 01 	or     ebp,DWORD PTR [edx+eax*1+0x1690000]
    1682:	0b a3 03 00 00 70    	or     esp,DWORD PTR [ebx+0x70000003]
    1688:	01 0b                	add    DWORD PTR [ebx],ecx
    168a:	e5 02                	in     eax,0x2
    168c:	00 00                	add    BYTE PTR [eax],al
    168e:	71 01                	jno    1691 <sysEnter_Vector-0x12e96f>
    1690:	0b dc                	or     ebx,esp
    1692:	03 00                	add    eax,DWORD PTR [eax]
    1694:	00 00                	add    BYTE PTR [eax],al
    1696:	03 0b                	add    ecx,DWORD PTR [ebx]
    1698:	47                   	inc    edi
    1699:	03 00                	add    eax,DWORD PTR [eax]
    169b:	00 01                	add    BYTE PTR [ecx],al
    169d:	03 0b                	add    ecx,DWORD PTR [ebx]
    169f:	bb 02 00 00 02       	mov    ebx,0x2000002
    16a4:	03 0b                	add    ecx,DWORD PTR [ebx]
    16a6:	80 02 00             	add    BYTE PTR [edx],0x0
    16a9:	00 03                	add    BYTE PTR [ebx],al
    16ab:	03 0b                	add    ecx,DWORD PTR [ebx]
    16ad:	90                   	nop
    16ae:	02 00                	add    al,BYTE PTR [eax]
    16b0:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    16b3:	0b c7                	or     eax,edi
    16b5:	02 00                	add    al,BYTE PTR [eax]
    16b7:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
    16bd:	07                   	pop    es
    16be:	39 00                	cmp    DWORD PTR [eax],eax
    16c0:	00 00                	add    BYTE PTR [eax],al
    16c2:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    16c5:	e1 00                	loope  16c7 <sysEnter_Vector-0x12e939>
    16c7:	00 00                	add    BYTE PTR [eax],al
    16c9:	0c 04                	or     al,0x4
    16cb:	08 04 8c             	or     BYTE PTR [esp+ecx*4],al
    16ce:	00 00                	add    BYTE PTR [eax],al
    16d0:	00 0d 91 06 00 00    	add    BYTE PTR ds:0x691,cl
    16d6:	01 0c 40             	add    DWORD PTR [eax+eax*2],ecx
    16d9:	0f 00                	(bad)  
    16db:	30 6c 00 00          	xor    BYTE PTR [eax+eax*1+0x0],ch
    16df:	00 01                	add    BYTE PTR [ecx],al
    16e1:	9c                   	pushf  
    16e2:	0e                   	push   cs
    16e3:	b1 06                	mov    cl,0x6
    16e5:	00 00                	add    BYTE PTR [eax],al
    16e7:	01 16                	add    DWORD PTR [esi],edx
    16e9:	5a                   	pop    edx
    16ea:	00 00                	add    BYTE PTR [eax],al
    16ec:	00 ac 0f 00 30 87 00 	add    BYTE PTR [edi+ecx*1+0x873000],ch
    16f3:	00 00                	add    BYTE PTR [eax],al
    16f5:	01 9c 07 02 00 00 0f 	add    DWORD PTR [edi+eax*1+0xf000002],ebx
    16fc:	f1                   	icebp  
    16fd:	03 00                	add    eax,DWORD PTR [eax]
    16ff:	00 01                	add    BYTE PTR [ecx],al
    1701:	16                   	push   ss
    1702:	73 00                	jae    1704 <sysEnter_Vector-0x12e8fc>
    1704:	00 00                	add    BYTE PTR [eax],al
    1706:	02 91 00 10 43 06    	add    dl,BYTE PTR [ecx+0x6431000]
    170c:	00 00                	add    BYTE PTR [eax],al
    170e:	01 1a                	add    DWORD PTR [edx],ebx
    1710:	5a                   	pop    edx
    1711:	00 00                	add    BYTE PTR [eax],al
    1713:	00 02                	add    BYTE PTR [edx],al
    1715:	91                   	xchg   ecx,eax
    1716:	74 00                	je     1718 <sysEnter_Vector-0x12e8e8>
    1718:	11 de                	adc    esi,ebx
    171a:	06                   	push   es
    171b:	00 00                	add    BYTE PTR [eax],al
    171d:	01 2e                	add    DWORD PTR [esi],ebp
    171f:	33 10                	xor    edx,DWORD PTR [eax]
    1721:	00 30                	add    BYTE PTR [eax],dh
    1723:	39 00                	cmp    DWORD PTR [eax],eax
    1725:	00 00                	add    BYTE PTR [eax],al
    1727:	01 9c 43 02 00 00 0f 	add    DWORD PTR [ebx+eax*2+0xf000002],ebx
    172e:	3a 06                	cmp    al,BYTE PTR [esi]
    1730:	00 00                	add    BYTE PTR [eax],al
    1732:	01 2e                	add    DWORD PTR [esi],ebp
    1734:	b8 01 00 00 02       	mov    eax,0x2000001
    1739:	91                   	xchg   ecx,eax
    173a:	00 12                	add    BYTE PTR [edx],dl
    173c:	6d                   	ins    DWORD PTR es:[edi],dx
    173d:	70 00                	jo     173f <sysEnter_Vector-0x12e8c1>
    173f:	01 30                	add    DWORD PTR [eax],esi
    1741:	43                   	inc    ebx
    1742:	02 00                	add    al,BYTE PTR [eax]
    1744:	00 02                	add    BYTE PTR [edx],al
    1746:	91                   	xchg   ecx,eax
    1747:	74 13                	je     175c <sysEnter_Vector-0x12e8a4>
    1749:	9c                   	pushf  
    174a:	06                   	push   es
    174b:	00 00                	add    BYTE PTR [eax],al
    174d:	01 3a                	add    DWORD PTR [edx],edi
    174f:	5e                   	pop    esi
    1750:	10 00                	adc    BYTE PTR [eax],al
    1752:	30 00                	xor    BYTE PTR [eax],al
    1754:	08 04 dd 00 00 00 14 	or     BYTE PTR [ebx*8+0x14000000],al
    175b:	61                   	popa   
    175c:	06                   	push   es
    175d:	00 00                	add    BYTE PTR [eax],al
    175f:	01 40 b8             	add    DWORD PTR [eax-0x48],eax
    1762:	01 00                	add    DWORD PTR [eax],eax
    1764:	00 6c 10 00          	add    BYTE PTR [eax+edx*1+0x0],ch
    1768:	30 d4                	xor    ah,dl
    176a:	01 00                	add    DWORD PTR [eax],eax
    176c:	00 01                	add    BYTE PTR [ecx],al
    176e:	9c                   	pushf  
    176f:	b7 02                	mov    bh,0x2
    1771:	00 00                	add    BYTE PTR [eax],al
    1773:	0f f1 03             	psllw  mm0,QWORD PTR [ebx]
    1776:	00 00                	add    BYTE PTR [eax],al
    1778:	01 40 73             	add    DWORD PTR [eax+0x73],eax
    177b:	00 00                	add    BYTE PTR [eax],al
    177d:	00 02                	add    BYTE PTR [edx],al
    177f:	91                   	xchg   ecx,eax
    1780:	00 10                	add    BYTE PTR [eax],dl
    1782:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    1785:	00 01                	add    BYTE PTR [ecx],al
    1787:	42                   	inc    edx
    1788:	b8 01 00 00 02       	mov    eax,0x2000001
    178d:	91                   	xchg   ecx,eax
    178e:	60                   	pusha  
    178f:	10 7e 06             	adc    BYTE PTR [esi+0x6],bh
    1792:	00 00                	add    BYTE PTR [eax],al
    1794:	01 44 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],eax
    1798:	00 00                	add    BYTE PTR [eax],al
    179a:	02 91 6c 10 2d 06    	add    dl,BYTE PTR [ecx+0x62d106c]
    17a0:	00 00                	add    BYTE PTR [eax],al
    17a2:	01 45 5a             	add    DWORD PTR [ebp+0x5a],eax
    17a5:	00 00                	add    BYTE PTR [eax],al
    17a7:	00 02                	add    BYTE PTR [edx],al
    17a9:	91                   	xchg   ecx,eax
    17aa:	68 10 69 06 00       	push   0x66910
    17af:	00 01                	add    BYTE PTR [ecx],al
    17b1:	46                   	inc    esi
    17b2:	43                   	inc    ebx
    17b3:	02 00                	add    al,BYTE PTR [eax]
    17b5:	00 02                	add    BYTE PTR [edx],al
    17b7:	91                   	xchg   ecx,eax
    17b8:	64 10 a5 06 00 00 01 	adc    BYTE PTR fs:[ebp+0x1000006],ah
    17bf:	47                   	inc    edi
    17c0:	b7 02                	mov    bh,0x2
    17c2:	00 00                	add    BYTE PTR [eax],al
    17c4:	02 91 5c 00 08 04    	add    dl,BYTE PTR [ecx+0x408005c]
    17ca:	41                   	inc    ecx
    17cb:	00 00                	add    BYTE PTR [eax],al
    17cd:	00 14 95 06 00 00 01 	add    BYTE PTR [edx*4+0x1000006],dl
    17d4:	67 b8 01 00 00 40    	addr16 mov eax,0x40000001
    17da:	12 00                	adc    al,BYTE PTR [eax]
    17dc:	30 20                	xor    BYTE PTR [eax],ah
    17de:	00 00                	add    BYTE PTR [eax],al
    17e0:	00 01                	add    BYTE PTR [ecx],al
    17e2:	9c                   	pushf  
    17e3:	e5 02                	in     eax,0x2
    17e5:	00 00                	add    BYTE PTR [eax],al
    17e7:	0f f1 03             	psllw  mm0,QWORD PTR [ebx]
    17ea:	00 00                	add    BYTE PTR [eax],al
    17ec:	01 67 73             	add    DWORD PTR [edi+0x73],esp
    17ef:	00 00                	add    BYTE PTR [eax],al
    17f1:	00 02                	add    BYTE PTR [edx],al
    17f3:	91                   	xchg   ecx,eax
    17f4:	00 00                	add    BYTE PTR [eax],al
    17f6:	15 79 06 00 00       	adc    eax,0x679
    17fb:	01 6c 60 12          	add    DWORD PTR [eax+eiz*2+0x12],ebp
    17ff:	00 30                	add    BYTE PTR [eax],dh
    1801:	1b 00                	sbb    eax,DWORD PTR [eax]
    1803:	00 00                	add    BYTE PTR [eax],al
    1805:	01 9c 09 03 00 00 0f 	add    DWORD PTR [ecx+ecx*1+0xf000003],ebx
    180c:	3a 06                	cmp    al,BYTE PTR [esi]
    180e:	00 00                	add    BYTE PTR [eax],al
    1810:	01 6c b8 01          	add    DWORD PTR [eax+edi*4+0x1],ebp
    1814:	00 00                	add    BYTE PTR [eax],al
    1816:	02 91 00 00 0d 4b    	add    dl,BYTE PTR [ecx+0x4b0d0000]
    181c:	06                   	push   es
    181d:	00 00                	add    BYTE PTR [eax],al
    181f:	01 71 7b             	add    DWORD PTR [ecx+0x7b],esi
    1822:	12 00                	adc    al,BYTE PTR [eax]
    1824:	30 32                	xor    BYTE PTR [edx],dh
    1826:	00 00                	add    BYTE PTR [eax],al
    1828:	00 01                	add    BYTE PTR [ecx],al
    182a:	9c                   	pushf  
    182b:	16                   	push   ss
    182c:	4b                   	dec    ebx
    182d:	00 00                	add    BYTE PTR [eax],al
    182f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1832:	5a                   	pop    edx
    1833:	00 00                	add    BYTE PTR [eax],al
    1835:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    183b:	30 16                	xor    BYTE PTR [esi],dl
    183d:	af                   	scas   eax,DWORD PTR es:[edi]
    183e:	00 00                	add    BYTE PTR [eax],al
    1840:	00 04 35 5a 00 00 00 	add    BYTE PTR [esi*1+0x5a],al
    1847:	05 03 60 46 00       	add    eax,0x466003
    184c:	30 16                	xor    BYTE PTR [esi],dl
    184e:	5b                   	pop    ebx
    184f:	01 00                	add    DWORD PTR [eax],eax
    1851:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1854:	5a                   	pop    edx
    1855:	00 00                	add    BYTE PTR [eax],al
    1857:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    185d:	30 16                	xor    BYTE PTR [esi],dl
    185f:	54                   	push   esp
    1860:	00 00                	add    BYTE PTR [eax],al
    1862:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1865:	5a                   	pop    edx
    1866:	00 00                	add    BYTE PTR [eax],al
    1868:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    186e:	30 16                	xor    BYTE PTR [esi],dl
    1870:	28 00                	sub    BYTE PTR [eax],al
    1872:	00 00                	add    BYTE PTR [eax],al
    1874:	05 49 6f 03 00       	add    eax,0x36f49
    1879:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    187f:	30 08                	xor    BYTE PTR [eax],cl
    1881:	04 ba                	add    al,0xba
    1883:	01 00                	add    DWORD PTR [eax],eax
    1885:	00 00                	add    BYTE PTR [eax],al
    1887:	ea 01 00 00 04 00 11 	jmp    0x1100:0x4000001
    188e:	08 00                	or     BYTE PTR [eax],al
    1890:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1893:	f4                   	hlt    
    1894:	00 00                	add    BYTE PTR [eax],al
    1896:	00 0c f3             	add    BYTE PTR [ebx+esi*8],cl
    1899:	06                   	push   es
    189a:	00 00                	add    BYTE PTR [eax],al
    189c:	72 00                	jb     189e <sysEnter_Vector-0x12e762>
    189e:	00 00                	add    BYTE PTR [eax],al
    18a0:	b0 12                	mov    al,0x12
    18a2:	00 30                	add    BYTE PTR [eax],dh
    18a4:	9b                   	fwait
    18a5:	01 00                	add    DWORD PTR [eax],eax
    18a7:	00 11                	add    BYTE PTR [ecx],dl
    18a9:	0a 00                	or     al,BYTE PTR [eax]
    18ab:	00 02                	add    BYTE PTR [edx],al
    18ad:	01 08                	add    DWORD PTR [eax],ecx
    18af:	5b                   	pop    ebx
    18b0:	00 00                	add    BYTE PTR [eax],al
    18b2:	00 02                	add    BYTE PTR [edx],al
    18b4:	02 07                	add    al,BYTE PTR [edi]
    18b6:	0e                   	push   cs
    18b7:	00 00                	add    BYTE PTR [eax],al
    18b9:	00 02                	add    BYTE PTR [edx],al
    18bb:	04 07                	add    al,0x7
    18bd:	3e 00 00             	add    BYTE PTR ds:[eax],al
    18c0:	00 02                	add    BYTE PTR [edx],al
    18c2:	04 07                	add    al,0x7
    18c4:	39 00                	cmp    DWORD PTR [eax],eax
    18c6:	00 00                	add    BYTE PTR [eax],al
    18c8:	02 01                	add    al,BYTE PTR [ecx]
    18ca:	06                   	push   es
    18cb:	5d                   	pop    ebp
    18cc:	00 00                	add    BYTE PTR [eax],al
    18ce:	00 02                	add    BYTE PTR [edx],al
    18d0:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    18d6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    18dd:	02 08                	add    cl,BYTE PTR [eax]
    18df:	05 00 00 00 00       	add    eax,0x0
    18e4:	02 08                	add    cl,BYTE PTR [eax]
    18e6:	07                   	pop    es
    18e7:	34 00                	xor    al,0x0
    18e9:	00 00                	add    BYTE PTR [eax],al
    18eb:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    18f2:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    18f5:	e1 00                	loope  18f7 <sysEnter_Vector-0x12e709>
    18f7:	00 00                	add    BYTE PTR [eax],al
    18f9:	04 04                	add    al,0x4
    18fb:	05 04 7a 00 00       	add    eax,0x7a04
    1900:	00 02                	add    BYTE PTR [edx],al
    1902:	01 06                	add    DWORD PTR [esi],eax
    1904:	64 00 00             	add    BYTE PTR fs:[eax],al
    1907:	00 06                	add    BYTE PTR [esi],al
    1909:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    190f:	33 00                	xor    eax,DWORD PTR [eax]
    1911:	00 00                	add    BYTE PTR [eax],al
    1913:	05 04 92 00 00       	add    eax,0x9204
    1918:	00 07                	add    BYTE PTR [edi],al
    191a:	7a 00                	jp     191c <sysEnter_Vector-0x12e6e4>
    191c:	00 00                	add    BYTE PTR [eax],al
    191e:	06                   	push   es
    191f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    1920:	04 00                	add    al,0x0
    1922:	00 03                	add    BYTE PTR [ebx],al
    1924:	d8 33                	fdiv   DWORD PTR [ebx]
    1926:	00 00                	add    BYTE PTR [eax],al
    1928:	00 02                	add    BYTE PTR [edx],al
    192a:	0c 04                	or     al,0x4
    192c:	9b                   	fwait
    192d:	00 00                	add    BYTE PTR [eax],al
    192f:	00 02                	add    BYTE PTR [edx],al
    1931:	01 02                	add    DWORD PTR [edx],eax
    1933:	95                   	xchg   ebp,eax
    1934:	00 00                	add    BYTE PTR [eax],al
    1936:	00 08                	add    BYTE PTR [eax],cl
    1938:	05 07 00 00 01       	add    eax,0x1000007
    193d:	0a 72 00             	or     dh,BYTE PTR [edx+0x0]
    1940:	00 00                	add    BYTE PTR [eax],al
    1942:	b0 12                	mov    al,0x12
    1944:	00 30                	add    BYTE PTR [eax],dh
    1946:	9b                   	fwait
    1947:	01 00                	add    DWORD PTR [eax],eax
    1949:	00 01                	add    BYTE PTR [ecx],al
    194b:	9c                   	pushf  
    194c:	7a 01                	jp     194f <sysEnter_Vector-0x12e6b1>
    194e:	00 00                	add    BYTE PTR [eax],al
    1950:	09 00                	or     DWORD PTR [eax],eax
    1952:	07                   	pop    es
    1953:	00 00                	add    BYTE PTR [eax],al
    1955:	01 0a                	add    DWORD PTR [edx],ecx
    1957:	72 00                	jb     1959 <sysEnter_Vector-0x12e6a7>
    1959:	00 00                	add    BYTE PTR [eax],al
    195b:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    1961:	63 00                	arpl   WORD PTR [eax],ax
    1963:	01 0a                	add    DWORD PTR [edx],ecx
    1965:	7a 01                	jp     1968 <sysEnter_Vector-0x12e698>
    1967:	00 00                	add    BYTE PTR [eax],al
    1969:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    196f:	01 0a                	add    DWORD PTR [edx],ecx
    1971:	97                   	xchg   edi,eax
    1972:	00 00                	add    BYTE PTR [eax],al
    1974:	00 02                	add    BYTE PTR [edx],al
    1976:	91                   	xchg   ecx,eax
    1977:	08 0b                	or     BYTE PTR [ebx],cl
    1979:	64                   	fs
    197a:	77 00                	ja     197c <sysEnter_Vector-0x12e684>
    197c:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    197f:	00 00                	add    BYTE PTR [eax],al
    1981:	00 02                	add    BYTE PTR [edx],al
    1983:	91                   	xchg   ecx,eax
    1984:	5e                   	pop    esi
    1985:	0b 64 64 00          	or     esp,DWORD PTR [esp+eiz*2+0x0]
    1989:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    198c:	00 00                	add    BYTE PTR [eax],al
    198e:	00 02                	add    BYTE PTR [edx],al
    1990:	91                   	xchg   ecx,eax
    1991:	5f                   	pop    edi
    1992:	0c e2                	or     al,0xe2
    1994:	12 00                	adc    al,BYTE PTR [eax]
    1996:	30 7d 00             	xor    BYTE PTR [ebp+0x0],bh
    1999:	00 00                	add    BYTE PTR [eax],al
    199b:	31 01                	xor    DWORD PTR [ecx],eax
    199d:	00 00                	add    BYTE PTR [eax],al
    199f:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    19a2:	01 13                	add    DWORD PTR [ebx],edx
    19a4:	81 01 00 00 02 91    	add    DWORD PTR [ecx],0x91020000
    19aa:	74 0b                	je     19b7 <sysEnter_Vector-0x12e649>
    19ac:	74 00                	je     19ae <sysEnter_Vector-0x12e652>
    19ae:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    19b1:	01 00                	add    DWORD PTR [eax],eax
    19b3:	00 02                	add    BYTE PTR [edx],al
    19b5:	91                   	xchg   ecx,eax
    19b6:	70 00                	jo     19b8 <sysEnter_Vector-0x12e648>
    19b8:	0c 65                	or     al,0x65
    19ba:	13 00                	adc    eax,DWORD PTR [eax]
    19bc:	30 79 00             	xor    BYTE PTR [ecx+0x0],bh
    19bf:	00 00                	add    BYTE PTR [eax],al
    19c1:	57                   	push   edi
    19c2:	01 00                	add    DWORD PTR [eax],eax
    19c4:	00 0b                	add    BYTE PTR [ebx],cl
    19c6:	66                   	data16
    19c7:	00 01                	add    BYTE PTR [ecx],al
    19c9:	23 81 01 00 00 02    	and    eax,DWORD PTR [ecx+0x2000001]
    19cf:	91                   	xchg   ecx,eax
    19d0:	6c                   	ins    BYTE PTR es:[edi],dx
    19d1:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    19d5:	24 8c                	and    al,0x8c
    19d7:	01 00                	add    DWORD PTR [eax],eax
    19d9:	00 02                	add    BYTE PTR [edx],al
    19db:	91                   	xchg   ecx,eax
    19dc:	68 00 0d de 13       	push   0x13de0d00
    19e1:	00 30                	add    BYTE PTR [eax],dh
    19e3:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    19e6:	00 0b                	add    BYTE PTR [ebx],cl
    19e8:	66                   	data16
    19e9:	00 01                	add    BYTE PTR [ecx],al
    19eb:	32 8c 00 00 00 02 91 	xor    cl,BYTE PTR [eax+eax*1-0x6efe0000]
    19f2:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    19f7:	33 74 00 00          	xor    esi,DWORD PTR [eax+eax*1+0x0]
    19fb:	00 02                	add    BYTE PTR [edx],al
    19fd:	91                   	xchg   ecx,eax
    19fe:	60                   	pusha  
    19ff:	00 00                	add    BYTE PTR [eax],al
    1a01:	05 04 80 01 00       	add    eax,0x18004
    1a06:	00 0e                	add    BYTE PTR [esi],cl
    1a08:	05 04 87 01 00       	add    eax,0x18704
    1a0d:	00 07                	add    BYTE PTR [edi],al
    1a0f:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    1a15:	81 00 00 00 0f 4b    	add    DWORD PTR [eax],0x4b0f0000
    1a1b:	00 00                	add    BYTE PTR [eax],al
    1a1d:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1a20:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1a26:	5c                   	pop    esp
    1a27:	46                   	inc    esi
    1a28:	00 30                	add    BYTE PTR [eax],dh
    1a2a:	0f af 00             	imul   eax,DWORD PTR [eax]
    1a2d:	00 00                	add    BYTE PTR [eax],al
    1a2f:	04 35                	add    al,0x35
    1a31:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1a37:	60                   	pusha  
    1a38:	46                   	inc    esi
    1a39:	00 30                	add    BYTE PTR [eax],dh
    1a3b:	0f 5b 01             	cvtdq2ps xmm0,XMMWORD PTR [ecx]
    1a3e:	00 00                	add    BYTE PTR [eax],al
    1a40:	04 36                	add    al,0x36
    1a42:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1a48:	58                   	pop    eax
    1a49:	46                   	inc    esi
    1a4a:	00 30                	add    BYTE PTR [eax],dh
    1a4c:	0f 54 00             	andps  xmm0,XMMWORD PTR [eax]
    1a4f:	00 00                	add    BYTE PTR [eax],al
    1a51:	04 37                	add    al,0x37
    1a53:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1a59:	68 46 00 30 0f       	push   0xf300046
    1a5e:	28 00                	sub    BYTE PTR [eax],al
    1a60:	00 00                	add    BYTE PTR [eax],al
    1a62:	05 49 e7 01 00       	add    eax,0x1e749
    1a67:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    1a6d:	30 05 04 74 00 00    	xor    BYTE PTR ds:0x7404,al
    1a73:	00 00                	add    BYTE PTR [eax],al
    1a75:	eb 01                	jmp    1a78 <sysEnter_Vector-0x12e588>
    1a77:	00 00                	add    BYTE PTR [eax],al
    1a79:	04 00                	add    al,0x0
    1a7b:	d2 08                	ror    BYTE PTR [eax],cl
    1a7d:	00 00                	add    BYTE PTR [eax],al
    1a7f:	04 01                	add    al,0x1
    1a81:	f4                   	hlt    
    1a82:	00 00                	add    BYTE PTR [eax],al
    1a84:	00 0c 18             	add    BYTE PTR [eax+ebx*1],cl
    1a87:	07                   	pop    es
    1a88:	00 00                	add    BYTE PTR [eax],al
    1a8a:	72 00                	jb     1a8c <sysEnter_Vector-0x12e574>
    1a8c:	00 00                	add    BYTE PTR [eax],al
    1a8e:	4c                   	dec    esp
    1a8f:	14 00                	adc    al,0x0
    1a91:	30 e7                	xor    bh,ah
    1a93:	00 00                	add    BYTE PTR [eax],al
    1a95:	00 f8                	add    al,bh
    1a97:	0a 00                	or     al,BYTE PTR [eax]
    1a99:	00 02                	add    BYTE PTR [edx],al
    1a9b:	01 06                	add    DWORD PTR [esi],eax
    1a9d:	64 00 00             	add    BYTE PTR fs:[eax],al
    1aa0:	00 02                	add    BYTE PTR [edx],al
    1aa2:	01 06                	add    DWORD PTR [esi],eax
    1aa4:	5d                   	pop    ebp
    1aa5:	00 00                	add    BYTE PTR [eax],al
    1aa7:	00 02                	add    BYTE PTR [edx],al
    1aa9:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1aaf:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1ab6:	02 08                	add    cl,BYTE PTR [eax]
    1ab8:	05 00 00 00 00       	add    eax,0x0
    1abd:	04 71                	add    al,0x71
    1abf:	06                   	push   es
    1ac0:	00 00                	add    BYTE PTR [eax],al
    1ac2:	02 2e                	add    ch,BYTE PTR [esi]
    1ac4:	53                   	push   ebx
    1ac5:	00 00                	add    BYTE PTR [eax],al
    1ac7:	00 02                	add    BYTE PTR [edx],al
    1ac9:	01 08                	add    DWORD PTR [eax],ecx
    1acb:	5b                   	pop    ebx
    1acc:	00 00                	add    BYTE PTR [eax],al
    1ace:	00 04 32             	add    BYTE PTR [edx+esi*1],al
    1ad1:	07                   	pop    es
    1ad2:	00 00                	add    BYTE PTR [eax],al
    1ad4:	02 31                	add    dh,BYTE PTR [ecx]
    1ad6:	65 00 00             	add    BYTE PTR gs:[eax],al
    1ad9:	00 02                	add    BYTE PTR [edx],al
    1adb:	02 07                	add    al,BYTE PTR [edi]
    1add:	0e                   	push   cs
    1ade:	00 00                	add    BYTE PTR [eax],al
    1ae0:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1ae3:	00 00                	add    BYTE PTR [eax],al
    1ae5:	00 02                	add    BYTE PTR [edx],al
    1ae7:	34 77                	xor    al,0x77
    1ae9:	00 00                	add    BYTE PTR [eax],al
    1aeb:	00 02                	add    BYTE PTR [edx],al
    1aed:	04 07                	add    al,0x7
    1aef:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1af2:	00 02                	add    BYTE PTR [edx],al
    1af4:	08 07                	or     BYTE PTR [edi],al
    1af6:	34 00                	xor    al,0x0
    1af8:	00 00                	add    BYTE PTR [eax],al
    1afa:	04 a4                	add    al,0xa4
    1afc:	04 00                	add    al,0x0
    1afe:	00 03                	add    BYTE PTR [ebx],al
    1b00:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    1b03:	00 00                	add    BYTE PTR [eax],al
    1b05:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1b0c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1b0f:	9b                   	fwait
    1b10:	00 00                	add    BYTE PTR [eax],al
    1b12:	00 02                	add    BYTE PTR [edx],al
    1b14:	01 02                	add    DWORD PTR [edx],eax
    1b16:	95                   	xchg   ebp,eax
    1b17:	00 00                	add    BYTE PTR [eax],al
    1b19:	00 02                	add    BYTE PTR [edx],al
    1b1b:	04 07                	add    al,0x7
    1b1d:	39 00                	cmp    DWORD PTR [eax],eax
    1b1f:	00 00                	add    BYTE PTR [eax],al
    1b21:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1b24:	e1 00                	loope  1b26 <sysEnter_Vector-0x12e4da>
    1b26:	00 00                	add    BYTE PTR [eax],al
    1b28:	05 04 06 04 25       	add    eax,0x25040604
    1b2d:	00 00                	add    BYTE PTR [eax],al
    1b2f:	00 07                	add    BYTE PTR [edi],al
    1b31:	2a 07                	sub    al,BYTE PTR [edi]
    1b33:	00 00                	add    BYTE PTR [eax],al
    1b35:	01 08                	add    DWORD PTR [eax],ecx
    1b37:	b3 00                	mov    bl,0x0
    1b39:	00 00                	add    BYTE PTR [eax],al
    1b3b:	4c                   	dec    esp
    1b3c:	14 00                	adc    al,0x0
    1b3e:	30 c7                	xor    bh,al
    1b40:	00 00                	add    BYTE PTR [eax],al
    1b42:	00 01                	add    BYTE PTR [ecx],al
    1b44:	9c                   	pushf  
    1b45:	3e 01 00             	add    DWORD PTR ds:[eax],eax
    1b48:	00 08                	add    BYTE PTR [eax],cl
    1b4a:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1b4d:	01 08                	add    DWORD PTR [eax],ecx
    1b4f:	b3 00                	mov    bl,0x0
    1b51:	00 00                	add    BYTE PTR [eax],al
    1b53:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1b59:	6c                   	ins    BYTE PTR es:[edi],dx
    1b5a:	00 01                	add    BYTE PTR [ecx],al
    1b5c:	08 3a                	or     BYTE PTR [edx],bh
    1b5e:	00 00                	add    BYTE PTR [eax],al
    1b60:	00 02                	add    BYTE PTR [edx],al
    1b62:	91                   	xchg   ecx,eax
    1b63:	04 08                	add    al,0x8
    1b65:	6c                   	ins    BYTE PTR es:[edi],dx
    1b66:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1b68:	00 01                	add    BYTE PTR [ecx],al
    1b6a:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    1b70:	91                   	xchg   ecx,eax
    1b71:	08 09                	or     BYTE PTR [ecx],cl
    1b73:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1b76:	0a 3e                	or     bh,BYTE PTR [esi]
    1b78:	01 00                	add    DWORD PTR [eax],eax
    1b7a:	00 02                	add    BYTE PTR [edx],al
    1b7c:	91                   	xchg   ecx,eax
    1b7d:	74 09                	je     1b88 <sysEnter_Vector-0x12e478>
    1b7f:	65 00 01             	add    BYTE PTR gs:[ecx],al
    1b82:	0b 44 01 00          	or     eax,DWORD PTR [ecx+eax*1+0x0]
    1b86:	00 02                	add    BYTE PTR [edx],al
    1b88:	91                   	xchg   ecx,eax
    1b89:	70 0a                	jo     1b95 <sysEnter_Vector-0x12e46b>
    1b8b:	0c 07                	or     al,0x7
    1b8d:	00 00                	add    BYTE PTR [eax],al
    1b8f:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    1b92:	00 00                	add    BYTE PTR [eax],al
    1b94:	00 02                	add    BYTE PTR [edx],al
    1b96:	91                   	xchg   ecx,eax
    1b97:	6a 09                	push   0x9
    1b99:	66                   	data16
    1b9a:	00 01                	add    BYTE PTR [ecx],al
    1b9c:	0d 4a 01 00 00       	or     eax,0x14a
    1ba1:	02 91 6c 0a 25 07    	add    dl,BYTE PTR [ecx+0x7250a6c]
    1ba7:	00 00                	add    BYTE PTR [eax],al
    1ba9:	01 0e                	add    DWORD PTR [esi],ecx
    1bab:	6c                   	ins    BYTE PTR es:[edi],dx
    1bac:	00 00                	add    BYTE PTR [eax],al
    1bae:	00 02                	add    BYTE PTR [edx],al
    1bb0:	91                   	xchg   ecx,eax
    1bb1:	64 00 06             	add    BYTE PTR fs:[esi],al
    1bb4:	04 48                	add    al,0x48
    1bb6:	00 00                	add    BYTE PTR [eax],al
    1bb8:	00 06                	add    BYTE PTR [esi],al
    1bba:	04 5a                	add    al,0x5a
    1bbc:	00 00                	add    BYTE PTR [eax],al
    1bbe:	00 06                	add    BYTE PTR [esi],al
    1bc0:	04 6c                	add    al,0x6c
    1bc2:	00 00                	add    BYTE PTR [eax],al
    1bc4:	00 0b                	add    BYTE PTR [ebx],cl
    1bc6:	11 07                	adc    DWORD PTR [edi],eax
    1bc8:	00 00                	add    BYTE PTR [eax],al
    1bca:	01 1f                	add    DWORD PTR [edi],ebx
    1bcc:	b3 00                	mov    bl,0x0
    1bce:	00 00                	add    BYTE PTR [eax],al
    1bd0:	13 15 00 30 20 00    	adc    edx,DWORD PTR ds:0x203000
    1bd6:	00 00                	add    BYTE PTR [eax],al
    1bd8:	01 9c 93 01 00 00 08 	add    DWORD PTR [ebx+edx*4+0x8000001],ebx
    1bdf:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1be2:	01 1f                	add    DWORD PTR [edi],ebx
    1be4:	b3 00                	mov    bl,0x0
    1be6:	00 00                	add    BYTE PTR [eax],al
    1be8:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1bee:	6c                   	ins    BYTE PTR es:[edi],dx
    1bef:	00 01                	add    BYTE PTR [ecx],al
    1bf1:	1f                   	pop    ds
    1bf2:	3a 00                	cmp    al,BYTE PTR [eax]
    1bf4:	00 00                	add    BYTE PTR [eax],al
    1bf6:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    1bfc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1bfd:	00 01                	add    BYTE PTR [ecx],al
    1bff:	1f                   	pop    ds
    1c00:	85 00                	test   DWORD PTR [eax],eax
    1c02:	00 00                	add    BYTE PTR [eax],al
    1c04:	02 91 08 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0008]
    1c0a:	00 00                	add    BYTE PTR [eax],al
    1c0c:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1c0f:	6c                   	ins    BYTE PTR es:[edi],dx
    1c10:	00 00                	add    BYTE PTR [eax],al
    1c12:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    1c18:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    1c1b:	00 00                	add    BYTE PTR [eax],al
    1c1d:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    1c24:	05 03 60 46 00       	add    eax,0x466003
    1c29:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    1c2c:	01 00                	add    DWORD PTR [eax],eax
    1c2e:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1c31:	6c                   	ins    BYTE PTR es:[edi],dx
    1c32:	00 00                	add    BYTE PTR [eax],al
    1c34:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    1c3a:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    1c3d:	00 00                	add    BYTE PTR [eax],al
    1c3f:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1c42:	6c                   	ins    BYTE PTR es:[edi],dx
    1c43:	00 00                	add    BYTE PTR [eax],al
    1c45:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    1c4b:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    1c4e:	00 00                	add    BYTE PTR [eax],al
    1c50:	00 05 49 e8 01 00    	add    BYTE PTR ds:0x1e849,al
    1c56:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    1c5c:	30 06                	xor    BYTE PTR [esi],al
    1c5e:	04 b5                	add    al,0xb5
    1c60:	00 00                	add    BYTE PTR [eax],al
    1c62:	00 00                	add    BYTE PTR [eax],al
    1c64:	75 01                	jne    1c67 <sysEnter_Vector-0x12e399>
    1c66:	00 00                	add    BYTE PTR [eax],al
    1c68:	04 00                	add    al,0x0
    1c6a:	8f 09                	(bad)  
    1c6c:	00 00                	add    BYTE PTR [eax],al
    1c6e:	04 01                	add    al,0x1
    1c70:	f4                   	hlt    
    1c71:	00 00                	add    BYTE PTR [eax],al
    1c73:	00 0c 57             	add    BYTE PTR [edi+edx*2],cl
    1c76:	07                   	pop    es
    1c77:	00 00                	add    BYTE PTR [eax],al
    1c79:	72 00                	jb     1c7b <sysEnter_Vector-0x12e385>
    1c7b:	00 00                	add    BYTE PTR [eax],al
    1c7d:	34 15                	xor    al,0x15
    1c7f:	00 30                	add    BYTE PTR [eax],dh
    1c81:	14 00                	adc    al,0x0
    1c83:	00 00                	add    BYTE PTR [eax],al
    1c85:	c6                   	(bad)  
    1c86:	0b 00                	or     eax,DWORD PTR [eax]
    1c88:	00 02                	add    BYTE PTR [edx],al
    1c8a:	01 06                	add    DWORD PTR [esi],eax
    1c8c:	64 00 00             	add    BYTE PTR fs:[eax],al
    1c8f:	00 02                	add    BYTE PTR [edx],al
    1c91:	01 06                	add    DWORD PTR [esi],eax
    1c93:	5d                   	pop    ebp
    1c94:	00 00                	add    BYTE PTR [eax],al
    1c96:	00 02                	add    BYTE PTR [edx],al
    1c98:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1c9e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1ca5:	02 08                	add    cl,BYTE PTR [eax]
    1ca7:	05 00 00 00 00       	add    eax,0x0
    1cac:	02 01                	add    al,BYTE PTR [ecx]
    1cae:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1cb1:	00 00                	add    BYTE PTR [eax],al
    1cb3:	02 02                	add    al,BYTE PTR [edx]
    1cb5:	07                   	pop    es
    1cb6:	0e                   	push   cs
    1cb7:	00 00                	add    BYTE PTR [eax],al
    1cb9:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1cbc:	00 00                	add    BYTE PTR [eax],al
    1cbe:	00 02                	add    BYTE PTR [edx],al
    1cc0:	34 61                	xor    al,0x61
    1cc2:	00 00                	add    BYTE PTR [eax],al
    1cc4:	00 02                	add    BYTE PTR [edx],al
    1cc6:	04 07                	add    al,0x7
    1cc8:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1ccb:	00 02                	add    BYTE PTR [edx],al
    1ccd:	08 07                	or     BYTE PTR [edi],al
    1ccf:	34 00                	xor    al,0x0
    1cd1:	00 00                	add    BYTE PTR [eax],al
    1cd3:	04 a4                	add    al,0xa4
    1cd5:	04 00                	add    al,0x0
    1cd7:	00 03                	add    BYTE PTR [ebx],al
    1cd9:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1cdc:	00 00                	add    BYTE PTR [eax],al
    1cde:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1ce5:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1ce8:	9b                   	fwait
    1ce9:	00 00                	add    BYTE PTR [eax],al
    1ceb:	00 02                	add    BYTE PTR [edx],al
    1ced:	01 02                	add    DWORD PTR [edx],eax
    1cef:	95                   	xchg   ebp,eax
    1cf0:	00 00                	add    BYTE PTR [eax],al
    1cf2:	00 02                	add    BYTE PTR [edx],al
    1cf4:	04 07                	add    al,0x7
    1cf6:	39 00                	cmp    DWORD PTR [eax],eax
    1cf8:	00 00                	add    BYTE PTR [eax],al
    1cfa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1cfd:	e1 00                	loope  1cff <sysEnter_Vector-0x12e301>
    1cff:	00 00                	add    BYTE PTR [eax],al
    1d01:	05 04 06 04 25       	add    eax,0x25040604
    1d06:	00 00                	add    BYTE PTR [eax],al
    1d08:	00 04 40             	add    BYTE PTR [eax+eax*2],al
    1d0b:	07                   	pop    es
    1d0c:	00 00                	add    BYTE PTR [eax],al
    1d0e:	04 15                	add    al,0x15
    1d10:	7a 00                	jp     1d12 <sysEnter_Vector-0x12e2ee>
    1d12:	00 00                	add    BYTE PTR [eax],al
    1d14:	07                   	pop    es
    1d15:	52                   	push   edx
    1d16:	07                   	pop    es
    1d17:	00 00                	add    BYTE PTR [eax],al
    1d19:	01 09                	add    DWORD PTR [ecx],ecx
    1d1b:	9d                   	popf   
    1d1c:	00 00                	add    BYTE PTR [eax],al
    1d1e:	00 34 15 00 30 14 00 	add    BYTE PTR [edx*1+0x143000],dh
    1d25:	00 00                	add    BYTE PTR [eax],al
    1d27:	01 9c 1d 01 00 00 08 	add    DWORD PTR [ebp+ebx*1+0x8000001],ebx
    1d2e:	3b 07                	cmp    eax,DWORD PTR [edi]
    1d30:	00 00                	add    BYTE PTR [eax],al
    1d32:	01 09                	add    DWORD PTR [ecx],ecx
    1d34:	9d                   	popf   
    1d35:	00 00                	add    BYTE PTR [eax],al
    1d37:	00 02                	add    BYTE PTR [edx],al
    1d39:	91                   	xchg   ecx,eax
    1d3a:	00 09                	add    BYTE PTR [ecx],cl
    1d3c:	6c                   	ins    BYTE PTR es:[edi],dx
    1d3d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1d3f:	00 01                	add    BYTE PTR [ecx],al
    1d41:	09 6f 00             	or     DWORD PTR [edi+0x0],ebp
    1d44:	00 00                	add    BYTE PTR [eax],al
    1d46:	02 91 04 08 46 07    	add    dl,BYTE PTR [ecx+0x7460804]
    1d4c:	00 00                	add    BYTE PTR [eax],al
    1d4e:	01 09                	add    DWORD PTR [ecx],ecx
    1d50:	3a 00                	cmp    al,BYTE PTR [eax]
    1d52:	00 00                	add    BYTE PTR [eax],al
    1d54:	02 91 08 08 7c 08    	add    dl,BYTE PTR [ecx+0x87c0808]
    1d5a:	00 00                	add    BYTE PTR [eax],al
    1d5c:	01 09                	add    DWORD PTR [ecx],ecx
    1d5e:	3a 00                	cmp    al,BYTE PTR [eax]
    1d60:	00 00                	add    BYTE PTR [eax],al
    1d62:	02 91 0c 09 66 64    	add    dl,BYTE PTR [ecx+0x6466090c]
    1d68:	00 01                	add    BYTE PTR [ecx],al
    1d6a:	09 3a                	or     DWORD PTR [edx],edi
    1d6c:	00 00                	add    BYTE PTR [eax],al
    1d6e:	00 02                	add    BYTE PTR [edx],al
    1d70:	91                   	xchg   ecx,eax
    1d71:	10 08                	adc    BYTE PTR [eax],cl
    1d73:	4b                   	dec    ebx
    1d74:	07                   	pop    es
    1d75:	00 00                	add    BYTE PTR [eax],al
    1d77:	01 09                	add    DWORD PTR [ecx],ecx
    1d79:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1d7a:	00 00                	add    BYTE PTR [eax],al
    1d7c:	00 02                	add    BYTE PTR [edx],al
    1d7e:	91                   	xchg   ecx,eax
    1d7f:	14 00                	adc    al,0x0
    1d81:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    1d84:	00 00                	add    BYTE PTR [eax],al
    1d86:	05 34 56 00 00       	add    eax,0x5634
    1d8b:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    1d91:	30 0a                	xor    BYTE PTR [edx],cl
    1d93:	af                   	scas   eax,DWORD PTR es:[edi]
    1d94:	00 00                	add    BYTE PTR [eax],al
    1d96:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    1d9c:	00 05 03 60 46 00    	add    BYTE PTR ds:0x466003,al
    1da2:	30 0a                	xor    BYTE PTR [edx],cl
    1da4:	5b                   	pop    ebx
    1da5:	01 00                	add    DWORD PTR [eax],eax
    1da7:	00 05 36 56 00 00    	add    BYTE PTR ds:0x5636,al
    1dad:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    1db3:	30 0a                	xor    BYTE PTR [edx],cl
    1db5:	54                   	push   esp
    1db6:	00 00                	add    BYTE PTR [eax],al
    1db8:	00 05 37 56 00 00    	add    BYTE PTR ds:0x5637,al
    1dbe:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    1dc4:	30 0a                	xor    BYTE PTR [edx],cl
    1dc6:	28 00                	sub    BYTE PTR [eax],al
    1dc8:	00 00                	add    BYTE PTR [eax],al
    1dca:	06                   	push   es
    1dcb:	49                   	dec    ecx
    1dcc:	72 01                	jb     1dcf <sysEnter_Vector-0x12e231>
    1dce:	00 00                	add    BYTE PTR [eax],al
    1dd0:	05 03 64 46 00       	add    eax,0x466403
    1dd5:	30 06                	xor    BYTE PTR [esi],al
    1dd7:	04 9f                	add    al,0x9f
    1dd9:	00 00                	add    BYTE PTR [eax],al
    1ddb:	00 00                	add    BYTE PTR [eax],al
    1ddd:	eb 01                	jmp    1de0 <sysEnter_Vector-0x12e220>
    1ddf:	00 00                	add    BYTE PTR [eax],al
    1de1:	04 00                	add    al,0x0
    1de3:	21 0a                	and    DWORD PTR [edx],ecx
    1de5:	00 00                	add    BYTE PTR [eax],al
    1de7:	04 01                	add    al,0x1
    1de9:	f4                   	hlt    
    1dea:	00 00                	add    BYTE PTR [eax],al
    1dec:	00 0c 62             	add    BYTE PTR [edx+eiz*2],cl
    1def:	07                   	pop    es
    1df0:	00 00                	add    BYTE PTR [eax],al
    1df2:	72 00                	jb     1df4 <sysEnter_Vector-0x12e20c>
    1df4:	00 00                	add    BYTE PTR [eax],al
    1df6:	48                   	dec    eax
    1df7:	15 00 30 29 00       	adc    eax,0x293000
    1dfc:	00 00                	add    BYTE PTR [eax],al
    1dfe:	8a 0c 00             	mov    cl,BYTE PTR [eax+eax*1]
    1e01:	00 02                	add    BYTE PTR [edx],al
    1e03:	01 06                	add    DWORD PTR [esi],eax
    1e05:	64 00 00             	add    BYTE PTR fs:[eax],al
    1e08:	00 02                	add    BYTE PTR [edx],al
    1e0a:	01 06                	add    DWORD PTR [esi],eax
    1e0c:	5d                   	pop    ebp
    1e0d:	00 00                	add    BYTE PTR [eax],al
    1e0f:	00 02                	add    BYTE PTR [edx],al
    1e11:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1e17:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1e1e:	02 08                	add    cl,BYTE PTR [eax]
    1e20:	05 00 00 00 00       	add    eax,0x0
    1e25:	02 01                	add    al,BYTE PTR [ecx]
    1e27:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1e2a:	00 00                	add    BYTE PTR [eax],al
    1e2c:	02 02                	add    al,BYTE PTR [edx]
    1e2e:	07                   	pop    es
    1e2f:	0e                   	push   cs
    1e30:	00 00                	add    BYTE PTR [eax],al
    1e32:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1e35:	00 00                	add    BYTE PTR [eax],al
    1e37:	00 02                	add    BYTE PTR [edx],al
    1e39:	34 61                	xor    al,0x61
    1e3b:	00 00                	add    BYTE PTR [eax],al
    1e3d:	00 02                	add    BYTE PTR [edx],al
    1e3f:	04 07                	add    al,0x7
    1e41:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1e44:	00 02                	add    BYTE PTR [edx],al
    1e46:	08 07                	or     BYTE PTR [edi],al
    1e48:	34 00                	xor    al,0x0
    1e4a:	00 00                	add    BYTE PTR [eax],al
    1e4c:	04 ab                	add    al,0xab
    1e4e:	04 00                	add    al,0x0
    1e50:	00 02                	add    BYTE PTR [edx],al
    1e52:	56                   	push   esi
    1e53:	61                   	popa   
    1e54:	00 00                	add    BYTE PTR [eax],al
    1e56:	00 02                	add    BYTE PTR [edx],al
    1e58:	04 05                	add    al,0x5
    1e5a:	05 00 00 00 02       	add    eax,0x2000000
    1e5f:	0c 04                	or     al,0x4
    1e61:	9b                   	fwait
    1e62:	00 00                	add    BYTE PTR [eax],al
    1e64:	00 02                	add    BYTE PTR [edx],al
    1e66:	01 02                	add    DWORD PTR [edx],eax
    1e68:	95                   	xchg   ebp,eax
    1e69:	00 00                	add    BYTE PTR [eax],al
    1e6b:	00 05 17 03 00 00    	add    BYTE PTR ds:0x317,al
    1e71:	04 61                	add    al,0x61
    1e73:	00 00                	add    BYTE PTR [eax],al
    1e75:	00 05 15 51 01 00    	add    BYTE PTR ds:0x15115,al
    1e7b:	00 06                	add    BYTE PTR [esi],al
    1e7d:	7c 03                	jl     1e82 <sysEnter_Vector-0x12e17e>
    1e7f:	00 00                	add    BYTE PTR [eax],al
    1e81:	00 06                	add    BYTE PTR [esi],al
    1e83:	b4 03                	mov    ah,0x3
    1e85:	00 00                	add    BYTE PTR [eax],al
    1e87:	01 06                	add    DWORD PTR [esi],eax
    1e89:	73 02                	jae    1e8d <sysEnter_Vector-0x12e173>
    1e8b:	00 00                	add    BYTE PTR [eax],al
    1e8d:	02 06                	add    al,BYTE PTR [esi]
    1e8f:	09 03                	or     DWORD PTR [ebx],eax
    1e91:	00 00                	add    BYTE PTR [eax],al
    1e93:	03 06                	add    eax,DWORD PTR [esi]
    1e95:	53                   	push   ebx
    1e96:	02 00                	add    al,BYTE PTR [eax]
    1e98:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    1e9b:	ce                   	into   
    1e9c:	03 00                	add    eax,DWORD PTR [eax]
    1e9e:	00 05 06 2d 03 00    	add    BYTE PTR ds:0x32d06,al
    1ea4:	00 06                	add    BYTE PTR [esi],al
    1ea6:	06                   	push   es
    1ea7:	66                   	data16
    1ea8:	02 00                	add    al,BYTE PTR [eax]
    1eaa:	00 07                	add    BYTE PTR [edi],al
    1eac:	06                   	push   es
    1ead:	04 04                	add    al,0x4
    1eaf:	00 00                	add    BYTE PTR [eax],al
    1eb1:	4f                   	dec    edi
    1eb2:	06                   	push   es
    1eb3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1eb4:	03 00                	add    eax,DWORD PTR [eax]
    1eb6:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    1eb9:	13 04 00             	adc    eax,DWORD PTR [eax+eax*1]
    1ebc:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    1ebf:	f5                   	cmc    
    1ec0:	02 00                	add    al,BYTE PTR [eax]
    1ec2:	00 97 07 8c 03 00    	add    BYTE PTR [edi+0x38c07],dl
    1ec8:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1ecb:	07                   	pop    es
    1ecc:	62 03                	bound  eax,QWORD PTR [ebx]
    1ece:	00 00                	add    BYTE PTR [eax],al
    1ed0:	64 01 07             	add    DWORD PTR fs:[edi],eax
    1ed3:	f6 03 00             	test   BYTE PTR [ebx],0x0
    1ed6:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1ed9:	07                   	pop    es
    1eda:	d7                   	xlat   BYTE PTR ds:[ebx]
    1edb:	02 00                	add    al,BYTE PTR [eax]
    1edd:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    1ee0:	07                   	pop    es
    1ee1:	2b 04 00             	sub    eax,DWORD PTR [eax+eax*1]
    1ee4:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1ee7:	07                   	pop    es
    1ee8:	3a 03                	cmp    al,BYTE PTR [ebx]
    1eea:	00 00                	add    BYTE PTR [eax],al
    1eec:	68 01 07 ac 02       	push   0x2ac0701
    1ef1:	00 00                	add    BYTE PTR [eax],al
    1ef3:	69 01 07 a3 03 00    	imul   eax,DWORD PTR [ecx],0x3a307
    1ef9:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    1efc:	07                   	pop    es
    1efd:	e5 02                	in     eax,0x2
    1eff:	00 00                	add    BYTE PTR [eax],al
    1f01:	71 01                	jno    1f04 <sysEnter_Vector-0x12e0fc>
    1f03:	07                   	pop    es
    1f04:	dc 03                	fadd   QWORD PTR [ebx]
    1f06:	00 00                	add    BYTE PTR [eax],al
    1f08:	00 03                	add    BYTE PTR [ebx],al
    1f0a:	07                   	pop    es
    1f0b:	47                   	inc    edi
    1f0c:	03 00                	add    eax,DWORD PTR [eax]
    1f0e:	00 01                	add    BYTE PTR [ecx],al
    1f10:	03 07                	add    eax,DWORD PTR [edi]
    1f12:	bb 02 00 00 02       	mov    ebx,0x2000002
    1f17:	03 07                	add    eax,DWORD PTR [edi]
    1f19:	80 02 00             	add    BYTE PTR [edx],0x0
    1f1c:	00 03                	add    BYTE PTR [ebx],al
    1f1e:	03 07                	add    eax,DWORD PTR [edi]
    1f20:	90                   	nop
    1f21:	02 00                	add    al,BYTE PTR [eax]
    1f23:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    1f26:	07                   	pop    es
    1f27:	c7 02 00 00 05 03    	mov    DWORD PTR [edx],0x3050000
    1f2d:	00 02                	add    BYTE PTR [edx],al
    1f2f:	04 07                	add    al,0x7
    1f31:	39 00                	cmp    DWORD PTR [eax],eax
    1f33:	00 00                	add    BYTE PTR [eax],al
    1f35:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1f38:	e1 00                	loope  1f3a <sysEnter_Vector-0x12e0c6>
    1f3a:	00 00                	add    BYTE PTR [eax],al
    1f3c:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
    1f43:	6d                   	ins    DWORD PTR es:[edi],dx
    1f44:	07                   	pop    es
    1f45:	00 00                	add    BYTE PTR [eax],al
    1f47:	01 0a                	add    DWORD PTR [edx],ecx
    1f49:	3a 00                	cmp    al,BYTE PTR [eax]
    1f4b:	00 00                	add    BYTE PTR [eax],al
    1f4d:	48                   	dec    eax
    1f4e:	15 00 30 29 00       	adc    eax,0x293000
    1f53:	00 00                	add    BYTE PTR [eax],al
    1f55:	01 9c 8d 01 00 00 0a 	add    DWORD PTR [ebp+ecx*4+0xa000001],ebx
    1f5c:	72 07                	jb     1f65 <sysEnter_Vector-0x12e09b>
    1f5e:	00 00                	add    BYTE PTR [eax],al
    1f60:	01 0a                	add    DWORD PTR [edx],ecx
    1f62:	8d 01                	lea    eax,[ecx]
    1f64:	00 00                	add    BYTE PTR [eax],al
    1f66:	02 91 00 00 08 04    	add    dl,BYTE PTR [ecx+0x4080000]
    1f6c:	3a 00                	cmp    al,BYTE PTR [eax]
    1f6e:	00 00                	add    BYTE PTR [eax],al
    1f70:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    1f73:	00 00                	add    BYTE PTR [eax],al
    1f75:	03 34 56             	add    esi,DWORD PTR [esi+edx*2]
    1f78:	00 00                	add    BYTE PTR [eax],al
    1f7a:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    1f80:	30 0b                	xor    BYTE PTR [ebx],cl
    1f82:	af                   	scas   eax,DWORD PTR es:[edi]
    1f83:	00 00                	add    BYTE PTR [eax],al
    1f85:	00 03                	add    BYTE PTR [ebx],al
    1f87:	35 56 00 00 00       	xor    eax,0x56
    1f8c:	05 03 60 46 00       	add    eax,0x466003
    1f91:	30 0b                	xor    BYTE PTR [ebx],cl
    1f93:	5b                   	pop    ebx
    1f94:	01 00                	add    DWORD PTR [eax],eax
    1f96:	00 03                	add    BYTE PTR [ebx],al
    1f98:	36                   	ss
    1f99:	56                   	push   esi
    1f9a:	00 00                	add    BYTE PTR [eax],al
    1f9c:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    1fa2:	30 0b                	xor    BYTE PTR [ebx],cl
    1fa4:	54                   	push   esp
    1fa5:	00 00                	add    BYTE PTR [eax],al
    1fa7:	00 03                	add    BYTE PTR [ebx],al
    1fa9:	37                   	aaa    
    1faa:	56                   	push   esi
    1fab:	00 00                	add    BYTE PTR [eax],al
    1fad:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    1fb3:	30 0b                	xor    BYTE PTR [ebx],cl
    1fb5:	28 00                	sub    BYTE PTR [eax],al
    1fb7:	00 00                	add    BYTE PTR [eax],al
    1fb9:	04 49                	add    al,0x49
    1fbb:	e8 01 00 00 05       	call   5001fc1 <sysEnter_Vector+0x4ed1fc1>
    1fc0:	03 64 46 00          	add    esp,DWORD PTR [esi+eax*2+0x0]
    1fc4:	30 08                	xor    BYTE PTR [eax],cl
    1fc6:	04 5f                	add    al,0x5f
    1fc8:	01 00                	add    DWORD PTR [eax],eax
    1fca:	00 00                	add    BYTE PTR [eax],al
    1fcc:	58                   	pop    eax
    1fcd:	04 00                	add    al,0x0
    1fcf:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1fd2:	c0 0a 00             	ror    BYTE PTR [edx],0x0
    1fd5:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1fd8:	f4                   	hlt    
    1fd9:	00 00                	add    BYTE PTR [eax],al
    1fdb:	00 0c db             	add    BYTE PTR [ebx+ebx*8],cl
    1fde:	07                   	pop    es
    1fdf:	00 00                	add    BYTE PTR [eax],al
    1fe1:	72 00                	jb     1fe3 <sysEnter_Vector-0x12e01d>
    1fe3:	00 00                	add    BYTE PTR [eax],al
    1fe5:	74 15                	je     1ffc <sysEnter_Vector-0x12e004>
    1fe7:	00 30                	add    BYTE PTR [eax],dh
    1fe9:	84 00                	test   BYTE PTR [eax],al
    1feb:	00 00                	add    BYTE PTR [eax],al
    1fed:	74 0d                	je     1ffc <sysEnter_Vector-0x12e004>
    1fef:	00 00                	add    BYTE PTR [eax],al
    1ff1:	02 01                	add    al,BYTE PTR [ecx]
    1ff3:	06                   	push   es
    1ff4:	64 00 00             	add    BYTE PTR fs:[eax],al
    1ff7:	00 02                	add    BYTE PTR [edx],al
    1ff9:	01 06                	add    DWORD PTR [esi],eax
    1ffb:	5d                   	pop    ebp
    1ffc:	00 00                	add    BYTE PTR [eax],al
    1ffe:	00 02                	add    BYTE PTR [edx],al
    2000:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2006:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    200d:	02 08                	add    cl,BYTE PTR [eax]
    200f:	05 00 00 00 00       	add    eax,0x0
    2014:	02 01                	add    al,BYTE PTR [ecx]
    2016:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2019:	00 00                	add    BYTE PTR [eax],al
    201b:	02 02                	add    al,BYTE PTR [edx]
    201d:	07                   	pop    es
    201e:	0e                   	push   cs
    201f:	00 00                	add    BYTE PTR [eax],al
    2021:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2024:	00 00                	add    BYTE PTR [eax],al
    2026:	00 02                	add    BYTE PTR [edx],al
    2028:	34 61                	xor    al,0x61
    202a:	00 00                	add    BYTE PTR [eax],al
    202c:	00 02                	add    BYTE PTR [edx],al
    202e:	04 07                	add    al,0x7
    2030:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2033:	00 04 7f             	add    BYTE PTR [edi+edi*2],al
    2036:	07                   	pop    es
    2037:	00 00                	add    BYTE PTR [eax],al
    2039:	02 37                	add    dh,BYTE PTR [edi]
    203b:	73 00                	jae    203d <sysEnter_Vector-0x12dfc3>
    203d:	00 00                	add    BYTE PTR [eax],al
    203f:	02 08                	add    cl,BYTE PTR [eax]
    2041:	07                   	pop    es
    2042:	34 00                	xor    al,0x0
    2044:	00 00                	add    BYTE PTR [eax],al
    2046:	04 a4                	add    al,0xa4
    2048:	04 00                	add    al,0x0
    204a:	00 03                	add    BYTE PTR [ebx],al
    204c:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    204f:	00 00                	add    BYTE PTR [eax],al
    2051:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2058:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    205b:	9b                   	fwait
    205c:	00 00                	add    BYTE PTR [eax],al
    205e:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    2064:	00 06                	add    BYTE PTR [esi],al
    2066:	25 00 00 00 02       	and    eax,0x2000000
    206b:	01 02                	add    DWORD PTR [edx],eax
    206d:	95                   	xchg   ebp,eax
    206e:	00 00                	add    BYTE PTR [eax],al
    2070:	00 02                	add    BYTE PTR [edx],al
    2072:	04 07                	add    al,0x7
    2074:	39 00                	cmp    DWORD PTR [eax],eax
    2076:	00 00                	add    BYTE PTR [eax],al
    2078:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    207b:	e1 00                	loope  207d <sysEnter_Vector-0x12df83>
    207d:	00 00                	add    BYTE PTR [eax],al
    207f:	07                   	pop    es
    2080:	04 05                	add    al,0x5
    2082:	04 25                	add    al,0x25
    2084:	00 00                	add    BYTE PTR [eax],al
    2086:	00 08                	add    BYTE PTR [eax],cl
    2088:	56                   	push   esi
    2089:	08 00                	or     BYTE PTR [eax],al
    208b:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    208e:	17                   	pop    ss
    208f:	ec                   	in     al,dx
    2090:	00 00                	add    BYTE PTR [eax],al
    2092:	00 09                	add    BYTE PTR [ecx],cl
    2094:	98                   	cwde   
    2095:	07                   	pop    es
    2096:	00 00                	add    BYTE PTR [eax],al
    2098:	04 19                	add    al,0x19
    209a:	ec                   	in     al,dx
    209b:	00 00                	add    BYTE PTR [eax],al
    209d:	00 00                	add    BYTE PTR [eax],al
    209f:	09 e4                	or     esp,esp
    20a1:	06                   	push   es
    20a2:	00 00                	add    BYTE PTR [eax],al
    20a4:	04 19                	add    al,0x19
    20a6:	ec                   	in     al,dx
    20a7:	00 00                	add    BYTE PTR [eax],al
    20a9:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    20ac:	4e                   	dec    esi
    20ad:	08 00                	or     BYTE PTR [eax],al
    20af:	00 04 1a             	add    BYTE PTR [edx+ebx*1],al
    20b2:	b3 00                	mov    bl,0x0
    20b4:	00 00                	add    BYTE PTR [eax],al
    20b6:	08 00                	or     BYTE PTR [eax],al
    20b8:	05 04 bb 00 00       	add    eax,0xbb04
    20bd:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
    20c0:	08 00                	or     BYTE PTR [eax],al
    20c2:	00 04 1b             	add    BYTE PTR [ebx+ebx*1],al
    20c5:	bb 00 00 00 08       	mov    ebx,0x8000000
    20ca:	b6 07                	mov    dh,0x7
    20cc:	00 00                	add    BYTE PTR [eax],al
    20ce:	14 05                	adc    al,0x5
    20d0:	1b 2e                	sbb    ebp,DWORD PTR [esi]
    20d2:	01 00                	add    DWORD PTR [eax],eax
    20d4:	00 09                	add    BYTE PTR [ecx],cl
    20d6:	af                   	scas   eax,DWORD PTR es:[edi]
    20d7:	07                   	pop    es
    20d8:	00 00                	add    BYTE PTR [eax],al
    20da:	05 1d f2 00 00       	add    eax,0xf21d
    20df:	00 00                	add    BYTE PTR [eax],al
    20e1:	09 79 07             	or     DWORD PTR [ecx+0x7],edi
    20e4:	00 00                	add    BYTE PTR [eax],al
    20e6:	05 1e 61 00 00       	add    eax,0x611e
    20eb:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    20ee:	b1 08                	mov    cl,0x8
    20f0:	00 00                	add    BYTE PTR [eax],al
    20f2:	05 1f 5f 01 00       	add    eax,0x15f1f
    20f7:	00 10                	add    BYTE PTR [eax],dl
    20f9:	00 08                	add    BYTE PTR [eax],cl
    20fb:	e7 07                	out    0x7,eax
    20fd:	00 00                	add    BYTE PTR [eax],al
    20ff:	0c 05                	or     al,0x5
    2101:	37                   	aaa    
    2102:	5f                   	pop    edi
    2103:	01 00                	add    DWORD PTR [eax],eax
    2105:	00 09                	add    BYTE PTR [ecx],cl
    2107:	d4 07                	aam    0x7
    2109:	00 00                	add    BYTE PTR [eax],al
    210b:	05 39 b5 00 00       	add    eax,0xb539
    2110:	00 00                	add    BYTE PTR [eax],al
    2112:	09 b8 08 00 00 05    	or     DWORD PTR [eax+0x5000008],edi
    2118:	3a 68 02             	cmp    ch,BYTE PTR [eax+0x2]
    211b:	00 00                	add    BYTE PTR [eax],al
    211d:	04 09                	add    al,0x9
    211f:	c9                   	leave  
    2120:	08 00                	or     BYTE PTR [eax],al
    2122:	00 05 3b 5f 01 00    	add    BYTE PTR ds:0x15f3b,al
    2128:	00 08                	add    BYTE PTR [eax],cl
    212a:	00 05 04 2e 01 00    	add    BYTE PTR ds:0x12e04,al
    2130:	00 08                	add    BYTE PTR [eax],cl
    2132:	c4 07                	les    eax,FWORD PTR [edi]
    2134:	00 00                	add    BYTE PTR [eax],al
    2136:	0c 05                	or     al,0x5
    2138:	22 96 01 00 00 09    	and    dl,BYTE PTR [esi+0x9000001]
    213e:	65 08 00             	or     BYTE PTR gs:[eax],al
    2141:	00 05 24 5f 01 00    	add    BYTE PTR ds:0x15f24,al
    2147:	00 00                	add    BYTE PTR [eax],al
    2149:	09 a8 07 00 00 05    	or     DWORD PTR [eax+0x5000007],ebp
    214f:	25 96 01 00 00       	and    eax,0x196
    2154:	04 09                	add    al,0x9
    2156:	88 07                	mov    BYTE PTR [edi],al
    2158:	00 00                	add    BYTE PTR [eax],al
    215a:	05 26 3a 00 00       	add    eax,0x3a26
    215f:	00 08                	add    BYTE PTR [eax],cl
    2161:	00 05 04 fd 00 00    	add    BYTE PTR ds:0xfd04,al
    2167:	00 08                	add    BYTE PTR [eax],cl
    2169:	ba 08 00 00 24       	mov    edx,0x24000008
    216e:	05 29 09 02 00       	add    eax,0x20929
    2173:	00 09                	add    BYTE PTR [ecx],cl
    2175:	48                   	dec    eax
    2176:	08 00                	or     BYTE PTR [eax],al
    2178:	00 05 2b 61 00 00    	add    BYTE PTR ds:0x612b,al
    217e:	00 00                	add    BYTE PTR [eax],al
    2180:	09 88 08 00 00 05    	or     DWORD PTR [eax+0x5000008],ecx
    2186:	2c 4f                	sub    al,0x4f
    2188:	00 00                	add    BYTE PTR [eax],al
    218a:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    218d:	24 08                	and    al,0x8
    218f:	00 00                	add    BYTE PTR [eax],al
    2191:	05 2d 4f 00 00       	add    eax,0x4f2d
    2196:	00 06                	add    BYTE PTR [esi],al
    2198:	09 82 08 00 00 05    	or     DWORD PTR [edx+0x5000008],eax
    219e:	2e                   	cs
    219f:	61                   	popa   
    21a0:	00 00                	add    BYTE PTR [eax],al
    21a2:	00 08                	add    BYTE PTR [eax],cl
    21a4:	09 04 08             	or     DWORD PTR [eax+ecx*1],eax
    21a7:	00 00                	add    BYTE PTR [eax],al
    21a9:	05 2f 61 00 00       	add    eax,0x612f
    21ae:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    21b1:	7a 08                	jp     21bb <sysEnter_Vector-0x12de45>
    21b3:	00 00                	add    BYTE PTR [eax],al
    21b5:	05 30 61 00 00       	add    eax,0x6130
    21ba:	00 10                	add    BYTE PTR [eax],dl
    21bc:	09 60 08             	or     DWORD PTR [eax+0x8],esp
    21bf:	00 00                	add    BYTE PTR [eax],al
    21c1:	05 31 52 02 00       	add    eax,0x25231
    21c6:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    21c9:	c2 07 00             	ret    0x7
    21cc:	00 05 32 65 01 00    	add    BYTE PTR ds:0x16532,al
    21d2:	00 18                	add    BYTE PTR [eax],bl
    21d4:	00 08                	add    BYTE PTR [eax],cl
    21d6:	13 08                	adc    ecx,DWORD PTR [eax]
    21d8:	00 00                	add    BYTE PTR [eax],al
    21da:	14 05                	adc    al,0x5
    21dc:	3e                   	ds
    21dd:	52                   	push   edx
    21de:	02 00                	add    al,BYTE PTR [eax]
    21e0:	00 09                	add    BYTE PTR [ecx],cl
    21e2:	e1 08                	loope  21ec <sysEnter_Vector-0x12de14>
    21e4:	00 00                	add    BYTE PTR [eax],al
    21e6:	05 40 82 02 00       	add    eax,0x28240
    21eb:	00 00                	add    BYTE PTR [eax],al
    21ed:	09 9d 07 00 00 05    	or     DWORD PTR [ebp+0x5000007],ebx
    21f3:	41                   	inc    ecx
    21f4:	82                   	(bad)  
    21f5:	02 00                	add    al,BYTE PTR [eax]
    21f7:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    21fa:	fe 07                	inc    BYTE PTR [edi]
    21fc:	00 00                	add    BYTE PTR [eax],al
    21fe:	05 42 82 02 00       	add    eax,0x28242
    2203:	00 08                	add    BYTE PTR [eax],cl
    2205:	09 92 07 00 00 05    	or     DWORD PTR [edx+0x5000007],edx
    220b:	43                   	inc    ebx
    220c:	9c                   	pushf  
    220d:	02 00                	add    al,BYTE PTR [eax]
    220f:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2212:	cd 07                	int    0x7
    2214:	00 00                	add    BYTE PTR [eax],al
    2216:	05 44 c5 02 00       	add    eax,0x2c544
    221b:	00 10                	add    BYTE PTR [eax],dl
    221d:	00 05 04 58 02 00    	add    BYTE PTR ds:0x25804,al
    2223:	00 06                	add    BYTE PTR [esi],al
    2225:	09 02                	or     DWORD PTR [edx],eax
    2227:	00 00                	add    BYTE PTR [eax],al
    2229:	04 9c                	add    al,0x9c
    222b:	08 00                	or     BYTE PTR [eax],al
    222d:	00 05 35 9c 01 00    	add    BYTE PTR ds:0x19c35,al
    2233:	00 05 04 9c 01 00    	add    BYTE PTR ds:0x19c04,al
    2239:	00 0a                	add    BYTE PTR [edx],cl
    223b:	3a 00                	cmp    al,BYTE PTR [eax]
    223d:	00 00                	add    BYTE PTR [eax],al
    223f:	82                   	(bad)  
    2240:	02 00                	add    al,BYTE PTR [eax]
    2242:	00 0b                	add    BYTE PTR [ebx],cl
    2244:	68 02 00 00 0b       	push   0xb000002
    2249:	5f                   	pop    edi
    224a:	01 00                	add    DWORD PTR [eax],eax
    224c:	00 00                	add    BYTE PTR [eax],al
    224e:	05 04 6e 02 00       	add    eax,0x26e04
    2253:	00 0a                	add    BYTE PTR [edx],cl
    2255:	3a 00                	cmp    al,BYTE PTR [eax]
    2257:	00 00                	add    BYTE PTR [eax],al
    2259:	9c                   	pushf  
    225a:	02 00                	add    al,BYTE PTR [eax]
    225c:	00 0b                	add    BYTE PTR [ebx],cl
    225e:	68 02 00 00 0b       	push   0xb000002
    2263:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    2266:	00 00                	add    BYTE PTR [eax],al
    2268:	05 04 88 02 00       	add    eax,0x28804
    226d:	00 0a                	add    BYTE PTR [edx],cl
    226f:	3a 00                	cmp    al,BYTE PTR [eax]
    2271:	00 00                	add    BYTE PTR [eax],al
    2273:	c5 02                	lds    eax,FWORD PTR [edx]
    2275:	00 00                	add    BYTE PTR [eax],al
    2277:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    227a:	00 00                	add    BYTE PTR [eax],al
    227c:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    227f:	00 00                	add    BYTE PTR [eax],al
    2281:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    2284:	00 00                	add    BYTE PTR [eax],al
    2286:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    2289:	00 00                	add    BYTE PTR [eax],al
    228b:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    228e:	00 00                	add    BYTE PTR [eax],al
    2290:	00 05 04 a2 02 00    	add    BYTE PTR ds:0x2a204,al
    2296:	00 04 73             	add    BYTE PTR [ebx+esi*2],al
    2299:	08 00                	or     BYTE PTR [eax],al
    229b:	00 05 47 d6 02 00    	add    BYTE PTR ds:0x2d647,al
    22a1:	00 08                	add    BYTE PTR [eax],cl
    22a3:	ac                   	lods   al,BYTE PTR ds:[esi]
    22a4:	08 00                	or     BYTE PTR [eax],al
    22a6:	00 10                	add    BYTE PTR [eax],dl
    22a8:	05 4f 07 03 00       	add    eax,0x3074f
    22ad:	00 09                	add    BYTE PTR [ecx],cl
    22af:	da 08                	fimul  DWORD PTR [eax]
    22b1:	00 00                	add    BYTE PTR [eax],al
    22b3:	05 51 b5 00 00       	add    eax,0xb551
    22b8:	00 00                	add    BYTE PTR [eax],al
    22ba:	09 d2                	or     edx,edx
    22bc:	08 00                	or     BYTE PTR [eax],al
    22be:	00 05 52 68 02 00    	add    BYTE PTR ds:0x26852,al
    22c4:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    22c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    22c8:	08 00                	or     BYTE PTR [eax],al
    22ca:	00 05 53 07 03 00    	add    BYTE PTR ds:0x30753,al
    22d0:	00 08                	add    BYTE PTR [eax],cl
    22d2:	00 08                	add    BYTE PTR [eax],cl
    22d4:	ee                   	out    dx,al
    22d5:	07                   	pop    es
    22d6:	00 00                	add    BYTE PTR [eax],al
    22d8:	08 05 49 2c 03 00    	or     BYTE PTR ds:0x32c49,al
    22de:	00 09                	add    BYTE PTR [ecx],cl
    22e0:	28 03                	sub    BYTE PTR [ebx],al
    22e2:	00 00                	add    BYTE PTR [eax],al
    22e4:	05 4b 56 03 00       	add    eax,0x3564b
    22e9:	00 00                	add    BYTE PTR [eax],al
    22eb:	09 60 02             	or     DWORD PTR [eax+0x2],esp
    22ee:	00 00                	add    BYTE PTR [eax],al
    22f0:	05 4c 7a 03 00       	add    eax,0x37a4c
    22f5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    22f8:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    22fb:	00 00                	add    BYTE PTR [eax],al
    22fd:	4a                   	dec    edx
    22fe:	03 00                	add    eax,DWORD PTR [eax]
    2300:	00 0b                	add    BYTE PTR [ebx],cl
    2302:	4a                   	dec    edx
    2303:	03 00                	add    eax,DWORD PTR [eax]
    2305:	00 0b                	add    BYTE PTR [ebx],cl
    2307:	b5 00                	mov    ch,0x0
    2309:	00 00                	add    BYTE PTR [eax],al
    230b:	0b 7a 00             	or     edi,DWORD PTR [edx+0x0]
    230e:	00 00                	add    BYTE PTR [eax],al
    2310:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2313:	00 00                	add    BYTE PTR [eax],al
    2315:	00 05 04 d6 02 00    	add    BYTE PTR ds:0x2d604,al
    231b:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    2321:	00 05 04 2c 03 00    	add    BYTE PTR ds:0x32c04,al
    2327:	00 0a                	add    BYTE PTR [edx],cl
    2329:	7a 00                	jp     232b <sysEnter_Vector-0x12dcd5>
    232b:	00 00                	add    BYTE PTR [eax],al
    232d:	7a 03                	jp     2332 <sysEnter_Vector-0x12dcce>
    232f:	00 00                	add    BYTE PTR [eax],al
    2331:	0b 4a 03             	or     ecx,DWORD PTR [edx+0x3]
    2334:	00 00                	add    BYTE PTR [eax],al
    2336:	0b 93 00 00 00 0b    	or     edx,DWORD PTR [ebx+0xb000000]
    233c:	7a 00                	jp     233e <sysEnter_Vector-0x12dcc2>
    233e:	00 00                	add    BYTE PTR [eax],al
    2340:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2343:	00 00                	add    BYTE PTR [eax],al
    2345:	00 05 04 5c 03 00    	add    BYTE PTR ds:0x35c04,al
    234b:	00 04 2e             	add    BYTE PTR [esi+ebp*1],al
    234e:	08 00                	or     BYTE PTR [eax],al
    2350:	00 05 4d 07 03 00    	add    BYTE PTR ds:0x3074d,al
    2356:	00 0c c0             	add    BYTE PTR [eax+eax*8],cl
    2359:	08 00                	or     BYTE PTR [eax],al
    235b:	00 01                	add    BYTE PTR [ecx],al
    235d:	43                   	inc    ebx
    235e:	74 15                	je     2375 <sysEnter_Vector-0x12dc8b>
    2360:	00 30                	add    BYTE PTR [eax],dh
    2362:	84 00                	test   BYTE PTR [eax],al
    2364:	00 00                	add    BYTE PTR [eax],al
    2366:	01 9c bd 03 00 00 0d 	add    DWORD PTR [ebp+edi*4+0xd000003],ebx
    236d:	a3 07 00 00 01       	mov    ds:0x1000007,eax
    2372:	45                   	inc    ebp
    2373:	bd 03 00 00 02       	mov    ebp,0x2000003
    2378:	91                   	xchg   ecx,eax
    2379:	67 0d 40 08 00 00    	addr16 or eax,0x840
    237f:	01 46 3a             	add    DWORD PTR [esi+0x3a],eax
    2382:	00 00                	add    BYTE PTR [eax],al
    2384:	00 02                	add    BYTE PTR [edx],al
    2386:	91                   	xchg   ecx,eax
    2387:	6c                   	ins    BYTE PTR es:[edi],dx
    2388:	00 0e                	add    BYTE PTR [esi],cl
    238a:	25 00 00 00 cd       	and    eax,0xcd000000
    238f:	03 00                	add    eax,DWORD PTR [eax]
    2391:	00 0f                	add    BYTE PTR [edi],cl
    2393:	ac                   	lods   al,BYTE PTR ds:[esi]
    2394:	00 00                	add    BYTE PTR [eax],al
    2396:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2399:	10 4b 00             	adc    BYTE PTR [ebx+0x0],cl
    239c:	00 00                	add    BYTE PTR [eax],al
    239e:	06                   	push   es
    239f:	34 56                	xor    al,0x56
    23a1:	00 00                	add    BYTE PTR [eax],al
    23a3:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    23a9:	30 10                	xor    BYTE PTR [eax],dl
    23ab:	af                   	scas   eax,DWORD PTR es:[edi]
    23ac:	00 00                	add    BYTE PTR [eax],al
    23ae:	00 06                	add    BYTE PTR [esi],al
    23b0:	35 56 00 00 00       	xor    eax,0x56
    23b5:	05 03 60 46 00       	add    eax,0x466003
    23ba:	30 10                	xor    BYTE PTR [eax],dl
    23bc:	5b                   	pop    ebx
    23bd:	01 00                	add    DWORD PTR [eax],eax
    23bf:	00 06                	add    BYTE PTR [esi],al
    23c1:	36                   	ss
    23c2:	56                   	push   esi
    23c3:	00 00                	add    BYTE PTR [eax],al
    23c5:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    23cb:	30 10                	xor    BYTE PTR [eax],dl
    23cd:	54                   	push   esp
    23ce:	00 00                	add    BYTE PTR [eax],al
    23d0:	00 06                	add    BYTE PTR [esi],al
    23d2:	37                   	aaa    
    23d3:	56                   	push   esi
    23d4:	00 00                	add    BYTE PTR [eax],al
    23d6:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    23dc:	30 10                	xor    BYTE PTR [eax],dl
    23de:	28 00                	sub    BYTE PTR [eax],al
    23e0:	00 00                	add    BYTE PTR [eax],al
    23e2:	07                   	pop    es
    23e3:	49                   	dec    ecx
    23e4:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    23e7:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    23ed:	30 05 04 b5 00 00    	xor    BYTE PTR ds:0xb504,al
    23f3:	00 10                	add    BYTE PTR [eax],dl
    23f5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    23f6:	08 00                	or     BYTE PTR [eax],al
    23f8:	00 01                	add    BYTE PTR [ecx],al
    23fa:	0e                   	push   cs
    23fb:	80 03 00             	add    BYTE PTR [ebx],0x0
    23fe:	00 05 03 74 46 00    	add    BYTE PTR ds:0x467403,al
    2404:	30 10                	xor    BYTE PTR [eax],dl
    2406:	8f 08                	(bad)  
    2408:	00 00                	add    BYTE PTR [eax],al
    240a:	01 0f                	add    DWORD PTR [edi],ecx
    240c:	5d                   	pop    ebp
    240d:	02 00                	add    al,BYTE PTR [eax]
    240f:	00 05 03 c0 44 00    	add    BYTE PTR ds:0x44c003,al
    2415:	30 10                	xor    BYTE PTR [eax],dl
    2417:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    2418:	08 00                	or     BYTE PTR [eax],al
    241a:	00 01                	add    BYTE PTR [ecx],al
    241c:	10 cb                	adc    bl,cl
    241e:	02 00                	add    al,BYTE PTR [eax]
    2420:	00 05 03 7c 46 00    	add    BYTE PTR ds:0x467c03,al
    2426:	30 00                	xor    BYTE PTR [eax],al
    2428:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2429:	01 00                	add    DWORD PTR [eax],eax
    242b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    242e:	88 0b                	mov    BYTE PTR [ebx],cl
    2430:	00 00                	add    BYTE PTR [eax],al
    2432:	04 01                	add    al,0x1
    2434:	f4                   	hlt    
    2435:	00 00                	add    BYTE PTR [eax],al
    2437:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
    243a:	09 00                	or     DWORD PTR [eax],eax
    243c:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    243f:	00 00                	add    BYTE PTR [eax],al
    2441:	f8                   	clc    
    2442:	15 00 30 eb 00       	adc    eax,0xeb3000
    2447:	00 00                	add    BYTE PTR [eax],al
    2449:	72 0e                	jb     2459 <sysEnter_Vector-0x12dba7>
    244b:	00 00                	add    BYTE PTR [eax],al
    244d:	02 01                	add    al,BYTE PTR [ecx]
    244f:	06                   	push   es
    2450:	64 00 00             	add    BYTE PTR fs:[eax],al
    2453:	00 02                	add    BYTE PTR [edx],al
    2455:	01 06                	add    DWORD PTR [esi],eax
    2457:	5d                   	pop    ebp
    2458:	00 00                	add    BYTE PTR [eax],al
    245a:	00 02                	add    BYTE PTR [edx],al
    245c:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2462:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2469:	02 08                	add    cl,BYTE PTR [eax]
    246b:	05 00 00 00 00       	add    eax,0x0
    2470:	02 01                	add    al,BYTE PTR [ecx]
    2472:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2475:	00 00                	add    BYTE PTR [eax],al
    2477:	02 02                	add    al,BYTE PTR [edx]
    2479:	07                   	pop    es
    247a:	0e                   	push   cs
    247b:	00 00                	add    BYTE PTR [eax],al
    247d:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2480:	00 00                	add    BYTE PTR [eax],al
    2482:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2485:	61                   	popa   
    2486:	00 00                	add    BYTE PTR [eax],al
    2488:	00 02                	add    BYTE PTR [edx],al
    248a:	04 07                	add    al,0x7
    248c:	3e 00 00             	add    BYTE PTR ds:[eax],al
    248f:	00 02                	add    BYTE PTR [edx],al
    2491:	08 07                	or     BYTE PTR [edi],al
    2493:	34 00                	xor    al,0x0
    2495:	00 00                	add    BYTE PTR [eax],al
    2497:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    249e:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    24a1:	9b                   	fwait
    24a2:	00 00                	add    BYTE PTR [eax],al
    24a4:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    24aa:	00 06                	add    BYTE PTR [esi],al
    24ac:	25 00 00 00 02       	and    eax,0x2000000
    24b1:	01 02                	add    DWORD PTR [edx],eax
    24b3:	95                   	xchg   ebp,eax
    24b4:	00 00                	add    BYTE PTR [eax],al
    24b6:	00 02                	add    BYTE PTR [edx],al
    24b8:	04 07                	add    al,0x7
    24ba:	39 00                	cmp    DWORD PTR [eax],eax
    24bc:	00 00                	add    BYTE PTR [eax],al
    24be:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    24c1:	e1 00                	loope  24c3 <sysEnter_Vector-0x12db3d>
    24c3:	00 00                	add    BYTE PTR [eax],al
    24c5:	05 04 25 00 00       	add    eax,0x2504
    24ca:	00 07                	add    BYTE PTR [edi],al
    24cc:	fc                   	cld    
    24cd:	08 00                	or     BYTE PTR [eax],al
    24cf:	00 01                	add    BYTE PTR [ecx],al
    24d1:	1d 9d 00 00 00       	sbb    eax,0x9d
    24d6:	f8                   	clc    
    24d7:	15 00 30 3e 00       	adc    eax,0x3e3000
    24dc:	00 00                	add    BYTE PTR [eax],al
    24de:	01 9c d9 00 00 00 08 	add    DWORD PTR [ecx+ebx*8+0x8000000],ebx
    24e5:	00 07                	add    BYTE PTR [edi],al
    24e7:	00 00                	add    BYTE PTR [eax],al
    24e9:	01 1d 9d 00 00 00    	add    DWORD PTR ds:0x9d,ebx
    24ef:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    24f5:	63 00                	arpl   WORD PTR [eax],ax
    24f7:	01 1d 7d 00 00 00    	add    DWORD PTR ds:0x7d,ebx
    24fd:	02 91 04 00 07 f4    	add    dl,BYTE PTR [ecx-0xbf8fffc]
    2503:	08 00                	or     BYTE PTR [eax],al
    2505:	00 01                	add    BYTE PTR [ecx],al
    2507:	23 9d 00 00 00 36    	and    ebx,DWORD PTR [ebp+0x36000000]
    250d:	16                   	push   ss
    250e:	00 30                	add    BYTE PTR [eax],dh
    2510:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2513:	00 01                	add    BYTE PTR [ecx],al
    2515:	9c                   	pushf  
    2516:	0f 01 00             	sgdtd  [eax]
    2519:	00 08                	add    BYTE PTR [eax],cl
    251b:	00 07                	add    BYTE PTR [edi],al
    251d:	00 00                	add    BYTE PTR [eax],al
    251f:	01 23                	add    DWORD PTR [ebx],esp
    2521:	9d                   	popf   
    2522:	00 00                	add    BYTE PTR [eax],al
    2524:	00 02                	add    BYTE PTR [edx],al
    2526:	91                   	xchg   ecx,eax
    2527:	00 09                	add    BYTE PTR [ecx],cl
    2529:	73 72                	jae    259d <sysEnter_Vector-0x12da63>
    252b:	63 00                	arpl   WORD PTR [eax],ax
    252d:	01 23                	add    DWORD PTR [ebx],esp
    252f:	7d 00                	jge    2531 <sysEnter_Vector-0x12dacf>
    2531:	00 00                	add    BYTE PTR [eax],al
    2533:	02 91 04 00 0a e8    	add    dl,BYTE PTR [ecx-0x17f5fffc]
    2539:	08 00                	or     BYTE PTR [eax],al
    253b:	00 01                	add    BYTE PTR [ecx],al
    253d:	29 74 16 00          	sub    DWORD PTR [esi+edx*1+0x0],esi
    2541:	30 6f 00             	xor    BYTE PTR [edi+0x0],ch
    2544:	00 00                	add    BYTE PTR [eax],al
    2546:	01 9c 55 01 00 00 09 	add    DWORD PTR [ebp+edx*2+0x9000001],ebx
    254d:	70 00                	jo     254f <sysEnter_Vector-0x12dab1>
    254f:	01 29                	add    DWORD PTR [ecx],ebp
    2551:	9d                   	popf   
    2552:	00 00                	add    BYTE PTR [eax],al
    2554:	00 02                	add    BYTE PTR [edx],al
    2556:	91                   	xchg   ecx,eax
    2557:	00 09                	add    BYTE PTR [ecx],cl
    2559:	71 00                	jno    255b <sysEnter_Vector-0x12daa5>
    255b:	01 29                	add    DWORD PTR [ecx],ebp
    255d:	9d                   	popf   
    255e:	00 00                	add    BYTE PTR [eax],al
    2560:	00 02                	add    BYTE PTR [edx],al
    2562:	91                   	xchg   ecx,eax
    2563:	04 0b                	add    al,0xb
    2565:	63 00                	arpl   WORD PTR [eax],ax
    2567:	01 2a                	add    DWORD PTR [edx],ebp
    2569:	3a 00                	cmp    al,BYTE PTR [eax]
    256b:	00 00                	add    BYTE PTR [eax],al
    256d:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    2573:	01 2a                	add    DWORD PTR [edx],ebp
    2575:	3a 00                	cmp    al,BYTE PTR [eax]
    2577:	00 00                	add    BYTE PTR [eax],al
    2579:	02 91 70 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0070]
    257f:	00 00                	add    BYTE PTR [eax],al
    2581:	00 02                	add    BYTE PTR [edx],al
    2583:	34 56                	xor    al,0x56
    2585:	00 00                	add    BYTE PTR [eax],al
    2587:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    258d:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    2590:	00 00                	add    BYTE PTR [eax],al
    2592:	00 02                	add    BYTE PTR [edx],al
    2594:	35 56 00 00 00       	xor    eax,0x56
    2599:	05 03 60 46 00       	add    eax,0x466003
    259e:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    25a1:	01 00                	add    DWORD PTR [eax],eax
    25a3:	00 02                	add    BYTE PTR [edx],al
    25a5:	36                   	ss
    25a6:	56                   	push   esi
    25a7:	00 00                	add    BYTE PTR [eax],al
    25a9:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    25af:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    25b2:	00 00                	add    BYTE PTR [eax],al
    25b4:	00 02                	add    BYTE PTR [edx],al
    25b6:	37                   	aaa    
    25b7:	56                   	push   esi
    25b8:	00 00                	add    BYTE PTR [eax],al
    25ba:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    25c0:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    25c3:	00 00                	add    BYTE PTR [eax],al
    25c5:	00 03                	add    BYTE PTR [ebx],al
    25c7:	49                   	dec    ecx
    25c8:	aa                   	stos   BYTE PTR es:[edi],al
    25c9:	01 00                	add    DWORD PTR [eax],eax
    25cb:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    25d1:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    25d7:	00 00                	add    BYTE PTR [eax],al
    25d9:	6c                   	ins    BYTE PTR es:[edi],dx
    25da:	01 00                	add    DWORD PTR [eax],eax
    25dc:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    25df:	43                   	inc    ebx
    25e0:	0c 00                	or     al,0x0
    25e2:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    25e5:	f4                   	hlt    
    25e6:	00 00                	add    BYTE PTR [eax],al
    25e8:	00 0c 1f             	add    BYTE PTR [edi+ebx*1],cl
    25eb:	09 00                	or     DWORD PTR [eax],eax
    25ed:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    25f0:	00 00                	add    BYTE PTR [eax],al
    25f2:	e4 16                	in     al,0x16
    25f4:	00 30                	add    BYTE PTR [eax],dh
    25f6:	5e                   	pop    esi
    25f7:	00 00                	add    BYTE PTR [eax],al
    25f9:	00 42 0f             	add    BYTE PTR [edx+0xf],al
    25fc:	00 00                	add    BYTE PTR [eax],al
    25fe:	02 01                	add    al,BYTE PTR [ecx]
    2600:	06                   	push   es
    2601:	64 00 00             	add    BYTE PTR fs:[eax],al
    2604:	00 02                	add    BYTE PTR [edx],al
    2606:	01 06                	add    DWORD PTR [esi],eax
    2608:	5d                   	pop    ebp
    2609:	00 00                	add    BYTE PTR [eax],al
    260b:	00 02                	add    BYTE PTR [edx],al
    260d:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2613:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    261a:	02 08                	add    cl,BYTE PTR [eax]
    261c:	05 00 00 00 00       	add    eax,0x0
    2621:	02 01                	add    al,BYTE PTR [ecx]
    2623:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2626:	00 00                	add    BYTE PTR [eax],al
    2628:	02 02                	add    al,BYTE PTR [edx]
    262a:	07                   	pop    es
    262b:	0e                   	push   cs
    262c:	00 00                	add    BYTE PTR [eax],al
    262e:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2631:	00 00                	add    BYTE PTR [eax],al
    2633:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2636:	61                   	popa   
    2637:	00 00                	add    BYTE PTR [eax],al
    2639:	00 02                	add    BYTE PTR [edx],al
    263b:	04 07                	add    al,0x7
    263d:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2640:	00 02                	add    BYTE PTR [edx],al
    2642:	08 07                	or     BYTE PTR [edi],al
    2644:	34 00                	xor    al,0x0
    2646:	00 00                	add    BYTE PTR [eax],al
    2648:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    264f:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2652:	9b                   	fwait
    2653:	00 00                	add    BYTE PTR [eax],al
    2655:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    265b:	00 06                	add    BYTE PTR [esi],al
    265d:	25 00 00 00 02       	and    eax,0x2000000
    2662:	01 02                	add    DWORD PTR [edx],eax
    2664:	95                   	xchg   ebp,eax
    2665:	00 00                	add    BYTE PTR [eax],al
    2667:	00 02                	add    BYTE PTR [edx],al
    2669:	04 07                	add    al,0x7
    266b:	39 00                	cmp    DWORD PTR [eax],eax
    266d:	00 00                	add    BYTE PTR [eax],al
    266f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2672:	e1 00                	loope  2674 <sysEnter_Vector-0x12d98c>
    2674:	00 00                	add    BYTE PTR [eax],al
    2676:	05 04 25 00 00       	add    eax,0x2504
    267b:	00 07                	add    BYTE PTR [edi],al
    267d:	18 09                	sbb    BYTE PTR [ecx],cl
    267f:	00 00                	add    BYTE PTR [eax],al
    2681:	01 18                	add    DWORD PTR [eax],ebx
    2683:	3a 00                	cmp    al,BYTE PTR [eax]
    2685:	00 00                	add    BYTE PTR [eax],al
    2687:	e4 16                	in     al,0x16
    2689:	00 30                	add    BYTE PTR [eax],dh
    268b:	5e                   	pop    esi
    268c:	00 00                	add    BYTE PTR [eax],al
    268e:	00 01                	add    BYTE PTR [ecx],al
    2690:	9c                   	pushf  
    2691:	09 01                	or     DWORD PTR [ecx],eax
    2693:	00 00                	add    BYTE PTR [eax],al
    2695:	08 70 31             	or     BYTE PTR [eax+0x31],dh
    2698:	00 01                	add    BYTE PTR [ecx],al
    269a:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    269d:	00 00                	add    BYTE PTR [eax],al
    269f:	02 91 00 08 70 32    	add    dl,BYTE PTR [ecx+0x32700800]
    26a5:	00 01                	add    BYTE PTR [ecx],al
    26a7:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    26aa:	00 00                	add    BYTE PTR [eax],al
    26ac:	02 91 04 09 73 31    	add    dl,BYTE PTR [ecx+0x31730904]
    26b2:	00 01                	add    BYTE PTR [ecx],al
    26b4:	1a 09                	sbb    cl,BYTE PTR [ecx]
    26b6:	01 00                	add    DWORD PTR [eax],eax
    26b8:	00 01                	add    BYTE PTR [ecx],al
    26ba:	53                   	push   ebx
    26bb:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    26be:	00 01                	add    BYTE PTR [ecx],al
    26c0:	1b 09                	sbb    ecx,DWORD PTR [ecx]
    26c2:	01 00                	add    DWORD PTR [eax],eax
    26c4:	00 01                	add    BYTE PTR [ecx],al
    26c6:	56                   	push   esi
    26c7:	09 63 31             	or     DWORD PTR [ebx+0x31],esp
    26ca:	00 01                	add    BYTE PTR [ecx],al
    26cc:	1c 48                	sbb    al,0x48
    26ce:	00 00                	add    BYTE PTR [eax],al
    26d0:	00 02                	add    BYTE PTR [edx],al
    26d2:	91                   	xchg   ecx,eax
    26d3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    26d4:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    26d7:	00 01                	add    BYTE PTR [ecx],al
    26d9:	1c 48                	sbb    al,0x48
    26db:	00 00                	add    BYTE PTR [eax],al
    26dd:	00 02                	add    BYTE PTR [edx],al
    26df:	91                   	xchg   ecx,eax
    26e0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    26e1:	00 05 04 0f 01 00    	add    BYTE PTR ds:0x10f04,al
    26e7:	00 06                	add    BYTE PTR [esi],al
    26e9:	48                   	dec    eax
    26ea:	00 00                	add    BYTE PTR [eax],al
    26ec:	00 0a                	add    BYTE PTR [edx],cl
    26ee:	4b                   	dec    ebx
    26ef:	00 00                	add    BYTE PTR [eax],al
    26f1:	00 02                	add    BYTE PTR [edx],al
    26f3:	34 56                	xor    al,0x56
    26f5:	00 00                	add    BYTE PTR [eax],al
    26f7:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    26fd:	30 0a                	xor    BYTE PTR [edx],cl
    26ff:	af                   	scas   eax,DWORD PTR es:[edi]
    2700:	00 00                	add    BYTE PTR [eax],al
    2702:	00 02                	add    BYTE PTR [edx],al
    2704:	35 56 00 00 00       	xor    eax,0x56
    2709:	05 03 60 46 00       	add    eax,0x466003
    270e:	30 0a                	xor    BYTE PTR [edx],cl
    2710:	5b                   	pop    ebx
    2711:	01 00                	add    DWORD PTR [eax],eax
    2713:	00 02                	add    BYTE PTR [edx],al
    2715:	36                   	ss
    2716:	56                   	push   esi
    2717:	00 00                	add    BYTE PTR [eax],al
    2719:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    271f:	30 0a                	xor    BYTE PTR [edx],cl
    2721:	54                   	push   esp
    2722:	00 00                	add    BYTE PTR [eax],al
    2724:	00 02                	add    BYTE PTR [edx],al
    2726:	37                   	aaa    
    2727:	56                   	push   esi
    2728:	00 00                	add    BYTE PTR [eax],al
    272a:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    2730:	30 0a                	xor    BYTE PTR [edx],cl
    2732:	28 00                	sub    BYTE PTR [eax],al
    2734:	00 00                	add    BYTE PTR [eax],al
    2736:	03 49 69             	add    ecx,DWORD PTR [ecx+0x69]
    2739:	01 00                	add    DWORD PTR [eax],eax
    273b:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    2741:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2747:	00 00                	add    BYTE PTR [eax],al
    2749:	c9                   	leave  
    274a:	01 00                	add    DWORD PTR [eax],eax
    274c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    274f:	d5 0c                	aad    0xc
    2751:	00 00                	add    BYTE PTR [eax],al
    2753:	04 01                	add    al,0x1
    2755:	f4                   	hlt    
    2756:	00 00                	add    BYTE PTR [eax],al
    2758:	00 0c 51             	add    BYTE PTR [ecx+edx*2],cl
    275b:	09 00                	or     DWORD PTR [eax],eax
    275d:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2760:	00 00                	add    BYTE PTR [eax],al
    2762:	44                   	inc    esp
    2763:	17                   	pop    ss
    2764:	00 30                	add    BYTE PTR [eax],dh
    2766:	c7 00 00 00 01 10    	mov    DWORD PTR [eax],0x10010000
    276c:	00 00                	add    BYTE PTR [eax],al
    276e:	02 01                	add    al,BYTE PTR [ecx]
    2770:	06                   	push   es
    2771:	64 00 00             	add    BYTE PTR fs:[eax],al
    2774:	00 02                	add    BYTE PTR [edx],al
    2776:	01 06                	add    DWORD PTR [esi],eax
    2778:	5d                   	pop    ebp
    2779:	00 00                	add    BYTE PTR [eax],al
    277b:	00 02                	add    BYTE PTR [edx],al
    277d:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2783:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    278a:	02 08                	add    cl,BYTE PTR [eax]
    278c:	05 00 00 00 00       	add    eax,0x0
    2791:	02 01                	add    al,BYTE PTR [ecx]
    2793:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2796:	00 00                	add    BYTE PTR [eax],al
    2798:	02 02                	add    al,BYTE PTR [edx]
    279a:	07                   	pop    es
    279b:	0e                   	push   cs
    279c:	00 00                	add    BYTE PTR [eax],al
    279e:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    27a1:	00 00                	add    BYTE PTR [eax],al
    27a3:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    27a6:	61                   	popa   
    27a7:	00 00                	add    BYTE PTR [eax],al
    27a9:	00 02                	add    BYTE PTR [edx],al
    27ab:	04 07                	add    al,0x7
    27ad:	3e 00 00             	add    BYTE PTR ds:[eax],al
    27b0:	00 02                	add    BYTE PTR [edx],al
    27b2:	08 07                	or     BYTE PTR [edi],al
    27b4:	34 00                	xor    al,0x0
    27b6:	00 00                	add    BYTE PTR [eax],al
    27b8:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    27bf:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    27c2:	9b                   	fwait
    27c3:	00 00                	add    BYTE PTR [eax],al
    27c5:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    27cb:	00 06                	add    BYTE PTR [esi],al
    27cd:	25 00 00 00 02       	and    eax,0x2000000
    27d2:	01 02                	add    DWORD PTR [edx],eax
    27d4:	95                   	xchg   ebp,eax
    27d5:	00 00                	add    BYTE PTR [eax],al
    27d7:	00 02                	add    BYTE PTR [edx],al
    27d9:	04 07                	add    al,0x7
    27db:	39 00                	cmp    DWORD PTR [eax],eax
    27dd:	00 00                	add    BYTE PTR [eax],al
    27df:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    27e2:	e1 00                	loope  27e4 <sysEnter_Vector-0x12d81c>
    27e4:	00 00                	add    BYTE PTR [eax],al
    27e6:	05 04 25 00 00       	add    eax,0x2504
    27eb:	00 07                	add    BYTE PTR [edi],al
    27ed:	34 09                	xor    al,0x9
    27ef:	00 00                	add    BYTE PTR [eax],al
    27f1:	01 04 9d 00 00 00 44 	add    DWORD PTR [ebx*4+0x44000000],eax
    27f8:	17                   	pop    ss
    27f9:	00 30                	add    BYTE PTR [eax],dh
    27fb:	40                   	inc    eax
    27fc:	00 00                	add    BYTE PTR [eax],al
    27fe:	00 01                	add    BYTE PTR [ecx],al
    2800:	9c                   	pushf  
    2801:	e3 00                	jecxz  2803 <sysEnter_Vector-0x12d7fd>
    2803:	00 00                	add    BYTE PTR [eax],al
    2805:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2808:	00 01                	add    BYTE PTR [ecx],al
    280a:	04 9d                	add    al,0x9d
    280c:	00 00                	add    BYTE PTR [eax],al
    280e:	00 02                	add    BYTE PTR [edx],al
    2810:	91                   	xchg   ecx,eax
    2811:	00 08                	add    BYTE PTR [eax],cl
    2813:	73 32                	jae    2847 <sysEnter_Vector-0x12d7b9>
    2815:	00 01                	add    BYTE PTR [ecx],al
    2817:	04 7d                	add    al,0x7d
    2819:	00 00                	add    BYTE PTR [eax],al
    281b:	00 02                	add    BYTE PTR [edx],al
    281d:	91                   	xchg   ecx,eax
    281e:	04 09                	add    al,0x9
    2820:	73 00                	jae    2822 <sysEnter_Vector-0x12d7de>
    2822:	01 06                	add    DWORD PTR [esi],eax
    2824:	9d                   	popf   
    2825:	00 00                	add    BYTE PTR [eax],al
    2827:	00 02                	add    BYTE PTR [edx],al
    2829:	91                   	xchg   ecx,eax
    282a:	74 00                	je     282c <sysEnter_Vector-0x12d7d4>
    282c:	07                   	pop    es
    282d:	49                   	dec    ecx
    282e:	09 00                	or     DWORD PTR [eax],eax
    2830:	00 01                	add    BYTE PTR [ecx],al
    2832:	0e                   	push   cs
    2833:	9d                   	popf   
    2834:	00 00                	add    BYTE PTR [eax],al
    2836:	00 84 17 00 30 40 00 	add    BYTE PTR [edi+edx*1+0x403000],al
    283d:	00 00                	add    BYTE PTR [eax],al
    283f:	01 9c 23 01 00 00 08 	add    DWORD PTR [ebx+eiz*1+0x8000001],ebx
    2846:	73 31                	jae    2879 <sysEnter_Vector-0x12d787>
    2848:	00 01                	add    BYTE PTR [ecx],al
    284a:	0e                   	push   cs
    284b:	9d                   	popf   
    284c:	00 00                	add    BYTE PTR [eax],al
    284e:	00 02                	add    BYTE PTR [edx],al
    2850:	91                   	xchg   ecx,eax
    2851:	00 08                	add    BYTE PTR [eax],cl
    2853:	73 32                	jae    2887 <sysEnter_Vector-0x12d779>
    2855:	00 01                	add    BYTE PTR [ecx],al
    2857:	0e                   	push   cs
    2858:	7d 00                	jge    285a <sysEnter_Vector-0x12d7a6>
    285a:	00 00                	add    BYTE PTR [eax],al
    285c:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    2862:	01 10                	add    DWORD PTR [eax],edx
    2864:	9d                   	popf   
    2865:	00 00                	add    BYTE PTR [eax],al
    2867:	00 02                	add    BYTE PTR [edx],al
    2869:	91                   	xchg   ecx,eax
    286a:	74 00                	je     286c <sysEnter_Vector-0x12d794>
    286c:	07                   	pop    es
    286d:	41                   	inc    ecx
    286e:	09 00                	or     DWORD PTR [eax],eax
    2870:	00 01                	add    BYTE PTR [ecx],al
    2872:	18 9d 00 00 00 c4    	sbb    BYTE PTR [ebp-0x3c000000],bl
    2878:	17                   	pop    ss
    2879:	00 30                	add    BYTE PTR [eax],dh
    287b:	47                   	inc    edi
    287c:	00 00                	add    BYTE PTR [eax],al
    287e:	00 01                	add    BYTE PTR [ecx],al
    2880:	9c                   	pushf  
    2881:	71 01                	jno    2884 <sysEnter_Vector-0x12d77c>
    2883:	00 00                	add    BYTE PTR [eax],al
    2885:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2888:	00 01                	add    BYTE PTR [ecx],al
    288a:	18 9d 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],bl
    2890:	91                   	xchg   ecx,eax
    2891:	00 08                	add    BYTE PTR [eax],cl
    2893:	73 32                	jae    28c7 <sysEnter_Vector-0x12d739>
    2895:	00 01                	add    BYTE PTR [ecx],al
    2897:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    289a:	00 00                	add    BYTE PTR [eax],al
    289c:	02 91 04 0a 3b 09    	add    dl,BYTE PTR [ecx+0x93b0a04]
    28a2:	00 00                	add    BYTE PTR [eax],al
    28a4:	01 18                	add    DWORD PTR [eax],ebx
    28a6:	61                   	popa   
    28a7:	00 00                	add    BYTE PTR [eax],al
    28a9:	00 02                	add    BYTE PTR [edx],al
    28ab:	91                   	xchg   ecx,eax
    28ac:	08 09                	or     BYTE PTR [ecx],cl
    28ae:	73 00                	jae    28b0 <sysEnter_Vector-0x12d750>
    28b0:	01 1a                	add    DWORD PTR [edx],ebx
    28b2:	9d                   	popf   
    28b3:	00 00                	add    BYTE PTR [eax],al
    28b5:	00 02                	add    BYTE PTR [edx],al
    28b7:	91                   	xchg   ecx,eax
    28b8:	74 00                	je     28ba <sysEnter_Vector-0x12d746>
    28ba:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    28bd:	00 00                	add    BYTE PTR [eax],al
    28bf:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    28c2:	00 00                	add    BYTE PTR [eax],al
    28c4:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    28ca:	30 0b                	xor    BYTE PTR [ebx],cl
    28cc:	af                   	scas   eax,DWORD PTR es:[edi]
    28cd:	00 00                	add    BYTE PTR [eax],al
    28cf:	00 02                	add    BYTE PTR [edx],al
    28d1:	35 56 00 00 00       	xor    eax,0x56
    28d6:	05 03 60 46 00       	add    eax,0x466003
    28db:	30 0b                	xor    BYTE PTR [ebx],cl
    28dd:	5b                   	pop    ebx
    28de:	01 00                	add    DWORD PTR [eax],eax
    28e0:	00 02                	add    BYTE PTR [edx],al
    28e2:	36                   	ss
    28e3:	56                   	push   esi
    28e4:	00 00                	add    BYTE PTR [eax],al
    28e6:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    28ec:	30 0b                	xor    BYTE PTR [ebx],cl
    28ee:	54                   	push   esp
    28ef:	00 00                	add    BYTE PTR [eax],al
    28f1:	00 02                	add    BYTE PTR [edx],al
    28f3:	37                   	aaa    
    28f4:	56                   	push   esi
    28f5:	00 00                	add    BYTE PTR [eax],al
    28f7:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    28fd:	30 0b                	xor    BYTE PTR [ebx],cl
    28ff:	28 00                	sub    BYTE PTR [eax],al
    2901:	00 00                	add    BYTE PTR [eax],al
    2903:	03 49 c6             	add    ecx,DWORD PTR [ecx-0x3a]
    2906:	01 00                	add    DWORD PTR [eax],eax
    2908:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    290e:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2914:	00 00                	add    BYTE PTR [eax],al
    2916:	4c                   	dec    esp
    2917:	01 00                	add    DWORD PTR [eax],eax
    2919:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    291c:	76 0d                	jbe    292b <sysEnter_Vector-0x12d6d5>
    291e:	00 00                	add    BYTE PTR [eax],al
    2920:	04 01                	add    al,0x1
    2922:	f4                   	hlt    
    2923:	00 00                	add    BYTE PTR [eax],al
    2925:	00 0c 7b             	add    BYTE PTR [ebx+edi*2],cl
    2928:	09 00                	or     DWORD PTR [eax],eax
    292a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    292d:	00 00                	add    BYTE PTR [eax],al
    292f:	0c 18                	or     al,0x18
    2931:	00 30                	add    BYTE PTR [eax],dh
    2933:	89 00                	mov    DWORD PTR [eax],eax
    2935:	00 00                	add    BYTE PTR [eax],al
    2937:	e1 10                	loope  2949 <sysEnter_Vector-0x12d6b7>
    2939:	00 00                	add    BYTE PTR [eax],al
    293b:	02 01                	add    al,BYTE PTR [ecx]
    293d:	06                   	push   es
    293e:	64 00 00             	add    BYTE PTR fs:[eax],al
    2941:	00 02                	add    BYTE PTR [edx],al
    2943:	01 06                	add    DWORD PTR [esi],eax
    2945:	5d                   	pop    ebp
    2946:	00 00                	add    BYTE PTR [eax],al
    2948:	00 02                	add    BYTE PTR [edx],al
    294a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2950:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2957:	02 08                	add    cl,BYTE PTR [eax]
    2959:	05 00 00 00 00       	add    eax,0x0
    295e:	02 01                	add    al,BYTE PTR [ecx]
    2960:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2963:	00 00                	add    BYTE PTR [eax],al
    2965:	02 02                	add    al,BYTE PTR [edx]
    2967:	07                   	pop    es
    2968:	0e                   	push   cs
    2969:	00 00                	add    BYTE PTR [eax],al
    296b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    296e:	00 00                	add    BYTE PTR [eax],al
    2970:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2973:	61                   	popa   
    2974:	00 00                	add    BYTE PTR [eax],al
    2976:	00 02                	add    BYTE PTR [edx],al
    2978:	04 07                	add    al,0x7
    297a:	3e 00 00             	add    BYTE PTR ds:[eax],al
    297d:	00 02                	add    BYTE PTR [edx],al
    297f:	08 07                	or     BYTE PTR [edi],al
    2981:	34 00                	xor    al,0x0
    2983:	00 00                	add    BYTE PTR [eax],al
    2985:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    298c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    298f:	9b                   	fwait
    2990:	00 00                	add    BYTE PTR [eax],al
    2992:	00 02                	add    BYTE PTR [edx],al
    2994:	01 02                	add    DWORD PTR [edx],eax
    2996:	95                   	xchg   ebp,eax
    2997:	00 00                	add    BYTE PTR [eax],al
    2999:	00 02                	add    BYTE PTR [edx],al
    299b:	04 07                	add    al,0x7
    299d:	39 00                	cmp    DWORD PTR [eax],eax
    299f:	00 00                	add    BYTE PTR [eax],al
    29a1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    29a4:	e1 00                	loope  29a6 <sysEnter_Vector-0x12d65a>
    29a6:	00 00                	add    BYTE PTR [eax],al
    29a8:	05 04 25 00 00       	add    eax,0x2504
    29ad:	00 06                	add    BYTE PTR [esi],al
    29af:	66 09 00             	or     WORD PTR [eax],ax
    29b2:	00 01                	add    BYTE PTR [ecx],al
    29b4:	09 7d 00             	or     DWORD PTR [ebp+0x0],edi
    29b7:	00 00                	add    BYTE PTR [eax],al
    29b9:	0c 18                	or     al,0x18
    29bb:	00 30                	add    BYTE PTR [eax],dh
    29bd:	30 00                	xor    BYTE PTR [eax],al
    29bf:	00 00                	add    BYTE PTR [eax],al
    29c1:	01 9c be 00 00 00 07 	add    DWORD PTR [esi+edi*4+0x7000000],ebx
    29c8:	63 00                	arpl   WORD PTR [eax],ax
    29ca:	01 09                	add    DWORD PTR [ecx],ecx
    29cc:	25 00 00 00 02       	and    eax,0x2000000
    29d1:	91                   	xchg   ecx,eax
    29d2:	74 00                	je     29d4 <sysEnter_Vector-0x12d62c>
    29d4:	08 72 09             	or     BYTE PTR [edx+0x9],dh
    29d7:	00 00                	add    BYTE PTR [eax],al
    29d9:	01 0e                	add    DWORD PTR [esi],ecx
    29db:	7d 00                	jge    29dd <sysEnter_Vector-0x12d623>
    29dd:	00 00                	add    BYTE PTR [eax],al
    29df:	3c 18                	cmp    al,0x18
    29e1:	00 30                	add    BYTE PTR [eax],dh
    29e3:	59                   	pop    ecx
    29e4:	00 00                	add    BYTE PTR [eax],al
    29e6:	00 01                	add    BYTE PTR [ecx],al
    29e8:	9c                   	pushf  
    29e9:	f4                   	hlt    
    29ea:	00 00                	add    BYTE PTR [eax],al
    29ec:	00 07                	add    BYTE PTR [edi],al
    29ee:	73 74                	jae    2a64 <sysEnter_Vector-0x12d59c>
    29f0:	72 00                	jb     29f2 <sysEnter_Vector-0x12d60e>
    29f2:	01 0e                	add    DWORD PTR [esi],ecx
    29f4:	92                   	xchg   edx,eax
    29f5:	00 00                	add    BYTE PTR [eax],al
    29f7:	00 02                	add    BYTE PTR [edx],al
    29f9:	91                   	xchg   ecx,eax
    29fa:	00 09                	add    BYTE PTR [ecx],cl
    29fc:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    29ff:	00 01                	add    BYTE PTR [ecx],al
    2a01:	10 3a                	adc    BYTE PTR [edx],bh
    2a03:	00 00                	add    BYTE PTR [eax],al
    2a05:	00 02                	add    BYTE PTR [edx],al
    2a07:	91                   	xchg   ecx,eax
    2a08:	74 00                	je     2a0a <sysEnter_Vector-0x12d5f6>
    2a0a:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    2a0d:	00 00                	add    BYTE PTR [eax],al
    2a0f:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2a12:	00 00                	add    BYTE PTR [eax],al
    2a14:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    2a1a:	30 0a                	xor    BYTE PTR [edx],cl
    2a1c:	af                   	scas   eax,DWORD PTR es:[edi]
    2a1d:	00 00                	add    BYTE PTR [eax],al
    2a1f:	00 02                	add    BYTE PTR [edx],al
    2a21:	35 56 00 00 00       	xor    eax,0x56
    2a26:	05 03 60 46 00       	add    eax,0x466003
    2a2b:	30 0a                	xor    BYTE PTR [edx],cl
    2a2d:	5b                   	pop    ebx
    2a2e:	01 00                	add    DWORD PTR [eax],eax
    2a30:	00 02                	add    BYTE PTR [edx],al
    2a32:	36                   	ss
    2a33:	56                   	push   esi
    2a34:	00 00                	add    BYTE PTR [eax],al
    2a36:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    2a3c:	30 0a                	xor    BYTE PTR [edx],cl
    2a3e:	54                   	push   esp
    2a3f:	00 00                	add    BYTE PTR [eax],al
    2a41:	00 02                	add    BYTE PTR [edx],al
    2a43:	37                   	aaa    
    2a44:	56                   	push   esi
    2a45:	00 00                	add    BYTE PTR [eax],al
    2a47:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    2a4d:	30 0a                	xor    BYTE PTR [edx],cl
    2a4f:	28 00                	sub    BYTE PTR [eax],al
    2a51:	00 00                	add    BYTE PTR [eax],al
    2a53:	03 49 49             	add    ecx,DWORD PTR [ecx+0x49]
    2a56:	01 00                	add    DWORD PTR [eax],eax
    2a58:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    2a5e:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    2a64:	00 00                	add    BYTE PTR [eax],al
    2a66:	ca 00 00             	retf   0x0
    2a69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2a6c:	1d 0e 00 00 04       	sbb    eax,0x400000e
    2a71:	01 f4                	add    esp,esi
    2a73:	00 00                	add    BYTE PTR [eax],al
    2a75:	00 0c 99             	add    BYTE PTR [ecx+ebx*4],cl
    2a78:	09 00                	or     DWORD PTR [eax],eax
    2a7a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2a7d:	00 00                	add    BYTE PTR [eax],al
    2a7f:	98                   	cwde   
    2a80:	18 00                	sbb    BYTE PTR [eax],al
    2a82:	30 62 00             	xor    BYTE PTR [edx+0x0],ah
    2a85:	00 00                	add    BYTE PTR [eax],al
    2a87:	b0 11                	mov    al,0x11
    2a89:	00 00                	add    BYTE PTR [eax],al
    2a8b:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    2a92:	03 a4 04 00 00 02 d8 	add    esp,DWORD PTR [esp+eax*1-0x27fe0000]
    2a99:	37                   	aaa    
    2a9a:	00 00                	add    BYTE PTR [eax],al
    2a9c:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2a9f:	07                   	pop    es
    2aa0:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2aa3:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2aa6:	05 05 00 00 00       	add    eax,0x5
    2aab:	04 08                	add    al,0x8
    2aad:	05 00 00 00 00       	add    eax,0x0
    2ab2:	04 0c                	add    al,0xc
    2ab4:	04 9b                	add    al,0x9b
    2ab6:	00 00                	add    BYTE PTR [eax],al
    2ab8:	00 05 92 09 00 00    	add    BYTE PTR ds:0x992,al
    2abe:	01 03                	add    DWORD PTR [ebx],eax
    2ac0:	2c 00                	sub    al,0x0
    2ac2:	00 00                	add    BYTE PTR [eax],al
    2ac4:	98                   	cwde   
    2ac5:	18 00                	sbb    BYTE PTR [eax],al
    2ac7:	30 31                	xor    BYTE PTR [ecx],dh
    2ac9:	00 00                	add    BYTE PTR [eax],al
    2acb:	00 01                	add    BYTE PTR [ecx],al
    2acd:	9c                   	pushf  
    2ace:	89 00                	mov    DWORD PTR [eax],eax
    2ad0:	00 00                	add    BYTE PTR [eax],al
    2ad2:	06                   	push   es
    2ad3:	73 74                	jae    2b49 <sysEnter_Vector-0x12d4b7>
    2ad5:	72 00                	jb     2ad7 <sysEnter_Vector-0x12d529>
    2ad7:	01 03                	add    DWORD PTR [ebx],eax
    2ad9:	89 00                	mov    DWORD PTR [eax],eax
    2adb:	00 00                	add    BYTE PTR [eax],al
    2add:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2ae3:	74 00                	je     2ae5 <sysEnter_Vector-0x12d51b>
    2ae5:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    2ae8:	00 00                	add    BYTE PTR [eax],al
    2aea:	00 02                	add    BYTE PTR [edx],al
    2aec:	91                   	xchg   ecx,eax
    2aed:	74 00                	je     2aef <sysEnter_Vector-0x12d511>
    2aef:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    2af2:	00 00                	add    BYTE PTR [eax],al
    2af4:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2af7:	06                   	push   es
    2af8:	64 00 00             	add    BYTE PTR fs:[eax],al
    2afb:	00 09                	add    BYTE PTR [ecx],cl
    2afd:	8f 00                	pop    DWORD PTR [eax]
    2aff:	00 00                	add    BYTE PTR [eax],al
    2b01:	0a ae 09 00 00 01    	or     ch,BYTE PTR [esi+0x1000009]
    2b07:	0a 2c 00             	or     ch,BYTE PTR [eax+eax*1]
    2b0a:	00 00                	add    BYTE PTR [eax],al
    2b0c:	c9                   	leave  
    2b0d:	18 00                	sbb    BYTE PTR [eax],al
    2b0f:	30 31                	xor    BYTE PTR [ecx],dh
    2b11:	00 00                	add    BYTE PTR [eax],al
    2b13:	00 01                	add    BYTE PTR [ecx],al
    2b15:	9c                   	pushf  
    2b16:	06                   	push   es
    2b17:	73 74                	jae    2b8d <sysEnter_Vector-0x12d473>
    2b19:	72 00                	jb     2b1b <sysEnter_Vector-0x12d4e5>
    2b1b:	01 0a                	add    DWORD PTR [edx],ecx
    2b1d:	89 00                	mov    DWORD PTR [eax],eax
    2b1f:	00 00                	add    BYTE PTR [eax],al
    2b21:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2b27:	74 00                	je     2b29 <sysEnter_Vector-0x12d4d7>
    2b29:	01 0b                	add    DWORD PTR [ebx],ecx
    2b2b:	2c 00                	sub    al,0x0
    2b2d:	00 00                	add    BYTE PTR [eax],al
    2b2f:	02 91 74 00 00 de    	add    dl,BYTE PTR [ecx-0x21ffff8c]
    2b35:	00 00                	add    BYTE PTR [eax],al
    2b37:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b3a:	b8 0e 00 00 04       	mov    eax,0x400000e
    2b3f:	01 f4                	add    esp,esi
    2b41:	00 00                	add    BYTE PTR [eax],al
    2b43:	00 0c c7             	add    BYTE PTR [edi+eax*8],cl
    2b46:	09 00                	or     DWORD PTR [eax],eax
    2b48:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2b4b:	00 00                	add    BYTE PTR [eax],al
    2b4d:	fc                   	cld    
    2b4e:	18 00                	sbb    BYTE PTR [eax],al
    2b50:	30 ce                	xor    dh,cl
    2b52:	00 00                	add    BYTE PTR [eax],al
    2b54:	00 48 12             	add    BYTE PTR [eax+0x12],cl
    2b57:	00 00                	add    BYTE PTR [eax],al
    2b59:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    2b60:	03 a4 04 00 00 02 d8 	add    esp,DWORD PTR [esp+eax*1-0x27fe0000]
    2b67:	37                   	aaa    
    2b68:	00 00                	add    BYTE PTR [eax],al
    2b6a:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b6d:	07                   	pop    es
    2b6e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2b71:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b74:	05 05 00 00 00       	add    eax,0x5
    2b79:	04 08                	add    al,0x8
    2b7b:	05 00 00 00 00       	add    eax,0x0
    2b80:	04 0c                	add    al,0xc
    2b82:	04 9b                	add    al,0x9b
    2b84:	00 00                	add    BYTE PTR [eax],al
    2b86:	00 05 bf 09 00 00    	add    BYTE PTR ds:0x9bf,al
    2b8c:	01 0c 25 00 00 00 fc 	add    DWORD PTR [eiz*1-0x4000000],ecx
    2b93:	18 00                	sbb    BYTE PTR [eax],al
    2b95:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2b98:	00 00                	add    BYTE PTR [eax],al
    2b9a:	01 9c 93 00 00 00 06 	add    DWORD PTR [ebx+edx*4+0x6000000],ebx
    2ba1:	73 31                	jae    2bd4 <sysEnter_Vector-0x12d42c>
    2ba3:	00 01                	add    BYTE PTR [ecx],al
    2ba5:	0c 93                	or     al,0x93
    2ba7:	00 00                	add    BYTE PTR [eax],al
    2ba9:	00 02                	add    BYTE PTR [edx],al
    2bab:	91                   	xchg   ecx,eax
    2bac:	00 06                	add    BYTE PTR [esi],al
    2bae:	73 32                	jae    2be2 <sysEnter_Vector-0x12d41e>
    2bb0:	00 01                	add    BYTE PTR [ecx],al
    2bb2:	0c 93                	or     al,0x93
    2bb4:	00 00                	add    BYTE PTR [eax],al
    2bb6:	00 02                	add    BYTE PTR [edx],al
    2bb8:	91                   	xchg   ecx,eax
    2bb9:	04 06                	add    al,0x6
    2bbb:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2bbc:	00 01                	add    BYTE PTR [ecx],al
    2bbe:	0c 2c                	or     al,0x2c
    2bc0:	00 00                	add    BYTE PTR [eax],al
    2bc2:	00 02                	add    BYTE PTR [edx],al
    2bc4:	91                   	xchg   ecx,eax
    2bc5:	08 00                	or     BYTE PTR [eax],al
    2bc7:	07                   	pop    es
    2bc8:	04 a0                	add    al,0xa0
    2bca:	00 00                	add    BYTE PTR [eax],al
    2bcc:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2bcf:	06                   	push   es
    2bd0:	64 00 00             	add    BYTE PTR fs:[eax],al
    2bd3:	00 08                	add    BYTE PTR [eax],cl
    2bd5:	99                   	cdq    
    2bd6:	00 00                	add    BYTE PTR [eax],al
    2bd8:	00 09                	add    BYTE PTR [ecx],cl
    2bda:	b6 09                	mov    dh,0x9
    2bdc:	00 00                	add    BYTE PTR [eax],al
    2bde:	01 16                	add    DWORD PTR [esi],edx
    2be0:	25 00 00 00 63       	and    eax,0x63000000
    2be5:	19 00                	sbb    DWORD PTR [eax],eax
    2be7:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2bea:	00 00                	add    BYTE PTR [eax],al
    2bec:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    2bf3:	16                   	push   ss
    2bf4:	93                   	xchg   ebx,eax
    2bf5:	00 00                	add    BYTE PTR [eax],al
    2bf7:	00 02                	add    BYTE PTR [edx],al
    2bf9:	91                   	xchg   ecx,eax
    2bfa:	00 06                	add    BYTE PTR [esi],al
    2bfc:	73 32                	jae    2c30 <sysEnter_Vector-0x12d3d0>
    2bfe:	00 01                	add    BYTE PTR [ecx],al
    2c00:	16                   	push   ss
    2c01:	93                   	xchg   ebx,eax
    2c02:	00 00                	add    BYTE PTR [eax],al
    2c04:	00 02                	add    BYTE PTR [edx],al
    2c06:	91                   	xchg   ecx,eax
    2c07:	04 06                	add    al,0x6
    2c09:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c0a:	00 01                	add    BYTE PTR [ecx],al
    2c0c:	16                   	push   ss
    2c0d:	2c 00                	sub    al,0x0
    2c0f:	00 00                	add    BYTE PTR [eax],al
    2c11:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    2c17:	00 00                	add    BYTE PTR [eax],al
    2c19:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2c1c:	44                   	inc    esp
    2c1d:	0f 00 00             	sldt   WORD PTR [eax]
    2c20:	04 01                	add    al,0x1
    2c22:	f4                   	hlt    
    2c23:	00 00                	add    BYTE PTR [eax],al
    2c25:	00 0c dd 09 00 00 72 	add    BYTE PTR [ebx*8+0x72000009],cl
    2c2c:	00 00                	add    BYTE PTR [eax],al
    2c2e:	00 cc                	add    ah,cl
    2c30:	19 00                	sbb    DWORD PTR [eax],eax
    2c32:	30 80 00 00 00 0d    	xor    BYTE PTR [eax+0xd000000],al
    2c38:	13 00                	adc    eax,DWORD PTR [eax]
    2c3a:	00 02                	add    BYTE PTR [edx],al
    2c3c:	04 05                	add    al,0x5
    2c3e:	69 6e 74 00 03 a4 04 	imul   ebp,DWORD PTR [esi+0x74],0x4a40300
    2c45:	00 00                	add    BYTE PTR [eax],al
    2c47:	02 d8                	add    bl,al
    2c49:	37                   	aaa    
    2c4a:	00 00                	add    BYTE PTR [eax],al
    2c4c:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2c4f:	07                   	pop    es
    2c50:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2c53:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2c56:	05 05 00 00 00       	add    eax,0x5
    2c5b:	04 08                	add    al,0x8
    2c5d:	05 00 00 00 00       	add    eax,0x0
    2c62:	04 0c                	add    al,0xc
    2c64:	04 9b                	add    al,0x9b
    2c66:	00 00                	add    BYTE PTR [eax],al
    2c68:	00 05 f3 09 00 00    	add    BYTE PTR ds:0x9f3,al
    2c6e:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    2c74:	cc                   	int3   
    2c75:	19 00                	sbb    DWORD PTR [eax],eax
    2c77:	30 60 00             	xor    BYTE PTR [eax+0x0],ah
    2c7a:	00 00                	add    BYTE PTR [eax],al
    2c7c:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    2c83:	73 31                	jae    2cb6 <sysEnter_Vector-0x12d34a>
    2c85:	00 01                	add    BYTE PTR [ecx],al
    2c87:	0d 9f 00 00 00       	or     eax,0x9f
    2c8c:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    2c92:	00 01                	add    BYTE PTR [ecx],al
    2c94:	0d ac 00 00 00       	or     eax,0xac
    2c99:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    2c9f:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    2ca5:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    2cab:	01 0f                	add    DWORD PTR [edi],ecx
    2cad:	9f                   	lahf   
    2cae:	00 00                	add    BYTE PTR [eax],al
    2cb0:	00 02                	add    BYTE PTR [edx],al
    2cb2:	91                   	xchg   ecx,eax
    2cb3:	74 00                	je     2cb5 <sysEnter_Vector-0x12d34b>
    2cb5:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    2cbc:	01 06                	add    DWORD PTR [esi],eax
    2cbe:	64 00 00             	add    BYTE PTR fs:[eax],al
    2cc1:	00 08                	add    BYTE PTR [eax],cl
    2cc3:	04 b2                	add    al,0xb2
    2cc5:	00 00                	add    BYTE PTR [eax],al
    2cc7:	00 09                	add    BYTE PTR [ecx],cl
    2cc9:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2cca:	00 00                	add    BYTE PTR [eax],al
    2ccc:	00 0a                	add    BYTE PTR [edx],cl
    2cce:	fc                   	cld    
    2ccf:	09 00                	or     DWORD PTR [eax],eax
    2cd1:	00 01                	add    BYTE PTR [ecx],al
    2cd3:	1b 9f 00 00 00 2c    	sbb    ebx,DWORD PTR [edi+0x2c000000]
    2cd9:	1a 00                	sbb    al,BYTE PTR [eax]
    2cdb:	30 20                	xor    BYTE PTR [eax],ah
    2cdd:	00 00                	add    BYTE PTR [eax],al
    2cdf:	00 01                	add    BYTE PTR [ecx],al
    2ce1:	9c                   	pushf  
    2ce2:	06                   	push   es
    2ce3:	73 31                	jae    2d16 <sysEnter_Vector-0x12d2ea>
    2ce5:	00 01                	add    BYTE PTR [ecx],al
    2ce7:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    2ced:	91                   	xchg   ecx,eax
    2cee:	00 06                	add    BYTE PTR [esi],al
    2cf0:	73 32                	jae    2d24 <sysEnter_Vector-0x12d2dc>
    2cf2:	00 01                	add    BYTE PTR [ecx],al
    2cf4:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    2cfb:	04 06                	add    al,0x6
    2cfd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2cfe:	00 01                	add    BYTE PTR [ecx],al
    2d00:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    2d03:	00 00                	add    BYTE PTR [eax],al
    2d05:	02 91 08 00 00 92    	add    dl,BYTE PTR [ecx-0x6dfffff8]
    2d0b:	01 00                	add    DWORD PTR [eax],eax
    2d0d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2d10:	df 0f                	fisttp WORD PTR [edi]
    2d12:	00 00                	add    BYTE PTR [eax],al
    2d14:	04 01                	add    al,0x1
    2d16:	f4                   	hlt    
    2d17:	00 00                	add    BYTE PTR [eax],al
    2d19:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    2d1c:	0a 00                	or     al,BYTE PTR [eax]
    2d1e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2d21:	00 00                	add    BYTE PTR [eax],al
    2d23:	4c                   	dec    esp
    2d24:	1a 00                	sbb    al,BYTE PTR [eax]
    2d26:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    2d29:	00 00                	add    BYTE PTR [eax],al
    2d2b:	b2 13                	mov    dl,0x13
    2d2d:	00 00                	add    BYTE PTR [eax],al
    2d2f:	02 01                	add    al,BYTE PTR [ecx]
    2d31:	06                   	push   es
    2d32:	64 00 00             	add    BYTE PTR fs:[eax],al
    2d35:	00 02                	add    BYTE PTR [edx],al
    2d37:	01 06                	add    DWORD PTR [esi],eax
    2d39:	5d                   	pop    ebp
    2d3a:	00 00                	add    BYTE PTR [eax],al
    2d3c:	00 02                	add    BYTE PTR [edx],al
    2d3e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2d44:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2d4b:	02 08                	add    cl,BYTE PTR [eax]
    2d4d:	05 00 00 00 00       	add    eax,0x0
    2d52:	02 01                	add    al,BYTE PTR [ecx]
    2d54:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2d57:	00 00                	add    BYTE PTR [eax],al
    2d59:	02 02                	add    al,BYTE PTR [edx]
    2d5b:	07                   	pop    es
    2d5c:	0e                   	push   cs
    2d5d:	00 00                	add    BYTE PTR [eax],al
    2d5f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2d62:	00 00                	add    BYTE PTR [eax],al
    2d64:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2d67:	61                   	popa   
    2d68:	00 00                	add    BYTE PTR [eax],al
    2d6a:	00 02                	add    BYTE PTR [edx],al
    2d6c:	04 07                	add    al,0x7
    2d6e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2d71:	00 02                	add    BYTE PTR [edx],al
    2d73:	08 07                	or     BYTE PTR [edi],al
    2d75:	34 00                	xor    al,0x0
    2d77:	00 00                	add    BYTE PTR [eax],al
    2d79:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2d80:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2d83:	9b                   	fwait
    2d84:	00 00                	add    BYTE PTR [eax],al
    2d86:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2d8c:	00 06                	add    BYTE PTR [esi],al
    2d8e:	25 00 00 00 02       	and    eax,0x2000000
    2d93:	01 02                	add    DWORD PTR [edx],eax
    2d95:	95                   	xchg   ebp,eax
    2d96:	00 00                	add    BYTE PTR [eax],al
    2d98:	00 02                	add    BYTE PTR [edx],al
    2d9a:	04 07                	add    al,0x7
    2d9c:	39 00                	cmp    DWORD PTR [eax],eax
    2d9e:	00 00                	add    BYTE PTR [eax],al
    2da0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2da3:	e1 00                	loope  2da5 <sysEnter_Vector-0x12d25b>
    2da5:	00 00                	add    BYTE PTR [eax],al
    2da7:	05 04 25 00 00       	add    eax,0x2504
    2dac:	00 07                	add    BYTE PTR [edi],al
    2dae:	27                   	daa    
    2daf:	0a 00                	or     al,BYTE PTR [eax]
    2db1:	00 01                	add    BYTE PTR [ecx],al
    2db3:	3b 8f 00 00 00 4c    	cmp    ecx,DWORD PTR [edi+0x4c000000]
    2db9:	1a 00                	sbb    al,BYTE PTR [eax]
    2dbb:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    2dbe:	00 00                	add    BYTE PTR [eax],al
    2dc0:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    2dc7:	36 0a 00             	or     al,BYTE PTR ss:[eax]
    2dca:	00 01                	add    BYTE PTR [ecx],al
    2dcc:	3b 7d 00             	cmp    edi,DWORD PTR [ebp+0x0]
    2dcf:	00 00                	add    BYTE PTR [eax],al
    2dd1:	02 91 00 08 2f 0a    	add    dl,BYTE PTR [ecx+0xa2f0800]
    2dd7:	00 00                	add    BYTE PTR [eax],al
    2dd9:	01 3b                	add    DWORD PTR [ebx],edi
    2ddb:	3a 01                	cmp    al,BYTE PTR [ecx]
    2ddd:	00 00                	add    BYTE PTR [eax],al
    2ddf:	02 91 04 08 3b 0a    	add    dl,BYTE PTR [ecx+0xa3b0804]
    2de5:	00 00                	add    BYTE PTR [eax],al
    2de7:	01 3b                	add    DWORD PTR [ebx],edi
    2de9:	3a 00                	cmp    al,BYTE PTR [eax]
    2deb:	00 00                	add    BYTE PTR [eax],al
    2ded:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    2df3:	01 3d 7d 00 00 00    	add    DWORD PTR ds:0x7d,edi
    2df9:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    2dfc:	61                   	popa   
    2dfd:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    2e00:	01 3e                	add    DWORD PTR [esi],edi
    2e02:	8f 00                	pop    DWORD PTR [eax]
    2e04:	00 00                	add    BYTE PTR [eax],al
    2e06:	01 57 09             	add    DWORD PTR [edi+0x9],edx
    2e09:	63 00                	arpl   WORD PTR [eax],ax
    2e0b:	01 3f                	add    DWORD PTR [edi],edi
    2e0d:	3a 00                	cmp    al,BYTE PTR [eax]
    2e0f:	00 00                	add    BYTE PTR [eax],al
    2e11:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    2e14:	19 0a                	sbb    DWORD PTR [edx],ecx
    2e16:	00 00                	add    BYTE PTR [eax],al
    2e18:	01 40 8f             	add    DWORD PTR [eax-0x71],eax
    2e1b:	00 00                	add    BYTE PTR [eax],al
    2e1d:	00 0b                	add    BYTE PTR [ebx],cl
    2e1f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2e20:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    2e24:	41                   	inc    ecx
    2e25:	3a 00                	cmp    al,BYTE PTR [eax]
    2e27:	00 00                	add    BYTE PTR [eax],al
    2e29:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2e2c:	79 00                	jns    2e2e <sysEnter_Vector-0x12d1d2>
    2e2e:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    2e31:	00 00                	add    BYTE PTR [eax],al
    2e33:	00 01                	add    BYTE PTR [ecx],al
    2e35:	51                   	push   ecx
    2e36:	0c 20                	or     al,0x20
    2e38:	0a 00                	or     al,BYTE PTR [eax]
    2e3a:	00 01                	add    BYTE PTR [ecx],al
    2e3c:	41                   	inc    ecx
    2e3d:	3a 00                	cmp    al,BYTE PTR [eax]
    2e3f:	00 00                	add    BYTE PTR [eax],al
    2e41:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    2e44:	05 04 9d 00 00       	add    eax,0x9d04
    2e49:	00 0d 4b 00 00 00    	add    BYTE PTR ds:0x4b,cl
    2e4f:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2e52:	00 00                	add    BYTE PTR [eax],al
    2e54:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    2e5a:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
    2e60:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    2e66:	05 03 60 46 00       	add    eax,0x466003
    2e6b:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
    2e71:	02 36                	add    dh,BYTE PTR [esi]
    2e73:	56                   	push   esi
    2e74:	00 00                	add    BYTE PTR [eax],al
    2e76:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    2e7c:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    2e82:	02 37                	add    dh,BYTE PTR [edi]
    2e84:	56                   	push   esi
    2e85:	00 00                	add    BYTE PTR [eax],al
    2e87:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    2e8d:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    2e93:	03 49 3a             	add    ecx,DWORD PTR [ecx+0x3a]
    2e96:	01 00                	add    DWORD PTR [eax],eax
    2e98:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    2e9e:	30 00                	xor    BYTE PTR [eax],al
    2ea0:	6c                   	ins    BYTE PTR es:[edi],dx
    2ea1:	00 00                	add    BYTE PTR [eax],al
    2ea3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2ea6:	9a 10 00 00 04 01 f4 	call   0xf401:0x4000010
    2ead:	00 00                	add    BYTE PTR [eax],al
    2eaf:	00 0c 40             	add    BYTE PTR [eax+eax*2],cl
    2eb2:	0a 00                	or     al,BYTE PTR [eax]
    2eb4:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2eb7:	00 00                	add    BYTE PTR [eax],al
    2eb9:	cc                   	int3   
    2eba:	1b 00                	sbb    eax,DWORD PTR [eax]
    2ebc:	30 1d 00 00 00 ff    	xor    BYTE PTR ds:0xff000000,bl
    2ec2:	14 00                	adc    al,0x0
    2ec4:	00 02                	add    BYTE PTR [edx],al
    2ec6:	57                   	push   edi
    2ec7:	0a 00                	or     al,BYTE PTR [eax]
    2ec9:	00 01                	add    BYTE PTR [ecx],al
    2ecb:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    2ece:	00 00                	add    BYTE PTR [eax],al
    2ed0:	cc                   	int3   
    2ed1:	1b 00                	sbb    eax,DWORD PTR [eax]
    2ed3:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    2ed9:	9c                   	pushf  
    2eda:	5b                   	pop    ebx
    2edb:	00 00                	add    BYTE PTR [eax],al
    2edd:	00 03                	add    BYTE PTR [ebx],al
    2edf:	76 61                	jbe    2f42 <sysEnter_Vector-0x12d0be>
    2ee1:	6c                   	ins    BYTE PTR es:[edi],dx
    2ee2:	00 01                	add    BYTE PTR [ecx],al
    2ee4:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    2ee7:	00 00                	add    BYTE PTR [eax],al
    2ee9:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    2eef:	74 00                	je     2ef1 <sysEnter_Vector-0x12d10f>
    2ef1:	01 01                	add    DWORD PTR [ecx],eax
    2ef3:	68 00 00 00 02       	push   0x2000000
    2ef8:	91                   	xchg   ecx,eax
    2ef9:	04 00                	add    al,0x0
    2efb:	04 04                	add    al,0x4
    2efd:	61                   	popa   
    2efe:	00 00                	add    BYTE PTR [eax],al
    2f00:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    2f06:	00 00                	add    BYTE PTR [eax],al
    2f08:	06                   	push   es
    2f09:	04 05                	add    al,0x5
    2f0b:	69 6e 74 00 00 90 01 	imul   ebp,DWORD PTR [esi+0x74],0x1900000
    2f12:	00 00                	add    BYTE PTR [eax],al
    2f14:	04 00                	add    al,0x0
    2f16:	f8                   	clc    
    2f17:	10 00                	adc    BYTE PTR [eax],al
    2f19:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2f1c:	f4                   	hlt    
    2f1d:	00 00                	add    BYTE PTR [eax],al
    2f1f:	00 0c 5f             	add    BYTE PTR [edi+ebx*2],cl
    2f22:	0a 00                	or     al,BYTE PTR [eax]
    2f24:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2f27:	00 00                	add    BYTE PTR [eax],al
    2f29:	ec                   	in     al,dx
    2f2a:	1b 00                	sbb    eax,DWORD PTR [eax]
    2f2c:	30 9c 01 00 00 46 15 	xor    BYTE PTR [ecx+eax*1+0x15460000],bl
    2f33:	00 00                	add    BYTE PTR [eax],al
    2f35:	02 01                	add    al,BYTE PTR [ecx]
    2f37:	06                   	push   es
    2f38:	64 00 00             	add    BYTE PTR fs:[eax],al
    2f3b:	00 02                	add    BYTE PTR [edx],al
    2f3d:	01 06                	add    DWORD PTR [esi],eax
    2f3f:	5d                   	pop    ebp
    2f40:	00 00                	add    BYTE PTR [eax],al
    2f42:	00 02                	add    BYTE PTR [edx],al
    2f44:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2f4a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2f51:	02 08                	add    cl,BYTE PTR [eax]
    2f53:	05 00 00 00 00       	add    eax,0x0
    2f58:	02 01                	add    al,BYTE PTR [ecx]
    2f5a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2f5d:	00 00                	add    BYTE PTR [eax],al
    2f5f:	02 02                	add    al,BYTE PTR [edx]
    2f61:	07                   	pop    es
    2f62:	0e                   	push   cs
    2f63:	00 00                	add    BYTE PTR [eax],al
    2f65:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2f68:	00 00                	add    BYTE PTR [eax],al
    2f6a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2f6d:	61                   	popa   
    2f6e:	00 00                	add    BYTE PTR [eax],al
    2f70:	00 02                	add    BYTE PTR [edx],al
    2f72:	04 07                	add    al,0x7
    2f74:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2f77:	00 02                	add    BYTE PTR [edx],al
    2f79:	08 07                	or     BYTE PTR [edi],al
    2f7b:	34 00                	xor    al,0x0
    2f7d:	00 00                	add    BYTE PTR [eax],al
    2f7f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f86:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2f89:	9b                   	fwait
    2f8a:	00 00                	add    BYTE PTR [eax],al
    2f8c:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2f92:	00 06                	add    BYTE PTR [esi],al
    2f94:	25 00 00 00 02       	and    eax,0x2000000
    2f99:	01 02                	add    DWORD PTR [edx],eax
    2f9b:	95                   	xchg   ebp,eax
    2f9c:	00 00                	add    BYTE PTR [eax],al
    2f9e:	00 02                	add    BYTE PTR [edx],al
    2fa0:	04 07                	add    al,0x7
    2fa2:	39 00                	cmp    DWORD PTR [eax],eax
    2fa4:	00 00                	add    BYTE PTR [eax],al
    2fa6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2fa9:	e1 00                	loope  2fab <sysEnter_Vector-0x12d055>
    2fab:	00 00                	add    BYTE PTR [eax],al
    2fad:	05 04 25 00 00       	add    eax,0x2504
    2fb2:	00 07                	add    BYTE PTR [edi],al
    2fb4:	74 0a                	je     2fc0 <sysEnter_Vector-0x12d040>
    2fb6:	00 00                	add    BYTE PTR [eax],al
    2fb8:	01 57 6f             	add    DWORD PTR [edi+0x6f],edx
    2fbb:	00 00                	add    BYTE PTR [eax],al
    2fbd:	00 ec                	add    ah,ch
    2fbf:	1b 00                	sbb    eax,DWORD PTR [eax]
    2fc1:	30 9c 01 00 00 01 9c 	xor    BYTE PTR [ecx+eax*1-0x63ff0000],bl
    2fc8:	38 01                	cmp    BYTE PTR [ecx],al
    2fca:	00 00                	add    BYTE PTR [eax],al
    2fcc:	08 36                	or     BYTE PTR [esi],dh
    2fce:	0a 00                	or     al,BYTE PTR [eax]
    2fd0:	00 01                	add    BYTE PTR [ecx],al
    2fd2:	57                   	push   edi
    2fd3:	7d 00                	jge    2fd5 <sysEnter_Vector-0x12d02b>
    2fd5:	00 00                	add    BYTE PTR [eax],al
    2fd7:	02 91 00 08 2f 0a    	add    dl,BYTE PTR [ecx+0xa2f0800]
    2fdd:	00 00                	add    BYTE PTR [eax],al
    2fdf:	01 57 38             	add    DWORD PTR [edi+0x38],edx
    2fe2:	01 00                	add    DWORD PTR [eax],eax
    2fe4:	00 02                	add    BYTE PTR [edx],al
    2fe6:	91                   	xchg   ecx,eax
    2fe7:	04 08                	add    al,0x8
    2fe9:	3b 0a                	cmp    ecx,DWORD PTR [edx]
    2feb:	00 00                	add    BYTE PTR [eax],al
    2fed:	01 57 3a             	add    DWORD PTR [edi+0x3a],edx
    2ff0:	00 00                	add    BYTE PTR [eax],al
    2ff2:	00 02                	add    BYTE PTR [edx],al
    2ff4:	91                   	xchg   ecx,eax
    2ff5:	08 09                	or     BYTE PTR [ecx],cl
    2ff7:	73 00                	jae    2ff9 <sysEnter_Vector-0x12d007>
    2ff9:	01 59 7d             	add    DWORD PTR [ecx+0x7d],ebx
    2ffc:	00 00                	add    BYTE PTR [eax],al
    2ffe:	00 01                	add    BYTE PTR [ecx],al
    3000:	56                   	push   esi
    3001:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    3004:	63 00                	arpl   WORD PTR [eax],ax
    3006:	01 5a 8f             	add    DWORD PTR [edx-0x71],ebx
    3009:	00 00                	add    BYTE PTR [eax],al
    300b:	00 01                	add    BYTE PTR [ecx],al
    300d:	57                   	push   edi
    300e:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    3011:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    3014:	00 00                	add    BYTE PTR [eax],al
    3016:	00 01                	add    BYTE PTR [ecx],al
    3018:	53                   	push   ebx
    3019:	0a 19                	or     bl,BYTE PTR [ecx]
    301b:	0a 00                	or     al,BYTE PTR [eax]
    301d:	00 01                	add    BYTE PTR [ecx],al
    301f:	5c                   	pop    esp
    3020:	8f 00                	pop    DWORD PTR [eax]
    3022:	00 00                	add    BYTE PTR [eax],al
    3024:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    3027:	67 00 01             	add    BYTE PTR [bx+di],al
    302a:	5d                   	pop    ebp
    302b:	3a 00                	cmp    al,BYTE PTR [eax]
    302d:	00 00                	add    BYTE PTR [eax],al
    302f:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    3032:	79 00                	jns    3034 <sysEnter_Vector-0x12cfcc>
    3034:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    3037:	00 00                	add    BYTE PTR [eax],al
    3039:	00 01                	add    BYTE PTR [ecx],al
    303b:	51                   	push   ecx
    303c:	0a 20                	or     ah,BYTE PTR [eax]
    303e:	0a 00                	or     al,BYTE PTR [eax]
    3040:	00 01                	add    BYTE PTR [ecx],al
    3042:	5d                   	pop    ebp
    3043:	3a 00                	cmp    al,BYTE PTR [eax]
    3045:	00 00                	add    BYTE PTR [eax],al
    3047:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    304d:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
    3050:	00 00                	add    BYTE PTR [eax],al
    3052:	00 02                	add    BYTE PTR [edx],al
    3054:	34 56                	xor    al,0x56
    3056:	00 00                	add    BYTE PTR [eax],al
    3058:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    305e:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    3061:	00 00                	add    BYTE PTR [eax],al
    3063:	00 02                	add    BYTE PTR [edx],al
    3065:	35 56 00 00 00       	xor    eax,0x56
    306a:	05 03 60 46 00       	add    eax,0x466003
    306f:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    3072:	01 00                	add    DWORD PTR [eax],eax
    3074:	00 02                	add    BYTE PTR [edx],al
    3076:	36                   	ss
    3077:	56                   	push   esi
    3078:	00 00                	add    BYTE PTR [eax],al
    307a:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    3080:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    3083:	00 00                	add    BYTE PTR [eax],al
    3085:	00 02                	add    BYTE PTR [edx],al
    3087:	37                   	aaa    
    3088:	56                   	push   esi
    3089:	00 00                	add    BYTE PTR [eax],al
    308b:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    3091:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    3094:	00 00                	add    BYTE PTR [eax],al
    3096:	00 03                	add    BYTE PTR [ebx],al
    3098:	49                   	dec    ecx
    3099:	38 01                	cmp    BYTE PTR [ecx],al
    309b:	00 00                	add    BYTE PTR [eax],al
    309d:	05 03 64 46 00       	add    eax,0x466403
    30a2:	30 00                	xor    BYTE PTR [eax],al
    30a4:	62 01                	bound  eax,QWORD PTR [ecx]
    30a6:	00 00                	add    BYTE PTR [eax],al
    30a8:	04 00                	add    al,0x0
    30aa:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    30ab:	11 00                	adc    DWORD PTR [eax],eax
    30ad:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    30b0:	f4                   	hlt    
    30b1:	00 00                	add    BYTE PTR [eax],al
    30b3:	00 0c 81             	add    BYTE PTR [ecx+eax*4],cl
    30b6:	0a 00                	or     al,BYTE PTR [eax]
    30b8:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    30bb:	00 00                	add    BYTE PTR [eax],al
    30bd:	88 1d 00 30 b6 00    	mov    BYTE PTR ds:0xb63000,bl
    30c3:	00 00                	add    BYTE PTR [eax],al
    30c5:	bf 16 00 00 02       	mov    edi,0x2000016
    30ca:	01 06                	add    DWORD PTR [esi],eax
    30cc:	64 00 00             	add    BYTE PTR fs:[eax],al
    30cf:	00 02                	add    BYTE PTR [edx],al
    30d1:	01 06                	add    DWORD PTR [esi],eax
    30d3:	5d                   	pop    ebp
    30d4:	00 00                	add    BYTE PTR [eax],al
    30d6:	00 02                	add    BYTE PTR [edx],al
    30d8:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    30de:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    30e5:	02 08                	add    cl,BYTE PTR [eax]
    30e7:	05 00 00 00 00       	add    eax,0x0
    30ec:	02 01                	add    al,BYTE PTR [ecx]
    30ee:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    30f1:	00 00                	add    BYTE PTR [eax],al
    30f3:	02 02                	add    al,BYTE PTR [edx]
    30f5:	07                   	pop    es
    30f6:	0e                   	push   cs
    30f7:	00 00                	add    BYTE PTR [eax],al
    30f9:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    30fc:	00 00                	add    BYTE PTR [eax],al
    30fe:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3101:	61                   	popa   
    3102:	00 00                	add    BYTE PTR [eax],al
    3104:	00 02                	add    BYTE PTR [edx],al
    3106:	04 07                	add    al,0x7
    3108:	3e 00 00             	add    BYTE PTR ds:[eax],al
    310b:	00 02                	add    BYTE PTR [edx],al
    310d:	08 07                	or     BYTE PTR [edi],al
    310f:	34 00                	xor    al,0x0
    3111:	00 00                	add    BYTE PTR [eax],al
    3113:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    311a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    311d:	9b                   	fwait
    311e:	00 00                	add    BYTE PTR [eax],al
    3120:	00 02                	add    BYTE PTR [edx],al
    3122:	01 02                	add    DWORD PTR [edx],eax
    3124:	95                   	xchg   ebp,eax
    3125:	00 00                	add    BYTE PTR [eax],al
    3127:	00 02                	add    BYTE PTR [edx],al
    3129:	04 07                	add    al,0x7
    312b:	39 00                	cmp    DWORD PTR [eax],eax
    312d:	00 00                	add    BYTE PTR [eax],al
    312f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3132:	e1 00                	loope  3134 <sysEnter_Vector-0x12cecc>
    3134:	00 00                	add    BYTE PTR [eax],al
    3136:	05 04 25 00 00       	add    eax,0x2504
    313b:	00 06                	add    BYTE PTR [esi],al
    313d:	9f                   	lahf   
    313e:	0a 00                	or     al,BYTE PTR [eax]
    3140:	00 01                	add    BYTE PTR [ecx],al
    3142:	03 88 1d 00 30 96    	add    ecx,DWORD PTR [eax-0x69cfffe3]
    3148:	00 00                	add    BYTE PTR [eax],al
    314a:	00 01                	add    BYTE PTR [ecx],al
    314c:	9c                   	pushf  
    314d:	e6 00                	out    0x0,al
    314f:	00 00                	add    BYTE PTR [eax],al
    3151:	07                   	pop    es
    3152:	7b 0a                	jnp    315e <sysEnter_Vector-0x12cea2>
    3154:	00 00                	add    BYTE PTR [eax],al
    3156:	01 03                	add    DWORD PTR [ebx],eax
    3158:	92                   	xchg   edx,eax
    3159:	00 00                	add    BYTE PTR [eax],al
    315b:	00 02                	add    BYTE PTR [edx],al
    315d:	91                   	xchg   ecx,eax
    315e:	00 08                	add    BYTE PTR [eax],cl
    3160:	64                   	fs
    3161:	73 74                	jae    31d7 <sysEnter_Vector-0x12ce29>
    3163:	00 01                	add    BYTE PTR [ecx],al
    3165:	05 92 00 00 00       	add    eax,0x92
    316a:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    3170:	63 00                	arpl   WORD PTR [eax],ax
    3172:	01 05 92 00 00 00    	add    DWORD PTR ds:0x92,eax
    3178:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    317e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    3181:	06                   	push   es
    3182:	92                   	xchg   edx,eax
    3183:	00 00                	add    BYTE PTR [eax],al
    3185:	00 02                	add    BYTE PTR [edx],al
    3187:	91                   	xchg   ecx,eax
    3188:	64 00 06             	add    BYTE PTR fs:[esi],al
    318b:	97                   	xchg   edi,eax
    318c:	0a 00                	or     al,BYTE PTR [eax]
    318e:	00 01                	add    BYTE PTR [ecx],al
    3190:	1f                   	pop    ds
    3191:	1e                   	push   ds
    3192:	1e                   	push   ds
    3193:	00 30                	add    BYTE PTR [eax],dh
    3195:	20 00                	and    BYTE PTR [eax],al
    3197:	00 00                	add    BYTE PTR [eax],al
    3199:	01 9c 0a 01 00 00 07 	add    DWORD PTR [edx+ecx*1+0x7000001],ebx
    31a0:	7b 0a                	jnp    31ac <sysEnter_Vector-0x12ce54>
    31a2:	00 00                	add    BYTE PTR [eax],al
    31a4:	01 1f                	add    DWORD PTR [edi],ebx
    31a6:	92                   	xchg   edx,eax
    31a7:	00 00                	add    BYTE PTR [eax],al
    31a9:	00 02                	add    BYTE PTR [edx],al
    31ab:	91                   	xchg   ecx,eax
    31ac:	00 00                	add    BYTE PTR [eax],al
    31ae:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
    31b1:	00 00                	add    BYTE PTR [eax],al
    31b3:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    31b6:	00 00                	add    BYTE PTR [eax],al
    31b8:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    31be:	30 09                	xor    BYTE PTR [ecx],cl
    31c0:	af                   	scas   eax,DWORD PTR es:[edi]
    31c1:	00 00                	add    BYTE PTR [eax],al
    31c3:	00 02                	add    BYTE PTR [edx],al
    31c5:	35 56 00 00 00       	xor    eax,0x56
    31ca:	05 03 60 46 00       	add    eax,0x466003
    31cf:	30 09                	xor    BYTE PTR [ecx],cl
    31d1:	5b                   	pop    ebx
    31d2:	01 00                	add    DWORD PTR [eax],eax
    31d4:	00 02                	add    BYTE PTR [edx],al
    31d6:	36                   	ss
    31d7:	56                   	push   esi
    31d8:	00 00                	add    BYTE PTR [eax],al
    31da:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    31e0:	30 09                	xor    BYTE PTR [ecx],cl
    31e2:	54                   	push   esp
    31e3:	00 00                	add    BYTE PTR [eax],al
    31e5:	00 02                	add    BYTE PTR [edx],al
    31e7:	37                   	aaa    
    31e8:	56                   	push   esi
    31e9:	00 00                	add    BYTE PTR [eax],al
    31eb:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    31f1:	30 09                	xor    BYTE PTR [ecx],cl
    31f3:	28 00                	sub    BYTE PTR [eax],al
    31f5:	00 00                	add    BYTE PTR [eax],al
    31f7:	03 49 5f             	add    ecx,DWORD PTR [ecx+0x5f]
    31fa:	01 00                	add    DWORD PTR [eax],eax
    31fc:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    3202:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    3208:	00 00                	add    BYTE PTR [eax],al
    320a:	93                   	xchg   ebx,eax
    320b:	01 00                	add    DWORD PTR [eax],eax
    320d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3210:	2d 12 00 00 04       	sub    eax,0x4000012
    3215:	01 f4                	add    esp,esi
    3217:	00 00                	add    BYTE PTR [eax],al
    3219:	00 0c b0             	add    BYTE PTR [eax+esi*4],cl
    321c:	0a 00                	or     al,BYTE PTR [eax]
    321e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    3221:	00 00                	add    BYTE PTR [eax],al
    3223:	40                   	inc    eax
    3224:	1e                   	push   ds
    3225:	00 30                	add    BYTE PTR [eax],dh
    3227:	8b 00                	mov    eax,DWORD PTR [eax]
    3229:	00 00                	add    BYTE PTR [eax],al
    322b:	92                   	xchg   edx,eax
    322c:	17                   	pop    ss
    322d:	00 00                	add    BYTE PTR [eax],al
    322f:	02 01                	add    al,BYTE PTR [ecx]
    3231:	06                   	push   es
    3232:	64 00 00             	add    BYTE PTR fs:[eax],al
    3235:	00 02                	add    BYTE PTR [edx],al
    3237:	01 06                	add    DWORD PTR [esi],eax
    3239:	5d                   	pop    ebp
    323a:	00 00                	add    BYTE PTR [eax],al
    323c:	00 02                	add    BYTE PTR [edx],al
    323e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    3244:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    324b:	02 08                	add    cl,BYTE PTR [eax]
    324d:	05 00 00 00 00       	add    eax,0x0
    3252:	02 01                	add    al,BYTE PTR [ecx]
    3254:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    3257:	00 00                	add    BYTE PTR [eax],al
    3259:	02 02                	add    al,BYTE PTR [edx]
    325b:	07                   	pop    es
    325c:	0e                   	push   cs
    325d:	00 00                	add    BYTE PTR [eax],al
    325f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    3262:	00 00                	add    BYTE PTR [eax],al
    3264:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3267:	61                   	popa   
    3268:	00 00                	add    BYTE PTR [eax],al
    326a:	00 02                	add    BYTE PTR [edx],al
    326c:	04 07                	add    al,0x7
    326e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3271:	00 02                	add    BYTE PTR [edx],al
    3273:	08 07                	or     BYTE PTR [edi],al
    3275:	34 00                	xor    al,0x0
    3277:	00 00                	add    BYTE PTR [eax],al
    3279:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3280:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3283:	9b                   	fwait
    3284:	00 00                	add    BYTE PTR [eax],al
    3286:	00 02                	add    BYTE PTR [edx],al
    3288:	01 02                	add    DWORD PTR [edx],eax
    328a:	95                   	xchg   ebp,eax
    328b:	00 00                	add    BYTE PTR [eax],al
    328d:	00 02                	add    BYTE PTR [edx],al
    328f:	04 07                	add    al,0x7
    3291:	39 00                	cmp    DWORD PTR [eax],eax
    3293:	00 00                	add    BYTE PTR [eax],al
    3295:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3298:	e1 00                	loope  329a <sysEnter_Vector-0x12cd66>
    329a:	00 00                	add    BYTE PTR [eax],al
    329c:	05 04 25 00 00       	add    eax,0x2504
    32a1:	00 06                	add    BYTE PTR [esi],al
    32a3:	a8 0a                	test   al,0xa
    32a5:	00 00                	add    BYTE PTR [eax],al
    32a7:	01 33                	add    DWORD PTR [ebx],esi
    32a9:	92                   	xchg   edx,eax
    32aa:	00 00                	add    BYTE PTR [eax],al
    32ac:	00 40 1e             	add    BYTE PTR [eax+0x1e],al
    32af:	00 30                	add    BYTE PTR [eax],dh
    32b1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    32b2:	00 00                	add    BYTE PTR [eax],al
    32b4:	00 01                	add    BYTE PTR [ecx],al
    32b6:	9c                   	pushf  
    32b7:	e4 00                	in     al,0x0
    32b9:	00 00                	add    BYTE PTR [eax],al
    32bb:	07                   	pop    es
    32bc:	cd 0a                	int    0xa
    32be:	00 00                	add    BYTE PTR [eax],al
    32c0:	01 33                	add    DWORD PTR [ebx],esi
    32c2:	92                   	xchg   edx,eax
    32c3:	00 00                	add    BYTE PTR [eax],al
    32c5:	00 02                	add    BYTE PTR [edx],al
    32c7:	91                   	xchg   ecx,eax
    32c8:	00 07                	add    BYTE PTR [edi],al
    32ca:	ca 0a 00             	retf   0xa
    32cd:	00 01                	add    BYTE PTR [ecx],al
    32cf:	33 92 00 00 00 02    	xor    edx,DWORD PTR [edx+0x2000000]
    32d5:	91                   	xchg   ecx,eax
    32d6:	04 08                	add    al,0x8
    32d8:	61                   	popa   
    32d9:	00 01                	add    BYTE PTR [ecx],al
    32db:	35 92 00 00 00       	xor    eax,0x92
    32e0:	01 56 08             	add    DWORD PTR [esi+0x8],edx
    32e3:	62 00                	bound  eax,QWORD PTR [eax]
    32e5:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
    32eb:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
    32ee:	09 bd 0a 00 00 01    	or     DWORD PTR [ebp+0x100000a],edi
    32f4:	52                   	push   edx
    32f5:	92                   	xchg   edx,eax
    32f6:	00 00                	add    BYTE PTR [eax],al
    32f8:	00 ae 1e 00 30 1d    	add    BYTE PTR [esi+0x1d30001e],ch
    32fe:	00 00                	add    BYTE PTR [eax],al
    3300:	00 01                	add    BYTE PTR [ecx],al
    3302:	9c                   	pushf  
    3303:	1a 01                	sbb    al,BYTE PTR [ecx]
    3305:	00 00                	add    BYTE PTR [eax],al
    3307:	07                   	pop    es
    3308:	cd 0a                	int    0xa
    330a:	00 00                	add    BYTE PTR [eax],al
    330c:	01 52 92             	add    DWORD PTR [edx-0x6e],edx
    330f:	00 00                	add    BYTE PTR [eax],al
    3311:	00 02                	add    BYTE PTR [edx],al
    3313:	91                   	xchg   ecx,eax
    3314:	00 07                	add    BYTE PTR [edi],al
    3316:	ca 0a 00             	retf   0xa
    3319:	00 01                	add    BYTE PTR [ecx],al
    331b:	52                   	push   edx
    331c:	92                   	xchg   edx,eax
    331d:	00 00                	add    BYTE PTR [eax],al
    331f:	00 02                	add    BYTE PTR [edx],al
    3321:	91                   	xchg   ecx,eax
    3322:	04 00                	add    al,0x0
    3324:	0a 25 00 00 00 2a    	or     ah,BYTE PTR ds:0x2a000000
    332a:	01 00                	add    DWORD PTR [eax],eax
    332c:	00 0b                	add    BYTE PTR [ebx],cl
    332e:	8b 00                	mov    eax,DWORD PTR [eax]
    3330:	00 00                	add    BYTE PTR [eax],al
    3332:	65 00 0c c4          	add    BYTE PTR gs:[esp+eax*8],cl
    3336:	0a 00                	or     al,BYTE PTR [eax]
    3338:	00 01                	add    BYTE PTR [ecx],al
    333a:	19 1a                	sbb    DWORD PTR [edx],ebx
    333c:	01 00                	add    DWORD PTR [eax],eax
    333e:	00 05 03 00 45 00    	add    BYTE PTR ds:0x450003,al
    3344:	30 0d 4b 00 00 00    	xor    BYTE PTR ds:0x4b,cl
    334a:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    334d:	00 00                	add    BYTE PTR [eax],al
    334f:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    3355:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
    335b:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    3361:	05 03 60 46 00       	add    eax,0x466003
    3366:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
    336c:	02 36                	add    dh,BYTE PTR [esi]
    336e:	56                   	push   esi
    336f:	00 00                	add    BYTE PTR [eax],al
    3371:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    3377:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    337d:	02 37                	add    dh,BYTE PTR [edi]
    337f:	56                   	push   esi
    3380:	00 00                	add    BYTE PTR [eax],al
    3382:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    3388:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    338e:	03 49 90             	add    ecx,DWORD PTR [ecx-0x70]
    3391:	01 00                	add    DWORD PTR [eax],eax
    3393:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    3399:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    339f:	00 00                	add    BYTE PTR [eax],al
    33a1:	4b                   	dec    ebx
    33a2:	05 00 00 04 00       	add    eax,0x40000
    33a7:	f5                   	cmc    
    33a8:	12 00                	adc    al,BYTE PTR [eax]
    33aa:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    33ad:	f4                   	hlt    
    33ae:	00 00                	add    BYTE PTR [eax],al
    33b0:	00 0c d4             	add    BYTE PTR [esp+edx*8],cl
    33b3:	0a 00                	or     al,BYTE PTR [eax]
    33b5:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    33b8:	00 00                	add    BYTE PTR [eax],al
    33ba:	cc                   	int3   
    33bb:	1e                   	push   ds
    33bc:	00 30                	add    BYTE PTR [eax],dh
    33be:	bb 0c 00 00 5d       	mov    ebx,0x5d00000c
    33c3:	18 00                	sbb    BYTE PTR [eax],al
    33c5:	00 02                	add    BYTE PTR [edx],al
    33c7:	17                   	pop    ss
    33c8:	03 00                	add    eax,DWORD PTR [eax]
    33ca:	00 04 e7             	add    BYTE PTR [edi+eiz*8],al
    33cd:	00 00                	add    BYTE PTR [eax],al
    33cf:	00 06                	add    BYTE PTR [esi],al
    33d1:	15 e7 00 00 00       	adc    eax,0xe7
    33d6:	03 7c 03 00          	add    edi,DWORD PTR [ebx+eax*1+0x0]
    33da:	00 00                	add    BYTE PTR [eax],al
    33dc:	03 b4 03 00 00 01 03 	add    esi,DWORD PTR [ebx+eax*1+0x3010000]
    33e3:	73 02                	jae    33e7 <sysEnter_Vector-0x12cc19>
    33e5:	00 00                	add    BYTE PTR [eax],al
    33e7:	02 03                	add    al,BYTE PTR [ebx]
    33e9:	09 03                	or     DWORD PTR [ebx],eax
    33eb:	00 00                	add    BYTE PTR [eax],al
    33ed:	03 03                	add    eax,DWORD PTR [ebx]
    33ef:	53                   	push   ebx
    33f0:	02 00                	add    al,BYTE PTR [eax]
    33f2:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    33f5:	ce                   	into   
    33f6:	03 00                	add    eax,DWORD PTR [eax]
    33f8:	00 05 03 2d 03 00    	add    BYTE PTR ds:0x32d03,al
    33fe:	00 06                	add    BYTE PTR [esi],al
    3400:	03 66 02             	add    esp,DWORD PTR [esi+0x2]
    3403:	00 00                	add    BYTE PTR [eax],al
    3405:	07                   	pop    es
    3406:	03 04 04             	add    eax,DWORD PTR [esp+eax*1]
    3409:	00 00                	add    BYTE PTR [eax],al
    340b:	4f                   	dec    edi
    340c:	03 6f 03             	add    ebp,DWORD PTR [edi+0x3]
    340f:	00 00                	add    BYTE PTR [eax],al
    3411:	59                   	pop    ecx
    3412:	03 13                	add    edx,DWORD PTR [ebx]
    3414:	04 00                	add    al,0x0
    3416:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    3419:	f5                   	cmc    
    341a:	02 00                	add    al,BYTE PTR [eax]
    341c:	00 97 04 8c 03 00    	add    BYTE PTR [edi+0x38c04],dl
    3422:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    3425:	04 62                	add    al,0x62
    3427:	03 00                	add    eax,DWORD PTR [eax]
    3429:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    342d:	f6 03 00             	test   BYTE PTR [ebx],0x0
    3430:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    3433:	04 d7                	add    al,0xd7
    3435:	02 00                	add    al,BYTE PTR [eax]
    3437:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    343a:	04 2b                	add    al,0x2b
    343c:	04 00                	add    al,0x0
    343e:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    3441:	04 3a                	add    al,0x3a
    3443:	03 00                	add    eax,DWORD PTR [eax]
    3445:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    3448:	04 ac                	add    al,0xac
    344a:	02 00                	add    al,BYTE PTR [eax]
    344c:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    344f:	04 a3                	add    al,0xa3
    3451:	03 00                	add    eax,DWORD PTR [eax]
    3453:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    3456:	04 e5                	add    al,0xe5
    3458:	02 00                	add    al,BYTE PTR [eax]
    345a:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    345d:	04 dc                	add    al,0xdc
    345f:	03 00                	add    eax,DWORD PTR [eax]
    3461:	00 00                	add    BYTE PTR [eax],al
    3463:	03 04 47             	add    eax,DWORD PTR [edi+eax*2]
    3466:	03 00                	add    eax,DWORD PTR [eax]
    3468:	00 01                	add    BYTE PTR [ecx],al
    346a:	03 04 bb             	add    eax,DWORD PTR [ebx+edi*4]
    346d:	02 00                	add    al,BYTE PTR [eax]
    346f:	00 02                	add    BYTE PTR [edx],al
    3471:	03 04 80             	add    eax,DWORD PTR [eax+eax*4]
    3474:	02 00                	add    al,BYTE PTR [eax]
    3476:	00 03                	add    BYTE PTR [ebx],al
    3478:	03 04 90             	add    eax,DWORD PTR [eax+edx*4]
    347b:	02 00                	add    al,BYTE PTR [eax]
    347d:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    3480:	04 c7                	add    al,0xc7
    3482:	02 00                	add    al,BYTE PTR [eax]
    3484:	00 05 03 00 05 04    	add    BYTE PTR ds:0x4050003,al
    348a:	07                   	pop    es
    348b:	3e 00 00             	add    BYTE PTR ds:[eax],al
    348e:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    3494:	00 00                	add    BYTE PTR [eax],al
    3496:	05 01 06 5d 00       	add    eax,0x5d0601
    349b:	00 00                	add    BYTE PTR [eax],al
    349d:	05 02 05 ea 00       	add    eax,0xea0502
    34a2:	00 00                	add    BYTE PTR [eax],al
    34a4:	06                   	push   es
    34a5:	04 05                	add    al,0x5
    34a7:	69 6e 74 00 05 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080500
    34ae:	00 00                	add    BYTE PTR [eax],al
    34b0:	00 00                	add    BYTE PTR [eax],al
    34b2:	05 01 08 5b 00       	add    eax,0x5b0801
    34b7:	00 00                	add    BYTE PTR [eax],al
    34b9:	05 02 07 0e 00       	add    eax,0xe0702
    34be:	00 00                	add    BYTE PTR [eax],al
    34c0:	07                   	pop    es
    34c1:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    34c7:	e7 00                	out    0x0,eax
    34c9:	00 00                	add    BYTE PTR [eax],al
    34cb:	05 08 07 34 00       	add    eax,0x340708
    34d0:	00 00                	add    BYTE PTR [eax],al
    34d2:	05 04 05 05 00       	add    eax,0x50504
    34d7:	00 00                	add    BYTE PTR [eax],al
    34d9:	05 0c 04 9b 00       	add    eax,0x9b040c
    34de:	00 00                	add    BYTE PTR [eax],al
    34e0:	07                   	pop    es
    34e1:	76 0b                	jbe    34ee <sysEnter_Vector-0x12cb12>
    34e3:	00 00                	add    BYTE PTR [eax],al
    34e5:	03 2a                	add    ebp,DWORD PTR [edx]
    34e7:	31 01                	xor    DWORD PTR [ecx],eax
    34e9:	00 00                	add    BYTE PTR [eax],al
    34eb:	08 74 6d 00          	or     BYTE PTR [ebp+ebp*2+0x0],dh
    34ef:	2c 03                	sub    al,0x3
    34f1:	2c da                	sub    al,0xda
    34f3:	01 00                	add    DWORD PTR [eax],eax
    34f5:	00 09                	add    BYTE PTR [ecx],cl
    34f7:	b9 0b 00 00 03       	mov    ecx,0x300000b
    34fc:	2e 03 01             	add    eax,DWORD PTR cs:[ecx]
    34ff:	00 00                	add    BYTE PTR [eax],al
    3501:	00 09                	add    BYTE PTR [ecx],cl
    3503:	57                   	push   edi
    3504:	0b 00                	or     eax,DWORD PTR [eax]
    3506:	00 03                	add    BYTE PTR [ebx],al
    3508:	2f                   	das    
    3509:	03 01                	add    eax,DWORD PTR [ecx]
    350b:	00 00                	add    BYTE PTR [eax],al
    350d:	04 09                	add    al,0x9
    350f:	e9 0a 00 00 03       	jmp    300351e <sysEnter_Vector+0x2ed351e>
    3514:	30 03                	xor    BYTE PTR [ebx],al
    3516:	01 00                	add    DWORD PTR [eax],eax
    3518:	00 08                	add    BYTE PTR [eax],cl
    351a:	09 b1 0b 00 00 03    	or     DWORD PTR [ecx+0x300000b],esi
    3520:	31 03                	xor    DWORD PTR [ebx],eax
    3522:	01 00                	add    DWORD PTR [eax],eax
    3524:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    3527:	21 0b                	and    DWORD PTR [ebx],ecx
    3529:	00 00                	add    BYTE PTR [eax],al
    352b:	03 32                	add    esi,DWORD PTR [edx]
    352d:	03 01                	add    eax,DWORD PTR [ecx]
    352f:	00 00                	add    BYTE PTR [eax],al
    3531:	10 09                	adc    BYTE PTR [ecx],cl
    3533:	28 0b                	sub    BYTE PTR [ebx],cl
    3535:	00 00                	add    BYTE PTR [eax],al
    3537:	03 33                	add    esi,DWORD PTR [ebx]
    3539:	03 01                	add    eax,DWORD PTR [ecx]
    353b:	00 00                	add    BYTE PTR [eax],al
    353d:	14 09                	adc    al,0x9
    353f:	a3 0b 00 00 03       	mov    ds:0x300000b,eax
    3544:	34 03                	xor    al,0x3
    3546:	01 00                	add    DWORD PTR [eax],eax
    3548:	00 18                	add    BYTE PTR [eax],bl
    354a:	09 5e 0b             	or     DWORD PTR [esi+0xb],ebx
    354d:	00 00                	add    BYTE PTR [eax],al
    354f:	03 35 03 01 00 00    	add    esi,DWORD PTR ds:0x103
    3555:	1c 09                	sbb    al,0x9
    3557:	3e 0b 00             	or     eax,DWORD PTR ds:[eax]
    355a:	00 03                	add    BYTE PTR [ebx],al
    355c:	36 03 01             	add    eax,DWORD PTR ss:[ecx]
    355f:	00 00                	add    BYTE PTR [eax],al
    3561:	20 09                	and    BYTE PTR [ecx],cl
    3563:	99                   	cdq    
    3564:	0b 00                	or     eax,DWORD PTR [eax]
    3566:	00 03                	add    BYTE PTR [ebx],al
    3568:	37                   	aaa    
    3569:	31 01                	xor    DWORD PTR [ecx],eax
    356b:	00 00                	add    BYTE PTR [eax],al
    356d:	24 09                	and    al,0x9
    356f:	c0 0b 00             	ror    BYTE PTR [ebx],0x0
    3572:	00 03                	add    BYTE PTR [ebx],al
    3574:	38 da                	cmp    dl,bl
    3576:	01 00                	add    DWORD PTR [eax],eax
    3578:	00 28                	add    BYTE PTR [eax],ch
    357a:	00 0a                	add    BYTE PTR [edx],cl
    357c:	04 e0                	add    al,0xe0
    357e:	01 00                	add    DWORD PTR [eax],eax
    3580:	00 0b                	add    BYTE PTR [ebx],cl
    3582:	ee                   	out    dx,al
    3583:	00 00                	add    BYTE PTR [eax],al
    3585:	00 05 01 02 95 00    	add    BYTE PTR ds:0x950201,al
    358b:	00 00                	add    BYTE PTR [eax],al
    358d:	05 04 07 39 00       	add    eax,0x390704
    3592:	00 00                	add    BYTE PTR [eax],al
    3594:	05 04 07 e1 00       	add    eax,0xe10704
    3599:	00 00                	add    BYTE PTR [eax],al
    359b:	0a 04 ee             	or     al,BYTE PTR [esi+ebp*8]
    359e:	00 00                	add    BYTE PTR [eax],al
    35a0:	00 0c f1             	add    BYTE PTR [ecx+esi*8],cl
    35a3:	0a 00                	or     al,BYTE PTR [eax]
    35a5:	00 01                	add    BYTE PTR [ecx],al
    35a7:	16                   	push   ss
    35a8:	3f                   	aas    
    35a9:	01 00                	add    DWORD PTR [eax],eax
    35ab:	00 cc                	add    ah,cl
    35ad:	1e                   	push   ds
    35ae:	00 30                	add    BYTE PTR [eax],dh
    35b0:	44                   	inc    esp
    35b1:	00 00                	add    BYTE PTR [eax],al
    35b3:	00 01                	add    BYTE PTR [ecx],al
    35b5:	9c                   	pushf  
    35b6:	28 02                	sub    BYTE PTR [edx],al
    35b8:	00 00                	add    BYTE PTR [eax],al
    35ba:	0d 8a 04 00 00       	or     eax,0x48a
    35bf:	01 18                	add    DWORD PTR [eax],ebx
    35c1:	1f                   	pop    ds
    35c2:	01 00                	add    DWORD PTR [eax],eax
    35c4:	00 02                	add    BYTE PTR [edx],al
    35c6:	91                   	xchg   ecx,eax
    35c7:	6c                   	ins    BYTE PTR es:[edi],dx
    35c8:	00 0e                	add    BYTE PTR [esi],cl
    35ca:	4d                   	dec    ebp
    35cb:	0b 00                	or     eax,DWORD PTR [eax]
    35cd:	00 01                	add    BYTE PTR [ecx],al
    35cf:	1e                   	push   ds
    35d0:	96                   	xchg   esi,eax
    35d1:	02 00                	add    al,BYTE PTR [eax]
    35d3:	00 10                	add    BYTE PTR [eax],dl
    35d5:	1f                   	pop    ds
    35d6:	00 30                	add    BYTE PTR [eax],dh
    35d8:	19 03                	sbb    DWORD PTR [ebx],eax
    35da:	00 00                	add    BYTE PTR [eax],al
    35dc:	01 9c 96 02 00 00 0f 	add    DWORD PTR [esi+edx*4+0xf000002],ebx
    35e3:	c8 0b 00 00          	enter  0xb,0x0
    35e7:	01 1e                	add    DWORD PTR [esi],ebx
    35e9:	9c                   	pushf  
    35ea:	02 00                	add    al,BYTE PTR [eax]
    35ec:	00 02                	add    BYTE PTR [edx],al
    35ee:	91                   	xchg   ecx,eax
    35ef:	00 0f                	add    BYTE PTR [edi],cl
    35f1:	70 0b                	jo     35fe <sysEnter_Vector-0x12ca02>
    35f3:	00 00                	add    BYTE PTR [eax],al
    35f5:	01 1e                	add    DWORD PTR [esi],ebx
    35f7:	96                   	xchg   esi,eax
    35f8:	02 00                	add    al,BYTE PTR [eax]
    35fa:	00 02                	add    BYTE PTR [edx],al
    35fc:	91                   	xchg   ecx,eax
    35fd:	04 0d                	add    al,0xd
    35ff:	94                   	xchg   esp,eax
    3600:	0b 00                	or     eax,DWORD PTR [eax]
    3602:	00 01                	add    BYTE PTR [ecx],al
    3604:	20 3f                	and    BYTE PTR [edi],bh
    3606:	01 00                	add    DWORD PTR [eax],eax
    3608:	00 02                	add    BYTE PTR [edx],al
    360a:	91                   	xchg   ecx,eax
    360b:	68 0d 89 0b 00       	push   0xb890d
    3610:	00 01                	add    BYTE PTR [ecx],al
    3612:	21 ec                	and    esp,ebp
    3614:	01 00                	add    DWORD PTR [eax],eax
    3616:	00 02                	add    BYTE PTR [edx],al
    3618:	91                   	xchg   ecx,eax
    3619:	64                   	fs
    361a:	0d 47 0b 00 00       	or     eax,0xb47
    361f:	01 21                	add    DWORD PTR [ecx],esp
    3621:	ec                   	in     al,dx
    3622:	01 00                	add    DWORD PTR [eax],eax
    3624:	00 02                	add    BYTE PTR [edx],al
    3626:	91                   	xchg   ecx,eax
    3627:	70 0d                	jo     3636 <sysEnter_Vector-0x12c9ca>
    3629:	2b 0b                	sub    ecx,DWORD PTR [ebx]
    362b:	00 00                	add    BYTE PTR [eax],al
    362d:	01 22                	add    DWORD PTR [edx],esp
    362f:	03 01                	add    eax,DWORD PTR [ecx]
    3631:	00 00                	add    BYTE PTR [eax],al
    3633:	02 91 6c 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a006c]
    3639:	4a                   	dec    edx
    363a:	01 00                	add    DWORD PTR [eax],eax
    363c:	00 0a                	add    BYTE PTR [edx],cl
    363e:	04 a2                	add    al,0xa2
    3640:	02 00                	add    al,BYTE PTR [eax]
    3642:	00 0b                	add    BYTE PTR [ebx],cl
    3644:	3f                   	aas    
    3645:	01 00                	add    DWORD PTR [eax],eax
    3647:	00 10                	add    BYTE PTR [eax],dl
    3649:	0c 0b                	or     al,0xb
    364b:	00 00                	add    BYTE PTR [eax],al
    364d:	01 3b                	add    DWORD PTR [ebx],edi
    364f:	96                   	xchg   esi,eax
    3650:	02 00                	add    al,BYTE PTR [eax]
    3652:	00 29                	add    BYTE PTR [ecx],ch
    3654:	22 00                	and    al,BYTE PTR [eax]
    3656:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    365c:	9c                   	pushf  
    365d:	dd 02                	fld    QWORD PTR [edx]
    365f:	00 00                	add    BYTE PTR [eax],al
    3661:	0f c8                	bswap  eax
    3663:	0b 00                	or     eax,DWORD PTR [eax]
    3665:	00 01                	add    BYTE PTR [ecx],al
    3667:	3b 9c 02 00 00 02 91 	cmp    ebx,DWORD PTR [edx+eax*1-0x6efe0000]
    366e:	00 0f                	add    BYTE PTR [edi],cl
    3670:	70 0b                	jo     367d <sysEnter_Vector-0x12c983>
    3672:	00 00                	add    BYTE PTR [eax],al
    3674:	01 3b                	add    DWORD PTR [ebx],edi
    3676:	96                   	xchg   esi,eax
    3677:	02 00                	add    al,BYTE PTR [eax]
    3679:	00 02                	add    BYTE PTR [edx],al
    367b:	91                   	xchg   ecx,eax
    367c:	04 00                	add    al,0x0
    367e:	10 df                	adc    bh,bl
    3680:	0a 00                	or     al,BYTE PTR [eax]
    3682:	00 01                	add    BYTE PTR [ecx],al
    3684:	40                   	inc    eax
    3685:	96                   	xchg   esi,eax
    3686:	02 00                	add    al,BYTE PTR [eax]
    3688:	00 46 22             	add    BYTE PTR [esi+0x22],al
    368b:	00 30                	add    BYTE PTR [eax],dh
    368d:	41                   	inc    ecx
    368e:	00 00                	add    BYTE PTR [eax],al
    3690:	00 01                	add    BYTE PTR [ecx],al
    3692:	9c                   	pushf  
    3693:	1f                   	pop    ds
    3694:	03 00                	add    eax,DWORD PTR [eax]
    3696:	00 0f                	add    BYTE PTR [edi],cl
    3698:	c8 0b 00 00          	enter  0xb,0x0
    369c:	01 40 9c             	add    DWORD PTR [eax-0x64],eax
    369f:	02 00                	add    al,BYTE PTR [eax]
    36a1:	00 02                	add    BYTE PTR [edx],al
    36a3:	91                   	xchg   ecx,eax
    36a4:	00 11                	add    BYTE PTR [ecx],dl
    36a6:	74 00                	je     36a8 <sysEnter_Vector-0x12c958>
    36a8:	01 41 3f             	add    DWORD PTR [ecx+0x3f],eax
    36ab:	01 00                	add    DWORD PTR [eax],eax
    36ad:	00 02                	add    BYTE PTR [edx],al
    36af:	91                   	xchg   ecx,eax
    36b0:	6c                   	ins    BYTE PTR es:[edi],dx
    36b1:	0d 70 0b 00 00       	or     eax,0xb70
    36b6:	01 42 4a             	add    DWORD PTR [edx+0x4a],eax
    36b9:	01 00                	add    DWORD PTR [eax],eax
    36bb:	00 02                	add    BYTE PTR [edx],al
    36bd:	91                   	xchg   ecx,eax
    36be:	40                   	inc    eax
    36bf:	00 10                	add    BYTE PTR [eax],dl
    36c1:	ce                   	into   
    36c2:	0b 00                	or     eax,DWORD PTR [eax]
    36c4:	00 01                	add    BYTE PTR [ecx],al
    36c6:	48                   	dec    eax
    36c7:	96                   	xchg   esi,eax
    36c8:	02 00                	add    al,BYTE PTR [eax]
    36ca:	00 87 22 00 30 35    	add    BYTE PTR [edi+0x35300022],al
    36d0:	00 00                	add    BYTE PTR [eax],al
    36d2:	00 01                	add    BYTE PTR [ecx],al
    36d4:	9c                   	pushf  
    36d5:	61                   	popa   
    36d6:	03 00                	add    eax,DWORD PTR [eax]
    36d8:	00 0f                	add    BYTE PTR [edi],cl
    36da:	c8 0b 00 00          	enter  0xb,0x0
    36de:	01 48 9c             	add    DWORD PTR [eax-0x64],ecx
    36e1:	02 00                	add    al,BYTE PTR [eax]
    36e3:	00 02                	add    BYTE PTR [edx],al
    36e5:	91                   	xchg   ecx,eax
    36e6:	00 0f                	add    BYTE PTR [edi],cl
    36e8:	70 0b                	jo     36f5 <sysEnter_Vector-0x12c90b>
    36ea:	00 00                	add    BYTE PTR [eax],al
    36ec:	01 48 96             	add    DWORD PTR [eax-0x6a],ecx
    36ef:	02 00                	add    al,BYTE PTR [eax]
    36f1:	00 02                	add    BYTE PTR [edx],al
    36f3:	91                   	xchg   ecx,eax
    36f4:	04 11                	add    al,0x11
    36f6:	74 00                	je     36f8 <sysEnter_Vector-0x12c908>
    36f8:	01 4a 3f             	add    DWORD PTR [edx+0x3f],ecx
    36fb:	01 00                	add    DWORD PTR [eax],eax
    36fd:	00 02                	add    BYTE PTR [edx],al
    36ff:	91                   	xchg   ecx,eax
    3700:	74 00                	je     3702 <sysEnter_Vector-0x12c8fe>
    3702:	10 7d 0b             	adc    BYTE PTR [ebp+0xb],bh
    3705:	00 00                	add    BYTE PTR [eax],al
    3707:	01 50 96             	add    DWORD PTR [eax-0x6a],edx
    370a:	02 00                	add    al,BYTE PTR [eax]
    370c:	00 bc 22 00 30 1d 00 	add    BYTE PTR [edx+eiz*1+0x1d3000],bh
    3713:	00 00                	add    BYTE PTR [eax],al
    3715:	01 9c 97 03 00 00 0f 	add    DWORD PTR [edi+edx*4+0xf000003],ebx
    371c:	c8 0b 00 00          	enter  0xb,0x0
    3720:	01 50 9c             	add    DWORD PTR [eax-0x64],edx
    3723:	02 00                	add    al,BYTE PTR [eax]
    3725:	00 02                	add    BYTE PTR [edx],al
    3727:	91                   	xchg   ecx,eax
    3728:	00 0f                	add    BYTE PTR [edi],cl
    372a:	70 0b                	jo     3737 <sysEnter_Vector-0x12c8c9>
    372c:	00 00                	add    BYTE PTR [eax],al
    372e:	01 50 96             	add    DWORD PTR [eax-0x6a],edx
    3731:	02 00                	add    al,BYTE PTR [eax]
    3733:	00 02                	add    BYTE PTR [edx],al
    3735:	91                   	xchg   ecx,eax
    3736:	04 00                	add    al,0x0
    3738:	0e                   	push   cs
    3739:	92                   	xchg   edx,eax
    373a:	0b 00                	or     eax,DWORD PTR [eax]
    373c:	00 01                	add    BYTE PTR [ecx],al
    373e:	54                   	push   esp
    373f:	3f                   	aas    
    3740:	01 00                	add    DWORD PTR [eax],eax
    3742:	00 d9                	add    cl,bl
    3744:	22 00                	and    al,BYTE PTR [eax]
    3746:	30 41 08             	xor    BYTE PTR [ecx+0x8],al
    3749:	00 00                	add    BYTE PTR [eax],al
    374b:	01 9c 2f 04 00 00 0f 	add    DWORD PTR [edi+ebp*1+0xf000004],ebx
    3752:	70 0b                	jo     375f <sysEnter_Vector-0x12c8a1>
    3754:	00 00                	add    BYTE PTR [eax],al
    3756:	01 54 96 02          	add    DWORD PTR [esi+edx*4+0x2],edx
    375a:	00 00                	add    BYTE PTR [eax],al
    375c:	02 91 00 11 64 61    	add    dl,BYTE PTR [ecx+0x61641100]
    3762:	79 00                	jns    3764 <sysEnter_Vector-0x12c89c>
    3764:	01 55 31             	add    DWORD PTR [ebp+0x31],edx
    3767:	01 00                	add    DWORD PTR [eax],eax
    3769:	00 02                	add    BYTE PTR [edx],al
    376b:	91                   	xchg   ecx,eax
    376c:	68 0d 2b 0b 00       	push   0xb2b0d
    3771:	00 01                	add    BYTE PTR [ecx],al
    3773:	55                   	push   ebp
    3774:	31 01                	xor    DWORD PTR [ecx],eax
    3776:	00 00                	add    BYTE PTR [eax],al
    3778:	02 91 54 0d 28 0b    	add    dl,BYTE PTR [ecx+0xb280d54]
    377e:	00 00                	add    BYTE PTR [eax],al
    3780:	01 56 03             	add    DWORD PTR [esi+0x3],edx
    3783:	01 00                	add    DWORD PTR [eax],eax
    3785:	00 02                	add    BYTE PTR [edx],al
    3787:	91                   	xchg   ecx,eax
    3788:	4c                   	dec    esp
    3789:	0d 61 0b 00 00       	or     eax,0xb61
    378e:	01 57 03             	add    DWORD PTR [edi+0x3],edx
    3791:	01 00                	add    DWORD PTR [eax],eax
    3793:	00 02                	add    BYTE PTR [edx],al
    3795:	91                   	xchg   ecx,eax
    3796:	64                   	fs
    3797:	0d 30 0b 00 00       	or     eax,0xb30
    379c:	01 57 03             	add    DWORD PTR [edi+0x3],edx
    379f:	01 00                	add    DWORD PTR [eax],eax
    37a1:	00 02                	add    BYTE PTR [edx],al
    37a3:	91                   	xchg   ecx,eax
    37a4:	60                   	pusha  
    37a5:	0d c8 05 00 00       	or     eax,0x5c8
    37aa:	01 58 31             	add    DWORD PTR [eax+0x31],ebx
    37ad:	01 00                	add    DWORD PTR [eax],eax
    37af:	00 02                	add    BYTE PTR [edx],al
    37b1:	91                   	xchg   ecx,eax
    37b2:	50                   	push   eax
    37b3:	0d e4 0b 00 00       	or     eax,0xbe4
    37b8:	01 59 03             	add    DWORD PTR [ecx+0x3],ebx
    37bb:	01 00                	add    DWORD PTR [eax],eax
    37bd:	00 02                	add    BYTE PTR [edx],al
    37bf:	91                   	xchg   ecx,eax
    37c0:	5c                   	pop    esp
    37c1:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    37c5:	00 01                	add    BYTE PTR [ecx],al
    37c7:	5a                   	pop    edx
    37c8:	31 01                	xor    DWORD PTR [ecx],eax
    37ca:	00 00                	add    BYTE PTR [eax],al
    37cc:	02 91 58 00 10 36    	add    dl,BYTE PTR [ecx+0x36100058]
    37d2:	0b 00                	or     eax,DWORD PTR [eax]
    37d4:	00 01                	add    BYTE PTR [ecx],al
    37d6:	bf 96 02 00 00       	mov    edi,0x296
    37db:	1a 2b                	sbb    ch,BYTE PTR [ebx]
    37dd:	00 30                	add    BYTE PTR [eax],dh
    37df:	6d                   	ins    DWORD PTR es:[edi],dx
    37e0:	00 00                	add    BYTE PTR [eax],al
    37e2:	00 01                	add    BYTE PTR [ecx],al
    37e4:	9c                   	pushf  
    37e5:	73 04                	jae    37eb <sysEnter_Vector-0x12c815>
    37e7:	00 00                	add    BYTE PTR [eax],al
    37e9:	0f 94 0b             	sete   BYTE PTR [ebx]
    37ec:	00 00                	add    BYTE PTR [eax],al
    37ee:	01 bf 96 02 00 00    	add    DWORD PTR [edi+0x296],edi
    37f4:	02 91 00 0f 66 0b    	add    dl,BYTE PTR [ecx+0xb660f00]
    37fa:	00 00                	add    BYTE PTR [eax],al
    37fc:	01 bf e5 01 00 00    	add    DWORD PTR [edi+0x1e5],edi
    3802:	02 91 5c 0d f4 0a    	add    dl,BYTE PTR [ecx+0xaf40d5c]
    3808:	00 00                	add    BYTE PTR [eax],al
    380a:	01 c1                	add    ecx,eax
    380c:	3f                   	aas    
    380d:	01 00                	add    DWORD PTR [eax],eax
    380f:	00 02                	add    BYTE PTR [edx],al
    3811:	91                   	xchg   ecx,eax
    3812:	6c                   	ins    BYTE PTR es:[edi],dx
    3813:	00 12                	add    BYTE PTR [edx],dl
    3815:	4b                   	dec    ebx
    3816:	00 00                	add    BYTE PTR [eax],al
    3818:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    381b:	1f                   	pop    ds
    381c:	01 00                	add    DWORD PTR [eax],eax
    381e:	00 05 03 5c 46 00    	add    BYTE PTR ds:0x465c03,al
    3824:	30 12                	xor    BYTE PTR [edx],dl
    3826:	af                   	scas   eax,DWORD PTR es:[edi]
    3827:	00 00                	add    BYTE PTR [eax],al
    3829:	00 04 35 1f 01 00 00 	add    BYTE PTR [esi*1+0x11f],al
    3830:	05 03 60 46 00       	add    eax,0x466003
    3835:	30 12                	xor    BYTE PTR [edx],dl
    3837:	5b                   	pop    ebx
    3838:	01 00                	add    DWORD PTR [eax],eax
    383a:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    383d:	1f                   	pop    ds
    383e:	01 00                	add    DWORD PTR [eax],eax
    3840:	00 05 03 58 46 00    	add    BYTE PTR ds:0x465803,al
    3846:	30 12                	xor    BYTE PTR [edx],dl
    3848:	54                   	push   esp
    3849:	00 00                	add    BYTE PTR [eax],al
    384b:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    384e:	1f                   	pop    ds
    384f:	01 00                	add    DWORD PTR [eax],eax
    3851:	00 05 03 68 46 00    	add    BYTE PTR ds:0x466803,al
    3857:	30 12                	xor    BYTE PTR [edx],dl
    3859:	28 00                	sub    BYTE PTR [eax],al
    385b:	00 00                	add    BYTE PTR [eax],al
    385d:	05 49 c8 04 00       	add    eax,0x4c849
    3862:	00 05 03 64 46 00    	add    BYTE PTR ds:0x466403,al
    3868:	30 0a                	xor    BYTE PTR [edx],cl
    386a:	04 fa                	add    al,0xfa
    386c:	01 00                	add    DWORD PTR [eax],eax
    386e:	00 12                	add    BYTE PTR [edx],dl
    3870:	fa                   	cli    
    3871:	0a 00                	or     al,BYTE PTR [eax]
    3873:	00 01                	add    BYTE PTR [ecx],al
    3875:	0c 03                	or     al,0x3
    3877:	01 00                	add    DWORD PTR [eax],eax
    3879:	00 05 03 68 45 00    	add    BYTE PTR ds:0x456803,al
    387f:	30 12                	xor    BYTE PTR [edx],dl
    3881:	db 0b                	fisttp DWORD PTR [ebx]
    3883:	00 00                	add    BYTE PTR [eax],al
    3885:	01 0d 31 01 00 00    	add    DWORD PTR ds:0x131,ecx
    388b:	05 03 8c 46 00       	add    eax,0x468c03
    3890:	30 13                	xor    BYTE PTR [ebx],dl
    3892:	fa                   	cli    
    3893:	01 00                	add    DWORD PTR [eax],eax
    3895:	00 00                	add    BYTE PTR [eax],al
    3897:	05 00 00 14 f3       	add    eax,0xf3140000
    389c:	01 00                	add    DWORD PTR [eax],eax
    389e:	00 01                	add    BYTE PTR [ecx],al
    38a0:	00 12                	add    BYTE PTR [edx],dl
    38a2:	04 0b                	add    al,0xb
    38a4:	00 00                	add    BYTE PTR [eax],al
    38a6:	01 0e                	add    DWORD PTR [esi],ecx
    38a8:	f0 04 00             	lock add al,0x0
    38ab:	00 05 03 50 46 00    	add    BYTE PTR ds:0x465003,al
    38b1:	30 12                	xor    BYTE PTR [edx],dl
    38b3:	15 0b 00 00 01       	adc    eax,0x100000b
    38b8:	0f 03 01             	lsl    eax,WORD PTR [ecx]
    38bb:	00 00                	add    BYTE PTR [eax],al
    38bd:	05 03 90 46 00       	add    eax,0x469003
    38c2:	30 13                	xor    BYTE PTR [ebx],dl
    38c4:	03 01                	add    eax,DWORD PTR [ecx]
    38c6:	00 00                	add    BYTE PTR [eax],al
    38c8:	38 05 00 00 14 f3    	cmp    BYTE PTR ds:0xf3140000,al
    38ce:	01 00                	add    DWORD PTR [eax],eax
    38d0:	00 01                	add    BYTE PTR [ecx],al
    38d2:	14 f3                	adc    al,0xf3
    38d4:	01 00                	add    DWORD PTR [eax],eax
    38d6:	00 0b                	add    BYTE PTR [ebx],cl
    38d8:	00 12                	add    BYTE PTR [edx],dl
    38da:	ab                   	stos   DWORD PTR es:[edi],eax
    38db:	0b 00                	or     eax,DWORD PTR [eax]
    38dd:	00 01                	add    BYTE PTR [ecx],al
    38df:	11 49 05             	adc    DWORD PTR [ecx+0x5],ecx
    38e2:	00 00                	add    BYTE PTR [eax],al
    38e4:	05 03 80 43 00       	add    eax,0x438003
    38e9:	30 0b                	xor    BYTE PTR [ebx],cl
    38eb:	22                   	.byte 0x22
    38ec:	05                   	.byte 0x5
    38ed:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     2c2:	11 01                	adc    DWORD PTR [ecx],eax
     2c4:	12 06                	adc    al,BYTE PTR [esi]
     2c6:	40                   	inc    eax
     2c7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cd:	00 00                	add    BYTE PTR [eax],al
     2cf:	07                   	pop    es
     2d0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     2d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2da:	02 18                	add    bl,BYTE PTR [eax]
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	08 0b                	or     BYTE PTR [ebx],cl
     2e0:	01 11                	add    DWORD PTR [ecx],edx
     2e2:	01 12                	add    DWORD PTR [edx],edx
     2e4:	06                   	push   es
     2e5:	00 00                	add    BYTE PTR [eax],al
     2e7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     2ea:	03 08                	add    ecx,DWORD PTR [eax]
     2ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f0:	49                   	dec    ecx
     2f1:	13 02                	adc    eax,DWORD PTR [edx]
     2f3:	18 00                	sbb    BYTE PTR [eax],al
     2f5:	00 0a                	add    BYTE PTR [edx],cl
     2f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2fa:	19 03                	sbb    DWORD PTR [ebx],eax
     2fc:	0e                   	push   cs
     2fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     301:	27                   	daa    
     302:	19 11                	sbb    DWORD PTR [ecx],edx
     304:	01 12                	add    DWORD PTR [edx],edx
     306:	06                   	push   es
     307:	40                   	inc    eax
     308:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30e:	00 00                	add    BYTE PTR [eax],al
     310:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     313:	03 0e                	add    ecx,DWORD PTR [esi]
     315:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     317:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     319:	49                   	dec    ecx
     31a:	13 02                	adc    eax,DWORD PTR [edx]
     31c:	18 00                	sbb    BYTE PTR [eax],al
     31e:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     321:	01 11                	add    DWORD PTR [ecx],edx
     323:	01 12                	add    DWORD PTR [edx],edx
     325:	06                   	push   es
     326:	01 13                	add    DWORD PTR [ebx],edx
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	0d 34 00 03 0e       	or     eax,0xe030034
     32f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     331:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     333:	49                   	dec    ecx
     334:	13 3f                	adc    edi,DWORD PTR [edi]
     336:	19 02                	sbb    DWORD PTR [edx],eax
     338:	18 00                	sbb    BYTE PTR [eax],al
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	01 11                	add    DWORD PTR [ecx],edx
     33e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     344:	0e                   	push   cs
     345:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     347:	11 01                	adc    DWORD PTR [ecx],eax
     349:	12 06                	adc    al,BYTE PTR [esi]
     34b:	10 17                	adc    BYTE PTR [edi],dl
     34d:	00 00                	add    BYTE PTR [eax],al
     34f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     352:	0b 0b                	or     ecx,DWORD PTR [ebx]
     354:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     35f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     362:	08 00                	or     BYTE PTR [eax],al
     364:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     367:	00 03                	add    BYTE PTR [ebx],al
     369:	0e                   	push   cs
     36a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36e:	49                   	dec    ecx
     36f:	13 00                	adc    eax,DWORD PTR [eax]
     371:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     377:	49                   	dec    ecx
     378:	13 00                	adc    eax,DWORD PTR [eax]
     37a:	00 06                	add    BYTE PTR [esi],al
     37c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     380:	00 00                	add    BYTE PTR [eax],al
     382:	07                   	pop    es
     383:	04 01                	add    al,0x1
     385:	03 0e                	add    ecx,DWORD PTR [esi]
     387:	0b 0b                	or     ecx,DWORD PTR [ebx]
     389:	49                   	dec    ecx
     38a:	13 3a                	adc    edi,DWORD PTR [edx]
     38c:	0b 3b                	or     edi,DWORD PTR [ebx]
     38e:	0b 01                	or     eax,DWORD PTR [ecx]
     390:	13 00                	adc    eax,DWORD PTR [eax]
     392:	00 08                	add    BYTE PTR [eax],cl
     394:	28 00                	sub    BYTE PTR [eax],al
     396:	03 0e                	add    ecx,DWORD PTR [esi]
     398:	1c 0b                	sbb    al,0xb
     39a:	00 00                	add    BYTE PTR [eax],al
     39c:	09 28                	or     DWORD PTR [eax],ebp
     39e:	00 03                	add    BYTE PTR [ebx],al
     3a0:	0e                   	push   cs
     3a1:	1c 05                	sbb    al,0x5
     3a3:	00 00                	add    BYTE PTR [eax],al
     3a5:	0a 0f                	or     cl,BYTE PTR [edi]
     3a7:	00 0b                	add    BYTE PTR [ebx],cl
     3a9:	0b 00                	or     eax,DWORD PTR [eax]
     3ab:	00 0b                	add    BYTE PTR [ebx],cl
     3ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3b0:	19 03                	sbb    DWORD PTR [ebx],eax
     3b2:	0e                   	push   cs
     3b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b7:	27                   	daa    
     3b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3bb:	11 01                	adc    DWORD PTR [ecx],eax
     3bd:	12 06                	adc    al,BYTE PTR [esi]
     3bf:	40                   	inc    eax
     3c0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	0c 05                	or     al,0x5
     3ca:	00 03                	add    BYTE PTR [ebx],al
     3cc:	0e                   	push   cs
     3cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d1:	49                   	dec    ecx
     3d2:	13 02                	adc    eax,DWORD PTR [edx]
     3d4:	18 00                	sbb    BYTE PTR [eax],al
     3d6:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	27                   	daa    
     3e3:	19 11                	sbb    DWORD PTR [ecx],edx
     3e5:	01 12                	add    DWORD PTR [edx],edx
     3e7:	06                   	push   es
     3e8:	40                   	inc    eax
     3e9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3ef:	00 00                	add    BYTE PTR [eax],al
     3f1:	0e                   	push   cs
     3f2:	34 00                	xor    al,0x0
     3f4:	03 0e                	add    ecx,DWORD PTR [esi]
     3f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fa:	49                   	dec    ecx
     3fb:	13 3f                	adc    edi,DWORD PTR [edi]
     3fd:	19 02                	sbb    DWORD PTR [edx],eax
     3ff:	18 00                	sbb    BYTE PTR [eax],al
     401:	00 00                	add    BYTE PTR [eax],al
     403:	01 11                	add    DWORD PTR [ecx],edx
     405:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40b:	0e                   	push   cs
     40c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	10 17                	adc    BYTE PTR [edi],dl
     414:	00 00                	add    BYTE PTR [eax],al
     416:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     419:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     41e:	0e                   	push   cs
     41f:	00 00                	add    BYTE PTR [eax],al
     421:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     424:	0b 0b                	or     ecx,DWORD PTR [ebx]
     426:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     429:	08 00                	or     BYTE PTR [eax],al
     42b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     42e:	00 03                	add    BYTE PTR [ebx],al
     430:	0e                   	push   cs
     431:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     433:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     435:	49                   	dec    ecx
     436:	13 00                	adc    eax,DWORD PTR [eax]
     438:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     43e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     440:	49                   	dec    ecx
     441:	13 3a                	adc    edi,DWORD PTR [edx]
     443:	0b 3b                	or     edi,DWORD PTR [ebx]
     445:	0b 01                	or     eax,DWORD PTR [ecx]
     447:	13 00                	adc    eax,DWORD PTR [eax]
     449:	00 06                	add    BYTE PTR [esi],al
     44b:	28 00                	sub    BYTE PTR [eax],al
     44d:	03 0e                	add    ecx,DWORD PTR [esi]
     44f:	1c 0b                	sbb    al,0xb
     451:	00 00                	add    BYTE PTR [eax],al
     453:	07                   	pop    es
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	03 0e                	add    ecx,DWORD PTR [esi]
     458:	1c 05                	sbb    al,0x5
     45a:	00 00                	add    BYTE PTR [eax],al
     45c:	08 0f                	or     BYTE PTR [edi],cl
     45e:	00 0b                	add    BYTE PTR [ebx],cl
     460:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 2e                	or     DWORD PTR [esi],ebp
     467:	01 3f                	add    DWORD PTR [edi],edi
     469:	19 03                	sbb    DWORD PTR [ebx],eax
     46b:	0e                   	push   cs
     46c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     46e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     470:	27                   	daa    
     471:	19 11                	sbb    DWORD PTR [ecx],edx
     473:	01 12                	add    DWORD PTR [edx],edx
     475:	06                   	push   es
     476:	40                   	inc    eax
     477:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     485:	0b 3b                	or     edi,DWORD PTR [ebx]
     487:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     48a:	02 18                	add    bl,BYTE PTR [eax]
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     494:	0b 3b                	or     edi,DWORD PTR [ebx]
     496:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     499:	02 18                	add    bl,BYTE PTR [eax]
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	0c 34                	or     al,0x34
     49f:	00 03                	add    BYTE PTR [ebx],al
     4a1:	0e                   	push   cs
     4a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a6:	49                   	dec    ecx
     4a7:	13 02                	adc    eax,DWORD PTR [edx]
     4a9:	18 00                	sbb    BYTE PTR [eax],al
     4ab:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     4b1:	01 13                	add    DWORD PTR [ebx],edx
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	0e                   	push   cs
     4b6:	21 00                	and    DWORD PTR [eax],eax
     4b8:	49                   	dec    ecx
     4b9:	13 2f                	adc    ebp,DWORD PTR [edi]
     4bb:	0b 00                	or     eax,DWORD PTR [eax]
     4bd:	00 0f                	add    BYTE PTR [edi],cl
     4bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4c2:	19 03                	sbb    DWORD PTR [ebx],eax
     4c4:	0e                   	push   cs
     4c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c9:	49                   	dec    ecx
     4ca:	13 11                	adc    edx,DWORD PTR [ecx]
     4cc:	01 12                	add    DWORD PTR [edx],edx
     4ce:	06                   	push   es
     4cf:	40                   	inc    eax
     4d0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     4d6:	00 00                	add    BYTE PTR [eax],al
     4d8:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4db:	03 08                	add    ecx,DWORD PTR [eax]
     4dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e1:	49                   	dec    ecx
     4e2:	13 02                	adc    eax,DWORD PTR [edx]
     4e4:	18 00                	sbb    BYTE PTR [eax],al
     4e6:	00 11                	add    BYTE PTR [ecx],dl
     4e8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4eb:	19 03                	sbb    DWORD PTR [ebx],eax
     4ed:	0e                   	push   cs
     4ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f2:	27                   	daa    
     4f3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4f6:	11 01                	adc    DWORD PTR [ecx],eax
     4f8:	12 06                	adc    al,BYTE PTR [esi]
     4fa:	40                   	inc    eax
     4fb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     501:	00 00                	add    BYTE PTR [eax],al
     503:	12 0a                	adc    cl,BYTE PTR [edx]
     505:	00 03                	add    BYTE PTR [ebx],al
     507:	0e                   	push   cs
     508:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     50a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     50c:	11 01                	adc    DWORD PTR [ecx],eax
     50e:	00 00                	add    BYTE PTR [eax],al
     510:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     513:	03 0e                	add    ecx,DWORD PTR [esi]
     515:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     517:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     519:	49                   	dec    ecx
     51a:	13 3f                	adc    edi,DWORD PTR [edi]
     51c:	19 02                	sbb    DWORD PTR [edx],eax
     51e:	18 00                	sbb    BYTE PTR [eax],al
     520:	00 00                	add    BYTE PTR [eax],al
     522:	01 11                	add    DWORD PTR [ecx],edx
     524:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     52a:	0e                   	push   cs
     52b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     52d:	11 01                	adc    DWORD PTR [ecx],eax
     52f:	12 06                	adc    al,BYTE PTR [esi]
     531:	10 17                	adc    BYTE PTR [edi],dl
     533:	00 00                	add    BYTE PTR [eax],al
     535:	02 16                	add    dl,BYTE PTR [esi]
     537:	00 03                	add    BYTE PTR [ebx],al
     539:	0e                   	push   cs
     53a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53e:	49                   	dec    ecx
     53f:	13 00                	adc    eax,DWORD PTR [eax]
     541:	00 03                	add    BYTE PTR [ebx],al
     543:	0f 00 0b             	str    WORD PTR [ebx]
     546:	0b 03                	or     eax,DWORD PTR [ebx]
     548:	0e                   	push   cs
     549:	49                   	dec    ecx
     54a:	13 00                	adc    eax,DWORD PTR [eax]
     54c:	00 04 24             	add    BYTE PTR [esp],al
     54f:	00 0b                	add    BYTE PTR [ebx],cl
     551:	0b 3e                	or     edi,DWORD PTR [esi]
     553:	0b 03                	or     eax,DWORD PTR [ebx]
     555:	0e                   	push   cs
     556:	00 00                	add    BYTE PTR [eax],al
     558:	05 24 00 0b 0b       	add    eax,0xb0b0024
     55d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     560:	08 00                	or     BYTE PTR [eax],al
     562:	00 06                	add    BYTE PTR [esi],al
     564:	0f 00 0b             	str    WORD PTR [ebx]
     567:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	07                   	pop    es
     56d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     571:	00 00                	add    BYTE PTR [eax],al
     573:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     576:	03 0e                	add    ecx,DWORD PTR [esi]
     578:	0b 0b                	or     ecx,DWORD PTR [ebx]
     57a:	49                   	dec    ecx
     57b:	13 3a                	adc    edi,DWORD PTR [edx]
     57d:	0b 3b                	or     edi,DWORD PTR [ebx]
     57f:	0b 01                	or     eax,DWORD PTR [ecx]
     581:	13 00                	adc    eax,DWORD PTR [eax]
     583:	00 09                	add    BYTE PTR [ecx],cl
     585:	28 00                	sub    BYTE PTR [eax],al
     587:	03 0e                	add    ecx,DWORD PTR [esi]
     589:	1c 0b                	sbb    al,0xb
     58b:	00 00                	add    BYTE PTR [eax],al
     58d:	0a 28                	or     ch,BYTE PTR [eax]
     58f:	00 03                	add    BYTE PTR [ebx],al
     591:	0e                   	push   cs
     592:	1c 05                	sbb    al,0x5
     594:	00 00                	add    BYTE PTR [eax],al
     596:	0b 0f                	or     ecx,DWORD PTR [edi]
     598:	00 0b                	add    BYTE PTR [ebx],cl
     59a:	0b 00                	or     eax,DWORD PTR [eax]
     59c:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     59f:	01 3f                	add    DWORD PTR [edi],edi
     5a1:	19 03                	sbb    DWORD PTR [ebx],eax
     5a3:	0e                   	push   cs
     5a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5a8:	27                   	daa    
     5a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ac:	11 01                	adc    DWORD PTR [ecx],eax
     5ae:	12 06                	adc    al,BYTE PTR [esi]
     5b0:	40                   	inc    eax
     5b1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	0d 05 00 03 0e       	or     eax,0xe030005
     5be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5c2:	49                   	dec    ecx
     5c3:	13 02                	adc    eax,DWORD PTR [edx]
     5c5:	18 00                	sbb    BYTE PTR [eax],al
     5c7:	00 0e                	add    BYTE PTR [esi],cl
     5c9:	34 00                	xor    al,0x0
     5cb:	03 0e                	add    ecx,DWORD PTR [esi]
     5cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d1:	49                   	dec    ecx
     5d2:	13 02                	adc    eax,DWORD PTR [edx]
     5d4:	18 00                	sbb    BYTE PTR [eax],al
     5d6:	00 0f                	add    BYTE PTR [edi],cl
     5d8:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     5db:	19 03                	sbb    DWORD PTR [ebx],eax
     5dd:	0e                   	push   cs
     5de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e2:	11 01                	adc    DWORD PTR [ecx],eax
     5e4:	12 06                	adc    al,BYTE PTR [esi]
     5e6:	40                   	inc    eax
     5e7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     5ed:	10 2e                	adc    BYTE PTR [esi],ch
     5ef:	00 3f                	add    BYTE PTR [edi],bh
     5f1:	19 03                	sbb    DWORD PTR [ebx],eax
     5f3:	0e                   	push   cs
     5f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5f8:	27                   	daa    
     5f9:	19 11                	sbb    DWORD PTR [ecx],edx
     5fb:	01 12                	add    DWORD PTR [edx],edx
     5fd:	06                   	push   es
     5fe:	40                   	inc    eax
     5ff:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     605:	11 2e                	adc    DWORD PTR [esi],ebp
     607:	01 3f                	add    DWORD PTR [edi],edi
     609:	19 03                	sbb    DWORD PTR [ebx],eax
     60b:	0e                   	push   cs
     60c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     60e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     610:	27                   	daa    
     611:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     614:	11 01                	adc    DWORD PTR [ecx],eax
     616:	12 06                	adc    al,BYTE PTR [esi]
     618:	40                   	inc    eax
     619:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     61f:	00 00                	add    BYTE PTR [eax],al
     621:	12 18                	adc    bl,BYTE PTR [eax]
     623:	00 00                	add    BYTE PTR [eax],al
     625:	00 13                	add    BYTE PTR [ebx],dl
     627:	0b 01                	or     eax,DWORD PTR [ecx]
     629:	11 01                	adc    DWORD PTR [ecx],eax
     62b:	12 06                	adc    al,BYTE PTR [esi]
     62d:	00 00                	add    BYTE PTR [eax],al
     62f:	14 34                	adc    al,0x34
     631:	00 03                	add    BYTE PTR [ebx],al
     633:	08 3a                	or     BYTE PTR [edx],bh
     635:	0b 3b                	or     edi,DWORD PTR [ebx]
     637:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     63a:	02 18                	add    bl,BYTE PTR [eax]
     63c:	00 00                	add    BYTE PTR [eax],al
     63e:	15 2e 01 3f 19       	adc    eax,0x193f012e
     643:	03 0e                	add    ecx,DWORD PTR [esi]
     645:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     647:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     649:	27                   	daa    
     64a:	19 11                	sbb    DWORD PTR [ecx],edx
     64c:	01 12                	add    DWORD PTR [edx],edx
     64e:	06                   	push   es
     64f:	40                   	inc    eax
     650:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     656:	00 00                	add    BYTE PTR [eax],al
     658:	16                   	push   ss
     659:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     65c:	19 03                	sbb    DWORD PTR [ebx],eax
     65e:	0e                   	push   cs
     65f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     661:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     663:	49                   	dec    ecx
     664:	13 11                	adc    edx,DWORD PTR [ecx]
     666:	01 12                	add    DWORD PTR [edx],edx
     668:	06                   	push   es
     669:	40                   	inc    eax
     66a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     670:	00 00                	add    BYTE PTR [eax],al
     672:	17                   	pop    ss
     673:	05 00 03 08 3a       	add    eax,0x3a080300
     678:	0b 3b                	or     edi,DWORD PTR [ebx]
     67a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     67d:	02 18                	add    bl,BYTE PTR [eax]
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	18 2e                	sbb    BYTE PTR [esi],ch
     683:	01 3f                	add    DWORD PTR [edi],edi
     685:	19 03                	sbb    DWORD PTR [ebx],eax
     687:	0e                   	push   cs
     688:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     68a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     68c:	27                   	daa    
     68d:	19 11                	sbb    DWORD PTR [ecx],edx
     68f:	01 12                	add    DWORD PTR [edx],edx
     691:	06                   	push   es
     692:	40                   	inc    eax
     693:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     699:	00 00                	add    BYTE PTR [eax],al
     69b:	19 34 00             	sbb    DWORD PTR [eax+eax*1],esi
     69e:	03 0e                	add    ecx,DWORD PTR [esi]
     6a0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6a2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6a4:	49                   	dec    ecx
     6a5:	13 3f                	adc    edi,DWORD PTR [edi]
     6a7:	19 02                	sbb    DWORD PTR [edx],eax
     6a9:	18 00                	sbb    BYTE PTR [eax],al
     6ab:	00 00                	add    BYTE PTR [eax],al
     6ad:	01 11                	add    DWORD PTR [ecx],edx
     6af:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6b5:	0e                   	push   cs
     6b6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     6b8:	11 01                	adc    DWORD PTR [ecx],eax
     6ba:	12 06                	adc    al,BYTE PTR [esi]
     6bc:	10 17                	adc    BYTE PTR [edi],dl
     6be:	00 00                	add    BYTE PTR [eax],al
     6c0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     6c3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6c5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6c8:	0e                   	push   cs
     6c9:	00 00                	add    BYTE PTR [eax],al
     6cb:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     6ce:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6d0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6d3:	08 00                	or     BYTE PTR [eax],al
     6d5:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     6d8:	00 03                	add    BYTE PTR [ebx],al
     6da:	0e                   	push   cs
     6db:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6dd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6df:	49                   	dec    ecx
     6e0:	13 00                	adc    eax,DWORD PTR [eax]
     6e2:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     6e8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6ea:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6ec:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6ee:	01 13                	add    DWORD PTR [ebx],edx
     6f0:	00 00                	add    BYTE PTR [eax],al
     6f2:	06                   	push   es
     6f3:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     6f8:	0b 3b                	or     edi,DWORD PTR [ebx]
     6fa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6fd:	38 0b                	cmp    BYTE PTR [ebx],cl
     6ff:	00 00                	add    BYTE PTR [eax],al
     701:	07                   	pop    es
     702:	0d 00 03 08 3a       	or     eax,0x3a080300
     707:	0b 3b                	or     edi,DWORD PTR [ebx]
     709:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     70c:	38 0b                	cmp    BYTE PTR [ebx],cl
     70e:	00 00                	add    BYTE PTR [eax],al
     710:	08 0f                	or     BYTE PTR [edi],cl
     712:	00 0b                	add    BYTE PTR [ebx],cl
     714:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     717:	00 00                	add    BYTE PTR [eax],al
     719:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     71c:	03 0e                	add    ecx,DWORD PTR [esi]
     71e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     720:	49                   	dec    ecx
     721:	13 3a                	adc    edi,DWORD PTR [edx]
     723:	0b 3b                	or     edi,DWORD PTR [ebx]
     725:	0b 01                	or     eax,DWORD PTR [ecx]
     727:	13 00                	adc    eax,DWORD PTR [eax]
     729:	00 0a                	add    BYTE PTR [edx],cl
     72b:	28 00                	sub    BYTE PTR [eax],al
     72d:	03 0e                	add    ecx,DWORD PTR [esi]
     72f:	1c 0b                	sbb    al,0xb
     731:	00 00                	add    BYTE PTR [eax],al
     733:	0b 28                	or     ebp,DWORD PTR [eax]
     735:	00 03                	add    BYTE PTR [ebx],al
     737:	0e                   	push   cs
     738:	1c 05                	sbb    al,0x5
     73a:	00 00                	add    BYTE PTR [eax],al
     73c:	0c 0f                	or     al,0xf
     73e:	00 0b                	add    BYTE PTR [ebx],cl
     740:	0b 00                	or     eax,DWORD PTR [eax]
     742:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     748:	03 0e                	add    ecx,DWORD PTR [esi]
     74a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     74c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     74e:	11 01                	adc    DWORD PTR [ecx],eax
     750:	12 06                	adc    al,BYTE PTR [esi]
     752:	40                   	inc    eax
     753:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     759:	0e                   	push   cs
     75a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     75d:	19 03                	sbb    DWORD PTR [ebx],eax
     75f:	0e                   	push   cs
     760:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     762:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     764:	27                   	daa    
     765:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     768:	11 01                	adc    DWORD PTR [ecx],eax
     76a:	12 06                	adc    al,BYTE PTR [esi]
     76c:	40                   	inc    eax
     76d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     773:	00 00                	add    BYTE PTR [eax],al
     775:	0f 05                	syscall 
     777:	00 03                	add    BYTE PTR [ebx],al
     779:	0e                   	push   cs
     77a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     77c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     77e:	49                   	dec    ecx
     77f:	13 02                	adc    eax,DWORD PTR [edx]
     781:	18 00                	sbb    BYTE PTR [eax],al
     783:	00 10                	add    BYTE PTR [eax],dl
     785:	34 00                	xor    al,0x0
     787:	03 0e                	add    ecx,DWORD PTR [esi]
     789:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     78b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     78d:	49                   	dec    ecx
     78e:	13 02                	adc    eax,DWORD PTR [edx]
     790:	18 00                	sbb    BYTE PTR [eax],al
     792:	00 11                	add    BYTE PTR [ecx],dl
     794:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     797:	19 03                	sbb    DWORD PTR [ebx],eax
     799:	0e                   	push   cs
     79a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     79c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     79e:	27                   	daa    
     79f:	19 11                	sbb    DWORD PTR [ecx],edx
     7a1:	01 12                	add    DWORD PTR [edx],edx
     7a3:	06                   	push   es
     7a4:	40                   	inc    eax
     7a5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7ab:	00 00                	add    BYTE PTR [eax],al
     7ad:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     7b0:	03 08                	add    ecx,DWORD PTR [eax]
     7b2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7b4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7b6:	49                   	dec    ecx
     7b7:	13 02                	adc    eax,DWORD PTR [edx]
     7b9:	18 00                	sbb    BYTE PTR [eax],al
     7bb:	00 13                	add    BYTE PTR [ebx],dl
     7bd:	0a 00                	or     al,BYTE PTR [eax]
     7bf:	03 0e                	add    ecx,DWORD PTR [esi]
     7c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7c5:	11 01                	adc    DWORD PTR [ecx],eax
     7c7:	00 00                	add    BYTE PTR [eax],al
     7c9:	14 2e                	adc    al,0x2e
     7cb:	01 3f                	add    DWORD PTR [edi],edi
     7cd:	19 03                	sbb    DWORD PTR [ebx],eax
     7cf:	0e                   	push   cs
     7d0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7d2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7d4:	27                   	daa    
     7d5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7d8:	11 01                	adc    DWORD PTR [ecx],eax
     7da:	12 06                	adc    al,BYTE PTR [esi]
     7dc:	40                   	inc    eax
     7dd:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7e3:	00 00                	add    BYTE PTR [eax],al
     7e5:	15 2e 01 3f 19       	adc    eax,0x193f012e
     7ea:	03 0e                	add    ecx,DWORD PTR [esi]
     7ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7f0:	27                   	daa    
     7f1:	19 11                	sbb    DWORD PTR [ecx],edx
     7f3:	01 12                	add    DWORD PTR [edx],edx
     7f5:	06                   	push   es
     7f6:	40                   	inc    eax
     7f7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7fd:	00 00                	add    BYTE PTR [eax],al
     7ff:	16                   	push   ss
     800:	34 00                	xor    al,0x0
     802:	03 0e                	add    ecx,DWORD PTR [esi]
     804:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     806:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     808:	49                   	dec    ecx
     809:	13 3f                	adc    edi,DWORD PTR [edi]
     80b:	19 02                	sbb    DWORD PTR [edx],eax
     80d:	18 00                	sbb    BYTE PTR [eax],al
     80f:	00 00                	add    BYTE PTR [eax],al
     811:	01 11                	add    DWORD PTR [ecx],edx
     813:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     819:	0e                   	push   cs
     81a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     81c:	11 01                	adc    DWORD PTR [ecx],eax
     81e:	12 06                	adc    al,BYTE PTR [esi]
     820:	10 17                	adc    BYTE PTR [edi],dl
     822:	00 00                	add    BYTE PTR [eax],al
     824:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     827:	0b 0b                	or     ecx,DWORD PTR [ebx]
     829:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     82c:	0e                   	push   cs
     82d:	00 00                	add    BYTE PTR [eax],al
     82f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     832:	0b 0b                	or     ecx,DWORD PTR [ebx]
     834:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     837:	08 00                	or     BYTE PTR [eax],al
     839:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     83c:	00 0b                	add    BYTE PTR [ebx],cl
     83e:	0b 00                	or     eax,DWORD PTR [eax]
     840:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     846:	49                   	dec    ecx
     847:	13 00                	adc    eax,DWORD PTR [eax]
     849:	00 06                	add    BYTE PTR [esi],al
     84b:	16                   	push   ss
     84c:	00 03                	add    BYTE PTR [ebx],al
     84e:	0e                   	push   cs
     84f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     851:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     853:	49                   	dec    ecx
     854:	13 00                	adc    eax,DWORD PTR [eax]
     856:	00 07                	add    BYTE PTR [edi],al
     858:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     85c:	00 00                	add    BYTE PTR [eax],al
     85e:	08 2e                	or     BYTE PTR [esi],ch
     860:	01 3f                	add    DWORD PTR [edi],edi
     862:	19 03                	sbb    DWORD PTR [ebx],eax
     864:	0e                   	push   cs
     865:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     867:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     869:	27                   	daa    
     86a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     86d:	11 01                	adc    DWORD PTR [ecx],eax
     86f:	12 06                	adc    al,BYTE PTR [esi]
     871:	40                   	inc    eax
     872:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     878:	00 00                	add    BYTE PTR [eax],al
     87a:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     880:	0b 3b                	or     edi,DWORD PTR [ebx]
     882:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     885:	02 18                	add    bl,BYTE PTR [eax]
     887:	00 00                	add    BYTE PTR [eax],al
     889:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     88f:	0b 3b                	or     edi,DWORD PTR [ebx]
     891:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     894:	02 18                	add    bl,BYTE PTR [eax]
     896:	00 00                	add    BYTE PTR [eax],al
     898:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     89b:	03 08                	add    ecx,DWORD PTR [eax]
     89d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     89f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8a1:	49                   	dec    ecx
     8a2:	13 02                	adc    eax,DWORD PTR [edx]
     8a4:	18 00                	sbb    BYTE PTR [eax],al
     8a6:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     8a9:	01 11                	add    DWORD PTR [ecx],edx
     8ab:	01 12                	add    DWORD PTR [edx],edx
     8ad:	06                   	push   es
     8ae:	01 13                	add    DWORD PTR [ebx],edx
     8b0:	00 00                	add    BYTE PTR [eax],al
     8b2:	0d 0b 01 11 01       	or     eax,0x111010b
     8b7:	12 06                	adc    al,BYTE PTR [esi]
     8b9:	00 00                	add    BYTE PTR [eax],al
     8bb:	0e                   	push   cs
     8bc:	26 00 00             	add    BYTE PTR es:[eax],al
     8bf:	00 0f                	add    BYTE PTR [edi],cl
     8c1:	34 00                	xor    al,0x0
     8c3:	03 0e                	add    ecx,DWORD PTR [esi]
     8c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8c9:	49                   	dec    ecx
     8ca:	13 3f                	adc    edi,DWORD PTR [edi]
     8cc:	19 02                	sbb    DWORD PTR [edx],eax
     8ce:	18 00                	sbb    BYTE PTR [eax],al
     8d0:	00 00                	add    BYTE PTR [eax],al
     8d2:	01 11                	add    DWORD PTR [ecx],edx
     8d4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8da:	0e                   	push   cs
     8db:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8dd:	11 01                	adc    DWORD PTR [ecx],eax
     8df:	12 06                	adc    al,BYTE PTR [esi]
     8e1:	10 17                	adc    BYTE PTR [edi],dl
     8e3:	00 00                	add    BYTE PTR [eax],al
     8e5:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8e8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8ea:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8ed:	0e                   	push   cs
     8ee:	00 00                	add    BYTE PTR [eax],al
     8f0:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     8f3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8f5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8f8:	08 00                	or     BYTE PTR [eax],al
     8fa:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     8fd:	00 03                	add    BYTE PTR [ebx],al
     8ff:	0e                   	push   cs
     900:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     902:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     904:	49                   	dec    ecx
     905:	13 00                	adc    eax,DWORD PTR [eax]
     907:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     90d:	00 00                	add    BYTE PTR [eax],al
     90f:	06                   	push   es
     910:	0f 00 0b             	str    WORD PTR [ebx]
     913:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     916:	00 00                	add    BYTE PTR [eax],al
     918:	07                   	pop    es
     919:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     91c:	19 03                	sbb    DWORD PTR [ebx],eax
     91e:	0e                   	push   cs
     91f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     921:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     923:	27                   	daa    
     924:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     927:	11 01                	adc    DWORD PTR [ecx],eax
     929:	12 06                	adc    al,BYTE PTR [esi]
     92b:	40                   	inc    eax
     92c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     932:	00 00                	add    BYTE PTR [eax],al
     934:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     93a:	0b 3b                	or     edi,DWORD PTR [ebx]
     93c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     93f:	02 18                	add    bl,BYTE PTR [eax]
     941:	00 00                	add    BYTE PTR [eax],al
     943:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     946:	03 08                	add    ecx,DWORD PTR [eax]
     948:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     94a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     94c:	49                   	dec    ecx
     94d:	13 02                	adc    eax,DWORD PTR [edx]
     94f:	18 00                	sbb    BYTE PTR [eax],al
     951:	00 0a                	add    BYTE PTR [edx],cl
     953:	34 00                	xor    al,0x0
     955:	03 0e                	add    ecx,DWORD PTR [esi]
     957:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     959:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     95b:	49                   	dec    ecx
     95c:	13 02                	adc    eax,DWORD PTR [edx]
     95e:	18 00                	sbb    BYTE PTR [eax],al
     960:	00 0b                	add    BYTE PTR [ebx],cl
     962:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     965:	19 03                	sbb    DWORD PTR [ebx],eax
     967:	0e                   	push   cs
     968:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     96a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     96c:	27                   	daa    
     96d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     970:	11 01                	adc    DWORD PTR [ecx],eax
     972:	12 06                	adc    al,BYTE PTR [esi]
     974:	40                   	inc    eax
     975:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     97b:	00 00                	add    BYTE PTR [eax],al
     97d:	0c 34                	or     al,0x34
     97f:	00 03                	add    BYTE PTR [ebx],al
     981:	0e                   	push   cs
     982:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     984:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     986:	49                   	dec    ecx
     987:	13 3f                	adc    edi,DWORD PTR [edi]
     989:	19 02                	sbb    DWORD PTR [edx],eax
     98b:	18 00                	sbb    BYTE PTR [eax],al
     98d:	00 00                	add    BYTE PTR [eax],al
     98f:	01 11                	add    DWORD PTR [ecx],edx
     991:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     997:	0e                   	push   cs
     998:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     99a:	11 01                	adc    DWORD PTR [ecx],eax
     99c:	12 06                	adc    al,BYTE PTR [esi]
     99e:	10 17                	adc    BYTE PTR [edi],dl
     9a0:	00 00                	add    BYTE PTR [eax],al
     9a2:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     9a5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9a7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9aa:	0e                   	push   cs
     9ab:	00 00                	add    BYTE PTR [eax],al
     9ad:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     9b0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9b2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9b5:	08 00                	or     BYTE PTR [eax],al
     9b7:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     9ba:	00 03                	add    BYTE PTR [ebx],al
     9bc:	0e                   	push   cs
     9bd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9bf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9c1:	49                   	dec    ecx
     9c2:	13 00                	adc    eax,DWORD PTR [eax]
     9c4:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     9ca:	00 00                	add    BYTE PTR [eax],al
     9cc:	06                   	push   es
     9cd:	0f 00 0b             	str    WORD PTR [ebx]
     9d0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9d3:	00 00                	add    BYTE PTR [eax],al
     9d5:	07                   	pop    es
     9d6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9d9:	19 03                	sbb    DWORD PTR [ebx],eax
     9db:	0e                   	push   cs
     9dc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9de:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9e0:	27                   	daa    
     9e1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9e4:	11 01                	adc    DWORD PTR [ecx],eax
     9e6:	12 06                	adc    al,BYTE PTR [esi]
     9e8:	40                   	inc    eax
     9e9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9ef:	00 00                	add    BYTE PTR [eax],al
     9f1:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     9f7:	0b 3b                	or     edi,DWORD PTR [ebx]
     9f9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9fc:	02 18                	add    bl,BYTE PTR [eax]
     9fe:	00 00                	add    BYTE PTR [eax],al
     a00:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     a06:	0b 3b                	or     edi,DWORD PTR [ebx]
     a08:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a0b:	02 18                	add    bl,BYTE PTR [eax]
     a0d:	00 00                	add    BYTE PTR [eax],al
     a0f:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     a12:	03 0e                	add    ecx,DWORD PTR [esi]
     a14:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a16:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a18:	49                   	dec    ecx
     a19:	13 3f                	adc    edi,DWORD PTR [edi]
     a1b:	19 02                	sbb    DWORD PTR [edx],eax
     a1d:	18 00                	sbb    BYTE PTR [eax],al
     a1f:	00 00                	add    BYTE PTR [eax],al
     a21:	01 11                	add    DWORD PTR [ecx],edx
     a23:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a29:	0e                   	push   cs
     a2a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a2c:	11 01                	adc    DWORD PTR [ecx],eax
     a2e:	12 06                	adc    al,BYTE PTR [esi]
     a30:	10 17                	adc    BYTE PTR [edi],dl
     a32:	00 00                	add    BYTE PTR [eax],al
     a34:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a37:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a39:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a3c:	0e                   	push   cs
     a3d:	00 00                	add    BYTE PTR [eax],al
     a3f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a42:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a44:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a47:	08 00                	or     BYTE PTR [eax],al
     a49:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a4c:	00 03                	add    BYTE PTR [ebx],al
     a4e:	0e                   	push   cs
     a4f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a51:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a53:	49                   	dec    ecx
     a54:	13 00                	adc    eax,DWORD PTR [eax]
     a56:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     a5c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a5e:	49                   	dec    ecx
     a5f:	13 3a                	adc    edi,DWORD PTR [edx]
     a61:	0b 3b                	or     edi,DWORD PTR [ebx]
     a63:	0b 01                	or     eax,DWORD PTR [ecx]
     a65:	13 00                	adc    eax,DWORD PTR [eax]
     a67:	00 06                	add    BYTE PTR [esi],al
     a69:	28 00                	sub    BYTE PTR [eax],al
     a6b:	03 0e                	add    ecx,DWORD PTR [esi]
     a6d:	1c 0b                	sbb    al,0xb
     a6f:	00 00                	add    BYTE PTR [eax],al
     a71:	07                   	pop    es
     a72:	28 00                	sub    BYTE PTR [eax],al
     a74:	03 0e                	add    ecx,DWORD PTR [esi]
     a76:	1c 05                	sbb    al,0x5
     a78:	00 00                	add    BYTE PTR [eax],al
     a7a:	08 0f                	or     BYTE PTR [edi],cl
     a7c:	00 0b                	add    BYTE PTR [ebx],cl
     a7e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a81:	00 00                	add    BYTE PTR [eax],al
     a83:	09 2e                	or     DWORD PTR [esi],ebp
     a85:	01 3f                	add    DWORD PTR [edi],edi
     a87:	19 03                	sbb    DWORD PTR [ebx],eax
     a89:	0e                   	push   cs
     a8a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a8c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a8e:	27                   	daa    
     a8f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a92:	11 01                	adc    DWORD PTR [ecx],eax
     a94:	12 06                	adc    al,BYTE PTR [esi]
     a96:	40                   	inc    eax
     a97:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a9d:	00 00                	add    BYTE PTR [eax],al
     a9f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     aa5:	0b 3b                	or     edi,DWORD PTR [ebx]
     aa7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     aaa:	02 18                	add    bl,BYTE PTR [eax]
     aac:	00 00                	add    BYTE PTR [eax],al
     aae:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     ab1:	03 0e                	add    ecx,DWORD PTR [esi]
     ab3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ab5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ab7:	49                   	dec    ecx
     ab8:	13 3f                	adc    edi,DWORD PTR [edi]
     aba:	19 02                	sbb    DWORD PTR [edx],eax
     abc:	18 00                	sbb    BYTE PTR [eax],al
     abe:	00 00                	add    BYTE PTR [eax],al
     ac0:	01 11                	add    DWORD PTR [ecx],edx
     ac2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ac8:	0e                   	push   cs
     ac9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     acb:	11 01                	adc    DWORD PTR [ecx],eax
     acd:	12 06                	adc    al,BYTE PTR [esi]
     acf:	10 17                	adc    BYTE PTR [edi],dl
     ad1:	00 00                	add    BYTE PTR [eax],al
     ad3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ad6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ad8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     adb:	0e                   	push   cs
     adc:	00 00                	add    BYTE PTR [eax],al
     ade:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ae1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ae3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ae6:	08 00                	or     BYTE PTR [eax],al
     ae8:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     aeb:	00 03                	add    BYTE PTR [ebx],al
     aed:	0e                   	push   cs
     aee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     af0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     af2:	49                   	dec    ecx
     af3:	13 00                	adc    eax,DWORD PTR [eax]
     af5:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     afb:	49                   	dec    ecx
     afc:	13 00                	adc    eax,DWORD PTR [eax]
     afe:	00 06                	add    BYTE PTR [esi],al
     b00:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b04:	00 00                	add    BYTE PTR [eax],al
     b06:	07                   	pop    es
     b07:	0f 00 0b             	str    WORD PTR [ebx]
     b0a:	0b 00                	or     eax,DWORD PTR [eax]
     b0c:	00 08                	add    BYTE PTR [eax],cl
     b0e:	13 01                	adc    eax,DWORD PTR [ecx]
     b10:	03 0e                	add    ecx,DWORD PTR [esi]
     b12:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b14:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b16:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b18:	01 13                	add    DWORD PTR [ebx],edx
     b1a:	00 00                	add    BYTE PTR [eax],al
     b1c:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     b22:	0b 3b                	or     edi,DWORD PTR [ebx]
     b24:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b27:	38 0b                	cmp    BYTE PTR [ebx],cl
     b29:	00 00                	add    BYTE PTR [eax],al
     b2b:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     b31:	13 01                	adc    eax,DWORD PTR [ecx]
     b33:	13 00                	adc    eax,DWORD PTR [eax]
     b35:	00 0b                	add    BYTE PTR [ebx],cl
     b37:	05 00 49 13 00       	add    eax,0x134900
     b3c:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     b3f:	01 3f                	add    DWORD PTR [edi],edi
     b41:	19 03                	sbb    DWORD PTR [ebx],eax
     b43:	0e                   	push   cs
     b44:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b46:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b48:	11 01                	adc    DWORD PTR [ecx],eax
     b4a:	12 06                	adc    al,BYTE PTR [esi]
     b4c:	40                   	inc    eax
     b4d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b53:	00 00                	add    BYTE PTR [eax],al
     b55:	0d 34 00 03 0e       	or     eax,0xe030034
     b5a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b5c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b5e:	49                   	dec    ecx
     b5f:	13 02                	adc    eax,DWORD PTR [edx]
     b61:	18 00                	sbb    BYTE PTR [eax],al
     b63:	00 0e                	add    BYTE PTR [esi],cl
     b65:	01 01                	add    DWORD PTR [ecx],eax
     b67:	49                   	dec    ecx
     b68:	13 01                	adc    eax,DWORD PTR [ecx]
     b6a:	13 00                	adc    eax,DWORD PTR [eax]
     b6c:	00 0f                	add    BYTE PTR [edi],cl
     b6e:	21 00                	and    DWORD PTR [eax],eax
     b70:	49                   	dec    ecx
     b71:	13 2f                	adc    ebp,DWORD PTR [edi]
     b73:	0b 00                	or     eax,DWORD PTR [eax]
     b75:	00 10                	add    BYTE PTR [eax],dl
     b77:	34 00                	xor    al,0x0
     b79:	03 0e                	add    ecx,DWORD PTR [esi]
     b7b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b7d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b7f:	49                   	dec    ecx
     b80:	13 3f                	adc    edi,DWORD PTR [edi]
     b82:	19 02                	sbb    DWORD PTR [edx],eax
     b84:	18 00                	sbb    BYTE PTR [eax],al
     b86:	00 00                	add    BYTE PTR [eax],al
     b88:	01 11                	add    DWORD PTR [ecx],edx
     b8a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b90:	0e                   	push   cs
     b91:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b93:	11 01                	adc    DWORD PTR [ecx],eax
     b95:	12 06                	adc    al,BYTE PTR [esi]
     b97:	10 17                	adc    BYTE PTR [edi],dl
     b99:	00 00                	add    BYTE PTR [eax],al
     b9b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b9e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ba0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ba3:	0e                   	push   cs
     ba4:	00 00                	add    BYTE PTR [eax],al
     ba6:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ba9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     bab:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     bae:	08 00                	or     BYTE PTR [eax],al
     bb0:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     bb3:	00 03                	add    BYTE PTR [ebx],al
     bb5:	0e                   	push   cs
     bb6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bb8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bba:	49                   	dec    ecx
     bbb:	13 00                	adc    eax,DWORD PTR [eax]
     bbd:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     bc3:	49                   	dec    ecx
     bc4:	13 00                	adc    eax,DWORD PTR [eax]
     bc6:	00 06                	add    BYTE PTR [esi],al
     bc8:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     bcc:	00 00                	add    BYTE PTR [eax],al
     bce:	07                   	pop    es
     bcf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bd2:	19 03                	sbb    DWORD PTR [ebx],eax
     bd4:	0e                   	push   cs
     bd5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bd7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bd9:	27                   	daa    
     bda:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bdd:	11 01                	adc    DWORD PTR [ecx],eax
     bdf:	12 06                	adc    al,BYTE PTR [esi]
     be1:	40                   	inc    eax
     be2:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     be8:	00 00                	add    BYTE PTR [eax],al
     bea:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     bf0:	0b 3b                	or     edi,DWORD PTR [ebx]
     bf2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bf5:	02 18                	add    bl,BYTE PTR [eax]
     bf7:	00 00                	add    BYTE PTR [eax],al
     bf9:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     bff:	0b 3b                	or     edi,DWORD PTR [ebx]
     c01:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c04:	02 18                	add    bl,BYTE PTR [eax]
     c06:	00 00                	add    BYTE PTR [eax],al
     c08:	0a 2e                	or     ch,BYTE PTR [esi]
     c0a:	01 3f                	add    DWORD PTR [edi],edi
     c0c:	19 03                	sbb    DWORD PTR [ebx],eax
     c0e:	0e                   	push   cs
     c0f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c11:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c13:	27                   	daa    
     c14:	19 11                	sbb    DWORD PTR [ecx],edx
     c16:	01 12                	add    DWORD PTR [edx],edx
     c18:	06                   	push   es
     c19:	40                   	inc    eax
     c1a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c20:	00 00                	add    BYTE PTR [eax],al
     c22:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     c25:	03 08                	add    ecx,DWORD PTR [eax]
     c27:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c29:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c2b:	49                   	dec    ecx
     c2c:	13 02                	adc    eax,DWORD PTR [edx]
     c2e:	18 00                	sbb    BYTE PTR [eax],al
     c30:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     c33:	00 03                	add    BYTE PTR [ebx],al
     c35:	0e                   	push   cs
     c36:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c38:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c3a:	49                   	dec    ecx
     c3b:	13 3f                	adc    edi,DWORD PTR [edi]
     c3d:	19 02                	sbb    DWORD PTR [edx],eax
     c3f:	18 00                	sbb    BYTE PTR [eax],al
     c41:	00 00                	add    BYTE PTR [eax],al
     c43:	01 11                	add    DWORD PTR [ecx],edx
     c45:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c4b:	0e                   	push   cs
     c4c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c4e:	11 01                	adc    DWORD PTR [ecx],eax
     c50:	12 06                	adc    al,BYTE PTR [esi]
     c52:	10 17                	adc    BYTE PTR [edi],dl
     c54:	00 00                	add    BYTE PTR [eax],al
     c56:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c59:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c5b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c5e:	0e                   	push   cs
     c5f:	00 00                	add    BYTE PTR [eax],al
     c61:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c64:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c66:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c69:	08 00                	or     BYTE PTR [eax],al
     c6b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c6e:	00 03                	add    BYTE PTR [ebx],al
     c70:	0e                   	push   cs
     c71:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c73:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c75:	49                   	dec    ecx
     c76:	13 00                	adc    eax,DWORD PTR [eax]
     c78:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c7e:	49                   	dec    ecx
     c7f:	13 00                	adc    eax,DWORD PTR [eax]
     c81:	00 06                	add    BYTE PTR [esi],al
     c83:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     c87:	00 00                	add    BYTE PTR [eax],al
     c89:	07                   	pop    es
     c8a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c8d:	19 03                	sbb    DWORD PTR [ebx],eax
     c8f:	0e                   	push   cs
     c90:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c92:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c94:	27                   	daa    
     c95:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c98:	11 01                	adc    DWORD PTR [ecx],eax
     c9a:	12 06                	adc    al,BYTE PTR [esi]
     c9c:	40                   	inc    eax
     c9d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     ca3:	00 00                	add    BYTE PTR [eax],al
     ca5:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     cab:	0b 3b                	or     edi,DWORD PTR [ebx]
     cad:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     cb0:	02 18                	add    bl,BYTE PTR [eax]
     cb2:	00 00                	add    BYTE PTR [eax],al
     cb4:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     cb7:	03 08                	add    ecx,DWORD PTR [eax]
     cb9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cbb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cbd:	49                   	dec    ecx
     cbe:	13 02                	adc    eax,DWORD PTR [edx]
     cc0:	18 00                	sbb    BYTE PTR [eax],al
     cc2:	00 0a                	add    BYTE PTR [edx],cl
     cc4:	34 00                	xor    al,0x0
     cc6:	03 0e                	add    ecx,DWORD PTR [esi]
     cc8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cca:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ccc:	49                   	dec    ecx
     ccd:	13 3f                	adc    edi,DWORD PTR [edi]
     ccf:	19 02                	sbb    DWORD PTR [edx],eax
     cd1:	18 00                	sbb    BYTE PTR [eax],al
     cd3:	00 00                	add    BYTE PTR [eax],al
     cd5:	01 11                	add    DWORD PTR [ecx],edx
     cd7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     cdd:	0e                   	push   cs
     cde:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ce0:	11 01                	adc    DWORD PTR [ecx],eax
     ce2:	12 06                	adc    al,BYTE PTR [esi]
     ce4:	10 17                	adc    BYTE PTR [edi],dl
     ce6:	00 00                	add    BYTE PTR [eax],al
     ce8:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ceb:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ced:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cf0:	0e                   	push   cs
     cf1:	00 00                	add    BYTE PTR [eax],al
     cf3:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     cf6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cf8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cfb:	08 00                	or     BYTE PTR [eax],al
     cfd:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     d00:	00 03                	add    BYTE PTR [ebx],al
     d02:	0e                   	push   cs
     d03:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d05:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d07:	49                   	dec    ecx
     d08:	13 00                	adc    eax,DWORD PTR [eax]
     d0a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     d10:	49                   	dec    ecx
     d11:	13 00                	adc    eax,DWORD PTR [eax]
     d13:	00 06                	add    BYTE PTR [esi],al
     d15:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     d19:	00 00                	add    BYTE PTR [eax],al
     d1b:	07                   	pop    es
     d1c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d1f:	19 03                	sbb    DWORD PTR [ebx],eax
     d21:	0e                   	push   cs
     d22:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d24:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d26:	27                   	daa    
     d27:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d2a:	11 01                	adc    DWORD PTR [ecx],eax
     d2c:	12 06                	adc    al,BYTE PTR [esi]
     d2e:	40                   	inc    eax
     d2f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d35:	00 00                	add    BYTE PTR [eax],al
     d37:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     d3d:	0b 3b                	or     edi,DWORD PTR [ebx]
     d3f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d42:	02 18                	add    bl,BYTE PTR [eax]
     d44:	00 00                	add    BYTE PTR [eax],al
     d46:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     d49:	03 08                	add    ecx,DWORD PTR [eax]
     d4b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d4d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d4f:	49                   	dec    ecx
     d50:	13 02                	adc    eax,DWORD PTR [edx]
     d52:	18 00                	sbb    BYTE PTR [eax],al
     d54:	00 0a                	add    BYTE PTR [edx],cl
     d56:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     d5b:	0b 3b                	or     edi,DWORD PTR [ebx]
     d5d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d60:	02 18                	add    bl,BYTE PTR [eax]
     d62:	00 00                	add    BYTE PTR [eax],al
     d64:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d67:	03 0e                	add    ecx,DWORD PTR [esi]
     d69:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d6b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d6d:	49                   	dec    ecx
     d6e:	13 3f                	adc    edi,DWORD PTR [edi]
     d70:	19 02                	sbb    DWORD PTR [edx],eax
     d72:	18 00                	sbb    BYTE PTR [eax],al
     d74:	00 00                	add    BYTE PTR [eax],al
     d76:	01 11                	add    DWORD PTR [ecx],edx
     d78:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d7e:	0e                   	push   cs
     d7f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d81:	11 01                	adc    DWORD PTR [ecx],eax
     d83:	12 06                	adc    al,BYTE PTR [esi]
     d85:	10 17                	adc    BYTE PTR [edi],dl
     d87:	00 00                	add    BYTE PTR [eax],al
     d89:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d8c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d8e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d91:	0e                   	push   cs
     d92:	00 00                	add    BYTE PTR [eax],al
     d94:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d97:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d99:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d9c:	08 00                	or     BYTE PTR [eax],al
     d9e:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     da1:	00 03                	add    BYTE PTR [ebx],al
     da3:	0e                   	push   cs
     da4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     da6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     da8:	49                   	dec    ecx
     da9:	13 00                	adc    eax,DWORD PTR [eax]
     dab:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     db1:	49                   	dec    ecx
     db2:	13 00                	adc    eax,DWORD PTR [eax]
     db4:	00 06                	add    BYTE PTR [esi],al
     db6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     db9:	19 03                	sbb    DWORD PTR [ebx],eax
     dbb:	0e                   	push   cs
     dbc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dbe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dc0:	27                   	daa    
     dc1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     dc4:	11 01                	adc    DWORD PTR [ecx],eax
     dc6:	12 06                	adc    al,BYTE PTR [esi]
     dc8:	40                   	inc    eax
     dc9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     dcf:	00 00                	add    BYTE PTR [eax],al
     dd1:	07                   	pop    es
     dd2:	05 00 03 08 3a       	add    eax,0x3a080300
     dd7:	0b 3b                	or     edi,DWORD PTR [ebx]
     dd9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ddc:	02 18                	add    bl,BYTE PTR [eax]
     dde:	00 00                	add    BYTE PTR [eax],al
     de0:	08 2e                	or     BYTE PTR [esi],ch
     de2:	01 3f                	add    DWORD PTR [edi],edi
     de4:	19 03                	sbb    DWORD PTR [ebx],eax
     de6:	0e                   	push   cs
     de7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     de9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     deb:	27                   	daa    
     dec:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     def:	11 01                	adc    DWORD PTR [ecx],eax
     df1:	12 06                	adc    al,BYTE PTR [esi]
     df3:	40                   	inc    eax
     df4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     dfa:	00 00                	add    BYTE PTR [eax],al
     dfc:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     dff:	03 08                	add    ecx,DWORD PTR [eax]
     e01:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e03:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e05:	49                   	dec    ecx
     e06:	13 02                	adc    eax,DWORD PTR [edx]
     e08:	18 00                	sbb    BYTE PTR [eax],al
     e0a:	00 0a                	add    BYTE PTR [edx],cl
     e0c:	34 00                	xor    al,0x0
     e0e:	03 0e                	add    ecx,DWORD PTR [esi]
     e10:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e12:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e14:	49                   	dec    ecx
     e15:	13 3f                	adc    edi,DWORD PTR [edi]
     e17:	19 02                	sbb    DWORD PTR [edx],eax
     e19:	18 00                	sbb    BYTE PTR [eax],al
     e1b:	00 00                	add    BYTE PTR [eax],al
     e1d:	01 11                	add    DWORD PTR [ecx],edx
     e1f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e25:	0e                   	push   cs
     e26:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e28:	11 01                	adc    DWORD PTR [ecx],eax
     e2a:	12 06                	adc    al,BYTE PTR [esi]
     e2c:	10 17                	adc    BYTE PTR [edi],dl
     e2e:	00 00                	add    BYTE PTR [eax],al
     e30:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e33:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e35:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e38:	08 00                	or     BYTE PTR [eax],al
     e3a:	00 03                	add    BYTE PTR [ebx],al
     e3c:	16                   	push   ss
     e3d:	00 03                	add    BYTE PTR [ebx],al
     e3f:	0e                   	push   cs
     e40:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e42:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e44:	49                   	dec    ecx
     e45:	13 00                	adc    eax,DWORD PTR [eax]
     e47:	00 04 24             	add    BYTE PTR [esp],al
     e4a:	00 0b                	add    BYTE PTR [ebx],cl
     e4c:	0b 3e                	or     edi,DWORD PTR [esi]
     e4e:	0b 03                	or     eax,DWORD PTR [ebx]
     e50:	0e                   	push   cs
     e51:	00 00                	add    BYTE PTR [eax],al
     e53:	05 2e 01 3f 19       	add    eax,0x193f012e
     e58:	03 0e                	add    ecx,DWORD PTR [esi]
     e5a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e5c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e5e:	27                   	daa    
     e5f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e62:	11 01                	adc    DWORD PTR [ecx],eax
     e64:	12 06                	adc    al,BYTE PTR [esi]
     e66:	40                   	inc    eax
     e67:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e6d:	00 00                	add    BYTE PTR [eax],al
     e6f:	06                   	push   es
     e70:	05 00 03 08 3a       	add    eax,0x3a080300
     e75:	0b 3b                	or     edi,DWORD PTR [ebx]
     e77:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e7a:	02 18                	add    bl,BYTE PTR [eax]
     e7c:	00 00                	add    BYTE PTR [eax],al
     e7e:	07                   	pop    es
     e7f:	34 00                	xor    al,0x0
     e81:	03 08                	add    ecx,DWORD PTR [eax]
     e83:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e85:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e87:	49                   	dec    ecx
     e88:	13 02                	adc    eax,DWORD PTR [edx]
     e8a:	18 00                	sbb    BYTE PTR [eax],al
     e8c:	00 08                	add    BYTE PTR [eax],cl
     e8e:	0f 00 0b             	str    WORD PTR [ebx]
     e91:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e94:	00 00                	add    BYTE PTR [eax],al
     e96:	09 26                	or     DWORD PTR [esi],esp
     e98:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     e9b:	00 00                	add    BYTE PTR [eax],al
     e9d:	0a 2e                	or     ch,BYTE PTR [esi]
     e9f:	01 3f                	add    DWORD PTR [edi],edi
     ea1:	19 03                	sbb    DWORD PTR [ebx],eax
     ea3:	0e                   	push   cs
     ea4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ea6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ea8:	27                   	daa    
     ea9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     eac:	11 01                	adc    DWORD PTR [ecx],eax
     eae:	12 06                	adc    al,BYTE PTR [esi]
     eb0:	40                   	inc    eax
     eb1:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     eb7:	00 01                	add    BYTE PTR [ecx],al
     eb9:	11 01                	adc    DWORD PTR [ecx],eax
     ebb:	25 0e 13 0b 03       	and    eax,0x30b130e
     ec0:	0e                   	push   cs
     ec1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ec3:	11 01                	adc    DWORD PTR [ecx],eax
     ec5:	12 06                	adc    al,BYTE PTR [esi]
     ec7:	10 17                	adc    BYTE PTR [edi],dl
     ec9:	00 00                	add    BYTE PTR [eax],al
     ecb:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ece:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ed0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ed3:	08 00                	or     BYTE PTR [eax],al
     ed5:	00 03                	add    BYTE PTR [ebx],al
     ed7:	16                   	push   ss
     ed8:	00 03                	add    BYTE PTR [ebx],al
     eda:	0e                   	push   cs
     edb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     edd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     edf:	49                   	dec    ecx
     ee0:	13 00                	adc    eax,DWORD PTR [eax]
     ee2:	00 04 24             	add    BYTE PTR [esp],al
     ee5:	00 0b                	add    BYTE PTR [ebx],cl
     ee7:	0b 3e                	or     edi,DWORD PTR [esi]
     ee9:	0b 03                	or     eax,DWORD PTR [ebx]
     eeb:	0e                   	push   cs
     eec:	00 00                	add    BYTE PTR [eax],al
     eee:	05 2e 01 3f 19       	add    eax,0x193f012e
     ef3:	03 0e                	add    ecx,DWORD PTR [esi]
     ef5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ef7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ef9:	27                   	daa    
     efa:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     efd:	11 01                	adc    DWORD PTR [ecx],eax
     eff:	12 06                	adc    al,BYTE PTR [esi]
     f01:	40                   	inc    eax
     f02:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f08:	00 00                	add    BYTE PTR [eax],al
     f0a:	06                   	push   es
     f0b:	05 00 03 08 3a       	add    eax,0x3a080300
     f10:	0b 3b                	or     edi,DWORD PTR [ebx]
     f12:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f15:	02 18                	add    bl,BYTE PTR [eax]
     f17:	00 00                	add    BYTE PTR [eax],al
     f19:	07                   	pop    es
     f1a:	0f 00 0b             	str    WORD PTR [ebx]
     f1d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f20:	00 00                	add    BYTE PTR [eax],al
     f22:	08 26                	or     BYTE PTR [esi],ah
     f24:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     f27:	00 00                	add    BYTE PTR [eax],al
     f29:	09 2e                	or     DWORD PTR [esi],ebp
     f2b:	01 3f                	add    DWORD PTR [edi],edi
     f2d:	19 03                	sbb    DWORD PTR [ebx],eax
     f2f:	0e                   	push   cs
     f30:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f32:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f34:	27                   	daa    
     f35:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f38:	11 01                	adc    DWORD PTR [ecx],eax
     f3a:	12 06                	adc    al,BYTE PTR [esi]
     f3c:	40                   	inc    eax
     f3d:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     f43:	00 01                	add    BYTE PTR [ecx],al
     f45:	11 01                	adc    DWORD PTR [ecx],eax
     f47:	25 0e 13 0b 03       	and    eax,0x30b130e
     f4c:	0e                   	push   cs
     f4d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f4f:	11 01                	adc    DWORD PTR [ecx],eax
     f51:	12 06                	adc    al,BYTE PTR [esi]
     f53:	10 17                	adc    BYTE PTR [edi],dl
     f55:	00 00                	add    BYTE PTR [eax],al
     f57:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f5a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f5c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f5f:	08 00                	or     BYTE PTR [eax],al
     f61:	00 03                	add    BYTE PTR [ebx],al
     f63:	16                   	push   ss
     f64:	00 03                	add    BYTE PTR [ebx],al
     f66:	0e                   	push   cs
     f67:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f69:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f6b:	49                   	dec    ecx
     f6c:	13 00                	adc    eax,DWORD PTR [eax]
     f6e:	00 04 24             	add    BYTE PTR [esp],al
     f71:	00 0b                	add    BYTE PTR [ebx],cl
     f73:	0b 3e                	or     edi,DWORD PTR [esi]
     f75:	0b 03                	or     eax,DWORD PTR [ebx]
     f77:	0e                   	push   cs
     f78:	00 00                	add    BYTE PTR [eax],al
     f7a:	05 2e 01 3f 19       	add    eax,0x193f012e
     f7f:	03 0e                	add    ecx,DWORD PTR [esi]
     f81:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f83:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f85:	27                   	daa    
     f86:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f89:	11 01                	adc    DWORD PTR [ecx],eax
     f8b:	12 06                	adc    al,BYTE PTR [esi]
     f8d:	40                   	inc    eax
     f8e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f94:	00 00                	add    BYTE PTR [eax],al
     f96:	06                   	push   es
     f97:	05 00 03 08 3a       	add    eax,0x3a080300
     f9c:	0b 3b                	or     edi,DWORD PTR [ebx]
     f9e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fa1:	02 18                	add    bl,BYTE PTR [eax]
     fa3:	00 00                	add    BYTE PTR [eax],al
     fa5:	07                   	pop    es
     fa6:	34 00                	xor    al,0x0
     fa8:	03 08                	add    ecx,DWORD PTR [eax]
     faa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fae:	49                   	dec    ecx
     faf:	13 02                	adc    eax,DWORD PTR [edx]
     fb1:	18 00                	sbb    BYTE PTR [eax],al
     fb3:	00 08                	add    BYTE PTR [eax],cl
     fb5:	0f 00 0b             	str    WORD PTR [ebx]
     fb8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fbb:	00 00                	add    BYTE PTR [eax],al
     fbd:	09 26                	or     DWORD PTR [esi],esp
     fbf:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     fc2:	00 00                	add    BYTE PTR [eax],al
     fc4:	0a 2e                	or     ch,BYTE PTR [esi]
     fc6:	01 3f                	add    DWORD PTR [edi],edi
     fc8:	19 03                	sbb    DWORD PTR [ebx],eax
     fca:	0e                   	push   cs
     fcb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fcd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fcf:	27                   	daa    
     fd0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fd3:	11 01                	adc    DWORD PTR [ecx],eax
     fd5:	12 06                	adc    al,BYTE PTR [esi]
     fd7:	40                   	inc    eax
     fd8:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     fde:	00 01                	add    BYTE PTR [ecx],al
     fe0:	11 01                	adc    DWORD PTR [ecx],eax
     fe2:	25 0e 13 0b 03       	and    eax,0x30b130e
     fe7:	0e                   	push   cs
     fe8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fea:	11 01                	adc    DWORD PTR [ecx],eax
     fec:	12 06                	adc    al,BYTE PTR [esi]
     fee:	10 17                	adc    BYTE PTR [edi],dl
     ff0:	00 00                	add    BYTE PTR [eax],al
     ff2:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ff5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ff7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ffa:	0e                   	push   cs
     ffb:	00 00                	add    BYTE PTR [eax],al
     ffd:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1000:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1002:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1005:	08 00                	or     BYTE PTR [eax],al
    1007:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    100a:	00 03                	add    BYTE PTR [ebx],al
    100c:	0e                   	push   cs
    100d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    100f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1011:	49                   	dec    ecx
    1012:	13 00                	adc    eax,DWORD PTR [eax]
    1014:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    101a:	49                   	dec    ecx
    101b:	13 00                	adc    eax,DWORD PTR [eax]
    101d:	00 06                	add    BYTE PTR [esi],al
    101f:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1023:	00 00                	add    BYTE PTR [eax],al
    1025:	07                   	pop    es
    1026:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1029:	19 03                	sbb    DWORD PTR [ebx],eax
    102b:	0e                   	push   cs
    102c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    102e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1030:	27                   	daa    
    1031:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1034:	11 01                	adc    DWORD PTR [ecx],eax
    1036:	12 06                	adc    al,BYTE PTR [esi]
    1038:	40                   	inc    eax
    1039:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    103f:	00 00                	add    BYTE PTR [eax],al
    1041:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1047:	0b 3b                	or     edi,DWORD PTR [ebx]
    1049:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    104c:	02 18                	add    bl,BYTE PTR [eax]
    104e:	00 00                	add    BYTE PTR [eax],al
    1050:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1053:	03 08                	add    ecx,DWORD PTR [eax]
    1055:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1057:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1059:	49                   	dec    ecx
    105a:	13 02                	adc    eax,DWORD PTR [edx]
    105c:	18 00                	sbb    BYTE PTR [eax],al
    105e:	00 0a                	add    BYTE PTR [edx],cl
    1060:	34 00                	xor    al,0x0
    1062:	03 0e                	add    ecx,DWORD PTR [esi]
    1064:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1066:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1068:	49                   	dec    ecx
    1069:	13 00                	adc    eax,DWORD PTR [eax]
    106b:	00 0b                	add    BYTE PTR [ebx],cl
    106d:	34 00                	xor    al,0x0
    106f:	03 08                	add    ecx,DWORD PTR [eax]
    1071:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1073:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1075:	49                   	dec    ecx
    1076:	13 00                	adc    eax,DWORD PTR [eax]
    1078:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    107b:	00 03                	add    BYTE PTR [ebx],al
    107d:	0e                   	push   cs
    107e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1080:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1082:	49                   	dec    ecx
    1083:	13 02                	adc    eax,DWORD PTR [edx]
    1085:	18 00                	sbb    BYTE PTR [eax],al
    1087:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    108d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    108f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1091:	49                   	dec    ecx
    1092:	13 3f                	adc    edi,DWORD PTR [edi]
    1094:	19 02                	sbb    DWORD PTR [edx],eax
    1096:	18 00                	sbb    BYTE PTR [eax],al
    1098:	00 00                	add    BYTE PTR [eax],al
    109a:	01 11                	add    DWORD PTR [ecx],edx
    109c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10a2:	0e                   	push   cs
    10a3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10a5:	11 01                	adc    DWORD PTR [ecx],eax
    10a7:	12 06                	adc    al,BYTE PTR [esi]
    10a9:	10 17                	adc    BYTE PTR [edi],dl
    10ab:	00 00                	add    BYTE PTR [eax],al
    10ad:	02 2e                	add    ch,BYTE PTR [esi]
    10af:	01 3f                	add    DWORD PTR [edi],edi
    10b1:	19 03                	sbb    DWORD PTR [ebx],eax
    10b3:	0e                   	push   cs
    10b4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10b6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10b8:	27                   	daa    
    10b9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10bc:	11 01                	adc    DWORD PTR [ecx],eax
    10be:	12 06                	adc    al,BYTE PTR [esi]
    10c0:	40                   	inc    eax
    10c1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10c7:	00 00                	add    BYTE PTR [eax],al
    10c9:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    10cf:	0b 3b                	or     edi,DWORD PTR [ebx]
    10d1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10d4:	02 18                	add    bl,BYTE PTR [eax]
    10d6:	00 00                	add    BYTE PTR [eax],al
    10d8:	04 0f                	add    al,0xf
    10da:	00 0b                	add    BYTE PTR [ebx],cl
    10dc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10df:	00 00                	add    BYTE PTR [eax],al
    10e1:	05 24 00 0b 0b       	add    eax,0xb0b0024
    10e6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10e9:	0e                   	push   cs
    10ea:	00 00                	add    BYTE PTR [eax],al
    10ec:	06                   	push   es
    10ed:	24 00                	and    al,0x0
    10ef:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10f1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10f4:	08 00                	or     BYTE PTR [eax],al
    10f6:	00 00                	add    BYTE PTR [eax],al
    10f8:	01 11                	add    DWORD PTR [ecx],edx
    10fa:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1100:	0e                   	push   cs
    1101:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1103:	11 01                	adc    DWORD PTR [ecx],eax
    1105:	12 06                	adc    al,BYTE PTR [esi]
    1107:	10 17                	adc    BYTE PTR [edi],dl
    1109:	00 00                	add    BYTE PTR [eax],al
    110b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    110e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1110:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1113:	0e                   	push   cs
    1114:	00 00                	add    BYTE PTR [eax],al
    1116:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1119:	0b 0b                	or     ecx,DWORD PTR [ebx]
    111b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    111e:	08 00                	or     BYTE PTR [eax],al
    1120:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1123:	00 03                	add    BYTE PTR [ebx],al
    1125:	0e                   	push   cs
    1126:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1128:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    112a:	49                   	dec    ecx
    112b:	13 00                	adc    eax,DWORD PTR [eax]
    112d:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1133:	49                   	dec    ecx
    1134:	13 00                	adc    eax,DWORD PTR [eax]
    1136:	00 06                	add    BYTE PTR [esi],al
    1138:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    113c:	00 00                	add    BYTE PTR [eax],al
    113e:	07                   	pop    es
    113f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1142:	19 03                	sbb    DWORD PTR [ebx],eax
    1144:	0e                   	push   cs
    1145:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1147:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1149:	27                   	daa    
    114a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    114d:	11 01                	adc    DWORD PTR [ecx],eax
    114f:	12 06                	adc    al,BYTE PTR [esi]
    1151:	40                   	inc    eax
    1152:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1158:	00 00                	add    BYTE PTR [eax],al
    115a:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1160:	0b 3b                	or     edi,DWORD PTR [ebx]
    1162:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1165:	02 18                	add    bl,BYTE PTR [eax]
    1167:	00 00                	add    BYTE PTR [eax],al
    1169:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    116c:	03 08                	add    ecx,DWORD PTR [eax]
    116e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1170:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1172:	49                   	dec    ecx
    1173:	13 02                	adc    eax,DWORD PTR [edx]
    1175:	18 00                	sbb    BYTE PTR [eax],al
    1177:	00 0a                	add    BYTE PTR [edx],cl
    1179:	34 00                	xor    al,0x0
    117b:	03 0e                	add    ecx,DWORD PTR [esi]
    117d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    117f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1181:	49                   	dec    ecx
    1182:	13 00                	adc    eax,DWORD PTR [eax]
    1184:	00 0b                	add    BYTE PTR [ebx],cl
    1186:	34 00                	xor    al,0x0
    1188:	03 08                	add    ecx,DWORD PTR [eax]
    118a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    118c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    118e:	49                   	dec    ecx
    118f:	13 00                	adc    eax,DWORD PTR [eax]
    1191:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1194:	00 03                	add    BYTE PTR [ebx],al
    1196:	0e                   	push   cs
    1197:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1199:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    119b:	49                   	dec    ecx
    119c:	13 3f                	adc    edi,DWORD PTR [edi]
    119e:	19 02                	sbb    DWORD PTR [edx],eax
    11a0:	18 00                	sbb    BYTE PTR [eax],al
    11a2:	00 00                	add    BYTE PTR [eax],al
    11a4:	01 11                	add    DWORD PTR [ecx],edx
    11a6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    11ac:	0e                   	push   cs
    11ad:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    11af:	11 01                	adc    DWORD PTR [ecx],eax
    11b1:	12 06                	adc    al,BYTE PTR [esi]
    11b3:	10 17                	adc    BYTE PTR [edi],dl
    11b5:	00 00                	add    BYTE PTR [eax],al
    11b7:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    11ba:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11bc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11bf:	0e                   	push   cs
    11c0:	00 00                	add    BYTE PTR [eax],al
    11c2:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    11c5:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11c7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11ca:	08 00                	or     BYTE PTR [eax],al
    11cc:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    11cf:	00 03                	add    BYTE PTR [ebx],al
    11d1:	0e                   	push   cs
    11d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11d6:	49                   	dec    ecx
    11d7:	13 00                	adc    eax,DWORD PTR [eax]
    11d9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    11df:	49                   	dec    ecx
    11e0:	13 00                	adc    eax,DWORD PTR [eax]
    11e2:	00 06                	add    BYTE PTR [esi],al
    11e4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    11e7:	19 03                	sbb    DWORD PTR [ebx],eax
    11e9:	0e                   	push   cs
    11ea:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11ec:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11ee:	27                   	daa    
    11ef:	19 11                	sbb    DWORD PTR [ecx],edx
    11f1:	01 12                	add    DWORD PTR [edx],edx
    11f3:	06                   	push   es
    11f4:	40                   	inc    eax
    11f5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    11fb:	00 00                	add    BYTE PTR [eax],al
    11fd:	07                   	pop    es
    11fe:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1203:	0b 3b                	or     edi,DWORD PTR [ebx]
    1205:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1208:	02 18                	add    bl,BYTE PTR [eax]
    120a:	00 00                	add    BYTE PTR [eax],al
    120c:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    120f:	03 08                	add    ecx,DWORD PTR [eax]
    1211:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1213:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1215:	49                   	dec    ecx
    1216:	13 02                	adc    eax,DWORD PTR [edx]
    1218:	18 00                	sbb    BYTE PTR [eax],al
    121a:	00 09                	add    BYTE PTR [ecx],cl
    121c:	34 00                	xor    al,0x0
    121e:	03 0e                	add    ecx,DWORD PTR [esi]
    1220:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1222:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1224:	49                   	dec    ecx
    1225:	13 3f                	adc    edi,DWORD PTR [edi]
    1227:	19 02                	sbb    DWORD PTR [edx],eax
    1229:	18 00                	sbb    BYTE PTR [eax],al
    122b:	00 00                	add    BYTE PTR [eax],al
    122d:	01 11                	add    DWORD PTR [ecx],edx
    122f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1235:	0e                   	push   cs
    1236:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1238:	11 01                	adc    DWORD PTR [ecx],eax
    123a:	12 06                	adc    al,BYTE PTR [esi]
    123c:	10 17                	adc    BYTE PTR [edi],dl
    123e:	00 00                	add    BYTE PTR [eax],al
    1240:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1243:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1245:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1248:	0e                   	push   cs
    1249:	00 00                	add    BYTE PTR [eax],al
    124b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    124e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1250:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1253:	08 00                	or     BYTE PTR [eax],al
    1255:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1258:	00 03                	add    BYTE PTR [ebx],al
    125a:	0e                   	push   cs
    125b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    125d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    125f:	49                   	dec    ecx
    1260:	13 00                	adc    eax,DWORD PTR [eax]
    1262:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1268:	49                   	dec    ecx
    1269:	13 00                	adc    eax,DWORD PTR [eax]
    126b:	00 06                	add    BYTE PTR [esi],al
    126d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1270:	19 03                	sbb    DWORD PTR [ebx],eax
    1272:	0e                   	push   cs
    1273:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1275:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1277:	27                   	daa    
    1278:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    127b:	11 01                	adc    DWORD PTR [ecx],eax
    127d:	12 06                	adc    al,BYTE PTR [esi]
    127f:	40                   	inc    eax
    1280:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1286:	00 00                	add    BYTE PTR [eax],al
    1288:	07                   	pop    es
    1289:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    128e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1290:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1293:	02 18                	add    bl,BYTE PTR [eax]
    1295:	00 00                	add    BYTE PTR [eax],al
    1297:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    129a:	03 08                	add    ecx,DWORD PTR [eax]
    129c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    129e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12a0:	49                   	dec    ecx
    12a1:	13 02                	adc    eax,DWORD PTR [edx]
    12a3:	18 00                	sbb    BYTE PTR [eax],al
    12a5:	00 09                	add    BYTE PTR [ecx],cl
    12a7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    12aa:	19 03                	sbb    DWORD PTR [ebx],eax
    12ac:	0e                   	push   cs
    12ad:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12af:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12b1:	27                   	daa    
    12b2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12b5:	11 01                	adc    DWORD PTR [ecx],eax
    12b7:	12 06                	adc    al,BYTE PTR [esi]
    12b9:	40                   	inc    eax
    12ba:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12c0:	00 00                	add    BYTE PTR [eax],al
    12c2:	0a 01                	or     al,BYTE PTR [ecx]
    12c4:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    12c7:	01 13                	add    DWORD PTR [ebx],edx
    12c9:	00 00                	add    BYTE PTR [eax],al
    12cb:	0b 21                	or     esp,DWORD PTR [ecx]
    12cd:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12d0:	2f                   	das    
    12d1:	0b 00                	or     eax,DWORD PTR [eax]
    12d3:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    12d6:	00 03                	add    BYTE PTR [ebx],al
    12d8:	0e                   	push   cs
    12d9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12db:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12dd:	49                   	dec    ecx
    12de:	13 02                	adc    eax,DWORD PTR [edx]
    12e0:	18 00                	sbb    BYTE PTR [eax],al
    12e2:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    12e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12ec:	49                   	dec    ecx
    12ed:	13 3f                	adc    edi,DWORD PTR [edi]
    12ef:	19 02                	sbb    DWORD PTR [edx],eax
    12f1:	18 00                	sbb    BYTE PTR [eax],al
    12f3:	00 00                	add    BYTE PTR [eax],al
    12f5:	01 11                	add    DWORD PTR [ecx],edx
    12f7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    12fd:	0e                   	push   cs
    12fe:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1300:	11 01                	adc    DWORD PTR [ecx],eax
    1302:	12 06                	adc    al,BYTE PTR [esi]
    1304:	10 17                	adc    BYTE PTR [edi],dl
    1306:	00 00                	add    BYTE PTR [eax],al
    1308:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    130b:	03 0e                	add    ecx,DWORD PTR [esi]
    130d:	0b 0b                	or     ecx,DWORD PTR [ebx]
    130f:	49                   	dec    ecx
    1310:	13 3a                	adc    edi,DWORD PTR [edx]
    1312:	0b 3b                	or     edi,DWORD PTR [ebx]
    1314:	0b 01                	or     eax,DWORD PTR [ecx]
    1316:	13 00                	adc    eax,DWORD PTR [eax]
    1318:	00 03                	add    BYTE PTR [ebx],al
    131a:	28 00                	sub    BYTE PTR [eax],al
    131c:	03 0e                	add    ecx,DWORD PTR [esi]
    131e:	1c 0b                	sbb    al,0xb
    1320:	00 00                	add    BYTE PTR [eax],al
    1322:	04 28                	add    al,0x28
    1324:	00 03                	add    BYTE PTR [ebx],al
    1326:	0e                   	push   cs
    1327:	1c 05                	sbb    al,0x5
    1329:	00 00                	add    BYTE PTR [eax],al
    132b:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1330:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1333:	0e                   	push   cs
    1334:	00 00                	add    BYTE PTR [eax],al
    1336:	06                   	push   es
    1337:	24 00                	and    al,0x0
    1339:	0b 0b                	or     ecx,DWORD PTR [ebx]
    133b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    133e:	08 00                	or     BYTE PTR [eax],al
    1340:	00 07                	add    BYTE PTR [edi],al
    1342:	16                   	push   ss
    1343:	00 03                	add    BYTE PTR [ebx],al
    1345:	0e                   	push   cs
    1346:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1348:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    134a:	49                   	dec    ecx
    134b:	13 00                	adc    eax,DWORD PTR [eax]
    134d:	00 08                	add    BYTE PTR [eax],cl
    134f:	13 01                	adc    eax,DWORD PTR [ecx]
    1351:	03 08                	add    ecx,DWORD PTR [eax]
    1353:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1355:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1357:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1359:	01 13                	add    DWORD PTR [ebx],edx
    135b:	00 00                	add    BYTE PTR [eax],al
    135d:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    1363:	0b 3b                	or     edi,DWORD PTR [ebx]
    1365:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1368:	38 0b                	cmp    BYTE PTR [ebx],cl
    136a:	00 00                	add    BYTE PTR [eax],al
    136c:	0a 0f                	or     cl,BYTE PTR [edi]
    136e:	00 0b                	add    BYTE PTR [ebx],cl
    1370:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1373:	00 00                	add    BYTE PTR [eax],al
    1375:	0b 26                	or     esp,DWORD PTR [esi]
    1377:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    137a:	00 00                	add    BYTE PTR [eax],al
    137c:	0c 2e                	or     al,0x2e
    137e:	01 3f                	add    DWORD PTR [edi],edi
    1380:	19 03                	sbb    DWORD PTR [ebx],eax
    1382:	0e                   	push   cs
    1383:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1385:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1387:	49                   	dec    ecx
    1388:	13 11                	adc    edx,DWORD PTR [ecx]
    138a:	01 12                	add    DWORD PTR [edx],edx
    138c:	06                   	push   es
    138d:	40                   	inc    eax
    138e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1394:	00 00                	add    BYTE PTR [eax],al
    1396:	0d 34 00 03 0e       	or     eax,0xe030034
    139b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    139d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    139f:	49                   	dec    ecx
    13a0:	13 02                	adc    eax,DWORD PTR [edx]
    13a2:	18 00                	sbb    BYTE PTR [eax],al
    13a4:	00 0e                	add    BYTE PTR [esi],cl
    13a6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13a9:	19 03                	sbb    DWORD PTR [ebx],eax
    13ab:	0e                   	push   cs
    13ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13b0:	27                   	daa    
    13b1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13b4:	11 01                	adc    DWORD PTR [ecx],eax
    13b6:	12 06                	adc    al,BYTE PTR [esi]
    13b8:	40                   	inc    eax
    13b9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13bf:	00 00                	add    BYTE PTR [eax],al
    13c1:	0f 05                	syscall 
    13c3:	00 03                	add    BYTE PTR [ebx],al
    13c5:	0e                   	push   cs
    13c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13ca:	49                   	dec    ecx
    13cb:	13 02                	adc    eax,DWORD PTR [edx]
    13cd:	18 00                	sbb    BYTE PTR [eax],al
    13cf:	00 10                	add    BYTE PTR [eax],dl
    13d1:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13d4:	19 03                	sbb    DWORD PTR [ebx],eax
    13d6:	0e                   	push   cs
    13d7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13d9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13db:	27                   	daa    
    13dc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13df:	11 01                	adc    DWORD PTR [ecx],eax
    13e1:	12 06                	adc    al,BYTE PTR [esi]
    13e3:	40                   	inc    eax
    13e4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    13ea:	00 00                	add    BYTE PTR [eax],al
    13ec:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    13ef:	03 08                	add    ecx,DWORD PTR [eax]
    13f1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13f3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13f5:	49                   	dec    ecx
    13f6:	13 02                	adc    eax,DWORD PTR [edx]
    13f8:	18 00                	sbb    BYTE PTR [eax],al
    13fa:	00 12                	add    BYTE PTR [edx],dl
    13fc:	34 00                	xor    al,0x0
    13fe:	03 0e                	add    ecx,DWORD PTR [esi]
    1400:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1402:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1404:	49                   	dec    ecx
    1405:	13 3f                	adc    edi,DWORD PTR [edi]
    1407:	19 02                	sbb    DWORD PTR [edx],eax
    1409:	18 00                	sbb    BYTE PTR [eax],al
    140b:	00 13                	add    BYTE PTR [ebx],dl
    140d:	01 01                	add    DWORD PTR [ecx],eax
    140f:	49                   	dec    ecx
    1410:	13 01                	adc    eax,DWORD PTR [ecx]
    1412:	13 00                	adc    eax,DWORD PTR [eax]
    1414:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    1417:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    141a:	2f                   	das    
    141b:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 30                	add    BYTE PTR [eax],dh
  14:	70 00                	jo     16 <sysEnter_Vector-0x12ffea>
	...
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	63 01                	arpl   WORD PTR [ecx],ax
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 00                	add    al,0x0
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 30                	add    BYTE PTR [eax],dh
  34:	aa                   	stos   BYTE PTR es:[edi],al
	...
  3d:	00 00                	add    BYTE PTR [eax],al
  3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	05 03 00 00 04       	add    eax,0x4000003
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	00 00                	add    BYTE PTR [eax],al
  4f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
  52:	00 30                	add    BYTE PTR [eax],dh
  54:	97                   	xchg   edi,eax
	...
  5d:	00 00                	add    BYTE PTR [eax],al
  5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	4a                   	dec    edx
  67:	04 00                	add    al,0x0
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 30                	add    BYTE PTR [eax],dh
  74:	49                   	dec    ecx
  75:	02 00                	add    al,BYTE PTR [eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	60                   	pusha  
  87:	06                   	push   es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
	...
  9e:	00 00                	add    BYTE PTR [eax],al
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	16                   	push   ss
  a7:	08 00                	or     BYTE PTR [eax],al
  a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	6c                   	ins    BYTE PTR es:[edi],dx
  b1:	06                   	push   es
  b2:	00 30                	add    BYTE PTR [eax],dh
  b4:	f2 00 00             	repnz add BYTE PTR [eax],al
	...
  bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	1b 0b                	sbb    ecx,DWORD PTR [ebx]
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	60                   	pusha  
  d1:	07                   	pop    es
  d2:	00 30                	add    BYTE PTR [eax],dh
  d4:	52                   	push   edx
  d5:	01 00                	add    DWORD PTR [eax],eax
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	d4 0d                	aam    0xd
  e8:	00 00                	add    BYTE PTR [eax],al
  ea:	04 00                	add    al,0x0
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	b4 08                	mov    ah,0x8
  f2:	00 30                	add    BYTE PTR [eax],dh
  f4:	8c 06                	mov    WORD PTR [esi],es
	...
  fe:	00 00                	add    BYTE PTR [eax],al
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	11 15 00 00 04 00    	adc    DWORD PTR ds:0x40000,edx
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	40                   	inc    eax
 111:	0f 00                	(bad)  
 113:	30 6d 03             	xor    BYTE PTR [ebp+0x3],ch
	...
 11e:	00 00                	add    BYTE PTR [eax],al
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	87 18                	xchg   DWORD PTR [eax],ebx
 128:	00 00                	add    BYTE PTR [eax],al
 12a:	04 00                	add    al,0x0
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	b0 12                	mov    al,0x12
 132:	00 30                	add    BYTE PTR [eax],dh
 134:	9b                   	fwait
 135:	01 00                	add    DWORD PTR [eax],eax
	...
 13f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	75 1a                	jne    162 <sysEnter_Vector-0x12fe9e>
 148:	00 00                	add    BYTE PTR [eax],al
 14a:	04 00                	add    al,0x0
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	4c                   	dec    esp
 151:	14 00                	adc    al,0x0
 153:	30 e7                	xor    bh,ah
	...
 15d:	00 00                	add    BYTE PTR [eax],al
 15f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	64                   	fs
 167:	1c 00                	sbb    al,0x0
 169:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	34 15                	xor    al,0x15
 172:	00 30                	add    BYTE PTR [eax],dh
 174:	14 00                	adc    al,0x0
	...
 17e:	00 00                	add    BYTE PTR [eax],al
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	dd 1d 00 00 04 00    	fstp   QWORD PTR ds:0x40000
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	48                   	dec    eax
 191:	15 00 30 29 00       	adc    eax,0x293000
	...
 19e:	00 00                	add    BYTE PTR [eax],al
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	cc                   	int3   
 1a7:	1f                   	pop    ds
 1a8:	00 00                	add    BYTE PTR [eax],al
 1aa:	04 00                	add    al,0x0
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	74 15                	je     1c7 <sysEnter_Vector-0x12fe39>
 1b2:	00 30                	add    BYTE PTR [eax],dh
 1b4:	84 00                	test   BYTE PTR [eax],al
	...
 1be:	00 00                	add    BYTE PTR [eax],al
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	28 24 00             	sub    BYTE PTR [eax+eax*1],ah
 1c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	f8                   	clc    
 1d1:	15 00 30 eb 00       	adc    eax,0xeb3000
	...
 1de:	00 00                	add    BYTE PTR [eax],al
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	d9 25 00 00 04 00    	fldenv ds:0x40000
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	e4 16                	in     al,0x16
 1f2:	00 30                	add    BYTE PTR [eax],dh
 1f4:	5e                   	pop    esi
	...
 1fd:	00 00                	add    BYTE PTR [eax],al
 1ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	49                   	dec    ecx
 207:	27                   	daa    
 208:	00 00                	add    BYTE PTR [eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	44                   	inc    esp
 211:	17                   	pop    ss
 212:	00 30                	add    BYTE PTR [eax],dh
 214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 21a:	00 00                	add    BYTE PTR [eax],al
 21c:	00 00                	add    BYTE PTR [eax],al
 21e:	00 00                	add    BYTE PTR [eax],al
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	16                   	push   ss
 227:	29 00                	sub    DWORD PTR [eax],eax
 229:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	0c 18                	or     al,0x18
 232:	00 30                	add    BYTE PTR [eax],dh
 234:	89 00                	mov    DWORD PTR [eax],eax
	...
 23e:	00 00                	add    BYTE PTR [eax],al
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	66                   	data16
 247:	2a 00                	sub    al,BYTE PTR [eax]
 249:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	98                   	cwde   
 251:	18 00                	sbb    BYTE PTR [eax],al
 253:	30 62 00             	xor    BYTE PTR [edx+0x0],ah
	...
 25e:	00 00                	add    BYTE PTR [eax],al
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	34 2b                	xor    al,0x2b
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	fc                   	cld    
 271:	18 00                	sbb    BYTE PTR [eax],al
 273:	30 ce                	xor    dh,cl
	...
 27d:	00 00                	add    BYTE PTR [eax],al
 27f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	16                   	push   ss
 287:	2c 00                	sub    al,0x0
 289:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	cc                   	int3   
 291:	19 00                	sbb    DWORD PTR [eax],eax
 293:	30 80 00 00 00 00    	xor    BYTE PTR [eax+0x0],al
 299:	00 00                	add    BYTE PTR [eax],al
 29b:	00 00                	add    BYTE PTR [eax],al
 29d:	00 00                	add    BYTE PTR [eax],al
 29f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	0a 2d 00 00 04 00    	or     ch,BYTE PTR ds:0x40000
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	4c                   	dec    esp
 2b1:	1a 00                	sbb    al,BYTE PTR [eax]
 2b3:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
	...
 2be:	00 00                	add    BYTE PTR [eax],al
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	a0 2e 00 00 04       	mov    al,ds:0x400002e
 2cb:	00 00                	add    BYTE PTR [eax],al
 2cd:	00 00                	add    BYTE PTR [eax],al
 2cf:	00 cc                	add    ah,cl
 2d1:	1b 00                	sbb    eax,DWORD PTR [eax]
 2d3:	30 1d 00 00 00 00    	xor    BYTE PTR ds:0x0,bl
 2d9:	00 00                	add    BYTE PTR [eax],al
 2db:	00 00                	add    BYTE PTR [eax],al
 2dd:	00 00                	add    BYTE PTR [eax],al
 2df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	10 2f                	adc    BYTE PTR [edi],ch
 2e8:	00 00                	add    BYTE PTR [eax],al
 2ea:	04 00                	add    al,0x0
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	ec                   	in     al,dx
 2f1:	1b 00                	sbb    eax,DWORD PTR [eax]
 2f3:	30 9c 01 00 00 00 00 	xor    BYTE PTR [ecx+eax*1+0x0],bl
 2fa:	00 00                	add    BYTE PTR [eax],al
 2fc:	00 00                	add    BYTE PTR [eax],al
 2fe:	00 00                	add    BYTE PTR [eax],al
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
 307:	30 00                	xor    BYTE PTR [eax],al
 309:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	88 1d 00 30 b6 00    	mov    BYTE PTR ds:0xb63000,bl
	...
 31e:	00 00                	add    BYTE PTR [eax],al
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	0a 32                	or     dh,BYTE PTR [edx]
 328:	00 00                	add    BYTE PTR [eax],al
 32a:	04 00                	add    al,0x0
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	40                   	inc    eax
 331:	1e                   	push   ds
 332:	00 30                	add    BYTE PTR [eax],dh
 334:	8b 00                	mov    eax,DWORD PTR [eax]
	...
 33e:	00 00                	add    BYTE PTR [eax],al
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	a1 33 00 00 04       	mov    eax,ds:0x4000033
 34b:	00 00                	add    BYTE PTR [eax],al
 34d:	00 00                	add    BYTE PTR [eax],al
 34f:	00 cc                	add    ah,cl
 351:	1e                   	push   ds
 352:	00 30                	add    BYTE PTR [eax],dh
 354:	bb 0c 00 00 00       	mov    ebx,0xc
 359:	00 00                	add    BYTE PTR [eax],al
 35b:	00 00                	add    BYTE PTR [eax],al
 35d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	d0 00                	rol    BYTE PTR [eax],1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	b0 00                	mov    al,0x0
       8:	00 00                	add    BYTE PTR [eax],al
       a:	01 01                	add    DWORD PTR [ecx],eax
       c:	fb                   	sti    
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 2f                	add    BYTE PTR [edi],ch
      44:	68 6f 6d 65 2f       	push   0x2f656d6f
      49:	79 6f                	jns    ba <sysEnter_Vector-0x12ff46>
      4b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      52:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      55:	73 73                	jae    ca <sysEnter_Vector-0x12ff36>
      57:	2f                   	das    
      58:	6c                   	ins    BYTE PTR es:[edi],dx
      59:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      60:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      66:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      6c:	78 2d                	js     9b <sysEnter_Vector-0x12ff65>
      6e:	67 6e                	outs   dx,BYTE PTR ds:[si]
      70:	75 2f                	jne    a1 <sysEnter_Vector-0x12ff5f>
      72:	35 2e 33 2e 30       	xor    eax,0x302e332e
      77:	2f                   	das    
      78:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      7f:	00 00                	add    BYTE PTR [eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
      8f:	6c                   	ins    BYTE PTR es:[edi],dx
      90:	6c                   	ins    BYTE PTR es:[edi],dx
      91:	6f                   	outs   dx,DWORD PTR ds:[esi]
      92:	63 2e                	arpl   WORD PTR [esi],bp
      94:	68 00 02 00 00       	push   0x200
      99:	6c                   	ins    BYTE PTR es:[edi],dx
      9a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      a1:	4f                   	dec    edi
      a2:	53                   	push   ebx
      a3:	2e                   	cs
      a4:	68 00 02 00 00       	push   0x200
      a9:	73 74                	jae    11f <sysEnter_Vector-0x12fee1>
      ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      b2:	63 
      b3:	2e                   	cs
      b4:	68 00 03 00 00       	push   0x300
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	05 02 00 00 00       	add    eax,0x2
      c0:	30 1a                	xor    BYTE PTR [edx],bl
      c2:	c9                   	leave  
      c3:	2f                   	das    
      c4:	f3 72 cb             	repz jb 92 <sysEnter_Vector-0x12ff6e>
      c7:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      cc:	72 cb                	jb     99 <sysEnter_Vector-0x12ff67>
      ce:	3d 02 02 00 01       	cmp    eax,0x1000202
      d3:	01 03                	add    DWORD PTR [ebx],eax
      d5:	01 00                	add    DWORD PTR [eax],eax
      d7:	00 02                	add    BYTE PTR [edx],al
      d9:	00 b1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],dh
      df:	01 fb                	add    ebx,edi
      e1:	0e                   	push   cs
      e2:	0d 00 01 01 01       	or     eax,0x1010100
      e7:	01 00                	add    DWORD PTR [eax],eax
      e9:	00 00                	add    BYTE PTR [eax],al
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 01                	add    BYTE PTR [ecx],al
      ef:	2e                   	cs
      f0:	2e                   	cs
      f1:	2f                   	das    
      f2:	2e                   	cs
      f3:	2e                   	cs
      f4:	2f                   	das    
      f5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      f9:	6a 2f                	push   0x2f
      fb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      fe:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     105:	63 2f                	arpl   WORD PTR [edi],bp
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	72 69                	jb     174 <sysEnter_Vector-0x12fe8c>
     10b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10c:	67 73 00             	addr16 jae 10f <sysEnter_Vector-0x12fef1>
     10f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     116:	00 2f                	add    BYTE PTR [edi],ch
     118:	68 6f 6d 65 2f       	push   0x2f656d6f
     11d:	79 6f                	jns    18e <sysEnter_Vector-0x12fe72>
     11f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     126:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     129:	73 73                	jae    19e <sysEnter_Vector-0x12fe62>
     12b:	2f                   	das    
     12c:	6c                   	ins    BYTE PTR es:[edi],dx
     12d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     134:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     140:	78 2d                	js     16f <sysEnter_Vector-0x12fe91>
     142:	67 6e                	outs   dx,BYTE PTR ds:[si]
     144:	75 2f                	jne    175 <sysEnter_Vector-0x12fe8b>
     146:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14b:	2f                   	das    
     14c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     153:	00 00                	add    BYTE PTR [eax],al
     155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
     157:	72 63                	jb     1bc <sysEnter_Vector-0x12fe44>
     159:	73 70                	jae    1cb <sysEnter_Vector-0x12fe35>
     15b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     15f:	01 00                	add    DWORD PTR [eax],eax
     161:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     164:	6c                   	ins    BYTE PTR es:[edi],dx
     165:	6c                   	ins    BYTE PTR es:[edi],dx
     166:	6f                   	outs   dx,DWORD PTR ds:[esi]
     167:	63 2e                	arpl   WORD PTR [esi],bp
     169:	68 00 02 00 00       	push   0x200
     16e:	6c                   	ins    BYTE PTR es:[edi],dx
     16f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     176:	4f                   	dec    edi
     177:	53                   	push   ebx
     178:	2e                   	cs
     179:	68 00 02 00 00       	push   0x200
     17e:	73 74                	jae    1f4 <sysEnter_Vector-0x12fe0c>
     180:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     187:	63 
     188:	2e                   	cs
     189:	68 00 03 00 00       	push   0x300
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	05 02 70 00 00       	add    eax,0x7002
     195:	30 03                	xor    BYTE PTR [ebx],al
     197:	25 01 e7 9f 59       	and    eax,0x599fe701
     19c:	75 00                	jne    19e <sysEnter_Vector-0x12fe62>
     19e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1a1:	aa                   	stos   BYTE PTR es:[edi],al
     1a2:	00 02                	add    BYTE PTR [edx],al
     1a4:	04 01                	add    al,0x1
     1a6:	06                   	push   es
     1a7:	3c 00                	cmp    al,0x0
     1a9:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1ac:	06                   	push   es
     1ad:	73 00                	jae    1af <sysEnter_Vector-0x12fe51>
     1af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1b2:	06                   	push   es
     1b3:	82                   	(bad)  
     1b4:	06                   	push   es
     1b5:	6d                   	ins    DWORD PTR es:[edi],dx
     1b6:	91                   	xchg   ecx,eax
     1b7:	4d                   	dec    ebp
     1b8:	e7 9f                	out    0x9f,eax
     1ba:	59                   	pop    ecx
     1bb:	75 00                	jne    1bd <sysEnter_Vector-0x12fe43>
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	aa                   	stos   BYTE PTR es:[edi],al
     1c1:	00 02                	add    BYTE PTR [edx],al
     1c3:	04 01                	add    al,0x1
     1c5:	06                   	push   es
     1c6:	3c 00                	cmp    al,0x0
     1c8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1cb:	06                   	push   es
     1cc:	73 00                	jae    1ce <sysEnter_Vector-0x12fe32>
     1ce:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1d1:	06                   	push   es
     1d2:	82                   	(bad)  
     1d3:	06                   	push   es
     1d4:	6d                   	ins    DWORD PTR es:[edi],dx
     1d5:	91                   	xchg   ecx,eax
     1d6:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1d9:	01 01                	add    DWORD PTR [ecx],eax
     1db:	d4 00                	aam    0x0
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	02 00                	add    al,BYTE PTR [eax]
     1e1:	b0 00                	mov    al,0x0
     1e3:	00 00                	add    BYTE PTR [eax],al
     1e5:	01 01                	add    DWORD PTR [ecx],eax
     1e7:	fb                   	sti    
     1e8:	0e                   	push   cs
     1e9:	0d 00 01 01 01       	or     eax,0x1010100
     1ee:	01 00                	add    DWORD PTR [eax],eax
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	01 00                	add    DWORD PTR [eax],eax
     1f4:	00 01                	add    BYTE PTR [ecx],al
     1f6:	2e                   	cs
     1f7:	2e                   	cs
     1f8:	2f                   	das    
     1f9:	2e                   	cs
     1fa:	2e                   	cs
     1fb:	2f                   	das    
     1fc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     200:	6a 2f                	push   0x2f
     202:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     205:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     20c:	63 2f                	arpl   WORD PTR [edi],bp
     20e:	73 74                	jae    284 <sysEnter_Vector-0x12fd7c>
     210:	72 69                	jb     27b <sysEnter_Vector-0x12fd85>
     212:	6e                   	outs   dx,BYTE PTR ds:[esi]
     213:	67 73 00             	addr16 jae 216 <sysEnter_Vector-0x12fdea>
     216:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     21d:	00 2f                	add    BYTE PTR [edi],ch
     21f:	68 6f 6d 65 2f       	push   0x2f656d6f
     224:	79 6f                	jns    295 <sysEnter_Vector-0x12fd6b>
     226:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     22d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     230:	73 73                	jae    2a5 <sysEnter_Vector-0x12fd5b>
     232:	2f                   	das    
     233:	6c                   	ins    BYTE PTR es:[edi],dx
     234:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     23b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     241:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     247:	78 2d                	js     276 <sysEnter_Vector-0x12fd8a>
     249:	67 6e                	outs   dx,BYTE PTR ds:[si]
     24b:	75 2f                	jne    27c <sysEnter_Vector-0x12fd84>
     24d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     252:	2f                   	das    
     253:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	73 74                	jae    2d2 <sysEnter_Vector-0x12fd2e>
     25e:	72 74                	jb     2d4 <sysEnter_Vector-0x12fd2c>
     260:	6f                   	outs   dx,DWORD PTR ds:[esi]
     261:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	00 00                	add    BYTE PTR [eax],al
     268:	6d                   	ins    DWORD PTR es:[edi],dx
     269:	61                   	popa   
     26a:	6c                   	ins    BYTE PTR es:[edi],dx
     26b:	6c                   	ins    BYTE PTR es:[edi],dx
     26c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     26d:	63 2e                	arpl   WORD PTR [esi],bp
     26f:	68 00 02 00 00       	push   0x200
     274:	6c                   	ins    BYTE PTR es:[edi],dx
     275:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     27c:	4f                   	dec    edi
     27d:	53                   	push   ebx
     27e:	2e                   	cs
     27f:	68 00 02 00 00       	push   0x200
     284:	73 74                	jae    2fa <sysEnter_Vector-0x12fd06>
     286:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     28d:	63 
     28e:	2e                   	cs
     28f:	68 00 03 00 00       	push   0x300
     294:	00 00                	add    BYTE PTR [eax],al
     296:	05 02 1c 01 00       	add    eax,0x11c02
     29b:	30 03                	xor    BYTE PTR [ebx],al
     29d:	28 01                	sub    BYTE PTR [ecx],al
     29f:	f6 67 92             	mul    BYTE PTR [edi-0x6e]
     2a2:	08 2f                	or     BYTE PTR [edi],ch
     2a4:	75 08                	jne    2ae <sysEnter_Vector-0x12fd52>
     2a6:	2f                   	das    
     2a7:	4b                   	dec    ebx
     2a8:	08 c9                	or     cl,cl
     2aa:	c9                   	leave  
     2ab:	08 21                	or     BYTE PTR [ecx],ah
     2ad:	3d 02 07 00 01       	cmp    eax,0x1000702
     2b2:	01 10                	add    DWORD PTR [eax],edx
     2b4:	01 00                	add    DWORD PTR [eax],eax
     2b6:	00 02                	add    BYTE PTR [edx],al
     2b8:	00 93 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dl
     2be:	01 fb                	add    ebx,edi
     2c0:	0e                   	push   cs
     2c1:	0d 00 01 01 01       	or     eax,0x1010100
     2c6:	01 00                	add    DWORD PTR [eax],eax
     2c8:	00 00                	add    BYTE PTR [eax],al
     2ca:	01 00                	add    DWORD PTR [eax],eax
     2cc:	00 01                	add    BYTE PTR [ecx],al
     2ce:	73 72                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d0:	63 00                	arpl   WORD PTR [eax],ax
     2d2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2d9:	00 2f                	add    BYTE PTR [edi],ch
     2db:	68 6f 6d 65 2f       	push   0x2f656d6f
     2e0:	79 6f                	jns    351 <sysEnter_Vector-0x12fcaf>
     2e2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2e9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     2ec:	73 73                	jae    361 <sysEnter_Vector-0x12fc9f>
     2ee:	2f                   	das    
     2ef:	6c                   	ins    BYTE PTR es:[edi],dx
     2f0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2f7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2fd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     303:	78 2d                	js     332 <sysEnter_Vector-0x12fcce>
     305:	67 6e                	outs   dx,BYTE PTR ds:[si]
     307:	75 2f                	jne    338 <sysEnter_Vector-0x12fcc8>
     309:	35 2e 33 2e 30       	xor    eax,0x302e332e
     30e:	2f                   	das    
     30f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     316:	00 00                	add    BYTE PTR [eax],al
     318:	61                   	popa   
     319:	73 63                	jae    37e <sysEnter_Vector-0x12fc82>
     31b:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     322:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     325:	6c                   	ins    BYTE PTR es:[edi],dx
     326:	6c                   	ins    BYTE PTR es:[edi],dx
     327:	6f                   	outs   dx,DWORD PTR ds:[esi]
     328:	63 2e                	arpl   WORD PTR [esi],bp
     32a:	68 00 02 00 00       	push   0x200
     32f:	6c                   	ins    BYTE PTR es:[edi],dx
     330:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     337:	4f                   	dec    edi
     338:	53                   	push   ebx
     339:	2e                   	cs
     33a:	68 00 02 00 00       	push   0x200
     33f:	73 74                	jae    3b5 <sysEnter_Vector-0x12fc4b>
     341:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     348:	63 
     349:	2e                   	cs
     34a:	68 00 03 00 00       	push   0x300
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	05 02 b4 01 00       	add    eax,0x1b402
     356:	30 03                	xor    BYTE PTR [ebx],al
     358:	09 01                	or     DWORD PTR [ecx],eax
     35a:	08 16                	or     BYTE PTR [esi],dl
     35c:	00 02                	add    BYTE PTR [edx],al
     35e:	04 03                	add    al,0x3
     360:	08 d7                	or     bh,dl
     362:	00 02                	add    BYTE PTR [edx],al
     364:	04 03                	add    al,0x3
     366:	d7                   	xlat   BYTE PTR ds:[ebx]
     367:	00 02                	add    BYTE PTR [edx],al
     369:	04 03                	add    al,0x3
     36b:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     36e:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     371:	d3 00                	rol    DWORD PTR [eax],cl
     373:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     376:	06                   	push   es
     377:	82                   	(bad)  
     378:	06                   	push   es
     379:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     37c:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     381:	04 01                	add    al,0x1
     383:	76 00                	jbe    385 <sysEnter_Vector-0x12fc7b>
     385:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     388:	02 3b                	add    bh,BYTE PTR [ebx]
     38a:	13 08                	adc    ecx,DWORD PTR [eax]
     38c:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     390:	ad                   	lods   eax,DWORD PTR ds:[esi]
     391:	d7                   	xlat   BYTE PTR ds:[ebx]
     392:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     398:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39b:	76 00                	jbe    39d <sysEnter_Vector-0x12fc63>
     39d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3a0:	02 3b                	add    bh,BYTE PTR [ebx]
     3a2:	13 08                	adc    ecx,DWORD PTR [eax]
     3a4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3a8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3aa:	6a f3                	push   0xfffffff3
     3ac:	78 00                	js     3ae <sysEnter_Vector-0x12fc52>
     3ae:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3b1:	91                   	xchg   ecx,eax
     3b2:	00 02                	add    BYTE PTR [edx],al
     3b4:	04 03                	add    al,0x3
     3b6:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3b9:	00 02                	add    BYTE PTR [edx],al
     3bb:	04 01                	add    al,0x1
     3bd:	06                   	push   es
     3be:	4a                   	dec    edx
     3bf:	06                   	push   es
     3c0:	e8 3d 02 02 00       	call   20602 <sysEnter_Vector-0x10f9fe>
     3c5:	01 01                	add    DWORD PTR [ecx],eax
     3c7:	06                   	push   es
     3c8:	01 00                	add    DWORD PTR [eax],eax
     3ca:	00 02                	add    BYTE PTR [edx],al
     3cc:	00 99 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],bl
     3d2:	01 fb                	add    ebx,edi
     3d4:	0e                   	push   cs
     3d5:	0d 00 01 01 01       	or     eax,0x1010100
     3da:	01 00                	add    DWORD PTR [eax],eax
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	01 00                	add    DWORD PTR [eax],eax
     3e0:	00 01                	add    BYTE PTR [ecx],al
     3e2:	73 72                	jae    456 <sysEnter_Vector-0x12fbaa>
     3e4:	63 00                	arpl   WORD PTR [eax],ax
     3e6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3ed:	00 2f                	add    BYTE PTR [edi],ch
     3ef:	68 6f 6d 65 2f       	push   0x2f656d6f
     3f4:	79 6f                	jns    465 <sysEnter_Vector-0x12fb9b>
     3f6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     3fd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     400:	73 73                	jae    475 <sysEnter_Vector-0x12fb8b>
     402:	2f                   	das    
     403:	6c                   	ins    BYTE PTR es:[edi],dx
     404:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     40b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     411:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     417:	78 2d                	js     446 <sysEnter_Vector-0x12fbba>
     419:	67 6e                	outs   dx,BYTE PTR ds:[si]
     41b:	75 2f                	jne    44c <sysEnter_Vector-0x12fbb4>
     41d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     422:	2f                   	das    
     423:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     42a:	00 00                	add    BYTE PTR [eax],al
     42c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     42e:	76 69                	jbe    499 <sysEnter_Vector-0x12fb67>
     430:	72 6f                	jb     4a1 <sysEnter_Vector-0x12fb5f>
     432:	6e                   	outs   dx,BYTE PTR ds:[esi]
     433:	6d                   	ins    DWORD PTR es:[edi],dx
     434:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     436:	74 2e                	je     466 <sysEnter_Vector-0x12fb9a>
     438:	63 00                	arpl   WORD PTR [eax],ax
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     43f:	6c                   	ins    BYTE PTR es:[edi],dx
     440:	6c                   	ins    BYTE PTR es:[edi],dx
     441:	6f                   	outs   dx,DWORD PTR ds:[esi]
     442:	63 2e                	arpl   WORD PTR [esi],bp
     444:	68 00 02 00 00       	push   0x200
     449:	6c                   	ins    BYTE PTR es:[edi],dx
     44a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     451:	4f                   	dec    edi
     452:	53                   	push   ebx
     453:	2e                   	cs
     454:	68 00 02 00 00       	push   0x200
     459:	73 74                	jae    4cf <sysEnter_Vector-0x12fb31>
     45b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     462:	63 
     463:	2e                   	cs
     464:	68 00 03 00 00       	push   0x300
     469:	00 00                	add    BYTE PTR [eax],al
     46b:	05 02 00 04 00       	add    eax,0x40002
     470:	30 03                	xor    BYTE PTR [ebx],al
     472:	09 01                	or     DWORD PTR [ecx],eax
     474:	08 21                	or     BYTE PTR [ecx],ah
     476:	91                   	xchg   ecx,eax
     477:	02 36                	add    dh,BYTE PTR [esi]
     479:	14 02                	adc    al,0x2
     47b:	39 13                	cmp    DWORD PTR [ebx],edx
     47d:	00 02                	add    BYTE PTR [edx],al
     47f:	04 02                	add    al,0x2
     481:	7e 00                	jle    483 <sysEnter_Vector-0x12fb7d>
     483:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     486:	06                   	push   es
     487:	4a                   	dec    edx
     488:	06                   	push   es
     489:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     48a:	59                   	pop    ecx
     48b:	5b                   	pop    ebx
     48c:	08 21                	or     BYTE PTR [ecx],ah
     48e:	76 bb                	jbe    44b <sysEnter_Vector-0x12fbb5>
     490:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     496:	14 08                	adc    al,0x8
     498:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     49f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4a2:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     4a5:	00 02                	add    BYTE PTR [edx],al
     4a7:	04 01                	add    al,0x1
     4a9:	06                   	push   es
     4aa:	4a                   	dec    edx
     4ab:	06                   	push   es
     4ac:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     4af:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     4b4:	08 f3                	or     bl,dh
     4b6:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     4bc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4bf:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     4c2:	00 02                	add    BYTE PTR [edx],al
     4c4:	04 01                	add    al,0x1
     4c6:	06                   	push   es
     4c7:	4a                   	dec    edx
     4c8:	06                   	push   es
     4c9:	03 0b                	add    ecx,DWORD PTR [ebx]
     4cb:	9e                   	sahf   
     4cc:	02 05 00 01 01 f8    	add    al,BYTE PTR ds:0xf8010100
     4d2:	00 00                	add    BYTE PTR [eax],al
     4d4:	00 02                	add    BYTE PTR [edx],al
     4d6:	00 cd                	add    ch,cl
     4d8:	00 00                	add    BYTE PTR [eax],al
     4da:	00 01                	add    BYTE PTR [ecx],al
     4dc:	01 fb                	add    ebx,edi
     4de:	0e                   	push   cs
     4df:	0d 00 01 01 01       	or     eax,0x1010100
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 00                	add    BYTE PTR [eax],al
     4e8:	01 00                	add    DWORD PTR [eax],eax
     4ea:	00 01                	add    BYTE PTR [ecx],al
     4ec:	73 72                	jae    560 <sysEnter_Vector-0x12faa0>
     4ee:	63 00                	arpl   WORD PTR [eax],ax
     4f0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4f7:	00 2f                	add    BYTE PTR [edi],ch
     4f9:	68 6f 6d 65 2f       	push   0x2f656d6f
     4fe:	79 6f                	jns    56f <sysEnter_Vector-0x12fa91>
     500:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     507:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     50a:	73 73                	jae    57f <sysEnter_Vector-0x12fa81>
     50c:	2f                   	das    
     50d:	6c                   	ins    BYTE PTR es:[edi],dx
     50e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     515:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     51b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     521:	78 2d                	js     550 <sysEnter_Vector-0x12fab0>
     523:	67 6e                	outs   dx,BYTE PTR ds:[si]
     525:	75 2f                	jne    556 <sysEnter_Vector-0x12faaa>
     527:	35 2e 33 2e 30       	xor    eax,0x302e332e
     52c:	2f                   	das    
     52d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     534:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     537:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     53b:	65                   	gs
     53c:	2f                   	das    
     53d:	2e                   	cs
     53e:	2e                   	cs
     53f:	2f                   	das    
     540:	2e                   	cs
     541:	2e                   	cs
     542:	2f                   	das    
     543:	2e                   	cs
     544:	2e                   	cs
     545:	2f                   	das    
     546:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     54a:	6a 2f                	push   0x2f
     54c:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     54f:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     556:	6e                   	outs   dx,BYTE PTR ds:[esi]
     557:	65                   	gs
     558:	6c                   	ins    BYTE PTR es:[edi],dx
     559:	2f                   	das    
     55a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     561:	00 00                	add    BYTE PTR [eax],al
     563:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     56a:	01 00                	add    DWORD PTR [eax],eax
     56c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     56f:	6c                   	ins    BYTE PTR es:[edi],dx
     570:	6c                   	ins    BYTE PTR es:[edi],dx
     571:	6f                   	outs   dx,DWORD PTR ds:[esi]
     572:	63 2e                	arpl   WORD PTR [esi],bp
     574:	68 00 02 00 00       	push   0x200
     579:	6c                   	ins    BYTE PTR es:[edi],dx
     57a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     581:	4f                   	dec    edi
     582:	53                   	push   ebx
     583:	2e                   	cs
     584:	68 00 02 00 00       	push   0x200
     589:	73 74                	jae    5ff <sysEnter_Vector-0x12fa01>
     58b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     592:	63 
     593:	2e                   	cs
     594:	68 00 03 00 00       	push   0x300
     599:	73 79                	jae    614 <sysEnter_Vector-0x12f9ec>
     59b:	73 63                	jae    600 <sysEnter_Vector-0x12fa00>
     59d:	61                   	popa   
     59e:	6c                   	ins    BYTE PTR es:[edi],dx
     59f:	6c                   	ins    BYTE PTR es:[edi],dx
     5a0:	73 2e                	jae    5d0 <sysEnter_Vector-0x12fa30>
     5a2:	68 00 04 00 00       	push   0x400
     5a7:	00 00                	add    BYTE PTR [eax],al
     5a9:	05 02 6c 06 00       	add    eax,0x66c02
     5ae:	30 03                	xor    BYTE PTR [ebx],al
     5b0:	09 01                	or     DWORD PTR [ecx],eax
     5b2:	08 13                	or     BYTE PTR [ebx],dl
     5b4:	08 67 5b             	or     BYTE PTR [edi+0x5b],ah
     5b7:	08 13                	or     BYTE PTR [ebx],dl
     5b9:	08 2f                	or     BYTE PTR [edi],ch
     5bb:	69 e5 08 d7 77 e5    	imul   esp,ebp,0xe577d708
     5c1:	08 d7                	or     bh,dl
     5c3:	78 08                	js     5cd <sysEnter_Vector-0x12fa33>
     5c5:	13 08                	adc    ecx,DWORD PTR [eax]
     5c7:	9f                   	lahf   
     5c8:	02 05 00 01 01 26    	add    al,BYTE PTR ds:0x26010100
     5ce:	01 00                	add    DWORD PTR [eax],eax
     5d0:	00 02                	add    BYTE PTR [edx],al
     5d2:	00 d4                	add    ah,dl
     5d4:	00 00                	add    BYTE PTR [eax],al
     5d6:	00 01                	add    BYTE PTR [ecx],al
     5d8:	01 fb                	add    ebx,edi
     5da:	0e                   	push   cs
     5db:	0d 00 01 01 01       	or     eax,0x1010100
     5e0:	01 00                	add    DWORD PTR [eax],eax
     5e2:	00 00                	add    BYTE PTR [eax],al
     5e4:	01 00                	add    DWORD PTR [eax],eax
     5e6:	00 01                	add    BYTE PTR [ecx],al
     5e8:	73 72                	jae    65c <sysEnter_Vector-0x12f9a4>
     5ea:	63 2f                	arpl   WORD PTR [edi],bp
     5ec:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     5f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5f4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     5f8:	65 00 2f             	add    BYTE PTR gs:[edi],ch
     5fb:	68 6f 6d 65 2f       	push   0x2f656d6f
     600:	79 6f                	jns    671 <sysEnter_Vector-0x12f98f>
     602:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     609:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     60c:	73 73                	jae    681 <sysEnter_Vector-0x12f97f>
     60e:	2f                   	das    
     60f:	6c                   	ins    BYTE PTR es:[edi],dx
     610:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     617:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     61d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     623:	78 2d                	js     652 <sysEnter_Vector-0x12f9ae>
     625:	67 6e                	outs   dx,BYTE PTR ds:[si]
     627:	75 2f                	jne    658 <sysEnter_Vector-0x12f9a8>
     629:	35 2e 33 2e 30       	xor    eax,0x302e332e
     62e:	2f                   	das    
     62f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     636:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     639:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     63d:	65                   	gs
     63e:	2f                   	das    
     63f:	2e                   	cs
     640:	2e                   	cs
     641:	2f                   	das    
     642:	2e                   	cs
     643:	2e                   	cs
     644:	2f                   	das    
     645:	2e                   	cs
     646:	2e                   	cs
     647:	2f                   	das    
     648:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     64c:	6a 2f                	push   0x2f
     64e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     651:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     658:	6e                   	outs   dx,BYTE PTR ds:[esi]
     659:	65                   	gs
     65a:	6c                   	ins    BYTE PTR es:[edi],dx
     65b:	2f                   	das    
     65c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     663:	00 00                	add    BYTE PTR [eax],al
     665:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     66c:	00 01                	add    BYTE PTR [ecx],al
     66e:	00 00                	add    BYTE PTR [eax],al
     670:	6d                   	ins    DWORD PTR es:[edi],dx
     671:	61                   	popa   
     672:	6c                   	ins    BYTE PTR es:[edi],dx
     673:	6c                   	ins    BYTE PTR es:[edi],dx
     674:	6f                   	outs   dx,DWORD PTR ds:[esi]
     675:	63 2e                	arpl   WORD PTR [esi],bp
     677:	68 00 02 00 00       	push   0x200
     67c:	6c                   	ins    BYTE PTR es:[edi],dx
     67d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     684:	4f                   	dec    edi
     685:	53                   	push   ebx
     686:	2e                   	cs
     687:	68 00 02 00 00       	push   0x200
     68c:	73 74                	jae    702 <sysEnter_Vector-0x12f8fe>
     68e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     695:	63 
     696:	2e                   	cs
     697:	68 00 03 00 00       	push   0x300
     69c:	73 79                	jae    717 <sysEnter_Vector-0x12f8e9>
     69e:	73 63                	jae    703 <sysEnter_Vector-0x12f8fd>
     6a0:	61                   	popa   
     6a1:	6c                   	ins    BYTE PTR es:[edi],dx
     6a2:	6c                   	ins    BYTE PTR es:[edi],dx
     6a3:	73 2e                	jae    6d3 <sysEnter_Vector-0x12f92d>
     6a5:	68 00 04 00 00       	push   0x400
     6aa:	00 00                	add    BYTE PTR [eax],al
     6ac:	05 02 60 07 00       	add    eax,0x76002
     6b1:	30 03                	xor    BYTE PTR [ebx],al
     6b3:	0f 01                	(bad)  
     6b5:	d7                   	xlat   BYTE PTR ds:[ebx]
     6b6:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6bc:	75 4b                	jne    709 <sysEnter_Vector-0x12f8f7>
     6be:	08 3d 77 08 14 08    	or     BYTE PTR ds:0x8140877,bh
     6c4:	3d 4b 6a 08 14       	cmp    eax,0x14086a4b
     6c9:	75 84                	jne    64f <sysEnter_Vector-0x12f9b1>
     6cb:	68 00 02 04 01       	push   0x1040200
     6d0:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     6d3:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     6d9:	06                   	push   es
     6da:	66 06                	pushw  es
     6dc:	68 ad 68 68 76       	push   0x766868ad
     6e1:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     6e4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     6e7:	06                   	push   es
     6e8:	ac                   	lods   al,BYTE PTR ds:[esi]
     6e9:	06                   	push   es
     6ea:	68 5b 00 02 04       	push   0x402005b
     6ef:	02 a0 2f 02 05 00    	add    ah,BYTE PTR [eax+0x5022f]
     6f5:	01 01                	add    DWORD PTR [ecx],eax
     6f7:	c2 01 00             	ret    0x1
     6fa:	00 02                	add    BYTE PTR [edx],al
     6fc:	00 eb                	add    bl,ch
     6fe:	00 00                	add    BYTE PTR [eax],al
     700:	00 01                	add    BYTE PTR [ecx],al
     702:	01 fb                	add    ebx,edi
     704:	0e                   	push   cs
     705:	0d 00 01 01 01       	or     eax,0x1010100
     70a:	01 00                	add    DWORD PTR [eax],eax
     70c:	00 00                	add    BYTE PTR [eax],al
     70e:	01 00                	add    DWORD PTR [eax],eax
     710:	00 01                	add    BYTE PTR [ecx],al
     712:	73 72                	jae    786 <sysEnter_Vector-0x12f87a>
     714:	63 00                	arpl   WORD PTR [eax],ax
     716:	2f                   	das    
     717:	68 6f 6d 65 2f       	push   0x2f656d6f
     71c:	79 6f                	jns    78d <sysEnter_Vector-0x12f873>
     71e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     725:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     728:	73 73                	jae    79d <sysEnter_Vector-0x12f863>
     72a:	2f                   	das    
     72b:	6c                   	ins    BYTE PTR es:[edi],dx
     72c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     733:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     739:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     73f:	78 2d                	js     76e <sysEnter_Vector-0x12f892>
     741:	67 6e                	outs   dx,BYTE PTR ds:[si]
     743:	75 2f                	jne    774 <sysEnter_Vector-0x12f88c>
     745:	35 2e 33 2e 30       	xor    eax,0x302e332e
     74a:	2f                   	das    
     74b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     752:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     755:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     759:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     75d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     761:	65                   	gs
     762:	2f                   	das    
     763:	2e                   	cs
     764:	2e                   	cs
     765:	2f                   	das    
     766:	2e                   	cs
     767:	2e                   	cs
     768:	2f                   	das    
     769:	2e                   	cs
     76a:	2e                   	cs
     76b:	2f                   	das    
     76c:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     770:	6a 2f                	push   0x2f
     772:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     775:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     77c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     77d:	65                   	gs
     77e:	6c                   	ins    BYTE PTR es:[edi],dx
     77f:	2f                   	das    
     780:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     787:	00 00                	add    BYTE PTR [eax],al
     789:	6c                   	ins    BYTE PTR es:[edi],dx
     78a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     791:	4f                   	dec    edi
     792:	53                   	push   ebx
     793:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     796:	01 00                	add    DWORD PTR [eax],eax
     798:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     79b:	64                   	fs
     79c:	61                   	popa   
     79d:	72 67                	jb     806 <sysEnter_Vector-0x12f7fa>
     79f:	2e                   	cs
     7a0:	68 00 02 00 00       	push   0x200
     7a5:	73 74                	jae    81b <sysEnter_Vector-0x12f7e5>
     7a7:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7ae:	63 
     7af:	2e                   	cs
     7b0:	68 00 02 00 00       	push   0x200
     7b5:	73 74                	jae    82b <sysEnter_Vector-0x12f7d5>
     7b7:	64                   	fs
     7b8:	64                   	fs
     7b9:	65                   	gs
     7ba:	66                   	data16
     7bb:	2e                   	cs
     7bc:	68 00 02 00 00       	push   0x200
     7c1:	6d                   	ins    DWORD PTR es:[edi],dx
     7c2:	61                   	popa   
     7c3:	6c                   	ins    BYTE PTR es:[edi],dx
     7c4:	6c                   	ins    BYTE PTR es:[edi],dx
     7c5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7c6:	63 2e                	arpl   WORD PTR [esi],bp
     7c8:	68 00 03 00 00       	push   0x300
     7cd:	6c                   	ins    BYTE PTR es:[edi],dx
     7ce:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7d5:	4f                   	dec    edi
     7d6:	53                   	push   ebx
     7d7:	2e                   	cs
     7d8:	68 00 03 00 00       	push   0x300
     7dd:	73 79                	jae    858 <sysEnter_Vector-0x12f7a8>
     7df:	73 63                	jae    844 <sysEnter_Vector-0x12f7bc>
     7e1:	61                   	popa   
     7e2:	6c                   	ins    BYTE PTR es:[edi],dx
     7e3:	6c                   	ins    BYTE PTR es:[edi],dx
     7e4:	73 2e                	jae    814 <sysEnter_Vector-0x12f7ec>
     7e6:	68 00 04 00 00       	push   0x400
     7eb:	00 00                	add    BYTE PTR [eax],al
     7ed:	05 02 b4 08 00       	add    eax,0x8b402
     7f2:	30 03                	xor    BYTE PTR [ebx],al
     7f4:	10 01                	adc    BYTE PTR [ecx],al
     7f6:	08 21                	or     BYTE PTR [ecx],ah
     7f8:	75 08                	jne    802 <sysEnter_Vector-0x12f7fe>
     7fa:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     800:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     806:	75 08                	jne    810 <sysEnter_Vector-0x12f7f0>
     808:	9f                   	lahf   
     809:	3d 77 08 21 75       	cmp    eax,0x75210877
     80e:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     814:	75 08                	jne    81e <sysEnter_Vector-0x12f7e2>
     816:	d7                   	xlat   BYTE PTR ds:[ebx]
     817:	3d 77 08 21 08       	cmp    eax,0x8210877
     81c:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     820:	c9                   	leave  
     821:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     824:	08 6a 2d             	or     BYTE PTR [edx+0x2d],ch
     827:	08 21                	or     BYTE PTR [ecx],ah
     829:	69 08 13 75 77 f4    	imul   ecx,DWORD PTR [eax],0xf4777513
     82f:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     833:	31 f4                	xor    esp,esi
     835:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     839:	31 f4                	xor    esp,esi
     83b:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     83f:	31 f4                	xor    esp,esi
     841:	68 08 91 5a 31       	push   0x315a9108
     846:	08 21                	or     BYTE PTR [ecx],ah
     848:	02 57 13             	add    dl,BYTE PTR [edi+0x13]
     84b:	59                   	pop    ecx
     84c:	77 c9                	ja     817 <sysEnter_Vector-0x12f7e9>
     84e:	c9                   	leave  
     84f:	3f                   	aas    
     850:	c9                   	leave  
     851:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     857:	3d 31 f3 75 08       	cmp    eax,0x875f331
     85c:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     861:	08 21                	or     BYTE PTR [ecx],ah
     863:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     86a:	67 02 22             	add    ah,BYTE PTR [bp+si]
     86d:	14 08                	adc    al,0x8
     86f:	ae                   	scas   al,BYTE PTR es:[edi]
     870:	4c                   	dec    esp
     871:	ca 08 4b             	retf   0x4b08
     874:	91                   	xchg   ecx,eax
     875:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     87b:	67 02 2f             	add    ch,BYTE PTR [bx]
     87e:	14 00                	adc    al,0x0
     880:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     883:	02 31                	add    dh,BYTE PTR [ecx]
     885:	13 00                	adc    eax,DWORD PTR [eax]
     887:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     88a:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     890:	bb 00 02 04 02       	mov    ebx,0x2040200
     895:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     898:	00 02                	add    BYTE PTR [edx],al
     89a:	04 01                	add    al,0x1
     89c:	06                   	push   es
     89d:	4a                   	dec    edx
     89e:	06                   	push   es
     89f:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     8a2:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     8a8:	f3 75 08             	repz jne 8b3 <sysEnter_Vector-0x12f74d>
     8ab:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     8b0:	c9                   	leave  
     8b1:	c9                   	leave  
     8b2:	31 ca                	xor    edx,ecx
     8b4:	3f                   	aas    
     8b5:	c9                   	leave  
     8b6:	08 13                	or     BYTE PTR [ebx],dl
     8b8:	02 02                	add    al,BYTE PTR [edx]
     8ba:	00 01                	add    BYTE PTR [ecx],al
     8bc:	01 50 01             	add    DWORD PTR [eax+0x1],edx
     8bf:	00 00                	add    BYTE PTR [eax],al
     8c1:	02 00                	add    al,BYTE PTR [eax]
     8c3:	db 00                	fild   DWORD PTR [eax]
     8c5:	00 00                	add    BYTE PTR [eax],al
     8c7:	01 01                	add    DWORD PTR [ecx],eax
     8c9:	fb                   	sti    
     8ca:	0e                   	push   cs
     8cb:	0d 00 01 01 01       	or     eax,0x1010100
     8d0:	01 00                	add    DWORD PTR [eax],eax
     8d2:	00 00                	add    BYTE PTR [eax],al
     8d4:	01 00                	add    DWORD PTR [eax],eax
     8d6:	00 01                	add    BYTE PTR [ecx],al
     8d8:	73 72                	jae    94c <sysEnter_Vector-0x12f6b4>
     8da:	63 00                	arpl   WORD PTR [eax],ax
     8dc:	2f                   	das    
     8dd:	68 6f 6d 65 2f       	push   0x2f656d6f
     8e2:	79 6f                	jns    953 <sysEnter_Vector-0x12f6ad>
     8e4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     8eb:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     8ee:	73 73                	jae    963 <sysEnter_Vector-0x12f69d>
     8f0:	2f                   	das    
     8f1:	6c                   	ins    BYTE PTR es:[edi],dx
     8f2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     8f9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     8ff:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     905:	78 2d                	js     934 <sysEnter_Vector-0x12f6cc>
     907:	67 6e                	outs   dx,BYTE PTR ds:[si]
     909:	75 2f                	jne    93a <sysEnter_Vector-0x12f6c6>
     90b:	35 2e 33 2e 30       	xor    eax,0x302e332e
     910:	2f                   	das    
     911:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     918:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     91b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     91f:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     923:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     927:	65                   	gs
     928:	2f                   	das    
     929:	2e                   	cs
     92a:	2e                   	cs
     92b:	2f                   	das    
     92c:	2e                   	cs
     92d:	2e                   	cs
     92e:	2f                   	das    
     92f:	2e                   	cs
     930:	2e                   	cs
     931:	2f                   	das    
     932:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     936:	6a 2f                	push   0x2f
     938:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     93b:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     942:	6e                   	outs   dx,BYTE PTR ds:[esi]
     943:	65                   	gs
     944:	6c                   	ins    BYTE PTR es:[edi],dx
     945:	2f                   	das    
     946:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     94d:	00 00                	add    BYTE PTR [eax],al
     94f:	6d                   	ins    DWORD PTR es:[edi],dx
     950:	61                   	popa   
     951:	6c                   	ins    BYTE PTR es:[edi],dx
     952:	6c                   	ins    BYTE PTR es:[edi],dx
     953:	6f                   	outs   dx,DWORD PTR ds:[esi]
     954:	63 2e                	arpl   WORD PTR [esi],bp
     956:	63 00                	arpl   WORD PTR [eax],ax
     958:	01 00                	add    DWORD PTR [eax],eax
     95a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     95d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     964:	63 
     965:	2e                   	cs
     966:	68 00 02 00 00       	push   0x200
     96b:	73 74                	jae    9e1 <sysEnter_Vector-0x12f61f>
     96d:	64                   	fs
     96e:	64                   	fs
     96f:	65                   	gs
     970:	66                   	data16
     971:	2e                   	cs
     972:	68 00 02 00 00       	push   0x200
     977:	6d                   	ins    DWORD PTR es:[edi],dx
     978:	61                   	popa   
     979:	6c                   	ins    BYTE PTR es:[edi],dx
     97a:	6c                   	ins    BYTE PTR es:[edi],dx
     97b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     97c:	63 2e                	arpl   WORD PTR [esi],bp
     97e:	68 00 03 00 00       	push   0x300
     983:	6c                   	ins    BYTE PTR es:[edi],dx
     984:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     98b:	4f                   	dec    edi
     98c:	53                   	push   ebx
     98d:	2e                   	cs
     98e:	68 00 03 00 00       	push   0x300
     993:	73 79                	jae    a0e <sysEnter_Vector-0x12f5f2>
     995:	73 63                	jae    9fa <sysEnter_Vector-0x12f606>
     997:	61                   	popa   
     998:	6c                   	ins    BYTE PTR es:[edi],dx
     999:	6c                   	ins    BYTE PTR es:[edi],dx
     99a:	73 2e                	jae    9ca <sysEnter_Vector-0x12f636>
     99c:	68 00 04 00 00       	push   0x400
     9a1:	00 00                	add    BYTE PTR [eax],al
     9a3:	05 02 40 0f 00       	add    eax,0xf4002
     9a8:	30 03                	xor    BYTE PTR [ebx],al
     9aa:	0c 01                	or     al,0x1
     9ac:	08 21                	or     BYTE PTR [ecx],ah
     9ae:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
     9b1:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     9b6:	f5                   	cmc    
     9b7:	92                   	xchg   edx,eax
     9b8:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     9be:	04 01                	add    al,0x1
     9c0:	06                   	push   es
     9c1:	66 06                	pushw  es
     9c3:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     9c8:	59                   	pop    ecx
     9c9:	31 f5                	xor    ebp,esi
     9cb:	68 93 00 02 04       	push   0x4020093
     9d0:	02 be 30 03 76 90    	add    bh,BYTE PTR [esi-0x6f89fcd0]
     9d6:	03 0b                	add    ecx,DWORD PTR [ebx]
     9d8:	20 31                	and    BYTE PTR [ecx],dh
     9da:	08 27                	or     BYTE PTR [edi],ah
     9dc:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     9e2:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     9e7:	f3 02 26             	repz add ah,BYTE PTR [esi]
     9ea:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     9f1:	e5 ad                	in     eax,0xad
     9f3:	91                   	xchg   ecx,eax
     9f4:	91                   	xchg   ecx,eax
     9f5:	75 08                	jne    9ff <sysEnter_Vector-0x12f601>
     9f7:	d7                   	xlat   BYTE PTR ds:[ebx]
     9f8:	d7                   	xlat   BYTE PTR ds:[ebx]
     9f9:	08 13                	or     BYTE PTR [ebx],dl
     9fb:	91                   	xchg   ecx,eax
     9fc:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     9ff:	91                   	xchg   ecx,eax
     a00:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     a05:	c9                   	leave  
     a06:	ad                   	lods   eax,DWORD PTR ds:[esi]
     a07:	3f                   	aas    
     a08:	08 13                	or     BYTE PTR [ebx],dl
     a0a:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     a10:	01 e3                	add    ebx,esp
     a12:	00 00                	add    BYTE PTR [eax],al
     a14:	00 02                	add    BYTE PTR [edx],al
     a16:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     a1c:	01 fb                	add    ebx,edi
     a1e:	0e                   	push   cs
     a1f:	0d 00 01 01 01       	or     eax,0x1010100
     a24:	01 00                	add    DWORD PTR [eax],eax
     a26:	00 00                	add    BYTE PTR [eax],al
     a28:	01 00                	add    DWORD PTR [eax],eax
     a2a:	00 01                	add    BYTE PTR [ecx],al
     a2c:	73 72                	jae    aa0 <sysEnter_Vector-0x12f560>
     a2e:	63 00                	arpl   WORD PTR [eax],ax
     a30:	2f                   	das    
     a31:	68 6f 6d 65 2f       	push   0x2f656d6f
     a36:	79 6f                	jns    aa7 <sysEnter_Vector-0x12f559>
     a38:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     a3f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     a42:	73 73                	jae    ab7 <sysEnter_Vector-0x12f549>
     a44:	2f                   	das    
     a45:	6c                   	ins    BYTE PTR es:[edi],dx
     a46:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a4d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a53:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     a59:	78 2d                	js     a88 <sysEnter_Vector-0x12f578>
     a5b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     a5d:	75 2f                	jne    a8e <sysEnter_Vector-0x12f572>
     a5f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     a64:	2f                   	das    
     a65:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a6c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a6f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a73:	65 00 00             	add    BYTE PTR gs:[eax],al
     a76:	6d                   	ins    DWORD PTR es:[edi],dx
     a77:	65                   	gs
     a78:	6d                   	ins    DWORD PTR es:[edi],dx
     a79:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     a7c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a7f:	01 00                	add    DWORD PTR [eax],eax
     a81:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     a84:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     a8b:	63 
     a8c:	2e                   	cs
     a8d:	68 00 02 00 00       	push   0x200
     a92:	73 74                	jae    b08 <sysEnter_Vector-0x12f4f8>
     a94:	64                   	fs
     a95:	64                   	fs
     a96:	65                   	gs
     a97:	66                   	data16
     a98:	2e                   	cs
     a99:	68 00 02 00 00       	push   0x200
     a9e:	6d                   	ins    DWORD PTR es:[edi],dx
     a9f:	61                   	popa   
     aa0:	6c                   	ins    BYTE PTR es:[edi],dx
     aa1:	6c                   	ins    BYTE PTR es:[edi],dx
     aa2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     aa3:	63 2e                	arpl   WORD PTR [esi],bp
     aa5:	68 00 03 00 00       	push   0x300
     aaa:	6c                   	ins    BYTE PTR es:[edi],dx
     aab:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     ab2:	4f                   	dec    edi
     ab3:	53                   	push   ebx
     ab4:	2e                   	cs
     ab5:	68 00 03 00 00       	push   0x300
     aba:	00 00                	add    BYTE PTR [eax],al
     abc:	05 02 b0 12 00       	add    eax,0x12b002
     ac1:	30 03                	xor    BYTE PTR [ebx],al
     ac3:	0a 01                	or     al,BYTE PTR [ecx]
     ac5:	f5                   	cmc    
     ac6:	d7                   	xlat   BYTE PTR ds:[ebx]
     ac7:	d7                   	xlat   BYTE PTR ds:[ebx]
     ac8:	68 91 67 68 83       	push   0x83686791
     acd:	91                   	xchg   ecx,eax
     ace:	91                   	xchg   ecx,eax
     acf:	2f                   	das    
     ad0:	08 1f                	or     BYTE PTR [edi],bl
     ad2:	e8 08 57 ca 84       	call   84ca61df <ticksToWait+0x54ca1b4f>
     ad7:	68 83 67 68 83       	push   0x83686783
     adc:	91                   	xchg   ecx,eax
     add:	91                   	xchg   ecx,eax
     ade:	2f                   	das    
     adf:	08 1f                	or     BYTE PTR [edi],bl
     ae1:	e8 08 57 ca 5c       	call   5cca61ee <ticksToWait+0x2cca1b5e>
     ae6:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     aec:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     af2:	3e 02 02             	add    al,BYTE PTR ds:[edx]
     af5:	00 01                	add    BYTE PTR [ecx],al
     af7:	01 ca                	add    edx,ecx
     af9:	00 00                	add    BYTE PTR [eax],al
     afb:	00 02                	add    BYTE PTR [edx],al
     afd:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     b03:	01 fb                	add    ebx,edi
     b05:	0e                   	push   cs
     b06:	0d 00 01 01 01       	or     eax,0x1010100
     b0b:	01 00                	add    DWORD PTR [eax],eax
     b0d:	00 00                	add    BYTE PTR [eax],al
     b0f:	01 00                	add    DWORD PTR [eax],eax
     b11:	00 01                	add    BYTE PTR [ecx],al
     b13:	73 72                	jae    b87 <sysEnter_Vector-0x12f479>
     b15:	63 00                	arpl   WORD PTR [eax],ax
     b17:	2f                   	das    
     b18:	68 6f 6d 65 2f       	push   0x2f656d6f
     b1d:	79 6f                	jns    b8e <sysEnter_Vector-0x12f472>
     b1f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     b26:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     b29:	73 73                	jae    b9e <sysEnter_Vector-0x12f462>
     b2b:	2f                   	das    
     b2c:	6c                   	ins    BYTE PTR es:[edi],dx
     b2d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b34:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b3a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b40:	78 2d                	js     b6f <sysEnter_Vector-0x12f491>
     b42:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b44:	75 2f                	jne    b75 <sysEnter_Vector-0x12f48b>
     b46:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b4b:	2f                   	das    
     b4c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b53:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b56:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b5a:	65 00 00             	add    BYTE PTR gs:[eax],al
     b5d:	6d                   	ins    DWORD PTR es:[edi],dx
     b5e:	65                   	gs
     b5f:	6d                   	ins    DWORD PTR es:[edi],dx
     b60:	73 65                	jae    bc7 <sysEnter_Vector-0x12f439>
     b62:	74 2e                	je     b92 <sysEnter_Vector-0x12f46e>
     b64:	63 00                	arpl   WORD PTR [eax],ax
     b66:	01 00                	add    DWORD PTR [eax],eax
     b68:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b6b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b72:	63 
     b73:	2e                   	cs
     b74:	68 00 02 00 00       	push   0x200
     b79:	73 74                	jae    bef <sysEnter_Vector-0x12f411>
     b7b:	64                   	fs
     b7c:	64                   	fs
     b7d:	65                   	gs
     b7e:	66                   	data16
     b7f:	2e                   	cs
     b80:	68 00 02 00 00       	push   0x200
     b85:	6d                   	ins    DWORD PTR es:[edi],dx
     b86:	61                   	popa   
     b87:	6c                   	ins    BYTE PTR es:[edi],dx
     b88:	6c                   	ins    BYTE PTR es:[edi],dx
     b89:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b8a:	63 2e                	arpl   WORD PTR [esi],bp
     b8c:	68 00 03 00 00       	push   0x300
     b91:	6c                   	ins    BYTE PTR es:[edi],dx
     b92:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b99:	4f                   	dec    edi
     b9a:	53                   	push   ebx
     b9b:	2e                   	cs
     b9c:	68 00 03 00 00       	push   0x300
     ba1:	00 00                	add    BYTE PTR [eax],al
     ba3:	05 02 4c 14 00       	add    eax,0x144c02
     ba8:	30 1a                	xor    BYTE PTR [edx],bl
     baa:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     bb1:	ca 9f 2f             	retf   0x2f9f
     bb4:	d5 bd                	aad    0xbd
     bb6:	9f                   	lahf   
     bb7:	2f                   	das    
     bb8:	f1                   	icebp  
     bb9:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     bbe:	c9                   	leave  
     bbf:	08 13                	or     BYTE PTR [ebx],dl
     bc1:	02 02                	add    al,BYTE PTR [edx]
     bc3:	00 01                	add    BYTE PTR [ecx],al
     bc5:	01 c0                	add    eax,eax
     bc7:	00 00                	add    BYTE PTR [eax],al
     bc9:	00 02                	add    BYTE PTR [edx],al
     bcb:	00 a9 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],ch
     bd1:	01 fb                	add    ebx,edi
     bd3:	0e                   	push   cs
     bd4:	0d 00 01 01 01       	or     eax,0x1010100
     bd9:	01 00                	add    DWORD PTR [eax],eax
     bdb:	00 00                	add    BYTE PTR [eax],al
     bdd:	01 00                	add    DWORD PTR [eax],eax
     bdf:	00 01                	add    BYTE PTR [ecx],al
     be1:	73 72                	jae    c55 <sysEnter_Vector-0x12f3ab>
     be3:	63 00                	arpl   WORD PTR [eax],ax
     be5:	2f                   	das    
     be6:	68 6f 6d 65 2f       	push   0x2f656d6f
     beb:	79 6f                	jns    c5c <sysEnter_Vector-0x12f3a4>
     bed:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     bf4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     bf7:	73 73                	jae    c6c <sysEnter_Vector-0x12f394>
     bf9:	2f                   	das    
     bfa:	6c                   	ins    BYTE PTR es:[edi],dx
     bfb:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     c02:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     c08:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     c0e:	78 2d                	js     c3d <sysEnter_Vector-0x12f3c3>
     c10:	67 6e                	outs   dx,BYTE PTR ds:[si]
     c12:	75 2f                	jne    c43 <sysEnter_Vector-0x12f3bd>
     c14:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c19:	2f                   	das    
     c1a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c21:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c24:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c28:	65 00 00             	add    BYTE PTR gs:[eax],al
     c2b:	6d                   	ins    DWORD PTR es:[edi],dx
     c2c:	6d                   	ins    DWORD PTR es:[edi],dx
     c2d:	61                   	popa   
     c2e:	70 2e                	jo     c5e <sysEnter_Vector-0x12f3a2>
     c30:	63 00                	arpl   WORD PTR [eax],ax
     c32:	01 00                	add    DWORD PTR [eax],eax
     c34:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c37:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c3e:	63 
     c3f:	2e                   	cs
     c40:	68 00 02 00 00       	push   0x200
     c45:	73 74                	jae    cbb <sysEnter_Vector-0x12f345>
     c47:	64                   	fs
     c48:	64                   	fs
     c49:	65                   	gs
     c4a:	66                   	data16
     c4b:	2e                   	cs
     c4c:	68 00 02 00 00       	push   0x200
     c51:	74 79                	je     ccc <sysEnter_Vector-0x12f334>
     c53:	70 65                	jo     cba <sysEnter_Vector-0x12f346>
     c55:	73 2e                	jae    c85 <sysEnter_Vector-0x12f37b>
     c57:	68 00 03 00 00       	push   0x300
     c5c:	6d                   	ins    DWORD PTR es:[edi],dx
     c5d:	61                   	popa   
     c5e:	6c                   	ins    BYTE PTR es:[edi],dx
     c5f:	6c                   	ins    BYTE PTR es:[edi],dx
     c60:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c61:	63 2e                	arpl   WORD PTR [esi],bp
     c63:	68 00 03 00 00       	push   0x300
     c68:	6c                   	ins    BYTE PTR es:[edi],dx
     c69:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c70:	4f                   	dec    edi
     c71:	53                   	push   ebx
     c72:	2e                   	cs
     c73:	68 00 03 00 00       	push   0x300
     c78:	00 00                	add    BYTE PTR [eax],al
     c7a:	05 02 34 15 00       	add    eax,0x153402
     c7f:	30 03                	xor    BYTE PTR [ebx],al
     c81:	09 01                	or     DWORD PTR [ecx],eax
     c83:	c9                   	leave  
     c84:	59                   	pop    ecx
     c85:	02 02                	add    al,BYTE PTR [edx]
     c87:	00 01                	add    BYTE PTR [ecx],al
     c89:	01 e6                	add    esi,esp
     c8b:	00 00                	add    BYTE PTR [eax],al
     c8d:	00 02                	add    BYTE PTR [edx],al
     c8f:	00 cd                	add    ch,cl
     c91:	00 00                	add    BYTE PTR [eax],al
     c93:	00 01                	add    BYTE PTR [ecx],al
     c95:	01 fb                	add    ebx,edi
     c97:	0e                   	push   cs
     c98:	0d 00 01 01 01       	or     eax,0x1010100
     c9d:	01 00                	add    DWORD PTR [eax],eax
     c9f:	00 00                	add    BYTE PTR [eax],al
     ca1:	01 00                	add    DWORD PTR [eax],eax
     ca3:	00 01                	add    BYTE PTR [ecx],al
     ca5:	73 72                	jae    d19 <sysEnter_Vector-0x12f2e7>
     ca7:	63 00                	arpl   WORD PTR [eax],ax
     ca9:	2f                   	das    
     caa:	68 6f 6d 65 2f       	push   0x2f656d6f
     caf:	79 6f                	jns    d20 <sysEnter_Vector-0x12f2e0>
     cb1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     cb8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     cbb:	73 73                	jae    d30 <sysEnter_Vector-0x12f2d0>
     cbd:	2f                   	das    
     cbe:	6c                   	ins    BYTE PTR es:[edi],dx
     cbf:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     cc6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ccc:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     cd2:	78 2d                	js     d01 <sysEnter_Vector-0x12f2ff>
     cd4:	67 6e                	outs   dx,BYTE PTR ds:[si]
     cd6:	75 2f                	jne    d07 <sysEnter_Vector-0x12f2f9>
     cd8:	35 2e 33 2e 30       	xor    eax,0x302e332e
     cdd:	2f                   	das    
     cde:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     ce5:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ce8:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     cec:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     cf0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     cf4:	65                   	gs
     cf5:	2f                   	das    
     cf6:	2e                   	cs
     cf7:	2e                   	cs
     cf8:	2f                   	das    
     cf9:	2e                   	cs
     cfa:	2e                   	cs
     cfb:	2f                   	das    
     cfc:	2e                   	cs
     cfd:	2e                   	cs
     cfe:	2f                   	das    
     cff:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     d03:	6a 2f                	push   0x2f
     d05:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     d08:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     d0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d10:	65                   	gs
     d11:	6c                   	ins    BYTE PTR es:[edi],dx
     d12:	2f                   	das    
     d13:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d1a:	00 00                	add    BYTE PTR [eax],al
     d1c:	70 69                	jo     d87 <sysEnter_Vector-0x12f279>
     d1e:	70 65                	jo     d85 <sysEnter_Vector-0x12f27b>
     d20:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d23:	01 00                	add    DWORD PTR [eax],eax
     d25:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d28:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d2f:	63 
     d30:	2e                   	cs
     d31:	68 00 02 00 00       	push   0x200
     d36:	6d                   	ins    DWORD PTR es:[edi],dx
     d37:	61                   	popa   
     d38:	6c                   	ins    BYTE PTR es:[edi],dx
     d39:	6c                   	ins    BYTE PTR es:[edi],dx
     d3a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d3b:	63 2e                	arpl   WORD PTR [esi],bp
     d3d:	68 00 03 00 00       	push   0x300
     d42:	6c                   	ins    BYTE PTR es:[edi],dx
     d43:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     d4a:	4f                   	dec    edi
     d4b:	53                   	push   ebx
     d4c:	2e                   	cs
     d4d:	68 00 03 00 00       	push   0x300
     d52:	73 79                	jae    dcd <sysEnter_Vector-0x12f233>
     d54:	73 63                	jae    db9 <sysEnter_Vector-0x12f247>
     d56:	61                   	popa   
     d57:	6c                   	ins    BYTE PTR es:[edi],dx
     d58:	6c                   	ins    BYTE PTR es:[edi],dx
     d59:	73 2e                	jae    d89 <sysEnter_Vector-0x12f277>
     d5b:	68 00 04 00 00       	push   0x400
     d60:	00 00                	add    BYTE PTR [eax],al
     d62:	05 02 48 15 00       	add    eax,0x154802
     d67:	30 03                	xor    BYTE PTR [ebx],al
     d69:	0a 01                	or     al,BYTE PTR [ecx]
     d6b:	08 13                	or     BYTE PTR [ebx],dl
     d6d:	08 2f                	or     BYTE PTR [edi],ch
     d6f:	02 05 00 01 01 fa    	add    al,BYTE PTR ds:0xfa010100
     d75:	00 00                	add    BYTE PTR [eax],al
     d77:	00 02                	add    BYTE PTR [edx],al
     d79:	00 d8                	add    al,bl
     d7b:	00 00                	add    BYTE PTR [eax],al
     d7d:	00 01                	add    BYTE PTR [ecx],al
     d7f:	01 fb                	add    ebx,edi
     d81:	0e                   	push   cs
     d82:	0d 00 01 01 01       	or     eax,0x1010100
     d87:	01 00                	add    DWORD PTR [eax],eax
     d89:	00 00                	add    BYTE PTR [eax],al
     d8b:	01 00                	add    DWORD PTR [eax],eax
     d8d:	00 01                	add    BYTE PTR [ecx],al
     d8f:	73 72                	jae    e03 <sysEnter_Vector-0x12f1fd>
     d91:	63 00                	arpl   WORD PTR [eax],ax
     d93:	2f                   	das    
     d94:	68 6f 6d 65 2f       	push   0x2f656d6f
     d99:	79 6f                	jns    e0a <sysEnter_Vector-0x12f1f6>
     d9b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     da2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     da5:	73 73                	jae    e1a <sysEnter_Vector-0x12f1e6>
     da7:	2f                   	das    
     da8:	6c                   	ins    BYTE PTR es:[edi],dx
     da9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     db0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     db6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     dbc:	78 2d                	js     deb <sysEnter_Vector-0x12f215>
     dbe:	67 6e                	outs   dx,BYTE PTR ds:[si]
     dc0:	75 2f                	jne    df1 <sysEnter_Vector-0x12f20f>
     dc2:	35 2e 33 2e 30       	xor    eax,0x302e332e
     dc7:	2f                   	das    
     dc8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     dcf:	00 2e                	add    BYTE PTR [esi],ch
     dd1:	2e                   	cs
     dd2:	2f                   	das    
     dd3:	2e                   	cs
     dd4:	2e                   	cs
     dd5:	2f                   	das    
     dd6:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     dda:	6a 2f                	push   0x2f
     ddc:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     ddf:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     de6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     de7:	65                   	gs
     de8:	6c                   	ins    BYTE PTR es:[edi],dx
     de9:	2f                   	das    
     dea:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     df1:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     df4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     df8:	65 00 00             	add    BYTE PTR gs:[eax],al
     dfb:	73 74                	jae    e71 <sysEnter_Vector-0x12f18f>
     dfd:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
     e04:	00 
     e05:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e08:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     e0f:	63 
     e10:	2e                   	cs
     e11:	68 00 02 00 00       	push   0x200
     e16:	73 74                	jae    e8c <sysEnter_Vector-0x12f174>
     e18:	64                   	fs
     e19:	64                   	fs
     e1a:	65                   	gs
     e1b:	66                   	data16
     e1c:	2e                   	cs
     e1d:	68 00 02 00 00       	push   0x200
     e22:	64                   	fs
     e23:	6c                   	ins    BYTE PTR es:[edi],dx
     e24:	6c                   	ins    BYTE PTR es:[edi],dx
     e25:	69 73 74 2e 68 00 03 	imul   esi,DWORD PTR [ebx+0x74],0x300682e
     e2c:	00 00                	add    BYTE PTR [eax],al
     e2e:	73 74                	jae    ea4 <sysEnter_Vector-0x12f15c>
     e30:	64 69 6f 2e 68 00 04 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x40068
     e37:	00 
     e38:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     e3b:	6c                   	ins    BYTE PTR es:[edi],dx
     e3c:	6c                   	ins    BYTE PTR es:[edi],dx
     e3d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e3e:	63 2e                	arpl   WORD PTR [esi],bp
     e40:	68 00 04 00 00       	push   0x400
     e45:	6c                   	ins    BYTE PTR es:[edi],dx
     e46:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     e4d:	4f                   	dec    edi
     e4e:	53                   	push   ebx
     e4f:	2e                   	cs
     e50:	68 00 04 00 00       	push   0x400
     e55:	00 00                	add    BYTE PTR [eax],al
     e57:	05 02 74 15 00       	add    eax,0x157402
     e5c:	30 03                	xor    BYTE PTR [ebx],al
     e5e:	c3                   	ret    
     e5f:	00 01                	add    BYTE PTR [ecx],al
     e61:	08 22                	or     BYTE PTR [edx],ah
     e63:	76 08                	jbe    e6d <sysEnter_Vector-0x12f193>
     e65:	31 d7                	xor    edi,edx
     e67:	d7                   	xlat   BYTE PTR ds:[ebx]
     e68:	d7                   	xlat   BYTE PTR ds:[ebx]
     e69:	d7                   	xlat   BYTE PTR ds:[ebx]
     e6a:	ad                   	lods   eax,DWORD PTR ds:[esi]
     e6b:	e6 21                	out    0x21,al
     e6d:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
     e73:	00 00                	add    BYTE PTR [eax],al
     e75:	00 02                	add    BYTE PTR [edx],al
     e77:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
     e7e:	fb                   	sti    
     e7f:	0e                   	push   cs
     e80:	0d 00 01 01 01       	or     eax,0x1010100
     e85:	01 00                	add    DWORD PTR [eax],eax
     e87:	00 00                	add    BYTE PTR [eax],al
     e89:	01 00                	add    DWORD PTR [eax],eax
     e8b:	00 01                	add    BYTE PTR [ecx],al
     e8d:	73 72                	jae    f01 <sysEnter_Vector-0x12f0ff>
     e8f:	63 2f                	arpl   WORD PTR [edi],bp
     e91:	73 74                	jae    f07 <sysEnter_Vector-0x12f0f9>
     e93:	72 69                	jb     efe <sysEnter_Vector-0x12f102>
     e95:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e96:	67 73 00             	addr16 jae e99 <sysEnter_Vector-0x12f167>
     e99:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     ea0:	00 2f                	add    BYTE PTR [edi],ch
     ea2:	68 6f 6d 65 2f       	push   0x2f656d6f
     ea7:	79 6f                	jns    f18 <sysEnter_Vector-0x12f0e8>
     ea9:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     eb0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     eb3:	73 73                	jae    f28 <sysEnter_Vector-0x12f0d8>
     eb5:	2f                   	das    
     eb6:	6c                   	ins    BYTE PTR es:[edi],dx
     eb7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     ebe:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ec4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     eca:	78 2d                	js     ef9 <sysEnter_Vector-0x12f107>
     ecc:	67 6e                	outs   dx,BYTE PTR ds:[si]
     ece:	75 2f                	jne    eff <sysEnter_Vector-0x12f101>
     ed0:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ed5:	2f                   	das    
     ed6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     edd:	00 00                	add    BYTE PTR [eax],al
     edf:	73 74                	jae    f55 <sysEnter_Vector-0x12f0ab>
     ee1:	72 63                	jb     f46 <sysEnter_Vector-0x12f0ba>
     ee3:	61                   	popa   
     ee4:	74 2e                	je     f14 <sysEnter_Vector-0x12f0ec>
     ee6:	63 00                	arpl   WORD PTR [eax],ax
     ee8:	01 00                	add    DWORD PTR [eax],eax
     eea:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     eed:	6c                   	ins    BYTE PTR es:[edi],dx
     eee:	6c                   	ins    BYTE PTR es:[edi],dx
     eef:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ef0:	63 2e                	arpl   WORD PTR [esi],bp
     ef2:	68 00 02 00 00       	push   0x200
     ef7:	6c                   	ins    BYTE PTR es:[edi],dx
     ef8:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     eff:	4f                   	dec    edi
     f00:	53                   	push   ebx
     f01:	2e                   	cs
     f02:	68 00 02 00 00       	push   0x200
     f07:	73 74                	jae    f7d <sysEnter_Vector-0x12f083>
     f09:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f10:	63 
     f11:	2e                   	cs
     f12:	68 00 03 00 00       	push   0x300
     f17:	00 00                	add    BYTE PTR [eax],al
     f19:	05 02 f8 15 00       	add    eax,0x15f802
     f1e:	30 03                	xor    BYTE PTR [ebx],al
     f20:	1d 01 08 21 02       	sbb    eax,0x2210801
     f25:	24 13                	and    al,0x13
     f27:	3d 5b 08 21 02       	cmp    eax,0x221085b
     f2c:	24 13                	and    al,0x13
     f2e:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
     f33:	49                   	dec    ecx
     f34:	e8 76 2f 08 4b       	call   4b083eaf <ticksToWait+0x1b07f81f>
     f39:	4b                   	dec    ebx
     f3a:	47                   	inc    edi
     f3b:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
     f42:	bb 00 00 00 02       	mov    ebx,0x2000000
     f47:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
     f4e:	fb                   	sti    
     f4f:	0e                   	push   cs
     f50:	0d 00 01 01 01       	or     eax,0x1010100
     f55:	01 00                	add    DWORD PTR [eax],eax
     f57:	00 00                	add    BYTE PTR [eax],al
     f59:	01 00                	add    DWORD PTR [eax],eax
     f5b:	00 01                	add    BYTE PTR [ecx],al
     f5d:	73 72                	jae    fd1 <sysEnter_Vector-0x12f02f>
     f5f:	63 2f                	arpl   WORD PTR [edi],bp
     f61:	73 74                	jae    fd7 <sysEnter_Vector-0x12f029>
     f63:	72 69                	jb     fce <sysEnter_Vector-0x12f032>
     f65:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f66:	67 73 00             	addr16 jae f69 <sysEnter_Vector-0x12f097>
     f69:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f70:	00 2f                	add    BYTE PTR [edi],ch
     f72:	68 6f 6d 65 2f       	push   0x2f656d6f
     f77:	79 6f                	jns    fe8 <sysEnter_Vector-0x12f018>
     f79:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f80:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f83:	73 73                	jae    ff8 <sysEnter_Vector-0x12f008>
     f85:	2f                   	das    
     f86:	6c                   	ins    BYTE PTR es:[edi],dx
     f87:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f8e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f94:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f9a:	78 2d                	js     fc9 <sysEnter_Vector-0x12f037>
     f9c:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f9e:	75 2f                	jne    fcf <sysEnter_Vector-0x12f031>
     fa0:	35 2e 33 2e 30       	xor    eax,0x302e332e
     fa5:	2f                   	das    
     fa6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     fad:	00 00                	add    BYTE PTR [eax],al
     faf:	73 74                	jae    1025 <sysEnter_Vector-0x12efdb>
     fb1:	72 63                	jb     1016 <sysEnter_Vector-0x12efea>
     fb3:	6d                   	ins    DWORD PTR es:[edi],dx
     fb4:	70 2e                	jo     fe4 <sysEnter_Vector-0x12f01c>
     fb6:	63 00                	arpl   WORD PTR [eax],ax
     fb8:	01 00                	add    DWORD PTR [eax],eax
     fba:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     fbd:	6c                   	ins    BYTE PTR es:[edi],dx
     fbe:	6c                   	ins    BYTE PTR es:[edi],dx
     fbf:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fc0:	63 2e                	arpl   WORD PTR [esi],bp
     fc2:	68 00 02 00 00       	push   0x200
     fc7:	6c                   	ins    BYTE PTR es:[edi],dx
     fc8:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     fcf:	4f                   	dec    edi
     fd0:	53                   	push   ebx
     fd1:	2e                   	cs
     fd2:	68 00 02 00 00       	push   0x200
     fd7:	73 74                	jae    104d <sysEnter_Vector-0x12efb3>
     fd9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     fe0:	63 
     fe1:	2e                   	cs
     fe2:	68 00 03 00 00       	push   0x300
     fe7:	00 00                	add    BYTE PTR [eax],al
     fe9:	05 02 e4 16 00       	add    eax,0x16e402
     fee:	30 03                	xor    BYTE PTR [ebx],al
     ff0:	18 01                	sbb    BYTE PTR [ecx],al
     ff2:	08 21                	or     BYTE PTR [ecx],ah
     ff4:	3d 41 ad ad 67       	cmp    eax,0x67adad41
     ff9:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
     fff:	01 01                	add    DWORD PTR [ecx],eax
    1001:	dc 00                	fadd   QWORD PTR [eax]
    1003:	00 00                	add    BYTE PTR [eax],al
    1005:	02 00                	add    al,BYTE PTR [eax]
    1007:	9c                   	pushf  
    1008:	00 00                	add    BYTE PTR [eax],al
    100a:	00 01                	add    BYTE PTR [ecx],al
    100c:	01 fb                	add    ebx,edi
    100e:	0e                   	push   cs
    100f:	0d 00 01 01 01       	or     eax,0x1010100
    1014:	01 00                	add    DWORD PTR [eax],eax
    1016:	00 00                	add    BYTE PTR [eax],al
    1018:	01 00                	add    DWORD PTR [eax],eax
    101a:	00 01                	add    BYTE PTR [ecx],al
    101c:	73 72                	jae    1090 <sysEnter_Vector-0x12ef70>
    101e:	63 2f                	arpl   WORD PTR [edi],bp
    1020:	73 74                	jae    1096 <sysEnter_Vector-0x12ef6a>
    1022:	72 69                	jb     108d <sysEnter_Vector-0x12ef73>
    1024:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1025:	67 73 00             	addr16 jae 1028 <sysEnter_Vector-0x12efd8>
    1028:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    102f:	00 2f                	add    BYTE PTR [edi],ch
    1031:	68 6f 6d 65 2f       	push   0x2f656d6f
    1036:	79 6f                	jns    10a7 <sysEnter_Vector-0x12ef59>
    1038:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    103f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1042:	73 73                	jae    10b7 <sysEnter_Vector-0x12ef49>
    1044:	2f                   	das    
    1045:	6c                   	ins    BYTE PTR es:[edi],dx
    1046:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    104d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1053:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1059:	78 2d                	js     1088 <sysEnter_Vector-0x12ef78>
    105b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    105d:	75 2f                	jne    108e <sysEnter_Vector-0x12ef72>
    105f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1064:	2f                   	das    
    1065:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    106c:	00 00                	add    BYTE PTR [eax],al
    106e:	73 74                	jae    10e4 <sysEnter_Vector-0x12ef1c>
    1070:	72 63                	jb     10d5 <sysEnter_Vector-0x12ef2b>
    1072:	70 79                	jo     10ed <sysEnter_Vector-0x12ef13>
    1074:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1077:	01 00                	add    DWORD PTR [eax],eax
    1079:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    107c:	6c                   	ins    BYTE PTR es:[edi],dx
    107d:	6c                   	ins    BYTE PTR es:[edi],dx
    107e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    107f:	63 2e                	arpl   WORD PTR [esi],bp
    1081:	68 00 02 00 00       	push   0x200
    1086:	6c                   	ins    BYTE PTR es:[edi],dx
    1087:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    108e:	4f                   	dec    edi
    108f:	53                   	push   ebx
    1090:	2e                   	cs
    1091:	68 00 02 00 00       	push   0x200
    1096:	73 74                	jae    110c <sysEnter_Vector-0x12eef4>
    1098:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    109f:	63 
    10a0:	2e                   	cs
    10a1:	68 00 03 00 00       	push   0x300
    10a6:	00 00                	add    BYTE PTR [eax],al
    10a8:	05 02 44 17 00       	add    eax,0x174402
    10ad:	30 16                	xor    BYTE PTR [esi],dl
    10af:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    10b3:	04 01                	add    al,0x1
    10b5:	06                   	push   es
    10b6:	20 06                	and    BYTE PTR [esi],al
    10b8:	08 ca                	or     dl,cl
    10ba:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    10c0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    10c3:	06                   	push   es
    10c4:	20 06                	and    BYTE PTR [esi],al
    10c6:	08 ca                	or     dl,cl
    10c8:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    10ce:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    10d1:	06                   	push   es
    10d2:	20 00                	and    BYTE PTR [eax],al
    10d4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    10d7:	08 c8                	or     al,cl
    10d9:	06                   	push   es
    10da:	ca 3d 02             	retf   0x23d
    10dd:	02 00                	add    al,BYTE PTR [eax]
    10df:	01 01                	add    DWORD PTR [ecx],eax
    10e1:	cb                   	retf   
    10e2:	00 00                	add    BYTE PTR [eax],al
    10e4:	00 02                	add    BYTE PTR [edx],al
    10e6:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    10ec:	01 fb                	add    ebx,edi
    10ee:	0e                   	push   cs
    10ef:	0d 00 01 01 01       	or     eax,0x1010100
    10f4:	01 00                	add    DWORD PTR [eax],eax
    10f6:	00 00                	add    BYTE PTR [eax],al
    10f8:	01 00                	add    DWORD PTR [eax],eax
    10fa:	00 01                	add    BYTE PTR [ecx],al
    10fc:	73 72                	jae    1170 <sysEnter_Vector-0x12ee90>
    10fe:	63 2f                	arpl   WORD PTR [edi],bp
    1100:	73 74                	jae    1176 <sysEnter_Vector-0x12ee8a>
    1102:	72 69                	jb     116d <sysEnter_Vector-0x12ee93>
    1104:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1105:	67 73 00             	addr16 jae 1108 <sysEnter_Vector-0x12eef8>
    1108:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    110f:	00 2f                	add    BYTE PTR [edi],ch
    1111:	68 6f 6d 65 2f       	push   0x2f656d6f
    1116:	79 6f                	jns    1187 <sysEnter_Vector-0x12ee79>
    1118:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    111f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1122:	73 73                	jae    1197 <sysEnter_Vector-0x12ee69>
    1124:	2f                   	das    
    1125:	6c                   	ins    BYTE PTR es:[edi],dx
    1126:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    112d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1133:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1139:	78 2d                	js     1168 <sysEnter_Vector-0x12ee98>
    113b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    113d:	75 2f                	jne    116e <sysEnter_Vector-0x12ee92>
    113f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1144:	2f                   	das    
    1145:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    114c:	00 00                	add    BYTE PTR [eax],al
    114e:	73 74                	jae    11c4 <sysEnter_Vector-0x12ee3c>
    1150:	72 69                	jb     11bb <sysEnter_Vector-0x12ee45>
    1152:	73 6e                	jae    11c2 <sysEnter_Vector-0x12ee3e>
    1154:	75 6d                	jne    11c3 <sysEnter_Vector-0x12ee3d>
    1156:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1159:	01 00                	add    DWORD PTR [eax],eax
    115b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    115e:	6c                   	ins    BYTE PTR es:[edi],dx
    115f:	6c                   	ins    BYTE PTR es:[edi],dx
    1160:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1161:	63 2e                	arpl   WORD PTR [esi],bp
    1163:	68 00 02 00 00       	push   0x200
    1168:	6c                   	ins    BYTE PTR es:[edi],dx
    1169:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1170:	4f                   	dec    edi
    1171:	53                   	push   ebx
    1172:	2e                   	cs
    1173:	68 00 02 00 00       	push   0x200
    1178:	73 74                	jae    11ee <sysEnter_Vector-0x12ee12>
    117a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1181:	63 
    1182:	2e                   	cs
    1183:	68 00 03 00 00       	push   0x300
    1188:	00 00                	add    BYTE PTR [eax],al
    118a:	05 02 0c 18 00       	add    eax,0x180c02
    118f:	30 1a                	xor    BYTE PTR [edx],bl
    1191:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1194:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1197:	06                   	push   es
    1198:	66                   	data16
    1199:	00 02                	add    BYTE PTR [edx],al
    119b:	04 02                	add    al,0x2
    119d:	66 06                	pushw  es
    119f:	75 59                	jne    11fa <sysEnter_Vector-0x12ee06>
    11a1:	31 f3                	xor    ebx,esi
    11a3:	76 2f                	jbe    11d4 <sysEnter_Vector-0x12ee2c>
    11a5:	08 e5                	or     ch,ah
    11a7:	72 08                	jb     11b1 <sysEnter_Vector-0x12ee4f>
    11a9:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    11ac:	02 00                	add    al,BYTE PTR [eax]
    11ae:	01 01                	add    DWORD PTR [ecx],eax
    11b0:	94                   	xchg   esp,eax
    11b1:	00 00                	add    BYTE PTR [eax],al
    11b3:	00 02                	add    BYTE PTR [edx],al
    11b5:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
    11b9:	00 01                	add    BYTE PTR [ecx],al
    11bb:	01 fb                	add    ebx,edi
    11bd:	0e                   	push   cs
    11be:	0d 00 01 01 01       	or     eax,0x1010100
    11c3:	01 00                	add    DWORD PTR [eax],eax
    11c5:	00 00                	add    BYTE PTR [eax],al
    11c7:	01 00                	add    DWORD PTR [eax],eax
    11c9:	00 01                	add    BYTE PTR [ecx],al
    11cb:	73 72                	jae    123f <sysEnter_Vector-0x12edc1>
    11cd:	63 2f                	arpl   WORD PTR [edi],bp
    11cf:	73 74                	jae    1245 <sysEnter_Vector-0x12edbb>
    11d1:	72 69                	jb     123c <sysEnter_Vector-0x12edc4>
    11d3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11d4:	67 73 00             	addr16 jae 11d7 <sysEnter_Vector-0x12ee29>
    11d7:	2f                   	das    
    11d8:	68 6f 6d 65 2f       	push   0x2f656d6f
    11dd:	79 6f                	jns    124e <sysEnter_Vector-0x12edb2>
    11df:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11e6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11e9:	73 73                	jae    125e <sysEnter_Vector-0x12eda2>
    11eb:	2f                   	das    
    11ec:	6c                   	ins    BYTE PTR es:[edi],dx
    11ed:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11f4:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11fa:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1200:	78 2d                	js     122f <sysEnter_Vector-0x12edd1>
    1202:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1204:	75 2f                	jne    1235 <sysEnter_Vector-0x12edcb>
    1206:	35 2e 33 2e 30       	xor    eax,0x302e332e
    120b:	2f                   	das    
    120c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1213:	00 00                	add    BYTE PTR [eax],al
    1215:	73 74                	jae    128b <sysEnter_Vector-0x12ed75>
    1217:	72 6c                	jb     1285 <sysEnter_Vector-0x12ed7b>
    1219:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    121b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    121e:	01 00                	add    DWORD PTR [eax],eax
    1220:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1223:	64                   	fs
    1224:	64                   	fs
    1225:	65                   	gs
    1226:	66                   	data16
    1227:	2e                   	cs
    1228:	68 00 02 00 00       	push   0x200
    122d:	00 00                	add    BYTE PTR [eax],al
    122f:	05 02 98 18 00       	add    eax,0x189802
    1234:	30 14 f3             	xor    BYTE PTR [ebx+esi*8],dl
    1237:	75 2f                	jne    1268 <sysEnter_Vector-0x12ed98>
    1239:	49                   	dec    ecx
    123a:	e6 3d                	out    0x3d,al
    123c:	30 f3                	xor    bl,dh
    123e:	75 2f                	jne    126f <sysEnter_Vector-0x12ed91>
    1240:	49                   	dec    ecx
    1241:	e6 3d                	out    0x3d,al
    1243:	02 02                	add    al,BYTE PTR [edx]
    1245:	00 01                	add    BYTE PTR [ecx],al
    1247:	01 c1                	add    ecx,eax
    1249:	00 00                	add    BYTE PTR [eax],al
    124b:	00 02                	add    BYTE PTR [edx],al
    124d:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1250:	00 00                	add    BYTE PTR [eax],al
    1252:	01 01                	add    DWORD PTR [ecx],eax
    1254:	fb                   	sti    
    1255:	0e                   	push   cs
    1256:	0d 00 01 01 01       	or     eax,0x1010100
    125b:	01 00                	add    DWORD PTR [eax],eax
    125d:	00 00                	add    BYTE PTR [eax],al
    125f:	01 00                	add    DWORD PTR [eax],eax
    1261:	00 01                	add    BYTE PTR [ecx],al
    1263:	73 72                	jae    12d7 <sysEnter_Vector-0x12ed29>
    1265:	63 2f                	arpl   WORD PTR [edi],bp
    1267:	73 74                	jae    12dd <sysEnter_Vector-0x12ed23>
    1269:	72 69                	jb     12d4 <sysEnter_Vector-0x12ed2c>
    126b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    126c:	67 73 00             	addr16 jae 126f <sysEnter_Vector-0x12ed91>
    126f:	2f                   	das    
    1270:	68 6f 6d 65 2f       	push   0x2f656d6f
    1275:	79 6f                	jns    12e6 <sysEnter_Vector-0x12ed1a>
    1277:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    127e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1281:	73 73                	jae    12f6 <sysEnter_Vector-0x12ed0a>
    1283:	2f                   	das    
    1284:	6c                   	ins    BYTE PTR es:[edi],dx
    1285:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    128c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1292:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1298:	78 2d                	js     12c7 <sysEnter_Vector-0x12ed39>
    129a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    129c:	75 2f                	jne    12cd <sysEnter_Vector-0x12ed33>
    129e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    12a3:	2f                   	das    
    12a4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    12ab:	00 00                	add    BYTE PTR [eax],al
    12ad:	73 74                	jae    1323 <sysEnter_Vector-0x12ecdd>
    12af:	72 6e                	jb     131f <sysEnter_Vector-0x12ece1>
    12b1:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    12b4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    12b7:	01 00                	add    DWORD PTR [eax],eax
    12b9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    12bc:	64                   	fs
    12bd:	64                   	fs
    12be:	65                   	gs
    12bf:	66                   	data16
    12c0:	2e                   	cs
    12c1:	68 00 02 00 00       	push   0x200
    12c6:	00 00                	add    BYTE PTR [eax],al
    12c8:	05 02 fc 18 00       	add    eax,0x18fc02
    12cd:	30 03                	xor    BYTE PTR [ebx],al
    12cf:	0c 01                	or     al,0x1
    12d1:	c9                   	leave  
    12d2:	2f                   	das    
    12d3:	f3 00 02             	repz add BYTE PTR [edx],al
    12d6:	04 01                	add    al,0x1
    12d8:	06                   	push   es
    12d9:	f2 00 02             	repnz add BYTE PTR [edx],al
    12dc:	04 02                	add    al,0x2
    12de:	74 06                	je     12e6 <sysEnter_Vector-0x12ed1a>
    12e0:	75 9f                	jne    1281 <sysEnter_Vector-0x12ed7f>
    12e2:	70 00                	jo     12e4 <sysEnter_Vector-0x12ed1c>
    12e4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12e7:	06                   	push   es
    12e8:	ba 06 6b 59 31       	mov    edx,0x31596b06
    12ed:	c9                   	leave  
    12ee:	2f                   	das    
    12ef:	f3 00 02             	repz add BYTE PTR [edx],al
    12f2:	04 01                	add    al,0x1
    12f4:	06                   	push   es
    12f5:	f2 00 02             	repnz add BYTE PTR [edx],al
    12f8:	04 02                	add    al,0x2
    12fa:	74 06                	je     1302 <sysEnter_Vector-0x12ecfe>
    12fc:	75 9f                	jne    129d <sysEnter_Vector-0x12ed63>
    12fe:	70 00                	jo     1300 <sysEnter_Vector-0x12ed00>
    1300:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1303:	06                   	push   es
    1304:	ba 06 6b 59 02       	mov    edx,0x2596b06
    1309:	02 00                	add    al,BYTE PTR [eax]
    130b:	01 01                	add    DWORD PTR [ecx],eax
    130d:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1312:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1315:	00 00                	add    BYTE PTR [eax],al
    1317:	01 01                	add    DWORD PTR [ecx],eax
    1319:	fb                   	sti    
    131a:	0e                   	push   cs
    131b:	0d 00 01 01 01       	or     eax,0x1010100
    1320:	01 00                	add    DWORD PTR [eax],eax
    1322:	00 00                	add    BYTE PTR [eax],al
    1324:	01 00                	add    DWORD PTR [eax],eax
    1326:	00 01                	add    BYTE PTR [ecx],al
    1328:	73 72                	jae    139c <sysEnter_Vector-0x12ec64>
    132a:	63 2f                	arpl   WORD PTR [edi],bp
    132c:	73 74                	jae    13a2 <sysEnter_Vector-0x12ec5e>
    132e:	72 69                	jb     1399 <sysEnter_Vector-0x12ec67>
    1330:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1331:	67 73 00             	addr16 jae 1334 <sysEnter_Vector-0x12eccc>
    1334:	2f                   	das    
    1335:	68 6f 6d 65 2f       	push   0x2f656d6f
    133a:	79 6f                	jns    13ab <sysEnter_Vector-0x12ec55>
    133c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1343:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1346:	73 73                	jae    13bb <sysEnter_Vector-0x12ec45>
    1348:	2f                   	das    
    1349:	6c                   	ins    BYTE PTR es:[edi],dx
    134a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1351:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1357:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    135d:	78 2d                	js     138c <sysEnter_Vector-0x12ec74>
    135f:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1361:	75 2f                	jne    1392 <sysEnter_Vector-0x12ec6e>
    1363:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1368:	2f                   	das    
    1369:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1370:	00 00                	add    BYTE PTR [eax],al
    1372:	73 74                	jae    13e8 <sysEnter_Vector-0x12ec18>
    1374:	72 6e                	jb     13e4 <sysEnter_Vector-0x12ec1c>
    1376:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1379:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    137c:	01 00                	add    DWORD PTR [eax],eax
    137e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1381:	64                   	fs
    1382:	64                   	fs
    1383:	65                   	gs
    1384:	66                   	data16
    1385:	2e                   	cs
    1386:	68 00 02 00 00       	push   0x200
    138b:	00 00                	add    BYTE PTR [eax],al
    138d:	05 02 cc 19 00       	add    eax,0x19cc02
    1392:	30 03                	xor    BYTE PTR [ebx],al
    1394:	0d 01 f3 67 2f       	or     eax,0x2f67f301
    1399:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    139c:	00 02                	add    BYTE PTR [edx],al
    139e:	04 01                	add    al,0x1
    13a0:	06                   	push   es
    13a1:	66 06                	pushw  es
    13a3:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    13a8:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    13ad:	02 02                	add    al,BYTE PTR [edx]
    13af:	00 01                	add    BYTE PTR [ecx],al
    13b1:	01 49 01             	add    DWORD PTR [ecx+0x1],ecx
    13b4:	00 00                	add    BYTE PTR [eax],al
    13b6:	02 00                	add    al,BYTE PTR [eax]
    13b8:	9c                   	pushf  
    13b9:	00 00                	add    BYTE PTR [eax],al
    13bb:	00 01                	add    BYTE PTR [ecx],al
    13bd:	01 fb                	add    ebx,edi
    13bf:	0e                   	push   cs
    13c0:	0d 00 01 01 01       	or     eax,0x1010100
    13c5:	01 00                	add    DWORD PTR [eax],eax
    13c7:	00 00                	add    BYTE PTR [eax],al
    13c9:	01 00                	add    DWORD PTR [eax],eax
    13cb:	00 01                	add    BYTE PTR [ecx],al
    13cd:	73 72                	jae    1441 <sysEnter_Vector-0x12ebbf>
    13cf:	63 2f                	arpl   WORD PTR [edi],bp
    13d1:	73 74                	jae    1447 <sysEnter_Vector-0x12ebb9>
    13d3:	72 69                	jb     143e <sysEnter_Vector-0x12ebc2>
    13d5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13d6:	67 73 00             	addr16 jae 13d9 <sysEnter_Vector-0x12ec27>
    13d9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13e0:	00 2f                	add    BYTE PTR [edi],ch
    13e2:	68 6f 6d 65 2f       	push   0x2f656d6f
    13e7:	79 6f                	jns    1458 <sysEnter_Vector-0x12eba8>
    13e9:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13f0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13f3:	73 73                	jae    1468 <sysEnter_Vector-0x12eb98>
    13f5:	2f                   	das    
    13f6:	6c                   	ins    BYTE PTR es:[edi],dx
    13f7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    13fe:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1404:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    140a:	78 2d                	js     1439 <sysEnter_Vector-0x12ebc7>
    140c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    140e:	75 2f                	jne    143f <sysEnter_Vector-0x12ebc1>
    1410:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1415:	2f                   	das    
    1416:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    141d:	00 00                	add    BYTE PTR [eax],al
    141f:	73 74                	jae    1495 <sysEnter_Vector-0x12eb6b>
    1421:	72 6f                	jb     1492 <sysEnter_Vector-0x12eb6e>
    1423:	75 6c                	jne    1491 <sysEnter_Vector-0x12eb6f>
    1425:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1428:	01 00                	add    DWORD PTR [eax],eax
    142a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    142d:	6c                   	ins    BYTE PTR es:[edi],dx
    142e:	6c                   	ins    BYTE PTR es:[edi],dx
    142f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1430:	63 2e                	arpl   WORD PTR [esi],bp
    1432:	68 00 02 00 00       	push   0x200
    1437:	6c                   	ins    BYTE PTR es:[edi],dx
    1438:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    143f:	4f                   	dec    edi
    1440:	53                   	push   ebx
    1441:	2e                   	cs
    1442:	68 00 02 00 00       	push   0x200
    1447:	73 74                	jae    14bd <sysEnter_Vector-0x12eb43>
    1449:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1450:	63 
    1451:	2e                   	cs
    1452:	68 00 03 00 00       	push   0x300
    1457:	00 00                	add    BYTE PTR [eax],al
    1459:	05 02 4c 1a 00       	add    eax,0x1a4c02
    145e:	30 03                	xor    BYTE PTR [ebx],al
    1460:	3b 01                	cmp    eax,DWORD PTR [ecx]
    1462:	08 2f                	or     BYTE PTR [edi],ch
    1464:	40                   	inc    eax
    1465:	00 02                	add    BYTE PTR [edx],al
    1467:	04 01                	add    al,0x1
    1469:	7a 00                	jp     146b <sysEnter_Vector-0x12eb95>
    146b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    146e:	ad                   	lods   eax,DWORD PTR ds:[esi]
    146f:	59                   	pop    ecx
    1470:	59                   	pop    ecx
    1471:	75 c9                	jne    143c <sysEnter_Vector-0x12ebc4>
    1473:	59                   	pop    ecx
    1474:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1475:	00 02                	add    BYTE PTR [edx],al
    1477:	04 02                	add    al,0x2
    1479:	06                   	push   es
    147a:	66                   	data16
    147b:	00 02                	add    BYTE PTR [edx],al
    147d:	04 03                	add    al,0x3
    147f:	66 06                	pushw  es
    1481:	59                   	pop    ecx
    1482:	00 02                	add    BYTE PTR [edx],al
    1484:	04 01                	add    al,0x1
    1486:	06                   	push   es
    1487:	74 06                	je     148f <sysEnter_Vector-0x12eb71>
    1489:	75 91                	jne    141c <sysEnter_Vector-0x12ebe4>
    148b:	3d 76 67 00 02       	cmp    eax,0x2006776
    1490:	04 01                	add    al,0x1
    1492:	06                   	push   es
    1493:	58                   	pop    eax
    1494:	00 02                	add    BYTE PTR [edx],al
    1496:	04 02                	add    al,0x2
    1498:	74 00                	je     149a <sysEnter_Vector-0x12eb66>
    149a:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    149d:	58                   	pop    eax
    149e:	06                   	push   es
    149f:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    14a4:	9f                   	lahf   
    14a5:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    14a9:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14ac:	06                   	push   es
    14ad:	58                   	pop    eax
    14ae:	00 02                	add    BYTE PTR [edx],al
    14b0:	04 03                	add    al,0x3
    14b2:	58                   	pop    eax
    14b3:	00 02                	add    BYTE PTR [edx],al
    14b5:	04 04                	add    al,0x4
    14b7:	74 00                	je     14b9 <sysEnter_Vector-0x12eb47>
    14b9:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    14bc:	58                   	pop    eax
    14bd:	06                   	push   es
    14be:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    14c1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14c4:	06                   	push   es
    14c5:	66                   	data16
    14c6:	00 02                	add    BYTE PTR [edx],al
    14c8:	04 02                	add    al,0x2
    14ca:	58                   	pop    eax
    14cb:	00 02                	add    BYTE PTR [edx],al
    14cd:	04 03                	add    al,0x3
    14cf:	58                   	pop    eax
    14d0:	06                   	push   es
    14d1:	67 76 59             	addr16 jbe 152d <sysEnter_Vector-0x12ead3>
    14d4:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    14d8:	03 10                	add    edx,DWORD PTR [eax]
    14da:	ac                   	lods   al,BYTE PTR ds:[esi]
    14db:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    14de:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    14e1:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    14e4:	67 2f                	addr16 das 
    14e6:	67 00 02             	add    BYTE PTR [bp+si],al
    14e9:	04 01                	add    al,0x1
    14eb:	06                   	push   es
    14ec:	66                   	data16
    14ed:	00 02                	add    BYTE PTR [edx],al
    14ef:	04 02                	add    al,0x2
    14f1:	58                   	pop    eax
    14f2:	00 02                	add    BYTE PTR [edx],al
    14f4:	04 04                	add    al,0x4
    14f6:	3c 06                	cmp    al,0x6
    14f8:	59                   	pop    ecx
    14f9:	2f                   	das    
    14fa:	02 08                	add    cl,BYTE PTR [eax]
    14fc:	00 01                	add    BYTE PTR [ecx],al
    14fe:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1501:	00 00                	add    BYTE PTR [eax],al
    1503:	02 00                	add    al,BYTE PTR [eax]
    1505:	2d 00 00 00 01       	sub    eax,0x1000000
    150a:	01 fb                	add    ebx,edi
    150c:	0e                   	push   cs
    150d:	0d 00 01 01 01       	or     eax,0x1010100
    1512:	01 00                	add    DWORD PTR [eax],eax
    1514:	00 00                	add    BYTE PTR [eax],al
    1516:	01 00                	add    DWORD PTR [eax],eax
    1518:	00 01                	add    BYTE PTR [ecx],al
    151a:	73 72                	jae    158e <sysEnter_Vector-0x12ea72>
    151c:	63 2f                	arpl   WORD PTR [edi],bp
    151e:	73 74                	jae    1594 <sysEnter_Vector-0x12ea6c>
    1520:	72 69                	jb     158b <sysEnter_Vector-0x12ea75>
    1522:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1523:	67 73 00             	addr16 jae 1526 <sysEnter_Vector-0x12eada>
    1526:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1529:	72 70                	jb     159b <sysEnter_Vector-0x12ea65>
    152b:	61                   	popa   
    152c:	72 74                	jb     15a2 <sysEnter_Vector-0x12ea5e>
    152e:	73 2e                	jae    155e <sysEnter_Vector-0x12eaa2>
    1530:	63 00                	arpl   WORD PTR [eax],ax
    1532:	01 00                	add    DWORD PTR [eax],eax
    1534:	00 00                	add    BYTE PTR [eax],al
    1536:	00 05 02 cc 1b 00    	add    BYTE PTR ds:0x1bcc02,al
    153c:	30 13                	xor    BYTE PTR [ebx],dl
    153e:	c9                   	leave  
    153f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1540:	3d 02 02 00 01       	cmp    eax,0x1000202
    1545:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    1548:	00 00                	add    BYTE PTR [eax],al
    154a:	02 00                	add    al,BYTE PTR [eax]
    154c:	9c                   	pushf  
    154d:	00 00                	add    BYTE PTR [eax],al
    154f:	00 01                	add    BYTE PTR [ecx],al
    1551:	01 fb                	add    ebx,edi
    1553:	0e                   	push   cs
    1554:	0d 00 01 01 01       	or     eax,0x1010100
    1559:	01 00                	add    DWORD PTR [eax],eax
    155b:	00 00                	add    BYTE PTR [eax],al
    155d:	01 00                	add    DWORD PTR [eax],eax
    155f:	00 01                	add    BYTE PTR [ecx],al
    1561:	73 72                	jae    15d5 <sysEnter_Vector-0x12ea2b>
    1563:	63 2f                	arpl   WORD PTR [edi],bp
    1565:	73 74                	jae    15db <sysEnter_Vector-0x12ea25>
    1567:	72 69                	jb     15d2 <sysEnter_Vector-0x12ea2e>
    1569:	6e                   	outs   dx,BYTE PTR ds:[esi]
    156a:	67 73 00             	addr16 jae 156d <sysEnter_Vector-0x12ea93>
    156d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1574:	00 2f                	add    BYTE PTR [edi],ch
    1576:	68 6f 6d 65 2f       	push   0x2f656d6f
    157b:	79 6f                	jns    15ec <sysEnter_Vector-0x12ea14>
    157d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1584:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1587:	73 73                	jae    15fc <sysEnter_Vector-0x12ea04>
    1589:	2f                   	das    
    158a:	6c                   	ins    BYTE PTR es:[edi],dx
    158b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1592:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1598:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    159e:	78 2d                	js     15cd <sysEnter_Vector-0x12ea33>
    15a0:	67 6e                	outs   dx,BYTE PTR ds:[si]
    15a2:	75 2f                	jne    15d3 <sysEnter_Vector-0x12ea2d>
    15a4:	35 2e 33 2e 30       	xor    eax,0x302e332e
    15a9:	2f                   	das    
    15aa:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15b1:	00 00                	add    BYTE PTR [eax],al
    15b3:	73 74                	jae    1629 <sysEnter_Vector-0x12e9d7>
    15b5:	72 74                	jb     162b <sysEnter_Vector-0x12e9d5>
    15b7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15b8:	6c                   	ins    BYTE PTR es:[edi],dx
    15b9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    15bc:	01 00                	add    DWORD PTR [eax],eax
    15be:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    15c1:	6c                   	ins    BYTE PTR es:[edi],dx
    15c2:	6c                   	ins    BYTE PTR es:[edi],dx
    15c3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15c4:	63 2e                	arpl   WORD PTR [esi],bp
    15c6:	68 00 02 00 00       	push   0x200
    15cb:	6c                   	ins    BYTE PTR es:[edi],dx
    15cc:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    15d3:	4f                   	dec    edi
    15d4:	53                   	push   ebx
    15d5:	2e                   	cs
    15d6:	68 00 02 00 00       	push   0x200
    15db:	73 74                	jae    1651 <sysEnter_Vector-0x12e9af>
    15dd:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15e4:	63 
    15e5:	2e                   	cs
    15e6:	68 00 03 00 00       	push   0x300
    15eb:	00 00                	add    BYTE PTR [eax],al
    15ed:	05 02 ec 1b 00       	add    eax,0x1bec02
    15f2:	30 03                	xor    BYTE PTR [ebx],al
    15f4:	d7                   	xlat   BYTE PTR ds:[ebx]
    15f5:	00 01                	add    BYTE PTR [ecx],al
    15f7:	08 2f                	or     BYTE PTR [edi],ch
    15f9:	40                   	inc    eax
    15fa:	00 02                	add    BYTE PTR [edx],al
    15fc:	04 01                	add    al,0x1
    15fe:	7c 00                	jl     1600 <sysEnter_Vector-0x12ea00>
    1600:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1603:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1604:	59                   	pop    ecx
    1605:	59                   	pop    ecx
    1606:	75 c9                	jne    15d1 <sysEnter_Vector-0x12ea2f>
    1608:	59                   	pop    ecx
    1609:	ad                   	lods   eax,DWORD PTR ds:[esi]
    160a:	00 02                	add    BYTE PTR [edx],al
    160c:	04 02                	add    al,0x2
    160e:	06                   	push   es
    160f:	66                   	data16
    1610:	00 02                	add    BYTE PTR [edx],al
    1612:	04 03                	add    al,0x3
    1614:	66 06                	pushw  es
    1616:	59                   	pop    ecx
    1617:	00 02                	add    BYTE PTR [edx],al
    1619:	04 01                	add    al,0x1
    161b:	06                   	push   es
    161c:	74 06                	je     1624 <sysEnter_Vector-0x12e9dc>
    161e:	75 91                	jne    15b1 <sysEnter_Vector-0x12ea4f>
    1620:	3d 76 67 00 02       	cmp    eax,0x2006776
    1625:	04 01                	add    al,0x1
    1627:	06                   	push   es
    1628:	58                   	pop    eax
    1629:	00 02                	add    BYTE PTR [edx],al
    162b:	04 02                	add    al,0x2
    162d:	74 00                	je     162f <sysEnter_Vector-0x12e9d1>
    162f:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1632:	58                   	pop    eax
    1633:	06                   	push   es
    1634:	03 13                	add    edx,DWORD PTR [ebx]
    1636:	3c 00                	cmp    al,0x0
    1638:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    163b:	06                   	push   es
    163c:	66                   	data16
    163d:	00 02                	add    BYTE PTR [edx],al
    163f:	04 02                	add    al,0x2
    1641:	74 00                	je     1643 <sysEnter_Vector-0x12e9bd>
    1643:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1646:	06                   	push   es
    1647:	59                   	pop    ecx
    1648:	00 02                	add    BYTE PTR [edx],al
    164a:	04 04                	add    al,0x4
    164c:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1652:	f3 9f                	repz lahf 
    1654:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1658:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    165b:	06                   	push   es
    165c:	58                   	pop    eax
    165d:	00 02                	add    BYTE PTR [edx],al
    165f:	04 03                	add    al,0x3
    1661:	58                   	pop    eax
    1662:	00 02                	add    BYTE PTR [edx],al
    1664:	04 04                	add    al,0x4
    1666:	74 00                	je     1668 <sysEnter_Vector-0x12e998>
    1668:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    166b:	58                   	pop    eax
    166c:	06                   	push   es
    166d:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1670:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1673:	06                   	push   es
    1674:	66                   	data16
    1675:	00 02                	add    BYTE PTR [edx],al
    1677:	04 02                	add    al,0x2
    1679:	58                   	pop    eax
    167a:	00 02                	add    BYTE PTR [edx],al
    167c:	04 03                	add    al,0x3
    167e:	58                   	pop    eax
    167f:	06                   	push   es
    1680:	59                   	pop    ecx
    1681:	76 59                	jbe    16dc <sysEnter_Vector-0x12e924>
    1683:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1687:	03 10                	add    edx,DWORD PTR [eax]
    1689:	ac                   	lods   al,BYTE PTR ds:[esi]
    168a:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    168d:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1690:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1693:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1696:	06                   	push   es
    1697:	66                   	data16
    1698:	00 02                	add    BYTE PTR [edx],al
    169a:	04 02                	add    al,0x2
    169c:	74 00                	je     169e <sysEnter_Vector-0x12e962>
    169e:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    16a1:	58                   	pop    eax
    16a2:	06                   	push   es
    16a3:	4b                   	dec    ebx
    16a4:	67 2f                	addr16 das 
    16a6:	67 00 02             	add    BYTE PTR [bp+si],al
    16a9:	04 01                	add    al,0x1
    16ab:	06                   	push   es
    16ac:	66                   	data16
    16ad:	00 02                	add    BYTE PTR [edx],al
    16af:	04 02                	add    al,0x2
    16b1:	58                   	pop    eax
    16b2:	00 02                	add    BYTE PTR [edx],al
    16b4:	04 04                	add    al,0x4
    16b6:	3c 06                	cmp    al,0x6
    16b8:	59                   	pop    ecx
    16b9:	2f                   	das    
    16ba:	02 08                	add    cl,BYTE PTR [eax]
    16bc:	00 01                	add    BYTE PTR [ecx],al
    16be:	01 cf                	add    edi,ecx
    16c0:	00 00                	add    BYTE PTR [eax],al
    16c2:	00 02                	add    BYTE PTR [edx],al
    16c4:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    16ca:	01 fb                	add    ebx,edi
    16cc:	0e                   	push   cs
    16cd:	0d 00 01 01 01       	or     eax,0x1010100
    16d2:	01 00                	add    DWORD PTR [eax],eax
    16d4:	00 00                	add    BYTE PTR [eax],al
    16d6:	01 00                	add    DWORD PTR [eax],eax
    16d8:	00 01                	add    BYTE PTR [ecx],al
    16da:	73 72                	jae    174e <sysEnter_Vector-0x12e8b2>
    16dc:	63 2f                	arpl   WORD PTR [edi],bp
    16de:	73 74                	jae    1754 <sysEnter_Vector-0x12e8ac>
    16e0:	72 69                	jb     174b <sysEnter_Vector-0x12e8b5>
    16e2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16e3:	67 73 00             	addr16 jae 16e6 <sysEnter_Vector-0x12e91a>
    16e6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    16ed:	00 2f                	add    BYTE PTR [edi],ch
    16ef:	68 6f 6d 65 2f       	push   0x2f656d6f
    16f4:	79 6f                	jns    1765 <sysEnter_Vector-0x12e89b>
    16f6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    16fd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1700:	73 73                	jae    1775 <sysEnter_Vector-0x12e88b>
    1702:	2f                   	das    
    1703:	6c                   	ins    BYTE PTR es:[edi],dx
    1704:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    170b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1711:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1717:	78 2d                	js     1746 <sysEnter_Vector-0x12e8ba>
    1719:	67 6e                	outs   dx,BYTE PTR ds:[si]
    171b:	75 2f                	jne    174c <sysEnter_Vector-0x12e8b4>
    171d:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1722:	2f                   	das    
    1723:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    172a:	00 00                	add    BYTE PTR [eax],al
    172c:	73 74                	jae    17a2 <sysEnter_Vector-0x12e85e>
    172e:	72 74                	jb     17a4 <sysEnter_Vector-0x12e85c>
    1730:	72 69                	jb     179b <sysEnter_Vector-0x12e865>
    1732:	6d                   	ins    DWORD PTR es:[edi],dx
    1733:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1736:	01 00                	add    DWORD PTR [eax],eax
    1738:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    173b:	6c                   	ins    BYTE PTR es:[edi],dx
    173c:	6c                   	ins    BYTE PTR es:[edi],dx
    173d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    173e:	63 2e                	arpl   WORD PTR [esi],bp
    1740:	68 00 02 00 00       	push   0x200
    1745:	6c                   	ins    BYTE PTR es:[edi],dx
    1746:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    174d:	4f                   	dec    edi
    174e:	53                   	push   ebx
    174f:	2e                   	cs
    1750:	68 00 02 00 00       	push   0x200
    1755:	73 74                	jae    17cb <sysEnter_Vector-0x12e835>
    1757:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    175e:	63 
    175f:	2e                   	cs
    1760:	68 00 03 00 00       	push   0x300
    1765:	00 00                	add    BYTE PTR [eax],al
    1767:	05 02 88 1d 00       	add    eax,0x1d8802
    176c:	30 15 08 13 bf 30    	xor    BYTE PTR ds:0x30bf1308,dl
    1772:	48                   	dec    eax
    1773:	b3 08                	mov    bl,0x8
    1775:	9f                   	lahf   
    1776:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    177c:	06                   	push   es
    177d:	82                   	(bad)  
    177e:	06                   	push   es
    177f:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1780:	84 00                	test   BYTE PTR [eax],al
    1782:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1785:	06                   	push   es
    1786:	20 06                	and    BYTE PTR [esi],al
    1788:	08 ca                	or     dl,cl
    178a:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1790:	01 01                	add    DWORD PTR [ecx],eax
    1792:	c7 00 00 00 02 00    	mov    DWORD PTR [eax],0x20000
    1798:	94                   	xchg   esp,eax
    1799:	00 00                	add    BYTE PTR [eax],al
    179b:	00 01                	add    BYTE PTR [ecx],al
    179d:	01 fb                	add    ebx,edi
    179f:	0e                   	push   cs
    17a0:	0d 00 01 01 01       	or     eax,0x1010100
    17a5:	01 00                	add    DWORD PTR [eax],eax
    17a7:	00 00                	add    BYTE PTR [eax],al
    17a9:	01 00                	add    DWORD PTR [eax],eax
    17ab:	00 01                	add    BYTE PTR [ecx],al
    17ad:	73 72                	jae    1821 <sysEnter_Vector-0x12e7df>
    17af:	63 00                	arpl   WORD PTR [eax],ax
    17b1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17b8:	00 2f                	add    BYTE PTR [edi],ch
    17ba:	68 6f 6d 65 2f       	push   0x2f656d6f
    17bf:	79 6f                	jns    1830 <sysEnter_Vector-0x12e7d0>
    17c1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17c8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17cb:	73 73                	jae    1840 <sysEnter_Vector-0x12e7c0>
    17cd:	2f                   	das    
    17ce:	6c                   	ins    BYTE PTR es:[edi],dx
    17cf:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    17d6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    17dc:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    17e2:	78 2d                	js     1811 <sysEnter_Vector-0x12e7ef>
    17e4:	67 6e                	outs   dx,BYTE PTR ds:[si]
    17e6:	75 2f                	jne    1817 <sysEnter_Vector-0x12e7e9>
    17e8:	35 2e 33 2e 30       	xor    eax,0x302e332e
    17ed:	2f                   	das    
    17ee:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17f5:	00 00                	add    BYTE PTR [eax],al
    17f7:	73 74                	jae    186d <sysEnter_Vector-0x12e793>
    17f9:	72 73                	jb     186e <sysEnter_Vector-0x12e792>
    17fb:	74 72                	je     186f <sysEnter_Vector-0x12e791>
    17fd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1800:	01 00                	add    DWORD PTR [eax],eax
    1802:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1805:	6c                   	ins    BYTE PTR es:[edi],dx
    1806:	6c                   	ins    BYTE PTR es:[edi],dx
    1807:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1808:	63 2e                	arpl   WORD PTR [esi],bp
    180a:	68 00 02 00 00       	push   0x200
    180f:	6c                   	ins    BYTE PTR es:[edi],dx
    1810:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1817:	4f                   	dec    edi
    1818:	53                   	push   ebx
    1819:	2e                   	cs
    181a:	68 00 02 00 00       	push   0x200
    181f:	73 74                	jae    1895 <sysEnter_Vector-0x12e76b>
    1821:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1828:	63 
    1829:	2e                   	cs
    182a:	68 00 03 00 00       	push   0x300
    182f:	00 00                	add    BYTE PTR [eax],al
    1831:	05 02 40 1e 00       	add    eax,0x1e4002
    1836:	30 03                	xor    BYTE PTR [ebx],al
    1838:	33 01                	xor    eax,DWORD PTR [ecx]
    183a:	ec                   	in     al,dx
    183b:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1840:	75 5a                	jne    189c <sysEnter_Vector-0x12e764>
    1842:	08 3f                	or     BYTE PTR [edi],bh
    1844:	2c 23                	sub    al,0x23
    1846:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1849:	1e                   	push   ds
    184a:	00 02                	add    BYTE PTR [edx],al
    184c:	04 01                	add    al,0x1
    184e:	06                   	push   es
    184f:	4a                   	dec    edx
    1850:	06                   	push   es
    1851:	03 0f                	add    ecx,DWORD PTR [edi]
    1853:	9e                   	sahf   
    1854:	59                   	pop    ecx
    1855:	4d                   	dec    ebp
    1856:	c9                   	leave  
    1857:	d7                   	xlat   BYTE PTR ds:[ebx]
    1858:	02 02                	add    al,BYTE PTR [edx]
    185a:	00 01                	add    BYTE PTR [ecx],al
    185c:	01 30                	add    DWORD PTR [eax],esi
    185e:	03 00                	add    eax,DWORD PTR [eax]
    1860:	00 02                	add    BYTE PTR [edx],al
    1862:	00 cc                	add    ah,cl
    1864:	00 00                	add    BYTE PTR [eax],al
    1866:	00 01                	add    BYTE PTR [ecx],al
    1868:	01 fb                	add    ebx,edi
    186a:	0e                   	push   cs
    186b:	0d 00 01 01 01       	or     eax,0x1010100
    1870:	01 00                	add    DWORD PTR [eax],eax
    1872:	00 00                	add    BYTE PTR [eax],al
    1874:	01 00                	add    DWORD PTR [eax],eax
    1876:	00 01                	add    BYTE PTR [ecx],al
    1878:	73 72                	jae    18ec <sysEnter_Vector-0x12e714>
    187a:	63 00                	arpl   WORD PTR [eax],ax
    187c:	2f                   	das    
    187d:	68 6f 6d 65 2f       	push   0x2f656d6f
    1882:	79 6f                	jns    18f3 <sysEnter_Vector-0x12e70d>
    1884:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    188b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    188e:	73 73                	jae    1903 <sysEnter_Vector-0x12e6fd>
    1890:	2f                   	das    
    1891:	6c                   	ins    BYTE PTR es:[edi],dx
    1892:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1899:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    189f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    18a5:	78 2d                	js     18d4 <sysEnter_Vector-0x12e72c>
    18a7:	67 6e                	outs   dx,BYTE PTR ds:[si]
    18a9:	75 2f                	jne    18da <sysEnter_Vector-0x12e726>
    18ab:	35 2e 33 2e 30       	xor    eax,0x302e332e
    18b0:	2f                   	das    
    18b1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    18b8:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    18bb:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    18bf:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    18c2:	2e                   	cs
    18c3:	2f                   	das    
    18c4:	2e                   	cs
    18c5:	2e                   	cs
    18c6:	2f                   	das    
    18c7:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    18cb:	6a 2f                	push   0x2f
    18cd:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    18d0:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    18d7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18d8:	65                   	gs
    18d9:	6c                   	ins    BYTE PTR es:[edi],dx
    18da:	2f                   	das    
    18db:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    18e2:	00 00                	add    BYTE PTR [eax],al
    18e4:	74 69                	je     194f <sysEnter_Vector-0x12e6b1>
    18e6:	6d                   	ins    DWORD PTR es:[edi],dx
    18e7:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    18eb:	01 00                	add    DWORD PTR [eax],eax
    18ed:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    18f0:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    18f7:	63 
    18f8:	2e                   	cs
    18f9:	68 00 02 00 00       	push   0x200
    18fe:	74 69                	je     1969 <sysEnter_Vector-0x12e697>
    1900:	6d                   	ins    DWORD PTR es:[edi],dx
    1901:	65                   	gs
    1902:	2e                   	cs
    1903:	68 00 03 00 00       	push   0x300
    1908:	6d                   	ins    DWORD PTR es:[edi],dx
    1909:	61                   	popa   
    190a:	6c                   	ins    BYTE PTR es:[edi],dx
    190b:	6c                   	ins    BYTE PTR es:[edi],dx
    190c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    190d:	63 2e                	arpl   WORD PTR [esi],bp
    190f:	68 00 03 00 00       	push   0x300
    1914:	6c                   	ins    BYTE PTR es:[edi],dx
    1915:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    191c:	4f                   	dec    edi
    191d:	53                   	push   ebx
    191e:	2e                   	cs
    191f:	68 00 03 00 00       	push   0x300
    1924:	73 79                	jae    199f <sysEnter_Vector-0x12e661>
    1926:	73 63                	jae    198b <sysEnter_Vector-0x12e675>
    1928:	61                   	popa   
    1929:	6c                   	ins    BYTE PTR es:[edi],dx
    192a:	6c                   	ins    BYTE PTR es:[edi],dx
    192b:	73 2e                	jae    195b <sysEnter_Vector-0x12e6a5>
    192d:	68 00 04 00 00       	push   0x400
    1932:	00 00                	add    BYTE PTR [eax],al
    1934:	05 02 cc 1e 00       	add    eax,0x1ecc02
    1939:	30 03                	xor    BYTE PTR [ebx],al
    193b:	16                   	push   ss
    193c:	01 08                	add    DWORD PTR [eax],ecx
    193e:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1941:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1947:	76 02                	jbe    194b <sysEnter_Vector-0x12e6b5>
    1949:	24 13                	and    al,0x13
    194b:	08 22                	or     BYTE PTR [edx],ah
    194d:	02 2e                	add    ch,BYTE PTR [esi]
    194f:	13 02                	adc    eax,DWORD PTR [edx]
    1951:	2f                   	das    
    1952:	13 08                	adc    ecx,DWORD PTR [eax]
    1954:	67 02 2d             	add    ch,BYTE PTR [di]
    1957:	13 2f                	adc    ebp,DWORD PTR [edi]
    1959:	00 02                	add    BYTE PTR [edx],al
    195b:	04 01                	add    al,0x1
    195d:	06                   	push   es
    195e:	9e                   	sahf   
    195f:	00 02                	add    BYTE PTR [edx],al
    1961:	04 04                	add    al,0x4
    1963:	02 23                	add    ah,BYTE PTR [ebx]
    1965:	12 00                	adc    al,BYTE PTR [eax]
    1967:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    196e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1971:	74 00                	je     1973 <sysEnter_Vector-0x12e68d>
    1973:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1976:	58                   	pop    eax
    1977:	00 02                	add    BYTE PTR [edx],al
    1979:	04 08                	add    al,0x8
    197b:	06                   	push   es
    197c:	3d 48 00 02 04       	cmp    eax,0x4020048
    1981:	01 06                	add    DWORD PTR [esi],eax
    1983:	9e                   	sahf   
    1984:	00 02                	add    BYTE PTR [edx],al
    1986:	04 04                	add    al,0x4
    1988:	02 23                	add    ah,BYTE PTR [ebx]
    198a:	12 00                	adc    al,BYTE PTR [eax]
    198c:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1993:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1996:	74 00                	je     1998 <sysEnter_Vector-0x12e668>
    1998:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    199b:	58                   	pop    eax
    199c:	06                   	push   es
    199d:	94                   	xchg   esp,eax
    199e:	e5 91                	in     eax,0x91
    19a0:	9f                   	lahf   
    19a1:	59                   	pop    ecx
    19a2:	00 02                	add    BYTE PTR [edx],al
    19a4:	04 01                	add    al,0x1
    19a6:	06                   	push   es
    19a7:	9e                   	sahf   
    19a8:	00 02                	add    BYTE PTR [edx],al
    19aa:	04 04                	add    al,0x4
    19ac:	02 23                	add    ah,BYTE PTR [ebx]
    19ae:	12 00                	adc    al,BYTE PTR [eax]
    19b0:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19b7:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19ba:	74 00                	je     19bc <sysEnter_Vector-0x12e644>
    19bc:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19bf:	58                   	pop    eax
    19c0:	00 02                	add    BYTE PTR [edx],al
    19c2:	04 08                	add    al,0x8
    19c4:	06                   	push   es
    19c5:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    19cb:	01 06                	add    DWORD PTR [esi],eax
    19cd:	9e                   	sahf   
    19ce:	00 02                	add    BYTE PTR [edx],al
    19d0:	04 04                	add    al,0x4
    19d2:	02 23                	add    ah,BYTE PTR [ebx]
    19d4:	12 00                	adc    al,BYTE PTR [eax]
    19d6:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19dd:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19e0:	74 00                	je     19e2 <sysEnter_Vector-0x12e61e>
    19e2:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19e5:	58                   	pop    eax
    19e6:	06                   	push   es
    19e7:	08 f6                	or     dh,dh
    19e9:	d7                   	xlat   BYTE PTR ds:[ebx]
    19ea:	9f                   	lahf   
    19eb:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    19f0:	08 16                	or     BYTE PTR [esi],dl
    19f2:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
    19f5:	4b                   	dec    ebx
    19f6:	5b                   	pop    ebx
    19f7:	f5                   	cmc    
    19f8:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    19fe:	30 08                	xor    BYTE PTR [eax],cl
    1a00:	44                   	inc    esp
    1a01:	02 2e                	add    ch,BYTE PTR [esi]
    1a03:	13 02                	adc    eax,DWORD PTR [edx]
    1a05:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1a07:	91                   	xchg   ecx,eax
    1a08:	c9                   	leave  
    1a09:	e6 02                	out    0x2,al
    1a0b:	2f                   	das    
    1a0c:	13 02                	adc    eax,DWORD PTR [edx]
    1a0e:	3c 13                	cmp    al,0x13
    1a10:	9f                   	lahf   
    1a11:	e5 e6                	in     eax,0xe6
    1a13:	08 c9                	or     cl,cl
    1a15:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1a18:	9f                   	lahf   
    1a19:	e5 4c                	in     eax,0x4c
    1a1b:	02 29                	add    ch,BYTE PTR [ecx]
    1a1d:	13 02                	adc    eax,DWORD PTR [edx]
    1a1f:	2b 13                	sub    edx,DWORD PTR [ebx]
    1a21:	9f                   	lahf   
    1a22:	e5 e6                	in     eax,0xe6
    1a24:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1a29:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1a2e:	06                   	push   es
    1a2f:	c8 00 02 04          	enter  0x200,0x4
    1a33:	04 02                	add    al,0x2
    1a35:	2c 12                	sub    al,0x12
    1a37:	00 02                	add    BYTE PTR [edx],al
    1a39:	04 05                	add    al,0x5
    1a3b:	02 2f                	add    ch,BYTE PTR [edi]
    1a3d:	12 00                	adc    al,BYTE PTR [eax]
    1a3f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a42:	74 00                	je     1a44 <sysEnter_Vector-0x12e5bc>
    1a44:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a47:	58                   	pop    eax
    1a48:	06                   	push   es
    1a49:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1a4f:	04 01                	add    al,0x1
    1a51:	06                   	push   es
    1a52:	c8 00 02 04          	enter  0x200,0x4
    1a56:	04 02                	add    al,0x2
    1a58:	2c 12                	sub    al,0x12
    1a5a:	00 02                	add    BYTE PTR [edx],al
    1a5c:	04 05                	add    al,0x5
    1a5e:	02 2f                	add    ch,BYTE PTR [edi]
    1a60:	12 00                	adc    al,BYTE PTR [eax]
    1a62:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a65:	74 00                	je     1a67 <sysEnter_Vector-0x12e599>
    1a67:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a6a:	58                   	pop    eax
    1a6b:	00 02                	add    BYTE PTR [edx],al
    1a6d:	04 08                	add    al,0x8
    1a6f:	06                   	push   es
    1a70:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1a76:	00 02                	add    BYTE PTR [edx],al
    1a78:	04 01                	add    al,0x1
    1a7a:	06                   	push   es
    1a7b:	c8 00 02 04          	enter  0x200,0x4
    1a7f:	04 02                	add    al,0x2
    1a81:	2c 12                	sub    al,0x12
    1a83:	00 02                	add    BYTE PTR [edx],al
    1a85:	04 05                	add    al,0x5
    1a87:	02 2f                	add    ch,BYTE PTR [edi]
    1a89:	12 00                	adc    al,BYTE PTR [eax]
    1a8b:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a8e:	74 00                	je     1a90 <sysEnter_Vector-0x12e570>
    1a90:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a93:	58                   	pop    eax
    1a94:	06                   	push   es
    1a95:	08 f9                	or     cl,bh
    1a97:	bb 75 00 02 04       	mov    ebx,0x4020075
    1a9c:	01 06                	add    DWORD PTR [esi],eax
    1a9e:	08 2e                	or     BYTE PTR [esi],ch
    1aa0:	06                   	push   es
    1aa1:	9f                   	lahf   
    1aa2:	75 75                	jne    1b19 <sysEnter_Vector-0x12e4e7>
    1aa4:	7b d8                	jnp    1a7e <sysEnter_Vector-0x12e582>
    1aa6:	00 02                	add    BYTE PTR [edx],al
    1aa8:	04 01                	add    al,0x1
    1aaa:	06                   	push   es
    1aab:	c8 06 75 e5          	enter  0x7506,0xe5
    1aaf:	00 02                	add    BYTE PTR [edx],al
    1ab1:	04 01                	add    al,0x1
    1ab3:	06                   	push   es
    1ab4:	02 22                	add    ah,BYTE PTR [edx]
    1ab6:	12 06                	adc    al,BYTE PTR [esi]
    1ab8:	4b                   	dec    ebx
    1ab9:	00 02                	add    BYTE PTR [edx],al
    1abb:	04 01                	add    al,0x1
    1abd:	06                   	push   es
    1abe:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1ac4:	02 22                	add    ah,BYTE PTR [edx]
    1ac6:	12 00                	adc    al,BYTE PTR [eax]
    1ac8:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1acb:	74 00                	je     1acd <sysEnter_Vector-0x12e533>
    1acd:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ad0:	58                   	pop    eax
    1ad1:	00 02                	add    BYTE PTR [edx],al
    1ad3:	04 06                	add    al,0x6
    1ad5:	06                   	push   es
    1ad6:	59                   	pop    ecx
    1ad7:	00 02                	add    BYTE PTR [edx],al
    1ad9:	04 01                	add    al,0x1
    1adb:	06                   	push   es
    1adc:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1adf:	00 02                	add    BYTE PTR [edx],al
    1ae1:	04 03                	add    al,0x3
    1ae3:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1ae6:	00 02                	add    BYTE PTR [edx],al
    1ae8:	04 04                	add    al,0x4
    1aea:	74 00                	je     1aec <sysEnter_Vector-0x12e514>
    1aec:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1aef:	58                   	pop    eax
    1af0:	00 02                	add    BYTE PTR [edx],al
    1af2:	04 06                	add    al,0x6
    1af4:	06                   	push   es
    1af5:	59                   	pop    ecx
    1af6:	00 02                	add    BYTE PTR [edx],al
    1af8:	04 01                	add    al,0x1
    1afa:	06                   	push   es
    1afb:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1afe:	00 02                	add    BYTE PTR [edx],al
    1b00:	04 03                	add    al,0x3
    1b02:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1b05:	00 02                	add    BYTE PTR [edx],al
    1b07:	04 04                	add    al,0x4
    1b09:	74 00                	je     1b0b <sysEnter_Vector-0x12e4f5>
    1b0b:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b0e:	58                   	pop    eax
    1b0f:	00 02                	add    BYTE PTR [edx],al
    1b11:	04 06                	add    al,0x6
    1b13:	06                   	push   es
    1b14:	5a                   	pop    edx
    1b15:	00 02                	add    BYTE PTR [edx],al
    1b17:	04 06                	add    al,0x6
    1b19:	c9                   	leave  
    1b1a:	2f                   	das    
    1b1b:	00 02                	add    BYTE PTR [edx],al
    1b1d:	04 01                	add    al,0x1
    1b1f:	06                   	push   es
    1b20:	9e                   	sahf   
    1b21:	00 02                	add    BYTE PTR [edx],al
    1b23:	04 04                	add    al,0x4
    1b25:	02 23                	add    ah,BYTE PTR [ebx]
    1b27:	12 00                	adc    al,BYTE PTR [eax]
    1b29:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1b30:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b33:	74 00                	je     1b35 <sysEnter_Vector-0x12e4cb>
    1b35:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1b38:	58                   	pop    eax
    1b39:	00 02                	add    BYTE PTR [edx],al
    1b3b:	04 08                	add    al,0x8
    1b3d:	06                   	push   es
    1b3e:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1b41:	e8 bb 00 02 04       	call   4021c01 <sysEnter_Vector+0x3ef1c01>
    1b46:	01 06                	add    DWORD PTR [esi],eax
    1b48:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1b4d:	02 31                	add    dh,BYTE PTR [ecx]
    1b4f:	14 02                	adc    al,0x2
    1b51:	2c 14                	sub    al,0x14
    1b53:	00 02                	add    BYTE PTR [edx],al
    1b55:	04 01                	add    al,0x1
    1b57:	06                   	push   es
    1b58:	02 29                	add    ch,BYTE PTR [ecx]
    1b5a:	12 06                	adc    al,BYTE PTR [esi]
    1b5c:	4b                   	dec    ebx
    1b5d:	bd 00 02 04 01       	mov    ebp,0x1040200
    1b62:	06                   	push   es
    1b63:	ba 06 08 5a 4c       	mov    edx,0x4c5a0806
    1b68:	f4                   	hlt    
    1b69:	9f                   	lahf   
    1b6a:	ae                   	scas   al,BYTE PTR es:[edi]
    1b6b:	77 00                	ja     1b6d <sysEnter_Vector-0x12e493>
    1b6d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b70:	06                   	push   es
    1b71:	82                   	(bad)  
    1b72:	06                   	push   es
    1b73:	4b                   	dec    ebx
    1b74:	68 00 02 04 01       	push   0x1040200
    1b79:	06                   	push   es
    1b7a:	66 06                	pushw  es
    1b7c:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    1b82:	08 f3                	or     bl,dh
    1b84:	67 08 14             	or     BYTE PTR [si],dl
    1b87:	00 02                	add    BYTE PTR [edx],al
    1b89:	04 01                	add    al,0x1
    1b8b:	e5 02                	in     eax,0x2
    1b8d:	07                   	pop    es
    1b8e:	00 01                	add    BYTE PTR [ecx],al
    1b90:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
  10:	6f                   	outs   dx,DWORD PTR ds:[esi]
  11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
  13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
  18:	67 6e                	outs   dx,BYTE PTR ds:[si]
  1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
  21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
  23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
  25:	68 72 00 70 72       	push   0x72700072
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  2e:	73 45                	jae    75 <sysEnter_Vector-0x12ff8b>
  30:	6e                   	outs   dx,BYTE PTR ds:[esi]
  31:	76 70                	jbe    a3 <sysEnter_Vector-0x12ff5d>
  33:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  37:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  3c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  40:	73 69                	jae    ab <sysEnter_Vector-0x12ff55>
  42:	67 6e                	outs   dx,BYTE PTR ds:[si]
  44:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  49:	74 00                	je     4b <sysEnter_Vector-0x12ffb5>
  4b:	68 65 61 70 42       	push   0x42706165
  50:	61                   	popa   
  51:	73 65                	jae    b8 <sysEnter_Vector-0x12ff48>
  53:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
  57:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
  5b:	75 6e                	jne    cb <sysEnter_Vector-0x12ff35>
  5d:	73 69                	jae    c8 <sysEnter_Vector-0x12ff38>
  5f:	67 6e                	outs   dx,BYTE PTR ds:[si]
  61:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  66:	61                   	popa   
  67:	72 00                	jb     69 <sysEnter_Vector-0x12ff97>
  69:	75 69                	jne    d4 <sysEnter_Vector-0x12ff2c>
  6b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  6c:	74 33                	je     a1 <sysEnter_Vector-0x12ff5f>
  6e:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  71:	00 2f                	add    BYTE PTR [edi],ch
  73:	68 6f 6d 65 2f       	push   0x2f656d6f
  78:	79 6f                	jns    e9 <sysEnter_Vector-0x12ff17>
  7a:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  81:	6f                   	outs   dx,DWORD PTR ds:[esi]
  82:	73 2f                	jae    b3 <sysEnter_Vector-0x12ff4d>
  84:	61                   	popa   
  85:	70 72                	jo     f9 <sysEnter_Vector-0x12ff07>
  87:	6f                   	outs   dx,DWORD PTR ds:[esi]
  88:	6a 2f                	push   0x2f
  8a:	6c                   	ins    BYTE PTR es:[edi],dx
  8b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  92:	4f                   	dec    edi
  93:	53                   	push   ebx
  94:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  97:	6f                   	outs   dx,DWORD PTR ds:[esi]
  98:	6f                   	outs   dx,DWORD PTR ds:[esi]
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  9e:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
  a2:	75 62                	jne    106 <sysEnter_Vector-0x12fefa>
  a4:	6c                   	ins    BYTE PTR es:[edi],dx
  a5:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
  a9:	72 63                	jb     10e <sysEnter_Vector-0x12fef2>
  ab:	68 72 49 00 68       	push   0x68004972
  b0:	65                   	gs
  b1:	61                   	popa   
  b2:	70 43                	jo     f7 <sysEnter_Vector-0x12ff09>
  b4:	75 72                	jne    128 <sysEnter_Vector-0x12fed8>
  b6:	72 00                	jb     b8 <sysEnter_Vector-0x12ff48>
  b8:	2e                   	cs
  b9:	2e                   	cs
  ba:	2f                   	das    
  bb:	2e                   	cs
  bc:	2e                   	cs
  bd:	2f                   	das    
  be:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
  c2:	6a 2f                	push   0x2f
  c4:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
  c7:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
  ce:	63 2f                	arpl   WORD PTR [edi],bp
  d0:	73 74                	jae    146 <sysEnter_Vector-0x12feba>
  d2:	72 69                	jb     13d <sysEnter_Vector-0x12fec3>
  d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
  d5:	67 73 2f             	addr16 jae 107 <sysEnter_Vector-0x12fef9>
  d8:	73 74                	jae    14e <sysEnter_Vector-0x12feb2>
  da:	72 63                	jb     13f <sysEnter_Vector-0x12fec1>
  dc:	68 72 2e 63 00       	push   0x632e72
  e1:	73 69                	jae    14c <sysEnter_Vector-0x12feb4>
  e3:	7a 65                	jp     14a <sysEnter_Vector-0x12feb6>
  e5:	74 79                	je     160 <sysEnter_Vector-0x12fea0>
  e7:	70 65                	jo     14e <sysEnter_Vector-0x12feb2>
  e9:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ed:	72 74                	jb     163 <sysEnter_Vector-0x12fe9d>
  ef:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
  f2:	74 00                	je     f4 <sysEnter_Vector-0x12ff0c>
  f4:	47                   	inc    edi
  f5:	4e                   	dec    esi
  f6:	55                   	push   ebp
  f7:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  fa:	31 20                	xor    DWORD PTR [eax],esp
  fc:	35 2e 33 2e 30       	xor    eax,0x302e332e
 101:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
 107:	3d 69 6e 74 65       	cmp    eax,0x65746e69
 10c:	6c                   	ins    BYTE PTR es:[edi],dx
 10d:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
 113:	65                   	gs
 114:	3d 67 65 6e 65       	cmp    eax,0x656e6567
 119:	72 69                	jb     184 <sysEnter_Vector-0x12fe7c>
 11b:	63 20                	arpl   WORD PTR [eax],sp
 11d:	2d 6d 61 72 63       	sub    eax,0x6372616d
 122:	68 3d 70 65 6e       	push   0x6e65703d
 127:	74 69                	je     192 <sysEnter_Vector-0x12fe6e>
 129:	75 6d                	jne    198 <sysEnter_Vector-0x12fe68>
 12b:	70 72                	jo     19f <sysEnter_Vector-0x12fe61>
 12d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 12e:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
 134:	66                   	data16
 135:	72 65                	jb     19c <sysEnter_Vector-0x12fe64>
 137:	65                   	gs
 138:	73 74                	jae    1ae <sysEnter_Vector-0x12fe52>
 13a:	61                   	popa   
 13b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 13c:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
 143:	76 
 144:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 14b:	74 79                	je     1c6 <sysEnter_Vector-0x12fe3a>
 14d:	3d 68 69 64 64       	cmp    eax,0x64646968
 152:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 154:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 15a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 15d:	61                   	popa   
 15e:	70 45                	jo     1a5 <sysEnter_Vector-0x12fe5b>
 160:	6e                   	outs   dx,BYTE PTR ds:[esi]
 161:	64 00 63 68          	add    BYTE PTR fs:[ebx+0x68],ah
 165:	61                   	popa   
 166:	72 73                	jb     1db <sysEnter_Vector-0x12fe25>
 168:	00 2e                	add    BYTE PTR [esi],ch
 16a:	2e                   	cs
 16b:	2f                   	das    
 16c:	2e                   	cs
 16d:	2e                   	cs
 16e:	2f                   	das    
 16f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 173:	6a 2f                	push   0x2f
 175:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 178:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 17f:	63 2f                	arpl   WORD PTR [edi],bp
 181:	73 74                	jae    1f7 <sysEnter_Vector-0x12fe09>
 183:	72 69                	jb     1ee <sysEnter_Vector-0x12fe12>
 185:	6e                   	outs   dx,BYTE PTR ds:[esi]
 186:	67 73 2f             	addr16 jae 1b8 <sysEnter_Vector-0x12fe48>
 189:	73 74                	jae    1ff <sysEnter_Vector-0x12fe01>
 18b:	72 63                	jb     1f0 <sysEnter_Vector-0x12fe10>
 18d:	73 70                	jae    1ff <sysEnter_Vector-0x12fe01>
 18f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 190:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 193:	73 74                	jae    209 <sysEnter_Vector-0x12fdf7>
 195:	72 63                	jb     1fa <sysEnter_Vector-0x12fe06>
 197:	73 70                	jae    209 <sysEnter_Vector-0x12fdf7>
 199:	6e                   	outs   dx,BYTE PTR ds:[esi]
 19a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 19d:	72 63                	jb     202 <sysEnter_Vector-0x12fdfe>
 19f:	73 70                	jae    211 <sysEnter_Vector-0x12fdef>
 1a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a2:	49                   	dec    ecx
 1a3:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1a7:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
 1ae:	2e                   	cs
 1af:	2f                   	das    
 1b0:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1b4:	6a 2f                	push   0x2f
 1b6:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1b9:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c0:	63 2f                	arpl   WORD PTR [edi],bp
 1c2:	73 74                	jae    238 <sysEnter_Vector-0x12fdc8>
 1c4:	72 69                	jb     22f <sysEnter_Vector-0x12fdd1>
 1c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1c7:	67 73 2f             	addr16 jae 1f9 <sysEnter_Vector-0x12fe07>
 1ca:	73 74                	jae    240 <sysEnter_Vector-0x12fdc0>
 1cc:	72 74                	jb     242 <sysEnter_Vector-0x12fdbe>
 1ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1cf:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d2:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1d6:	74 73                	je     24b <sysEnter_Vector-0x12fdb5>
 1d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1db:	72 74                	jb     251 <sysEnter_Vector-0x12fdaf>
 1dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1de:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 1e1:	74 6f                	je     252 <sysEnter_Vector-0x12fdae>
 1e3:	61                   	popa   
 1e4:	49                   	dec    ecx
 1e5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 1e8:	63 2f                	arpl   WORD PTR [edi],bp
 1ea:	61                   	popa   
 1eb:	73 63                	jae    250 <sysEnter_Vector-0x12fdb0>
 1ed:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f5:	61                   	popa   
 1f6:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
 1f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1fa:	69 00 72 65 76 65    	imul   eax,DWORD PTR [eax],0x65766572
 200:	72 73                	jb     275 <sysEnter_Vector-0x12fd8b>
 202:	65                   	gs
 203:	49                   	dec    ecx
 204:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 207:	67 6e                	outs   dx,BYTE PTR ds:[si]
 209:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 20c:	6c                   	ins    BYTE PTR es:[edi],dx
 20d:	75 65                	jne    274 <sysEnter_Vector-0x12fd8c>
 20f:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 213:	74 50                	je     265 <sysEnter_Vector-0x12fd9b>
 215:	6f                   	outs   dx,DWORD PTR ds:[esi]
 216:	70 75                	jo     28d <sysEnter_Vector-0x12fd73>
 218:	6c                   	ins    BYTE PTR es:[edi],dx
 219:	61                   	popa   
 21a:	74 65                	je     281 <sysEnter_Vector-0x12fd7f>
 21c:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 220:	74 65                	je     287 <sysEnter_Vector-0x12fd79>
 222:	6e                   	outs   dx,BYTE PTR ds:[esi]
 223:	76 00                	jbe    225 <sysEnter_Vector-0x12fddb>
 225:	67                   	addr16
 226:	65                   	gs
 227:	74 65                	je     28e <sysEnter_Vector-0x12fd72>
 229:	6e                   	outs   dx,BYTE PTR ds:[esi]
 22a:	76 00                	jbe    22c <sysEnter_Vector-0x12fdd4>
 22c:	73 72                	jae    2a0 <sysEnter_Vector-0x12fd60>
 22e:	63 2f                	arpl   WORD PTR [edi],bp
 230:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 232:	76 69                	jbe    29d <sysEnter_Vector-0x12fd63>
 234:	72 6f                	jb     2a5 <sysEnter_Vector-0x12fd5b>
 236:	6e                   	outs   dx,BYTE PTR ds:[esi]
 237:	6d                   	ins    DWORD PTR es:[edi],dx
 238:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 23a:	74 2e                	je     26a <sysEnter_Vector-0x12fd96>
 23c:	63 00                	arpl   WORD PTR [eax],ax
 23e:	76 61                	jbe    2a1 <sysEnter_Vector-0x12fd5f>
 240:	72 6e                	jb     2b0 <sysEnter_Vector-0x12fd50>
 242:	61                   	popa   
 243:	6d                   	ins    DWORD PTR es:[edi],dx
 244:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
 248:	74 64                	je     2ae <sysEnter_Vector-0x12fd52>
 24a:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
 251:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 255:	53                   	push   ebx
 256:	43                   	inc    ebx
 257:	41                   	inc    ecx
 258:	4c                   	dec    esp
 259:	4c                   	dec    esp
 25a:	5f                   	pop    edi
 25b:	52                   	push   edx
 25c:	45                   	inc    ebp
 25d:	41                   	inc    ecx
 25e:	44                   	inc    esp
 25f:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 262:	69 74 65 00 53 59 53 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x43535953
 269:	43 
 26a:	41                   	inc    ecx
 26b:	4c                   	dec    esp
 26c:	4c                   	dec    esp
 26d:	5f                   	pop    edi
 26e:	50                   	push   eax
 26f:	49                   	dec    ecx
 270:	50                   	push   eax
 271:	45                   	inc    ebp
 272:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 275:	53                   	push   ebx
 276:	43                   	inc    ebx
 277:	41                   	inc    ecx
 278:	4c                   	dec    esp
 279:	4c                   	dec    esp
 27a:	5f                   	pop    edi
 27b:	4f                   	dec    edi
 27c:	50                   	push   eax
 27d:	45                   	inc    ebp
 27e:	4e                   	dec    esi
 27f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 282:	53                   	push   ebx
 283:	43                   	inc    ebx
 284:	41                   	inc    ecx
 285:	4c                   	dec    esp
 286:	4c                   	dec    esp
 287:	5f                   	pop    edi
 288:	4d                   	dec    ebp
 289:	41                   	inc    ecx
 28a:	53                   	push   ebx
 28b:	4b                   	dec    ebx
 28c:	53                   	push   ebx
 28d:	49                   	dec    ecx
 28e:	47                   	inc    edi
 28f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 292:	53                   	push   ebx
 293:	43                   	inc    ebx
 294:	41                   	inc    ecx
 295:	4c                   	dec    esp
 296:	4c                   	dec    esp
 297:	5f                   	pop    edi
 298:	47                   	inc    edi
 299:	45                   	inc    ebp
 29a:	54                   	push   esp
 29b:	44                   	inc    esp
 29c:	45                   	inc    ebp
 29d:	4e                   	dec    esi
 29e:	54                   	push   esp
 29f:	53                   	push   ebx
 2a0:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 2a3:	63 2f                	arpl   WORD PTR [edi],bp
 2a5:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 2ac:	53                   	push   ebx
 2ad:	59                   	pop    ecx
 2ae:	53                   	push   ebx
 2af:	43                   	inc    ebx
 2b0:	41                   	inc    ecx
 2b1:	4c                   	dec    esp
 2b2:	4c                   	dec    esp
 2b3:	5f                   	pop    edi
 2b4:	52                   	push   edx
 2b5:	45                   	inc    ebp
 2b6:	42                   	inc    edx
 2b7:	4f                   	dec    edi
 2b8:	4f                   	dec    edi
 2b9:	54                   	push   esp
 2ba:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2bd:	53                   	push   ebx
 2be:	43                   	inc    ebx
 2bf:	41                   	inc    ecx
 2c0:	4c                   	dec    esp
 2c1:	4c                   	dec    esp
 2c2:	5f                   	pop    edi
 2c3:	48                   	dec    eax
 2c4:	4c                   	dec    esp
 2c5:	54                   	push   esp
 2c6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2c9:	53                   	push   ebx
 2ca:	43                   	inc    ebx
 2cb:	41                   	inc    ecx
 2cc:	4c                   	dec    esp
 2cd:	4c                   	dec    esp
 2ce:	5f                   	pop    edi
 2cf:	45                   	inc    ebp
 2d0:	58                   	pop    eax
 2d1:	45                   	inc    ebp
 2d2:	43                   	inc    ebx
 2d3:	4e                   	dec    esi
 2d4:	45                   	inc    ebp
 2d5:	57                   	push   edi
 2d6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2d9:	53                   	push   ebx
 2da:	43                   	inc    ebx
 2db:	41                   	inc    ecx
 2dc:	4c                   	dec    esp
 2dd:	4c                   	dec    esp
 2de:	5f                   	pop    edi
 2df:	53                   	push   ebx
 2e0:	4c                   	dec    esp
 2e1:	45                   	inc    ebp
 2e2:	45                   	inc    ebp
 2e3:	50                   	push   eax
 2e4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e7:	53                   	push   ebx
 2e8:	43                   	inc    ebx
 2e9:	41                   	inc    ecx
 2ea:	4c                   	dec    esp
 2eb:	4c                   	dec    esp
 2ec:	5f                   	pop    edi
 2ed:	47                   	inc    edi
 2ee:	45                   	inc    ebp
 2ef:	54                   	push   esp
 2f0:	54                   	push   esp
 2f1:	49                   	dec    ecx
 2f2:	4d                   	dec    ebp
 2f3:	45                   	inc    ebp
 2f4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2f7:	53                   	push   ebx
 2f8:	43                   	inc    ebx
 2f9:	41                   	inc    ecx
 2fa:	4c                   	dec    esp
 2fb:	4c                   	dec    esp
 2fc:	5f                   	pop    edi
 2fd:	53                   	push   ebx
 2fe:	45                   	inc    ebp
 2ff:	54                   	push   esp
 300:	50                   	push   eax
 301:	52                   	push   edx
 302:	49                   	dec    ecx
 303:	4f                   	dec    edi
 304:	52                   	push   edx
 305:	49                   	dec    ecx
 306:	54                   	push   esp
 307:	59                   	pop    ecx
 308:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 30b:	53                   	push   ebx
 30c:	43                   	inc    ebx
 30d:	41                   	inc    ecx
 30e:	4c                   	dec    esp
 30f:	4c                   	dec    esp
 310:	5f                   	pop    edi
 311:	43                   	inc    ebx
 312:	4c                   	dec    esp
 313:	4f                   	dec    edi
 314:	53                   	push   ebx
 315:	45                   	inc    ebp
 316:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 319:	79 73                	jns    38e <sysEnter_Vector-0x12fc72>
 31b:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 31e:	6c                   	ins    BYTE PTR es:[edi],dx
 31f:	73 00                	jae    321 <sysEnter_Vector-0x12fcdf>
 321:	6c                   	ins    BYTE PTR es:[edi],dx
 322:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 324:	67 74 68             	addr16 je 38f <sysEnter_Vector-0x12fc71>
 327:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 32a:	61                   	popa   
 32b:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 32f:	53                   	push   ebx
 330:	43                   	inc    ebx
 331:	41                   	inc    ecx
 332:	4c                   	dec    esp
 333:	4c                   	dec    esp
 334:	5f                   	pop    edi
 335:	46                   	inc    esi
 336:	4f                   	dec    edi
 337:	52                   	push   edx
 338:	4b                   	dec    ebx
 339:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 33c:	53                   	push   ebx
 33d:	43                   	inc    ebx
 33e:	41                   	inc    ecx
 33f:	4c                   	dec    esp
 340:	4c                   	dec    esp
 341:	5f                   	pop    edi
 342:	53                   	push   ebx
 343:	54                   	push   esp
 344:	4f                   	dec    edi
 345:	50                   	push   eax
 346:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 349:	53                   	push   ebx
 34a:	43                   	inc    ebx
 34b:	41                   	inc    ecx
 34c:	4c                   	dec    esp
 34d:	4c                   	dec    esp
 34e:	5f                   	pop    edi
 34f:	50                   	push   eax
 350:	52                   	push   edx
 351:	49                   	dec    ecx
 352:	4e                   	dec    esi
 353:	54                   	push   esp
 354:	44                   	inc    esp
 355:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 358:	66                   	data16
 359:	66                   	data16
 35a:	65                   	gs
 35b:	72 43                	jb     3a0 <sysEnter_Vector-0x12fc60>
 35d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 35e:	75 6e                	jne    3ce <sysEnter_Vector-0x12fc32>
 360:	74 00                	je     362 <sysEnter_Vector-0x12fc9e>
 362:	53                   	push   ebx
 363:	59                   	pop    ecx
 364:	53                   	push   ebx
 365:	43                   	inc    ebx
 366:	41                   	inc    ecx
 367:	4c                   	dec    esp
 368:	4c                   	dec    esp
 369:	5f                   	pop    edi
 36a:	46                   	inc    esi
 36b:	52                   	push   edx
 36c:	45                   	inc    ebp
 36d:	45                   	inc    ebp
 36e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 371:	53                   	push   ebx
 372:	43                   	inc    ebx
 373:	41                   	inc    ecx
 374:	4c                   	dec    esp
 375:	4c                   	dec    esp
 376:	5f                   	pop    edi
 377:	45                   	inc    ebp
 378:	58                   	pop    eax
 379:	45                   	inc    ebp
 37a:	43                   	inc    ebx
 37b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 37e:	53                   	push   ebx
 37f:	43                   	inc    ebx
 380:	41                   	inc    ecx
 381:	4c                   	dec    esp
 382:	4c                   	dec    esp
 383:	5f                   	pop    edi
 384:	49                   	dec    ecx
 385:	4e                   	dec    esi
 386:	56                   	push   esi
 387:	41                   	inc    ecx
 388:	4c                   	dec    esp
 389:	49                   	dec    ecx
 38a:	44                   	inc    esp
 38b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 38e:	53                   	push   ebx
 38f:	43                   	inc    ebx
 390:	41                   	inc    ecx
 391:	4c                   	dec    esp
 392:	4c                   	dec    esp
 393:	5f                   	pop    edi
 394:	52                   	push   edx
 395:	45                   	inc    ebp
 396:	47                   	inc    edi
 397:	45                   	inc    ebp
 398:	58                   	pop    eax
 399:	49                   	dec    ecx
 39a:	54                   	push   esp
 39b:	48                   	dec    eax
 39c:	41                   	inc    ecx
 39d:	4e                   	dec    esi
 39e:	44                   	inc    esp
 39f:	4c                   	dec    esp
 3a0:	45                   	inc    ebp
 3a1:	52                   	push   edx
 3a2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3a5:	53                   	push   ebx
 3a6:	43                   	inc    ebx
 3a7:	41                   	inc    ecx
 3a8:	4c                   	dec    esp
 3a9:	4c                   	dec    esp
 3aa:	5f                   	pop    edi
 3ab:	47                   	inc    edi
 3ac:	45                   	inc    ebp
 3ad:	54                   	push   esp
 3ae:	54                   	push   esp
 3af:	49                   	dec    ecx
 3b0:	43                   	inc    ebx
 3b1:	4b                   	dec    ebx
 3b2:	53                   	push   ebx
 3b3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3b6:	53                   	push   ebx
 3b7:	43                   	inc    ebx
 3b8:	41                   	inc    ecx
 3b9:	4c                   	dec    esp
 3ba:	4c                   	dec    esp
 3bb:	5f                   	pop    edi
 3bc:	45                   	inc    ebp
 3bd:	4e                   	dec    esi
 3be:	44                   	inc    esp
 3bf:	50                   	push   eax
 3c0:	52                   	push   edx
 3c1:	4f                   	dec    edi
 3c2:	43                   	inc    ebx
 3c3:	45                   	inc    ebp
 3c4:	53                   	push   ebx
 3c5:	53                   	push   ebx
 3c6:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 3c9:	66                   	data16
 3ca:	66                   	data16
 3cb:	65                   	gs
 3cc:	72 00                	jb     3ce <sysEnter_Vector-0x12fc32>
 3ce:	53                   	push   ebx
 3cf:	59                   	pop    ecx
 3d0:	53                   	push   ebx
 3d1:	43                   	inc    ebx
 3d2:	41                   	inc    ecx
 3d3:	4c                   	dec    esp
 3d4:	4c                   	dec    esp
 3d5:	5f                   	pop    edi
 3d6:	57                   	push   edi
 3d7:	52                   	push   edx
 3d8:	49                   	dec    ecx
 3d9:	54                   	push   esp
 3da:	45                   	inc    ebp
 3db:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3de:	53                   	push   ebx
 3df:	43                   	inc    ebx
 3e0:	41                   	inc    ecx
 3e1:	4c                   	dec    esp
 3e2:	4c                   	dec    esp
 3e3:	5f                   	pop    edi
 3e4:	50                   	push   eax
 3e5:	52                   	push   edx
 3e6:	49                   	dec    ecx
 3e7:	4e                   	dec    esi
 3e8:	54                   	push   esp
 3e9:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 3ec:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3ed:	64                   	fs
 3ee:	6c                   	ins    BYTE PTR es:[edi],dx
 3ef:	65 00 73 69          	add    BYTE PTR gs:[ebx+0x69],dh
 3f3:	7a 65                	jp     45a <sysEnter_Vector-0x12fba6>
 3f5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3f8:	53                   	push   ebx
 3f9:	43                   	inc    ebx
 3fa:	41                   	inc    ecx
 3fb:	4c                   	dec    esp
 3fc:	4c                   	dec    esp
 3fd:	5f                   	pop    edi
 3fe:	41                   	inc    ecx
 3ff:	4c                   	dec    esp
 400:	4c                   	dec    esp
 401:	4f                   	dec    edi
 402:	43                   	inc    ebx
 403:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 406:	53                   	push   ebx
 407:	43                   	inc    ebx
 408:	41                   	inc    ecx
 409:	4c                   	dec    esp
 40a:	4c                   	dec    esp
 40b:	5f                   	pop    edi
 40c:	47                   	inc    edi
 40d:	45                   	inc    ebp
 40e:	54                   	push   esp
 40f:	43                   	inc    ebx
 410:	57                   	push   edi
 411:	44                   	inc    esp
 412:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 415:	53                   	push   ebx
 416:	43                   	inc    ebx
 417:	41                   	inc    ecx
 418:	4c                   	dec    esp
 419:	4c                   	dec    esp
 41a:	5f                   	pop    edi
 41b:	57                   	push   edi
 41c:	41                   	inc    ecx
 41d:	49                   	dec    ecx
 41e:	54                   	push   esp
 41f:	46                   	inc    esi
 420:	4f                   	dec    edi
 421:	52                   	push   edx
 422:	50                   	push   eax
 423:	49                   	dec    ecx
 424:	44                   	inc    esp
 425:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
 428:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 42a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 42d:	53                   	push   ebx
 42e:	43                   	inc    ebx
 42f:	41                   	inc    ecx
 430:	4c                   	dec    esp
 431:	4c                   	dec    esp
 432:	5f                   	pop    edi
 433:	53                   	push   ebx
 434:	45                   	inc    ebp
 435:	54                   	push   esp
 436:	53                   	push   ebx
 437:	49                   	dec    ecx
 438:	47                   	inc    edi
 439:	41                   	inc    ecx
 43a:	43                   	inc    ebx
 43b:	54                   	push   esp
 43c:	49                   	dec    ecx
 43d:	4f                   	dec    edi
 43e:	4e                   	dec    esi
 43f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 442:	72 65                	jb     4a9 <sysEnter_Vector-0x12fb57>
 444:	61                   	popa   
 445:	6d                   	ins    DWORD PTR es:[edi],dx
 446:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 449:	74 73                	je     4be <sysEnter_Vector-0x12fb42>
 44b:	45                   	inc    ebp
 44c:	72 72                	jb     4c0 <sysEnter_Vector-0x12fb40>
 44e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 44f:	72 00                	jb     451 <sysEnter_Vector-0x12fbaf>
 451:	6c                   	ins    BYTE PTR es:[edi],dx
 452:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 455:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 458:	63 2f                	arpl   WORD PTR [edi],bp
 45a:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 461:	6e                   	outs   dx,BYTE PTR ds:[esi]
 462:	70 75                	jo     4d9 <sysEnter_Vector-0x12fb27>
 464:	74 2e                	je     494 <sysEnter_Vector-0x12fb6c>
 466:	63 00                	arpl   WORD PTR [eax],ax
 468:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 46f:	67                   	addr16
 470:	65                   	gs
 471:	74 63                	je     4d6 <sysEnter_Vector-0x12fb2a>
 473:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 476:	78 6c                	js     4e4 <sysEnter_Vector-0x12fb1c>
 478:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 47a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 47d:	74 73                	je     4f2 <sysEnter_Vector-0x12fb0e>
 47f:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 482:	74 63                	je     4e7 <sysEnter_Vector-0x12fb19>
 484:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 487:	74 73                	je     4fc <sysEnter_Vector-0x12fb04>
 489:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 48c:	74 56                	je     4e4 <sysEnter_Vector-0x12fb1c>
 48e:	61                   	popa   
 48f:	6c                   	ins    BYTE PTR es:[edi],dx
 490:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 493:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
 49a:	74 53                	je     4ef <sysEnter_Vector-0x12fb11>
 49c:	70 61                	jo     4ff <sysEnter_Vector-0x12fb01>
 49e:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 4a1:	74 72                	je     515 <sysEnter_Vector-0x12faeb>
 4a3:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 4a6:	7a 65                	jp     50d <sysEnter_Vector-0x12faf3>
 4a8:	5f                   	pop    edi
 4a9:	74 00                	je     4ab <sysEnter_Vector-0x12fb55>
 4ab:	75 69                	jne    516 <sysEnter_Vector-0x12faea>
 4ad:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4ae:	74 70                	je     520 <sysEnter_Vector-0x12fae0>
 4b0:	74 72                	je     524 <sysEnter_Vector-0x12fadc>
 4b2:	5f                   	pop    edi
 4b3:	74 00                	je     4b5 <sysEnter_Vector-0x12fb4b>
 4b5:	73 69                	jae    520 <sysEnter_Vector-0x12fae0>
 4b7:	67 44                	addr16 inc esp
 4b9:	61                   	popa   
 4ba:	74 61                	je     51d <sysEnter_Vector-0x12fae3>
 4bc:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 4bf:	69 6e 74 66 00 61 72 	imul   ebp,DWORD PTR [esi+0x74],0x72610066
 4c6:	67 76 50             	addr16 jbe 519 <sysEnter_Vector-0x12fae7>
 4c9:	74 72                	je     53d <sysEnter_Vector-0x12fac3>
 4cb:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 4ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4cf:	67 72 61             	addr16 jb 533 <sysEnter_Vector-0x12facd>
 4d2:	6d                   	ins    DWORD PTR es:[edi],dx
 4d3:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 4d7:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 4da:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4db:	69 74 00 5f 5f 62 75 	imul   esi,DWORD PTR [eax+eax*1+0x5f],0x6975625f
 4e2:	69 
 4e3:	6c                   	ins    BYTE PTR es:[edi],dx
 4e4:	74 69                	je     54f <sysEnter_Vector-0x12fab1>
 4e6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4e7:	5f                   	pop    edi
 4e8:	76 61                	jbe    54b <sysEnter_Vector-0x12fab5>
 4ea:	5f                   	pop    edi
 4eb:	6c                   	ins    BYTE PTR es:[edi],dx
 4ec:	69 73 74 00 66 6f 72 	imul   esi,DWORD PTR [ebx+0x74],0x726f6600
 4f3:	6b 00 73             	imul   eax,DWORD PTR [eax],0x73
 4f6:	70 61                	jo     559 <sysEnter_Vector-0x12faa7>
 4f8:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 4fb:	74 72                	je     56f <sysEnter_Vector-0x12fa91>
 4fd:	00 77 61             	add    BYTE PTR [edi+0x61],dh
 500:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 507:	65 
 508:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 50b:	4c                   	dec    esp
 50c:	65                   	gs
 50d:	76 65                	jbe    574 <sysEnter_Vector-0x12fa8c>
 50f:	6c                   	ins    BYTE PTR es:[edi],dx
 510:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 513:	6c                   	ins    BYTE PTR es:[edi],dx
 514:	6c                   	ins    BYTE PTR es:[edi],dx
 515:	6e                   	outs   dx,BYTE PTR ds:[esi]
 516:	75 6d                	jne    585 <sysEnter_Vector-0x12fa7b>
 518:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 51b:	65                   	gs
 51c:	65                   	gs
 51d:	70 00                	jo     51f <sysEnter_Vector-0x12fae1>
 51f:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 521:	5f                   	pop    edi
 522:	73 79                	jae    59d <sysEnter_Vector-0x12fa63>
 524:	73 63                	jae    589 <sysEnter_Vector-0x12fa77>
 526:	61                   	popa   
 527:	6c                   	ins    BYTE PTR es:[edi],dx
 528:	6c                   	ins    BYTE PTR es:[edi],dx
 529:	30 00                	xor    BYTE PTR [eax],al
 52b:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 52d:	5f                   	pop    edi
 52e:	73 79                	jae    5a9 <sysEnter_Vector-0x12fa57>
 530:	73 63                	jae    595 <sysEnter_Vector-0x12fa6b>
 532:	61                   	popa   
 533:	6c                   	ins    BYTE PTR es:[edi],dx
 534:	6c                   	ins    BYTE PTR es:[edi],dx
 535:	31 00                	xor    DWORD PTR [eax],eax
 537:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 539:	5f                   	pop    edi
 53a:	73 79                	jae    5b5 <sysEnter_Vector-0x12fa4b>
 53c:	73 63                	jae    5a1 <sysEnter_Vector-0x12fa5f>
 53e:	61                   	popa   
 53f:	6c                   	ins    BYTE PTR es:[edi],dx
 540:	6c                   	ins    BYTE PTR es:[edi],dx
 541:	32 00                	xor    al,BYTE PTR [eax]
 543:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 545:	5f                   	pop    edi
 546:	73 79                	jae    5c1 <sysEnter_Vector-0x12fa3f>
 548:	73 63                	jae    5ad <sysEnter_Vector-0x12fa53>
 54a:	61                   	popa   
 54b:	6c                   	ins    BYTE PTR es:[edi],dx
 54c:	6c                   	ins    BYTE PTR es:[edi],dx
 54d:	33 00                	xor    eax,DWORD PTR [eax]
 54f:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 551:	5f                   	pop    edi
 552:	73 79                	jae    5cd <sysEnter_Vector-0x12fa33>
 554:	73 63                	jae    5b9 <sysEnter_Vector-0x12fa47>
 556:	61                   	popa   
 557:	6c                   	ins    BYTE PTR es:[edi],dx
 558:	6c                   	ins    BYTE PTR es:[edi],dx
 559:	34 00                	xor    al,0x0
 55b:	6c                   	ins    BYTE PTR es:[edi],dx
 55c:	69 62 63 49 6e 69 74 	imul   esp,DWORD PTR [edx+0x63],0x74696e49
 563:	69 61 6c 69 7a 65 64 	imul   esp,DWORD PTR [ecx+0x6c],0x64657a69
 56a:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 56d:	67 6e                	outs   dx,BYTE PTR ds:[si]
 56f:	75 63                	jne    5d4 <sysEnter_Vector-0x12fa2c>
 571:	5f                   	pop    edi
 572:	76 61                	jbe    5d5 <sysEnter_Vector-0x12fa2b>
 574:	5f                   	pop    edi
 575:	6c                   	ins    BYTE PTR es:[edi],dx
 576:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 57d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 57e:	74 64                	je     5e4 <sysEnter_Vector-0x12fa1c>
 580:	49                   	dec    ecx
 581:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 584:	69 74 43 6f 64 65 00 	imul   esi,DWORD PTR [ebx+eax*2+0x6f],0x70006564
 58b:	70 
 58c:	61                   	popa   
 58d:	72 61                	jb     5f0 <sysEnter_Vector-0x12fa10>
 58f:	6d                   	ins    DWORD PTR es:[edi],dx
 590:	31 00                	xor    DWORD PTR [eax],eax
 592:	70 61                	jo     5f5 <sysEnter_Vector-0x12fa0b>
 594:	72 61                	jb     5f7 <sysEnter_Vector-0x12fa09>
 596:	6d                   	ins    DWORD PTR es:[edi],dx
 597:	32 00                	xor    al,BYTE PTR [eax]
 599:	70 61                	jo     5fc <sysEnter_Vector-0x12fa04>
 59b:	72 61                	jb     5fe <sysEnter_Vector-0x12fa02>
 59d:	6d                   	ins    DWORD PTR es:[edi],dx
 59e:	33 00                	xor    eax,DWORD PTR [eax]
 5a0:	70 61                	jo     603 <sysEnter_Vector-0x12f9fd>
 5a2:	72 61                	jb     605 <sysEnter_Vector-0x12f9fb>
 5a4:	6d                   	ins    DWORD PTR es:[edi],dx
 5a5:	34 00                	xor    al,0x0
 5a7:	65                   	gs
 5a8:	78 65                	js     60f <sysEnter_Vector-0x12f9f1>
 5aa:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
 5ad:	65                   	gs
 5ae:	78 65                	js     615 <sysEnter_Vector-0x12f9eb>
 5b0:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
 5b3:	66 6f                	outs   dx,WORD PTR ds:[esi]
 5b5:	72 6d                	jb     624 <sysEnter_Vector-0x12f9dc>
 5b7:	61                   	popa   
 5b8:	74 00                	je     5ba <sysEnter_Vector-0x12fa46>
 5ba:	73 69                	jae    625 <sysEnter_Vector-0x12f9db>
 5bc:	67 6e                	outs   dx,BYTE PTR ds:[si]
 5be:	61                   	popa   
 5bf:	6c                   	ins    BYTE PTR es:[edi],dx
 5c0:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 5c3:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 5c6:	5f                   	pop    edi
 5c7:	5f                   	pop    edi
 5c8:	73 65                	jae    62f <sysEnter_Vector-0x12f9d1>
 5ca:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 5cd:	64                   	fs
 5ce:	73 00                	jae    5d0 <sysEnter_Vector-0x12fa30>
 5d0:	73 72                	jae    644 <sysEnter_Vector-0x12f9bc>
 5d2:	63 2f                	arpl   WORD PTR [edi],bp
 5d4:	6c                   	ins    BYTE PTR es:[edi],dx
 5d5:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 5dc:	4f                   	dec    edi
 5dd:	53                   	push   ebx
 5de:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 5e1:	61                   	popa   
 5e2:	72 67                	jb     64b <sysEnter_Vector-0x12f9b5>
 5e4:	63 00                	arpl   WORD PTR [eax],ax
 5e6:	6c                   	ins    BYTE PTR es:[edi],dx
 5e7:	69 62 63 5f 63 6c 65 	imul   esp,DWORD PTR [edx+0x63],0x656c635f
 5ee:	61                   	popa   
 5ef:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5f0:	75 70                	jne    662 <sysEnter_Vector-0x12f99e>
 5f2:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 5f5:	67 76 00             	addr16 jbe 5f8 <sysEnter_Vector-0x12fa08>
 5f8:	65                   	gs
 5f9:	78 69                	js     664 <sysEnter_Vector-0x12f99c>
 5fb:	74 00                	je     5fd <sysEnter_Vector-0x12fa03>
 5fd:	73 69                	jae    668 <sysEnter_Vector-0x12f998>
 5ff:	67 48                	addr16 dec eax
 601:	61                   	popa   
 602:	6e                   	outs   dx,BYTE PTR ds:[esi]
 603:	64                   	fs
 604:	6c                   	ins    BYTE PTR es:[edi],dx
 605:	65                   	gs
 606:	72 00                	jb     608 <sysEnter_Vector-0x12f9f8>
 608:	6d                   	ins    DWORD PTR es:[edi],dx
 609:	6f                   	outs   dx,DWORD PTR ds:[esi]
 60a:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 611:	6e 
 612:	61                   	popa   
 613:	6c                   	ins    BYTE PTR es:[edi],dx
 614:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 617:	67 73 00             	addr16 jae 61a <sysEnter_Vector-0x12f9e6>
 61a:	70 72                	jo     68e <sysEnter_Vector-0x12f972>
 61c:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 623:	6f                   	outs   dx,DWORD PTR ds:[esi]
 624:	70 00                	jo     626 <sysEnter_Vector-0x12f9da>
 626:	67                   	addr16
 627:	65                   	gs
 628:	74 63                	je     68d <sysEnter_Vector-0x12f973>
 62a:	77 64                	ja     690 <sysEnter_Vector-0x12f970>
 62c:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 62f:	6c                   	ins    BYTE PTR es:[edi],dx
 630:	6f                   	outs   dx,DWORD PTR ds:[esi]
 631:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 634:	65                   	gs
 635:	64                   	fs
 636:	50                   	push   eax
 637:	74 72                	je     6ab <sysEnter_Vector-0x12f955>
 639:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 63c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 63d:	69 6e 74 65 72 00 6e 	imul   ebp,DWORD PTR [esi+0x74],0x6e007265
 644:	65                   	gs
 645:	77 53                	ja     69a <sysEnter_Vector-0x12f966>
 647:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 64e:	6c                   	ins    BYTE PTR es:[edi],dx
 64f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 650:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 653:	6c                   	ins    BYTE PTR es:[edi],dx
 654:	65                   	gs
 655:	61                   	popa   
 656:	6e                   	outs   dx,BYTE PTR ds:[esi]
 657:	75 70                	jne    6c9 <sysEnter_Vector-0x12f937>
 659:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 65c:	72 6b                	jb     6c9 <sysEnter_Vector-0x12f937>
 65e:	65                   	gs
 65f:	72 00                	jb     661 <sysEnter_Vector-0x12f99f>
 661:	6d                   	ins    DWORD PTR es:[edi],dx
 662:	61                   	popa   
 663:	6c                   	ins    BYTE PTR es:[edi],dx
 664:	6c                   	ins    BYTE PTR es:[edi],dx
 665:	6f                   	outs   dx,DWORD PTR ds:[esi]
 666:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 669:	68 65 61 70 50       	push   0x50706165
 66e:	74 72                	je     6e2 <sysEnter_Vector-0x12f91e>
 670:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 673:	6e                   	outs   dx,BYTE PTR ds:[esi]
 674:	74 38                	je     6ae <sysEnter_Vector-0x12f952>
 676:	5f                   	pop    edi
 677:	74 00                	je     679 <sysEnter_Vector-0x12f987>
 679:	66                   	data16
 67a:	72 65                	jb     6e1 <sysEnter_Vector-0x12f91f>
 67c:	65 00 6e 65          	add    BYTE PTR gs:[esi+0x65],ch
 680:	65 64 65 64 00 73 68 	gs fs gs add BYTE PTR fs:gs:[ebx+0x68],dh
 687:	65                   	gs
 688:	61                   	popa   
 689:	70 00                	jo     68b <sysEnter_Vector-0x12f975>
 68b:	69 6e 55 73 65 00 69 	imul   ebp,DWORD PTR [esi+0x55],0x69006573
 692:	6e                   	outs   dx,BYTE PTR ds:[esi]
 693:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
 69a:	63 
 69b:	00 67 6f             	add    BYTE PTR [edi+0x6f],ah
 69e:	74 6f                	je     70f <sysEnter_Vector-0x12f8f1>
 6a0:	48                   	dec    eax
 6a1:	65                   	gs
 6a2:	72 65                	jb     709 <sysEnter_Vector-0x12f8f7>
 6a4:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 6a7:	61                   	popa   
 6a8:	70 50                	jo     6fa <sysEnter_Vector-0x12f906>
 6aa:	74 72                	je     71e <sysEnter_Vector-0x12f8e2>
 6ac:	4e                   	dec    esi
 6ad:	65                   	gs
 6ae:	78 74                	js     724 <sysEnter_Vector-0x12f8dc>
 6b0:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 6b3:	77 48                	ja     6fd <sysEnter_Vector-0x12f903>
 6b5:	65                   	gs
 6b6:	61                   	popa   
 6b7:	70 52                	jo     70b <sysEnter_Vector-0x12f8f5>
 6b9:	65                   	gs
 6ba:	71 75                	jno    731 <sysEnter_Vector-0x12f8cf>
 6bc:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 6c3:	75 6c                	jne    731 <sysEnter_Vector-0x12f8cf>
 6c5:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 6cc:	75 65                	jne    733 <sysEnter_Vector-0x12f8cd>
 6ce:	73 74                	jae    744 <sysEnter_Vector-0x12f8bc>
 6d0:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6d3:	63 2f                	arpl   WORD PTR [edi],bp
 6d5:	6d                   	ins    DWORD PTR es:[edi],dx
 6d6:	61                   	popa   
 6d7:	6c                   	ins    BYTE PTR es:[edi],dx
 6d8:	6c                   	ins    BYTE PTR es:[edi],dx
 6d9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6da:	63 2e                	arpl   WORD PTR [esi],bp
 6dc:	63 00                	arpl   WORD PTR [eax],ax
 6de:	66                   	data16
 6df:	72 65                	jb     746 <sysEnter_Vector-0x12f8ba>
 6e1:	65                   	gs
 6e2:	49                   	dec    ecx
 6e3:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 6e6:	65                   	gs
 6e7:	76 00                	jbe    6e9 <sysEnter_Vector-0x12f917>
 6e9:	68 65 61 70 72       	push   0x72706165
 6ee:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 6f2:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6f5:	63 2f                	arpl   WORD PTR [edi],bp
 6f7:	6d                   	ins    DWORD PTR es:[edi],dx
 6f8:	65                   	gs
 6f9:	6d                   	ins    DWORD PTR es:[edi],dx
 6fa:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 6fd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 700:	64                   	fs
 701:	65                   	gs
 702:	73 74                	jae    778 <sysEnter_Vector-0x12f888>
 704:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 707:	6d                   	ins    DWORD PTR es:[edi],dx
 708:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 70b:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 70e:	61                   	popa   
 70f:	6c                   	ins    BYTE PTR es:[edi],dx
 710:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 713:	6d                   	ins    DWORD PTR es:[edi],dx
 714:	73 65                	jae    77b <sysEnter_Vector-0x12f885>
 716:	74 00                	je     718 <sysEnter_Vector-0x12f8e8>
 718:	73 72                	jae    78c <sysEnter_Vector-0x12f874>
 71a:	63 2f                	arpl   WORD PTR [edi],bp
 71c:	6d                   	ins    DWORD PTR es:[edi],dx
 71d:	65                   	gs
 71e:	6d                   	ins    DWORD PTR es:[edi],dx
 71f:	73 65                	jae    786 <sysEnter_Vector-0x12f87a>
 721:	74 2e                	je     751 <sysEnter_Vector-0x12f8af>
 723:	63 00                	arpl   WORD PTR [eax],ax
 725:	66 56                	push   si
 727:	61                   	popa   
 728:	6c                   	ins    BYTE PTR es:[edi],dx
 729:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 72c:	6d                   	ins    DWORD PTR es:[edi],dx
 72d:	73 65                	jae    794 <sysEnter_Vector-0x12f86c>
 72f:	74 49                	je     77a <sysEnter_Vector-0x12f886>
 731:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 734:	6e                   	outs   dx,BYTE PTR ds:[esi]
 735:	74 31                	je     768 <sysEnter_Vector-0x12f898>
 737:	36                   	ss
 738:	5f                   	pop    edi
 739:	74 00                	je     73b <sysEnter_Vector-0x12f8c5>
 73b:	61                   	popa   
 73c:	64                   	fs
 73d:	64                   	fs
 73e:	72 00                	jb     740 <sysEnter_Vector-0x12f8c0>
 740:	6f                   	outs   dx,DWORD PTR ds:[esi]
 741:	66 66 5f             	data32 pop di
 744:	74 00                	je     746 <sysEnter_Vector-0x12f8ba>
 746:	70 72                	jo     7ba <sysEnter_Vector-0x12f846>
 748:	6f                   	outs   dx,DWORD PTR ds:[esi]
 749:	74 00                	je     74b <sysEnter_Vector-0x12f8b5>
 74b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 74c:	66                   	data16
 74d:	66                   	data16
 74e:	73 65                	jae    7b5 <sysEnter_Vector-0x12f84b>
 750:	74 00                	je     752 <sysEnter_Vector-0x12f8ae>
 752:	6d                   	ins    DWORD PTR es:[edi],dx
 753:	6d                   	ins    DWORD PTR es:[edi],dx
 754:	61                   	popa   
 755:	70 00                	jo     757 <sysEnter_Vector-0x12f8a9>
 757:	73 72                	jae    7cb <sysEnter_Vector-0x12f835>
 759:	63 2f                	arpl   WORD PTR [edi],bp
 75b:	6d                   	ins    DWORD PTR es:[edi],dx
 75c:	6d                   	ins    DWORD PTR es:[edi],dx
 75d:	61                   	popa   
 75e:	70 2e                	jo     78e <sysEnter_Vector-0x12f872>
 760:	63 00                	arpl   WORD PTR [eax],ax
 762:	73 72                	jae    7d6 <sysEnter_Vector-0x12f82a>
 764:	63 2f                	arpl   WORD PTR [edi],bp
 766:	70 69                	jo     7d1 <sysEnter_Vector-0x12f82f>
 768:	70 65                	jo     7cf <sysEnter_Vector-0x12f831>
 76a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 76d:	70 69                	jo     7d8 <sysEnter_Vector-0x12f828>
 76f:	70 65                	jo     7d6 <sysEnter_Vector-0x12f82a>
 771:	00 70 69             	add    BYTE PTR [eax+0x69],dh
 774:	70 65                	jo     7db <sysEnter_Vector-0x12f825>
 776:	66                   	data16
 777:	64 00 73 5f          	add    BYTE PTR fs:[ebx+0x5f],dh
 77b:	64                   	fs
 77c:	65                   	gs
 77d:	76 00                	jbe    77f <sysEnter_Vector-0x12f881>
 77f:	75 69                	jne    7ea <sysEnter_Vector-0x12f816>
 781:	6e                   	outs   dx,BYTE PTR ds:[esi]
 782:	74 36                	je     7ba <sysEnter_Vector-0x12f846>
 784:	34 5f                	xor    al,0x5f
 786:	74 00                	je     788 <sysEnter_Vector-0x12f878>
 788:	6d                   	ins    DWORD PTR es:[edi],dx
 789:	6e                   	outs   dx,BYTE PTR ds:[esi]
 78a:	74 5f                	je     7eb <sysEnter_Vector-0x12f815>
 78c:	66                   	data16
 78d:	6c                   	ins    BYTE PTR es:[edi],dx
 78e:	61                   	popa   
 78f:	67 73 00             	addr16 jae 792 <sysEnter_Vector-0x12f86e>
 792:	6d                   	ins    DWORD PTR es:[edi],dx
 793:	6b 6e 6f 64          	imul   ebp,DWORD PTR [esi+0x6f],0x64
 797:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 79a:	78 74                	js     810 <sysEnter_Vector-0x12f7f0>
 79c:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 79f:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 7a6:	66 
 7a7:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 7aa:	74 5f                	je     80b <sysEnter_Vector-0x12f7f5>
 7ac:	73 62                	jae    810 <sysEnter_Vector-0x12f7f0>
 7ae:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 7b1:	6c                   	ins    BYTE PTR es:[edi],dx
 7b2:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 7b9:	65                   	gs
 7ba:	72 5f                	jb     81b <sysEnter_Vector-0x12f7e5>
 7bc:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 7c0:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 7c3:	5f                   	pop    edi
 7c4:	76 66                	jbe    82c <sysEnter_Vector-0x12f7d4>
 7c6:	73 6d                	jae    835 <sysEnter_Vector-0x12f7cb>
 7c8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7c9:	75 6e                	jne    839 <sysEnter_Vector-0x12f7c7>
 7cb:	74 00                	je     7cd <sysEnter_Vector-0x12f833>
 7cd:	72 65                	jb     834 <sysEnter_Vector-0x12f7cc>
 7cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7d0:	61                   	popa   
 7d1:	6d                   	ins    DWORD PTR es:[edi],dx
 7d2:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 7d7:	61                   	popa   
 7d8:	6d                   	ins    DWORD PTR es:[edi],dx
 7d9:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 7dd:	63 2f                	arpl   WORD PTR [edi],bp
 7df:	73 74                	jae    855 <sysEnter_Vector-0x12f7ab>
 7e1:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 7e8:	65 
 7e9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7ea:	74 72                	je     85e <sysEnter_Vector-0x12f7a2>
 7ec:	79 00                	jns    7ee <sysEnter_Vector-0x12f812>
 7ee:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 7f5:	65                   	gs
 7f6:	72 61                	jb     859 <sysEnter_Vector-0x12f7a7>
 7f8:	74 69                	je     863 <sysEnter_Vector-0x12f79d>
 7fa:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7fb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7fc:	73 00                	jae    7fe <sysEnter_Vector-0x12f802>
 7fe:	72 6d                	jb     86d <sysEnter_Vector-0x12f793>
 800:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 807:	69 
 808:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 80d:	69 73 74 5f 74 00 69 	imul   esi,DWORD PTR [ebx+0x74],0x6900745f
 814:	6e                   	outs   dx,BYTE PTR ds:[esi]
 815:	6f                   	outs   dx,DWORD PTR ds:[esi]
 816:	64                   	fs
 817:	65                   	gs
 818:	5f                   	pop    edi
 819:	6f                   	outs   dx,DWORD PTR ds:[esi]
 81a:	70 65                	jo     881 <sysEnter_Vector-0x12f77f>
 81c:	72 61                	jb     87f <sysEnter_Vector-0x12f781>
 81e:	74 69                	je     889 <sysEnter_Vector-0x12f777>
 820:	6f                   	outs   dx,DWORD PTR ds:[esi]
 821:	6e                   	outs   dx,BYTE PTR ds:[esi]
 822:	73 00                	jae    824 <sysEnter_Vector-0x12f7dc>
 824:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 82b:	67 73 00             	addr16 jae 82e <sysEnter_Vector-0x12f7d2>
 82e:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 835:	65                   	gs
 836:	72 61                	jb     899 <sysEnter_Vector-0x12f767>
 838:	74 69                	je     8a3 <sysEnter_Vector-0x12f75d>
 83a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 83b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 83c:	73 5f                	jae    89d <sysEnter_Vector-0x12f763>
 83e:	74 00                	je     840 <sysEnter_Vector-0x12f7c0>
 840:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 843:	66 50                	push   ax
 845:	74 72                	je     8b9 <sysEnter_Vector-0x12f747>
 847:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 84a:	64                   	fs
 84b:	65                   	gs
 84c:	76 00                	jbe    84e <sysEnter_Vector-0x12f7b2>
 84e:	70 61                	jo     8b1 <sysEnter_Vector-0x12f74f>
 850:	79 6c                	jns    8be <sysEnter_Vector-0x12f742>
 852:	6f                   	outs   dx,DWORD PTR ds:[esi]
 853:	61                   	popa   
 854:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 858:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 85f:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 862:	6f                   	outs   dx,DWORD PTR ds:[esi]
 863:	70 00                	jo     865 <sysEnter_Vector-0x12f79b>
 865:	6d                   	ins    DWORD PTR es:[edi],dx
 866:	6e                   	outs   dx,BYTE PTR ds:[esi]
 867:	74 5f                	je     8c8 <sysEnter_Vector-0x12f738>
 869:	72 6f                	jb     8da <sysEnter_Vector-0x12f726>
 86b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 86c:	74 00                	je     86e <sysEnter_Vector-0x12f792>
 86e:	66 6f                	outs   dx,WORD PTR ds:[esi]
 870:	70 73                	jo     8e5 <sysEnter_Vector-0x12f71b>
 872:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 875:	6c                   	ins    BYTE PTR es:[edi],dx
 876:	65                   	gs
 877:	5f                   	pop    edi
 878:	74 00                	je     87a <sysEnter_Vector-0x12f786>
 87a:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 881:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 884:	75 69                	jne    8ef <sysEnter_Vector-0x12f711>
 886:	64 00 69 5f          	add    BYTE PTR fs:[ecx+0x5f],ch
 88a:	6d                   	ins    DWORD PTR es:[edi],dx
 88b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 88c:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 891:	6e                   	outs   dx,BYTE PTR ds:[esi]
 892:	73 6f                	jae    903 <sysEnter_Vector-0x12f6fd>
 894:	6c                   	ins    BYTE PTR es:[edi],dx
 895:	65                   	gs
 896:	5f                   	pop    edi
 897:	6e                   	outs   dx,BYTE PTR ds:[esi]
 898:	6f                   	outs   dx,DWORD PTR ds:[esi]
 899:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 89e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 89f:	64                   	fs
 8a0:	65                   	gs
 8a1:	5f                   	pop    edi
 8a2:	74 00                	je     8a4 <sysEnter_Vector-0x12f75c>
 8a4:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 8a7:	73 6f                	jae    918 <sysEnter_Vector-0x12f6e8>
 8a9:	6c                   	ins    BYTE PTR es:[edi],dx
 8aa:	65                   	gs
 8ab:	5f                   	pop    edi
 8ac:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 8b3:	72 6f                	jb     924 <sysEnter_Vector-0x12f6dc>
 8b5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8b6:	74 00                	je     8b8 <sysEnter_Vector-0x12f748>
 8b8:	64                   	fs
 8b9:	5f                   	pop    edi
 8ba:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 8c1:	65                   	gs
 8c2:	73 65                	jae    929 <sysEnter_Vector-0x12f6d7>
 8c4:	74 52                	je     918 <sysEnter_Vector-0x12f6e8>
 8c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8c7:	77 00                	ja     8c9 <sysEnter_Vector-0x12f737>
 8c9:	64                   	fs
 8ca:	5f                   	pop    edi
 8cb:	70 61                	jo     92e <sysEnter_Vector-0x12f6d2>
 8cd:	72 65                	jb     934 <sysEnter_Vector-0x12f6cc>
 8cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8d0:	74 00                	je     8d2 <sysEnter_Vector-0x12f72e>
 8d2:	66 5f                	pop    di
 8d4:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 8db:	5f                   	pop    edi
 8dc:	70 61                	jo     93f <sysEnter_Vector-0x12f6c1>
 8de:	74 68                	je     948 <sysEnter_Vector-0x12f6b8>
 8e0:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 8e3:	65                   	gs
 8e4:	61                   	popa   
 8e5:	74 65                	je     94c <sysEnter_Vector-0x12f6b4>
 8e7:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 8ea:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8eb:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 8ee:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 8f0:	61                   	popa   
 8f1:	74 65                	je     958 <sysEnter_Vector-0x12f6a8>
 8f3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 8f6:	72 63                	jb     95b <sysEnter_Vector-0x12f6a5>
 8f8:	61                   	popa   
 8f9:	74 49                	je     944 <sysEnter_Vector-0x12f6bc>
 8fb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 8fe:	72 63                	jb     963 <sysEnter_Vector-0x12f69d>
 900:	61                   	popa   
 901:	74 00                	je     903 <sysEnter_Vector-0x12f6fd>
 903:	73 72                	jae    977 <sysEnter_Vector-0x12f689>
 905:	63 2f                	arpl   WORD PTR [edi],bp
 907:	73 74                	jae    97d <sysEnter_Vector-0x12f683>
 909:	72 69                	jb     974 <sysEnter_Vector-0x12f68c>
 90b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 90c:	67 73 2f             	addr16 jae 93e <sysEnter_Vector-0x12f6c2>
 90f:	73 74                	jae    985 <sysEnter_Vector-0x12f67b>
 911:	72 63                	jb     976 <sysEnter_Vector-0x12f68a>
 913:	61                   	popa   
 914:	74 2e                	je     944 <sysEnter_Vector-0x12f6bc>
 916:	63 00                	arpl   WORD PTR [eax],ax
 918:	73 74                	jae    98e <sysEnter_Vector-0x12f672>
 91a:	72 63                	jb     97f <sysEnter_Vector-0x12f681>
 91c:	6d                   	ins    DWORD PTR es:[edi],dx
 91d:	70 00                	jo     91f <sysEnter_Vector-0x12f6e1>
 91f:	73 72                	jae    993 <sysEnter_Vector-0x12f66d>
 921:	63 2f                	arpl   WORD PTR [edi],bp
 923:	73 74                	jae    999 <sysEnter_Vector-0x12f667>
 925:	72 69                	jb     990 <sysEnter_Vector-0x12f670>
 927:	6e                   	outs   dx,BYTE PTR ds:[esi]
 928:	67 73 2f             	addr16 jae 95a <sysEnter_Vector-0x12f6a6>
 92b:	73 74                	jae    9a1 <sysEnter_Vector-0x12f65f>
 92d:	72 63                	jb     992 <sysEnter_Vector-0x12f66e>
 92f:	6d                   	ins    DWORD PTR es:[edi],dx
 930:	70 2e                	jo     960 <sysEnter_Vector-0x12f6a0>
 932:	63 00                	arpl   WORD PTR [eax],ax
 934:	73 74                	jae    9aa <sysEnter_Vector-0x12f656>
 936:	72 63                	jb     99b <sysEnter_Vector-0x12f665>
 938:	70 79                	jo     9b3 <sysEnter_Vector-0x12f64d>
 93a:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 93d:	75 6e                	jne    9ad <sysEnter_Vector-0x12f653>
 93f:	74 00                	je     941 <sysEnter_Vector-0x12f6bf>
 941:	73 74                	jae    9b7 <sysEnter_Vector-0x12f649>
 943:	72 63                	jb     9a8 <sysEnter_Vector-0x12f658>
 945:	70 79                	jo     9c0 <sysEnter_Vector-0x12f640>
 947:	63 00                	arpl   WORD PTR [eax],ax
 949:	73 74                	jae    9bf <sysEnter_Vector-0x12f641>
 94b:	72 63                	jb     9b0 <sysEnter_Vector-0x12f650>
 94d:	70 79                	jo     9c8 <sysEnter_Vector-0x12f638>
 94f:	49                   	dec    ecx
 950:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 953:	63 2f                	arpl   WORD PTR [edi],bp
 955:	73 74                	jae    9cb <sysEnter_Vector-0x12f635>
 957:	72 69                	jb     9c2 <sysEnter_Vector-0x12f63e>
 959:	6e                   	outs   dx,BYTE PTR ds:[esi]
 95a:	67 73 2f             	addr16 jae 98c <sysEnter_Vector-0x12f674>
 95d:	73 74                	jae    9d3 <sysEnter_Vector-0x12f62d>
 95f:	72 63                	jb     9c4 <sysEnter_Vector-0x12f63c>
 961:	70 79                	jo     9dc <sysEnter_Vector-0x12f624>
 963:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 966:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 969:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 96c:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 973:	74 
 974:	72 69                	jb     9df <sysEnter_Vector-0x12f621>
 976:	73 6e                	jae    9e6 <sysEnter_Vector-0x12f61a>
 978:	75 6d                	jne    9e7 <sysEnter_Vector-0x12f619>
 97a:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 97d:	63 2f                	arpl   WORD PTR [edi],bp
 97f:	73 74                	jae    9f5 <sysEnter_Vector-0x12f60b>
 981:	72 69                	jb     9ec <sysEnter_Vector-0x12f614>
 983:	6e                   	outs   dx,BYTE PTR ds:[esi]
 984:	67 73 2f             	addr16 jae 9b6 <sysEnter_Vector-0x12f64a>
 987:	73 74                	jae    9fd <sysEnter_Vector-0x12f603>
 989:	72 69                	jb     9f4 <sysEnter_Vector-0x12f60c>
 98b:	73 6e                	jae    9fb <sysEnter_Vector-0x12f605>
 98d:	75 6d                	jne    9fc <sysEnter_Vector-0x12f604>
 98f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 992:	73 74                	jae    a08 <sysEnter_Vector-0x12f5f8>
 994:	72 6c                	jb     a02 <sysEnter_Vector-0x12f5fe>
 996:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 998:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 99b:	63 2f                	arpl   WORD PTR [edi],bp
 99d:	73 74                	jae    a13 <sysEnter_Vector-0x12f5ed>
 99f:	72 69                	jb     a0a <sysEnter_Vector-0x12f5f6>
 9a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9a2:	67 73 2f             	addr16 jae 9d4 <sysEnter_Vector-0x12f62c>
 9a5:	73 74                	jae    a1b <sysEnter_Vector-0x12f5e5>
 9a7:	72 6c                	jb     a15 <sysEnter_Vector-0x12f5eb>
 9a9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9ab:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9ae:	73 74                	jae    a24 <sysEnter_Vector-0x12f5dc>
 9b0:	72 6c                	jb     a1e <sysEnter_Vector-0x12f5e2>
 9b2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9b4:	49                   	dec    ecx
 9b5:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9b8:	72 6e                	jb     a28 <sysEnter_Vector-0x12f5d8>
 9ba:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 9bd:	49                   	dec    ecx
 9be:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9c1:	72 6e                	jb     a31 <sysEnter_Vector-0x12f5cf>
 9c3:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 9c6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9c9:	63 2f                	arpl   WORD PTR [edi],bp
 9cb:	73 74                	jae    a41 <sysEnter_Vector-0x12f5bf>
 9cd:	72 69                	jb     a38 <sysEnter_Vector-0x12f5c8>
 9cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9d0:	67 73 2f             	addr16 jae a02 <sysEnter_Vector-0x12f5fe>
 9d3:	73 74                	jae    a49 <sysEnter_Vector-0x12f5b7>
 9d5:	72 6e                	jb     a45 <sysEnter_Vector-0x12f5bb>
 9d7:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 9da:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9dd:	73 72                	jae    a51 <sysEnter_Vector-0x12f5af>
 9df:	63 2f                	arpl   WORD PTR [edi],bp
 9e1:	73 74                	jae    a57 <sysEnter_Vector-0x12f5a9>
 9e3:	72 69                	jb     a4e <sysEnter_Vector-0x12f5b2>
 9e5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9e6:	67 73 2f             	addr16 jae a18 <sysEnter_Vector-0x12f5e8>
 9e9:	73 74                	jae    a5f <sysEnter_Vector-0x12f5a1>
 9eb:	72 6e                	jb     a5b <sysEnter_Vector-0x12f5a5>
 9ed:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 9f0:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9f3:	73 74                	jae    a69 <sysEnter_Vector-0x12f597>
 9f5:	72 6e                	jb     a65 <sysEnter_Vector-0x12f59b>
 9f7:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 9fa:	49                   	dec    ecx
 9fb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9fe:	72 6e                	jb     a6e <sysEnter_Vector-0x12f592>
 a00:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a03:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a06:	63 2f                	arpl   WORD PTR [edi],bp
 a08:	73 74                	jae    a7e <sysEnter_Vector-0x12f582>
 a0a:	72 69                	jb     a75 <sysEnter_Vector-0x12f58b>
 a0c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a0d:	67 73 2f             	addr16 jae a3f <sysEnter_Vector-0x12f5c1>
 a10:	73 74                	jae    a86 <sysEnter_Vector-0x12f57a>
 a12:	72 6f                	jb     a83 <sysEnter_Vector-0x12f57d>
 a14:	75 6c                	jne    a82 <sysEnter_Vector-0x12f57e>
 a16:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a19:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 a1c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a1d:	66                   	data16
 a1e:	66                   	data16
 a1f:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 a22:	74 6c                	je     a90 <sysEnter_Vector-0x12f570>
 a24:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 a2b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a2c:	75 6c                	jne    a9a <sysEnter_Vector-0x12f566>
 a2e:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 a31:	64                   	fs
 a32:	70 74                	jo     aa8 <sysEnter_Vector-0x12f558>
 a34:	72 00                	jb     a36 <sysEnter_Vector-0x12f5ca>
 a36:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a37:	70 74                	jo     aad <sysEnter_Vector-0x12f553>
 a39:	72 00                	jb     a3b <sysEnter_Vector-0x12f5c5>
 a3b:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 a3e:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 a42:	63 2f                	arpl   WORD PTR [edi],bp
 a44:	73 74                	jae    aba <sysEnter_Vector-0x12f546>
 a46:	72 69                	jb     ab1 <sysEnter_Vector-0x12f54f>
 a48:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a49:	67 73 2f             	addr16 jae a7b <sysEnter_Vector-0x12f585>
 a4c:	73 74                	jae    ac2 <sysEnter_Vector-0x12f53e>
 a4e:	72 70                	jb     ac0 <sysEnter_Vector-0x12f540>
 a50:	61                   	popa   
 a51:	72 74                	jb     ac7 <sysEnter_Vector-0x12f539>
 a53:	73 2e                	jae    a83 <sysEnter_Vector-0x12f57d>
 a55:	63 00                	arpl   WORD PTR [eax],ax
 a57:	73 74                	jae    acd <sysEnter_Vector-0x12f533>
 a59:	72 6c                	jb     ac7 <sysEnter_Vector-0x12f539>
 a5b:	65                   	gs
 a5c:	66                   	data16
 a5d:	74 00                	je     a5f <sysEnter_Vector-0x12f5a1>
 a5f:	73 72                	jae    ad3 <sysEnter_Vector-0x12f52d>
 a61:	63 2f                	arpl   WORD PTR [edi],bp
 a63:	73 74                	jae    ad9 <sysEnter_Vector-0x12f527>
 a65:	72 69                	jb     ad0 <sysEnter_Vector-0x12f530>
 a67:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a68:	67 73 2f             	addr16 jae a9a <sysEnter_Vector-0x12f566>
 a6b:	73 74                	jae    ae1 <sysEnter_Vector-0x12f51f>
 a6d:	72 74                	jb     ae3 <sysEnter_Vector-0x12f51d>
 a6f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a70:	6c                   	ins    BYTE PTR es:[edi],dx
 a71:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a74:	73 74                	jae    aea <sysEnter_Vector-0x12f516>
 a76:	72 74                	jb     aec <sysEnter_Vector-0x12f514>
 a78:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a79:	6c                   	ins    BYTE PTR es:[edi],dx
 a7a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 a7d:	70 75                	jo     af4 <sysEnter_Vector-0x12f50c>
 a7f:	74 00                	je     a81 <sysEnter_Vector-0x12f57f>
 a81:	73 72                	jae    af5 <sysEnter_Vector-0x12f50b>
 a83:	63 2f                	arpl   WORD PTR [edi],bp
 a85:	73 74                	jae    afb <sysEnter_Vector-0x12f505>
 a87:	72 69                	jb     af2 <sysEnter_Vector-0x12f50e>
 a89:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a8a:	67 73 2f             	addr16 jae abc <sysEnter_Vector-0x12f544>
 a8d:	73 74                	jae    b03 <sysEnter_Vector-0x12f4fd>
 a8f:	72 74                	jb     b05 <sysEnter_Vector-0x12f4fb>
 a91:	72 69                	jb     afc <sysEnter_Vector-0x12f504>
 a93:	6d                   	ins    DWORD PTR es:[edi],dx
 a94:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a97:	73 74                	jae    b0d <sysEnter_Vector-0x12f4f3>
 a99:	72 74                	jb     b0f <sysEnter_Vector-0x12f4f1>
 a9b:	72 69                	jb     b06 <sysEnter_Vector-0x12f4fa>
 a9d:	6d                   	ins    DWORD PTR es:[edi],dx
 a9e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 aa1:	72 74                	jb     b17 <sysEnter_Vector-0x12f4e9>
 aa3:	72 69                	jb     b0e <sysEnter_Vector-0x12f4f2>
 aa5:	6d                   	ins    DWORD PTR es:[edi],dx
 aa6:	49                   	dec    ecx
 aa7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 aaa:	72 73                	jb     b1f <sysEnter_Vector-0x12f4e1>
 aac:	74 72                	je     b20 <sysEnter_Vector-0x12f4e0>
 aae:	49                   	dec    ecx
 aaf:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 ab2:	63 2f                	arpl   WORD PTR [edi],bp
 ab4:	73 74                	jae    b2a <sysEnter_Vector-0x12f4d6>
 ab6:	72 73                	jb     b2b <sysEnter_Vector-0x12f4d5>
 ab8:	74 72                	je     b2c <sysEnter_Vector-0x12f4d4>
 aba:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 abd:	73 74                	jae    b33 <sysEnter_Vector-0x12f4cd>
 abf:	72 73                	jb     b34 <sysEnter_Vector-0x12f4cc>
 ac1:	74 72                	je     b35 <sysEnter_Vector-0x12f4cb>
 ac3:	00 72 63             	add    BYTE PTR [edx+0x63],dh
 ac6:	73 69                	jae    b31 <sysEnter_Vector-0x12f4cf>
 ac8:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 acc:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 acf:	72 69                	jb     b3a <sysEnter_Vector-0x12f4c6>
 ad1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ad2:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
 ad6:	63 2f                	arpl   WORD PTR [edi],bp
 ad8:	74 69                	je     b43 <sysEnter_Vector-0x12f4bd>
 ada:	6d                   	ins    DWORD PTR es:[edi],dx
 adb:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 adf:	6c                   	ins    BYTE PTR es:[edi],dx
 ae0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ae1:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 ae4:	74 69                	je     b4f <sysEnter_Vector-0x12f4b1>
 ae6:	6d                   	ins    DWORD PTR es:[edi],dx
 ae7:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 aec:	68 6f 75 72 00       	push   0x72756f
 af1:	67                   	addr16
 af2:	65                   	gs
 af3:	74 74                	je     b69 <sysEnter_Vector-0x12f497>
 af5:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 afc:	61                   	popa   
 afd:	79 6c                	jns    b6b <sysEnter_Vector-0x12f495>
 aff:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 b06:	7a 6e                	jp     b76 <sysEnter_Vector-0x12f48a>
 b08:	61                   	popa   
 b09:	6d                   	ins    DWORD PTR es:[edi],dx
 b0a:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 b0e:	74 69                	je     b79 <sysEnter_Vector-0x12f487>
 b10:	6d                   	ins    DWORD PTR es:[edi],dx
 b11:	65                   	gs
 b12:	5f                   	pop    edi
 b13:	72 00                	jb     b15 <sysEnter_Vector-0x12f4eb>
 b15:	74 69                	je     b80 <sysEnter_Vector-0x12f480>
 b17:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 b1a:	54                   	push   esp
 b1b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b1c:	57                   	push   edi
 b1d:	61                   	popa   
 b1e:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 b25:	6f 
 b26:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b27:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b2b:	79 65                	jns    b92 <sysEnter_Vector-0x12f46e>
 b2d:	61                   	popa   
 b2e:	72 00                	jb     b30 <sysEnter_Vector-0x12f4d0>
 b30:	6d                   	ins    DWORD PTR es:[edi],dx
 b31:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b32:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b33:	74 68                	je     b9d <sysEnter_Vector-0x12f463>
 b35:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 b38:	74 74                	je     bae <sysEnter_Vector-0x12f452>
 b3a:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 b41:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 b48:	61                   	popa   
 b49:	79 6e                	jns    bb9 <sysEnter_Vector-0x12f447>
 b4b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b4c:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 b4f:	74 69                	je     bba <sysEnter_Vector-0x12f446>
 b51:	6d                   	ins    DWORD PTR es:[edi],dx
 b52:	65                   	gs
 b53:	5f                   	pop    edi
 b54:	72 49                	jb     b9f <sysEnter_Vector-0x12f461>
 b56:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b5a:	6d                   	ins    DWORD PTR es:[edi],dx
 b5b:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 b62:	64                   	fs
 b63:	61                   	popa   
 b64:	79 00                	jns    b66 <sysEnter_Vector-0x12f49a>
 b66:	6c                   	ins    BYTE PTR es:[edi],dx
 b67:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b68:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b6b:	54                   	push   esp
 b6c:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 b73:	75 66                	jne    bdb <sysEnter_Vector-0x12f425>
 b75:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 b79:	65                   	gs
 b7a:	5f                   	pop    edi
 b7b:	74 00                	je     b7d <sysEnter_Vector-0x12f483>
 b7d:	6c                   	ins    BYTE PTR es:[edi],dx
 b7e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b7f:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b82:	74 69                	je     bed <sysEnter_Vector-0x12f413>
 b84:	6d                   	ins    DWORD PTR es:[edi],dx
 b85:	65                   	gs
 b86:	5f                   	pop    edi
 b87:	72 00                	jb     b89 <sysEnter_Vector-0x12f477>
 b89:	64                   	fs
 b8a:	61                   	popa   
 b8b:	79 63                	jns    bf0 <sysEnter_Vector-0x12f410>
 b8d:	6c                   	ins    BYTE PTR es:[edi],dx
 b8e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b8f:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 b92:	6d                   	ins    DWORD PTR es:[edi],dx
 b93:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 b98:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b9c:	67 6d                	ins    DWORD PTR es:[di],dx
 b9e:	74 6f                	je     c0f <sysEnter_Vector-0x12f3f1>
 ba0:	66                   	data16
 ba1:	66                   	data16
 ba2:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 ba6:	77 64                	ja     c0c <sysEnter_Vector-0x12f3f4>
 ba8:	61                   	popa   
 ba9:	79 00                	jns    bab <sysEnter_Vector-0x12f455>
 bab:	5f                   	pop    edi
 bac:	79 74                	jns    c22 <sysEnter_Vector-0x12f3de>
 bae:	61                   	popa   
 baf:	62 00                	bound  eax,QWORD PTR [eax]
 bb1:	74 6d                	je     c20 <sysEnter_Vector-0x12f3e0>
 bb3:	5f                   	pop    edi
 bb4:	6d                   	ins    DWORD PTR es:[edi],dx
 bb5:	64                   	fs
 bb6:	61                   	popa   
 bb7:	79 00                	jns    bb9 <sysEnter_Vector-0x12f447>
 bb9:	74 6d                	je     c28 <sysEnter_Vector-0x12f3d8>
 bbb:	5f                   	pop    edi
 bbc:	73 65                	jae    c23 <sysEnter_Vector-0x12f3dd>
 bbe:	63 00                	arpl   WORD PTR [eax],ax
 bc0:	74 6d                	je     c2f <sysEnter_Vector-0x12f3d1>
 bc2:	5f                   	pop    edi
 bc3:	7a 6f                	jp     c34 <sysEnter_Vector-0x12f3cc>
 bc5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 bc6:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 bcb:	65                   	gs
 bcc:	72 00                	jb     bce <sysEnter_Vector-0x12f432>
 bce:	6c                   	ins    BYTE PTR es:[edi],dx
 bcf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bd0:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 bd3:	74 69                	je     c3e <sysEnter_Vector-0x12f3c2>
 bd5:	6d                   	ins    DWORD PTR es:[edi],dx
 bd6:	65                   	gs
 bd7:	5f                   	pop    edi
 bd8:	72 49                	jb     c23 <sysEnter_Vector-0x12f3dd>
 bda:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 bdd:	73 74                	jae    c53 <sysEnter_Vector-0x12f3ad>
 bdf:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 be2:	73 00                	jae    be4 <sysEnter_Vector-0x12f41c>
 be4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 be5:	76 65                	jbe    c4c <sysEnter_Vector-0x12f3b4>
 be7:	72 66                	jb     c4f <sysEnter_Vector-0x12f3b1>
 be9:	6c                   	ins    BYTE PTR es:[edi],dx
 bea:	6f                   	outs   dx,DWORD PTR ds:[esi]
 beb:	77 00                	ja     bed <sysEnter_Vector-0x12f413>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...
