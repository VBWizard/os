
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

30000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
30000000:	55                   	push   ebp
30000001:	89 e5                	mov    ebp,esp
30000003:	e8 ee 29 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000008:	05 d8 42 00 00       	add    eax,0x42d8
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
3000000d:	eb 17                	jmp    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
3000000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000012:	8d 50 01             	lea    edx,[eax+0x1]
30000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000001b:	84 c0                	test   al,al
3000001d:	75 07                	jne    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
3000001f:	b8 00 00 00 00       	mov    eax,0x0
30000024:	eb 10                	jmp    30000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
30000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000002f:	38 d0                	cmp    al,dl
30000031:	75 dc                	jne    3000000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
30000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
30000036:	5d                   	pop    ebp
30000037:	c3                   	ret    

30000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
30000038:	55                   	push   ebp
30000039:	89 e5                	mov    ebp,esp
3000003b:	e8 b6 29 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000040:	05 a0 42 00 00       	add    eax,0x42a0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
30000045:	eb 17                	jmp    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
30000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000004a:	8d 50 01             	lea    edx,[eax+0x1]
3000004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000053:	84 c0                	test   al,al
30000055:	75 07                	jne    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
30000057:	b8 00 00 00 00       	mov    eax,0x0
3000005c:	eb 10                	jmp    3000006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
3000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000067:	38 d0                	cmp    al,dl
30000069:	75 dc                	jne    30000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
3000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
3000006e:	5d                   	pop    ebp
3000006f:	c3                   	ret    

30000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
30000070:	55                   	push   ebp
30000071:	89 e5                	mov    ebp,esp
30000073:	56                   	push   esi
30000074:	53                   	push   ebx
30000075:	e8 7c 29 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000007a:	05 66 42 00 00       	add    eax,0x4266
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
3000007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000085:	89 c1                	mov    ecx,eax
30000087:	eb 29                	jmp    300000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
30000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
3000008c:	eb 15                	jmp    300000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
3000008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30000091:	38 c8                	cmp    al,cl
30000093:	75 0b                	jne    300000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
30000095:	89 da                	mov    edx,ebx
30000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000009a:	29 c2                	sub    edx,eax
3000009c:	89 d0                	mov    eax,edx
3000009e:	eb 21                	jmp    300000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
300000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000a6:	84 c0                	test   al,al
300000a8:	75 e4                	jne    3000008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000aa:	83 c3 01             	add    ebx,0x1
300000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
300000b2:	89 c8                	mov    eax,ecx
300000b4:	84 c0                	test   al,al
300000b6:	75 d1                	jne    30000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
300000b8:	89 da                	mov    edx,ebx
300000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000bd:	29 c2                	sub    edx,eax
300000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
300000c1:	5b                   	pop    ebx
300000c2:	5e                   	pop    esi
300000c3:	5d                   	pop    ebp
300000c4:	c3                   	ret    

300000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
300000c5:	55                   	push   ebp
300000c6:	89 e5                	mov    ebp,esp
300000c8:	56                   	push   esi
300000c9:	53                   	push   ebx
300000ca:	e8 27 29 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300000cf:	05 11 42 00 00       	add    eax,0x4211
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
300000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000da:	89 c1                	mov    ecx,eax
300000dc:	eb 29                	jmp    30000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
300000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
300000e1:	eb 15                	jmp    300000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
300000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000e6:	38 c8                	cmp    al,cl
300000e8:	75 0b                	jne    300000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
300000ea:	89 da                	mov    edx,ebx
300000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000ef:	29 c2                	sub    edx,eax
300000f1:	89 d0                	mov    eax,edx
300000f3:	eb 21                	jmp    30000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
300000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000fb:	84 c0                	test   al,al
300000fd:	75 e4                	jne    300000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000ff:	83 c3 01             	add    ebx,0x1
30000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
30000107:	89 c8                	mov    eax,ecx
30000109:	84 c0                	test   al,al
3000010b:	75 d1                	jne    300000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
3000010d:	89 da                	mov    edx,ebx
3000010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000112:	29 c2                	sub    edx,eax
30000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
30000116:	5b                   	pop    ebx
30000117:	5e                   	pop    esi
30000118:	5d                   	pop    ebp
30000119:	c3                   	ret    
3000011a:	66 90                	xchg   ax,ax

3000011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
3000011c:	55                   	push   ebp
3000011d:	89 e5                	mov    ebp,esp
3000011f:	56                   	push   esi
30000120:	53                   	push   ebx
30000121:	e8 0a 29 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
30000126:	81 c3 ba 41 00 00    	add    ebx,0x41ba
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
3000012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000130:	75 09                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
30000132:	8b 83 38 00 00 00    	mov    eax,DWORD PTR [ebx+0x38]
30000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
3000013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000013e:	8d 50 01             	lea    edx,[eax+0x1]
30000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000147:	0f be f0             	movsx  esi,al
3000014a:	85 f6                	test   esi,esi
3000014c:	75 07                	jne    30000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
3000014e:	b8 00 00 00 00       	mov    eax,0x0
30000153:	eb 57                	jmp    300001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
30000155:	83 ec 08             	sub    esp,0x8
30000158:	56                   	push   esi
30000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000015c:	e8 d7 fe ff ff       	call   30000038 <strchrI>
30000161:	83 c4 10             	add    esp,0x10
30000164:	85 c0                	test   eax,eax
30000166:	75 d3                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
30000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
3000016c:	83 ec 08             	sub    esp,0x8
3000016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000175:	e8 4b ff ff ff       	call   300000c5 <strcspnI>
3000017a:	83 c4 10             	add    esp,0x10
3000017d:	89 c2                	mov    edx,eax
3000017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000182:	01 d0                	add    eax,edx
30000184:	89 83 38 00 00 00    	mov    DWORD PTR [ebx+0x38],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
3000018a:	8b 83 38 00 00 00    	mov    eax,DWORD PTR [ebx+0x38]
30000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000193:	84 c0                	test   al,al
30000195:	74 12                	je     300001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
30000197:	8b 83 38 00 00 00    	mov    eax,DWORD PTR [ebx+0x38]
3000019d:	8d 50 01             	lea    edx,[eax+0x1]
300001a0:	89 93 38 00 00 00    	mov    DWORD PTR [ebx+0x38],edx
300001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
300001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
300001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
300001af:	5b                   	pop    ebx
300001b0:	5e                   	pop    esi
300001b1:	5d                   	pop    ebp
300001b2:	c3                   	ret    
300001b3:	90                   	nop

300001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
300001b4:	55                   	push   ebp
300001b5:	89 e5                	mov    ebp,esp
300001b7:	53                   	push   ebx
300001b8:	83 ec 14             	sub    esp,0x14
300001bb:	e8 36 28 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300001c0:	05 20 41 00 00       	add    eax,0x4120
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
300001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
300001cc:	83 ec 0c             	sub    esp,0xc
300001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300001d2:	89 c3                	mov    ebx,eax
300001d4:	e8 24 16 00 00       	call   300017fd <strlenI>
300001d9:	83 c4 10             	add    esp,0x10
300001dc:	83 e8 01             	sub    eax,0x1
300001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300001e2:	eb 39                	jmp    3000021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
300001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001ea:	01 d0                	add    eax,edx
300001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
300001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001f8:	01 c2                	add    edx,eax
300001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
300001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000200:	01 c8                	add    eax,ecx
30000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
30000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000020d:	01 c2                	add    edx,eax
3000020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
30000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
30000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
30000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
3000021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30000223:	7c bf                	jl     300001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
30000225:	90                   	nop
30000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000229:	c9                   	leave  
3000022a:	c3                   	ret    

3000022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
3000022b:	55                   	push   ebp
3000022c:	89 e5                	mov    ebp,esp
3000022e:	53                   	push   ebx
3000022f:	83 ec 14             	sub    esp,0x14
30000232:	e8 bf 27 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000237:	05 a9 40 00 00       	add    eax,0x40a9
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
3000023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000246:	79 03                	jns    3000024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
30000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
3000024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
30000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000255:	8d 50 01             	lea    edx,[eax+0x1]
30000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000025b:	89 c2                	mov    edx,eax
3000025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
30000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000266:	ba 67 66 66 66       	mov    edx,0x66666667
3000026b:	89 c8                	mov    eax,ecx
3000026d:	f7 ea                	imul   edx
3000026f:	c1 fa 02             	sar    edx,0x2
30000272:	89 c8                	mov    eax,ecx
30000274:	c1 f8 1f             	sar    eax,0x1f
30000277:	29 c2                	sub    edx,eax
30000279:	89 d0                	mov    eax,edx
3000027b:	c1 e0 02             	shl    eax,0x2
3000027e:	01 d0                	add    eax,edx
30000280:	01 c0                	add    eax,eax
30000282:	29 c1                	sub    ecx,eax
30000284:	89 ca                	mov    edx,ecx
30000286:	89 d0                	mov    eax,edx
30000288:	83 c0 30             	add    eax,0x30
3000028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
3000028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000290:	ba 67 66 66 66       	mov    edx,0x66666667
30000295:	89 c8                	mov    eax,ecx
30000297:	f7 ea                	imul   edx
30000299:	c1 fa 02             	sar    edx,0x2
3000029c:	89 c8                	mov    eax,ecx
3000029e:	c1 f8 1f             	sar    eax,0x1f
300002a1:	29 c2                	sub    edx,eax
300002a3:	89 d0                	mov    eax,edx
300002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
300002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
300002ac:	7f a4                	jg     30000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
300002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300002b2:	79 13                	jns    300002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
300002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300002b7:	8d 50 01             	lea    edx,[eax+0x1]
300002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300002bd:	89 c2                	mov    edx,eax
300002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002c2:	01 d0                	add    eax,edx
300002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
300002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002cd:	01 d0                	add    eax,edx
300002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
300002d2:	83 ec 0c             	sub    esp,0xc
300002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300002d8:	e8 d7 fe ff ff       	call   300001b4 <reverseI>
300002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
300002e0:	90                   	nop
300002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300002e4:	c9                   	leave  
300002e5:	c3                   	ret    

300002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
300002e6:	55                   	push   ebp
300002e7:	89 e5                	mov    ebp,esp
300002e9:	53                   	push   ebx
300002ea:	83 ec 14             	sub    esp,0x14
300002ed:	e8 04 27 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300002f2:	05 ee 3f 00 00       	add    eax,0x3fee
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
300002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000301:	79 03                	jns    30000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
30000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
30000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
3000030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000310:	8d 50 01             	lea    edx,[eax+0x1]
30000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000316:	89 c2                	mov    edx,eax
30000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
3000031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000321:	ba 67 66 66 66       	mov    edx,0x66666667
30000326:	89 c8                	mov    eax,ecx
30000328:	f7 ea                	imul   edx
3000032a:	c1 fa 02             	sar    edx,0x2
3000032d:	89 c8                	mov    eax,ecx
3000032f:	c1 f8 1f             	sar    eax,0x1f
30000332:	29 c2                	sub    edx,eax
30000334:	89 d0                	mov    eax,edx
30000336:	c1 e0 02             	shl    eax,0x2
30000339:	01 d0                	add    eax,edx
3000033b:	01 c0                	add    eax,eax
3000033d:	29 c1                	sub    ecx,eax
3000033f:	89 ca                	mov    edx,ecx
30000341:	89 d0                	mov    eax,edx
30000343:	83 c0 30             	add    eax,0x30
30000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
30000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
3000034b:	ba 67 66 66 66       	mov    edx,0x66666667
30000350:	89 c8                	mov    eax,ecx
30000352:	f7 ea                	imul   edx
30000354:	c1 fa 02             	sar    edx,0x2
30000357:	89 c8                	mov    eax,ecx
30000359:	c1 f8 1f             	sar    eax,0x1f
3000035c:	29 c2                	sub    edx,eax
3000035e:	89 d0                	mov    eax,edx
30000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000367:	7f a4                	jg     3000030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
30000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000036d:	79 13                	jns    30000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
3000036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000372:	8d 50 01             	lea    edx,[eax+0x1]
30000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000378:	89 c2                	mov    edx,eax
3000037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000037d:	01 d0                	add    eax,edx
3000037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
30000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000388:	01 d0                	add    eax,edx
3000038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
3000038d:	83 ec 0c             	sub    esp,0xc
30000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000393:	e8 1c fe ff ff       	call   300001b4 <reverseI>
30000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
3000039b:	90                   	nop
3000039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000039f:	c9                   	leave  
300003a0:	c3                   	ret    

300003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
300003a1:	55                   	push   ebp
300003a2:	89 e5                	mov    ebp,esp
300003a4:	83 ec 10             	sub    esp,0x10
300003a7:	e8 4a 26 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300003ac:	05 34 3f 00 00       	add    eax,0x3f34
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
300003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
300003bf:	eb 28                	jmp    300003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
300003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300003c4:	89 d0                	mov    eax,edx
300003c6:	c1 e0 02             	shl    eax,0x2
300003c9:	01 d0                	add    eax,edx
300003cb:	01 c0                	add    eax,eax
300003cd:	89 c1                	mov    ecx,eax
300003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003d5:	01 d0                	add    eax,edx
300003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003da:	0f be c0             	movsx  eax,al
300003dd:	01 c8                	add    eax,ecx
300003df:	83 e8 30             	sub    eax,0x30
300003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
300003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003ef:	01 d0                	add    eax,edx
300003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003f4:	84 c0                	test   al,al
300003f6:	75 c9                	jne    300003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
300003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
300003fb:	c9                   	leave  
300003fc:	c3                   	ret    
300003fd:	66 90                	xchg   ax,ax
300003ff:	90                   	nop

30000400 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
30000400:	55                   	push   ebp
30000401:	89 e5                	mov    ebp,esp
30000403:	53                   	push   ebx
30000404:	83 ec 14             	sub    esp,0x14
30000407:	e8 24 26 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
3000040c:	81 c3 d4 3e 00 00    	add    ebx,0x3ed4
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
30000412:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
30000419:	eb 7b                	jmp    30000496 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
3000041b:	83 ec 0c             	sub    esp,0xc
3000041e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000421:	e8 d7 13 00 00       	call   300017fd <strlenI>
30000426:	83 c4 10             	add    esp,0x10
30000429:	89 c1                	mov    ecx,eax
3000042b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000431:	8b 00                	mov    eax,DWORD PTR [eax]
30000433:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000436:	c1 e2 02             	shl    edx,0x2
30000439:	01 d0                	add    eax,edx
3000043b:	8b 00                	mov    eax,DWORD PTR [eax]
3000043d:	83 ec 04             	sub    esp,0x4
30000440:	51                   	push   ecx
30000441:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000444:	50                   	push   eax
30000445:	e8 4d 14 00 00       	call   30001897 <strncmpI>
3000044a:	83 c4 10             	add    esp,0x10
3000044d:	85 c0                	test   eax,eax
3000044f:	75 41                	jne    30000492 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
30000451:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000457:	8b 00                	mov    eax,DWORD PTR [eax]
30000459:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000045c:	c1 e2 02             	shl    edx,0x2
3000045f:	01 d0                	add    eax,edx
30000461:	8b 00                	mov    eax,DWORD PTR [eax]
30000463:	83 ec 08             	sub    esp,0x8
30000466:	8d 93 20 fb ff ff    	lea    edx,[ebx-0x4e0]
3000046c:	52                   	push   edx
3000046d:	50                   	push   eax
3000046e:	e8 e1 18 00 00       	call   30001d54 <strstrI>
30000473:	83 c4 10             	add    esp,0x10
30000476:	83 c0 01             	add    eax,0x1
30000479:	83 ec 04             	sub    esp,0x4
3000047c:	6a 32                	push   0x32
3000047e:	50                   	push   eax
3000047f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000482:	e8 79 14 00 00       	call   30001900 <strncpyI>
30000487:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
3000048a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000048d:	83 c0 01             	add    eax,0x1
30000490:	eb 13                	jmp    300004a5 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
30000492:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
30000496:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
3000049a:	0f 8e 7b ff ff ff    	jle    3000041b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
300004a0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
300004a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300004a8:	c9                   	leave  
300004a9:	c3                   	ret    

300004aa <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
300004aa:	55                   	push   ebp
300004ab:	89 e5                	mov    ebp,esp
300004ad:	53                   	push   ebx
300004ae:	83 ec 14             	sub    esp,0x14
300004b1:	e8 7a 25 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
300004b6:	81 c3 2a 3e 00 00    	add    ebx,0x3e2a
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
300004bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
300004c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
300004ca:	e9 d5 00 00 00       	jmp    300005a4 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
300004cf:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004d5:	8b 00                	mov    eax,DWORD PTR [eax]
300004d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004da:	c1 e2 02             	shl    edx,0x2
300004dd:	01 d0                	add    eax,edx
300004df:	8b 00                	mov    eax,DWORD PTR [eax]
300004e1:	85 c0                	test   eax,eax
300004e3:	0f 84 b7 00 00 00    	je     300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = processEnvp[cnt];
300004e9:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004ef:	8b 00                	mov    eax,DWORD PTR [eax]
300004f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004f4:	c1 e2 02             	shl    edx,0x2
300004f7:	01 d0                	add    eax,edx
300004f9:	8b 00                	mov    eax,DWORD PTR [eax]
300004fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
300004fe:	83 ec 0c             	sub    esp,0xc
30000501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000504:	e8 f4 12 00 00       	call   300017fd <strlenI>
30000509:	83 c4 10             	add    esp,0x10
3000050c:	89 c1                	mov    ecx,eax
3000050e:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000514:	8b 00                	mov    eax,DWORD PTR [eax]
30000516:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000519:	c1 e2 02             	shl    edx,0x2
3000051c:	01 d0                	add    eax,edx
3000051e:	8b 00                	mov    eax,DWORD PTR [eax]
30000520:	83 ec 04             	sub    esp,0x4
30000523:	51                   	push   ecx
30000524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000527:	50                   	push   eax
30000528:	e8 6a 13 00 00       	call   30001897 <strncmpI>
3000052d:	83 c4 10             	add    esp,0x10
30000530:	85 c0                	test   eax,eax
30000532:	75 6c                	jne    300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
30000534:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000053a:	8b 00                	mov    eax,DWORD PTR [eax]
3000053c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000053f:	c1 e2 02             	shl    edx,0x2
30000542:	01 d0                	add    eax,edx
30000544:	8b 00                	mov    eax,DWORD PTR [eax]
30000546:	83 ec 08             	sub    esp,0x8
30000549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000054c:	50                   	push   eax
3000054d:	e8 66 11 00 00       	call   300016b8 <strcpyI>
30000552:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
30000555:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000055b:	8b 00                	mov    eax,DWORD PTR [eax]
3000055d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000560:	c1 e2 02             	shl    edx,0x2
30000563:	01 d0                	add    eax,edx
30000565:	8b 00                	mov    eax,DWORD PTR [eax]
30000567:	83 ec 08             	sub    esp,0x8
3000056a:	8d 93 20 fb ff ff    	lea    edx,[ebx-0x4e0]
30000570:	52                   	push   edx
30000571:	50                   	push   eax
30000572:	e8 f3 0f 00 00       	call   3000156a <strcatI>
30000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
3000057a:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000580:	8b 00                	mov    eax,DWORD PTR [eax]
30000582:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000585:	c1 e2 02             	shl    edx,0x2
30000588:	01 d0                	add    eax,edx
3000058a:	8b 00                	mov    eax,DWORD PTR [eax]
3000058c:	83 ec 08             	sub    esp,0x8
3000058f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000592:	50                   	push   eax
30000593:	e8 d2 0f 00 00       	call   3000156a <strcatI>
30000598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
3000059b:	e9 c6 00 00 00       	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
300005a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
300005a4:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
300005a8:	0f 8e 21 ff ff ff    	jle    300004cf <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
300005ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
300005b5:	e9 a2 00 00 00       	jmp    3000065c <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
300005ba:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005c0:	8b 00                	mov    eax,DWORD PTR [eax]
300005c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005c5:	c1 e2 02             	shl    edx,0x2
300005c8:	01 d0                	add    eax,edx
300005ca:	8b 00                	mov    eax,DWORD PTR [eax]
300005cc:	85 c0                	test   eax,eax
300005ce:	0f 85 84 00 00 00    	jne    30000658 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
300005d4:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005da:	8b 00                	mov    eax,DWORD PTR [eax]
300005dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005df:	c1 e2 02             	shl    edx,0x2
300005e2:	01 d0                	add    eax,edx
300005e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300005e7:	81 c2 00 02 00 00    	add    edx,0x200
300005ed:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
300005ef:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005f5:	8b 00                	mov    eax,DWORD PTR [eax]
300005f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005fa:	c1 e2 02             	shl    edx,0x2
300005fd:	01 d0                	add    eax,edx
300005ff:	8b 00                	mov    eax,DWORD PTR [eax]
30000601:	83 ec 08             	sub    esp,0x8
30000604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000607:	50                   	push   eax
30000608:	e8 ab 10 00 00       	call   300016b8 <strcpyI>
3000060d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
30000610:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000616:	8b 00                	mov    eax,DWORD PTR [eax]
30000618:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000061b:	c1 e2 02             	shl    edx,0x2
3000061e:	01 d0                	add    eax,edx
30000620:	8b 00                	mov    eax,DWORD PTR [eax]
30000622:	83 ec 08             	sub    esp,0x8
30000625:	8d 93 20 fb ff ff    	lea    edx,[ebx-0x4e0]
3000062b:	52                   	push   edx
3000062c:	50                   	push   eax
3000062d:	e8 38 0f 00 00       	call   3000156a <strcatI>
30000632:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
30000635:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000063b:	8b 00                	mov    eax,DWORD PTR [eax]
3000063d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000640:	c1 e2 02             	shl    edx,0x2
30000643:	01 d0                	add    eax,edx
30000645:	8b 00                	mov    eax,DWORD PTR [eax]
30000647:	83 ec 08             	sub    esp,0x8
3000064a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000064d:	50                   	push   eax
3000064e:	e8 17 0f 00 00       	call   3000156a <strcatI>
30000653:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
30000656:	eb 0e                	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
30000658:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
3000065c:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
30000660:	0f 8e 54 ff ff ff    	jle    300005ba <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
30000666:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000669:	c9                   	leave  
3000066a:	c3                   	ret    
3000066b:	90                   	nop

3000066c <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:10
 */

#include "libChrisOS.h"

VISIBLE void* open(char* path, const char* mode)
{
3000066c:	55                   	push   ebp
3000066d:	89 e5                	mov    ebp,esp
3000066f:	53                   	push   ebx
30000670:	83 ec 04             	sub    esp,0x4
30000673:	e8 7e 23 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000678:	05 68 3c 00 00       	add    eax,0x3c68
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
3000067d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000680:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000683:	83 ec 04             	sub    esp,0x4
30000686:	51                   	push   ecx
30000687:	52                   	push   edx
30000688:	6a 02                	push   0x2
3000068a:	89 c3                	mov    ebx,eax
3000068c:	e8 5e 02 00 00       	call   300008ef <do_syscall2>
30000691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
}
30000694:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000697:	c9                   	leave  
30000698:	c3                   	ret    

30000699 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15

VISIBLE void close(void* handle)
{
30000699:	55                   	push   ebp
3000069a:	89 e5                	mov    ebp,esp
3000069c:	53                   	push   ebx
3000069d:	83 ec 04             	sub    esp,0x4
300006a0:	e8 51 23 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300006a5:	05 3b 3c 00 00       	add    eax,0x3c3b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
300006aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006ad:	83 ec 08             	sub    esp,0x8
300006b0:	52                   	push   edx
300006b1:	6a 03                	push   0x3
300006b3:	89 c3                	mov    ebx,eax
300006b5:	e8 69 02 00 00       	call   30000923 <do_syscall1>
300006ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
300006bd:	90                   	nop
300006be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300006c1:	c9                   	leave  
300006c2:	c3                   	ret    

300006c3 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
300006c3:	55                   	push   ebp
300006c4:	89 e5                	mov    ebp,esp
300006c6:	56                   	push   esi
300006c7:	53                   	push   ebx
300006c8:	e8 29 23 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300006cd:	05 13 3c 00 00       	add    eax,0x3c13
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
300006d2:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
300006d5:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
300006d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
300006db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006de:	83 ec 0c             	sub    esp,0xc
300006e1:	56                   	push   esi
300006e2:	53                   	push   ebx
300006e3:	51                   	push   ecx
300006e4:	52                   	push   edx
300006e5:	6a 04                	push   0x4
300006e7:	89 c3                	mov    ebx,eax
300006e9:	e8 92 01 00 00       	call   30000880 <do_syscall4>
300006ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
}
300006f1:	8d 65 f8             	lea    esp,[ebp-0x8]
300006f4:	5b                   	pop    ebx
300006f5:	5e                   	pop    esi
300006f6:	5d                   	pop    ebp
300006f7:	c3                   	ret    

300006f8 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25

VISIBLE int getdir(char* path, char *buffer, int bufferCount)
{
300006f8:	55                   	push   ebp
300006f9:	89 e5                	mov    ebp,esp
300006fb:	53                   	push   ebx
300006fc:	83 ec 04             	sub    esp,0x4
300006ff:	e8 f2 22 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000704:	05 dc 3b 00 00       	add    eax,0x3bdc
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, bufferCount);
30000709:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
3000070c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
3000070f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000712:	53                   	push   ebx
30000713:	51                   	push   ecx
30000714:	52                   	push   edx
30000715:	68 04 03 00 00       	push   0x304
3000071a:	89 c3                	mov    ebx,eax
3000071c:	e8 99 01 00 00       	call   300008ba <do_syscall3>
30000721:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
}
30000724:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000727:	c9                   	leave  
30000728:	c3                   	ret    
30000729:	66 90                	xchg   ax,ax
3000072b:	90                   	nop

3000072c <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
3000072c:	55                   	push   ebp
3000072d:	89 e5                	mov    ebp,esp
3000072f:	53                   	push   ebx
30000730:	e8 c1 22 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000735:	05 ab 3b 00 00       	add    eax,0x3bab
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
3000073a:	b8 05 00 00 00       	mov    eax,0x5
3000073f:	bb 01 00 00 00       	mov    ebx,0x1
30000744:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000747:	89 d1                	mov    ecx,edx
30000749:	e8 fc ff ff ff       	call   3000074a <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
3000074e:	90                   	nop
3000074f:	5b                   	pop    ebx
30000750:	5d                   	pop    ebp
30000751:	c3                   	ret    

30000752 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
30000752:	55                   	push   ebp
30000753:	89 e5                	mov    ebp,esp
30000755:	53                   	push   ebx
30000756:	83 ec 14             	sub    esp,0x14
30000759:	e8 98 22 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000075e:	05 82 3b 00 00       	add    eax,0x3b82
30000763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000766:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
30000769:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
3000076f:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
30000773:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
30000776:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
3000077a:	b8 05 00 00 00       	mov    eax,0x5
3000077f:	bb 01 00 00 00       	mov    ebx,0x1
30000784:	8d 55 fa             	lea    edx,[ebp-0x6]
30000787:	89 d1                	mov    ecx,edx
30000789:	e8 fc ff ff ff       	call   3000078a <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
3000078e:	90                   	nop
3000078f:	83 c4 14             	add    esp,0x14
30000792:	5b                   	pop    ebx
30000793:	5d                   	pop    ebp
30000794:	c3                   	ret    

30000795 <getc>:
getc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:30

VISIBLE char getc()
{
30000795:	55                   	push   ebp
30000796:	89 e5                	mov    ebp,esp
30000798:	53                   	push   ebx
30000799:	83 ec 10             	sub    esp,0x10
3000079c:	e8 55 22 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300007a1:	05 3f 3b 00 00       	add    eax,0x3b3f
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32
    char c;
    READCHAR(c)
300007a6:	b8 04 00 00 00       	mov    eax,0x4
300007ab:	ba 00 00 00 00       	mov    edx,0x0
300007b0:	89 d3                	mov    ebx,edx
300007b2:	e8 fc ff ff ff       	call   300007b3 <getc+0x1e>
300007b7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:33
    return c;
300007ba:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:34
}
300007be:	83 c4 10             	add    esp,0x10
300007c1:	5b                   	pop    ebx
300007c2:	5d                   	pop    ebp
300007c3:	c3                   	ret    

300007c4 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
300007c4:	55                   	push   ebp
300007c5:	89 e5                	mov    ebp,esp
300007c7:	53                   	push   ebx
300007c8:	83 ec 14             	sub    esp,0x14
300007cb:	e8 26 22 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300007d0:	05 10 3b 00 00       	add    eax,0x3b10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    char inchar;
    int len=0;
300007d5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:41
    char lbuf[2]={0,0};
300007dc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
300007e0:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:43
    
    if (stream!=1)
300007e4:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
300007e8:	74 19                	je     30000803 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:45
    {
        printI("Stream %u not implemented\n",stream);
300007ea:	83 ec 08             	sub    esp,0x8
300007ed:	ff 75 10             	push   DWORD PTR [ebp+0x10]
300007f0:	8d 90 22 fb ff ff    	lea    edx,[eax-0x4de]
300007f6:	52                   	push   edx
300007f7:	89 c3                	mov    ebx,eax
300007f9:	e8 81 02 00 00       	call   30000a7f <printI>
300007fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46 (discriminator 1)
        getsError: goto getsError;
30000801:	eb fe                	jmp    30000801 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    }
    
    while (1==1)
    {
        READCHAR(inchar)
30000803:	b8 04 00 00 00       	mov    eax,0x4
30000808:	ba 00 00 00 00       	mov    edx,0x0
3000080d:	89 d3                	mov    ebx,edx
3000080f:	e8 fc ff ff ff       	call   30000810 <gets+0x4c>
30000814:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
        if (inchar=='\b' && len>0)
30000817:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
3000081b:	75 17                	jne    30000834 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52 (discriminator 1)
3000081d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000821:	7e 11                	jle    30000834 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
        {
            buffer[len]=0;
30000823:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000829:	01 d0                	add    eax,edx
3000082b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55
            len--;
3000082e:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
30000832:	eb 43                	jmp    30000877 <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:57
        }
        else if (inchar!=0)
30000834:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
30000838:	74 33                	je     3000086d <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
        {
            lbuf[0]=inchar;
3000083a:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
3000083e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
30000841:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000844:	8d 50 01             	lea    edx,[eax+0x1]
30000847:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000084a:	89 c2                	mov    edx,eax
3000084c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000084f:	01 c2                	add    edx,eax
30000851:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000855:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
30000857:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000085a:	83 c0 01             	add    eax,0x1
3000085d:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
30000860:	7d 06                	jge    30000868 <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63 (discriminator 1)
30000862:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
30000866:	75 9b                	jne    30000803 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
            
                return len;
30000868:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000086b:	eb 0c                	jmp    30000879 <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
3000086d:	b8 02 03 00 00       	mov    eax,0x302
30000872:	e8 fc ff ff ff       	call   30000873 <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70 (discriminator 2)

    }
30000877:	eb 8a                	jmp    30000803 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
}
30000879:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000087c:	c9                   	leave  
3000087d:	c3                   	ret    
3000087e:	66 90                	xchg   ax,ax

30000880 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:17
extern void sysEnter_Vector();
bool libcInitialized = false;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
30000880:	55                   	push   ebp
30000881:	89 e5                	mov    ebp,esp
30000883:	56                   	push   esi
30000884:	53                   	push   ebx
30000885:	83 ec 10             	sub    esp,0x10
30000888:	e8 69 21 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000088d:	05 53 3a 00 00       	add    eax,0x3a53
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
    int retVal=0;
30000892:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
30000899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000089c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
3000089f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300008a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300008a5:	8b 75 f4             	mov    esi,DWORD PTR [ebp-0xc]
300008a8:	e8 fc ff ff ff       	call   300008a9 <do_syscall4+0x29>
300008ad:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    return retVal;
300008b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
}
300008b3:	83 c4 10             	add    esp,0x10
300008b6:	5b                   	pop    ebx
300008b7:	5e                   	pop    esi
300008b8:	5d                   	pop    ebp
300008b9:	c3                   	ret    

300008ba <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:24

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
300008ba:	55                   	push   ebp
300008bb:	89 e5                	mov    ebp,esp
300008bd:	53                   	push   ebx
300008be:	83 ec 10             	sub    esp,0x10
300008c1:	e8 30 21 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300008c6:	05 1a 3a 00 00       	add    eax,0x3a1a
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25
    int retVal=0;
300008cb:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    SYSCALL3(callnum, param1, param2, param3, retVal);
300008d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300008d5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
300008d8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300008db:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300008de:	e8 fc ff ff ff       	call   300008df <do_syscall3+0x25>
300008e3:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    return retVal;
300008e6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
}
300008e9:	83 c4 10             	add    esp,0x10
300008ec:	5b                   	pop    ebx
300008ed:	5d                   	pop    ebp
300008ee:	c3                   	ret    

300008ef <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:31

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
300008ef:	55                   	push   ebp
300008f0:	89 e5                	mov    ebp,esp
300008f2:	53                   	push   ebx
300008f3:	83 ec 10             	sub    esp,0x10
300008f6:	e8 fb 20 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300008fb:	05 e5 39 00 00       	add    eax,0x39e5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32
    int retVal=0;
30000900:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    SYSCALL2(callnum, param1, param2, retVal);
30000907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000090a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000090d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000910:	89 d3                	mov    ebx,edx
30000912:	e8 fc ff ff ff       	call   30000913 <do_syscall2+0x24>
30000917:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    return retVal;
3000091a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
}
3000091d:	83 c4 10             	add    esp,0x10
30000920:	5b                   	pop    ebx
30000921:	5d                   	pop    ebp
30000922:	c3                   	ret    

30000923 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:38

int do_syscall1(int callnum, uint32_t param1)
{
30000923:	55                   	push   ebp
30000924:	89 e5                	mov    ebp,esp
30000926:	53                   	push   ebx
30000927:	83 ec 10             	sub    esp,0x10
3000092a:	e8 c7 20 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000092f:	05 b1 39 00 00       	add    eax,0x39b1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39
    int retVal=0;
30000934:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    SYSCALL1(callnum, param1, retVal);
3000093b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000093e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000941:	89 d3                	mov    ebx,edx
30000943:	e8 fc ff ff ff       	call   30000944 <do_syscall1+0x21>
30000948:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    return retVal;
3000094b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
}
3000094e:	83 c4 10             	add    esp,0x10
30000951:	5b                   	pop    ebx
30000952:	5d                   	pop    ebp
30000953:	c3                   	ret    

30000954 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:45

int do_syscall0(int callnum)
{
30000954:	55                   	push   ebp
30000955:	89 e5                	mov    ebp,esp
30000957:	83 ec 10             	sub    esp,0x10
3000095a:	e8 97 20 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000095f:	05 81 39 00 00       	add    eax,0x3981
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46
    int retVal=0;
30000964:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    SYSCALL0(callnum, retVal);
3000096b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000096e:	e8 fc ff ff ff       	call   3000096f <do_syscall0+0x1b>
30000973:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    return retVal;
30000976:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
}
30000979:	c9                   	leave  
3000097a:	c3                   	ret    

3000097b <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:52

VISIBLE void __attribute__((constructor)) libc_init()
{
3000097b:	55                   	push   ebp
3000097c:	89 e5                	mov    ebp,esp
3000097e:	53                   	push   ebx
3000097f:	83 ec 04             	sub    esp,0x4
30000982:	e8 a9 20 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
30000987:	81 c3 59 39 00 00    	add    ebx,0x3959
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53
    printdI(DEBUG_LIBC,"***libc_init called\n***");
3000098d:	83 ec 08             	sub    esp,0x8
30000990:	8d 83 40 fb ff ff    	lea    eax,[ebx-0x4c0]
30000996:	50                   	push   eax
30000997:	68 00 00 00 02       	push   0x2000000
3000099c:	e8 12 01 00 00       	call   30000ab3 <printdI>
300009a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    if (!libcInitialized)
300009a4:	0f b6 83 3c 00 00 00 	movzx  eax,BYTE PTR [ebx+0x3c]
300009ab:	83 f0 01             	xor    eax,0x1
300009ae:	84 c0                	test   al,al
300009b0:	74 62                	je     30000a14 <libc_init+0x99>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:56
    {
        initmalloc();
300009b2:	e8 91 02 00 00       	call   30000c48 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
300009b7:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
300009ba:	89 c2                	mov    edx,eax
300009bc:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300009c2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        libcTZ=-4;
300009c4:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
300009ca:	c7 00 fc ff ff ff    	mov    DWORD PTR [eax],0xfffffffc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall0(SYSCALL_INVALID);
300009d0:	83 ec 0c             	sub    esp,0xc
300009d3:	6a 00                	push   0x0
300009d5:	e8 7a ff ff ff       	call   30000954 <do_syscall0>
300009da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
300009dd:	8d 83 4c c7 ff ff    	lea    eax,[ebx-0x38b4]
300009e3:	83 ec 08             	sub    esp,0x8
300009e6:	50                   	push   eax
300009e7:	68 63 01 00 00       	push   0x163
300009ec:	e8 32 ff ff ff       	call   30000923 <do_syscall1>
300009f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        libcInitialized = true;
300009f4:	c6 83 3c 00 00 00 01 	mov    BYTE PTR [ebx+0x3c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        printdI(DEBUG_LIBC,"***libc_init completed\n");
300009fb:	83 ec 08             	sub    esp,0x8
300009fe:	8d 83 58 fb ff ff    	lea    eax,[ebx-0x4a8]
30000a04:	50                   	push   eax
30000a05:	68 00 00 00 02       	push   0x2000000
30000a0a:	e8 a4 00 00 00       	call   30000ab3 <printdI>
30000a0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
    }
    else
        printI("libc_init called previously, exiting\n");
}
30000a12:	eb 12                	jmp    30000a26 <libc_init+0xab>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
        libcInitialized = true;
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
30000a14:	83 ec 0c             	sub    esp,0xc
30000a17:	8d 83 70 fb ff ff    	lea    eax,[ebx-0x490]
30000a1d:	50                   	push   eax
30000a1e:	e8 5c 00 00 00       	call   30000a7f <printI>
30000a23:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
}
30000a26:	90                   	nop
30000a27:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000a2a:	c9                   	leave  
30000a2b:	c3                   	ret    

30000a2c <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70

void __attribute__((destructor)) libc_cleanup(void)
{
30000a2c:	55                   	push   ebp
30000a2d:	89 e5                	mov    ebp,esp
30000a2f:	53                   	push   ebx
30000a30:	83 ec 04             	sub    esp,0x4
30000a33:	e8 be 1f 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000a38:	05 a8 38 00 00       	add    eax,0x38a8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71
    malloc_cleanup();
30000a3d:	89 c3                	mov    ebx,eax
30000a3f:	e8 18 05 00 00       	call   30000f5c <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:72
}
30000a44:	90                   	nop
30000a45:	83 c4 04             	add    esp,0x4
30000a48:	5b                   	pop    ebx
30000a49:	5d                   	pop    ebp
30000a4a:	c3                   	ret    

30000a4b <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75

VISIBLE int print(const char *format, ...)
{
30000a4b:	55                   	push   ebp
30000a4c:	89 e5                	mov    ebp,esp
30000a4e:	83 ec 10             	sub    esp,0x10
30000a51:	e8 a0 1f 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000a56:	05 8a 38 00 00       	add    eax,0x388a
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77
    va_list args;
    va_start( args, format );
30000a5b:	8d 45 0c             	lea    eax,[ebp+0xc]
30000a5e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:78
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000a61:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000a64:	89 c2                	mov    edx,eax
30000a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000a69:	52                   	push   edx
30000a6a:	50                   	push   eax
30000a6b:	68 00 03 00 00       	push   0x300
30000a70:	e8 7a fe ff ff       	call   300008ef <do_syscall2>
30000a75:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79
    return 0;
30000a78:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:80
}
30000a7d:	c9                   	leave  
30000a7e:	c3                   	ret    

30000a7f <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83

int printI(const char *format, ...)
{
30000a7f:	55                   	push   ebp
30000a80:	89 e5                	mov    ebp,esp
30000a82:	83 ec 10             	sub    esp,0x10
30000a85:	e8 6c 1f 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000a8a:	05 56 38 00 00       	add    eax,0x3856
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    va_list args;
    va_start( args, format );
30000a8f:	8d 45 0c             	lea    eax,[ebp+0xc]
30000a92:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000a95:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000a98:	89 c2                	mov    edx,eax
30000a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000a9d:	52                   	push   edx
30000a9e:	50                   	push   eax
30000a9f:	68 00 03 00 00       	push   0x300
30000aa4:	e8 46 fe ff ff       	call   300008ef <do_syscall2>
30000aa9:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:87
    return 0;
30000aac:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:88
}
30000ab1:	c9                   	leave  
30000ab2:	c3                   	ret    

30000ab3 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91

int printdI(uint32_t DebugLevel, const char *format, ...)
{
30000ab3:	55                   	push   ebp
30000ab4:	89 e5                	mov    ebp,esp
30000ab6:	83 ec 10             	sub    esp,0x10
30000ab9:	e8 38 1f 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000abe:	05 22 38 00 00       	add    eax,0x3822
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    va_list args;
    va_start( args, format );
30000ac3:	8d 45 10             	lea    eax,[ebp+0x10]
30000ac6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
30000ac9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000acc:	89 c2                	mov    edx,eax
30000ace:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000ad1:	52                   	push   edx
30000ad2:	50                   	push   eax
30000ad3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000ad6:	68 01 03 00 00       	push   0x301
30000adb:	e8 da fd ff ff       	call   300008ba <do_syscall3>
30000ae0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:96
    return 0;
30000ae3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:97
}
30000ae8:	c9                   	leave  
30000ae9:	c3                   	ret    

30000aea <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100

VISIBLE unsigned int sleep (unsigned int __seconds)
{
30000aea:	55                   	push   ebp
30000aeb:	89 e5                	mov    ebp,esp
30000aed:	53                   	push   ebx
30000aee:	83 ec 10             	sub    esp,0x10
30000af1:	e8 00 1f 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000af6:	05 ea 37 00 00       	add    eax,0x37ea
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
    SLEEP_SECONDS(__seconds)
30000afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000afe:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
30000b01:	b8 70 01 00 00       	mov    eax,0x170
30000b06:	e8 fc ff ff ff       	call   30000b07 <sleep+0x1d>
30000b0b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
30000b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b11:	6b d0 64             	imul   edx,eax,0x64
30000b14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000b17:	01 d0                	add    eax,edx
30000b19:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000b1c:	b8 66 01 00 00       	mov    eax,0x166
30000b21:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000b24:	89 d3                	mov    ebx,edx
30000b26:	e8 fc ff ff ff       	call   30000b27 <sleep+0x3d>
30000b2b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    return 0;
30000b2e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
}
30000b33:	83 c4 10             	add    esp,0x10
30000b36:	5b                   	pop    ebx
30000b37:	5d                   	pop    ebp
30000b38:	c3                   	ret    

30000b39 <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:106

void stop()
{
30000b39:	55                   	push   ebp
30000b3a:	89 e5                	mov    ebp,esp
30000b3c:	e8 b5 1e 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000b41:	05 9f 37 00 00       	add    eax,0x379f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107
    do_syscall0(SYSCALL_STOP);
30000b46:	68 68 01 00 00       	push   0x168
30000b4b:	e8 04 fe ff ff       	call   30000954 <do_syscall0>
30000b50:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108
}
30000b53:	90                   	nop
30000b54:	c9                   	leave  
30000b55:	c3                   	ret    

30000b56 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
30000b56:	55                   	push   ebp
30000b57:	89 e5                	mov    ebp,esp
30000b59:	e8 98 1e 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000b5e:	05 82 37 00 00       	add    eax,0x3782
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
30000b63:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000b66:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b6c:	51                   	push   ecx
30000b6d:	52                   	push   edx
30000b6e:	50                   	push   eax
30000b6f:	68 67 01 00 00       	push   0x167
30000b74:	e8 41 fd ff ff       	call   300008ba <do_syscall3>
30000b79:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:113
}
30000b7c:	90                   	nop
30000b7d:	c9                   	leave  
30000b7e:	c3                   	ret    

30000b7f <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:116

VISIBLE int exec(char* path, int argc, char** argv)
{
30000b7f:	55                   	push   ebp
30000b80:	89 e5                	mov    ebp,esp
30000b82:	53                   	push   ebx
30000b83:	83 ec 10             	sub    esp,0x10
30000b86:	e8 6b 1e 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000b8b:	05 55 37 00 00       	add    eax,0x3755
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    int pid=0;
30000b90:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    //Using the syscall is breaking the stack
//    SYSCALL3(SYSCALL_EXEC,path,argc,argv);
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
30000b97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000b9a:	8d 80 96 fb ff ff    	lea    eax,[eax-0x46a]
30000ba0:	50                   	push   eax
30000ba1:	68 00 00 00 02       	push   0x2000000
30000ba6:	e8 08 ff ff ff       	call   30000ab3 <printdI>
30000bab:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:121
    __asm__("push ds\nint 0x80\npop ds\n"
30000bae:	b8 59 00 00 00       	mov    eax,0x59
30000bb3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000bb6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000bb9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
30000bbc:	1e                   	push   ds
30000bbd:	cd 80                	int    0x80
30000bbf:	1f                   	pop    ds
30000bc0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:124
            :"=a" (pid)
            :"a" (0x59),"b" (path),"c" (argc),"d" (argv));
    return pid;
30000bc3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125
}
30000bc6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000bc9:	c9                   	leave  
30000bca:	c3                   	ret    

30000bcb <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:128

VISIBLE int waitpid(uint32_t pid)
{
30000bcb:	55                   	push   ebp
30000bcc:	89 e5                	mov    ebp,esp
30000bce:	e8 23 1e 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000bd3:	05 0d 37 00 00       	add    eax,0x370d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    return do_syscall1(SYSCALL_WAITFORPID,pid);
30000bd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000bdb:	6a 61                	push   0x61
30000bdd:	e8 41 fd ff ff       	call   30000923 <do_syscall1>
30000be2:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
}
30000be5:	c9                   	leave  
30000be6:	c3                   	ret    

30000be7 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:133

VISIBLE struct tm* gettime()
{
30000be7:	55                   	push   ebp
30000be8:	89 e5                	mov    ebp,esp
30000bea:	53                   	push   ebx
30000beb:	83 ec 34             	sub    esp,0x34
30000bee:	e8 41 1e 00 00       	call   30002a34 <__x86.get_pc_thunk.dx>
30000bf3:	81 c2 ed 36 00 00    	add    edx,0x36ed
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134
    uint32_t ticks=0;
30000bf9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
    struct tm theTime;
    
    GET_TICKS(ticks);
30000c00:	b8 70 01 00 00       	mov    eax,0x170
30000c05:	e8 fc ff ff ff       	call   30000c06 <gettime+0x1f>
30000c0a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138
    return gmtime_r((time_t*)&ticks,&theTime);
30000c0d:	83 ec 08             	sub    esp,0x8
30000c10:	8d 45 c8             	lea    eax,[ebp-0x38]
30000c13:	50                   	push   eax
30000c14:	8d 45 f4             	lea    eax,[ebp-0xc]
30000c17:	50                   	push   eax
30000c18:	89 d3                	mov    ebx,edx
30000c1a:	e8 01 1e 00 00       	call   30002a20 <__x86.get_pc_thunk.ax+0x2a>
30000c1f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139
}
30000c22:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000c25:	c9                   	leave  
30000c26:	c3                   	ret    

30000c27 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142

VISIBLE char* getcwd(char* buf, size_t size)
{
30000c27:	55                   	push   ebp
30000c28:	89 e5                	mov    ebp,esp
30000c2a:	e8 c7 1d 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000c2f:	05 b1 36 00 00       	add    eax,0x36b1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
30000c34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c37:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000c3a:	50                   	push   eax
30000c3b:	6a 4f                	push   0x4f
30000c3d:	e8 ad fc ff ff       	call   300008ef <do_syscall2>
30000c42:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:144
}
30000c45:	c9                   	leave  
30000c46:	c3                   	ret    
30000c47:	90                   	nop

30000c48 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:13
#include "libChrisOS.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
30000c48:	55                   	push   ebp
30000c49:	89 e5                	mov    ebp,esp
30000c4b:	53                   	push   ebx
30000c4c:	83 ec 04             	sub    esp,0x4
30000c4f:	e8 dc 1d 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
30000c54:	81 c3 8c 36 00 00    	add    ebx,0x368c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
30000c5a:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000c60:	8b 00                	mov    eax,DWORD PTR [eax]
30000c62:	50                   	push   eax
30000c63:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000c69:	50                   	push   eax
30000c6a:	8d 83 ac fb ff ff    	lea    eax,[ebx-0x454]
30000c70:	50                   	push   eax
30000c71:	68 00 00 00 01       	push   0x1000000
30000c76:	e8 38 fe ff ff       	call   30000ab3 <printdI>
30000c7b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    heapBase=0;
30000c7e:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000c84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapCurr=0;
30000c8a:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000c90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapEnd=0;
30000c96:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30000c9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
}
30000ca2:	90                   	nop
30000ca3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000ca6:	c9                   	leave  
30000ca7:	c3                   	ret    

30000ca8 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:21

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
30000ca8:	55                   	push   ebp
30000ca9:	89 e5                	mov    ebp,esp
30000cab:	83 ec 10             	sub    esp,0x10
30000cae:	e8 43 1d 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000cb3:	05 2d 36 00 00       	add    eax,0x362d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
30000cb8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000cbb:	83 c2 20             	add    edx,0x20
30000cbe:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
30000cc1:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000cc7:	8b 0a                	mov    ecx,DWORD PTR [edx]
30000cc9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30000ccc:	01 d1                	add    ecx,edx
30000cce:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
30000cd4:	8b 12                	mov    edx,DWORD PTR [edx]
30000cd6:	39 d1                	cmp    ecx,edx
30000cd8:	76 4e                	jbe    30000d28 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:29
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
30000cda:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000ce0:	8b 12                	mov    edx,DWORD PTR [edx]
30000ce2:	8b 80 ec ff ff ff    	mov    eax,DWORD PTR [eax-0x14]
30000ce8:	8b 00                	mov    eax,DWORD PTR [eax]
30000cea:	29 c2                	sub    edx,eax
30000cec:	89 d0                	mov    eax,edx
30000cee:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:30
        if (newSize== 0 || newSize%PAGE_SIZE)
30000cf1:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
30000cf5:	74 0c                	je     30000d03 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:30 (discriminator 1)
30000cf7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000cfa:	25 ff 0f 00 00       	and    eax,0xfff
30000cff:	85 c0                	test   eax,eax
30000d01:	74 10                	je     30000d13 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
30000d03:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000d06:	25 00 f0 ff ff       	and    eax,0xfffff000
30000d0b:	05 00 10 00 00       	add    eax,0x1000
30000d10:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:35
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
30000d13:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
30000d1a:	77 07                	ja     30000d23 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:36
            return ALLOC_REQUEST_SIZE;
30000d1c:	b8 00 20 03 00       	mov    eax,0x32000
30000d21:	eb 0a                	jmp    30000d2d <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
        else
            return newSize;
30000d23:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000d26:	eb 05                	jmp    30000d2d <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:41
    }
    else
        return 0;
30000d28:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:42
}
30000d2d:	c9                   	leave  
30000d2e:	c3                   	ret    

30000d2f <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45

void*  mallocI(size_t size)
{
30000d2f:	55                   	push   ebp
30000d30:	89 e5                	mov    ebp,esp
30000d32:	53                   	push   ebx
30000d33:	83 ec 24             	sub    esp,0x24
30000d36:	e8 f5 1c 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
30000d3b:	81 c3 a5 35 00 00    	add    ebx,0x35a5
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
30000d41:	83 ec 04             	sub    esp,0x4
30000d44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000d47:	8d 83 cf fb ff ff    	lea    eax,[ebx-0x431]
30000d4d:	50                   	push   eax
30000d4e:	68 00 00 00 01       	push   0x1000000
30000d53:	e8 5b fd ff ff       	call   30000ab3 <printdI>
30000d58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:53
    needed = newHeapRequiredToFulfillRequest(size);
30000d5b:	83 ec 0c             	sub    esp,0xc
30000d5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000d61:	e8 42 ff ff ff       	call   30000ca8 <newHeapRequiredToFulfillRequest>
30000d66:	83 c4 10             	add    esp,0x10
30000d69:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:54
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
30000d6c:	83 ec 04             	sub    esp,0x4
30000d6f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30000d72:	8d 83 df fb ff ff    	lea    eax,[ebx-0x421]
30000d78:	50                   	push   eax
30000d79:	68 00 00 00 01       	push   0x1000000
30000d7e:	e8 30 fd ff ff       	call   30000ab3 <printdI>
30000d83:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    if (needed!=0)      //New heap required
30000d86:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000d8a:	0f 84 ae 00 00 00    	je     30000e3e <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:57
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
30000d90:	83 ec 08             	sub    esp,0x8
30000d93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30000d96:	68 65 01 00 00       	push   0x165
30000d9b:	e8 83 fb ff ff       	call   30000923 <do_syscall1>
30000da0:	83 c4 10             	add    esp,0x10
30000da3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
30000da6:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30000dac:	8b 00                	mov    eax,DWORD PTR [eax]
30000dae:	83 ec 04             	sub    esp,0x4
30000db1:	50                   	push   eax
30000db2:	8d 83 fb fb ff ff    	lea    eax,[ebx-0x405]
30000db8:	50                   	push   eax
30000db9:	68 00 00 00 01       	push   0x1000000
30000dbe:	e8 f0 fc ff ff       	call   30000ab3 <printdI>
30000dc3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:60
        heapEnd=allocatedPtr+needed;
30000dc6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000dc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000dcc:	01 c2                	add    edx,eax
30000dce:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30000dd4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
30000dd6:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30000ddc:	8b 00                	mov    eax,DWORD PTR [eax]
30000dde:	83 ec 0c             	sub    esp,0xc
30000de1:	50                   	push   eax
30000de2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000de5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30000de8:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
30000dee:	50                   	push   eax
30000def:	68 00 00 00 01       	push   0x1000000
30000df4:	e8 ba fc ff ff       	call   30000ab3 <printdI>
30000df9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
        if (heapBase==0)    //Hasn't been initialized yet!
30000dfc:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000e02:	8b 00                	mov    eax,DWORD PTR [eax]
30000e04:	85 c0                	test   eax,eax
30000e06:	75 36                	jne    30000e3e <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:64
        {
            heapCurr=allocatedPtr;
30000e08:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000e0e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000e11:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65
            heapBase=allocatedPtr;
30000e13:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000e19:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000e1c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:66
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
30000e1e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000e24:	8b 00                	mov    eax,DWORD PTR [eax]
30000e26:	83 ec 04             	sub    esp,0x4
30000e29:	50                   	push   eax
30000e2a:	8d 83 58 fc ff ff    	lea    eax,[ebx-0x3a8]
30000e30:	50                   	push   eax
30000e31:	68 00 00 00 01       	push   0x1000000
30000e36:	e8 78 fc ff ff       	call   30000ab3 <printdI>
30000e3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:69
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
30000e3e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000e44:	8b 00                	mov    eax,DWORD PTR [eax]
30000e46:	83 ec 04             	sub    esp,0x4
30000e49:	50                   	push   eax
30000e4a:	8d 83 94 fc ff ff    	lea    eax,[ebx-0x36c]
30000e50:	50                   	push   eax
30000e51:	68 00 00 00 01       	push   0x1000000
30000e56:	e8 58 fc ff ff       	call   30000ab3 <printdI>
30000e5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:70
    heapPtr = (heaprec_t*)heapCurr;
30000e5e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000e64:	8b 00                	mov    eax,DWORD PTR [eax]
30000e66:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71
    heapPtr->marker=ALLOC_MARKER_VALUE;
30000e69:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000e6c:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72
    heapPtr->len=size;
30000e72:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000e75:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000e78:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    heapPtr->inUse=true;
30000e7b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000e7e:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:74
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
30000e82:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000e88:	8b 00                	mov    eax,DWORD PTR [eax]
30000e8a:	6a 10                	push   0x10
30000e8c:	50                   	push   eax
30000e8d:	8d 83 bc fc ff ff    	lea    eax,[ebx-0x344]
30000e93:	50                   	push   eax
30000e94:	68 00 00 00 01       	push   0x1000000
30000e99:	e8 15 fc ff ff       	call   30000ab3 <printdI>
30000e9e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
30000ea1:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000ea7:	8b 00                	mov    eax,DWORD PTR [eax]
30000ea9:	83 c0 10             	add    eax,0x10
30000eac:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
30000eaf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000eb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30000eb5:	8d 50 10             	lea    edx,[eax+0x10]
30000eb8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000ebb:	01 d0                	add    eax,edx
30000ebd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
30000ec0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000ec3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000ec6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:78
    heapCurr+=size+(sizeof(heaprec_t));
30000ec9:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000ecf:	8b 10                	mov    edx,DWORD PTR [eax]
30000ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000ed4:	01 d0                	add    eax,edx
30000ed6:	8d 50 10             	lea    edx,[eax+0x10]
30000ed9:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000edf:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
30000ee1:	83 ec 04             	sub    esp,0x4
30000ee4:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
30000ee7:	8d 83 f4 fc ff ff    	lea    eax,[ebx-0x30c]
30000eed:	50                   	push   eax
30000eee:	68 00 00 00 01       	push   0x1000000
30000ef3:	e8 bb fb ff ff       	call   30000ab3 <printdI>
30000ef8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
    return retVal;
30000efb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
}
30000efe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000f01:	c9                   	leave  
30000f02:	c3                   	ret    

30000f03 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
30000f03:	55                   	push   ebp
30000f04:	89 e5                	mov    ebp,esp
30000f06:	83 ec 08             	sub    esp,0x8
30000f09:	e8 e8 1a 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000f0e:	05 d2 33 00 00       	add    eax,0x33d2
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
    return mallocI(size);
30000f13:	83 ec 0c             	sub    esp,0xc
30000f16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000f19:	e8 11 fe ff ff       	call   30000d2f <mallocI>
30000f1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
}
30000f21:	c9                   	leave  
30000f22:	c3                   	ret    

30000f23 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89

__attribute__((visibility("default"))) void free(void* fpointer)
{
30000f23:	55                   	push   ebp
30000f24:	89 e5                	mov    ebp,esp
30000f26:	83 ec 10             	sub    esp,0x10
30000f29:	e8 c8 1a 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000f2e:	05 b2 33 00 00       	add    eax,0x33b2
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
30000f33:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000f37:	74 20                	je     30000f59 <free+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
30000f39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000f3c:	83 e8 10             	sub    eax,0x10
30000f3f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
30000f42:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f45:	8b 00                	mov    eax,DWORD PTR [eax]
30000f47:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
30000f4c:	74 02                	je     30000f50 <free+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101 (discriminator 2)
    {
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
30000f4e:	eb fe                	jmp    30000f4e <free+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:103
    }
    mp->inUse=false;
30000f50:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f53:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
30000f57:	eb 01                	jmp    30000f5a <free+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
__attribute__((visibility("default"))) void free(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
30000f59:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
    }
    mp->inUse=false;
}
30000f5a:	c9                   	leave  
30000f5b:	c3                   	ret    

30000f5c <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:107

void malloc_cleanup()
{
30000f5c:	55                   	push   ebp
30000f5d:	89 e5                	mov    ebp,esp
30000f5f:	53                   	push   ebx
30000f60:	83 ec 04             	sub    esp,0x4
30000f63:	e8 8e 1a 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000f68:	05 78 33 00 00       	add    eax,0x3378
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:108
    do_syscall1(SYSCALL_FREE, heapBase);
30000f6d:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
30000f73:	8b 12                	mov    edx,DWORD PTR [edx]
30000f75:	83 ec 08             	sub    esp,0x8
30000f78:	52                   	push   edx
30000f79:	68 64 01 00 00       	push   0x164
30000f7e:	89 c3                	mov    ebx,eax
30000f80:	e8 9e f9 ff ff       	call   30000923 <do_syscall1>
30000f85:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109
30000f88:	90                   	nop
30000f89:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000f8c:	c9                   	leave  
30000f8d:	c3                   	ret    
30000f8e:	66 90                	xchg   ax,ax

30000f90 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:11
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
30000f90:	55                   	push   ebp
30000f91:	89 e5                	mov    ebp,esp
30000f93:	83 ec 20             	sub    esp,0x20
30000f96:	e8 5b 1a 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30000f9b:	05 45 33 00 00       	add    eax,0x3345
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:14
    bool dw,dd;
    
    dd=n%4==0;
30000fa0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000fa3:	83 e0 03             	and    eax,0x3
30000fa6:	85 c0                	test   eax,eax
30000fa8:	0f 94 c0             	sete   al
30000fab:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    dw=n%2==0;
30000fae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000fb1:	83 e0 01             	and    eax,0x1
30000fb4:	85 c0                	test   eax,eax
30000fb6:	0f 94 c0             	sete   al
30000fb9:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    if (dd)
30000fbc:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
30000fc0:	74 7d                	je     3000103f <memcpy+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:18
    {
        n /=4;
30000fc2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000fc5:	c1 e8 02             	shr    eax,0x2
30000fc8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
        const uint32_t *f = src;
30000fcb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000fce:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        uint32_t *t = dest;
30000fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000fd4:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:22

        if (f < t) {
30000fd7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000fda:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
30000fdd:	73 4b                	jae    3000102a <memcpy+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23
                f += n;
30000fdf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000fe2:	c1 e0 02             	shl    eax,0x2
30000fe5:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                t += n;
30000fe8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000feb:	c1 e0 02             	shl    eax,0x2
30000fee:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                while ( (n)-- > 0)
30000ff1:	eb 12                	jmp    30001005 <memcpy+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                        *--t = *--f;
30000ff3:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
30000ff7:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
30000ffb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000ffe:	8b 10                	mov    edx,DWORD PTR [eax]
30001000:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001003:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
30001005:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001008:	8d 50 ff             	lea    edx,[eax-0x1]
3000100b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000100e:	85 c0                	test   eax,eax
30001010:	75 e1                	jne    30000ff3 <memcpy+0x63>
30001012:	eb 23                	jmp    30001037 <memcpy+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
30001014:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001017:	8d 50 04             	lea    edx,[eax+0x4]
3000101a:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
3000101d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001020:	8d 4a 04             	lea    ecx,[edx+0x4]
30001023:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
30001026:	8b 12                	mov    edx,DWORD PTR [edx]
30001028:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:28
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
3000102a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000102d:	8d 50 ff             	lea    edx,[eax-0x1]
30001030:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001033:	85 c0                	test   eax,eax
30001035:	75 dd                	jne    30001014 <memcpy+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *t++ = *f++;
        return dest;
30001037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000103a:	e9 ea 00 00 00       	jmp    30001129 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:32
    }
    else if (dw)
3000103f:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
30001043:	74 79                	je     300010be <memcpy+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:34
    {
        n /=2;
30001045:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001048:	d1 e8                	shr    eax,1
3000104a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
        const uint32_t *f = src;
3000104d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001050:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        uint32_t *t = dest;
30001053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001056:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:38

        if (f < t) {
30001059:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000105c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
3000105f:	73 4b                	jae    300010ac <memcpy+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39
                f += n;
30001061:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001064:	c1 e0 02             	shl    eax,0x2
30001067:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                t += n;
3000106a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000106d:	c1 e0 02             	shl    eax,0x2
30001070:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                while ( (n)-- > 0)
30001073:	eb 12                	jmp    30001087 <memcpy+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                        *--t = *--f;
30001075:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
30001079:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
3000107d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001080:	8b 10                	mov    edx,DWORD PTR [eax]
30001082:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001085:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
30001087:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000108a:	8d 50 ff             	lea    edx,[eax-0x1]
3000108d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001090:	85 c0                	test   eax,eax
30001092:	75 e1                	jne    30001075 <memcpy+0xe5>
30001094:	eb 23                	jmp    300010b9 <memcpy+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
30001096:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001099:	8d 50 04             	lea    edx,[eax+0x4]
3000109c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
3000109f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300010a2:	8d 4a 04             	lea    ecx,[edx+0x4]
300010a5:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
300010a8:	8b 12                	mov    edx,DWORD PTR [edx]
300010aa:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:44
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
300010ac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300010af:	8d 50 ff             	lea    edx,[eax-0x1]
300010b2:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300010b5:	85 c0                	test   eax,eax
300010b7:	75 dd                	jne    30001096 <memcpy+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *t++ = *f++;
        return dest;
300010b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300010bc:	eb 6b                	jmp    30001129 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:50
    }
    else
    {
        const char *f = src;
300010be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300010c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
        char *t = dest;
300010c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300010c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:53

        if (f < t) {
300010ca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300010cd:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
300010d0:	73 47                	jae    30001119 <memcpy+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54
                f += n;
300010d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300010d5:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                t += n;
300010d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300010db:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                while (n-- > 0)
300010de:	eb 13                	jmp    300010f3 <memcpy+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                        *--t = *--f;
300010e0:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
300010e4:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
300010e8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300010eb:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300010ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
300010f1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
300010f3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300010f6:	8d 50 ff             	lea    edx,[eax-0x1]
300010f9:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300010fc:	85 c0                	test   eax,eax
300010fe:	75 e0                	jne    300010e0 <memcpy+0x150>
30001100:	eb 24                	jmp    30001126 <memcpy+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
30001102:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001105:	8d 50 01             	lea    edx,[eax+0x1]
30001108:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
3000110b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000110e:	8d 4a 01             	lea    ecx,[edx+0x1]
30001111:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
30001114:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001117:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:59
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
30001119:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000111c:	8d 50 ff             	lea    edx,[eax-0x1]
3000111f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001122:	85 c0                	test   eax,eax
30001124:	75 dc                	jne    30001102 <memcpy+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *t++ = *f++;
        return dest;
30001126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:63
    }
}
30001129:	c9                   	leave  
3000112a:	c3                   	ret    
3000112b:	90                   	nop

3000112c <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

VISIBLE void *memset(void *d1, int val, size_t len)
{
3000112c:	55                   	push   ebp
3000112d:	89 e5                	mov    ebp,esp
3000112f:	83 ec 20             	sub    esp,0x20
30001132:	e8 bf 18 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001137:	05 a9 31 00 00       	add    eax,0x31a9
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
3000113c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000113f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
30001142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001145:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
30001148:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000114b:	c1 e0 10             	shl    eax,0x10
3000114e:	89 c2                	mov    edx,eax
30001150:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001153:	c1 e0 08             	shl    eax,0x8
30001156:	09 c2                	or     edx,eax
30001158:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000115b:	09 d0                	or     eax,edx
3000115d:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
30001161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001164:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
30001167:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000116a:	c1 e0 18             	shl    eax,0x18
3000116d:	89 c2                	mov    edx,eax
3000116f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001172:	c1 e0 10             	shl    eax,0x10
30001175:	09 c2                	or     edx,eax
30001177:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000117a:	c1 e0 08             	shl    eax,0x8
3000117d:	09 d0                	or     eax,edx
3000117f:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
30001182:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
30001185:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001188:	83 e0 03             	and    eax,0x3
3000118b:	85 c0                	test   eax,eax
3000118d:	75 1c                	jne    300011ab <memset+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
3000118f:	eb 0e                	jmp    3000119f <memset+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
30001191:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001194:	8d 50 04             	lea    edx,[eax+0x4]
30001197:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000119a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000119d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
3000119f:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
300011a3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300011a7:	75 e8                	jne    30001191 <memset+0x65>
300011a9:	eb 43                	jmp    300011ee <memset+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
300011ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300011ae:	83 e0 01             	and    eax,0x1
300011b1:	85 c0                	test   eax,eax
300011b3:	75 2c                	jne    300011e1 <memset+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
300011b5:	eb 10                	jmp    300011c7 <memset+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
300011b7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
300011ba:	8d 50 02             	lea    edx,[eax+0x2]
300011bd:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
300011c0:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
300011c4:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
300011c7:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
300011cb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300011cf:	75 e6                	jne    300011b7 <memset+0x8b>
300011d1:	eb 1b                	jmp    300011ee <memset+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
300011d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300011d6:	8d 50 01             	lea    edx,[eax+0x1]
300011d9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300011dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300011df:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
300011e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300011e4:	8d 50 ff             	lea    edx,[eax-0x1]
300011e7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300011ea:	85 c0                	test   eax,eax
300011ec:	75 e5                	jne    300011d3 <memset+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
300011ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
300011f1:	c9                   	leave  
300011f2:	c3                   	ret    

300011f3 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

void *memsetI(void *d1, int val, size_t len)
{
300011f3:	55                   	push   ebp
300011f4:	89 e5                	mov    ebp,esp
300011f6:	83 ec 20             	sub    esp,0x20
300011f9:	e8 f8 17 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300011fe:	05 e2 30 00 00       	add    eax,0x30e2
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    uint8_t *d = d1;
30001203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001206:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
    uint16_t*e = d1;
30001209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000120c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:35
    uint16_t eVal=(val << 16) | (val << 8) | val;
3000120f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001212:	c1 e0 10             	shl    eax,0x10
30001215:	89 c2                	mov    edx,eax
30001217:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000121a:	c1 e0 08             	shl    eax,0x8
3000121d:	09 c2                	or     edx,eax
3000121f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001222:	09 d0                	or     eax,edx
30001224:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:36
    uint32_t*f = d1;
30001228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000122b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:37
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
3000122e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001231:	c1 e0 18             	shl    eax,0x18
30001234:	89 c2                	mov    edx,eax
30001236:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001239:	c1 e0 10             	shl    eax,0x10
3000123c:	09 c2                	or     edx,eax
3000123e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001241:	c1 e0 08             	shl    eax,0x8
30001244:	09 d0                	or     eax,edx
30001246:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
30001249:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:39
    
    if ((len%4)==0)
3000124c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000124f:	83 e0 03             	and    eax,0x3
30001252:	85 c0                	test   eax,eax
30001254:	75 1c                	jne    30001272 <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:40
    while (len-=4) {
30001256:	eb 0e                	jmp    30001266 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:41
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
30001258:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000125b:	8d 50 04             	lea    edx,[eax+0x4]
3000125e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001261:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30001264:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:40
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
30001266:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
3000126a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000126e:	75 e8                	jne    30001258 <memsetI+0x65>
30001270:	eb 43                	jmp    300012b5 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:43
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
30001272:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001275:	83 e0 01             	and    eax,0x1
30001278:	85 c0                	test   eax,eax
3000127a:	75 2c                	jne    300012a8 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:44
    while (len-=2) {
3000127c:	eb 10                	jmp    3000128e <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:45
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
3000127e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001281:	8d 50 02             	lea    edx,[eax+0x2]
30001284:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30001287:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
3000128b:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:44
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
3000128e:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
30001292:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001296:	75 e6                	jne    3000127e <memsetI+0x8b>
30001298:	eb 1b                	jmp    300012b5 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:49
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
3000129a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000129d:	8d 50 01             	lea    edx,[eax+0x1]
300012a0:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300012a3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300012a6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:48
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
300012a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012ab:	8d 50 ff             	lea    edx,[eax-0x1]
300012ae:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300012b1:	85 c0                	test   eax,eax
300012b3:	75 e5                	jne    3000129a <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:51
        *d++ = val;
    }
    return d1;
300012b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:52
}
300012b8:	c9                   	leave  
300012b9:	c3                   	ret    
300012ba:	66 90                	xchg   ax,ax

300012bc <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:10
 */
#include "libChrisOS.h"
#include "types.h"

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset) //memory map pages either to a file or anonymously
{
300012bc:	55                   	push   ebp
300012bd:	89 e5                	mov    ebp,esp
300012bf:	e8 32 17 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300012c4:	05 1c 30 00 00       	add    eax,0x301c
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:12
    
}
300012c9:	90                   	nop
300012ca:	5d                   	pop    ebp
300012cb:	c3                   	ret    

300012cc <readConsole>:
readConsole():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:19
file_operations_t fops;
inode_t console_node={.i_dev=1,.i_mode=0};
file_t console_file;

size_t readConsole (struct file * fptr, char *buffer, size_t size, uint64_t* whatever) 
{
300012cc:	55                   	push   ebp
300012cd:	89 e5                	mov    ebp,esp
300012cf:	53                   	push   ebx
300012d0:	83 ec 04             	sub    esp,0x4
300012d3:	e8 1e 17 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300012d8:	05 08 30 00 00       	add    eax,0x3008
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:20
    return gets(buffer,size,1);
300012dd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
300012e0:	83 ec 04             	sub    esp,0x4
300012e3:	6a 01                	push   0x1
300012e5:	52                   	push   edx
300012e6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300012e9:	89 c3                	mov    ebx,eax
300012eb:	e8 20 17 00 00       	call   30002a10 <__x86.get_pc_thunk.ax+0x1a>
300012f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:21
}
300012f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300012f6:	c9                   	leave  
300012f7:	c3                   	ret    

300012f8 <writeConsole>:
writeConsole():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:24

size_t writeConsole(struct file * fptr, const char *buffer, size_t size, uint64_t *whatever)
{
300012f8:	55                   	push   ebp
300012f9:	89 e5                	mov    ebp,esp
300012fb:	53                   	push   ebx
300012fc:	83 ec 04             	sub    esp,0x4
300012ff:	e8 f2 16 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001304:	05 dc 2f 00 00       	add    eax,0x2fdc
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    return printI(buffer);
30001309:	83 ec 0c             	sub    esp,0xc
3000130c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000130f:	89 c3                	mov    ebx,eax
30001311:	e8 69 f7 ff ff       	call   30000a7f <printI>
30001316:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
}
30001319:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000131c:	c9                   	leave  
3000131d:	c3                   	ret    

3000131e <moveTo>:
moveTo():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29

VISIBLE void moveTo(int row, int col)
{
3000131e:	55                   	push   ebp
3000131f:	89 e5                	mov    ebp,esp
30001321:	53                   	push   ebx
30001322:	83 ec 24             	sub    esp,0x24
30001325:	e8 06 17 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
3000132a:	81 c3 b6 2f 00 00    	add    ebx,0x2fb6
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
    char buff[10];
    char rowString[3], colString[3];
    int buffPtr=0;
30001330:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:35
    

    memsetI(buff,0,10);
30001337:	83 ec 04             	sub    esp,0x4
3000133a:	6a 0a                	push   0xa
3000133c:	6a 00                	push   0x0
3000133e:	8d 45 de             	lea    eax,[ebp-0x22]
30001341:	50                   	push   eax
30001342:	e8 ac fe ff ff       	call   300011f3 <memsetI>
30001347:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:37
    //Convert row and column values to strings
    itoaI(row, rowString);
3000134a:	83 ec 08             	sub    esp,0x8
3000134d:	8d 45 db             	lea    eax,[ebp-0x25]
30001350:	50                   	push   eax
30001351:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001354:	e8 8d ef ff ff       	call   300002e6 <itoaI>
30001359:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:38
    itoaI(col, colString);
3000135c:	83 ec 08             	sub    esp,0x8
3000135f:	8d 45 d8             	lea    eax,[ebp-0x28]
30001362:	50                   	push   eax
30001363:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001366:	e8 7b ef ff ff       	call   300002e6 <itoaI>
3000136b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:41
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
3000136e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001371:	8d 50 01             	lea    edx,[eax+0x1]
30001374:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001377:	c6 44 05 de 1b       	mov    BYTE PTR [ebp+eax*1-0x22],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:42
    buff[buffPtr++] = '[';
3000137c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000137f:	8d 50 01             	lea    edx,[eax+0x1]
30001382:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001385:	c6 44 05 de 5b       	mov    BYTE PTR [ebp+eax*1-0x22],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:45

    
    for (int cnt=0;cnt<3;cnt++)
3000138a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
30001391:	eb 2b                	jmp    300013be <moveTo+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:46
        if (rowString[cnt]!=0)
30001393:	8d 55 db             	lea    edx,[ebp-0x25]
30001396:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001399:	01 d0                	add    eax,edx
3000139b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000139e:	84 c0                	test   al,al
300013a0:	74 24                	je     300013c6 <moveTo+0xa8>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:47
            buff[buffPtr++]=rowString[cnt];
300013a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300013a5:	8d 50 01             	lea    edx,[eax+0x1]
300013a8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300013ab:	8d 4d db             	lea    ecx,[ebp-0x25]
300013ae:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300013b1:	01 ca                	add    edx,ecx
300013b3:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300013b6:	88 54 05 de          	mov    BYTE PTR [ebp+eax*1-0x22],dl
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:45
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
    buff[buffPtr++] = '[';

    
    for (int cnt=0;cnt<3;cnt++)
300013ba:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:45 (discriminator 1)
300013be:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
300013c2:	7e cf                	jle    30001393 <moveTo+0x75>
300013c4:	eb 01                	jmp    300013c7 <moveTo+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:49
        if (rowString[cnt]!=0)
            buff[buffPtr++]=rowString[cnt];
        else
            break;
300013c6:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:50
    buff[buffPtr++] = ';';
300013c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300013ca:	8d 50 01             	lea    edx,[eax+0x1]
300013cd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300013d0:	c6 44 05 de 3b       	mov    BYTE PTR [ebp+eax*1-0x22],0x3b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:51
    for (int cnt=0;cnt<3;cnt++)
300013d5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
300013dc:	eb 2b                	jmp    30001409 <moveTo+0xeb>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:52
        if (colString[cnt]!=0)
300013de:	8d 55 d8             	lea    edx,[ebp-0x28]
300013e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300013e4:	01 d0                	add    eax,edx
300013e6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300013e9:	84 c0                	test   al,al
300013eb:	74 24                	je     30001411 <moveTo+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:53
            buff[buffPtr++]=colString[cnt];
300013ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300013f0:	8d 50 01             	lea    edx,[eax+0x1]
300013f3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300013f6:	8d 4d d8             	lea    ecx,[ebp-0x28]
300013f9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300013fc:	01 ca                	add    edx,ecx
300013fe:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001401:	88 54 05 de          	mov    BYTE PTR [ebp+eax*1-0x22],dl
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:51
        if (rowString[cnt]!=0)
            buff[buffPtr++]=rowString[cnt];
        else
            break;
    buff[buffPtr++] = ';';
    for (int cnt=0;cnt<3;cnt++)
30001405:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:51 (discriminator 1)
30001409:	83 7d ec 02          	cmp    DWORD PTR [ebp-0x14],0x2
3000140d:	7e cf                	jle    300013de <moveTo+0xc0>
3000140f:	eb 01                	jmp    30001412 <moveTo+0xf4>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:55
        if (colString[cnt]!=0)
            buff[buffPtr++]=colString[cnt];
        else
            break;
30001411:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:56
    buff[buffPtr++] = 'H';
30001412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001415:	8d 50 01             	lea    edx,[eax+0x1]
30001418:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000141b:	c6 44 05 de 48       	mov    BYTE PTR [ebp+eax*1-0x22],0x48
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:57
    for (int cnt=buffPtr;cnt<10;cnt++)
30001420:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001423:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
30001426:	eb 12                	jmp    3000143a <moveTo+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:58 (discriminator 3)
        buff[buffPtr++]=0;
30001428:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000142b:	8d 50 01             	lea    edx,[eax+0x1]
3000142e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001431:	c6 44 05 de 00       	mov    BYTE PTR [ebp+eax*1-0x22],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:57 (discriminator 3)
        if (colString[cnt]!=0)
            buff[buffPtr++]=colString[cnt];
        else
            break;
    buff[buffPtr++] = 'H';
    for (int cnt=buffPtr;cnt<10;cnt++)
30001436:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:57 (discriminator 1)
3000143a:	83 7d e8 09          	cmp    DWORD PTR [ebp-0x18],0x9
3000143e:	7e e8                	jle    30001428 <moveTo+0x10a>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:60
        buff[buffPtr++]=0;
    
    printI(buff);
30001440:	83 ec 0c             	sub    esp,0xc
30001443:	8d 45 de             	lea    eax,[ebp-0x22]
30001446:	50                   	push   eax
30001447:	e8 33 f6 ff ff       	call   30000a7f <printI>
3000144c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:62
    
    return;
3000144f:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:63
}
30001450:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001453:	c9                   	leave  
30001454:	c3                   	ret    

30001455 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:67

//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
30001455:	55                   	push   ebp
30001456:	89 e5                	mov    ebp,esp
30001458:	53                   	push   ebx
30001459:	83 ec 14             	sub    esp,0x14
3000145c:	e8 cf 15 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
30001461:	81 c3 7f 2e 00 00    	add    ebx,0x2e7f
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:69
    char buff[5];
    int buffPtr=0;
30001467:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:71

    memsetI(buff,0,10);
3000146e:	83 ec 04             	sub    esp,0x4
30001471:	6a 0a                	push   0xa
30001473:	6a 00                	push   0x0
30001475:	8d 45 ef             	lea    eax,[ebp-0x11]
30001478:	50                   	push   eax
30001479:	e8 75 fd ff ff       	call   300011f3 <memsetI>
3000147e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:74
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
30001481:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001484:	8d 50 01             	lea    edx,[eax+0x1]
30001487:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000148a:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    buff[buffPtr++] = '[';
3000148f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001492:	8d 50 01             	lea    edx,[eax+0x1]
30001495:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001498:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '0';
3000149d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300014a0:	8d 50 01             	lea    edx,[eax+0x1]
300014a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300014a6:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = 'K';
300014ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300014ae:	8d 50 01             	lea    edx,[eax+0x1]
300014b1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300014b4:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr] = '\0';
300014b9:	8d 55 ef             	lea    edx,[ebp-0x11]
300014bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300014bf:	01 d0                	add    eax,edx
300014c1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    printI(buff);
300014c4:	83 ec 0c             	sub    esp,0xc
300014c7:	8d 45 ef             	lea    eax,[ebp-0x11]
300014ca:	50                   	push   eax
300014cb:	e8 af f5 ff ff       	call   30000a7f <printI>
300014d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:81
    
    return;
300014d3:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
}
300014d4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300014d7:	c9                   	leave  
300014d8:	c3                   	ret    

300014d9 <ioInit>:
ioInit():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:85

void ioInit()
{
300014d9:	55                   	push   ebp
300014da:	89 e5                	mov    ebp,esp
300014dc:	e8 15 15 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300014e1:	05 ff 2d 00 00       	add    eax,0x2dff
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:86
    console_file.f_inode=&console_node;
300014e6:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
300014ec:	8d 88 80 fe ff ff    	lea    ecx,[eax-0x180]
300014f2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:87
    fops.read=readConsole;
300014f5:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
300014fb:	8d 88 ec cf ff ff    	lea    ecx,[eax-0x3014]
30001501:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:88
    fops.write=writeConsole;
30001503:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
30001509:	8d 88 18 d0 ff ff    	lea    ecx,[eax-0x2fe8]
3000150f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:89
    console_file.fops=fops;
30001512:	8b 88 e8 ff ff ff    	mov    ecx,DWORD PTR [eax-0x18]
30001518:	8b 80 e4 ff ff ff    	mov    eax,DWORD PTR [eax-0x1c]
3000151e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
30001521:	8b 00                	mov    eax,DWORD PTR [eax]
30001523:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
30001526:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:90
30001529:	90                   	nop
3000152a:	5d                   	pop    ebp
3000152b:	c3                   	ret    

3000152c <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
3000152c:	55                   	push   ebp
3000152d:	89 e5                	mov    ebp,esp
3000152f:	53                   	push   ebx
30001530:	83 ec 04             	sub    esp,0x4
30001533:	e8 f8 14 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
30001538:	81 c3 a8 2d 00 00    	add    ebx,0x2da8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
3000153e:	83 ec 0c             	sub    esp,0xc
30001541:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001544:	e8 b4 02 00 00       	call   300017fd <strlenI>
30001549:	83 c4 10             	add    esp,0x10
3000154c:	89 c2                	mov    edx,eax
3000154e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001551:	01 d0                	add    eax,edx
30001553:	83 ec 08             	sub    esp,0x8
30001556:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001559:	50                   	push   eax
3000155a:	e8 59 01 00 00       	call   300016b8 <strcpyI>
3000155f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
30001562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
30001565:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001568:	c9                   	leave  
30001569:	c3                   	ret    

3000156a <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
3000156a:	55                   	push   ebp
3000156b:	89 e5                	mov    ebp,esp
3000156d:	53                   	push   ebx
3000156e:	83 ec 04             	sub    esp,0x4
30001571:	e8 ba 14 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
30001576:	81 c3 6a 2d 00 00    	add    ebx,0x2d6a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
3000157c:	83 ec 0c             	sub    esp,0xc
3000157f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001582:	e8 76 02 00 00       	call   300017fd <strlenI>
30001587:	83 c4 10             	add    esp,0x10
3000158a:	89 c2                	mov    edx,eax
3000158c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000158f:	01 d0                	add    eax,edx
30001591:	83 ec 08             	sub    esp,0x8
30001594:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001597:	50                   	push   eax
30001598:	e8 1b 01 00 00       	call   300016b8 <strcpyI>
3000159d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
300015a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
300015a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300015a6:	c9                   	leave  
300015a7:	c3                   	ret    

300015a8 <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
300015a8:	55                   	push   ebp
300015a9:	89 e5                	mov    ebp,esp
300015ab:	83 ec 10             	sub    esp,0x10
300015ae:	e8 43 14 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300015b3:	05 2d 2d 00 00       	add    eax,0x2d2d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
300015b8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
300015bf:	eb 04                	jmp    300015c5 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
300015c1:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
300015c5:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300015c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300015cb:	01 d0                	add    eax,edx
300015cd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300015d0:	84 c0                	test   al,al
300015d2:	75 ed                	jne    300015c1 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
300015d4:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
300015db:	eb 1d                	jmp    300015fa <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
300015dd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300015e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300015e3:	01 c2                	add    edx,eax
300015e5:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
300015e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300015eb:	01 c8                	add    eax,ecx
300015ed:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300015f0:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
300015f2:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
300015f6:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
300015fa:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300015fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001600:	01 d0                	add    eax,edx
30001602:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001605:	84 c0                	test   al,al
30001607:	75 d4                	jne    300015dd <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
30001609:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
3000160c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000160f:	01 d0                	add    eax,edx
30001611:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
30001614:	90                   	nop
30001615:	c9                   	leave  
30001616:	c3                   	ret    
30001617:	90                   	nop

30001618 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
30001618:	55                   	push   ebp
30001619:	89 e5                	mov    ebp,esp
3000161b:	56                   	push   esi
3000161c:	53                   	push   ebx
3000161d:	83 ec 10             	sub    esp,0x10
30001620:	e8 d1 13 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001625:	05 bb 2c 00 00       	add    eax,0x2cbb
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
3000162a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
3000162d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
30001630:	89 d8                	mov    eax,ebx
30001632:	8d 58 01             	lea    ebx,[eax+0x1]
30001635:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001638:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
3000163b:	89 f0                	mov    eax,esi
3000163d:	8d 70 01             	lea    esi,[eax+0x1]
30001640:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001643:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
30001646:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
3000164a:	75 0e                	jne    3000165a <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
3000164c:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
30001650:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
30001654:	29 c2                	sub    edx,eax
30001656:	89 d0                	mov    eax,edx
30001658:	eb 15                	jmp    3000166f <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
3000165a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
3000165e:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
30001661:	74 cd                	je     30001630 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
30001663:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
30001667:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
3000166b:	29 c2                	sub    edx,eax
3000166d:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
3000166f:	83 c4 10             	add    esp,0x10
30001672:	5b                   	pop    ebx
30001673:	5e                   	pop    esi
30001674:	5d                   	pop    ebp
30001675:	c3                   	ret    
30001676:	66 90                	xchg   ax,ax

30001678 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
30001678:	55                   	push   ebp
30001679:	89 e5                	mov    ebp,esp
3000167b:	83 ec 10             	sub    esp,0x10
3000167e:	e8 73 13 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001683:	05 5d 2c 00 00       	add    eax,0x2c5d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
30001688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000168b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
3000168e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
3000168f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001692:	8d 50 01             	lea    edx,[eax+0x1]
30001695:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001698:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000169b:	8d 4a 01             	lea    ecx,[edx+0x1]
3000169e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300016a1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300016a4:	88 10                	mov    BYTE PTR [eax],dl
300016a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300016a9:	84 c0                	test   al,al
300016ab:	75 e2                	jne    3000168f <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
300016ad:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300016b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
300016b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
300016b6:	c9                   	leave  
300016b7:	c3                   	ret    

300016b8 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
300016b8:	55                   	push   ebp
300016b9:	89 e5                	mov    ebp,esp
300016bb:	83 ec 10             	sub    esp,0x10
300016be:	e8 33 13 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300016c3:	05 1d 2c 00 00       	add    eax,0x2c1d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
300016c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300016cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
300016ce:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
300016cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300016d2:	8d 50 01             	lea    edx,[eax+0x1]
300016d5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300016d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300016db:	8d 4a 01             	lea    ecx,[edx+0x1]
300016de:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300016e1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300016e4:	88 10                	mov    BYTE PTR [eax],dl
300016e6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300016e9:	84 c0                	test   al,al
300016eb:	75 e2                	jne    300016cf <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
300016ed:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300016f0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
300016f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
300016f6:	c9                   	leave  
300016f7:	c3                   	ret    

300016f8 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
300016f8:	55                   	push   ebp
300016f9:	89 e5                	mov    ebp,esp
300016fb:	83 ec 10             	sub    esp,0x10
300016fe:	e8 f3 12 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001703:	05 dd 2b 00 00       	add    eax,0x2bdd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
30001708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000170b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
3000170e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
3000170f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001712:	8d 50 01             	lea    edx,[eax+0x1]
30001715:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001718:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000171b:	8d 4a 01             	lea    ecx,[edx+0x1]
3000171e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001721:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001724:	88 10                	mov    BYTE PTR [eax],dl
30001726:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001729:	84 c0                	test   al,al
3000172b:	74 0d                	je     3000173a <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
3000172d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001730:	8d 50 ff             	lea    edx,[eax-0x1]
30001733:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001736:	85 c0                	test   eax,eax
30001738:	75 d5                	jne    3000170f <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
3000173a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
3000173d:	c9                   	leave  
3000173e:	c3                   	ret    
3000173f:	90                   	nop

30001740 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
30001740:	55                   	push   ebp
30001741:	89 e5                	mov    ebp,esp
30001743:	83 ec 04             	sub    esp,0x4
30001746:	e8 ab 12 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000174b:	05 95 2b 00 00       	add    eax,0x2b95
30001750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001753:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
30001756:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
3000175a:	7e 0d                	jle    30001769 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
3000175c:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
30001760:	7f 07                	jg     30001769 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
30001762:	b8 01 00 00 00       	mov    eax,0x1
30001767:	eb 05                	jmp    3000176e <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
30001769:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
3000176e:	c9                   	leave  
3000176f:	c3                   	ret    

30001770 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
30001770:	55                   	push   ebp
30001771:	89 e5                	mov    ebp,esp
30001773:	83 ec 10             	sub    esp,0x10
30001776:	e8 7b 12 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000177b:	05 65 2b 00 00       	add    eax,0x2b65
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
30001780:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
30001787:	eb 27                	jmp    300017b0 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
30001789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000178c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000178f:	89 c2                	mov    edx,eax
30001791:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001794:	01 d0                	add    eax,edx
30001796:	0f be c0             	movsx  eax,al
30001799:	50                   	push   eax
3000179a:	e8 a1 ff ff ff       	call   30001740 <check_digit>
3000179f:	83 c4 04             	add    esp,0x4
300017a2:	83 f0 01             	xor    eax,0x1
300017a5:	84 c0                	test   al,al
300017a7:	74 07                	je     300017b0 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
300017a9:	b8 00 00 00 00       	mov    eax,0x0
300017ae:	eb 17                	jmp    300017c7 <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
300017b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300017b3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300017b6:	0f be d0             	movsx  edx,al
300017b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300017bc:	01 d0                	add    eax,edx
300017be:	85 c0                	test   eax,eax
300017c0:	75 c7                	jne    30001789 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
300017c2:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
300017c7:	c9                   	leave  
300017c8:	c3                   	ret    
300017c9:	66 90                	xchg   ax,ax
300017cb:	90                   	nop

300017cc <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
300017cc:	55                   	push   ebp
300017cd:	89 e5                	mov    ebp,esp
300017cf:	83 ec 10             	sub    esp,0x10
300017d2:	e8 1f 12 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
300017d7:	05 09 2b 00 00       	add    eax,0x2b09
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
300017dc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
300017e3:	eb 04                	jmp    300017e9 <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
300017e5:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
300017e9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300017ec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300017ef:	01 d0                	add    eax,edx
300017f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300017f4:	84 c0                	test   al,al
300017f6:	75 ed                	jne    300017e5 <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
300017f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
300017fb:	c9                   	leave  
300017fc:	c3                   	ret    

300017fd <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
300017fd:	55                   	push   ebp
300017fe:	89 e5                	mov    ebp,esp
30001800:	83 ec 10             	sub    esp,0x10
30001803:	e8 ee 11 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001808:	05 d8 2a 00 00       	add    eax,0x2ad8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
3000180d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
30001814:	eb 04                	jmp    3000181a <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
30001816:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
3000181a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000181d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001820:	01 d0                	add    eax,edx
30001822:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001825:	84 c0                	test   al,al
30001827:	75 ed                	jne    30001816 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
30001829:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
3000182c:	c9                   	leave  
3000182d:	c3                   	ret    
3000182e:	66 90                	xchg   ax,ax

30001830 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
30001830:	55                   	push   ebp
30001831:	89 e5                	mov    ebp,esp
30001833:	e8 be 11 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001838:	05 a8 2a 00 00       	add    eax,0x2aa8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
3000183d:	eb 4b                	jmp    3000188a <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
3000183f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001842:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001845:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001848:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000184b:	38 c2                	cmp    dl,al
3000184d:	74 1e                	je     3000186d <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
3000184f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001852:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001855:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001858:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000185b:	38 c2                	cmp    dl,al
3000185d:	73 07                	jae    30001866 <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
3000185f:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001864:	eb 2f                	jmp    30001895 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
30001866:	b8 01 00 00 00       	mov    eax,0x1
3000186b:	eb 28                	jmp    30001895 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
3000186d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001870:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001873:	84 c0                	test   al,al
30001875:	75 07                	jne    3000187e <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
30001877:	b8 00 00 00 00       	mov    eax,0x0
3000187c:	eb 17                	jmp    30001895 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
3000187e:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
30001882:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
30001886:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
3000188a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000188e:	75 af                	jne    3000183f <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
30001890:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
30001895:	5d                   	pop    ebp
30001896:	c3                   	ret    

30001897 <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
30001897:	55                   	push   ebp
30001898:	89 e5                	mov    ebp,esp
3000189a:	e8 57 11 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000189f:	05 41 2a 00 00       	add    eax,0x2a41
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
300018a4:	eb 4b                	jmp    300018f1 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
300018a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018a9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300018ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300018af:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018b2:	38 c2                	cmp    dl,al
300018b4:	74 1e                	je     300018d4 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
300018b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018b9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300018bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300018bf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018c2:	38 c2                	cmp    dl,al
300018c4:	73 07                	jae    300018cd <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
300018c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
300018cb:	eb 2f                	jmp    300018fc <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
300018cd:	b8 01 00 00 00       	mov    eax,0x1
300018d2:	eb 28                	jmp    300018fc <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
300018d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018da:	84 c0                	test   al,al
300018dc:	75 07                	jne    300018e5 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
300018de:	b8 00 00 00 00       	mov    eax,0x0
300018e3:	eb 17                	jmp    300018fc <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
300018e5:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
300018e9:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
300018ed:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
300018f1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300018f5:	75 af                	jne    300018a6 <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
300018f7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
300018fc:	5d                   	pop    ebp
300018fd:	c3                   	ret    
300018fe:	66 90                	xchg   ax,ax

30001900 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
30001900:	55                   	push   ebp
30001901:	89 e5                	mov    ebp,esp
30001903:	83 ec 10             	sub    esp,0x10
30001906:	e8 eb 10 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000190b:	05 d5 29 00 00       	add    eax,0x29d5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
30001910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001913:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
30001916:	eb 1b                	jmp    30001933 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
30001918:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000191b:	8d 50 01             	lea    edx,[eax+0x1]
3000191e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001921:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001924:	8d 4a 01             	lea    ecx,[edx+0x1]
30001927:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
3000192a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
3000192d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
3000192f:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
30001933:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001937:	74 1c                	je     30001955 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
30001939:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000193c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000193f:	84 c0                	test   al,al
30001941:	75 d5                	jne    30001918 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001943:	eb 10                	jmp    30001955 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
30001945:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001948:	8d 50 01             	lea    edx,[eax+0x1]
3000194b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
3000194e:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
30001951:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001955:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001959:	75 ea                	jne    30001945 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
3000195b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
3000195e:	c9                   	leave  
3000195f:	c3                   	ret    

30001960 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
30001960:	55                   	push   ebp
30001961:	89 e5                	mov    ebp,esp
30001963:	e8 8e 10 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001968:	05 78 29 00 00       	add    eax,0x2978
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
3000196d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30001970:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001973:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001976:	e8 85 ff ff ff       	call   30001900 <strncpyI>
3000197b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
3000197e:	c9                   	leave  
3000197f:	c3                   	ret    

30001980 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
30001980:	55                   	push   ebp
30001981:	89 e5                	mov    ebp,esp
30001983:	57                   	push   edi
30001984:	56                   	push   esi
30001985:	53                   	push   ebx
30001986:	83 ec 08             	sub    esp,0x8
30001989:	e8 68 10 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000198e:	05 52 29 00 00       	add    eax,0x2952
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
30001993:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001996:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
3000199d:	89 f0                	mov    eax,esi
3000199f:	8d 70 01             	lea    esi,[eax+0x1]
300019a2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019a5:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
300019a8:	83 fb 20             	cmp    ebx,0x20
300019ab:	74 f0                	je     3000199d <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
300019ad:	83 fb 2d             	cmp    ebx,0x2d
300019b0:	75 14                	jne    300019c6 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
300019b2:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
300019b9:	89 f0                	mov    eax,esi
300019bb:	8d 70 01             	lea    esi,[eax+0x1]
300019be:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019c1:	0f be d8             	movsx  ebx,al
300019c4:	eb 10                	jmp    300019d6 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
300019c6:	83 fb 2b             	cmp    ebx,0x2b
300019c9:	75 0b                	jne    300019d6 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
300019cb:	89 f0                	mov    eax,esi
300019cd:	8d 70 01             	lea    esi,[eax+0x1]
300019d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019d3:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
300019d6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300019da:	74 06                	je     300019e2 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
300019dc:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
300019e0:	75 26                	jne    30001a08 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
300019e2:	83 fb 30             	cmp    ebx,0x30
300019e5:	75 21                	jne    30001a08 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
300019e7:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300019ea:	3c 78                	cmp    al,0x78
300019ec:	74 07                	je     300019f5 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
300019ee:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300019f1:	3c 58                	cmp    al,0x58
300019f3:	75 13                	jne    30001a08 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
300019f5:	8d 46 01             	lea    eax,[esi+0x1]
300019f8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019fb:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
300019fe:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
30001a01:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
30001a08:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001a0c:	75 14                	jne    30001a22 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
30001a0e:	83 fb 30             	cmp    ebx,0x30
30001a11:	75 07                	jne    30001a1a <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
30001a13:	b8 08 00 00 00       	mov    eax,0x8
30001a18:	eb 05                	jmp    30001a1f <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
30001a1a:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
30001a1f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
30001a22:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001a25:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001a2a:	ba 00 00 00 00       	mov    edx,0x0
30001a2f:	f7 f1                	div    ecx
30001a31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
30001a34:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001a37:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001a3c:	ba 00 00 00 00       	mov    edx,0x0
30001a41:	f7 f1                	div    ecx
30001a43:	89 d0                	mov    eax,edx
30001a45:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
30001a47:	bf 00 00 00 00       	mov    edi,0x0
30001a4c:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
30001a51:	8d 43 d0             	lea    eax,[ebx-0x30]
30001a54:	83 f8 09             	cmp    eax,0x9
30001a57:	77 05                	ja     30001a5e <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
30001a59:	83 eb 30             	sub    ebx,0x30
30001a5c:	eb 25                	jmp    30001a83 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
30001a5e:	89 d8                	mov    eax,ebx
30001a60:	83 c8 20             	or     eax,0x20
30001a63:	83 e8 61             	sub    eax,0x61
30001a66:	83 f8 19             	cmp    eax,0x19
30001a69:	77 56                	ja     30001ac1 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001a6b:	83 fb 40             	cmp    ebx,0x40
30001a6e:	7e 0c                	jle    30001a7c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
30001a70:	83 fb 5a             	cmp    ebx,0x5a
30001a73:	7f 07                	jg     30001a7c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
30001a75:	b8 37 00 00 00       	mov    eax,0x37
30001a7a:	eb 05                	jmp    30001a81 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
30001a7c:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
30001a81:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
30001a83:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001a86:	7d 3c                	jge    30001ac4 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001a88:	89 c8                	mov    eax,ecx
30001a8a:	85 c0                	test   eax,eax
30001a8c:	78 10                	js     30001a9e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
30001a8e:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001a91:	77 0b                	ja     30001a9e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
30001a93:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001a96:	75 0d                	jne    30001aa5 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
30001a98:	89 d0                	mov    eax,edx
30001a9a:	39 c3                	cmp    ebx,eax
30001a9c:	7e 07                	jle    30001aa5 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
30001a9e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001aa3:	eb 0f                	jmp    30001ab4 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
30001aa5:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
30001aaa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001aad:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
30001ab0:	89 d8                	mov    eax,ebx
30001ab2:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001ab4:	89 f0                	mov    eax,esi
30001ab6:	8d 70 01             	lea    esi,[eax+0x1]
30001ab9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001abc:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001abf:	eb 90                	jmp    30001a51 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001ac1:	90                   	nop
30001ac2:	eb 01                	jmp    30001ac5 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
30001ac4:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001ac5:	89 c8                	mov    eax,ecx
30001ac7:	85 c0                	test   eax,eax
30001ac9:	79 07                	jns    30001ad2 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
30001acb:	bf ff ff ff ff       	mov    edi,0xffffffff
30001ad0:	eb 08                	jmp    30001ada <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
30001ad2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001ad6:	74 02                	je     30001ada <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
30001ad8:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
30001ada:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001ade:	74 13                	je     30001af3 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
30001ae0:	89 c8                	mov    eax,ecx
30001ae2:	85 c0                	test   eax,eax
30001ae4:	74 05                	je     30001aeb <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
30001ae6:	8d 46 ff             	lea    eax,[esi-0x1]
30001ae9:	eb 03                	jmp    30001aee <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
30001aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
30001aee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001af1:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
30001af3:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
30001af5:	83 c4 08             	add    esp,0x8
30001af8:	5b                   	pop    ebx
30001af9:	5e                   	pop    esi
30001afa:	5f                   	pop    edi
30001afb:	5d                   	pop    ebp
30001afc:	c3                   	ret    
30001afd:	66 90                	xchg   ax,ax
30001aff:	90                   	nop

30001b00 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
30001b00:	55                   	push   ebp
30001b01:	89 e5                	mov    ebp,esp
30001b03:	e8 ee 0e 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001b08:	05 d8 27 00 00       	add    eax,0x27d8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
30001b0d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001b13:	01 d0                	add    eax,edx
30001b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
30001b18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
30001b1b:	5d                   	pop    ebp
30001b1c:	c3                   	ret    
30001b1d:	66 90                	xchg   ax,ax
30001b1f:	90                   	nop

30001b20 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
30001b20:	55                   	push   ebp
30001b21:	89 e5                	mov    ebp,esp
30001b23:	57                   	push   edi
30001b24:	56                   	push   esi
30001b25:	53                   	push   ebx
30001b26:	83 ec 0c             	sub    esp,0xc
30001b29:	e8 c8 0e 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001b2e:	05 b2 27 00 00       	add    eax,0x27b2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
30001b33:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001b36:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
30001b3d:	89 f0                	mov    eax,esi
30001b3f:	8d 70 01             	lea    esi,[eax+0x1]
30001b42:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b45:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
30001b48:	83 fb 20             	cmp    ebx,0x20
30001b4b:	74 f0                	je     30001b3d <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
30001b4d:	83 fb 2d             	cmp    ebx,0x2d
30001b50:	75 14                	jne    30001b66 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
30001b52:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
30001b59:	89 f0                	mov    eax,esi
30001b5b:	8d 70 01             	lea    esi,[eax+0x1]
30001b5e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b61:	0f be d8             	movsx  ebx,al
30001b64:	eb 10                	jmp    30001b76 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
30001b66:	83 fb 2b             	cmp    ebx,0x2b
30001b69:	75 0b                	jne    30001b76 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
30001b6b:	89 f0                	mov    eax,esi
30001b6d:	8d 70 01             	lea    esi,[eax+0x1]
30001b70:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b73:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
30001b76:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001b7a:	74 06                	je     30001b82 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
30001b7c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001b80:	75 26                	jne    30001ba8 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
30001b82:	83 fb 30             	cmp    ebx,0x30
30001b85:	75 21                	jne    30001ba8 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001b87:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001b8a:	3c 78                	cmp    al,0x78
30001b8c:	74 07                	je     30001b95 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
30001b8e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001b91:	3c 58                	cmp    al,0x58
30001b93:	75 13                	jne    30001ba8 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
30001b95:	8d 46 01             	lea    eax,[esi+0x1]
30001b98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b9b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
30001b9e:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
30001ba1:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
30001ba8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001bac:	75 14                	jne    30001bc2 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
30001bae:	83 fb 30             	cmp    ebx,0x30
30001bb1:	75 07                	jne    30001bba <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
30001bb3:	b8 08 00 00 00       	mov    eax,0x8
30001bb8:	eb 05                	jmp    30001bbf <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
30001bba:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
30001bbf:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
30001bc2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001bc6:	74 07                	je     30001bcf <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
30001bc8:	b8 00 00 00 80       	mov    eax,0x80000000
30001bcd:	eb 05                	jmp    30001bd4 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
30001bcf:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
30001bd4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001bd7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001bda:	ba 00 00 00 00       	mov    edx,0x0
30001bdf:	f7 f1                	div    ecx
30001be1:	89 d1                	mov    ecx,edx
30001be3:	89 c8                	mov    eax,ecx
30001be5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
30001be8:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
30001beb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001bee:	ba 00 00 00 00       	mov    edx,0x0
30001bf3:	f7 f7                	div    edi
30001bf5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
30001bf8:	bf 00 00 00 00       	mov    edi,0x0
30001bfd:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
30001c02:	8d 43 d0             	lea    eax,[ebx-0x30]
30001c05:	83 f8 09             	cmp    eax,0x9
30001c08:	77 05                	ja     30001c0f <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
30001c0a:	83 eb 30             	sub    ebx,0x30
30001c0d:	eb 25                	jmp    30001c34 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
30001c0f:	89 d8                	mov    eax,ebx
30001c11:	83 c8 20             	or     eax,0x20
30001c14:	83 e8 61             	sub    eax,0x61
30001c17:	83 f8 19             	cmp    eax,0x19
30001c1a:	77 55                	ja     30001c71 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001c1c:	83 fb 40             	cmp    ebx,0x40
30001c1f:	7e 0c                	jle    30001c2d <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
30001c21:	83 fb 5a             	cmp    ebx,0x5a
30001c24:	7f 07                	jg     30001c2d <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
30001c26:	b8 37 00 00 00       	mov    eax,0x37
30001c2b:	eb 05                	jmp    30001c32 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
30001c2d:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
30001c32:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
30001c34:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001c37:	7d 3b                	jge    30001c74 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001c39:	89 c8                	mov    eax,ecx
30001c3b:	85 c0                	test   eax,eax
30001c3d:	78 0f                	js     30001c4e <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
30001c3f:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001c42:	77 0a                	ja     30001c4e <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
30001c44:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001c47:	75 0c                	jne    30001c55 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
30001c49:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
30001c4c:	7e 07                	jle    30001c55 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
30001c4e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001c53:	eb 0f                	jmp    30001c64 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
30001c55:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
30001c5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001c5d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
30001c60:	89 d8                	mov    eax,ebx
30001c62:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001c64:	89 f0                	mov    eax,esi
30001c66:	8d 70 01             	lea    esi,[eax+0x1]
30001c69:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c6c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001c6f:	eb 91                	jmp    30001c02 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001c71:	90                   	nop
30001c72:	eb 01                	jmp    30001c75 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
30001c74:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001c75:	89 c8                	mov    eax,ecx
30001c77:	85 c0                	test   eax,eax
30001c79:	79 16                	jns    30001c91 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
30001c7b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001c7f:	74 07                	je     30001c88 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
30001c81:	b8 00 00 00 80       	mov    eax,0x80000000
30001c86:	eb 05                	jmp    30001c8d <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
30001c88:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
30001c8d:	89 c7                	mov    edi,eax
30001c8f:	eb 08                	jmp    30001c99 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
30001c91:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001c95:	74 02                	je     30001c99 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
30001c97:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
30001c99:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001c9d:	74 13                	je     30001cb2 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
30001c9f:	89 c8                	mov    eax,ecx
30001ca1:	85 c0                	test   eax,eax
30001ca3:	74 05                	je     30001caa <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
30001ca5:	8d 46 ff             	lea    eax,[esi-0x1]
30001ca8:	eb 03                	jmp    30001cad <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
30001caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
30001cad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001cb0:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
30001cb2:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
30001cb4:	83 c4 0c             	add    esp,0xc
30001cb7:	5b                   	pop    ebx
30001cb8:	5e                   	pop    esi
30001cb9:	5f                   	pop    edi
30001cba:	5d                   	pop    ebp
30001cbb:	c3                   	ret    

30001cbc <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

__attribute__((visibility("default"))) void strtrim(char *input)
{
30001cbc:	55                   	push   ebp
30001cbd:	89 e5                	mov    ebp,esp
30001cbf:	53                   	push   ebx
30001cc0:	83 ec 14             	sub    esp,0x14
30001cc3:	e8 2e 0d 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001cc8:	05 18 26 00 00       	add    eax,0x2618
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
30001ccd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001cd0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001cd3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001cd6:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001cd9:	eb 04                	jmp    30001cdf <strtrim+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
30001cdb:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001cdf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001ce2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001ce5:	80 fa 20             	cmp    dl,0x20
30001ce8:	74 f1                	je     30001cdb <strtrim+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
30001cea:	83 ec 0c             	sub    esp,0xc
30001ced:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001cf0:	89 c3                	mov    ebx,eax
30001cf2:	e8 06 fb ff ff       	call   300017fd <strlenI>
30001cf7:	83 c4 10             	add    esp,0x10
30001cfa:	8d 50 ff             	lea    edx,[eax-0x1]
30001cfd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001d00:	01 d0                	add    eax,edx
30001d02:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
30001d05:	eb 0c                	jmp    30001d13 <strtrim+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
30001d07:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001d0a:	8d 50 ff             	lea    edx,[eax-0x1]
30001d0d:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
30001d10:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
30001d13:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001d16:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30001d19:	76 0a                	jbe    30001d25 <strtrim+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
30001d1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001d1e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d21:	3c 20                	cmp    al,0x20
30001d23:	74 e2                	je     30001d07 <strtrim+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
30001d25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001d28:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30001d2b:	74 1f                	je     30001d4c <strtrim+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
30001d2d:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
30001d2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001d31:	8d 50 01             	lea    edx,[eax+0x1]
30001d34:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001d37:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001d3a:	8d 4a 01             	lea    ecx,[edx+0x1]
30001d3d:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
30001d40:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001d43:	88 10                	mov    BYTE PTR [eax],dl
30001d45:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d48:	84 c0                	test   al,al
30001d4a:	75 e2                	jne    30001d2e <strtrim+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
30001d4c:	90                   	nop
30001d4d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001d50:	c9                   	leave  
30001d51:	c3                   	ret    
30001d52:	66 90                	xchg   ax,ax

30001d54 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strstrI(char* string, char* substring)
{
30001d54:	55                   	push   ebp
30001d55:	89 e5                	mov    ebp,esp
30001d57:	56                   	push   esi
30001d58:	53                   	push   ebx
30001d59:	e8 98 0c 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001d5e:	05 82 25 00 00       	add    eax,0x2582
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
30001d63:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    if (*b == 0) {
30001d66:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001d69:	84 c0                	test   al,al
30001d6b:	75 42                	jne    30001daf <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
	return string;
30001d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d70:	eb 4c                	jmp    30001dbe <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
30001d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d75:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001d78:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001d7b:	38 c2                	cmp    dl,al
30001d7d:	75 2b                	jne    30001daa <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
	    continue;
	}
	a = string;
30001d7f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	while (1) {
	    if (*b == 0) {
30001d82:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001d85:	84 c0                	test   al,al
30001d87:	75 05                	jne    30001d8e <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
		return string;
30001d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d8c:	eb 30                	jmp    30001dbe <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	    }
	    if (*a++ != *b++) {
30001d8e:	89 f0                	mov    eax,esi
30001d90:	8d 70 01             	lea    esi,[eax+0x1]
30001d93:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001d96:	89 d8                	mov    eax,ebx
30001d98:	8d 58 01             	lea    ebx,[eax+0x1]
30001d9b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d9e:	38 c2                	cmp    dl,al
30001da0:	75 02                	jne    30001da4 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
		break;
	    }
	}
30001da2:	eb de                	jmp    30001d82 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
30001da4:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
	}
	b = substring;
30001da5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30001da8:	eb 01                	jmp    30001dab <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
30001daa:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
30001dab:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64 (discriminator 1)
30001daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001db2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001db5:	84 c0                	test   al,al
30001db7:	75 b9                	jne    30001d72 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
30001db9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
}
30001dbe:	5b                   	pop    ebx
30001dbf:	5e                   	pop    esi
30001dc0:	5d                   	pop    ebp
30001dc1:	c3                   	ret    

30001dc2 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83

VISIBLE char* strstr(char* string, char* substring)
{
30001dc2:	55                   	push   ebp
30001dc3:	89 e5                	mov    ebp,esp
30001dc5:	e8 2c 0c 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001dca:	05 16 25 00 00       	add    eax,0x2516
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
    return strstrI(string, substring);
30001dcf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001dd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001dd5:	e8 7a ff ff ff       	call   30001d54 <strstrI>
30001dda:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
30001ddd:	c9                   	leave  
30001dde:	c3                   	ret    
30001ddf:	90                   	nop

30001de0 <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:23
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t time(/*time_t* arg*/)
{
30001de0:	55                   	push   ebp
30001de1:	89 e5                	mov    ebp,esp
30001de3:	83 ec 10             	sub    esp,0x10
30001de6:	e8 0b 0c 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
30001deb:	05 f5 24 00 00       	add    eax,0x24f5
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
    uint32_t retVal=0;
30001df0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    GET_TICKS(retVal);
30001df7:	b8 70 01 00 00       	mov    eax,0x170
30001dfc:	e8 fc ff ff ff       	call   30001dfd <time+0x1d>
30001e01:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    return (time_t)retVal;
30001e04:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
}
30001e07:	c9                   	leave  
30001e08:	c3                   	ret    

30001e09 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:30


VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
30001e09:	55                   	push   ebp
30001e0a:	89 e5                	mov    ebp,esp
30001e0c:	53                   	push   ebx
30001e0d:	83 ec 10             	sub    esp,0x10
30001e10:	e8 1b 0c 00 00       	call   30002a30 <__x86.get_pc_thunk.bx>
30001e15:	81 c3 cb 24 00 00    	add    ebx,0x24cb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31
  time_t time = *timer;
30001e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e1e:	8b 00                	mov    eax,DWORD PTR [eax]
30001e20:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:33
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
30001e23:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35

  dayclock = (unsigned long) time % SECS_DAY;
30001e2a:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
30001e2d:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001e32:	89 c8                	mov    eax,ecx
30001e34:	f7 e2                	mul    edx
30001e36:	89 d0                	mov    eax,edx
30001e38:	c1 e8 10             	shr    eax,0x10
30001e3b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001e3e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001e41:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30001e47:	29 c1                	sub    ecx,eax
30001e49:	89 c8                	mov    eax,ecx
30001e4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36
  dayno = (unsigned long) time / SECS_DAY;
30001e4e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001e51:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001e56:	f7 e2                	mul    edx
30001e58:	89 d0                	mov    eax,edx
30001e5a:	c1 e8 10             	shr    eax,0x10
30001e5d:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38

  tmbuf->tm_sec = dayclock % 60;
30001e60:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
30001e63:	ba 89 88 88 88       	mov    edx,0x88888889
30001e68:	89 c8                	mov    eax,ecx
30001e6a:	f7 e2                	mul    edx
30001e6c:	89 d0                	mov    eax,edx
30001e6e:	c1 e8 05             	shr    eax,0x5
30001e71:	89 c2                	mov    edx,eax
30001e73:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30001e7a:	89 c2                	mov    edx,eax
30001e7c:	89 d0                	mov    eax,edx
30001e7e:	c1 e0 04             	shl    eax,0x4
30001e81:	29 d0                	sub    eax,edx
30001e83:	29 c1                	sub    ecx,eax
30001e85:	89 c8                	mov    eax,ecx
30001e87:	89 c2                	mov    edx,eax
30001e89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001e8c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:39
  tmbuf->tm_min = (dayclock % 3600) / 60;
30001e8e:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
30001e91:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001e96:	89 c8                	mov    eax,ecx
30001e98:	f7 e2                	mul    edx
30001e9a:	89 d0                	mov    eax,edx
30001e9c:	c1 e8 0b             	shr    eax,0xb
30001e9f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
30001ea5:	29 c1                	sub    ecx,eax
30001ea7:	89 c8                	mov    eax,ecx
30001ea9:	ba 89 88 88 88       	mov    edx,0x88888889
30001eae:	f7 e2                	mul    edx
30001eb0:	89 d0                	mov    eax,edx
30001eb2:	c1 e8 05             	shr    eax,0x5
30001eb5:	89 c2                	mov    edx,eax
30001eb7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001eba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40
  tmbuf->tm_hour = dayclock / 3600;
30001ebd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001ec0:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001ec5:	f7 e2                	mul    edx
30001ec7:	89 d0                	mov    eax,edx
30001ec9:	c1 e8 0b             	shr    eax,0xb
30001ecc:	89 c2                	mov    edx,eax
30001ece:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001ed1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
30001ed4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001ed7:	8d 48 04             	lea    ecx,[eax+0x4]
30001eda:	ba 25 49 92 24       	mov    edx,0x24924925
30001edf:	89 c8                	mov    eax,ecx
30001ee1:	f7 e2                	mul    edx
30001ee3:	89 c8                	mov    eax,ecx
30001ee5:	29 d0                	sub    eax,edx
30001ee7:	d1 e8                	shr    eax,1
30001ee9:	01 d0                	add    eax,edx
30001eeb:	c1 e8 02             	shr    eax,0x2
30001eee:	89 c2                	mov    edx,eax
30001ef0:	c1 e2 03             	shl    edx,0x3
30001ef3:	29 c2                	sub    edx,eax
30001ef5:	89 c8                	mov    eax,ecx
30001ef7:	29 d0                	sub    eax,edx
30001ef9:	89 c2                	mov    edx,eax
30001efb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001efe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30001f01:	eb 66                	jmp    30001f69 <gmtime_r+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
    dayno -= YEARSIZE(year);
30001f03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001f06:	83 e0 03             	and    eax,0x3
30001f09:	85 c0                	test   eax,eax
30001f0b:	75 50                	jne    30001f5d <gmtime_r+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 1)
30001f0d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f10:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f15:	89 c8                	mov    eax,ecx
30001f17:	f7 ea                	imul   edx
30001f19:	c1 fa 05             	sar    edx,0x5
30001f1c:	89 c8                	mov    eax,ecx
30001f1e:	c1 f8 1f             	sar    eax,0x1f
30001f21:	29 c2                	sub    edx,eax
30001f23:	89 d0                	mov    eax,edx
30001f25:	6b c0 64             	imul   eax,eax,0x64
30001f28:	29 c1                	sub    ecx,eax
30001f2a:	89 c8                	mov    eax,ecx
30001f2c:	85 c0                	test   eax,eax
30001f2e:	75 26                	jne    30001f56 <gmtime_r+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 4)
30001f30:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f33:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f38:	89 c8                	mov    eax,ecx
30001f3a:	f7 ea                	imul   edx
30001f3c:	c1 fa 07             	sar    edx,0x7
30001f3f:	89 c8                	mov    eax,ecx
30001f41:	c1 f8 1f             	sar    eax,0x1f
30001f44:	29 c2                	sub    edx,eax
30001f46:	89 d0                	mov    eax,edx
30001f48:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001f4e:	29 c1                	sub    ecx,eax
30001f50:	89 c8                	mov    eax,ecx
30001f52:	85 c0                	test   eax,eax
30001f54:	75 07                	jne    30001f5d <gmtime_r+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 5)
30001f56:	b8 6e 01 00 00       	mov    eax,0x16e
30001f5b:	eb 05                	jmp    30001f62 <gmtime_r+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 6)
30001f5d:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 8)
30001f62:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
    year++;
30001f65:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30001f69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001f6c:	83 e0 03             	and    eax,0x3
30001f6f:	85 c0                	test   eax,eax
30001f71:	75 50                	jne    30001fc3 <gmtime_r+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 1)
30001f73:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f76:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f7b:	89 c8                	mov    eax,ecx
30001f7d:	f7 ea                	imul   edx
30001f7f:	c1 fa 05             	sar    edx,0x5
30001f82:	89 c8                	mov    eax,ecx
30001f84:	c1 f8 1f             	sar    eax,0x1f
30001f87:	29 c2                	sub    edx,eax
30001f89:	89 d0                	mov    eax,edx
30001f8b:	6b c0 64             	imul   eax,eax,0x64
30001f8e:	29 c1                	sub    ecx,eax
30001f90:	89 c8                	mov    eax,ecx
30001f92:	85 c0                	test   eax,eax
30001f94:	75 26                	jne    30001fbc <gmtime_r+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 4)
30001f96:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f99:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f9e:	89 c8                	mov    eax,ecx
30001fa0:	f7 ea                	imul   edx
30001fa2:	c1 fa 07             	sar    edx,0x7
30001fa5:	89 c8                	mov    eax,ecx
30001fa7:	c1 f8 1f             	sar    eax,0x1f
30001faa:	29 c2                	sub    edx,eax
30001fac:	89 d0                	mov    eax,edx
30001fae:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001fb4:	29 c1                	sub    ecx,eax
30001fb6:	89 c8                	mov    eax,ecx
30001fb8:	85 c0                	test   eax,eax
30001fba:	75 07                	jne    30001fc3 <gmtime_r+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 5)
30001fbc:	b8 6e 01 00 00       	mov    eax,0x16e
30001fc1:	eb 05                	jmp    30001fc8 <gmtime_r+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 6)
30001fc3:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 8)
30001fc8:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
30001fcb:	0f 86 32 ff ff ff    	jbe    30001f03 <gmtime_r+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
30001fd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001fd4:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
30001fda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001fdd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
  tmbuf->tm_yday = dayno;
30001fe0:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30001fe3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001fe6:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
  tmbuf->tm_mon = 0;
30001fe9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001fec:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
30001ff3:	e9 89 00 00 00       	jmp    30002081 <gmtime_r+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
30001ff8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001ffb:	83 e0 03             	and    eax,0x3
30001ffe:	85 c0                	test   eax,eax
30002000:	75 50                	jne    30002052 <gmtime_r+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 1)
30002002:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002005:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000200a:	89 c8                	mov    eax,ecx
3000200c:	f7 ea                	imul   edx
3000200e:	c1 fa 05             	sar    edx,0x5
30002011:	89 c8                	mov    eax,ecx
30002013:	c1 f8 1f             	sar    eax,0x1f
30002016:	29 c2                	sub    edx,eax
30002018:	89 d0                	mov    eax,edx
3000201a:	6b c0 64             	imul   eax,eax,0x64
3000201d:	29 c1                	sub    ecx,eax
3000201f:	89 c8                	mov    eax,ecx
30002021:	85 c0                	test   eax,eax
30002023:	75 26                	jne    3000204b <gmtime_r+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 4)
30002025:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002028:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000202d:	89 c8                	mov    eax,ecx
3000202f:	f7 ea                	imul   edx
30002031:	c1 fa 07             	sar    edx,0x7
30002034:	89 c8                	mov    eax,ecx
30002036:	c1 f8 1f             	sar    eax,0x1f
30002039:	29 c2                	sub    edx,eax
3000203b:	89 d0                	mov    eax,edx
3000203d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002043:	29 c1                	sub    ecx,eax
30002045:	89 c8                	mov    eax,ecx
30002047:	85 c0                	test   eax,eax
30002049:	75 07                	jne    30002052 <gmtime_r+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 5)
3000204b:	ba 01 00 00 00       	mov    edx,0x1
30002050:	eb 05                	jmp    30002057 <gmtime_r+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 6)
30002052:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 8)
30002057:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000205a:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
3000205d:	89 d0                	mov    eax,edx
3000205f:	01 c0                	add    eax,eax
30002061:	01 d0                	add    eax,edx
30002063:	c1 e0 02             	shl    eax,0x2
30002066:	01 c8                	add    eax,ecx
30002068:	8b 84 83 40 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2c0]
3000206f:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
    tmbuf->tm_mon++;
30002072:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002075:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002078:	8d 50 01             	lea    edx,[eax+0x1]
3000207b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000207e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
30002081:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30002084:	83 e0 03             	and    eax,0x3
30002087:	85 c0                	test   eax,eax
30002089:	75 50                	jne    300020db <gmtime_r+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 1)
3000208b:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
3000208e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002093:	89 c8                	mov    eax,ecx
30002095:	f7 ea                	imul   edx
30002097:	c1 fa 05             	sar    edx,0x5
3000209a:	89 c8                	mov    eax,ecx
3000209c:	c1 f8 1f             	sar    eax,0x1f
3000209f:	29 c2                	sub    edx,eax
300020a1:	89 d0                	mov    eax,edx
300020a3:	6b c0 64             	imul   eax,eax,0x64
300020a6:	29 c1                	sub    ecx,eax
300020a8:	89 c8                	mov    eax,ecx
300020aa:	85 c0                	test   eax,eax
300020ac:	75 26                	jne    300020d4 <gmtime_r+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 4)
300020ae:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300020b1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300020b6:	89 c8                	mov    eax,ecx
300020b8:	f7 ea                	imul   edx
300020ba:	c1 fa 07             	sar    edx,0x7
300020bd:	89 c8                	mov    eax,ecx
300020bf:	c1 f8 1f             	sar    eax,0x1f
300020c2:	29 c2                	sub    edx,eax
300020c4:	89 d0                	mov    eax,edx
300020c6:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300020cc:	29 c1                	sub    ecx,eax
300020ce:	89 c8                	mov    eax,ecx
300020d0:	85 c0                	test   eax,eax
300020d2:	75 07                	jne    300020db <gmtime_r+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 5)
300020d4:	ba 01 00 00 00       	mov    edx,0x1
300020d9:	eb 05                	jmp    300020e0 <gmtime_r+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 6)
300020db:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 8)
300020e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020e3:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
300020e6:	89 d0                	mov    eax,edx
300020e8:	01 c0                	add    eax,eax
300020ea:	01 d0                	add    eax,edx
300020ec:	c1 e0 02             	shl    eax,0x2
300020ef:	01 c8                	add    eax,ecx
300020f1:	8b 84 83 40 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2c0]
300020f8:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
300020fb:	0f 86 f7 fe ff ff    	jbe    30001ff8 <gmtime_r+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
30002101:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30002104:	83 c0 01             	add    eax,0x1
30002107:	89 c2                	mov    edx,eax
30002109:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000210c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
  tmbuf->tm_isdst = 0;
3000210f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002112:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
  return tmbuf;
30002119:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
}
3000211c:	83 c4 10             	add    esp,0x10
3000211f:	5b                   	pop    ebx
30002120:	5d                   	pop    ebp
30002121:	c3                   	ret    

30002122 <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58

VISIBLE struct tm *localtime(const time_t *timer) {
30002122:	55                   	push   ebp
30002123:	89 e5                	mov    ebp,esp
30002125:	53                   	push   ebx
30002126:	83 ec 34             	sub    esp,0x34
30002129:	e8 c8 08 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000212e:	05 b2 21 00 00       	add    eax,0x21b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
  time_t t;
  struct tm tmbuf;
  
  t = *timer - libcTZ;
30002133:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002136:	8b 0a                	mov    ecx,DWORD PTR [edx]
30002138:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
3000213e:	8b 12                	mov    edx,DWORD PTR [edx]
30002140:	29 d1                	sub    ecx,edx
30002142:	89 ca                	mov    edx,ecx
30002144:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:63
  return gmtime_r(&t, &tmbuf);
30002147:	83 ec 08             	sub    esp,0x8
3000214a:	8d 55 c8             	lea    edx,[ebp-0x38]
3000214d:	52                   	push   edx
3000214e:	8d 55 f4             	lea    edx,[ebp-0xc]
30002151:	52                   	push   edx
30002152:	89 c3                	mov    ebx,eax
30002154:	e8 c7 08 00 00       	call   30002a20 <__x86.get_pc_thunk.ax+0x2a>
30002159:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64
}
3000215c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000215f:	c9                   	leave  
30002160:	c3                   	ret    

30002161 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:66

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
30002161:	55                   	push   ebp
30002162:	89 e5                	mov    ebp,esp
30002164:	53                   	push   ebx
30002165:	83 ec 14             	sub    esp,0x14
30002168:	e8 89 08 00 00       	call   300029f6 <__x86.get_pc_thunk.ax>
3000216d:	05 73 21 00 00       	add    eax,0x2173
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  time_t t;

  t = *timer - libcTZ;
30002172:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002175:	8b 0a                	mov    ecx,DWORD PTR [edx]
30002177:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
3000217d:	8b 12                	mov    edx,DWORD PTR [edx]
3000217f:	29 d1                	sub    ecx,edx
30002181:	89 ca                	mov    edx,ecx
30002183:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
  return gmtime_r(&t, tmbuf);
30002186:	83 ec 08             	sub    esp,0x8
30002189:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000218c:	8d 55 f4             	lea    edx,[ebp-0xc]
3000218f:	52                   	push   edx
30002190:	89 c3                	mov    ebx,eax
30002192:	e8 89 08 00 00       	call   30002a20 <__x86.get_pc_thunk.ax+0x2a>
30002197:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:71
}
3000219a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000219d:	c9                   	leave  
3000219e:	c3                   	ret    

3000219f <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

VISIBLE time_t mktime(struct tm *tmbuf) {
3000219f:	55                   	push   ebp
300021a0:	89 e5                	mov    ebp,esp
300021a2:	57                   	push   edi
300021a3:	56                   	push   esi
300021a4:	53                   	push   ebx
300021a5:	83 ec 20             	sub    esp,0x20
300021a8:	e8 8b 08 00 00       	call   30002a38 <__x86.get_pc_thunk.cx>
300021ad:	81 c1 33 21 00 00    	add    ecx,0x2133
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
300021b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300021b6:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
300021b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300021bc:	8b 18                	mov    ebx,DWORD PTR [eax]
300021be:	ba 89 88 88 88       	mov    edx,0x88888889
300021c3:	89 d8                	mov    eax,ebx
300021c5:	f7 ea                	imul   edx
300021c7:	8d 04 1a             	lea    eax,[edx+ebx*1]
300021ca:	c1 f8 05             	sar    eax,0x5
300021cd:	89 c2                	mov    edx,eax
300021cf:	89 d8                	mov    eax,ebx
300021d1:	c1 f8 1f             	sar    eax,0x1f
300021d4:	29 c2                	sub    edx,eax
300021d6:	89 d0                	mov    eax,edx
300021d8:	8d 14 06             	lea    edx,[esi+eax*1]
300021db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300021de:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
  tmbuf->tm_sec %= 60;
300021e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300021e4:	8b 18                	mov    ebx,DWORD PTR [eax]
300021e6:	ba 89 88 88 88       	mov    edx,0x88888889
300021eb:	89 d8                	mov    eax,ebx
300021ed:	f7 ea                	imul   edx
300021ef:	8d 04 1a             	lea    eax,[edx+ebx*1]
300021f2:	c1 f8 05             	sar    eax,0x5
300021f5:	89 c2                	mov    edx,eax
300021f7:	89 d8                	mov    eax,ebx
300021f9:	c1 f8 1f             	sar    eax,0x1f
300021fc:	29 c2                	sub    edx,eax
300021fe:	89 d0                	mov    eax,edx
30002200:	89 c2                	mov    edx,eax
30002202:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30002209:	89 c2                	mov    edx,eax
3000220b:	89 d0                	mov    eax,edx
3000220d:	c1 e0 04             	shl    eax,0x4
30002210:	29 d0                	sub    eax,edx
30002212:	29 c3                	sub    ebx,eax
30002214:	89 d8                	mov    eax,ebx
30002216:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002219:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:83
  if (tmbuf->tm_sec < 0) {
3000221b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000221e:	8b 00                	mov    eax,DWORD PTR [eax]
30002220:	85 c0                	test   eax,eax
30002222:	79 1c                	jns    30002240 <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84
    tmbuf->tm_sec += 60;
30002224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002227:	8b 00                	mov    eax,DWORD PTR [eax]
30002229:	8d 50 3c             	lea    edx,[eax+0x3c]
3000222c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000222f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:85
    tmbuf->tm_min--;
30002231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002234:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002237:	8d 50 ff             	lea    edx,[eax-0x1]
3000223a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000223d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:87
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
30002240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002243:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
30002246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002249:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
3000224c:	ba 89 88 88 88       	mov    edx,0x88888889
30002251:	89 d8                	mov    eax,ebx
30002253:	f7 ea                	imul   edx
30002255:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002258:	c1 f8 05             	sar    eax,0x5
3000225b:	89 c2                	mov    edx,eax
3000225d:	89 d8                	mov    eax,ebx
3000225f:	c1 f8 1f             	sar    eax,0x1f
30002262:	29 c2                	sub    edx,eax
30002264:	89 d0                	mov    eax,edx
30002266:	8d 14 06             	lea    edx,[esi+eax*1]
30002269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000226c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:88
  tmbuf->tm_min = tmbuf->tm_min % 60;
3000226f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002272:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
30002275:	ba 89 88 88 88       	mov    edx,0x88888889
3000227a:	89 d8                	mov    eax,ebx
3000227c:	f7 ea                	imul   edx
3000227e:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002281:	c1 f8 05             	sar    eax,0x5
30002284:	89 c2                	mov    edx,eax
30002286:	89 d8                	mov    eax,ebx
30002288:	c1 f8 1f             	sar    eax,0x1f
3000228b:	29 c2                	sub    edx,eax
3000228d:	89 d0                	mov    eax,edx
3000228f:	89 c2                	mov    edx,eax
30002291:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30002298:	89 c2                	mov    edx,eax
3000229a:	89 d0                	mov    eax,edx
3000229c:	c1 e0 04             	shl    eax,0x4
3000229f:	29 d0                	sub    eax,edx
300022a1:	29 c3                	sub    ebx,eax
300022a3:	89 d8                	mov    eax,ebx
300022a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300022a8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:89
  if (tmbuf->tm_min < 0) {
300022ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300022b1:	85 c0                	test   eax,eax
300022b3:	79 1e                	jns    300022d3 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:90
    tmbuf->tm_min += 60;
300022b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300022bb:	8d 50 3c             	lea    edx,[eax+0x3c]
300022be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:91
    tmbuf->tm_hour--;
300022c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
300022ca:	8d 50 ff             	lea    edx,[eax-0x1]
300022cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  }
  day = tmbuf->tm_hour / 24;
300022d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022d6:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
300022d9:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
300022de:	89 d8                	mov    eax,ebx
300022e0:	f7 ea                	imul   edx
300022e2:	c1 fa 02             	sar    edx,0x2
300022e5:	89 d8                	mov    eax,ebx
300022e7:	c1 f8 1f             	sar    eax,0x1f
300022ea:	29 c2                	sub    edx,eax
300022ec:	89 d0                	mov    eax,edx
300022ee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
300022f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022f4:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
300022f7:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
300022fc:	89 d8                	mov    eax,ebx
300022fe:	f7 ea                	imul   edx
30002300:	c1 fa 02             	sar    edx,0x2
30002303:	89 d8                	mov    eax,ebx
30002305:	c1 f8 1f             	sar    eax,0x1f
30002308:	29 c2                	sub    edx,eax
3000230a:	89 d0                	mov    eax,edx
3000230c:	01 c0                	add    eax,eax
3000230e:	01 d0                	add    eax,edx
30002310:	c1 e0 03             	shl    eax,0x3
30002313:	29 c3                	sub    ebx,eax
30002315:	89 da                	mov    edx,ebx
30002317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000231a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
  if (tmbuf->tm_hour < 0) {
3000231d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002320:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002323:	85 c0                	test   eax,eax
30002325:	79 13                	jns    3000233a <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_hour += 24;
30002327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000232a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
3000232d:	8d 50 18             	lea    edx,[eax+0x18]
30002330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002333:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:97
    day--;
30002336:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
3000233a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000233d:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
30002340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002343:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002346:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
3000234b:	89 d8                	mov    eax,ebx
3000234d:	f7 ea                	imul   edx
3000234f:	d1 fa                	sar    edx,1
30002351:	89 d8                	mov    eax,ebx
30002353:	c1 f8 1f             	sar    eax,0x1f
30002356:	29 c2                	sub    edx,eax
30002358:	89 d0                	mov    eax,edx
3000235a:	8d 14 06             	lea    edx,[esi+eax*1]
3000235d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002360:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  tmbuf->tm_mon %= 12;
30002363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002366:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002369:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
3000236e:	89 d8                	mov    eax,ebx
30002370:	f7 ea                	imul   edx
30002372:	d1 fa                	sar    edx,1
30002374:	89 d8                	mov    eax,ebx
30002376:	c1 f8 1f             	sar    eax,0x1f
30002379:	29 c2                	sub    edx,eax
3000237b:	89 d0                	mov    eax,edx
3000237d:	01 c0                	add    eax,eax
3000237f:	01 d0                	add    eax,edx
30002381:	c1 e0 02             	shl    eax,0x2
30002384:	29 c3                	sub    ebx,eax
30002386:	89 da                	mov    edx,ebx
30002388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000238b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
  if (tmbuf->tm_mon < 0) {
3000238e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002391:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002394:	85 c0                	test   eax,eax
30002396:	79 1e                	jns    300023b6 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_mon += 12;
30002398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000239b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000239e:	8d 50 0c             	lea    edx,[eax+0xc]
300023a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:103
    tmbuf->tm_year--;
300023a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023aa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300023ad:	8d 50 ff             	lea    edx,[eax-0x1]
300023b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023b3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  }
  day += (tmbuf->tm_mday - 1);
300023b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023b9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
300023bc:	83 e8 01             	sub    eax,0x1
300023bf:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  while (day < 0) {
300023c2:	e9 c1 00 00 00       	jmp    30002488 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    if(--tmbuf->tm_mon < 0) {
300023c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300023cd:	8d 50 ff             	lea    edx,[eax-0x1]
300023d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023d3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
300023d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300023dc:	85 c0                	test   eax,eax
300023de:	79 19                	jns    300023f9 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
      tmbuf->tm_year--;
300023e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023e3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300023e6:	8d 50 ff             	lea    edx,[eax-0x1]
300023e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023ec:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:109
      tmbuf->tm_mon = 11;
300023ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023f2:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
300023f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023fc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300023ff:	83 e0 03             	and    eax,0x3
30002402:	85 c0                	test   eax,eax
30002404:	75 62                	jne    30002468 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 1)
30002406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002409:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000240c:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002412:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002417:	89 d8                	mov    eax,ebx
30002419:	f7 ea                	imul   edx
3000241b:	c1 fa 05             	sar    edx,0x5
3000241e:	89 d8                	mov    eax,ebx
30002420:	c1 f8 1f             	sar    eax,0x1f
30002423:	29 c2                	sub    edx,eax
30002425:	89 d0                	mov    eax,edx
30002427:	6b c0 64             	imul   eax,eax,0x64
3000242a:	29 c3                	sub    ebx,eax
3000242c:	89 d8                	mov    eax,ebx
3000242e:	85 c0                	test   eax,eax
30002430:	75 2f                	jne    30002461 <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 4)
30002432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002435:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002438:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000243e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002443:	89 d8                	mov    eax,ebx
30002445:	f7 ea                	imul   edx
30002447:	c1 fa 07             	sar    edx,0x7
3000244a:	89 d8                	mov    eax,ebx
3000244c:	c1 f8 1f             	sar    eax,0x1f
3000244f:	29 c2                	sub    edx,eax
30002451:	89 d0                	mov    eax,edx
30002453:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002459:	29 c3                	sub    ebx,eax
3000245b:	89 d8                	mov    eax,ebx
3000245d:	85 c0                	test   eax,eax
3000245f:	75 07                	jne    30002468 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 5)
30002461:	ba 01 00 00 00       	mov    edx,0x1
30002466:	eb 05                	jmp    3000246d <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 6)
30002468:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 8)
3000246d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002470:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002473:	89 d0                	mov    eax,edx
30002475:	01 c0                	add    eax,eax
30002477:	01 d0                	add    eax,edx
30002479:	c1 e0 02             	shl    eax,0x2
3000247c:	01 d8                	add    eax,ebx
3000247e:	8b 84 81 40 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2c0]
30002485:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
30002488:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000248c:	0f 88 35 ff ff ff    	js     300023c7 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
30002492:	e9 c2 00 00 00       	jmp    30002559 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
30002497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000249a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000249d:	83 e0 03             	and    eax,0x3
300024a0:	85 c0                	test   eax,eax
300024a2:	75 62                	jne    30002506 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 1)
300024a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024a7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300024aa:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300024b0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300024b5:	89 d8                	mov    eax,ebx
300024b7:	f7 ea                	imul   edx
300024b9:	c1 fa 05             	sar    edx,0x5
300024bc:	89 d8                	mov    eax,ebx
300024be:	c1 f8 1f             	sar    eax,0x1f
300024c1:	29 c2                	sub    edx,eax
300024c3:	89 d0                	mov    eax,edx
300024c5:	6b c0 64             	imul   eax,eax,0x64
300024c8:	29 c3                	sub    ebx,eax
300024ca:	89 d8                	mov    eax,ebx
300024cc:	85 c0                	test   eax,eax
300024ce:	75 2f                	jne    300024ff <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 4)
300024d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024d3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300024d6:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300024dc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300024e1:	89 d8                	mov    eax,ebx
300024e3:	f7 ea                	imul   edx
300024e5:	c1 fa 07             	sar    edx,0x7
300024e8:	89 d8                	mov    eax,ebx
300024ea:	c1 f8 1f             	sar    eax,0x1f
300024ed:	29 c2                	sub    edx,eax
300024ef:	89 d0                	mov    eax,edx
300024f1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300024f7:	29 c3                	sub    ebx,eax
300024f9:	89 d8                	mov    eax,ebx
300024fb:	85 c0                	test   eax,eax
300024fd:	75 07                	jne    30002506 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 5)
300024ff:	ba 01 00 00 00       	mov    edx,0x1
30002504:	eb 05                	jmp    3000250b <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 6)
30002506:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 8)
3000250b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000250e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002511:	89 d0                	mov    eax,edx
30002513:	01 c0                	add    eax,eax
30002515:	01 d0                	add    eax,edx
30002517:	c1 e0 02             	shl    eax,0x2
3000251a:	01 d8                	add    eax,ebx
3000251c:	8b 84 81 40 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2c0]
30002523:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:115 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
30002526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002529:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000252c:	8d 50 01             	lea    edx,[eax+0x1]
3000252f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002532:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
30002535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000253b:	83 f8 0c             	cmp    eax,0xc
3000253e:	75 19                	jne    30002559 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
      tmbuf->tm_mon = 0;
30002540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002543:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
      tmbuf->tm_year++;
3000254a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000254d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002550:	8d 50 01             	lea    edx,[eax+0x1]
30002553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002556:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
30002559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000255c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000255f:	83 e0 03             	and    eax,0x3
30002562:	85 c0                	test   eax,eax
30002564:	75 62                	jne    300025c8 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 1)
30002566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002569:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000256c:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002572:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002577:	89 d8                	mov    eax,ebx
30002579:	f7 ea                	imul   edx
3000257b:	c1 fa 05             	sar    edx,0x5
3000257e:	89 d8                	mov    eax,ebx
30002580:	c1 f8 1f             	sar    eax,0x1f
30002583:	29 c2                	sub    edx,eax
30002585:	89 d0                	mov    eax,edx
30002587:	6b c0 64             	imul   eax,eax,0x64
3000258a:	29 c3                	sub    ebx,eax
3000258c:	89 d8                	mov    eax,ebx
3000258e:	85 c0                	test   eax,eax
30002590:	75 2f                	jne    300025c1 <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 4)
30002592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002595:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002598:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000259e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300025a3:	89 d8                	mov    eax,ebx
300025a5:	f7 ea                	imul   edx
300025a7:	c1 fa 07             	sar    edx,0x7
300025aa:	89 d8                	mov    eax,ebx
300025ac:	c1 f8 1f             	sar    eax,0x1f
300025af:	29 c2                	sub    edx,eax
300025b1:	89 d0                	mov    eax,edx
300025b3:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300025b9:	29 c3                	sub    ebx,eax
300025bb:	89 d8                	mov    eax,ebx
300025bd:	85 c0                	test   eax,eax
300025bf:	75 07                	jne    300025c8 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 5)
300025c1:	ba 01 00 00 00       	mov    edx,0x1
300025c6:	eb 05                	jmp    300025cd <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 6)
300025c8:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 8)
300025cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025d0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300025d3:	89 d0                	mov    eax,edx
300025d5:	01 c0                	add    eax,eax
300025d7:	01 d0                	add    eax,edx
300025d9:	c1 e0 02             	shl    eax,0x2
300025dc:	01 d8                	add    eax,ebx
300025de:	8b 84 81 40 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2c0]
300025e5:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
300025e8:	0f 8e a9 fe ff ff    	jle    30002497 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
300025ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300025f1:	8d 50 01             	lea    edx,[eax+0x1]
300025f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:121
  year = EPOCH_YR;
300025fa:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
30002601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002604:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002607:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
3000260a:	81 ea 6c 07 00 00    	sub    edx,0x76c
30002610:	39 d0                	cmp    eax,edx
30002612:	7d 0a                	jge    3000261e <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
30002614:	b8 19 fc ff ff       	mov    eax,0xfffffc19
30002619:	e9 d0 03 00 00       	jmp    300029ee <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:123
  seconds = 0;
3000261e:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
  day = 0;                      // Means days since day 0 now
30002625:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
  overflow = 0;
3000262c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
30002633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002636:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002639:	05 6c 07 00 00       	add    eax,0x76c
3000263e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
30002641:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002644:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002647:	3d 7c c6 59 00       	cmp    eax,0x59c67c
3000264c:	7e 07                	jle    30002655 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134 (discriminator 1)
3000264e:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = (tm_year - year) * 365;
30002655:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002658:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
3000265b:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
30002661:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
30002664:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
30002669:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
3000266c:	89 c2                	mov    edx,eax
3000266e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002671:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002674:	8d 58 03             	lea    ebx,[eax+0x3]
30002677:	85 c0                	test   eax,eax
30002679:	0f 48 c3             	cmovs  eax,ebx
3000267c:	c1 f8 02             	sar    eax,0x2
3000267f:	83 c0 01             	add    eax,0x1
30002682:	39 c2                	cmp    edx,eax
30002684:	7d 04                	jge    3000268a <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136 (discriminator 1)
30002686:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
3000268a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000268d:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002690:	8d 50 03             	lea    edx,[eax+0x3]
30002693:	85 c0                	test   eax,eax
30002695:	0f 48 c2             	cmovs  eax,edx
30002698:	c1 f8 02             	sar    eax,0x2
3000269b:	89 c3                	mov    ebx,eax
3000269d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300026a0:	83 e0 03             	and    eax,0x3
300026a3:	85 c0                	test   eax,eax
300026a5:	74 29                	je     300026d0 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 1)
300026a7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300026aa:	99                   	cdq    
300026ab:	c1 ea 1e             	shr    edx,0x1e
300026ae:	01 d0                	add    eax,edx
300026b0:	83 e0 03             	and    eax,0x3
300026b3:	29 d0                	sub    eax,edx
300026b5:	89 c6                	mov    esi,eax
300026b7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
300026ba:	99                   	cdq    
300026bb:	c1 ea 1e             	shr    edx,0x1e
300026be:	01 d0                	add    eax,edx
300026c0:	83 e0 03             	and    eax,0x3
300026c3:	29 d0                	sub    eax,edx
300026c5:	39 c6                	cmp    esi,eax
300026c7:	7d 07                	jge    300026d0 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 3)
300026c9:	b8 01 00 00 00       	mov    eax,0x1
300026ce:	eb 05                	jmp    300026d5 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 4)
300026d0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 6)
300026d5:	01 d8                	add    eax,ebx
300026d7:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
300026da:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300026dd:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300026e0:	89 c3                	mov    ebx,eax
300026e2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300026e7:	89 d8                	mov    eax,ebx
300026e9:	f7 ea                	imul   edx
300026eb:	c1 fa 05             	sar    edx,0x5
300026ee:	89 d8                	mov    eax,ebx
300026f0:	c1 f8 1f             	sar    eax,0x1f
300026f3:	89 d7                	mov    edi,edx
300026f5:	29 c7                	sub    edi,eax
300026f7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300026fa:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300026ff:	89 d8                	mov    eax,ebx
30002701:	f7 ea                	imul   edx
30002703:	c1 fa 05             	sar    edx,0x5
30002706:	89 d8                	mov    eax,ebx
30002708:	c1 f8 1f             	sar    eax,0x1f
3000270b:	29 c2                	sub    edx,eax
3000270d:	89 d0                	mov    eax,edx
3000270f:	6b c0 64             	imul   eax,eax,0x64
30002712:	29 c3                	sub    ebx,eax
30002714:	89 d8                	mov    eax,ebx
30002716:	85 c0                	test   eax,eax
30002718:	74 49                	je     30002763 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 1)
3000271a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
3000271d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002722:	89 d8                	mov    eax,ebx
30002724:	f7 ea                	imul   edx
30002726:	c1 fa 05             	sar    edx,0x5
30002729:	89 d8                	mov    eax,ebx
3000272b:	c1 f8 1f             	sar    eax,0x1f
3000272e:	89 d6                	mov    esi,edx
30002730:	29 c6                	sub    esi,eax
30002732:	6b c6 64             	imul   eax,esi,0x64
30002735:	89 de                	mov    esi,ebx
30002737:	29 c6                	sub    esi,eax
30002739:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
3000273c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002741:	89 d8                	mov    eax,ebx
30002743:	f7 ea                	imul   edx
30002745:	c1 fa 05             	sar    edx,0x5
30002748:	89 d8                	mov    eax,ebx
3000274a:	c1 f8 1f             	sar    eax,0x1f
3000274d:	29 c2                	sub    edx,eax
3000274f:	89 d0                	mov    eax,edx
30002751:	6b c0 64             	imul   eax,eax,0x64
30002754:	29 c3                	sub    ebx,eax
30002756:	89 d8                	mov    eax,ebx
30002758:	39 c6                	cmp    esi,eax
3000275a:	7d 07                	jge    30002763 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 3)
3000275c:	b8 01 00 00 00       	mov    eax,0x1
30002761:	eb 05                	jmp    30002768 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 4)
30002763:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 6)
30002768:	01 f8                	add    eax,edi
3000276a:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
3000276d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002770:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002773:	89 c3                	mov    ebx,eax
30002775:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000277a:	89 d8                	mov    eax,ebx
3000277c:	f7 ea                	imul   edx
3000277e:	c1 fa 07             	sar    edx,0x7
30002781:	89 d8                	mov    eax,ebx
30002783:	c1 f8 1f             	sar    eax,0x1f
30002786:	89 d7                	mov    edi,edx
30002788:	29 c7                	sub    edi,eax
3000278a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
3000278d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002792:	89 d8                	mov    eax,ebx
30002794:	f7 ea                	imul   edx
30002796:	c1 fa 07             	sar    edx,0x7
30002799:	89 d8                	mov    eax,ebx
3000279b:	c1 f8 1f             	sar    eax,0x1f
3000279e:	29 c2                	sub    edx,eax
300027a0:	89 d0                	mov    eax,edx
300027a2:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300027a8:	29 c3                	sub    ebx,eax
300027aa:	89 d8                	mov    eax,ebx
300027ac:	85 c0                	test   eax,eax
300027ae:	74 4f                	je     300027ff <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 1)
300027b0:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300027b3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300027b8:	89 d8                	mov    eax,ebx
300027ba:	f7 ea                	imul   edx
300027bc:	c1 fa 07             	sar    edx,0x7
300027bf:	89 d8                	mov    eax,ebx
300027c1:	c1 f8 1f             	sar    eax,0x1f
300027c4:	89 d6                	mov    esi,edx
300027c6:	29 c6                	sub    esi,eax
300027c8:	69 c6 90 01 00 00    	imul   eax,esi,0x190
300027ce:	89 de                	mov    esi,ebx
300027d0:	29 c6                	sub    esi,eax
300027d2:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
300027d5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300027da:	89 d8                	mov    eax,ebx
300027dc:	f7 ea                	imul   edx
300027de:	c1 fa 07             	sar    edx,0x7
300027e1:	89 d8                	mov    eax,ebx
300027e3:	c1 f8 1f             	sar    eax,0x1f
300027e6:	29 c2                	sub    edx,eax
300027e8:	89 d0                	mov    eax,edx
300027ea:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300027f0:	29 c3                	sub    ebx,eax
300027f2:	89 d8                	mov    eax,ebx
300027f4:	39 c6                	cmp    esi,eax
300027f6:	7d 07                	jge    300027ff <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 3)
300027f8:	b8 01 00 00 00       	mov    eax,0x1
300027fd:	eb 05                	jmp    30002804 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 4)
300027ff:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 6)
30002804:	01 f8                	add    eax,edi
30002806:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:141 (discriminator 6)

  yday = month = 0;
30002809:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
30002810:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30002813:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:142 (discriminator 6)
  while (month < tmbuf->tm_mon) {
30002816:	eb 7b                	jmp    30002893 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
    yday += _ytab[LEAPYEAR(tm_year)][month];
30002818:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000281b:	83 e0 03             	and    eax,0x3
3000281e:	85 c0                	test   eax,eax
30002820:	75 50                	jne    30002872 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 1)
30002822:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002825:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000282a:	89 d8                	mov    eax,ebx
3000282c:	f7 ea                	imul   edx
3000282e:	c1 fa 05             	sar    edx,0x5
30002831:	89 d8                	mov    eax,ebx
30002833:	c1 f8 1f             	sar    eax,0x1f
30002836:	29 c2                	sub    edx,eax
30002838:	89 d0                	mov    eax,edx
3000283a:	6b c0 64             	imul   eax,eax,0x64
3000283d:	29 c3                	sub    ebx,eax
3000283f:	89 d8                	mov    eax,ebx
30002841:	85 c0                	test   eax,eax
30002843:	75 26                	jne    3000286b <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 4)
30002845:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002848:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000284d:	89 d8                	mov    eax,ebx
3000284f:	f7 ea                	imul   edx
30002851:	c1 fa 07             	sar    edx,0x7
30002854:	89 d8                	mov    eax,ebx
30002856:	c1 f8 1f             	sar    eax,0x1f
30002859:	29 c2                	sub    edx,eax
3000285b:	89 d0                	mov    eax,edx
3000285d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002863:	29 c3                	sub    ebx,eax
30002865:	89 d8                	mov    eax,ebx
30002867:	85 c0                	test   eax,eax
30002869:	75 07                	jne    30002872 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 5)
3000286b:	ba 01 00 00 00       	mov    edx,0x1
30002870:	eb 05                	jmp    30002877 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 6)
30002872:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 8)
30002877:	89 d0                	mov    eax,edx
30002879:	01 c0                	add    eax,eax
3000287b:	01 d0                	add    eax,edx
3000287d:	c1 e0 02             	shl    eax,0x2
30002880:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
30002883:	01 d0                	add    eax,edx
30002885:	8b 84 81 40 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2c0]
3000288c:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:144 (discriminator 8)
    month++;
3000288f:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:142
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
30002893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002896:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002899:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
3000289c:	0f 8f 76 ff ff ff    	jg     30002818 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
300028a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300028a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
300028a8:	83 e8 01             	sub    eax,0x1
300028ab:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (day + yday < 0) overflow|=4;
300028ae:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300028b1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300028b4:	01 d0                	add    eax,edx
300028b6:	85 c0                	test   eax,eax
300028b8:	79 04                	jns    300028be <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
300028ba:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += yday;
300028be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300028c1:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150

  tmbuf->tm_yday = yday;
300028c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300028c7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300028ca:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
300028cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300028d0:	8d 58 04             	lea    ebx,[eax+0x4]
300028d3:	ba 93 24 49 92       	mov    edx,0x92492493
300028d8:	89 d8                	mov    eax,ebx
300028da:	f7 ea                	imul   edx
300028dc:	8d 04 1a             	lea    eax,[edx+ebx*1]
300028df:	c1 f8 02             	sar    eax,0x2
300028e2:	89 c2                	mov    edx,eax
300028e4:	89 d8                	mov    eax,ebx
300028e6:	c1 f8 1f             	sar    eax,0x1f
300028e9:	29 c2                	sub    edx,eax
300028eb:	89 d0                	mov    eax,edx
300028ed:	89 c2                	mov    edx,eax
300028ef:	c1 e2 03             	shl    edx,0x3
300028f2:	29 c2                	sub    edx,eax
300028f4:	89 d8                	mov    eax,ebx
300028f6:	29 d0                	sub    eax,edx
300028f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300028fb:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
300028fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002901:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002904:	c1 e0 02             	shl    eax,0x2
30002907:	89 c2                	mov    edx,eax
30002909:	c1 e2 04             	shl    edx,0x4
3000290c:	29 c2                	sub    edx,eax
3000290e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002911:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002914:	01 d0                	add    eax,edx
30002916:	c1 e0 02             	shl    eax,0x2
30002919:	89 c2                	mov    edx,eax
3000291b:	c1 e2 04             	shl    edx,0x4
3000291e:	29 c2                	sub    edx,eax
30002920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002923:	8b 00                	mov    eax,DWORD PTR [eax]
30002925:	01 d0                	add    eax,edx
30002927:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
3000292a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
3000292f:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
30002932:	89 c3                	mov    ebx,eax
30002934:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30002939:	89 d8                	mov    eax,ebx
3000293b:	f7 ea                	imul   edx
3000293d:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002940:	c1 f8 10             	sar    eax,0x10
30002943:	89 c2                	mov    edx,eax
30002945:	89 d8                	mov    eax,ebx
30002947:	c1 f8 1f             	sar    eax,0x1f
3000294a:	29 c2                	sub    edx,eax
3000294c:	89 d0                	mov    eax,edx
3000294e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30002951:	7d 04                	jge    30002957 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 1)
30002953:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156
  seconds += day * SECS_DAY;
30002957:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
3000295a:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30002960:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
30002963:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002969:	8b 00                	mov    eax,DWORD PTR [eax]
3000296b:	85 c0                	test   eax,eax
3000296d:	7e 16                	jle    30002985 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159 (discriminator 1)
3000296f:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002975:	8b 00                	mov    eax,DWORD PTR [eax]
30002977:	ba ff ff ff 7f       	mov    edx,0x7fffffff
3000297c:	29 c2                	sub    edx,eax
3000297e:	89 d0                	mov    eax,edx
30002980:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
30002983:	7c 1b                	jl     300029a0 <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
30002985:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
3000298b:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
3000298d:	85 c0                	test   eax,eax
3000298f:	79 13                	jns    300029a4 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160
      ((libcTZ < 0) && (seconds < -libcTZ))) {
30002991:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002997:	8b 00                	mov    eax,DWORD PTR [eax]
30002999:	f7 d8                	neg    eax
3000299b:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
3000299e:	7e 04                	jle    300029a4 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161
          overflow|=16;
300029a0:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:163
  }
  seconds += libcTZ;
300029a4:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
300029aa:	8b 00                	mov    eax,DWORD PTR [eax]
300029ac:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:165

  if (tmbuf->tm_isdst) {
300029af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
300029b5:	85 c0                	test   eax,eax
300029b7:	74 0b                	je     300029c4 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166
    dst = _dstbias;
300029b9:	8b 81 58 00 00 00    	mov    eax,DWORD PTR [ecx+0x58]
300029bf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
300029c2:	eb 07                	jmp    300029cb <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:168
  } else {
    dst = 0;
300029c4:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
300029cb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
300029ce:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
300029d1:	7e 04                	jle    300029d7 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 1)
300029d3:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
  seconds -= dst;
300029d7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
300029da:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174

  if (overflow) return (time_t) overflow-2;
300029dd:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
300029e1:	74 08                	je     300029eb <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174 (discriminator 1)
300029e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
300029e6:	83 e8 02             	sub    eax,0x2
300029e9:	eb 03                	jmp    300029ee <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
300029eb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:178
}
300029ee:	83 c4 20             	add    esp,0x20
300029f1:	5b                   	pop    ebx
300029f2:	5e                   	pop    esi
300029f3:	5f                   	pop    edi
300029f4:	5d                   	pop    ebp
300029f5:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

300029f6 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
300029f6:	8b 04 24             	mov    eax,DWORD PTR [esp]
300029f9:	c3                   	ret    

Disassembly of section .plt:

30002a00 <.plt>:
30002a00:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
30002a06:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
30002a0c:	00 00                	add    BYTE PTR [eax],al
30002a0e:	00 00                	add    BYTE PTR [eax],al
30002a10:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
30002a16:	68 00 00 00 00       	push   0x0
30002a1b:	e9 e0 ff ff ff       	jmp    30002a00 <__x86.get_pc_thunk.ax+0xa>
30002a20:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
30002a26:	68 08 00 00 00       	push   0x8
30002a2b:	e9 d0 ff ff ff       	jmp    30002a00 <__x86.get_pc_thunk.ax+0xa>

Disassembly of section .text.__x86.get_pc_thunk.bx:

30002a30 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
30002a30:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
30002a33:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.dx:

30002a34 <__x86.get_pc_thunk.dx>:
__x86.get_pc_thunk.dx():
30002a34:	8b 14 24             	mov    edx,DWORD PTR [esp]
30002a37:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

30002a38 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
30002a38:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
30002a3b:	c3                   	ret    

Disassembly of section .eh_frame:

30002a3c <.eh_frame>:
30002a3c:	14 00                	adc    al,0x0
30002a3e:	00 00                	add    BYTE PTR [eax],al
30002a40:	00 00                	add    BYTE PTR [eax],al
30002a42:	00 00                	add    BYTE PTR [eax],al
30002a44:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30002a47:	00 01                	add    BYTE PTR [ecx],al
30002a49:	7c 08                	jl     30002a53 <__x86.get_pc_thunk.cx+0x1b>
30002a4b:	01 1b                	add    DWORD PTR [ebx],ebx
30002a4d:	0c 04                	or     al,0x4
30002a4f:	04 88                	add    al,0x88
30002a51:	01 00                	add    DWORD PTR [eax],eax
30002a53:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002a56:	00 00                	add    BYTE PTR [eax],al
30002a58:	1c 00                	sbb    al,0x0
30002a5a:	00 00                	add    BYTE PTR [eax],al
30002a5c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
30002a5d:	d5 ff                	aad    0xff
30002a5f:	ff                   	(bad)  
30002a60:	38 00                	cmp    BYTE PTR [eax],al
30002a62:	00 00                	add    BYTE PTR [eax],al
30002a64:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002a67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002a6d:	74 c5                	je     30002a34 <__x86.get_pc_thunk.dx>
30002a6f:	0c 04                	or     al,0x4
30002a71:	04 00                	add    al,0x0
30002a73:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002a76:	00 00                	add    BYTE PTR [eax],al
30002a78:	3c 00                	cmp    al,0x0
30002a7a:	00 00                	add    BYTE PTR [eax],al
30002a7c:	bc d5 ff ff 38       	mov    esp,0x38ffffd5
30002a81:	00 00                	add    BYTE PTR [eax],al
30002a83:	00 00                	add    BYTE PTR [eax],al
30002a85:	41                   	inc    ecx
30002a86:	0e                   	push   cs
30002a87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002a8d:	74 c5                	je     30002a54 <__x86.get_pc_thunk.cx+0x1c>
30002a8f:	0c 04                	or     al,0x4
30002a91:	04 00                	add    al,0x0
30002a93:	00 10                	add    BYTE PTR [eax],dl
30002a95:	00 00                	add    BYTE PTR [eax],al
30002a97:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
30002a9b:	00 5a ff             	add    BYTE PTR [edx-0x1],bl
30002a9e:	ff                   	(bad)  
30002a9f:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002aa2:	00 00                	add    BYTE PTR [eax],al
30002aa4:	00 00                	add    BYTE PTR [eax],al
30002aa6:	00 00                	add    BYTE PTR [eax],al
30002aa8:	24 00                	and    al,0x0
30002aaa:	00 00                	add    BYTE PTR [eax],al
30002aac:	70 00                	jo     30002aae <__x86.get_pc_thunk.cx+0x76>
30002aae:	00 00                	add    BYTE PTR [eax],al
30002ab0:	c0 d5 ff             	rcl    ch,0xff
30002ab3:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002ab6:	00 00                	add    BYTE PTR [eax],al
30002ab8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002abb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ac1:	42                   	inc    edx
30002ac2:	86 03                	xchg   BYTE PTR [ebx],al
30002ac4:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002ac8:	c3                   	ret    
30002ac9:	41                   	inc    ecx
30002aca:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002ace:	04 04                	add    al,0x4
30002ad0:	24 00                	and    al,0x0
30002ad2:	00 00                	add    BYTE PTR [eax],al
30002ad4:	98                   	cwde   
30002ad5:	00 00                	add    BYTE PTR [eax],al
30002ad7:	00 ed                	add    ch,ch
30002ad9:	d5 ff                	aad    0xff
30002adb:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002ade:	00 00                	add    BYTE PTR [eax],al
30002ae0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002ae3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ae9:	42                   	inc    edx
30002aea:	86 03                	xchg   BYTE PTR [ebx],al
30002aec:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002af0:	c3                   	ret    
30002af1:	41                   	inc    ecx
30002af2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002af6:	04 04                	add    al,0x4
30002af8:	24 00                	and    al,0x0
30002afa:	00 00                	add    BYTE PTR [eax],al
30002afc:	c0 00 00             	rol    BYTE PTR [eax],0x0
30002aff:	00 1c d6             	add    BYTE PTR [esi+edx*8],bl
30002b02:	ff                   	(bad)  
30002b03:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
30002b09:	41                   	inc    ecx
30002b0a:	0e                   	push   cs
30002b0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b11:	42                   	inc    edx
30002b12:	86 03                	xchg   BYTE PTR [ebx],al
30002b14:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
30002b18:	c3                   	ret    
30002b19:	41                   	inc    ecx
30002b1a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002b1e:	04 04                	add    al,0x4
30002b20:	10 00                	adc    BYTE PTR [eax],al
30002b22:	00 00                	add    BYTE PTR [eax],al
30002b24:	e8 00 00 00 08       	call   38002b29 <ticksToWait+0x7ffe7ed>
30002b29:	ff                   	(bad)  
30002b2a:	ff                   	(bad)  
30002b2b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002b2e:	00 00                	add    BYTE PTR [eax],al
30002b30:	00 00                	add    BYTE PTR [eax],al
30002b32:	00 00                	add    BYTE PTR [eax],al
30002b34:	20 00                	and    BYTE PTR [eax],al
30002b36:	00 00                	add    BYTE PTR [eax],al
30002b38:	fc                   	cld    
30002b39:	00 00                	add    BYTE PTR [eax],al
30002b3b:	00 78 d6             	add    BYTE PTR [eax-0x2a],bh
30002b3e:	ff                   	(bad)  
30002b3f:	ff 77 00             	push   DWORD PTR [edi+0x0]
30002b42:	00 00                	add    BYTE PTR [eax],al
30002b44:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002b47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b4d:	44                   	inc    esp
30002b4e:	83 03 02             	add    DWORD PTR [ebx],0x2
30002b51:	6f                   	outs   dx,DWORD PTR ds:[esi]
30002b52:	c5 c3 0c             	(bad)  
30002b55:	04 04                	add    al,0x4
30002b57:	00 20                	add    BYTE PTR [eax],ah
30002b59:	00 00                	add    BYTE PTR [eax],al
30002b5b:	00 20                	add    BYTE PTR [eax],ah
30002b5d:	01 00                	add    DWORD PTR [eax],eax
30002b5f:	00 cb                	add    bl,cl
30002b61:	d6                   	(bad)  
30002b62:	ff                   	(bad)  
30002b63:	ff                   	(bad)  
30002b64:	bb 00 00 00 00       	mov    ebx,0x0
30002b69:	41                   	inc    ecx
30002b6a:	0e                   	push   cs
30002b6b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b71:	44                   	inc    esp
30002b72:	83 03 02             	add    DWORD PTR [ebx],0x2
30002b75:	b3 c5                	mov    bl,0xc5
30002b77:	c3                   	ret    
30002b78:	0c 04                	or     al,0x4
30002b7a:	04 00                	add    al,0x0
30002b7c:	20 00                	and    BYTE PTR [eax],al
30002b7e:	00 00                	add    BYTE PTR [eax],al
30002b80:	44                   	inc    esp
30002b81:	01 00                	add    DWORD PTR [eax],eax
30002b83:	00 62 d7             	add    BYTE PTR [edx-0x29],ah
30002b86:	ff                   	(bad)  
30002b87:	ff                   	(bad)  
30002b88:	bb 00 00 00 00       	mov    ebx,0x0
30002b8d:	41                   	inc    ecx
30002b8e:	0e                   	push   cs
30002b8f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b95:	44                   	inc    esp
30002b96:	83 03 02             	add    DWORD PTR [ebx],0x2
30002b99:	b3 c5                	mov    bl,0xc5
30002b9b:	c3                   	ret    
30002b9c:	0c 04                	or     al,0x4
30002b9e:	04 00                	add    al,0x0
30002ba0:	1c 00                	sbb    al,0x0
30002ba2:	00 00                	add    BYTE PTR [eax],al
30002ba4:	68 01 00 00 f9       	push   0xf9000001
30002ba9:	d7                   	xlat   BYTE PTR ds:[ebx]
30002baa:	ff                   	(bad)  
30002bab:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
30002baf:	00 00                	add    BYTE PTR [eax],al
30002bb1:	41                   	inc    ecx
30002bb2:	0e                   	push   cs
30002bb3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bb9:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
30002bbc:	0c 04                	or     al,0x4
30002bbe:	04 00                	add    al,0x0
30002bc0:	20 00                	and    BYTE PTR [eax],al
30002bc2:	00 00                	add    BYTE PTR [eax],al
30002bc4:	88 01                	mov    BYTE PTR [ecx],al
30002bc6:	00 00                	add    BYTE PTR [eax],al
30002bc8:	38 d8                	cmp    al,bl
30002bca:	ff                   	(bad)  
30002bcb:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
30002bd1:	41                   	inc    ecx
30002bd2:	0e                   	push   cs
30002bd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bd9:	44                   	inc    esp
30002bda:	83 03 02             	add    DWORD PTR [ebx],0x2
30002bdd:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
30002be2:	04 00                	add    al,0x0
30002be4:	20 00                	and    BYTE PTR [eax],al
30002be6:	00 00                	add    BYTE PTR [eax],al
30002be8:	ac                   	lods   al,BYTE PTR ds:[esi]
30002be9:	01 00                	add    DWORD PTR [eax],eax
30002beb:	00 be d8 ff ff c1    	add    BYTE PTR [esi-0x3e000028],bh
30002bf1:	01 00                	add    DWORD PTR [eax],eax
30002bf3:	00 00                	add    BYTE PTR [eax],al
30002bf5:	41                   	inc    ecx
30002bf6:	0e                   	push   cs
30002bf7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bfd:	44                   	inc    esp
30002bfe:	83 03 03             	add    DWORD PTR [ebx],0x3
30002c01:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
30002c06:	04 04                	add    al,0x4
30002c08:	20 00                	and    BYTE PTR [eax],al
30002c0a:	00 00                	add    BYTE PTR [eax],al
30002c0c:	d0 01                	rol    BYTE PTR [ecx],1
30002c0e:	00 00                	add    BYTE PTR [eax],al
30002c10:	5c                   	pop    esp
30002c11:	da ff                	(bad)  
30002c13:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
30002c19:	41                   	inc    ecx
30002c1a:	0e                   	push   cs
30002c1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c21:	44                   	inc    esp
30002c22:	83 03 65             	add    DWORD PTR [ebx],0x65
30002c25:	c5 c3 0c             	(bad)  
30002c28:	04 04                	add    al,0x4
30002c2a:	00 00                	add    BYTE PTR [eax],al
30002c2c:	20 00                	and    BYTE PTR [eax],al
30002c2e:	00 00                	add    BYTE PTR [eax],al
30002c30:	f4                   	hlt    
30002c31:	01 00                	add    DWORD PTR [eax],eax
30002c33:	00 65 da             	add    BYTE PTR [ebp-0x26],ah
30002c36:	ff                   	(bad)  
30002c37:	ff 2a                	jmp    FWORD PTR [edx]
30002c39:	00 00                	add    BYTE PTR [eax],al
30002c3b:	00 00                	add    BYTE PTR [eax],al
30002c3d:	41                   	inc    ecx
30002c3e:	0e                   	push   cs
30002c3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c45:	44                   	inc    esp
30002c46:	83 03 62             	add    DWORD PTR [ebx],0x62
30002c49:	c5 c3 0c             	(bad)  
30002c4c:	04 04                	add    al,0x4
30002c4e:	00 00                	add    BYTE PTR [eax],al
30002c50:	24 00                	and    al,0x0
30002c52:	00 00                	add    BYTE PTR [eax],al
30002c54:	18 02                	sbb    BYTE PTR [edx],al
30002c56:	00 00                	add    BYTE PTR [eax],al
30002c58:	6b da ff             	imul   ebx,edx,0xffffffff
30002c5b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30002c61:	41                   	inc    ecx
30002c62:	0e                   	push   cs
30002c63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c69:	42                   	inc    edx
30002c6a:	86 03                	xchg   BYTE PTR [ebx],al
30002c6c:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
30002c73:	c5 
30002c74:	0c 04                	or     al,0x4
30002c76:	04 00                	add    al,0x0
30002c78:	20 00                	and    BYTE PTR [eax],al
30002c7a:	00 00                	add    BYTE PTR [eax],al
30002c7c:	40                   	inc    eax
30002c7d:	02 00                	add    al,BYTE PTR [eax]
30002c7f:	00 78 da             	add    BYTE PTR [eax-0x26],bh
30002c82:	ff                   	(bad)  
30002c83:	ff 31                	push   DWORD PTR [ecx]
30002c85:	00 00                	add    BYTE PTR [eax],al
30002c87:	00 00                	add    BYTE PTR [eax],al
30002c89:	41                   	inc    ecx
30002c8a:	0e                   	push   cs
30002c8b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c91:	44                   	inc    esp
30002c92:	83 03 69             	add    DWORD PTR [ebx],0x69
30002c95:	c5 c3 0c             	(bad)  
30002c98:	04 04                	add    al,0x4
30002c9a:	00 00                	add    BYTE PTR [eax],al
30002c9c:	20 00                	and    BYTE PTR [eax],al
30002c9e:	00 00                	add    BYTE PTR [eax],al
30002ca0:	64 02 00             	add    al,BYTE PTR fs:[eax]
30002ca3:	00 88 da ff ff 26    	add    BYTE PTR [eax+0x26ffffda],cl
30002ca9:	00 00                	add    BYTE PTR [eax],al
30002cab:	00 00                	add    BYTE PTR [eax],al
30002cad:	41                   	inc    ecx
30002cae:	0e                   	push   cs
30002caf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cb5:	41                   	inc    ecx
30002cb6:	83 03 60             	add    DWORD PTR [ebx],0x60
30002cb9:	c3                   	ret    
30002cba:	41                   	inc    ecx
30002cbb:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002cbe:	04 00                	add    al,0x0
30002cc0:	20 00                	and    BYTE PTR [eax],al
30002cc2:	00 00                	add    BYTE PTR [eax],al
30002cc4:	88 02                	mov    BYTE PTR [edx],al
30002cc6:	00 00                	add    BYTE PTR [eax],al
30002cc8:	8a da                	mov    bl,dl
30002cca:	ff                   	(bad)  
30002ccb:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
30002cce:	00 00                	add    BYTE PTR [eax],al
30002cd0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002cd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cd9:	44                   	inc    esp
30002cda:	83 03 7a             	add    DWORD PTR [ebx],0x7a
30002cdd:	c3                   	ret    
30002cde:	41                   	inc    ecx
30002cdf:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002ce2:	04 00                	add    al,0x0
30002ce4:	20 00                	and    BYTE PTR [eax],al
30002ce6:	00 00                	add    BYTE PTR [eax],al
30002ce8:	ac                   	lods   al,BYTE PTR ds:[esi]
30002ce9:	02 00                	add    al,BYTE PTR [eax]
30002ceb:	00 a9 da ff ff 2f    	add    BYTE PTR [ecx+0x2fffffda],ch
30002cf1:	00 00                	add    BYTE PTR [eax],al
30002cf3:	00 00                	add    BYTE PTR [eax],al
30002cf5:	41                   	inc    ecx
30002cf6:	0e                   	push   cs
30002cf7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cfd:	44                   	inc    esp
30002cfe:	83 03 66             	add    DWORD PTR [ebx],0x66
30002d01:	c3                   	ret    
30002d02:	41                   	inc    ecx
30002d03:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002d06:	04 00                	add    al,0x0
30002d08:	20 00                	and    BYTE PTR [eax],al
30002d0a:	00 00                	add    BYTE PTR [eax],al
30002d0c:	d0 02                	rol    BYTE PTR [edx],1
30002d0e:	00 00                	add    BYTE PTR [eax],al
30002d10:	b4 da                	mov    ah,0xda
30002d12:	ff                   	(bad)  
30002d13:	ff                   	(bad)  
30002d14:	ba 00 00 00 00       	mov    edx,0x0
30002d19:	41                   	inc    ecx
30002d1a:	0e                   	push   cs
30002d1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d21:	44                   	inc    esp
30002d22:	83 03 02             	add    DWORD PTR [ebx],0x2
30002d25:	b2 c5                	mov    dl,0xc5
30002d27:	c3                   	ret    
30002d28:	0c 04                	or     al,0x4
30002d2a:	04 00                	add    al,0x0
30002d2c:	24 00                	and    al,0x0
30002d2e:	00 00                	add    BYTE PTR [eax],al
30002d30:	f4                   	hlt    
30002d31:	02 00                	add    al,BYTE PTR [eax]
30002d33:	00 4c db ff          	add    BYTE PTR [ebx+ebx*8-0x1],cl
30002d37:	ff                   	(bad)  
30002d38:	3a 00                	cmp    al,BYTE PTR [eax]
30002d3a:	00 00                	add    BYTE PTR [eax],al
30002d3c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d45:	45                   	inc    ebp
30002d46:	86 03                	xchg   BYTE PTR [ebx],al
30002d48:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
30002d4c:	41                   	inc    ecx
30002d4d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002d51:	04 04                	add    al,0x4
30002d53:	00 20                	add    BYTE PTR [eax],ah
30002d55:	00 00                	add    BYTE PTR [eax],al
30002d57:	00 1c 03             	add    BYTE PTR [ebx+eax*1],bl
30002d5a:	00 00                	add    BYTE PTR [eax],al
30002d5c:	5e                   	pop    esi
30002d5d:	db ff                	(bad)  
30002d5f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30002d65:	41                   	inc    ecx
30002d66:	0e                   	push   cs
30002d67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d6d:	44                   	inc    esp
30002d6e:	83 03 6c             	add    DWORD PTR [ebx],0x6c
30002d71:	c3                   	ret    
30002d72:	41                   	inc    ecx
30002d73:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002d76:	04 00                	add    al,0x0
30002d78:	20 00                	and    BYTE PTR [eax],al
30002d7a:	00 00                	add    BYTE PTR [eax],al
30002d7c:	40                   	inc    eax
30002d7d:	03 00                	add    eax,DWORD PTR [eax]
30002d7f:	00 6f db             	add    BYTE PTR [edi-0x25],ch
30002d82:	ff                   	(bad)  
30002d83:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002d86:	00 00                	add    BYTE PTR [eax],al
30002d88:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d8b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d91:	44                   	inc    esp
30002d92:	83 03 6b             	add    DWORD PTR [ebx],0x6b
30002d95:	c3                   	ret    
30002d96:	41                   	inc    ecx
30002d97:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002d9a:	04 00                	add    al,0x0
30002d9c:	20 00                	and    BYTE PTR [eax],al
30002d9e:	00 00                	add    BYTE PTR [eax],al
30002da0:	64 03 00             	add    eax,DWORD PTR fs:[eax]
30002da3:	00 7f db             	add    BYTE PTR [edi-0x25],bh
30002da6:	ff                   	(bad)  
30002da7:	ff 31                	push   DWORD PTR [ecx]
30002da9:	00 00                	add    BYTE PTR [eax],al
30002dab:	00 00                	add    BYTE PTR [eax],al
30002dad:	41                   	inc    ecx
30002dae:	0e                   	push   cs
30002daf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002db5:	44                   	inc    esp
30002db6:	83 03 68             	add    DWORD PTR [ebx],0x68
30002db9:	c3                   	ret    
30002dba:	41                   	inc    ecx
30002dbb:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002dbe:	04 00                	add    al,0x0
30002dc0:	1c 00                	sbb    al,0x0
30002dc2:	00 00                	add    BYTE PTR [eax],al
30002dc4:	88 03                	mov    BYTE PTR [ebx],al
30002dc6:	00 00                	add    BYTE PTR [eax],al
30002dc8:	8c db                	mov    ebx,ds
30002dca:	ff                   	(bad)  
30002dcb:	ff 27                	jmp    DWORD PTR [edi]
30002dcd:	00 00                	add    BYTE PTR [eax],al
30002dcf:	00 00                	add    BYTE PTR [eax],al
30002dd1:	41                   	inc    ecx
30002dd2:	0e                   	push   cs
30002dd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002dd9:	63 c5                	arpl   bp,ax
30002ddb:	0c 04                	or     al,0x4
30002ddd:	04 00                	add    al,0x0
30002ddf:	00 20                	add    BYTE PTR [eax],ah
30002de1:	00 00                	add    BYTE PTR [eax],al
30002de3:	00 a8 03 00 00 93    	add    BYTE PTR [eax-0x6cfffffd],ch
30002de9:	db ff                	(bad)  
30002deb:	ff b1 00 00 00 00    	push   DWORD PTR [ecx+0x0]
30002df1:	41                   	inc    ecx
30002df2:	0e                   	push   cs
30002df3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002df9:	44                   	inc    esp
30002dfa:	83 03 02             	add    DWORD PTR [ebx],0x2
30002dfd:	a9 c5 c3 0c 04       	test   eax,0x40cc3c5
30002e02:	04 00                	add    al,0x0
30002e04:	20 00                	and    BYTE PTR [eax],al
30002e06:	00 00                	add    BYTE PTR [eax],al
30002e08:	cc                   	int3   
30002e09:	03 00                	add    eax,DWORD PTR [eax]
30002e0b:	00 20                	add    BYTE PTR [eax],ah
30002e0d:	dc ff                	fdiv   st(7),st
30002e0f:	ff 1f                	call   FWORD PTR [edi]
30002e11:	00 00                	add    BYTE PTR [eax],al
30002e13:	00 00                	add    BYTE PTR [eax],al
30002e15:	41                   	inc    ecx
30002e16:	0e                   	push   cs
30002e17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e1d:	44                   	inc    esp
30002e1e:	83 03 56             	add    DWORD PTR [ebx],0x56
30002e21:	c3                   	ret    
30002e22:	41                   	inc    ecx
30002e23:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002e26:	04 00                	add    al,0x0
30002e28:	1c 00                	sbb    al,0x0
30002e2a:	00 00                	add    BYTE PTR [eax],al
30002e2c:	f0 03 00             	lock add eax,DWORD PTR [eax]
30002e2f:	00 1b                	add    BYTE PTR [ebx],bl
30002e31:	dc ff                	fdiv   st(7),st
30002e33:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002e36:	00 00                	add    BYTE PTR [eax],al
30002e38:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e41:	70 c5                	jo     30002e08 <__x86.get_pc_thunk.cx+0x3d0>
30002e43:	0c 04                	or     al,0x4
30002e45:	04 00                	add    al,0x0
30002e47:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002e4a:	00 00                	add    BYTE PTR [eax],al
30002e4c:	10 04 00             	adc    BYTE PTR [eax+eax*1],al
30002e4f:	00 2f                	add    BYTE PTR [edi],ch
30002e51:	dc ff                	fdiv   st(7),st
30002e53:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002e56:	00 00                	add    BYTE PTR [eax],al
30002e58:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e61:	70 c5                	jo     30002e28 <__x86.get_pc_thunk.cx+0x3f0>
30002e63:	0c 04                	or     al,0x4
30002e65:	04 00                	add    al,0x0
30002e67:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002e6a:	00 00                	add    BYTE PTR [eax],al
30002e6c:	30 04 00             	xor    BYTE PTR [eax+eax*1],al
30002e6f:	00 43 dc             	add    BYTE PTR [ebx-0x24],al
30002e72:	ff                   	(bad)  
30002e73:	ff 37                	push   DWORD PTR [edi]
30002e75:	00 00                	add    BYTE PTR [eax],al
30002e77:	00 00                	add    BYTE PTR [eax],al
30002e79:	41                   	inc    ecx
30002e7a:	0e                   	push   cs
30002e7b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e81:	73 c5                	jae    30002e48 <__x86.get_pc_thunk.cx+0x410>
30002e83:	0c 04                	or     al,0x4
30002e85:	04 00                	add    al,0x0
30002e87:	00 20                	add    BYTE PTR [eax],ah
30002e89:	00 00                	add    BYTE PTR [eax],al
30002e8b:	00 50 04             	add    BYTE PTR [eax+0x4],dl
30002e8e:	00 00                	add    BYTE PTR [eax],al
30002e90:	5a                   	pop    edx
30002e91:	dc ff                	fdiv   st(7),st
30002e93:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
30002e96:	00 00                	add    BYTE PTR [eax],al
30002e98:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ea1:	44                   	inc    esp
30002ea2:	83 03 02             	add    DWORD PTR [ebx],0x2
30002ea5:	46                   	inc    esi
30002ea6:	c3                   	ret    
30002ea7:	41                   	inc    ecx
30002ea8:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002eab:	04 1c                	add    al,0x1c
30002ead:	00 00                	add    BYTE PTR [eax],al
30002eaf:	00 74 04 00          	add    BYTE PTR [esp+eax*1+0x0],dh
30002eb3:	00 85 dc ff ff 1d    	add    BYTE PTR [ebp+0x1dffffdc],al
30002eb9:	00 00                	add    BYTE PTR [eax],al
30002ebb:	00 00                	add    BYTE PTR [eax],al
30002ebd:	41                   	inc    ecx
30002ebe:	0e                   	push   cs
30002ebf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ec5:	59                   	pop    ecx
30002ec6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002ec9:	04 00                	add    al,0x0
30002ecb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002ece:	00 00                	add    BYTE PTR [eax],al
30002ed0:	94                   	xchg   esp,eax
30002ed1:	04 00                	add    al,0x0
30002ed3:	00 82 dc ff ff 29    	add    BYTE PTR [edx+0x29ffffdc],al
30002ed9:	00 00                	add    BYTE PTR [eax],al
30002edb:	00 00                	add    BYTE PTR [eax],al
30002edd:	41                   	inc    ecx
30002ede:	0e                   	push   cs
30002edf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ee5:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
30002ee9:	04 00                	add    al,0x0
30002eeb:	00 20                	add    BYTE PTR [eax],ah
30002eed:	00 00                	add    BYTE PTR [eax],al
30002eef:	00 b4 04 00 00 8b dc 	add    BYTE PTR [esp+eax*1-0x23750000],dh
30002ef6:	ff                   	(bad)  
30002ef7:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
30002efb:	00 00                	add    BYTE PTR [eax],al
30002efd:	41                   	inc    ecx
30002efe:	0e                   	push   cs
30002eff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f05:	44                   	inc    esp
30002f06:	83 03 02             	add    DWORD PTR [ebx],0x2
30002f09:	44                   	inc    esp
30002f0a:	c5 c3 0c             	(bad)  
30002f0d:	04 04                	add    al,0x4
30002f0f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002f12:	00 00                	add    BYTE PTR [eax],al
30002f14:	d8 04 00             	fadd   DWORD PTR [eax+eax*1]
30002f17:	00 b3 dc ff ff 1c    	add    BYTE PTR [ebx+0x1cffffdc],dh
30002f1d:	00 00                	add    BYTE PTR [eax],al
30002f1f:	00 00                	add    BYTE PTR [eax],al
30002f21:	41                   	inc    ecx
30002f22:	0e                   	push   cs
30002f23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f29:	58                   	pop    eax
30002f2a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002f2d:	04 00                	add    al,0x0
30002f2f:	00 20                	add    BYTE PTR [eax],ah
30002f31:	00 00                	add    BYTE PTR [eax],al
30002f33:	00 f8                	add    al,bh
30002f35:	04 00                	add    al,0x0
30002f37:	00 af dc ff ff 40    	add    BYTE PTR [edi+0x40ffffdc],ch
30002f3d:	00 00                	add    BYTE PTR [eax],al
30002f3f:	00 00                	add    BYTE PTR [eax],al
30002f41:	41                   	inc    ecx
30002f42:	0e                   	push   cs
30002f43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f49:	44                   	inc    esp
30002f4a:	83 03 78             	add    DWORD PTR [ebx],0x78
30002f4d:	c5 c3 0c             	(bad)  
30002f50:	04 04                	add    al,0x4
30002f52:	00 00                	add    BYTE PTR [eax],al
30002f54:	1c 00                	sbb    al,0x0
30002f56:	00 00                	add    BYTE PTR [eax],al
30002f58:	1c 05                	sbb    al,0x5
30002f5a:	00 00                	add    BYTE PTR [eax],al
30002f5c:	cb                   	retf   
30002f5d:	dc ff                	fdiv   st(7),st
30002f5f:	ff 20                	jmp    DWORD PTR [eax]
30002f61:	00 00                	add    BYTE PTR [eax],al
30002f63:	00 00                	add    BYTE PTR [eax],al
30002f65:	41                   	inc    ecx
30002f66:	0e                   	push   cs
30002f67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f6d:	5c                   	pop    esp
30002f6e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002f71:	04 00                	add    al,0x0
30002f73:	00 10                	add    BYTE PTR [eax],dl
30002f75:	00 00                	add    BYTE PTR [eax],al
30002f77:	00 3c 05 00 00 b8 fa 	add    BYTE PTR [eax*1-0x5480000],bh
30002f7e:	ff                   	(bad)  
30002f7f:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002f82:	00 00                	add    BYTE PTR [eax],al
30002f84:	00 00                	add    BYTE PTR [eax],al
30002f86:	00 00                	add    BYTE PTR [eax],al
30002f88:	20 00                	and    BYTE PTR [eax],al
30002f8a:	00 00                	add    BYTE PTR [eax],al
30002f8c:	50                   	push   eax
30002f8d:	05 00 00 b8 dc       	add    eax,0xdcb80000
30002f92:	ff                   	(bad)  
30002f93:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
30002f96:	00 00                	add    BYTE PTR [eax],al
30002f98:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fa1:	44                   	inc    esp
30002fa2:	83 03 02             	add    DWORD PTR [ebx],0x2
30002fa5:	58                   	pop    eax
30002fa6:	c5 c3 0c             	(bad)  
30002fa9:	04 04                	add    al,0x4
30002fab:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002fae:	00 00                	add    BYTE PTR [eax],al
30002fb0:	74 05                	je     30002fb7 <__x86.get_pc_thunk.cx+0x57f>
30002fb2:	00 00                	add    BYTE PTR [eax],al
30002fb4:	f4                   	hlt    
30002fb5:	dc ff                	fdiv   st(7),st
30002fb7:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
30002fbd:	41                   	inc    ecx
30002fbe:	0e                   	push   cs
30002fbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fc5:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
30002fcb:	00 20                	add    BYTE PTR [eax],ah
30002fcd:	00 00                	add    BYTE PTR [eax],al
30002fcf:	00 94 05 00 00 5b dd 	add    BYTE PTR [ebp+eax*1-0x22a50000],dl
30002fd6:	ff                   	(bad)  
30002fd7:	ff d4                	call   esp
30002fd9:	01 00                	add    DWORD PTR [eax],eax
30002fdb:	00 00                	add    BYTE PTR [eax],al
30002fdd:	41                   	inc    ecx
30002fde:	0e                   	push   cs
30002fdf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fe5:	44                   	inc    esp
30002fe6:	83 03 03             	add    DWORD PTR [ebx],0x3
30002fe9:	cc                   	int3   
30002fea:	01 c5                	add    ebp,eax
30002fec:	c3                   	ret    
30002fed:	0c 04                	or     al,0x4
30002fef:	04 1c                	add    al,0x1c
30002ff1:	00 00                	add    BYTE PTR [eax],al
30002ff3:	00 b8 05 00 00 0b    	add    BYTE PTR [eax+0xb000005],bh
30002ff9:	df ff                	(bad)  
30002ffb:	ff 20                	jmp    DWORD PTR [eax]
30002ffd:	00 00                	add    BYTE PTR [eax],al
30002fff:	00 00                	add    BYTE PTR [eax],al
30003001:	41                   	inc    ecx
30003002:	0e                   	push   cs
30003003:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003009:	5c                   	pop    esp
3000300a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000300d:	04 00                	add    al,0x0
3000300f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003012:	00 00                	add    BYTE PTR [eax],al
30003014:	d8 05 00 00 0b df    	fadd   DWORD PTR ds:0xdf0b0000
3000301a:	ff                   	(bad)  
3000301b:	ff                   	(bad)  
3000301c:	39 00                	cmp    DWORD PTR [eax],eax
3000301e:	00 00                	add    BYTE PTR [eax],al
30003020:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003023:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003029:	75 c5                	jne    30002ff0 <__x86.get_pc_thunk.cx+0x5b8>
3000302b:	0c 04                	or     al,0x4
3000302d:	04 00                	add    al,0x0
3000302f:	00 20                	add    BYTE PTR [eax],ah
30003031:	00 00                	add    BYTE PTR [eax],al
30003033:	00 f8                	add    al,bh
30003035:	05 00 00 24 df       	add    eax,0xdf240000
3000303a:	ff                   	(bad)  
3000303b:	ff 32                	push   DWORD PTR [edx]
3000303d:	00 00                	add    BYTE PTR [eax],al
3000303f:	00 00                	add    BYTE PTR [eax],al
30003041:	41                   	inc    ecx
30003042:	0e                   	push   cs
30003043:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003049:	44                   	inc    esp
3000304a:	83 03 6a             	add    DWORD PTR [ebx],0x6a
3000304d:	c5 c3 0c             	(bad)  
30003050:	04 04                	add    al,0x4
30003052:	00 00                	add    BYTE PTR [eax],al
30003054:	1c 00                	sbb    al,0x0
30003056:	00 00                	add    BYTE PTR [eax],al
30003058:	1c 06                	sbb    al,0x6
3000305a:	00 00                	add    BYTE PTR [eax],al
3000305c:	34 df                	xor    al,0xdf
3000305e:	ff                   	(bad)  
3000305f:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
30003065:	41                   	inc    ecx
30003066:	0e                   	push   cs
30003067:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000306d:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
30003073:	04 1c                	add    al,0x1c
30003075:	00 00                	add    BYTE PTR [eax],al
30003077:	00 3c 06             	add    BYTE PTR [esi+eax*1],bh
3000307a:	00 00                	add    BYTE PTR [eax],al
3000307c:	b0 e0                	mov    al,0xe0
3000307e:	ff                   	(bad)  
3000307f:	ff c7                	inc    edi
30003081:	00 00                	add    BYTE PTR [eax],al
30003083:	00 00                	add    BYTE PTR [eax],al
30003085:	41                   	inc    ecx
30003086:	0e                   	push   cs
30003087:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000308d:	02 c3                	add    al,bl
3000308f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003092:	04 00                	add    al,0x0
30003094:	1c 00                	sbb    al,0x0
30003096:	00 00                	add    BYTE PTR [eax],al
30003098:	5c                   	pop    esp
30003099:	06                   	push   es
3000309a:	00 00                	add    BYTE PTR [eax],al
3000309c:	57                   	push   edi
3000309d:	e1 ff                	loope  3000309e <__x86.get_pc_thunk.cx+0x666>
3000309f:	ff c7                	inc    edi
300030a1:	00 00                	add    BYTE PTR [eax],al
300030a3:	00 00                	add    BYTE PTR [eax],al
300030a5:	41                   	inc    ecx
300030a6:	0e                   	push   cs
300030a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030ad:	02 c3                	add    al,bl
300030af:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300030b2:	04 00                	add    al,0x0
300030b4:	1c 00                	sbb    al,0x0
300030b6:	00 00                	add    BYTE PTR [eax],al
300030b8:	7c 06                	jl     300030c0 <__x86.get_pc_thunk.cx+0x688>
300030ba:	00 00                	add    BYTE PTR [eax],al
300030bc:	00 e2                	add    dl,ah
300030be:	ff                   	(bad)  
300030bf:	ff 10                	call   DWORD PTR [eax]
300030c1:	00 00                	add    BYTE PTR [eax],al
300030c3:	00 00                	add    BYTE PTR [eax],al
300030c5:	41                   	inc    ecx
300030c6:	0e                   	push   cs
300030c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030cd:	4c                   	dec    esp
300030ce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300030d1:	04 00                	add    al,0x0
300030d3:	00 20                	add    BYTE PTR [eax],ah
300030d5:	00 00                	add    BYTE PTR [eax],al
300030d7:	00 9c 06 00 00 f0 e1 	add    BYTE PTR [esi+eax*1-0x1e100000],bl
300030de:	ff                   	(bad)  
300030df:	ff 2c 00             	jmp    FWORD PTR [eax+eax*1]
300030e2:	00 00                	add    BYTE PTR [eax],al
300030e4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300030e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030ed:	44                   	inc    esp
300030ee:	83 03 64             	add    DWORD PTR [ebx],0x64
300030f1:	c5 c3 0c             	(bad)  
300030f4:	04 04                	add    al,0x4
300030f6:	00 00                	add    BYTE PTR [eax],al
300030f8:	20 00                	and    BYTE PTR [eax],al
300030fa:	00 00                	add    BYTE PTR [eax],al
300030fc:	c0 06 00             	rol    BYTE PTR [esi],0x0
300030ff:	00 f8                	add    al,bh
30003101:	e1 ff                	loope  30003102 <__x86.get_pc_thunk.cx+0x6ca>
30003103:	ff 26                	jmp    DWORD PTR [esi]
30003105:	00 00                	add    BYTE PTR [eax],al
30003107:	00 00                	add    BYTE PTR [eax],al
30003109:	41                   	inc    ecx
3000310a:	0e                   	push   cs
3000310b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003111:	44                   	inc    esp
30003112:	83 03 5e             	add    DWORD PTR [ebx],0x5e
30003115:	c5 c3 0c             	(bad)  
30003118:	04 04                	add    al,0x4
3000311a:	00 00                	add    BYTE PTR [eax],al
3000311c:	20 00                	and    BYTE PTR [eax],al
3000311e:	00 00                	add    BYTE PTR [eax],al
30003120:	e4 06                	in     al,0x6
30003122:	00 00                	add    BYTE PTR [eax],al
30003124:	fa                   	cli    
30003125:	e1 ff                	loope  30003126 <__x86.get_pc_thunk.cx+0x6ee>
30003127:	ff 37                	push   DWORD PTR [edi]
30003129:	01 00                	add    DWORD PTR [eax],eax
3000312b:	00 00                	add    BYTE PTR [eax],al
3000312d:	41                   	inc    ecx
3000312e:	0e                   	push   cs
3000312f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003135:	44                   	inc    esp
30003136:	83 03 03             	add    DWORD PTR [ebx],0x3
30003139:	2f                   	das    
3000313a:	01 c5                	add    ebp,eax
3000313c:	c3                   	ret    
3000313d:	0c 04                	or     al,0x4
3000313f:	04 20                	add    al,0x20
30003141:	00 00                	add    BYTE PTR [eax],al
30003143:	00 08                	add    BYTE PTR [eax],cl
30003145:	07                   	pop    es
30003146:	00 00                	add    BYTE PTR [eax],al
30003148:	0d e3 ff ff 84       	or     eax,0x84ffffe3
3000314d:	00 00                	add    BYTE PTR [eax],al
3000314f:	00 00                	add    BYTE PTR [eax],al
30003151:	41                   	inc    ecx
30003152:	0e                   	push   cs
30003153:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003159:	44                   	inc    esp
3000315a:	83 03 02             	add    DWORD PTR [ebx],0x2
3000315d:	7c c5                	jl     30003124 <__x86.get_pc_thunk.cx+0x6ec>
3000315f:	c3                   	ret    
30003160:	0c 04                	or     al,0x4
30003162:	04 00                	add    al,0x0
30003164:	1c 00                	sbb    al,0x0
30003166:	00 00                	add    BYTE PTR [eax],al
30003168:	2c 07                	sub    al,0x7
3000316a:	00 00                	add    BYTE PTR [eax],al
3000316c:	6d                   	ins    DWORD PTR es:[edi],dx
3000316d:	e3 ff                	jecxz  3000316e <__x86.get_pc_thunk.cx+0x736>
3000316f:	ff 53 00             	call   DWORD PTR [ebx+0x0]
30003172:	00 00                	add    BYTE PTR [eax],al
30003174:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003177:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000317d:	02 4f c5             	add    cl,BYTE PTR [edi-0x3b]
30003180:	0c 04                	or     al,0x4
30003182:	04 00                	add    al,0x0
30003184:	20 00                	and    BYTE PTR [eax],al
30003186:	00 00                	add    BYTE PTR [eax],al
30003188:	4c                   	dec    esp
30003189:	07                   	pop    es
3000318a:	00 00                	add    BYTE PTR [eax],al
3000318c:	a0 e3 ff ff 3e       	mov    al,ds:0x3effffe3
30003191:	00 00                	add    BYTE PTR [eax],al
30003193:	00 00                	add    BYTE PTR [eax],al
30003195:	41                   	inc    ecx
30003196:	0e                   	push   cs
30003197:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000319d:	44                   	inc    esp
3000319e:	83 03 76             	add    DWORD PTR [ebx],0x76
300031a1:	c5 c3 0c             	(bad)  
300031a4:	04 04                	add    al,0x4
300031a6:	00 00                	add    BYTE PTR [eax],al
300031a8:	20 00                	and    BYTE PTR [eax],al
300031aa:	00 00                	add    BYTE PTR [eax],al
300031ac:	70 07                	jo     300031b5 <__x86.get_pc_thunk.cx+0x77d>
300031ae:	00 00                	add    BYTE PTR [eax],al
300031b0:	ba e3 ff ff 3e       	mov    edx,0x3effffe3
300031b5:	00 00                	add    BYTE PTR [eax],al
300031b7:	00 00                	add    BYTE PTR [eax],al
300031b9:	41                   	inc    ecx
300031ba:	0e                   	push   cs
300031bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031c1:	44                   	inc    esp
300031c2:	83 03 76             	add    DWORD PTR [ebx],0x76
300031c5:	c5 c3 0c             	(bad)  
300031c8:	04 04                	add    al,0x4
300031ca:	00 00                	add    BYTE PTR [eax],al
300031cc:	1c 00                	sbb    al,0x0
300031ce:	00 00                	add    BYTE PTR [eax],al
300031d0:	94                   	xchg   esp,eax
300031d1:	07                   	pop    es
300031d2:	00 00                	add    BYTE PTR [eax],al
300031d4:	d4 e3                	aam    0xe3
300031d6:	ff                   	(bad)  
300031d7:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
300031da:	00 00                	add    BYTE PTR [eax],al
300031dc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300031df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031e5:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
300031e8:	0c 04                	or     al,0x4
300031ea:	04 00                	add    al,0x0
300031ec:	24 00                	and    al,0x0
300031ee:	00 00                	add    BYTE PTR [eax],al
300031f0:	b4 07                	mov    ah,0x7
300031f2:	00 00                	add    BYTE PTR [eax],al
300031f4:	24 e4                	and    al,0xe4
300031f6:	ff                   	(bad)  
300031f7:	ff 5e 00             	call   FWORD PTR [esi+0x0]
300031fa:	00 00                	add    BYTE PTR [eax],al
300031fc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300031ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003205:	45                   	inc    ebp
30003206:	86 03                	xchg   BYTE PTR [ebx],al
30003208:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
3000320c:	c3                   	ret    
3000320d:	41                   	inc    ecx
3000320e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003212:	04 04                	add    al,0x4
30003214:	1c 00                	sbb    al,0x0
30003216:	00 00                	add    BYTE PTR [eax],al
30003218:	dc 07                	fadd   QWORD PTR [edi]
3000321a:	00 00                	add    BYTE PTR [eax],al
3000321c:	5c                   	pop    esp
3000321d:	e4 ff                	in     al,0xff
3000321f:	ff 40 00             	inc    DWORD PTR [eax+0x0]
30003222:	00 00                	add    BYTE PTR [eax],al
30003224:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003227:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000322d:	7c c5                	jl     300031f4 <__x86.get_pc_thunk.cx+0x7bc>
3000322f:	0c 04                	or     al,0x4
30003231:	04 00                	add    al,0x0
30003233:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003236:	00 00                	add    BYTE PTR [eax],al
30003238:	fc                   	cld    
30003239:	07                   	pop    es
3000323a:	00 00                	add    BYTE PTR [eax],al
3000323c:	7c e4                	jl     30003222 <__x86.get_pc_thunk.cx+0x7ea>
3000323e:	ff                   	(bad)  
3000323f:	ff 40 00             	inc    DWORD PTR [eax+0x0]
30003242:	00 00                	add    BYTE PTR [eax],al
30003244:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003247:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000324d:	7c c5                	jl     30003214 <__x86.get_pc_thunk.cx+0x7dc>
3000324f:	0c 04                	or     al,0x4
30003251:	04 00                	add    al,0x0
30003253:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003256:	00 00                	add    BYTE PTR [eax],al
30003258:	1c 08                	sbb    al,0x8
3000325a:	00 00                	add    BYTE PTR [eax],al
3000325c:	9c                   	pushf  
3000325d:	e4 ff                	in     al,0xff
3000325f:	ff 47 00             	inc    DWORD PTR [edi+0x0]
30003262:	00 00                	add    BYTE PTR [eax],al
30003264:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003267:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000326d:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
30003270:	0c 04                	or     al,0x4
30003272:	04 00                	add    al,0x0
30003274:	1c 00                	sbb    al,0x0
30003276:	00 00                	add    BYTE PTR [eax],al
30003278:	3c 08                	cmp    al,0x8
3000327a:	00 00                	add    BYTE PTR [eax],al
3000327c:	c4                   	(bad)  
3000327d:	e4 ff                	in     al,0xff
3000327f:	ff 30                	push   DWORD PTR [eax]
30003281:	00 00                	add    BYTE PTR [eax],al
30003283:	00 00                	add    BYTE PTR [eax],al
30003285:	41                   	inc    ecx
30003286:	0e                   	push   cs
30003287:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000328d:	6c                   	ins    BYTE PTR es:[edi],dx
3000328e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003291:	04 00                	add    al,0x0
30003293:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003296:	00 00                	add    BYTE PTR [eax],al
30003298:	5c                   	pop    esp
30003299:	08 00                	or     BYTE PTR [eax],al
3000329b:	00 d4                	add    ah,dl
3000329d:	e4 ff                	in     al,0xff
3000329f:	ff 59 00             	call   FWORD PTR [ecx+0x0]
300032a2:	00 00                	add    BYTE PTR [eax],al
300032a4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300032a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032ad:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
300032b0:	0c 04                	or     al,0x4
300032b2:	04 00                	add    al,0x0
300032b4:	1c 00                	sbb    al,0x0
300032b6:	00 00                	add    BYTE PTR [eax],al
300032b8:	7c 08                	jl     300032c2 <__x86.get_pc_thunk.cx+0x88a>
300032ba:	00 00                	add    BYTE PTR [eax],al
300032bc:	10 e5                	adc    ch,ah
300032be:	ff                   	(bad)  
300032bf:	ff 31                	push   DWORD PTR [ecx]
300032c1:	00 00                	add    BYTE PTR [eax],al
300032c3:	00 00                	add    BYTE PTR [eax],al
300032c5:	41                   	inc    ecx
300032c6:	0e                   	push   cs
300032c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032cd:	6d                   	ins    DWORD PTR es:[edi],dx
300032ce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300032d1:	04 00                	add    al,0x0
300032d3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300032d6:	00 00                	add    BYTE PTR [eax],al
300032d8:	9c                   	pushf  
300032d9:	08 00                	or     BYTE PTR [eax],al
300032db:	00 21                	add    BYTE PTR [ecx],ah
300032dd:	e5 ff                	in     eax,0xff
300032df:	ff 31                	push   DWORD PTR [ecx]
300032e1:	00 00                	add    BYTE PTR [eax],al
300032e3:	00 00                	add    BYTE PTR [eax],al
300032e5:	41                   	inc    ecx
300032e6:	0e                   	push   cs
300032e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032ed:	6d                   	ins    DWORD PTR es:[edi],dx
300032ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300032f1:	04 00                	add    al,0x0
300032f3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300032f6:	00 00                	add    BYTE PTR [eax],al
300032f8:	bc 08 00 00 34       	mov    esp,0x34000008
300032fd:	e5 ff                	in     eax,0xff
300032ff:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
30003302:	00 00                	add    BYTE PTR [eax],al
30003304:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003307:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000330d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
30003310:	0c 04                	or     al,0x4
30003312:	04 00                	add    al,0x0
30003314:	1c 00                	sbb    al,0x0
30003316:	00 00                	add    BYTE PTR [eax],al
30003318:	dc 08                	fmul   QWORD PTR [eax]
3000331a:	00 00                	add    BYTE PTR [eax],al
3000331c:	7b e5                	jnp    30003303 <__x86.get_pc_thunk.cx+0x8cb>
3000331e:	ff                   	(bad)  
3000331f:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
30003322:	00 00                	add    BYTE PTR [eax],al
30003324:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003327:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000332d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
30003330:	0c 04                	or     al,0x4
30003332:	04 00                	add    al,0x0
30003334:	1c 00                	sbb    al,0x0
30003336:	00 00                	add    BYTE PTR [eax],al
30003338:	fc                   	cld    
30003339:	08 00                	or     BYTE PTR [eax],al
3000333b:	00 c4                	add    ah,al
3000333d:	e5 ff                	in     eax,0xff
3000333f:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
30003342:	00 00                	add    BYTE PTR [eax],al
30003344:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003347:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000334d:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
30003351:	04 04                	add    al,0x4
30003353:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003356:	00 00                	add    BYTE PTR [eax],al
30003358:	1c 09                	sbb    al,0x9
3000335a:	00 00                	add    BYTE PTR [eax],al
3000335c:	04 e6                	add    al,0xe6
3000335e:	ff                   	(bad)  
3000335f:	ff 20                	jmp    DWORD PTR [eax]
30003361:	00 00                	add    BYTE PTR [eax],al
30003363:	00 00                	add    BYTE PTR [eax],al
30003365:	41                   	inc    ecx
30003366:	0e                   	push   cs
30003367:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000336d:	5c                   	pop    esp
3000336e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003371:	04 00                	add    al,0x0
30003373:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003376:	00 00                	add    BYTE PTR [eax],al
30003378:	3c 09                	cmp    al,0x9
3000337a:	00 00                	add    BYTE PTR [eax],al
3000337c:	04 e6                	add    al,0xe6
3000337e:	ff                   	(bad)  
3000337f:	ff                   	(bad)  
30003380:	7d 01                	jge    30003383 <__x86.get_pc_thunk.cx+0x94b>
30003382:	00 00                	add    BYTE PTR [eax],al
30003384:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003387:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000338d:	46                   	inc    esi
3000338e:	87 03                	xchg   DWORD PTR [ebx],eax
30003390:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
30003393:	05 03 70 01 c3       	add    eax,0xc3017003
30003398:	41                   	inc    ecx
30003399:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
3000339d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033a0:	04 00                	add    al,0x0
300033a2:	00 00                	add    BYTE PTR [eax],al
300033a4:	1c 00                	sbb    al,0x0
300033a6:	00 00                	add    BYTE PTR [eax],al
300033a8:	6c                   	ins    BYTE PTR es:[edi],dx
300033a9:	09 00                	or     DWORD PTR [eax],eax
300033ab:	00 54 e7 ff          	add    BYTE PTR [edi+eiz*8-0x1],dl
300033af:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
300033b5:	41                   	inc    ecx
300033b6:	0e                   	push   cs
300033b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033bd:	59                   	pop    ecx
300033be:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033c1:	04 00                	add    al,0x0
300033c3:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
300033c6:	00 00                	add    BYTE PTR [eax],al
300033c8:	8c 09                	mov    WORD PTR [ecx],cs
300033ca:	00 00                	add    BYTE PTR [eax],al
300033cc:	54                   	push   esp
300033cd:	e7 ff                	out    0xff,eax
300033cf:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
300033d6:	0e                   	push   cs
300033d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033dd:	46                   	inc    esi
300033de:	87 03                	xchg   DWORD PTR [ebx],eax
300033e0:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
300033e3:	05 03 8f 01 c3       	add    eax,0xc3018f03
300033e8:	41                   	inc    ecx
300033e9:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
300033ed:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033f0:	04 00                	add    al,0x0
300033f2:	00 00                	add    BYTE PTR [eax],al
300033f4:	20 00                	and    BYTE PTR [eax],al
300033f6:	00 00                	add    BYTE PTR [eax],al
300033f8:	bc 09 00 00 c0       	mov    esp,0xc0000009
300033fd:	e8 ff ff 96 00       	call   30973401 <ticksToWait+0x96f0c5>
30003402:	00 00                	add    BYTE PTR [eax],al
30003404:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003407:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000340d:	44                   	inc    esp
3000340e:	83 03 02             	add    DWORD PTR [ebx],0x2
30003411:	8e c5                	mov    es,ebp
30003413:	c3                   	ret    
30003414:	0c 04                	or     al,0x4
30003416:	04 00                	add    al,0x0
30003418:	24 00                	and    al,0x0
3000341a:	00 00                	add    BYTE PTR [eax],al
3000341c:	e0 09                	loopne 30003427 <__x86.get_pc_thunk.cx+0x9ef>
3000341e:	00 00                	add    BYTE PTR [eax],al
30003420:	34 e9                	xor    al,0xe9
30003422:	ff                   	(bad)  
30003423:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
30003426:	00 00                	add    BYTE PTR [eax],al
30003428:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000342b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003431:	42                   	inc    edx
30003432:	86 03                	xchg   BYTE PTR [ebx],al
30003434:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
30003438:	c3                   	ret    
30003439:	41                   	inc    ecx
3000343a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
3000343e:	04 04                	add    al,0x4
30003440:	1c 00                	sbb    al,0x0
30003442:	00 00                	add    BYTE PTR [eax],al
30003444:	08 0a                	or     BYTE PTR [edx],cl
30003446:	00 00                	add    BYTE PTR [eax],al
30003448:	7a e9                	jp     30003433 <__x86.get_pc_thunk.cx+0x9fb>
3000344a:	ff                   	(bad)  
3000344b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003451:	41                   	inc    ecx
30003452:	0e                   	push   cs
30003453:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003459:	59                   	pop    ecx
3000345a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000345d:	04 00                	add    al,0x0
3000345f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003462:	00 00                	add    BYTE PTR [eax],al
30003464:	28 0a                	sub    BYTE PTR [edx],cl
30003466:	00 00                	add    BYTE PTR [eax],al
30003468:	78 e9                	js     30003453 <__x86.get_pc_thunk.cx+0xa1b>
3000346a:	ff                   	(bad)  
3000346b:	ff 29                	jmp    FWORD PTR [ecx]
3000346d:	00 00                	add    BYTE PTR [eax],al
3000346f:	00 00                	add    BYTE PTR [eax],al
30003471:	41                   	inc    ecx
30003472:	0e                   	push   cs
30003473:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003479:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
3000347d:	04 00                	add    al,0x0
3000347f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003482:	00 00                	add    BYTE PTR [eax],al
30003484:	48                   	dec    eax
30003485:	0a 00                	or     al,BYTE PTR [eax]
30003487:	00 81 e9 ff ff 19    	add    BYTE PTR [ecx+0x19ffffe9],al
3000348d:	03 00                	add    eax,DWORD PTR [eax]
3000348f:	00 00                	add    BYTE PTR [eax],al
30003491:	41                   	inc    ecx
30003492:	0e                   	push   cs
30003493:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003499:	44                   	inc    esp
3000349a:	83 03 03             	add    DWORD PTR [ebx],0x3
3000349d:	10 03                	adc    BYTE PTR [ebx],al
3000349f:	c3                   	ret    
300034a0:	41                   	inc    ecx
300034a1:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034a4:	04 00                	add    al,0x0
300034a6:	00 00                	add    BYTE PTR [eax],al
300034a8:	20 00                	and    BYTE PTR [eax],al
300034aa:	00 00                	add    BYTE PTR [eax],al
300034ac:	70 0a                	jo     300034b8 <__x86.get_pc_thunk.cx+0xa80>
300034ae:	00 00                	add    BYTE PTR [eax],al
300034b0:	72 ec                	jb     3000349e <__x86.get_pc_thunk.cx+0xa66>
300034b2:	ff                   	(bad)  
300034b3:	ff                   	(bad)  
300034b4:	3f                   	aas    
300034b5:	00 00                	add    BYTE PTR [eax],al
300034b7:	00 00                	add    BYTE PTR [eax],al
300034b9:	41                   	inc    ecx
300034ba:	0e                   	push   cs
300034bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034c1:	44                   	inc    esp
300034c2:	83 03 77             	add    DWORD PTR [ebx],0x77
300034c5:	c5 c3 0c             	(bad)  
300034c8:	04 04                	add    al,0x4
300034ca:	00 00                	add    BYTE PTR [eax],al
300034cc:	20 00                	and    BYTE PTR [eax],al
300034ce:	00 00                	add    BYTE PTR [eax],al
300034d0:	94                   	xchg   esp,eax
300034d1:	0a 00                	or     al,BYTE PTR [eax]
300034d3:	00 8d ec ff ff 3e    	add    BYTE PTR [ebp+0x3effffec],cl
300034d9:	00 00                	add    BYTE PTR [eax],al
300034db:	00 00                	add    BYTE PTR [eax],al
300034dd:	41                   	inc    ecx
300034de:	0e                   	push   cs
300034df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034e5:	44                   	inc    esp
300034e6:	83 03 76             	add    DWORD PTR [ebx],0x76
300034e9:	c5 c3 0c             	(bad)  
300034ec:	04 04                	add    al,0x4
300034ee:	00 00                	add    BYTE PTR [eax],al
300034f0:	2c 00                	sub    al,0x0
300034f2:	00 00                	add    BYTE PTR [eax],al
300034f4:	b8 0a 00 00 a7       	mov    eax,0xa700000a
300034f9:	ec                   	in     al,dx
300034fa:	ff                   	(bad)  
300034fb:	ff 57 08             	call   DWORD PTR [edi+0x8]
300034fe:	00 00                	add    BYTE PTR [eax],al
30003500:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003503:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003509:	46                   	inc    esi
3000350a:	87 03                	xchg   DWORD PTR [ebx],eax
3000350c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
3000350f:	05 03 4a 08 c3       	add    eax,0xc3084a03
30003514:	41                   	inc    ecx
30003515:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003519:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000351c:	04 00                	add    al,0x0
3000351e:	00 00                	add    BYTE PTR [eax],al
30003520:	10 00                	adc    BYTE PTR [eax],al
30003522:	00 00                	add    BYTE PTR [eax],al
30003524:	e8 0a 00 00 10       	call   40003533 <ticksToWait+0xffff1f7>
30003529:	f5                   	cmc    
3000352a:	ff                   	(bad)  
3000352b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
3000352e:	00 00                	add    BYTE PTR [eax],al
30003530:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

30003534 <.dynsym>:
	...
30003544:	ef                   	out    dx,eax
30003545:	00 00                	add    BYTE PTR [eax],al
30003547:	00 78 16             	add    BYTE PTR [eax+0x16],bh
3000354a:	00 30                	add    BYTE PTR [eax],dh
3000354c:	40                   	inc    eax
3000354d:	00 00                	add    BYTE PTR [eax],al
3000354f:	00 12                	add    BYTE PTR [edx],dl
30003551:	00 01                	add    BYTE PTR [ecx],al
30003553:	00 92 00 00 00 cb    	add    BYTE PTR [edx-0x35000000],dl
30003559:	0b 00                	or     eax,DWORD PTR [eax]
3000355b:	30 1c 00             	xor    BYTE PTR [eax+eax*1],bl
3000355e:	00 00                	add    BYTE PTR [eax],al
30003560:	12 00                	adc    al,BYTE PTR [eax]
30003562:	01 00                	add    DWORD PTR [eax],eax
30003564:	74 00                	je     30003566 <__x86.get_pc_thunk.cx+0xb2e>
30003566:	00 00                	add    BYTE PTR [eax],al
30003568:	4b                   	dec    ebx
30003569:	0a 00                	or     al,BYTE PTR [eax]
3000356b:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
3000356e:	00 00                	add    BYTE PTR [eax],al
30003570:	12 00                	adc    al,BYTE PTR [eax]
30003572:	01 00                	add    DWORD PTR [eax],eax
30003574:	fe 00                	inc    BYTE PTR [eax]
30003576:	00 00                	add    BYTE PTR [eax],al
30003578:	70 17                	jo     30003591 <__x86.get_pc_thunk.cx+0xb59>
3000357a:	00 30                	add    BYTE PTR [eax],dh
3000357c:	59                   	pop    ecx
3000357d:	00 00                	add    BYTE PTR [eax],al
3000357f:	00 12                	add    BYTE PTR [edx],dl
30003581:	00 01                	add    BYTE PTR [ecx],al
30003583:	00 d8                	add    al,bl
30003585:	00 00                	add    BYTE PTR [eax],al
30003587:	00 55 14             	add    BYTE PTR [ebp+0x14],dl
3000358a:	00 30                	add    BYTE PTR [eax],dh
3000358c:	84 00                	test   BYTE PTR [eax],al
3000358e:	00 00                	add    BYTE PTR [eax],al
30003590:	12 00                	adc    al,BYTE PTR [eax]
30003592:	01 00                	add    DWORD PTR [eax],eax
30003594:	21 00                	and    DWORD PTR [eax],eax
30003596:	00 00                	add    BYTE PTR [eax],al
30003598:	00 04 00             	add    BYTE PTR [eax+eax*1],al
3000359b:	30 aa 00 00 00 12    	xor    BYTE PTR [edx+0x12000000],ch
300035a1:	00 01                	add    BYTE PTR [ecx],al
300035a3:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
300035a6:	00 00                	add    BYTE PTR [eax],al
300035a8:	c4 07                	les    eax,FWORD PTR [edi]
300035aa:	00 30                	add    BYTE PTR [eax],dh
300035ac:	ba 00 00 00 12       	mov    edx,0x12000000
300035b1:	00 01                	add    BYTE PTR [ecx],al
300035b3:	00 60 00             	add    BYTE PTR [eax+0x0],ah
300035b6:	00 00                	add    BYTE PTR [eax],al
300035b8:	95                   	xchg   ebp,eax
300035b9:	07                   	pop    es
300035ba:	00 30                	add    BYTE PTR [eax],dh
300035bc:	2f                   	das    
300035bd:	00 00                	add    BYTE PTR [eax],al
300035bf:	00 12                	add    BYTE PTR [edx],dl
300035c1:	00 01                	add    BYTE PTR [ecx],al
300035c3:	00 be 00 00 00 90    	add    BYTE PTR [esi-0x70000000],bh
300035c9:	0f 00                	(bad)  
300035cb:	30 9b 01 00 00 12    	xor    BYTE PTR [ebx+0x12000001],bl
300035d1:	00 01                	add    BYTE PTR [ecx],al
300035d3:	00 46 00             	add    BYTE PTR [esi+0x0],al
300035d6:	00 00                	add    BYTE PTR [eax],al
300035d8:	2c 07                	sub    al,0x7
300035da:	00 30                	add    BYTE PTR [eax],dh
300035dc:	26 00 00             	add    BYTE PTR es:[eax],al
300035df:	00 12                	add    BYTE PTR [edx],dl
300035e1:	00 01                	add    BYTE PTR [ecx],al
300035e3:	00 b2 00 00 00 03    	add    BYTE PTR [edx+0x3000000],dh
300035e9:	0f 00                	(bad)  
300035eb:	30 20                	xor    BYTE PTR [eax],ah
300035ed:	00 00                	add    BYTE PTR [eax],al
300035ef:	00 12                	add    BYTE PTR [edx],dl
300035f1:	00 01                	add    BYTE PTR [ecx],al
300035f3:	00 7a 00             	add    BYTE PTR [edx+0x0],bh
300035f6:	00 00                	add    BYTE PTR [eax],al
300035f8:	ea 0a 00 30 4f 00 00 	jmp    0x0:0x4f30000a
300035ff:	00 12                	add    BYTE PTR [edx],dl
30003601:	00 01                	add    BYTE PTR [ecx],al
30003603:	00 1e                	add    BYTE PTR [esi],bl
30003605:	01 00                	add    DWORD PTR [eax],eax
30003607:	00 80 19 00 30 7d    	add    BYTE PTR [eax+0x7d300019],al
3000360d:	01 00                	add    DWORD PTR [eax],eax
3000360f:	00 12                	add    BYTE PTR [edx],dl
30003611:	00 01                	add    BYTE PTR [ecx],al
30003613:	00 17                	add    BYTE PTR [edi],dl
30003615:	00 00                	add    BYTE PTR [eax],al
30003617:	00 2b                	add    BYTE PTR [ebx],ch
30003619:	02 00                	add    al,BYTE PTR [eax]
3000361b:	30 bb 00 00 00 12    	xor    BYTE PTR [ebx+0x12000000],bh
30003621:	00 01                	add    BYTE PTR [ecx],al
30003623:	00 cc                	add    ah,cl
30003625:	00 00                	add    BYTE PTR [eax],al
30003627:	00 bc 12 00 30 10 00 	add    BYTE PTR [edx+edx*1+0x103000],bh
3000362e:	00 00                	add    BYTE PTR [eax],al
30003630:	12 00                	adc    al,BYTE PTR [eax]
30003632:	01 00                	add    DWORD PTR [eax],eax
30003634:	a2 00 00 00 09       	mov    ds:0x9000000,al
30003639:	1e                   	push   ds
3000363a:	00 30                	add    BYTE PTR [eax],dh
3000363c:	19 03                	sbb    DWORD PTR [ebx],eax
3000363e:	00 00                	add    BYTE PTR [eax],al
30003640:	12 00                	adc    al,BYTE PTR [eax]
30003642:	01 00                	add    DWORD PTR [eax],eax
30003644:	2e 01 00             	add    DWORD PTR cs:[eax],eax
30003647:	00 20                	add    BYTE PTR [eax],ah
30003649:	1b 00                	sbb    eax,DWORD PTR [eax]
3000364b:	30 9c 01 00 00 12 00 	xor    BYTE PTR [ecx+eax*1+0x120000],bl
30003652:	01 00                	add    DWORD PTR [eax],eax
30003654:	6a 00                	push   0x0
30003656:	00 00                	add    BYTE PTR [eax],al
30003658:	7b 09                	jnp    30003663 <__x86.get_pc_thunk.cx+0xc2b>
3000365a:	00 30                	add    BYTE PTR [eax],dh
3000365c:	b1 00                	mov    cl,0x0
3000365e:	00 00                	add    BYTE PTR [eax],al
30003660:	12 00                	adc    al,BYTE PTR [eax]
30003662:	01 00                	add    DWORD PTR [eax],eax
30003664:	e1 00                	loope  30003666 <__x86.get_pc_thunk.cx+0xc2e>
30003666:	00 00                	add    BYTE PTR [eax],al
30003668:	2c 15                	sub    al,0x15
3000366a:	00 30                	add    BYTE PTR [eax],dh
3000366c:	3e 00 00             	add    BYTE PTR ds:[eax],al
3000366f:	00 12                	add    BYTE PTR [edx],dl
30003671:	00 01                	add    BYTE PTR [ecx],al
30003673:	00 8d 00 00 00 7f    	add    BYTE PTR [ebp+0x7f000000],cl
30003679:	0b 00                	or     eax,DWORD PTR [eax]
3000367b:	30 4c 00 00          	xor    BYTE PTR [eax+eax*1+0x0],cl
3000367f:	00 12                	add    BYTE PTR [edx],dl
30003681:	00 01                	add    BYTE PTR [ecx],al
30003683:	00 3f                	add    BYTE PTR [edi],bh
30003685:	00 00                	add    BYTE PTR [eax],al
30003687:	00 f8                	add    al,bh
30003689:	06                   	push   es
3000368a:	00 30                	add    BYTE PTR [eax],dh
3000368c:	31 00                	xor    DWORD PTR [eax],eax
3000368e:	00 00                	add    BYTE PTR [eax],al
30003690:	12 00                	adc    al,BYTE PTR [eax]
30003692:	01 00                	add    DWORD PTR [eax],eax
30003694:	5a                   	pop    edx
30003695:	01 00                	add    DWORD PTR [eax],eax
30003697:	00 9f 21 00 30 57    	add    BYTE PTR [edi+0x57300021],bl
3000369d:	08 00                	or     BYTE PTR [eax],al
3000369f:	00 12                	add    BYTE PTR [edx],dl
300036a1:	00 01                	add    BYTE PTR [ecx],al
300036a3:	00 3d 01 00 00 c2    	add    BYTE PTR ds:0xc2000001,bh
300036a9:	1d 00 30 1d 00       	sbb    eax,0x1d3000
300036ae:	00 00                	add    BYTE PTR [eax],al
300036b0:	12 00                	adc    al,BYTE PTR [eax]
300036b2:	01 00                	add    DWORD PTR [eax],eax
300036b4:	3a 00                	cmp    al,BYTE PTR [eax]
300036b6:	00 00                	add    BYTE PTR [eax],al
300036b8:	c3                   	ret    
300036b9:	06                   	push   es
300036ba:	00 30                	add    BYTE PTR [eax],dh
300036bc:	35 00 00 00 12       	xor    eax,0x12000000
300036c1:	00 01                	add    BYTE PTR [ecx],al
300036c3:	00 0e                	add    BYTE PTR [esi],cl
300036c5:	01 00                	add    DWORD PTR [eax],eax
300036c7:	00 30                	add    BYTE PTR [eax],dh
300036c9:	18 00                	sbb    BYTE PTR [eax],al
300036cb:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
300036ce:	00 00                	add    BYTE PTR [eax],al
300036d0:	12 00                	adc    al,BYTE PTR [eax]
300036d2:	01 00                	add    DWORD PTR [eax],eax
300036d4:	16                   	push   ss
300036d5:	01 00                	add    DWORD PTR [eax],eax
300036d7:	00 60 19             	add    BYTE PTR [eax+0x19],ah
300036da:	00 30                	add    BYTE PTR [eax],dh
300036dc:	20 00                	and    BYTE PTR [eax],al
300036de:	00 00                	add    BYTE PTR [eax],al
300036e0:	12 00                	adc    al,BYTE PTR [eax]
300036e2:	01 00                	add    DWORD PTR [eax],eax
300036e4:	28 00                	sub    BYTE PTR [eax],al
300036e6:	00 00                	add    BYTE PTR [eax],al
300036e8:	aa                   	stos   BYTE PTR es:[edi],al
300036e9:	04 00                	add    al,0x0
300036eb:	30 c1                	xor    cl,al
300036ed:	01 00                	add    DWORD PTR [eax],eax
300036ef:	00 12                	add    BYTE PTR [edx],dl
300036f1:	00 01                	add    BYTE PTR [ecx],al
300036f3:	00 10                	add    BYTE PTR [eax],dl
300036f5:	00 00                	add    BYTE PTR [eax],al
300036f7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
300036fa:	00 30                	add    BYTE PTR [eax],dh
300036fc:	97                   	xchg   edi,eax
300036fd:	00 00                	add    BYTE PTR [eax],al
300036ff:	00 12                	add    BYTE PTR [edx],dl
30003701:	00 01                	add    BYTE PTR [ecx],al
30003703:	00 4b 00             	add    BYTE PTR [ebx+0x0],cl
30003706:	00 00                	add    BYTE PTR [eax],al
30003708:	00 00                	add    BYTE PTR [eax],al
3000370a:	13 00                	adc    eax,DWORD PTR [eax]
3000370c:	00 00                	add    BYTE PTR [eax],al
3000370e:	00 00                	add    BYTE PTR [eax],al
30003710:	10 00                	adc    BYTE PTR [eax],al
30003712:	01 00                	add    DWORD PTR [eax],eax
30003714:	44                   	inc    esp
30003715:	01 00                	add    DWORD PTR [eax],eax
30003717:	00 22                	add    BYTE PTR [edx],ah
30003719:	21 00                	and    DWORD PTR [eax],eax
3000371b:	30 3f                	xor    BYTE PTR [edi],bh
3000371d:	00 00                	add    BYTE PTR [eax],al
3000371f:	00 12                	add    BYTE PTR [edx],dl
30003721:	00 01                	add    BYTE PTR [ecx],al
30003723:	00 c5                	add    ch,al
30003725:	00 00                	add    BYTE PTR [eax],al
30003727:	00 2c 11             	add    BYTE PTR [ecx+edx*1],ch
3000372a:	00 30                	add    BYTE PTR [eax],dh
3000372c:	c7 00 00 00 12 00    	mov    DWORD PTR [eax],0x120000
30003732:	01 00                	add    DWORD PTR [eax],eax
30003734:	35 01 00 00 bc       	xor    eax,0xbc000001
30003739:	1c 00                	sbb    al,0x0
3000373b:	30 96 00 00 00 12    	xor    BYTE PTR [esi+0x12000000],dl
30003741:	00 01                	add    BYTE PTR [ecx],al
30003743:	00 5c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],bl
30003747:	00 e0                	add    al,ah
30003749:	1d 00 30 29 00       	sbb    eax,0x293000
3000374e:	00 00                	add    BYTE PTR [eax],al
30003750:	12 00                	adc    al,BYTE PTR [eax]
30003752:	01 00                	add    DWORD PTR [eax],eax
30003754:	5b                   	pop    ebx
30003755:	00 00                	add    BYTE PTR [eax],al
30003757:	00 52 07             	add    BYTE PTR [edx+0x7],dl
3000375a:	00 30                	add    BYTE PTR [eax],dh
3000375c:	43                   	inc    ebx
3000375d:	00 00                	add    BYTE PTR [eax],al
3000375f:	00 12                	add    BYTE PTR [edx],dl
30003761:	00 01                	add    BYTE PTR [ecx],al
30003763:	00 e8                	add    al,ch
30003765:	00 00                	add    BYTE PTR [eax],al
30003767:	00 18                	add    BYTE PTR [eax],bl
30003769:	16                   	push   ss
3000376a:	00 30                	add    BYTE PTR [eax],dh
3000376c:	5e                   	pop    esi
3000376d:	00 00                	add    BYTE PTR [eax],al
3000376f:	00 12                	add    BYTE PTR [edx],dl
30003771:	00 01                	add    BYTE PTR [ecx],al
30003773:	00 ab 00 00 00 27    	add    BYTE PTR [ebx+0x27000000],ch
30003779:	0c 00                	or     al,0x0
3000377b:	30 20                	xor    BYTE PTR [eax],ah
3000377d:	00 00                	add    BYTE PTR [eax],al
3000377f:	00 12                	add    BYTE PTR [edx],dl
30003781:	00 01                	add    BYTE PTR [ecx],al
30003783:	00 08                	add    BYTE PTR [eax],cl
30003785:	00 00                	add    BYTE PTR [eax],al
30003787:	00 70 00             	add    BYTE PTR [eax+0x0],dh
3000378a:	00 30                	add    BYTE PTR [eax],dh
3000378c:	55                   	push   ebp
3000378d:	00 00                	add    BYTE PTR [eax],al
3000378f:	00 12                	add    BYTE PTR [edx],dl
30003791:	00 01                	add    BYTE PTR [ecx],al
30003793:	00 f6                	add    dh,dh
30003795:	00 00                	add    BYTE PTR [eax],al
30003797:	00 f8                	add    al,bh
30003799:	16                   	push   ss
3000379a:	00 30                	add    BYTE PTR [eax],dh
3000379c:	47                   	inc    edi
3000379d:	00 00                	add    BYTE PTR [eax],al
3000379f:	00 12                	add    BYTE PTR [edx],dl
300037a1:	00 01                	add    BYTE PTR [ecx],al
300037a3:	00 80 00 00 00 56    	add    BYTE PTR [eax+0x56000000],al
300037a9:	0b 00                	or     eax,DWORD PTR [eax]
300037ab:	30 29                	xor    BYTE PTR [ecx],ch
300037ad:	00 00                	add    BYTE PTR [eax],al
300037af:	00 12                	add    BYTE PTR [edx],dl
300037b1:	00 01                	add    BYTE PTR [ecx],al
300037b3:	00 4e 01             	add    BYTE PTR [esi+0x1],cl
300037b6:	00 00                	add    BYTE PTR [eax],al
300037b8:	61                   	popa   
300037b9:	21 00                	and    DWORD PTR [eax],eax
300037bb:	30 3e                	xor    BYTE PTR [esi],bh
300037bd:	00 00                	add    BYTE PTR [eax],al
300037bf:	00 12                	add    BYTE PTR [edx],dl
300037c1:	00 01                	add    BYTE PTR [ecx],al
300037c3:	00 9a 00 00 00 e7    	add    BYTE PTR [edx-0x19000000],bl
300037c9:	0b 00                	or     eax,DWORD PTR [eax]
300037cb:	30 40 00             	xor    BYTE PTR [eax+0x0],al
300037ce:	00 00                	add    BYTE PTR [eax],al
300037d0:	12 00                	adc    al,BYTE PTR [eax]
300037d2:	01 00                	add    DWORD PTR [eax],eax
300037d4:	1c 00                	sbb    al,0x0
300037d6:	00 00                	add    BYTE PTR [eax],al
300037d8:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
300037dd:	00 00                	add    BYTE PTR [eax],al
300037df:	00 12                	add    BYTE PTR [edx],dl
300037e1:	00 01                	add    BYTE PTR [ecx],al
300037e3:	00 d1                	add    cl,dl
300037e5:	00 00                	add    BYTE PTR [eax],al
300037e7:	00 1e                	add    BYTE PTR [esi],bl
300037e9:	13 00                	adc    eax,DWORD PTR [eax]
300037eb:	30 37                	xor    BYTE PTR [edi],dh
300037ed:	01 00                	add    DWORD PTR [eax],eax
300037ef:	00 12                	add    BYTE PTR [edx],dl
300037f1:	00 01                	add    BYTE PTR [ecx],al
300037f3:	00 07                	add    BYTE PTR [edi],al
300037f5:	01 00                	add    DWORD PTR [eax],eax
300037f7:	00 cc                	add    ah,cl
300037f9:	17                   	pop    ss
300037fa:	00 30                	add    BYTE PTR [eax],dh
300037fc:	31 00                	xor    DWORD PTR [eax],eax
300037fe:	00 00                	add    BYTE PTR [eax],al
30003800:	12 00                	adc    al,BYTE PTR [eax]
30003802:	01 00                	add    DWORD PTR [eax],eax
30003804:	2f                   	das    
30003805:	00 00                	add    BYTE PTR [eax],al
30003807:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
3000380b:	30 2d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,ch
30003811:	00 01                	add    BYTE PTR [ecx],al
30003813:	00 01                	add    BYTE PTR [ecx],al
30003815:	00 00                	add    BYTE PTR [eax],al
30003817:	00 00                	add    BYTE PTR [eax],al
30003819:	00 00                	add    BYTE PTR [eax],al
3000381b:	30 38                	xor    BYTE PTR [eax],bh
3000381d:	00 00                	add    BYTE PTR [eax],al
3000381f:	00 12                	add    BYTE PTR [edx],dl
30003821:	00 01                	add    BYTE PTR [ecx],al
30003823:	00 26                	add    BYTE PTR [esi],ah
30003825:	01 00                	add    DWORD PTR [eax],eax
30003827:	00 00                	add    BYTE PTR [eax],al
30003829:	1b 00                	sbb    eax,DWORD PTR [eax]
3000382b:	30 1d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,bl
30003831:	00 01                	add    BYTE PTR [ecx],al
30003833:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
30003836:	00 00                	add    BYTE PTR [eax],al
30003838:	99                   	cdq    
30003839:	06                   	push   es
3000383a:	00 30                	add    BYTE PTR [eax],dh
3000383c:	2a 00                	sub    al,BYTE PTR [eax]
3000383e:	00 00                	add    BYTE PTR [eax],al
30003840:	12 00                	adc    al,BYTE PTR [eax]
30003842:	01 00                	add    DWORD PTR [eax],eax
30003844:	b9 00 00 00 23       	mov    ecx,0x23000000
30003849:	0f 00                	(bad)  
3000384b:	30 39                	xor    BYTE PTR [ecx],bh
3000384d:	00 00                	add    BYTE PTR [eax],al
3000384f:	00 12                	add    BYTE PTR [edx],dl
30003851:	00 01                	add    BYTE PTR [ecx],al
	...

Disassembly of section .dynstr:

30003854 <.dynstr>:
30003854:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003857:	72 63                	jb     300038bc <__x86.get_pc_thunk.cx+0xe84>
30003859:	68 72 00 73 74       	push   0x74730072
3000385e:	72 63                	jb     300038c3 <__x86.get_pc_thunk.cx+0xe8b>
30003860:	73 70                	jae    300038d2 <__x86.get_pc_thunk.cx+0xe9a>
30003862:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003863:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003866:	72 74                	jb     300038dc <__x86.get_pc_thunk.cx+0xea4>
30003868:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003869:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
3000386c:	74 6f                	je     300038dd <__x86.get_pc_thunk.cx+0xea5>
3000386e:	61                   	popa   
3000386f:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
30003872:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003873:	69 00 67 65 74 65    	imul   eax,DWORD PTR [eax],0x65746567
30003879:	6e                   	outs   dx,BYTE PTR ds:[esi]
3000387a:	76 00                	jbe    3000387c <__x86.get_pc_thunk.cx+0xe44>
3000387c:	73 65                	jae    300038e3 <__x86.get_pc_thunk.cx+0xeab>
3000387e:	74 65                	je     300038e5 <__x86.get_pc_thunk.cx+0xead>
30003880:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003881:	76 00                	jbe    30003883 <__x86.get_pc_thunk.cx+0xe4b>
30003883:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003884:	70 65                	jo     300038eb <__x86.get_pc_thunk.cx+0xeb3>
30003886:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003887:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
3000388a:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000388b:	73 65                	jae    300038f2 <__x86.get_pc_thunk.cx+0xeba>
3000388d:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003890:	61                   	popa   
30003891:	64 00 67 65          	add    BYTE PTR fs:[edi+0x65],ah
30003895:	74 64                	je     300038fb <__x86.get_pc_thunk.cx+0xec3>
30003897:	69 72 00 70 75 74 73 	imul   esi,DWORD PTR [edx+0x0],0x73747570
3000389e:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
300038a1:	73 45                	jae    300038e8 <__x86.get_pc_thunk.cx+0xeb0>
300038a3:	6e                   	outs   dx,BYTE PTR ds:[esi]
300038a4:	74 65                	je     3000390b <__x86.get_pc_thunk.cx+0xed3>
300038a6:	72 5f                	jb     30003907 <__x86.get_pc_thunk.cx+0xecf>
300038a8:	56                   	push   esi
300038a9:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
300038ae:	00 70 75             	add    BYTE PTR [eax+0x75],dh
300038b1:	74 63                	je     30003916 <__x86.get_pc_thunk.cx+0xede>
300038b3:	00 67 65             	add    BYTE PTR [edi+0x65],ah
300038b6:	74 63                	je     3000391b <__x86.get_pc_thunk.cx+0xee3>
300038b8:	00 67 65             	add    BYTE PTR [edi+0x65],ah
300038bb:	74 73                	je     30003930 <__x86.get_pc_thunk.cx+0xef8>
300038bd:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
300038c1:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
300038c4:	6e                   	outs   dx,BYTE PTR ds:[esi]
300038c5:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
300038cc:	74 
300038cd:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
300038d0:	65                   	gs
300038d1:	65                   	gs
300038d2:	70 00                	jo     300038d4 <__x86.get_pc_thunk.cx+0xe9c>
300038d4:	6d                   	ins    DWORD PTR es:[edi],dx
300038d5:	6f                   	outs   dx,DWORD PTR ds:[esi]
300038d6:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
300038dd:	6e 
300038de:	61                   	popa   
300038df:	6c                   	ins    BYTE PTR es:[edi],dx
300038e0:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
300038e3:	65 63 00             	arpl   WORD PTR gs:[eax],ax
300038e6:	77 61                	ja     30003949 <__x86.get_pc_thunk.cx+0xf11>
300038e8:	69 74 70 69 64 00 67 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65670064
300038ef:	65 
300038f0:	74 74                	je     30003966 <__x86.get_pc_thunk.cx+0xf2e>
300038f2:	69 6d 65 00 67 6d 74 	imul   ebp,DWORD PTR [ebp+0x65],0x746d6700
300038f9:	69 6d 65 5f 72 00 67 	imul   ebp,DWORD PTR [ebp+0x65],0x6700725f
30003900:	65                   	gs
30003901:	74 63                	je     30003966 <__x86.get_pc_thunk.cx+0xf2e>
30003903:	77 64                	ja     30003969 <__x86.get_pc_thunk.cx+0xf31>
30003905:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
30003908:	6c                   	ins    BYTE PTR es:[edi],dx
30003909:	6c                   	ins    BYTE PTR es:[edi],dx
3000390a:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000390b:	63 00                	arpl   WORD PTR [eax],ax
3000390d:	66                   	data16
3000390e:	72 65                	jb     30003975 <__x86.get_pc_thunk.cx+0xf3d>
30003910:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
30003914:	6d                   	ins    DWORD PTR es:[edi],dx
30003915:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003918:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
3000391b:	6d                   	ins    DWORD PTR es:[edi],dx
3000391c:	73 65                	jae    30003983 <__x86.get_pc_thunk.cx+0xf4b>
3000391e:	74 00                	je     30003920 <__x86.get_pc_thunk.cx+0xee8>
30003920:	6d                   	ins    DWORD PTR es:[edi],dx
30003921:	6d                   	ins    DWORD PTR es:[edi],dx
30003922:	61                   	popa   
30003923:	70 00                	jo     30003925 <__x86.get_pc_thunk.cx+0xeed>
30003925:	6d                   	ins    DWORD PTR es:[edi],dx
30003926:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003927:	76 65                	jbe    3000398e <__x86.get_pc_thunk.cx+0xf56>
30003929:	54                   	push   esp
3000392a:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000392b:	00 72 65             	add    BYTE PTR [edx+0x65],dh
3000392e:	73 65                	jae    30003995 <__x86.get_pc_thunk.cx+0xf5d>
30003930:	74 52                	je     30003984 <__x86.get_pc_thunk.cx+0xf4c>
30003932:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003933:	77 00                	ja     30003935 <__x86.get_pc_thunk.cx+0xefd>
30003935:	73 74                	jae    300039ab <__x86.get_pc_thunk.cx+0xf73>
30003937:	72 63                	jb     3000399c <__x86.get_pc_thunk.cx+0xf64>
30003939:	61                   	popa   
3000393a:	74 00                	je     3000393c <__x86.get_pc_thunk.cx+0xf04>
3000393c:	73 74                	jae    300039b2 <__x86.get_pc_thunk.cx+0xf7a>
3000393e:	72 63                	jb     300039a3 <__x86.get_pc_thunk.cx+0xf6b>
30003940:	6d                   	ins    DWORD PTR es:[edi],dx
30003941:	70 00                	jo     30003943 <__x86.get_pc_thunk.cx+0xf0b>
30003943:	73 74                	jae    300039b9 <__x86.get_pc_thunk.cx+0xf81>
30003945:	72 63                	jb     300039aa <__x86.get_pc_thunk.cx+0xf72>
30003947:	70 79                	jo     300039c2 <__x86.get_pc_thunk.cx+0xf8a>
30003949:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000394c:	72 63                	jb     300039b1 <__x86.get_pc_thunk.cx+0xf79>
3000394e:	70 79                	jo     300039c9 <__x86.get_pc_thunk.cx+0xf91>
30003950:	63 00                	arpl   WORD PTR [eax],ax
30003952:	73 74                	jae    300039c8 <__x86.get_pc_thunk.cx+0xf90>
30003954:	72 69                	jb     300039bf <__x86.get_pc_thunk.cx+0xf87>
30003956:	73 6e                	jae    300039c6 <__x86.get_pc_thunk.cx+0xf8e>
30003958:	75 6d                	jne    300039c7 <__x86.get_pc_thunk.cx+0xf8f>
3000395a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000395d:	72 6c                	jb     300039cb <__x86.get_pc_thunk.cx+0xf93>
3000395f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
30003961:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003964:	72 6e                	jb     300039d4 <__x86.get_pc_thunk.cx+0xf9c>
30003966:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
30003969:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000396c:	72 6e                	jb     300039dc <__x86.get_pc_thunk.cx+0xfa4>
3000396e:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003971:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003974:	72 74                	jb     300039ea <__x86.get_pc_thunk.cx+0xfb2>
30003976:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003977:	75 6c                	jne    300039e5 <__x86.get_pc_thunk.cx+0xfad>
30003979:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000397c:	72 6c                	jb     300039ea <__x86.get_pc_thunk.cx+0xfb2>
3000397e:	65                   	gs
3000397f:	66                   	data16
30003980:	74 00                	je     30003982 <__x86.get_pc_thunk.cx+0xf4a>
30003982:	73 74                	jae    300039f8 <__x86.get_pc_thunk.cx+0xfc0>
30003984:	72 74                	jb     300039fa <__x86.get_pc_thunk.cx+0xfc2>
30003986:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003987:	6c                   	ins    BYTE PTR es:[edi],dx
30003988:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000398b:	72 74                	jb     30003a01 <__x86.get_pc_thunk.cx+0xfc9>
3000398d:	72 69                	jb     300039f8 <__x86.get_pc_thunk.cx+0xfc0>
3000398f:	6d                   	ins    DWORD PTR es:[edi],dx
30003990:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003993:	72 73                	jb     30003a08 <__x86.get_pc_thunk.cx+0xfd0>
30003995:	74 72                	je     30003a09 <__x86.get_pc_thunk.cx+0xfd1>
30003997:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
3000399b:	61                   	popa   
3000399c:	6c                   	ins    BYTE PTR es:[edi],dx
3000399d:	74 69                	je     30003a08 <__x86.get_pc_thunk.cx+0xfd0>
3000399f:	6d                   	ins    DWORD PTR es:[edi],dx
300039a0:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
300039a5:	61                   	popa   
300039a6:	6c                   	ins    BYTE PTR es:[edi],dx
300039a7:	74 69                	je     30003a12 <__x86.get_pc_thunk.cx+0xfda>
300039a9:	6d                   	ins    DWORD PTR es:[edi],dx
300039aa:	65                   	gs
300039ab:	5f                   	pop    edi
300039ac:	72 00                	jb     300039ae <__x86.get_pc_thunk.cx+0xf76>
300039ae:	6d                   	ins    DWORD PTR es:[edi],dx
300039af:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
	...

Disassembly of section .hash:

300039b8 <.hash>:
300039b8:	25 00 00 00 32       	and    eax,0x32000000
300039bd:	00 00                	add    BYTE PTR [eax],al
300039bf:	00 19                	add    BYTE PTR [ecx],bl
300039c1:	00 00                	add    BYTE PTR [eax],al
300039c3:	00 23                	add    BYTE PTR [ebx],ah
300039c5:	00 00                	add    BYTE PTR [eax],al
300039c7:	00 22                	add    BYTE PTR [edx],ah
300039c9:	00 00                	add    BYTE PTR [eax],al
300039cb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
300039ce:	00 00                	add    BYTE PTR [eax],al
300039d0:	1e                   	push   ds
	...
300039dd:	00 00                	add    BYTE PTR [eax],al
300039df:	00 1b                	add    BYTE PTR [ebx],bl
300039e1:	00 00                	add    BYTE PTR [eax],al
300039e3:	00 00                	add    BYTE PTR [eax],al
300039e5:	00 00                	add    BYTE PTR [eax],al
300039e7:	00 2b                	add    BYTE PTR [ebx],ch
300039e9:	00 00                	add    BYTE PTR [eax],al
300039eb:	00 00                	add    BYTE PTR [eax],al
300039ed:	00 00                	add    BYTE PTR [eax],al
300039ef:	00 15 00 00 00 00    	add    BYTE PTR ds:0x0,dl
300039f5:	00 00                	add    BYTE PTR [eax],al
300039f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300039fa:	00 00                	add    BYTE PTR [eax],al
300039fc:	11 00                	adc    DWORD PTR [eax],eax
300039fe:	00 00                	add    BYTE PTR [eax],al
30003a00:	30 00                	xor    BYTE PTR [eax],al
30003a02:	00 00                	add    BYTE PTR [eax],al
30003a04:	26 00 00             	add    BYTE PTR es:[eax],al
30003a07:	00 25 00 00 00 06    	add    BYTE PTR ds:0x6000000,ah
30003a0d:	00 00                	add    BYTE PTR [eax],al
30003a0f:	00 03                	add    BYTE PTR [ebx],al
30003a11:	00 00                	add    BYTE PTR [eax],al
30003a13:	00 2d 00 00 00 2a    	add    BYTE PTR ds:0x2a000000,ch
30003a19:	00 00                	add    BYTE PTR [eax],al
30003a1b:	00 0b                	add    BYTE PTR [ebx],cl
30003a1d:	00 00                	add    BYTE PTR [eax],al
30003a1f:	00 2f                	add    BYTE PTR [edi],ch
	...
30003a29:	00 00                	add    BYTE PTR [eax],al
30003a2b:	00 0f                	add    BYTE PTR [edi],cl
30003a2d:	00 00                	add    BYTE PTR [eax],al
30003a2f:	00 12                	add    BYTE PTR [edx],dl
30003a31:	00 00                	add    BYTE PTR [eax],al
30003a33:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003a36:	00 00                	add    BYTE PTR [eax],al
30003a38:	17                   	pop    ss
30003a39:	00 00                	add    BYTE PTR [eax],al
30003a3b:	00 31                	add    BYTE PTR [ecx],dh
30003a3d:	00 00                	add    BYTE PTR [eax],al
30003a3f:	00 21                	add    BYTE PTR [ecx],ah
30003a41:	00 00                	add    BYTE PTR [eax],al
30003a43:	00 00                	add    BYTE PTR [eax],al
30003a45:	00 00                	add    BYTE PTR [eax],al
30003a47:	00 2e                	add    BYTE PTR [esi],ch
30003a49:	00 00                	add    BYTE PTR [eax],al
30003a4b:	00 1a                	add    BYTE PTR [edx],bl
	...
30003a65:	00 00                	add    BYTE PTR [eax],al
30003a67:	00 02                	add    BYTE PTR [edx],al
30003a69:	00 00                	add    BYTE PTR [eax],al
30003a6b:	00 00                	add    BYTE PTR [eax],al
30003a6d:	00 00                	add    BYTE PTR [eax],al
30003a6f:	00 05 00 00 00 00    	add    BYTE PTR ds:0x0,al
	...
30003a85:	00 00                	add    BYTE PTR [eax],al
30003a87:	00 07                	add    BYTE PTR [edi],al
	...
30003a91:	00 00                	add    BYTE PTR [eax],al
30003a93:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
	...
30003ab1:	00 00                	add    BYTE PTR [eax],al
30003ab3:	00 01                	add    BYTE PTR [ecx],al
30003ab5:	00 00                	add    BYTE PTR [eax],al
30003ab7:	00 0e                	add    BYTE PTR [esi],cl
30003ab9:	00 00                	add    BYTE PTR [eax],al
30003abb:	00 13                	add    BYTE PTR [ebx],dl
30003abd:	00 00                	add    BYTE PTR [eax],al
30003abf:	00 00                	add    BYTE PTR [eax],al
30003ac1:	00 00                	add    BYTE PTR [eax],al
30003ac3:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
30003ac6:	00 00                	add    BYTE PTR [eax],al
30003ac8:	16                   	push   ss
30003ac9:	00 00                	add    BYTE PTR [eax],al
30003acb:	00 1d 00 00 00 00    	add    BYTE PTR ds:0x0,bl
30003ad1:	00 00                	add    BYTE PTR [eax],al
30003ad3:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
30003ad6:	00 00                	add    BYTE PTR [eax],al
30003ad8:	1f                   	pop    ds
30003ad9:	00 00                	add    BYTE PTR [eax],al
30003adb:	00 09                	add    BYTE PTR [ecx],cl
30003add:	00 00                	add    BYTE PTR [eax],al
30003adf:	00 08                	add    BYTE PTR [eax],cl
30003ae1:	00 00                	add    BYTE PTR [eax],al
30003ae3:	00 00                	add    BYTE PTR [eax],al
30003ae5:	00 00                	add    BYTE PTR [eax],al
30003ae7:	00 0a                	add    BYTE PTR [edx],cl
30003ae9:	00 00                	add    BYTE PTR [eax],al
30003aeb:	00 10                	add    BYTE PTR [eax],dl
30003aed:	00 00                	add    BYTE PTR [eax],al
30003aef:	00 00                	add    BYTE PTR [eax],al
30003af1:	00 00                	add    BYTE PTR [eax],al
30003af3:	00 18                	add    BYTE PTR [eax],bl
30003af5:	00 00                	add    BYTE PTR [eax],al
30003af7:	00 00                	add    BYTE PTR [eax],al
30003af9:	00 00                	add    BYTE PTR [eax],al
30003afb:	00 20                	add    BYTE PTR [eax],ah
	...
30003b05:	00 00                	add    BYTE PTR [eax],al
30003b07:	00 28                	add    BYTE PTR [eax],ch
30003b09:	00 00                	add    BYTE PTR [eax],al
30003b0b:	00 29                	add    BYTE PTR [ecx],ch
30003b0d:	00 00                	add    BYTE PTR [eax],al
30003b0f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
30003b12:	00 00                	add    BYTE PTR [eax],al
30003b14:	00 00                	add    BYTE PTR [eax],al
30003b16:	00 00                	add    BYTE PTR [eax],al
30003b18:	27                   	daa    
30003b19:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

30003b1c <.eh_frame>:
30003b1c:	14 00                	adc    al,0x0
30003b1e:	00 00                	add    BYTE PTR [eax],al
30003b20:	00 00                	add    BYTE PTR [eax],al
30003b22:	00 00                	add    BYTE PTR [eax],al
30003b24:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30003b27:	00 01                	add    BYTE PTR [ecx],al
30003b29:	7c 08                	jl     30003b33 <__x86.get_pc_thunk.cx+0x10fb>
30003b2b:	01 1b                	add    DWORD PTR [ebx],ebx
30003b2d:	0c 04                	or     al,0x4
30003b2f:	04 88                	add    al,0x88
30003b31:	01 00                	add    DWORD PTR [eax],eax
30003b33:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003b36:	00 00                	add    BYTE PTR [eax],al
30003b38:	1c 00                	sbb    al,0x0
30003b3a:	00 00                	add    BYTE PTR [eax],al
30003b3c:	c4                   	(bad)  
30003b3d:	ee                   	out    dx,al
30003b3e:	ff                   	(bad)  
30003b3f:	ff 30                	push   DWORD PTR [eax]
30003b41:	00 00                	add    BYTE PTR [eax],al
30003b43:	00 00                	add    BYTE PTR [eax],al
30003b45:	0e                   	push   cs
30003b46:	08 46 0e             	or     BYTE PTR [esi+0xe],al
30003b49:	0c 4a                	or     al,0x4a
30003b4b:	0f 0b                	ud2    
30003b4d:	74 04                	je     30003b53 <__x86.get_pc_thunk.cx+0x111b>
30003b4f:	78 00                	js     30003b51 <__x86.get_pc_thunk.cx+0x1119>
30003b51:	3f                   	aas    
30003b52:	1a 3b                	sbb    bh,BYTE PTR [ebx]
30003b54:	2a 32                	sub    dh,BYTE PTR [edx]
30003b56:	24 22                	and    al,0x22
30003b58:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

30003b5c <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
30003b5c:	01 1b                	add    DWORD PTR [ebx],ebx
30003b5e:	03 3b                	add    edi,DWORD PTR [ebx]
30003b60:	dc ee                	fsub   st(6),st
30003b62:	ff                   	(bad)  
30003b63:	ff 51 00             	call   DWORD PTR [ecx+0x0]
30003b66:	00 00                	add    BYTE PTR [eax],al
30003b68:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
30003b69:	c4                   	(bad)  
30003b6a:	ff                   	(bad)  
30003b6b:	ff                   	(bad)  
30003b6c:	f8                   	clc    
30003b6d:	ee                   	out    dx,al
30003b6e:	ff                   	(bad)  
30003b6f:	ff dc                	call   <internal disassembler error>
30003b71:	c4                   	(bad)  
30003b72:	ff                   	(bad)  
30003b73:	ff 18                	call   FWORD PTR [eax]
30003b75:	ef                   	out    dx,eax
30003b76:	ff                   	(bad)  
30003b77:	ff 14 c5 ff ff 4c ef 	call   DWORD PTR [eax*8-0x10b30001]
30003b7e:	ff                   	(bad)  
30003b7f:	ff 69 c5             	jmp    FWORD PTR [ecx-0x3b]
30003b82:	ff                   	(bad)  
30003b83:	ff 74 ef ff          	push   DWORD PTR [edi+ebp*8-0x1]
30003b87:	ff c0                	inc    eax
30003b89:	c5 ff ff             	(bad)  
30003b8c:	9c                   	pushf  
30003b8d:	ef                   	out    dx,eax
30003b8e:	ff                   	(bad)  
30003b8f:	ff 58 c6             	call   FWORD PTR [eax-0x3a]
30003b92:	ff                   	(bad)  
30003b93:	ff d8                	call   <internal disassembler error>
30003b95:	ef                   	out    dx,eax
30003b96:	ff                   	(bad)  
30003b97:	ff cf                	dec    edi
30003b99:	c6                   	(bad)  
30003b9a:	ff                   	(bad)  
30003b9b:	ff                   	(bad)  
30003b9c:	fc                   	cld    
30003b9d:	ef                   	out    dx,eax
30003b9e:	ff                   	(bad)  
30003b9f:	ff 8a c7 ff ff 20    	dec    DWORD PTR [edx+0x20ffffc7]
30003ba5:	f0 ff                	lock (bad) 
30003ba7:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
30003baa:	ff                   	(bad)  
30003bab:	ff 44 f0 ff          	inc    DWORD PTR [eax+esi*8-0x1]
30003baf:	ff a4 c8 ff ff 64 f0 	jmp    DWORD PTR [eax+ecx*8-0xf9b0001]
30003bb6:	ff                   	(bad)  
30003bb7:	ff 4e c9             	dec    DWORD PTR [esi-0x37]
30003bba:	ff                   	(bad)  
30003bbb:	ff 88 f0 ff ff 10    	dec    DWORD PTR [eax+0x10fffff0]
30003bc1:	cb                   	retf   
30003bc2:	ff                   	(bad)  
30003bc3:	ff ac f0 ff ff 3d cb 	jmp    FWORD PTR [eax+esi*8-0x34c20001]
30003bca:	ff                   	(bad)  
30003bcb:	ff d0                	call   eax
30003bcd:	f0 ff                	lock (bad) 
30003bcf:	ff 67 cb             	jmp    DWORD PTR [edi-0x35]
30003bd2:	ff                   	(bad)  
30003bd3:	ff f4                	push   esp
30003bd5:	f0 ff                	lock (bad) 
30003bd7:	ff 9c cb ff ff 1c f1 	call   FWORD PTR [ebx+ecx*8-0xee30001]
30003bde:	ff                   	(bad)  
30003bdf:	ff d0                	call   eax
30003be1:	cb                   	retf   
30003be2:	ff                   	(bad)  
30003be3:	ff 40 f1             	inc    DWORD PTR [eax-0xf]
30003be6:	ff                   	(bad)  
30003be7:	ff f6                	push   esi
30003be9:	cb                   	retf   
30003bea:	ff                   	(bad)  
30003beb:	ff 64 f1 ff          	jmp    DWORD PTR [ecx+esi*8-0x1]
30003bef:	ff                   	(bad)  
30003bf0:	39 cc                	cmp    esp,ecx
30003bf2:	ff                   	(bad)  
30003bf3:	ff 88 f1 ff ff 68    	dec    DWORD PTR [eax+0x68fffff1]
30003bf9:	cc                   	int3   
30003bfa:	ff                   	(bad)  
30003bfb:	ff ac f1 ff ff 24 cd 	jmp    FWORD PTR [ecx+esi*8-0x32db0001]
30003c02:	ff                   	(bad)  
30003c03:	ff d0                	call   eax
30003c05:	f1                   	icebp  
30003c06:	ff                   	(bad)  
30003c07:	ff 5e cd             	call   FWORD PTR [esi-0x33]
30003c0a:	ff                   	(bad)  
30003c0b:	ff                   	(bad)  
30003c0c:	f8                   	clc    
30003c0d:	f1                   	icebp  
30003c0e:	ff                   	(bad)  
30003c0f:	ff 93 cd ff ff 1c    	call   DWORD PTR [ebx+0x1cffffcd]
30003c15:	f2 ff                	repnz (bad) 
30003c17:	ff c7                	inc    edi
30003c19:	cd ff                	int    0xff
30003c1b:	ff 40 f2             	inc    DWORD PTR [eax-0xe]
30003c1e:	ff                   	(bad)  
30003c1f:	ff                   	(bad)  
30003c20:	f8                   	clc    
30003c21:	cd ff                	int    0xff
30003c23:	ff 64 f2 ff          	jmp    DWORD PTR [edx+esi*8-0x1]
30003c27:	ff 1f                	call   FWORD PTR [edi]
30003c29:	ce                   	into   
30003c2a:	ff                   	(bad)  
30003c2b:	ff 84 f2 ff ff d0 ce 	inc    DWORD PTR [edx+esi*8-0x312f0001]
30003c32:	ff                   	(bad)  
30003c33:	ff a8 f2 ff ff ef    	jmp    FWORD PTR [eax-0x1000000e]
30003c39:	ce                   	into   
30003c3a:	ff                   	(bad)  
30003c3b:	ff cc                	dec    esp
30003c3d:	f2 ff                	repnz (bad) 
30003c3f:	ff 23                	jmp    DWORD PTR [ebx]
30003c41:	cf                   	iret   
30003c42:	ff                   	(bad)  
30003c43:	ff ec                	jmp    <internal disassembler error>
30003c45:	f2 ff                	repnz (bad) 
30003c47:	ff 57 cf             	call   DWORD PTR [edi-0x31]
30003c4a:	ff                   	(bad)  
30003c4b:	ff 0c f3             	dec    DWORD PTR [ebx+esi*8]
30003c4e:	ff                   	(bad)  
30003c4f:	ff 8e cf ff ff 2c    	dec    DWORD PTR [esi+0x2cffffcf]
30003c55:	f3 ff                	repz (bad) 
30003c57:	ff dd                	call   <internal disassembler error>
30003c59:	cf                   	iret   
30003c5a:	ff                   	(bad)  
30003c5b:	ff 50 f3             	call   DWORD PTR [eax-0xd]
30003c5e:	ff                   	(bad)  
30003c5f:	ff                   	(bad)  
30003c60:	fa                   	cli    
30003c61:	cf                   	iret   
30003c62:	ff                   	(bad)  
30003c63:	ff 70 f3             	push   DWORD PTR [eax-0xd]
30003c66:	ff                   	(bad)  
30003c67:	ff 23                	jmp    DWORD PTR [ebx]
30003c69:	d0 ff                	sar    bh,1
30003c6b:	ff 90 f3 ff ff 6f    	call   DWORD PTR [eax+0x6ffffff3]
30003c71:	d0 ff                	sar    bh,1
30003c73:	ff b4 f3 ff ff 8b d0 	push   DWORD PTR [ebx+esi*8-0x2f740001]
30003c7a:	ff                   	(bad)  
30003c7b:	ff d4                	call   esp
30003c7d:	f3 ff                	repz (bad) 
30003c7f:	ff cb                	dec    ebx
30003c81:	d0 ff                	sar    bh,1
30003c83:	ff                   	(bad)  
30003c84:	f8                   	clc    
30003c85:	f3 ff                	repz (bad) 
30003c87:	ff ec                	jmp    <internal disassembler error>
30003c89:	d0 ff                	sar    bh,1
30003c8b:	ff 2c f4             	jmp    FWORD PTR [esp+esi*8]
30003c8e:	ff                   	(bad)  
30003c8f:	ff 4c d1 ff          	dec    DWORD PTR [ecx+edx*8-0x1]
30003c93:	ff 50 f4             	call   DWORD PTR [eax-0xc]
30003c96:	ff                   	(bad)  
30003c97:	ff d3                	call   ebx
30003c99:	d1 ff                	sar    edi,1
30003c9b:	ff 70 f4             	push   DWORD PTR [eax-0xc]
30003c9e:	ff                   	(bad)  
30003c9f:	ff a7 d3 ff ff 94    	jmp    DWORD PTR [edi-0x6b00002d]
30003ca5:	f4                   	hlt    
30003ca6:	ff                   	(bad)  
30003ca7:	ff c7                	inc    edi
30003ca9:	d3 ff                	sar    edi,cl
30003cab:	ff b4 f4 ff ff 00 d4 	push   DWORD PTR [esp+esi*8-0x2bff0001]
30003cb2:	ff                   	(bad)  
30003cb3:	ff d4                	call   esp
30003cb5:	f4                   	hlt    
30003cb6:	ff                   	(bad)  
30003cb7:	ff 34 d4             	push   DWORD PTR [esp+edx*8]
30003cba:	ff                   	(bad)  
30003cbb:	ff                   	(bad)  
30003cbc:	f8                   	clc    
30003cbd:	f4                   	hlt    
30003cbe:	ff                   	(bad)  
30003cbf:	ff d0                	call   eax
30003cc1:	d5 ff                	aad    0xff
30003cc3:	ff 18                	call   FWORD PTR [eax]
30003cc5:	f5                   	cmc    
30003cc6:	ff                   	(bad)  
30003cc7:	ff 97 d6 ff ff 38    	call   DWORD PTR [edi+0x38ffffd6]
30003ccd:	f5                   	cmc    
30003cce:	ff                   	(bad)  
30003ccf:	ff 60 d7             	jmp    DWORD PTR [eax-0x29]
30003cd2:	ff                   	(bad)  
30003cd3:	ff 58 f5             	call   FWORD PTR [eax-0xb]
30003cd6:	ff                   	(bad)  
30003cd7:	ff 70 d7             	push   DWORD PTR [eax-0x29]
30003cda:	ff                   	(bad)  
30003cdb:	ff                   	(bad)  
30003cdc:	78 f5                	js     30003cd3 <__GNU_EH_FRAME_HDR+0x177>
30003cde:	ff                   	(bad)  
30003cdf:	ff 9c d7 ff ff 9c f5 	call   FWORD PTR [edi+edx*8-0xa630001]
30003ce6:	ff                   	(bad)  
30003ce7:	ff c2                	inc    edx
30003ce9:	d7                   	xlat   BYTE PTR ds:[ebx]
30003cea:	ff                   	(bad)  
30003ceb:	ff c0                	inc    eax
30003ced:	f5                   	cmc    
30003cee:	ff                   	(bad)  
30003cef:	ff                   	(bad)  
30003cf0:	f9                   	stc    
30003cf1:	d8 ff                	fdivr  st,st(7)
30003cf3:	ff e4                	jmp    esp
30003cf5:	f5                   	cmc    
30003cf6:	ff                   	(bad)  
30003cf7:	ff                   	(bad)  
30003cf8:	7d d9                	jge    30003cd3 <__GNU_EH_FRAME_HDR+0x177>
30003cfa:	ff                   	(bad)  
30003cfb:	ff 08                	dec    DWORD PTR [eax]
30003cfd:	f6 ff                	idiv   bh
30003cff:	ff d0                	call   eax
30003d01:	d9 ff                	fcos   
30003d03:	ff 28                	jmp    FWORD PTR [eax]
30003d05:	f6 ff                	idiv   bh
30003d07:	ff 0e                	dec    DWORD PTR [esi]
30003d09:	da ff                	(bad)  
30003d0b:	ff 4c f6 ff          	dec    DWORD PTR [esi+esi*8-0x1]
30003d0f:	ff 4c da ff          	dec    DWORD PTR [edx+ebx*8-0x1]
30003d13:	ff 70 f6             	push   DWORD PTR [eax-0xa]
30003d16:	ff                   	(bad)  
30003d17:	ff                   	(bad)  
30003d18:	bc da ff ff 90       	mov    esp,0x90ffffda
30003d1d:	f6 ff                	idiv   bh
30003d1f:	ff 1c db             	call   FWORD PTR [ebx+ebx*8]
30003d22:	ff                   	(bad)  
30003d23:	ff                   	(bad)  
30003d24:	b8 f6 ff ff 5c       	mov    eax,0x5cfffff6
30003d29:	db ff                	(bad)  
30003d2b:	ff d8                	call   <internal disassembler error>
30003d2d:	f6 ff                	idiv   bh
30003d2f:	ff 9c db ff ff f8 f6 	call   FWORD PTR [ebx+ebx*8-0x9070001]
30003d36:	ff                   	(bad)  
30003d37:	ff e4                	jmp    esp
30003d39:	db ff                	(bad)  
30003d3b:	ff 18                	call   FWORD PTR [eax]
30003d3d:	f7 ff                	idiv   edi
30003d3f:	ff 14 dc             	call   DWORD PTR [esp+ebx*8]
30003d42:	ff                   	(bad)  
30003d43:	ff                   	(bad)  
30003d44:	38 f7                	cmp    bh,dh
30003d46:	ff                   	(bad)  
30003d47:	ff 70 dc             	push   DWORD PTR [eax-0x24]
30003d4a:	ff                   	(bad)  
30003d4b:	ff 58 f7             	call   FWORD PTR [eax-0x9]
30003d4e:	ff                   	(bad)  
30003d4f:	ff a1 dc ff ff 78    	jmp    DWORD PTR [ecx+0x78ffffdc]
30003d55:	f7 ff                	idiv   edi
30003d57:	ff d4                	call   esp
30003d59:	dc ff                	fdiv   st(7),st
30003d5b:	ff 98 f7 ff ff 3b    	call   FWORD PTR [eax+0x3bfffff7]
30003d61:	dd ff                	(bad)  
30003d63:	ff                   	(bad)  
30003d64:	b8 f7 ff ff a4       	mov    eax,0xa4fffff7
30003d69:	dd ff                	(bad)  
30003d6b:	ff d8                	call   <internal disassembler error>
30003d6d:	f7 ff                	idiv   edi
30003d6f:	ff 04 de             	inc    DWORD PTR [esi+ebx*8]
30003d72:	ff                   	(bad)  
30003d73:	ff                   	(bad)  
30003d74:	f8                   	clc    
30003d75:	f7 ff                	idiv   edi
30003d77:	ff 24 de             	jmp    DWORD PTR [esi+ebx*8]
30003d7a:	ff                   	(bad)  
30003d7b:	ff 18                	call   FWORD PTR [eax]
30003d7d:	f8                   	clc    
30003d7e:	ff                   	(bad)  
30003d7f:	ff a4 df ff ff 48 f8 	jmp    DWORD PTR [edi+ebx*8-0x7b70001]
30003d86:	ff                   	(bad)  
30003d87:	ff c4                	inc    esp
30003d89:	df ff                	(bad)  
30003d8b:	ff 68 f8             	jmp    FWORD PTR [eax-0x8]
30003d8e:	ff                   	(bad)  
30003d8f:	ff 60 e1             	jmp    DWORD PTR [eax-0x1f]
30003d92:	ff                   	(bad)  
30003d93:	ff 98 f8 ff ff f8    	call   FWORD PTR [eax-0x7000008]
30003d99:	e1 ff                	loope  30003d9a <__GNU_EH_FRAME_HDR+0x23e>
30003d9b:	ff                   	(bad)  
30003d9c:	bc f8 ff ff 66       	mov    esp,0x66fffff8
30003da1:	e2 ff                	loop   30003da2 <__GNU_EH_FRAME_HDR+0x246>
30003da3:	ff e4                	jmp    esp
30003da5:	f8                   	clc    
30003da6:	ff                   	(bad)  
30003da7:	ff 84 e2 ff ff 04 f9 	inc    DWORD PTR [edx+eiz*8-0x6fb0001]
30003dae:	ff                   	(bad)  
30003daf:	ff ad e2 ff ff 24    	jmp    FWORD PTR [ebp+0x24ffffe2]
30003db5:	f9                   	stc    
30003db6:	ff                   	(bad)  
30003db7:	ff c6                	inc    esi
30003db9:	e5 ff                	in     eax,0xff
30003dbb:	ff 4c f9 ff          	dec    DWORD PTR [ecx+edi*8-0x1]
30003dbf:	ff 05 e6 ff ff 70    	inc    DWORD PTR ds:0x70ffffe6
30003dc5:	f9                   	stc    
30003dc6:	ff                   	(bad)  
30003dc7:	ff 43 e6             	inc    DWORD PTR [ebx-0x1a]
30003dca:	ff                   	(bad)  
30003dcb:	ff 94 f9 ff ff 9a ee 	call   DWORD PTR [ecx+edi*8-0x11650001]
30003dd2:	ff                   	(bad)  
30003dd3:	ff                   	(bad)  
30003dd4:	38 ef                	cmp    bh,ch
30003dd6:	ff                   	(bad)  
30003dd7:	ff d4                	call   esp
30003dd9:	ee                   	out    dx,al
30003dda:	ff                   	(bad)  
30003ddb:	ff c4                	inc    esp
30003ddd:	ef                   	out    dx,eax
30003dde:	ff                   	(bad)  
30003ddf:	ff d8                	call   <internal disassembler error>
30003de1:	ee                   	out    dx,al
30003de2:	ff                   	(bad)  
30003de3:	ff 18                	call   FWORD PTR [eax]
30003de5:	f4                   	hlt    
30003de6:	ff                   	(bad)  
30003de7:	ff dc                	call   <internal disassembler error>
30003de9:	ee                   	out    dx,al
30003dea:	ff                   	(bad)  
30003deb:	ff c4                	inc    esp
30003ded:	f9                   	stc    
30003dee:	ff                   	(bad)  
30003def:	ff                   	.byte 0xff

Disassembly of section .rodata:

30003e00 <_ytab-0x220>:
30003e00:	3d 00 53 74 72       	cmp    eax,0x72745300
30003e05:	65                   	gs
30003e06:	61                   	popa   
30003e07:	6d                   	ins    DWORD PTR es:[edi],dx
30003e08:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
30003e0e:	74 20                	je     30003e30 <__GNU_EH_FRAME_HDR+0x2d4>
30003e10:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
30003e17:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003e18:	74 65                	je     30003e7f <__GNU_EH_FRAME_HDR+0x323>
30003e1a:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30003e1d:	00 00                	add    BYTE PTR [eax],al
30003e1f:	00 2a                	add    BYTE PTR [edx],ch
30003e21:	2a 2a                	sub    ch,BYTE PTR [edx]
30003e23:	6c                   	ins    BYTE PTR es:[edi],dx
30003e24:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30003e2b:	74 20                	je     30003e4d <__GNU_EH_FRAME_HDR+0x2f1>
30003e2d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30003e30:	6c                   	ins    BYTE PTR es:[edi],dx
30003e31:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
30003e35:	2a 2a                	sub    ch,BYTE PTR [edx]
30003e37:	00 2a                	add    BYTE PTR [edx],ch
30003e39:	2a 2a                	sub    ch,BYTE PTR [edx]
30003e3b:	6c                   	ins    BYTE PTR es:[edi],dx
30003e3c:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30003e43:	74 20                	je     30003e65 <__GNU_EH_FRAME_HDR+0x309>
30003e45:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
30003e48:	70 6c                	jo     30003eb6 <__GNU_EH_FRAME_HDR+0x35a>
30003e4a:	65                   	gs
30003e4b:	74 65                	je     30003eb2 <__GNU_EH_FRAME_HDR+0x356>
30003e4d:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30003e50:	6c                   	ins    BYTE PTR es:[edi],dx
30003e51:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30003e58:	74 20                	je     30003e7a <__GNU_EH_FRAME_HDR+0x31e>
30003e5a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30003e5d:	6c                   	ins    BYTE PTR es:[edi],dx
30003e5e:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
30003e63:	65                   	gs
30003e64:	76 69                	jbe    30003ecf <__GNU_EH_FRAME_HDR+0x373>
30003e66:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003e67:	75 73                	jne    30003edc <__GNU_EH_FRAME_HDR+0x380>
30003e69:	6c                   	ins    BYTE PTR es:[edi],dx
30003e6a:	79 2c                	jns    30003e98 <__GNU_EH_FRAME_HDR+0x33c>
30003e6c:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
30003e6f:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
30003e76:	6c 
30003e77:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
30003e7e:	65 63 20             	arpl   WORD PTR gs:[eax],sp
30003e81:	66 6f                	outs   dx,WORD PTR ds:[esi]
30003e83:	72 20                	jb     30003ea5 <__GNU_EH_FRAME_HDR+0x349>
30003e85:	25 73 0a 00 00       	and    eax,0xa73
30003e8a:	00 00                	add    BYTE PTR [eax],al
30003e8c:	68 65 61 70 42       	push   0x42706165
30003e91:	61                   	popa   
30003e92:	73 65                	jae    30003ef9 <__GNU_EH_FRAME_HDR+0x39d>
30003e94:	20 40 20             	and    BYTE PTR [eax+0x20],al
30003e97:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
30003e9a:	30 38                	xor    BYTE PTR [eax],bh
30003e9c:	58                   	pop    eax
30003e9d:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
30003ea3:	30 38                	xor    BYTE PTR [eax],bh
30003ea5:	58                   	pop    eax
30003ea6:	20 62 65             	and    BYTE PTR [edx+0x65],ah
30003ea9:	66 6f                	outs   dx,WORD PTR ds:[esi]
30003eab:	72 65                	jb     30003f12 <__GNU_EH_FRAME_HDR+0x3b6>
30003ead:	0a 00                	or     al,BYTE PTR [eax]
30003eaf:	6d                   	ins    DWORD PTR es:[edi],dx
30003eb0:	61                   	popa   
30003eb1:	6c                   	ins    BYTE PTR es:[edi],dx
30003eb2:	6c                   	ins    BYTE PTR es:[edi],dx
30003eb3:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003eb4:	63 28                	arpl   WORD PTR [eax],bp
30003eb6:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30003eb9:	30 38                	xor    BYTE PTR [eax],bh
30003ebb:	58                   	pop    eax
30003ebc:	29 0a                	sub    DWORD PTR [edx],ecx
30003ebe:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003ec2:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
30003ec5:	61                   	popa   
30003ec6:	6c                   	ins    BYTE PTR es:[edi],dx
30003ec7:	6c                   	ins    BYTE PTR es:[edi],dx
30003ec8:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003ec9:	63 3a                	arpl   WORD PTR [edx],di
30003ecb:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
30003ece:	65                   	gs
30003ecf:	64                   	fs
30003ed0:	65                   	gs
30003ed1:	64                   	fs
30003ed2:	3d 30 78 25 30       	cmp    eax,0x30257830
30003ed7:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30003eda:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003ede:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
30003ee1:	61                   	popa   
30003ee2:	6c                   	ins    BYTE PTR es:[edi],dx
30003ee3:	6c                   	ins    BYTE PTR es:[edi],dx
30003ee4:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003ee5:	63 3a                	arpl   WORD PTR [edx],di
30003ee7:	20 68 65             	and    BYTE PTR [eax+0x65],ch
30003eea:	61                   	popa   
30003eeb:	45                   	inc    ebp
30003eec:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003eed:	64                   	fs
30003eee:	3d 30 78 25 30       	cmp    eax,0x30257830
30003ef3:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30003ef6:	00 00                	add    BYTE PTR [eax],al
30003ef8:	6c                   	ins    BYTE PTR es:[edi],dx
30003ef9:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30003f00:	6c                   	ins    BYTE PTR es:[edi],dx
30003f01:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003f02:	63 3a                	arpl   WORD PTR [edx],di
30003f04:	20 52 65             	and    BYTE PTR [edx+0x65],dl
30003f07:	71 20                	jno    30003f29 <__GNU_EH_FRAME_HDR+0x3cd>
30003f09:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30003f0c:	30 38                	xor    BYTE PTR [eax],bh
30003f0e:	58                   	pop    eax
30003f0f:	20 62 79             	and    BYTE PTR [edx+0x79],ah
30003f12:	74 65                	je     30003f79 <__GNU_EH_FRAME_HDR+0x41d>
30003f14:	73 2c                	jae    30003f42 <__GNU_EH_FRAME_HDR+0x3e6>
30003f16:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30003f19:	74 20                	je     30003f3b <__GNU_EH_FRAME_HDR+0x3df>
30003f1b:	77 61                	ja     30003f7e <__GNU_EH_FRAME_HDR+0x422>
30003f1d:	73 20                	jae    30003f3f <__GNU_EH_FRAME_HDR+0x3e3>
30003f1f:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30003f22:	30 38                	xor    BYTE PTR [eax],bh
30003f24:	58                   	pop    eax
30003f25:	2c 20                	sub    al,0x20
30003f27:	68 65 61 70 45       	push   0x45706165
30003f2c:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003f2d:	64                   	fs
30003f2e:	3d 30 78 25 30       	cmp    eax,0x30257830
30003f33:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30003f36:	00 00                	add    BYTE PTR [eax],al
30003f38:	6c                   	ins    BYTE PTR es:[edi],dx
30003f39:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30003f40:	6c                   	ins    BYTE PTR es:[edi],dx
30003f41:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003f42:	63 3a                	arpl   WORD PTR [edx],di
30003f44:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
30003f47:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
30003f4e:	65 
30003f4f:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
30003f53:	61                   	popa   
30003f54:	70 43                	jo     30003f99 <__GNU_EH_FRAME_HDR+0x43d>
30003f56:	75 72                	jne    30003fca <__GNU_EH_FRAME_HDR+0x46e>
30003f58:	72 20                	jb     30003f7a <__GNU_EH_FRAME_HDR+0x41e>
30003f5a:	61                   	popa   
30003f5b:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003f5c:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
30003f60:	61                   	popa   
30003f61:	70 42                	jo     30003fa5 <__GNU_EH_FRAME_HDR+0x449>
30003f63:	61                   	popa   
30003f64:	73 65                	jae    30003fcb <__GNU_EH_FRAME_HDR+0x46f>
30003f66:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
30003f6a:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30003f6d:	30 38                	xor    BYTE PTR [eax],bh
30003f6f:	58                   	pop    eax
30003f70:	0a 00                	or     al,BYTE PTR [eax]
30003f72:	00 00                	add    BYTE PTR [eax],al
30003f74:	6c                   	ins    BYTE PTR es:[edi],dx
30003f75:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30003f7c:	6c                   	ins    BYTE PTR es:[edi],dx
30003f7d:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003f7e:	63 3a                	arpl   WORD PTR [edx],di
30003f80:	63 72 65             	arpl   WORD PTR [edx+0x65],si
30003f83:	61                   	popa   
30003f84:	74 69                	je     30003fef <__GNU_EH_FRAME_HDR+0x493>
30003f86:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003f87:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
30003f8b:	61                   	popa   
30003f8c:	70 20                	jo     30003fae <__GNU_EH_FRAME_HDR+0x452>
30003f8e:	72 65                	jb     30003ff5 <__GNU_EH_FRAME_HDR+0x499>
30003f90:	63 20                	arpl   WORD PTR [eax],sp
30003f92:	40                   	inc    eax
30003f93:	20 30                	and    BYTE PTR [eax],dh
30003f95:	78 25                	js     30003fbc <__GNU_EH_FRAME_HDR+0x460>
30003f97:	30 38                	xor    BYTE PTR [eax],bh
30003f99:	58                   	pop    eax
30003f9a:	0a 00                	or     al,BYTE PTR [eax]
30003f9c:	6c                   	ins    BYTE PTR es:[edi],dx
30003f9d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30003fa4:	6c                   	ins    BYTE PTR es:[edi],dx
30003fa5:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003fa6:	63 3a                	arpl   WORD PTR [edx],di
30003fa8:	20 68 65             	and    BYTE PTR [eax+0x65],ch
30003fab:	61                   	popa   
30003fac:	70 43                	jo     30003ff1 <__GNU_EH_FRAME_HDR+0x495>
30003fae:	75 72                	jne    30004022 <_ytab+0x2>
30003fb0:	72 3d                	jb     30003fef <__GNU_EH_FRAME_HDR+0x493>
30003fb2:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30003fb5:	30 38                	xor    BYTE PTR [eax],bh
30003fb7:	58                   	pop    eax
30003fb8:	2c 20                	sub    al,0x20
30003fba:	73 69                	jae    30004025 <_ytab+0x5>
30003fbc:	7a 65                	jp     30004023 <_ytab+0x3>
30003fbe:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003fbf:	66                   	data16
30003fc0:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
30003fc3:	61                   	popa   
30003fc4:	70 72                	jo     30004038 <_ytab+0x18>
30003fc6:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
30003fca:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
30003fd0:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30003fd3:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
30003fd6:	6c                   	ins    BYTE PTR es:[edi],dx
30003fd7:	6c                   	ins    BYTE PTR es:[edi],dx
30003fd8:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003fd9:	63 3a                	arpl   WORD PTR [edx],di
30003fdb:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30003fde:	74 75                	je     30004055 <_ytab+0x35>
30003fe0:	72 6e                	jb     30004050 <_ytab+0x30>
30003fe2:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
30003fe9:	30 38                	xor    BYTE PTR [eax],bh
30003feb:	58                   	pop    eax
30003fec:	0a 00                	or     al,BYTE PTR [eax]
	...
30003ffe:	00 00                	add    BYTE PTR [eax],al
30004000:	47                   	inc    edi
30004001:	4d                   	dec    ebp
30004002:	54                   	push   esp
	...

30004020 <_ytab>:
30004020:	1f                   	pop    ds
30004021:	00 00                	add    BYTE PTR [eax],al
30004023:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30004026:	00 00                	add    BYTE PTR [eax],al
30004028:	1f                   	pop    ds
30004029:	00 00                	add    BYTE PTR [eax],al
3000402b:	00 1e                	add    BYTE PTR [esi],bl
3000402d:	00 00                	add    BYTE PTR [eax],al
3000402f:	00 1f                	add    BYTE PTR [edi],bl
30004031:	00 00                	add    BYTE PTR [eax],al
30004033:	00 1e                	add    BYTE PTR [esi],bl
30004035:	00 00                	add    BYTE PTR [eax],al
30004037:	00 1f                	add    BYTE PTR [edi],bl
30004039:	00 00                	add    BYTE PTR [eax],al
3000403b:	00 1f                	add    BYTE PTR [edi],bl
3000403d:	00 00                	add    BYTE PTR [eax],al
3000403f:	00 1e                	add    BYTE PTR [esi],bl
30004041:	00 00                	add    BYTE PTR [eax],al
30004043:	00 1f                	add    BYTE PTR [edi],bl
30004045:	00 00                	add    BYTE PTR [eax],al
30004047:	00 1e                	add    BYTE PTR [esi],bl
30004049:	00 00                	add    BYTE PTR [eax],al
3000404b:	00 1f                	add    BYTE PTR [edi],bl
3000404d:	00 00                	add    BYTE PTR [eax],al
3000404f:	00 1f                	add    BYTE PTR [edi],bl
30004051:	00 00                	add    BYTE PTR [eax],al
30004053:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
30004059:	00 00                	add    BYTE PTR [eax],al
3000405b:	00 1e                	add    BYTE PTR [esi],bl
3000405d:	00 00                	add    BYTE PTR [eax],al
3000405f:	00 1f                	add    BYTE PTR [edi],bl
30004061:	00 00                	add    BYTE PTR [eax],al
30004063:	00 1e                	add    BYTE PTR [esi],bl
30004065:	00 00                	add    BYTE PTR [eax],al
30004067:	00 1f                	add    BYTE PTR [edi],bl
30004069:	00 00                	add    BYTE PTR [eax],al
3000406b:	00 1f                	add    BYTE PTR [edi],bl
3000406d:	00 00                	add    BYTE PTR [eax],al
3000406f:	00 1e                	add    BYTE PTR [esi],bl
30004071:	00 00                	add    BYTE PTR [eax],al
30004073:	00 1f                	add    BYTE PTR [edi],bl
30004075:	00 00                	add    BYTE PTR [eax],al
30004077:	00 1e                	add    BYTE PTR [esi],bl
30004079:	00 00                	add    BYTE PTR [eax],al
3000407b:	00 1f                	add    BYTE PTR [edi],bl
3000407d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

30004080 <.rel.dyn>:
30004080:	c4 42 00             	les    eax,FWORD PTR [edx+0x0]
30004083:	30 08                	xor    BYTE PTR [eax],cl
30004085:	00 00                	add    BYTE PTR [eax],al
30004087:	00 c8                	add    al,cl
30004089:	42                   	inc    edx
3000408a:	00 30                	add    BYTE PTR [eax],dh
3000408c:	08 00                	or     BYTE PTR [eax],al
3000408e:	00 00                	add    BYTE PTR [eax],al
30004090:	cc                   	int3   
30004091:	42                   	inc    edx
30004092:	00 30                	add    BYTE PTR [eax],dh
30004094:	08 00                	or     BYTE PTR [eax],al
30004096:	00 00                	add    BYTE PTR [eax],al
30004098:	d0 42 00             	rol    BYTE PTR [edx+0x0],1
3000409b:	30 08                	xor    BYTE PTR [eax],cl
3000409d:	00 00                	add    BYTE PTR [eax],al
3000409f:	00 d4                	add    ah,dl
300040a1:	42                   	inc    edx
300040a2:	00 30                	add    BYTE PTR [eax],dh
300040a4:	08 00                	or     BYTE PTR [eax],al
300040a6:	00 00                	add    BYTE PTR [eax],al
300040a8:	d8 42 00             	fadd   DWORD PTR [edx+0x0]
300040ab:	30 08                	xor    BYTE PTR [eax],cl
300040ad:	00 00                	add    BYTE PTR [eax],al
300040af:	00 dc                	add    ah,bl
300040b1:	42                   	inc    edx
300040b2:	00 30                	add    BYTE PTR [eax],dh
300040b4:	08 00                	or     BYTE PTR [eax],al
300040b6:	00 00                	add    BYTE PTR [eax],al
300040b8:	f8                   	clc    
300040b9:	42                   	inc    edx
300040ba:	00 30                	add    BYTE PTR [eax],dh
300040bc:	08 00                	or     BYTE PTR [eax],al
300040be:	00 00                	add    BYTE PTR [eax],al
300040c0:	fc                   	cld    
300040c1:	42                   	inc    edx
300040c2:	00 30                	add    BYTE PTR [eax],dh
300040c4:	08 00                	or     BYTE PTR [eax],al
300040c6:	00 00                	add    BYTE PTR [eax],al
300040c8:	00 43 00             	add    BYTE PTR [ebx+0x0],al
300040cb:	30 08                	xor    BYTE PTR [eax],cl
300040cd:	00 00                	add    BYTE PTR [eax],al
300040cf:	00 4a 07             	add    BYTE PTR [edx+0x7],cl
300040d2:	00 30                	add    BYTE PTR [eax],dh
300040d4:	02 1d 00 00 8a 07    	add    bl,BYTE PTR ds:0x78a0000
300040da:	00 30                	add    BYTE PTR [eax],dh
300040dc:	02 1d 00 00 b3 07    	add    bl,BYTE PTR ds:0x7b30000
300040e2:	00 30                	add    BYTE PTR [eax],dh
300040e4:	02 1d 00 00 10 08    	add    bl,BYTE PTR ds:0x8100000
300040ea:	00 30                	add    BYTE PTR [eax],dh
300040ec:	02 1d 00 00 73 08    	add    bl,BYTE PTR ds:0x8730000
300040f2:	00 30                	add    BYTE PTR [eax],dh
300040f4:	02 1d 00 00 a9 08    	add    bl,BYTE PTR ds:0x8a90000
300040fa:	00 30                	add    BYTE PTR [eax],dh
300040fc:	02 1d 00 00 df 08    	add    bl,BYTE PTR ds:0x8df0000
30004102:	00 30                	add    BYTE PTR [eax],dh
30004104:	02 1d 00 00 13 09    	add    bl,BYTE PTR ds:0x9130000
3000410a:	00 30                	add    BYTE PTR [eax],dh
3000410c:	02 1d 00 00 44 09    	add    bl,BYTE PTR ds:0x9440000
30004112:	00 30                	add    BYTE PTR [eax],dh
30004114:	02 1d 00 00 6f 09    	add    bl,BYTE PTR ds:0x96f0000
3000411a:	00 30                	add    BYTE PTR [eax],dh
3000411c:	02 1d 00 00 07 0b    	add    bl,BYTE PTR ds:0xb070000
30004122:	00 30                	add    BYTE PTR [eax],dh
30004124:	02 1d 00 00 27 0b    	add    bl,BYTE PTR ds:0xb270000
3000412a:	00 30                	add    BYTE PTR [eax],dh
3000412c:	02 1d 00 00 06 0c    	add    bl,BYTE PTR ds:0xc060000
30004132:	00 30                	add    BYTE PTR [eax],dh
30004134:	02 1d 00 00 fd 1d    	add    bl,BYTE PTR ds:0x1dfd0000
3000413a:	00 30                	add    BYTE PTR [eax],dh
3000413c:	02 1d 00 00 f4 42    	add    bl,BYTE PTR ds:0x42f40000
30004142:	00 30                	add    BYTE PTR [eax],dh
30004144:	01 12                	add    DWORD PTR [edx],edx
30004146:	00 00                	add    BYTE PTR [eax],al
30004148:	ec                   	in     al,dx
30004149:	42                   	inc    edx
3000414a:	00 30                	add    BYTE PTR [eax],dh
3000414c:	07                   	pop    es
3000414d:	07                   	pop    es
3000414e:	00 00                	add    BYTE PTR [eax],al
30004150:	f0 42                	lock inc edx
30004152:	00 30                	add    BYTE PTR [eax],dh
30004154:	07                   	pop    es
30004155:	10 00                	adc    BYTE PTR [eax],al
	...

Disassembly of section .data:

30004160 <console_node>:
30004160:	01 00                	add    DWORD PTR [eax],eax
	...

300041a0 <rcsid>:
300041a0:	24 48                	and    al,0x48
300041a2:	65                   	gs
300041a3:	61                   	popa   
300041a4:	64                   	fs
300041a5:	65                   	gs
300041a6:	72 3a                	jb     300041e2 <rcsid+0x42>
300041a8:	20 2f                	and    BYTE PTR [edi],ch
300041aa:	75 73                	jne    3000421f <_DYNAMIC+0x13>
300041ac:	65                   	gs
300041ad:	72 36                	jb     300041e5 <rcsid+0x45>
300041af:	2f                   	das    
300041b0:	6f                   	outs   dx,DWORD PTR ds:[esi]
300041b1:	75 73                	jne    30004226 <_DYNAMIC+0x1a>
300041b3:	74 65                	je     3000421a <_DYNAMIC+0xe>
300041b5:	72 2f                	jb     300041e6 <rcsid+0x46>
300041b7:	74 63                	je     3000421c <_DYNAMIC+0x10>
300041b9:	6c                   	ins    BYTE PTR es:[edi],dx
300041ba:	2f                   	das    
300041bb:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
300041be:	70 61                	jo     30004221 <_DYNAMIC+0x15>
300041c0:	74 2f                	je     300041f1 <rcsid+0x51>
300041c2:	52                   	push   edx
300041c3:	43                   	inc    ebx
300041c4:	53                   	push   ebx
300041c5:	2f                   	das    
300041c6:	73 74                	jae    3000423c <_DYNAMIC+0x30>
300041c8:	72 73                	jb     3000423d <_DYNAMIC+0x31>
300041ca:	74 72                	je     3000423e <_DYNAMIC+0x32>
300041cc:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
300041d0:	20 31                	and    BYTE PTR [ecx],dh
300041d2:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
300041d5:	39 33                	cmp    DWORD PTR [ebx],esi
300041d7:	2f                   	das    
300041d8:	30 33                	xor    BYTE PTR [ebx],dh
300041da:	2f                   	das    
300041db:	31 39                	xor    DWORD PTR [ecx],edi
300041dd:	20 31                	and    BYTE PTR [ecx],dh
300041df:	35 3a 32 35 3a       	xor    eax,0x3a35323a
300041e4:	34 30                	xor    al,0x30
300041e6:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
300041e9:	73 74                	jae    3000425f <_DYNAMIC+0x53>
300041eb:	65                   	gs
300041ec:	72 20                	jb     3000420e <_DYNAMIC+0x2>
300041ee:	45                   	inc    ebp
300041ef:	78 70                	js     30004261 <_DYNAMIC+0x55>
300041f1:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
300041f4:	53                   	push   ebx
300041f5:	50                   	push   eax
300041f6:	52                   	push   edx
300041f7:	49                   	dec    ecx
300041f8:	54                   	push   esp
300041f9:	45                   	inc    ebp
300041fa:	20 28                	and    BYTE PTR [eax],ch
300041fc:	42                   	inc    edx
300041fd:	65                   	gs
300041fe:	72 6b                	jb     3000426b <_DYNAMIC+0x5f>
30004200:	65                   	gs
30004201:	6c                   	ins    BYTE PTR es:[edi],dx
30004202:	65                   	gs
30004203:	79 29                	jns    3000422e <_DYNAMIC+0x22>
30004205:	00 00                	add    BYTE PTR [eax],al
	...

30004208 <_daylight>:
30004208:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

3000420c <_DYNAMIC>:
3000420c:	19 00                	sbb    DWORD PTR [eax],eax
3000420e:	00 00                	add    BYTE PTR [eax],al
30004210:	f4                   	hlt    
30004211:	42                   	inc    edx
30004212:	00 30                	add    BYTE PTR [eax],dh
30004214:	1b 00                	sbb    eax,DWORD PTR [eax]
30004216:	00 00                	add    BYTE PTR [eax],al
30004218:	04 00                	add    al,0x0
3000421a:	00 00                	add    BYTE PTR [eax],al
3000421c:	1a 00                	sbb    al,BYTE PTR [eax]
3000421e:	00 00                	add    BYTE PTR [eax],al
30004220:	f8                   	clc    
30004221:	42                   	inc    edx
30004222:	00 30                	add    BYTE PTR [eax],dh
30004224:	1c 00                	sbb    al,0x0
30004226:	00 00                	add    BYTE PTR [eax],al
30004228:	04 00                	add    al,0x0
3000422a:	00 00                	add    BYTE PTR [eax],al
3000422c:	04 00                	add    al,0x0
3000422e:	00 00                	add    BYTE PTR [eax],al
30004230:	b8 39 00 30 05       	mov    eax,0x5300039
30004235:	00 00                	add    BYTE PTR [eax],al
30004237:	00 54 38 00          	add    BYTE PTR [eax+edi*1+0x0],dl
3000423b:	30 06                	xor    BYTE PTR [esi],al
3000423d:	00 00                	add    BYTE PTR [eax],al
3000423f:	00 34 35 00 30 0a 00 	add    BYTE PTR [esi*1+0xa3000],dh
30004246:	00 00                	add    BYTE PTR [eax],al
30004248:	61                   	popa   
30004249:	01 00                	add    DWORD PTR [eax],eax
3000424b:	00 0b                	add    BYTE PTR [ebx],cl
3000424d:	00 00                	add    BYTE PTR [eax],al
3000424f:	00 10                	add    BYTE PTR [eax],dl
30004251:	00 00                	add    BYTE PTR [eax],al
30004253:	00 03                	add    BYTE PTR [ebx],al
30004255:	00 00                	add    BYTE PTR [eax],al
30004257:	00 e0                	add    al,ah
30004259:	42                   	inc    edx
3000425a:	00 30                	add    BYTE PTR [eax],dh
3000425c:	02 00                	add    al,BYTE PTR [eax]
3000425e:	00 00                	add    BYTE PTR [eax],al
30004260:	10 00                	adc    BYTE PTR [eax],al
30004262:	00 00                	add    BYTE PTR [eax],al
30004264:	14 00                	adc    al,0x0
30004266:	00 00                	add    BYTE PTR [eax],al
30004268:	11 00                	adc    DWORD PTR [eax],eax
3000426a:	00 00                	add    BYTE PTR [eax],al
3000426c:	17                   	pop    ss
3000426d:	00 00                	add    BYTE PTR [eax],al
3000426f:	00 48 41             	add    BYTE PTR [eax+0x41],cl
30004272:	00 30                	add    BYTE PTR [eax],dh
30004274:	11 00                	adc    DWORD PTR [eax],eax
30004276:	00 00                	add    BYTE PTR [eax],al
30004278:	80 40 00 30          	add    BYTE PTR [eax+0x0],0x30
3000427c:	12 00                	adc    al,BYTE PTR [eax]
3000427e:	00 00                	add    BYTE PTR [eax],al
30004280:	c8 00 00 00          	enter  0x0,0x0
30004284:	13 00                	adc    eax,DWORD PTR [eax]
30004286:	00 00                	add    BYTE PTR [eax],al
30004288:	08 00                	or     BYTE PTR [eax],al
3000428a:	00 00                	add    BYTE PTR [eax],al
3000428c:	16                   	push   ss
3000428d:	00 00                	add    BYTE PTR [eax],al
3000428f:	00 00                	add    BYTE PTR [eax],al
30004291:	00 00                	add    BYTE PTR [eax],al
30004293:	00 fa                	add    dl,bh
30004295:	ff                   	(bad)  
30004296:	ff 6f 0a             	jmp    FWORD PTR [edi+0xa]
	...

Disassembly of section .got:

300042c4 <.got>:
300042c4:	20 43 00             	and    BYTE PTR [ebx+0x0],al
300042c7:	30 28                	xor    BYTE PTR [eax],ch
300042c9:	43                   	inc    ebx
300042ca:	00 30                	add    BYTE PTR [eax],dh
300042cc:	04 43                	add    al,0x43
300042ce:	00 30                	add    BYTE PTR [eax],dh
300042d0:	08 43 00             	or     BYTE PTR [ebx+0x0],al
300042d3:	30 0c 43             	xor    BYTE PTR [ebx+eax*2],cl
300042d6:	00 30                	add    BYTE PTR [eax],dh
300042d8:	10 43 00             	adc    BYTE PTR [ebx+0x0],al
300042db:	30 14 43             	xor    BYTE PTR [ebx+eax*2],dl
300042de:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .got.plt:

300042e0 <_GLOBAL_OFFSET_TABLE_>:
300042e0:	0c 42                	or     al,0x42
300042e2:	00 30                	add    BYTE PTR [eax],dh
	...
300042ec:	16                   	push   ss
300042ed:	2a 00                	sub    al,BYTE PTR [eax]
300042ef:	30 26                	xor    BYTE PTR [esi],ah
300042f1:	2a 00                	sub    al,BYTE PTR [eax]
300042f3:	30                   	.byte 0x30

Disassembly of section .init_array:

300042f4 <.init_array>:
300042f4:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

300042f8 <.fini_array>:
300042f8:	2c 0a                	sub    al,0xa
300042fa:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .data.rel.local:

300042fc <_tzname>:
300042fc:	00 40 00             	add    BYTE PTR [eax+0x0],al
300042ff:	30 00                	xor    BYTE PTR [eax],al
30004301:	40                   	inc    eax
30004302:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .bss:

30004304 <heapEnd>:
30004304:	00 00                	add    BYTE PTR [eax],al
	...

30004308 <heapBase>:
30004308:	00 00                	add    BYTE PTR [eax],al
	...

3000430c <heapCurr>:
3000430c:	00 00                	add    BYTE PTR [eax],al
	...

30004310 <processEnvp>:
30004310:	00 00                	add    BYTE PTR [eax],al
	...

30004314 <libcTZ>:
30004314:	00 00                	add    BYTE PTR [eax],al
	...

30004318 <lasts.1338>:
30004318:	00 00                	add    BYTE PTR [eax],al
	...

3000431c <libcInitialized>:
3000431c:	00 00                	add    BYTE PTR [eax],al
	...

30004320 <fops>:
	...

30004328 <console_file>:
	...

30004338 <_dstbias>:
30004338:	00 00                	add    BYTE PTR [eax],al
	...

3000433c <ticksToWait>:
3000433c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	6a 01                	push   0x1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	04 00                	add    al,0x0
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	fb                   	sti    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c bf             	add    BYTE PTR [edi+edi*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 30                	add    BYTE PTR [eax],dh
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	64 00 00             	add    BYTE PTR fs:[eax],al
      2b:	00 02                	add    BYTE PTR [edx],al
      2d:	01 06                	add    DWORD PTR [esi],eax
      2f:	5d                   	pop    ebp
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
      4d:	00 00                	add    BYTE PTR [eax],al
      4f:	02 02                	add    al,BYTE PTR [edx]
      51:	07                   	pop    es
      52:	0e                   	push   cs
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 70             	add    BYTE PTR [eax+esi*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 02                	add    BYTE PTR [edx],al
      5c:	34 61                	xor    al,0x61
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	3e 00 00             	add    BYTE PTR ds:[eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	34 00                	xor    al,0x0
      6d:	00 00                	add    BYTE PTR [eax],al
      6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
      76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
      79:	a2 00 00 00 02       	mov    ds:0x2000000,al
      7e:	01 02                	add    DWORD PTR [edx],eax
      80:	9c                   	pushf  
      81:	00 00                	add    BYTE PTR [eax],al
      83:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
      86:	00 00                	add    BYTE PTR [eax],al
      88:	00 03                	add    BYTE PTR [ebx],al
      8a:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
      8d:	00 00                	add    BYTE PTR [eax],al
      8f:	05 04 95 00 00       	add    eax,0x9504
      94:	00 06                	add    BYTE PTR [esi],al
      96:	25 00 00 00 02       	and    eax,0x2000000
      9b:	04 07                	add    al,0x7
      9d:	39 00                	cmp    DWORD PTR [eax],eax
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      a4:	e8 00 00 00 05       	call   50000a9 <sysEnter_Vector+0x4ed00a9>
      a9:	04 25                	add    al,0x25
      ab:	00 00                	add    BYTE PTR [eax],al
      ad:	00 07                	add    BYTE PTR [edi],al
      af:	21 00                	and    DWORD PTR [eax],eax
      b1:	00 00                	add    BYTE PTR [eax],al
      b3:	01 08                	add    DWORD PTR [eax],ecx
      b5:	a8 00                	test   al,0x0
      b7:	00 00                	add    BYTE PTR [eax],al
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	00 30                	add    BYTE PTR [eax],dh
      bd:	38 00                	cmp    BYTE PTR [eax],al
      bf:	00 00                	add    BYTE PTR [eax],al
      c1:	01 9c e0 00 00 00 08 	add    DWORD PTR [eax+eiz*8+0x8000000],ebx
      c8:	73 00                	jae    ca <sysEnter_Vector-0x12ff36>
      ca:	01 08                	add    DWORD PTR [eax],ecx
      cc:	8f 00                	pop    DWORD PTR [eax]
      ce:	00 00                	add    BYTE PTR [eax],al
      d0:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      d6:	01 08                	add    DWORD PTR [eax],ecx
      d8:	3a 00                	cmp    al,BYTE PTR [eax]
      da:	00 00                	add    BYTE PTR [eax],al
      dc:	02 91 04 00 07 ae    	add    dl,BYTE PTR [ecx-0x51f8fffc]
      e2:	00 00                	add    BYTE PTR [eax],al
      e4:	00 01                	add    BYTE PTR [ecx],al
      e6:	10 a8 00 00 00 38    	adc    BYTE PTR [eax+0x38000000],ch
      ec:	00 00                	add    BYTE PTR [eax],al
      ee:	30 38                	xor    BYTE PTR [eax],bh
      f0:	00 00                	add    BYTE PTR [eax],al
      f2:	00 01                	add    BYTE PTR [ecx],al
      f4:	9c                   	pushf  
      f5:	12 01                	adc    al,BYTE PTR [ecx]
      f7:	00 00                	add    BYTE PTR [eax],al
      f9:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
      fc:	01 10                	add    DWORD PTR [eax],edx
      fe:	8f 00                	pop    DWORD PTR [eax]
     100:	00 00                	add    BYTE PTR [eax],al
     102:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
     108:	01 10                	add    DWORD PTR [eax],edx
     10a:	3a 00                	cmp    al,BYTE PTR [eax]
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	02 91 04 00 09 4b    	add    dl,BYTE PTR [ecx+0x4b090004]
     114:	00 00                	add    BYTE PTR [eax],al
     116:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     119:	56                   	push   esi
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
     122:	30 09                	xor    BYTE PTR [ecx],cl
     124:	b6 00                	mov    dh,0x0
     126:	00 00                	add    BYTE PTR [eax],al
     128:	04 35                	add    al,0x35
     12a:	56                   	push   esi
     12b:	00 00                	add    BYTE PTR [eax],al
     12d:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
     133:	30 09                	xor    BYTE PTR [ecx],cl
     135:	62 01                	bound  eax,QWORD PTR [ecx]
     137:	00 00                	add    BYTE PTR [eax],al
     139:	04 36                	add    al,0x36
     13b:	56                   	push   esi
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
     144:	30 09                	xor    BYTE PTR [ecx],cl
     146:	54                   	push   esp
     147:	00 00                	add    BYTE PTR [eax],al
     149:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
     14f:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
     155:	30 09                	xor    BYTE PTR [ecx],cl
     157:	28 00                	sub    BYTE PTR [eax],al
     159:	00 00                	add    BYTE PTR [eax],al
     15b:	05 44 67 01 00       	add    eax,0x16744
     160:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
     166:	30 05 04 a8 00 00    	xor    BYTE PTR ds:0xa804,al
     16c:	00 00                	add    BYTE PTR [eax],al
     16e:	a9 01 00 00 04       	test   eax,0x4000001
     173:	00 83 00 00 00 04    	add    BYTE PTR [ebx+0x4000000],al
     179:	01 fb                	add    ebx,edi
     17b:	00 00                	add    BYTE PTR [eax],al
     17d:	00 0c 7b             	add    BYTE PTR [ebx+edi*2],cl
     180:	01 00                	add    DWORD PTR [eax],eax
     182:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
     185:	00 00                	add    BYTE PTR [eax],al
     187:	70 00                	jo     189 <sysEnter_Vector-0x12fe77>
     189:	00 30                	add    BYTE PTR [eax],dh
     18b:	aa                   	stos   BYTE PTR es:[edi],al
     18c:	00 00                	add    BYTE PTR [eax],al
     18e:	00 de                	add    dh,bl
     190:	00 00                	add    BYTE PTR [eax],al
     192:	00 02                	add    BYTE PTR [edx],al
     194:	01 06                	add    DWORD PTR [esi],eax
     196:	64 00 00             	add    BYTE PTR fs:[eax],al
     199:	00 02                	add    BYTE PTR [edx],al
     19b:	01 06                	add    DWORD PTR [esi],eax
     19d:	5d                   	pop    ebp
     19e:	00 00                	add    BYTE PTR [eax],al
     1a0:	00 02                	add    BYTE PTR [edx],al
     1a2:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     1a8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1af:	02 08                	add    cl,BYTE PTR [eax]
     1b1:	05 00 00 00 00       	add    eax,0x0
     1b6:	02 01                	add    al,BYTE PTR [ecx]
     1b8:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	02 02                	add    al,BYTE PTR [edx]
     1bf:	07                   	pop    es
     1c0:	0e                   	push   cs
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     1c6:	00 00                	add    BYTE PTR [eax],al
     1c8:	00 02                	add    BYTE PTR [edx],al
     1ca:	34 61                	xor    al,0x61
     1cc:	00 00                	add    BYTE PTR [eax],al
     1ce:	00 02                	add    BYTE PTR [edx],al
     1d0:	04 07                	add    al,0x7
     1d2:	3e 00 00             	add    BYTE PTR ds:[eax],al
     1d5:	00 02                	add    BYTE PTR [edx],al
     1d7:	08 07                	or     BYTE PTR [edi],al
     1d9:	34 00                	xor    al,0x0
     1db:	00 00                	add    BYTE PTR [eax],al
     1dd:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     1e4:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     1e7:	a2 00 00 00 02       	mov    ds:0x2000000,al
     1ec:	01 02                	add    DWORD PTR [edx],eax
     1ee:	9c                   	pushf  
     1ef:	00 00                	add    BYTE PTR [eax],al
     1f1:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     1f4:	00 00                	add    BYTE PTR [eax],al
     1f6:	00 03                	add    BYTE PTR [ebx],al
     1f8:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     1fb:	00 00                	add    BYTE PTR [eax],al
     1fd:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     200:	39 00                	cmp    DWORD PTR [eax],eax
     202:	00 00                	add    BYTE PTR [eax],al
     204:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     207:	e8 00 00 00 05       	call   500020c <sysEnter_Vector+0x4ed020c>
     20c:	04 25                	add    al,0x25
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	00 06                	add    BYTE PTR [esi],al
     212:	73 01                	jae    215 <sysEnter_Vector-0x12fdeb>
     214:	00 00                	add    BYTE PTR [eax],al
     216:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     21c:	70 00                	jo     21e <sysEnter_Vector-0x12fde2>
     21e:	00 30                	add    BYTE PTR [eax],dh
     220:	55                   	push   ebp
     221:	00 00                	add    BYTE PTR [eax],al
     223:	00 01                	add    BYTE PTR [ecx],al
     225:	9c                   	pushf  
     226:	fa                   	cli    
     227:	00 00                	add    BYTE PTR [eax],al
     229:	00 07                	add    BYTE PTR [edi],al
     22b:	ce                   	into   
     22c:	0a 00                	or     al,BYTE PTR [eax]
     22e:	00 01                	add    BYTE PTR [ecx],al
     230:	25 9d 00 00 00       	and    eax,0x9d
     235:	02 91 00 07 a5 01    	add    dl,BYTE PTR [ecx+0x1a50700]
     23b:	00 00                	add    BYTE PTR [eax],al
     23d:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     243:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	25 00 00 00 01       	and    eax,0x1000000
     250:	51                   	push   ecx
     251:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     254:	01 27                	add    DWORD PTR [edi],esp
     256:	9d                   	popf   
     257:	00 00                	add    BYTE PTR [eax],al
     259:	00 01                	add    BYTE PTR [ecx],al
     25b:	56                   	push   esi
     25c:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     25f:	01 27                	add    DWORD PTR [edi],esp
     261:	9d                   	popf   
     262:	00 00                	add    BYTE PTR [eax],al
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	53                   	push   ebx
     267:	00 06                	add    BYTE PTR [esi],al
     269:	6a 01                	push   0x1
     26b:	00 00                	add    BYTE PTR [eax],al
     26d:	01 33                	add    DWORD PTR [ebx],esi
     26f:	3a 00                	cmp    al,BYTE PTR [eax]
     271:	00 00                	add    BYTE PTR [eax],al
     273:	c5 00                	lds    eax,FWORD PTR [eax]
     275:	00 30                	add    BYTE PTR [eax],dh
     277:	55                   	push   ebp
     278:	00 00                	add    BYTE PTR [eax],al
     27a:	00 01                	add    BYTE PTR [ecx],al
     27c:	9c                   	pushf  
     27d:	51                   	push   ecx
     27e:	01 00                	add    DWORD PTR [eax],eax
     280:	00 07                	add    BYTE PTR [edi],al
     282:	ce                   	into   
     283:	0a 00                	or     al,BYTE PTR [eax]
     285:	00 01                	add    BYTE PTR [ecx],al
     287:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     28d:	91                   	xchg   ecx,eax
     28e:	00 07                	add    BYTE PTR [edi],al
     290:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
     291:	01 00                	add    DWORD PTR [eax],eax
     293:	00 01                	add    BYTE PTR [ecx],al
     295:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     29b:	91                   	xchg   ecx,eax
     29c:	04 08                	add    al,0x8
     29e:	63 00                	arpl   WORD PTR [eax],ax
     2a0:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     2a6:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     2a9:	70 00                	jo     2ab <sysEnter_Vector-0x12fd55>
     2ab:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2b1:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     2b4:	73 00                	jae    2b6 <sysEnter_Vector-0x12fd4a>
     2b6:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2bc:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2bf:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
     2c2:	00 00                	add    BYTE PTR [eax],al
     2c4:	04 34                	add    al,0x34
     2c6:	56                   	push   esi
     2c7:	00 00                	add    BYTE PTR [eax],al
     2c9:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
     2cf:	30 09                	xor    BYTE PTR [ecx],cl
     2d1:	b6 00                	mov    dh,0x0
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	04 35                	add    al,0x35
     2d7:	56                   	push   esi
     2d8:	00 00                	add    BYTE PTR [eax],al
     2da:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
     2e0:	30 09                	xor    BYTE PTR [ecx],cl
     2e2:	62 01                	bound  eax,QWORD PTR [ecx]
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	04 36                	add    al,0x36
     2e8:	56                   	push   esi
     2e9:	00 00                	add    BYTE PTR [eax],al
     2eb:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
     2f1:	30 09                	xor    BYTE PTR [ecx],cl
     2f3:	54                   	push   esp
     2f4:	00 00                	add    BYTE PTR [eax],al
     2f6:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
     2fc:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
     302:	30 09                	xor    BYTE PTR [ecx],cl
     304:	28 00                	sub    BYTE PTR [eax],al
     306:	00 00                	add    BYTE PTR [eax],al
     308:	05 44 a6 01 00       	add    eax,0x1a644
     30d:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
     313:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     319:	00 00                	add    BYTE PTR [eax],al
     31b:	4c                   	dec    esp
     31c:	01 00                	add    DWORD PTR [eax],eax
     31e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     321:	0e                   	push   cs
     322:	01 00                	add    DWORD PTR [eax],eax
     324:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     327:	fb                   	sti    
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	00 0c ab             	add    BYTE PTR [ebx+ebp*4],cl
     32d:	01 00                	add    DWORD PTR [eax],eax
     32f:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
     332:	00 00                	add    BYTE PTR [eax],al
     334:	1c 01                	sbb    al,0x1
     336:	00 30                	add    BYTE PTR [eax],dh
     338:	97                   	xchg   edi,eax
     339:	00 00                	add    BYTE PTR [eax],al
     33b:	00 ef                	add    bh,ch
     33d:	01 00                	add    DWORD PTR [eax],eax
     33f:	00 02                	add    BYTE PTR [edx],al
     341:	01 06                	add    DWORD PTR [esi],eax
     343:	64 00 00             	add    BYTE PTR fs:[eax],al
     346:	00 02                	add    BYTE PTR [edx],al
     348:	01 06                	add    DWORD PTR [esi],eax
     34a:	5d                   	pop    ebp
     34b:	00 00                	add    BYTE PTR [eax],al
     34d:	00 02                	add    BYTE PTR [edx],al
     34f:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     355:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     35c:	02 08                	add    cl,BYTE PTR [eax]
     35e:	05 00 00 00 00       	add    eax,0x0
     363:	02 01                	add    al,BYTE PTR [ecx]
     365:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     368:	00 00                	add    BYTE PTR [eax],al
     36a:	02 02                	add    al,BYTE PTR [edx]
     36c:	07                   	pop    es
     36d:	0e                   	push   cs
     36e:	00 00                	add    BYTE PTR [eax],al
     370:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     373:	00 00                	add    BYTE PTR [eax],al
     375:	00 02                	add    BYTE PTR [edx],al
     377:	34 61                	xor    al,0x61
     379:	00 00                	add    BYTE PTR [eax],al
     37b:	00 02                	add    BYTE PTR [edx],al
     37d:	04 07                	add    al,0x7
     37f:	3e 00 00             	add    BYTE PTR ds:[eax],al
     382:	00 02                	add    BYTE PTR [edx],al
     384:	08 07                	or     BYTE PTR [edi],al
     386:	34 00                	xor    al,0x0
     388:	00 00                	add    BYTE PTR [eax],al
     38a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     391:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     394:	a2 00 00 00 02       	mov    ds:0x2000000,al
     399:	01 02                	add    DWORD PTR [edx],eax
     39b:	9c                   	pushf  
     39c:	00 00                	add    BYTE PTR [eax],al
     39e:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     3a1:	00 00                	add    BYTE PTR [eax],al
     3a3:	00 03                	add    BYTE PTR [ebx],al
     3a5:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     3a8:	00 00                	add    BYTE PTR [eax],al
     3aa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3ad:	39 00                	cmp    DWORD PTR [eax],eax
     3af:	00 00                	add    BYTE PTR [eax],al
     3b1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3b4:	e8 00 00 00 05       	call   50003b9 <sysEnter_Vector+0x4ed03b9>
     3b9:	04 25                	add    al,0x25
     3bb:	00 00                	add    BYTE PTR [eax],al
     3bd:	00 06                	add    BYTE PTR [esi],al
     3bf:	e0 01                	loopne 3c2 <sysEnter_Vector-0x12fc3e>
     3c1:	00 00                	add    BYTE PTR [eax],al
     3c3:	01 28                	add    DWORD PTR [eax],ebp
     3c5:	9d                   	popf   
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3cb:	00 30                	add    BYTE PTR [eax],dh
     3cd:	97                   	xchg   edi,eax
     3ce:	00 00                	add    BYTE PTR [eax],al
     3d0:	00 01                	add    BYTE PTR [ecx],al
     3d2:	9c                   	pushf  
     3d3:	f4                   	hlt    
     3d4:	00 00                	add    BYTE PTR [eax],al
     3d6:	00 07                	add    BYTE PTR [edi],al
     3d8:	73 00                	jae    3da <sysEnter_Vector-0x12fc26>
     3da:	01 28                	add    DWORD PTR [eax],ebp
     3dc:	9d                   	popf   
     3dd:	00 00                	add    BYTE PTR [eax],al
     3df:	00 02                	add    BYTE PTR [edx],al
     3e1:	91                   	xchg   ecx,eax
     3e2:	00 08                	add    BYTE PTR [eax],cl
     3e4:	d4 01                	aam    0x1
     3e6:	00 00                	add    BYTE PTR [eax],al
     3e8:	01 28                	add    DWORD PTR [eax],ebp
     3ea:	9d                   	popf   
     3eb:	00 00                	add    BYTE PTR [eax],al
     3ed:	00 02                	add    BYTE PTR [edx],al
     3ef:	91                   	xchg   ecx,eax
     3f0:	04 09                	add    al,0x9
     3f2:	da 01                	fiadd  DWORD PTR [ecx]
     3f4:	00 00                	add    BYTE PTR [eax],al
     3f6:	01 2a                	add    DWORD PTR [edx],ebp
     3f8:	9d                   	popf   
     3f9:	00 00                	add    BYTE PTR [eax],al
     3fb:	00 05 03 18 43 00    	add    BYTE PTR ds:0x431803,al
     401:	30 0a                	xor    BYTE PTR [edx],cl
     403:	63 68 00             	arpl   WORD PTR [eax+0x0],bp
     406:	01 2b                	add    DWORD PTR [ebx],ebp
     408:	3a 00                	cmp    al,BYTE PTR [eax]
     40a:	00 00                	add    BYTE PTR [eax],al
     40c:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     40f:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
     412:	00 00                	add    BYTE PTR [eax],al
     414:	04 34                	add    al,0x34
     416:	56                   	push   esi
     417:	00 00                	add    BYTE PTR [eax],al
     419:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
     41f:	30 0b                	xor    BYTE PTR [ebx],cl
     421:	b6 00                	mov    dh,0x0
     423:	00 00                	add    BYTE PTR [eax],al
     425:	04 35                	add    al,0x35
     427:	56                   	push   esi
     428:	00 00                	add    BYTE PTR [eax],al
     42a:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
     430:	30 0b                	xor    BYTE PTR [ebx],cl
     432:	62 01                	bound  eax,QWORD PTR [ecx]
     434:	00 00                	add    BYTE PTR [eax],al
     436:	04 36                	add    al,0x36
     438:	56                   	push   esi
     439:	00 00                	add    BYTE PTR [eax],al
     43b:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
     441:	30 0b                	xor    BYTE PTR [ebx],cl
     443:	54                   	push   esp
     444:	00 00                	add    BYTE PTR [eax],al
     446:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
     44c:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
     452:	30 0b                	xor    BYTE PTR [ebx],cl
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	00 00                	add    BYTE PTR [eax],al
     458:	05 44 49 01 00       	add    eax,0x14944
     45d:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
     463:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     469:	00 00                	add    BYTE PTR [eax],al
     46b:	1d 02 00 00 04       	sbb    eax,0x4000002
     470:	00 b7 01 00 00 04    	add    BYTE PTR [edi+0x4000001],dh
     476:	01 fb                	add    ebx,edi
     478:	00 00                	add    BYTE PTR [eax],al
     47a:	00 0c ed 01 00 00 79 	add    BYTE PTR [ebp*8+0x79000001],cl
     481:	00 00                	add    BYTE PTR [eax],al
     483:	00 b4 01 00 30 49 02 	add    BYTE PTR [ecx+eax*1+0x2493000],dh
     48a:	00 00                	add    BYTE PTR [eax],al
     48c:	d1 02                	rol    DWORD PTR [edx],1
     48e:	00 00                	add    BYTE PTR [eax],al
     490:	02 01                	add    al,BYTE PTR [ecx]
     492:	06                   	push   es
     493:	64 00 00             	add    BYTE PTR fs:[eax],al
     496:	00 02                	add    BYTE PTR [edx],al
     498:	01 06                	add    DWORD PTR [esi],eax
     49a:	5d                   	pop    ebp
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	00 02                	add    BYTE PTR [edx],al
     49f:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     4a5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     4ac:	02 08                	add    cl,BYTE PTR [eax]
     4ae:	05 00 00 00 00       	add    eax,0x0
     4b3:	02 01                	add    al,BYTE PTR [ecx]
     4b5:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     4b8:	00 00                	add    BYTE PTR [eax],al
     4ba:	02 02                	add    al,BYTE PTR [edx]
     4bc:	07                   	pop    es
     4bd:	0e                   	push   cs
     4be:	00 00                	add    BYTE PTR [eax],al
     4c0:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     4c3:	00 00                	add    BYTE PTR [eax],al
     4c5:	00 02                	add    BYTE PTR [edx],al
     4c7:	34 61                	xor    al,0x61
     4c9:	00 00                	add    BYTE PTR [eax],al
     4cb:	00 02                	add    BYTE PTR [edx],al
     4cd:	04 07                	add    al,0x7
     4cf:	3e 00 00             	add    BYTE PTR ds:[eax],al
     4d2:	00 02                	add    BYTE PTR [edx],al
     4d4:	08 07                	or     BYTE PTR [edi],al
     4d6:	34 00                	xor    al,0x0
     4d8:	00 00                	add    BYTE PTR [eax],al
     4da:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     4e1:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     4e4:	a2 00 00 00 02       	mov    ds:0x2000000,al
     4e9:	01 02                	add    DWORD PTR [edx],eax
     4eb:	9c                   	pushf  
     4ec:	00 00                	add    BYTE PTR [eax],al
     4ee:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     4f1:	00 00                	add    BYTE PTR [eax],al
     4f3:	00 03                	add    BYTE PTR [ebx],al
     4f5:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     4f8:	00 00                	add    BYTE PTR [eax],al
     4fa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     4fd:	39 00                	cmp    DWORD PTR [eax],eax
     4ff:	00 00                	add    BYTE PTR [eax],al
     501:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     504:	e8 00 00 00 05       	call   5000509 <sysEnter_Vector+0x4ed0509>
     509:	04 25                	add    al,0x25
     50b:	00 00                	add    BYTE PTR [eax],al
     50d:	00 06                	add    BYTE PTR [esi],al
     50f:	03 02                	add    eax,DWORD PTR [edx]
     511:	00 00                	add    BYTE PTR [eax],al
     513:	01 09                	add    DWORD PTR [ecx],ecx
     515:	b4 01                	mov    ah,0x1
     517:	00 30                	add    BYTE PTR [eax],dh
     519:	77 00                	ja     51b <sysEnter_Vector-0x12fae5>
     51b:	00 00                	add    BYTE PTR [eax],al
     51d:	01 9c e9 00 00 00 07 	add    DWORD PTR [ecx+ebp*8+0x7000000],ebx
     524:	73 00                	jae    526 <sysEnter_Vector-0x12fada>
     526:	01 09                	add    DWORD PTR [ecx],ecx
     528:	9d                   	popf   
     529:	00 00                	add    BYTE PTR [eax],al
     52b:	00 02                	add    BYTE PTR [edx],al
     52d:	91                   	xchg   ecx,eax
     52e:	00 08                	add    BYTE PTR [eax],cl
     530:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     536:	00 00                	add    BYTE PTR [eax],al
     538:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     53e:	01 0b                	add    DWORD PTR [ebx],ecx
     540:	3a 00                	cmp    al,BYTE PTR [eax]
     542:	00 00                	add    BYTE PTR [eax],al
     544:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     54a:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     551:	91                   	xchg   ecx,eax
     552:	67 00 06 f9 01       	add    BYTE PTR ds:0x1f9,al
     557:	00 00                	add    BYTE PTR [eax],al
     559:	01 15 2b 02 00 30    	add    DWORD PTR ds:0x3000022b,edx
     55f:	bb 00 00 00 01       	mov    ebx,0x1000000
     564:	9c                   	pushf  
     565:	31 01                	xor    DWORD PTR [ecx],eax
     567:	00 00                	add    BYTE PTR [eax],al
     569:	07                   	pop    es
     56a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     56b:	00 01                	add    BYTE PTR [ecx],al
     56d:	15 3a 00 00 00       	adc    eax,0x3a
     572:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     578:	01 15 9d 00 00 00    	add    DWORD PTR ds:0x9d,edx
     57e:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     584:	01 17                	add    DWORD PTR [edi],edx
     586:	3a 00                	cmp    al,BYTE PTR [eax]
     588:	00 00                	add    BYTE PTR [eax],al
     58a:	02 91 6c 09 0c 02    	add    dl,BYTE PTR [ecx+0x20c096c]
     590:	00 00                	add    BYTE PTR [eax],al
     592:	01 17                	add    DWORD PTR [edi],edx
     594:	3a 00                	cmp    al,BYTE PTR [eax]
     596:	00 00                	add    BYTE PTR [eax],al
     598:	02 91 68 00 06 e7    	add    dl,BYTE PTR [ecx-0x18f9ff98]
     59e:	01 00                	add    DWORD PTR [eax],eax
     5a0:	00 01                	add    BYTE PTR [ecx],al
     5a2:	25 e6 02 00 30       	and    eax,0x300002e6
     5a7:	bb 00 00 00 01       	mov    ebx,0x1000000
     5ac:	9c                   	pushf  
     5ad:	79 01                	jns    5b0 <sysEnter_Vector-0x12fa50>
     5af:	00 00                	add    BYTE PTR [eax],al
     5b1:	07                   	pop    es
     5b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5b3:	00 01                	add    BYTE PTR [ecx],al
     5b5:	25 3a 00 00 00       	and    eax,0x3a
     5ba:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     5c0:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     5c6:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5cc:	01 27                	add    DWORD PTR [edi],esp
     5ce:	3a 00                	cmp    al,BYTE PTR [eax]
     5d0:	00 00                	add    BYTE PTR [eax],al
     5d2:	02 91 6c 09 0c 02    	add    dl,BYTE PTR [ecx+0x20c096c]
     5d8:	00 00                	add    BYTE PTR [eax],al
     5da:	01 27                	add    DWORD PTR [edi],esp
     5dc:	3a 00                	cmp    al,BYTE PTR [eax]
     5de:	00 00                	add    BYTE PTR [eax],al
     5e0:	02 91 68 00 0a fe    	add    dl,BYTE PTR [ecx-0x1f5ff98]
     5e6:	01 00                	add    DWORD PTR [eax],eax
     5e8:	00 01                	add    BYTE PTR [ecx],al
     5ea:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5ed:	00 00                	add    BYTE PTR [eax],al
     5ef:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
     5f4:	00 00                	add    BYTE PTR [eax],al
     5f6:	00 01                	add    BYTE PTR [ecx],al
     5f8:	9c                   	pushf  
     5f9:	c5 01                	lds    eax,FWORD PTR [ecx]
     5fb:	00 00                	add    BYTE PTR [eax],al
     5fd:	07                   	pop    es
     5fe:	73 74                	jae    674 <sysEnter_Vector-0x12f98c>
     600:	72 00                	jb     602 <sysEnter_Vector-0x12f9fe>
     602:	01 36                	add    DWORD PTR [esi],esi
     604:	9d                   	popf   
     605:	00 00                	add    BYTE PTR [eax],al
     607:	00 02                	add    BYTE PTR [edx],al
     609:	91                   	xchg   ecx,eax
     60a:	00 08                	add    BYTE PTR [eax],cl
     60c:	72 65                	jb     673 <sysEnter_Vector-0x12f98d>
     60e:	73 00                	jae    610 <sysEnter_Vector-0x12f9f0>
     610:	01 38                	add    DWORD PTR [eax],edi
     612:	3a 00                	cmp    al,BYTE PTR [eax]
     614:	00 00                	add    BYTE PTR [eax],al
     616:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     61c:	00 30                	add    BYTE PTR [eax],dh
     61e:	40                   	inc    eax
     61f:	00 00                	add    BYTE PTR [eax],al
     621:	00 08                	add    BYTE PTR [eax],cl
     623:	69 00 01 3c 3a 00    	imul   eax,DWORD PTR [eax],0x3a3c01
     629:	00 00                	add    BYTE PTR [eax],al
     62b:	02 91 70 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000070]
     631:	4b                   	dec    ebx
     632:	00 00                	add    BYTE PTR [eax],al
     634:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     637:	56                   	push   esi
     638:	00 00                	add    BYTE PTR [eax],al
     63a:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
     640:	30 0c b6             	xor    BYTE PTR [esi+esi*4],cl
     643:	00 00                	add    BYTE PTR [eax],al
     645:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     64c:	05 03 0c 43 00       	add    eax,0x430c03
     651:	30 0c 62             	xor    BYTE PTR [edx+eiz*2],cl
     654:	01 00                	add    DWORD PTR [eax],eax
     656:	00 04 36             	add    BYTE PTR [esi+esi*1],al
     659:	56                   	push   esi
     65a:	00 00                	add    BYTE PTR [eax],al
     65c:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
     662:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
     665:	00 00                	add    BYTE PTR [eax],al
     667:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
     66d:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
     673:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
     676:	00 00                	add    BYTE PTR [eax],al
     678:	00 05 44 1a 02 00    	add    BYTE PTR ds:0x21a44,al
     67e:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
     684:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     68a:	00 00                	add    BYTE PTR [eax],al
     68c:	bd 01 00 00 04       	mov    ebp,0x4000001
     691:	00 74 02 00          	add    BYTE PTR [edx+eax*1+0x0],dh
     695:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     698:	fb                   	sti    
     699:	00 00                	add    BYTE PTR [eax],al
     69b:	00 0c 33             	add    BYTE PTR [ebx+esi*1],cl
     69e:	02 00                	add    al,BYTE PTR [eax]
     6a0:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
     6a3:	00 00                	add    BYTE PTR [eax],al
     6a5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     6a8:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
     6ab:	00 00                	add    BYTE PTR [eax],al
     6ad:	ef                   	out    dx,eax
     6ae:	03 00                	add    eax,DWORD PTR [eax]
     6b0:	00 02                	add    BYTE PTR [edx],al
     6b2:	01 06                	add    DWORD PTR [esi],eax
     6b4:	64 00 00             	add    BYTE PTR fs:[eax],al
     6b7:	00 02                	add    BYTE PTR [edx],al
     6b9:	01 06                	add    DWORD PTR [esi],eax
     6bb:	5d                   	pop    ebp
     6bc:	00 00                	add    BYTE PTR [eax],al
     6be:	00 02                	add    BYTE PTR [edx],al
     6c0:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     6c6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     6cd:	02 08                	add    cl,BYTE PTR [eax]
     6cf:	05 00 00 00 00       	add    eax,0x0
     6d4:	02 01                	add    al,BYTE PTR [ecx]
     6d6:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     6d9:	00 00                	add    BYTE PTR [eax],al
     6db:	02 02                	add    al,BYTE PTR [edx]
     6dd:	07                   	pop    es
     6de:	0e                   	push   cs
     6df:	00 00                	add    BYTE PTR [eax],al
     6e1:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     6e4:	00 00                	add    BYTE PTR [eax],al
     6e6:	00 02                	add    BYTE PTR [edx],al
     6e8:	34 61                	xor    al,0x61
     6ea:	00 00                	add    BYTE PTR [eax],al
     6ec:	00 02                	add    BYTE PTR [edx],al
     6ee:	04 07                	add    al,0x7
     6f0:	3e 00 00             	add    BYTE PTR ds:[eax],al
     6f3:	00 02                	add    BYTE PTR [edx],al
     6f5:	08 07                	or     BYTE PTR [edi],al
     6f7:	34 00                	xor    al,0x0
     6f9:	00 00                	add    BYTE PTR [eax],al
     6fb:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     702:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     705:	a2 00 00 00 02       	mov    ds:0x2000000,al
     70a:	01 02                	add    DWORD PTR [edx],eax
     70c:	9c                   	pushf  
     70d:	00 00                	add    BYTE PTR [eax],al
     70f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     712:	00 00                	add    BYTE PTR [eax],al
     714:	00 03                	add    BYTE PTR [ebx],al
     716:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     719:	00 00                	add    BYTE PTR [eax],al
     71b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     71e:	39 00                	cmp    DWORD PTR [eax],eax
     720:	00 00                	add    BYTE PTR [eax],al
     722:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     725:	e8 00 00 00 05       	call   500072a <sysEnter_Vector+0x4ed072a>
     72a:	04 25                	add    al,0x25
     72c:	00 00                	add    BYTE PTR [eax],al
     72e:	00 06                	add    BYTE PTR [esi],al
     730:	2c 02                	sub    al,0x2
     732:	00 00                	add    BYTE PTR [eax],al
     734:	01 09                	add    DWORD PTR [ecx],ecx
     736:	3a 00                	cmp    al,BYTE PTR [eax]
     738:	00 00                	add    BYTE PTR [eax],al
     73a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     73d:	30 aa 00 00 00 01    	xor    BYTE PTR [edx+0x1000000],ch
     743:	9c                   	pushf  
     744:	f1                   	icebp  
     745:	00 00                	add    BYTE PTR [eax],al
     747:	00 07                	add    BYTE PTR [edi],al
     749:	45                   	inc    ebp
     74a:	02 00                	add    al,BYTE PTR [eax]
     74c:	00 01                	add    BYTE PTR [ecx],al
     74e:	09 9d 00 00 00 02    	or     DWORD PTR [ebp+0x2000000],ebx
     754:	91                   	xchg   ecx,eax
     755:	00 07                	add    BYTE PTR [edi],al
     757:	11 02                	adc    DWORD PTR [edx],eax
     759:	00 00                	add    BYTE PTR [eax],al
     75b:	01 09                	add    DWORD PTR [ecx],ecx
     75d:	9d                   	popf   
     75e:	00 00                	add    BYTE PTR [eax],al
     760:	00 02                	add    BYTE PTR [edx],al
     762:	91                   	xchg   ecx,eax
     763:	04 08                	add    al,0x8
     765:	12 04 00             	adc    al,BYTE PTR [eax+eax*1]
     768:	30 8e 00 00 00 09    	xor    BYTE PTR [esi+0x9000000],cl
     76e:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     771:	00 01                	add    BYTE PTR [ecx],al
     773:	0b 3a                	or     edi,DWORD PTR [edx]
     775:	00 00                	add    BYTE PTR [eax],al
     777:	00 02                	add    BYTE PTR [edx],al
     779:	91                   	xchg   ecx,eax
     77a:	6c                   	ins    BYTE PTR es:[edi],dx
     77b:	00 00                	add    BYTE PTR [eax],al
     77d:	0a 25 02 00 00 01    	or     ah,BYTE PTR ds:0x1000002
     783:	14 aa                	adc    al,0xaa
     785:	04 00                	add    al,0x0
     787:	30 c1                	xor    cl,al
     789:	01 00                	add    DWORD PTR [eax],eax
     78b:	00 01                	add    BYTE PTR [ecx],al
     78d:	9c                   	pushf  
     78e:	65 01 00             	add    DWORD PTR gs:[eax],eax
     791:	00 07                	add    BYTE PTR [edi],al
     793:	45                   	inc    ebp
     794:	02 00                	add    al,BYTE PTR [eax]
     796:	00 01                	add    BYTE PTR [ecx],al
     798:	14 9d                	adc    al,0x9d
     79a:	00 00                	add    BYTE PTR [eax],al
     79c:	00 02                	add    BYTE PTR [edx],al
     79e:	91                   	xchg   ecx,eax
     79f:	00 07                	add    BYTE PTR [edi],al
     7a1:	11 02                	adc    DWORD PTR [edx],eax
     7a3:	00 00                	add    BYTE PTR [eax],al
     7a5:	01 14 9d 00 00 00 02 	add    DWORD PTR [ebx*4+0x2000000],edx
     7ac:	91                   	xchg   ecx,eax
     7ad:	04 0b                	add    al,0xb
     7af:	17                   	pop    ss
     7b0:	02 00                	add    al,BYTE PTR [eax]
     7b2:	00 01                	add    BYTE PTR [ecx],al
     7b4:	16                   	push   ss
     7b5:	56                   	push   esi
     7b6:	00 00                	add    BYTE PTR [eax],al
     7b8:	00 02                	add    BYTE PTR [edx],al
     7ba:	91                   	xchg   ecx,eax
     7bb:	6c                   	ins    BYTE PTR es:[edi],dx
     7bc:	0c c3                	or     al,0xc3
     7be:	04 00                	add    al,0x0
     7c0:	30 eb                	xor    bl,ch
     7c2:	00 00                	add    BYTE PTR [eax],al
     7c4:	00 4c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],cl
     7c8:	00 09                	add    BYTE PTR [ecx],cl
     7ca:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     7cd:	00 01                	add    BYTE PTR [ecx],al
     7cf:	18 3a                	sbb    BYTE PTR [edx],bh
     7d1:	00 00                	add    BYTE PTR [eax],al
     7d3:	00 02                	add    BYTE PTR [edx],al
     7d5:	91                   	xchg   ecx,eax
     7d6:	68 00 08 ae 05       	push   0x5ae0800
     7db:	00 30                	add    BYTE PTR [eax],dh
     7dd:	b8 00 00 00 09       	mov    eax,0x9000000
     7e2:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     7e5:	00 01                	add    BYTE PTR [ecx],al
     7e7:	24 3a                	and    al,0x3a
     7e9:	00 00                	add    BYTE PTR [eax],al
     7eb:	00 02                	add    BYTE PTR [edx],al
     7ed:	91                   	xchg   ecx,eax
     7ee:	64 00 00             	add    BYTE PTR fs:[eax],al
     7f1:	0d 4b 00 00 00       	or     eax,0x4b
     7f6:	04 34                	add    al,0x34
     7f8:	56                   	push   esi
     7f9:	00 00                	add    BYTE PTR [eax],al
     7fb:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
     801:	30 0d b6 00 00 00    	xor    BYTE PTR ds:0xb6,cl
     807:	04 35                	add    al,0x35
     809:	56                   	push   esi
     80a:	00 00                	add    BYTE PTR [eax],al
     80c:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
     812:	30 0d 62 01 00 00    	xor    BYTE PTR ds:0x162,cl
     818:	04 36                	add    al,0x36
     81a:	56                   	push   esi
     81b:	00 00                	add    BYTE PTR [eax],al
     81d:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
     823:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
     829:	05 43 84 00 00       	add    eax,0x8443
     82e:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
     834:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
     83a:	05 44 ba 01 00       	add    eax,0x1ba44
     83f:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
     845:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     84b:	00 00                	add    BYTE PTR [eax],al
     84d:	a0 02 00 00 04       	mov    al,ds:0x4000002
     852:	00 3c 03             	add    BYTE PTR [ebx+eax*1],bh
     855:	00 00                	add    BYTE PTR [eax],al
     857:	04 01                	add    al,0x1
     859:	fb                   	sti    
     85a:	00 00                	add    BYTE PTR [eax],al
     85c:	00 0c 95 02 00 00 79 	add    BYTE PTR [edx*4+0x79000002],cl
     863:	00 00                	add    BYTE PTR [eax],al
     865:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
     869:	30 bd 00 00 00 03    	xor    BYTE PTR [ebp+0x3000000],bh
     86f:	05 00 00 02 01       	add    eax,0x1020000
     874:	06                   	push   es
     875:	64 00 00             	add    BYTE PTR fs:[eax],al
     878:	00 02                	add    BYTE PTR [edx],al
     87a:	01 06                	add    DWORD PTR [esi],eax
     87c:	5d                   	pop    ebp
     87d:	00 00                	add    BYTE PTR [eax],al
     87f:	00 02                	add    BYTE PTR [edx],al
     881:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     887:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     88e:	02 08                	add    cl,BYTE PTR [eax]
     890:	05 00 00 00 00       	add    eax,0x0
     895:	02 01                	add    al,BYTE PTR [ecx]
     897:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     89a:	00 00                	add    BYTE PTR [eax],al
     89c:	02 02                	add    al,BYTE PTR [edx]
     89e:	07                   	pop    es
     89f:	0e                   	push   cs
     8a0:	00 00                	add    BYTE PTR [eax],al
     8a2:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     8a5:	00 00                	add    BYTE PTR [eax],al
     8a7:	00 02                	add    BYTE PTR [edx],al
     8a9:	34 61                	xor    al,0x61
     8ab:	00 00                	add    BYTE PTR [eax],al
     8ad:	00 02                	add    BYTE PTR [edx],al
     8af:	04 07                	add    al,0x7
     8b1:	3e 00 00             	add    BYTE PTR ds:[eax],al
     8b4:	00 02                	add    BYTE PTR [edx],al
     8b6:	08 07                	or     BYTE PTR [edi],al
     8b8:	34 00                	xor    al,0x0
     8ba:	00 00                	add    BYTE PTR [eax],al
     8bc:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     8c3:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     8c6:	a2 00 00 00 02       	mov    ds:0x2000000,al
     8cb:	01 02                	add    DWORD PTR [edx],eax
     8cd:	9c                   	pushf  
     8ce:	00 00                	add    BYTE PTR [eax],al
     8d0:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     8d3:	00 00                	add    BYTE PTR [eax],al
     8d5:	00 03                	add    BYTE PTR [ebx],al
     8d7:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     8da:	00 00                	add    BYTE PTR [eax],al
     8dc:	05 04 95 00 00       	add    eax,0x9504
     8e1:	00 06                	add    BYTE PTR [esi],al
     8e3:	25 00 00 00 07       	and    eax,0x7000000
     8e8:	eb 02                	jmp    8ec <sysEnter_Vector-0x12f714>
     8ea:	00 00                	add    BYTE PTR [eax],al
     8ec:	04 61                	add    al,0x61
     8ee:	00 00                	add    BYTE PTR [eax],al
     8f0:	00 06                	add    BYTE PTR [esi],al
     8f2:	15 42 01 00 00       	adc    eax,0x142
     8f7:	08 43 03             	or     BYTE PTR [ebx+0x3],al
     8fa:	00 00                	add    BYTE PTR [eax],al
     8fc:	00 08                	add    BYTE PTR [eax],cl
     8fe:	7b 03                	jnp    903 <sysEnter_Vector-0x12f6fd>
     900:	00 00                	add    BYTE PTR [eax],al
     902:	01 08                	add    DWORD PTR [eax],ecx
     904:	67 02 00             	add    al,BYTE PTR [bx+si]
     907:	00 02                	add    BYTE PTR [edx],al
     909:	08 dd                	or     ch,bl
     90b:	02 00                	add    al,BYTE PTR [eax]
     90d:	00 03                	add    BYTE PTR [ebx],al
     90f:	08 5a 02             	or     BYTE PTR [edx+0x2],bl
     912:	00 00                	add    BYTE PTR [eax],al
     914:	04 08                	add    al,0x8
     916:	95                   	xchg   ebp,eax
     917:	03 00                	add    eax,DWORD PTR [eax]
     919:	00 05 08 cb 03 00    	add    BYTE PTR ds:0x3cb08,al
     91f:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     922:	36 03 00             	add    eax,DWORD PTR ss:[eax]
     925:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     928:	da 03                	fiadd  DWORD PTR [ebx]
     92a:	00 00                	add    BYTE PTR [eax],al
     92c:	61                   	popa   
     92d:	08 c9                	or     cl,cl
     92f:	02 00                	add    al,BYTE PTR [eax]
     931:	00 97 09 53 03 00    	add    BYTE PTR [edi+0x35309],dl
     937:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     93a:	09 29                	or     DWORD PTR [ecx],ebp
     93c:	03 00                	add    eax,DWORD PTR [eax]
     93e:	00 64 01 09          	add    BYTE PTR [ecx+eax*1+0x9],ah
     942:	bd 03 00 00 65       	mov    ebp,0x65000003
     947:	01 09                	add    DWORD PTR [ecx],ecx
     949:	bb 02 00 00 66       	mov    ebx,0x66000002
     94e:	01 09                	add    DWORD PTR [ecx],ecx
     950:	f2 03 00             	repnz add eax,DWORD PTR [eax]
     953:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     956:	09 01                	or     DWORD PTR [ecx],eax
     958:	03 00                	add    eax,DWORD PTR [eax]
     95a:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     95d:	09 a0 02 00 00 69    	or     DWORD PTR [eax+0x69000002],esp
     963:	01 09                	add    DWORD PTR [ecx],ecx
     965:	6a 03                	push   0x3
     967:	00 00                	add    BYTE PTR [eax],al
     969:	70 01                	jo     96c <sysEnter_Vector-0x12f694>
     96b:	09 a3 03 00 00 00    	or     DWORD PTR [ebx+0x3],esp
     971:	03 09                	add    ecx,DWORD PTR [ecx]
     973:	0e                   	push   cs
     974:	03 00                	add    eax,DWORD PTR [eax]
     976:	00 01                	add    BYTE PTR [ecx],al
     978:	03 09                	add    ecx,DWORD PTR [ecx]
     97a:	af                   	scas   eax,DWORD PTR es:[edi]
     97b:	02 00                	add    al,BYTE PTR [eax]
     97d:	00 02                	add    BYTE PTR [edx],al
     97f:	03 09                	add    ecx,DWORD PTR [ecx]
     981:	74 02                	je     985 <sysEnter_Vector-0x12f67b>
     983:	00 00                	add    BYTE PTR [eax],al
     985:	03 03                	add    eax,DWORD PTR [ebx]
     987:	09 84 02 00 00 04 03 	or     DWORD PTR [edx+eax*1+0x3040000],eax
     98e:	00 02                	add    BYTE PTR [edx],al
     990:	04 07                	add    al,0x7
     992:	39 00                	cmp    DWORD PTR [eax],eax
     994:	00 00                	add    BYTE PTR [eax],al
     996:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     999:	e8 00 00 00 0a       	call   a00099e <sysEnter_Vector+0x9ed099e>
     99e:	04 05                	add    al,0x5
     9a0:	04 25                	add    al,0x25
     9a2:	00 00                	add    BYTE PTR [eax],al
     9a4:	00 0b                	add    BYTE PTR [ebx],cl
     9a6:	ed                   	in     eax,dx
     9a7:	03 00                	add    eax,DWORD PTR [eax]
     9a9:	00 01                	add    BYTE PTR [ecx],al
     9ab:	09 50 01             	or     DWORD PTR [eax+0x1],edx
     9ae:	00 00                	add    BYTE PTR [eax],al
     9b0:	6c                   	ins    BYTE PTR es:[edi],dx
     9b1:	06                   	push   es
     9b2:	00 30                	add    BYTE PTR [eax],dh
     9b4:	2d 00 00 00 01       	sub    eax,0x1000000
     9b9:	9c                   	pushf  
     9ba:	8e 01                	mov    es,WORD PTR [ecx]
     9bc:	00 00                	add    BYTE PTR [eax],al
     9be:	0c e3                	or     al,0xe3
     9c0:	08 00                	or     BYTE PTR [eax],al
     9c2:	00 01                	add    BYTE PTR [ecx],al
     9c4:	09 52 01             	or     DWORD PTR [edx+0x1],edx
     9c7:	00 00                	add    BYTE PTR [eax],al
     9c9:	02 91 00 0c 91 08    	add    dl,BYTE PTR [ecx+0x8910c00]
     9cf:	00 00                	add    BYTE PTR [eax],al
     9d1:	01 09                	add    DWORD PTR [ecx],ecx
     9d3:	8f 00                	pop    DWORD PTR [eax]
     9d5:	00 00                	add    BYTE PTR [eax],al
     9d7:	02 91 04 00 0d 54    	add    dl,BYTE PTR [ecx+0x540d0004]
     9dd:	02 00                	add    al,BYTE PTR [eax]
     9df:	00 01                	add    BYTE PTR [ecx],al
     9e1:	0e                   	push   cs
     9e2:	99                   	cdq    
     9e3:	06                   	push   es
     9e4:	00 30                	add    BYTE PTR [eax],dh
     9e6:	2a 00                	sub    al,BYTE PTR [eax]
     9e8:	00 00                	add    BYTE PTR [eax],al
     9ea:	01 9c b2 01 00 00 0c 	add    DWORD PTR [edx+esi*4+0xc000001],ebx
     9f1:	b1 03                	mov    cl,0x3
     9f3:	00 00                	add    BYTE PTR [eax],al
     9f5:	01 0e                	add    DWORD PTR [esi],ecx
     9f7:	50                   	push   eax
     9f8:	01 00                	add    DWORD PTR [eax],eax
     9fa:	00 02                	add    BYTE PTR [edx],al
     9fc:	91                   	xchg   ecx,eax
     9fd:	00 00                	add    BYTE PTR [eax],al
     9ff:	0b fc                	or     edi,esp
     a01:	02 00                	add    al,BYTE PTR [eax]
     a03:	00 01                	add    BYTE PTR [ecx],al
     a05:	13 3a                	adc    edi,DWORD PTR [edx]
     a07:	00 00                	add    BYTE PTR [eax],al
     a09:	00 c3                	add    bl,al
     a0b:	06                   	push   es
     a0c:	00 30                	add    BYTE PTR [eax],dh
     a0e:	35 00 00 00 01       	xor    eax,0x1000000
     a13:	9c                   	pushf  
     a14:	04 02                	add    al,0x2
     a16:	00 00                	add    BYTE PTR [eax],al
     a18:	0c b1                	or     al,0xb1
     a1a:	03 00                	add    eax,DWORD PTR [eax]
     a1c:	00 01                	add    BYTE PTR [ecx],al
     a1e:	13 50 01             	adc    edx,DWORD PTR [eax+0x1]
     a21:	00 00                	add    BYTE PTR [eax],al
     a23:	02 91 00 0c 8e 03    	add    dl,BYTE PTR [ecx+0x38e0c00]
     a29:	00 00                	add    BYTE PTR [eax],al
     a2b:	01 13                	add    DWORD PTR [ebx],edx
     a2d:	50                   	push   eax
     a2e:	01 00                	add    DWORD PTR [eax],eax
     a30:	00 02                	add    BYTE PTR [edx],al
     a32:	91                   	xchg   ecx,eax
     a33:	04 0c                	add    al,0xc
     a35:	b8 03 00 00 01       	mov    eax,0x1000003
     a3a:	13 3a                	adc    edi,DWORD PTR [edx]
     a3c:	00 00                	add    BYTE PTR [eax],al
     a3e:	00 02                	add    BYTE PTR [edx],al
     a40:	91                   	xchg   ecx,eax
     a41:	08 0c f5 02 00 00 01 	or     BYTE PTR [esi*8+0x1000002],cl
     a48:	13 3a                	adc    edi,DWORD PTR [edx]
     a4a:	00 00                	add    BYTE PTR [eax],al
     a4c:	00 02                	add    BYTE PTR [edx],al
     a4e:	91                   	xchg   ecx,eax
     a4f:	0c 00                	or     al,0x0
     a51:	0b 4d 02             	or     ecx,DWORD PTR [ebp+0x2]
     a54:	00 00                	add    BYTE PTR [eax],al
     a56:	01 18                	add    DWORD PTR [eax],ebx
     a58:	3a 00                	cmp    al,BYTE PTR [eax]
     a5a:	00 00                	add    BYTE PTR [eax],al
     a5c:	f8                   	clc    
     a5d:	06                   	push   es
     a5e:	00 30                	add    BYTE PTR [eax],dh
     a60:	31 00                	xor    DWORD PTR [eax],eax
     a62:	00 00                	add    BYTE PTR [eax],al
     a64:	01 9c 48 02 00 00 0c 	add    DWORD PTR [eax+ecx*2+0xc000002],ebx
     a6b:	e3 08                	jecxz  a75 <sysEnter_Vector-0x12f58b>
     a6d:	00 00                	add    BYTE PTR [eax],al
     a6f:	01 18                	add    DWORD PTR [eax],ebx
     a71:	52                   	push   edx
     a72:	01 00                	add    DWORD PTR [eax],eax
     a74:	00 02                	add    BYTE PTR [edx],al
     a76:	91                   	xchg   ecx,eax
     a77:	00 0c 8e             	add    BYTE PTR [esi+ecx*4],cl
     a7a:	03 00                	add    eax,DWORD PTR [eax]
     a7c:	00 01                	add    BYTE PTR [ecx],al
     a7e:	18 52 01             	sbb    BYTE PTR [edx+0x1],dl
     a81:	00 00                	add    BYTE PTR [eax],al
     a83:	02 91 04 0c 1d 03    	add    dl,BYTE PTR [ecx+0x31d0c04]
     a89:	00 00                	add    BYTE PTR [eax],al
     a8b:	01 18                	add    DWORD PTR [eax],ebx
     a8d:	3a 00                	cmp    al,BYTE PTR [eax]
     a8f:	00 00                	add    BYTE PTR [eax],al
     a91:	02 91 08 00 0e 4b    	add    dl,BYTE PTR [ecx+0x4b0e0008]
     a97:	00 00                	add    BYTE PTR [eax],al
     a99:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     a9c:	56                   	push   esi
     a9d:	00 00                	add    BYTE PTR [eax],al
     a9f:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
     aa5:	30 0e                	xor    BYTE PTR [esi],cl
     aa7:	b6 00                	mov    dh,0x0
     aa9:	00 00                	add    BYTE PTR [eax],al
     aab:	04 35                	add    al,0x35
     aad:	56                   	push   esi
     aae:	00 00                	add    BYTE PTR [eax],al
     ab0:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
     ab6:	30 0e                	xor    BYTE PTR [esi],cl
     ab8:	62 01                	bound  eax,QWORD PTR [ecx]
     aba:	00 00                	add    BYTE PTR [eax],al
     abc:	04 36                	add    al,0x36
     abe:	56                   	push   esi
     abf:	00 00                	add    BYTE PTR [eax],al
     ac1:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
     ac7:	30 0e                	xor    BYTE PTR [esi],cl
     ac9:	54                   	push   esp
     aca:	00 00                	add    BYTE PTR [eax],al
     acc:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
     ad2:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
     ad8:	30 0e                	xor    BYTE PTR [esi],cl
     ada:	28 00                	sub    BYTE PTR [eax],al
     adc:	00 00                	add    BYTE PTR [eax],al
     ade:	05 44 9d 02 00       	add    eax,0x29d44
     ae3:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
     ae9:	30 05 04 52 01 00    	xor    BYTE PTR ds:0x15204,al
     aef:	00 00                	add    BYTE PTR [eax],al
     af1:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     af2:	02 00                	add    al,BYTE PTR [eax]
     af4:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     af7:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     afa:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     afd:	fb                   	sti    
     afe:	00 00                	add    BYTE PTR [eax],al
     b00:	00 0c 1d 04 00 00 79 	add    BYTE PTR [ebx*1+0x79000004],cl
     b07:	00 00                	add    BYTE PTR [eax],al
     b09:	00 2c 07             	add    BYTE PTR [edi+eax*1],ch
     b0c:	00 30                	add    BYTE PTR [eax],dh
     b0e:	52                   	push   edx
     b0f:	01 00                	add    DWORD PTR [eax],eax
     b11:	00 05 06 00 00 02    	add    BYTE PTR ds:0x2000006,al
     b17:	01 06                	add    DWORD PTR [esi],eax
     b19:	64 00 00             	add    BYTE PTR fs:[eax],al
     b1c:	00 02                	add    BYTE PTR [edx],al
     b1e:	01 06                	add    DWORD PTR [esi],eax
     b20:	5d                   	pop    ebp
     b21:	00 00                	add    BYTE PTR [eax],al
     b23:	00 02                	add    BYTE PTR [edx],al
     b25:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
     b2b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b32:	02 08                	add    cl,BYTE PTR [eax]
     b34:	05 00 00 00 00       	add    eax,0x0
     b39:	02 01                	add    al,BYTE PTR [ecx]
     b3b:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     b3e:	00 00                	add    BYTE PTR [eax],al
     b40:	02 02                	add    al,BYTE PTR [edx]
     b42:	07                   	pop    es
     b43:	0e                   	push   cs
     b44:	00 00                	add    BYTE PTR [eax],al
     b46:	00 04 70             	add    BYTE PTR [eax+esi*2],al
     b49:	00 00                	add    BYTE PTR [eax],al
     b4b:	00 02                	add    BYTE PTR [edx],al
     b4d:	34 61                	xor    al,0x61
     b4f:	00 00                	add    BYTE PTR [eax],al
     b51:	00 02                	add    BYTE PTR [edx],al
     b53:	04 07                	add    al,0x7
     b55:	3e 00 00             	add    BYTE PTR ds:[eax],al
     b58:	00 02                	add    BYTE PTR [edx],al
     b5a:	08 07                	or     BYTE PTR [edi],al
     b5c:	34 00                	xor    al,0x0
     b5e:	00 00                	add    BYTE PTR [eax],al
     b60:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b67:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     b6a:	a2 00 00 00 02       	mov    ds:0x2000000,al
     b6f:	01 02                	add    DWORD PTR [edx],eax
     b71:	9c                   	pushf  
     b72:	00 00                	add    BYTE PTR [eax],al
     b74:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     b77:	00 00                	add    BYTE PTR [eax],al
     b79:	00 03                	add    BYTE PTR [ebx],al
     b7b:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     b7e:	00 00                	add    BYTE PTR [eax],al
     b80:	05 eb 02 00 00       	add    eax,0x2eb
     b85:	04 61                	add    al,0x61
     b87:	00 00                	add    BYTE PTR [eax],al
     b89:	00 06                	add    BYTE PTR [esi],al
     b8b:	15 37 01 00 00       	adc    eax,0x137
     b90:	06                   	push   es
     b91:	43                   	inc    ebx
     b92:	03 00                	add    eax,DWORD PTR [eax]
     b94:	00 00                	add    BYTE PTR [eax],al
     b96:	06                   	push   es
     b97:	7b 03                	jnp    b9c <sysEnter_Vector-0x12f464>
     b99:	00 00                	add    BYTE PTR [eax],al
     b9b:	01 06                	add    DWORD PTR [esi],eax
     b9d:	67 02 00             	add    al,BYTE PTR [bx+si]
     ba0:	00 02                	add    BYTE PTR [edx],al
     ba2:	06                   	push   es
     ba3:	dd 02                	fld    QWORD PTR [edx]
     ba5:	00 00                	add    BYTE PTR [eax],al
     ba7:	03 06                	add    eax,DWORD PTR [esi]
     ba9:	5a                   	pop    edx
     baa:	02 00                	add    al,BYTE PTR [eax]
     bac:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     baf:	95                   	xchg   ebp,eax
     bb0:	03 00                	add    eax,DWORD PTR [eax]
     bb2:	00 05 06 cb 03 00    	add    BYTE PTR ds:0x3cb06,al
     bb8:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     bbb:	36 03 00             	add    eax,DWORD PTR ss:[eax]
     bbe:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
     bc1:	da 03                	fiadd  DWORD PTR [ebx]
     bc3:	00 00                	add    BYTE PTR [eax],al
     bc5:	61                   	popa   
     bc6:	06                   	push   es
     bc7:	c9                   	leave  
     bc8:	02 00                	add    al,BYTE PTR [eax]
     bca:	00 97 07 53 03 00    	add    BYTE PTR [edi+0x35307],dl
     bd0:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     bd3:	07                   	pop    es
     bd4:	29 03                	sub    DWORD PTR [ebx],eax
     bd6:	00 00                	add    BYTE PTR [eax],al
     bd8:	64 01 07             	add    DWORD PTR fs:[edi],eax
     bdb:	bd 03 00 00 65       	mov    ebp,0x65000003
     be0:	01 07                	add    DWORD PTR [edi],eax
     be2:	bb 02 00 00 66       	mov    ebx,0x66000002
     be7:	01 07                	add    DWORD PTR [edi],eax
     be9:	f2 03 00             	repnz add eax,DWORD PTR [eax]
     bec:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     bef:	07                   	pop    es
     bf0:	01 03                	add    DWORD PTR [ebx],eax
     bf2:	00 00                	add    BYTE PTR [eax],al
     bf4:	68 01 07 a0 02       	push   0x2a00701
     bf9:	00 00                	add    BYTE PTR [eax],al
     bfb:	69 01 07 6a 03 00    	imul   eax,DWORD PTR [ecx],0x36a07
     c01:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     c04:	07                   	pop    es
     c05:	a3 03 00 00 00       	mov    ds:0x3,eax
     c0a:	03 07                	add    eax,DWORD PTR [edi]
     c0c:	0e                   	push   cs
     c0d:	03 00                	add    eax,DWORD PTR [eax]
     c0f:	00 01                	add    BYTE PTR [ecx],al
     c11:	03 07                	add    eax,DWORD PTR [edi]
     c13:	af                   	scas   eax,DWORD PTR es:[edi]
     c14:	02 00                	add    al,BYTE PTR [eax]
     c16:	00 02                	add    BYTE PTR [edx],al
     c18:	03 07                	add    eax,DWORD PTR [edi]
     c1a:	74 02                	je     c1e <sysEnter_Vector-0x12f3e2>
     c1c:	00 00                	add    BYTE PTR [eax],al
     c1e:	03 03                	add    eax,DWORD PTR [ebx]
     c20:	07                   	pop    es
     c21:	84 02                	test   BYTE PTR [edx],al
     c23:	00 00                	add    BYTE PTR [eax],al
     c25:	04 03                	add    al,0x3
     c27:	00 02                	add    BYTE PTR [edx],al
     c29:	04 07                	add    al,0x7
     c2b:	39 00                	cmp    DWORD PTR [eax],eax
     c2d:	00 00                	add    BYTE PTR [eax],al
     c2f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     c32:	e8 00 00 00 08       	call   8000c37 <sysEnter_Vector+0x7ed0c37>
     c37:	04 25                	add    al,0x25
     c39:	00 00                	add    BYTE PTR [eax],al
     c3b:	00 09                	add    BYTE PTR [ecx],cl
     c3d:	4c                   	dec    esp
     c3e:	04 00                	add    al,0x0
     c40:	00 01                	add    BYTE PTR [ecx],al
     c42:	0f 2c 07             	cvttps2pi mm0,QWORD PTR [edi]
     c45:	00 30                	add    BYTE PTR [eax],dh
     c47:	26 00 00             	add    BYTE PTR es:[eax],al
     c4a:	00 01                	add    BYTE PTR [ecx],al
     c4c:	9c                   	pushf  
     c4d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c4e:	01 00                	add    DWORD PTR [eax],eax
     c50:	00 0a                	add    BYTE PTR [edx],cl
     c52:	8e 03                	mov    es,WORD PTR [ebx]
     c54:	00 00                	add    BYTE PTR [eax],al
     c56:	01 0f                	add    DWORD PTR [edi],ecx
     c58:	45                   	inc    ebp
     c59:	01 00                	add    DWORD PTR [eax],eax
     c5b:	00 02                	add    BYTE PTR [edx],al
     c5d:	91                   	xchg   ecx,eax
     c5e:	00 00                	add    BYTE PTR [eax],al
     c60:	09 47 04             	or     DWORD PTR [edi+0x4],eax
     c63:	00 00                	add    BYTE PTR [eax],al
     c65:	01 14 52             	add    DWORD PTR [edx+edx*2],edx
     c68:	07                   	pop    es
     c69:	00 30                	add    BYTE PTR [eax],dh
     c6b:	43                   	inc    ebx
     c6c:	00 00                	add    BYTE PTR [eax],al
     c6e:	00 01                	add    BYTE PTR [ecx],al
     c70:	9c                   	pushf  
     c71:	9f                   	lahf   
     c72:	01 00                	add    DWORD PTR [eax],eax
     c74:	00 0b                	add    BYTE PTR [ebx],cl
     c76:	63 00                	arpl   WORD PTR [eax],ax
     c78:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     c7f:	91                   	xchg   ecx,eax
     c80:	60                   	pusha  
     c81:	0c 8e                	or     al,0x8e
     c83:	03 00                	add    eax,DWORD PTR [eax]
     c85:	00 01                	add    BYTE PTR [ecx],al
     c87:	16                   	push   ss
     c88:	9f                   	lahf   
     c89:	01 00                	add    DWORD PTR [eax],eax
     c8b:	00 02                	add    BYTE PTR [edx],al
     c8d:	91                   	xchg   ecx,eax
     c8e:	72 00                	jb     c90 <sysEnter_Vector-0x12f370>
     c90:	0d 25 00 00 00       	or     eax,0x25
     c95:	af                   	scas   eax,DWORD PTR es:[edi]
     c96:	01 00                	add    DWORD PTR [eax],eax
     c98:	00 0e                	add    BYTE PTR [esi],cl
     c9a:	3e 01 00             	add    DWORD PTR ds:[eax],eax
     c9d:	00 01                	add    BYTE PTR [ecx],al
     c9f:	00 0f                	add    BYTE PTR [edi],cl
     ca1:	36                   	ss
     ca2:	04 00                	add    al,0x0
     ca4:	00 01                	add    BYTE PTR [ecx],al
     ca6:	1d 25 00 00 00       	sbb    eax,0x25
     cab:	95                   	xchg   ebp,eax
     cac:	07                   	pop    es
     cad:	00 30                	add    BYTE PTR [eax],dh
     caf:	2f                   	das    
     cb0:	00 00                	add    BYTE PTR [eax],al
     cb2:	00 01                	add    BYTE PTR [ecx],al
     cb4:	9c                   	pushf  
     cb5:	d5 01                	aad    0x1
     cb7:	00 00                	add    BYTE PTR [eax],al
     cb9:	10 63 00             	adc    BYTE PTR [ebx+0x0],ah
     cbc:	01 1f                	add    DWORD PTR [edi],ebx
     cbe:	25 00 00 00 02       	and    eax,0x2000000
     cc3:	91                   	xchg   ecx,eax
     cc4:	73 00                	jae    cc6 <sysEnter_Vector-0x12f33a>
     cc6:	11 42 04             	adc    DWORD PTR [edx+0x4],eax
     cc9:	00 00                	add    BYTE PTR [eax],al
     ccb:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     cd1:	c4 07                	les    eax,FWORD PTR [edi]
     cd3:	00 30                	add    BYTE PTR [eax],dh
     cd5:	ba 00 00 00 01       	mov    edx,0x1000000
     cda:	9c                   	pushf  
     cdb:	4e                   	dec    esi
     cdc:	02 00                	add    al,BYTE PTR [eax]
     cde:	00 0a                	add    BYTE PTR [edx],cl
     ce0:	8e 03                	mov    es,WORD PTR [ebx]
     ce2:	00 00                	add    BYTE PTR [eax],al
     ce4:	01 25 45 01 00 00    	add    DWORD PTR ds:0x145,esp
     cea:	02 91 00 0a 3b 04    	add    dl,BYTE PTR [ecx+0x43b0a00]
     cf0:	00 00                	add    BYTE PTR [eax],al
     cf2:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     cf8:	02 91 04 0a 07 04    	add    dl,BYTE PTR [ecx+0x4070a04]
     cfe:	00 00                	add    BYTE PTR [eax],al
     d00:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d06:	02 91 08 0c 2f 04    	add    dl,BYTE PTR [ecx+0x42f0c08]
     d0c:	00 00                	add    BYTE PTR [eax],al
     d0e:	01 27                	add    DWORD PTR [edi],esp
     d10:	25 00 00 00 02       	and    eax,0x2000000
     d15:	91                   	xchg   ecx,eax
     d16:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     d19:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     d1b:	00 01                	add    BYTE PTR [ecx],al
     d1d:	28 3a                	sub    BYTE PTR [edx],bh
     d1f:	00 00                	add    BYTE PTR [eax],al
     d21:	00 02                	add    BYTE PTR [edx],al
     d23:	91                   	xchg   ecx,eax
     d24:	6c                   	ins    BYTE PTR es:[edi],dx
     d25:	0c 18                	or     al,0x18
     d27:	04 00                	add    al,0x0
     d29:	00 01                	add    BYTE PTR [ecx],al
     d2b:	29 9f 01 00 00 02    	sub    DWORD PTR [edi+0x2000001],ebx
     d31:	91                   	xchg   ecx,eax
     d32:	69 12 0e 04 00 00    	imul   edx,DWORD PTR [edx],0x40e
     d38:	01 2e                	add    DWORD PTR [esi],ebp
     d3a:	01 08                	add    DWORD PTR [eax],ecx
     d3c:	00 30                	add    BYTE PTR [eax],dh
     d3e:	00 13                	add    BYTE PTR [ebx],dl
     d40:	4b                   	dec    ebx
     d41:	00 00                	add    BYTE PTR [eax],al
     d43:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     d46:	56                   	push   esi
     d47:	00 00                	add    BYTE PTR [eax],al
     d49:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
     d4f:	30 13                	xor    BYTE PTR [ebx],dl
     d51:	b6 00                	mov    dh,0x0
     d53:	00 00                	add    BYTE PTR [eax],al
     d55:	04 35                	add    al,0x35
     d57:	56                   	push   esi
     d58:	00 00                	add    BYTE PTR [eax],al
     d5a:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
     d60:	30 13                	xor    BYTE PTR [ebx],dl
     d62:	62 01                	bound  eax,QWORD PTR [ecx]
     d64:	00 00                	add    BYTE PTR [eax],al
     d66:	04 36                	add    al,0x36
     d68:	56                   	push   esi
     d69:	00 00                	add    BYTE PTR [eax],al
     d6b:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
     d71:	30 13                	xor    BYTE PTR [ebx],dl
     d73:	54                   	push   esp
     d74:	00 00                	add    BYTE PTR [eax],al
     d76:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
     d7c:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
     d82:	30 13                	xor    BYTE PTR [ebx],dl
     d84:	28 00                	sub    BYTE PTR [eax],al
     d86:	00 00                	add    BYTE PTR [eax],al
     d88:	05 44 a3 02 00       	add    eax,0x2a344
     d8d:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
     d93:	30 08                	xor    BYTE PTR [eax],cl
     d95:	04 45                	add    al,0x45
     d97:	01 00                	add    DWORD PTR [eax],eax
     d99:	00 00                	add    BYTE PTR [eax],al
     d9b:	74 06                	je     da3 <sysEnter_Vector-0x12f25d>
     d9d:	00 00                	add    BYTE PTR [eax],al
     d9f:	04 00                	add    al,0x0
     da1:	22 05 00 00 04 01    	and    al,BYTE PTR ds:0x1040000
     da7:	fb                   	sti    
     da8:	00 00                	add    BYTE PTR [eax],al
     daa:	00 0c 9d 05 00 00 79 	add    BYTE PTR [ebx*4+0x79000005],cl
     db1:	00 00                	add    BYTE PTR [eax],al
     db3:	00 80 08 00 30 c7    	add    BYTE PTR [eax-0x38cffff8],al
     db9:	03 00                	add    eax,DWORD PTR [eax]
     dbb:	00 39                	add    BYTE PTR [ecx],bh
     dbd:	07                   	pop    es
     dbe:	00 00                	add    BYTE PTR [eax],al
     dc0:	02 43 05             	add    al,BYTE PTR [ebx+0x5]
     dc3:	00 00                	add    BYTE PTR [eax],al
     dc5:	02 28                	add    ch,BYTE PTR [eax]
     dc7:	30 00                	xor    BYTE PTR [eax],al
     dc9:	00 00                	add    BYTE PTR [eax],al
     dcb:	03 04 95 04 00 00 3a 	add    eax,DWORD PTR [edx*4+0x3a000004]
     dd2:	00 00                	add    BYTE PTR [eax],al
     dd4:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     dd7:	06                   	push   es
     dd8:	64 00 00             	add    BYTE PTR fs:[eax],al
     ddb:	00 02                	add    BYTE PTR [edx],al
     ddd:	4a                   	dec    edx
     dde:	05 00 00 02 62       	add    eax,0x62020000
     de3:	25 00 00 00 04       	and    eax,0x4000000
     de8:	01 06                	add    DWORD PTR [esi],eax
     dea:	5d                   	pop    ebp
     deb:	00 00                	add    BYTE PTR [eax],al
     ded:	00 04 02             	add    BYTE PTR [edx+eax*1],al
     df0:	05 f1 00 00 00       	add    eax,0xf1
     df5:	05 04 05 69 6e       	add    eax,0x6e690504
     dfa:	74 00                	je     dfc <sysEnter_Vector-0x12f204>
     dfc:	04 08                	add    al,0x8
     dfe:	05 00 00 00 00       	add    eax,0x0
     e03:	04 01                	add    al,0x1
     e05:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     e08:	00 00                	add    BYTE PTR [eax],al
     e0a:	04 02                	add    al,0x2
     e0c:	07                   	pop    es
     e0d:	0e                   	push   cs
     e0e:	00 00                	add    BYTE PTR [eax],al
     e10:	00 02                	add    BYTE PTR [edx],al
     e12:	70 00                	jo     e14 <sysEnter_Vector-0x12f1ec>
     e14:	00 00                	add    BYTE PTR [eax],al
     e16:	03 34 81             	add    esi,DWORD PTR [ecx+eax*4]
     e19:	00 00                	add    BYTE PTR [eax],al
     e1b:	00 04 04             	add    BYTE PTR [esp+eax*1],al
     e1e:	07                   	pop    es
     e1f:	3e 00 00             	add    BYTE PTR ds:[eax],al
     e22:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     e25:	07                   	pop    es
     e26:	34 00                	xor    al,0x0
     e28:	00 00                	add    BYTE PTR [eax],al
     e2a:	02 60 04             	add    ah,BYTE PTR [eax+0x4]
     e2d:	00 00                	add    BYTE PTR [eax],al
     e2f:	04 d8                	add    al,0xd8
     e31:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e37:	05 05 00 00 00       	add    eax,0x5
     e3c:	04 0c                	add    al,0xc
     e3e:	04 a2                	add    al,0xa2
     e40:	00 00                	add    BYTE PTR [eax],al
     e42:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e45:	02 9c 00 00 00 02 69 	add    bl,BYTE PTR [eax+eax*1+0x69020000]
     e4c:	00 00                	add    BYTE PTR [eax],al
     e4e:	00 05 2a 9a 00 00    	add    BYTE PTR ds:0x9a2a,al
     e54:	00 06                	add    BYTE PTR [esi],al
     e56:	74 6d                	je     ec5 <sysEnter_Vector-0x12f13b>
     e58:	00 2c 05 2c 4a 01 00 	add    BYTE PTR [eax*1+0x14a2c],ch
     e5f:	00 07                	add    BYTE PTR [edi],al
     e61:	d0 05 00 00 05 2e    	rol    BYTE PTR ds:0x2e050000,1
     e67:	5a                   	pop    edx
     e68:	00 00                	add    BYTE PTR [eax],al
     e6a:	00 00                	add    BYTE PTR [eax],al
     e6c:	07                   	pop    es
     e6d:	2e                   	cs
     e6e:	05 00 00 05 2f       	add    eax,0x2f050000
     e73:	5a                   	pop    edx
     e74:	00 00                	add    BYTE PTR [eax],al
     e76:	00 04 07             	add    BYTE PTR [edi+eax*1],al
     e79:	58                   	pop    eax
     e7a:	04 00                	add    al,0x0
     e7c:	00 05 30 5a 00 00    	add    BYTE PTR ds:0x5a30,al
     e82:	00 08                	add    BYTE PTR [eax],cl
     e84:	07                   	pop    es
     e85:	bb 05 00 00 05       	mov    ebx,0x5000005
     e8a:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
     e8d:	00 00                	add    BYTE PTR [eax],al
     e8f:	0c 07                	or     al,0x7
     e91:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     e92:	04 00                	add    al,0x0
     e94:	00 05 32 5a 00 00    	add    BYTE PTR ds:0x5a32,al
     e9a:	00 10                	add    BYTE PTR [eax],dl
     e9c:	07                   	pop    es
     e9d:	ae                   	scas   al,BYTE PTR es:[edi]
     e9e:	04 00                	add    al,0x0
     ea0:	00 05 33 5a 00 00    	add    BYTE PTR ds:0x5a33,al
     ea6:	00 14 07             	add    BYTE PTR [edi+eax*1],dl
     ea9:	b3 05                	mov    bl,0x5
     eab:	00 00                	add    BYTE PTR [eax],al
     ead:	05 34 5a 00 00       	add    eax,0x5a34
     eb2:	00 18                	add    BYTE PTR [eax],bl
     eb4:	07                   	pop    es
     eb5:	3b 05 00 00 05 35    	cmp    eax,DWORD PTR ds:0x35050000
     ebb:	5a                   	pop    edx
     ebc:	00 00                	add    BYTE PTR [eax],al
     ebe:	00 1c 07             	add    BYTE PTR [edi+eax*1],bl
     ec1:	d9 04 00             	fld    DWORD PTR [eax+eax*1]
     ec4:	00 05 36 5a 00 00    	add    BYTE PTR ds:0x5a36,al
     eca:	00 20                	add    BYTE PTR [eax],ah
     ecc:	07                   	pop    es
     ecd:	7d 05                	jge    ed4 <sysEnter_Vector-0x12f12c>
     ecf:	00 00                	add    BYTE PTR [eax],al
     ed1:	05 37 9a 00 00       	add    eax,0x9a37
     ed6:	00 24 07             	add    BYTE PTR [edi+eax*1],ah
     ed9:	7d 04                	jge    edf <sysEnter_Vector-0x12f121>
     edb:	00 00                	add    BYTE PTR [eax],al
     edd:	05 38 4a 01 00       	add    eax,0x14a38
     ee2:	00 28                	add    BYTE PTR [eax],ch
     ee4:	00 08                	add    BYTE PTR [eax],cl
     ee6:	04 50                	add    al,0x50
     ee8:	01 00                	add    DWORD PTR [eax],eax
     eea:	00 09                	add    BYTE PTR [ecx],cl
     eec:	3a 00                	cmp    al,BYTE PTR [eax]
     eee:	00 00                	add    BYTE PTR [eax],al
     ef0:	0a eb                	or     ch,bl
     ef2:	02 00                	add    al,BYTE PTR [eax]
     ef4:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
     ef7:	00 00                	add    BYTE PTR [eax],al
     ef9:	00 08                	add    BYTE PTR [eax],cl
     efb:	15 fd 01 00 00       	adc    eax,0x1fd
     f00:	0b 43 03             	or     eax,DWORD PTR [ebx+0x3]
     f03:	00 00                	add    BYTE PTR [eax],al
     f05:	00 0b                	add    BYTE PTR [ebx],cl
     f07:	7b 03                	jnp    f0c <sysEnter_Vector-0x12f0f4>
     f09:	00 00                	add    BYTE PTR [eax],al
     f0b:	01 0b                	add    DWORD PTR [ebx],ecx
     f0d:	67 02 00             	add    al,BYTE PTR [bx+si]
     f10:	00 02                	add    BYTE PTR [edx],al
     f12:	0b dd                	or     ebx,ebp
     f14:	02 00                	add    al,BYTE PTR [eax]
     f16:	00 03                	add    BYTE PTR [ebx],al
     f18:	0b 5a 02             	or     ebx,DWORD PTR [edx+0x2]
     f1b:	00 00                	add    BYTE PTR [eax],al
     f1d:	04 0b                	add    al,0xb
     f1f:	95                   	xchg   ebp,eax
     f20:	03 00                	add    eax,DWORD PTR [eax]
     f22:	00 05 0b cb 03 00    	add    BYTE PTR ds:0x3cb0b,al
     f28:	00 4f 0b             	add    BYTE PTR [edi+0xb],cl
     f2b:	36 03 00             	add    eax,DWORD PTR ss:[eax]
     f2e:	00 59 0b             	add    BYTE PTR [ecx+0xb],bl
     f31:	da 03                	fiadd  DWORD PTR [ebx]
     f33:	00 00                	add    BYTE PTR [eax],al
     f35:	61                   	popa   
     f36:	0b c9                	or     ecx,ecx
     f38:	02 00                	add    al,BYTE PTR [eax]
     f3a:	00 97 0c 53 03 00    	add    BYTE PTR [edi+0x3530c],dl
     f40:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     f43:	0c 29                	or     al,0x29
     f45:	03 00                	add    eax,DWORD PTR [eax]
     f47:	00 64 01 0c          	add    BYTE PTR [ecx+eax*1+0xc],ah
     f4b:	bd 03 00 00 65       	mov    ebp,0x65000003
     f50:	01 0c bb             	add    DWORD PTR [ebx+edi*4],ecx
     f53:	02 00                	add    al,BYTE PTR [eax]
     f55:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     f58:	0c f2                	or     al,0xf2
     f5a:	03 00                	add    eax,DWORD PTR [eax]
     f5c:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     f5f:	0c 01                	or     al,0x1
     f61:	03 00                	add    eax,DWORD PTR [eax]
     f63:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     f66:	0c a0                	or     al,0xa0
     f68:	02 00                	add    al,BYTE PTR [eax]
     f6a:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     f6d:	0c 6a                	or     al,0x6a
     f6f:	03 00                	add    eax,DWORD PTR [eax]
     f71:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     f74:	0c a3                	or     al,0xa3
     f76:	03 00                	add    eax,DWORD PTR [eax]
     f78:	00 00                	add    BYTE PTR [eax],al
     f7a:	03 0c 0e             	add    ecx,DWORD PTR [esi+ecx*1]
     f7d:	03 00                	add    eax,DWORD PTR [eax]
     f7f:	00 01                	add    BYTE PTR [ecx],al
     f81:	03 0c af             	add    ecx,DWORD PTR [edi+ebp*4]
     f84:	02 00                	add    al,BYTE PTR [eax]
     f86:	00 02                	add    BYTE PTR [edx],al
     f88:	03 0c 74             	add    ecx,DWORD PTR [esp+esi*2]
     f8b:	02 00                	add    al,BYTE PTR [eax]
     f8d:	00 03                	add    BYTE PTR [ebx],al
     f8f:	03 0c 84             	add    ecx,DWORD PTR [esp+eax*4]
     f92:	02 00                	add    al,BYTE PTR [eax]
     f94:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     f97:	00 04 04             	add    BYTE PTR [esp+eax*1],al
     f9a:	07                   	pop    es
     f9b:	39 00                	cmp    DWORD PTR [eax],eax
     f9d:	00 00                	add    BYTE PTR [eax],al
     f9f:	04 04                	add    al,0x4
     fa1:	07                   	pop    es
     fa2:	e8 00 00 00 0d       	call   d000fa7 <sysEnter_Vector+0xced0fa7>
     fa7:	04 08                	add    al,0x8
     fa9:	04 3a                	add    al,0x3a
     fab:	00 00                	add    BYTE PTR [eax],al
     fad:	00 0e                	add    BYTE PTR [esi],cl
     faf:	12 05 00 00 01 10    	adc    al,BYTE PTR ds:0x10010000
     fb5:	5a                   	pop    edx
     fb6:	00 00                	add    BYTE PTR [eax],al
     fb8:	00 80 08 00 30 3a    	add    BYTE PTR [eax+0x3a300008],al
     fbe:	00 00                	add    BYTE PTR [eax],al
     fc0:	00 01                	add    BYTE PTR [ecx],al
     fc2:	9c                   	pushf  
     fc3:	81 02 00 00 0f d1    	add    DWORD PTR [edx],0xd10f0000
     fc9:	04 00                	add    al,0x0
     fcb:	00 01                	add    BYTE PTR [ecx],al
     fcd:	10 5a 00             	adc    BYTE PTR [edx+0x0],bl
     fd0:	00 00                	add    BYTE PTR [eax],al
     fd2:	02 91 00 0f 5a 05    	add    dl,BYTE PTR [ecx+0x55a0f00]
     fd8:	00 00                	add    BYTE PTR [eax],al
     fda:	01 10                	add    DWORD PTR [eax],edx
     fdc:	76 00                	jbe    fde <sysEnter_Vector-0x12f022>
     fde:	00 00                	add    BYTE PTR [eax],al
     fe0:	02 91 04 0f 61 05    	add    dl,BYTE PTR [ecx+0x5610f04]
     fe6:	00 00                	add    BYTE PTR [eax],al
     fe8:	01 10                	add    DWORD PTR [eax],edx
     fea:	76 00                	jbe    fec <sysEnter_Vector-0x12f014>
     fec:	00 00                	add    BYTE PTR [eax],al
     fee:	02 91 08 0f 68 05    	add    dl,BYTE PTR [ecx+0x5680f08]
     ff4:	00 00                	add    BYTE PTR [eax],al
     ff6:	01 10                	add    DWORD PTR [eax],edx
     ff8:	76 00                	jbe    ffa <sysEnter_Vector-0x12f006>
     ffa:	00 00                	add    BYTE PTR [eax],al
     ffc:	02 91 0c 0f 6f 05    	add    dl,BYTE PTR [ecx+0x56f0f0c]
    1002:	00 00                	add    BYTE PTR [eax],al
    1004:	01 10                	add    DWORD PTR [eax],edx
    1006:	76 00                	jbe    1008 <sysEnter_Vector-0x12eff8>
    1008:	00 00                	add    BYTE PTR [eax],al
    100a:	02 91 10 10 51 04    	add    dl,BYTE PTR [ecx+0x4511010]
    1010:	00 00                	add    BYTE PTR [eax],al
    1012:	01 12                	add    DWORD PTR [edx],edx
    1014:	5a                   	pop    edx
    1015:	00 00                	add    BYTE PTR [eax],al
    1017:	00 02                	add    BYTE PTR [edx],al
    1019:	91                   	xchg   ecx,eax
    101a:	6c                   	ins    BYTE PTR es:[edi],dx
    101b:	00 0e                	add    BYTE PTR [esi],cl
    101d:	06                   	push   es
    101e:	05 00 00 01 17       	add    eax,0x17010000
    1023:	5a                   	pop    edx
    1024:	00 00                	add    BYTE PTR [eax],al
    1026:	00 ba 08 00 30 35    	add    BYTE PTR [edx+0x35300008],bh
    102c:	00 00                	add    BYTE PTR [eax],al
    102e:	00 01                	add    BYTE PTR [ecx],al
    1030:	9c                   	pushf  
    1031:	e1 02                	loope  1035 <sysEnter_Vector-0x12efcb>
    1033:	00 00                	add    BYTE PTR [eax],al
    1035:	0f d1 04 00          	psrlw  mm0,QWORD PTR [eax+eax*1]
    1039:	00 01                	add    BYTE PTR [ecx],al
    103b:	17                   	pop    ss
    103c:	5a                   	pop    edx
    103d:	00 00                	add    BYTE PTR [eax],al
    103f:	00 02                	add    BYTE PTR [edx],al
    1041:	91                   	xchg   ecx,eax
    1042:	00 0f                	add    BYTE PTR [edi],cl
    1044:	5a                   	pop    edx
    1045:	05 00 00 01 17       	add    eax,0x17010000
    104a:	76 00                	jbe    104c <sysEnter_Vector-0x12efb4>
    104c:	00 00                	add    BYTE PTR [eax],al
    104e:	02 91 04 0f 61 05    	add    dl,BYTE PTR [ecx+0x5610f04]
    1054:	00 00                	add    BYTE PTR [eax],al
    1056:	01 17                	add    DWORD PTR [edi],edx
    1058:	76 00                	jbe    105a <sysEnter_Vector-0x12efa6>
    105a:	00 00                	add    BYTE PTR [eax],al
    105c:	02 91 08 0f 68 05    	add    dl,BYTE PTR [ecx+0x5680f08]
    1062:	00 00                	add    BYTE PTR [eax],al
    1064:	01 17                	add    DWORD PTR [edi],edx
    1066:	76 00                	jbe    1068 <sysEnter_Vector-0x12ef98>
    1068:	00 00                	add    BYTE PTR [eax],al
    106a:	02 91 0c 10 51 04    	add    dl,BYTE PTR [ecx+0x451100c]
    1070:	00 00                	add    BYTE PTR [eax],al
    1072:	01 19                	add    DWORD PTR [ecx],ebx
    1074:	5a                   	pop    edx
    1075:	00 00                	add    BYTE PTR [eax],al
    1077:	00 02                	add    BYTE PTR [edx],al
    1079:	91                   	xchg   ecx,eax
    107a:	70 00                	jo     107c <sysEnter_Vector-0x12ef84>
    107c:	0e                   	push   cs
    107d:	fa                   	cli    
    107e:	04 00                	add    al,0x0
    1080:	00 01                	add    BYTE PTR [ecx],al
    1082:	1e                   	push   ds
    1083:	5a                   	pop    edx
    1084:	00 00                	add    BYTE PTR [eax],al
    1086:	00 ef                	add    bh,ch
    1088:	08 00                	or     BYTE PTR [eax],al
    108a:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
    108d:	00 00                	add    BYTE PTR [eax],al
    108f:	01 9c 33 03 00 00 0f 	add    DWORD PTR [ebx+esi*1+0xf000003],ebx
    1096:	d1 04 00             	rol    DWORD PTR [eax+eax*1],1
    1099:	00 01                	add    BYTE PTR [ecx],al
    109b:	1e                   	push   ds
    109c:	5a                   	pop    edx
    109d:	00 00                	add    BYTE PTR [eax],al
    109f:	00 02                	add    BYTE PTR [edx],al
    10a1:	91                   	xchg   ecx,eax
    10a2:	00 0f                	add    BYTE PTR [edi],cl
    10a4:	5a                   	pop    edx
    10a5:	05 00 00 01 1e       	add    eax,0x1e010000
    10aa:	76 00                	jbe    10ac <sysEnter_Vector-0x12ef54>
    10ac:	00 00                	add    BYTE PTR [eax],al
    10ae:	02 91 04 0f 61 05    	add    dl,BYTE PTR [ecx+0x5610f04]
    10b4:	00 00                	add    BYTE PTR [eax],al
    10b6:	01 1e                	add    DWORD PTR [esi],ebx
    10b8:	76 00                	jbe    10ba <sysEnter_Vector-0x12ef46>
    10ba:	00 00                	add    BYTE PTR [eax],al
    10bc:	02 91 08 10 51 04    	add    dl,BYTE PTR [ecx+0x4511008]
    10c2:	00 00                	add    BYTE PTR [eax],al
    10c4:	01 20                	add    DWORD PTR [eax],esp
    10c6:	5a                   	pop    edx
    10c7:	00 00                	add    BYTE PTR [eax],al
    10c9:	00 02                	add    BYTE PTR [edx],al
    10cb:	91                   	xchg   ecx,eax
    10cc:	70 00                	jo     10ce <sysEnter_Vector-0x12ef32>
    10ce:	0e                   	push   cs
    10cf:	ee                   	out    dx,al
    10d0:	04 00                	add    al,0x0
    10d2:	00 01                	add    BYTE PTR [ecx],al
    10d4:	25 5a 00 00 00       	and    eax,0x5a
    10d9:	23 09                	and    ecx,DWORD PTR [ecx]
    10db:	00 30                	add    BYTE PTR [eax],dh
    10dd:	31 00                	xor    DWORD PTR [eax],eax
    10df:	00 00                	add    BYTE PTR [eax],al
    10e1:	01 9c 77 03 00 00 0f 	add    DWORD PTR [edi+esi*2+0xf000003],ebx
    10e8:	d1 04 00             	rol    DWORD PTR [eax+eax*1],1
    10eb:	00 01                	add    BYTE PTR [ecx],al
    10ed:	25 5a 00 00 00       	and    eax,0x5a
    10f2:	02 91 00 0f 5a 05    	add    dl,BYTE PTR [ecx+0x55a0f00]
    10f8:	00 00                	add    BYTE PTR [eax],al
    10fa:	01 25 76 00 00 00    	add    DWORD PTR ds:0x76,esp
    1100:	02 91 04 10 51 04    	add    dl,BYTE PTR [ecx+0x4511004]
    1106:	00 00                	add    BYTE PTR [eax],al
    1108:	01 27                	add    DWORD PTR [edi],esp
    110a:	5a                   	pop    edx
    110b:	00 00                	add    BYTE PTR [eax],al
    110d:	00 02                	add    BYTE PTR [edx],al
    110f:	91                   	xchg   ecx,eax
    1110:	70 00                	jo     1112 <sysEnter_Vector-0x12eeee>
    1112:	0e                   	push   cs
    1113:	e2 04                	loop   1119 <sysEnter_Vector-0x12eee7>
    1115:	00 00                	add    BYTE PTR [eax],al
    1117:	01 2c 5a             	add    DWORD PTR [edx+ebx*2],ebp
    111a:	00 00                	add    BYTE PTR [eax],al
    111c:	00 54 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],dl
    1120:	30 27                	xor    BYTE PTR [edi],ah
    1122:	00 00                	add    BYTE PTR [eax],al
    1124:	00 01                	add    BYTE PTR [ecx],al
    1126:	9c                   	pushf  
    1127:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1128:	03 00                	add    eax,DWORD PTR [eax]
    112a:	00 0f                	add    BYTE PTR [edi],cl
    112c:	d1 04 00             	rol    DWORD PTR [eax+eax*1],1
    112f:	00 01                	add    BYTE PTR [ecx],al
    1131:	2c 5a                	sub    al,0x5a
    1133:	00 00                	add    BYTE PTR [eax],al
    1135:	00 02                	add    BYTE PTR [edx],al
    1137:	91                   	xchg   ecx,eax
    1138:	00 10                	add    BYTE PTR [eax],dl
    113a:	51                   	push   ecx
    113b:	04 00                	add    al,0x0
    113d:	00 01                	add    BYTE PTR [ecx],al
    113f:	2e                   	cs
    1140:	5a                   	pop    edx
    1141:	00 00                	add    BYTE PTR [eax],al
    1143:	00 02                	add    BYTE PTR [edx],al
    1145:	91                   	xchg   ecx,eax
    1146:	74 00                	je     1148 <sysEnter_Vector-0x12eeb8>
    1148:	11 85 04 00 00 01    	adc    DWORD PTR [ebp+0x1000004],eax
    114e:	33 7b 09             	xor    edi,DWORD PTR [ebx+0x9]
    1151:	00 30                	add    BYTE PTR [eax],dh
    1153:	b1 00                	mov    cl,0x0
    1155:	00 00                	add    BYTE PTR [eax],al
    1157:	01 9c 12 c3 05 00 00 	add    DWORD PTR [edx+edx*1+0x5c3],ebx
    115e:	01 45 2c             	add    DWORD PTR [ebp+0x2c],eax
    1161:	0a 00                	or     al,BYTE PTR [eax]
    1163:	30 1f                	xor    BYTE PTR [edi],bl
    1165:	00 00                	add    BYTE PTR [eax],al
    1167:	00 01                	add    BYTE PTR [ecx],al
    1169:	9c                   	pushf  
    116a:	13 8f 04 00 00 01    	adc    ecx,DWORD PTR [edi+0x1000004]
    1170:	4a                   	dec    edx
    1171:	5a                   	pop    edx
    1172:	00 00                	add    BYTE PTR [eax],al
    1174:	00 4b 0a             	add    BYTE PTR [ebx+0xa],cl
    1177:	00 30                	add    BYTE PTR [eax],dh
    1179:	34 00                	xor    al,0x0
    117b:	00 00                	add    BYTE PTR [eax],al
    117d:	01 9c 06 04 00 00 0f 	add    DWORD PTR [esi+eax*1+0xf000004],ebx
    1184:	76 05                	jbe    118b <sysEnter_Vector-0x12ee75>
    1186:	00 00                	add    BYTE PTR [eax],al
    1188:	01 4a 4a             	add    DWORD PTR [edx+0x4a],ecx
    118b:	01 00                	add    DWORD PTR [eax],eax
    118d:	00 02                	add    BYTE PTR [edx],al
    118f:	91                   	xchg   ecx,eax
    1190:	00 14 10             	add    BYTE PTR [eax+edx*1],dl
    1193:	f4                   	hlt    
    1194:	05 00 00 01 4c       	add    eax,0x4c010000
    1199:	41                   	inc    ecx
    119a:	00 00                	add    BYTE PTR [eax],al
    119c:	00 02                	add    BYTE PTR [edx],al
    119e:	91                   	xchg   ecx,eax
    119f:	74 00                	je     11a1 <sysEnter_Vector-0x12ee5f>
    11a1:	13 f9                	adc    edi,ecx
    11a3:	05 00 00 01 52       	add    eax,0x52010000
    11a8:	5a                   	pop    edx
    11a9:	00 00                	add    BYTE PTR [eax],al
    11ab:	00 7f 0a             	add    BYTE PTR [edi+0xa],bh
    11ae:	00 30                	add    BYTE PTR [eax],dh
    11b0:	34 00                	xor    al,0x0
    11b2:	00 00                	add    BYTE PTR [eax],al
    11b4:	01 9c 3d 04 00 00 0f 	add    DWORD PTR [ebp+edi*1+0xf000004],ebx
    11bb:	76 05                	jbe    11c2 <sysEnter_Vector-0x12ee3e>
    11bd:	00 00                	add    BYTE PTR [eax],al
    11bf:	01 52 4a             	add    DWORD PTR [edx+0x4a],edx
    11c2:	01 00                	add    DWORD PTR [eax],eax
    11c4:	00 02                	add    BYTE PTR [edx],al
    11c6:	91                   	xchg   ecx,eax
    11c7:	00 14 10             	add    BYTE PTR [eax+edx*1],dl
    11ca:	f4                   	hlt    
    11cb:	05 00 00 01 54       	add    eax,0x54010000
    11d0:	41                   	inc    ecx
    11d1:	00 00                	add    BYTE PTR [eax],al
    11d3:	00 02                	add    BYTE PTR [edx],al
    11d5:	91                   	xchg   ecx,eax
    11d6:	74 00                	je     11d8 <sysEnter_Vector-0x12ee28>
    11d8:	13 52 05             	adc    edx,DWORD PTR [edx+0x5]
    11db:	00 00                	add    BYTE PTR [eax],al
    11dd:	01 5a 5a             	add    DWORD PTR [edx+0x5a],ebx
    11e0:	00 00                	add    BYTE PTR [eax],al
    11e2:	00 b3 0a 00 30 37    	add    BYTE PTR [ebx+0x3730000a],dh
    11e8:	00 00                	add    BYTE PTR [eax],al
    11ea:	00 01                	add    BYTE PTR [ecx],al
    11ec:	9c                   	pushf  
    11ed:	82                   	(bad)  
    11ee:	04 00                	add    al,0x0
    11f0:	00 0f                	add    BYTE PTR [edi],cl
    11f2:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    11f6:	01 5a 76             	add    DWORD PTR [edx+0x76],ebx
    11f9:	00 00                	add    BYTE PTR [eax],al
    11fb:	00 02                	add    BYTE PTR [edx],al
    11fd:	91                   	xchg   ecx,eax
    11fe:	00 0f                	add    BYTE PTR [edi],cl
    1200:	76 05                	jbe    1207 <sysEnter_Vector-0x12edf9>
    1202:	00 00                	add    BYTE PTR [eax],al
    1204:	01 5a 4a             	add    DWORD PTR [edx+0x4a],ebx
    1207:	01 00                	add    DWORD PTR [eax],eax
    1209:	00 02                	add    BYTE PTR [edx],al
    120b:	91                   	xchg   ecx,eax
    120c:	04 14                	add    al,0x14
    120e:	10 f4                	adc    ah,dh
    1210:	05 00 00 01 5c       	add    eax,0x5c010000
    1215:	41                   	inc    ecx
    1216:	00 00                	add    BYTE PTR [eax],al
    1218:	00 02                	add    BYTE PTR [edx],al
    121a:	91                   	xchg   ecx,eax
    121b:	74 00                	je     121d <sysEnter_Vector-0x12ede3>
    121d:	0e                   	push   cs
    121e:	67 04 00             	addr16 add al,0x0
    1221:	00 01                	add    BYTE PTR [ecx],al
    1223:	63 81 00 00 00 ea    	arpl   WORD PTR [ecx-0x16000000],ax
    1229:	0a 00                	or     al,BYTE PTR [eax]
    122b:	30 4f 00             	xor    BYTE PTR [edi+0x0],cl
    122e:	00 00                	add    BYTE PTR [eax],al
    1230:	01 9c ce 04 00 00 0f 	add    DWORD PTR [esi+ecx*8+0xf000004],ebx
    1237:	93                   	xchg   ebx,eax
    1238:	05 00 00 01 63       	add    eax,0x63010000
    123d:	81 00 00 00 02 91    	add    DWORD PTR [eax],0x91020000
    1243:	00 15 fb 0a 00 30    	add    BYTE PTR ds:0x30000afb,dl
    1249:	33 00                	xor    eax,DWORD PTR [eax]
    124b:	00 00                	add    BYTE PTR [eax],al
    124d:	16                   	push   ss
    124e:	73 32                	jae    1282 <sysEnter_Vector-0x12ed7e>
    1250:	00 01                	add    BYTE PTR [ecx],al
    1252:	65                   	gs
    1253:	76 00                	jbe    1255 <sysEnter_Vector-0x12edab>
    1255:	00 00                	add    BYTE PTR [eax],al
    1257:	02 91 70 16 63 74    	add    dl,BYTE PTR [ecx+0x74631670]
    125d:	00 01                	add    BYTE PTR [ecx],al
    125f:	65                   	gs
    1260:	76 00                	jbe    1262 <sysEnter_Vector-0x12ed9e>
    1262:	00 00                	add    BYTE PTR [eax],al
    1264:	02 91 6c 00 00 11    	add    dl,BYTE PTR [ecx+0x1100006c]
    126a:	00 06                	add    BYTE PTR [esi],al
    126c:	00 00                	add    BYTE PTR [eax],al
    126e:	01 69 39             	add    DWORD PTR [ecx+0x39],ebp
    1271:	0b 00                	or     eax,DWORD PTR [eax]
    1273:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    1279:	9c                   	pushf  
    127a:	17                   	pop    ss
    127b:	e7 05                	out    0x5,eax
    127d:	00 00                	add    BYTE PTR [eax],al
    127f:	01 6e 56             	add    DWORD PTR [esi+0x56],ebp
    1282:	0b 00                	or     eax,DWORD PTR [eax]
    1284:	30 29                	xor    BYTE PTR [ecx],ch
    1286:	00 00                	add    BYTE PTR [eax],al
    1288:	00 01                	add    BYTE PTR [ecx],al
    128a:	9c                   	pushf  
    128b:	1f                   	pop    ds
    128c:	05 00 00 0f 87       	add    eax,0x870f0000
    1291:	05 00 00 01 6e       	add    eax,0x6e010000
    1296:	5a                   	pop    edx
    1297:	00 00                	add    BYTE PTR [eax],al
    1299:	00 02                	add    BYTE PTR [edx],al
    129b:	91                   	xchg   ecx,eax
    129c:	00 0f                	add    BYTE PTR [edi],cl
    129e:	dc 05 00 00 01 6e    	fadd   QWORD PTR ds:0x6e010000
    12a4:	0b 02                	or     eax,DWORD PTR [edx]
    12a6:	00 00                	add    BYTE PTR [eax],al
    12a8:	02 91 04 0f 6d 04    	add    dl,BYTE PTR [ecx+0x46d0f04]
    12ae:	00 00                	add    BYTE PTR [eax],al
    12b0:	01 6e 5a             	add    DWORD PTR [esi+0x5a],ebp
    12b3:	00 00                	add    BYTE PTR [eax],al
    12b5:	00 02                	add    BYTE PTR [edx],al
    12b7:	91                   	xchg   ecx,eax
    12b8:	08 00                	or     BYTE PTR [eax],al
    12ba:	13 8e 05 00 00 01    	adc    ecx,DWORD PTR [esi+0x1000005]
    12c0:	73 5a                	jae    131c <sysEnter_Vector-0x12ece4>
    12c2:	00 00                	add    BYTE PTR [eax],al
    12c4:	00 7f 0b             	add    BYTE PTR [edi+0xb],bh
    12c7:	00 30                	add    BYTE PTR [eax],dh
    12c9:	4c                   	dec    esp
    12ca:	00 00                	add    BYTE PTR [eax],al
    12cc:	00 01                	add    BYTE PTR [ecx],al
    12ce:	9c                   	pushf  
    12cf:	71 05                	jno    12d6 <sysEnter_Vector-0x12ed2a>
    12d1:	00 00                	add    BYTE PTR [eax],al
    12d3:	0f e3 08             	pavgw  mm1,QWORD PTR [eax]
    12d6:	00 00                	add    BYTE PTR [eax],al
    12d8:	01 73 0d             	add    DWORD PTR [ebx+0xd],esi
    12db:	02 00                	add    al,BYTE PTR [eax]
    12dd:	00 02                	add    BYTE PTR [edx],al
    12df:	91                   	xchg   ecx,eax
    12e0:	00 0f                	add    BYTE PTR [edi],cl
    12e2:	ae                   	scas   al,BYTE PTR es:[edi]
    12e3:	05 00 00 01 73       	add    eax,0x73010000
    12e8:	5a                   	pop    edx
    12e9:	00 00                	add    BYTE PTR [eax],al
    12eb:	00 02                	add    BYTE PTR [edx],al
    12ed:	91                   	xchg   ecx,eax
    12ee:	04 0f                	add    al,0xf
    12f0:	d7                   	xlat   BYTE PTR ds:[ebx]
    12f1:	05 00 00 01 73       	add    eax,0x73010000
    12f6:	71 05                	jno    12fd <sysEnter_Vector-0x12ed03>
    12f8:	00 00                	add    BYTE PTR [eax],al
    12fa:	02 91 08 16 70 69    	add    dl,BYTE PTR [ecx+0x69701608]
    1300:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1303:	75 5a                	jne    135f <sysEnter_Vector-0x12eca1>
    1305:	00 00                	add    BYTE PTR [eax],al
    1307:	00 02                	add    BYTE PTR [edx],al
    1309:	91                   	xchg   ecx,eax
    130a:	70 00                	jo     130c <sysEnter_Vector-0x12ecf4>
    130c:	08 04 0d 02 00 00 13 	or     BYTE PTR [ecx*1+0x13000002],al
    1313:	be 04 00 00 01       	mov    esi,0x1000004
    1318:	7f 5a                	jg     1374 <sysEnter_Vector-0x12ec8c>
    131a:	00 00                	add    BYTE PTR [eax],al
    131c:	00 cb                	add    bl,cl
    131e:	0b 00                	or     eax,DWORD PTR [eax]
    1320:	30 1c 00             	xor    BYTE PTR [eax+eax*1],bl
    1323:	00 00                	add    BYTE PTR [eax],al
    1325:	01 9c 9f 05 00 00 18 	add    DWORD PTR [edi+ebx*4+0x18000005],ebx
    132c:	70 69                	jo     1397 <sysEnter_Vector-0x12ec69>
    132e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1331:	7f 76                	jg     13a9 <sysEnter_Vector-0x12ec57>
    1333:	00 00                	add    BYTE PTR [eax],al
    1335:	00 02                	add    BYTE PTR [edx],al
    1337:	91                   	xchg   ecx,eax
    1338:	00 00                	add    BYTE PTR [eax],al
    133a:	19 b6 04 00 00 01    	sbb    DWORD PTR [esi+0x1000004],esi
    1340:	84 d5                	test   ch,dl
    1342:	05 00 00 e7 0b       	add    eax,0xbe70000
    1347:	00 30                	add    BYTE PTR [eax],dh
    1349:	40                   	inc    eax
    134a:	00 00                	add    BYTE PTR [eax],al
    134c:	00 01                	add    BYTE PTR [ecx],al
    134e:	9c                   	pushf  
    134f:	d5 05                	aad    0x5
    1351:	00 00                	add    BYTE PTR [eax],al
    1353:	10 35 05 00 00 01    	adc    BYTE PTR ds:0x1000005,dh
    1359:	86 76 00             	xchg   BYTE PTR [esi+0x0],dh
    135c:	00 00                	add    BYTE PTR [eax],al
    135e:	02 91 6c 10 75 04    	add    dl,BYTE PTR [ecx+0x475106c]
    1364:	00 00                	add    BYTE PTR [eax],al
    1366:	01 87 ba 00 00 00    	add    DWORD PTR [edi+0xba],eax
    136c:	02 91 40 00 08 04    	add    dl,BYTE PTR [ecx+0x4080040]
    1372:	ba 00 00 00 13       	mov    edx,0x13000000
    1377:	05 06 00 00 01       	add    eax,0x1000006
    137c:	8d 0d 02 00 00 27    	lea    ecx,ds:0x27000002
    1382:	0c 00                	or     al,0x0
    1384:	30 20                	xor    BYTE PTR [eax],ah
    1386:	00 00                	add    BYTE PTR [eax],al
    1388:	00 01                	add    BYTE PTR [ecx],al
    138a:	9c                   	pushf  
    138b:	11 06                	adc    DWORD PTR [esi],eax
    138d:	00 00                	add    BYTE PTR [eax],al
    138f:	18 62 75             	sbb    BYTE PTR [edx+0x75],ah
    1392:	66                   	data16
    1393:	00 01                	add    BYTE PTR [ecx],al
    1395:	8d 0d 02 00 00 02    	lea    ecx,ds:0x2000002
    139b:	91                   	xchg   ecx,eax
    139c:	00 0f                	add    BYTE PTR [edi],cl
    139e:	b8 03 00 00 01       	mov    eax,0x1000003
    13a3:	8d 8f 00 00 00 02    	lea    ecx,[edi+0x2000000]
    13a9:	91                   	xchg   ecx,eax
    13aa:	04 00                	add    al,0x0
    13ac:	1a 4b 00             	sbb    cl,BYTE PTR [ebx+0x0]
    13af:	00 00                	add    BYTE PTR [eax],al
    13b1:	06                   	push   es
    13b2:	34 76                	xor    al,0x76
    13b4:	00 00                	add    BYTE PTR [eax],al
    13b6:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    13bc:	30 1a                	xor    BYTE PTR [edx],bl
    13be:	b6 00                	mov    dh,0x0
    13c0:	00 00                	add    BYTE PTR [eax],al
    13c2:	06                   	push   es
    13c3:	35 76 00 00 00       	xor    eax,0x76
    13c8:	05 03 0c 43 00       	add    eax,0x430c03
    13cd:	30 1a                	xor    BYTE PTR [edx],bl
    13cf:	62 01                	bound  eax,QWORD PTR [ecx]
    13d1:	00 00                	add    BYTE PTR [eax],al
    13d3:	06                   	push   es
    13d4:	36                   	ss
    13d5:	76 00                	jbe    13d7 <sysEnter_Vector-0x12ec29>
    13d7:	00 00                	add    BYTE PTR [eax],al
    13d9:	05 03 04 43 00       	add    eax,0x430403
    13de:	30 1a                	xor    BYTE PTR [edx],bl
    13e0:	54                   	push   esp
    13e1:	00 00                	add    BYTE PTR [eax],al
    13e3:	00 07                	add    BYTE PTR [edi],al
    13e5:	43                   	inc    ebx
    13e6:	af                   	scas   eax,DWORD PTR es:[edi]
    13e7:	00 00                	add    BYTE PTR [eax],al
    13e9:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    13ef:	30 1a                	xor    BYTE PTR [edx],bl
    13f1:	28 00                	sub    BYTE PTR [eax],al
    13f3:	00 00                	add    BYTE PTR [eax],al
    13f5:	07                   	pop    es
    13f6:	44                   	inc    esp
    13f7:	71 05                	jno    13fe <sysEnter_Vector-0x12ec02>
    13f9:	00 00                	add    BYTE PTR [eax],al
    13fb:	05 03 10 43 00       	add    eax,0x431003
    1400:	30 1a                	xor    BYTE PTR [edx],bl
    1402:	1e                   	push   ds
    1403:	05 00 00 01 0d       	add    eax,0xd010000
    1408:	a8 00                	test   al,0x0
    140a:	00 00                	add    BYTE PTR [eax],al
    140c:	05 03 1c 43 00       	add    eax,0x431c03
    1411:	30 00                	xor    BYTE PTR [eax],al
    1413:	3f                   	aas    
    1414:	03 00                	add    eax,DWORD PTR [eax]
    1416:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1419:	b1 06                	mov    cl,0x6
    141b:	00 00                	add    BYTE PTR [eax],al
    141d:	04 01                	add    al,0x1
    141f:	fb                   	sti    
    1420:	00 00                	add    BYTE PTR [eax],al
    1422:	00 0c b0             	add    BYTE PTR [eax+esi*4],cl
    1425:	06                   	push   es
    1426:	00 00                	add    BYTE PTR [eax],al
    1428:	79 00                	jns    142a <sysEnter_Vector-0x12ebd6>
    142a:	00 00                	add    BYTE PTR [eax],al
    142c:	48                   	dec    eax
    142d:	0c 00                	or     al,0x0
    142f:	30 46 03             	xor    BYTE PTR [esi+0x3],al
    1432:	00 00                	add    BYTE PTR [eax],al
    1434:	b3 08                	mov    bl,0x8
    1436:	00 00                	add    BYTE PTR [eax],al
    1438:	02 01                	add    al,BYTE PTR [ecx]
    143a:	06                   	push   es
    143b:	5d                   	pop    ebp
    143c:	00 00                	add    BYTE PTR [eax],al
    143e:	00 02                	add    BYTE PTR [edx],al
    1440:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    1446:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    144d:	02 08                	add    cl,BYTE PTR [eax]
    144f:	05 00 00 00 00       	add    eax,0x0
    1454:	04 48                	add    al,0x48
    1456:	06                   	push   es
    1457:	00 00                	add    BYTE PTR [eax],al
    1459:	02 2e                	add    ch,BYTE PTR [esi]
    145b:	4c                   	dec    esp
    145c:	00 00                	add    BYTE PTR [eax],al
    145e:	00 02                	add    BYTE PTR [edx],al
    1460:	01 08                	add    DWORD PTR [eax],ecx
    1462:	5b                   	pop    ebx
    1463:	00 00                	add    BYTE PTR [eax],al
    1465:	00 02                	add    BYTE PTR [edx],al
    1467:	02 07                	add    al,BYTE PTR [edi]
    1469:	0e                   	push   cs
    146a:	00 00                	add    BYTE PTR [eax],al
    146c:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    146f:	00 00                	add    BYTE PTR [eax],al
    1471:	00 02                	add    BYTE PTR [edx],al
    1473:	34 65                	xor    al,0x65
    1475:	00 00                	add    BYTE PTR [eax],al
    1477:	00 02                	add    BYTE PTR [edx],al
    1479:	04 07                	add    al,0x7
    147b:	3e 00 00             	add    BYTE PTR ds:[eax],al
    147e:	00 02                	add    BYTE PTR [edx],al
    1480:	08 07                	or     BYTE PTR [edi],al
    1482:	34 00                	xor    al,0x0
    1484:	00 00                	add    BYTE PTR [eax],al
    1486:	04 60                	add    al,0x60
    1488:	04 00                	add    al,0x0
    148a:	00 03                	add    BYTE PTR [ebx],al
    148c:	d8 65 00             	fsub   DWORD PTR [ebp+0x0]
    148f:	00 00                	add    BYTE PTR [eax],al
    1491:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1498:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    149b:	a2 00 00 00 05       	mov    ds:0x5000000,al
    14a0:	64                   	fs
    14a1:	06                   	push   es
    14a2:	00 00                	add    BYTE PTR [eax],al
    14a4:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    14a7:	c9                   	leave  
    14a8:	00 00                	add    BYTE PTR [eax],al
    14aa:	00 06                	add    BYTE PTR [esi],al
    14ac:	39 06                	cmp    DWORD PTR [esi],eax
    14ae:	00 00                	add    BYTE PTR [eax],al
    14b0:	04 2e                	add    al,0x2e
    14b2:	5a                   	pop    edx
    14b3:	00 00                	add    BYTE PTR [eax],al
    14b5:	00 00                	add    BYTE PTR [eax],al
    14b7:	07                   	pop    es
    14b8:	6c                   	ins    BYTE PTR es:[edi],dx
    14b9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    14bb:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    14be:	5a                   	pop    edx
    14bf:	00 00                	add    BYTE PTR [eax],al
    14c1:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    14c4:	6a 06                	push   0x6
    14c6:	00 00                	add    BYTE PTR [eax],al
    14c8:	04 30                	add    al,0x30
    14ca:	c9                   	leave  
    14cb:	00 00                	add    BYTE PTR [eax],al
    14cd:	00 08                	add    BYTE PTR [eax],cl
    14cf:	06                   	push   es
    14d0:	bd 06 00 00 04       	mov    ebp,0x4000006
    14d5:	31 d0                	xor    eax,edx
    14d7:	00 00                	add    BYTE PTR [eax],al
    14d9:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
    14dc:	02 01                	add    al,BYTE PTR [ecx]
    14de:	02 9c 00 00 00 08 04 	add    bl,BYTE PTR [eax+eax*1+0x4080000]
    14e5:	8c 00                	mov    WORD PTR [eax],es
    14e7:	00 00                	add    BYTE PTR [eax],al
    14e9:	04 c2                	add    al,0xc2
    14eb:	06                   	push   es
    14ec:	00 00                	add    BYTE PTR [eax],al
    14ee:	04 32                	add    al,0x32
    14f0:	8c 00                	mov    WORD PTR [eax],es
    14f2:	00 00                	add    BYTE PTR [eax],al
    14f4:	02 01                	add    al,BYTE PTR [ecx]
    14f6:	06                   	push   es
    14f7:	64 00 00             	add    BYTE PTR fs:[eax],al
    14fa:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    14fd:	00 00                	add    BYTE PTR [eax],al
    14ff:	00 05 2a 7e 00 00    	add    BYTE PTR ds:0x7e2a,al
    1505:	00 09                	add    BYTE PTR [ecx],cl
    1507:	eb 02                	jmp    150b <sysEnter_Vector-0x12eaf5>
    1509:	00 00                	add    BYTE PTR [eax],al
    150b:	04 65                	add    al,0x65
    150d:	00 00                	add    BYTE PTR [eax],al
    150f:	00 07                	add    BYTE PTR [edi],al
    1511:	15 9b 01 00 00       	adc    eax,0x19b
    1516:	0a 43 03             	or     al,BYTE PTR [ebx+0x3]
    1519:	00 00                	add    BYTE PTR [eax],al
    151b:	00 0a                	add    BYTE PTR [edx],cl
    151d:	7b 03                	jnp    1522 <sysEnter_Vector-0x12eade>
    151f:	00 00                	add    BYTE PTR [eax],al
    1521:	01 0a                	add    DWORD PTR [edx],ecx
    1523:	67 02 00             	add    al,BYTE PTR [bx+si]
    1526:	00 02                	add    BYTE PTR [edx],al
    1528:	0a dd                	or     bl,ch
    152a:	02 00                	add    al,BYTE PTR [eax]
    152c:	00 03                	add    BYTE PTR [ebx],al
    152e:	0a 5a 02             	or     bl,BYTE PTR [edx+0x2]
    1531:	00 00                	add    BYTE PTR [eax],al
    1533:	04 0a                	add    al,0xa
    1535:	95                   	xchg   ebp,eax
    1536:	03 00                	add    eax,DWORD PTR [eax]
    1538:	00 05 0a cb 03 00    	add    BYTE PTR ds:0x3cb0a,al
    153e:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    1541:	36 03 00             	add    eax,DWORD PTR ss:[eax]
    1544:	00 59 0a             	add    BYTE PTR [ecx+0xa],bl
    1547:	da 03                	fiadd  DWORD PTR [ebx]
    1549:	00 00                	add    BYTE PTR [eax],al
    154b:	61                   	popa   
    154c:	0a c9                	or     cl,cl
    154e:	02 00                	add    al,BYTE PTR [eax]
    1550:	00 97 0b 53 03 00    	add    BYTE PTR [edi+0x3530b],dl
    1556:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1559:	0b 29                	or     ebp,DWORD PTR [ecx]
    155b:	03 00                	add    eax,DWORD PTR [eax]
    155d:	00 64 01 0b          	add    BYTE PTR [ecx+eax*1+0xb],ah
    1561:	bd 03 00 00 65       	mov    ebp,0x65000003
    1566:	01 0b                	add    DWORD PTR [ebx],ecx
    1568:	bb 02 00 00 66       	mov    ebx,0x66000002
    156d:	01 0b                	add    DWORD PTR [ebx],ecx
    156f:	f2 03 00             	repnz add eax,DWORD PTR [eax]
    1572:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1575:	0b 01                	or     eax,DWORD PTR [ecx]
    1577:	03 00                	add    eax,DWORD PTR [eax]
    1579:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    157c:	0b a0 02 00 00 69    	or     esp,DWORD PTR [eax+0x69000002]
    1582:	01 0b                	add    DWORD PTR [ebx],ecx
    1584:	6a 03                	push   0x3
    1586:	00 00                	add    BYTE PTR [eax],al
    1588:	70 01                	jo     158b <sysEnter_Vector-0x12ea75>
    158a:	0b a3 03 00 00 00    	or     esp,DWORD PTR [ebx+0x3]
    1590:	03 0b                	add    ecx,DWORD PTR [ebx]
    1592:	0e                   	push   cs
    1593:	03 00                	add    eax,DWORD PTR [eax]
    1595:	00 01                	add    BYTE PTR [ecx],al
    1597:	03 0b                	add    ecx,DWORD PTR [ebx]
    1599:	af                   	scas   eax,DWORD PTR es:[edi]
    159a:	02 00                	add    al,BYTE PTR [eax]
    159c:	00 02                	add    BYTE PTR [edx],al
    159e:	03 0b                	add    ecx,DWORD PTR [ebx]
    15a0:	74 02                	je     15a4 <sysEnter_Vector-0x12ea5c>
    15a2:	00 00                	add    BYTE PTR [eax],al
    15a4:	03 03                	add    eax,DWORD PTR [ebx]
    15a6:	0b 84 02 00 00 04 03 	or     eax,DWORD PTR [edx+eax*1+0x3040000]
    15ad:	00 02                	add    BYTE PTR [edx],al
    15af:	04 07                	add    al,0x7
    15b1:	39 00                	cmp    DWORD PTR [eax],eax
    15b3:	00 00                	add    BYTE PTR [eax],al
    15b5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    15b8:	e8 00 00 00 0c       	call   c0015bd <sysEnter_Vector+0xbed15bd>
    15bd:	04 08                	add    al,0x8
    15bf:	04 e1                	add    al,0xe1
    15c1:	00 00                	add    BYTE PTR [eax],al
    15c3:	00 0d 70 06 00 00    	add    BYTE PTR ds:0x670,cl
    15c9:	01 0c 48             	add    DWORD PTR [eax+ecx*2],ecx
    15cc:	0c 00                	or     al,0x0
    15ce:	30 60 00             	xor    BYTE PTR [eax+0x0],ah
    15d1:	00 00                	add    BYTE PTR [eax],al
    15d3:	01 9c 0e 90 06 00 00 	add    DWORD PTR [esi+ecx*1+0x690],ebx
    15da:	01 14 5a             	add    DWORD PTR [edx+ebx*2],edx
    15dd:	00 00                	add    BYTE PTR [eax],al
    15df:	00 a8 0c 00 30 87    	add    BYTE PTR [eax-0x78cffff4],ch
    15e5:	00 00                	add    BYTE PTR [eax],al
    15e7:	00 01                	add    BYTE PTR [ecx],al
    15e9:	9c                   	pushf  
    15ea:	f8                   	clc    
    15eb:	01 00                	add    DWORD PTR [eax],eax
    15ed:	00 0f                	add    BYTE PTR [edi],cl
    15ef:	b8 03 00 00 01       	mov    eax,0x1000003
    15f4:	14 73                	adc    al,0x73
    15f6:	00 00                	add    BYTE PTR [eax],al
    15f8:	00 02                	add    BYTE PTR [edx],al
    15fa:	91                   	xchg   ecx,eax
    15fb:	00 10                	add    BYTE PTR [eax],dl
    15fd:	22 06                	and    al,BYTE PTR [esi]
    15ff:	00 00                	add    BYTE PTR [eax],al
    1601:	01 18                	add    DWORD PTR [eax],ebx
    1603:	5a                   	pop    edx
    1604:	00 00                	add    BYTE PTR [eax],al
    1606:	00 02                	add    BYTE PTR [edx],al
    1608:	91                   	xchg   ecx,eax
    1609:	74 00                	je     160b <sysEnter_Vector-0x12e9f5>
    160b:	11 40 06             	adc    DWORD PTR [eax+0x6],eax
    160e:	00 00                	add    BYTE PTR [eax],al
    1610:	01 2c a9             	add    DWORD PTR [ecx+ebp*4],ebp
    1613:	01 00                	add    DWORD PTR [eax],eax
    1615:	00 2f                	add    BYTE PTR [edi],ch
    1617:	0d 00 30 d4 01       	or     eax,0x1d43000
    161c:	00 00                	add    BYTE PTR [eax],al
    161e:	01 9c 66 02 00 00 0f 	add    DWORD PTR [esi+eiz*2+0xf000002],ebx
    1625:	b8 03 00 00 01       	mov    eax,0x1000003
    162a:	2c 73                	sub    al,0x73
    162c:	00 00                	add    BYTE PTR [eax],al
    162e:	00 02                	add    BYTE PTR [edx],al
    1630:	91                   	xchg   ecx,eax
    1631:	00 10                	add    BYTE PTR [eax],dl
    1633:	51                   	push   ecx
    1634:	04 00                	add    al,0x0
    1636:	00 01                	add    BYTE PTR [ecx],al
    1638:	2e                   	cs
    1639:	a9 01 00 00 02       	test   eax,0x2000001
    163e:	91                   	xchg   ecx,eax
    163f:	60                   	pusha  
    1640:	10 5d 06             	adc    BYTE PTR [ebp+0x6],bl
    1643:	00 00                	add    BYTE PTR [eax],al
    1645:	01 30                	add    DWORD PTR [eax],esi
    1647:	5a                   	pop    edx
    1648:	00 00                	add    BYTE PTR [eax],al
    164a:	00 02                	add    BYTE PTR [edx],al
    164c:	91                   	xchg   ecx,eax
    164d:	6c                   	ins    BYTE PTR es:[edi],dx
    164e:	10 0c 06             	adc    BYTE PTR [esi+eax*1],cl
    1651:	00 00                	add    BYTE PTR [eax],al
    1653:	01 31                	add    DWORD PTR [ecx],esi
    1655:	5a                   	pop    edx
    1656:	00 00                	add    BYTE PTR [eax],al
    1658:	00 02                	add    BYTE PTR [edx],al
    165a:	91                   	xchg   ecx,eax
    165b:	68 10 55 06 00       	push   0x65510
    1660:	00 01                	add    BYTE PTR [ecx],al
    1662:	32 66 02             	xor    ah,BYTE PTR [esi+0x2]
    1665:	00 00                	add    BYTE PTR [eax],al
    1667:	02 91 64 10 84 06    	add    dl,BYTE PTR [ecx+0x6841064]
    166d:	00 00                	add    BYTE PTR [eax],al
    166f:	01 33                	add    DWORD PTR [ebx],esi
    1671:	6c                   	ins    BYTE PTR es:[edi],dx
    1672:	02 00                	add    al,BYTE PTR [eax]
    1674:	00 02                	add    BYTE PTR [edx],al
    1676:	91                   	xchg   ecx,eax
    1677:	5c                   	pop    esp
    1678:	00 08                	add    BYTE PTR [eax],cl
    167a:	04 d6                	add    al,0xd6
    167c:	00 00                	add    BYTE PTR [eax],al
    167e:	00 08                	add    BYTE PTR [eax],cl
    1680:	04 41                	add    al,0x41
    1682:	00 00                	add    BYTE PTR [eax],al
    1684:	00 11                	add    BYTE PTR [ecx],dl
    1686:	74 06                	je     168e <sysEnter_Vector-0x12e972>
    1688:	00 00                	add    BYTE PTR [eax],al
    168a:	01 53 a9             	add    DWORD PTR [ebx-0x57],edx
    168d:	01 00                	add    DWORD PTR [eax],eax
    168f:	00 03                	add    BYTE PTR [ebx],al
    1691:	0f 00                	(bad)  
    1693:	30 20                	xor    BYTE PTR [eax],ah
    1695:	00 00                	add    BYTE PTR [eax],al
    1697:	00 01                	add    BYTE PTR [ecx],al
    1699:	9c                   	pushf  
    169a:	9a 02 00 00 0f b8 03 	call   0x3b8:0xf000002
    16a1:	00 00                	add    BYTE PTR [eax],al
    16a3:	01 53 73             	add    DWORD PTR [ebx+0x73],edx
    16a6:	00 00                	add    BYTE PTR [eax],al
    16a8:	00 02                	add    BYTE PTR [edx],al
    16aa:	91                   	xchg   ecx,eax
    16ab:	00 00                	add    BYTE PTR [eax],al
    16ad:	12 50 06             	adc    dl,BYTE PTR [eax+0x6]
    16b0:	00 00                	add    BYTE PTR [eax],al
    16b2:	01 58 23             	add    DWORD PTR [eax+0x23],ebx
    16b5:	0f 00                	(bad)  
    16b7:	30 39                	xor    BYTE PTR [ecx],bh
    16b9:	00 00                	add    BYTE PTR [eax],al
    16bb:	00 01                	add    BYTE PTR [ecx],al
    16bd:	9c                   	pushf  
    16be:	d6                   	(bad)  
    16bf:	02 00                	add    al,BYTE PTR [eax]
    16c1:	00 0f                	add    BYTE PTR [edi],cl
    16c3:	19 06                	sbb    DWORD PTR [esi],eax
    16c5:	00 00                	add    BYTE PTR [eax],al
    16c7:	01 58 a9             	add    DWORD PTR [eax-0x57],ebx
    16ca:	01 00                	add    DWORD PTR [eax],eax
    16cc:	00 02                	add    BYTE PTR [edx],al
    16ce:	91                   	xchg   ecx,eax
    16cf:	00 13                	add    BYTE PTR [ebx],dl
    16d1:	6d                   	ins    DWORD PTR es:[edi],dx
    16d2:	70 00                	jo     16d4 <sysEnter_Vector-0x12e92c>
    16d4:	01 5a 66             	add    DWORD PTR [edx+0x66],ebx
    16d7:	02 00                	add    al,BYTE PTR [eax]
    16d9:	00 02                	add    BYTE PTR [edx],al
    16db:	91                   	xchg   ecx,eax
    16dc:	74 14                	je     16f2 <sysEnter_Vector-0x12e90e>
    16de:	7b 06                	jnp    16e6 <sysEnter_Vector-0x12e91a>
    16e0:	00 00                	add    BYTE PTR [eax],al
    16e2:	01 64 4e 0f          	add    DWORD PTR [esi+ecx*2+0xf],esp
    16e6:	00 30                	add    BYTE PTR [eax],dh
    16e8:	00 0d 2a 06 00 00    	add    BYTE PTR ds:0x62a,cl
    16ee:	01 6a 5c             	add    DWORD PTR [edx+0x5c],ebp
    16f1:	0f 00                	(bad)  
    16f3:	30 32                	xor    BYTE PTR [edx],dh
    16f5:	00 00                	add    BYTE PTR [eax],al
    16f7:	00 01                	add    BYTE PTR [ecx],al
    16f9:	9c                   	pushf  
    16fa:	15 4b 00 00 00       	adc    eax,0x4b
    16ff:	04 34                	add    al,0x34
    1701:	5a                   	pop    edx
    1702:	00 00                	add    BYTE PTR [eax],al
    1704:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    170a:	30 15 b6 00 00 00    	xor    BYTE PTR ds:0xb6,dl
    1710:	04 35                	add    al,0x35
    1712:	5a                   	pop    edx
    1713:	00 00                	add    BYTE PTR [eax],al
    1715:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
    171b:	30 15 62 01 00 00    	xor    BYTE PTR ds:0x162,dl
    1721:	04 36                	add    al,0x36
    1723:	5a                   	pop    edx
    1724:	00 00                	add    BYTE PTR [eax],al
    1726:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    172c:	30 15 54 00 00 00    	xor    BYTE PTR ds:0x54,dl
    1732:	06                   	push   es
    1733:	43                   	inc    ebx
    1734:	e8 00 00 00 05       	call   5001739 <sysEnter_Vector+0x4ed1739>
    1739:	03 14 43             	add    edx,DWORD PTR [ebx+eax*2]
    173c:	00 30                	add    BYTE PTR [eax],dh
    173e:	15 28 00 00 00       	adc    eax,0x28
    1743:	06                   	push   es
    1744:	44                   	inc    esp
    1745:	3c 03                	cmp    al,0x3
    1747:	00 00                	add    BYTE PTR [eax],al
    1749:	05 03 10 43 00       	add    eax,0x431003
    174e:	30 08                	xor    BYTE PTR [eax],cl
    1750:	04 ab                	add    al,0xab
    1752:	01 00                	add    DWORD PTR [eax],eax
    1754:	00 00                	add    BYTE PTR [eax],al
    1756:	f5                   	cmc    
    1757:	01 00                	add    DWORD PTR [eax],eax
    1759:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    175c:	fb                   	sti    
    175d:	07                   	pop    es
    175e:	00 00                	add    BYTE PTR [eax],al
    1760:	04 01                	add    al,0x1
    1762:	fb                   	sti    
    1763:	00 00                	add    BYTE PTR [eax],al
    1765:	00 0c cc             	add    BYTE PTR [esp+ecx*8],cl
    1768:	06                   	push   es
    1769:	00 00                	add    BYTE PTR [eax],al
    176b:	79 00                	jns    176d <sysEnter_Vector-0x12e893>
    176d:	00 00                	add    BYTE PTR [eax],al
    176f:	90                   	nop
    1770:	0f 00                	(bad)  
    1772:	30 9b 01 00 00 0d    	xor    BYTE PTR [ebx+0xd000001],bl
    1778:	0a 00                	or     al,BYTE PTR [eax]
    177a:	00 02                	add    BYTE PTR [edx],al
    177c:	01 08                	add    DWORD PTR [eax],ecx
    177e:	5b                   	pop    ebx
    177f:	00 00                	add    BYTE PTR [eax],al
    1781:	00 02                	add    BYTE PTR [edx],al
    1783:	02 07                	add    al,BYTE PTR [edi]
    1785:	0e                   	push   cs
    1786:	00 00                	add    BYTE PTR [eax],al
    1788:	00 02                	add    BYTE PTR [edx],al
    178a:	04 07                	add    al,0x7
    178c:	3e 00 00             	add    BYTE PTR ds:[eax],al
    178f:	00 02                	add    BYTE PTR [edx],al
    1791:	04 07                	add    al,0x7
    1793:	39 00                	cmp    DWORD PTR [eax],eax
    1795:	00 00                	add    BYTE PTR [eax],al
    1797:	02 01                	add    al,BYTE PTR [ecx]
    1799:	06                   	push   es
    179a:	5d                   	pop    ebp
    179b:	00 00                	add    BYTE PTR [eax],al
    179d:	00 02                	add    BYTE PTR [edx],al
    179f:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    17a5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    17ac:	02 08                	add    cl,BYTE PTR [eax]
    17ae:	05 00 00 00 00       	add    eax,0x0
    17b3:	02 08                	add    cl,BYTE PTR [eax]
    17b5:	07                   	pop    es
    17b6:	34 00                	xor    al,0x0
    17b8:	00 00                	add    BYTE PTR [eax],al
    17ba:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    17c1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    17c4:	e8 00 00 00 04       	call   40017c9 <sysEnter_Vector+0x3ed17c9>
    17c9:	04 05                	add    al,0x5
    17cb:	04 7a                	add    al,0x7a
    17cd:	00 00                	add    BYTE PTR [eax],al
    17cf:	00 02                	add    BYTE PTR [edx],al
    17d1:	01 06                	add    DWORD PTR [esi],eax
    17d3:	64 00 00             	add    BYTE PTR fs:[eax],al
    17d6:	00 06                	add    BYTE PTR [esi],al
    17d8:	70 00                	jo     17da <sysEnter_Vector-0x12e826>
    17da:	00 00                	add    BYTE PTR [eax],al
    17dc:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    17df:	00 00                	add    BYTE PTR [eax],al
    17e1:	00 06                	add    BYTE PTR [esi],al
    17e3:	69 00 00 00 03 2a    	imul   eax,DWORD PTR [eax],0x2a030000
    17e9:	64 00 00             	add    BYTE PTR fs:[eax],al
    17ec:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    17f2:	00 07                	add    BYTE PTR [edi],al
    17f4:	7a 00                	jp     17f6 <sysEnter_Vector-0x12e80a>
    17f6:	00 00                	add    BYTE PTR [eax],al
    17f8:	06                   	push   es
    17f9:	60                   	pusha  
    17fa:	04 00                	add    al,0x0
    17fc:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
    17ff:	33 00                	xor    eax,DWORD PTR [eax]
    1801:	00 00                	add    BYTE PTR [eax],al
    1803:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1806:	a2 00 00 00 02       	mov    ds:0x2000000,al
    180b:	01 02                	add    DWORD PTR [edx],eax
    180d:	9c                   	pushf  
    180e:	00 00                	add    BYTE PTR [eax],al
    1810:	00 08                	add    BYTE PTR [eax],cl
    1812:	de 06                	fiadd  WORD PTR [esi]
    1814:	00 00                	add    BYTE PTR [eax],al
    1816:	01 0a                	add    DWORD PTR [edx],ecx
    1818:	72 00                	jb     181a <sysEnter_Vector-0x12e7e6>
    181a:	00 00                	add    BYTE PTR [eax],al
    181c:	90                   	nop
    181d:	0f 00                	(bad)  
    181f:	30 9b 01 00 00 01    	xor    BYTE PTR [ebx+0x1000001],bl
    1825:	9c                   	pushf  
    1826:	85 01                	test   DWORD PTR [ecx],eax
    1828:	00 00                	add    BYTE PTR [eax],al
    182a:	09 d9                	or     ecx,ebx
    182c:	06                   	push   es
    182d:	00 00                	add    BYTE PTR [eax],al
    182f:	01 0a                	add    DWORD PTR [edx],ecx
    1831:	72 00                	jb     1833 <sysEnter_Vector-0x12e7cd>
    1833:	00 00                	add    BYTE PTR [eax],al
    1835:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    183b:	63 00                	arpl   WORD PTR [eax],ax
    183d:	01 0a                	add    DWORD PTR [edx],ecx
    183f:	85 01                	test   DWORD PTR [ecx],eax
    1841:	00 00                	add    BYTE PTR [eax],al
    1843:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    1849:	01 0a                	add    DWORD PTR [edx],ecx
    184b:	a2 00 00 00 02       	mov    ds:0x2000000,al
    1850:	91                   	xchg   ecx,eax
    1851:	08 0b                	or     BYTE PTR [ebx],cl
    1853:	64                   	fs
    1854:	77 00                	ja     1856 <sysEnter_Vector-0x12e7aa>
    1856:	01 0c b4             	add    DWORD PTR [esp+esi*4],ecx
    1859:	00 00                	add    BYTE PTR [eax],al
    185b:	00 02                	add    BYTE PTR [edx],al
    185d:	91                   	xchg   ecx,eax
    185e:	5e                   	pop    esi
    185f:	0b 64 64 00          	or     esp,DWORD PTR [esp+eiz*2+0x0]
    1863:	01 0c b4             	add    DWORD PTR [esp+esi*4],ecx
    1866:	00 00                	add    BYTE PTR [eax],al
    1868:	00 02                	add    BYTE PTR [edx],al
    186a:	91                   	xchg   ecx,eax
    186b:	5f                   	pop    edi
    186c:	0c c2                	or     al,0xc2
    186e:	0f 00                	(bad)  
    1870:	30 7d 00             	xor    BYTE PTR [ebp+0x0],bh
    1873:	00 00                	add    BYTE PTR [eax],al
    1875:	3c 01                	cmp    al,0x1
    1877:	00 00                	add    BYTE PTR [eax],al
    1879:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    187c:	01 13                	add    DWORD PTR [ebx],edx
    187e:	8c 01                	mov    WORD PTR [ecx],es
    1880:	00 00                	add    BYTE PTR [eax],al
    1882:	02 91 74 0b 74 00    	add    dl,BYTE PTR [ecx+0x740b74]
    1888:	01 14 97             	add    DWORD PTR [edi+edx*4],edx
    188b:	01 00                	add    DWORD PTR [eax],eax
    188d:	00 02                	add    BYTE PTR [edx],al
    188f:	91                   	xchg   ecx,eax
    1890:	70 00                	jo     1892 <sysEnter_Vector-0x12e76e>
    1892:	0c 45                	or     al,0x45
    1894:	10 00                	adc    BYTE PTR [eax],al
    1896:	30 79 00             	xor    BYTE PTR [ecx+0x0],bh
    1899:	00 00                	add    BYTE PTR [eax],al
    189b:	62 01                	bound  eax,QWORD PTR [ecx]
    189d:	00 00                	add    BYTE PTR [eax],al
    189f:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    18a2:	01 23                	add    DWORD PTR [ebx],esp
    18a4:	8c 01                	mov    WORD PTR [ecx],es
    18a6:	00 00                	add    BYTE PTR [eax],al
    18a8:	02 91 6c 0b 74 00    	add    dl,BYTE PTR [ecx+0x740b6c]
    18ae:	01 24 97             	add    DWORD PTR [edi+edx*4],esp
    18b1:	01 00                	add    DWORD PTR [eax],eax
    18b3:	00 02                	add    BYTE PTR [edx],al
    18b5:	91                   	xchg   ecx,eax
    18b6:	68 00 0d be 10       	push   0x10be0d00
    18bb:	00 30                	add    BYTE PTR [eax],dh
    18bd:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    18c0:	00 0b                	add    BYTE PTR [ebx],cl
    18c2:	66                   	data16
    18c3:	00 01                	add    BYTE PTR [ecx],al
    18c5:	32 97 00 00 00 02    	xor    dl,BYTE PTR [edi+0x2000000]
    18cb:	91                   	xchg   ecx,eax
    18cc:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    18d1:	33 74 00 00          	xor    esi,DWORD PTR [eax+eax*1+0x0]
    18d5:	00 02                	add    BYTE PTR [edx],al
    18d7:	91                   	xchg   ecx,eax
    18d8:	60                   	pusha  
    18d9:	00 00                	add    BYTE PTR [eax],al
    18db:	05 04 8b 01 00       	add    eax,0x18b04
    18e0:	00 0e                	add    BYTE PTR [esi],cl
    18e2:	05 04 92 01 00       	add    eax,0x19204
    18e7:	00 07                	add    BYTE PTR [edi],al
    18e9:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    18ef:	81 00 00 00 0f 4b    	add    DWORD PTR [eax],0x4b0f0000
    18f5:	00 00                	add    BYTE PTR [eax],al
    18f7:	00 05 34 81 00 00    	add    BYTE PTR ds:0x8134,al
    18fd:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    1903:	30 0f                	xor    BYTE PTR [edi],cl
    1905:	b6 00                	mov    dh,0x0
    1907:	00 00                	add    BYTE PTR [eax],al
    1909:	05 35 81 00 00       	add    eax,0x8135
    190e:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
    1914:	30 0f                	xor    BYTE PTR [edi],cl
    1916:	62 01                	bound  eax,QWORD PTR [ecx]
    1918:	00 00                	add    BYTE PTR [eax],al
    191a:	05 36 81 00 00       	add    eax,0x8136
    191f:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    1925:	30 0f                	xor    BYTE PTR [edi],cl
    1927:	54                   	push   esp
    1928:	00 00                	add    BYTE PTR [eax],al
    192a:	00 06                	add    BYTE PTR [esi],al
    192c:	43                   	inc    ebx
    192d:	8c 00                	mov    WORD PTR [eax],es
    192f:	00 00                	add    BYTE PTR [eax],al
    1931:	05 03 14 43 00       	add    eax,0x431403
    1936:	30 0f                	xor    BYTE PTR [edi],cl
    1938:	28 00                	sub    BYTE PTR [eax],al
    193a:	00 00                	add    BYTE PTR [eax],al
    193c:	06                   	push   es
    193d:	44                   	inc    esp
    193e:	f2 01 00             	repnz add DWORD PTR [eax],eax
    1941:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
    1947:	30 05 04 74 00 00    	xor    BYTE PTR ds:0x7404,al
    194d:	00 00                	add    BYTE PTR [eax],al
    194f:	36 02 00             	add    al,BYTE PTR ss:[eax]
    1952:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1955:	bc 08 00 00 04       	mov    esp,0x4000008
    195a:	01 fb                	add    ebx,edi
    195c:	00 00                	add    BYTE PTR [eax],al
    195e:	00 0c f1             	add    BYTE PTR [ecx+esi*8],cl
    1961:	06                   	push   es
    1962:	00 00                	add    BYTE PTR [eax],al
    1964:	79 00                	jns    1966 <sysEnter_Vector-0x12e69a>
    1966:	00 00                	add    BYTE PTR [eax],al
    1968:	2c 11                	sub    al,0x11
    196a:	00 30                	add    BYTE PTR [eax],dh
    196c:	8e 01                	mov    es,WORD PTR [ecx]
    196e:	00 00                	add    BYTE PTR [eax],al
    1970:	fe 0a                	dec    BYTE PTR [edx]
    1972:	00 00                	add    BYTE PTR [eax],al
    1974:	02 01                	add    al,BYTE PTR [ecx]
    1976:	06                   	push   es
    1977:	64 00 00             	add    BYTE PTR fs:[eax],al
    197a:	00 02                	add    BYTE PTR [edx],al
    197c:	01 06                	add    DWORD PTR [esi],eax
    197e:	5d                   	pop    ebp
    197f:	00 00                	add    BYTE PTR [eax],al
    1981:	00 02                	add    BYTE PTR [edx],al
    1983:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    1989:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1990:	02 08                	add    cl,BYTE PTR [eax]
    1992:	05 00 00 00 00       	add    eax,0x0
    1997:	04 48                	add    al,0x48
    1999:	06                   	push   es
    199a:	00 00                	add    BYTE PTR [eax],al
    199c:	02 2e                	add    ch,BYTE PTR [esi]
    199e:	53                   	push   ebx
    199f:	00 00                	add    BYTE PTR [eax],al
    19a1:	00 02                	add    BYTE PTR [edx],al
    19a3:	01 08                	add    DWORD PTR [eax],ecx
    19a5:	5b                   	pop    ebx
    19a6:	00 00                	add    BYTE PTR [eax],al
    19a8:	00 04 0b             	add    BYTE PTR [ebx+ecx*1],al
    19ab:	07                   	pop    es
    19ac:	00 00                	add    BYTE PTR [eax],al
    19ae:	02 31                	add    dh,BYTE PTR [ecx]
    19b0:	65 00 00             	add    BYTE PTR gs:[eax],al
    19b3:	00 02                	add    BYTE PTR [edx],al
    19b5:	02 07                	add    al,BYTE PTR [edi]
    19b7:	0e                   	push   cs
    19b8:	00 00                	add    BYTE PTR [eax],al
    19ba:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    19bd:	00 00                	add    BYTE PTR [eax],al
    19bf:	00 02                	add    BYTE PTR [edx],al
    19c1:	34 77                	xor    al,0x77
    19c3:	00 00                	add    BYTE PTR [eax],al
    19c5:	00 02                	add    BYTE PTR [edx],al
    19c7:	04 07                	add    al,0x7
    19c9:	3e 00 00             	add    BYTE PTR ds:[eax],al
    19cc:	00 02                	add    BYTE PTR [edx],al
    19ce:	08 07                	or     BYTE PTR [edi],al
    19d0:	34 00                	xor    al,0x0
    19d2:	00 00                	add    BYTE PTR [eax],al
    19d4:	04 60                	add    al,0x60
    19d6:	04 00                	add    al,0x0
    19d8:	00 03                	add    BYTE PTR [ebx],al
    19da:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    19dd:	00 00                	add    BYTE PTR [eax],al
    19df:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    19e6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    19e9:	a2 00 00 00 02       	mov    ds:0x2000000,al
    19ee:	01 02                	add    DWORD PTR [edx],eax
    19f0:	9c                   	pushf  
    19f1:	00 00                	add    BYTE PTR [eax],al
    19f3:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    19f6:	00 00                	add    BYTE PTR [eax],al
    19f8:	00 04 2a             	add    BYTE PTR [edx+ebp*1],al
    19fb:	90                   	nop
    19fc:	00 00                	add    BYTE PTR [eax],al
    19fe:	00 02                	add    BYTE PTR [edx],al
    1a00:	04 07                	add    al,0x7
    1a02:	39 00                	cmp    DWORD PTR [eax],eax
    1a04:	00 00                	add    BYTE PTR [eax],al
    1a06:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1a09:	e8 00 00 00 05       	call   5001a0e <sysEnter_Vector+0x4ed1a0e>
    1a0e:	04 06                	add    al,0x6
    1a10:	04 25                	add    al,0x25
    1a12:	00 00                	add    BYTE PTR [eax],al
    1a14:	00 07                	add    BYTE PTR [edi],al
    1a16:	ea 06 00 00 01 08 be 	jmp    0xbe08:0x1000006
    1a1d:	00 00                	add    BYTE PTR [eax],al
    1a1f:	00 2c 11             	add    BYTE PTR [ecx+edx*1],ch
    1a22:	00 30                	add    BYTE PTR [eax],dh
    1a24:	c7 00 00 00 01 9c    	mov    DWORD PTR [eax],0x9c010000
    1a2a:	49                   	dec    ecx
    1a2b:	01 00                	add    DWORD PTR [eax],eax
    1a2d:	00 08                	add    BYTE PTR [eax],cl
    1a2f:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1a32:	01 08                	add    DWORD PTR [eax],ecx
    1a34:	be 00 00 00 02       	mov    esi,0x2000000
    1a39:	91                   	xchg   ecx,eax
    1a3a:	00 08                	add    BYTE PTR [eax],cl
    1a3c:	76 61                	jbe    1a9f <sysEnter_Vector-0x12e561>
    1a3e:	6c                   	ins    BYTE PTR es:[edi],dx
    1a3f:	00 01                	add    BYTE PTR [ecx],al
    1a41:	08 3a                	or     BYTE PTR [edx],bh
    1a43:	00 00                	add    BYTE PTR [eax],al
    1a45:	00 02                	add    BYTE PTR [edx],al
    1a47:	91                   	xchg   ecx,eax
    1a48:	04 08                	add    al,0x8
    1a4a:	6c                   	ins    BYTE PTR es:[edi],dx
    1a4b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1a4d:	00 01                	add    BYTE PTR [ecx],al
    1a4f:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    1a55:	91                   	xchg   ecx,eax
    1a56:	08 09                	or     BYTE PTR [ecx],cl
    1a58:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1a5b:	0a 49 01             	or     cl,BYTE PTR [ecx+0x1]
    1a5e:	00 00                	add    BYTE PTR [eax],al
    1a60:	02 91 74 09 65 00    	add    dl,BYTE PTR [ecx+0x650974]
    1a66:	01 0b                	add    DWORD PTR [ebx],ecx
    1a68:	4f                   	dec    edi
    1a69:	01 00                	add    DWORD PTR [eax],eax
    1a6b:	00 02                	add    BYTE PTR [edx],al
    1a6d:	91                   	xchg   ecx,eax
    1a6e:	70 0a                	jo     1a7a <sysEnter_Vector-0x12e586>
    1a70:	e5 06                	in     eax,0x6
    1a72:	00 00                	add    BYTE PTR [eax],al
    1a74:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    1a77:	00 00                	add    BYTE PTR [eax],al
    1a79:	00 02                	add    BYTE PTR [edx],al
    1a7b:	91                   	xchg   ecx,eax
    1a7c:	6a 09                	push   0x9
    1a7e:	66                   	data16
    1a7f:	00 01                	add    BYTE PTR [ecx],al
    1a81:	0d 55 01 00 00       	or     eax,0x155
    1a86:	02 91 6c 0a fe 06    	add    dl,BYTE PTR [ecx+0x6fe0a6c]
    1a8c:	00 00                	add    BYTE PTR [eax],al
    1a8e:	01 0e                	add    DWORD PTR [esi],ecx
    1a90:	6c                   	ins    BYTE PTR es:[edi],dx
    1a91:	00 00                	add    BYTE PTR [eax],al
    1a93:	00 02                	add    BYTE PTR [edx],al
    1a95:	91                   	xchg   ecx,eax
    1a96:	64 00 06             	add    BYTE PTR fs:[esi],al
    1a99:	04 48                	add    al,0x48
    1a9b:	00 00                	add    BYTE PTR [eax],al
    1a9d:	00 06                	add    BYTE PTR [esi],al
    1a9f:	04 5a                	add    al,0x5a
    1aa1:	00 00                	add    BYTE PTR [eax],al
    1aa3:	00 06                	add    BYTE PTR [esi],al
    1aa5:	04 6c                	add    al,0x6c
    1aa7:	00 00                	add    BYTE PTR [eax],al
    1aa9:	00 07                	add    BYTE PTR [edi],al
    1aab:	03 07                	add    eax,DWORD PTR [edi]
    1aad:	00 00                	add    BYTE PTR [eax],al
    1aaf:	01 1f                	add    DWORD PTR [edi],ebx
    1ab1:	be 00 00 00 f3       	mov    esi,0xf3000000
    1ab6:	11 00                	adc    DWORD PTR [eax],eax
    1ab8:	30 c7                	xor    bh,al
    1aba:	00 00                	add    BYTE PTR [eax],al
    1abc:	00 01                	add    BYTE PTR [ecx],al
    1abe:	9c                   	pushf  
    1abf:	de 01                	fiadd  WORD PTR [ecx]
    1ac1:	00 00                	add    BYTE PTR [eax],al
    1ac3:	08 64 31 00          	or     BYTE PTR [ecx+esi*1+0x0],ah
    1ac7:	01 1f                	add    DWORD PTR [edi],ebx
    1ac9:	be 00 00 00 02       	mov    esi,0x2000000
    1ace:	91                   	xchg   ecx,eax
    1acf:	00 08                	add    BYTE PTR [eax],cl
    1ad1:	76 61                	jbe    1b34 <sysEnter_Vector-0x12e4cc>
    1ad3:	6c                   	ins    BYTE PTR es:[edi],dx
    1ad4:	00 01                	add    BYTE PTR [ecx],al
    1ad6:	1f                   	pop    ds
    1ad7:	3a 00                	cmp    al,BYTE PTR [eax]
    1ad9:	00 00                	add    BYTE PTR [eax],al
    1adb:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    1ae1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1ae2:	00 01                	add    BYTE PTR [ecx],al
    1ae4:	1f                   	pop    ds
    1ae5:	85 00                	test   DWORD PTR [eax],eax
    1ae7:	00 00                	add    BYTE PTR [eax],al
    1ae9:	02 91 08 09 64 00    	add    dl,BYTE PTR [ecx+0x640908]
    1aef:	01 21                	add    DWORD PTR [ecx],esp
    1af1:	49                   	dec    ecx
    1af2:	01 00                	add    DWORD PTR [eax],eax
    1af4:	00 02                	add    BYTE PTR [edx],al
    1af6:	91                   	xchg   ecx,eax
    1af7:	74 09                	je     1b02 <sysEnter_Vector-0x12e4fe>
    1af9:	65 00 01             	add    BYTE PTR gs:[ecx],al
    1afc:	22 4f 01             	and    cl,BYTE PTR [edi+0x1]
    1aff:	00 00                	add    BYTE PTR [eax],al
    1b01:	02 91 70 0a e5 06    	add    dl,BYTE PTR [ecx+0x6e50a70]
    1b07:	00 00                	add    BYTE PTR [eax],al
    1b09:	01 23                	add    DWORD PTR [ebx],esp
    1b0b:	5a                   	pop    edx
    1b0c:	00 00                	add    BYTE PTR [eax],al
    1b0e:	00 02                	add    BYTE PTR [edx],al
    1b10:	91                   	xchg   ecx,eax
    1b11:	6a 09                	push   0x9
    1b13:	66                   	data16
    1b14:	00 01                	add    BYTE PTR [ecx],al
    1b16:	24 55                	and    al,0x55
    1b18:	01 00                	add    DWORD PTR [eax],eax
    1b1a:	00 02                	add    BYTE PTR [edx],al
    1b1c:	91                   	xchg   ecx,eax
    1b1d:	6c                   	ins    BYTE PTR es:[edi],dx
    1b1e:	0a fe                	or     bh,dh
    1b20:	06                   	push   es
    1b21:	00 00                	add    BYTE PTR [eax],al
    1b23:	01 25 6c 00 00 00    	add    DWORD PTR ds:0x6c,esp
    1b29:	02 91 64 00 0b 4b    	add    dl,BYTE PTR [ecx+0x4b0b0064]
    1b2f:	00 00                	add    BYTE PTR [eax],al
    1b31:	00 05 34 6c 00 00    	add    BYTE PTR ds:0x6c34,al
    1b37:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    1b3d:	30 0b                	xor    BYTE PTR [ebx],cl
    1b3f:	b6 00                	mov    dh,0x0
    1b41:	00 00                	add    BYTE PTR [eax],al
    1b43:	05 35 6c 00 00       	add    eax,0x6c35
    1b48:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
    1b4e:	30 0b                	xor    BYTE PTR [ebx],cl
    1b50:	62 01                	bound  eax,QWORD PTR [ecx]
    1b52:	00 00                	add    BYTE PTR [eax],al
    1b54:	05 36 6c 00 00       	add    eax,0x6c36
    1b59:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    1b5f:	30 0b                	xor    BYTE PTR [ebx],cl
    1b61:	54                   	push   esp
    1b62:	00 00                	add    BYTE PTR [eax],al
    1b64:	00 06                	add    BYTE PTR [esi],al
    1b66:	43                   	inc    ebx
    1b67:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1b68:	00 00                	add    BYTE PTR [eax],al
    1b6a:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    1b70:	30 0b                	xor    BYTE PTR [ebx],cl
    1b72:	28 00                	sub    BYTE PTR [eax],al
    1b74:	00 00                	add    BYTE PTR [eax],al
    1b76:	06                   	push   es
    1b77:	44                   	inc    esp
    1b78:	33 02                	xor    eax,DWORD PTR [edx]
    1b7a:	00 00                	add    BYTE PTR [eax],al
    1b7c:	05 03 10 43 00       	add    eax,0x431003
    1b81:	30 06                	xor    BYTE PTR [esi],al
    1b83:	04 c0                	add    al,0xc0
    1b85:	00 00                	add    BYTE PTR [eax],al
    1b87:	00 00                	add    BYTE PTR [eax],al
    1b89:	80 01 00             	add    BYTE PTR [ecx],0x0
    1b8c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1b8f:	5d                   	pop    ebp
    1b90:	09 00                	or     DWORD PTR [eax],eax
    1b92:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1b95:	fb                   	sti    
    1b96:	00 00                	add    BYTE PTR [eax],al
    1b98:	00 0c 30             	add    BYTE PTR [eax+esi*1],cl
    1b9b:	07                   	pop    es
    1b9c:	00 00                	add    BYTE PTR [eax],al
    1b9e:	79 00                	jns    1ba0 <sysEnter_Vector-0x12e460>
    1ba0:	00 00                	add    BYTE PTR [eax],al
    1ba2:	bc 12 00 30 10       	mov    esp,0x10300012
    1ba7:	00 00                	add    BYTE PTR [eax],al
    1ba9:	00 e6                	add    dh,ah
    1bab:	0b 00                	or     eax,DWORD PTR [eax]
    1bad:	00 02                	add    BYTE PTR [edx],al
    1baf:	01 06                	add    DWORD PTR [esi],eax
    1bb1:	64 00 00             	add    BYTE PTR fs:[eax],al
    1bb4:	00 02                	add    BYTE PTR [edx],al
    1bb6:	01 06                	add    DWORD PTR [esi],eax
    1bb8:	5d                   	pop    ebp
    1bb9:	00 00                	add    BYTE PTR [eax],al
    1bbb:	00 02                	add    BYTE PTR [edx],al
    1bbd:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    1bc3:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1bca:	02 08                	add    cl,BYTE PTR [eax]
    1bcc:	05 00 00 00 00       	add    eax,0x0
    1bd1:	02 01                	add    al,BYTE PTR [ecx]
    1bd3:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1bd6:	00 00                	add    BYTE PTR [eax],al
    1bd8:	02 02                	add    al,BYTE PTR [edx]
    1bda:	07                   	pop    es
    1bdb:	0e                   	push   cs
    1bdc:	00 00                	add    BYTE PTR [eax],al
    1bde:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    1be1:	00 00                	add    BYTE PTR [eax],al
    1be3:	00 02                	add    BYTE PTR [edx],al
    1be5:	34 61                	xor    al,0x61
    1be7:	00 00                	add    BYTE PTR [eax],al
    1be9:	00 02                	add    BYTE PTR [edx],al
    1beb:	04 07                	add    al,0x7
    1bed:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1bf0:	00 02                	add    BYTE PTR [edx],al
    1bf2:	08 07                	or     BYTE PTR [edi],al
    1bf4:	34 00                	xor    al,0x0
    1bf6:	00 00                	add    BYTE PTR [eax],al
    1bf8:	04 60                	add    al,0x60
    1bfa:	04 00                	add    al,0x0
    1bfc:	00 03                	add    BYTE PTR [ebx],al
    1bfe:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1c01:	00 00                	add    BYTE PTR [eax],al
    1c03:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1c0a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1c0d:	a2 00 00 00 02       	mov    ds:0x2000000,al
    1c12:	01 02                	add    DWORD PTR [edx],eax
    1c14:	9c                   	pushf  
    1c15:	00 00                	add    BYTE PTR [eax],al
    1c17:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1c1a:	00 00                	add    BYTE PTR [eax],al
    1c1c:	00 04 2a             	add    BYTE PTR [edx+ebp*1],al
    1c1f:	7a 00                	jp     1c21 <sysEnter_Vector-0x12e3df>
    1c21:	00 00                	add    BYTE PTR [eax],al
    1c23:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1c26:	39 00                	cmp    DWORD PTR [eax],eax
    1c28:	00 00                	add    BYTE PTR [eax],al
    1c2a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1c2d:	e8 00 00 00 05       	call   5001c32 <sysEnter_Vector+0x4ed1c32>
    1c32:	04 06                	add    al,0x6
    1c34:	04 25                	add    al,0x25
    1c36:	00 00                	add    BYTE PTR [eax],al
    1c38:	00 04 19             	add    BYTE PTR [ecx+ebx*1],al
    1c3b:	07                   	pop    es
    1c3c:	00 00                	add    BYTE PTR [eax],al
    1c3e:	05 15 7a 00 00       	add    eax,0x7a15
    1c43:	00 07                	add    BYTE PTR [edi],al
    1c45:	2b 07                	sub    eax,DWORD PTR [edi]
    1c47:	00 00                	add    BYTE PTR [eax],al
    1c49:	01 09                	add    DWORD PTR [ecx],ecx
    1c4b:	a8 00                	test   al,0x0
    1c4d:	00 00                	add    BYTE PTR [eax],al
    1c4f:	bc 12 00 30 10       	mov    esp,0x10300012
    1c54:	00 00                	add    BYTE PTR [eax],al
    1c56:	00 01                	add    BYTE PTR [ecx],al
    1c58:	9c                   	pushf  
    1c59:	28 01                	sub    BYTE PTR [ecx],al
    1c5b:	00 00                	add    BYTE PTR [eax],al
    1c5d:	08 14 07             	or     BYTE PTR [edi+eax*1],dl
    1c60:	00 00                	add    BYTE PTR [eax],al
    1c62:	01 09                	add    DWORD PTR [ecx],ecx
    1c64:	a8 00                	test   al,0x0
    1c66:	00 00                	add    BYTE PTR [eax],al
    1c68:	02 91 00 09 6c 65    	add    dl,BYTE PTR [ecx+0x656c0900]
    1c6e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1c6f:	00 01                	add    BYTE PTR [ecx],al
    1c71:	09 6f 00             	or     DWORD PTR [edi+0x0],ebp
    1c74:	00 00                	add    BYTE PTR [eax],al
    1c76:	02 91 04 08 1f 07    	add    dl,BYTE PTR [ecx+0x71f0804]
    1c7c:	00 00                	add    BYTE PTR [eax],al
    1c7e:	01 09                	add    DWORD PTR [ecx],ecx
    1c80:	3a 00                	cmp    al,BYTE PTR [eax]
    1c82:	00 00                	add    BYTE PTR [eax],al
    1c84:	02 91 08 08 7a 08    	add    dl,BYTE PTR [ecx+0x87a0808]
    1c8a:	00 00                	add    BYTE PTR [eax],al
    1c8c:	01 09                	add    DWORD PTR [ecx],ecx
    1c8e:	3a 00                	cmp    al,BYTE PTR [eax]
    1c90:	00 00                	add    BYTE PTR [eax],al
    1c92:	02 91 0c 09 66 64    	add    dl,BYTE PTR [ecx+0x6466090c]
    1c98:	00 01                	add    BYTE PTR [ecx],al
    1c9a:	09 3a                	or     DWORD PTR [edx],edi
    1c9c:	00 00                	add    BYTE PTR [eax],al
    1c9e:	00 02                	add    BYTE PTR [edx],al
    1ca0:	91                   	xchg   ecx,eax
    1ca1:	10 08                	adc    BYTE PTR [eax],cl
    1ca3:	24 07                	and    al,0x7
    1ca5:	00 00                	add    BYTE PTR [eax],al
    1ca7:	01 09                	add    DWORD PTR [ecx],ecx
    1ca9:	b0 00                	mov    al,0x0
    1cab:	00 00                	add    BYTE PTR [eax],al
    1cad:	02 91 14 00 0a 4b    	add    dl,BYTE PTR [ecx+0x4b0a0014]
    1cb3:	00 00                	add    BYTE PTR [eax],al
    1cb5:	00 06                	add    BYTE PTR [esi],al
    1cb7:	34 56                	xor    al,0x56
    1cb9:	00 00                	add    BYTE PTR [eax],al
    1cbb:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    1cc1:	30 0a                	xor    BYTE PTR [edx],cl
    1cc3:	b6 00                	mov    dh,0x0
    1cc5:	00 00                	add    BYTE PTR [eax],al
    1cc7:	06                   	push   es
    1cc8:	35 56 00 00 00       	xor    eax,0x56
    1ccd:	05 03 0c 43 00       	add    eax,0x430c03
    1cd2:	30 0a                	xor    BYTE PTR [edx],cl
    1cd4:	62 01                	bound  eax,QWORD PTR [ecx]
    1cd6:	00 00                	add    BYTE PTR [eax],al
    1cd8:	06                   	push   es
    1cd9:	36                   	ss
    1cda:	56                   	push   esi
    1cdb:	00 00                	add    BYTE PTR [eax],al
    1cdd:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    1ce3:	30 0a                	xor    BYTE PTR [edx],cl
    1ce5:	54                   	push   esp
    1ce6:	00 00                	add    BYTE PTR [eax],al
    1ce8:	00 07                	add    BYTE PTR [edi],al
    1cea:	43                   	inc    ebx
    1ceb:	8f 00                	pop    DWORD PTR [eax]
    1ced:	00 00                	add    BYTE PTR [eax],al
    1cef:	05 03 14 43 00       	add    eax,0x431403
    1cf4:	30 0a                	xor    BYTE PTR [edx],cl
    1cf6:	28 00                	sub    BYTE PTR [eax],al
    1cf8:	00 00                	add    BYTE PTR [eax],al
    1cfa:	07                   	pop    es
    1cfb:	44                   	inc    esp
    1cfc:	7d 01                	jge    1cff <sysEnter_Vector-0x12e301>
    1cfe:	00 00                	add    BYTE PTR [eax],al
    1d00:	05 03 10 43 00       	add    eax,0x431003
    1d05:	30 06                	xor    BYTE PTR [esi],al
    1d07:	04 aa                	add    al,0xaa
    1d09:	00 00                	add    BYTE PTR [eax],al
    1d0b:	00 00                	add    BYTE PTR [eax],al
    1d0d:	10 06                	adc    BYTE PTR [esi],al
    1d0f:	00 00                	add    BYTE PTR [eax],al
    1d11:	04 00                	add    al,0x0
    1d13:	ef                   	out    dx,eax
    1d14:	09 00                	or     DWORD PTR [eax],eax
    1d16:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1d19:	fb                   	sti    
    1d1a:	00 00                	add    BYTE PTR [eax],al
    1d1c:	00 0c a7             	add    BYTE PTR [edi+eiz*4],cl
    1d1f:	07                   	pop    es
    1d20:	00 00                	add    BYTE PTR [eax],al
    1d22:	79 00                	jns    1d24 <sysEnter_Vector-0x12e2dc>
    1d24:	00 00                	add    BYTE PTR [eax],al
    1d26:	cc                   	int3   
    1d27:	12 00                	adc    al,BYTE PTR [eax]
    1d29:	30 60 02             	xor    BYTE PTR [eax+0x2],ah
    1d2c:	00 00                	add    BYTE PTR [eax],al
    1d2e:	b3 0c                	mov    bl,0xc
    1d30:	00 00                	add    BYTE PTR [eax],al
    1d32:	02 01                	add    al,BYTE PTR [ecx]
    1d34:	06                   	push   es
    1d35:	64 00 00             	add    BYTE PTR fs:[eax],al
    1d38:	00 02                	add    BYTE PTR [edx],al
    1d3a:	01 06                	add    DWORD PTR [esi],eax
    1d3c:	5d                   	pop    ebp
    1d3d:	00 00                	add    BYTE PTR [eax],al
    1d3f:	00 02                	add    BYTE PTR [edx],al
    1d41:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    1d47:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1d4e:	02 08                	add    cl,BYTE PTR [eax]
    1d50:	05 00 00 00 00       	add    eax,0x0
    1d55:	02 01                	add    al,BYTE PTR [ecx]
    1d57:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1d5a:	00 00                	add    BYTE PTR [eax],al
    1d5c:	02 02                	add    al,BYTE PTR [edx]
    1d5e:	07                   	pop    es
    1d5f:	0e                   	push   cs
    1d60:	00 00                	add    BYTE PTR [eax],al
    1d62:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    1d65:	00 00                	add    BYTE PTR [eax],al
    1d67:	00 02                	add    BYTE PTR [edx],al
    1d69:	34 61                	xor    al,0x61
    1d6b:	00 00                	add    BYTE PTR [eax],al
    1d6d:	00 02                	add    BYTE PTR [edx],al
    1d6f:	04 07                	add    al,0x7
    1d71:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1d74:	00 04 41             	add    BYTE PTR [ecx+eax*2],al
    1d77:	07                   	pop    es
    1d78:	00 00                	add    BYTE PTR [eax],al
    1d7a:	02 37                	add    dh,BYTE PTR [edi]
    1d7c:	73 00                	jae    1d7e <sysEnter_Vector-0x12e282>
    1d7e:	00 00                	add    BYTE PTR [eax],al
    1d80:	02 08                	add    cl,BYTE PTR [eax]
    1d82:	07                   	pop    es
    1d83:	34 00                	xor    al,0x0
    1d85:	00 00                	add    BYTE PTR [eax],al
    1d87:	04 60                	add    al,0x60
    1d89:	04 00                	add    al,0x0
    1d8b:	00 03                	add    BYTE PTR [ebx],al
    1d8d:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1d90:	00 00                	add    BYTE PTR [eax],al
    1d92:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1d99:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1d9c:	a2 00 00 00 02       	mov    ds:0x2000000,al
    1da1:	01 02                	add    DWORD PTR [edx],eax
    1da3:	9c                   	pushf  
    1da4:	00 00                	add    BYTE PTR [eax],al
    1da6:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1da9:	00 00                	add    BYTE PTR [eax],al
    1dab:	00 04 2a             	add    BYTE PTR [edx+ebp*1],al
    1dae:	85 00                	test   DWORD PTR [eax],eax
    1db0:	00 00                	add    BYTE PTR [eax],al
    1db2:	05 04 ab 00 00       	add    eax,0xab04
    1db7:	00 06                	add    BYTE PTR [esi],al
    1db9:	25 00 00 00 02       	and    eax,0x2000000
    1dbe:	04 07                	add    al,0x7
    1dc0:	39 00                	cmp    DWORD PTR [eax],eax
    1dc2:	00 00                	add    BYTE PTR [eax],al
    1dc4:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1dc7:	e8 00 00 00 07       	call   7001dcc <sysEnter_Vector+0x6ed1dcc>
    1dcc:	04 05                	add    al,0x5
    1dce:	04 25                	add    al,0x25
    1dd0:	00 00                	add    BYTE PTR [eax],al
    1dd2:	00 08                	add    BYTE PTR [eax],cl
    1dd4:	4d                   	dec    ebp
    1dd5:	08 00                	or     BYTE PTR [eax],al
    1dd7:	00 0c 05 17 f7 00 00 	add    BYTE PTR [eax*1+0xf717],cl
    1dde:	00 09                	add    BYTE PTR [ecx],cl
    1de0:	64                   	fs
    1de1:	07                   	pop    es
    1de2:	00 00                	add    BYTE PTR [eax],al
    1de4:	05 19 f7 00 00       	add    eax,0xf719
    1de9:	00 00                	add    BYTE PTR [eax],al
    1deb:	09 bd 06 00 00 05    	or     DWORD PTR [ebp+0x5000006],edi
    1df1:	19 f7                	sbb    edi,esi
    1df3:	00 00                	add    BYTE PTR [eax],al
    1df5:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1df8:	45                   	inc    ebp
    1df9:	08 00                	or     BYTE PTR [eax],al
    1dfb:	00 05 1a be 00 00    	add    BYTE PTR ds:0xbe1a,al
    1e01:	00 08                	add    BYTE PTR [eax],cl
    1e03:	00 05 04 c6 00 00    	add    BYTE PTR ds:0xc604,al
    1e09:	00 04 d6             	add    BYTE PTR [esi+edx*8],al
    1e0c:	07                   	pop    es
    1e0d:	00 00                	add    BYTE PTR [eax],al
    1e0f:	05 1b c6 00 00       	add    eax,0xc61b
    1e14:	00 08                	add    BYTE PTR [eax],cl
    1e16:	82                   	(bad)  
    1e17:	07                   	pop    es
    1e18:	00 00                	add    BYTE PTR [eax],al
    1e1a:	14 06                	adc    al,0x6
    1e1c:	1b 39                	sbb    edi,DWORD PTR [ecx]
    1e1e:	01 00                	add    DWORD PTR [eax],eax
    1e20:	00 09                	add    BYTE PTR [ecx],cl
    1e22:	7b 07                	jnp    1e2b <sysEnter_Vector-0x12e1d5>
    1e24:	00 00                	add    BYTE PTR [eax],al
    1e26:	06                   	push   es
    1e27:	1d fd 00 00 00       	sbb    eax,0xfd
    1e2c:	00 09                	add    BYTE PTR [ecx],cl
    1e2e:	3b 07                	cmp    eax,DWORD PTR [edi]
    1e30:	00 00                	add    BYTE PTR [eax],al
    1e32:	06                   	push   es
    1e33:	1e                   	push   ds
    1e34:	61                   	popa   
    1e35:	00 00                	add    BYTE PTR [eax],al
    1e37:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1e3a:	b8 08 00 00 06       	mov    eax,0x6000008
    1e3f:	1f                   	pop    ds
    1e40:	6a 01                	push   0x1
    1e42:	00 00                	add    BYTE PTR [eax],al
    1e44:	10 00                	adc    BYTE PTR [eax],al
    1e46:	08 b3 07 00 00 0c    	or     BYTE PTR [ebx+0xc000007],dh
    1e4c:	06                   	push   es
    1e4d:	37                   	aaa    
    1e4e:	6a 01                	push   0x1
    1e50:	00 00                	add    BYTE PTR [eax],al
    1e52:	09 a0 07 00 00 06    	or     DWORD PTR [eax+0x6000007],esp
    1e58:	39 c0                	cmp    eax,eax
    1e5a:	00 00                	add    BYTE PTR [eax],al
    1e5c:	00 00                	add    BYTE PTR [eax],al
    1e5e:	09 bf 08 00 00 06    	or     DWORD PTR [edi+0x6000008],edi
    1e64:	3a 73 02             	cmp    dh,BYTE PTR [ebx+0x2]
    1e67:	00 00                	add    BYTE PTR [eax],al
    1e69:	04 09                	add    al,0x9
    1e6b:	d0 08                	ror    BYTE PTR [eax],1
    1e6d:	00 00                	add    BYTE PTR [eax],al
    1e6f:	06                   	push   es
    1e70:	3b 6a 01             	cmp    ebp,DWORD PTR [edx+0x1]
    1e73:	00 00                	add    BYTE PTR [eax],al
    1e75:	08 00                	or     BYTE PTR [eax],al
    1e77:	05 04 39 01 00       	add    eax,0x13904
    1e7c:	00 08                	add    BYTE PTR [eax],cl
    1e7e:	90                   	nop
    1e7f:	07                   	pop    es
    1e80:	00 00                	add    BYTE PTR [eax],al
    1e82:	0c 06                	or     al,0x6
    1e84:	22 a1 01 00 00 09    	and    ah,BYTE PTR [ecx+0x9000001]
    1e8a:	5c                   	pop    esp
    1e8b:	08 00                	or     BYTE PTR [eax],al
    1e8d:	00 06                	add    BYTE PTR [esi],al
    1e8f:	24 6a                	and    al,0x6a
    1e91:	01 00                	add    DWORD PTR [eax],eax
    1e93:	00 00                	add    BYTE PTR [eax],al
    1e95:	09 74 07 00          	or     DWORD PTR [edi+eax*1+0x0],esi
    1e99:	00 06                	add    BYTE PTR [esi],al
    1e9b:	25 a1 01 00 00       	and    eax,0x1a1
    1ea0:	04 09                	add    al,0x9
    1ea2:	4a                   	dec    edx
    1ea3:	07                   	pop    es
    1ea4:	00 00                	add    BYTE PTR [eax],al
    1ea6:	06                   	push   es
    1ea7:	26 3a 00             	cmp    al,BYTE PTR es:[eax]
    1eaa:	00 00                	add    BYTE PTR [eax],al
    1eac:	08 00                	or     BYTE PTR [eax],al
    1eae:	05 04 08 01 00       	add    eax,0x10804
    1eb3:	00 08                	add    BYTE PTR [eax],cl
    1eb5:	c1 08 00             	ror    DWORD PTR [eax],0x0
    1eb8:	00 24 06             	add    BYTE PTR [esi+eax*1],ah
    1ebb:	29 14 02             	sub    DWORD PTR [edx+eax*1],edx
    1ebe:	00 00                	add    BYTE PTR [eax],al
    1ec0:	09 20                	or     DWORD PTR [eax],esp
    1ec2:	08 00                	or     BYTE PTR [eax],al
    1ec4:	00 06                	add    BYTE PTR [esi],al
    1ec6:	2b 61 00             	sub    esp,DWORD PTR [ecx+0x0]
    1ec9:	00 00                	add    BYTE PTR [eax],al
    1ecb:	00 09                	add    BYTE PTR [ecx],cl
    1ecd:	8f 08                	(bad)  
    1ecf:	00 00                	add    BYTE PTR [eax],al
    1ed1:	06                   	push   es
    1ed2:	2c 4f                	sub    al,0x4f
    1ed4:	00 00                	add    BYTE PTR [eax],al
    1ed6:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1ed9:	fc                   	cld    
    1eda:	07                   	pop    es
    1edb:	00 00                	add    BYTE PTR [eax],al
    1edd:	06                   	push   es
    1ede:	2d 4f 00 00 00       	sub    eax,0x4f
    1ee3:	06                   	push   es
    1ee4:	09 89 08 00 00 06    	or     DWORD PTR [ecx+0x6000008],ecx
    1eea:	2e                   	cs
    1eeb:	61                   	popa   
    1eec:	00 00                	add    BYTE PTR [eax],al
    1eee:	00 08                	add    BYTE PTR [eax],cl
    1ef0:	09 d0                	or     eax,edx
    1ef2:	07                   	pop    es
    1ef3:	00 00                	add    BYTE PTR [eax],al
    1ef5:	06                   	push   es
    1ef6:	2f                   	das    
    1ef7:	61                   	popa   
    1ef8:	00 00                	add    BYTE PTR [eax],al
    1efa:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1efd:	78 08                	js     1f07 <sysEnter_Vector-0x12e0f9>
    1eff:	00 00                	add    BYTE PTR [eax],al
    1f01:	06                   	push   es
    1f02:	30 61 00             	xor    BYTE PTR [ecx+0x0],ah
    1f05:	00 00                	add    BYTE PTR [eax],al
    1f07:	10 09                	adc    BYTE PTR [ecx],cl
    1f09:	57                   	push   edi
    1f0a:	08 00                	or     BYTE PTR [eax],al
    1f0c:	00 06                	add    BYTE PTR [esi],al
    1f0e:	31 5d 02             	xor    DWORD PTR [ebp+0x2],ebx
    1f11:	00 00                	add    BYTE PTR [eax],al
    1f13:	14 09                	adc    al,0x9
    1f15:	8e 07                	mov    es,WORD PTR [edi]
    1f17:	00 00                	add    BYTE PTR [eax],al
    1f19:	06                   	push   es
    1f1a:	32 70 01             	xor    dh,BYTE PTR [eax+0x1]
    1f1d:	00 00                	add    BYTE PTR [eax],al
    1f1f:	18 00                	sbb    BYTE PTR [eax],al
    1f21:	08 eb                	or     bl,ch
    1f23:	07                   	pop    es
    1f24:	00 00                	add    BYTE PTR [eax],al
    1f26:	14 06                	adc    al,0x6
    1f28:	3e                   	ds
    1f29:	5d                   	pop    ebp
    1f2a:	02 00                	add    al,BYTE PTR [eax]
    1f2c:	00 09                	add    BYTE PTR [ecx],cl
    1f2e:	f2 08 00             	repnz or BYTE PTR [eax],al
    1f31:	00 06                	add    BYTE PTR [esi],al
    1f33:	40                   	inc    eax
    1f34:	8d 02                	lea    eax,[edx]
    1f36:	00 00                	add    BYTE PTR [eax],al
    1f38:	00 09                	add    BYTE PTR [ecx],cl
    1f3a:	69 07 00 00 06 41    	imul   eax,DWORD PTR [edi],0x41060000
    1f40:	8d 02                	lea    eax,[edx]
    1f42:	00 00                	add    BYTE PTR [eax],al
    1f44:	04 09                	add    al,0x9
    1f46:	ca 07 00             	retf   0x7
    1f49:	00 06                	add    BYTE PTR [esi],al
    1f4b:	42                   	inc    edx
    1f4c:	8d 02                	lea    eax,[edx]
    1f4e:	00 00                	add    BYTE PTR [eax],al
    1f50:	08 09                	or     BYTE PTR [ecx],cl
    1f52:	5e                   	pop    esi
    1f53:	07                   	pop    es
    1f54:	00 00                	add    BYTE PTR [eax],al
    1f56:	06                   	push   es
    1f57:	43                   	inc    ebx
    1f58:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    1f59:	02 00                	add    al,BYTE PTR [eax]
    1f5b:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1f5e:	99                   	cdq    
    1f5f:	07                   	pop    es
    1f60:	00 00                	add    BYTE PTR [eax],al
    1f62:	06                   	push   es
    1f63:	44                   	inc    esp
    1f64:	d0 02                	rol    BYTE PTR [edx],1
    1f66:	00 00                	add    BYTE PTR [eax],al
    1f68:	10 00                	adc    BYTE PTR [eax],al
    1f6a:	05 04 63 02 00       	add    eax,0x26304
    1f6f:	00 06                	add    BYTE PTR [esi],al
    1f71:	14 02                	adc    al,0x2
    1f73:	00 00                	add    BYTE PTR [eax],al
    1f75:	04 a3                	add    al,0xa3
    1f77:	08 00                	or     BYTE PTR [eax],al
    1f79:	00 06                	add    BYTE PTR [esi],al
    1f7b:	35 a7 01 00 00       	xor    eax,0x1a7
    1f80:	05 04 a7 01 00       	add    eax,0x1a704
    1f85:	00 0a                	add    BYTE PTR [edx],cl
    1f87:	3a 00                	cmp    al,BYTE PTR [eax]
    1f89:	00 00                	add    BYTE PTR [eax],al
    1f8b:	8d 02                	lea    eax,[edx]
    1f8d:	00 00                	add    BYTE PTR [eax],al
    1f8f:	0b 73 02             	or     esi,DWORD PTR [ebx+0x2]
    1f92:	00 00                	add    BYTE PTR [eax],al
    1f94:	0b 6a 01             	or     ebp,DWORD PTR [edx+0x1]
    1f97:	00 00                	add    BYTE PTR [eax],al
    1f99:	00 05 04 79 02 00    	add    BYTE PTR ds:0x27904,al
    1f9f:	00 0a                	add    BYTE PTR [edx],cl
    1fa1:	3a 00                	cmp    al,BYTE PTR [eax]
    1fa3:	00 00                	add    BYTE PTR [eax],al
    1fa5:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    1fa6:	02 00                	add    al,BYTE PTR [eax]
    1fa8:	00 0b                	add    BYTE PTR [ebx],cl
    1faa:	73 02                	jae    1fae <sysEnter_Vector-0x12e052>
    1fac:	00 00                	add    BYTE PTR [eax],al
    1fae:	0b 39                	or     edi,DWORD PTR [ecx]
    1fb0:	01 00                	add    DWORD PTR [eax],eax
    1fb2:	00 00                	add    BYTE PTR [eax],al
    1fb4:	05 04 93 02 00       	add    eax,0x29304
    1fb9:	00 0a                	add    BYTE PTR [edx],cl
    1fbb:	3a 00                	cmp    al,BYTE PTR [eax]
    1fbd:	00 00                	add    BYTE PTR [eax],al
    1fbf:	d0 02                	rol    BYTE PTR [edx],1
    1fc1:	00 00                	add    BYTE PTR [eax],al
    1fc3:	0b 73 02             	or     esi,DWORD PTR [ebx+0x2]
    1fc6:	00 00                	add    BYTE PTR [eax],al
    1fc8:	0b 6a 01             	or     ebp,DWORD PTR [edx+0x1]
    1fcb:	00 00                	add    BYTE PTR [eax],al
    1fcd:	0b 73 02             	or     esi,DWORD PTR [ebx+0x2]
    1fd0:	00 00                	add    BYTE PTR [eax],al
    1fd2:	0b 6a 01             	or     ebp,DWORD PTR [edx+0x1]
    1fd5:	00 00                	add    BYTE PTR [eax],al
    1fd7:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    1fda:	00 00                	add    BYTE PTR [eax],al
    1fdc:	00 05 04 ad 02 00    	add    BYTE PTR ds:0x2ad04,al
    1fe2:	00 04 71             	add    BYTE PTR [ecx+esi*2],al
    1fe5:	08 00                	or     BYTE PTR [eax],al
    1fe7:	00 06                	add    BYTE PTR [esi],al
    1fe9:	47                   	inc    edi
    1fea:	e1 02                	loope  1fee <sysEnter_Vector-0x12e012>
    1fec:	00 00                	add    BYTE PTR [eax],al
    1fee:	08 b3 08 00 00 10    	or     BYTE PTR [ebx+0x10000008],dh
    1ff4:	06                   	push   es
    1ff5:	4f                   	dec    edi
    1ff6:	12 03                	adc    al,BYTE PTR [ebx]
    1ff8:	00 00                	add    BYTE PTR [eax],al
    1ffa:	09 e1                	or     ecx,esp
    1ffc:	08 00                	or     BYTE PTR [eax],al
    1ffe:	00 06                	add    BYTE PTR [esi],al
    2000:	51                   	push   ecx
    2001:	c0 00 00             	rol    BYTE PTR [eax],0x0
    2004:	00 00                	add    BYTE PTR [eax],al
    2006:	09 d9                	or     ecx,ebx
    2008:	08 00                	or     BYTE PTR [eax],al
    200a:	00 06                	add    BYTE PTR [esi],al
    200c:	52                   	push   edx
    200d:	73 02                	jae    2011 <sysEnter_Vector-0x12dfef>
    200f:	00 00                	add    BYTE PTR [eax],al
    2011:	04 09                	add    al,0x9
    2013:	6c                   	ins    BYTE PTR es:[edi],dx
    2014:	08 00                	or     BYTE PTR [eax],al
    2016:	00 06                	add    BYTE PTR [esi],al
    2018:	53                   	push   ebx
    2019:	12 03                	adc    al,BYTE PTR [ebx]
    201b:	00 00                	add    BYTE PTR [eax],al
    201d:	08 00                	or     BYTE PTR [eax],al
    201f:	08 ba 07 00 00 08    	or     BYTE PTR [edx+0x8000007],bh
    2025:	06                   	push   es
    2026:	49                   	dec    ecx
    2027:	37                   	aaa    
    2028:	03 00                	add    eax,DWORD PTR [eax]
    202a:	00 09                	add    BYTE PTR [ecx],cl
    202c:	fc                   	cld    
    202d:	02 00                	add    al,BYTE PTR [eax]
    202f:	00 06                	add    BYTE PTR [esi],al
    2031:	4b                   	dec    ebx
    2032:	61                   	popa   
    2033:	03 00                	add    eax,DWORD PTR [eax]
    2035:	00 00                	add    BYTE PTR [eax],al
    2037:	09 2d 08 00 00 06    	or     DWORD PTR ds:0x6000008,ebp
    203d:	4c                   	dec    esp
    203e:	85 03                	test   DWORD PTR [ebx],eax
    2040:	00 00                	add    BYTE PTR [eax],al
    2042:	04 00                	add    al,0x0
    2044:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    2047:	00 00                	add    BYTE PTR [eax],al
    2049:	55                   	push   ebp
    204a:	03 00                	add    eax,DWORD PTR [eax]
    204c:	00 0b                	add    BYTE PTR [ebx],cl
    204e:	55                   	push   ebp
    204f:	03 00                	add    eax,DWORD PTR [eax]
    2051:	00 0b                	add    BYTE PTR [ebx],cl
    2053:	c0 00 00             	rol    BYTE PTR [eax],0x0
    2056:	00 0b                	add    BYTE PTR [ebx],cl
    2058:	7a 00                	jp     205a <sysEnter_Vector-0x12dfa6>
    205a:	00 00                	add    BYTE PTR [eax],al
    205c:	0b 5b 03             	or     ebx,DWORD PTR [ebx+0x3]
    205f:	00 00                	add    BYTE PTR [eax],al
    2061:	00 05 04 e1 02 00    	add    BYTE PTR ds:0x2e104,al
    2067:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    206d:	00 05 04 37 03 00    	add    BYTE PTR ds:0x33704,al
    2073:	00 0a                	add    BYTE PTR [edx],cl
    2075:	7a 00                	jp     2077 <sysEnter_Vector-0x12df89>
    2077:	00 00                	add    BYTE PTR [eax],al
    2079:	85 03                	test   DWORD PTR [ebx],eax
    207b:	00 00                	add    BYTE PTR [eax],al
    207d:	0b 55 03             	or     edx,DWORD PTR [ebp+0x3]
    2080:	00 00                	add    BYTE PTR [eax],al
    2082:	0b a5 00 00 00 0b    	or     esp,DWORD PTR [ebp+0xb000000]
    2088:	7a 00                	jp     208a <sysEnter_Vector-0x12df76>
    208a:	00 00                	add    BYTE PTR [eax],al
    208c:	0b 5b 03             	or     ebx,DWORD PTR [ebx+0x3]
    208f:	00 00                	add    BYTE PTR [eax],al
    2091:	00 05 04 67 03 00    	add    BYTE PTR ds:0x36704,al
    2097:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    209a:	08 00                	or     BYTE PTR [eax],al
    209c:	00 06                	add    BYTE PTR [esi],al
    209e:	4d                   	dec    ebp
    209f:	12 03                	adc    al,BYTE PTR [ebx]
    20a1:	00 00                	add    BYTE PTR [eax],al
    20a3:	0c df                	or     al,0xdf
    20a5:	07                   	pop    es
    20a6:	00 00                	add    BYTE PTR [eax],al
    20a8:	01 12                	add    DWORD PTR [edx],edx
    20aa:	7a 00                	jp     20ac <sysEnter_Vector-0x12df54>
    20ac:	00 00                	add    BYTE PTR [eax],al
    20ae:	cc                   	int3   
    20af:	12 00                	adc    al,BYTE PTR [eax]
    20b1:	30 2c 00             	xor    BYTE PTR [eax+eax*1],ch
    20b4:	00 00                	add    BYTE PTR [eax],al
    20b6:	01 9c e8 03 00 00 0d 	add    DWORD PTR [eax+ebp*8+0xd000003],ebx
    20bd:	33 08                	xor    ecx,DWORD PTR [eax]
    20bf:	00 00                	add    BYTE PTR [eax],al
    20c1:	01 12                	add    DWORD PTR [edx],edx
    20c3:	55                   	push   ebp
    20c4:	03 00                	add    eax,DWORD PTR [eax]
    20c6:	00 02                	add    BYTE PTR [edx],al
    20c8:	91                   	xchg   ecx,eax
    20c9:	00 0d 8e 03 00 00    	add    BYTE PTR ds:0x38e,cl
    20cf:	01 12                	add    DWORD PTR [edx],edx
    20d1:	c0 00 00             	rol    BYTE PTR [eax],0x0
    20d4:	00 02                	add    BYTE PTR [edx],al
    20d6:	91                   	xchg   ecx,eax
    20d7:	04 0d                	add    al,0xd
    20d9:	b8 03 00 00 01       	mov    eax,0x1000003
    20de:	12 7a 00             	adc    bh,BYTE PTR [edx+0x0]
    20e1:	00 00                	add    BYTE PTR [eax],al
    20e3:	02 91 08 0d 80 08    	add    dl,BYTE PTR [ecx+0x8800d08]
    20e9:	00 00                	add    BYTE PTR [eax],al
    20eb:	01 12                	add    DWORD PTR [edx],edx
    20ed:	5b                   	pop    ebx
    20ee:	03 00                	add    eax,DWORD PTR [eax]
    20f0:	00 02                	add    BYTE PTR [edx],al
    20f2:	91                   	xchg   ecx,eax
    20f3:	0c 00                	or     al,0x0
    20f5:	0c 38                	or     al,0x38
    20f7:	08 00                	or     BYTE PTR [eax],al
    20f9:	00 01                	add    BYTE PTR [ecx],al
    20fb:	17                   	pop    ss
    20fc:	7a 00                	jp     20fe <sysEnter_Vector-0x12df02>
    20fe:	00 00                	add    BYTE PTR [eax],al
    2100:	f8                   	clc    
    2101:	12 00                	adc    al,BYTE PTR [eax]
    2103:	30 26                	xor    BYTE PTR [esi],ah
    2105:	00 00                	add    BYTE PTR [eax],al
    2107:	00 01                	add    BYTE PTR [ecx],al
    2109:	9c                   	pushf  
    210a:	3a 04 00             	cmp    al,BYTE PTR [eax+eax*1]
    210d:	00 0d 33 08 00 00    	add    BYTE PTR ds:0x833,cl
    2113:	01 17                	add    DWORD PTR [edi],edx
    2115:	55                   	push   ebp
    2116:	03 00                	add    eax,DWORD PTR [eax]
    2118:	00 02                	add    BYTE PTR [edx],al
    211a:	91                   	xchg   ecx,eax
    211b:	00 0d 8e 03 00 00    	add    BYTE PTR ds:0x38e,cl
    2121:	01 17                	add    DWORD PTR [edi],edx
    2123:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2124:	00 00                	add    BYTE PTR [eax],al
    2126:	00 02                	add    BYTE PTR [edx],al
    2128:	91                   	xchg   ecx,eax
    2129:	04 0d                	add    al,0xd
    212b:	b8 03 00 00 01       	mov    eax,0x1000003
    2130:	17                   	pop    ss
    2131:	7a 00                	jp     2133 <sysEnter_Vector-0x12decd>
    2133:	00 00                	add    BYTE PTR [eax],al
    2135:	02 91 08 0d 80 08    	add    dl,BYTE PTR [ecx+0x8800d08]
    213b:	00 00                	add    BYTE PTR [eax],al
    213d:	01 17                	add    DWORD PTR [edi],edx
    213f:	5b                   	pop    ebx
    2140:	03 00                	add    eax,DWORD PTR [eax]
    2142:	00 02                	add    BYTE PTR [edx],al
    2144:	91                   	xchg   ecx,eax
    2145:	0c 00                	or     al,0x0
    2147:	0e                   	push   cs
    2148:	26 08 00             	or     BYTE PTR es:[eax],al
    214b:	00 01                	add    BYTE PTR [ecx],al
    214d:	1c 1e                	sbb    al,0x1e
    214f:	13 00                	adc    eax,DWORD PTR [eax]
    2151:	30 37                	xor    BYTE PTR [edi],dh
    2153:	01 00                	add    DWORD PTR [eax],eax
    2155:	00 01                	add    BYTE PTR [ecx],al
    2157:	9c                   	pushf  
    2158:	05 05 00 00 0f       	add    eax,0xf000005
    215d:	72 6f                	jb     21ce <sysEnter_Vector-0x12de32>
    215f:	77 00                	ja     2161 <sysEnter_Vector-0x12de9f>
    2161:	01 1c 3a             	add    DWORD PTR [edx+edi*1],ebx
    2164:	00 00                	add    BYTE PTR [eax],al
    2166:	00 02                	add    BYTE PTR [edx],al
    2168:	91                   	xchg   ecx,eax
    2169:	00 0f                	add    BYTE PTR [edi],cl
    216b:	63 6f 6c             	arpl   WORD PTR [edi+0x6c],bp
    216e:	00 01                	add    BYTE PTR [ecx],al
    2170:	1c 3a                	sbb    al,0x3a
    2172:	00 00                	add    BYTE PTR [eax],al
    2174:	00 02                	add    BYTE PTR [edx],al
    2176:	91                   	xchg   ecx,eax
    2177:	04 10                	add    al,0x10
    2179:	6f                   	outs   dx,DWORD PTR ds:[esi]
    217a:	07                   	pop    es
    217b:	00 00                	add    BYTE PTR [eax],al
    217d:	01 1e                	add    DWORD PTR [esi],ebx
    217f:	05 05 00 00 02       	add    eax,0x2000005
    2184:	91                   	xchg   ecx,eax
    2185:	56                   	push   esi
    2186:	10 e8                	adc    al,ch
    2188:	08 00                	or     BYTE PTR [eax],al
    218a:	00 01                	add    BYTE PTR [ecx],al
    218c:	1f                   	pop    ds
    218d:	15 05 00 00 02       	adc    eax,0x2000005
    2192:	91                   	xchg   ecx,eax
    2193:	53                   	push   ebx
    2194:	10 54 07 00          	adc    BYTE PTR [edi+eax*1+0x0],dl
    2198:	00 01                	add    BYTE PTR [ecx],al
    219a:	1f                   	pop    ds
    219b:	15 05 00 00 02       	adc    eax,0x2000005
    21a0:	91                   	xchg   ecx,eax
    21a1:	50                   	push   eax
    21a2:	10 18                	adc    BYTE PTR [eax],bl
    21a4:	08 00                	or     BYTE PTR [eax],al
    21a6:	00 01                	add    BYTE PTR [ecx],al
    21a8:	20 3a                	and    BYTE PTR [edx],bh
    21aa:	00 00                	add    BYTE PTR [eax],al
    21ac:	00 02                	add    BYTE PTR [edx],al
    21ae:	91                   	xchg   ecx,eax
    21af:	6c                   	ins    BYTE PTR es:[edi],dx
    21b0:	11 03                	adc    DWORD PTR [ebx],eax
    21b2:	07                   	pop    es
    21b3:	00 00                	add    BYTE PTR [eax],al
    21b5:	01 23                	add    DWORD PTR [ebx],esp
    21b7:	3a 00                	cmp    al,BYTE PTR [eax]
    21b9:	00 00                	add    BYTE PTR [eax],al
    21bb:	b4 04                	mov    ah,0x4
    21bd:	00 00                	add    BYTE PTR [eax],al
    21bf:	12 00                	adc    al,BYTE PTR [eax]
    21c1:	13 8a 13 00 30 3d    	adc    ecx,DWORD PTR [edx+0x3d300013]
    21c7:	00 00                	add    BYTE PTR [eax],al
    21c9:	00 d0                	add    al,dl
    21cb:	04 00                	add    al,0x0
    21cd:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    21d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    21d1:	74 00                	je     21d3 <sysEnter_Vector-0x12de2d>
    21d3:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    21d9:	02 91 68 00 13 d5    	add    dl,BYTE PTR [ecx-0x2aecff98]
    21df:	13 00                	adc    eax,DWORD PTR [eax]
    21e1:	30 3d 00 00 00 ec    	xor    BYTE PTR ds:0xec000000,bh
    21e7:	04 00                	add    al,0x0
    21e9:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    21ec:	6e                   	outs   dx,BYTE PTR ds:[esi]
    21ed:	74 00                	je     21ef <sysEnter_Vector-0x12de11>
    21ef:	01 33                	add    DWORD PTR [ebx],esi
    21f1:	3a 00                	cmp    al,BYTE PTR [eax]
    21f3:	00 00                	add    BYTE PTR [eax],al
    21f5:	02 91 64 00 15 20    	add    dl,BYTE PTR [ecx+0x20150064]
    21fb:	14 00                	adc    al,0x0
    21fd:	30 20                	xor    BYTE PTR [eax],ah
    21ff:	00 00                	add    BYTE PTR [eax],al
    2201:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    2204:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2205:	74 00                	je     2207 <sysEnter_Vector-0x12ddf9>
    2207:	01 39                	add    DWORD PTR [ecx],edi
    2209:	3a 00                	cmp    al,BYTE PTR [eax]
    220b:	00 00                	add    BYTE PTR [eax],al
    220d:	02 91 60 00 00 16    	add    dl,BYTE PTR [ecx+0x16000060]
    2213:	25 00 00 00 15       	and    eax,0x15000000
    2218:	05 00 00 17 b7       	add    eax,0xb7170000
    221d:	00 00                	add    BYTE PTR [eax],al
    221f:	00 09                	add    BYTE PTR [ecx],cl
    2221:	00 16                	add    BYTE PTR [esi],dl
    2223:	25 00 00 00 25       	and    eax,0x25000000
    2228:	05 00 00 17 b7       	add    eax,0xb7170000
    222d:	00 00                	add    BYTE PTR [eax],al
    222f:	00 02                	add    BYTE PTR [edx],al
    2231:	00 18                	add    BYTE PTR [eax],bl
    2233:	c7                   	(bad)  
    2234:	08 00                	or     BYTE PTR [eax],al
    2236:	00 01                	add    BYTE PTR [ecx],al
    2238:	42                   	inc    edx
    2239:	55                   	push   ebp
    223a:	14 00                	adc    al,0x0
    223c:	30 84 00 00 00 01 9c 	xor    BYTE PTR [eax+eax*1-0x63ff0000],al
    2243:	64                   	fs
    2244:	05 00 00 10 6f       	add    eax,0x6f100000
    2249:	07                   	pop    es
    224a:	00 00                	add    BYTE PTR [eax],al
    224c:	01 44 64 05          	add    DWORD PTR [esp+eiz*2+0x5],eax
    2250:	00 00                	add    BYTE PTR [eax],al
    2252:	02 91 67 10 18 08    	add    dl,BYTE PTR [ecx+0x8181067]
    2258:	00 00                	add    BYTE PTR [eax],al
    225a:	01 45 3a             	add    DWORD PTR [ebp+0x3a],eax
    225d:	00 00                	add    BYTE PTR [eax],al
    225f:	00 02                	add    BYTE PTR [edx],al
    2261:	91                   	xchg   ecx,eax
    2262:	6c                   	ins    BYTE PTR es:[edi],dx
    2263:	19 03                	sbb    DWORD PTR [ebx],eax
    2265:	07                   	pop    es
    2266:	00 00                	add    BYTE PTR [eax],al
    2268:	01 23                	add    DWORD PTR [ebx],esp
    226a:	3a 00                	cmp    al,BYTE PTR [eax]
    226c:	00 00                	add    BYTE PTR [eax],al
    226e:	12 00                	adc    al,BYTE PTR [eax]
    2270:	00 16                	add    BYTE PTR [esi],dl
    2272:	25 00 00 00 74       	and    eax,0x74000000
    2277:	05 00 00 17 b7       	add    eax,0xb7170000
    227c:	00 00                	add    BYTE PTR [eax],al
    227e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2281:	1a 65 08             	sbb    ah,BYTE PTR [ebp+0x8]
    2284:	00 00                	add    BYTE PTR [eax],al
    2286:	01 54 d9 14          	add    DWORD PTR [ecx+ebx*8+0x14],edx
    228a:	00 30                	add    BYTE PTR [eax],dh
    228c:	53                   	push   ebx
    228d:	00 00                	add    BYTE PTR [eax],al
    228f:	00 01                	add    BYTE PTR [ecx],al
    2291:	9c                   	pushf  
    2292:	1b 4b 00             	sbb    ecx,DWORD PTR [ebx+0x0]
    2295:	00 00                	add    BYTE PTR [eax],al
    2297:	07                   	pop    es
    2298:	34 56                	xor    al,0x56
    229a:	00 00                	add    BYTE PTR [eax],al
    229c:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    22a2:	30 1b                	xor    BYTE PTR [ebx],bl
    22a4:	b6 00                	mov    dh,0x0
    22a6:	00 00                	add    BYTE PTR [eax],al
    22a8:	07                   	pop    es
    22a9:	35 56 00 00 00       	xor    eax,0x56
    22ae:	05 03 0c 43 00       	add    eax,0x430c03
    22b3:	30 1b                	xor    BYTE PTR [ebx],bl
    22b5:	62 01                	bound  eax,QWORD PTR [ecx]
    22b7:	00 00                	add    BYTE PTR [eax],al
    22b9:	07                   	pop    es
    22ba:	36                   	ss
    22bb:	56                   	push   esi
    22bc:	00 00                	add    BYTE PTR [eax],al
    22be:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    22c4:	30 1b                	xor    BYTE PTR [ebx],bl
    22c6:	54                   	push   esp
    22c7:	00 00                	add    BYTE PTR [eax],al
    22c9:	00 08                	add    BYTE PTR [eax],cl
    22cb:	43                   	inc    ebx
    22cc:	9a 00 00 00 05 03 14 	call   0x1403:0x5000000
    22d3:	43                   	inc    ebx
    22d4:	00 30                	add    BYTE PTR [eax],dh
    22d6:	1b 28                	sbb    ebp,DWORD PTR [eax]
    22d8:	00 00                	add    BYTE PTR [eax],al
    22da:	00 08                	add    BYTE PTR [eax],cl
    22dc:	44                   	inc    esp
    22dd:	da 05 00 00 05 03    	fiadd  DWORD PTR ds:0x3050000
    22e3:	10 43 00             	adc    BYTE PTR [ebx+0x0],al
    22e6:	30 05 04 c0 00 00    	xor    BYTE PTR ds:0xc004,al
    22ec:	00 1b                	add    BYTE PTR [ebx],bl
    22ee:	6c                   	ins    BYTE PTR es:[edi],dx
    22ef:	08 00                	or     BYTE PTR [eax],al
    22f1:	00 01                	add    BYTE PTR [ecx],al
    22f3:	0e                   	push   cs
    22f4:	8b 03                	mov    eax,DWORD PTR [ebx]
    22f6:	00 00                	add    BYTE PTR [eax],al
    22f8:	05 03 20 43 00       	add    eax,0x432003
    22fd:	30 1b                	xor    BYTE PTR [ebx],bl
    22ff:	96                   	xchg   esi,eax
    2300:	08 00                	or     BYTE PTR [eax],al
    2302:	00 01                	add    BYTE PTR [ecx],al
    2304:	0f 68 02             	punpckhbw mm0,QWORD PTR [edx]
    2307:	00 00                	add    BYTE PTR [eax],al
    2309:	05 03 60 41 00       	add    eax,0x416003
    230e:	30 1b                	xor    BYTE PTR [ebx],bl
    2310:	ab                   	stos   DWORD PTR es:[edi],eax
    2311:	08 00                	or     BYTE PTR [eax],al
    2313:	00 01                	add    BYTE PTR [ecx],al
    2315:	10 d6                	adc    dh,dl
    2317:	02 00                	add    al,BYTE PTR [eax]
    2319:	00 05 03 28 43 00    	add    BYTE PTR ds:0x432803,al
    231f:	30 00                	xor    BYTE PTR [eax],al
    2321:	b8 01 00 00 04       	mov    eax,0x4000001
    2326:	00 6d 0b             	add    BYTE PTR [ebp+0xb],ch
    2329:	00 00                	add    BYTE PTR [eax],al
    232b:	04 01                	add    al,0x1
    232d:	fb                   	sti    
    232e:	00 00                	add    BYTE PTR [eax],al
    2330:	00 0c 14             	add    BYTE PTR [esp+edx*1],cl
    2333:	09 00                	or     DWORD PTR [eax],eax
    2335:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2338:	00 00                	add    BYTE PTR [eax],al
    233a:	2c 15                	sub    al,0x15
    233c:	00 30                	add    BYTE PTR [eax],dh
    233e:	eb 00                	jmp    2340 <sysEnter_Vector-0x12dcc0>
    2340:	00 00                	add    BYTE PTR [eax],al
    2342:	06                   	push   es
    2343:	0e                   	push   cs
    2344:	00 00                	add    BYTE PTR [eax],al
    2346:	02 01                	add    al,BYTE PTR [ecx]
    2348:	06                   	push   es
    2349:	64 00 00             	add    BYTE PTR fs:[eax],al
    234c:	00 02                	add    BYTE PTR [edx],al
    234e:	01 06                	add    DWORD PTR [esi],eax
    2350:	5d                   	pop    ebp
    2351:	00 00                	add    BYTE PTR [eax],al
    2353:	00 02                	add    BYTE PTR [edx],al
    2355:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    235b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2362:	02 08                	add    cl,BYTE PTR [eax]
    2364:	05 00 00 00 00       	add    eax,0x0
    2369:	02 01                	add    al,BYTE PTR [ecx]
    236b:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    236e:	00 00                	add    BYTE PTR [eax],al
    2370:	02 02                	add    al,BYTE PTR [edx]
    2372:	07                   	pop    es
    2373:	0e                   	push   cs
    2374:	00 00                	add    BYTE PTR [eax],al
    2376:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2379:	00 00                	add    BYTE PTR [eax],al
    237b:	00 02                	add    BYTE PTR [edx],al
    237d:	34 61                	xor    al,0x61
    237f:	00 00                	add    BYTE PTR [eax],al
    2381:	00 02                	add    BYTE PTR [edx],al
    2383:	04 07                	add    al,0x7
    2385:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2388:	00 02                	add    BYTE PTR [edx],al
    238a:	08 07                	or     BYTE PTR [edi],al
    238c:	34 00                	xor    al,0x0
    238e:	00 00                	add    BYTE PTR [eax],al
    2390:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2397:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    239a:	a2 00 00 00 02       	mov    ds:0x2000000,al
    239f:	01 02                	add    DWORD PTR [edx],eax
    23a1:	9c                   	pushf  
    23a2:	00 00                	add    BYTE PTR [eax],al
    23a4:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    23a7:	00 00                	add    BYTE PTR [eax],al
    23a9:	00 03                	add    BYTE PTR [ebx],al
    23ab:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    23ae:	00 00                	add    BYTE PTR [eax],al
    23b0:	05 04 95 00 00       	add    eax,0x9504
    23b5:	00 06                	add    BYTE PTR [esi],al
    23b7:	25 00 00 00 02       	and    eax,0x2000000
    23bc:	04 07                	add    al,0x7
    23be:	39 00                	cmp    DWORD PTR [eax],eax
    23c0:	00 00                	add    BYTE PTR [eax],al
    23c2:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    23c5:	e8 00 00 00 05       	call   50023ca <sysEnter_Vector+0x4ed23ca>
    23ca:	04 25                	add    al,0x25
    23cc:	00 00                	add    BYTE PTR [eax],al
    23ce:	00 07                	add    BYTE PTR [edi],al
    23d0:	0d 09 00 00 01       	or     eax,0x1000009
    23d5:	1d a8 00 00 00       	sbb    eax,0xa8
    23da:	2c 15                	sub    al,0x15
    23dc:	00 30                	add    BYTE PTR [eax],dh
    23de:	3e 00 00             	add    BYTE PTR ds:[eax],al
    23e1:	00 01                	add    BYTE PTR [ecx],al
    23e3:	9c                   	pushf  
    23e4:	e4 00                	in     al,0x0
    23e6:	00 00                	add    BYTE PTR [eax],al
    23e8:	08 d9                	or     cl,bl
    23ea:	06                   	push   es
    23eb:	00 00                	add    BYTE PTR [eax],al
    23ed:	01 1d a8 00 00 00    	add    DWORD PTR ds:0xa8,ebx
    23f3:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    23f9:	63 00                	arpl   WORD PTR [eax],ax
    23fb:	01 1d 8f 00 00 00    	add    DWORD PTR ds:0x8f,ebx
    2401:	02 91 04 00 07 05    	add    dl,BYTE PTR [ecx+0x5070004]
    2407:	09 00                	or     DWORD PTR [eax],eax
    2409:	00 01                	add    BYTE PTR [ecx],al
    240b:	23 a8 00 00 00 6a    	and    ebp,DWORD PTR [eax+0x6a000000]
    2411:	15 00 30 3e 00       	adc    eax,0x3e3000
    2416:	00 00                	add    BYTE PTR [eax],al
    2418:	01 9c 1a 01 00 00 08 	add    DWORD PTR [edx+ebx*1+0x8000001],ebx
    241f:	d9 06                	fld    DWORD PTR [esi]
    2421:	00 00                	add    BYTE PTR [eax],al
    2423:	01 23                	add    DWORD PTR [ebx],esp
    2425:	a8 00                	test   al,0x0
    2427:	00 00                	add    BYTE PTR [eax],al
    2429:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    242f:	63 00                	arpl   WORD PTR [eax],ax
    2431:	01 23                	add    DWORD PTR [ebx],esp
    2433:	8f 00                	pop    DWORD PTR [eax]
    2435:	00 00                	add    BYTE PTR [eax],al
    2437:	02 91 04 00 0a f9    	add    dl,BYTE PTR [ecx-0x6f5fffc]
    243d:	08 00                	or     BYTE PTR [eax],al
    243f:	00 01                	add    BYTE PTR [ecx],al
    2441:	29 a8 15 00 30 6f    	sub    DWORD PTR [eax+0x6f300015],ebp
    2447:	00 00                	add    BYTE PTR [eax],al
    2449:	00 01                	add    BYTE PTR [ecx],al
    244b:	9c                   	pushf  
    244c:	60                   	pusha  
    244d:	01 00                	add    DWORD PTR [eax],eax
    244f:	00 09                	add    BYTE PTR [ecx],cl
    2451:	70 00                	jo     2453 <sysEnter_Vector-0x12dbad>
    2453:	01 29                	add    DWORD PTR [ecx],ebp
    2455:	a8 00                	test   al,0x0
    2457:	00 00                	add    BYTE PTR [eax],al
    2459:	02 91 00 09 71 00    	add    dl,BYTE PTR [ecx+0x710900]
    245f:	01 29                	add    DWORD PTR [ecx],ebp
    2461:	a8 00                	test   al,0x0
    2463:	00 00                	add    BYTE PTR [eax],al
    2465:	02 91 04 0b 63 00    	add    dl,BYTE PTR [ecx+0x630b04]
    246b:	01 2a                	add    DWORD PTR [edx],ebp
    246d:	3a 00                	cmp    al,BYTE PTR [eax]
    246f:	00 00                	add    BYTE PTR [eax],al
    2471:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    2477:	01 2a                	add    DWORD PTR [edx],ebp
    2479:	3a 00                	cmp    al,BYTE PTR [eax]
    247b:	00 00                	add    BYTE PTR [eax],al
    247d:	02 91 70 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0070]
    2483:	00 00                	add    BYTE PTR [eax],al
    2485:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2488:	56                   	push   esi
    2489:	00 00                	add    BYTE PTR [eax],al
    248b:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    2491:	30 0c b6             	xor    BYTE PTR [esi+esi*4],cl
    2494:	00 00                	add    BYTE PTR [eax],al
    2496:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    249d:	05 03 0c 43 00       	add    eax,0x430c03
    24a2:	30 0c 62             	xor    BYTE PTR [edx+eiz*2],cl
    24a5:	01 00                	add    DWORD PTR [eax],eax
    24a7:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    24aa:	56                   	push   esi
    24ab:	00 00                	add    BYTE PTR [eax],al
    24ad:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    24b3:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    24b6:	00 00                	add    BYTE PTR [eax],al
    24b8:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
    24be:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    24c4:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    24c7:	00 00                	add    BYTE PTR [eax],al
    24c9:	00 05 44 b5 01 00    	add    BYTE PTR ds:0x1b544,al
    24cf:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
    24d5:	30 05 04 a8 00 00    	xor    BYTE PTR ds:0xa804,al
    24db:	00 00                	add    BYTE PTR [eax],al
    24dd:	77 01                	ja     24e0 <sysEnter_Vector-0x12db20>
    24df:	00 00                	add    BYTE PTR [eax],al
    24e1:	04 00                	add    al,0x0
    24e3:	28 0c 00             	sub    BYTE PTR [eax+eax*1],cl
    24e6:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    24e9:	fb                   	sti    
    24ea:	00 00                	add    BYTE PTR [eax],al
    24ec:	00 0c 30             	add    BYTE PTR [eax+esi*1],cl
    24ef:	09 00                	or     DWORD PTR [eax],eax
    24f1:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    24f4:	00 00                	add    BYTE PTR [eax],al
    24f6:	18 16                	sbb    BYTE PTR [esi],dl
    24f8:	00 30                	add    BYTE PTR [eax],dh
    24fa:	5e                   	pop    esi
    24fb:	00 00                	add    BYTE PTR [eax],al
    24fd:	00 e0                	add    al,ah
    24ff:	0e                   	push   cs
    2500:	00 00                	add    BYTE PTR [eax],al
    2502:	02 01                	add    al,BYTE PTR [ecx]
    2504:	06                   	push   es
    2505:	64 00 00             	add    BYTE PTR fs:[eax],al
    2508:	00 02                	add    BYTE PTR [edx],al
    250a:	01 06                	add    DWORD PTR [esi],eax
    250c:	5d                   	pop    ebp
    250d:	00 00                	add    BYTE PTR [eax],al
    250f:	00 02                	add    BYTE PTR [edx],al
    2511:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    2517:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    251e:	02 08                	add    cl,BYTE PTR [eax]
    2520:	05 00 00 00 00       	add    eax,0x0
    2525:	02 01                	add    al,BYTE PTR [ecx]
    2527:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    252a:	00 00                	add    BYTE PTR [eax],al
    252c:	02 02                	add    al,BYTE PTR [edx]
    252e:	07                   	pop    es
    252f:	0e                   	push   cs
    2530:	00 00                	add    BYTE PTR [eax],al
    2532:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2535:	00 00                	add    BYTE PTR [eax],al
    2537:	00 02                	add    BYTE PTR [edx],al
    2539:	34 61                	xor    al,0x61
    253b:	00 00                	add    BYTE PTR [eax],al
    253d:	00 02                	add    BYTE PTR [edx],al
    253f:	04 07                	add    al,0x7
    2541:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2544:	00 02                	add    BYTE PTR [edx],al
    2546:	08 07                	or     BYTE PTR [edi],al
    2548:	34 00                	xor    al,0x0
    254a:	00 00                	add    BYTE PTR [eax],al
    254c:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2553:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2556:	a2 00 00 00 02       	mov    ds:0x2000000,al
    255b:	01 02                	add    DWORD PTR [edx],eax
    255d:	9c                   	pushf  
    255e:	00 00                	add    BYTE PTR [eax],al
    2560:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2563:	00 00                	add    BYTE PTR [eax],al
    2565:	00 03                	add    BYTE PTR [ebx],al
    2567:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    256a:	00 00                	add    BYTE PTR [eax],al
    256c:	05 04 95 00 00       	add    eax,0x9504
    2571:	00 06                	add    BYTE PTR [esi],al
    2573:	25 00 00 00 02       	and    eax,0x2000000
    2578:	04 07                	add    al,0x7
    257a:	39 00                	cmp    DWORD PTR [eax],eax
    257c:	00 00                	add    BYTE PTR [eax],al
    257e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2581:	e8 00 00 00 05       	call   5002586 <sysEnter_Vector+0x4ed2586>
    2586:	04 25                	add    al,0x25
    2588:	00 00                	add    BYTE PTR [eax],al
    258a:	00 07                	add    BYTE PTR [edi],al
    258c:	29 09                	sub    DWORD PTR [ecx],ecx
    258e:	00 00                	add    BYTE PTR [eax],al
    2590:	01 18                	add    DWORD PTR [eax],ebx
    2592:	3a 00                	cmp    al,BYTE PTR [eax]
    2594:	00 00                	add    BYTE PTR [eax],al
    2596:	18 16                	sbb    BYTE PTR [esi],dl
    2598:	00 30                	add    BYTE PTR [eax],dh
    259a:	5e                   	pop    esi
    259b:	00 00                	add    BYTE PTR [eax],al
    259d:	00 01                	add    BYTE PTR [ecx],al
    259f:	9c                   	pushf  
    25a0:	14 01                	adc    al,0x1
    25a2:	00 00                	add    BYTE PTR [eax],al
    25a4:	08 70 31             	or     BYTE PTR [eax+0x31],dh
    25a7:	00 01                	add    BYTE PTR [ecx],al
    25a9:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    25af:	91                   	xchg   ecx,eax
    25b0:	00 08                	add    BYTE PTR [eax],cl
    25b2:	70 32                	jo     25e6 <sysEnter_Vector-0x12da1a>
    25b4:	00 01                	add    BYTE PTR [ecx],al
    25b6:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    25bc:	91                   	xchg   ecx,eax
    25bd:	04 09                	add    al,0x9
    25bf:	73 31                	jae    25f2 <sysEnter_Vector-0x12da0e>
    25c1:	00 01                	add    BYTE PTR [ecx],al
    25c3:	1a 14 01             	sbb    dl,BYTE PTR [ecx+eax*1]
    25c6:	00 00                	add    BYTE PTR [eax],al
    25c8:	01 53 09             	add    DWORD PTR [ebx+0x9],edx
    25cb:	73 32                	jae    25ff <sysEnter_Vector-0x12da01>
    25cd:	00 01                	add    BYTE PTR [ecx],al
    25cf:	1b 14 01             	sbb    edx,DWORD PTR [ecx+eax*1]
    25d2:	00 00                	add    BYTE PTR [eax],al
    25d4:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    25d7:	63 31                	arpl   WORD PTR [ecx],si
    25d9:	00 01                	add    BYTE PTR [ecx],al
    25db:	1c 48                	sbb    al,0x48
    25dd:	00 00                	add    BYTE PTR [eax],al
    25df:	00 02                	add    BYTE PTR [edx],al
    25e1:	91                   	xchg   ecx,eax
    25e2:	6f                   	outs   dx,DWORD PTR ds:[esi]
    25e3:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    25e6:	00 01                	add    BYTE PTR [ecx],al
    25e8:	1c 48                	sbb    al,0x48
    25ea:	00 00                	add    BYTE PTR [eax],al
    25ec:	00 02                	add    BYTE PTR [edx],al
    25ee:	91                   	xchg   ecx,eax
    25ef:	6e                   	outs   dx,BYTE PTR ds:[esi]
    25f0:	00 05 04 1a 01 00    	add    BYTE PTR ds:0x11a04,al
    25f6:	00 06                	add    BYTE PTR [esi],al
    25f8:	48                   	dec    eax
    25f9:	00 00                	add    BYTE PTR [eax],al
    25fb:	00 0a                	add    BYTE PTR [edx],cl
    25fd:	4b                   	dec    ebx
    25fe:	00 00                	add    BYTE PTR [eax],al
    2600:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2603:	56                   	push   esi
    2604:	00 00                	add    BYTE PTR [eax],al
    2606:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    260c:	30 0a                	xor    BYTE PTR [edx],cl
    260e:	b6 00                	mov    dh,0x0
    2610:	00 00                	add    BYTE PTR [eax],al
    2612:	04 35                	add    al,0x35
    2614:	56                   	push   esi
    2615:	00 00                	add    BYTE PTR [eax],al
    2617:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
    261d:	30 0a                	xor    BYTE PTR [edx],cl
    261f:	62 01                	bound  eax,QWORD PTR [ecx]
    2621:	00 00                	add    BYTE PTR [eax],al
    2623:	04 36                	add    al,0x36
    2625:	56                   	push   esi
    2626:	00 00                	add    BYTE PTR [eax],al
    2628:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    262e:	30 0a                	xor    BYTE PTR [edx],cl
    2630:	54                   	push   esp
    2631:	00 00                	add    BYTE PTR [eax],al
    2633:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
    2639:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    263f:	30 0a                	xor    BYTE PTR [edx],cl
    2641:	28 00                	sub    BYTE PTR [eax],al
    2643:	00 00                	add    BYTE PTR [eax],al
    2645:	05 44 74 01 00       	add    eax,0x17444
    264a:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
    2650:	30 05 04 a8 00 00    	xor    BYTE PTR ds:0xa804,al
    2656:	00 00                	add    BYTE PTR [eax],al
    2658:	d4 01                	aam    0x1
    265a:	00 00                	add    BYTE PTR [eax],al
    265c:	04 00                	add    al,0x0
    265e:	ba 0c 00 00 04       	mov    edx,0x400000c
    2663:	01 fb                	add    ebx,edi
    2665:	00 00                	add    BYTE PTR [eax],al
    2667:	00 0c 5a             	add    BYTE PTR [edx+ebx*2],cl
    266a:	09 00                	or     DWORD PTR [eax],eax
    266c:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    266f:	00 00                	add    BYTE PTR [eax],al
    2671:	78 16                	js     2689 <sysEnter_Vector-0x12d977>
    2673:	00 30                	add    BYTE PTR [eax],dh
    2675:	c7 00 00 00 a9 0f    	mov    DWORD PTR [eax],0xfa90000
    267b:	00 00                	add    BYTE PTR [eax],al
    267d:	02 01                	add    al,BYTE PTR [ecx]
    267f:	06                   	push   es
    2680:	64 00 00             	add    BYTE PTR fs:[eax],al
    2683:	00 02                	add    BYTE PTR [edx],al
    2685:	01 06                	add    DWORD PTR [esi],eax
    2687:	5d                   	pop    ebp
    2688:	00 00                	add    BYTE PTR [eax],al
    268a:	00 02                	add    BYTE PTR [edx],al
    268c:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    2692:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2699:	02 08                	add    cl,BYTE PTR [eax]
    269b:	05 00 00 00 00       	add    eax,0x0
    26a0:	02 01                	add    al,BYTE PTR [ecx]
    26a2:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    26a5:	00 00                	add    BYTE PTR [eax],al
    26a7:	02 02                	add    al,BYTE PTR [edx]
    26a9:	07                   	pop    es
    26aa:	0e                   	push   cs
    26ab:	00 00                	add    BYTE PTR [eax],al
    26ad:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    26b0:	00 00                	add    BYTE PTR [eax],al
    26b2:	00 02                	add    BYTE PTR [edx],al
    26b4:	34 61                	xor    al,0x61
    26b6:	00 00                	add    BYTE PTR [eax],al
    26b8:	00 02                	add    BYTE PTR [edx],al
    26ba:	04 07                	add    al,0x7
    26bc:	3e 00 00             	add    BYTE PTR ds:[eax],al
    26bf:	00 02                	add    BYTE PTR [edx],al
    26c1:	08 07                	or     BYTE PTR [edi],al
    26c3:	34 00                	xor    al,0x0
    26c5:	00 00                	add    BYTE PTR [eax],al
    26c7:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    26ce:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    26d1:	a2 00 00 00 02       	mov    ds:0x2000000,al
    26d6:	01 02                	add    DWORD PTR [edx],eax
    26d8:	9c                   	pushf  
    26d9:	00 00                	add    BYTE PTR [eax],al
    26db:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    26de:	00 00                	add    BYTE PTR [eax],al
    26e0:	00 03                	add    BYTE PTR [ebx],al
    26e2:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    26e5:	00 00                	add    BYTE PTR [eax],al
    26e7:	05 04 95 00 00       	add    eax,0x9504
    26ec:	00 06                	add    BYTE PTR [esi],al
    26ee:	25 00 00 00 02       	and    eax,0x2000000
    26f3:	04 07                	add    al,0x7
    26f5:	39 00                	cmp    DWORD PTR [eax],eax
    26f7:	00 00                	add    BYTE PTR [eax],al
    26f9:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    26fc:	e8 00 00 00 05       	call   5002701 <sysEnter_Vector+0x4ed2701>
    2701:	04 25                	add    al,0x25
    2703:	00 00                	add    BYTE PTR [eax],al
    2705:	00 07                	add    BYTE PTR [edi],al
    2707:	53                   	push   ebx
    2708:	09 00                	or     DWORD PTR [eax],eax
    270a:	00 01                	add    BYTE PTR [ecx],al
    270c:	04 a8                	add    al,0xa8
    270e:	00 00                	add    BYTE PTR [eax],al
    2710:	00 78 16             	add    BYTE PTR [eax+0x16],bh
    2713:	00 30                	add    BYTE PTR [eax],dh
    2715:	40                   	inc    eax
    2716:	00 00                	add    BYTE PTR [eax],al
    2718:	00 01                	add    BYTE PTR [ecx],al
    271a:	9c                   	pushf  
    271b:	ee                   	out    dx,al
    271c:	00 00                	add    BYTE PTR [eax],al
    271e:	00 08                	add    BYTE PTR [eax],cl
    2720:	73 31                	jae    2753 <sysEnter_Vector-0x12d8ad>
    2722:	00 01                	add    BYTE PTR [ecx],al
    2724:	04 a8                	add    al,0xa8
    2726:	00 00                	add    BYTE PTR [eax],al
    2728:	00 02                	add    BYTE PTR [edx],al
    272a:	91                   	xchg   ecx,eax
    272b:	00 08                	add    BYTE PTR [eax],cl
    272d:	73 32                	jae    2761 <sysEnter_Vector-0x12d89f>
    272f:	00 01                	add    BYTE PTR [ecx],al
    2731:	04 8f                	add    al,0x8f
    2733:	00 00                	add    BYTE PTR [eax],al
    2735:	00 02                	add    BYTE PTR [edx],al
    2737:	91                   	xchg   ecx,eax
    2738:	04 09                	add    al,0x9
    273a:	73 00                	jae    273c <sysEnter_Vector-0x12d8c4>
    273c:	01 06                	add    DWORD PTR [esi],eax
    273e:	a8 00                	test   al,0x0
    2740:	00 00                	add    BYTE PTR [eax],al
    2742:	02 91 74 00 07 6f    	add    dl,BYTE PTR [ecx+0x6f070074]
    2748:	09 00                	or     DWORD PTR [eax],eax
    274a:	00 01                	add    BYTE PTR [ecx],al
    274c:	0e                   	push   cs
    274d:	a8 00                	test   al,0x0
    274f:	00 00                	add    BYTE PTR [eax],al
    2751:	b8 16 00 30 40       	mov    eax,0x40300016
    2756:	00 00                	add    BYTE PTR [eax],al
    2758:	00 01                	add    BYTE PTR [ecx],al
    275a:	9c                   	pushf  
    275b:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    275e:	00 08                	add    BYTE PTR [eax],cl
    2760:	73 31                	jae    2793 <sysEnter_Vector-0x12d86d>
    2762:	00 01                	add    BYTE PTR [ecx],al
    2764:	0e                   	push   cs
    2765:	a8 00                	test   al,0x0
    2767:	00 00                	add    BYTE PTR [eax],al
    2769:	02 91 00 08 73 32    	add    dl,BYTE PTR [ecx+0x32730800]
    276f:	00 01                	add    BYTE PTR [ecx],al
    2771:	0e                   	push   cs
    2772:	8f 00                	pop    DWORD PTR [eax]
    2774:	00 00                	add    BYTE PTR [eax],al
    2776:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    277c:	01 10                	add    DWORD PTR [eax],edx
    277e:	a8 00                	test   al,0x0
    2780:	00 00                	add    BYTE PTR [eax],al
    2782:	02 91 74 00 07 4b    	add    dl,BYTE PTR [ecx+0x4b070074]
    2788:	09 00                	or     DWORD PTR [eax],eax
    278a:	00 01                	add    BYTE PTR [ecx],al
    278c:	18 a8 00 00 00 f8    	sbb    BYTE PTR [eax-0x8000000],ch
    2792:	16                   	push   ss
    2793:	00 30                	add    BYTE PTR [eax],dh
    2795:	47                   	inc    edi
    2796:	00 00                	add    BYTE PTR [eax],al
    2798:	00 01                	add    BYTE PTR [ecx],al
    279a:	9c                   	pushf  
    279b:	7c 01                	jl     279e <sysEnter_Vector-0x12d862>
    279d:	00 00                	add    BYTE PTR [eax],al
    279f:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    27a2:	00 01                	add    BYTE PTR [ecx],al
    27a4:	18 a8 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],ch
    27aa:	91                   	xchg   ecx,eax
    27ab:	00 08                	add    BYTE PTR [eax],cl
    27ad:	73 32                	jae    27e1 <sysEnter_Vector-0x12d81f>
    27af:	00 01                	add    BYTE PTR [ecx],al
    27b1:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    27b7:	91                   	xchg   ecx,eax
    27b8:	04 0a                	add    al,0xa
    27ba:	45                   	inc    ebp
    27bb:	09 00                	or     DWORD PTR [eax],eax
    27bd:	00 01                	add    BYTE PTR [ecx],al
    27bf:	18 61 00             	sbb    BYTE PTR [ecx+0x0],ah
    27c2:	00 00                	add    BYTE PTR [eax],al
    27c4:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    27ca:	01 1a                	add    DWORD PTR [edx],ebx
    27cc:	a8 00                	test   al,0x0
    27ce:	00 00                	add    BYTE PTR [eax],al
    27d0:	02 91 74 00 0b 4b    	add    dl,BYTE PTR [ecx+0x4b0b0074]
    27d6:	00 00                	add    BYTE PTR [eax],al
    27d8:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    27db:	56                   	push   esi
    27dc:	00 00                	add    BYTE PTR [eax],al
    27de:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    27e4:	30 0b                	xor    BYTE PTR [ebx],cl
    27e6:	b6 00                	mov    dh,0x0
    27e8:	00 00                	add    BYTE PTR [eax],al
    27ea:	04 35                	add    al,0x35
    27ec:	56                   	push   esi
    27ed:	00 00                	add    BYTE PTR [eax],al
    27ef:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
    27f5:	30 0b                	xor    BYTE PTR [ebx],cl
    27f7:	62 01                	bound  eax,QWORD PTR [ecx]
    27f9:	00 00                	add    BYTE PTR [eax],al
    27fb:	04 36                	add    al,0x36
    27fd:	56                   	push   esi
    27fe:	00 00                	add    BYTE PTR [eax],al
    2800:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    2806:	30 0b                	xor    BYTE PTR [ebx],cl
    2808:	54                   	push   esp
    2809:	00 00                	add    BYTE PTR [eax],al
    280b:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
    2811:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    2817:	30 0b                	xor    BYTE PTR [ebx],cl
    2819:	28 00                	sub    BYTE PTR [eax],al
    281b:	00 00                	add    BYTE PTR [eax],al
    281d:	05 44 d1 01 00       	add    eax,0x1d144
    2822:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
    2828:	30 05 04 a8 00 00    	xor    BYTE PTR ds:0xa804,al
    282e:	00 00                	add    BYTE PTR [eax],al
    2830:	57                   	push   edi
    2831:	01 00                	add    DWORD PTR [eax],eax
    2833:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2836:	5b                   	pop    ebx
    2837:	0d 00 00 04 01       	or     eax,0x1040000
    283c:	fb                   	sti    
    283d:	00 00                	add    BYTE PTR [eax],al
    283f:	00 0c 8c             	add    BYTE PTR [esp+ecx*4],cl
    2842:	09 00                	or     DWORD PTR [eax],eax
    2844:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2847:	00 00                	add    BYTE PTR [eax],al
    2849:	40                   	inc    eax
    284a:	17                   	pop    ss
    284b:	00 30                	add    BYTE PTR [eax],dh
    284d:	89 00                	mov    DWORD PTR [eax],eax
    284f:	00 00                	add    BYTE PTR [eax],al
    2851:	93                   	xchg   ebx,eax
    2852:	10 00                	adc    BYTE PTR [eax],al
    2854:	00 02                	add    BYTE PTR [edx],al
    2856:	01 06                	add    DWORD PTR [esi],eax
    2858:	64 00 00             	add    BYTE PTR fs:[eax],al
    285b:	00 02                	add    BYTE PTR [edx],al
    285d:	01 06                	add    DWORD PTR [esi],eax
    285f:	5d                   	pop    ebp
    2860:	00 00                	add    BYTE PTR [eax],al
    2862:	00 02                	add    BYTE PTR [edx],al
    2864:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    286a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2871:	02 08                	add    cl,BYTE PTR [eax]
    2873:	05 00 00 00 00       	add    eax,0x0
    2878:	02 01                	add    al,BYTE PTR [ecx]
    287a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    287d:	00 00                	add    BYTE PTR [eax],al
    287f:	02 02                	add    al,BYTE PTR [edx]
    2881:	07                   	pop    es
    2882:	0e                   	push   cs
    2883:	00 00                	add    BYTE PTR [eax],al
    2885:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2888:	00 00                	add    BYTE PTR [eax],al
    288a:	00 02                	add    BYTE PTR [edx],al
    288c:	34 61                	xor    al,0x61
    288e:	00 00                	add    BYTE PTR [eax],al
    2890:	00 02                	add    BYTE PTR [edx],al
    2892:	04 07                	add    al,0x7
    2894:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2897:	00 02                	add    BYTE PTR [edx],al
    2899:	08 07                	or     BYTE PTR [edi],al
    289b:	34 00                	xor    al,0x0
    289d:	00 00                	add    BYTE PTR [eax],al
    289f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    28a6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    28a9:	a2 00 00 00 02       	mov    ds:0x2000000,al
    28ae:	01 02                	add    DWORD PTR [edx],eax
    28b0:	9c                   	pushf  
    28b1:	00 00                	add    BYTE PTR [eax],al
    28b3:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    28b6:	00 00                	add    BYTE PTR [eax],al
    28b8:	00 03                	add    BYTE PTR [ebx],al
    28ba:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    28bd:	00 00                	add    BYTE PTR [eax],al
    28bf:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    28c2:	39 00                	cmp    DWORD PTR [eax],eax
    28c4:	00 00                	add    BYTE PTR [eax],al
    28c6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    28c9:	e8 00 00 00 05       	call   50028ce <sysEnter_Vector+0x4ed28ce>
    28ce:	04 25                	add    al,0x25
    28d0:	00 00                	add    BYTE PTR [eax],al
    28d2:	00 06                	add    BYTE PTR [esi],al
    28d4:	77 09                	ja     28df <sysEnter_Vector-0x12d721>
    28d6:	00 00                	add    BYTE PTR [eax],al
    28d8:	01 09                	add    DWORD PTR [ecx],ecx
    28da:	7d 00                	jge    28dc <sysEnter_Vector-0x12d724>
    28dc:	00 00                	add    BYTE PTR [eax],al
    28de:	40                   	inc    eax
    28df:	17                   	pop    ss
    28e0:	00 30                	add    BYTE PTR [eax],dh
    28e2:	30 00                	xor    BYTE PTR [eax],al
    28e4:	00 00                	add    BYTE PTR [eax],al
    28e6:	01 9c c9 00 00 00 07 	add    DWORD PTR [ecx+ecx*8+0x7000000],ebx
    28ed:	63 00                	arpl   WORD PTR [eax],ax
    28ef:	01 09                	add    DWORD PTR [ecx],ecx
    28f1:	25 00 00 00 02       	and    eax,0x2000000
    28f6:	91                   	xchg   ecx,eax
    28f7:	74 00                	je     28f9 <sysEnter_Vector-0x12d707>
    28f9:	08 83 09 00 00 01    	or     BYTE PTR [ebx+0x1000009],al
    28ff:	0e                   	push   cs
    2900:	7d 00                	jge    2902 <sysEnter_Vector-0x12d6fe>
    2902:	00 00                	add    BYTE PTR [eax],al
    2904:	70 17                	jo     291d <sysEnter_Vector-0x12d6e3>
    2906:	00 30                	add    BYTE PTR [eax],dh
    2908:	59                   	pop    ecx
    2909:	00 00                	add    BYTE PTR [eax],al
    290b:	00 01                	add    BYTE PTR [ecx],al
    290d:	9c                   	pushf  
    290e:	ff 00                	inc    DWORD PTR [eax]
    2910:	00 00                	add    BYTE PTR [eax],al
    2912:	07                   	pop    es
    2913:	73 74                	jae    2989 <sysEnter_Vector-0x12d677>
    2915:	72 00                	jb     2917 <sysEnter_Vector-0x12d6e9>
    2917:	01 0e                	add    DWORD PTR [esi],ecx
    2919:	9d                   	popf   
    291a:	00 00                	add    BYTE PTR [eax],al
    291c:	00 02                	add    BYTE PTR [edx],al
    291e:	91                   	xchg   ecx,eax
    291f:	00 09                	add    BYTE PTR [ecx],cl
    2921:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    2924:	00 01                	add    BYTE PTR [ecx],al
    2926:	10 3a                	adc    BYTE PTR [edx],bh
    2928:	00 00                	add    BYTE PTR [eax],al
    292a:	00 02                	add    BYTE PTR [edx],al
    292c:	91                   	xchg   ecx,eax
    292d:	74 00                	je     292f <sysEnter_Vector-0x12d6d1>
    292f:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    2932:	00 00                	add    BYTE PTR [eax],al
    2934:	04 34                	add    al,0x34
    2936:	56                   	push   esi
    2937:	00 00                	add    BYTE PTR [eax],al
    2939:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    293f:	30 0a                	xor    BYTE PTR [edx],cl
    2941:	b6 00                	mov    dh,0x0
    2943:	00 00                	add    BYTE PTR [eax],al
    2945:	04 35                	add    al,0x35
    2947:	56                   	push   esi
    2948:	00 00                	add    BYTE PTR [eax],al
    294a:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
    2950:	30 0a                	xor    BYTE PTR [edx],cl
    2952:	62 01                	bound  eax,QWORD PTR [ecx]
    2954:	00 00                	add    BYTE PTR [eax],al
    2956:	04 36                	add    al,0x36
    2958:	56                   	push   esi
    2959:	00 00                	add    BYTE PTR [eax],al
    295b:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    2961:	30 0a                	xor    BYTE PTR [edx],cl
    2963:	54                   	push   esp
    2964:	00 00                	add    BYTE PTR [eax],al
    2966:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
    296c:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    2972:	30 0a                	xor    BYTE PTR [edx],cl
    2974:	28 00                	sub    BYTE PTR [eax],al
    2976:	00 00                	add    BYTE PTR [eax],al
    2978:	05 44 54 01 00       	add    eax,0x15444
    297d:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
    2983:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2989:	00 00                	add    BYTE PTR [eax],al
    298b:	ca 00 00             	retf   0x0
    298e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2991:	02 0e                	add    cl,BYTE PTR [esi]
    2993:	00 00                	add    BYTE PTR [eax],al
    2995:	04 01                	add    al,0x1
    2997:	fb                   	sti    
    2998:	00 00                	add    BYTE PTR [eax],al
    299a:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
    299d:	09 00                	or     DWORD PTR [eax],eax
    299f:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    29a2:	00 00                	add    BYTE PTR [eax],al
    29a4:	cc                   	int3   
    29a5:	17                   	pop    ss
    29a6:	00 30                	add    BYTE PTR [eax],dh
    29a8:	62 00                	bound  eax,QWORD PTR [eax]
    29aa:	00 00                	add    BYTE PTR [eax],al
    29ac:	6c                   	ins    BYTE PTR es:[edi],dx
    29ad:	11 00                	adc    DWORD PTR [eax],eax
    29af:	00 02                	add    BYTE PTR [edx],al
    29b1:	04 05                	add    al,0x5
    29b3:	69 6e 74 00 03 60 04 	imul   ebp,DWORD PTR [esi+0x74],0x4600300
    29ba:	00 00                	add    BYTE PTR [eax],al
    29bc:	02 d8                	add    bl,al
    29be:	37                   	aaa    
    29bf:	00 00                	add    BYTE PTR [eax],al
    29c1:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    29c4:	07                   	pop    es
    29c5:	3e 00 00             	add    BYTE PTR ds:[eax],al
    29c8:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    29cb:	05 05 00 00 00       	add    eax,0x5
    29d0:	04 08                	add    al,0x8
    29d2:	05 00 00 00 00       	add    eax,0x0
    29d7:	04 0c                	add    al,0xc
    29d9:	04 a2                	add    al,0xa2
    29db:	00 00                	add    BYTE PTR [eax],al
    29dd:	00 05 a3 09 00 00    	add    BYTE PTR ds:0x9a3,al
    29e3:	01 03                	add    DWORD PTR [ebx],eax
    29e5:	2c 00                	sub    al,0x0
    29e7:	00 00                	add    BYTE PTR [eax],al
    29e9:	cc                   	int3   
    29ea:	17                   	pop    ss
    29eb:	00 30                	add    BYTE PTR [eax],dh
    29ed:	31 00                	xor    DWORD PTR [eax],eax
    29ef:	00 00                	add    BYTE PTR [eax],al
    29f1:	01 9c 89 00 00 00 06 	add    DWORD PTR [ecx+ecx*4+0x6000000],ebx
    29f8:	73 74                	jae    2a6e <sysEnter_Vector-0x12d592>
    29fa:	72 00                	jb     29fc <sysEnter_Vector-0x12d604>
    29fc:	01 03                	add    DWORD PTR [ebx],eax
    29fe:	89 00                	mov    DWORD PTR [eax],eax
    2a00:	00 00                	add    BYTE PTR [eax],al
    2a02:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2a08:	74 00                	je     2a0a <sysEnter_Vector-0x12d5f6>
    2a0a:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    2a0d:	00 00                	add    BYTE PTR [eax],al
    2a0f:	00 02                	add    BYTE PTR [edx],al
    2a11:	91                   	xchg   ecx,eax
    2a12:	74 00                	je     2a14 <sysEnter_Vector-0x12d5ec>
    2a14:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    2a17:	00 00                	add    BYTE PTR [eax],al
    2a19:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2a1c:	06                   	push   es
    2a1d:	64 00 00             	add    BYTE PTR fs:[eax],al
    2a20:	00 09                	add    BYTE PTR [ecx],cl
    2a22:	8f 00                	pop    DWORD PTR [eax]
    2a24:	00 00                	add    BYTE PTR [eax],al
    2a26:	0a bf 09 00 00 01    	or     bh,BYTE PTR [edi+0x1000009]
    2a2c:	0a 2c 00             	or     ch,BYTE PTR [eax+eax*1]
    2a2f:	00 00                	add    BYTE PTR [eax],al
    2a31:	fd                   	std    
    2a32:	17                   	pop    ss
    2a33:	00 30                	add    BYTE PTR [eax],dh
    2a35:	31 00                	xor    DWORD PTR [eax],eax
    2a37:	00 00                	add    BYTE PTR [eax],al
    2a39:	01 9c 06 73 74 72 00 	add    DWORD PTR [esi+eax*1+0x727473],ebx
    2a40:	01 0a                	add    DWORD PTR [edx],ecx
    2a42:	89 00                	mov    DWORD PTR [eax],eax
    2a44:	00 00                	add    BYTE PTR [eax],al
    2a46:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2a4c:	74 00                	je     2a4e <sysEnter_Vector-0x12d5b2>
    2a4e:	01 0b                	add    DWORD PTR [ebx],ecx
    2a50:	2c 00                	sub    al,0x0
    2a52:	00 00                	add    BYTE PTR [eax],al
    2a54:	02 91 74 00 00 de    	add    dl,BYTE PTR [ecx-0x21ffff8c]
    2a5a:	00 00                	add    BYTE PTR [eax],al
    2a5c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2a5f:	9d                   	popf   
    2a60:	0e                   	push   cs
    2a61:	00 00                	add    BYTE PTR [eax],al
    2a63:	04 01                	add    al,0x1
    2a65:	fb                   	sti    
    2a66:	00 00                	add    BYTE PTR [eax],al
    2a68:	00 0c d8             	add    BYTE PTR [eax+ebx*8],cl
    2a6b:	09 00                	or     DWORD PTR [eax],eax
    2a6d:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2a70:	00 00                	add    BYTE PTR [eax],al
    2a72:	30 18                	xor    BYTE PTR [eax],bl
    2a74:	00 30                	add    BYTE PTR [eax],dh
    2a76:	ce                   	into   
    2a77:	00 00                	add    BYTE PTR [eax],al
    2a79:	00 04 12             	add    BYTE PTR [edx+edx*1],al
    2a7c:	00 00                	add    BYTE PTR [eax],al
    2a7e:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    2a85:	03 60 04             	add    esp,DWORD PTR [eax+0x4]
    2a88:	00 00                	add    BYTE PTR [eax],al
    2a8a:	02 d8                	add    bl,al
    2a8c:	37                   	aaa    
    2a8d:	00 00                	add    BYTE PTR [eax],al
    2a8f:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2a92:	07                   	pop    es
    2a93:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2a96:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2a99:	05 05 00 00 00       	add    eax,0x5
    2a9e:	04 08                	add    al,0x8
    2aa0:	05 00 00 00 00       	add    eax,0x0
    2aa5:	04 0c                	add    al,0xc
    2aa7:	04 a2                	add    al,0xa2
    2aa9:	00 00                	add    BYTE PTR [eax],al
    2aab:	00 05 d0 09 00 00    	add    BYTE PTR ds:0x9d0,al
    2ab1:	01 0c 25 00 00 00 30 	add    DWORD PTR [eiz*1+0x30000000],ecx
    2ab8:	18 00                	sbb    BYTE PTR [eax],al
    2aba:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2abd:	00 00                	add    BYTE PTR [eax],al
    2abf:	01 9c 93 00 00 00 06 	add    DWORD PTR [ebx+edx*4+0x6000000],ebx
    2ac6:	73 31                	jae    2af9 <sysEnter_Vector-0x12d507>
    2ac8:	00 01                	add    BYTE PTR [ecx],al
    2aca:	0c 93                	or     al,0x93
    2acc:	00 00                	add    BYTE PTR [eax],al
    2ace:	00 02                	add    BYTE PTR [edx],al
    2ad0:	91                   	xchg   ecx,eax
    2ad1:	00 06                	add    BYTE PTR [esi],al
    2ad3:	73 32                	jae    2b07 <sysEnter_Vector-0x12d4f9>
    2ad5:	00 01                	add    BYTE PTR [ecx],al
    2ad7:	0c 93                	or     al,0x93
    2ad9:	00 00                	add    BYTE PTR [eax],al
    2adb:	00 02                	add    BYTE PTR [edx],al
    2add:	91                   	xchg   ecx,eax
    2ade:	04 06                	add    al,0x6
    2ae0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2ae1:	00 01                	add    BYTE PTR [ecx],al
    2ae3:	0c 2c                	or     al,0x2c
    2ae5:	00 00                	add    BYTE PTR [eax],al
    2ae7:	00 02                	add    BYTE PTR [edx],al
    2ae9:	91                   	xchg   ecx,eax
    2aea:	08 00                	or     BYTE PTR [eax],al
    2aec:	07                   	pop    es
    2aed:	04 a0                	add    al,0xa0
    2aef:	00 00                	add    BYTE PTR [eax],al
    2af1:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2af4:	06                   	push   es
    2af5:	64 00 00             	add    BYTE PTR fs:[eax],al
    2af8:	00 08                	add    BYTE PTR [eax],cl
    2afa:	99                   	cdq    
    2afb:	00 00                	add    BYTE PTR [eax],al
    2afd:	00 09                	add    BYTE PTR [ecx],cl
    2aff:	c7                   	(bad)  
    2b00:	09 00                	or     DWORD PTR [eax],eax
    2b02:	00 01                	add    BYTE PTR [ecx],al
    2b04:	16                   	push   ss
    2b05:	25 00 00 00 97       	and    eax,0x97000000
    2b0a:	18 00                	sbb    BYTE PTR [eax],al
    2b0c:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2b0f:	00 00                	add    BYTE PTR [eax],al
    2b11:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    2b18:	16                   	push   ss
    2b19:	93                   	xchg   ebx,eax
    2b1a:	00 00                	add    BYTE PTR [eax],al
    2b1c:	00 02                	add    BYTE PTR [edx],al
    2b1e:	91                   	xchg   ecx,eax
    2b1f:	00 06                	add    BYTE PTR [esi],al
    2b21:	73 32                	jae    2b55 <sysEnter_Vector-0x12d4ab>
    2b23:	00 01                	add    BYTE PTR [ecx],al
    2b25:	16                   	push   ss
    2b26:	93                   	xchg   ebx,eax
    2b27:	00 00                	add    BYTE PTR [eax],al
    2b29:	00 02                	add    BYTE PTR [edx],al
    2b2b:	91                   	xchg   ecx,eax
    2b2c:	04 06                	add    al,0x6
    2b2e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2b2f:	00 01                	add    BYTE PTR [ecx],al
    2b31:	16                   	push   ss
    2b32:	2c 00                	sub    al,0x0
    2b34:	00 00                	add    BYTE PTR [eax],al
    2b36:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    2b3c:	00 00                	add    BYTE PTR [eax],al
    2b3e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b41:	29 0f                	sub    DWORD PTR [edi],ecx
    2b43:	00 00                	add    BYTE PTR [eax],al
    2b45:	04 01                	add    al,0x1
    2b47:	fb                   	sti    
    2b48:	00 00                	add    BYTE PTR [eax],al
    2b4a:	00 0c ee             	add    BYTE PTR [esi+ebp*8],cl
    2b4d:	09 00                	or     DWORD PTR [eax],eax
    2b4f:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2b52:	00 00                	add    BYTE PTR [eax],al
    2b54:	00 19                	add    BYTE PTR [ecx],bl
    2b56:	00 30                	add    BYTE PTR [eax],dh
    2b58:	80 00 00             	add    BYTE PTR [eax],0x0
    2b5b:	00 c9                	add    cl,cl
    2b5d:	12 00                	adc    al,BYTE PTR [eax]
    2b5f:	00 02                	add    BYTE PTR [edx],al
    2b61:	04 05                	add    al,0x5
    2b63:	69 6e 74 00 03 60 04 	imul   ebp,DWORD PTR [esi+0x74],0x4600300
    2b6a:	00 00                	add    BYTE PTR [eax],al
    2b6c:	02 d8                	add    bl,al
    2b6e:	37                   	aaa    
    2b6f:	00 00                	add    BYTE PTR [eax],al
    2b71:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b74:	07                   	pop    es
    2b75:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2b78:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b7b:	05 05 00 00 00       	add    eax,0x5
    2b80:	04 08                	add    al,0x8
    2b82:	05 00 00 00 00       	add    eax,0x0
    2b87:	04 0c                	add    al,0xc
    2b89:	04 a2                	add    al,0xa2
    2b8b:	00 00                	add    BYTE PTR [eax],al
    2b8d:	00 05 04 0a 00 00    	add    BYTE PTR ds:0xa04,al
    2b93:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    2b99:	00 19                	add    BYTE PTR [ecx],bl
    2b9b:	00 30                	add    BYTE PTR [eax],dh
    2b9d:	60                   	pusha  
    2b9e:	00 00                	add    BYTE PTR [eax],al
    2ba0:	00 01                	add    BYTE PTR [ecx],al
    2ba2:	9c                   	pushf  
    2ba3:	9f                   	lahf   
    2ba4:	00 00                	add    BYTE PTR [eax],al
    2ba6:	00 06                	add    BYTE PTR [esi],al
    2ba8:	73 31                	jae    2bdb <sysEnter_Vector-0x12d425>
    2baa:	00 01                	add    BYTE PTR [ecx],al
    2bac:	0d 9f 00 00 00       	or     eax,0x9f
    2bb1:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    2bb7:	00 01                	add    BYTE PTR [ecx],al
    2bb9:	0d ac 00 00 00       	or     eax,0xac
    2bbe:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    2bc4:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    2bca:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    2bd0:	01 0f                	add    DWORD PTR [edi],ecx
    2bd2:	9f                   	lahf   
    2bd3:	00 00                	add    BYTE PTR [eax],al
    2bd5:	00 02                	add    BYTE PTR [edx],al
    2bd7:	91                   	xchg   ecx,eax
    2bd8:	74 00                	je     2bda <sysEnter_Vector-0x12d426>
    2bda:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    2be1:	01 06                	add    DWORD PTR [esi],eax
    2be3:	64 00 00             	add    BYTE PTR fs:[eax],al
    2be6:	00 08                	add    BYTE PTR [eax],cl
    2be8:	04 b2                	add    al,0xb2
    2bea:	00 00                	add    BYTE PTR [eax],al
    2bec:	00 09                	add    BYTE PTR [ecx],cl
    2bee:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2bef:	00 00                	add    BYTE PTR [eax],al
    2bf1:	00 0a                	add    BYTE PTR [edx],cl
    2bf3:	0d 0a 00 00 01       	or     eax,0x100000a
    2bf8:	1b 9f 00 00 00 60    	sbb    ebx,DWORD PTR [edi+0x60000000]
    2bfe:	19 00                	sbb    DWORD PTR [eax],eax
    2c00:	30 20                	xor    BYTE PTR [eax],ah
    2c02:	00 00                	add    BYTE PTR [eax],al
    2c04:	00 01                	add    BYTE PTR [ecx],al
    2c06:	9c                   	pushf  
    2c07:	06                   	push   es
    2c08:	73 31                	jae    2c3b <sysEnter_Vector-0x12d3c5>
    2c0a:	00 01                	add    BYTE PTR [ecx],al
    2c0c:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    2c12:	91                   	xchg   ecx,eax
    2c13:	00 06                	add    BYTE PTR [esi],al
    2c15:	73 32                	jae    2c49 <sysEnter_Vector-0x12d3b7>
    2c17:	00 01                	add    BYTE PTR [ecx],al
    2c19:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    2c20:	04 06                	add    al,0x6
    2c22:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c23:	00 01                	add    BYTE PTR [ecx],al
    2c25:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    2c28:	00 00                	add    BYTE PTR [eax],al
    2c2a:	02 91 08 00 00 9d    	add    dl,BYTE PTR [ecx-0x62fffff8]
    2c30:	01 00                	add    DWORD PTR [eax],eax
    2c32:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2c35:	c4 0f                	les    ecx,FWORD PTR [edi]
    2c37:	00 00                	add    BYTE PTR [eax],al
    2c39:	04 01                	add    al,0x1
    2c3b:	fb                   	sti    
    2c3c:	00 00                	add    BYTE PTR [eax],al
    2c3e:	00 0c 15 0a 00 00 79 	add    BYTE PTR [edx*1+0x7900000a],cl
    2c45:	00 00                	add    BYTE PTR [eax],al
    2c47:	00 80 19 00 30 7d    	add    BYTE PTR [eax+0x7d300019],al
    2c4d:	01 00                	add    DWORD PTR [eax],eax
    2c4f:	00 6e 13             	add    BYTE PTR [esi+0x13],ch
    2c52:	00 00                	add    BYTE PTR [eax],al
    2c54:	02 01                	add    al,BYTE PTR [ecx]
    2c56:	06                   	push   es
    2c57:	64 00 00             	add    BYTE PTR fs:[eax],al
    2c5a:	00 02                	add    BYTE PTR [edx],al
    2c5c:	01 06                	add    DWORD PTR [esi],eax
    2c5e:	5d                   	pop    ebp
    2c5f:	00 00                	add    BYTE PTR [eax],al
    2c61:	00 02                	add    BYTE PTR [edx],al
    2c63:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    2c69:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2c70:	02 08                	add    cl,BYTE PTR [eax]
    2c72:	05 00 00 00 00       	add    eax,0x0
    2c77:	02 01                	add    al,BYTE PTR [ecx]
    2c79:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2c7c:	00 00                	add    BYTE PTR [eax],al
    2c7e:	02 02                	add    al,BYTE PTR [edx]
    2c80:	07                   	pop    es
    2c81:	0e                   	push   cs
    2c82:	00 00                	add    BYTE PTR [eax],al
    2c84:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2c87:	00 00                	add    BYTE PTR [eax],al
    2c89:	00 02                	add    BYTE PTR [edx],al
    2c8b:	34 61                	xor    al,0x61
    2c8d:	00 00                	add    BYTE PTR [eax],al
    2c8f:	00 02                	add    BYTE PTR [edx],al
    2c91:	04 07                	add    al,0x7
    2c93:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2c96:	00 02                	add    BYTE PTR [edx],al
    2c98:	08 07                	or     BYTE PTR [edi],al
    2c9a:	34 00                	xor    al,0x0
    2c9c:	00 00                	add    BYTE PTR [eax],al
    2c9e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2ca5:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2ca8:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2cad:	01 02                	add    DWORD PTR [edx],eax
    2caf:	9c                   	pushf  
    2cb0:	00 00                	add    BYTE PTR [eax],al
    2cb2:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2cb5:	00 00                	add    BYTE PTR [eax],al
    2cb7:	00 03                	add    BYTE PTR [ebx],al
    2cb9:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    2cbc:	00 00                	add    BYTE PTR [eax],al
    2cbe:	05 04 95 00 00       	add    eax,0x9504
    2cc3:	00 06                	add    BYTE PTR [esi],al
    2cc5:	25 00 00 00 02       	and    eax,0x2000000
    2cca:	04 07                	add    al,0x7
    2ccc:	39 00                	cmp    DWORD PTR [eax],eax
    2cce:	00 00                	add    BYTE PTR [eax],al
    2cd0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2cd3:	e8 00 00 00 05       	call   5002cd8 <sysEnter_Vector+0x4ed2cd8>
    2cd8:	04 25                	add    al,0x25
    2cda:	00 00                	add    BYTE PTR [eax],al
    2cdc:	00 07                	add    BYTE PTR [edi],al
    2cde:	38 0a                	cmp    BYTE PTR [edx],cl
    2ce0:	00 00                	add    BYTE PTR [eax],al
    2ce2:	01 3b                	add    DWORD PTR [ebx],edi
    2ce4:	9a 00 00 00 80 19 00 	call   0x19:0x80000000
    2ceb:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    2cee:	00 00                	add    BYTE PTR [eax],al
    2cf0:	01 9c 45 01 00 00 08 	add    DWORD PTR [ebp+eax*2+0x8000001],ebx
    2cf7:	47                   	inc    edi
    2cf8:	0a 00                	or     al,BYTE PTR [eax]
    2cfa:	00 01                	add    BYTE PTR [ecx],al
    2cfc:	3b 8f 00 00 00 02    	cmp    ecx,DWORD PTR [edi+0x2000000]
    2d02:	91                   	xchg   ecx,eax
    2d03:	00 08                	add    BYTE PTR [eax],cl
    2d05:	40                   	inc    eax
    2d06:	0a 00                	or     al,BYTE PTR [eax]
    2d08:	00 01                	add    BYTE PTR [ecx],al
    2d0a:	3b 45 01             	cmp    eax,DWORD PTR [ebp+0x1]
    2d0d:	00 00                	add    BYTE PTR [eax],al
    2d0f:	02 91 04 08 4c 0a    	add    dl,BYTE PTR [ecx+0xa4c0804]
    2d15:	00 00                	add    BYTE PTR [eax],al
    2d17:	01 3b                	add    DWORD PTR [ebx],edi
    2d19:	3a 00                	cmp    al,BYTE PTR [eax]
    2d1b:	00 00                	add    BYTE PTR [eax],al
    2d1d:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    2d23:	01 3d 8f 00 00 00    	add    DWORD PTR ds:0x8f,edi
    2d29:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    2d2c:	61                   	popa   
    2d2d:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    2d30:	01 3e                	add    DWORD PTR [esi],edi
    2d32:	9a 00 00 00 01 57 09 	call   0x957:0x1000000
    2d39:	63 00                	arpl   WORD PTR [eax],ax
    2d3b:	01 3f                	add    DWORD PTR [edi],edi
    2d3d:	3a 00                	cmp    al,BYTE PTR [eax]
    2d3f:	00 00                	add    BYTE PTR [eax],al
    2d41:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    2d44:	2a 0a                	sub    cl,BYTE PTR [edx]
    2d46:	00 00                	add    BYTE PTR [eax],al
    2d48:	01 40 9a             	add    DWORD PTR [eax-0x66],eax
    2d4b:	00 00                	add    BYTE PTR [eax],al
    2d4d:	00 0b                	add    BYTE PTR [ebx],cl
    2d4f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2d50:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    2d54:	41                   	inc    ecx
    2d55:	3a 00                	cmp    al,BYTE PTR [eax]
    2d57:	00 00                	add    BYTE PTR [eax],al
    2d59:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2d5c:	79 00                	jns    2d5e <sysEnter_Vector-0x12d2a2>
    2d5e:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    2d61:	00 00                	add    BYTE PTR [eax],al
    2d63:	00 01                	add    BYTE PTR [ecx],al
    2d65:	51                   	push   ecx
    2d66:	0c 31                	or     al,0x31
    2d68:	0a 00                	or     al,BYTE PTR [eax]
    2d6a:	00 01                	add    BYTE PTR [ecx],al
    2d6c:	41                   	inc    ecx
    2d6d:	3a 00                	cmp    al,BYTE PTR [eax]
    2d6f:	00 00                	add    BYTE PTR [eax],al
    2d71:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    2d74:	05 04 a8 00 00       	add    eax,0xa804
    2d79:	00 0d 4b 00 00 00    	add    BYTE PTR ds:0x4b,cl
    2d7f:	04 34                	add    al,0x34
    2d81:	56                   	push   esi
    2d82:	00 00                	add    BYTE PTR [eax],al
    2d84:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    2d8a:	30 0d b6 00 00 00    	xor    BYTE PTR ds:0xb6,cl
    2d90:	04 35                	add    al,0x35
    2d92:	56                   	push   esi
    2d93:	00 00                	add    BYTE PTR [eax],al
    2d95:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
    2d9b:	30 0d 62 01 00 00    	xor    BYTE PTR ds:0x162,cl
    2da1:	04 36                	add    al,0x36
    2da3:	56                   	push   esi
    2da4:	00 00                	add    BYTE PTR [eax],al
    2da6:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    2dac:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    2db2:	05 43 84 00 00       	add    eax,0x8443
    2db7:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    2dbd:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    2dc3:	05 44 45 01 00       	add    eax,0x14544
    2dc8:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
    2dce:	30 00                	xor    BYTE PTR [eax],al
    2dd0:	6c                   	ins    BYTE PTR es:[edi],dx
    2dd1:	00 00                	add    BYTE PTR [eax],al
    2dd3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2dd6:	7f 10                	jg     2de8 <sysEnter_Vector-0x12d218>
    2dd8:	00 00                	add    BYTE PTR [eax],al
    2dda:	04 01                	add    al,0x1
    2ddc:	fb                   	sti    
    2ddd:	00 00                	add    BYTE PTR [eax],al
    2ddf:	00 0c 51             	add    BYTE PTR [ecx+edx*2],cl
    2de2:	0a 00                	or     al,BYTE PTR [eax]
    2de4:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2de7:	00 00                	add    BYTE PTR [eax],al
    2de9:	00 1b                	add    BYTE PTR [ebx],bl
    2deb:	00 30                	add    BYTE PTR [eax],dh
    2ded:	1d 00 00 00 c5       	sbb    eax,0xc5000000
    2df2:	14 00                	adc    al,0x0
    2df4:	00 02                	add    BYTE PTR [edx],al
    2df6:	68 0a 00 00 01       	push   0x100000a
    2dfb:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    2dfe:	00 00                	add    BYTE PTR [eax],al
    2e00:	00 1b                	add    BYTE PTR [ebx],bl
    2e02:	00 30                	add    BYTE PTR [eax],dh
    2e04:	1d 00 00 00 01       	sbb    eax,0x1000000
    2e09:	9c                   	pushf  
    2e0a:	5b                   	pop    ebx
    2e0b:	00 00                	add    BYTE PTR [eax],al
    2e0d:	00 03                	add    BYTE PTR [ebx],al
    2e0f:	76 61                	jbe    2e72 <sysEnter_Vector-0x12d18e>
    2e11:	6c                   	ins    BYTE PTR es:[edi],dx
    2e12:	00 01                	add    BYTE PTR [ecx],al
    2e14:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    2e17:	00 00                	add    BYTE PTR [eax],al
    2e19:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    2e1f:	74 00                	je     2e21 <sysEnter_Vector-0x12d1df>
    2e21:	01 01                	add    DWORD PTR [ecx],eax
    2e23:	68 00 00 00 02       	push   0x2000000
    2e28:	91                   	xchg   ecx,eax
    2e29:	04 00                	add    al,0x0
    2e2b:	04 04                	add    al,0x4
    2e2d:	61                   	popa   
    2e2e:	00 00                	add    BYTE PTR [eax],al
    2e30:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    2e36:	00 00                	add    BYTE PTR [eax],al
    2e38:	06                   	push   es
    2e39:	04 05                	add    al,0x5
    2e3b:	69 6e 74 00 00 9b 01 	imul   ebp,DWORD PTR [esi+0x74],0x19b0000
    2e42:	00 00                	add    BYTE PTR [eax],al
    2e44:	04 00                	add    al,0x0
    2e46:	dd 10                	fst    QWORD PTR [eax]
    2e48:	00 00                	add    BYTE PTR [eax],al
    2e4a:	04 01                	add    al,0x1
    2e4c:	fb                   	sti    
    2e4d:	00 00                	add    BYTE PTR [eax],al
    2e4f:	00 0c 70             	add    BYTE PTR [eax+esi*2],cl
    2e52:	0a 00                	or     al,BYTE PTR [eax]
    2e54:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2e57:	00 00                	add    BYTE PTR [eax],al
    2e59:	20 1b                	and    BYTE PTR [ebx],bl
    2e5b:	00 30                	add    BYTE PTR [eax],dh
    2e5d:	9c                   	pushf  
    2e5e:	01 00                	add    DWORD PTR [eax],eax
    2e60:	00 0c 15 00 00 02 01 	add    BYTE PTR [edx*1+0x1020000],cl
    2e67:	06                   	push   es
    2e68:	64 00 00             	add    BYTE PTR fs:[eax],al
    2e6b:	00 02                	add    BYTE PTR [edx],al
    2e6d:	01 06                	add    DWORD PTR [esi],eax
    2e6f:	5d                   	pop    ebp
    2e70:	00 00                	add    BYTE PTR [eax],al
    2e72:	00 02                	add    BYTE PTR [edx],al
    2e74:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    2e7a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2e81:	02 08                	add    cl,BYTE PTR [eax]
    2e83:	05 00 00 00 00       	add    eax,0x0
    2e88:	02 01                	add    al,BYTE PTR [ecx]
    2e8a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2e8d:	00 00                	add    BYTE PTR [eax],al
    2e8f:	02 02                	add    al,BYTE PTR [edx]
    2e91:	07                   	pop    es
    2e92:	0e                   	push   cs
    2e93:	00 00                	add    BYTE PTR [eax],al
    2e95:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2e98:	00 00                	add    BYTE PTR [eax],al
    2e9a:	00 02                	add    BYTE PTR [edx],al
    2e9c:	34 61                	xor    al,0x61
    2e9e:	00 00                	add    BYTE PTR [eax],al
    2ea0:	00 02                	add    BYTE PTR [edx],al
    2ea2:	04 07                	add    al,0x7
    2ea4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2ea7:	00 02                	add    BYTE PTR [edx],al
    2ea9:	08 07                	or     BYTE PTR [edi],al
    2eab:	34 00                	xor    al,0x0
    2ead:	00 00                	add    BYTE PTR [eax],al
    2eaf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2eb6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2eb9:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2ebe:	01 02                	add    DWORD PTR [edx],eax
    2ec0:	9c                   	pushf  
    2ec1:	00 00                	add    BYTE PTR [eax],al
    2ec3:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2ec6:	00 00                	add    BYTE PTR [eax],al
    2ec8:	00 03                	add    BYTE PTR [ebx],al
    2eca:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    2ecd:	00 00                	add    BYTE PTR [eax],al
    2ecf:	05 04 95 00 00       	add    eax,0x9504
    2ed4:	00 06                	add    BYTE PTR [esi],al
    2ed6:	25 00 00 00 02       	and    eax,0x2000000
    2edb:	04 07                	add    al,0x7
    2edd:	39 00                	cmp    DWORD PTR [eax],eax
    2edf:	00 00                	add    BYTE PTR [eax],al
    2ee1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2ee4:	e8 00 00 00 05       	call   5002ee9 <sysEnter_Vector+0x4ed2ee9>
    2ee9:	04 25                	add    al,0x25
    2eeb:	00 00                	add    BYTE PTR [eax],al
    2eed:	00 07                	add    BYTE PTR [edi],al
    2eef:	85 0a                	test   DWORD PTR [edx],ecx
    2ef1:	00 00                	add    BYTE PTR [eax],al
    2ef3:	01 57 6f             	add    DWORD PTR [edi+0x6f],edx
    2ef6:	00 00                	add    BYTE PTR [eax],al
    2ef8:	00 20                	add    BYTE PTR [eax],ah
    2efa:	1b 00                	sbb    eax,DWORD PTR [eax]
    2efc:	30 9c 01 00 00 01 9c 	xor    BYTE PTR [ecx+eax*1-0x63ff0000],bl
    2f03:	43                   	inc    ebx
    2f04:	01 00                	add    DWORD PTR [eax],eax
    2f06:	00 08                	add    BYTE PTR [eax],cl
    2f08:	47                   	inc    edi
    2f09:	0a 00                	or     al,BYTE PTR [eax]
    2f0b:	00 01                	add    BYTE PTR [ecx],al
    2f0d:	57                   	push   edi
    2f0e:	8f 00                	pop    DWORD PTR [eax]
    2f10:	00 00                	add    BYTE PTR [eax],al
    2f12:	02 91 00 08 40 0a    	add    dl,BYTE PTR [ecx+0xa400800]
    2f18:	00 00                	add    BYTE PTR [eax],al
    2f1a:	01 57 43             	add    DWORD PTR [edi+0x43],edx
    2f1d:	01 00                	add    DWORD PTR [eax],eax
    2f1f:	00 02                	add    BYTE PTR [edx],al
    2f21:	91                   	xchg   ecx,eax
    2f22:	04 08                	add    al,0x8
    2f24:	4c                   	dec    esp
    2f25:	0a 00                	or     al,BYTE PTR [eax]
    2f27:	00 01                	add    BYTE PTR [ecx],al
    2f29:	57                   	push   edi
    2f2a:	3a 00                	cmp    al,BYTE PTR [eax]
    2f2c:	00 00                	add    BYTE PTR [eax],al
    2f2e:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    2f34:	01 59 8f             	add    DWORD PTR [ecx-0x71],ebx
    2f37:	00 00                	add    BYTE PTR [eax],al
    2f39:	00 01                	add    BYTE PTR [ecx],al
    2f3b:	56                   	push   esi
    2f3c:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    2f3f:	63 00                	arpl   WORD PTR [eax],ax
    2f41:	01 5a 9a             	add    DWORD PTR [edx-0x66],ebx
    2f44:	00 00                	add    BYTE PTR [eax],al
    2f46:	00 01                	add    BYTE PTR [ecx],al
    2f48:	57                   	push   edi
    2f49:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    2f4c:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    2f4f:	00 00                	add    BYTE PTR [eax],al
    2f51:	00 01                	add    BYTE PTR [ecx],al
    2f53:	53                   	push   ebx
    2f54:	0a 2a                	or     ch,BYTE PTR [edx]
    2f56:	0a 00                	or     al,BYTE PTR [eax]
    2f58:	00 01                	add    BYTE PTR [ecx],al
    2f5a:	5c                   	pop    esp
    2f5b:	9a 00 00 00 0b 6e 65 	call   0x656e:0xb000000
    2f62:	67 00 01             	add    BYTE PTR [bx+di],al
    2f65:	5d                   	pop    ebp
    2f66:	3a 00                	cmp    al,BYTE PTR [eax]
    2f68:	00 00                	add    BYTE PTR [eax],al
    2f6a:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2f6d:	79 00                	jns    2f6f <sysEnter_Vector-0x12d091>
    2f6f:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    2f72:	00 00                	add    BYTE PTR [eax],al
    2f74:	00 01                	add    BYTE PTR [ecx],al
    2f76:	51                   	push   ecx
    2f77:	0a 31                	or     dh,BYTE PTR [ecx]
    2f79:	0a 00                	or     al,BYTE PTR [eax]
    2f7b:	00 01                	add    BYTE PTR [ecx],al
    2f7d:	5d                   	pop    ebp
    2f7e:	3a 00                	cmp    al,BYTE PTR [eax]
    2f80:	00 00                	add    BYTE PTR [eax],al
    2f82:	00 05 04 a8 00 00    	add    BYTE PTR ds:0xa804,al
    2f88:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
    2f8b:	00 00                	add    BYTE PTR [eax],al
    2f8d:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2f90:	56                   	push   esi
    2f91:	00 00                	add    BYTE PTR [eax],al
    2f93:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    2f99:	30 0c b6             	xor    BYTE PTR [esi+esi*4],cl
    2f9c:	00 00                	add    BYTE PTR [eax],al
    2f9e:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    2fa5:	05 03 0c 43 00       	add    eax,0x430c03
    2faa:	30 0c 62             	xor    BYTE PTR [edx+eiz*2],cl
    2fad:	01 00                	add    DWORD PTR [eax],eax
    2faf:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2fb2:	56                   	push   esi
    2fb3:	00 00                	add    BYTE PTR [eax],al
    2fb5:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    2fbb:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    2fbe:	00 00                	add    BYTE PTR [eax],al
    2fc0:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
    2fc6:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    2fcc:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    2fcf:	00 00                	add    BYTE PTR [eax],al
    2fd1:	00 05 44 43 01 00    	add    BYTE PTR ds:0x14344,al
    2fd7:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
    2fdd:	30 00                	xor    BYTE PTR [eax],al
    2fdf:	49                   	dec    ecx
    2fe0:	01 00                	add    DWORD PTR [eax],eax
    2fe2:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2fe5:	89 11                	mov    DWORD PTR [ecx],edx
    2fe7:	00 00                	add    BYTE PTR [eax],al
    2fe9:	04 01                	add    al,0x1
    2feb:	fb                   	sti    
    2fec:	00 00                	add    BYTE PTR [eax],al
    2fee:	00 0c 92             	add    BYTE PTR [edx+edx*4],cl
    2ff1:	0a 00                	or     al,BYTE PTR [eax]
    2ff3:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    2ff6:	00 00                	add    BYTE PTR [eax],al
    2ff8:	bc 1c 00 30 96       	mov    esp,0x9630001c
    2ffd:	00 00                	add    BYTE PTR [eax],al
    2fff:	00 8f 16 00 00 02    	add    BYTE PTR [edi+0x2000016],cl
    3005:	01 06                	add    DWORD PTR [esi],eax
    3007:	64 00 00             	add    BYTE PTR fs:[eax],al
    300a:	00 02                	add    BYTE PTR [edx],al
    300c:	01 06                	add    DWORD PTR [esi],eax
    300e:	5d                   	pop    ebp
    300f:	00 00                	add    BYTE PTR [eax],al
    3011:	00 02                	add    BYTE PTR [edx],al
    3013:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    3019:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3020:	02 08                	add    cl,BYTE PTR [eax]
    3022:	05 00 00 00 00       	add    eax,0x0
    3027:	02 01                	add    al,BYTE PTR [ecx]
    3029:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    302c:	00 00                	add    BYTE PTR [eax],al
    302e:	02 02                	add    al,BYTE PTR [edx]
    3030:	07                   	pop    es
    3031:	0e                   	push   cs
    3032:	00 00                	add    BYTE PTR [eax],al
    3034:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    3037:	00 00                	add    BYTE PTR [eax],al
    3039:	00 02                	add    BYTE PTR [edx],al
    303b:	34 61                	xor    al,0x61
    303d:	00 00                	add    BYTE PTR [eax],al
    303f:	00 02                	add    BYTE PTR [edx],al
    3041:	04 07                	add    al,0x7
    3043:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3046:	00 02                	add    BYTE PTR [edx],al
    3048:	08 07                	or     BYTE PTR [edi],al
    304a:	34 00                	xor    al,0x0
    304c:	00 00                	add    BYTE PTR [eax],al
    304e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3055:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3058:	a2 00 00 00 02       	mov    ds:0x2000000,al
    305d:	01 02                	add    DWORD PTR [edx],eax
    305f:	9c                   	pushf  
    3060:	00 00                	add    BYTE PTR [eax],al
    3062:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    3065:	00 00                	add    BYTE PTR [eax],al
    3067:	00 03                	add    BYTE PTR [ebx],al
    3069:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    306c:	00 00                	add    BYTE PTR [eax],al
    306e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3071:	39 00                	cmp    DWORD PTR [eax],eax
    3073:	00 00                	add    BYTE PTR [eax],al
    3075:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3078:	e8 00 00 00 05       	call   500307d <sysEnter_Vector+0x4ed307d>
    307d:	04 25                	add    al,0x25
    307f:	00 00                	add    BYTE PTR [eax],al
    3081:	00 06                	add    BYTE PTR [esi],al
    3083:	a8 0a                	test   al,0xa
    3085:	00 00                	add    BYTE PTR [eax],al
    3087:	01 03                	add    DWORD PTR [ebx],eax
    3089:	bc 1c 00 30 96       	mov    esp,0x9630001c
    308e:	00 00                	add    BYTE PTR [eax],al
    3090:	00 01                	add    BYTE PTR [ecx],al
    3092:	9c                   	pushf  
    3093:	f1                   	icebp  
    3094:	00 00                	add    BYTE PTR [eax],al
    3096:	00 07                	add    BYTE PTR [edi],al
    3098:	8c 0a                	mov    WORD PTR [edx],cs
    309a:	00 00                	add    BYTE PTR [eax],al
    309c:	01 03                	add    DWORD PTR [ebx],eax
    309e:	9d                   	popf   
    309f:	00 00                	add    BYTE PTR [eax],al
    30a1:	00 02                	add    BYTE PTR [edx],al
    30a3:	91                   	xchg   ecx,eax
    30a4:	00 08                	add    BYTE PTR [eax],cl
    30a6:	64                   	fs
    30a7:	73 74                	jae    311d <sysEnter_Vector-0x12cee3>
    30a9:	00 01                	add    BYTE PTR [ecx],al
    30ab:	05 9d 00 00 00       	add    eax,0x9d
    30b0:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    30b6:	63 00                	arpl   WORD PTR [eax],ax
    30b8:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    30be:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    30c4:	64 00 01             	add    BYTE PTR fs:[ecx],al
    30c7:	06                   	push   es
    30c8:	9d                   	popf   
    30c9:	00 00                	add    BYTE PTR [eax],al
    30cb:	00 02                	add    BYTE PTR [edx],al
    30cd:	91                   	xchg   ecx,eax
    30ce:	64 00 09             	add    BYTE PTR fs:[ecx],cl
    30d1:	4b                   	dec    ebx
    30d2:	00 00                	add    BYTE PTR [eax],al
    30d4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    30d7:	56                   	push   esi
    30d8:	00 00                	add    BYTE PTR [eax],al
    30da:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    30e0:	30 09                	xor    BYTE PTR [ecx],cl
    30e2:	b6 00                	mov    dh,0x0
    30e4:	00 00                	add    BYTE PTR [eax],al
    30e6:	04 35                	add    al,0x35
    30e8:	56                   	push   esi
    30e9:	00 00                	add    BYTE PTR [eax],al
    30eb:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
    30f1:	30 09                	xor    BYTE PTR [ecx],cl
    30f3:	62 01                	bound  eax,QWORD PTR [ecx]
    30f5:	00 00                	add    BYTE PTR [eax],al
    30f7:	04 36                	add    al,0x36
    30f9:	56                   	push   esi
    30fa:	00 00                	add    BYTE PTR [eax],al
    30fc:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    3102:	30 09                	xor    BYTE PTR [ecx],cl
    3104:	54                   	push   esp
    3105:	00 00                	add    BYTE PTR [eax],al
    3107:	00 05 43 84 00 00    	add    BYTE PTR ds:0x8443,al
    310d:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    3113:	30 09                	xor    BYTE PTR [ecx],cl
    3115:	28 00                	sub    BYTE PTR [eax],al
    3117:	00 00                	add    BYTE PTR [eax],al
    3119:	05 44 46 01 00       	add    eax,0x14644
    311e:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
    3124:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    312a:	00 00                	add    BYTE PTR [eax],al
    312c:	9e                   	sahf   
    312d:	01 00                	add    DWORD PTR [eax],eax
    312f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3132:	12 12                	adc    dl,BYTE PTR [edx]
    3134:	00 00                	add    BYTE PTR [eax],al
    3136:	04 01                	add    al,0x1
    3138:	fb                   	sti    
    3139:	00 00                	add    BYTE PTR [eax],al
    313b:	00 0c b8             	add    BYTE PTR [eax+edi*4],cl
    313e:	0a 00                	or     al,BYTE PTR [eax]
    3140:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    3143:	00 00                	add    BYTE PTR [eax],al
    3145:	54                   	push   esp
    3146:	1d 00 30 8b 00       	sbb    eax,0x8b3000
    314b:	00 00                	add    BYTE PTR [eax],al
    314d:	69 17 00 00 02 01    	imul   edx,DWORD PTR [edi],0x1020000
    3153:	06                   	push   es
    3154:	64 00 00             	add    BYTE PTR fs:[eax],al
    3157:	00 02                	add    BYTE PTR [edx],al
    3159:	01 06                	add    DWORD PTR [esi],eax
    315b:	5d                   	pop    ebp
    315c:	00 00                	add    BYTE PTR [eax],al
    315e:	00 02                	add    BYTE PTR [edx],al
    3160:	02 05 f1 00 00 00    	add    al,BYTE PTR ds:0xf1
    3166:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    316d:	02 08                	add    cl,BYTE PTR [eax]
    316f:	05 00 00 00 00       	add    eax,0x0
    3174:	02 01                	add    al,BYTE PTR [ecx]
    3176:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    3179:	00 00                	add    BYTE PTR [eax],al
    317b:	02 02                	add    al,BYTE PTR [edx]
    317d:	07                   	pop    es
    317e:	0e                   	push   cs
    317f:	00 00                	add    BYTE PTR [eax],al
    3181:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    3184:	00 00                	add    BYTE PTR [eax],al
    3186:	00 02                	add    BYTE PTR [edx],al
    3188:	34 61                	xor    al,0x61
    318a:	00 00                	add    BYTE PTR [eax],al
    318c:	00 02                	add    BYTE PTR [edx],al
    318e:	04 07                	add    al,0x7
    3190:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3193:	00 02                	add    BYTE PTR [edx],al
    3195:	08 07                	or     BYTE PTR [edi],al
    3197:	34 00                	xor    al,0x0
    3199:	00 00                	add    BYTE PTR [eax],al
    319b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    31a2:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    31a5:	a2 00 00 00 02       	mov    ds:0x2000000,al
    31aa:	01 02                	add    DWORD PTR [edx],eax
    31ac:	9c                   	pushf  
    31ad:	00 00                	add    BYTE PTR [eax],al
    31af:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    31b2:	00 00                	add    BYTE PTR [eax],al
    31b4:	00 03                	add    BYTE PTR [ebx],al
    31b6:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    31b9:	00 00                	add    BYTE PTR [eax],al
    31bb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    31be:	39 00                	cmp    DWORD PTR [eax],eax
    31c0:	00 00                	add    BYTE PTR [eax],al
    31c2:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    31c5:	e8 00 00 00 05       	call   50031ca <sysEnter_Vector+0x4ed31ca>
    31ca:	04 25                	add    al,0x25
    31cc:	00 00                	add    BYTE PTR [eax],al
    31ce:	00 06                	add    BYTE PTR [esi],al
    31d0:	b0 0a                	mov    al,0xa
    31d2:	00 00                	add    BYTE PTR [eax],al
    31d4:	01 33                	add    DWORD PTR [ebx],esi
    31d6:	9d                   	popf   
    31d7:	00 00                	add    BYTE PTR [eax],al
    31d9:	00 54 1d 00          	add    BYTE PTR [ebp+ebx*1+0x0],dl
    31dd:	30 6e 00             	xor    BYTE PTR [esi+0x0],ch
    31e0:	00 00                	add    BYTE PTR [eax],al
    31e2:	01 9c ef 00 00 00 07 	add    DWORD PTR [edi+ebp*8+0x7000000],ebx
    31e9:	ce                   	into   
    31ea:	0a 00                	or     al,BYTE PTR [eax]
    31ec:	00 01                	add    BYTE PTR [ecx],al
    31ee:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
    31f4:	91                   	xchg   ecx,eax
    31f5:	00 07                	add    BYTE PTR [edi],al
    31f7:	cb                   	retf   
    31f8:	0a 00                	or     al,BYTE PTR [eax]
    31fa:	00 01                	add    BYTE PTR [ecx],al
    31fc:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
    3202:	91                   	xchg   ecx,eax
    3203:	04 08                	add    al,0x8
    3205:	61                   	popa   
    3206:	00 01                	add    BYTE PTR [ecx],al
    3208:	35 9d 00 00 00       	xor    eax,0x9d
    320d:	01 56 08             	add    DWORD PTR [esi+0x8],edx
    3210:	62 00                	bound  eax,QWORD PTR [eax]
    3212:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
    3218:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
    321b:	09 d5                	or     ebp,edx
    321d:	0a 00                	or     al,BYTE PTR [eax]
    321f:	00 01                	add    BYTE PTR [ecx],al
    3221:	52                   	push   edx
    3222:	9d                   	popf   
    3223:	00 00                	add    BYTE PTR [eax],al
    3225:	00 c2                	add    dl,al
    3227:	1d 00 30 1d 00       	sbb    eax,0x1d3000
    322c:	00 00                	add    BYTE PTR [eax],al
    322e:	01 9c 25 01 00 00 07 	add    DWORD PTR [ebp+eiz*1+0x7000001],ebx
    3235:	ce                   	into   
    3236:	0a 00                	or     al,BYTE PTR [eax]
    3238:	00 01                	add    BYTE PTR [ecx],al
    323a:	52                   	push   edx
    323b:	9d                   	popf   
    323c:	00 00                	add    BYTE PTR [eax],al
    323e:	00 02                	add    BYTE PTR [edx],al
    3240:	91                   	xchg   ecx,eax
    3241:	00 07                	add    BYTE PTR [edi],al
    3243:	cb                   	retf   
    3244:	0a 00                	or     al,BYTE PTR [eax]
    3246:	00 01                	add    BYTE PTR [ecx],al
    3248:	52                   	push   edx
    3249:	9d                   	popf   
    324a:	00 00                	add    BYTE PTR [eax],al
    324c:	00 02                	add    BYTE PTR [edx],al
    324e:	91                   	xchg   ecx,eax
    324f:	04 00                	add    al,0x0
    3251:	0a 25 00 00 00 35    	or     ah,BYTE PTR ds:0x35000000
    3257:	01 00                	add    DWORD PTR [eax],eax
    3259:	00 0b                	add    BYTE PTR [ebx],cl
    325b:	96                   	xchg   esi,eax
    325c:	00 00                	add    BYTE PTR [eax],al
    325e:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
    3261:	0c c5                	or     al,0xc5
    3263:	0a 00                	or     al,BYTE PTR [eax]
    3265:	00 01                	add    BYTE PTR [ecx],al
    3267:	19 25 01 00 00 05    	sbb    DWORD PTR ds:0x5000001,esp
    326d:	03 a0 41 00 30 0d    	add    esp,DWORD PTR [eax+0xd300041]
    3273:	4b                   	dec    ebx
    3274:	00 00                	add    BYTE PTR [eax],al
    3276:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3279:	56                   	push   esi
    327a:	00 00                	add    BYTE PTR [eax],al
    327c:	00 05 03 08 43 00    	add    BYTE PTR ds:0x430803,al
    3282:	30 0d b6 00 00 00    	xor    BYTE PTR ds:0xb6,cl
    3288:	04 35                	add    al,0x35
    328a:	56                   	push   esi
    328b:	00 00                	add    BYTE PTR [eax],al
    328d:	00 05 03 0c 43 00    	add    BYTE PTR ds:0x430c03,al
    3293:	30 0d 62 01 00 00    	xor    BYTE PTR ds:0x162,cl
    3299:	04 36                	add    al,0x36
    329b:	56                   	push   esi
    329c:	00 00                	add    BYTE PTR [eax],al
    329e:	00 05 03 04 43 00    	add    BYTE PTR ds:0x430403,al
    32a4:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    32aa:	05 43 84 00 00       	add    eax,0x8443
    32af:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    32b5:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    32bb:	05 44 9b 01 00       	add    eax,0x19b44
    32c0:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
    32c6:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    32cc:	00 00                	add    BYTE PTR [eax],al
    32ce:	81 04 00 00 04 00 da 	add    DWORD PTR [eax+eax*1],0xda000400
    32d5:	12 00                	adc    al,BYTE PTR [eax]
    32d7:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    32da:	fb                   	sti    
    32db:	00 00                	add    BYTE PTR [eax],al
    32dd:	00 0c 59             	add    BYTE PTR [ecx+ebx*2],cl
    32e0:	0b 00                	or     eax,DWORD PTR [eax]
    32e2:	00 79 00             	add    BYTE PTR [ecx+0x0],bh
    32e5:	00 00                	add    BYTE PTR [eax],al
    32e7:	e0 1d                	loopne 3306 <sysEnter_Vector-0x12ccfa>
    32e9:	00 30                	add    BYTE PTR [eax],dh
    32eb:	16                   	push   ss
    32ec:	0c 00                	or     al,0x0
    32ee:	00 3e                	add    BYTE PTR [esi],bh
    32f0:	18 00                	sbb    BYTE PTR [eax],al
    32f2:	00 02                	add    BYTE PTR [edx],al
    32f4:	eb 02                	jmp    32f8 <sysEnter_Vector-0x12cd08>
    32f6:	00 00                	add    BYTE PTR [eax],al
    32f8:	04 cd                	add    al,0xcd
    32fa:	00 00                	add    BYTE PTR [eax],al
    32fc:	00 06                	add    BYTE PTR [esi],al
    32fe:	15 cd 00 00 00       	adc    eax,0xcd
    3303:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
    3306:	00 00                	add    BYTE PTR [eax],al
    3308:	00 03                	add    BYTE PTR [ebx],al
    330a:	7b 03                	jnp    330f <sysEnter_Vector-0x12ccf1>
    330c:	00 00                	add    BYTE PTR [eax],al
    330e:	01 03                	add    DWORD PTR [ebx],eax
    3310:	67 02 00             	add    al,BYTE PTR [bx+si]
    3313:	00 02                	add    BYTE PTR [edx],al
    3315:	03 dd                	add    ebx,ebp
    3317:	02 00                	add    al,BYTE PTR [eax]
    3319:	00 03                	add    BYTE PTR [ebx],al
    331b:	03 5a 02             	add    ebx,DWORD PTR [edx+0x2]
    331e:	00 00                	add    BYTE PTR [eax],al
    3320:	04 03                	add    al,0x3
    3322:	95                   	xchg   ebp,eax
    3323:	03 00                	add    eax,DWORD PTR [eax]
    3325:	00 05 03 cb 03 00    	add    BYTE PTR ds:0x3cb03,al
    332b:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    332e:	36 03 00             	add    eax,DWORD PTR ss:[eax]
    3331:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    3334:	da 03                	fiadd  DWORD PTR [ebx]
    3336:	00 00                	add    BYTE PTR [eax],al
    3338:	61                   	popa   
    3339:	03 c9                	add    ecx,ecx
    333b:	02 00                	add    al,BYTE PTR [eax]
    333d:	00 97 04 53 03 00    	add    BYTE PTR [edi+0x35304],dl
    3343:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    3346:	04 29                	add    al,0x29
    3348:	03 00                	add    eax,DWORD PTR [eax]
    334a:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    334e:	bd 03 00 00 65       	mov    ebp,0x65000003
    3353:	01 04 bb             	add    DWORD PTR [ebx+edi*4],eax
    3356:	02 00                	add    al,BYTE PTR [eax]
    3358:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    335b:	04 f2                	add    al,0xf2
    335d:	03 00                	add    eax,DWORD PTR [eax]
    335f:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    3362:	04 01                	add    al,0x1
    3364:	03 00                	add    eax,DWORD PTR [eax]
    3366:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    3369:	04 a0                	add    al,0xa0
    336b:	02 00                	add    al,BYTE PTR [eax]
    336d:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    3370:	04 6a                	add    al,0x6a
    3372:	03 00                	add    eax,DWORD PTR [eax]
    3374:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    3377:	04 a3                	add    al,0xa3
    3379:	03 00                	add    eax,DWORD PTR [eax]
    337b:	00 00                	add    BYTE PTR [eax],al
    337d:	03 04 0e             	add    eax,DWORD PTR [esi+ecx*1]
    3380:	03 00                	add    eax,DWORD PTR [eax]
    3382:	00 01                	add    BYTE PTR [ecx],al
    3384:	03 04 af             	add    eax,DWORD PTR [edi+ebp*4]
    3387:	02 00                	add    al,BYTE PTR [eax]
    3389:	00 02                	add    BYTE PTR [edx],al
    338b:	03 04 74             	add    eax,DWORD PTR [esp+esi*2]
    338e:	02 00                	add    al,BYTE PTR [eax]
    3390:	00 03                	add    BYTE PTR [ebx],al
    3392:	03 04 84             	add    eax,DWORD PTR [esp+eax*4]
    3395:	02 00                	add    al,BYTE PTR [eax]
    3397:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    339a:	00 05 04 07 3e 00    	add    BYTE PTR ds:0x3e0704,al
    33a0:	00 00                	add    BYTE PTR [eax],al
    33a2:	05 01 06 64 00       	add    eax,0x640601
    33a7:	00 00                	add    BYTE PTR [eax],al
    33a9:	05 01 06 5d 00       	add    eax,0x5d0601
    33ae:	00 00                	add    BYTE PTR [eax],al
    33b0:	05 02 05 f1 00       	add    eax,0xf10502
    33b5:	00 00                	add    BYTE PTR [eax],al
    33b7:	06                   	push   es
    33b8:	04 05                	add    al,0x5
    33ba:	69 6e 74 00 05 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080500
    33c1:	00 00                	add    BYTE PTR [eax],al
    33c3:	00 00                	add    BYTE PTR [eax],al
    33c5:	05 01 08 5b 00       	add    eax,0x5b0801
    33ca:	00 00                	add    BYTE PTR [eax],al
    33cc:	05 02 07 0e 00       	add    eax,0xe0702
    33d1:	00 00                	add    BYTE PTR [eax],al
    33d3:	07                   	pop    es
    33d4:	70 00                	jo     33d6 <sysEnter_Vector-0x12cc2a>
    33d6:	00 00                	add    BYTE PTR [eax],al
    33d8:	02 34 cd 00 00 00 05 	add    dh,BYTE PTR [ecx*8+0x5000000]
    33df:	08 07                	or     BYTE PTR [edi],al
    33e1:	34 00                	xor    al,0x0
    33e3:	00 00                	add    BYTE PTR [eax],al
    33e5:	05 04 05 05 00       	add    eax,0x50504
    33ea:	00 00                	add    BYTE PTR [eax],al
    33ec:	05 0c 04 a2 00       	add    eax,0xa2040c
    33f1:	00 00                	add    BYTE PTR [eax],al
    33f3:	05 01 02 9c 00       	add    eax,0x9c0201
    33f8:	00 00                	add    BYTE PTR [eax],al
    33fa:	07                   	pop    es
    33fb:	69 00 00 00 03 2a    	imul   eax,DWORD PTR [eax],0x2a030000
    3401:	17                   	pop    ss
    3402:	01 00                	add    DWORD PTR [eax],eax
    3404:	00 08                	add    BYTE PTR [eax],cl
    3406:	74 6d                	je     3475 <sysEnter_Vector-0x12cb8b>
    3408:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    340b:	2c c7                	sub    al,0xc7
    340d:	01 00                	add    DWORD PTR [eax],eax
    340f:	00 09                	add    BYTE PTR [ecx],cl
    3411:	d0 05 00 00 03 2e    	rol    BYTE PTR ds:0x2e030000,1
    3417:	e9 00 00 00 00       	jmp    341c <sysEnter_Vector-0x12cbe4>
    341c:	09 2e                	or     DWORD PTR [esi],ebp
    341e:	05 00 00 03 2f       	add    eax,0x2f030000
    3423:	e9 00 00 00 04       	jmp    4003428 <sysEnter_Vector+0x3ed3428>
    3428:	09 58 04             	or     DWORD PTR [eax+0x4],ebx
    342b:	00 00                	add    BYTE PTR [eax],al
    342d:	03 30                	add    esi,DWORD PTR [eax]
    342f:	e9 00 00 00 08       	jmp    8003434 <sysEnter_Vector+0x7ed3434>
    3434:	09 bb 05 00 00 03    	or     DWORD PTR [ebx+0x3000005],edi
    343a:	31 e9                	xor    ecx,ebp
    343c:	00 00                	add    BYTE PTR [eax],al
    343e:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    3441:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    3442:	04 00                	add    al,0x0
    3444:	00 03                	add    BYTE PTR [ebx],al
    3446:	32 e9                	xor    ch,cl
    3448:	00 00                	add    BYTE PTR [eax],al
    344a:	00 10                	add    BYTE PTR [eax],dl
    344c:	09 ae 04 00 00 03    	or     DWORD PTR [esi+0x3000004],ebp
    3452:	33 e9                	xor    ebp,ecx
    3454:	00 00                	add    BYTE PTR [eax],al
    3456:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    3459:	b3 05                	mov    bl,0x5
    345b:	00 00                	add    BYTE PTR [eax],al
    345d:	03 34 e9             	add    esi,DWORD PTR [ecx+ebp*8]
    3460:	00 00                	add    BYTE PTR [eax],al
    3462:	00 18                	add    BYTE PTR [eax],bl
    3464:	09 3b                	or     DWORD PTR [ebx],edi
    3466:	05 00 00 03 35       	add    eax,0x35030000
    346b:	e9 00 00 00 1c       	jmp    1c003470 <sysEnter_Vector+0x1bed3470>
    3470:	09 d9                	or     ecx,ebx
    3472:	04 00                	add    al,0x0
    3474:	00 03                	add    BYTE PTR [ebx],al
    3476:	36                   	ss
    3477:	e9 00 00 00 20       	jmp    2000347c <sysEnter_Vector+0x1fed347c>
    347c:	09 7d 05             	or     DWORD PTR [ebp+0x5],edi
    347f:	00 00                	add    BYTE PTR [eax],al
    3481:	03 37                	add    esi,DWORD PTR [edi]
    3483:	17                   	pop    ss
    3484:	01 00                	add    DWORD PTR [eax],eax
    3486:	00 24 09             	add    BYTE PTR [ecx+ecx*1],ah
    3489:	7d 04                	jge    348f <sysEnter_Vector-0x12cb71>
    348b:	00 00                	add    BYTE PTR [eax],al
    348d:	03 38                	add    edi,DWORD PTR [eax]
    348f:	c7 01 00 00 28 00    	mov    DWORD PTR [ecx],0x280000
    3495:	0a 04 cd 01 00 00 0b 	or     al,BYTE PTR [ecx*8+0xb000001]
    349c:	d4 00                	aam    0x0
    349e:	00 00                	add    BYTE PTR [eax],al
    34a0:	05 04 07 39 00       	add    eax,0x390704
    34a5:	00 00                	add    BYTE PTR [eax],al
    34a7:	05 04 07 e8 00       	add    eax,0xe80704
    34ac:	00 00                	add    BYTE PTR [eax],al
    34ae:	0a 04 d4             	or     al,BYTE PTR [esp+edx*8]
    34b1:	00 00                	add    BYTE PTR [eax],al
    34b3:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
    34b6:	0b 00                	or     eax,DWORD PTR [eax]
    34b8:	00 01                	add    BYTE PTR [ecx],al
    34ba:	16                   	push   ss
    34bb:	2c 01                	sub    al,0x1
    34bd:	00 00                	add    BYTE PTR [eax],al
    34bf:	e0 1d                	loopne 34de <sysEnter_Vector-0x12cb22>
    34c1:	00 30                	add    BYTE PTR [eax],dh
    34c3:	29 00                	sub    DWORD PTR [eax],eax
    34c5:	00 00                	add    BYTE PTR [eax],al
    34c7:	01 9c 0e 02 00 00 0d 	add    DWORD PTR [esi+ecx*1+0xd000002],ebx
    34ce:	51                   	push   ecx
    34cf:	04 00                	add    al,0x0
    34d1:	00 01                	add    BYTE PTR [ecx],al
    34d3:	18 05 01 00 00 02    	sbb    BYTE PTR ds:0x2000001,al
    34d9:	91                   	xchg   ecx,eax
    34da:	74 00                	je     34dc <sysEnter_Vector-0x12cb24>
    34dc:	0e                   	push   cs
    34dd:	f5                   	cmc    
    34de:	0a 00                	or     al,BYTE PTR [eax]
    34e0:	00 01                	add    BYTE PTR [ecx],al
    34e2:	1e                   	push   ds
    34e3:	7c 02                	jl     34e7 <sysEnter_Vector-0x12cb19>
    34e5:	00 00                	add    BYTE PTR [eax],al
    34e7:	09 1e                	or     DWORD PTR [esi],ebx
    34e9:	00 30                	add    BYTE PTR [eax],dh
    34eb:	19 03                	sbb    DWORD PTR [ebx],eax
    34ed:	00 00                	add    BYTE PTR [eax],al
    34ef:	01 9c 7c 02 00 00 0f 	add    DWORD PTR [esp+edi*2+0xf000002],ebx
    34f6:	fe 0a                	dec    BYTE PTR [edx]
    34f8:	00 00                	add    BYTE PTR [eax],al
    34fa:	01 1e                	add    DWORD PTR [esi],ebx
    34fc:	82                   	(bad)  
    34fd:	02 00                	add    al,BYTE PTR [eax]
    34ff:	00 02                	add    BYTE PTR [edx],al
    3501:	91                   	xchg   ecx,eax
    3502:	00 0f                	add    BYTE PTR [edi],cl
    3504:	53                   	push   ebx
    3505:	0b 00                	or     eax,DWORD PTR [eax]
    3507:	00 01                	add    BYTE PTR [ecx],al
    3509:	1e                   	push   ds
    350a:	7c 02                	jl     350e <sysEnter_Vector-0x12caf2>
    350c:	00 00                	add    BYTE PTR [eax],al
    350e:	02 91 04 0d 2c 0b    	add    dl,BYTE PTR [ecx+0xb2c0d04]
    3514:	00 00                	add    BYTE PTR [eax],al
    3516:	01 1f                	add    DWORD PTR [edi],ebx
    3518:	2c 01                	sub    al,0x1
    351a:	00 00                	add    BYTE PTR [eax],al
    351c:	02 91 68 0d 31 0b    	add    dl,BYTE PTR [ecx+0xb310d68]
    3522:	00 00                	add    BYTE PTR [eax],al
    3524:	01 20                	add    DWORD PTR [eax],esp
    3526:	d2 01                	rol    BYTE PTR [ecx],cl
    3528:	00 00                	add    BYTE PTR [eax],al
    352a:	02 91 64 0d e6 0a    	add    dl,BYTE PTR [ecx+0xae60d64]
    3530:	00 00                	add    BYTE PTR [eax],al
    3532:	01 20                	add    DWORD PTR [eax],esp
    3534:	d2 01                	rol    BYTE PTR [ecx],cl
    3536:	00 00                	add    BYTE PTR [eax],al
    3538:	02 91 70 0d b1 04    	add    dl,BYTE PTR [ecx+0x4b10d70]
    353e:	00 00                	add    BYTE PTR [eax],al
    3540:	01 21                	add    DWORD PTR [ecx],esp
    3542:	e9 00 00 00 02       	jmp    2003547 <sysEnter_Vector+0x1ed3547>
    3547:	91                   	xchg   ecx,eax
    3548:	6c                   	ins    BYTE PTR es:[edi],dx
    3549:	00 0a                	add    BYTE PTR [edx],cl
    354b:	04 37                	add    al,0x37
    354d:	01 00                	add    DWORD PTR [eax],eax
    354f:	00 0a                	add    BYTE PTR [edx],cl
    3551:	04 88                	add    al,0x88
    3553:	02 00                	add    al,BYTE PTR [eax]
    3555:	00 0b                	add    BYTE PTR [ebx],cl
    3557:	2c 01                	sub    al,0x1
    3559:	00 00                	add    BYTE PTR [eax],al
    355b:	10 dc                	adc    ah,bl
    355d:	0a 00                	or     al,BYTE PTR [eax]
    355f:	00 01                	add    BYTE PTR [ecx],al
    3561:	3a 7c 02 00          	cmp    bh,BYTE PTR [edx+eax*1+0x0]
    3565:	00 22                	add    BYTE PTR [edx],ah
    3567:	21 00                	and    DWORD PTR [eax],eax
    3569:	30 3f                	xor    BYTE PTR [edi],bh
    356b:	00 00                	add    BYTE PTR [eax],al
    356d:	00 01                	add    BYTE PTR [ecx],al
    356f:	9c                   	pushf  
    3570:	cf                   	iret   
    3571:	02 00                	add    al,BYTE PTR [eax]
    3573:	00 0f                	add    BYTE PTR [edi],cl
    3575:	fe 0a                	dec    BYTE PTR [edx]
    3577:	00 00                	add    BYTE PTR [eax],al
    3579:	01 3a                	add    DWORD PTR [edx],edi
    357b:	82                   	(bad)  
    357c:	02 00                	add    al,BYTE PTR [eax]
    357e:	00 02                	add    BYTE PTR [edx],al
    3580:	91                   	xchg   ecx,eax
    3581:	00 11                	add    BYTE PTR [ecx],dl
    3583:	74 00                	je     3585 <sysEnter_Vector-0x12ca7b>
    3585:	01 3b                	add    DWORD PTR [ebx],edi
    3587:	2c 01                	sub    al,0x1
    3589:	00 00                	add    BYTE PTR [eax],al
    358b:	02 91 6c 0d 53 0b    	add    dl,BYTE PTR [ecx+0xb530d6c]
    3591:	00 00                	add    BYTE PTR [eax],al
    3593:	01 3c 37             	add    DWORD PTR [edi+esi*1],edi
    3596:	01 00                	add    DWORD PTR [eax],eax
    3598:	00 02                	add    BYTE PTR [edx],al
    359a:	91                   	xchg   ecx,eax
    359b:	40                   	inc    eax
    359c:	00 10                	add    BYTE PTR [eax],dl
    359e:	04 0b                	add    al,0xb
    35a0:	00 00                	add    BYTE PTR [eax],al
    35a2:	01 42 7c             	add    DWORD PTR [edx+0x7c],eax
    35a5:	02 00                	add    al,BYTE PTR [eax]
    35a7:	00 61 21             	add    BYTE PTR [ecx+0x21],ah
    35aa:	00 30                	add    BYTE PTR [eax],dh
    35ac:	3e 00 00             	add    BYTE PTR ds:[eax],al
    35af:	00 01                	add    BYTE PTR [ecx],al
    35b1:	9c                   	pushf  
    35b2:	11 03                	adc    DWORD PTR [ebx],eax
    35b4:	00 00                	add    BYTE PTR [eax],al
    35b6:	0f fe 0a             	paddd  mm1,QWORD PTR [edx]
    35b9:	00 00                	add    BYTE PTR [eax],al
    35bb:	01 42 82             	add    DWORD PTR [edx-0x7e],eax
    35be:	02 00                	add    al,BYTE PTR [eax]
    35c0:	00 02                	add    BYTE PTR [edx],al
    35c2:	91                   	xchg   ecx,eax
    35c3:	00 0f                	add    BYTE PTR [edi],cl
    35c5:	53                   	push   ebx
    35c6:	0b 00                	or     eax,DWORD PTR [eax]
    35c8:	00 01                	add    BYTE PTR [ecx],al
    35ca:	42                   	inc    edx
    35cb:	7c 02                	jl     35cf <sysEnter_Vector-0x12ca31>
    35cd:	00 00                	add    BYTE PTR [eax],al
    35cf:	02 91 04 11 74 00    	add    dl,BYTE PTR [ecx+0x741104]
    35d5:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
    35d8:	01 00                	add    DWORD PTR [eax],eax
    35da:	00 02                	add    BYTE PTR [edx],al
    35dc:	91                   	xchg   ecx,eax
    35dd:	6c                   	ins    BYTE PTR es:[edi],dx
    35de:	00 0e                	add    BYTE PTR [esi],cl
    35e0:	2a 0b                	sub    cl,BYTE PTR [ebx]
    35e2:	00 00                	add    BYTE PTR [eax],al
    35e4:	01 49 2c             	add    DWORD PTR [ecx+0x2c],ecx
    35e7:	01 00                	add    DWORD PTR [eax],eax
    35e9:	00 9f 21 00 30 57    	add    BYTE PTR [edi+0x57300021],bl
    35ef:	08 00                	or     BYTE PTR [eax],al
    35f1:	00 01                	add    BYTE PTR [ecx],al
    35f3:	9c                   	pushf  
    35f4:	a9 03 00 00 0f       	test   eax,0xf000003
    35f9:	53                   	push   ebx
    35fa:	0b 00                	or     eax,DWORD PTR [eax]
    35fc:	00 01                	add    BYTE PTR [ecx],al
    35fe:	49                   	dec    ecx
    35ff:	7c 02                	jl     3603 <sysEnter_Vector-0x12c9fd>
    3601:	00 00                	add    BYTE PTR [eax],al
    3603:	02 91 00 11 64 61    	add    dl,BYTE PTR [ecx+0x61641100]
    3609:	79 00                	jns    360b <sysEnter_Vector-0x12c9f5>
    360b:	01 4a 17             	add    DWORD PTR [edx+0x17],ecx
    360e:	01 00                	add    DWORD PTR [eax],eax
    3610:	00 02                	add    BYTE PTR [edx],al
    3612:	91                   	xchg   ecx,eax
    3613:	68 0d b1 04 00       	push   0x4b10d
    3618:	00 01                	add    BYTE PTR [ecx],al
    361a:	4a                   	dec    edx
    361b:	17                   	pop    ss
    361c:	01 00                	add    DWORD PTR [eax],eax
    361e:	00 02                	add    BYTE PTR [edx],al
    3620:	91                   	xchg   ecx,eax
    3621:	54                   	push   esp
    3622:	0d ae 04 00 00       	or     eax,0x4ae
    3627:	01 4b e9             	add    DWORD PTR [ebx-0x17],ecx
    362a:	00 00                	add    BYTE PTR [eax],al
    362c:	00 02                	add    BYTE PTR [edx],al
    362e:	91                   	xchg   ecx,eax
    362f:	4c                   	dec    esp
    3630:	0d 3e 05 00 00       	or     eax,0x53e
    3635:	01 4c e9 00          	add    DWORD PTR [ecx+ebp*8+0x0],ecx
    3639:	00 00                	add    BYTE PTR [eax],al
    363b:	02 91 64 0d 4d 0b    	add    dl,BYTE PTR [ecx+0xb4d0d64]
    3641:	00 00                	add    BYTE PTR [eax],al
    3643:	01 4c e9 00          	add    DWORD PTR [ecx+ebp*8+0x0],ecx
    3647:	00 00                	add    BYTE PTR [eax],al
    3649:	02 91 60 0d 95 05    	add    dl,BYTE PTR [ecx+0x5950d60]
    364f:	00 00                	add    BYTE PTR [eax],al
    3651:	01 4d 17             	add    DWORD PTR [ebp+0x17],ecx
    3654:	01 00                	add    DWORD PTR [eax],eax
    3656:	00 02                	add    BYTE PTR [edx],al
    3658:	91                   	xchg   ecx,eax
    3659:	50                   	push   eax
    365a:	0d 44 0b 00 00       	or     eax,0xb44
    365f:	01 4e e9             	add    DWORD PTR [esi-0x17],ecx
    3662:	00 00                	add    BYTE PTR [eax],al
    3664:	00 02                	add    BYTE PTR [edx],al
    3666:	91                   	xchg   ecx,eax
    3667:	5c                   	pop    esp
    3668:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    366c:	00 01                	add    BYTE PTR [ecx],al
    366e:	4f                   	dec    edi
    366f:	17                   	pop    ss
    3670:	01 00                	add    DWORD PTR [eax],eax
    3672:	00 02                	add    BYTE PTR [edx],al
    3674:	91                   	xchg   ecx,eax
    3675:	58                   	pop    eax
    3676:	00 12                	add    BYTE PTR [edx],dl
    3678:	4b                   	dec    ebx
    3679:	00 00                	add    BYTE PTR [eax],al
    367b:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    367e:	05 01 00 00 05       	add    eax,0x5000001
    3683:	03 08                	add    ecx,DWORD PTR [eax]
    3685:	43                   	inc    ebx
    3686:	00 30                	add    BYTE PTR [eax],dh
    3688:	12 b6 00 00 00 04    	adc    dh,BYTE PTR [esi+0x4000000]
    368e:	35 05 01 00 00       	xor    eax,0x105
    3693:	05 03 0c 43 00       	add    eax,0x430c03
    3698:	30 12                	xor    BYTE PTR [edx],dl
    369a:	62 01                	bound  eax,QWORD PTR [ecx]
    369c:	00 00                	add    BYTE PTR [eax],al
    369e:	04 36                	add    al,0x36
    36a0:	05 01 00 00 05       	add    eax,0x5000001
    36a5:	03 04 43             	add    eax,DWORD PTR [ebx+eax*2]
    36a8:	00 30                	add    BYTE PTR [eax],dh
    36aa:	12 54 00 00          	adc    dl,BYTE PTR [eax+eax*1+0x0]
    36ae:	00 05 43 2c 01 00    	add    BYTE PTR ds:0x12c43,al
    36b4:	00 05 03 14 43 00    	add    BYTE PTR ds:0x431403,al
    36ba:	30 12                	xor    BYTE PTR [edx],dl
    36bc:	28 00                	sub    BYTE PTR [eax],al
    36be:	00 00                	add    BYTE PTR [eax],al
    36c0:	05 44 fe 03 00       	add    eax,0x3fe44
    36c5:	00 05 03 10 43 00    	add    BYTE PTR ds:0x431003,al
    36cb:	30 0a                	xor    BYTE PTR [edx],cl
    36cd:	04 e0                	add    al,0xe0
    36cf:	01 00                	add    DWORD PTR [eax],eax
    36d1:	00 12                	add    BYTE PTR [edx],dl
    36d3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    36d5:	00 00                	add    BYTE PTR [eax],al
    36d7:	01 0c e9             	add    DWORD PTR [ecx+ebp*8],ecx
    36da:	00 00                	add    BYTE PTR [eax],al
    36dc:	00 05 03 08 42 00    	add    BYTE PTR ds:0x420803,al
    36e2:	30 12                	xor    BYTE PTR [edx],dl
    36e4:	ec                   	in     al,dx
    36e5:	0a 00                	or     al,BYTE PTR [eax]
    36e7:	00 01                	add    BYTE PTR [ecx],al
    36e9:	0d 17 01 00 00       	or     eax,0x117
    36ee:	05 03 38 43 00       	add    eax,0x433803
    36f3:	30 13                	xor    BYTE PTR [ebx],dl
    36f5:	e0 01                	loopne 36f8 <sysEnter_Vector-0x12c908>
    36f7:	00 00                	add    BYTE PTR [eax],al
    36f9:	36                   	ss
    36fa:	04 00                	add    al,0x0
    36fc:	00 14 d9             	add    BYTE PTR [ecx+ebx*8],dl
    36ff:	01 00                	add    DWORD PTR [eax],eax
    3701:	00 01                	add    BYTE PTR [ecx],al
    3703:	00 12                	add    BYTE PTR [edx],dl
    3705:	10 0b                	adc    BYTE PTR [ebx],cl
    3707:	00 00                	add    BYTE PTR [eax],al
    3709:	01 0e                	add    DWORD PTR [esi],ecx
    370b:	26                   	es
    370c:	04 00                	add    al,0x0
    370e:	00 05 03 fc 42 00    	add    BYTE PTR ds:0x42fc03,al
    3714:	30 12                	xor    BYTE PTR [edx],dl
    3716:	1e                   	push   ds
    3717:	0b 00                	or     eax,DWORD PTR [eax]
    3719:	00 01                	add    BYTE PTR [ecx],al
    371b:	0f e9 00             	psubsw mm0,QWORD PTR [eax]
    371e:	00 00                	add    BYTE PTR [eax],al
    3720:	05 03 3c 43 00       	add    eax,0x433c03
    3725:	30 13                	xor    BYTE PTR [ebx],dl
    3727:	e9 00 00 00 6e       	jmp    6e00372c <ticksToWait+0x3dfff3f0>
    372c:	04 00                	add    al,0x0
    372e:	00 14 d9             	add    BYTE PTR [ecx+ebx*8],dl
    3731:	01 00                	add    DWORD PTR [eax],eax
    3733:	00 01                	add    BYTE PTR [ecx],al
    3735:	14 d9                	adc    al,0xd9
    3737:	01 00                	add    DWORD PTR [eax],eax
    3739:	00 0b                	add    BYTE PTR [ebx],cl
    373b:	00 12                	add    BYTE PTR [edx],dl
    373d:	18 0b                	sbb    BYTE PTR [ebx],cl
    373f:	00 00                	add    BYTE PTR [eax],al
    3741:	01 11                	add    DWORD PTR [ecx],edx
    3743:	7f 04                	jg     3749 <sysEnter_Vector-0x12c8b7>
    3745:	00 00                	add    BYTE PTR [eax],al
    3747:	05 03 20 40 00       	add    eax,0x402003
    374c:	30 0b                	xor    BYTE PTR [ebx],cl
    374e:	58                   	pop    eax
    374f:	04 00                	add    al,0x0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     2c2:	11 01                	adc    DWORD PTR [ecx],eax
     2c4:	12 06                	adc    al,BYTE PTR [esi]
     2c6:	40                   	inc    eax
     2c7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cd:	00 00                	add    BYTE PTR [eax],al
     2cf:	07                   	pop    es
     2d0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     2d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2da:	02 18                	add    bl,BYTE PTR [eax]
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	08 0b                	or     BYTE PTR [ebx],cl
     2e0:	01 11                	add    DWORD PTR [ecx],edx
     2e2:	01 12                	add    DWORD PTR [edx],edx
     2e4:	06                   	push   es
     2e5:	00 00                	add    BYTE PTR [eax],al
     2e7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     2ea:	03 08                	add    ecx,DWORD PTR [eax]
     2ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f0:	49                   	dec    ecx
     2f1:	13 02                	adc    eax,DWORD PTR [edx]
     2f3:	18 00                	sbb    BYTE PTR [eax],al
     2f5:	00 0a                	add    BYTE PTR [edx],cl
     2f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2fa:	19 03                	sbb    DWORD PTR [ebx],eax
     2fc:	0e                   	push   cs
     2fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     301:	27                   	daa    
     302:	19 11                	sbb    DWORD PTR [ecx],edx
     304:	01 12                	add    DWORD PTR [edx],edx
     306:	06                   	push   es
     307:	40                   	inc    eax
     308:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30e:	00 00                	add    BYTE PTR [eax],al
     310:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     313:	03 0e                	add    ecx,DWORD PTR [esi]
     315:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     317:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     319:	49                   	dec    ecx
     31a:	13 02                	adc    eax,DWORD PTR [edx]
     31c:	18 00                	sbb    BYTE PTR [eax],al
     31e:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     321:	01 11                	add    DWORD PTR [ecx],edx
     323:	01 12                	add    DWORD PTR [edx],edx
     325:	06                   	push   es
     326:	01 13                	add    DWORD PTR [ebx],edx
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	0d 34 00 03 0e       	or     eax,0xe030034
     32f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     331:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     333:	49                   	dec    ecx
     334:	13 3f                	adc    edi,DWORD PTR [edi]
     336:	19 02                	sbb    DWORD PTR [edx],eax
     338:	18 00                	sbb    BYTE PTR [eax],al
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	01 11                	add    DWORD PTR [ecx],edx
     33e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     344:	0e                   	push   cs
     345:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     347:	11 01                	adc    DWORD PTR [ecx],eax
     349:	12 06                	adc    al,BYTE PTR [esi]
     34b:	10 17                	adc    BYTE PTR [edi],dl
     34d:	00 00                	add    BYTE PTR [eax],al
     34f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     352:	0b 0b                	or     ecx,DWORD PTR [ebx]
     354:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     35f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     362:	08 00                	or     BYTE PTR [eax],al
     364:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     367:	00 03                	add    BYTE PTR [ebx],al
     369:	0e                   	push   cs
     36a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36e:	49                   	dec    ecx
     36f:	13 00                	adc    eax,DWORD PTR [eax]
     371:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     377:	49                   	dec    ecx
     378:	13 00                	adc    eax,DWORD PTR [eax]
     37a:	00 06                	add    BYTE PTR [esi],al
     37c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     380:	00 00                	add    BYTE PTR [eax],al
     382:	07                   	pop    es
     383:	04 01                	add    al,0x1
     385:	03 0e                	add    ecx,DWORD PTR [esi]
     387:	0b 0b                	or     ecx,DWORD PTR [ebx]
     389:	49                   	dec    ecx
     38a:	13 3a                	adc    edi,DWORD PTR [edx]
     38c:	0b 3b                	or     edi,DWORD PTR [ebx]
     38e:	0b 01                	or     eax,DWORD PTR [ecx]
     390:	13 00                	adc    eax,DWORD PTR [eax]
     392:	00 08                	add    BYTE PTR [eax],cl
     394:	28 00                	sub    BYTE PTR [eax],al
     396:	03 0e                	add    ecx,DWORD PTR [esi]
     398:	1c 0b                	sbb    al,0xb
     39a:	00 00                	add    BYTE PTR [eax],al
     39c:	09 28                	or     DWORD PTR [eax],ebp
     39e:	00 03                	add    BYTE PTR [ebx],al
     3a0:	0e                   	push   cs
     3a1:	1c 05                	sbb    al,0x5
     3a3:	00 00                	add    BYTE PTR [eax],al
     3a5:	0a 0f                	or     cl,BYTE PTR [edi]
     3a7:	00 0b                	add    BYTE PTR [ebx],cl
     3a9:	0b 00                	or     eax,DWORD PTR [eax]
     3ab:	00 0b                	add    BYTE PTR [ebx],cl
     3ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3b0:	19 03                	sbb    DWORD PTR [ebx],eax
     3b2:	0e                   	push   cs
     3b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b7:	27                   	daa    
     3b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3bb:	11 01                	adc    DWORD PTR [ecx],eax
     3bd:	12 06                	adc    al,BYTE PTR [esi]
     3bf:	40                   	inc    eax
     3c0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	0c 05                	or     al,0x5
     3ca:	00 03                	add    BYTE PTR [ebx],al
     3cc:	0e                   	push   cs
     3cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d1:	49                   	dec    ecx
     3d2:	13 02                	adc    eax,DWORD PTR [edx]
     3d4:	18 00                	sbb    BYTE PTR [eax],al
     3d6:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	27                   	daa    
     3e3:	19 11                	sbb    DWORD PTR [ecx],edx
     3e5:	01 12                	add    DWORD PTR [edx],edx
     3e7:	06                   	push   es
     3e8:	40                   	inc    eax
     3e9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3ef:	00 00                	add    BYTE PTR [eax],al
     3f1:	0e                   	push   cs
     3f2:	34 00                	xor    al,0x0
     3f4:	03 0e                	add    ecx,DWORD PTR [esi]
     3f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fa:	49                   	dec    ecx
     3fb:	13 3f                	adc    edi,DWORD PTR [edi]
     3fd:	19 02                	sbb    DWORD PTR [edx],eax
     3ff:	18 00                	sbb    BYTE PTR [eax],al
     401:	00 00                	add    BYTE PTR [eax],al
     403:	01 11                	add    DWORD PTR [ecx],edx
     405:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40b:	0e                   	push   cs
     40c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	10 17                	adc    BYTE PTR [edi],dl
     414:	00 00                	add    BYTE PTR [eax],al
     416:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     419:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     41e:	0e                   	push   cs
     41f:	00 00                	add    BYTE PTR [eax],al
     421:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     424:	0b 0b                	or     ecx,DWORD PTR [ebx]
     426:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     429:	08 00                	or     BYTE PTR [eax],al
     42b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     42e:	00 03                	add    BYTE PTR [ebx],al
     430:	0e                   	push   cs
     431:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     433:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     435:	49                   	dec    ecx
     436:	13 00                	adc    eax,DWORD PTR [eax]
     438:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     43e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     440:	49                   	dec    ecx
     441:	13 3a                	adc    edi,DWORD PTR [edx]
     443:	0b 3b                	or     edi,DWORD PTR [ebx]
     445:	0b 01                	or     eax,DWORD PTR [ecx]
     447:	13 00                	adc    eax,DWORD PTR [eax]
     449:	00 06                	add    BYTE PTR [esi],al
     44b:	28 00                	sub    BYTE PTR [eax],al
     44d:	03 0e                	add    ecx,DWORD PTR [esi]
     44f:	1c 0b                	sbb    al,0xb
     451:	00 00                	add    BYTE PTR [eax],al
     453:	07                   	pop    es
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	03 0e                	add    ecx,DWORD PTR [esi]
     458:	1c 05                	sbb    al,0x5
     45a:	00 00                	add    BYTE PTR [eax],al
     45c:	08 0f                	or     BYTE PTR [edi],cl
     45e:	00 0b                	add    BYTE PTR [ebx],cl
     460:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 2e                	or     DWORD PTR [esi],ebp
     467:	01 3f                	add    DWORD PTR [edi],edi
     469:	19 03                	sbb    DWORD PTR [ebx],eax
     46b:	0e                   	push   cs
     46c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     46e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     470:	27                   	daa    
     471:	19 11                	sbb    DWORD PTR [ecx],edx
     473:	01 12                	add    DWORD PTR [edx],edx
     475:	06                   	push   es
     476:	40                   	inc    eax
     477:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     485:	0b 3b                	or     edi,DWORD PTR [ebx]
     487:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     48a:	02 18                	add    bl,BYTE PTR [eax]
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     494:	0b 3b                	or     edi,DWORD PTR [ebx]
     496:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     499:	02 18                	add    bl,BYTE PTR [eax]
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	0c 34                	or     al,0x34
     49f:	00 03                	add    BYTE PTR [ebx],al
     4a1:	0e                   	push   cs
     4a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a6:	49                   	dec    ecx
     4a7:	13 02                	adc    eax,DWORD PTR [edx]
     4a9:	18 00                	sbb    BYTE PTR [eax],al
     4ab:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     4b1:	01 13                	add    DWORD PTR [ebx],edx
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	0e                   	push   cs
     4b6:	21 00                	and    DWORD PTR [eax],eax
     4b8:	49                   	dec    ecx
     4b9:	13 2f                	adc    ebp,DWORD PTR [edi]
     4bb:	0b 00                	or     eax,DWORD PTR [eax]
     4bd:	00 0f                	add    BYTE PTR [edi],cl
     4bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4c2:	19 03                	sbb    DWORD PTR [ebx],eax
     4c4:	0e                   	push   cs
     4c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c9:	49                   	dec    ecx
     4ca:	13 11                	adc    edx,DWORD PTR [ecx]
     4cc:	01 12                	add    DWORD PTR [edx],edx
     4ce:	06                   	push   es
     4cf:	40                   	inc    eax
     4d0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     4d6:	00 00                	add    BYTE PTR [eax],al
     4d8:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4db:	03 08                	add    ecx,DWORD PTR [eax]
     4dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e1:	49                   	dec    ecx
     4e2:	13 02                	adc    eax,DWORD PTR [edx]
     4e4:	18 00                	sbb    BYTE PTR [eax],al
     4e6:	00 11                	add    BYTE PTR [ecx],dl
     4e8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4eb:	19 03                	sbb    DWORD PTR [ebx],eax
     4ed:	0e                   	push   cs
     4ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f2:	27                   	daa    
     4f3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4f6:	11 01                	adc    DWORD PTR [ecx],eax
     4f8:	12 06                	adc    al,BYTE PTR [esi]
     4fa:	40                   	inc    eax
     4fb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     501:	00 00                	add    BYTE PTR [eax],al
     503:	12 0a                	adc    cl,BYTE PTR [edx]
     505:	00 03                	add    BYTE PTR [ebx],al
     507:	0e                   	push   cs
     508:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     50a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     50c:	11 01                	adc    DWORD PTR [ecx],eax
     50e:	00 00                	add    BYTE PTR [eax],al
     510:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     513:	03 0e                	add    ecx,DWORD PTR [esi]
     515:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     517:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     519:	49                   	dec    ecx
     51a:	13 3f                	adc    edi,DWORD PTR [edi]
     51c:	19 02                	sbb    DWORD PTR [edx],eax
     51e:	18 00                	sbb    BYTE PTR [eax],al
     520:	00 00                	add    BYTE PTR [eax],al
     522:	01 11                	add    DWORD PTR [ecx],edx
     524:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     52a:	0e                   	push   cs
     52b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     52d:	11 01                	adc    DWORD PTR [ecx],eax
     52f:	12 06                	adc    al,BYTE PTR [esi]
     531:	10 17                	adc    BYTE PTR [edi],dl
     533:	00 00                	add    BYTE PTR [eax],al
     535:	02 16                	add    dl,BYTE PTR [esi]
     537:	00 03                	add    BYTE PTR [ebx],al
     539:	0e                   	push   cs
     53a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53e:	49                   	dec    ecx
     53f:	13 00                	adc    eax,DWORD PTR [eax]
     541:	00 03                	add    BYTE PTR [ebx],al
     543:	0f 00 0b             	str    WORD PTR [ebx]
     546:	0b 03                	or     eax,DWORD PTR [ebx]
     548:	0e                   	push   cs
     549:	49                   	dec    ecx
     54a:	13 00                	adc    eax,DWORD PTR [eax]
     54c:	00 04 24             	add    BYTE PTR [esp],al
     54f:	00 0b                	add    BYTE PTR [ebx],cl
     551:	0b 3e                	or     edi,DWORD PTR [esi]
     553:	0b 03                	or     eax,DWORD PTR [ebx]
     555:	0e                   	push   cs
     556:	00 00                	add    BYTE PTR [eax],al
     558:	05 24 00 0b 0b       	add    eax,0xb0b0024
     55d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     560:	08 00                	or     BYTE PTR [eax],al
     562:	00 06                	add    BYTE PTR [esi],al
     564:	13 01                	adc    eax,DWORD PTR [ecx]
     566:	03 08                	add    ecx,DWORD PTR [eax]
     568:	0b 0b                	or     ecx,DWORD PTR [ebx]
     56a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     56c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     56e:	01 13                	add    DWORD PTR [ebx],edx
     570:	00 00                	add    BYTE PTR [eax],al
     572:	07                   	pop    es
     573:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     578:	0b 3b                	or     edi,DWORD PTR [ebx]
     57a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     57d:	38 0b                	cmp    BYTE PTR [ebx],cl
     57f:	00 00                	add    BYTE PTR [eax],al
     581:	08 0f                	or     BYTE PTR [edi],cl
     583:	00 0b                	add    BYTE PTR [ebx],cl
     585:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     588:	00 00                	add    BYTE PTR [eax],al
     58a:	09 26                	or     DWORD PTR [esi],esp
     58c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     58f:	00 00                	add    BYTE PTR [eax],al
     591:	0a 04 01             	or     al,BYTE PTR [ecx+eax*1]
     594:	03 0e                	add    ecx,DWORD PTR [esi]
     596:	0b 0b                	or     ecx,DWORD PTR [ebx]
     598:	49                   	dec    ecx
     599:	13 3a                	adc    edi,DWORD PTR [edx]
     59b:	0b 3b                	or     edi,DWORD PTR [ebx]
     59d:	0b 01                	or     eax,DWORD PTR [ecx]
     59f:	13 00                	adc    eax,DWORD PTR [eax]
     5a1:	00 0b                	add    BYTE PTR [ebx],cl
     5a3:	28 00                	sub    BYTE PTR [eax],al
     5a5:	03 0e                	add    ecx,DWORD PTR [esi]
     5a7:	1c 0b                	sbb    al,0xb
     5a9:	00 00                	add    BYTE PTR [eax],al
     5ab:	0c 28                	or     al,0x28
     5ad:	00 03                	add    BYTE PTR [ebx],al
     5af:	0e                   	push   cs
     5b0:	1c 05                	sbb    al,0x5
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	0d 0f 00 0b 0b       	or     eax,0xb0b000f
     5b9:	00 00                	add    BYTE PTR [eax],al
     5bb:	0e                   	push   cs
     5bc:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     5bf:	19 03                	sbb    DWORD PTR [ebx],eax
     5c1:	0e                   	push   cs
     5c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5c6:	27                   	daa    
     5c7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ca:	11 01                	adc    DWORD PTR [ecx],eax
     5cc:	12 06                	adc    al,BYTE PTR [esi]
     5ce:	40                   	inc    eax
     5cf:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5d5:	00 00                	add    BYTE PTR [eax],al
     5d7:	0f 05                	syscall 
     5d9:	00 03                	add    BYTE PTR [ebx],al
     5db:	0e                   	push   cs
     5dc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5de:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e0:	49                   	dec    ecx
     5e1:	13 02                	adc    eax,DWORD PTR [edx]
     5e3:	18 00                	sbb    BYTE PTR [eax],al
     5e5:	00 10                	add    BYTE PTR [eax],dl
     5e7:	34 00                	xor    al,0x0
     5e9:	03 0e                	add    ecx,DWORD PTR [esi]
     5eb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5ed:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5ef:	49                   	dec    ecx
     5f0:	13 02                	adc    eax,DWORD PTR [edx]
     5f2:	18 00                	sbb    BYTE PTR [eax],al
     5f4:	00 11                	add    BYTE PTR [ecx],dl
     5f6:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     5f9:	19 03                	sbb    DWORD PTR [ebx],eax
     5fb:	0e                   	push   cs
     5fc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5fe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     600:	11 01                	adc    DWORD PTR [ecx],eax
     602:	12 06                	adc    al,BYTE PTR [esi]
     604:	40                   	inc    eax
     605:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     60b:	12 2e                	adc    ch,BYTE PTR [esi]
     60d:	00 3f                	add    BYTE PTR [edi],bh
     60f:	19 03                	sbb    DWORD PTR [ebx],eax
     611:	0e                   	push   cs
     612:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     614:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     616:	27                   	daa    
     617:	19 11                	sbb    DWORD PTR [ecx],edx
     619:	01 12                	add    DWORD PTR [edx],edx
     61b:	06                   	push   es
     61c:	40                   	inc    eax
     61d:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     623:	13 2e                	adc    ebp,DWORD PTR [esi]
     625:	01 3f                	add    DWORD PTR [edi],edi
     627:	19 03                	sbb    DWORD PTR [ebx],eax
     629:	0e                   	push   cs
     62a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     62c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     62e:	27                   	daa    
     62f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     632:	11 01                	adc    DWORD PTR [ecx],eax
     634:	12 06                	adc    al,BYTE PTR [esi]
     636:	40                   	inc    eax
     637:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     63d:	00 00                	add    BYTE PTR [eax],al
     63f:	14 18                	adc    al,0x18
     641:	00 00                	add    BYTE PTR [eax],al
     643:	00 15 0b 01 11 01    	add    BYTE PTR ds:0x111010b,dl
     649:	12 06                	adc    al,BYTE PTR [esi]
     64b:	00 00                	add    BYTE PTR [eax],al
     64d:	16                   	push   ss
     64e:	34 00                	xor    al,0x0
     650:	03 08                	add    ecx,DWORD PTR [eax]
     652:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     654:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     656:	49                   	dec    ecx
     657:	13 02                	adc    eax,DWORD PTR [edx]
     659:	18 00                	sbb    BYTE PTR [eax],al
     65b:	00 17                	add    BYTE PTR [edi],dl
     65d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     660:	19 03                	sbb    DWORD PTR [ebx],eax
     662:	0e                   	push   cs
     663:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     665:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     667:	27                   	daa    
     668:	19 11                	sbb    DWORD PTR [ecx],edx
     66a:	01 12                	add    DWORD PTR [edx],edx
     66c:	06                   	push   es
     66d:	40                   	inc    eax
     66e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     674:	00 00                	add    BYTE PTR [eax],al
     676:	18 05 00 03 08 3a    	sbb    BYTE PTR ds:0x3a080300,al
     67c:	0b 3b                	or     edi,DWORD PTR [ebx]
     67e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     681:	02 18                	add    bl,BYTE PTR [eax]
     683:	00 00                	add    BYTE PTR [eax],al
     685:	19 2e                	sbb    DWORD PTR [esi],ebp
     687:	01 3f                	add    DWORD PTR [edi],edi
     689:	19 03                	sbb    DWORD PTR [ebx],eax
     68b:	0e                   	push   cs
     68c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     68e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     690:	49                   	dec    ecx
     691:	13 11                	adc    edx,DWORD PTR [ecx]
     693:	01 12                	add    DWORD PTR [edx],edx
     695:	06                   	push   es
     696:	40                   	inc    eax
     697:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     69d:	00 00                	add    BYTE PTR [eax],al
     69f:	1a 34 00             	sbb    dh,BYTE PTR [eax+eax*1]
     6a2:	03 0e                	add    ecx,DWORD PTR [esi]
     6a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6a8:	49                   	dec    ecx
     6a9:	13 3f                	adc    edi,DWORD PTR [edi]
     6ab:	19 02                	sbb    DWORD PTR [edx],eax
     6ad:	18 00                	sbb    BYTE PTR [eax],al
     6af:	00 00                	add    BYTE PTR [eax],al
     6b1:	01 11                	add    DWORD PTR [ecx],edx
     6b3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6b9:	0e                   	push   cs
     6ba:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     6bc:	11 01                	adc    DWORD PTR [ecx],eax
     6be:	12 06                	adc    al,BYTE PTR [esi]
     6c0:	10 17                	adc    BYTE PTR [edi],dl
     6c2:	00 00                	add    BYTE PTR [eax],al
     6c4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     6c7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6c9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6cc:	0e                   	push   cs
     6cd:	00 00                	add    BYTE PTR [eax],al
     6cf:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     6d2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6d4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6d7:	08 00                	or     BYTE PTR [eax],al
     6d9:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     6dc:	00 03                	add    BYTE PTR [ebx],al
     6de:	0e                   	push   cs
     6df:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6e1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6e3:	49                   	dec    ecx
     6e4:	13 00                	adc    eax,DWORD PTR [eax]
     6e6:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     6ec:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6f2:	01 13                	add    DWORD PTR [ebx],edx
     6f4:	00 00                	add    BYTE PTR [eax],al
     6f6:	06                   	push   es
     6f7:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     6fc:	0b 3b                	or     edi,DWORD PTR [ebx]
     6fe:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     701:	38 0b                	cmp    BYTE PTR [ebx],cl
     703:	00 00                	add    BYTE PTR [eax],al
     705:	07                   	pop    es
     706:	0d 00 03 08 3a       	or     eax,0x3a080300
     70b:	0b 3b                	or     edi,DWORD PTR [ebx]
     70d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     710:	38 0b                	cmp    BYTE PTR [ebx],cl
     712:	00 00                	add    BYTE PTR [eax],al
     714:	08 0f                	or     BYTE PTR [edi],cl
     716:	00 0b                	add    BYTE PTR [ebx],cl
     718:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     71b:	00 00                	add    BYTE PTR [eax],al
     71d:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     720:	03 0e                	add    ecx,DWORD PTR [esi]
     722:	0b 0b                	or     ecx,DWORD PTR [ebx]
     724:	49                   	dec    ecx
     725:	13 3a                	adc    edi,DWORD PTR [edx]
     727:	0b 3b                	or     edi,DWORD PTR [ebx]
     729:	0b 01                	or     eax,DWORD PTR [ecx]
     72b:	13 00                	adc    eax,DWORD PTR [eax]
     72d:	00 0a                	add    BYTE PTR [edx],cl
     72f:	28 00                	sub    BYTE PTR [eax],al
     731:	03 0e                	add    ecx,DWORD PTR [esi]
     733:	1c 0b                	sbb    al,0xb
     735:	00 00                	add    BYTE PTR [eax],al
     737:	0b 28                	or     ebp,DWORD PTR [eax]
     739:	00 03                	add    BYTE PTR [ebx],al
     73b:	0e                   	push   cs
     73c:	1c 05                	sbb    al,0x5
     73e:	00 00                	add    BYTE PTR [eax],al
     740:	0c 0f                	or     al,0xf
     742:	00 0b                	add    BYTE PTR [ebx],cl
     744:	0b 00                	or     eax,DWORD PTR [eax]
     746:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     74c:	03 0e                	add    ecx,DWORD PTR [esi]
     74e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     750:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     752:	11 01                	adc    DWORD PTR [ecx],eax
     754:	12 06                	adc    al,BYTE PTR [esi]
     756:	40                   	inc    eax
     757:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     75d:	0e                   	push   cs
     75e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     761:	19 03                	sbb    DWORD PTR [ebx],eax
     763:	0e                   	push   cs
     764:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     766:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     768:	27                   	daa    
     769:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     76c:	11 01                	adc    DWORD PTR [ecx],eax
     76e:	12 06                	adc    al,BYTE PTR [esi]
     770:	40                   	inc    eax
     771:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     777:	00 00                	add    BYTE PTR [eax],al
     779:	0f 05                	syscall 
     77b:	00 03                	add    BYTE PTR [ebx],al
     77d:	0e                   	push   cs
     77e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     780:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     782:	49                   	dec    ecx
     783:	13 02                	adc    eax,DWORD PTR [edx]
     785:	18 00                	sbb    BYTE PTR [eax],al
     787:	00 10                	add    BYTE PTR [eax],dl
     789:	34 00                	xor    al,0x0
     78b:	03 0e                	add    ecx,DWORD PTR [esi]
     78d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     78f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     791:	49                   	dec    ecx
     792:	13 02                	adc    eax,DWORD PTR [edx]
     794:	18 00                	sbb    BYTE PTR [eax],al
     796:	00 11                	add    BYTE PTR [ecx],dl
     798:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     79b:	19 03                	sbb    DWORD PTR [ebx],eax
     79d:	0e                   	push   cs
     79e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7a0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7a2:	27                   	daa    
     7a3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7a6:	11 01                	adc    DWORD PTR [ecx],eax
     7a8:	12 06                	adc    al,BYTE PTR [esi]
     7aa:	40                   	inc    eax
     7ab:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7b1:	00 00                	add    BYTE PTR [eax],al
     7b3:	12 2e                	adc    ch,BYTE PTR [esi]
     7b5:	01 3f                	add    DWORD PTR [edi],edi
     7b7:	19 03                	sbb    DWORD PTR [ebx],eax
     7b9:	0e                   	push   cs
     7ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7be:	27                   	daa    
     7bf:	19 11                	sbb    DWORD PTR [ecx],edx
     7c1:	01 12                	add    DWORD PTR [edx],edx
     7c3:	06                   	push   es
     7c4:	40                   	inc    eax
     7c5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7cb:	00 00                	add    BYTE PTR [eax],al
     7cd:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     7d0:	03 08                	add    ecx,DWORD PTR [eax]
     7d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7d6:	49                   	dec    ecx
     7d7:	13 02                	adc    eax,DWORD PTR [edx]
     7d9:	18 00                	sbb    BYTE PTR [eax],al
     7db:	00 14 0a             	add    BYTE PTR [edx+ecx*1],dl
     7de:	00 03                	add    BYTE PTR [ebx],al
     7e0:	0e                   	push   cs
     7e1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7e3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7e5:	11 01                	adc    DWORD PTR [ecx],eax
     7e7:	00 00                	add    BYTE PTR [eax],al
     7e9:	15 34 00 03 0e       	adc    eax,0xe030034
     7ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7f2:	49                   	dec    ecx
     7f3:	13 3f                	adc    edi,DWORD PTR [edi]
     7f5:	19 02                	sbb    DWORD PTR [edx],eax
     7f7:	18 00                	sbb    BYTE PTR [eax],al
     7f9:	00 00                	add    BYTE PTR [eax],al
     7fb:	01 11                	add    DWORD PTR [ecx],edx
     7fd:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     803:	0e                   	push   cs
     804:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     806:	11 01                	adc    DWORD PTR [ecx],eax
     808:	12 06                	adc    al,BYTE PTR [esi]
     80a:	10 17                	adc    BYTE PTR [edi],dl
     80c:	00 00                	add    BYTE PTR [eax],al
     80e:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     811:	0b 0b                	or     ecx,DWORD PTR [ebx]
     813:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     816:	0e                   	push   cs
     817:	00 00                	add    BYTE PTR [eax],al
     819:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     81c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     81e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     821:	08 00                	or     BYTE PTR [eax],al
     823:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     826:	00 0b                	add    BYTE PTR [ebx],cl
     828:	0b 00                	or     eax,DWORD PTR [eax]
     82a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     830:	49                   	dec    ecx
     831:	13 00                	adc    eax,DWORD PTR [eax]
     833:	00 06                	add    BYTE PTR [esi],al
     835:	16                   	push   ss
     836:	00 03                	add    BYTE PTR [ebx],al
     838:	0e                   	push   cs
     839:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     83b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     83d:	49                   	dec    ecx
     83e:	13 00                	adc    eax,DWORD PTR [eax]
     840:	00 07                	add    BYTE PTR [edi],al
     842:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     846:	00 00                	add    BYTE PTR [eax],al
     848:	08 2e                	or     BYTE PTR [esi],ch
     84a:	01 3f                	add    DWORD PTR [edi],edi
     84c:	19 03                	sbb    DWORD PTR [ebx],eax
     84e:	0e                   	push   cs
     84f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     851:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     853:	27                   	daa    
     854:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     857:	11 01                	adc    DWORD PTR [ecx],eax
     859:	12 06                	adc    al,BYTE PTR [esi]
     85b:	40                   	inc    eax
     85c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     862:	00 00                	add    BYTE PTR [eax],al
     864:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     86a:	0b 3b                	or     edi,DWORD PTR [ebx]
     86c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     86f:	02 18                	add    bl,BYTE PTR [eax]
     871:	00 00                	add    BYTE PTR [eax],al
     873:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     879:	0b 3b                	or     edi,DWORD PTR [ebx]
     87b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     87e:	02 18                	add    bl,BYTE PTR [eax]
     880:	00 00                	add    BYTE PTR [eax],al
     882:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     885:	03 08                	add    ecx,DWORD PTR [eax]
     887:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     889:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     88b:	49                   	dec    ecx
     88c:	13 02                	adc    eax,DWORD PTR [edx]
     88e:	18 00                	sbb    BYTE PTR [eax],al
     890:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     893:	01 11                	add    DWORD PTR [ecx],edx
     895:	01 12                	add    DWORD PTR [edx],edx
     897:	06                   	push   es
     898:	01 13                	add    DWORD PTR [ebx],edx
     89a:	00 00                	add    BYTE PTR [eax],al
     89c:	0d 0b 01 11 01       	or     eax,0x111010b
     8a1:	12 06                	adc    al,BYTE PTR [esi]
     8a3:	00 00                	add    BYTE PTR [eax],al
     8a5:	0e                   	push   cs
     8a6:	26 00 00             	add    BYTE PTR es:[eax],al
     8a9:	00 0f                	add    BYTE PTR [edi],cl
     8ab:	34 00                	xor    al,0x0
     8ad:	03 0e                	add    ecx,DWORD PTR [esi]
     8af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8b3:	49                   	dec    ecx
     8b4:	13 3f                	adc    edi,DWORD PTR [edi]
     8b6:	19 02                	sbb    DWORD PTR [edx],eax
     8b8:	18 00                	sbb    BYTE PTR [eax],al
     8ba:	00 00                	add    BYTE PTR [eax],al
     8bc:	01 11                	add    DWORD PTR [ecx],edx
     8be:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8c4:	0e                   	push   cs
     8c5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8c7:	11 01                	adc    DWORD PTR [ecx],eax
     8c9:	12 06                	adc    al,BYTE PTR [esi]
     8cb:	10 17                	adc    BYTE PTR [edi],dl
     8cd:	00 00                	add    BYTE PTR [eax],al
     8cf:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8d2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8d4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8d7:	0e                   	push   cs
     8d8:	00 00                	add    BYTE PTR [eax],al
     8da:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     8dd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8df:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8e2:	08 00                	or     BYTE PTR [eax],al
     8e4:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     8e7:	00 03                	add    BYTE PTR [ebx],al
     8e9:	0e                   	push   cs
     8ea:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8ec:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8ee:	49                   	dec    ecx
     8ef:	13 00                	adc    eax,DWORD PTR [eax]
     8f1:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     8f7:	00 00                	add    BYTE PTR [eax],al
     8f9:	06                   	push   es
     8fa:	0f 00 0b             	str    WORD PTR [ebx]
     8fd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     900:	00 00                	add    BYTE PTR [eax],al
     902:	07                   	pop    es
     903:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     906:	19 03                	sbb    DWORD PTR [ebx],eax
     908:	0e                   	push   cs
     909:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     90b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     90d:	27                   	daa    
     90e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     911:	11 01                	adc    DWORD PTR [ecx],eax
     913:	12 06                	adc    al,BYTE PTR [esi]
     915:	40                   	inc    eax
     916:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     91c:	00 00                	add    BYTE PTR [eax],al
     91e:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     924:	0b 3b                	or     edi,DWORD PTR [ebx]
     926:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     929:	02 18                	add    bl,BYTE PTR [eax]
     92b:	00 00                	add    BYTE PTR [eax],al
     92d:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     930:	03 08                	add    ecx,DWORD PTR [eax]
     932:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     934:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     936:	49                   	dec    ecx
     937:	13 02                	adc    eax,DWORD PTR [edx]
     939:	18 00                	sbb    BYTE PTR [eax],al
     93b:	00 0a                	add    BYTE PTR [edx],cl
     93d:	34 00                	xor    al,0x0
     93f:	03 0e                	add    ecx,DWORD PTR [esi]
     941:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     943:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     945:	49                   	dec    ecx
     946:	13 02                	adc    eax,DWORD PTR [edx]
     948:	18 00                	sbb    BYTE PTR [eax],al
     94a:	00 0b                	add    BYTE PTR [ebx],cl
     94c:	34 00                	xor    al,0x0
     94e:	03 0e                	add    ecx,DWORD PTR [esi]
     950:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     952:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     954:	49                   	dec    ecx
     955:	13 3f                	adc    edi,DWORD PTR [edi]
     957:	19 02                	sbb    DWORD PTR [edx],eax
     959:	18 00                	sbb    BYTE PTR [eax],al
     95b:	00 00                	add    BYTE PTR [eax],al
     95d:	01 11                	add    DWORD PTR [ecx],edx
     95f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     965:	0e                   	push   cs
     966:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     968:	11 01                	adc    DWORD PTR [ecx],eax
     96a:	12 06                	adc    al,BYTE PTR [esi]
     96c:	10 17                	adc    BYTE PTR [edi],dl
     96e:	00 00                	add    BYTE PTR [eax],al
     970:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     973:	0b 0b                	or     ecx,DWORD PTR [ebx]
     975:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     978:	0e                   	push   cs
     979:	00 00                	add    BYTE PTR [eax],al
     97b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     97e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     980:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     983:	08 00                	or     BYTE PTR [eax],al
     985:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     988:	00 03                	add    BYTE PTR [ebx],al
     98a:	0e                   	push   cs
     98b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     98d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     98f:	49                   	dec    ecx
     990:	13 00                	adc    eax,DWORD PTR [eax]
     992:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     998:	00 00                	add    BYTE PTR [eax],al
     99a:	06                   	push   es
     99b:	0f 00 0b             	str    WORD PTR [ebx]
     99e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9a1:	00 00                	add    BYTE PTR [eax],al
     9a3:	07                   	pop    es
     9a4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9a7:	19 03                	sbb    DWORD PTR [ebx],eax
     9a9:	0e                   	push   cs
     9aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9ae:	27                   	daa    
     9af:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9b2:	11 01                	adc    DWORD PTR [ecx],eax
     9b4:	12 06                	adc    al,BYTE PTR [esi]
     9b6:	40                   	inc    eax
     9b7:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9bd:	00 00                	add    BYTE PTR [eax],al
     9bf:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     9c5:	0b 3b                	or     edi,DWORD PTR [ebx]
     9c7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9ca:	02 18                	add    bl,BYTE PTR [eax]
     9cc:	00 00                	add    BYTE PTR [eax],al
     9ce:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     9d4:	0b 3b                	or     edi,DWORD PTR [ebx]
     9d6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9d9:	02 18                	add    bl,BYTE PTR [eax]
     9db:	00 00                	add    BYTE PTR [eax],al
     9dd:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     9e0:	03 0e                	add    ecx,DWORD PTR [esi]
     9e2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9e6:	49                   	dec    ecx
     9e7:	13 3f                	adc    edi,DWORD PTR [edi]
     9e9:	19 02                	sbb    DWORD PTR [edx],eax
     9eb:	18 00                	sbb    BYTE PTR [eax],al
     9ed:	00 00                	add    BYTE PTR [eax],al
     9ef:	01 11                	add    DWORD PTR [ecx],edx
     9f1:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9f7:	0e                   	push   cs
     9f8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9fa:	11 01                	adc    DWORD PTR [ecx],eax
     9fc:	12 06                	adc    al,BYTE PTR [esi]
     9fe:	10 17                	adc    BYTE PTR [edi],dl
     a00:	00 00                	add    BYTE PTR [eax],al
     a02:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a05:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a07:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a0a:	0e                   	push   cs
     a0b:	00 00                	add    BYTE PTR [eax],al
     a0d:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a10:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a12:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a15:	08 00                	or     BYTE PTR [eax],al
     a17:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a1a:	00 03                	add    BYTE PTR [ebx],al
     a1c:	0e                   	push   cs
     a1d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a1f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a21:	49                   	dec    ecx
     a22:	13 00                	adc    eax,DWORD PTR [eax]
     a24:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a2a:	49                   	dec    ecx
     a2b:	13 00                	adc    eax,DWORD PTR [eax]
     a2d:	00 06                	add    BYTE PTR [esi],al
     a2f:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     a33:	00 00                	add    BYTE PTR [eax],al
     a35:	07                   	pop    es
     a36:	0f 00 0b             	str    WORD PTR [ebx]
     a39:	0b 00                	or     eax,DWORD PTR [eax]
     a3b:	00 08                	add    BYTE PTR [eax],cl
     a3d:	13 01                	adc    eax,DWORD PTR [ecx]
     a3f:	03 0e                	add    ecx,DWORD PTR [esi]
     a41:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a43:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a45:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a47:	01 13                	add    DWORD PTR [ebx],edx
     a49:	00 00                	add    BYTE PTR [eax],al
     a4b:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     a51:	0b 3b                	or     edi,DWORD PTR [ebx]
     a53:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a56:	38 0b                	cmp    BYTE PTR [ebx],cl
     a58:	00 00                	add    BYTE PTR [eax],al
     a5a:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     a60:	13 01                	adc    eax,DWORD PTR [ecx]
     a62:	13 00                	adc    eax,DWORD PTR [eax]
     a64:	00 0b                	add    BYTE PTR [ebx],cl
     a66:	05 00 49 13 00       	add    eax,0x134900
     a6b:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     a6e:	01 3f                	add    DWORD PTR [edi],edi
     a70:	19 03                	sbb    DWORD PTR [ebx],eax
     a72:	0e                   	push   cs
     a73:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a75:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a77:	27                   	daa    
     a78:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a7b:	11 01                	adc    DWORD PTR [ecx],eax
     a7d:	12 06                	adc    al,BYTE PTR [esi]
     a7f:	40                   	inc    eax
     a80:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a86:	00 00                	add    BYTE PTR [eax],al
     a88:	0d 05 00 03 0e       	or     eax,0xe030005
     a8d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a8f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a91:	49                   	dec    ecx
     a92:	13 02                	adc    eax,DWORD PTR [edx]
     a94:	18 00                	sbb    BYTE PTR [eax],al
     a96:	00 0e                	add    BYTE PTR [esi],cl
     a98:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     a9b:	19 03                	sbb    DWORD PTR [ebx],eax
     a9d:	0e                   	push   cs
     a9e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aa0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aa2:	27                   	daa    
     aa3:	19 11                	sbb    DWORD PTR [ecx],edx
     aa5:	01 12                	add    DWORD PTR [edx],edx
     aa7:	06                   	push   es
     aa8:	40                   	inc    eax
     aa9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     aaf:	00 00                	add    BYTE PTR [eax],al
     ab1:	0f 05                	syscall 
     ab3:	00 03                	add    BYTE PTR [ebx],al
     ab5:	08 3a                	or     BYTE PTR [edx],bh
     ab7:	0b 3b                	or     edi,DWORD PTR [ebx]
     ab9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     abc:	02 18                	add    bl,BYTE PTR [eax]
     abe:	00 00                	add    BYTE PTR [eax],al
     ac0:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     ac3:	03 0e                	add    ecx,DWORD PTR [esi]
     ac5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ac7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ac9:	49                   	dec    ecx
     aca:	13 02                	adc    eax,DWORD PTR [edx]
     acc:	18 00                	sbb    BYTE PTR [eax],al
     ace:	00 11                	add    BYTE PTR [ecx],dl
     ad0:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ad3:	19 03                	sbb    DWORD PTR [ebx],eax
     ad5:	0e                   	push   cs
     ad6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ad8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ada:	49                   	dec    ecx
     adb:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     ade:	01 13                	add    DWORD PTR [ebx],edx
     ae0:	00 00                	add    BYTE PTR [eax],al
     ae2:	12 18                	adc    bl,BYTE PTR [eax]
     ae4:	00 00                	add    BYTE PTR [eax],al
     ae6:	00 13                	add    BYTE PTR [ebx],dl
     ae8:	0b 01                	or     eax,DWORD PTR [ecx]
     aea:	11 01                	adc    DWORD PTR [ecx],eax
     aec:	12 06                	adc    al,BYTE PTR [esi]
     aee:	01 13                	add    DWORD PTR [ebx],edx
     af0:	00 00                	add    BYTE PTR [eax],al
     af2:	14 34                	adc    al,0x34
     af4:	00 03                	add    BYTE PTR [ebx],al
     af6:	08 3a                	or     BYTE PTR [edx],bh
     af8:	0b 3b                	or     edi,DWORD PTR [ebx]
     afa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     afd:	02 18                	add    bl,BYTE PTR [eax]
     aff:	00 00                	add    BYTE PTR [eax],al
     b01:	15 0b 01 11 01       	adc    eax,0x111010b
     b06:	12 06                	adc    al,BYTE PTR [esi]
     b08:	00 00                	add    BYTE PTR [eax],al
     b0a:	16                   	push   ss
     b0b:	01 01                	add    DWORD PTR [ecx],eax
     b0d:	49                   	dec    ecx
     b0e:	13 01                	adc    eax,DWORD PTR [ecx]
     b10:	13 00                	adc    eax,DWORD PTR [eax]
     b12:	00 17                	add    BYTE PTR [edi],dl
     b14:	21 00                	and    DWORD PTR [eax],eax
     b16:	49                   	dec    ecx
     b17:	13 2f                	adc    ebp,DWORD PTR [edi]
     b19:	0b 00                	or     eax,DWORD PTR [eax]
     b1b:	00 18                	add    BYTE PTR [eax],bl
     b1d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b20:	19 03                	sbb    DWORD PTR [ebx],eax
     b22:	0e                   	push   cs
     b23:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b25:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b27:	11 01                	adc    DWORD PTR [ecx],eax
     b29:	12 06                	adc    al,BYTE PTR [esi]
     b2b:	40                   	inc    eax
     b2c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b32:	00 00                	add    BYTE PTR [eax],al
     b34:	19 2e                	sbb    DWORD PTR [esi],ebp
     b36:	01 3f                	add    DWORD PTR [edi],edi
     b38:	19 03                	sbb    DWORD PTR [ebx],eax
     b3a:	0e                   	push   cs
     b3b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b3d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b3f:	49                   	dec    ecx
     b40:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     b43:	00 00                	add    BYTE PTR [eax],al
     b45:	1a 2e                	sbb    ch,BYTE PTR [esi]
     b47:	00 3f                	add    BYTE PTR [edi],bh
     b49:	19 03                	sbb    DWORD PTR [ebx],eax
     b4b:	0e                   	push   cs
     b4c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b4e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b50:	11 01                	adc    DWORD PTR [ecx],eax
     b52:	12 06                	adc    al,BYTE PTR [esi]
     b54:	40                   	inc    eax
     b55:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     b5b:	1b 34 00             	sbb    esi,DWORD PTR [eax+eax*1]
     b5e:	03 0e                	add    ecx,DWORD PTR [esi]
     b60:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b62:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b64:	49                   	dec    ecx
     b65:	13 3f                	adc    edi,DWORD PTR [edi]
     b67:	19 02                	sbb    DWORD PTR [edx],eax
     b69:	18 00                	sbb    BYTE PTR [eax],al
     b6b:	00 00                	add    BYTE PTR [eax],al
     b6d:	01 11                	add    DWORD PTR [ecx],edx
     b6f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b75:	0e                   	push   cs
     b76:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b78:	11 01                	adc    DWORD PTR [ecx],eax
     b7a:	12 06                	adc    al,BYTE PTR [esi]
     b7c:	10 17                	adc    BYTE PTR [edi],dl
     b7e:	00 00                	add    BYTE PTR [eax],al
     b80:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b83:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b85:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b88:	0e                   	push   cs
     b89:	00 00                	add    BYTE PTR [eax],al
     b8b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b8e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b90:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b93:	08 00                	or     BYTE PTR [eax],al
     b95:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     b98:	00 03                	add    BYTE PTR [ebx],al
     b9a:	0e                   	push   cs
     b9b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b9d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b9f:	49                   	dec    ecx
     ba0:	13 00                	adc    eax,DWORD PTR [eax]
     ba2:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     ba8:	49                   	dec    ecx
     ba9:	13 00                	adc    eax,DWORD PTR [eax]
     bab:	00 06                	add    BYTE PTR [esi],al
     bad:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     bb1:	00 00                	add    BYTE PTR [eax],al
     bb3:	07                   	pop    es
     bb4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bb7:	19 03                	sbb    DWORD PTR [ebx],eax
     bb9:	0e                   	push   cs
     bba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bbc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bbe:	27                   	daa    
     bbf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bc2:	11 01                	adc    DWORD PTR [ecx],eax
     bc4:	12 06                	adc    al,BYTE PTR [esi]
     bc6:	40                   	inc    eax
     bc7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bcd:	00 00                	add    BYTE PTR [eax],al
     bcf:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     bd5:	0b 3b                	or     edi,DWORD PTR [ebx]
     bd7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bda:	02 18                	add    bl,BYTE PTR [eax]
     bdc:	00 00                	add    BYTE PTR [eax],al
     bde:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     be4:	0b 3b                	or     edi,DWORD PTR [ebx]
     be6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     be9:	02 18                	add    bl,BYTE PTR [eax]
     beb:	00 00                	add    BYTE PTR [eax],al
     bed:	0a 2e                	or     ch,BYTE PTR [esi]
     bef:	01 3f                	add    DWORD PTR [edi],edi
     bf1:	19 03                	sbb    DWORD PTR [ebx],eax
     bf3:	0e                   	push   cs
     bf4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bf6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bf8:	27                   	daa    
     bf9:	19 11                	sbb    DWORD PTR [ecx],edx
     bfb:	01 12                	add    DWORD PTR [edx],edx
     bfd:	06                   	push   es
     bfe:	40                   	inc    eax
     bff:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c05:	00 00                	add    BYTE PTR [eax],al
     c07:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     c0a:	03 08                	add    ecx,DWORD PTR [eax]
     c0c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c0e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c10:	49                   	dec    ecx
     c11:	13 02                	adc    eax,DWORD PTR [edx]
     c13:	18 00                	sbb    BYTE PTR [eax],al
     c15:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     c18:	00 03                	add    BYTE PTR [ebx],al
     c1a:	0e                   	push   cs
     c1b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c1d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c1f:	49                   	dec    ecx
     c20:	13 3f                	adc    edi,DWORD PTR [edi]
     c22:	19 02                	sbb    DWORD PTR [edx],eax
     c24:	18 00                	sbb    BYTE PTR [eax],al
     c26:	00 00                	add    BYTE PTR [eax],al
     c28:	01 11                	add    DWORD PTR [ecx],edx
     c2a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c30:	0e                   	push   cs
     c31:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c33:	11 01                	adc    DWORD PTR [ecx],eax
     c35:	12 06                	adc    al,BYTE PTR [esi]
     c37:	10 17                	adc    BYTE PTR [edi],dl
     c39:	00 00                	add    BYTE PTR [eax],al
     c3b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c3e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c40:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c43:	0e                   	push   cs
     c44:	00 00                	add    BYTE PTR [eax],al
     c46:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c49:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c4b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c4e:	08 00                	or     BYTE PTR [eax],al
     c50:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c53:	00 03                	add    BYTE PTR [ebx],al
     c55:	0e                   	push   cs
     c56:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c58:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c5a:	49                   	dec    ecx
     c5b:	13 00                	adc    eax,DWORD PTR [eax]
     c5d:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c63:	49                   	dec    ecx
     c64:	13 00                	adc    eax,DWORD PTR [eax]
     c66:	00 06                	add    BYTE PTR [esi],al
     c68:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     c6c:	00 00                	add    BYTE PTR [eax],al
     c6e:	07                   	pop    es
     c6f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c72:	19 03                	sbb    DWORD PTR [ebx],eax
     c74:	0e                   	push   cs
     c75:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c77:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c79:	27                   	daa    
     c7a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c7d:	11 01                	adc    DWORD PTR [ecx],eax
     c7f:	12 06                	adc    al,BYTE PTR [esi]
     c81:	40                   	inc    eax
     c82:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c88:	00 00                	add    BYTE PTR [eax],al
     c8a:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c90:	0b 3b                	or     edi,DWORD PTR [ebx]
     c92:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c95:	02 18                	add    bl,BYTE PTR [eax]
     c97:	00 00                	add    BYTE PTR [eax],al
     c99:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c9c:	03 08                	add    ecx,DWORD PTR [eax]
     c9e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ca0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ca2:	49                   	dec    ecx
     ca3:	13 02                	adc    eax,DWORD PTR [edx]
     ca5:	18 00                	sbb    BYTE PTR [eax],al
     ca7:	00 0a                	add    BYTE PTR [edx],cl
     ca9:	34 00                	xor    al,0x0
     cab:	03 0e                	add    ecx,DWORD PTR [esi]
     cad:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     caf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cb1:	49                   	dec    ecx
     cb2:	13 3f                	adc    edi,DWORD PTR [edi]
     cb4:	19 02                	sbb    DWORD PTR [edx],eax
     cb6:	18 00                	sbb    BYTE PTR [eax],al
     cb8:	00 00                	add    BYTE PTR [eax],al
     cba:	01 11                	add    DWORD PTR [ecx],edx
     cbc:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     cc2:	0e                   	push   cs
     cc3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     cc5:	11 01                	adc    DWORD PTR [ecx],eax
     cc7:	12 06                	adc    al,BYTE PTR [esi]
     cc9:	10 17                	adc    BYTE PTR [edi],dl
     ccb:	00 00                	add    BYTE PTR [eax],al
     ccd:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     cd0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cd2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cd5:	0e                   	push   cs
     cd6:	00 00                	add    BYTE PTR [eax],al
     cd8:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     cdb:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cdd:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ce0:	08 00                	or     BYTE PTR [eax],al
     ce2:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     ce5:	00 03                	add    BYTE PTR [ebx],al
     ce7:	0e                   	push   cs
     ce8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cec:	49                   	dec    ecx
     ced:	13 00                	adc    eax,DWORD PTR [eax]
     cef:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     cf5:	49                   	dec    ecx
     cf6:	13 00                	adc    eax,DWORD PTR [eax]
     cf8:	00 06                	add    BYTE PTR [esi],al
     cfa:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     cfe:	00 00                	add    BYTE PTR [eax],al
     d00:	07                   	pop    es
     d01:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d04:	19 03                	sbb    DWORD PTR [ebx],eax
     d06:	0e                   	push   cs
     d07:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d09:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d0b:	27                   	daa    
     d0c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d0f:	11 01                	adc    DWORD PTR [ecx],eax
     d11:	12 06                	adc    al,BYTE PTR [esi]
     d13:	40                   	inc    eax
     d14:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d1a:	00 00                	add    BYTE PTR [eax],al
     d1c:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     d22:	0b 3b                	or     edi,DWORD PTR [ebx]
     d24:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d27:	02 18                	add    bl,BYTE PTR [eax]
     d29:	00 00                	add    BYTE PTR [eax],al
     d2b:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     d2e:	03 08                	add    ecx,DWORD PTR [eax]
     d30:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d32:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d34:	49                   	dec    ecx
     d35:	13 02                	adc    eax,DWORD PTR [edx]
     d37:	18 00                	sbb    BYTE PTR [eax],al
     d39:	00 0a                	add    BYTE PTR [edx],cl
     d3b:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     d40:	0b 3b                	or     edi,DWORD PTR [ebx]
     d42:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d45:	02 18                	add    bl,BYTE PTR [eax]
     d47:	00 00                	add    BYTE PTR [eax],al
     d49:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d4c:	03 0e                	add    ecx,DWORD PTR [esi]
     d4e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d50:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d52:	49                   	dec    ecx
     d53:	13 3f                	adc    edi,DWORD PTR [edi]
     d55:	19 02                	sbb    DWORD PTR [edx],eax
     d57:	18 00                	sbb    BYTE PTR [eax],al
     d59:	00 00                	add    BYTE PTR [eax],al
     d5b:	01 11                	add    DWORD PTR [ecx],edx
     d5d:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d63:	0e                   	push   cs
     d64:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d66:	11 01                	adc    DWORD PTR [ecx],eax
     d68:	12 06                	adc    al,BYTE PTR [esi]
     d6a:	10 17                	adc    BYTE PTR [edi],dl
     d6c:	00 00                	add    BYTE PTR [eax],al
     d6e:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d71:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d73:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d76:	0e                   	push   cs
     d77:	00 00                	add    BYTE PTR [eax],al
     d79:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d7c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d7e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d81:	08 00                	or     BYTE PTR [eax],al
     d83:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     d86:	00 03                	add    BYTE PTR [ebx],al
     d88:	0e                   	push   cs
     d89:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d8b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d8d:	49                   	dec    ecx
     d8e:	13 00                	adc    eax,DWORD PTR [eax]
     d90:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     d96:	49                   	dec    ecx
     d97:	13 00                	adc    eax,DWORD PTR [eax]
     d99:	00 06                	add    BYTE PTR [esi],al
     d9b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d9e:	19 03                	sbb    DWORD PTR [ebx],eax
     da0:	0e                   	push   cs
     da1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     da3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     da5:	27                   	daa    
     da6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     da9:	11 01                	adc    DWORD PTR [ecx],eax
     dab:	12 06                	adc    al,BYTE PTR [esi]
     dad:	40                   	inc    eax
     dae:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     db4:	00 00                	add    BYTE PTR [eax],al
     db6:	07                   	pop    es
     db7:	05 00 03 08 3a       	add    eax,0x3a080300
     dbc:	0b 3b                	or     edi,DWORD PTR [ebx]
     dbe:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dc1:	02 18                	add    bl,BYTE PTR [eax]
     dc3:	00 00                	add    BYTE PTR [eax],al
     dc5:	08 2e                	or     BYTE PTR [esi],ch
     dc7:	01 3f                	add    DWORD PTR [edi],edi
     dc9:	19 03                	sbb    DWORD PTR [ebx],eax
     dcb:	0e                   	push   cs
     dcc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dce:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dd0:	27                   	daa    
     dd1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     dd4:	11 01                	adc    DWORD PTR [ecx],eax
     dd6:	12 06                	adc    al,BYTE PTR [esi]
     dd8:	40                   	inc    eax
     dd9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ddf:	00 00                	add    BYTE PTR [eax],al
     de1:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     de4:	03 08                	add    ecx,DWORD PTR [eax]
     de6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     de8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dea:	49                   	dec    ecx
     deb:	13 02                	adc    eax,DWORD PTR [edx]
     ded:	18 00                	sbb    BYTE PTR [eax],al
     def:	00 0a                	add    BYTE PTR [edx],cl
     df1:	34 00                	xor    al,0x0
     df3:	03 0e                	add    ecx,DWORD PTR [esi]
     df5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     df7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     df9:	49                   	dec    ecx
     dfa:	13 3f                	adc    edi,DWORD PTR [edi]
     dfc:	19 02                	sbb    DWORD PTR [edx],eax
     dfe:	18 00                	sbb    BYTE PTR [eax],al
     e00:	00 00                	add    BYTE PTR [eax],al
     e02:	01 11                	add    DWORD PTR [ecx],edx
     e04:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e0a:	0e                   	push   cs
     e0b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e0d:	11 01                	adc    DWORD PTR [ecx],eax
     e0f:	12 06                	adc    al,BYTE PTR [esi]
     e11:	10 17                	adc    BYTE PTR [edi],dl
     e13:	00 00                	add    BYTE PTR [eax],al
     e15:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e18:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e1a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e1d:	08 00                	or     BYTE PTR [eax],al
     e1f:	00 03                	add    BYTE PTR [ebx],al
     e21:	16                   	push   ss
     e22:	00 03                	add    BYTE PTR [ebx],al
     e24:	0e                   	push   cs
     e25:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e27:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e29:	49                   	dec    ecx
     e2a:	13 00                	adc    eax,DWORD PTR [eax]
     e2c:	00 04 24             	add    BYTE PTR [esp],al
     e2f:	00 0b                	add    BYTE PTR [ebx],cl
     e31:	0b 3e                	or     edi,DWORD PTR [esi]
     e33:	0b 03                	or     eax,DWORD PTR [ebx]
     e35:	0e                   	push   cs
     e36:	00 00                	add    BYTE PTR [eax],al
     e38:	05 2e 01 3f 19       	add    eax,0x193f012e
     e3d:	03 0e                	add    ecx,DWORD PTR [esi]
     e3f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e41:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e43:	27                   	daa    
     e44:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e47:	11 01                	adc    DWORD PTR [ecx],eax
     e49:	12 06                	adc    al,BYTE PTR [esi]
     e4b:	40                   	inc    eax
     e4c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e52:	00 00                	add    BYTE PTR [eax],al
     e54:	06                   	push   es
     e55:	05 00 03 08 3a       	add    eax,0x3a080300
     e5a:	0b 3b                	or     edi,DWORD PTR [ebx]
     e5c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e5f:	02 18                	add    bl,BYTE PTR [eax]
     e61:	00 00                	add    BYTE PTR [eax],al
     e63:	07                   	pop    es
     e64:	34 00                	xor    al,0x0
     e66:	03 08                	add    ecx,DWORD PTR [eax]
     e68:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e6a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e6c:	49                   	dec    ecx
     e6d:	13 02                	adc    eax,DWORD PTR [edx]
     e6f:	18 00                	sbb    BYTE PTR [eax],al
     e71:	00 08                	add    BYTE PTR [eax],cl
     e73:	0f 00 0b             	str    WORD PTR [ebx]
     e76:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e79:	00 00                	add    BYTE PTR [eax],al
     e7b:	09 26                	or     DWORD PTR [esi],esp
     e7d:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     e80:	00 00                	add    BYTE PTR [eax],al
     e82:	0a 2e                	or     ch,BYTE PTR [esi]
     e84:	01 3f                	add    DWORD PTR [edi],edi
     e86:	19 03                	sbb    DWORD PTR [ebx],eax
     e88:	0e                   	push   cs
     e89:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e8b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e8d:	27                   	daa    
     e8e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e91:	11 01                	adc    DWORD PTR [ecx],eax
     e93:	12 06                	adc    al,BYTE PTR [esi]
     e95:	40                   	inc    eax
     e96:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     e9c:	00 01                	add    BYTE PTR [ecx],al
     e9e:	11 01                	adc    DWORD PTR [ecx],eax
     ea0:	25 0e 13 0b 03       	and    eax,0x30b130e
     ea5:	0e                   	push   cs
     ea6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ea8:	11 01                	adc    DWORD PTR [ecx],eax
     eaa:	12 06                	adc    al,BYTE PTR [esi]
     eac:	10 17                	adc    BYTE PTR [edi],dl
     eae:	00 00                	add    BYTE PTR [eax],al
     eb0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     eb3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     eb5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     eb8:	08 00                	or     BYTE PTR [eax],al
     eba:	00 03                	add    BYTE PTR [ebx],al
     ebc:	16                   	push   ss
     ebd:	00 03                	add    BYTE PTR [ebx],al
     ebf:	0e                   	push   cs
     ec0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ec4:	49                   	dec    ecx
     ec5:	13 00                	adc    eax,DWORD PTR [eax]
     ec7:	00 04 24             	add    BYTE PTR [esp],al
     eca:	00 0b                	add    BYTE PTR [ebx],cl
     ecc:	0b 3e                	or     edi,DWORD PTR [esi]
     ece:	0b 03                	or     eax,DWORD PTR [ebx]
     ed0:	0e                   	push   cs
     ed1:	00 00                	add    BYTE PTR [eax],al
     ed3:	05 2e 01 3f 19       	add    eax,0x193f012e
     ed8:	03 0e                	add    ecx,DWORD PTR [esi]
     eda:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     edc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ede:	27                   	daa    
     edf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ee2:	11 01                	adc    DWORD PTR [ecx],eax
     ee4:	12 06                	adc    al,BYTE PTR [esi]
     ee6:	40                   	inc    eax
     ee7:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     eed:	00 00                	add    BYTE PTR [eax],al
     eef:	06                   	push   es
     ef0:	05 00 03 08 3a       	add    eax,0x3a080300
     ef5:	0b 3b                	or     edi,DWORD PTR [ebx]
     ef7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     efa:	02 18                	add    bl,BYTE PTR [eax]
     efc:	00 00                	add    BYTE PTR [eax],al
     efe:	07                   	pop    es
     eff:	0f 00 0b             	str    WORD PTR [ebx]
     f02:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f05:	00 00                	add    BYTE PTR [eax],al
     f07:	08 26                	or     BYTE PTR [esi],ah
     f09:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     f0c:	00 00                	add    BYTE PTR [eax],al
     f0e:	09 2e                	or     DWORD PTR [esi],ebp
     f10:	01 3f                	add    DWORD PTR [edi],edi
     f12:	19 03                	sbb    DWORD PTR [ebx],eax
     f14:	0e                   	push   cs
     f15:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f17:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f19:	27                   	daa    
     f1a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f1d:	11 01                	adc    DWORD PTR [ecx],eax
     f1f:	12 06                	adc    al,BYTE PTR [esi]
     f21:	40                   	inc    eax
     f22:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     f28:	00 01                	add    BYTE PTR [ecx],al
     f2a:	11 01                	adc    DWORD PTR [ecx],eax
     f2c:	25 0e 13 0b 03       	and    eax,0x30b130e
     f31:	0e                   	push   cs
     f32:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f34:	11 01                	adc    DWORD PTR [ecx],eax
     f36:	12 06                	adc    al,BYTE PTR [esi]
     f38:	10 17                	adc    BYTE PTR [edi],dl
     f3a:	00 00                	add    BYTE PTR [eax],al
     f3c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f3f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f41:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f44:	08 00                	or     BYTE PTR [eax],al
     f46:	00 03                	add    BYTE PTR [ebx],al
     f48:	16                   	push   ss
     f49:	00 03                	add    BYTE PTR [ebx],al
     f4b:	0e                   	push   cs
     f4c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f4e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f50:	49                   	dec    ecx
     f51:	13 00                	adc    eax,DWORD PTR [eax]
     f53:	00 04 24             	add    BYTE PTR [esp],al
     f56:	00 0b                	add    BYTE PTR [ebx],cl
     f58:	0b 3e                	or     edi,DWORD PTR [esi]
     f5a:	0b 03                	or     eax,DWORD PTR [ebx]
     f5c:	0e                   	push   cs
     f5d:	00 00                	add    BYTE PTR [eax],al
     f5f:	05 2e 01 3f 19       	add    eax,0x193f012e
     f64:	03 0e                	add    ecx,DWORD PTR [esi]
     f66:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f68:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f6a:	27                   	daa    
     f6b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f6e:	11 01                	adc    DWORD PTR [ecx],eax
     f70:	12 06                	adc    al,BYTE PTR [esi]
     f72:	40                   	inc    eax
     f73:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f79:	00 00                	add    BYTE PTR [eax],al
     f7b:	06                   	push   es
     f7c:	05 00 03 08 3a       	add    eax,0x3a080300
     f81:	0b 3b                	or     edi,DWORD PTR [ebx]
     f83:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f86:	02 18                	add    bl,BYTE PTR [eax]
     f88:	00 00                	add    BYTE PTR [eax],al
     f8a:	07                   	pop    es
     f8b:	34 00                	xor    al,0x0
     f8d:	03 08                	add    ecx,DWORD PTR [eax]
     f8f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f91:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f93:	49                   	dec    ecx
     f94:	13 02                	adc    eax,DWORD PTR [edx]
     f96:	18 00                	sbb    BYTE PTR [eax],al
     f98:	00 08                	add    BYTE PTR [eax],cl
     f9a:	0f 00 0b             	str    WORD PTR [ebx]
     f9d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fa0:	00 00                	add    BYTE PTR [eax],al
     fa2:	09 26                	or     DWORD PTR [esi],esp
     fa4:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     fa7:	00 00                	add    BYTE PTR [eax],al
     fa9:	0a 2e                	or     ch,BYTE PTR [esi]
     fab:	01 3f                	add    DWORD PTR [edi],edi
     fad:	19 03                	sbb    DWORD PTR [ebx],eax
     faf:	0e                   	push   cs
     fb0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fb4:	27                   	daa    
     fb5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fb8:	11 01                	adc    DWORD PTR [ecx],eax
     fba:	12 06                	adc    al,BYTE PTR [esi]
     fbc:	40                   	inc    eax
     fbd:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     fc3:	00 01                	add    BYTE PTR [ecx],al
     fc5:	11 01                	adc    DWORD PTR [ecx],eax
     fc7:	25 0e 13 0b 03       	and    eax,0x30b130e
     fcc:	0e                   	push   cs
     fcd:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fcf:	11 01                	adc    DWORD PTR [ecx],eax
     fd1:	12 06                	adc    al,BYTE PTR [esi]
     fd3:	10 17                	adc    BYTE PTR [edi],dl
     fd5:	00 00                	add    BYTE PTR [eax],al
     fd7:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     fda:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fdc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fdf:	0e                   	push   cs
     fe0:	00 00                	add    BYTE PTR [eax],al
     fe2:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     fe5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fe7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fea:	08 00                	or     BYTE PTR [eax],al
     fec:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     fef:	00 03                	add    BYTE PTR [ebx],al
     ff1:	0e                   	push   cs
     ff2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff6:	49                   	dec    ecx
     ff7:	13 00                	adc    eax,DWORD PTR [eax]
     ff9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     fff:	49                   	dec    ecx
    1000:	13 00                	adc    eax,DWORD PTR [eax]
    1002:	00 06                	add    BYTE PTR [esi],al
    1004:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1008:	00 00                	add    BYTE PTR [eax],al
    100a:	07                   	pop    es
    100b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    100e:	19 03                	sbb    DWORD PTR [ebx],eax
    1010:	0e                   	push   cs
    1011:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1013:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1015:	27                   	daa    
    1016:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1019:	11 01                	adc    DWORD PTR [ecx],eax
    101b:	12 06                	adc    al,BYTE PTR [esi]
    101d:	40                   	inc    eax
    101e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1024:	00 00                	add    BYTE PTR [eax],al
    1026:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    102c:	0b 3b                	or     edi,DWORD PTR [ebx]
    102e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1031:	02 18                	add    bl,BYTE PTR [eax]
    1033:	00 00                	add    BYTE PTR [eax],al
    1035:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1038:	03 08                	add    ecx,DWORD PTR [eax]
    103a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    103c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    103e:	49                   	dec    ecx
    103f:	13 02                	adc    eax,DWORD PTR [edx]
    1041:	18 00                	sbb    BYTE PTR [eax],al
    1043:	00 0a                	add    BYTE PTR [edx],cl
    1045:	34 00                	xor    al,0x0
    1047:	03 0e                	add    ecx,DWORD PTR [esi]
    1049:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    104b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    104d:	49                   	dec    ecx
    104e:	13 00                	adc    eax,DWORD PTR [eax]
    1050:	00 0b                	add    BYTE PTR [ebx],cl
    1052:	34 00                	xor    al,0x0
    1054:	03 08                	add    ecx,DWORD PTR [eax]
    1056:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1058:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    105a:	49                   	dec    ecx
    105b:	13 00                	adc    eax,DWORD PTR [eax]
    105d:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1060:	00 03                	add    BYTE PTR [ebx],al
    1062:	0e                   	push   cs
    1063:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1065:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1067:	49                   	dec    ecx
    1068:	13 02                	adc    eax,DWORD PTR [edx]
    106a:	18 00                	sbb    BYTE PTR [eax],al
    106c:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1072:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1074:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1076:	49                   	dec    ecx
    1077:	13 3f                	adc    edi,DWORD PTR [edi]
    1079:	19 02                	sbb    DWORD PTR [edx],eax
    107b:	18 00                	sbb    BYTE PTR [eax],al
    107d:	00 00                	add    BYTE PTR [eax],al
    107f:	01 11                	add    DWORD PTR [ecx],edx
    1081:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1087:	0e                   	push   cs
    1088:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    108a:	11 01                	adc    DWORD PTR [ecx],eax
    108c:	12 06                	adc    al,BYTE PTR [esi]
    108e:	10 17                	adc    BYTE PTR [edi],dl
    1090:	00 00                	add    BYTE PTR [eax],al
    1092:	02 2e                	add    ch,BYTE PTR [esi]
    1094:	01 3f                	add    DWORD PTR [edi],edi
    1096:	19 03                	sbb    DWORD PTR [ebx],eax
    1098:	0e                   	push   cs
    1099:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    109b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    109d:	27                   	daa    
    109e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10a1:	11 01                	adc    DWORD PTR [ecx],eax
    10a3:	12 06                	adc    al,BYTE PTR [esi]
    10a5:	40                   	inc    eax
    10a6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10ac:	00 00                	add    BYTE PTR [eax],al
    10ae:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    10b4:	0b 3b                	or     edi,DWORD PTR [ebx]
    10b6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10b9:	02 18                	add    bl,BYTE PTR [eax]
    10bb:	00 00                	add    BYTE PTR [eax],al
    10bd:	04 0f                	add    al,0xf
    10bf:	00 0b                	add    BYTE PTR [ebx],cl
    10c1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10c4:	00 00                	add    BYTE PTR [eax],al
    10c6:	05 24 00 0b 0b       	add    eax,0xb0b0024
    10cb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10ce:	0e                   	push   cs
    10cf:	00 00                	add    BYTE PTR [eax],al
    10d1:	06                   	push   es
    10d2:	24 00                	and    al,0x0
    10d4:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10d6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10d9:	08 00                	or     BYTE PTR [eax],al
    10db:	00 00                	add    BYTE PTR [eax],al
    10dd:	01 11                	add    DWORD PTR [ecx],edx
    10df:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10e5:	0e                   	push   cs
    10e6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10e8:	11 01                	adc    DWORD PTR [ecx],eax
    10ea:	12 06                	adc    al,BYTE PTR [esi]
    10ec:	10 17                	adc    BYTE PTR [edi],dl
    10ee:	00 00                	add    BYTE PTR [eax],al
    10f0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10f3:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10f5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10f8:	0e                   	push   cs
    10f9:	00 00                	add    BYTE PTR [eax],al
    10fb:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    10fe:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1100:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1103:	08 00                	or     BYTE PTR [eax],al
    1105:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1108:	00 03                	add    BYTE PTR [ebx],al
    110a:	0e                   	push   cs
    110b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    110d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    110f:	49                   	dec    ecx
    1110:	13 00                	adc    eax,DWORD PTR [eax]
    1112:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1118:	49                   	dec    ecx
    1119:	13 00                	adc    eax,DWORD PTR [eax]
    111b:	00 06                	add    BYTE PTR [esi],al
    111d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1121:	00 00                	add    BYTE PTR [eax],al
    1123:	07                   	pop    es
    1124:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1127:	19 03                	sbb    DWORD PTR [ebx],eax
    1129:	0e                   	push   cs
    112a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    112c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    112e:	27                   	daa    
    112f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1132:	11 01                	adc    DWORD PTR [ecx],eax
    1134:	12 06                	adc    al,BYTE PTR [esi]
    1136:	40                   	inc    eax
    1137:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    113d:	00 00                	add    BYTE PTR [eax],al
    113f:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1145:	0b 3b                	or     edi,DWORD PTR [ebx]
    1147:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    114a:	02 18                	add    bl,BYTE PTR [eax]
    114c:	00 00                	add    BYTE PTR [eax],al
    114e:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1151:	03 08                	add    ecx,DWORD PTR [eax]
    1153:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1155:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1157:	49                   	dec    ecx
    1158:	13 02                	adc    eax,DWORD PTR [edx]
    115a:	18 00                	sbb    BYTE PTR [eax],al
    115c:	00 0a                	add    BYTE PTR [edx],cl
    115e:	34 00                	xor    al,0x0
    1160:	03 0e                	add    ecx,DWORD PTR [esi]
    1162:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1164:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1166:	49                   	dec    ecx
    1167:	13 00                	adc    eax,DWORD PTR [eax]
    1169:	00 0b                	add    BYTE PTR [ebx],cl
    116b:	34 00                	xor    al,0x0
    116d:	03 08                	add    ecx,DWORD PTR [eax]
    116f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1171:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1173:	49                   	dec    ecx
    1174:	13 00                	adc    eax,DWORD PTR [eax]
    1176:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1179:	00 03                	add    BYTE PTR [ebx],al
    117b:	0e                   	push   cs
    117c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    117e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1180:	49                   	dec    ecx
    1181:	13 3f                	adc    edi,DWORD PTR [edi]
    1183:	19 02                	sbb    DWORD PTR [edx],eax
    1185:	18 00                	sbb    BYTE PTR [eax],al
    1187:	00 00                	add    BYTE PTR [eax],al
    1189:	01 11                	add    DWORD PTR [ecx],edx
    118b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1191:	0e                   	push   cs
    1192:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1194:	11 01                	adc    DWORD PTR [ecx],eax
    1196:	12 06                	adc    al,BYTE PTR [esi]
    1198:	10 17                	adc    BYTE PTR [edi],dl
    119a:	00 00                	add    BYTE PTR [eax],al
    119c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    119f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11a1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11a4:	0e                   	push   cs
    11a5:	00 00                	add    BYTE PTR [eax],al
    11a7:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    11aa:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11ac:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11af:	08 00                	or     BYTE PTR [eax],al
    11b1:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    11b4:	00 03                	add    BYTE PTR [ebx],al
    11b6:	0e                   	push   cs
    11b7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11b9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11bb:	49                   	dec    ecx
    11bc:	13 00                	adc    eax,DWORD PTR [eax]
    11be:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    11c4:	49                   	dec    ecx
    11c5:	13 00                	adc    eax,DWORD PTR [eax]
    11c7:	00 06                	add    BYTE PTR [esi],al
    11c9:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    11cc:	19 03                	sbb    DWORD PTR [ebx],eax
    11ce:	0e                   	push   cs
    11cf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11d1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11d3:	27                   	daa    
    11d4:	19 11                	sbb    DWORD PTR [ecx],edx
    11d6:	01 12                	add    DWORD PTR [edx],edx
    11d8:	06                   	push   es
    11d9:	40                   	inc    eax
    11da:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    11e0:	00 00                	add    BYTE PTR [eax],al
    11e2:	07                   	pop    es
    11e3:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    11e8:	0b 3b                	or     edi,DWORD PTR [ebx]
    11ea:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11ed:	02 18                	add    bl,BYTE PTR [eax]
    11ef:	00 00                	add    BYTE PTR [eax],al
    11f1:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    11f4:	03 08                	add    ecx,DWORD PTR [eax]
    11f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11fa:	49                   	dec    ecx
    11fb:	13 02                	adc    eax,DWORD PTR [edx]
    11fd:	18 00                	sbb    BYTE PTR [eax],al
    11ff:	00 09                	add    BYTE PTR [ecx],cl
    1201:	34 00                	xor    al,0x0
    1203:	03 0e                	add    ecx,DWORD PTR [esi]
    1205:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1207:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1209:	49                   	dec    ecx
    120a:	13 3f                	adc    edi,DWORD PTR [edi]
    120c:	19 02                	sbb    DWORD PTR [edx],eax
    120e:	18 00                	sbb    BYTE PTR [eax],al
    1210:	00 00                	add    BYTE PTR [eax],al
    1212:	01 11                	add    DWORD PTR [ecx],edx
    1214:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    121a:	0e                   	push   cs
    121b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    121d:	11 01                	adc    DWORD PTR [ecx],eax
    121f:	12 06                	adc    al,BYTE PTR [esi]
    1221:	10 17                	adc    BYTE PTR [edi],dl
    1223:	00 00                	add    BYTE PTR [eax],al
    1225:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1228:	0b 0b                	or     ecx,DWORD PTR [ebx]
    122a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    122d:	0e                   	push   cs
    122e:	00 00                	add    BYTE PTR [eax],al
    1230:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1233:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1235:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1238:	08 00                	or     BYTE PTR [eax],al
    123a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    123d:	00 03                	add    BYTE PTR [ebx],al
    123f:	0e                   	push   cs
    1240:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1242:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1244:	49                   	dec    ecx
    1245:	13 00                	adc    eax,DWORD PTR [eax]
    1247:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    124d:	49                   	dec    ecx
    124e:	13 00                	adc    eax,DWORD PTR [eax]
    1250:	00 06                	add    BYTE PTR [esi],al
    1252:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1255:	19 03                	sbb    DWORD PTR [ebx],eax
    1257:	0e                   	push   cs
    1258:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    125a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    125c:	27                   	daa    
    125d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1260:	11 01                	adc    DWORD PTR [ecx],eax
    1262:	12 06                	adc    al,BYTE PTR [esi]
    1264:	40                   	inc    eax
    1265:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    126b:	00 00                	add    BYTE PTR [eax],al
    126d:	07                   	pop    es
    126e:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1273:	0b 3b                	or     edi,DWORD PTR [ebx]
    1275:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1278:	02 18                	add    bl,BYTE PTR [eax]
    127a:	00 00                	add    BYTE PTR [eax],al
    127c:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    127f:	03 08                	add    ecx,DWORD PTR [eax]
    1281:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1283:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1285:	49                   	dec    ecx
    1286:	13 02                	adc    eax,DWORD PTR [edx]
    1288:	18 00                	sbb    BYTE PTR [eax],al
    128a:	00 09                	add    BYTE PTR [ecx],cl
    128c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    128f:	19 03                	sbb    DWORD PTR [ebx],eax
    1291:	0e                   	push   cs
    1292:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1294:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1296:	27                   	daa    
    1297:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    129a:	11 01                	adc    DWORD PTR [ecx],eax
    129c:	12 06                	adc    al,BYTE PTR [esi]
    129e:	40                   	inc    eax
    129f:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12a5:	00 00                	add    BYTE PTR [eax],al
    12a7:	0a 01                	or     al,BYTE PTR [ecx]
    12a9:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    12ac:	01 13                	add    DWORD PTR [ebx],edx
    12ae:	00 00                	add    BYTE PTR [eax],al
    12b0:	0b 21                	or     esp,DWORD PTR [ecx]
    12b2:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12b5:	2f                   	das    
    12b6:	0b 00                	or     eax,DWORD PTR [eax]
    12b8:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    12bb:	00 03                	add    BYTE PTR [ebx],al
    12bd:	0e                   	push   cs
    12be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12c2:	49                   	dec    ecx
    12c3:	13 02                	adc    eax,DWORD PTR [edx]
    12c5:	18 00                	sbb    BYTE PTR [eax],al
    12c7:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    12cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12d1:	49                   	dec    ecx
    12d2:	13 3f                	adc    edi,DWORD PTR [edi]
    12d4:	19 02                	sbb    DWORD PTR [edx],eax
    12d6:	18 00                	sbb    BYTE PTR [eax],al
    12d8:	00 00                	add    BYTE PTR [eax],al
    12da:	01 11                	add    DWORD PTR [ecx],edx
    12dc:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    12e2:	0e                   	push   cs
    12e3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12e5:	11 01                	adc    DWORD PTR [ecx],eax
    12e7:	12 06                	adc    al,BYTE PTR [esi]
    12e9:	10 17                	adc    BYTE PTR [edi],dl
    12eb:	00 00                	add    BYTE PTR [eax],al
    12ed:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12f0:	03 0e                	add    ecx,DWORD PTR [esi]
    12f2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12f4:	49                   	dec    ecx
    12f5:	13 3a                	adc    edi,DWORD PTR [edx]
    12f7:	0b 3b                	or     edi,DWORD PTR [ebx]
    12f9:	0b 01                	or     eax,DWORD PTR [ecx]
    12fb:	13 00                	adc    eax,DWORD PTR [eax]
    12fd:	00 03                	add    BYTE PTR [ebx],al
    12ff:	28 00                	sub    BYTE PTR [eax],al
    1301:	03 0e                	add    ecx,DWORD PTR [esi]
    1303:	1c 0b                	sbb    al,0xb
    1305:	00 00                	add    BYTE PTR [eax],al
    1307:	04 28                	add    al,0x28
    1309:	00 03                	add    BYTE PTR [ebx],al
    130b:	0e                   	push   cs
    130c:	1c 05                	sbb    al,0x5
    130e:	00 00                	add    BYTE PTR [eax],al
    1310:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1315:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1318:	0e                   	push   cs
    1319:	00 00                	add    BYTE PTR [eax],al
    131b:	06                   	push   es
    131c:	24 00                	and    al,0x0
    131e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1320:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1323:	08 00                	or     BYTE PTR [eax],al
    1325:	00 07                	add    BYTE PTR [edi],al
    1327:	16                   	push   ss
    1328:	00 03                	add    BYTE PTR [ebx],al
    132a:	0e                   	push   cs
    132b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    132d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    132f:	49                   	dec    ecx
    1330:	13 00                	adc    eax,DWORD PTR [eax]
    1332:	00 08                	add    BYTE PTR [eax],cl
    1334:	13 01                	adc    eax,DWORD PTR [ecx]
    1336:	03 08                	add    ecx,DWORD PTR [eax]
    1338:	0b 0b                	or     ecx,DWORD PTR [ebx]
    133a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    133c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    133e:	01 13                	add    DWORD PTR [ebx],edx
    1340:	00 00                	add    BYTE PTR [eax],al
    1342:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    1348:	0b 3b                	or     edi,DWORD PTR [ebx]
    134a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    134d:	38 0b                	cmp    BYTE PTR [ebx],cl
    134f:	00 00                	add    BYTE PTR [eax],al
    1351:	0a 0f                	or     cl,BYTE PTR [edi]
    1353:	00 0b                	add    BYTE PTR [ebx],cl
    1355:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1358:	00 00                	add    BYTE PTR [eax],al
    135a:	0b 26                	or     esp,DWORD PTR [esi]
    135c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    135f:	00 00                	add    BYTE PTR [eax],al
    1361:	0c 2e                	or     al,0x2e
    1363:	01 3f                	add    DWORD PTR [edi],edi
    1365:	19 03                	sbb    DWORD PTR [ebx],eax
    1367:	0e                   	push   cs
    1368:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    136a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    136c:	49                   	dec    ecx
    136d:	13 11                	adc    edx,DWORD PTR [ecx]
    136f:	01 12                	add    DWORD PTR [edx],edx
    1371:	06                   	push   es
    1372:	40                   	inc    eax
    1373:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1379:	00 00                	add    BYTE PTR [eax],al
    137b:	0d 34 00 03 0e       	or     eax,0xe030034
    1380:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1382:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1384:	49                   	dec    ecx
    1385:	13 02                	adc    eax,DWORD PTR [edx]
    1387:	18 00                	sbb    BYTE PTR [eax],al
    1389:	00 0e                	add    BYTE PTR [esi],cl
    138b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    138e:	19 03                	sbb    DWORD PTR [ebx],eax
    1390:	0e                   	push   cs
    1391:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1393:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1395:	27                   	daa    
    1396:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1399:	11 01                	adc    DWORD PTR [ecx],eax
    139b:	12 06                	adc    al,BYTE PTR [esi]
    139d:	40                   	inc    eax
    139e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13a4:	00 00                	add    BYTE PTR [eax],al
    13a6:	0f 05                	syscall 
    13a8:	00 03                	add    BYTE PTR [ebx],al
    13aa:	0e                   	push   cs
    13ab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13ad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13af:	49                   	dec    ecx
    13b0:	13 02                	adc    eax,DWORD PTR [edx]
    13b2:	18 00                	sbb    BYTE PTR [eax],al
    13b4:	00 10                	add    BYTE PTR [eax],dl
    13b6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13b9:	19 03                	sbb    DWORD PTR [ebx],eax
    13bb:	0e                   	push   cs
    13bc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13be:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13c0:	27                   	daa    
    13c1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13c4:	11 01                	adc    DWORD PTR [ecx],eax
    13c6:	12 06                	adc    al,BYTE PTR [esi]
    13c8:	40                   	inc    eax
    13c9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    13cf:	00 00                	add    BYTE PTR [eax],al
    13d1:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    13d4:	03 08                	add    ecx,DWORD PTR [eax]
    13d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13da:	49                   	dec    ecx
    13db:	13 02                	adc    eax,DWORD PTR [edx]
    13dd:	18 00                	sbb    BYTE PTR [eax],al
    13df:	00 12                	add    BYTE PTR [edx],dl
    13e1:	34 00                	xor    al,0x0
    13e3:	03 0e                	add    ecx,DWORD PTR [esi]
    13e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13e9:	49                   	dec    ecx
    13ea:	13 3f                	adc    edi,DWORD PTR [edi]
    13ec:	19 02                	sbb    DWORD PTR [edx],eax
    13ee:	18 00                	sbb    BYTE PTR [eax],al
    13f0:	00 13                	add    BYTE PTR [ebx],dl
    13f2:	01 01                	add    DWORD PTR [ecx],eax
    13f4:	49                   	dec    ecx
    13f5:	13 01                	adc    eax,DWORD PTR [ecx]
    13f7:	13 00                	adc    eax,DWORD PTR [eax]
    13f9:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    13fc:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    13ff:	2f                   	das    
    1400:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 30                	add    BYTE PTR [eax],dh
  14:	70 00                	jo     16 <sysEnter_Vector-0x12ffea>
	...
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	6e                   	outs   dx,BYTE PTR ds:[esi]
  27:	01 00                	add    DWORD PTR [eax],eax
  29:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 30                	add    BYTE PTR [eax],dh
  34:	aa                   	stos   BYTE PTR es:[edi],al
	...
  3d:	00 00                	add    BYTE PTR [eax],al
  3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	1b 03                	sbb    eax,DWORD PTR [ebx]
  48:	00 00                	add    BYTE PTR [eax],al
  4a:	04 00                	add    al,0x0
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 30                	add    BYTE PTR [eax],dh
  54:	97                   	xchg   edi,eax
	...
  5d:	00 00                	add    BYTE PTR [eax],al
  5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
  6a:	04 00                	add    al,0x0
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 30                	add    BYTE PTR [eax],dh
  74:	49                   	dec    ecx
  75:	02 00                	add    al,BYTE PTR [eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	8c 06                	mov    WORD PTR [esi],es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
	...
  9e:	00 00                	add    BYTE PTR [eax],al
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	4d                   	dec    ebp
  a7:	08 00                	or     BYTE PTR [eax],al
  a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	6c                   	ins    BYTE PTR es:[edi],dx
  b1:	06                   	push   es
  b2:	00 30                	add    BYTE PTR [eax],dh
  b4:	bd 00 00 00 00       	mov    ebp,0x0
  b9:	00 00                	add    BYTE PTR [eax],al
  bb:	00 00                	add    BYTE PTR [eax],al
  bd:	00 00                	add    BYTE PTR [eax],al
  bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	f1                   	icebp  
  c7:	0a 00                	or     al,BYTE PTR [eax]
  c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	2c 07                	sub    al,0x7
  d2:	00 30                	add    BYTE PTR [eax],dh
  d4:	52                   	push   edx
  d5:	01 00                	add    DWORD PTR [eax],eax
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	9b                   	fwait
  e7:	0d 00 00 04 00       	or     eax,0x40000
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	80 08 00             	or     BYTE PTR [eax],0x0
  f3:	30 c7                	xor    bh,al
  f5:	03 00                	add    eax,DWORD PTR [eax]
	...
  ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	13 14 00             	adc    edx,DWORD PTR [eax+eax*1]
 109:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	48                   	dec    eax
 111:	0c 00                	or     al,0x0
 113:	30 46 03             	xor    BYTE PTR [esi+0x3],al
	...
 11e:	00 00                	add    BYTE PTR [eax],al
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	56                   	push   esi
 127:	17                   	pop    ss
 128:	00 00                	add    BYTE PTR [eax],al
 12a:	04 00                	add    al,0x0
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	90                   	nop
 131:	0f 00                	(bad)  
 133:	30 9b 01 00 00 00    	xor    BYTE PTR [ebx+0x1],bl
 139:	00 00                	add    BYTE PTR [eax],al
 13b:	00 00                	add    BYTE PTR [eax],al
 13d:	00 00                	add    BYTE PTR [eax],al
 13f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	4f                   	dec    edi
 147:	19 00                	sbb    DWORD PTR [eax],eax
 149:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	2c 11                	sub    al,0x11
 152:	00 30                	add    BYTE PTR [eax],dh
 154:	8e 01                	mov    es,WORD PTR [ecx]
	...
 15e:	00 00                	add    BYTE PTR [eax],al
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	89 1b                	mov    DWORD PTR [ebx],ebx
 168:	00 00                	add    BYTE PTR [eax],al
 16a:	04 00                	add    al,0x0
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	bc 12 00 30 10       	mov    esp,0x10300012
	...
 17d:	00 00                	add    BYTE PTR [eax],al
 17f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	0d 1d 00 00 04       	or     eax,0x400001d
 18b:	00 00                	add    BYTE PTR [eax],al
 18d:	00 00                	add    BYTE PTR [eax],al
 18f:	00 cc                	add    ah,cl
 191:	12 00                	adc    al,BYTE PTR [eax]
 193:	30 60 02             	xor    BYTE PTR [eax+0x2],ah
	...
 19e:	00 00                	add    BYTE PTR [eax],al
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	21 23                	and    DWORD PTR [ebx],esp
 1a8:	00 00                	add    BYTE PTR [eax],al
 1aa:	04 00                	add    al,0x0
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	2c 15                	sub    al,0x15
 1b2:	00 30                	add    BYTE PTR [eax],dh
 1b4:	eb 00                	jmp    1b6 <sysEnter_Vector-0x12fe4a>
	...
 1be:	00 00                	add    BYTE PTR [eax],al
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	dd 24 00             	frstor [eax+eax*1]
 1c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	18 16                	sbb    BYTE PTR [esi],dl
 1d2:	00 30                	add    BYTE PTR [eax],dh
 1d4:	5e                   	pop    esi
	...
 1dd:	00 00                	add    BYTE PTR [eax],al
 1df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	58                   	pop    eax
 1e7:	26 00 00             	add    BYTE PTR es:[eax],al
 1ea:	04 00                	add    al,0x0
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	78 16                	js     208 <sysEnter_Vector-0x12fdf8>
 1f2:	00 30                	add    BYTE PTR [eax],dh
 1f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 1fa:	00 00                	add    BYTE PTR [eax],al
 1fc:	00 00                	add    BYTE PTR [eax],al
 1fe:	00 00                	add    BYTE PTR [eax],al
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	30 28                	xor    BYTE PTR [eax],ch
 208:	00 00                	add    BYTE PTR [eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	40                   	inc    eax
 211:	17                   	pop    ss
 212:	00 30                	add    BYTE PTR [eax],dh
 214:	89 00                	mov    DWORD PTR [eax],eax
	...
 21e:	00 00                	add    BYTE PTR [eax],al
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	8b 29                	mov    ebp,DWORD PTR [ecx]
 228:	00 00                	add    BYTE PTR [eax],al
 22a:	04 00                	add    al,0x0
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	cc                   	int3   
 231:	17                   	pop    ss
 232:	00 30                	add    BYTE PTR [eax],dh
 234:	62 00                	bound  eax,QWORD PTR [eax]
	...
 23e:	00 00                	add    BYTE PTR [eax],al
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	59                   	pop    ecx
 247:	2a 00                	sub    al,BYTE PTR [eax]
 249:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	30 18                	xor    BYTE PTR [eax],bl
 252:	00 30                	add    BYTE PTR [eax],dh
 254:	ce                   	into   
	...
 25d:	00 00                	add    BYTE PTR [eax],al
 25f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	3b 2b                	cmp    ebp,DWORD PTR [ebx]
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	00 19                	add    BYTE PTR [ecx],bl
 272:	00 30                	add    BYTE PTR [eax],dh
 274:	80 00 00             	add    BYTE PTR [eax],0x0
	...
 27f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	2f                   	das    
 287:	2c 00                	sub    al,0x0
 289:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	80 19 00             	sbb    BYTE PTR [ecx],0x0
 293:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
	...
 29e:	00 00                	add    BYTE PTR [eax],al
 2a0:	1c 00                	sbb    al,0x0
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	d0 2d 00 00 04 00    	shr    BYTE PTR ds:0x40000,1
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	00 1b                	add    BYTE PTR [ebx],bl
 2b2:	00 30                	add    BYTE PTR [eax],dh
 2b4:	1d 00 00 00 00       	sbb    eax,0x0
 2b9:	00 00                	add    BYTE PTR [eax],al
 2bb:	00 00                	add    BYTE PTR [eax],al
 2bd:	00 00                	add    BYTE PTR [eax],al
 2bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	40                   	inc    eax
 2c7:	2e 00 00             	add    BYTE PTR cs:[eax],al
 2ca:	04 00                	add    al,0x0
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	20 1b                	and    BYTE PTR [ebx],bl
 2d2:	00 30                	add    BYTE PTR [eax],dh
 2d4:	9c                   	pushf  
 2d5:	01 00                	add    DWORD PTR [eax],eax
	...
 2df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	df 2f                	fild   QWORD PTR [edi]
 2e8:	00 00                	add    BYTE PTR [eax],al
 2ea:	04 00                	add    al,0x0
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	bc 1c 00 30 96       	mov    esp,0x9630001c
	...
 2fd:	00 00                	add    BYTE PTR [eax],al
 2ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	2c 31                	sub    al,0x31
 308:	00 00                	add    BYTE PTR [eax],al
 30a:	04 00                	add    al,0x0
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	54                   	push   esp
 311:	1d 00 30 8b 00       	sbb    eax,0x8b3000
	...
 31e:	00 00                	add    BYTE PTR [eax],al
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	ce                   	into   
 327:	32 00                	xor    al,BYTE PTR [eax]
 329:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	e0 1d                	loopne 34f <sysEnter_Vector-0x12fcb1>
 332:	00 30                	add    BYTE PTR [eax],dh
 334:	16                   	push   ss
 335:	0c 00                	or     al,0x0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	da 00                	fiadd  DWORD PTR [eax]
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	ba 00 00 00 01       	mov    edx,0x1000000
       b:	01 fb                	add    ebx,edi
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	2f                   	das    
      3c:	68 6f 6d 65 2f       	push   0x2f656d6f
      41:	79 6f                	jns    b2 <sysEnter_Vector-0x12ff4e>
      43:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      4a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      4d:	73 73                	jae    c2 <sysEnter_Vector-0x12ff3e>
      4f:	2f                   	das    
      50:	6c                   	ins    BYTE PTR es:[edi],dx
      51:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      58:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      5e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      64:	78 2d                	js     93 <sysEnter_Vector-0x12ff6d>
      66:	67 6e                	outs   dx,BYTE PTR ds:[si]
      68:	75 2f                	jne    99 <sysEnter_Vector-0x12ff67>
      6a:	35 2e 33 2e 30       	xor    eax,0x302e332e
      6f:	2f                   	das    
      70:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      77:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
      7a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
      7e:	65 00 00             	add    BYTE PTR gs:[eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      8f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      96:	63 
      97:	2e                   	cs
      98:	68 00 02 00 00       	push   0x200
      9d:	74 69                	je     108 <sysEnter_Vector-0x12fef8>
      9f:	6d                   	ins    DWORD PTR es:[edi],dx
      a0:	65                   	gs
      a1:	2e                   	cs
      a2:	68 00 03 00 00       	push   0x300
      a7:	6d                   	ins    DWORD PTR es:[edi],dx
      a8:	61                   	popa   
      a9:	6c                   	ins    BYTE PTR es:[edi],dx
      aa:	6c                   	ins    BYTE PTR es:[edi],dx
      ab:	6f                   	outs   dx,DWORD PTR ds:[esi]
      ac:	63 2e                	arpl   WORD PTR [esi],bp
      ae:	68 00 03 00 00       	push   0x300
      b3:	6c                   	ins    BYTE PTR es:[edi],dx
      b4:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      bb:	4f                   	dec    edi
      bc:	53                   	push   ebx
      bd:	2e                   	cs
      be:	68 00 03 00 00       	push   0x300
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	05 02 00 00 00       	add    eax,0x2
      ca:	30 1a                	xor    BYTE PTR [edx],bl
      cc:	c9                   	leave  
      cd:	2f                   	das    
      ce:	f3 72 cb             	repz jb 9c <sysEnter_Vector-0x12ff64>
      d1:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      d6:	72 cb                	jb     a3 <sysEnter_Vector-0x12ff5d>
      d8:	3d 02 02 00 01       	cmp    eax,0x1000202
      dd:	01 0d 01 00 00 02    	add    DWORD PTR ds:0x2000001,ecx
      e3:	00 bb 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],bh
      e9:	01 fb                	add    ebx,edi
      eb:	0e                   	push   cs
      ec:	0d 00 01 01 01       	or     eax,0x1010100
      f1:	01 00                	add    DWORD PTR [eax],eax
      f3:	00 00                	add    BYTE PTR [eax],al
      f5:	01 00                	add    DWORD PTR [eax],eax
      f7:	00 01                	add    BYTE PTR [ecx],al
      f9:	2e                   	cs
      fa:	2e                   	cs
      fb:	2f                   	das    
      fc:	2e                   	cs
      fd:	2e                   	cs
      fe:	2f                   	das    
      ff:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     103:	6a 2f                	push   0x2f
     105:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     108:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     10f:	63 2f                	arpl   WORD PTR [edi],bp
     111:	73 74                	jae    187 <sysEnter_Vector-0x12fe79>
     113:	72 69                	jb     17e <sysEnter_Vector-0x12fe82>
     115:	6e                   	outs   dx,BYTE PTR ds:[esi]
     116:	67 73 00             	addr16 jae 119 <sysEnter_Vector-0x12fee7>
     119:	2f                   	das    
     11a:	68 6f 6d 65 2f       	push   0x2f656d6f
     11f:	79 6f                	jns    190 <sysEnter_Vector-0x12fe70>
     121:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     128:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     12b:	73 73                	jae    1a0 <sysEnter_Vector-0x12fe60>
     12d:	2f                   	das    
     12e:	6c                   	ins    BYTE PTR es:[edi],dx
     12f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     136:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     142:	78 2d                	js     171 <sysEnter_Vector-0x12fe8f>
     144:	67 6e                	outs   dx,BYTE PTR ds:[si]
     146:	75 2f                	jne    177 <sysEnter_Vector-0x12fe89>
     148:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14d:	2f                   	das    
     14e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     155:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     158:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     15c:	65 00 00             	add    BYTE PTR gs:[eax],al
     15f:	73 74                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     161:	72 63                	jb     1c6 <sysEnter_Vector-0x12fe3a>
     163:	73 70                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     165:	6e                   	outs   dx,BYTE PTR ds:[esi]
     166:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     169:	01 00                	add    DWORD PTR [eax],eax
     16b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     175:	63 
     176:	2e                   	cs
     177:	68 00 02 00 00       	push   0x200
     17c:	74 69                	je     1e7 <sysEnter_Vector-0x12fe19>
     17e:	6d                   	ins    DWORD PTR es:[edi],dx
     17f:	65                   	gs
     180:	2e                   	cs
     181:	68 00 03 00 00       	push   0x300
     186:	6d                   	ins    DWORD PTR es:[edi],dx
     187:	61                   	popa   
     188:	6c                   	ins    BYTE PTR es:[edi],dx
     189:	6c                   	ins    BYTE PTR es:[edi],dx
     18a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     18b:	63 2e                	arpl   WORD PTR [esi],bp
     18d:	68 00 03 00 00       	push   0x300
     192:	6c                   	ins    BYTE PTR es:[edi],dx
     193:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     19a:	4f                   	dec    edi
     19b:	53                   	push   ebx
     19c:	2e                   	cs
     19d:	68 00 03 00 00       	push   0x300
     1a2:	00 00                	add    BYTE PTR [eax],al
     1a4:	05 02 70 00 00       	add    eax,0x7002
     1a9:	30 03                	xor    BYTE PTR [ebx],al
     1ab:	25 01 e7 9f 59       	and    eax,0x599fe701
     1b0:	75 00                	jne    1b2 <sysEnter_Vector-0x12fe4e>
     1b2:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1b5:	aa                   	stos   BYTE PTR es:[edi],al
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	04 01                	add    al,0x1
     1ba:	06                   	push   es
     1bb:	3c 00                	cmp    al,0x0
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	06                   	push   es
     1c1:	73 00                	jae    1c3 <sysEnter_Vector-0x12fe3d>
     1c3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1c6:	06                   	push   es
     1c7:	82                   	(bad)  
     1c8:	06                   	push   es
     1c9:	6d                   	ins    DWORD PTR es:[edi],dx
     1ca:	91                   	xchg   ecx,eax
     1cb:	4d                   	dec    ebp
     1cc:	e7 9f                	out    0x9f,eax
     1ce:	59                   	pop    ecx
     1cf:	75 00                	jne    1d1 <sysEnter_Vector-0x12fe2f>
     1d1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1d4:	aa                   	stos   BYTE PTR es:[edi],al
     1d5:	00 02                	add    BYTE PTR [edx],al
     1d7:	04 01                	add    al,0x1
     1d9:	06                   	push   es
     1da:	3c 00                	cmp    al,0x0
     1dc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1df:	06                   	push   es
     1e0:	73 00                	jae    1e2 <sysEnter_Vector-0x12fe1e>
     1e2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1e5:	06                   	push   es
     1e6:	82                   	(bad)  
     1e7:	06                   	push   es
     1e8:	6d                   	ins    DWORD PTR es:[edi],dx
     1e9:	91                   	xchg   ecx,eax
     1ea:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1ed:	01 01                	add    DWORD PTR [ecx],eax
     1ef:	de 00                	fiadd  WORD PTR [eax]
     1f1:	00 00                	add    BYTE PTR [eax],al
     1f3:	02 00                	add    al,BYTE PTR [eax]
     1f5:	ba 00 00 00 01       	mov    edx,0x1000000
     1fa:	01 fb                	add    ebx,edi
     1fc:	0e                   	push   cs
     1fd:	0d 00 01 01 01       	or     eax,0x1010100
     202:	01 00                	add    DWORD PTR [eax],eax
     204:	00 00                	add    BYTE PTR [eax],al
     206:	01 00                	add    DWORD PTR [eax],eax
     208:	00 01                	add    BYTE PTR [ecx],al
     20a:	2e                   	cs
     20b:	2e                   	cs
     20c:	2f                   	das    
     20d:	2e                   	cs
     20e:	2e                   	cs
     20f:	2f                   	das    
     210:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     214:	6a 2f                	push   0x2f
     216:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     219:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     220:	63 2f                	arpl   WORD PTR [edi],bp
     222:	73 74                	jae    298 <sysEnter_Vector-0x12fd68>
     224:	72 69                	jb     28f <sysEnter_Vector-0x12fd71>
     226:	6e                   	outs   dx,BYTE PTR ds:[esi]
     227:	67 73 00             	addr16 jae 22a <sysEnter_Vector-0x12fdd6>
     22a:	2f                   	das    
     22b:	68 6f 6d 65 2f       	push   0x2f656d6f
     230:	79 6f                	jns    2a1 <sysEnter_Vector-0x12fd5f>
     232:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     239:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     23c:	73 73                	jae    2b1 <sysEnter_Vector-0x12fd4f>
     23e:	2f                   	das    
     23f:	6c                   	ins    BYTE PTR es:[edi],dx
     240:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     247:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     24d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     253:	78 2d                	js     282 <sysEnter_Vector-0x12fd7e>
     255:	67 6e                	outs   dx,BYTE PTR ds:[si]
     257:	75 2f                	jne    288 <sysEnter_Vector-0x12fd78>
     259:	35 2e 33 2e 30       	xor    eax,0x302e332e
     25e:	2f                   	das    
     25f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     266:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     269:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     26d:	65 00 00             	add    BYTE PTR gs:[eax],al
     270:	73 74                	jae    2e6 <sysEnter_Vector-0x12fd1a>
     272:	72 74                	jb     2e8 <sysEnter_Vector-0x12fd18>
     274:	6f                   	outs   dx,DWORD PTR ds:[esi]
     275:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     278:	00 01                	add    BYTE PTR [ecx],al
     27a:	00 00                	add    BYTE PTR [eax],al
     27c:	73 74                	jae    2f2 <sysEnter_Vector-0x12fd0e>
     27e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     285:	63 
     286:	2e                   	cs
     287:	68 00 02 00 00       	push   0x200
     28c:	74 69                	je     2f7 <sysEnter_Vector-0x12fd09>
     28e:	6d                   	ins    DWORD PTR es:[edi],dx
     28f:	65                   	gs
     290:	2e                   	cs
     291:	68 00 03 00 00       	push   0x300
     296:	6d                   	ins    DWORD PTR es:[edi],dx
     297:	61                   	popa   
     298:	6c                   	ins    BYTE PTR es:[edi],dx
     299:	6c                   	ins    BYTE PTR es:[edi],dx
     29a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     29b:	63 2e                	arpl   WORD PTR [esi],bp
     29d:	68 00 03 00 00       	push   0x300
     2a2:	6c                   	ins    BYTE PTR es:[edi],dx
     2a3:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     2aa:	4f                   	dec    edi
     2ab:	53                   	push   ebx
     2ac:	2e                   	cs
     2ad:	68 00 03 00 00       	push   0x300
     2b2:	00 00                	add    BYTE PTR [eax],al
     2b4:	05 02 1c 01 00       	add    eax,0x11c02
     2b9:	30 03                	xor    BYTE PTR [ebx],al
     2bb:	28 01                	sub    BYTE PTR [ecx],al
     2bd:	f6 67 92             	mul    BYTE PTR [edi-0x6e]
     2c0:	08 2f                	or     BYTE PTR [edi],ch
     2c2:	75 08                	jne    2cc <sysEnter_Vector-0x12fd34>
     2c4:	2f                   	das    
     2c5:	4b                   	dec    ebx
     2c6:	08 c9                	or     cl,cl
     2c8:	c9                   	leave  
     2c9:	08 21                	or     BYTE PTR [ecx],ah
     2cb:	3d 02 07 00 01       	cmp    eax,0x1000702
     2d0:	01 1a                	add    DWORD PTR [edx],ebx
     2d2:	01 00                	add    DWORD PTR [eax],eax
     2d4:	00 02                	add    BYTE PTR [edx],al
     2d6:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
     2dc:	01 fb                	add    ebx,edi
     2de:	0e                   	push   cs
     2df:	0d 00 01 01 01       	or     eax,0x1010100
     2e4:	01 00                	add    DWORD PTR [eax],eax
     2e6:	00 00                	add    BYTE PTR [eax],al
     2e8:	01 00                	add    DWORD PTR [eax],eax
     2ea:	00 01                	add    BYTE PTR [ecx],al
     2ec:	73 72                	jae    360 <sysEnter_Vector-0x12fca0>
     2ee:	63 00                	arpl   WORD PTR [eax],ax
     2f0:	2f                   	das    
     2f1:	68 6f 6d 65 2f       	push   0x2f656d6f
     2f6:	79 6f                	jns    367 <sysEnter_Vector-0x12fc99>
     2f8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2ff:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     302:	73 73                	jae    377 <sysEnter_Vector-0x12fc89>
     304:	2f                   	das    
     305:	6c                   	ins    BYTE PTR es:[edi],dx
     306:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     30d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     313:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     319:	78 2d                	js     348 <sysEnter_Vector-0x12fcb8>
     31b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     31d:	75 2f                	jne    34e <sysEnter_Vector-0x12fcb2>
     31f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     324:	2f                   	das    
     325:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     32c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     32f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     333:	65 00 00             	add    BYTE PTR gs:[eax],al
     336:	61                   	popa   
     337:	73 63                	jae    39c <sysEnter_Vector-0x12fc64>
     339:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     340:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     343:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     34a:	63 
     34b:	2e                   	cs
     34c:	68 00 02 00 00       	push   0x200
     351:	74 69                	je     3bc <sysEnter_Vector-0x12fc44>
     353:	6d                   	ins    DWORD PTR es:[edi],dx
     354:	65                   	gs
     355:	2e                   	cs
     356:	68 00 03 00 00       	push   0x300
     35b:	6d                   	ins    DWORD PTR es:[edi],dx
     35c:	61                   	popa   
     35d:	6c                   	ins    BYTE PTR es:[edi],dx
     35e:	6c                   	ins    BYTE PTR es:[edi],dx
     35f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     360:	63 2e                	arpl   WORD PTR [esi],bp
     362:	68 00 03 00 00       	push   0x300
     367:	6c                   	ins    BYTE PTR es:[edi],dx
     368:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     36f:	4f                   	dec    edi
     370:	53                   	push   ebx
     371:	2e                   	cs
     372:	68 00 03 00 00       	push   0x300
     377:	00 00                	add    BYTE PTR [eax],al
     379:	05 02 b4 01 00       	add    eax,0x1b402
     37e:	30 03                	xor    BYTE PTR [ebx],al
     380:	09 01                	or     DWORD PTR [ecx],eax
     382:	08 16                	or     BYTE PTR [esi],dl
     384:	00 02                	add    BYTE PTR [edx],al
     386:	04 03                	add    al,0x3
     388:	08 d7                	or     bh,dl
     38a:	00 02                	add    BYTE PTR [edx],al
     38c:	04 03                	add    al,0x3
     38e:	d7                   	xlat   BYTE PTR ds:[ebx]
     38f:	00 02                	add    BYTE PTR [edx],al
     391:	04 03                	add    al,0x3
     393:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     396:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     399:	d3 00                	rol    DWORD PTR [eax],cl
     39b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39e:	06                   	push   es
     39f:	82                   	(bad)  
     3a0:	06                   	push   es
     3a1:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     3a4:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     3a9:	04 01                	add    al,0x1
     3ab:	76 00                	jbe    3ad <sysEnter_Vector-0x12fc53>
     3ad:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3b0:	02 3b                	add    bh,BYTE PTR [ebx]
     3b2:	13 08                	adc    ecx,DWORD PTR [eax]
     3b4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3b8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3b9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3ba:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     3c0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3c3:	76 00                	jbe    3c5 <sysEnter_Vector-0x12fc3b>
     3c5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3c8:	02 3b                	add    bh,BYTE PTR [ebx]
     3ca:	13 08                	adc    ecx,DWORD PTR [eax]
     3cc:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3d0:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3d1:	d7                   	xlat   BYTE PTR ds:[ebx]
     3d2:	6a f3                	push   0xfffffff3
     3d4:	78 00                	js     3d6 <sysEnter_Vector-0x12fc2a>
     3d6:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3d9:	91                   	xchg   ecx,eax
     3da:	00 02                	add    BYTE PTR [edx],al
     3dc:	04 03                	add    al,0x3
     3de:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3e1:	00 02                	add    BYTE PTR [edx],al
     3e3:	04 01                	add    al,0x1
     3e5:	06                   	push   es
     3e6:	4a                   	dec    edx
     3e7:	06                   	push   es
     3e8:	e8 3d 02 02 00       	call   2062a <sysEnter_Vector-0x10f9d6>
     3ed:	01 01                	add    DWORD PTR [ecx],eax
     3ef:	10 01                	adc    BYTE PTR [ecx],al
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	02 00                	add    al,BYTE PTR [eax]
     3f5:	a3 00 00 00 01       	mov    ds:0x1000000,eax
     3fa:	01 fb                	add    ebx,edi
     3fc:	0e                   	push   cs
     3fd:	0d 00 01 01 01       	or     eax,0x1010100
     402:	01 00                	add    DWORD PTR [eax],eax
     404:	00 00                	add    BYTE PTR [eax],al
     406:	01 00                	add    DWORD PTR [eax],eax
     408:	00 01                	add    BYTE PTR [ecx],al
     40a:	73 72                	jae    47e <sysEnter_Vector-0x12fb82>
     40c:	63 00                	arpl   WORD PTR [eax],ax
     40e:	2f                   	das    
     40f:	68 6f 6d 65 2f       	push   0x2f656d6f
     414:	79 6f                	jns    485 <sysEnter_Vector-0x12fb7b>
     416:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     41d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     420:	73 73                	jae    495 <sysEnter_Vector-0x12fb6b>
     422:	2f                   	das    
     423:	6c                   	ins    BYTE PTR es:[edi],dx
     424:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     42b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     431:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     437:	78 2d                	js     466 <sysEnter_Vector-0x12fb9a>
     439:	67 6e                	outs   dx,BYTE PTR ds:[si]
     43b:	75 2f                	jne    46c <sysEnter_Vector-0x12fb94>
     43d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     442:	2f                   	das    
     443:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     44a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     44d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     451:	65 00 00             	add    BYTE PTR gs:[eax],al
     454:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     456:	76 69                	jbe    4c1 <sysEnter_Vector-0x12fb3f>
     458:	72 6f                	jb     4c9 <sysEnter_Vector-0x12fb37>
     45a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     45b:	6d                   	ins    DWORD PTR es:[edi],dx
     45c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     45e:	74 2e                	je     48e <sysEnter_Vector-0x12fb72>
     460:	63 00                	arpl   WORD PTR [eax],ax
     462:	01 00                	add    DWORD PTR [eax],eax
     464:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     467:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     46e:	63 
     46f:	2e                   	cs
     470:	68 00 02 00 00       	push   0x200
     475:	74 69                	je     4e0 <sysEnter_Vector-0x12fb20>
     477:	6d                   	ins    DWORD PTR es:[edi],dx
     478:	65                   	gs
     479:	2e                   	cs
     47a:	68 00 03 00 00       	push   0x300
     47f:	6d                   	ins    DWORD PTR es:[edi],dx
     480:	61                   	popa   
     481:	6c                   	ins    BYTE PTR es:[edi],dx
     482:	6c                   	ins    BYTE PTR es:[edi],dx
     483:	6f                   	outs   dx,DWORD PTR ds:[esi]
     484:	63 2e                	arpl   WORD PTR [esi],bp
     486:	68 00 03 00 00       	push   0x300
     48b:	6c                   	ins    BYTE PTR es:[edi],dx
     48c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     493:	4f                   	dec    edi
     494:	53                   	push   ebx
     495:	2e                   	cs
     496:	68 00 03 00 00       	push   0x300
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	05 02 00 04 00       	add    eax,0x40002
     4a2:	30 03                	xor    BYTE PTR [ebx],al
     4a4:	09 01                	or     DWORD PTR [ecx],eax
     4a6:	08 21                	or     BYTE PTR [ecx],ah
     4a8:	91                   	xchg   ecx,eax
     4a9:	02 36                	add    dh,BYTE PTR [esi]
     4ab:	14 02                	adc    al,0x2
     4ad:	39 13                	cmp    DWORD PTR [ebx],edx
     4af:	00 02                	add    BYTE PTR [edx],al
     4b1:	04 02                	add    al,0x2
     4b3:	7e 00                	jle    4b5 <sysEnter_Vector-0x12fb4b>
     4b5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     4b8:	06                   	push   es
     4b9:	4a                   	dec    edx
     4ba:	06                   	push   es
     4bb:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     4bc:	59                   	pop    ecx
     4bd:	5b                   	pop    ebx
     4be:	08 21                	or     BYTE PTR [ecx],ah
     4c0:	76 bb                	jbe    47d <sysEnter_Vector-0x12fb83>
     4c2:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     4c8:	14 08                	adc    al,0x8
     4ca:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     4d1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4d4:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     4d7:	00 02                	add    BYTE PTR [edx],al
     4d9:	04 01                	add    al,0x1
     4db:	06                   	push   es
     4dc:	4a                   	dec    edx
     4dd:	06                   	push   es
     4de:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     4e1:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     4e6:	08 f3                	or     bl,dh
     4e8:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     4ee:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4f1:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     4f4:	00 02                	add    BYTE PTR [edx],al
     4f6:	04 01                	add    al,0x1
     4f8:	06                   	push   es
     4f9:	4a                   	dec    edx
     4fa:	06                   	push   es
     4fb:	03 0b                	add    ecx,DWORD PTR [ebx]
     4fd:	9e                   	sahf   
     4fe:	02 05 00 01 01 fe    	add    al,BYTE PTR ds:0xfe010100
     504:	00 00                	add    BYTE PTR [eax],al
     506:	00 02                	add    BYTE PTR [edx],al
     508:	00 d7                	add    bh,dl
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	00 01                	add    BYTE PTR [ecx],al
     50e:	01 fb                	add    ebx,edi
     510:	0e                   	push   cs
     511:	0d 00 01 01 01       	or     eax,0x1010100
     516:	01 00                	add    DWORD PTR [eax],eax
     518:	00 00                	add    BYTE PTR [eax],al
     51a:	01 00                	add    DWORD PTR [eax],eax
     51c:	00 01                	add    BYTE PTR [ecx],al
     51e:	73 72                	jae    592 <sysEnter_Vector-0x12fa6e>
     520:	63 00                	arpl   WORD PTR [eax],ax
     522:	2f                   	das    
     523:	68 6f 6d 65 2f       	push   0x2f656d6f
     528:	79 6f                	jns    599 <sysEnter_Vector-0x12fa67>
     52a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     531:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     534:	73 73                	jae    5a9 <sysEnter_Vector-0x12fa57>
     536:	2f                   	das    
     537:	6c                   	ins    BYTE PTR es:[edi],dx
     538:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     53f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     545:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     54b:	78 2d                	js     57a <sysEnter_Vector-0x12fa86>
     54d:	67 6e                	outs   dx,BYTE PTR ds:[si]
     54f:	75 2f                	jne    580 <sysEnter_Vector-0x12fa80>
     551:	35 2e 33 2e 30       	xor    eax,0x302e332e
     556:	2f                   	das    
     557:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     55e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     561:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     565:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     569:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     56d:	65                   	gs
     56e:	2f                   	das    
     56f:	2e                   	cs
     570:	2e                   	cs
     571:	2f                   	das    
     572:	2e                   	cs
     573:	2e                   	cs
     574:	2f                   	das    
     575:	2e                   	cs
     576:	2e                   	cs
     577:	2f                   	das    
     578:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     57c:	6a 2f                	push   0x2f
     57e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     581:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     588:	6e                   	outs   dx,BYTE PTR ds:[esi]
     589:	65                   	gs
     58a:	6c                   	ins    BYTE PTR es:[edi],dx
     58b:	2f                   	das    
     58c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     593:	00 00                	add    BYTE PTR [eax],al
     595:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     59c:	01 00                	add    DWORD PTR [eax],eax
     59e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     5a1:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     5a8:	63 
     5a9:	2e                   	cs
     5aa:	68 00 02 00 00       	push   0x200
     5af:	74 69                	je     61a <sysEnter_Vector-0x12f9e6>
     5b1:	6d                   	ins    DWORD PTR es:[edi],dx
     5b2:	65                   	gs
     5b3:	2e                   	cs
     5b4:	68 00 03 00 00       	push   0x300
     5b9:	6d                   	ins    DWORD PTR es:[edi],dx
     5ba:	61                   	popa   
     5bb:	6c                   	ins    BYTE PTR es:[edi],dx
     5bc:	6c                   	ins    BYTE PTR es:[edi],dx
     5bd:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5be:	63 2e                	arpl   WORD PTR [esi],bp
     5c0:	68 00 03 00 00       	push   0x300
     5c5:	6c                   	ins    BYTE PTR es:[edi],dx
     5c6:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     5cd:	4f                   	dec    edi
     5ce:	53                   	push   ebx
     5cf:	2e                   	cs
     5d0:	68 00 03 00 00       	push   0x300
     5d5:	73 79                	jae    650 <sysEnter_Vector-0x12f9b0>
     5d7:	73 63                	jae    63c <sysEnter_Vector-0x12f9c4>
     5d9:	61                   	popa   
     5da:	6c                   	ins    BYTE PTR es:[edi],dx
     5db:	6c                   	ins    BYTE PTR es:[edi],dx
     5dc:	73 2e                	jae    60c <sysEnter_Vector-0x12f9f4>
     5de:	68 00 04 00 00       	push   0x400
     5e3:	00 00                	add    BYTE PTR [eax],al
     5e5:	05 02 6c 06 00       	add    eax,0x66c02
     5ea:	30 03                	xor    BYTE PTR [ebx],al
     5ec:	09 01                	or     DWORD PTR [ecx],eax
     5ee:	08 13                	or     BYTE PTR [ebx],dl
     5f0:	08 67 5b             	or     BYTE PTR [edi+0x5b],ah
     5f3:	08 13                	or     BYTE PTR [ebx],dl
     5f5:	08 2f                	or     BYTE PTR [edi],ch
     5f7:	69 e5 08 d7 77 08    	imul   esp,ebp,0x877d708
     5fd:	13 08                	adc    ecx,DWORD PTR [eax]
     5ff:	9f                   	lahf   
     600:	02 05 00 01 01 30    	add    al,BYTE PTR ds:0x30010100
     606:	01 00                	add    DWORD PTR [eax],eax
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	00 de                	add    dh,bl
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 01                	add    BYTE PTR [ecx],al
     610:	01 fb                	add    ebx,edi
     612:	0e                   	push   cs
     613:	0d 00 01 01 01       	or     eax,0x1010100
     618:	01 00                	add    DWORD PTR [eax],eax
     61a:	00 00                	add    BYTE PTR [eax],al
     61c:	01 00                	add    DWORD PTR [eax],eax
     61e:	00 01                	add    BYTE PTR [ecx],al
     620:	73 72                	jae    694 <sysEnter_Vector-0x12f96c>
     622:	63 2f                	arpl   WORD PTR [edi],bp
     624:	69 6e 70 75 74 00 2f 	imul   ebp,DWORD PTR [esi+0x70],0x2f007475
     62b:	68 6f 6d 65 2f       	push   0x2f656d6f
     630:	79 6f                	jns    6a1 <sysEnter_Vector-0x12f95f>
     632:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     639:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     63c:	73 73                	jae    6b1 <sysEnter_Vector-0x12f94f>
     63e:	2f                   	das    
     63f:	6c                   	ins    BYTE PTR es:[edi],dx
     640:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     647:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     64d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     653:	78 2d                	js     682 <sysEnter_Vector-0x12f97e>
     655:	67 6e                	outs   dx,BYTE PTR ds:[si]
     657:	75 2f                	jne    688 <sysEnter_Vector-0x12f978>
     659:	35 2e 33 2e 30       	xor    eax,0x302e332e
     65e:	2f                   	das    
     65f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     666:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     669:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     66d:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     671:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     675:	65                   	gs
     676:	2f                   	das    
     677:	2e                   	cs
     678:	2e                   	cs
     679:	2f                   	das    
     67a:	2e                   	cs
     67b:	2e                   	cs
     67c:	2f                   	das    
     67d:	2e                   	cs
     67e:	2e                   	cs
     67f:	2f                   	das    
     680:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     684:	6a 2f                	push   0x2f
     686:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     689:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     690:	6e                   	outs   dx,BYTE PTR ds:[esi]
     691:	65                   	gs
     692:	6c                   	ins    BYTE PTR es:[edi],dx
     693:	2f                   	das    
     694:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     69b:	00 00                	add    BYTE PTR [eax],al
     69d:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     6a4:	00 01                	add    BYTE PTR [ecx],al
     6a6:	00 00                	add    BYTE PTR [eax],al
     6a8:	73 74                	jae    71e <sysEnter_Vector-0x12f8e2>
     6aa:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     6b1:	63 
     6b2:	2e                   	cs
     6b3:	68 00 02 00 00       	push   0x200
     6b8:	74 69                	je     723 <sysEnter_Vector-0x12f8dd>
     6ba:	6d                   	ins    DWORD PTR es:[edi],dx
     6bb:	65                   	gs
     6bc:	2e                   	cs
     6bd:	68 00 03 00 00       	push   0x300
     6c2:	6d                   	ins    DWORD PTR es:[edi],dx
     6c3:	61                   	popa   
     6c4:	6c                   	ins    BYTE PTR es:[edi],dx
     6c5:	6c                   	ins    BYTE PTR es:[edi],dx
     6c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6c7:	63 2e                	arpl   WORD PTR [esi],bp
     6c9:	68 00 03 00 00       	push   0x300
     6ce:	6c                   	ins    BYTE PTR es:[edi],dx
     6cf:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     6d6:	4f                   	dec    edi
     6d7:	53                   	push   ebx
     6d8:	2e                   	cs
     6d9:	68 00 03 00 00       	push   0x300
     6de:	73 79                	jae    759 <sysEnter_Vector-0x12f8a7>
     6e0:	73 63                	jae    745 <sysEnter_Vector-0x12f8bb>
     6e2:	61                   	popa   
     6e3:	6c                   	ins    BYTE PTR es:[edi],dx
     6e4:	6c                   	ins    BYTE PTR es:[edi],dx
     6e5:	73 2e                	jae    715 <sysEnter_Vector-0x12f8eb>
     6e7:	68 00 04 00 00       	push   0x400
     6ec:	00 00                	add    BYTE PTR [eax],al
     6ee:	05 02 2c 07 00       	add    eax,0x72c02
     6f3:	30 03                	xor    BYTE PTR [ebx],al
     6f5:	0f 01                	(bad)  
     6f7:	d7                   	xlat   BYTE PTR ds:[ebx]
     6f8:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6fe:	75 4b                	jne    74b <sysEnter_Vector-0x12f8b5>
     700:	08 3d 77 08 14 08    	or     BYTE PTR ds:0x8140877,bh
     706:	3d 4b 6a 08 14       	cmp    eax,0x14086a4b
     70b:	75 84                	jne    691 <sysEnter_Vector-0x12f96f>
     70d:	68 00 02 04 01       	push   0x1040200
     712:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     715:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     71b:	06                   	push   es
     71c:	66 06                	pushw  es
     71e:	68 ad 68 68 76       	push   0x766868ad
     723:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     726:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     729:	06                   	push   es
     72a:	ac                   	lods   al,BYTE PTR ds:[esi]
     72b:	06                   	push   es
     72c:	68 5b 00 02 04       	push   0x402005b
     731:	02 a0 2f 02 05 00    	add    ah,BYTE PTR [eax+0x5022f]
     737:	01 01                	add    DWORD PTR [ecx],eax
     739:	76 01                	jbe    73c <sysEnter_Vector-0x12f8c4>
     73b:	00 00                	add    BYTE PTR [eax],al
     73d:	02 00                	add    al,BYTE PTR [eax]
     73f:	f5                   	cmc    
     740:	00 00                	add    BYTE PTR [eax],al
     742:	00 01                	add    BYTE PTR [ecx],al
     744:	01 fb                	add    ebx,edi
     746:	0e                   	push   cs
     747:	0d 00 01 01 01       	or     eax,0x1010100
     74c:	01 00                	add    DWORD PTR [eax],eax
     74e:	00 00                	add    BYTE PTR [eax],al
     750:	01 00                	add    DWORD PTR [eax],eax
     752:	00 01                	add    BYTE PTR [ecx],al
     754:	73 72                	jae    7c8 <sysEnter_Vector-0x12f838>
     756:	63 00                	arpl   WORD PTR [eax],ax
     758:	2f                   	das    
     759:	68 6f 6d 65 2f       	push   0x2f656d6f
     75e:	79 6f                	jns    7cf <sysEnter_Vector-0x12f831>
     760:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     767:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     76a:	73 73                	jae    7df <sysEnter_Vector-0x12f821>
     76c:	2f                   	das    
     76d:	6c                   	ins    BYTE PTR es:[edi],dx
     76e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     775:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     77b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     781:	78 2d                	js     7b0 <sysEnter_Vector-0x12f850>
     783:	67 6e                	outs   dx,BYTE PTR ds:[si]
     785:	75 2f                	jne    7b6 <sysEnter_Vector-0x12f84a>
     787:	35 2e 33 2e 30       	xor    eax,0x302e332e
     78c:	2f                   	das    
     78d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     794:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     797:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     79b:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     79f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     7a3:	65                   	gs
     7a4:	2f                   	das    
     7a5:	2e                   	cs
     7a6:	2e                   	cs
     7a7:	2f                   	das    
     7a8:	2e                   	cs
     7a9:	2e                   	cs
     7aa:	2f                   	das    
     7ab:	2e                   	cs
     7ac:	2e                   	cs
     7ad:	2f                   	das    
     7ae:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     7b2:	6a 2f                	push   0x2f
     7b4:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     7b7:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     7be:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7bf:	65                   	gs
     7c0:	6c                   	ins    BYTE PTR es:[edi],dx
     7c1:	2f                   	das    
     7c2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     7c9:	00 00                	add    BYTE PTR [eax],al
     7cb:	6c                   	ins    BYTE PTR es:[edi],dx
     7cc:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7d3:	4f                   	dec    edi
     7d4:	53                   	push   ebx
     7d5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     7d8:	01 00                	add    DWORD PTR [eax],eax
     7da:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     7dd:	64                   	fs
     7de:	61                   	popa   
     7df:	72 67                	jb     848 <sysEnter_Vector-0x12f7b8>
     7e1:	2e                   	cs
     7e2:	68 00 02 00 00       	push   0x200
     7e7:	73 74                	jae    85d <sysEnter_Vector-0x12f7a3>
     7e9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7f0:	63 
     7f1:	2e                   	cs
     7f2:	68 00 02 00 00       	push   0x200
     7f7:	73 74                	jae    86d <sysEnter_Vector-0x12f793>
     7f9:	64                   	fs
     7fa:	64                   	fs
     7fb:	65                   	gs
     7fc:	66                   	data16
     7fd:	2e                   	cs
     7fe:	68 00 02 00 00       	push   0x200
     803:	74 69                	je     86e <sysEnter_Vector-0x12f792>
     805:	6d                   	ins    DWORD PTR es:[edi],dx
     806:	65                   	gs
     807:	2e                   	cs
     808:	68 00 03 00 00       	push   0x300
     80d:	6d                   	ins    DWORD PTR es:[edi],dx
     80e:	61                   	popa   
     80f:	6c                   	ins    BYTE PTR es:[edi],dx
     810:	6c                   	ins    BYTE PTR es:[edi],dx
     811:	6f                   	outs   dx,DWORD PTR ds:[esi]
     812:	63 2e                	arpl   WORD PTR [esi],bp
     814:	68 00 03 00 00       	push   0x300
     819:	6c                   	ins    BYTE PTR es:[edi],dx
     81a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     821:	4f                   	dec    edi
     822:	53                   	push   ebx
     823:	2e                   	cs
     824:	68 00 03 00 00       	push   0x300
     829:	73 79                	jae    8a4 <sysEnter_Vector-0x12f75c>
     82b:	73 63                	jae    890 <sysEnter_Vector-0x12f770>
     82d:	61                   	popa   
     82e:	6c                   	ins    BYTE PTR es:[edi],dx
     82f:	6c                   	ins    BYTE PTR es:[edi],dx
     830:	73 2e                	jae    860 <sysEnter_Vector-0x12f7a0>
     832:	68 00 04 00 00       	push   0x400
     837:	00 00                	add    BYTE PTR [eax],al
     839:	05 02 80 08 00       	add    eax,0x88002
     83e:	30 03                	xor    BYTE PTR [ebx],al
     840:	10 01                	adc    BYTE PTR [ecx],al
     842:	08 21                	or     BYTE PTR [ecx],ah
     844:	75 08                	jne    84e <sysEnter_Vector-0x12f7b2>
     846:	67 3d 77 08 13 75    	addr16 cmp eax,0x75130877
     84c:	08 3d 3d 69 08 13    	or     BYTE PTR ds:0x1308693d,bh
     852:	75 08                	jne    85c <sysEnter_Vector-0x12f7a4>
     854:	2f                   	das    
     855:	3d 69 08 13 75       	cmp    eax,0x75130869
     85a:	f3 3d 69 f3 75 ad    	repz cmp eax,0xad75f369
     860:	3d 31 08 21 08       	cmp    eax,0x8210831
     865:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     869:	bb c9 08 67 75       	mov    ebx,0x756708c9
     86e:	08 6a 2d             	or     BYTE PTR [edx+0x2d],ch
     871:	08 21                	or     BYTE PTR [ecx],ah
     873:	69 08 13 75 77 f4    	imul   ecx,DWORD PTR [eax],0xf4777513
     879:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     87d:	31 f4                	xor    esp,esi
     87f:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     883:	31 f4                	xor    esp,esi
     885:	68 08 91 59 31       	push   0x31599108
     88a:	08 13                	or     BYTE PTR [ebx],dl
     88c:	02 33                	add    dh,BYTE PTR [ebx]
     88e:	13 59 69             	adc    ebx,DWORD PTR [ecx+0x69]
     891:	c9                   	leave  
     892:	c9                   	leave  
     893:	3f                   	aas    
     894:	c9                   	leave  
     895:	08 83 3f 08 13 77    	or     BYTE PTR [ebx+0x7713083f],al
     89b:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     89e:	4d                   	dec    ebp
     89f:	3d 5b c9 c9 31       	cmp    eax,0x31c9c95b
     8a4:	08 21                	or     BYTE PTR [ecx],ah
     8a6:	77 c9                	ja     871 <sysEnter_Vector-0x12f78f>
     8a8:	08 4b 5b             	or     BYTE PTR [ebx+0x5b],cl
     8ab:	c9                   	leave  
     8ac:	08 13                	or     BYTE PTR [ebx],dl
     8ae:	02 02                	add    al,BYTE PTR [edx]
     8b0:	00 01                	add    BYTE PTR [ecx],al
     8b2:	01 56 01             	add    DWORD PTR [esi+0x1],edx
     8b5:	00 00                	add    BYTE PTR [eax],al
     8b7:	02 00                	add    al,BYTE PTR [eax]
     8b9:	e5 00                	in     eax,0x0
     8bb:	00 00                	add    BYTE PTR [eax],al
     8bd:	01 01                	add    DWORD PTR [ecx],eax
     8bf:	fb                   	sti    
     8c0:	0e                   	push   cs
     8c1:	0d 00 01 01 01       	or     eax,0x1010100
     8c6:	01 00                	add    DWORD PTR [eax],eax
     8c8:	00 00                	add    BYTE PTR [eax],al
     8ca:	01 00                	add    DWORD PTR [eax],eax
     8cc:	00 01                	add    BYTE PTR [ecx],al
     8ce:	73 72                	jae    942 <sysEnter_Vector-0x12f6be>
     8d0:	63 00                	arpl   WORD PTR [eax],ax
     8d2:	2f                   	das    
     8d3:	68 6f 6d 65 2f       	push   0x2f656d6f
     8d8:	79 6f                	jns    949 <sysEnter_Vector-0x12f6b7>
     8da:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     8e1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     8e4:	73 73                	jae    959 <sysEnter_Vector-0x12f6a7>
     8e6:	2f                   	das    
     8e7:	6c                   	ins    BYTE PTR es:[edi],dx
     8e8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     8ef:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     8f5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     8fb:	78 2d                	js     92a <sysEnter_Vector-0x12f6d6>
     8fd:	67 6e                	outs   dx,BYTE PTR ds:[si]
     8ff:	75 2f                	jne    930 <sysEnter_Vector-0x12f6d0>
     901:	35 2e 33 2e 30       	xor    eax,0x302e332e
     906:	2f                   	das    
     907:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     90e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     911:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     915:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     919:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     91d:	65                   	gs
     91e:	2f                   	das    
     91f:	2e                   	cs
     920:	2e                   	cs
     921:	2f                   	das    
     922:	2e                   	cs
     923:	2e                   	cs
     924:	2f                   	das    
     925:	2e                   	cs
     926:	2e                   	cs
     927:	2f                   	das    
     928:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     92c:	6a 2f                	push   0x2f
     92e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     931:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     938:	6e                   	outs   dx,BYTE PTR ds:[esi]
     939:	65                   	gs
     93a:	6c                   	ins    BYTE PTR es:[edi],dx
     93b:	2f                   	das    
     93c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     943:	00 00                	add    BYTE PTR [eax],al
     945:	6d                   	ins    DWORD PTR es:[edi],dx
     946:	61                   	popa   
     947:	6c                   	ins    BYTE PTR es:[edi],dx
     948:	6c                   	ins    BYTE PTR es:[edi],dx
     949:	6f                   	outs   dx,DWORD PTR ds:[esi]
     94a:	63 2e                	arpl   WORD PTR [esi],bp
     94c:	63 00                	arpl   WORD PTR [eax],ax
     94e:	01 00                	add    DWORD PTR [eax],eax
     950:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     953:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     95a:	63 
     95b:	2e                   	cs
     95c:	68 00 02 00 00       	push   0x200
     961:	73 74                	jae    9d7 <sysEnter_Vector-0x12f629>
     963:	64                   	fs
     964:	64                   	fs
     965:	65                   	gs
     966:	66                   	data16
     967:	2e                   	cs
     968:	68 00 02 00 00       	push   0x200
     96d:	6d                   	ins    DWORD PTR es:[edi],dx
     96e:	61                   	popa   
     96f:	6c                   	ins    BYTE PTR es:[edi],dx
     970:	6c                   	ins    BYTE PTR es:[edi],dx
     971:	6f                   	outs   dx,DWORD PTR ds:[esi]
     972:	63 2e                	arpl   WORD PTR [esi],bp
     974:	68 00 03 00 00       	push   0x300
     979:	74 69                	je     9e4 <sysEnter_Vector-0x12f61c>
     97b:	6d                   	ins    DWORD PTR es:[edi],dx
     97c:	65                   	gs
     97d:	2e                   	cs
     97e:	68 00 03 00 00       	push   0x300
     983:	6c                   	ins    BYTE PTR es:[edi],dx
     984:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     98b:	4f                   	dec    edi
     98c:	53                   	push   ebx
     98d:	2e                   	cs
     98e:	68 00 03 00 00       	push   0x300
     993:	73 79                	jae    a0e <sysEnter_Vector-0x12f5f2>
     995:	73 63                	jae    9fa <sysEnter_Vector-0x12f606>
     997:	61                   	popa   
     998:	6c                   	ins    BYTE PTR es:[edi],dx
     999:	6c                   	ins    BYTE PTR es:[edi],dx
     99a:	73 2e                	jae    9ca <sysEnter_Vector-0x12f636>
     99c:	68 00 04 00 00       	push   0x400
     9a1:	00 00                	add    BYTE PTR [eax],al
     9a3:	05 02 48 0c 00       	add    eax,0xc4802
     9a8:	30 03                	xor    BYTE PTR [ebx],al
     9aa:	0c 01                	or     al,0x1
     9ac:	08 21                	or     BYTE PTR [ecx],ah
     9ae:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
     9b1:	bb bb bb 69 f5       	mov    ebx,0xf569bbbb
     9b6:	92                   	xchg   edx,eax
     9b7:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     9bd:	04 01                	add    al,0x1
     9bf:	06                   	push   es
     9c0:	66 06                	pushw  es
     9c2:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     9c7:	59                   	pop    ecx
     9c8:	31 08                	xor    DWORD PTR [eax],ecx
     9ca:	27                   	daa    
     9cb:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     9d1:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     9d6:	f3 02 26             	repz add ah,BYTE PTR [esi]
     9d9:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     9e0:	e5 ad                	in     eax,0xad
     9e2:	91                   	xchg   ecx,eax
     9e3:	91                   	xchg   ecx,eax
     9e4:	75 08                	jne    9ee <sysEnter_Vector-0x12f612>
     9e6:	d7                   	xlat   BYTE PTR ds:[ebx]
     9e7:	d7                   	xlat   BYTE PTR ds:[ebx]
     9e8:	08 13                	or     BYTE PTR [ebx],dl
     9ea:	91                   	xchg   ecx,eax
     9eb:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     9ee:	91                   	xchg   ecx,eax
     9ef:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     9f4:	f5                   	cmc    
     9f5:	68 93 00 02 04       	push   0x4020093
     9fa:	02 be 30 03 76 90    	add    bh,BYTE PTR [esi-0x6f89fcd0]
     a00:	03 0b                	add    ecx,DWORD PTR [ebx]
     a02:	20 31                	and    BYTE PTR [ecx],dh
     a04:	08 13                	or     BYTE PTR [ebx],dl
     a06:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     a0c:	01 ed                	add    ebp,ebp
     a0e:	00 00                	add    BYTE PTR [eax],al
     a10:	00 02                	add    BYTE PTR [edx],al
     a12:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     a18:	01 fb                	add    ebx,edi
     a1a:	0e                   	push   cs
     a1b:	0d 00 01 01 01       	or     eax,0x1010100
     a20:	01 00                	add    DWORD PTR [eax],eax
     a22:	00 00                	add    BYTE PTR [eax],al
     a24:	01 00                	add    DWORD PTR [eax],eax
     a26:	00 01                	add    BYTE PTR [ecx],al
     a28:	73 72                	jae    a9c <sysEnter_Vector-0x12f564>
     a2a:	63 00                	arpl   WORD PTR [eax],ax
     a2c:	2f                   	das    
     a2d:	68 6f 6d 65 2f       	push   0x2f656d6f
     a32:	79 6f                	jns    aa3 <sysEnter_Vector-0x12f55d>
     a34:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     a3b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     a3e:	73 73                	jae    ab3 <sysEnter_Vector-0x12f54d>
     a40:	2f                   	das    
     a41:	6c                   	ins    BYTE PTR es:[edi],dx
     a42:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a49:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a4f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     a55:	78 2d                	js     a84 <sysEnter_Vector-0x12f57c>
     a57:	67 6e                	outs   dx,BYTE PTR ds:[si]
     a59:	75 2f                	jne    a8a <sysEnter_Vector-0x12f576>
     a5b:	35 2e 33 2e 30       	xor    eax,0x302e332e
     a60:	2f                   	das    
     a61:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a68:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a6b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a6f:	65 00 00             	add    BYTE PTR gs:[eax],al
     a72:	6d                   	ins    DWORD PTR es:[edi],dx
     a73:	65                   	gs
     a74:	6d                   	ins    DWORD PTR es:[edi],dx
     a75:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     a78:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a7b:	01 00                	add    DWORD PTR [eax],eax
     a7d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     a80:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     a87:	63 
     a88:	2e                   	cs
     a89:	68 00 02 00 00       	push   0x200
     a8e:	74 69                	je     af9 <sysEnter_Vector-0x12f507>
     a90:	6d                   	ins    DWORD PTR es:[edi],dx
     a91:	65                   	gs
     a92:	2e                   	cs
     a93:	68 00 03 00 00       	push   0x300
     a98:	73 74                	jae    b0e <sysEnter_Vector-0x12f4f2>
     a9a:	64                   	fs
     a9b:	64                   	fs
     a9c:	65                   	gs
     a9d:	66                   	data16
     a9e:	2e                   	cs
     a9f:	68 00 02 00 00       	push   0x200
     aa4:	6d                   	ins    DWORD PTR es:[edi],dx
     aa5:	61                   	popa   
     aa6:	6c                   	ins    BYTE PTR es:[edi],dx
     aa7:	6c                   	ins    BYTE PTR es:[edi],dx
     aa8:	6f                   	outs   dx,DWORD PTR ds:[esi]
     aa9:	63 2e                	arpl   WORD PTR [esi],bp
     aab:	68 00 03 00 00       	push   0x300
     ab0:	6c                   	ins    BYTE PTR es:[edi],dx
     ab1:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     ab8:	4f                   	dec    edi
     ab9:	53                   	push   ebx
     aba:	2e                   	cs
     abb:	68 00 03 00 00       	push   0x300
     ac0:	00 00                	add    BYTE PTR [eax],al
     ac2:	05 02 90 0f 00       	add    eax,0xf9002
     ac7:	30 03                	xor    BYTE PTR [ebx],al
     ac9:	0a 01                	or     al,BYTE PTR [ecx]
     acb:	f5                   	cmc    
     acc:	d7                   	xlat   BYTE PTR ds:[ebx]
     acd:	d7                   	xlat   BYTE PTR ds:[ebx]
     ace:	68 91 67 68 83       	push   0x83686791
     ad3:	91                   	xchg   ecx,eax
     ad4:	91                   	xchg   ecx,eax
     ad5:	2f                   	das    
     ad6:	08 1f                	or     BYTE PTR [edi],bl
     ad8:	e8 08 57 ca 84       	call   84ca61e5 <ticksToWait+0x54ca1ea9>
     add:	68 83 67 68 83       	push   0x83686783
     ae2:	91                   	xchg   ecx,eax
     ae3:	91                   	xchg   ecx,eax
     ae4:	2f                   	das    
     ae5:	08 1f                	or     BYTE PTR [edi],bl
     ae7:	e8 08 57 ca 5c       	call   5cca61f4 <ticksToWait+0x2cca1eb8>
     aec:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     af2:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     af8:	3e 02 02             	add    al,BYTE PTR ds:[edx]
     afb:	00 01                	add    BYTE PTR [ecx],al
     afd:	01 e4                	add    esp,esp
     aff:	00 00                	add    BYTE PTR [eax],al
     b01:	00 02                	add    BYTE PTR [edx],al
     b03:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     b09:	01 fb                	add    ebx,edi
     b0b:	0e                   	push   cs
     b0c:	0d 00 01 01 01       	or     eax,0x1010100
     b11:	01 00                	add    DWORD PTR [eax],eax
     b13:	00 00                	add    BYTE PTR [eax],al
     b15:	01 00                	add    DWORD PTR [eax],eax
     b17:	00 01                	add    BYTE PTR [ecx],al
     b19:	73 72                	jae    b8d <sysEnter_Vector-0x12f473>
     b1b:	63 00                	arpl   WORD PTR [eax],ax
     b1d:	2f                   	das    
     b1e:	68 6f 6d 65 2f       	push   0x2f656d6f
     b23:	79 6f                	jns    b94 <sysEnter_Vector-0x12f46c>
     b25:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     b2c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     b2f:	73 73                	jae    ba4 <sysEnter_Vector-0x12f45c>
     b31:	2f                   	das    
     b32:	6c                   	ins    BYTE PTR es:[edi],dx
     b33:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b3a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b40:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b46:	78 2d                	js     b75 <sysEnter_Vector-0x12f48b>
     b48:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b4a:	75 2f                	jne    b7b <sysEnter_Vector-0x12f485>
     b4c:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b51:	2f                   	das    
     b52:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b59:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b5c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b60:	65 00 00             	add    BYTE PTR gs:[eax],al
     b63:	6d                   	ins    DWORD PTR es:[edi],dx
     b64:	65                   	gs
     b65:	6d                   	ins    DWORD PTR es:[edi],dx
     b66:	73 65                	jae    bcd <sysEnter_Vector-0x12f433>
     b68:	74 2e                	je     b98 <sysEnter_Vector-0x12f468>
     b6a:	63 00                	arpl   WORD PTR [eax],ax
     b6c:	01 00                	add    DWORD PTR [eax],eax
     b6e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b71:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b78:	63 
     b79:	2e                   	cs
     b7a:	68 00 02 00 00       	push   0x200
     b7f:	73 74                	jae    bf5 <sysEnter_Vector-0x12f40b>
     b81:	64                   	fs
     b82:	64                   	fs
     b83:	65                   	gs
     b84:	66                   	data16
     b85:	2e                   	cs
     b86:	68 00 02 00 00       	push   0x200
     b8b:	74 69                	je     bf6 <sysEnter_Vector-0x12f40a>
     b8d:	6d                   	ins    DWORD PTR es:[edi],dx
     b8e:	65                   	gs
     b8f:	2e                   	cs
     b90:	68 00 03 00 00       	push   0x300
     b95:	6d                   	ins    DWORD PTR es:[edi],dx
     b96:	61                   	popa   
     b97:	6c                   	ins    BYTE PTR es:[edi],dx
     b98:	6c                   	ins    BYTE PTR es:[edi],dx
     b99:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b9a:	63 2e                	arpl   WORD PTR [esi],bp
     b9c:	68 00 03 00 00       	push   0x300
     ba1:	6c                   	ins    BYTE PTR es:[edi],dx
     ba2:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     ba9:	4f                   	dec    edi
     baa:	53                   	push   ebx
     bab:	2e                   	cs
     bac:	68 00 03 00 00       	push   0x300
     bb1:	00 00                	add    BYTE PTR [eax],al
     bb3:	05 02 2c 11 00       	add    eax,0x112c02
     bb8:	30 1a                	xor    BYTE PTR [edx],bl
     bba:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     bc1:	ca 9f 2f             	retf   0x2f9f
     bc4:	d5 bd                	aad    0xbd
     bc6:	9f                   	lahf   
     bc7:	2f                   	das    
     bc8:	f1                   	icebp  
     bc9:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     bce:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     bd5:	ca 9f 2f             	retf   0x2f9f
     bd8:	d5 bd                	aad    0xbd
     bda:	9f                   	lahf   
     bdb:	2f                   	das    
     bdc:	f1                   	icebp  
     bdd:	bf d5 cb 3d 02       	mov    edi,0x23dcbd5
     be2:	02 00                	add    al,BYTE PTR [eax]
     be4:	01 01                	add    DWORD PTR [ecx],eax
     be6:	c9                   	leave  
     be7:	00 00                	add    BYTE PTR [eax],al
     be9:	00 02                	add    BYTE PTR [edx],al
     beb:	00 b3 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dh
     bf1:	01 fb                	add    ebx,edi
     bf3:	0e                   	push   cs
     bf4:	0d 00 01 01 01       	or     eax,0x1010100
     bf9:	01 00                	add    DWORD PTR [eax],eax
     bfb:	00 00                	add    BYTE PTR [eax],al
     bfd:	01 00                	add    DWORD PTR [eax],eax
     bff:	00 01                	add    BYTE PTR [ecx],al
     c01:	73 72                	jae    c75 <sysEnter_Vector-0x12f38b>
     c03:	63 00                	arpl   WORD PTR [eax],ax
     c05:	2f                   	das    
     c06:	68 6f 6d 65 2f       	push   0x2f656d6f
     c0b:	79 6f                	jns    c7c <sysEnter_Vector-0x12f384>
     c0d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     c14:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     c17:	73 73                	jae    c8c <sysEnter_Vector-0x12f374>
     c19:	2f                   	das    
     c1a:	6c                   	ins    BYTE PTR es:[edi],dx
     c1b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     c22:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     c28:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     c2e:	78 2d                	js     c5d <sysEnter_Vector-0x12f3a3>
     c30:	67 6e                	outs   dx,BYTE PTR ds:[si]
     c32:	75 2f                	jne    c63 <sysEnter_Vector-0x12f39d>
     c34:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c39:	2f                   	das    
     c3a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c41:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c44:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c48:	65 00 00             	add    BYTE PTR gs:[eax],al
     c4b:	6d                   	ins    DWORD PTR es:[edi],dx
     c4c:	6d                   	ins    DWORD PTR es:[edi],dx
     c4d:	61                   	popa   
     c4e:	70 2e                	jo     c7e <sysEnter_Vector-0x12f382>
     c50:	63 00                	arpl   WORD PTR [eax],ax
     c52:	01 00                	add    DWORD PTR [eax],eax
     c54:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c57:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c5e:	63 
     c5f:	2e                   	cs
     c60:	68 00 02 00 00       	push   0x200
     c65:	73 74                	jae    cdb <sysEnter_Vector-0x12f325>
     c67:	64                   	fs
     c68:	64                   	fs
     c69:	65                   	gs
     c6a:	66                   	data16
     c6b:	2e                   	cs
     c6c:	68 00 02 00 00       	push   0x200
     c71:	74 69                	je     cdc <sysEnter_Vector-0x12f324>
     c73:	6d                   	ins    DWORD PTR es:[edi],dx
     c74:	65                   	gs
     c75:	2e                   	cs
     c76:	68 00 03 00 00       	push   0x300
     c7b:	74 79                	je     cf6 <sysEnter_Vector-0x12f30a>
     c7d:	70 65                	jo     ce4 <sysEnter_Vector-0x12f31c>
     c7f:	73 2e                	jae    caf <sysEnter_Vector-0x12f351>
     c81:	68 00 03 00 00       	push   0x300
     c86:	6d                   	ins    DWORD PTR es:[edi],dx
     c87:	61                   	popa   
     c88:	6c                   	ins    BYTE PTR es:[edi],dx
     c89:	6c                   	ins    BYTE PTR es:[edi],dx
     c8a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c8b:	63 2e                	arpl   WORD PTR [esi],bp
     c8d:	68 00 03 00 00       	push   0x300
     c92:	6c                   	ins    BYTE PTR es:[edi],dx
     c93:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c9a:	4f                   	dec    edi
     c9b:	53                   	push   ebx
     c9c:	2e                   	cs
     c9d:	68 00 03 00 00       	push   0x300
     ca2:	00 00                	add    BYTE PTR [eax],al
     ca4:	05 02 bc 12 00       	add    eax,0x12bc02
     ca9:	30 03                	xor    BYTE PTR [ebx],al
     cab:	09 01                	or     DWORD PTR [ecx],eax
     cad:	ca 02 03             	retf   0x302
     cb0:	00 01                	add    BYTE PTR [ecx],al
     cb2:	01 4f 01             	add    DWORD PTR [edi+0x1],ecx
     cb5:	00 00                	add    BYTE PTR [eax],al
     cb7:	02 00                	add    al,BYTE PTR [eax]
     cb9:	e2 00                	loop   cbb <sysEnter_Vector-0x12f345>
     cbb:	00 00                	add    BYTE PTR [eax],al
     cbd:	01 01                	add    DWORD PTR [ecx],eax
     cbf:	fb                   	sti    
     cc0:	0e                   	push   cs
     cc1:	0d 00 01 01 01       	or     eax,0x1010100
     cc6:	01 00                	add    DWORD PTR [eax],eax
     cc8:	00 00                	add    BYTE PTR [eax],al
     cca:	01 00                	add    DWORD PTR [eax],eax
     ccc:	00 01                	add    BYTE PTR [ecx],al
     cce:	73 72                	jae    d42 <sysEnter_Vector-0x12f2be>
     cd0:	63 00                	arpl   WORD PTR [eax],ax
     cd2:	2f                   	das    
     cd3:	68 6f 6d 65 2f       	push   0x2f656d6f
     cd8:	79 6f                	jns    d49 <sysEnter_Vector-0x12f2b7>
     cda:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ce1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ce4:	73 73                	jae    d59 <sysEnter_Vector-0x12f2a7>
     ce6:	2f                   	das    
     ce7:	6c                   	ins    BYTE PTR es:[edi],dx
     ce8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     cef:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     cf5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     cfb:	78 2d                	js     d2a <sysEnter_Vector-0x12f2d6>
     cfd:	67 6e                	outs   dx,BYTE PTR ds:[si]
     cff:	75 2f                	jne    d30 <sysEnter_Vector-0x12f2d0>
     d01:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d06:	2f                   	das    
     d07:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d0e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d11:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d15:	65 00 2e             	add    BYTE PTR gs:[esi],ch
     d18:	2e                   	cs
     d19:	2f                   	das    
     d1a:	2e                   	cs
     d1b:	2e                   	cs
     d1c:	2f                   	das    
     d1d:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     d21:	6a 2f                	push   0x2f
     d23:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     d26:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     d2d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d2e:	65                   	gs
     d2f:	6c                   	ins    BYTE PTR es:[edi],dx
     d30:	2f                   	das    
     d31:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d38:	00 00                	add    BYTE PTR [eax],al
     d3a:	73 74                	jae    db0 <sysEnter_Vector-0x12f250>
     d3c:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
     d43:	00 
     d44:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d47:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d4e:	63 
     d4f:	2e                   	cs
     d50:	68 00 02 00 00       	push   0x200
     d55:	73 74                	jae    dcb <sysEnter_Vector-0x12f235>
     d57:	64                   	fs
     d58:	64                   	fs
     d59:	65                   	gs
     d5a:	66                   	data16
     d5b:	2e                   	cs
     d5c:	68 00 02 00 00       	push   0x200
     d61:	74 69                	je     dcc <sysEnter_Vector-0x12f234>
     d63:	6d                   	ins    DWORD PTR es:[edi],dx
     d64:	65                   	gs
     d65:	2e                   	cs
     d66:	68 00 03 00 00       	push   0x300
     d6b:	64                   	fs
     d6c:	6c                   	ins    BYTE PTR es:[edi],dx
     d6d:	6c                   	ins    BYTE PTR es:[edi],dx
     d6e:	69 73 74 2e 68 00 04 	imul   esi,DWORD PTR [ebx+0x74],0x400682e
     d75:	00 00                	add    BYTE PTR [eax],al
     d77:	73 74                	jae    ded <sysEnter_Vector-0x12f213>
     d79:	64 69 6f 2e 68 00 03 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x30068
     d80:	00 
     d81:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     d84:	6c                   	ins    BYTE PTR es:[edi],dx
     d85:	6c                   	ins    BYTE PTR es:[edi],dx
     d86:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d87:	63 2e                	arpl   WORD PTR [esi],bp
     d89:	68 00 03 00 00       	push   0x300
     d8e:	6c                   	ins    BYTE PTR es:[edi],dx
     d8f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     d96:	4f                   	dec    edi
     d97:	53                   	push   ebx
     d98:	2e                   	cs
     d99:	68 00 03 00 00       	push   0x300
     d9e:	00 00                	add    BYTE PTR [eax],al
     da0:	05 02 cc 12 00       	add    eax,0x12cc02
     da5:	30 03                	xor    BYTE PTR [ebx],al
     da7:	12 01                	adc    al,BYTE PTR [ecx]
     da9:	08 13                	or     BYTE PTR [ebx],dl
     dab:	08 59 5b             	or     BYTE PTR [ecx+0x5b],bl
     dae:	08 13                	or     BYTE PTR [ebx],dl
     db0:	f3 5b                	repz pop ebx
     db2:	08 23                	or     BYTE PTR [ebx],ah
     db4:	77 08                	ja     dbe <sysEnter_Vector-0x12f242>
     db6:	30 08                	xor    BYTE PTR [eax],cl
     db8:	21 08                	and    DWORD PTR [eax],ecx
     dba:	23 d7                	and    edx,edi
     dbc:	d9 91 e5 08 72 00    	fst    DWORD PTR [ecx+0x7208e5]
     dc2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     dc5:	06                   	push   es
     dc6:	4a                   	dec    edx
     dc7:	06                   	push   es
     dc8:	86 21                	xchg   BYTE PTR [ecx],ah
     dca:	d7                   	xlat   BYTE PTR ds:[ebx]
     dcb:	91                   	xchg   ecx,eax
     dcc:	e5 08                	in     eax,0x8
     dce:	72 00                	jb     dd0 <sysEnter_Vector-0x12f230>
     dd0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     dd3:	06                   	push   es
     dd4:	4a                   	dec    edx
     dd5:	06                   	push   es
     dd6:	86 21                	xchg   BYTE PTR [ecx],ah
     dd8:	d7                   	xlat   BYTE PTR ds:[ebx]
     dd9:	00 02                	add    BYTE PTR [edx],al
     ddb:	04 03                	add    al,0x3
     ddd:	83 00 02             	add    DWORD PTR [eax],0x2
     de0:	04 03                	add    al,0x3
     de2:	d5 00                	aad    0x0
     de4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     de7:	06                   	push   es
     de8:	4a                   	dec    edx
     de9:	06                   	push   es
     dea:	69 e6 21 5c 08 22    	imul   esp,esi,0x22085c21
     df0:	76 08                	jbe    dfa <sysEnter_Vector-0x12f206>
     df2:	31 d7                	xor    edi,edx
     df4:	d7                   	xlat   BYTE PTR ds:[ebx]
     df5:	d7                   	xlat   BYTE PTR ds:[ebx]
     df6:	d7                   	xlat   BYTE PTR ds:[ebx]
     df7:	ad                   	lods   eax,DWORD PTR ds:[esi]
     df8:	e6 21                	out    0x21,al
     dfa:	5b                   	pop    ebx
     dfb:	c9                   	leave  
     dfc:	e5 d7                	in     eax,0xd7
     dfe:	e5 08                	in     eax,0x8
     e00:	67 02 03             	add    al,BYTE PTR [bp+di]
     e03:	00 01                	add    BYTE PTR [ecx],al
     e05:	01 d6                	add    esi,edx
     e07:	00 00                	add    BYTE PTR [eax],al
     e09:	00 02                	add    BYTE PTR [edx],al
     e0b:	00 a6 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ah
     e11:	01 fb                	add    ebx,edi
     e13:	0e                   	push   cs
     e14:	0d 00 01 01 01       	or     eax,0x1010100
     e19:	01 00                	add    DWORD PTR [eax],eax
     e1b:	00 00                	add    BYTE PTR [eax],al
     e1d:	01 00                	add    DWORD PTR [eax],eax
     e1f:	00 01                	add    BYTE PTR [ecx],al
     e21:	73 72                	jae    e95 <sysEnter_Vector-0x12f16b>
     e23:	63 2f                	arpl   WORD PTR [edi],bp
     e25:	73 74                	jae    e9b <sysEnter_Vector-0x12f165>
     e27:	72 69                	jb     e92 <sysEnter_Vector-0x12f16e>
     e29:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e2a:	67 73 00             	addr16 jae e2d <sysEnter_Vector-0x12f1d3>
     e2d:	2f                   	das    
     e2e:	68 6f 6d 65 2f       	push   0x2f656d6f
     e33:	79 6f                	jns    ea4 <sysEnter_Vector-0x12f15c>
     e35:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e3c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e3f:	73 73                	jae    eb4 <sysEnter_Vector-0x12f14c>
     e41:	2f                   	das    
     e42:	6c                   	ins    BYTE PTR es:[edi],dx
     e43:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e4a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e50:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     e56:	78 2d                	js     e85 <sysEnter_Vector-0x12f17b>
     e58:	67 6e                	outs   dx,BYTE PTR ds:[si]
     e5a:	75 2f                	jne    e8b <sysEnter_Vector-0x12f175>
     e5c:	35 2e 33 2e 30       	xor    eax,0x302e332e
     e61:	2f                   	das    
     e62:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e69:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     e6c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     e70:	65 00 00             	add    BYTE PTR gs:[eax],al
     e73:	73 74                	jae    ee9 <sysEnter_Vector-0x12f117>
     e75:	72 63                	jb     eda <sysEnter_Vector-0x12f126>
     e77:	61                   	popa   
     e78:	74 2e                	je     ea8 <sysEnter_Vector-0x12f158>
     e7a:	63 00                	arpl   WORD PTR [eax],ax
     e7c:	01 00                	add    DWORD PTR [eax],eax
     e7e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e81:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     e88:	63 
     e89:	2e                   	cs
     e8a:	68 00 02 00 00       	push   0x200
     e8f:	74 69                	je     efa <sysEnter_Vector-0x12f106>
     e91:	6d                   	ins    DWORD PTR es:[edi],dx
     e92:	65                   	gs
     e93:	2e                   	cs
     e94:	68 00 03 00 00       	push   0x300
     e99:	6d                   	ins    DWORD PTR es:[edi],dx
     e9a:	61                   	popa   
     e9b:	6c                   	ins    BYTE PTR es:[edi],dx
     e9c:	6c                   	ins    BYTE PTR es:[edi],dx
     e9d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e9e:	63 2e                	arpl   WORD PTR [esi],bp
     ea0:	68 00 03 00 00       	push   0x300
     ea5:	6c                   	ins    BYTE PTR es:[edi],dx
     ea6:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     ead:	4f                   	dec    edi
     eae:	53                   	push   ebx
     eaf:	2e                   	cs
     eb0:	68 00 03 00 00       	push   0x300
     eb5:	00 00                	add    BYTE PTR [eax],al
     eb7:	05 02 2c 15 00       	add    eax,0x152c02
     ebc:	30 03                	xor    BYTE PTR [ebx],al
     ebe:	1d 01 08 21 02       	sbb    eax,0x2210801
     ec3:	24 13                	and    al,0x13
     ec5:	3d 5b 08 21 02       	cmp    eax,0x221085b
     eca:	24 13                	and    al,0x13
     ecc:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
     ed1:	49                   	dec    ecx
     ed2:	e8 76 2f 08 4b       	call   4b083e4d <ticksToWait+0x1b07fb11>
     ed7:	4b                   	dec    ebx
     ed8:	47                   	inc    edi
     ed9:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
     ee0:	c5 00                	lds    eax,FWORD PTR [eax]
     ee2:	00 00                	add    BYTE PTR [eax],al
     ee4:	02 00                	add    al,BYTE PTR [eax]
     ee6:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     ee7:	00 00                	add    BYTE PTR [eax],al
     ee9:	00 01                	add    BYTE PTR [ecx],al
     eeb:	01 fb                	add    ebx,edi
     eed:	0e                   	push   cs
     eee:	0d 00 01 01 01       	or     eax,0x1010100
     ef3:	01 00                	add    DWORD PTR [eax],eax
     ef5:	00 00                	add    BYTE PTR [eax],al
     ef7:	01 00                	add    DWORD PTR [eax],eax
     ef9:	00 01                	add    BYTE PTR [ecx],al
     efb:	73 72                	jae    f6f <sysEnter_Vector-0x12f091>
     efd:	63 2f                	arpl   WORD PTR [edi],bp
     eff:	73 74                	jae    f75 <sysEnter_Vector-0x12f08b>
     f01:	72 69                	jb     f6c <sysEnter_Vector-0x12f094>
     f03:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f04:	67 73 00             	addr16 jae f07 <sysEnter_Vector-0x12f0f9>
     f07:	2f                   	das    
     f08:	68 6f 6d 65 2f       	push   0x2f656d6f
     f0d:	79 6f                	jns    f7e <sysEnter_Vector-0x12f082>
     f0f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f16:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f19:	73 73                	jae    f8e <sysEnter_Vector-0x12f072>
     f1b:	2f                   	das    
     f1c:	6c                   	ins    BYTE PTR es:[edi],dx
     f1d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f24:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f2a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f30:	78 2d                	js     f5f <sysEnter_Vector-0x12f0a1>
     f32:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f34:	75 2f                	jne    f65 <sysEnter_Vector-0x12f09b>
     f36:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f3b:	2f                   	das    
     f3c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f43:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     f46:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f4a:	65 00 00             	add    BYTE PTR gs:[eax],al
     f4d:	73 74                	jae    fc3 <sysEnter_Vector-0x12f03d>
     f4f:	72 63                	jb     fb4 <sysEnter_Vector-0x12f04c>
     f51:	6d                   	ins    DWORD PTR es:[edi],dx
     f52:	70 2e                	jo     f82 <sysEnter_Vector-0x12f07e>
     f54:	63 00                	arpl   WORD PTR [eax],ax
     f56:	01 00                	add    DWORD PTR [eax],eax
     f58:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f5b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f62:	63 
     f63:	2e                   	cs
     f64:	68 00 02 00 00       	push   0x200
     f69:	74 69                	je     fd4 <sysEnter_Vector-0x12f02c>
     f6b:	6d                   	ins    DWORD PTR es:[edi],dx
     f6c:	65                   	gs
     f6d:	2e                   	cs
     f6e:	68 00 03 00 00       	push   0x300
     f73:	6d                   	ins    DWORD PTR es:[edi],dx
     f74:	61                   	popa   
     f75:	6c                   	ins    BYTE PTR es:[edi],dx
     f76:	6c                   	ins    BYTE PTR es:[edi],dx
     f77:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f78:	63 2e                	arpl   WORD PTR [esi],bp
     f7a:	68 00 03 00 00       	push   0x300
     f7f:	6c                   	ins    BYTE PTR es:[edi],dx
     f80:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     f87:	4f                   	dec    edi
     f88:	53                   	push   ebx
     f89:	2e                   	cs
     f8a:	68 00 03 00 00       	push   0x300
     f8f:	00 00                	add    BYTE PTR [eax],al
     f91:	05 02 18 16 00       	add    eax,0x161802
     f96:	30 03                	xor    BYTE PTR [ebx],al
     f98:	18 01                	sbb    BYTE PTR [ecx],al
     f9a:	08 21                	or     BYTE PTR [ecx],ah
     f9c:	3d 41 ad ad 67       	cmp    eax,0x67adad41
     fa1:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
     fa7:	01 01                	add    DWORD PTR [ecx],eax
     fa9:	e6 00                	out    0x0,al
     fab:	00 00                	add    BYTE PTR [eax],al
     fad:	02 00                	add    al,BYTE PTR [eax]
     faf:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     fb0:	00 00                	add    BYTE PTR [eax],al
     fb2:	00 01                	add    BYTE PTR [ecx],al
     fb4:	01 fb                	add    ebx,edi
     fb6:	0e                   	push   cs
     fb7:	0d 00 01 01 01       	or     eax,0x1010100
     fbc:	01 00                	add    DWORD PTR [eax],eax
     fbe:	00 00                	add    BYTE PTR [eax],al
     fc0:	01 00                	add    DWORD PTR [eax],eax
     fc2:	00 01                	add    BYTE PTR [ecx],al
     fc4:	73 72                	jae    1038 <sysEnter_Vector-0x12efc8>
     fc6:	63 2f                	arpl   WORD PTR [edi],bp
     fc8:	73 74                	jae    103e <sysEnter_Vector-0x12efc2>
     fca:	72 69                	jb     1035 <sysEnter_Vector-0x12efcb>
     fcc:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fcd:	67 73 00             	addr16 jae fd0 <sysEnter_Vector-0x12f030>
     fd0:	2f                   	das    
     fd1:	68 6f 6d 65 2f       	push   0x2f656d6f
     fd6:	79 6f                	jns    1047 <sysEnter_Vector-0x12efb9>
     fd8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     fdf:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     fe2:	73 73                	jae    1057 <sysEnter_Vector-0x12efa9>
     fe4:	2f                   	das    
     fe5:	6c                   	ins    BYTE PTR es:[edi],dx
     fe6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     fed:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ff3:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     ff9:	78 2d                	js     1028 <sysEnter_Vector-0x12efd8>
     ffb:	67 6e                	outs   dx,BYTE PTR ds:[si]
     ffd:	75 2f                	jne    102e <sysEnter_Vector-0x12efd2>
     fff:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1004:	2f                   	das    
    1005:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    100c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    100f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1013:	65 00 00             	add    BYTE PTR gs:[eax],al
    1016:	73 74                	jae    108c <sysEnter_Vector-0x12ef74>
    1018:	72 63                	jb     107d <sysEnter_Vector-0x12ef83>
    101a:	70 79                	jo     1095 <sysEnter_Vector-0x12ef6b>
    101c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    101f:	01 00                	add    DWORD PTR [eax],eax
    1021:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1024:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    102b:	63 
    102c:	2e                   	cs
    102d:	68 00 02 00 00       	push   0x200
    1032:	74 69                	je     109d <sysEnter_Vector-0x12ef63>
    1034:	6d                   	ins    DWORD PTR es:[edi],dx
    1035:	65                   	gs
    1036:	2e                   	cs
    1037:	68 00 03 00 00       	push   0x300
    103c:	6d                   	ins    DWORD PTR es:[edi],dx
    103d:	61                   	popa   
    103e:	6c                   	ins    BYTE PTR es:[edi],dx
    103f:	6c                   	ins    BYTE PTR es:[edi],dx
    1040:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1041:	63 2e                	arpl   WORD PTR [esi],bp
    1043:	68 00 03 00 00       	push   0x300
    1048:	6c                   	ins    BYTE PTR es:[edi],dx
    1049:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1050:	4f                   	dec    edi
    1051:	53                   	push   ebx
    1052:	2e                   	cs
    1053:	68 00 03 00 00       	push   0x300
    1058:	00 00                	add    BYTE PTR [eax],al
    105a:	05 02 78 16 00       	add    eax,0x167802
    105f:	30 16                	xor    BYTE PTR [esi],dl
    1061:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    1065:	04 01                	add    al,0x1
    1067:	06                   	push   es
    1068:	20 06                	and    BYTE PTR [esi],al
    106a:	08 ca                	or     dl,cl
    106c:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1072:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1075:	06                   	push   es
    1076:	20 06                	and    BYTE PTR [esi],al
    1078:	08 ca                	or     dl,cl
    107a:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1080:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1083:	06                   	push   es
    1084:	20 00                	and    BYTE PTR [eax],al
    1086:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1089:	08 c8                	or     al,cl
    108b:	06                   	push   es
    108c:	ca 3d 02             	retf   0x23d
    108f:	02 00                	add    al,BYTE PTR [eax]
    1091:	01 01                	add    DWORD PTR [ecx],eax
    1093:	d5 00                	aad    0x0
    1095:	00 00                	add    BYTE PTR [eax],al
    1097:	02 00                	add    al,BYTE PTR [eax]
    1099:	a8 00                	test   al,0x0
    109b:	00 00                	add    BYTE PTR [eax],al
    109d:	01 01                	add    DWORD PTR [ecx],eax
    109f:	fb                   	sti    
    10a0:	0e                   	push   cs
    10a1:	0d 00 01 01 01       	or     eax,0x1010100
    10a6:	01 00                	add    DWORD PTR [eax],eax
    10a8:	00 00                	add    BYTE PTR [eax],al
    10aa:	01 00                	add    DWORD PTR [eax],eax
    10ac:	00 01                	add    BYTE PTR [ecx],al
    10ae:	73 72                	jae    1122 <sysEnter_Vector-0x12eede>
    10b0:	63 2f                	arpl   WORD PTR [edi],bp
    10b2:	73 74                	jae    1128 <sysEnter_Vector-0x12eed8>
    10b4:	72 69                	jb     111f <sysEnter_Vector-0x12eee1>
    10b6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10b7:	67 73 00             	addr16 jae 10ba <sysEnter_Vector-0x12ef46>
    10ba:	2f                   	das    
    10bb:	68 6f 6d 65 2f       	push   0x2f656d6f
    10c0:	79 6f                	jns    1131 <sysEnter_Vector-0x12eecf>
    10c2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    10c9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    10cc:	73 73                	jae    1141 <sysEnter_Vector-0x12eebf>
    10ce:	2f                   	das    
    10cf:	6c                   	ins    BYTE PTR es:[edi],dx
    10d0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    10d7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    10dd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    10e3:	78 2d                	js     1112 <sysEnter_Vector-0x12eeee>
    10e5:	67 6e                	outs   dx,BYTE PTR ds:[si]
    10e7:	75 2f                	jne    1118 <sysEnter_Vector-0x12eee8>
    10e9:	35 2e 33 2e 30       	xor    eax,0x302e332e
    10ee:	2f                   	das    
    10ef:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10f6:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    10f9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    10fd:	65 00 00             	add    BYTE PTR gs:[eax],al
    1100:	73 74                	jae    1176 <sysEnter_Vector-0x12ee8a>
    1102:	72 69                	jb     116d <sysEnter_Vector-0x12ee93>
    1104:	73 6e                	jae    1174 <sysEnter_Vector-0x12ee8c>
    1106:	75 6d                	jne    1175 <sysEnter_Vector-0x12ee8b>
    1108:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    110b:	01 00                	add    DWORD PTR [eax],eax
    110d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1110:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1117:	63 
    1118:	2e                   	cs
    1119:	68 00 02 00 00       	push   0x200
    111e:	74 69                	je     1189 <sysEnter_Vector-0x12ee77>
    1120:	6d                   	ins    DWORD PTR es:[edi],dx
    1121:	65                   	gs
    1122:	2e                   	cs
    1123:	68 00 03 00 00       	push   0x300
    1128:	6d                   	ins    DWORD PTR es:[edi],dx
    1129:	61                   	popa   
    112a:	6c                   	ins    BYTE PTR es:[edi],dx
    112b:	6c                   	ins    BYTE PTR es:[edi],dx
    112c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    112d:	63 2e                	arpl   WORD PTR [esi],bp
    112f:	68 00 03 00 00       	push   0x300
    1134:	6c                   	ins    BYTE PTR es:[edi],dx
    1135:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    113c:	4f                   	dec    edi
    113d:	53                   	push   ebx
    113e:	2e                   	cs
    113f:	68 00 03 00 00       	push   0x300
    1144:	00 00                	add    BYTE PTR [eax],al
    1146:	05 02 40 17 00       	add    eax,0x174002
    114b:	30 1a                	xor    BYTE PTR [edx],bl
    114d:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1150:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1153:	06                   	push   es
    1154:	66                   	data16
    1155:	00 02                	add    BYTE PTR [edx],al
    1157:	04 02                	add    al,0x2
    1159:	66 06                	pushw  es
    115b:	75 59                	jne    11b6 <sysEnter_Vector-0x12ee4a>
    115d:	31 f3                	xor    ebx,esi
    115f:	76 2f                	jbe    1190 <sysEnter_Vector-0x12ee70>
    1161:	08 e5                	or     ch,ah
    1163:	72 08                	jb     116d <sysEnter_Vector-0x12ee93>
    1165:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    1168:	02 00                	add    al,BYTE PTR [eax]
    116a:	01 01                	add    DWORD PTR [ecx],eax
    116c:	94                   	xchg   esp,eax
    116d:	00 00                	add    BYTE PTR [eax],al
    116f:	00 02                	add    BYTE PTR [edx],al
    1171:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
    1175:	00 01                	add    BYTE PTR [ecx],al
    1177:	01 fb                	add    ebx,edi
    1179:	0e                   	push   cs
    117a:	0d 00 01 01 01       	or     eax,0x1010100
    117f:	01 00                	add    DWORD PTR [eax],eax
    1181:	00 00                	add    BYTE PTR [eax],al
    1183:	01 00                	add    DWORD PTR [eax],eax
    1185:	00 01                	add    BYTE PTR [ecx],al
    1187:	73 72                	jae    11fb <sysEnter_Vector-0x12ee05>
    1189:	63 2f                	arpl   WORD PTR [edi],bp
    118b:	73 74                	jae    1201 <sysEnter_Vector-0x12edff>
    118d:	72 69                	jb     11f8 <sysEnter_Vector-0x12ee08>
    118f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1190:	67 73 00             	addr16 jae 1193 <sysEnter_Vector-0x12ee6d>
    1193:	2f                   	das    
    1194:	68 6f 6d 65 2f       	push   0x2f656d6f
    1199:	79 6f                	jns    120a <sysEnter_Vector-0x12edf6>
    119b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11a2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11a5:	73 73                	jae    121a <sysEnter_Vector-0x12ede6>
    11a7:	2f                   	das    
    11a8:	6c                   	ins    BYTE PTR es:[edi],dx
    11a9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11b0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11b6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    11bc:	78 2d                	js     11eb <sysEnter_Vector-0x12ee15>
    11be:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11c0:	75 2f                	jne    11f1 <sysEnter_Vector-0x12ee0f>
    11c2:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11c7:	2f                   	das    
    11c8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11cf:	00 00                	add    BYTE PTR [eax],al
    11d1:	73 74                	jae    1247 <sysEnter_Vector-0x12edb9>
    11d3:	72 6c                	jb     1241 <sysEnter_Vector-0x12edbf>
    11d5:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    11d7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    11da:	01 00                	add    DWORD PTR [eax],eax
    11dc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    11df:	64                   	fs
    11e0:	64                   	fs
    11e1:	65                   	gs
    11e2:	66                   	data16
    11e3:	2e                   	cs
    11e4:	68 00 02 00 00       	push   0x200
    11e9:	00 00                	add    BYTE PTR [eax],al
    11eb:	05 02 cc 17 00       	add    eax,0x17cc02
    11f0:	30 14 f3             	xor    BYTE PTR [ebx+esi*8],dl
    11f3:	75 2f                	jne    1224 <sysEnter_Vector-0x12eddc>
    11f5:	49                   	dec    ecx
    11f6:	e6 3d                	out    0x3d,al
    11f8:	30 f3                	xor    bl,dh
    11fa:	75 2f                	jne    122b <sysEnter_Vector-0x12edd5>
    11fc:	49                   	dec    ecx
    11fd:	e6 3d                	out    0x3d,al
    11ff:	02 02                	add    al,BYTE PTR [edx]
    1201:	00 01                	add    BYTE PTR [ecx],al
    1203:	01 c1                	add    ecx,eax
    1205:	00 00                	add    BYTE PTR [eax],al
    1207:	00 02                	add    BYTE PTR [edx],al
    1209:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    120c:	00 00                	add    BYTE PTR [eax],al
    120e:	01 01                	add    DWORD PTR [ecx],eax
    1210:	fb                   	sti    
    1211:	0e                   	push   cs
    1212:	0d 00 01 01 01       	or     eax,0x1010100
    1217:	01 00                	add    DWORD PTR [eax],eax
    1219:	00 00                	add    BYTE PTR [eax],al
    121b:	01 00                	add    DWORD PTR [eax],eax
    121d:	00 01                	add    BYTE PTR [ecx],al
    121f:	73 72                	jae    1293 <sysEnter_Vector-0x12ed6d>
    1221:	63 2f                	arpl   WORD PTR [edi],bp
    1223:	73 74                	jae    1299 <sysEnter_Vector-0x12ed67>
    1225:	72 69                	jb     1290 <sysEnter_Vector-0x12ed70>
    1227:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1228:	67 73 00             	addr16 jae 122b <sysEnter_Vector-0x12edd5>
    122b:	2f                   	das    
    122c:	68 6f 6d 65 2f       	push   0x2f656d6f
    1231:	79 6f                	jns    12a2 <sysEnter_Vector-0x12ed5e>
    1233:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    123a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    123d:	73 73                	jae    12b2 <sysEnter_Vector-0x12ed4e>
    123f:	2f                   	das    
    1240:	6c                   	ins    BYTE PTR es:[edi],dx
    1241:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1248:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    124e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1254:	78 2d                	js     1283 <sysEnter_Vector-0x12ed7d>
    1256:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1258:	75 2f                	jne    1289 <sysEnter_Vector-0x12ed77>
    125a:	35 2e 33 2e 30       	xor    eax,0x302e332e
    125f:	2f                   	das    
    1260:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1267:	00 00                	add    BYTE PTR [eax],al
    1269:	73 74                	jae    12df <sysEnter_Vector-0x12ed21>
    126b:	72 6e                	jb     12db <sysEnter_Vector-0x12ed25>
    126d:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1270:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1273:	01 00                	add    DWORD PTR [eax],eax
    1275:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1278:	64                   	fs
    1279:	64                   	fs
    127a:	65                   	gs
    127b:	66                   	data16
    127c:	2e                   	cs
    127d:	68 00 02 00 00       	push   0x200
    1282:	00 00                	add    BYTE PTR [eax],al
    1284:	05 02 30 18 00       	add    eax,0x183002
    1289:	30 03                	xor    BYTE PTR [ebx],al
    128b:	0c 01                	or     al,0x1
    128d:	c9                   	leave  
    128e:	2f                   	das    
    128f:	f3 00 02             	repz add BYTE PTR [edx],al
    1292:	04 01                	add    al,0x1
    1294:	06                   	push   es
    1295:	f2 00 02             	repnz add BYTE PTR [edx],al
    1298:	04 02                	add    al,0x2
    129a:	74 06                	je     12a2 <sysEnter_Vector-0x12ed5e>
    129c:	75 9f                	jne    123d <sysEnter_Vector-0x12edc3>
    129e:	70 00                	jo     12a0 <sysEnter_Vector-0x12ed60>
    12a0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12a3:	06                   	push   es
    12a4:	ba 06 6b 59 31       	mov    edx,0x31596b06
    12a9:	c9                   	leave  
    12aa:	2f                   	das    
    12ab:	f3 00 02             	repz add BYTE PTR [edx],al
    12ae:	04 01                	add    al,0x1
    12b0:	06                   	push   es
    12b1:	f2 00 02             	repnz add BYTE PTR [edx],al
    12b4:	04 02                	add    al,0x2
    12b6:	74 06                	je     12be <sysEnter_Vector-0x12ed42>
    12b8:	75 9f                	jne    1259 <sysEnter_Vector-0x12eda7>
    12ba:	70 00                	jo     12bc <sysEnter_Vector-0x12ed44>
    12bc:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12bf:	06                   	push   es
    12c0:	ba 06 6b 59 02       	mov    edx,0x2596b06
    12c5:	02 00                	add    al,BYTE PTR [eax]
    12c7:	01 01                	add    DWORD PTR [ecx],eax
    12c9:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    12ce:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    12d1:	00 00                	add    BYTE PTR [eax],al
    12d3:	01 01                	add    DWORD PTR [ecx],eax
    12d5:	fb                   	sti    
    12d6:	0e                   	push   cs
    12d7:	0d 00 01 01 01       	or     eax,0x1010100
    12dc:	01 00                	add    DWORD PTR [eax],eax
    12de:	00 00                	add    BYTE PTR [eax],al
    12e0:	01 00                	add    DWORD PTR [eax],eax
    12e2:	00 01                	add    BYTE PTR [ecx],al
    12e4:	73 72                	jae    1358 <sysEnter_Vector-0x12eca8>
    12e6:	63 2f                	arpl   WORD PTR [edi],bp
    12e8:	73 74                	jae    135e <sysEnter_Vector-0x12eca2>
    12ea:	72 69                	jb     1355 <sysEnter_Vector-0x12ecab>
    12ec:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12ed:	67 73 00             	addr16 jae 12f0 <sysEnter_Vector-0x12ed10>
    12f0:	2f                   	das    
    12f1:	68 6f 6d 65 2f       	push   0x2f656d6f
    12f6:	79 6f                	jns    1367 <sysEnter_Vector-0x12ec99>
    12f8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    12ff:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1302:	73 73                	jae    1377 <sysEnter_Vector-0x12ec89>
    1304:	2f                   	das    
    1305:	6c                   	ins    BYTE PTR es:[edi],dx
    1306:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    130d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1313:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1319:	78 2d                	js     1348 <sysEnter_Vector-0x12ecb8>
    131b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    131d:	75 2f                	jne    134e <sysEnter_Vector-0x12ecb2>
    131f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1324:	2f                   	das    
    1325:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    132c:	00 00                	add    BYTE PTR [eax],al
    132e:	73 74                	jae    13a4 <sysEnter_Vector-0x12ec5c>
    1330:	72 6e                	jb     13a0 <sysEnter_Vector-0x12ec60>
    1332:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1335:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1338:	01 00                	add    DWORD PTR [eax],eax
    133a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    133d:	64                   	fs
    133e:	64                   	fs
    133f:	65                   	gs
    1340:	66                   	data16
    1341:	2e                   	cs
    1342:	68 00 02 00 00       	push   0x200
    1347:	00 00                	add    BYTE PTR [eax],al
    1349:	05 02 00 19 00       	add    eax,0x190002
    134e:	30 03                	xor    BYTE PTR [ebx],al
    1350:	0d 01 f3 67 2f       	or     eax,0x2f67f301
    1355:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    1358:	00 02                	add    BYTE PTR [edx],al
    135a:	04 01                	add    al,0x1
    135c:	06                   	push   es
    135d:	66 06                	pushw  es
    135f:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    1364:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    1369:	02 02                	add    al,BYTE PTR [edx]
    136b:	00 01                	add    BYTE PTR [ecx],al
    136d:	01 53 01             	add    DWORD PTR [ebx+0x1],edx
    1370:	00 00                	add    BYTE PTR [eax],al
    1372:	02 00                	add    al,BYTE PTR [eax]
    1374:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1375:	00 00                	add    BYTE PTR [eax],al
    1377:	00 01                	add    BYTE PTR [ecx],al
    1379:	01 fb                	add    ebx,edi
    137b:	0e                   	push   cs
    137c:	0d 00 01 01 01       	or     eax,0x1010100
    1381:	01 00                	add    DWORD PTR [eax],eax
    1383:	00 00                	add    BYTE PTR [eax],al
    1385:	01 00                	add    DWORD PTR [eax],eax
    1387:	00 01                	add    BYTE PTR [ecx],al
    1389:	73 72                	jae    13fd <sysEnter_Vector-0x12ec03>
    138b:	63 2f                	arpl   WORD PTR [edi],bp
    138d:	73 74                	jae    1403 <sysEnter_Vector-0x12ebfd>
    138f:	72 69                	jb     13fa <sysEnter_Vector-0x12ec06>
    1391:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1392:	67 73 00             	addr16 jae 1395 <sysEnter_Vector-0x12ec6b>
    1395:	2f                   	das    
    1396:	68 6f 6d 65 2f       	push   0x2f656d6f
    139b:	79 6f                	jns    140c <sysEnter_Vector-0x12ebf4>
    139d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13a4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13a7:	73 73                	jae    141c <sysEnter_Vector-0x12ebe4>
    13a9:	2f                   	das    
    13aa:	6c                   	ins    BYTE PTR es:[edi],dx
    13ab:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    13b2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    13b8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    13be:	78 2d                	js     13ed <sysEnter_Vector-0x12ec13>
    13c0:	67 6e                	outs   dx,BYTE PTR ds:[si]
    13c2:	75 2f                	jne    13f3 <sysEnter_Vector-0x12ec0d>
    13c4:	35 2e 33 2e 30       	xor    eax,0x302e332e
    13c9:	2f                   	das    
    13ca:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13d1:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    13d4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    13d8:	65 00 00             	add    BYTE PTR gs:[eax],al
    13db:	73 74                	jae    1451 <sysEnter_Vector-0x12ebaf>
    13dd:	72 6f                	jb     144e <sysEnter_Vector-0x12ebb2>
    13df:	75 6c                	jne    144d <sysEnter_Vector-0x12ebb3>
    13e1:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    13e4:	01 00                	add    DWORD PTR [eax],eax
    13e6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    13e9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    13f0:	63 
    13f1:	2e                   	cs
    13f2:	68 00 02 00 00       	push   0x200
    13f7:	74 69                	je     1462 <sysEnter_Vector-0x12eb9e>
    13f9:	6d                   	ins    DWORD PTR es:[edi],dx
    13fa:	65                   	gs
    13fb:	2e                   	cs
    13fc:	68 00 03 00 00       	push   0x300
    1401:	6d                   	ins    DWORD PTR es:[edi],dx
    1402:	61                   	popa   
    1403:	6c                   	ins    BYTE PTR es:[edi],dx
    1404:	6c                   	ins    BYTE PTR es:[edi],dx
    1405:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1406:	63 2e                	arpl   WORD PTR [esi],bp
    1408:	68 00 03 00 00       	push   0x300
    140d:	6c                   	ins    BYTE PTR es:[edi],dx
    140e:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1415:	4f                   	dec    edi
    1416:	53                   	push   ebx
    1417:	2e                   	cs
    1418:	68 00 03 00 00       	push   0x300
    141d:	00 00                	add    BYTE PTR [eax],al
    141f:	05 02 80 19 00       	add    eax,0x198002
    1424:	30 03                	xor    BYTE PTR [ebx],al
    1426:	3b 01                	cmp    eax,DWORD PTR [ecx]
    1428:	08 2f                	or     BYTE PTR [edi],ch
    142a:	40                   	inc    eax
    142b:	00 02                	add    BYTE PTR [edx],al
    142d:	04 01                	add    al,0x1
    142f:	7a 00                	jp     1431 <sysEnter_Vector-0x12ebcf>
    1431:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1434:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1435:	59                   	pop    ecx
    1436:	59                   	pop    ecx
    1437:	75 c9                	jne    1402 <sysEnter_Vector-0x12ebfe>
    1439:	59                   	pop    ecx
    143a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    143b:	00 02                	add    BYTE PTR [edx],al
    143d:	04 02                	add    al,0x2
    143f:	06                   	push   es
    1440:	66                   	data16
    1441:	00 02                	add    BYTE PTR [edx],al
    1443:	04 03                	add    al,0x3
    1445:	66 06                	pushw  es
    1447:	59                   	pop    ecx
    1448:	00 02                	add    BYTE PTR [edx],al
    144a:	04 01                	add    al,0x1
    144c:	06                   	push   es
    144d:	74 06                	je     1455 <sysEnter_Vector-0x12ebab>
    144f:	75 91                	jne    13e2 <sysEnter_Vector-0x12ec1e>
    1451:	3d 76 67 00 02       	cmp    eax,0x2006776
    1456:	04 01                	add    al,0x1
    1458:	06                   	push   es
    1459:	58                   	pop    eax
    145a:	00 02                	add    BYTE PTR [edx],al
    145c:	04 02                	add    al,0x2
    145e:	74 00                	je     1460 <sysEnter_Vector-0x12eba0>
    1460:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1463:	58                   	pop    eax
    1464:	06                   	push   es
    1465:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    146a:	9f                   	lahf   
    146b:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    146f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1472:	06                   	push   es
    1473:	58                   	pop    eax
    1474:	00 02                	add    BYTE PTR [edx],al
    1476:	04 03                	add    al,0x3
    1478:	58                   	pop    eax
    1479:	00 02                	add    BYTE PTR [edx],al
    147b:	04 04                	add    al,0x4
    147d:	74 00                	je     147f <sysEnter_Vector-0x12eb81>
    147f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1482:	58                   	pop    eax
    1483:	06                   	push   es
    1484:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1487:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    148a:	06                   	push   es
    148b:	66                   	data16
    148c:	00 02                	add    BYTE PTR [edx],al
    148e:	04 02                	add    al,0x2
    1490:	58                   	pop    eax
    1491:	00 02                	add    BYTE PTR [edx],al
    1493:	04 03                	add    al,0x3
    1495:	58                   	pop    eax
    1496:	06                   	push   es
    1497:	67 76 59             	addr16 jbe 14f3 <sysEnter_Vector-0x12eb0d>
    149a:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    149e:	03 10                	add    edx,DWORD PTR [eax]
    14a0:	ac                   	lods   al,BYTE PTR ds:[esi]
    14a1:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    14a4:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    14a7:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    14aa:	67 2f                	addr16 das 
    14ac:	67 00 02             	add    BYTE PTR [bp+si],al
    14af:	04 01                	add    al,0x1
    14b1:	06                   	push   es
    14b2:	66                   	data16
    14b3:	00 02                	add    BYTE PTR [edx],al
    14b5:	04 02                	add    al,0x2
    14b7:	58                   	pop    eax
    14b8:	00 02                	add    BYTE PTR [edx],al
    14ba:	04 04                	add    al,0x4
    14bc:	3c 06                	cmp    al,0x6
    14be:	59                   	pop    ecx
    14bf:	2f                   	das    
    14c0:	02 08                	add    cl,BYTE PTR [eax]
    14c2:	00 01                	add    BYTE PTR [ecx],al
    14c4:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    14c7:	00 00                	add    BYTE PTR [eax],al
    14c9:	02 00                	add    al,BYTE PTR [eax]
    14cb:	2d 00 00 00 01       	sub    eax,0x1000000
    14d0:	01 fb                	add    ebx,edi
    14d2:	0e                   	push   cs
    14d3:	0d 00 01 01 01       	or     eax,0x1010100
    14d8:	01 00                	add    DWORD PTR [eax],eax
    14da:	00 00                	add    BYTE PTR [eax],al
    14dc:	01 00                	add    DWORD PTR [eax],eax
    14de:	00 01                	add    BYTE PTR [ecx],al
    14e0:	73 72                	jae    1554 <sysEnter_Vector-0x12eaac>
    14e2:	63 2f                	arpl   WORD PTR [edi],bp
    14e4:	73 74                	jae    155a <sysEnter_Vector-0x12eaa6>
    14e6:	72 69                	jb     1551 <sysEnter_Vector-0x12eaaf>
    14e8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    14e9:	67 73 00             	addr16 jae 14ec <sysEnter_Vector-0x12eb14>
    14ec:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    14ef:	72 70                	jb     1561 <sysEnter_Vector-0x12ea9f>
    14f1:	61                   	popa   
    14f2:	72 74                	jb     1568 <sysEnter_Vector-0x12ea98>
    14f4:	73 2e                	jae    1524 <sysEnter_Vector-0x12eadc>
    14f6:	63 00                	arpl   WORD PTR [eax],ax
    14f8:	01 00                	add    DWORD PTR [eax],eax
    14fa:	00 00                	add    BYTE PTR [eax],al
    14fc:	00 05 02 00 1b 00    	add    BYTE PTR ds:0x1b0002,al
    1502:	30 13                	xor    BYTE PTR [ebx],dl
    1504:	c9                   	leave  
    1505:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1506:	3d 02 02 00 01       	cmp    eax,0x1000202
    150b:	01 7f 01             	add    DWORD PTR [edi+0x1],edi
    150e:	00 00                	add    BYTE PTR [eax],al
    1510:	02 00                	add    al,BYTE PTR [eax]
    1512:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1513:	00 00                	add    BYTE PTR [eax],al
    1515:	00 01                	add    BYTE PTR [ecx],al
    1517:	01 fb                	add    ebx,edi
    1519:	0e                   	push   cs
    151a:	0d 00 01 01 01       	or     eax,0x1010100
    151f:	01 00                	add    DWORD PTR [eax],eax
    1521:	00 00                	add    BYTE PTR [eax],al
    1523:	01 00                	add    DWORD PTR [eax],eax
    1525:	00 01                	add    BYTE PTR [ecx],al
    1527:	73 72                	jae    159b <sysEnter_Vector-0x12ea65>
    1529:	63 2f                	arpl   WORD PTR [edi],bp
    152b:	73 74                	jae    15a1 <sysEnter_Vector-0x12ea5f>
    152d:	72 69                	jb     1598 <sysEnter_Vector-0x12ea68>
    152f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1530:	67 73 00             	addr16 jae 1533 <sysEnter_Vector-0x12eacd>
    1533:	2f                   	das    
    1534:	68 6f 6d 65 2f       	push   0x2f656d6f
    1539:	79 6f                	jns    15aa <sysEnter_Vector-0x12ea56>
    153b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1542:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1545:	73 73                	jae    15ba <sysEnter_Vector-0x12ea46>
    1547:	2f                   	das    
    1548:	6c                   	ins    BYTE PTR es:[edi],dx
    1549:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1550:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1556:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    155c:	78 2d                	js     158b <sysEnter_Vector-0x12ea75>
    155e:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1560:	75 2f                	jne    1591 <sysEnter_Vector-0x12ea6f>
    1562:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1567:	2f                   	das    
    1568:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    156f:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1572:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1576:	65 00 00             	add    BYTE PTR gs:[eax],al
    1579:	73 74                	jae    15ef <sysEnter_Vector-0x12ea11>
    157b:	72 74                	jb     15f1 <sysEnter_Vector-0x12ea0f>
    157d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    157e:	6c                   	ins    BYTE PTR es:[edi],dx
    157f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1582:	01 00                	add    DWORD PTR [eax],eax
    1584:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1587:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    158e:	63 
    158f:	2e                   	cs
    1590:	68 00 02 00 00       	push   0x200
    1595:	74 69                	je     1600 <sysEnter_Vector-0x12ea00>
    1597:	6d                   	ins    DWORD PTR es:[edi],dx
    1598:	65                   	gs
    1599:	2e                   	cs
    159a:	68 00 03 00 00       	push   0x300
    159f:	6d                   	ins    DWORD PTR es:[edi],dx
    15a0:	61                   	popa   
    15a1:	6c                   	ins    BYTE PTR es:[edi],dx
    15a2:	6c                   	ins    BYTE PTR es:[edi],dx
    15a3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15a4:	63 2e                	arpl   WORD PTR [esi],bp
    15a6:	68 00 03 00 00       	push   0x300
    15ab:	6c                   	ins    BYTE PTR es:[edi],dx
    15ac:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    15b3:	4f                   	dec    edi
    15b4:	53                   	push   ebx
    15b5:	2e                   	cs
    15b6:	68 00 03 00 00       	push   0x300
    15bb:	00 00                	add    BYTE PTR [eax],al
    15bd:	05 02 20 1b 00       	add    eax,0x1b2002
    15c2:	30 03                	xor    BYTE PTR [ebx],al
    15c4:	d7                   	xlat   BYTE PTR ds:[ebx]
    15c5:	00 01                	add    BYTE PTR [ecx],al
    15c7:	08 2f                	or     BYTE PTR [edi],ch
    15c9:	40                   	inc    eax
    15ca:	00 02                	add    BYTE PTR [edx],al
    15cc:	04 01                	add    al,0x1
    15ce:	7c 00                	jl     15d0 <sysEnter_Vector-0x12ea30>
    15d0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    15d3:	ad                   	lods   eax,DWORD PTR ds:[esi]
    15d4:	59                   	pop    ecx
    15d5:	59                   	pop    ecx
    15d6:	75 c9                	jne    15a1 <sysEnter_Vector-0x12ea5f>
    15d8:	59                   	pop    ecx
    15d9:	ad                   	lods   eax,DWORD PTR ds:[esi]
    15da:	00 02                	add    BYTE PTR [edx],al
    15dc:	04 02                	add    al,0x2
    15de:	06                   	push   es
    15df:	66                   	data16
    15e0:	00 02                	add    BYTE PTR [edx],al
    15e2:	04 03                	add    al,0x3
    15e4:	66 06                	pushw  es
    15e6:	59                   	pop    ecx
    15e7:	00 02                	add    BYTE PTR [edx],al
    15e9:	04 01                	add    al,0x1
    15eb:	06                   	push   es
    15ec:	74 06                	je     15f4 <sysEnter_Vector-0x12ea0c>
    15ee:	75 91                	jne    1581 <sysEnter_Vector-0x12ea7f>
    15f0:	3d 76 67 00 02       	cmp    eax,0x2006776
    15f5:	04 01                	add    al,0x1
    15f7:	06                   	push   es
    15f8:	58                   	pop    eax
    15f9:	00 02                	add    BYTE PTR [edx],al
    15fb:	04 02                	add    al,0x2
    15fd:	74 00                	je     15ff <sysEnter_Vector-0x12ea01>
    15ff:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1602:	58                   	pop    eax
    1603:	06                   	push   es
    1604:	03 13                	add    edx,DWORD PTR [ebx]
    1606:	3c 00                	cmp    al,0x0
    1608:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    160b:	06                   	push   es
    160c:	66                   	data16
    160d:	00 02                	add    BYTE PTR [edx],al
    160f:	04 02                	add    al,0x2
    1611:	74 00                	je     1613 <sysEnter_Vector-0x12e9ed>
    1613:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1616:	06                   	push   es
    1617:	59                   	pop    ecx
    1618:	00 02                	add    BYTE PTR [edx],al
    161a:	04 04                	add    al,0x4
    161c:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1622:	f3 9f                	repz lahf 
    1624:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1628:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    162b:	06                   	push   es
    162c:	58                   	pop    eax
    162d:	00 02                	add    BYTE PTR [edx],al
    162f:	04 03                	add    al,0x3
    1631:	58                   	pop    eax
    1632:	00 02                	add    BYTE PTR [edx],al
    1634:	04 04                	add    al,0x4
    1636:	74 00                	je     1638 <sysEnter_Vector-0x12e9c8>
    1638:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    163b:	58                   	pop    eax
    163c:	06                   	push   es
    163d:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1640:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1643:	06                   	push   es
    1644:	66                   	data16
    1645:	00 02                	add    BYTE PTR [edx],al
    1647:	04 02                	add    al,0x2
    1649:	58                   	pop    eax
    164a:	00 02                	add    BYTE PTR [edx],al
    164c:	04 03                	add    al,0x3
    164e:	58                   	pop    eax
    164f:	06                   	push   es
    1650:	59                   	pop    ecx
    1651:	76 59                	jbe    16ac <sysEnter_Vector-0x12e954>
    1653:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1657:	03 10                	add    edx,DWORD PTR [eax]
    1659:	ac                   	lods   al,BYTE PTR ds:[esi]
    165a:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    165d:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1660:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1663:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1666:	06                   	push   es
    1667:	66                   	data16
    1668:	00 02                	add    BYTE PTR [edx],al
    166a:	04 02                	add    al,0x2
    166c:	74 00                	je     166e <sysEnter_Vector-0x12e992>
    166e:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1671:	58                   	pop    eax
    1672:	06                   	push   es
    1673:	4b                   	dec    ebx
    1674:	67 2f                	addr16 das 
    1676:	67 00 02             	add    BYTE PTR [bp+si],al
    1679:	04 01                	add    al,0x1
    167b:	06                   	push   es
    167c:	66                   	data16
    167d:	00 02                	add    BYTE PTR [edx],al
    167f:	04 02                	add    al,0x2
    1681:	58                   	pop    eax
    1682:	00 02                	add    BYTE PTR [edx],al
    1684:	04 04                	add    al,0x4
    1686:	3c 06                	cmp    al,0x6
    1688:	59                   	pop    ecx
    1689:	2f                   	das    
    168a:	02 08                	add    cl,BYTE PTR [eax]
    168c:	00 01                	add    BYTE PTR [ecx],al
    168e:	01 d6                	add    esi,edx
    1690:	00 00                	add    BYTE PTR [eax],al
    1692:	00 02                	add    BYTE PTR [edx],al
    1694:	00 a7 00 00 00 01    	add    BYTE PTR [edi+0x1000000],ah
    169a:	01 fb                	add    ebx,edi
    169c:	0e                   	push   cs
    169d:	0d 00 01 01 01       	or     eax,0x1010100
    16a2:	01 00                	add    DWORD PTR [eax],eax
    16a4:	00 00                	add    BYTE PTR [eax],al
    16a6:	01 00                	add    DWORD PTR [eax],eax
    16a8:	00 01                	add    BYTE PTR [ecx],al
    16aa:	73 72                	jae    171e <sysEnter_Vector-0x12e8e2>
    16ac:	63 2f                	arpl   WORD PTR [edi],bp
    16ae:	73 74                	jae    1724 <sysEnter_Vector-0x12e8dc>
    16b0:	72 69                	jb     171b <sysEnter_Vector-0x12e8e5>
    16b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16b3:	67 73 00             	addr16 jae 16b6 <sysEnter_Vector-0x12e94a>
    16b6:	2f                   	das    
    16b7:	68 6f 6d 65 2f       	push   0x2f656d6f
    16bc:	79 6f                	jns    172d <sysEnter_Vector-0x12e8d3>
    16be:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    16c5:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    16c8:	73 73                	jae    173d <sysEnter_Vector-0x12e8c3>
    16ca:	2f                   	das    
    16cb:	6c                   	ins    BYTE PTR es:[edi],dx
    16cc:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    16d3:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    16d9:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    16df:	78 2d                	js     170e <sysEnter_Vector-0x12e8f2>
    16e1:	67 6e                	outs   dx,BYTE PTR ds:[si]
    16e3:	75 2f                	jne    1714 <sysEnter_Vector-0x12e8ec>
    16e5:	35 2e 33 2e 30       	xor    eax,0x302e332e
    16ea:	2f                   	das    
    16eb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    16f2:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    16f5:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    16f9:	65 00 00             	add    BYTE PTR gs:[eax],al
    16fc:	73 74                	jae    1772 <sysEnter_Vector-0x12e88e>
    16fe:	72 74                	jb     1774 <sysEnter_Vector-0x12e88c>
    1700:	72 69                	jb     176b <sysEnter_Vector-0x12e895>
    1702:	6d                   	ins    DWORD PTR es:[edi],dx
    1703:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1706:	01 00                	add    DWORD PTR [eax],eax
    1708:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    170b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1712:	63 
    1713:	2e                   	cs
    1714:	68 00 02 00 00       	push   0x200
    1719:	74 69                	je     1784 <sysEnter_Vector-0x12e87c>
    171b:	6d                   	ins    DWORD PTR es:[edi],dx
    171c:	65                   	gs
    171d:	2e                   	cs
    171e:	68 00 03 00 00       	push   0x300
    1723:	6d                   	ins    DWORD PTR es:[edi],dx
    1724:	61                   	popa   
    1725:	6c                   	ins    BYTE PTR es:[edi],dx
    1726:	6c                   	ins    BYTE PTR es:[edi],dx
    1727:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1728:	63 2e                	arpl   WORD PTR [esi],bp
    172a:	68 00 03 00 00       	push   0x300
    172f:	6c                   	ins    BYTE PTR es:[edi],dx
    1730:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1737:	4f                   	dec    edi
    1738:	53                   	push   ebx
    1739:	2e                   	cs
    173a:	68 00 03 00 00       	push   0x300
    173f:	00 00                	add    BYTE PTR [eax],al
    1741:	05 02 bc 1c 00       	add    eax,0x1cbc02
    1746:	30 15 08 13 bf 30    	xor    BYTE PTR ds:0x30bf1308,dl
    174c:	48                   	dec    eax
    174d:	b3 08                	mov    bl,0x8
    174f:	9f                   	lahf   
    1750:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    1756:	06                   	push   es
    1757:	82                   	(bad)  
    1758:	06                   	push   es
    1759:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    175a:	84 00                	test   BYTE PTR [eax],al
    175c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    175f:	06                   	push   es
    1760:	20 06                	and    BYTE PTR [esi],al
    1762:	08 ca                	or     dl,cl
    1764:	02 06                	add    al,BYTE PTR [esi]
    1766:	00 01                	add    BYTE PTR [ecx],al
    1768:	01 d1                	add    ecx,edx
    176a:	00 00                	add    BYTE PTR [eax],al
    176c:	00 02                	add    BYTE PTR [edx],al
    176e:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    1774:	01 fb                	add    ebx,edi
    1776:	0e                   	push   cs
    1777:	0d 00 01 01 01       	or     eax,0x1010100
    177c:	01 00                	add    DWORD PTR [eax],eax
    177e:	00 00                	add    BYTE PTR [eax],al
    1780:	01 00                	add    DWORD PTR [eax],eax
    1782:	00 01                	add    BYTE PTR [ecx],al
    1784:	73 72                	jae    17f8 <sysEnter_Vector-0x12e808>
    1786:	63 00                	arpl   WORD PTR [eax],ax
    1788:	2f                   	das    
    1789:	68 6f 6d 65 2f       	push   0x2f656d6f
    178e:	79 6f                	jns    17ff <sysEnter_Vector-0x12e801>
    1790:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1797:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    179a:	73 73                	jae    180f <sysEnter_Vector-0x12e7f1>
    179c:	2f                   	das    
    179d:	6c                   	ins    BYTE PTR es:[edi],dx
    179e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    17a5:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    17ab:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    17b1:	78 2d                	js     17e0 <sysEnter_Vector-0x12e820>
    17b3:	67 6e                	outs   dx,BYTE PTR ds:[si]
    17b5:	75 2f                	jne    17e6 <sysEnter_Vector-0x12e81a>
    17b7:	35 2e 33 2e 30       	xor    eax,0x302e332e
    17bc:	2f                   	das    
    17bd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17c4:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    17c7:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    17cb:	65 00 00             	add    BYTE PTR gs:[eax],al
    17ce:	73 74                	jae    1844 <sysEnter_Vector-0x12e7bc>
    17d0:	72 73                	jb     1845 <sysEnter_Vector-0x12e7bb>
    17d2:	74 72                	je     1846 <sysEnter_Vector-0x12e7ba>
    17d4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    17d7:	01 00                	add    DWORD PTR [eax],eax
    17d9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    17dc:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    17e3:	63 
    17e4:	2e                   	cs
    17e5:	68 00 02 00 00       	push   0x200
    17ea:	74 69                	je     1855 <sysEnter_Vector-0x12e7ab>
    17ec:	6d                   	ins    DWORD PTR es:[edi],dx
    17ed:	65                   	gs
    17ee:	2e                   	cs
    17ef:	68 00 03 00 00       	push   0x300
    17f4:	6d                   	ins    DWORD PTR es:[edi],dx
    17f5:	61                   	popa   
    17f6:	6c                   	ins    BYTE PTR es:[edi],dx
    17f7:	6c                   	ins    BYTE PTR es:[edi],dx
    17f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    17f9:	63 2e                	arpl   WORD PTR [esi],bp
    17fb:	68 00 03 00 00       	push   0x300
    1800:	6c                   	ins    BYTE PTR es:[edi],dx
    1801:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1808:	4f                   	dec    edi
    1809:	53                   	push   ebx
    180a:	2e                   	cs
    180b:	68 00 03 00 00       	push   0x300
    1810:	00 00                	add    BYTE PTR [eax],al
    1812:	05 02 54 1d 00       	add    eax,0x1d5402
    1817:	30 03                	xor    BYTE PTR [ebx],al
    1819:	33 01                	xor    eax,DWORD PTR [ecx]
    181b:	ec                   	in     al,dx
    181c:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1821:	75 5a                	jne    187d <sysEnter_Vector-0x12e783>
    1823:	08 3f                	or     BYTE PTR [edi],bh
    1825:	2c 23                	sub    al,0x23
    1827:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    182a:	1e                   	push   ds
    182b:	00 02                	add    BYTE PTR [edx],al
    182d:	04 01                	add    al,0x1
    182f:	06                   	push   es
    1830:	4a                   	dec    edx
    1831:	06                   	push   es
    1832:	03 0f                	add    ecx,DWORD PTR [edi]
    1834:	9e                   	sahf   
    1835:	59                   	pop    ecx
    1836:	4d                   	dec    ebp
    1837:	c9                   	leave  
    1838:	d7                   	xlat   BYTE PTR ds:[ebx]
    1839:	02 02                	add    al,BYTE PTR [edx]
    183b:	00 01                	add    BYTE PTR [ecx],al
    183d:	01 27                	add    DWORD PTR [edi],esp
    183f:	03 00                	add    eax,DWORD PTR [eax]
    1841:	00 02                	add    BYTE PTR [edx],al
    1843:	00 cc                	add    ah,cl
    1845:	00 00                	add    BYTE PTR [eax],al
    1847:	00 01                	add    BYTE PTR [ecx],al
    1849:	01 fb                	add    ebx,edi
    184b:	0e                   	push   cs
    184c:	0d 00 01 01 01       	or     eax,0x1010100
    1851:	01 00                	add    DWORD PTR [eax],eax
    1853:	00 00                	add    BYTE PTR [eax],al
    1855:	01 00                	add    DWORD PTR [eax],eax
    1857:	00 01                	add    BYTE PTR [ecx],al
    1859:	73 72                	jae    18cd <sysEnter_Vector-0x12e733>
    185b:	63 00                	arpl   WORD PTR [eax],ax
    185d:	2f                   	das    
    185e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1863:	79 6f                	jns    18d4 <sysEnter_Vector-0x12e72c>
    1865:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    186c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    186f:	73 73                	jae    18e4 <sysEnter_Vector-0x12e71c>
    1871:	2f                   	das    
    1872:	6c                   	ins    BYTE PTR es:[edi],dx
    1873:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    187a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1880:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1886:	78 2d                	js     18b5 <sysEnter_Vector-0x12e74b>
    1888:	67 6e                	outs   dx,BYTE PTR ds:[si]
    188a:	75 2f                	jne    18bb <sysEnter_Vector-0x12e745>
    188c:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1891:	2f                   	das    
    1892:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1899:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    189c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    18a0:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    18a3:	2e                   	cs
    18a4:	2f                   	das    
    18a5:	2e                   	cs
    18a6:	2e                   	cs
    18a7:	2f                   	das    
    18a8:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    18ac:	6a 2f                	push   0x2f
    18ae:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    18b1:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    18b8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18b9:	65                   	gs
    18ba:	6c                   	ins    BYTE PTR es:[edi],dx
    18bb:	2f                   	das    
    18bc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    18c3:	00 00                	add    BYTE PTR [eax],al
    18c5:	74 69                	je     1930 <sysEnter_Vector-0x12e6d0>
    18c7:	6d                   	ins    DWORD PTR es:[edi],dx
    18c8:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    18cc:	01 00                	add    DWORD PTR [eax],eax
    18ce:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    18d1:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    18d8:	63 
    18d9:	2e                   	cs
    18da:	68 00 02 00 00       	push   0x200
    18df:	74 69                	je     194a <sysEnter_Vector-0x12e6b6>
    18e1:	6d                   	ins    DWORD PTR es:[edi],dx
    18e2:	65                   	gs
    18e3:	2e                   	cs
    18e4:	68 00 03 00 00       	push   0x300
    18e9:	6d                   	ins    DWORD PTR es:[edi],dx
    18ea:	61                   	popa   
    18eb:	6c                   	ins    BYTE PTR es:[edi],dx
    18ec:	6c                   	ins    BYTE PTR es:[edi],dx
    18ed:	6f                   	outs   dx,DWORD PTR ds:[esi]
    18ee:	63 2e                	arpl   WORD PTR [esi],bp
    18f0:	68 00 03 00 00       	push   0x300
    18f5:	6c                   	ins    BYTE PTR es:[edi],dx
    18f6:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    18fd:	4f                   	dec    edi
    18fe:	53                   	push   ebx
    18ff:	2e                   	cs
    1900:	68 00 03 00 00       	push   0x300
    1905:	73 79                	jae    1980 <sysEnter_Vector-0x12e680>
    1907:	73 63                	jae    196c <sysEnter_Vector-0x12e694>
    1909:	61                   	popa   
    190a:	6c                   	ins    BYTE PTR es:[edi],dx
    190b:	6c                   	ins    BYTE PTR es:[edi],dx
    190c:	73 2e                	jae    193c <sysEnter_Vector-0x12e6c4>
    190e:	68 00 04 00 00       	push   0x400
    1913:	00 00                	add    BYTE PTR [eax],al
    1915:	05 02 e0 1d 00       	add    eax,0x1de002
    191a:	30 03                	xor    BYTE PTR [ebx],al
    191c:	16                   	push   ss
    191d:	01 f3                	add    ebx,esi
    191f:	75 c9                	jne    18ea <sysEnter_Vector-0x12e716>
    1921:	3d 31 08 21 84       	cmp    eax,0x84210831
    1926:	76 02                	jbe    192a <sysEnter_Vector-0x12e6d6>
    1928:	24 13                	and    al,0x13
    192a:	08 22                	or     BYTE PTR [edx],ah
    192c:	02 2e                	add    ch,BYTE PTR [esi]
    192e:	13 02                	adc    eax,DWORD PTR [edx]
    1930:	2f                   	das    
    1931:	13 08                	adc    ecx,DWORD PTR [eax]
    1933:	67 02 2d             	add    ch,BYTE PTR [di]
    1936:	13 2f                	adc    ebp,DWORD PTR [edi]
    1938:	00 02                	add    BYTE PTR [edx],al
    193a:	04 01                	add    al,0x1
    193c:	06                   	push   es
    193d:	9e                   	sahf   
    193e:	00 02                	add    BYTE PTR [edx],al
    1940:	04 04                	add    al,0x4
    1942:	02 23                	add    ah,BYTE PTR [ebx]
    1944:	12 00                	adc    al,BYTE PTR [eax]
    1946:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    194d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1950:	74 00                	je     1952 <sysEnter_Vector-0x12e6ae>
    1952:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1955:	58                   	pop    eax
    1956:	00 02                	add    BYTE PTR [edx],al
    1958:	04 08                	add    al,0x8
    195a:	06                   	push   es
    195b:	3d 48 00 02 04       	cmp    eax,0x4020048
    1960:	01 06                	add    DWORD PTR [esi],eax
    1962:	9e                   	sahf   
    1963:	00 02                	add    BYTE PTR [edx],al
    1965:	04 04                	add    al,0x4
    1967:	02 23                	add    ah,BYTE PTR [ebx]
    1969:	12 00                	adc    al,BYTE PTR [eax]
    196b:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1972:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1975:	74 00                	je     1977 <sysEnter_Vector-0x12e689>
    1977:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    197a:	58                   	pop    eax
    197b:	06                   	push   es
    197c:	94                   	xchg   esp,eax
    197d:	e5 91                	in     eax,0x91
    197f:	9f                   	lahf   
    1980:	59                   	pop    ecx
    1981:	00 02                	add    BYTE PTR [edx],al
    1983:	04 01                	add    al,0x1
    1985:	06                   	push   es
    1986:	9e                   	sahf   
    1987:	00 02                	add    BYTE PTR [edx],al
    1989:	04 04                	add    al,0x4
    198b:	02 23                	add    ah,BYTE PTR [ebx]
    198d:	12 00                	adc    al,BYTE PTR [eax]
    198f:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1996:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1999:	74 00                	je     199b <sysEnter_Vector-0x12e665>
    199b:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    199e:	58                   	pop    eax
    199f:	00 02                	add    BYTE PTR [edx],al
    19a1:	04 08                	add    al,0x8
    19a3:	06                   	push   es
    19a4:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    19aa:	01 06                	add    DWORD PTR [esi],eax
    19ac:	9e                   	sahf   
    19ad:	00 02                	add    BYTE PTR [edx],al
    19af:	04 04                	add    al,0x4
    19b1:	02 23                	add    ah,BYTE PTR [ebx]
    19b3:	12 00                	adc    al,BYTE PTR [eax]
    19b5:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19bc:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19bf:	74 00                	je     19c1 <sysEnter_Vector-0x12e63f>
    19c1:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19c4:	58                   	pop    eax
    19c5:	06                   	push   es
    19c6:	08 f6                	or     dh,dh
    19c8:	d7                   	xlat   BYTE PTR ds:[ebx]
    19c9:	9f                   	lahf   
    19ca:	3d 68 08 16 08       	cmp    eax,0x8160868
    19cf:	3d 08 4b 5a 08       	cmp    eax,0x85a4b08
    19d4:	15 08 3d 08 3d       	adc    eax,0x3d083d08
    19d9:	5a                   	pop    edx
    19da:	08 44 02 2e          	or     BYTE PTR [edx+eax*1+0x2e],al
    19de:	13 02                	adc    eax,DWORD PTR [edx]
    19e0:	3a 13                	cmp    dl,BYTE PTR [ebx]
    19e2:	91                   	xchg   ecx,eax
    19e3:	c9                   	leave  
    19e4:	e6 02                	out    0x2,al
    19e6:	2f                   	das    
    19e7:	13 02                	adc    eax,DWORD PTR [edx]
    19e9:	3c 13                	cmp    al,0x13
    19eb:	9f                   	lahf   
    19ec:	e5 e6                	in     eax,0xe6
    19ee:	08 c9                	or     cl,cl
    19f0:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    19f3:	9f                   	lahf   
    19f4:	e5 4c                	in     eax,0x4c
    19f6:	02 29                	add    ch,BYTE PTR [ecx]
    19f8:	13 02                	adc    eax,DWORD PTR [edx]
    19fa:	2b 13                	sub    edx,DWORD PTR [ebx]
    19fc:	9f                   	lahf   
    19fd:	e5 e6                	in     eax,0xe6
    19ff:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1a04:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1a09:	06                   	push   es
    1a0a:	c8 00 02 04          	enter  0x200,0x4
    1a0e:	04 02                	add    al,0x2
    1a10:	2c 12                	sub    al,0x12
    1a12:	00 02                	add    BYTE PTR [edx],al
    1a14:	04 05                	add    al,0x5
    1a16:	02 2f                	add    ch,BYTE PTR [edi]
    1a18:	12 00                	adc    al,BYTE PTR [eax]
    1a1a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a1d:	74 00                	je     1a1f <sysEnter_Vector-0x12e5e1>
    1a1f:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a22:	58                   	pop    eax
    1a23:	06                   	push   es
    1a24:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1a2a:	04 01                	add    al,0x1
    1a2c:	06                   	push   es
    1a2d:	c8 00 02 04          	enter  0x200,0x4
    1a31:	04 02                	add    al,0x2
    1a33:	2c 12                	sub    al,0x12
    1a35:	00 02                	add    BYTE PTR [edx],al
    1a37:	04 05                	add    al,0x5
    1a39:	02 2f                	add    ch,BYTE PTR [edi]
    1a3b:	12 00                	adc    al,BYTE PTR [eax]
    1a3d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a40:	74 00                	je     1a42 <sysEnter_Vector-0x12e5be>
    1a42:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a45:	58                   	pop    eax
    1a46:	00 02                	add    BYTE PTR [edx],al
    1a48:	04 08                	add    al,0x8
    1a4a:	06                   	push   es
    1a4b:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1a51:	00 02                	add    BYTE PTR [edx],al
    1a53:	04 01                	add    al,0x1
    1a55:	06                   	push   es
    1a56:	c8 00 02 04          	enter  0x200,0x4
    1a5a:	04 02                	add    al,0x2
    1a5c:	2c 12                	sub    al,0x12
    1a5e:	00 02                	add    BYTE PTR [edx],al
    1a60:	04 05                	add    al,0x5
    1a62:	02 2f                	add    ch,BYTE PTR [edi]
    1a64:	12 00                	adc    al,BYTE PTR [eax]
    1a66:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a69:	74 00                	je     1a6b <sysEnter_Vector-0x12e595>
    1a6b:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a6e:	58                   	pop    eax
    1a6f:	06                   	push   es
    1a70:	08 f9                	or     cl,bh
    1a72:	bb 75 00 02 04       	mov    ebx,0x4020075
    1a77:	01 06                	add    DWORD PTR [esi],eax
    1a79:	08 2e                	or     BYTE PTR [esi],ch
    1a7b:	06                   	push   es
    1a7c:	9f                   	lahf   
    1a7d:	75 75                	jne    1af4 <sysEnter_Vector-0x12e50c>
    1a7f:	7b d8                	jnp    1a59 <sysEnter_Vector-0x12e5a7>
    1a81:	00 02                	add    BYTE PTR [edx],al
    1a83:	04 01                	add    al,0x1
    1a85:	06                   	push   es
    1a86:	c8 06 75 e5          	enter  0x7506,0xe5
    1a8a:	00 02                	add    BYTE PTR [edx],al
    1a8c:	04 01                	add    al,0x1
    1a8e:	06                   	push   es
    1a8f:	02 22                	add    ah,BYTE PTR [edx]
    1a91:	12 06                	adc    al,BYTE PTR [esi]
    1a93:	4b                   	dec    ebx
    1a94:	00 02                	add    BYTE PTR [edx],al
    1a96:	04 01                	add    al,0x1
    1a98:	06                   	push   es
    1a99:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1a9f:	02 22                	add    ah,BYTE PTR [edx]
    1aa1:	12 00                	adc    al,BYTE PTR [eax]
    1aa3:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1aa6:	74 00                	je     1aa8 <sysEnter_Vector-0x12e558>
    1aa8:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1aab:	58                   	pop    eax
    1aac:	00 02                	add    BYTE PTR [edx],al
    1aae:	04 06                	add    al,0x6
    1ab0:	06                   	push   es
    1ab1:	59                   	pop    ecx
    1ab2:	00 02                	add    BYTE PTR [edx],al
    1ab4:	04 01                	add    al,0x1
    1ab6:	06                   	push   es
    1ab7:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1aba:	00 02                	add    BYTE PTR [edx],al
    1abc:	04 03                	add    al,0x3
    1abe:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1ac1:	00 02                	add    BYTE PTR [edx],al
    1ac3:	04 04                	add    al,0x4
    1ac5:	74 00                	je     1ac7 <sysEnter_Vector-0x12e539>
    1ac7:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1aca:	58                   	pop    eax
    1acb:	00 02                	add    BYTE PTR [edx],al
    1acd:	04 06                	add    al,0x6
    1acf:	06                   	push   es
    1ad0:	59                   	pop    ecx
    1ad1:	00 02                	add    BYTE PTR [edx],al
    1ad3:	04 01                	add    al,0x1
    1ad5:	06                   	push   es
    1ad6:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1ad9:	00 02                	add    BYTE PTR [edx],al
    1adb:	04 03                	add    al,0x3
    1add:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1ae0:	00 02                	add    BYTE PTR [edx],al
    1ae2:	04 04                	add    al,0x4
    1ae4:	74 00                	je     1ae6 <sysEnter_Vector-0x12e51a>
    1ae6:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ae9:	58                   	pop    eax
    1aea:	00 02                	add    BYTE PTR [edx],al
    1aec:	04 06                	add    al,0x6
    1aee:	06                   	push   es
    1aef:	5a                   	pop    edx
    1af0:	00 02                	add    BYTE PTR [edx],al
    1af2:	04 06                	add    al,0x6
    1af4:	c9                   	leave  
    1af5:	2f                   	das    
    1af6:	00 02                	add    BYTE PTR [edx],al
    1af8:	04 01                	add    al,0x1
    1afa:	06                   	push   es
    1afb:	9e                   	sahf   
    1afc:	00 02                	add    BYTE PTR [edx],al
    1afe:	04 04                	add    al,0x4
    1b00:	02 23                	add    ah,BYTE PTR [ebx]
    1b02:	12 00                	adc    al,BYTE PTR [eax]
    1b04:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1b0b:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b0e:	74 00                	je     1b10 <sysEnter_Vector-0x12e4f0>
    1b10:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1b13:	58                   	pop    eax
    1b14:	00 02                	add    BYTE PTR [edx],al
    1b16:	04 08                	add    al,0x8
    1b18:	06                   	push   es
    1b19:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1b1c:	e8 bb 00 02 04       	call   4021bdc <sysEnter_Vector+0x3ef1bdc>
    1b21:	01 06                	add    DWORD PTR [esi],eax
    1b23:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1b28:	02 31                	add    dh,BYTE PTR [ecx]
    1b2a:	14 02                	adc    al,0x2
    1b2c:	2c 14                	sub    al,0x14
    1b2e:	00 02                	add    BYTE PTR [edx],al
    1b30:	04 01                	add    al,0x1
    1b32:	06                   	push   es
    1b33:	02 29                	add    ch,BYTE PTR [ecx]
    1b35:	12 06                	adc    al,BYTE PTR [esi]
    1b37:	4b                   	dec    ebx
    1b38:	bd 00 02 04 01       	mov    ebp,0x1040200
    1b3d:	06                   	push   es
    1b3e:	ba 00 02 04 03       	mov    edx,0x3040200
    1b43:	06                   	push   es
    1b44:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1b47:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    1b4a:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    1b51:	77 00                	ja     1b53 <sysEnter_Vector-0x12e4ad>
    1b53:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b56:	06                   	push   es
    1b57:	82                   	(bad)  
    1b58:	06                   	push   es
    1b59:	4b                   	dec    ebx
    1b5a:	68 00 02 04 01       	push   0x1040200
    1b5f:	06                   	push   es
    1b60:	66 06                	pushw  es
    1b62:	85 3d 02 08 00 01    	test   DWORD PTR ds:0x1000802,edi
    1b68:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
  10:	6f                   	outs   dx,DWORD PTR ds:[esi]
  11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
  13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
  18:	67 6e                	outs   dx,BYTE PTR ds:[si]
  1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
  21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
  23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
  25:	68 72 00 70 72       	push   0x72700072
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  2e:	73 45                	jae    75 <sysEnter_Vector-0x12ff8b>
  30:	6e                   	outs   dx,BYTE PTR ds:[esi]
  31:	76 70                	jbe    a3 <sysEnter_Vector-0x12ff5d>
  33:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  37:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  3c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  40:	73 69                	jae    ab <sysEnter_Vector-0x12ff55>
  42:	67 6e                	outs   dx,BYTE PTR ds:[si]
  44:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  49:	74 00                	je     4b <sysEnter_Vector-0x12ffb5>
  4b:	68 65 61 70 42       	push   0x42706165
  50:	61                   	popa   
  51:	73 65                	jae    b8 <sysEnter_Vector-0x12ff48>
  53:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
  57:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
  5b:	75 6e                	jne    cb <sysEnter_Vector-0x12ff35>
  5d:	73 69                	jae    c8 <sysEnter_Vector-0x12ff38>
  5f:	67 6e                	outs   dx,BYTE PTR ds:[si]
  61:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  66:	61                   	popa   
  67:	72 00                	jb     69 <sysEnter_Vector-0x12ff97>
  69:	74 69                	je     d4 <sysEnter_Vector-0x12ff2c>
  6b:	6d                   	ins    DWORD PTR es:[edi],dx
  6c:	65                   	gs
  6d:	5f                   	pop    edi
  6e:	74 00                	je     70 <sysEnter_Vector-0x12ff90>
  70:	75 69                	jne    db <sysEnter_Vector-0x12ff25>
  72:	6e                   	outs   dx,BYTE PTR ds:[esi]
  73:	74 33                	je     a8 <sysEnter_Vector-0x12ff58>
  75:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  78:	00 2f                	add    BYTE PTR [edi],ch
  7a:	68 6f 6d 65 2f       	push   0x2f656d6f
  7f:	79 6f                	jns    f0 <sysEnter_Vector-0x12ff10>
  81:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  88:	6f                   	outs   dx,DWORD PTR ds:[esi]
  89:	73 2f                	jae    ba <sysEnter_Vector-0x12ff46>
  8b:	61                   	popa   
  8c:	70 72                	jo     100 <sysEnter_Vector-0x12ff00>
  8e:	6f                   	outs   dx,DWORD PTR ds:[esi]
  8f:	6a 2f                	push   0x2f
  91:	6c                   	ins    BYTE PTR es:[edi],dx
  92:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  99:	4f                   	dec    edi
  9a:	53                   	push   ebx
  9b:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9f:	6f                   	outs   dx,DWORD PTR ds:[esi]
  a0:	6c                   	ins    BYTE PTR es:[edi],dx
  a1:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  a5:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
  a9:	75 62                	jne    10d <sysEnter_Vector-0x12fef3>
  ab:	6c                   	ins    BYTE PTR es:[edi],dx
  ac:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
  b0:	72 63                	jb     115 <sysEnter_Vector-0x12feeb>
  b2:	68 72 49 00 68       	push   0x68004972
  b7:	65                   	gs
  b8:	61                   	popa   
  b9:	70 43                	jo     fe <sysEnter_Vector-0x12ff02>
  bb:	75 72                	jne    12f <sysEnter_Vector-0x12fed1>
  bd:	72 00                	jb     bf <sysEnter_Vector-0x12ff41>
  bf:	2e                   	cs
  c0:	2e                   	cs
  c1:	2f                   	das    
  c2:	2e                   	cs
  c3:	2e                   	cs
  c4:	2f                   	das    
  c5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
  c9:	6a 2f                	push   0x2f
  cb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
  ce:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
  d5:	63 2f                	arpl   WORD PTR [edi],bp
  d7:	73 74                	jae    14d <sysEnter_Vector-0x12feb3>
  d9:	72 69                	jb     144 <sysEnter_Vector-0x12febc>
  db:	6e                   	outs   dx,BYTE PTR ds:[esi]
  dc:	67 73 2f             	addr16 jae 10e <sysEnter_Vector-0x12fef2>
  df:	73 74                	jae    155 <sysEnter_Vector-0x12feab>
  e1:	72 63                	jb     146 <sysEnter_Vector-0x12feba>
  e3:	68 72 2e 63 00       	push   0x632e72
  e8:	73 69                	jae    153 <sysEnter_Vector-0x12fead>
  ea:	7a 65                	jp     151 <sysEnter_Vector-0x12feaf>
  ec:	74 79                	je     167 <sysEnter_Vector-0x12fe99>
  ee:	70 65                	jo     155 <sysEnter_Vector-0x12feab>
  f0:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  f3:	6f                   	outs   dx,DWORD PTR ds:[esi]
  f4:	72 74                	jb     16a <sysEnter_Vector-0x12fe96>
  f6:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
  f9:	74 00                	je     fb <sysEnter_Vector-0x12ff05>
  fb:	47                   	inc    edi
  fc:	4e                   	dec    esi
  fd:	55                   	push   ebp
  fe:	20 43 31             	and    BYTE PTR [ebx+0x31],al
 101:	31 20                	xor    DWORD PTR [eax],esp
 103:	35 2e 33 2e 30       	xor    eax,0x302e332e
 108:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
 10e:	3d 69 6e 74 65       	cmp    eax,0x65746e69
 113:	6c                   	ins    BYTE PTR es:[edi],dx
 114:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
 11a:	65                   	gs
 11b:	3d 67 65 6e 65       	cmp    eax,0x656e6567
 120:	72 69                	jb     18b <sysEnter_Vector-0x12fe75>
 122:	63 20                	arpl   WORD PTR [eax],sp
 124:	2d 6d 61 72 63       	sub    eax,0x6372616d
 129:	68 3d 70 65 6e       	push   0x6e65703d
 12e:	74 69                	je     199 <sysEnter_Vector-0x12fe67>
 130:	75 6d                	jne    19f <sysEnter_Vector-0x12fe61>
 132:	70 72                	jo     1a6 <sysEnter_Vector-0x12fe5a>
 134:	6f                   	outs   dx,DWORD PTR ds:[esi]
 135:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
 13b:	66                   	data16
 13c:	72 65                	jb     1a3 <sysEnter_Vector-0x12fe5d>
 13e:	65                   	gs
 13f:	73 74                	jae    1b5 <sysEnter_Vector-0x12fe4b>
 141:	61                   	popa   
 142:	6e                   	outs   dx,BYTE PTR ds:[esi]
 143:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
 14a:	76 
 14b:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 152:	74 79                	je     1cd <sysEnter_Vector-0x12fe33>
 154:	3d 68 69 64 64       	cmp    eax,0x64646968
 159:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 15b:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 161:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 164:	61                   	popa   
 165:	70 45                	jo     1ac <sysEnter_Vector-0x12fe54>
 167:	6e                   	outs   dx,BYTE PTR ds:[esi]
 168:	64 00 73 74          	add    BYTE PTR fs:[ebx+0x74],dh
 16c:	72 63                	jb     1d1 <sysEnter_Vector-0x12fe2f>
 16e:	73 70                	jae    1e0 <sysEnter_Vector-0x12fe20>
 170:	6e                   	outs   dx,BYTE PTR ds:[esi]
 171:	49                   	dec    ecx
 172:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 175:	72 63                	jb     1da <sysEnter_Vector-0x12fe26>
 177:	73 70                	jae    1e9 <sysEnter_Vector-0x12fe17>
 179:	6e                   	outs   dx,BYTE PTR ds:[esi]
 17a:	00 2e                	add    BYTE PTR [esi],ch
 17c:	2e                   	cs
 17d:	2f                   	das    
 17e:	2e                   	cs
 17f:	2e                   	cs
 180:	2f                   	das    
 181:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 185:	6a 2f                	push   0x2f
 187:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 18a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 191:	63 2f                	arpl   WORD PTR [edi],bp
 193:	73 74                	jae    209 <sysEnter_Vector-0x12fdf7>
 195:	72 69                	jb     200 <sysEnter_Vector-0x12fe00>
 197:	6e                   	outs   dx,BYTE PTR ds:[esi]
 198:	67 73 2f             	addr16 jae 1ca <sysEnter_Vector-0x12fe36>
 19b:	73 74                	jae    211 <sysEnter_Vector-0x12fdef>
 19d:	72 63                	jb     202 <sysEnter_Vector-0x12fdfe>
 19f:	73 70                	jae    211 <sysEnter_Vector-0x12fdef>
 1a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 1a5:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
 1a8:	72 73                	jb     21d <sysEnter_Vector-0x12fde3>
 1aa:	00 2e                	add    BYTE PTR [esi],ch
 1ac:	2e                   	cs
 1ad:	2f                   	das    
 1ae:	2e                   	cs
 1af:	2e                   	cs
 1b0:	2f                   	das    
 1b1:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1b5:	6a 2f                	push   0x2f
 1b7:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1ba:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c1:	63 2f                	arpl   WORD PTR [edi],bp
 1c3:	73 74                	jae    239 <sysEnter_Vector-0x12fdc7>
 1c5:	72 69                	jb     230 <sysEnter_Vector-0x12fdd0>
 1c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1c8:	67 73 2f             	addr16 jae 1fa <sysEnter_Vector-0x12fe06>
 1cb:	73 74                	jae    241 <sysEnter_Vector-0x12fdbf>
 1cd:	72 74                	jb     243 <sysEnter_Vector-0x12fdbd>
 1cf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1d0:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d3:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1d7:	69 6d 00 6c 61 73 74 	imul   ebp,DWORD PTR [ebp+0x0],0x7473616c
 1de:	73 00                	jae    1e0 <sysEnter_Vector-0x12fe20>
 1e0:	73 74                	jae    256 <sysEnter_Vector-0x12fdaa>
 1e2:	72 74                	jb     258 <sysEnter_Vector-0x12fda8>
 1e4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1e5:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 1e8:	74 6f                	je     259 <sysEnter_Vector-0x12fda7>
 1ea:	61                   	popa   
 1eb:	49                   	dec    ecx
 1ec:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 1ef:	63 2f                	arpl   WORD PTR [edi],bp
 1f1:	61                   	popa   
 1f2:	73 63                	jae    257 <sysEnter_Vector-0x12fda9>
 1f4:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1fb:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1fc:	61                   	popa   
 1fd:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
 200:	6f                   	outs   dx,DWORD PTR ds:[esi]
 201:	69 00 72 65 76 65    	imul   eax,DWORD PTR [eax],0x65766572
 207:	72 73                	jb     27c <sysEnter_Vector-0x12fd84>
 209:	65                   	gs
 20a:	49                   	dec    ecx
 20b:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 20e:	67 6e                	outs   dx,BYTE PTR ds:[si]
 210:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 213:	6c                   	ins    BYTE PTR es:[edi],dx
 214:	75 65                	jne    27b <sysEnter_Vector-0x12fd85>
 216:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 21a:	74 50                	je     26c <sysEnter_Vector-0x12fd94>
 21c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 21d:	70 75                	jo     294 <sysEnter_Vector-0x12fd6c>
 21f:	6c                   	ins    BYTE PTR es:[edi],dx
 220:	61                   	popa   
 221:	74 65                	je     288 <sysEnter_Vector-0x12fd78>
 223:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 227:	74 65                	je     28e <sysEnter_Vector-0x12fd72>
 229:	6e                   	outs   dx,BYTE PTR ds:[esi]
 22a:	76 00                	jbe    22c <sysEnter_Vector-0x12fdd4>
 22c:	67                   	addr16
 22d:	65                   	gs
 22e:	74 65                	je     295 <sysEnter_Vector-0x12fd6b>
 230:	6e                   	outs   dx,BYTE PTR ds:[esi]
 231:	76 00                	jbe    233 <sysEnter_Vector-0x12fdcd>
 233:	73 72                	jae    2a7 <sysEnter_Vector-0x12fd59>
 235:	63 2f                	arpl   WORD PTR [edi],bp
 237:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 239:	76 69                	jbe    2a4 <sysEnter_Vector-0x12fd5c>
 23b:	72 6f                	jb     2ac <sysEnter_Vector-0x12fd54>
 23d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 23e:	6d                   	ins    DWORD PTR es:[edi],dx
 23f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 241:	74 2e                	je     271 <sysEnter_Vector-0x12fd8f>
 243:	63 00                	arpl   WORD PTR [eax],ax
 245:	76 61                	jbe    2a8 <sysEnter_Vector-0x12fd58>
 247:	72 6e                	jb     2b7 <sysEnter_Vector-0x12fd49>
 249:	61                   	popa   
 24a:	6d                   	ins    DWORD PTR es:[edi],dx
 24b:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
 24f:	74 64                	je     2b5 <sysEnter_Vector-0x12fd4b>
 251:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
 258:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 25c:	53                   	push   ebx
 25d:	43                   	inc    ebx
 25e:	41                   	inc    ecx
 25f:	4c                   	dec    esp
 260:	4c                   	dec    esp
 261:	5f                   	pop    edi
 262:	52                   	push   edx
 263:	45                   	inc    ebp
 264:	41                   	inc    ecx
 265:	44                   	inc    esp
 266:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 269:	53                   	push   ebx
 26a:	43                   	inc    ebx
 26b:	41                   	inc    ecx
 26c:	4c                   	dec    esp
 26d:	4c                   	dec    esp
 26e:	5f                   	pop    edi
 26f:	4f                   	dec    edi
 270:	50                   	push   eax
 271:	45                   	inc    ebp
 272:	4e                   	dec    esi
 273:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 276:	53                   	push   ebx
 277:	43                   	inc    ebx
 278:	41                   	inc    ecx
 279:	4c                   	dec    esp
 27a:	4c                   	dec    esp
 27b:	5f                   	pop    edi
 27c:	4d                   	dec    ebp
 27d:	41                   	inc    ecx
 27e:	53                   	push   ebx
 27f:	4b                   	dec    ebx
 280:	53                   	push   ebx
 281:	49                   	dec    ecx
 282:	47                   	inc    edi
 283:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 286:	53                   	push   ebx
 287:	43                   	inc    ebx
 288:	41                   	inc    ecx
 289:	4c                   	dec    esp
 28a:	4c                   	dec    esp
 28b:	5f                   	pop    edi
 28c:	47                   	inc    edi
 28d:	45                   	inc    ebp
 28e:	54                   	push   esp
 28f:	44                   	inc    esp
 290:	45                   	inc    ebp
 291:	4e                   	dec    esi
 292:	54                   	push   esp
 293:	53                   	push   ebx
 294:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 297:	63 2f                	arpl   WORD PTR [edi],bp
 299:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 2a0:	53                   	push   ebx
 2a1:	59                   	pop    ecx
 2a2:	53                   	push   ebx
 2a3:	43                   	inc    ebx
 2a4:	41                   	inc    ecx
 2a5:	4c                   	dec    esp
 2a6:	4c                   	dec    esp
 2a7:	5f                   	pop    edi
 2a8:	52                   	push   edx
 2a9:	45                   	inc    ebp
 2aa:	42                   	inc    edx
 2ab:	4f                   	dec    edi
 2ac:	4f                   	dec    edi
 2ad:	54                   	push   esp
 2ae:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2b1:	53                   	push   ebx
 2b2:	43                   	inc    ebx
 2b3:	41                   	inc    ecx
 2b4:	4c                   	dec    esp
 2b5:	4c                   	dec    esp
 2b6:	5f                   	pop    edi
 2b7:	48                   	dec    eax
 2b8:	4c                   	dec    esp
 2b9:	54                   	push   esp
 2ba:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2bd:	53                   	push   ebx
 2be:	43                   	inc    ebx
 2bf:	41                   	inc    ecx
 2c0:	4c                   	dec    esp
 2c1:	4c                   	dec    esp
 2c2:	5f                   	pop    edi
 2c3:	53                   	push   ebx
 2c4:	4c                   	dec    esp
 2c5:	45                   	inc    ebp
 2c6:	45                   	inc    ebp
 2c7:	50                   	push   eax
 2c8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2cb:	53                   	push   ebx
 2cc:	43                   	inc    ebx
 2cd:	41                   	inc    ecx
 2ce:	4c                   	dec    esp
 2cf:	4c                   	dec    esp
 2d0:	5f                   	pop    edi
 2d1:	53                   	push   ebx
 2d2:	45                   	inc    ebp
 2d3:	54                   	push   esp
 2d4:	50                   	push   eax
 2d5:	52                   	push   edx
 2d6:	49                   	dec    ecx
 2d7:	4f                   	dec    edi
 2d8:	52                   	push   edx
 2d9:	49                   	dec    ecx
 2da:	54                   	push   esp
 2db:	59                   	pop    ecx
 2dc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2df:	53                   	push   ebx
 2e0:	43                   	inc    ebx
 2e1:	41                   	inc    ecx
 2e2:	4c                   	dec    esp
 2e3:	4c                   	dec    esp
 2e4:	5f                   	pop    edi
 2e5:	43                   	inc    ebx
 2e6:	4c                   	dec    esp
 2e7:	4f                   	dec    edi
 2e8:	53                   	push   ebx
 2e9:	45                   	inc    ebp
 2ea:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 2ed:	79 73                	jns    362 <sysEnter_Vector-0x12fc9e>
 2ef:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 2f2:	6c                   	ins    BYTE PTR es:[edi],dx
 2f3:	73 00                	jae    2f5 <sysEnter_Vector-0x12fd0b>
 2f5:	6c                   	ins    BYTE PTR es:[edi],dx
 2f6:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 2f8:	67 74 68             	addr16 je 363 <sysEnter_Vector-0x12fc9d>
 2fb:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 2fe:	61                   	popa   
 2ff:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 303:	53                   	push   ebx
 304:	43                   	inc    ebx
 305:	41                   	inc    ecx
 306:	4c                   	dec    esp
 307:	4c                   	dec    esp
 308:	5f                   	pop    edi
 309:	53                   	push   ebx
 30a:	54                   	push   esp
 30b:	4f                   	dec    edi
 30c:	50                   	push   eax
 30d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 310:	53                   	push   ebx
 311:	43                   	inc    ebx
 312:	41                   	inc    ecx
 313:	4c                   	dec    esp
 314:	4c                   	dec    esp
 315:	5f                   	pop    edi
 316:	50                   	push   eax
 317:	52                   	push   edx
 318:	49                   	dec    ecx
 319:	4e                   	dec    esi
 31a:	54                   	push   esp
 31b:	44                   	inc    esp
 31c:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 31f:	66                   	data16
 320:	66                   	data16
 321:	65                   	gs
 322:	72 43                	jb     367 <sysEnter_Vector-0x12fc99>
 324:	6f                   	outs   dx,DWORD PTR ds:[esi]
 325:	75 6e                	jne    395 <sysEnter_Vector-0x12fc6b>
 327:	74 00                	je     329 <sysEnter_Vector-0x12fcd7>
 329:	53                   	push   ebx
 32a:	59                   	pop    ecx
 32b:	53                   	push   ebx
 32c:	43                   	inc    ebx
 32d:	41                   	inc    ecx
 32e:	4c                   	dec    esp
 32f:	4c                   	dec    esp
 330:	5f                   	pop    edi
 331:	46                   	inc    esi
 332:	52                   	push   edx
 333:	45                   	inc    ebp
 334:	45                   	inc    ebp
 335:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 338:	53                   	push   ebx
 339:	43                   	inc    ebx
 33a:	41                   	inc    ecx
 33b:	4c                   	dec    esp
 33c:	4c                   	dec    esp
 33d:	5f                   	pop    edi
 33e:	45                   	inc    ebp
 33f:	58                   	pop    eax
 340:	45                   	inc    ebp
 341:	43                   	inc    ebx
 342:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 345:	53                   	push   ebx
 346:	43                   	inc    ebx
 347:	41                   	inc    ecx
 348:	4c                   	dec    esp
 349:	4c                   	dec    esp
 34a:	5f                   	pop    edi
 34b:	49                   	dec    ecx
 34c:	4e                   	dec    esi
 34d:	56                   	push   esi
 34e:	41                   	inc    ecx
 34f:	4c                   	dec    esp
 350:	49                   	dec    ecx
 351:	44                   	inc    esp
 352:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 355:	53                   	push   ebx
 356:	43                   	inc    ebx
 357:	41                   	inc    ecx
 358:	4c                   	dec    esp
 359:	4c                   	dec    esp
 35a:	5f                   	pop    edi
 35b:	52                   	push   edx
 35c:	45                   	inc    ebp
 35d:	47                   	inc    edi
 35e:	45                   	inc    ebp
 35f:	58                   	pop    eax
 360:	49                   	dec    ecx
 361:	54                   	push   esp
 362:	48                   	dec    eax
 363:	41                   	inc    ecx
 364:	4e                   	dec    esi
 365:	44                   	inc    esp
 366:	4c                   	dec    esp
 367:	45                   	inc    ebp
 368:	52                   	push   edx
 369:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 36c:	53                   	push   ebx
 36d:	43                   	inc    ebx
 36e:	41                   	inc    ecx
 36f:	4c                   	dec    esp
 370:	4c                   	dec    esp
 371:	5f                   	pop    edi
 372:	47                   	inc    edi
 373:	45                   	inc    ebp
 374:	54                   	push   esp
 375:	54                   	push   esp
 376:	49                   	dec    ecx
 377:	43                   	inc    ebx
 378:	4b                   	dec    ebx
 379:	53                   	push   ebx
 37a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 37d:	53                   	push   ebx
 37e:	43                   	inc    ebx
 37f:	41                   	inc    ecx
 380:	4c                   	dec    esp
 381:	4c                   	dec    esp
 382:	5f                   	pop    edi
 383:	45                   	inc    ebp
 384:	4e                   	dec    esi
 385:	44                   	inc    esp
 386:	50                   	push   eax
 387:	52                   	push   edx
 388:	4f                   	dec    edi
 389:	43                   	inc    ebx
 38a:	45                   	inc    ebp
 38b:	53                   	push   ebx
 38c:	53                   	push   ebx
 38d:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 390:	66                   	data16
 391:	66                   	data16
 392:	65                   	gs
 393:	72 00                	jb     395 <sysEnter_Vector-0x12fc6b>
 395:	53                   	push   ebx
 396:	59                   	pop    ecx
 397:	53                   	push   ebx
 398:	43                   	inc    ebx
 399:	41                   	inc    ecx
 39a:	4c                   	dec    esp
 39b:	4c                   	dec    esp
 39c:	5f                   	pop    edi
 39d:	57                   	push   edi
 39e:	52                   	push   edx
 39f:	49                   	dec    ecx
 3a0:	54                   	push   esp
 3a1:	45                   	inc    ebp
 3a2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3a5:	53                   	push   ebx
 3a6:	43                   	inc    ebx
 3a7:	41                   	inc    ecx
 3a8:	4c                   	dec    esp
 3a9:	4c                   	dec    esp
 3aa:	5f                   	pop    edi
 3ab:	50                   	push   eax
 3ac:	52                   	push   edx
 3ad:	49                   	dec    ecx
 3ae:	4e                   	dec    esi
 3af:	54                   	push   esp
 3b0:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 3b3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3b4:	64                   	fs
 3b5:	6c                   	ins    BYTE PTR es:[edi],dx
 3b6:	65 00 73 69          	add    BYTE PTR gs:[ebx+0x69],dh
 3ba:	7a 65                	jp     421 <sysEnter_Vector-0x12fbdf>
 3bc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3bf:	53                   	push   ebx
 3c0:	43                   	inc    ebx
 3c1:	41                   	inc    ecx
 3c2:	4c                   	dec    esp
 3c3:	4c                   	dec    esp
 3c4:	5f                   	pop    edi
 3c5:	41                   	inc    ecx
 3c6:	4c                   	dec    esp
 3c7:	4c                   	dec    esp
 3c8:	4f                   	dec    edi
 3c9:	43                   	inc    ebx
 3ca:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3cd:	53                   	push   ebx
 3ce:	43                   	inc    ebx
 3cf:	41                   	inc    ecx
 3d0:	4c                   	dec    esp
 3d1:	4c                   	dec    esp
 3d2:	5f                   	pop    edi
 3d3:	47                   	inc    edi
 3d4:	45                   	inc    ebp
 3d5:	54                   	push   esp
 3d6:	43                   	inc    ebx
 3d7:	57                   	push   edi
 3d8:	44                   	inc    esp
 3d9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3dc:	53                   	push   ebx
 3dd:	43                   	inc    ebx
 3de:	41                   	inc    ecx
 3df:	4c                   	dec    esp
 3e0:	4c                   	dec    esp
 3e1:	5f                   	pop    edi
 3e2:	57                   	push   edi
 3e3:	41                   	inc    ecx
 3e4:	49                   	dec    ecx
 3e5:	54                   	push   esp
 3e6:	46                   	inc    esi
 3e7:	4f                   	dec    edi
 3e8:	52                   	push   edx
 3e9:	50                   	push   eax
 3ea:	49                   	dec    ecx
 3eb:	44                   	inc    esp
 3ec:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
 3ef:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 3f1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3f4:	53                   	push   ebx
 3f5:	43                   	inc    ebx
 3f6:	41                   	inc    ecx
 3f7:	4c                   	dec    esp
 3f8:	4c                   	dec    esp
 3f9:	5f                   	pop    edi
 3fa:	53                   	push   ebx
 3fb:	45                   	inc    ebp
 3fc:	54                   	push   esp
 3fd:	53                   	push   ebx
 3fe:	49                   	dec    ecx
 3ff:	47                   	inc    edi
 400:	41                   	inc    ecx
 401:	43                   	inc    ebx
 402:	54                   	push   esp
 403:	49                   	dec    ecx
 404:	4f                   	dec    edi
 405:	4e                   	dec    esi
 406:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 409:	72 65                	jb     470 <sysEnter_Vector-0x12fb90>
 40b:	61                   	popa   
 40c:	6d                   	ins    DWORD PTR es:[edi],dx
 40d:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 410:	74 73                	je     485 <sysEnter_Vector-0x12fb7b>
 412:	45                   	inc    ebp
 413:	72 72                	jb     487 <sysEnter_Vector-0x12fb79>
 415:	6f                   	outs   dx,DWORD PTR ds:[esi]
 416:	72 00                	jb     418 <sysEnter_Vector-0x12fbe8>
 418:	6c                   	ins    BYTE PTR es:[edi],dx
 419:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 41c:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 41f:	63 2f                	arpl   WORD PTR [edi],bp
 421:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 428:	6e                   	outs   dx,BYTE PTR ds:[esi]
 429:	70 75                	jo     4a0 <sysEnter_Vector-0x12fb60>
 42b:	74 2e                	je     45b <sysEnter_Vector-0x12fba5>
 42d:	63 00                	arpl   WORD PTR [eax],ax
 42f:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 436:	67                   	addr16
 437:	65                   	gs
 438:	74 63                	je     49d <sysEnter_Vector-0x12fb63>
 43a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 43d:	78 6c                	js     4ab <sysEnter_Vector-0x12fb55>
 43f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 441:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 444:	74 73                	je     4b9 <sysEnter_Vector-0x12fb47>
 446:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 449:	74 63                	je     4ae <sysEnter_Vector-0x12fb52>
 44b:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 44e:	74 73                	je     4c3 <sysEnter_Vector-0x12fb3d>
 450:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 453:	74 56                	je     4ab <sysEnter_Vector-0x12fb55>
 455:	61                   	popa   
 456:	6c                   	ins    BYTE PTR es:[edi],dx
 457:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 45b:	68 6f 75 72 00       	push   0x72756f
 460:	73 69                	jae    4cb <sysEnter_Vector-0x12fb35>
 462:	7a 65                	jp     4c9 <sysEnter_Vector-0x12fb37>
 464:	5f                   	pop    edi
 465:	74 00                	je     467 <sysEnter_Vector-0x12fb99>
 467:	73 6c                	jae    4d5 <sysEnter_Vector-0x12fb2b>
 469:	65                   	gs
 46a:	65                   	gs
 46b:	70 00                	jo     46d <sysEnter_Vector-0x12fb93>
 46d:	73 69                	jae    4d8 <sysEnter_Vector-0x12fb28>
 46f:	67 44                	addr16 inc esp
 471:	61                   	popa   
 472:	74 61                	je     4d5 <sysEnter_Vector-0x12fb2b>
 474:	00 74 68 65          	add    BYTE PTR [eax+ebp*2+0x65],dh
 478:	54                   	push   esp
 479:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 480:	7a 6f                	jp     4f1 <sysEnter_Vector-0x12fb0f>
 482:	6e                   	outs   dx,BYTE PTR ds:[esi]
 483:	65 00 6c 69 62       	add    BYTE PTR gs:[ecx+ebp*2+0x62],ch
 488:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 48b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 48c:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
 493:	74 
 494:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 497:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 49a:	6c                   	ins    BYTE PTR es:[edi],dx
 49b:	74 69                	je     506 <sysEnter_Vector-0x12fafa>
 49d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 49e:	5f                   	pop    edi
 49f:	76 61                	jbe    502 <sysEnter_Vector-0x12fafe>
 4a1:	5f                   	pop    edi
 4a2:	6c                   	ins    BYTE PTR es:[edi],dx
 4a3:	69 73 74 00 74 6d 5f 	imul   esi,DWORD PTR [ebx+0x74],0x5f6d7400
 4aa:	6d                   	ins    DWORD PTR es:[edi],dx
 4ab:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4ad:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 4b1:	79 65                	jns    518 <sysEnter_Vector-0x12fae8>
 4b3:	61                   	popa   
 4b4:	72 00                	jb     4b6 <sysEnter_Vector-0x12fb4a>
 4b6:	67                   	addr16
 4b7:	65                   	gs
 4b8:	74 74                	je     52e <sysEnter_Vector-0x12fad2>
 4ba:	69 6d 65 00 77 61 69 	imul   ebp,DWORD PTR [ebp+0x65],0x69617700
 4c1:	74 70                	je     533 <sysEnter_Vector-0x12facd>
 4c3:	69 64 00 44 65 62 75 	imul   esp,DWORD PTR [eax+eax*1+0x44],0x67756265
 4ca:	67 
 4cb:	4c                   	dec    esp
 4cc:	65                   	gs
 4cd:	76 65                	jbe    534 <sysEnter_Vector-0x12facc>
 4cf:	6c                   	ins    BYTE PTR es:[edi],dx
 4d0:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 4d3:	6c                   	ins    BYTE PTR es:[edi],dx
 4d4:	6c                   	ins    BYTE PTR es:[edi],dx
 4d5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4d6:	75 6d                	jne    545 <sysEnter_Vector-0x12fabb>
 4d8:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 4dc:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 4e3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4e4:	5f                   	pop    edi
 4e5:	73 79                	jae    560 <sysEnter_Vector-0x12faa0>
 4e7:	73 63                	jae    54c <sysEnter_Vector-0x12fab4>
 4e9:	61                   	popa   
 4ea:	6c                   	ins    BYTE PTR es:[edi],dx
 4eb:	6c                   	ins    BYTE PTR es:[edi],dx
 4ec:	30 00                	xor    BYTE PTR [eax],al
 4ee:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 4f0:	5f                   	pop    edi
 4f1:	73 79                	jae    56c <sysEnter_Vector-0x12fa94>
 4f3:	73 63                	jae    558 <sysEnter_Vector-0x12faa8>
 4f5:	61                   	popa   
 4f6:	6c                   	ins    BYTE PTR es:[edi],dx
 4f7:	6c                   	ins    BYTE PTR es:[edi],dx
 4f8:	31 00                	xor    DWORD PTR [eax],eax
 4fa:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 4fc:	5f                   	pop    edi
 4fd:	73 79                	jae    578 <sysEnter_Vector-0x12fa88>
 4ff:	73 63                	jae    564 <sysEnter_Vector-0x12fa9c>
 501:	61                   	popa   
 502:	6c                   	ins    BYTE PTR es:[edi],dx
 503:	6c                   	ins    BYTE PTR es:[edi],dx
 504:	32 00                	xor    al,BYTE PTR [eax]
 506:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 508:	5f                   	pop    edi
 509:	73 79                	jae    584 <sysEnter_Vector-0x12fa7c>
 50b:	73 63                	jae    570 <sysEnter_Vector-0x12fa90>
 50d:	61                   	popa   
 50e:	6c                   	ins    BYTE PTR es:[edi],dx
 50f:	6c                   	ins    BYTE PTR es:[edi],dx
 510:	33 00                	xor    eax,DWORD PTR [eax]
 512:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 514:	5f                   	pop    edi
 515:	73 79                	jae    590 <sysEnter_Vector-0x12fa70>
 517:	73 63                	jae    57c <sysEnter_Vector-0x12fa84>
 519:	61                   	popa   
 51a:	6c                   	ins    BYTE PTR es:[edi],dx
 51b:	6c                   	ins    BYTE PTR es:[edi],dx
 51c:	34 00                	xor    al,0x0
 51e:	6c                   	ins    BYTE PTR es:[edi],dx
 51f:	69 62 63 49 6e 69 74 	imul   esp,DWORD PTR [edx+0x63],0x74696e49
 526:	69 61 6c 69 7a 65 64 	imul   esp,DWORD PTR [ecx+0x6c],0x64657a69
 52d:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 531:	6d                   	ins    DWORD PTR es:[edi],dx
 532:	69 6e 00 74 69 63 6b 	imul   ebp,DWORD PTR [esi+0x0],0x6b636974
 539:	73 00                	jae    53b <sysEnter_Vector-0x12fac5>
 53b:	74 6d                	je     5aa <sysEnter_Vector-0x12fa56>
 53d:	5f                   	pop    edi
 53e:	79 64                	jns    5a4 <sysEnter_Vector-0x12fa5c>
 540:	61                   	popa   
 541:	79 00                	jns    543 <sysEnter_Vector-0x12fabd>
 543:	5f                   	pop    edi
 544:	5f                   	pop    edi
 545:	67 6e                	outs   dx,BYTE PTR ds:[si]
 547:	75 63                	jne    5ac <sysEnter_Vector-0x12fa54>
 549:	5f                   	pop    edi
 54a:	76 61                	jbe    5ad <sysEnter_Vector-0x12fa53>
 54c:	5f                   	pop    edi
 54d:	6c                   	ins    BYTE PTR es:[edi],dx
 54e:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 555:	6e                   	outs   dx,BYTE PTR ds:[esi]
 556:	74 64                	je     5bc <sysEnter_Vector-0x12fa44>
 558:	49                   	dec    ecx
 559:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 55c:	72 61                	jb     5bf <sysEnter_Vector-0x12fa41>
 55e:	6d                   	ins    DWORD PTR es:[edi],dx
 55f:	31 00                	xor    DWORD PTR [eax],eax
 561:	70 61                	jo     5c4 <sysEnter_Vector-0x12fa3c>
 563:	72 61                	jb     5c6 <sysEnter_Vector-0x12fa3a>
 565:	6d                   	ins    DWORD PTR es:[edi],dx
 566:	32 00                	xor    al,BYTE PTR [eax]
 568:	70 61                	jo     5cb <sysEnter_Vector-0x12fa35>
 56a:	72 61                	jb     5cd <sysEnter_Vector-0x12fa33>
 56c:	6d                   	ins    DWORD PTR es:[edi],dx
 56d:	33 00                	xor    eax,DWORD PTR [eax]
 56f:	70 61                	jo     5d2 <sysEnter_Vector-0x12fa2e>
 571:	72 61                	jb     5d4 <sysEnter_Vector-0x12fa2c>
 573:	6d                   	ins    DWORD PTR es:[edi],dx
 574:	34 00                	xor    al,0x0
 576:	66 6f                	outs   dx,WORD PTR ds:[esi]
 578:	72 6d                	jb     5e7 <sysEnter_Vector-0x12fa19>
 57a:	61                   	popa   
 57b:	74 00                	je     57d <sysEnter_Vector-0x12fa83>
 57d:	74 6d                	je     5ec <sysEnter_Vector-0x12fa14>
 57f:	5f                   	pop    edi
 580:	67 6d                	ins    DWORD PTR es:[di],dx
 582:	74 6f                	je     5f3 <sysEnter_Vector-0x12fa0d>
 584:	66                   	data16
 585:	66                   	data16
 586:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 589:	67 6e                	outs   dx,BYTE PTR ds:[si]
 58b:	61                   	popa   
 58c:	6c                   	ins    BYTE PTR es:[edi],dx
 58d:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 590:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 593:	5f                   	pop    edi
 594:	5f                   	pop    edi
 595:	73 65                	jae    5fc <sysEnter_Vector-0x12fa04>
 597:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 59a:	64                   	fs
 59b:	73 00                	jae    59d <sysEnter_Vector-0x12fa63>
 59d:	73 72                	jae    611 <sysEnter_Vector-0x12f9ef>
 59f:	63 2f                	arpl   WORD PTR [edi],bp
 5a1:	6c                   	ins    BYTE PTR es:[edi],dx
 5a2:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 5a9:	4f                   	dec    edi
 5aa:	53                   	push   ebx
 5ab:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 5ae:	61                   	popa   
 5af:	72 67                	jb     618 <sysEnter_Vector-0x12f9e8>
 5b1:	63 00                	arpl   WORD PTR [eax],ax
 5b3:	74 6d                	je     622 <sysEnter_Vector-0x12f9de>
 5b5:	5f                   	pop    edi
 5b6:	77 64                	ja     61c <sysEnter_Vector-0x12f9e4>
 5b8:	61                   	popa   
 5b9:	79 00                	jns    5bb <sysEnter_Vector-0x12fa45>
 5bb:	74 6d                	je     62a <sysEnter_Vector-0x12f9d6>
 5bd:	5f                   	pop    edi
 5be:	6d                   	ins    DWORD PTR es:[edi],dx
 5bf:	64                   	fs
 5c0:	61                   	popa   
 5c1:	79 00                	jns    5c3 <sysEnter_Vector-0x12fa3d>
 5c3:	6c                   	ins    BYTE PTR es:[edi],dx
 5c4:	69 62 63 5f 63 6c 65 	imul   esp,DWORD PTR [edx+0x63],0x656c635f
 5cb:	61                   	popa   
 5cc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5cd:	75 70                	jne    63f <sysEnter_Vector-0x12f9c1>
 5cf:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 5d3:	73 65                	jae    63a <sysEnter_Vector-0x12f9c6>
 5d5:	63 00                	arpl   WORD PTR [eax],ax
 5d7:	61                   	popa   
 5d8:	72 67                	jb     641 <sysEnter_Vector-0x12f9bf>
 5da:	76 00                	jbe    5dc <sysEnter_Vector-0x12fa24>
 5dc:	73 69                	jae    647 <sysEnter_Vector-0x12f9b9>
 5de:	67 48                	addr16 dec eax
 5e0:	61                   	popa   
 5e1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5e2:	64                   	fs
 5e3:	6c                   	ins    BYTE PTR es:[edi],dx
 5e4:	65                   	gs
 5e5:	72 00                	jb     5e7 <sysEnter_Vector-0x12fa19>
 5e7:	6d                   	ins    DWORD PTR es:[edi],dx
 5e8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5e9:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 5f0:	6e 
 5f1:	61                   	popa   
 5f2:	6c                   	ins    BYTE PTR es:[edi],dx
 5f3:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 5f6:	67 73 00             	addr16 jae 5f9 <sysEnter_Vector-0x12fa07>
 5f9:	70 72                	jo     66d <sysEnter_Vector-0x12f993>
 5fb:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 602:	6f                   	outs   dx,DWORD PTR ds:[esi]
 603:	70 00                	jo     605 <sysEnter_Vector-0x12f9fb>
 605:	67                   	addr16
 606:	65                   	gs
 607:	74 63                	je     66c <sysEnter_Vector-0x12f994>
 609:	77 64                	ja     66f <sysEnter_Vector-0x12f991>
 60b:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 60e:	6c                   	ins    BYTE PTR es:[edi],dx
 60f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 610:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 613:	65                   	gs
 614:	64                   	fs
 615:	50                   	push   eax
 616:	74 72                	je     68a <sysEnter_Vector-0x12f976>
 618:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 61b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 61c:	69 6e 74 65 72 00 6e 	imul   ebp,DWORD PTR [esi+0x74],0x6e007265
 623:	65                   	gs
 624:	77 53                	ja     679 <sysEnter_Vector-0x12f987>
 626:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 62d:	6c                   	ins    BYTE PTR es:[edi],dx
 62e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 62f:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 632:	6c                   	ins    BYTE PTR es:[edi],dx
 633:	65                   	gs
 634:	61                   	popa   
 635:	6e                   	outs   dx,BYTE PTR ds:[esi]
 636:	75 70                	jne    6a8 <sysEnter_Vector-0x12f958>
 638:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 63b:	72 6b                	jb     6a8 <sysEnter_Vector-0x12f958>
 63d:	65                   	gs
 63e:	72 00                	jb     640 <sysEnter_Vector-0x12f9c0>
 640:	6d                   	ins    DWORD PTR es:[edi],dx
 641:	61                   	popa   
 642:	6c                   	ins    BYTE PTR es:[edi],dx
 643:	6c                   	ins    BYTE PTR es:[edi],dx
 644:	6f                   	outs   dx,DWORD PTR ds:[esi]
 645:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 648:	75 69                	jne    6b3 <sysEnter_Vector-0x12f94d>
 64a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 64b:	74 38                	je     685 <sysEnter_Vector-0x12f97b>
 64d:	5f                   	pop    edi
 64e:	74 00                	je     650 <sysEnter_Vector-0x12f9b0>
 650:	66                   	data16
 651:	72 65                	jb     6b8 <sysEnter_Vector-0x12f948>
 653:	65 00 68 65          	add    BYTE PTR gs:[eax+0x65],ch
 657:	61                   	popa   
 658:	70 50                	jo     6aa <sysEnter_Vector-0x12f956>
 65a:	74 72                	je     6ce <sysEnter_Vector-0x12f932>
 65c:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 65f:	65 64 65 64 00 73 68 	gs fs gs add BYTE PTR fs:gs:[ebx+0x68],dh
 666:	65                   	gs
 667:	61                   	popa   
 668:	70 00                	jo     66a <sysEnter_Vector-0x12f996>
 66a:	69 6e 55 73 65 00 69 	imul   ebp,DWORD PTR [esi+0x55],0x69006573
 671:	6e                   	outs   dx,BYTE PTR ds:[esi]
 672:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
 679:	63 
 67a:	00 67 6f             	add    BYTE PTR [edi+0x6f],ah
 67d:	74 6f                	je     6ee <sysEnter_Vector-0x12f912>
 67f:	48                   	dec    eax
 680:	65                   	gs
 681:	72 65                	jb     6e8 <sysEnter_Vector-0x12f918>
 683:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 686:	61                   	popa   
 687:	70 50                	jo     6d9 <sysEnter_Vector-0x12f927>
 689:	74 72                	je     6fd <sysEnter_Vector-0x12f903>
 68b:	4e                   	dec    esi
 68c:	65                   	gs
 68d:	78 74                	js     703 <sysEnter_Vector-0x12f8fd>
 68f:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 692:	77 48                	ja     6dc <sysEnter_Vector-0x12f924>
 694:	65                   	gs
 695:	61                   	popa   
 696:	70 52                	jo     6ea <sysEnter_Vector-0x12f916>
 698:	65                   	gs
 699:	71 75                	jno    710 <sysEnter_Vector-0x12f8f0>
 69b:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 6a2:	75 6c                	jne    710 <sysEnter_Vector-0x12f8f0>
 6a4:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 6ab:	75 65                	jne    712 <sysEnter_Vector-0x12f8ee>
 6ad:	73 74                	jae    723 <sysEnter_Vector-0x12f8dd>
 6af:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6b2:	63 2f                	arpl   WORD PTR [edi],bp
 6b4:	6d                   	ins    DWORD PTR es:[edi],dx
 6b5:	61                   	popa   
 6b6:	6c                   	ins    BYTE PTR es:[edi],dx
 6b7:	6c                   	ins    BYTE PTR es:[edi],dx
 6b8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6b9:	63 2e                	arpl   WORD PTR [esi],bp
 6bb:	63 00                	arpl   WORD PTR [eax],ax
 6bd:	70 72                	jo     731 <sysEnter_Vector-0x12f8cf>
 6bf:	65                   	gs
 6c0:	76 00                	jbe    6c2 <sysEnter_Vector-0x12f93e>
 6c2:	68 65 61 70 72       	push   0x72706165
 6c7:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 6cb:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6ce:	63 2f                	arpl   WORD PTR [edi],bp
 6d0:	6d                   	ins    DWORD PTR es:[edi],dx
 6d1:	65                   	gs
 6d2:	6d                   	ins    DWORD PTR es:[edi],dx
 6d3:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 6d6:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 6d9:	64                   	fs
 6da:	65                   	gs
 6db:	73 74                	jae    751 <sysEnter_Vector-0x12f8af>
 6dd:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 6e0:	6d                   	ins    DWORD PTR es:[edi],dx
 6e1:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 6e4:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 6e7:	61                   	popa   
 6e8:	6c                   	ins    BYTE PTR es:[edi],dx
 6e9:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 6ec:	6d                   	ins    DWORD PTR es:[edi],dx
 6ed:	73 65                	jae    754 <sysEnter_Vector-0x12f8ac>
 6ef:	74 00                	je     6f1 <sysEnter_Vector-0x12f90f>
 6f1:	73 72                	jae    765 <sysEnter_Vector-0x12f89b>
 6f3:	63 2f                	arpl   WORD PTR [edi],bp
 6f5:	6d                   	ins    DWORD PTR es:[edi],dx
 6f6:	65                   	gs
 6f7:	6d                   	ins    DWORD PTR es:[edi],dx
 6f8:	73 65                	jae    75f <sysEnter_Vector-0x12f8a1>
 6fa:	74 2e                	je     72a <sysEnter_Vector-0x12f8d6>
 6fc:	63 00                	arpl   WORD PTR [eax],ax
 6fe:	66 56                	push   si
 700:	61                   	popa   
 701:	6c                   	ins    BYTE PTR es:[edi],dx
 702:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 705:	6d                   	ins    DWORD PTR es:[edi],dx
 706:	73 65                	jae    76d <sysEnter_Vector-0x12f893>
 708:	74 49                	je     753 <sysEnter_Vector-0x12f8ad>
 70a:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 70d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 70e:	74 31                	je     741 <sysEnter_Vector-0x12f8bf>
 710:	36                   	ss
 711:	5f                   	pop    edi
 712:	74 00                	je     714 <sysEnter_Vector-0x12f8ec>
 714:	61                   	popa   
 715:	64                   	fs
 716:	64                   	fs
 717:	72 00                	jb     719 <sysEnter_Vector-0x12f8e7>
 719:	6f                   	outs   dx,DWORD PTR ds:[esi]
 71a:	66 66 5f             	data32 pop di
 71d:	74 00                	je     71f <sysEnter_Vector-0x12f8e1>
 71f:	70 72                	jo     793 <sysEnter_Vector-0x12f86d>
 721:	6f                   	outs   dx,DWORD PTR ds:[esi]
 722:	74 00                	je     724 <sysEnter_Vector-0x12f8dc>
 724:	6f                   	outs   dx,DWORD PTR ds:[esi]
 725:	66                   	data16
 726:	66                   	data16
 727:	73 65                	jae    78e <sysEnter_Vector-0x12f872>
 729:	74 00                	je     72b <sysEnter_Vector-0x12f8d5>
 72b:	6d                   	ins    DWORD PTR es:[edi],dx
 72c:	6d                   	ins    DWORD PTR es:[edi],dx
 72d:	61                   	popa   
 72e:	70 00                	jo     730 <sysEnter_Vector-0x12f8d0>
 730:	73 72                	jae    7a4 <sysEnter_Vector-0x12f85c>
 732:	63 2f                	arpl   WORD PTR [edi],bp
 734:	6d                   	ins    DWORD PTR es:[edi],dx
 735:	6d                   	ins    DWORD PTR es:[edi],dx
 736:	61                   	popa   
 737:	70 2e                	jo     767 <sysEnter_Vector-0x12f899>
 739:	63 00                	arpl   WORD PTR [eax],ax
 73b:	73 5f                	jae    79c <sysEnter_Vector-0x12f864>
 73d:	64                   	fs
 73e:	65                   	gs
 73f:	76 00                	jbe    741 <sysEnter_Vector-0x12f8bf>
 741:	75 69                	jne    7ac <sysEnter_Vector-0x12f854>
 743:	6e                   	outs   dx,BYTE PTR ds:[esi]
 744:	74 36                	je     77c <sysEnter_Vector-0x12f884>
 746:	34 5f                	xor    al,0x5f
 748:	74 00                	je     74a <sysEnter_Vector-0x12f8b6>
 74a:	6d                   	ins    DWORD PTR es:[edi],dx
 74b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 74c:	74 5f                	je     7ad <sysEnter_Vector-0x12f853>
 74e:	66                   	data16
 74f:	6c                   	ins    BYTE PTR es:[edi],dx
 750:	61                   	popa   
 751:	67 73 00             	addr16 jae 754 <sysEnter_Vector-0x12f8ac>
 754:	63 6f 6c             	arpl   WORD PTR [edi+0x6c],bp
 757:	53                   	push   ebx
 758:	74 72                	je     7cc <sysEnter_Vector-0x12f834>
 75a:	69 6e 67 00 6d 6b 6e 	imul   ebp,DWORD PTR [esi+0x67],0x6e6b6d00
 761:	6f                   	outs   dx,DWORD PTR ds:[esi]
 762:	64 00 6e 65          	add    BYTE PTR fs:[esi+0x65],ch
 766:	78 74                	js     7dc <sysEnter_Vector-0x12f824>
 768:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 76b:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 772:	66 
 773:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 776:	74 5f                	je     7d7 <sysEnter_Vector-0x12f829>
 778:	73 62                	jae    7dc <sysEnter_Vector-0x12f824>
 77a:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 77d:	6c                   	ins    BYTE PTR es:[edi],dx
 77e:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 785:	65                   	gs
 786:	72 5f                	jb     7e7 <sysEnter_Vector-0x12f819>
 788:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 78c:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 78f:	5f                   	pop    edi
 790:	76 66                	jbe    7f8 <sysEnter_Vector-0x12f808>
 792:	73 6d                	jae    801 <sysEnter_Vector-0x12f7ff>
 794:	6f                   	outs   dx,DWORD PTR ds:[esi]
 795:	75 6e                	jne    805 <sysEnter_Vector-0x12f7fb>
 797:	74 00                	je     799 <sysEnter_Vector-0x12f867>
 799:	72 65                	jb     800 <sysEnter_Vector-0x12f800>
 79b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 79c:	61                   	popa   
 79d:	6d                   	ins    DWORD PTR es:[edi],dx
 79e:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 7a3:	61                   	popa   
 7a4:	6d                   	ins    DWORD PTR es:[edi],dx
 7a5:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 7a9:	63 2f                	arpl   WORD PTR [edi],bp
 7ab:	73 74                	jae    821 <sysEnter_Vector-0x12f7df>
 7ad:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 7b4:	65 
 7b5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7b6:	74 72                	je     82a <sysEnter_Vector-0x12f7d6>
 7b8:	79 00                	jns    7ba <sysEnter_Vector-0x12f846>
 7ba:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 7c1:	65                   	gs
 7c2:	72 61                	jb     825 <sysEnter_Vector-0x12f7db>
 7c4:	74 69                	je     82f <sysEnter_Vector-0x12f7d1>
 7c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7c8:	73 00                	jae    7ca <sysEnter_Vector-0x12f836>
 7ca:	72 6d                	jb     839 <sysEnter_Vector-0x12f7c7>
 7cc:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 7d3:	69 
 7d4:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 7d9:	69 73 74 5f 74 00 72 	imul   esi,DWORD PTR [ebx+0x74],0x7200745f
 7e0:	65                   	gs
 7e1:	61                   	popa   
 7e2:	64                   	fs
 7e3:	43                   	inc    ebx
 7e4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7e5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7e6:	73 6f                	jae    857 <sysEnter_Vector-0x12f7a9>
 7e8:	6c                   	ins    BYTE PTR es:[edi],dx
 7e9:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
 7ed:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7ee:	64                   	fs
 7ef:	65                   	gs
 7f0:	5f                   	pop    edi
 7f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7f2:	70 65                	jo     859 <sysEnter_Vector-0x12f7a7>
 7f4:	72 61                	jb     857 <sysEnter_Vector-0x12f7a9>
 7f6:	74 69                	je     861 <sysEnter_Vector-0x12f79f>
 7f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7f9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7fa:	73 00                	jae    7fc <sysEnter_Vector-0x12f804>
 7fc:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 803:	67 73 00             	addr16 jae 806 <sysEnter_Vector-0x12f7fa>
 806:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 80d:	65                   	gs
 80e:	72 61                	jb     871 <sysEnter_Vector-0x12f78f>
 810:	74 69                	je     87b <sysEnter_Vector-0x12f785>
 812:	6f                   	outs   dx,DWORD PTR ds:[esi]
 813:	6e                   	outs   dx,BYTE PTR ds:[esi]
 814:	73 5f                	jae    875 <sysEnter_Vector-0x12f78b>
 816:	74 00                	je     818 <sysEnter_Vector-0x12f7e8>
 818:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 81b:	66 50                	push   ax
 81d:	74 72                	je     891 <sysEnter_Vector-0x12f76f>
 81f:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 822:	64                   	fs
 823:	65                   	gs
 824:	76 00                	jbe    826 <sysEnter_Vector-0x12f7da>
 826:	6d                   	ins    DWORD PTR es:[edi],dx
 827:	6f                   	outs   dx,DWORD PTR ds:[esi]
 828:	76 65                	jbe    88f <sysEnter_Vector-0x12f771>
 82a:	54                   	push   esp
 82b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 82c:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 82f:	69 74 65 00 66 70 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x72747066
 836:	72 
 837:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 83a:	69 74 65 43 6f 6e 73 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x6f736e6f
 841:	6f 
 842:	6c                   	ins    BYTE PTR es:[edi],dx
 843:	65 00 70 61          	add    BYTE PTR gs:[eax+0x61],dh
 847:	79 6c                	jns    8b5 <sysEnter_Vector-0x12f74b>
 849:	6f                   	outs   dx,DWORD PTR ds:[esi]
 84a:	61                   	popa   
 84b:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 84f:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 856:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 859:	6f                   	outs   dx,DWORD PTR ds:[esi]
 85a:	70 00                	jo     85c <sysEnter_Vector-0x12f7a4>
 85c:	6d                   	ins    DWORD PTR es:[edi],dx
 85d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 85e:	74 5f                	je     8bf <sysEnter_Vector-0x12f741>
 860:	72 6f                	jb     8d1 <sysEnter_Vector-0x12f72f>
 862:	6f                   	outs   dx,DWORD PTR ds:[esi]
 863:	74 00                	je     865 <sysEnter_Vector-0x12f79b>
 865:	69 6f 49 6e 69 74 00 	imul   ebp,DWORD PTR [edi+0x49],0x74696e
 86c:	66 6f                	outs   dx,WORD PTR ds:[esi]
 86e:	70 73                	jo     8e3 <sysEnter_Vector-0x12f71d>
 870:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 873:	6c                   	ins    BYTE PTR es:[edi],dx
 874:	65                   	gs
 875:	5f                   	pop    edi
 876:	74 00                	je     878 <sysEnter_Vector-0x12f788>
 878:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 87f:	00 77 68             	add    BYTE PTR [edi+0x68],dh
 882:	61                   	popa   
 883:	74 65                	je     8ea <sysEnter_Vector-0x12f716>
 885:	76 65                	jbe    8ec <sysEnter_Vector-0x12f714>
 887:	72 00                	jb     889 <sysEnter_Vector-0x12f777>
 889:	69 5f 75 69 64 00 69 	imul   ebx,DWORD PTR [edi+0x75],0x69006469
 890:	5f                   	pop    edi
 891:	6d                   	ins    DWORD PTR es:[edi],dx
 892:	6f                   	outs   dx,DWORD PTR ds:[esi]
 893:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 898:	6e                   	outs   dx,BYTE PTR ds:[esi]
 899:	73 6f                	jae    90a <sysEnter_Vector-0x12f6f6>
 89b:	6c                   	ins    BYTE PTR es:[edi],dx
 89c:	65                   	gs
 89d:	5f                   	pop    edi
 89e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 89f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8a0:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 8a5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8a6:	64                   	fs
 8a7:	65                   	gs
 8a8:	5f                   	pop    edi
 8a9:	74 00                	je     8ab <sysEnter_Vector-0x12f755>
 8ab:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 8ae:	73 6f                	jae    91f <sysEnter_Vector-0x12f6e1>
 8b0:	6c                   	ins    BYTE PTR es:[edi],dx
 8b1:	65                   	gs
 8b2:	5f                   	pop    edi
 8b3:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 8ba:	72 6f                	jb     92b <sysEnter_Vector-0x12f6d5>
 8bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8bd:	74 00                	je     8bf <sysEnter_Vector-0x12f741>
 8bf:	64                   	fs
 8c0:	5f                   	pop    edi
 8c1:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 8c8:	65                   	gs
 8c9:	73 65                	jae    930 <sysEnter_Vector-0x12f6d0>
 8cb:	74 52                	je     91f <sysEnter_Vector-0x12f6e1>
 8cd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8ce:	77 00                	ja     8d0 <sysEnter_Vector-0x12f730>
 8d0:	64                   	fs
 8d1:	5f                   	pop    edi
 8d2:	70 61                	jo     935 <sysEnter_Vector-0x12f6cb>
 8d4:	72 65                	jb     93b <sysEnter_Vector-0x12f6c5>
 8d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8d7:	74 00                	je     8d9 <sysEnter_Vector-0x12f727>
 8d9:	66 5f                	pop    di
 8db:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 8e2:	5f                   	pop    edi
 8e3:	70 61                	jo     946 <sysEnter_Vector-0x12f6ba>
 8e5:	74 68                	je     94f <sysEnter_Vector-0x12f6b1>
 8e7:	00 72 6f             	add    BYTE PTR [edx+0x6f],dh
 8ea:	77 53                	ja     93f <sysEnter_Vector-0x12f6c1>
 8ec:	74 72                	je     960 <sysEnter_Vector-0x12f6a0>
 8ee:	69 6e 67 00 63 72 65 	imul   ebp,DWORD PTR [esi+0x67],0x65726300
 8f5:	61                   	popa   
 8f6:	74 65                	je     95d <sysEnter_Vector-0x12f6a3>
 8f8:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 8fb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8fc:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 8ff:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 901:	61                   	popa   
 902:	74 65                	je     969 <sysEnter_Vector-0x12f697>
 904:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 907:	72 63                	jb     96c <sysEnter_Vector-0x12f694>
 909:	61                   	popa   
 90a:	74 49                	je     955 <sysEnter_Vector-0x12f6ab>
 90c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 90f:	72 63                	jb     974 <sysEnter_Vector-0x12f68c>
 911:	61                   	popa   
 912:	74 00                	je     914 <sysEnter_Vector-0x12f6ec>
 914:	73 72                	jae    988 <sysEnter_Vector-0x12f678>
 916:	63 2f                	arpl   WORD PTR [edi],bp
 918:	73 74                	jae    98e <sysEnter_Vector-0x12f672>
 91a:	72 69                	jb     985 <sysEnter_Vector-0x12f67b>
 91c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 91d:	67 73 2f             	addr16 jae 94f <sysEnter_Vector-0x12f6b1>
 920:	73 74                	jae    996 <sysEnter_Vector-0x12f66a>
 922:	72 63                	jb     987 <sysEnter_Vector-0x12f679>
 924:	61                   	popa   
 925:	74 2e                	je     955 <sysEnter_Vector-0x12f6ab>
 927:	63 00                	arpl   WORD PTR [eax],ax
 929:	73 74                	jae    99f <sysEnter_Vector-0x12f661>
 92b:	72 63                	jb     990 <sysEnter_Vector-0x12f670>
 92d:	6d                   	ins    DWORD PTR es:[edi],dx
 92e:	70 00                	jo     930 <sysEnter_Vector-0x12f6d0>
 930:	73 72                	jae    9a4 <sysEnter_Vector-0x12f65c>
 932:	63 2f                	arpl   WORD PTR [edi],bp
 934:	73 74                	jae    9aa <sysEnter_Vector-0x12f656>
 936:	72 69                	jb     9a1 <sysEnter_Vector-0x12f65f>
 938:	6e                   	outs   dx,BYTE PTR ds:[esi]
 939:	67 73 2f             	addr16 jae 96b <sysEnter_Vector-0x12f695>
 93c:	73 74                	jae    9b2 <sysEnter_Vector-0x12f64e>
 93e:	72 63                	jb     9a3 <sysEnter_Vector-0x12f65d>
 940:	6d                   	ins    DWORD PTR es:[edi],dx
 941:	70 2e                	jo     971 <sysEnter_Vector-0x12f68f>
 943:	63 00                	arpl   WORD PTR [eax],ax
 945:	63 6f 75             	arpl   WORD PTR [edi+0x75],bp
 948:	6e                   	outs   dx,BYTE PTR ds:[esi]
 949:	74 00                	je     94b <sysEnter_Vector-0x12f6b5>
 94b:	73 74                	jae    9c1 <sysEnter_Vector-0x12f63f>
 94d:	72 63                	jb     9b2 <sysEnter_Vector-0x12f64e>
 94f:	70 79                	jo     9ca <sysEnter_Vector-0x12f636>
 951:	63 00                	arpl   WORD PTR [eax],ax
 953:	73 74                	jae    9c9 <sysEnter_Vector-0x12f637>
 955:	72 63                	jb     9ba <sysEnter_Vector-0x12f646>
 957:	70 79                	jo     9d2 <sysEnter_Vector-0x12f62e>
 959:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 95c:	63 2f                	arpl   WORD PTR [edi],bp
 95e:	73 74                	jae    9d4 <sysEnter_Vector-0x12f62c>
 960:	72 69                	jb     9cb <sysEnter_Vector-0x12f635>
 962:	6e                   	outs   dx,BYTE PTR ds:[esi]
 963:	67 73 2f             	addr16 jae 995 <sysEnter_Vector-0x12f66b>
 966:	73 74                	jae    9dc <sysEnter_Vector-0x12f624>
 968:	72 63                	jb     9cd <sysEnter_Vector-0x12f633>
 96a:	70 79                	jo     9e5 <sysEnter_Vector-0x12f61b>
 96c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 96f:	73 74                	jae    9e5 <sysEnter_Vector-0x12f61b>
 971:	72 63                	jb     9d6 <sysEnter_Vector-0x12f62a>
 973:	70 79                	jo     9ee <sysEnter_Vector-0x12f612>
 975:	49                   	dec    ecx
 976:	00 63 68             	add    BYTE PTR [ebx+0x68],ah
 979:	65 63 6b 5f          	arpl   WORD PTR gs:[ebx+0x5f],bp
 97d:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 984:	74 
 985:	72 69                	jb     9f0 <sysEnter_Vector-0x12f610>
 987:	73 6e                	jae    9f7 <sysEnter_Vector-0x12f609>
 989:	75 6d                	jne    9f8 <sysEnter_Vector-0x12f608>
 98b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 98e:	63 2f                	arpl   WORD PTR [edi],bp
 990:	73 74                	jae    a06 <sysEnter_Vector-0x12f5fa>
 992:	72 69                	jb     9fd <sysEnter_Vector-0x12f603>
 994:	6e                   	outs   dx,BYTE PTR ds:[esi]
 995:	67 73 2f             	addr16 jae 9c7 <sysEnter_Vector-0x12f639>
 998:	73 74                	jae    a0e <sysEnter_Vector-0x12f5f2>
 99a:	72 69                	jb     a05 <sysEnter_Vector-0x12f5fb>
 99c:	73 6e                	jae    a0c <sysEnter_Vector-0x12f5f4>
 99e:	75 6d                	jne    a0d <sysEnter_Vector-0x12f5f3>
 9a0:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9a3:	73 74                	jae    a19 <sysEnter_Vector-0x12f5e7>
 9a5:	72 6c                	jb     a13 <sysEnter_Vector-0x12f5ed>
 9a7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9a9:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9ac:	63 2f                	arpl   WORD PTR [edi],bp
 9ae:	73 74                	jae    a24 <sysEnter_Vector-0x12f5dc>
 9b0:	72 69                	jb     a1b <sysEnter_Vector-0x12f5e5>
 9b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9b3:	67 73 2f             	addr16 jae 9e5 <sysEnter_Vector-0x12f61b>
 9b6:	73 74                	jae    a2c <sysEnter_Vector-0x12f5d4>
 9b8:	72 6c                	jb     a26 <sysEnter_Vector-0x12f5da>
 9ba:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9bc:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9bf:	73 74                	jae    a35 <sysEnter_Vector-0x12f5cb>
 9c1:	72 6c                	jb     a2f <sysEnter_Vector-0x12f5d1>
 9c3:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9c5:	49                   	dec    ecx
 9c6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9c9:	72 6e                	jb     a39 <sysEnter_Vector-0x12f5c7>
 9cb:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 9ce:	49                   	dec    ecx
 9cf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9d2:	72 6e                	jb     a42 <sysEnter_Vector-0x12f5be>
 9d4:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 9d7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9da:	63 2f                	arpl   WORD PTR [edi],bp
 9dc:	73 74                	jae    a52 <sysEnter_Vector-0x12f5ae>
 9de:	72 69                	jb     a49 <sysEnter_Vector-0x12f5b7>
 9e0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9e1:	67 73 2f             	addr16 jae a13 <sysEnter_Vector-0x12f5ed>
 9e4:	73 74                	jae    a5a <sysEnter_Vector-0x12f5a6>
 9e6:	72 6e                	jb     a56 <sysEnter_Vector-0x12f5aa>
 9e8:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 9eb:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9ee:	73 72                	jae    a62 <sysEnter_Vector-0x12f59e>
 9f0:	63 2f                	arpl   WORD PTR [edi],bp
 9f2:	73 74                	jae    a68 <sysEnter_Vector-0x12f598>
 9f4:	72 69                	jb     a5f <sysEnter_Vector-0x12f5a1>
 9f6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9f7:	67 73 2f             	addr16 jae a29 <sysEnter_Vector-0x12f5d7>
 9fa:	73 74                	jae    a70 <sysEnter_Vector-0x12f590>
 9fc:	72 6e                	jb     a6c <sysEnter_Vector-0x12f594>
 9fe:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a01:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a04:	73 74                	jae    a7a <sysEnter_Vector-0x12f586>
 a06:	72 6e                	jb     a76 <sysEnter_Vector-0x12f58a>
 a08:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a0b:	49                   	dec    ecx
 a0c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a0f:	72 6e                	jb     a7f <sysEnter_Vector-0x12f581>
 a11:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a14:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a17:	63 2f                	arpl   WORD PTR [edi],bp
 a19:	73 74                	jae    a8f <sysEnter_Vector-0x12f571>
 a1b:	72 69                	jb     a86 <sysEnter_Vector-0x12f57a>
 a1d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a1e:	67 73 2f             	addr16 jae a50 <sysEnter_Vector-0x12f5b0>
 a21:	73 74                	jae    a97 <sysEnter_Vector-0x12f569>
 a23:	72 6f                	jb     a94 <sysEnter_Vector-0x12f56c>
 a25:	75 6c                	jne    a93 <sysEnter_Vector-0x12f56d>
 a27:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a2a:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 a2d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a2e:	66                   	data16
 a2f:	66                   	data16
 a30:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 a33:	74 6c                	je     aa1 <sysEnter_Vector-0x12f55f>
 a35:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 a3c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a3d:	75 6c                	jne    aab <sysEnter_Vector-0x12f555>
 a3f:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 a42:	64                   	fs
 a43:	70 74                	jo     ab9 <sysEnter_Vector-0x12f547>
 a45:	72 00                	jb     a47 <sysEnter_Vector-0x12f5b9>
 a47:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a48:	70 74                	jo     abe <sysEnter_Vector-0x12f542>
 a4a:	72 00                	jb     a4c <sysEnter_Vector-0x12f5b4>
 a4c:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 a4f:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 a53:	63 2f                	arpl   WORD PTR [edi],bp
 a55:	73 74                	jae    acb <sysEnter_Vector-0x12f535>
 a57:	72 69                	jb     ac2 <sysEnter_Vector-0x12f53e>
 a59:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a5a:	67 73 2f             	addr16 jae a8c <sysEnter_Vector-0x12f574>
 a5d:	73 74                	jae    ad3 <sysEnter_Vector-0x12f52d>
 a5f:	72 70                	jb     ad1 <sysEnter_Vector-0x12f52f>
 a61:	61                   	popa   
 a62:	72 74                	jb     ad8 <sysEnter_Vector-0x12f528>
 a64:	73 2e                	jae    a94 <sysEnter_Vector-0x12f56c>
 a66:	63 00                	arpl   WORD PTR [eax],ax
 a68:	73 74                	jae    ade <sysEnter_Vector-0x12f522>
 a6a:	72 6c                	jb     ad8 <sysEnter_Vector-0x12f528>
 a6c:	65                   	gs
 a6d:	66                   	data16
 a6e:	74 00                	je     a70 <sysEnter_Vector-0x12f590>
 a70:	73 72                	jae    ae4 <sysEnter_Vector-0x12f51c>
 a72:	63 2f                	arpl   WORD PTR [edi],bp
 a74:	73 74                	jae    aea <sysEnter_Vector-0x12f516>
 a76:	72 69                	jb     ae1 <sysEnter_Vector-0x12f51f>
 a78:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a79:	67 73 2f             	addr16 jae aab <sysEnter_Vector-0x12f555>
 a7c:	73 74                	jae    af2 <sysEnter_Vector-0x12f50e>
 a7e:	72 74                	jb     af4 <sysEnter_Vector-0x12f50c>
 a80:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a81:	6c                   	ins    BYTE PTR es:[edi],dx
 a82:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a85:	73 74                	jae    afb <sysEnter_Vector-0x12f505>
 a87:	72 74                	jb     afd <sysEnter_Vector-0x12f503>
 a89:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a8a:	6c                   	ins    BYTE PTR es:[edi],dx
 a8b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 a8e:	70 75                	jo     b05 <sysEnter_Vector-0x12f4fb>
 a90:	74 00                	je     a92 <sysEnter_Vector-0x12f56e>
 a92:	73 72                	jae    b06 <sysEnter_Vector-0x12f4fa>
 a94:	63 2f                	arpl   WORD PTR [edi],bp
 a96:	73 74                	jae    b0c <sysEnter_Vector-0x12f4f4>
 a98:	72 69                	jb     b03 <sysEnter_Vector-0x12f4fd>
 a9a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a9b:	67 73 2f             	addr16 jae acd <sysEnter_Vector-0x12f533>
 a9e:	73 74                	jae    b14 <sysEnter_Vector-0x12f4ec>
 aa0:	72 74                	jb     b16 <sysEnter_Vector-0x12f4ea>
 aa2:	72 69                	jb     b0d <sysEnter_Vector-0x12f4f3>
 aa4:	6d                   	ins    DWORD PTR es:[edi],dx
 aa5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 aa8:	73 74                	jae    b1e <sysEnter_Vector-0x12f4e2>
 aaa:	72 74                	jb     b20 <sysEnter_Vector-0x12f4e0>
 aac:	72 69                	jb     b17 <sysEnter_Vector-0x12f4e9>
 aae:	6d                   	ins    DWORD PTR es:[edi],dx
 aaf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 ab2:	72 73                	jb     b27 <sysEnter_Vector-0x12f4d9>
 ab4:	74 72                	je     b28 <sysEnter_Vector-0x12f4d8>
 ab6:	49                   	dec    ecx
 ab7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 aba:	63 2f                	arpl   WORD PTR [edi],bp
 abc:	73 74                	jae    b32 <sysEnter_Vector-0x12f4ce>
 abe:	72 73                	jb     b33 <sysEnter_Vector-0x12f4cd>
 ac0:	74 72                	je     b34 <sysEnter_Vector-0x12f4cc>
 ac2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ac5:	72 63                	jb     b2a <sysEnter_Vector-0x12f4d6>
 ac7:	73 69                	jae    b32 <sysEnter_Vector-0x12f4ce>
 ac9:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 acd:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 ad0:	72 69                	jb     b3b <sysEnter_Vector-0x12f4c5>
 ad2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ad3:	67 00 73 74          	add    BYTE PTR [bp+di+0x74],dh
 ad7:	72 73                	jb     b4c <sysEnter_Vector-0x12f4b4>
 ad9:	74 72                	je     b4d <sysEnter_Vector-0x12f4b3>
 adb:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
 adf:	61                   	popa   
 ae0:	6c                   	ins    BYTE PTR es:[edi],dx
 ae1:	74 69                	je     b4c <sysEnter_Vector-0x12f4b4>
 ae3:	6d                   	ins    DWORD PTR es:[edi],dx
 ae4:	65 00 64 61 79       	add    BYTE PTR gs:[ecx+eiz*2+0x79],ah
 ae9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 aea:	6f                   	outs   dx,DWORD PTR ds:[esi]
 aeb:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 aee:	73 74                	jae    b64 <sysEnter_Vector-0x12f49c>
 af0:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 af3:	73 00                	jae    af5 <sysEnter_Vector-0x12f50b>
 af5:	67 6d                	ins    DWORD PTR es:[di],dx
 af7:	74 69                	je     b62 <sysEnter_Vector-0x12f49e>
 af9:	6d                   	ins    DWORD PTR es:[edi],dx
 afa:	65                   	gs
 afb:	5f                   	pop    edi
 afc:	72 00                	jb     afe <sysEnter_Vector-0x12f502>
 afe:	74 69                	je     b69 <sysEnter_Vector-0x12f497>
 b00:	6d                   	ins    DWORD PTR es:[edi],dx
 b01:	65                   	gs
 b02:	72 00                	jb     b04 <sysEnter_Vector-0x12f4fc>
 b04:	6c                   	ins    BYTE PTR es:[edi],dx
 b05:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b06:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b09:	74 69                	je     b74 <sysEnter_Vector-0x12f48c>
 b0b:	6d                   	ins    DWORD PTR es:[edi],dx
 b0c:	65                   	gs
 b0d:	5f                   	pop    edi
 b0e:	72 00                	jb     b10 <sysEnter_Vector-0x12f4f0>
 b10:	5f                   	pop    edi
 b11:	74 7a                	je     b8d <sysEnter_Vector-0x12f473>
 b13:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b14:	61                   	popa   
 b15:	6d                   	ins    DWORD PTR es:[edi],dx
 b16:	65 00 5f 79          	add    BYTE PTR gs:[edi+0x79],bl
 b1a:	74 61                	je     b7d <sysEnter_Vector-0x12f483>
 b1c:	62 00                	bound  eax,QWORD PTR [eax]
 b1e:	74 69                	je     b89 <sysEnter_Vector-0x12f477>
 b20:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 b23:	54                   	push   esp
 b24:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b25:	57                   	push   edi
 b26:	61                   	popa   
 b27:	69 74 00 6d 6b 74 69 	imul   esi,DWORD PTR [eax+eax*1+0x6d],0x6d69746b
 b2e:	6d 
 b2f:	65 00 64 61 79       	add    BYTE PTR gs:[ecx+eiz*2+0x79],ah
 b34:	63 6c 6f 63          	arpl   WORD PTR [edi+ebp*2+0x63],bp
 b38:	6b 00 5f             	imul   eax,DWORD PTR [eax],0x5f
 b3b:	64                   	fs
 b3c:	61                   	popa   
 b3d:	79 6c                	jns    bab <sysEnter_Vector-0x12f455>
 b3f:	69 67 68 74 00 6f 76 	imul   esp,DWORD PTR [edi+0x68],0x766f0074
 b46:	65                   	gs
 b47:	72 66                	jb     baf <sysEnter_Vector-0x12f451>
 b49:	6c                   	ins    BYTE PTR es:[edi],dx
 b4a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b4b:	77 00                	ja     b4d <sysEnter_Vector-0x12f4b3>
 b4d:	6d                   	ins    DWORD PTR es:[edi],dx
 b4e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b4f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b50:	74 68                	je     bba <sysEnter_Vector-0x12f446>
 b52:	00 74 6d 62          	add    BYTE PTR [ebp+ebp*2+0x62],dh
 b56:	75 66                	jne    bbe <sysEnter_Vector-0x12f442>
 b58:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b5b:	63 2f                	arpl   WORD PTR [edi],bp
 b5d:	74 69                	je     bc8 <sysEnter_Vector-0x12f438>
 b5f:	6d                   	ins    DWORD PTR es:[edi],dx
 b60:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...
